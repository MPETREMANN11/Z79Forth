I, Francois Laagel, hereby testify that to the best of my knowledge,
Z79Forth/A is an ANS Forth System matching the minimum requirements
as stated by ANSI-X3.215-1994.

Implementation Status Report:

-	Not supported
E	EEPROM resident
C	CompactFlash resident

1. Core word set
E	!           *store*                 CORE
E	#           *number-sign*           CORE
E	#>          *number-sign-greater*   CORE
E	#S          *number-sign-s*         CORE
E	'           *tick*                  CORE
E	(           *paren*                 CORE
E	*           *star*                  CORE
E	*/          *star-slash*            CORE
E	*/MOD       *star-slash-mod*        CORE
E	+           *plus*                  CORE
E	+!          *plus-store*            CORE
E	+LOOP       *plus-loop*             CORE
E	,           *comma*                 CORE
E	-           *minus*                 CORE
E	.           *dot*                   CORE
E	."          *dot-quote*             CORE
E	/           *slash*                 CORE
E	/MOD        *slash-mod*             CORE
E	0<          *zero-less*             CORE
E	0=          *zero-equals*           CORE
E	1+          *one-plus*              CORE
E	1-          *one-minus*             CORE
E	2!          *two-store*             CORE
E	2*          *two-star*              CORE
E	2/          *two-slash*             CORE
E	2@          *two-fetch*             CORE
E	2DROP       *two-drop*              CORE
E	2DUP        *two-dupe*              CORE
E	2OVER       *two-over*              CORE
E	2SWAP       *two-swap*              CORE
E	:           *colon*                 CORE
E	;           *semicolon*             CORE
E	<           *less-than*             CORE
E	<#          *less-number-sign*      CORE
E	=           *equals*                CORE
E	>           *greater-than*          CORE
C	>BODY       *to-body*               CORE
E	>IN         *to-in*                 CORE
C	>NUMBER     *to-number*             CORE
E	>R          *to-r*                  CORE
E	?DUP        *question-dupe*         CORE
E	@           *fetch*                 CORE
E	ABORT       -                       CORE
C	ABORT"      *abort-quote*           CORE
E	ABS         *abs*                   CORE
E	ACCEPT      -                       CORE
E	ALIGN       -                       CORE
E	ALIGNED     -                       CORE
E	ALLOT       -                       CORE
E	AND         -                       CORE
E	BASE        -                       CORE
E	BEGIN       -                       CORE
E	BL          *b-l*                   CORE
E	C!          *c-store*               CORE
E	C,          *c-comma*               CORE
E	C@          *c-fetch*               CORE
E	CELL+       *cell-plus*             CORE
E	CELLS       -                       CORE
E	CHAR        *char*                  CORE
E	CHAR+       *char-plus*             CORE
E	CHARS       *chars*                 CORE
E	CONSTANT    -                       CORE
E	COUNT       -                       CORE
E	CR          *c-r*                   CORE
E	CREATE      -                       CORE
E	DECIMAL     -                       CORE
E	DEPTH       -                       CORE
E	DO          -                       CORE
E	DOES>       *does*                  CORE
E	DROP        -                       CORE
E	DUP         *dupe*                  CORE
E	ELSE        -                       CORE
E	EMIT        -                       CORE
C	ENVIRONMENT? *environment-query*    CORE
E	EVALUATE    -                       CORE
E	EXECUTE     -                       CORE
E	EXIT        -                       CORE
E	FILL        -                       CORE
E	FIND        -                       CORE
E	FM/MOD      *f-m-slash-mod*         CORE
E	HERE        -                       CORE
E	HOLD        -                       CORE
E	I           -                       CORE
E	IF          -                       CORE
E	IMMEDIATE   -                       CORE
E	INVERT      -                       CORE
E	J           -                       CORE
E	KEY         -                       CORE
E	LEAVE       -                       CORE
E	LITERAL     -                       CORE
E	LOOP        -                       CORE
C	LSHIFT      *l-shift*               CORE
E	M*          *m-star*                CORE
E	MAX         -                       CORE
E	MIN         -                       CORE
E	MOD         -                       CORE
E	MOVE        -                       CORE
E	NEGATE      -                       CORE
E	OR          -                       CORE
E	OVER        -                       CORE
E	POSTPONE    -                       CORE
E	QUIT        -                       CORE
E	R>          *r-from*                CORE
E	R@          *r-fetch*               CORE
E	RECURSE     -                       CORE
E	REPEAT      -                       CORE
E	ROT         *rote*                  CORE
C	RSHIFT      *r-shift*               CORE
E	S"          *s-quote*               CORE
E	S>D         *s-to-d*                CORE
E	SIGN        -                       CORE
E	SM/REM      *s-m-slash-rem*         CORE
E	SOURCE      -                       CORE
E	SPACE       -                       CORE
E	SPACES      -                       CORE
E	STATE       -                       CORE
E	SWAP        -                       CORE
E	THEN        -                       CORE
E	TYPE        -                       CORE
E	U.          *u-dot*                 CORE
E	U<          *u-less-than*           CORE
E	UM*         *u-m-star*              CORE
E	UM/MOD      *u-m-slash-mod*         CORE
E	UNLOOP      -                       CORE
E	UNTIL       -                       CORE
E	VARIABLE    -                       CORE
E	WHILE       -                       CORE
E	WORD        -                       CORE
E	XOR         *x-or*                  CORE
E	[           *left-bracket*          CORE
E	[']         *bracket-tick*          CORE
E	[CHAR]      *bracket-char*          CORE
E	]           *right-bracket*         CORE

2. Core Extension word set
E	0<>         *zero-not-equals*       CORE_EXT
E	AGAIN       -                       CORE_EXT
-	CASE        -                       CORE_EXT
-	CONVERT     -                       CORE_EXT
C	ERASE       -                       CORE_EXT
-	EXPECT      -                       CORE_EXT
E	FALSE       -                       CORE_EXT
E	HEX         -                       CORE_EXT
E	MARKER      -                       CORE_EXT
E	NIP         -                       CORE_EXT
-	OF          -                       CORE_EXT
E	PAD         -                       CORE_EXT
-	PARSE       -                       CORE_EXT
E	PICK        -                       CORE_EXT
-	QUERY       -                       CORE_EXT
-	REFILL      -                       CORE_EXT
E	ROLL        -                       CORE_EXT
-	SAVE-INPUT  -                       CORE_EXT
-	SPAN        -                       CORE_EXT
C	TO          -                       CORE_EXT
E	TRUE        -                       CORE_EXT
E	TUCK        -                       CORE_EXT
C	UNUSED      -                       CORE_EXT
C	VALUE       -                       CORE_EXT
C	WITHIN      -                       CORE_EXT
-	RESTORE-INPUT -                     CORE_EXT
C	.R          *dot-r*                 CORE_EXT
-	TIB         *t-i-b*                 CORE_EXT
-	ENDOF       *end-of*                CORE_EXT
-	C"          *c-quote*               CORE_EXT
E	U.R         *u-dot-r*               CORE_EXT
C	2>R         *two-to-r*              CORE_EXT
-	ENDCASE     *end-case*              CORE_EXT
E	\           *backslash*             CORE_EXT
C	.(          *dot-paren*             CORE_EXT
C	2R>         *two-r-from*            CORE_EXT
E	<>          *not-equals*            CORE_EXT
-	SOURCE-ID   *source-i-d*            CORE_EXT
C	2R@         *two-r-fetch*           CORE_EXT
E	?DO         *question-do*           CORE_EXT
E	0>          *zero-greater*          CORE_EXT
-	#TIB        *number-t-i-b*          CORE_EXT
E	COMPILE,    *compile-comma*         CORE_EXT
E	:NONAME     *colon-no-name*         CORE_EXT
E	U>          *u-greater-than*        CORE_EXT
-	[COMPILE]   *bracket-compile*       CORE_EXT

3. Block word set
E	BLK         *b-l-k*                 BLOCK
E	SAVE-BUFFERS -                      BLOCK
E	BLOCK       -                       BLOCK
E	BUFFER      -                       BLOCK
E	EVALUATE    -                       BLOCK
E	FLUSH       -                       BLOCK
E	LOAD        -                       BLOCK
E	UPDATE      -                       BLOCK

4. Block Extension word set
E	LIST        -                       BLOCK_EXT
-	REFILL      -                       BLOCK_EXT
E	THRU        -                       BLOCK_EXT
E	EMPTY-BUFFERS -                     BLOCK_EXT
E	SCR         *s-c-r*                 BLOCK_EXT

5. Double-Number word set
-	2CONSTANT   *two-constant*          DOUBLE
-	2LITERAL    *two-literal*           DOUBLE
-	2VARIABLE   *two-variable*          DOUBLE
E	D+          *d-plus*                DOUBLE
E	D-          *d-minus*               DOUBLE
-	D.          *d-dot*                 DOUBLE
-	D.R         *d-dot-r*               DOUBLE
-	D0<         *d-zero-less*           DOUBLE
E	D0=         *d-zero-equals*         DOUBLE
-	D2*         *d-two-star*            DOUBLE
-	D2/         *d-two-slash*           DOUBLE
E	D<          *d-less-than*           DOUBLE
-	D=          *d-equals*              DOUBLE
-	D>S         *d-to-s*                DOUBLE
-	DABS        *d-abs*                 DOUBLE
-	DMAX        *d-max*                 DOUBLE
-	DMIN        *d-min*                 DOUBLE
E	DNEGATE     *d-negate*              DOUBLE
-	M*/         *m-star-slash*          DOUBLE
-	M+          *m-plus*                DOUBLE

6. Double-Number Extension word set
-	2ROT        *two-rote*              DOUBLE_EXT
-	DU<         *d-u-less*              DOUBLE_EXT

7. Facility word set
E	KEY?        *key-question*          FACILITY
-	AT-XY       *at-x-y*                FACILITY
E	PAGE        -                       FACILITY

8. Facility Extension word set
E	MS          -                       FACILITY_EXT
-	EKEY        *e-key*                 FACILITY_EXT
-	EKEY>CHAR   *e-key-to-char*         FACILITY_EXT
-	EMIT?       *emit-question*         FACILITY_EXT
-	TIME&DATE   *time-and-date*         FACILITY_EXT
-	EKEY?       *e-key-question*        FACILITY_EXT

9. Programming-Tools word set
E	.S          *dot-s*                 TOOLS
E	?           *question*              TOOLS
C	DUMP        -                       TOOLS
C	SEE         -                       TOOLS
E	WORDS       -                       TOOLS

10. Programming-Tools Extension word set
-	;CODE       *semicolon-code*        TOOLS_EXT
E	AHEAD       -                       TOOLS_EXT
-	ASSEMBLER   -                       TOOLS_EXT
E	BYE         -                       TOOLS_EXT
-	CODE        -                       TOOLS_EXT
-	CS-PICK     *c-s-pick*              TOOLS_EXT
-	CS-ROLL     *c-s-roll*              TOOLS_EXT
-	EDITOR      -                       TOOLS_EXT
-	FORGET      -                       TOOLS_EXT
E	STATE       -                       TOOLS_EXT
-	[ELSE]      *bracket-else*          TOOLS_EXT
-	[IF]        *bracket-if*            TOOLS_EXT
-	[THEN]      *bracket-then*          TOOLS_EXT

11. String word set
C	-TRAILING   *dash-trailing*         STRING
C	/STRING     *slash-string*          STRING
E	BLANK       -                       STRING
E	CMOVE       *c-move*                STRING
E	CMOVE>      *c-move-up*             STRING
-	COMPARE     -                       STRING
-	SLITERAL    -                       STRING

