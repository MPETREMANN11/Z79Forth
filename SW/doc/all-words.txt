I, Francois Laagel, hereby testify that, to the best of my knowledge,
Z79Forth/A is an ANS Forth System matching the minimum requirements
as stated by ANSI-X3.215-1994.

The standard specification is available at http://lars.nocrew.org/dpans/

Implementation Status Report:

-	Not supported
E	EEPROM resident
C	CompactFlash resident

1. Core word set
----------------

E	<           *less-than*             CORE
E	<#          *less-number-sign*      CORE
E	=           *equals*                CORE
E	>           *greater-than*          CORE
E	-           *minus*                 CORE
E	,           *comma*                 CORE
E	;           *semicolon*             CORE
E	:           *colon*                 CORE
E	!           *store*                 CORE
E	/           *slash*                 CORE
E	.           *dot*                   CORE
E	."          *dot-quote*             CORE
E	'           *tick*                  CORE
E	(           *paren*                 CORE
E	[           *left-bracket*          CORE
E	[']         *bracket-tick*          CORE
E	]           *right-bracket*         CORE
E	@           *fetch*                 CORE
E	*           *star*                  CORE
E	*/          *star-slash*            CORE
E	#           *number-sign*           CORE
E	#>          *number-sign-greater*   CORE
E	+           *plus*                  CORE
E	+!          *plus-store*            CORE
E	0<          *zero-less*             CORE
E	0=          *zero-equals*           CORE
E	1-          *one-minus*             CORE
E	1+          *one-plus*              CORE
E	2!          *two-store*             CORE
E	2/          *two-slash*             CORE
E	2@          *two-fetch*             CORE
E	2*          *two-star*              CORE
E	2DROP       *two-drop*              CORE
E	2DUP        *two-dupe*              CORE
E	2OVER       *two-over*              CORE
E	2SWAP       *two-swap*              CORE
E	ABORT       -                       CORE
C	ABORT"      *abort-quote*           CORE
E	ABS         *abs*                   CORE
E	ACCEPT      -                       CORE
E	ALIGN       -                       CORE
E	ALIGNED     -                       CORE
E	ALLOT       -                       CORE
E	AND         -                       CORE
E	BASE        -                       CORE
E	BEGIN       -                       CORE
E	BL          *b-l*                   CORE
C	>BODY       *to-body*               CORE
E	C,          *c-comma*               CORE
E	C!          *c-store*               CORE
E	C@          *c-fetch*               CORE
E	CELL+       *cell-plus*             CORE
E	CELLS       -                       CORE
E	CHAR        *char*                  CORE
E	[CHAR]      *bracket-char*          CORE
E	CHAR+       *char-plus*             CORE
E	CHARS       *chars*                 CORE
E	CONSTANT    -                       CORE
E	COUNT       -                       CORE
E	CR          *c-r*                   CORE
E	CREATE      -                       CORE
E	DECIMAL     -                       CORE
E	DEPTH       -                       CORE
E	DO          -                       CORE
E	DOES>       *does*                  CORE
E	DROP        -                       CORE
E	DUP         *dupe*                  CORE
E	?DUP        *question-dupe*         CORE
E	ELSE        -                       CORE
E	EMIT        -                       CORE
C	ENVIRONMENT? *environment-query*    CORE
E	EVALUATE    -                       CORE
E	EXECUTE     -                       CORE
E	EXIT        -                       CORE
E	FILL        -                       CORE
E	FIND        -                       CORE
E	FM/MOD      *f-m-slash-mod*         CORE
E	HERE        -                       CORE
E	HOLD        -                       CORE
E	I           -                       CORE
E	IF          -                       CORE
E	IMMEDIATE   -                       CORE
E	>IN         *to-in*                 CORE
E	INVERT      -                       CORE
E	J           -                       CORE
E	KEY         -                       CORE
E	LEAVE       -                       CORE
E	LITERAL     -                       CORE
E	LOOP        -                       CORE
E	+LOOP       *plus-loop*             CORE
C	LSHIFT      *l-shift*               CORE
E	M*          *m-star*                CORE
E	MAX         -                       CORE
E	MIN         -                       CORE
E	MOD         -                       CORE
E	/MOD        *slash-mod*             CORE
E	*/MOD       *star-slash-mod*        CORE
E	MOVE        -                       CORE
E	NEGATE      -                       CORE
E	>NUMBER     *to-number*             CORE
E	OR          -                       CORE
E	OVER        -                       CORE
E	POSTPONE    -                       CORE
E	QUIT        -                       CORE
E	>R          *to-r*                  CORE
E	R>          *r-from*                CORE
E	R@          *r-fetch*               CORE
E	RECURSE     -                       CORE
E	REPEAT      -                       CORE
E	ROT         *rote*                  CORE
C	RSHIFT      *r-shift*               CORE
E	#S          *number-sign-s*         CORE
E	S"          *s-quote*               CORE
E	S>D         *s-to-d*                CORE
E	SIGN        -                       CORE
E	SM/REM      *s-m-slash-rem*         CORE
E	SOURCE      -                       CORE
E	SPACE       -                       CORE
E	SPACES      -                       CORE
E	STATE       -                       CORE
E	SWAP        -                       CORE
E	THEN        -                       CORE
E	TYPE        -                       CORE
E	U<          *u-less-than*           CORE
E	U.          *u-dot*                 CORE
E	UM*         *u-m-star*              CORE
E	UM/MOD      *u-m-slash-mod*         CORE
E	UNLOOP      -                       CORE
E	UNTIL       -                       CORE
E	VARIABLE    -                       CORE
E	WHILE       -                       CORE
E	WORD        -                       CORE
E	XOR         *x-or*                  CORE

2. Core Extension word set
--------------------------

E	<>          *not-equals*            CORE_EXT
C	.(          *dot-paren*             CORE_EXT
E	\           *backslash*             CORE_EXT
E	0<>         *zero-not-equals*       CORE_EXT
E	0>          *zero-greater*          CORE_EXT
C	2>R         *two-to-r*              CORE_EXT
C	2R>         *two-r-from*            CORE_EXT
C	2R@         *two-r-fetch*           CORE_EXT
E	AGAIN       -                       CORE_EXT
-	C"          *c-quote*               CORE_EXT
-	CASE        -                       CORE_EXT
-	[COMPILE]   *bracket-compile*       CORE_EXT
E	COMPILE,    *compile-comma*         CORE_EXT
-	CONVERT     -                       CORE_EXT
E	?DO         *question-do*           CORE_EXT
-	ENDCASE     *end-case*              CORE_EXT
-	ENDOF       *end-of*                CORE_EXT
C	ERASE       -                       CORE_EXT
-	EXPECT      -                       CORE_EXT
E	FALSE       -                       CORE_EXT
E	HEX         -                       CORE_EXT
E	MARKER      -                       CORE_EXT
E	NIP         -                       CORE_EXT
E	:NONAME     *colon-no-name*         CORE_EXT
-	OF          -                       CORE_EXT
E	PAD         -                       CORE_EXT
-	PARSE       -                       CORE_EXT
E	PICK        -                       CORE_EXT
-	QUERY       -                       CORE_EXT
E	.R          *dot-r*                 CORE_EXT
E	REFILL      -                       CORE_EXT
-	RESTORE-INPUT -                     CORE_EXT
E	ROLL        -                       CORE_EXT
-	SAVE-INPUT  -                       CORE_EXT
E	SOURCE-ID   *source-i-d*            CORE_EXT
-	SPAN        -                       CORE_EXT
-	TIB         *t-i-b*                 CORE_EXT
-	#TIB        *number-t-i-b*          CORE_EXT
C	TO          -                       CORE_EXT
E	TRUE        -                       CORE_EXT
E	TUCK        -                       CORE_EXT
E	U>          *u-greater-than*        CORE_EXT
C	UNUSED      -                       CORE_EXT
E	U.R         *u-dot-r*               CORE_EXT
C	VALUE       -                       CORE_EXT
C	WITHIN      -                       CORE_EXT

3. Block word set
-----------------

E	BLK         *b-l-k*                 BLOCK
E	BLOCK       -                       BLOCK
E	BUFFER      -                       BLOCK
E	EVALUATE    -                       BLOCK
E	FLUSH       -                       BLOCK
E	LOAD        -                       BLOCK
E	UPDATE      -                       BLOCK
E	SAVE-BUFFERS -                      BLOCK

4. Block Extension word set
---------------------------

E	EMPTY-BUFFERS -                     BLOCK_EXT
E	LIST        -                       BLOCK_EXT
E	REFILL      -                       BLOCK_EXT
E	SCR         *s-c-r*                 BLOCK_EXT
E	THRU        -                       BLOCK_EXT

5. Double-Number word set
-------------------------

-	2CONSTANT   *two-constant*          DOUBLE
-	2LITERAL    *two-literal*           DOUBLE
-	2VARIABLE   *two-variable*          DOUBLE
E	D<          *d-less-than*           DOUBLE
-	D=          *d-equals*              DOUBLE
E	D-          *d-minus*               DOUBLE
-	D.          *d-dot*                 DOUBLE
E	D+          *d-plus*                DOUBLE
-	D0<         *d-zero-less*           DOUBLE
E	D0=         *d-zero-equals*         DOUBLE
-	D2/         *d-two-slash*           DOUBLE
-	D2*         *d-two-star*            DOUBLE
-	DABS        *d-abs*                 DOUBLE
-	DMAX        *d-max*                 DOUBLE
-	DMIN        *d-min*                 DOUBLE
E	DNEGATE     *d-negate*              DOUBLE
-	D.R         *d-dot-r*               DOUBLE
-	D>S         *d-to-s*                DOUBLE
-	M*/         *m-star-slash*          DOUBLE
-	M+          *m-plus*                DOUBLE

6. Facility word set
--------------------

-	AT-XY       *at-x-y*                FACILITY
E	KEY?        *key-question*          FACILITY
E	PAGE        -                       FACILITY

7. Facility Extension word set
------------------------------

-	EKEY        *e-key*                 FACILITY_EXT
-	EKEY?       *e-key-question*        FACILITY_EXT
-	EKEY>CHAR   *e-key-to-char*         FACILITY_EXT
-	EMIT?       *emit-question*         FACILITY_EXT
E	MS          -                       FACILITY_EXT
-	TIME&DATE   *time-and-date*         FACILITY_EXT

8. Programming-Tools word set
-----------------------------

E	.S          *dot-s*                 TOOLS
E	?           *question*              TOOLS
C	DUMP        -                       TOOLS
C	SEE         -                       TOOLS
E	WORDS       -                       TOOLS

9. Programming-Tools Extension word set
---------------------------------------

-	;CODE       *semicolon-code*        TOOLS_EXT
-	[ELSE]      *bracket-else*          TOOLS_EXT
-	[IF]        *bracket-if*            TOOLS_EXT
-	[THEN]      *bracket-then*          TOOLS_EXT
E	AHEAD       -                       TOOLS_EXT
-	ASSEMBLER   -                       TOOLS_EXT
E	BYE         -                       TOOLS_EXT
-	CODE        -                       TOOLS_EXT
-	CS-PICK     *c-s-pick*              TOOLS_EXT
-	CS-ROLL     *c-s-roll*              TOOLS_EXT
-	EDITOR      -                       TOOLS_EXT
-	FORGET      -                       TOOLS_EXT
E	STATE       -                       TOOLS_EXT

Note: BYE will reset the system. Dirty (UPDATEd) buffers, if any, will not be
flushed to mass storage.

10. String word set
-------------------

C	-TRAILING   *dash-trailing*         STRING
C	/STRING     *slash-string*          STRING
E	BLANK       -                       STRING
E	CMOVE       *c-move*                STRING
E	CMOVE>      *c-move-up*             STRING
C	COMPARE     -                       STRING
-	SLITERAL    -                       STRING

11. Forth2012 words
-------------------

See https://forth-standard.org for more information.

ACTION-OF DEFER DEFER! DEFER@ IS

12. 79-STANDARD words
---------------------

See SW/reference/FORTH-79.TXT for more information.

I' INDEX INTERPRET K LAST LINE NOT SHIFT

13. Non-standard words
----------------------

<=	( n1 n2 -- flag ) Signed comparison operator. Necessary to be able to
	run the ORNL sieve benchmark.
.'	( addr -- ) a SwiftForth word which displays the name of the nearest
	definition before addr, and the offset of addr from the beginning of
	that definition. “dot-tick”
CC	( -- 00nn ) A word only defined in an EEPROM image that was compiled
	in DEBUG mode. The least significant byte of the cell returned will
	reflect the value of the 6309 condition code register upon the execution
	of the CMP2 subroutine (executed by U<, U>, <, >).
-ROT	Equivalent to : -ROT ROT ROT ;
ICHECK	( -- ) If the running EEPROM image was compiled with a non-zero RELFEAT
	(see constants.asm), this word will walk through the dictionary linked
	list and verify that the definition of every monitored word has not
	been altered since it was defined. Monitored words are all words
	defined by :, all constants and all CREATEd words to which MONITOR has
	been applied. Note that you can, conceivably, monitor a VARIABLE but it
	makes very little sense since the checksum would be computed at
	MONITOR's execution time and every subsequent ICHECK invokation would
	fail if that variable's value had been altered in the meantime.
J'	Returns the fourth item from the return stack.
MONITOR	( -- ) If the running EEPROM image was compiled with a non-zero RELFEAT
	(see constants.asm), this will compute the value of a byte checksum
	and store it into the latest defined word's header. This works
	similarly to the IMMEDIATE and RESTRICT words, in that it only applies
	to the last defined word and will set a flag in that word's header.
NCLR    ( i*x -- empty ) Clears the data stack.
PAYLOAD	( -- nbytes ) This primitive output is only relevant after an invokation
	of ' or FIND. It will retrieve a word's definition length (code section)
	corresponding to the latest dictionary search. This word is of marginal
	importance. However, it facilitates an implementation of the
	disassembler in which that payload does not have to be specified at
	DIS's invokation time (see SW/examples/dis.4th for a minimal
	disassembler implementation).
RCLR	( R: i*x -- empty ) Clears the return stack.
RESTRICT ( -- ) Makes the latest non-anonymous definition available in
	compilation mode only.
RTC@	( rtcregoffset -- rtcbyteval ) Retrieves the contents of an RTC
	register. Please note that RTC support in Z79Forth/A is not official.
RTC!	( rtcbyteval rtcregoffset -- ) Writes to an RTC register. Please note
	that RTC support in Z79Forth/A is not official.
S	( -- sreg ) Returns the contents of the system stack pointer (S).
S@	( -- retaddr ) Returns the return address to the caller's.
        This is most useful for debugging purposes when used in conjunction
        with .' Please note that for .' ti spuuly useful symbolic information,
	RELFEAT should have been enabled at compilation time (default).
TICKS	( -- tickslow tickshigh ) Stacks up a double cell containing the
	number of ticks since boot time. There are 64 ticks per second. Please
	note that RTC support in Z79Forth/A is not official.
UNMONITOR ( -- ) Marks the latest non-anonymous definition as a non-target
	for integrity checks by ICHECK. The reason for this word to exist is
	to support VALUEs (see SW/examples/ansiextern.4th).
UNLESS	Perl inspired. Functionally equivalent to:
	: UNLESS ['] 0= COMPILE, POSTPONE IF ; IMMEDIATE RESTRICT
	The code block covered by this conditional execution primitive should
	be terminated by a matching THEN.

14. Additional features
-----------------------

Numeric literals can be prefixed by a character indicating the BASE in which
they are to be interpreted/compiled. Please note that this is a straight
prefix, in that if a minus sign is meant, it is to be placed after the BASE
prefix. BASE prefix characters are:

$       for hexadecimal.
& or #  for decimal.
@       for octal.
%       for binary.

An optional trailing period can be used to indicate that a double cell number
is meant.

