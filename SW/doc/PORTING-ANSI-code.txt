                      Porting ANSI Code to Z79Forth

There are a number of gotchas when porting ANSI code to Z79Forth.

- FIND exists in both but with different semantics.

- MOVE exists in both but with different semantics. The ANSI MOVE operates
  on the basis of a byte count; 79-STANDARD operates on cells. An ANSI
  compliant MOVE can be defined with:

	: MOVE ( addr1 addr2 u -- )
          DUP 2OVER                       \ addr1 addr2 u u addr1 addr2
          SWAP -                          \ addr1 addr2 u u addr2-addr1
          SWAP                            \ addr1 addr2 u addr2-addr1 u
          U< IF CMOVE> ELSE CMOVE THEN ;

- The value returned by predicates for <TRUE> is different. ANSI and FORTH-83
  have -1, whereas 79-STANDARD has 1.

- PICK and ROLL arguments start at 1 in 79-STANDARD. They begin at 0 in ANSI
  and FORTH-83.

- The 79-STANDARD FLUSH is a straight alias to SAVE-BUFFERS. The ANSI flavour
  of FLUSH has the same semantics but also requires that the buffers be
  unassigned. This can be achieved with:

  : FLUSH FLUSH EMPTY-BUFFERS ;

###############################################################################
The ANSI predicates provided by Z79Forth are KEY? U> and WITHIN. They return
the 79-STANDARD version of true, i.e. 1. When porting code originally designed
for an ANSI environment, the ANSI true can be implemented by simply having the
following definitions:

        : 0<> IF -1 ELSE 0 THEN ;
        : KEY? KEY? 0<> ;
        : WITHIN WITHIN 0<> ;
        : U> U> 0<> ;

This can be useful when dealing with code that has "environmental
dependencies."

###############################################################################
POSTPONE is supported natively.

###############################################################################
ANSI VALUE objects are constants whose value can be redefined by resorting to
TO. For instance:

100 VALUE radius
[Some code]
200 TO radius

This can be achieved (in a very implementation specific way) in Z79Forth with:

: VALUE CONSTANT ;
: TO ( inputstream: <symbol> -- ) ( execution: nn -- )
  >IN @                       \ symSrcStartAddress
  FIND  ?DUP  IF              \ symSrcStartAddress\xt
    NIP  STATE @  IF          \ We are compiling
      POSTPONE LITERAL  POSTPONE 1+  POSTPONE !
    ELSE                      \ We are interpreting
      1+ !
    THEN
  ELSE                        \ symSrcStartAddress
    >IN !                     \ Symbol not found
  THEN ; IMMEDIATE

However, if the reliability feature is configured, ICHECK will report a code
integrity check failure, should the original value of the constant ever be
altered.

See https://forth-standard.org/standard/testsuite#test:core:VALUE for test
patterns. This particular implementation passes the test patterns but the
fact remains that "an ambiguous condition exists if <symbol> is not defined".
In cleartext, under Z79Forth, you will get an 'Undefined' error but <nn>, if
present on the stack, will not be dropped.

###############################################################################
In Z79Forth FIND is a straight equivalent of the ANSI/FORTH-83 '. However,
since ' has a very specific 79-STANDARD meaning that cannot be provided
by an implementation where there is no parameter field, ' cannot be officially
supported. See "Test patterns" for DEFER/IS below for more.

###############################################################################
RSHIFT/LSHIFT can be implemented on the top of the 79-STANDARD SHIFT word as:

: LSHIFT SHIFT ;
: RSHIFT NEGATE SHIFT ;

###############################################################################
2R@/2R>/2>R can be implemented in Z79Forth as:

: 2R@ I' I ;        RESTRICT
: 2R> R> R> SWAP ;  RESTRICT
: 2>R SWAP >R >R ;  RESTRICT

These words can be invoked in compilation mode only.

###############################################################################
DEFER/IS deal with execution tokens management. This is an implementation based
on the specifications available at https://forth-standard.org.

: DEFER ( "name" -- )
  CREATE ['] ABORT ,
  DOES> ( ... -- ... )
    @ EXECUTE ;
: DEFER! ( xt1 xt2 -- ) 9 + ! ;         \ Z79Forth specific
: IS ( xt "<spaces>name" -- ) STATE @ IF
    POSTPONE [']   POSTPONE DEFER!
  ELSE
    FIND DEFER!
  THEN
; IMMEDIATE

Application example from the "Forth Programmer's Handbook" by Conklin/Rather
(Forth Inc.):

DEFER numeral
: t1 1 . ;
: t2 2 . ;
: one ['] t1 IS numeral ;
: two ['] t2 IS numeral ;
one numeral
\ 1 is printed.
two numeral
\ 2 is printed.

Test patterns (this requires SW/testsuite/tester.4th to have been loaded
previously):

: ' FIND ;
T{ DEFER defer2 ->   }T
T{ ' * ' defer2 DEFER! -> }T
T{   2 3 defer2 -> 6 }T
T{ ' + IS defer2 ->   }T
T{    1 2 defer2 -> 3 }T 

###############################################################################
INTERPRET is the closest thing to the ANSI EVALUATE word. But the respective
specifications are quite different. The definition of a proper mapping from one
to the other is left as an exercise to the reader.

###############################################################################
--> is the closest thing to the ANSI REFILL word. But the respective
specifications are quite different. The definition of a proper mapping from one
to the other is left as an exercise to the reader.

###############################################################################
>NUMBER cannot be emulated based on CONVERT.

###############################################################################
FORTH-83/ANSI Floored division support

Historically, the polled Z79Forth reference board (version 2.1 schematics)'s
firmware implemented division on the top of the hardware supported features of
the HD6309 and little else. Which meant that division semantics were biased
toward symmetric division.

Later on, starting with interrupt driven serial data input (version 2.2
schematics), floored division has been made the default so as to comply with
FORTH-83 and ANSI requirements. 79-STANDARD made no such requirement whatsoever
but, it is felt, that compatibility with more recent specifications than
79-STANDARD could be useful to potential end users others than the author
himself.

In practice, division semantics can be checked very simply:

-4 26 MOD .

This will yield: 22 if the division semantics is floored. Otherwise it will
yield -4, indicating a symmetric division.

Long term support will feature floored division exclusively.

###############################################################################
Miscellaneous ANSI primitives that can come in handy:

: .( [CHAR] ) WORD COUNT TYPE ; IMMEDIATE

: ABORT" POSTPONE IF
  POSTPONE ."
  POSTPONE ABORT
  POSTPONE THEN ; IMMEDIATE RESTRICT

###############################################################################
In general, it is a bad idea to redefine standard primitives and, by default,
Z79Forth will provide no warning when a primitive is redefined. However, if
such a feature is considered desirable, : can be redefined as:

: :
  >IN @
  FIND IF
    DUP >IN ! CR ." WARNING: " BL WORD COUNT TYPE
    ."  is being redefined"
  THEN  
  >IN !
  :
;

Caution: this will not cover CREATEd word, VARIABLE or CONSTANT entities.

###############################################################################
examples/meta2/meta2.4th is a compiler generator based on a BNF (Backus-Naur
Form) language syntax specification that is expected to be stored in blocks
600-602. The target language is ValgolI: an Algol 60 derivative.

A sample ValgolI program also is expected to be resident at block 603. This
requires the CompactFlash image supplied in util/*.img to have been installed.

This is a conceptually very advanced program. Understanding its implementation
will require some degree of familiarity with compilation techniques.

The added value of this particuliar example is that it provides experimental
support for anynymous primitives (:NONAME in ANSI parlance).

:NONAME words are tricky because, as implemented here, they simply flip the
interpreter into compilation mode without actually invoking : Tail call
optimization will not apply and anonymous definitions are not allowed to
RECURSE. Yet, the whole thing works!

