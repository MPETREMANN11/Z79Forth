Implementation status with respect to the 79-STANDARD specification.

The official document pertaining to the 79-STANDARD can be dowloaded from
https://www.complang.tuwien.ac.at/forth/fth79std/FORTH-79.TXT

0. Important Restrictions
-------------------------
79-STANDARD specifies that BASE should accept values between 2 and 70
inclusively. This implementation can be compiled to be case insensitive and
it is, by default. Therefore valid values have been restricted to those
accepted by the ANSI standard (i.e. {2..36}).

User variables have no special status in Z79Forth, as it is not multitasking.

1. Required Word Set
--------------------

1.1 Nucleus Words
-----------------

1.1.1 Implemented
-----------------
! * */ */MOD + +! - / /MOD 0< 0= 0> 1+ 1- 2+ 2- < = > >R ?DUP @ ABS AND C! C@
CMOVE D+ DEPTH DNEGATE DROP DUP EXECUTE EXIT FILL I J LEAVE MAX MIN MOD MOVE
NEGATE NOT OR OVER PICK R> R@ ROLL ROT SWAP U< XOR

1.1.2 Not Implemented
---------------------
U* U/

1.2 Interpreter Words
---------------------

1.2.1 Implemented
-----------------
# #> #S ( -TRAILING . <# >IN ? ABORT BLK BASE CONVERT COUNT CR DECIMAL EMIT
EXPECT FIND HERE HOLD KEY PAD QUIT SIGN SPACE SPACES TYPE U. WORD

Note: CONVERT is a strictly unsigned business.

1.2.1 Not Implemented
---------------------
' 79-STANDARD CONTEXT CURRENT FORTH QUERY

Notes:
[1] A 79-STANDARD compliant ' cannot be implemented under a native
implementation such as this one. There is no such thing as a parameter field in
Z79Forth. There is, however, a compilation address and such an address can be
retrieved by resorting to FIND.
[2] ['] is an ANSI word that is not covered by the 79-STANDARD. It is provided
as a builtin dictionary word. Its 79 equivalent is:

	: ['] FIND POSTPONE LITERAL ; IMMEDIATE RESTRICT

1.3 Compiler Words
------------------

1.3.1 Implemented
-----------------
+LOOP , ." : ; ALLOT BEGIN CONSTANT CREATE DO DOES> ELSE FORGET IF IMMEDIATE
LITERAL LOOP REPEAT STATE THEN UNTIL VARIABLE WHILE [ ]

1.3.2 Not Implemented
---------------------
[COMPILE] COMPILE DEFINITIONS VOCABULARY

Notes:
- COMPILE is not offered because a stricly compliant 79-STANDARD implementation
  is not possible in a native code implementation.
- [COMPILE] has been phased out because the ANSI POSTPONE is more generic and
  covers every need that [COMPILE] satisfies and then some.

1.4 Device Words
----------------

1.4.1 Implemented
-----------------
BLOCK BUFFER EMPTY-BUFFERS LIST LOAD SAVE-BUFFERS SCR UPDATE

1.4.2 Not Implemented
---------------------
N/A

2 Extension Word Set
--------------------

2.1 Double Number Word Set
--------------------------

2.1.1 Implemented
-----------------
2! 2@ 2DROP 2DUP 2OVER 2SWAP D0= D+ D< DNEGATE

2.1.2 Not Implemented
---------------------
2CONSTANT 2ROT 2VARIABLE D- D. D.R D= DMAX DMIN DU<

Note 1:
D. is not offered in the EEPROM image. However, UD. can be easily defined as:

	: UD. <# #S #> TYPE ;

Note 2:
A working definition for 2CONSTANT can be found in testsuite/doubletest.4th.

3 Reference Word Set
--------------------

3.1 Implemented
---------------
--> .R 1+! 2* 2/ <> AGAIN BL BLANKS C, COM CONTINUED DUMP FLUSH HEX I' INDEX
INTERPRET K LAST LINE MS OCTAL PAGE SHIFT THRU U.R VLIST

Note1:
DUMP is offered as Forth source code (see examples/DUMP.4th). If the supplied
CompactFlash image had been installed on the target medium, it will be available
by invoking DUMPLOAD

Note2:
FLUSH is implemented as a straight alias to SAVE-BUFFERS (i.e. the 79-STANDARD
way), which means that the buffers remain assigned to blocks. However, the
ANSI semantics of FLUSH mandate that all buffers should be unassigned. If this
particular interpretation of FLUSH is considered desirable, it can be defined
as:

	: FLUSH SAVE-BUFFERS EMPTY-BUFFERS ;

Note3:
Support for END as an alias for UNTIL has been discontinued. If needed, it can
be defined as:

: END ['] UNTIL EXECUTE ; IMMEDIATE RESTRICT

Test pattern:
: foo 10 BEGIN                                                                 
    DUP .                                                                       
    1- DUP 0=                                                                   
  END DROP ;
\ Sequence [10 .. 1] should be printed.

3.2 Not Implemented
-------------------
!BITS ** +BLOCK -' -MATCH -TEXT /LOOP 1-! ;: ;S <CMOVE <BUILDS >< >MOVE>
@BITS ABORT" ASCII ASHIFT B/BUF BELL CHAIN CUR DBLOCK DPL EDITOR
END ERASE FLD H. IFEND IFTRUE LINELOAD LOADS MAP0 MASK
NAND NOR NUMBER O. OFFSET OTHERWISE READ-MAP REMEMBER REWIND
ROTATE S0 SET SP@ TEXT USER WHERE \LOOP

Note:
1-! is not offered. But -! is, which surprisingly enough, not is scope of
the 79-STANDARD specification.

4 FORTH-83 Words
----------------
\ CMOVE> RECURSE

5 1994 ANSI draft 6 Words
-------------------------
['] .S ACCEPT CELLS CHAR [CHAR] COMPILE, INVERT KEY? NIP POSTPONE S>D S"
SOURCE U> TUCK UNLOOP WITHIN

Note: KEY? U> and WITHIN return the 79-STANDARD version of true, i.e. 1.
When porting code originally designed for an ANSI environment, the ANSI true
can be implemented by simply having the following definitions:

	: 0<> IF -1 ELSE 0 THEN ;
	: KEY? KEY? 0<> ;
	: WITHIN WITHIN 0<> ;
	: U> U> 0<> ;

This can be useful when dealing with code that has "environmental dependencies."

6 GNU Forth/VolksForth Words
----------------------------
RESTRICT makes the latest defined word usable in compilation mode only.

7 SwiftForth Words
------------------
.' ( addr -- ) Common usage
Displays the name of the nearest definition before addr, and the offset
of addr from the beginning of that definition. “dot-tick”

8 Additional (non-standard) Words
---------------------------------
<=	( n1 n2 -- flag ) Necessary to be able to run the ORNL sieve benchmark.
0	( -- 0 ) A compact reference to the constant zero.
1	( -- 1 ) A compact reference to the constant one.
2	( -- 2 ) A compact reference to the constant two.
-!	( n addr -- ) Substracts n from [addr] and stores the result back there.
-ROT	Equivalent to : -ROT ROT ROT ;
BYE	Resets the system.
I'	Returns the second item from the return stack.
J'	Returns the fourth item from the return stack.
ICHECK	( -- ) If the running EEPROM image was compiled with a non-zero RELFEAT
	(see constants.asm), this word will walk through the dictionary linked
	list and verify that the definition of every monitored word has not
	been altered since it was defined. Monitored words are all words
	defined by :, all constants and all CREATEd words to which MONITOR has
	been applied. Note that you can, conceivably, monitor a VARIABLE but it
	makes very little sense since the checksum would be computed at
	MONITOR's execution time and every subsequent ICHECK invokation would
	fail if that variable's value had been altered in the meantime.
MONITOR	( -- ) If the running EEPROM image was compiled with a non-zero RELFEAT
	(see constants.asm), this will compute the value of a byte checksum
	and store it into the latest defined word's header. This works
	similarly to the IMMEDIATE and RESTRICT words, in that it only applies
	to the last defined word and will set a flag in that word's header.
NCLR	Resets the data stack.
PAYLOAD	( -- nbytes ) This primitive output is only relevant after an invokation
	of FIND. It will retrieve a word's definition length (code section)
	corresponding to the latest reference to FIND. This word is of marginal
	importance. However, it facilitates an implementation of the
	disassembler in which that payload does not have to be specified at
	DIS's invokation time (see SW/examples/dis.4th for a minimal
	disassembler implementation).
RCLR	Resets the return stack.
RTC@	( rtcregoffset -- rtcbyteval ) Retrieves the contents of an RTC
	register.
RTC!	( rtcbyteval rtcregoffset -- ) Writes to an RTC register.
S	( -- sreg ) Returns the contents of the system stack pointer (S).
S@	( -- retaddr ) Returns the return address to the caller's.
	This is most useful for debugging purposes when used in conjunction
	with .' Please note that this requires RELFEAT to be enabled at
	compilation time.
TICKS	( -- tickslow tickshigh ) Stacks up a double cell containing the
	number of ticks since boot time. There are 64 ticks per second.
UNLESS	Perl inspired. Functionally equivalent to:
	: UNLESS ['] 0= COMPILE, POSTPONE IF ; IMMEDIATE RESTRICT

9 Extra (non-standard) Features
-------------------------------
Numeric literals can be prefixed by a character indicating the BASE in which
they are to be interpreted/compiled. Please note that this is a straight prefix,
in that if a minus sign is meant, it is to be placed after the BASE prefix.
BASE prefix characters are:

$	for hexadecimal.
& or #	for decimal.
@	for octal.
%	for binary.

Additionally the . (dot) character might be used as a suffix to a numeric
literal, so as to indicate that a double is meant. This conforms to the
double-number extension specification of the ANSI standard.

Attention should be paid to the fact that, CONVERT itself does not honor that
convention and that, conforming to the 79-STANDARD specification, an unsigned
double cell will be returned, i.e. no prefix or suffix will be accepted.

For all intents and purposes, CONVERT should not be called directly at the
application level. However, it is essential to the implementation of the
string to number conversion. A consequence of this is that every string to
number conversion, be it interpreted or compiled, will require at least three
cells to be available on the data stack.

