                 LWVI User's Guide and Implementation Reference

1 Introduction
--------------
LWVI is a (partial and incomplete) implementation of Bill Joy's VI. It is
written in Forth and can be found in the software distribution under
Z79Forth/SW/examples/lwvi.4th. That code has not been blockified yet, as some
very important features in the 'delete' department are still missing.

Worth mentioning is the fact that this particular VI flavour was designed to
operate on standard 1 KB Forth blocks. This leads to some quirks and
limitations. In particular, JOIN and DOT are not supported. In essence, LWVI
endeavours to maintain a consistent mapping between a screen visualized as 16
lines of 64 characters and a 1 KB block. In actuality (i.e. as considered from
a memory storage standpoint), the block being edited is nothing more than a
1024 byte NUL terminated string.

The whole thing was originally developed under GNU Forth and mate-terminal,
which is believed to implement proper VT100 emulation. The actual target is
Minicom 2.7.1 in VT102 mode with BS mapped to BS.

At any given time, LWVI operates operates in one of four modes:

- command (the status bar at line 18 is blank).
- insert (the status bar displays -- INSERT).
- replace (the status bar displays -- REPLACE).
- quit (after having saved block being edited).

The editor is invoked by:

<blocknumber> EDIT

BEWARE: there is no undo support and changes cannot be discarded!!! Just as
with so many many other Forthy things, the user is supposed to know what he/she
is doing.

The default mode on entry is the command mode. The insert mode is accessed
by typing 'i'. The replace mode is accessed by typing 'R'. Both are exited
by typing <ESC>.

2 Recommended Minicom Settings
------------------------------
Please refer to SW/doc/79-STANDARD-docreq.txt section 6 ("An operator's
terminal"). In general, due to potential flow control issues, cut paste
should be avoided and the replace mode should be the preferred option.

3 The Command Mode
------------------
This allows to move the cursor around, to delete text, to switch to insert or
replace modes and to quit the editor. Most commands accept a command count
prefix. In what follows, that optional count is denoted by [nn] and, if
unspecified, always default to one. '^' denotes the <Control> key.

'0'	Move the cursor to the beginning of the current line.
'$'	Move the cursor to the end of the current line (last non blank
	character).
'[nn]j'	Move the cursor down (nn times).
'[nn]k'	Move the cursor up (nn times).
'[nn]h'	Move the cursor left (nn times).
'[nn]l'	Move the cursor right (nn times).
'[nn]w'	Move the cursor to the beginning of the next word (nn times).
'[nn]b'	Move the cursor to the beginning of the next word (nn times).
'[nn]W' Equivalent to '[nn]w'
'[nn]B'	Equivalent to '[nn]b'
'[nn]+'	Move the cursor to the first non-blank character of the next line
	(nn times).
'[nn]-'	Move the cursor to the first non-blank character of the previous line
	(nn times).
'[nn]f[char] Move the cursor to the (nn th) following occurence of the
	specified character. The search is case sensitive, it starts one
	character after the current cursor position (scope: current line).
'[nn]g'	Go to line number [nn]. The cursor horizontal position is reset to
	column #1.
'G'	Go to the last empty line. The cursor horizontal position is reset to
	column #1. Please note that if line 16 is not empty (all blanks), this
	command will take no action.
'^g'	Display the current line number, column number and block number
	for one second in the status line (line 18).
'[nn]x'	Delete the character immediately below the cursor (nn times).
'[nn]X'	Delete the character to the left of the cursor (if any), optionally
	nn times.
'd0'	Delete the current line contents up to and excluding the character
	under the current cursor position.
'd$'	Delete the current line contents from the character below the current
	cursor position to the end of the current line.
'[nn]d[mm]w'	Delete nn times mm words from the current cursor position
	(scope: current line). Please note that if not enough words cannot be
	identified, this command will be the equivalent of 'd$'.
'[nn]df[char]'	Delete characters from the current cursor position up to
	the nn-th occurence of the specified character (scope: current line).
	NOT IMPLEMENTED YET.
'[nn]dd' Delete nn lines starting with the current line. Resets the cursor
	position to column #1. NOT IMPLEMENTED YET.
'[nn]r[char]'	Replace nn characters starting from the current cursor position
	with the specified character. This can be extremely handy to initialize
	lines where a character is repeated a number of times.
'i'	Insert--switch to insert mode. The cursor position remains unchanged.
'a'	Append--switch to insert mode, after pointing to the next character
	immediately to the right of the current cursor position. The equivalent
	input is 'li'.
'R'	Enter the replace mode. The cursor position is unchanged.
':q'	Save the content of the current buffer and exit the editor.

Note: due to a known bug, ':anything but q or <Escape>' will cause an error
condition and the editior will stop being executed. Edition can be resumed
with:

	SCR @ EDIT

The SCR user variable is set by the latest invokation of LIST, which the
editor calls when it is initially invoked. Should the latest LISTed screen
need to be blanked, this can be done by using:

	WIPE

4 The Insert and Replace Modes
------------------------------
They are functionally very similar. The insert mode is entered from the command
mode by typing 'i'. The replace mode is entered from the command mode by typing
'R'. Both are exited by typing <Escape>. In both modes, text can be entered
freely but it is not permitted to move the cursor back to a column prior to the
one when the mode was entered, except after a carriage return has been entered
in which case no such constraint will be enforced.

5 Implementation Reference
--------------------------
This section is written for myself and those adventurous to consider the
implementation of missing functionality.

5.1 Basic Terminology
---------------------
Memory space	A world view in which things begin at offset 0. This can be the
cursor position with respect to the beginning of the block being edited or
the value of variables such as E.COL# E.LIN#.

Terminal space	Arguments are expressed from a lowest possible value of 1.
This applies, for instance, to the line and column numbers passed to
E.VT100.CUP (aka gotoxy).

5.2 Terminal layout
-------------------
Minicom is used in VT102 emulation mode with <backspace> mapped to <Backspace>.

- Line 1 (in terminal space) is left blank.
- Lines 2-17 contain an image of the block being edited.
- Line 18 can be blank, or contain an indication of the current editing mode
  (INSERT / REPLACE) or a status line (current line and column numbers,
  starting from 1, block number starting from 0).

5.3 Code Organization
---------------------
- Disabled GNU Forth compatibility layer.
- Enabled Z79Forth specifics.
- Constant definitions.
- VT100 control primitives (E.VT100.*).
- Global variables.
- Editor commands support words.
- Central jump table (defines all the accepted commands).
- E.COMMAND, insert and replace mode handling primitives.
- Editor entry point (E.LWVI) and alias (EDIT).

5.4 VT100 Control Primitives
----------------------------
E.VT100.CSI ( -- ) emits the control sequence introducer (<Escape>[).
E.VT100.NP ( n -- ) converts n to a 2 digit number (in decimal) representing
	a VT100 command numeric parameter.
E.VT100-1PCMD a defining word used to create all the VT100 commands requiring
	only one parameter. Those commands are:

	E.VT100.CUB ( count -- ) cursor backward.
	E.VT100.CUF ( count -- ) cursor forward.
	E.VT100.CUD ( count -- ) cursor down.
	E.VT100.CUU ( count -- ) cursor up.
	E.VT100.IRMI ( 4 -- ) switch to insert mode.
	E.VT100.IRMR ( 4 -- ) switch to replace mode.
	E.VT100.DCH ( count -- ) delete character starting at the current
		cursor position.
	E.VT100.IL ( count -- ) insert line
	E.VT100.DL ( count -- ) delete line
	E.VT100.ED ( 0 -- ) erase in display. Blanks characters from the
		current cursor position to the end of the screen.

Derived commands:
E.VT100.CUP ( x y -- ) aka GOTOXY. X and Y must be expressed in terminal space.
E.VT100.BS ( -- ) cursor backward by one column.
E.VT100.INS ( -- ) switches to insert mode.
E.VT100.RPL ( -- ) switches to replace mode.
E.VT100.ED$ ( -- ) Banks characters from the current cursor position to the
	end of the screen.

5.5 Global Variables
--------------------
E.MODE	0: COMMAND, 1: INSERT, 2: REPLACE, 3: QUIT
E.COL#	current cursor column number in memory space.
E.LIN#	current cursor line number in memory space.
SCR1	a "virtual" variable that contains the base buffer address of the
	block being editing in memory.
E.CMD.COUNT the value of nn when a command such as [nn]<cmd>... is used.
	The word E.CMD.COUNT.GET returns E.CMD.COUNT, with 1 as a default
	if no command count prefix was specified.
E.CMD.SUBCOUNT the value of mm when a command such a [nn]<cmd>[mm] is used.
	The word E.CMD.SUBCOUNT.GET returns E.CMD.SUBCOUNT, with 1 as a default
        if no command subcount prefix was specified.
E.MINICOM.BUG.WORKAROUND A bug exists in Minicom 2.7.1, which causes characters
	starting at the current cursor position and up to the end of the current
	line to be blanked when switching to insert mode. This variable is used
	as a flag to mitigate the effect of that bug without requiring a fixed
	version of the tool.

5.6 Editor Commands Support Words
---------------------------------

