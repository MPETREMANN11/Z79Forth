                      (        forth.asm):00001         * 6309 Forth based on my 1984/07/16 TRS-80 Model 1 level II ROM implementation.
                      (        forth.asm):00002         *
                      (        forth.asm):00003         * This work is dedicated to Alain Pinaud, author of "Programmer en Forth"
                      (        forth.asm):00004         * published by Editions du P.S.I. in 1983--i.e. my virtual mentor in the field.
                      (        forth.asm):00005         * Special thanks go William Astle for his fantastic LW Tools utility set and
                      (        forth.asm):00006         * to Robert Lipe for his advice on serial line handling. Apache subversion
                      (        forth.asm):00007         * and the sdiff utility also were on my side all the time.
                      (        forth.asm):00008         *
                      (        forth.asm):00009         * Also credited for their help: Justin Poirier (seminal HW design), Daniel
                      (        forth.asm):00010         * Tufvesson (CompactFlash interface), Peter Forth (FB alias), Paul E. Bennett
                      (        forth.asm):00011         * and Michel Jean.
                      (        forth.asm):00012         *
                      (        forth.asm):00013         * This is a native Forth. Not a threaded interpretive implementation.
                      (        forth.asm):00014         * Worth noticing is the fact that the return stack does not hold return
                      (        forth.asm):00015         * addresses at all. All what is stored there is loop indexes and control
                      (        forth.asm):00016         * structures jump addresses. Actual return addresses are kept in the system
                      (        forth.asm):00017         * stack. All in all, this is the result of the work of a 19 year old guy,
                      (        forth.asm):00018         * heavily revisited 35 years later. Some quirks remain that prevent me
                      (        forth.asm):00019         * from offering the full required set--not to mention the choice of using
                      (        forth.asm):00020         * an 8K EEPROM. The downside of this implementation is that the generated
                      (        forth.asm):00021         * code is about 30% larger than a threaded interpretive implementation
                      (        forth.asm):00022         * would be. So it goes...
                      (        forth.asm):00023         *
                      (        forth.asm):00024         * The code generated is limited to a very small instruction set:
                      (        forth.asm):00025         *
                      (        forth.asm):00026         * LDXOPC        $8E     LDX (immediate)
                      (        forth.asm):00027         * JMPOPC        $7E     JMP (extended)
                      (        forth.asm):00028         * JSROPC        $BD     JSR (extended)
                      (        forth.asm):00029         * RTSOPC        $39     RTS (inherent)
                      (        forth.asm):00030         * BCSOPC        $2503   BCS *+5 (relative) Used in LOOP, +LOOP
                      (        forth.asm):00031         * BNEOPC        $2603   BNE *+5 (relative) Used in IF, UNTIL
                      (        forth.asm):00032         *
                      (        forth.asm):00033         * On error, the system stack pointer is reset. The return stack also is
                      (        forth.asm):00034         * but the data stack will be in the same state as when the error occurred.
                      (        forth.asm):00035         * ABORT and QUIT enforce their own 79-STANDARD behaviour.
                      (        forth.asm):00036         *
                      (        forth.asm):00037         * The 79-STANDARD Forth specification can be downloaded from
                      (        forth.asm):00038         * https://www.complang.tuwien.ac.at/forth/fth79std/FORTH-79.TXT
                      (        forth.asm):00039         *
                      (        forth.asm):00040         * Additionally, this implementation provides a few FORTH-83 words. Those
                      (        forth.asm):00041         * words are CMOVE> and RECURSE. See
                      (        forth.asm):00042         * http://forth.sourceforge.net/standard/fst83/FORTH-83.PRN
                      (        forth.asm):00043         *
                      (        forth.asm):00044         * \ ['] [CHAR] .S CELLS CHAR COMPILE, INVERT KEY? NIP POSTPONE S>D S" SOURCE
                      (        forth.asm):00045         * TUCK U> * UNLOOP and WITHIN have been borrowed from the ANSI draft 6
                      (        forth.asm):00046         * specification.
                      (        forth.asm):00047         * See http://www.forth.org/svfig/Win32Forth/DPANS94.txt
                      (        forth.asm):00048         *
                      (        forth.asm):00049         * RESTRICT is non-standard. It comes from GNU Forth (VolksForth). The " OK"
                      (        forth.asm):00050         * non-prompt string also does, by the way. Thanks to Anton Ertl for his terse
                      (        forth.asm):00051         * yet valuable input.
                      (        forth.asm):00052         *
                      (        forth.asm):00053         * .' (dot-tick) is non-standard. It comes from SwiftForth. It will be supported
                      (        forth.asm):00054         * if symbolic stack dump has not been disabled (see SSDFEAT in constants.asm).
                      (        forth.asm):00055         *
                      (        forth.asm):00056         * MONITOR and ICHECK are also non-standard. They are intended to maintain and
                      (        forth.asm):00057         * verify the integrity of a checksum of the code section of RAM resident
                      (        forth.asm):00058         * words, with the exception of VARIABLEs and CREATEd words. CREATEd words,
                      (        forth.asm):00059         * if subject to the MONITOR treatment will also carry a code section
                      (        forth.asm):00060         * checksum, although this is not the default behaviour. The checksum will
                      (        forth.asm):00061         * consist in an extra byte added to every word's header. MONITOR and ICHECK
                      (        forth.asm):00062         * will only be available if the reliability feature has not been disabled
                      (        forth.asm):00063         * (see RELFEAT in constants.asm).
                      (        forth.asm):00064         *
                      (        forth.asm):00065         * Forth source code portability note:
                      (        forth.asm):00066         * Because Z79Forth does not use the return stack to store return addresses,
                      (        forth.asm):00067         * it makes it quite easy to write code that is not readily portable to classic
                      (        forth.asm):00068         * threaded interpretive implementations. The resulting code will be simpler but
                      (        forth.asm):00069         * portability will be limited.
                      (        forth.asm):00070         *
                      (        forth.asm):00071         * Miscellaneous notes: RA stands for return address; EP for entry point.
                      (        forth.asm):00072         * CF is a shortcut for CompactFlash. TOS means top of the data/normal stack.
                      (        forth.asm):00073         * Occasionally, CFA is used for code field address which, in this
                      (        forth.asm):00074         * implementation, is a synonym for compilation address. XT means execution
                      (        forth.asm):00075         * token--the ANSI term for a compilation address. MSC stands for most
                      (        forth.asm):00076         * significant cell; LSC for least significant cell.
                      (        forth.asm):00077         *
                      (        forth.asm):00078         * The complete guide to the HD6309 extended instruction set can be found at:
                      (        forth.asm):00079         * https://cyberabi.ipower.com/Downloads/The_6309_Book.pdf. For convenience,
                      (        forth.asm):00080         * and with the author's explicit agreement, this document has been included
                      (        forth.asm):00081         * in this distribution. This is recommended reading for anyone altering this
                      (        forth.asm):00082         * code or trying to make some sense of it!!!
                      (        forth.asm):00083         *
                      (        forth.asm):00084         * This whole effort started out as a porting endeavour and ended up being a
                      (        forth.asm):00085         * substantial rewrite, trying to take advantage of the features of the 6309
                      (        forth.asm):00086         * as much as possible. The primary goals of this implementation are:
                      (        forth.asm):00087         * reliability, performance and code compactness. A number of bugs in the
                      (        forth.asm):00088         * original code have been fixed--some remain for sure!
                      (        forth.asm):00089         *
                      (        forth.asm):00090         * Obligatory literary reference:
                      (        forth.asm):00091         * "The paper is very heavy going, and I should never have read it, had I not
                      (        forth.asm):00092         * written it myself." J. E. Littlewood (1885-1977).
                      (        forth.asm):00093         
0000                  (        forth.asm):00094         pragma  opt cd,operandsizewarning
                      (        forth.asm):00095         
                      (        forth.asm):00096                 include constants.asm
                      (    constants.asm):00001         * Begin configuration tunable parameters.
                      (    constants.asm):00002         
     0000             (    constants.asm):00003         VT100   equ     0               Set to 1 to operate at RS232@9600
                      (    constants.asm):00004         *                               This implies an Y1 CXO at 2.45760 MHz.
                      (    constants.asm):00005         *                               Default is 0 for USB@115200 (7.37280 MHz CXO).
     0000             (    constants.asm):00006         HVCONV  equ     0               Have CONVERT included in the standard dictionary
     0000             (    constants.asm):00007         CSSNTVE equ     0               Words and HEX numbers are case sensitive if NZ
     0000             (    constants.asm):00008         DEBUG   equ     0               Enforce assertions and miscellaneous checks
     0000             (    constants.asm):00009         CKOVRUN equ     0               Check for overruns in GETCH
     0001             (    constants.asm):00010         USEDP   equ     1               Set to 1 to use direct page addressing
     0001             (    constants.asm):00011         SSDFEAT equ     1               Set to 1 to enable the symbolic stack dump feat.
     0001             (    constants.asm):00012         RELFEAT equ     1               Set to 1 to enable the reliability feature
                      (    constants.asm):00013         *                               Caution: when this is enabled, you can no
                      (    constants.asm):00014         *                               longer fit a DEBUG image into an 8 KB EEPROM
                      (    constants.asm):00015         * Loop count for MS. This is busy waiting, so we depend on the CPU clock speed.
                      (    constants.asm):00016         *MSLCNT equ     496             at 3 MHz emulation mode
                      (    constants.asm):00017         *MSLCNT equ     662             at 4 MHz emulation mode
                      (    constants.asm):00018         *MSLCNT equ     794             at 4 MHz native mode
     03E2             (    constants.asm):00019         MSLCNT  equ     994             at 5 MHz native mode
                      (    constants.asm):00020         
                      (    constants.asm):00021         * End configuration tunable parameters.
                      (    constants.asm):00022         
                      (    constants.asm):00023         * Memory map.
     0000             (    constants.asm):00024         RAMSTRT equ     $0000
     8000             (    constants.asm):00025         RAMSIZE equ     $8000
     C000             (    constants.asm):00026         IOSTRT  equ     $C000
     E000             (    constants.asm):00027         ROMSTRT equ     $E000
     FFF0             (    constants.asm):00028         VECTBL  equ     $FFF0
                      (    constants.asm):00029         
                      (    constants.asm):00030         * Base address for global variables (direct page addressed by default).
     0100             (    constants.asm):00031         VARSPC  equ     $100
                      (    constants.asm):00032         
                      (    constants.asm):00033         * The 74HCT138 IO address decoder maps one 1KB page per usable device.
     C000             (    constants.asm):00034         DEV0    equ     $C000           Compact Flash memory module
     C400             (    constants.asm):00035         DEV1    equ     $C400
     C800             (    constants.asm):00036         DEV2    equ     $C800
     CC00             (    constants.asm):00037         DEV3    equ     $CC00
     D000             (    constants.asm):00038         DEV4    equ     $D000
     D400             (    constants.asm):00039         DEV5    equ     $D400
     D800             (    constants.asm):00040         DEV6    equ     $D800           HD63B50 unit 0
     DC00             (    constants.asm):00041         DEV7    equ     $DC00
                      (    constants.asm):00042         
     D800             (    constants.asm):00043         ACIACTL equ     DEV6
     D801             (    constants.asm):00044         ACIADAT equ     DEV6+1
                      (    constants.asm):00045         
                      (    constants.asm):00046         * ACIA control register bits.
     0003             (    constants.asm):00047         ACRST   equ     11b             ACIA master reset
                      (    constants.asm):00048         
                      (    constants.asm):00049         * 115200 bps w. 7.37280 MHz oscillator, 38400 bps w. 2.45760 MHz oscillator.
     0001             (    constants.asm):00050         ACD16   equ     01b             ACIA div 16
                      (    constants.asm):00051         * 28800 bps w. 7.37280 MHz oscillator, bps 9600 w. 2.45760 MHz oscillator.
     0002             (    constants.asm):00052         ACD64   equ     10b             ACIA div 64
                      (    constants.asm):00053         
                      (    constants.asm):00054         * ACIA divider tuning. USB@115200 or RS232@9600 for a real DEC terminal.
                      (    constants.asm):00055                 IFEQ    VT100
     0001             (    constants.asm):00056         ACDVSEL equ     ACD16           Selected divider value (7.37280 MHz CXO)
                      (    constants.asm):00057                 ELSE
0000                  (    constants.asm):00058         ACDVSEL equ     ACD64           Switch to RS232@9600 (2.45760 MHz CXO)
                      (    constants.asm):00059                 ENDC
                      (    constants.asm):00060         
     0014             (    constants.asm):00061         AC8N1   equ     10100b          ACIA 8N1
     0000             (    constants.asm):00062         ACRTS0  equ     0000000b        ACIA RTS low
     0040             (    constants.asm):00063         ACRTS1  equ     1000000b        ACIA RTS high
                      (    constants.asm):00064         
     0043             (    constants.asm):00065         ACIRSET equ     ACRTS1|ACRST
     0055             (    constants.asm):00066         ACIRTS1 equ     ACRTS1|AC8N1|ACDVSEL
     0015             (    constants.asm):00067         ACIRTS0 equ     ACRTS0|AC8N1|ACDVSEL
                      (    constants.asm):00068         
                      (    constants.asm):00069         * ACIA status register bits.
     0001             (    constants.asm):00070         ACIRDRF equ     1               Receive data register full
     0002             (    constants.asm):00071         ACITDRE equ     2               Transmit data register empty
     0020             (    constants.asm):00072         ACIOVRN equ     32              Overrun status register bit (req. NZ CKOVRUN)
                      (    constants.asm):00073         
                      (    constants.asm):00074         * Compact Flash parameters.
     C000             (    constants.asm):00075         CFBASE  equ     DEV0
     C000             (    constants.asm):00076         CFDATAR equ     CFBASE          R/W data register
     C001             (    constants.asm):00077         CFERROR equ     CFBASE+1        RO error register
     C001             (    constants.asm):00078         CFFEATR equ     CFBASE+1        WO features register
     C002             (    constants.asm):00079         CFSCNTR equ     CFBASE+2        R/W sector count register
     C003             (    constants.asm):00080         CFSNUMR equ     CFBASE+3        R/W sector number register
     C004             (    constants.asm):00081         CFCLOWR equ     CFBASE+4        R/W cylinder low register
     C005             (    constants.asm):00082         CFCHIGR equ     CFBASE+5        R/W cylinder high register
     C006             (    constants.asm):00083         CFDRHDR equ     CFBASE+6        R/W drive/head register
     C007             (    constants.asm):00084         CFSTATR equ     CFBASE+7        RO status register
     C007             (    constants.asm):00085         CFCOMDR equ     CFBASE+7        WO command register
                      (    constants.asm):00086         
                      (    constants.asm):00087         * CF status bits.
     0080             (    constants.asm):00088         CFBSYB  equ     10000000b       BSY status bit
     0040             (    constants.asm):00089         CFRDYB  equ     01000000b       RDY status bit
     0020             (    constants.asm):00090         CFDWFB  equ     00100000b       DWF status bit (not used)
     0010             (    constants.asm):00091         CFDSCB  equ     00010000b       DSC status bit (not used)
     0008             (    constants.asm):00092         CFDRQB  equ     00001000b       DRQ status bit
     0001             (    constants.asm):00093         CFERRB  equ     00000001b       ERR status bit
                      (    constants.asm):00094         
     0200             (    constants.asm):00095         CFSCSZ  equ     $200            Compact Flash (IDE) sector size
                      (    constants.asm):00096         
                      (    constants.asm):00097         * CF commands.
     00EC             (    constants.asm):00098         CFIDDEV equ     $EC             Identify Device
     00EF             (    constants.asm):00099         CFSETFT equ     $EF             Set Feature
     0020             (    constants.asm):00100         CFRSCTS equ     $20             Read Sectors
     0030             (    constants.asm):00101         CFWSCTS equ     $30             Write Sectors
                      (    constants.asm):00102         
                      (    constants.asm):00103         * Buffer in-memory structure:
                      (    constants.asm):00104         * data: 1024 bytes.
                      (    constants.asm):00105         * terminator: 1 byte set to 0.
                      (    constants.asm):00106         * flags: 1 byte.
                      (    constants.asm):00107         * blknum: 2 bytes.
     0001             (    constants.asm):00108         BINUSE  equ     1               Buffer is allocated (the blknum field is valid)
     0002             (    constants.asm):00109         BMAPPD  equ     2               Block has been read from the CF device
     0004             (    constants.asm):00110         BDIRTY  equ     4               Block has been marked for update
     0400             (    constants.asm):00111         BLKSIZ  equ     2*CFSCSZ        Block size is 2 CF sectors (1 KB)
                      (    constants.asm):00112         * Buffer field offsets.
     0400             (    constants.asm):00113         BOTERM  equ     BLKSIZ          Base buffer to the 'terminator' field offset
     0401             (    constants.asm):00114         BOFLAGS equ     BLKSIZ+1        Base buffer to the 'flag' field offset
     0402             (    constants.asm):00115         BOBLKNO equ     BLKSIZ+2        Base buffer to the 'blknum' field offset
                      (    constants.asm):00116         
     0410             (    constants.asm):00117         BFDISP  equ     BUF1-BUF0       Offset between resident buffers
                      (    constants.asm):00118         
                      (    constants.asm):00119         * ASCII trivia.
     0000             (    constants.asm):00120         NUL     equ     0               End of string marker
     0003             (    constants.asm):00121         ETX     equ     3               Control-C (intr)
     0008             (    constants.asm):00122         BS      equ     8               Backspace
     0009             (    constants.asm):00123         HT      equ     9               Horizontal tab
     000A             (    constants.asm):00124         LF      equ     $0A             aka new line
     000D             (    constants.asm):00125         CR      equ     $0D             Carriage return
     0015             (    constants.asm):00126         NAK     equ     $15             Control-U (kill)
     0020             (    constants.asm):00127         SP      equ     $20
                      (    constants.asm):00128         
                      (    constants.asm):00129         * Stack sizes.
     00C0             (    constants.asm):00130         NSTKSZ  equ     192             Expressed in bytes. Now only limited by RAM size
     0080             (    constants.asm):00131         RSTKSZ  equ     128             Expressed in bytes
                      (    constants.asm):00132         
                      (    constants.asm):00133         * Buffer sizes.
     0084             (    constants.asm):00134         CMDBFSZ equ     132             Command line entry buffer
     0050             (    constants.asm):00135         HEXBFSZ equ     80
     0048             (    constants.asm):00136         TBUFSZ  equ     72              Used by VLIST to print word name, CVNSTR
                      (    constants.asm):00137         *                               And DUMP, at offset 69
     0051             (    constants.asm):00138         PADBSZ  equ     1+80            79-STANDARD mandates a minimum of 64 bytes
                      (    constants.asm):00139         
                      (    constants.asm):00140         * Dictionary flag masks.
     0080             (    constants.asm):00141         IMDFLM  equ     $80             Immediate flag mask
     0040             (    constants.asm):00142         DEFFLM  equ     $40             Compilation only flag mask
                      (    constants.asm):00143                 IFNE    RELFEAT
     0020             (    constants.asm):00144         MONFLM  equ     $20             Monitored flag mask. This indicates that the
                      (    constants.asm):00145         *                               word to which it relates might be checked for
                      (    constants.asm):00146         *                               integrity. This applies by default to all words
                      (    constants.asm):00147         *                               defined with : and all constants. It might
                      (    constants.asm):00148         *                               also apply to any other CREATEd object by
                      (    constants.asm):00149         *                               resorting to the MONITOR word. Using MONITOR
                      (    constants.asm):00150         *                               on variable word contents is guaranteed to
                      (    constants.asm):00151         *                               raise ICHECK's attention.
                      (    constants.asm):00152                 ENDC
                      (    constants.asm):00153         
     001F             (    constants.asm):00154         WRLNMSK equ     $1F             31 character is the maximum word length
                      (    constants.asm):00155         
                      (    constants.asm):00156         * 6309 opcodes.
     008E             (    constants.asm):00157         LDXOPC  equ     $8E             LDX (immediate)
     007E             (    constants.asm):00158         JMPOPC  equ     $7E             JMP (extended)
     00BD             (    constants.asm):00159         JSROPC  equ     $BD             JSR (extended)
     0039             (    constants.asm):00160         RTSOPC  equ     $39             RTS (inherent)
     2503             (    constants.asm):00161         BCSOPC  equ     $2503           BCS *+5 (relative)
     2603             (    constants.asm):00162         BNEOPC  equ     $2603           BNE *+5 (relative)
     00C7             (    constants.asm):00163         ILLOPC  equ     $C7             An illegal operation code. Meant to raise a trap
                      (    constants.asm):00164         
     0001             (    constants.asm):00165         CFLAG   equ     1               CC bit 0
     0004             (    constants.asm):00166         ZFLAG   equ     4               CC bit 2
     0008             (    constants.asm):00167         NFLAG   equ     8               CC bit 3
                      (    constants.asm):00168         
                      (    constants.asm):00169         * RAM based execution token for @.
     0C14             (    constants.asm):00170         RAMFTCH set     WDICSPC+4       Dictionary header overhead is word's length + 3
                      (    constants.asm):00171                 IFNE    RELFEAT         The reliability features adds one byte to the
     0C15             (    constants.asm):00172         RAMFTCH set     WDICSPC+5       header: a checksum.
                      (    constants.asm):00173                 ENDC
                      (    constants.asm):00174         
                      (        forth.asm):00097         
                      (        forth.asm):00098         * Unchecked NPUSH. This is for situations in which there is absolutely no
                      (        forth.asm):00099         * chance of overflow. For instance, in case we just popped 2 cells and push
                      (        forth.asm):00100         * back one or two.
0000                  (        forth.asm):00101         UCNPUSH MACRO   NOEXPAND
                      (        forth.asm):00102                 pshu    x
                      (        forth.asm):00103                 ENDM
                      (        forth.asm):00104         
                      (        forth.asm):00105         * Unchecked NPOP. To be used only after trusted words have been invoked, i.e.
                      (        forth.asm):00106         * when one is positively sure that the data stack contains at least one cell.
0000                  (        forth.asm):00107         UCNPOP  MACRO   NOEXPAND
                      (        forth.asm):00108                 pulu    x
                      (        forth.asm):00109                 ENDM
                      (        forth.asm):00110         
                      (        forth.asm):00111         * Make sure minimum data stack requirements are satisfied upon word entry.
                      (        forth.asm):00112         * The requirement is expressed in cell size--2 bytes on the 6309.
                      (        forth.asm):00113         * \1 specifies the required number of cells.
0000                  (        forth.asm):00114         MINDREQ MACRO   NOEXPAND
                      (        forth.asm):00115                 ldd     #NSTBOT-(\1*2)  Cell count one expects to be stacked up
                      (        forth.asm):00116                 jsr     CHKNDPT         No return if the condition is not met
                      (        forth.asm):00117                 ENDM
                      (        forth.asm):00118         
                      (        forth.asm):00119         * Reliability feature support: execution tokens.
                      (        forth.asm):00120         * \1 has the opcode we want to emit.
                      (        forth.asm):00121         * \2 has the execution token address, as if the header overhead always
                      (        forth.asm):00122         * was 3 bytes.
0000                  (        forth.asm):00123         RFXT    MACRO   NOEXPAND
                      (        forth.asm):00124                 IFNE    RELFEAT
                      (        forth.asm):00125                 \1      \2+1
                      (        forth.asm):00126                 ELSE
                      (        forth.asm):00127                 \1      \2
                      (        forth.asm):00128                 ENDC
                      (        forth.asm):00129                 ENDM
                      (        forth.asm):00130         
                      (        forth.asm):00131         * Reliability feature support: variable word header contents.
                      (        forth.asm):00132         * This is a dummy checksum only used for EEPROM resident words.
                      (        forth.asm):00133         * Those never are checked for code integrity by MONITOR.
0000                  (        forth.asm):00134         RFCS    MACRO   NOEXPAND
                      (        forth.asm):00135                 IFNE    RELFEAT
                      (        forth.asm):00136                 fcb     ILLOPC          Illegal opcode
                      (        forth.asm):00137                 ENDC
                      (        forth.asm):00138                 ENDM
                      (        forth.asm):00139         
                      (        forth.asm):00140         *******************************************************************************
                      (        forth.asm):00141         * RAM definitions. We cannot initialize globals from the assembly defs.
                      (        forth.asm):00142         * All we can do here is define addresses and size things up.
                      (        forth.asm):00143         
                      (        forth.asm):00144         * RAMSTART is 0. We leave page 0 unused as a bug proof area.
                      (        forth.asm):00145         * When compiled in debug mode, this area is filled with illegal
                      (        forth.asm):00146         * instruction opcodes ($C7).
                      (        forth.asm):00147         
                      (        forth.asm):00148                 org     VARSPC
                      (        forth.asm):00149         
                      (        forth.asm):00150         * Global pointers.
0100                  (        forth.asm):00151         RSP     rmb     2               The return stack pointer
0102                  (        forth.asm):00152         TOKENSP rmb     2               Token start pointer (STRS)
0104                  (        forth.asm):00153         TOKENEP rmb     2               Token end pointer (STRE)
0106                  (        forth.asm):00154         LSTWAD  rmb     2               Last defined word header pointer--LAST
0108                  (        forth.asm):00155         DICEND  rmb     2               Current end of the dictionary--HERE
010A                  (        forth.asm):00156         BLSTWAD rmb     2               Backup (was IX)
010C                  (        forth.asm):00157         BDICEND rmb     2               Backup (was IY)
010E                  (        forth.asm):00158         PLOAD   rmb     2               Word payload if found by SWDIC
0110                  (        forth.asm):00159         FNDPLD  rmb     2               Last code payload reported by FIND
0112                  (        forth.asm):00160         RECADDR rmb     2               Used by RECURSE
0114                  (        forth.asm):00161         JSRLAST rmb     2               Last compilation address of #JSROPC
0116                  (        forth.asm):00162         VLPRVEP rmb     2               Used in VLIST to compute word code length
0118                  (        forth.asm):00163         VLPRVHD rmb     2               Used in VLIST to compute word code length
011A                  (        forth.asm):00164         MRUBUFA rmb     2               Most recently used buffer address
011C                  (        forth.asm):00165         BSBFADR rmb     2               Base buffer address for the input stream
                      (        forth.asm):00166         
                      (        forth.asm):00167         * Global variables.
011E                  (        forth.asm):00168         UBASE   rmb     2               Base for numbers input and output--BASE
0120                  (        forth.asm):00169         USTATE  rmb     2               0 if interpreting, 1 if compiling--STATE
0122                  (        forth.asm):00170         UTOIN   rmb     2               User variable for >IN
0124                  (        forth.asm):00171         UBLK    rmb     2               User variable for BLK
0126                  (        forth.asm):00172         USCR    rmb     2               User variable for SCR (output for LIST)
                      (        forth.asm):00173                 IFNE    DEBUG
0128                  (        forth.asm):00174         CCREG   rmb     2               A DEBUG variable for predicates (see CMP2)
                      (        forth.asm):00175                 ENDC
0128                  (        forth.asm):00176         BASBKUP rmb     1               BASE backup when a base prefix is in use
0129                  (        forth.asm):00177         CMDLNSZ rmb     1               Entered character count in GETS (INTERP)
012A                  (        forth.asm):00178         RDEPTH  rmb     1               Return stack depth in cells
012B                  (        forth.asm):00179         IRDPTH  rmb     1               Return stack depth when : was last invoked
012C                  (        forth.asm):00180         RTSREMV rmb     1               If > 1, omit the final RTS when compiling
012D                  (        forth.asm):00181         DIVFCN  rmb     1               Flag used by /, MOD and /MOD
012E                  (        forth.asm):00182         STSLFCN rmb     1               Flag used by */, */MOD
012F                  (        forth.asm):00183         CVTFCN  rmb     1               CVT: 0 => # semantics, 1 => #S semantics
0130                  (        forth.asm):00184         ISNEGF  rmb     1               Number being scanned is negative
0131                  (        forth.asm):00185         CVISSGN rmb     1               Flag: should CVNSTR consider numbers as signed
0132                  (        forth.asm):00186         CURTOKL rmb     1               Current token length. Set by SWDIC
0133                  (        forth.asm):00187         IMDFLG  rmb     1               Immediate flag
0134                  (        forth.asm):00188         DEFFLG  rmb     1               Define flag
0135                  (        forth.asm):00189         NBCTFB0 rmb     1               NZ if -->/CONTINUED invoked from the console
                      (        forth.asm):00190         
0136                  (        forth.asm):00191         CFCARDP rmb     1               NZ if CF card present
0137                  (        forth.asm):00192         CFCMMIR rmb     1               Last CF command issued
0138                  (        forth.asm):00193         CFERRCD rmb     1               and the corresponding error code
                      (        forth.asm):00194         
0139                  (        forth.asm):00195         PADBUF  rmb     PADBSZ          PAD lives here. Used by <#, #, #S, #> and DUMP
                      (        forth.asm):00196         
                      (        forth.asm):00197         * The normal (data) stack.
                      (        forth.asm):00198                 align   2
     018A             (        forth.asm):00199         NSTTOP  equ     *               U's value when the data stack is full
018A                  (        forth.asm):00200                 rmb     NSTKSZ
     024A             (        forth.asm):00201         NSTBOT  equ     *               U's value when the data stack is empty
                      (        forth.asm):00202         
                      (        forth.asm):00203         * The return stack.
     024A             (        forth.asm):00204         RSTTOP  equ     *
024A                  (        forth.asm):00205                 rmb     RSTKSZ
     02CA             (        forth.asm):00206         RSTBOT  equ     *
                      (        forth.asm):00207         
02CA                  (        forth.asm):00208         CMDBUF  rmb     CMDBFSZ
034E                  (        forth.asm):00209         HEXBUF  rmb     HEXBFSZ
                      (        forth.asm):00210         
039E                  (        forth.asm):00211         TBUFF   rmb     TBUFSZ          Output for CVNSTR. Also used by DUMP
                      (        forth.asm):00212         
03E6 0000000000000000 (        forth.asm):00213                 align   16
     0000
03F0                  (        forth.asm):00214         BUF0    rmb     BLKSIZ+4
07F4 0000000000000000 (        forth.asm):00215                 align   16
     00000000
0800                  (        forth.asm):00216         BUF1    rmb     BLKSIZ+4
                      (        forth.asm):00217         
                      (        forth.asm):00218         *******************************************************************************
                      (        forth.asm):00219         * Writable dictionary section begins right here. We cannot have anything
                      (        forth.asm):00220         * statically defined at this point. Therefore, FORTHIN moves the code for @
                      (        forth.asm):00221         * to this location and sets up DICEND and LSTWAD accordingly. All the RAM
                      (        forth.asm):00222         * beyond this point (after the reallocated @ implementation) is user defined
                      (        forth.asm):00223         * material. Note that builtin words, though they cannot be forgotten (to the
                      (        forth.asm):00224         * extent they are ROM resident--not to mention inter-word dependencies),
                      (        forth.asm):00225         * might still be overridden by user definitions. VLIST will happily ignore
                      (        forth.asm):00226         * that fact and list everything in the dictionary linked list order.
                      (        forth.asm):00227         
0C04 0000000000000000 (        forth.asm):00228                 align   16
     00000000
     0C10             (        forth.asm):00229         WDICSPC equ     *
                      (        forth.asm):00230         
                      (        forth.asm):00231         *******************************************************************************
                      (        forth.asm):00232         * ROM code begins.
                      (        forth.asm):00233         
                      (        forth.asm):00234                 org     ROMSTRT
                      (        forth.asm):00235         * Trap handler: division by zero or illegal opcode. See page 4-10 of "The 6309
                      (        forth.asm):00236         * Book" for a description of interrupt stacks in native 6309 mode.
E000 113C40           (        forth.asm):00237 (4)     IODZHDL bitmd   #$40            Illegal opcode?
E003 2705             (        forth.asm):00238 (3)             beq     @iodzh1
E005 8EFE5A           (        forth.asm):00239 (3)             ldx     #IOPERRM
E008 2008             (        forth.asm):00240 (3)             bra     @iodxh2
E00A 113C80           (        forth.asm):00241 (4)     @iodzh1 bitmd   #$80            Division by zero?
E00D 2725             (        forth.asm):00242 (3)             beq     @iodzh3         And you may ask yourself, well
                      (        forth.asm):00243         *                               How did I get here?
E00F 8EFE6F           (        forth.asm):00244 (3)             ldx     #DV0ERRM
E012 BDE1DB           (        forth.asm):00245 (7)     @iodxh2 jsr     PUTS
E015 EC6C             (        forth.asm):00246 (5+1)           ldd     12,s            Return code address (PC)
E017 8E034E           (        forth.asm):00247 (3)             ldx     #HEXBUF
E01A BDE175           (        forth.asm):00248 (7)             jsr     HDMP4   
E01D 8E034E           (        forth.asm):00249 (3)             ldx     #HEXBUF
E020 BDE1DB           (        forth.asm):00250 (7)             jsr     PUTS
E023 BDE1E8           (        forth.asm):00251 (7)             jsr     PUTCR
E026 8EE639           (        forth.asm):00252 (3)             ldx     #ERRHD1
E029 AF6C             (        forth.asm):00253 (5+1)           stx     12,s            Resume execution in the error handler
E02B 8EE000           (        forth.asm):00254 (3)             ldx     #IODZHDL
E02E AF68             (        forth.asm):00255 (5+1)           stx     8,s             With Y set to IODZHDL
E030 8603             (        forth.asm):00256 (2)             lda     #3              And user ABORT error code
E032 A762             (        forth.asm):00257 (4+1)           sta     2,s             Passed back through B
E034 3B               (        forth.asm):00258 (17+?)  @iodzh3 rti
                      (        forth.asm):00259         
     E035             (        forth.asm):00260         SWI3HDL equ     *
     E035             (        forth.asm):00261         SWI2HDL equ     *
     E035             (        forth.asm):00262         FIRQHDL equ     *
     E035             (        forth.asm):00263         IRQHDL  equ     *
     E035             (        forth.asm):00264         SWIHDL  equ     *
E035 13               (        forth.asm):00265 (1+?)   NMIHDL  sync                    Go to low power mode idling forever
                      (        forth.asm):00266         
E036 1A50             (        forth.asm):00267 (2)     RSTHDL  orcc    #$50            Disable interrupts
                      (        forth.asm):00268         
                      (        forth.asm):00269         * In theory, this means 15% extra performance.
                      (        forth.asm):00270         * In practice, this means an extra 5 mA current comsumption.
                      (        forth.asm):00271         * The additional performance is measurable so I am going for it.
E038 113D01           (        forth.asm):00272 (5)             ldmd    #1              Establish 6309 native mode
                      (        forth.asm):00273         
E03B 8643             (        forth.asm):00274 (2)             lda     #ACIRSET
E03D B7D800           (        forth.asm):00275 (4)             sta     ACIACTL         ACIA master reset
E040 8655             (        forth.asm):00276 (2)             lda     #ACIRTS1
E042 B7D800           (        forth.asm):00277 (4)             sta     ACIACTL         No IRQ on RDRF, RTS high, 8N1, 115200 bps
                      (        forth.asm):00278         
E045 8EFDCD           (        forth.asm):00279 (3)             ldx     #BOOTMSG        Identity statement
                      (        forth.asm):00280         
                      (        forth.asm):00281         * Send the NUL terminated string pointed to by X to the ACIA.
                      (        forth.asm):00282         * The RAM is not assumed to be working.
E048 C602             (        forth.asm):00283 (2)     INIT    ldb     #ACITDRE
E04A A680             (        forth.asm):00284 (4+1)   @init0  lda     ,x+
E04C 270A             (        forth.asm):00285 (3)             beq     RAMCHK          NUL marks the end of the string
E04E F5D800           (        forth.asm):00286 (4)     @init1  bitb    ACIACTL         Wait for TDRE bit to be set
E051 27FB             (        forth.asm):00287 (3)             beq     @init1
E053 B7D801           (        forth.asm):00288 (4)             sta     ACIADAT         Transmit data
E056 20F2             (        forth.asm):00289 (3)             bra     @init0          Next char, if any
                      (        forth.asm):00290         
                      (        forth.asm):00291         * RAM0 32 KB self test (destructive).
E058 8E0000           (        forth.asm):00292 (3)     RAMCHK  ldx     #RAMSTRT
E05B AF84             (        forth.asm):00293 (5+0)   @ramch1 stx     ,x
E05D AC84             (        forth.asm):00294 (5+0)           cmpx    ,x
E05F 2609             (        forth.asm):00295 (3)             bne     RAMFAIL
E061 3002             (        forth.asm):00296 (4+1)           leax    2,x
E063 8C8000           (        forth.asm):00297 (3)             cmpx    #RAMSTRT+RAMSIZE
E066 26F3             (        forth.asm):00298 (3)             bne     @ramch1
E068 2012             (        forth.asm):00299 (3)             bra     RAMOK
                      (        forth.asm):00300         
E06A C680             (        forth.asm):00301 (2)     RAMFAIL ldb     #128
E06C 108E8000         (        forth.asm):00302 (4)     @ramf1  ldy     #$8000
E070 313F             (        forth.asm):00303 (4+1)   @ramf2  leay    -1,y
E072 26FC             (        forth.asm):00304 (3)             bne     @ramf2
E074 5A               (        forth.asm):00305 (1)             decb
E075 26F5             (        forth.asm):00306 (3)             bne     @ramf1
E077 8EFE40           (        forth.asm):00307 (3)             ldx     #RAMFM
E07A 20CC             (        forth.asm):00308 (3)             bra     INIT            Here we go again
                      (        forth.asm):00309         
                      (        forth.asm):00310         * RAM Initialization to all $C7 if DEBUG mode is enabled else zeroes.
E07C 8E0000           (        forth.asm):00311 (3)     RAMOK   ldx     #RAMSTRT
E07F 3101             (        forth.asm):00312 (4+1)           leay    1,x
E081 10867FFF         (        forth.asm):00313 (4)             ldw     #RAMSIZE-1
                      (        forth.asm):00314                 IFNE    DEBUG
                      (        forth.asm):00315                 lda     #ILLOPC
                      (        forth.asm):00316                 sta     ,x
                      (        forth.asm):00317                 ELSE
E085 6F84             (        forth.asm):00318 (6+0)           clr     ,x
                      (        forth.asm):00319                 ENDC
E087 113812           (        forth.asm):00320 (6+?)           tfm     x+,y+
                      (        forth.asm):00321         
                      (        forth.asm):00322         * Initialize the system stack pointer and the direct page base address register.
E08A 10CE8000         (        forth.asm):00323 (4)             lds     #RAMSTRT+RAMSIZE
                      (        forth.asm):00324                 IFNE    USEDP
E08E 8601             (        forth.asm):00325 (2)             lda     #VARSPC/256
E090 1F8B             (        forth.asm):00326 (4)             tfr     a,dp
     01               (        forth.asm):00327                 SETDP   VARSPC/256
                      (        forth.asm):00328                 ENDC
E092 8EFE2F           (        forth.asm):00329 (3)             ldx     #RAMOKM
E095 BDE1DB           (        forth.asm):00330 (7)             jsr     PUTS
E098 BDE241           (        forth.asm):00331 (7)             jsr     FORTHIN         Global variables initialization
E09B BDE786           (        forth.asm):00332 (7)             jsr     CFINIT          CompactFlash card initialization
E09E 0D36             (        forth.asm):00333 (4)             tst     CFCARDP
E0A0 2706             (        forth.asm):00334 (3)             beq     INTERP
                      (        forth.asm):00335         * A CF card is present, LOAD block #1.
E0A2 8E0001           (        forth.asm):00336 (3)             ldx     #1
E0A5 BDF65E           (        forth.asm):00337 (7)             jsr     LOAD1
                      (        forth.asm):00338         
                      (        forth.asm):00339         * The interpreter main loop.
E0A8 104F             (        forth.asm):00340 (2)     INTERP  clrd
E0AA DD24             (        forth.asm):00341 (4)             std     UBLK            Interpreting from the console. Set BLK to 0
E0AC DD22             (        forth.asm):00342 (4)             std     UTOIN
E0AE 8E02CA           (        forth.asm):00343 (3)             ldx     #CMDBUF
E0B1 9F1C             (        forth.asm):00344 (4)             stx     BSBFADR
E0B3 C683             (        forth.asm):00345 (2)             ldb     #CMDBFSZ-1      NUL terminator is not included in the char count
E0B5 BDE1FE           (        forth.asm):00346 (7)             jsr     GETS            Acquire command from the console
                      (        forth.asm):00347         * Additional setup in case the ANSI \ is used.
E0B8 D729             (        forth.asm):00348 (3)             stb     CMDLNSZ         GETS returns the entered character count via B
                      (        forth.asm):00349         * Additional preparation work for block support.
E0BA 0F35             (        forth.asm):00350 (5)             clr     NBCTFB0         Flag whether -->/CONTINUED is called from blk 0
E0BC 8D02             (        forth.asm):00351 (6)             bsr     _INTERP
E0BE 20E8             (        forth.asm):00352 (3)     MINTLRA bra     INTERP
                      (        forth.asm):00353         
                      (        forth.asm):00354         * The interpreter itself.
E0C0 BDE280           (        forth.asm):00355 (7)     _INTERP jsr     SCNSTOK         Scan for the beginning of a word at address X
E0C3 2715             (        forth.asm):00356 (3)             beq     @more0          This is the end
E0C5 0D21             (        forth.asm):00357 (4)             tst     USTATE+1        We do ignore the upper byte
E0C7 2644             (        forth.asm):00358 (3)             bne     COMP            We are compiling
E0C9 BDE38A           (        forth.asm):00359 (7)             jsr     SWDIC           Updates TOKENEP, CURTOKL, IMDFLG/DEFFLG
E0CC 2624             (        forth.asm):00360 (3)             bne     @exec           Word found, execute it
E0CE BDE2DD           (        forth.asm):00361 (7)             jsr     NUMCVT
     E0D1             (        forth.asm):00362         NMCVIRA equ     *
E0D1 BDE6AF           (        forth.asm):00363 (7)             jsr     NPUSH
E0D4 9E04             (        forth.asm):00364 (4)             ldx     TOKENEP
E0D6 6D84             (        forth.asm):00365 (5+0)   MORE    tst     ,x
E0D8 26E6             (        forth.asm):00366 (3)             bne     _INTERP         Next token, please!
                      (        forth.asm):00367         * End of input stream condition is recognized.
E0DA DC24             (        forth.asm):00368 (4)     @more0  ldd     UBLK
E0DC 2705             (        forth.asm):00369 (3)             beq     @more1          We are back from the console
E0DE 0D35             (        forth.asm):00370 (4)             tst     NBCTFB0         -->/CONTINUED invoked from the console?
E0E0 2601             (        forth.asm):00371 (3)             bne     @more1          Yes
E0E2 39               (        forth.asm):00372 (4)             rts                     No, we're done here
E0E3 0F35             (        forth.asm):00373 (5)     @more1  clr     NBCTFB0         The -->/CONTINUED exception only applies once
E0E5 8EFE54           (        forth.asm):00374 (3)             ldx     #OKPRMPT        Provide OK feedback
E0E8 0D21             (        forth.asm):00375 (4)             tst     USTATE+1        No OK feedback if we're compiling, just CRLF
E0EA 2702             (        forth.asm):00376 (3)             beq     @more2
E0EC 3003             (        forth.asm):00377 (4+1)           leax    3,x             Skip the ' OK' string when compiling
E0EE BDE1DB           (        forth.asm):00378 (7)     @more2  jsr     PUTS
E0F1 39               (        forth.asm):00379 (4)             rts                     Back to whoever invoked us
E0F2 9634             (        forth.asm):00380 (3)     @exec   lda     DEFFLG
E0F4 2705             (        forth.asm):00381 (3)             beq     @introk         Compilation only flag is not set
E0F6 C606             (        forth.asm):00382 (2)             ldb     #6              Incorrect STATE
E0F8 BDE636           (        forth.asm):00383 (7)             jsr     ERRHDLR         No return
     E0FB             (        forth.asm):00384         INTISRA equ     *               For symbolic stack debugging purposes
E0FB DC04             (        forth.asm):00385 (4)     @introk ldd     TOKENEP
E0FD 931C             (        forth.asm):00386 (4)             subd    BSBFADR
E0FF DD22             (        forth.asm):00387 (4)             std     UTOIN           Derive >IN from TOKENEP
E101 8EE108           (        forth.asm):00388 (3)             ldx     #INTRPRA        The return address
E104 3410             (        forth.asm):00389 (4+2)           pshs    x
E106 1F25             (        forth.asm):00390 (4)             tfr     y,pc            An indirect call to Y
E108 BDE703           (        forth.asm):00391 (7)     INTRPRA jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
E10B 20C9             (        forth.asm):00392 (3)             bra     MORE
                      (        forth.asm):00393         
                      (        forth.asm):00394         * The compiler.
                      (        forth.asm):00395         * Upon entry TOKENSP has been set by a prior call to SCNSTOK.
E10D BDE38A           (        forth.asm):00396 (7)     COMP    jsr     SWDIC           Updates TOKENEP, CURTOKL, IMDFLG/DEFFLG
E110 2720             (        forth.asm):00397 (3)             beq     @cmpnum         Word @ TOKENSP is not in the dictionary
E112 0D33             (        forth.asm):00398 (4)             tst     IMDFLG
E114 2714             (        forth.asm):00399 (3)             beq     @notimd
E116 DC04             (        forth.asm):00400 (4)             ldd     TOKENEP         Derive >IN from TOKENEP
E118 931C             (        forth.asm):00401 (4)             subd    BSBFADR
E11A DD22             (        forth.asm):00402 (4)             std     UTOIN
E11C 8EE123           (        forth.asm):00403 (3)             ldx     #COMPLRA        Word is immediate. Execute it.
E11F 3410             (        forth.asm):00404 (4+2)           pshs    x               Return to COMPLRA
E121 1F25             (        forth.asm):00405 (4)             tfr     y,pc            An indirect call to Y
E123 BDE703           (        forth.asm):00406 (7)     COMPLRA jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
E126 9F04             (        forth.asm):00407 (4)             stx     TOKENEP
E128 20AC             (        forth.asm):00408 (3)             bra     MORE            Branch back to the interpreter
E12A 1F21             (        forth.asm):00409 (4)     @notimd tfr     y,x
E12C 8D20             (        forth.asm):00410 (6)             bsr     EMXASXT         Emit X as an execution token
E12E 9E04             (        forth.asm):00411 (4)     @cmpdon ldx     TOKENEP
E130 20A4             (        forth.asm):00412 (3)             bra     MORE
E132 BDE2DD           (        forth.asm):00413 (7)     @cmpnum jsr     NUMCVT
     E135             (        forth.asm):00414         NMCVCRA equ     *
E135 BDE45A           (        forth.asm):00415 (7)             jsr     LITER
E138 20F4             (        forth.asm):00416 (3)             bra     @cmpdon
                      (        forth.asm):00417         
                      (        forth.asm):00418         * Check whether the final RTS can be eliminated. It can only be if we have no
                      (        forth.asm):00419         * forward references to HERE when COMPR (;) is invoked. This is a rather
                      (        forth.asm):00420         * complicated matter but this implementation works on the basis that we can do
                      (        forth.asm):00421         * so safely if at least 2 subroutine calls have been issued with a return
                      (        forth.asm):00422         * stack whose depth is equal to IRDPTH, immediately prior to the invokation
                      (        forth.asm):00423         * of COMPR (;).
E13A 3402             (        forth.asm):00424 (4+1)   CHKRTS  pshs    a
E13C 109F14           (        forth.asm):00425 (5)             sty     JSRLAST         JSRLAST points to the latest JSR code emission
E13F 962A             (        forth.asm):00426 (3)             lda     RDEPTH
E141 912B             (        forth.asm):00427 (3)             cmpa    IRDPTH          Return stack depth when : was last invoked
E143 2705             (        forth.asm):00428 (3)             beq     @ckrts1
E145 0F2C             (        forth.asm):00429 (5)             clr     RTSREMV
E147 3502             (        forth.asm):00430 (4+1)   @ckrts0 puls    a
E149 39               (        forth.asm):00431 (4)             rts
E14A 0C2C             (        forth.asm):00432 (5)     @ckrts1 inc     RTSREMV
E14C 20F9             (        forth.asm):00433 (3)             bra     @ckrts0
                      (        forth.asm):00434         
                      (        forth.asm):00435         * Emit (in a code generation understanding) X as an execution token.
                      (        forth.asm):00436         * In essence, this simply inserts JSR <X> at HERE.
                      (        forth.asm):00437         * Note: this code provides support for trailing JSR elimination.
                      (        forth.asm):00438         * On input: X has the target execution token.
                      (        forth.asm):00439         * On output: Y will have HERE, A will be altered, X will be preserved.
E14E 109E08           (        forth.asm):00440 (5)     EMXASXT ldy     DICEND
E151 8DE7             (        forth.asm):00441 (6)             bsr     CHKRTS          Check if the final RTS can be omitted
E153 86BD             (        forth.asm):00442 (2)             lda     #JSROPC         JSR extended
E155 BDE471           (        forth.asm):00443 (7)             jsr     VARCON2         Compile a JSR to the action component
E158 109F08           (        forth.asm):00444 (5)             sty     DICEND
E15B 39               (        forth.asm):00445 (4)             rts
                      (        forth.asm):00446         
                      (        forth.asm):00447         * Store the HEX representation of the lower nibble of A to X+.
E15C 3404             (        forth.asm):00448 (4+1)   HEX1D   pshs    b
E15E C630             (        forth.asm):00449 (2)             ldb     #'0
E160 840F             (        forth.asm):00450 (2)             anda    #$0f
E162 810A             (        forth.asm):00451 (2)             cmpa    #10
E164 2502             (        forth.asm):00452 (3)             bcs     @hex1d1
E166 C637             (        forth.asm):00453 (2)             ldb     #'A-10
E168 103098           (        forth.asm):00454 (4)     @hex1d1 addr    b,a
E16B A780             (        forth.asm):00455 (4+1)           sta     ,x+
E16D 3504             (        forth.asm):00456 (4+1)           puls    b
E16F 39               (        forth.asm):00457 (4)             rts
                      (        forth.asm):00458         
E170 44               (        forth.asm):00459 (1)     ADIV16  lsra
E171 44               (        forth.asm):00460 (1)             lsra
E172 44               (        forth.asm):00461 (1)             lsra
E173 44               (        forth.asm):00462 (1)             lsra
E174 39               (        forth.asm):00463 (4)             rts
                      (        forth.asm):00464         
                      (        forth.asm):00465         * Hexdump D to 4 bytes starting at X.  Upon return, X will point 1 byte
                      (        forth.asm):00466         * after the last character emitted. D is preserved.
E175 3406             (        forth.asm):00467 (4+2)   HDMP4   pshs    d
E177 8DF7             (        forth.asm):00468 (6)             bsr     ADIV16
E179 8DE1             (        forth.asm):00469 (6)             bsr     HEX1D
E17B A6E4             (        forth.asm):00470 (4+0)           lda     ,s
E17D 8DDD             (        forth.asm):00471 (6)             bsr     HEX1D
E17F A661             (        forth.asm):00472 (4+1)           lda     1,s
E181 8DED             (        forth.asm):00473 (6)             bsr     ADIV16
E183 8DD7             (        forth.asm):00474 (6)             bsr     HEX1D
E185 A661             (        forth.asm):00475 (4+1)           lda     1,s
E187 8DD3             (        forth.asm):00476 (6)             bsr     HEX1D
E189 3506             (        forth.asm):00477 (4+2)           puls    d
E18B 6F84             (        forth.asm):00478 (6+0)           clr     ,x
E18D 39               (        forth.asm):00479 (4)             rts
                      (        forth.asm):00480         
E18E 3406             (        forth.asm):00481 (4+2)   HDMP2   pshs    d
E190 8DDE             (        forth.asm):00482 (6)             bsr     ADIV16
E192 8DC8             (        forth.asm):00483 (6)             bsr     HEX1D
E194 A6E4             (        forth.asm):00484 (4+0)           lda     ,s
E196 8DC4             (        forth.asm):00485 (6)             bsr     HEX1D
E198 3506             (        forth.asm):00486 (4+2)           puls    d
E19A 6F84             (        forth.asm):00487 (6+0)           clr     ,x
E19C 39               (        forth.asm):00488 (4)             rts
                      (        forth.asm):00489         
                      (        forth.asm):00490         * Add string pointed to by Y starting at the address stored in X.
E19D 3402             (        forth.asm):00491 (4+1)   ADDS    pshs    a
E19F A6A0             (        forth.asm):00492 (4+1)   @adds1  lda     ,y+
E1A1 A780             (        forth.asm):00493 (4+1)           sta     ,x+
E1A3 26FA             (        forth.asm):00494 (3)             bne     @adds1
E1A5 3502             (        forth.asm):00495 (4+1)           puls    a
E1A7 39               (        forth.asm):00496 (4)             rts
                      (        forth.asm):00497         
                      (        forth.asm):00498         * Returns the length of the string pointed to by X (terminator excluded) in W.
E1A8 3410             (        forth.asm):00499 (4+2)   SLEN    pshs    x
E1AA 105F             (        forth.asm):00500 (2)             clrw
E1AC 105C             (        forth.asm):00501 (2)     @slen1  incw
E1AE A680             (        forth.asm):00502 (4+1)           lda     ,x+
E1B0 26FA             (        forth.asm):00503 (3)             bne     @slen1
E1B2 105A             (        forth.asm):00504 (2)             decw
E1B4 3510             (        forth.asm):00505 (4+2)           puls    x
E1B6 39               (        forth.asm):00506 (4)             rts
                      (        forth.asm):00507         
                      (        forth.asm):00508                 include console.asm
E1B7 3404             (      console.asm):00001 (4+1)   PUTCH   pshs    b
E1B9 C602             (      console.asm):00002 (2)             ldb     #ACITDRE
E1BB F5D800           (      console.asm):00003 (4)     @ptch1  bitb    ACIACTL         Wait for TDRE bit to be set
E1BE 27FB             (      console.asm):00004 (3)             beq     @ptch1
E1C0 B7D801           (      console.asm):00005 (4)             sta     ACIADAT         Transmit data
E1C3 3504             (      console.asm):00006 (4+1)           puls    b
E1C5 39               (      console.asm):00007 (4)             rts
                      (      console.asm):00008         
E1C6 8615             (      console.asm):00009 (2)     GETCH   lda     #ACIRTS0
E1C8 B7D800           (      console.asm):00010 (4)             sta     ACIACTL         You may talk to me now
E1CB 8601             (      console.asm):00011 (2)             lda     #ACIRDRF
E1CD B5D800           (      console.asm):00012 (4)     @again  bita    ACIACTL
E1D0 27FB             (      console.asm):00013 (3)             beq     @again
E1D2 8655             (      console.asm):00014 (2)             lda     #ACIRTS1
E1D4 B7D800           (      console.asm):00015 (4)             sta     ACIACTL         You may shut up now
                      (      console.asm):00016                 IFNE    CKOVRUN
                      (      console.asm):00017                 lda     #ACIOVRN
                      (      console.asm):00018                 bita    ACIACTL         Check for overrun
                      (      console.asm):00019                 beq     @getdat
                      (      console.asm):00020                 lda     #'*
                      (      console.asm):00021                 bsr     PUTCH
                      (      console.asm):00022                 ENDC
E1D7 B6D801           (      console.asm):00023 (4)     @getdat lda     ACIADAT         Get character from the ACIA
E1DA 39               (      console.asm):00024 (4)             rts
                      (      console.asm):00025         
                      (      console.asm):00026         * Send NUL terminated string pointed to by X to the ACIA.
E1DB 3416             (      console.asm):00027 (4+4)   PUTS    pshs    x,d
E1DD A680             (      console.asm):00028 (4+1)   @puts1  lda     ,x+
E1DF 2704             (      console.asm):00029 (3)             beq     @puts2         NUL marks the end of the string
E1E1 8DD4             (      console.asm):00030 (6)             bsr     PUTCH
E1E3 20F8             (      console.asm):00031 (3)             bra     @puts1
E1E5 3516             (      console.asm):00032 (4+4)   @puts2  puls    d,x
E1E7 39               (      console.asm):00033 (4)             rts
                      (      console.asm):00034         
E1E8 3410             (      console.asm):00035 (4+2)   PUTCR   pshs    x
E1EA 8EFE3D           (      console.asm):00036 (3)             ldx     #CRLFSTR
E1ED 8DEC             (      console.asm):00037 (6)             bsr     PUTS
E1EF 3510             (      console.asm):00038 (4+2)           puls    x
E1F1 39               (      console.asm):00039 (4)             rts
                      (      console.asm):00040         
E1F2 8608             (      console.asm):00041 (2)     _BS     lda     #BS
E1F4 8DC1             (      console.asm):00042 (6)             bsr     PUTCH          Output BS
E1F6 8620             (      console.asm):00043 (2)             lda     #SP
E1F8 8DBD             (      console.asm):00044 (6)             bsr     PUTCH          Clear character
E1FA 8608             (      console.asm):00045 (2)             lda     #BS
E1FC 20B9             (      console.asm):00046 (3)             bra     PUTCH          And go back again
                      (      console.asm):00047         
                      (      console.asm):00048         * Receive CR terminated string and store it to X.
                      (      console.asm):00049         * Upon entry B contains the receiving buffer length.
                      (      console.asm):00050         * (excluding the NUL terminator). On exit, B will
                      (      console.asm):00051         * contain the number of characters entered (excluding
                      (      console.asm):00052         * the trailing NUL). A and X are preserved. B will
                      (      console.asm):00053         * have the actual number of characters entered.
                      (      console.asm):00054         * Implementation of $05D9 in TRS-80 Level II ROM.
E1FE C102             (      console.asm):00055 (2)     GETS    cmpb    #2
E200 2401             (      console.asm):00056 (3)             bhs     @gets0          B must be 2 or more
E202 39               (      console.asm):00057 (4)             rts
E203 3416             (      console.asm):00058 (4+4)   @gets0  pshs    x,d
E205 8DBF             (      console.asm):00059 (6)     @gets1  bsr     GETCH
E207 8108             (      console.asm):00060 (2)             cmpa    #BS             Backspace?
E209 260B             (      console.asm):00061 (3)             bne     @gets3
E20B E161             (      console.asm):00062 (4+1)           cmpb    1,s             B upon routine entry
E20D 27F6             (      console.asm):00063 (3)             beq     @gets1          Do not go beyond the beginning of the buffer
E20F 8DE1             (      console.asm):00064 (6)             bsr     _BS
E211 301F             (      console.asm):00065 (4+1)           leax    -1,x
E213 5C               (      console.asm):00066 (1)             incb
E214 20EF             (      console.asm):00067 (3)             bra     @gets1
E216 8115             (      console.asm):00068 (2)     @gets3  cmpa    #NAK            Kill input?
E218 260B             (      console.asm):00069 (3)             bne     @gets5
                      (      console.asm):00070         * While B != 1,S (initial buffer length), decrement X, increment B.
E21A E161             (      console.asm):00071 (4+1)   @gets4  cmpb    1,s
E21C 27E7             (      console.asm):00072 (3)             beq     @gets1
E21E 8DD2             (      console.asm):00073 (6)             bsr     _BS
E220 301F             (      console.asm):00074 (4+1)           leax     -1,x
E222 5C               (      console.asm):00075 (1)             incb
E223 20F5             (      console.asm):00076 (3)             bra     @gets4
                      (      console.asm):00077         * Regular input handling: echo input character.
E225 810D             (      console.asm):00078 (2)     @gets5  cmpa    #CR
E227 2709             (      console.asm):00079 (3)             beq     @gets6          Minicom only sends CR
E229 8D8C             (      console.asm):00080 (6)             bsr     PUTCH
E22B A780             (      console.asm):00081 (4+1)           sta     ,x+
E22D 5A               (      console.asm):00082 (1)             decb
E22E C101             (      console.asm):00083 (2)             cmpb    #1              End of buffer reached?
E230 26D3             (      console.asm):00084 (3)             bne     @gets1
E232 8620             (      console.asm):00085 (2)     @gets6  lda     #SP
E234 8D81             (      console.asm):00086 (6)             bsr     PUTCH
E236 6F84             (      console.asm):00087 (6+0)           clr     ,x
E238 1F10             (      console.asm):00088 (4)             tfr     x,d
E23A A362             (      console.asm):00089 (5+1)           subd    2,s             Actual number of characters entered
E23C E761             (      console.asm):00090 (4+1)           stb     1,s             Stored to B (through the system stack).         
E23E 3516             (      console.asm):00091 (4+4)           puls    x,d
E240 39               (      console.asm):00092 (4)             rts
                      (      console.asm):00093         
                      (        forth.asm):00509         
                      (        forth.asm):00510                 IFNE    DEBUG
E241                  (        forth.asm):00511         PAGE0IN pshs    x               Fill up page 0 with all C7 (an illegal opcode)
                      (        forth.asm):00512                 ldx     #RAMSTRT
                      (        forth.asm):00513                 lda     #ILLOPC
                      (        forth.asm):00514                 sta     ,x
                      (        forth.asm):00515                 leay    1,x
                      (        forth.asm):00516                 ldw     #255
                      (        forth.asm):00517                 tfm     x+,y+
                      (        forth.asm):00518                 puls    x
                      (        forth.asm):00519                 rts
                      (        forth.asm):00520                 ENDC
                      (        forth.asm):00521         
E241 BDEA0C           (        forth.asm):00522         FORTHIN RFXT    jsr,NCLR+7      XT for NCLR. Set up the normal stack
E244 BDEA18           (        forth.asm):00523                 RFXT    jsr,RCLR+7      XT for RCLR. Set up the return stack
                      (        forth.asm):00524                 IFNE    DEBUG
                      (        forth.asm):00525                 bsr     PAGE0IN
                      (        forth.asm):00526                 ENDC
                      (        forth.asm):00527         * Relocate '@' code to RAM and set it up as the last dictionary entry (RO).
E247 8EFDB5           (        forth.asm):00528 (3)             ldx     #THEEND         Source address for tfm
E24A 10860010         (        forth.asm):00529 (4)             ldw     #(REALEND-THEEND) Byte count for tfm
E24E 108E0C10         (        forth.asm):00530 (4)             ldy     #WDICSPC        Destination address for tfm
E252 109F06           (        forth.asm):00531 (5)             sty     LSTWAD
E255 113812           (        forth.asm):00532 (6+?)           tfm     x+,y+
E258 109F08           (        forth.asm):00533 (5)             sty     DICEND
                      (        forth.asm):00534                 IFNE    RELFEAT
E25B BDEB2C           (        forth.asm):00535                 RFXT    jsr,MONITOR+10  XT for MONITOR (monitor @ in RAM)
                      (        forth.asm):00536                 ENDC
E25E 8D0D             (        forth.asm):00537 (6)             bsr     EMPTYB          Buffer related initializations.
E260 104F             (        forth.asm):00538 (2)             clrd
E262 DD20             (        forth.asm):00539 (4)             std     USTATE          Initial mode is interpretation
E264 DD26             (        forth.asm):00540 (4)             std     USCR            Clear SCR
E266 DD24             (        forth.asm):00541 (4)             std     UBLK            Clear BLK
E268 DD22             (        forth.asm):00542 (4)             std     UTOIN           Clear >IN
E26A 7EF9F1           (        forth.asm):00543                 RFXT    jmp,DECIMAL+10  XT for DECIMAL. Default base is decimal
                      (        forth.asm):00544         
E26D 8E03F0           (        forth.asm):00545 (3)     EMPTYB  ldx     #BUF0
E270 8D03             (        forth.asm):00546 (6)             bsr     EMPT1B
E272 8E0800           (        forth.asm):00547 (3)             ldx     #BUF1
                      (        forth.asm):00548         * Empty the buffer pointed to by X.
E275 9F1A             (        forth.asm):00549 (4)     EMPT1B  stx     MRUBUFA         Update most recently used buffer address
E277 30890400         (        forth.asm):00550 (4+3)           leax    BOTERM,x        Buffer offset to the terminator field
E27B 104F             (        forth.asm):00551 (2)             clrd
E27D ED84             (        forth.asm):00552 (5+0)           std     ,x              Clear terminator and flags fields
                      (        forth.asm):00553                 IFNE    DEBUG
                      (        forth.asm):00554                 ldd     #$C7C7
                      (        forth.asm):00555                 leax    2,x
                      (        forth.asm):00556                 std     ,x              Dummy block number
                      (        forth.asm):00557                 ENDC
E27F 39               (        forth.asm):00558 (4)             rts
                      (        forth.asm):00559         
                      (        forth.asm):00560         * Scan for the next non-space character pointed to by X.
                      (        forth.asm):00561         * That character is returned through A. Flags are set accordingly.
E280 A680             (        forth.asm):00562 (4+1)   SCNSTOK lda     ,x+
E282 2704             (        forth.asm):00563 (3)             beq     @scstk1
E284 8120             (        forth.asm):00564 (2)             cmpa    #SP
E286 27F8             (        forth.asm):00565 (3)             beq     SCNSTOK
E288 301F             (        forth.asm):00566 (4+1)   @scstk1 leax    -1,x            Keep X pointing at the beginning of the token
E28A 9F02             (        forth.asm):00567 (4)             stx     TOKENSP
E28C 4D               (        forth.asm):00568 (1)             tsta                    Have to test again because LEA affects Z
E28D 39               (        forth.asm):00569 (4)             rts
                      (        forth.asm):00570         
                      (        forth.asm):00571         * Scan for the next white space character (or NUL) as an end of token marker.
                      (        forth.asm):00572         * Upon entry:
                      (        forth.asm):00573         * - X points to the input stream.
                      (        forth.asm):00574         * Upon return:
                      (        forth.asm):00575         * - X will point to the next space character or NUL.
                      (        forth.asm):00576         * - CURTOKL will hold the current token length (returned in B).
                      (        forth.asm):00577         * - TOKENEP will point to the end of the current token.
E28E 5F               (        forth.asm):00578 (1)     SCNETOK clrb
E28F 5C               (        forth.asm):00579 (1)     @scetok incb
E290 A680             (        forth.asm):00580 (4+1)           lda     ,x+
E292 2704             (        forth.asm):00581 (3)             beq     @scetk1
E294 8120             (        forth.asm):00582 (2)             cmpa    #SP
E296 26F7             (        forth.asm):00583 (3)             bne     @scetok
E298 301F             (        forth.asm):00584 (4+1)   @scetk1 leax    -1,x            Keep X pointing at the end of the token
E29A 9F04             (        forth.asm):00585 (4)             stx     TOKENEP
E29C 5A               (        forth.asm):00586 (1)             decb
E29D D732             (        forth.asm):00587 (3)             stb     CURTOKL
E29F 39               (        forth.asm):00588 (4)             rts
                      (        forth.asm):00589         
                      (        forth.asm):00590         * Check for numeric literal BASE prefix. On entry X has the input stream
                      (        forth.asm):00591         * pointer. On exit, BASE is altered if needed and the original BASE saved
                      (        forth.asm):00592         * to BASBKUP. If BASE was not changed, BASBKUP will be zero.
                      (        forth.asm):00593         * D is altered, X is updated if a BASE prefix is detected, other registers
                      (        forth.asm):00594         * are untouched.
E2A0 E684             (        forth.asm):00595 (4+0)   CKNBPFX ldb     ,x              B has a potential base prefix character
E2A2 3410             (        forth.asm):00596 (4+2)           pshs    x
E2A4 8EFF9C           (        forth.asm):00597 (3)             ldx     #BASALST        A associative list (A-list) of BASE prefixes
E2A7 A681             (        forth.asm):00598 (4+2)   @pflkup lda     ,x++            Potential BASE prefix character to A
E2A9 2707             (        forth.asm):00599 (3)             beq     @nopfix         Reached the end of the A-list. No prefix found
E2AB 103798           (        forth.asm):00600 (4)             cmpr    b,a             Prefix match?
E2AE 2707             (        forth.asm):00601 (3)             beq     @pfxfnd         Yes
E2B0 20F5             (        forth.asm):00602 (3)             bra     @pflkup
E2B2 0F28             (        forth.asm):00603 (5)     @nopfix clr     BASBKUP         Nothing to be restored to BASE
E2B4 3510             (        forth.asm):00604 (4+2)           puls    x
E2B6 39               (        forth.asm):00605 (4)             rts
E2B7 961F             (        forth.asm):00606 (3)     @pfxfnd lda     UBASE+1
E2B9 9728             (        forth.asm):00607 (3)             sta     BASBKUP         Back up the current BASE value
E2BB A61F             (        forth.asm):00608 (4+1)           lda     -1,x            The BASE specified by the prefix
E2BD 971F             (        forth.asm):00609 (3)             sta     UBASE+1         Update BASE
E2BF 3510             (        forth.asm):00610 (4+2)           puls    x
E2C1 3001             (        forth.asm):00611 (4+1)           leax    1,x             Skip the prefix from the input stream
                      (        forth.asm):00612         * The following is not especially pretty since we are altering system
                      (        forth.asm):00613         * stack contents owned by the caller. Yet it remains conducive to
                      (        forth.asm):00614         * compact code. With only one byte of EEPROM left, I think this is legit.
E2C3 6A62             (        forth.asm):00615 (6+1)           dec     2,s             Decrement the stacked up flavour of CURTOKL
E2C5 39               (        forth.asm):00616 (4)             rts
                      (        forth.asm):00617         
                      (        forth.asm):00618         * Restore BASE if a numeric literal BASE prefix was detected.
                      (        forth.asm):00619         * X is to be preserved at all cost!
E2C6 9628             (        forth.asm):00620 (3)     RSBSPFX lda     BASBKUP
E2C8 2702             (        forth.asm):00621 (3)             beq     @theend
E2CA 971F             (        forth.asm):00622 (3)             sta     UBASE+1
E2CC 39               (        forth.asm):00623 (4)     @theend rts
                      (        forth.asm):00624         
                      (        forth.asm):00625         * Check whether BASE is in the supported range ([2..36]).
E2CD 961F             (        forth.asm):00626 (3)     CKBASE  lda     UBASE+1         BASE
E2CF 8102             (        forth.asm):00627 (2)             cmpa    #2
E2D1 2505             (        forth.asm):00628 (3)             blo     @ckbser         Must be >= 2
E2D3 8124             (        forth.asm):00629 (2)             cmpa    #36
E2D5 2201             (        forth.asm):00630 (3)             bhi     @ckbser         And <= 36 (the ANSi maximum)
E2D7 39               (        forth.asm):00631 (4)             rts
E2D8 C60F             (        forth.asm):00632 (2)     @ckbser ldb     #15             Invalid BASE
E2DA BDE636           (        forth.asm):00633 (7)             jsr     ERRHDLR         No return
     E2DD             (        forth.asm):00634         CKBASRA equ     *
                      (        forth.asm):00635         
                      (        forth.asm):00636         * NUMCVT performs a signed string to number conversion. The input string is
                      (        forth.asm):00637         * acquired from the input stream. Note that this routine always is called
                      (        forth.asm):00638         * after a dictionary lookup (SWDIC), so TOKENSP and CURTOKL are guaranteed
                      (        forth.asm):00639         * to have been set previously. There are two ways out this routine:
                      (        forth.asm):00640         * - redirection to the error handler (Undefined word), or
                      (        forth.asm):00641         * - a converted cell returned through X.
                      (        forth.asm):00642         * This a re-implementation based on CONVERT but unlike CONVERT, which produces
                      (        forth.asm):00643         * an unsigned double as its output, this produces a signed single cell.
E2DD 8DEE             (        forth.asm):00644 (6)     NUMCVT  bsr     CKBASE          No return if BASE isn't in the [2..36] range
E2DF 9632             (        forth.asm):00645 (3)             lda     CURTOKL         Character count to go through
E2E1 3402             (        forth.asm):00646 (4+1)           pshs    a
E2E3 0F30             (        forth.asm):00647 (5)             clr     ISNEGF          Assume the result is positive
E2E5 9E02             (        forth.asm):00648 (4)             ldx     TOKENSP
E2E7 8DB7             (        forth.asm):00649 (6)             bsr     CKNBPFX         Check for numeric literal BASE prefix
                      (        forth.asm):00650         * Check for optional minus sign.
E2E9 A684             (        forth.asm):00651 (4+0)           lda     ,x
E2EB 812D             (        forth.asm):00652 (2)             cmpa    #'-
E2ED 2606             (        forth.asm):00653 (3)             bne     @ncini
E2EF 0C30             (        forth.asm):00654 (5)             inc     ISNEGF          Remember to negate the result before returning
E2F1 3001             (        forth.asm):00655 (4+1)           leax    1,x             Skip the negativity!
E2F3 6AE4             (        forth.asm):00656 (6+0)           dec     ,s              Decrement token length
E2F5 104F             (        forth.asm):00657 (2)     @ncini  clrd                    Initialize the result
E2F7 119F1E           (        forth.asm):00658 (29)    @ncnxt  muld    UBASE           D multipled by BASE to Q (D:W)
E2FA E680             (        forth.asm):00659 (4+1)           ldb     ,x+             Acquire next input char (ignore the product MSC)
E2FC C030             (        forth.asm):00660 (2)             subb    #'0
E2FE 252D             (        forth.asm):00661 (3)             blo     @ncoor          Digit out of range
E300 C10A             (        forth.asm):00662 (2)             cmpb    #10
E302 2510             (        forth.asm):00663 (3)             blo     @ncnolt         No letter in potential BASE
                      (        forth.asm):00664                 IFEQ    CSSNTVE
E304 C111             (        forth.asm):00665 (2)             cmpb    #'A-'0
E306 2525             (        forth.asm):00666 (3)             blo     @ncoor          Greater than 9 but lower than A
E308 C131             (        forth.asm):00667 (2)             cmpb    #'a-'0
E30A 2506             (        forth.asm):00668 (3)             blo     @ncisuc         Upper case already
E30C C14A             (        forth.asm):00669 (2)             cmpb    #'z-'0
E30E 221D             (        forth.asm):00670 (3)             bhi     @ncoor          Definitely out of range
E310 C020             (        forth.asm):00671 (2)             subb    #'a-'A          To upper case
                      (        forth.asm):00672                 ENDC
E312 C007             (        forth.asm):00673 (2)     @ncisuc subb    #'A-':          A-Z to number
E314 D11F             (        forth.asm):00674 (3)     @ncnolt cmpb    UBASE+1         B has a digit. Make sure it's less than BASE
E316 2415             (        forth.asm):00675 (3)             bhs     @ncoor
                      (        forth.asm):00676         * Digit in B has been validated wrt. BASE.
E318 4F               (        forth.asm):00677 (1)             clra
E319 103060           (        forth.asm):00678 (4)             addr    w,d
E31C 6AE4             (        forth.asm):00679 (6+0)           dec     ,s              Are we done yet?
E31E 26D7             (        forth.asm):00680 (3)             bne     @ncnxt          No. Iterate over to the next digit
E320 0D30             (        forth.asm):00681 (4)             tst     ISNEGF          Are we dealing with a negative number?
E322 2702             (        forth.asm):00682 (3)             beq     @ncdone         No
E324 1040             (        forth.asm):00683 (2)             negd                    Acknowledge the negativity
E326 3261             (        forth.asm):00684 (4+1)   @ncdone leas    1,s             Drop token length from the system stack
E328 1F01             (        forth.asm):00685 (4)             tfr     d,x             Return the result in X
E32A 8D9A             (        forth.asm):00686 (6)             bsr     RSBSPFX         Restore BASE if needed
E32C 39               (        forth.asm):00687 (4)             rts
E32D 3261             (        forth.asm):00688 (4+1)   @ncoor  leas    1,s             Drop token length from the system stack
E32F 9E02             (        forth.asm):00689 (4)             ldx     TOKENSP         Current digit is out of range
E331 C602             (        forth.asm):00690 (2)             ldb     #2              Undefined (X points to the offending word)
E333 BDE636           (        forth.asm):00691 (7)             jsr     ERRHDLR         No return
     E336             (        forth.asm):00692         NUMCVRA equ     *               For symbolic stack dump purposes
                      (        forth.asm):00693         
                      (        forth.asm):00694         * Check for minimal data stack depth. On input D has the lowest possible stack
                      (        forth.asm):00695         * address that satisfies the needs of the caller. This routine is meant
                      (        forth.asm):00696         * to support "transactional" behaviour, which is intended to improve
                      (        forth.asm):00697         * debugging support.
E336 103703           (        forth.asm):00698 (4)     CHKNDPT cmpr    d,u
E339 2201             (        forth.asm):00699 (3)             bhi     @stkudf
E33B 39               (        forth.asm):00700 (4)             rts
E33C C601             (        forth.asm):00701 (2)     @stkudf ldb     #1              Data stack underflow
E33E BDE636           (        forth.asm):00702 (7)             jsr     ERRHDLR         No return
     E341             (        forth.asm):00703         CKDPTRA equ     *
                      (        forth.asm):00704         
                      (        forth.asm):00705         * Convert number stored in X to a string (depending on BASE value).
                      (        forth.asm):00706         * Output is stored in the global TBUFF buffer. X is preserved.
E341 8D8A             (        forth.asm):00707 (6)     CVNSTR  bsr     CKBASE
E343 0F30             (        forth.asm):00708 (5)             clr     ISNEGF
E345 1F10             (        forth.asm):00709 (4)             tfr     x,d
E347 0D31             (        forth.asm):00710 (4)             tst     CVISSGN         Are we to perform a signed conversion?
E349 2708             (        forth.asm):00711 (3)             beq     @cvnst1
E34B 104D             (        forth.asm):00712 (2)             tstd
E34D 2A04             (        forth.asm):00713 (3)             bpl     @cvnst1
E34F 0C30             (        forth.asm):00714 (5)             inc     ISNEGF          Number being converted is negative
E351 1040             (        forth.asm):00715 (2)             negd
E353 1F06             (        forth.asm):00716 (4)     @cvnst1 tfr     d,w
E355 104F             (        forth.asm):00717 (2)             clrd
E357 108E03B1         (        forth.asm):00718 (4)             ldy     #TBUFF+19       Sign + 16 digits + terminator + 1
E35B 6FA2             (        forth.asm):00719 (6+1)           clr     ,-y             End of string marker
E35D 119E1E           (        forth.asm):00720 (35)    @cvnst2 divq    UBASE           D returns the modulo and W the quotient
E360 8630             (        forth.asm):00721 (2)             lda     #'0
E362 C10A             (        forth.asm):00722 (2)             cmpb    #10
E364 2502             (        forth.asm):00723 (3)             bcs     @cvnst3
                      (        forth.asm):00724         * BASE has letters among its valid numbers.
E366 8637             (        forth.asm):00725 (2)             lda     #'A-10
E368 103089           (        forth.asm):00726 (4)     @cvnst3 addr    a,b
E36B E7A2             (        forth.asm):00727 (4+1)           stb     ,-y
E36D 104F             (        forth.asm):00728 (2)             clrd
E36F 105D             (        forth.asm):00729 (2)             tstw
E371 26EA             (        forth.asm):00730 (3)             bne     @cvnst2
E373 C620             (        forth.asm):00731 (2)             ldb     #SP
E375 0D30             (        forth.asm):00732 (4)             tst     ISNEGF
E377 2702             (        forth.asm):00733 (3)             beq     @cvnst4
E379 C62D             (        forth.asm):00734 (2)             ldb     #'-
E37B E7A2             (        forth.asm):00735 (4+1)   @cvnst4 stb     ,-y
                      (        forth.asm):00736         * We need to insert leading spaces up to the beginning of the output buffer.
E37D C620             (        forth.asm):00737 (2)             ldb     #SP
E37F 108C039E         (        forth.asm):00738 (4)     @cvnst5 cmpy    #TBUFF
E383 2601             (        forth.asm):00739 (3)             bne     @cvnst6
E385 39               (        forth.asm):00740 (4)             rts
E386 E7A2             (        forth.asm):00741 (4+1)   @cvnst6 stb     ,-y
E388 20F5             (        forth.asm):00742 (3)             bra     @cvnst5
                      (        forth.asm):00743         
                      (        forth.asm):00744         * Search word beginning at address TOKENSP in the dictionary.
                      (        forth.asm):00745         * Upon return Z will be set if the word was not found.
                      (        forth.asm):00746         * Otherwise, Y will point to the code section of the word.
                      (        forth.asm):00747         * CSSNTVE (defined in constants.asm) defines whether the
                      (        forth.asm):00748         * dictionary match is case sensitive or not.
                      (        forth.asm):00749         * Important note: if the word is found TOKENEP will be copied to TOKENSP.
E38A 9E02             (        forth.asm):00750 (4)     SWDIC   ldx     TOKENSP
E38C BDE28E           (        forth.asm):00751 (7)             jsr     SCNETOK         B has CURTOKL
E38F 9E08             (        forth.asm):00752 (4)             ldx     DICEND
E391 9F16             (        forth.asm):00753 (4)             stx     VLPRVEP         Last dictionary entry code address + 1
E393 9E02             (        forth.asm):00754 (4)             ldx     TOKENSP
E395 109E06           (        forth.asm):00755 (5)             ldy     LSTWAD          Latest word header address to Y
E398 2606             (        forth.asm):00756 (3)     @swrdc0 bne     @swrdc1
E39A 1FC2             (        forth.asm):00757 (4)             tfr     0,y             Word not found. Z is set
E39C 109F0E           (        forth.asm):00758 (5)             sty     PLOAD
E39F 39               (        forth.asm):00759 (4)             rts
E3A0 A6A4             (        forth.asm):00760 (4+0)   @swrdc1 lda     ,y              Word attribute to A
E3A2 841F             (        forth.asm):00761 (2)             anda    #WRLNMSK        Extract word length
E3A4 3420             (        forth.asm):00762 (4+2)           pshs    y
E3A6 103798           (        forth.asm):00763 (4)             cmpr    b,a             Word length match?
E3A9 2638             (        forth.asm):00764 (3)             bne     @swrdc3         No, point to next dictionary entry
E3AB 3121             (        forth.asm):00765 (4+1)           leay    1,y
E3AD A6A0             (        forth.asm):00766 (4+1)   @swrdc2 lda     ,y+
                      (        forth.asm):00767                 IFNE    CSSNTVE
                      (        forth.asm):00768                 cmpa    ,x+             Case sensitive dictionary
                      (        forth.asm):00769                 ELSE
E3AF 1F9E             (        forth.asm):00770 (4)             tfr     b,e             Case insensitive search (preferred)
E3B1 E680             (        forth.asm):00771 (4+1)           ldb     ,x+
E3B3 C161             (        forth.asm):00772 (2)             cmpb    #'a
E3B5 2506             (        forth.asm):00773 (3)             bcs     @nochg
E3B7 C17B             (        forth.asm):00774 (2)             cmpb    #'z+1
E3B9 2402             (        forth.asm):00775 (3)             bcc     @nochg
E3BB C020             (        forth.asm):00776 (2)             subb    #'a-'A
E3BD 103798           (        forth.asm):00777 (4)     @nochg  cmpr    b,a
E3C0 1FE9             (        forth.asm):00778 (4)             tfr     e,b
                      (        forth.asm):00779                 ENDC
E3C2 261F             (        forth.asm):00780 (3)             bne     @swrdc3
E3C4 5A               (        forth.asm):00781 (1)             decb
E3C5 26E6             (        forth.asm):00782 (3)             bne     @swrdc2
                      (        forth.asm):00783         * Word match!
E3C7 3510             (        forth.asm):00784 (4+2)           puls    x
E3C9 E684             (        forth.asm):00785 (4+0)           ldb     ,x              Word attribute byte to B
E3CB 4F               (        forth.asm):00786 (1)             clra
E3CC 58               (        forth.asm):00787 (1)             lslb                    Bit 7 to CFLAG
E3CD 49               (        forth.asm):00788 (1)             rola                    CFLAG to A
E3CE 9733             (        forth.asm):00789 (3)             sta     IMDFLG          Set IMMEDIATE flag
E3D0 4F               (        forth.asm):00790 (1)             clra
E3D1 58               (        forth.asm):00791 (1)             lslb                    Bit 6 to CFLAG
E3D2 49               (        forth.asm):00792 (1)             rola                    CFLAG to A
E3D3 9734             (        forth.asm):00793 (3)             sta     DEFFLG          Set DEFINE flag
E3D5 9E04             (        forth.asm):00794 (4)             ldx     TOKENEP
E3D7 9F02             (        forth.asm):00795 (4)             stx     TOKENSP
                      (        forth.asm):00796                 IFNE    RELFEAT
E3D9 3123             (        forth.asm):00797 (4+1)           leay    3,y             Skip back pointer and checksum. Return XT
                      (        forth.asm):00798                 ELSE
                      (        forth.asm):00799                 leay    2,y             Skip back pointer. Return XT
                      (        forth.asm):00800                 ENDC
E3DB DC16             (        forth.asm):00801 (4)             ldd     VLPRVEP
E3DD 103220           (        forth.asm):00802 (4)             subr    y,d
E3E0 DD0E             (        forth.asm):00803 (4)             std     PLOAD
E3E2 39               (        forth.asm):00804 (4)             rts                     NZ since there is no zero payload word
E3E3 3520             (        forth.asm):00805 (4+2)   @swrdc3 puls    y               Point to previous word header
E3E5 109F16           (        forth.asm):00806 (5)             sty     VLPRVEP
E3E8 4F               (        forth.asm):00807 (1)             clra
E3E9 E6A0             (        forth.asm):00808 (4+1)           ldb     ,y+
E3EB C41F             (        forth.asm):00809 (2)             andb    #WRLNMSK
E3ED 31AB             (        forth.asm):00810 (4+2)           leay    d,y
E3EF 9E02             (        forth.asm):00811 (4)             ldx     TOKENSP
E3F1 D632             (        forth.asm):00812 (3)             ldb     CURTOKL
E3F3 10AEA4           (        forth.asm):00813 (6+0)           ldy     ,y
E3F6 20A0             (        forth.asm):00814 (3)             bra     @swrdc0
                      (        forth.asm):00815         
                      (        forth.asm):00816         * Create new dictionary entry. The word name being created is acquired from
                      (        forth.asm):00817         * the input stream. Warning, this requires a writable dictionary!
                      (        forth.asm):00818         * The new end of the dictionary is returned in Y. W is preserved.
E3F8 1038             (        forth.asm):00819 (6)     LOCWRT  pshsw
E3FA 9E08             (        forth.asm):00820 (4)             ldx     DICEND
                      (        forth.asm):00821                 IFNE    DEBUG
                      (        forth.asm):00822                 cmpx    #ROMSTRT
                      (        forth.asm):00823                 bcs     @locwr0
                      (        forth.asm):00824                 ldb     #10             Assertion failure (trying to write to ROM!)
                      (        forth.asm):00825                 jsr     ERRHDLR         No return
E3FC                  (        forth.asm):00826         LWAFRA  equ     *
                      (        forth.asm):00827                 ENDC
E3FC 9F0C             (        forth.asm):00828 (4)     @locwr0 stx     BDICEND         Back pointer up
E3FE 9E06             (        forth.asm):00829 (4)             ldx     LSTWAD
E400 9F0A             (        forth.asm):00830 (4)             stx     BLSTWAD         Back pointer up
E402 BDE703           (        forth.asm):00831 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
E405 6D84             (        forth.asm):00832 (5+0)           tst     ,x
E407 2605             (        forth.asm):00833 (3)             bne     @locwr2
E409 C605             (        forth.asm):00834 (2)     @locwr1 ldb     #5              Missing word name
E40B BDE636           (        forth.asm):00835 (7)             jsr     ERRHDLR         No return
     E40E             (        forth.asm):00836         LWMNRA  equ     *               LOCWRT missing word name return address
E40E BDE280           (        forth.asm):00837 (7)     @locwr2 jsr     SCNSTOK
E411 27F6             (        forth.asm):00838 (3)             beq     @locwr1         End of line reached
E413 BDE28E           (        forth.asm):00839 (7)             jsr     SCNETOK         X has TOKENEP, B has CURTOKL
E416 109E02           (        forth.asm):00840 (5)             ldy     TOKENSP
E419 103221           (        forth.asm):00841 (4)             subr    y,x
E41C 3410             (        forth.asm):00842 (4+2)           pshs    x               Word length to the system stack
E41E 9E08             (        forth.asm):00843 (4)             ldx     DICEND
E420 A661             (        forth.asm):00844 (4+1)           lda     1,s             Word length LSB in the system stack
E422 8120             (        forth.asm):00845 (2)             cmpa    #1+WRLNMSK      Max word length is 31, 79-STANDARD compliant
E424 2505             (        forth.asm):00846 (3)             blo     @lcwr21
E426 C610             (        forth.asm):00847 (2)             ldb     #16             Word name is too long
E428 BDE636           (        forth.asm):00848 (7)             jsr     ERRHDLR
     E42B             (        forth.asm):00849         WTOOLNG equ     *
E42B A780             (        forth.asm):00850 (4+1)   @lcwr21 sta     ,x+             Word length to dictionary
E42D 10A6E1           (        forth.asm):00851 (6+2)           ldw     ,s++            16-bit word length to W
E430 1E12             (        forth.asm):00852 (5)             exg     x,y             Y points to the dictionary, X has TOKENSP
                      (        forth.asm):00853                 IFNE    CSSNTVE
                      (        forth.asm):00854                 tfm     x+,y+           Word name to dictionary, as is
                      (        forth.asm):00855                 ELSE
E432 1FF9             (        forth.asm):00856 (4)             tfr     f,b             Force dictionary entry to upper case
E434 A680             (        forth.asm):00857 (4+1)   @locwr3 lda     ,x+
E436 8161             (        forth.asm):00858 (2)             cmpa    #'a
E438 2506             (        forth.asm):00859 (3)             bcs     @locwr4
E43A 817B             (        forth.asm):00860 (2)             cmpa    #'z+1
E43C 2402             (        forth.asm):00861 (3)             bcc     @locwr4
E43E 8020             (        forth.asm):00862 (2)             suba    #'a-'A          To upper case
E440 A7A0             (        forth.asm):00863 (4+1)   @locwr4 sta     ,y+
E442 5A               (        forth.asm):00864 (1)             decb
E443 26EF             (        forth.asm):00865 (3)             bne     @locwr3
                      (        forth.asm):00866                 ENDC
E445 1F10             (        forth.asm):00867 (4)             tfr     x,d
E447 931C             (        forth.asm):00868 (4)             subd    BSBFADR
E449 DD22             (        forth.asm):00869 (4)             std     UTOIN           Skip word name in the input stream
E44B 9E06             (        forth.asm):00870 (4)             ldx     LSTWAD
E44D AFA1             (        forth.asm):00871 (5+2)           stx     ,y++            Back pointer to dictionary
                      (        forth.asm):00872                 IFNE    RELFEAT
E44F 6FA0             (        forth.asm):00873 (6+1)           clr     ,y+             Initialize the checksum header field
                      (        forth.asm):00874                 ENDC
E451 109F08           (        forth.asm):00875 (5)             sty     DICEND
E454 109F12           (        forth.asm):00876 (5)             sty     RECADDR         Should we resort to recursion later on
E457 1039             (        forth.asm):00877 (6)             pulsw
E459 39               (        forth.asm):00878 (4)             rts
                      (        forth.asm):00879         
                      (        forth.asm):00880         * Compile 'ldx  #X; jsr NPUSH'.
                      (        forth.asm):00881         * DICEND is updated and returned in Y.
E45A 109E08           (        forth.asm):00882 (5)     LITER   ldy     DICEND
E45D 868E             (        forth.asm):00883 (2)             lda     #LDXOPC         LDX immediate
E45F 8D10             (        forth.asm):00884 (6)             bsr     VARCON2
E461 86BD             (        forth.asm):00885 (2)             lda     #JSROPC         JSR extended
E463 BDE13A           (        forth.asm):00886 (7)             jsr     CHKRTS          Check if the final RTS can be omitted
E466 8D06             (        forth.asm):00887 (6)             bsr     VARCON1
E468 109F08           (        forth.asm):00888 (5)             sty     DICEND
E46B 39               (        forth.asm):00889 (4)             rts
                      (        forth.asm):00890         
                      (        forth.asm):00891         * Compile 'jmp  NPUSH'.
                      (        forth.asm):00892         * Y points to the end of the dictionary on entry and on exit.
E46C 867E             (        forth.asm):00893 (2)     VARCON  lda     #JMPOPC         JMP extended
E46E 8EE6AF           (        forth.asm):00894 (3)     VARCON1 ldx     #NPUSH
E471 A7A0             (        forth.asm):00895 (4+1)   VARCON2 sta     ,y+
E473 AFA1             (        forth.asm):00896 (5+2)           stx     ,y++
E475 39               (        forth.asm):00897 (4)             rts
                      (        forth.asm):00898         
                      (        forth.asm):00899         * Used by U<, U>, <, >.
E476 CC0246BDE336     (        forth.asm):00900         CMP2    MINDREQ 2               At least 2 cells must be stacked up
E47C 10AEC4           (        forth.asm):00901 (6+0)   CMP2RA  ldy     ,u
E47F AE42             (        forth.asm):00902 (5+1)           ldx     2,u
E481 103721           (        forth.asm):00903 (4)             cmpr    y,x
E484 1FA9             (        forth.asm):00904 (4)             tfr     cc,b
                      (        forth.asm):00905                 IFNE    DEBUG
                      (        forth.asm):00906                 clra
                      (        forth.asm):00907                 std     CCREG
                      (        forth.asm):00908                 ENDC
E486 1FC1             (        forth.asm):00909 (4)             tfr     0,x
E488 3344             (        forth.asm):00910 (4+1)           leau    4,u
E48A 1F9A             (        forth.asm):00911 (4)             tfr     b,cc
E48C 39               (        forth.asm):00912 (4)             rts
                      (        forth.asm):00913         
                      (        forth.asm):00914         * Used by CMOVE, <CMOVE, CMOVE>, MOVE.
E48D CC0244BDE336     (        forth.asm):00915         ACQMOVP MINDREQ 3               At least 3 cells must be stacked up
E493 10A6C4           (        forth.asm):00916 (6+0)   ACQVMRA ldw     ,u              Byte count
E496 10AE42           (        forth.asm):00917 (6+1)           ldy     2,u             Destination address
E499 AE44             (        forth.asm):00918 (5+1)           ldx     4,u             Source address
E49B 3346             (        forth.asm):00919 (4+1)           leau    6,u             Drop 3 cells from the user stack
E49D 39               (        forth.asm):00920 (4)             rts
                      (        forth.asm):00921         
                      (        forth.asm):00922         * FDCTSYM enveadours to match the address stored in Y to a dictionary entry.
                      (        forth.asm):00923         * Upon a successful flexible match, it will output a string in the form of
                      (        forth.asm):00924         * <wordname>+<offset> to the string pointed to by X. <wordname> refers to the
                      (        forth.asm):00925         * code entry point of the matched word. <offset> will be expressed in hex.
                      (        forth.asm):00926         * If a match is found, Z will be clear, otherwise it will be set.
                      (        forth.asm):00927         * A candidate for a word code address must meet the following criteria:
                      (        forth.asm):00928         * ((Y U>= #EBUFS) AND (Y U< #THEEND)) OR ((Y U>= #WDICSPC) AND (Y U< DICEND)).
                      (        forth.asm):00929         * Upon return:
                      (        forth.asm):00930         * - the string pointed to by X will updated with its symbolic match
                      (        forth.asm):00931         *   (NUL terminated), if there is one. X itself might have been altered.
                      (        forth.asm):00932         * - Y should be preserved.
                      (        forth.asm):00933         * EBUFS (EMPTY-BUFFERS) header address is the last word in the dictionary.
                      (        forth.asm):00934                 IFNE    SSDFEAT
E49E 3430             (        forth.asm):00935 (4+4)   FDCTSYM pshs    y,x     
E4A0 1F21             (        forth.asm):00936 (4)             tfr     y,x             Potential execution token to X
E4A2 8CE83E           (        forth.asm):00937 (3)             cmpx    #EBUFS
E4A5 2505             (        forth.asm):00938 (3)             blo     @fdstr2 
E4A7 8CFDB5           (        forth.asm):00939 (3)             cmpx    #THEEND
E4AA 250D             (        forth.asm):00940 (3)             blo     @fdsmtc
E4AC 8C0C10           (        forth.asm):00941 (3)     @fdstr2 cmpx    #WDICSPC        Term 2 of the predicate for a valid word addr
E4AF 2504             (        forth.asm):00942 (3)             blo     @fdsnom
E4B1 9C08             (        forth.asm):00943 (4)             cmpx    DICEND
E4B3 2504             (        forth.asm):00944 (3)             blo     @fdsmtc
E4B5 4F               (        forth.asm):00945 (1)     @fdsnom clra                    No match (Z is set)
E4B6 3530             (        forth.asm):00946 (4+4)           puls    x,y
E4B8 39               (        forth.asm):00947 (4)             rts
E4B9 9E06             (        forth.asm):00948 (4)     @fdsmtc ldx     LSTWAD          Potential match. Scan upward from LAST
                      (        forth.asm):00949         * X points to the latest word header, Y has an execution token.
E4BB 109608           (        forth.asm):00950 (5)             ldw     DICEND          W points to the end of the code section
E4BE 3410             (        forth.asm):00951 (4+2)   @fdslop pshs    x               Pointer to the current word header
E4C0 E680             (        forth.asm):00952 (4+1)           ldb     ,x+
E4C2 C41F             (        forth.asm):00953 (2)             andb    #WRLNMSK
E4C4 3A               (        forth.asm):00954 (1)             abx                     Skip word name string
E4C5 EC81             (        forth.asm):00955 (5+2)           ldd     ,x++            Backlink to D
                      (        forth.asm):00956                 IFNE    RELFEAT
E4C7 3001             (        forth.asm):00957 (4+1)           leax    1,x             Skip the checksum
                      (        forth.asm):00958                 ENDC
E4C9 103712           (        forth.asm):00959 (4)             cmpr    x,y
E4CC 2530             (        forth.asm):00960 (3)             blo     @fdsnwd
E4CE 103762           (        forth.asm):00961 (4)             cmpr    w,y
E4D1 222B             (        forth.asm):00962 (3)             bhi     @fdsnwd         An equal address is allowed here, in case
                      (        forth.asm):00963         * jsr ERRHDLR is the last instruction for the word under consideration.
                      (        forth.asm):00964         * This happens to be the case for FORGET and LPAR.
                      (        forth.asm):00965         * Y matches the code range for the current word.
E4D3 3510             (        forth.asm):00966 (4+2)           puls    x
E4D5 E680             (        forth.asm):00967 (4+1)           ldb     ,x+
E4D7 C41F             (        forth.asm):00968 (2)             andb    #WRLNMSK
E4D9 1F9F             (        forth.asm):00969 (4)             tfr     b,f
E4DB 114F             (        forth.asm):00970 (2)             clre                    W has the matched word length
E4DD 10AEE4           (        forth.asm):00971 (6+0)           ldy     ,s              Y points to the target buffer
E4E0 8627             (        forth.asm):00972 (2)             lda     #''
E4E2 A7A0             (        forth.asm):00973 (4+1)           sta     ,y+
E4E4 113812           (        forth.asm):00974 (6+?)           tfm     x+,y+
E4E7 A7A0             (        forth.asm):00975 (4+1)           sta     ,y+
                      (        forth.asm):00976         * Offset processing.
E4E9 862B             (        forth.asm):00977 (2)             lda     #'+
E4EB A7A0             (        forth.asm):00978 (4+1)           sta     ,y+
                      (        forth.asm):00979                 IFNE    RELFEAT
E4ED 3003             (        forth.asm):00980 (4+1)           leax    3,x             Skip backlink and checksum
                      (        forth.asm):00981                 ELSE
                      (        forth.asm):00982                 leax    2,x             Skip backlink
                      (        forth.asm):00983                 ENDC
E4EF EC62             (        forth.asm):00984 (5+1)           ldd     2,s             Execution token to D
E4F1 103210           (        forth.asm):00985 (4)             subr    x,d             Offset between XT and word entry point to D
E4F4 1F21             (        forth.asm):00986 (4)             tfr     y,x
E4F6 BDE175           (        forth.asm):00987 (7)             jsr     HDMP4           Dump hex incarnation of the offset to X
E4F9 3530             (        forth.asm):00988 (4+4)           puls    x,y
E4FB 1CFB             (        forth.asm):00989 (2)             andcc   #^ZFLAG         Clear ZFLAG
E4FD 39               (        forth.asm):00990 (4)             rts
                      (        forth.asm):00991         * Point to the next word.
E4FE 1039             (        forth.asm):00992 (6)     @fdsnwd pulsw                   Retrieve current word header address
E500 104D             (        forth.asm):00993 (2)             tstd
E502 27B1             (        forth.asm):00994 (3)             beq     @fdsnom         Just met the last dictionary entry
E504 1F01             (        forth.asm):00995 (4)             tfr     d,x             Point to previous word header
E506 10810C10         (        forth.asm):00996 (4)             cmpw    #WDICSPC        Are we transitioning from RAM to ROM?
E50A 26B2             (        forth.asm):00997 (3)             bne     @fdslop         No singularity
E50C 1086FDB5         (        forth.asm):00998 (4)             ldw     #THEEND         Won't be able to diagnose the ROM based @...
E510 20AC             (        forth.asm):00999 (3)             bra     @fdslop
                      (        forth.asm):01000         
                      (        forth.asm):01001         * Find the best possible symbolic approximation of Y and store it to the
                      (        forth.asm):01002         * buffer pointed to by X.
                      (        forth.asm):01003         * On entry:
                      (        forth.asm):01004         * - Y has a code address which is to be matched with a symbolic name + offset.
                      (        forth.asm):01005         * - X points to a buffer where the resolution is to be stored.
                      (        forth.asm):01006         * On return:
                      (        forth.asm):01007         * - Y is to be preserved.
                      (        forth.asm):01008         * - the output buffer will be updated with the best symbolic match (NUL term'd).
E512 3430             (        forth.asm):01009 (4+4)   FINDSYM pshs    y,x
E514 8D88             (        forth.asm):01010 (6)             bsr     FDCTSYM         Search the dictionary first (flexible match)
E516 261B             (        forth.asm):01011 (3)             bne     @dctmfn         Dictionary match found
E518 8EE538           (        forth.asm):01012 (3)             ldx     #NDCTWKS        Search kernel symbols for an exact match
E51B EC81             (        forth.asm):01013 (5+2)   @fsmlop ldd     ,x++
E51D 270B             (        forth.asm):01014 (3)             beq     @fsmfnd         End of well known symbols list?
E51F 103720           (        forth.asm):01015 (4)             cmpr    y,d
E522 2706             (        forth.asm):01016 (3)             beq     @fsmfnd
                      (        forth.asm):01017         * No well known symbol match. Skip string.
E524 A680             (        forth.asm):01018 (4+1)   @fsmskp lda     ,x+
E526 26FC             (        forth.asm):01019 (3)             bne     @fsmskp
E528 20F1             (        forth.asm):01020 (3)             bra     @fsmlop
E52A 10AEE4           (        forth.asm):01021 (6+0)   @fsmfnd ldy     ,s
E52D A680             (        forth.asm):01022 (4+1)   @fsmfn2 lda     ,x+
E52F A7A0             (        forth.asm):01023 (4+1)           sta     ,y+
E531 26FA             (        forth.asm):01024 (3)             bne     @fsmfn2
E533 3262             (        forth.asm):01025 (4+1)   @dctmfn leas    2,s
E535 3520             (        forth.asm):01026 (4+2)           puls    y
E537 39               (        forth.asm):01027 (4)             rts
                      (        forth.asm):01028         
                      (        forth.asm):01029         * Non-dictionary well known symbols.
E538 E000             (        forth.asm):01030         NDCTWKS fdb     IODZHDL         Illegal opcode/Division by zero trap handler
E53A 494F445A48444C00 (        forth.asm):01031                 fcn     'IODZHDL'
E542 E6CB             (        forth.asm):01032                 fdb     DPOPRA          Data stack underflow
E544 44504F50524100   (        forth.asm):01033                 fcn     'DPOPRA'
E54B E6BC             (        forth.asm):01034                 fdb     DPSHRA          Data stack overflow
E54D 44505348524100   (        forth.asm):01035                 fcn     'DPSHRA'
E554 E703             (        forth.asm):01036                 fdb     RPOPRA          Return stack underflow
E556 52504F50524100   (        forth.asm):01037                 fcn     'RPOPRA'
E55D E6E9             (        forth.asm):01038                 fdb     RPSHRA          Return stack overflow
E55F 52505348524100   (        forth.asm):01039                 fcn     'RPSHRA'
E566 E636             (        forth.asm):01040                 fdb     ERRHDLR         Error handler
E568 45525248444C5200 (        forth.asm):01041                 fcn     'ERRHDLR'
E570 E2DD             (        forth.asm):01042                 fdb     CKBASRA         Illegal BASE value
E572 434B424153524100 (        forth.asm):01043                 fcn     'CKBASRA'
E57A E341             (        forth.asm):01044                 fdb     CKDPTRA         Not enough parameters supplied (transac. behav.)
E57C 434B445054524100 (        forth.asm):01045                 fcn     'CKDPTRA'
E584 E47C             (        forth.asm):01046                 fdb     CMP2RA          Missing operand in any of U<, U>, <, >
E586 434D5032524100   (        forth.asm):01047                 fcn     'CMP2RA'
E58D E493             (        forth.asm):01048                 fdb     ACQVMRA         Three operands missing in any of CMOVE,
                      (        forth.asm):01049         *                               <CMOVE, CMOVE>, MOVE
E58F 414351564D524100 (        forth.asm):01050                 fcn     'ACQVMRA'
E597 E0BE             (        forth.asm):01051                 fdb     MINTLRA         Main interpreter loop return address
E599 4D494E544C524100 (        forth.asm):01052                 fcn     'MINTLRA'
E5A1 E336             (        forth.asm):01053                 fdb     NUMCVRA         ? while converting a string to a number
E5A3 4E554D4356524100 (        forth.asm):01054                 fcn     'NUMCVRA'
E5AB E0D1             (        forth.asm):01055                 fdb     NMCVIRA         Numeric conversion error while interpreting
E5AD 4E4D435649524100 (        forth.asm):01056                 fcn     'NMCVIRA'
E5B5 E135             (        forth.asm):01057                 fdb     NMCVCRA         Numeric conversion error while compiling
E5B7 4E4D435643524100 (        forth.asm):01058                 fcn     'NMCVCRA'
E5BF E108             (        forth.asm):01059                 fdb     INTRPRA         Interpreter RA (after the execution of a word)
E5C1 494E545250524100 (        forth.asm):01060                 fcn     'INTRPRA'
E5C9 E123             (        forth.asm):01061                 fdb     COMPLRA         Compiler RA (after the execution of an IMD word)
E5CB 434F4D504C524100 (        forth.asm):01062                 fcn     'COMPLRA'
E5D3 E40E             (        forth.asm):01063                 fdb     LWMNRA          Missing word name in LOCWRT
E5D5 4C574D4E524100   (        forth.asm):01064                 fcn     'LWMNRA'
E5DC E7D5             (        forth.asm):01065                 fdb     CFR1SRA         CF read one sector failed
E5DE 4346523153524100 (        forth.asm):01066                 fcn     'CFR1SRA'
E5E6 E6AF             (        forth.asm):01067                 fdb     NPUSH           Not an error RA but useful to have as a symbol
E5E8 4E5055534800     (        forth.asm):01068                 fcn     'NPUSH'
E5EE E6CC             (        forth.asm):01069                 fdb     RPUSH           Not an error RA but useful to have as a symbol
E5F0 525055534800     (        forth.asm):01070                 fcn     'RPUSH'
E5F6 E6BD             (        forth.asm):01071                 fdb     NPOP            Not an error RA but useful to have as a symbol
E5F8 4E504F5000       (        forth.asm):01072                 fcn     'NPOP'
E5FD E6EA             (        forth.asm):01073                 fdb     RPOP            Not an error RA but useful to have as a symbol
E5FF 52504F5000       (        forth.asm):01074                 fcn     'RPOP'
E604 E1DB             (        forth.asm):01075                 fdb     PUTS            Not an error RA but useful to have as a symbol
E606 5055545300       (        forth.asm):01076                 fcn     'PUTS'
                      (        forth.asm):01077                 IFNE    DEBUG
                      (        forth.asm):01078                 fdb     LWAFRA          Assertion failure in LOCWRT
                      (        forth.asm):01079                 fcn     'LOCWRTAF'
                      (        forth.asm):01080                 ENDC
E60B 0000             (        forth.asm):01081                 fdb     0               End of list
E60D 3F3F3F00         (        forth.asm):01082                 fcn     '???'           Admit we have no clue!
                      (        forth.asm):01083                 ENDC                    SSDFEAT
                      (        forth.asm):01084         
                      (        forth.asm):01085         * Print ' (xxxx/yyyy)' where xxxx is the hex representation for BLK @ and
                      (        forth.asm):01086         * yyyy is the hex representation for >IN @.
E611 8E034E           (        forth.asm):01087 (3)     PRBLKIN ldx     #HEXBUF
E614 8620             (        forth.asm):01088 (2)             lda     #SP
E616 A780             (        forth.asm):01089 (4+1)           sta     ,x+
E618 8628             (        forth.asm):01090 (2)             lda     #'(
E61A A780             (        forth.asm):01091 (4+1)           sta     ,x+
E61C DC24             (        forth.asm):01092 (4)             ldd     UBLK
E61E BDE175           (        forth.asm):01093 (7)             jsr     HDMP4
E621 862F             (        forth.asm):01094 (2)             lda     #'/
E623 A780             (        forth.asm):01095 (4+1)           sta     ,x+
E625 DC22             (        forth.asm):01096 (4)             ldd     UTOIN
E627 BDE175           (        forth.asm):01097 (7)             jsr     HDMP4
E62A 8629             (        forth.asm):01098 (2)             lda     #')
E62C A780             (        forth.asm):01099 (4+1)           sta     ,x+
E62E 6F84             (        forth.asm):01100 (6+0)           clr     ,x
E630 8E034E           (        forth.asm):01101 (3)             ldx     #HEXBUF
E633 7EE1DB           (        forth.asm):01102 (3)             jmp     PUTS
                      (        forth.asm):01103         
                      (        forth.asm):01104         * Handle error condition. Error code is in B.
                      (        forth.asm):01105         * If B is 2 (undefined) X points to a string of length CURTOKL that has the
                      (        forth.asm):01106         * offending word.
E636 10AEE4           (        forth.asm):01107 (6+0)   ERRHDLR ldy     ,s              Invoking return address
                      (        forth.asm):01108         * In case of a trap return, we enter here with Y set to #IODZHDL
E639 C102             (        forth.asm):01109 (2)     ERRHD1  cmpb    #2              Undefined symbol?
E63B 261A             (        forth.asm):01110 (3)             bne     @perrm          No
E63D 8627             (        forth.asm):01111 (2)             lda     #''
E63F BDE1B7           (        forth.asm):01112 (7)             jsr     PUTCH
E642 A680             (        forth.asm):01113 (4+1)   @prtsym lda     ,x+             Display undefined symbol name
E644 BDE1B7           (        forth.asm):01114 (7)             jsr     PUTCH
E647 0A32             (        forth.asm):01115 (5)             dec     CURTOKL
E649 2702             (        forth.asm):01116 (3)             beq     @endquo
E64B 20F5             (        forth.asm):01117 (3)             bra     @prtsym
E64D 8627             (        forth.asm):01118 (2)     @endquo lda     #''
E64F BDE1B7           (        forth.asm):01119 (7)             jsr     PUTCH
E652 8620             (        forth.asm):01120 (2)             lda     #SP
E654 BDE1B7           (        forth.asm):01121 (7)             jsr     PUTCH
E657 8EFE83           (        forth.asm):01122 (3)     @perrm  ldx     #ERRMTBL        Regular error handling
E65A 5D               (        forth.asm):01123 (1)     @nxterr tstb
E65B 2633             (        forth.asm):01124 (3)             bne     @skerrm
E65D BDE1DB           (        forth.asm):01125 (7)             jsr     PUTS            Print error message
E660 8DAF             (        forth.asm):01126 (6)             bsr     PRBLKIN         Print BLK and >IN values (in hex)
E662 BDE1E8           (        forth.asm):01127 (7)             jsr     PUTCR
E665 1F20             (        forth.asm):01128 (4)     @dmptos tfr     y,d             Dump top of the system stack contents
E667 8E034E           (        forth.asm):01129 (3)             ldx     #HEXBUF
E66A BDE175           (        forth.asm):01130 (7)             jsr     HDMP4
E66D 8620             (        forth.asm):01131 (2)             lda     #SP
E66F A780             (        forth.asm):01132 (4+1)           sta     ,x+
                      (        forth.asm):01133         * Symbolic stack dumps are configurable. In situations where the dictionary is
                      (        forth.asm):01134         * trashed, they may not be considered desirable. See SSDFEAT in constants.asm.
                      (        forth.asm):01135                 IFNE    SSDFEAT
E671 BDE512           (        forth.asm):01136 (7)             jsr     FINDSYM
                      (        forth.asm):01137                 ENDC
E674 8E034E           (        forth.asm):01138 (3)             ldx     #HEXBUF
E677 BDE1DB           (        forth.asm):01139 (7)             jsr     PUTS
E67A BDE1E8           (        forth.asm):01140 (7)             jsr     PUTCR
E67D 108CE000         (        forth.asm):01141 (4)             cmpy    #IODZHDL
E681 2702             (        forth.asm):01142 (3)             beq     @wastrp         We're just back from the trap handler
E683 3262             (        forth.asm):01143 (4+1)           leas    2,s             Point to the next item on the stack
E685 118C8000         (        forth.asm):01144 (4)     @wastrp cmps    #RAMSTRT+RAMSIZE
E689 270C             (        forth.asm):01145 (3)             beq     @errdon         We're done here
E68B 10AEE4           (        forth.asm):01146 (6+0)           ldy     ,s
E68E 20D5             (        forth.asm):01147 (3)             bra     @dmptos
E690 A680             (        forth.asm):01148 (4+1)   @skerrm lda     ,x+             Scan for the next error message
E692 26FC             (        forth.asm):01149 (3)             bne     @skerrm
E694 5A               (        forth.asm):01150 (1)             decb
E695 20C3             (        forth.asm):01151 (3)             bra     @nxterr
E697 10CE8000         (        forth.asm):01152 (4)     @errdon lds     #RAMSTRT+RAMSIZE
E69B 9621             (        forth.asm):01153 (3)             lda     USTATE+1        We do ignore the upper byte
E69D 270D             (        forth.asm):01154 (3)             beq     @erdon2         No pointers to restore if we were interpreting
                      (        forth.asm):01155         * Compiling: clear STATE, RSP and restore LSTWAD, DICEND.
E69F 0F21             (        forth.asm):01156 (5)             clr     USTATE+1        Switch back to interpretation mode
E6A1 BDEA18           (        forth.asm):01157                 RFXT    jsr,RCLR+7      XT for RCLR
E6A4 9E0C             (        forth.asm):01158 (4)             ldx     BDICEND         Restore essential pointers from backups
E6A6 9F08             (        forth.asm):01159 (4)             stx     DICEND          Restore HERE
E6A8 9E0A             (        forth.asm):01160 (4)             ldx     BLSTWAD
E6AA 9F06             (        forth.asm):01161 (4)             stx     LSTWAD          Restore LAST
E6AC 7EE0A8           (        forth.asm):01162 (3)     @erdon2 jmp     INTERP
                      (        forth.asm):01163         
                      (        forth.asm):01164         * Push X to the data stack (boundary is checked).
E6AF 1183018A         (        forth.asm):01165 (4)     NPUSH   cmpu    #NSTTOP
E6B3 2303             (        forth.asm):01166 (3)             bls     @npush1         Anything <= than #NSTTOP indicates overflow
E6B5 3610             (        forth.asm):01167 (4+2)           pshu    x               Aka UCNPUSH
E6B7 39               (        forth.asm):01168 (4)             rts
E6B8 5F               (        forth.asm):01169 (1)     @npush1 clrb                    Data stack overflow
E6B9 BDE636           (        forth.asm):01170 (7)             jsr     ERRHDLR         No return
     E6BC             (        forth.asm):01171         DPSHRA  equ     *
E6BC 12               (        forth.asm):01172 (1)             nop
                      (        forth.asm):01173         
                      (        forth.asm):01174         * Pull X from the data stack (boundary is checked).
                      (        forth.asm):01175         * D, W and Y are preserved.
E6BD 1183024A         (        forth.asm):01176 (4)     NPOP    cmpu    #NSTBOT
E6C1 2403             (        forth.asm):01177 (3)             bhs     @npop1          Anything >= than #NSTBOT indicates underflow
E6C3 3710             (        forth.asm):01178 (4+2)           pulu    x
E6C5 39               (        forth.asm):01179 (4)             rts
E6C6 C601             (        forth.asm):01180 (2)     @npop1  ldb     #1              Data stack underflow
E6C8 BDE636           (        forth.asm):01181 (7)             jsr     ERRHDLR         No return
     E6CB             (        forth.asm):01182         DPOPRA  equ     *
E6CB 12               (        forth.asm):01183 (1)             nop
                      (        forth.asm):01184         
                      (        forth.asm):01185         * Push X to the return stack (boundary is checked).
E6CC 962A             (        forth.asm):01186 (3)     RPUSH   lda     RDEPTH          RDEPTH is expressed in cells
E6CE 8140             (        forth.asm):01187 (2)             cmpa    #RSTKSZ/2       But RSTKZ is expressed in bytes
E6D0 2712             (        forth.asm):01188 (3)             beq     @rpush1
E6D2 4C               (        forth.asm):01189 (1)             inca
E6D3 972A             (        forth.asm):01190 (3)             sta     RDEPTH
E6D5 0F2C             (        forth.asm):01191 (5)             clr     RTSREMV         Do not get rid of the final RTS
E6D7 1F27             (        forth.asm):01192 (4)             tfr     y,v
E6D9 109E00           (        forth.asm):01193 (5)             ldy     RSP
E6DC AFA3             (        forth.asm):01194 (5+2)           stx     ,--y
E6DE 109F00           (        forth.asm):01195 (5)             sty     RSP
E6E1 1F72             (        forth.asm):01196 (4)             tfr     v,y
E6E3 39               (        forth.asm):01197 (4)             rts
E6E4 C607             (        forth.asm):01198 (2)     @rpush1 ldb     #7              Return stack overflow
E6E6 BDE636           (        forth.asm):01199 (7)             jsr     ERRHDLR         No return
     E6E9             (        forth.asm):01200         RPSHRA  equ     *
E6E9 12               (        forth.asm):01201 (1)             nop                     Meant to insulate RPUSH errors from RPOP EP
                      (        forth.asm):01202         
                      (        forth.asm):01203         * Pull X from the return stack (boundary is checked).
E6EA 962A             (        forth.asm):01204 (3)     RPOP    lda     RDEPTH          RDEPTH is expressed in cells
E6EC 2710             (        forth.asm):01205 (3)             beq     @rpop1
E6EE 4A               (        forth.asm):01206 (1)             deca
E6EF 972A             (        forth.asm):01207 (3)             sta     RDEPTH
E6F1 1F27             (        forth.asm):01208 (4)             tfr     y,v
E6F3 109E00           (        forth.asm):01209 (5)             ldy     RSP
E6F6 AEA1             (        forth.asm):01210 (5+2)           ldx     ,y++
E6F8 109F00           (        forth.asm):01211 (5)             sty     RSP
E6FB 1F72             (        forth.asm):01212 (4)             tfr     v,y
E6FD 39               (        forth.asm):01213 (4)             rts
E6FE C608             (        forth.asm):01214 (2)     @rpop1  ldb     #8              Return stack underflow
E700 BDE636           (        forth.asm):01215 (7)             jsr     ERRHDLR         No return
     E703             (        forth.asm):01216         RPOPRA  equ     *
                      (        forth.asm):01217         
                      (        forth.asm):01218         * Derive the current input stream pointer from BLK and >IN.
                      (        forth.asm):01219         * The resulting address is returned in X. D is altered.
                      (        forth.asm):01220         * Both Y and W are preserved.
E703 9E24             (        forth.asm):01221 (4)     BKIN2PT ldx     UBLK
E705 2716             (        forth.asm):01222 (3)             beq     @consol         We are switching back to the console
E707 1038             (        forth.asm):01223 (6)             pshsw
E709 3420             (        forth.asm):01224 (4+2)           pshs    y
E70B 8DA2             (        forth.asm):01225 (6)             bsr     NPUSH           Make sure BLK @ is loaded
E70D BDE90F           (        forth.asm):01226                 RFXT    jsr,BLOCK+8     XT for BLOCK
E710 3520             (        forth.asm):01227 (4+2)           puls    y
E712 1039             (        forth.asm):01228 (6)             pulsw
E714 3710             (        forth.asm):01229                 UCNPOP                  Retrieve buffer addr (to X)
E716 9F1C             (        forth.asm):01230 (4)     @done   stx     BSBFADR         Update base buffer address
E718 DC22             (        forth.asm):01231 (4)             ldd     UTOIN
E71A 308B             (        forth.asm):01232 (4+2)           leax    d,x             Add the current offset. Return the result via X
E71C 39               (        forth.asm):01233 (4)             rts
E71D 8E02CA           (        forth.asm):01234 (3)     @consol ldx     #CMDBUF
E720 20F4             (        forth.asm):01235 (3)             bra     @done
                      (        forth.asm):01236         
                      (        forth.asm):01237                 include storage.asm
                      (      storage.asm):00001         * Wait until the BSY bit is clear in the CF status register.
                      (      storage.asm):00002         * Upon return the BSY bit is guaranteed to be zero. Z will
                      (      storage.asm):00003         * be set in CC. This subroutine should not be called before
                      (      storage.asm):00004         * the CompactFlash presence has been assessed.
E722 B6C007           (      storage.asm):00005 (4)     CFWAIT  lda     CFSTATR
E725 8580             (      storage.asm):00006 (2)             bita    #CFBSYB
E727 26F9             (      storage.asm):00007 (3)             bne     CFWAIT
E729 39               (      storage.asm):00008 (4)             rts
                      (      storage.asm):00009         
                      (      storage.asm):00010         * Wait until the BSY bit is clear and the RDY bit is set.
E72A 8DF6             (      storage.asm):00011 (6)     CFRDY   bsr     CFWAIT
E72C 2703             (      storage.asm):00012 (3)             beq     @cfrdy0         Card not busy, proceed
E72E 1A04             (      storage.asm):00013 (2)             orcc    #ZFLAG
E730 39               (      storage.asm):00014 (4)             rts
E731 8E2000           (      storage.asm):00015 (3)     @cfrdy0 ldx     #$2000          Maximum poll count
E734 8640             (      storage.asm):00016 (2)             lda     #CFRDYB
E736 B5C007           (      storage.asm):00017 (4)     @cfrdy1 bita    CFSTATR
E739 2604             (      storage.asm):00018 (3)             bne     @cfrdy2         BSY bit is set, continue
E73B 301F             (      storage.asm):00019 (4+1)           leax    -1,x            Card not ready, decrement poll count
E73D 26F7             (      storage.asm):00020 (3)             bne     @cfrdy1         and try again
E73F 39               (      storage.asm):00021 (4)     @cfrdy2 rts                     Return with Z set: card not present
                      (      storage.asm):00022         *                               Return with Z clear: card is ready
                      (      storage.asm):00023         
                      (      storage.asm):00024         * Check for possible error condition.
                      (      storage.asm):00025         * Upon return either Z is set (A is zero) and no error occurred or
                      (      storage.asm):00026         * Z is clear and the CF error register contents is returned in A.
E740 8DE0             (      storage.asm):00027 (6)     CFERRCK bsr     CFWAIT
E742 B6C007           (      storage.asm):00028 (4)             lda     CFSTATR
E745 8401             (      storage.asm):00029 (2)             anda    #CFERRB
E747 2703             (      storage.asm):00030 (3)             beq     @cfeck1
E749 B6C001           (      storage.asm):00031 (4)             lda     CFERROR         The error register contains error details
E74C 39               (      storage.asm):00032 (4)     @cfeck1 rts
                      (      storage.asm):00033         
                      (      storage.asm):00034         * Issue CF command. The command code is passed through the B register.
                      (      storage.asm):00035         * Upon return:
                      (      storage.asm):00036         * - Z is set and everything is peachy.
                      (      storage.asm):00037         * - or Z is clear and the CF error register contents will be
                      (      storage.asm):00038         *   returned in A (and mirrored in the global CFERRCD variable).
                      (      storage.asm):00039         * B is preserved.
E74D 8DDB             (      storage.asm):00040 (6)     CFCMDIS bsr     CFRDY
E74F 270A             (      storage.asm):00041 (3)             beq     @cfciab         Card not ready, abort
E751 D737             (      storage.asm):00042 (3)             stb     CFCMMIR         Update CF command mirror
E753 F7C007           (      storage.asm):00043 (4)             stb     CFCOMDR         Send command to the CF card
E756 8DE8             (      storage.asm):00044 (6)             bsr     CFERRCK
E758 9738             (      storage.asm):00045 (3)     @cfcise sta     CFERRCD         CF command issue set error
                      (      storage.asm):00046                 IFNE    DEBUG
                      (      storage.asm):00047                 pshs    a,cc
                      (      storage.asm):00048                 beq     @cfciok
                      (      storage.asm):00049                 lda     #'!
                      (      storage.asm):00050                 jsr     PUTCH
E75A                  (      storage.asm):00051         @cfcidi lda     CFCMMIR
                      (      storage.asm):00052                 ldx     #TBUFF
                      (      storage.asm):00053                 jsr     HDMP2
                      (      storage.asm):00054                 lda     #'/
                      (      storage.asm):00055                 sta     ,x+
                      (      storage.asm):00056                 lda     CFERRCD
                      (      storage.asm):00057                 jsr     HDMP2
                      (      storage.asm):00058                 ldx     #TBUFF
                      (      storage.asm):00059                 jsr     PUTS
                      (      storage.asm):00060                 jsr     PUTCR
                      (      storage.asm):00061                 bra     @cfcict         CF command issue continued
E75A                  (      storage.asm):00062         @cfciok lda     #'#
                      (      storage.asm):00063                 jsr     PUTCH
                      (      storage.asm):00064                 bra     @cfcidi         CF command issue data indication
E75A                  (      storage.asm):00065         @cfcict puls    cc,a
                      (      storage.asm):00066                 ENDC
E75A 39               (      storage.asm):00067 (4)             rts
E75B 86FF             (      storage.asm):00068 (2)     @cfciab lda     #$FF            Dummy error code
E75D 20F9             (      storage.asm):00069 (3)             bra     @cfcise
                      (      storage.asm):00070         
                      (      storage.asm):00071         * Drive 0 select.
E75F 8DC9             (      storage.asm):00072 (6)     CFDRSEL bsr     CFRDY
E761 86E0             (      storage.asm):00073 (2)             lda     #$E0            Drive 0, LBA mode
E763 B7C006           (      storage.asm):00074 (4)             sta     CFDRHDR
E766 20C2             (      storage.asm):00075 (3)             bra     CFRDY
                      (      storage.asm):00076         
                      (      storage.asm):00077         * Analyze the response to the CF "Identify Device" request.
E768 9E08             (      storage.asm):00078 (4)     CFANTHS ldx     DICEND
E76A 308836           (      storage.asm):00079 (4+1)           leax    $36,x           Point to the "Model number" field
E76D 3410             (      storage.asm):00080 (4+2)           pshs    x
E76F 118614           (      storage.asm):00081 (3)             lde     #$14            Number of 16 bit words to go through
E772 EC84             (      storage.asm):00082 (5+0)   @bytswp ldd     ,x
E774 1E98             (      storage.asm):00083 (5)             exg     b,a             Byte swapping
E776 ED81             (      storage.asm):00084 (5+2)           std     ,x++
E778 114A             (      storage.asm):00085 (2)             dece
E77A 26F6             (      storage.asm):00086 (3)             bne     @bytswp
E77C 6F84             (      storage.asm):00087 (6+0)           clr     ,x
E77E 3510             (      storage.asm):00088 (4+2)           puls    x
E780 BDE1DB           (      storage.asm):00089 (7)             jsr     PUTS            Decent CF cards indicate the capacity that way
E783 7EE1E8           (      storage.asm):00090 (3)             jmp     PUTCR           Up to $10000 blocks is 64 MB!
                      (      storage.asm):00091         
                      (      storage.asm):00092         * Initialize the CompactFlash subsystem.
                      (      storage.asm):00093         * This is run once at boot time. There is no hot plug support here.
E786 0F36             (      storage.asm):00094 (5)     CFINIT  clr     CFCARDP         Clear card present,
                      (      storage.asm):00095                 IFEQ    DEBUG
E788 8DA0             (      storage.asm):00096 (6)             bsr     CFRDY
                      (      storage.asm):00097                 ELSE
                      (      storage.asm):00098                 jsr     CFRDY
                      (      storage.asm):00099                 ENDC
E78A 2730             (      storage.asm):00100 (3)             beq     @cfinab         Card not ready, abort
E78C 8DD1             (      storage.asm):00101 (6)             bsr     CFDRSEL         Drive 0 select
E78E 8601             (      storage.asm):00102 (2)             lda     #1              Enable 8-bit data transfers
E790 B7C001           (      storage.asm):00103 (4)             sta     CFFEATR
E793 C6EF             (      storage.asm):00104 (2)             ldb     #CFSETFT        Issue a CF "Set Feature" command
                      (      storage.asm):00105                 IFEQ    DEBUG
E795 8DB6             (      storage.asm):00106 (6)             bsr     CFCMDIS         Not allowed to fail
                      (      storage.asm):00107                 ELSE
                      (      storage.asm):00108                 jsr     CFCMDIS         Not allowed to fail
                      (      storage.asm):00109                 ENDC
E797 2623             (      storage.asm):00110 (3)             bne     @cfinab         Abort with card present flag clear
E799 8601             (      storage.asm):00111 (2)             lda     #1              Request default PIO mode wo/ IORDY
E79B B7C002           (      storage.asm):00112 (4)             sta     CFSCNTR
E79E 8603             (      storage.asm):00113 (2)             lda     #3              ATA-2 "Set Transfer mode"
E7A0 B7C001           (      storage.asm):00114 (4)             sta     CFFEATR
                      (      storage.asm):00115                 IFEQ    DEBUG
E7A3 8DA8             (      storage.asm):00116 (6)             bsr     CFCMDIS         OK to fail
                      (      storage.asm):00117                 ELSE
                      (      storage.asm):00118                 jsr     CFCMDIS         OK to fail
                      (      storage.asm):00119                 ENDC
E7A5 8682             (      storage.asm):00120 (2)             lda     #$82            Disable write caching
E7A7 B7C001           (      storage.asm):00121 (4)             sta     CFFEATR
                      (      storage.asm):00122                 IFEQ    DEBUG
E7AA 8DA1             (      storage.asm):00123 (6)             bsr     CFCMDIS         B still has #CFSETF. Also OK to fail
                      (      storage.asm):00124                 ELSE
                      (      storage.asm):00125                 jsr     CFCMDIS         B still has #CFSETF. Also OK to fail
                      (      storage.asm):00126                 ENDC
E7AC C6EC             (      storage.asm):00127 (2)             ldb     #CFIDDEV        Issue a CF "Identify Device" command
                      (      storage.asm):00128                 IFEQ    DEBUG
E7AE 8D9D             (      storage.asm):00129 (6)             bsr     CFCMDIS         Not allowed to fail
                      (      storage.asm):00130                 ELSE
                      (      storage.asm):00131                 jsr     CFCMDIS         Not allowed to fail
                      (      storage.asm):00132                 ENDC
E7B0 260A             (      storage.asm):00133 (3)             bne     @cfinab         Abort with card present flag clear
E7B2 9E08             (      storage.asm):00134 (4)             ldx     DICEND          Target address is HERE
E7B4 8D07             (      storage.asm):00135 (6)             bsr     CF1SRD          Read one sector
E7B6 8DB0             (      storage.asm):00136 (6)             bsr     CFANTHS         Analyze this!
E7B8 8601             (      storage.asm):00137 (2)             lda     #1
E7BA 9736             (      storage.asm):00138 (3)             sta     CFCARDP         Set the card present flag
E7BC 39               (      storage.asm):00139 (4)     @cfinab rts
                      (      storage.asm):00140         
                      (      storage.asm):00141         * Read one sector. The LBA parameters are assumed to have been set previously.
                      (      storage.asm):00142         * On input X points to the receiving (at least 512 bytes long) buffer.
E7BD B6C007           (      storage.asm):00143 (4)     CF1SRD  lda     CFSTATR
E7C0 8508             (      storage.asm):00144 (2)             bita    #CFDRQB         Check for DRQ bit in the CF status register
E7C2 270C             (      storage.asm):00145 (3)             beq     IOERR
E7C4 10860200         (      storage.asm):00146 (4)             ldw     #CFSCSZ         Sector size is 512 bytes
E7C8 108EC000         (      storage.asm):00147 (4)             ldy     #CFDATAR        The data source address
E7CC 113B21           (      storage.asm):00148 (6+?)           tfm     y,x+            Note: tfm is interruptible!
E7CF 39               (      storage.asm):00149 (4)             rts
E7D0 C611             (      storage.asm):00150 (2)     IOERR   ldb     #17
E7D2 BDE636           (      storage.asm):00151 (7)             jsr     ERRHDLR         No return
E7D5 12               (      storage.asm):00152 (1)     CFR1SRA nop                     For symbolic stack dump debugging purposes
                      (      storage.asm):00153         
                      (      storage.asm):00154         * Write one sector. The LBA parameters are assumed to have been set previously.
                      (      storage.asm):00155         * On input X points to the sending (at least 512 bytes long) buffer.
E7D6 B6C007           (      storage.asm):00156 (4)     CF1SWR  lda     CFSTATR
E7D9 8488             (      storage.asm):00157 (2)             anda    #CFBSYB|CFDRQB
E7DB 8108             (      storage.asm):00158 (2)             cmpa    #CFDRQB         Check for BSY clear and DRQ set
E7DD 26F7             (      storage.asm):00159 (3)             bne     CF1SWR
E7DF 10860200         (      storage.asm):00160 (4)             ldw     #CFSCSZ         Sector size is 512 bytes
E7E3 108EC000         (      storage.asm):00161 (4)             ldy     #CFDATAR        The data destination address
E7E7 113A12           (      storage.asm):00162 (6+?)           tfm     x+,y            Note: tfm is interruptible!
E7EA 39               (      storage.asm):00163 (4)             rts
                      (      storage.asm):00164         
                      (      storage.asm):00165         * 1KB Forth block support primitives. Not dictionary code. More like BIOS ops.
                      (      storage.asm):00166         
                      (      storage.asm):00167         * One block IO preamble: select drive and LBA parameters. On input:
                      (      storage.asm):00168         * ,s has the return address
                      (      storage.asm):00169         * 2,s had the return address for the caller
                      (      storage.asm):00170         * 4,s has the target block number
E7EB BDE722           (      storage.asm):00171 (7)     CF1BPRE jsr     CFWAIT
E7EE BDE75F           (      storage.asm):00172 (7)             jsr     CFDRSEL         Set drive and head parameters
E7F1 EC64             (      storage.asm):00173 (5+1)           ldd     4,s
E7F3 1048             (      storage.asm):00174 (2)             lsld                    Convert block number to sector number
E7F5 F7C003           (      storage.asm):00175 (4)             stb     CFSNUMR         LBA 7-0
E7F8 B7C004           (      storage.asm):00176 (4)             sta     CFCLOWR         LBA 15-8
E7FB 1FA8             (      storage.asm):00177 (4)             tfr     cc,a
E7FD 8401             (      storage.asm):00178 (2)             anda    #CFLAG
E7FF B7C005           (      storage.asm):00179 (4)             sta     CFCHIGR         LBA 23-16 (carry to cylinder high)
E802 8602             (      storage.asm):00180 (2)             lda     #2              2 IDE sectors per Forth block
E804 B7C002           (      storage.asm):00181 (4)             sta     CFSCNTR
E807 39               (      storage.asm):00182 (4)             rts
                      (      storage.asm):00183         
                      (      storage.asm):00184         * Read one block from CF device. On input:
                      (      storage.asm):00185         * ,s has the return address
                      (      storage.asm):00186         * 2,s has the target block number
                      (      storage.asm):00187         * 4,s has the buffer base address
                      (      storage.asm):00188         * Upon return, Y will be preserved.
E808 0D36             (      storage.asm):00189 (4)     CF1BKRD tst     CFCARDP
E80A 2602             (      storage.asm):00190 (3)             bne     @ctnued
E80C 20C2             (      storage.asm):00191 (3)             bra     IOERR           Card not present--CF subsystem not initialized
E80E 1F27             (      storage.asm):00192 (4)     @ctnued tfr     y,v
E810 8DD9             (      storage.asm):00193 (6)             bsr     CF1BPRE
E812 C620             (      storage.asm):00194 (2)             ldb     #CFRSCTS        Issue a "Read sectors" CF command
E814 BDE74D           (      storage.asm):00195 (7)             jsr     CFCMDIS
E817 AE64             (      storage.asm):00196 (5+1)           ldx     4,s             Target buffer address to X
E819 8DA2             (      storage.asm):00197 (6)             bsr     CF1SRD          Read the even sector from CF device
E81B BDE722           (      storage.asm):00198 (7)             jsr     CFWAIT          Wait for next sector to become available
E81E 8D9D             (      storage.asm):00199 (6)             bsr     CF1SRD          and read the odd sector
E820 1F72             (      storage.asm):00200 (4)             tfr     v,y
E822 39               (      storage.asm):00201 (4)             rts
                      (      storage.asm):00202         
                      (      storage.asm):00203         * Write one block to CF device. Upon entry:
                      (      storage.asm):00204         * ,s has the return address
                      (      storage.asm):00205         * 2,s has the target block number
                      (      storage.asm):00206         * 4,s has the buffer base address
                      (      storage.asm):00207         * Upon return, Y will be preserved.
E823 0D36             (      storage.asm):00208 (4)     CF1BKWR tst     CFCARDP
E825 2602             (      storage.asm):00209 (3)             bne     @ctnued
E827 20A7             (      storage.asm):00210 (3)             bra     IOERR           Card not present--CF subsystem not initialized
E829 1F27             (      storage.asm):00211 (4)     @ctnued tfr     y,v
E82B 8DBE             (      storage.asm):00212 (6)             bsr     CF1BPRE
E82D C630             (      storage.asm):00213 (2)             ldb     #CFWSCTS        Issue a "Write sectors" CF command
E82F BDE74D           (      storage.asm):00214 (7)             jsr     CFCMDIS
E832 AE64             (      storage.asm):00215 (5+1)           ldx     4,s             Source buffer address to X
E834 8DA0             (      storage.asm):00216 (6)             bsr     CF1SWR          Write the even sector to CF device
E836 BDE722           (      storage.asm):00217 (7)             jsr     CFWAIT          Wait for next sector to become available
E839 8D9B             (      storage.asm):00218 (6)             bsr     CF1SWR          and write the odd sector
E83B 1F72             (      storage.asm):00219 (4)             tfr     v,y
E83D 39               (      storage.asm):00220 (4)             rts
                      (      storage.asm):00221         
                      (        forth.asm):01238         
                      (        forth.asm):01239         ******************************************************************************
                      (        forth.asm):01240         * Dictionary begins. In the code below ANSI refers to ANSI-X3.215-1994
                      (        forth.asm):01241         * Draft 6 proposal (i.e. the free spec).
                      (        forth.asm):01242         
E83E 0D               (        forth.asm):01243         EBUFS   fcb     13              79-STANDARD (REQ145)
E83F 454D5054592D4255 (        forth.asm):01244                 fcc     'EMPTY-BUFFERS' ( -- )
     4646455253
E84C 0000             (        forth.asm):01245                 fdb     0               Last dictionary entry
E84E C7               (        forth.asm):01246                 RFCS
E84F 7EE26D           (        forth.asm):01247 (3)             jmp     EMPTYB
                      (        forth.asm):01248         
E852 0C               (        forth.asm):01249         SAVBUF  fcb     12              79-STANDARD (REQ221)
E853 534156452D425546 (        forth.asm):01250                 fcc     'SAVE-BUFFERS'  ( -- )
     46455253
E85F E83E             (        forth.asm):01251                 fdb     EBUFS
E861 C7               (        forth.asm):01252                 RFCS
E862 8E03F0           (        forth.asm):01253 (3)             ldx     #BUF0
E865 8D03             (        forth.asm):01254 (6)             bsr     WBIFDRT
E867 8E0800           (        forth.asm):01255 (3)             ldx     #BUF1
                      (        forth.asm):01256         * Write buffer back to mass storage if marked as dirty.
                      (        forth.asm):01257         * The dirty bit is cleared but the buffer contents itself is not.
                      (        forth.asm):01258         * The buffer will continue to be marked as "in use."
                      (        forth.asm):01259         * On input X has has the base buffer address. Both D and X
                      (        forth.asm):01260         * are preserved. Y is not.
E86A 3406             (        forth.asm):01261 (4+2)   WBIFDRT pshs    d
E86C 3410             (        forth.asm):01262 (4+2)           pshs    x               Base buffer address (arg1 to CF1BKWR)
E86E 8605             (        forth.asm):01263 (2)             lda     #BINUSE|BDIRTY
E870 A4890401         (        forth.asm):01264 (4+3)           anda    BOFLAGS,x
E874 8105             (        forth.asm):01265 (2)             cmpa    #BINUSE|BDIRTY
E876 2616             (        forth.asm):01266 (3)             bne     @alldon         Block not in use or in use but not dirty
E878 AE890402         (        forth.asm):01267 (5+3)           ldx     BOBLKNO,x
E87C 3410             (        forth.asm):01268 (4+2)           pshs    x               Block number (arg0 to CF1BKWR)
E87E 8DA3             (        forth.asm):01269 (6)             bsr     CF1BKWR         Write data buffer to CF
E880 3262             (        forth.asm):01270 (4+1)           leas    2,s             Drop one cell from the system stack (blknum)
E882 AEE4             (        forth.asm):01271 (5+0)           ldx     ,s              Retrieve base buffer address
E884 30890401         (        forth.asm):01272 (4+3)           leax    BOFLAGS,x
E888 A684             (        forth.asm):01273 (4+0)           lda     ,x              Acquire the 'flags' field
E88A 84FB             (        forth.asm):01274 (2)             anda    #^BDIRTY        Clear the dirty bit
E88C A784             (        forth.asm):01275 (4+0)           sta     ,x              and update the 'flags' field
E88E 3510             (        forth.asm):01276 (4+2)   @alldon puls    x               Restore X
E890 3506             (        forth.asm):01277 (4+2)           puls    d               and D
E892 39               (        forth.asm):01278 (4)             rts
                      (        forth.asm):01279         
E893 05               (        forth.asm):01280         FLUSH   fcb     5               79-STANDARD (REF)
E894 464C555348       (        forth.asm):01281                 fcc     'FLUSH'         ( -- ) An alias for SAVE-BUFFERS
E899 E852             (        forth.asm):01282                 fdb     SAVBUF
E89B C7               (        forth.asm):01283                 RFCS
E89C 20C4             (        forth.asm):01284                 RFXT    bra,SAVBUF+15   XT for SAVE-BUFFERS
                      (        forth.asm):01285         
E89E 06               (        forth.asm):01286         UPDATE  fcb     6               79-STANDARD (REQ229)
E89F 555044415445     (        forth.asm):01287                 fcc     'UPDATE'        ( -- )
E8A5 E893             (        forth.asm):01288                 fdb     FLUSH
E8A7 C7               (        forth.asm):01289                 RFCS
E8A8 9E1A             (        forth.asm):01290 (4)             ldx     MRUBUFA         Most recently used buffer base address
E8AA 30890401         (        forth.asm):01291 (4+3)           leax    BOFLAGS,x       Buffer 'flags' field's address to X
E8AE A684             (        forth.asm):01292 (4+0)           lda     ,x              Buffer 'flags' field to A
E8B0 8501             (        forth.asm):01293 (2)             bita    #BINUSE         Is that buffer in use?
E8B2 2704             (        forth.asm):01294 (3)             beq     @upddon         No, we're done here
E8B4 8A04             (        forth.asm):01295 (2)             ora     #BDIRTY
E8B6 A784             (        forth.asm):01296 (4+0)           sta     ,x              Set the dirty bit
E8B8 39               (        forth.asm):01297 (4)     @upddon rts
                      (        forth.asm):01298         
E8B9 06               (        forth.asm):01299         BUFFER  fcb     6               79-STANDARD (REQ130)
E8BA 425546464552     (        forth.asm):01300                 fcc     'BUFFER'        ( ublkno -- addr )
E8C0 E89E             (        forth.asm):01301                 fdb     UPDATE
E8C2 C7               (        forth.asm):01302                 RFCS
E8C3 BDE6BD           (        forth.asm):01303 (7)             jsr     NPOP
E8C6 1F12             (        forth.asm):01304 (4)             tfr     x,y             ublkno to Y
                      (        forth.asm):01305         * Block lookup.
E8C8 8E03F0           (        forth.asm):01306 (3)             ldx     #BUF0           Base address of the first resident buffer
E8CB C602             (        forth.asm):01307 (2)             ldb     #2              Number of resident buffers
E8CD A6890401         (        forth.asm):01308 (4+3)   @blkup  lda     BOFLAGS,x       Buffer flags to A
E8D1 8501             (        forth.asm):01309 (2)             bita    #BINUSE         Buffer in use?
E8D3 270C             (        forth.asm):01310 (3)             beq     @nxtbuf         No
E8D5 10AC890402       (        forth.asm):01311 (6+3)           cmpy    BOBLKNO,x       Buffer is in use. Block number match?
E8DA 2605             (        forth.asm):01312 (3)             bne     @nxtbuf         No
E8DC 9F1A             (        forth.asm):01313 (4)     @retba  stx     MRUBUFA         Block number match. Mark as the MRU buffer
E8DE 3610             (        forth.asm):01314                 UCNPUSH                 and return its base address via the data stack
E8E0 39               (        forth.asm):01315 (4)             rts
E8E1 30890410         (        forth.asm):01316 (4+3)   @nxtbuf leax    BFDISP,x        Point to the next buffer
E8E5 5A               (        forth.asm):01317 (1)             decb
E8E6 26E5             (        forth.asm):01318 (3)             bne     @blkup
                      (        forth.asm):01319         * The block number in Y is not currently in use. Assign a buffer to it.
E8E8 8E03F0           (        forth.asm):01320 (3)             ldx     #BUF0
E8EB 9C1A             (        forth.asm):01321 (4)             cmpx    MRUBUFA         Most recently used buffer address
E8ED 2603             (        forth.asm):01322 (3)             bne     @bselct
E8EF 8E0800           (        forth.asm):01323 (3)             ldx     #BUF1
                      (        forth.asm):01324         * At this point X has the base address of the block we are interested in.
E8F2 3420             (        forth.asm):01325 (4+2)   @bselct pshs    y               Backup the target block number
E8F4 BDE86A           (        forth.asm):01326 (7)             jsr     WBIFDRT         Write back if dirty. X and D are preserved
E8F7 8601             (        forth.asm):01327 (2)             lda     #BINUSE
E8F9 A7890401         (        forth.asm):01328 (4+3)           sta     BOFLAGS,x       Update the buffers 'flags' field
E8FD 3520             (        forth.asm):01329 (4+2)           puls    y               Restore the target block number
E8FF 10AF890402       (        forth.asm):01330 (6+3)           sty     BOBLKNO,x       and update the 'blknum' field as well
E904 20D6             (        forth.asm):01331 (3)             bra     @retba
                      (        forth.asm):01332         
E906 05               (        forth.asm):01333         BLOCK   fcb     5               79-STANDARD (REQ191)
E907 424C4F434B       (        forth.asm):01334                 fcc     'BLOCK'         ( ublkno -- addr )
E90C E8B9             (        forth.asm):01335                 fdb     BUFFER
E90E C7               (        forth.asm):01336                 RFCS
E90F 8DB2             (        forth.asm):01337                 RFXT    bsr,BUFFER+9    XT for BUFFER
                      (        forth.asm):01338         * Upon return Y has has the block number.
E911 3710             (        forth.asm):01339                 UCNPOP                  Buffer base address to X
E913 3410             (        forth.asm):01340 (4+2)           pshs    x               Push base buffer address as Arg1 to CF1BKRD
E915 A6890401         (        forth.asm):01341 (4+3)           lda     BOFLAGS,x       Retrieve buffer 'flags' field
                      (        forth.asm):01342                 IFNE    DEBUG
                      (        forth.asm):01343                 bita    #BINUSE
                      (        forth.asm):01344                 bne     @blkctd
                      (        forth.asm):01345                 lda     #10             Assertion failed
                      (        forth.asm):01346                 jsr     ERRHDLR         No return
                      (        forth.asm):01347                 ENDC
E919 8402             (        forth.asm):01348 (2)     @blkctd anda    #BMAPPD         Has the block been read yet?
E91B 2613             (        forth.asm):01349 (3)             bne     @bkmapd         Yes
E91D 3420             (        forth.asm):01350 (4+2)           pshs    y               No. Push block number as arg0 to CF1BKRD
                      (        forth.asm):01351         * Map in the block from the CF device. System stack structure is as follows:
                      (        forth.asm):01352         * ,s has the target block number.
                      (        forth.asm):01353         * 2,s has the buffer base address.
E91F BDE808           (        forth.asm):01354 (7)             jsr     CF1BKRD
E922 3262             (        forth.asm):01355 (4+1)           leas    2,s             Drop one cell from the system stack
                      (        forth.asm):01356         * Update the buffer flags field.
E924 AEE4             (        forth.asm):01357 (5+0)           ldx     ,s              Base buffer address
E926 30890401         (        forth.asm):01358 (4+3)           leax    BOFLAGS,x       Buffer 'flags' field address to X
E92A A684             (        forth.asm):01359 (4+0)           lda     ,x              Read buffer 'flags' field
E92C 8A02             (        forth.asm):01360 (2)             ora     #BMAPPD
E92E A784             (        forth.asm):01361 (4+0)           sta     ,x              and mark it as read
E930 3510             (        forth.asm):01362 (4+2)   @bkmapd puls    x               Buffer base address to X
E932 3610             (        forth.asm):01363                 UCNPUSH
E934 39               (        forth.asm):01364 (4)             rts
                      (        forth.asm):01365         
E935 03               (        forth.asm):01366         BLK     fcb     3
E936 424C4B           (        forth.asm):01367                 fcc     'BLK'
E939 E906             (        forth.asm):01368                 fdb     BLOCK
E93B C7               (        forth.asm):01369                 RFCS
E93C 8E0124           (        forth.asm):01370 (3)             ldx     #UBLK
E93F 7EE6AF           (        forth.asm):01371 (3)             jmp     NPUSH
                      (        forth.asm):01372         
E942 03               (        forth.asm):01373         TOIN    fcb     3
E943 3E494E           (        forth.asm):01374                 fcc     '>IN'
E946 E935             (        forth.asm):01375                 fdb     BLK
E948 C7               (        forth.asm):01376                 RFCS
E949 8E0122           (        forth.asm):01377 (3)             ldx     #UTOIN
E94C 7EE6AF           (        forth.asm):01378 (3)             jmp     NPUSH
                      (        forth.asm):01379         
E94F 03               (        forth.asm):01380         SCR     fcb     3
E950 534352           (        forth.asm):01381                 fcc     'SCR'
E953 E942             (        forth.asm):01382                 fdb     TOIN
E955 C7               (        forth.asm):01383                 RFCS
E956 8E0126           (        forth.asm):01384 (3)             ldx     #USCR
E959 7EE6AF           (        forth.asm):01385 (3)             jmp     NPUSH
                      (        forth.asm):01386         
                      (        forth.asm):01387         * Functionally: : LINE 6 SHIFT SCR @ BLOCK + ;
E95C 04               (        forth.asm):01388         LINE    fcb     4               79-STANDARD (REF)
E95D 4C494E45         (        forth.asm):01389                 fcc     'LINE'
E961 E94F             (        forth.asm):01390                 fdb     SCR
E963 C7               (        forth.asm):01391                 RFCS
E964 8E0006           (        forth.asm):01392 (3)             ldx     #6
E967 BDE6AF           (        forth.asm):01393 (7)             jsr     NPUSH
E96A BDF7DB           (        forth.asm):01394                 RFXT    jsr,SHIFT+8     XT for SHIFT
E96D 9E26             (        forth.asm):01395 (4)             ldx     USCR
E96F BDE6AF           (        forth.asm):01396 (7)             jsr     NPUSH
E972 8D9B             (        forth.asm):01397                 RFXT    bsr,BLOCK+8     XT for BLOCK
E974 7EF741           (        forth.asm):01398                 RFXT    jmp,PLUS+4      XT for +
                      (        forth.asm):01399         
                      (        forth.asm):01400         * Functionally:
                      (        forth.asm):01401         * : INDEX 1+ SWAP DO
                      (        forth.asm):01402         *     CR   I SCR !
                      (        forth.asm):01403         *     0 LINE 64 TYPE
                      (        forth.asm):01404         *   LOOP ;
E977 05               (        forth.asm):01405         INDEX   fcb     5               79-STANDARD (REF)
E978 494E444558       (        forth.asm):01406                 fcc     'INDEX'         ( n1 n2 -- )
E97D E95C             (        forth.asm):01407                 fdb     LINE
E97F C7               (        forth.asm):01408                 RFCS
E980 BDE6BD           (        forth.asm):01409 (7)             jsr     NPOP            N2 to X
E983 3001             (        forth.asm):01410 (4+1)           leax    1,x             1+
E985 1F12             (        forth.asm):01411 (4)             tfr     x,y             Y has the limit (not reached)
E987 BDE6BD           (        forth.asm):01412 (7)             jsr     NPOP            X has the index (N1)
E98A BDE1E8           (        forth.asm):01413 (7)     @indlop jsr     PUTCR           CR
E98D 9F26             (        forth.asm):01414 (4)             stx     USCR            I SCR !
E98F 3430             (        forth.asm):01415 (4+4)           pshs    y,x
E991 1FC1             (        forth.asm):01416 (4)             tfr     0,x
E993 BDE6AF           (        forth.asm):01417 (7)             jsr     NPUSH
E996 8DCC             (        forth.asm):01418                 RFXT    bsr,LINE+7      XT for LINE
E998 8E0040           (        forth.asm):01419 (3)             ldx     #64
E99B BDE6AF           (        forth.asm):01420 (7)             jsr     NPUSH
E99E BDF5A3           (        forth.asm):01421                 RFXT    jsr,TYPE+7      XT for TYPE
E9A1 3530             (        forth.asm):01422 (4+4)           puls    x,y             Restore loop parameters
E9A3 3001             (        forth.asm):01423 (4+1)           leax    1,x
E9A5 103712           (        forth.asm):01424 (4)             cmpr    x,y
E9A8 26E0             (        forth.asm):01425 (3)             bne     @indlop
E9AA 39               (        forth.asm):01426 (4)             rts
                      (        forth.asm):01427         
E9AB 04               (        forth.asm):01428         LIST    fcb     4               79-STANDARD (REQ109)
E9AC 4C495354         (        forth.asm):01429                 fcc     'LIST'          ( ublkno -- )
E9B0 E977             (        forth.asm):01430                 fdb     INDEX
E9B2 C7               (        forth.asm):01431                 RFCS
E9B3 0D36             (        forth.asm):01432 (4)             tst     CFCARDP
E9B5 2605             (        forth.asm):01433 (3)             bne     @lstpro
E9B7 C611             (        forth.asm):01434 (2)             ldb     #17             IO error
E9B9 BDE636           (        forth.asm):01435 (7)             jsr     ERRHDLR         No return
E9BC BDFB9A           (        forth.asm):01436         @lstpro RFXT    jsr,DUP+6       XT for DUP
E9BF BDE90F           (        forth.asm):01437                 RFXT    jsr,BLOCK+8     XT for BLOCK
                      (        forth.asm):01438         * TOS now has the base buffer address.
E9C2 BDE6BD           (        forth.asm):01439 (7)             jsr     NPOP
E9C5 1F12             (        forth.asm):01440 (4)             tfr     x,y             Base buffer address to Y
E9C7 BDE6BD           (        forth.asm):01441 (7)             jsr     NPOP            ublkno to X
E9CA 9F26             (        forth.asm):01442 (4)             stx     USCR            Update SCR's value
E9CC C610             (        forth.asm):01443 (2)             ldb     #16             16 lines to go
E9CE 3404             (        forth.asm):01444 (4+1)   @lstlop pshs    b
E9D0 BDE1E8           (        forth.asm):01445 (7)             jsr     PUTCR
E9D3 1F21             (        forth.asm):01446 (4)             tfr     y,x
E9D5 BDE6AF           (        forth.asm):01447 (7)             jsr     NPUSH           Start address for TYPE
E9D8 8E0040           (        forth.asm):01448 (3)             ldx     #64
E9DB BDE6AF           (        forth.asm):01449 (7)             jsr     NPUSH           Byte count for TYPE
E9DE 103012           (        forth.asm):01450 (4)             addr    x,y
E9E1 BDF5A3           (        forth.asm):01451                 RFXT    jsr,TYPE+7      XT for TYPE
E9E4 3504             (        forth.asm):01452 (4+1)           puls    b
E9E6 5A               (        forth.asm):01453 (1)             decb
E9E7 26E5             (        forth.asm):01454 (3)             bne     @lstlop
E9E9 39               (        forth.asm):01455 (4)             rts
                      (        forth.asm):01456         
                      (        forth.asm):01457         * Convert a single cell to a double. Non-transactional.
E9EA 03               (        forth.asm):01458         STOD    fcb     3               ANSI Core ( n -- d )
E9EB 533E44           (        forth.asm):01459                 fcc     'S>D'
E9EE E9AB             (        forth.asm):01460                 fdb     LIST
E9F0 C7               (        forth.asm):01461                 RFCS
E9F1 BDE6BD           (        forth.asm):01462 (7)             jsr     NPOP            N to X
E9F4 3610             (        forth.asm):01463                 UCNPUSH
E9F6 1F10             (        forth.asm):01464 (4)             tfr     x,d
E9F8 1FC1             (        forth.asm):01465 (4)             tfr     0,x             Default to N >= 0
E9FA 4D               (        forth.asm):01466 (1)             tsta
E9FB 2B02             (        forth.asm):01467 (3)             bmi     @argneg
E9FD 2002             (        forth.asm):01468 (3)             bra     @stddon
E9FF 301F             (        forth.asm):01469 (4+1)   @argneg leax    -1,x            N is < 0. Sign extension is required
EA01 7EE6AF           (        forth.asm):01470 (3)     @stddon jmp     NPUSH
                      (        forth.asm):01471         
EA04 04               (        forth.asm):01472         NCLR    fcb     4               Non-standard
EA05 4E434C52         (        forth.asm):01473                 fcc     'NCLR'          Clear the data (normal) stack
EA09 E9EA             (        forth.asm):01474                 fdb     STOD
EA0B C7               (        forth.asm):01475                 RFCS
EA0C CE024A           (        forth.asm):01476 (3)             ldu     #NSTBOT
EA0F 39               (        forth.asm):01477 (4)             rts
                      (        forth.asm):01478         
EA10 04               (        forth.asm):01479         RCLR    fcb     4               Non-standard
EA11 52434C52         (        forth.asm):01480                 fcc     'RCLR'          Clear the return stack
EA15 EA04             (        forth.asm):01481                 fdb     NCLR
EA17 C7               (        forth.asm):01482                 RFCS
EA18 8E02CA           (        forth.asm):01483 (3)             ldx     #RSTBOT
EA1B 9F00             (        forth.asm):01484 (4)             stx     RSP
EA1D 0F2A             (        forth.asm):01485 (5)             clr     RDEPTH
EA1F 39               (        forth.asm):01486 (4)             rts
                      (        forth.asm):01487         
EA20 05               (        forth.asm):01488         DEPTH   fcb     5               79-STANDARD (REQ238)
EA21 4445505448       (        forth.asm):01489                 fcc     'DEPTH'
EA26 EA10             (        forth.asm):01490                 fdb     RCLR
EA28 C7               (        forth.asm):01491                 RFCS
EA29 CC024A           (        forth.asm):01492 (3)             ldd     #NSTBOT         Bottom data stack address
EA2C 103230           (        forth.asm):01493 (4)             subr    u,d             D has the current value of the data stack ptr
EA2F 1044             (        forth.asm):01494 (2)             lsrd                    divided by 2
EA31 1F01             (        forth.asm):01495 (4)             tfr     d,x
EA33 7EE6AF           (        forth.asm):01496 (3)             jmp     NPUSH
                      (        forth.asm):01497         
EA36 06               (        forth.asm):01498         CREATE  fcb     6               79-STANDARD (REQ239)
EA37 435245415445     (        forth.asm):01499                 fcc     'CREATE'
EA3D EA20             (        forth.asm):01500                 fdb     DEPTH
EA3F C7               (        forth.asm):01501                 RFCS
EA40 BDE3F8           (        forth.asm):01502 (7)     CREAT0  jsr     LOCWRT          Code entry point returned to Y
EA43 868E             (        forth.asm):01503 (2)             lda     #LDXOPC         LDX immediate
EA45 A7A0             (        forth.asm):01504 (4+1)           sta     ,y+
EA47 1F21             (        forth.asm):01505 (4)             tfr     y,x
EA49 3008             (        forth.asm):01506 (4+1)           leax    8,x
EA4B AFA1             (        forth.asm):01507 (5+2)           stx     ,y++
EA4D 86BD             (        forth.asm):01508 (2)             lda     #JSROPC         JSR extended
EA4F BDE46E           (        forth.asm):01509 (7)             jsr     VARCON1         Compile JSR NPUSH
EA52 8639             (        forth.asm):01510 (2)             lda     #RTSOPC         RTS inherent
EA54 A7A0             (        forth.asm):01511 (4+1)           sta     ,y+
EA56 3122             (        forth.asm):01512 (4+1)           leay    2,y             Reserve room for a possible DOES> clause
EA58 109F08           (        forth.asm):01513 (5)     CREAT1  sty     DICEND
EA5B 9E0C             (        forth.asm):01514 (4)             ldx     BDICEND         This is set by LOCWRT (was IY)
EA5D 9F06             (        forth.asm):01515 (4)             stx     LSTWAD
EA5F 39               (        forth.asm):01516 (4)             rts
                      (        forth.asm):01517         
EA60 C5               (        forth.asm):01518         DOES    fcb     $C5             79-STANDARD (REQ168)
EA61 444F45533E       (        forth.asm):01519                 fcc     'DOES>'
EA66 EA36             (        forth.asm):01520                 fdb     CREATE
EA68 C7               (        forth.asm):01521                 RFCS
EA69 8EEA6F           (        forth.asm):01522 (3)             ldx     #DOESEX         JSR #DOESEX is compiled (no actual return)
EA6C 7EE14E           (        forth.asm):01523 (3)             jmp     EMXASXT         Set as action component
                      (        forth.asm):01524         
EA6F 9E06             (        forth.asm):01525 (4)     DOESEX  ldx     LSTWAD          Header of the last dictionary entry
EA71 E680             (        forth.asm):01526 (4+1)           ldb     ,x+
EA73 C41F             (        forth.asm):01527 (2)             andb    #WRLNMSK        Extract word length
EA75 3A               (        forth.asm):01528 (1)             abx
                      (        forth.asm):01529                 IFNE    RELFEAT
EA76 3009             (        forth.asm):01530 (4+1)           leax    9,x             2 bytes/backlink, 1/cksum, 6 bytes code offset
                      (        forth.asm):01531                 ELSE
                      (        forth.asm):01532                 leax    8,x             2 bytes/backlink, 6 bytes code offset
                      (        forth.asm):01533                 ENDC
EA78 A684             (        forth.asm):01534 (4+0)           lda     ,x
EA7A 8139             (        forth.asm):01535 (2)             cmpa    #RTSOPC         RTS inherent
EA7C 2705             (        forth.asm):01536 (3)             beq     @dosex1
EA7E C60E             (        forth.asm):01537 (2)             ldb     #14             No matching CREATE
EA80 BDE636           (        forth.asm):01538 (7)             jsr     ERRHDLR         No return
EA83 867E             (        forth.asm):01539 (2)     @dosex1 lda     #JMPOPC         JMP extended
EA85 A780             (        forth.asm):01540 (4+1)           sta     ,x+             Overwrite RTS opcode
EA87 3520             (        forth.asm):01541 (4+2)           puls    y
EA89 10AF84           (        forth.asm):01542 (6+0)           sty     ,x
EA8C 39               (        forth.asm):01543 (4)             rts
                      (        forth.asm):01544         
EA8D 87               (        forth.asm):01545         LITERAL fcb     $87             79-STANDARD (REQ215)
EA8E 4C49544552414C   (        forth.asm):01546                 fcc     'LITERAL'
EA95 EA60             (        forth.asm):01547                 fdb     DOES
EA97 C7               (        forth.asm):01548                 RFCS
EA98 BDE6BD           (        forth.asm):01549 (7)             jsr     NPOP
EA9B 0D21             (        forth.asm):01550 (4)             tst     USTATE+1
EA9D 2601             (        forth.asm):01551 (3)             bne     @comp
EA9F 39               (        forth.asm):01552 (4)             rts                     The standard defines no semantics in interp mode
EAA0 109E08           (        forth.asm):01553 (5)     @comp   ldy     DICEND
EAA3 868E             (        forth.asm):01554 (2)             lda     #LDXOPC         LDX immediate
EAA5 BDE471           (        forth.asm):01555 (7)             jsr     VARCON2         Compile LDX #X
EAA8 109F08           (        forth.asm):01556 (5)             sty     DICEND          Update HERE
EAAB 8EE6AF           (        forth.asm):01557 (3)             ldx     #NPUSH
EAAE 7EE14E           (        forth.asm):01558 (3)             jmp     EMXASXT         Set NPUSH as action component
                      (        forth.asm):01559         
                      (        forth.asm):01560         * Functionally: : CONSTANT CREATE , DOES> @ ;
                      (        forth.asm):01561         * The following code produces more compact code.
EAB1 08               (        forth.asm):01562         CONS    fcb     8               79-STANDARD (REQ185)
EAB2 434F4E5354414E54 (        forth.asm):01563                 fcc     'CONSTANT'
EABA EA8D             (        forth.asm):01564                 fdb     LITERAL
EABC C7               (        forth.asm):01565                 RFCS
EABD BDE6BD           (        forth.asm):01566 (7)             jsr     NPOP
EAC0 1F16             (        forth.asm):01567 (4)             tfr     x,w
EAC2 BDE3F8           (        forth.asm):01568 (7)             jsr     LOCWRT          Create dictionary entry
EAC5 1F61             (        forth.asm):01569 (4)             tfr     w,x
EAC7 868E             (        forth.asm):01570 (2)             lda     #LDXOPC         ldx immediate
EAC9 BDE471           (        forth.asm):01571 (7)             jsr     VARCON2         Compile LDX #CSTVAL
EACC BDE46C           (        forth.asm):01572 (7)             jsr     VARCON          Compile JMP NPUSH
                      (        forth.asm):01573                 IFNE    RELFEAT
EACF 8D87             (        forth.asm):01574 (6)             bsr     CREAT1
EAD1 2059             (        forth.asm):01575                 RFXT    bra,MONITOR+10  XT for MONITOR
                      (        forth.asm):01576                 ELSE
                      (        forth.asm):01577                 bra     CREAT1
                      (        forth.asm):01578                 ENDC
                      (        forth.asm):01579         
                      (        forth.asm):01580         * Functionally: : VARIABLE CREATE 2 ALLOT ;
                      (        forth.asm):01581         * However we can save three bytes per instance with the following code.
EAD3 08               (        forth.asm):01582         VARI    fcb     8               79-STANDARD (REQ227)
EAD4 5641524941424C45 (        forth.asm):01583                 fcc     'VARIABLE'
EADC EAB1             (        forth.asm):01584                 fdb     CONS
EADE C7               (        forth.asm):01585                 RFCS
EADF BDE3F8           (        forth.asm):01586 (7)             jsr     LOCWRT
EAE2 868E             (        forth.asm):01587 (2)             lda     #LDXOPC         ldx immediate
EAE4 A7A0             (        forth.asm):01588 (4+1)           sta     ,y+
EAE6 1F26             (        forth.asm):01589 (4)             tfr     y,w             Preserve Y (HERE)
EAE8 3125             (        forth.asm):01590 (4+1)           leay    5,y             Relative variable address
EAEA 1F21             (        forth.asm):01591 (4)             tfr     y,x
EAEC 1F62             (        forth.asm):01592 (4)             tfr     w,y             Restore Y (HERE)
EAEE AFA1             (        forth.asm):01593 (5+2)           stx     ,y++            Address field for LDX #VARADDR
EAF0 BDE46C           (        forth.asm):01594 (7)             jsr     VARCON          Compile JMP NPUSH
EAF3 3122             (        forth.asm):01595 (4+1)           leay    2,y             2 ALLOT
EAF5 7EEA58           (        forth.asm):01596 (3)             jmp     CREAT1
                      (        forth.asm):01597         
EAF8 09               (        forth.asm):01598         IMMED   fcb     9               79-STANDARD (REQ103)
EAF9 494D4D4544494154 (        forth.asm):01599                 fcc     'IMMEDIATE'
     45
EB02 EAD3             (        forth.asm):01600                 fdb     VARI
EB04 C7               (        forth.asm):01601                 RFCS
EB05 C680             (        forth.asm):01602 (2)             ldb     #IMDFLM
EB07 9E06             (        forth.asm):01603 (4)     IMMED1  ldx     LSTWAD
EB09 A684             (        forth.asm):01604 (4+0)           lda     ,x
EB0B 103598           (        forth.asm):01605 (4)             orr     b,a
EB0E A784             (        forth.asm):01606 (4+0)           sta     ,x
EB10 39               (        forth.asm):01607 (4)             rts
                      (        forth.asm):01608         
EB11 08               (        forth.asm):01609         RSTRCT  fcb     8               Non-standard (GNU Forth)
EB12 5245535452494354 (        forth.asm):01610                 fcc     'RESTRICT'      Make word available in compilation mode only
EB1A EAF8             (        forth.asm):01611                 fdb     IMMED
EB1C C7               (        forth.asm):01612                 RFCS
EB1D C640             (        forth.asm):01613 (2)             ldb     #DEFFLM
EB1F 20E6             (        forth.asm):01614 (3)             bra     IMMED1
                      (        forth.asm):01615         
                      (        forth.asm):01616                 IFNE    RELFEAT
                      (        forth.asm):01617         * This non-standard word enables checkum monitoring by ICHECK for the
                      (        forth.asm):01618         * last defined word in the dictionary. : words are monitored by default
                      (        forth.asm):01619         * and so are constants. CREATEd words require an explicit invokation of
                      (        forth.asm):01620         * MONITOR if they are to be checked for integrity.
EB21 07               (        forth.asm):01621         MONITOR fcb     7
EB22 4D4F4E49544F52   (        forth.asm):01622                 fcc     'MONITOR'       ( -- )
EB29 EB11             (        forth.asm):01623                 fdb     RSTRCT
EB2B C7               (        forth.asm):01624                 RFCS
EB2C 9E06             (        forth.asm):01625 (4)             ldx     LSTWAD          Last word header address
EB2E A684             (        forth.asm):01626 (4+0)           lda     ,x
EB30 8A20             (        forth.asm):01627 (2)             ora     #MONFLM         Set the monitored flag in the attribute field
EB32 A784             (        forth.asm):01628 (4+0)           sta     ,x
EB34 8D08             (        forth.asm):01629 (6)             bsr     HDRSKIP         Skip the header (XT to X), clear A
EB36 109E08           (        forth.asm):01630 (5)             ldy     DICEND          The upper code section limit (excluded)
EB39 8D0D             (        forth.asm):01631 (6)             bsr     HDRCSUM         Current word's definition's checksum to A
EB3B A71F             (        forth.asm):01632 (4+1)           sta     -1,x            Store the computed checksum into the header
EB3D 39               (        forth.asm):01633 (4)             rts
                      (        forth.asm):01634         
                      (        forth.asm):01635         * On entry, X has a word's header address. On return X has the compilation
                      (        forth.asm):01636         * address for that word (XT). A is cleared so as to initialize the checksum.
EB3E A684             (        forth.asm):01637 (4+0)   HDRSKIP lda     ,x              Word's header attribute byte to A
EB40 841F             (        forth.asm):01638 (2)             anda    #WRLNMSK        Extract the word's length
EB42 8B04             (        forth.asm):01639 (2)             adda    #4              1B attribute, 2B backlink, 1B checksum
EB44 3086             (        forth.asm):01640 (4+1)           leax    a,x             X has the word's XT. -1,X has the orig checksum
EB46 4F               (        forth.asm):01641 (1)             clra
EB47 39               (        forth.asm):01642 (4)             rts
                      (        forth.asm):01643         
                      (        forth.asm):01644         * On entry X has a word's compilation address (XT). A is supposed to have been
                      (        forth.asm):01645         * previously cleared. Y has the upper bound of the code section's address
                      (        forth.asm):01646         * (excluded). On return, A will have the word's code section's checksum.
                      (        forth.asm):01647         * X is preserved.
EB48 3410             (        forth.asm):01648 (4+2)   HDRCSUM pshs    x
EB4A A880             (        forth.asm):01649 (4+1)   @hdrcs1 eora    ,x+             Update the checksum
EB4C 103712           (        forth.asm):01650 (4)             cmpr    x,y             Upper bound reached?
EB4F 26F9             (        forth.asm):01651 (3)             bne     @hdrcs1         No. Process next byte in word's code section
EB51 3510             (        forth.asm):01652 (4+2)           puls    x
EB53 39               (        forth.asm):01653 (4)             rts
                      (        forth.asm):01654         
                      (        forth.asm):01655         * This non-standard word walks through the dictionary linked list and checks
                      (        forth.asm):01656         * that the words that have the MONFLM flag set in their header's attribute
                      (        forth.asm):01657         * field have a definition that still matches the checksum stored in the word's
                      (        forth.asm):01658         * header. This is meant to be used interactively, as a debugging tool, since
                      (        forth.asm):01659         * multitasking is not supported by this implementation. Therefore no status
                      (        forth.asm):01660         * value is returned. Feedback will only be provided for corrupted words, in
                      (        forth.asm):01661         * the form of a diagnostic message printed to the console.
EB54 06               (        forth.asm):01662         ICHECK  fcb     6
EB55 49434845434B     (        forth.asm):01663                 fcc     'ICHECK'        ( -- )
EB5B EB21             (        forth.asm):01664                 fdb     MONITOR
EB5D C7               (        forth.asm):01665                 RFCS
EB5E 109E08           (        forth.asm):01666 (5)             ldy     DICEND          Upper bound for the code of the last word (exc.)
EB61 9E06             (        forth.asm):01667 (4)             ldx     LSTWAD          LAST points to the header of the last word
EB63 3410             (        forth.asm):01668 (4+2)   @icklop pshs    x               Current word's header address
EB65 A684             (        forth.asm):01669 (4+0)           lda     ,x              Word's header attribute byte to A
EB67 8520             (        forth.asm):01670 (2)             bita    #MONFLM         Is this a monitored word?
EB69 2726             (        forth.asm):01671 (3)             beq     @icknxt         No. Point to the next word
EB6B 8DD1             (        forth.asm):01672 (6)             bsr     HDRSKIP         Skip the header (XT to X), clear A
EB6D 8DD9             (        forth.asm):01673 (6)             bsr     HDRCSUM         Current word's definition's checksum to A
EB6F A11F             (        forth.asm):01674 (4+1)           cmpa    -1,x            Does the checksum match the compile time value?
EB71 271E             (        forth.asm):01675 (3)             beq     @icknxt         Yes. Point to the next word
                      (        forth.asm):01676         * Current word's definition has been modified since its original definition!
EB73 BDE1E8           (        forth.asm):01677 (7)             jsr     PUTCR
EB76 AEE4             (        forth.asm):01678 (5+0)           ldx     ,s              Current word's header address
EB78 E680             (        forth.asm):01679 (4+1)           ldb     ,x+
EB7A C41F             (        forth.asm):01680 (2)             andb    #WRLNMSK
EB7C 4F               (        forth.asm):01681 (1)             clra
EB7D BDE6AF           (        forth.asm):01682 (7)             jsr     NPUSH           Word's name base address
EB80 1F01             (        forth.asm):01683 (4)             tfr     d,x
EB82 BDE6AF           (        forth.asm):01684 (7)             jsr     NPUSH           Byte count for TYPE
EB85 BDF5A3           (        forth.asm):01685                 RFXT    jsr,TYPE+7      XT for TYPE
EB88 BDF559           (        forth.asm):01686                 RFXT    jsr,SPACE+8     XT for SPACE
EB8B 8EEB9E           (        forth.asm):01687 (3)             ldx     #CSUMFLM
EB8E BDE1DB           (        forth.asm):01688 (7)             jsr     PUTS            Feedback for checksum failure
EB91 3510             (        forth.asm):01689 (4+2)   @icknxt puls    x               Current word's header address
EB93 1F12             (        forth.asm):01690 (4)             tfr     x,y             Point to the end of the previous word's code
EB95 8DA7             (        forth.asm):01691 (6)             bsr     HDRSKIP         Skip the header (XT to X), clear A
EB97 AE1D             (        forth.asm):01692 (5+1)           ldx     -3,x            Point to the previous header via the backlink
EB99 2702             (        forth.asm):01693 (3)             beq     @ickdon         We've just reached the end of the dictionary
EB9B 20C6             (        forth.asm):01694 (3)             bra     @icklop
EB9D 39               (        forth.asm):01695 (4)     @ickdon rts
                      (        forth.asm):01696         
EB9E 696E746567726974 (        forth.asm):01697         CSUMFLM fcn     'integrity check failed'
     7920636865636B20
     6661696C656400
                      (        forth.asm):01698                 ENDC                    RELFEAT enabled
                      (        forth.asm):01699         
EBB5 C2               (        forth.asm):01700         DO      fcb     $C2             79-STANDARD (REQ142)
EBB6 444F             (        forth.asm):01701                 fcc     'DO'
                      (        forth.asm):01702                 IFNE    RELFEAT
EBB8 EB54             (        forth.asm):01703                 fdb     ICHECK
                      (        forth.asm):01704                 ELSE
                      (        forth.asm):01705                 fdb     RSTRCT
                      (        forth.asm):01706                 ENDC
EBBA C7               (        forth.asm):01707                 RFCS
EBBB 9E08             (        forth.asm):01708 (4)             ldx     DICEND
EBBD 3003             (        forth.asm):01709 (4+1)           leax    3,x
EBBF BDE6CC           (        forth.asm):01710 (7)             jsr     RPUSH
EBC2 8EEBC8           (        forth.asm):01711 (3)             ldx     #DOEX
EBC5 7EE14E           (        forth.asm):01712 (3)             jmp     EMXASXT         Set as action component
                      (        forth.asm):01713         
EBC8 BDFBB8           (        forth.asm):01714         DOEX    RFXT    jsr,SWAP+7      XT for SWAP
EBCB BDEF4A           (        forth.asm):01715                 RFXT    jsr,TOR+5       XT for >R
EBCE 7EEF4A           (        forth.asm):01716                 RFXT    jmp,TOR+5       XT for >R
                      (        forth.asm):01717         
EBD1 C4               (        forth.asm):01718         LOOP    fcb     $C4             79-STANDARD (REQ124)
EBD2 4C4F4F50         (        forth.asm):01719                 fcc     'LOOP'
EBD6 EBB5             (        forth.asm):01720                 fdb     DO
EBD8 C7               (        forth.asm):01721                 RFCS
EBD9 8EEBF8           (        forth.asm):01722 (3)             ldx     #LOOPEX
EBDC 109E08           (        forth.asm):01723 (5)     LOOP1   ldy     DICEND
EBDF 86BD             (        forth.asm):01724 (2)             lda     #JSROPC         JSR extended
EBE1 BDE13A           (        forth.asm):01725 (7)             jsr     CHKRTS          Check if the final RTS can be omitted
EBE4 BDE471           (        forth.asm):01726 (7)             jsr     VARCON2
EBE7 8E2503           (        forth.asm):01727 (3)             ldx     #BCSOPC         Compile "BCS *+5"
EBEA AFA1             (        forth.asm):01728 (5+2)           stx     ,y++
EBEC BDE6EA           (        forth.asm):01729 (7)             jsr     RPOP
EBEF 867E             (        forth.asm):01730 (2)             lda     #JMPOPC
EBF1 BDE471           (        forth.asm):01731 (7)             jsr     VARCON2         Compile "JMP R@"
EBF4 109F08           (        forth.asm):01732 (5)             sty     DICEND          No action component
EBF7 39               (        forth.asm):01733 (4)             rts
                      (        forth.asm):01734         
EBF8 8E0001           (        forth.asm):01735 (3)     LOOPEX  ldx     #1
EBFB 2011             (        forth.asm):01736 (3)             bra     PLOPEX1
                      (        forth.asm):01737         
EBFD C5               (        forth.asm):01738         PLOOP   fcb     $C5             79-STANDARD (REQ141)
EBFE 2B4C4F4F50       (        forth.asm):01739                 fcc     '+LOOP'         The sign hdl reqs for REQ124 should apply though
EC03 EBD1             (        forth.asm):01740                 fdb     LOOP
EC05 C7               (        forth.asm):01741                 RFCS
EC06 8EEC0B           (        forth.asm):01742 (3)             ldx     #PLOOPEX
EC09 20D1             (        forth.asm):01743 (3)             bra     LOOP1
                      (        forth.asm):01744         
EC0B BDE6BD           (        forth.asm):01745 (7)     PLOOPEX jsr     NPOP
EC0E 1F16             (        forth.asm):01746 (4)     PLOPEX1 tfr     x,w             Increment to W
EC10 BDE6EA           (        forth.asm):01747 (7)             jsr     RPOP
EC13 1F12             (        forth.asm):01748 (4)             tfr     x,y             Index to Y
EC15 BDE6EA           (        forth.asm):01749 (7)             jsr     RPOP            Limit to X
EC18 103062           (        forth.asm):01750 (4)             addr    w,y             Update index
EC1B 114D             (        forth.asm):01751 (2)             tste
EC1D 2B10             (        forth.asm):01752 (3)             bmi     @neginc
EC1F 103721           (        forth.asm):01753 (4)             cmpr    y,x
EC22 2F12             (        forth.asm):01754 (3)             ble     @done           We're done. Return With CFLAG set
EC24 BDE6CC           (        forth.asm):01755 (7)     @iter   jsr     RPUSH           Push back the limit
EC27 1F21             (        forth.asm):01756 (4)             tfr     y,x
EC29 BDE6CC           (        forth.asm):01757 (7)             jsr     RPUSH           Push back the index
EC2C 1CFE             (        forth.asm):01758 (2)             andcc   #^CFLAG         Clear CFLAG
EC2E 39               (        forth.asm):01759 (4)             rts
EC2F 103721           (        forth.asm):01760 (4)     @neginc cmpr    y,x
EC32 27F0             (        forth.asm):01761 (3)             beq     @iter           79-STANDARD irregular historical precedent
EC34 2BEE             (        forth.asm):01762 (3)             bmi     @iter
EC36 1A01             (        forth.asm):01763 (2)     @done   orcc    #CFLAG          Set CFLAG
EC38 39               (        forth.asm):01764 (4)             rts
                      (        forth.asm):01765         
EC39 46               (        forth.asm):01766         UNLOOP  fcb     $46             ANSI (Core)
EC3A 554E4C4F4F50     (        forth.asm):01767                 fcc     'UNLOOP'
EC40 EBFD             (        forth.asm):01768                 fdb     PLOOP
EC42 C7               (        forth.asm):01769                 RFCS
EC43 BDE6EA           (        forth.asm):01770 (7)             jsr     RPOP            Drop the index from the return stack
EC46 7EE6EA           (        forth.asm):01771 (3)             jmp     RPOP            and the loop limit as well
                      (        forth.asm):01772         
EC49 C2               (        forth.asm):01773         IF      fcb     $C2             79-STANDARD (REQ210)
EC4A 4946             (        forth.asm):01774                 fcc     'IF'
EC4C EC39             (        forth.asm):01775                 fdb     UNLOOP
EC4E C7               (        forth.asm):01776                 RFCS
EC4F 109E08           (        forth.asm):01777 (5)             ldy     DICEND
EC52 8EEC71           (        forth.asm):01778 (3)             ldx     #IFEX
EC55 86BD             (        forth.asm):01779 (2)             lda     #JSROPC         JSR extended
EC57 BDE13A           (        forth.asm):01780 (7)             jsr     CHKRTS          Check if the final RTS can be omitted
EC5A BDE471           (        forth.asm):01781 (7)             jsr     VARCON2
EC5D 8E2603           (        forth.asm):01782 (3)             ldx     #BNEOPC         Compile "BNE *+5"
EC60 AFA1             (        forth.asm):01783 (5+2)           stx     ,y++
EC62 867E             (        forth.asm):01784 (2)             lda     #JMPOPC         JMP extended
EC64 A7A0             (        forth.asm):01785 (4+1)           sta     ,y+
EC66 1F21             (        forth.asm):01786 (4)             tfr     y,x
EC68 BDE6CC           (        forth.asm):01787 (7)             jsr     RPUSH
EC6B 3122             (        forth.asm):01788 (4+1)           leay    2,y             Reserve 2 bytes for the jump address
EC6D 109F08           (        forth.asm):01789 (5)             sty     DICEND
EC70 39               (        forth.asm):01790 (4)             rts
                      (        forth.asm):01791         
EC71 BDE6BD           (        forth.asm):01792 (7)     IFEX    jsr     NPOP
EC74 1037C1           (        forth.asm):01793 (4)             cmpr    0,x
EC77 39               (        forth.asm):01794 (4)             rts
                      (        forth.asm):01795         
                      (        forth.asm):01796         * Functionally equivalent to:
                      (        forth.asm):01797         * UNLESS ['] 0= COMPILE, POSTPONE IF ; IMMEDIATE RESTRICT
EC78 C6               (        forth.asm):01798         UNLESS  fcb     $C6             Non-standard (Perl inspired)
EC79 554E4C455353     (        forth.asm):01799                 fcc     'UNLESS'
EC7F EC49             (        forth.asm):01800                 fdb     IF
EC81 C7               (        forth.asm):01801                 RFCS
EC82 8EEDB5           (        forth.asm):01802                 RFXT    ldx,#NULP+5     XT for 0=
EC85 BDF0AA           (        forth.asm):01803 (7)             jsr     CMPCOM1
EC88 20C5             (        forth.asm):01804                 RFXT    bra,IF+5        XT for IF
                      (        forth.asm):01805         
EC8A C4               (        forth.asm):01806         ELSE    fcb     $C4             79-STANDARD (REQ167)
EC8B 454C5345         (        forth.asm):01807                 fcc     'ELSE'
EC8F EC78             (        forth.asm):01808                 fdb     UNLESS
EC91 C7               (        forth.asm):01809                 RFCS
EC92 109E08           (        forth.asm):01810 (5)             ldy     DICEND
EC95 867E             (        forth.asm):01811 (2)             lda     #JMPOPC         JMP extended
EC97 A7A0             (        forth.asm):01812 (4+1)           sta     ,y+
EC99 3122             (        forth.asm):01813 (4+1)           leay    2,y
EC9B 109F08           (        forth.asm):01814 (5)             sty     DICEND
EC9E BDE6EA           (        forth.asm):01815 (7)             jsr     RPOP
ECA1 10AF84           (        forth.asm):01816 (6+0)           sty     ,x              Set actual ELSE jump address
ECA4 1F21             (        forth.asm):01817 (4)             tfr     y,x
ECA6 301E             (        forth.asm):01818 (4+1)           leax    -2,x
ECA8 7EE6CC           (        forth.asm):01819 (3)             jmp     RPUSH
                      (        forth.asm):01820         
ECAB C4               (        forth.asm):01821         THEN    fcb     $C4             79-STANDARD (REQ161)
ECAC 5448454E         (        forth.asm):01822                 fcc     'THEN'
ECB0 EC8A             (        forth.asm):01823                 fdb     ELSE
ECB2 C7               (        forth.asm):01824                 RFCS
ECB3 109E08           (        forth.asm):01825 (5)             ldy     DICEND
ECB6 BDE6EA           (        forth.asm):01826 (7)             jsr     RPOP
ECB9 10AF84           (        forth.asm):01827 (6+0)           sty     ,x
ECBC 39               (        forth.asm):01828 (4)             rts
                      (        forth.asm):01829         
ECBD 01               (        forth.asm):01830         EQ      fcb     1               79-STANDARD (REQ173)
ECBE 3D               (        forth.asm):01831                 fcc     '='             ( N1 N2 -- FLAG )
ECBF ECAB             (        forth.asm):01832                 fdb     THEN
ECC1 C7               (        forth.asm):01833                 RFCS
ECC2 CC0246BDE336     (        forth.asm):01834                 MINDREQ 2
ECC8 10ECC4           (        forth.asm):01835 (8+0)           ldq     ,u              D:W has N2:N1
ECCB 3342             (        forth.asm):01836 (4+1)           leau    2,u             Drop one cell from the user stack
ECCD 1FC1             (        forth.asm):01837 (4)             tfr     0,x
ECCF 103760           (        forth.asm):01838 (4)             cmpr    w,d
ECD2 2602             (        forth.asm):01839 (3)             bne     @eq1
ECD4 3001             (        forth.asm):01840 (4+1)           leax    1,x
ECD6 AFC4             (        forth.asm):01841 (5+0)   @eq1    stx     ,u              Store in place to FLAG
ECD8 39               (        forth.asm):01842 (4)             rts
                      (        forth.asm):01843         
ECD9 02               (        forth.asm):01844         DIFF    fcb     2               79-STANDARD (REF)
ECDA 3C3E             (        forth.asm):01845                 fcc     '<>'            ( N1 N2 -- FLAG )
ECDC ECBD             (        forth.asm):01846                 fdb     EQ
ECDE C7               (        forth.asm):01847                 RFCS
ECDF CC0246BDE336     (        forth.asm):01848                 MINDREQ 2
ECE5 10ECC4           (        forth.asm):01849 (8+0)           ldq     ,u              D:W has N2:N1
ECE8 3342             (        forth.asm):01850 (4+1)           leau    2,u             Drop one cell from the user stack
ECEA 1FC1             (        forth.asm):01851 (4)             tfr     0,x
ECEC 103760           (        forth.asm):01852 (4)             cmpr    w,d
ECEF 2702             (        forth.asm):01853 (3)             beq     @diff1
ECF1 3001             (        forth.asm):01854 (4+1)           leax    1,x
ECF3 AFC4             (        forth.asm):01855 (5+0)   @diff1  stx     ,u              Store in place to FLAG
ECF5 39               (        forth.asm):01856 (4)             rts
                      (        forth.asm):01857         
ECF6 02               (        forth.asm):01858         SINFEQ  fcb     2               Non-standard (Not even ANSI!)
ECF7 3C3D             (        forth.asm):01859                 fcc     '<='            Required for the ORNL fixed sieve benchmark
ECF9 ECD9             (        forth.asm):01860                 fdb     DIFF
ECFB C7               (        forth.asm):01861                 RFCS
ECFC CC0246BDE336     (        forth.asm):01862                 MINDREQ 2               At least two cells need to be stacked up
ED02 10AEC4           (        forth.asm):01863 (6+0)           ldy     ,u
ED05 AE42             (        forth.asm):01864 (5+1)           ldx     2,u
ED07 104F             (        forth.asm):01865 (2)             clrd
ED09 103721           (        forth.asm):01866 (4)             cmpr    y,x
ED0C 2E02             (        forth.asm):01867 (3)             bgt     @sinfq1
ED0E 104C             (        forth.asm):01868 (2)             incd
ED10 3342             (        forth.asm):01869 (4+1)   @sinfq1 leau    2,u             Drop one cell
ED12 EDC4             (        forth.asm):01870 (5+0)           std     ,u
ED14 39               (        forth.asm):01871 (4)             rts
                      (        forth.asm):01872         
                      (        forth.asm):01873                 IFNE    DEBUG
ED15                  (        forth.asm):01874         CC      fcb     2               Non-standard. Used for debugging
                      (        forth.asm):01875                 fcc     'CC'
                      (        forth.asm):01876                 fdb     SINFEQ
                      (        forth.asm):01877                 RFCS
                      (        forth.asm):01878                 ldx     CCREG
                      (        forth.asm):01879                 jmp     NPUSH
                      (        forth.asm):01880                 ENDC
                      (        forth.asm):01881         
ED15 03               (        forth.asm):01882         XOR     fcb     3               79-STANDARD (REQ179)
ED16 584F52           (        forth.asm):01883                 fcc     'XOR'
                      (        forth.asm):01884                 IFNE    DEBUG
                      (        forth.asm):01885                 fdb     CC
                      (        forth.asm):01886                 ELSE
ED19 ECF6             (        forth.asm):01887                 fdb     SINFEQ
                      (        forth.asm):01888                 ENDC
ED1B C7               (        forth.asm):01889                 RFCS
ED1C CC0246BDE336     (        forth.asm):01890                 MINDREQ 2
ED22 ECC4             (        forth.asm):01891 (5+0)           ldd     ,u
ED24 10A642           (        forth.asm):01892 (6+1)           ldw     2,u
ED27 103660           (        forth.asm):01893 (4)             eorr    w,d
ED2A 3342             (        forth.asm):01894 (4+1)   XOR1    leau    2,u
ED2C EDC4             (        forth.asm):01895 (5+0)           std     ,u
ED2E 39               (        forth.asm):01896 (4)             rts
                      (        forth.asm):01897         
ED2F 02               (        forth.asm):01898         OR      fcb     2               79-STANDARD (REQ223)
ED30 4F52             (        forth.asm):01899                 fcc     'OR'
ED32 ED15             (        forth.asm):01900                 fdb     XOR
ED34 C7               (        forth.asm):01901                 RFCS
ED35 CC0246BDE336     (        forth.asm):01902                 MINDREQ 2
ED3B ECC4             (        forth.asm):01903 (5+0)           ldd     ,u
ED3D 10A642           (        forth.asm):01904 (6+1)           ldw     2,u
ED40 103560           (        forth.asm):01905 (4)             orr     w,d
ED43 20E5             (        forth.asm):01906 (3)             bra     XOR1
                      (        forth.asm):01907         
ED45 03               (        forth.asm):01908         AND     fcb     3               79-STANDARD (REQ183)
ED46 414E44           (        forth.asm):01909                 fcc     'AND'
ED49 ED2F             (        forth.asm):01910                 fdb     OR
ED4B C7               (        forth.asm):01911                 RFCS
ED4C CC0246BDE336     (        forth.asm):01912                 MINDREQ 2
ED52 ECC4             (        forth.asm):01913 (5+0)           ldd     ,u
ED54 10A642           (        forth.asm):01914 (6+1)           ldw     2,u
ED57 103460           (        forth.asm):01915 (4)             andr    w,d
ED5A 20CE             (        forth.asm):01916 (3)             bra     XOR1
                      (        forth.asm):01917         
ED5C 03               (        forth.asm):01918         COM     fcb     3               79-STANDARD (REF)
ED5D 434F4D           (        forth.asm):01919                 fcc     'COM'
ED60 ED45             (        forth.asm):01920                 fdb     AND
ED62 C7               (        forth.asm):01921                 RFCS
ED63 BDE6BD           (        forth.asm):01922 (7)     COM0    jsr     NPOP
ED66 1F10             (        forth.asm):01923 (4)             tfr     x,d
ED68 1043             (        forth.asm):01924 (2)             comd
ED6A 1F01             (        forth.asm):01925 (4)             tfr     d,x
ED6C 3610             (        forth.asm):01926                 UCNPUSH
ED6E 39               (        forth.asm):01927 (4)             rts
                      (        forth.asm):01928         
ED6F 06               (        forth.asm):01929         INVERT  fcb     6               ANSI (Core)
ED70 494E56455254     (        forth.asm):01930                 fcc     'INVERT'
ED76 ED5C             (        forth.asm):01931                 fdb     COM
ED78 C7               (        forth.asm):01932                 RFCS
ED79 20E8             (        forth.asm):01933 (3)             bra     COM0
                      (        forth.asm):01934         
ED7B 02               (        forth.asm):01935         ZGREAT  fcb     2               79-STANDARD (REQ118)
ED7C 303E             (        forth.asm):01936                 fcc     '0>'
ED7E ED6F             (        forth.asm):01937                 fdb     INVERT
ED80 C7               (        forth.asm):01938                 RFCS
ED81 BDE6BD           (        forth.asm):01939 (7)             jsr     NPOP
ED84 1F10             (        forth.asm):01940 (4)             tfr     x,d
ED86 104D             (        forth.asm):01941 (2)             tstd
ED88 2F06             (        forth.asm):01942 (3)             ble     @zgrt1
ED8A 8E0001           (        forth.asm):01943 (3)             ldx     #1
ED8D 3610             (        forth.asm):01944                 UCNPUSH
ED8F 39               (        forth.asm):01945 (4)             rts
ED90 1FC1             (        forth.asm):01946 (4)     @zgrt1  tfr     0,x
ED92 3610             (        forth.asm):01947                 UCNPUSH
ED94 39               (        forth.asm):01948 (4)             rts
                      (        forth.asm):01949         
ED95 02               (        forth.asm):01950         ZLESS   fcb     2               79-STANDARD (REQ144)
ED96 303C             (        forth.asm):01951                 fcc     '0<'
ED98 ED7B             (        forth.asm):01952                 fdb     ZGREAT
ED9A C7               (        forth.asm):01953                 RFCS
ED9B BDE6BD           (        forth.asm):01954 (7)             jsr     NPOP
ED9E 1F10             (        forth.asm):01955 (4)             tfr     x,d
EDA0 104D             (        forth.asm):01956 (2)             tstd
EDA2 2C06             (        forth.asm):01957 (3)             bge     @zlss1
EDA4 8E0001           (        forth.asm):01958 (3)             ldx     #1
EDA7 3610             (        forth.asm):01959                 UCNPUSH
EDA9 39               (        forth.asm):01960 (4)             rts
EDAA 1FC1             (        forth.asm):01961 (4)     @zlss1  tfr     0,x
EDAC 3610             (        forth.asm):01962                 UCNPUSH
EDAE 39               (        forth.asm):01963 (4)             rts
                      (        forth.asm):01964         
EDAF 02               (        forth.asm):01965         NULP    fcb     2               79-STANDARD (REQ180)
EDB0 303D             (        forth.asm):01966                 fcc     '0='
EDB2 ED95             (        forth.asm):01967                 fdb     ZLESS
EDB4 C7               (        forth.asm):01968                 RFCS
EDB5 BDE6BD           (        forth.asm):01969 (7)             jsr     NPOP
EDB8 1F10             (        forth.asm):01970 (4)             tfr     x,d
EDBA 1FC1             (        forth.asm):01971 (4)             tfr     0,x
EDBC 104D             (        forth.asm):01972 (2)             tstd
EDBE 2703             (        forth.asm):01973 (3)             beq     @nulp2
EDC0 3610             (        forth.asm):01974         @nulp1  UCNPUSH
EDC2 39               (        forth.asm):01975 (4)             rts
EDC3 3001             (        forth.asm):01976 (4+1)   @nulp2  leax    1,x
EDC5 20F9             (        forth.asm):01977 (3)             bra     @nulp1
                      (        forth.asm):01978         
EDC7 03               (        forth.asm):01979         NOT     fcb     3               79-STANDARD (REQ165)
EDC8 4E4F54           (        forth.asm):01980                 fcc     'NOT'
EDCB EDAF             (        forth.asm):01981                 fdb     NULP
EDCD C7               (        forth.asm):01982                 RFCS
EDCE 20E5             (        forth.asm):01983                 RFXT    bra,NULP+5      XT for 0=
                      (        forth.asm):01984         
EDD0 02               (        forth.asm):01985         USUP    fcb     2               ANSI (Core Ext)
EDD1 553E             (        forth.asm):01986                 fcc     'U>'
EDD3 EDC7             (        forth.asm):01987                 fdb     NOT
EDD5 C7               (        forth.asm):01988                 RFCS
EDD6 BDE476           (        forth.asm):01989 (7)             jsr     CMP2
EDD9 2302             (        forth.asm):01990 (3)             bls     @usup1
EDDB 3001             (        forth.asm):01991 (4+1)           leax    1,x
EDDD 3610             (        forth.asm):01992         @usup1  UCNPUSH
EDDF 39               (        forth.asm):01993 (4)             rts
                      (        forth.asm):01994         
EDE0 02               (        forth.asm):01995         UINF    fcb     2               79-STANDARD (REQ150)
EDE1 553C             (        forth.asm):01996                 fcc     'U<'
EDE3 EDD0             (        forth.asm):01997                 fdb     USUP
EDE5 C7               (        forth.asm):01998                 RFCS
EDE6 BDE476           (        forth.asm):01999 (7)             jsr     CMP2
EDE9 2402             (        forth.asm):02000 (3)             bhs     @uinf1          Z is set
EDEB 3001             (        forth.asm):02001 (4+1)           leax    1,x
EDED 3610             (        forth.asm):02002         @uinf1  UCNPUSH
EDEF 39               (        forth.asm):02003 (4)             rts
                      (        forth.asm):02004         
                      (        forth.asm):02005         * Functionally: : WITHIN OVER - >R - R> U< ;
EDF0 06               (        forth.asm):02006         WITHIN  fcb     6               ANSI (Core)
EDF1 57495448494E     (        forth.asm):02007                 fcc     'WITHIN'        ( n1 n2 n3 -- flag )
EDF7 EDE0             (        forth.asm):02008                 fdb     UINF
EDF9 C7               (        forth.asm):02009                 RFCS
EDFA BDFC01           (        forth.asm):02010                 RFXT    jsr,OVER+7      XT for OVER
EDFD BDF77C           (        forth.asm):02011                 RFXT    jsr,MINUS+4     XT for -
EE00 BDEF4A           (        forth.asm):02012                 RFXT    jsr,TOR+5       XT for >R
EE03 BDF77C           (        forth.asm):02013                 RFXT    jsr,MINUS+4     XT for -
EE06 BDEF3E           (        forth.asm):02014                 RFXT    jsr,RFROM+5     XT for R>
EE09 20DB             (        forth.asm):02015                 RFXT    bra,UINF+5      XT for U<
                      (        forth.asm):02016         
EE0B 01               (        forth.asm):02017         SUP     fcb     1               79-STANDARD (REQ102)
EE0C 3E               (        forth.asm):02018                 fcc     '>'
EE0D EDF0             (        forth.asm):02019                 fdb     WITHIN
EE0F C7               (        forth.asm):02020                 RFCS
EE10 BDE476           (        forth.asm):02021 (7)             jsr     CMP2
EE13 2F02             (        forth.asm):02022 (3)             ble     @sup1
EE15 3001             (        forth.asm):02023 (4+1)           leax    1,x
EE17 3610             (        forth.asm):02024         @sup1   UCNPUSH
EE19 39               (        forth.asm):02025 (4)             rts
                      (        forth.asm):02026         
EE1A 01               (        forth.asm):02027         INF     fcb     1               79-STANDARD (REQ139)
EE1B 3C               (        forth.asm):02028                 fcc     '<'
EE1C EE0B             (        forth.asm):02029                 fdb     SUP
EE1E C7               (        forth.asm):02030                 RFCS
EE1F BDE476           (        forth.asm):02031 (7)             jsr     CMP2
EE22 2C02             (        forth.asm):02032 (3)             bge     @inf1
EE24 3001             (        forth.asm):02033 (4+1)           leax    1,x
EE26 3610             (        forth.asm):02034         @inf1   UCNPUSH
EE28 39               (        forth.asm):02035 (4)             rts
                      (        forth.asm):02036         
EE29 03               (        forth.asm):02037         MAX     fcb     3               79-STANDARD (REQ218)
EE2A 4D4158           (        forth.asm):02038                 fcc     'MAX'
EE2D EE1A             (        forth.asm):02039                 fdb     INF
EE2F C7               (        forth.asm):02040                 RFCS
EE30 BDE6BD           (        forth.asm):02041 (7)             jsr     NPOP
EE33 1F12             (        forth.asm):02042 (4)             tfr     x,y
EE35 BDE6BD           (        forth.asm):02043 (7)             jsr     NPOP
EE38 103721           (        forth.asm):02044 (4)             cmpr    y,x
EE3B 2C02             (        forth.asm):02045 (3)             bge     @pshrv1
EE3D 1F21             (        forth.asm):02046 (4)             tfr     y,x
EE3F 3610             (        forth.asm):02047         @pshrv1 UCNPUSH
EE41 39               (        forth.asm):02048 (4)             rts
                      (        forth.asm):02049         
EE42 03               (        forth.asm):02050         MIN     fcb     3               79-STANDARD (REQ127)
EE43 4D494E           (        forth.asm):02051                 fcc     'MIN'
EE46 EE29             (        forth.asm):02052                 fdb     MAX
EE48 C7               (        forth.asm):02053                 RFCS
EE49 BDE6BD           (        forth.asm):02054 (7)             jsr     NPOP
EE4C 1F12             (        forth.asm):02055 (4)             tfr     x,y
EE4E BDE6BD           (        forth.asm):02056 (7)             jsr     NPOP
EE51 103721           (        forth.asm):02057 (4)             cmpr    y,x
EE54 2F02             (        forth.asm):02058 (3)             ble     @pshrv2
EE56 1F21             (        forth.asm):02059 (4)             tfr     y,x
EE58 3610             (        forth.asm):02060         @pshrv2 UCNPUSH
EE5A 39               (        forth.asm):02061 (4)             rts
                      (        forth.asm):02062         
EE5B 03               (        forth.asm):02063         ABS     fcb     3               79-STANDARD (REQ108)
EE5C 414253           (        forth.asm):02064                 fcc     'ABS'
EE5F EE42             (        forth.asm):02065                 fdb     MIN
EE61 C7               (        forth.asm):02066                 RFCS
EE62 BDE6BD           (        forth.asm):02067 (7)             jsr     NPOP
EE65 1F10             (        forth.asm):02068 (4)             tfr     x,d
EE67 104D             (        forth.asm):02069 (2)             tstd
EE69 2A04             (        forth.asm):02070 (3)             bpl     @abs1
EE6B 1040             (        forth.asm):02071 (2)             negd
EE6D 1F01             (        forth.asm):02072 (4)             tfr     d,x
EE6F 3610             (        forth.asm):02073         @abs1   UCNPUSH
EE71 39               (        forth.asm):02074 (4)             rts
                      (        forth.asm):02075         
EE72 06               (        forth.asm):02076         NEGATE  fcb     6               79-STANDARD (REQ177)
EE73 4E4547415445     (        forth.asm):02077                 fcc     'NEGATE'
EE79 EE5B             (        forth.asm):02078                 fdb     ABS
EE7B C7               (        forth.asm):02079                 RFCS
EE7C CC0248BDE336     (        forth.asm):02080                 MINDREQ 1               One cell needs to be stacked up
EE82 ECC4             (        forth.asm):02081 (5+0)           ldd     ,u
EE84 1040             (        forth.asm):02082 (2)             negd
EE86 EDC4             (        forth.asm):02083 (5+0)           std     ,u
EE88 39               (        forth.asm):02084 (4)             rts
                      (        forth.asm):02085         
EE89 C5               (        forth.asm):02086         BEGIN   fcb     $C5             79-STANDARD (REQ147)
EE8A 424547494E       (        forth.asm):02087                 fcc     'BEGIN'
EE8F EE72             (        forth.asm):02088                 fdb     NEGATE
EE91 C7               (        forth.asm):02089                 RFCS
EE92 9E08             (        forth.asm):02090 (4)             ldx     DICEND
EE94 7EE6CC           (        forth.asm):02091 (3)             jmp     RPUSH
                      (        forth.asm):02092         
EE97 C5               (        forth.asm):02093         AGAIN   fcb     $C5             79-STANDARD (REF114)
EE98 414741494E       (        forth.asm):02094                 fcc     'AGAIN'
EE9D EE89             (        forth.asm):02095                 fdb     BEGIN
EE9F C7               (        forth.asm):02096                 RFCS
EEA0 BDE6EA           (        forth.asm):02097 (7)             jsr     RPOP
EEA3 1F12             (        forth.asm):02098 (4)             tfr     x,y
EEA5 9E08             (        forth.asm):02099 (4)             ldx     DICEND
EEA7 867E             (        forth.asm):02100 (2)             lda     #JMPOPC         JMP extended
EEA9 A780             (        forth.asm):02101 (4+1)           sta     ,x+
EEAB 10AF81           (        forth.asm):02102 (6+2)           sty     ,x++
EEAE 9F08             (        forth.asm):02103 (4)             stx     DICEND
EEB0 8602             (        forth.asm):02104 (2)             lda     #2
EEB2 972C             (        forth.asm):02105 (3)             sta     RTSREMV         Trigger the RTS removal optimization
EEB4 39               (        forth.asm):02106 (4)             rts
                      (        forth.asm):02107         
                      (        forth.asm):02108         # The standard does not require this as being immediate but I do.
EEB5 C4               (        forth.asm):02109         EXIT    fcb     $C4             79-STANDARD (REQ117)
EEB6 45584954         (        forth.asm):02110                 fcc     'EXIT'
EEBA EE97             (        forth.asm):02111                 fdb     AGAIN
EEBC C7               (        forth.asm):02112                 RFCS
EEBD 9E08             (        forth.asm):02113 (4)             ldx     DICEND
EEBF 301D             (        forth.asm):02114 (4+1)           leax    -3,x
EEC1 109E14           (        forth.asm):02115 (5)             ldy     JSRLAST
EEC4 103721           (        forth.asm):02116 (4)             cmpr    y,x
EEC7 2605             (        forth.asm):02117 (3)             bne     @noopt          Tail JMP optimization is not possible
EEC9 867E             (        forth.asm):02118 (2)             lda     #JMPOPC         JMP extended
EECB A784             (        forth.asm):02119 (4+0)           sta     ,x
EECD 39               (        forth.asm):02120 (4)             rts
EECE 3003             (        forth.asm):02121 (4+1)   @noopt  leax    3,x             Point back to HERE
EED0 8639             (        forth.asm):02122 (2)             lda     #RTSOPC         RTS inherent
EED2 A780             (        forth.asm):02123 (4+1)           sta     ,x+
EED4 9F08             (        forth.asm):02124 (4)             stx     DICEND
EED6 39               (        forth.asm):02125 (4)             rts
                      (        forth.asm):02126         
EED7 C5               (        forth.asm):02127         UNTIL   fcb     $C5             79-STANDARD (REQ237)
EED8 554E54494C       (        forth.asm):02128                 fcc     'UNTIL'
EEDD EEB5             (        forth.asm):02129                 fdb     EXIT
EEDF C7               (        forth.asm):02130                 RFCS
EEE0 109E08           (        forth.asm):02131 (5)             ldy     DICEND
EEE3 86BD             (        forth.asm):02132 (2)             lda     #JSROPC         JSR extended
EEE5 8EEC71           (        forth.asm):02133 (3)             ldx     #IFEX
EEE8 BDE13A           (        forth.asm):02134 (7)             jsr     CHKRTS          Check if the final RTS can be omitted
EEEB BDE471           (        forth.asm):02135 (7)             jsr     VARCON2
EEEE 8E2603           (        forth.asm):02136 (3)             ldx     #BNEOPC         Compile "BNE *+5"
EEF1 AFA1             (        forth.asm):02137 (5+2)           stx     ,y++
EEF3 867E             (        forth.asm):02138 (2)             lda     #JMPOPC         JMP extended
EEF5 A7A0             (        forth.asm):02139 (4+1)           sta     ,y+
EEF7 BDE6EA           (        forth.asm):02140 (7)             jsr     RPOP
EEFA AFA1             (        forth.asm):02141 (5+2)           stx     ,y++
EEFC 109F08           (        forth.asm):02142 (5)             sty     DICEND
EEFF 39               (        forth.asm):02143 (4)             rts
                      (        forth.asm):02144         
EF00 C3               (        forth.asm):02145         END     fcb     $C3             79-STANDARD (REF224)
EF01 454E44           (        forth.asm):02146                 fcc     'END'
EF04 EED7             (        forth.asm):02147                 fdb     UNTIL
EF06 C7               (        forth.asm):02148                 RFCS
EF07 20D7             (        forth.asm):02149                 RFXT    bra,UNTIL+8     XT for UNTIL
                      (        forth.asm):02150         
EF09 C5               (        forth.asm):02151         WHILE   fcb     $C5             79-STANDARD (REQ149)
EF0A 5748494C45       (        forth.asm):02152                 fcc     'WHILE'
EF0F EF00             (        forth.asm):02153                 fdb     END
EF11 C7               (        forth.asm):02154                 RFCS
EF12 7EEC4F           (        forth.asm):02155                 RFXT    jmp,IF+5        XT for IF
                      (        forth.asm):02156         
EF15 C6               (        forth.asm):02157         REPEAT  fcb     $C6             79-STANDARD (REQ120)
EF16 524550454154     (        forth.asm):02158                 fcc     'REPEAT'
EF1C EF09             (        forth.asm):02159                 fdb     WHILE
EF1E C7               (        forth.asm):02160                 RFCS
EF1F BDE6EA           (        forth.asm):02161 (7)             jsr     RPOP
EF22 3410             (        forth.asm):02162 (4+2)           pshs    x
EF24 BDE6EA           (        forth.asm):02163 (7)             jsr     RPOP
EF27 109E08           (        forth.asm):02164 (5)             ldy     DICEND
EF2A 867E             (        forth.asm):02165 (2)             lda     #JMPOPC         JMP extended
EF2C BDE471           (        forth.asm):02166 (7)             jsr     VARCON2
EF2F 3510             (        forth.asm):02167 (4+2)           puls    x
EF31 10AF84           (        forth.asm):02168 (6+0)           sty     ,x
EF34 109F08           (        forth.asm):02169 (5)             sty     DICEND
EF37 39               (        forth.asm):02170 (4)             rts
                      (        forth.asm):02171         
EF38 42               (        forth.asm):02172         RFROM   fcb     $42             79-STANDARD (REQ110)
EF39 523E             (        forth.asm):02173                 fcc     'R>'
EF3B EF15             (        forth.asm):02174                 fdb     REPEAT
EF3D C7               (        forth.asm):02175                 RFCS
EF3E BDE6EA           (        forth.asm):02176 (7)             jsr     RPOP
EF41 7EE6AF           (        forth.asm):02177 (3)             jmp     NPUSH
                      (        forth.asm):02178         
EF44 42               (        forth.asm):02179         TOR     fcb     $42             79-STANDARD (REQ200)
EF45 3E52             (        forth.asm):02180                 fcc     '>R'
EF47 EF38             (        forth.asm):02181                 fdb     RFROM
EF49 C7               (        forth.asm):02182                 RFCS
EF4A BDE6BD           (        forth.asm):02183 (7)             jsr     NPOP
EF4D 7EE6CC           (        forth.asm):02184 (3)             jmp     RPUSH
                      (        forth.asm):02185         
EF50 45               (        forth.asm):02186         LEAVE   fcb     $45             79-STANDARD (REQ213)
EF51 4C45415645       (        forth.asm):02187                 fcc     'LEAVE'
EF56 EF44             (        forth.asm):02188                 fdb     TOR
EF58 C7               (        forth.asm):02189                 RFCS
EF59 BDE6EA           (        forth.asm):02190 (7)             jsr     RPOP
EF5C BDE6EA           (        forth.asm):02191 (7)             jsr     RPOP
EF5F BDE6CC           (        forth.asm):02192 (7)             jsr     RPUSH
EF62 7EE6CC           (        forth.asm):02193 (3)             jmp     RPUSH
                      (        forth.asm):02194         
EF65 41               (        forth.asm):02195         INDI    fcb     $41             79-STANDARD (REQ136)
EF66 49               (        forth.asm):02196                 fcc     'I'
EF67 EF50             (        forth.asm):02197                 fdb     LEAVE
EF69 C7               (        forth.asm):02198                 RFCS
EF6A C601             (        forth.asm):02199 (2)             ldb     #1              1 means top of the stack
EF6C 962A             (        forth.asm):02200 (3)     RPICKN  lda     RDEPTH
EF6E 103798           (        forth.asm):02201 (4)             cmpr    b,a
EF71 250A             (        forth.asm):02202 (3)             bcs     @rpick1
EF73 9E00             (        forth.asm):02203 (4)             ldx     RSP
EF75 5A               (        forth.asm):02204 (1)             decb                    Minus 1, unlike in the Z80 implementation
EF76 58               (        forth.asm):02205 (1)             lslb                    Times 2
EF77 3A               (        forth.asm):02206 (1)             abx
EF78 AE84             (        forth.asm):02207 (5+0)           ldx     ,x
EF7A 7EE6AF           (        forth.asm):02208 (3)             jmp     NPUSH
EF7D C608             (        forth.asm):02209 (2)     @rpick1 ldb     #8              Return stack underflow
EF7F BDE636           (        forth.asm):02210 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02211         
EF82 42               (        forth.asm):02212         RFETCH  fcb     $42             79-STANDARD (REQ228)
EF83 5240             (        forth.asm):02213                 fcc     'R@'
EF85 EF65             (        forth.asm):02214                 fdb     INDI
EF87 C7               (        forth.asm):02215                 RFCS
EF88 20E0             (        forth.asm):02216                 RFXT    bra,INDI+4      XT for I
                      (        forth.asm):02217         
EF8A 42               (        forth.asm):02218         INDIP   fcb     $42             79-STANDARD (REF)
EF8B 4927             (        forth.asm):02219                 fdb     $4927
EF8D EF82             (        forth.asm):02220                 fdb     RFETCH
EF8F C7               (        forth.asm):02221                 RFCS
EF90 C602             (        forth.asm):02222 (2)             ldb     #2
EF92 20D8             (        forth.asm):02223 (3)             bra     RPICKN
                      (        forth.asm):02224         
EF94 41               (        forth.asm):02225         INDJ    fcb     $41             79-STANDARD (REQ225)
EF95 4A               (        forth.asm):02226                 fcc     'J'
EF96 EF8A             (        forth.asm):02227                 fdb     INDIP
EF98 C7               (        forth.asm):02228                 RFCS
EF99 C603             (        forth.asm):02229 (2)             ldb     #3
EF9B 20CF             (        forth.asm):02230 (3)             bra     RPICKN
                      (        forth.asm):02231         
EF9D 42               (        forth.asm):02232         INDJP   fcb     $42             Non-standard
EF9E 4A27             (        forth.asm):02233                 fdb     $4A27
EFA0 EF94             (        forth.asm):02234                 fdb     INDJ
EFA2 C7               (        forth.asm):02235                 RFCS
EFA3 C604             (        forth.asm):02236 (2)             ldb     #4
EFA5 20C5             (        forth.asm):02237 (3)             bra     RPICKN
                      (        forth.asm):02238         
EFA7 41               (        forth.asm):02239         INDK    fcb     $41             79-STANDARD (REF)
EFA8 4B               (        forth.asm):02240                 fcc     'K'
EFA9 EF9D             (        forth.asm):02241                 fdb     INDJP
EFAB C7               (        forth.asm):02242                 RFCS
EFAC C605             (        forth.asm):02243 (2)             ldb     #5
EFAE 20BC             (        forth.asm):02244 (3)             bra     RPICKN
                      (        forth.asm):02245         
EFB0 04               (        forth.asm):02246         QUIT    fcb     4               79-STANDARD (REQ211)
EFB1 51554954         (        forth.asm):02247                 fcc     'QUIT'
EFB5 EFA7             (        forth.asm):02248                 fdb     INDK
EFB7 C7               (        forth.asm):02249                 RFCS
EFB8 0F21             (        forth.asm):02250 (5)             clr     USTATE+1
EFBA BDEA18           (        forth.asm):02251                 RFXT    jsr,RCLR+7      XT for RCLR
EFBD 10CE8000         (        forth.asm):02252 (4)             lds     #RAMSTRT+RAMSIZE Reset the system stack pointer
EFC1 BDE1E8           (        forth.asm):02253 (7)             jsr     PUTCR
EFC4 7EE0A8           (        forth.asm):02254 (3)             jmp     INTERP
                      (        forth.asm):02255         
EFC7 05               (        forth.asm):02256         ABORT   fcb     5               79-STANDARD (REQ101)
EFC8 41424F5254       (        forth.asm):02257                 fcc     'ABORT'
EFCD EFB0             (        forth.asm):02258                 fdb     QUIT
EFCF C7               (        forth.asm):02259                 RFCS
EFD0 BDEA0C           (        forth.asm):02260                 RFXT    jsr,NCLR+7      XT for NCLR
EFD3 BDEA18           (        forth.asm):02261                 RFXT    jsr,RCLR+7      XT for RCLR
EFD6 C603             (        forth.asm):02262 (2)             ldb     #3
EFD8 BDE636           (        forth.asm):02263 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02264         
EFDB 04               (        forth.asm):02265         FIND    fcb     4               79-STANDARD (REQ203)
EFDC 46494E44         (        forth.asm):02266                 fcc     'FIND'          ( -- XT )
EFE0 EFC7             (        forth.asm):02267                 fdb     ABORT
EFE2 C7               (        forth.asm):02268                 RFCS
EFE3 1FC2             (        forth.asm):02269 (4)             tfr     0,y             Default return value is zero
EFE5 BDE703           (        forth.asm):02270 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
EFE8 6D84             (        forth.asm):02271 (5+0)           tst     ,x
EFEA 2712             (        forth.asm):02272 (3)             beq     @find1
EFEC BDE280           (        forth.asm):02273 (7)             jsr     SCNSTOK
EFEF 270D             (        forth.asm):02274 (3)             beq     @find1
EFF1 BDE38A           (        forth.asm):02275 (7)             jsr     SWDIC
EFF4 DC0E             (        forth.asm):02276 (4)             ldd     PLOAD           Retrieve word payload
EFF6 DD10             (        forth.asm):02277 (4)             std     FNDPLD          Make it accessible through PAYLOAD
EFF8 DC04             (        forth.asm):02278 (4)             ldd     TOKENEP
EFFA 931C             (        forth.asm):02279 (4)             subd    BSBFADR
EFFC DD22             (        forth.asm):02280 (4)             std     UTOIN           Derive >IN from TOKENEP
EFFE 1F21             (        forth.asm):02281 (4)     @find1  tfr     y,x
F000 7EE6AF           (        forth.asm):02282 (3)             jmp     NPUSH
                      (        forth.asm):02283         
F003 01               (        forth.asm):02284         RBRACK  fcb     1               79-STANDARD (REQ126)
F004 5D               (        forth.asm):02285                 fcc     ']'
F005 EFDB             (        forth.asm):02286                 fdb     FIND
F007 C7               (        forth.asm):02287                 RFCS
F008 8601             (        forth.asm):02288 (2)             lda     #1
F00A 9721             (        forth.asm):02289 (3)             sta     USTATE+1
F00C 39               (        forth.asm):02290 (4)             rts
                      (        forth.asm):02291         
                      (        forth.asm):02292         * Note: the standard does not mandate that this primitive be executed in
                      (        forth.asm):02293         * definitions only. IMHO, it ought to, Therefore I am forcing the C bit here.
F00D C1               (        forth.asm):02294         LBRACK  fcb     $C1             79-STANDARD (REQ125)
F00E 5B               (        forth.asm):02295                 fcc     '['
F00F F003             (        forth.asm):02296                 fdb     RBRACK
F011 C7               (        forth.asm):02297                 RFCS
F012 0F21             (        forth.asm):02298 (5)             clr     USTATE+1
F014 39               (        forth.asm):02299 (4)             rts
                      (        forth.asm):02300         
F015 C9               (        forth.asm):02301         BKCOMP  fcb     $C9             79-STANDARD (REQ179)
F016 5B434F4D50494C45 (        forth.asm):02302                 fcc     '[COMPILE]'
     5D
F01F F00D             (        forth.asm):02303                 fdb     LBRACK
F021 C7               (        forth.asm):02304                 RFCS
F022 BDE703           (        forth.asm):02305 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
F025 6D84             (        forth.asm):02306 (5+0)           tst     ,x
F027 2605             (        forth.asm):02307 (3)             bne     @bkcmp2
F029 C605             (        forth.asm):02308 (2)     @bkcmp1 ldb     #5              Missing word name
F02B BDE636           (        forth.asm):02309 (7)             jsr     ERRHDLR         No return
F02E BDE280           (        forth.asm):02310 (7)     @bkcmp2 jsr     SCNSTOK
F031 27F6             (        forth.asm):02311 (3)             beq     @bkcmp1
F033 BDE38A           (        forth.asm):02312 (7)             jsr     SWDIC
F036 2607             (        forth.asm):02313 (3)             bne     @bkcmp3         Word found. Code address returned in Y
F038 9E02             (        forth.asm):02314 (4)             ldx     TOKENSP
F03A C602             (        forth.asm):02315 (2)             ldb     #2              Undefined (X points to the offending word)
F03C BDE636           (        forth.asm):02316 (7)             jsr     ERRHDLR         No return
F03F 1F21             (        forth.asm):02317 (4)     @bkcmp3 tfr     y,x
F041 BDE14E           (        forth.asm):02318 (7)             jsr     EMXASXT         Set as action component
F044 DC02             (        forth.asm):02319 (4)             ldd     TOKENSP         Updated by SWDIC if the word was found
F046 931C             (        forth.asm):02320 (4)             subd    BSBFADR
F048 DD22             (        forth.asm):02321 (4)             std     UTOIN
F04A 39               (        forth.asm):02322 (4)             rts
                      (        forth.asm):02323         
                      (        forth.asm):02324         * Functionally: : ['] FIND [COMPILE] LITERAL ; IMMEDIATE RESTRICT
F04B C3               (        forth.asm):02325         BKQUOT  fcb     $C3             ANSI (Core)
F04C 5B275D           (        forth.asm):02326                 fcb     $5B,$27,$5D
F04F F015             (        forth.asm):02327                 fdb     BKCOMP
F051 C7               (        forth.asm):02328                 RFCS
F052 8D8F             (        forth.asm):02329                 RFXT    bsr,FIND+7      XT for FIND
                      (        forth.asm):02330         * Data stack topmost cell has the target word address.
F054 7EEA98           (        forth.asm):02331                 RFXT    jmp,LITERAL+10  XT for LITERAL
                      (        forth.asm):02332         
F057 C8               (        forth.asm):02333         POSTPON fcb     $C8             ANSI (Core)
F058 504F5354504F4E45 (        forth.asm):02334                 fcc     'POSTPONE'      Not a straight alias to [COMPILE]
F060 F04B             (        forth.asm):02335                 fdb     BKQUOT          Non-immediate words deserve special treatment
F062 C7               (        forth.asm):02336                 RFCS
F063 BDE703           (        forth.asm):02337 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
F066 6D84             (        forth.asm):02338 (5+0)           tst     ,x
F068 2605             (        forth.asm):02339 (3)             bne     @postp2
F06A C605             (        forth.asm):02340 (2)     @postp1 ldb     #5              Missing word name
F06C BDE636           (        forth.asm):02341 (7)             jsr     ERRHDLR         No return
F06F BDE280           (        forth.asm):02342 (7)     @postp2 jsr     SCNSTOK
F072 27F6             (        forth.asm):02343 (3)             beq     @postp1
F074 BDE38A           (        forth.asm):02344 (7)             jsr     SWDIC
F077 2607             (        forth.asm):02345 (3)             bne     @postp3         Word found. Code address returned in Y
F079 9E02             (        forth.asm):02346 (4)             ldx     TOKENSP
F07B C602             (        forth.asm):02347 (2)             ldb     #2              Undefined (X points to the offending word)
F07D BDE636           (        forth.asm):02348 (7)             jsr     ERRHDLR         No return
F080 1F21             (        forth.asm):02349 (4)     @postp3 tfr     y,x             X has the actual execution token
F082 0D33             (        forth.asm):02350 (4)             tst     IMDFLG
F084 270A             (        forth.asm):02351 (3)             beq     @postp5         Target word is not immediate
F086 BDE14E           (        forth.asm):02352 (7)             jsr     EMXASXT         Set as action component
F089 DC02             (        forth.asm):02353 (4)     @postp4 ldd     TOKENSP         Updated by SWDIC if the word was found
F08B 931C             (        forth.asm):02354 (4)             subd    BSBFADR
F08D DD22             (        forth.asm):02355 (4)             std     UTOIN
F08F 39               (        forth.asm):02356 (4)             rts
                      (        forth.asm):02357         * The word being considered is non-immediate. The equivalent input should be:
                      (        forth.asm):02358         * ['] <word> COMPILE, We have the XT for <word> in X/Y.
F090 BDE45A           (        forth.asm):02359 (7)     @postp5 jsr     LITER
F093 8EF0A7           (        forth.asm):02360                 RFXT    ldx,#CMPCOMA+11
F096 BDE14E           (        forth.asm):02361 (7)             jsr     EMXASXT
F099 20EE             (        forth.asm):02362 (3)             bra     @postp4
                      (        forth.asm):02363         
                      (        forth.asm):02364         * Like the 79-STANDARD COMPILE word, GNU Forth has this as a compile-only word.
                      (        forth.asm):02365         * This is a wise choice since it allows us to possibly optimize it.
F09B 48               (        forth.asm):02366         CMPCOMA fcb     $48             ANSI (Core Ext)
F09C 434F4D50494C452C (        forth.asm):02367                 fcc     'COMPILE,'      ( XT -- )
F0A4 F057             (        forth.asm):02368                 fdb     POSTPON
F0A6 C7               (        forth.asm):02369                 RFCS
F0A7 BDE6BD           (        forth.asm):02370 (7)             jsr     NPOP            Execution token to X
F0AA 109E08           (        forth.asm):02371 (5)     CMPCOM1 ldy     DICEND
F0AD 86BD             (        forth.asm):02372 (2)             lda     #JSROPC
F0AF BDE13A           (        forth.asm):02373 (7)             jsr     CHKRTS
F0B2 BDE471           (        forth.asm):02374 (7)             jsr     VARCON2
F0B5 109F08           (        forth.asm):02375 (5)             sty     DICEND
F0B8 39               (        forth.asm):02376 (4)             rts
                      (        forth.asm):02377         
                      (        forth.asm):02378         * As per the standard, : is not immediate. This allows for further interesting
                      (        forth.asm):02379         * developments, like tracing words execution...
F0B9 01               (        forth.asm):02380         COMPC   fcb     $1              79-STANDARD (REQ116)
F0BA 3A               (        forth.asm):02381                 fcc     ':'
F0BB F09B             (        forth.asm):02382                 fdb     CMPCOMA
F0BD C7               (        forth.asm):02383                 RFCS
F0BE 8601             (        forth.asm):02384 (2)             lda     #1
F0C0 9721             (        forth.asm):02385 (3)             sta     USTATE+1
F0C2 104F             (        forth.asm):02386 (2)             clrd
F0C4 DD14             (        forth.asm):02387 (4)             std     JSRLAST
F0C6 8602             (        forth.asm):02388 (2)             lda     #2
F0C8 972C             (        forth.asm):02389 (3)             sta     RTSREMV         Optimistic strategy: remove the final RTS
F0CA 962A             (        forth.asm):02390 (3)             lda     RDEPTH
F0CC 972B             (        forth.asm):02391 (3)             sta     IRDPTH          Meant to check for unbalanced constructs
F0CE 7EE3F8           (        forth.asm):02392 (3)             jmp     LOCWRT
                      (        forth.asm):02393         
F0D1 C1               (        forth.asm):02394         COMPR   fcb     $C1             79-STANDARD (REQ196)
F0D2 3B               (        forth.asm):02395                 fcc     ';'
F0D3 F0B9             (        forth.asm):02396                 fdb     COMPC
F0D5 C7               (        forth.asm):02397                 RFCS
F0D6 962A             (        forth.asm):02398 (3)             lda     RDEPTH          Return stack depth
F0D8 912B             (        forth.asm):02399 (3)             cmpa    IRDPTH          Same as when : was entered?
F0DA 2705             (        forth.asm):02400 (3)             beq     @compr1
F0DC C609             (        forth.asm):02401 (2)             ldb     #9              Illegal construct if not
F0DE BDE636           (        forth.asm):02402 (7)             jsr     ERRHDLR         No return
F0E1 0F21             (        forth.asm):02403 (5)     @compr1 clr     USTATE+1        Back to interpretation mode
F0E3 9E0C             (        forth.asm):02404 (4)             ldx     BDICEND
F0E5 9F06             (        forth.asm):02405 (4)             stx     LSTWAD          Update LAST
F0E7 9E08             (        forth.asm):02406 (4)             ldx     DICEND
                      (        forth.asm):02407         * Optimization: replace the last JSR by a JMP, if possible.
F0E9 DC14             (        forth.asm):02408 (4)             ldd     JSRLAST
F0EB 2712             (        forth.asm):02409 (3)             beq     @compr3         We need an RTS
F0ED 301D             (        forth.asm):02410 (4+1)           leax    -3,x
F0EF 9C14             (        forth.asm):02411 (4)             cmpx    JSRLAST
F0F1 2604             (        forth.asm):02412 (3)             bne     @compr2
F0F3 867E             (        forth.asm):02413 (2)             lda     #JMPOPC         JMP extended
F0F5 A784             (        forth.asm):02414 (4+0)           sta     ,x
                      (        forth.asm):02415         * At this point we still have to emit an RTS unless RTSREMV is 2 or more.
F0F7 3003             (        forth.asm):02416 (4+1)   @compr2 leax    3,x
F0F9 962C             (        forth.asm):02417 (3)             lda     RTSREMV
F0FB 8102             (        forth.asm):02418 (2)             cmpa    #2
F0FD 2404             (        forth.asm):02419 (3)             bhs     @compr4         Optimization applies. We have no forward refs
F0FF 8639             (        forth.asm):02420 (2)     @compr3 lda     #RTSOPC         RTS inherent
F101 A780             (        forth.asm):02421 (4+1)           sta     ,x+
F103                  (        forth.asm):02422         @compr4
                      (        forth.asm):02423                 IFNE    DEBUG
                      (        forth.asm):02424                 lda     #ILLOPC         Illegal opcode
                      (        forth.asm):02425                 sta     ,x+
                      (        forth.asm):02426                 ENDC
F103 9F08             (        forth.asm):02427 (4)             stx     DICEND          Update HERE
                      (        forth.asm):02428                 IFNE    RELFEAT
F105 BDEB2C           (        forth.asm):02429                 RFXT    jsr,MONITOR+10  XT for MONITOR. All : words are candidates
                      (        forth.asm):02430         *                               for integrity check by ICHECK.
                      (        forth.asm):02431                 ENDC
F108 39               (        forth.asm):02432 (4)             rts
                      (        forth.asm):02433         
F109 C7               (        forth.asm):02434         RECURSE fcb     $C7             FORTH-83
F10A 52454355525345   (        forth.asm):02435                 fcc     'RECURSE'
F111 F0D1             (        forth.asm):02436                 fdb     COMPR
F113 C7               (        forth.asm):02437                 RFCS
F114 9E12             (        forth.asm):02438 (4)             ldx     RECADDR         Set up by LOCWRT
F116 7EE14E           (        forth.asm):02439 (3)             jmp     EMXASXT         Set as action component
                      (        forth.asm):02440         
F119 06               (        forth.asm):02441         FORGET  fcb     6               79-STANDARD (REQ196)
F11A 464F52474554     (        forth.asm):02442                 fcc     'FORGET'
F120 F109             (        forth.asm):02443                 fdb     RECURSE
F122 C7               (        forth.asm):02444                 RFCS
F123 BDE703           (        forth.asm):02445 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
F126 6D84             (        forth.asm):02446 (5+0)           tst     ,x              EOL?
F128 2605             (        forth.asm):02447 (3)             bne     @frgt2          No
F12A C605             (        forth.asm):02448 (2)     @frgt1  ldb     #5              Missing word name
F12C BDE636           (        forth.asm):02449 (7)             jsr     ERRHDLR         No return
F12F BDE280           (        forth.asm):02450 (7)     @frgt2  jsr     SCNSTOK
F132 27F6             (        forth.asm):02451 (3)             beq     @frgt1          EOL before a non-SP character could be acquired
F134 BDE38A           (        forth.asm):02452 (7)             jsr     SWDIC           SWDIC uses TOKENSP as input--not X!!
F137 2607             (        forth.asm):02453 (3)             bne     @frgt3          Word found. XT returned in Y
F139 9E02             (        forth.asm):02454 (4)             ldx     TOKENSP
F13B C602             (        forth.asm):02455 (2)             ldb     #2              Undefined (X points to the offending word)
F13D BDE636           (        forth.asm):02456 (7)             jsr     ERRHDLR         No return
F140 1F21             (        forth.asm):02457 (4)     @frgt3  tfr     y,x             Y and X have the word's XT
F142 108C0C15         (        forth.asm):02458 (4)             cmpy    #RAMFTCH
F146 271B             (        forth.asm):02459 (3)             beq     @frgt4
F148 108CE000         (        forth.asm):02460 (4)             cmpy    #ROMSTRT
F14C 2415             (        forth.asm):02461 (3)             bhs     @frgt4
                      (        forth.asm):02462                 IFNE    RELFEAT
F14E AE1D             (        forth.asm):02463 (5+1)           ldx     -3,x            Backlink to X
F150 9F06             (        forth.asm):02464 (4)             stx     LSTWAD          Update LAST
F152 303C             (        forth.asm):02465 (4+1)           leax    -4,y            XT-4 to X (1B/attr, 2B/backlink, 1B/checksum)
                      (        forth.asm):02466                 ELSE
                      (        forth.asm):02467                 ldx     -2,x            Backlink to X
                      (        forth.asm):02468                 stx     LSTWAD          Update LAST
                      (        forth.asm):02469                 leax    -3,y            XT-3 to X (1B/attr, 2B/backlink)
                      (        forth.asm):02470                 ENDC
F154 4F               (        forth.asm):02471 (1)             clra
F155 D632             (        forth.asm):02472 (3)             ldb     CURTOKL         Token name length to D
F157 103201           (        forth.asm):02473 (4)             subr    d,x             Substract word length
F15A 9F08             (        forth.asm):02474 (4)             stx     DICEND          Update HERE
F15C DC02             (        forth.asm):02475 (4)             ldd     TOKENSP         Set by SWDIC to point to the end of the token
F15E 931C             (        forth.asm):02476 (4)             subd    BSBFADR
F160 DD22             (        forth.asm):02477 (4)             std     UTOIN           Derive >IN from TOKENSP
F162 39               (        forth.asm):02478 (4)             rts
F163 C60B             (        forth.asm):02479 (2)     @frgt4  ldb     #11             Word is unforgettable
F165 BDE636           (        forth.asm):02480 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02481         
F168 07               (        forth.asm):02482         EXCT    fcb     7               79-STANDARD (REQ163)
F169 45584543555445   (        forth.asm):02483                 fcc     'EXECUTE'
F170 F119             (        forth.asm):02484                 fdb     FORGET
F172 C7               (        forth.asm):02485                 RFCS
F173 BDE6BD           (        forth.asm):02486 (7)             jsr     NPOP
F176 1037C1           (        forth.asm):02487 (4)             cmpr    0,x             Although the standard does not specify that
F179 2702             (        forth.asm):02488 (3)             beq     @exct1          a NUL address should trigger an error, I do
F17B 1F15             (        forth.asm):02489 (4)             tfr     x,pc
F17D C60D             (        forth.asm):02490 (2)     @exct1  ldb     #13             Illegal argument
F17F BDE636           (        forth.asm):02491 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02492         
F182 03               (        forth.asm):02493         BYE     fcb     3               Non-standard
F183 425945           (        forth.asm):02494                 fcc     'BYE'
F186 F168             (        forth.asm):02495                 fdb     EXCT
F188 C7               (        forth.asm):02496                 RFCS
F189 7EE036           (        forth.asm):02497 (3)             jmp     RSTHDL
                      (        forth.asm):02498         
F18C C6               (        forth.asm):02499         BKCHAR  fcb     $C6             ANSI (Core)
F18D 5B434841525D     (        forth.asm):02500                 fcc     '[CHAR]'
F193 F182             (        forth.asm):02501                 fdb     BYE
F195 C7               (        forth.asm):02502                 RFCS
F196 8D0B             (        forth.asm):02503                 RFXT    bsr,CHAR+7      XT for CHAR
F198 7EEA98           (        forth.asm):02504                 RFXT    jmp,LITERAL+10  XT for LITERAL
                      (        forth.asm):02505         
F19B 04               (        forth.asm):02506         CHAR    fcb     4               ANSI (Core)
F19C 43484152         (        forth.asm):02507                 fcc     'CHAR'
F1A0 F18C             (        forth.asm):02508                 fdb     BKCHAR
F1A2 C7               (        forth.asm):02509                 RFCS
F1A3 BDE703           (        forth.asm):02510 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
F1A6 BDE280           (        forth.asm):02511 (7)     @char1  jsr     SCNSTOK         X points to the beginning of the character
F1A9 2714             (        forth.asm):02512 (3)             beq     @chrerr
F1AB E684             (        forth.asm):02513 (4+0)           ldb     ,x
F1AD 4F               (        forth.asm):02514 (1)             clra
F1AE 1F01             (        forth.asm):02515 (4)             tfr     d,x
F1B0 BDE6AF           (        forth.asm):02516 (7)             jsr     NPUSH
F1B3 9E02             (        forth.asm):02517 (4)             ldx     TOKENSP         Set by SCNSTOK
F1B5 BDE28E           (        forth.asm):02518 (7)             jsr     SCNETOK
F1B8 1F10             (        forth.asm):02519 (4)             tfr     x,d             TOKENEP
F1BA 931C             (        forth.asm):02520 (4)             subd    BSBFADR
F1BC DD22             (        forth.asm):02521 (4)             std     UTOIN           Derive >IN from TOKENEP
F1BE 39               (        forth.asm):02522 (4)             rts
F1BF C60D             (        forth.asm):02523 (2)     @chrerr ldb     #13             Illegal argument
F1C1 BDE636           (        forth.asm):02524 (7)             jsr     ERRHDLR
                      (        forth.asm):02525         * No return.
                      (        forth.asm):02526         
                      (        forth.asm):02527         * Hairy code but working.
F1C4 04               (        forth.asm):02528         WORD    fcb     4               79-STANDARD (REQ181)
F1C5 574F5244         (        forth.asm):02529                 fcc     'WORD'          ( char -- addr )
F1C9 F19B             (        forth.asm):02530                 fdb     CHAR
F1CB C7               (        forth.asm):02531                 RFCS
F1CC BDE6BD           (        forth.asm):02532 (7)             jsr     NPOP
F1CF 1F16             (        forth.asm):02533 (4)             tfr     x,w             F has the delimiter ASCII code
F1D1 109E08           (        forth.asm):02534 (5)             ldy     DICEND          The counted string returned is stored at HERE
F1D4 3420             (        forth.asm):02535 (4+2)           pshs    y
F1D6 6FA0             (        forth.asm):02536 (6+1)           clr     ,y+             Initialize its length
F1D8 BDE703           (        forth.asm):02537 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
F1DB 6D84             (        forth.asm):02538 (5+0)           tst     ,x              EOL reached?
F1DD 2605             (        forth.asm):02539 (3)             bne     @word1          No, proceed
F1DF 3510             (        forth.asm):02540 (4+2)   @word0  puls    x
F1E1 3610             (        forth.asm):02541                 UCNPUSH                 Push back HERE
F1E3 39               (        forth.asm):02542 (4)             rts
F1E4 BDE280           (        forth.asm):02543 (7)     @word1  jsr     SCNSTOK         Scan for the next non-space character
F1E7 2718             (        forth.asm):02544 (3)             beq     @word5          EOL reached, this is the end
F1E9 A680             (        forth.asm):02545 (4+1)           lda     ,x+             First non-space character
F1EB 1037F8           (        forth.asm):02546 (4)             cmpr    f,a             Leading delimiter matched?
F1EE 2602             (        forth.asm):02547 (3)             bne     @word3          No
F1F0 A680             (        forth.asm):02548 (4+1)   @word2  lda     ,x+             Acquire next character from the input stream
F1F2 A7A0             (        forth.asm):02549 (4+1)   @word3  sta     ,y+
F1F4 2709             (        forth.asm):02550 (3)             beq     @word4          EOL reached
F1F6 1037F8           (        forth.asm):02551 (4)             cmpr    f,a             Trailing delimiter?
F1F9 2706             (        forth.asm):02552 (3)             beq     @word5
F1FB 6CF4             (        forth.asm):02553 (6+3)           inc     [,s]            Increment string length
F1FD 20F1             (        forth.asm):02554 (3)             bra     @word2
F1FF 301F             (        forth.asm):02555 (4+1)   @word4  leax    -1,x            EOL reached
F201 1F10             (        forth.asm):02556 (4)     @word5  tfr     x,d             Pointing one char after the delimiter or to NUL
F203 931C             (        forth.asm):02557 (4)             subd    BSBFADR
F205 DD22             (        forth.asm):02558 (4)             std     UTOIN
F207 20D6             (        forth.asm):02559 (3)             bra     @word0
                      (        forth.asm):02560         
F209 81               (        forth.asm):02561         LPAR    fcb     $81             79-STANDARD (REQ122)
F20A 28               (        forth.asm):02562                 fcc     '('
F20B F1C4             (        forth.asm):02563                 fdb     WORD
F20D C7               (        forth.asm):02564                 RFCS
F20E BDE703           (        forth.asm):02565 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
F211 A680             (        forth.asm):02566 (4+1)   @lpar1  lda     ,x+
F213 270B             (        forth.asm):02567 (3)             beq     @lparx          Input stream exhausted before ) is matched
F215 8129             (        forth.asm):02568 (2)             cmpa    #')
F217 26F8             (        forth.asm):02569 (3)             bne     @lpar1
F219 1F10             (        forth.asm):02570 (4)             tfr     x,d             Just matched )
F21B 931C             (        forth.asm):02571 (4)             subd    BSBFADR
F21D DD22             (        forth.asm):02572 (4)             std     UTOIN           Update >IN
F21F 39               (        forth.asm):02573 (4)             rts
F220 C60C             (        forth.asm):02574 (2)     @lparx  ldb     #12             Missing delimiter
F222 BDE636           (        forth.asm):02575 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02576         
F225 06               (        forth.asm):02577         SOURCE  fcb     6               ANSI (Core)
F226 534F55524345     (        forth.asm):02578                 fcc     'SOURCE'        ( -- baseaddr charcount )
F22C F209             (        forth.asm):02579                 fdb     LPAR
F22E C7               (        forth.asm):02580                 RFCS
F22F 9E1C             (        forth.asm):02581 (4)             ldx     BSBFADR
F231 BDE6AF           (        forth.asm):02582 (7)             jsr     NPUSH
F234 8E0400           (        forth.asm):02583 (3)             ldx     #BLKSIZ         Non-zero block size
F237 DC24             (        forth.asm):02584 (4)             ldd     UBLK
F239 2605             (        forth.asm):02585 (3)             bne     @srcdon         Current BLK is NZ
F23B 4F               (        forth.asm):02586 (1)             clra
F23C D629             (        forth.asm):02587 (3)             ldb     CMDLNSZ         Character count entered through GETS in INTERP
F23E 1F01             (        forth.asm):02588 (4)             tfr     d,x
F240 7EE6AF           (        forth.asm):02589 (3)     @srcdon jmp     NPUSH
                      (        forth.asm):02590         
                      (        forth.asm):02591         * This is a straightforward implementation borrowed from GNU Forth 'see \':
                      (        forth.asm):02592         * : \
                      (        forth.asm):02593         *   BLK @
                      (        forth.asm):02594         *   IF     >IN @ C/L / 1+ C/L * >IN ! EXIT
                      (        forth.asm):02595         *   THEN
                      (        forth.asm):02596         *   SOURCE >IN ! DROP ; IMMEDIATE
                      (        forth.asm):02597         * However since C/L (number of columns per line) is 64 (a power of 2), things
                      (        forth.asm):02598         * can be coded in a more compact manner as: >IN @ 63 COM AND 64 + >IN !
F243 81               (        forth.asm):02599         BKSLSH  fcb     $81             ANSI (Block Ext)
F244 5C               (        forth.asm):02600                 fcb     $5C             \ ( -- )
F245 F225             (        forth.asm):02601                 fdb     SOURCE
F247 C7               (        forth.asm):02602                 RFCS
F248 DC24             (        forth.asm):02603 (4)             ldd     UBLK            BLK @ to D
F24A 270B             (        forth.asm):02604 (3)             beq     @comser         We operate from block 0: the console
F24C DC22             (        forth.asm):02605 (4)             ldd     UTOIN           >IN @
F24E C4C0             (        forth.asm):02606 (2)             andb    #^$3F           Point to the beginning of the line
F250 CB40             (        forth.asm):02607 (2)             addb    #$40            next line
F252 8900             (        forth.asm):02608 (2)             adca    #0              Propagate potential carry from LSB
F254 DD22             (        forth.asm):02609 (4)             std     UTOIN           >IN !
F256 39               (        forth.asm):02610 (4)             rts                     EXIT
F257 8DD6             (        forth.asm):02611         @comser RFXT    bsr,SOURCE+9    XT for SOURCE
F259 BDE6BD           (        forth.asm):02612 (7)             jsr     NPOP
F25C 9F22             (        forth.asm):02613 (4)             stx     UTOIN           >IN !
F25E 7EFBAD           (        forth.asm):02614                 RFXT    jmp,DROP+7      XT for DROP
                      (        forth.asm):02615                 ENDC
                      (        forth.asm):02616         
F261 82               (        forth.asm):02617         PSTR    fcb     $82             79-STANDARD (REQ133)
F262 2E22             (        forth.asm):02618                 fcc     '."'
F264 F243             (        forth.asm):02619                 fdb     BKSLSH
F266 C7               (        forth.asm):02620                 RFCS
F267 8D13             (        forth.asm):02621                 RFXT    bsr,SQUOTE+5    XT for S"
F269 0D21             (        forth.asm):02622 (4)             tst     USTATE+1
F26B 2603             (        forth.asm):02623 (3)             bne     @pstcmp
F26D 7EF5A3           (        forth.asm):02624                 RFXT    jmp,TYPE+7
F270 8EF5A3           (        forth.asm):02625         @pstcmp RFXT    ldx,#TYPE+7
F273 7EE14E           (        forth.asm):02626 (3)             jmp     EMXASXT
                      (        forth.asm):02627         
F276 82               (        forth.asm):02628         SQUOTE  fcb     $82             ANSI (Core)
F277 5322             (        forth.asm):02629                 fcc     'S"'
F279 F261             (        forth.asm):02630                 fdb     PSTR
F27B C7               (        forth.asm):02631                 RFCS
F27C 0D21             (        forth.asm):02632 (4)             tst     USTATE+1
F27E 260C             (        forth.asm):02633 (3)             bne     @sqcmp
F280 8E0022           (        forth.asm):02634 (3)             ldx     #'"             We are inperpreting
F283 BDE6AF           (        forth.asm):02635 (7)             jsr     NPUSH
F286 BDF1CC           (        forth.asm):02636                 RFXT    jsr,WORD+7      XT for WORD
F289 7EF5C2           (        forth.asm):02637                 RFXT    jmp,COUNT+8     XT for COUNT
F28C 109E08           (        forth.asm):02638 (5)     @sqcmp  ldy     DICEND          We are compiling
F28F 867E             (        forth.asm):02639 (2)             lda     #JMPOPC         JMP extended
F291 A7A0             (        forth.asm):02640 (4+1)           sta     ,y+
F293 3420             (        forth.asm):02641 (4+2)           pshs    y
F295 3122             (        forth.asm):02642 (4+1)           leay    2,y             2 ALLOT
F297 109F08           (        forth.asm):02643 (5)             sty     DICEND
F29A 8E0022           (        forth.asm):02644 (3)             ldx     #'"
F29D BDE6AF           (        forth.asm):02645 (7)             jsr     NPUSH
F2A0 BDF1CC           (        forth.asm):02646                 RFXT    jsr,WORD+7      XT for WORD
F2A3 BDE6BD           (        forth.asm):02647 (7)             jsr     NPOP
F2A6 4F               (        forth.asm):02648 (1)             clra
F2A7 E684             (        forth.asm):02649 (4+0)           ldb     ,x              C@
F2A9 3001             (        forth.asm):02650 (4+1)           leax    1,x             1+. Skip the byte count (X has HERE)
F2AB 308B             (        forth.asm):02651 (4+2)           leax    d,x             Skip string length material
F2AD 3520             (        forth.asm):02652 (4+2)           puls    y
F2AF AFA4             (        forth.asm):02653 (5+0)           stx     ,y              Install jump address
F2B1 3122             (        forth.asm):02654 (4+1)           leay    2,y             Counted string base address to Y
F2B3 868E             (        forth.asm):02655 (2)             lda     #LDXOPC
F2B5 A780             (        forth.asm):02656 (4+1)           sta     ,x+
F2B7 10AF81           (        forth.asm):02657 (6+2)           sty     ,x++
F2BA 9F08             (        forth.asm):02658 (4)             stx     DICEND          Update HERE
F2BC 8EE6AF           (        forth.asm):02659 (3)             ldx     #NPUSH
F2BF BDE14E           (        forth.asm):02660 (7)             jsr     EMXASXT
F2C2 8EF5C2           (        forth.asm):02661                 RFXT    ldx,#COUNT+8    XT for COUNT
F2C5 7EE14E           (        forth.asm):02662 (3)             jmp     EMXASXT
                      (        forth.asm):02663         
                      (        forth.asm):02664         * Transactional behaviour is guaranteed here. What this means is that the
                      (        forth.asm):02665         * operation will preserve the data stack contents, should insufficient
                      (        forth.asm):02666         * parameters be supplied. It is a very desirable feature (for debugging
                      (        forth.asm):02667         * purposes) which will be generalized to a number of other words. As an
                      (        forth.asm):02668         * aside, it also allows us to access the data stack as directly indexed
                      (        forth.asm):02669         * through the 6309 U register, resulting in better performance.
F2C8 02               (        forth.asm):02670         DPLUS   fcb     2               79-STANDARD (REQ241)
F2C9 442B             (        forth.asm):02671                 fcc     'D+'            ( d2 d1 -- d1+d2--signed )
F2CB F276             (        forth.asm):02672                 fdb     SQUOTE          Initially ( L2 H2 L1 H1)
F2CD C7               (        forth.asm):02673                 RFCS
F2CE CC0242BDE336     (        forth.asm):02674                 MINDREQ 4               Make sure we have at least 4 cells stacked up
                      (        forth.asm):02675         * At this point sufficient stack depth has been assessed. Let's rock and roll!
F2D4 BDFC2B           (        forth.asm):02676         @stkok  RFXT    jsr,ROT+6       XT for ROT ( L2 L1 H1 H2 )
F2D7 EC44             (        forth.asm):02677 (5+1)           ldd     4,u             L1
F2D9 E346             (        forth.asm):02678 (5+1)           addd    6,u             L2
F2DB ED46             (        forth.asm):02679 (5+1)           std     6,u             d1+d2 least significant cell
F2DD EC42             (        forth.asm):02680 (5+1)           ldd     2,u             H1
F2DF 10890000         (        forth.asm):02681 (4)             adcd    #0              Carry from least significant cell addition
F2E3 E3C4             (        forth.asm):02682 (5+0)           addd    ,u              H2
F2E5 ED44             (        forth.asm):02683 (5+1)           std     4,u             d1+d2 most significant cell
F2E7 3344             (        forth.asm):02684 (4+1)           leau    4,u             Drop 2 cells from the data stack
F2E9 39               (        forth.asm):02685 (4)             rts
                      (        forth.asm):02686         
F2EA 07               (        forth.asm):02687         DNEG    fcb     7               79-STANDARD (REQ245)
F2EB 444E4547415445   (        forth.asm):02688                 fcc     'DNEGATE'
F2F2 F2C8             (        forth.asm):02689                 fdb     DPLUS
F2F4 C7               (        forth.asm):02690                 RFCS
F2F5 CC0246BDE336     (        forth.asm):02691                 MINDREQ 2               We need at least 2 cells stacked up
F2FB 10A642           (        forth.asm):02692 (6+1)           ldw     2,u             Least significant cell
F2FE 1053             (        forth.asm):02693 (2)             comw
F300 ECC4             (        forth.asm):02694 (5+0)           ldd     ,u              Most significant cell
F302 1043             (        forth.asm):02695 (2)             comd
F304 108B0001         (        forth.asm):02696 (4)             addw    #1
F308 10890000         (        forth.asm):02697 (4)             adcd    #0              Propagate carry flag
F30C 10EDC4           (        forth.asm):02698 (8+0)           stq     ,u              Store the result back to the data stack
F30F 39               (        forth.asm):02699 (4)             rts
                      (        forth.asm):02700         
F310 03               (        forth.asm):02701         DZEQ    fcb     3               79-STANDARD (double number extension)
F311 44303D           (        forth.asm):02702                 fcc     'D0='           ( d -- flag )
F314 F2EA             (        forth.asm):02703                 fdb     DNEG
F316 C7               (        forth.asm):02704                 RFCS
F317 BDED35           (        forth.asm):02705                 RFXT    jsr,OR+5        XT for OR
F31A 7EEDB5           (        forth.asm):02706                 RFXT    jmp,NULP+5      XT for 0=
                      (        forth.asm):02707         
                      (        forth.asm):02708         * In essence:
                      (        forth.asm):02709         * : D< DNEGATE D+ NIP [ HEX ] 8000 AND IF 1 ELSE 0 THEN ;
F31D 02               (        forth.asm):02710         DLESS   fcb     2               79-STANDARD (REQ244)
F31E 443C             (        forth.asm):02711                 fcc     'D<'            ( d1 d2 -- flag )
F320 F310             (        forth.asm):02712                 fdb     DZEQ
F322 C7               (        forth.asm):02713                 RFCS
F323 8DD0             (        forth.asm):02714                 RFXT    bsr,DNEG+10     XT for DNEGATE
F325 8DA7             (        forth.asm):02715                 RFXT    bsr,DPLUS+5     XT for D+
F327 4F               (        forth.asm):02716 (1)             clra
F328 A742             (        forth.asm):02717 (4+1)           sta     2,u
F32A E6C4             (        forth.asm):02718 (4+0)           ldb     ,u
F32C 2D05             (        forth.asm):02719 (3)             blt     @setto1
F32E A743             (        forth.asm):02720 (4+1)   @setrv  sta     3,u
F330 3342             (        forth.asm):02721 (4+1)           leau    2,u
F332 39               (        forth.asm):02722 (4)             rts
F333 4C               (        forth.asm):02723 (1)     @setto1 inca
F334 20F8             (        forth.asm):02724 (3)             bra     @setrv
                      (        forth.asm):02725         
F336 05               (        forth.asm):02726         TWOOVER fcb     5               79-STANDARD (double number extension)
F337 324F564552       (        forth.asm):02727                 fcc     '2OVER'         ( d1 d2 -- d1 d2 d1 )
F33C F31D             (        forth.asm):02728                 fdb     DLESS
F33E C7               (        forth.asm):02729                 RFCS
F33F CC0242BDE336     (        forth.asm):02730                 MINDREQ 4
F345 10EC44           (        forth.asm):02731 (8+1)           ldq     4,u             D:W has MSC:LSC of D1
F348 1F61             (        forth.asm):02732 (4)             tfr     w,x
F34A BDE6AF           (        forth.asm):02733 (7)             jsr     NPUSH
F34D 1F01             (        forth.asm):02734 (4)             tfr     d,x
F34F 7EE6AF           (        forth.asm):02735 (3)             jmp     NPUSH
                      (        forth.asm):02736         
F352 05               (        forth.asm):02737         TWOSWAP fcb     5               79-STANDARD (double number extension)
F353 3253574150       (        forth.asm):02738                 fcc     '2SWAP'         ( d1 d2 -- d2 d1 )
F358 F336             (        forth.asm):02739                 fdb     TWOOVER
F35A C7               (        forth.asm):02740                 RFCS
F35B CC0242BDE336     (        forth.asm):02741                 MINDREQ 4               At least four cells must be stacked up
F361 AE44             (        forth.asm):02742 (5+1)           ldx     4,u             D1 most significant cell
F363 10AE46           (        forth.asm):02743 (6+1)           ldy     6,u             D1 least significant cell
F366 10ECC4           (        forth.asm):02744 (8+0)           ldq     ,u              D:W has MSC:LSC of D2
F369 10ED44           (        forth.asm):02745 (8+1)           stq     4,u
F36C AFC4             (        forth.asm):02746 (5+0)           stx     ,u
F36E 10AF42           (        forth.asm):02747 (6+1)           sty     2,u
F371 39               (        forth.asm):02748 (4)             rts
                      (        forth.asm):02749         
F372 05               (        forth.asm):02750         TWODROP fcb     5               79-STANDARD (double number extension)
F373 3244524F50       (        forth.asm):02751                 fcc     '2DROP'         ( d -- )
F378 F352             (        forth.asm):02752                 fdb     TWOSWAP
F37A C7               (        forth.asm):02753                 RFCS
F37B CC0246BDE336     (        forth.asm):02754                 MINDREQ 2               At least two cells must be stacked up
F381 3344             (        forth.asm):02755 (4+1)           leau    4,u
F383 39               (        forth.asm):02756 (4)             rts
                      (        forth.asm):02757         
F384 04               (        forth.asm):02758         TWODUP  fcb     4               79-STANDARD (double number extension)
F385 32445550         (        forth.asm):02759                 fcc     '2DUP'          ( double -- double double )
F389 F372             (        forth.asm):02760                 fdb     TWODROP
F38B C7               (        forth.asm):02761                 RFCS
F38C CC0246BDE336     (        forth.asm):02762                 MINDREQ 2
F392 10ECC4           (        forth.asm):02763 (8+0)           ldq     ,u              D:W has MSC:LSC of DOUBLE
F395 1F61             (        forth.asm):02764 (4)             tfr     w,x
F397 BDE6AF           (        forth.asm):02765 (7)             jsr     NPUSH
F39A 1F01             (        forth.asm):02766 (4)             tfr     d,x
F39C 7EE6AF           (        forth.asm):02767 (3)             jmp     NPUSH
                      (        forth.asm):02768         
F39F 02               (        forth.asm):02769         TWOSTOR fcb     2               79-STANDARD (double number extension)
F3A0 3221             (        forth.asm):02770                 fcc     '2!'            ( double addr -- )
F3A2 F384             (        forth.asm):02771                 fdb     TWODUP
F3A4 C7               (        forth.asm):02772                 RFCS
F3A5 CC0244BDE336     (        forth.asm):02773                 MINDREQ 3
F3AB 10EC42           (        forth.asm):02774 (8+1)           ldq     2,u             DOUBLE to D:W
F3AE 10EDD4           (        forth.asm):02775 (8+3)           stq     [,u]            Store DOUBLE to ADDR
F3B1 3346             (        forth.asm):02776 (4+1)           leau    6,u             Drop three cells from the user stack
F3B3 39               (        forth.asm):02777 (4)             rts
                      (        forth.asm):02778         
F3B4 02               (        forth.asm):02779         TWOFTCH fcb     2               79-STANDARD (double number extension)
F3B5 3240             (        forth.asm):02780                 fcc     '2@'            ( dbladdr -- double )
F3B7 F39F             (        forth.asm):02781                 fdb     TWOSTOR
F3B9 C7               (        forth.asm):02782                 RFCS
F3BA CC0248BDE336     (        forth.asm):02783                 MINDREQ 1
F3C0 10ECD4           (        forth.asm):02784 (8+3)           ldq     [,u]            D:W has MSC:LSC of DBLADDR @
F3C3 10A7C4           (        forth.asm):02785 (6+0)           stw     ,u              Least significant cell stacked in place
F3C6 1F01             (        forth.asm):02786 (4)             tfr     d,x             Most significant cell goes through standard push
F3C8 7EE6AF           (        forth.asm):02787 (3)             jmp     NPUSH
                      (        forth.asm):02788         
                      (        forth.asm):02789                 IFNE    HVCONV
F3CB                  (        forth.asm):02790         CONVERT fcb     7               79-STANDARD (REQ195)
                      (        forth.asm):02791                 fcc     'CONVERT'       ( d1 addr1 -- d2 addr2 )
                      (        forth.asm):02792                 fdb     TWOFTCH
                      (        forth.asm):02793                 RFCS
                      (        forth.asm):02794                 MINDREQ 3               At least 3 cells need to be stacked up on entry
                      (        forth.asm):02795                 jsr     CKBASE          Check for supported BASE. No return if not
                      (        forth.asm):02796                 ldx     ,u              ADDR1 to X
F3CB                  (        forth.asm):02797         @cvloop leax    1,x
                      (        forth.asm):02798                 ldb     ,x
                      (        forth.asm):02799         * B has the ASCII representation of something that may or may not be a valid
                      (        forth.asm):02800         * digit, expressed in BASE (alias (byte)UBASE+1). If it does, multiply D1 by
                      (        forth.asm):02801         * BASE and add that to D1 (aka D2 on exit). Then add DIGIT on the top of it.
                      (        forth.asm):02802                 subb    #'0             Minimal ASCII value condition met?
                      (        forth.asm):02803                 blo     @cvoor          No. Out of range. ,X cannot be a valid digit
                      (        forth.asm):02804                 cmpb    #10
                      (        forth.asm):02805                 blo     @cvnolt         No letter in potential BASE
                      (        forth.asm):02806                 IFEQ    CSSNTVE
                      (        forth.asm):02807                 cmpb    #'A-'0
                      (        forth.asm):02808                 blo     @cvoor          Greater than 9 but lower than A
                      (        forth.asm):02809                 cmpb    #'a-'0
                      (        forth.asm):02810                 blo     @cvisuc         Upper case already
                      (        forth.asm):02811                 cmpb    #'z-'0
                      (        forth.asm):02812                 bhi     @cvoor          Definitely out of range
                      (        forth.asm):02813                 subb    #'a-'A          To upper case
                      (        forth.asm):02814                 ENDC
F3CB                  (        forth.asm):02815         @cvisuc subb    #'A-':          A-Z to number
F3CB                  (        forth.asm):02816         @cvnolt cmpb    UBASE+1         B has a digit. Make sure it's less than BASE
                      (        forth.asm):02817                 bhs     @cvoor          Number under scrutiny is >= BASE
                      (        forth.asm):02818                 leas    -8,s            Allocate scratch space
                      (        forth.asm):02819                 clra
                      (        forth.asm):02820                 pshs    d
                      (        forth.asm):02821         * System and user stack structures are as follows:
                      (        forth.asm):02822         * ,s    current digit (1 cell)
                      (        forth.asm):02823         * 2,s   D0*B (1 cell)
                      (        forth.asm):02824         * 4,s   D1*B (1 cell)
                      (        forth.asm):02825         * 6,s   D2*B (1 cell)
                      (        forth.asm):02826         * 8,s   D3*B (1 cell)
                      (        forth.asm):02827         * 2,u   D1H most significant cell
                      (        forth.asm):02828         * 4,u   D1L least significant cell
                      (        forth.asm):02829                 tfr     u,v             Backup U
                      (        forth.asm):02830                 leau    6,u             Point one byte after D1LL
                      (        forth.asm):02831                 leay    2,s             Point to D0*B
                      (        forth.asm):02832                 lde     #4              Four products to go through
F3CB                  (        forth.asm):02833         @cvmul  lda     ,-u
                      (        forth.asm):02834                 ldb     UBASE+1
                      (        forth.asm):02835                 mul
                      (        forth.asm):02836                 std     ,y++
                      (        forth.asm):02837                 dece
                      (        forth.asm):02838                 bne     @cvmul
                      (        forth.asm):02839                 tfr     v,u             Restore U
                      (        forth.asm):02840                 lda     3,s
                      (        forth.asm):02841                 sta     5,u             D1LL
                      (        forth.asm):02842                 lda     2,s
                      (        forth.asm):02843                 adda    5,s
                      (        forth.asm):02844                 sta     4,u             D1LH
                      (        forth.asm):02845                 lda     4,s
                      (        forth.asm):02846                 adca    7,s
                      (        forth.asm):02847                 sta     3,u             D1HL
                      (        forth.asm):02848                 lda     6,s
                      (        forth.asm):02849                 adca    9,s
                      (        forth.asm):02850                 sta     2,u             D1HH
                      (        forth.asm):02851                 ldd     4,u             D1L
                      (        forth.asm):02852                 addd    ,s              DIGIT
                      (        forth.asm):02853                 std     4,u
                      (        forth.asm):02854                 ldd     2,u             D1H
                      (        forth.asm):02855                 adcd    #0              Potential carry from lower cell
                      (        forth.asm):02856                 std     2,u
                      (        forth.asm):02857                 leas    10,s            Release scratch space
                      (        forth.asm):02858                 bra     @cvloop         Here we go again
F3CB                  (        forth.asm):02859         @cvoor  stx     ,u              Update ADDR2
                      (        forth.asm):02860                 rts
                      (        forth.asm):02861                 ENDC
                      (        forth.asm):02862         
F3CB 02               (        forth.asm):02863         CVTE    fcb     2
F3CC 233E             (        forth.asm):02864                 fcc     '#>'
                      (        forth.asm):02865                 IFNE    HVCONV
                      (        forth.asm):02866                 fdb     CONVERT
                      (        forth.asm):02867                 ELSE
F3CE F3B4             (        forth.asm):02868                 fdb     TWOFTCH
                      (        forth.asm):02869                 ENDC
F3D0 C7               (        forth.asm):02870                 RFCS
F3D1 BDE6BD           (        forth.asm):02871 (7)             jsr     NPOP
F3D4 BDE6BD           (        forth.asm):02872 (7)             jsr     NPOP            Drop 2 cells from the data stack
F3D7 8E0139           (        forth.asm):02873 (3)             ldx     #PADBUF
F3DA 3610             (        forth.asm):02874                 UCNPUSH
F3DC BDE1A8           (        forth.asm):02875 (7)             jsr     SLEN
F3DF 1F61             (        forth.asm):02876 (4)             tfr     w,x
F3E1 3610             (        forth.asm):02877                 UCNPUSH
F3E3 39               (        forth.asm):02878 (4)             rts
                      (        forth.asm):02879         
F3E4 04               (        forth.asm):02880         SIGN    fcb     4
F3E5 5349474E         (        forth.asm):02881                 fcc     'SIGN'
F3E9 F3CB             (        forth.asm):02882                 fdb     CVTE
F3EB C7               (        forth.asm):02883                 RFCS
F3EC BDE6BD           (        forth.asm):02884 (7)             jsr     NPOP
F3EF 1F10             (        forth.asm):02885 (4)             tfr     x,d
F3F1 104D             (        forth.asm):02886 (2)             tstd
F3F3 2C05             (        forth.asm):02887 (3)             bge     @sign1
F3F5 C62D             (        forth.asm):02888 (2)             ldb     #'-
F3F7 7EF4B4           (        forth.asm):02889 (3)             jmp     INSBPAD
F3FA 39               (        forth.asm):02890 (4)     @sign1  rts
                      (        forth.asm):02891         
F3FB 04               (        forth.asm):02892         HOLD    fcb     4
F3FC 484F4C44         (        forth.asm):02893                 fcc     'HOLD'
F400 F3E4             (        forth.asm):02894                 fdb     SIGN
F402 C7               (        forth.asm):02895                 RFCS
F403 BDE6BD           (        forth.asm):02896 (7)             jsr     NPOP
F406 1F10             (        forth.asm):02897 (4)             tfr     x,d
F408 7EF4B4           (        forth.asm):02898 (3)             jmp     INSBPAD         B is inserted at the beginning of PAD.
                      (        forth.asm):02899         
F40B 02               (        forth.asm):02900         SHARPS  fcb     2
F40C 2353             (        forth.asm):02901                 fcc     '#S'
F40E F3FB             (        forth.asm):02902                 fdb     HOLD
F410 C7               (        forth.asm):02903                 RFCS
F411 8601             (        forth.asm):02904 (2)             lda     #1
F413 972F             (        forth.asm):02905 (3)             sta     CVTFCN          CVT function #1 is #S
F415 2007             (        forth.asm):02906 (3)             bra     CVT0
                      (        forth.asm):02907         
                      (        forth.asm):02908         * Unsigned double on the top of the data stack gets divided by BASE.
                      (        forth.asm):02909         * The division algorithm implemented here is the binary long division.
                      (        forth.asm):02910         * See https://en.wikipedia.org/wiki/Division_algorithm for more information.
                      (        forth.asm):02911         * Remainder (converted to a character) gets prepended to PAD.
F417 01               (        forth.asm):02912         CVT     fcb     1
F418 23               (        forth.asm):02913                 fcc     '#'
F419 F40B             (        forth.asm):02914                 fdb     SHARPS
F41B C7               (        forth.asm):02915                 RFCS
F41C 0F2F             (        forth.asm):02916 (5)             clr     CVTFCN          CVT function 0 is #
F41E BDE6BD           (        forth.asm):02917 (7)     CVT0    jsr     NPOP
F421 1F16             (        forth.asm):02918 (4)             tfr     x,w
F423 BDE6BD           (        forth.asm):02919 (7)             jsr     NPOP
F426 3410             (        forth.asm):02920 (4+2)   CVT1    pshs    x               Numerator least significant cell
F428 1038             (        forth.asm):02921 (6)             pshsw                   Numerator most significant cell
F42A 104F             (        forth.asm):02922 (2)             clrd
F42C 3406             (        forth.asm):02923 (4+2)           pshs    d               Quotient low
F42E 3406             (        forth.asm):02924 (4+2)           pshs    d               Quotient high
F430 3406             (        forth.asm):02925 (4+2)           pshs    d               Bitmask low
F432 10868000         (        forth.asm):02926 (4)             ldw     #$8000          Bitmask high
F436 1038             (        forth.asm):02927 (6)             pshsw
F438 3406             (        forth.asm):02928 (4+2)           pshs    d
                      (        forth.asm):02929         * Stack structure:
                      (        forth.asm):02930         * 1,s   remainder               8 bits (high order byte is zero and unused)
                      (        forth.asm):02931         * 2,s   Bitmask high            16 bits
                      (        forth.asm):02932         * 4,s   Bitmask low             16 bits
                      (        forth.asm):02933         * 6,s   Quotient high           16 bits
                      (        forth.asm):02934         * 8,s   Quotient low            16 bits
                      (        forth.asm):02935         * 10,s  Numerator high          16 bits
                      (        forth.asm):02936         * 12,s  Numerator low           16 bits
                      (        forth.asm):02937         * Denominator is at UBASE+1     8 bits
F43A 11C61F           (        forth.asm):02938 (3)             ldf     #31             32 bits to go
F43D 6861             (        forth.asm):02939 (6+1)   @cvt1   lsl     1,s             R := R << 1
                      (        forth.asm):02940         * We need to extract bit <f> from the numerator.
F43F 306A             (        forth.asm):02941 (4+1)           leax    10,s            Numerator MSB address
F441 1FF8             (        forth.asm):02942 (4)             tfr     f,a             Not to alter the stack structure
F443 44               (        forth.asm):02943 (1)             lsra                    OffsetX: 3 - F >> 3
F444 44               (        forth.asm):02944 (1)             lsra
F445 44               (        forth.asm):02945 (1)             lsra
F446 C603             (        forth.asm):02946 (2)             ldb     #3
F448 103289           (        forth.asm):02947 (4)             subr    a,b
F44B 3A               (        forth.asm):02948 (1)             abx
F44C A684             (        forth.asm):02949 (4+0)           lda     ,x
F44E 1FF9             (        forth.asm):02950 (4)             tfr     f,b             Bitno: F & 7
F450 C407             (        forth.asm):02951 (2)             andb    #7
                      (        forth.asm):02952         * At this point, A has the data we're interested in. B has the bit number.
F452 5D               (        forth.asm):02953 (1)     @cvtex  tstb
F453 2704             (        forth.asm):02954 (3)             beq     @cvtfnd         Bit 0 of A has the data
F455 44               (        forth.asm):02955 (1)             lsra
F456 5A               (        forth.asm):02956 (1)             decb
F457 20F9             (        forth.asm):02957 (3)             bra     @cvtex
F459 8401             (        forth.asm):02958 (2)     @cvtfnd anda    #1
F45B AA61             (        forth.asm):02959 (4+1)           ora     1,s             R(0) := N(i)
F45D A761             (        forth.asm):02960 (4+1)           sta     1,s             Update the remainder
F45F 911F             (        forth.asm):02961 (3)             cmpa    UBASE+1
F461 2512             (        forth.asm):02962 (3)             blo     @cvt5
F463 901F             (        forth.asm):02963 (3)             suba    UBASE+1
F465 A761             (        forth.asm):02964 (4+1)           sta     1,s             R := R - D
                      (        forth.asm):02965         * Q(i) := 1 (use the bitmask).
F467 EC66             (        forth.asm):02966 (5+1)           ldd     6,s             Quotient high
F469 10AA62           (        forth.asm):02967 (6+1)           ord     2,s             Bitmask high
F46C ED66             (        forth.asm):02968 (5+1)           std     6,s
F46E EC68             (        forth.asm):02969 (5+1)           ldd     8,s             Quotient low
F470 10AA64           (        forth.asm):02970 (6+1)           ord     4,s             Bitmask low
F473 ED68             (        forth.asm):02971 (5+1)           std     8,s
                      (        forth.asm):02972         * Shift the bitmask 1 bit right.
F475 EC62             (        forth.asm):02973 (5+1)   @cvt5   ldd     2,s
F477 1044             (        forth.asm):02974 (2)             lsrd
F479 ED62             (        forth.asm):02975 (5+1)           std     2,s
F47B EC64             (        forth.asm):02976 (5+1)           ldd     4,s
F47D 1046             (        forth.asm):02977 (2)             rord
F47F ED64             (        forth.asm):02978 (5+1)           std     4,s
F481 115A             (        forth.asm):02979 (2)             decf
F483 2CB8             (        forth.asm):02980 (3)             bge     @cvt1
                      (        forth.asm):02981         * Convert the remainder to a digit expressed in BASE.
F485 E661             (        forth.asm):02982 (4+1)           ldb     1,s
F487 8630             (        forth.asm):02983 (2)             lda     #'0
F489 C10A             (        forth.asm):02984 (2)             cmpb    #10             B has the digit we want converted to BASE
F48B 2502             (        forth.asm):02985 (3)             bcs     @cvtdgt
F48D 8637             (        forth.asm):02986 (2)             lda     #'A-10
F48F 103089           (        forth.asm):02987 (4)     @cvtdgt addr    a,b
F492 8D20             (        forth.asm):02988 (6)             bsr     INSBPAD         Prepend B to the string currently in PAD
F494 0D2F             (        forth.asm):02989 (4)             tst     CVTFCN
F496 2711             (        forth.asm):02990 (3)             beq     @cvtend         Function 0 is straight #, i.e. we're done here
                      (        forth.asm):02991         * Function 1 is #S, we iterate unless the quotient is 0.
F498 EC68             (        forth.asm):02992 (5+1)           ldd     8,s
F49A 10AA66           (        forth.asm):02993 (6+1)           ord     6,s
F49D 270A             (        forth.asm):02994 (3)             beq     @cvtend
F49F AE68             (        forth.asm):02995 (5+1)           ldx     8,s             New numerator low
F4A1 10A666           (        forth.asm):02996 (6+1)           ldw     6,s             New numerator high
F4A4 326E             (        forth.asm):02997 (4+1)           leas    14,s            Discard the stack frame
F4A6 7EF426           (        forth.asm):02998 (3)             jmp     CVT1            And go at it again
                      (        forth.asm):02999         * Push back the quotient on the data stack (low then high cell).
F4A9 AE68             (        forth.asm):03000 (5+1)   @cvtend ldx     8,s
F4AB 3610             (        forth.asm):03001                 UCNPUSH
F4AD AE66             (        forth.asm):03002 (5+1)           ldx     6,s
F4AF 326E             (        forth.asm):03003 (4+1)           leas    14,s            Discard the stack frame
F4B1 3610             (        forth.asm):03004                 UCNPUSH
F4B3 39               (        forth.asm):03005 (4)             rts
                      (        forth.asm):03006         
                      (        forth.asm):03007         * Insert the character in B in front of the string at PADBUF.
F4B4 8E0139           (        forth.asm):03008 (3)     INSBPAD ldx     #PADBUF
F4B7 BDE1A8           (        forth.asm):03009 (7)             jsr     SLEN
F4BA 103061           (        forth.asm):03010 (4)             addr    w,x             X points to the PAD string's NUL terminator
F4BD 105C             (        forth.asm):03011 (2)             incw                    Include the terminator
F4BF 3101             (        forth.asm):03012 (4+1)           leay    1,x
F4C1 113912           (        forth.asm):03013 (6+?)           tfm     x-,y-
F4C4 D739             (        forth.asm):03014 (3)             stb     PADBUF
F4C6 39               (        forth.asm):03015 (4)             rts
                      (        forth.asm):03016         
F4C7 02               (        forth.asm):03017         CVTB    fcb     2
F4C8 3C23             (        forth.asm):03018                 fcc     '<#'
F4CA F417             (        forth.asm):03019                 fdb     CVT
F4CC C7               (        forth.asm):03020                 RFCS
F4CD BDE2CD           (        forth.asm):03021 (7)             jsr     CKBASE          Sanity check. BASE can be altered at any time
F4D0 0F39             (        forth.asm):03022 (5)             clr     PADBUF
F4D2 39               (        forth.asm):03023 (4)             rts
                      (        forth.asm):03024         
F4D3 01               (        forth.asm):03025         DOT     fcb     1               79-STANDARD (REQ193)
F4D4 2E               (        forth.asm):03026                 fcc     '.'
F4D5 F4C7             (        forth.asm):03027                 fdb     CVTB
F4D7 C7               (        forth.asm):03028                 RFCS
F4D8 8601             (        forth.asm):03029 (2)             lda     #1
F4DA 9731             (        forth.asm):03030 (3)             sta     CVISSGN         Force a signed number conversion
F4DC BDE6BD           (        forth.asm):03031 (7)     ptop0   jsr     NPOP
F4DF BDE341           (        forth.asm):03032 (7)             jsr     CVNSTR
F4E2 8E039E           (        forth.asm):03033 (3)             ldx     #TBUFF
F4E5 8620             (        forth.asm):03034 (2)             lda     #SP
F4E7 A180             (        forth.asm):03035 (4+1)   @ptop1  cmpa    ,x+             Skip leading spaces
F4E9 27FC             (        forth.asm):03036 (3)             beq     @ptop1
F4EB 301F             (        forth.asm):03037 (4+1)           leax    -1,x            Point to actual string start address
F4ED BDE1DB           (        forth.asm):03038 (7)             jsr     PUTS
F4F0 7EE1B7           (        forth.asm):03039 (3)             jmp     PUTCH           Extra space after printing a number
                      (        forth.asm):03040         
F4F3 02               (        forth.asm):03041         UDOT    fcb     2               79-STANDARD (REQ106)
F4F4 552E             (        forth.asm):03042                 fcc     'U.'
F4F6 F4D3             (        forth.asm):03043                 fdb     DOT
F4F8 C7               (        forth.asm):03044                 RFCS
F4F9 0F31             (        forth.asm):03045 (5)             clr     CVISSGN         Conversion is unsigned
F4FB 20DF             (        forth.asm):03046 (3)             bra     ptop0
                      (        forth.asm):03047         
F4FD 02               (        forth.asm):03048         DOTR    fcb     2               79-STANDARD (REF)
F4FE 2E52             (        forth.asm):03049                 fcc     '.R'
F500 F4F3             (        forth.asm):03050                 fdb     UDOT
F502 C7               (        forth.asm):03051                 RFCS
F503 8601             (        forth.asm):03052 (2)             lda     #1
F505 9731             (        forth.asm):03053 (3)             sta     CVISSGN
F507 BDE6BD           (        forth.asm):03054 (7)     DOTR0   jsr     NPOP
F50A 3410             (        forth.asm):03055 (4+2)           pshs    x               Length parameter value
F50C BDE6BD           (        forth.asm):03056 (7)             jsr     NPOP
F50F BDE341           (        forth.asm):03057 (7)             jsr     CVNSTR
F512 8E039E           (        forth.asm):03058 (3)             ldx     #TBUFF
F515 8620             (        forth.asm):03059 (2)             lda     #SP
F517 A180             (        forth.asm):03060 (4+1)   @dotr1  cmpa    ,x+
F519 27FC             (        forth.asm):03061 (3)             beq     @dotr1          Skip leading spaces
F51B 301F             (        forth.asm):03062 (4+1)           leax    -1,x
F51D BDE1A8           (        forth.asm):03063 (7)             jsr     SLEN            String length is returned in W
F520 3506             (        forth.asm):03064 (4+2)           puls    d
F522 1E06             (        forth.asm):03065 (5)             exg     d,w
F524 103206           (        forth.asm):03066 (4)             subr    d,w
F527 2F0D             (        forth.asm):03067 (3)             ble     @dotr3
F529 8620             (        forth.asm):03068 (2)             lda     #SP
F52B 105D             (        forth.asm):03069 (2)     @dotr2  tstw
F52D 2707             (        forth.asm):03070 (3)             beq     @dotr3
F52F BDE1B7           (        forth.asm):03071 (7)             jsr     PUTCH
F532 105A             (        forth.asm):03072 (2)             decw
F534 20F5             (        forth.asm):03073 (3)             bra     @dotr2
F536 7EE1DB           (        forth.asm):03074 (3)     @dotr3  jmp     PUTS
                      (        forth.asm):03075         
F539 03               (        forth.asm):03076         UDOTR   fcb     3               79-STANDARD (REF216)
F53A 552E52           (        forth.asm):03077                 fcc     'U.R'
F53D F4FD             (        forth.asm):03078                 fdb     DOTR
F53F C7               (        forth.asm):03079                 RFCS
F540 0F31             (        forth.asm):03080 (5)             clr     CVISSGN
F542 20C3             (        forth.asm):03081 (3)             bra     DOTR0
                      (        forth.asm):03082         
F544 02               (        forth.asm):03083         BL      fcb     2               79-STANDARD (REF176)
F545 424C             (        forth.asm):03084                 fcc     'BL'
F547 F539             (        forth.asm):03085                 fdb     UDOTR
F549 C7               (        forth.asm):03086                 RFCS
F54A 8E0020           (        forth.asm):03087 (3)             ldx     #SP
F54D 7EE6AF           (        forth.asm):03088 (3)             jmp     NPUSH
                      (        forth.asm):03089         
F550 05               (        forth.asm):03090         SPACE   fcb     5               79-STANDARD (REQ232)
F551 5350414345       (        forth.asm):03091                 fcc     'SPACE'
F556 F544             (        forth.asm):03092                 fdb     BL
F558 C7               (        forth.asm):03093                 RFCS
F559 8620             (        forth.asm):03094 (2)             lda     #SP
F55B 7EE1B7           (        forth.asm):03095 (3)             jmp     PUTCH
                      (        forth.asm):03096         
F55E 06               (        forth.asm):03097         SPACES  fcb     6               79-STANDARD (REQ231)
F55F 535041434553     (        forth.asm):03098                 fcc     'SPACES'
F565 F550             (        forth.asm):03099                 fdb     SPACE
F567 C7               (        forth.asm):03100                 RFCS
F568 BDE6BD           (        forth.asm):03101 (7)             jsr     NPOP
F56B 1F16             (        forth.asm):03102 (4)             tfr     x,w
F56D 8620             (        forth.asm):03103 (2)             lda     #SP
F56F BDE1B7           (        forth.asm):03104 (7)     @spcs1  jsr     PUTCH
F572 105A             (        forth.asm):03105 (2)             decw
F574 26F9             (        forth.asm):03106 (3)             bne     @spcs1
F576 39               (        forth.asm):03107 (4)             rts
                      (        forth.asm):03108         
F577 04               (        forth.asm):03109         PAGE    fcb     4               79-STANDARD (REF)
F578 50414745         (        forth.asm):03110                 fcc     'PAGE'
F57C F55E             (        forth.asm):03111                 fdb     SPACES
F57E C7               (        forth.asm):03112                 RFCS
F57F 8EFDC5           (        forth.asm):03113 (3)             ldx     #CSVT100
F582 7EE1DB           (        forth.asm):03114 (3)             jmp     PUTS
                      (        forth.asm):03115         
F585 02               (        forth.asm):03116         CRLF    fcb     2               79-STANDARD (REQ160)
F586 4352             (        forth.asm):03117                 fcc     'CR'
F588 F577             (        forth.asm):03118                 fdb     PAGE
F58A C7               (        forth.asm):03119                 RFCS
F58B 7EE1E8           (        forth.asm):03120 (3)             jmp     PUTCR
                      (        forth.asm):03121         
F58E 03               (        forth.asm):03122         PAD     fcb     3               79-STANDARD (REQ226)
F58F 504144           (        forth.asm):03123                 fcc     'PAD'
F592 F585             (        forth.asm):03124                 fdb     CRLF
F594 C7               (        forth.asm):03125                 RFCS
F595 8E0139           (        forth.asm):03126 (3)             ldx     #PADBUF
F598 7EE6AF           (        forth.asm):03127 (3)             jmp     NPUSH
                      (        forth.asm):03128         
F59B 04               (        forth.asm):03129         TYPE    fcb     4               79-STANDARD (REQ222)
F59C 54595045         (        forth.asm):03130                 fcc     'TYPE'          ( addr bcount -- )
F5A0 F58E             (        forth.asm):03131                 fdb     PAD
F5A2 C7               (        forth.asm):03132                 RFCS
F5A3 BDE6BD           (        forth.asm):03133 (7)             jsr     NPOP            Character count (signed)
F5A6 1F16             (        forth.asm):03134 (4)             tfr     x,w
F5A8 BDE6BD           (        forth.asm):03135 (7)             jsr     NPOP            Buffer address
F5AB 105D             (        forth.asm):03136 (2)             tstw                    
F5AD 2E01             (        forth.asm):03137 (3)     @type0  bgt     @type1
F5AF 39               (        forth.asm):03138 (4)             rts
F5B0 A680             (        forth.asm):03139 (4+1)   @type1  lda     ,x+
F5B2 BDE1B7           (        forth.asm):03140 (7)             jsr     PUTCH
F5B5 105A             (        forth.asm):03141 (2)             decw
F5B7 20F4             (        forth.asm):03142 (3)             bra     @type0
                      (        forth.asm):03143         
F5B9 05               (        forth.asm):03144         COUNT   fcb     5               79-STANDARD (REQ159)
F5BA 434F554E54       (        forth.asm):03145                 fcc     'COUNT'
F5BF F59B             (        forth.asm):03146                 fdb     TYPE
F5C1 C7               (        forth.asm):03147                 RFCS
F5C2 BDE6BD           (        forth.asm):03148 (7)             jsr     NPOP
F5C5 E680             (        forth.asm):03149 (4+1)           ldb     ,x+
F5C7 3610             (        forth.asm):03150                 UCNPUSH                 B is preserved
F5C9 4F               (        forth.asm):03151 (1)             clra
F5CA 1F01             (        forth.asm):03152 (4)             tfr     d,x
F5CC 7EE6AF           (        forth.asm):03153 (3)             jmp     NPUSH
                      (        forth.asm):03154         
F5CF 09               (        forth.asm):03155         DASHTR  fcb     9               79-STANDARD (REQ148)
F5D0 2D545241494C494E (        forth.asm):03156                 fcc     '-TRAILING'     ( addr n1 -- addr n2 )
     47
F5D9 F5B9             (        forth.asm):03157                 fdb     COUNT
F5DB C7               (        forth.asm):03158                 RFCS
F5DC BDE6BD           (        forth.asm):03159 (7)             jsr     NPOP            N1 to X
F5DF 1F10             (        forth.asm):03160 (4)             tfr     x,d             N1 to D
F5E1 BDE6BD           (        forth.asm):03161 (7)             jsr     NPOP            ADDR to X
F5E4 1F12             (        forth.asm):03162 (4)             tfr     x,y             Backup to I
F5E6 104D             (        forth.asm):03163 (2)             tstd                    Input character count (N1)
F5E8 2D1B             (        forth.asm):03164 (3)             blt     @invpar         Cannot be < 0
F5EA 308B             (        forth.asm):03165 (4+2)           leax    d,x             X has ADDR+N1
F5EC 1F06             (        forth.asm):03166 (4)             tfr     d,w             W has N1
F5EE 105D             (        forth.asm):03167 (2)     @cknxtb tstw
F5F0 270A             (        forth.asm):03168 (3)             beq     @ckdone
F5F2 A682             (        forth.asm):03169 (4+1)           lda     ,-x
F5F4 105A             (        forth.asm):03170 (2)             decw
F5F6 8120             (        forth.asm):03171 (2)             cmpa    #SP
F5F8 27F4             (        forth.asm):03172 (3)             beq     @cknxtb         Iterate over to the previous byte
F5FA 105C             (        forth.asm):03173 (2)             incw
F5FC 1F21             (        forth.asm):03174 (4)     @ckdone tfr     y,x
F5FE 3610             (        forth.asm):03175                 UCNPUSH                 String base address
F600 1F61             (        forth.asm):03176 (4)             tfr     w,x
F602 3610             (        forth.asm):03177                 UCNPUSH                 Updated character count
F604 39               (        forth.asm):03178 (4)             rts
F605 C60D             (        forth.asm):03179 (2)     @invpar ldb     #13             Invalid parameter
F607 BDE636           (        forth.asm):03180 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):03181         
F60A 06               (        forth.asm):03182         EXPECT  fcb     6               79-STANDARD (REQ189)
F60B 455850454354     (        forth.asm):03183                 fcc     'EXPECT'        ( addr count -- )
F611 F5CF             (        forth.asm):03184                 fdb     DASHTR
F613 C7               (        forth.asm):03185                 RFCS
F614 BDE6BD           (        forth.asm):03186 (7)             jsr     NPOP
F617 1F10             (        forth.asm):03187 (4)             tfr     x,d             Buffer length to B
F619 BDE6BD           (        forth.asm):03188 (7)             jsr     NPOP            Buffer address to X. B is preserved
F61C 5D               (        forth.asm):03189 (1)             tstb
F61D 2701             (        forth.asm):03190 (3)             beq     @expct1
F61F 5C               (        forth.asm):03191 (1)             incb                    Account for the NUL terminator
F620 7EE1FE           (        forth.asm):03192 (3)     @expct1 jmp     GETS
                      (        forth.asm):03193         
F623 49               (        forth.asm):03194         TERPRET fcb     $49             79-STANDARD (REF) I make this compile time only
F624 494E544552505245 (        forth.asm):03195                 fcc     'INTERPRET'     ( -- )
     54
F62D F60A             (        forth.asm):03196                 fdb     EXPECT
F62F C7               (        forth.asm):03197                 RFCS
                      (        forth.asm):03198         * Obtain a base buffer address based on the value of BLK.
F630 DC24             (        forth.asm):03199 (4)             ldd     UBLK
F632 2605             (        forth.asm):03200 (3)             bne     @notser
F634 8E02CA           (        forth.asm):03201 (3)             ldx     #CMDBUF         Base buffer address for serial line input
F637 200A             (        forth.asm):03202 (3)             bra     @rsolvd
                      (        forth.asm):03203         * BLK is NZ, map the block in memory.
F639 1F01             (        forth.asm):03204 (4)     @notser tfr     d,x             Block number to X
F63B BDE6AF           (        forth.asm):03205 (7)             jsr     NPUSH
F63E BDE90F           (        forth.asm):03206                 RFXT    jsr,BLOCK+8     XT for BLOCK. Map the block in
F641 3710             (        forth.asm):03207                 UCNPOP                  Retrieve buffer address (to X)
                      (        forth.asm):03208         * Note: >IN is supposed to have been set by the caller!
F643 9F1C             (        forth.asm):03209 (4)     @rsolvd stx     BSBFADR
F645 DC22             (        forth.asm):03210 (4)             ldd     UTOIN
F647 103001           (        forth.asm):03211 (4)             addr    d,x
F64A 7EE0C0           (        forth.asm):03212 (3)             jmp     _INTERP         Finally invoke _INTERP.
                      (        forth.asm):03213         
F64D 04               (        forth.asm):03214         LOAD    fcb     4               79-STANDARD (REQ202)
F64E 4C4F4144         (        forth.asm):03215                 fcc     'LOAD'          ( blk -- )
F652 F623             (        forth.asm):03216                 fdb     TERPRET
F654 C7               (        forth.asm):03217                 RFCS
F655 BDE6BD           (        forth.asm):03218 (7)             jsr     NPOP
F658 1037C1           (        forth.asm):03219 (4)             cmpr    0,x
F65B 2601             (        forth.asm):03220 (3)             bne     LOAD1
F65D 39               (        forth.asm):03221 (4)             rts                     Block 0 is _not_ loadable
F65E 3410             (        forth.asm):03222 (4+2)   LOAD1   pshs    x
F660 9E24             (        forth.asm):03223 (4)             ldx     UBLK
F662 BDE6CC           (        forth.asm):03224 (7)             jsr     RPUSH           Push BLK on the return stack
F665 9E22             (        forth.asm):03225 (4)             ldx     UTOIN
F667 BDE6CC           (        forth.asm):03226 (7)             jsr     RPUSH           Push >IN on the return stack
F66A 3510             (        forth.asm):03227 (4+2)           puls    x
F66C 9F24             (        forth.asm):03228 (4)             stx     UBLK            Update BLK with the LOAD argument
F66E 104F             (        forth.asm):03229 (2)             clrd
F670 DD22             (        forth.asm):03230 (4)             std     UTOIN           Clear >IN
                      (        forth.asm):03231         * Map the new BLK in, interpret code from there.
F672 8DBC             (        forth.asm):03232                 RFXT    bsr,TERPRET+12  XT for INTERPRET
F674 BDE6EA           (        forth.asm):03233 (7)             jsr     RPOP
F677 9F22             (        forth.asm):03234 (4)             stx     UTOIN           Restore >IN from the return stack
F679 BDE6EA           (        forth.asm):03235 (7)             jsr     RPOP
F67C 9F24             (        forth.asm):03236 (4)             stx     UBLK            Restore BLK from the return stack
F67E 7EE703           (        forth.asm):03237 (3)             jmp     BKIN2PT         Map BLK in (if needed) and update BSBFADR
                      (        forth.asm):03238         
F681 04               (        forth.asm):03239         THRU    fcb     4               79-STANDARD (REF)
F682 54485255         (        forth.asm):03240                 fcc     'THRU'          ( lowblk highblk -- )
F686 F64D             (        forth.asm):03241                 fdb     LOAD
F688 C7               (        forth.asm):03242                 RFCS
F689 BDE6BD           (        forth.asm):03243 (7)             jsr     NPOP
F68C 1F12             (        forth.asm):03244 (4)             tfr     x,y             Y has highblk
F68E BDE6BD           (        forth.asm):03245 (7)             jsr     NPOP            X has lowblk--both are unsigned numbers
F691 103712           (        forth.asm):03246 (4)     @thrlop cmpr    x,y
F694 2401             (        forth.asm):03247 (3)             bhs     @cont           Limit is >= to the loop index
F696 39               (        forth.asm):03248 (4)             rts
F697 3430             (        forth.asm):03249 (4+4)   @cont   pshs    x,y             Backup loop parameters
F699 3610             (        forth.asm):03250                 UCNPUSH                 Current block number to the data stack
F69B 8DB8             (        forth.asm):03251                 RFXT    bsr,LOAD+7      XT for LOAD
F69D 3530             (        forth.asm):03252 (4+4)           puls    y,x             Retrieve loop parameters
F69F 3001             (        forth.asm):03253 (4+1)           leax    1,x             Iterate over to the next screen
F6A1 20EE             (        forth.asm):03254 (3)             bra     @thrlop
                      (        forth.asm):03255         
F6A3 83               (        forth.asm):03256         NXTBLK  fcb     $83             79-STANDARD (REF131)
F6A4 2D2D3E           (        forth.asm):03257                 fcc     '-->'           ( -- )
F6A7 F681             (        forth.asm):03258                 fdb     THRU
F6A9 C7               (        forth.asm):03259                 RFCS
F6AA 9E24             (        forth.asm):03260 (4)             ldx     UBLK
F6AC 3001             (        forth.asm):03261 (4+1)           leax    1,x
F6AE DC24             (        forth.asm):03262 (4)     NXTBLK1 ldd     UBLK
F6B0 2603             (        forth.asm):03263 (3)             bne     @nfrmb0         Not invoked from block 0 (the console)
                      (        forth.asm):03264         * --> or CONTINUED are being invoked from the console. Flag that condition
                      (        forth.asm):03265         * as a hint to the interpreter so that feedback is provided even if we are
                      (        forth.asm):03266         * back from a block.
F6B2 4C               (        forth.asm):03267 (1)             inca                    1 to A
F6B3 9735             (        forth.asm):03268 (3)             sta     NBCTFB0
F6B5 9F24             (        forth.asm):03269 (4)     @nfrmb0 stx     UBLK            Update BLK
F6B7 104F             (        forth.asm):03270 (2)             clrd
F6B9 DD22             (        forth.asm):03271 (4)             std     UTOIN           0 >IN !
                      (        forth.asm):03272         * Map the new BLK in, interpret code from there.
F6BB 7EF630           (        forth.asm):03273                 RFXT    jmp,TERPRET+12  XT for INTERPRET
                      (        forth.asm):03274         
F6BE 89               (        forth.asm):03275         CONTIND fcb     $89             79-STANDARD (REF)
F6BF 434F4E54494E5545 (        forth.asm):03276                 fcc     'CONTINUED'     ( nextblk -- )
     44
F6C8 F6A3             (        forth.asm):03277                 fdb     NXTBLK
F6CA C7               (        forth.asm):03278                 RFCS
F6CB BDE6BD           (        forth.asm):03279 (7)             jsr     NPOP            NEXTBLK to X
F6CE 1037C1           (        forth.asm):03280 (4)             cmpr    0,x             Cannot interpret from block 0!
F6D1 26DB             (        forth.asm):03281 (3)             bne     NXTBLK1
F6D3 C60D             (        forth.asm):03282 (2)             ldb     #13             Illegal argument
F6D5 BDE636           (        forth.asm):03283 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):03284         
F6D8 02               (        forth.asm):03285         MILLIS  fcb     2               79-STANDARD (REF)
F6D9 4D53             (        forth.asm):03286                 fcc     'MS'            ( mscount -- )
F6DB F6BE             (        forth.asm):03287                 fdb     CONTIND
F6DD C7               (        forth.asm):03288                 RFCS
F6DE BDE6BD           (        forth.asm):03289 (7)             jsr     NPOP
F6E1 1037C1           (        forth.asm):03290 (4)             cmpr    0,x
F6E4 2601             (        forth.asm):03291 (3)             bne     MILLIS1
F6E6 39               (        forth.asm):03292 (4)             rts
F6E7 CC03E2           (        forth.asm):03293 (3)     MILLIS1 ldd     #MSLCNT
F6EA 104A             (        forth.asm):03294 (2)     @ms2    decd
F6EC 26FC             (        forth.asm):03295 (3)             bne     @ms2
F6EE 301F             (        forth.asm):03296 (4+1)           leax    -1,x
F6F0 26F5             (        forth.asm):03297 (3)             bne     MILLIS1
F6F2 39               (        forth.asm):03298 (4)             rts
                      (        forth.asm):03299         
F6F3 04               (        forth.asm):03300         KEYP    fcb     4               ANSI (Facility)
F6F4 4B45593F         (        forth.asm):03301                 fcc     'KEY?'          ( -- flag )
F6F8 F6D8             (        forth.asm):03302                 fdb     MILLIS
F6FA C7               (        forth.asm):03303                 RFCS
F6FB 1FC1             (        forth.asm):03304 (4)             tfr     0,x
F6FD 8615             (        forth.asm):03305 (2)             lda     #ACIRTS0
F6FF B7D800           (        forth.asm):03306 (4)             sta     ACIACTL         Assert RTS
F702 8E0028           (        forth.asm):03307 (3)             ldx     #40
F705 8DE0             (        forth.asm):03308 (6)             bsr     MILLIS1         Wait for 40 milliseconds
                      (        forth.asm):03309         * X is guaranteed to be 0 upon return from MILLIS1.
F707 8601             (        forth.asm):03310 (2)             lda     #ACIRDRF
F709 B5D800           (        forth.asm):03311 (4)             bita    ACIACTL
F70C 2702             (        forth.asm):03312 (3)             beq     @keyp1
F70E 3001             (        forth.asm):03313 (4+1)           leax    1,x             Return the 79-STANDARD true flag
F710 8655             (        forth.asm):03314 (2)     @keyp1  lda     #ACIRTS1
F712 B7D800           (        forth.asm):03315 (4)             sta     ACIACTL         Negate RTS
F715 7EE6AF           (        forth.asm):03316 (3)             jmp     NPUSH
                      (        forth.asm):03317         
F718 03               (        forth.asm):03318         KEY     fcb     3               79-STANDARD (REQ100)
F719 4B4559           (        forth.asm):03319                 fcc     'KEY'
F71C F6F3             (        forth.asm):03320                 fdb     KEYP
F71E C7               (        forth.asm):03321                 RFCS
F71F BDE1C6           (        forth.asm):03322 (7)             jsr     GETCH
F722 1F89             (        forth.asm):03323 (4)             tfr     a,b
F724 4F               (        forth.asm):03324 (1)             clra
F725 1F01             (        forth.asm):03325 (4)             tfr     d,x
F727 7EE6AF           (        forth.asm):03326 (3)             jmp     NPUSH
                      (        forth.asm):03327         
F72A 04               (        forth.asm):03328         EMIT    fcb     4               79-STANDARD (REQ207)
F72B 454D4954         (        forth.asm):03329                 fcc     'EMIT'
F72F F718             (        forth.asm):03330                 fdb     KEY
F731 C7               (        forth.asm):03331                 RFCS
F732 BDE6BD           (        forth.asm):03332 (7)             jsr     NPOP
F735 1F10             (        forth.asm):03333 (4)             tfr     x,d
F737 1F98             (        forth.asm):03334 (4)             tfr     b,a
F739 7EE1B7           (        forth.asm):03335 (3)             jmp     PUTCH
                      (        forth.asm):03336         
F73C 01               (        forth.asm):03337         PLUS    fcb     1               79-STANDARD (REQ121)
F73D 2B               (        forth.asm):03338                 fcc     '+'             ( n1 n2 -- sum )
F73E F72A             (        forth.asm):03339                 fdb     EMIT
F740 C7               (        forth.asm):03340                 RFCS
F741 CC0246BDE336     (        forth.asm):03341                 MINDREQ 2               We need at least two cells stacked up
F747 EC42             (        forth.asm):03342 (5+1)           ldd     2,u             N1
F749 E3C4             (        forth.asm):03343 (5+0)           addd    ,u              N2
F74B ED42             (        forth.asm):03344 (5+1)           std     2,u             SUM
F74D 3342             (        forth.asm):03345 (4+1)           leau    2,u             Drop the top cell
F74F 39               (        forth.asm):03346 (4)             rts
                      (        forth.asm):03347         
F750 02               (        forth.asm):03348         ONEP    fcb     2               79-STANDARD (REQ107)
F751 312B             (        forth.asm):03349                 fcc     '1+'
F753 F73C             (        forth.asm):03350                 fdb     PLUS
F755 C7               (        forth.asm):03351                 RFCS
F756 CC0248BDE336     (        forth.asm):03352                 MINDREQ 1               We need at least one cell stacked up
F75C ECC4             (        forth.asm):03353 (5+0)           ldd     ,u
F75E 104C             (        forth.asm):03354 (2)             incd
F760 EDC4             (        forth.asm):03355 (5+0)           std     ,u
F762 39               (        forth.asm):03356 (4)             rts
                      (        forth.asm):03357         
F763 02               (        forth.asm):03358         TWOP    fcb     2               79-STANDARD (REQ135)
F764 322B             (        forth.asm):03359                 fcc     '2+'            ( n -- n+2 )
F766 F750             (        forth.asm):03360                 fdb     ONEP
F768 C7               (        forth.asm):03361                 RFCS
F769 CC0248BDE336     (        forth.asm):03362                 MINDREQ 1
F76F ECC4             (        forth.asm):03363 (5+0)           ldd     ,u
F771 C30002           (        forth.asm):03364 (3)             addd    #2
F774 EDC4             (        forth.asm):03365 (5+0)           std     ,u
F776 39               (        forth.asm):03366 (4)             rts
                      (        forth.asm):03367         
F777 01               (        forth.asm):03368         MINUS   fcb     1               79-STANDARD (REQ134)
F778 2D               (        forth.asm):03369                 fcc     '-'             ( n1 n2 -- dif )
F779 F763             (        forth.asm):03370                 fdb     TWOP
F77B C7               (        forth.asm):03371                 RFCS
F77C CC0246BDE336     (        forth.asm):03372                 MINDREQ 2               We need at least two cells stacked up
F782 EC42             (        forth.asm):03373 (5+1)           ldd     2,u             N1
F784 A3C4             (        forth.asm):03374 (5+0)           subd    ,u              N2
F786 ED42             (        forth.asm):03375 (5+1)           std     2,u             DIF
F788 3342             (        forth.asm):03376 (4+1)           leau    2,u             Drop the top cell
F78A 39               (        forth.asm):03377 (4)             rts
                      (        forth.asm):03378         
F78B 02               (        forth.asm):03379         ONEM    fcb     2               79-STANDARD (REQ105)
F78C 312D             (        forth.asm):03380                 fcc     '1-'
F78E F777             (        forth.asm):03381                 fdb     MINUS
F790 C7               (        forth.asm):03382                 RFCS
F791 CC0248BDE336     (        forth.asm):03383                 MINDREQ 1               We need at least one cell stacked up
F797 ECC4             (        forth.asm):03384 (5+0)           ldd     ,u
F799 104A             (        forth.asm):03385 (2)             decd
F79B EDC4             (        forth.asm):03386 (5+0)           std     ,u
F79D 39               (        forth.asm):03387 (4)             rts
                      (        forth.asm):03388         
F79E 02               (        forth.asm):03389         TWOM    fcb     2               79-STANDARD (REQ129)
F79F 322D             (        forth.asm):03390                 fcc     '2-'
F7A1 F78B             (        forth.asm):03391                 fdb     ONEM
F7A3 C7               (        forth.asm):03392                 RFCS
F7A4 CC0248BDE336     (        forth.asm):03393                 MINDREQ 1               We need at least one cell stacked up
F7AA ECC4             (        forth.asm):03394 (5+0)           ldd     ,u
F7AC 830002           (        forth.asm):03395 (3)             subd    #2
F7AF EDC4             (        forth.asm):03396 (5+0)           std     ,u
F7B1 39               (        forth.asm):03397 (4)             rts
                      (        forth.asm):03398         
F7B2 01               (        forth.asm):03399         ZEROL   fcb     1               Non-standard
F7B3 30               (        forth.asm):03400                 fcc     '0'
F7B4 F79E             (        forth.asm):03401                 fdb     TWOM
F7B6 C7               (        forth.asm):03402                 RFCS
F7B7 1FC1             (        forth.asm):03403 (4)             tfr     0,x
F7B9 7EE6AF           (        forth.asm):03404 (3)             jmp     NPUSH
                      (        forth.asm):03405         
F7BC 01               (        forth.asm):03406         ONEL    fcb     1               Non-standard
F7BD 31               (        forth.asm):03407                 fcc     '1'
F7BE F7B2             (        forth.asm):03408                 fdb     ZEROL
F7C0 C7               (        forth.asm):03409                 RFCS
F7C1 8E0001           (        forth.asm):03410 (3)             ldx     #1
F7C4 7EE6AF           (        forth.asm):03411 (3)             jmp     NPUSH
                      (        forth.asm):03412         
F7C7 01               (        forth.asm):03413         TWOL    fcb     1               Non-standard
F7C8 32               (        forth.asm):03414                 fcc     '2'
F7C9 F7BC             (        forth.asm):03415                 fdb     ONEL
F7CB C7               (        forth.asm):03416                 RFCS
F7CC 8E0002           (        forth.asm):03417 (3)             ldx     #2
F7CF 7EE6AF           (        forth.asm):03418 (3)             jmp     NPUSH
                      (        forth.asm):03419         
F7D2 05               (        forth.asm):03420         SHIFT   fcb     5               79-STANDARD (Ref)
F7D3 5348494654       (        forth.asm):03421                 fcc     'SHIFT'
F7D8 F7C7             (        forth.asm):03422                 fdb     TWOL
F7DA C7               (        forth.asm):03423                 RFCS
F7DB CC0246BDE336     (        forth.asm):03424                 MINDREQ 2               Two cells need to be stacked up
F7E1 10A6C4           (        forth.asm):03425 (6+0)           ldw     ,u              Shift bitcount
F7E4 EC42             (        forth.asm):03426 (5+1)           ldd     2,u             The data itself
F7E6 105D             (        forth.asm):03427 (2)     @shftlp tstw
F7E8 270E             (        forth.asm):03428 (3)             beq     @shfdon
F7EA 2D06             (        forth.asm):03429 (3)             blt     @shftrg
F7EC 1048             (        forth.asm):03430 (2)             lsld                    Shift left (W is positive)
F7EE 105A             (        forth.asm):03431 (2)             decw
F7F0 20F4             (        forth.asm):03432 (3)             bra     @shftlp
F7F2 1044             (        forth.asm):03433 (2)     @shftrg lsrd                    Shift right (W is negative)
F7F4 105C             (        forth.asm):03434 (2)             incw
F7F6 20EE             (        forth.asm):03435 (3)             bra     @shftlp
F7F8 ED42             (        forth.asm):03436 (5+1)   @shfdon std     2,u             Return value stored there
F7FA 3342             (        forth.asm):03437 (4+1)           leau    2,u             Drop one cell from the data stack
F7FC 39               (        forth.asm):03438 (4)             rts
                      (        forth.asm):03439         
                      (        forth.asm):03440         * Signed multiplication by hardware support.
F7FD 01               (        forth.asm):03441         MULT    fcb     1               79-STANDARD (REQ138)
F7FE 2A               (        forth.asm):03442                 fcc     '*'
F7FF F7D2             (        forth.asm):03443                 fdb     SHIFT
F801 C7               (        forth.asm):03444                 RFCS
F802 CC0246BDE336     (        forth.asm):03445                 MINDREQ 2               Two cells need to be stacked up
F808 EC42             (        forth.asm):03446 (5+1)           ldd     2,u
F80A 11AFC4           (        forth.asm):03447 (30+0)          muld    ,u
F80D 10A742           (        forth.asm):03448 (6+1)           stw     2,u             Return only the lower 16 bits
F810 3342             (        forth.asm):03449 (4+1)           leau    2,u             Drop one cell from the data stack
F812 39               (        forth.asm):03450 (4)             rts
                      (        forth.asm):03451         
F813 02               (        forth.asm):03452         TWOTIM  fcb     2               79-STANDARD (REF)
F814 322A             (        forth.asm):03453                 fcc     '2*'
F816 F7FD             (        forth.asm):03454                 fdb     MULT
F818 C7               (        forth.asm):03455                 RFCS
F819 CC0248BDE336     (        forth.asm):03456                 MINDREQ 1               One cell needs to be stacked up
F81F ECC4             (        forth.asm):03457 (5+0)           ldd     ,u
F821 1048             (        forth.asm):03458 (2)             asld
F823 EDC4             (        forth.asm):03459 (5+0)           std     ,u
F825 39               (        forth.asm):03460 (4)             rts
                      (        forth.asm):03461         
F826 02               (        forth.asm):03462         TWODIV  fcb     2
F827 322F             (        forth.asm):03463                 fcc     '2/'
F829 F813             (        forth.asm):03464                 fdb     TWOTIM
F82B C7               (        forth.asm):03465                 RFCS
F82C CC0248BDE336     (        forth.asm):03466                 MINDREQ 1               One cell needs to be stacked up
F832 ECC4             (        forth.asm):03467 (5+0)           ldd     ,u
F834 1047             (        forth.asm):03468 (2)             asrd
F836 EDC4             (        forth.asm):03469 (5+0)           std     ,u
F838 39               (        forth.asm):03470 (4)             rts
                      (        forth.asm):03471         
                      (        forth.asm):03472         * /, MOD and /MOD are essentially the same function returning
                      (        forth.asm):03473         * the different parts returned by DIVQ.
                      (        forth.asm):03474         * We use a global variable to distinguish which functionality
                      (        forth.asm):03475         * is being requested:
                      (        forth.asm):03476         * 0: return the modulo and the quotient (/MOD).
                      (        forth.asm):03477         * 1: return the modulo only (MOD).
                      (        forth.asm):03478         * 2: return the quotient only (/).
F839 01               (        forth.asm):03479         DIV     fcb     1
F83A 2F               (        forth.asm):03480                 fcc     '/'
F83B F826             (        forth.asm):03481                 fdb     TWODIV
F83D C7               (        forth.asm):03482                 RFCS
F83E 8602             (        forth.asm):03483 (2)             lda     #2
F840 972D             (        forth.asm):03484 (3)             sta     DIVFCN
F842 CC0246BDE336     (        forth.asm):03485         DIV1    MINDREQ 2
                      (        forth.asm):03486         * Division by zero conditions are dealt with through the trap handler.
F848 104F             (        forth.asm):03487 (2)             clrd
F84A 10A642           (        forth.asm):03488 (6+1)           ldw     2,u             Numerator
                      (        forth.asm):03489         * We need a sign extention from W to Q. SEX and SEXW do not cut it.
F84D 114D             (        forth.asm):03490 (2)             tste
F84F 2A02             (        forth.asm):03491 (3)             bpl     @div2
F851 1043             (        forth.asm):03492 (2)             comd
F853 11AEC4           (        forth.asm):03493 (36)    @div2   divq    ,u              Quotient is returned in W, modulo in D
F856 0D2D             (        forth.asm):03494 (4)             tst     DIVFCN
F858 2606             (        forth.asm):03495 (3)             bne     @div3
F85A ED42             (        forth.asm):03496 (5+1)           std     2,u             Function 0: return the modulo and the quotient
F85C 10A7C4           (        forth.asm):03497 (6+0)           stw     ,u
F85F 39               (        forth.asm):03498 (4)             rts
F860 3342             (        forth.asm):03499 (4+1)   @div3   leau    2,u             Drop one cell from the data stack
F862 1F07             (        forth.asm):03500 (4)             tfr     d,v             Backup the modulo
F864 962D             (        forth.asm):03501 (3)             lda     DIVFCN
F866 8101             (        forth.asm):03502 (2)             cmpa    #1
F868 2605             (        forth.asm):03503 (3)             bne     @div4
F86A 1F70             (        forth.asm):03504 (4)             tfr     v,d             Restore the modulo
F86C EDC4             (        forth.asm):03505 (5+0)           std     ,u              Function 1: return only the modulo
F86E 39               (        forth.asm):03506 (4)             rts
F86F 10A7C4           (        forth.asm):03507 (6+0)   @div4   stw     ,u              Function 2: return only the quotient
F872 39               (        forth.asm):03508 (4)             rts
                      (        forth.asm):03509         
F873 03               (        forth.asm):03510         MOD     fcb     3
F874 4D4F44           (        forth.asm):03511                 fcc     'MOD'
F877 F839             (        forth.asm):03512                 fdb     DIV
F879 C7               (        forth.asm):03513                 RFCS
F87A 8601             (        forth.asm):03514 (2)             lda     #1
F87C 972D             (        forth.asm):03515 (3)             sta     DIVFCN
F87E 20C2             (        forth.asm):03516 (3)             bra     DIV1
                      (        forth.asm):03517         
F880 04               (        forth.asm):03518         MDIV    fcb     4
F881 2F4D4F44         (        forth.asm):03519                 fcc     '/MOD'
F885 F873             (        forth.asm):03520                 fdb     MOD
F887 C7               (        forth.asm):03521                 RFCS
F888 0F2D             (        forth.asm):03522 (5)             clr     DIVFCN
F88A 20B6             (        forth.asm):03523 (3)             bra     DIV1
                      (        forth.asm):03524         
F88C 02               (        forth.asm):03525         STRSLSH fcb     2
F88D 2A2F             (        forth.asm):03526                 fcc     '*/'            ( n1 n2 n3 -- n4 [n5] )
F88F F880             (        forth.asm):03527                 fdb     MDIV
F891 C7               (        forth.asm):03528                 RFCS
F892 8601             (        forth.asm):03529 (2)             lda     #1
F894 972E             (        forth.asm):03530 (3)             sta     STSLFCN
F896 CC0244BDE336     (        forth.asm):03531         STRSL1  MINDREQ 3
                      (        forth.asm):03532         * Division by zero conditions are dealt with through the trap handler.
F89C EC44             (        forth.asm):03533 (5+1)           ldd     4,u             N1
F89E 11AF42           (        forth.asm):03534 (30+1)          muld    2,u             N2
F8A1 11AEC4           (        forth.asm):03535 (36)            divq    ,u              N3
F8A4 3342             (        forth.asm):03536 (4+1)           leau    2,u
F8A6 0D2E             (        forth.asm):03537 (4)             tst     STSLFCN
F8A8 2606             (        forth.asm):03538 (3)             bne     @strsl2         Just the quotient, Ma'am!
F8AA ED42             (        forth.asm):03539 (5+1)           std     2,u             N4: the modulo
F8AC 10A7C4           (        forth.asm):03540 (6+0)           stw     ,u              N5: the quotient
F8AF 39               (        forth.asm):03541 (4)             rts
F8B0 3342             (        forth.asm):03542 (4+1)   @strsl2 leau    2,u
F8B2 10A7C4           (        forth.asm):03543 (6+0)           stw     ,u              N4
F8B5 39               (        forth.asm):03544 (4)             rts
                      (        forth.asm):03545         
F8B6 05               (        forth.asm):03546         STRSLMD fcb     5
F8B7 2A2F4D4F44       (        forth.asm):03547                 fcc     '*/MOD'
F8BC F88C             (        forth.asm):03548                 fdb     STRSLSH
F8BE C7               (        forth.asm):03549                 RFCS
F8BF 0F2E             (        forth.asm):03550 (5)             clr     STSLFCN
F8C1 20D3             (        forth.asm):03551 (3)             bra     STRSL1
                      (        forth.asm):03552         
                      (        forth.asm):03553         * Returns the current value of the S register (informational only).
F8C3 01               (        forth.asm):03554         SYSSTK  fcb     1               Non-standard
F8C4 53               (        forth.asm):03555                 fcc     'S'
F8C5 F8B6             (        forth.asm):03556                 fdb     STRSLMD
F8C7 C7               (        forth.asm):03557                 RFCS
F8C8 1F41             (        forth.asm):03558 (4)             tfr     s,x
F8CA 7EE6AF           (        forth.asm):03559 (3)             jmp     NPUSH
                      (        forth.asm):03560         
F8CD 07               (        forth.asm):03561         PAYLOAD fcb     7               Non standard
F8CE 5041594C4F4144   (        forth.asm):03562                 fcc     'PAYLOAD'       ( -- len ) where len is the code payload
F8D5 F8C3             (        forth.asm):03563                 fdb     SYSSTK          of the word located by FIND (or NULL)
F8D7 C7               (        forth.asm):03564                 RFCS
F8D8 9E10             (        forth.asm):03565 (4)             ldx     FNDPLD          Code payload reported by FIND
F8DA 7EE6AF           (        forth.asm):03566 (3)             jmp     NPUSH
                      (        forth.asm):03567         
                      (        forth.asm):03568         * Differences from the original code:
                      (        forth.asm):03569         * - display number in HEX rather than in the current base.
                      (        forth.asm):03570         * - dropped feat: the original stuff was interactively paged by 15 line screens.
                      (        forth.asm):03571         * - added feat: display code implementation payload.
                      (        forth.asm):03572         * - added feat: display the immedediate and define (compile time only) flags.
                      (        forth.asm):03573         * - added feat: display the forgettable status (R/W). Everything user
                      (        forth.asm):03574         *   defined is forgettable (i.e. RAM resident).
F8DD 05               (        forth.asm):03575         VLIST   fcb     5               Non-standard
F8DE 564C495354       (        forth.asm):03576                 fcc     'VLIST'         ( -- )
F8E3 F8CD             (        forth.asm):03577                 fdb     PAYLOAD
F8E5 C7               (        forth.asm):03578                 RFCS
F8E6 9E08             (        forth.asm):03579 (4)             ldx     DICEND
F8E8 9F16             (        forth.asm):03580 (4)             stx     VLPRVEP         Last word code address + 1
F8EA 9E06             (        forth.asm):03581 (4)             ldx     LSTWAD
F8EC 9F18             (        forth.asm):03582 (4)     @vlist1 stx     VLPRVHD         Last word header pointer
F8EE 108E039E         (        forth.asm):03583 (4)             ldy     #TBUFF
F8F2 E680             (        forth.asm):03584 (4+1)           ldb     ,x+
F8F4 3404             (        forth.asm):03585 (4+1)           pshs    b
F8F6 C41F             (        forth.asm):03586 (2)             andb    #WRLNMSK        Mask out word length
F8F8 4F               (        forth.asm):03587 (1)             clra
F8F9 3404             (        forth.asm):03588 (4+1)           pshs    b               Preserve word length
F8FB 1F06             (        forth.asm):03589 (4)             tfr     d,w
F8FD 113812           (        forth.asm):03590 (6+?)           tfm     x+,y+
F900 3502             (        forth.asm):03591 (4+1)           puls    a               Restore word length to A
F902 C620             (        forth.asm):03592 (2)             ldb     #WRLNMSK+1
F904 103289           (        forth.asm):03593 (4)             subr    a,b             Number of spaces we want to emit
F907 8620             (        forth.asm):03594 (2)             lda     #SP
F909 A7A0             (        forth.asm):03595 (4+1)   @vlist2 sta     ,y+
F90B 5A               (        forth.asm):03596 (1)             decb
F90C 26FB             (        forth.asm):03597 (3)             bne     @vlist2
F90E 6FA0             (        forth.asm):03598 (6+1)           clr     ,y+             Terminate formatted output string
F910 3410             (        forth.asm):03599 (4+2)           pshs    x               Address of the current word backlink address
F912 BDE1E8           (        forth.asm):03600 (7)             jsr     PUTCR           Carriage return is output before anything else
F915 8E039E           (        forth.asm):03601 (3)             ldx     #TBUFF
F918 BDE1DB           (        forth.asm):03602 (7)             jsr     PUTS            Output word name formatted on 17 chars + SP
F91B AEE4             (        forth.asm):03603 (5+0)           ldx     ,s
                      (        forth.asm):03604                 IFNE    RELFEAT
F91D 3003             (        forth.asm):03605 (4+1)           leax    3,x             Word XT to X (Skip backlink and checksum)
                      (        forth.asm):03606                 ELSE
                      (        forth.asm):03607                 leax    2,x             Word XT to X (Skip backlink)
                      (        forth.asm):03608                 ENDC
F91F 1F10             (        forth.asm):03609 (4)             tfr     x,d             CVNSTR depends on UBASE and we want HEX output
F921 8E039E           (        forth.asm):03610 (3)             ldx     #TBUFF
F924 BDE175           (        forth.asm):03611 (7)             jsr     HDMP4           So we use trusted debugging code
F927 8E039E           (        forth.asm):03612 (3)             ldx     #TBUFF
F92A BDE1DB           (        forth.asm):03613 (7)             jsr     PUTS
                      (        forth.asm):03614         * Now to display word implementation length.
                      (        forth.asm):03615         * Implementation code length is from ,s+3 (or 2) to VLPRVEP
F92D 8609             (        forth.asm):03616 (2)             lda     #HT
F92F BDE1B7           (        forth.asm):03617 (7)             jsr     PUTCH
F932 9E16             (        forth.asm):03618 (4)             ldx     VLPRVEP
F934 10AEE4           (        forth.asm):03619 (6+0)           ldy     ,s
                      (        forth.asm):03620                 IFNE    RELFEAT
F937 3123             (        forth.asm):03621 (4+1)           leay    3,y             Current word code entry address
                      (        forth.asm):03622                 ELSE
                      (        forth.asm):03623                 leay    2,y             Current word code entry address
                      (        forth.asm):03624                 ENDC
F939 103221           (        forth.asm):03625 (4)             subr    y,x
F93C 1F10             (        forth.asm):03626 (4)             tfr     x,d
F93E 8E039E           (        forth.asm):03627 (3)             ldx     #TBUFF
F941 BDE175           (        forth.asm):03628 (7)             jsr     HDMP4
F944 8E039E           (        forth.asm):03629 (3)             ldx     #TBUFF
F947 BDE1DB           (        forth.asm):03630 (7)             jsr     PUTS
                      (        forth.asm):03631         # Display attribute flags.
F94A 8609             (        forth.asm):03632 (2)             lda     #HT
F94C BDE1B7           (        forth.asm):03633 (7)             jsr     PUTCH
F94F 8E039E           (        forth.asm):03634 (3)             ldx     #TBUFF
F952 E662             (        forth.asm):03635 (4+1)           ldb     2,s             Word attribute to B
F954 862D             (        forth.asm):03636 (2)             lda     #'-
F956 C580             (        forth.asm):03637 (2)             bitb    #IMDFLM         Check for immediate
F958 2702             (        forth.asm):03638 (3)             beq     @vlist4
F95A 8649             (        forth.asm):03639 (2)             lda     #'I
F95C A780             (        forth.asm):03640 (4+1)   @vlist4 sta     ,x+
F95E 862D             (        forth.asm):03641 (2)             lda     #'-
F960 C540             (        forth.asm):03642 (2)             bitb    #DEFFLM         Check for define (compile time only)
F962 2702             (        forth.asm):03643 (3)             beq     @vlist5
F964 8643             (        forth.asm):03644 (2)             lda     #'C
F966 A780             (        forth.asm):03645 (4+1)   @vlist5 sta     ,x+
                      (        forth.asm):03646                 IFNE    RELFEAT
F968 862D             (        forth.asm):03647 (2)             lda     #'-
F96A C520             (        forth.asm):03648 (2)             bitb    #MONFLM         Check for monitored status
F96C 2702             (        forth.asm):03649 (3)             beq     @vlst51
F96E 864D             (        forth.asm):03650 (2)             lda     #'M
F970 A780             (        forth.asm):03651 (4+1)   @vlst51 sta     ,x+
                      (        forth.asm):03652                 ENDC
                      (        forth.asm):03653         * Check for forgettable also. In ROM => R else W unless we just processed '@'.
F972 8652             (        forth.asm):03654 (2)             lda     #'R
F974 10AEE4           (        forth.asm):03655 (6+0)           ldy     ,s
                      (        forth.asm):03656                 IFNE    RELFEAT
F977 3123             (        forth.asm):03657 (4+1)           leay    3,y             Word entry point to Y
                      (        forth.asm):03658                 ELSE
                      (        forth.asm):03659                 leay    2,y             Word entry point to Y
                      (        forth.asm):03660                 ENDC
F979 108C0C15         (        forth.asm):03661 (4)             cmpy    #RAMFTCH        @ in RAM is unforgettable
F97D 2708             (        forth.asm):03662 (3)             beq     @vlist6
F97F 108CE000         (        forth.asm):03663 (4)             cmpy    #ROMSTRT        as are all ROM resident words
F983 2402             (        forth.asm):03664 (3)             bcc     @vlist6
F985 8657             (        forth.asm):03665 (2)             lda     #'W
F987 A780             (        forth.asm):03666 (4+1)   @vlist6 sta     ,x+
F989 6F84             (        forth.asm):03667 (6+0)           clr     ,x
F98B 8E039E           (        forth.asm):03668 (3)             ldx     #TBUFF
F98E BDE1DB           (        forth.asm):03669 (7)             jsr     PUTS
                      (        forth.asm):03670         * The point at which VLPRVHD==WDICSPC is a singularity (RAM to ROM transition).
F991 9E18             (        forth.asm):03671 (4)             ldx     VLPRVHD
F993 8C0C10           (        forth.asm):03672 (3)             cmpx    #WDICSPC
F996 2608             (        forth.asm):03673 (3)             bne     @vlist7
F998 8EFDAA           (        forth.asm):03674 (3)             ldx     #QMARK          Word just before @ (ROM flavor)
F99B 9F18             (        forth.asm):03675 (4)             stx     VLPRVHD
F99D 8EFDB5           (        forth.asm):03676 (3)             ldx     #THEEND
F9A0 9F16             (        forth.asm):03677 (4)     @vlist7 stx     VLPRVEP
F9A2 3510             (        forth.asm):03678 (4+2)           puls    x
F9A4 3504             (        forth.asm):03679 (4+1)           puls    b
F9A6 AE84             (        forth.asm):03680 (5+0)           ldx     ,x              Point to previous word
F9A8 1026FF40         (        forth.asm):03681 (5)             lbne    @vlist1
F9AC 39               (        forth.asm):03682 (4)             rts
                      (        forth.asm):03683         
F9AD 05               (        forth.asm):03684         STATE   fcb     5
F9AE 5354415445       (        forth.asm):03685                 fcc     'STATE'
F9B3 F8DD             (        forth.asm):03686                 fdb     VLIST
F9B5 C7               (        forth.asm):03687                 RFCS
F9B6 8E0120           (        forth.asm):03688 (3)             ldx     #USTATE
F9B9 7EE6AF           (        forth.asm):03689 (3)             jmp     NPUSH
                      (        forth.asm):03690         
F9BC 04               (        forth.asm):03691         BASE    fcb     4               79-STANDARD (REQ115)
F9BD 42415345         (        forth.asm):03692                 fcc     'BASE'
F9C1 F9AD             (        forth.asm):03693                 fdb     STATE
F9C3 C7               (        forth.asm):03694                 RFCS
F9C4 8E011E           (        forth.asm):03695 (3)             ldx     #UBASE
F9C7 7EE6AF           (        forth.asm):03696 (3)             jmp     NPUSH
                      (        forth.asm):03697         
F9CA 03               (        forth.asm):03698         BIN     fcb     3               Non-standard
F9CB 42494E           (        forth.asm):03699                 fcc     'BIN'
F9CE F9BC             (        forth.asm):03700                 fdb     BASE
F9D0 C7               (        forth.asm):03701                 RFCS
F9D1 CC0002           (        forth.asm):03702 (3)             ldd     #2
F9D4 DD1E             (        forth.asm):03703 (4)             std     UBASE
F9D6 39               (        forth.asm):03704 (4)             rts
                      (        forth.asm):03705         
F9D7 05               (        forth.asm):03706         OCTAL   fcb     5               79-STANDARD (REF)
F9D8 4F4354414C       (        forth.asm):03707                 fcc     'OCTAL'
F9DD F9CA             (        forth.asm):03708                 fdb     BIN
F9DF C7               (        forth.asm):03709                 RFCS
F9E0 CC0008           (        forth.asm):03710 (3)             ldd     #8
F9E3 DD1E             (        forth.asm):03711 (4)             std     UBASE
F9E5 39               (        forth.asm):03712 (4)             rts
                      (        forth.asm):03713         
F9E6 07               (        forth.asm):03714         DECIMAL fcb     7               79-STANDARD (REQ197)
F9E7 444543494D414C   (        forth.asm):03715                 fcc     'DECIMAL'
F9EE F9D7             (        forth.asm):03716                 fdb     OCTAL
F9F0 C7               (        forth.asm):03717                 RFCS
F9F1 CC000A           (        forth.asm):03718 (3)             ldd     #10
F9F4 DD1E             (        forth.asm):03719 (4)             std     UBASE
F9F6 39               (        forth.asm):03720 (4)             rts
                      (        forth.asm):03721         
F9F7 03               (        forth.asm):03722         HEX     fcb     3               79-STANDARD (REF162)
F9F8 484558           (        forth.asm):03723                 fcc     'HEX'
F9FB F9E6             (        forth.asm):03724                 fdb     DECIMAL
F9FD C7               (        forth.asm):03725                 RFCS
F9FE CC0010           (        forth.asm):03726 (3)             ldd     #16
FA01 DD1E             (        forth.asm):03727 (4)             std     UBASE
FA03 39               (        forth.asm):03728 (4)             rts
                      (        forth.asm):03729         
                      (        forth.asm):03730         * DUMP is not optimized for speed or clarity but for code compactness and yet
                      (        forth.asm):03731         * it remains the largest dictionary entry! It resorts to builtin HEX dump
                      (        forth.asm):03732         * primitives that do not depend on the current base (HDMP4, HDMP2).
                      (        forth.asm):03733         * DUMP operates on the basis of one line of output to #TBUFF per 16 byte
                      (        forth.asm):03734         * (a block) of input. The input buffer is pointed to by D (backed up by Y)
                      (        forth.asm):03735         * and the output is pointed to by X. The output (besides the header line)
                      (        forth.asm):03736         * comprises 3 distinct areas:
                      (        forth.asm):03737         *
                      (        forth.asm):03738         * - the base block address. Aligned on a 16 byte address, followed by one #SP.
                      (        forth.asm):03739         * - the HEX dump area. Made up of 16 times 2 HEX numbers separated by #SP.
                      (        forth.asm):03740         * - the ASCII dump area. Made up of 16 characters.
                      (        forth.asm):03741         *
                      (        forth.asm):03742         * This results in the following "magical" constants:
                      (        forth.asm):03743         *
                      (        forth.asm):03744         * #TBUFF+53 points to the beginning of the ASCII dump area.
                      (        forth.asm):03745         * #TBUFF+69 points to the end of the output string (to be NUL terminated).
                      (        forth.asm):03746         *
FA04 04               (        forth.asm):03747         DUMP    fcb     4               79-STANDARD (REF123)
FA05 44554D50         (        forth.asm):03748                 fcc     'DUMP'          ( START NBYTES -- )
FA09 F9F7             (        forth.asm):03749                 fdb     HEX
FA0B C7               (        forth.asm):03750                 RFCS
FA0C BDE6BD           (        forth.asm):03751 (7)             jsr     NPOP
FA0F 1F12             (        forth.asm):03752 (4)             tfr     x,y             NBYTES to Y
FA11 BDE6BD           (        forth.asm):03753 (7)             jsr     NPOP
                      (        forth.asm):03754         * Input parameter validation.
FA14 1037C2           (        forth.asm):03755 (4)             cmpr    0,y
FA17 2601             (        forth.asm):03756 (3)             bne     @dmproc         Proceed if NBYTES in non-zero
FA19 39               (        forth.asm):03757 (4)             rts                     A zero byte count is not flagged as an error
FA1A 2E05             (        forth.asm):03758 (3)     @dmproc bgt     @dmpini
FA1C C60D             (        forth.asm):03759 (2)             ldb     #13             Illegal argument (negative)
FA1E BDE636           (        forth.asm):03760 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):03761         * Initialization and header processing.
FA21 3420             (        forth.asm):03762 (4+2)   @dmpini pshs    y               NBYTES
FA23 3410             (        forth.asm):03763 (4+2)           pshs    x               START
FA25 327E             (        forth.asm):03764 (4+1)           leas    -2,s            Allocate storage for STARTSEEN
                      (        forth.asm):03765         * Stack structure:
                      (        forth.asm):03766         * ,s    STARTSEEN               Set to 1 as soon as D is seen = to START
                      (        forth.asm):03767         *                               Only the LSB is used (1,s).
                      (        forth.asm):03768         * 2,s   START                   Lower bound of the area of interest (included)
                      (        forth.asm):03769         * 4,s   NBYTES                  Byte count to be dumped
FA27 1F10             (        forth.asm):03770 (4)             tfr     x,d             START to D
FA29 C4F0             (        forth.asm):03771 (2)             andb    #$F0            Align to lower 16 byte boundary
FA2B 6F61             (        forth.asm):03772 (6+1)           clr     1,s             Clear STARTSEEN until better informed
FA2D BDE1E8           (        forth.asm):03773 (7)             jsr     PUTCR           Print CR
FA30 11C620           (        forth.asm):03774 (3)             ldf     #SP             Preserved across called subroutines
FA33 8E039E           (        forth.asm):03775 (3)             ldx     #TBUFF
FA36 1F17             (        forth.asm):03776 (4)             tfr     x,v             Invariants: F has #SP, V has #TBUFF
FA38 3406             (        forth.asm):03777 (4+2)           pshs    d
FA3A BDFAD5           (        forth.asm):03778 (7)             jsr     _DMPHDR         D is not preserved
FA3D 3506             (        forth.asm):03779 (4+2)           puls    d
FA3F 6F84             (        forth.asm):03780 (6+0)           clr     ,x              NUL terminate the current output line
FA41 1F71             (        forth.asm):03781 (4)             tfr     v,x             Point back to the beginning of the output buffer
FA43 BDE1DB           (        forth.asm):03782 (7)             jsr     PUTS            Print header
                      (        forth.asm):03783         * Main loop. Index is D. We output everything to the string pointed by X.
                      (        forth.asm):03784         * Occasional resort to #TBUFF + 53 + (B % 15) will be used.
FA46 3404             (        forth.asm):03785 (4+1)   @dmmain pshs    b
FA48 C40F             (        forth.asm):03786 (2)             andb    #$F
FA4A 3504             (        forth.asm):03787 (4+1)           puls    b
FA4C 2609             (        forth.asm):03788 (3)             bne     @dmphx          Not a beginning of line
FA4E BDE1E8           (        forth.asm):03789 (7)             jsr     PUTCR           Print CR
FA51 BDE175           (        forth.asm):03790 (7)             jsr     HDMP4           4 hex digit dump of the base block address
FA54 11E780           (        forth.asm):03791 (5+1)           stf     ,x+             SPACE after the base address
FA57 1F02             (        forth.asm):03792 (4)     @dmphx  tfr     d,y             Save D, prepare pointer to actual data
FA59 8D59             (        forth.asm):03793 (6)             bsr     _DMPINT
FA5B 260A             (        forth.asm):03794 (3)             bne     @dmhx2          We are in the area of interest
FA5D 8620             (        forth.asm):03795 (2)     @dmspc  lda     #SP
FA5F A780             (        forth.asm):03796 (4+1)           sta     ,x+             Nothing interesting here. Emit three spaces
FA61 A780             (        forth.asm):03797 (4+1)           sta     ,x+
FA63 A780             (        forth.asm):03798 (4+1)           sta     ,x+
FA65 2016             (        forth.asm):03799 (3)             bra     @dmasc          Have #SP printed to the ASCII area
                      (        forth.asm):03800         * We are within the area of interest. Perform a regular HEX 2 digit conversion.
FA67 A6A4             (        forth.asm):03801 (4+0)   @dmhx2  lda     ,y
FA69 BDE18E           (        forth.asm):03802 (7)             jsr     HDMP2
FA6C 11E780           (        forth.asm):03803 (5+1)           stf     ,x+
                      (        forth.asm):03804         * Decrement NBYTES, only if it is not already zero.
FA6F 3420             (        forth.asm):03805 (4+2)           pshs    y
FA71 10AE66           (        forth.asm):03806 (6+1)           ldy     6,s             Offset plus 2 since we just pushed Y
FA74 2705             (        forth.asm):03807 (3)             beq     @dmrsty         NBYTES is nul
FA76 313F             (        forth.asm):03808 (4+1)           leay    -1,y            Decrement NBYTES
FA78 10AF66           (        forth.asm):03809 (6+1)           sty     6,s
FA7B 3520             (        forth.asm):03810 (4+2)   @dmrsty puls    y
FA7D 8120             (        forth.asm):03811 (2)     @dmasc  cmpa    #SP
FA7F 2504             (        forth.asm):03812 (3)             blo     @dmnprt         Character is not printable
FA81 817E             (        forth.asm):03813 (2)             cmpa    #$7E
FA83 2302             (        forth.asm):03814 (3)             bls     @dmasis
FA85 862E             (        forth.asm):03815 (2)     @dmnprt lda     #'.             Default character when not printable
FA87 3410             (        forth.asm):03816 (4+2)   @dmasis pshs    x               The ASCII image is the character itself
FA89 8E03D3           (        forth.asm):03817 (3)             ldx     #TBUFF+53       Base address for the ASCII dump area
FA8C C40F             (        forth.asm):03818 (2)             andb    #$F             Offset is B modulo 15
FA8E 3A               (        forth.asm):03819 (1)             abx                     Add offset to base address
FA8F A780             (        forth.asm):03820 (4+1)           sta     ,x+
FA91 3510             (        forth.asm):03821 (4+2)           puls    x
                      (        forth.asm):03822         * If B is #$F, we've just processed the last byte of a block. Print #TBUFF.
FA93 C10F             (        forth.asm):03823 (2)             cmpb    #$F
FA95 1FAE             (        forth.asm):03824 (4)             tfr     cc,e
FA97 2608             (        forth.asm):03825 (3)             bne     @dmctd
FA99 1F71             (        forth.asm):03826 (4)             tfr     v,x             #TBUFF to X
FA9B 6F8845           (        forth.asm):03827 (6+1)           clr     69,x
FA9E BDE1DB           (        forth.asm):03828 (7)             jsr     PUTS
FAA1 1F20             (        forth.asm):03829 (4)     @dmctd  tfr     y,d             Restore D
FAA3 104C             (        forth.asm):03830 (2)             incd
FAA5 1FEA             (        forth.asm):03831 (4)             tfr     e,cc
FAA7 269D             (        forth.asm):03832 (3)             bne     @dmmain         Proceed until end of block is reached
FAA9 6D65             (        forth.asm):03833 (5+1)           tst     5,s             NBYTES LSB
FAAB 2699             (        forth.asm):03834 (3)             bne     @dmmain
FAAD 6D64             (        forth.asm):03835 (5+1)           tst     4,s             NYTES MSB
FAAF 2695             (        forth.asm):03836 (3)             bne     @dmmain
FAB1 3266             (        forth.asm):03837 (4+1)           leas    6,s             Free stack storage used by local variables
FAB3 39               (        forth.asm):03838 (4)             rts
                      (        forth.asm):03839         
                      (        forth.asm):03840         * Predicate to indicate whether or not D covers the area of interest.
                      (        forth.asm):03841         * Upon return NZ will be set iff we are pointing to the "interesting" area.
FAB4 6D63             (        forth.asm):03842 (5+1)   _DMPINT tst     3,s             STARTSEEN?
FAB6 2608             (        forth.asm):03843 (3)             bne     @strsen         Yes, check for zero remaining byte count
FAB8 10A364           (        forth.asm):03844 (6+1)           cmpd    4,s             START
FABB 240D             (        forth.asm):03845 (3)             bhs     @ststrt         Set STARTSEEN once and for all
FABD 1A04             (        forth.asm):03846 (2)     @retwz  orcc    #ZFLAG          Set Z flag
FABF 39               (        forth.asm):03847 (4)             rts
                      (        forth.asm):03848         * STARTSEEN is set. Check remaining byte count.
FAC0 6D67             (        forth.asm):03849 (5+1)   @strsen tst     7,s             NBYTES LSB
FAC2 260E             (        forth.asm):03850 (3)             bne     @retwnz
FAC4 6D66             (        forth.asm):03851 (5+1)           tst     6,s             NBYTES MSB
FAC6 260A             (        forth.asm):03852 (3)             bne     @retwnz
FAC8 20F3             (        forth.asm):03853 (3)             bra     @retwz          We are beyond the interesting area
FACA 3402             (        forth.asm):03854 (4+1)   @ststrt pshs    a
FACC 8601             (        forth.asm):03855 (2)             lda     #1
FACE A764             (        forth.asm):03856 (4+1)           sta     4,s             Set STARTSEEN
FAD0 3502             (        forth.asm):03857 (4+1)           puls    a
FAD2 1CFB             (        forth.asm):03858 (2)     @retwnz andcc   #^ZFLAG         Clear Z flag
FAD4 39               (        forth.asm):03859 (4)             rts
                      (        forth.asm):03860         
                      (        forth.asm):03861         * Print the dump header to X.
FAD5 8620             (        forth.asm):03862 (2)     _DMPHDR lda     #SP
FAD7 A780             (        forth.asm):03863 (4+1)           sta     ,x+
FAD9 A780             (        forth.asm):03864 (4+1)           sta     ,x+
FADB A780             (        forth.asm):03865 (4+1)           sta     ,x+
FADD A780             (        forth.asm):03866 (4+1)           sta     ,x+
FADF 5F               (        forth.asm):03867 (1)             clrb
FAE0 A780             (        forth.asm):03868 (4+1)   @dmhlp1 sta     ,x+             Space before every 2 hex digits
FAE2 1F98             (        forth.asm):03869 (4)             tfr     b,a
FAE4 BDE18E           (        forth.asm):03870 (7)             jsr     HDMP2
FAE7 8620             (        forth.asm):03871 (2)             lda     #SP
FAE9 5C               (        forth.asm):03872 (1)             incb
FAEA C110             (        forth.asm):03873 (2)             cmpb    #$10
FAEC 26F2             (        forth.asm):03874 (3)             bne     @dmhlp1
FAEE A780             (        forth.asm):03875 (4+1)           sta     ,x+             Space before the ASCII dump
FAF0 5F               (        forth.asm):03876 (1)             clrb
FAF1 1F98             (        forth.asm):03877 (4)     @dmhlp2 tfr     b,a
FAF3 BDE15C           (        forth.asm):03878 (7)             jsr     HEX1D           Offset to HEX char stored to x+
FAF6 5C               (        forth.asm):03879 (1)             incb
FAF7 C110             (        forth.asm):03880 (2)             cmpb    #$10
FAF9 26F6             (        forth.asm):03881 (3)             bne     @dmhlp2
FAFB 39               (        forth.asm):03882 (4)             rts
                      (        forth.asm):03883         
                      (        forth.asm):03884                 IFNE    SSDFEAT
FAFC 02               (        forth.asm):03885         DOTTICK fcb     2               Non-standard (SwiftForth)
FAFD 2E27             (        forth.asm):03886                 fcb     $2E,$27         .' ( memaddr -- )
FAFF FA04             (        forth.asm):03887                 fdb     DUMP
FB01 C7               (        forth.asm):03888                 RFCS
FB02 BDE6BD           (        forth.asm):03889 (7)             jsr     NPOP
FB05 1F12             (        forth.asm):03890 (4)             tfr     x,y
FB07 8E034E           (        forth.asm):03891 (3)             ldx     #HEXBUF
FB0A BDE512           (        forth.asm):03892 (7)             jsr     FINDSYM
FB0D 8E034E           (        forth.asm):03893 (3)             ldx     #HEXBUF
FB10 7EE1DB           (        forth.asm):03894 (3)             jmp     PUTS
                      (        forth.asm):03895                 ENDC
                      (        forth.asm):03896         
                      (        forth.asm):03897         * Display a dump of the data stack in the current BASE. In Leo Brodie's
                      (        forth.asm):03898         * "Starting Forth" the data stack is printed from the bottom up. So it is here.
FB13 02               (        forth.asm):03899         DDUMP   fcb     2               ANSI (Optional "Programming tools" word set)
FB14 2E53             (        forth.asm):03900                 fcc     '.S'            ( memaddr bcount -- )
                      (        forth.asm):03901                 IFNE    SSDFEAT
FB16 FAFC             (        forth.asm):03902                 fdb     DOTTICK
                      (        forth.asm):03903                 ELSE
                      (        forth.asm):03904                 fdb     DUMP
                      (        forth.asm):03905                 ENDC
FB18 C7               (        forth.asm):03906                 RFCS
FB19 CC024A           (        forth.asm):03907 (3)             ldd     #NSTBOT
FB1C 103230           (        forth.asm):03908 (4)             subr    u,d
FB1F 1044             (        forth.asm):03909 (2)             lsrd                    DEPTH is in D
FB21 272A             (        forth.asm):03910 (3)             beq     @ndump3         Data stack is empty
FB23 3440             (        forth.asm):03911 (4+2)           pshs    u
FB25 CE024A           (        forth.asm):03912 (3)             ldu     #NSTBOT         Pointing to the bottom of the data stack
FB28 8601             (        forth.asm):03913 (2)             lda     #1
FB2A 9731             (        forth.asm):03914 (3)             sta     CVISSGN         Force a signed number conversion
FB2C 3404             (        forth.asm):03915 (4+1)   @ndump1 pshs    b
FB2E AEC3             (        forth.asm):03916 (5+2)           ldx     ,--u
FB30 BDE341           (        forth.asm):03917 (7)             jsr     CVNSTR
FB33 8E039E           (        forth.asm):03918 (3)             ldx     #TBUFF
                      (        forth.asm):03919         # Skip leading spaces.
FB36 A680             (        forth.asm):03920 (4+1)   @ndump2 lda     ,x+
FB38 8120             (        forth.asm):03921 (2)             cmpa    #SP
FB3A 27FA             (        forth.asm):03922 (3)             beq     @ndump2
FB3C 301F             (        forth.asm):03923 (4+1)           leax    -1,x
FB3E BDE1DB           (        forth.asm):03924 (7)             jsr     PUTS
FB41 8620             (        forth.asm):03925 (2)             lda     #SP
FB43 BDE1B7           (        forth.asm):03926 (7)             jsr     PUTCH
FB46 3504             (        forth.asm):03927 (4+1)           puls    b
FB48 5A               (        forth.asm):03928 (1)             decb
FB49 26E1             (        forth.asm):03929 (3)             bne     @ndump1
FB4B 3540             (        forth.asm):03930 (4+2)           puls    u
FB4D 39               (        forth.asm):03931 (4)     @ndump3 rts
                      (        forth.asm):03932         
FB4E 04               (        forth.asm):03933         QRYDUP  fcb     4               79-STANDARD (REQ184)
FB4F 3F445550         (        forth.asm):03934                 fcc     '?DUP'
FB53 FB13             (        forth.asm):03935                 fdb     DDUMP
FB55 C7               (        forth.asm):03936                 RFCS
FB56 BDE6BD           (        forth.asm):03937 (7)             jsr     NPOP
FB59 3610             (        forth.asm):03938                 UCNPUSH                 Push back the original parameter
FB5B 1037C1           (        forth.asm):03939 (4)             cmpr    0,x
FB5E 2601             (        forth.asm):03940 (3)             bne     @qrydp1
FB60 39               (        forth.asm):03941 (4)             rts
FB61 7EE6AF           (        forth.asm):03942 (3)     @qrydp1 jmp     NPUSH           And DUP if NZ
                      (        forth.asm):03943         
FB64 04               (        forth.asm):03944         TUCK    fcb     4               ANSI (Core ext)
FB65 5455434B         (        forth.asm):03945                 fcc     'TUCK'          ( x1 x2 -- x2 x1 x2 ) i.e. SWAP OVER
FB69 FB4E             (        forth.asm):03946                 fdb     QRYDUP
FB6B C7               (        forth.asm):03947                 RFCS
FB6C CC0246BDE336     (        forth.asm):03948                 MINDREQ 2
FB72 10ECC4           (        forth.asm):03949 (8+0)           ldq     ,u              D:W is X2:X1
FB75 1E06             (        forth.asm):03950 (5)             exg     d,w
FB77 10EDC4           (        forth.asm):03951 (8+0)           stq     ,u
FB7A 1F61             (        forth.asm):03952 (4)             tfr     w,x             X has X2
FB7C 7EE6AF           (        forth.asm):03953 (3)             jmp     NPUSH
                      (        forth.asm):03954         
FB7F 03               (        forth.asm):03955         NIP     fcb     3               ANSI (Core ext)
FB80 4E4950           (        forth.asm):03956                 fcc     'NIP'           ( x1 x2 -- x2 ) i.e. SWAP DROP
FB83 FB64             (        forth.asm):03957                 fdb     TUCK
FB85 C7               (        forth.asm):03958                 RFCS
FB86 CC0246BDE336     (        forth.asm):03959                 MINDREQ 2
FB8C ECC4             (        forth.asm):03960 (5+0)           ldd     ,u
FB8E 3342             (        forth.asm):03961 (4+1)           leau    2,u
FB90 EDC4             (        forth.asm):03962 (5+0)           std     ,u
FB92 39               (        forth.asm):03963 (4)             rts
                      (        forth.asm):03964         
FB93 03               (        forth.asm):03965         DUP     fcb     3               79-STANDARD (REQ205)
FB94 445550           (        forth.asm):03966                 fcc     'DUP'
FB97 FB7F             (        forth.asm):03967                 fdb     NIP
FB99 C7               (        forth.asm):03968                 RFCS
FB9A CC0248BDE336     (        forth.asm):03969                 MINDREQ 1
FBA0 AEC4             (        forth.asm):03970 (5+0)           ldx     ,u
FBA2 7EE6AF           (        forth.asm):03971 (3)             jmp     NPUSH
                      (        forth.asm):03972         
FBA5 04               (        forth.asm):03973         DROP    fcb     4               79-STANDARD (REQ233)
FBA6 44524F50         (        forth.asm):03974                 fcc     'DROP'
FBAA FB93             (        forth.asm):03975                 fdb     DUP
FBAC C7               (        forth.asm):03976                 RFCS
FBAD 7EE6BD           (        forth.asm):03977 (3)             jmp     NPOP
                      (        forth.asm):03978         
FBB0 04               (        forth.asm):03979         SWAP    fcb     4               79-STANDARD (REQ230)
FBB1 53574150         (        forth.asm):03980                 fcc     'SWAP'
FBB5 FBA5             (        forth.asm):03981                 fdb     DROP
FBB7 C7               (        forth.asm):03982                 RFCS
FBB8 CC0246BDE336     (        forth.asm):03983                 MINDREQ 2               We need at least two cells stacked up
FBBE 10ECC4           (        forth.asm):03984 (8+0)           ldq     ,u              In place SWAP
FBC1 1E06             (        forth.asm):03985 (5)             exg     d,w
FBC3 10EDC4           (        forth.asm):03986 (8+0)           stq     ,u
FBC6 39               (        forth.asm):03987 (4)             rts
                      (        forth.asm):03988         
FBC7 04               (        forth.asm):03989         PICK    fcb     4
FBC8 5049434B         (        forth.asm):03990                 fcc     'PICK'
FBCC FBB0             (        forth.asm):03991                 fdb     SWAP
FBCE C7               (        forth.asm):03992                 RFCS
FBCF BDE6BD           (        forth.asm):03993 (7)             jsr     NPOP
FBD2 CC024A           (        forth.asm):03994 (3)     PICK1   ldd     #NSTBOT
FBD5 103230           (        forth.asm):03995 (4)             subr    u,d
FBD8 1044             (        forth.asm):03996 (2)             lsrd                    D has the data stack depth in cells
FBDA 103710           (        forth.asm):03997 (4)             cmpr    x,d
FBDD 2405             (        forth.asm):03998 (3)             bcc     @pick1
FBDF C60D             (        forth.asm):03999 (2)     ERRPCK  ldb     #13             Argument is greater than DEPTH
FBE1 BDE636           (        forth.asm):04000 (7)             jsr     ERRHDLR         No return
FBE4 1F10             (        forth.asm):04001 (4)     @pick1  tfr     x,d
FBE6 104D             (        forth.asm):04002 (2)             tstd
FBE8 27F5             (        forth.asm):04003 (3)             beq     ERRPCK
FBEA 104A             (        forth.asm):04004 (2)             decd                    Minus 1, unlike in the Z80 implementation
FBEC 1048             (        forth.asm):04005 (2)             lsld                    Times 2
FBEE 1F31             (        forth.asm):04006 (4)             tfr     u,x
FBF0 308B             (        forth.asm):04007 (4+2)           leax    d,x
FBF2 1F12             (        forth.asm):04008 (4)             tfr     x,y             For the sake of ROLL's implementation
FBF4 AE84             (        forth.asm):04009 (5+0)           ldx     ,x
FBF6 3610             (        forth.asm):04010                 UCNPUSH
FBF8 39               (        forth.asm):04011 (4)             rts
                      (        forth.asm):04012         
FBF9 04               (        forth.asm):04013         OVER    fcb     4
FBFA 4F564552         (        forth.asm):04014                 fcc     'OVER'
FBFE FBC7             (        forth.asm):04015                 fdb     PICK
FC00 C7               (        forth.asm):04016                 RFCS
FC01 8E0002           (        forth.asm):04017 (3)             ldx     #2
FC04 20CC             (        forth.asm):04018 (3)             bra     PICK1
                      (        forth.asm):04019         
FC06 04               (        forth.asm):04020         ROLL    fcb     4
FC07 524F4C4C         (        forth.asm):04021                 fcc     'ROLL'
FC0B FBF9             (        forth.asm):04022                 fdb     OVER
FC0D C7               (        forth.asm):04023                 RFCS
FC0E BDE6BD           (        forth.asm):04024 (7)             jsr     NPOP
FC11 1F16             (        forth.asm):04025 (4)     ROLL1   tfr     x,w
FC13 8DBD             (        forth.asm):04026 (6)             bsr     PICK1           Let PICK do the error handling
FC15 3121             (        forth.asm):04027 (4+1)           leay    1,y             Point to the LSB since we're moving backward
FC17 1F21             (        forth.asm):04028 (4)             tfr     y,x
FC19 301E             (        forth.asm):04029 (4+1)           leax    -2,x
FC1B 103066           (        forth.asm):04030 (4)             addr    w,w
FC1E 113912           (        forth.asm):04031 (6+?)           tfm     x-,y-
FC21 7EE6BD           (        forth.asm):04032 (3)             jmp     NPOP
                      (        forth.asm):04033         
FC24 03               (        forth.asm):04034         ROT     fcb     3
FC25 524F54           (        forth.asm):04035                 fcc     'ROT'
FC28 FC06             (        forth.asm):04036                 fdb     ROLL
FC2A C7               (        forth.asm):04037                 RFCS
FC2B 8E0003           (        forth.asm):04038 (3)             ldx     #3
FC2E 20E1             (        forth.asm):04039 (3)             bra     ROLL1
                      (        forth.asm):04040         
FC30 04               (        forth.asm):04041         MROT    fcb     4
FC31 2D524F54         (        forth.asm):04042                 fcc     '-ROT'
FC35 FC24             (        forth.asm):04043                 fdb     ROT
FC37 C7               (        forth.asm):04044                 RFCS
FC38 8DF1             (        forth.asm):04045                 RFXT    bsr,ROT+6       XT for ROT
FC3A 20EF             (        forth.asm):04046                 RFXT    bra,ROT+6       XT for ROT
                      (        forth.asm):04047         
FC3C 02               (        forth.asm):04048         CCOMMA  fcb     2               79-STANDARD (REF)
FC3D 432C             (        forth.asm):04049                 fcc     'C,'
FC3F FC30             (        forth.asm):04050                 fdb     MROT
FC41 C7               (        forth.asm):04051                 RFCS
FC42 BDE6BD           (        forth.asm):04052 (7)             jsr     NPOP
FC45 1F10             (        forth.asm):04053 (4)             tfr     x,d
FC47 109E08           (        forth.asm):04054 (5)             ldy     DICEND
FC4A E7A0             (        forth.asm):04055 (4+1)           stb     ,y+
FC4C 109F08           (        forth.asm):04056 (5)             sty     DICEND
FC4F 39               (        forth.asm):04057 (4)             rts
                      (        forth.asm):04058         
FC50 01               (        forth.asm):04059         COMMA   fcb     1               79-STANDARD (REQ143)
FC51 2C               (        forth.asm):04060                 fcc     ','
FC52 FC3C             (        forth.asm):04061                 fdb     CCOMMA
FC54 C7               (        forth.asm):04062                 RFCS
FC55 BDE6BD           (        forth.asm):04063 (7)             jsr     NPOP
FC58 109E08           (        forth.asm):04064 (5)             ldy     DICEND
FC5B AFA1             (        forth.asm):04065 (5+2)           stx     ,y++
FC5D 109F08           (        forth.asm):04066 (5)             sty     DICEND
FC60 39               (        forth.asm):04067 (4)             rts
                      (        forth.asm):04068         
FC61 05               (        forth.asm):04069         ALLOT   fcb     5               79-STANDARD (REQ154)
FC62 414C4C4F54       (        forth.asm):04070                 fcc     'ALLOT'         ( signedbytecount -- )
FC67 FC50             (        forth.asm):04071                 fdb     COMMA
FC69 C7               (        forth.asm):04072                 RFCS
FC6A BDE6BD           (        forth.asm):04073 (7)             jsr     NPOP
FC6D 109E08           (        forth.asm):04074 (5)             ldy     DICEND
FC70 103012           (        forth.asm):04075 (4)             addr    x,y
FC73 109F08           (        forth.asm):04076 (5)             sty     DICEND
FC76 39               (        forth.asm):04077 (4)             rts
                      (        forth.asm):04078         
FC77 04               (        forth.asm):04079         FILL    fcb     4               79-STANDARD (REQ234)
FC78 46494C4C         (        forth.asm):04080                 fcc     'FILL'
FC7C FC61             (        forth.asm):04081                 fdb     ALLOT
FC7E C7               (        forth.asm):04082                 RFCS
FC7F BDE6BD           (        forth.asm):04083 (7)             jsr     NPOP
FC82 1F16             (        forth.asm):04084 (4)             tfr     x,w             Byte fill value to W
FC84 BDE6BD           (        forth.asm):04085 (7)     FILL1   jsr     NPOP
FC87 1F12             (        forth.asm):04086 (4)             tfr     x,y             Byte count to Y
FC89 1E26             (        forth.asm):04087 (5)             exg     y,w             Byte count to W, byte fill value to Y
FC8B BDE6BD           (        forth.asm):04088 (7)             jsr     NPOP            Destination address to X
FC8E 105D             (        forth.asm):04089 (2)             tstw
FC90 2F0B             (        forth.asm):04090 (3)             ble     @filend
FC92 1F20             (        forth.asm):04091 (4)             tfr     y,d             Byte fill value to B
FC94 E784             (        forth.asm):04092 (4+0)           stb     ,x
FC96 105A             (        forth.asm):04093 (2)             decw
FC98 3101             (        forth.asm):04094 (4+1)           leay    1,x
FC9A 113812           (        forth.asm):04095 (6+?)           tfm     x+,y+
FC9D 39               (        forth.asm):04096 (4)     @filend rts
                      (        forth.asm):04097         
FC9E 06               (        forth.asm):04098         BLANKS  fcb     6               79-STANDARD (REF152)
FC9F 424C414E4B53     (        forth.asm):04099                 fcc     'BLANKS'
FCA5 FC77             (        forth.asm):04100                 fdb     FILL
FCA7 C7               (        forth.asm):04101                 RFCS
FCA8 10860020         (        forth.asm):04102 (4)             ldw     #SP
FCAC 20D6             (        forth.asm):04103 (3)             bra     FILL1
                      (        forth.asm):04104         
FCAE 06               (        forth.asm):04105         CMOVED  fcb     6               FORTH-83
FCAF 434D4F56453E     (        forth.asm):04106                 fcc     'CMOVE>'
FCB5 FC9E             (        forth.asm):04107                 fdb     BLANKS
FCB7 C7               (        forth.asm):04108                 RFCS
FCB8 BDE48D           (        forth.asm):04109 (7)             jsr     ACQMOVP
FCBB 105D             (        forth.asm):04110 (2)             tstw
FCBD 270D             (        forth.asm):04111 (3)             beq     @cmovd1
FCBF 105A             (        forth.asm):04112 (2)             decw
FCC1 103061           (        forth.asm):04113 (4)             addr    w,x
FCC4 103062           (        forth.asm):04114 (4)             addr    w,y
FCC7 105C             (        forth.asm):04115 (2)             incw
FCC9 113912           (        forth.asm):04116 (6+?)           tfm     x-,y-
FCCC 39               (        forth.asm):04117 (4)     @cmovd1 rts
                      (        forth.asm):04118         
FCCD 06               (        forth.asm):04119         DCMOVE  fcb     6               79-STANDARD (REF)
FCCE 3C434D4F5645     (        forth.asm):04120                 fcc     '<CMOVE'
FCD4 FCAE             (        forth.asm):04121                 fdb     CMOVED
FCD6 C7               (        forth.asm):04122                 RFCS
FCD7 BDE48D           (        forth.asm):04123 (7)             jsr     ACQMOVP
FCDA 113912           (        forth.asm):04124 (6+?)           tfm     x-,y-
FCDD 39               (        forth.asm):04125 (4)             rts
                      (        forth.asm):04126         
FCDE 05               (        forth.asm):04127         CMOVE   fcb     5               79-STANDARD (REQ153)
FCDF 434D4F5645       (        forth.asm):04128                 fcc     'CMOVE'
FCE4 FCCD             (        forth.asm):04129                 fdb     DCMOVE
FCE6 C7               (        forth.asm):04130                 RFCS
FCE7 BDE48D           (        forth.asm):04131 (7)             jsr     ACQMOVP
FCEA 113812           (        forth.asm):04132 (6+?)           tfm     x+,y+
FCED 39               (        forth.asm):04133 (4)             rts
                      (        forth.asm):04134         
FCEE 04               (        forth.asm):04135         MOVE    fcb     4               79-STANDARD (REQ113)
FCEF 4D4F5645         (        forth.asm):04136                 fcc     'MOVE'          ( srcaddr dstaddr ncells -- )
FCF3 FCDE             (        forth.asm):04137                 fdb     CMOVE
FCF5 C7               (        forth.asm):04138                 RFCS
FCF6 BDE48D           (        forth.asm):04139 (7)             jsr     ACQMOVP
FCF9 105D             (        forth.asm):04140 (2)             tstw
FCFB 2F06             (        forth.asm):04141 (3)             ble     @move1
FCFD 103066           (        forth.asm):04142 (4)             addr    w,w             Convert cells to bytes
FD00 113812           (        forth.asm):04143 (6+?)           tfm     x+,y+
FD03 39               (        forth.asm):04144 (4)     @move1  rts
                      (        forth.asm):04145         
FD04 05               (        forth.asm):04146         CELLS   fcb     5               ANSI-X3.215-1994
FD05 43454C4C53       (        forth.asm):04147                 fcc     'CELLS'
FD0A FCEE             (        forth.asm):04148                 fdb     MOVE
FD0C C7               (        forth.asm):04149                 RFCS
FD0D BDE6BD           (        forth.asm):04150 (7)             jsr     NPOP
FD10 103011           (        forth.asm):04151 (4)             addr    x,x
FD13 3610             (        forth.asm):04152                 UCNPUSH
FD15 39               (        forth.asm):04153 (4)             rts
                      (        forth.asm):04154         
FD16 04               (        forth.asm):04155         LAST    fcb     4               79-STANDARD (REF)
FD17 4C415354         (        forth.asm):04156                 fcc     'LAST'
FD1B FD04             (        forth.asm):04157                 fdb     CELLS
FD1D C7               (        forth.asm):04158                 RFCS
FD1E 9E06             (        forth.asm):04159 (4)             ldx     LSTWAD
FD20 7EE6AF           (        forth.asm):04160 (3)             jmp     NPUSH
                      (        forth.asm):04161         
FD23 04               (        forth.asm):04162         HERE    fcb     4               79-STANDARD (REQ188)
FD24 48455245         (        forth.asm):04163                 fcc     'HERE'
FD28 FD16             (        forth.asm):04164                 fdb     LAST
FD2A C7               (        forth.asm):04165                 RFCS
FD2B 9E08             (        forth.asm):04166 (4)             ldx     DICEND
FD2D 7EE6AF           (        forth.asm):04167 (3)             jmp     NPUSH
                      (        forth.asm):04168         
FD30 02               (        forth.asm):04169         PLUSST  fcb     2               79-STANDARD (REQ157)
FD31 2B21             (        forth.asm):04170                 fcc     '+!'            ( incr addr -- )
FD33 FD23             (        forth.asm):04171                 fdb     HERE
FD35 C7               (        forth.asm):04172                 RFCS
FD36 CC0246BDE336     (        forth.asm):04173                 MINDREQ 2               We need at least two cells stacked up
FD3C AEC4             (        forth.asm):04174 (5+0)           ldx     ,u              ADDR to X
FD3E EC84             (        forth.asm):04175 (5+0)           ldd     ,x              @ADDR to D
FD40 E342             (        forth.asm):04176 (5+1)           addd    2,u             Add INCR to D
FD42 ED84             (        forth.asm):04177 (5+0)   PLUSST1 std     ,x              Store the sum back to ADDR
FD44 3344             (        forth.asm):04178 (4+1)           leau    4,u             Drop two cells from the data stack
FD46 39               (        forth.asm):04179 (4)             rts
                      (        forth.asm):04180         
FD47 03               (        forth.asm):04181         ONEPST  fcb     3               79-STANDARD (REF)
FD48 312B21           (        forth.asm):04182                 fcc     '1+!'
FD4B FD30             (        forth.asm):04183                 fdb     PLUSST
FD4D C7               (        forth.asm):04184                 RFCS
FD4E CC0248BDE336     (        forth.asm):04185                 MINDREQ 1
FD54 AEC4             (        forth.asm):04186 (5+0)           ldx     ,u
FD56 EC84             (        forth.asm):04187 (5+0)           ldd     ,x
FD58 104C             (        forth.asm):04188 (2)             incd
FD5A ED84             (        forth.asm):04189 (5+0)           std     ,x
FD5C 3342             (        forth.asm):04190 (4+1)           leau    2,u
FD5E 39               (        forth.asm):04191 (4)             rts
                      (        forth.asm):04192         
FD5F 02               (        forth.asm):04193         MINUSST fcb     2               79-STANDARD (REQ157)
FD60 2D21             (        forth.asm):04194                 fcc     '-!'            ( incr addr -- )
FD62 FD47             (        forth.asm):04195                 fdb     ONEPST
FD64 C7               (        forth.asm):04196                 RFCS
FD65 CC0246BDE336     (        forth.asm):04197                 MINDREQ 2               We need at least two cells stacked up
FD6B AEC4             (        forth.asm):04198 (5+0)           ldx     ,u              ADDR to X
FD6D EC84             (        forth.asm):04199 (5+0)           ldd     ,x              @ADDR to D
FD6F A342             (        forth.asm):04200 (5+1)           subd    2,u             Substract INCR from D
FD71 20CF             (        forth.asm):04201 (3)             bra     PLUSST1
                      (        forth.asm):04202         
FD73 02               (        forth.asm):04203         CSTORE  fcb     2               79-STANDARD (REQ219)
FD74 4321             (        forth.asm):04204                 fcc     'C!'            ( val8 addr -- )
FD76 FD5F             (        forth.asm):04205                 fdb     MINUSST
FD78 C7               (        forth.asm):04206                 RFCS
FD79 CC0246BDE336     (        forth.asm):04207                 MINDREQ 2               We need at least two cells stacked up
FD7F A643             (        forth.asm):04208 (4+1)           lda     3,u             VAL8 to A
FD81 A7D4             (        forth.asm):04209 (4+3)           sta     [,u]            Actual store to ADDR
FD83 3344             (        forth.asm):04210 (4+1)           leau    4,u             Drop two cells from the data stack
FD85 39               (        forth.asm):04211 (4)             rts
                      (        forth.asm):04212         
FD86 01               (        forth.asm):04213         STORE   fcb     1               79-STANDARD (REQ112)
FD87 21               (        forth.asm):04214                 fcc     '!'             ( data addr -- )
FD88 FD73             (        forth.asm):04215                 fdb     CSTORE
FD8A C7               (        forth.asm):04216                 RFCS
FD8B CC0246BDE336     (        forth.asm):04217                 MINDREQ 2               At least two cells need to be stacked up
FD91 EC42             (        forth.asm):04218 (5+1)           ldd     2,u             DATA to D
FD93 EDD4             (        forth.asm):04219 (5+3)           std     [,u]            Actual store to ADDR
FD95 3344             (        forth.asm):04220 (4+1)           leau    4,u             Drop two cells from the user stack
FD97 39               (        forth.asm):04221 (4)             rts
                      (        forth.asm):04222         
FD98 02               (        forth.asm):04223         CFETCH  fcb     2               79-STANDARD (REQ156)
FD99 4340             (        forth.asm):04224                 fcc     'C@'            ( addr -- val8 )
FD9B FD86             (        forth.asm):04225                 fdb     STORE
FD9D C7               (        forth.asm):04226                 RFCS
FD9E CC0248BDE336     (        forth.asm):04227                 MINDREQ 1               We need at least one cell stacked up
FDA4 4F               (        forth.asm):04228 (1)             clra
FDA5 E6D4             (        forth.asm):04229 (4+3)           ldb     [,u]
FDA7 EDC4             (        forth.asm):04230 (5+0)           std     ,u
FDA9 39               (        forth.asm):04231 (4)             rts
                      (        forth.asm):04232         
FDAA 01               (        forth.asm):04233         QMARK   fcb     1               79-STANDARD (REQ194)
FDAB 3F               (        forth.asm):04234                 fcc     '?'
FDAC FD98             (        forth.asm):04235                 fdb     CFETCH
FDAE C7               (        forth.asm):04236                 RFCS
FDAF BD0C15           (        forth.asm):04237 (7)             jsr     RAMFTCH         Call the RAM based incarnation of @
FDB2 7EF4D8           (        forth.asm):04238                 RFXT    jmp,DOT+4       XT for .
                      (        forth.asm):04239         
                      (        forth.asm):04240         * End of ROM part of the builtin dictionary.
     FDB5             (        forth.asm):04241         THEEND  equ     *               This is the end, Beautiful friend
                      (        forth.asm):04242         *                               This is the end, My only friend
                      (        forth.asm):04243         
                      (        forth.asm):04244         * This transactional word is relocated to RAM, so that we can compile new
                      (        forth.asm):04245         * definitions. FORTHIN will take care of that and adjust the relevant pointers.
FDB5 01               (        forth.asm):04246         FETCH   fcb     1               79-STANDARD (REQ199)
FDB6 40               (        forth.asm):04247                 fcc     '@'             ( addr -- data )
FDB7 FDAA             (        forth.asm):04248                 fdb     QMARK
FDB9 C7               (        forth.asm):04249                 RFCS
FDBA CC0248BDE336     (        forth.asm):04250                 MINDREQ 1               At least one cell needs to be stacked up
FDC0 ECD4             (        forth.asm):04251 (5+3)           ldd     [,u]
FDC2 EDC4             (        forth.asm):04252 (5+0)           std     ,u              Returned through the data stack
FDC4 39               (        forth.asm):04253 (4)             rts
                      (        forth.asm):04254         
     FDC5             (        forth.asm):04255         REALEND equ     *
                      (        forth.asm):04256         
                      (        forth.asm):04257         *******************************************************************************
                      (        forth.asm):04258         * String literals.
                      (        forth.asm):04259         
                      (        forth.asm):04260         * Using CR+LF as it is Minicom's default.
                      (        forth.asm):04261         
                      (        forth.asm):04262         * Clear the screen, VT100 style.
FDC5 1B5B481B5B4A0D00 (        forth.asm):04263         CSVT100 fcb     $1B,'[','H',$1B,'[','J',CR,NUL
                      (        forth.asm):04264         
FDCD 1B5B481B5B4A0D   (        forth.asm):04265         BOOTMSG fcb     $1B,'[','H',$1B,'[','J',CR
FDD4 5A3739466F727468 (        forth.asm):04266                 fcc     'Z79Forth - 6309 FORTH-79 Standard Sub-set.'
     202D203633303920
     464F5254482D3739
     205374616E646172
     64205375622D7365
     742E
FDFE 0D0A             (        forth.asm):04267                 fcb     CR,LF
FE00 3230323130333231 (        forth.asm):04268                 fcc     '20210321 Copyright Francois Laagel (2020).'
     20436F7079726967
     6874204672616E63
     6F6973204C616167
     656C202832303230
     292E
FE2A 0D0A0D0A00       (        forth.asm):04269                 fcb     CR,LF,CR,LF,NUL
                      (        forth.asm):04270         
FE2F 52414D204F4B3A20 (        forth.asm):04271         RAMOKM  fcc     'RAM OK: 32 KB.'
     3332204B422E
FE3D 0D0A00           (        forth.asm):04272         CRLFSTR fcb     CR,LF,NUL
                      (        forth.asm):04273         
FE40 52414D2063686563 (        forth.asm):04274         RAMFM   fcc     'RAM check failed.'
     6B206661696C6564
     2E
FE51 0D0A00           (        forth.asm):04275                 fcb     CR,LF,NUL
                      (        forth.asm):04276         
FE54 204F4B           (        forth.asm):04277         OKPRMPT fcc     ' OK'
FE57 0D0A00           (        forth.asm):04278                 fcb     CR,LF,NUL
                      (        forth.asm):04279         
                      (        forth.asm):04280         * Error messages for IODZHDL.
FE5A 496C6C6567616C20 (        forth.asm):04281         IOPERRM fcn     'Illegal opcode near '
     6F70636F6465206E
     6561722000
FE6F 4469766973696F6E (        forth.asm):04282         DV0ERRM fcn     'Division by 0 near '
     2062792030206E65
     61722000
                      (        forth.asm):04283         
FE83 4461746120737461 (        forth.asm):04284         ERRMTBL fcn     'Data stack overflow'   Error 0
     636B206F76657266
     6C6F7700
FE97 4461746120737461 (        forth.asm):04285                 fcn     'Data stack underflow'  Error 1
     636B20756E646572
     666C6F7700
FEAC 556E646566696E65 (        forth.asm):04286                 fcn     'Undefined'             Error 2
     6400
FEB6 557365722041424F (        forth.asm):04287                 fcn     'User ABORT'            Error 3
     525400
FEC1 00               (        forth.asm):04288                 fcn     ''                      Error 4 (formerly "Division by zero")
FEC2 4D697373696E6720 (        forth.asm):04289                 fcn     'Missing word name'     Error 5
     776F7264206E616D
     6500
FED4 496E636F72726563 (        forth.asm):04290                 fcn     'Incorrect STATE'       Error 6
     7420535441544500
FEE4 52657475726E2073 (        forth.asm):04291                 fcn     'Return stack overflow' Error 7
     7461636B206F7665
     72666C6F7700
FEFA 52657475726E2073 (        forth.asm):04292                 fcn     'Return stack underflow' Error 8
     7461636B20756E64
     6572666C6F7700
FF11 496C6C6567616C20 (        forth.asm):04293                 fcn     'Illegal construct'     Error 9
     636F6E7374727563
     7400
FF23 417373657274696F (        forth.asm):04294                 fcn     'Assertion failed'      Error 10
     6E206661696C6564
     00
FF34 522F4F20776F7264 (        forth.asm):04295                 fcn     'R/O word'              Error 11
     00
FF3D 4D697373696E6720 (        forth.asm):04296                 fcn     'Missing delimiter'     Error 12
     64656C696D697465
     7200
FF4F 496C6C6567616C20 (        forth.asm):04297                 fcn     'Illegal argument'      Error 13
     617267756D656E74
     00
FF60 4E6F206D61746368 (        forth.asm):04298                 fcn     'No matching CREATE'    Error 14
     696E672043524541
     544500
FF73 496E76616C696420 (        forth.asm):04299                 fcn     'Invalid BASE'          Error 15
     4241534500
FF80 576F7264206E616D (        forth.asm):04300                 fcn     'Word name too long'    Error 16
     6520746F6F206C6F
     6E6700
FF93 494F206572726F72 (        forth.asm):04301                 fcn     'IO error'              Error 17
     00
                      (        forth.asm):04302         
                      (        forth.asm):04303         * A-list used for numeric literal base prefixes.
FF9C 24               (        forth.asm):04304         BASALST fcc     '$'             Hexadecimal prefix
FF9D 10               (        forth.asm):04305                 fcb     16
FF9E 26               (        forth.asm):04306                 fcc     '&'             Decimal prefix
FF9F 0A               (        forth.asm):04307                 fcb     10
FFA0 23               (        forth.asm):04308                 fcc     '#'             Decimal prefix (an ANSI concession)
FFA1 0A               (        forth.asm):04309                 fcb     10
FFA2 25               (        forth.asm):04310                 fcc     '%'             Binary prefix
FFA3 02               (        forth.asm):04311                 fcb     2
FFA4 40               (        forth.asm):04312                 fcc     '@'             Octal prefix
FFA5 08               (        forth.asm):04313                 fcb     8
FFA6 00               (        forth.asm):04314                 fcb     0               End of list marker
                      (        forth.asm):04315         
                      (        forth.asm):04316         * Under no circumstance should the following symbol be negative!
     0049             (        forth.asm):04317         AVL     equ     VECTBL-*        Available EEPROM space left
                      (        forth.asm):04318         
                      (        forth.asm):04319         *******************************************************************************
                      (        forth.asm):04320         * Interrupt vector table
                      (        forth.asm):04321                 org     VECTBL
                      (        forth.asm):04322         
FFF0 E000             (        forth.asm):04323                 fdb     IODZHDL         Illegal opcode/Division by zero trap
FFF2 E035             (        forth.asm):04324                 fdb     SWI3HDL         SWI 3 interrupt vector address
FFF4 E035             (        forth.asm):04325                 fdb     SWI2HDL         SWI 2 interrupt vector address
FFF6 E035             (        forth.asm):04326                 fdb     FIRQHDL         FIRQ interrupt vector address
FFF8 E035             (        forth.asm):04327                 fdb     IRQHDL          IRA interrupt vector address
FFFA E035             (        forth.asm):04328                 fdb     SWIHDL          SWI interrupt vector address
FFFC E035             (        forth.asm):04329                 fdb     NMIHDL          NMI vector address
FFFE E036             (        forth.asm):04330                 fdb     RSTHDL          RESET vector address
                      (        forth.asm):04331         

Symbol Table:
[ G] _BS                              E1F2
[ G] _DMPHDR                          FAD5
[ G] _DMPINT                          FAB4
[ G] _INTERP                          E0C0
[ G] ABORT                            EFC7
[ G] ABS                              EE5B
[ G] AC8N1                            0014
[ G] ACD16                            0001
[ G] ACD64                            0002
[ G] ACDVSEL                          0001
[ G] ACIACTL                          D800
[ G] ACIADAT                          D801
[ G] ACIOVRN                          0020
[ G] ACIRDRF                          0001
[ G] ACIRSET                          0043
[ G] ACIRTS0                          0015
[ G] ACIRTS1                          0055
[ G] ACITDRE                          0002
[ G] ACQMOVP                          E48D
[ G] ACQVMRA                          E493
[ G] ACRST                            0003
[ G] ACRTS0                           0000
[ G] ACRTS1                           0040
[ G] ADDS                             E19D
[ G] ADIV16                           E170
[ G] AGAIN                            EE97
[ G] ALLOT                            FC61
[ G] AND                              ED45
[ G] AVL                              0049
[ G] BASALST                          FF9C
[ G] BASBKUP                          0128
[ G] BASE                             F9BC
[ G] BCSOPC                           2503
[ G] BDICEND                          010C
[ G] BDIRTY                           0004
[ G] BEGIN                            EE89
[ G] BFDISP                           0410
[ G] BIN                              F9CA
[ G] BINUSE                           0001
[ G] BKCHAR                           F18C
[ G] BKCOMP                           F015
[ G] BKIN2PT                          E703
[ G] BKQUOT                           F04B
[ G] BKSLSH                           F243
[ G] BL                               F544
[ G] BLANKS                           FC9E
[ G] BLK                              E935
[ G] BLKSIZ                           0400
[ G] BLOCK                            E906
[ G] BLSTWAD                          010A
[ G] BMAPPD                           0002
[ G] BNEOPC                           2603
[ G] BOBLKNO                          0402
[ G] BOFLAGS                          0401
[ G] BOOTMSG                          FDCD
[ G] BOTERM                           0400
[ G] BS                               0008
[ G] BSBFADR                          011C
[ G] BUF0                             03F0
[ G] BUF1                             0800
[ G] BUFFER                           E8B9
[ G] BYE                              F182
[ G] CCOMMA                           FC3C
[ G] CELLS                            FD04
[ G] CF1BKRD                          E808
[ G] CF1BKWR                          E823
[ G] CF1BPRE                          E7EB
[ G] CF1SRD                           E7BD
[ G] CF1SWR                           E7D6
[ G] CFANTHS                          E768
[ G] CFBASE                           C000
[ G] CFBSYB                           0080
[ G] CFCARDP                          0136
[ G] CFCHIGR                          C005
[ G] CFCLOWR                          C004
[ G] CFCMDIS                          E74D
[ G] CFCMMIR                          0137
[ G] CFCOMDR                          C007
[ G] CFDATAR                          C000
[ G] CFDRHDR                          C006
[ G] CFDRQB                           0008
[ G] CFDRSEL                          E75F
[ G] CFDSCB                           0010
[ G] CFDWFB                           0020
[ G] CFERRB                           0001
[ G] CFERRCD                          0138
[ G] CFERRCK                          E740
[ G] CFERROR                          C001
[ G] CFETCH                           FD98
[ G] CFFEATR                          C001
[ G] CFIDDEV                          00EC
[ G] CFINIT                           E786
[ G] CFLAG                            0001
[ G] CFR1SRA                          E7D5
[ G] CFRDY                            E72A
[ G] CFRDYB                           0040
[ G] CFRSCTS                          0020
[ G] CFSCNTR                          C002
[ G] CFSCSZ                           0200
[ G] CFSETFT                          00EF
[ G] CFSNUMR                          C003
[ G] CFSTATR                          C007
[ G] CFWAIT                           E722
[ G] CFWSCTS                          0030
[ G] CHAR                             F19B
[ G] CHKNDPT                          E336
[ G] CHKRTS                           E13A
[ G] CKBASE                           E2CD
[ G] CKBASRA                          E2DD
[ G] CKDPTRA                          E341
[ G] CKNBPFX                          E2A0
[ G] CKOVRUN                          0000
[ G] CMDBFSZ                          0084
[ G] CMDBUF                           02CA
[ G] CMDLNSZ                          0129
[ G] CMOVE                            FCDE
[ G] CMOVED                           FCAE
[ G] CMP2                             E476
[ G] CMP2RA                           E47C
[ G] CMPCOM1                          F0AA
[ G] CMPCOMA                          F09B
[ G] COM                              ED5C
[ G] COM0                             ED63
[ G] COMMA                            FC50
[ G] COMP                             E10D
[ G] COMPC                            F0B9
[ G] COMPLRA                          E123
[ G] COMPR                            F0D1
[ G] CONS                             EAB1
[ G] CONTIND                          F6BE
[ G] COUNT                            F5B9
[ G] CR                               000D
[ G] CREAT0                           EA40
[ G] CREAT1                           EA58
[ G] CREATE                           EA36
[ G] CRLF                             F585
[ G] CRLFSTR                          FE3D
[ G] CSSNTVE                          0000
[ G] CSTORE                           FD73
[ G] CSUMFLM                          EB9E
[ G] CSVT100                          FDC5
[ G] CURTOKL                          0132
[ G] CVISSGN                          0131
[ G] CVNSTR                           E341
[ G] CVT                              F417
[ G] CVT0                             F41E
[ G] CVT1                             F426
[ G] CVTB                             F4C7
[ G] CVTE                             F3CB
[ G] CVTFCN                           012F
[ G] DASHTR                           F5CF
[ G] DCMOVE                           FCCD
[ G] DDUMP                            FB13
[ G] DEBUG                            0000
[ G] DECIMAL                          F9E6
[ G] DEFFLG                           0134
[ G] DEFFLM                           0040
[ G] DEPTH                            EA20
[ G] DEV0                             C000
[ G] DEV1                             C400
[ G] DEV2                             C800
[ G] DEV3                             CC00
[ G] DEV4                             D000
[ G] DEV5                             D400
[ G] DEV6                             D800
[ G] DEV7                             DC00
[ G] DICEND                           0108
[ G] DIFF                             ECD9
[ G] DIV                              F839
[ G] DIV1                             F842
[ G] DIVFCN                           012D
[ G] DLESS                            F31D
[ G] DNEG                             F2EA
[ G] DO                               EBB5
[ G] DOES                             EA60
[ G] DOESEX                           EA6F
[ G] DOEX                             EBC8
[ G] DOT                              F4D3
[ G] DOTR                             F4FD
[ G] DOTR0                            F507
[ G] DOTTICK                          FAFC
[ G] DPLUS                            F2C8
[ G] DPOPRA                           E6CB
[ G] DPSHRA                           E6BC
[ G] DROP                             FBA5
[ G] DUMP                             FA04
[ G] DUP                              FB93
[ G] DV0ERRM                          FE6F
[ G] DZEQ                             F310
[ G] EBUFS                            E83E
[ G] ELSE                             EC8A
[ G] EMIT                             F72A
[ G] EMPT1B                           E275
[ G] EMPTYB                           E26D
[ G] EMXASXT                          E14E
[ G] END                              EF00
[ G] EQ                               ECBD
[ G] ERRHD1                           E639
[ G] ERRHDLR                          E636
[ G] ERRMTBL                          FE83
[ G] ERRPCK                           FBDF
[ G] ETX                              0003
[ G] EXCT                             F168
[ G] EXIT                             EEB5
[ G] EXPECT                           F60A
[ G] FDCTSYM                          E49E
[ G] FETCH                            FDB5
[ G] FILL                             FC77
[ G] FILL1                            FC84
[ G] FIND                             EFDB
[ G] FINDSYM                          E512
[ G] FIRQHDL                          E035
[ G] FLUSH                            E893
[ G] FNDPLD                           0110
[ G] FORGET                           F119
[ G] FORTHIN                          E241
[ G] GETCH                            E1C6
[ G] GETS                             E1FE
[ G] HDMP2                            E18E
[ G] HDMP4                            E175
[ G] HDRCSUM                          EB48
[ G] HDRSKIP                          EB3E
[ G] HERE                             FD23
[ G] HEX                              F9F7
[ G] HEX1D                            E15C
[ G] HEXBFSZ                          0050
[ G] HEXBUF                           034E
[ G] HOLD                             F3FB
[ G] HT                               0009
[ G] HVCONV                           0000
[ G] ICHECK                           EB54
[ G] IF                               EC49
[ G] IFEX                             EC71
[ G] ILLOPC                           00C7
[ G] IMDFLG                           0133
[ G] IMDFLM                           0080
[ G] IMMED                            EAF8
[ G] IMMED1                           EB07
[ G] INDEX                            E977
[ G] INDI                             EF65
[ G] INDIP                            EF8A
[ G] INDJ                             EF94
[ G] INDJP                            EF9D
[ G] INDK                             EFA7
[ G] INF                              EE1A
[ G] INIT                             E048
[ G] INSBPAD                          F4B4
[ G] INTERP                           E0A8
[ G] INTISRA                          E0FB
[ G] INTRPRA                          E108
[ G] INVERT                           ED6F
[ G] IODZHDL                          E000
[ G] IOERR                            E7D0
[ G] IOPERRM                          FE5A
[ G] IOSTRT                           C000
[ G] IRDPTH                           012B
[ G] IRQHDL                           E035
[ G] ISNEGF                           0130
[ G] JMPOPC                           007E
[ G] JSRLAST                          0114
[ G] JSROPC                           00BD
[ G] KEY                              F718
[ G] KEYP                             F6F3
[ G] LAST                             FD16
[ G] LBRACK                           F00D
[ G] LDXOPC                           008E
[ G] LEAVE                            EF50
[ G] LF                               000A
[ G] LINE                             E95C
[ G] LIST                             E9AB
[ G] LITER                            E45A
[ G] LITERAL                          EA8D
[ G] LOAD                             F64D
[ G] LOAD1                            F65E
[ G] LOCWRT                           E3F8
[ G] LOOP                             EBD1
[ G] LOOP1                            EBDC
[ G] LOOPEX                           EBF8
[ G] LPAR                             F209
[ G] LSTWAD                           0106
[ G] LWMNRA                           E40E
[ G] MAX                              EE29
[ G] MDIV                             F880
[ G] MILLIS                           F6D8
[ G] MILLIS1                          F6E7
[ G] MIN                              EE42
[ G] MINTLRA                          E0BE
[ G] MINUS                            F777
[ G] MINUSST                          FD5F
[ G] MOD                              F873
[ G] MONFLM                           0020
[ G] MONITOR                          EB21
[ G] MORE                             E0D6
[ G] MOVE                             FCEE
[ G] MROT                             FC30
[ G] MRUBUFA                          011A
[ G] MSLCNT                           03E2
[ G] MULT                             F7FD
[ G] NAK                              0015
[ G] NBCTFB0                          0135
[ G] NCLR                             EA04
[ G] NDCTWKS                          E538
[ G] NEGATE                           EE72
[ G] NFLAG                            0008
[ G] NIP                              FB7F
[ G] NMCVCRA                          E135
[ G] NMCVIRA                          E0D1
[ G] NMIHDL                           E035
[ G] NOT                              EDC7
[ G] NPOP                             E6BD
[ G] NPUSH                            E6AF
[ G] NSTBOT                           024A
[ G] NSTKSZ                           00C0
[ G] NSTTOP                           018A
[ G] NUL                              0000
[ G] NULP                             EDAF
[ G] NUMCVRA                          E336
[ G] NUMCVT                           E2DD
[ G] NXTBLK                           F6A3
[ G] NXTBLK1                          F6AE
[ G] OCTAL                            F9D7
[ G] OKPRMPT                          FE54
[ G] ONEL                             F7BC
[ G] ONEM                             F78B
[ G] ONEP                             F750
[ G] ONEPST                           FD47
[ G] OR                               ED2F
[ G] OVER                             FBF9
[ G] PAD                              F58E
[ G] PADBSZ                           0051
[ G] PADBUF                           0139
[ G] PAGE                             F577
[ G] PAYLOAD                          F8CD
[ G] PICK                             FBC7
[ G] PICK1                            FBD2
[ G] PLOAD                            010E
[ G] PLOOP                            EBFD
[ G] PLOOPEX                          EC0B
[ G] PLOPEX1                          EC0E
[ G] PLUS                             F73C
[ G] PLUSST                           FD30
[ G] PLUSST1                          FD42
[ G] POSTPON                          F057
[ G] pragma                           0000
[ G] PRBLKIN                          E611
[ G] PSTR                             F261
[ G] ptop0                            F4DC
[ G] PUTCH                            E1B7
[ G] PUTCR                            E1E8
[ G] PUTS                             E1DB
[ G] QMARK                            FDAA
[ G] QRYDUP                           FB4E
[ G] QUIT                             EFB0
[ G] RAMCHK                           E058
[ G] RAMFAIL                          E06A
[ G] RAMFM                            FE40
[SG] RAMFTCH                          0C15
[SG] RAMFTCH                          0C14
[ G] RAMOK                            E07C
[ G] RAMOKM                           FE2F
[ G] RAMSIZE                          8000
[ G] RAMSTRT                          0000
[ G] RBRACK                           F003
[ G] RCLR                             EA10
[ G] RDEPTH                           012A
[ G] REALEND                          FDC5
[ G] RECADDR                          0112
[ G] RECURSE                          F109
[ G] RELFEAT                          0001
[ G] REPEAT                           EF15
[ G] RFETCH                           EF82
[ G] RFROM                            EF38
[ G] ROLL                             FC06
[ G] ROLL1                            FC11
[ G] ROMSTRT                          E000
[ G] ROT                              FC24
[ G] RPICKN                           EF6C
[ G] RPOP                             E6EA
[ G] RPOPRA                           E703
[ G] RPSHRA                           E6E9
[ G] RPUSH                            E6CC
[ G] RSBSPFX                          E2C6
[ G] RSP                              0100
[ G] RSTBOT                           02CA
[ G] RSTHDL                           E036
[ G] RSTKSZ                           0080
[ G] RSTRCT                           EB11
[ G] RSTTOP                           024A
[ G] RTSOPC                           0039
[ G] RTSREMV                          012C
[ G] SAVBUF                           E852
[ G] SCNETOK                          E28E
[ G] SCNSTOK                          E280
[ G] SCR                              E94F
[ G] SHARPS                           F40B
[ G] SHIFT                            F7D2
[ G] SIGN                             F3E4
[ G] SINFEQ                           ECF6
[ G] SLEN                             E1A8
[ G] SOURCE                           F225
[ G] SP                               0020
[ G] SPACE                            F550
[ G] SPACES                           F55E
[ G] SQUOTE                           F276
[ G] SSDFEAT                          0001
[ G] STATE                            F9AD
[ G] STOD                             E9EA
[ G] STORE                            FD86
[ G] STRSL1                           F896
[ G] STRSLMD                          F8B6
[ G] STRSLSH                          F88C
[ G] STSLFCN                          012E
[ G] SUP                              EE0B
[ G] SWAP                             FBB0
[ G] SWDIC                            E38A
[ G] SWI2HDL                          E035
[ G] SWI3HDL                          E035
[ G] SWIHDL                           E035
[ G] SYSSTK                           F8C3
[ G] TBUFF                            039E
[ G] TBUFSZ                           0048
[ G] TERPRET                          F623
[ G] THEEND                           FDB5
[ G] THEN                             ECAB
[ G] THRU                             F681
[ G] TOIN                             E942
[ G] TOKENEP                          0104
[ G] TOKENSP                          0102
[ G] TOR                              EF44
[ G] TUCK                             FB64
[ G] TWODIV                           F826
[ G] TWODROP                          F372
[ G] TWODUP                           F384
[ G] TWOFTCH                          F3B4
[ G] TWOL                             F7C7
[ G] TWOM                             F79E
[ G] TWOOVER                          F336
[ G] TWOP                             F763
[ G] TWOSTOR                          F39F
[ G] TWOSWAP                          F352
[ G] TWOTIM                           F813
[ G] TYPE                             F59B
[ G] UBASE                            011E
[ G] UBLK                             0124
[ G] UDOT                             F4F3
[ G] UDOTR                            F539
[ G] UINF                             EDE0
[ G] UNLESS                           EC78
[ G] UNLOOP                           EC39
[ G] UNTIL                            EED7
[ G] UPDATE                           E89E
[ G] USCR                             0126
[ G] USEDP                            0001
[ G] USTATE                           0120
[ G] USUP                             EDD0
[ G] UTOIN                            0122
[ G] VARCON                           E46C
[ G] VARCON1                          E46E
[ G] VARCON2                          E471
[ G] VARI                             EAD3
[ G] VARSPC                           0100
[ G] VECTBL                           FFF0
[ G] VLIST                            F8DD
[ G] VLPRVEP                          0116
[ G] VLPRVHD                          0118
[ G] VT100                            0000
[ G] WBIFDRT                          E86A
[ G] WDICSPC                          0C10
[ G] WHILE                            EF09
[ G] WITHIN                           EDF0
[ G] WORD                             F1C4
[ G] WRLNMSK                          001F
[ G] WTOOLNG                          E42B
[ G] XOR                              ED15
[ G] XOR1                             ED2A
[ G] ZEROL                            F7B2
[ G] ZFLAG                            0004
[ G] ZGREAT                           ED7B
[ G] ZLESS                            ED95
