                      (        forth.asm):00001         * 6309 Forth based on my 1984/07/16 TRS-80 Model 1 level II ROM implementation.
                      (        forth.asm):00002         *
                      (        forth.asm):00003         * This work is dedicated to Alain Pinaud, author of "Programmer en Forth"
                      (        forth.asm):00004         * published by Editions du P.S.I. in 1983--i.e. my virtual mentor in the field.
                      (        forth.asm):00005         * Special thanks go William Astle for his fantastic LW Tools utility set and
                      (        forth.asm):00006         * to Robert Lipe for his advice on serial line handling. Apache subversion
                      (        forth.asm):00007         * and the sdiff utility also were on my side all the time.
                      (        forth.asm):00008         *
                      (        forth.asm):00009         * Also credited for their help: Justin Poirier (seminal HW design), Daniel
                      (        forth.asm):00010         * Tufvesson (original CompactFlash interface), Peter Minuth (general Forth
                      (        forth.asm):00011         * guruness), Paul E. Bennett (ANSI compatibility advice); Michel Jean, Bill
                      (        forth.asm):00012         * Ragsdale, Pablo Hugo Reda and Demitri Peynado for contributed application
                      (        forth.asm):00013         * level code; Carsten Strotmann for most of the benchmarking code (see
                      (        forth.asm):00014         * https://theultimatebenchmark.org/); Gerry Jackson and Steve R. Palmer
                      (        forth.asm):00015         * (see https://github.com/gerryjackson/forth2012-test-suite) for selected
                      (        forth.asm):00016         * bits and pieces of the Forth2012 test suite (see https://forth-standard.org/).
                      (        forth.asm):00017         *
                      (        forth.asm):00018         * This is a native Forth. Not a threaded interpretive implementation.
                      (        forth.asm):00019         * Worth noticing is the fact that the return stack does not hold return
                      (        forth.asm):00020         * addresses at all. All what is stored there is loop indexes and control
                      (        forth.asm):00021         * structures jump addresses. Actual return addresses are kept in the system
                      (        forth.asm):00022         * stack. All in all, this is the result of the work of a 19 year old guy,
                      (        forth.asm):00023         * heavily revisited 35 years later. Some quirks remain that prevent me
                      (        forth.asm):00024         * from offering the full required set--not to mention the choice of using
                      (        forth.asm):00025         * an 8K EEPROM. The downside of this implementation is that the generated
                      (        forth.asm):00026         * code is about 30% larger than a threaded interpretive implementation
                      (        forth.asm):00027         * would be. So it goes...
                      (        forth.asm):00028         *
                      (        forth.asm):00029         * The code generated is limited to a very small instruction set:
                      (        forth.asm):00030         *
                      (        forth.asm):00031         * LDXOPC        $8E     LDX (immediate)
                      (        forth.asm):00032         * JMPOPC        $7E     JMP (extended)
                      (        forth.asm):00033         * JSROPC        $BD     JSR (extended)
                      (        forth.asm):00034         * RTSOPC        $39     RTS (inherent)
                      (        forth.asm):00035         * BCSOPC        $2503   BCS *+5 (relative) Used in LOOP, +LOOP
                      (        forth.asm):00036         * BNEOPC        $2603   BNE *+5 (relative) Used in IF, UNTIL
                      (        forth.asm):00037         *
                      (        forth.asm):00038         * On error, the system stack pointer is reset. The return stack also is
                      (        forth.asm):00039         * but the data stack will be in the same state as when the error occurred.
                      (        forth.asm):00040         * ABORT and QUIT enforce their own 79-STANDARD behaviour.
                      (        forth.asm):00041         *
                      (        forth.asm):00042         * The 79-STANDARD Forth specification can be downloaded from
                      (        forth.asm):00043         * https://www.complang.tuwien.ac.at/forth/fth79std/FORTH-79.TXT
                      (        forth.asm):00044         *
                      (        forth.asm):00045         * Additionally, this implementation provides a few FORTH-83 words. Those
                      (        forth.asm):00046         * words are CMOVE> and RECURSE. See
                      (        forth.asm):00047         * http://forth.sourceforge.net/standard/fst83/FORTH-83.PRN
                      (        forth.asm):00048         * Floored division has been implemented on the top of the processor's native
                      (        forth.asm):00049         * symmetric operation (credits to David Frech). This results in a slight
                      (        forth.asm):00050         * performance loss but helps a lot with compatibility with FORTH-83 and ANSI
                      (        forth.asm):00051         * code.
                      (        forth.asm):00052         *
                      (        forth.asm):00053         * \ ['] [CHAR] .S ACCEPT CELLS CHAR COMPILE, INVERT KEY? NIP POSTPONE S>D S"
                      (        forth.asm):00054         * SOURCE TUCK U> * UNLOOP and WITHIN have been borrowed from the ANSI draft 6
                      (        forth.asm):00055         * specification. See http://www.forth.org/svfig/Win32Forth/DPANS94.txt
                      (        forth.asm):00056         *
                      (        forth.asm):00057         * RESTRICT is non-standard. It comes from GNU Forth (VolksForth). The " OK"
                      (        forth.asm):00058         * non-prompt string also does, by the way. Thanks to Anton Ertl for his terse
                      (        forth.asm):00059         * yet valuable input.
                      (        forth.asm):00060         *
                      (        forth.asm):00061         * .' (dot-tick) is non-standard. It comes from SwiftForth. It will be supported
                      (        forth.asm):00062         * whether or not the symbolic stack dump has been configured (see SSDFEAT in
                      (        forth.asm):00063         * constants.asm). However, please note that effective symbolic references will
                      (        forth.asm):00064         * be resolved only if the feature was enabled at compilation time. Otherwise
                      (        forth.asm):00065         * a simple HEX print of the cell at the top of the data stack will be
                      (        forth.asm):00066         * performed. This is meant to support Forth source code that does not depend
                      (        forth.asm):00067         * on the feature vector (see examples/dis.4th).
                      (        forth.asm):00068         *
                      (        forth.asm):00069         * MONITOR and ICHECK are also non-standard. They are intended to maintain and
                      (        forth.asm):00070         * verify the integrity of a checksum of the code section of RAM resident
                      (        forth.asm):00071         * words, with the exception of VARIABLEs and CREATEd words. CREATEd words,
                      (        forth.asm):00072         * if subject to the MONITOR treatment will also carry a code section
                      (        forth.asm):00073         * checksum, although this is not the default behaviour. The checksum will
                      (        forth.asm):00074         * consist in an extra byte added to every word's header. MONITOR and ICHECK
                      (        forth.asm):00075         * will be available whether or not the reliability feature has been configured
                      (        forth.asm):00076         * (see RELFEAT in constants.asm). They will only carry effective semantics
                      (        forth.asm):00077         * if the feature was actually enabled at compilation time. This is meant to
                      (        forth.asm):00078         * support Forth source code that does not depend on the feature vector.
                      (        forth.asm):00079         *
                      (        forth.asm):00080         * Experimental MC146818 RTC support: the feature is disabled by default
                      (        forth.asm):00081         * (see RTCFEAT in constants.asm) because it relies on undocumented schematics.
                      (        forth.asm):00082         * Also, the required underlying circuitry is not intended to ever become an
                      (        forth.asm):00083         * integral part of the Z79Forth reference board itself. Some better designed
                      (        forth.asm):00084         * form of it might eventually surface in the form of an extension specification.
                      (        forth.asm):00085         * At the time of this writing this is just a proof of concept, but whether or
                      (        forth.asm):00086         * not the feature is enabled, three extra words will be added to the dictionary.
                      (        forth.asm):00087         * They are RTC@ RTC! and TICKS They can be safely ignored.
                      (        forth.asm):00088         *
                      (        forth.asm):00089         * Forth source code portability note:
                      (        forth.asm):00090         * Because Z79Forth does not use the return stack to store return addresses,
                      (        forth.asm):00091         * it makes it quite easy to write code that is not readily portable to classic
                      (        forth.asm):00092         * threaded interpretive implementations. The resulting code will be simpler but
                      (        forth.asm):00093         * portability will be limited.
                      (        forth.asm):00094         *
                      (        forth.asm):00095         * Miscellaneous notes: RA stands for return address; EP for entry point.
                      (        forth.asm):00096         * CF is a shortcut for CompactFlash. TOS means top of the data/normal stack.
                      (        forth.asm):00097         * Occasionally, CFA is used for code field address which, in this
                      (        forth.asm):00098         * implementation, is a synonym for compilation address. XT means execution
                      (        forth.asm):00099         * token--the ANSI term for a compilation address. MSC stands for most
                      (        forth.asm):00100         * significant cell; LSC for least significant cell.
                      (        forth.asm):00101         *
                      (        forth.asm):00102         * The complete guide to the HD6309 extended instruction set can be found at:
                      (        forth.asm):00103         * https://cyberabi.ipower.com/Downloads/The_6309_Book.pdf. For convenience,
                      (        forth.asm):00104         * and with the author's explicit agreement, this document has been included
                      (        forth.asm):00105         * in this distribution. This is recommended reading for anyone altering this
                      (        forth.asm):00106         * code or trying to make some sense of it!!!
                      (        forth.asm):00107         *
                      (        forth.asm):00108         * This whole effort started out as a porting endeavour and ended up being a
                      (        forth.asm):00109         * substantial rewrite, trying to take advantage of the features of the 6309
                      (        forth.asm):00110         * as much as possible. The primary goals of this implementation are:
                      (        forth.asm):00111         * reliability, performance and code compactness. A number of bugs in the
                      (        forth.asm):00112         * original code have been fixed--some remain for sure!
                      (        forth.asm):00113         *
                      (        forth.asm):00114         * Obligatory literary reference:
                      (        forth.asm):00115         * "The paper is very heavy going, and I should never have read it, had I not
                      (        forth.asm):00116         * written it myself." John E. Littlewood (1885-1977).
                      (        forth.asm):00117         *
                      (        forth.asm):00118         * The original soundtrack for this work is available at:
                      (        forth.asm):00119         * https://youtu.be/YqXZtGyFyDo?t=4023 (J.S. Bach BWV 1080, contrapunctus 14).
                      (        forth.asm):00120         
0000                  (        forth.asm):00121         pragma  opt cd,operandsizewarning
                      (        forth.asm):00122         
                      (        forth.asm):00123                 include constants.asm
                      (    constants.asm):00001         * Begin tunable parameters section.
                      (    constants.asm):00002         
     0000             (    constants.asm):00003         CSSNTVE equ     0               Words and HEX numbers are case sensitive if NZ
     0001             (    constants.asm):00004         SSDFEAT equ     1               Set to 1 to enable the symbolic stack dump feat.
     0001             (    constants.asm):00005         RELFEAT set     1               Set to 1 to enable the reliability feature
                      (    constants.asm):00006         *                               Caution: when this is enabled, you can no
                      (    constants.asm):00007         *                               longer fit a DEBUG image into an 8 KB EEPROM
     0000             (    constants.asm):00008         RTCFEAT equ     0               Cool but the reliability feature must go...
     0000             (    constants.asm):00009         DEBUG   equ     0               Enforce assertions and miscellaneous checks
     0001             (    constants.asm):00010         HVNMI   equ     1               NMI handler support
     0000             (    constants.asm):00011         HVNMI2  equ     0               NMI handler support (async input debugging)
                      (    constants.asm):00012         * Loop count for MS. This is busy waiting, so we depend on the CPU clock speed.
     031A             (    constants.asm):00013         MSLCNT  equ     794             at 4 MHz native mode
                      (    constants.asm):00014         *MSLCNT equ     994             at 5 MHz native mode
                      (    constants.asm):00015         
                      (    constants.asm):00016         * End tunable parameters section.
                      (    constants.asm):00017         
                      (    constants.asm):00018                 IFNE    RTCFEAT
0000                  (    constants.asm):00019         RELFEAT set     0               RTCFEAT disables RELFEAT
                      (    constants.asm):00020                 ELSE
                      (    constants.asm):00021                 IFNE    HVNMI
                      (    constants.asm):00022                 IFNE    HVNMI2
0000                  (    constants.asm):00023         RELFEAT set     0               HVNMI and HVNMI2 disable RELFEAT
                      (    constants.asm):00024                 ENDC                    HVNMI2
                      (    constants.asm):00025                 ENDC                    HVNMI
                      (    constants.asm):00026                 ENDC                    RTCFEAT
                      (    constants.asm):00027         
                      (    constants.asm):00028         * Memory map.
     0000             (    constants.asm):00029         RAMSTRT equ     $0000
     8000             (    constants.asm):00030         RAMSIZE equ     $8000
     C000             (    constants.asm):00031         IOSTRT  equ     $C000
     E000             (    constants.asm):00032         ROMSTRT equ     $E000
     FFF0             (    constants.asm):00033         VECTBL  equ     $FFF0
                      (    constants.asm):00034         
                      (    constants.asm):00035         * Base address for global variables (direct page addressed).
     0100             (    constants.asm):00036         VARSPC  equ     $100
                      (    constants.asm):00037         
                      (    constants.asm):00038         * The 74HCT138 (U7) IO address decoder maps one 1 KB area per usable device.
     C000             (    constants.asm):00039         DEV0    equ     $C000           Compact Flash memory module (optional)
     C400             (    constants.asm):00040         DEV1    equ     $C400
     C800             (    constants.asm):00041         DEV2    equ     $C800
     CC00             (    constants.asm):00042         DEV3    equ     $CC00
     D000             (    constants.asm):00043         DEV4    equ     $D000
     D400             (    constants.asm):00044         DEV5    equ     $D400           MC146818 RTC (optional)
     D800             (    constants.asm):00045         DEV6    equ     $D800           HD63B50 unit 0
     DC00             (    constants.asm):00046         DEV7    equ     $DC00
                      (    constants.asm):00047         
     D800             (    constants.asm):00048         ACIACTL equ     DEV6
     D801             (    constants.asm):00049         ACIADAT equ     DEV6+1
                      (    constants.asm):00050         
                      (    constants.asm):00051         * ACIA control register bits.
     0003             (    constants.asm):00052         ACRST   equ     %00000011       ACIA master reset
                      (    constants.asm):00053         
                      (    constants.asm):00054         * 1.84320 MHz Y1: 115200 bps in the direct path, 38400 bps in the DIV3 path
     0001             (    constants.asm):00055         ACDIV16 equ     %00000001       ACIA div 16
                      (    constants.asm):00056         
     0014             (    constants.asm):00057         AC8N1   equ     %00010100       ACIA 8N1
     0000             (    constants.asm):00058         ACRTS0  equ     %00000000       ACIA RTS# low
     0040             (    constants.asm):00059         ACRTS1  equ     %01000000       ACIA RTS# high
     0080             (    constants.asm):00060         ACRDINT equ     %10000000       IRQ on RDRF
                      (    constants.asm):00061         
     0043             (    constants.asm):00062         ACIRSET equ     ACRTS1|ACRST
     00D5             (    constants.asm):00063         ACIRTS1 equ     ACRTS1|ACRDINT|AC8N1|ACDIV16
     0095             (    constants.asm):00064         ACIRTS0 equ     ACRTS0|ACRDINT|AC8N1|ACDIV16
                      (    constants.asm):00065         
                      (    constants.asm):00066         * ACIA status register bits.
     0001             (    constants.asm):00067         ACIRDRF equ     %00000001       Receive data register full
     0002             (    constants.asm):00068         ACITDRE equ     %00000010       Transmit data register empty
     0020             (    constants.asm):00069         ACIOVRN equ     %00100000       Overrun status register bit
     0080             (    constants.asm):00070         ACIISVC equ     %10000000       Interrupt needs servicing
                      (    constants.asm):00071         
                      (    constants.asm):00072         * Compact Flash parameters.
     C000             (    constants.asm):00073         CFBASE  equ     DEV0
     C000             (    constants.asm):00074         CFDATAR equ     CFBASE          R/W data register
     C001             (    constants.asm):00075         CFERROR equ     CFBASE+1        RO error register
     C001             (    constants.asm):00076         CFFEATR equ     CFBASE+1        WO features register
     C002             (    constants.asm):00077         CFSCNTR equ     CFBASE+2        R/W sector count register
     C003             (    constants.asm):00078         CFSNUMR equ     CFBASE+3        R/W sector number register
     C004             (    constants.asm):00079         CFCLOWR equ     CFBASE+4        R/W cylinder low register
     C005             (    constants.asm):00080         CFCHIGR equ     CFBASE+5        R/W cylinder high register
     C006             (    constants.asm):00081         CFDRHDR equ     CFBASE+6        R/W drive/head register
     C007             (    constants.asm):00082         CFSTATR equ     CFBASE+7        RO status register
     C007             (    constants.asm):00083         CFCOMDR equ     CFBASE+7        WO command register
                      (    constants.asm):00084         
                      (    constants.asm):00085         * CF status bits.
     0080             (    constants.asm):00086         CFBSYB  equ     %10000000       BSY status bit
     0040             (    constants.asm):00087         CFRDYB  equ     %01000000       RDY status bit
     0020             (    constants.asm):00088         CFDWFB  equ     %00100000       DWF status bit (not used)
     0010             (    constants.asm):00089         CFDSCB  equ     %00010000       DSC status bit (not used)
     0008             (    constants.asm):00090         CFDRQB  equ     %00001000       DRQ status bit
     0001             (    constants.asm):00091         CFERRB  equ     %00000001       ERR status bit
                      (    constants.asm):00092         
     0200             (    constants.asm):00093         CFSCSZ  equ     $200            Compact Flash (IDE) sector size
                      (    constants.asm):00094         
                      (    constants.asm):00095         * CF commands.
     00EC             (    constants.asm):00096         CFIDDEV equ     $EC             Identify Device
     00EF             (    constants.asm):00097         CFSETFT equ     $EF             Set Feature
     0020             (    constants.asm):00098         CFRSCTS equ     $20             Read Sectors
     0030             (    constants.asm):00099         CFWSCTS equ     $30             Write Sectors
                      (    constants.asm):00100         
                      (    constants.asm):00101         * Buffer in-memory structure:
                      (    constants.asm):00102         * data: 1024 bytes.
                      (    constants.asm):00103         * terminator: 1 byte set to 0.
                      (    constants.asm):00104         * flags: 1 byte.
                      (    constants.asm):00105         * blknum: 2 bytes.
     0001             (    constants.asm):00106         BINUSE  equ     1               Buffer is allocated (the blknum field is valid)
     0002             (    constants.asm):00107         BMAPPD  equ     2               Block has been read from the CF device
     0004             (    constants.asm):00108         BDIRTY  equ     4               Block has been marked for update
     0400             (    constants.asm):00109         BLKSIZ  equ     2*CFSCSZ        Block size is 2 CF sectors (1 KB)
                      (    constants.asm):00110         * Buffer field offsets.
     0400             (    constants.asm):00111         BOTERM  equ     BLKSIZ          Base buffer to the 'terminator' field offset
     0401             (    constants.asm):00112         BOFLAGS equ     BLKSIZ+1        Base buffer to the 'flag' field offset
     0402             (    constants.asm):00113         BOBLKNO equ     BLKSIZ+2        Base buffer to the 'blknum' field offset
                      (    constants.asm):00114         
     0410             (    constants.asm):00115         BFDISP  equ     BUF1-BUF0       Offset between resident buffers
                      (    constants.asm):00116         
                      (    constants.asm):00117         * MC146818 RTC registers.
     D400             (    constants.asm):00118         RTAS    equ     DEV5            Latch target register address offset
     D401             (    constants.asm):00119         RTDS    equ     (DEV5+1)        Actual target register access
                      (    constants.asm):00120         * RTC internal register offsets.
     0000             (    constants.asm):00121         RTOSEC  equ     0               Seconds
     0001             (    constants.asm):00122         RTOSECA equ     1               Seconds alarm
     0002             (    constants.asm):00123         RTOMIN  equ     2               Minutes
     0003             (    constants.asm):00124         RTOMINA equ     3               Minutes alarm
     0004             (    constants.asm):00125         RTOHOUR equ     4               Hours
     0005             (    constants.asm):00126         RTOHRA  equ     5               Hours alarm
     0006             (    constants.asm):00127         RTODOW  equ     6               Day of week
     0007             (    constants.asm):00128         RTODOM  equ     7               Day of month
     0008             (    constants.asm):00129         RTOMON  equ     8               Month
     0009             (    constants.asm):00130         RTOYEAR equ     9               Year
     000A             (    constants.asm):00131         RTOREGA equ     10              Register A
     000B             (    constants.asm):00132         RTOREGB equ     11              Register B
     000C             (    constants.asm):00133         RTOREGC equ     12              Register C
     000D             (    constants.asm):00134         RTOREGD equ     13              Register D
     000E             (    constants.asm):00135         RTOUMB  equ     14              Base of user defined NVRAM storage
     0032             (    constants.asm):00136         RTUMSZ  equ     50              Size of user defined NVRAM storage
     003F             (    constants.asm):00137         RTOPRES equ     (RTOUMB+RTUMSZ-1) RTC NVRAM offset for dectecting dev presence
                      (    constants.asm):00138         
                      (    constants.asm):00139         * Register A bits.
     0080             (    constants.asm):00140         RTAUIP  equ     $80             Update in progress
     0070             (    constants.asm):00141         RTADVRS equ     $70             Divider reset, not in operation
     0020             (    constants.asm):00142         RTADV32 equ     $20             In operation, 32 KHz time base
     000A             (    constants.asm):00143         RTARS64 equ     $A              32 KHz time base, 64 Hz PI (every 15.625 ms)
                      (    constants.asm):00144         
                      (    constants.asm):00145         * Register B bits.
     0080             (    constants.asm):00146         RTBSET  equ     $80
     0040             (    constants.asm):00147         RTBPIE  equ     $40
     0004             (    constants.asm):00148         RTBDM   equ     4               Set to 1 for binary register contents
     0002             (    constants.asm):00149         RTB24   equ     2               Set to 1 for 24 hour format
                      (    constants.asm):00150         
                      (    constants.asm):00151         * Register C bits.
     0040             (    constants.asm):00152         RTCPF   equ     $40             Periodic interrupt pending flag
                      (    constants.asm):00153         
                      (    constants.asm):00154         * ASCII trivia.
     0000             (    constants.asm):00155         NUL     equ     0               End of string marker
     0003             (    constants.asm):00156         ETX     equ     3               Control-C (intr)
     0008             (    constants.asm):00157         BS      equ     8               Backspace
     0009             (    constants.asm):00158         HT      equ     9               Horizontal tab
     000A             (    constants.asm):00159         LF      equ     $0A             Aka new line
     000D             (    constants.asm):00160         CR      equ     $0D             Carriage return
     0015             (    constants.asm):00161         NAK     equ     $15             Control-U (kill)
     0020             (    constants.asm):00162         SP      equ     $20             Aka BL in Forth
     0013             (    constants.asm):00163         XOFF    equ     $13             Aka DC3
     0011             (    constants.asm):00164         XON     equ     $11             Aka DC1
                      (    constants.asm):00165         
                      (    constants.asm):00166         * Stack sizes.
     00C0             (    constants.asm):00167         NSTKSZ  equ     192             Expressed in bytes. Now only limited by RAM size
     0080             (    constants.asm):00168         RSTKSZ  equ     128             Expressed in bytes
                      (    constants.asm):00169         
                      (    constants.asm):00170         * Buffer sizes.
     0084             (    constants.asm):00171         CMDBFSZ equ     132             Command line entry buffer
     0050             (    constants.asm):00172         HEXBFSZ equ     80
     0048             (    constants.asm):00173         TBUFSZ  equ     72              Used by VLIST to print word name and CVNSTR
     0051             (    constants.asm):00174         PADBSZ  equ     1+80            79-STANDARD mandates a minimum of 64 bytes
     0040             (    constants.asm):00175         SERBSZ  equ     64              Serial buffer size. Needs to be a power of 2
                      (    constants.asm):00176         
                      (    constants.asm):00177         * Dictionary flag masks.
     0080             (    constants.asm):00178         IMDFLM  equ     $80             Immediate flag mask
     0040             (    constants.asm):00179         DEFFLM  equ     $40             Compilation only flag mask
                      (    constants.asm):00180                 IFNE    RELFEAT
     0020             (    constants.asm):00181         MONFLM  equ     $20             Monitored flag mask. This indicates that the
                      (    constants.asm):00182         *                               word to which it relates might be checked for
                      (    constants.asm):00183         *                               integrity. This applies by default to all words
                      (    constants.asm):00184         *                               defined with : and all constants. It might
                      (    constants.asm):00185         *                               also apply to any other CREATEd object by
                      (    constants.asm):00186         *                               resorting to the MONITOR word. Using MONITOR
                      (    constants.asm):00187         *                               on variable word contents is guaranteed to
                      (    constants.asm):00188         *                               raise ICHECK's attention.
                      (    constants.asm):00189                 ENDC
                      (    constants.asm):00190         
     001F             (    constants.asm):00191         WRLNMSK equ     $1F             31 character is the maximum word length
                      (    constants.asm):00192         
                      (    constants.asm):00193         * 6309 opcodes.
     008E             (    constants.asm):00194         LDXOPC  equ     $8E             LDX (immediate)
     007E             (    constants.asm):00195         JMPOPC  equ     $7E             JMP (extended)
     00BD             (    constants.asm):00196         JSROPC  equ     $BD             JSR (extended)
     0039             (    constants.asm):00197         RTSOPC  equ     $39             RTS (inherent)
     2503             (    constants.asm):00198         BCSOPC  equ     $2503           BCS *+5 (relative)
     2603             (    constants.asm):00199         BNEOPC  equ     $2603           BNE *+5 (relative)
     00C7             (    constants.asm):00200         ILLOPC  equ     $C7             An illegal operation code. Meant to raise a trap
                      (    constants.asm):00201         
     0001             (    constants.asm):00202         CFLAG   equ     1               CC bit 0 (C)
     0004             (    constants.asm):00203         ZFLAG   equ     4               CC bit 2 (Z)
     0010             (    constants.asm):00204         IFLAG   equ     $10             CC bit 4 (I)
     0040             (    constants.asm):00205         FFLAG   equ     $40             CC bit 6 (F)
                      (    constants.asm):00206         
                      (    constants.asm):00207         * RAM based execution token for @.
     0C64             (    constants.asm):00208         RAMFTCH set     WDICSPC+4       Dictionary header overhead is word's length + 3
                      (    constants.asm):00209                 IFNE    RELFEAT         The reliability features adds one byte to the
     0C65             (    constants.asm):00210         RAMFTCH set     WDICSPC+5       header: a checksum.
                      (    constants.asm):00211                 ENDC
                      (    constants.asm):00212         
                      (        forth.asm):00124         
                      (        forth.asm):00125         * Unchecked NPUSH. This is for situations in which there is absolutely no
                      (        forth.asm):00126         * chance of overflow. For instance, in case we just popped 2 cells and push
                      (        forth.asm):00127         * back one or two.
0000                  (        forth.asm):00128         UCNPUSH MACRO   NOEXPAND
                      (        forth.asm):00129                 pshu    x
                      (        forth.asm):00130                 ENDM
                      (        forth.asm):00131         
                      (        forth.asm):00132         * Unchecked NPOP. To be used only after trusted words have been invoked, i.e.
                      (        forth.asm):00133         * when one is positively sure that the data stack contains at least one cell.
0000                  (        forth.asm):00134         UCNPOP  MACRO   NOEXPAND
                      (        forth.asm):00135                 pulu    x
                      (        forth.asm):00136                 ENDM
                      (        forth.asm):00137         
                      (        forth.asm):00138         * Make sure minimum data stack requirements are satisfied upon word entry.
                      (        forth.asm):00139         * The requirement is expressed in cell size--2 bytes on the 6309.
                      (        forth.asm):00140         * \1 specifies the required number of cells.
0000                  (        forth.asm):00141         MINDREQ MACRO   NOEXPAND
                      (        forth.asm):00142                 ldd     #NSTBOT-(\1*2)  Cell count one expects to be stacked up
                      (        forth.asm):00143                 bra     CHKNDPT         No return if the condition is not met
                      (        forth.asm):00144                 ENDM
                      (        forth.asm):00145         
                      (        forth.asm):00146         * Reliability feature support: execution tokens.
                      (        forth.asm):00147         * \1 has the opcode we want to emit.
                      (        forth.asm):00148         * \2 has the execution token address, as if the header overhead always
                      (        forth.asm):00149         * was 3 bytes.
0000                  (        forth.asm):00150         RFXT    MACRO   NOEXPAND
                      (        forth.asm):00151                 IFNE    RELFEAT
                      (        forth.asm):00152                 \1      \2+1
                      (        forth.asm):00153                 ELSE
                      (        forth.asm):00154                 \1      \2
                      (        forth.asm):00155                 ENDC                    RELFEAT
                      (        forth.asm):00156                 ENDM
                      (        forth.asm):00157         
                      (        forth.asm):00158         * Reliability feature support: variable word header contents.
                      (        forth.asm):00159         * This is a dummy checksum only used for EEPROM resident words.
                      (        forth.asm):00160         * Those never are checked for code integrity by MONITOR.
0000                  (        forth.asm):00161         RFCS    MACRO   NOEXPAND
                      (        forth.asm):00162                 IFNE    RELFEAT
                      (        forth.asm):00163                 fcb     ILLOPC          Illegal opcode
                      (        forth.asm):00164                 ENDC                    RELFEAT
                      (        forth.asm):00165                 ENDM
                      (        forth.asm):00166         
                      (        forth.asm):00167         *******************************************************************************
                      (        forth.asm):00168         * RAM definitions. We cannot initialize globals from the assembly defs.
                      (        forth.asm):00169         * All we can do here is define addresses and size things up.
                      (        forth.asm):00170         
                      (        forth.asm):00171         * RAMSTART is 0. We leave page 0 unused as a bug proof area.
                      (        forth.asm):00172         * When compiled in debug mode, this area is filled with illegal
                      (        forth.asm):00173         * instruction opcodes ($C7).
                      (        forth.asm):00174         
                      (        forth.asm):00175                 org     VARSPC
                      (        forth.asm):00176         
                      (        forth.asm):00177         * Global pointers.
0100                  (        forth.asm):00178         RSP     rmb     2               The return stack pointer
0102                  (        forth.asm):00179         TOKENSP rmb     2               Token start pointer (STRS)
0104                  (        forth.asm):00180         TOKENEP rmb     2               Token end pointer (STRE)
0106                  (        forth.asm):00181         LSTWAD  rmb     2               Last defined word header pointer--LAST
0108                  (        forth.asm):00182         DICEND  rmb     2               Current end of the dictionary--HERE
010A                  (        forth.asm):00183         BLSTWAD rmb     2               Backup (was IX)
010C                  (        forth.asm):00184         BDICEND rmb     2               Backup (was IY)
010E                  (        forth.asm):00185         PLOAD   rmb     2               Word payload if found by SWDIC
0110                  (        forth.asm):00186         FNDPLD  rmb     2               Last code payload reported by FIND
0112                  (        forth.asm):00187         RECADDR rmb     2               Used by RECURSE
0114                  (        forth.asm):00188         JSRLAST rmb     2               Last compilation address of #JSROPC
0116                  (        forth.asm):00189         VLPRVEP rmb     2               Used in VLIST to compute word code length
0118                  (        forth.asm):00190         VLPRVHD rmb     2               Used in VLIST to compute word code length
011A                  (        forth.asm):00191         MRUBUFA rmb     2               Most recently used buffer address
011C                  (        forth.asm):00192         BSBFADR rmb     2               Base buffer address for the input stream
                      (        forth.asm):00193         
                      (        forth.asm):00194         * Global variables.
011E                  (        forth.asm):00195         UBASE   rmb     2               Base for numbers input and output--BASE
0120                  (        forth.asm):00196         USTATE  rmb     2               0 if interpreting, 1 if compiling--STATE
0122                  (        forth.asm):00197         UTOIN   rmb     2               User variable for >IN
0124                  (        forth.asm):00198         UBLK    rmb     2               User variable for BLK
0126                  (        forth.asm):00199         USCR    rmb     2               User variable for SCR (output for LIST)
0128                  (        forth.asm):00200         TIKSHI  rmb     2               RTC clock ticks updated on FIRQ
012A                  (        forth.asm):00201         TIKSLOW rmb     2               RTC clock ticks updated on FIRQ
                      (        forth.asm):00202                 IFNE    DEBUG
012C                  (        forth.asm):00203         CCREG   rmb     2               A DEBUG variable for predicates (see CMP2)
                      (        forth.asm):00204                 ENDC                    DEBUG
                      (        forth.asm):00205                 IFNE    HVNMI
                      (        forth.asm):00206                 IFNE    HVNMI2
012C                  (        forth.asm):00207         SBDROPC rmb     2               Char. drop count for serial input (see FIRQHDL)
                      (        forth.asm):00208                 ENDC                    HVNMI2
                      (        forth.asm):00209                 ENDC                    HVNMI
012C                  (        forth.asm):00210         BASBKUP rmb     1               BASE backup when a base prefix is in use
012D                  (        forth.asm):00211         CMDLNSZ rmb     1               Entered character count in GETS (INTERP)
012E                  (        forth.asm):00212         RDEPTH  rmb     1               Return stack depth in cells
012F                  (        forth.asm):00213         IRDPTH  rmb     1               Return stack depth when : was last invoked
0130                  (        forth.asm):00214         RTSREMV rmb     1               If > 1, omit the final RTS when compiling
0131                  (        forth.asm):00215         DIVFCN  rmb     1               Flag used by /, MOD and /MOD
0132                  (        forth.asm):00216         F83DIVF rmb     1               FORTH-83 adjusment flag for floored division
0133                  (        forth.asm):00217         STSLFCN rmb     1               Flag used by */, */MOD
0134                  (        forth.asm):00218         CVTFCN  rmb     1               CVT: 0 => # semantics, 1 => #S semantics
0135                  (        forth.asm):00219         ISNEGF  rmb     1               Number being scanned is negative
0136                  (        forth.asm):00220         ISDBLF  rmb     1               Number being scanned is a double
0137                  (        forth.asm):00221         CVISSGN rmb     1               Flag: should CVNSTR consider numbers as signed
0138                  (        forth.asm):00222         CURTOKL rmb     1               Current token length. Set by SWDIC
0139                  (        forth.asm):00223         IMDFLG  rmb     1               Immediate flag
013A                  (        forth.asm):00224         DEFFLG  rmb     1               Define flag
013B                  (        forth.asm):00225         NBCTFB0 rmb     1               NZ if -->/CONTINUED invoked from the console
013C                  (        forth.asm):00226         RTCAVL  rmb     1               NZ if real time clock is present
013D                  (        forth.asm):00227         CFCARDP rmb     1               NZ if CF card present
013E                  (        forth.asm):00228         CFCMMIR rmb     1               Last CF command issued
013F                  (        forth.asm):00229         CFERRCD rmb     1               and the corresponding error code
                      (        forth.asm):00230         
                      (        forth.asm):00231         * Serial buffer parameters. Queing happens on FIRQ.
                      (        forth.asm):00232         * Dequeing occurs when GETCH is invoked.
0140                  (        forth.asm):00233         SERBENQ rmb     1               Enqueue offset
0141                  (        forth.asm):00234         SERBDEQ rmb     1               Dequeue offset
0142                  (        forth.asm):00235         SERBCNT rmb     1               Buffer byte count
0143                  (        forth.asm):00236         XMITOK  rmb     1               Software flow control on output flag
0144                  (        forth.asm):00237         SERBUF  rmb     SERBSZ          The actual buffer
                      (        forth.asm):00238         
0184                  (        forth.asm):00239         PADBUF  rmb     PADBSZ          PAD lives here. Used by <#, #, #S, #>
                      (        forth.asm):00240         
                      (        forth.asm):00241         * The normal (data) stack.
01D5 00               (        forth.asm):00242                 align   2
     01D6             (        forth.asm):00243         NSTTOP  equ     *               U's value when the data stack is full
01D6                  (        forth.asm):00244                 rmb     NSTKSZ
     0296             (        forth.asm):00245         NSTBOT  equ     *               U's value when the data stack is empty
                      (        forth.asm):00246         
                      (        forth.asm):00247         * The return stack.
     0296             (        forth.asm):00248         RSTTOP  equ     *
0296                  (        forth.asm):00249                 rmb     RSTKSZ
     0316             (        forth.asm):00250         RSTBOT  equ     *
                      (        forth.asm):00251         
0316                  (        forth.asm):00252         CMDBUF  rmb     CMDBFSZ
039A                  (        forth.asm):00253         HEXBUF  rmb     HEXBFSZ
                      (        forth.asm):00254         
03EA                  (        forth.asm):00255         TBUFF   rmb     TBUFSZ          Output for CVNSTR
                      (        forth.asm):00256         
0432 0000000000000000 (        forth.asm):00257                 align   16
     000000000000
0440                  (        forth.asm):00258         BUF0    rmb     BLKSIZ+4
                      (        forth.asm):00259         
0844 0000000000000000 (        forth.asm):00260                 align   16
     00000000
0850                  (        forth.asm):00261         BUF1    rmb     BLKSIZ+4
                      (        forth.asm):00262         
                      (        forth.asm):00263         *******************************************************************************
                      (        forth.asm):00264         * Writable dictionary section begins right here. We cannot have anything
                      (        forth.asm):00265         * statically defined at this point. Therefore, FORTHIN moves the code for @
                      (        forth.asm):00266         * to this location and sets up DICEND and LSTWAD accordingly. All the RAM
                      (        forth.asm):00267         * beyond this point (after the reallocated @ implementation) is user defined
                      (        forth.asm):00268         * material. Note that builtin words, though they cannot be forgotten (to the
                      (        forth.asm):00269         * extent they are ROM resident--not to mention inter-word dependencies),
                      (        forth.asm):00270         * might still be overridden by user definitions. VLIST will happily ignore
                      (        forth.asm):00271         * that fact and list everything in the dictionary linked list order.
                      (        forth.asm):00272         
0C54 0000000000000000 (        forth.asm):00273                 align   16
     00000000
     0C60             (        forth.asm):00274         WDICSPC equ     *
                      (        forth.asm):00275         
                      (        forth.asm):00276         *******************************************************************************
                      (        forth.asm):00277         * ROM code begins.
                      (        forth.asm):00278         
                      (        forth.asm):00279                 org     ROMSTRT
                      (        forth.asm):00280         * Trap handler: division by zero or illegal opcode. See page 4-10 of "The 6309
                      (        forth.asm):00281         * Book" for a description of interrupt stacks in native 6309 mode.
E000 113C40           (        forth.asm):00282 (4)     IODZHDL bitmd   #$40            Illegal opcode?
E003 2705             (        forth.asm):00283 (3)             beq     @iodzh1
E005 8EFEA3           (        forth.asm):00284 (3)             ldx     #IOPERRM
E008 2008             (        forth.asm):00285 (3)             bra     @iodxh2
E00A 113C80           (        forth.asm):00286 (4)     @iodzh1 bitmd   #$80            Division by zero?
E00D 2726             (        forth.asm):00287 (3)             beq     @iodzh3         And you may ask yourself, well
                      (        forth.asm):00288         *                               How did I get here?
E00F 8EFEB8           (        forth.asm):00289 (3)             ldx     #DV0ERRM
E012 BDE2F3           (        forth.asm):00290 (7)     @iodxh2 jsr     PUTS
E015 EC6C             (        forth.asm):00291 (5+1)           ldd     12,s            Return code address (PC)
E017 108E039A         (        forth.asm):00292 (4)             ldy     #HEXBUF
E01B BDE195           (        forth.asm):00293 (7)             jsr     HDMP4   
E01E 8E039A           (        forth.asm):00294 (3)             ldx     #HEXBUF
E021 BDE2F3           (        forth.asm):00295 (7)             jsr     PUTS
E024 BDE300           (        forth.asm):00296 (7)             jsr     PUTCR
E027 8EE76D           (        forth.asm):00297 (3)             ldx     #ERRHD1
E02A AF6C             (        forth.asm):00298 (5+1)           stx     12,s            Resume execution in the error handler
E02C 8EE000           (        forth.asm):00299 (3)             ldx     #IODZHDL
E02F AF68             (        forth.asm):00300 (5+1)           stx     8,s             With Y set to IODZHDL
E031 8603             (        forth.asm):00301 (2)             lda     #3              And user ABORT error code
E033 A762             (        forth.asm):00302 (4+1)           sta     2,s             Passed back through B
E035 3B               (        forth.asm):00303 (17+?)  @iodzh3 rti
                      (        forth.asm):00304         
     E036             (        forth.asm):00305         SWI3HDL equ     *
     E036             (        forth.asm):00306         SWI2HDL equ     *
     E036             (        forth.asm):00307         IRQHDL  equ     *
     E036             (        forth.asm):00308         SWIHDL  equ     *
                      (        forth.asm):00309                 IFEQ    HVNMI
E036                  (        forth.asm):00310         NMIHDL                          These should never happen
                      (        forth.asm):00311                 ENDC
E036 3B               (        forth.asm):00312 (17+?)          rti
                      (        forth.asm):00313         
                      (        forth.asm):00314         * Interrupts are disabled by default upon reset.
                      (        forth.asm):00315         * NMI# will not be "armed" until S is initiliazed.
E037 113D01           (        forth.asm):00316 (5)     RSTHDL  ldmd    #1              Establish 6309 native mode
                      (        forth.asm):00317         
E03A 8643             (        forth.asm):00318 (2)             lda     #ACIRSET
E03C B7D800           (        forth.asm):00319 (4)             sta     ACIACTL         ACIA master reset
E03F 86D5             (        forth.asm):00320 (2)             lda     #ACIRTS1
E041 B7D800           (        forth.asm):00321 (4)             sta     ACIACTL         RTS# high, 8N1
                      (        forth.asm):00322         
E044 8EFE1F           (        forth.asm):00323 (3)             ldx     #BOOTMSG        Identity statement
                      (        forth.asm):00324         
                      (        forth.asm):00325         * Send the NUL terminated string pointed to by X to the ACIA.
                      (        forth.asm):00326         * The RAM is not yet assumed to be working.
E047 C602             (        forth.asm):00327 (2)     INIT    ldb     #ACITDRE
E049 A680             (        forth.asm):00328 (4+1)   @init0  lda     ,x+
E04B 270A             (        forth.asm):00329 (3)             beq     RAMCHK          NUL marks the end of the string
E04D F5D800           (        forth.asm):00330 (4)     @init1  bitb    ACIACTL         Wait for TDRE bit to be set
E050 27FB             (        forth.asm):00331 (3)             beq     @init1
E052 B7D801           (        forth.asm):00332 (4)             sta     ACIADAT         Transmit data
E055 20F2             (        forth.asm):00333 (3)             bra     @init0          Next char, if any
                      (        forth.asm):00334         
                      (        forth.asm):00335         * RAM0 32 KB self test (destructive).
E057 8E0000           (        forth.asm):00336 (3)     RAMCHK  ldx     #RAMSTRT
E05A AF84             (        forth.asm):00337 (5+0)   @ramch1 stx     ,x
E05C AC84             (        forth.asm):00338 (5+0)           cmpx    ,x
E05E 2609             (        forth.asm):00339 (3)             bne     RAMFAIL
E060 3002             (        forth.asm):00340 (4+1)           leax    2,x
E062 8C8000           (        forth.asm):00341 (3)             cmpx    #RAMSTRT+RAMSIZE
E065 26F3             (        forth.asm):00342 (3)             bne     @ramch1
E067 2012             (        forth.asm):00343 (3)             bra     RAMOK
                      (        forth.asm):00344         
E069 C680             (        forth.asm):00345 (2)     RAMFAIL ldb     #128
E06B 108E8000         (        forth.asm):00346 (4)     @ramf1  ldy     #$8000
E06F 313F             (        forth.asm):00347 (4+1)   @ramf2  leay    -1,y
E071 26FC             (        forth.asm):00348 (3)             bne     @ramf2
E073 5A               (        forth.asm):00349 (1)             decb
E074 26F5             (        forth.asm):00350 (3)             bne     @ramf1
E076 8EFE8A           (        forth.asm):00351 (3)             ldx     #RAMFM
E079 20CC             (        forth.asm):00352 (3)             bra     INIT            Here we go again
                      (        forth.asm):00353         
                      (        forth.asm):00354         * RAM Initialization to all $C7 if DEBUG mode is enabled else zeroes.
E07B 8E0000           (        forth.asm):00355 (3)     RAMOK   ldx     #RAMSTRT
E07E 3101             (        forth.asm):00356 (4+1)           leay    1,x
E080 10867FFF         (        forth.asm):00357 (4)             ldw     #RAMSIZE-1
                      (        forth.asm):00358                 IFNE    DEBUG
                      (        forth.asm):00359                 lda     #ILLOPC
                      (        forth.asm):00360                 sta     ,x
                      (        forth.asm):00361                 ELSE
E084 6F84             (        forth.asm):00362 (6+0)           clr     ,x
                      (        forth.asm):00363                 ENDC                    DEBUG
E086 113812           (        forth.asm):00364 (6+?)           tfm     x+,y+
                      (        forth.asm):00365         
                      (        forth.asm):00366         * Initialize the system stack pointer and the direct page base address register.
E089 10CE8000         (        forth.asm):00367 (4)             lds     #RAMSTRT+RAMSIZE
E08D 8601             (        forth.asm):00368 (2)             lda     #VARSPC/256
E08F 1F8B             (        forth.asm):00369 (4)             tfr     a,dp
     01               (        forth.asm):00370                 SETDP   VARSPC/256
                      (        forth.asm):00371         
                      (        forth.asm):00372         * Serial buffer parameters initialization. We are doing this here because
                      (        forth.asm):00373         * PUTS requires prior software flow control initialization.
                      (        forth.asm):00374                 IFNE    DEBUG
                      (        forth.asm):00375                 clrd
                      (        forth.asm):00376                 std     SERBENQ         Two birds with one stone
                      (        forth.asm):00377                 sta     SERBCNT
                      (        forth.asm):00378                 IFNE    HVNMI
                      (        forth.asm):00379                 IFNE    HVNMI2
                      (        forth.asm):00380                 std     SBDROPC         Initialize chararacter drop count
                      (        forth.asm):00381                 ENDC                    HVNMI2
                      (        forth.asm):00382                 ENDC                    HVNMI
                      (        forth.asm):00383                 ENDC                    DEBUG
E091 8601             (        forth.asm):00384 (2)             lda     #1              Initialize software flow control on output
E093 9743             (        forth.asm):00385 (3)             sta     XMITOK
                      (        forth.asm):00386         
E095 8EFE7A           (        forth.asm):00387 (3)             ldx     #RAMOKM
E098 BDE2F3           (        forth.asm):00388 (7)             jsr     PUTS
E09B BDE359           (        forth.asm):00389 (7)             jsr     FORTHIN         Global variables initialization
E09E BDE8C2           (        forth.asm):00390 (7)             jsr     CFINIT          CompactFlash card initialization
                      (        forth.asm):00391                 IFNE    RTCFEAT
                      (        forth.asm):00392                 jsr     RTCINIT         Real time clock initialization
                      (        forth.asm):00393                 ENDC                    RTCFEAT
                      (        forth.asm):00394         
                      (        forth.asm):00395         * Lower RTS and enable FIRQ.
E0A1 8695             (        forth.asm):00396 (2)             lda     #ACIRTS0
E0A3 B7D800           (        forth.asm):00397 (4)             sta     ACIACTL
E0A6 1CBF             (        forth.asm):00398 (2)             andcc   #^FFLAG
                      (        forth.asm):00399         
E0A8 0D3D             (        forth.asm):00400 (4)             tst     CFCARDP
E0AA 2706             (        forth.asm):00401 (3)             beq     INTERP
                      (        forth.asm):00402         
                      (        forth.asm):00403         * A CF card is present, LOAD block #1.
E0AC 8E0001           (        forth.asm):00404 (3)             ldx     #1
E0AF BDF802           (        forth.asm):00405 (7)             jsr     LOAD1
                      (        forth.asm):00406         
                      (        forth.asm):00407         * The interpreter main loop.
E0B2 104F             (        forth.asm):00408 (2)     INTERP  clrd
E0B4 DD24             (        forth.asm):00409 (4)             std     UBLK            Interpreting from the console. Set BLK to 0
E0B6 DD22             (        forth.asm):00410 (4)             std     UTOIN
E0B8 8E0316           (        forth.asm):00411 (3)             ldx     #CMDBUF
E0BB 9F1C             (        forth.asm):00412 (4)             stx     BSBFADR
E0BD C683             (        forth.asm):00413 (2)             ldb     #CMDBFSZ-1      NUL terminator is not included in the char count
E0BF BDE316           (        forth.asm):00414 (7)             jsr     GETS            Acquire command from the console
                      (        forth.asm):00415         * Additional setup in case the ANSI \ is used.
E0C2 D72D             (        forth.asm):00416 (3)             stb     CMDLNSZ         GETS returns the entered character count via B
                      (        forth.asm):00417         * Additional preparation work for block support.
E0C4 0F3B             (        forth.asm):00418 (5)             clr     NBCTFB0         Flag whether -->/CONTINUED is called from blk 0
E0C6 8D02             (        forth.asm):00419 (6)             bsr     _INTERP
E0C8 20E8             (        forth.asm):00420 (3)     MINTLRA bra     INTERP
                      (        forth.asm):00421         
                      (        forth.asm):00422         * The interpreter itself.
E0CA BDE38E           (        forth.asm):00423 (7)     _INTERP jsr     SCNSTOK         Scan for the beginning of a word at address X
E0CD 2717             (        forth.asm):00424 (3)             beq     @more0          This is the end
E0CF 1F10             (        forth.asm):00425 (4)             tfr     x,d             Starting token address to D
E0D1 BDE177           (        forth.asm):00426 (7)             jsr     U2INFRD         Derive >IN from D
E0D4 0D21             (        forth.asm):00427 (4)             tst     USTATE+1        We do ignore the upper byte
E0D6 263E             (        forth.asm):00428 (3)             bne     COMP            We are compiling
E0D8 BDE4A9           (        forth.asm):00429 (7)             jsr     SWDIC           Updates TOKENEP, CURTOKL, IMDFLG/DEFFLG
E0DB 2620             (        forth.asm):00430 (3)             bne     @exec           Word found, execute it
E0DD BDE3E9           (        forth.asm):00431 (7)             jsr     NUMCVT
     E0E0             (        forth.asm):00432         NMCVIRA equ     *
E0E0 9E04             (        forth.asm):00433 (4)             ldx     TOKENEP
E0E2 6D84             (        forth.asm):00434 (5+0)   MORE    tst     ,x
E0E4 26E4             (        forth.asm):00435 (3)             bne     _INTERP         Next token, please!
                      (        forth.asm):00436         * End of input stream condition is recognized.
E0E6 DC24             (        forth.asm):00437 (4)     @more0  ldd     UBLK
E0E8 2705             (        forth.asm):00438 (3)             beq     @more1          We are back from the console
E0EA 0D3B             (        forth.asm):00439 (4)             tst     NBCTFB0         -->/CONTINUED invoked from the console?
E0EC 2601             (        forth.asm):00440 (3)             bne     @more1          Yes
E0EE 39               (        forth.asm):00441 (4)             rts                     No, we're done here
E0EF 0F3B             (        forth.asm):00442 (5)     @more1  clr     NBCTFB0         The -->/CONTINUED exception only applies once
E0F1 8EFE9D           (        forth.asm):00443 (3)             ldx     #OKFEEDB        Provide OK feedback
E0F4 0D21             (        forth.asm):00444 (4)             tst     USTATE+1        No OK feedback if we're compiling, just CRLF
E0F6 2702             (        forth.asm):00445 (3)             beq     @more2
E0F8 3003             (        forth.asm):00446 (4+1)           leax    3,x             Skip the ' OK' string when compiling
E0FA 7EE2F3           (        forth.asm):00447 (3)     @more2  jmp     PUTS            Back to whoever invoked us
E0FD 963A             (        forth.asm):00448 (3)     @exec   lda     DEFFLG
E0FF 2705             (        forth.asm):00449 (3)             beq     @introk         Compilation only flag is not set
E101 C606             (        forth.asm):00450 (2)             ldb     #6              Incorrect STATE
E103 BDE76A           (        forth.asm):00451 (7)             jsr     ERRHDLR         No return
     E106             (        forth.asm):00452         INTISRA equ     *               For symbolic stack debugging purposes
E106 DC04             (        forth.asm):00453 (4)     @introk ldd     TOKENEP
E108 8D6D             (        forth.asm):00454 (6)             bsr     U2INFRD         Derive >IN from D
E10A 8EE111           (        forth.asm):00455 (3)             ldx     #INTRPRA        The return address
E10D 3410             (        forth.asm):00456 (4+2)           pshs    x
E10F 1F25             (        forth.asm):00457 (4)             tfr     y,pc            An indirect call to Y
E111 BDE83F           (        forth.asm):00458 (7)     INTRPRA jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
E114 20CC             (        forth.asm):00459 (3)             bra     MORE
                      (        forth.asm):00460         
                      (        forth.asm):00461         * The compiler.
                      (        forth.asm):00462         * Upon entry TOKENSP has been set by a prior call to SCNSTOK.
E116 BDE4A9           (        forth.asm):00463 (7)     COMP    jsr     SWDIC           Updates TOKENEP, CURTOKL, IMDFLG/DEFFLG
E119 271E             (        forth.asm):00464 (3)             beq     @cmpnum         Word @ TOKENSP is not in the dictionary
E11B 0D39             (        forth.asm):00465 (4)             tst     IMDFLG
E11D 2712             (        forth.asm):00466 (3)             beq     @notimd
E11F DC04             (        forth.asm):00467 (4)             ldd     TOKENEP
E121 8D54             (        forth.asm):00468 (6)             bsr     U2INFRD         Derive >IN from D
E123 8EE12A           (        forth.asm):00469 (3)             ldx     #COMPLRA        Word is immediate. Execute it.
E126 3410             (        forth.asm):00470 (4+2)           pshs    x               Return to COMPLRA
E128 1F25             (        forth.asm):00471 (4)             tfr     y,pc            An indirect call to Y
E12A BDE83F           (        forth.asm):00472 (7)     COMPLRA jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
E12D 9F04             (        forth.asm):00473 (4)             stx     TOKENEP
E12F 20B1             (        forth.asm):00474 (3)             bra     MORE            Branch back to the interpreter
E131 1F21             (        forth.asm):00475 (4)     @notimd tfr     y,x
E133 8D34             (        forth.asm):00476 (6)             bsr     EMXASXT         Emit X as an execution token
E135 9E04             (        forth.asm):00477 (4)     @cmpdon ldx     TOKENEP
E137 20A9             (        forth.asm):00478 (3)             bra     MORE
E139 BDE3E9           (        forth.asm):00479 (7)     @cmpnum jsr     NUMCVT
     E13C             (        forth.asm):00480         NMCVCRA equ     *
E13C 0D36             (        forth.asm):00481 (4)             tst     ISDBLF
E13E 2607             (        forth.asm):00482 (3)             bne     @cmpdbl
E140 3710             (        forth.asm):00483                 UCNPOP                  TOS to X
E142 BDE578           (        forth.asm):00484 (7)             jsr     LITER
E145 20EE             (        forth.asm):00485 (3)             bra     @cmpdon
                      (        forth.asm):00486         * The following is some sort of half baked 2LITERAL.
                      (        forth.asm):00487         * Please note that NUMCVT guarantees us that at least two cells are stacked up.
E147 AE42             (        forth.asm):00488 (5+1)   @cmpdbl ldx     2,u
E149 BDE578           (        forth.asm):00489 (7)             jsr     LITER           LSC
E14C AEC4             (        forth.asm):00490 (5+0)           ldx     ,u
E14E BDE578           (        forth.asm):00491 (7)             jsr     LITER           MSC
E151 3344             (        forth.asm):00492 (4+1)           leau    4,u             2DROP
E153 20E0             (        forth.asm):00493 (3)             bra     @cmpdon
                      (        forth.asm):00494         
                      (        forth.asm):00495         * Check whether the final RTS can be eliminated. It can only be if we have no
                      (        forth.asm):00496         * forward references to HERE when COMPR (;) is invoked. This is a rather
                      (        forth.asm):00497         * complicated matter but this implementation works on the basis that we can do
                      (        forth.asm):00498         * so safely if at least 2 subroutine calls have been issued with a return
                      (        forth.asm):00499         * stack whose depth is equal to IRDPTH, immediately prior to the invokation
                      (        forth.asm):00500         * of COMPR (;).
E155 3402             (        forth.asm):00501 (4+1)   CHKRTS  pshs    a
E157 109F14           (        forth.asm):00502 (5)             sty     JSRLAST         JSRLAST points to the latest JSR code emission
E15A 962E             (        forth.asm):00503 (3)             lda     RDEPTH
E15C 912F             (        forth.asm):00504 (3)             cmpa    IRDPTH          Return stack depth when : was last invoked
E15E 2705             (        forth.asm):00505 (3)             beq     @ckrts1
E160 0F30             (        forth.asm):00506 (5)             clr     RTSREMV
E162 3502             (        forth.asm):00507 (4+1)   @ckrts0 puls    a
E164 39               (        forth.asm):00508 (4)             rts
E165 0C30             (        forth.asm):00509 (5)     @ckrts1 inc     RTSREMV
E167 20F9             (        forth.asm):00510 (3)             bra     @ckrts0
                      (        forth.asm):00511         
                      (        forth.asm):00512         * Emit (in a code generation understanding) X as an execution token.
                      (        forth.asm):00513         * In essence, this simply inserts JSR <X> at HERE.
                      (        forth.asm):00514         * Note: this code provides support for trailing JSR elimination.
                      (        forth.asm):00515         * On input: X has the target execution token.
                      (        forth.asm):00516         * On output: Y will have HERE, A will be altered, X will be preserved.
E169 109E08           (        forth.asm):00517 (5)     EMXASXT ldy     DICEND
E16C 8DE7             (        forth.asm):00518 (6)             bsr     CHKRTS          Check if the final RTS can be omitted
E16E 86BD             (        forth.asm):00519 (2)             lda     #JSROPC         JSR extended
E170 BDE58F           (        forth.asm):00520 (7)             jsr     VARCON2         Compile a JSR to the execution token
E173 109F08           (        forth.asm):00521 (5)             sty     DICEND
E176 39               (        forth.asm):00522 (4)             rts
                      (        forth.asm):00523         
                      (        forth.asm):00524         * Derive UTOIN from D's current value. D is altered.
E177 931C             (        forth.asm):00525 (4)     U2INFRD subd    BSBFADR
E179 DD22             (        forth.asm):00526 (4)             std     UTOIN
E17B 39               (        forth.asm):00527 (4)             rts
                      (        forth.asm):00528         
                      (        forth.asm):00529         * Store the HEX representation of the lower nibble of A to Y+.
E17C 3404             (        forth.asm):00530 (4+1)   HEX1D   pshs    b
E17E C630             (        forth.asm):00531 (2)             ldb     #'0
E180 840F             (        forth.asm):00532 (2)             anda    #$0f
E182 810A             (        forth.asm):00533 (2)             cmpa    #10
E184 2502             (        forth.asm):00534 (3)             bcs     @hex1d1
E186 C637             (        forth.asm):00535 (2)             ldb     #'A-10
E188 103098           (        forth.asm):00536 (4)     @hex1d1 addr    b,a
E18B A7A0             (        forth.asm):00537 (4+1)           sta     ,y+
E18D 3504             (        forth.asm):00538 (4+1)           puls    b
E18F 39               (        forth.asm):00539 (4)             rts
                      (        forth.asm):00540         
E190 44               (        forth.asm):00541 (1)     ADIV16  lsra
E191 44               (        forth.asm):00542 (1)             lsra
E192 44               (        forth.asm):00543 (1)             lsra
E193 44               (        forth.asm):00544 (1)             lsra
E194 39               (        forth.asm):00545 (4)             rts
                      (        forth.asm):00546         
                      (        forth.asm):00547         * Hexdump D to 4 bytes starting at Y.  Upon return, Y will point 1 byte
                      (        forth.asm):00548         * after the last character emitted. D is preserved.
E195 3406             (        forth.asm):00549 (4+2)   HDMP4   pshs    d
E197 8DF7             (        forth.asm):00550 (6)             bsr     ADIV16
E199 8DE1             (        forth.asm):00551 (6)             bsr     HEX1D
E19B A6E4             (        forth.asm):00552 (4+0)           lda     ,s
E19D 8DDD             (        forth.asm):00553 (6)             bsr     HEX1D
E19F A661             (        forth.asm):00554 (4+1)           lda     1,s
E1A1 8DED             (        forth.asm):00555 (6)             bsr     ADIV16
E1A3 8DD7             (        forth.asm):00556 (6)             bsr     HEX1D
E1A5 A661             (        forth.asm):00557 (4+1)           lda     1,s
E1A7 8DD3             (        forth.asm):00558 (6)             bsr     HEX1D
E1A9 3506             (        forth.asm):00559 (4+2)           puls    d
E1AB 6FA4             (        forth.asm):00560 (6+0)           clr     ,y
E1AD 39               (        forth.asm):00561 (4)             rts
                      (        forth.asm):00562         
E1AE 3406             (        forth.asm):00563 (4+2)   HDMP2   pshs    d
E1B0 8DDE             (        forth.asm):00564 (6)             bsr     ADIV16
E1B2 8DC8             (        forth.asm):00565 (6)             bsr     HEX1D
E1B4 A6E4             (        forth.asm):00566 (4+0)           lda     ,s
E1B6 8DC4             (        forth.asm):00567 (6)             bsr     HEX1D
E1B8 3506             (        forth.asm):00568 (4+2)           puls    d
E1BA 6FA4             (        forth.asm):00569 (6+0)           clr     ,y
E1BC 39               (        forth.asm):00570 (4)             rts
                      (        forth.asm):00571         
                      (        forth.asm):00572                 IFNE    HVNMI
                      (        forth.asm):00573         * Add string pointed to by X starting at the address stored in Y.
E1BD 3402             (        forth.asm):00574 (4+1)   ADDS    pshs    a
E1BF A680             (        forth.asm):00575 (4+1)   @adds1  lda     ,x+
E1C1 A7A0             (        forth.asm):00576 (4+1)           sta     ,y+
E1C3 26FA             (        forth.asm):00577 (3)             bne     @adds1
E1C5 3502             (        forth.asm):00578 (4+1)           puls    a
E1C7 39               (        forth.asm):00579 (4)             rts
                      (        forth.asm):00580         
E1C8 8DF3             (        forth.asm):00581 (6)     NMI2DM  bsr     ADDS
E1CA 313F             (        forth.asm):00582 (4+1)           leay    -1,y            Backward over NUL
E1CC 20E0             (        forth.asm):00583 (3)             bra     HDMP2
                      (        forth.asm):00584         
E1CE 8DED             (        forth.asm):00585 (6)     NMI4DM  bsr     ADDS
E1D0 313F             (        forth.asm):00586 (4+1)           leay    -1,y            Backward over NUL
E1D2 20C1             (        forth.asm):00587 (3)             bra     HDMP4
                      (        forth.asm):00588         
E1D4 8E03EA           (        forth.asm):00589 (3)     NMIDML  ldx     #TBUFF
E1D7 BDE2F3           (        forth.asm):00590 (7)             jsr     PUTS
E1DA 7EE300           (        forth.asm):00591 (3)             jmp     PUTCR
                      (        forth.asm):00592         
                      (        forth.asm):00593         * All registers are stacked in native mode.
E1DD B6D800           (        forth.asm):00594 (4)     NMIHDL  lda     ACIACTL
E1E0 3402             (        forth.asm):00595 (4+1)           pshs    a
E1E2 9643             (        forth.asm):00596 (3)             lda     XMITOK
E1E4 3402             (        forth.asm):00597 (4+1)           pshs    a
E1E6 8601             (        forth.asm):00598 (2)             lda     #1
E1E8 9743             (        forth.asm):00599 (3)             sta     XMITOK
                      (        forth.asm):00600         * Stack structure at this point
                      (        forth.asm):00601         * 0     saved XMITOK: 1 byte
                      (        forth.asm):00602         * 1     saved ACIA status register: 1 byte
                      (        forth.asm):00603         * 2     CC
                      (        forth.asm):00604         * 3     D
                      (        forth.asm):00605         * 5     W
                      (        forth.asm):00606         * 7     DP
                      (        forth.asm):00607         * 8     X
                      (        forth.asm):00608         * 10    Y
                      (        forth.asm):00609         * 12    U
                      (        forth.asm):00610         * 14    PC
E1EA BDE300           (        forth.asm):00611 (7)             jsr     PUTCR
                      (        forth.asm):00612         
                      (        forth.asm):00613         * First line: CC, D, W, DP, X, Y, U, PC, S
E1ED 108E03EA         (        forth.asm):00614 (4)             ldy     #TBUFF
E1F1 8EE220           (        forth.asm):00615 (3)             ldx     #CCREGM
E1F4 A662             (        forth.asm):00616 (4+1)           lda     2,s             CC in the system stack
E1F6 8DD0             (        forth.asm):00617 (6)             bsr     NMI2DM
                      (        forth.asm):00618         
E1F8 EC63             (        forth.asm):00619 (5+1)           ldd     3,s             D in the system stack
E1FA 8DD2             (        forth.asm):00620 (6)             bsr     NMI4DM
                      (        forth.asm):00621         
E1FC EC65             (        forth.asm):00622 (5+1)           ldd     5,s             W in the system stack
E1FE 8DCE             (        forth.asm):00623 (6)             bsr     NMI4DM
                      (        forth.asm):00624         
E200 A667             (        forth.asm):00625 (4+1)           lda     7,s             DP in the system stack
E202 8DC4             (        forth.asm):00626 (6)             bsr     NMI2DM
                      (        forth.asm):00627         
E204 EC68             (        forth.asm):00628 (5+1)           ldd     8,s             X in the system stack
E206 8DC6             (        forth.asm):00629 (6)             bsr     NMI4DM
                      (        forth.asm):00630         
E208 EC6A             (        forth.asm):00631 (5+1)           ldd     10,s            Y in the system stack
E20A 8DC2             (        forth.asm):00632 (6)             bsr     NMI4DM
                      (        forth.asm):00633         
E20C EC6C             (        forth.asm):00634 (5+1)           ldd     12,s            U in the system stack
E20E 8DBE             (        forth.asm):00635 (6)             bsr     NMI4DM
                      (        forth.asm):00636         
E210 EC6E             (        forth.asm):00637 (5+1)           ldd     14,s            PC in the system stack
E212 8DBA             (        forth.asm):00638 (6)             bsr     NMI4DM
                      (        forth.asm):00639         
E214 33E810           (        forth.asm):00640 (4+1)           leau    16,s            S in the system stack
E217 1F30             (        forth.asm):00641 (4)             tfr     u,d
E219 8DB3             (        forth.asm):00642 (6)             bsr     NMI4DM
                      (        forth.asm):00643         
E21B 8DB7             (        forth.asm):00644 (6)             bsr     NMIDML
                      (        forth.asm):00645         
                      (        forth.asm):00646                 IFNE    HVNMI2
                      (        forth.asm):00647         * Second line: ACIST, XMTOK, SBASE, SBENQ, SBDEQ, SBCNT, SBDROPC
                      (        forth.asm):00648                 ldy     #TBUFF
                      (        forth.asm):00649                 ldx     #ACISTM
                      (        forth.asm):00650                 lda     1,s             ACIA status register in the system stack
                      (        forth.asm):00651                 bsr     NMI2DM
                      (        forth.asm):00652         
                      (        forth.asm):00653                 lda     ,s              XMITOK in the system stack
                      (        forth.asm):00654                 bsr     NMI2DM
                      (        forth.asm):00655         
                      (        forth.asm):00656                 ldd     #SERBUF         SERBUF address
                      (        forth.asm):00657                 bsr     NMI4DM
                      (        forth.asm):00658         
                      (        forth.asm):00659                 lda     SERBENQ         SERBENQ 8 bit offset
                      (        forth.asm):00660                 bsr     NMI2DM
                      (        forth.asm):00661         
                      (        forth.asm):00662                 lda     SERBDEQ         SERBDEQ 8 bit offset
                      (        forth.asm):00663                 bsr     NMI2DM
                      (        forth.asm):00664         
                      (        forth.asm):00665                 lda     SERBCNT
                      (        forth.asm):00666                 bsr     NMI2DM
                      (        forth.asm):00667         
                      (        forth.asm):00668                 ldd     SBDROPC         Number of bytes dropped because SERBUF was full
                      (        forth.asm):00669                 bsr     NMI4DM
                      (        forth.asm):00670         
                      (        forth.asm):00671                 bsr     NMIDML
                      (        forth.asm):00672                 ENDC                    HVNMI2
                      (        forth.asm):00673         
E21D 3262             (        forth.asm):00674 (4+1)           leas    2,s             System stack cleanup
E21F 3B               (        forth.asm):00675 (17+?)          rti
                      (        forth.asm):00676         
E220 43432000         (        forth.asm):00677         CCREGM  fcn     'CC '
E224 20442000         (        forth.asm):00678         DREGM   fcn     ' D '
E228 20572000         (        forth.asm):00679         WREGM   fcn     ' W '
E22C 2044502000       (        forth.asm):00680         DPREGM  fcn     ' DP '
E231 20582000         (        forth.asm):00681         XREGM   fcn     ' X '
E235 20592000         (        forth.asm):00682         YREGM   fcn     ' Y '
E239 20552000         (        forth.asm):00683         UREGM   fcn     ' U '
E23D 2050432000       (        forth.asm):00684         PCREGM  fcn     ' PC '
E242 20532000         (        forth.asm):00685         SREGM   fcn     ' S '
                      (        forth.asm):00686                 IFNE    HVNMI2
E246                  (        forth.asm):00687         ACISTM  fcn     'AS '
E246                  (        forth.asm):00688         XMTOKM  fcn     ' XO '
E246                  (        forth.asm):00689         SBASEM  fcn     ' SB '
E246                  (        forth.asm):00690         SBENQM  fcn     ' EN '
E246                  (        forth.asm):00691         SBSEQM  fcn     ' DE '
E246                  (        forth.asm):00692         SBCNTM  fcn     ' CN '
E246                  (        forth.asm):00693         SBDRPM  fcn     ' DR '
                      (        forth.asm):00694                 ENDC                    HVNMI2
                      (        forth.asm):00695         
                      (        forth.asm):00696                 ENDC                    HVNMI
                      (        forth.asm):00697         
                      (        forth.asm):00698         * Returns the length of the string pointed to by X (terminator excluded) in W.
E246 3410             (        forth.asm):00699 (4+2)   SLEN    pshs    x
E248 105F             (        forth.asm):00700 (2)             clrw
E24A 105C             (        forth.asm):00701 (2)     @slen1  incw
E24C A680             (        forth.asm):00702 (4+1)           lda     ,x+
E24E 26FA             (        forth.asm):00703 (3)             bne     @slen1
E250 105A             (        forth.asm):00704 (2)             decw
E252 3510             (        forth.asm):00705 (4+2)           puls    x
E254 39               (        forth.asm):00706 (4)             rts
                      (        forth.asm):00707         
                      (        forth.asm):00708                 include console.asm
                      (      console.asm):00001         * FIRQ interrupt handler. This is entered on RDRF (input available).
E255 3416             (      console.asm):00002 (4+4)   FIRQHDL pshs    x,d
                      (      console.asm):00003                 IFNE    RTCFEAT
                      (      console.asm):00004                 jsr     RTCIHDL         Check for RTC periodic interrupt
                      (      console.asm):00005                 ENDC                    RTCFEAT
E257 B6D800           (      console.asm):00006 (4)             lda     ACIACTL
E25A 8580             (      console.asm):00007 (2)             bita    #ACIISVC        Does the ACIA need input service?
E25C 2731             (      console.asm):00008 (3)             beq     @nsintr         No. This is not the IRQ source we're looking for
                      (      console.asm):00009                 IFNE    DEBUG
                      (      console.asm):00010                 bita    #ACIRDRF
                      (      console.asm):00011                 beq     @nsintr         ACIA RDRF status bit should be set in all cases
                      (      console.asm):00012                 bita    #ACIOVRN        ACIA data overrun on read?
                      (      console.asm):00013                 beq     @datval         No, incoming data is valid
                      (      console.asm):00014                 ldb     ACIADAT         Clear overrun bit and INTACK
                      (      console.asm):00015                 ldb     #'%             Error indicating character is %
                      (      console.asm):00016                 bra     @chkovf
                      (      console.asm):00017                 ENDC                    DEBUG
                      (      console.asm):00018         * Out of band characters processing.
E25E F6D801           (      console.asm):00019 (4)     @datval ldb     ACIADAT         Incoming data byte to B and INTACK
E261 C103             (      console.asm):00020 (2)             cmpb    #ETX            Control-C?
E263 272D             (      console.asm):00021 (3)             beq     @sigint         Yes
E265 C113             (      console.asm):00022 (2)             cmpb    #XOFF
E267 2742             (      console.asm):00023 (3)             beq     @outngo         Output is being suspended
E269 C111             (      console.asm):00024 (2)             cmpb    #XON
E26B 2741             (      console.asm):00025 (3)             beq     @outok          Output is being re-enabled
E26D 9642             (      console.asm):00026 (3)     @chkovf lda     SERBCNT
E26F 810F             (      console.asm):00027 (2)             cmpa    #15             At high water level mark?
E271 2609             (      console.asm):00028 (3)             bne     @sbenq          No, proceed without negating RTS#
E273 3404             (      console.asm):00029 (4+1)           pshs    b
E275 C6D5             (      console.asm):00030 (2)             ldb     #ACIRTS1
E277 F7D800           (      console.asm):00031 (4)             stb     ACIACTL         Negate RTS#
E27A 3504             (      console.asm):00032 (4+1)           puls    b
E27C 8140             (      console.asm):00033 (2)     @sbenq  cmpa    #SERBSZ
                      (      console.asm):00034                 IFNE    HVNMI2
                      (      console.asm):00035                 beq     @nsdrop         Serial input buffer physically full
                      (      console.asm):00036                 ELSE
E27E 270F             (      console.asm):00037 (3)             beq     @nsintr         Serial input buffer physically full
                      (      console.asm):00038                 ENDC                    HVNMI2
E280 4C               (      console.asm):00039 (1)             inca
E281 9742             (      console.asm):00040 (3)             sta     SERBCNT         Update incoming FIFO byte count
E283 8E0144           (      console.asm):00041 (3)             ldx     #SERBUF
E286 9640             (      console.asm):00042 (3)             lda     SERBENQ         Enqueue offset to A
E288 E786             (      console.asm):00043 (4+1)           stb     a,x             Enqueue incoming character
E28A 4C               (      console.asm):00044 (1)             inca
E28B 843F             (      console.asm):00045 (2)             anda    #SERBSZ-1       Modulo arithmetic
E28D 9740             (      console.asm):00046 (3)             sta     SERBENQ
E28F 3516             (      console.asm):00047 (4+4)   @nsintr puls    d,x
E291 3B               (      console.asm):00048 (17+?)          rti
                      (      console.asm):00049         * Control-C was recognized.
E292 3264             (      console.asm):00050 (4+1)   @sigint leas    4,s             Drop D and X
E294 9641             (      console.asm):00051 (3)             lda     SERBDEQ
E296 9740             (      console.asm):00052 (3)             sta     SERBENQ
E298 0F42             (      console.asm):00053 (5)             clr     SERBCNT         Serial input buffer has been emptied
E29A BDEB78           (      console.asm):00054                 RFXT    jsr,NCLR+7      Clear the data stack
E29D BDEB84           (      console.asm):00055                 RFXT    jsr,RCLR+7      and the return stack
E2A0 10AE61           (      console.asm):00056 (6+1)           ldy     1,s             Saved PC from the FIRQ stack
E2A3 8EE76D           (      console.asm):00057 (3)             ldx     #ERRHD1
E2A6 AF61             (      console.asm):00058 (5+1)           stx     1,s             Execution continues in the error handler
E2A8 C603             (      console.asm):00059 (2)             ldb     #3              with ABORT error code passed through B
E2AA 3B               (      console.asm):00060 (17+?)          rti
E2AB 4F               (      console.asm):00061 (1)     @outngo clra
E2AC 2002             (      console.asm):00062 (3)             bra     @sxmsta
E2AE 8601             (      console.asm):00063 (2)     @outok  lda     #1
E2B0 9743             (      console.asm):00064 (3)     @sxmsta sta     XMITOK          Update XMIT status flag
E2B2 20DB             (      console.asm):00065 (3)             bra     @nsintr
                      (      console.asm):00066                 IFNE    HVNMI2
                      (      console.asm):00067         * Increment character drop count (displayed by NMIHDL).
E2B4                  (      console.asm):00068         @nsdrop ldd     SBDROPC
                      (      console.asm):00069                 incd
                      (      console.asm):00070                 std     SBDROPC
                      (      console.asm):00071                 bra     @nsintr
                      (      console.asm):00072                 ENDC                    HVNMI2
                      (      console.asm):00073         
                      (      console.asm):00074         * We do not have to talk to the ACIA directly, unless SERBCNT is zero,
                      (      console.asm):00075         * in which case we have to lower RTS#, so as to accept incoming characters.
                      (      console.asm):00076         * This can only be called from base level!
E2B4 3416             (      console.asm):00077 (4+4)   GETCH   pshs    x,d
E2B6 0D42             (      console.asm):00078 (4)     @again  tst     SERBCNT
E2B8 260F             (      console.asm):00079 (3)             bne     @sbdind         We have incoming material
E2BA C695             (      console.asm):00080 (2)             ldb     #ACIRTS0
E2BC F7D800           (      console.asm):00081 (4)             stb     ACIACTL         Assert RTS#
E2BF 1CBF             (      console.asm):00082 (2)             andcc   #^FFLAG         Unmask FIRQ
E2C1 8E0001           (      console.asm):00083 (3)             ldx     #1
E2C4 BDF88B           (      console.asm):00084 (7)             jsr     MILLIS1         Busy waiting for one millisecond
E2C7 20ED             (      console.asm):00085 (3)             bra     @again          Try again
                      (      console.asm):00086         * Serial buffer data indication.
E2C9 1A40             (      console.asm):00087 (2)     @sbdind orcc    #FFLAG          Mask FIRQ
E2CB 0A42             (      console.asm):00088 (5)             dec     SERBCNT
E2CD 1CBF             (      console.asm):00089 (2)             andcc   #^FFLAG         Unmask FIRQ
E2CF 8E0144           (      console.asm):00090 (3)             ldx     #SERBUF
E2D2 9641             (      console.asm):00091 (3)             lda     SERBDEQ         Dequeue offset to A
E2D4 E686             (      console.asm):00092 (4+1)           ldb     a,x             Buffered input character to B
E2D6 E7E4             (      console.asm):00093 (4+0)           stb     ,s              Incoming character to A in the caller's stack
E2D8 4C               (      console.asm):00094 (1)             inca
E2D9 843F             (      console.asm):00095 (2)             anda    #SERBSZ-1       Modulo arithmetic
E2DB 9741             (      console.asm):00096 (3)             sta     SERBDEQ
E2DD 3516             (      console.asm):00097 (4+4)           puls    d,x             Same as it ever was
E2DF 39               (      console.asm):00098 (4)             rts
                      (      console.asm):00099         
E2E0 3404             (      console.asm):00100 (4+1)   PUTCH   pshs    b
E2E2 C602             (      console.asm):00101 (2)             ldb     #ACITDRE
E2E4 F5D800           (      console.asm):00102 (4)     @tdrdrn bitb    ACIACTL
E2E7 27FB             (      console.asm):00103 (3)             beq     @tdrdrn         Drain the transmit data register
E2E9 0D43             (      console.asm):00104 (4)     @wfxon  tst     XMITOK          Software flow control on output
E2EB 27FC             (      console.asm):00105 (3)             beq     @wfxon          Wait for XON
E2ED B7D801           (      console.asm):00106 (4)             sta     ACIADAT         Transmit data
E2F0 3504             (      console.asm):00107 (4+1)           puls    b
E2F2 39               (      console.asm):00108 (4)             rts
                      (      console.asm):00109         
                      (      console.asm):00110         * Send NUL terminated string pointed to by X to the ACIA.
E2F3 3416             (      console.asm):00111 (4+4)   PUTS    pshs    x,d
E2F5 A680             (      console.asm):00112 (4+1)   @puts1  lda     ,x+
E2F7 2704             (      console.asm):00113 (3)             beq     @puts2         NUL marks the end of the string
E2F9 8DE5             (      console.asm):00114 (6)             bsr     PUTCH
E2FB 20F8             (      console.asm):00115 (3)             bra     @puts1
E2FD 3516             (      console.asm):00116 (4+4)   @puts2  puls    d,x
E2FF 39               (      console.asm):00117 (4)             rts
                      (      console.asm):00118         
E300 3410             (      console.asm):00119 (4+2)   PUTCR   pshs    x
E302 8EFE87           (      console.asm):00120 (3)             ldx     #CRLFSTR
E305 8DEC             (      console.asm):00121 (6)             bsr     PUTS
E307 3510             (      console.asm):00122 (4+2)           puls    x
E309 39               (      console.asm):00123 (4)             rts
                      (      console.asm):00124         
E30A 8608             (      console.asm):00125 (2)     _BS     lda     #BS
E30C 8DD2             (      console.asm):00126 (6)             bsr     PUTCH          Output BS
E30E 8620             (      console.asm):00127 (2)             lda     #SP
E310 8DCE             (      console.asm):00128 (6)             bsr     PUTCH          Clear character
E312 8608             (      console.asm):00129 (2)             lda     #BS
E314 20CA             (      console.asm):00130 (3)             bra     PUTCH          And go back again
                      (      console.asm):00131         
                      (      console.asm):00132         * Receive CR terminated string and store it to X.
                      (      console.asm):00133         * Upon entry B contains the receiving buffer length.
                      (      console.asm):00134         * (excluding the NUL terminator). On exit, B will
                      (      console.asm):00135         * contain the number of characters entered (excluding
                      (      console.asm):00136         * the trailing NUL). A and X are preserved. B will
                      (      console.asm):00137         * have the actual number of characters entered.
                      (      console.asm):00138         * Implementation of $05D9 in the TRS-80 Level II ROM.
E316 C102             (      console.asm):00139 (2)     GETS    cmpb    #2
E318 2401             (      console.asm):00140 (3)             bhs     @gets0          B must be 2 or more
E31A 39               (      console.asm):00141 (4)             rts
E31B 3416             (      console.asm):00142 (4+4)   @gets0  pshs    x,d
E31D 8D95             (      console.asm):00143 (6)     @gets1  bsr     GETCH
E31F 8108             (      console.asm):00144 (2)             cmpa    #BS             Backspace?
E321 260B             (      console.asm):00145 (3)             bne     @gets3
E323 E161             (      console.asm):00146 (4+1)           cmpb    1,s             B upon routine entry
E325 27F6             (      console.asm):00147 (3)             beq     @gets1          Do not go beyond the beginning of the buffer
E327 8DE1             (      console.asm):00148 (6)             bsr     _BS
E329 301F             (      console.asm):00149 (4+1)           leax    -1,x
E32B 5C               (      console.asm):00150 (1)             incb
E32C 20EF             (      console.asm):00151 (3)             bra     @gets1
E32E 8115             (      console.asm):00152 (2)     @gets3  cmpa    #NAK            Kill input?
E330 260B             (      console.asm):00153 (3)             bne     @gets5
                      (      console.asm):00154         * While B != 1,S (initial buffer length), decrement X, increment B.
E332 E161             (      console.asm):00155 (4+1)   @gets4  cmpb    1,s
E334 27E7             (      console.asm):00156 (3)             beq     @gets1
E336 8DD2             (      console.asm):00157 (6)             bsr     _BS
E338 301F             (      console.asm):00158 (4+1)           leax     -1,x
E33A 5C               (      console.asm):00159 (1)             incb
E33B 20F5             (      console.asm):00160 (3)             bra     @gets4
                      (      console.asm):00161         * Regular input handling: echo input character.
E33D 810D             (      console.asm):00162 (2)     @gets5  cmpa    #CR
E33F 2709             (      console.asm):00163 (3)             beq     @gets6          Minicom only sends CR
E341 8D9D             (      console.asm):00164 (6)             bsr     PUTCH
E343 A780             (      console.asm):00165 (4+1)           sta     ,x+
E345 5A               (      console.asm):00166 (1)             decb
E346 C101             (      console.asm):00167 (2)             cmpb    #1              End of buffer reached?
E348 26D3             (      console.asm):00168 (3)             bne     @gets1
E34A 8620             (      console.asm):00169 (2)     @gets6  lda     #SP
E34C 8D92             (      console.asm):00170 (6)             bsr     PUTCH
E34E 6F84             (      console.asm):00171 (6+0)           clr     ,x
E350 1F10             (      console.asm):00172 (4)             tfr     x,d
E352 A362             (      console.asm):00173 (5+1)           subd    2,s             Actual number of characters entered
E354 E761             (      console.asm):00174 (4+1)           stb     1,s             Stored to B (through the system stack).         
E356 3516             (      console.asm):00175 (4+4)           puls    d,x
E358 39               (      console.asm):00176 (4)             rts
                      (      console.asm):00177         
                      (        forth.asm):00709         
E359 BDEB78           (        forth.asm):00710         FORTHIN RFXT    jsr,NCLR+7      XT for NCLR. Set up the normal stack
E35C BDEB84           (        forth.asm):00711                 RFXT    jsr,RCLR+7      XT for RCLR. Set up the return stack
                      (        forth.asm):00712         * Relocate '@' code to RAM and set it up as the last dictionary entry (RO).
E35F 8EFE0A           (        forth.asm):00713 (3)             ldx     #THEEND         Source address for tfm
E362 1086000D         (        forth.asm):00714 (4)             ldw     #(REALEND-THEEND) Byte count for tfm
E366 108E0C60         (        forth.asm):00715 (4)             ldy     #WDICSPC        Destination address for tfm
E36A 109F06           (        forth.asm):00716 (5)             sty     LSTWAD
E36D 113812           (        forth.asm):00717 (6+?)           tfm     x+,y+
E370 109F08           (        forth.asm):00718 (5)             sty     DICEND
                      (        forth.asm):00719                 IFNE    RELFEAT
E373 BDEC98           (        forth.asm):00720                 RFXT    jsr,MONITOR+10  XT for MONITOR (monitor @ in RAM)
                      (        forth.asm):00721                 ENDC                    RELFEAT
E376 8D03             (        forth.asm):00722 (6)             bsr     EMPTYB          Buffer related initializations
                      (        forth.asm):00723                 IFNE    DEBUG
                      (        forth.asm):00724                 clrd
                      (        forth.asm):00725                 std     USTATE          Initial mode is interpretation
                      (        forth.asm):00726                 std     USCR            Clear SCR
                      (        forth.asm):00727                 std     UBLK            Clear BLK
                      (        forth.asm):00728                 std     UTOIN           Clear >IN
                      (        forth.asm):00729                 ENDC                    DEBUG
E378 7EFB82           (        forth.asm):00730                 RFXT    jmp,DECIMAL+10  XT for DECIMAL. Default base is decimal
                      (        forth.asm):00731         
E37B 8E0440           (        forth.asm):00732 (3)     EMPTYB  ldx     #BUF0
E37E 8D03             (        forth.asm):00733 (6)             bsr     EMPT1B
E380 8E0850           (        forth.asm):00734 (3)             ldx     #BUF1
                      (        forth.asm):00735         * Empty the buffer pointed to by X.
E383 9F1A             (        forth.asm):00736 (4)     EMPT1B  stx     MRUBUFA         Update most recently used buffer address
E385 30890400         (        forth.asm):00737 (4+3)           leax    BOTERM,x        Buffer offset to the terminator field
E389 104F             (        forth.asm):00738 (2)             clrd
E38B ED84             (        forth.asm):00739 (5+0)           std     ,x              Clear terminator and flags fields
                      (        forth.asm):00740                 IFNE    DEBUG
                      (        forth.asm):00741                 ldd     #$C7C7
                      (        forth.asm):00742                 std     2,x             Dummy block number
                      (        forth.asm):00743                 ENDC                    DEBUG
E38D 39               (        forth.asm):00744 (4)             rts
                      (        forth.asm):00745         
                      (        forth.asm):00746         * Scan for the next non-space character pointed to by X.
                      (        forth.asm):00747         * That character is returned through A. Flags are set accordingly.
E38E A680             (        forth.asm):00748 (4+1)   SCNSTOK lda     ,x+
E390 2704             (        forth.asm):00749 (3)             beq     @scstk1
E392 8120             (        forth.asm):00750 (2)             cmpa    #SP
E394 27F8             (        forth.asm):00751 (3)             beq     SCNSTOK
E396 301F             (        forth.asm):00752 (4+1)   @scstk1 leax    -1,x            Keep X pointing at the beginning of the token
E398 9F02             (        forth.asm):00753 (4)             stx     TOKENSP
E39A 4D               (        forth.asm):00754 (1)             tsta                    Have to test again because LEA affects Z
E39B 39               (        forth.asm):00755 (4)             rts
                      (        forth.asm):00756         
                      (        forth.asm):00757         * Scan for the next white space character (or NUL) as an end of token marker.
                      (        forth.asm):00758         * Upon entry:
                      (        forth.asm):00759         * - X points to the input stream.
                      (        forth.asm):00760         * Upon return:
                      (        forth.asm):00761         * - X will point to the next space character or NUL.
                      (        forth.asm):00762         * - CURTOKL will hold the current token length (returned in B).
                      (        forth.asm):00763         * - TOKENEP will point to the end of the current token.
E39C 5F               (        forth.asm):00764 (1)     SCNETOK clrb
E39D 5C               (        forth.asm):00765 (1)     @scetok incb
E39E A680             (        forth.asm):00766 (4+1)           lda     ,x+
E3A0 2704             (        forth.asm):00767 (3)             beq     @scetk1
E3A2 8120             (        forth.asm):00768 (2)             cmpa    #SP
E3A4 26F7             (        forth.asm):00769 (3)             bne     @scetok
E3A6 301F             (        forth.asm):00770 (4+1)   @scetk1 leax    -1,x            Keep X pointing at the end of the token
E3A8 9F04             (        forth.asm):00771 (4)             stx     TOKENEP
E3AA 5A               (        forth.asm):00772 (1)             decb
E3AB D738             (        forth.asm):00773 (3)             stb     CURTOKL
E3AD 39               (        forth.asm):00774 (4)             rts
                      (        forth.asm):00775         
                      (        forth.asm):00776         * Check for numeric literal BASE prefix. On entry X has the input stream
                      (        forth.asm):00777         * pointer. On exit, BASE is altered if needed and the original BASE saved
                      (        forth.asm):00778         * to BASBKUP. If BASE was not changed, BASBKUP will be zero.
                      (        forth.asm):00779         * D is altered, X is updated if a BASE prefix is detected, other registers
                      (        forth.asm):00780         * are untouched.
E3AE E684             (        forth.asm):00781 (4+0)   CKNBPFX ldb     ,x              B has a potential base prefix character
E3B0 3410             (        forth.asm):00782 (4+2)           pshs    x
E3B2 8EFFDD           (        forth.asm):00783 (3)             ldx     #BASALST        A associative list (A-list) of BASE prefixes
E3B5 A681             (        forth.asm):00784 (4+2)   @pflkup lda     ,x++            Potential BASE prefix character to A
E3B7 2707             (        forth.asm):00785 (3)             beq     @nopfix         Reached the end of the A-list. No prefix found
E3B9 103798           (        forth.asm):00786 (4)             cmpr    b,a             Prefix match?
E3BC 2707             (        forth.asm):00787 (3)             beq     @pfxfnd         Yes
E3BE 20F5             (        forth.asm):00788 (3)             bra     @pflkup
E3C0 0F2C             (        forth.asm):00789 (5)     @nopfix clr     BASBKUP         Nothing to be restored to BASE
E3C2 3510             (        forth.asm):00790 (4+2)           puls    x
E3C4 39               (        forth.asm):00791 (4)             rts
E3C5 961F             (        forth.asm):00792 (3)     @pfxfnd lda     UBASE+1
E3C7 972C             (        forth.asm):00793 (3)             sta     BASBKUP         Back up the current BASE value
E3C9 A61F             (        forth.asm):00794 (4+1)           lda     -1,x            The BASE specified by the prefix
E3CB 971F             (        forth.asm):00795 (3)             sta     UBASE+1         Update BASE
E3CD 3510             (        forth.asm):00796 (4+2)           puls    x
E3CF 3001             (        forth.asm):00797 (4+1)           leax    1,x             Skip the prefix from the input stream
E3D1 39               (        forth.asm):00798 (4)             rts
                      (        forth.asm):00799         
                      (        forth.asm):00800         * Restore BASE if a numeric literal BASE prefix was detected.
                      (        forth.asm):00801         * X is to be preserved at all cost!
E3D2 962C             (        forth.asm):00802 (3)     RSBSPFX lda     BASBKUP
E3D4 2702             (        forth.asm):00803 (3)             beq     @theend
E3D6 971F             (        forth.asm):00804 (3)             sta     UBASE+1
E3D8 39               (        forth.asm):00805 (4)     @theend rts
                      (        forth.asm):00806         
                      (        forth.asm):00807         * Check whether BASE is in the supported range ([2..36]).
E3D9 961F             (        forth.asm):00808 (3)     CKBASE  lda     UBASE+1         BASE
E3DB 8102             (        forth.asm):00809 (2)             cmpa    #2
E3DD 2505             (        forth.asm):00810 (3)             blo     @ckbser         Must be >= 2
E3DF 8124             (        forth.asm):00811 (2)             cmpa    #36
E3E1 2201             (        forth.asm):00812 (3)             bhi     @ckbser         And <= 36 (the ANSI maximum)
E3E3 39               (        forth.asm):00813 (4)             rts
E3E4 C60F             (        forth.asm):00814 (2)     @ckbser ldb     #15             Invalid BASE
E3E6 BDE76A           (        forth.asm):00815 (7)             jsr     ERRHDLR         No return
     E3E9             (        forth.asm):00816         CKBASRA equ     *
                      (        forth.asm):00817         
                      (        forth.asm):00818         * NUMCVT performs a signed string to number conversion. The input string is
                      (        forth.asm):00819         * acquired from the input stream. Note that this routine always is called
                      (        forth.asm):00820         * after a dictionary lookup (SWDIC), so TOKENSP and CURTOKL are guaranteed
                      (        forth.asm):00821         * to have been set previously. There are two ways out this routine:
                      (        forth.asm):00822         * - redirection to the error handler (Undefined word), or
                      (        forth.asm):00823         * - a converted cell or double cell returned through the data stack.
                      (        forth.asm):00824         *   Upon return, ISDBLF being NZ will indicate a double.
E3E9 8DEE             (        forth.asm):00825 (6)     NUMCVT  bsr     CKBASE          No return if BASE isn't in the [2..36] range
E3EB 0F35             (        forth.asm):00826 (5)             clr     ISNEGF          Assume the result is positive
E3ED 0F36             (        forth.asm):00827 (5)             clr     ISDBLF          Assume the result is not a double number
E3EF 9E02             (        forth.asm):00828 (4)             ldx     TOKENSP
E3F1 8DBB             (        forth.asm):00829 (6)             bsr     CKNBPFX         Check for numeric literal BASE prefix
                      (        forth.asm):00830         * Check for optional minus sign.
E3F3 A684             (        forth.asm):00831 (4+0)           lda     ,x
E3F5 812D             (        forth.asm):00832 (2)             cmpa    #'-
E3F7 2604             (        forth.asm):00833 (3)             bne     @ncini
E3F9 0C35             (        forth.asm):00834 (5)             inc     ISNEGF          Remember to negate the result before returning
E3FB 3001             (        forth.asm):00835 (4+1)           leax    1,x             Skip the negativity!
E3FD 1F12             (        forth.asm):00836 (4)     @ncini  tfr     x,y             Backup input stream pointer
E3FF 1FC1             (        forth.asm):00837 (4)             tfr     0,x             Initialize the result
E401 BDE7EB           (        forth.asm):00838 (7)             jsr     NPUSH           LSC
E404 BDE7EB           (        forth.asm):00839 (7)             jsr     NPUSH           MSC
E407 1F21             (        forth.asm):00840 (4)             tfr     y,x             Restore the input stream pointer
E409 301F             (        forth.asm):00841 (4+1)           leax    -1,x
E40B BDE7EB           (        forth.asm):00842 (7)             jsr     NPUSH           Base scanning address minus 1
E40E BDF4EE           (        forth.asm):00843                 RFXT    jsr,CONVERT+10
                      (        forth.asm):00844         * Upon return TOS C@ should be BL, NUL or . Anything else indicates an error.
                      (        forth.asm):00845         * In any case, at this point, at least three cells are on the data stack.
E411 3710             (        forth.asm):00846                 UCNPOP                  Address of the last non convertible char to X
E413 A684             (        forth.asm):00847 (4+0)           lda     ,x
E415 270A             (        forth.asm):00848 (3)             beq     @ncadj          NUL is acceptable
E417 8120             (        forth.asm):00849 (2)             cmpa    #SP
E419 2706             (        forth.asm):00850 (3)             beq     @ncadj          So is BL
E41B 812E             (        forth.asm):00851 (2)             cmpa    #'.             Was a double number meant?
E41D 2618             (        forth.asm):00852 (3)             bne     @ncnogo         No, we do not have a winner...
E41F 0C36             (        forth.asm):00853 (5)             inc     ISDBLF
                      (        forth.asm):00854         * If Z is not set at this point, we are dealing with a double number.
E421 260B             (        forth.asm):00855 (3)     @ncadj  bne     @ncdadj 
E423 3710             (        forth.asm):00856                 UCNPOP                  Drop the MSC
E425 0D35             (        forth.asm):00857 (4)             tst     ISNEGF          Are we dealing with a negative number?
E427 27A9             (        forth.asm):00858 (3)             beq     RSBSPFX         No. Restore BASE if needed--the end
E429 BDEFC4           (        forth.asm):00859                 RFXT    jsr,NEGATE+9    Acknowledge the negativity
E42C 20A4             (        forth.asm):00860 (3)             bra     RSBSPFX         Restore BASE if needed--the end
E42E 0D35             (        forth.asm):00861 (4)     @ncdadj tst     ISNEGF          Are we dealing with a negative number?
E430 27A0             (        forth.asm):00862 (3)             beq     RSBSPFX         No. Restore BASE if needed--the end
E432 BDF3FB           (        forth.asm):00863                 RFXT    jsr,DNEG+10     Acknowledge the negativity
E435 209B             (        forth.asm):00864 (3)             bra     RSBSPFX         Restore BASE if needed--the end
E437 3344             (        forth.asm):00865 (4+1)   @ncnogo leau    4,u             Drop two cells from the data stack
E439 9E02             (        forth.asm):00866 (4)             ldx     TOKENSP         Beginning address of the current token
E43B C602             (        forth.asm):00867 (2)             ldb     #2              Undefined (X points to the offending word)
E43D BDE76A           (        forth.asm):00868 (7)             jsr     ERRHDLR         No return
     E440             (        forth.asm):00869         NUMCVRA equ     *               For symbolic stack dump purposes
E440 12               (        forth.asm):00870 (1)             nop
                      (        forth.asm):00871         
                      (        forth.asm):00872         * Convert number stored in X to a string (depending on BASE value).
                      (        forth.asm):00873         * Output is stored in the global TBUFF buffer. X is preserved.
E441 8D96             (        forth.asm):00874 (6)     CVNSTR  bsr     CKBASE
E443 0F35             (        forth.asm):00875 (5)             clr     ISNEGF
E445 1F10             (        forth.asm):00876 (4)             tfr     x,d
E447 0D37             (        forth.asm):00877 (4)             tst     CVISSGN         Are we to perform a signed conversion?
E449 2708             (        forth.asm):00878 (3)             beq     @cvnst1
E44B 104D             (        forth.asm):00879 (2)             tstd
E44D 2A04             (        forth.asm):00880 (3)             bpl     @cvnst1
E44F 0C35             (        forth.asm):00881 (5)             inc     ISNEGF          Number being converted is negative
E451 1040             (        forth.asm):00882 (2)             negd
E453 1F06             (        forth.asm):00883 (4)     @cvnst1 tfr     d,w
E455 104F             (        forth.asm):00884 (2)             clrd
E457 108E03FD         (        forth.asm):00885 (4)             ldy     #TBUFF+19       Sign + 16 digits + terminator + 1
E45B 6FA2             (        forth.asm):00886 (6+1)           clr     ,-y             End of string marker
E45D 119E1E           (        forth.asm):00887 (35)    @cvnst2 divq    UBASE           D returns the modulo and W the quotient
E460 8630             (        forth.asm):00888 (2)             lda     #'0
E462 C10A             (        forth.asm):00889 (2)             cmpb    #10
E464 2502             (        forth.asm):00890 (3)             bcs     @cvnst3
                      (        forth.asm):00891         * BASE has letters among its valid numbers.
E466 8637             (        forth.asm):00892 (2)             lda     #'A-10
E468 103089           (        forth.asm):00893 (4)     @cvnst3 addr    a,b
E46B E7A2             (        forth.asm):00894 (4+1)           stb     ,-y
E46D 104F             (        forth.asm):00895 (2)             clrd
E46F 105D             (        forth.asm):00896 (2)             tstw
E471 26EA             (        forth.asm):00897 (3)             bne     @cvnst2
E473 C620             (        forth.asm):00898 (2)             ldb     #SP
E475 0D35             (        forth.asm):00899 (4)             tst     ISNEGF
E477 2702             (        forth.asm):00900 (3)             beq     @cvnst4
E479 C62D             (        forth.asm):00901 (2)             ldb     #'-
E47B E7A2             (        forth.asm):00902 (4+1)   @cvnst4 stb     ,-y
                      (        forth.asm):00903         * We need to insert leading spaces up to the beginning of the output buffer.
E47D C620             (        forth.asm):00904 (2)             ldb     #SP
E47F 108C03EA         (        forth.asm):00905 (4)     @cvnst5 cmpy    #TBUFF
E483 2601             (        forth.asm):00906 (3)             bne     @cvnst6
E485 39               (        forth.asm):00907 (4)             rts
E486 E7A2             (        forth.asm):00908 (4+1)   @cvnst6 stb     ,-y
E488 20F5             (        forth.asm):00909 (3)             bra     @cvnst5
                      (        forth.asm):00910         
                      (        forth.asm):00911         * Check for minimal data stack depth. On input D has the lowest possible stack
                      (        forth.asm):00912         * address that satisfies the needs of the caller. This routine is meant
                      (        forth.asm):00913         * to support "transactional" behaviour, which is intended to improve
                      (        forth.asm):00914         * debugging support.
E48A 103703           (        forth.asm):00915 (4)     CHKNDPT cmpr    d,u
E48D 2201             (        forth.asm):00916 (3)             bhi     @stkudf
E48F 39               (        forth.asm):00917 (4)             rts
E490 C601             (        forth.asm):00918 (2)     @stkudf ldb     #1              Data stack underflow
E492 BDE76A           (        forth.asm):00919 (7)             jsr     ERRHDLR         No return
     E495             (        forth.asm):00920         CKDPTRA equ     *
                      (        forth.asm):00921         
                      (        forth.asm):00922         * Parameter stack's depth checking primitives (transactional behavior support).
E495 CC029420F0       (        forth.asm):00923         MIN1PST MINDREQ 1
                      (        forth.asm):00924         
E49A CC029220EB       (        forth.asm):00925         MIN2PST MINDREQ 2
                      (        forth.asm):00926         
E49F CC029020E6       (        forth.asm):00927         MIN3PST MINDREQ 3
                      (        forth.asm):00928         
E4A4 CC028E20E1       (        forth.asm):00929         MIN4PST MINDREQ 4
                      (        forth.asm):00930         
                      (        forth.asm):00931         * Search word beginning at address TOKENSP in the dictionary.
                      (        forth.asm):00932         * Upon return Z will be set if the word was not found.
                      (        forth.asm):00933         * Otherwise, Y will point to the code section of the word.
                      (        forth.asm):00934         * CSSNTVE (defined in constants.asm) defines whether the
                      (        forth.asm):00935         * dictionary match is case sensitive or not.
                      (        forth.asm):00936         * Important note: if the word is found TOKENEP will be copied to TOKENSP.
E4A9 9E02             (        forth.asm):00937 (4)     SWDIC   ldx     TOKENSP
E4AB BDE39C           (        forth.asm):00938 (7)             jsr     SCNETOK         B has CURTOKL
E4AE 9E08             (        forth.asm):00939 (4)             ldx     DICEND
E4B0 9F16             (        forth.asm):00940 (4)             stx     VLPRVEP         Last dictionary entry code address + 1
E4B2 9E02             (        forth.asm):00941 (4)             ldx     TOKENSP
E4B4 109E06           (        forth.asm):00942 (5)             ldy     LSTWAD          Latest word header address to Y
E4B7 2606             (        forth.asm):00943 (3)     @swrdc0 bne     @swrdc1
E4B9 1FC2             (        forth.asm):00944 (4)             tfr     0,y             Word not found. Z is set
E4BB 109F0E           (        forth.asm):00945 (5)             sty     PLOAD
E4BE 39               (        forth.asm):00946 (4)             rts
E4BF A6A4             (        forth.asm):00947 (4+0)   @swrdc1 lda     ,y              Word attribute to A
E4C1 841F             (        forth.asm):00948 (2)             anda    #WRLNMSK        Extract word length
E4C3 3420             (        forth.asm):00949 (4+2)           pshs    y
E4C5 103798           (        forth.asm):00950 (4)             cmpr    b,a             Word length match?
E4C8 2638             (        forth.asm):00951 (3)             bne     @swrdc3         No, point to next dictionary entry
E4CA 3121             (        forth.asm):00952 (4+1)           leay    1,y
E4CC A6A0             (        forth.asm):00953 (4+1)   @swrdc2 lda     ,y+
                      (        forth.asm):00954                 IFNE    CSSNTVE
                      (        forth.asm):00955                 cmpa    ,x+             Case sensitive dictionary
                      (        forth.asm):00956                 ELSE
E4CE 1F9E             (        forth.asm):00957 (4)             tfr     b,e             Case insensitive search (preferred)
E4D0 E680             (        forth.asm):00958 (4+1)           ldb     ,x+
E4D2 C161             (        forth.asm):00959 (2)             cmpb    #'a
E4D4 2506             (        forth.asm):00960 (3)             bcs     @nochg
E4D6 C17B             (        forth.asm):00961 (2)             cmpb    #'z+1
E4D8 2402             (        forth.asm):00962 (3)             bcc     @nochg
E4DA C020             (        forth.asm):00963 (2)             subb    #'a-'A
E4DC 103798           (        forth.asm):00964 (4)     @nochg  cmpr    b,a
E4DF 1FE9             (        forth.asm):00965 (4)             tfr     e,b
                      (        forth.asm):00966                 ENDC                    CSSNTVE
E4E1 261F             (        forth.asm):00967 (3)             bne     @swrdc3
E4E3 5A               (        forth.asm):00968 (1)             decb
E4E4 26E6             (        forth.asm):00969 (3)             bne     @swrdc2
                      (        forth.asm):00970         * Word match!
E4E6 3510             (        forth.asm):00971 (4+2)           puls    x
E4E8 E684             (        forth.asm):00972 (4+0)           ldb     ,x              Word attribute byte to B
E4EA 4F               (        forth.asm):00973 (1)             clra
E4EB 58               (        forth.asm):00974 (1)             lslb                    Bit 7 to CFLAG
E4EC 49               (        forth.asm):00975 (1)             rola                    CFLAG to A
E4ED 9739             (        forth.asm):00976 (3)             sta     IMDFLG          Set IMMEDIATE flag
E4EF 4F               (        forth.asm):00977 (1)             clra
E4F0 58               (        forth.asm):00978 (1)             lslb                    Bit 6 to CFLAG
E4F1 49               (        forth.asm):00979 (1)             rola                    CFLAG to A
E4F2 973A             (        forth.asm):00980 (3)             sta     DEFFLG          Set DEFINE flag
E4F4 9E04             (        forth.asm):00981 (4)             ldx     TOKENEP
E4F6 9F02             (        forth.asm):00982 (4)             stx     TOKENSP
                      (        forth.asm):00983                 IFNE    RELFEAT
E4F8 3123             (        forth.asm):00984 (4+1)           leay    3,y             Skip back pointer and checksum. Return XT
                      (        forth.asm):00985                 ELSE
                      (        forth.asm):00986                 leay    2,y             Skip back pointer. Return XT
                      (        forth.asm):00987                 ENDC                    RELFEAT
E4FA DC16             (        forth.asm):00988 (4)             ldd     VLPRVEP
E4FC 103220           (        forth.asm):00989 (4)             subr    y,d
E4FF DD0E             (        forth.asm):00990 (4)             std     PLOAD
E501 39               (        forth.asm):00991 (4)             rts                     NZ since there is no zero payload word
E502 3520             (        forth.asm):00992 (4+2)   @swrdc3 puls    y               Point to previous word header
E504 109F16           (        forth.asm):00993 (5)             sty     VLPRVEP
E507 4F               (        forth.asm):00994 (1)             clra
E508 E6A0             (        forth.asm):00995 (4+1)           ldb     ,y+
E50A C41F             (        forth.asm):00996 (2)             andb    #WRLNMSK
E50C 31AB             (        forth.asm):00997 (4+2)           leay    d,y
E50E 9E02             (        forth.asm):00998 (4)             ldx     TOKENSP
E510 D638             (        forth.asm):00999 (3)             ldb     CURTOKL
E512 10AEA4           (        forth.asm):01000 (6+0)           ldy     ,y
E515 20A0             (        forth.asm):01001 (3)             bra     @swrdc0
                      (        forth.asm):01002         
                      (        forth.asm):01003         * Create new dictionary entry. The word name being created is acquired from
                      (        forth.asm):01004         * the input stream. Warning, this requires a writable dictionary!
                      (        forth.asm):01005         * The new end of the dictionary is returned in Y. W is preserved.
E517 1038             (        forth.asm):01006 (6)     LOCWRT  pshsw
E519 9E08             (        forth.asm):01007 (4)             ldx     DICEND
                      (        forth.asm):01008                 IFNE    DEBUG
                      (        forth.asm):01009                 cmpx    #ROMSTRT
                      (        forth.asm):01010                 bcs     @locwr0
                      (        forth.asm):01011                 ldb     #10             Assertion failure (trying to write to ROM!)
                      (        forth.asm):01012                 jsr     ERRHDLR         No return
E51B                  (        forth.asm):01013         LWAFRA  equ     *
                      (        forth.asm):01014                 ENDC                    DEBUG
E51B 9F0C             (        forth.asm):01015 (4)     @locwr0 stx     BDICEND         Back pointer up
E51D 9E06             (        forth.asm):01016 (4)             ldx     LSTWAD
E51F 9F0A             (        forth.asm):01017 (4)             stx     BLSTWAD         Back pointer up
E521 BDE83F           (        forth.asm):01018 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
E524 6D84             (        forth.asm):01019 (5+0)           tst     ,x
E526 2605             (        forth.asm):01020 (3)             bne     @locwr2
E528 C605             (        forth.asm):01021 (2)     @locwr1 ldb     #5              Missing word name
E52A BDE76A           (        forth.asm):01022 (7)             jsr     ERRHDLR         No return
     E52D             (        forth.asm):01023         LWMNRA  equ     *               LOCWRT missing word name return address
E52D BDE38E           (        forth.asm):01024 (7)     @locwr2 jsr     SCNSTOK
E530 27F6             (        forth.asm):01025 (3)             beq     @locwr1         End of line reached
E532 BDE39C           (        forth.asm):01026 (7)             jsr     SCNETOK         X has TOKENEP, B has CURTOKL
E535 109E02           (        forth.asm):01027 (5)             ldy     TOKENSP
E538 103221           (        forth.asm):01028 (4)             subr    y,x
E53B 3410             (        forth.asm):01029 (4+2)           pshs    x               Word length to the system stack
E53D 9E08             (        forth.asm):01030 (4)             ldx     DICEND
E53F A661             (        forth.asm):01031 (4+1)           lda     1,s             Word length LSB in the system stack
E541 8120             (        forth.asm):01032 (2)             cmpa    #1+WRLNMSK      Max word length is 31, 79-STANDARD compliant
E543 2505             (        forth.asm):01033 (3)             blo     @lcwr21
E545 C610             (        forth.asm):01034 (2)             ldb     #16             Word name is too long
E547 BDE76A           (        forth.asm):01035 (7)             jsr     ERRHDLR         No return
     E54A             (        forth.asm):01036         WTOOLNG equ     *
E54A A780             (        forth.asm):01037 (4+1)   @lcwr21 sta     ,x+             Word length to dictionary
E54C 10A6E1           (        forth.asm):01038 (6+2)           ldw     ,s++            16-bit word length to W
E54F 1E12             (        forth.asm):01039 (5)             exg     x,y             Y points to the dictionary, X has TOKENSP
                      (        forth.asm):01040                 IFNE    CSSNTVE
                      (        forth.asm):01041                 tfm     x+,y+           Word name to dictionary, as is
                      (        forth.asm):01042                 ELSE
E551 1FF9             (        forth.asm):01043 (4)             tfr     f,b             Force dictionary entry to upper case
E553 A680             (        forth.asm):01044 (4+1)   @locwr3 lda     ,x+
E555 8161             (        forth.asm):01045 (2)             cmpa    #'a
E557 2506             (        forth.asm):01046 (3)             bcs     @locwr4
E559 817B             (        forth.asm):01047 (2)             cmpa    #'z+1
E55B 2402             (        forth.asm):01048 (3)             bcc     @locwr4
E55D 8020             (        forth.asm):01049 (2)             suba    #'a-'A          To upper case
E55F A7A0             (        forth.asm):01050 (4+1)   @locwr4 sta     ,y+
E561 5A               (        forth.asm):01051 (1)             decb
E562 26EF             (        forth.asm):01052 (3)             bne     @locwr3
                      (        forth.asm):01053                 ENDC                    CSSNTVE
E564 1F10             (        forth.asm):01054 (4)             tfr     x,d
E566 BDE177           (        forth.asm):01055 (7)             jsr     U2INFRD         Derive >IN from D
E569 9E06             (        forth.asm):01056 (4)             ldx     LSTWAD
E56B AFA1             (        forth.asm):01057 (5+2)           stx     ,y++            Back pointer to dictionary
                      (        forth.asm):01058                 IFNE    RELFEAT
E56D 6FA0             (        forth.asm):01059 (6+1)           clr     ,y+             Initialize the checksum header field
                      (        forth.asm):01060                 ENDC                    RELFEAT
E56F 109F08           (        forth.asm):01061 (5)             sty     DICEND
E572 109F12           (        forth.asm):01062 (5)             sty     RECADDR         Should we resort to recursion later on
E575 1039             (        forth.asm):01063 (6)             pulsw
E577 39               (        forth.asm):01064 (4)             rts
                      (        forth.asm):01065         
                      (        forth.asm):01066         * Compile 'ldx  #X; jsr NPUSH'.
                      (        forth.asm):01067         * DICEND is updated and returned in Y.
E578 109E08           (        forth.asm):01068 (5)     LITER   ldy     DICEND
E57B 868E             (        forth.asm):01069 (2)             lda     #LDXOPC         LDX immediate
E57D 8D10             (        forth.asm):01070 (6)             bsr     VARCON2
E57F 86BD             (        forth.asm):01071 (2)             lda     #JSROPC         JSR extended
E581 BDE155           (        forth.asm):01072 (7)             jsr     CHKRTS          Check if the final RTS can be omitted
E584 8D06             (        forth.asm):01073 (6)             bsr     VARCON1
E586 109F08           (        forth.asm):01074 (5)             sty     DICEND
E589 39               (        forth.asm):01075 (4)             rts
                      (        forth.asm):01076         
                      (        forth.asm):01077         * Compile 'jmp  NPUSH'.
                      (        forth.asm):01078         * Y points to the end of the dictionary on entry and on exit.
E58A 867E             (        forth.asm):01079 (2)     VARCON  lda     #JMPOPC         JMP extended
E58C 8EE7EB           (        forth.asm):01080 (3)     VARCON1 ldx     #NPUSH
E58F A7A0             (        forth.asm):01081 (4+1)   VARCON2 sta     ,y+
E591 AFA1             (        forth.asm):01082 (5+2)           stx     ,y++
E593 39               (        forth.asm):01083 (4)             rts
                      (        forth.asm):01084         
                      (        forth.asm):01085         * Used by U<, U>, <, >.
E594 BDE49A           (        forth.asm):01086 (7)     CMP2    jsr     MIN2PST         At least 2 cells must be stacked up
E597 10AEC4           (        forth.asm):01087 (6+0)   CMP2RA  ldy     ,u
E59A AE42             (        forth.asm):01088 (5+1)           ldx     2,u
E59C 103721           (        forth.asm):01089 (4)             cmpr    y,x
E59F 1FA9             (        forth.asm):01090 (4)             tfr     cc,b
                      (        forth.asm):01091                 IFNE    DEBUG
                      (        forth.asm):01092                 clra
                      (        forth.asm):01093                 std     CCREG
                      (        forth.asm):01094                 ENDC                    DEBUG
E5A1 1FC1             (        forth.asm):01095 (4)             tfr     0,x
E5A3 3344             (        forth.asm):01096 (4+1)           leau    4,u
E5A5 1F9A             (        forth.asm):01097 (4)             tfr     b,cc
E5A7 39               (        forth.asm):01098 (4)             rts
                      (        forth.asm):01099         
                      (        forth.asm):01100         * Used by CMOVE, CMOVE>, MOVE.
E5A8 BDE49F           (        forth.asm):01101 (7)     ACQMOVP jsr     MIN3PST         At least 3 cells must be stacked up
E5AB 10A6C4           (        forth.asm):01102 (6+0)   ACQVMRA ldw     ,u              Byte count
E5AE 10AE42           (        forth.asm):01103 (6+1)           ldy     2,u             Destination address
E5B1 AE44             (        forth.asm):01104 (5+1)           ldx     4,u             Source address
E5B3 3346             (        forth.asm):01105 (4+1)           leau    6,u             Drop 3 cells from the user stack
E5B5 39               (        forth.asm):01106 (4)             rts
                      (        forth.asm):01107         
                      (        forth.asm):01108         * FDCTSYM enveadours to match the address stored in Y to a dictionary entry.
                      (        forth.asm):01109         * Upon a successful flexible match, it will output a string in the form of
                      (        forth.asm):01110         * <wordname>+<offset> to the string pointed to by X. <wordname> refers to the
                      (        forth.asm):01111         * code entry point of the matched word. <offset> will be expressed in hex.
                      (        forth.asm):01112         * If a match is found, Z will be clear, otherwise it will be set.
                      (        forth.asm):01113         * A candidate for a word code address must meet the following criteria:
                      (        forth.asm):01114         * ((Y U>= #EBUFS) AND (Y U< #THEEND)) OR ((Y U>= #WDICSPC) AND (Y U< DICEND)).
                      (        forth.asm):01115         * Upon return:
                      (        forth.asm):01116         * - the string pointed to by X will updated with its symbolic match
                      (        forth.asm):01117         *   (NUL terminated), if there is one. X itself might have been altered.
                      (        forth.asm):01118         * - Y should be preserved.
                      (        forth.asm):01119         * EBUFS (EMPTY-BUFFERS) header address is the last word in the dictionary.
                      (        forth.asm):01120                 IFNE    SSDFEAT
E5B6 3430             (        forth.asm):01121 (4+4)   FDCTSYM pshs    y,x     
E5B8 1F21             (        forth.asm):01122 (4)             tfr     y,x             Potential execution token to X
E5BA 8CE980           (        forth.asm):01123 (3)             cmpx    #EBUFS
E5BD 2505             (        forth.asm):01124 (3)             blo     @fdstr2 
E5BF 8CFE0A           (        forth.asm):01125 (3)             cmpx    #THEEND
E5C2 250D             (        forth.asm):01126 (3)             blo     @fdsmtc
E5C4 8C0C60           (        forth.asm):01127 (3)     @fdstr2 cmpx    #WDICSPC        Term 2 of the predicate for a valid word addr
E5C7 2504             (        forth.asm):01128 (3)             blo     @fdsnom
E5C9 9C08             (        forth.asm):01129 (4)             cmpx    DICEND
E5CB 2504             (        forth.asm):01130 (3)             blo     @fdsmtc
E5CD 4F               (        forth.asm):01131 (1)     @fdsnom clra                    No match (Z is set)
E5CE 3530             (        forth.asm):01132 (4+4)           puls    x,y
E5D0 39               (        forth.asm):01133 (4)             rts
E5D1 9E06             (        forth.asm):01134 (4)     @fdsmtc ldx     LSTWAD          Potential match. Scan upward from LAST
                      (        forth.asm):01135         * X points to the latest word header, Y has an execution token.
E5D3 109608           (        forth.asm):01136 (5)             ldw     DICEND          W points to the end of the code section
E5D6 3410             (        forth.asm):01137 (4+2)   @fdslop pshs    x               Pointer to the current word header
E5D8 E680             (        forth.asm):01138 (4+1)           ldb     ,x+
E5DA C41F             (        forth.asm):01139 (2)             andb    #WRLNMSK
E5DC 3A               (        forth.asm):01140 (1)             abx                     Skip word name string
E5DD EC81             (        forth.asm):01141 (5+2)           ldd     ,x++            Backlink to D
                      (        forth.asm):01142                 IFNE    RELFEAT
E5DF 3001             (        forth.asm):01143 (4+1)           leax    1,x             Skip the checksum
                      (        forth.asm):01144                 ENDC                    RELFEAT
E5E1 103712           (        forth.asm):01145 (4)             cmpr    x,y
E5E4 2530             (        forth.asm):01146 (3)             blo     @fdsnwd
E5E6 103762           (        forth.asm):01147 (4)             cmpr    w,y
E5E9 222B             (        forth.asm):01148 (3)             bhi     @fdsnwd         An equal address is allowed here, in case
                      (        forth.asm):01149         * jsr ERRHDLR is the last instruction for the word under consideration.
                      (        forth.asm):01150         * This happens to be the case for FORGET and LPAR.
                      (        forth.asm):01151         * Y matches the code range for the current word.
E5EB 3510             (        forth.asm):01152 (4+2)           puls    x
E5ED E680             (        forth.asm):01153 (4+1)           ldb     ,x+
E5EF C41F             (        forth.asm):01154 (2)             andb    #WRLNMSK
E5F1 1F9F             (        forth.asm):01155 (4)             tfr     b,f
E5F3 114F             (        forth.asm):01156 (2)             clre                    W has the matched word length
E5F5 10AEE4           (        forth.asm):01157 (6+0)           ldy     ,s              Y points to the target buffer
E5F8 113812           (        forth.asm):01158 (6+?)           tfm     x+,y+
E5FB 6FA4             (        forth.asm):01159 (6+0)           clr     ,y              We need this in case the offset is zero
                      (        forth.asm):01160         * Offset processing.
                      (        forth.asm):01161                 IFNE    RELFEAT
E5FD 3003             (        forth.asm):01162 (4+1)           leax    3,x             Skip backlink and checksum
                      (        forth.asm):01163                 ELSE
                      (        forth.asm):01164                 leax    2,x             Skip backlink
                      (        forth.asm):01165                 ENDC                    RELFEAT
E5FF EC62             (        forth.asm):01166 (5+1)           ldd     2,s             Execution token to D
E601 103210           (        forth.asm):01167 (4)             subr    x,d             Offset between XT and word entry point to D
E604 270B             (        forth.asm):01168 (3)             beq     @skoffs         Skip displaying the offset if it is zero
E606 3402             (        forth.asm):01169 (4+1)           pshs    a               Preserve the offset's MSB
E608 862B             (        forth.asm):01170 (2)             lda     #'+
E60A A7A0             (        forth.asm):01171 (4+1)           sta     ,y+
E60C 3502             (        forth.asm):01172 (4+1)           puls    a               Restore the offset's MSB
E60E BDE195           (        forth.asm):01173 (7)             jsr     HDMP4           Dump hex incarnation of the offset to Y
E611 3530             (        forth.asm):01174 (4+4)   @skoffs puls    x,y
E613 1CFB             (        forth.asm):01175 (2)             andcc   #^ZFLAG         Clear ZFLAG
E615 39               (        forth.asm):01176 (4)             rts
                      (        forth.asm):01177         * Point to the next word.
E616 1039             (        forth.asm):01178 (6)     @fdsnwd pulsw                   Retrieve current word header address
E618 104D             (        forth.asm):01179 (2)             tstd
E61A 27B1             (        forth.asm):01180 (3)             beq     @fdsnom         Just met the last dictionary entry
E61C 1F01             (        forth.asm):01181 (4)             tfr     d,x             Point to previous word header
E61E 10810C60         (        forth.asm):01182 (4)             cmpw    #WDICSPC        Are we transitioning from RAM to ROM?
E622 26B2             (        forth.asm):01183 (3)             bne     @fdslop         No singularity
E624 1086FE0A         (        forth.asm):01184 (4)             ldw     #THEEND         Won't be able to diagnose the ROM based @...
E628 20AC             (        forth.asm):01185 (3)             bra     @fdslop
                      (        forth.asm):01186         
                      (        forth.asm):01187         * Find the best possible symbolic approximation of Y and store it to the
                      (        forth.asm):01188         * buffer pointed to by X.
                      (        forth.asm):01189         * On entry:
                      (        forth.asm):01190         * - Y has a code address which is to be matched with a symbolic name + offset.
                      (        forth.asm):01191         * - X points to a buffer where the resolution is to be stored.
                      (        forth.asm):01192         * On return:
                      (        forth.asm):01193         * - Y is to be preserved.
                      (        forth.asm):01194         * - the output buffer will be updated with the best symbolic match (NUL term'd).
E62A 3430             (        forth.asm):01195 (4+4)   FINDSYM pshs    y,x
E62C 8D88             (        forth.asm):01196 (6)             bsr     FDCTSYM         Search the dictionary first (flexible match)
E62E 261B             (        forth.asm):01197 (3)             bne     @dctmfn         Dictionary match found
E630 8EE650           (        forth.asm):01198 (3)             ldx     #NDCTWKS        Search kernel symbols for an exact match
E633 EC81             (        forth.asm):01199 (5+2)   @fsmlop ldd     ,x++
E635 270B             (        forth.asm):01200 (3)             beq     @fsmfnd         End of well known symbols list?
E637 103720           (        forth.asm):01201 (4)             cmpr    y,d
E63A 2706             (        forth.asm):01202 (3)             beq     @fsmfnd
                      (        forth.asm):01203         * No well known symbol match. Skip string.
E63C A680             (        forth.asm):01204 (4+1)   @fsmskp lda     ,x+
E63E 26FC             (        forth.asm):01205 (3)             bne     @fsmskp
E640 20F1             (        forth.asm):01206 (3)             bra     @fsmlop
E642 10AEE4           (        forth.asm):01207 (6+0)   @fsmfnd ldy     ,s
E645 A680             (        forth.asm):01208 (4+1)   @fsmfn2 lda     ,x+
E647 A7A0             (        forth.asm):01209 (4+1)           sta     ,y+
E649 26FA             (        forth.asm):01210 (3)             bne     @fsmfn2
E64B 3262             (        forth.asm):01211 (4+1)   @dctmfn leas    2,s             Drop X from the system stack
E64D 3520             (        forth.asm):01212 (4+2)           puls    y
E64F 39               (        forth.asm):01213 (4)             rts
                      (        forth.asm):01214         
                      (        forth.asm):01215         * Non-dictionary well known symbols.
E650 E000             (        forth.asm):01216         NDCTWKS fdb     IODZHDL         Illegal opcode/Division by zero trap handler
E652 494F445A48444C00 (        forth.asm):01217                 fcn     'IODZHDL'
E65A E807             (        forth.asm):01218                 fdb     DPOPRA          Data stack underflow
E65C 44504F50524100   (        forth.asm):01219                 fcn     'DPOPRA'
E663 E7F8             (        forth.asm):01220                 fdb     DPSHRA          Data stack overflow
E665 44505348524100   (        forth.asm):01221                 fcn     'DPSHRA'
E66C E83F             (        forth.asm):01222                 fdb     RPOPRA          Return stack underflow
E66E 52504F50524100   (        forth.asm):01223                 fcn     'RPOPRA'
E675 E825             (        forth.asm):01224                 fdb     RPSHRA          Return stack overflow
E677 52505348524100   (        forth.asm):01225                 fcn     'RPSHRA'
E67E E76A             (        forth.asm):01226                 fdb     ERRHDLR         Error handler
E680 45525248444C5200 (        forth.asm):01227                 fcn     'ERRHDLR'
E688 E3E9             (        forth.asm):01228                 fdb     CKBASRA         Illegal BASE value
E68A 434B424153524100 (        forth.asm):01229                 fcn     'CKBASRA'
E692 E495             (        forth.asm):01230                 fdb     CKDPTRA         Not enough parameters supplied (transac. behav.)
E694 434B445054524100 (        forth.asm):01231                 fcn     'CKDPTRA'
E69C E48A             (        forth.asm):01232                 fdb     CHKNDPT         Check data stack minimum depth (transac. behav.)
E69E 43484B4E44505400 (        forth.asm):01233                 fcn     'CHKNDPT'
E6A6 E597             (        forth.asm):01234                 fdb     CMP2RA          Missing operand in any of U<, U>, <, >
E6A8 434D5032524100   (        forth.asm):01235                 fcn     'CMP2RA'
E6AF E5AB             (        forth.asm):01236                 fdb     ACQVMRA         Three operands missing in any of CMOVE,
                      (        forth.asm):01237         *                               CMOVE>, MOVE
E6B1 414351564D524100 (        forth.asm):01238                 fcn     'ACQVMRA'
E6B9 E0C8             (        forth.asm):01239                 fdb     MINTLRA         Main interpreter loop return address
E6BB 4D494E544C524100 (        forth.asm):01240                 fcn     'MINTLRA'
E6C3 E440             (        forth.asm):01241                 fdb     NUMCVRA         ? while converting a string to a number
E6C5 4E554D4356524100 (        forth.asm):01242                 fcn     'NUMCVRA'
E6CD E0E0             (        forth.asm):01243                 fdb     NMCVIRA         Numeric conversion error while interpreting
E6CF 4E4D435649524100 (        forth.asm):01244                 fcn     'NMCVIRA'
E6D7 E13C             (        forth.asm):01245                 fdb     NMCVCRA         Numeric conversion error while compiling
E6D9 4E4D435643524100 (        forth.asm):01246                 fcn     'NMCVCRA'
E6E1 E111             (        forth.asm):01247                 fdb     INTRPRA         Interpreter RA (after the execution of a word)
E6E3 494E545250524100 (        forth.asm):01248                 fcn     'INTRPRA'
E6EB E12A             (        forth.asm):01249                 fdb     COMPLRA         Compiler RA (after the execution of an IMD word)
E6ED 434F4D504C524100 (        forth.asm):01250                 fcn     'COMPLRA'
E6F5 E169             (        forth.asm):01251                 fdb     EMXASXT         Emit "JSR <X>" where X has an execution token
E6F7 454D584153585400 (        forth.asm):01252                 fcn     'EMXASXT'
E6FF E52D             (        forth.asm):01253                 fdb     LWMNRA          Missing word name in LOCWRT
E701 4C574D4E524100   (        forth.asm):01254                 fcn     'LWMNRA'
E708 E917             (        forth.asm):01255                 fdb     CFR1SRA         CF read one sector failed
E70A 4346523153524100 (        forth.asm):01256                 fcn     'CFR1SRA'
E712 E7EB             (        forth.asm):01257                 fdb     NPUSH           Not an error RA but useful to have as a symbol
E714 4E5055534800     (        forth.asm):01258                 fcn     'NPUSH'
E71A E808             (        forth.asm):01259                 fdb     RPUSH           Not an error RA but useful to have as a symbol
E71C 525055534800     (        forth.asm):01260                 fcn     'RPUSH'
E722 E7F9             (        forth.asm):01261                 fdb     NPOP            Not an error RA but useful to have as a symbol
E724 4E504F5000       (        forth.asm):01262                 fcn     'NPOP'
E729 E826             (        forth.asm):01263                 fdb     RPOP            Not an error RA but useful to have as a symbol
E72B 52504F5000       (        forth.asm):01264                 fcn     'RPOP'
E730 E2F3             (        forth.asm):01265                 fdb     PUTS            Not an error RA but useful to have as a symbol
E732 5055545300       (        forth.asm):01266                 fcn     'PUTS'
                      (        forth.asm):01267                 IFNE    DEBUG
                      (        forth.asm):01268                 fdb     LWAFRA          Assertion failure in LOCWRT
                      (        forth.asm):01269                 fcn     'LOCWRTAF'
                      (        forth.asm):01270                 ENDC
E737 0000             (        forth.asm):01271                 fdb     0               End of list
E739 3F3F3F00         (        forth.asm):01272                 fcn     '???'           Admit we have no clue!
                      (        forth.asm):01273                 ENDC                    SSDFEAT
                      (        forth.asm):01274         
                      (        forth.asm):01275         * Print ' (xxxx/yyyy)' where xxxx is the hex representation for BLK @ and
                      (        forth.asm):01276         * yyyy is the hex representation for >IN @. Y is preserved, X and D are not.
E73D 3420             (        forth.asm):01277 (4+2)   PRBLKIN pshs    y
E73F 108E039A         (        forth.asm):01278 (4)             ldy     #HEXBUF
E743 8620             (        forth.asm):01279 (2)             lda     #SP
E745 A7A0             (        forth.asm):01280 (4+1)           sta     ,y+
E747 8628             (        forth.asm):01281 (2)             lda     #'(
E749 A7A0             (        forth.asm):01282 (4+1)           sta     ,y+
E74B DC24             (        forth.asm):01283 (4)             ldd     UBLK
E74D BDE195           (        forth.asm):01284 (7)             jsr     HDMP4
E750 862F             (        forth.asm):01285 (2)             lda     #'/
E752 A7A0             (        forth.asm):01286 (4+1)           sta     ,y+
E754 DC22             (        forth.asm):01287 (4)             ldd     UTOIN
E756 BDE195           (        forth.asm):01288 (7)             jsr     HDMP4
E759 8629             (        forth.asm):01289 (2)             lda     #')
E75B A7A0             (        forth.asm):01290 (4+1)           sta     ,y+
E75D 6FA4             (        forth.asm):01291 (6+0)           clr     ,y
E75F 8E039A           (        forth.asm):01292 (3)             ldx     #HEXBUF
E762 BDE2F3           (        forth.asm):01293 (7)             jsr     PUTS
E765 3520             (        forth.asm):01294 (4+2)           puls    y
E767 7EE300           (        forth.asm):01295 (3)             jmp     PUTCR
                      (        forth.asm):01296         
                      (        forth.asm):01297         * Handle error condition. Error code is in B.
                      (        forth.asm):01298         * If B is 2 (undefined) X points to a string of length CURTOKL that has the
                      (        forth.asm):01299         * offending word.
E76A 10AEE4           (        forth.asm):01300 (6+0)   ERRHDLR ldy     ,s              Invoking return address
                      (        forth.asm):01301         * In case of a trap return, we enter here with Y set to #IODZHDL
E76D BDE300           (        forth.asm):01302 (7)     ERRHD1  jsr     PUTCR           GNU Forth does this in its exception handler
E770 C102             (        forth.asm):01303 (2)             cmpb    #2              Undefined symbol?
E772 2618             (        forth.asm):01304 (3)             bne     @perrm          No
E774 8627             (        forth.asm):01305 (2)             lda     #''             Begin quote
E776 BDE2E0           (        forth.asm):01306 (7)             jsr     PUTCH
E779 A680             (        forth.asm):01307 (4+1)   @prtsym lda     ,x+             Display undefined symbol name
E77B BDE2E0           (        forth.asm):01308 (7)             jsr     PUTCH
E77E 0A38             (        forth.asm):01309 (5)             dec     CURTOKL
E780 26F7             (        forth.asm):01310 (3)             bne     @prtsym
E782 8627             (        forth.asm):01311 (2)             lda     #''             End quote
E784 BDE2E0           (        forth.asm):01312 (7)             jsr     PUTCH
E787 8620             (        forth.asm):01313 (2)             lda     #SP             BL EMIT
E789 BDE2E0           (        forth.asm):01314 (7)             jsr     PUTCH
E78C 8EFECC           (        forth.asm):01315 (3)     @perrm  ldx     #ERRMTBL        Regular error handling
E78F 5D               (        forth.asm):01316 (1)     @nxterr tstb
E790 2637             (        forth.asm):01317 (3)             bne     @skerrm
E792 BDE2F3           (        forth.asm):01318 (7)             jsr     PUTS            Print error message
E795 8DA6             (        forth.asm):01319 (6)             bsr     PRBLKIN         Print BLK and >IN values (in hex)
E797 1F20             (        forth.asm):01320 (4)     @dmptos tfr     y,d             Dump top of the system stack contents
                      (        forth.asm):01321                 IFNE    SSDFEAT
E799 3406             (        forth.asm):01322 (4+2)           pshs    d
                      (        forth.asm):01323                 ENDC                    SSDFEAT
E79B 108E039A         (        forth.asm):01324 (4)             ldy     #HEXBUF
E79F BDE195           (        forth.asm):01325 (7)             jsr     HDMP4
E7A2 8620             (        forth.asm):01326 (2)             lda     #SP
E7A4 A7A0             (        forth.asm):01327 (4+1)           sta     ,y+
                      (        forth.asm):01328         * Symbolic stack dumps are configurable. In situations where the dictionary is
                      (        forth.asm):01329         * trashed, they may not be considered desirable. See SSDFEAT in constants.asm.
                      (        forth.asm):01330                 IFNE    SSDFEAT
E7A6 1F21             (        forth.asm):01331 (4)             tfr     y,x             X has the buffer pointer
E7A8 3520             (        forth.asm):01332 (4+2)           puls    y               Restore target symbol table entry
E7AA BDE62A           (        forth.asm):01333 (7)             jsr     FINDSYM
                      (        forth.asm):01334                 ELSE
                      (        forth.asm):01335                 clr     ,y              No symbolic information is to be printed
                      (        forth.asm):01336                 ENDC                    SSDFEAT
E7AD 8E039A           (        forth.asm):01337 (3)             ldx     #HEXBUF
E7B0 BDE2F3           (        forth.asm):01338 (7)             jsr     PUTS
E7B3 BDE300           (        forth.asm):01339 (7)             jsr     PUTCR
E7B6 108CE000         (        forth.asm):01340 (4)             cmpy    #IODZHDL
E7BA 2702             (        forth.asm):01341 (3)             beq     @wastrp         We're just back from the trap handler
E7BC 3262             (        forth.asm):01342 (4+1)           leas    2,s             Point to the next item on the stack
E7BE 118C8000         (        forth.asm):01343 (4)     @wastrp cmps    #RAMSTRT+RAMSIZE
E7C2 240C             (        forth.asm):01344 (3)             bhs     @errdon         We're done here
E7C4 10AEE4           (        forth.asm):01345 (6+0)           ldy     ,s
E7C7 20CE             (        forth.asm):01346 (3)             bra     @dmptos
E7C9 A680             (        forth.asm):01347 (4+1)   @skerrm lda     ,x+             Scan for the next error message
E7CB 26FC             (        forth.asm):01348 (3)             bne     @skerrm
E7CD 5A               (        forth.asm):01349 (1)             decb
E7CE 20BF             (        forth.asm):01350 (3)             bra     @nxterr
E7D0 10CE8000         (        forth.asm):01351 (4)     @errdon lds     #RAMSTRT+RAMSIZE
E7D4 9621             (        forth.asm):01352 (3)             lda     USTATE+1        We do ignore the upper byte
E7D6 270D             (        forth.asm):01353 (3)             beq     @erdon2         No pointers to restore if we were interpreting
                      (        forth.asm):01354         * Compiling: clear STATE, RSP and restore LSTWAD, DICEND.
E7D8 0F21             (        forth.asm):01355 (5)             clr     USTATE+1        Switch back to interpretation mode
E7DA BDEB84           (        forth.asm):01356                 RFXT    jsr,RCLR+7      XT for RCLR
E7DD 9E0C             (        forth.asm):01357 (4)             ldx     BDICEND         Restore essential pointers from backups
E7DF 9F08             (        forth.asm):01358 (4)             stx     DICEND          Restore HERE
E7E1 9E0A             (        forth.asm):01359 (4)             ldx     BLSTWAD
E7E3 9F06             (        forth.asm):01360 (4)             stx     LSTWAD          Restore LAST
E7E5 BDFB82           (        forth.asm):01361         @erdon2 RFXT    jsr,DECIMAL+10  Back to decimal BASE, for one's sanity's sake!
E7E8 7EE0B2           (        forth.asm):01362 (3)             jmp     INTERP
                      (        forth.asm):01363         
                      (        forth.asm):01364         * Push X to the data stack (boundary is checked).
E7EB 118301D6         (        forth.asm):01365 (4)     NPUSH   cmpu    #NSTTOP
E7EF 2303             (        forth.asm):01366 (3)             bls     @npush1         Anything <= than #NSTTOP indicates overflow
E7F1 3610             (        forth.asm):01367 (4+2)           pshu    x               Aka UCNPUSH
E7F3 39               (        forth.asm):01368 (4)             rts
E7F4 5F               (        forth.asm):01369 (1)     @npush1 clrb                    Data stack overflow
E7F5 BDE76A           (        forth.asm):01370 (7)             jsr     ERRHDLR         No return
     E7F8             (        forth.asm):01371         DPSHRA  equ     *
E7F8 12               (        forth.asm):01372 (1)             nop
                      (        forth.asm):01373         
                      (        forth.asm):01374         * Pull X from the data stack (boundary is checked).
                      (        forth.asm):01375         * D, W and Y are preserved.
E7F9 11830296         (        forth.asm):01376 (4)     NPOP    cmpu    #NSTBOT
E7FD 2403             (        forth.asm):01377 (3)             bhs     @npop1          Anything >= than #NSTBOT indicates underflow
E7FF 3710             (        forth.asm):01378 (4+2)           pulu    x
E801 39               (        forth.asm):01379 (4)             rts
E802 C601             (        forth.asm):01380 (2)     @npop1  ldb     #1              Data stack underflow
E804 BDE76A           (        forth.asm):01381 (7)             jsr     ERRHDLR         No return
     E807             (        forth.asm):01382         DPOPRA  equ     *
E807 12               (        forth.asm):01383 (1)             nop
                      (        forth.asm):01384         
                      (        forth.asm):01385         * Push X to the return stack (boundary is checked).
E808 962E             (        forth.asm):01386 (3)     RPUSH   lda     RDEPTH          RDEPTH is expressed in cells
E80A 8140             (        forth.asm):01387 (2)             cmpa    #RSTKSZ/2       But RSTKZ is expressed in bytes
E80C 2712             (        forth.asm):01388 (3)             beq     @rpush1
E80E 4C               (        forth.asm):01389 (1)             inca
E80F 972E             (        forth.asm):01390 (3)             sta     RDEPTH
E811 0F30             (        forth.asm):01391 (5)             clr     RTSREMV         Do not get rid of the final RTS
E813 1F27             (        forth.asm):01392 (4)             tfr     y,v
E815 109E00           (        forth.asm):01393 (5)             ldy     RSP
E818 AFA3             (        forth.asm):01394 (5+2)           stx     ,--y
E81A 109F00           (        forth.asm):01395 (5)             sty     RSP
E81D 1F72             (        forth.asm):01396 (4)             tfr     v,y
E81F 39               (        forth.asm):01397 (4)             rts
E820 C607             (        forth.asm):01398 (2)     @rpush1 ldb     #7              Return stack overflow
E822 BDE76A           (        forth.asm):01399 (7)             jsr     ERRHDLR         No return
     E825             (        forth.asm):01400         RPSHRA  equ     *
E825 12               (        forth.asm):01401 (1)             nop                     Meant to insulate RPUSH errors from RPOP EP
                      (        forth.asm):01402         
                      (        forth.asm):01403         * Pull X from the return stack (boundary is checked).
E826 962E             (        forth.asm):01404 (3)     RPOP    lda     RDEPTH          RDEPTH is expressed in cells
E828 2710             (        forth.asm):01405 (3)             beq     @rpop1
E82A 4A               (        forth.asm):01406 (1)             deca
E82B 972E             (        forth.asm):01407 (3)             sta     RDEPTH
E82D 1F27             (        forth.asm):01408 (4)             tfr     y,v
E82F 109E00           (        forth.asm):01409 (5)             ldy     RSP
E832 AEA1             (        forth.asm):01410 (5+2)           ldx     ,y++
E834 109F00           (        forth.asm):01411 (5)             sty     RSP
E837 1F72             (        forth.asm):01412 (4)             tfr     v,y
E839 39               (        forth.asm):01413 (4)             rts
E83A C608             (        forth.asm):01414 (2)     @rpop1  ldb     #8              Return stack underflow
E83C BDE76A           (        forth.asm):01415 (7)             jsr     ERRHDLR         No return
     E83F             (        forth.asm):01416         RPOPRA  equ     *
                      (        forth.asm):01417         
                      (        forth.asm):01418         * Derive the current input stream pointer from BLK and >IN.
                      (        forth.asm):01419         * The resulting address is returned in X. D is altered.
                      (        forth.asm):01420         * Both Y and W are preserved.
E83F 9E24             (        forth.asm):01421 (4)     BKIN2PT ldx     UBLK
E841 2716             (        forth.asm):01422 (3)             beq     @consol         We are switching back to the console
E843 1038             (        forth.asm):01423 (6)             pshsw
E845 3420             (        forth.asm):01424 (4+2)           pshs    y
E847 8DA2             (        forth.asm):01425 (6)             bsr     NPUSH           Make sure BLK @ is loaded
E849 BDEA51           (        forth.asm):01426                 RFXT    jsr,BLOCK+8     XT for BLOCK
E84C 3520             (        forth.asm):01427 (4+2)           puls    y
E84E 1039             (        forth.asm):01428 (6)             pulsw
E850 3710             (        forth.asm):01429                 UCNPOP                  Retrieve buffer addr to X
E852 9F1C             (        forth.asm):01430 (4)     @done   stx     BSBFADR         Update base buffer address
E854 DC22             (        forth.asm):01431 (4)             ldd     UTOIN
E856 308B             (        forth.asm):01432 (4+2)           leax    d,x             Add the current offset. Return the result via X
E858 39               (        forth.asm):01433 (4)             rts
E859 8E0316           (        forth.asm):01434 (3)     @consol ldx     #CMDBUF
E85C 20F4             (        forth.asm):01435 (3)             bra     @done
                      (        forth.asm):01436         
                      (        forth.asm):01437                 include rtc.asm
                      (          rtc.asm):00001                 IFNE RTCFEAT
                      (          rtc.asm):00002         
                      (          rtc.asm):00003         * FIRQ handler for the MC146818 RTC.
                      (          rtc.asm):00004         * In this particular context, only D and CC might be altered.
E85E                  (          rtc.asm):00005         RTCIHDL tst     RTCAVL          RTC chip detected?
                      (          rtc.asm):00006                 beq     @notick         Nope
                      (          rtc.asm):00007                 lda     #RTOREGC        Read RTCC. INTACK if any interrupt is pending.
                      (          rtc.asm):00008         * Two intructions inlined for RTREGRD in non-preemtible (interrupt) mode.
                      (          rtc.asm):00009                 sta     RTAS
                      (          rtc.asm):00010                 ldb     RTDS
                      (          rtc.asm):00011                 andb    #RTCPF          RTC periodic interrupt pending?
                      (          rtc.asm):00012                 beq     @notick         No, this ain't us ticking
                      (          rtc.asm):00013         * From "The 6309 Book" p. 3-69: "Note that INC does not effect the carry bit."
E85E                  (          rtc.asm):00014         @inctks ldd     TIKSLOW
                      (          rtc.asm):00015                 addd    #1
                      (          rtc.asm):00016                 std     TIKSLOW
                      (          rtc.asm):00017                 ldd     TIKSHI
                      (          rtc.asm):00018                 adcd    #0
                      (          rtc.asm):00019                 std     TIKSHI
E85E                  (          rtc.asm):00020         @notick rts
                      (          rtc.asm):00021         
                      (          rtc.asm):00022         * Read one byte from an internal's RTC register whose offset is in A upon
                      (          rtc.asm):00023         * routine entry. The register contents is returned in B.
                      (          rtc.asm):00024         * No other register is altered. FIRQ is temporarily disabled.
                      (          rtc.asm):00025         * Can be called from base or interrupt level.
E85E                  (          rtc.asm):00026         RTREGRD pshs    cc
                      (          rtc.asm):00027                 orcc    #FFLAG          Mask FIRQ
                      (          rtc.asm):00028                 sta     RTAS            Select target RTC register
                      (          rtc.asm):00029                 ldb     RTDS            Read RTC register contents
                      (          rtc.asm):00030                 puls    cc              Restore previous interrupt handling mode
                      (          rtc.asm):00031                 rts
                      (          rtc.asm):00032         
                      (          rtc.asm):00033         * Write one byte to an internal's RTC register whose offset is in A upon
                      (          rtc.asm):00034         * routine entry. The register byte output value is in B upon entry.
                      (          rtc.asm):00035         * FIRQ is temporarily masked. All regs contents are preserved.
                      (          rtc.asm):00036         * Can be called from base or interrupt level.
E85E                  (          rtc.asm):00037         RTREGWR pshs    cc
                      (          rtc.asm):00038                 orcc    #FFLAG          Mask FIRQ
                      (          rtc.asm):00039                 sta     RTAS            Select target RTC register
                      (          rtc.asm):00040                 stb     RTDS            Write RTC register contents
                      (          rtc.asm):00041                 puls    cc              Restore previous interrupt handling mode
                      (          rtc.asm):00042                 rts
                      (          rtc.asm):00043         
                      (          rtc.asm):00044         * Detect if an MC146818 chip is present.
E85E                  (          rtc.asm):00045         RTCINIT
                      (          rtc.asm):00046                 IFNE    DEBUG
                      (          rtc.asm):00047                 clrd
                      (          rtc.asm):00048                 std     TIKSHI          Initialize the TICKS double cell
                      (          rtc.asm):00049                 std     TIKSLOW
                      (          rtc.asm):00050                 clr     RTCAVL          Assume chip not present
                      (          rtc.asm):00051                 ENDC
                      (          rtc.asm):00052                 lda     #RTOPRES        Offset to the last NVRAM byte if dev is present
                      (          rtc.asm):00053                 bsr     RTREGRD         Read user memory byte. Value is returned in B   
                      (          rtc.asm):00054                 comb                    One's complement to B
                      (          rtc.asm):00055                 pshs    b
                      (          rtc.asm):00056                 bsr     RTREGWR         Write back one's complement to RTC
                      (          rtc.asm):00057                 bsr     RTREGRD         And read the last NVRAM byte back
                      (          rtc.asm):00058                 puls    a
                      (          rtc.asm):00059                 cmpr    b,a             Match?
                      (          rtc.asm):00060                 beq     @rtdtct         RTC chip detected all right!
                      (          rtc.asm):00061                 rts
                      (          rtc.asm):00062         * MC146818 RTC chip detected.
                      (          rtc.asm):00063         * On power up if register RTCA reads as 0, the SET bit in register RTCB will
                      (          rtc.asm):00064         * prevent any updates to the calendar (date/time). We do preserve the state of
                      (          rtc.asm):00065         * the SET bit, so as to indicate to the application software that the time and
                      (          rtc.asm):00066         * date have yet to be set manually.
E85E                  (          rtc.asm):00067         @rtdtct lda     #RTOREGA
                      (          rtc.asm):00068                 ldb     #(RTADV32|RTARS64)
                      (          rtc.asm):00069                 bsr     RTREGWR         Write B to the RTCA register
                      (          rtc.asm):00070                 lda     #RTOREGB
                      (          rtc.asm):00071                 bsr     RTREGRD
                      (          rtc.asm):00072                 andb    #RTBSET         Extract the SET bit
                      (          rtc.asm):00073                 orb     #(RTBPIE|RTBDM|RTB24)
                      (          rtc.asm):00074                 bsr     RTREGWR         Write B to the RTCB register
                      (          rtc.asm):00075                 inc     RTCAVL
                      (          rtc.asm):00076                 ldx     #RTPRESM        Real time clock detected message base address
                      (          rtc.asm):00077                 jmp     PUTS            Out to the console
                      (          rtc.asm):00078         
                      (          rtc.asm):00079                 ENDC                    RTCFEAT
                      (          rtc.asm):00080         
                      (        forth.asm):01438                 include storage.asm
                      (      storage.asm):00001         * Wait until the BSY bit is clear in the CF status register.
                      (      storage.asm):00002         * Upon return the BSY bit is guaranteed to be zero. Z will
                      (      storage.asm):00003         * be set in CC. This subroutine should not be called before
                      (      storage.asm):00004         * the CompactFlash presence has been assessed.
E85E B6C007           (      storage.asm):00005 (4)     CFWAIT  lda     CFSTATR
E861 8580             (      storage.asm):00006 (2)             bita    #CFBSYB
E863 26F9             (      storage.asm):00007 (3)             bne     CFWAIT
E865 39               (      storage.asm):00008 (4)             rts
                      (      storage.asm):00009         
                      (      storage.asm):00010         * Wait until the BSY bit is clear and the RDY bit is set.
E866 8DF6             (      storage.asm):00011 (6)     CFRDY   bsr     CFWAIT
E868 2703             (      storage.asm):00012 (3)             beq     @cfrdy0         Card not busy, proceed
E86A 1A04             (      storage.asm):00013 (2)             orcc    #ZFLAG
E86C 39               (      storage.asm):00014 (4)             rts
E86D 8E2000           (      storage.asm):00015 (3)     @cfrdy0 ldx     #$2000          Maximum poll count
E870 8640             (      storage.asm):00016 (2)             lda     #CFRDYB
E872 B5C007           (      storage.asm):00017 (4)     @cfrdy1 bita    CFSTATR
E875 2604             (      storage.asm):00018 (3)             bne     @cfrdy2         BSY bit is set, continue
E877 301F             (      storage.asm):00019 (4+1)           leax    -1,x            Card not ready, decrement poll count
E879 26F7             (      storage.asm):00020 (3)             bne     @cfrdy1         and try again
E87B 39               (      storage.asm):00021 (4)     @cfrdy2 rts                     Return with Z set: card not present
                      (      storage.asm):00022         *                               Return with Z clear: card is ready
                      (      storage.asm):00023         
                      (      storage.asm):00024         * Check for possible error condition.
                      (      storage.asm):00025         * Upon return either Z is set (A is zero) and no error occurred or
                      (      storage.asm):00026         * Z is clear and the CF error register contents is returned in A.
E87C 8DE0             (      storage.asm):00027 (6)     CFERRCK bsr     CFWAIT
E87E B6C007           (      storage.asm):00028 (4)             lda     CFSTATR
E881 8401             (      storage.asm):00029 (2)             anda    #CFERRB
E883 2703             (      storage.asm):00030 (3)             beq     @cfeck1
E885 B6C001           (      storage.asm):00031 (4)             lda     CFERROR         The error register contains error details
E888 39               (      storage.asm):00032 (4)     @cfeck1 rts
                      (      storage.asm):00033         
                      (      storage.asm):00034         * Issue CF command. The command code is passed through the B register.
                      (      storage.asm):00035         * Upon return:
                      (      storage.asm):00036         * - Z is set and everything is peachy.
                      (      storage.asm):00037         * - or Z is clear and the CF error register contents will be
                      (      storage.asm):00038         *   returned in A (and mirrored in the global CFERRCD variable).
                      (      storage.asm):00039         * B is preserved.
E889 8DDB             (      storage.asm):00040 (6)     CFCMDIS bsr     CFRDY
E88B 270A             (      storage.asm):00041 (3)             beq     @cfciab         Card not ready, abort
E88D D73E             (      storage.asm):00042 (3)             stb     CFCMMIR         Update CF command mirror
E88F F7C007           (      storage.asm):00043 (4)             stb     CFCOMDR         Send command to the CF card
E892 8DE8             (      storage.asm):00044 (6)             bsr     CFERRCK
E894 973F             (      storage.asm):00045 (3)     @cfcise sta     CFERRCD         CF command issue set error
                      (      storage.asm):00046                 IFNE    DEBUG
                      (      storage.asm):00047                 pshs    a,cc
                      (      storage.asm):00048                 beq     @cfciok
                      (      storage.asm):00049                 lda     #'!
                      (      storage.asm):00050                 jsr     PUTCH
E896                  (      storage.asm):00051         @cfcidi lda     CFCMMIR
                      (      storage.asm):00052                 ldx     #TBUFF
                      (      storage.asm):00053                 jsr     HDMP2
                      (      storage.asm):00054                 lda     #'/
                      (      storage.asm):00055                 sta     ,x+
                      (      storage.asm):00056                 lda     CFERRCD
                      (      storage.asm):00057                 jsr     HDMP2
                      (      storage.asm):00058                 ldx     #TBUFF
                      (      storage.asm):00059                 jsr     PUTS
                      (      storage.asm):00060                 jsr     PUTCR
                      (      storage.asm):00061                 bra     @cfcict         CF command issue continued
E896                  (      storage.asm):00062         @cfciok lda     #'#
                      (      storage.asm):00063                 jsr     PUTCH
                      (      storage.asm):00064                 bra     @cfcidi         CF command issue data indication
E896                  (      storage.asm):00065         @cfcict puls    cc,a
                      (      storage.asm):00066                 ENDC
E896 39               (      storage.asm):00067 (4)             rts
E897 86FF             (      storage.asm):00068 (2)     @cfciab lda     #$FF            Dummy error code
E899 20F9             (      storage.asm):00069 (3)             bra     @cfcise
                      (      storage.asm):00070         
                      (      storage.asm):00071         * Drive 0 select.
E89B 8DC9             (      storage.asm):00072 (6)     CFDRSEL bsr     CFRDY
E89D 86E0             (      storage.asm):00073 (2)             lda     #$E0            Drive 0, LBA mode
E89F B7C006           (      storage.asm):00074 (4)             sta     CFDRHDR
E8A2 20C2             (      storage.asm):00075 (3)             bra     CFRDY
                      (      storage.asm):00076         
                      (      storage.asm):00077         * Analyze the response to the CF "Identify Device" request.
E8A4 9E08             (      storage.asm):00078 (4)     CFANTHS ldx     DICEND
E8A6 308836           (      storage.asm):00079 (4+1)           leax    $36,x           Point to the "Model number" field
E8A9 3410             (      storage.asm):00080 (4+2)           pshs    x
E8AB 118614           (      storage.asm):00081 (3)             lde     #$14            Number of 16 bit words to go through
E8AE EC84             (      storage.asm):00082 (5+0)   @bytswp ldd     ,x
E8B0 1E98             (      storage.asm):00083 (5)             exg     b,a             Byte swapping
E8B2 ED81             (      storage.asm):00084 (5+2)           std     ,x++
E8B4 114A             (      storage.asm):00085 (2)             dece
E8B6 26F6             (      storage.asm):00086 (3)             bne     @bytswp
E8B8 6F84             (      storage.asm):00087 (6+0)           clr     ,x
E8BA 3510             (      storage.asm):00088 (4+2)           puls    x
E8BC BDE2F3           (      storage.asm):00089 (7)             jsr     PUTS            Decent CF cards indicate the capacity that way
E8BF 7EE300           (      storage.asm):00090 (3)             jmp     PUTCR           Up to $10000 blocks is 64 MB!
                      (      storage.asm):00091         
                      (      storage.asm):00092         * Initialize the CompactFlash subsystem.
                      (      storage.asm):00093         * This is run once at boot time. There is no hot plug support here.
E8C2 0F3D             (      storage.asm):00094 (5)     CFINIT  clr     CFCARDP         Clear card present,
                      (      storage.asm):00095                 IFEQ    DEBUG
E8C4 8DA0             (      storage.asm):00096 (6)             bsr     CFRDY
                      (      storage.asm):00097                 ELSE
                      (      storage.asm):00098                 jsr     CFRDY
                      (      storage.asm):00099                 ENDC
E8C6 2730             (      storage.asm):00100 (3)             beq     @cfinab         Card not ready, abort
E8C8 8DD1             (      storage.asm):00101 (6)             bsr     CFDRSEL         Drive 0 select
E8CA 8601             (      storage.asm):00102 (2)             lda     #1              Enable 8-bit data transfers
E8CC B7C001           (      storage.asm):00103 (4)             sta     CFFEATR
E8CF C6EF             (      storage.asm):00104 (2)             ldb     #CFSETFT        Issue a CF "Set Feature" command
                      (      storage.asm):00105                 IFEQ    DEBUG
E8D1 8DB6             (      storage.asm):00106 (6)             bsr     CFCMDIS         Not allowed to fail
                      (      storage.asm):00107                 ELSE
                      (      storage.asm):00108                 jsr     CFCMDIS         Not allowed to fail
                      (      storage.asm):00109                 ENDC
E8D3 2623             (      storage.asm):00110 (3)             bne     @cfinab         Abort with card present flag clear
E8D5 8601             (      storage.asm):00111 (2)             lda     #1              Request default PIO mode wo/ IORDY
E8D7 B7C002           (      storage.asm):00112 (4)             sta     CFSCNTR
E8DA 8603             (      storage.asm):00113 (2)             lda     #3              ATA-2 "Set Transfer mode"
E8DC B7C001           (      storage.asm):00114 (4)             sta     CFFEATR
                      (      storage.asm):00115                 IFEQ    DEBUG
E8DF 8DA8             (      storage.asm):00116 (6)             bsr     CFCMDIS         OK to fail
                      (      storage.asm):00117                 ELSE
                      (      storage.asm):00118                 jsr     CFCMDIS         OK to fail
                      (      storage.asm):00119                 ENDC
E8E1 8682             (      storage.asm):00120 (2)             lda     #$82            Disable write caching
E8E3 B7C001           (      storage.asm):00121 (4)             sta     CFFEATR
                      (      storage.asm):00122                 IFEQ    DEBUG
E8E6 8DA1             (      storage.asm):00123 (6)             bsr     CFCMDIS         B still has #CFSETF. Also OK to fail
                      (      storage.asm):00124                 ELSE
                      (      storage.asm):00125                 jsr     CFCMDIS         B still has #CFSETF. Also OK to fail
                      (      storage.asm):00126                 ENDC
E8E8 C6EC             (      storage.asm):00127 (2)             ldb     #CFIDDEV        Issue a CF "Identify Device" command
                      (      storage.asm):00128                 IFEQ    DEBUG
E8EA 8D9D             (      storage.asm):00129 (6)             bsr     CFCMDIS         Not allowed to fail
                      (      storage.asm):00130                 ELSE
                      (      storage.asm):00131                 jsr     CFCMDIS         Not allowed to fail
                      (      storage.asm):00132                 ENDC
E8EC 260A             (      storage.asm):00133 (3)             bne     @cfinab         Abort with card present flag clear
E8EE 9E08             (      storage.asm):00134 (4)             ldx     DICEND          Target address is HERE
E8F0 8D07             (      storage.asm):00135 (6)             bsr     CF1SRD          Read one sector
E8F2 8DB0             (      storage.asm):00136 (6)             bsr     CFANTHS         Analyze this!
E8F4 8601             (      storage.asm):00137 (2)             lda     #1
E8F6 973D             (      storage.asm):00138 (3)             sta     CFCARDP         Set the card present flag
E8F8 39               (      storage.asm):00139 (4)     @cfinab rts
                      (      storage.asm):00140         
                      (      storage.asm):00141         * Read one sector. The LBA parameters are assumed to have been set previously.
                      (      storage.asm):00142         * On input X points to the receiving (at least 512 bytes long) buffer.
E8F9 B6C007           (      storage.asm):00143 (4)     CF1SRD  lda     CFSTATR
E8FC 8508             (      storage.asm):00144 (2)             bita    #CFDRQB         Check for DRQ bit in the CF status register
E8FE 2712             (      storage.asm):00145 (3)             beq     IOERR
E900 10860200         (      storage.asm):00146 (4)             ldw     #CFSCSZ         Sector size is 512 bytes
E904 108EC000         (      storage.asm):00147 (4)             ldy     #CFDATAR        The data source address
E908 3401             (      storage.asm):00148 (4+1)           pshs    cc
E90A 1A50             (      storage.asm):00149 (2)             orcc    #(FFLAG|IFLAG)  Disable maskable interrupts
E90C 113B21           (      storage.asm):00150 (6+?)           tfm     y,x+
E90F 3501             (      storage.asm):00151 (4+1)           puls    cc              Restore previous interrupt handling mode
E911 39               (      storage.asm):00152 (4)             rts
E912 C611             (      storage.asm):00153 (2)     IOERR   ldb     #17
E914 BDE76A           (      storage.asm):00154 (7)             jsr     ERRHDLR         No return
E917 12               (      storage.asm):00155 (1)     CFR1SRA nop                     For symbolic stack dump debugging purposes
                      (      storage.asm):00156         
                      (      storage.asm):00157         * Write one sector. The LBA parameters are assumed to have been set previously.
                      (      storage.asm):00158         * On input X points to the sending (at least 512 bytes long) buffer.
E918 B6C007           (      storage.asm):00159 (4)     CF1SWR  lda     CFSTATR
E91B 8488             (      storage.asm):00160 (2)             anda    #CFBSYB|CFDRQB
E91D 8108             (      storage.asm):00161 (2)             cmpa    #CFDRQB         Check for BSY clear and DRQ set
E91F 26F7             (      storage.asm):00162 (3)             bne     CF1SWR
E921 10860200         (      storage.asm):00163 (4)             ldw     #CFSCSZ         Sector size is 512 bytes
E925 108EC000         (      storage.asm):00164 (4)             ldy     #CFDATAR        The data destination address
E929 113A12           (      storage.asm):00165 (6+?)           tfm     x+,y            Note: tfm is interruptible!
E92C 39               (      storage.asm):00166 (4)             rts
                      (      storage.asm):00167         
                      (      storage.asm):00168         * 1KB Forth block support primitives. Not dictionary code. More like BIOS ops.
                      (      storage.asm):00169         
                      (      storage.asm):00170         * One block IO preamble: select drive and LBA parameters. On input:
                      (      storage.asm):00171         * ,s has the return address
                      (      storage.asm):00172         * 2,s had the return address for the caller
                      (      storage.asm):00173         * 4,s has the target block number
E92D BDE85E           (      storage.asm):00174 (7)     CF1BPRE jsr     CFWAIT
E930 BDE89B           (      storage.asm):00175 (7)             jsr     CFDRSEL         Set drive and head parameters
E933 EC64             (      storage.asm):00176 (5+1)           ldd     4,s
E935 1048             (      storage.asm):00177 (2)             lsld                    Convert block number to sector number
E937 F7C003           (      storage.asm):00178 (4)             stb     CFSNUMR         LBA 7-0
E93A B7C004           (      storage.asm):00179 (4)             sta     CFCLOWR         LBA 15-8
E93D 1FA8             (      storage.asm):00180 (4)             tfr     cc,a
E93F 8401             (      storage.asm):00181 (2)             anda    #CFLAG
E941 B7C005           (      storage.asm):00182 (4)             sta     CFCHIGR         LBA 23-16 (carry to cylinder high)
E944 8602             (      storage.asm):00183 (2)             lda     #2              2 IDE sectors per Forth block
E946 B7C002           (      storage.asm):00184 (4)             sta     CFSCNTR
E949 39               (      storage.asm):00185 (4)             rts
                      (      storage.asm):00186         
                      (      storage.asm):00187         * Read one block from CF device. On input:
                      (      storage.asm):00188         * ,s has the return address
                      (      storage.asm):00189         * 2,s has the target block number
                      (      storage.asm):00190         * 4,s has the buffer base address
                      (      storage.asm):00191         * Upon return, Y will be preserved.
E94A 0D3D             (      storage.asm):00192 (4)     CF1BKRD tst     CFCARDP
E94C 2602             (      storage.asm):00193 (3)             bne     @ctnued
E94E 20C2             (      storage.asm):00194 (3)             bra     IOERR           Card not present--CF subsystem not initialized
E950 1F27             (      storage.asm):00195 (4)     @ctnued tfr     y,v
E952 8DD9             (      storage.asm):00196 (6)             bsr     CF1BPRE
E954 C620             (      storage.asm):00197 (2)             ldb     #CFRSCTS        Issue a "Read sectors" CF command
E956 BDE889           (      storage.asm):00198 (7)             jsr     CFCMDIS
E959 AE64             (      storage.asm):00199 (5+1)           ldx     4,s             Target buffer address to X
E95B 8D9C             (      storage.asm):00200 (6)             bsr     CF1SRD          Read the even sector from CF device
E95D BDE85E           (      storage.asm):00201 (7)             jsr     CFWAIT          Wait for next sector to become available
E960 8D97             (      storage.asm):00202 (6)             bsr     CF1SRD          and read the odd sector
E962 1F72             (      storage.asm):00203 (4)             tfr     v,y
E964 39               (      storage.asm):00204 (4)             rts
                      (      storage.asm):00205         
                      (      storage.asm):00206         * Write one block to CF device. Upon entry:
                      (      storage.asm):00207         * ,s has the return address
                      (      storage.asm):00208         * 2,s has the target block number
                      (      storage.asm):00209         * 4,s has the buffer base address
                      (      storage.asm):00210         * Upon return, Y will be preserved.
E965 0D3D             (      storage.asm):00211 (4)     CF1BKWR tst     CFCARDP
E967 2602             (      storage.asm):00212 (3)             bne     @ctnued
E969 20A7             (      storage.asm):00213 (3)             bra     IOERR           Card not present--CF subsystem not initialized
E96B 1F27             (      storage.asm):00214 (4)     @ctnued tfr     y,v
E96D 8DBE             (      storage.asm):00215 (6)             bsr     CF1BPRE
E96F C630             (      storage.asm):00216 (2)             ldb     #CFWSCTS        Issue a "Write sectors" CF command
E971 BDE889           (      storage.asm):00217 (7)             jsr     CFCMDIS
E974 AE64             (      storage.asm):00218 (5+1)           ldx     4,s             Source buffer address to X
E976 8DA0             (      storage.asm):00219 (6)             bsr     CF1SWR          Write the even sector to CF device
E978 BDE85E           (      storage.asm):00220 (7)             jsr     CFWAIT          Wait for next sector to become available
E97B 8D9B             (      storage.asm):00221 (6)             bsr     CF1SWR          and write the odd sector
E97D 1F72             (      storage.asm):00222 (4)             tfr     v,y
E97F 39               (      storage.asm):00223 (4)             rts
                      (      storage.asm):00224         
                      (        forth.asm):01439         
                      (        forth.asm):01440         ******************************************************************************
                      (        forth.asm):01441         * Dictionary begins. In the code below ANSI refers to ANSI-X3.215-1994
                      (        forth.asm):01442         * Draft 6 proposal (i.e. the free spec).
                      (        forth.asm):01443         
E980 0D               (        forth.asm):01444         EBUFS   fcb     13              79-STANDARD (REQ145)
E981 454D5054592D4255 (        forth.asm):01445                 fcc     'EMPTY-BUFFERS' ( -- )
     4646455253
E98E 0000             (        forth.asm):01446                 fdb     0               Last dictionary entry
E990 C7               (        forth.asm):01447                 RFCS
E991 7EE37B           (        forth.asm):01448 (3)             jmp     EMPTYB
                      (        forth.asm):01449         
E994 0C               (        forth.asm):01450         SAVBUF  fcb     12              79-STANDARD (REQ221)
E995 534156452D425546 (        forth.asm):01451                 fcc     'SAVE-BUFFERS'  ( -- )
     46455253
E9A1 E980             (        forth.asm):01452                 fdb     EBUFS
E9A3 C7               (        forth.asm):01453                 RFCS
E9A4 8E0440           (        forth.asm):01454 (3)             ldx     #BUF0
E9A7 8D03             (        forth.asm):01455 (6)             bsr     WBIFDRT
E9A9 8E0850           (        forth.asm):01456 (3)             ldx     #BUF1
                      (        forth.asm):01457         * Write buffer back to mass storage if marked as dirty.
                      (        forth.asm):01458         * The dirty bit is cleared but the buffer contents itself is not.
                      (        forth.asm):01459         * The buffer will continue to be marked as "in use."
                      (        forth.asm):01460         * On input X has has the base buffer address. Both D and X
                      (        forth.asm):01461         * are preserved. Y is not.
E9AC 3406             (        forth.asm):01462 (4+2)   WBIFDRT pshs    d
E9AE 3410             (        forth.asm):01463 (4+2)           pshs    x               Base buffer address (arg1 to CF1BKWR)
E9B0 8605             (        forth.asm):01464 (2)             lda     #BINUSE|BDIRTY
E9B2 A4890401         (        forth.asm):01465 (4+3)           anda    BOFLAGS,x
E9B6 8105             (        forth.asm):01466 (2)             cmpa    #BINUSE|BDIRTY
E9B8 2616             (        forth.asm):01467 (3)             bne     @alldon         Block not in use or in use but not dirty
E9BA AE890402         (        forth.asm):01468 (5+3)           ldx     BOBLKNO,x
E9BE 3410             (        forth.asm):01469 (4+2)           pshs    x               Block number (arg0 to CF1BKWR)
E9C0 8DA3             (        forth.asm):01470 (6)             bsr     CF1BKWR         Write data buffer to CF
E9C2 3262             (        forth.asm):01471 (4+1)           leas    2,s             Drop one cell from the system stack (blknum)
E9C4 AEE4             (        forth.asm):01472 (5+0)           ldx     ,s              Retrieve base buffer address
E9C6 30890401         (        forth.asm):01473 (4+3)           leax    BOFLAGS,x
E9CA A684             (        forth.asm):01474 (4+0)           lda     ,x              Acquire the 'flags' field
E9CC 84FB             (        forth.asm):01475 (2)             anda    #^BDIRTY        Clear the dirty bit
E9CE A784             (        forth.asm):01476 (4+0)           sta     ,x              and update the 'flags' field
E9D0 3510             (        forth.asm):01477 (4+2)   @alldon puls    x               Restore X
E9D2 3506             (        forth.asm):01478 (4+2)           puls    d               and D
E9D4 39               (        forth.asm):01479 (4)             rts
                      (        forth.asm):01480         
E9D5 05               (        forth.asm):01481         FLUSH   fcb     5               79-STANDARD (REF)
E9D6 464C555348       (        forth.asm):01482                 fcc     'FLUSH'         ( -- ) An alias for SAVE-BUFFERS
E9DB E994             (        forth.asm):01483                 fdb     SAVBUF
E9DD C7               (        forth.asm):01484                 RFCS
E9DE 20C4             (        forth.asm):01485                 RFXT    bra,SAVBUF+15   XT for SAVE-BUFFERS
                      (        forth.asm):01486         
E9E0 06               (        forth.asm):01487         UPDATE  fcb     6               79-STANDARD (REQ229)
E9E1 555044415445     (        forth.asm):01488                 fcc     'UPDATE'        ( -- )
E9E7 E9D5             (        forth.asm):01489                 fdb     FLUSH
E9E9 C7               (        forth.asm):01490                 RFCS
E9EA 9E1A             (        forth.asm):01491 (4)             ldx     MRUBUFA         Most recently used buffer base address
E9EC 30890401         (        forth.asm):01492 (4+3)           leax    BOFLAGS,x       Buffer 'flags' field's address to X
E9F0 A684             (        forth.asm):01493 (4+0)           lda     ,x              Buffer 'flags' field to A
E9F2 8501             (        forth.asm):01494 (2)             bita    #BINUSE         Is that buffer in use?
E9F4 2704             (        forth.asm):01495 (3)             beq     @upddon         No, we're done here
E9F6 8A04             (        forth.asm):01496 (2)             ora     #BDIRTY
E9F8 A784             (        forth.asm):01497 (4+0)           sta     ,x              Set the dirty bit
E9FA 39               (        forth.asm):01498 (4)     @upddon rts
                      (        forth.asm):01499         
E9FB 06               (        forth.asm):01500         BUFFER  fcb     6               79-STANDARD (REQ130)
E9FC 425546464552     (        forth.asm):01501                 fcc     'BUFFER'        ( ublkno -- addr )
EA02 E9E0             (        forth.asm):01502                 fdb     UPDATE
EA04 C7               (        forth.asm):01503                 RFCS
EA05 BDE7F9           (        forth.asm):01504 (7)             jsr     NPOP
EA08 1F12             (        forth.asm):01505 (4)             tfr     x,y             ublkno to Y
                      (        forth.asm):01506         * Block lookup.
EA0A 8E0440           (        forth.asm):01507 (3)             ldx     #BUF0           Base address of the first resident buffer
EA0D C602             (        forth.asm):01508 (2)             ldb     #2              Number of resident buffers
EA0F A6890401         (        forth.asm):01509 (4+3)   @blkup  lda     BOFLAGS,x       Buffer flags to A
EA13 8501             (        forth.asm):01510 (2)             bita    #BINUSE         Buffer in use?
EA15 270C             (        forth.asm):01511 (3)             beq     @nxtbuf         No
EA17 10AC890402       (        forth.asm):01512 (6+3)           cmpy    BOBLKNO,x       Buffer is in use. Block number match?
EA1C 2605             (        forth.asm):01513 (3)             bne     @nxtbuf         No
EA1E 9F1A             (        forth.asm):01514 (4)     @retba  stx     MRUBUFA         Block number match. Mark as the MRU buffer
EA20 3610             (        forth.asm):01515                 UCNPUSH                 and return its base address via the data stack
EA22 39               (        forth.asm):01516 (4)             rts
EA23 30890410         (        forth.asm):01517 (4+3)   @nxtbuf leax    BFDISP,x        Point to the next buffer
EA27 5A               (        forth.asm):01518 (1)             decb
EA28 26E5             (        forth.asm):01519 (3)             bne     @blkup
                      (        forth.asm):01520         * The block number in Y is not currently in use. Assign a buffer to it.
EA2A 8E0440           (        forth.asm):01521 (3)             ldx     #BUF0
EA2D 9C1A             (        forth.asm):01522 (4)             cmpx    MRUBUFA         Most recently used buffer address
EA2F 2603             (        forth.asm):01523 (3)             bne     @bselct
EA31 8E0850           (        forth.asm):01524 (3)             ldx     #BUF1
                      (        forth.asm):01525         * At this point X has the base address of the block we are interested in.
EA34 3420             (        forth.asm):01526 (4+2)   @bselct pshs    y               Backup the target block number
EA36 BDE9AC           (        forth.asm):01527 (7)             jsr     WBIFDRT         Write back if dirty. X and D are preserved
EA39 8601             (        forth.asm):01528 (2)             lda     #BINUSE
EA3B A7890401         (        forth.asm):01529 (4+3)           sta     BOFLAGS,x       Update the buffer's 'flags' field
EA3F 3520             (        forth.asm):01530 (4+2)           puls    y               Restore the target block number
EA41 10AF890402       (        forth.asm):01531 (6+3)           sty     BOBLKNO,x       and update the 'blknum' field as well
EA46 20D6             (        forth.asm):01532 (3)             bra     @retba
                      (        forth.asm):01533         
EA48 05               (        forth.asm):01534         BLOCK   fcb     5               79-STANDARD (REQ191)
EA49 424C4F434B       (        forth.asm):01535                 fcc     'BLOCK'         ( ublkno -- addr )
EA4E E9FB             (        forth.asm):01536                 fdb     BUFFER
EA50 C7               (        forth.asm):01537                 RFCS
EA51 8DB2             (        forth.asm):01538                 RFXT    bsr,BUFFER+9    XT for BUFFER
                      (        forth.asm):01539         * Upon return Y has has the block number.
EA53 3710             (        forth.asm):01540                 UCNPOP                  Buffer base address to X
EA55 3410             (        forth.asm):01541 (4+2)           pshs    x               Push base buffer address as Arg1 to CF1BKRD
EA57 A6890401         (        forth.asm):01542 (4+3)           lda     BOFLAGS,x       Retrieve buffer 'flags' field
                      (        forth.asm):01543                 IFNE    DEBUG
                      (        forth.asm):01544                 bita    #BINUSE
                      (        forth.asm):01545                 bne     @blkctd
                      (        forth.asm):01546                 lda     #10             Assertion failed
                      (        forth.asm):01547                 jsr     ERRHDLR         No return
                      (        forth.asm):01548                 ENDC                    DEBUG
EA5B 8402             (        forth.asm):01549 (2)     @blkctd anda    #BMAPPD         Has the block been read yet?
EA5D 2613             (        forth.asm):01550 (3)             bne     @bkmapd         Yes
EA5F 3420             (        forth.asm):01551 (4+2)           pshs    y               No. Push block number as arg0 to CF1BKRD
                      (        forth.asm):01552         * Map in the block from the CF device. System stack structure is as follows:
                      (        forth.asm):01553         * ,s has the target block number.
                      (        forth.asm):01554         * 2,s has the buffer base address.
EA61 BDE94A           (        forth.asm):01555 (7)             jsr     CF1BKRD
EA64 3262             (        forth.asm):01556 (4+1)           leas    2,s             Drop one cell from the system stack
                      (        forth.asm):01557         * Update the buffer's flags field.
EA66 AEE4             (        forth.asm):01558 (5+0)           ldx     ,s              Base buffer address
EA68 30890401         (        forth.asm):01559 (4+3)           leax    BOFLAGS,x       Buffer 'flags' field address to X
EA6C A684             (        forth.asm):01560 (4+0)           lda     ,x              Read buffer 'flags' field
EA6E 8A02             (        forth.asm):01561 (2)             ora     #BMAPPD
EA70 A784             (        forth.asm):01562 (4+0)           sta     ,x              and mark it as read
EA72 3510             (        forth.asm):01563 (4+2)   @bkmapd puls    x               Buffer base address to X
EA74 3610             (        forth.asm):01564                 UCNPUSH
EA76 39               (        forth.asm):01565 (4)             rts
                      (        forth.asm):01566         
EA77 03               (        forth.asm):01567         BLK     fcb     3
EA78 424C4B           (        forth.asm):01568                 fcc     'BLK'
EA7B EA48             (        forth.asm):01569                 fdb     BLOCK
EA7D C7               (        forth.asm):01570                 RFCS
EA7E 8E0124           (        forth.asm):01571 (3)             ldx     #UBLK
EA81 7EE7EB           (        forth.asm):01572 (3)             jmp     NPUSH
                      (        forth.asm):01573         
EA84 03               (        forth.asm):01574         TOIN    fcb     3
EA85 3E494E           (        forth.asm):01575                 fcc     '>IN'
EA88 EA77             (        forth.asm):01576                 fdb     BLK
EA8A C7               (        forth.asm):01577                 RFCS
EA8B 8E0122           (        forth.asm):01578 (3)             ldx     #UTOIN
EA8E 7EE7EB           (        forth.asm):01579 (3)             jmp     NPUSH
                      (        forth.asm):01580         
EA91 03               (        forth.asm):01581         SCR     fcb     3
EA92 534352           (        forth.asm):01582                 fcc     'SCR'
EA95 EA84             (        forth.asm):01583                 fdb     TOIN
EA97 C7               (        forth.asm):01584                 RFCS
EA98 8E0126           (        forth.asm):01585 (3)             ldx     #USCR
EA9B 7EE7EB           (        forth.asm):01586 (3)             jmp     NPUSH
                      (        forth.asm):01587         
                      (        forth.asm):01588         * Functionally: : LINE 6 SHIFT SCR @ BLOCK + ;
EA9E 04               (        forth.asm):01589         LINE    fcb     4               79-STANDARD (REF)
EA9F 4C494E45         (        forth.asm):01590                 fcc     'LINE'
EAA3 EA91             (        forth.asm):01591                 fdb     SCR
EAA5 C7               (        forth.asm):01592                 RFCS
EAA6 8E0006           (        forth.asm):01593 (3)             ldx     #6
EAA9 BDE7EB           (        forth.asm):01594 (7)             jsr     NPUSH
EAAC BDF95B           (        forth.asm):01595                 RFXT    jsr,SHIFT+8     XT for SHIFT
EAAF 9E26             (        forth.asm):01596 (4)             ldx     USCR
EAB1 BDE7EB           (        forth.asm):01597 (7)             jsr     NPUSH
EAB4 8D9B             (        forth.asm):01598                 RFXT    bsr,BLOCK+8     XT for BLOCK
EAB6 7EF8D3           (        forth.asm):01599                 RFXT    jmp,PLUS+4      XT for +
                      (        forth.asm):01600         
                      (        forth.asm):01601         * Functionally:
                      (        forth.asm):01602         * : INDEX 1+ SWAP DO
                      (        forth.asm):01603         *     CR   I SCR !
                      (        forth.asm):01604         *     0 LINE 64 TYPE
                      (        forth.asm):01605         *   LOOP ;
EAB9 05               (        forth.asm):01606         INDEX   fcb     5               79-STANDARD (REF)
EABA 494E444558       (        forth.asm):01607                 fcc     'INDEX'         ( n1 n2 -- )
EABF EA9E             (        forth.asm):01608                 fdb     LINE
EAC1 C7               (        forth.asm):01609                 RFCS
EAC2 BDE7F9           (        forth.asm):01610 (7)             jsr     NPOP            N2 to X
EAC5 3001             (        forth.asm):01611 (4+1)           leax    1,x             1+
EAC7 1F12             (        forth.asm):01612 (4)             tfr     x,y             Y has the limit (not reached)
EAC9 BDE7F9           (        forth.asm):01613 (7)             jsr     NPOP            X has the index (N1)
EACC BDE300           (        forth.asm):01614 (7)     @indlop jsr     PUTCR           CR
EACF 9F26             (        forth.asm):01615 (4)             stx     USCR            I SCR !
EAD1 3430             (        forth.asm):01616 (4+4)           pshs    y,x
EAD3 1FC1             (        forth.asm):01617 (4)             tfr     0,x
EAD5 BDE7EB           (        forth.asm):01618 (7)             jsr     NPUSH
EAD8 8DCC             (        forth.asm):01619                 RFXT    bsr,LINE+7      XT for LINE
EADA 8E0040           (        forth.asm):01620 (3)             ldx     #64
EADD BDE7EB           (        forth.asm):01621 (7)             jsr     NPUSH
EAE0 BDF737           (        forth.asm):01622                 RFXT    jsr,TYPE+7      XT for TYPE
EAE3 3530             (        forth.asm):01623 (4+4)           puls    x,y             Restore loop parameters
EAE5 3001             (        forth.asm):01624 (4+1)           leax    1,x
EAE7 103712           (        forth.asm):01625 (4)             cmpr    x,y
EAEA 26E0             (        forth.asm):01626 (3)             bne     @indlop
EAEC 39               (        forth.asm):01627 (4)             rts
                      (        forth.asm):01628         
EAED 05               (        forth.asm):01629         TICKS   fcb     5               Non-standard
EAEE 5449434B53       (        forth.asm):01630                 fcc     'TICKS'         ( -- tickslow tickshigh )
EAF3 EAB9             (        forth.asm):01631                 fdb     INDEX
EAF5 C7               (        forth.asm):01632                 RFCS
                      (        forth.asm):01633                 IFNE    RTCFEAT
                      (        forth.asm):01634                 pshs    cc
                      (        forth.asm):01635                 orcc    #FFLAG          Mask FIRQ while reading the double cell
                      (        forth.asm):01636                 ldx     TIKSLOW
                      (        forth.asm):01637                 ldy     TIKSHI
                      (        forth.asm):01638                 puls    cc              Restore the previous interrupt handling mode
                      (        forth.asm):01639                 jsr     NPUSH
                      (        forth.asm):01640                 tfr     y,x
                      (        forth.asm):01641                 ELSE
EAF6 1FC1             (        forth.asm):01642 (4)             tfr     0,x
EAF8 BDE7EB           (        forth.asm):01643 (7)             jsr     NPUSH
                      (        forth.asm):01644                 ENDC                    RTCFEAT
EAFB 7EE7EB           (        forth.asm):01645 (3)             jmp     NPUSH
                      (        forth.asm):01646         
EAFE 04               (        forth.asm):01647         RTCFTCH fcb     4               Non-standard
EAFF 52544340         (        forth.asm):01648                 fcc     'RTC@'          ( regoff -- byteval )
EB03 EAED             (        forth.asm):01649                 fdb     TICKS
EB05 C7               (        forth.asm):01650                 RFCS
                      (        forth.asm):01651                 IFNE    RTCFEAT
                      (        forth.asm):01652                 tst     RTCAVL
                      (        forth.asm):01653                 beq     RTNOCON
                      (        forth.asm):01654         * An MC146818 RTC is present. Let's get down to business.
                      (        forth.asm):01655                 jsr     NPOP            REGOFF to X
                      (        forth.asm):01656                 tfr     x,d
                      (        forth.asm):01657                 tfr     b,a
                      (        forth.asm):01658                 jsr     RTREGRD
                      (        forth.asm):01659                 clra                    BYTEVAL to D
                      (        forth.asm):01660                 pshu    d               Unchecked NPUSH of D
                      (        forth.asm):01661                 rts
EB06                  (        forth.asm):01662         RTNOCON ldb     #17             RTC not detected on bootup -> I/O error
                      (        forth.asm):01663                 jsr     ERRHDLR         No return
                      (        forth.asm):01664                 ELSE
EB06 BDFC2B           (        forth.asm):01665                 RFXT    jsr,DROP+7      XT for DROP
EB09 7EF937           (        forth.asm):01666                 RFXT    jmp,ZEROL+4     XT for 0
                      (        forth.asm):01667                 ENDC                    RTCFEAT
                      (        forth.asm):01668         
EB0C 04               (        forth.asm):01669         RTCSTOR fcb     4               Non-standard
EB0D 52544321         (        forth.asm):01670                 fcc     'RTC!'          ( byteval regoff -- )
EB11 EAFE             (        forth.asm):01671                 fdb     RTCFTCH
EB13 C7               (        forth.asm):01672                 RFCS
                      (        forth.asm):01673                 IFNE    RTCFEAT
                      (        forth.asm):01674                 tst     RTCAVL
                      (        forth.asm):01675                 beq     RTNOCON
                      (        forth.asm):01676                 jsr     MIN2PST         At least two cells need to be stacked up
                      (        forth.asm):01677                 lda     1,u             REGOFF to A
                      (        forth.asm):01678                 ldb     3,u             BYTEVAL to B
                      (        forth.asm):01679                 leau    4,u             Drop two cells from the data stack
                      (        forth.asm):01680                 jmp     RTREGWR
                      (        forth.asm):01681                 ELSE
EB14 7EF49F           (        forth.asm):01682                 RFXT    jmp,TWODROP+8   XT for 2 DROP
                      (        forth.asm):01683                 ENDC                    RTCFEAT
                      (        forth.asm):01684         
EB17 04               (        forth.asm):01685         LIST    fcb     4               79-STANDARD (REQ109)
EB18 4C495354         (        forth.asm):01686                 fcc     'LIST'          ( ublkno -- )
EB1C EB0C             (        forth.asm):01687                 fdb     RTCSTOR
EB1E C7               (        forth.asm):01688                 RFCS
EB1F 0D3D             (        forth.asm):01689 (4)             tst     CFCARDP
EB21 2605             (        forth.asm):01690 (3)             bne     @lstpro
EB23 C611             (        forth.asm):01691 (2)             ldb     #17             IO error
EB25 BDE76A           (        forth.asm):01692 (7)             jsr     ERRHDLR         No return
EB28 BDFC1B           (        forth.asm):01693         @lstpro RFXT    jsr,DUP+6       XT for DUP
EB2B BDEA51           (        forth.asm):01694                 RFXT    jsr,BLOCK+8     XT for BLOCK
                      (        forth.asm):01695         * TOS now has the base buffer address.
EB2E BDE7F9           (        forth.asm):01696 (7)             jsr     NPOP
EB31 1F12             (        forth.asm):01697 (4)             tfr     x,y             Base buffer address to Y
EB33 BDE7F9           (        forth.asm):01698 (7)             jsr     NPOP            ublkno to X
EB36 9F26             (        forth.asm):01699 (4)             stx     USCR            Update SCR's value
EB38 C610             (        forth.asm):01700 (2)             ldb     #16             16 lines to go
EB3A 3404             (        forth.asm):01701 (4+1)   @lstlop pshs    b
EB3C BDE300           (        forth.asm):01702 (7)             jsr     PUTCR
EB3F 1F21             (        forth.asm):01703 (4)             tfr     y,x
EB41 BDE7EB           (        forth.asm):01704 (7)             jsr     NPUSH           Start address for TYPE
EB44 8E0040           (        forth.asm):01705 (3)             ldx     #64
EB47 BDE7EB           (        forth.asm):01706 (7)             jsr     NPUSH           Byte count for TYPE
EB4A 103012           (        forth.asm):01707 (4)             addr    x,y
EB4D BDF737           (        forth.asm):01708                 RFXT    jsr,TYPE+7      XT for TYPE
EB50 3504             (        forth.asm):01709 (4+1)           puls    b
EB52 5A               (        forth.asm):01710 (1)             decb
EB53 26E5             (        forth.asm):01711 (3)             bne     @lstlop
EB55 39               (        forth.asm):01712 (4)             rts
                      (        forth.asm):01713         
                      (        forth.asm):01714         * Convert a single cell to a double. Non-transactional.
EB56 03               (        forth.asm):01715         STOD    fcb     3               ANSI Core ( n -- d )
EB57 533E44           (        forth.asm):01716                 fcc     'S>D'
EB5A EB17             (        forth.asm):01717                 fdb     LIST
EB5C C7               (        forth.asm):01718                 RFCS
EB5D BDE7F9           (        forth.asm):01719 (7)             jsr     NPOP            N to X
EB60 3610             (        forth.asm):01720                 UCNPUSH                 Push back low order cell
EB62 104F             (        forth.asm):01721 (2)             clrd                    High order cell: default to N >= 0
EB64 1E01             (        forth.asm):01722 (5)             exg     d,x
EB66 4D               (        forth.asm):01723 (1)             tsta
EB67 102AFC80         (        forth.asm):01724 (5)             lbpl    NPUSH
EB6B 301F             (        forth.asm):01725 (4+1)           leax    -1,x            N is < 0. Sign extension is required. -1 to X
EB6D 7EE7EB           (        forth.asm):01726 (3)             jmp     NPUSH
                      (        forth.asm):01727         
EB70 04               (        forth.asm):01728         NCLR    fcb     4               Non-standard
EB71 4E434C52         (        forth.asm):01729                 fcc     'NCLR'          Clear the data (normal) stack
EB75 EB56             (        forth.asm):01730                 fdb     STOD
EB77 C7               (        forth.asm):01731                 RFCS
EB78 CE0296           (        forth.asm):01732 (3)             ldu     #NSTBOT
EB7B 39               (        forth.asm):01733 (4)             rts
                      (        forth.asm):01734         
EB7C 04               (        forth.asm):01735         RCLR    fcb     4               Non-standard
EB7D 52434C52         (        forth.asm):01736                 fcc     'RCLR'          Clear the return stack
EB81 EB70             (        forth.asm):01737                 fdb     NCLR
EB83 C7               (        forth.asm):01738                 RFCS
EB84 8E0316           (        forth.asm):01739 (3)             ldx     #RSTBOT
EB87 9F00             (        forth.asm):01740 (4)             stx     RSP
EB89 0F2E             (        forth.asm):01741 (5)             clr     RDEPTH
EB8B 39               (        forth.asm):01742 (4)             rts
                      (        forth.asm):01743         
EB8C 05               (        forth.asm):01744         DEPTH   fcb     5               79-STANDARD (REQ238)
EB8D 4445505448       (        forth.asm):01745                 fcc     'DEPTH'
EB92 EB7C             (        forth.asm):01746                 fdb     RCLR
EB94 C7               (        forth.asm):01747                 RFCS
EB95 CC0296           (        forth.asm):01748 (3)             ldd     #NSTBOT         Bottom data stack address
EB98 103230           (        forth.asm):01749 (4)             subr    u,d             D has the current value of the data stack ptr
EB9B 1044             (        forth.asm):01750 (2)             lsrd                    divided by 2
EB9D 1F01             (        forth.asm):01751 (4)             tfr     d,x
EB9F 7EE7EB           (        forth.asm):01752 (3)             jmp     NPUSH
                      (        forth.asm):01753         
EBA2 06               (        forth.asm):01754         CREATE  fcb     6               79-STANDARD (REQ239)
EBA3 435245415445     (        forth.asm):01755                 fcc     'CREATE'
EBA9 EB8C             (        forth.asm):01756                 fdb     DEPTH
EBAB C7               (        forth.asm):01757                 RFCS
EBAC BDE517           (        forth.asm):01758 (7)             jsr     LOCWRT          Code entry point returned to Y
EBAF 868E             (        forth.asm):01759 (2)             lda     #LDXOPC         LDX immediate
EBB1 A7A0             (        forth.asm):01760 (4+1)           sta     ,y+
EBB3 1F21             (        forth.asm):01761 (4)             tfr     y,x
EBB5 3008             (        forth.asm):01762 (4+1)           leax    8,x
EBB7 AFA1             (        forth.asm):01763 (5+2)           stx     ,y++
EBB9 86BD             (        forth.asm):01764 (2)             lda     #JSROPC         JSR extended
EBBB BDE58C           (        forth.asm):01765 (7)             jsr     VARCON1         Compile JSR NPUSH
EBBE 8639             (        forth.asm):01766 (2)             lda     #RTSOPC         RTS inherent
EBC0 A7A0             (        forth.asm):01767 (4+1)           sta     ,y+
EBC2 3122             (        forth.asm):01768 (4+1)           leay    2,y             Reserve room for a possible DOES> clause
EBC4 109F08           (        forth.asm):01769 (5)     CREAT1  sty     DICEND
EBC7 9E0C             (        forth.asm):01770 (4)             ldx     BDICEND         This is set by LOCWRT (was IY)
EBC9 9F06             (        forth.asm):01771 (4)             stx     LSTWAD
EBCB 39               (        forth.asm):01772 (4)             rts
                      (        forth.asm):01773         
EBCC C5               (        forth.asm):01774         DOES    fcb     $C5             79-STANDARD (REQ168)
EBCD 444F45533E       (        forth.asm):01775                 fcc     'DOES>'
EBD2 EBA2             (        forth.asm):01776                 fdb     CREATE
EBD4 C7               (        forth.asm):01777                 RFCS
EBD5 8EEBDB           (        forth.asm):01778 (3)             ldx     #DOESEX         JSR #DOESEX is compiled (no actual return)
EBD8 7EE169           (        forth.asm):01779 (3)             jmp     EMXASXT         Set as action component
                      (        forth.asm):01780         
EBDB 9E06             (        forth.asm):01781 (4)     DOESEX  ldx     LSTWAD          Header of the last dictionary entry
EBDD E680             (        forth.asm):01782 (4+1)           ldb     ,x+
EBDF C41F             (        forth.asm):01783 (2)             andb    #WRLNMSK        Extract word length
EBE1 3A               (        forth.asm):01784 (1)             abx
                      (        forth.asm):01785                 IFNE    RELFEAT
EBE2 3009             (        forth.asm):01786 (4+1)           leax    9,x             2 bytes/backlink, 1/cksum, 6 bytes code offset
                      (        forth.asm):01787                 ELSE
                      (        forth.asm):01788                 leax    8,x             2 bytes/backlink, 6 bytes code offset
                      (        forth.asm):01789                 ENDC                    RELFEAT
EBE4 A684             (        forth.asm):01790 (4+0)           lda     ,x
EBE6 8139             (        forth.asm):01791 (2)             cmpa    #RTSOPC         RTS inherent
EBE8 2705             (        forth.asm):01792 (3)             beq     @dosex1
EBEA C60E             (        forth.asm):01793 (2)             ldb     #14             No matching CREATE
EBEC BDE76A           (        forth.asm):01794 (7)             jsr     ERRHDLR         No return
EBEF 867E             (        forth.asm):01795 (2)     @dosex1 lda     #JMPOPC         JMP extended
EBF1 A780             (        forth.asm):01796 (4+1)           sta     ,x+             Overwrite RTS opcode
EBF3 3520             (        forth.asm):01797 (4+2)           puls    y
EBF5 10AF84           (        forth.asm):01798 (6+0)           sty     ,x
EBF8 39               (        forth.asm):01799 (4)             rts
                      (        forth.asm):01800         
EBF9 87               (        forth.asm):01801         LITERAL fcb     $87             79-STANDARD (REQ215)
EBFA 4C49544552414C   (        forth.asm):01802                 fcc     'LITERAL'
EC01 EBCC             (        forth.asm):01803                 fdb     DOES
EC03 C7               (        forth.asm):01804                 RFCS
EC04 BDE7F9           (        forth.asm):01805 (7)             jsr     NPOP
EC07 0D21             (        forth.asm):01806 (4)             tst     USTATE+1
EC09 2601             (        forth.asm):01807 (3)             bne     @comp
EC0B 39               (        forth.asm):01808 (4)             rts                     The standard defines no semantics in interp mode
EC0C 109E08           (        forth.asm):01809 (5)     @comp   ldy     DICEND
EC0F 868E             (        forth.asm):01810 (2)             lda     #LDXOPC         LDX immediate
EC11 BDE58F           (        forth.asm):01811 (7)             jsr     VARCON2         Compile LDX #X
EC14 109F08           (        forth.asm):01812 (5)             sty     DICEND          Update HERE
EC17 8EE7EB           (        forth.asm):01813 (3)             ldx     #NPUSH
EC1A 7EE169           (        forth.asm):01814 (3)             jmp     EMXASXT         Set NPUSH as action component
                      (        forth.asm):01815         
                      (        forth.asm):01816         * Functionally: : CONSTANT CREATE , DOES> @ ;
                      (        forth.asm):01817         * The following code produces more compact code.
EC1D 08               (        forth.asm):01818         CONS    fcb     8               79-STANDARD (REQ185)
EC1E 434F4E5354414E54 (        forth.asm):01819                 fcc     'CONSTANT'
EC26 EBF9             (        forth.asm):01820                 fdb     LITERAL
EC28 C7               (        forth.asm):01821                 RFCS
EC29 BDE7F9           (        forth.asm):01822 (7)             jsr     NPOP
EC2C 1F16             (        forth.asm):01823 (4)             tfr     x,w
EC2E BDE517           (        forth.asm):01824 (7)             jsr     LOCWRT          Create dictionary entry
EC31 1F61             (        forth.asm):01825 (4)             tfr     w,x
EC33 868E             (        forth.asm):01826 (2)             lda     #LDXOPC         ldx immediate
EC35 BDE58F           (        forth.asm):01827 (7)             jsr     VARCON2         Compile LDX #CSTVAL
EC38 BDE58A           (        forth.asm):01828 (7)             jsr     VARCON          Compile JMP NPUSH
                      (        forth.asm):01829                 IFNE    RELFEAT
EC3B 8D87             (        forth.asm):01830 (6)             bsr     CREAT1
EC3D 2059             (        forth.asm):01831                 RFXT    bra,MONITOR+10  XT for MONITOR
                      (        forth.asm):01832                 ELSE
                      (        forth.asm):01833                 bra     CREAT1
                      (        forth.asm):01834                 ENDC                    RELFEAT
                      (        forth.asm):01835         
                      (        forth.asm):01836         * Functionally: : VARIABLE CREATE 2 ALLOT ;
                      (        forth.asm):01837         * However we can save three bytes per instance with the following code.
EC3F 08               (        forth.asm):01838         VARI    fcb     8               79-STANDARD (REQ227)
EC40 5641524941424C45 (        forth.asm):01839                 fcc     'VARIABLE'
EC48 EC1D             (        forth.asm):01840                 fdb     CONS
EC4A C7               (        forth.asm):01841                 RFCS
EC4B BDE517           (        forth.asm):01842 (7)             jsr     LOCWRT
EC4E 868E             (        forth.asm):01843 (2)             lda     #LDXOPC         ldx immediate
EC50 A7A0             (        forth.asm):01844 (4+1)           sta     ,y+
EC52 1F26             (        forth.asm):01845 (4)             tfr     y,w             Preserve Y (HERE)
EC54 3125             (        forth.asm):01846 (4+1)           leay    5,y             Relative variable address
EC56 1F21             (        forth.asm):01847 (4)             tfr     y,x
EC58 1F62             (        forth.asm):01848 (4)             tfr     w,y             Restore Y (HERE)
EC5A AFA1             (        forth.asm):01849 (5+2)           stx     ,y++            Address field for LDX #VARADDR
EC5C BDE58A           (        forth.asm):01850 (7)             jsr     VARCON          Compile JMP NPUSH
EC5F 3122             (        forth.asm):01851 (4+1)           leay    2,y             2 ALLOT
EC61 7EEBC4           (        forth.asm):01852 (3)             jmp     CREAT1
                      (        forth.asm):01853         
EC64 09               (        forth.asm):01854         IMMED   fcb     9               79-STANDARD (REQ103)
EC65 494D4D4544494154 (        forth.asm):01855                 fcc     'IMMEDIATE'
     45
EC6E EC3F             (        forth.asm):01856                 fdb     VARI
EC70 C7               (        forth.asm):01857                 RFCS
EC71 C680             (        forth.asm):01858 (2)             ldb     #IMDFLM
EC73 9E06             (        forth.asm):01859 (4)     IMMED1  ldx     LSTWAD
EC75 A684             (        forth.asm):01860 (4+0)           lda     ,x
EC77 103598           (        forth.asm):01861 (4)             orr     b,a
EC7A A784             (        forth.asm):01862 (4+0)           sta     ,x
EC7C 39               (        forth.asm):01863 (4)             rts
                      (        forth.asm):01864         
EC7D 08               (        forth.asm):01865         RSTRCT  fcb     8               Non-standard (GNU Forth)
EC7E 5245535452494354 (        forth.asm):01866                 fcc     'RESTRICT'      Make word available in compilation mode only
EC86 EC64             (        forth.asm):01867                 fdb     IMMED
EC88 C7               (        forth.asm):01868                 RFCS
EC89 C640             (        forth.asm):01869 (2)             ldb     #DEFFLM
EC8B 20E6             (        forth.asm):01870 (3)             bra     IMMED1
                      (        forth.asm):01871         
                      (        forth.asm):01872         * This non-standard word enables checkum monitoring by ICHECK for the
                      (        forth.asm):01873         * last defined word in the dictionary. : words are monitored by default
                      (        forth.asm):01874         * and so are constants. CREATEd words require an explicit invokation of
                      (        forth.asm):01875         * MONITOR if they are to be checked for integrity.
EC8D 07               (        forth.asm):01876         MONITOR fcb     7
EC8E 4D4F4E49544F52   (        forth.asm):01877                 fcc     'MONITOR'       ( -- )
EC95 EC7D             (        forth.asm):01878                 fdb     RSTRCT
EC97 C7               (        forth.asm):01879                 RFCS
                      (        forth.asm):01880                 IFNE    RELFEAT
EC98 9E06             (        forth.asm):01881 (4)             ldx     LSTWAD          Last word header address
EC9A A684             (        forth.asm):01882 (4+0)           lda     ,x
EC9C 8A20             (        forth.asm):01883 (2)             ora     #MONFLM         Set the monitored flag in the attribute field
EC9E A784             (        forth.asm):01884 (4+0)           sta     ,x
ECA0 8D08             (        forth.asm):01885 (6)             bsr     HDRSKIP         Skip the header (XT to X), clear A
ECA2 109E08           (        forth.asm):01886 (5)             ldy     DICEND          The upper code section limit (excluded)
ECA5 8D0D             (        forth.asm):01887 (6)             bsr     HDRCSUM         Current word's definition's checksum to A
ECA7 A71F             (        forth.asm):01888 (4+1)           sta     -1,x            Store the computed checksum into the header
                      (        forth.asm):01889                 ENDC                    RELFEAT
ECA9 39               (        forth.asm):01890 (4)             rts
                      (        forth.asm):01891         
                      (        forth.asm):01892                 IFNE    RELFEAT
                      (        forth.asm):01893         * On entry, X has a word's header address. On return X has the compilation
                      (        forth.asm):01894         * address for that word (XT). A is cleared so as to initialize the checksum.
ECAA A684             (        forth.asm):01895 (4+0)   HDRSKIP lda     ,x              Word's header attribute byte to A
ECAC 841F             (        forth.asm):01896 (2)             anda    #WRLNMSK        Extract the word's length
ECAE 8B04             (        forth.asm):01897 (2)             adda    #4              1B attribute, 2B backlink, 1B checksum
ECB0 3086             (        forth.asm):01898 (4+1)           leax    a,x             X has the word's XT. -1,X has the orig checksum
ECB2 4F               (        forth.asm):01899 (1)             clra
ECB3 39               (        forth.asm):01900 (4)             rts
                      (        forth.asm):01901         
                      (        forth.asm):01902         * On entry X has a word's compilation address (XT). A is supposed to have been
                      (        forth.asm):01903         * previously cleared. Y has the upper bound of the code section's address
                      (        forth.asm):01904         * (excluded). On return, A will have the word's code section's checksum.
                      (        forth.asm):01905         * X is preserved.
ECB4 3410             (        forth.asm):01906 (4+2)   HDRCSUM pshs    x
ECB6 A880             (        forth.asm):01907 (4+1)   @hdrcs1 eora    ,x+             Update the checksum
ECB8 103712           (        forth.asm):01908 (4)             cmpr    x,y             Upper bound reached?
ECBB 26F9             (        forth.asm):01909 (3)             bne     @hdrcs1         No. Process next byte in word's code section
ECBD 3510             (        forth.asm):01910 (4+2)           puls    x
ECBF 39               (        forth.asm):01911 (4)             rts
                      (        forth.asm):01912         
ECC0 696E746567726974 (        forth.asm):01913         CSUMFLM fcn     'integrity check failed'
     7920636865636B20
     6661696C656400
                      (        forth.asm):01914                 ENDC                    RELFEAT
                      (        forth.asm):01915         
                      (        forth.asm):01916         * This non-standard word walks through the dictionary linked list and checks
                      (        forth.asm):01917         * that the words that have the MONFLM flag set in their header's attribute
                      (        forth.asm):01918         * field have a definition that still matches the checksum stored in the word's
                      (        forth.asm):01919         * header. This is meant to be used interactively, as a debugging tool, since
                      (        forth.asm):01920         * multitasking is not supported by this implementation. Therefore no status
                      (        forth.asm):01921         * value is returned. Feedback will only be provided for corrupted words, in
                      (        forth.asm):01922         * the form of a diagnostic message printed to the console.
ECD7 06               (        forth.asm):01923         ICHECK  fcb     6
ECD8 49434845434B     (        forth.asm):01924                 fcc     'ICHECK'        ( -- )
ECDE EC8D             (        forth.asm):01925                 fdb     MONITOR
ECE0 C7               (        forth.asm):01926                 RFCS
                      (        forth.asm):01927                 IFNE    RELFEAT
ECE1 109E08           (        forth.asm):01928 (5)             ldy     DICEND          Upper bound for the code of the last word (exc.)
ECE4 9E06             (        forth.asm):01929 (4)             ldx     LSTWAD          LAST points to the header of the last word
ECE6 3410             (        forth.asm):01930 (4+2)   @icklop pshs    x               Current word's header address
ECE8 A684             (        forth.asm):01931 (4+0)           lda     ,x              Word's header attribute byte to A
ECEA 8520             (        forth.asm):01932 (2)             bita    #MONFLM         Is this a monitored word?
ECEC 2726             (        forth.asm):01933 (3)             beq     @icknxt         No. Point to the next word
ECEE 8DBA             (        forth.asm):01934 (6)             bsr     HDRSKIP         Skip the header (XT to X), clear A
ECF0 8DC2             (        forth.asm):01935 (6)             bsr     HDRCSUM         Current word's definition's checksum to A
ECF2 A11F             (        forth.asm):01936 (4+1)           cmpa    -1,x            Does the checksum match the compile time value?
ECF4 271E             (        forth.asm):01937 (3)             beq     @icknxt         Yes. Point to the next word
                      (        forth.asm):01938         * Current word's definition has been modified since its original definition!
ECF6 BDE300           (        forth.asm):01939 (7)             jsr     PUTCR
ECF9 AEE4             (        forth.asm):01940 (5+0)           ldx     ,s              Current word's header address
ECFB E680             (        forth.asm):01941 (4+1)           ldb     ,x+
ECFD C41F             (        forth.asm):01942 (2)             andb    #WRLNMSK
ECFF 4F               (        forth.asm):01943 (1)             clra
ED00 BDE7EB           (        forth.asm):01944 (7)             jsr     NPUSH           Word's name base address
ED03 1F01             (        forth.asm):01945 (4)             tfr     d,x
ED05 BDE7EB           (        forth.asm):01946 (7)             jsr     NPUSH           Byte count for TYPE
ED08 BDF737           (        forth.asm):01947                 RFXT    jsr,TYPE+7      XT for TYPE
ED0B BDF6E9           (        forth.asm):01948                 RFXT    jsr,SPACE+8     XT for SPACE
ED0E 8EECC0           (        forth.asm):01949 (3)             ldx     #CSUMFLM
ED11 BDE2F3           (        forth.asm):01950 (7)             jsr     PUTS            Feedback for checksum failure
ED14 3510             (        forth.asm):01951 (4+2)   @icknxt puls    x               Current word's header address
ED16 1F12             (        forth.asm):01952 (4)             tfr     x,y             Point to the end of the previous word's code
ED18 8D90             (        forth.asm):01953 (6)             bsr     HDRSKIP         Skip the header (XT to X), clear A
ED1A AE1D             (        forth.asm):01954 (5+1)           ldx     -3,x            Point to the previous header via the backlink
ED1C 2702             (        forth.asm):01955 (3)             beq     @ickdon         We've just reached the end of the dictionary
ED1E 20C6             (        forth.asm):01956 (3)             bra     @icklop
                      (        forth.asm):01957                 ENDC                    RELFEAT
ED20 39               (        forth.asm):01958 (4)     @ickdon rts
                      (        forth.asm):01959         
ED21 C2               (        forth.asm):01960         DO      fcb     $C2             79-STANDARD (REQ142)
ED22 444F             (        forth.asm):01961                 fcc     'DO'
ED24 ECD7             (        forth.asm):01962                 fdb     ICHECK
ED26 C7               (        forth.asm):01963                 RFCS
ED27 8EED32           (        forth.asm):01964 (3)             ldx     #DOEX
ED2A BDE169           (        forth.asm):01965 (7)             jsr     EMXASXT         Compile "JSR DOEX"
ED2D 1F21             (        forth.asm):01966 (4)             tfr     y,x
ED2F 7EE808           (        forth.asm):01967 (3)             jmp     RPUSH           HERE to the control flow stack
                      (        forth.asm):01968         
ED32 BDFC36           (        forth.asm):01969         DOEX    RFXT    jsr,SWAP+7      XT for SWAP
ED35 BDF0AA           (        forth.asm):01970                 RFXT    jsr,TOR+5       XT for >R (limit)
ED38 7EF0AA           (        forth.asm):01971                 RFXT    jmp,TOR+5       XT for >R (index)
                      (        forth.asm):01972         
ED3B C4               (        forth.asm):01973         LOOP    fcb     $C4             79-STANDARD (REQ124)
ED3C 4C4F4F50         (        forth.asm):01974                 fcc     'LOOP'
ED40 ED21             (        forth.asm):01975                 fdb     DO
ED42 C7               (        forth.asm):01976                 RFCS
ED43 8EED5A           (        forth.asm):01977 (3)             ldx     #LOOPEX
ED46 BDE169           (        forth.asm):01978 (7)     LOOP1   jsr     EMXASXT
ED49 8E2503           (        forth.asm):01979 (3)             ldx     #BCSOPC         Compile "BCS *+5"
ED4C AFA1             (        forth.asm):01980 (5+2)           stx     ,y++
ED4E BDE826           (        forth.asm):01981 (7)             jsr     RPOP
ED51 867E             (        forth.asm):01982 (2)             lda     #JMPOPC
ED53 BDE58F           (        forth.asm):01983 (7)             jsr     VARCON2         Compile "JMP R@"
ED56 109F08           (        forth.asm):01984 (5)             sty     DICEND          No action component
ED59 39               (        forth.asm):01985 (4)             rts
                      (        forth.asm):01986         
ED5A 8E0001           (        forth.asm):01987 (3)     LOOPEX  ldx     #1
ED5D 2011             (        forth.asm):01988 (3)             bra     PLOPEX1
                      (        forth.asm):01989         
ED5F C5               (        forth.asm):01990         PLOOP   fcb     $C5             79-STANDARD (REQ141)
ED60 2B4C4F4F50       (        forth.asm):01991                 fcc     '+LOOP'         The sign hdl reqs for REQ124 should apply though
ED65 ED3B             (        forth.asm):01992                 fdb     LOOP
ED67 C7               (        forth.asm):01993                 RFCS
ED68 8EED6D           (        forth.asm):01994 (3)             ldx     #PLOOPEX
ED6B 20D9             (        forth.asm):01995 (3)             bra     LOOP1
                      (        forth.asm):01996         
ED6D BDE7F9           (        forth.asm):01997 (7)     PLOOPEX jsr     NPOP
ED70 1F16             (        forth.asm):01998 (4)     PLOPEX1 tfr     x,w             Increment to W
ED72 BDE826           (        forth.asm):01999 (7)             jsr     RPOP
ED75 1F12             (        forth.asm):02000 (4)             tfr     x,y             Index to Y
ED77 BDE826           (        forth.asm):02001 (7)             jsr     RPOP            Limit to X
ED7A 103062           (        forth.asm):02002 (4)             addr    w,y             Update index
ED7D 114D             (        forth.asm):02003 (2)             tste
ED7F 2B10             (        forth.asm):02004 (3)             bmi     @neginc
ED81 103721           (        forth.asm):02005 (4)             cmpr    y,x
ED84 2F12             (        forth.asm):02006 (3)             ble     @done           We're done. Return With CFLAG set
ED86 BDE808           (        forth.asm):02007 (7)     @iter   jsr     RPUSH           Push back the limit
ED89 1F21             (        forth.asm):02008 (4)             tfr     y,x
ED8B BDE808           (        forth.asm):02009 (7)             jsr     RPUSH           Push back the index
ED8E 1CFE             (        forth.asm):02010 (2)             andcc   #^CFLAG         Clear CFLAG
ED90 39               (        forth.asm):02011 (4)             rts
ED91 103721           (        forth.asm):02012 (4)     @neginc cmpr    y,x
ED94 27F0             (        forth.asm):02013 (3)             beq     @iter           79-STANDARD irregular historical precedent
ED96 2BEE             (        forth.asm):02014 (3)             bmi     @iter
ED98 1A01             (        forth.asm):02015 (2)     @done   orcc    #CFLAG          Set CFLAG
ED9A 39               (        forth.asm):02016 (4)             rts
                      (        forth.asm):02017         
ED9B 46               (        forth.asm):02018         UNLOOP  fcb     $46             ANSI (Core)
ED9C 554E4C4F4F50     (        forth.asm):02019                 fcc     'UNLOOP'
EDA2 ED5F             (        forth.asm):02020                 fdb     PLOOP
EDA4 C7               (        forth.asm):02021                 RFCS
EDA5 BDE826           (        forth.asm):02022 (7)             jsr     RPOP            Drop the index from the return stack
EDA8 7EE826           (        forth.asm):02023 (3)             jmp     RPOP            and the loop limit as well
                      (        forth.asm):02024         
EDAB C2               (        forth.asm):02025         IF      fcb     $C2             79-STANDARD (REQ210)
EDAC 4946             (        forth.asm):02026                 fcc     'IF'
EDAE ED9B             (        forth.asm):02027                 fdb     UNLOOP
EDB0 C7               (        forth.asm):02028                 RFCS
EDB1 8EEDCB           (        forth.asm):02029 (3)             ldx     #IFEX
EDB4 BDE169           (        forth.asm):02030 (7)             jsr     EMXASXT         Compile "JSR IFEX"
EDB7 8E2603           (        forth.asm):02031 (3)             ldx     #BNEOPC
EDBA AFA1             (        forth.asm):02032 (5+2)           stx     ,y++            Compile "BNE *+5"
EDBC 867E             (        forth.asm):02033 (2)             lda     #JMPOPC         JMP extended
EDBE A7A0             (        forth.asm):02034 (4+1)           sta     ,y+             C,
EDC0 1F21             (        forth.asm):02035 (4)             tfr     y,x
EDC2 BDE808           (        forth.asm):02036 (7)             jsr     RPUSH           HERE to the control stack (ANS:orig)
                      (        forth.asm):02037         * This cell contents is a forward reference that will be resolved by ELSE/THEN.
EDC5 3122             (        forth.asm):02038 (4+1)           leay    2,y
EDC7 109F08           (        forth.asm):02039 (5)             sty     DICEND          2 ALLOT
EDCA 39               (        forth.asm):02040 (4)             rts
                      (        forth.asm):02041         
EDCB BDE7F9           (        forth.asm):02042 (7)     IFEX    jsr     NPOP
EDCE 1037C1           (        forth.asm):02043 (4)             cmpr    0,x
EDD1 39               (        forth.asm):02044 (4)             rts
                      (        forth.asm):02045         
                      (        forth.asm):02046         * Functionally equivalent to:
                      (        forth.asm):02047         * : UNLESS POSTPONE 0= POSTPONE IF ; IMMEDIATE RESTRICT
EDD2 C6               (        forth.asm):02048         UNLESS  fcb     $C6             Non-standard (Perl inspired)
EDD3 554E4C455353     (        forth.asm):02049                 fcc     'UNLESS'
EDD9 EDAB             (        forth.asm):02050                 fdb     IF
EDDB C7               (        forth.asm):02051                 RFCS
EDDC 8EEEFD           (        forth.asm):02052                 RFXT    ldx,#NULP+5     XT for 0=
EDDF BDE169           (        forth.asm):02053 (7)             jsr     EMXASXT
EDE2 20CD             (        forth.asm):02054                 RFXT    bra,IF+5        XT for IF
                      (        forth.asm):02055         
EDE4 C4               (        forth.asm):02056         ELSE    fcb     $C4             79-STANDARD (REQ167)
EDE5 454C5345         (        forth.asm):02057                 fcc     'ELSE'
EDE9 EDD2             (        forth.asm):02058                 fdb     UNLESS
EDEB C7               (        forth.asm):02059                 RFCS
EDEC 109E08           (        forth.asm):02060 (5)             ldy     DICEND
EDEF 867E             (        forth.asm):02061 (2)             lda     #JMPOPC         JMP extended
EDF1 A7A0             (        forth.asm):02062 (4+1)           sta     ,y+
EDF3 3122             (        forth.asm):02063 (4+1)           leay    2,y
EDF5 109F08           (        forth.asm):02064 (5)             sty     DICEND
EDF8 BDE826           (        forth.asm):02065 (7)             jsr     RPOP
EDFB 10AF84           (        forth.asm):02066 (6+0)           sty     ,x              Set actual ELSE jump address
EDFE 1F21             (        forth.asm):02067 (4)             tfr     y,x
EE00 301E             (        forth.asm):02068 (4+1)           leax    -2,x
EE02 7EE808           (        forth.asm):02069 (3)             jmp     RPUSH
                      (        forth.asm):02070         
EE05 C4               (        forth.asm):02071         THEN    fcb     $C4             79-STANDARD (REQ161)
EE06 5448454E         (        forth.asm):02072                 fcc     'THEN'
EE0A EDE4             (        forth.asm):02073                 fdb     ELSE
EE0C C7               (        forth.asm):02074                 RFCS
EE0D 109E08           (        forth.asm):02075 (5)             ldy     DICEND
EE10 BDE826           (        forth.asm):02076 (7)             jsr     RPOP
EE13 10AF84           (        forth.asm):02077 (6+0)           sty     ,x
EE16 39               (        forth.asm):02078 (4)             rts
                      (        forth.asm):02079         
EE17 01               (        forth.asm):02080         EQ      fcb     1               79-STANDARD (REQ173)
EE18 3D               (        forth.asm):02081                 fcc     '='             ( N1 N2 -- FLAG )
EE19 EE05             (        forth.asm):02082                 fdb     THEN
EE1B C7               (        forth.asm):02083                 RFCS
EE1C BDE49A           (        forth.asm):02084 (7)             jsr     MIN2PST         At least two cells need to be stacked up
EE1F 10ECC4           (        forth.asm):02085 (8+0)           ldq     ,u              D:W has N2:N1
EE22 3342             (        forth.asm):02086 (4+1)           leau    2,u             Drop one cell from the user stack
EE24 1FC1             (        forth.asm):02087 (4)             tfr     0,x
EE26 103760           (        forth.asm):02088 (4)             cmpr    w,d
EE29 2602             (        forth.asm):02089 (3)             bne     @eq1
EE2B 3001             (        forth.asm):02090 (4+1)           leax    1,x
EE2D AFC4             (        forth.asm):02091 (5+0)   @eq1    stx     ,u              Store in place to FLAG
EE2F 39               (        forth.asm):02092 (4)             rts
                      (        forth.asm):02093         
EE30 02               (        forth.asm):02094         DIFF    fcb     2               79-STANDARD (REF)
EE31 3C3E             (        forth.asm):02095                 fcc     '<>'            ( N1 N2 -- FLAG )
EE33 EE17             (        forth.asm):02096                 fdb     EQ
EE35 C7               (        forth.asm):02097                 RFCS
EE36 BDE49A           (        forth.asm):02098 (7)             jsr     MIN2PST         At least two cells need to be stacked up
EE39 10ECC4           (        forth.asm):02099 (8+0)           ldq     ,u              D:W has N2:N1
EE3C 3342             (        forth.asm):02100 (4+1)           leau    2,u             Drop one cell from the user stack
EE3E 1FC1             (        forth.asm):02101 (4)             tfr     0,x
EE40 103760           (        forth.asm):02102 (4)             cmpr    w,d
EE43 2702             (        forth.asm):02103 (3)             beq     @diff1
EE45 3001             (        forth.asm):02104 (4+1)           leax    1,x
EE47 AFC4             (        forth.asm):02105 (5+0)   @diff1  stx     ,u              Store in place to FLAG
EE49 39               (        forth.asm):02106 (4)             rts
                      (        forth.asm):02107         
EE4A 02               (        forth.asm):02108         SINFEQ  fcb     2               Non-standard (Not even ANSI!)
EE4B 3C3D             (        forth.asm):02109                 fcc     '<='            Required for the ORNL fixed sieve benchmark
EE4D EE30             (        forth.asm):02110                 fdb     DIFF
EE4F C7               (        forth.asm):02111                 RFCS
EE50 BDE49A           (        forth.asm):02112 (7)             jsr     MIN2PST         At least two cells need to be stacked up
EE53 10AEC4           (        forth.asm):02113 (6+0)           ldy     ,u
EE56 AE42             (        forth.asm):02114 (5+1)           ldx     2,u
EE58 104F             (        forth.asm):02115 (2)             clrd
EE5A 103721           (        forth.asm):02116 (4)             cmpr    y,x
EE5D 2E02             (        forth.asm):02117 (3)             bgt     @sinfq1
EE5F 104C             (        forth.asm):02118 (2)             incd
EE61 3342             (        forth.asm):02119 (4+1)   @sinfq1 leau    2,u             Drop one cell
EE63 EDC4             (        forth.asm):02120 (5+0)           std     ,u
EE65 39               (        forth.asm):02121 (4)             rts
                      (        forth.asm):02122         
                      (        forth.asm):02123                 IFNE    DEBUG
EE66                  (        forth.asm):02124         CC      fcb     2               Non-standard. Used for debugging
                      (        forth.asm):02125                 fcc     'CC'
                      (        forth.asm):02126                 fdb     SINFEQ
                      (        forth.asm):02127                 RFCS
                      (        forth.asm):02128                 ldx     CCREG
                      (        forth.asm):02129                 jmp     NPUSH
                      (        forth.asm):02130                 ENDC                    DEBUG
                      (        forth.asm):02131         
EE66 03               (        forth.asm):02132         XOR     fcb     3               79-STANDARD (REQ179)
EE67 584F52           (        forth.asm):02133                 fcc     'XOR'
                      (        forth.asm):02134                 IFNE    DEBUG
                      (        forth.asm):02135                 fdb     CC
                      (        forth.asm):02136                 ELSE
EE6A EE4A             (        forth.asm):02137                 fdb     SINFEQ
                      (        forth.asm):02138                 ENDC                    DEBUG
EE6C C7               (        forth.asm):02139                 RFCS
EE6D BDE49A           (        forth.asm):02140 (7)             jsr     MIN2PST         At least two cells need to be stacked up
EE70 ECC4             (        forth.asm):02141 (5+0)           ldd     ,u
EE72 10A642           (        forth.asm):02142 (6+1)           ldw     2,u
EE75 103660           (        forth.asm):02143 (4)             eorr    w,d
EE78 3342             (        forth.asm):02144 (4+1)   XOR1    leau    2,u
EE7A EDC4             (        forth.asm):02145 (5+0)           std     ,u
EE7C 39               (        forth.asm):02146 (4)             rts
                      (        forth.asm):02147         
EE7D 02               (        forth.asm):02148         OR      fcb     2               79-STANDARD (REQ223)
EE7E 4F52             (        forth.asm):02149                 fcc     'OR'
EE80 EE66             (        forth.asm):02150                 fdb     XOR
EE82 C7               (        forth.asm):02151                 RFCS
EE83 BDE49A           (        forth.asm):02152 (7)             jsr     MIN2PST         At least two cells need to be stacked up
EE86 ECC4             (        forth.asm):02153 (5+0)           ldd     ,u
EE88 10A642           (        forth.asm):02154 (6+1)           ldw     2,u
EE8B 103560           (        forth.asm):02155 (4)             orr     w,d
EE8E 20E8             (        forth.asm):02156 (3)             bra     XOR1
                      (        forth.asm):02157         
EE90 03               (        forth.asm):02158         AND     fcb     3               79-STANDARD (REQ183)
EE91 414E44           (        forth.asm):02159                 fcc     'AND'
EE94 EE7D             (        forth.asm):02160                 fdb     OR
EE96 C7               (        forth.asm):02161                 RFCS
EE97 BDE49A           (        forth.asm):02162 (7)             jsr     MIN2PST         At least two cells need to be stacked up
EE9A ECC4             (        forth.asm):02163 (5+0)           ldd     ,u
EE9C 10A642           (        forth.asm):02164 (6+1)           ldw     2,u
EE9F 103460           (        forth.asm):02165 (4)             andr    w,d
EEA2 20D4             (        forth.asm):02166 (3)             bra     XOR1
                      (        forth.asm):02167         
EEA4 03               (        forth.asm):02168         COM     fcb     3               79-STANDARD (REF)
EEA5 434F4D           (        forth.asm):02169                 fcc     'COM'
EEA8 EE90             (        forth.asm):02170                 fdb     AND
EEAA C7               (        forth.asm):02171                 RFCS
EEAB BDE7F9           (        forth.asm):02172 (7)     COM0    jsr     NPOP
EEAE 1F10             (        forth.asm):02173 (4)             tfr     x,d
EEB0 1043             (        forth.asm):02174 (2)             comd
EEB2 1F01             (        forth.asm):02175 (4)             tfr     d,x
EEB4 3610             (        forth.asm):02176                 UCNPUSH
EEB6 39               (        forth.asm):02177 (4)             rts
                      (        forth.asm):02178         
EEB7 06               (        forth.asm):02179         INVERT  fcb     6               ANSI (Core)
EEB8 494E56455254     (        forth.asm):02180                 fcc     'INVERT'
EEBE EEA4             (        forth.asm):02181                 fdb     COM
EEC0 C7               (        forth.asm):02182                 RFCS
EEC1 20E8             (        forth.asm):02183 (3)             bra     COM0
                      (        forth.asm):02184         
EEC3 02               (        forth.asm):02185         ZGREAT  fcb     2               79-STANDARD (REQ118)
EEC4 303E             (        forth.asm):02186                 fcc     '0>'
EEC6 EEB7             (        forth.asm):02187                 fdb     INVERT
EEC8 C7               (        forth.asm):02188                 RFCS
EEC9 BDE7F9           (        forth.asm):02189 (7)             jsr     NPOP
EECC 1F10             (        forth.asm):02190 (4)             tfr     x,d
EECE 104D             (        forth.asm):02191 (2)             tstd
EED0 2F06             (        forth.asm):02192 (3)             ble     @zgrt1
EED2 8E0001           (        forth.asm):02193 (3)             ldx     #1
EED5 3610             (        forth.asm):02194                 UCNPUSH
EED7 39               (        forth.asm):02195 (4)             rts
EED8 1FC1             (        forth.asm):02196 (4)     @zgrt1  tfr     0,x
EEDA 3610             (        forth.asm):02197                 UCNPUSH
EEDC 39               (        forth.asm):02198 (4)             rts
                      (        forth.asm):02199         
EEDD 02               (        forth.asm):02200         ZLESS   fcb     2               79-STANDARD (REQ144)
EEDE 303C             (        forth.asm):02201                 fcc     '0<'
EEE0 EEC3             (        forth.asm):02202                 fdb     ZGREAT
EEE2 C7               (        forth.asm):02203                 RFCS
EEE3 BDE7F9           (        forth.asm):02204 (7)             jsr     NPOP
EEE6 1F10             (        forth.asm):02205 (4)             tfr     x,d
EEE8 104D             (        forth.asm):02206 (2)             tstd
EEEA 2C06             (        forth.asm):02207 (3)             bge     @zlss1
EEEC 8E0001           (        forth.asm):02208 (3)             ldx     #1
EEEF 3610             (        forth.asm):02209                 UCNPUSH
EEF1 39               (        forth.asm):02210 (4)             rts
EEF2 1FC1             (        forth.asm):02211 (4)     @zlss1  tfr     0,x
EEF4 3610             (        forth.asm):02212                 UCNPUSH
EEF6 39               (        forth.asm):02213 (4)             rts
                      (        forth.asm):02214         
EEF7 02               (        forth.asm):02215         NULP    fcb     2               79-STANDARD (REQ180)
EEF8 303D             (        forth.asm):02216                 fcc     '0='
EEFA EEDD             (        forth.asm):02217                 fdb     ZLESS
EEFC C7               (        forth.asm):02218                 RFCS
EEFD BDE7F9           (        forth.asm):02219 (7)             jsr     NPOP
EF00 1F10             (        forth.asm):02220 (4)             tfr     x,d
EF02 1FC1             (        forth.asm):02221 (4)             tfr     0,x
EF04 104D             (        forth.asm):02222 (2)             tstd
EF06 2703             (        forth.asm):02223 (3)             beq     @nulp2
EF08 3610             (        forth.asm):02224         @nulp1  UCNPUSH
EF0A 39               (        forth.asm):02225 (4)             rts
EF0B 3001             (        forth.asm):02226 (4+1)   @nulp2  leax    1,x
EF0D 20F9             (        forth.asm):02227 (3)             bra     @nulp1
                      (        forth.asm):02228         
EF0F 03               (        forth.asm):02229         NOT     fcb     3               79-STANDARD (REQ165)
EF10 4E4F54           (        forth.asm):02230                 fcc     'NOT'
EF13 EEF7             (        forth.asm):02231                 fdb     NULP
EF15 C7               (        forth.asm):02232                 RFCS
EF16 20E5             (        forth.asm):02233                 RFXT    bra,NULP+5      XT for 0=
                      (        forth.asm):02234         
EF18 02               (        forth.asm):02235         USUP    fcb     2               ANSI (Core Ext)
EF19 553E             (        forth.asm):02236                 fcc     'U>'
EF1B EF0F             (        forth.asm):02237                 fdb     NOT
EF1D C7               (        forth.asm):02238                 RFCS
EF1E BDE594           (        forth.asm):02239 (7)             jsr     CMP2
EF21 2302             (        forth.asm):02240 (3)             bls     @usup1
EF23 3001             (        forth.asm):02241 (4+1)           leax    1,x
EF25 3610             (        forth.asm):02242         @usup1  UCNPUSH
EF27 39               (        forth.asm):02243 (4)             rts
                      (        forth.asm):02244         
EF28 02               (        forth.asm):02245         UINF    fcb     2               79-STANDARD (REQ150)
EF29 553C             (        forth.asm):02246                 fcc     'U<'
EF2B EF18             (        forth.asm):02247                 fdb     USUP
EF2D C7               (        forth.asm):02248                 RFCS
EF2E BDE594           (        forth.asm):02249 (7)             jsr     CMP2
EF31 2402             (        forth.asm):02250 (3)             bhs     @uinf1          Z is set
EF33 3001             (        forth.asm):02251 (4+1)           leax    1,x
EF35 3610             (        forth.asm):02252         @uinf1  UCNPUSH
EF37 39               (        forth.asm):02253 (4)             rts
                      (        forth.asm):02254         
                      (        forth.asm):02255         * Functionally: : WITHIN OVER - >R - R> U< ;
EF38 06               (        forth.asm):02256         WITHIN  fcb     6               ANSI (Core)
EF39 57495448494E     (        forth.asm):02257                 fcc     'WITHIN'        ( n1 n2 n3 -- flag )
EF3F EF28             (        forth.asm):02258                 fdb     UINF
EF41 C7               (        forth.asm):02259                 RFCS
EF42 BDFC7C           (        forth.asm):02260                 RFXT    jsr,OVER+7      XT for OVER
EF45 BDF905           (        forth.asm):02261                 RFXT    jsr,MINUS+4     XT for -
EF48 BDF0AA           (        forth.asm):02262                 RFXT    jsr,TOR+5       XT for >R
EF4B BDF905           (        forth.asm):02263                 RFXT    jsr,MINUS+4     XT for -
EF4E BDF09E           (        forth.asm):02264                 RFXT    jsr,RFROM+5     XT for R>
EF51 20DB             (        forth.asm):02265                 RFXT    bra,UINF+5      XT for U<
                      (        forth.asm):02266         
EF53 01               (        forth.asm):02267         SUP     fcb     1               79-STANDARD (REQ102)
EF54 3E               (        forth.asm):02268                 fcc     '>'
EF55 EF38             (        forth.asm):02269                 fdb     WITHIN
EF57 C7               (        forth.asm):02270                 RFCS
EF58 BDE594           (        forth.asm):02271 (7)             jsr     CMP2
EF5B 2F02             (        forth.asm):02272 (3)             ble     @sup1
EF5D 3001             (        forth.asm):02273 (4+1)           leax    1,x
EF5F 3610             (        forth.asm):02274         @sup1   UCNPUSH
EF61 39               (        forth.asm):02275 (4)             rts
                      (        forth.asm):02276         
EF62 01               (        forth.asm):02277         INF     fcb     1               79-STANDARD (REQ139)
EF63 3C               (        forth.asm):02278                 fcc     '<'
EF64 EF53             (        forth.asm):02279                 fdb     SUP
EF66 C7               (        forth.asm):02280                 RFCS
EF67 BDE594           (        forth.asm):02281 (7)             jsr     CMP2
EF6A 2C02             (        forth.asm):02282 (3)             bge     @inf1
EF6C 3001             (        forth.asm):02283 (4+1)           leax    1,x
EF6E 3610             (        forth.asm):02284         @inf1   UCNPUSH
EF70 39               (        forth.asm):02285 (4)             rts
                      (        forth.asm):02286         
EF71 03               (        forth.asm):02287         MAX     fcb     3               79-STANDARD (REQ218)
EF72 4D4158           (        forth.asm):02288                 fcc     'MAX'
EF75 EF62             (        forth.asm):02289                 fdb     INF
EF77 C7               (        forth.asm):02290                 RFCS
EF78 BDE7F9           (        forth.asm):02291 (7)             jsr     NPOP
EF7B 1F12             (        forth.asm):02292 (4)             tfr     x,y
EF7D BDE7F9           (        forth.asm):02293 (7)             jsr     NPOP
EF80 103721           (        forth.asm):02294 (4)             cmpr    y,x
EF83 2C02             (        forth.asm):02295 (3)             bge     @pshrv1
EF85 1F21             (        forth.asm):02296 (4)             tfr     y,x
EF87 3610             (        forth.asm):02297         @pshrv1 UCNPUSH
EF89 39               (        forth.asm):02298 (4)             rts
                      (        forth.asm):02299         
EF8A 03               (        forth.asm):02300         MIN     fcb     3               79-STANDARD (REQ127)
EF8B 4D494E           (        forth.asm):02301                 fcc     'MIN'
EF8E EF71             (        forth.asm):02302                 fdb     MAX
EF90 C7               (        forth.asm):02303                 RFCS
EF91 BDE7F9           (        forth.asm):02304 (7)             jsr     NPOP
EF94 1F12             (        forth.asm):02305 (4)             tfr     x,y
EF96 BDE7F9           (        forth.asm):02306 (7)             jsr     NPOP
EF99 103721           (        forth.asm):02307 (4)             cmpr    y,x
EF9C 2F02             (        forth.asm):02308 (3)             ble     @pshrv2
EF9E 1F21             (        forth.asm):02309 (4)             tfr     y,x
EFA0 3610             (        forth.asm):02310         @pshrv2 UCNPUSH
EFA2 39               (        forth.asm):02311 (4)             rts
                      (        forth.asm):02312         
EFA3 03               (        forth.asm):02313         ABS     fcb     3               79-STANDARD (REQ108)
EFA4 414253           (        forth.asm):02314                 fcc     'ABS'
EFA7 EF8A             (        forth.asm):02315                 fdb     MIN
EFA9 C7               (        forth.asm):02316                 RFCS
EFAA BDE7F9           (        forth.asm):02317 (7)             jsr     NPOP
EFAD 1F10             (        forth.asm):02318 (4)             tfr     x,d
EFAF 104D             (        forth.asm):02319 (2)             tstd
EFB1 2A04             (        forth.asm):02320 (3)             bpl     @abs1
EFB3 1040             (        forth.asm):02321 (2)             negd
EFB5 1F01             (        forth.asm):02322 (4)             tfr     d,x
EFB7 3610             (        forth.asm):02323         @abs1   UCNPUSH
EFB9 39               (        forth.asm):02324 (4)             rts
                      (        forth.asm):02325         
EFBA 06               (        forth.asm):02326         NEGATE  fcb     6               79-STANDARD (REQ177)
EFBB 4E4547415445     (        forth.asm):02327                 fcc     'NEGATE'
EFC1 EFA3             (        forth.asm):02328                 fdb     ABS
EFC3 C7               (        forth.asm):02329                 RFCS
EFC4 BDE495           (        forth.asm):02330 (7)             jsr     MIN1PST         At least one cell needs to be stacked up
EFC7 ECC4             (        forth.asm):02331 (5+0)           ldd     ,u
EFC9 1040             (        forth.asm):02332 (2)             negd
EFCB EDC4             (        forth.asm):02333 (5+0)           std     ,u
EFCD 39               (        forth.asm):02334 (4)             rts
                      (        forth.asm):02335         
EFCE C5               (        forth.asm):02336         BEGIN   fcb     $C5             79-STANDARD (REQ147)
EFCF 424547494E       (        forth.asm):02337                 fcc     'BEGIN'
EFD4 EFBA             (        forth.asm):02338                 fdb     NEGATE
EFD6 C7               (        forth.asm):02339                 RFCS
EFD7 9E08             (        forth.asm):02340 (4)             ldx     DICEND          HERE is ANS:dest
EFD9 7EE808           (        forth.asm):02341 (3)             jmp     RPUSH           to the control flow stack
                      (        forth.asm):02342         
EFDC C5               (        forth.asm):02343         AGAIN   fcb     $C5             79-STANDARD (REF114)
EFDD 414741494E       (        forth.asm):02344                 fcc     'AGAIN'
EFE2 EFCE             (        forth.asm):02345                 fdb     BEGIN
EFE4 C7               (        forth.asm):02346                 RFCS
EFE5 BDE826           (        forth.asm):02347 (7)             jsr     RPOP
EFE8 1F12             (        forth.asm):02348 (4)             tfr     x,y             ANS:dest from the control flow stack to Y
EFEA 9E08             (        forth.asm):02349 (4)             ldx     DICEND
EFEC 867E             (        forth.asm):02350 (2)             lda     #JMPOPC         JMP extended
EFEE A780             (        forth.asm):02351 (4+1)           sta     ,x+
EFF0 10AF81           (        forth.asm):02352 (6+2)           sty     ,x++
EFF3 9F08             (        forth.asm):02353 (4)             stx     DICEND
EFF5 8602             (        forth.asm):02354 (2)             lda     #2
EFF7 9730             (        forth.asm):02355 (3)             sta     RTSREMV         Trigger the RTS removal optimization
EFF9 39               (        forth.asm):02356 (4)             rts
                      (        forth.asm):02357         
                      (        forth.asm):02358         # The standard does not require this as being immediate but I do.
EFFA C4               (        forth.asm):02359         EXIT    fcb     $C4             79-STANDARD (REQ117)
EFFB 45584954         (        forth.asm):02360                 fcc     'EXIT'
EFFF EFDC             (        forth.asm):02361                 fdb     AGAIN
F001 C7               (        forth.asm):02362                 RFCS
F002 9E08             (        forth.asm):02363 (4)             ldx     DICEND
F004 301D             (        forth.asm):02364 (4+1)           leax    -3,x
F006 109E14           (        forth.asm):02365 (5)             ldy     JSRLAST
F009 103721           (        forth.asm):02366 (4)             cmpr    y,x
F00C 2605             (        forth.asm):02367 (3)             bne     @noopt          Tail JMP optimization is not possible
F00E 867E             (        forth.asm):02368 (2)             lda     #JMPOPC         JMP extended
F010 A784             (        forth.asm):02369 (4+0)           sta     ,x
F012 39               (        forth.asm):02370 (4)             rts
F013 3003             (        forth.asm):02371 (4+1)   @noopt  leax    3,x             Point back to HERE
F015 8639             (        forth.asm):02372 (2)             lda     #RTSOPC         RTS inherent
F017 A780             (        forth.asm):02373 (4+1)           sta     ,x+
F019 9F08             (        forth.asm):02374 (4)             stx     DICEND
F01B 39               (        forth.asm):02375 (4)             rts
                      (        forth.asm):02376         
F01C C5               (        forth.asm):02377         UNTIL   fcb     $C5             79-STANDARD (REQ237)
F01D 554E54494C       (        forth.asm):02378                 fcc     'UNTIL'
F022 EFFA             (        forth.asm):02379                 fdb     EXIT
F024 C7               (        forth.asm):02380                 RFCS
F025 109E08           (        forth.asm):02381 (5)             ldy     DICEND
F028 86BD             (        forth.asm):02382 (2)             lda     #JSROPC         JSR extended
F02A 8EEDCB           (        forth.asm):02383 (3)             ldx     #IFEX
F02D BDE155           (        forth.asm):02384 (7)             jsr     CHKRTS          Check if the final RTS can be omitted
F030 BDE58F           (        forth.asm):02385 (7)             jsr     VARCON2
F033 8E2603           (        forth.asm):02386 (3)             ldx     #BNEOPC         Compile "BNE *+5"
F036 AFA1             (        forth.asm):02387 (5+2)           stx     ,y++
F038 867E             (        forth.asm):02388 (2)             lda     #JMPOPC         JMP extended
F03A A7A0             (        forth.asm):02389 (4+1)           sta     ,y+
F03C BDE826           (        forth.asm):02390 (7)             jsr     RPOP
F03F AFA1             (        forth.asm):02391 (5+2)           stx     ,y++
F041 109F08           (        forth.asm):02392 (5)             sty     DICEND
F044 39               (        forth.asm):02393 (4)             rts
                      (        forth.asm):02394         
F045 C3               (        forth.asm):02395         END     fcb     $C3             79-STANDARD (REF224)
F046 454E44           (        forth.asm):02396                 fcc     'END'
F049 F01C             (        forth.asm):02397                 fdb     UNTIL
F04B C7               (        forth.asm):02398                 RFCS
F04C 20D7             (        forth.asm):02399                 RFXT    bra,UNTIL+8     XT for UNTIL
                      (        forth.asm):02400         
F04E C5               (        forth.asm):02401         WHILE   fcb     $C5             79-STANDARD (REQ149)
F04F 5748494C45       (        forth.asm):02402                 fcc     'WHILE'
F054 F045             (        forth.asm):02403                 fdb     END
F056 C7               (        forth.asm):02404                 RFCS
F057 8EEDCB           (        forth.asm):02405 (3)             ldx     #IFEX
F05A BDE169           (        forth.asm):02406 (7)             jsr     EMXASXT         Compile "JSR IFEX"
F05D CC2603           (        forth.asm):02407 (3)             ldd     #BNEOPC
F060 EDA1             (        forth.asm):02408 (5+2)           std     ,y++            Compile "BNE *+5"
F062 867E             (        forth.asm):02409 (2)             lda     #JMPOPC         JMP extended
F064 A7A0             (        forth.asm):02410 (4+1)           sta     ,y+
F066 BDE826           (        forth.asm):02411 (7)             jsr     RPOP            ANS:dest to X, Y has HERE (ANS:orig)
F069 1E21             (        forth.asm):02412 (5)             exg     y,x
F06B BDE808           (        forth.asm):02413 (7)             jsr     RPUSH           ANS:orig to the return stack
F06E 1E21             (        forth.asm):02414 (5)             exg     y,x
F070 BDE808           (        forth.asm):02415 (7)             jsr     RPUSH           ANS:dest to the return stack
F073 3122             (        forth.asm):02416 (4+1)           leay    2,y             2 ALLOT
F075 109F08           (        forth.asm):02417 (5)             sty     DICEND
F078 39               (        forth.asm):02418 (4)             rts
                      (        forth.asm):02419         
F079 C6               (        forth.asm):02420         REPEAT  fcb     $C6             79-STANDARD (REQ120)
F07A 524550454154     (        forth.asm):02421                 fcc     'REPEAT'
F080 F04E             (        forth.asm):02422                 fdb     WHILE
F082 C7               (        forth.asm):02423                 RFCS
F083 BDE826           (        forth.asm):02424 (7)             jsr     RPOP            ANS:dest to X
F086 109E08           (        forth.asm):02425 (5)             ldy     DICEND
F089 867E             (        forth.asm):02426 (2)             lda     #JMPOPC         JMP extended
F08B BDE58F           (        forth.asm):02427 (7)             jsr     VARCON2
F08E BDE826           (        forth.asm):02428 (7)             jsr     RPOP            ANS:orig
F091 10AF84           (        forth.asm):02429 (6+0)           sty     ,x              Resolve ANS:orig to HERE
F094 109F08           (        forth.asm):02430 (5)             sty     DICEND
F097 39               (        forth.asm):02431 (4)             rts
                      (        forth.asm):02432         
F098 42               (        forth.asm):02433         RFROM   fcb     $42             79-STANDARD (REQ110)
F099 523E             (        forth.asm):02434                 fcc     'R>'
F09B F079             (        forth.asm):02435                 fdb     REPEAT
F09D C7               (        forth.asm):02436                 RFCS
F09E BDE826           (        forth.asm):02437 (7)             jsr     RPOP
F0A1 7EE7EB           (        forth.asm):02438 (3)             jmp     NPUSH
                      (        forth.asm):02439         
F0A4 42               (        forth.asm):02440         TOR     fcb     $42             79-STANDARD (REQ200)
F0A5 3E52             (        forth.asm):02441                 fcc     '>R'
F0A7 F098             (        forth.asm):02442                 fdb     RFROM
F0A9 C7               (        forth.asm):02443                 RFCS
F0AA BDE7F9           (        forth.asm):02444 (7)             jsr     NPOP
F0AD 7EE808           (        forth.asm):02445 (3)             jmp     RPUSH
                      (        forth.asm):02446         
F0B0 45               (        forth.asm):02447         LEAVE   fcb     $45             79-STANDARD (REQ213)
F0B1 4C45415645       (        forth.asm):02448                 fcc     'LEAVE'
F0B6 F0A4             (        forth.asm):02449                 fdb     TOR
F0B8 C7               (        forth.asm):02450                 RFCS
F0B9 BDE826           (        forth.asm):02451 (7)             jsr     RPOP
F0BC BDE826           (        forth.asm):02452 (7)             jsr     RPOP
F0BF BDE808           (        forth.asm):02453 (7)             jsr     RPUSH
F0C2 7EE808           (        forth.asm):02454 (3)             jmp     RPUSH
                      (        forth.asm):02455         
F0C5 41               (        forth.asm):02456         INDI    fcb     $41             79-STANDARD (REQ136)
F0C6 49               (        forth.asm):02457                 fcc     'I'
F0C7 F0B0             (        forth.asm):02458                 fdb     LEAVE
F0C9 C7               (        forth.asm):02459                 RFCS
F0CA 5F               (        forth.asm):02460 (1)             clrb
                      (        forth.asm):02461         * This is called ARPICKN because the argument in B on entry is expected
                      (        forth.asm):02462         * to be zero to refer to the top of the return stack. This is some sort
                      (        forth.asm):02463         * of F83/ANSI behaviour that one would not expect in a 79-STANDARD.
                      (        forth.asm):02464         * It makes the code slightly more compact.
F0CB 962E             (        forth.asm):02465 (3)     ARPICKN lda     RDEPTH
F0CD 103789           (        forth.asm):02466 (4)             cmpr    a,b
F0D0 240A             (        forth.asm):02467 (3)             bhs     @rpick1
F0D2 9E00             (        forth.asm):02468 (4)             ldx     RSP
F0D4 4F               (        forth.asm):02469 (1)             clra
F0D5 1048             (        forth.asm):02470 (2)             lsld                    Times 2
F0D7 AE8B             (        forth.asm):02471 (5+2)           ldx     d,x
F0D9 7EE7EB           (        forth.asm):02472 (3)             jmp     NPUSH           We cannot use UCNPUSH here
F0DC C608             (        forth.asm):02473 (2)     @rpick1 ldb     #8              Return stack underflow
F0DE BDE76A           (        forth.asm):02474 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02475         
F0E1 42               (        forth.asm):02476         RFETCH  fcb     $42             79-STANDARD (REQ228)
F0E2 5240             (        forth.asm):02477                 fcc     'R@'
F0E4 F0C5             (        forth.asm):02478                 fdb     INDI
F0E6 C7               (        forth.asm):02479                 RFCS
F0E7 20E1             (        forth.asm):02480                 RFXT    bra,INDI+4      XT for I
                      (        forth.asm):02481         
F0E9 42               (        forth.asm):02482         INDIP   fcb     $42             79-STANDARD (REF)
F0EA 4927             (        forth.asm):02483                 fdb     $4927
F0EC F0E1             (        forth.asm):02484                 fdb     RFETCH
F0EE C7               (        forth.asm):02485                 RFCS
F0EF C601             (        forth.asm):02486 (2)             ldb     #1
F0F1 20D8             (        forth.asm):02487 (3)             bra     ARPICKN
                      (        forth.asm):02488         
F0F3 41               (        forth.asm):02489         INDJ    fcb     $41             79-STANDARD (REQ225)
F0F4 4A               (        forth.asm):02490                 fcc     'J'
F0F5 F0E9             (        forth.asm):02491                 fdb     INDIP
F0F7 C7               (        forth.asm):02492                 RFCS
F0F8 C602             (        forth.asm):02493 (2)             ldb     #2
F0FA 20CF             (        forth.asm):02494 (3)             bra     ARPICKN
                      (        forth.asm):02495         
F0FC 42               (        forth.asm):02496         INDJP   fcb     $42             Non-standard
F0FD 4A27             (        forth.asm):02497                 fdb     $4A27
F0FF F0F3             (        forth.asm):02498                 fdb     INDJ
F101 C7               (        forth.asm):02499                 RFCS
F102 C603             (        forth.asm):02500 (2)             ldb     #3
F104 20C5             (        forth.asm):02501 (3)             bra     ARPICKN
                      (        forth.asm):02502         
F106 41               (        forth.asm):02503         INDK    fcb     $41             79-STANDARD (REF)
F107 4B               (        forth.asm):02504                 fcc     'K'
F108 F0FC             (        forth.asm):02505                 fdb     INDJP
F10A C7               (        forth.asm):02506                 RFCS
F10B C604             (        forth.asm):02507 (2)             ldb     #4
F10D 20BC             (        forth.asm):02508 (3)             bra     ARPICKN
                      (        forth.asm):02509         
F10F 04               (        forth.asm):02510         QUIT    fcb     4               79-STANDARD (REQ211)
F110 51554954         (        forth.asm):02511                 fcc     'QUIT'
F114 F106             (        forth.asm):02512                 fdb     INDK
F116 C7               (        forth.asm):02513                 RFCS
F117 0F21             (        forth.asm):02514 (5)             clr     USTATE+1
F119 BDEB84           (        forth.asm):02515                 RFXT    jsr,RCLR+7      XT for RCLR
F11C 10CE8000         (        forth.asm):02516 (4)             lds     #RAMSTRT+RAMSIZE Reset the system stack pointer
F120 BDE300           (        forth.asm):02517 (7)             jsr     PUTCR
F123 7EE0B2           (        forth.asm):02518 (3)             jmp     INTERP
                      (        forth.asm):02519         
F126 05               (        forth.asm):02520         ABORT   fcb     5               79-STANDARD (REQ101)
F127 41424F5254       (        forth.asm):02521                 fcc     'ABORT'
F12C F10F             (        forth.asm):02522                 fdb     QUIT
F12E C7               (        forth.asm):02523                 RFCS
F12F BDEB78           (        forth.asm):02524                 RFXT    jsr,NCLR+7      XT for NCLR
F132 BDEB84           (        forth.asm):02525                 RFXT    jsr,RCLR+7      XT for RCLR
F135 C603             (        forth.asm):02526 (2)             ldb     #3
F137 BDE76A           (        forth.asm):02527 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02528         
F13A 04               (        forth.asm):02529         FIND    fcb     4               79-STANDARD (REQ203)
F13B 46494E44         (        forth.asm):02530                 fcc     'FIND'          ( -- XT )
F13F F126             (        forth.asm):02531                 fdb     ABORT
F141 C7               (        forth.asm):02532                 RFCS
F142 1FC2             (        forth.asm):02533 (4)             tfr     0,y             Default return value is zero
F144 BDE83F           (        forth.asm):02534 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
F147 6D84             (        forth.asm):02535 (5+0)           tst     ,x
F149 2711             (        forth.asm):02536 (3)             beq     @find1
F14B BDE38E           (        forth.asm):02537 (7)             jsr     SCNSTOK
F14E 270C             (        forth.asm):02538 (3)             beq     @find1
F150 BDE4A9           (        forth.asm):02539 (7)             jsr     SWDIC
F153 DC0E             (        forth.asm):02540 (4)             ldd     PLOAD           Retrieve word payload
F155 DD10             (        forth.asm):02541 (4)             std     FNDPLD          Make it accessible through PAYLOAD
F157 DC04             (        forth.asm):02542 (4)             ldd     TOKENEP
F159 BDE177           (        forth.asm):02543 (7)             jsr     U2INFRD         Derive >IN from D
F15C 1F21             (        forth.asm):02544 (4)     @find1  tfr     y,x
F15E 7EE7EB           (        forth.asm):02545 (3)             jmp     NPUSH
                      (        forth.asm):02546         
F161 01               (        forth.asm):02547         RBRACK  fcb     1               79-STANDARD (REQ126)
F162 5D               (        forth.asm):02548                 fcc     ']'
F163 F13A             (        forth.asm):02549                 fdb     FIND
F165 C7               (        forth.asm):02550                 RFCS
F166 8601             (        forth.asm):02551 (2)             lda     #1
F168 9721             (        forth.asm):02552 (3)             sta     USTATE+1
F16A 39               (        forth.asm):02553 (4)             rts
                      (        forth.asm):02554         
                      (        forth.asm):02555         * Note: the standard does not mandate that this primitive be executed in
                      (        forth.asm):02556         * definitions only. IMHO, it ought to, therefore I am forcing the C bit here.
F16B C1               (        forth.asm):02557         LBRACK  fcb     $C1             79-STANDARD (REQ125)
F16C 5B               (        forth.asm):02558                 fcc     '['
F16D F161             (        forth.asm):02559                 fdb     RBRACK
F16F C7               (        forth.asm):02560                 RFCS
F170 0F21             (        forth.asm):02561 (5)             clr     USTATE+1
F172 39               (        forth.asm):02562 (4)             rts
                      (        forth.asm):02563         
                      (        forth.asm):02564         * Functionally: : ['] FIND POSTPONE LITERAL ; IMMEDIATE RESTRICT
F173 C3               (        forth.asm):02565         BKQUOT  fcb     $C3             ANSI (Core)
F174 5B275D           (        forth.asm):02566                 fcb     $5B,$27,$5D
F177 F16B             (        forth.asm):02567                 fdb     LBRACK
F179 C7               (        forth.asm):02568                 RFCS
F17A 8DC6             (        forth.asm):02569                 RFXT    bsr,FIND+7      XT for FIND
                      (        forth.asm):02570         * Data stack topmost cell has the target word address.
F17C 7EEC04           (        forth.asm):02571                 RFXT    jmp,LITERAL+10  XT for LITERAL
                      (        forth.asm):02572         
F17F C8               (        forth.asm):02573         POSTPON fcb     $C8             ANSI (Core)
F180 504F5354504F4E45 (        forth.asm):02574                 fcc     'POSTPONE'      Not a straight alias to [COMPILE]
F188 F173             (        forth.asm):02575                 fdb     BKQUOT          Non-immediate words deserve special treatment
F18A C7               (        forth.asm):02576                 RFCS
F18B BDE83F           (        forth.asm):02577 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
F18E 6D84             (        forth.asm):02578 (5+0)           tst     ,x
F190 2605             (        forth.asm):02579 (3)             bne     @postp2
F192 C605             (        forth.asm):02580 (2)     @postp1 ldb     #5              Missing word name
F194 BDE76A           (        forth.asm):02581 (7)             jsr     ERRHDLR         No return
F197 BDE38E           (        forth.asm):02582 (7)     @postp2 jsr     SCNSTOK
F19A 27F6             (        forth.asm):02583 (3)             beq     @postp1
F19C BDE4A9           (        forth.asm):02584 (7)             jsr     SWDIC
F19F 2607             (        forth.asm):02585 (3)             bne     @postp3         Word found. Code address returned in Y
F1A1 9E02             (        forth.asm):02586 (4)             ldx     TOKENSP
F1A3 C602             (        forth.asm):02587 (2)             ldb     #2              Undefined (X points to the offending word)
F1A5 BDE76A           (        forth.asm):02588 (7)             jsr     ERRHDLR         No return
F1A8 1F21             (        forth.asm):02589 (4)     @postp3 tfr     y,x             X has the actual execution token
F1AA 0D39             (        forth.asm):02590 (4)             tst     IMDFLG
F1AC 2708             (        forth.asm):02591 (3)             beq     @postp5         Target word is not immediate
F1AE BDE169           (        forth.asm):02592 (7)     @postp4 jsr     EMXASXT         Set as action component
F1B1 DC02             (        forth.asm):02593 (4)             ldd     TOKENSP         Updated by SWDIC if the word was found
F1B3 7EE177           (        forth.asm):02594 (3)             jmp     U2INFRD         Derive >IN from D
                      (        forth.asm):02595         * The word being considered is non-immediate. The equivalent input should be:
                      (        forth.asm):02596         * ['] <word> COMPILE, We have the XT for <word> in X.
F1B6 BDE578           (        forth.asm):02597 (7)     @postp5 jsr     LITER
F1B9 8EF1CA           (        forth.asm):02598                 RFXT    ldx,#CMPCOMA+11 XT for COMPILE,
F1BC 20F0             (        forth.asm):02599 (3)             bra     @postp4
                      (        forth.asm):02600         
                      (        forth.asm):02601         * Like the 79-STANDARD COMPILE word, GNU Forth has this as a compile-only word.
                      (        forth.asm):02602         * This is a wise choice since it allows us to possibly optimize it.
F1BE 48               (        forth.asm):02603         CMPCOMA fcb     $48             ANSI (Core Ext)
F1BF 434F4D50494C452C (        forth.asm):02604                 fcc     'COMPILE,'      ( XT -- )
F1C7 F17F             (        forth.asm):02605                 fdb     POSTPON
F1C9 C7               (        forth.asm):02606                 RFCS
F1CA BDE7F9           (        forth.asm):02607 (7)             jsr     NPOP            Execution token to X
F1CD 7EE169           (        forth.asm):02608 (3)             jmp     EMXASXT
                      (        forth.asm):02609         
                      (        forth.asm):02610         * As per the standard, : is not immediate. This allows for further interesting
                      (        forth.asm):02611         * developments, like tracing words execution...
F1D0 01               (        forth.asm):02612         COMPC   fcb     $1              79-STANDARD (REQ116)
F1D1 3A               (        forth.asm):02613                 fcc     ':'
F1D2 F1BE             (        forth.asm):02614                 fdb     CMPCOMA
F1D4 C7               (        forth.asm):02615                 RFCS
F1D5 8601             (        forth.asm):02616 (2)             lda     #1
F1D7 9721             (        forth.asm):02617 (3)             sta     USTATE+1
F1D9 104F             (        forth.asm):02618 (2)             clrd
F1DB DD14             (        forth.asm):02619 (4)             std     JSRLAST
F1DD 8602             (        forth.asm):02620 (2)             lda     #2
F1DF 9730             (        forth.asm):02621 (3)             sta     RTSREMV         Optimistic strategy: remove the final RTS
F1E1 962E             (        forth.asm):02622 (3)             lda     RDEPTH
F1E3 972F             (        forth.asm):02623 (3)             sta     IRDPTH          Meant to check for unbalanced constructs
F1E5 7EE517           (        forth.asm):02624 (3)             jmp     LOCWRT
                      (        forth.asm):02625         
F1E8 C1               (        forth.asm):02626         COMPR   fcb     $C1             79-STANDARD (REQ196)
F1E9 3B               (        forth.asm):02627                 fcc     ';'
F1EA F1D0             (        forth.asm):02628                 fdb     COMPC
F1EC C7               (        forth.asm):02629                 RFCS
F1ED 962E             (        forth.asm):02630 (3)             lda     RDEPTH          Return stack depth
F1EF 912F             (        forth.asm):02631 (3)             cmpa    IRDPTH          Same as when : was entered?
F1F1 2705             (        forth.asm):02632 (3)             beq     @compr1
F1F3 C609             (        forth.asm):02633 (2)             ldb     #9              Illegal construct if not
F1F5 BDE76A           (        forth.asm):02634 (7)             jsr     ERRHDLR         No return
F1F8 0F21             (        forth.asm):02635 (5)     @compr1 clr     USTATE+1        Back to interpretation mode
F1FA 9E0C             (        forth.asm):02636 (4)             ldx     BDICEND
F1FC 9F06             (        forth.asm):02637 (4)             stx     LSTWAD          Update LAST
F1FE 9E08             (        forth.asm):02638 (4)             ldx     DICEND
                      (        forth.asm):02639         * Optimization: replace the last JSR by a JMP, if possible.
F200 DC14             (        forth.asm):02640 (4)             ldd     JSRLAST
F202 2712             (        forth.asm):02641 (3)             beq     @compr3         We need an RTS
F204 301D             (        forth.asm):02642 (4+1)           leax    -3,x
F206 9C14             (        forth.asm):02643 (4)             cmpx    JSRLAST
F208 2604             (        forth.asm):02644 (3)             bne     @compr2
F20A 867E             (        forth.asm):02645 (2)             lda     #JMPOPC         JMP extended
F20C A784             (        forth.asm):02646 (4+0)           sta     ,x
                      (        forth.asm):02647         * At this point we still have to emit an RTS unless RTSREMV is 2 or more.
F20E 3003             (        forth.asm):02648 (4+1)   @compr2 leax    3,x
F210 9630             (        forth.asm):02649 (3)             lda     RTSREMV
F212 8102             (        forth.asm):02650 (2)             cmpa    #2
F214 2404             (        forth.asm):02651 (3)             bhs     @compr4         Optimization applies. We have no forward refs
F216 8639             (        forth.asm):02652 (2)     @compr3 lda     #RTSOPC         RTS inherent
F218 A780             (        forth.asm):02653 (4+1)           sta     ,x+
F21A                  (        forth.asm):02654         @compr4
                      (        forth.asm):02655                 IFNE    DEBUG
                      (        forth.asm):02656                 lda     #ILLOPC         Illegal opcode
                      (        forth.asm):02657                 sta     ,x+
                      (        forth.asm):02658                 ENDC                    DEBUG
F21A 9F08             (        forth.asm):02659 (4)             stx     DICEND          Update HERE
                      (        forth.asm):02660                 IFNE    RELFEAT
F21C BDEC98           (        forth.asm):02661                 RFXT    jsr,MONITOR+10  XT for MONITOR. All : words are candidates
                      (        forth.asm):02662         *                               for integrity check by ICHECK.
                      (        forth.asm):02663                 ENDC                    RELFEAT
F21F 39               (        forth.asm):02664 (4)             rts
                      (        forth.asm):02665         
F220 C7               (        forth.asm):02666         RECURSE fcb     $C7             FORTH-83
F221 52454355525345   (        forth.asm):02667                 fcc     'RECURSE'
F228 F1E8             (        forth.asm):02668                 fdb     COMPR
F22A C7               (        forth.asm):02669                 RFCS
F22B 9E12             (        forth.asm):02670 (4)             ldx     RECADDR         Set up by LOCWRT
F22D 7EE169           (        forth.asm):02671 (3)             jmp     EMXASXT         Set as action component
                      (        forth.asm):02672         
F230 06               (        forth.asm):02673         FORGET  fcb     6               79-STANDARD (REQ196)
F231 464F52474554     (        forth.asm):02674                 fcc     'FORGET'
F237 F220             (        forth.asm):02675                 fdb     RECURSE
F239 C7               (        forth.asm):02676                 RFCS
F23A BDE83F           (        forth.asm):02677 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
F23D 6D84             (        forth.asm):02678 (5+0)           tst     ,x              EOL?
F23F 2605             (        forth.asm):02679 (3)             bne     @frgt2          No
F241 C605             (        forth.asm):02680 (2)     @frgt1  ldb     #5              Missing word name
F243 BDE76A           (        forth.asm):02681 (7)             jsr     ERRHDLR         No return
F246 BDE38E           (        forth.asm):02682 (7)     @frgt2  jsr     SCNSTOK
F249 27F6             (        forth.asm):02683 (3)             beq     @frgt1          EOL before a non-SP character could be acquired
F24B BDE4A9           (        forth.asm):02684 (7)             jsr     SWDIC           SWDIC uses TOKENSP as input--not X!!
F24E 2607             (        forth.asm):02685 (3)             bne     @frgt3          Word found. XT returned in Y
F250 9E02             (        forth.asm):02686 (4)             ldx     TOKENSP
F252 C602             (        forth.asm):02687 (2)             ldb     #2              Undefined (X points to the offending word)
F254 BDE76A           (        forth.asm):02688 (7)             jsr     ERRHDLR         No return
F257 1F21             (        forth.asm):02689 (4)     @frgt3  tfr     y,x             Y and X have the word's XT
F259 108C0C65         (        forth.asm):02690 (4)             cmpy    #RAMFTCH
F25D 2719             (        forth.asm):02691 (3)             beq     @frgt4
F25F 108CE000         (        forth.asm):02692 (4)             cmpy    #ROMSTRT
F263 2413             (        forth.asm):02693 (3)             bhs     @frgt4
                      (        forth.asm):02694                 IFNE    RELFEAT
F265 AE1D             (        forth.asm):02695 (5+1)           ldx     -3,x            Backlink to X
F267 9F06             (        forth.asm):02696 (4)             stx     LSTWAD          Update LAST
F269 303C             (        forth.asm):02697 (4+1)           leax    -4,y            XT-4 to X (1B/attr, 2B/backlink, 1B/checksum)
                      (        forth.asm):02698                 ELSE
                      (        forth.asm):02699                 ldx     -2,x            Backlink to X
                      (        forth.asm):02700                 stx     LSTWAD          Update LAST
                      (        forth.asm):02701                 leax    -3,y            XT-3 to X (1B/attr, 2B/backlink)
                      (        forth.asm):02702                 ENDC                    RELFEAT
F26B 4F               (        forth.asm):02703 (1)             clra
F26C D638             (        forth.asm):02704 (3)             ldb     CURTOKL         Token name length to D
F26E 103201           (        forth.asm):02705 (4)             subr    d,x             Substract word length
F271 9F08             (        forth.asm):02706 (4)             stx     DICEND          Update HERE
F273 DC02             (        forth.asm):02707 (4)             ldd     TOKENSP         Set by SWDIC to point to the end of the token
F275 7EE177           (        forth.asm):02708 (3)             jmp     U2INFRD         Derive >IN from D
F278 C60B             (        forth.asm):02709 (2)     @frgt4  ldb     #11             Word is unforgettable
F27A BDE76A           (        forth.asm):02710 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02711         
F27D 07               (        forth.asm):02712         EXCT    fcb     7               79-STANDARD (REQ163)
F27E 45584543555445   (        forth.asm):02713                 fcc     'EXECUTE'
F285 F230             (        forth.asm):02714                 fdb     FORGET
F287 C7               (        forth.asm):02715                 RFCS
F288 BDE7F9           (        forth.asm):02716 (7)             jsr     NPOP
F28B 1037C1           (        forth.asm):02717 (4)             cmpr    0,x             Although the standard does not specify that
F28E 2702             (        forth.asm):02718 (3)             beq     @exct1          a NUL address should trigger an error, I do
F290 1F15             (        forth.asm):02719 (4)             tfr     x,pc
F292 C60D             (        forth.asm):02720 (2)     @exct1  ldb     #13             Illegal argument
F294 BDE76A           (        forth.asm):02721 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02722         
F297 03               (        forth.asm):02723         BYE     fcb     3               ANSI (Programming tools)
F298 425945           (        forth.asm):02724                 fcc     'BYE'
F29B F27D             (        forth.asm):02725                 fdb     EXCT
F29D C7               (        forth.asm):02726                 RFCS
                      (        forth.asm):02727                 IFNE    RTCFEAT
                      (        forth.asm):02728                 lda     #RTOREGB
                      (        forth.asm):02729                 jsr     RTREGRD         RTCB register to B
                      (        forth.asm):02730                 andb    #^RTBPIE        Disable periodic interrupt generation
                      (        forth.asm):02731                 jsr     RTREGWR
                      (        forth.asm):02732                 ldx     #40
                      (        forth.asm):02733                 jsr     MILLIS1         Wait for 40 milliseconds
                      (        forth.asm):02734                 orcc    #(FFLAG|IFLAG)  Disable maskable interrupts
                      (        forth.asm):02735                 ENDC                    RTCFEAT
F29E 7EE037           (        forth.asm):02736 (3)             jmp     RSTHDL
                      (        forth.asm):02737         
F2A1 C6               (        forth.asm):02738         BKCHAR  fcb     $C6             ANSI (Core)
F2A2 5B434841525D     (        forth.asm):02739                 fcc     '[CHAR]'
F2A8 F297             (        forth.asm):02740                 fdb     BYE
F2AA C7               (        forth.asm):02741                 RFCS
F2AB 8D0B             (        forth.asm):02742                 RFXT    bsr,CHAR+7      XT for CHAR
F2AD 7EEC04           (        forth.asm):02743                 RFXT    jmp,LITERAL+10  XT for LITERAL
                      (        forth.asm):02744         
F2B0 04               (        forth.asm):02745         CHAR    fcb     4               ANSI (Core)
F2B1 43484152         (        forth.asm):02746                 fcc     'CHAR'
F2B5 F2A1             (        forth.asm):02747                 fdb     BKCHAR
F2B7 C7               (        forth.asm):02748                 RFCS
F2B8 BDE83F           (        forth.asm):02749 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
F2BB BDE38E           (        forth.asm):02750 (7)     @char1  jsr     SCNSTOK         X points to the beginning of the character
F2BE 2712             (        forth.asm):02751 (3)             beq     @chrerr
F2C0 E684             (        forth.asm):02752 (4+0)           ldb     ,x
F2C2 4F               (        forth.asm):02753 (1)             clra
F2C3 1F01             (        forth.asm):02754 (4)             tfr     d,x
F2C5 BDE7EB           (        forth.asm):02755 (7)             jsr     NPUSH
F2C8 9E02             (        forth.asm):02756 (4)             ldx     TOKENSP         Set by SCNSTOK
F2CA BDE39C           (        forth.asm):02757 (7)             jsr     SCNETOK
F2CD 1F10             (        forth.asm):02758 (4)             tfr     x,d             TOKENEP
F2CF 7EE177           (        forth.asm):02759 (3)             jmp     U2INFRD         Derive >IN from D
F2D2 C60D             (        forth.asm):02760 (2)     @chrerr ldb     #13             Illegal argument
F2D4 BDE76A           (        forth.asm):02761 (7)             jsr     ERRHDLR
                      (        forth.asm):02762         * No return.
                      (        forth.asm):02763         
                      (        forth.asm):02764         * Hairy code but working.
F2D7 04               (        forth.asm):02765         WORD    fcb     4               79-STANDARD (REQ181)
F2D8 574F5244         (        forth.asm):02766                 fcc     'WORD'          ( char -- addr )
F2DC F2B0             (        forth.asm):02767                 fdb     CHAR
F2DE C7               (        forth.asm):02768                 RFCS
F2DF BDE7F9           (        forth.asm):02769 (7)             jsr     NPOP
F2E2 1F16             (        forth.asm):02770 (4)             tfr     x,w             F has the delimiter ASCII code
F2E4 109E08           (        forth.asm):02771 (5)             ldy     DICEND          The counted string returned is stored at HERE
F2E7 3420             (        forth.asm):02772 (4+2)           pshs    y
F2E9 6FA0             (        forth.asm):02773 (6+1)           clr     ,y+             Initialize its length
F2EB BDE83F           (        forth.asm):02774 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
F2EE 6D84             (        forth.asm):02775 (5+0)           tst     ,x              EOL reached?
F2F0 2605             (        forth.asm):02776 (3)             bne     @word1          No, proceed
F2F2 3510             (        forth.asm):02777 (4+2)   @word0  puls    x
F2F4 3610             (        forth.asm):02778                 UCNPUSH                 Push back HERE
F2F6 39               (        forth.asm):02779 (4)             rts
F2F7 3001             (        forth.asm):02780 (4+1)   @word1  leax    1,x             Skip space character after WORD or leading delim
F2F9 A684             (        forth.asm):02781 (4+0)           lda     ,x
F2FB 2716             (        forth.asm):02782 (3)             beq     @word5          EOL reached, this is the end
F2FD 1037F8           (        forth.asm):02783 (4)             cmpr    f,a             Leading delimiter matched?
F300 27F5             (        forth.asm):02784 (3)             beq     @word1          Yes
F302 A680             (        forth.asm):02785 (4+1)   @word2  lda     ,x+             Acquire next character from the input stream
F304 A7A0             (        forth.asm):02786 (4+1)   @word3  sta     ,y+
F306 2709             (        forth.asm):02787 (3)             beq     @word4          EOL reached
F308 1037F8           (        forth.asm):02788 (4)             cmpr    f,a             Trailing delimiter?
F30B 2706             (        forth.asm):02789 (3)             beq     @word5
F30D 6CF4             (        forth.asm):02790 (6+3)           inc     [,s]            Increment string length
F30F 20F1             (        forth.asm):02791 (3)             bra     @word2
F311 301F             (        forth.asm):02792 (4+1)   @word4  leax    -1,x            EOL reached
F313 1F10             (        forth.asm):02793 (4)     @word5  tfr     x,d             Pointing one char after the delimiter or to NUL
F315 BDE177           (        forth.asm):02794 (7)             jsr     U2INFRD         Derive >IN from D
F318 20D8             (        forth.asm):02795 (3)             bra     @word0
                      (        forth.asm):02796         
F31A 81               (        forth.asm):02797         LPAR    fcb     $81             79-STANDARD (REQ122)
F31B 28               (        forth.asm):02798                 fcc     '('
F31C F2D7             (        forth.asm):02799                 fdb     WORD
F31E C7               (        forth.asm):02800                 RFCS
F31F BDE83F           (        forth.asm):02801 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
F322 A680             (        forth.asm):02802 (4+1)   @lpar1  lda     ,x+
F324 2709             (        forth.asm):02803 (3)             beq     @lparx          Input stream exhausted before ) is matched
F326 8129             (        forth.asm):02804 (2)             cmpa    #')
F328 26F8             (        forth.asm):02805 (3)             bne     @lpar1
F32A 1F10             (        forth.asm):02806 (4)             tfr     x,d             Just matched )
F32C 7EE177           (        forth.asm):02807 (3)             jmp     U2INFRD         Derive >IN from D
F32F C60C             (        forth.asm):02808 (2)     @lparx  ldb     #12             Missing delimiter
F331 BDE76A           (        forth.asm):02809 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02810         
F334 06               (        forth.asm):02811         SOURCE  fcb     6               ANSI (Core)
F335 534F55524345     (        forth.asm):02812                 fcc     'SOURCE'        ( -- baseaddr charcount )
F33B F31A             (        forth.asm):02813                 fdb     LPAR
F33D C7               (        forth.asm):02814                 RFCS
F33E 9E1C             (        forth.asm):02815 (4)             ldx     BSBFADR
F340 BDE7EB           (        forth.asm):02816 (7)             jsr     NPUSH
F343 8E0400           (        forth.asm):02817 (3)             ldx     #BLKSIZ         Non-zero block size
F346 DC24             (        forth.asm):02818 (4)             ldd     UBLK
F348 2605             (        forth.asm):02819 (3)             bne     @srcdon         Current BLK is NZ
F34A 4F               (        forth.asm):02820 (1)             clra
F34B D62D             (        forth.asm):02821 (3)             ldb     CMDLNSZ         Character count entered through GETS in INTERP
F34D 1F01             (        forth.asm):02822 (4)             tfr     d,x
F34F 7EE7EB           (        forth.asm):02823 (3)     @srcdon jmp     NPUSH
                      (        forth.asm):02824         
                      (        forth.asm):02825         * This is a straightforward implementation borrowed from GNU Forth 'see \':
                      (        forth.asm):02826         * : \
                      (        forth.asm):02827         *   BLK @
                      (        forth.asm):02828         *   IF     >IN @ C/L / 1+ C/L * >IN ! EXIT
                      (        forth.asm):02829         *   THEN
                      (        forth.asm):02830         *   SOURCE >IN ! DROP ; IMMEDIATE
                      (        forth.asm):02831         * However since C/L (number of columns per line) is 64 (a power of 2), things
                      (        forth.asm):02832         * can be coded in a more compact manner as: >IN @ 63 COM AND 64 + >IN !
F352 81               (        forth.asm):02833         BKSLSH  fcb     $81             ANSI (Block Ext)
F353 5C               (        forth.asm):02834                 fcb     $5C             \ ( -- )
F354 F334             (        forth.asm):02835                 fdb     SOURCE
F356 C7               (        forth.asm):02836                 RFCS
F357 DC24             (        forth.asm):02837 (4)             ldd     UBLK            BLK @ to D
F359 270B             (        forth.asm):02838 (3)             beq     @comser         We operate from block 0: the console
F35B DC22             (        forth.asm):02839 (4)             ldd     UTOIN           >IN @
F35D C4C0             (        forth.asm):02840 (2)             andb    #^$3F           Point to the beginning of the line
F35F CB40             (        forth.asm):02841 (2)             addb    #$40            next line
F361 8900             (        forth.asm):02842 (2)             adca    #0              Propagate potential carry from LSB
F363 DD22             (        forth.asm):02843 (4)             std     UTOIN           >IN !
F365 39               (        forth.asm):02844 (4)             rts                     EXIT
F366 8DD6             (        forth.asm):02845         @comser RFXT    bsr,SOURCE+9    XT for SOURCE
F368 BDE7F9           (        forth.asm):02846 (7)             jsr     NPOP
F36B 9F22             (        forth.asm):02847 (4)             stx     UTOIN           >IN !
F36D 7EFC2B           (        forth.asm):02848                 RFXT    jmp,DROP+7      XT for DROP
                      (        forth.asm):02849                 ENDC
                      (        forth.asm):02850         
F370 82               (        forth.asm):02851         PSTR    fcb     $82             79-STANDARD (REQ133)
F371 2E22             (        forth.asm):02852                 fcc     '."'
F373 F352             (        forth.asm):02853                 fdb     BKSLSH
F375 C7               (        forth.asm):02854                 RFCS
F376 8D13             (        forth.asm):02855                 RFXT    bsr,SQUOTE+5    XT for S"
F378 0D21             (        forth.asm):02856 (4)             tst     USTATE+1
F37A 2603             (        forth.asm):02857 (3)             bne     @pstcmp
F37C 7EF737           (        forth.asm):02858                 RFXT    jmp,TYPE+7      XT for TYPE
F37F 8EF737           (        forth.asm):02859         @pstcmp RFXT    ldx,#TYPE+7     Emit TYPE as an XT
F382 7EE169           (        forth.asm):02860 (3)             jmp     EMXASXT
                      (        forth.asm):02861         
F385 82               (        forth.asm):02862         SQUOTE  fcb     $82             ANSI (Core)
F386 5322             (        forth.asm):02863                 fcc     'S"'
F388 F370             (        forth.asm):02864                 fdb     PSTR
F38A C7               (        forth.asm):02865                 RFCS
F38B 0D21             (        forth.asm):02866 (4)             tst     USTATE+1
F38D 260C             (        forth.asm):02867 (3)             bne     @sqcmp
F38F 8E0022           (        forth.asm):02868 (3)             ldx     #'"             We are inperpreting
F392 BDE7EB           (        forth.asm):02869 (7)             jsr     NPUSH
F395 BDF2DF           (        forth.asm):02870                 RFXT    jsr,WORD+7      XT for WORD
F398 7EF756           (        forth.asm):02871                 RFXT    jmp,COUNT+8     XT for COUNT
F39B 109E08           (        forth.asm):02872 (5)     @sqcmp  ldy     DICEND          We are compiling
F39E 867E             (        forth.asm):02873 (2)             lda     #JMPOPC         JMP extended
F3A0 A7A0             (        forth.asm):02874 (4+1)           sta     ,y+
F3A2 3420             (        forth.asm):02875 (4+2)           pshs    y
F3A4 3122             (        forth.asm):02876 (4+1)           leay    2,y             2 ALLOT
F3A6 109F08           (        forth.asm):02877 (5)             sty     DICEND
F3A9 8E0022           (        forth.asm):02878 (3)             ldx     #'"
F3AC BDE7EB           (        forth.asm):02879 (7)             jsr     NPUSH
F3AF BDF2DF           (        forth.asm):02880                 RFXT    jsr,WORD+7      XT for WORD
F3B2 BDE7F9           (        forth.asm):02881 (7)             jsr     NPOP
F3B5 4F               (        forth.asm):02882 (1)             clra
F3B6 E684             (        forth.asm):02883 (4+0)           ldb     ,x              C@
F3B8 3001             (        forth.asm):02884 (4+1)           leax    1,x             1+. Skip the byte count (X has HERE)
F3BA 308B             (        forth.asm):02885 (4+2)           leax    d,x             Skip string length material
F3BC 3520             (        forth.asm):02886 (4+2)           puls    y
F3BE AFA4             (        forth.asm):02887 (5+0)           stx     ,y              Install jump address
F3C0 3122             (        forth.asm):02888 (4+1)           leay    2,y             Counted string base address to Y
F3C2 868E             (        forth.asm):02889 (2)             lda     #LDXOPC
F3C4 A780             (        forth.asm):02890 (4+1)           sta     ,x+
F3C6 10AF81           (        forth.asm):02891 (6+2)           sty     ,x++
F3C9 9F08             (        forth.asm):02892 (4)             stx     DICEND          Update HERE
F3CB 8EE7EB           (        forth.asm):02893 (3)             ldx     #NPUSH
F3CE BDE169           (        forth.asm):02894 (7)             jsr     EMXASXT
F3D1 8EF756           (        forth.asm):02895                 RFXT    ldx,#COUNT+8    XT for COUNT
F3D4 7EE169           (        forth.asm):02896 (3)             jmp     EMXASXT
                      (        forth.asm):02897         
                      (        forth.asm):02898         * Transactional behaviour is guaranteed here. What this means is that the
                      (        forth.asm):02899         * operation will preserve the data stack contents, should insufficient
                      (        forth.asm):02900         * parameters be supplied. It is a very desirable feature (for debugging
                      (        forth.asm):02901         * purposes) which will be generalized to a number of other words. As an
                      (        forth.asm):02902         * aside, it also allows us to access the data stack as directly indexed
                      (        forth.asm):02903         * through the 6309 U register, resulting in better performance.
F3D7 02               (        forth.asm):02904         DPLUS   fcb     2               79-STANDARD (REQ241)
F3D8 442B             (        forth.asm):02905                 fcc     'D+'            ( d1 d2 -- d1+d2--signed )
F3DA F385             (        forth.asm):02906                 fdb     SQUOTE          In processor's terms U has ( L1 H1 L2 H2)
F3DC C7               (        forth.asm):02907                 RFCS
F3DD BDE4A4           (        forth.asm):02908 (7)             jsr     MIN4PST         Make sure we have at least 4 cells stacked up
                      (        forth.asm):02909         * At this point sufficient stack depth has been assessed. Let's rock and roll!
F3E0 EC46             (        forth.asm):02910 (5+1)           ldd     6,u             L1
F3E2 E342             (        forth.asm):02911 (5+1)           addd    2,u             L2
F3E4 ED46             (        forth.asm):02912 (5+1)           std     6,u             d1+d2 least significant cell
F3E6 EC44             (        forth.asm):02913 (5+1)           ldd     4,u             H1
F3E8 10A9C4           (        forth.asm):02914 (6+0)           adcd    ,u              H2 (add with carry bit)
F3EB ED44             (        forth.asm):02915 (5+1)           std     4,u             d1+d2 most significant cell
F3ED 3344             (        forth.asm):02916 (4+1)           leau    4,u             Drop 2 cells from the data stack
F3EF 39               (        forth.asm):02917 (4)             rts
                      (        forth.asm):02918         
F3F0 07               (        forth.asm):02919         DNEG    fcb     7               79-STANDARD (REQ245)
F3F1 444E4547415445   (        forth.asm):02920                 fcc     'DNEGATE'
F3F8 F3D7             (        forth.asm):02921                 fdb     DPLUS
F3FA C7               (        forth.asm):02922                 RFCS
F3FB BDE49A           (        forth.asm):02923 (7)             jsr     MIN2PST         We need at least 2 cells stacked up
F3FE 10A642           (        forth.asm):02924 (6+1)           ldw     2,u             Least significant cell
F401 1053             (        forth.asm):02925 (2)             comw
F403 ECC4             (        forth.asm):02926 (5+0)           ldd     ,u              Most significant cell
F405 1043             (        forth.asm):02927 (2)             comd
F407 108B0001         (        forth.asm):02928 (4)             addw    #1
F40B 10890000         (        forth.asm):02929 (4)             adcd    #0              Propagate carry flag
F40F 10EDC4           (        forth.asm):02930 (8+0)           stq     ,u              Store the result back to the data stack
F412 39               (        forth.asm):02931 (4)             rts
                      (        forth.asm):02932         
F413 02               (        forth.asm):02933         DMINUS  fcb     2               79-STANDARD (double number extension)
F414 442D             (        forth.asm):02934                 fcc     'D-'            ( d1 d2 -- d1-d2--signed )
F416 F3F0             (        forth.asm):02935                 fdb     DNEG            In processor's terms U has ( L1 H1 L2 H2)
F418 C7               (        forth.asm):02936                 RFCS
F419 BDE4A4           (        forth.asm):02937 (7)             jsr     MIN4PST         Make sure we have at least 4 cells stacked up
F41C EC46             (        forth.asm):02938 (5+1)           ldd     6,u             L1
F41E A342             (        forth.asm):02939 (5+1)           subd    2,u             L2
F420 ED46             (        forth.asm):02940 (5+1)           std     6,u             d1-d2 least significant cell
F422 EC44             (        forth.asm):02941 (5+1)           ldd     4,u             H1
F424 10A2C4           (        forth.asm):02942 (6+0)           sbcd    ,u              H2 (substract with borrow)
F427 ED44             (        forth.asm):02943 (5+1)           std     4,u             d1-d2 most significant cell
F429 3344             (        forth.asm):02944 (4+1)           leau    4,u
F42B 39               (        forth.asm):02945 (4)             rts
                      (        forth.asm):02946         
F42C 03               (        forth.asm):02947         DZEQ    fcb     3               79-STANDARD (double number extension)
F42D 44303D           (        forth.asm):02948                 fcc     'D0='           ( d -- flag )
F430 F413             (        forth.asm):02949                 fdb     DMINUS
F432 C7               (        forth.asm):02950                 RFCS
F433 BDEE83           (        forth.asm):02951                 RFXT    jsr,OR+5        XT for OR
F436 7EEEFD           (        forth.asm):02952                 RFXT    jmp,NULP+5      XT for 0=
                      (        forth.asm):02953         
                      (        forth.asm):02954         * GNU Forth has:
                      (        forth.asm):02955         * f = FLAG(d1.hi==d2.hi ? d1.lo<d2.lo : d1.hi<d2.hi);
                      (        forth.asm):02956         * Comparisons between high cells are signed, but they are unsigned between
                      (        forth.asm):02957         * the low cells.
F439 02               (        forth.asm):02958         DLESS   fcb     2               79-STANDARD (REQ244)
F43A 443C             (        forth.asm):02959                 fcc     'D<'            ( d1 d2 -- flag )
F43C F42C             (        forth.asm):02960                 fdb     DZEQ
F43E C7               (        forth.asm):02961                 RFCS
F43F BDE4A4           (        forth.asm):02962 (7)             jsr     MIN4PST
                      (        forth.asm):02963         * Data stack structure at this point:
                      (        forth.asm):02964         * ,u    d2.hi                   1 cell
                      (        forth.asm):02965         * 2,u   d2.lo                   1 cell
                      (        forth.asm):02966         * 4,u   d1.hi                   1 cell
                      (        forth.asm):02967         * 6,u   d1.lo                   1 cell
F442 115F             (        forth.asm):02968 (2)             clrf                    A priori return value for FLAG
F444 ECC4             (        forth.asm):02969 (5+0)           ldd     ,u              D2.HI
F446 10A344           (        forth.asm):02970 (6+1)           cmpd    4,u             D1.HI
F449 2611             (        forth.asm):02971 (3)             bne     @term2
F44B EC42             (        forth.asm):02972 (5+1)           ldd     2,u             D2.LO
F44D 10A346           (        forth.asm):02973 (6+1)           cmpd    6,u             D1.LO
F450 2302             (        forth.asm):02974 (3)             bls     @done
F452 115C             (        forth.asm):02975 (2)     @setto1 incf
F454 11E747           (        forth.asm):02976 (5+1)   @done   stf     7,u             FLAG's LSB
F457 6F46             (        forth.asm):02977 (6+1)           clr     6,u             FLAG's MSB
F459 3346             (        forth.asm):02978 (4+1)           leau    6,u             Drop three cells fron the data stack
F45B 39               (        forth.asm):02979 (4)             rts
F45C 2FF6             (        forth.asm):02980 (3)     @term2  ble     @done
F45E 20F2             (        forth.asm):02981 (3)             bra     @setto1
                      (        forth.asm):02982         
F460 05               (        forth.asm):02983         TWOOVER fcb     5               79-STANDARD (double number extension)
F461 324F564552       (        forth.asm):02984                 fcc     '2OVER'         ( d1 d2 -- d1 d2 d1 )
F466 F439             (        forth.asm):02985                 fdb     DLESS
F468 C7               (        forth.asm):02986                 RFCS
F469 BDE4A4           (        forth.asm):02987 (7)             jsr     MIN4PST         At least four cells need to be stacked up
F46C 10EC44           (        forth.asm):02988 (8+1)           ldq     4,u             D:W has MSC:LSC of D1
F46F 1F61             (        forth.asm):02989 (4)             tfr     w,x
F471 BDE7EB           (        forth.asm):02990 (7)             jsr     NPUSH
F474 1F01             (        forth.asm):02991 (4)             tfr     d,x
F476 7EE7EB           (        forth.asm):02992 (3)             jmp     NPUSH
                      (        forth.asm):02993         
F479 05               (        forth.asm):02994         TWOSWAP fcb     5               79-STANDARD (double number extension)
F47A 3253574150       (        forth.asm):02995                 fcc     '2SWAP'         ( d1 d2 -- d2 d1 )
F47F F460             (        forth.asm):02996                 fdb     TWOOVER
F481 C7               (        forth.asm):02997                 RFCS
F482 BDE4A4           (        forth.asm):02998 (7)             jsr     MIN4PST         At least four cells must be stacked up
F485 AE44             (        forth.asm):02999 (5+1)           ldx     4,u             D1 most significant cell
F487 10AE46           (        forth.asm):03000 (6+1)           ldy     6,u             D1 least significant cell
F48A 10ECC4           (        forth.asm):03001 (8+0)           ldq     ,u              D:W has MSC:LSC of D2
F48D 10ED44           (        forth.asm):03002 (8+1)           stq     4,u
F490 AFC4             (        forth.asm):03003 (5+0)           stx     ,u
F492 10AF42           (        forth.asm):03004 (6+1)           sty     2,u
F495 39               (        forth.asm):03005 (4)             rts
                      (        forth.asm):03006         
F496 05               (        forth.asm):03007         TWODROP fcb     5               79-STANDARD (double number extension)
F497 3244524F50       (        forth.asm):03008                 fcc     '2DROP'         ( d -- )
F49C F479             (        forth.asm):03009                 fdb     TWOSWAP
F49E C7               (        forth.asm):03010                 RFCS
F49F BDE49A           (        forth.asm):03011 (7)             jsr     MIN2PST         At least two cells must be stacked up
F4A2 3344             (        forth.asm):03012 (4+1)           leau    4,u
F4A4 39               (        forth.asm):03013 (4)             rts
                      (        forth.asm):03014         
F4A5 04               (        forth.asm):03015         TWODUP  fcb     4               79-STANDARD (double number extension)
F4A6 32445550         (        forth.asm):03016                 fcc     '2DUP'          ( double -- double double )
F4AA F496             (        forth.asm):03017                 fdb     TWODROP
F4AC C7               (        forth.asm):03018                 RFCS
F4AD BDE49A           (        forth.asm):03019 (7)             jsr     MIN2PST         At least two cells need to be stacked up
F4B0 10ECC4           (        forth.asm):03020 (8+0)           ldq     ,u              D:W has MSC:LSC of DOUBLE
F4B3 1F61             (        forth.asm):03021 (4)             tfr     w,x
F4B5 BDE7EB           (        forth.asm):03022 (7)             jsr     NPUSH
F4B8 1F01             (        forth.asm):03023 (4)             tfr     d,x
F4BA 7EE7EB           (        forth.asm):03024 (3)             jmp     NPUSH
                      (        forth.asm):03025         
F4BD 02               (        forth.asm):03026         TWOSTOR fcb     2               79-STANDARD (double number extension)
F4BE 3221             (        forth.asm):03027                 fcc     '2!'            ( double addr -- )
F4C0 F4A5             (        forth.asm):03028                 fdb     TWODUP
F4C2 C7               (        forth.asm):03029                 RFCS
F4C3 BDE49F           (        forth.asm):03030 (7)             jsr     MIN3PST         At least three cells need to be stacked up
F4C6 10EC42           (        forth.asm):03031 (8+1)           ldq     2,u             DOUBLE to D:W
F4C9 10EDD4           (        forth.asm):03032 (8+3)           stq     [,u]            Store DOUBLE to ADDR
F4CC 3346             (        forth.asm):03033 (4+1)           leau    6,u             Drop three cells from the user stack
F4CE 39               (        forth.asm):03034 (4)             rts
                      (        forth.asm):03035         
F4CF 02               (        forth.asm):03036         TWOFTCH fcb     2               79-STANDARD (double number extension)
F4D0 3240             (        forth.asm):03037                 fcc     '2@'            ( dbladdr -- double )
F4D2 F4BD             (        forth.asm):03038                 fdb     TWOSTOR
F4D4 C7               (        forth.asm):03039                 RFCS
F4D5 BDE495           (        forth.asm):03040 (7)             jsr     MIN1PST         At least cell needs to be stacked up
F4D8 10ECD4           (        forth.asm):03041 (8+3)           ldq     [,u]            D:W has MSC:LSC of DBLADDR @
F4DB 10A7C4           (        forth.asm):03042 (6+0)           stw     ,u              Least significant cell stacked in place
F4DE 1F01             (        forth.asm):03043 (4)             tfr     d,x             Most significant cell goes through standard push
F4E0 7EE7EB           (        forth.asm):03044 (3)             jmp     NPUSH
                      (        forth.asm):03045         
F4E3 07               (        forth.asm):03046         CONVERT fcb     7               79-STANDARD (REQ195)
F4E4 434F4E56455254   (        forth.asm):03047                 fcc     'CONVERT'       ( d1 addr1 -- d2 addr2 )
F4EB F4CF             (        forth.asm):03048                 fdb     TWOFTCH
F4ED C7               (        forth.asm):03049                 RFCS
F4EE BDE49F           (        forth.asm):03050 (7)             jsr     MIN3PST         At least 3 cells need to be stacked up
F4F1 BDE3D9           (        forth.asm):03051 (7)             jsr     CKBASE          Check for supported BASE. No return if not
F4F4 AEC4             (        forth.asm):03052 (5+0)           ldx     ,u              ADDR1 to X
F4F6 3001             (        forth.asm):03053 (4+1)   @cvloop leax    1,x
F4F8 E684             (        forth.asm):03054 (4+0)           ldb     ,x
                      (        forth.asm):03055         * B has the ASCII representation of something that may or may not be a valid
                      (        forth.asm):03056         * digit, expressed in BASE (alias (byte)UBASE+1). If it does, multiply D1 by
                      (        forth.asm):03057         * BASE and add that to D1 (aka D2 on exit). Then add DIGIT on the top of it.
F4FA C030             (        forth.asm):03058 (2)             subb    #'0             Minimal ASCII value condition met?
F4FC 255B             (        forth.asm):03059 (3)             blo     @cvoor          No. Out of range. ,X cannot be a valid digit
F4FE C10A             (        forth.asm):03060 (2)             cmpb    #10
F500 2510             (        forth.asm):03061 (3)             blo     @cvnolt         No letter in potential BASE
                      (        forth.asm):03062                 IFEQ    CSSNTVE
F502 C111             (        forth.asm):03063 (2)             cmpb    #'A-'0
F504 2553             (        forth.asm):03064 (3)             blo     @cvoor          Greater than 9 but lower than A
F506 C131             (        forth.asm):03065 (2)             cmpb    #'a-'0
F508 2506             (        forth.asm):03066 (3)             blo     @cvisuc         Upper case already
F50A C14A             (        forth.asm):03067 (2)             cmpb    #'z-'0
F50C 224B             (        forth.asm):03068 (3)             bhi     @cvoor          Definitely out of range
F50E C020             (        forth.asm):03069 (2)             subb    #'a-'A          To upper case
                      (        forth.asm):03070                 ENDC                    CSSNTVE
F510 C007             (        forth.asm):03071 (2)     @cvisuc subb    #'A-':          A-Z to number
F512 D11F             (        forth.asm):03072 (3)     @cvnolt cmpb    UBASE+1         B has a digit. Make sure it's less than BASE
F514 2443             (        forth.asm):03073 (3)             bhs     @cvoor          Number under scrutiny is >= BASE
F516 3278             (        forth.asm):03074 (4+1)           leas    -8,s            Allocate scratch space
F518 4F               (        forth.asm):03075 (1)             clra
F519 3406             (        forth.asm):03076 (4+2)           pshs    d
                      (        forth.asm):03077         * System and user stack structures are as follows:
                      (        forth.asm):03078         * ,s    current digit (1 cell)
                      (        forth.asm):03079         * 2,s   D0*B (1 cell)
                      (        forth.asm):03080         * 4,s   D1*B (1 cell)
                      (        forth.asm):03081         * 6,s   D2*B (1 cell)
                      (        forth.asm):03082         * 8,s   D3*B (1 cell)
                      (        forth.asm):03083         * 2,u   D1H most significant cell
                      (        forth.asm):03084         * 4,u   D1L least significant cell
F51B 1F37             (        forth.asm):03085 (4)             tfr     u,v             Backup U
F51D 3346             (        forth.asm):03086 (4+1)           leau    6,u             Point one byte after D1LL
F51F 3162             (        forth.asm):03087 (4+1)           leay    2,s             Point to D0*B
F521 118604           (        forth.asm):03088 (3)             lde     #4              Four products to go through
F524 A6C2             (        forth.asm):03089 (4+1)   @cvmul  lda     ,-u
F526 D61F             (        forth.asm):03090 (3)             ldb     UBASE+1
F528 3D               (        forth.asm):03091 (10)            mul
F529 EDA1             (        forth.asm):03092 (5+2)           std     ,y++
F52B 114A             (        forth.asm):03093 (2)             dece
F52D 26F5             (        forth.asm):03094 (3)             bne     @cvmul
F52F 1F73             (        forth.asm):03095 (4)             tfr     v,u             Restore U
F531 A663             (        forth.asm):03096 (4+1)           lda     3,s
F533 A745             (        forth.asm):03097 (4+1)           sta     5,u             D1LL
F535 A662             (        forth.asm):03098 (4+1)           lda     2,s
F537 AB65             (        forth.asm):03099 (4+1)           adda    5,s
F539 A744             (        forth.asm):03100 (4+1)           sta     4,u             D1LH
F53B A664             (        forth.asm):03101 (4+1)           lda     4,s
F53D A967             (        forth.asm):03102 (4+1)           adca    7,s
F53F A743             (        forth.asm):03103 (4+1)           sta     3,u             D1HL
F541 A666             (        forth.asm):03104 (4+1)           lda     6,s
F543 A969             (        forth.asm):03105 (4+1)           adca    9,s
F545 A742             (        forth.asm):03106 (4+1)           sta     2,u             D1HH
F547 EC44             (        forth.asm):03107 (5+1)           ldd     4,u             D1L
F549 E3E4             (        forth.asm):03108 (5+0)           addd    ,s              DIGIT
F54B ED44             (        forth.asm):03109 (5+1)           std     4,u
F54D EC42             (        forth.asm):03110 (5+1)           ldd     2,u             D1H
F54F 10890000         (        forth.asm):03111 (4)             adcd    #0              Potential carry from lower cell
F553 ED42             (        forth.asm):03112 (5+1)           std     2,u
F555 326A             (        forth.asm):03113 (4+1)           leas    10,s            Release scratch space
F557 209D             (        forth.asm):03114 (3)             bra     @cvloop         Here we go again
F559 AFC4             (        forth.asm):03115 (5+0)   @cvoor  stx     ,u              Update ADDR2
F55B 39               (        forth.asm):03116 (4)             rts
                      (        forth.asm):03117         
F55C 02               (        forth.asm):03118         CVTE    fcb     2
F55D 233E             (        forth.asm):03119                 fcc     '#>'
F55F F4E3             (        forth.asm):03120                 fdb     CONVERT
F561 C7               (        forth.asm):03121                 RFCS
F562 BDE7F9           (        forth.asm):03122 (7)             jsr     NPOP
F565 BDE7F9           (        forth.asm):03123 (7)             jsr     NPOP            Drop 2 cells from the data stack
F568 8E0184           (        forth.asm):03124 (3)             ldx     #PADBUF
F56B 3610             (        forth.asm):03125                 UCNPUSH
F56D BDE246           (        forth.asm):03126 (7)             jsr     SLEN
F570 1F61             (        forth.asm):03127 (4)             tfr     w,x
F572 3610             (        forth.asm):03128                 UCNPUSH
F574 39               (        forth.asm):03129 (4)             rts
                      (        forth.asm):03130         
F575 04               (        forth.asm):03131         SIGN    fcb     4
F576 5349474E         (        forth.asm):03132                 fcc     'SIGN'
F57A F55C             (        forth.asm):03133                 fdb     CVTE
F57C C7               (        forth.asm):03134                 RFCS
F57D BDE7F9           (        forth.asm):03135 (7)             jsr     NPOP
F580 1F10             (        forth.asm):03136 (4)             tfr     x,d
F582 104D             (        forth.asm):03137 (2)             tstd
F584 2C05             (        forth.asm):03138 (3)             bge     @sign1
F586 C62D             (        forth.asm):03139 (2)             ldb     #'-
F588 7EF644           (        forth.asm):03140 (3)             jmp     INSBPAD
F58B 39               (        forth.asm):03141 (4)     @sign1  rts
                      (        forth.asm):03142         
F58C 04               (        forth.asm):03143         HOLD    fcb     4
F58D 484F4C44         (        forth.asm):03144                 fcc     'HOLD'
F591 F575             (        forth.asm):03145                 fdb     SIGN
F593 C7               (        forth.asm):03146                 RFCS
F594 BDE7F9           (        forth.asm):03147 (7)             jsr     NPOP
F597 1F10             (        forth.asm):03148 (4)             tfr     x,d
F599 7EF644           (        forth.asm):03149 (3)             jmp     INSBPAD         B is inserted at the beginning of PAD.
                      (        forth.asm):03150         
F59C 02               (        forth.asm):03151         SHARPS  fcb     2
F59D 2353             (        forth.asm):03152                 fcc     '#S'
F59F F58C             (        forth.asm):03153                 fdb     HOLD
F5A1 C7               (        forth.asm):03154                 RFCS
F5A2 8601             (        forth.asm):03155 (2)             lda     #1
F5A4 9734             (        forth.asm):03156 (3)             sta     CVTFCN          CVT function #1 is #S
F5A6 2007             (        forth.asm):03157 (3)             bra     CVT0
                      (        forth.asm):03158         
                      (        forth.asm):03159         * Unsigned double on the top of the data stack gets divided by BASE.
                      (        forth.asm):03160         * The division algorithm implemented here is the binary long division.
                      (        forth.asm):03161         * See https://en.wikipedia.org/wiki/Division_algorithm for more information.
                      (        forth.asm):03162         * Remainder (converted to a character) gets prepended to PAD.
F5A8 01               (        forth.asm):03163         CVT     fcb     1
F5A9 23               (        forth.asm):03164                 fcc     '#'
F5AA F59C             (        forth.asm):03165                 fdb     SHARPS
F5AC C7               (        forth.asm):03166                 RFCS
F5AD 0F34             (        forth.asm):03167 (5)             clr     CVTFCN          CVT function 0 is #
F5AF BDE7F9           (        forth.asm):03168 (7)     CVT0    jsr     NPOP
F5B2 1F16             (        forth.asm):03169 (4)             tfr     x,w
F5B4 BDE7F9           (        forth.asm):03170 (7)             jsr     NPOP
F5B7 3410             (        forth.asm):03171 (4+2)   CVT1    pshs    x               Numerator least significant cell
F5B9 1038             (        forth.asm):03172 (6)             pshsw                   Numerator most significant cell
F5BB 104F             (        forth.asm):03173 (2)             clrd
F5BD 3406             (        forth.asm):03174 (4+2)           pshs    d               Quotient low
F5BF 3406             (        forth.asm):03175 (4+2)           pshs    d               Quotient high
F5C1 3406             (        forth.asm):03176 (4+2)           pshs    d               Bitmask low
F5C3 10868000         (        forth.asm):03177 (4)             ldw     #$8000          Bitmask high
F5C7 1038             (        forth.asm):03178 (6)             pshsw
F5C9 3406             (        forth.asm):03179 (4+2)           pshs    d
                      (        forth.asm):03180         * Stack structure:
                      (        forth.asm):03181         * 1,s   remainder               8 bits (high order byte is zero and unused)
                      (        forth.asm):03182         * 2,s   Bitmask high            16 bits
                      (        forth.asm):03183         * 4,s   Bitmask low             16 bits
                      (        forth.asm):03184         * 6,s   Quotient high           16 bits
                      (        forth.asm):03185         * 8,s   Quotient low            16 bits
                      (        forth.asm):03186         * 10,s  Numerator high          16 bits
                      (        forth.asm):03187         * 12,s  Numerator low           16 bits
                      (        forth.asm):03188         * Denominator is at UBASE+1     8 bits
F5CB 11C61F           (        forth.asm):03189 (3)             ldf     #31             32 bits to go
F5CE 6861             (        forth.asm):03190 (6+1)   @cvt1   lsl     1,s             R := R << 1
                      (        forth.asm):03191         * We need to extract bit <f> from the numerator.
F5D0 306A             (        forth.asm):03192 (4+1)           leax    10,s            Numerator MSB address
F5D2 1FF8             (        forth.asm):03193 (4)             tfr     f,a             Not to alter the stack structure
F5D4 44               (        forth.asm):03194 (1)             lsra                    OffsetX: 3 - F >> 3
F5D5 44               (        forth.asm):03195 (1)             lsra
F5D6 44               (        forth.asm):03196 (1)             lsra
F5D7 C603             (        forth.asm):03197 (2)             ldb     #3
F5D9 103289           (        forth.asm):03198 (4)             subr    a,b
F5DC A685             (        forth.asm):03199 (4+1)           lda     b,x
F5DE 1FF9             (        forth.asm):03200 (4)             tfr     f,b             Bitno: F & 7
F5E0 C407             (        forth.asm):03201 (2)             andb    #7
                      (        forth.asm):03202         * At this point, A has the data we're interested in. B has the bit number.
F5E2 5D               (        forth.asm):03203 (1)     @cvtex  tstb
F5E3 2704             (        forth.asm):03204 (3)             beq     @cvtfnd         Bit 0 of A has the data
F5E5 44               (        forth.asm):03205 (1)             lsra
F5E6 5A               (        forth.asm):03206 (1)             decb
F5E7 20F9             (        forth.asm):03207 (3)             bra     @cvtex
F5E9 8401             (        forth.asm):03208 (2)     @cvtfnd anda    #1
F5EB AA61             (        forth.asm):03209 (4+1)           ora     1,s             R(0) := N(i)
F5ED A761             (        forth.asm):03210 (4+1)           sta     1,s             Update the remainder
F5EF 911F             (        forth.asm):03211 (3)             cmpa    UBASE+1
F5F1 2512             (        forth.asm):03212 (3)             blo     @cvt5
F5F3 901F             (        forth.asm):03213 (3)             suba    UBASE+1
F5F5 A761             (        forth.asm):03214 (4+1)           sta     1,s             R := R - D
                      (        forth.asm):03215         * Q(i) := 1 (use the bitmask).
F5F7 EC66             (        forth.asm):03216 (5+1)           ldd     6,s             Quotient high
F5F9 10AA62           (        forth.asm):03217 (6+1)           ord     2,s             Bitmask high
F5FC ED66             (        forth.asm):03218 (5+1)           std     6,s
F5FE EC68             (        forth.asm):03219 (5+1)           ldd     8,s             Quotient low
F600 10AA64           (        forth.asm):03220 (6+1)           ord     4,s             Bitmask low
F603 ED68             (        forth.asm):03221 (5+1)           std     8,s
                      (        forth.asm):03222         * Shift the bitmask 1 bit right.
F605 EC62             (        forth.asm):03223 (5+1)   @cvt5   ldd     2,s
F607 1044             (        forth.asm):03224 (2)             lsrd
F609 ED62             (        forth.asm):03225 (5+1)           std     2,s
F60B EC64             (        forth.asm):03226 (5+1)           ldd     4,s
F60D 1046             (        forth.asm):03227 (2)             rord
F60F ED64             (        forth.asm):03228 (5+1)           std     4,s
F611 115A             (        forth.asm):03229 (2)             decf
F613 2CB9             (        forth.asm):03230 (3)             bge     @cvt1
                      (        forth.asm):03231         * Convert the remainder to a digit expressed in BASE.
F615 E661             (        forth.asm):03232 (4+1)           ldb     1,s
F617 8630             (        forth.asm):03233 (2)             lda     #'0
F619 C10A             (        forth.asm):03234 (2)             cmpb    #10             B has the digit we want converted to BASE
F61B 2502             (        forth.asm):03235 (3)             bcs     @cvtdgt
F61D 8637             (        forth.asm):03236 (2)             lda     #'A-10
F61F 103089           (        forth.asm):03237 (4)     @cvtdgt addr    a,b
F622 8D20             (        forth.asm):03238 (6)             bsr     INSBPAD         Prepend B to the string currently in PAD
F624 0D34             (        forth.asm):03239 (4)             tst     CVTFCN
F626 2711             (        forth.asm):03240 (3)             beq     @cvtend         Function 0 is straight #, i.e. we're done here
                      (        forth.asm):03241         * Function 1 is #S, we iterate unless the quotient is 0.
F628 EC68             (        forth.asm):03242 (5+1)           ldd     8,s
F62A 10AA66           (        forth.asm):03243 (6+1)           ord     6,s
F62D 270A             (        forth.asm):03244 (3)             beq     @cvtend
F62F AE68             (        forth.asm):03245 (5+1)           ldx     8,s             New numerator low
F631 10A666           (        forth.asm):03246 (6+1)           ldw     6,s             New numerator high
F634 326E             (        forth.asm):03247 (4+1)           leas    14,s            Discard the stack frame
F636 7EF5B7           (        forth.asm):03248 (3)             jmp     CVT1            And go at it again
                      (        forth.asm):03249         * Push back the quotient on the data stack (low then high cell).
F639 AE68             (        forth.asm):03250 (5+1)   @cvtend ldx     8,s
F63B 3610             (        forth.asm):03251                 UCNPUSH
F63D AE66             (        forth.asm):03252 (5+1)           ldx     6,s
F63F 326E             (        forth.asm):03253 (4+1)           leas    14,s            Discard the stack frame
F641 3610             (        forth.asm):03254                 UCNPUSH
F643 39               (        forth.asm):03255 (4)             rts
                      (        forth.asm):03256         
                      (        forth.asm):03257         * Insert the character in B in front of the string at PADBUF.
F644 8E0184           (        forth.asm):03258 (3)     INSBPAD ldx     #PADBUF
F647 BDE246           (        forth.asm):03259 (7)             jsr     SLEN
F64A 103061           (        forth.asm):03260 (4)             addr    w,x             X points to the PAD string's NUL terminator
F64D 105C             (        forth.asm):03261 (2)             incw                    Include the terminator
F64F 3101             (        forth.asm):03262 (4+1)           leay    1,x
F651 113912           (        forth.asm):03263 (6+?)           tfm     x-,y-
F654 D784             (        forth.asm):03264 (3)             stb     PADBUF
F656 39               (        forth.asm):03265 (4)             rts
                      (        forth.asm):03266         
F657 02               (        forth.asm):03267         CVTB    fcb     2
F658 3C23             (        forth.asm):03268                 fcc     '<#'
F65A F5A8             (        forth.asm):03269                 fdb     CVT
F65C C7               (        forth.asm):03270                 RFCS
F65D BDE3D9           (        forth.asm):03271 (7)             jsr     CKBASE          Sanity check. BASE can be altered at any time
F660 0F84             (        forth.asm):03272 (5)             clr     PADBUF
F662 39               (        forth.asm):03273 (4)             rts
                      (        forth.asm):03274         
F663 01               (        forth.asm):03275         DOT     fcb     1               79-STANDARD (REQ193)
F664 2E               (        forth.asm):03276                 fcc     '.'
F665 F657             (        forth.asm):03277                 fdb     CVTB
F667 C7               (        forth.asm):03278                 RFCS
F668 8601             (        forth.asm):03279 (2)             lda     #1
F66A 9737             (        forth.asm):03280 (3)             sta     CVISSGN         Force a signed number conversion
F66C BDE7F9           (        forth.asm):03281 (7)     PTOP0   jsr     NPOP
F66F BDE441           (        forth.asm):03282 (7)             jsr     CVNSTR
F672 8E03EA           (        forth.asm):03283 (3)             ldx     #TBUFF
F675 8620             (        forth.asm):03284 (2)             lda     #SP
F677 A180             (        forth.asm):03285 (4+1)   @ptop1  cmpa    ,x+             Skip leading spaces
F679 27FC             (        forth.asm):03286 (3)             beq     @ptop1
F67B 301F             (        forth.asm):03287 (4+1)           leax    -1,x            Point to actual string start address
F67D BDE2F3           (        forth.asm):03288 (7)             jsr     PUTS
F680 7EE2E0           (        forth.asm):03289 (3)             jmp     PUTCH           Extra space after printing a number
                      (        forth.asm):03290         
F683 02               (        forth.asm):03291         UDOT    fcb     2               79-STANDARD (REQ106)
F684 552E             (        forth.asm):03292                 fcc     'U.'
F686 F663             (        forth.asm):03293                 fdb     DOT
F688 C7               (        forth.asm):03294                 RFCS
F689 0F37             (        forth.asm):03295 (5)             clr     CVISSGN         Conversion is unsigned
F68B 20DF             (        forth.asm):03296 (3)             bra     PTOP0
                      (        forth.asm):03297         
F68D 02               (        forth.asm):03298         DOTR    fcb     2               79-STANDARD (REF)
F68E 2E52             (        forth.asm):03299                 fcc     '.R'
F690 F683             (        forth.asm):03300                 fdb     UDOT
F692 C7               (        forth.asm):03301                 RFCS
F693 8601             (        forth.asm):03302 (2)             lda     #1
F695 9737             (        forth.asm):03303 (3)             sta     CVISSGN
F697 BDE7F9           (        forth.asm):03304 (7)     DOTR0   jsr     NPOP
F69A 3410             (        forth.asm):03305 (4+2)           pshs    x               Length parameter value
F69C BDE7F9           (        forth.asm):03306 (7)             jsr     NPOP
F69F BDE441           (        forth.asm):03307 (7)             jsr     CVNSTR
F6A2 8E03EA           (        forth.asm):03308 (3)             ldx     #TBUFF
F6A5 8620             (        forth.asm):03309 (2)             lda     #SP
F6A7 A180             (        forth.asm):03310 (4+1)   @dotr1  cmpa    ,x+
F6A9 27FC             (        forth.asm):03311 (3)             beq     @dotr1          Skip leading spaces
F6AB 301F             (        forth.asm):03312 (4+1)           leax    -1,x
F6AD BDE246           (        forth.asm):03313 (7)             jsr     SLEN            String length is returned in W
F6B0 3506             (        forth.asm):03314 (4+2)           puls    d
F6B2 1E06             (        forth.asm):03315 (5)             exg     d,w
F6B4 103206           (        forth.asm):03316 (4)             subr    d,w
F6B7 2F0D             (        forth.asm):03317 (3)             ble     @dotr3
F6B9 8620             (        forth.asm):03318 (2)             lda     #SP
F6BB 105D             (        forth.asm):03319 (2)     @dotr2  tstw
F6BD 2707             (        forth.asm):03320 (3)             beq     @dotr3
F6BF BDE2E0           (        forth.asm):03321 (7)             jsr     PUTCH
F6C2 105A             (        forth.asm):03322 (2)             decw
F6C4 20F5             (        forth.asm):03323 (3)             bra     @dotr2
F6C6 7EE2F3           (        forth.asm):03324 (3)     @dotr3  jmp     PUTS
                      (        forth.asm):03325         
F6C9 03               (        forth.asm):03326         UDOTR   fcb     3               79-STANDARD (REF216)
F6CA 552E52           (        forth.asm):03327                 fcc     'U.R'
F6CD F68D             (        forth.asm):03328                 fdb     DOTR
F6CF C7               (        forth.asm):03329                 RFCS
F6D0 0F37             (        forth.asm):03330 (5)             clr     CVISSGN
F6D2 20C3             (        forth.asm):03331 (3)             bra     DOTR0
                      (        forth.asm):03332         
F6D4 02               (        forth.asm):03333         BL      fcb     2               79-STANDARD (REF176)
F6D5 424C             (        forth.asm):03334                 fcc     'BL'
F6D7 F6C9             (        forth.asm):03335                 fdb     UDOTR
F6D9 C7               (        forth.asm):03336                 RFCS
F6DA 8E0020           (        forth.asm):03337 (3)             ldx     #SP
F6DD 7EE7EB           (        forth.asm):03338 (3)             jmp     NPUSH
                      (        forth.asm):03339         
F6E0 05               (        forth.asm):03340         SPACE   fcb     5               79-STANDARD (REQ232)
F6E1 5350414345       (        forth.asm):03341                 fcc     'SPACE'
F6E6 F6D4             (        forth.asm):03342                 fdb     BL
F6E8 C7               (        forth.asm):03343                 RFCS
F6E9 8620             (        forth.asm):03344 (2)             lda     #SP
F6EB 7EE2E0           (        forth.asm):03345 (3)             jmp     PUTCH
                      (        forth.asm):03346         
F6EE 06               (        forth.asm):03347         SPACES  fcb     6               79-STANDARD (REQ231)
F6EF 535041434553     (        forth.asm):03348                 fcc     'SPACES'
F6F5 F6E0             (        forth.asm):03349                 fdb     SPACE
F6F7 C7               (        forth.asm):03350                 RFCS
F6F8 BDE7F9           (        forth.asm):03351 (7)             jsr     NPOP
F6FB 1F16             (        forth.asm):03352 (4)             tfr     x,w
F6FD 105D             (        forth.asm):03353 (2)             tstw
F6FF 2709             (        forth.asm):03354 (3)             beq     @spcs2
F701 8620             (        forth.asm):03355 (2)             lda     #SP
F703 BDE2E0           (        forth.asm):03356 (7)     @spcs1  jsr     PUTCH
F706 105A             (        forth.asm):03357 (2)             decw
F708 26F9             (        forth.asm):03358 (3)             bne     @spcs1
F70A 39               (        forth.asm):03359 (4)     @spcs2  rts
                      (        forth.asm):03360         
F70B 04               (        forth.asm):03361         PAGE    fcb     4               79-STANDARD (REF)
F70C 50414745         (        forth.asm):03362                 fcc     'PAGE'
F710 F6EE             (        forth.asm):03363                 fdb     SPACES
F712 C7               (        forth.asm):03364                 RFCS
F713 8EFE17           (        forth.asm):03365 (3)             ldx     #CSVT100
F716 7EE2F3           (        forth.asm):03366 (3)             jmp     PUTS
                      (        forth.asm):03367         
F719 02               (        forth.asm):03368         CRLF    fcb     2               79-STANDARD (REQ160)
F71A 4352             (        forth.asm):03369                 fcc     'CR'
F71C F70B             (        forth.asm):03370                 fdb     PAGE
F71E C7               (        forth.asm):03371                 RFCS
F71F 7EE300           (        forth.asm):03372 (3)             jmp     PUTCR
                      (        forth.asm):03373         
F722 03               (        forth.asm):03374         PAD     fcb     3               79-STANDARD (REQ226)
F723 504144           (        forth.asm):03375                 fcc     'PAD'
F726 F719             (        forth.asm):03376                 fdb     CRLF
F728 C7               (        forth.asm):03377                 RFCS
F729 8E0184           (        forth.asm):03378 (3)             ldx     #PADBUF
F72C 7EE7EB           (        forth.asm):03379 (3)             jmp     NPUSH
                      (        forth.asm):03380         
F72F 04               (        forth.asm):03381         TYPE    fcb     4               79-STANDARD (REQ222)
F730 54595045         (        forth.asm):03382                 fcc     'TYPE'          ( addr bcount -- )
F734 F722             (        forth.asm):03383                 fdb     PAD
F736 C7               (        forth.asm):03384                 RFCS
F737 BDE7F9           (        forth.asm):03385 (7)             jsr     NPOP            Character count (signed)
F73A 1F16             (        forth.asm):03386 (4)             tfr     x,w
F73C BDE7F9           (        forth.asm):03387 (7)             jsr     NPOP            Buffer address
F73F 105D             (        forth.asm):03388 (2)             tstw                    
F741 2E01             (        forth.asm):03389 (3)     @type0  bgt     @type1
F743 39               (        forth.asm):03390 (4)             rts
F744 A680             (        forth.asm):03391 (4+1)   @type1  lda     ,x+
F746 BDE2E0           (        forth.asm):03392 (7)             jsr     PUTCH
F749 105A             (        forth.asm):03393 (2)             decw
F74B 20F4             (        forth.asm):03394 (3)             bra     @type0
                      (        forth.asm):03395         
F74D 05               (        forth.asm):03396         COUNT   fcb     5               79-STANDARD (REQ159)
F74E 434F554E54       (        forth.asm):03397                 fcc     'COUNT'
F753 F72F             (        forth.asm):03398                 fdb     TYPE
F755 C7               (        forth.asm):03399                 RFCS
F756 BDE7F9           (        forth.asm):03400 (7)             jsr     NPOP
F759 E680             (        forth.asm):03401 (4+1)           ldb     ,x+
F75B 3610             (        forth.asm):03402                 UCNPUSH                 B is preserved
F75D 4F               (        forth.asm):03403 (1)             clra
F75E 1F01             (        forth.asm):03404 (4)             tfr     d,x
F760 7EE7EB           (        forth.asm):03405 (3)             jmp     NPUSH
                      (        forth.asm):03406         
F763 09               (        forth.asm):03407         DASHTR  fcb     9               79-STANDARD (REQ148)
F764 2D545241494C494E (        forth.asm):03408                 fcc     '-TRAILING'     ( addr n1 -- addr n2 )
     47
F76D F74D             (        forth.asm):03409                 fdb     COUNT
F76F C7               (        forth.asm):03410                 RFCS
F770 BDE7F9           (        forth.asm):03411 (7)             jsr     NPOP            N1 to X
F773 1F10             (        forth.asm):03412 (4)             tfr     x,d             N1 to D
F775 BDE7F9           (        forth.asm):03413 (7)             jsr     NPOP            ADDR to X
F778 1F12             (        forth.asm):03414 (4)             tfr     x,y             Backup to I
F77A 104D             (        forth.asm):03415 (2)             tstd                    Input character count (N1)
F77C 2D1B             (        forth.asm):03416 (3)             blt     @invpar         Cannot be < 0
F77E 308B             (        forth.asm):03417 (4+2)           leax    d,x             X has ADDR+N1
F780 1F06             (        forth.asm):03418 (4)             tfr     d,w             W has N1
F782 105D             (        forth.asm):03419 (2)     @cknxtb tstw
F784 270A             (        forth.asm):03420 (3)             beq     @ckdone
F786 A682             (        forth.asm):03421 (4+1)           lda     ,-x
F788 105A             (        forth.asm):03422 (2)             decw
F78A 8120             (        forth.asm):03423 (2)             cmpa    #SP
F78C 27F4             (        forth.asm):03424 (3)             beq     @cknxtb         Iterate over to the previous byte
F78E 105C             (        forth.asm):03425 (2)             incw
F790 1F21             (        forth.asm):03426 (4)     @ckdone tfr     y,x
F792 3610             (        forth.asm):03427                 UCNPUSH                 String base address
F794 1F61             (        forth.asm):03428 (4)             tfr     w,x
F796 3610             (        forth.asm):03429                 UCNPUSH                 Updated character count
F798 39               (        forth.asm):03430 (4)             rts
F799 C60D             (        forth.asm):03431 (2)     @invpar ldb     #13             Invalid parameter
F79B BDE76A           (        forth.asm):03432 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):03433         
F79E 06               (        forth.asm):03434         EXPECT  fcb     6               79-STANDARD (REQ189)
F79F 455850454354     (        forth.asm):03435                 fcc     'EXPECT'        ( addr count -- )
F7A5 F763             (        forth.asm):03436                 fdb     DASHTR
F7A7 C7               (        forth.asm):03437                 RFCS
F7A8 BDE7F9           (        forth.asm):03438 (7)     EXPCT1  jsr     NPOP
F7AB 1F10             (        forth.asm):03439 (4)             tfr     x,d             Buffer length to B
F7AD BDE7F9           (        forth.asm):03440 (7)             jsr     NPOP            Buffer address to X. B is preserved
F7B0 5D               (        forth.asm):03441 (1)             tstb
F7B1 2701             (        forth.asm):03442 (3)             beq     @expct1
F7B3 5C               (        forth.asm):03443 (1)             incb                    Account for the NUL terminator
F7B4 7EE316           (        forth.asm):03444 (3)     @expct1 jmp     GETS
                      (        forth.asm):03445         
F7B7 06               (        forth.asm):03446         ACCEPT  fcb     6               ANSI (Core)
F7B8 414343455054     (        forth.asm):03447                 fcc     'ACCEPT'
F7BE F79E             (        forth.asm):03448                 fdb     EXPECT
F7C0 C7               (        forth.asm):03449                 RFCS
F7C1 8DE5             (        forth.asm):03450 (6)             bsr     EXPCT1
F7C3 4F               (        forth.asm):03451 (1)             clra
F7C4 3606             (        forth.asm):03452 (4+2)           pshu    d               This saves us "tfr d,x" and "UCNPUSH"
F7C6 39               (        forth.asm):03453 (4)             rts
                      (        forth.asm):03454         
F7C7 49               (        forth.asm):03455         TERPRET fcb     $49             79-STANDARD (REF) I make this compile time only
F7C8 494E544552505245 (        forth.asm):03456                 fcc     'INTERPRET'     ( -- )
     54
F7D1 F7B7             (        forth.asm):03457                 fdb     ACCEPT
F7D3 C7               (        forth.asm):03458                 RFCS
                      (        forth.asm):03459         * Obtain a base buffer address based on the value of BLK.
F7D4 DC24             (        forth.asm):03460 (4)             ldd     UBLK
F7D6 2605             (        forth.asm):03461 (3)             bne     @notser
F7D8 8E0316           (        forth.asm):03462 (3)             ldx     #CMDBUF         Base buffer address for serial line input
F7DB 200A             (        forth.asm):03463 (3)             bra     @rsolvd
                      (        forth.asm):03464         * BLK is NZ, map the block in memory.
F7DD 1F01             (        forth.asm):03465 (4)     @notser tfr     d,x             Block number to X
F7DF BDE7EB           (        forth.asm):03466 (7)             jsr     NPUSH
F7E2 BDEA51           (        forth.asm):03467                 RFXT    jsr,BLOCK+8     XT for BLOCK. Map the block in
F7E5 3710             (        forth.asm):03468                 UCNPOP                  Retrieve buffer address (to X)
                      (        forth.asm):03469         * Note: >IN is supposed to have been set by the caller!
F7E7 9F1C             (        forth.asm):03470 (4)     @rsolvd stx     BSBFADR
F7E9 DC22             (        forth.asm):03471 (4)             ldd     UTOIN
F7EB 103001           (        forth.asm):03472 (4)             addr    d,x
F7EE 7EE0CA           (        forth.asm):03473 (3)             jmp     _INTERP         Finally invoke _INTERP.
                      (        forth.asm):03474         
F7F1 04               (        forth.asm):03475         LOAD    fcb     4               79-STANDARD (REQ202)
F7F2 4C4F4144         (        forth.asm):03476                 fcc     'LOAD'          ( blk -- )
F7F6 F7C7             (        forth.asm):03477                 fdb     TERPRET
F7F8 C7               (        forth.asm):03478                 RFCS
F7F9 BDE7F9           (        forth.asm):03479 (7)             jsr     NPOP
F7FC 1037C1           (        forth.asm):03480 (4)             cmpr    0,x
F7FF 2601             (        forth.asm):03481 (3)             bne     LOAD1
F801 39               (        forth.asm):03482 (4)             rts                     Block 0 is _not_ loadable
F802 3410             (        forth.asm):03483 (4+2)   LOAD1   pshs    x
F804 9E24             (        forth.asm):03484 (4)             ldx     UBLK
F806 BDE808           (        forth.asm):03485 (7)             jsr     RPUSH           Push BLK on the return stack
F809 9E22             (        forth.asm):03486 (4)             ldx     UTOIN
F80B BDE808           (        forth.asm):03487 (7)             jsr     RPUSH           Push >IN on the return stack
F80E 3510             (        forth.asm):03488 (4+2)           puls    x
F810 9F24             (        forth.asm):03489 (4)             stx     UBLK            Update BLK with the LOAD argument
F812 104F             (        forth.asm):03490 (2)             clrd
F814 DD22             (        forth.asm):03491 (4)             std     UTOIN           Clear >IN
                      (        forth.asm):03492         * Map the new BLK in, interpret code from there.
F816 8DBC             (        forth.asm):03493                 RFXT    bsr,TERPRET+12  XT for INTERPRET
F818 BDE826           (        forth.asm):03494 (7)             jsr     RPOP
F81B 9F22             (        forth.asm):03495 (4)             stx     UTOIN           Restore >IN from the return stack
F81D BDE826           (        forth.asm):03496 (7)             jsr     RPOP
F820 9F24             (        forth.asm):03497 (4)             stx     UBLK            Restore BLK from the return stack
F822 7EE83F           (        forth.asm):03498 (3)             jmp     BKIN2PT         Map BLK in (if needed) and update BSBFADR
                      (        forth.asm):03499         
F825 04               (        forth.asm):03500         THRU    fcb     4               79-STANDARD (REF)
F826 54485255         (        forth.asm):03501                 fcc     'THRU'          ( lowblk highblk -- )
F82A F7F1             (        forth.asm):03502                 fdb     LOAD
F82C C7               (        forth.asm):03503                 RFCS
F82D BDE7F9           (        forth.asm):03504 (7)             jsr     NPOP
F830 1F12             (        forth.asm):03505 (4)             tfr     x,y             Y has highblk
F832 BDE7F9           (        forth.asm):03506 (7)             jsr     NPOP            X has lowblk--both are unsigned numbers
F835 103712           (        forth.asm):03507 (4)     @thrlop cmpr    x,y
F838 2401             (        forth.asm):03508 (3)             bhs     @cont           Limit is >= to the loop index
F83A 39               (        forth.asm):03509 (4)             rts
F83B 3430             (        forth.asm):03510 (4+4)   @cont   pshs    x,y             Backup loop parameters
F83D 3610             (        forth.asm):03511                 UCNPUSH                 Current block number to the data stack
F83F 8DB8             (        forth.asm):03512                 RFXT    bsr,LOAD+7      XT for LOAD
F841 3530             (        forth.asm):03513 (4+4)           puls    y,x             Retrieve loop parameters
F843 3001             (        forth.asm):03514 (4+1)           leax    1,x             Iterate over to the next screen
F845 20EE             (        forth.asm):03515 (3)             bra     @thrlop
                      (        forth.asm):03516         
F847 83               (        forth.asm):03517         NXTBLK  fcb     $83             79-STANDARD (REF131)
F848 2D2D3E           (        forth.asm):03518                 fcc     '-->'           ( -- )
F84B F825             (        forth.asm):03519                 fdb     THRU
F84D C7               (        forth.asm):03520                 RFCS
F84E 9E24             (        forth.asm):03521 (4)             ldx     UBLK
F850 3001             (        forth.asm):03522 (4+1)           leax    1,x
F852 DC24             (        forth.asm):03523 (4)     NXTBLK1 ldd     UBLK
F854 2603             (        forth.asm):03524 (3)             bne     @nfrmb0         Not invoked from block 0 (the console)
                      (        forth.asm):03525         * --> or CONTINUED are being invoked from the console. Flag that condition
                      (        forth.asm):03526         * as a hint to the interpreter so that feedback is provided even if we are
                      (        forth.asm):03527         * back from a block.
F856 4C               (        forth.asm):03528 (1)             inca                    1 to A
F857 973B             (        forth.asm):03529 (3)             sta     NBCTFB0
F859 9F24             (        forth.asm):03530 (4)     @nfrmb0 stx     UBLK            Update BLK
F85B 104F             (        forth.asm):03531 (2)             clrd
F85D DD22             (        forth.asm):03532 (4)             std     UTOIN           0 >IN !
                      (        forth.asm):03533         * Map the new BLK in, interpret code from there.
F85F 7EF7D4           (        forth.asm):03534                 RFXT    jmp,TERPRET+12  XT for INTERPRET
                      (        forth.asm):03535         
F862 89               (        forth.asm):03536         CONTIND fcb     $89             79-STANDARD (REF)
F863 434F4E54494E5545 (        forth.asm):03537                 fcc     'CONTINUED'     ( nextblk -- )
     44
F86C F847             (        forth.asm):03538                 fdb     NXTBLK
F86E C7               (        forth.asm):03539                 RFCS
F86F BDE7F9           (        forth.asm):03540 (7)             jsr     NPOP            NEXTBLK to X
F872 1037C1           (        forth.asm):03541 (4)             cmpr    0,x             Cannot interpret from block 0!
F875 26DB             (        forth.asm):03542 (3)             bne     NXTBLK1
F877 C60D             (        forth.asm):03543 (2)             ldb     #13             Illegal argument
F879 BDE76A           (        forth.asm):03544 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):03545         
F87C 02               (        forth.asm):03546         MILLIS  fcb     2               79-STANDARD (REF)
F87D 4D53             (        forth.asm):03547                 fcc     'MS'            ( mscount -- )
F87F F862             (        forth.asm):03548                 fdb     CONTIND
F881 C7               (        forth.asm):03549                 RFCS
F882 BDE7F9           (        forth.asm):03550 (7)             jsr     NPOP
F885 1037C1           (        forth.asm):03551 (4)             cmpr    0,x
F888 2601             (        forth.asm):03552 (3)             bne     MILLIS1
F88A 39               (        forth.asm):03553 (4)             rts
F88B CC031A           (        forth.asm):03554 (3)     MILLIS1 ldd     #MSLCNT
F88E 104A             (        forth.asm):03555 (2)     @ms2    decd
F890 26FC             (        forth.asm):03556 (3)             bne     @ms2
F892 301F             (        forth.asm):03557 (4+1)           leax    -1,x
F894 26F5             (        forth.asm):03558 (3)             bne     MILLIS1
F896 39               (        forth.asm):03559 (4)             rts
                      (        forth.asm):03560         
F897 04               (        forth.asm):03561         KEYP    fcb     4               ANSI (Facility)
F898 4B45593F         (        forth.asm):03562                 fcc     'KEY?'          ( -- flag )
F89C F87C             (        forth.asm):03563                 fdb     MILLIS
F89E C7               (        forth.asm):03564                 RFCS
F89F 1FC1             (        forth.asm):03565 (4)             tfr     0,x
F8A1 0D42             (        forth.asm):03566 (4)             tst     SERBCNT
F8A3 2702             (        forth.asm):03567 (3)             beq     @done
F8A5 3001             (        forth.asm):03568 (4+1)           leax    1,x             Return the 79-STANDARD true flag
F8A7 7EE7EB           (        forth.asm):03569 (3)     @done   jmp     NPUSH
                      (        forth.asm):03570         
F8AA 03               (        forth.asm):03571         KEY     fcb     3               79-STANDARD (REQ100)
F8AB 4B4559           (        forth.asm):03572                 fcc     'KEY'
F8AE F897             (        forth.asm):03573                 fdb     KEYP
F8B0 C7               (        forth.asm):03574                 RFCS
F8B1 BDE2B4           (        forth.asm):03575 (7)             jsr     GETCH
F8B4 1F89             (        forth.asm):03576 (4)             tfr     a,b
F8B6 4F               (        forth.asm):03577 (1)             clra
F8B7 1F01             (        forth.asm):03578 (4)             tfr     d,x
F8B9 7EE7EB           (        forth.asm):03579 (3)             jmp     NPUSH
                      (        forth.asm):03580         
F8BC 04               (        forth.asm):03581         EMIT    fcb     4               79-STANDARD (REQ207)
F8BD 454D4954         (        forth.asm):03582                 fcc     'EMIT'
F8C1 F8AA             (        forth.asm):03583                 fdb     KEY
F8C3 C7               (        forth.asm):03584                 RFCS
F8C4 BDE7F9           (        forth.asm):03585 (7)             jsr     NPOP
F8C7 1F10             (        forth.asm):03586 (4)             tfr     x,d
F8C9 1F98             (        forth.asm):03587 (4)             tfr     b,a
F8CB 7EE2E0           (        forth.asm):03588 (3)             jmp     PUTCH
                      (        forth.asm):03589         
F8CE 01               (        forth.asm):03590         PLUS    fcb     1               79-STANDARD (REQ121)
F8CF 2B               (        forth.asm):03591                 fcc     '+'             ( n1 n2 -- sum )
F8D0 F8BC             (        forth.asm):03592                 fdb     EMIT
F8D2 C7               (        forth.asm):03593                 RFCS
F8D3 BDE49A           (        forth.asm):03594 (7)             jsr     MIN2PST         We need at least two cells stacked up
F8D6 EC42             (        forth.asm):03595 (5+1)           ldd     2,u             N1
F8D8 E3C4             (        forth.asm):03596 (5+0)           addd    ,u              N2
F8DA ED42             (        forth.asm):03597 (5+1)           std     2,u             SUM
F8DC 3342             (        forth.asm):03598 (4+1)           leau    2,u             Drop the top cell
F8DE 39               (        forth.asm):03599 (4)             rts
                      (        forth.asm):03600         
F8DF 02               (        forth.asm):03601         ONEP    fcb     2               79-STANDARD (REQ107)
F8E0 312B             (        forth.asm):03602                 fcc     '1+'
F8E2 F8CE             (        forth.asm):03603                 fdb     PLUS
F8E4 C7               (        forth.asm):03604                 RFCS
F8E5 BDE495           (        forth.asm):03605 (7)             jsr     MIN1PST         We need at least one cell stacked up
F8E8 ECC4             (        forth.asm):03606 (5+0)           ldd     ,u
F8EA 104C             (        forth.asm):03607 (2)             incd
F8EC EDC4             (        forth.asm):03608 (5+0)           std     ,u
F8EE 39               (        forth.asm):03609 (4)             rts
                      (        forth.asm):03610         
F8EF 02               (        forth.asm):03611         TWOP    fcb     2               79-STANDARD (REQ135)
F8F0 322B             (        forth.asm):03612                 fcc     '2+'            ( n -- n+2 )
F8F2 F8DF             (        forth.asm):03613                 fdb     ONEP
F8F4 C7               (        forth.asm):03614                 RFCS
F8F5 BDE495           (        forth.asm):03615 (7)             jsr     MIN1PST         We need at least one cell stacked up
F8F8 ECC4             (        forth.asm):03616 (5+0)           ldd     ,u
F8FA C30002           (        forth.asm):03617 (3)             addd    #2
F8FD EDC4             (        forth.asm):03618 (5+0)           std     ,u
F8FF 39               (        forth.asm):03619 (4)             rts
                      (        forth.asm):03620         
F900 01               (        forth.asm):03621         MINUS   fcb     1               79-STANDARD (REQ134)
F901 2D               (        forth.asm):03622                 fcc     '-'             ( n1 n2 -- dif )
F902 F8EF             (        forth.asm):03623                 fdb     TWOP
F904 C7               (        forth.asm):03624                 RFCS
F905 BDE49A           (        forth.asm):03625 (7)             jsr     MIN2PST         We need at least two cells stacked up
F908 EC42             (        forth.asm):03626 (5+1)           ldd     2,u             N1
F90A A3C4             (        forth.asm):03627 (5+0)           subd    ,u              N2
F90C ED42             (        forth.asm):03628 (5+1)           std     2,u             DIF
F90E 3342             (        forth.asm):03629 (4+1)           leau    2,u             Drop the top cell
F910 39               (        forth.asm):03630 (4)             rts
                      (        forth.asm):03631         
F911 02               (        forth.asm):03632         ONEM    fcb     2               79-STANDARD (REQ105)
F912 312D             (        forth.asm):03633                 fcc     '1-'
F914 F900             (        forth.asm):03634                 fdb     MINUS
F916 C7               (        forth.asm):03635                 RFCS
F917 BDE495           (        forth.asm):03636 (7)             jsr     MIN1PST         We need at least one cell stacked up
F91A ECC4             (        forth.asm):03637 (5+0)           ldd     ,u
F91C 104A             (        forth.asm):03638 (2)             decd
F91E EDC4             (        forth.asm):03639 (5+0)           std     ,u
F920 39               (        forth.asm):03640 (4)             rts
                      (        forth.asm):03641         
F921 02               (        forth.asm):03642         TWOM    fcb     2               79-STANDARD (REQ129)
F922 322D             (        forth.asm):03643                 fcc     '2-'
F924 F911             (        forth.asm):03644                 fdb     ONEM
F926 C7               (        forth.asm):03645                 RFCS
F927 BDE495           (        forth.asm):03646 (7)             jsr     MIN1PST         We need at least one cell stacked up
F92A ECC4             (        forth.asm):03647 (5+0)           ldd     ,u
F92C 830002           (        forth.asm):03648 (3)             subd    #2
F92F EDC4             (        forth.asm):03649 (5+0)           std     ,u
F931 39               (        forth.asm):03650 (4)             rts
                      (        forth.asm):03651         
F932 01               (        forth.asm):03652         ZEROL   fcb     1               Non-standard
F933 30               (        forth.asm):03653                 fcc     '0'
F934 F921             (        forth.asm):03654                 fdb     TWOM
F936 C7               (        forth.asm):03655                 RFCS
F937 1FC1             (        forth.asm):03656 (4)             tfr     0,x
F939 7EE7EB           (        forth.asm):03657 (3)             jmp     NPUSH
                      (        forth.asm):03658         
F93C 01               (        forth.asm):03659         ONEL    fcb     1               Non-standard
F93D 31               (        forth.asm):03660                 fcc     '1'
F93E F932             (        forth.asm):03661                 fdb     ZEROL
F940 C7               (        forth.asm):03662                 RFCS
F941 8E0001           (        forth.asm):03663 (3)             ldx     #1
F944 7EE7EB           (        forth.asm):03664 (3)             jmp     NPUSH
                      (        forth.asm):03665         
F947 01               (        forth.asm):03666         TWOL    fcb     1               Non-standard
F948 32               (        forth.asm):03667                 fcc     '2'
F949 F93C             (        forth.asm):03668                 fdb     ONEL
F94B C7               (        forth.asm):03669                 RFCS
F94C 8E0002           (        forth.asm):03670 (3)             ldx     #2
F94F 7EE7EB           (        forth.asm):03671 (3)             jmp     NPUSH
                      (        forth.asm):03672         
F952 05               (        forth.asm):03673         SHIFT   fcb     5               79-STANDARD (Ref)
F953 5348494654       (        forth.asm):03674                 fcc     'SHIFT'
F958 F947             (        forth.asm):03675                 fdb     TWOL
F95A C7               (        forth.asm):03676                 RFCS
F95B BDE49A           (        forth.asm):03677 (7)             jsr     MIN2PST         Two cells need to be stacked up
F95E 10A6C4           (        forth.asm):03678 (6+0)           ldw     ,u              Shift bitcount
F961 EC42             (        forth.asm):03679 (5+1)           ldd     2,u             The data itself
F963 105D             (        forth.asm):03680 (2)     @shftlp tstw
F965 270E             (        forth.asm):03681 (3)             beq     @shfdon
F967 2D06             (        forth.asm):03682 (3)             blt     @shftrg
F969 1048             (        forth.asm):03683 (2)             lsld                    Shift left (W is positive)
F96B 105A             (        forth.asm):03684 (2)             decw
F96D 20F4             (        forth.asm):03685 (3)             bra     @shftlp
F96F 1044             (        forth.asm):03686 (2)     @shftrg lsrd                    Shift right (W is negative)
F971 105C             (        forth.asm):03687 (2)             incw
F973 20EE             (        forth.asm):03688 (3)             bra     @shftlp
F975 ED42             (        forth.asm):03689 (5+1)   @shfdon std     2,u             Return value stored there
F977 3342             (        forth.asm):03690 (4+1)           leau    2,u             Drop one cell from the data stack
F979 39               (        forth.asm):03691 (4)             rts
                      (        forth.asm):03692         
                      (        forth.asm):03693         * Signed multiplication by hardware support.
F97A 01               (        forth.asm):03694         MULT    fcb     1               79-STANDARD (REQ138)
F97B 2A               (        forth.asm):03695                 fcc     '*'
F97C F952             (        forth.asm):03696                 fdb     SHIFT
F97E C7               (        forth.asm):03697                 RFCS
F97F BDE49A           (        forth.asm):03698 (7)             jsr     MIN2PST         Two cells need to be stacked up
F982 EC42             (        forth.asm):03699 (5+1)           ldd     2,u
F984 11AFC4           (        forth.asm):03700 (30+0)          muld    ,u
F987 10A742           (        forth.asm):03701 (6+1)           stw     2,u             Return only the lower 16 bits
F98A 3342             (        forth.asm):03702 (4+1)           leau    2,u             Drop one cell from the data stack
F98C 39               (        forth.asm):03703 (4)             rts
                      (        forth.asm):03704         
F98D 02               (        forth.asm):03705         TWOTIM  fcb     2               79-STANDARD (REF)
F98E 322A             (        forth.asm):03706                 fcc     '2*'
F990 F97A             (        forth.asm):03707                 fdb     MULT
F992 C7               (        forth.asm):03708                 RFCS
F993 BDE495           (        forth.asm):03709 (7)             jsr     MIN1PST         One cell needs to be stacked up
F996 ECC4             (        forth.asm):03710 (5+0)           ldd     ,u
F998 1048             (        forth.asm):03711 (2)             asld
F99A EDC4             (        forth.asm):03712 (5+0)           std     ,u
F99C 39               (        forth.asm):03713 (4)             rts
                      (        forth.asm):03714         
F99D 02               (        forth.asm):03715         TWODIV  fcb     2
F99E 322F             (        forth.asm):03716                 fcc     '2/'
F9A0 F98D             (        forth.asm):03717                 fdb     TWOTIM
F9A2 C7               (        forth.asm):03718                 RFCS
F9A3 BDE495           (        forth.asm):03719 (7)             jsr     MIN1PST         One cell needs to be stacked up
F9A6 ECC4             (        forth.asm):03720 (5+0)           ldd     ,u
F9A8 1047             (        forth.asm):03721 (2)             asrd
F9AA EDC4             (        forth.asm):03722 (5+0)           std     ,u
F9AC 39               (        forth.asm):03723 (4)             rts
                      (        forth.asm):03724         
                      (        forth.asm):03725         * /, MOD and /MOD are essentially the same function returning
                      (        forth.asm):03726         * the different parts returned by DIVQ.
                      (        forth.asm):03727         * We use a global variable to distinguish which functionality
                      (        forth.asm):03728         * is being requested:
                      (        forth.asm):03729         * 0: return the modulo and the quotient (/MOD).
                      (        forth.asm):03730         * 1: return the modulo only (MOD).
                      (        forth.asm):03731         * 2: return the quotient only (/).
F9AD 01               (        forth.asm):03732         DIV     fcb     1               79-STANDARD (REQ178)
F9AE 2F               (        forth.asm):03733                 fcc     '/'             ( N1 N2 -- N3 [N4] )
F9AF F99D             (        forth.asm):03734                 fdb     TWODIV
F9B1 C7               (        forth.asm):03735                 RFCS
F9B2 8602             (        forth.asm):03736 (2)             lda     #2
F9B4 9731             (        forth.asm):03737 (3)             sta     DIVFCN          Function 2: return only the quotient
F9B6 BDE49A           (        forth.asm):03738 (7)     DIV1    jsr     MIN2PST         At least two cells need to be stacked up
F9B9 0F32             (        forth.asm):03739 (5)             clr     F83DIVF         Assume no adjustment required for floored div.
F9BB A642             (        forth.asm):03740 (4+1)           lda     2,u             Numerator's MSB
F9BD A8C4             (        forth.asm):03741 (4+0)           eora    ,u              Different sign from the denominator's MSB?
F9BF 2A02             (        forth.asm):03742 (3)             bpl     @divprc         No, proceed to the division code
F9C1 0C32             (        forth.asm):03743 (5)             inc     F83DIVF         Numerator and denominator have different signs
                      (        forth.asm):03744         * Division by zero conditions are dealt with through the trap handler.
F9C3 104F             (        forth.asm):03745 (2)     @divprc clrd                    Clear the numerator's MSC
F9C5 10A642           (        forth.asm):03746 (6+1)           ldw     2,u             Numerator's LSC
F9C8 2A02             (        forth.asm):03747 (3)             bpl     @dvnsex         Branch if no sign extention is needed
                      (        forth.asm):03748         * Sign extention from W to Q.
F9CA 1043             (        forth.asm):03749 (2)             comd                    -1 to D (numerator's MSC)
F9CC 11AEC4           (        forth.asm):03750 (36)    @dvnsex divq    ,u              ,u has the denominator
F9CF 8D19             (        forth.asm):03751 (6)             bsr     FDIVADJ         Perform floored division adjustment, if needed
F9D1 0D31             (        forth.asm):03752 (4)     @no83ad tst     DIVFCN
F9D3 2606             (        forth.asm):03753 (3)             bne     @div4
F9D5 ED42             (        forth.asm):03754 (5+1)           std     2,u             Function 0: return the modulo and the quotient
F9D7 10A7C4           (        forth.asm):03755 (6+0)   @div3   stw     ,u              Function 2: return only the quotient
F9DA 39               (        forth.asm):03756 (4)             rts
F9DB 3342             (        forth.asm):03757 (4+1)   @div4   leau    2,u             Drop one cell from the data stack
F9DD 1F07             (        forth.asm):03758 (4)             tfr     d,v             Backup the modulo
F9DF 9631             (        forth.asm):03759 (3)             lda     DIVFCN
F9E1 8101             (        forth.asm):03760 (2)             cmpa    #1
F9E3 26F2             (        forth.asm):03761 (3)             bne     @div3
F9E5 1F70             (        forth.asm):03762 (4)             tfr     v,d             Restore the modulo
F9E7 EDC4             (        forth.asm):03763 (5+0)           std     ,u              Function 1: return only the modulo
F9E9 39               (        forth.asm):03764 (4)             rts
                      (        forth.asm):03765         
                      (        forth.asm):03766         * Quotient is returned in W, modulo in D but this is symmetric division :-(
                      (        forth.asm):03767         * Need to return a floored division result for compat. with F83 and ANSI impls.
F9EA 104D             (        forth.asm):03768 (2)     FDIVADJ tstd                    Is the remainder zero?
F9EC 2708             (        forth.asm):03769 (3)             beq     @no83ad         Yes. No adjusment required for floored division
F9EE 0D32             (        forth.asm):03770 (4)             tst     F83DIVF         Different signs for numerator and denominator?
F9F0 2704             (        forth.asm):03771 (3)             beq     @no83ad         No. Adjusment not needed for floored division
                      (        forth.asm):03772         * Adjusment for F83 floored division.
F9F2 105A             (        forth.asm):03773 (2)             decw                    Decrement the quotient
F9F4 E3C4             (        forth.asm):03774 (5+0)           addd    ,u              Add the denominator to the modulo
F9F6 39               (        forth.asm):03775 (4)     @no83ad rts
                      (        forth.asm):03776         
F9F7 03               (        forth.asm):03777         MOD     fcb     3               79-STANDARD (REQ104)
F9F8 4D4F44           (        forth.asm):03778                 fcc     'MOD'           ( N1 N2 -- N3 )
F9FB F9AD             (        forth.asm):03779                 fdb     DIV
F9FD C7               (        forth.asm):03780                 RFCS
F9FE 8601             (        forth.asm):03781 (2)             lda     #1
FA00 9731             (        forth.asm):03782 (3)             sta     DIVFCN
FA02 20B2             (        forth.asm):03783 (3)             bra     DIV1
                      (        forth.asm):03784         
FA04 04               (        forth.asm):03785         MDIV    fcb     4               79-STANDARD (REQ198)
FA05 2F4D4F44         (        forth.asm):03786                 fcc     '/MOD'          ( N1 N2 -- N3 N4 )
FA09 F9F7             (        forth.asm):03787                 fdb     MOD
FA0B C7               (        forth.asm):03788                 RFCS
FA0C 0F31             (        forth.asm):03789 (5)             clr     DIVFCN
FA0E 20A6             (        forth.asm):03790 (3)             bra     DIV1
                      (        forth.asm):03791         
FA10 02               (        forth.asm):03792         STRSLSH fcb     2               79-STANDARD (REQ220)
FA11 2A2F             (        forth.asm):03793                 fcc     '*/'            ( N1 N2 N3 -- N4 [N5] )
FA13 FA04             (        forth.asm):03794                 fdb     MDIV
FA15 C7               (        forth.asm):03795                 RFCS
FA16 8601             (        forth.asm):03796 (2)             lda     #1
FA18 9733             (        forth.asm):03797 (3)             sta     STSLFCN
FA1A BDE49F           (        forth.asm):03798 (7)     STRSL1  jsr     MIN3PST         Three cells need to be stacked up
FA1D 0F32             (        forth.asm):03799 (5)             clr     F83DIVF         Assume no adjustment required for floored div.
                      (        forth.asm):03800         * Division by zero conditions are dealt with through the trap handler.
FA1F EC44             (        forth.asm):03801 (5+1)           ldd     4,u             N1
FA21 11AF42           (        forth.asm):03802 (30+1)          muld    2,u             N2 (N1 * N2 -> D:W)
FA24 3402             (        forth.asm):03803 (4+1)           pshs    a               Product's MSC's MSB
FA26 A8C4             (        forth.asm):03804 (4+0)           eora    ,u              Different sign from the denominator's?
FA28 2A02             (        forth.asm):03805 (3)             bpl     @stslpr         No. Floored division adjustment not needed
FA2A 0C32             (        forth.asm):03806 (5)             inc     F83DIVF
FA2C 3502             (        forth.asm):03807 (4+1)   @stslpr puls    a
FA2E 11AEC4           (        forth.asm):03808 (36)            divq    ,u              N3
FA31 8DB7             (        forth.asm):03809 (6)             bsr     FDIVADJ         Perform floored division adjustment, if needed
FA33 3342             (        forth.asm):03810 (4+1)           leau    2,u
FA35 0D33             (        forth.asm):03811 (4)             tst     STSLFCN
FA37 2606             (        forth.asm):03812 (3)             bne     @strsl2         Just the quotient, Ma'am!
FA39 ED42             (        forth.asm):03813 (5+1)           std     2,u             N4: the modulo
FA3B 10A7C4           (        forth.asm):03814 (6+0)           stw     ,u              N5: the quotient
FA3E 39               (        forth.asm):03815 (4)             rts
FA3F 3342             (        forth.asm):03816 (4+1)   @strsl2 leau    2,u
FA41 10A7C4           (        forth.asm):03817 (6+0)           stw     ,u              N4
FA44 39               (        forth.asm):03818 (4)             rts
                      (        forth.asm):03819         
FA45 05               (        forth.asm):03820         STRSLMD fcb     5               79-STANDARD (REQ192)
FA46 2A2F4D4F44       (        forth.asm):03821                 fcc     '*/MOD'         ( N1 N2 N3 -- N4 N5 )
FA4B FA10             (        forth.asm):03822                 fdb     STRSLSH
FA4D C7               (        forth.asm):03823                 RFCS
FA4E 0F33             (        forth.asm):03824 (5)             clr     STSLFCN
FA50 20C8             (        forth.asm):03825 (3)             bra     STRSL1
                      (        forth.asm):03826         
                      (        forth.asm):03827         * Returns the current value of the Sreg register (informational only).
                      (        forth.asm):03828         * This word is either called (JSROPC) or jumped to (JMPOPC), as a result
                      (        forth.asm):03829         * of the tail call optimization process. There is no way to tell the
                      (        forth.asm):03830         * difference. Here we assume that it is called and return Sreg+2.
FA52 01               (        forth.asm):03831         SYSSTK  fcb     1               Non-standard
FA53 53               (        forth.asm):03832                 fcc     'S'
FA54 FA45             (        forth.asm):03833                 fdb     STRSLMD
FA56 C7               (        forth.asm):03834                 RFCS
FA57 3062             (        forth.asm):03835 (4+1)           leax    2,s
FA59 7EE7EB           (        forth.asm):03836 (3)             jmp     NPUSH
                      (        forth.asm):03837         
FA5C 07               (        forth.asm):03838         PAYLOAD fcb     7               Non standard
FA5D 5041594C4F4144   (        forth.asm):03839                 fcc     'PAYLOAD'       ( -- len ) where len is the code payload
FA64 FA52             (        forth.asm):03840                 fdb     SYSSTK          of the word located by FIND (or NULL)
FA66 C7               (        forth.asm):03841                 RFCS
FA67 9E10             (        forth.asm):03842 (4)             ldx     FNDPLD          Code payload reported by FIND
FA69 7EE7EB           (        forth.asm):03843 (3)             jmp     NPUSH
                      (        forth.asm):03844         
                      (        forth.asm):03845         * Differences from the original code:
                      (        forth.asm):03846         * - display number in HEX rather than in the current base.
                      (        forth.asm):03847         * - dropped feat: the original stuff was interactively paged by 15 line screens.
                      (        forth.asm):03848         * - added feat: display code implementation payload.
                      (        forth.asm):03849         * - added feat: display the immedediate and define (compile time only) flags.
                      (        forth.asm):03850         * - added feat: display the forgettable status (R/W). Everything user
                      (        forth.asm):03851         *   defined is forgettable (i.e. RAM resident).
FA6C 05               (        forth.asm):03852         VLIST   fcb     5               Non-standard
FA6D 564C495354       (        forth.asm):03853                 fcc     'VLIST'         ( -- )
FA72 FA5C             (        forth.asm):03854                 fdb     PAYLOAD
FA74 C7               (        forth.asm):03855                 RFCS
FA75 9E08             (        forth.asm):03856 (4)             ldx     DICEND
FA77 9F16             (        forth.asm):03857 (4)             stx     VLPRVEP         Last word code address + 1
FA79 9E06             (        forth.asm):03858 (4)             ldx     LSTWAD
FA7B 9F18             (        forth.asm):03859 (4)     @vlist1 stx     VLPRVHD         Last word header pointer
FA7D 108E03EA         (        forth.asm):03860 (4)             ldy     #TBUFF
FA81 E680             (        forth.asm):03861 (4+1)           ldb     ,x+
FA83 3404             (        forth.asm):03862 (4+1)           pshs    b
FA85 C41F             (        forth.asm):03863 (2)             andb    #WRLNMSK        Mask out word length
FA87 4F               (        forth.asm):03864 (1)             clra
FA88 3404             (        forth.asm):03865 (4+1)           pshs    b               Preserve word length
FA8A 1F06             (        forth.asm):03866 (4)             tfr     d,w
FA8C 113812           (        forth.asm):03867 (6+?)           tfm     x+,y+
FA8F 3502             (        forth.asm):03868 (4+1)           puls    a               Restore word length to A
FA91 C620             (        forth.asm):03869 (2)             ldb     #WRLNMSK+1
FA93 103289           (        forth.asm):03870 (4)             subr    a,b             Number of spaces we want to emit
FA96 8620             (        forth.asm):03871 (2)             lda     #SP
FA98 A7A0             (        forth.asm):03872 (4+1)   @vlist2 sta     ,y+
FA9A 5A               (        forth.asm):03873 (1)             decb
FA9B 26FB             (        forth.asm):03874 (3)             bne     @vlist2
FA9D 6FA0             (        forth.asm):03875 (6+1)           clr     ,y+             Terminate formatted output string
FA9F 3410             (        forth.asm):03876 (4+2)           pshs    x               Address of the current word backlink address
FAA1 BDE300           (        forth.asm):03877 (7)             jsr     PUTCR           Carriage return is output before anything else
FAA4 8E03EA           (        forth.asm):03878 (3)             ldx     #TBUFF
FAA7 BDE2F3           (        forth.asm):03879 (7)             jsr     PUTS            Output word name formatted on 17 chars + SP
FAAA AEE4             (        forth.asm):03880 (5+0)           ldx     ,s
                      (        forth.asm):03881                 IFNE    RELFEAT
FAAC 3003             (        forth.asm):03882 (4+1)           leax    3,x             Word XT to X (Skip backlink and checksum)
                      (        forth.asm):03883                 ELSE
                      (        forth.asm):03884                 leax    2,x             Word XT to X (Skip backlink)
                      (        forth.asm):03885                 ENDC                    RELFEAT
FAAE 1F10             (        forth.asm):03886 (4)             tfr     x,d             CVNSTR depends on UBASE and we want HEX output
FAB0 108E03EA         (        forth.asm):03887 (4)             ldy     #TBUFF
FAB4 BDE195           (        forth.asm):03888 (7)             jsr     HDMP4           So we use trusted debugging code
FAB7 8E03EA           (        forth.asm):03889 (3)             ldx     #TBUFF
FABA BDE2F3           (        forth.asm):03890 (7)             jsr     PUTS
                      (        forth.asm):03891         * Now to display word implementation length.
                      (        forth.asm):03892         * Implementation code length is from ,s+3 (or 2) to VLPRVEP
FABD 8609             (        forth.asm):03893 (2)             lda     #HT
FABF BDE2E0           (        forth.asm):03894 (7)             jsr     PUTCH
FAC2 9E16             (        forth.asm):03895 (4)             ldx     VLPRVEP
FAC4 10AEE4           (        forth.asm):03896 (6+0)           ldy     ,s
                      (        forth.asm):03897                 IFNE    RELFEAT
FAC7 3123             (        forth.asm):03898 (4+1)           leay    3,y             Current word code entry address
                      (        forth.asm):03899                 ELSE
                      (        forth.asm):03900                 leay    2,y             Current word code entry address
                      (        forth.asm):03901                 ENDC                    RELFEAT
FAC9 103221           (        forth.asm):03902 (4)             subr    y,x
FACC 1F10             (        forth.asm):03903 (4)             tfr     x,d
FACE 108E03EA         (        forth.asm):03904 (4)             ldy     #TBUFF
FAD2 BDE195           (        forth.asm):03905 (7)             jsr     HDMP4
FAD5 8E03EA           (        forth.asm):03906 (3)             ldx     #TBUFF
FAD8 BDE2F3           (        forth.asm):03907 (7)             jsr     PUTS
                      (        forth.asm):03908         # Display attribute flags.
FADB 8609             (        forth.asm):03909 (2)             lda     #HT
FADD BDE2E0           (        forth.asm):03910 (7)             jsr     PUTCH
FAE0 8E03EA           (        forth.asm):03911 (3)             ldx     #TBUFF
FAE3 E662             (        forth.asm):03912 (4+1)           ldb     2,s             Word attribute to B
FAE5 862D             (        forth.asm):03913 (2)             lda     #'-
FAE7 C580             (        forth.asm):03914 (2)             bitb    #IMDFLM         Check for immediate
FAE9 2702             (        forth.asm):03915 (3)             beq     @vlist4
FAEB 8649             (        forth.asm):03916 (2)             lda     #'I
FAED A780             (        forth.asm):03917 (4+1)   @vlist4 sta     ,x+
FAEF 862D             (        forth.asm):03918 (2)             lda     #'-
FAF1 C540             (        forth.asm):03919 (2)             bitb    #DEFFLM         Check for define (compile time only)
FAF3 2702             (        forth.asm):03920 (3)             beq     @vlist5
FAF5 8643             (        forth.asm):03921 (2)             lda     #'C
FAF7 A780             (        forth.asm):03922 (4+1)   @vlist5 sta     ,x+
                      (        forth.asm):03923                 IFNE    RELFEAT
FAF9 862D             (        forth.asm):03924 (2)             lda     #'-
FAFB C520             (        forth.asm):03925 (2)             bitb    #MONFLM         Check for monitored status
FAFD 2702             (        forth.asm):03926 (3)             beq     @vlst51
FAFF 864D             (        forth.asm):03927 (2)             lda     #'M
FB01 A780             (        forth.asm):03928 (4+1)   @vlst51 sta     ,x+
                      (        forth.asm):03929                 ENDC                    RELFEAT
                      (        forth.asm):03930         * Check for forgettable also. In ROM => R else W unless we just processed '@'.
FB03 8652             (        forth.asm):03931 (2)             lda     #'R
FB05 10AEE4           (        forth.asm):03932 (6+0)           ldy     ,s
                      (        forth.asm):03933                 IFNE    RELFEAT
FB08 3123             (        forth.asm):03934 (4+1)           leay    3,y             Word entry point to Y
                      (        forth.asm):03935                 ELSE
                      (        forth.asm):03936                 leay    2,y             Word entry point to Y
                      (        forth.asm):03937                 ENDC                    RELFEAT
FB0A 108C0C65         (        forth.asm):03938 (4)             cmpy    #RAMFTCH        @ in RAM is unforgettable
FB0E 2708             (        forth.asm):03939 (3)             beq     @vlist6
FB10 108CE000         (        forth.asm):03940 (4)             cmpy    #ROMSTRT        as are all ROM resident words
FB14 2402             (        forth.asm):03941 (3)             bcc     @vlist6
FB16 8657             (        forth.asm):03942 (2)             lda     #'W
FB18 A780             (        forth.asm):03943 (4+1)   @vlist6 sta     ,x+
FB1A 6F84             (        forth.asm):03944 (6+0)           clr     ,x
FB1C 8E03EA           (        forth.asm):03945 (3)             ldx     #TBUFF
FB1F BDE2F3           (        forth.asm):03946 (7)             jsr     PUTS
                      (        forth.asm):03947         * The point at which VLPRVHD==WDICSPC is a singularity (RAM to ROM transition).
FB22 9E18             (        forth.asm):03948 (4)             ldx     VLPRVHD
FB24 8C0C60           (        forth.asm):03949 (3)             cmpx    #WDICSPC
FB27 2608             (        forth.asm):03950 (3)             bne     @vlist7
FB29 8EFDFF           (        forth.asm):03951 (3)             ldx     #QMARK          Word just before @ (ROM flavor)
FB2C 9F18             (        forth.asm):03952 (4)             stx     VLPRVHD
FB2E 8EFE0A           (        forth.asm):03953 (3)             ldx     #THEEND
FB31 9F16             (        forth.asm):03954 (4)     @vlist7 stx     VLPRVEP
FB33 3510             (        forth.asm):03955 (4+2)           puls    x
FB35 3504             (        forth.asm):03956 (4+1)           puls    b
FB37 AE84             (        forth.asm):03957 (5+0)           ldx     ,x              Point to previous word
FB39 1026FF3E         (        forth.asm):03958 (5)             lbne    @vlist1
FB3D 39               (        forth.asm):03959 (4)             rts
                      (        forth.asm):03960         
FB3E 05               (        forth.asm):03961         STATE   fcb     5
FB3F 5354415445       (        forth.asm):03962                 fcc     'STATE'
FB44 FA6C             (        forth.asm):03963                 fdb     VLIST
FB46 C7               (        forth.asm):03964                 RFCS
FB47 8E0120           (        forth.asm):03965 (3)             ldx     #USTATE
FB4A 7EE7EB           (        forth.asm):03966 (3)             jmp     NPUSH
                      (        forth.asm):03967         
FB4D 04               (        forth.asm):03968         BASE    fcb     4               79-STANDARD (REQ115)
FB4E 42415345         (        forth.asm):03969                 fcc     'BASE'
FB52 FB3E             (        forth.asm):03970                 fdb     STATE
FB54 C7               (        forth.asm):03971                 RFCS
FB55 8E011E           (        forth.asm):03972 (3)             ldx     #UBASE
FB58 7EE7EB           (        forth.asm):03973 (3)             jmp     NPUSH
                      (        forth.asm):03974         
FB5B 03               (        forth.asm):03975         BIN     fcb     3               Non-standard
FB5C 42494E           (        forth.asm):03976                 fcc     'BIN'
FB5F FB4D             (        forth.asm):03977                 fdb     BASE
FB61 C7               (        forth.asm):03978                 RFCS
FB62 CC0002           (        forth.asm):03979 (3)             ldd     #2
FB65 DD1E             (        forth.asm):03980 (4)             std     UBASE
FB67 39               (        forth.asm):03981 (4)             rts
                      (        forth.asm):03982         
FB68 05               (        forth.asm):03983         OCTAL   fcb     5               79-STANDARD (REF)
FB69 4F4354414C       (        forth.asm):03984                 fcc     'OCTAL'
FB6E FB5B             (        forth.asm):03985                 fdb     BIN
FB70 C7               (        forth.asm):03986                 RFCS
FB71 CC0008           (        forth.asm):03987 (3)             ldd     #8
FB74 DD1E             (        forth.asm):03988 (4)             std     UBASE
FB76 39               (        forth.asm):03989 (4)             rts
                      (        forth.asm):03990         
FB77 07               (        forth.asm):03991         DECIMAL fcb     7               79-STANDARD (REQ197)
FB78 444543494D414C   (        forth.asm):03992                 fcc     'DECIMAL'
FB7F FB68             (        forth.asm):03993                 fdb     OCTAL
FB81 C7               (        forth.asm):03994                 RFCS
FB82 CC000A           (        forth.asm):03995 (3)             ldd     #10
FB85 DD1E             (        forth.asm):03996 (4)             std     UBASE
FB87 39               (        forth.asm):03997 (4)             rts
                      (        forth.asm):03998         
FB88 03               (        forth.asm):03999         HEX     fcb     3               79-STANDARD (REF162)
FB89 484558           (        forth.asm):04000                 fcc     'HEX'
FB8C FB77             (        forth.asm):04001                 fdb     DECIMAL
FB8E C7               (        forth.asm):04002                 RFCS
FB8F CC0010           (        forth.asm):04003 (3)             ldd     #16
FB92 DD1E             (        forth.asm):04004 (4)             std     UBASE
FB94 39               (        forth.asm):04005 (4)             rts
                      (        forth.asm):04006         
FB95 02               (        forth.asm):04007         DOTTICK fcb     2               Non-standard (SwiftForth)
FB96 2E27             (        forth.asm):04008                 fcb     $2E,$27         .' ( memaddr -- )
FB98 FB88             (        forth.asm):04009                 fdb     HEX
FB9A C7               (        forth.asm):04010                 RFCS
                      (        forth.asm):04011                 IFNE    SSDFEAT
FB9B BDE7F9           (        forth.asm):04012 (7)             jsr     NPOP
FB9E 1F12             (        forth.asm):04013 (4)             tfr     x,y
FBA0 8E039A           (        forth.asm):04014 (3)             ldx     #HEXBUF
FBA3 BDE62A           (        forth.asm):04015 (7)             jsr     FINDSYM
                      (        forth.asm):04016                 ELSE
                      (        forth.asm):04017                 lda     #'$
                      (        forth.asm):04018                 jsr     PUTCH
                      (        forth.asm):04019                 jsr     NPOP
                      (        forth.asm):04020                 tfr     x,d
                      (        forth.asm):04021                 ldy     #HEXBUF
                      (        forth.asm):04022                 jsr     HDMP4
                      (        forth.asm):04023                 ENDC                    SSDFEAT
FBA6 8E039A           (        forth.asm):04024 (3)             ldx     #HEXBUF
FBA9 7EE2F3           (        forth.asm):04025 (3)             jmp     PUTS
                      (        forth.asm):04026         
                      (        forth.asm):04027         * Display a dump of the data stack in the current BASE. In Leo Brodie's
                      (        forth.asm):04028         * "Starting Forth" the data stack is printed from the bottom up. So it is here.
FBAC 02               (        forth.asm):04029         DDUMP   fcb     2               ANSI (Optional "Programming tools" word set)
FBAD 2E53             (        forth.asm):04030                 fcc     '.S'            ( -- )
FBAF FB95             (        forth.asm):04031                 fdb     DOTTICK
FBB1 C7               (        forth.asm):04032                 RFCS
FBB2 CC0296           (        forth.asm):04033 (3)             ldd     #NSTBOT
FBB5 103230           (        forth.asm):04034 (4)             subr    u,d
FBB8 1044             (        forth.asm):04035 (2)             lsrd                    DEPTH is in D
FBBA 272A             (        forth.asm):04036 (3)             beq     @ndump3         Data stack is empty
FBBC 3440             (        forth.asm):04037 (4+2)           pshs    u
FBBE CE0296           (        forth.asm):04038 (3)             ldu     #NSTBOT         Pointing to the bottom of the data stack
FBC1 8601             (        forth.asm):04039 (2)             lda     #1
FBC3 9737             (        forth.asm):04040 (3)             sta     CVISSGN         Force a signed number conversion
FBC5 3404             (        forth.asm):04041 (4+1)   @ndump1 pshs    b
FBC7 AEC3             (        forth.asm):04042 (5+2)           ldx     ,--u
FBC9 BDE441           (        forth.asm):04043 (7)             jsr     CVNSTR
FBCC 8E03EA           (        forth.asm):04044 (3)             ldx     #TBUFF
                      (        forth.asm):04045         # Skip leading spaces.
FBCF A680             (        forth.asm):04046 (4+1)   @ndump2 lda     ,x+
FBD1 8120             (        forth.asm):04047 (2)             cmpa    #SP
FBD3 27FA             (        forth.asm):04048 (3)             beq     @ndump2
FBD5 301F             (        forth.asm):04049 (4+1)           leax    -1,x
FBD7 BDE2F3           (        forth.asm):04050 (7)             jsr     PUTS
FBDA 8620             (        forth.asm):04051 (2)             lda     #SP
FBDC BDE2E0           (        forth.asm):04052 (7)             jsr     PUTCH
FBDF 3504             (        forth.asm):04053 (4+1)           puls    b
FBE1 5A               (        forth.asm):04054 (1)             decb
FBE2 26E1             (        forth.asm):04055 (3)             bne     @ndump1
FBE4 3540             (        forth.asm):04056 (4+2)           puls    u
FBE6 39               (        forth.asm):04057 (4)     @ndump3 rts
                      (        forth.asm):04058         
FBE7 04               (        forth.asm):04059         QRYDUP  fcb     4               79-STANDARD (REQ184)
FBE8 3F445550         (        forth.asm):04060                 fcc     '?DUP'
FBEC FBAC             (        forth.asm):04061                 fdb     DDUMP
FBEE C7               (        forth.asm):04062                 RFCS
FBEF BDE7F9           (        forth.asm):04063 (7)             jsr     NPOP
FBF2 3610             (        forth.asm):04064                 UCNPUSH                 Push back the original parameter
FBF4 1037C1           (        forth.asm):04065 (4)             cmpr    0,x
FBF7 2601             (        forth.asm):04066 (3)             bne     @qrydp1
FBF9 39               (        forth.asm):04067 (4)             rts
FBFA 7EE7EB           (        forth.asm):04068 (3)     @qrydp1 jmp     NPUSH           And DUP if NZ
                      (        forth.asm):04069         
FBFD 04               (        forth.asm):04070         TUCK    fcb     4               ANSI (Core ext)
FBFE 5455434B         (        forth.asm):04071                 fcc     'TUCK'          ( x1 x2 -- x2 x1 x2 ) i.e. SWAP OVER
FC02 FBE7             (        forth.asm):04072                 fdb     QRYDUP
FC04 C7               (        forth.asm):04073                 RFCS
FC05 8D2F             (        forth.asm):04074                 RFXT    bsr,SWAP+7      XT for SWAP
FC07 2073             (        forth.asm):04075                 RFXT    bra,OVER+7      XT for OVER
                      (        forth.asm):04076         
FC09 03               (        forth.asm):04077         NIP     fcb     3               ANSI (Core ext)
FC0A 4E4950           (        forth.asm):04078                 fcc     'NIP'           ( x1 x2 -- x2 ) i.e. SWAP DROP
FC0D FBFD             (        forth.asm):04079                 fdb     TUCK
FC0F C7               (        forth.asm):04080                 RFCS
FC10 8D24             (        forth.asm):04081                 RFXT    bsr,SWAP+7      XT for SWAP
FC12 2017             (        forth.asm):04082                 RFXT    bra,DROP+7      XT for DROP
                      (        forth.asm):04083         
FC14 03               (        forth.asm):04084         DUP     fcb     3               79-STANDARD (REQ205)
FC15 445550           (        forth.asm):04085                 fcc     'DUP'
FC18 FC09             (        forth.asm):04086                 fdb     NIP
FC1A C7               (        forth.asm):04087                 RFCS
FC1B BDE495           (        forth.asm):04088 (7)             jsr     MIN1PST         At least one cell needs to be stacked up
FC1E AEC4             (        forth.asm):04089 (5+0)           ldx     ,u
FC20 7EE7EB           (        forth.asm):04090 (3)             jmp     NPUSH
                      (        forth.asm):04091         
FC23 04               (        forth.asm):04092         DROP    fcb     4               79-STANDARD (REQ233)
FC24 44524F50         (        forth.asm):04093                 fcc     'DROP'
FC28 FC14             (        forth.asm):04094                 fdb     DUP
FC2A C7               (        forth.asm):04095                 RFCS
FC2B 7EE7F9           (        forth.asm):04096 (3)             jmp     NPOP
                      (        forth.asm):04097         
FC2E 04               (        forth.asm):04098         SWAP    fcb     4               79-STANDARD (REQ230)
FC2F 53574150         (        forth.asm):04099                 fcc     'SWAP'
FC33 FC23             (        forth.asm):04100                 fdb     DROP
FC35 C7               (        forth.asm):04101                 RFCS
FC36 BDE49A           (        forth.asm):04102 (7)             jsr     MIN2PST         We need at least two cells stacked up
FC39 10ECC4           (        forth.asm):04103 (8+0)           ldq     ,u              In place SWAP
FC3C 1E06             (        forth.asm):04104 (5)             exg     d,w
FC3E 10EDC4           (        forth.asm):04105 (8+0)           stq     ,u
FC41 39               (        forth.asm):04106 (4)             rts
                      (        forth.asm):04107         
FC42 04               (        forth.asm):04108         PICK    fcb     4
FC43 5049434B         (        forth.asm):04109                 fcc     'PICK'
FC47 FC2E             (        forth.asm):04110                 fdb     SWAP
FC49 C7               (        forth.asm):04111                 RFCS
FC4A BDE7F9           (        forth.asm):04112 (7)             jsr     NPOP
FC4D CC0296           (        forth.asm):04113 (3)     PICK1   ldd     #NSTBOT
FC50 103230           (        forth.asm):04114 (4)             subr    u,d
FC53 1044             (        forth.asm):04115 (2)             lsrd                    D has the data stack depth in cells
FC55 103710           (        forth.asm):04116 (4)             cmpr    x,d
FC58 2405             (        forth.asm):04117 (3)             bcc     @pick1
FC5A C60D             (        forth.asm):04118 (2)     ERRPCK  ldb     #13             Argument is greater than DEPTH
FC5C BDE76A           (        forth.asm):04119 (7)             jsr     ERRHDLR         No return
FC5F 1F10             (        forth.asm):04120 (4)     @pick1  tfr     x,d
FC61 104D             (        forth.asm):04121 (2)             tstd
FC63 27F5             (        forth.asm):04122 (3)             beq     ERRPCK
FC65 104A             (        forth.asm):04123 (2)             decd                    Minus 1, unlike in the Z80 implementation
FC67 1048             (        forth.asm):04124 (2)             lsld                    Times 2
FC69 1F31             (        forth.asm):04125 (4)             tfr     u,x
FC6B 308B             (        forth.asm):04126 (4+2)           leax    d,x
FC6D 1F12             (        forth.asm):04127 (4)             tfr     x,y             For the sake of ROLL's implementation
FC6F AE84             (        forth.asm):04128 (5+0)           ldx     ,x
FC71 3610             (        forth.asm):04129                 UCNPUSH
FC73 39               (        forth.asm):04130 (4)             rts
                      (        forth.asm):04131         
FC74 04               (        forth.asm):04132         OVER    fcb     4
FC75 4F564552         (        forth.asm):04133                 fcc     'OVER'
FC79 FC42             (        forth.asm):04134                 fdb     PICK
FC7B C7               (        forth.asm):04135                 RFCS
FC7C 8E0002           (        forth.asm):04136 (3)             ldx     #2
FC7F 20CC             (        forth.asm):04137 (3)             bra     PICK1
                      (        forth.asm):04138         
FC81 04               (        forth.asm):04139         ROLL    fcb     4
FC82 524F4C4C         (        forth.asm):04140                 fcc     'ROLL'
FC86 FC74             (        forth.asm):04141                 fdb     OVER
FC88 C7               (        forth.asm):04142                 RFCS
FC89 BDE7F9           (        forth.asm):04143 (7)             jsr     NPOP
FC8C 1F16             (        forth.asm):04144 (4)     ROLL1   tfr     x,w
FC8E 8DBD             (        forth.asm):04145 (6)             bsr     PICK1           Let PICK do the error handling
FC90 3121             (        forth.asm):04146 (4+1)           leay    1,y             Point to the LSB since we're moving backward
FC92 1F21             (        forth.asm):04147 (4)             tfr     y,x
FC94 301E             (        forth.asm):04148 (4+1)           leax    -2,x
FC96 103066           (        forth.asm):04149 (4)             addr    w,w
FC99 113912           (        forth.asm):04150 (6+?)           tfm     x-,y-
FC9C 7EE7F9           (        forth.asm):04151 (3)             jmp     NPOP
                      (        forth.asm):04152         
FC9F 03               (        forth.asm):04153         ROT     fcb     3
FCA0 524F54           (        forth.asm):04154                 fcc     'ROT'
FCA3 FC81             (        forth.asm):04155                 fdb     ROLL
FCA5 C7               (        forth.asm):04156                 RFCS
FCA6 8E0003           (        forth.asm):04157 (3)             ldx     #3
FCA9 20E1             (        forth.asm):04158 (3)             bra     ROLL1
                      (        forth.asm):04159         
FCAB 04               (        forth.asm):04160         MROT    fcb     4
FCAC 2D524F54         (        forth.asm):04161                 fcc     '-ROT'
FCB0 FC9F             (        forth.asm):04162                 fdb     ROT
FCB2 C7               (        forth.asm):04163                 RFCS
FCB3 8DF1             (        forth.asm):04164                 RFXT    bsr,ROT+6       XT for ROT
FCB5 20EF             (        forth.asm):04165                 RFXT    bra,ROT+6       XT for ROT
                      (        forth.asm):04166         
FCB7 02               (        forth.asm):04167         CCOMMA  fcb     2               79-STANDARD (REF)
FCB8 432C             (        forth.asm):04168                 fcc     'C,'
FCBA FCAB             (        forth.asm):04169                 fdb     MROT
FCBC C7               (        forth.asm):04170                 RFCS
FCBD BDE7F9           (        forth.asm):04171 (7)             jsr     NPOP
FCC0 1F10             (        forth.asm):04172 (4)             tfr     x,d
FCC2 109E08           (        forth.asm):04173 (5)             ldy     DICEND
FCC5 E7A0             (        forth.asm):04174 (4+1)           stb     ,y+
FCC7 109F08           (        forth.asm):04175 (5)             sty     DICEND
FCCA 39               (        forth.asm):04176 (4)             rts
                      (        forth.asm):04177         
FCCB 01               (        forth.asm):04178         COMMA   fcb     1               79-STANDARD (REQ143)
FCCC 2C               (        forth.asm):04179                 fcc     ','
FCCD FCB7             (        forth.asm):04180                 fdb     CCOMMA
FCCF C7               (        forth.asm):04181                 RFCS
FCD0 BDE7F9           (        forth.asm):04182 (7)             jsr     NPOP
FCD3 109E08           (        forth.asm):04183 (5)             ldy     DICEND
FCD6 AFA1             (        forth.asm):04184 (5+2)           stx     ,y++
FCD8 109F08           (        forth.asm):04185 (5)             sty     DICEND
FCDB 39               (        forth.asm):04186 (4)             rts
                      (        forth.asm):04187         
FCDC 05               (        forth.asm):04188         ALLOT   fcb     5               79-STANDARD (REQ154)
FCDD 414C4C4F54       (        forth.asm):04189                 fcc     'ALLOT'         ( signedbytecount -- )
FCE2 FCCB             (        forth.asm):04190                 fdb     COMMA
FCE4 C7               (        forth.asm):04191                 RFCS
FCE5 BDE7F9           (        forth.asm):04192 (7)             jsr     NPOP
FCE8 DC08             (        forth.asm):04193 (4)             ldd     DICEND
FCEA 308B             (        forth.asm):04194 (4+2)           leax    d,x
FCEC 9F08             (        forth.asm):04195 (4)             stx     DICEND
FCEE 39               (        forth.asm):04196 (4)             rts
                      (        forth.asm):04197         
FCEF 04               (        forth.asm):04198         FILL    fcb     4               79-STANDARD (REQ234)
FCF0 46494C4C         (        forth.asm):04199                 fcc     'FILL'
FCF4 FCDC             (        forth.asm):04200                 fdb     ALLOT
FCF6 C7               (        forth.asm):04201                 RFCS
FCF7 BDE7F9           (        forth.asm):04202 (7)             jsr     NPOP
FCFA 1F16             (        forth.asm):04203 (4)             tfr     x,w             Byte fill value to W
FCFC BDE7F9           (        forth.asm):04204 (7)     FILL1   jsr     NPOP
FCFF 1F12             (        forth.asm):04205 (4)             tfr     x,y             Byte count to Y
FD01 1E26             (        forth.asm):04206 (5)             exg     y,w             Byte count to W, byte fill value to Y
FD03 BDE7F9           (        forth.asm):04207 (7)             jsr     NPOP            Destination address to X
FD06 105D             (        forth.asm):04208 (2)             tstw
FD08 2F0B             (        forth.asm):04209 (3)             ble     @filend
FD0A 1F20             (        forth.asm):04210 (4)             tfr     y,d             Byte fill value to B
FD0C E784             (        forth.asm):04211 (4+0)           stb     ,x
FD0E 105A             (        forth.asm):04212 (2)             decw
FD10 3101             (        forth.asm):04213 (4+1)           leay    1,x
FD12 113812           (        forth.asm):04214 (6+?)           tfm     x+,y+
FD15 39               (        forth.asm):04215 (4)     @filend rts
                      (        forth.asm):04216         
FD16 06               (        forth.asm):04217         BLANKS  fcb     6               79-STANDARD (REF152)
FD17 424C414E4B53     (        forth.asm):04218                 fcc     'BLANKS'
FD1D FCEF             (        forth.asm):04219                 fdb     FILL
FD1F C7               (        forth.asm):04220                 RFCS
FD20 10860020         (        forth.asm):04221 (4)             ldw     #SP
FD24 20D6             (        forth.asm):04222 (3)             bra     FILL1
                      (        forth.asm):04223         
FD26 06               (        forth.asm):04224         CMOVED  fcb     6               FORTH-83
FD27 434D4F56453E     (        forth.asm):04225                 fcc     'CMOVE>'
FD2D FD16             (        forth.asm):04226                 fdb     BLANKS
FD2F C7               (        forth.asm):04227                 RFCS
FD30 BDE5A8           (        forth.asm):04228 (7)             jsr     ACQMOVP
FD33 105D             (        forth.asm):04229 (2)             tstw
FD35 270D             (        forth.asm):04230 (3)             beq     @cmovd1
FD37 105A             (        forth.asm):04231 (2)             decw
FD39 103061           (        forth.asm):04232 (4)             addr    w,x
FD3C 103062           (        forth.asm):04233 (4)             addr    w,y
FD3F 105C             (        forth.asm):04234 (2)             incw
FD41 113912           (        forth.asm):04235 (6+?)           tfm     x-,y-
FD44 39               (        forth.asm):04236 (4)     @cmovd1 rts
                      (        forth.asm):04237         
FD45 05               (        forth.asm):04238         CMOVE   fcb     5               79-STANDARD (REQ153)
FD46 434D4F5645       (        forth.asm):04239                 fcc     'CMOVE'
FD4B FD26             (        forth.asm):04240                 fdb     CMOVED
FD4D C7               (        forth.asm):04241                 RFCS
FD4E BDE5A8           (        forth.asm):04242 (7)             jsr     ACQMOVP
FD51 113812           (        forth.asm):04243 (6+?)           tfm     x+,y+
FD54 39               (        forth.asm):04244 (4)             rts
                      (        forth.asm):04245         
FD55 04               (        forth.asm):04246         MOVE    fcb     4               79-STANDARD (REQ113)
FD56 4D4F5645         (        forth.asm):04247                 fcc     'MOVE'          ( srcaddr dstaddr ncells -- )
FD5A FD45             (        forth.asm):04248                 fdb     CMOVE
FD5C C7               (        forth.asm):04249                 RFCS
FD5D BDE5A8           (        forth.asm):04250 (7)             jsr     ACQMOVP
FD60 105D             (        forth.asm):04251 (2)             tstw
FD62 2F06             (        forth.asm):04252 (3)             ble     @move1
FD64 103066           (        forth.asm):04253 (4)             addr    w,w             Convert cells to bytes
FD67 113812           (        forth.asm):04254 (6+?)           tfm     x+,y+
FD6A 39               (        forth.asm):04255 (4)     @move1  rts
                      (        forth.asm):04256         
FD6B 05               (        forth.asm):04257         CELLS   fcb     5               ANSI-X3.215-1994
FD6C 43454C4C53       (        forth.asm):04258                 fcc     'CELLS'
FD71 FD55             (        forth.asm):04259                 fdb     MOVE
FD73 C7               (        forth.asm):04260                 RFCS
FD74 BDE7F9           (        forth.asm):04261 (7)             jsr     NPOP
FD77 103011           (        forth.asm):04262 (4)             addr    x,x
FD7A 3610             (        forth.asm):04263                 UCNPUSH
FD7C 39               (        forth.asm):04264 (4)             rts
                      (        forth.asm):04265         
FD7D 04               (        forth.asm):04266         LAST    fcb     4               79-STANDARD (REF)
FD7E 4C415354         (        forth.asm):04267                 fcc     'LAST'
FD82 FD6B             (        forth.asm):04268                 fdb     CELLS
FD84 C7               (        forth.asm):04269                 RFCS
FD85 9E06             (        forth.asm):04270 (4)             ldx     LSTWAD
FD87 7EE7EB           (        forth.asm):04271 (3)             jmp     NPUSH
                      (        forth.asm):04272         
FD8A 04               (        forth.asm):04273         HERE    fcb     4               79-STANDARD (REQ188)
FD8B 48455245         (        forth.asm):04274                 fcc     'HERE'
FD8F FD7D             (        forth.asm):04275                 fdb     LAST
FD91 C7               (        forth.asm):04276                 RFCS
FD92 9E08             (        forth.asm):04277 (4)             ldx     DICEND
FD94 7EE7EB           (        forth.asm):04278 (3)             jmp     NPUSH
                      (        forth.asm):04279         
FD97 02               (        forth.asm):04280         PLUSST  fcb     2               79-STANDARD (REQ157)
FD98 2B21             (        forth.asm):04281                 fcc     '+!'            ( incr addr -- )
FD9A FD8A             (        forth.asm):04282                 fdb     HERE
FD9C C7               (        forth.asm):04283                 RFCS
FD9D BDE49A           (        forth.asm):04284 (7)             jsr     MIN2PST         We need at least two cells stacked up
FDA0 AEC4             (        forth.asm):04285 (5+0)           ldx     ,u              ADDR to X
FDA2 EC84             (        forth.asm):04286 (5+0)           ldd     ,x              @ADDR to D
FDA4 E342             (        forth.asm):04287 (5+1)           addd    2,u             Add INCR to D
FDA6 ED84             (        forth.asm):04288 (5+0)   PLUSST1 std     ,x              Store the sum back to ADDR
FDA8 3344             (        forth.asm):04289 (4+1)           leau    4,u             Drop two cells from the data stack
FDAA 39               (        forth.asm):04290 (4)             rts
                      (        forth.asm):04291         
FDAB 03               (        forth.asm):04292         ONEPST  fcb     3               79-STANDARD (REF)
FDAC 312B21           (        forth.asm):04293                 fcc     '1+!'
FDAF FD97             (        forth.asm):04294                 fdb     PLUSST
FDB1 C7               (        forth.asm):04295                 RFCS
FDB2 BDE495           (        forth.asm):04296 (7)             jsr     MIN1PST         At least one cell needs to be stacked up
FDB5 AEC4             (        forth.asm):04297 (5+0)           ldx     ,u
FDB7 EC84             (        forth.asm):04298 (5+0)           ldd     ,x
FDB9 104C             (        forth.asm):04299 (2)             incd
FDBB ED84             (        forth.asm):04300 (5+0)           std     ,x
FDBD 3342             (        forth.asm):04301 (4+1)           leau    2,u
FDBF 39               (        forth.asm):04302 (4)             rts
                      (        forth.asm):04303         
FDC0 02               (        forth.asm):04304         MINUSST fcb     2               79-STANDARD (REQ157)
FDC1 2D21             (        forth.asm):04305                 fcc     '-!'            ( incr addr -- )
FDC3 FDAB             (        forth.asm):04306                 fdb     ONEPST
FDC5 C7               (        forth.asm):04307                 RFCS
FDC6 BDE49A           (        forth.asm):04308 (7)             jsr     MIN2PST         We need at least two cells stacked up
FDC9 AEC4             (        forth.asm):04309 (5+0)           ldx     ,u              ADDR to X
FDCB EC84             (        forth.asm):04310 (5+0)           ldd     ,x              @ADDR to D
FDCD A342             (        forth.asm):04311 (5+1)           subd    2,u             Substract INCR from D
FDCF 20D5             (        forth.asm):04312 (3)             bra     PLUSST1
                      (        forth.asm):04313         
FDD1 02               (        forth.asm):04314         CSTORE  fcb     2               79-STANDARD (REQ219)
FDD2 4321             (        forth.asm):04315                 fcc     'C!'            ( val8 addr -- )
FDD4 FDC0             (        forth.asm):04316                 fdb     MINUSST
FDD6 C7               (        forth.asm):04317                 RFCS
FDD7 BDE49A           (        forth.asm):04318 (7)             jsr     MIN2PST         We need at least two cells stacked up
FDDA A643             (        forth.asm):04319 (4+1)           lda     3,u             VAL8 to A
FDDC A7D4             (        forth.asm):04320 (4+3)           sta     [,u]            Actual store to ADDR
FDDE 3344             (        forth.asm):04321 (4+1)           leau    4,u             Drop two cells from the data stack
FDE0 39               (        forth.asm):04322 (4)             rts
                      (        forth.asm):04323         
FDE1 01               (        forth.asm):04324         STORE   fcb     1               79-STANDARD (REQ112)
FDE2 21               (        forth.asm):04325                 fcc     '!'             ( data addr -- )
FDE3 FDD1             (        forth.asm):04326                 fdb     CSTORE
FDE5 C7               (        forth.asm):04327                 RFCS
FDE6 BDE49A           (        forth.asm):04328 (7)             jsr     MIN2PST         At least two cells need to be stacked up
FDE9 EC42             (        forth.asm):04329 (5+1)           ldd     2,u             DATA to D
FDEB EDD4             (        forth.asm):04330 (5+3)           std     [,u]            Actual store to ADDR
FDED 3344             (        forth.asm):04331 (4+1)           leau    4,u             Drop two cells from the user stack
FDEF 39               (        forth.asm):04332 (4)             rts
                      (        forth.asm):04333         
FDF0 02               (        forth.asm):04334         CFETCH  fcb     2               79-STANDARD (REQ156)
FDF1 4340             (        forth.asm):04335                 fcc     'C@'            ( addr -- val8 )
FDF3 FDE1             (        forth.asm):04336                 fdb     STORE
FDF5 C7               (        forth.asm):04337                 RFCS
FDF6 BDE495           (        forth.asm):04338 (7)             jsr     MIN1PST         We need at least one cell stacked up
FDF9 4F               (        forth.asm):04339 (1)             clra
FDFA E6D4             (        forth.asm):04340 (4+3)           ldb     [,u]
FDFC EDC4             (        forth.asm):04341 (5+0)           std     ,u
FDFE 39               (        forth.asm):04342 (4)             rts
                      (        forth.asm):04343         
FDFF 01               (        forth.asm):04344         QMARK   fcb     1               79-STANDARD (REQ194)
FE00 3F               (        forth.asm):04345                 fcc     '?'
FE01 FDF0             (        forth.asm):04346                 fdb     CFETCH
FE03 C7               (        forth.asm):04347                 RFCS
FE04 BD0C65           (        forth.asm):04348 (7)             jsr     RAMFTCH         Call the RAM based incarnation of @
FE07 7EF668           (        forth.asm):04349                 RFXT    jmp,DOT+4       XT for .
                      (        forth.asm):04350         
                      (        forth.asm):04351         * End of ROM part of the builtin dictionary.
     FE0A             (        forth.asm):04352         THEEND  equ     *               This is the end, Beautiful friend
                      (        forth.asm):04353         *                               This is the end, My only friend
                      (        forth.asm):04354         
                      (        forth.asm):04355         * This transactional word is relocated to RAM, so that we can compile new
                      (        forth.asm):04356         * definitions. FORTHIN will take care of that and adjust the relevant pointers.
FE0A 01               (        forth.asm):04357         FETCH   fcb     1               79-STANDARD (REQ199)
FE0B 40               (        forth.asm):04358                 fcc     '@'             ( addr -- data )
FE0C FDFF             (        forth.asm):04359                 fdb     QMARK
FE0E C7               (        forth.asm):04360                 RFCS
FE0F BDE495           (        forth.asm):04361 (7)             jsr     MIN1PST         At least one cell needs to be stacked up
FE12 ECD4             (        forth.asm):04362 (5+3)           ldd     [,u]
FE14 EDC4             (        forth.asm):04363 (5+0)           std     ,u              Returned through the data stack
FE16 39               (        forth.asm):04364 (4)             rts
                      (        forth.asm):04365         
     FE17             (        forth.asm):04366         REALEND equ     *
                      (        forth.asm):04367         
                      (        forth.asm):04368         *******************************************************************************
                      (        forth.asm):04369         * String literals.
                      (        forth.asm):04370         
                      (        forth.asm):04371         * Using CR+LF as it is Minicom's default.
                      (        forth.asm):04372         
                      (        forth.asm):04373         * Clear the screen, VT100 style.
FE17 1B5B481B5B4A0D00 (        forth.asm):04374         CSVT100 fcb     $1B,'[','H',$1B,'[','J',CR,NUL
                      (        forth.asm):04375         
FE1F 0D0A             (        forth.asm):04376         BOOTMSG fcb     CR,LF
                      (        forth.asm):04377                 IFNE    RTCFEAT
                      (        forth.asm):04378                 fcc     'Z79Forth 6309/R FORTH-79 Standard Sub-set'
                      (        forth.asm):04379                 ELSE
FE21 5A3739466F727468 (        forth.asm):04380                 fcc     'Z79Forth 6309/I FORTH-79 Standard Sub-set'
     20363330392F4920
     464F5254482D3739
     205374616E646172
     64205375622D7365
     74
                      (        forth.asm):04381                 ENDC                    RTCFEAT
FE4A 0D0A             (        forth.asm):04382                 fcb     CR,LF
FE4C 3230323230363239 (        forth.asm):04383                 fcc     '20220629 Copyright Francois Laagel (2019)'
     20436F7079726967
     6874204672616E63
     6F6973204C616167
     656C202832303139
     29
FE75 0D0A0D0A00       (        forth.asm):04384                 fcb     CR,LF,CR,LF,NUL
                      (        forth.asm):04385         
FE7A 52414D204F4B3A20 (        forth.asm):04386         RAMOKM  fcc     'RAM OK: 32 KB'
     3332204B42
FE87 0D0A00           (        forth.asm):04387         CRLFSTR fcb     CR,LF,NUL
                      (        forth.asm):04388         
FE8A 52414D2063686563 (        forth.asm):04389         RAMFM   fcc     'RAM check failed'
     6B206661696C6564
FE9A 0D0A00           (        forth.asm):04390                 fcb     CR,LF,NUL
                      (        forth.asm):04391         
                      (        forth.asm):04392                 IFNE    RTCFEAT
FE9D                  (        forth.asm):04393         RTPRESM fcc     'MC146818 RTC'
                      (        forth.asm):04394                 fcb     CR,LF,NUL
                      (        forth.asm):04395                 ENDC
                      (        forth.asm):04396         
                      (        forth.asm):04397                 IFEQ    CSSNTVE
FE9D 206F6B           (        forth.asm):04398         OKFEEDB fcc     ' ok'           As per GNU Forth's implementation...
                      (        forth.asm):04399                 ELSE
FEA0                  (        forth.asm):04400         OKFEEDB fcc     ' OK'
                      (        forth.asm):04401                 ENDC                    CSSNTVE
FEA0 0D0A00           (        forth.asm):04402                 fcb     CR,LF,NUL
                      (        forth.asm):04403         
                      (        forth.asm):04404         * Error messages for IODZHDL.
FEA3 496C6C6567616C20 (        forth.asm):04405         IOPERRM fcn     'Illegal opcode near '
     6F70636F6465206E
     6561722000
FEB8 4469766973696F6E (        forth.asm):04406         DV0ERRM fcn     'Division by 0 near '
     2062792030206E65
     61722000
                      (        forth.asm):04407         
FECC 4461746120737461 (        forth.asm):04408         ERRMTBL fcn     'Data stack overflow'   Error 0
     636B206F76657266
     6C6F7700
FEE0 4461746120737461 (        forth.asm):04409                 fcn     'Data stack underflow'  Error 1
     636B20756E646572
     666C6F7700
FEF5 3F00             (        forth.asm):04410                 fcn     '?'                     Error 2
FEF7 557365722041424F (        forth.asm):04411                 fcn     'User ABORT'            Error 3
     525400
FF02 00               (        forth.asm):04412                 fcn     ''                      Error 4 (formerly "Division by zero")
FF03 4D697373696E6720 (        forth.asm):04413                 fcn     'Missing word name'     Error 5
     776F7264206E616D
     6500
FF15 496E636F72726563 (        forth.asm):04414                 fcn     'Incorrect STATE'       Error 6
     7420535441544500
FF25 52657475726E2073 (        forth.asm):04415                 fcn     'Return stack overflow' Error 7
     7461636B206F7665
     72666C6F7700
FF3B 52657475726E2073 (        forth.asm):04416                 fcn     'Return stack underflow' Error 8
     7461636B20756E64
     6572666C6F7700
FF52 496C6C6567616C20 (        forth.asm):04417                 fcn     'Illegal construct'     Error 9
     636F6E7374727563
     7400
FF64 417373657274696F (        forth.asm):04418                 fcn     'Assertion failed'      Error 10
     6E206661696C6564
     00
FF75 522F4F20776F7264 (        forth.asm):04419                 fcn     'R/O word'              Error 11
     00
FF7E 4D697373696E6720 (        forth.asm):04420                 fcn     'Missing delimiter'     Error 12
     64656C696D697465
     7200
FF90 496C6C6567616C20 (        forth.asm):04421                 fcn     'Illegal argument'      Error 13
     617267756D656E74
     00
FFA1 4E6F206D61746368 (        forth.asm):04422                 fcn     'No matching CREATE'    Error 14
     696E672043524541
     544500
FFB4 496E76616C696420 (        forth.asm):04423                 fcn     'Invalid BASE'          Error 15
     4241534500
FFC1 576F7264206E616D (        forth.asm):04424                 fcn     'Word name too long'    Error 16
     6520746F6F206C6F
     6E6700
FFD4 494F206572726F72 (        forth.asm):04425                 fcn     'IO error'              Error 17
     00
                      (        forth.asm):04426         
                      (        forth.asm):04427         * A-list used for numeric literal base prefixes.
FFDD 24               (        forth.asm):04428         BASALST fcc     '$'             Hexadecimal prefix
FFDE 10               (        forth.asm):04429                 fcb     16
FFDF 26               (        forth.asm):04430                 fcc     '&'             Decimal prefix
FFE0 0A               (        forth.asm):04431                 fcb     10
FFE1 23               (        forth.asm):04432                 fcc     '#'             Decimal prefix (an ANSI concession)
FFE2 0A               (        forth.asm):04433                 fcb     10
FFE3 25               (        forth.asm):04434                 fcc     '%'             Binary prefix
FFE4 02               (        forth.asm):04435                 fcb     2
FFE5 40               (        forth.asm):04436                 fcc     '@'             Octal prefix
FFE6 08               (        forth.asm):04437                 fcb     8
FFE7 00               (        forth.asm):04438                 fcb     0               End of list marker
                      (        forth.asm):04439         
                      (        forth.asm):04440         * Under no circumstance should the following symbol be negative!
     0008             (        forth.asm):04441         AVL     equ     VECTBL-*        Available EEPROM space left
                      (        forth.asm):04442         
                      (        forth.asm):04443         *******************************************************************************
                      (        forth.asm):04444         * Interrupt vector table
                      (        forth.asm):04445                 org     VECTBL
                      (        forth.asm):04446         
FFF0 E000             (        forth.asm):04447                 fdb     IODZHDL         Illegal opcode/Division by zero trap
FFF2 E036             (        forth.asm):04448                 fdb     SWI3HDL         SWI 3 interrupt vector address
FFF4 E036             (        forth.asm):04449                 fdb     SWI2HDL         SWI 2 interrupt vector address
FFF6 E255             (        forth.asm):04450                 fdb     FIRQHDL         FIRQ interrupt vector address
FFF8 E036             (        forth.asm):04451                 fdb     IRQHDL          IRQ interrupt vector address
FFFA E036             (        forth.asm):04452                 fdb     SWIHDL          SWI interrupt vector address
FFFC E1DD             (        forth.asm):04453                 fdb     NMIHDL          NMI vector address
FFFE E037             (        forth.asm):04454                 fdb     RSTHDL          RESET vector address
                      (        forth.asm):04455         

Symbol Table:
[ G] _BS                              E30A
[ G] _INTERP                          E0CA
[ G] ABORT                            F126
[ G] ABS                              EFA3
[ G] AC8N1                            0014
[ G] ACCEPT                           F7B7
[ G] ACDIV16                          0001
[ G] ACIACTL                          D800
[ G] ACIADAT                          D801
[ G] ACIISVC                          0080
[ G] ACIOVRN                          0020
[ G] ACIRDRF                          0001
[ G] ACIRSET                          0043
[ G] ACIRTS0                          0095
[ G] ACIRTS1                          00D5
[ G] ACITDRE                          0002
[ G] ACQMOVP                          E5A8
[ G] ACQVMRA                          E5AB
[ G] ACRDINT                          0080
[ G] ACRST                            0003
[ G] ACRTS0                           0000
[ G] ACRTS1                           0040
[ G] ADDS                             E1BD
[ G] ADIV16                           E190
[ G] AGAIN                            EFDC
[ G] ALLOT                            FCDC
[ G] AND                              EE90
[ G] ARPICKN                          F0CB
[ G] AVL                              0008
[ G] BASALST                          FFDD
[ G] BASBKUP                          012C
[ G] BASE                             FB4D
[ G] BCSOPC                           2503
[ G] BDICEND                          010C
[ G] BDIRTY                           0004
[ G] BEGIN                            EFCE
[ G] BFDISP                           0410
[ G] BIN                              FB5B
[ G] BINUSE                           0001
[ G] BKCHAR                           F2A1
[ G] BKIN2PT                          E83F
[ G] BKQUOT                           F173
[ G] BKSLSH                           F352
[ G] BL                               F6D4
[ G] BLANKS                           FD16
[ G] BLK                              EA77
[ G] BLKSIZ                           0400
[ G] BLOCK                            EA48
[ G] BLSTWAD                          010A
[ G] BMAPPD                           0002
[ G] BNEOPC                           2603
[ G] BOBLKNO                          0402
[ G] BOFLAGS                          0401
[ G] BOOTMSG                          FE1F
[ G] BOTERM                           0400
[ G] BS                               0008
[ G] BSBFADR                          011C
[ G] BUF0                             0440
[ G] BUF1                             0850
[ G] BUFFER                           E9FB
[ G] BYE                              F297
[ G] CCOMMA                           FCB7
[ G] CCREGM                           E220
[ G] CELLS                            FD6B
[ G] CF1BKRD                          E94A
[ G] CF1BKWR                          E965
[ G] CF1BPRE                          E92D
[ G] CF1SRD                           E8F9
[ G] CF1SWR                           E918
[ G] CFANTHS                          E8A4
[ G] CFBASE                           C000
[ G] CFBSYB                           0080
[ G] CFCARDP                          013D
[ G] CFCHIGR                          C005
[ G] CFCLOWR                          C004
[ G] CFCMDIS                          E889
[ G] CFCMMIR                          013E
[ G] CFCOMDR                          C007
[ G] CFDATAR                          C000
[ G] CFDRHDR                          C006
[ G] CFDRQB                           0008
[ G] CFDRSEL                          E89B
[ G] CFDSCB                           0010
[ G] CFDWFB                           0020
[ G] CFERRB                           0001
[ G] CFERRCD                          013F
[ G] CFERRCK                          E87C
[ G] CFERROR                          C001
[ G] CFETCH                           FDF0
[ G] CFFEATR                          C001
[ G] CFIDDEV                          00EC
[ G] CFINIT                           E8C2
[ G] CFLAG                            0001
[ G] CFR1SRA                          E917
[ G] CFRDY                            E866
[ G] CFRDYB                           0040
[ G] CFRSCTS                          0020
[ G] CFSCNTR                          C002
[ G] CFSCSZ                           0200
[ G] CFSETFT                          00EF
[ G] CFSNUMR                          C003
[ G] CFSTATR                          C007
[ G] CFWAIT                           E85E
[ G] CFWSCTS                          0030
[ G] CHAR                             F2B0
[ G] CHKNDPT                          E48A
[ G] CHKRTS                           E155
[ G] CKBASE                           E3D9
[ G] CKBASRA                          E3E9
[ G] CKDPTRA                          E495
[ G] CKNBPFX                          E3AE
[ G] CMDBFSZ                          0084
[ G] CMDBUF                           0316
[ G] CMDLNSZ                          012D
[ G] CMOVE                            FD45
[ G] CMOVED                           FD26
[ G] CMP2                             E594
[ G] CMP2RA                           E597
[ G] CMPCOMA                          F1BE
[ G] COM                              EEA4
[ G] COM0                             EEAB
[ G] COMMA                            FCCB
[ G] COMP                             E116
[ G] COMPC                            F1D0
[ G] COMPLRA                          E12A
[ G] COMPR                            F1E8
[ G] CONS                             EC1D
[ G] CONTIND                          F862
[ G] CONVERT                          F4E3
[ G] COUNT                            F74D
[ G] CR                               000D
[ G] CREAT1                           EBC4
[ G] CREATE                           EBA2
[ G] CRLF                             F719
[ G] CRLFSTR                          FE87
[ G] CSSNTVE                          0000
[ G] CSTORE                           FDD1
[ G] CSUMFLM                          ECC0
[ G] CSVT100                          FE17
[ G] CURTOKL                          0138
[ G] CVISSGN                          0137
[ G] CVNSTR                           E441
[ G] CVT                              F5A8
[ G] CVT0                             F5AF
[ G] CVT1                             F5B7
[ G] CVTB                             F657
[ G] CVTE                             F55C
[ G] CVTFCN                           0134
[ G] DASHTR                           F763
[ G] DDUMP                            FBAC
[ G] DEBUG                            0000
[ G] DECIMAL                          FB77
[ G] DEFFLG                           013A
[ G] DEFFLM                           0040
[ G] DEPTH                            EB8C
[ G] DEV0                             C000
[ G] DEV1                             C400
[ G] DEV2                             C800
[ G] DEV3                             CC00
[ G] DEV4                             D000
[ G] DEV5                             D400
[ G] DEV6                             D800
[ G] DEV7                             DC00
[ G] DICEND                           0108
[ G] DIFF                             EE30
[ G] DIV                              F9AD
[ G] DIV1                             F9B6
[ G] DIVFCN                           0131
[ G] DLESS                            F439
[ G] DMINUS                           F413
[ G] DNEG                             F3F0
[ G] DO                               ED21
[ G] DOES                             EBCC
[ G] DOESEX                           EBDB
[ G] DOEX                             ED32
[ G] DOT                              F663
[ G] DOTR                             F68D
[ G] DOTR0                            F697
[ G] DOTTICK                          FB95
[ G] DPLUS                            F3D7
[ G] DPOPRA                           E807
[ G] DPREGM                           E22C
[ G] DPSHRA                           E7F8
[ G] DREGM                            E224
[ G] DROP                             FC23
[ G] DUP                              FC14
[ G] DV0ERRM                          FEB8
[ G] DZEQ                             F42C
[ G] EBUFS                            E980
[ G] ELSE                             EDE4
[ G] EMIT                             F8BC
[ G] EMPT1B                           E383
[ G] EMPTYB                           E37B
[ G] EMXASXT                          E169
[ G] END                              F045
[ G] EQ                               EE17
[ G] ERRHD1                           E76D
[ G] ERRHDLR                          E76A
[ G] ERRMTBL                          FECC
[ G] ERRPCK                           FC5A
[ G] ETX                              0003
[ G] EXCT                             F27D
[ G] EXIT                             EFFA
[ G] EXPCT1                           F7A8
[ G] EXPECT                           F79E
[ G] F83DIVF                          0132
[ G] FDCTSYM                          E5B6
[ G] FDIVADJ                          F9EA
[ G] FETCH                            FE0A
[ G] FFLAG                            0040
[ G] FILL                             FCEF
[ G] FILL1                            FCFC
[ G] FIND                             F13A
[ G] FINDSYM                          E62A
[ G] FIRQHDL                          E255
[ G] FLUSH                            E9D5
[ G] FNDPLD                           0110
[ G] FORGET                           F230
[ G] FORTHIN                          E359
[ G] GETCH                            E2B4
[ G] GETS                             E316
[ G] HDMP2                            E1AE
[ G] HDMP4                            E195
[ G] HDRCSUM                          ECB4
[ G] HDRSKIP                          ECAA
[ G] HERE                             FD8A
[ G] HEX                              FB88
[ G] HEX1D                            E17C
[ G] HEXBFSZ                          0050
[ G] HEXBUF                           039A
[ G] HOLD                             F58C
[ G] HT                               0009
[ G] HVNMI                            0001
[ G] HVNMI2                           0000
[ G] ICHECK                           ECD7
[ G] IF                               EDAB
[ G] IFEX                             EDCB
[ G] IFLAG                            0010
[ G] ILLOPC                           00C7
[ G] IMDFLG                           0139
[ G] IMDFLM                           0080
[ G] IMMED                            EC64
[ G] IMMED1                           EC73
[ G] INDEX                            EAB9
[ G] INDI                             F0C5
[ G] INDIP                            F0E9
[ G] INDJ                             F0F3
[ G] INDJP                            F0FC
[ G] INDK                             F106
[ G] INF                              EF62
[ G] INIT                             E047
[ G] INSBPAD                          F644
[ G] INTERP                           E0B2
[ G] INTISRA                          E106
[ G] INTRPRA                          E111
[ G] INVERT                           EEB7
[ G] IODZHDL                          E000
[ G] IOERR                            E912
[ G] IOPERRM                          FEA3
[ G] IOSTRT                           C000
[ G] IRDPTH                           012F
[ G] IRQHDL                           E036
[ G] ISDBLF                           0136
[ G] ISNEGF                           0135
[ G] JMPOPC                           007E
[ G] JSRLAST                          0114
[ G] JSROPC                           00BD
[ G] KEY                              F8AA
[ G] KEYP                             F897
[ G] LAST                             FD7D
[ G] LBRACK                           F16B
[ G] LDXOPC                           008E
[ G] LEAVE                            F0B0
[ G] LF                               000A
[ G] LINE                             EA9E
[ G] LIST                             EB17
[ G] LITER                            E578
[ G] LITERAL                          EBF9
[ G] LOAD                             F7F1
[ G] LOAD1                            F802
[ G] LOCWRT                           E517
[ G] LOOP                             ED3B
[ G] LOOP1                            ED46
[ G] LOOPEX                           ED5A
[ G] LPAR                             F31A
[ G] LSTWAD                           0106
[ G] LWMNRA                           E52D
[ G] MAX                              EF71
[ G] MDIV                             FA04
[ G] MILLIS                           F87C
[ G] MILLIS1                          F88B
[ G] MIN                              EF8A
[ G] MIN1PST                          E495
[ G] MIN2PST                          E49A
[ G] MIN3PST                          E49F
[ G] MIN4PST                          E4A4
[ G] MINTLRA                          E0C8
[ G] MINUS                            F900
[ G] MINUSST                          FDC0
[ G] MOD                              F9F7
[ G] MONFLM                           0020
[ G] MONITOR                          EC8D
[ G] MORE                             E0E2
[ G] MOVE                             FD55
[ G] MROT                             FCAB
[ G] MRUBUFA                          011A
[ G] MSLCNT                           031A
[ G] MULT                             F97A
[ G] NAK                              0015
[ G] NBCTFB0                          013B
[ G] NCLR                             EB70
[ G] NDCTWKS                          E650
[ G] NEGATE                           EFBA
[ G] NIP                              FC09
[ G] NMCVCRA                          E13C
[ G] NMCVIRA                          E0E0
[ G] NMI2DM                           E1C8
[ G] NMI4DM                           E1CE
[ G] NMIDML                           E1D4
[ G] NMIHDL                           E1DD
[ G] NOT                              EF0F
[ G] NPOP                             E7F9
[ G] NPUSH                            E7EB
[ G] NSTBOT                           0296
[ G] NSTKSZ                           00C0
[ G] NSTTOP                           01D6
[ G] NUL                              0000
[ G] NULP                             EEF7
[ G] NUMCVRA                          E440
[ G] NUMCVT                           E3E9
[ G] NXTBLK                           F847
[ G] NXTBLK1                          F852
[ G] OCTAL                            FB68
[ G] OKFEEDB                          FE9D
[ G] ONEL                             F93C
[ G] ONEM                             F911
[ G] ONEP                             F8DF
[ G] ONEPST                           FDAB
[ G] OR                               EE7D
[ G] OVER                             FC74
[ G] PAD                              F722
[ G] PADBSZ                           0051
[ G] PADBUF                           0184
[ G] PAGE                             F70B
[ G] PAYLOAD                          FA5C
[ G] PCREGM                           E23D
[ G] PICK                             FC42
[ G] PICK1                            FC4D
[ G] PLOAD                            010E
[ G] PLOOP                            ED5F
[ G] PLOOPEX                          ED6D
[ G] PLOPEX1                          ED70
[ G] PLUS                             F8CE
[ G] PLUSST                           FD97
[ G] PLUSST1                          FDA6
[ G] POSTPON                          F17F
[ G] pragma                           0000
[ G] PRBLKIN                          E73D
[ G] PSTR                             F370
[ G] PTOP0                            F66C
[ G] PUTCH                            E2E0
[ G] PUTCR                            E300
[ G] PUTS                             E2F3
[ G] QMARK                            FDFF
[ G] QRYDUP                           FBE7
[ G] QUIT                             F10F
[ G] RAMCHK                           E057
[ G] RAMFAIL                          E069
[ G] RAMFM                            FE8A
[SG] RAMFTCH                          0C65
[SG] RAMFTCH                          0C64
[ G] RAMOK                            E07B
[ G] RAMOKM                           FE7A
[ G] RAMSIZE                          8000
[ G] RAMSTRT                          0000
[ G] RBRACK                           F161
[ G] RCLR                             EB7C
[ G] RDEPTH                           012E
[ G] REALEND                          FE17
[ G] RECADDR                          0112
[ G] RECURSE                          F220
[SG] RELFEAT                          0001
[ G] REPEAT                           F079
[ G] RFETCH                           F0E1
[ G] RFROM                            F098
[ G] ROLL                             FC81
[ G] ROLL1                            FC8C
[ G] ROMSTRT                          E000
[ G] ROT                              FC9F
[ G] RPOP                             E826
[ G] RPOPRA                           E83F
[ G] RPSHRA                           E825
[ G] RPUSH                            E808
[ G] RSBSPFX                          E3D2
[ G] RSP                              0100
[ G] RSTBOT                           0316
[ G] RSTHDL                           E037
[ G] RSTKSZ                           0080
[ G] RSTRCT                           EC7D
[ G] RSTTOP                           0296
[ G] RTADV32                          0020
[ G] RTADVRS                          0070
[ G] RTARS64                          000A
[ G] RTAS                             D400
[ G] RTAUIP                           0080
[ G] RTB24                            0002
[ G] RTBDM                            0004
[ G] RTBPIE                           0040
[ G] RTBSET                           0080
[ G] RTCAVL                           013C
[ G] RTCFEAT                          0000
[ G] RTCFTCH                          EAFE
[ G] RTCPF                            0040
[ G] RTCSTOR                          EB0C
[ G] RTDS                             D401
[ G] RTODOM                           0007
[ G] RTODOW                           0006
[ G] RTOHOUR                          0004
[ G] RTOHRA                           0005
[ G] RTOMIN                           0002
[ G] RTOMINA                          0003
[ G] RTOMON                           0008
[ G] RTOPRES                          003F
[ G] RTOREGA                          000A
[ G] RTOREGB                          000B
[ G] RTOREGC                          000C
[ G] RTOREGD                          000D
[ G] RTOSEC                           0000
[ G] RTOSECA                          0001
[ G] RTOUMB                           000E
[ G] RTOYEAR                          0009
[ G] RTSOPC                           0039
[ G] RTSREMV                          0130
[ G] RTUMSZ                           0032
[ G] SAVBUF                           E994
[ G] SCNETOK                          E39C
[ G] SCNSTOK                          E38E
[ G] SCR                              EA91
[ G] SERBCNT                          0142
[ G] SERBDEQ                          0141
[ G] SERBENQ                          0140
[ G] SERBSZ                           0040
[ G] SERBUF                           0144
[ G] SHARPS                           F59C
[ G] SHIFT                            F952
[ G] SIGN                             F575
[ G] SINFEQ                           EE4A
[ G] SLEN                             E246
[ G] SOURCE                           F334
[ G] SP                               0020
[ G] SPACE                            F6E0
[ G] SPACES                           F6EE
[ G] SQUOTE                           F385
[ G] SREGM                            E242
[ G] SSDFEAT                          0001
[ G] STATE                            FB3E
[ G] STOD                             EB56
[ G] STORE                            FDE1
[ G] STRSL1                           FA1A
[ G] STRSLMD                          FA45
[ G] STRSLSH                          FA10
[ G] STSLFCN                          0133
[ G] SUP                              EF53
[ G] SWAP                             FC2E
[ G] SWDIC                            E4A9
[ G] SWI2HDL                          E036
[ G] SWI3HDL                          E036
[ G] SWIHDL                           E036
[ G] SYSSTK                           FA52
[ G] TBUFF                            03EA
[ G] TBUFSZ                           0048
[ G] TERPRET                          F7C7
[ G] THEEND                           FE0A
[ G] THEN                             EE05
[ G] THRU                             F825
[ G] TICKS                            EAED
[ G] TIKSHI                           0128
[ G] TIKSLOW                          012A
[ G] TOIN                             EA84
[ G] TOKENEP                          0104
[ G] TOKENSP                          0102
[ G] TOR                              F0A4
[ G] TUCK                             FBFD
[ G] TWODIV                           F99D
[ G] TWODROP                          F496
[ G] TWODUP                           F4A5
[ G] TWOFTCH                          F4CF
[ G] TWOL                             F947
[ G] TWOM                             F921
[ G] TWOOVER                          F460
[ G] TWOP                             F8EF
[ G] TWOSTOR                          F4BD
[ G] TWOSWAP                          F479
[ G] TWOTIM                           F98D
[ G] TYPE                             F72F
[ G] U2INFRD                          E177
[ G] UBASE                            011E
[ G] UBLK                             0124
[ G] UDOT                             F683
[ G] UDOTR                            F6C9
[ G] UINF                             EF28
[ G] UNLESS                           EDD2
[ G] UNLOOP                           ED9B
[ G] UNTIL                            F01C
[ G] UPDATE                           E9E0
[ G] UREGM                            E239
[ G] USCR                             0126
[ G] USTATE                           0120
[ G] USUP                             EF18
[ G] UTOIN                            0122
[ G] VARCON                           E58A
[ G] VARCON1                          E58C
[ G] VARCON2                          E58F
[ G] VARI                             EC3F
[ G] VARSPC                           0100
[ G] VECTBL                           FFF0
[ G] VLIST                            FA6C
[ G] VLPRVEP                          0116
[ G] VLPRVHD                          0118
[ G] WBIFDRT                          E9AC
[ G] WDICSPC                          0C60
[ G] WHILE                            F04E
[ G] WITHIN                           EF38
[ G] WORD                             F2D7
[ G] WREGM                            E228
[ G] WRLNMSK                          001F
[ G] WTOOLNG                          E54A
[ G] XMITOK                           0143
[ G] XOFF                             0013
[ G] XON                              0011
[ G] XOR                              EE66
[ G] XOR1                             EE78
[ G] XREGM                            E231
[ G] YREGM                            E235
[ G] ZEROL                            F932
[ G] ZFLAG                            0004
[ G] ZGREAT                           EEC3
[ G] ZLESS                            EEDD
