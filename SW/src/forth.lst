                      (        forth.asm):00001         * 6309 Forth based on my 1984/07/16 TRS-80 Model 1 level II ROM implementation.
                      (        forth.asm):00002         *
                      (        forth.asm):00003         * This work is dedicated to Alain Pinaud, author of "Programmer en Forth"
                      (        forth.asm):00004         * published by Editions du P.S.I. in 1983--i.e. my virtual mentor in the field.
                      (        forth.asm):00005         * Special thanks go William Astle for his fantastic LW Tools utility set and
                      (        forth.asm):00006         * to Robert Lipe for his advice on serial line handling. Apache subversion
                      (        forth.asm):00007         * and the sdiff utility also were on my side all the time.
                      (        forth.asm):00008         *
                      (        forth.asm):00009         * Also credited for their help: Justin Poirier (seminal HW design), Daniel
                      (        forth.asm):00010         * Tufvesson (original CompactFlash interface), Peter Minuth (general Forth
                      (        forth.asm):00011         * guruness), Paul E. Bennett (ANSI compatibility advice); Michel Jean, Bill
                      (        forth.asm):00012         * Ragsdale, Pablo Hugo Reda, Matthias Koch, Demitri Peynado and Bernd Paysan
                      (        forth.asm):00013         * for contributed application level code; Carsten Strotmann for most of the
                      (        forth.asm):00014         * benchmarking code (see https://theultimatebenchmark.org/); Gerry Jackson and
                      (        forth.asm):00015         * Steve R. Palmer (see https://github.com/gerryjackson/forth2012-test-suite)
                      (        forth.asm):00016         * for selected bits and pieces of the Forth2012 test suite
                      (        forth.asm):00017         * (see https://forth-standard.org/).
                      (        forth.asm):00018         *
                      (        forth.asm):00019         * This is a native Forth. Not a threaded interpretive implementation.
                      (        forth.asm):00020         * Worth noticing is the fact that the return stack does not hold return
                      (        forth.asm):00021         * addresses at all. All what is stored there is loop indexes and input stream
                      (        forth.asm):00022         * parameters. Actual return addresses are kept in the system stack. All in all,
                      (        forth.asm):00023         * this is the result of the work of a 19 year old, heavily revisited 35 years
                      (        forth.asm):00024         * later. The downside of this implementation is that the generated code is
                      (        forth.asm):00025         * about 30% larger than a threaded interpretive implementation would be.
                      (        forth.asm):00026         * So it goes...
                      (        forth.asm):00027         *
                      (        forth.asm):00028         * Control flow constructs have been re-implemented based on Wonyong Koh's
                      (        forth.asm):00029         * hForth for the 8086. The original code can be consulted at
                      (        forth.asm):00030         * https://github.com/nealcrook/hForth. Of particular interest is
                      (        forth.asm):00031         * 8086/HF86RAM.ASM. Entries on the control flow stack (implemented on the
                      (        forth.asm):00032         * data stack here) are two cell entities that consist of a parameter
                      (        forth.asm):00033         * (an address), on the top of which a tag identifying the type of address
                      (        forth.asm):00034         * is pushed. They are:
                      (        forth.asm):00035         *
                      (        forth.asm):00036         * Control-flow stack item    Representation (parameter and type)
                      (        forth.asm):00037         * -----------------------    -------------------------------------
                      (        forth.asm):00038         * dest                       control-flow destination      0
                      (        forth.asm):00039         * orig                       control-flow origin           1
                      (        forth.asm):00040         * of-sys                     OF origin                     2
                      (        forth.asm):00041         * case-sys                   x (any value)                 3
                      (        forth.asm):00042         * do-sys                     ?DO origin                    DO destination
                      (        forth.asm):00043         * colon-sys                  xt of current definition     -1 [1]
                      (        forth.asm):00044         *
                      (        forth.asm):00045         * [1] Not implemented in Z79Forth/A.
                      (        forth.asm):00046         * 
                      (        forth.asm):00047         * This mechanism allows for verification of balanced control flow constructs.
                      (        forth.asm):00048         *
                      (        forth.asm):00049         * The code generated is limited to a very small instruction set:
                      (        forth.asm):00050         *
                      (        forth.asm):00051         * LDXOPC        $8E     LDX (immediate)
                      (        forth.asm):00052         * JMPOPC        $7E     JMP (extended)
                      (        forth.asm):00053         * JSROPC        $BD     JSR (extended)
                      (        forth.asm):00054         * RTSOPC        $39     RTS (inherent)
                      (        forth.asm):00055         * BCSOPC        $2503   BCS *+5 (relative) Used in LOOP, +LOOP
                      (        forth.asm):00056         * BNEOPC        $2603   BNE *+5 (relative) Used in ?DO, IF, UNTIL
                      (        forth.asm):00057         *
                      (        forth.asm):00058         * On error, the system stack pointer is reset. The return stack also is
                      (        forth.asm):00059         * but the data stack will be in the same state as when the error occurred.
                      (        forth.asm):00060         * ABORT and QUIT enforce their own ANS94 standard behaviour.
                      (        forth.asm):00061         *
                      (        forth.asm):00062         * RESTRICT is non-standard. It comes from GNU Forth (VolksForth). The " OK"
                      (        forth.asm):00063         * non-prompt string also does, by the way. Thanks to Anton Ertl for his terse
                      (        forth.asm):00064         * yet valuable input.
                      (        forth.asm):00065         *
                      (        forth.asm):00066         * .' (dot-tick) is non-standard. It comes from SwiftForth. It will be supported
                      (        forth.asm):00067         * whether or not the symbolic stack dump has been configured (see SSDFEAT in
                      (        forth.asm):00068         * constants.asm). However, please note that effective symbolic references will
                      (        forth.asm):00069         * be resolved only if the feature was enabled at compilation time. Otherwise
                      (        forth.asm):00070         * a simple HEX print of the cell at the top of the data stack will be
                      (        forth.asm):00071         * performed. This is meant to support Forth source code that does not depend
                      (        forth.asm):00072         * on the feature vector (see examples/dis.4th).
                      (        forth.asm):00073         *
                      (        forth.asm):00074         * MONITOR and ICHECK are also non-standard. They are intended to maintain and
                      (        forth.asm):00075         * verify the integrity of a checksum of the code section of RAM resident
                      (        forth.asm):00076         * words, with the exception of VARIABLEs and CREATEd words. CREATEd words,
                      (        forth.asm):00077         * if subject to the MONITOR treatment will also carry a code section
                      (        forth.asm):00078         * checksum, although this is not the default behaviour. The checksum will
                      (        forth.asm):00079         * consist in an extra byte added to every word's header. MONITOR and ICHECK
                      (        forth.asm):00080         * will be available whether or not the reliability feature has been configured
                      (        forth.asm):00081         * (see RELFEAT in constants.asm). They will only carry effective semantics
                      (        forth.asm):00082         * if the feature was actually enabled at compilation time. This is meant to
                      (        forth.asm):00083         * support Forth source code that does not depend on the feature vector.
                      (        forth.asm):00084         *
                      (        forth.asm):00085         * Experimental MC146818 RTC support: the feature is disabled by default
                      (        forth.asm):00086         * (see RTCFEAT in constants.asm) because it relies on undocumented schematics.
                      (        forth.asm):00087         * Also, the required underlying circuitry is not intended to ever become an
                      (        forth.asm):00088         * integral part of the Z79Forth reference board itself. Some better designed
                      (        forth.asm):00089         * form of it might eventually surface in the form of an extension specification.
                      (        forth.asm):00090         * At the time of this writing this is just a proof of concept, but whether or
                      (        forth.asm):00091         * not the feature is enabled, three extra words will be added to the dictionary.
                      (        forth.asm):00092         * They are RTC@ RTC! and TICKS They can be safely ignored.
                      (        forth.asm):00093         *
                      (        forth.asm):00094         * Forth source code portability note:
                      (        forth.asm):00095         * Because Z79Forth does not use the return stack to store return addresses,
                      (        forth.asm):00096         * it makes it quite easy to write code that is not readily portable to classic
                      (        forth.asm):00097         * threaded interpretive implementations. The resulting code will be simpler but
                      (        forth.asm):00098         * portability will be limited.
                      (        forth.asm):00099         *
                      (        forth.asm):00100         * Miscellaneous notes: RA stands for return address; EP for entry point.
                      (        forth.asm):00101         * CF is a shortcut for CompactFlash. TOS means top of the data/normal stack.
                      (        forth.asm):00102         * Occasionally, CFA is used for code field address which, in this
                      (        forth.asm):00103         * implementation, is a synonym for compilation address. XT means execution
                      (        forth.asm):00104         * token--the ANSI term for a compilation address. MSC stands for most
                      (        forth.asm):00105         * significant cell; LSC for least significant cell.
                      (        forth.asm):00106         *
                      (        forth.asm):00107         * The complete guide to the HD6309 extended instruction set can be found at:
                      (        forth.asm):00108         * https://cyberabi.ipower.com/Downloads/The_6309_Book.pdf. For convenience,
                      (        forth.asm):00109         * and with the author's explicit agreement, this document has been included
                      (        forth.asm):00110         * in this distribution. This is recommended reading for anyone altering this
                      (        forth.asm):00111         * code or trying to make some sense of it!!!
                      (        forth.asm):00112         *
                      (        forth.asm):00113         * This whole effort started out as a porting endeavour and ended up being a
                      (        forth.asm):00114         * substantial rewrite, trying to take advantage of the features of the 6309
                      (        forth.asm):00115         * as much as possible. The primary goals of this implementation are:
                      (        forth.asm):00116         * reliability, performance and code compactness. A number of bugs in the
                      (        forth.asm):00117         * original code have been fixed--some remain for sure!
                      (        forth.asm):00118         *
                      (        forth.asm):00119         * Obligatory literary reference:
                      (        forth.asm):00120         * "The paper is very heavy going, and I should never have read it, had I not
                      (        forth.asm):00121         * written it myself." John E. Littlewood (1885-1977).
                      (        forth.asm):00122         *
                      (        forth.asm):00123         * The original soundtrack for this work is available at:
                      (        forth.asm):00124         * https://youtu.be/YqXZtGyFyDo?t=4023 (J.S. Bach BWV 1080, contrapunctus 14).
                      (        forth.asm):00125         
0000                  (        forth.asm):00126         pragma  opt cd,operandsizewarning
                      (        forth.asm):00127         
                      (        forth.asm):00128                 include constants.asm
                      (    constants.asm):00001         * Begin tunable parameters section.
                      (    constants.asm):00002         
     0000             (    constants.asm):00003         CSSNTVE equ     0               Words and HEX numbers are case sensitive if NZ
     0001             (    constants.asm):00004         SSDFEAT equ     1               Set to 1 to enable the symbolic stack dump feat.
     0001             (    constants.asm):00005         RELFEAT set     1               Set to 1 to enable the reliability feature
                      (    constants.asm):00006         
                      (    constants.asm):00007         * Ultimately, this one should just go and become the only available option.
     0001             (    constants.asm):00008         ANSFEAT set     1               Set to 1 to enable the ANS94 Core feature set
                      (    constants.asm):00009         
                      (    constants.asm):00010         *                               Caution: when this is enabled, you can no
                      (    constants.asm):00011         *                               longer fit a DEBUG image into an 8 KB EEPROM
     0000             (    constants.asm):00012         RTCFEAT equ     0               Cool but the reliability feature must go...
     0000             (    constants.asm):00013         DEBUG   equ     0               Enforce assertions and miscellaneous checks
     0001             (    constants.asm):00014         HVNMI   equ     1               NMI handler support
     0000             (    constants.asm):00015         HVNMI2  equ     0               NMI handler support (async input debugging)
                      (    constants.asm):00016         * Loop count for MS. This is busy waiting, so we depend on the CPU clock speed.
     031A             (    constants.asm):00017         MSLCNT  equ     794             at 4 MHz native mode
                      (    constants.asm):00018         *MSLCNT equ     994             at 5 MHz native mode
                      (    constants.asm):00019         
                      (    constants.asm):00020         * End tunable parameters section.
                      (    constants.asm):00021         
                      (    constants.asm):00022                 IFNE    RTCFEAT
0000                  (    constants.asm):00023         RELFEAT set     0               RTCFEAT disables RELFEAT
                      (    constants.asm):00024                 ELSE
                      (    constants.asm):00025                 IFNE    HVNMI
                      (    constants.asm):00026                 IFNE    HVNMI2
0000                  (    constants.asm):00027         RELFEAT set     0               HVNMI and HVNMI2 disable RELFEAT
                      (    constants.asm):00028                 ENDC                    HVNMI2
                      (    constants.asm):00029                 ENDC                    HVNMI
                      (    constants.asm):00030                 ENDC                    RTCFEAT
                      (    constants.asm):00031         
                      (    constants.asm):00032                 IFNE    ANSFEAT
     0000             (    constants.asm):00033         RELFEAT set     0
                      (    constants.asm):00034                 ENDC
                      (    constants.asm):00035         
                      (    constants.asm):00036         * Control flow stack implemented on the top of the data stack.
     E7D6             (    constants.asm):00037         CSPUSH  EQU     NPUSH
     E7E4             (    constants.asm):00038         CSPOP   EQU     NPOP
                      (    constants.asm):00039         
                      (    constants.asm):00040         * Memory map.
     0000             (    constants.asm):00041         RAMSTRT equ     $0000
     8000             (    constants.asm):00042         RAMSIZE equ     $8000
     C000             (    constants.asm):00043         IOSTRT  equ     $C000
     E000             (    constants.asm):00044         ROMSTRT equ     $E000
     FFF0             (    constants.asm):00045         VECTBL  equ     $FFF0
                      (    constants.asm):00046         
                      (    constants.asm):00047         * Base address for global variables (direct page addressed).
     0100             (    constants.asm):00048         VARSPC  equ     $100
                      (    constants.asm):00049         
                      (    constants.asm):00050         * The 74HCT138 (U7) IO address decoder maps one 1 KB area per usable device.
     C000             (    constants.asm):00051         DEV0    equ     $C000           Compact Flash memory module (optional)
     C400             (    constants.asm):00052         DEV1    equ     $C400
     C800             (    constants.asm):00053         DEV2    equ     $C800
     CC00             (    constants.asm):00054         DEV3    equ     $CC00
     D000             (    constants.asm):00055         DEV4    equ     $D000
     D400             (    constants.asm):00056         DEV5    equ     $D400           MC146818 RTC (optional)
     D800             (    constants.asm):00057         DEV6    equ     $D800           HD63B50 unit 0
     DC00             (    constants.asm):00058         DEV7    equ     $DC00
                      (    constants.asm):00059         
     D800             (    constants.asm):00060         ACIACTL equ     DEV6
     D801             (    constants.asm):00061         ACIADAT equ     DEV6+1
                      (    constants.asm):00062         
                      (    constants.asm):00063         * ACIA control register bits.
     0003             (    constants.asm):00064         ACRST   equ     %00000011       ACIA master reset
                      (    constants.asm):00065         
                      (    constants.asm):00066         * 1.84320 MHz Y1: 115200 bps in the direct path, 38400 bps in the DIV3 path
     0001             (    constants.asm):00067         ACDIV16 equ     %00000001       ACIA div 16
                      (    constants.asm):00068         
     0014             (    constants.asm):00069         AC8N1   equ     %00010100       ACIA 8N1
     0000             (    constants.asm):00070         ACRTS0  equ     %00000000       ACIA RTS# low
     0040             (    constants.asm):00071         ACRTS1  equ     %01000000       ACIA RTS# high
     0080             (    constants.asm):00072         ACRDINT equ     %10000000       IRQ on RDRF
                      (    constants.asm):00073         
     0043             (    constants.asm):00074         ACIRSET equ     ACRTS1|ACRST
     00D5             (    constants.asm):00075         ACIRTS1 equ     ACRTS1|ACRDINT|AC8N1|ACDIV16
     0095             (    constants.asm):00076         ACIRTS0 equ     ACRTS0|ACRDINT|AC8N1|ACDIV16
                      (    constants.asm):00077         
                      (    constants.asm):00078         * ACIA status register bits.
     0001             (    constants.asm):00079         ACIRDRF equ     %00000001       Receive data register full
     0002             (    constants.asm):00080         ACITDRE equ     %00000010       Transmit data register empty
     0020             (    constants.asm):00081         ACIOVRN equ     %00100000       Overrun status register bit
     0080             (    constants.asm):00082         ACIISVC equ     %10000000       Interrupt needs servicing
                      (    constants.asm):00083         
                      (    constants.asm):00084         * Compact Flash parameters.
     C000             (    constants.asm):00085         CFBASE  equ     DEV0
     C000             (    constants.asm):00086         CFDATAR equ     CFBASE          R/W data register
     C001             (    constants.asm):00087         CFERROR equ     CFBASE+1        RO error register
     C001             (    constants.asm):00088         CFFEATR equ     CFBASE+1        WO features register
     C002             (    constants.asm):00089         CFSCNTR equ     CFBASE+2        R/W sector count register
     C003             (    constants.asm):00090         CFSNUMR equ     CFBASE+3        R/W sector number register
     C004             (    constants.asm):00091         CFCLOWR equ     CFBASE+4        R/W cylinder low register
     C005             (    constants.asm):00092         CFCHIGR equ     CFBASE+5        R/W cylinder high register
     C006             (    constants.asm):00093         CFDRHDR equ     CFBASE+6        R/W drive/head register
     C007             (    constants.asm):00094         CFSTATR equ     CFBASE+7        RO status register
     C007             (    constants.asm):00095         CFCOMDR equ     CFBASE+7        WO command register
                      (    constants.asm):00096         
                      (    constants.asm):00097         * CF status bits.
     0080             (    constants.asm):00098         CFBSYB  equ     %10000000       BSY status bit
     0040             (    constants.asm):00099         CFRDYB  equ     %01000000       RDY status bit
     0020             (    constants.asm):00100         CFDWFB  equ     %00100000       DWF status bit (not used)
     0010             (    constants.asm):00101         CFDSCB  equ     %00010000       DSC status bit (not used)
     0008             (    constants.asm):00102         CFDRQB  equ     %00001000       DRQ status bit
     0001             (    constants.asm):00103         CFERRB  equ     %00000001       ERR status bit
                      (    constants.asm):00104         
     0200             (    constants.asm):00105         CFSCSZ  equ     $200            Compact Flash (IDE) sector size
                      (    constants.asm):00106         
                      (    constants.asm):00107         * CF commands.
     00EC             (    constants.asm):00108         CFIDDEV equ     $EC             Identify Device
     00EF             (    constants.asm):00109         CFSETFT equ     $EF             Set Feature
     0020             (    constants.asm):00110         CFRSCTS equ     $20             Read Sectors
     0030             (    constants.asm):00111         CFWSCTS equ     $30             Write Sectors
                      (    constants.asm):00112         
                      (    constants.asm):00113         * Buffer in-memory structure:
                      (    constants.asm):00114         * data: 1024 bytes.
                      (    constants.asm):00115         * terminator: 1 byte set to 0.
                      (    constants.asm):00116         * flags: 1 byte.
                      (    constants.asm):00117         * blknum: 2 bytes.
     0001             (    constants.asm):00118         BINUSE  equ     1               Buffer is allocated (the blknum field is valid)
     0002             (    constants.asm):00119         BMAPPD  equ     2               Block has been read from the CF device
     0004             (    constants.asm):00120         BDIRTY  equ     4               Block has been marked for update
     0400             (    constants.asm):00121         BLKSIZ  equ     2*CFSCSZ        Block size is 2 CF sectors (1 KB)
                      (    constants.asm):00122         * Buffer field offsets.
     0400             (    constants.asm):00123         BOTERM  equ     BLKSIZ          Base buffer to the 'terminator' field offset
     0401             (    constants.asm):00124         BOFLAGS equ     BLKSIZ+1        Base buffer to the 'flag' field offset
     0402             (    constants.asm):00125         BOBLKNO equ     BLKSIZ+2        Base buffer to the 'blknum' field offset
                      (    constants.asm):00126         
     0410             (    constants.asm):00127         BFDISP  equ     BUF1-BUF0       Offset between resident buffers
                      (    constants.asm):00128         
                      (    constants.asm):00129         * MC146818 RTC registers.
     D400             (    constants.asm):00130         RTAS    equ     DEV5            Latch target register address offset
     D401             (    constants.asm):00131         RTDS    equ     (DEV5+1)        Actual target register access
                      (    constants.asm):00132         * RTC internal register offsets.
     0000             (    constants.asm):00133         RTOSEC  equ     0               Seconds
     0001             (    constants.asm):00134         RTOSECA equ     1               Seconds alarm
     0002             (    constants.asm):00135         RTOMIN  equ     2               Minutes
     0003             (    constants.asm):00136         RTOMINA equ     3               Minutes alarm
     0004             (    constants.asm):00137         RTOHOUR equ     4               Hours
     0005             (    constants.asm):00138         RTOHRA  equ     5               Hours alarm
     0006             (    constants.asm):00139         RTODOW  equ     6               Day of week
     0007             (    constants.asm):00140         RTODOM  equ     7               Day of month
     0008             (    constants.asm):00141         RTOMON  equ     8               Month
     0009             (    constants.asm):00142         RTOYEAR equ     9               Year
     000A             (    constants.asm):00143         RTOREGA equ     10              Register A
     000B             (    constants.asm):00144         RTOREGB equ     11              Register B
     000C             (    constants.asm):00145         RTOREGC equ     12              Register C
     000D             (    constants.asm):00146         RTOREGD equ     13              Register D
     000E             (    constants.asm):00147         RTOUMB  equ     14              Base of user defined NVRAM storage
     0032             (    constants.asm):00148         RTUMSZ  equ     50              Size of user defined NVRAM storage
     003F             (    constants.asm):00149         RTOPRES equ     (RTOUMB+RTUMSZ-1) RTC NVRAM offset for dectecting dev presence
                      (    constants.asm):00150         
                      (    constants.asm):00151         * Register A bits.
     0080             (    constants.asm):00152         RTAUIP  equ     $80             Update in progress
     0070             (    constants.asm):00153         RTADVRS equ     $70             Divider reset, not in operation
     0020             (    constants.asm):00154         RTADV32 equ     $20             In operation, 32 KHz time base
     000A             (    constants.asm):00155         RTARS64 equ     $A              32 KHz time base, 64 Hz PI (every 15.625 ms)
                      (    constants.asm):00156         
                      (    constants.asm):00157         * Register B bits.
     0080             (    constants.asm):00158         RTBSET  equ     $80
     0040             (    constants.asm):00159         RTBPIE  equ     $40
     0004             (    constants.asm):00160         RTBDM   equ     4               Set to 1 for binary register contents
     0002             (    constants.asm):00161         RTB24   equ     2               Set to 1 for 24 hour format
                      (    constants.asm):00162         
                      (    constants.asm):00163         * Register C bits.
     0040             (    constants.asm):00164         RTCPF   equ     $40             Periodic interrupt pending flag
                      (    constants.asm):00165         
                      (    constants.asm):00166         * ASCII trivia.
     0000             (    constants.asm):00167         NUL     equ     0               End of string marker
     0003             (    constants.asm):00168         ETX     equ     3               Control-C (intr)
     0008             (    constants.asm):00169         BS      equ     8               Backspace
     0009             (    constants.asm):00170         HT      equ     9               Horizontal tab
     000A             (    constants.asm):00171         LF      equ     $0A             Aka new line
     000D             (    constants.asm):00172         CR      equ     $0D             Carriage return
     0015             (    constants.asm):00173         NAK     equ     $15             Control-U (kill)
     0020             (    constants.asm):00174         SP      equ     $20             Aka BL in Forth
     0013             (    constants.asm):00175         XOFF    equ     $13             Aka DC3
     0011             (    constants.asm):00176         XON     equ     $11             Aka DC1
                      (    constants.asm):00177         
                      (    constants.asm):00178         * Stack sizes.
     00C0             (    constants.asm):00179         NSTKSZ  equ     192             Expressed in bytes. Now only limited by RAM size
     0080             (    constants.asm):00180         RSTKSZ  equ     128             Expressed in bytes
                      (    constants.asm):00181         
                      (    constants.asm):00182         * Buffer sizes.
     0084             (    constants.asm):00183         CMDBFSZ equ     132             Command line entry buffer
     0050             (    constants.asm):00184         HEXBFSZ equ     80
     0048             (    constants.asm):00185         TBUFSZ  equ     72              Used by VLIST to print word name and CVNSTR
     0054             (    constants.asm):00186         PADBSZ  equ     84              79-STANDARD mandates a minimum of 64 bytes
     0040             (    constants.asm):00187         SERBSZ  equ     64              Serial buffer size. Needs to be a power of 2
                      (    constants.asm):00188         
                      (    constants.asm):00189         * Dictionary flag masks.
     0080             (    constants.asm):00190         IMDFLM  equ     $80             Immediate flag mask
     0040             (    constants.asm):00191         DEFFLM  equ     $40             Compilation only flag mask
                      (    constants.asm):00192                 IFNE    RELFEAT
0000                  (    constants.asm):00193         MONFLM  equ     $20             Monitored flag mask. This indicates that the
                      (    constants.asm):00194         *                               word to which it relates might be checked for
                      (    constants.asm):00195         *                               integrity. This applies by default to all words
                      (    constants.asm):00196         *                               defined with : and all constants. It might
                      (    constants.asm):00197         *                               also apply to any other CREATEd object by
                      (    constants.asm):00198         *                               resorting to the MONITOR word. Using MONITOR
                      (    constants.asm):00199         *                               on variable word contents is guaranteed to
                      (    constants.asm):00200         *                               raise ICHECK's attention.
                      (    constants.asm):00201                 ENDC
                      (    constants.asm):00202         
                      (    constants.asm):00203         * Division function codes and options.
     0000             (    constants.asm):00204         DVFSLMD equ     0               Function is /MOD
     0001             (    constants.asm):00205         DVFMOD  equ     1               Function is MOD
     0002             (    constants.asm):00206         DVFDIV  equ     2               Function is /
     0008             (    constants.asm):00207         DVOA1D  equ     8               Argument 1 is a double (FM/MOD SM/REM)
     0010             (    constants.asm):00208         DVOWSYM equ     16              Want symmetric division (default is floored)
     0007             (    constants.asm):00209         DVFMASK equ     7               Mask for extracting function codes
                      (    constants.asm):00210         
     001F             (    constants.asm):00211         WRLNMSK equ     $1F             31 character is the maximum word length
                      (    constants.asm):00212         
                      (    constants.asm):00213         * 6309 opcodes.
     008E             (    constants.asm):00214         LDXOPC  equ     $8E             LDX (immediate)
     007E             (    constants.asm):00215         JMPOPC  equ     $7E             JMP (extended)
     00BD             (    constants.asm):00216         JSROPC  equ     $BD             JSR (extended)
     0039             (    constants.asm):00217         RTSOPC  equ     $39             RTS (inherent)
     2503             (    constants.asm):00218         BCSOPC  equ     $2503           BCS *+5 (relative)
     2603             (    constants.asm):00219         BNEOPC  equ     $2603           BNE *+5 (relative)
     00C7             (    constants.asm):00220         ILLOPC  equ     $C7             An illegal operation code. Meant to raise a trap
                      (    constants.asm):00221         
     0001             (    constants.asm):00222         CFLAG   equ     1               CC bit 0 (C)
     0004             (    constants.asm):00223         ZFLAG   equ     4               CC bit 2 (Z)
     0010             (    constants.asm):00224         IFLAG   equ     $10             CC bit 4 (I)
     0040             (    constants.asm):00225         FFLAG   equ     $40             CC bit 6 (F)
                      (    constants.asm):00226         
                      (    constants.asm):00227         * RAM based execution token for @.
     0CC4             (    constants.asm):00228         RAMFTCH set     WDICSPC+4       Dictionary header overhead is word's length + 3
                      (    constants.asm):00229                 IFNE    RELFEAT         The reliability features adds one byte to the
0000                  (    constants.asm):00230         RAMFTCH set     WDICSPC+5       header: a checksum.
                      (    constants.asm):00231                 ENDC
                      (    constants.asm):00232         
                      (        forth.asm):00129         
                      (        forth.asm):00130         * Unchecked NPUSH. This is for situations in which there is absolutely no
                      (        forth.asm):00131         * chance of overflow. For instance, in case we just popped 2 cells and push
                      (        forth.asm):00132         * back one or two.
0000                  (        forth.asm):00133         UCNPUSH MACRO   NOEXPAND
                      (        forth.asm):00134                 pshu    x
                      (        forth.asm):00135                 ENDM
                      (        forth.asm):00136         
                      (        forth.asm):00137         * Unchecked NPOP. To be used only after trusted words have been invoked, i.e.
                      (        forth.asm):00138         * when one is positively sure that the data stack contains at least one cell.
0000                  (        forth.asm):00139         UCNPOP  MACRO   NOEXPAND
                      (        forth.asm):00140                 pulu    x
                      (        forth.asm):00141                 ENDM
                      (        forth.asm):00142         
                      (        forth.asm):00143         * Make sure minimum data stack requirements are satisfied upon word entry.
                      (        forth.asm):00144         * The requirement is expressed in cell size--2 bytes on the 6309.
                      (        forth.asm):00145         * \1 specifies the required number of cells.
0000                  (        forth.asm):00146         MINDREQ MACRO   NOEXPAND
                      (        forth.asm):00147                 ldd     #NSTBOT-(\1*2)  Cell count one expects to be stacked up
                      (        forth.asm):00148                 bra     CHKNDPT         No return if the condition is not met
                      (        forth.asm):00149                 ENDM
                      (        forth.asm):00150         
                      (        forth.asm):00151         * Reliability feature support: execution tokens.
                      (        forth.asm):00152         * \1 has the opcode we want to emit.
                      (        forth.asm):00153         * \2 has the execution token address, as if the header overhead always
                      (        forth.asm):00154         * was 3 bytes.
0000                  (        forth.asm):00155         RFXT    MACRO   NOEXPAND
                      (        forth.asm):00156                 IFNE    RELFEAT
                      (        forth.asm):00157                 \1      \2+1
                      (        forth.asm):00158                 ELSE
                      (        forth.asm):00159                 \1      \2
                      (        forth.asm):00160                 ENDC                    RELFEAT
                      (        forth.asm):00161                 ENDM
                      (        forth.asm):00162         
                      (        forth.asm):00163         * Reliability feature support: variable word header contents.
                      (        forth.asm):00164         * This is a dummy checksum only used for EEPROM resident words.
                      (        forth.asm):00165         * Those never are checked for code integrity by MONITOR.
0000                  (        forth.asm):00166         RFCS    MACRO   NOEXPAND
                      (        forth.asm):00167                 IFNE    RELFEAT
                      (        forth.asm):00168                 fcb     ILLOPC          Illegal opcode
                      (        forth.asm):00169                 ENDC                    RELFEAT
                      (        forth.asm):00170                 ENDM
                      (        forth.asm):00171         
                      (        forth.asm):00172         *******************************************************************************
                      (        forth.asm):00173         * RAM definitions. We cannot initialize globals from the assembly defs.
                      (        forth.asm):00174         * All we can do here is define addresses and size things up.
                      (        forth.asm):00175         
                      (        forth.asm):00176         * RAMSTART is 0. We leave page 0 unused as a bug proof area.
                      (        forth.asm):00177         * When compiled in debug mode, this area is filled with illegal
                      (        forth.asm):00178         * instruction opcodes ($C7).
                      (        forth.asm):00179         
                      (        forth.asm):00180                 org     VARSPC
                      (        forth.asm):00181         
                      (        forth.asm):00182         * Global pointers.
0100                  (        forth.asm):00183         RSP     rmb     2               The return stack pointer
0102                  (        forth.asm):00184         TOKENSP rmb     2               Token start pointer (STRS)
0104                  (        forth.asm):00185         TOKENEP rmb     2               Token end pointer (STRE)
0106                  (        forth.asm):00186         LSTWAD  rmb     2               Last defined word header pointer--LAST
0108                  (        forth.asm):00187         DICEND  rmb     2               Current end of the dictionary--HERE
010A                  (        forth.asm):00188         BLSTWAD rmb     2               Backup (was IX)
010C                  (        forth.asm):00189         BDICEND rmb     2               Backup (was IY)
010E                  (        forth.asm):00190         PLOAD   rmb     2               Word payload if found by SWDIC
0110                  (        forth.asm):00191         FNDPLD  rmb     2               Last code payload reported by FIND
0112                  (        forth.asm):00192         RECADDR rmb     2               Used by RECURSE
0114                  (        forth.asm):00193         JSRLAST rmb     2               Last compilation address of #JSROPC
0116                  (        forth.asm):00194         FWDREF  rmb     2               Address of the last forward reference
0118                  (        forth.asm):00195         RAKEVAR rmb     2               Linked list of LEAVE forward references
011A                  (        forth.asm):00196         VLPRVEP rmb     2               Used in WORDS to compute word code length
011C                  (        forth.asm):00197         VLPRVHD rmb     2               Used in WORDS to compute word code length
011E                  (        forth.asm):00198         MRUBUFA rmb     2               Most recently used buffer address
0120                  (        forth.asm):00199         BSBFADR rmb     2               Base buffer address for the input stream
                      (        forth.asm):00200         
                      (        forth.asm):00201         * Global variables.
0122                  (        forth.asm):00202         UBASE   rmb     2               Base for numbers input and output--BASE
0124                  (        forth.asm):00203         USTATE  rmb     2               0 if interpreting, 255 if compiling--STATE
0126                  (        forth.asm):00204         ISLEN   rmb     2               Input stream length
0128                  (        forth.asm):00205         ISEADDR rmb     2               End of input stream address (included)
012A                  (        forth.asm):00206         UTOIN   rmb     2               User variable for >IN
012C                  (        forth.asm):00207         UBLK    rmb     2               User variable for BLK
012E                  (        forth.asm):00208         USCR    rmb     2               User variable for SCR (output for LIST)
0130                  (        forth.asm):00209         TIKSHI  rmb     2               RTC clock ticks updated on FIRQ
0132                  (        forth.asm):00210         TIKSLOW rmb     2               RTC clock ticks updated on FIRQ
                      (        forth.asm):00211                 IFNE    DEBUG
0134                  (        forth.asm):00212         CCREG   rmb     2               A DEBUG variable for predicates (see CMP2)
                      (        forth.asm):00213                 ENDC                    DEBUG
                      (        forth.asm):00214                 IFNE    HVNMI
                      (        forth.asm):00215                 IFNE    HVNMI2
0134                  (        forth.asm):00216         SBDROPC rmb     2               Char. drop count for serial input (see FIRQHDL)
                      (        forth.asm):00217                 ENDC                    HVNMI2
                      (        forth.asm):00218                 ENDC                    HVNMI
0134                  (        forth.asm):00219         ANCMPF  rmb     1               Anonymous compilation flag
0135                  (        forth.asm):00220         BALNCD  rmb     1               Balanced flag for control flow constructs
0136                  (        forth.asm):00221         BASBKUP rmb     1               BASE backup when a base prefix is in use
0137                  (        forth.asm):00222         RDEPTH  rmb     1               Return stack depth in cells
0138                  (        forth.asm):00223         DIVFCN  rmb     1               Flag used by /, MOD and /MOD
0139                  (        forth.asm):00224         DIVDBL  rmb     1               DIV: N1 is a double (flag)
013A                  (        forth.asm):00225         DIVSYM  rmb     1               DIV: symmetric division required (flag)
013B                  (        forth.asm):00226         MULFCN  rmb     1               Flag used by *, M*
013C                  (        forth.asm):00227         F83DIVF rmb     1               FORTH-83 adjusment flag for floored division
013D                  (        forth.asm):00228         STSLFCN rmb     1               Flag used by */, */MOD
013E                  (        forth.asm):00229         CVTFCN  rmb     1               CVT: 0 => # semantics, 1 => #S semantics
013F                  (        forth.asm):00230         ISNEGF  rmb     1               Number being scanned is negative
0140                  (        forth.asm):00231         ISDBLF  rmb     1               Number being scanned is a double
0141                  (        forth.asm):00232         CVISSGN rmb     1               Flag: should CVNSTR consider numbers as signed
0142                  (        forth.asm):00233         CURTOKL rmb     1               Current token length. Set by SWDIC
0143                  (        forth.asm):00234         SVCTOKL rmb     1               Saved current token length. Set by NUMCVT
0144                  (        forth.asm):00235         IMDFLG  rmb     1               Immediate flag
0145                  (        forth.asm):00236         DEFFLG  rmb     1               Define flag
0146                  (        forth.asm):00237         RTCAVL  rmb     1               NZ if real time clock is present
0147                  (        forth.asm):00238         CFCARDP rmb     1               NZ if CF card present
0148                  (        forth.asm):00239         CFCMMIR rmb     1               Last CF command issued
0149                  (        forth.asm):00240         CFERRCD rmb     1               and the corresponding error code
014A                  (        forth.asm):00241         SRCID   rmb     1               ANSI SOURCE-ID (internal only).
014B                  (        forth.asm):00242         SQUOTFN rmb     1               NZ only if running WORD from S" (or .")
                      (        forth.asm):00243         
                      (        forth.asm):00244         * Serial buffer parameters. Queing happens on FIRQ.
                      (        forth.asm):00245         * Dequeing occurs when GETCH is invoked.
014C                  (        forth.asm):00246         SERBENQ rmb     1               Enqueue offset
014D                  (        forth.asm):00247         SERBDEQ rmb     1               Dequeue offset
014E                  (        forth.asm):00248         SERBCNT rmb     1               Buffer byte count
014F                  (        forth.asm):00249         XMITOK  rmb     1               Software flow control on output flag
0150                  (        forth.asm):00250         SERBUF  rmb     SERBSZ          The actual buffer
                      (        forth.asm):00251         
0190                  (        forth.asm):00252         PADBUF  rmb     PADBSZ          PAD lives here.
01E4                  (        forth.asm):00253         APADBUF rmb     PADBSZ          Alternate PAD here. Used by <#, #, #S, #>
                      (        forth.asm):00254         
                      (        forth.asm):00255         * The normal (data) stack.
                      (        forth.asm):00256                 align   2
     0238             (        forth.asm):00257         NSTTOP  equ     *               U's value when the data stack is full
0238                  (        forth.asm):00258                 rmb     NSTKSZ
     02F8             (        forth.asm):00259         NSTBOT  equ     *               U's value when the data stack is empty
                      (        forth.asm):00260         
                      (        forth.asm):00261         * The return stack.
     02F8             (        forth.asm):00262         RSTTOP  equ     *
02F8                  (        forth.asm):00263                 rmb     RSTKSZ
     0378             (        forth.asm):00264         RSTBOT  equ     *
                      (        forth.asm):00265         
0378                  (        forth.asm):00266         CMDBUF  rmb     CMDBFSZ
03FC                  (        forth.asm):00267         HEXBUF  rmb     HEXBFSZ
                      (        forth.asm):00268         
044C                  (        forth.asm):00269         TBUFF   rmb     TBUFSZ          Output for CVNSTR
                      (        forth.asm):00270         
0494 0000000000000000 (        forth.asm):00271                 align   16
     00000000
04A0                  (        forth.asm):00272         BUF0    rmb     BLKSIZ+4
                      (        forth.asm):00273         
08A4 0000000000000000 (        forth.asm):00274                 align   16
     00000000
08B0                  (        forth.asm):00275         BUF1    rmb     BLKSIZ+4
                      (        forth.asm):00276         
                      (        forth.asm):00277         *******************************************************************************
                      (        forth.asm):00278         * Writable dictionary section begins right here. We cannot have anything
                      (        forth.asm):00279         * statically defined at this point. Therefore, FORTHIN moves the code for @
                      (        forth.asm):00280         * to this location and sets up DICEND and LSTWAD accordingly. All the RAM
                      (        forth.asm):00281         * beyond this point (after the reallocated @ implementation) is user defined
                      (        forth.asm):00282         * material. Note that builtin words, though they cannot be forgotten (to the
                      (        forth.asm):00283         * extent they are ROM resident--not to mention inter-word dependencies),
                      (        forth.asm):00284         * might still be overridden by user definitions. WORDS will happily ignore
                      (        forth.asm):00285         * that fact and list everything in the dictionary linked list order.
                      (        forth.asm):00286         
0CB4 0000000000000000 (        forth.asm):00287                 align   16
     00000000
     0CC0             (        forth.asm):00288         WDICSPC equ     *
                      (        forth.asm):00289         
                      (        forth.asm):00290         *******************************************************************************
                      (        forth.asm):00291         * ROM code begins.
                      (        forth.asm):00292         
                      (        forth.asm):00293                 org     ROMSTRT
                      (        forth.asm):00294         * Trap handler: division by zero or illegal opcode. See page 4-10 of "The 6309
                      (        forth.asm):00295         * Book" for a description of interrupt stacks in native 6309 mode.
E000 113C40           (        forth.asm):00296 (4)     IODZHDL bitmd   #$40            Illegal opcode?
E003 2705             (        forth.asm):00297 (3)             beq     @iodzh1
E005 8EFE99           (        forth.asm):00298 (3)             ldx     #IOPERRM
E008 2008             (        forth.asm):00299 (3)             bra     @iodzh2
E00A 113C80           (        forth.asm):00300 (4)     @iodzh1 bitmd   #$80            Division by zero?
E00D 2726             (        forth.asm):00301 (3)             beq     @iodzh3         And you may ask yourself, well
                      (        forth.asm):00302         *                               How did I get here?
E00F 8EFEAE           (        forth.asm):00303 (3)             ldx     #DV0ERRM        Division by zero it is!
E012 BDE2EA           (        forth.asm):00304 (7)     @iodzh2 jsr     PUTS
E015 EC6C             (        forth.asm):00305 (5+1)           ldd     12,s            Return code address (PC)
E017 108E03FC         (        forth.asm):00306 (4)             ldy     #HEXBUF
E01B BDE192           (        forth.asm):00307 (7)             jsr     HDMP4   
E01E 8E03FC           (        forth.asm):00308 (3)             ldx     #HEXBUF
E021 BDE2EA           (        forth.asm):00309 (7)             jsr     PUTS
E024 BDE2F7           (        forth.asm):00310 (7)             jsr     PUTCR
E027 8EE74F           (        forth.asm):00311 (3)             ldx     #ERRHD1
E02A AF6C             (        forth.asm):00312 (5+1)           stx     12,s            Resume execution in the error handler
E02C 8EE000           (        forth.asm):00313 (3)             ldx     #IODZHDL
E02F AF68             (        forth.asm):00314 (5+1)           stx     8,s             With Y set to IODZHDL
E031 8603             (        forth.asm):00315 (2)             lda     #3              And user ABORT error code
E033 A762             (        forth.asm):00316 (4+1)           sta     2,s             Passed back through B
E035 3B               (        forth.asm):00317 (17+?)  @iodzh3 rti
                      (        forth.asm):00318         
     E036             (        forth.asm):00319         SWI3HDL equ     *
     E036             (        forth.asm):00320         SWI2HDL equ     *
     E036             (        forth.asm):00321         IRQHDL  equ     *
     E036             (        forth.asm):00322         SWIHDL  equ     *
                      (        forth.asm):00323                 IFEQ    HVNMI
E036                  (        forth.asm):00324         NMIHDL                          These should never happen
                      (        forth.asm):00325                 ENDC
E036 3B               (        forth.asm):00326 (17+?)          rti
                      (        forth.asm):00327         
                      (        forth.asm):00328         * Interrupts are disabled by default upon reset.
                      (        forth.asm):00329         * NMI# will not be "armed" until S is initiliazed.
E037 113D01           (        forth.asm):00330 (5)     RSTHDL  ldmd    #1              Establish 6309 native mode
                      (        forth.asm):00331         
E03A 8643             (        forth.asm):00332 (2)             lda     #ACIRSET
E03C B7D800           (        forth.asm):00333 (4)             sta     ACIACTL         ACIA master reset
E03F 86D5             (        forth.asm):00334 (2)             lda     #ACIRTS1
E041 B7D800           (        forth.asm):00335 (4)             sta     ACIACTL         RTS# high, 8N1
                      (        forth.asm):00336         
E044 8EFE25           (        forth.asm):00337 (3)             ldx     #BOOTMSG        Identity statement
                      (        forth.asm):00338         
                      (        forth.asm):00339         * Send the NUL terminated string pointed to by X to the ACIA.
                      (        forth.asm):00340         * The RAM is not yet assumed to be working.
E047 C602             (        forth.asm):00341 (2)     INIT    ldb     #ACITDRE
E049 A680             (        forth.asm):00342 (4+1)   @init0  lda     ,x+
E04B 270A             (        forth.asm):00343 (3)             beq     RAMCHK          NUL marks the end of the string
E04D F5D800           (        forth.asm):00344 (4)     @init1  bitb    ACIACTL         Wait for TDRE bit to be set
E050 27FB             (        forth.asm):00345 (3)             beq     @init1
E052 B7D801           (        forth.asm):00346 (4)             sta     ACIADAT         Transmit data
E055 20F2             (        forth.asm):00347 (3)             bra     @init0          Next char, if any
                      (        forth.asm):00348         
                      (        forth.asm):00349         * RAM0 32 KB self test (destructive).
E057 8E0000           (        forth.asm):00350 (3)     RAMCHK  ldx     #RAMSTRT
E05A AF84             (        forth.asm):00351 (5+0)   @ramch1 stx     ,x
E05C AC84             (        forth.asm):00352 (5+0)           cmpx    ,x
E05E 2609             (        forth.asm):00353 (3)             bne     RAMFAIL
E060 3002             (        forth.asm):00354 (4+1)           leax    2,x
E062 8C8000           (        forth.asm):00355 (3)             cmpx    #RAMSTRT+RAMSIZE
E065 26F3             (        forth.asm):00356 (3)             bne     @ramch1
E067 2012             (        forth.asm):00357 (3)             bra     RAMOK
                      (        forth.asm):00358         
E069 C680             (        forth.asm):00359 (2)     RAMFAIL ldb     #128
E06B 108E8000         (        forth.asm):00360 (4)     @ramf1  ldy     #$8000
E06F 313F             (        forth.asm):00361 (4+1)   @ramf2  leay    -1,y
E071 26FC             (        forth.asm):00362 (3)             bne     @ramf2
E073 5A               (        forth.asm):00363 (1)             decb
E074 26F5             (        forth.asm):00364 (3)             bne     @ramf1
E076 8EFE80           (        forth.asm):00365 (3)             ldx     #RAMFM
E079 20CC             (        forth.asm):00366 (3)             bra     INIT            Here we go again
                      (        forth.asm):00367         
                      (        forth.asm):00368         * RAM Initialization to all $C7 if DEBUG mode is enabled else zeroes.
E07B 8E0000           (        forth.asm):00369 (3)     RAMOK   ldx     #RAMSTRT
E07E 3101             (        forth.asm):00370 (4+1)           leay    1,x
E080 10867FFF         (        forth.asm):00371 (4)             ldw     #RAMSIZE-1
                      (        forth.asm):00372                 IFNE    DEBUG
                      (        forth.asm):00373                 lda     #ILLOPC
                      (        forth.asm):00374                 sta     ,x
                      (        forth.asm):00375                 ELSE
E084 6F84             (        forth.asm):00376 (6+0)           clr     ,x
                      (        forth.asm):00377                 ENDC                    DEBUG
E086 113812           (        forth.asm):00378 (6+?)           tfm     x+,y+
                      (        forth.asm):00379         
                      (        forth.asm):00380         * Initialize the system stack pointer and the direct page base address register.
E089 10CE8000         (        forth.asm):00381 (4)             lds     #RAMSTRT+RAMSIZE
E08D 8601             (        forth.asm):00382 (2)             lda     #VARSPC/256
E08F 1F8B             (        forth.asm):00383 (4)             tfr     a,dp
     01               (        forth.asm):00384                 SETDP   VARSPC/256
                      (        forth.asm):00385         
                      (        forth.asm):00386         * Serial buffer parameters initialization. We are doing this here because
                      (        forth.asm):00387         * PUTS requires prior software flow control initialization.
                      (        forth.asm):00388                 IFNE    DEBUG
                      (        forth.asm):00389                 clrd
                      (        forth.asm):00390                 std     SERBENQ         Two birds with one stone
                      (        forth.asm):00391                 sta     SERBCNT
                      (        forth.asm):00392                 IFNE    HVNMI
                      (        forth.asm):00393                 IFNE    HVNMI2
                      (        forth.asm):00394                 std     SBDROPC         Initialize chararacter drop count
                      (        forth.asm):00395                 ENDC                    HVNMI2
                      (        forth.asm):00396                 ENDC                    HVNMI
                      (        forth.asm):00397                 ENDC                    DEBUG
E091 8601             (        forth.asm):00398 (2)             lda     #1              Initialize software flow control on output
E093 974F             (        forth.asm):00399 (3)             sta     XMITOK
                      (        forth.asm):00400         
E095 8EFE70           (        forth.asm):00401 (3)             ldx     #RAMOKM
E098 BDE2EA           (        forth.asm):00402 (7)             jsr     PUTS
E09B BDE34B           (        forth.asm):00403 (7)             jsr     FORTHIN         Global variables initialization
E09E BDE8FD           (        forth.asm):00404 (7)             jsr     CFINIT          CompactFlash card initialization
                      (        forth.asm):00405                 IFNE    RTCFEAT
                      (        forth.asm):00406                 jsr     RTCINIT         Real time clock initialization
                      (        forth.asm):00407                 ENDC                    RTCFEAT
                      (        forth.asm):00408         
                      (        forth.asm):00409         * Lower RTS and enable FIRQ.
E0A1 8695             (        forth.asm):00410 (2)             lda     #ACIRTS0
E0A3 B7D800           (        forth.asm):00411 (4)             sta     ACIACTL
E0A6 1CBF             (        forth.asm):00412 (2)             andcc   #^FFLAG
                      (        forth.asm):00413         
E0A8 0D47             (        forth.asm):00414 (4)             tst     CFCARDP
E0AA 2706             (        forth.asm):00415 (3)             beq     INTERP
                      (        forth.asm):00416         
                      (        forth.asm):00417         * A CF card is present, LOAD block #1.
E0AC 8E0001           (        forth.asm):00418 (3)             ldx     #1
E0AF BDF7D3           (        forth.asm):00419 (7)             jsr     LOAD1
                      (        forth.asm):00420         
                      (        forth.asm):00421         * The interpreter main loop.
E0B2 104F             (        forth.asm):00422 (2)     INTERP  clrd
E0B4 DD2C             (        forth.asm):00423 (4)             std     UBLK            Interpreting from the console. Set BLK to 0
E0B6 974A             (        forth.asm):00424 (3)             sta     SRCID           Clear SOURCE-ID. Not invoked in EVALUATE context
E0B8 BDE166           (        forth.asm):00425 (7)             jsr     READLN          Acquire the next input line (>IN is cleared)
E0BB 8D02             (        forth.asm):00426 (6)             bsr     _INTERP
E0BD 20F3             (        forth.asm):00427 (3)     MINTLRA bra     INTERP
                      (        forth.asm):00428         
                      (        forth.asm):00429         * The interpreter itself.
E0BF BDE384           (        forth.asm):00430 (7)     _INTERP jsr     SCNSTOK         Scan for the beginning of a word at address X
E0C2 2710             (        forth.asm):00431 (3)             beq     @oeistr         This is the end
E0C4 0D25             (        forth.asm):00432 (4)             tst     USTATE+1        We do ignore the upper byte
E0C6 264D             (        forth.asm):00433 (3)             bne     COMP            We are compiling
E0C8 BDE49D           (        forth.asm):00434 (7)             jsr     SWDIC           Updates TOKENEP, CURTOKL, IMDFLG/DEFFLG
E0CB 261C             (        forth.asm):00435 (3)             bne     @exec           Word found, execute it
E0CD BDE3DC           (        forth.asm):00436 (7)             jsr     NUMCVT
     E0D0             (        forth.asm):00437         NMCVIRA equ     *
E0D0 9E04             (        forth.asm):00438 (4)             ldx     TOKENEP
E0D2 20EB             (        forth.asm):00439 (3)             bra     _INTERP         Next token, please!
                      (        forth.asm):00440         * End of input stream condition is recognized. We are looking at the past here.
E0D4 0D4A             (        forth.asm):00441 (4)     @oeistr tst     SRCID           Were we running a string via EVALUATE?
E0D6 2604             (        forth.asm):00442 (3)             bne     @done           No feedback if that was the case
E0D8 DC2C             (        forth.asm):00443 (4)             ldd     UBLK
E0DA 2701             (        forth.asm):00444 (3)             beq     @feedbk         We are back from the console
E0DC 39               (        forth.asm):00445 (4)     @done   rts                     We're done here
E0DD 8EFE93           (        forth.asm):00446 (3)     @feedbk ldx     #OKFEEDB        Provide OK feedback
E0E0 0D25             (        forth.asm):00447 (4)             tst     USTATE+1        No OK feedback if we're compiling, just CRLF
E0E2 2702             (        forth.asm):00448 (3)             beq     @fullfb
E0E4 3003             (        forth.asm):00449 (4+1)           leax    3,x             Skip the ' OK' string when compiling
E0E6 7EE2EA           (        forth.asm):00450 (3)     @fullfb jmp     PUTS            Back to whoever invoked us
E0E9 9645             (        forth.asm):00451 (3)     @exec   lda     DEFFLG
E0EB 2705             (        forth.asm):00452 (3)             beq     @introk         Compilation only flag is not set
E0ED C606             (        forth.asm):00453 (2)             ldb     #6              Incorrect STATE
E0EF BDE74C           (        forth.asm):00454 (7)             jsr     ERRHDLR         No return
     E0F2             (        forth.asm):00455         INTISRA equ     *               For symbolic stack debugging purposes
E0F2 8D0C             (        forth.asm):00456 (6)     @introk bsr     WIEN2IN         Ask Vienna for its opinion about >IN
E0F4 8EE0FB           (        forth.asm):00457 (3)             ldx     #INTRPRA        The return address
E0F7 3410             (        forth.asm):00458 (4+2)           pshs    x
E0F9 1F25             (        forth.asm):00459 (4)             tfr     y,pc            An indirect call to Y
E0FB BDE86A           (        forth.asm):00460 (7)     INTRPRA jsr     BKIN2PT         Derive X from BLK, >IN
E0FE 20BF             (        forth.asm):00461 (3)             bra     _INTERP
                      (        forth.asm):00462         
                      (        forth.asm):00463         * The Vienna anomaly: have >IN point one character further into the input
                      (        forth.asm):00464         * stream if the end of the input stream has not been reached yet and
                      (        forth.asm):00465         * the next available character is BL. This simplifies WORD and is required
                      (        forth.asm):00466         * for the GNU Forth based PARSE implementation.
E100 9E04             (        forth.asm):00467 (4)     WIEN2IN ldx     TOKENEP
E102 DC28             (        forth.asm):00468 (4)             ldd     ISEADDR
E104 103701           (        forth.asm):00469 (4)             cmpr    d,x
E107 2708             (        forth.asm):00470 (3)             beq     @noskip         End of input stream reached already
E109 8620             (        forth.asm):00471 (2)             lda     #SP
E10B A184             (        forth.asm):00472 (4+0)           cmpa    ,x
E10D 2602             (        forth.asm):00473 (3)             bne     @noskip
E10F 3001             (        forth.asm):00474 (4+1)           leax    1,x
E111 1F10             (        forth.asm):00475 (4)     @noskip tfr     x,d
E113 204C             (        forth.asm):00476 (3)             bra     U2INFRD         Derive >IN from D
                      (        forth.asm):00477         
                      (        forth.asm):00478         * The compiler.
                      (        forth.asm):00479         * Upon entry TOKENSP has been set by a prior call to SCNSTOK.
E115 BDE49D           (        forth.asm):00480 (7)     COMP    jsr     SWDIC           Updates TOKENEP, CURTOKL, IMDFLG/DEFFLG
E118 271C             (        forth.asm):00481 (3)             beq     @cmpnum         Word @ TOKENSP is not in the dictionary
E11A 0D44             (        forth.asm):00482 (4)             tst     IMDFLG
E11C 2710             (        forth.asm):00483 (3)             beq     @notimd
E11E 8DE0             (        forth.asm):00484 (6)             bsr     WIEN2IN         Ask Vienna for its opinion about >IN
E120 8EE127           (        forth.asm):00485 (3)             ldx     #COMPLRA        Word is immediate. Execute it
E123 3410             (        forth.asm):00486 (4+2)           pshs    x               Return to COMPLRA
E125 1F25             (        forth.asm):00487 (4)             tfr     y,pc            An indirect call to Y
E127 BDE86A           (        forth.asm):00488 (7)     COMPLRA jsr     BKIN2PT         Derive X from BLK, >IN
E12A 9F04             (        forth.asm):00489 (4)             stx     TOKENEP
E12C 2091             (        forth.asm):00490 (3)             bra     _INTERP         Branch back to the interpreter
E12E 1F21             (        forth.asm):00491 (4)     @notimd tfr     y,x
E130 8D20             (        forth.asm):00492 (6)             bsr     EMXASXT         Emit X as an execution token
E132 9E04             (        forth.asm):00493 (4)     @cmpdon ldx     TOKENEP
E134 2089             (        forth.asm):00494 (3)             bra     _INTERP
E136 BDE3DC           (        forth.asm):00495 (7)     @cmpnum jsr     NUMCVT
     E139             (        forth.asm):00496         NMCVCRA equ     *
E139 0D40             (        forth.asm):00497 (4)             tst     ISDBLF
E13B 2607             (        forth.asm):00498 (3)             bne     @cmpdbl
E13D 3710             (        forth.asm):00499                 UCNPOP                  TOS to X
E13F BDE566           (        forth.asm):00500 (7)             jsr     LITER
E142 20EE             (        forth.asm):00501 (3)             bra     @cmpdon
                      (        forth.asm):00502         * The following is some sort of half baked 2LITERAL.
                      (        forth.asm):00503         * Please note that NUMCVT guarantees us that at least two cells are stacked up.
E144 AE42             (        forth.asm):00504 (5+1)   @cmpdbl ldx     2,u
E146 BDE566           (        forth.asm):00505 (7)             jsr     LITER           LSC
E149 AEC4             (        forth.asm):00506 (5+0)           ldx     ,u
E14B BDE566           (        forth.asm):00507 (7)             jsr     LITER           MSC
E14E 3344             (        forth.asm):00508 (4+1)           leau    4,u             2DROP
E150 20E0             (        forth.asm):00509 (3)             bra     @cmpdon
                      (        forth.asm):00510         
                      (        forth.asm):00511         * Emit (in a code generation understanding) X as an execution token.
                      (        forth.asm):00512         * In essence, this simply inserts JSR <X> at HERE.
                      (        forth.asm):00513         * Note: this code provides support for trailing JSR elimination.
                      (        forth.asm):00514         * On input: X has the target execution token.
                      (        forth.asm):00515         * On output: Y will have HERE, A will be altered, X will be preserved.
E152 109E08           (        forth.asm):00516 (5)     EMXASXT ldy     DICEND
E155 109F14           (        forth.asm):00517 (5)             sty     JSRLAST         JSRLAST points to the latest JSR code emission
E158 86BD             (        forth.asm):00518 (2)             lda     #JSROPC         JSR extended
E15A BDE57D           (        forth.asm):00519 (7)             jsr     VARCON2         Compile a JSR to the execution token
E15D 109F08           (        forth.asm):00520 (5)             sty     DICEND
E160 39               (        forth.asm):00521 (4)             rts
                      (        forth.asm):00522         
                      (        forth.asm):00523         * Derive UTOIN from D's current value. D is altered.
E161 9320             (        forth.asm):00524 (4)     U2INFRD subd    BSBFADR
E163 DD2A             (        forth.asm):00525 (4)             std     UTOIN
E165 39               (        forth.asm):00526 (4)             rts
                      (        forth.asm):00527         
                      (        forth.asm):00528         * Used by INTERP and REFILL.
E166 8E0378           (        forth.asm):00529 (3)     READLN  ldx     #CMDBUF
E169 9F20             (        forth.asm):00530 (4)             stx     BSBFADR
E16B C684             (        forth.asm):00531 (2)             ldb     #CMDBFSZ
E16D BDE30D           (        forth.asm):00532 (7)             jsr     GETS
E170 4F               (        forth.asm):00533 (1)             clra
E171 DD26             (        forth.asm):00534 (4)             std     ISLEN           GETS returns the entered character count via B
E173 5F               (        forth.asm):00535 (1)             clrb
E174 DD28             (        forth.asm):00536 (4)             std     ISEADDR         Clear end of input stream address (included)
E176 DD2A             (        forth.asm):00537 (4)             std     UTOIN           and >IN as well
E178 39               (        forth.asm):00538 (4)             rts
                      (        forth.asm):00539         
                      (        forth.asm):00540         * Store the HEX representation of the lower nibble of A to Y+.
E179 3404             (        forth.asm):00541 (4+1)   HEX1D   pshs    b
E17B C630             (        forth.asm):00542 (2)             ldb     #'0
E17D 840F             (        forth.asm):00543 (2)             anda    #$0f
E17F 810A             (        forth.asm):00544 (2)             cmpa    #10
E181 2502             (        forth.asm):00545 (3)             bcs     @hex1d1
E183 C637             (        forth.asm):00546 (2)             ldb     #'A-10
E185 103098           (        forth.asm):00547 (4)     @hex1d1 addr    b,a
E188 A7A0             (        forth.asm):00548 (4+1)           sta     ,y+
E18A 3504             (        forth.asm):00549 (4+1)           puls    b
E18C 39               (        forth.asm):00550 (4)             rts
                      (        forth.asm):00551         
E18D 44               (        forth.asm):00552 (1)     ADIV16  lsra
E18E 44               (        forth.asm):00553 (1)             lsra
E18F 44               (        forth.asm):00554 (1)             lsra
E190 44               (        forth.asm):00555 (1)             lsra
E191 39               (        forth.asm):00556 (4)             rts
                      (        forth.asm):00557         
                      (        forth.asm):00558         * Hexdump D to 4 bytes starting at Y.  Upon return, Y will point 1 byte
                      (        forth.asm):00559         * after the last character emitted. D is preserved.
E192 3406             (        forth.asm):00560 (4+2)   HDMP4   pshs    d
E194 8DF7             (        forth.asm):00561 (6)             bsr     ADIV16
E196 8DE1             (        forth.asm):00562 (6)             bsr     HEX1D
E198 A6E4             (        forth.asm):00563 (4+0)           lda     ,s
E19A 8DDD             (        forth.asm):00564 (6)             bsr     HEX1D
E19C A661             (        forth.asm):00565 (4+1)           lda     1,s
E19E 8DED             (        forth.asm):00566 (6)             bsr     ADIV16
E1A0 8DD7             (        forth.asm):00567 (6)             bsr     HEX1D
E1A2 A661             (        forth.asm):00568 (4+1)           lda     1,s
E1A4 8DD3             (        forth.asm):00569 (6)             bsr     HEX1D
E1A6 3506             (        forth.asm):00570 (4+2)           puls    d
E1A8 6FA4             (        forth.asm):00571 (6+0)           clr     ,y
E1AA 39               (        forth.asm):00572 (4)             rts
                      (        forth.asm):00573         
E1AB 3406             (        forth.asm):00574 (4+2)   HDMP2   pshs    d
E1AD 8DDE             (        forth.asm):00575 (6)             bsr     ADIV16
E1AF 8DC8             (        forth.asm):00576 (6)             bsr     HEX1D
E1B1 A6E4             (        forth.asm):00577 (4+0)           lda     ,s
E1B3 8DC4             (        forth.asm):00578 (6)             bsr     HEX1D
E1B5 3506             (        forth.asm):00579 (4+2)           puls    d
E1B7 6FA4             (        forth.asm):00580 (6+0)           clr     ,y
E1B9 39               (        forth.asm):00581 (4)             rts
                      (        forth.asm):00582         
                      (        forth.asm):00583                 IFNE    HVNMI
                      (        forth.asm):00584         * Add string pointed to by X starting at the address stored in Y.
E1BA 3402             (        forth.asm):00585 (4+1)   ADDS    pshs    a
E1BC A680             (        forth.asm):00586 (4+1)   @adds1  lda     ,x+
E1BE A7A0             (        forth.asm):00587 (4+1)           sta     ,y+
E1C0 26FA             (        forth.asm):00588 (3)             bne     @adds1
E1C2 3502             (        forth.asm):00589 (4+1)           puls    a
E1C4 39               (        forth.asm):00590 (4)             rts
                      (        forth.asm):00591         
E1C5 8DF3             (        forth.asm):00592 (6)     NMI2DM  bsr     ADDS
E1C7 313F             (        forth.asm):00593 (4+1)           leay    -1,y            Backward over NUL
E1C9 20E0             (        forth.asm):00594 (3)             bra     HDMP2
                      (        forth.asm):00595         
E1CB 8DED             (        forth.asm):00596 (6)     NMI4DM  bsr     ADDS
E1CD 313F             (        forth.asm):00597 (4+1)           leay    -1,y            Backward over NUL
E1CF 20C1             (        forth.asm):00598 (3)             bra     HDMP4
                      (        forth.asm):00599         
E1D1 8E044C           (        forth.asm):00600 (3)     NMIDML  ldx     #TBUFF
E1D4 BDE2EA           (        forth.asm):00601 (7)             jsr     PUTS
E1D7 7EE2F7           (        forth.asm):00602 (3)             jmp     PUTCR
                      (        forth.asm):00603         
                      (        forth.asm):00604         * All registers are stacked in native mode.
E1DA B6D800           (        forth.asm):00605 (4)     NMIHDL  lda     ACIACTL
E1DD 3402             (        forth.asm):00606 (4+1)           pshs    a
E1DF 964F             (        forth.asm):00607 (3)             lda     XMITOK
E1E1 3402             (        forth.asm):00608 (4+1)           pshs    a
E1E3 8601             (        forth.asm):00609 (2)             lda     #1
E1E5 974F             (        forth.asm):00610 (3)             sta     XMITOK
                      (        forth.asm):00611         * Stack structure at this point
                      (        forth.asm):00612         * 0     saved XMITOK: 1 byte
                      (        forth.asm):00613         * 1     saved ACIA status register: 1 byte
                      (        forth.asm):00614         * 2     CC
                      (        forth.asm):00615         * 3     D
                      (        forth.asm):00616         * 5     W
                      (        forth.asm):00617         * 7     DP
                      (        forth.asm):00618         * 8     X
                      (        forth.asm):00619         * 10    Y
                      (        forth.asm):00620         * 12    U
                      (        forth.asm):00621         * 14    PC
E1E7 BDE2F7           (        forth.asm):00622 (7)             jsr     PUTCR
                      (        forth.asm):00623         
                      (        forth.asm):00624         * First line: CC, D, W, DP, X, Y, U, PC, S
E1EA 108E044C         (        forth.asm):00625 (4)             ldy     #TBUFF
E1EE 8EE21D           (        forth.asm):00626 (3)             ldx     #CCREGM
E1F1 A662             (        forth.asm):00627 (4+1)           lda     2,s             CC in the system stack
E1F3 8DD0             (        forth.asm):00628 (6)             bsr     NMI2DM
                      (        forth.asm):00629         
E1F5 EC63             (        forth.asm):00630 (5+1)           ldd     3,s             D in the system stack
E1F7 8DD2             (        forth.asm):00631 (6)             bsr     NMI4DM
                      (        forth.asm):00632         
E1F9 EC65             (        forth.asm):00633 (5+1)           ldd     5,s             W in the system stack
E1FB 8DCE             (        forth.asm):00634 (6)             bsr     NMI4DM
                      (        forth.asm):00635         
E1FD A667             (        forth.asm):00636 (4+1)           lda     7,s             DP in the system stack
E1FF 8DC4             (        forth.asm):00637 (6)             bsr     NMI2DM
                      (        forth.asm):00638         
E201 EC68             (        forth.asm):00639 (5+1)           ldd     8,s             X in the system stack
E203 8DC6             (        forth.asm):00640 (6)             bsr     NMI4DM
                      (        forth.asm):00641         
E205 EC6A             (        forth.asm):00642 (5+1)           ldd     10,s            Y in the system stack
E207 8DC2             (        forth.asm):00643 (6)             bsr     NMI4DM
                      (        forth.asm):00644         
E209 EC6C             (        forth.asm):00645 (5+1)           ldd     12,s            U in the system stack
E20B 8DBE             (        forth.asm):00646 (6)             bsr     NMI4DM
                      (        forth.asm):00647         
E20D EC6E             (        forth.asm):00648 (5+1)           ldd     14,s            PC in the system stack
E20F 8DBA             (        forth.asm):00649 (6)             bsr     NMI4DM
                      (        forth.asm):00650         
E211 33E810           (        forth.asm):00651 (4+1)           leau    16,s            S in the system stack
E214 1F30             (        forth.asm):00652 (4)             tfr     u,d
E216 8DB3             (        forth.asm):00653 (6)             bsr     NMI4DM
                      (        forth.asm):00654         
E218 8DB7             (        forth.asm):00655 (6)             bsr     NMIDML
                      (        forth.asm):00656         
                      (        forth.asm):00657                 IFNE    HVNMI2
                      (        forth.asm):00658         * Second line: ACIST, XMTOK, SBASE, SBENQ, SBDEQ, SBCNT, SBDROPC
                      (        forth.asm):00659                 ldy     #TBUFF
                      (        forth.asm):00660                 ldx     #ACISTM
                      (        forth.asm):00661                 lda     1,s             ACIA status register in the system stack
                      (        forth.asm):00662                 bsr     NMI2DM
                      (        forth.asm):00663         
                      (        forth.asm):00664                 lda     ,s              XMITOK in the system stack
                      (        forth.asm):00665                 bsr     NMI2DM
                      (        forth.asm):00666         
                      (        forth.asm):00667                 ldd     #SERBUF         SERBUF address
                      (        forth.asm):00668                 bsr     NMI4DM
                      (        forth.asm):00669         
                      (        forth.asm):00670                 lda     SERBENQ         SERBENQ 8 bit offset
                      (        forth.asm):00671                 bsr     NMI2DM
                      (        forth.asm):00672         
                      (        forth.asm):00673                 lda     SERBDEQ         SERBDEQ 8 bit offset
                      (        forth.asm):00674                 bsr     NMI2DM
                      (        forth.asm):00675         
                      (        forth.asm):00676                 lda     SERBCNT
                      (        forth.asm):00677                 bsr     NMI2DM
                      (        forth.asm):00678         
                      (        forth.asm):00679                 ldd     SBDROPC         Number of bytes dropped because SERBUF was full
                      (        forth.asm):00680                 bsr     NMI4DM
                      (        forth.asm):00681         
                      (        forth.asm):00682                 bsr     NMIDML
                      (        forth.asm):00683                 ENDC                    HVNMI2
                      (        forth.asm):00684         
E21A 3262             (        forth.asm):00685 (4+1)           leas    2,s             System stack cleanup
E21C 3B               (        forth.asm):00686 (17+?)          rti
                      (        forth.asm):00687         
E21D 43432000         (        forth.asm):00688         CCREGM  fcn     'CC '
E221 20442000         (        forth.asm):00689         DREGM   fcn     ' D '
E225 20572000         (        forth.asm):00690         WREGM   fcn     ' W '
E229 2044502000       (        forth.asm):00691         DPREGM  fcn     ' DP '
E22E 20582000         (        forth.asm):00692         XREGM   fcn     ' X '
E232 20592000         (        forth.asm):00693         YREGM   fcn     ' Y '
E236 20552000         (        forth.asm):00694         UREGM   fcn     ' U '
E23A 2050432000       (        forth.asm):00695         PCREGM  fcn     ' PC '
E23F 20532000         (        forth.asm):00696         SREGM   fcn     ' S '
                      (        forth.asm):00697                 IFNE    HVNMI2
E243                  (        forth.asm):00698         ACISTM  fcn     'AS '           ACIA status register
E243                  (        forth.asm):00699         XMTOKM  fcn     ' XO '          XMITOK--software flow control (one byte)
E243                  (        forth.asm):00700         SBASEM  fcn     ' SB '          Serial FIFO base address (two bytes)
E243                  (        forth.asm):00701         SBENQM  fcn     ' EN '          FIFO enqueue offset (one byte)
E243                  (        forth.asm):00702         SBSEQM  fcn     ' DE '          FIFO dequeue offset (one byte)
E243                  (        forth.asm):00703         SBCNTM  fcn     ' CN '          FIFO queued byte count (one byte)
E243                  (        forth.asm):00704         SBDRPM  fcn     ' DR '          Number of characters dropped (two bytes)
                      (        forth.asm):00705                 ENDC                    HVNMI2
                      (        forth.asm):00706         
                      (        forth.asm):00707                 ENDC                    HVNMI
                      (        forth.asm):00708         
                      (        forth.asm):00709         * Returns the length of the string pointed to by X (terminator excluded) in W.
E243 3410             (        forth.asm):00710 (4+2)   SLEN    pshs    x
E245 105F             (        forth.asm):00711 (2)             clrw
E247 105C             (        forth.asm):00712 (2)     @slen1  incw
E249 A680             (        forth.asm):00713 (4+1)           lda     ,x+
E24B 26FA             (        forth.asm):00714 (3)             bne     @slen1
E24D 105A             (        forth.asm):00715 (2)             decw
E24F 3510             (        forth.asm):00716 (4+2)           puls    x
E251 39               (        forth.asm):00717 (4)             rts
                      (        forth.asm):00718         
                      (        forth.asm):00719                 include console.asm
                      (      console.asm):00001         * FIRQ interrupt handler. This is entered on RDRF (input available).
E252 3416             (      console.asm):00002 (4+4)   FIRQHDL pshs    x,d
                      (      console.asm):00003                 IFNE    RTCFEAT
                      (      console.asm):00004                 jsr     RTCIHDL         Check for RTC periodic interrupt
                      (      console.asm):00005                 ENDC                    RTCFEAT
E254 B6D800           (      console.asm):00006 (4)             lda     ACIACTL
E257 8580             (      console.asm):00007 (2)             bita    #ACIISVC        Does the ACIA need input service?
E259 2731             (      console.asm):00008 (3)             beq     @nsintr         No. This is not the IRQ source we're looking for
                      (      console.asm):00009                 IFNE    DEBUG
                      (      console.asm):00010                 bita    #ACIRDRF
                      (      console.asm):00011                 beq     @nsintr         ACIA RDRF status bit should be set in all cases
                      (      console.asm):00012                 bita    #ACIOVRN        ACIA data overrun on read?
                      (      console.asm):00013                 beq     @datval         No, incoming data is valid
                      (      console.asm):00014                 ldb     ACIADAT         Clear overrun bit and INTACK
                      (      console.asm):00015                 ldb     #'%             Error indicating character is %
                      (      console.asm):00016                 bra     @chkovf
                      (      console.asm):00017                 ENDC                    DEBUG
                      (      console.asm):00018         * Out of band characters processing.
E25B F6D801           (      console.asm):00019 (4)     @datval ldb     ACIADAT         Incoming data byte to B and INTACK
E25E C103             (      console.asm):00020 (2)             cmpb    #ETX            Control-C?
E260 272D             (      console.asm):00021 (3)             beq     @sigint         Yes
E262 C113             (      console.asm):00022 (2)             cmpb    #XOFF
E264 273C             (      console.asm):00023 (3)             beq     @outngo         Output is being suspended
E266 C111             (      console.asm):00024 (2)             cmpb    #XON
E268 273B             (      console.asm):00025 (3)             beq     @outok          Output is being re-enabled
E26A 964E             (      console.asm):00026 (3)     @chkovf lda     SERBCNT
E26C 810F             (      console.asm):00027 (2)             cmpa    #15             At high water level mark?
E26E 2609             (      console.asm):00028 (3)             bne     @sbenq          No, proceed without negating RTS#
E270 3404             (      console.asm):00029 (4+1)           pshs    b
E272 C6D5             (      console.asm):00030 (2)             ldb     #ACIRTS1
E274 F7D800           (      console.asm):00031 (4)             stb     ACIACTL         Negate RTS#
E277 3504             (      console.asm):00032 (4+1)           puls    b
E279 8140             (      console.asm):00033 (2)     @sbenq  cmpa    #SERBSZ
                      (      console.asm):00034                 IFNE    HVNMI2
                      (      console.asm):00035                 beq     @nsdrop         Serial input buffer physically full
                      (      console.asm):00036                 ELSE
E27B 270F             (      console.asm):00037 (3)             beq     @nsintr         Serial input buffer physically full
                      (      console.asm):00038                 ENDC                    HVNMI2
E27D 4C               (      console.asm):00039 (1)             inca
E27E 974E             (      console.asm):00040 (3)             sta     SERBCNT         Update incoming FIFO byte count
E280 8E0150           (      console.asm):00041 (3)             ldx     #SERBUF
E283 964C             (      console.asm):00042 (3)             lda     SERBENQ         Enqueue offset to A
E285 E786             (      console.asm):00043 (4+1)           stb     a,x             Enqueue incoming character
E287 4C               (      console.asm):00044 (1)             inca
E288 843F             (      console.asm):00045 (2)             anda    #SERBSZ-1       Modulo arithmetic
E28A 974C             (      console.asm):00046 (3)             sta     SERBENQ
E28C 3516             (      console.asm):00047 (4+4)   @nsintr puls    d,x
E28E 3B               (      console.asm):00048 (17+?)          rti
                      (      console.asm):00049         * Control-C was recognized.
E28F 3264             (      console.asm):00050 (4+1)   @sigint leas    4,s             Drop D and X
E291 964D             (      console.asm):00051 (3)             lda     SERBDEQ
E293 974C             (      console.asm):00052 (3)             sta     SERBENQ
E295 0F4E             (      console.asm):00053 (5)             clr     SERBCNT         Serial input buffer has been emptied
E297 10AE61           (      console.asm):00054 (6+1)           ldy     1,s             Saved PC from the FIRQ stack
E29A 8EE74F           (      console.asm):00055 (3)             ldx     #ERRHD1
E29D AF61             (      console.asm):00056 (5+1)           stx     1,s             Execution continues in the error handler
E29F C603             (      console.asm):00057 (2)             ldb     #3              with ABORT error code passed through B
E2A1 3B               (      console.asm):00058 (17+?)          rti
E2A2 4F               (      console.asm):00059 (1)     @outngo clra
E2A3 2002             (      console.asm):00060 (3)             bra     @sxmsta
E2A5 8601             (      console.asm):00061 (2)     @outok  lda     #1
E2A7 974F             (      console.asm):00062 (3)     @sxmsta sta     XMITOK          Update XMIT status flag
E2A9 20E1             (      console.asm):00063 (3)             bra     @nsintr
                      (      console.asm):00064                 IFNE    HVNMI2
                      (      console.asm):00065         * Increment character drop count (displayed by NMIHDL).
E2AB                  (      console.asm):00066         @nsdrop ldd     SBDROPC
                      (      console.asm):00067                 incd
                      (      console.asm):00068                 std     SBDROPC
                      (      console.asm):00069                 bra     @nsintr
                      (      console.asm):00070                 ENDC                    HVNMI2
                      (      console.asm):00071         
                      (      console.asm):00072         * We do not have to talk to the ACIA directly, unless SERBCNT is zero,
                      (      console.asm):00073         * in which case we have to lower RTS#, so as to accept incoming characters.
                      (      console.asm):00074         * This can only be called from base level!
E2AB 3416             (      console.asm):00075 (4+4)   GETCH   pshs    x,d
E2AD 0D4E             (      console.asm):00076 (4)     @again  tst     SERBCNT
E2AF 260F             (      console.asm):00077 (3)             bne     @sbdind         We have incoming material
E2B1 C695             (      console.asm):00078 (2)             ldb     #ACIRTS0
E2B3 F7D800           (      console.asm):00079 (4)             stb     ACIACTL         Assert RTS#
E2B6 1CBF             (      console.asm):00080 (2)             andcc   #^FFLAG         Unmask FIRQ
E2B8 8E0001           (      console.asm):00081 (3)             ldx     #1
E2BB BDF83F           (      console.asm):00082 (7)             jsr     MILLIS1         Busy waiting for one millisecond
E2BE 20ED             (      console.asm):00083 (3)             bra     @again          Try again
                      (      console.asm):00084         * Serial buffer data indication.
E2C0 1A40             (      console.asm):00085 (2)     @sbdind orcc    #FFLAG          Mask FIRQ
E2C2 0A4E             (      console.asm):00086 (5)             dec     SERBCNT
E2C4 1CBF             (      console.asm):00087 (2)             andcc   #^FFLAG         Unmask FIRQ
E2C6 8E0150           (      console.asm):00088 (3)             ldx     #SERBUF
E2C9 964D             (      console.asm):00089 (3)             lda     SERBDEQ         Dequeue offset to A
E2CB E686             (      console.asm):00090 (4+1)           ldb     a,x             Buffered input character to B
E2CD E7E4             (      console.asm):00091 (4+0)           stb     ,s              Incoming character to A in the caller's stack
E2CF 4C               (      console.asm):00092 (1)             inca
E2D0 843F             (      console.asm):00093 (2)             anda    #SERBSZ-1       Modulo arithmetic
E2D2 974D             (      console.asm):00094 (3)             sta     SERBDEQ
E2D4 3516             (      console.asm):00095 (4+4)           puls    d,x             Same as it ever was
E2D6 39               (      console.asm):00096 (4)             rts
                      (      console.asm):00097         
E2D7 3404             (      console.asm):00098 (4+1)   PUTCH   pshs    b
E2D9 C602             (      console.asm):00099 (2)             ldb     #ACITDRE
E2DB F5D800           (      console.asm):00100 (4)     @tdrdrn bitb    ACIACTL
E2DE 27FB             (      console.asm):00101 (3)             beq     @tdrdrn         Drain the transmit data register
E2E0 0D4F             (      console.asm):00102 (4)     @wfxon  tst     XMITOK          Software flow control on output
E2E2 27FC             (      console.asm):00103 (3)             beq     @wfxon          Wait for XON
E2E4 B7D801           (      console.asm):00104 (4)             sta     ACIADAT         Transmit data
E2E7 3504             (      console.asm):00105 (4+1)           puls    b
E2E9 39               (      console.asm):00106 (4)             rts
                      (      console.asm):00107         
                      (      console.asm):00108         * Send NUL terminated string pointed to by X to the ACIA.
E2EA 3416             (      console.asm):00109 (4+4)   PUTS    pshs    x,d
E2EC A680             (      console.asm):00110 (4+1)   @puts1  lda     ,x+
E2EE 2704             (      console.asm):00111 (3)             beq     @puts2         NUL marks the end of the string
E2F0 8DE5             (      console.asm):00112 (6)             bsr     PUTCH
E2F2 20F8             (      console.asm):00113 (3)             bra     @puts1
E2F4 3516             (      console.asm):00114 (4+4)   @puts2  puls    d,x
E2F6 39               (      console.asm):00115 (4)             rts
                      (      console.asm):00116         
E2F7 3410             (      console.asm):00117 (4+2)   PUTCR   pshs    x
E2F9 8EFE7D           (      console.asm):00118 (3)             ldx     #CRLFSTR
E2FC 8DEC             (      console.asm):00119 (6)             bsr     PUTS
E2FE 3510             (      console.asm):00120 (4+2)           puls    x
E300 39               (      console.asm):00121 (4)             rts
                      (      console.asm):00122         
E301 8608             (      console.asm):00123 (2)     _BS     lda     #BS
E303 8DD2             (      console.asm):00124 (6)             bsr     PUTCH          Output BS
E305 8620             (      console.asm):00125 (2)             lda     #SP
E307 8DCE             (      console.asm):00126 (6)             bsr     PUTCH          Clear character
E309 8608             (      console.asm):00127 (2)             lda     #BS
E30B 20CA             (      console.asm):00128 (3)             bra     PUTCH          And go back again
                      (      console.asm):00129         
                      (      console.asm):00130         * Receive CR terminated string and store it to X.
                      (      console.asm):00131         * Upon entry B contains the receiving buffer length.
                      (      console.asm):00132         * On exit, B will contain the number of characters
                      (      console.asm):00133         * entered. A and X are preserved.
E30D 5D               (      console.asm):00134 (1)     GETS    tstb
E30E 2601             (      console.asm):00135 (3)             bne     @gets0          If B is zero, do nothing
E310 39               (      console.asm):00136 (4)             rts
E311 3416             (      console.asm):00137 (4+4)   @gets0  pshs    x,d
E313 8D96             (      console.asm):00138 (6)     @gets1  bsr     GETCH
E315 8108             (      console.asm):00139 (2)             cmpa    #BS             Backspace?
E317 260B             (      console.asm):00140 (3)             bne     @gets3
E319 E161             (      console.asm):00141 (4+1)           cmpb    1,s             B upon routine entry
E31B 27F6             (      console.asm):00142 (3)             beq     @gets1          Do not go beyond the beginning of the buffer
E31D 8DE2             (      console.asm):00143 (6)             bsr     _BS
E31F 301F             (      console.asm):00144 (4+1)           leax    -1,x
E321 5C               (      console.asm):00145 (1)             incb
E322 20EF             (      console.asm):00146 (3)             bra     @gets1
E324 8115             (      console.asm):00147 (2)     @gets3  cmpa    #NAK            Kill input?
E326 260B             (      console.asm):00148 (3)             bne     @gets5
                      (      console.asm):00149         * While B != 1,S (initial buffer length), decrement X, increment B.
E328 E161             (      console.asm):00150 (4+1)   @gets4  cmpb    1,s
E32A 27E7             (      console.asm):00151 (3)             beq     @gets1
E32C 8DD3             (      console.asm):00152 (6)             bsr     _BS
E32E 301F             (      console.asm):00153 (4+1)           leax     -1,x
E330 5C               (      console.asm):00154 (1)             incb
E331 20F5             (      console.asm):00155 (3)             bra     @gets4
                      (      console.asm):00156         * Regular input handling: echo input character.
E333 810D             (      console.asm):00157 (2)     @gets5  cmpa    #CR
E335 2707             (      console.asm):00158 (3)             beq     @gets6          Minicom only sends CR
E337 8D9E             (      console.asm):00159 (6)             bsr     PUTCH
E339 A780             (      console.asm):00160 (4+1)           sta     ,x+
E33B 5A               (      console.asm):00161 (1)             decb
E33C 26D5             (      console.asm):00162 (3)             bne     @gets1
E33E 8620             (      console.asm):00163 (2)     @gets6  lda     #SP             End of buffer reached or CR entered
E340 8D95             (      console.asm):00164 (6)             bsr     PUTCH
E342 1F10             (      console.asm):00165 (4)             tfr     x,d
E344 A362             (      console.asm):00166 (5+1)           subd    2,s             Actual number of characters entered
E346 E761             (      console.asm):00167 (4+1)           stb     1,s             Stored to B (through the system stack).         
E348 3516             (      console.asm):00168 (4+4)           puls    d,x
E34A 39               (      console.asm):00169 (4)             rts
                      (      console.asm):00170         
                      (        forth.asm):00720         
E34B BDEBD8           (        forth.asm):00721         FORTHIN RFXT    jsr,NCLR+7      XT for NCLR. Set up the normal stack
E34E BDEBE3           (        forth.asm):00722                 RFXT    jsr,RCLR+7      XT for RCLR. Set up the return stack
                      (        forth.asm):00723         * Relocate '@' code to RAM and set it up as the last dictionary entry (RO).
E351 8EFE11           (        forth.asm):00724 (3)             ldx     #THEEND         Source address for tfm
E354 1086000C         (        forth.asm):00725 (4)             ldw     #(REALEND-THEEND) Byte count for tfm
E358 108E0CC0         (        forth.asm):00726 (4)             ldy     #WDICSPC        Destination address for tfm
E35C 109F06           (        forth.asm):00727 (5)             sty     LSTWAD
E35F 113812           (        forth.asm):00728 (6+?)           tfm     x+,y+
E362 109F08           (        forth.asm):00729 (5)             sty     DICEND
                      (        forth.asm):00730                 IFNE    RELFEAT
                      (        forth.asm):00731                 RFXT    jsr,MONITOR+10  XT for MONITOR (monitor @ in RAM)
                      (        forth.asm):00732                 ENDC                    RELFEAT
E365 BDE9EA           (        forth.asm):00733 (7)             jsr     EMPTYB          Buffer related initializations
                      (        forth.asm):00734                 IFNE    DEBUG
                      (        forth.asm):00735                 clrd
                      (        forth.asm):00736                 std     USTATE          Initial mode is interpretation
                      (        forth.asm):00737                 std     USCR            Clear SCR
                      (        forth.asm):00738                 std     UBLK            Clear BLK
                      (        forth.asm):00739                 std     UTOIN           Clear >IN
                      (        forth.asm):00740                 std     MRUBUFA         Clear most the recently used buffer address
                      (        forth.asm):00741                 sta     SRCID
                      (        forth.asm):00742                 ENDC                    DEBUG
E368 7EFBD4           (        forth.asm):00743                 RFXT    jmp,DECIMAL+10  XT for DECIMAL. Default base is decimal
                      (        forth.asm):00744         
                      (        forth.asm):00745         * Input stream end reached? If ISEADDR is clear, compute it, then compare
                      (        forth.asm):00746         * X to it. EOL condition should be handled if we return from this with ZFLAG
                      (        forth.asm):00747         * set. BSBFADR and ISLEN must have been previously initialized.
E36B 3406             (        forth.asm):00748 (4+2)   ISERCHD pshs    d
E36D DC28             (        forth.asm):00749 (4)             ldd     ISEADDR
E36F 2606             (        forth.asm):00750 (3)             bne     @cont
                      (        forth.asm):00751         * Input stream end address (ISEADDR) needs to be initialized.
E371 DC20             (        forth.asm):00752 (4)             ldd     BSBFADR
E373 D326             (        forth.asm):00753 (4)             addd    ISLEN
E375 DD28             (        forth.asm):00754 (4)             std     ISEADDR
E377 103710           (        forth.asm):00755 (4)     @cont   cmpr    x,d             CC = (D - X)
E37A 3506             (        forth.asm):00756 (4+2)           puls    d
E37C 2501             (        forth.asm):00757 (3)             blo     @inpovf
E37E 39               (        forth.asm):00758 (4)             rts
E37F C612             (        forth.asm):00759 (2)     @inpovf ldb     #18             >IN Out of range
E381 BDE74C           (        forth.asm):00760 (7)             jsr     ERRHDLR
                      (        forth.asm):00761         
                      (        forth.asm):00762         * Scan for the next non-space character pointed to by X.
                      (        forth.asm):00763         * Return with ZFLAG set if an end of input stream condition is recognized,
                      (        forth.asm):00764         * otherwise ZFLAG will be clear. A is altered.
                      (        forth.asm):00765         * Update TOKENSP in all cases.
E384 8DE5             (        forth.asm):00766 (6)     SCNSTOK bsr     ISERCHD         End of input stream reached?
E386 2708             (        forth.asm):00767 (3)             beq     @scstk1         Yes, update TOKENSP and return w. ZFLAG set
E388 A680             (        forth.asm):00768 (4+1)           lda     ,x+
E38A 8120             (        forth.asm):00769 (2)             cmpa    #SP
E38C 27F6             (        forth.asm):00770 (3)             beq     SCNSTOK
E38E 301F             (        forth.asm):00771 (4+1)           leax    -1,x            Backward one character
                      (        forth.asm):00772         * LEA affects ZFLAG but it will remain clear at this point.
E390 1FA8             (        forth.asm):00773 (4)     @scstk1 tfr     cc,a
E392 9F02             (        forth.asm):00774 (4)             stx     TOKENSP         This affects ZFLAG!!!
E394 1F8A             (        forth.asm):00775 (4)             tfr     a,cc
E396 39               (        forth.asm):00776 (4)             rts
                      (        forth.asm):00777         
                      (        forth.asm):00778         * Scan for the next white space character as an end of token marker.
                      (        forth.asm):00779         * Upon entry:
                      (        forth.asm):00780         * - X points to the input stream.
                      (        forth.asm):00781         * Upon return:
                      (        forth.asm):00782         * - X will point to the next space character or one character after the
                      (        forth.asm):00783         *   end of the input stream.
                      (        forth.asm):00784         * - CURTOKL will hold the current token length (returned in B).
                      (        forth.asm):00785         * - TOKENEP will point to the end of the current token.
                      (        forth.asm):00786         * - A is altered.
                      (        forth.asm):00787         * This routine assumes there was an identified start of token in the past,
                      (        forth.asm):00788         * i.e. that X was not pointing to a BL character upon entry.
E397 5F               (        forth.asm):00789 (1)     SCNETOK clrb
E398 8DD1             (        forth.asm):00790 (6)     @scetok bsr     ISERCHD         End of input stream reached?
E39A 270A             (        forth.asm):00791 (3)             beq     @scetk1
E39C A680             (        forth.asm):00792 (4+1)           lda     ,x+
E39E 5C               (        forth.asm):00793 (1)             incb
E39F 8120             (        forth.asm):00794 (2)             cmpa    #SP
E3A1 26F5             (        forth.asm):00795 (3)             bne     @scetok
E3A3 301F             (        forth.asm):00796 (4+1)           leax    -1,x            Keep pointing at the trailing space
E3A5 5A               (        forth.asm):00797 (1)             decb                    Uncount BL as that was the end of token marker
E3A6 1FA8             (        forth.asm):00798 (4)     @scetk1 tfr     cc,a
E3A8 9F04             (        forth.asm):00799 (4)             stx     TOKENEP
E3AA D742             (        forth.asm):00800 (3)             stb     CURTOKL
E3AC 1F8A             (        forth.asm):00801 (4)             tfr     a,cc
E3AE 39               (        forth.asm):00802 (4)             rts
                      (        forth.asm):00803         
E3AF 8DBA             (        forth.asm):00804 (6)     NXTCHAR bsr     ISERCHD
E3B1 2702             (        forth.asm):00805 (3)             beq     @gtnxc1         End of input stream detected. Return with Z set
E3B3 A680             (        forth.asm):00806 (4+1)           lda     ,x+
E3B5 39               (        forth.asm):00807 (4)     @gtnxc1 rts
                      (        forth.asm):00808         
                      (        forth.asm):00809         * Check for numeric literal BASE prefix. On entry X has the input stream
                      (        forth.asm):00810         * pointer. On exit, BASE is altered if needed and the original BASE saved
                      (        forth.asm):00811         * to BASBKUP. If BASE was not changed, BASBKUP will be zero.
                      (        forth.asm):00812         * D is altered, X is updated if a BASE prefix is detected, other registers
                      (        forth.asm):00813         * are untouched.
E3B6 E684             (        forth.asm):00814 (4+0)   CKNBPFX ldb     ,x              B has a potential base prefix character
E3B8 3410             (        forth.asm):00815 (4+2)           pshs    x
E3BA 8EFFE0           (        forth.asm):00816 (3)             ldx     #BASALST        A associative list (A-list) of BASE prefixes
E3BD A681             (        forth.asm):00817 (4+2)   @pflkup lda     ,x++            Potential BASE prefix character to A
E3BF 2707             (        forth.asm):00818 (3)             beq     @nopfix         Reached the end of the A-list. No prefix found
E3C1 103798           (        forth.asm):00819 (4)             cmpr    b,a             Prefix match?
E3C4 2707             (        forth.asm):00820 (3)             beq     @pfxfnd         Yes
E3C6 20F5             (        forth.asm):00821 (3)             bra     @pflkup         Perform base prefix lookup
E3C8 0F36             (        forth.asm):00822 (5)     @nopfix clr     BASBKUP         Nothing to be restored to BASE
E3CA 3510             (        forth.asm):00823 (4+2)           puls    x
E3CC 39               (        forth.asm):00824 (4)             rts
E3CD 9623             (        forth.asm):00825 (3)     @pfxfnd lda     UBASE+1
E3CF 9736             (        forth.asm):00826 (3)             sta     BASBKUP         Back up the current BASE value
E3D1 A61F             (        forth.asm):00827 (4+1)           lda     -1,x            The BASE specified by the prefix
E3D3 9723             (        forth.asm):00828 (3)             sta     UBASE+1         Update BASE
E3D5 3510             (        forth.asm):00829 (4+2)           puls    x
E3D7 3001             (        forth.asm):00830 (4+1)           leax    1,x             Skip the prefix from the input stream
E3D9 0A42             (        forth.asm):00831 (5)             dec     CURTOKL         For the sanity of NUMCVT
E3DB 39               (        forth.asm):00832 (4)             rts
                      (        forth.asm):00833         
                      (        forth.asm):00834         * NUMCVT performs a signed string to number conversion. The input string is
                      (        forth.asm):00835         * acquired from the input stream. Note that this routine always is called
                      (        forth.asm):00836         * after a dictionary lookup (SWDIC), so TOKENEP and CURTOKL are guaranteed
                      (        forth.asm):00837         * to have been set previously. There are two ways out this routine:
                      (        forth.asm):00838         * - redirection to the error handler (Undefined word), or
                      (        forth.asm):00839         * - a converted cell or double cell returned through the data stack.
                      (        forth.asm):00840         *   Upon return, ISDBLF being NZ will indicate a double.
E3DC 0F3F             (        forth.asm):00841 (5)     NUMCVT  clr     ISNEGF          Assume the result is positive
E3DE 0F40             (        forth.asm):00842 (5)             clr     ISDBLF          Assume the result is not a double number
E3E0 9642             (        forth.asm):00843 (3)             lda     CURTOKL
E3E2 9743             (        forth.asm):00844 (3)             sta     SVCTOKL         Save CURTOKL's value upon entry
E3E4 9E02             (        forth.asm):00845 (4)             ldx     TOKENSP
E3E6 8DCE             (        forth.asm):00846 (6)             bsr     CKNBPFX         Check for numeric literal BASE prefix
                      (        forth.asm):00847         * Check for optional minus sign.
E3E8 A684             (        forth.asm):00848 (4+0)           lda     ,x
E3EA 812D             (        forth.asm):00849 (2)             cmpa    #'-
E3EC 2606             (        forth.asm):00850 (3)             bne     @ncini
E3EE 0A42             (        forth.asm):00851 (5)             dec     CURTOKL
E3F0 0C3F             (        forth.asm):00852 (5)             inc     ISNEGF          Remember to negate the result before returning
E3F2 3001             (        forth.asm):00853 (4+1)           leax    1,x             Skip the negativity!
E3F4 1F12             (        forth.asm):00854 (4)     @ncini  tfr     x,y             Backup input stream pointer
E3F6 1FC1             (        forth.asm):00855 (4)             tfr     0,x             Initialize the result
E3F8 BDE7D6           (        forth.asm):00856 (7)             jsr     NPUSH           LSC
E3FB BDE7D6           (        forth.asm):00857 (7)             jsr     NPUSH           MSC
E3FE 1F21             (        forth.asm):00858 (4)             tfr     y,x             Restore the input stream pointer
E400 BDE7D6           (        forth.asm):00859 (7)             jsr     NPUSH           Base scanning address
E403 4F               (        forth.asm):00860 (1)             clra
E404 D642             (        forth.asm):00861 (3)             ldb     CURTOKL
E406 1F01             (        forth.asm):00862 (4)             tfr     d,x             Token length to X (might include a trailing .)
E408 BDE7D6           (        forth.asm):00863 (7)             jsr     NPUSH
E40B BDF4F8           (        forth.asm):00864                 RFXT    jsr,TONUMBR+10
                      (        forth.asm):00865         * At this point, at least four cells are on the data stack.
E40E 3710             (        forth.asm):00866                 UCNPOP
E410 1F10             (        forth.asm):00867 (4)             tfr     x,d             Number of unconverted characters to D
E412 3710             (        forth.asm):00868                 UCNPOP                  Address of the last non convertible char to X
E414 104D             (        forth.asm):00869 (2)             tstd
E416 2717             (        forth.asm):00870 (3)             beq     @ncadj          Not dealing with a double
E418 10830001         (        forth.asm):00871 (4)             cmpd    #1
E41C 2623             (        forth.asm):00872 (3)             bne     @ncnogo         At most one character must be unconverted
E41E A684             (        forth.asm):00873 (4+0)           lda     ,x
E420 812E             (        forth.asm):00874 (2)             cmpa    #'.             Was a double number meant?
E422 261D             (        forth.asm):00875 (3)             bne     @ncnogo         No, we do not have a winner...
E424 0C40             (        forth.asm):00876 (5)             inc     ISDBLF
                      (        forth.asm):00877         * Double cell number adjustments.
E426 0D3F             (        forth.asm):00878 (4)             tst     ISNEGF          Are we dealing with a negative number?
E428 2725             (        forth.asm):00879 (3)             beq     RSBSPFX         No. Restore BASE if needed--the end
E42A BDF40F           (        forth.asm):00880                 RFXT    jsr,DNEG+10     Acknowledge the negativity
E42D 2020             (        forth.asm):00881 (3)             bra     RSBSPFX         Restore BASE if needed--the end
                      (        forth.asm):00882         * Single cell number adjustments.
E42F ECC1             (        forth.asm):00883 (5+2)   @ncadj  ldd     ,u++            MSC Should be zero
E431 2705             (        forth.asm):00884 (3)             beq     @cvsnok
E433 C604             (        forth.asm):00885 (2)             ldb     #4              Out of range error if not
E435 BDE74C           (        forth.asm):00886 (7)             jsr     ERRHDLR         No return
E438 0D3F             (        forth.asm):00887 (4)     @cvsnok tst     ISNEGF          Are we dealing with a negative number?
E43A 2713             (        forth.asm):00888 (3)             beq     RSBSPFX         No. Restore BASE if needed--the end
E43C BDEFEE           (        forth.asm):00889                 RFXT    jsr,NEGATE+9    Acknowledge the negativity
E43F 200E             (        forth.asm):00890 (3)             bra     RSBSPFX         Restore BASE if needed--the end
E441 3344             (        forth.asm):00891 (4+1)   @ncnogo leau    4,u             Drop two cells from the data stack
E443 9643             (        forth.asm):00892 (3)             lda     SVCTOKL
E445 9742             (        forth.asm):00893 (3)             sta     CURTOKL         Restore CURTOKL's original value
E447 9E02             (        forth.asm):00894 (4)             ldx     TOKENSP         Beginning address of the current token
E449 C602             (        forth.asm):00895 (2)             ldb     #2              Undefined (X points to the offending word)
E44B BDE74C           (        forth.asm):00896 (7)             jsr     ERRHDLR         No return
     E44E             (        forth.asm):00897         NUMCVRA equ     *               For symbolic stack dump purposes
E44E 12               (        forth.asm):00898 (1)             nop
                      (        forth.asm):00899         
                      (        forth.asm):00900         * Restore BASE if a numeric literal BASE prefix was detected.
                      (        forth.asm):00901         * X is to be preserved at all cost!
E44F 9636             (        forth.asm):00902 (3)     RSBSPFX lda     BASBKUP
E451 2702             (        forth.asm):00903 (3)             beq     @theend
E453 9723             (        forth.asm):00904 (3)             sta     UBASE+1
E455 39               (        forth.asm):00905 (4)     @theend rts
                      (        forth.asm):00906         
                      (        forth.asm):00907         * Convert number stored in X to a string (depending on BASE value).
                      (        forth.asm):00908         * Output is stored in the global TBUFF buffer. X is preserved.
E456 0F3F             (        forth.asm):00909 (5)     CVNSTR  clr     ISNEGF
E458 1F10             (        forth.asm):00910 (4)             tfr     x,d
E45A 0D41             (        forth.asm):00911 (4)             tst     CVISSGN         Are we to perform a signed conversion?
E45C 2708             (        forth.asm):00912 (3)             beq     @cvnst1
E45E 104D             (        forth.asm):00913 (2)             tstd
E460 2A04             (        forth.asm):00914 (3)             bpl     @cvnst1
E462 0C3F             (        forth.asm):00915 (5)             inc     ISNEGF          Number being converted is negative
E464 1040             (        forth.asm):00916 (2)             negd
E466 1F06             (        forth.asm):00917 (4)     @cvnst1 tfr     d,w
E468 104F             (        forth.asm):00918 (2)             clrd
E46A 108E045F         (        forth.asm):00919 (4)             ldy     #TBUFF+19       Sign + 16 digits + terminator + 1
E46E 6FA2             (        forth.asm):00920 (6+1)           clr     ,-y             End of string marker
E470 119E22           (        forth.asm):00921 (35)    @cvnst2 divq    UBASE           D returns the modulo and W the quotient
E473 8630             (        forth.asm):00922 (2)             lda     #'0
E475 C10A             (        forth.asm):00923 (2)             cmpb    #10
E477 2502             (        forth.asm):00924 (3)             bcs     @cvnst3
                      (        forth.asm):00925         * BASE has letters among its valid numbers.
E479 8637             (        forth.asm):00926 (2)             lda     #'A-10
E47B 103089           (        forth.asm):00927 (4)     @cvnst3 addr    a,b
E47E E7A2             (        forth.asm):00928 (4+1)           stb     ,-y
E480 104F             (        forth.asm):00929 (2)             clrd
E482 105D             (        forth.asm):00930 (2)             tstw
E484 26EA             (        forth.asm):00931 (3)             bne     @cvnst2
E486 C620             (        forth.asm):00932 (2)             ldb     #SP
E488 0D3F             (        forth.asm):00933 (4)             tst     ISNEGF
E48A 2702             (        forth.asm):00934 (3)             beq     @cvnst4
E48C C62D             (        forth.asm):00935 (2)             ldb     #'-
E48E E7A2             (        forth.asm):00936 (4+1)   @cvnst4 stb     ,-y
                      (        forth.asm):00937         * We need to insert leading spaces up to the beginning of the output buffer.
E490 C620             (        forth.asm):00938 (2)             ldb     #SP
E492 108C044C         (        forth.asm):00939 (4)     @cvnst5 cmpy    #TBUFF
E496 2601             (        forth.asm):00940 (3)             bne     @cvnst6
E498 39               (        forth.asm):00941 (4)             rts
E499 E7A2             (        forth.asm):00942 (4+1)   @cvnst6 stb     ,-y
E49B 20F5             (        forth.asm):00943 (3)             bra     @cvnst5
                      (        forth.asm):00944         
                      (        forth.asm):00945         * Search word beginning at address TOKENSP in the dictionary.
                      (        forth.asm):00946         * Upon return Z will be set if the word was not found.
                      (        forth.asm):00947         * Otherwise, Y will point to the code section of the word.
                      (        forth.asm):00948         * CSSNTVE (defined in constants.asm) defines whether the
                      (        forth.asm):00949         * dictionary match is case sensitive or not.
                      (        forth.asm):00950         * Important note: if the word is found TOKENEP will be copied to TOKENSP.
E49D 9E02             (        forth.asm):00951 (4)     SWDIC   ldx     TOKENSP
E49F BDE397           (        forth.asm):00952 (7)             jsr     SCNETOK         B has CURTOKL, update TOKENEP
E4A2 9E08             (        forth.asm):00953 (4)     SWDIC1  ldx     DICEND          Entry point for the ANSI FIND
E4A4 9F1A             (        forth.asm):00954 (4)             stx     VLPRVEP         Last dictionary entry code address + 1
E4A6 9E02             (        forth.asm):00955 (4)             ldx     TOKENSP
E4A8 109E06           (        forth.asm):00956 (5)             ldy     LSTWAD          Latest word header address to Y
E4AB 2606             (        forth.asm):00957 (3)     @swrdc0 bne     @swrdc1
E4AD 1FC2             (        forth.asm):00958 (4)             tfr     0,y             Word not found. Z is set
E4AF 109F0E           (        forth.asm):00959 (5)             sty     PLOAD
E4B2 39               (        forth.asm):00960 (4)             rts
E4B3 A6A4             (        forth.asm):00961 (4+0)   @swrdc1 lda     ,y              Word attribute to A
E4B5 841F             (        forth.asm):00962 (2)             anda    #WRLNMSK        Extract word length
E4B7 3420             (        forth.asm):00963 (4+2)           pshs    y
E4B9 103789           (        forth.asm):00964 (4)             cmpr    a,b             Word length match?
E4BC 2638             (        forth.asm):00965 (3)             bne     @swrdc3         No, point to next dictionary entry
E4BE 3121             (        forth.asm):00966 (4+1)           leay    1,y
E4C0 A6A0             (        forth.asm):00967 (4+1)   @swrdc2 lda     ,y+
                      (        forth.asm):00968                 IFNE    CSSNTVE
                      (        forth.asm):00969                 cmpa    ,x+             Case sensitive dictionary
                      (        forth.asm):00970                 ELSE
E4C2 1F9E             (        forth.asm):00971 (4)             tfr     b,e             Case insensitive search (preferred)
E4C4 E680             (        forth.asm):00972 (4+1)           ldb     ,x+
E4C6 C161             (        forth.asm):00973 (2)             cmpb    #'a
E4C8 2506             (        forth.asm):00974 (3)             bcs     @nochg
E4CA C17B             (        forth.asm):00975 (2)             cmpb    #'z+1
E4CC 2402             (        forth.asm):00976 (3)             bcc     @nochg
E4CE C020             (        forth.asm):00977 (2)             subb    #'a-'A
E4D0 103789           (        forth.asm):00978 (4)     @nochg  cmpr    a,b
E4D3 1FE9             (        forth.asm):00979 (4)             tfr     e,b
                      (        forth.asm):00980                 ENDC                    CSSNTVE
E4D5 261F             (        forth.asm):00981 (3)             bne     @swrdc3
E4D7 5A               (        forth.asm):00982 (1)             decb
E4D8 26E6             (        forth.asm):00983 (3)             bne     @swrdc2
                      (        forth.asm):00984         * Word match!
E4DA 3510             (        forth.asm):00985 (4+2)           puls    x
E4DC E684             (        forth.asm):00986 (4+0)           ldb     ,x              Word attribute byte to B
E4DE 4F               (        forth.asm):00987 (1)             clra
E4DF 58               (        forth.asm):00988 (1)             lslb                    Bit 7 to CFLAG
E4E0 49               (        forth.asm):00989 (1)             rola                    CFLAG to A
E4E1 9744             (        forth.asm):00990 (3)             sta     IMDFLG          Set IMMEDIATE flag
E4E3 4F               (        forth.asm):00991 (1)             clra
E4E4 58               (        forth.asm):00992 (1)             lslb                    Bit 6 to CFLAG
E4E5 49               (        forth.asm):00993 (1)             rola                    CFLAG to A
E4E6 9745             (        forth.asm):00994 (3)             sta     DEFFLG          Set DEFINE (compilation only) flag
E4E8 9E04             (        forth.asm):00995 (4)             ldx     TOKENEP
E4EA 9F02             (        forth.asm):00996 (4)             stx     TOKENSP
                      (        forth.asm):00997                 IFNE    RELFEAT
                      (        forth.asm):00998                 leay    3,y             Skip back pointer and checksum. Return XT
                      (        forth.asm):00999                 ELSE
E4EC 3122             (        forth.asm):01000 (4+1)           leay    2,y             Skip back pointer. Return XT
                      (        forth.asm):01001                 ENDC                    RELFEAT
E4EE DC1A             (        forth.asm):01002 (4)             ldd     VLPRVEP
E4F0 103220           (        forth.asm):01003 (4)             subr    y,d
E4F3 DD0E             (        forth.asm):01004 (4)             std     PLOAD
E4F5 39               (        forth.asm):01005 (4)             rts                     NZ since there is no zero payload word
E4F6 3520             (        forth.asm):01006 (4+2)   @swrdc3 puls    y
E4F8 109F1A           (        forth.asm):01007 (5)             sty     VLPRVEP
E4FB 4F               (        forth.asm):01008 (1)             clra
E4FC E6A0             (        forth.asm):01009 (4+1)           ldb     ,y+
E4FE C41F             (        forth.asm):01010 (2)             andb    #WRLNMSK
E500 31AB             (        forth.asm):01011 (4+2)           leay    d,y
E502 9E02             (        forth.asm):01012 (4)             ldx     TOKENSP
E504 D642             (        forth.asm):01013 (3)             ldb     CURTOKL
E506 10AEA4           (        forth.asm):01014 (6+0)           ldy     ,y              Point to previous word header
E509 20A0             (        forth.asm):01015 (3)             bra     @swrdc0
                      (        forth.asm):01016         
                      (        forth.asm):01017         * Create new dictionary entry. The word name being created is acquired from
                      (        forth.asm):01018         * the input stream. Warning, this requires a writable dictionary!
                      (        forth.asm):01019         * The new end of the dictionary is returned in Y. W is preserved.
E50B 1038             (        forth.asm):01020 (6)     LOCWRT  pshsw
E50D 9E08             (        forth.asm):01021 (4)             ldx     DICEND
                      (        forth.asm):01022                 IFNE    DEBUG
                      (        forth.asm):01023                 cmpx    #ROMSTRT
                      (        forth.asm):01024                 bcs     @locwr0
                      (        forth.asm):01025                 ldb     #10             Assertion failure (trying to write to ROM!)
                      (        forth.asm):01026                 jsr     ERRHDLR         No return
E50F                  (        forth.asm):01027         LWAFRA  equ     *
E50F                  (        forth.asm):01028         @locwr0
                      (        forth.asm):01029                 ENDC                    DEBUG
E50F 9F0C             (        forth.asm):01030 (4)             stx     BDICEND         Back pointer up
E511 9E06             (        forth.asm):01031 (4)             ldx     LSTWAD
E513 9F0A             (        forth.asm):01032 (4)             stx     BLSTWAD         Back pointer up
E515 BDE86A           (        forth.asm):01033 (7)             jsr     BKIN2PT         Derive X from BLK, >IN
E518 BDE384           (        forth.asm):01034 (7)             jsr     SCNSTOK         Locate token starting address
E51B 2605             (        forth.asm):01035 (3)             bne     @locwr1
E51D C605             (        forth.asm):01036 (2)             ldb     #5              EOIS condition recognized: missing word name
E51F BDE74C           (        forth.asm):01037 (7)             jsr     ERRHDLR         No return
     E522             (        forth.asm):01038         LWMNRA  equ     *               LOCWRT missing word name return address
E522 BDE397           (        forth.asm):01039 (7)     @locwr1 jsr     SCNETOK         X has TOKENEP, B has CURTOKL
E525 109E02           (        forth.asm):01040 (5)             ldy     TOKENSP
E528 103221           (        forth.asm):01041 (4)             subr    y,x
E52B 3410             (        forth.asm):01042 (4+2)           pshs    x               Word length to the system stack
E52D 9E08             (        forth.asm):01043 (4)             ldx     DICEND
E52F A661             (        forth.asm):01044 (4+1)           lda     1,s             Word length LSB in the system stack
E531 8120             (        forth.asm):01045 (2)             cmpa    #1+WRLNMSK      Max word length is 31, 79-STANDARD compliant
E533 2505             (        forth.asm):01046 (3)             blo     @locwr2
E535 C610             (        forth.asm):01047 (2)             ldb     #16             Word name is too long
E537 BDE74C           (        forth.asm):01048 (7)             jsr     ERRHDLR         No return
     E53A             (        forth.asm):01049         WTOOLNG equ     *
E53A A780             (        forth.asm):01050 (4+1)   @locwr2 sta     ,x+             Word length to dictionary
E53C 10A6E1           (        forth.asm):01051 (6+2)           ldw     ,s++            16-bit word length to W
E53F 1E12             (        forth.asm):01052 (5)             exg     x,y             Y points to the dictionary, X has TOKENSP
                      (        forth.asm):01053                 IFNE    CSSNTVE
                      (        forth.asm):01054                 tfm     x+,y+           Word name to dictionary, as is
                      (        forth.asm):01055                 ELSE
E541 1FF9             (        forth.asm):01056 (4)             tfr     f,b             Force dictionary entry to upper case
E543 A680             (        forth.asm):01057 (4+1)   @locwr3 lda     ,x+
E545 8161             (        forth.asm):01058 (2)             cmpa    #'a
E547 2506             (        forth.asm):01059 (3)             bcs     @locwr4
E549 817B             (        forth.asm):01060 (2)             cmpa    #'z+1
E54B 2402             (        forth.asm):01061 (3)             bcc     @locwr4
E54D 8020             (        forth.asm):01062 (2)             suba    #'a-'A          To upper case
E54F A7A0             (        forth.asm):01063 (4+1)   @locwr4 sta     ,y+
E551 5A               (        forth.asm):01064 (1)             decb
E552 26EF             (        forth.asm):01065 (3)             bne     @locwr3
                      (        forth.asm):01066                 ENDC                    CSSNTVE
E554 1F10             (        forth.asm):01067 (4)             tfr     x,d
E556 BDE161           (        forth.asm):01068 (7)             jsr     U2INFRD         Derive >IN from D
E559 9E06             (        forth.asm):01069 (4)             ldx     LSTWAD
E55B AFA1             (        forth.asm):01070 (5+2)           stx     ,y++            Back pointer to dictionary
                      (        forth.asm):01071                 IFNE    RELFEAT
                      (        forth.asm):01072                 clr     ,y+             Initialize the checksum header field
                      (        forth.asm):01073                 ENDC                    RELFEAT
E55D 109F08           (        forth.asm):01074 (5)             sty     DICEND
E560 109F12           (        forth.asm):01075 (5)             sty     RECADDR         Should we resort to recursion later on
E563 1039             (        forth.asm):01076 (6)             pulsw
E565 39               (        forth.asm):01077 (4)             rts
                      (        forth.asm):01078         
                      (        forth.asm):01079         * Compile 'ldx  #X; jsr NPUSH'.
                      (        forth.asm):01080         * DICEND is updated and returned in Y.
E566 109E08           (        forth.asm):01081 (5)     LITER   ldy     DICEND
E569 868E             (        forth.asm):01082 (2)             lda     #LDXOPC         LDX immediate
E56B 8D10             (        forth.asm):01083 (6)             bsr     VARCON2
E56D 86BD             (        forth.asm):01084 (2)             lda     #JSROPC         JSR extended
E56F 109F14           (        forth.asm):01085 (5)             sty     JSRLAST         JSRLAST points to the latest JSR code emission
E572 8D06             (        forth.asm):01086 (6)             bsr     VARCON1
E574 109F08           (        forth.asm):01087 (5)             sty     DICEND
E577 39               (        forth.asm):01088 (4)             rts
                      (        forth.asm):01089         
                      (        forth.asm):01090         * Compile 'jmp  NPUSH'.
                      (        forth.asm):01091         * Y points to the end of the dictionary on entry and on exit.
E578 867E             (        forth.asm):01092 (2)     VARCON  lda     #JMPOPC         JMP extended
E57A 8EE7D6           (        forth.asm):01093 (3)     VARCON1 ldx     #NPUSH
E57D A7A0             (        forth.asm):01094 (4+1)   VARCON2 sta     ,y+
E57F AFA1             (        forth.asm):01095 (5+2)           stx     ,y++
E581 39               (        forth.asm):01096 (4)             rts
                      (        forth.asm):01097         
                      (        forth.asm):01098         * Used by U<, U>, <, >.
E582 BDE9CB           (        forth.asm):01099 (7)     CMP2    jsr     MIN2PST         At least 2 cells must be stacked up
E585 10AEC4           (        forth.asm):01100 (6+0)   CMP2RA  ldy     ,u
E588 AE42             (        forth.asm):01101 (5+1)           ldx     2,u
E58A 103721           (        forth.asm):01102 (4)             cmpr    y,x
E58D 1FA9             (        forth.asm):01103 (4)             tfr     cc,b
                      (        forth.asm):01104                 IFNE    DEBUG
                      (        forth.asm):01105                 clra
                      (        forth.asm):01106                 std     CCREG
                      (        forth.asm):01107                 ENDC                    DEBUG
E58F 1FC1             (        forth.asm):01108 (4)             tfr     0,x
E591 3344             (        forth.asm):01109 (4+1)           leau    4,u
E593 1F9A             (        forth.asm):01110 (4)             tfr     b,cc
E595 39               (        forth.asm):01111 (4)             rts
                      (        forth.asm):01112         
                      (        forth.asm):01113         * Used by CMOVE, CMOVE>, MOVE.
E596 BDE9D0           (        forth.asm):01114 (7)     ACQMOVP jsr     MIN3PST         At least 3 cells must be stacked up
E599 10A6C4           (        forth.asm):01115 (6+0)   ACQVMRA ldw     ,u              Byte count
E59C 10AE42           (        forth.asm):01116 (6+1)           ldy     2,u             Destination address
E59F AE44             (        forth.asm):01117 (5+1)           ldx     4,u             Source address
E5A1 3346             (        forth.asm):01118 (4+1)           leau    6,u             Drop 3 cells from the user stack
E5A3 39               (        forth.asm):01119 (4)             rts
                      (        forth.asm):01120         
                      (        forth.asm):01121         * FDCTSYM enveadours to match the address stored in Y to a dictionary entry.
                      (        forth.asm):01122         * Upon a successful flexible match, it will output a string in the form of
                      (        forth.asm):01123         * <wordname>+<offset> to the string pointed to by X. <wordname> refers to the
                      (        forth.asm):01124         * code entry point of the matched word. <offset> will be expressed in hex.
                      (        forth.asm):01125         * If a match is found, Z will be clear, otherwise it will be set.
                      (        forth.asm):01126         * A candidate for a word code address must meet the following criteria:
                      (        forth.asm):01127         * ((Y U>= #EBUFS) AND (Y U< #THEEND)) OR ((Y U>= #WDICSPC) AND (Y U< DICEND)).
                      (        forth.asm):01128         * Upon return:
                      (        forth.asm):01129         * - the string pointed to by X will updated with its symbolic match
                      (        forth.asm):01130         *   (NUL terminated), if there is one. X itself might have been altered.
                      (        forth.asm):01131         * - Y should be preserved.
                      (        forth.asm):01132         * EBUFS (EMPTY-BUFFERS) header address is the last word in the dictionary.
                      (        forth.asm):01133                 IFNE    SSDFEAT
E5A4 3430             (        forth.asm):01134 (4+4)   FDCTSYM pshs    y,x     
E5A6 1F21             (        forth.asm):01135 (4)             tfr     y,x             Potential execution token to X
E5A8 8CE9DA           (        forth.asm):01136 (3)             cmpx    #EBUFS
E5AB 2505             (        forth.asm):01137 (3)             blo     @fdstr2 
E5AD 8CFE11           (        forth.asm):01138 (3)             cmpx    #THEEND
E5B0 250D             (        forth.asm):01139 (3)             blo     @fdsmtc
E5B2 8C0CC0           (        forth.asm):01140 (3)     @fdstr2 cmpx    #WDICSPC        Term 2 of the predicate for a valid word addr
E5B5 2504             (        forth.asm):01141 (3)             blo     @fdsnom
E5B7 9C08             (        forth.asm):01142 (4)             cmpx    DICEND
E5B9 2504             (        forth.asm):01143 (3)             blo     @fdsmtc
E5BB 4F               (        forth.asm):01144 (1)     @fdsnom clra                    No match (Z is set)
E5BC 3530             (        forth.asm):01145 (4+4)           puls    x,y
E5BE 39               (        forth.asm):01146 (4)             rts
E5BF 9E06             (        forth.asm):01147 (4)     @fdsmtc ldx     LSTWAD          Potential match. Scan upward from LAST
                      (        forth.asm):01148         * X points to the latest word header, Y has an execution token.
E5C1 109608           (        forth.asm):01149 (5)             ldw     DICEND          W points to the end of the code section
E5C4 3410             (        forth.asm):01150 (4+2)   @fdslop pshs    x               Pointer to the current word header
E5C6 E680             (        forth.asm):01151 (4+1)           ldb     ,x+
E5C8 C41F             (        forth.asm):01152 (2)             andb    #WRLNMSK
E5CA 3A               (        forth.asm):01153 (1)             abx                     Skip word name string
E5CB EC81             (        forth.asm):01154 (5+2)           ldd     ,x++            Backlink to D
                      (        forth.asm):01155                 IFNE    RELFEAT
                      (        forth.asm):01156                 leax    1,x             Skip the checksum
                      (        forth.asm):01157                 ENDC                    RELFEAT
E5CD 103712           (        forth.asm):01158 (4)             cmpr    x,y
E5D0 2530             (        forth.asm):01159 (3)             blo     @fdsnwd
E5D2 103762           (        forth.asm):01160 (4)             cmpr    w,y
E5D5 222B             (        forth.asm):01161 (3)             bhi     @fdsnwd         An equal address is allowed here, in case
                      (        forth.asm):01162         * jsr ERRHDLR is the last instruction for the word under consideration.
                      (        forth.asm):01163         * This happens to be the case for FORGET and LPAR.
                      (        forth.asm):01164         * Y matches the code range for the current word.
E5D7 3510             (        forth.asm):01165 (4+2)           puls    x
E5D9 E680             (        forth.asm):01166 (4+1)           ldb     ,x+
E5DB C41F             (        forth.asm):01167 (2)             andb    #WRLNMSK
E5DD 1F9F             (        forth.asm):01168 (4)             tfr     b,f
E5DF 114F             (        forth.asm):01169 (2)             clre                    W has the matched word length
E5E1 10AEE4           (        forth.asm):01170 (6+0)           ldy     ,s              Y points to the target buffer
E5E4 113812           (        forth.asm):01171 (6+?)           tfm     x+,y+
E5E7 6FA4             (        forth.asm):01172 (6+0)           clr     ,y              We need this in case the offset is zero
                      (        forth.asm):01173         * Offset processing.
                      (        forth.asm):01174                 IFNE    RELFEAT
                      (        forth.asm):01175                 leax    3,x             Skip backlink and checksum
                      (        forth.asm):01176                 ELSE
E5E9 3002             (        forth.asm):01177 (4+1)           leax    2,x             Skip backlink
                      (        forth.asm):01178                 ENDC                    RELFEAT
E5EB EC62             (        forth.asm):01179 (5+1)           ldd     2,s             Execution token to D
E5ED 103210           (        forth.asm):01180 (4)             subr    x,d             Offset between XT and word entry point to D
E5F0 270B             (        forth.asm):01181 (3)             beq     @skoffs         Skip displaying the offset if it is zero
E5F2 3402             (        forth.asm):01182 (4+1)           pshs    a               Preserve the offset's MSB
E5F4 862B             (        forth.asm):01183 (2)             lda     #'+
E5F6 A7A0             (        forth.asm):01184 (4+1)           sta     ,y+
E5F8 3502             (        forth.asm):01185 (4+1)           puls    a               Restore the offset's MSB
E5FA BDE192           (        forth.asm):01186 (7)             jsr     HDMP4           Dump hex incarnation of the offset to Y
E5FD 3530             (        forth.asm):01187 (4+4)   @skoffs puls    x,y
E5FF 1CFB             (        forth.asm):01188 (2)             andcc   #^ZFLAG         Clear ZFLAG
E601 39               (        forth.asm):01189 (4)             rts
                      (        forth.asm):01190         * Point to the next word.
E602 1039             (        forth.asm):01191 (6)     @fdsnwd pulsw                   Retrieve current word header address
E604 104D             (        forth.asm):01192 (2)             tstd
E606 27B3             (        forth.asm):01193 (3)             beq     @fdsnom         Just met the last dictionary entry
E608 1F01             (        forth.asm):01194 (4)             tfr     d,x             Point to previous word header
E60A 10810CC0         (        forth.asm):01195 (4)             cmpw    #WDICSPC        Are we transitioning from RAM to ROM?
E60E 26B4             (        forth.asm):01196 (3)             bne     @fdslop         No singularity
E610 1086FE11         (        forth.asm):01197 (4)             ldw     #THEEND         Won't be able to diagnose the ROM based @...
E614 20AE             (        forth.asm):01198 (3)             bra     @fdslop
                      (        forth.asm):01199         
                      (        forth.asm):01200         * Find the best possible symbolic approximation of Y and store it to the
                      (        forth.asm):01201         * buffer pointed to by X.
                      (        forth.asm):01202         * On entry:
                      (        forth.asm):01203         * - Y has a code address which is to be matched with a symbolic name + offset.
                      (        forth.asm):01204         * - X points to a buffer where the resolution is to be stored.
                      (        forth.asm):01205         * On return:
                      (        forth.asm):01206         * - Y is to be preserved.
                      (        forth.asm):01207         * - the output buffer will be updated with the best symbolic match (NUL term'd).
E616 3430             (        forth.asm):01208 (4+4)   FINDSYM pshs    y,x
E618 8D8A             (        forth.asm):01209 (6)             bsr     FDCTSYM         Search the dictionary first (flexible match)
E61A 261B             (        forth.asm):01210 (3)             bne     @dctmfn         Dictionary match found
E61C 8EE63C           (        forth.asm):01211 (3)             ldx     #NDCTWKS        Search kernel symbols for an exact match
E61F EC81             (        forth.asm):01212 (5+2)   @fsmlop ldd     ,x++
E621 270B             (        forth.asm):01213 (3)             beq     @fsmfnd         End of well known symbols list?
E623 103720           (        forth.asm):01214 (4)             cmpr    y,d
E626 2706             (        forth.asm):01215 (3)             beq     @fsmfnd
                      (        forth.asm):01216         * No well known symbol match. Skip string.
E628 A680             (        forth.asm):01217 (4+1)   @fsmskp lda     ,x+
E62A 26FC             (        forth.asm):01218 (3)             bne     @fsmskp
E62C 20F1             (        forth.asm):01219 (3)             bra     @fsmlop
E62E 10AEE4           (        forth.asm):01220 (6+0)   @fsmfnd ldy     ,s
E631 A680             (        forth.asm):01221 (4+1)   @fsmfn2 lda     ,x+
E633 A7A0             (        forth.asm):01222 (4+1)           sta     ,y+
E635 26FA             (        forth.asm):01223 (3)             bne     @fsmfn2
E637 3262             (        forth.asm):01224 (4+1)   @dctmfn leas    2,s             Drop X from the system stack
E639 3520             (        forth.asm):01225 (4+2)           puls    y
E63B 39               (        forth.asm):01226 (4)             rts
                      (        forth.asm):01227         
                      (        forth.asm):01228         * Non-dictionary well known symbols.
E63C E000             (        forth.asm):01229         NDCTWKS fdb     IODZHDL         Illegal opcode/Division by zero trap handler
E63E 494F445A48444C00 (        forth.asm):01230                 fcn     'IODZHDL'
E646 E7F5             (        forth.asm):01231                 fdb     DPOPRA          Data stack underflow
E648 44504F50524100   (        forth.asm):01232                 fcn     'DPOPRA'
E64F E7E3             (        forth.asm):01233                 fdb     DPSHRA          Data stack overflow
E651 44505348524100   (        forth.asm):01234                 fcn     'DPSHRA'
E658 E82B             (        forth.asm):01235                 fdb     RPOPRA          Return stack underflow
E65A 52504F50524100   (        forth.asm):01236                 fcn     'RPOPRA'
E661 E811             (        forth.asm):01237                 fdb     RPSHRA          Return stack overflow
E663 52505348524100   (        forth.asm):01238                 fcn     'RPSHRA'
E66A E74C             (        forth.asm):01239                 fdb     ERRHDLR         Error handler
E66C 45525248444C5200 (        forth.asm):01240                 fcn     'ERRHDLR'
E674 E9C6             (        forth.asm):01241                 fdb     CKDPTRA         Not enough parameters supplied
E676 434B445054524100 (        forth.asm):01242                 fcn     'CKDPTRA'
E67E E9BB             (        forth.asm):01243                 fdb     CHKNDPT         Check data stack minimum depth
E680 43484B4E44505400 (        forth.asm):01244                 fcn     'CHKNDPT'
E688 E585             (        forth.asm):01245                 fdb     CMP2RA          Missing operand in any of U<, U>, <, >
E68A 434D5032524100   (        forth.asm):01246                 fcn     'CMP2RA'
E691 E599             (        forth.asm):01247                 fdb     ACQVMRA         Three operands missing in any of CMOVE,
                      (        forth.asm):01248         *                               CMOVE>, MOVE
E693 414351564D524100 (        forth.asm):01249                 fcn     'ACQVMRA'
E69B E0BD             (        forth.asm):01250                 fdb     MINTLRA         Main interpreter loop return address
E69D 4D494E544C524100 (        forth.asm):01251                 fcn     'MINTLRA'
E6A5 E44E             (        forth.asm):01252                 fdb     NUMCVRA         ? while converting a string to a number
E6A7 4E554D4356524100 (        forth.asm):01253                 fcn     'NUMCVRA'
E6AF E0D0             (        forth.asm):01254                 fdb     NMCVIRA         Numeric conversion error while interpreting
E6B1 4E4D435649524100 (        forth.asm):01255                 fcn     'NMCVIRA'
E6B9 E139             (        forth.asm):01256                 fdb     NMCVCRA         Numeric conversion error while compiling
E6BB 4E4D435643524100 (        forth.asm):01257                 fcn     'NMCVCRA'
E6C3 E0FB             (        forth.asm):01258                 fdb     INTRPRA         Interpreter RA (after the execution of a word)
E6C5 494E545250524100 (        forth.asm):01259                 fcn     'INTRPRA'
E6CD E127             (        forth.asm):01260                 fdb     COMPLRA         Compiler RA (after the execution of an IMD word)
E6CF 434F4D504C524100 (        forth.asm):01261                 fcn     'COMPLRA'
E6D7 E152             (        forth.asm):01262                 fdb     EMXASXT         Emit "JSR <X>" where X has an execution token
E6D9 454D584153585400 (        forth.asm):01263                 fcn     'EMXASXT'
E6E1 E522             (        forth.asm):01264                 fdb     LWMNRA          Missing word name in LOCWRT
E6E3 4C574D4E524100   (        forth.asm):01265                 fcn     'LWMNRA'
E6EA E952             (        forth.asm):01266                 fdb     CFR1SRA         CF read one sector failed
E6EC 4346523153524100 (        forth.asm):01267                 fcn     'CFR1SRA'
E6F4 E7D6             (        forth.asm):01268                 fdb     NPUSH           Not an error RA but useful to have as a symbol
E6F6 4E5055534800     (        forth.asm):01269                 fcn     'NPUSH'
E6FC E7F6             (        forth.asm):01270                 fdb     RPUSH           Not an error RA but useful to have as a symbol
E6FE 525055534800     (        forth.asm):01271                 fcn     'RPUSH'
E704 E7E4             (        forth.asm):01272                 fdb     NPOP            Not an error RA but useful to have as a symbol
E706 4E504F5000       (        forth.asm):01273                 fcn     'NPOP'
E70B E812             (        forth.asm):01274                 fdb     RPOP            Not an error RA but useful to have as a symbol
E70D 52504F5000       (        forth.asm):01275                 fcn     'RPOP'
E712 E2EA             (        forth.asm):01276                 fdb     PUTS            Not an error RA but useful to have as a symbol
E714 5055545300       (        forth.asm):01277                 fcn     'PUTS'
                      (        forth.asm):01278                 IFNE    DEBUG
                      (        forth.asm):01279                 fdb     LWAFRA          Assertion failure in LOCWRT
                      (        forth.asm):01280                 fcn     'LOCWRTAF'
                      (        forth.asm):01281                 ENDC
E719 0000             (        forth.asm):01282                 fdb     0               End of list
E71B 3F3F3F00         (        forth.asm):01283                 fcn     '???'           Admit we have no clue!
                      (        forth.asm):01284                 ENDC                    SSDFEAT
                      (        forth.asm):01285         
                      (        forth.asm):01286         * Print ' (xxxx/yyyy)' where xxxx is the hex representation for BLK @ and
                      (        forth.asm):01287         * yyyy is the hex representation for >IN @. Y is preserved, X and D are not.
E71F 3420             (        forth.asm):01288 (4+2)   PRBLKIN pshs    y
E721 108E03FC         (        forth.asm):01289 (4)             ldy     #HEXBUF
E725 8620             (        forth.asm):01290 (2)             lda     #SP
E727 A7A0             (        forth.asm):01291 (4+1)           sta     ,y+
E729 8628             (        forth.asm):01292 (2)             lda     #'(
E72B A7A0             (        forth.asm):01293 (4+1)           sta     ,y+
E72D DC2C             (        forth.asm):01294 (4)             ldd     UBLK
E72F BDE192           (        forth.asm):01295 (7)             jsr     HDMP4
E732 862F             (        forth.asm):01296 (2)             lda     #'/
E734 A7A0             (        forth.asm):01297 (4+1)           sta     ,y+
E736 DC2A             (        forth.asm):01298 (4)             ldd     UTOIN
E738 BDE192           (        forth.asm):01299 (7)             jsr     HDMP4
E73B 8629             (        forth.asm):01300 (2)             lda     #')
E73D A7A0             (        forth.asm):01301 (4+1)           sta     ,y+
E73F 6FA4             (        forth.asm):01302 (6+0)           clr     ,y
E741 8E03FC           (        forth.asm):01303 (3)             ldx     #HEXBUF
E744 BDE2EA           (        forth.asm):01304 (7)             jsr     PUTS
E747 3520             (        forth.asm):01305 (4+2)           puls    y
E749 7EE2F7           (        forth.asm):01306 (3)             jmp     PUTCR
                      (        forth.asm):01307         
                      (        forth.asm):01308         * Handle error condition. Error code is in B.
                      (        forth.asm):01309         * If B is 2 (undefined) X points to a string of length CURTOKL that has the
                      (        forth.asm):01310         * offending word.
E74C 10AEE4           (        forth.asm):01311 (6+0)   ERRHDLR ldy     ,s              Invoking return address
                      (        forth.asm):01312         * In case of a trap return, we enter here with Y set to #IODZHDL
E74F BDE2F7           (        forth.asm):01313 (7)     ERRHD1  jsr     PUTCR           GNU Forth does this in its exception handler
E752 C102             (        forth.asm):01314 (2)             cmpb    #2              Undefined symbol?
E754 2618             (        forth.asm):01315 (3)             bne     @perrm          No
E756 8627             (        forth.asm):01316 (2)             lda     #''             Begin quote
E758 BDE2D7           (        forth.asm):01317 (7)             jsr     PUTCH
E75B A680             (        forth.asm):01318 (4+1)   @prtsym lda     ,x+             Display undefined symbol name
E75D BDE2D7           (        forth.asm):01319 (7)             jsr     PUTCH
E760 0A42             (        forth.asm):01320 (5)             dec     CURTOKL
E762 26F7             (        forth.asm):01321 (3)             bne     @prtsym
E764 8627             (        forth.asm):01322 (2)             lda     #''             End quote
E766 BDE2D7           (        forth.asm):01323 (7)             jsr     PUTCH
E769 8620             (        forth.asm):01324 (2)             lda     #SP             BL EMIT
E76B BDE2D7           (        forth.asm):01325 (7)             jsr     PUTCH
E76E 8EFEC2           (        forth.asm):01326 (3)     @perrm  ldx     #ERRMTBL        Regular error handling
E771 5D               (        forth.asm):01327 (1)     @nxterr tstb
E772 2637             (        forth.asm):01328 (3)             bne     @skerrm
E774 BDE2EA           (        forth.asm):01329 (7)             jsr     PUTS            Print error message
E777 8DA6             (        forth.asm):01330 (6)             bsr     PRBLKIN         Print BLK and >IN values (in hex)
E779 1F20             (        forth.asm):01331 (4)     @dmptos tfr     y,d             Dump top of the system stack contents
                      (        forth.asm):01332                 IFNE    SSDFEAT
E77B 3406             (        forth.asm):01333 (4+2)           pshs    d
                      (        forth.asm):01334                 ENDC                    SSDFEAT
E77D 108E03FC         (        forth.asm):01335 (4)             ldy     #HEXBUF
E781 BDE192           (        forth.asm):01336 (7)             jsr     HDMP4
E784 8620             (        forth.asm):01337 (2)             lda     #SP
E786 A7A0             (        forth.asm):01338 (4+1)           sta     ,y+
                      (        forth.asm):01339         * Symbolic stack dumps are configurable. In situations where the dictionary is
                      (        forth.asm):01340         * trashed, they may not be considered desirable. See SSDFEAT in constants.asm.
                      (        forth.asm):01341                 IFNE    SSDFEAT
E788 1F21             (        forth.asm):01342 (4)             tfr     y,x             X has the buffer pointer
E78A 3520             (        forth.asm):01343 (4+2)           puls    y               Restore target symbol table entry
E78C BDE616           (        forth.asm):01344 (7)             jsr     FINDSYM
                      (        forth.asm):01345                 ELSE
                      (        forth.asm):01346                 clr     ,y              No symbolic information is to be printed
                      (        forth.asm):01347                 ENDC                    SSDFEAT
E78F 8E03FC           (        forth.asm):01348 (3)             ldx     #HEXBUF
E792 BDE2EA           (        forth.asm):01349 (7)             jsr     PUTS
E795 BDE2F7           (        forth.asm):01350 (7)             jsr     PUTCR
E798 108CE000         (        forth.asm):01351 (4)             cmpy    #IODZHDL
E79C 2702             (        forth.asm):01352 (3)             beq     @wastrp         We're just back from the trap handler
E79E 3262             (        forth.asm):01353 (4+1)           leas    2,s             Point to the next item on the stack
E7A0 118C8000         (        forth.asm):01354 (4)     @wastrp cmps    #RAMSTRT+RAMSIZE
E7A4 240C             (        forth.asm):01355 (3)             bhs     @errdon         We're done here
E7A6 10AEE4           (        forth.asm):01356 (6+0)           ldy     ,s
E7A9 20CE             (        forth.asm):01357 (3)             bra     @dmptos
E7AB A680             (        forth.asm):01358 (4+1)   @skerrm lda     ,x+             Scan for the next error message
E7AD 26FC             (        forth.asm):01359 (3)             bne     @skerrm
E7AF 5A               (        forth.asm):01360 (1)             decb
E7B0 20BF             (        forth.asm):01361 (3)             bra     @nxterr
E7B2 10CE8000         (        forth.asm):01362 (4)     @errdon lds     #RAMSTRT+RAMSIZE
E7B6 0D25             (        forth.asm):01363 (4)             tst     USTATE+1        We do ignore the upper byte
E7B8 2710             (        forth.asm):01364 (3)             beq     @erdon2         No pointers to restore if we were interpreting
                      (        forth.asm):01365         * We were compiling: clear STATE; restore DICEND and LSTWAD, if not :NONAME.
E7BA 0F25             (        forth.asm):01366 (5)             clr     USTATE+1        Switch back to interpretation mode
E7BC 9E0C             (        forth.asm):01367 (4)             ldx     BDICEND         Restore essential pointers from backups
E7BE 9F08             (        forth.asm):01368 (4)             stx     DICEND          Restore HERE
E7C0 0D34             (        forth.asm):01369 (4)             tst     ANCMPF
E7C2 2604             (        forth.asm):01370 (3)             bne     @clrano
E7C4 9E0A             (        forth.asm):01371 (4)             ldx     BLSTWAD
E7C6 9F06             (        forth.asm):01372 (4)             stx     LSTWAD          Restore LAST
E7C8 0F34             (        forth.asm):01373 (5)     @clrano clr     ANCMPF
E7CA BDEBE3           (        forth.asm):01374         @erdon2 RFXT    jsr,RCLR+7      Clear the return stack and
E7CD BDEBD8           (        forth.asm):01375                 RFXT    jsr,NCLR+7      the control flow stack (moved here from ABORT)
E7D0 BDFBD4           (        forth.asm):01376                 RFXT    jsr,DECIMAL+10  Back to decimal BASE, for one's sanity sake!
E7D3 7EE0B2           (        forth.asm):01377 (3)             jmp     INTERP
                      (        forth.asm):01378         
                      (        forth.asm):01379         * Push X to the data stack (boundary is checked).
E7D6 11830238         (        forth.asm):01380 (4)     NPUSH   cmpu    #NSTTOP
E7DA 2303             (        forth.asm):01381 (3)             bls     @npush1         Anything <= than #NSTTOP indicates overflow
E7DC 3610             (        forth.asm):01382 (4+2)           pshu    x               Aka UCNPUSH
E7DE 39               (        forth.asm):01383 (4)             rts
E7DF 5F               (        forth.asm):01384 (1)     @npush1 clrb                    Data stack overflow
E7E0 BDE74C           (        forth.asm):01385 (7)             jsr     ERRHDLR         No return
     E7E3             (        forth.asm):01386         DPSHRA  equ     *
E7E3 12               (        forth.asm):01387 (1)             nop
                      (        forth.asm):01388         
                      (        forth.asm):01389         * Pull X from the data stack (boundary is checked).
                      (        forth.asm):01390         * D, W and Y are preserved.
E7E4 118302F8         (        forth.asm):01391 (4)     NPOP    cmpu    #NSTBOT
E7E8 2406             (        forth.asm):01392 (3)             bhs     @npop1          Anything >= than #NSTBOT indicates underflow
E7EA 3710             (        forth.asm):01393 (4+2)           pulu    x
E7EC 1037C1           (        forth.asm):01394 (4)             cmpr    0,x             Update CC based on the outcome
E7EF 39               (        forth.asm):01395 (4)             rts
E7F0 C601             (        forth.asm):01396 (2)     @npop1  ldb     #1              Data stack underflow
E7F2 BDE74C           (        forth.asm):01397 (7)             jsr     ERRHDLR         No return
     E7F5             (        forth.asm):01398         DPOPRA  equ     *
E7F5 12               (        forth.asm):01399 (1)             nop
                      (        forth.asm):01400         
                      (        forth.asm):01401         * Push X to the return stack (boundary is checked).
E7F6 9637             (        forth.asm):01402 (3)     RPUSH   lda     RDEPTH          RDEPTH is expressed in cells
E7F8 8140             (        forth.asm):01403 (2)             cmpa    #RSTKSZ/2       But RSTKZ is expressed in bytes
E7FA 2710             (        forth.asm):01404 (3)             beq     @rpush1
E7FC 4C               (        forth.asm):01405 (1)             inca
E7FD 9737             (        forth.asm):01406 (3)             sta     RDEPTH
E7FF 1F27             (        forth.asm):01407 (4)             tfr     y,v
E801 109E00           (        forth.asm):01408 (5)             ldy     RSP
E804 AFA3             (        forth.asm):01409 (5+2)           stx     ,--y
E806 109F00           (        forth.asm):01410 (5)             sty     RSP
E809 1F72             (        forth.asm):01411 (4)             tfr     v,y
E80B 39               (        forth.asm):01412 (4)             rts
E80C C607             (        forth.asm):01413 (2)     @rpush1 ldb     #7              Return stack overflow
E80E BDE74C           (        forth.asm):01414 (7)             jsr     ERRHDLR         No return
     E811             (        forth.asm):01415         RPSHRA  equ     *
E811 12               (        forth.asm):01416 (1)             nop                     Meant to insulate RPUSH errors from RPOP EP
                      (        forth.asm):01417         
                      (        forth.asm):01418         * Pull X from the return stack (boundary is checked).
E812 9637             (        forth.asm):01419 (3)     RPOP    lda     RDEPTH          RDEPTH is expressed in cells
E814 2710             (        forth.asm):01420 (3)             beq     @rpop1
E816 4A               (        forth.asm):01421 (1)             deca
E817 9737             (        forth.asm):01422 (3)             sta     RDEPTH
E819 1F27             (        forth.asm):01423 (4)             tfr     y,v
E81B 109E00           (        forth.asm):01424 (5)             ldy     RSP
E81E AEA1             (        forth.asm):01425 (5+2)           ldx     ,y++
E820 109F00           (        forth.asm):01426 (5)             sty     RSP
E823 1F72             (        forth.asm):01427 (4)             tfr     v,y
E825 39               (        forth.asm):01428 (4)             rts
E826 C608             (        forth.asm):01429 (2)     @rpop1  ldb     #8              Return stack underflow
E828 BDE74C           (        forth.asm):01430 (7)             jsr     ERRHDLR         No return
     E82B             (        forth.asm):01431         RPOPRA  equ     *
                      (        forth.asm):01432         
E82B 0D35             (        forth.asm):01433 (4)     BALCHK  tst     BALNCD
E82D 2601             (        forth.asm):01434 (3)             bne     BALERR
E82F 39               (        forth.asm):01435 (4)             rts
E830 C609             (        forth.asm):01436 (2)     BALERR  ldb     #9              Illegal construct
E832 BDE74C           (        forth.asm):01437 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):01438         
E835 3410             (        forth.asm):01439 (4+2)   SAVINP  pshs    x
E837 1FC1             (        forth.asm):01440 (4)             tfr     0,x
E839 0D4A             (        forth.asm):01441 (4)             tst     SRCID
E83B 2702             (        forth.asm):01442 (3)             beq     @pushb
E83D 9E20             (        forth.asm):01443 (4)             ldx     BSBFADR
E83F 8DB5             (        forth.asm):01444 (6)     @pushb  bsr     RPUSH           Push 0 if SRCID is zero else BSBFADR
E841 9E2C             (        forth.asm):01445 (4)             ldx     UBLK
E843 8DB1             (        forth.asm):01446 (6)             bsr     RPUSH           Push BLK on the return stack
E845 9E2A             (        forth.asm):01447 (4)             ldx     UTOIN
E847 8DAD             (        forth.asm):01448 (6)             bsr     RPUSH           Push >IN on the return stack
E849 9E26             (        forth.asm):01449 (4)             ldx     ISLEN
E84B 8DA9             (        forth.asm):01450 (6)             bsr     RPUSH           Push ISLEN on the return stack
E84D 3510             (        forth.asm):01451 (4+2)           puls    x
E84F 39               (        forth.asm):01452 (4)             rts
                      (        forth.asm):01453         
E850 8DC0             (        forth.asm):01454 (6)     RSTINP  bsr     RPOP
E852 9F26             (        forth.asm):01455 (4)             stx     ISLEN           Restore ISLEN from the return stack
E854 8DBC             (        forth.asm):01456 (6)             bsr     RPOP
E856 9F2A             (        forth.asm):01457 (4)             stx     UTOIN           Restore >IN from the return stack
E858 8DB8             (        forth.asm):01458 (6)             bsr     RPOP
E85A 9F2C             (        forth.asm):01459 (4)             stx     UBLK            Restore BLK from the return stack
E85C 8DB4             (        forth.asm):01460 (6)             bsr     RPOP
E85E 0F4A             (        forth.asm):01461 (5)             clr     SRCID
E860 1037C1           (        forth.asm):01462 (4)             cmpr    0,x
E863 2704             (        forth.asm):01463 (3)             beq     @done
E865 9F20             (        forth.asm):01464 (4)             stx     BSBFADR
E867 034A             (        forth.asm):01465 (5)             com     SRCID           Set SRCID to an NZ value
E869 39               (        forth.asm):01466 (4)     @done   rts
                      (        forth.asm):01467         
                      (        forth.asm):01468         * Derive the current input stream pointer from BLK and >IN.
                      (        forth.asm):01469         * The resulting address is returned in X. D is altered.
                      (        forth.asm):01470         * The end of input stream address is re-computed.
                      (        forth.asm):01471         * Both Y and W are preserved.
E86A 3420             (        forth.asm):01472 (4+2)   BKIN2PT pshs    y
E86C 9E2C             (        forth.asm):01473 (4)             ldx     UBLK
E86E 271E             (        forth.asm):01474 (3)             beq     @notblk         Back to the console or a counted string
E870 1038             (        forth.asm):01475 (6)             pshsw
E872 BDE7D6           (        forth.asm):01476 (7)             jsr     NPUSH           Make sure BLK @ is loaded
E875 BDEADB           (        forth.asm):01477                 RFXT    jsr,BLOCK+8     XT for BLOCK
E878 1039             (        forth.asm):01478 (6)             pulsw
E87A 3710             (        forth.asm):01479                 UCNPOP                  Retrieve buffer addr to X
E87C 9F20             (        forth.asm):01480 (4)     @rsolvd stx     BSBFADR         Update base buffer address
E87E 1F12             (        forth.asm):01481 (4)             tfr     x,y
E880 DC26             (        forth.asm):01482 (4)             ldd     ISLEN
E882 31AB             (        forth.asm):01483 (4+2)           leay    d,y
E884 109F28           (        forth.asm):01484 (5)             sty     ISEADDR         Update the end of input stream address
E887 3520             (        forth.asm):01485 (4+2)           puls    y
E889 DC2A             (        forth.asm):01486 (4)             ldd     UTOIN
E88B 308B             (        forth.asm):01487 (4+2)           leax    d,x             Add the current offset. Return the result via X
E88D 39               (        forth.asm):01488 (4)             rts
E88E 8E0378           (        forth.asm):01489 (3)     @notblk ldx     #CMDBUF         Assume we are returning to the console
E891 0D4A             (        forth.asm):01490 (4)             tst     SRCID           Are we running under EVALUATE?
E893 27E7             (        forth.asm):01491 (3)             beq     @rsolvd         No
E895 9E20             (        forth.asm):01492 (4)             ldx     BSBFADR         We are returning to a counted string
E897 20E3             (        forth.asm):01493 (3)             bra     @rsolvd
                      (        forth.asm):01494         
                      (        forth.asm):01495                 include rtc.asm         Experimental MC146818 support
                      (          rtc.asm):00001                 IFNE RTCFEAT
                      (          rtc.asm):00002         
                      (          rtc.asm):00003         * FIRQ handler for the MC146818 RTC.
                      (          rtc.asm):00004         * In this particular context, only D and CC might be altered.
E899                  (          rtc.asm):00005         RTCIHDL tst     RTCAVL          RTC chip detected?
                      (          rtc.asm):00006                 beq     @notick         Nope
                      (          rtc.asm):00007                 lda     #RTOREGC        Read RTCC. INTACK if any interrupt is pending.
                      (          rtc.asm):00008         * Two intructions inlined for RTREGRD in non-preemtible (interrupt) mode.
                      (          rtc.asm):00009                 sta     RTAS
                      (          rtc.asm):00010                 ldb     RTDS
                      (          rtc.asm):00011                 andb    #RTCPF          RTC periodic interrupt pending?
                      (          rtc.asm):00012                 beq     @notick         No, this ain't us ticking
                      (          rtc.asm):00013         * From "The 6309 Book" p. 3-69: "Note that INC does not effect the carry bit."
E899                  (          rtc.asm):00014         @inctks ldd     TIKSLOW
                      (          rtc.asm):00015                 addd    #1
                      (          rtc.asm):00016                 std     TIKSLOW
                      (          rtc.asm):00017                 ldd     TIKSHI
                      (          rtc.asm):00018                 adcd    #0
                      (          rtc.asm):00019                 std     TIKSHI
E899                  (          rtc.asm):00020         @notick rts
                      (          rtc.asm):00021         
                      (          rtc.asm):00022         * Read one byte from an internal's RTC register whose offset is in A upon
                      (          rtc.asm):00023         * routine entry. The register contents is returned in B.
                      (          rtc.asm):00024         * No other register is altered. FIRQ is temporarily disabled.
                      (          rtc.asm):00025         * Can be called from base or interrupt level.
E899                  (          rtc.asm):00026         RTREGRD pshs    cc
                      (          rtc.asm):00027                 orcc    #FFLAG          Mask FIRQ
                      (          rtc.asm):00028                 sta     RTAS            Select target RTC register
                      (          rtc.asm):00029                 ldb     RTDS            Read RTC register contents
                      (          rtc.asm):00030                 puls    cc              Restore previous interrupt handling mode
                      (          rtc.asm):00031                 rts
                      (          rtc.asm):00032         
                      (          rtc.asm):00033         * Write one byte to an internal's RTC register whose offset is in A upon
                      (          rtc.asm):00034         * routine entry. The register byte output value is in B upon entry.
                      (          rtc.asm):00035         * FIRQ is temporarily masked. All regs contents are preserved.
                      (          rtc.asm):00036         * Can be called from base or interrupt level.
E899                  (          rtc.asm):00037         RTREGWR pshs    cc
                      (          rtc.asm):00038                 orcc    #FFLAG          Mask FIRQ
                      (          rtc.asm):00039                 sta     RTAS            Select target RTC register
                      (          rtc.asm):00040                 stb     RTDS            Write RTC register contents
                      (          rtc.asm):00041                 puls    cc              Restore previous interrupt handling mode
                      (          rtc.asm):00042                 rts
                      (          rtc.asm):00043         
                      (          rtc.asm):00044         * Detect if an MC146818 chip is present.
E899                  (          rtc.asm):00045         RTCINIT
                      (          rtc.asm):00046                 IFNE    DEBUG
                      (          rtc.asm):00047                 clrd
                      (          rtc.asm):00048                 std     TIKSHI          Initialize the TICKS double cell
                      (          rtc.asm):00049                 std     TIKSLOW
                      (          rtc.asm):00050                 clr     RTCAVL          Assume chip not present
                      (          rtc.asm):00051                 ENDC
                      (          rtc.asm):00052                 lda     #RTOPRES        Offset to the last NVRAM byte if dev is present
                      (          rtc.asm):00053                 bsr     RTREGRD         Read user memory byte. Value is returned in B   
                      (          rtc.asm):00054                 comb                    One's complement to B
                      (          rtc.asm):00055                 pshs    b
                      (          rtc.asm):00056                 bsr     RTREGWR         Write back one's complement to RTC
                      (          rtc.asm):00057                 bsr     RTREGRD         And read the last NVRAM byte back
                      (          rtc.asm):00058                 puls    a
                      (          rtc.asm):00059                 cmpr    b,a             Match?
                      (          rtc.asm):00060                 beq     @rtdtct         RTC chip detected all right!
                      (          rtc.asm):00061                 rts
                      (          rtc.asm):00062         * MC146818 RTC chip detected.
                      (          rtc.asm):00063         * On power up if register RTCA reads as 0, the SET bit in register RTCB will
                      (          rtc.asm):00064         * prevent any updates to the calendar (date/time). We do preserve the state of
                      (          rtc.asm):00065         * the SET bit, so as to indicate to the application software that the time and
                      (          rtc.asm):00066         * date have yet to be set manually.
E899                  (          rtc.asm):00067         @rtdtct lda     #RTOREGA
                      (          rtc.asm):00068                 ldb     #(RTADV32|RTARS64)
                      (          rtc.asm):00069                 bsr     RTREGWR         Write B to the RTCA register
                      (          rtc.asm):00070                 lda     #RTOREGB
                      (          rtc.asm):00071                 bsr     RTREGRD
                      (          rtc.asm):00072                 andb    #RTBSET         Extract the SET bit
                      (          rtc.asm):00073                 orb     #(RTBPIE|RTBDM|RTB24)
                      (          rtc.asm):00074                 bsr     RTREGWR         Write B to the RTCB register
                      (          rtc.asm):00075                 inc     RTCAVL
                      (          rtc.asm):00076                 ldx     #RTPRESM        Real time clock detected message base address
                      (          rtc.asm):00077                 jmp     PUTS            Out to the console
                      (          rtc.asm):00078         
                      (          rtc.asm):00079                 ENDC                    RTCFEAT
                      (          rtc.asm):00080         
                      (        forth.asm):01496                 include storage.asm     CompactFlash support
                      (      storage.asm):00001         * Wait until the BSY bit is clear in the CF status register.
                      (      storage.asm):00002         * Upon return the BSY bit is guaranteed to be zero. Z will
                      (      storage.asm):00003         * be set in CC. This subroutine should not be called before
                      (      storage.asm):00004         * the CompactFlash presence has been assessed.
E899 B6C007           (      storage.asm):00005 (4)     CFWAIT  lda     CFSTATR
E89C 8580             (      storage.asm):00006 (2)             bita    #CFBSYB
E89E 26F9             (      storage.asm):00007 (3)             bne     CFWAIT
E8A0 39               (      storage.asm):00008 (4)             rts
                      (      storage.asm):00009         
                      (      storage.asm):00010         * Wait until the BSY bit is clear and the RDY bit is set.
E8A1 8DF6             (      storage.asm):00011 (6)     CFRDY   bsr     CFWAIT
E8A3 2703             (      storage.asm):00012 (3)             beq     @cfrdy0         Card not busy, proceed
E8A5 1A04             (      storage.asm):00013 (2)             orcc    #ZFLAG
E8A7 39               (      storage.asm):00014 (4)             rts
E8A8 8E2000           (      storage.asm):00015 (3)     @cfrdy0 ldx     #$2000          Maximum poll count
E8AB 8640             (      storage.asm):00016 (2)             lda     #CFRDYB
E8AD B5C007           (      storage.asm):00017 (4)     @cfrdy1 bita    CFSTATR
E8B0 2604             (      storage.asm):00018 (3)             bne     @cfrdy2         BSY bit is set, continue
E8B2 301F             (      storage.asm):00019 (4+1)           leax    -1,x            Card not ready, decrement poll count
E8B4 26F7             (      storage.asm):00020 (3)             bne     @cfrdy1         and try again
E8B6 39               (      storage.asm):00021 (4)     @cfrdy2 rts                     Return with Z set: card not present
                      (      storage.asm):00022         *                               Return with Z clear: card is ready
                      (      storage.asm):00023         
                      (      storage.asm):00024         * Check for possible error condition.
                      (      storage.asm):00025         * Upon return either Z is set (A is zero) and no error occurred or
                      (      storage.asm):00026         * Z is clear and the CF error register contents is returned in A.
E8B7 8DE0             (      storage.asm):00027 (6)     CFERRCK bsr     CFWAIT
E8B9 B6C007           (      storage.asm):00028 (4)             lda     CFSTATR
E8BC 8401             (      storage.asm):00029 (2)             anda    #CFERRB
E8BE 2703             (      storage.asm):00030 (3)             beq     @cfeck1
E8C0 B6C001           (      storage.asm):00031 (4)             lda     CFERROR         The error register contains error details
E8C3 39               (      storage.asm):00032 (4)     @cfeck1 rts
                      (      storage.asm):00033         
                      (      storage.asm):00034         * Issue CF command. The command code is passed through the B register.
                      (      storage.asm):00035         * Upon return:
                      (      storage.asm):00036         * - Z is set and everything is peachy.
                      (      storage.asm):00037         * - or Z is clear and the CF error register contents will be
                      (      storage.asm):00038         *   returned in A (and mirrored in the global CFERRCD variable).
                      (      storage.asm):00039         * B is preserved.
E8C4 8DDB             (      storage.asm):00040 (6)     CFCMDIS bsr     CFRDY
E8C6 270A             (      storage.asm):00041 (3)             beq     @cfciab         Card not ready, abort
E8C8 D748             (      storage.asm):00042 (3)             stb     CFCMMIR         Update CF command mirror
E8CA F7C007           (      storage.asm):00043 (4)             stb     CFCOMDR         Send command to the CF card
E8CD 8DE8             (      storage.asm):00044 (6)             bsr     CFERRCK
E8CF 9749             (      storage.asm):00045 (3)     @cfcise sta     CFERRCD         CF command issue set error
                      (      storage.asm):00046                 IFNE    DEBUG
                      (      storage.asm):00047                 pshs    a,cc
                      (      storage.asm):00048                 beq     @cfciok
                      (      storage.asm):00049                 lda     #'!
                      (      storage.asm):00050                 jsr     PUTCH
E8D1                  (      storage.asm):00051         @cfcidi lda     CFCMMIR
                      (      storage.asm):00052                 ldx     #TBUFF
                      (      storage.asm):00053                 jsr     HDMP2
                      (      storage.asm):00054                 lda     #'/
                      (      storage.asm):00055                 sta     ,x+
                      (      storage.asm):00056                 lda     CFERRCD
                      (      storage.asm):00057                 jsr     HDMP2
                      (      storage.asm):00058                 ldx     #TBUFF
                      (      storage.asm):00059                 jsr     PUTS
                      (      storage.asm):00060                 jsr     PUTCR
                      (      storage.asm):00061                 bra     @cfcict         CF command issue continued
E8D1                  (      storage.asm):00062         @cfciok lda     #'#
                      (      storage.asm):00063                 jsr     PUTCH
                      (      storage.asm):00064                 bra     @cfcidi         CF command issue data indication
E8D1                  (      storage.asm):00065         @cfcict puls    cc,a
                      (      storage.asm):00066                 ENDC
E8D1 39               (      storage.asm):00067 (4)             rts
E8D2 86FF             (      storage.asm):00068 (2)     @cfciab lda     #$FF            Dummy error code
E8D4 20F9             (      storage.asm):00069 (3)             bra     @cfcise
                      (      storage.asm):00070         
                      (      storage.asm):00071         * Drive 0 select.
E8D6 8DC9             (      storage.asm):00072 (6)     CFDRSEL bsr     CFRDY
E8D8 86E0             (      storage.asm):00073 (2)             lda     #$E0            Drive 0, LBA mode
E8DA B7C006           (      storage.asm):00074 (4)             sta     CFDRHDR
E8DD 20C2             (      storage.asm):00075 (3)             bra     CFRDY
                      (      storage.asm):00076         
                      (      storage.asm):00077         * Analyze the response to the CF "Identify Device" request.
E8DF 9E08             (      storage.asm):00078 (4)     CFANTHS ldx     DICEND
E8E1 308836           (      storage.asm):00079 (4+1)           leax    $36,x           Point to the "Model number" field
E8E4 3410             (      storage.asm):00080 (4+2)           pshs    x
E8E6 118614           (      storage.asm):00081 (3)             lde     #$14            Number of 16 bit words to go through
E8E9 EC84             (      storage.asm):00082 (5+0)   @bytswp ldd     ,x
E8EB 1E98             (      storage.asm):00083 (5)             exg     b,a             Byte swapping
E8ED ED81             (      storage.asm):00084 (5+2)           std     ,x++
E8EF 114A             (      storage.asm):00085 (2)             dece
E8F1 26F6             (      storage.asm):00086 (3)             bne     @bytswp
E8F3 6F84             (      storage.asm):00087 (6+0)           clr     ,x
E8F5 3510             (      storage.asm):00088 (4+2)           puls    x
E8F7 BDE2EA           (      storage.asm):00089 (7)             jsr     PUTS            Decent CF cards indicate the capacity that way
E8FA 7EE2F7           (      storage.asm):00090 (3)             jmp     PUTCR           Up to $10000 blocks is 64 MB!
                      (      storage.asm):00091         
                      (      storage.asm):00092         * Initialize the CompactFlash subsystem.
                      (      storage.asm):00093         * This is run once at boot time. There is no hot plug support here.
E8FD 0F47             (      storage.asm):00094 (5)     CFINIT  clr     CFCARDP         Clear card present,
                      (      storage.asm):00095                 IFEQ    DEBUG
E8FF 8DA0             (      storage.asm):00096 (6)             bsr     CFRDY
                      (      storage.asm):00097                 ELSE
                      (      storage.asm):00098                 jsr     CFRDY
                      (      storage.asm):00099                 ENDC
E901 2730             (      storage.asm):00100 (3)             beq     @cfinab         Card not ready, abort
E903 8DD1             (      storage.asm):00101 (6)             bsr     CFDRSEL         Drive 0 select
E905 8601             (      storage.asm):00102 (2)             lda     #1              Enable 8-bit data transfers
E907 B7C001           (      storage.asm):00103 (4)             sta     CFFEATR
E90A C6EF             (      storage.asm):00104 (2)             ldb     #CFSETFT        Issue a CF "Set Feature" command
                      (      storage.asm):00105                 IFEQ    DEBUG
E90C 8DB6             (      storage.asm):00106 (6)             bsr     CFCMDIS         Not allowed to fail
                      (      storage.asm):00107                 ELSE
                      (      storage.asm):00108                 jsr     CFCMDIS         Not allowed to fail
                      (      storage.asm):00109                 ENDC
E90E 2623             (      storage.asm):00110 (3)             bne     @cfinab         Abort with card present flag clear
E910 8601             (      storage.asm):00111 (2)             lda     #1              Request default PIO mode wo/ IORDY
E912 B7C002           (      storage.asm):00112 (4)             sta     CFSCNTR
E915 8603             (      storage.asm):00113 (2)             lda     #3              ATA-2 "Set Transfer mode"
E917 B7C001           (      storage.asm):00114 (4)             sta     CFFEATR
                      (      storage.asm):00115                 IFEQ    DEBUG
E91A 8DA8             (      storage.asm):00116 (6)             bsr     CFCMDIS         OK to fail
                      (      storage.asm):00117                 ELSE
                      (      storage.asm):00118                 jsr     CFCMDIS         OK to fail
                      (      storage.asm):00119                 ENDC
E91C 8682             (      storage.asm):00120 (2)             lda     #$82            Disable write caching
E91E B7C001           (      storage.asm):00121 (4)             sta     CFFEATR
                      (      storage.asm):00122                 IFEQ    DEBUG
E921 8DA1             (      storage.asm):00123 (6)             bsr     CFCMDIS         B still has #CFSETF. Also OK to fail
                      (      storage.asm):00124                 ELSE
                      (      storage.asm):00125                 jsr     CFCMDIS         B still has #CFSETF. Also OK to fail
                      (      storage.asm):00126                 ENDC
E923 C6EC             (      storage.asm):00127 (2)             ldb     #CFIDDEV        Issue a CF "Identify Device" command
                      (      storage.asm):00128                 IFEQ    DEBUG
E925 8D9D             (      storage.asm):00129 (6)             bsr     CFCMDIS         Not allowed to fail
                      (      storage.asm):00130                 ELSE
                      (      storage.asm):00131                 jsr     CFCMDIS         Not allowed to fail
                      (      storage.asm):00132                 ENDC
E927 260A             (      storage.asm):00133 (3)             bne     @cfinab         Abort with card present flag clear
E929 9E08             (      storage.asm):00134 (4)             ldx     DICEND          Target address is HERE
E92B 8D07             (      storage.asm):00135 (6)             bsr     CF1SRD          Read one sector
E92D 8DB0             (      storage.asm):00136 (6)             bsr     CFANTHS         Analyze this!
E92F 8601             (      storage.asm):00137 (2)             lda     #1
E931 9747             (      storage.asm):00138 (3)             sta     CFCARDP         Set the card present flag
E933 39               (      storage.asm):00139 (4)     @cfinab rts
                      (      storage.asm):00140         
                      (      storage.asm):00141         * Read one sector. The LBA parameters are assumed to have been set previously.
                      (      storage.asm):00142         * On input X points to the receiving (at least 512 bytes long) buffer.
E934 B6C007           (      storage.asm):00143 (4)     CF1SRD  lda     CFSTATR
E937 8508             (      storage.asm):00144 (2)             bita    #CFDRQB         Check for DRQ bit in the CF status register
E939 2712             (      storage.asm):00145 (3)             beq     IOERR
E93B 10860200         (      storage.asm):00146 (4)             ldw     #CFSCSZ         Sector size is 512 bytes
E93F 108EC000         (      storage.asm):00147 (4)             ldy     #CFDATAR        The data source address
E943 3401             (      storage.asm):00148 (4+1)           pshs    cc
E945 1A50             (      storage.asm):00149 (2)             orcc    #(FFLAG|IFLAG)  Disable maskable interrupts
E947 113B21           (      storage.asm):00150 (6+?)           tfm     y,x+
E94A 3501             (      storage.asm):00151 (4+1)           puls    cc              Restore previous interrupt handling mode
E94C 39               (      storage.asm):00152 (4)             rts
E94D C611             (      storage.asm):00153 (2)     IOERR   ldb     #17
E94F BDE74C           (      storage.asm):00154 (7)             jsr     ERRHDLR         No return
E952 12               (      storage.asm):00155 (1)     CFR1SRA nop                     For symbolic stack dump debugging purposes
                      (      storage.asm):00156         
                      (      storage.asm):00157         * Write one sector. The LBA parameters are assumed to have been set previously.
                      (      storage.asm):00158         * On input X points to the sending (at least 512 bytes long) buffer.
E953 B6C007           (      storage.asm):00159 (4)     CF1SWR  lda     CFSTATR
E956 8488             (      storage.asm):00160 (2)             anda    #CFBSYB|CFDRQB
E958 8108             (      storage.asm):00161 (2)             cmpa    #CFDRQB         Check for BSY clear and DRQ set
E95A 26F7             (      storage.asm):00162 (3)             bne     CF1SWR
E95C 10860200         (      storage.asm):00163 (4)             ldw     #CFSCSZ         Sector size is 512 bytes
E960 108EC000         (      storage.asm):00164 (4)             ldy     #CFDATAR        The data destination address
E964 113A12           (      storage.asm):00165 (6+?)           tfm     x+,y            Note: tfm is interruptible!
E967 39               (      storage.asm):00166 (4)             rts
                      (      storage.asm):00167         
                      (      storage.asm):00168         * 1KB Forth block support primitives. Not dictionary code. More like BIOS ops.
                      (      storage.asm):00169         
                      (      storage.asm):00170         * One block IO preamble: select drive and LBA parameters. On input:
                      (      storage.asm):00171         * ,s has the return address
                      (      storage.asm):00172         * 2,s had the return address for the caller
                      (      storage.asm):00173         * 4,s has the target block number
E968 BDE899           (      storage.asm):00174 (7)     CF1BPRE jsr     CFWAIT
E96B BDE8D6           (      storage.asm):00175 (7)             jsr     CFDRSEL         Set drive and head parameters
E96E EC64             (      storage.asm):00176 (5+1)           ldd     4,s
E970 1048             (      storage.asm):00177 (2)             lsld                    Convert block number to sector number
E972 F7C003           (      storage.asm):00178 (4)             stb     CFSNUMR         LBA 7-0
E975 B7C004           (      storage.asm):00179 (4)             sta     CFCLOWR         LBA 15-8
E978 1FA8             (      storage.asm):00180 (4)             tfr     cc,a
E97A 8401             (      storage.asm):00181 (2)             anda    #CFLAG
E97C B7C005           (      storage.asm):00182 (4)             sta     CFCHIGR         LBA 23-16 (carry to cylinder high)
E97F 8602             (      storage.asm):00183 (2)             lda     #2              2 IDE sectors per Forth block
E981 B7C002           (      storage.asm):00184 (4)             sta     CFSCNTR
E984 39               (      storage.asm):00185 (4)             rts
                      (      storage.asm):00186         
                      (      storage.asm):00187         * Read one block from CF device. On input:
                      (      storage.asm):00188         * ,s has the return address
                      (      storage.asm):00189         * 2,s has the target block number
                      (      storage.asm):00190         * 4,s has the buffer base address
                      (      storage.asm):00191         * Upon return, Y will be preserved.
E985 0D47             (      storage.asm):00192 (4)     CF1BKRD tst     CFCARDP
E987 2602             (      storage.asm):00193 (3)             bne     @ctnued
E989 20C2             (      storage.asm):00194 (3)             bra     IOERR           Card not present--CF subsystem not initialized
E98B 1F27             (      storage.asm):00195 (4)     @ctnued tfr     y,v
E98D 8DD9             (      storage.asm):00196 (6)             bsr     CF1BPRE
E98F C620             (      storage.asm):00197 (2)             ldb     #CFRSCTS        Issue a "Read sectors" CF command
E991 BDE8C4           (      storage.asm):00198 (7)             jsr     CFCMDIS
E994 AE64             (      storage.asm):00199 (5+1)           ldx     4,s             Target buffer address to X
E996 8D9C             (      storage.asm):00200 (6)             bsr     CF1SRD          Read the even sector from CF device
E998 BDE899           (      storage.asm):00201 (7)             jsr     CFWAIT          Wait for next sector to become available
E99B 8D97             (      storage.asm):00202 (6)             bsr     CF1SRD          and read the odd sector
E99D 1F72             (      storage.asm):00203 (4)             tfr     v,y
E99F 39               (      storage.asm):00204 (4)             rts
                      (      storage.asm):00205         
                      (      storage.asm):00206         * Write one block to CF device. Upon entry:
                      (      storage.asm):00207         * ,s has the return address
                      (      storage.asm):00208         * 2,s has the target block number
                      (      storage.asm):00209         * 4,s has the buffer base address
                      (      storage.asm):00210         * Upon return, Y will be preserved.
E9A0 0D47             (      storage.asm):00211 (4)     CF1BKWR tst     CFCARDP
E9A2 2602             (      storage.asm):00212 (3)             bne     @ctnued
E9A4 20A7             (      storage.asm):00213 (3)             bra     IOERR           Card not present--CF subsystem not initialized
E9A6 1F27             (      storage.asm):00214 (4)     @ctnued tfr     y,v
E9A8 8DBE             (      storage.asm):00215 (6)             bsr     CF1BPRE
E9AA C630             (      storage.asm):00216 (2)             ldb     #CFWSCTS        Issue a "Write sectors" CF command
E9AC BDE8C4           (      storage.asm):00217 (7)             jsr     CFCMDIS
E9AF AE64             (      storage.asm):00218 (5+1)           ldx     4,s             Source buffer address to X
E9B1 8DA0             (      storage.asm):00219 (6)             bsr     CF1SWR          Write the even sector to CF device
E9B3 BDE899           (      storage.asm):00220 (7)             jsr     CFWAIT          Wait for next sector to become available
E9B6 8D9B             (      storage.asm):00221 (6)             bsr     CF1SWR          and write the odd sector
E9B8 1F72             (      storage.asm):00222 (4)             tfr     v,y
E9BA 39               (      storage.asm):00223 (4)             rts
                      (      storage.asm):00224         
                      (        forth.asm):01497         
                      (        forth.asm):01498         * Check for minimal data stack depth. On input D has the lowest possible stack
                      (        forth.asm):01499         * address that satisfies the needs of the caller.
E9BB 103703           (        forth.asm):01500 (4)     CHKNDPT cmpr    d,u
E9BE 2201             (        forth.asm):01501 (3)             bhi     @stkudf
E9C0 39               (        forth.asm):01502 (4)             rts
E9C1 C601             (        forth.asm):01503 (2)     @stkudf ldb     #1              Data stack underflow
E9C3 BDE74C           (        forth.asm):01504 (7)             jsr     ERRHDLR         No return
     E9C6             (        forth.asm):01505         CKDPTRA equ     *
                      (        forth.asm):01506         
                      (        forth.asm):01507         * Parameter stack depth checking primitives.
E9C6 CC02F620F0       (        forth.asm):01508         MIN1PST MINDREQ 1
                      (        forth.asm):01509         
E9CB CC02F420EB       (        forth.asm):01510         MIN2PST MINDREQ 2
                      (        forth.asm):01511         
E9D0 CC02F220E6       (        forth.asm):01512         MIN3PST MINDREQ 3
                      (        forth.asm):01513         
E9D5 CC02F020E1       (        forth.asm):01514         MIN4PST MINDREQ 4
                      (        forth.asm):01515         
                      (        forth.asm):01516         ******************************************************************************
                      (        forth.asm):01517         * Dictionary begins. Please note that @ has to be the first (in linked list
                      (        forth.asm):01518         * order) word and EMPTY-BUFFERS has to be the last one. In the code below ANSI
                      (        forth.asm):01519         * refers to ANSI-X3.215-1994 Draft 6 proposal (i.e. the free spec).
                      (        forth.asm):01520         
E9DA 0D               (        forth.asm):01521         EBUFS   fcb     13              ANSI (Block ext)
E9DB 454D5054592D4255 (        forth.asm):01522                 fcc     'EMPTY-BUFFERS' ( -- )
     4646455253
E9E8 0000             (        forth.asm):01523                 fdb     0               Last dictionary entry
                      (        forth.asm):01524                 RFCS
E9EA 104F             (        forth.asm):01525 (2)     EMPTYB  clrd                    The following cannot fail so it's OK to clear
E9EC DD1E             (        forth.asm):01526 (4)             std     MRUBUFA         the most recently used buffer address now
E9EE 8E04A0           (        forth.asm):01527 (3)             ldx     #BUF0
E9F1 8D03             (        forth.asm):01528 (6)             bsr     @empt1b
E9F3 8E08B0           (        forth.asm):01529 (3)             ldx     #BUF1
                      (        forth.asm):01530         * Empty the buffer pointed to by X. D is zero upon entering this routine.
E9F6 30890400         (        forth.asm):01531 (4+3)   @empt1b leax    BOTERM,x        Buffer offset to the terminator field
E9FA ED84             (        forth.asm):01532 (5+0)           std     ,x              Clear terminator and flags fields
E9FC 39               (        forth.asm):01533 (4)             rts
                      (        forth.asm):01534         
E9FD 07               (        forth.asm):01535         ALIGND  fcb     7               ANSI Core
E9FE 414C49474E4544   (        forth.asm):01536                 fcc     'ALIGNED'       ( addr -- a-addr )
EA05 E9DA             (        forth.asm):01537                 fdb     EBUFS
                      (        forth.asm):01538                 RFCS
EA07 20BD             (        forth.asm):01539 (3)             bra     MIN1PST         At least one cell must be stacked up
                      (        forth.asm):01540         
                      (        forth.asm):01541         * n2 is the size in address units (bytes) of n1 characters. A NOOP.
EA09 05               (        forth.asm):01542         CHARS   fcb     5               ANSI Core
EA0A 4348415253       (        forth.asm):01543                 fcc     'CHARS'         ( n1 -- n2 )
EA0F E9FD             (        forth.asm):01544                 fdb     ALIGND
                      (        forth.asm):01545                 RFCS
EA11 20B3             (        forth.asm):01546 (3)             bra     MIN1PST         At least one cell must be stacked up
                      (        forth.asm):01547         
EA13 05               (        forth.asm):01548         CELLP   fcb     5               ANSI (Core)
EA14 43454C4C2B       (        forth.asm):01549                 fcc     'CELL+'         ( a-addr1 -- a-addr2 )
EA19 EA09             (        forth.asm):01550                 fdb     CHARS
                      (        forth.asm):01551                 RFCS
EA1B 8DA9             (        forth.asm):01552 (6)             bsr     MIN1PST         We need at least one cell stacked up
EA1D ECC4             (        forth.asm):01553 (5+0)           ldd     ,u
EA1F C30002           (        forth.asm):01554 (3)             addd    #2
EA22 EDC4             (        forth.asm):01555 (5+0)           std     ,u
EA24 39               (        forth.asm):01556 (4)             rts
                      (        forth.asm):01557         
EA25 0C               (        forth.asm):01558         SAVBUF  fcb     12              ANSI (Block)
EA26 534156452D425546 (        forth.asm):01559                 fcc     'SAVE-BUFFERS'  ( -- )
     46455253
EA32 EA13             (        forth.asm):01560                 fdb     CELLP
                      (        forth.asm):01561                 RFCS
EA34 8E04A0           (        forth.asm):01562 (3)             ldx     #BUF0
EA37 8D03             (        forth.asm):01563 (6)             bsr     WBIFDRT
EA39 8E08B0           (        forth.asm):01564 (3)             ldx     #BUF1
                      (        forth.asm):01565         * Write buffer back to mass storage if marked as dirty.
                      (        forth.asm):01566         * The dirty bit is cleared but the buffer contents itself is not.
                      (        forth.asm):01567         * The buffer will continue to be marked as "in use."
                      (        forth.asm):01568         * On input X has has the base buffer address. D, X and Y are all preserved.
EA3C 3426             (        forth.asm):01569 (4+4)   WBIFDRT pshs    y,d
EA3E 3410             (        forth.asm):01570 (4+2)           pshs    x               Base buffer address (arg1 to CF1BKWR)
EA40 8605             (        forth.asm):01571 (2)             lda     #BINUSE|BDIRTY
EA42 A4890401         (        forth.asm):01572 (4+3)           anda    BOFLAGS,x
EA46 8105             (        forth.asm):01573 (2)             cmpa    #BINUSE|BDIRTY
EA48 2617             (        forth.asm):01574 (3)             bne     @alldon         Block not in use or in use but not dirty
EA4A AE890402         (        forth.asm):01575 (5+3)           ldx     BOBLKNO,x
EA4E 3410             (        forth.asm):01576 (4+2)           pshs    x               Block number (arg0 to CF1BKWR)
EA50 BDE9A0           (        forth.asm):01577 (7)             jsr     CF1BKWR         Write data buffer to CF
EA53 3262             (        forth.asm):01578 (4+1)           leas    2,s             Drop one cell from the system stack (blknum)
EA55 AEE4             (        forth.asm):01579 (5+0)           ldx     ,s              Retrieve base buffer address
EA57 30890401         (        forth.asm):01580 (4+3)           leax    BOFLAGS,x
EA5B A684             (        forth.asm):01581 (4+0)           lda     ,x              Acquire the 'flags' field
EA5D 84FB             (        forth.asm):01582 (2)             anda    #^BDIRTY        Clear the dirty bit
EA5F A784             (        forth.asm):01583 (4+0)           sta     ,x              and update the 'flags' field
EA61 3510             (        forth.asm):01584 (4+2)   @alldon puls    x               Restore X
EA63 3526             (        forth.asm):01585 (4+4)           puls    d,y             and D/Y
EA65 39               (        forth.asm):01586 (4)             rts
                      (        forth.asm):01587         
EA66 05               (        forth.asm):01588         FLUSH   fcb     5               ANSI (Block)
EA67 464C555348       (        forth.asm):01589                 fcc     'FLUSH'         ( -- )
EA6C EA25             (        forth.asm):01590                 fdb     SAVBUF
                      (        forth.asm):01591                 RFCS
EA6E 8DC4             (        forth.asm):01592                 RFXT    bsr,SAVBUF+15   XT for SAVE-BUFFERS
EA70 7EE9EA           (        forth.asm):01593                 RFXT    jmp,EBUFS+16    XT for EMPTY-BUFFERS
                      (        forth.asm):01594         
EA73 06               (        forth.asm):01595         UPDATE  fcb     6               ANSI (Block)
EA74 555044415445     (        forth.asm):01596                 fcc     'UPDATE'        ( -- )
EA7A EA66             (        forth.asm):01597                 fdb     FLUSH
                      (        forth.asm):01598                 RFCS
EA7C 9E1E             (        forth.asm):01599 (4)             ldx     MRUBUFA         Most recently used buffer base address
EA7E 270A             (        forth.asm):01600 (3)             beq     @xquiet         All buffers are currently invalidated
EA80 30890401         (        forth.asm):01601 (4+3)           leax    BOFLAGS,x       Buffer 'flags' field's address to X
EA84 A684             (        forth.asm):01602 (4+0)           lda     ,x              Buffer 'flags' field to A
                      (        forth.asm):01603                 IFNE    DEBUG
                      (        forth.asm):01604                 bita    #BINUSE         Is that buffer in use?
                      (        forth.asm):01605                 beq     @ncurbf         No, something's fishy here. Bail out now!
                      (        forth.asm):01606                 ENDC                    DEBUG
EA86 8A04             (        forth.asm):01607 (2)             ora     #BDIRTY
EA88 A784             (        forth.asm):01608 (4+0)           sta     ,x              Set the dirty bit
EA8A 39               (        forth.asm):01609 (4)     @xquiet rts
                      (        forth.asm):01610                 IFNE DEBUG
EA8B                  (        forth.asm):01611         @ncurbf ldb     #15             No current buffer
                      (        forth.asm):01612                 jsr     ERRHDLR         No return
                      (        forth.asm):01613                 ENDC                    DEBUG
                      (        forth.asm):01614         
EA8B 06               (        forth.asm):01615         BUFFER  fcb     6               ANSI (Block)
EA8C 425546464552     (        forth.asm):01616                 fcc     'BUFFER'        ( ublkno -- addr )
EA92 EA73             (        forth.asm):01617                 fdb     UPDATE
                      (        forth.asm):01618                 RFCS
EA94 BDE7E4           (        forth.asm):01619 (7)             jsr     NPOP
EA97 1F12             (        forth.asm):01620 (4)             tfr     x,y             ublkno to Y
                      (        forth.asm):01621         * Block lookup.
EA99 8E04A0           (        forth.asm):01622 (3)             ldx     #BUF0           Base address of the first resident buffer
EA9C C602             (        forth.asm):01623 (2)             ldb     #2              Number of resident buffers
EA9E A6890401         (        forth.asm):01624 (4+3)   @blkup  lda     BOFLAGS,x       Buffer flags to A
EAA2 8501             (        forth.asm):01625 (2)             bita    #BINUSE         Buffer in use?
EAA4 270C             (        forth.asm):01626 (3)             beq     @nxtbuf         No
EAA6 10AC890402       (        forth.asm):01627 (6+3)           cmpy    BOBLKNO,x       Buffer is in use. Block number match?
EAAB 2605             (        forth.asm):01628 (3)             bne     @nxtbuf         No
EAAD 9F1E             (        forth.asm):01629 (4)     @retba  stx     MRUBUFA         Block number match. Mark as the MRU buffer
EAAF 3610             (        forth.asm):01630                 UCNPUSH                 and return its base address via the data stack
EAB1 39               (        forth.asm):01631 (4)             rts
EAB2 30890410         (        forth.asm):01632 (4+3)   @nxtbuf leax    BFDISP,x        Point to the next buffer
EAB6 5A               (        forth.asm):01633 (1)             decb
EAB7 26E5             (        forth.asm):01634 (3)             bne     @blkup
                      (        forth.asm):01635         * The block number in Y is not currently in use. Assign a buffer to it.
EAB9 8E04A0           (        forth.asm):01636 (3)             ldx     #BUF0
EABC 9C1E             (        forth.asm):01637 (4)             cmpx    MRUBUFA         Most recently used buffer address
EABE 2603             (        forth.asm):01638 (3)             bne     @bselct
EAC0 8E08B0           (        forth.asm):01639 (3)             ldx     #BUF1
                      (        forth.asm):01640         * At this point X has the base address of the block we are interested in
                      (        forth.asm):01641         * and Y has the target block number.
EAC3 BDEA3C           (        forth.asm):01642 (7)     @bselct jsr     WBIFDRT         Write back if dirty. X, Y and D are preserved
EAC6 8601             (        forth.asm):01643 (2)             lda     #BINUSE
EAC8 A7890401         (        forth.asm):01644 (4+3)           sta     BOFLAGS,x       Update the buffer's 'flags' field
EACC 10AF890402       (        forth.asm):01645 (6+3)           sty     BOBLKNO,x       and update the 'blknum' field as well
EAD1 20DA             (        forth.asm):01646 (3)             bra     @retba
                      (        forth.asm):01647         
EAD3 05               (        forth.asm):01648         BLOCK   fcb     5               ANSI (Block)
EAD4 424C4F434B       (        forth.asm):01649                 fcc     'BLOCK'         ( ublkno -- addr )
EAD9 EA8B             (        forth.asm):01650                 fdb     BUFFER
                      (        forth.asm):01651                 RFCS
EADB 8DB7             (        forth.asm):01652                 RFXT    bsr,BUFFER+9    XT for BUFFER
                      (        forth.asm):01653         * Upon return Y has has the block number.
EADD 3710             (        forth.asm):01654                 UCNPOP                  Buffer base address to X
EADF 3410             (        forth.asm):01655 (4+2)           pshs    x               Push base buffer address as Arg1 to CF1BKRD
EAE1 A6890401         (        forth.asm):01656 (4+3)           lda     BOFLAGS,x       Retrieve buffer 'flags' field
                      (        forth.asm):01657                 IFNE    DEBUG
                      (        forth.asm):01658                 bita    #BINUSE
                      (        forth.asm):01659                 bne     @blkctd
                      (        forth.asm):01660                 lda     #10             Assertion failed
                      (        forth.asm):01661                 jsr     ERRHDLR         No return
                      (        forth.asm):01662                 ENDC                    DEBUG
EAE5 8402             (        forth.asm):01663 (2)     @blkctd anda    #BMAPPD         Has the block been read yet?
EAE7 2613             (        forth.asm):01664 (3)             bne     @bkmapd         Yes
EAE9 3420             (        forth.asm):01665 (4+2)           pshs    y               No. Push block number as arg0 to CF1BKRD
                      (        forth.asm):01666         * Map in the block from the CF device. System stack structure is as follows:
                      (        forth.asm):01667         * ,s has the target block number.
                      (        forth.asm):01668         * 2,s has the buffer base address.
EAEB BDE985           (        forth.asm):01669 (7)             jsr     CF1BKRD
EAEE 3262             (        forth.asm):01670 (4+1)           leas    2,s             Drop one cell from the system stack
                      (        forth.asm):01671         * Update the buffer's flags field.
EAF0 AEE4             (        forth.asm):01672 (5+0)           ldx     ,s              Base buffer address
EAF2 30890401         (        forth.asm):01673 (4+3)           leax    BOFLAGS,x       Buffer 'flags' field address to X
EAF6 A684             (        forth.asm):01674 (4+0)           lda     ,x              Read buffer 'flags' field
EAF8 8A02             (        forth.asm):01675 (2)             ora     #BMAPPD
EAFA A784             (        forth.asm):01676 (4+0)           sta     ,x              and mark it as read
EAFC 3510             (        forth.asm):01677 (4+2)   @bkmapd puls    x               Buffer base address to X
EAFE 3610             (        forth.asm):01678                 UCNPUSH
EB00 39               (        forth.asm):01679 (4)             rts
                      (        forth.asm):01680         
                      (        forth.asm):01681         * Three different behaviours have been observed here (from console input):
                      (        forth.asm):01682         * Interactive input is: "CR >IN ?<CR>"
                      (        forth.asm):01683         *
                      (        forth.asm):01684         * GNU Forth 0.7.3:
                      (        forth.asm):01685         * REFILL .S CR >IN ? <1> -1 
                      (        forth.asm):01686         * 11  ok
                      (        forth.asm):01687         * VFX Forth 5.11:
                      (        forth.asm):01688         * REFILL .S CR >IN ? 
                      (        forth.asm):01689         * 8  ok-1
                      (        forth.asm):01690         * SwiftForth 3.7.9:
                      (        forth.asm):01691         * REFILL .S CR >IN ?
                      (        forth.asm):01692         * 8  ok
                      (        forth.asm):01693         *
                      (        forth.asm):01694         * I am going for the SwiftForth solution.
EB01 06               (        forth.asm):01695         REFILL  fcb     6               ANSI (Core ext/Block ext)
EB02 524546494C4C     (        forth.asm):01696                 fcc     'REFILL'
EB08 EAD3             (        forth.asm):01697                 fdb     BLOCK
                      (        forth.asm):01698                 RFCS
EB0A 9E2C             (        forth.asm):01699 (4)             ldx     UBLK
EB0C 260B             (        forth.asm):01700 (3)             bne     @nxtblk         We are running from block context
                      (        forth.asm):01701         * Running from the console (user input device) or from an EVALUATE string.
EB0E 0D4A             (        forth.asm):01702 (4)             tst     SRCID           Are we being EVALUATEd?
EB10 10260DBB         (        forth.asm):01703                 RFXT    lbne,FALSE+8    Yes. Return false
EB14 BDE166           (        forth.asm):01704 (7)             jsr     READLN          >IN is cleared
EB17 2008             (        forth.asm):01705 (3)             bra     @rtrue
EB19 3001             (        forth.asm):01706 (4+1)   @nxtblk leax    1,x
EB1B 9F2C             (        forth.asm):01707 (4)             stx     UBLK            Update BLK
EB1D 1FC1             (        forth.asm):01708 (4)             tfr     0,x
EB1F 9F2A             (        forth.asm):01709 (4)             stx     UTOIN           Clear >IN
                      (        forth.asm):01710         * Any possible block number is valid.
EB21 7EF8DB           (        forth.asm):01711         @rtrue  RFXT    jmp,TRUE+7      Return true.
                      (        forth.asm):01712         
EB24 03               (        forth.asm):01713         BLK     fcb     3               ANSI (Block)
EB25 424C4B           (        forth.asm):01714                 fcc     'BLK'
EB28 EB01             (        forth.asm):01715                 fdb     REFILL
                      (        forth.asm):01716                 RFCS
EB2A 8E012C           (        forth.asm):01717 (3)             ldx     #UBLK
EB2D 7EE7D6           (        forth.asm):01718 (3)             jmp     NPUSH
                      (        forth.asm):01719         
EB30 03               (        forth.asm):01720         TOIN    fcb     3               ANSI (Core)
EB31 3E494E           (        forth.asm):01721                 fcc     '>IN'           ( -- a-addr )
EB34 EB24             (        forth.asm):01722                 fdb     BLK
                      (        forth.asm):01723                 RFCS
EB36 8E012A           (        forth.asm):01724 (3)             ldx     #UTOIN
EB39 7EE7D6           (        forth.asm):01725 (3)             jmp     NPUSH
                      (        forth.asm):01726         
EB3C 03               (        forth.asm):01727         SCR     fcb     3               ANSI (Block ext)
EB3D 534352           (        forth.asm):01728                 fcc     'SCR'
EB40 EB30             (        forth.asm):01729                 fdb     TOIN
                      (        forth.asm):01730                 RFCS
EB42 8E012E           (        forth.asm):01731 (3)             ldx     #USCR
EB45 7EE7D6           (        forth.asm):01732 (3)             jmp     NPUSH
                      (        forth.asm):01733         
                      (        forth.asm):01734         * Functionally: : LINE 6 SHIFT SCR @ BLOCK + ;
                      (        forth.asm):01735         * Moved to CompactFlash screen #4.
                      (        forth.asm):01736         
                      (        forth.asm):01737         * Functionally:
                      (        forth.asm):01738         * : INDEX 1+ SWAP DO
                      (        forth.asm):01739         *     CR   I SCR !
                      (        forth.asm):01740         *     0 LINE 64 TYPE
                      (        forth.asm):01741         *   LOOP ;
                      (        forth.asm):01742         * Moved to CompactFlash screen #4.
                      (        forth.asm):01743         
EB48 05               (        forth.asm):01744         TICKS   fcb     5               Non-standard
EB49 5449434B53       (        forth.asm):01745                 fcc     'TICKS'         ( -- tickslow tickshigh )
EB4E EB3C             (        forth.asm):01746                 fdb     SCR
                      (        forth.asm):01747                 RFCS
                      (        forth.asm):01748                 IFNE    RTCFEAT
                      (        forth.asm):01749                 pshs    cc
                      (        forth.asm):01750                 orcc    #FFLAG          Mask FIRQ while reading the double cell
                      (        forth.asm):01751                 ldx     TIKSLOW
                      (        forth.asm):01752                 ldy     TIKSHI
                      (        forth.asm):01753                 puls    cc              Restore the previous interrupt handling mode
                      (        forth.asm):01754                 jsr     NPUSH
                      (        forth.asm):01755                 tfr     y,x
                      (        forth.asm):01756                 ELSE
EB50 1FC1             (        forth.asm):01757 (4)             tfr     0,x
EB52 BDE7D6           (        forth.asm):01758 (7)             jsr     NPUSH
                      (        forth.asm):01759                 ENDC                    RTCFEAT
EB55 7EE7D6           (        forth.asm):01760 (3)             jmp     NPUSH
                      (        forth.asm):01761         
EB58 04               (        forth.asm):01762         RTCFTCH fcb     4               Non-standard
EB59 52544340         (        forth.asm):01763                 fcc     'RTC@'          ( regoff -- byteval )
EB5D EB48             (        forth.asm):01764                 fdb     TICKS
                      (        forth.asm):01765                 RFCS
                      (        forth.asm):01766                 IFNE    RTCFEAT
                      (        forth.asm):01767                 tst     RTCAVL
                      (        forth.asm):01768                 beq     RTNOCON
                      (        forth.asm):01769         * An MC146818 RTC is present. Let's get down to business.
                      (        forth.asm):01770                 jsr     NPOP            REGOFF to X
                      (        forth.asm):01771                 tfr     x,d
                      (        forth.asm):01772                 tfr     b,a
                      (        forth.asm):01773                 jsr     RTREGRD
                      (        forth.asm):01774                 clra                    BYTEVAL to D
                      (        forth.asm):01775                 pshu    d               Unchecked NPUSH of D
                      (        forth.asm):01776                 rts
EB5F                  (        forth.asm):01777         RTNOCON ldb     #17             RTC not detected on bootup -> I/O error
                      (        forth.asm):01778                 jsr     ERRHDLR         No return
                      (        forth.asm):01779                 ELSE
EB5F BDFC70           (        forth.asm):01780                 RFXT    jsr,DROP+7      XT for DROP
EB62 1FC1             (        forth.asm):01781 (4)             tfr     0,x
EB64 7EE7D6           (        forth.asm):01782 (3)             jmp     NPUSH
                      (        forth.asm):01783                 ENDC                    RTCFEAT
                      (        forth.asm):01784         
EB67 04               (        forth.asm):01785         RTCSTOR fcb     4               Non-standard
EB68 52544321         (        forth.asm):01786                 fcc     'RTC!'          ( byteval regoff -- )
EB6C EB58             (        forth.asm):01787                 fdb     RTCFTCH
                      (        forth.asm):01788                 RFCS
                      (        forth.asm):01789                 IFNE    RTCFEAT
                      (        forth.asm):01790                 tst     RTCAVL
                      (        forth.asm):01791                 beq     RTNOCON
                      (        forth.asm):01792                 jsr     MIN2PST         At least two cells need to be stacked up
                      (        forth.asm):01793                 lda     1,u             REGOFF to A
                      (        forth.asm):01794                 ldb     3,u             BYTEVAL to B
                      (        forth.asm):01795                 leau    4,u             Drop two cells from the data stack
                      (        forth.asm):01796                 jmp     RTREGWR
                      (        forth.asm):01797                 ELSE
EB6E 7EF4AD           (        forth.asm):01798                 RFXT    jmp,TWODROP+8   XT for 2 DROP
                      (        forth.asm):01799                 ENDC                    RTCFEAT
                      (        forth.asm):01800         
EB71 04               (        forth.asm):01801         LIST    fcb     4               ANSI (Block ext)
EB72 4C495354         (        forth.asm):01802                 fcc     'LIST'          ( ublkno -- )
EB76 EB67             (        forth.asm):01803                 fdb     RTCSTOR
                      (        forth.asm):01804                 RFCS
EB78 0D47             (        forth.asm):01805 (4)             tst     CFCARDP
EB7A 2605             (        forth.asm):01806 (3)             bne     @cont
EB7C C611             (        forth.asm):01807 (2)             ldb     #17             IO error
EB7E BDE74C           (        forth.asm):01808 (7)             jsr     ERRHDLR         No return
EB81 BDFC61           (        forth.asm):01809         @cont   RFXT    jsr,DUP+6       XT for DUP
EB84 BDEADB           (        forth.asm):01810                 RFXT    jsr,BLOCK+8     XT for BLOCK
                      (        forth.asm):01811         * TOS now has the base buffer address.
EB87 BDE7E4           (        forth.asm):01812 (7)             jsr     NPOP
EB8A 1F12             (        forth.asm):01813 (4)             tfr     x,y             Base buffer address to Y
EB8C BDE7E4           (        forth.asm):01814 (7)             jsr     NPOP            ublkno to X
EB8F 9F2E             (        forth.asm):01815 (4)             stx     USCR            Update SCR's value
EB91 C610             (        forth.asm):01816 (2)             ldb     #16             16 lines to go
EB93 3404             (        forth.asm):01817 (4+1)   @loop   pshs    b
EB95 BDE2F7           (        forth.asm):01818 (7)             jsr     PUTCR
EB98 1F21             (        forth.asm):01819 (4)             tfr     y,x
EB9A BDE7D6           (        forth.asm):01820 (7)             jsr     NPUSH           Start address for TYPE
EB9D 8E0040           (        forth.asm):01821 (3)             ldx     #64
EBA0 BDE7D6           (        forth.asm):01822 (7)             jsr     NPUSH           Byte count for TYPE
EBA3 103012           (        forth.asm):01823 (4)             addr    x,y
EBA6 BDF752           (        forth.asm):01824                 RFXT    jsr,TYPE+7      XT for TYPE
EBA9 3504             (        forth.asm):01825 (4+1)           puls    b
EBAB 5A               (        forth.asm):01826 (1)             decb
EBAC 26E5             (        forth.asm):01827 (3)             bne     @loop
EBAE 39               (        forth.asm):01828 (4)             rts
                      (        forth.asm):01829         
                      (        forth.asm):01830         * This is supposed to align HERE (DICEND), presumably on a cell boundary.
                      (        forth.asm):01831         * We have no such constraint on the 6309.
EBAF 05               (        forth.asm):01832         ALIGN   fcb     5               ANSI Core
EBB0 414C49474E       (        forth.asm):01833                 fcc     'ALIGN'         ( -- )
EBB5 EB71             (        forth.asm):01834                 fdb     LIST
                      (        forth.asm):01835                 RFCS
EBB7 39               (        forth.asm):01836 (4)             rts
                      (        forth.asm):01837         
                      (        forth.asm):01838         * Convert a single cell to a double.
EBB8 03               (        forth.asm):01839         STOD    fcb     3               ANSI Core
EBB9 533E44           (        forth.asm):01840                 fcc     'S>D'           ( n -- d )
EBBC EBAF             (        forth.asm):01841                 fdb     ALIGN
                      (        forth.asm):01842                 RFCS
EBBE BDE7E4           (        forth.asm):01843 (7)             jsr     NPOP            N to X
EBC1 3610             (        forth.asm):01844                 UCNPUSH                 Push back low order cell
EBC3 104F             (        forth.asm):01845 (2)             clrd                    High order cell: default to N >= 0
EBC5 1E01             (        forth.asm):01846 (5)             exg     d,x
EBC7 4D               (        forth.asm):01847 (1)             tsta
EBC8 102AFC0A         (        forth.asm):01848 (5)             lbpl    NPUSH
EBCC 301F             (        forth.asm):01849 (4+1)           leax    -1,x            N is < 0. Sign extension is required. -1 to X
EBCE 7EE7D6           (        forth.asm):01850 (3)             jmp     NPUSH
                      (        forth.asm):01851         
EBD1 04               (        forth.asm):01852         NCLR    fcb     4               Non-standard
EBD2 4E434C52         (        forth.asm):01853                 fcc     'NCLR'          Clear the data (normal) stack
EBD6 EBB8             (        forth.asm):01854                 fdb     STOD
                      (        forth.asm):01855                 RFCS
EBD8 CE02F8           (        forth.asm):01856 (3)             ldu     #NSTBOT
EBDB 39               (        forth.asm):01857 (4)             rts
                      (        forth.asm):01858         
EBDC 04               (        forth.asm):01859         RCLR    fcb     4               Non-standard
EBDD 52434C52         (        forth.asm):01860                 fcc     'RCLR'          Clear the return stack
EBE1 EBD1             (        forth.asm):01861                 fdb     NCLR
                      (        forth.asm):01862                 RFCS
EBE3 8E0378           (        forth.asm):01863 (3)             ldx     #RSTBOT
EBE6 9F00             (        forth.asm):01864 (4)             stx     RSP
EBE8 0F37             (        forth.asm):01865 (5)             clr     RDEPTH
EBEA 39               (        forth.asm):01866 (4)             rts
                      (        forth.asm):01867         
EBEB 05               (        forth.asm):01868         DEPTH   fcb     5               ANSI (Core)
EBEC 4445505448       (        forth.asm):01869                 fcc     'DEPTH'         ( -- +n )
EBF1 EBDC             (        forth.asm):01870                 fdb     RCLR
                      (        forth.asm):01871                 RFCS
EBF3 CC02F8           (        forth.asm):01872 (3)             ldd     #NSTBOT         Bottom data stack address
EBF6 103230           (        forth.asm):01873 (4)             subr    u,d             D has the current value of the data stack ptr
EBF9 1044             (        forth.asm):01874 (2)             lsrd                    divided by 2
EBFB 1F01             (        forth.asm):01875 (4)             tfr     d,x
EBFD 7EE7D6           (        forth.asm):01876 (3)             jmp     NPUSH           X to N
                      (        forth.asm):01877         
EC00 06               (        forth.asm):01878         CREATE  fcb     6               ANSI (Core)
EC01 435245415445     (        forth.asm):01879                 fcc     'CREATE'        Comp: ( "<spaces>name" -- )
EC07 EBEB             (        forth.asm):01880                 fdb     DEPTH           Exec: ( -- a-addr )
                      (        forth.asm):01881                 RFCS
EC09 BDE50B           (        forth.asm):01882 (7)             jsr     LOCWRT          Code entry point returned to Y
EC0C 868E             (        forth.asm):01883 (2)             lda     #LDXOPC         LDX immediate
EC0E A7A0             (        forth.asm):01884 (4+1)           sta     ,y+
EC10 1F21             (        forth.asm):01885 (4)             tfr     y,x
EC12 3008             (        forth.asm):01886 (4+1)           leax    8,x
EC14 AFA1             (        forth.asm):01887 (5+2)           stx     ,y++
EC16 86BD             (        forth.asm):01888 (2)             lda     #JSROPC         JSR extended
EC18 BDE57A           (        forth.asm):01889 (7)             jsr     VARCON1         Compile JSR NPUSH
EC1B 8639             (        forth.asm):01890 (2)             lda     #RTSOPC         RTS inherent
EC1D A7A0             (        forth.asm):01891 (4+1)           sta     ,y+
EC1F 3122             (        forth.asm):01892 (4+1)           leay    2,y             Reserve room for a possible DOES> clause
EC21 109F08           (        forth.asm):01893 (5)     CREAT1  sty     DICEND
EC24 9E0C             (        forth.asm):01894 (4)             ldx     BDICEND         This is set by LOCWRT (was IY)
EC26 9F06             (        forth.asm):01895 (4)             stx     LSTWAD
EC28 39               (        forth.asm):01896 (4)             rts
                      (        forth.asm):01897         
EC29 C5               (        forth.asm):01898         DOES    fcb     $C5             ANSI (Core)
EC2A 444F45533E       (        forth.asm):01899                 fcc     'DOES>'
EC2F EC00             (        forth.asm):01900                 fdb     CREATE
                      (        forth.asm):01901                 RFCS
EC31 8EEC37           (        forth.asm):01902 (3)             ldx     #DOESEX         JSR #DOESEX is compiled (no actual return)
EC34 7EE152           (        forth.asm):01903 (3)             jmp     EMXASXT         Set as action component
                      (        forth.asm):01904         
EC37 9E06             (        forth.asm):01905 (4)     DOESEX  ldx     LSTWAD          Header of the last dictionary entry
EC39 E680             (        forth.asm):01906 (4+1)           ldb     ,x+
EC3B C41F             (        forth.asm):01907 (2)             andb    #WRLNMSK        Extract word length
EC3D 3A               (        forth.asm):01908 (1)             abx
                      (        forth.asm):01909                 IFNE    RELFEAT
                      (        forth.asm):01910                 leax    9,x             2 bytes/backlink, 1/cksum, 6 bytes code offset
                      (        forth.asm):01911                 ELSE
EC3E 3008             (        forth.asm):01912 (4+1)           leax    8,x             2 bytes/backlink, 6 bytes code offset
                      (        forth.asm):01913                 ENDC                    RELFEAT
EC40 A684             (        forth.asm):01914 (4+0)           lda     ,x
EC42 8139             (        forth.asm):01915 (2)             cmpa    #RTSOPC         RTS inherent
EC44 2705             (        forth.asm):01916 (3)             beq     @dosex1
EC46 C60E             (        forth.asm):01917 (2)             ldb     #14             No matching CREATE
EC48 BDE74C           (        forth.asm):01918 (7)             jsr     ERRHDLR         No return
EC4B 867E             (        forth.asm):01919 (2)     @dosex1 lda     #JMPOPC         JMP extended
EC4D A780             (        forth.asm):01920 (4+1)           sta     ,x+             Overwrite RTS opcode
EC4F 3520             (        forth.asm):01921 (4+2)           puls    y
EC51 10AF84           (        forth.asm):01922 (6+0)           sty     ,x
EC54 39               (        forth.asm):01923 (4)             rts
                      (        forth.asm):01924         
EC55 87               (        forth.asm):01925         LITERAL fcb     $87             ANSI (Core)
EC56 4C49544552414C   (        forth.asm):01926                 fcc     'LITERAL'       Comp: ( x -- )
EC5D EC29             (        forth.asm):01927                 fdb     DOES            Exec: ( -- x )
                      (        forth.asm):01928                 RFCS
EC5F BDE7E4           (        forth.asm):01929 (7)             jsr     NPOP
EC62 0D25             (        forth.asm):01930 (4)             tst     USTATE+1
EC64 2601             (        forth.asm):01931 (3)             bne     @comp
EC66 39               (        forth.asm):01932 (4)             rts                     The standard defines no semantics in interp mode
EC67 109E08           (        forth.asm):01933 (5)     @comp   ldy     DICEND
EC6A 868E             (        forth.asm):01934 (2)             lda     #LDXOPC         LDX immediate
EC6C BDE57D           (        forth.asm):01935 (7)             jsr     VARCON2         Compile LDX #X
EC6F 109F08           (        forth.asm):01936 (5)             sty     DICEND          Update HERE
EC72 8EE7D6           (        forth.asm):01937 (3)             ldx     #NPUSH
EC75 7EE152           (        forth.asm):01938 (3)             jmp     EMXASXT         Set NPUSH as action component
                      (        forth.asm):01939         
                      (        forth.asm):01940         * Functionally: : CONSTANT CREATE , DOES> @ ;
                      (        forth.asm):01941         * The following code produces more compact code.
EC78 08               (        forth.asm):01942         CONS    fcb     8               ANSI (Core)
EC79 434F4E5354414E54 (        forth.asm):01943                 fcc     'CONSTANT'      Comp: ( x "<spaces>name" -- )
EC81 EC55             (        forth.asm):01944                 fdb     LITERAL         Exec: ( -- x )
                      (        forth.asm):01945                 RFCS
EC83 BDE7E4           (        forth.asm):01946 (7)             jsr     NPOP
EC86 1F16             (        forth.asm):01947 (4)             tfr     x,w
EC88 BDE50B           (        forth.asm):01948 (7)             jsr     LOCWRT          Create dictionary entry
EC8B 1F61             (        forth.asm):01949 (4)             tfr     w,x
EC8D 868E             (        forth.asm):01950 (2)             lda     #LDXOPC         ldx immediate
EC8F BDE57D           (        forth.asm):01951 (7)             jsr     VARCON2         Compile LDX #CSTVAL
EC92 BDE578           (        forth.asm):01952 (7)             jsr     VARCON          Compile JMP NPUSH
                      (        forth.asm):01953                 IFNE    RELFEAT
                      (        forth.asm):01954                 bsr     CREAT1
                      (        forth.asm):01955                 RFXT    bra,MONITOR+10  XT for MONITOR
                      (        forth.asm):01956                 ELSE
EC95 208A             (        forth.asm):01957 (3)             bra     CREAT1
                      (        forth.asm):01958                 ENDC                    RELFEAT
                      (        forth.asm):01959         
                      (        forth.asm):01960         * Functionally: : VARIABLE CREATE 2 ALLOT ;
                      (        forth.asm):01961         * However we can save three bytes per instance with the following code.
EC97 08               (        forth.asm):01962         VARI    fcb     8               ANSI (Core)
EC98 5641524941424C45 (        forth.asm):01963                 fcc     'VARIABLE'      Comp: ( "<spaces>name" -- )
ECA0 EC78             (        forth.asm):01964                 fdb     CONS            Exec: ( -- a-addr )
                      (        forth.asm):01965                 RFCS
ECA2 BDE50B           (        forth.asm):01966 (7)             jsr     LOCWRT
ECA5 868E             (        forth.asm):01967 (2)             lda     #LDXOPC         ldx immediate
ECA7 A7A0             (        forth.asm):01968 (4+1)           sta     ,y+
ECA9 1F26             (        forth.asm):01969 (4)             tfr     y,w             Preserve Y (HERE)
ECAB 3125             (        forth.asm):01970 (4+1)           leay    5,y             Relative variable address
ECAD 1F21             (        forth.asm):01971 (4)             tfr     y,x
ECAF 1F62             (        forth.asm):01972 (4)             tfr     w,y             Restore Y (HERE)
ECB1 AFA1             (        forth.asm):01973 (5+2)           stx     ,y++            Address field for LDX #VARADDR
ECB3 BDE578           (        forth.asm):01974 (7)             jsr     VARCON          Compile JMP NPUSH
ECB6 3122             (        forth.asm):01975 (4+1)           leay    2,y             2 ALLOT
ECB8 7EEC21           (        forth.asm):01976 (3)             jmp     CREAT1
                      (        forth.asm):01977         
ECBB 09               (        forth.asm):01978         IMMED   fcb     9               ANSI (Core)
ECBC 494D4D4544494154 (        forth.asm):01979                 fcc     'IMMEDIATE'     ( -- )
     45
ECC5 EC97             (        forth.asm):01980                 fdb     VARI
                      (        forth.asm):01981                 RFCS
ECC7 C680             (        forth.asm):01982 (2)             ldb     #IMDFLM
ECC9 9E06             (        forth.asm):01983 (4)     IMMED1  ldx     LSTWAD
ECCB A684             (        forth.asm):01984 (4+0)           lda     ,x
ECCD 103598           (        forth.asm):01985 (4)             orr     b,a
ECD0 A784             (        forth.asm):01986 (4+0)           sta     ,x
ECD2 39               (        forth.asm):01987 (4)             rts
                      (        forth.asm):01988         
ECD3 08               (        forth.asm):01989         RSTRCT  fcb     8               Non-standard (GNU Forth)
ECD4 5245535452494354 (        forth.asm):01990                 fcc     'RESTRICT'      Make word available in compilation mode only
ECDC ECBB             (        forth.asm):01991                 fdb     IMMED
                      (        forth.asm):01992                 RFCS
ECDE C640             (        forth.asm):01993 (2)             ldb     #DEFFLM
ECE0 20E7             (        forth.asm):01994 (3)             bra     IMMED1
                      (        forth.asm):01995         
                      (        forth.asm):01996         * Added for better support of ANSI VALUEs.
ECE2 09               (        forth.asm):01997         UNMON   fcb     9               Non-standard
ECE3 554E4D4F4E49544F (        forth.asm):01998                 fcc     'UNMONITOR'     ( -- )
     52
ECEC ECD3             (        forth.asm):01999                 fdb     RSTRCT
                      (        forth.asm):02000                 RFCS
                      (        forth.asm):02001                 IFNE    RELFEAT
                      (        forth.asm):02002                 clra
                      (        forth.asm):02003                 pshs    a
                      (        forth.asm):02004                 bra     MONIT1
                      (        forth.asm):02005                 ELSE
ECEE 39               (        forth.asm):02006 (4)             rts
                      (        forth.asm):02007                 ENDC                    RELFEAT
                      (        forth.asm):02008         
                      (        forth.asm):02009         * This non-standard word enables checkum monitoring by ICHECK for the
                      (        forth.asm):02010         * last defined word in the dictionary. : words are monitored by default
                      (        forth.asm):02011         * and so are constants. CREATEd words require an explicit invokation of
                      (        forth.asm):02012         * MONITOR if they are to be checked for integrity.
ECEF 07               (        forth.asm):02013         MONITOR fcb     7               Non-standard
ECF0 4D4F4E49544F52   (        forth.asm):02014                 fcc     'MONITOR'       ( -- )
ECF7 ECE2             (        forth.asm):02015                 fdb     UNMON
                      (        forth.asm):02016                 RFCS
                      (        forth.asm):02017                 IFNE    RELFEAT
                      (        forth.asm):02018                 lda     #1              Set MONFLM in the word 'flags' header field
                      (        forth.asm):02019                 pshs    a
ECF9                  (        forth.asm):02020         MONIT1  ldx     LSTWAD          Latest defined word header address
                      (        forth.asm):02021                 lda     ,x
                      (        forth.asm):02022                 tst     ,s              Should we set or clear MONFLM?
                      (        forth.asm):02023                 bne     @setflg
                      (        forth.asm):02024                 anda    #^MONFLM        Clear MONFLM in the word's attribute field
                      (        forth.asm):02025                 bra     @cont
ECF9                  (        forth.asm):02026         @setflg ora     #MONFLM         Set MONFLM in the word's attribute field
ECF9                  (        forth.asm):02027         @cont   sta     ,x
                      (        forth.asm):02028                 bsr     HDRSKIP         Skip the header (XT to X), clear A
                      (        forth.asm):02029                 ldy     DICEND          The upper code section limit (excluded)
                      (        forth.asm):02030                 bsr     HDRCSUM         Current word's definition's checksum to A
                      (        forth.asm):02031                 sta     -1,x            Store the computed checksum into the header
                      (        forth.asm):02032                 leas    1,s             Drop one byte from the system stack
                      (        forth.asm):02033                 ENDC                    RELFEAT
ECF9 39               (        forth.asm):02034 (4)             rts
                      (        forth.asm):02035         
                      (        forth.asm):02036                 IFNE    RELFEAT
                      (        forth.asm):02037         * On entry, X has a word's header address. On return X has the compilation
                      (        forth.asm):02038         * address for that word (XT). A is cleared so as to initialize the checksum.
ECFA                  (        forth.asm):02039         HDRSKIP lda     ,x              Word's header attribute byte to A
                      (        forth.asm):02040                 anda    #WRLNMSK        Extract the word's length
                      (        forth.asm):02041                 adda    #4              1B attribute, 2B backlink, 1B checksum
                      (        forth.asm):02042                 leax    a,x             X has the word's XT. -1,X has the orig checksum
                      (        forth.asm):02043                 clra
                      (        forth.asm):02044                 rts
                      (        forth.asm):02045         
                      (        forth.asm):02046         * On entry X has a word's compilation address (XT). A is supposed to have been
                      (        forth.asm):02047         * previously cleared. Y has the upper bound of the code section's address
                      (        forth.asm):02048         * (excluded). On return, A will have the word's code section's checksum.
                      (        forth.asm):02049         * X is preserved.
ECFA                  (        forth.asm):02050         HDRCSUM pshs    x
ECFA                  (        forth.asm):02051         @hdrcs1 eora    ,x+             Update the checksum
                      (        forth.asm):02052                 cmpr    x,y             Upper bound reached?
                      (        forth.asm):02053                 bne     @hdrcs1         No. Process next byte in word's code section
                      (        forth.asm):02054                 puls    x
                      (        forth.asm):02055                 rts
                      (        forth.asm):02056         
ECFA                  (        forth.asm):02057         CSUMFLM fcn     'integrity check failed'
                      (        forth.asm):02058                 ENDC                    RELFEAT
                      (        forth.asm):02059         
                      (        forth.asm):02060         * This non-standard word walks through the dictionary linked list and checks
                      (        forth.asm):02061         * that the words that have the MONFLM flag set in their header's attribute
                      (        forth.asm):02062         * field have a definition that still matches the checksum stored in the word's
                      (        forth.asm):02063         * header. This is meant to be used interactively, as a debugging tool, since
                      (        forth.asm):02064         * multitasking is not supported by this implementation. Therefore no status
                      (        forth.asm):02065         * value is returned. Feedback will only be provided for corrupted words, in
                      (        forth.asm):02066         * the form of a diagnostic message printed to the console.
ECFA 06               (        forth.asm):02067         ICHECK  fcb     6               Non-standard
ECFB 49434845434B     (        forth.asm):02068                 fcc     'ICHECK'        ( -- )
ED01 ECEF             (        forth.asm):02069                 fdb     MONITOR
                      (        forth.asm):02070                 RFCS
                      (        forth.asm):02071                 IFNE    RELFEAT
                      (        forth.asm):02072                 ldy     DICEND          Upper bound for the code of the last word (exc.)
                      (        forth.asm):02073                 ldx     LSTWAD          LAST points to the header of the last word
ED03                  (        forth.asm):02074         @icklop pshs    x               Current word's header address
                      (        forth.asm):02075                 lda     ,x              Word's header attribute byte to A
                      (        forth.asm):02076                 bita    #MONFLM         Is this a monitored word?
                      (        forth.asm):02077                 beq     @icknxt         No. Point to the next word
                      (        forth.asm):02078                 bsr     HDRSKIP         Skip the header (XT to X), clear A
                      (        forth.asm):02079                 bsr     HDRCSUM         Current word's definition's checksum to A
                      (        forth.asm):02080                 cmpa    -1,x            Does the checksum match the compile time value?
                      (        forth.asm):02081                 beq     @icknxt         Yes. Point to the next word
                      (        forth.asm):02082         * Current word's definition has been modified since its original definition!
                      (        forth.asm):02083                 jsr     PUTCR
                      (        forth.asm):02084                 ldx     ,s              Current word's header address
                      (        forth.asm):02085                 ldb     ,x+
                      (        forth.asm):02086                 andb    #WRLNMSK
                      (        forth.asm):02087                 clra
                      (        forth.asm):02088                 jsr     NPUSH           Word's name base address
                      (        forth.asm):02089                 tfr     d,x
                      (        forth.asm):02090                 jsr     NPUSH           Byte count for TYPE
                      (        forth.asm):02091                 RFXT    jsr,TYPE+7      XT for TYPE
                      (        forth.asm):02092                 RFXT    jsr,SPACE+8     XT for SPACE
                      (        forth.asm):02093                 ldx     #CSUMFLM
                      (        forth.asm):02094                 jsr     PUTS            Feedback for checksum failure
ED03                  (        forth.asm):02095         @icknxt puls    x               Current word's header address
                      (        forth.asm):02096                 tfr     x,y             Point to the end of the previous word's code
                      (        forth.asm):02097                 bsr     HDRSKIP         Skip the header (XT to X), clear A
                      (        forth.asm):02098                 ldx     -3,x            Point to the previous header via the backlink
                      (        forth.asm):02099                 beq     @ickdon         We've just reached the end of the dictionary
                      (        forth.asm):02100                 bra     @icklop
                      (        forth.asm):02101                 ENDC                    RELFEAT
ED03 39               (        forth.asm):02102 (4)     @ickdon rts
                      (        forth.asm):02103         
                      (        forth.asm):02104         * hForth prototyping code below:
                      (        forth.asm):02105         * : ?DO 0 rakeVar !
                      (        forth.asm):02106         *   POSTPONE do?DO
                      (        forth.asm):02107         *   HERE            \ leave ?DO-orig
                      (        forth.asm):02108         *   0 ,
                      (        forth.asm):02109         *   HERE            \ leave DO-dest
                      (        forth.asm):02110         *   bal+ ; IMMEDIATE RESTRICT
ED04 C3               (        forth.asm):02111         QDO     fcb     $C3             ANSI (Core ext)
ED05 3F444F           (        forth.asm):02112                 fcc     '?DO'           Comp: ( C: -- do-sys )
ED08 ECFA             (        forth.asm):02113                 fdb     ICHECK          Exec: ( n1|u1 n2|u2 -- ) ( R: -- | loop-sys )
                      (        forth.asm):02114                 RFCS
ED0A 8EED2F           (        forth.asm):02115 (3)             ldx     #QDOEX
ED0D BDE152           (        forth.asm):02116 (7)             jsr     EMXASXT         Compile "JSR QDOEX"
                      (        forth.asm):02117         * The rest of this code looks very much like IF, except that 1 is not pushed
                      (        forth.asm):02118         * to the control flow stack to indicate an IF. This is done later on when
                      (        forth.asm):02119         * the RAKE code is executed by LOOP.
ED10 CC2603           (        forth.asm):02120 (3)             ldd     #BNEOPC
ED13 EDA1             (        forth.asm):02121 (5+2)           std     ,y++
ED15 867E             (        forth.asm):02122 (2)             lda     #JMPOPC
ED17 A7A0             (        forth.asm):02123 (4+1)           sta     ,y+
ED19 1F21             (        forth.asm):02124 (4)             tfr     y,x
ED1B BDE7D6           (        forth.asm):02125 (7)             jsr     CSPUSH          ANS:do-sys/addr (?DO-orig) is HERE
ED1E 3122             (        forth.asm):02126 (4+1)           leay    2,y             2 ALLOT instead of 0 ,
ED20 109F08           (        forth.asm):02127 (5)             sty     DICEND
ED23 1F21             (        forth.asm):02128 (4)             tfr     y,x             ANS:do-sys/type (DO-dest) is HERE
ED25 BDE7D6           (        forth.asm):02129 (7)             jsr     CSPUSH
ED28 104F             (        forth.asm):02130 (2)     QDO1    clrd
ED2A DD18             (        forth.asm):02131 (4)             std     RAKEVAR         Used for LEAVE forward references handling
ED2C 0C35             (        forth.asm):02132 (5)             inc     BALNCD
ED2E 39               (        forth.asm):02133 (4)             rts
                      (        forth.asm):02134         
ED2F BDE9CB           (        forth.asm):02135 (7)     QDOEX   jsr     MIN2PST
ED32 AE42             (        forth.asm):02136 (5+1)           ldx     2,u             Loop limit
ED34 10AEC4           (        forth.asm):02137 (6+0)           ldy     ,u              Loop index
ED37 3344             (        forth.asm):02138 (4+1)           leau    4,u             2DROP
ED39 103721           (        forth.asm):02139 (4)             cmpr    y,x
ED3C 270A             (        forth.asm):02140 (3)             beq     @skloop         Loop bypassed, return with ZFLAG set
ED3E BDE7F6           (        forth.asm):02141 (7)             jsr     RPUSH           limit >R
ED41 1F21             (        forth.asm):02142 (4)             tfr     y,x
ED43 BDE7F6           (        forth.asm):02143 (7)             jsr     RPUSH           index >R
ED46 1CFB             (        forth.asm):02144 (2)             andcc   #^ZFLAG         Clear ZFLAG
ED48 39               (        forth.asm):02145 (4)     @skloop rts
                      (        forth.asm):02146         
                      (        forth.asm):02147         * hForth prototyping code below:
                      (        forth.asm):02148         * : DO 0 rakeVar !   0   POSTPONE doDO   HERE   bal+ ; IMMEDIATE RESTRICT
ED49 C2               (        forth.asm):02149         DO      fcb     $C2             ANSI (Core)
ED4A 444F             (        forth.asm):02150                 fcc     'DO'            Comp: ( C: -- do-sys )
ED4C ED04             (        forth.asm):02151                 fdb     QDO             Exec: ( n1|u1 n2|u2 -- ) ( R: -- loop-sys )
                      (        forth.asm):02152                 RFCS
ED4E 8EED60           (        forth.asm):02153 (3)             ldx     #DOEX
ED51 BDE152           (        forth.asm):02154 (7)             jsr     EMXASXT         Compile "JSR DOEX"
ED54 1FC1             (        forth.asm):02155 (4)             tfr     0,x             ANS:do-sys/addr (?DO-orig) is 0 for DO
ED56 BDE7D6           (        forth.asm):02156 (7)             jsr     CSPUSH
ED59 1F21             (        forth.asm):02157 (4)             tfr     y,x             ANS:do-sys/type (DO-dest) is HERE
ED5B BDE7D6           (        forth.asm):02158 (7)             jsr     CSPUSH
ED5E 20C8             (        forth.asm):02159 (3)             bra     QDO1
                      (        forth.asm):02160         
ED60 BDFC7A           (        forth.asm):02161         DOEX    RFXT    jsr,SWAP+7      XT for SWAP
ED63 BDF09B           (        forth.asm):02162                 RFXT    jsr,TOR+5       XT for >R (limit)
ED66 7EF09B           (        forth.asm):02163                 RFXT    jmp,TOR+5       XT for >R (index)
                      (        forth.asm):02164         
                      (        forth.asm):02165         * hForth prototyping code below:
                      (        forth.asm):02166         * : LOOP POSTPONE doLOOP   rake ; IMMEDIATE RESTRICT
ED69 C4               (        forth.asm):02167         LOOP    fcb     $C4             ANSI (Core)
ED6A 4C4F4F50         (        forth.asm):02168                 fcc     'LOOP'          Comp: ( C: do-sys -- )
ED6E ED49             (        forth.asm):02169                 fdb     DO              Exec: ( -- ) ( R:  loop-sys1 --  | loop-sys2 )
                      (        forth.asm):02170                 RFCS
ED70 8EEDB0           (        forth.asm):02171 (3)             ldx     #LOOPEX
ED73 BDE152           (        forth.asm):02172 (7)     LOOP1   jsr     EMXASXT
ED76 8E2503           (        forth.asm):02173 (3)             ldx     #BCSOPC         Compile "BCS *+5"
ED79 AFA1             (        forth.asm):02174 (5+2)           stx     ,y++
ED7B BDE7E4           (        forth.asm):02175 (7)             jsr     CSPOP           ANS:do-sys/type (DO-dest): loop begin. addr.
ED7E 867E             (        forth.asm):02176 (2)             lda     #JMPOPC
ED80 BDE57D           (        forth.asm):02177 (7)             jsr     VARCON2         Compile "JMP DO-dest"
ED83 109F08           (        forth.asm):02178 (5)             sty     DICEND
ED86 109F16           (        forth.asm):02179 (5)             sty     FWDREF          Last recorded forward reference
                      (        forth.asm):02180         * RAKE: Y has HERE, which all (if any) LEAVE forward references
                      (        forth.asm):02181         * should resolve to.
ED89 9E18             (        forth.asm):02182 (4)             ldx     RAKEVAR
ED8B 270B             (        forth.asm):02183 (3)     @lopres beq     @lopdon
ED8D EC84             (        forth.asm):02184 (5+0)           ldd     ,x              D has the next forward reference
ED8F 10AF84           (        forth.asm):02185 (6+0)           sty     ,x              Resolve LEAVE forward reference
ED92 1F01             (        forth.asm):02186 (4)             tfr     d,x
ED94 104D             (        forth.asm):02187 (2)             tstd
ED96 20F3             (        forth.asm):02188 (3)             bra     @lopres
ED98 DD18             (        forth.asm):02189 (4)     @lopdon std     RAKEVAR
ED9A 0A35             (        forth.asm):02190 (5)             dec     BALNCD
ED9C BDE7E4           (        forth.asm):02191 (7)             jsr     CSPOP           ANS:do-sys/addr (?DO-orig) to X
ED9F 2601             (        forth.asm):02192 (3)             bne     @endqdo         If NZ push it back, push type 1 and call THEN
EDA1 39               (        forth.asm):02193 (4)             rts
                      (        forth.asm):02194         * End a ?DO construct with an implicit THEN.
EDA2 0C35             (        forth.asm):02195 (5)     @endqdo inc     BALNCD
EDA4 BDE7D6           (        forth.asm):02196 (7)             jsr     CSPUSH          Push back IF jump address 
EDA7 8E0001           (        forth.asm):02197 (3)             ldx     #1
EDAA BDE7D6           (        forth.asm):02198 (7)             jsr     CSPUSH          to the control flow stack with type 1 (IF)
EDAD 7EEE56           (        forth.asm):02199                 RFXT    jmp,THEN+7
                      (        forth.asm):02200         
EDB0 8E0001           (        forth.asm):02201 (3)     LOOPEX  ldx     #1
EDB3 2010             (        forth.asm):02202 (3)             bra     PLOPEX1
                      (        forth.asm):02203         
EDB5 C5               (        forth.asm):02204         PLOOP   fcb     $C5             ANSI (Core)
EDB6 2B4C4F4F50       (        forth.asm):02205                 fcc     '+LOOP'         Comp: ( C: do-sys -- )
EDBB ED69             (        forth.asm):02206                 fdb     LOOP            Exec: ( n -- ) ( R: loop-sys1 -- | loop-sys2 )
                      (        forth.asm):02207                 RFCS
EDBD 8EEDC2           (        forth.asm):02208 (3)             ldx     #PLOOPEX
EDC0 20B1             (        forth.asm):02209 (3)             bra     LOOP1
                      (        forth.asm):02210         
                      (        forth.asm):02211         * Anton Ertl's forth-standard.org notes on +LOOP (2019-05-21 05:54:21):
                      (        forth.asm):02212         * "Note that the loop control parameters can be either signed or unsigned,
                      (        forth.asm):02213         * and +LOOP has to work for both. For systems with 2s-complement representation
                      (        forth.asm):02214         * for signed numbers, the way to go is to use circular arithmetic: compute
                      (        forth.asm):02215         * x=(index-limit)+minint, and observe if the addition x+n crosses the boundary
                      (        forth.asm):02216         * between minint and maxint. Many architectures report this through the
                      (        forth.asm):02217         * overflow flag."
                      (        forth.asm):02218         * Here we do precisely what the good Doktor says, setting the carry flag on
                      (        forth.asm):02219         * overflow detection.
EDC2 BDE7E4           (        forth.asm):02220 (7)     PLOOPEX jsr     NPOP
EDC5 1F16             (        forth.asm):02221 (4)     PLOPEX1 tfr     x,w             Increment to W
EDC7 BDE812           (        forth.asm):02222 (7)             jsr     RPOP
EDCA 1F12             (        forth.asm):02223 (4)             tfr     x,y             Index to Y
EDCC BDE812           (        forth.asm):02224 (7)             jsr     RPOP            Limit to X
EDCF CC8000           (        forth.asm):02225 (3)             ldd     #$8000          Minimum integer on a 2 byte cell system
EDD2 103020           (        forth.asm):02226 (4)             addr    y,d             add the index
EDD5 103210           (        forth.asm):02227 (4)             subr    x,d             substract the limit
EDD8 103060           (        forth.asm):02228 (4)             addr    w,d             add the increment and check for overflow
EDDB 290E             (        forth.asm):02229 (3)             bvs     @limrcd         Limit reached
EDDD BDE7F6           (        forth.asm):02230 (7)             jsr     RPUSH           Limit to the return stack
EDE0 103062           (        forth.asm):02231 (4)             addr    w,y             Update the index
EDE3 1F21             (        forth.asm):02232 (4)             tfr     y,x
EDE5 BDE7F6           (        forth.asm):02233 (7)             jsr     RPUSH           Updated index to the return stack
EDE8 1CFE             (        forth.asm):02234 (2)             andcc   #^CFLAG         Clear CFLAG
EDEA 39               (        forth.asm):02235 (4)             rts
EDEB 1A01             (        forth.asm):02236 (2)     @limrcd orcc    #CFLAG          Set CFLAG
EDED 39               (        forth.asm):02237 (4)             rts
                      (        forth.asm):02238         
EDEE 46               (        forth.asm):02239         UNLOOP  fcb     $46             ANSI (Core)
EDEF 554E4C4F4F50     (        forth.asm):02240                 fcc     'UNLOOP'        ( -- ) ( R: loop-sys -- )
EDF5 EDB5             (        forth.asm):02241                 fdb     PLOOP
                      (        forth.asm):02242                 RFCS
EDF7 BDE812           (        forth.asm):02243 (7)             jsr     RPOP            Drop the index from the return stack
EDFA 7EE812           (        forth.asm):02244 (3)             jmp     RPOP            and the loop limit as well
                      (        forth.asm):02245         
                      (        forth.asm):02246         * hForth prototyping code below:
                      (        forth.asm):02247         *
                      (        forth.asm):02248         * VARIABLE bal   0 bal !
                      (        forth.asm):02249         * : bal+ 1 bal +! ;
                      (        forth.asm):02250         * : bal- -1 bal +! ;
                      (        forth.asm):02251         * : branch jmpopc C, ; RESTRICT
                      (        forth.asm):02252         * : 0branch jsropc C, npop ,
                      (        forth.asm):02253         *   bneopc ,
                      (        forth.asm):02254         *   branch ; RESTRICT
                      (        forth.asm):02255         * : AHEAD branch HERE 0 ,  \ 0 is an unresolved forward reference
                      (        forth.asm):02256         *   bal+ 1 ; IMMEDIATE RESTRICT
EDFD C5               (        forth.asm):02257         AHEAD   fcb     $C5             ANSI (Programming tools ext)
EDFE 4148454144       (        forth.asm):02258                 fcc     'AHEAD'         Comp: ( C: -- orig )
EE03 EDEE             (        forth.asm):02259                 fdb     UNLOOP          Exec: ( -- )
                      (        forth.asm):02260                 RFCS
EE05 109E08           (        forth.asm):02261 (5)             ldy     DICEND
EE08 867E             (        forth.asm):02262 (2)     AHEAD1  lda     #JMPOPC
EE0A A7A0             (        forth.asm):02263 (4+1)           sta     ,y+
EE0C 1F21             (        forth.asm):02264 (4)             tfr     y,x             Jump address location (ANS:orig/addr) to X
EE0E 3122             (        forth.asm):02265 (4+1)           leay    2,y
EE10 109F08           (        forth.asm):02266 (5)             sty     DICEND          2 ALLOT (instead of 0 ,)
EE13 0C35             (        forth.asm):02267 (5)             inc     BALNCD
EE15 BDE7D6           (        forth.asm):02268 (7)             jsr     CSPUSH          ANS:orig/addr to the control flow stack
EE18 8E0001           (        forth.asm):02269 (3)             ldx     #1              ANS:orig/type is 1
EE1B 7EE7D6           (        forth.asm):02270 (3)             jmp     CSPUSH
                      (        forth.asm):02271         
                      (        forth.asm):02272         * hForth prototyping code below:
                      (        forth.asm):02273         * : IF 0branch HERE 0 ,  \ 0 is an unresolved forward reference
                      (        forth.asm):02274         *   bal+ 1 ; IMMEDIATE RESTRICT
EE1E C2               (        forth.asm):02275         IF      fcb     $C2             ANSI (Core)
EE1F 4946             (        forth.asm):02276                 fcc     'IF'            Comp: ( C: -- orig )
EE21 EDFD             (        forth.asm):02277                 fdb     AHEAD           Exec: ( x -- )
                      (        forth.asm):02278                 RFCS
EE23 8EE7E4           (        forth.asm):02279 (3)             ldx     #NPOP
EE26 BDE152           (        forth.asm):02280 (7)             jsr     EMXASXT         Compile "JSR NPOP"
EE29 CC2603           (        forth.asm):02281 (3)             ldd     #BNEOPC
EE2C EDA1             (        forth.asm):02282 (5+2)           std     ,y++            Compile "BNE *+5"
EE2E 20D8             (        forth.asm):02283 (3)             bra     AHEAD1
                      (        forth.asm):02284         
                      (        forth.asm):02285         * Functionally equivalent to:
                      (        forth.asm):02286         * : UNLESS POSTPONE 0= POSTPONE IF ; IMMEDIATE RESTRICT
EE30 C6               (        forth.asm):02287         UNLESS  fcb     $C6             Non-standard (Perl inspired)
EE31 554E4C455353     (        forth.asm):02288                 fcc     'UNLESS'
EE37 EE1E             (        forth.asm):02289                 fdb     IF
                      (        forth.asm):02290                 RFCS
EE39 8EEF41           (        forth.asm):02291                 RFXT    ldx,#NULP+5     XT for 0=
EE3C BDE152           (        forth.asm):02292 (7)             jsr     EMXASXT
EE3F 20E2             (        forth.asm):02293                 RFXT    bra,IF+5        XT for IF
                      (        forth.asm):02294         
                      (        forth.asm):02295         * hForth prototyping code below:
                      (        forth.asm):02296         * : ELSE POSTPONE AHEAD 2SWAP POSTPONE THEN ; IMMEDIATE RESTRICT
EE41 C4               (        forth.asm):02297         ELSE    fcb     $C4             ANSI (Core)
EE42 454C5345         (        forth.asm):02298                 fcc     'ELSE'          Comp: ( C: orig1 -- orig2 )
EE46 EE30             (        forth.asm):02299                 fdb     UNLESS          Exec: ( -- )
                      (        forth.asm):02300                 RFCS
EE48 8DBB             (        forth.asm):02301                 RFXT    bsr,AHEAD+8
EE4A BDF491           (        forth.asm):02302                 RFXT    jsr,TWOSWAP+8   This should be read as "1 CS-ROLL"
EE4D 2007             (        forth.asm):02303                 RFXT    bra,THEN+7
                      (        forth.asm):02304         
                      (        forth.asm):02305         * hForth prototyping code below:
                      (        forth.asm):02306         * : THEN 1- ABORT" Unbalanced IF/ELSE/THEN construct"
                      (        forth.asm):02307         *   HERE SWAP ! bal-
                      (        forth.asm):02308         *   HERE fwdref ! ; IMMEDIATE RESTRICT
EE4F C4               (        forth.asm):02309         THEN    fcb     $C4             ANSI (Core)
EE50 5448454E         (        forth.asm):02310                 fcc     'THEN'          Comp: ( C: orig -- )
EE54 EE41             (        forth.asm):02311                 fdb     ELSE            Exec: ( -- )
                      (        forth.asm):02312                 RFCS
EE56 BDE7E4           (        forth.asm):02313 (7)             jsr     CSPOP           ANS:orig/type to X
EE59 301F             (        forth.asm):02314 (4+1)           leax    -1,x
EE5B 1026F9D1         (        forth.asm):02315 (5)             lbne    BALERR          Illegal construct, type must be 1
EE5F 109E08           (        forth.asm):02316 (5)             ldy     DICEND
EE62 BDE7E4           (        forth.asm):02317 (7)             jsr     CSPOP           ANS:orig/addr to X
EE65 10AF84           (        forth.asm):02318 (6+0)           sty     ,x              Resolve forward reference to HERE
EE68 109F16           (        forth.asm):02319 (5)             sty     FWDREF          Last recorded forward reference
EE6B 0A35             (        forth.asm):02320 (5)             dec     BALNCD
EE6D 39               (        forth.asm):02321 (4)             rts
                      (        forth.asm):02322         
EE6E 01               (        forth.asm):02323         EQ      fcb     1               ANSI (Core)
EE6F 3D               (        forth.asm):02324                 fcc     '='             ( x1 x2 -- flag )
EE70 EE4F             (        forth.asm):02325                 fdb     THEN
                      (        forth.asm):02326                 RFCS
EE72 BDE9CB           (        forth.asm):02327 (7)             jsr     MIN2PST         At least two cells need to be stacked up
EE75 10ECC4           (        forth.asm):02328 (8+0)           ldq     ,u              D:W has X2:X1
EE78 3342             (        forth.asm):02329 (4+1)           leau    2,u             Drop one cell from the user stack
EE7A 1FC1             (        forth.asm):02330 (4)             tfr     0,x
EE7C 103760           (        forth.asm):02331 (4)             cmpr    w,d
EE7F 2602             (        forth.asm):02332 (3)             bne     @eq1
EE81 301F             (        forth.asm):02333 (4+1)           leax    -1,x            Return the ANSI true
EE83 AFC4             (        forth.asm):02334 (5+0)   @eq1    stx     ,u              Store in place to FLAG
EE85 39               (        forth.asm):02335 (4)             rts
                      (        forth.asm):02336         
EE86 02               (        forth.asm):02337         DIFF    fcb     2               ANSI (Core ext)
EE87 3C3E             (        forth.asm):02338                 fcc     '<>'            ( N1 N2 -- FLAG )
EE89 EE6E             (        forth.asm):02339                 fdb     EQ
                      (        forth.asm):02340                 RFCS
EE8B BDE9CB           (        forth.asm):02341 (7)             jsr     MIN2PST         At least two cells need to be stacked up
EE8E 10ECC4           (        forth.asm):02342 (8+0)           ldq     ,u              D:W has N2:N1
EE91 3342             (        forth.asm):02343 (4+1)           leau    2,u             Drop one cell from the user stack
EE93 1FC1             (        forth.asm):02344 (4)             tfr     0,x
EE95 103760           (        forth.asm):02345 (4)             cmpr    w,d
EE98 2702             (        forth.asm):02346 (3)             beq     @diff1
EE9A 301F             (        forth.asm):02347 (4+1)           leax    -1,x            Return the ANSI true
EE9C AFC4             (        forth.asm):02348 (5+0)   @diff1  stx     ,u              Store in place to FLAG
EE9E 39               (        forth.asm):02349 (4)             rts
                      (        forth.asm):02350         
EE9F 02               (        forth.asm):02351         SINFEQ  fcb     2               Non-standard (Not even ANSI!)
EEA0 3C3D             (        forth.asm):02352                 fcc     '<='            Required for the ORNL fixed sieve benchmark
EEA2 EE86             (        forth.asm):02353                 fdb     DIFF
                      (        forth.asm):02354                 RFCS
EEA4 BDE9CB           (        forth.asm):02355 (7)             jsr     MIN2PST         At least two cells need to be stacked up
EEA7 10AEC4           (        forth.asm):02356 (6+0)           ldy     ,u
EEAA AE42             (        forth.asm):02357 (5+1)           ldx     2,u
EEAC 104F             (        forth.asm):02358 (2)             clrd
EEAE 103721           (        forth.asm):02359 (4)             cmpr    y,x
EEB1 2E02             (        forth.asm):02360 (3)             bgt     @sinfq1
EEB3 104A             (        forth.asm):02361 (2)             decd                    Return the ANSI true
EEB5 3342             (        forth.asm):02362 (4+1)   @sinfq1 leau    2,u             Drop one cell
EEB7 EDC4             (        forth.asm):02363 (5+0)           std     ,u
EEB9 39               (        forth.asm):02364 (4)             rts
                      (        forth.asm):02365         
                      (        forth.asm):02366                 IFNE    DEBUG
EEBA                  (        forth.asm):02367         CC      fcb     2               Non-standard. Used for debugging
                      (        forth.asm):02368                 fcc     'CC'
                      (        forth.asm):02369                 fdb     SINFEQ
                      (        forth.asm):02370                 RFCS
                      (        forth.asm):02371                 ldx     CCREG
                      (        forth.asm):02372                 jmp     NPUSH
                      (        forth.asm):02373                 ENDC                    DEBUG
                      (        forth.asm):02374         
EEBA 03               (        forth.asm):02375         XOR     fcb     3               ANSI (Core)
EEBB 584F52           (        forth.asm):02376                 fcc     'XOR'           ( x1 x2 -- x3 )
                      (        forth.asm):02377                 IFNE    DEBUG
                      (        forth.asm):02378                 fdb     CC
                      (        forth.asm):02379                 ELSE
EEBE EE9F             (        forth.asm):02380                 fdb     SINFEQ
                      (        forth.asm):02381                 ENDC                    DEBUG
                      (        forth.asm):02382                 RFCS
EEC0 BDE9CB           (        forth.asm):02383 (7)             jsr     MIN2PST         At least two cells need to be stacked up
EEC3 ECC4             (        forth.asm):02384 (5+0)           ldd     ,u              X2 to D
EEC5 10A642           (        forth.asm):02385 (6+1)           ldw     2,u             X1 to W
EEC8 103660           (        forth.asm):02386 (4)             eorr    w,d
EECB 3342             (        forth.asm):02387 (4+1)   XOR1    leau    2,u
EECD EDC4             (        forth.asm):02388 (5+0)           std     ,u              X1 ^ X2 to X3
EECF 39               (        forth.asm):02389 (4)             rts
                      (        forth.asm):02390         
EED0 02               (        forth.asm):02391         OR      fcb     2               ANSI (Core)
EED1 4F52             (        forth.asm):02392                 fcc     'OR'            ( x1 x2 -- x3 )
EED3 EEBA             (        forth.asm):02393                 fdb     XOR
                      (        forth.asm):02394                 RFCS
EED5 BDE9CB           (        forth.asm):02395 (7)             jsr     MIN2PST         At least two cells need to be stacked up
EED8 ECC4             (        forth.asm):02396 (5+0)           ldd     ,u              X2 to D
EEDA 10A642           (        forth.asm):02397 (6+1)           ldw     2,u             X1 to W
EEDD 103560           (        forth.asm):02398 (4)             orr     w,d
EEE0 20E9             (        forth.asm):02399 (3)             bra     XOR1            X1 | X2 to X3
                      (        forth.asm):02400         
EEE2 03               (        forth.asm):02401         AND     fcb     3               ANSI (Core)
EEE3 414E44           (        forth.asm):02402                 fcc     'AND'           ( x1 x2 -- x3 )
EEE6 EED0             (        forth.asm):02403                 fdb     OR
                      (        forth.asm):02404                 RFCS
EEE8 BDE9CB           (        forth.asm):02405 (7)             jsr     MIN2PST         At least two cells need to be stacked up
EEEB ECC4             (        forth.asm):02406 (5+0)           ldd     ,u              X2 to D
EEED 10A642           (        forth.asm):02407 (6+1)           ldw     2,u             X1 to W
EEF0 103460           (        forth.asm):02408 (4)             andr    w,d
EEF3 20D6             (        forth.asm):02409 (3)             bra     XOR1            X1 & X2 to X3
                      (        forth.asm):02410         
EEF5 06               (        forth.asm):02411         INVERT  fcb     6               ANSI (Core)
EEF6 494E56455254     (        forth.asm):02412                 fcc     'INVERT'        ( x1 -- x2 )
EEFC EEE2             (        forth.asm):02413                 fdb     AND
                      (        forth.asm):02414                 RFCS
EEFE BDE7E4           (        forth.asm):02415 (7)             jsr     NPOP            X1 to X
EF01 1F10             (        forth.asm):02416 (4)             tfr     x,d
EF03 1043             (        forth.asm):02417 (2)             comd
EF05 1F01             (        forth.asm):02418 (4)             tfr     d,x             X2 to X
EF07 3610             (        forth.asm):02419                 UCNPUSH                 and to the data stack
EF09 39               (        forth.asm):02420 (4)             rts
                      (        forth.asm):02421         
EF0A 02               (        forth.asm):02422         ZGREAT  fcb     2               ANSI (Core ext)
EF0B 303E             (        forth.asm):02423                 fcc     '0>'
EF0D EEF5             (        forth.asm):02424                 fdb     INVERT
                      (        forth.asm):02425                 RFCS
EF0F BDE7E4           (        forth.asm):02426 (7)             jsr     NPOP
EF12 1F10             (        forth.asm):02427 (4)             tfr     x,d
EF14 104D             (        forth.asm):02428 (2)             tstd
EF16 2F06             (        forth.asm):02429 (3)             ble     @zgrt1
EF18 8EFFFF           (        forth.asm):02430 (3)             ldx     #-1             Return the ANSI true
EF1B 3610             (        forth.asm):02431                 UCNPUSH
EF1D 39               (        forth.asm):02432 (4)             rts
EF1E 1FC1             (        forth.asm):02433 (4)     @zgrt1  tfr     0,x
EF20 3610             (        forth.asm):02434                 UCNPUSH
EF22 39               (        forth.asm):02435 (4)             rts
                      (        forth.asm):02436         
EF23 02               (        forth.asm):02437         ZLESS   fcb     2               ANSI (Core)
EF24 303C             (        forth.asm):02438                 fcc     '0<'            ( n -- flag )
EF26 EF0A             (        forth.asm):02439                 fdb     ZGREAT
                      (        forth.asm):02440                 RFCS
EF28 BDE7E4           (        forth.asm):02441 (7)             jsr     NPOP
EF2B 1F10             (        forth.asm):02442 (4)             tfr     x,d
EF2D 104D             (        forth.asm):02443 (2)             tstd
EF2F 2C06             (        forth.asm):02444 (3)             bge     @zlss1
EF31 8EFFFF           (        forth.asm):02445 (3)             ldx     #-1             Return the ANSI true
EF34 3610             (        forth.asm):02446                 UCNPUSH
EF36 39               (        forth.asm):02447 (4)             rts
EF37 1FC1             (        forth.asm):02448 (4)     @zlss1  tfr     0,x
EF39 3610             (        forth.asm):02449                 UCNPUSH
EF3B 39               (        forth.asm):02450 (4)             rts
                      (        forth.asm):02451         
EF3C 02               (        forth.asm):02452         NULP    fcb     2               ANSI (Core)
EF3D 303D             (        forth.asm):02453                 fcc     '0='            ( x -- flag )
EF3F EF23             (        forth.asm):02454                 fdb     ZLESS
                      (        forth.asm):02455                 RFCS
EF41 BDE7E4           (        forth.asm):02456 (7)             jsr     NPOP
EF44 1F10             (        forth.asm):02457 (4)             tfr     x,d
EF46 1FC1             (        forth.asm):02458 (4)             tfr     0,x
EF48 104D             (        forth.asm):02459 (2)             tstd
EF4A 2703             (        forth.asm):02460 (3)             beq     @nulp2
EF4C 3610             (        forth.asm):02461         @nulp1  UCNPUSH
EF4E 39               (        forth.asm):02462 (4)             rts
EF4F 301F             (        forth.asm):02463 (4+1)   @nulp2  leax    -1,x            Return the ANSI true
EF51 20F9             (        forth.asm):02464 (3)             bra     @nulp1
                      (        forth.asm):02465         
EF53 03               (        forth.asm):02466         ZNEQ    fcb     3               ANSI (Core ext)
EF54 303C3E           (        forth.asm):02467                 fcc     '0<>'
EF57 EF3C             (        forth.asm):02468                 fdb     NULP
                      (        forth.asm):02469                 RFCS
EF59 8DE6             (        forth.asm):02470                 RFXT    bsr,NULP+5
EF5B 20A1             (        forth.asm):02471                 RFXT    bra,INVERT+9
                      (        forth.asm):02472         
                      (        forth.asm):02473         * Maybe this one should go. It is not specified in the ANS94 reference
                      (        forth.asm):02474         * document but Conklin/Rather have it as "common usage."
EF5D 03               (        forth.asm):02475         NOT     fcb     3               79-STANDARD (REQ165)
EF5E 4E4F54           (        forth.asm):02476                 fcc     'NOT'
EF61 EF53             (        forth.asm):02477                 fdb     ZNEQ
                      (        forth.asm):02478                 RFCS
EF63 20DC             (        forth.asm):02479                 RFXT    bra,NULP+5      XT for 0=
                      (        forth.asm):02480         
EF65 02               (        forth.asm):02481         USUP    fcb     2               ANSI (Core Ext)
EF66 553E             (        forth.asm):02482                 fcc     'U>'
EF68 EF5D             (        forth.asm):02483                 fdb     NOT
                      (        forth.asm):02484                 RFCS
EF6A BDE582           (        forth.asm):02485 (7)             jsr     CMP2
EF6D 2302             (        forth.asm):02486 (3)             bls     @usup1
EF6F 301F             (        forth.asm):02487 (4+1)           leax    -1,x            Return the ANSI true
EF71 3610             (        forth.asm):02488         @usup1  UCNPUSH
EF73 39               (        forth.asm):02489 (4)             rts
                      (        forth.asm):02490         
EF74 02               (        forth.asm):02491         UINF    fcb     2               ANSI (Core)
EF75 553C             (        forth.asm):02492                 fcc     'U<'            ( u1 u2 -- flag )
EF77 EF65             (        forth.asm):02493                 fdb     USUP
                      (        forth.asm):02494                 RFCS
EF79 BDE582           (        forth.asm):02495 (7)             jsr     CMP2
EF7C 2402             (        forth.asm):02496 (3)             bhs     @uinf1          Z is set
EF7E 301F             (        forth.asm):02497 (4+1)           leax    -1,x            Return the ANSI true
EF80 3610             (        forth.asm):02498         @uinf1  UCNPUSH
EF82 39               (        forth.asm):02499 (4)             rts
                      (        forth.asm):02500         
EF83 01               (        forth.asm):02501         SUP     fcb     1               ANSI (Core)
EF84 3E               (        forth.asm):02502                 fcc     '>'             ( n1 n2 -- flag )
EF85 EF74             (        forth.asm):02503                 fdb     UINF
                      (        forth.asm):02504                 RFCS
EF87 BDE582           (        forth.asm):02505 (7)             jsr     CMP2
EF8A 2F02             (        forth.asm):02506 (3)             ble     @sup1
EF8C 301F             (        forth.asm):02507 (4+1)           leax    -1,x            Return the ANSI true
EF8E 3610             (        forth.asm):02508         @sup1   UCNPUSH
EF90 39               (        forth.asm):02509 (4)             rts
                      (        forth.asm):02510         
EF91 01               (        forth.asm):02511         INF     fcb     1               ANSI (Core)
EF92 3C               (        forth.asm):02512                 fcc     '<'             ( n1 n2 -- flag )
EF93 EF83             (        forth.asm):02513                 fdb     SUP
                      (        forth.asm):02514                 RFCS
EF95 BDE582           (        forth.asm):02515 (7)             jsr     CMP2
EF98 2C02             (        forth.asm):02516 (3)             bge     @inf1
EF9A 301F             (        forth.asm):02517 (4+1)           leax    -1,x            Return the ANSI true
EF9C 3610             (        forth.asm):02518         @inf1   UCNPUSH
EF9E 39               (        forth.asm):02519 (4)             rts
                      (        forth.asm):02520         
EF9F 03               (        forth.asm):02521         MAX     fcb     3               ANSI (Core)
EFA0 4D4158           (        forth.asm):02522                 fcc     'MAX'           ( n1 n2 -- n3 )
EFA3 EF91             (        forth.asm):02523                 fdb     INF
                      (        forth.asm):02524                 RFCS
EFA5 BDE7E4           (        forth.asm):02525 (7)             jsr     NPOP
EFA8 1F12             (        forth.asm):02526 (4)             tfr     x,y             N2 to Y
EFAA BDE7E4           (        forth.asm):02527 (7)             jsr     NPOP            N1 to X
EFAD 103721           (        forth.asm):02528 (4)             cmpr    y,x
EFB0 2C02             (        forth.asm):02529 (3)             bge     @pshrv1
EFB2 1F21             (        forth.asm):02530 (4)             tfr     y,x
EFB4 3610             (        forth.asm):02531         @pshrv1 UCNPUSH                 (X) N3 to the data stack
EFB6 39               (        forth.asm):02532 (4)             rts
                      (        forth.asm):02533         
EFB7 03               (        forth.asm):02534         MIN     fcb     3               ANSI (Core)
EFB8 4D494E           (        forth.asm):02535                 fcc     'MIN'           ( n1 n2 -- n3 )
EFBB EF9F             (        forth.asm):02536                 fdb     MAX
                      (        forth.asm):02537                 RFCS
EFBD BDE7E4           (        forth.asm):02538 (7)             jsr     NPOP
EFC0 1F12             (        forth.asm):02539 (4)             tfr     x,y             N2 to Y
EFC2 BDE7E4           (        forth.asm):02540 (7)             jsr     NPOP            N1 to X
EFC5 103721           (        forth.asm):02541 (4)             cmpr    y,x
EFC8 2F02             (        forth.asm):02542 (3)             ble     @pshrv2
EFCA 1F21             (        forth.asm):02543 (4)             tfr     y,x
EFCC 3610             (        forth.asm):02544         @pshrv2 UCNPUSH                 (X) N3 to the data stack
EFCE 39               (        forth.asm):02545 (4)             rts
                      (        forth.asm):02546         
EFCF 03               (        forth.asm):02547         ABS     fcb     3               ANSI (Core)
EFD0 414253           (        forth.asm):02548                 fcc     'ABS'           ( n -- u )
EFD3 EFB7             (        forth.asm):02549                 fdb     MIN
                      (        forth.asm):02550                 RFCS
EFD5 BDE7E4           (        forth.asm):02551 (7)             jsr     NPOP
EFD8 1F10             (        forth.asm):02552 (4)             tfr     x,d             N to D
EFDA 104D             (        forth.asm):02553 (2)             tstd
EFDC 2A04             (        forth.asm):02554 (3)             bpl     @abs1
EFDE 1040             (        forth.asm):02555 (2)             negd
EFE0 1F01             (        forth.asm):02556 (4)             tfr     d,x
EFE2 3610             (        forth.asm):02557         @abs1   UCNPUSH                 X to U
EFE4 39               (        forth.asm):02558 (4)             rts
                      (        forth.asm):02559         
EFE5 06               (        forth.asm):02560         NEGATE  fcb     6               ANSI (Core)
EFE6 4E4547415445     (        forth.asm):02561                 fcc     'NEGATE'        ( n1 -- n2 )
EFEC EFCF             (        forth.asm):02562                 fdb     ABS
                      (        forth.asm):02563                 RFCS
EFEE BDE9C6           (        forth.asm):02564 (7)             jsr     MIN1PST         At least one cell needs to be stacked up
EFF1 ECC4             (        forth.asm):02565 (5+0)           ldd     ,u
EFF3 1040             (        forth.asm):02566 (2)             negd
EFF5 EDC4             (        forth.asm):02567 (5+0)           std     ,u
EFF7 39               (        forth.asm):02568 (4)             rts
                      (        forth.asm):02569         
                      (        forth.asm):02570         * hForth prototyping code below:
                      (        forth.asm):02571         * : BEGIN HERE 0 bal+ ; IMMEDIATE RESTRICT
EFF8 C5               (        forth.asm):02572         BEGIN   fcb     $C5             ANSI (Core)
EFF9 424547494E       (        forth.asm):02573                 fcc     'BEGIN'         Comp: ( C: -- dest )
EFFE EFE5             (        forth.asm):02574                 fdb     NEGATE          Exec: ( -- )
                      (        forth.asm):02575                 RFCS
F000 0C35             (        forth.asm):02576 (5)             inc     BALNCD
F002 9E08             (        forth.asm):02577 (4)             ldx     DICEND          HERE is ANS:dest/addr
F004 BDE7D6           (        forth.asm):02578 (7)             jsr     CSPUSH          to the control flow stack
F007 1FC1             (        forth.asm):02579 (4)             tfr     0,x             ANS:dest/type is zero
F009 7EE7D6           (        forth.asm):02580 (3)             jmp     CSPUSH          to the control flow stack
                      (        forth.asm):02581         
                      (        forth.asm):02582         * hForth prototyping code below:
                      (        forth.asm):02583         * : AGAIN ABORT" Unbalanced BEGIN/AGAIN construct"
                      (        forth.asm):02584         *   branch , bal- ; IMMEDIATE RESTRICT
F00C C5               (        forth.asm):02585         AGAIN   fcb     $C5             ANSI (Core ext)
F00D 414741494E       (        forth.asm):02586                 fcc     'AGAIN'         Comp: ( C: dest -- )
F012 EFF8             (        forth.asm):02587                 fdb     BEGIN           Exec: ( -- )
                      (        forth.asm):02588                 RFCS
F014 BDE7E4           (        forth.asm):02589 (7)             jsr     CSPOP           ANS:dest/type to X (CC is set)
F017 1026F815         (        forth.asm):02590 (5)             lbne    BALERR          type must be zero
F01B BDE7E4           (        forth.asm):02591 (7)             jsr     CSPOP           ANS:dest/addr to X
F01E 109E08           (        forth.asm):02592 (5)             ldy     DICEND
F021 109F14           (        forth.asm):02593 (5)             sty     JSRLAST
F024 867E             (        forth.asm):02594 (2)     AGAIN1  lda     #JMPOPC         JMP extended
F026 BDE57D           (        forth.asm):02595 (7)             jsr     VARCON2
F029 109F08           (        forth.asm):02596 (5)             sty     DICEND
F02C 0A35             (        forth.asm):02597 (5)             dec     BALNCD
F02E 39               (        forth.asm):02598 (4)             rts
                      (        forth.asm):02599         
                      (        forth.asm):02600         * The standard does not require this as being immediate but I do.
F02F C4               (        forth.asm):02601         EXIT    fcb     $C4             ANSI (Core)
F030 45584954         (        forth.asm):02602                 fcc     'EXIT'          ( -- )
F034 F00C             (        forth.asm):02603                 fdb     AGAIN
                      (        forth.asm):02604                 RFCS
F036 9E08             (        forth.asm):02605 (4)             ldx     DICEND
F038 301D             (        forth.asm):02606 (4+1)           leax    -3,x
F03A 109E14           (        forth.asm):02607 (5)             ldy     JSRLAST
F03D 103721           (        forth.asm):02608 (4)             cmpr    y,x
F040 2605             (        forth.asm):02609 (3)             bne     @noopt          Tail JMP optimization is not possible
F042 867E             (        forth.asm):02610 (2)             lda     #JMPOPC         JMP extended
F044 A784             (        forth.asm):02611 (4+0)           sta     ,x
F046 39               (        forth.asm):02612 (4)             rts
F047 3003             (        forth.asm):02613 (4+1)   @noopt  leax    3,x             Point back to HERE
F049 8639             (        forth.asm):02614 (2)             lda     #RTSOPC         RTS inherent
F04B A780             (        forth.asm):02615 (4+1)           sta     ,x+
F04D 9F08             (        forth.asm):02616 (4)             stx     DICEND
F04F 39               (        forth.asm):02617 (4)             rts
                      (        forth.asm):02618         
                      (        forth.asm):02619         * hForth prototyping code below:
                      (        forth.asm):02620         * : UNTIL ABORT" Unbalanced BEGIN/UNTIL construct"
                      (        forth.asm):02621         *   0branch , bal- ; IMMEDIATE RESTRICT
F050 C5               (        forth.asm):02622         UNTIL   fcb     $C5             ANSI (Core)
F051 554E54494C       (        forth.asm):02623                 fcc     'UNTIL'         Comp: ( C: dest -- )
F056 F02F             (        forth.asm):02624                 fdb     EXIT            Exec: (x -- )
                      (        forth.asm):02625                 RFCS
F058 BDE7E4           (        forth.asm):02626 (7)             jsr     CSPOP           ANS:dest/type to X (CC is set)
F05B 1026F7D1         (        forth.asm):02627 (5)             lbne    BALERR          type must be zero
F05F 8EE7E4           (        forth.asm):02628 (3)             ldx     #NPOP
F062 BDE152           (        forth.asm):02629 (7)             jsr     EMXASXT         Compile "JSR NPOP"
F065 8E2603           (        forth.asm):02630 (3)             ldx     #BNEOPC         Compile "BNE *+5"
F068 AFA1             (        forth.asm):02631 (5+2)           stx     ,y++
F06A BDE7E4           (        forth.asm):02632 (7)             jsr     CSPOP           ANS:dest/addr to X
F06D 20B5             (        forth.asm):02633 (3)             bra     AGAIN1
                      (        forth.asm):02634         
                      (        forth.asm):02635         * hForth prototyping code below:
                      (        forth.asm):02636         * : WHILE POSTPONE IF 2SWAP ; RESTRICT IMMEDIATE
F06F C5               (        forth.asm):02637         WHILE   fcb     $C5             ANSI (Core)
F070 5748494C45       (        forth.asm):02638                 fcc     'WHILE'         Comp: ( C: dest -- orig dest )
F075 F050             (        forth.asm):02639                 fdb     UNTIL           Exec: ( x -- )
                      (        forth.asm):02640                 RFCS
F077 BDEE23           (        forth.asm):02641                 RFXT    jsr,IF+5
F07A 7EF491           (        forth.asm):02642                 RFXT    jmp,TWOSWAP+8   This should be read as "1 CS-ROLL"
                      (        forth.asm):02643         
                      (        forth.asm):02644         * hForth prototyping code below:
                      (        forth.asm):02645         * : REPEAT POSTPONE AGAIN POSTPONE THEN ; RESTRICT IMMEDIATE
F07D C6               (        forth.asm):02646         REPEAT  fcb     $C6             ANSI (Core)
F07E 524550454154     (        forth.asm):02647                 fcc     'REPEAT'        Comp: ( C: orig dest -- )
F084 F06F             (        forth.asm):02648                 fdb     WHILE           Exec: ( -- )
                      (        forth.asm):02649                 RFCS
F086 8D8C             (        forth.asm):02650                 RFXT    bsr,AGAIN+8
F088 7EEE56           (        forth.asm):02651                 RFXT    jmp,THEN+7
                      (        forth.asm):02652         
F08B 42               (        forth.asm):02653         RFROM   fcb     $42             ANSI (Core)
F08C 523E             (        forth.asm):02654                 fcc     'R>'            ( -- x ) ( R:  x -- )
F08E F07D             (        forth.asm):02655                 fdb     REPEAT
                      (        forth.asm):02656                 RFCS
F090 BDE812           (        forth.asm):02657 (7)             jsr     RPOP
F093 7EE7D6           (        forth.asm):02658 (3)             jmp     NPUSH
                      (        forth.asm):02659         
F096 42               (        forth.asm):02660         TOR     fcb     $42             ANSI (Core)
F097 3E52             (        forth.asm):02661                 fcc     '>R'            ( x -- ) ( R:  -- x )
F099 F08B             (        forth.asm):02662                 fdb     RFROM
                      (        forth.asm):02663                 RFCS
F09B BDE7E4           (        forth.asm):02664 (7)             jsr     NPOP
F09E 7EE7F6           (        forth.asm):02665 (3)             jmp     RPUSH
                      (        forth.asm):02666         
                      (        forth.asm):02667         * hForth prototyping code below:
                      (        forth.asm):02668         * : LEAVE POSTPONE UNLOOP POSTPONE branch
                      (        forth.asm):02669         *   HERE rakeVar DUP @ , ! ; IMMEDIATE RESTRICT
                      (        forth.asm):02670         * rakeVar points to the head of a linked list of forward references to
                      (        forth.asm):02671         * be resolved later by LOOP/+LOOP.
F0A1 C5               (        forth.asm):02672         LEAVE   fcb     $C5             ANSI (Core)
F0A2 4C45415645       (        forth.asm):02673                 fcc     'LEAVE'         Exec: ( -- ) ( R: loop-sys -- )
F0A7 F096             (        forth.asm):02674                 fdb     TOR
                      (        forth.asm):02675                 RFCS
F0A9 8EEDF7           (        forth.asm):02676                 RFXT    ldx,#UNLOOP+9
F0AC BDE152           (        forth.asm):02677 (7)             jsr     EMXASXT         POSTPONE UNLOOP
F0AF 867E             (        forth.asm):02678 (2)             lda     #JMPOPC
F0B1 A7A0             (        forth.asm):02679 (4+1)           sta     ,y+             POSTPONE branch
F0B3 1F21             (        forth.asm):02680 (4)             tfr     y,x             save HERE (fwd ref. to be resolved by LOOP)
F0B5 DC18             (        forth.asm):02681 (4)             ldd     RAKEVAR
F0B7 EDA1             (        forth.asm):02682 (5+2)           std     ,y++            rakeVar @ ,
F0B9 9F18             (        forth.asm):02683 (4)             stx     RAKEVAR         HERE rakeVar !
F0BB 109F08           (        forth.asm):02684 (5)             sty     DICEND
F0BE 39               (        forth.asm):02685 (4)             rts
                      (        forth.asm):02686         
F0BF 41               (        forth.asm):02687         INDI    fcb     $41             ANSI (Core)
F0C0 49               (        forth.asm):02688                 fcc     'I'             ( -- n|u ) ( R:  loop-sys -- loop-sys )
F0C1 F0A1             (        forth.asm):02689                 fdb     LEAVE
                      (        forth.asm):02690                 RFCS
F0C3 5F               (        forth.asm):02691 (1)             clrb
F0C4 9637             (        forth.asm):02692 (3)     RPICKN  lda     RDEPTH
F0C6 103789           (        forth.asm):02693 (4)             cmpr    a,b
F0C9 240A             (        forth.asm):02694 (3)             bhs     @rpick1
F0CB 9E00             (        forth.asm):02695 (4)             ldx     RSP
F0CD 4F               (        forth.asm):02696 (1)             clra
F0CE 1048             (        forth.asm):02697 (2)             lsld                    Times 2
F0D0 AE8B             (        forth.asm):02698 (5+2)           ldx     d,x
F0D2 7EE7D6           (        forth.asm):02699 (3)             jmp     NPUSH           We cannot use UCNPUSH here
F0D5 C608             (        forth.asm):02700 (2)     @rpick1 ldb     #8              Return stack underflow
F0D7 BDE74C           (        forth.asm):02701 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02702         
F0DA 42               (        forth.asm):02703         RFETCH  fcb     $42             ANSI (Core)
F0DB 5240             (        forth.asm):02704                 fcc     'R@'            ( -- x ) ( R:  x -- x )
F0DD F0BF             (        forth.asm):02705                 fdb     INDI
                      (        forth.asm):02706                 RFCS
F0DF 20E2             (        forth.asm):02707                 RFXT    bra,INDI+4      XT for I
                      (        forth.asm):02708         
F0E1 42               (        forth.asm):02709         INDIP   fcb     $42             79-STANDARD (REF)
F0E2 4927             (        forth.asm):02710                 fdb     $4927
F0E4 F0DA             (        forth.asm):02711                 fdb     RFETCH
                      (        forth.asm):02712                 RFCS
F0E6 C601             (        forth.asm):02713 (2)             ldb     #1
F0E8 20DA             (        forth.asm):02714 (3)             bra     RPICKN
                      (        forth.asm):02715         
F0EA 41               (        forth.asm):02716         INDJ    fcb     $41             ANSI (Core)
F0EB 4A               (        forth.asm):02717                 fcc     'J'             Exec: ( -- n|u ) ( R: lsy1 lsy2 -- lsy1 lsy2 )
F0EC F0E1             (        forth.asm):02718                 fdb     INDIP
                      (        forth.asm):02719                 RFCS
F0EE C602             (        forth.asm):02720 (2)             ldb     #2
F0F0 20D2             (        forth.asm):02721 (3)             bra     RPICKN
                      (        forth.asm):02722         
F0F2 42               (        forth.asm):02723         INDJP   fcb     $42             Non-standard
F0F3 4A27             (        forth.asm):02724                 fdb     $4A27
F0F5 F0EA             (        forth.asm):02725                 fdb     INDJ
                      (        forth.asm):02726                 RFCS
F0F7 C603             (        forth.asm):02727 (2)             ldb     #3
F0F9 20C9             (        forth.asm):02728 (3)             bra     RPICKN
                      (        forth.asm):02729         
F0FB 41               (        forth.asm):02730         INDK    fcb     $41             79-STANDARD (REF)
F0FC 4B               (        forth.asm):02731                 fcc     'K'
F0FD F0F2             (        forth.asm):02732                 fdb     INDJP
                      (        forth.asm):02733                 RFCS
F0FF C604             (        forth.asm):02734 (2)             ldb     #4
F101 20C1             (        forth.asm):02735 (3)             bra     RPICKN
                      (        forth.asm):02736         
F103 04               (        forth.asm):02737         QUIT    fcb     4               ANSI (Core)
F104 51554954         (        forth.asm):02738                 fcc     'QUIT'          ( -- )  ( R:  i*x -- )
F108 F0FB             (        forth.asm):02739                 fdb     INDK
                      (        forth.asm):02740                 RFCS
F10A 0F25             (        forth.asm):02741 (5)             clr     USTATE+1
F10C BDEBE3           (        forth.asm):02742                 RFXT    jsr,RCLR+7      XT for RCLR
F10F 10CE8000         (        forth.asm):02743 (4)             lds     #RAMSTRT+RAMSIZE Reset the system stack pointer
F113 BDE2F7           (        forth.asm):02744 (7)             jsr     PUTCR
F116 7EE0B2           (        forth.asm):02745 (3)             jmp     INTERP
                      (        forth.asm):02746         
F119 05               (        forth.asm):02747         ABORT   fcb     5               ANSI (Core)
F11A 41424F5254       (        forth.asm):02748                 fcc     'ABORT'         ( i*x -- ) ( R: j*x -- )
F11F F103             (        forth.asm):02749                 fdb     QUIT
                      (        forth.asm):02750                 RFCS
F121 C603             (        forth.asm):02751 (2)             ldb     #3              User ABORT
F123 BDE74C           (        forth.asm):02752 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02753         
                      (        forth.asm):02754         * Implementation notes: GNU Forth, VFX and SwiftForth all report "invalid
                      (        forth.asm):02755         * memory address" for "0 FIND". Also the counted string at c-addr is not
                      (        forth.asm):02756         * scanned for leading spaces. If the counted string byte count is zero, the
                      (        forth.asm):02757         * string will be not found and the dictionary not searched at all.
F126 04               (        forth.asm):02758         FIND    fcb     4               ANSI (Core)
F127 46494E44         (        forth.asm):02759                 fcc     'FIND'          ( c-addr -- c-addr 0  |  xt 1  |  xt -1 )
F12B F119             (        forth.asm):02760                 fdb     ABORT
                      (        forth.asm):02761                 RFCS
F12D BDE9C6           (        forth.asm):02762 (7)             jsr     MIN1PST
F130 AEC4             (        forth.asm):02763 (5+0)           ldx     ,u              TOS to X (Arg <c-addr>)
F132 2605             (        forth.asm):02764 (3)             bne     @afind1
F134 C60D             (        forth.asm):02765 (2)             ldb     #13             Illegal argument
F136 BDE74C           (        forth.asm):02766 (7)             jsr     ERRHDLR         No return
F139 6D84             (        forth.asm):02767 (5+0)   @afind1 tst     ,x
F13B 2605             (        forth.asm):02768 (3)             bne     @afind3         Character count is NZ, proceed
F13D 1FC1             (        forth.asm):02769 (4)     @afind2 tfr     0,x             Word not found
F13F 7EE7D6           (        forth.asm):02770 (3)             jmp     NPUSH
F142 DC02             (        forth.asm):02771 (4)     @afind3 ldd     TOKENSP
F144 3406             (        forth.asm):02772 (4+2)           pshs    d               Save TOKENSP to the system stack
F146 E680             (        forth.asm):02773 (4+1)           ldb     ,x+
F148 D742             (        forth.asm):02774 (3)             stb     CURTOKL
F14A 9F02             (        forth.asm):02775 (4)             stx     TOKENSP
F14C BDE4A2           (        forth.asm):02776 (7)             jsr     SWDIC1
F14F DC0E             (        forth.asm):02777 (4)             ldd     PLOAD           Retrieve word payload
F151 DD10             (        forth.asm):02778 (4)             std     FNDPLD          Make it accessible through PAYLOAD
F153 3506             (        forth.asm):02779 (4+2)           puls    d
F155 DD02             (        forth.asm):02780 (4)             std     TOKENSP         Restore TOKENSP from the system stack
                      (        forth.asm):02781         * If the word is not found, Y is 0 and we ought to branch back to that context.
F157 1037C2           (        forth.asm):02782 (4)             cmpr    0,y
F15A 27E1             (        forth.asm):02783 (3)             beq     @afind2
                      (        forth.asm):02784         * Word was found, push the corresponding XT (in Y) to the data stack (in place).
F15C 10AFC4           (        forth.asm):02785 (6+0)           sty     ,u
F15F 8EFFFF           (        forth.asm):02786 (3)             ldx     #-1             Assume non-immediate
F162 0D44             (        forth.asm):02787 (4)             tst     IMDFLG
F164 2702             (        forth.asm):02788 (3)             beq     @afind4
F166 3002             (        forth.asm):02789 (4+1)           leax    2,x             #1 to X
F168 7EE7D6           (        forth.asm):02790 (3)     @afind4 jmp     NPUSH
                      (        forth.asm):02791         
F16B 01               (        forth.asm):02792         RBRACK  fcb     1               ANSI (Core)
F16C 5D               (        forth.asm):02793                 fcc     ']'             ( -- )
F16D F126             (        forth.asm):02794                 fdb     FIND
                      (        forth.asm):02795                 RFCS
F16F 86FF             (        forth.asm):02796 (2)             lda     #-1
F171 9725             (        forth.asm):02797 (3)     RBRACK1 sta     USTATE+1
F173 39               (        forth.asm):02798 (4)             rts
                      (        forth.asm):02799         
                      (        forth.asm):02800         * Note: the standard does not mandate that this primitive be executed in
                      (        forth.asm):02801         * definitions only. IMHO, it ought to, therefore I am forcing the C bit here.
F174 C1               (        forth.asm):02802         LBRACK  fcb     $C1             ANSI (Core)
F175 5B               (        forth.asm):02803                 fcc     '['             ( -- )
F176 F16B             (        forth.asm):02804                 fdb     RBRACK
                      (        forth.asm):02805                 RFCS
F178 4F               (        forth.asm):02806 (1)             clra
F179 20F6             (        forth.asm):02807 (3)             bra     RBRACK1
                      (        forth.asm):02808         
                      (        forth.asm):02809         * Functionally:
                      (        forth.asm):02810         * : ' BL WORD FIND IF
                      (        forth.asm):02811         *     EXIT                      \ XT is left on the data stack
                      (        forth.asm):02812         *   THEN
                      (        forth.asm):02813         *   DROP 0 ;
                      (        forth.asm):02814         * There is a little extra complexity here because the standard requires
                      (        forth.asm):02815         * an error condition to be triggered if the word is not found.
F17B 01               (        forth.asm):02816         TICK    fcb     1               ANSI (Core)
F17C 27               (        forth.asm):02817                 fcb     $27             ( "<spaces>name" -- xt )
F17D F174             (        forth.asm):02818                 fdb     LBRACK
                      (        forth.asm):02819                 RFCS
F17F BDF6FB           (        forth.asm):02820                 RFXT    jsr,BL+5
F182 BDF2F6           (        forth.asm):02821                 RFXT    jsr,WORD+7
F185 8DA6             (        forth.asm):02822                 RFXT    bsr,FIND+7
                      (        forth.asm):02823         * We have at least two cells returned by the ANS94 FIND on the data stack.
F187 ECC4             (        forth.asm):02824 (5+0)           ldd     ,u              TOS to D (ANS94 FIND flag)
F189 2703             (        forth.asm):02825 (3)             beq     @nfound         Target word was not found
F18B 3342             (        forth.asm):02826 (4+1)           leau    2,u             Drop the flag and return the XT
F18D 39               (        forth.asm):02827 (4)             rts
F18E 3344             (        forth.asm):02828 (4+1)   @nfound leau    4,u             Drop two cells from the data stack
F190 9E02             (        forth.asm):02829 (4)             ldx     TOKENSP
F192 BDE384           (        forth.asm):02830 (7)             jsr     SCNSTOK         Needed to skip leading spaces
F195 C602             (        forth.asm):02831 (2)             ldb     #2              Word not found
F197 BDE74C           (        forth.asm):02832 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02833         
                      (        forth.asm):02834         * Functionally: : ['] ' POSTPONE LITERAL ; IMMEDIATE RESTRICT
F19A C3               (        forth.asm):02835         BKQUOT  fcb     $C3             ANSI (Core)
F19B 5B275D           (        forth.asm):02836                 fcb     $5B,$27,$5D     Comp: ( "<spaces>name" -- )
F19E F17B             (        forth.asm):02837                 fdb     TICK            Exec: ( -- xt )
                      (        forth.asm):02838                 RFCS
F1A0 8DDD             (        forth.asm):02839                 RFXT    bsr,TICK+4      XT for '
                      (        forth.asm):02840         * Data stack topmost cell has the target word address.
F1A2 7EEC5F           (        forth.asm):02841                 RFXT    jmp,LITERAL+10  XT for LITERAL
                      (        forth.asm):02842         
F1A5 C8               (        forth.asm):02843         POSTPON fcb     $C8             ANSI (Core) Not a straight alias to [COMPILE]
F1A6 504F5354504F4E45 (        forth.asm):02844                 fcc     'POSTPONE'      ( "<spaces>name" -- )
F1AE F19A             (        forth.asm):02845                 fdb     BKQUOT          Non-immediate words deserve special treatment
                      (        forth.asm):02846                 RFCS
F1B0 BDE86A           (        forth.asm):02847 (7)             jsr     BKIN2PT         Derive X from BLK, >IN
F1B3 BDE384           (        forth.asm):02848 (7)             jsr     SCNSTOK
F1B6 2605             (        forth.asm):02849 (3)             bne     @postp1
F1B8 C605             (        forth.asm):02850 (2)             ldb     #5              Missing word name
F1BA BDE74C           (        forth.asm):02851 (7)             jsr     ERRHDLR         No return
F1BD BDE49D           (        forth.asm):02852 (7)     @postp1 jsr     SWDIC
F1C0 2607             (        forth.asm):02853 (3)             bne     @postp2         Word found. Code address returned in Y
F1C2 9E02             (        forth.asm):02854 (4)             ldx     TOKENSP
F1C4 C602             (        forth.asm):02855 (2)             ldb     #2              Undefined (X points to the offending word)
F1C6 BDE74C           (        forth.asm):02856 (7)             jsr     ERRHDLR         No return
F1C9 1F21             (        forth.asm):02857 (4)     @postp2 tfr     y,x             X has the actual execution token
F1CB 0D44             (        forth.asm):02858 (4)             tst     IMDFLG
F1CD 2708             (        forth.asm):02859 (3)             beq     @postp4         Target word is not immediate
F1CF BDE152           (        forth.asm):02860 (7)     @postp3 jsr     EMXASXT         Set as action component
F1D2 DC02             (        forth.asm):02861 (4)             ldd     TOKENSP         Updated by SWDIC if the word was found
F1D4 7EE161           (        forth.asm):02862 (3)             jmp     U2INFRD         Derive >IN from D
                      (        forth.asm):02863         * The word being considered is non-immediate. The equivalent input should be:
                      (        forth.asm):02864         * ['] <word> COMPILE, We have the XT for <word> in X.
F1D7 BDE566           (        forth.asm):02865 (7)     @postp4 jsr     LITER
F1DA 8EF1EA           (        forth.asm):02866                 RFXT    ldx,#CMPCOMA+11 XT for COMPILE,
F1DD 20F0             (        forth.asm):02867 (3)             bra     @postp3
                      (        forth.asm):02868         
                      (        forth.asm):02869         * GNU Forth has this as non-immediate so I am going for it as well.
F1DF 48               (        forth.asm):02870         CMPCOMA fcb     $48             ANSI (Core Ext)
F1E0 434F4D50494C452C (        forth.asm):02871                 fcc     'COMPILE,'      ( XT -- )
F1E8 F1A5             (        forth.asm):02872                 fdb     POSTPON
                      (        forth.asm):02873                 RFCS
F1EA BDE7E4           (        forth.asm):02874 (7)             jsr     NPOP            Execution token to X
F1ED 7EE152           (        forth.asm):02875 (3)             jmp     EMXASXT
                      (        forth.asm):02876         
                      (        forth.asm):02877         * As per the standard, : is not immediate. This allows for further interesting
                      (        forth.asm):02878         * developments, like tracing words execution...
F1F0 01               (        forth.asm):02879         COMPC   fcb     $1              ANSI (Core)
F1F1 3A               (        forth.asm):02880                 fcc     ':'             Comp: ( "<spaces>name" -- )
F1F2 F1DF             (        forth.asm):02881                 fdb     CMPCOMA
                      (        forth.asm):02882                 RFCS
F1F4 0F34             (        forth.asm):02883 (5)             clr     ANCMPF
F1F6 CCFFFF           (        forth.asm):02884 (3)     COMPC1  ldd     #-1
F1F9 9725             (        forth.asm):02885 (3)             sta     USTATE+1
F1FB 1043             (        forth.asm):02886 (2)             comd                    0 to D
F1FD 9735             (        forth.asm):02887 (3)             sta     BALNCD
F1FF DD14             (        forth.asm):02888 (4)             std     JSRLAST
F201 DD16             (        forth.asm):02889 (4)             std     FWDREF
F203 0D34             (        forth.asm):02890 (4)             tst     ANCMPF          Anonymous compilation?
F205 2603             (        forth.asm):02891 (3)             bne     @isanon
F207 7EE50B           (        forth.asm):02892 (3)             jmp     LOCWRT
F20A 9E08             (        forth.asm):02893 (4)     @isanon ldx     DICEND
F20C 9F0C             (        forth.asm):02894 (4)             stx     BDICEND         Backup HERE
F20E 9F12             (        forth.asm):02895 (4)             stx     RECADDR         Should RECURSE by used by a :NONAME definition
F210 39               (        forth.asm):02896 (4)             rts
                      (        forth.asm):02897         
F211 07               (        forth.asm):02898         NONAME  fcb     $7              ANSI (Core ext)
F212 3A4E4F4E414D45   (        forth.asm):02899                 fcc     ':NONAME'
F219 F1F0             (        forth.asm):02900                 fdb     COMPC
                      (        forth.asm):02901                 RFCS
F21B 8601             (        forth.asm):02902 (2)             lda     #1
F21D 9734             (        forth.asm):02903 (3)             sta     ANCMPF          Set the anonymous compilation flag
F21F 20D5             (        forth.asm):02904 (3)             bra     COMPC1
                      (        forth.asm):02905         
                      (        forth.asm):02906         * Tail call optimization notes:
                      (        forth.asm):02907         * 1: if JSRLAST is 0, emit an RTS, the end.
                      (        forth.asm):02908         * 2: if HERE - 3 == JSRLAST: replace JSR by a JMP.
                      (        forth.asm):02909         * 3: if FWDREF == HERE, emit an RTS.
                      (        forth.asm):02910         * The end means finalize with DEBUG code and an update of HERE (DICEND).
F221 C1               (        forth.asm):02911         COMPR   fcb     $C1             ANSI (Core)
F222 3B               (        forth.asm):02912                 fcc     ';'
F223 F211             (        forth.asm):02913                 fdb     NONAME
                      (        forth.asm):02914                 RFCS
F225 BDE82B           (        forth.asm):02915 (7)             jsr     BALCHK          Check for unbalanced constructs
F228 0F25             (        forth.asm):02916 (5)             clr     USTATE+1        Back to interpretation mode
                      (        forth.asm):02917         * Do not restore LSTWAD if we came from :NONAME.
F22A 9E0C             (        forth.asm):02918 (4)             ldx     BDICEND         X as HERE when : (LOCWRT) or :NONAME was called
F22C 0D34             (        forth.asm):02919 (4)             tst     ANCMPF
F22E 2604             (        forth.asm):02920 (3)             bne     @wasano
F230 9F06             (        forth.asm):02921 (4)             stx     LSTWAD          Update LAST
F232 2005             (        forth.asm):02922 (3)             bra     @cont
F234 0F34             (        forth.asm):02923 (5)     @wasano clr     ANCMPF
F236 BDE7D6           (        forth.asm):02924 (7)             jsr     NPUSH           Anonynous execution token to the data stack
F239 9E08             (        forth.asm):02925 (4)     @cont   ldx     DICEND          HERE to X
                      (        forth.asm):02926         * Optimization: replace the last JSR by a JMP, if possible.
F23B DC14             (        forth.asm):02927 (4)             ldd     JSRLAST
F23D 2713             (        forth.asm):02928 (3)             beq     @rtsreq         Case #1
F23F 311D             (        forth.asm):02929 (4+1)           leay    -3,x            Y has HERE - 3, D has JSRLAST
F241 103702           (        forth.asm):02930 (4)             cmpr    d,y
F244 260C             (        forth.asm):02931 (3)             bne     @rtsreq
                      (        forth.asm):02932         * Tail call optimization applies (Case #2).
F246 867E             (        forth.asm):02933 (2)             lda     #JMPOPC
F248 A7A4             (        forth.asm):02934 (4+0)           sta     ,y
F24A 109E16           (        forth.asm):02935 (5)             ldy     FWDREF
F24D 103712           (        forth.asm):02936 (4)             cmpr    x,y
F250 2604             (        forth.asm):02937 (3)             bne     @finalz         Case #3
F252 8639             (        forth.asm):02938 (2)     @rtsreq lda     #RTSOPC         RTS inherent
F254 A780             (        forth.asm):02939 (4+1)           sta     ,x+
F256                  (        forth.asm):02940         @finalz
                      (        forth.asm):02941                 IFNE    DEBUG
                      (        forth.asm):02942                 lda     #ILLOPC         Illegal opcode
                      (        forth.asm):02943                 sta     ,x+
                      (        forth.asm):02944                 ENDC                    DEBUG
F256 9F08             (        forth.asm):02945 (4)             stx     DICEND          Update HERE
                      (        forth.asm):02946                 IFNE    RELFEAT
                      (        forth.asm):02947                 RFXT    jsr,MONITOR+10  XT for MONITOR. All : words are candidates
                      (        forth.asm):02948         *                               for integrity check by ICHECK.
                      (        forth.asm):02949                 ENDC                    RELFEAT
F258 39               (        forth.asm):02950 (4)             rts
                      (        forth.asm):02951         
F259 C7               (        forth.asm):02952         RECURSE fcb     $C7             ANSI (Core)
F25A 52454355525345   (        forth.asm):02953                 fcc     'RECURSE'       ( -- )
F261 F221             (        forth.asm):02954                 fdb     COMPR
                      (        forth.asm):02955                 RFCS
F263 9E12             (        forth.asm):02956 (4)             ldx     RECADDR         Set up by LOCWRT
F265 7EE152           (        forth.asm):02957 (3)             jmp     EMXASXT         Set as action component
                      (        forth.asm):02958         
F268 06               (        forth.asm):02959         MARKER  fcb     6               ANSI (Tools ext)
F269 4D41524B4552     (        forth.asm):02960                 fcc     'MARKER'
F26F F259             (        forth.asm):02961                 fdb     RECURSE
                      (        forth.asm):02962                 RFCS
F271 109E08           (        forth.asm):02963 (5)             ldy     DICEND          HERE
F274 9E06             (        forth.asm):02964 (4)             ldx     LSTWAD          LAST
F276 3430             (        forth.asm):02965 (4+4)           pshs    y,x             Preserve essential dictionary pointers
F278 BDE50B           (        forth.asm):02966 (7)             jsr     LOCWRT          No pre-req on input, does all the heavy lifting
                      (        forth.asm):02967         
                      (        forth.asm):02968         * From here on, all we need to do is to emit the code necessary to restore
                      (        forth.asm):02969         * DICEND (2,s) and LSTWAD (,s). Y has HERE, as of right now.
F27B AE62             (        forth.asm):02970 (5+1)           ldx     2,s             Saved HERE to X
F27D 868E             (        forth.asm):02971 (2)             lda     #LDXOPC
F27F BDE57D           (        forth.asm):02972 (7)             jsr     VARCON2
F282 CC9F08           (        forth.asm):02973 (3)             ldd     #($9F*256)|(DICEND-VARSPC)
F285 EDA1             (        forth.asm):02974 (5+2)           std     ,y++            Compile stx DICEND (direct page)
                      (        forth.asm):02975         
F287 AEE4             (        forth.asm):02976 (5+0)           ldx     ,s              Saved LAST to X
F289 868E             (        forth.asm):02977 (2)             lda     #LDXOPC
F28B BDE57D           (        forth.asm):02978 (7)             jsr     VARCON2
F28E CC9F06           (        forth.asm):02979 (3)             ldd     #($9F*256)|(LSTWAD-VARSPC)
F291 EDA1             (        forth.asm):02980 (5+2)           std     ,y++            Compile stx LSTWAD (direct page)
                      (        forth.asm):02981         
F293 8639             (        forth.asm):02982 (2)             lda     #RTSOPC
F295 A7A0             (        forth.asm):02983 (4+1)           sta     ,y+             Emit an RTS
F297 3264             (        forth.asm):02984 (4+1)           leas    4,s             Drop material previously on the system stack
F299 7EEC21           (        forth.asm):02985 (3)             jmp     CREAT1          Finalize dictionary entry
                      (        forth.asm):02986         
F29C 07               (        forth.asm):02987         EXCT    fcb     7               ANSI (Core)
F29D 45584543555445   (        forth.asm):02988                 fcc     'EXECUTE'       ( i*x xt -- j*x )
F2A4 F268             (        forth.asm):02989                 fdb     MARKER
                      (        forth.asm):02990                 RFCS
F2A6 BDE7E4           (        forth.asm):02991 (7)             jsr     NPOP            Although the standard does not specify that
F2A9 2702             (        forth.asm):02992 (3)             beq     @exct1          a NUL address should trigger an error, I do
F2AB 1F15             (        forth.asm):02993 (4)             tfr     x,pc            Branch to the XT
F2AD C60D             (        forth.asm):02994 (2)     @exct1  ldb     #13             Illegal argument
F2AF BDE74C           (        forth.asm):02995 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02996         
F2B2 03               (        forth.asm):02997         BYE     fcb     3               ANSI (Programming tools ext)
F2B3 425945           (        forth.asm):02998                 fcc     'BYE'
F2B6 F29C             (        forth.asm):02999                 fdb     EXCT
                      (        forth.asm):03000                 RFCS
                      (        forth.asm):03001                 IFNE    RTCFEAT
                      (        forth.asm):03002                 lda     #RTOREGB
                      (        forth.asm):03003                 jsr     RTREGRD         RTCB register to B
                      (        forth.asm):03004                 andb    #^RTBPIE        Disable periodic interrupt generation
                      (        forth.asm):03005                 jsr     RTREGWR
                      (        forth.asm):03006                 ldx     #40
                      (        forth.asm):03007                 jsr     MILLIS1         Wait for 40 milliseconds
                      (        forth.asm):03008                 orcc    #(FFLAG|IFLAG)  Disable maskable interrupts
                      (        forth.asm):03009                 ENDC                    RTCFEAT
F2B8 7EE037           (        forth.asm):03010 (3)             jmp     RSTHDL
                      (        forth.asm):03011         
F2BB C6               (        forth.asm):03012         BKCHAR  fcb     $C6             ANSI (Core)
F2BC 5B434841525D     (        forth.asm):03013                 fcc     '[CHAR]'        Comp: ( "<spaces>name" -- )
F2C2 F2B2             (        forth.asm):03014                 fdb     BYE             Exec: ( -- char )
                      (        forth.asm):03015                 RFCS
F2C4 8D0A             (        forth.asm):03016                 RFXT    bsr,CHAR+7      XT for CHAR
F2C6 7EEC5F           (        forth.asm):03017                 RFXT    jmp,LITERAL+10  XT for LITERAL
                      (        forth.asm):03018         
F2C9 04               (        forth.asm):03019         CHAR    fcb     4               ANSI (Core)
F2CA 43484152         (        forth.asm):03020                 fcc     'CHAR'          ( "<spaces>name" -- char )
F2CE F2BB             (        forth.asm):03021                 fdb     BKCHAR
                      (        forth.asm):03022                 RFCS
F2D0 BDE86A           (        forth.asm):03023 (7)             jsr     BKIN2PT         Derive X from BLK, >IN
F2D3 BDE384           (        forth.asm):03024 (7)     @char1  jsr     SCNSTOK         X points to the beginning of the character
F2D6 2712             (        forth.asm):03025 (3)             beq     @chrerr
F2D8 E684             (        forth.asm):03026 (4+0)           ldb     ,x
F2DA 4F               (        forth.asm):03027 (1)             clra                    D has CHAR
F2DB 1F01             (        forth.asm):03028 (4)             tfr     d,x
F2DD BDE7D6           (        forth.asm):03029 (7)             jsr     NPUSH
F2E0 9E02             (        forth.asm):03030 (4)             ldx     TOKENSP         Set by SCNSTOK
F2E2 BDE397           (        forth.asm):03031 (7)             jsr     SCNETOK
F2E5 1F10             (        forth.asm):03032 (4)             tfr     x,d             TOKENEP
F2E7 7EE161           (        forth.asm):03033 (3)             jmp     U2INFRD         Derive >IN from D
F2EA C60D             (        forth.asm):03034 (2)     @chrerr ldb     #13             Illegal argument
F2EC BDE74C           (        forth.asm):03035 (7)             jsr     ERRHDLR
                      (        forth.asm):03036         * No return.
                      (        forth.asm):03037         
                      (        forth.asm):03038         * Hairy code but working.
F2EF 04               (        forth.asm):03039         WORD    fcb     4               ANSI (Core)
F2F0 574F5244         (        forth.asm):03040                 fcc     'WORD'          ( char "<chars>ccc<char>" -- c-addr )
F2F4 F2C9             (        forth.asm):03041                 fdb     CHAR
                      (        forth.asm):03042                 RFCS
F2F6 0F4B             (        forth.asm):03043 (5)             clr     SQUOTFN         Do not skip leading delimiter(s)
F2F8 BDE7E4           (        forth.asm):03044 (7)     WORD1   jsr     NPOP            Entry point for S"
F2FB 1F16             (        forth.asm):03045 (4)             tfr     x,w             F has the delimiter ASCII code
F2FD 109E08           (        forth.asm):03046 (5)             ldy     DICEND          The counted string returned is stored at HERE
F300 3420             (        forth.asm):03047 (4+2)           pshs    y
F302 6FA0             (        forth.asm):03048 (6+1)           clr     ,y+             Initialize its length
F304 BDE86A           (        forth.asm):03049 (7)             jsr     BKIN2PT         Derive X from BLK, >IN
F307 BDE3AF           (        forth.asm):03050 (7)     @word1  jsr     NXTCHAR         Current input char to A unless ZFLAG is set
F30A 271B             (        forth.asm):03051 (3)             beq     @word3          EOL reached, this is the end
F30C 0D4B             (        forth.asm):03052 (4)             tst     SQUOTFN         S"/." context: do not look for a leading delim.
F30E 260C             (        forth.asm):03053 (3)             bne     @word2x
F310 1037F8           (        forth.asm):03054 (4)             cmpr    f,a             Leading delimiter matched?
F313 27F2             (        forth.asm):03055 (3)             beq     @word1          Yes, skip it (it might be repeated)
                      (        forth.asm):03056         * Either there was no leading delimiter or we went past the leading repetitions.
F315 301F             (        forth.asm):03057 (4+1)           leax    -1,x            Go back one char.
F317 BDE3AF           (        forth.asm):03058 (7)     @word2  jsr     NXTCHAR         Acquire next character from the input stream
F31A 270B             (        forth.asm):03059 (3)             beq     @word3          EOL reached
F31C 1037F8           (        forth.asm):03060 (4)     @word2x cmpr    f,a             Trailing delimiter?
F31F 2706             (        forth.asm):03061 (3)             beq     @word3
F321 A7A0             (        forth.asm):03062 (4+1)           sta     ,y+
F323 6CF4             (        forth.asm):03063 (6+3)           inc     [,s]            Increment string length
F325 20F0             (        forth.asm):03064 (3)             bra     @word2
F327 1F10             (        forth.asm):03065 (4)     @word3  tfr     x,d             Pointing one char after the delimiter or EOIS
F329 BDE161           (        forth.asm):03066 (7)             jsr     U2INFRD         Derive >IN from D
F32C 3510             (        forth.asm):03067 (4+2)           puls    x
F32E 3610             (        forth.asm):03068                 UCNPUSH                 Push back HERE
F330 39               (        forth.asm):03069 (4)             rts
                      (        forth.asm):03070         
F331 81               (        forth.asm):03071         LPAR    fcb     $81             ANSI (Core). No longer 79-STANDARD compliant
F332 28               (        forth.asm):03072                 fcc     '('             Exec: ( "ccc<paren>" -- )
F333 F2EF             (        forth.asm):03073                 fdb     WORD
                      (        forth.asm):03074                 RFCS
F335 8E0029           (        forth.asm):03075 (3)             ldx     #')
F338 BDE7D6           (        forth.asm):03076 (7)             jsr     NPUSH
F33B 8DB9             (        forth.asm):03077                 RFXT    bsr,WORD+7
F33D 7EFC70           (        forth.asm):03078                 RFXT    jmp,DROP+7
                      (        forth.asm):03079         
F340 09               (        forth.asm):03080         SOURID  fcb     9               ANSI (Core ext)
F341 534F555243452D49 (        forth.asm):03081                 fcc     'SOURCE-ID'     ( -- 0 | -1 )
     44
F34A F331             (        forth.asm):03082                 fdb     LPAR
                      (        forth.asm):03083                 RFCS
F34C D64A             (        forth.asm):03084 (3)             ldb     SRCID
F34E 1D               (        forth.asm):03085 (1)             sex                     Sign extension B to D
F34F 1F01             (        forth.asm):03086 (4)             tfr     d,x
F351 7EE7D6           (        forth.asm):03087 (3)             jmp     NPUSH
                      (        forth.asm):03088         
F354 06               (        forth.asm):03089         SOURCE  fcb     6               ANSI (Core)
F355 534F55524345     (        forth.asm):03090                 fcc     'SOURCE'        ( -- c-addr u )
F35B F340             (        forth.asm):03091                 fdb     SOURID
                      (        forth.asm):03092                 RFCS
F35D 9E20             (        forth.asm):03093 (4)             ldx     BSBFADR         Where we're at, from a physical address point
F35F BDE7D6           (        forth.asm):03094 (7)             jsr     NPUSH
F362 9E26             (        forth.asm):03095 (4)             ldx     ISLEN           Input stream length
F364 7EE7D6           (        forth.asm):03096 (3)             jmp     NPUSH
                      (        forth.asm):03097         
                      (        forth.asm):03098         * This is a straightforward implementation borrowed from GNU Forth 'see \':
                      (        forth.asm):03099         * : \
                      (        forth.asm):03100         *   BLK @
                      (        forth.asm):03101         *   IF     >IN @ C/L / 1+ C/L * >IN ! EXIT
                      (        forth.asm):03102         *   THEN
                      (        forth.asm):03103         *   SOURCE >IN ! DROP ; IMMEDIATE
                      (        forth.asm):03104         * However since C/L (number of columns per line) is 64 (a power of 2), things
                      (        forth.asm):03105         * can be coded in a more compact manner as: >IN @ 63 INVERT AND 64 + >IN !
F367 81               (        forth.asm):03106         BKSLSH  fcb     $81             ANSI (Core Ext)
F368 5C               (        forth.asm):03107                 fcb     $5C             \ ( -- )
F369 F354             (        forth.asm):03108                 fdb     SOURCE
                      (        forth.asm):03109                 RFCS
F36B DC2C             (        forth.asm):03110 (4)             ldd     UBLK            BLK @ to D
F36D 270B             (        forth.asm):03111 (3)             beq     @comser         We operate from block 0: the console
F36F DC2A             (        forth.asm):03112 (4)             ldd     UTOIN           >IN @
F371 C4C0             (        forth.asm):03113 (2)             andb    #^$3F           Point to the beginning of the line
F373 CB40             (        forth.asm):03114 (2)             addb    #$40            next line
F375 8900             (        forth.asm):03115 (2)             adca    #0              Propagate potential carry from LSB
F377 DD2A             (        forth.asm):03116 (4)             std     UTOIN           >IN !
F379 39               (        forth.asm):03117 (4)             rts                     EXIT
F37A 8DE1             (        forth.asm):03118         @comser RFXT    bsr,SOURCE+9    XT for SOURCE
F37C BDE7E4           (        forth.asm):03119 (7)             jsr     NPOP
F37F 9F2A             (        forth.asm):03120 (4)             stx     UTOIN           >IN !
F381 7EFC70           (        forth.asm):03121                 RFXT    jmp,DROP+7      XT for DROP
                      (        forth.asm):03122                 ENDC
                      (        forth.asm):03123         
F384 82               (        forth.asm):03124         PSTR    fcb     $82             ANSI (Core)
F385 2E22             (        forth.asm):03125                 fcc     '."'            Comp: ( "ccc<quote>" -- )
F387 F367             (        forth.asm):03126                 fdb     BKSLSH          Exec: ( -- )
                      (        forth.asm):03127                 RFCS
F389 8D12             (        forth.asm):03128                 RFXT    bsr,SQUOTE+5    XT for S"
F38B 0D25             (        forth.asm):03129 (4)             tst     USTATE+1
F38D 2603             (        forth.asm):03130 (3)             bne     @pstcmp
F38F 7EF752           (        forth.asm):03131                 RFXT    jmp,TYPE+7      XT for TYPE
F392 8EF752           (        forth.asm):03132         @pstcmp RFXT    ldx,#TYPE+7     Emit TYPE as an XT
F395 7EE152           (        forth.asm):03133 (3)             jmp     EMXASXT
                      (        forth.asm):03134         
F398 82               (        forth.asm):03135         SQUOTE  fcb     $82             ANSI (Core)
F399 5322             (        forth.asm):03136                 fcc     'S"'            Comp: ( "ccc<quote>" -- )
F39B F384             (        forth.asm):03137                 fdb     PSTR            Exec: ( -- c-addr u )
                      (        forth.asm):03138                 RFCS
F39D 8601             (        forth.asm):03139 (2)             lda     #1
F39F 974B             (        forth.asm):03140 (3)             sta     SQUOTFN         Do skip leading delimiter(s)
F3A1 0D25             (        forth.asm):03141 (4)             tst     USTATE+1
F3A3 260C             (        forth.asm):03142 (3)             bne     @sqcmp
F3A5 8E0022           (        forth.asm):03143 (3)             ldx     #'"             We are interpreting
F3A8 BDE7D6           (        forth.asm):03144 (7)             jsr     NPUSH
F3AB BDF2F8           (        forth.asm):03145 (7)             jsr     WORD1
F3AE 7EF770           (        forth.asm):03146                 RFXT    jmp,COUNT+8     XT for COUNT
F3B1 109E08           (        forth.asm):03147 (5)     @sqcmp  ldy     DICEND          We are compiling
F3B4 867E             (        forth.asm):03148 (2)             lda     #JMPOPC         JMP extended
F3B6 A7A0             (        forth.asm):03149 (4+1)           sta     ,y+
F3B8 3420             (        forth.asm):03150 (4+2)           pshs    y
F3BA 3122             (        forth.asm):03151 (4+1)           leay    2,y             2 ALLOT
F3BC 109F08           (        forth.asm):03152 (5)             sty     DICEND
F3BF 8E0022           (        forth.asm):03153 (3)             ldx     #'"
F3C2 BDE7D6           (        forth.asm):03154 (7)             jsr     NPUSH
F3C5 BDF2F8           (        forth.asm):03155 (7)             jsr     WORD1
F3C8 BDE7E4           (        forth.asm):03156 (7)             jsr     NPOP
F3CB 4F               (        forth.asm):03157 (1)             clra
F3CC E684             (        forth.asm):03158 (4+0)           ldb     ,x              C@
F3CE 3001             (        forth.asm):03159 (4+1)           leax    1,x             1+. Skip the byte count (X has HERE)
F3D0 308B             (        forth.asm):03160 (4+2)           leax    d,x             Skip string length material
F3D2 3520             (        forth.asm):03161 (4+2)           puls    y
F3D4 AFA4             (        forth.asm):03162 (5+0)           stx     ,y              Install jump address
F3D6 3122             (        forth.asm):03163 (4+1)           leay    2,y             Counted string base address to Y
F3D8 868E             (        forth.asm):03164 (2)             lda     #LDXOPC
F3DA A780             (        forth.asm):03165 (4+1)           sta     ,x+
F3DC 10AF81           (        forth.asm):03166 (6+2)           sty     ,x++
F3DF 9F08             (        forth.asm):03167 (4)             stx     DICEND          Update HERE
F3E1 8EE7D6           (        forth.asm):03168 (3)             ldx     #NPUSH
F3E4 BDE152           (        forth.asm):03169 (7)             jsr     EMXASXT
F3E7 8EF770           (        forth.asm):03170                 RFXT    ldx,#COUNT+8    XT for COUNT
F3EA 7EE152           (        forth.asm):03171 (3)             jmp     EMXASXT
                      (        forth.asm):03172         
F3ED 02               (        forth.asm):03173         DPLUS   fcb     2               ANSI (Double)
F3EE 442B             (        forth.asm):03174                 fcc     'D+'            ( d1 d2 -- d1+d2--signed )
F3F0 F398             (        forth.asm):03175                 fdb     SQUOTE          In processor's terms U has ( L1 H1 L2 H2 )
                      (        forth.asm):03176                 RFCS
F3F2 BDE9D5           (        forth.asm):03177 (7)             jsr     MIN4PST         Make sure we have at least 4 cells stacked up
F3F5 EC46             (        forth.asm):03178 (5+1)           ldd     6,u             L1
F3F7 E342             (        forth.asm):03179 (5+1)           addd    2,u             L2
F3F9 ED46             (        forth.asm):03180 (5+1)           std     6,u             d1+d2 least significant cell
F3FB EC44             (        forth.asm):03181 (5+1)           ldd     4,u             H1
F3FD 10A9C4           (        forth.asm):03182 (6+0)           adcd    ,u              H2 (add with carry bit)
F400 ED44             (        forth.asm):03183 (5+1)           std     4,u             d1+d2 most significant cell
F402 3344             (        forth.asm):03184 (4+1)           leau    4,u             Drop 2 cells from the data stack
F404 39               (        forth.asm):03185 (4)             rts
                      (        forth.asm):03186         
F405 07               (        forth.asm):03187         DNEG    fcb     7               ANSI (Double)
F406 444E4547415445   (        forth.asm):03188                 fcc     'DNEGATE'
F40D F3ED             (        forth.asm):03189                 fdb     DPLUS
                      (        forth.asm):03190                 RFCS
F40F BDE9CB           (        forth.asm):03191 (7)             jsr     MIN2PST         We need at least 2 cells stacked up
F412 10A642           (        forth.asm):03192 (6+1)           ldw     2,u             Least significant cell
F415 1053             (        forth.asm):03193 (2)             comw
F417 ECC4             (        forth.asm):03194 (5+0)           ldd     ,u              Most significant cell
F419 1043             (        forth.asm):03195 (2)             comd
F41B 108B0001         (        forth.asm):03196 (4)             addw    #1
F41F 10890000         (        forth.asm):03197 (4)             adcd    #0              Propagate carry flag
F423 10EDC4           (        forth.asm):03198 (8+0)           stq     ,u              Store the result back to the data stack
F426 39               (        forth.asm):03199 (4)             rts
                      (        forth.asm):03200         
F427 02               (        forth.asm):03201         DMINUS  fcb     2               ANSI (Double)
F428 442D             (        forth.asm):03202                 fcc     'D-'            ( d1 d2 -- d1-d2--signed )
F42A F405             (        forth.asm):03203                 fdb     DNEG            In processor's terms U has ( L1 H1 L2 H2)
                      (        forth.asm):03204                 RFCS
F42C BDE9D5           (        forth.asm):03205 (7)             jsr     MIN4PST         Make sure we have at least 4 cells stacked up
F42F EC46             (        forth.asm):03206 (5+1)           ldd     6,u             L1
F431 A342             (        forth.asm):03207 (5+1)           subd    2,u             L2
F433 ED46             (        forth.asm):03208 (5+1)           std     6,u             d1-d2 least significant cell
F435 EC44             (        forth.asm):03209 (5+1)           ldd     4,u             H1
F437 10A2C4           (        forth.asm):03210 (6+0)           sbcd    ,u              H2 (substract with borrow)
F43A ED44             (        forth.asm):03211 (5+1)           std     4,u             d1-d2 most significant cell
F43C 3344             (        forth.asm):03212 (4+1)           leau    4,u
F43E 39               (        forth.asm):03213 (4)             rts
                      (        forth.asm):03214         
F43F 03               (        forth.asm):03215         DZEQ    fcb     3               ANSI (Double)
F440 44303D           (        forth.asm):03216                 fcc     'D0='           ( d -- flag )
F443 F427             (        forth.asm):03217                 fdb     DMINUS
                      (        forth.asm):03218                 RFCS
F445 BDEED5           (        forth.asm):03219                 RFXT    jsr,OR+5        XT for OR
F448 7EEF41           (        forth.asm):03220                 RFXT    jmp,NULP+5      XT for 0=
                      (        forth.asm):03221         
                      (        forth.asm):03222         * GNU Forth has:
                      (        forth.asm):03223         * f = FLAG(d1.hi==d2.hi ? d1.lo<d2.lo : d1.hi<d2.hi);
                      (        forth.asm):03224         * Comparisons between high cells are signed, but they are unsigned between
                      (        forth.asm):03225         * the low cells.
F44B 02               (        forth.asm):03226         DLESS   fcb     2               ANSI (Double)
F44C 443C             (        forth.asm):03227                 fcc     'D<'            ( d1 d2 -- flag )
F44E F43F             (        forth.asm):03228                 fdb     DZEQ
                      (        forth.asm):03229                 RFCS
F450 BDE9D5           (        forth.asm):03230 (7)             jsr     MIN4PST
                      (        forth.asm):03231         * Data stack structure at this point:
                      (        forth.asm):03232         * ,u    d2.hi                   1 cell
                      (        forth.asm):03233         * 2,u   d2.lo                   1 cell
                      (        forth.asm):03234         * 4,u   d1.hi                   1 cell
                      (        forth.asm):03235         * 6,u   d1.lo                   1 cell
F453 115F             (        forth.asm):03236 (2)             clrf                    A priori return value for FLAG
F455 ECC4             (        forth.asm):03237 (5+0)           ldd     ,u              D2.HI
F457 10A344           (        forth.asm):03238 (6+1)           cmpd    4,u             D1.HI
F45A 2611             (        forth.asm):03239 (3)             bne     @term2
F45C EC42             (        forth.asm):03240 (5+1)           ldd     2,u             D2.LO
F45E 10A346           (        forth.asm):03241 (6+1)           cmpd    6,u             D1.LO
F461 2302             (        forth.asm):03242 (3)             bls     @done
F463 115A             (        forth.asm):03243 (2)     @anstru decf                    #$FF to F
F465 1FF9             (        forth.asm):03244 (4)     @done   tfr     f,b
F467 1D               (        forth.asm):03245 (1)             sex                     Sign extension B to D
F468 ED46             (        forth.asm):03246 (5+1)           std     6,u             FLAG returned as a cell
F46A 3346             (        forth.asm):03247 (4+1)           leau    6,u             Drop three cells from the data stack
F46C 39               (        forth.asm):03248 (4)             rts
F46D 2FF6             (        forth.asm):03249 (3)     @term2  ble     @done
F46F 20F2             (        forth.asm):03250 (3)             bra     @anstru
                      (        forth.asm):03251         
F471 05               (        forth.asm):03252         TWOOVER fcb     5               ANSI (Core)
F472 324F564552       (        forth.asm):03253                 fcc     '2OVER'         ( d1 d2 -- d1 d2 d1 )
F477 F44B             (        forth.asm):03254                 fdb     DLESS
                      (        forth.asm):03255                 RFCS
F479 BDE9D5           (        forth.asm):03256 (7)             jsr     MIN4PST         At least four cells need to be stacked up
F47C 10EC44           (        forth.asm):03257 (8+1)           ldq     4,u             D:W has MSC:LSC of D1
F47F 1F61             (        forth.asm):03258 (4)             tfr     w,x
F481 BDE7D6           (        forth.asm):03259 (7)             jsr     NPUSH
F484 1F01             (        forth.asm):03260 (4)             tfr     d,x
F486 7EE7D6           (        forth.asm):03261 (3)             jmp     NPUSH
                      (        forth.asm):03262         
F489 05               (        forth.asm):03263         TWOSWAP fcb     5               ANSI (Core)
F48A 3253574150       (        forth.asm):03264                 fcc     '2SWAP'         ( d1 d2 -- d2 d1 )
F48F F471             (        forth.asm):03265                 fdb     TWOOVER
                      (        forth.asm):03266                 RFCS
F491 BDE9D5           (        forth.asm):03267 (7)             jsr     MIN4PST         At least four cells must be stacked up
F494 AE44             (        forth.asm):03268 (5+1)           ldx     4,u             D1 most significant cell
F496 10AE46           (        forth.asm):03269 (6+1)           ldy     6,u             D1 least significant cell
F499 10ECC4           (        forth.asm):03270 (8+0)           ldq     ,u              D:W has MSC:LSC of D2
F49C 10ED44           (        forth.asm):03271 (8+1)           stq     4,u
F49F AFC4             (        forth.asm):03272 (5+0)           stx     ,u
F4A1 10AF42           (        forth.asm):03273 (6+1)           sty     2,u
F4A4 39               (        forth.asm):03274 (4)             rts
                      (        forth.asm):03275         
F4A5 05               (        forth.asm):03276         TWODROP fcb     5               ANSI (Core)
F4A6 3244524F50       (        forth.asm):03277                 fcc     '2DROP'         ( x1 x2 -- )
F4AB F489             (        forth.asm):03278                 fdb     TWOSWAP
                      (        forth.asm):03279                 RFCS
F4AD BDE9CB           (        forth.asm):03280 (7)             jsr     MIN2PST         At least two cells must be stacked up
F4B0 3344             (        forth.asm):03281 (4+1)           leau    4,u
F4B2 39               (        forth.asm):03282 (4)             rts
                      (        forth.asm):03283         
F4B3 04               (        forth.asm):03284         TWODUP  fcb     4               ANSI (Core)
F4B4 32445550         (        forth.asm):03285                 fcc     '2DUP'          ( double -- double double )
F4B8 F4A5             (        forth.asm):03286                 fdb     TWODROP
                      (        forth.asm):03287                 RFCS
F4BA BDE9CB           (        forth.asm):03288 (7)             jsr     MIN2PST         At least two cells need to be stacked up
F4BD 10ECC4           (        forth.asm):03289 (8+0)           ldq     ,u              D:W has MSC:LSC of DOUBLE
F4C0 1F61             (        forth.asm):03290 (4)             tfr     w,x
F4C2 BDE7D6           (        forth.asm):03291 (7)             jsr     NPUSH
F4C5 1F01             (        forth.asm):03292 (4)             tfr     d,x
F4C7 7EE7D6           (        forth.asm):03293 (3)             jmp     NPUSH
                      (        forth.asm):03294         
F4CA 02               (        forth.asm):03295         TWOSTOR fcb     2               ANSI (Core)
F4CB 3221             (        forth.asm):03296                 fcc     '2!'            ( x1 x2 a-addr -- )
F4CD F4B3             (        forth.asm):03297                 fdb     TWODUP
                      (        forth.asm):03298                 RFCS
F4CF BDE9D0           (        forth.asm):03299 (7)             jsr     MIN3PST         At least three cells need to be stacked up
F4D2 10EC42           (        forth.asm):03300 (8+1)           ldq     2,u             DOUBLE to D:W
F4D5 10EDD4           (        forth.asm):03301 (8+3)           stq     [,u]            Store DOUBLE to ADDR
F4D8 3346             (        forth.asm):03302 (4+1)           leau    6,u             Drop three cells from the user stack
F4DA 39               (        forth.asm):03303 (4)             rts
                      (        forth.asm):03304         
F4DB 02               (        forth.asm):03305         TWOFTCH fcb     2               ANSI (Core)
F4DC 3240             (        forth.asm):03306                 fcc     '2@'            ( a-addr -- x1 x2 )
F4DE F4CA             (        forth.asm):03307                 fdb     TWOSTOR
                      (        forth.asm):03308                 RFCS
F4E0 BDE9C6           (        forth.asm):03309 (7)             jsr     MIN1PST         At least cell needs to be stacked up
F4E3 10ECD4           (        forth.asm):03310 (8+3)           ldq     [,u]            D:W has MSC:LSC of DBLADDR @
F4E6 10A7C4           (        forth.asm):03311 (6+0)           stw     ,u              Least significant cell stacked in place
F4E9 1F01             (        forth.asm):03312 (4)             tfr     d,x             Most significant cell goes through standard push
F4EB 7EE7D6           (        forth.asm):03313 (3)             jmp     NPUSH
                      (        forth.asm):03314         
F4EE 07               (        forth.asm):03315         TONUMBR fcb     7               ANSI (Core)
F4EF 3E4E554D424552   (        forth.asm):03316                 fcc     '>NUMBER'       ( ud1 c-addr1 u1 -- ud2 c-addr2 u2 )
F4F6 F4DB             (        forth.asm):03317                 fdb     TWOFTCH
                      (        forth.asm):03318                 RFCS
F4F8 BDE9D5           (        forth.asm):03319 (7)             jsr     MIN4PST         At least 4 cells need to be stacked up
F4FB AE42             (        forth.asm):03320 (5+1)           ldx     2,u             C-ADDR1 to X
F4FD ECC4             (        forth.asm):03321 (5+0)   @cvloop ldd     ,u              Check U1. End of input string reached?
F4FF 2770             (        forth.asm):03322 (3)             beq     @cvdone         Yes--conversion is done
F501 E684             (        forth.asm):03323 (4+0)           ldb     ,x
                      (        forth.asm):03324         * B has the ASCII representation of something that may or may not be a valid
                      (        forth.asm):03325         * digit, expressed in BASE (alias (byte)UBASE+1). If it does, multiply D1 by
                      (        forth.asm):03326         * BASE and add that to D1 (aka D2 on exit). Then add DIGIT on the top of it.
F503 C030             (        forth.asm):03327 (2)             subb    #'0             Minimal ASCII value condition met?
F505 256A             (        forth.asm):03328 (3)             blo     @cvdone         No. Out of range. ,X cannot be a valid digit
F507 C10A             (        forth.asm):03329 (2)             cmpb    #10
F509 2510             (        forth.asm):03330 (3)             blo     @cvnolt         No letter in potential BASE
                      (        forth.asm):03331                 IFEQ    CSSNTVE
F50B C111             (        forth.asm):03332 (2)             cmpb    #'A-'0
F50D 2562             (        forth.asm):03333 (3)             blo     @cvdone         Greater than 9 but lower than A
F50F C131             (        forth.asm):03334 (2)             cmpb    #'a-'0
F511 2506             (        forth.asm):03335 (3)             blo     @cvisuc         Upper case already
F513 C14A             (        forth.asm):03336 (2)             cmpb    #'z-'0
F515 225A             (        forth.asm):03337 (3)             bhi     @cvdone         Definitely out of range
F517 C020             (        forth.asm):03338 (2)             subb    #'a-'A          To upper case
                      (        forth.asm):03339                 ENDC                    CSSNTVE
F519 C007             (        forth.asm):03340 (2)     @cvisuc subb    #'A-':          A-Z to number
F51B D123             (        forth.asm):03341 (3)     @cvnolt cmpb    UBASE+1         B has a digit. Make sure it's less than BASE
F51D 2452             (        forth.asm):03342 (3)             bhs     @cvdone         Number under scrutiny is >= BASE
F51F 3276             (        forth.asm):03343 (4+1)           leas    -10,s           Allocate scratch space
F521 6FE4             (        forth.asm):03344 (6+0)           clr     ,s
F523 E761             (        forth.asm):03345 (4+1)           stb     1,s
                      (        forth.asm):03346         * System and user stack structures are as follows:
                      (        forth.asm):03347         * ,s    current digit (1 cell)
                      (        forth.asm):03348         * 2,s   D0*B (1 cell)
                      (        forth.asm):03349         * 4,s   D1*B (1 cell)
                      (        forth.asm):03350         * 6,s   D2*B (1 cell)
                      (        forth.asm):03351         * 8,s   D3*B (1 cell)
                      (        forth.asm):03352         * ,u    U1 (1 cell)
                      (        forth.asm):03353         * 2,u   C-ADDR1 (1 cell)
                      (        forth.asm):03354         * 4,u   D1H most significant cell
                      (        forth.asm):03355         * 6,u   D1L least significant cell
F525 1F37             (        forth.asm):03356 (4)             tfr     u,v             Backup U
F527 3348             (        forth.asm):03357 (4+1)           leau    8,u             Point one byte after D1LL
F529 3162             (        forth.asm):03358 (4+1)           leay    2,s             Point to D0*B
F52B 118604           (        forth.asm):03359 (3)             lde     #4              Four products to go through
F52E A6C2             (        forth.asm):03360 (4+1)   @cvmul  lda     ,-u
F530 D623             (        forth.asm):03361 (3)             ldb     UBASE+1
F532 3D               (        forth.asm):03362 (10)            mul
F533 EDA1             (        forth.asm):03363 (5+2)           std     ,y++
F535 114A             (        forth.asm):03364 (2)             dece
F537 26F5             (        forth.asm):03365 (3)             bne     @cvmul
F539 1F73             (        forth.asm):03366 (4)             tfr     v,u             Restore U
                      (        forth.asm):03367         *
F53B A663             (        forth.asm):03368 (4+1)           lda     3,s             D0*B.L
F53D A747             (        forth.asm):03369 (4+1)           sta     7,u             D1L.L
                      (        forth.asm):03370         *
F53F A662             (        forth.asm):03371 (4+1)           lda     2,s             D0*B.H
F541 AB65             (        forth.asm):03372 (4+1)           adda    5,s             D1*B.L
F543 A746             (        forth.asm):03373 (4+1)           sta     6,u             D1L.H
                      (        forth.asm):03374         *
F545 A664             (        forth.asm):03375 (4+1)           lda     4,s             D1*B.H
F547 A967             (        forth.asm):03376 (4+1)           adca    7,s             D2*B.L
F549 A745             (        forth.asm):03377 (4+1)           sta     5,u             D1H.L
                      (        forth.asm):03378         *
F54B A666             (        forth.asm):03379 (4+1)           lda     6,s             D2*B.H
F54D A969             (        forth.asm):03380 (4+1)           adca    9,s             D3*B.L
F54F A744             (        forth.asm):03381 (4+1)           sta     4,u             D1H.H
                      (        forth.asm):03382         *
F551 2521             (        forth.asm):03383 (3)             bcs     @cvovf          Out of range error if carry is set
F553 6D68             (        forth.asm):03384 (5+1)           tst     8,s             D3*B.H
F555 261D             (        forth.asm):03385 (3)             bne     @cvovf          That one should be zero
                      (        forth.asm):03386         *
F557 EC46             (        forth.asm):03387 (5+1)           ldd     6,u             D1L
F559 E3E4             (        forth.asm):03388 (5+0)           addd    ,s              DIGIT
F55B ED46             (        forth.asm):03389 (5+1)           std     6,u
F55D EC44             (        forth.asm):03390 (5+1)           ldd     4,u             D1H
F55F 10890000         (        forth.asm):03391 (4)             adcd    #0              Potential carry from lower cell
F563 ED44             (        forth.asm):03392 (5+1)           std     4,u
F565 326A             (        forth.asm):03393 (4+1)           leas    10,s            Release scratch space
                      (        forth.asm):03394         * Update the count of unconverted characters (ultimately U2)
F567 ECC4             (        forth.asm):03395 (5+0)           ldd     ,u
F569 104A             (        forth.asm):03396 (2)             decd
F56B EDC4             (        forth.asm):03397 (5+0)           std     ,u
F56D 3001             (        forth.asm):03398 (4+1)           leax    1,x             Point to the next character in the input string
F56F 208C             (        forth.asm):03399 (3)             bra     @cvloop         Here we go again
F571 AF42             (        forth.asm):03400 (5+1)   @cvdone stx     2,u             Set C-ADDR2
F573 39               (        forth.asm):03401 (4)             rts
F574 C604             (        forth.asm):03402 (2)     @cvovf  ldb     #4              Out of range
F576 BDE74C           (        forth.asm):03403 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):03404         
F579 02               (        forth.asm):03405         CVTE    fcb     2               ANSI (Core)
F57A 233E             (        forth.asm):03406                 fcc     '#>'            ( xd -- c-addr u )
F57C F4EE             (        forth.asm):03407                 fdb     TONUMBR
                      (        forth.asm):03408                 RFCS
F57E BDE7E4           (        forth.asm):03409 (7)             jsr     NPOP
F581 BDE7E4           (        forth.asm):03410 (7)             jsr     NPOP            Drop 2 cells from the data stack
F584 8E01E4           (        forth.asm):03411 (3)             ldx     #APADBUF
F587 3610             (        forth.asm):03412                 UCNPUSH
F589 BDE243           (        forth.asm):03413 (7)             jsr     SLEN
F58C 1F61             (        forth.asm):03414 (4)             tfr     w,x
F58E 3610             (        forth.asm):03415                 UCNPUSH
F590 39               (        forth.asm):03416 (4)             rts
                      (        forth.asm):03417         
F591 04               (        forth.asm):03418         SIGN    fcb     4               ANSI (Core)
F592 5349474E         (        forth.asm):03419                 fcc     'SIGN'          ( n -- )
F596 F579             (        forth.asm):03420                 fdb     CVTE
                      (        forth.asm):03421                 RFCS
F598 BDE7E4           (        forth.asm):03422 (7)             jsr     NPOP
F59B 1F10             (        forth.asm):03423 (4)             tfr     x,d
F59D 104D             (        forth.asm):03424 (2)             tstd
F59F 2C04             (        forth.asm):03425 (3)             bge     @sign1
F5A1 C62D             (        forth.asm):03426 (2)             ldb     #'-
F5A3 2066             (        forth.asm):03427 (3)             bra     PREAPAD
F5A5 39               (        forth.asm):03428 (4)     @sign1  rts
                      (        forth.asm):03429         
F5A6 04               (        forth.asm):03430         HOLD    fcb     4               ANSI (Core)
F5A7 484F4C44         (        forth.asm):03431                 fcc     'HOLD'          ( char -- )
F5AB F591             (        forth.asm):03432                 fdb     SIGN
                      (        forth.asm):03433                 RFCS
F5AD BDE7E4           (        forth.asm):03434 (7)             jsr     NPOP
F5B0 1F10             (        forth.asm):03435 (4)             tfr     x,d
F5B2 2057             (        forth.asm):03436 (3)             bra     PREAPAD         B is inserted at the beginning of APADBUF.
                      (        forth.asm):03437         
F5B4 02               (        forth.asm):03438         SHARPS  fcb     2               ANSI (Core)
F5B5 2353             (        forth.asm):03439                 fcc     '#S'            ( ud1 -- ud2 )
F5B7 F5A6             (        forth.asm):03440                 fdb     HOLD
                      (        forth.asm):03441                 RFCS
F5B9 8601             (        forth.asm):03442 (2)             lda     #1
F5BB 973E             (        forth.asm):03443 (3)             sta     CVTFCN          CVT function #1 is #S
F5BD 2006             (        forth.asm):03444 (3)             bra     CVT0
                      (        forth.asm):03445         
                      (        forth.asm):03446         * Unsigned double on the top of the data stack gets divided by BASE.
                      (        forth.asm):03447         * The division algorithm implemented here is the binary long division.
                      (        forth.asm):03448         * See https://en.wikipedia.org/wiki/Division_algorithm for more information.
                      (        forth.asm):03449         * Remainder (converted to a character) gets prepended to APAD.
F5BF 01               (        forth.asm):03450         CVT     fcb     1               ANSI (Core)
F5C0 23               (        forth.asm):03451                 fcc     '#'             ( ud1 -- ud2 )
F5C1 F5B4             (        forth.asm):03452                 fdb     SHARPS
                      (        forth.asm):03453                 RFCS
F5C3 0F3E             (        forth.asm):03454 (5)             clr     CVTFCN          CVT function 0 is #
F5C5 BDE7E4           (        forth.asm):03455 (7)     CVT0    jsr     NPOP
F5C8 1F12             (        forth.asm):03456 (4)             tfr     x,y
F5CA BDE7E4           (        forth.asm):03457 (7)             jsr     NPOP
                      (        forth.asm):03458         * Stack structure:
                      (        forth.asm):03459         * ,s    Remainder               16 bits
                      (        forth.asm):03460         * 2,s   Bitmask high            16 bits
                      (        forth.asm):03461         * 4,s   Bitmask low             16 bits
                      (        forth.asm):03462         * 6,s   Quotient high           16 bits
                      (        forth.asm):03463         * 8,s   Quotient low            16 bits
                      (        forth.asm):03464         * 10,s  Numerator high          16 bits
                      (        forth.asm):03465         * 12,s  Numerator low           16 bits
                      (        forth.asm):03466         * 14,s  Denominator             16 bits
                      (        forth.asm):03467         * 16,s  Remainder carry         8 bits
F5CD 32E8EF           (        forth.asm):03468 (4+1)   CVT1    leas    -17,s
F5D0 DC22             (        forth.asm):03469 (4)             ldd     UBASE
F5D2 ED6E             (        forth.asm):03470 (5+1)           std     14,s            Denominator
F5D4 AF6C             (        forth.asm):03471 (5+1)           stx     12,s            Numerator least significant cell
F5D6 10AF6A           (        forth.asm):03472 (6+1)           sty     10,s            Numerator most significant cell
F5D9 8D43             (        forth.asm):03473 (6)             bsr     DBDIVSG
                      (        forth.asm):03474         * Convert the remainder to a digit expressed in BASE.
F5DB E661             (        forth.asm):03475 (4+1)           ldb     1,s
F5DD 8630             (        forth.asm):03476 (2)             lda     #'0
F5DF C10A             (        forth.asm):03477 (2)             cmpb    #10             B has the digit we want converted to BASE
F5E1 2502             (        forth.asm):03478 (3)             bcs     @cvtdgt
F5E3 8637             (        forth.asm):03479 (2)             lda     #'A-10
F5E5 103089           (        forth.asm):03480 (4)     @cvtdgt addr    a,b
F5E8 8D21             (        forth.asm):03481 (6)             bsr     PREAPAD         Prepend B to the string currently in PAD
F5EA 0D3E             (        forth.asm):03482 (4)             tst     CVTFCN
F5EC 2711             (        forth.asm):03483 (3)             beq     @cvtend         Function 0 is straight #, i.e. we're done here
                      (        forth.asm):03484         * Function 1 is #S, we iterate unless the quotient is 0.
F5EE EC68             (        forth.asm):03485 (5+1)           ldd     8,s
F5F0 10AA66           (        forth.asm):03486 (6+1)           ord     6,s
F5F3 270A             (        forth.asm):03487 (3)             beq     @cvtend
F5F5 AE68             (        forth.asm):03488 (5+1)           ldx     8,s             New numerator low
F5F7 10AE66           (        forth.asm):03489 (6+1)           ldy     6,s             New numerator high
F5FA 32E811           (        forth.asm):03490 (4+1)           leas    17,s            Discard the stack frame
F5FD 20CE             (        forth.asm):03491 (3)             bra     CVT1            And go at it again
                      (        forth.asm):03492         * Push back the quotient on the data stack (low then high cell).
F5FF AE68             (        forth.asm):03493 (5+1)   @cvtend ldx     8,s
F601 3610             (        forth.asm):03494                 UCNPUSH
F603 AE66             (        forth.asm):03495 (5+1)           ldx     6,s
F605 3610             (        forth.asm):03496                 UCNPUSH
F607 32E811           (        forth.asm):03497 (4+1)           leas    17,s            Discard the stack frame
F60A 39               (        forth.asm):03498 (4)             rts
                      (        forth.asm):03499         
                      (        forth.asm):03500         * Insert the character in B in front of the string at APADBUF.
F60B 8E01E4           (        forth.asm):03501 (3)     PREAPAD ldx     #APADBUF
F60E BDE243           (        forth.asm):03502 (7)             jsr     SLEN
F611 103061           (        forth.asm):03503 (4)             addr    w,x             X points to the PAD string's NUL terminator
F614 105C             (        forth.asm):03504 (2)             incw                    Include the terminator
F616 3101             (        forth.asm):03505 (4+1)           leay    1,x
F618 113912           (        forth.asm):03506 (6+?)           tfm     x-,y-
F61B D7E4             (        forth.asm):03507 (3)             stb     APADBUF
F61D 39               (        forth.asm):03508 (4)             rts
                      (        forth.asm):03509         
                      (        forth.asm):03510         * Double (numerator high/low) gets divided by a single cell number. Please note
                      (        forth.asm):03511         * that this is a strictly unsigned business. Input parameters are supposed to
                      (        forth.asm):03512         * have been set up by the caller on the system stack. The quotient (high/low)
                      (        forth.asm):03513         * and remainder are returned the same way. Current users of this routine are
                      (        forth.asm):03514         * CVT (#) and UMSLMOD (UM/MOD).
                      (        forth.asm):03515         *
                      (        forth.asm):03516         * Stack structure:
                      (        forth.asm):03517         * ,s    Return address          16 bits
                      (        forth.asm):03518         * 2,s   Remainder               16 bits
                      (        forth.asm):03519         * 4,s   Bitmask high            16 bits
                      (        forth.asm):03520         * 6,s   Bitmask low             16 bits
                      (        forth.asm):03521         * 8,s   Quotient high           16 bits
                      (        forth.asm):03522         * 10,s  Quotient low            16 bits
                      (        forth.asm):03523         * 12,s  Numerator high          16 bits
                      (        forth.asm):03524         * 14,s  Numerator low           16 bits
                      (        forth.asm):03525         * 16,s  Denominator             16 bits
                      (        forth.asm):03526         * 18,s  Remainder carry         8 bits
                      (        forth.asm):03527         *
F61E CC8000           (        forth.asm):03528 (3)     DBDIVSG ldd     #$8000
F621 ED64             (        forth.asm):03529 (5+1)           std     4,s             Bitmask high
F623 4F               (        forth.asm):03530 (1)             clra
F624 ED66             (        forth.asm):03531 (5+1)           std     6,s             Bitmask low
F626 ED68             (        forth.asm):03532 (5+1)           std     8,s             Quotient high
F628 ED6A             (        forth.asm):03533 (5+1)           std     10,s            Quotient low
F62A ED62             (        forth.asm):03534 (5+1)           std     2,s             Remainder
F62C 11C61F           (        forth.asm):03535 (3)             ldf     #31             32 bits to go
F62F 6863             (        forth.asm):03536 (6+1)   @cvbeg  lsl     3,s
F631 6962             (        forth.asm):03537 (6+1)           rol     2,s             R := R << 1
F633 1FA8             (        forth.asm):03538 (4)             tfr     cc,a
F635 8401             (        forth.asm):03539 (2)             anda    #CFLAG
F637 A7E812           (        forth.asm):03540 (4+1)           sta     18,s            Save CFLAG after left shift of the remainder
                      (        forth.asm):03541         * We need to extract bit <f> (i) of the numerator. Since (i) varies from 31
                      (        forth.asm):03542         * downto 0, all we need to do is to shift left a 32 bit quantity and isolate
                      (        forth.asm):03543         * the carry flag as the bit of interest.
F63A EC6E             (        forth.asm):03544 (5+1)           ldd     14,s            Numerator low
F63C 1048             (        forth.asm):03545 (2)             lsld
F63E ED6E             (        forth.asm):03546 (5+1)           std     14,s
F640 EC6C             (        forth.asm):03547 (5+1)           ldd     12,s            Numerator high
F642 1049             (        forth.asm):03548 (2)             rold
F644 ED6C             (        forth.asm):03549 (5+1)           std     12,s
F646 1FA8             (        forth.asm):03550 (4)             tfr     cc,a
F648 8401             (        forth.asm):03551 (2)             anda    #CFLAG          CFLAG is 1, which is ideal here
F64A AA63             (        forth.asm):03552 (4+1)           ora     3,s             R(0) := N(i)
F64C A763             (        forth.asm):03553 (4+1)           sta     3,s             Update the remainder
F64E 1F89             (        forth.asm):03554 (4)             tfr     a,b             Remainder LSB
F650 A662             (        forth.asm):03555 (4+1)           lda     2,s             Remainder MSB
F652 6DE812           (        forth.asm):03556 (5+1)           tst     18,s
F655 2606             (        forth.asm):03557 (3)             bne     @frcsub         Carry was set on left shift of the remainder
F657 10A3E810         (        forth.asm):03558 (6+1)           cmpd    16,s            Denominator
F65B 2513             (        forth.asm):03559 (3)             blo     @cvshft
F65D A3E810           (        forth.asm):03560 (5+1)   @frcsub subd    16,s
F660 ED62             (        forth.asm):03561 (5+1)           std     2,s             R := R - D
                      (        forth.asm):03562         * Q(i) := 1 (use the bitmask).
F662 EC68             (        forth.asm):03563 (5+1)           ldd     8,s             Quotient high
F664 10AA64           (        forth.asm):03564 (6+1)           ord     4,s             Bitmask high
F667 ED68             (        forth.asm):03565 (5+1)           std     8,s
F669 EC6A             (        forth.asm):03566 (5+1)           ldd     10,s            Quotient low
F66B 10AA66           (        forth.asm):03567 (6+1)           ord     6,s             Bitmask low
F66E ED6A             (        forth.asm):03568 (5+1)           std     10,s
                      (        forth.asm):03569         * Shift the bitmask 1 bit right.
F670 EC64             (        forth.asm):03570 (5+1)   @cvshft ldd     4,s
F672 1044             (        forth.asm):03571 (2)             lsrd
F674 ED64             (        forth.asm):03572 (5+1)           std     4,s
F676 EC66             (        forth.asm):03573 (5+1)           ldd     6,s
F678 1046             (        forth.asm):03574 (2)             rord
F67A ED66             (        forth.asm):03575 (5+1)           std     6,s
F67C 115A             (        forth.asm):03576 (2)             decf
F67E 2CAF             (        forth.asm):03577 (3)             bge     @cvbeg
F680 39               (        forth.asm):03578 (4)             rts
                      (        forth.asm):03579         
F681 02               (        forth.asm):03580         CVTB    fcb     2               ANSI (Core)
F682 3C23             (        forth.asm):03581                 fcc     '<#'            ( -- )
F684 F5BF             (        forth.asm):03582                 fdb     CVT
                      (        forth.asm):03583                 RFCS
F686 0FE4             (        forth.asm):03584 (5)             clr     APADBUF
F688 39               (        forth.asm):03585 (4)             rts
                      (        forth.asm):03586         
F689 01               (        forth.asm):03587         DOT     fcb     1               ANSI (Core)
F68A 2E               (        forth.asm):03588                 fcc     '.'             ( n -- )
F68B F681             (        forth.asm):03589                 fdb     CVTB
                      (        forth.asm):03590                 RFCS
F68D 8601             (        forth.asm):03591 (2)             lda     #1
F68F 9741             (        forth.asm):03592 (3)             sta     CVISSGN         Force a signed number conversion
F691 BDE7E4           (        forth.asm):03593 (7)     PTOP0   jsr     NPOP            N to X
F694 BDE456           (        forth.asm):03594 (7)             jsr     CVNSTR
F697 8E044C           (        forth.asm):03595 (3)             ldx     #TBUFF
F69A 8620             (        forth.asm):03596 (2)             lda     #SP
F69C A180             (        forth.asm):03597 (4+1)   @ptop1  cmpa    ,x+             Skip leading spaces
F69E 27FC             (        forth.asm):03598 (3)             beq     @ptop1
F6A0 301F             (        forth.asm):03599 (4+1)           leax    -1,x            Point to actual string start address
F6A2 BDE2EA           (        forth.asm):03600 (7)             jsr     PUTS
F6A5 7EE2D7           (        forth.asm):03601 (3)             jmp     PUTCH           Extra space after printing a number
                      (        forth.asm):03602         
F6A8 02               (        forth.asm):03603         UDOT    fcb     2               ANSI (Core)
F6A9 552E             (        forth.asm):03604                 fcc     'U.'            ( u -- )
F6AB F689             (        forth.asm):03605                 fdb     DOT
                      (        forth.asm):03606                 RFCS
F6AD 0F41             (        forth.asm):03607 (5)             clr     CVISSGN         Conversion is unsigned
F6AF 20E0             (        forth.asm):03608 (3)             bra     PTOP0
                      (        forth.asm):03609         
F6B1 02               (        forth.asm):03610         DOTR    fcb     2               ANSI (Core ext)
F6B2 2E52             (        forth.asm):03611                 fcc     '.R'
F6B4 F6A8             (        forth.asm):03612                 fdb     UDOT
                      (        forth.asm):03613                 RFCS
F6B6 8601             (        forth.asm):03614 (2)             lda     #1
F6B8 9741             (        forth.asm):03615 (3)             sta     CVISSGN
F6BA BDE7E4           (        forth.asm):03616 (7)     DOTR0   jsr     NPOP
F6BD 3410             (        forth.asm):03617 (4+2)           pshs    x               Length parameter value
F6BF BDE7E4           (        forth.asm):03618 (7)             jsr     NPOP
F6C2 BDE456           (        forth.asm):03619 (7)             jsr     CVNSTR
F6C5 8E044C           (        forth.asm):03620 (3)             ldx     #TBUFF
F6C8 8620             (        forth.asm):03621 (2)             lda     #SP
F6CA A180             (        forth.asm):03622 (4+1)   @dotr1  cmpa    ,x+
F6CC 27FC             (        forth.asm):03623 (3)             beq     @dotr1          Skip leading spaces
F6CE 301F             (        forth.asm):03624 (4+1)           leax    -1,x
F6D0 BDE243           (        forth.asm):03625 (7)             jsr     SLEN            String length is returned in W
F6D3 3506             (        forth.asm):03626 (4+2)           puls    d
F6D5 1E06             (        forth.asm):03627 (5)             exg     d,w
F6D7 103206           (        forth.asm):03628 (4)             subr    d,w
F6DA 2F0D             (        forth.asm):03629 (3)             ble     @dotr3
F6DC 8620             (        forth.asm):03630 (2)             lda     #SP
F6DE 105D             (        forth.asm):03631 (2)     @dotr2  tstw
F6E0 2707             (        forth.asm):03632 (3)             beq     @dotr3
F6E2 BDE2D7           (        forth.asm):03633 (7)             jsr     PUTCH
F6E5 105A             (        forth.asm):03634 (2)             decw
F6E7 20F5             (        forth.asm):03635 (3)             bra     @dotr2
F6E9 7EE2EA           (        forth.asm):03636 (3)     @dotr3  jmp     PUTS
                      (        forth.asm):03637         
F6EC 03               (        forth.asm):03638         UDOTR   fcb     3               ANSI (Core ext)
F6ED 552E52           (        forth.asm):03639                 fcc     'U.R'
F6F0 F6B1             (        forth.asm):03640                 fdb     DOTR
                      (        forth.asm):03641                 RFCS
F6F2 0F41             (        forth.asm):03642 (5)             clr     CVISSGN
F6F4 20C4             (        forth.asm):03643 (3)             bra     DOTR0
                      (        forth.asm):03644         
F6F6 02               (        forth.asm):03645         BL      fcb     2               ANSI (Core)
F6F7 424C             (        forth.asm):03646                 fcc     'BL'            ( -- char )
F6F9 F6EC             (        forth.asm):03647                 fdb     UDOTR
                      (        forth.asm):03648                 RFCS
F6FB 8E0020           (        forth.asm):03649 (3)             ldx     #SP
F6FE 7EE7D6           (        forth.asm):03650 (3)             jmp     NPUSH
                      (        forth.asm):03651         
F701 05               (        forth.asm):03652         SPACE   fcb     5               ANSI (Core)
F702 5350414345       (        forth.asm):03653                 fcc     'SPACE'         ( -- )
F707 F6F6             (        forth.asm):03654                 fdb     BL
                      (        forth.asm):03655                 RFCS
F709 8620             (        forth.asm):03656 (2)             lda     #SP
F70B 7EE2D7           (        forth.asm):03657 (3)             jmp     PUTCH
                      (        forth.asm):03658         
F70E 06               (        forth.asm):03659         SPACES  fcb     6               ANSI (Core)
F70F 535041434553     (        forth.asm):03660                 fcc     'SPACES'        ( n -- )
F715 F701             (        forth.asm):03661                 fdb     SPACE
                      (        forth.asm):03662                 RFCS
F717 BDE7E4           (        forth.asm):03663 (7)             jsr     NPOP
F71A 8620             (        forth.asm):03664 (2)             lda     #SP
F71C 1F16             (        forth.asm):03665 (4)             tfr     x,w
F71E 105D             (        forth.asm):03666 (2)             tstw
F720 2601             (        forth.asm):03667 (3)     @loop   bne     @cont
F722 39               (        forth.asm):03668 (4)             rts
F723 BDE2D7           (        forth.asm):03669 (7)     @cont   jsr     PUTCH
F726 105A             (        forth.asm):03670 (2)             decw
F728 20F6             (        forth.asm):03671 (3)             bra     @loop
                      (        forth.asm):03672         
F72A 04               (        forth.asm):03673         PAGE    fcb     4               ANSI (Facility)
F72B 50414745         (        forth.asm):03674                 fcc     'PAGE'
F72F F70E             (        forth.asm):03675                 fdb     SPACES
                      (        forth.asm):03676                 RFCS
F731 8EFE1D           (        forth.asm):03677 (3)             ldx     #CSVT100
F734 7EE2EA           (        forth.asm):03678 (3)             jmp     PUTS
                      (        forth.asm):03679         
F737 02               (        forth.asm):03680         CRLF    fcb     2               ANSI (Core)
F738 4352             (        forth.asm):03681                 fcc     'CR'            ( -- )
F73A F72A             (        forth.asm):03682                 fdb     PAGE
                      (        forth.asm):03683                 RFCS
F73C 7EE2F7           (        forth.asm):03684 (3)             jmp     PUTCR
                      (        forth.asm):03685         
F73F 03               (        forth.asm):03686         PAD     fcb     3               ANSI (Core ext)
F740 504144           (        forth.asm):03687                 fcc     'PAD'
F743 F737             (        forth.asm):03688                 fdb     CRLF
                      (        forth.asm):03689                 RFCS
F745 8E0190           (        forth.asm):03690 (3)             ldx     #PADBUF
F748 7EE7D6           (        forth.asm):03691 (3)             jmp     NPUSH
                      (        forth.asm):03692         
F74B 04               (        forth.asm):03693         TYPE    fcb     4               ANSI (Core)
F74C 54595045         (        forth.asm):03694                 fcc     'TYPE'          ( c-addr u -- )
F750 F73F             (        forth.asm):03695                 fdb     PAD
                      (        forth.asm):03696                 RFCS
F752 BDE7E4           (        forth.asm):03697 (7)             jsr     NPOP            Character count (signed)
F755 1F16             (        forth.asm):03698 (4)             tfr     x,w
F757 BDE7E4           (        forth.asm):03699 (7)             jsr     NPOP            Buffer address
F75A 105D             (        forth.asm):03700 (2)             tstw                    
F75C 2601             (        forth.asm):03701 (3)     @loop   bne     @cont
F75E 39               (        forth.asm):03702 (4)             rts
F75F A680             (        forth.asm):03703 (4+1)   @cont   lda     ,x+
F761 BDE2D7           (        forth.asm):03704 (7)             jsr     PUTCH
F764 105A             (        forth.asm):03705 (2)             decw
F766 20F4             (        forth.asm):03706 (3)             bra     @loop
                      (        forth.asm):03707         
F768 05               (        forth.asm):03708         COUNT   fcb     5               ANSI (Core)
F769 434F554E54       (        forth.asm):03709                 fcc     'COUNT'         ( c-addr1 -- c-addr2 u )
F76E F74B             (        forth.asm):03710                 fdb     TYPE
                      (        forth.asm):03711                 RFCS
F770 BDE7E4           (        forth.asm):03712 (7)             jsr     NPOP            C-ADDR1 to X
F773 E680             (        forth.asm):03713 (4+1)           ldb     ,x+             B has LSB(U) and X has C-ADDR2
F775 3610             (        forth.asm):03714                 UCNPUSH                 C-ADDR2 to the data stack (B is preserved)
F777 4F               (        forth.asm):03715 (1)             clra
F778 1F01             (        forth.asm):03716 (4)             tfr     d,x
F77A 7EE7D6           (        forth.asm):03717 (3)             jmp     NPUSH           U to the data stack
                      (        forth.asm):03718         
F77D 06               (        forth.asm):03719         ACCEPT  fcb     6               ANSI (Core)
F77E 414343455054     (        forth.asm):03720                 fcc     'ACCEPT'        ( c-addr +n1 -- +n2 )
F784 F768             (        forth.asm):03721                 fdb     COUNT
                      (        forth.asm):03722                 RFCS
F786 BDE7E4           (        forth.asm):03723 (7)             jsr     NPOP
F789 1F10             (        forth.asm):03724 (4)             tfr     x,d             Buffer length to B
F78B BDE7E4           (        forth.asm):03725 (7)             jsr     NPOP            Buffer address to X. B is preserved
F78E BDE30D           (        forth.asm):03726 (7)             jsr     GETS            Input character count is returned via B
F791 4F               (        forth.asm):03727 (1)             clra
F792 3606             (        forth.asm):03728 (4+2)           pshu    d               This saves us "tfr d,x" and "UCNPUSH"
F794 39               (        forth.asm):03729 (4)             rts
                      (        forth.asm):03730         
F795 49               (        forth.asm):03731         TERPRET fcb     $49             79-STANDARD (REF) I make this compile time only
F796 494E544552505245 (        forth.asm):03732                 fcc     'INTERPRET'     ( -- )
     54
F79F F77D             (        forth.asm):03733                 fdb     ACCEPT
                      (        forth.asm):03734                 RFCS
                      (        forth.asm):03735         * Obtain a base buffer address based on the value of BLK.
F7A1 9E2C             (        forth.asm):03736 (4)             ldx     UBLK
F7A3 260B             (        forth.asm):03737 (3)             bne     @isblk
                      (        forth.asm):03738         * A Zero BLK value indicates the console OR a counted string set up by EVALUATE.
F7A5 8E0378           (        forth.asm):03739 (3)             ldx     #CMDBUF         Base buffer address for serial line input
F7A8 0D4A             (        forth.asm):03740 (4)             tst     SRCID           Counted string?
F7AA 2710             (        forth.asm):03741 (3)             beq     @rsolvd         No. Back to the serial console
F7AC 9E20             (        forth.asm):03742 (4)             ldx     BSBFADR         BSBFADR and ISLEN have been set up previously
F7AE 200C             (        forth.asm):03743 (3)             bra     @rsolvd
                      (        forth.asm):03744         * BLK is NZ, map the block in memory.
F7B0 BDE7D6           (        forth.asm):03745 (7)     @isblk  jsr     NPUSH           X has the target block number
F7B3 BDEADB           (        forth.asm):03746                 RFXT    jsr,BLOCK+8     XT for BLOCK. Map the block in
F7B6 3710             (        forth.asm):03747                 UCNPOP                  Retrieve buffer address (to X)
                      (        forth.asm):03748         * The physical address of the current block might have changed. This should be
                      (        forth.asm):03749         * reflected by clearing ISEADDR.
F7B8 104F             (        forth.asm):03750 (2)             clrd
F7BA DD28             (        forth.asm):03751 (4)             std     ISEADDR
F7BC 9F20             (        forth.asm):03752 (4)     @rsolvd stx     BSBFADR
                      (        forth.asm):03753         * Note: >IN is supposed to have been set by the caller!
F7BE DC2A             (        forth.asm):03754 (4)             ldd     UTOIN
F7C0 103001           (        forth.asm):03755 (4)             addr    d,x
F7C3 7EE0BF           (        forth.asm):03756 (3)             jmp     _INTERP         Finally invoke _INTERP.
                      (        forth.asm):03757         
F7C6 04               (        forth.asm):03758         LOAD    fcb     4               ANSI (Block)
F7C7 4C4F4144         (        forth.asm):03759                 fcc     'LOAD'          ( i*x u -- j*x )
F7CB F795             (        forth.asm):03760                 fdb     TERPRET
                      (        forth.asm):03761                 RFCS
F7CD BDE7E4           (        forth.asm):03762 (7)             jsr     NPOP            ZFLAG is set by NPOP
F7D0 2601             (        forth.asm):03763 (3)             bne     LOAD1
F7D2 39               (        forth.asm):03764 (4)             rts                     Block 0 is _not_ loadable
F7D3 BDE835           (        forth.asm):03765 (7)     LOAD1   jsr     SAVINP          Save input parameters. X is preserved
F7D6 9F2C             (        forth.asm):03766 (4)             stx     UBLK            Update BLK with the LOAD argument
F7D8 CC0400           (        forth.asm):03767 (3)             ldd     #BLKSIZ         1024 bytes
F7DB DD26             (        forth.asm):03768 (4)             std     ISLEN           Set input stream length
F7DD 104F             (        forth.asm):03769 (2)             clrd
F7DF 974A             (        forth.asm):03770 (3)             sta     SRCID           Not invoked in EVALUATE context
F7E1 DD2A             (        forth.asm):03771 (4)     LOAD2   std     UTOIN           Clear >IN
F7E3 DD28             (        forth.asm):03772 (4)             std     ISEADDR         End of input stream address (included)
                      (        forth.asm):03773         * Map the new BLK in, interpret code from there.
F7E5 8DBA             (        forth.asm):03774                 RFXT    bsr,TERPRET+12  XT for INTERPRET
F7E7 BDE850           (        forth.asm):03775 (7)             jsr     RSTINP          Restore input parameters
F7EA 7EE86A           (        forth.asm):03776 (3)             jmp     BKIN2PT         Map BLK in (if needed) and update BSBFADR
                      (        forth.asm):03777         
F7ED 08               (        forth.asm):03778         EVAL    fcb     8               ANSI (Core/Block)
F7EE 4556414C55415445 (        forth.asm):03779                 fcc     'EVALUATE'      ( i * x c-addr u -- j * x )
F7F6 F7C6             (        forth.asm):03780                 fdb     LOAD
                      (        forth.asm):03781                 RFCS
F7F8 BDE9CB           (        forth.asm):03782 (7)             jsr     MIN2PST         Need at least 2 parameters on the data stack
                      (        forth.asm):03783         * The whole thing looks like LOAD1 except we do not need to map a block in.
F7FB AE42             (        forth.asm):03784 (5+1)           ldx     2,u             C-ADDR
F7FD 10AEC4           (        forth.asm):03785 (6+0)           ldy     ,u              U
F800 3344             (        forth.asm):03786 (4+1)           leau    4,u             Drop 2 cells from the data stack
F802 BDE835           (        forth.asm):03787 (7)             jsr     SAVINP          Save input context. X is preserved
F805 9F20             (        forth.asm):03788 (4)             stx     BSBFADR         Set BSBFADR from C-ADDR
F807 109F26           (        forth.asm):03789 (5)             sty     ISLEN           Set ISLEN from U
F80A 86FF             (        forth.asm):03790 (2)             lda     #$FF
F80C 974A             (        forth.asm):03791 (3)             sta     SRCID           -1 (byte) to SRCID. Invoked in EVALUATE context
F80E 104F             (        forth.asm):03792 (2)             clrd
F810 DD2C             (        forth.asm):03793 (4)             std     UBLK            Target block number is zero
F812 20CD             (        forth.asm):03794 (3)             bra     LOAD2           Interpret, restore input context and proceed
                      (        forth.asm):03795         
F814 04               (        forth.asm):03796         THRU    fcb     4               ANSI (Block ext)
F815 54485255         (        forth.asm):03797                 fcc     'THRU'          ( u1 u2 -- )
F819 F7ED             (        forth.asm):03798                 fdb     EVAL
                      (        forth.asm):03799                 RFCS
F81B BDE7E4           (        forth.asm):03800 (7)             jsr     NPOP
F81E 1F12             (        forth.asm):03801 (4)             tfr     x,y             Y has U2 (highblk)
F820 BDE7E4           (        forth.asm):03802 (7)             jsr     NPOP            X has U1 (lowblk)--both are unsigned numbers
F823 103712           (        forth.asm):03803 (4)     @thrlop cmpr    x,y
F826 2401             (        forth.asm):03804 (3)             bhs     @cont           Limit is >= to the loop index
F828 39               (        forth.asm):03805 (4)             rts
F829 3430             (        forth.asm):03806 (4+4)   @cont   pshs    x,y             Backup loop parameters
F82B 3610             (        forth.asm):03807                 UCNPUSH                 Current block number to the data stack
F82D 8D9E             (        forth.asm):03808                 RFXT    bsr,LOAD+7      XT for LOAD
F82F 3530             (        forth.asm):03809 (4+4)           puls    y,x             Retrieve loop parameters
F831 3001             (        forth.asm):03810 (4+1)           leax    1,x             Iterate over to the next screen
F833 20EE             (        forth.asm):03811 (3)             bra     @thrlop
                      (        forth.asm):03812         
F835 02               (        forth.asm):03813         MILLIS  fcb     2               ANSI (Facility ext)
F836 4D53             (        forth.asm):03814                 fcc     'MS'            ( u -- )
F838 F814             (        forth.asm):03815                 fdb     THRU
                      (        forth.asm):03816                 RFCS
F83A BDE7E4           (        forth.asm):03817 (7)             jsr     NPOP            ZFLAG is set by NPOP
F83D 270B             (        forth.asm):03818 (3)             beq     @ms3
F83F CC031A           (        forth.asm):03819 (3)     MILLIS1 ldd     #MSLCNT
F842 104A             (        forth.asm):03820 (2)     @ms2    decd
F844 26FC             (        forth.asm):03821 (3)             bne     @ms2
F846 301F             (        forth.asm):03822 (4+1)           leax    -1,x
F848 26F5             (        forth.asm):03823 (3)             bne     MILLIS1
F84A 39               (        forth.asm):03824 (4)     @ms3    rts
                      (        forth.asm):03825         
F84B 04               (        forth.asm):03826         KEYP    fcb     4               ANSI (Facility)
F84C 4B45593F         (        forth.asm):03827                 fcc     'KEY?'          ( -- flag )
F850 F835             (        forth.asm):03828                 fdb     MILLIS
                      (        forth.asm):03829                 RFCS
F852 1FC1             (        forth.asm):03830 (4)             tfr     0,x
F854 0D4E             (        forth.asm):03831 (4)             tst     SERBCNT
F856 2702             (        forth.asm):03832 (3)             beq     @done
F858 301F             (        forth.asm):03833 (4+1)           leax    -1,x            Return the ANSI true
F85A 7EE7D6           (        forth.asm):03834 (3)     @done   jmp     NPUSH
                      (        forth.asm):03835         
F85D 03               (        forth.asm):03836         KEY     fcb     3               ANSI (Core)
F85E 4B4559           (        forth.asm):03837                 fcc     'KEY'           ( -- char )
F861 F84B             (        forth.asm):03838                 fdb     KEYP
                      (        forth.asm):03839                 RFCS
F863 BDE2AB           (        forth.asm):03840 (7)             jsr     GETCH
F866 1F89             (        forth.asm):03841 (4)             tfr     a,b
F868 4F               (        forth.asm):03842 (1)             clra
F869 1F01             (        forth.asm):03843 (4)             tfr     d,x
F86B 7EE7D6           (        forth.asm):03844 (3)             jmp     NPUSH
                      (        forth.asm):03845         
F86E 04               (        forth.asm):03846         EMIT    fcb     4               ANSI (Core)
F86F 454D4954         (        forth.asm):03847                 fcc     'EMIT'          ( x -- )
F873 F85D             (        forth.asm):03848                 fdb     KEY
                      (        forth.asm):03849                 RFCS
F875 BDE7E4           (        forth.asm):03850 (7)             jsr     NPOP
F878 1F10             (        forth.asm):03851 (4)             tfr     x,d
F87A 1F98             (        forth.asm):03852 (4)             tfr     b,a
F87C 7EE2D7           (        forth.asm):03853 (3)             jmp     PUTCH
                      (        forth.asm):03854         
F87F 01               (        forth.asm):03855         PLUS    fcb     1               ANSI (Core)
F880 2B               (        forth.asm):03856                 fcc     '+'             ( n1 | u1 n2 | u2 -- n3 | u3 )
F881 F86E             (        forth.asm):03857                 fdb     EMIT
                      (        forth.asm):03858                 RFCS
F883 BDE9CB           (        forth.asm):03859 (7)             jsr     MIN2PST         We need at least two cells stacked up
F886 EC42             (        forth.asm):03860 (5+1)           ldd     2,u             N1 to D
F888 E3C4             (        forth.asm):03861 (5+0)           addd    ,u              D has N1+N2
F88A ED42             (        forth.asm):03862 (5+1)           std     2,u             D to N3
F88C 3342             (        forth.asm):03863 (4+1)           leau    2,u             Drop the top cell
F88E 39               (        forth.asm):03864 (4)             rts
                      (        forth.asm):03865         
F88F 02               (        forth.asm):03866         ONEM    fcb     2               ANSI (Core)
F890 312D             (        forth.asm):03867                 fcc     '1-'            ( n1|u1 -- n2|u2 )
F892 F87F             (        forth.asm):03868                 fdb     PLUS
                      (        forth.asm):03869                 RFCS
F894 BDE9C6           (        forth.asm):03870 (7)             jsr     MIN1PST         We need at least one cell stacked up
F897 ECC4             (        forth.asm):03871 (5+0)           ldd     ,u
F899 104A             (        forth.asm):03872 (2)             decd
F89B EDC4             (        forth.asm):03873 (5+0)           std     ,u
F89D 39               (        forth.asm):03874 (4)             rts
                      (        forth.asm):03875         
F89E 02               (        forth.asm):03876         ONEP    fcb     2               ANSI (Core)
F89F 312B             (        forth.asm):03877                 fcc     '1+'            ( n1|u1 -- n2|u2 )
F8A1 F88F             (        forth.asm):03878                 fdb     ONEM
                      (        forth.asm):03879                 RFCS
F8A3 BDE9C6           (        forth.asm):03880 (7)             jsr     MIN1PST         We need at least one cell stacked up
F8A6 ECC4             (        forth.asm):03881 (5+0)           ldd     ,u
F8A8 104C             (        forth.asm):03882 (2)             incd
F8AA EDC4             (        forth.asm):03883 (5+0)           std     ,u
F8AC 39               (        forth.asm):03884 (4)             rts
                      (        forth.asm):03885         
F8AD 05               (        forth.asm):03886         CHARP   fcb     5               ANSI Core
F8AE 434841522B       (        forth.asm):03887                 fcc     'CHAR+'         ( c-addr1 -- c-addr2 )
F8B3 F89E             (        forth.asm):03888                 fdb     ONEP
                      (        forth.asm):03889                 RFCS
F8B5 20EC             (        forth.asm):03890                 RFXT    bra,ONEP+5      XT for 1+
                      (        forth.asm):03891         
F8B7 01               (        forth.asm):03892         MINUS   fcb     1               ANSI (Core)
F8B8 2D               (        forth.asm):03893                 fcc     '-'             ( n1|u1 n2|u2 -- n3|u3 )
F8B9 F8AD             (        forth.asm):03894                 fdb     CHARP
                      (        forth.asm):03895                 RFCS
F8BB BDE9CB           (        forth.asm):03896 (7)             jsr     MIN2PST         We need at least two cells stacked up
F8BE EC42             (        forth.asm):03897 (5+1)           ldd     2,u             N1 to D
F8C0 A3C4             (        forth.asm):03898 (5+0)           subd    ,u              D has N1-N2
F8C2 ED42             (        forth.asm):03899 (5+1)           std     2,u             Store D to N3
F8C4 3342             (        forth.asm):03900 (4+1)           leau    2,u             Drop the top cell
F8C6 39               (        forth.asm):03901 (4)             rts
                      (        forth.asm):03902         
F8C7 05               (        forth.asm):03903         FALSE   fcb     5               ANSI (Core ext)
F8C8 46414C5345       (        forth.asm):03904                 fcc     'FALSE'
F8CD F8B7             (        forth.asm):03905                 fdb     MINUS
                      (        forth.asm):03906                 RFCS
F8CF 1FC1             (        forth.asm):03907 (4)             tfr     0,x
F8D1 7EE7D6           (        forth.asm):03908 (3)             jmp     NPUSH
                      (        forth.asm):03909         
F8D4 04               (        forth.asm):03910         TRUE    fcb     4               ANSI (Core ext)
F8D5 54525545         (        forth.asm):03911                 fcc     'TRUE'
F8D9 F8C7             (        forth.asm):03912                 fdb     FALSE
                      (        forth.asm):03913                 RFCS
F8DB 8EFFFF           (        forth.asm):03914 (3)             ldx     #-1
F8DE 7EE7D6           (        forth.asm):03915 (3)             jmp     NPUSH
                      (        forth.asm):03916         
F8E1 05               (        forth.asm):03917         SHIFT   fcb     5               79-STANDARD (REF)
F8E2 5348494654       (        forth.asm):03918                 fcc     'SHIFT'
F8E7 F8D4             (        forth.asm):03919                 fdb     TRUE
                      (        forth.asm):03920                 RFCS
F8E9 BDE9CB           (        forth.asm):03921 (7)             jsr     MIN2PST         Two cells need to be stacked up
F8EC 10A6C4           (        forth.asm):03922 (6+0)           ldw     ,u              Shift bitcount
F8EF EC42             (        forth.asm):03923 (5+1)           ldd     2,u             The data itself
F8F1 105D             (        forth.asm):03924 (2)     @shftlp tstw
F8F3 270E             (        forth.asm):03925 (3)             beq     @shfdon
F8F5 2D06             (        forth.asm):03926 (3)             blt     @shftrg
F8F7 1048             (        forth.asm):03927 (2)             lsld                    Shift left (W is positive)
F8F9 105A             (        forth.asm):03928 (2)             decw
F8FB 20F4             (        forth.asm):03929 (3)             bra     @shftlp
F8FD 1044             (        forth.asm):03930 (2)     @shftrg lsrd                    Shift right (W is negative)
F8FF 105C             (        forth.asm):03931 (2)             incw
F901 20EE             (        forth.asm):03932 (3)             bra     @shftlp
F903 ED42             (        forth.asm):03933 (5+1)   @shfdon std     2,u             Return value stored there
F905 3342             (        forth.asm):03934 (4+1)           leau    2,u             Drop one cell from the data stack
F907 39               (        forth.asm):03935 (4)             rts
                      (        forth.asm):03936         
                      (        forth.asm):03937         * Signed multiplication by hardware support.
F908 01               (        forth.asm):03938         MULT    fcb     1               ANSI (Core)
F909 2A               (        forth.asm):03939                 fcc     '*'             ( n1|u1 n2|u2 -- n3|u3 [n4|u4] )
F90A F8E1             (        forth.asm):03940                 fdb     SHIFT
                      (        forth.asm):03941                 RFCS
F90C 0F3B             (        forth.asm):03942 (5)             clr     MULFCN          Function 0 is *
F90E BDE9CB           (        forth.asm):03943 (7)     MULT1   jsr     MIN2PST         Two cells need to be stacked up
F911 EC42             (        forth.asm):03944 (5+1)           ldd     2,u             N1 to D
F913 11AFC4           (        forth.asm):03945 (30+0)          muld    ,u              D:W has N1*N2
F916 10A742           (        forth.asm):03946 (6+1)           stw     2,u             LSC to N3
F919 0D3B             (        forth.asm):03947 (4)             tst     MULFCN
F91B 2603             (        forth.asm):03948 (3)             bne     @mstsem
                      (        forth.asm):03949         * Semantics: return only the LSC.
F91D 3342             (        forth.asm):03950 (4+1)           leau    2,u             Drop one cell from the data stack
F91F 39               (        forth.asm):03951 (4)             rts
                      (        forth.asm):03952         * M* semantics, also return the MSC.
F920 EDC4             (        forth.asm):03953 (5+0)   @mstsem std     ,u              MSC to N4
F922 39               (        forth.asm):03954 (4)             rts
                      (        forth.asm):03955         
F923 02               (        forth.asm):03956         MSTAR   fcb     2               ANSI (Core)
F924 4D2A             (        forth.asm):03957                 fcc     'M*'            ( n1 n2 -- d )
F926 F908             (        forth.asm):03958                 fdb     MULT
F928 8601             (        forth.asm):03959 (2)             lda     #1
F92A 973B             (        forth.asm):03960 (3)             sta     MULFCN          Function 1 is M*
F92C 20E0             (        forth.asm):03961 (3)             bra     MULT1
                      (        forth.asm):03962         
                      (        forth.asm):03963         * The algorithm implemented here is similar to Donald's Knuth algorithm M,
                      (        forth.asm):03964         * as described in "The Art of Computer Programming", Volume II, 3rd edition,
                      (        forth.asm):03965         * section 4.3.1, pp 268. It is not as generic as algorithm M but fits our
                      (        forth.asm):03966         * particular purpose here: a 16x16 bit unsigned multiplication that yields
                      (        forth.asm):03967         * a 32 bit result. A simpler description of algorithm M can be found in
                      (        forth.asm):03968         * Henry S. Warren Junior's "Hacker's Delight", second edition, section 8-1,
                      (        forth.asm):03969         * pp 171. A C prototype implementation for a little endian host is provided
                      (        forth.asm):03970         * in SW/util/umstar.c.
                      (        forth.asm):03971         * In essence we reduce the problem to a 2 digit by 2 digit (expressed in
                      (        forth.asm):03972         * base 256) multiplication and use the 6809 MUL (A * B -> D) instruction.
F92E 03               (        forth.asm):03973         UMSTAR  fcb     3               ANSI (Core)
F92F 554D2A           (        forth.asm):03974                 fcc     'UM*'           ( u1 u2 -- ud )
F932 F923             (        forth.asm):03975                 fdb     MSTAR
                      (        forth.asm):03976                 RFCS
F934 BDE9CB           (        forth.asm):03977 (7)             jsr     MIN2PST         2 parameters need to be stacked up
                      (        forth.asm):03978         * Register allocation notes:
                      (        forth.asm):03979         * X: pointer to ud1 (ARG_U/p in the C code).
                      (        forth.asm):03980         * Y: pointer to ud2 (ARG_V/q in the C code).
                      (        forth.asm):03981         * E: Inner loop index (i in the C code).
                      (        forth.asm):03982         * F: Outer loop index (j in the C code).
                      (        forth.asm):03983         *
                      (        forth.asm):03984         * We save U to the system stack and use it to point to a scratch area allocated
                      (        forth.asm):03985         * from the system stack that will contain the 4 bytes (double cell) ultimately
                      (        forth.asm):03986         * holding the result (MSB first, what else?).
                      (        forth.asm):03987         *
                      (        forth.asm):03988         * System stack structure:
                      (        forth.asm):03989         * ,S    Result scratch area (Result MSB)
                      (        forth.asm):03990         * 2,S   Result scratch area (Result LSB)
                      (        forth.asm):03991         * 4,S   Saved U register
                      (        forth.asm):03992         * Total: 6 bytes.
F937 327A             (        forth.asm):03993 (4+1)           leas    -6,s            Allocate system stack scratch space
F939 EF64             (        forth.asm):03994 (5+1)           stu     4,s             Save the U register
F93B 104F             (        forth.asm):03995 (2)             clrd
F93D EDE4             (        forth.asm):03996 (5+0)           std     ,s              Initialize the result's MSB
F93F ED62             (        forth.asm):03997 (5+1)           std     2,s             Initialize the result's LSB
F941 3141             (        forth.asm):03998 (4+1)           leay    1,u             Initialize outer loop pointer (q in the C code)
F943 3363             (        forth.asm):03999 (4+1)           leau    3,s             Initialize the result pointer (r in the C code)
F945 11C602           (        forth.asm):04000 (3)             ldf     #2              Outer loop index
F948 AE64             (        forth.asm):04001 (5+1)   @outer  ldx     4,s             Saved U register
F94A 3003             (        forth.asm):04002 (4+1)           leax    3,x             Initialize inner loop pointer (p in the C code)
F94C 118602           (        forth.asm):04003 (3)             lde     #2              Inner loop index
F94F A684             (        forth.asm):04004 (4+0)   @inner  lda     ,x              *p to A
F951 E6A4             (        forth.asm):04005 (4+0)           ldb     ,y              *q to B
F953 3D               (        forth.asm):04006 (10)            mul                     *p * *q to D (tmpval in the C code)
F954 E35F             (        forth.asm):04007 (5+1)           addd    -1,u            r[-1] += tmpval
F956 ED5F             (        forth.asm):04008 (5+1)           std     -1,u
F958 2402             (        forth.asm):04009 (3)             bcc     @ncarry
F95A 6C5E             (        forth.asm):04010 (6+1)           inc     -2,u            r[-2] += carry (propagate carry from ADDD above)
F95C 335F             (        forth.asm):04011 (4+1)   @ncarry leau    -1,u            r--
F95E 301F             (        forth.asm):04012 (4+1)           leax    -1,x            p--
F960 114A             (        forth.asm):04013 (2)             dece                    i--
F962 26EB             (        forth.asm):04014 (3)             bne     @inner
F964 3341             (        forth.asm):04015 (4+1)           leau    1,u             r++
F966 313F             (        forth.asm):04016 (4+1)           leay    -1,y            q--
F968 115A             (        forth.asm):04017 (2)             decf                    j--
F96A 26DC             (        forth.asm):04018 (3)             bne     @outer
F96C EE64             (        forth.asm):04019 (5+1)           ldu     4,s             Restore the U register
F96E 10ECE4           (        forth.asm):04020 (8+0)           ldq     ,s
F971 10EDC4           (        forth.asm):04021 (8+0)           stq     ,u              Result to the data stack (in place)
F974 3266             (        forth.asm):04022 (4+1)           leas    6,s             Release system stack scratch space
F976 39               (        forth.asm):04023 (4)             rts
                      (        forth.asm):04024         
F977 02               (        forth.asm):04025         TWOTIM  fcb     2               ANSI (Core)
F978 322A             (        forth.asm):04026                 fcc     '2*'            ( x1 -- x2 )
F97A F92E             (        forth.asm):04027                 fdb     UMSTAR
                      (        forth.asm):04028                 RFCS
F97C BDE9C6           (        forth.asm):04029 (7)             jsr     MIN1PST         One cell needs to be stacked up
F97F ECC4             (        forth.asm):04030 (5+0)           ldd     ,u
F981 1048             (        forth.asm):04031 (2)             asld
F983 EDC4             (        forth.asm):04032 (5+0)           std     ,u
F985 39               (        forth.asm):04033 (4)             rts
                      (        forth.asm):04034         
F986 02               (        forth.asm):04035         TWODIV  fcb     2               ANSI (Core)
F987 322F             (        forth.asm):04036                 fcc     '2/'            ( x1 -- x2 )
F989 F977             (        forth.asm):04037                 fdb     TWOTIM
                      (        forth.asm):04038                 RFCS
F98B BDE9C6           (        forth.asm):04039 (7)             jsr     MIN1PST         One cell needs to be stacked up
F98E ECC4             (        forth.asm):04040 (5+0)           ldd     ,u
F990 1047             (        forth.asm):04041 (2)             asrd
F992 EDC4             (        forth.asm):04042 (5+0)           std     ,u
F994 39               (        forth.asm):04043 (4)             rts
                      (        forth.asm):04044         
F995 03               (        forth.asm):04045         MOD     fcb     3               ANSI (Core)
F996 4D4F44           (        forth.asm):04046                 fcc     'MOD'           ( N1 N2 -- N3 )
F999 F986             (        forth.asm):04047                 fdb     TWODIV
                      (        forth.asm):04048                 RFCS
F99B 8601             (        forth.asm):04049 (2)             lda     #DVFMOD
F99D 9738             (        forth.asm):04050 (3)             sta     DIVFCN          Function 1: return only the modulo
F99F 2031             (        forth.asm):04051 (3)             bra     DIV1
                      (        forth.asm):04052         
F9A1 04               (        forth.asm):04053         SLMOD   fcb     4               ANSI (Core)
F9A2 2F4D4F44         (        forth.asm):04054                 fcc     '/MOD'          ( N1 N2 -- N3 N4 )
F9A6 F995             (        forth.asm):04055                 fdb     MOD
                      (        forth.asm):04056                 RFCS
F9A8 0F38             (        forth.asm):04057 (5)             clr     DIVFCN          Function 0: return the quotient and the modulo
F9AA 2026             (        forth.asm):04058 (3)             bra     DIV1
                      (        forth.asm):04059         
F9AC 06               (        forth.asm):04060         FMSLMOD fcb     6               ANSI (Core)
F9AD 464D2F4D4F44     (        forth.asm):04061                 fcc     'FM/MOD'        ( D1 N1 -- N2 N3 )
F9B3 F9A1             (        forth.asm):04062                 fdb     SLMOD
                      (        forth.asm):04063                 RFCS
F9B5 8608             (        forth.asm):04064 (2)             lda     #(DVFSLMD|DVOA1D) Function 0, arg #1 is double
F9B7 9738             (        forth.asm):04065 (3)             sta     DIVFCN
F9B9 2017             (        forth.asm):04066 (3)             bra     DIV1
                      (        forth.asm):04067         
F9BB 06               (        forth.asm):04068         SMSLREM fcb     6               ANSI (Core)
F9BC 534D2F52454D     (        forth.asm):04069                 fcc     'SM/REM'        ( D1 N1 -- N2 N3 )
F9C2 F9AC             (        forth.asm):04070                 fdb     FMSLMOD
                      (        forth.asm):04071                 RFCS
                      (        forth.asm):04072         * Function 0, arg #1 is double, want symmetric division.
F9C4 8618             (        forth.asm):04073 (2)             lda     #(DVFSLMD|DVOA1D|DVOWSYM)
F9C6 9738             (        forth.asm):04074 (3)             sta     DIVFCN
F9C8 2008             (        forth.asm):04075 (3)             bra     DIV1
                      (        forth.asm):04076         
                      (        forth.asm):04077         * /, MOD and /MOD are essentially the same function returning
                      (        forth.asm):04078         * the different parts returned by DIVQ.
                      (        forth.asm):04079         * We use a global variable to distinguish which functionality
                      (        forth.asm):04080         * is being requested:
                      (        forth.asm):04081         * 0: return the modulo and the quotient (/MOD).
                      (        forth.asm):04082         * 1: return the modulo only (MOD).
                      (        forth.asm):04083         * 2: return the quotient only (/).
F9CA 01               (        forth.asm):04084         DIV     fcb     1               ANSI (Core)
F9CB 2F               (        forth.asm):04085                 fcc     '/'             ( n1|d1 n2 -- n3 [n4] )
F9CC F9BB             (        forth.asm):04086                 fdb     SMSLREM
                      (        forth.asm):04087                 RFCS
F9CE 8602             (        forth.asm):04088 (2)             lda     #DVFDIV
F9D0 9738             (        forth.asm):04089 (3)             sta     DIVFCN          Function 2: return only the quotient
F9D2 0F3C             (        forth.asm):04090 (5)     DIV1    clr     F83DIVF         Assume no adjustment required for floored div.
                      (        forth.asm):04091         
                      (        forth.asm):04092         * Split function code options into individual flags, extract base function code.
F9D4 0F39             (        forth.asm):04093 (5)             clr     DIVDBL
F9D6 0F3A             (        forth.asm):04094 (5)             clr     DIVSYM
F9D8 8601             (        forth.asm):04095 (2)             lda     #1
F9DA D638             (        forth.asm):04096 (3)             ldb     DIVFCN
F9DC C508             (        forth.asm):04097 (2)             bitb    #DVOA1D
F9DE 2702             (        forth.asm):04098 (3)             beq     *+4
F9E0 9739             (        forth.asm):04099 (3)             sta     DIVDBL
F9E2 C510             (        forth.asm):04100 (2)             bitb    #DVOWSYM
F9E4 2702             (        forth.asm):04101 (3)             beq     *+4
F9E6 973A             (        forth.asm):04102 (3)             sta     DIVSYM
F9E8 C407             (        forth.asm):04103 (2)             andb    #DVFMASK
F9EA D738             (        forth.asm):04104 (3)             stb     DIVFCN
                      (        forth.asm):04105         
F9EC 0D39             (        forth.asm):04106 (4)             tst     DIVDBL          Numerator is double cell?
F9EE 2605             (        forth.asm):04107 (3)             bne     *+7             Yes
F9F0 BDE9CB           (        forth.asm):04108 (7)             jsr     MIN2PST         Assert single cell division reqs are met
F9F3 2003             (        forth.asm):04109 (3)             bra     *+5             Stacked parameters reqs verified OK
F9F5 BDE9D0           (        forth.asm):04110 (7)             jsr     MIN3PST         Assert double cell division reqs are met
                      (        forth.asm):04111         
F9F8 0D3A             (        forth.asm):04112 (4)             tst     DIVSYM
F9FA 2608             (        forth.asm):04113 (3)             bne     @dvsym          Symmetric division is wanted
F9FC A642             (        forth.asm):04114 (4+1)           lda     2,u             Numerator's MSB
F9FE A8C4             (        forth.asm):04115 (4+0)           eora    ,u              Different sign from the denominator's MSB?
FA00 2A02             (        forth.asm):04116 (3)             bpl     @dvsym          No, proceed to the division code
FA02 0C3C             (        forth.asm):04117 (5)             inc     F83DIVF         Numerator and denominator have different signs
FA04 0D39             (        forth.asm):04118 (4)     @dvsym  tst     DIVDBL
FA06 2705             (        forth.asm):04119 (3)             beq     @dvsgn
FA08 10EC42           (        forth.asm):04120 (8+1)           ldq     2,u             Double cell numerator to D:W
FA0B 2009             (        forth.asm):04121 (3)             bra     @dvactu
                      (        forth.asm):04122         * Division by zero conditions are dealt with through the trap handler.
FA0D 104F             (        forth.asm):04123 (2)     @dvsgn  clrd                    Clear the numerator's MSC
FA0F 10A642           (        forth.asm):04124 (6+1)           ldw     2,u             Numerator's LSC
FA12 2A02             (        forth.asm):04125 (3)             bpl     @dvactu         Branch if no sign extension is needed
                      (        forth.asm):04126         * Sign extension from W to Q.
FA14 1043             (        forth.asm):04127 (2)             comd                    -1 to D (numerator's MSC)
FA16 11AEC4           (        forth.asm):04128 (36)    @dvactu divq    ,u              ,u has the denominator
FA19 8D1F             (        forth.asm):04129 (6)             bsr     FDIVADJ         Perform floored division adjustment, if needed
                      (        forth.asm):04130         
FA1B 0D39             (        forth.asm):04131 (4)             tst     DIVDBL
FA1D 2702             (        forth.asm):04132 (3)             beq     *+4
FA1F 3342             (        forth.asm):04133 (4+1)           leau    2,u             Drop one cell from the data stack
                      (        forth.asm):04134         
FA21 0D38             (        forth.asm):04135 (4)             tst     DIVFCN
FA23 2606             (        forth.asm):04136 (3)             bne     @div4
FA25 ED42             (        forth.asm):04137 (5+1)           std     2,u             Function 0: return the modulo and the quotient
FA27 10A7C4           (        forth.asm):04138 (6+0)   @div3   stw     ,u              Function 2: return only the quotient
FA2A 39               (        forth.asm):04139 (4)             rts
FA2B 3342             (        forth.asm):04140 (4+1)   @div4   leau    2,u             Drop one cell from the data stack
FA2D 1F07             (        forth.asm):04141 (4)             tfr     d,v             Backup the modulo
FA2F 9638             (        forth.asm):04142 (3)             lda     DIVFCN
FA31 8101             (        forth.asm):04143 (2)             cmpa    #1
FA33 26F2             (        forth.asm):04144 (3)             bne     @div3
FA35 1F70             (        forth.asm):04145 (4)             tfr     v,d             Restore the modulo
FA37 EDC4             (        forth.asm):04146 (5+0)           std     ,u              Function 1: return only the modulo
FA39 39               (        forth.asm):04147 (4)             rts
                      (        forth.asm):04148         
                      (        forth.asm):04149         * Quotient is returned in W, modulo in D but this is symmetric division :-(
                      (        forth.asm):04150         * Need to return a floored division result for compat. with F83 and ANSI impls.
FA3A 104D             (        forth.asm):04151 (2)     FDIVADJ tstd                    Is the remainder zero?
FA3C 2708             (        forth.asm):04152 (3)             beq     @no83ad         Yes. No adjusment required for floored division
FA3E 0D3C             (        forth.asm):04153 (4)             tst     F83DIVF         Different signs for numerator and denominator?
FA40 2704             (        forth.asm):04154 (3)             beq     @no83ad         No. Adjusment not needed for floored division
                      (        forth.asm):04155         * Adjusment for F83 floored division.
FA42 105A             (        forth.asm):04156 (2)             decw                    Decrement the quotient
FA44 E3C4             (        forth.asm):04157 (5+0)           addd    ,u              Add the denominator to the modulo
FA46 39               (        forth.asm):04158 (4)     @no83ad rts
                      (        forth.asm):04159         
FA47 02               (        forth.asm):04160         STRSLSH fcb     2               ANSI (Core)
FA48 2A2F             (        forth.asm):04161                 fcc     '*/'            ( N1 N2 N3 -- N4 [N5] )
FA4A F9CA             (        forth.asm):04162                 fdb     DIV
                      (        forth.asm):04163                 RFCS
FA4C 8601             (        forth.asm):04164 (2)             lda     #1
FA4E 973D             (        forth.asm):04165 (3)             sta     STSLFCN
FA50 BDE9D0           (        forth.asm):04166 (7)     STRSL1  jsr     MIN3PST         Three cells need to be stacked up
FA53 0F3C             (        forth.asm):04167 (5)             clr     F83DIVF         Assume no adjustment required for floored div.
                      (        forth.asm):04168         * Division by zero conditions are dealt with through the trap handler.
FA55 EC44             (        forth.asm):04169 (5+1)           ldd     4,u             N1
FA57 11AF42           (        forth.asm):04170 (30+1)          muld    2,u             N2 (N1 * N2 -> D:W)
FA5A 3402             (        forth.asm):04171 (4+1)           pshs    a               Product's MSC's MSB
FA5C A8C4             (        forth.asm):04172 (4+0)           eora    ,u              Different sign from the denominator's?
FA5E 2A02             (        forth.asm):04173 (3)             bpl     @stslpr         No. Floored division adjustment not needed
FA60 0C3C             (        forth.asm):04174 (5)             inc     F83DIVF
FA62 3502             (        forth.asm):04175 (4+1)   @stslpr puls    a
FA64 11AEC4           (        forth.asm):04176 (36)            divq    ,u              N3
FA67 8DD1             (        forth.asm):04177 (6)             bsr     FDIVADJ         Perform floored division adjustment, if needed
FA69 3342             (        forth.asm):04178 (4+1)           leau    2,u
FA6B 0D3D             (        forth.asm):04179 (4)             tst     STSLFCN
FA6D 2606             (        forth.asm):04180 (3)             bne     @strsl2         Just the quotient, Ma'am!
FA6F ED42             (        forth.asm):04181 (5+1)           std     2,u             N4: the modulo
FA71 10A7C4           (        forth.asm):04182 (6+0)           stw     ,u              N5: the quotient
FA74 39               (        forth.asm):04183 (4)             rts
FA75 3342             (        forth.asm):04184 (4+1)   @strsl2 leau    2,u
FA77 10A7C4           (        forth.asm):04185 (6+0)           stw     ,u              N4
FA7A 39               (        forth.asm):04186 (4)             rts
                      (        forth.asm):04187         
FA7B 05               (        forth.asm):04188         STRSLMD fcb     5               ANSI (Core)
FA7C 2A2F4D4F44       (        forth.asm):04189                 fcc     '*/MOD'         ( N1 N2 N3 -- N4 N5 )
FA81 FA47             (        forth.asm):04190                 fdb     STRSLSH
                      (        forth.asm):04191                 RFCS
FA83 0F3D             (        forth.asm):04192 (5)             clr     STSLFCN
FA85 20C9             (        forth.asm):04193 (3)             bra     STRSL1
                      (        forth.asm):04194         
FA87 06               (        forth.asm):04195         UMSLMOD fcb     6               ANSI (Core)
FA88 554D2F4D4F44     (        forth.asm):04196                 fcc     'UM/MOD'        ( ud u1 -- u2 u3 )
FA8E FA7B             (        forth.asm):04197                 fdb     STRSLMD
                      (        forth.asm):04198                 RFCS
FA90 BDE9D0           (        forth.asm):04199 (7)             jsr     MIN3PST
FA93 ECC4             (        forth.asm):04200 (5+0)           ldd     ,u              Is U1 zero?
FA95 2605             (        forth.asm):04201 (3)             bne     @cont           No
FA97 C604             (        forth.asm):04202 (2)     @oor    ldb     #4              Division by zero/Out of range
FA99 BDE74C           (        forth.asm):04203 (7)             jsr     ERRHDLR         No return
FA9C BDE7E4           (        forth.asm):04204 (7)     @cont   jsr     NPOP
FA9F 1F10             (        forth.asm):04205 (4)             tfr     x,d             U1 (denominator) to D
FAA1 BDE7E4           (        forth.asm):04206 (7)             jsr     NPOP
FAA4 1F12             (        forth.asm):04207 (4)             tfr     x,y             Numerator MSC TO Y
FAA6 BDE7E4           (        forth.asm):04208 (7)             jsr     NPOP            Numerator LSC to X
FAA9 32E8EF           (        forth.asm):04209 (4+1)           leas    -17,s
FAAC ED6E             (        forth.asm):04210 (5+1)           std     14,s            Denominator
FAAE AF6C             (        forth.asm):04211 (5+1)           stx     12,s            Numerator least significant cell
FAB0 10AF6A           (        forth.asm):04212 (6+1)           sty     10,s            Numerator most significant cell
FAB3 BDF61E           (        forth.asm):04213 (7)             jsr     DBDIVSG
FAB6 EC66             (        forth.asm):04214 (5+1)           ldd     6,s             Quotient high
FAB8 26DD             (        forth.asm):04215 (3)             bne     @oor            Out of range
FABA AEE4             (        forth.asm):04216 (5+0)           ldx     ,s              Remainder (U2)
FABC 3610             (        forth.asm):04217                 UCNPUSH
FABE AE68             (        forth.asm):04218 (5+1)           ldx     8,s             Quotient low (U3)
FAC0 3610             (        forth.asm):04219                 UCNPUSH
FAC2 32E811           (        forth.asm):04220 (4+1)           leas    17,s
FAC5 39               (        forth.asm):04221 (4)             rts
                      (        forth.asm):04222         
                      (        forth.asm):04223         * Returns the current value of the Sreg register (informational only).
                      (        forth.asm):04224         * This word is either called (JSROPC) or jumped to (JMPOPC), as a result
                      (        forth.asm):04225         * of the tail call optimization process. There is no way to tell the
                      (        forth.asm):04226         * difference. Here we assume that it is called and return Sreg.
FAC6 01               (        forth.asm):04227         SYSSTK  fcb     1               Non-standard
FAC7 53               (        forth.asm):04228                 fcc     'S'
FAC8 FA87             (        forth.asm):04229                 fdb     UMSLMOD
                      (        forth.asm):04230                 RFCS
FACA 1F41             (        forth.asm):04231 (4)             tfr     s,x
FACC 7EE7D6           (        forth.asm):04232 (3)             jmp     NPUSH
                      (        forth.asm):04233         
FACF 02               (        forth.asm):04234         SYSSTAT fcb     2               Non-standard
FAD0 5340             (        forth.asm):04235                 fcc     'S@'
FAD2 FAC6             (        forth.asm):04236                 fdb     SYSSTK
                      (        forth.asm):04237                 RFCS
FAD4 AEE4             (        forth.asm):04238 (5+0)           ldx     ,s
FAD6 7EE7D6           (        forth.asm):04239 (3)             jmp     NPUSH
                      (        forth.asm):04240         
FAD9 07               (        forth.asm):04241         PAYLOAD fcb     7               Non standard
FADA 5041594C4F4144   (        forth.asm):04242                 fcc     'PAYLOAD'       ( -- len ) where len is the code payload
FAE1 FACF             (        forth.asm):04243                 fdb     SYSSTAT         of the word located by FIND (or NULL)
                      (        forth.asm):04244                 RFCS
FAE3 9E10             (        forth.asm):04245 (4)             ldx     FNDPLD          Code payload reported by FIND
FAE5 7EE7D6           (        forth.asm):04246 (3)             jmp     NPUSH
                      (        forth.asm):04247         
                      (        forth.asm):04248         * Differences from the original code (WORDS):
                      (        forth.asm):04249         * - display number in HEX rather than in the current base.
                      (        forth.asm):04250         * - dropped feat: the original stuff was interactively paged by 15 line screens.
                      (        forth.asm):04251         * - added feat: display code implementation payload.
                      (        forth.asm):04252         * - added feat: display the immedediate and define (compile time only) flags.
                      (        forth.asm):04253         * - added feat: display the forgettable status (R/W). Everything user
                      (        forth.asm):04254         *   defined is forgettable (i.e. RAM resident).
FAE8 05               (        forth.asm):04255         WORDS   fcb     5               ANSI (Programming tools)
FAE9 574F524453       (        forth.asm):04256                 fcc     'WORDS'         ( -- )
FAEE FAD9             (        forth.asm):04257                 fdb     PAYLOAD
                      (        forth.asm):04258                 RFCS
FAF0 9E08             (        forth.asm):04259 (4)             ldx     DICEND
FAF2 9F1A             (        forth.asm):04260 (4)             stx     VLPRVEP         Last word code address + 1
FAF4 9E06             (        forth.asm):04261 (4)             ldx     LSTWAD
FAF6 9F1C             (        forth.asm):04262 (4)     @vlist1 stx     VLPRVHD         Last word header pointer
FAF8 108E044C         (        forth.asm):04263 (4)             ldy     #TBUFF
FAFC E680             (        forth.asm):04264 (4+1)           ldb     ,x+
FAFE 3404             (        forth.asm):04265 (4+1)           pshs    b
FB00 C41F             (        forth.asm):04266 (2)             andb    #WRLNMSK        Mask out word length
FB02 4F               (        forth.asm):04267 (1)             clra
FB03 3404             (        forth.asm):04268 (4+1)           pshs    b               Preserve word length
FB05 1F06             (        forth.asm):04269 (4)             tfr     d,w
FB07 113812           (        forth.asm):04270 (6+?)           tfm     x+,y+
FB0A 3502             (        forth.asm):04271 (4+1)           puls    a               Restore word length to A
FB0C C620             (        forth.asm):04272 (2)             ldb     #WRLNMSK+1
FB0E 103289           (        forth.asm):04273 (4)             subr    a,b             Number of spaces we want to emit
FB11 8620             (        forth.asm):04274 (2)             lda     #SP
FB13 A7A0             (        forth.asm):04275 (4+1)   @vlist2 sta     ,y+
FB15 5A               (        forth.asm):04276 (1)             decb
FB16 26FB             (        forth.asm):04277 (3)             bne     @vlist2
FB18 6FA0             (        forth.asm):04278 (6+1)           clr     ,y+             Terminate formatted output string
FB1A 3410             (        forth.asm):04279 (4+2)           pshs    x               Address of the current word backlink address
FB1C BDE2F7           (        forth.asm):04280 (7)             jsr     PUTCR           Carriage return is output before anything else
FB1F 8E044C           (        forth.asm):04281 (3)             ldx     #TBUFF
FB22 BDE2EA           (        forth.asm):04282 (7)             jsr     PUTS            Output word name formatted on 17 chars + SP
FB25 AEE4             (        forth.asm):04283 (5+0)           ldx     ,s
                      (        forth.asm):04284                 IFNE    RELFEAT
                      (        forth.asm):04285                 leax    3,x             Word XT to X (Skip backlink and checksum)
                      (        forth.asm):04286                 ELSE
FB27 3002             (        forth.asm):04287 (4+1)           leax    2,x             Word XT to X (Skip backlink)
                      (        forth.asm):04288                 ENDC                    RELFEAT
FB29 1F10             (        forth.asm):04289 (4)             tfr     x,d             CVNSTR depends on UBASE and we want HEX output
FB2B 108E044C         (        forth.asm):04290 (4)             ldy     #TBUFF
FB2F BDE192           (        forth.asm):04291 (7)             jsr     HDMP4           So we use trusted debugging code
FB32 8E044C           (        forth.asm):04292 (3)             ldx     #TBUFF
FB35 BDE2EA           (        forth.asm):04293 (7)             jsr     PUTS
                      (        forth.asm):04294         * Now to display word implementation length.
                      (        forth.asm):04295         * Implementation code length is from ,s+3 (or 2) to VLPRVEP
FB38 8609             (        forth.asm):04296 (2)             lda     #HT
FB3A BDE2D7           (        forth.asm):04297 (7)             jsr     PUTCH
FB3D 9E1A             (        forth.asm):04298 (4)             ldx     VLPRVEP
FB3F 10AEE4           (        forth.asm):04299 (6+0)           ldy     ,s
                      (        forth.asm):04300                 IFNE    RELFEAT
                      (        forth.asm):04301                 leay    3,y             Current word code entry address
                      (        forth.asm):04302                 ELSE
FB42 3122             (        forth.asm):04303 (4+1)           leay    2,y             Current word code entry address
                      (        forth.asm):04304                 ENDC                    RELFEAT
FB44 103221           (        forth.asm):04305 (4)             subr    y,x
FB47 1F10             (        forth.asm):04306 (4)             tfr     x,d
FB49 108E044C         (        forth.asm):04307 (4)             ldy     #TBUFF
FB4D BDE192           (        forth.asm):04308 (7)             jsr     HDMP4
FB50 8E044C           (        forth.asm):04309 (3)             ldx     #TBUFF
FB53 BDE2EA           (        forth.asm):04310 (7)             jsr     PUTS
                      (        forth.asm):04311         # Display attribute flags.
FB56 8609             (        forth.asm):04312 (2)             lda     #HT
FB58 BDE2D7           (        forth.asm):04313 (7)             jsr     PUTCH
FB5B 8E044C           (        forth.asm):04314 (3)             ldx     #TBUFF
FB5E E662             (        forth.asm):04315 (4+1)           ldb     2,s             Word attribute to B
FB60 862D             (        forth.asm):04316 (2)             lda     #'-
FB62 C580             (        forth.asm):04317 (2)             bitb    #IMDFLM         Check for immediate
FB64 2702             (        forth.asm):04318 (3)             beq     @vlist4
FB66 8649             (        forth.asm):04319 (2)             lda     #'I
FB68 A780             (        forth.asm):04320 (4+1)   @vlist4 sta     ,x+
FB6A 862D             (        forth.asm):04321 (2)             lda     #'-
FB6C C540             (        forth.asm):04322 (2)             bitb    #DEFFLM         Check for define (compile time only)
FB6E 2702             (        forth.asm):04323 (3)             beq     @vlist5
FB70 8643             (        forth.asm):04324 (2)             lda     #'C
FB72 A780             (        forth.asm):04325 (4+1)   @vlist5 sta     ,x+
                      (        forth.asm):04326                 IFNE    RELFEAT
                      (        forth.asm):04327                 lda     #'-
                      (        forth.asm):04328                 bitb    #MONFLM         Check for monitored status
                      (        forth.asm):04329                 beq     @vlst51
                      (        forth.asm):04330                 lda     #'M
FB74                  (        forth.asm):04331         @vlst51 sta     ,x+
                      (        forth.asm):04332                 ENDC                    RELFEAT
                      (        forth.asm):04333         * Check for forgettable also. In ROM => R else W unless we just processed '@'.
FB74 8652             (        forth.asm):04334 (2)             lda     #'R
FB76 10AEE4           (        forth.asm):04335 (6+0)           ldy     ,s
                      (        forth.asm):04336                 IFNE    RELFEAT
                      (        forth.asm):04337                 leay    3,y             Word entry point to Y
                      (        forth.asm):04338                 ELSE
FB79 3122             (        forth.asm):04339 (4+1)           leay    2,y             Word entry point to Y
                      (        forth.asm):04340                 ENDC                    RELFEAT
FB7B 108C0CC4         (        forth.asm):04341 (4)             cmpy    #RAMFTCH        @ in RAM is unforgettable
FB7F 2708             (        forth.asm):04342 (3)             beq     @vlist6
FB81 108CE000         (        forth.asm):04343 (4)             cmpy    #ROMSTRT        as are all ROM resident words
FB85 2402             (        forth.asm):04344 (3)             bcc     @vlist6
FB87 8657             (        forth.asm):04345 (2)             lda     #'W
FB89 A780             (        forth.asm):04346 (4+1)   @vlist6 sta     ,x+
FB8B 6F84             (        forth.asm):04347 (6+0)           clr     ,x
FB8D 8E044C           (        forth.asm):04348 (3)             ldx     #TBUFF
FB90 BDE2EA           (        forth.asm):04349 (7)             jsr     PUTS
                      (        forth.asm):04350         * The point at which VLPRVHD==WDICSPC is a singularity (RAM to ROM transition).
FB93 9E1C             (        forth.asm):04351 (4)             ldx     VLPRVHD
FB95 8C0CC0           (        forth.asm):04352 (3)             cmpx    #WDICSPC
FB98 2608             (        forth.asm):04353 (3)             bne     @vlist7
FB9A 8EFE07           (        forth.asm):04354 (3)             ldx     #QMARK          Word just before @ (ROM flavor)
FB9D 9F1C             (        forth.asm):04355 (4)             stx     VLPRVHD
FB9F 8EFE11           (        forth.asm):04356 (3)             ldx     #THEEND
FBA2 9F1A             (        forth.asm):04357 (4)     @vlist7 stx     VLPRVEP
FBA4 3510             (        forth.asm):04358 (4+2)           puls    x
FBA6 3504             (        forth.asm):04359 (4+1)           puls    b
FBA8 AE84             (        forth.asm):04360 (5+0)           ldx     ,x              Point to previous word
FBAA 1026FF48         (        forth.asm):04361 (5)             lbne    @vlist1
FBAE 39               (        forth.asm):04362 (4)             rts
                      (        forth.asm):04363         
FBAF 05               (        forth.asm):04364         STATE   fcb     5               ANSI (Core/Programming tools ext)
FBB0 5354415445       (        forth.asm):04365                 fcc     'STATE'         ( -- a-addr )
FBB5 FAE8             (        forth.asm):04366                 fdb     WORDS
                      (        forth.asm):04367                 RFCS
FBB7 8E0124           (        forth.asm):04368 (3)             ldx     #USTATE
FBBA 7EE7D6           (        forth.asm):04369 (3)             jmp     NPUSH
                      (        forth.asm):04370         
FBBD 04               (        forth.asm):04371         BASE    fcb     4               ANSI (Core)
FBBE 42415345         (        forth.asm):04372                 fcc     'BASE'          ( -- a-addr )
FBC2 FBAF             (        forth.asm):04373                 fdb     STATE
                      (        forth.asm):04374                 RFCS
FBC4 8E0122           (        forth.asm):04375 (3)             ldx     #UBASE
FBC7 7EE7D6           (        forth.asm):04376 (3)             jmp     NPUSH
                      (        forth.asm):04377         
FBCA 07               (        forth.asm):04378         DECIMAL fcb     7               ANSI (Core)
FBCB 444543494D414C   (        forth.asm):04379                 fcc     'DECIMAL'       ( -- )
FBD2 FBBD             (        forth.asm):04380                 fdb     BASE
                      (        forth.asm):04381                 RFCS
FBD4 CC000A           (        forth.asm):04382 (3)             ldd     #10
FBD7 DD22             (        forth.asm):04383 (4)     BASESET std     UBASE
FBD9 39               (        forth.asm):04384 (4)             rts
                      (        forth.asm):04385         
FBDA 03               (        forth.asm):04386         HEX     fcb     3               ANSI (Core)
FBDB 484558           (        forth.asm):04387                 fcc     'HEX'           ( -- )
FBDE FBCA             (        forth.asm):04388                 fdb     DECIMAL
                      (        forth.asm):04389                 RFCS
FBE0 CC0010           (        forth.asm):04390 (3)             ldd     #16
FBE3 20F2             (        forth.asm):04391 (3)             bra     BASESET
                      (        forth.asm):04392         
FBE5 02               (        forth.asm):04393         DOTTICK fcb     2               Non-standard (SwiftForth)
FBE6 2E27             (        forth.asm):04394                 fcb     $2E,$27         .' ( memaddr -- )
FBE8 FBDA             (        forth.asm):04395                 fdb     HEX
                      (        forth.asm):04396                 RFCS
                      (        forth.asm):04397                 IFNE    SSDFEAT
FBEA BDE7E4           (        forth.asm):04398 (7)             jsr     NPOP
FBED 1F12             (        forth.asm):04399 (4)             tfr     x,y
FBEF 8E03FC           (        forth.asm):04400 (3)             ldx     #HEXBUF
FBF2 BDE616           (        forth.asm):04401 (7)             jsr     FINDSYM
                      (        forth.asm):04402                 ELSE
                      (        forth.asm):04403                 lda     #'$
                      (        forth.asm):04404                 jsr     PUTCH
                      (        forth.asm):04405                 jsr     NPOP
                      (        forth.asm):04406                 tfr     x,d
                      (        forth.asm):04407                 ldy     #HEXBUF
                      (        forth.asm):04408                 jsr     HDMP4
                      (        forth.asm):04409                 ENDC                    SSDFEAT
FBF5 8E03FC           (        forth.asm):04410 (3)             ldx     #HEXBUF
FBF8 7EE2EA           (        forth.asm):04411 (3)             jmp     PUTS
                      (        forth.asm):04412         
                      (        forth.asm):04413         * Display a dump of the data stack in the current BASE. In Leo Brodie's
                      (        forth.asm):04414         * "Starting Forth" the data stack is printed from the bottom up. So it is here.
FBFB 02               (        forth.asm):04415         DDUMP   fcb     2               ANSI (Programming tools)
FBFC 2E53             (        forth.asm):04416                 fcc     '.S'            ( -- )
FBFE FBE5             (        forth.asm):04417                 fdb     DOTTICK
                      (        forth.asm):04418                 RFCS
FC00 CC02F8           (        forth.asm):04419 (3)             ldd     #NSTBOT
FC03 103230           (        forth.asm):04420 (4)             subr    u,d
FC06 1044             (        forth.asm):04421 (2)             lsrd                    DEPTH is in D
FC08 272A             (        forth.asm):04422 (3)             beq     @ndump3         Data stack is empty
FC0A 3440             (        forth.asm):04423 (4+2)           pshs    u
FC0C CE02F8           (        forth.asm):04424 (3)             ldu     #NSTBOT         Pointing to the bottom of the data stack
FC0F 8601             (        forth.asm):04425 (2)             lda     #1
FC11 9741             (        forth.asm):04426 (3)             sta     CVISSGN         Force a signed number conversion
FC13 3404             (        forth.asm):04427 (4+1)   @ndump1 pshs    b
FC15 AEC3             (        forth.asm):04428 (5+2)           ldx     ,--u
FC17 BDE456           (        forth.asm):04429 (7)             jsr     CVNSTR
FC1A 8E044C           (        forth.asm):04430 (3)             ldx     #TBUFF
                      (        forth.asm):04431         # Skip leading spaces.
FC1D A680             (        forth.asm):04432 (4+1)   @ndump2 lda     ,x+
FC1F 8120             (        forth.asm):04433 (2)             cmpa    #SP
FC21 27FA             (        forth.asm):04434 (3)             beq     @ndump2
FC23 301F             (        forth.asm):04435 (4+1)           leax    -1,x
FC25 BDE2EA           (        forth.asm):04436 (7)             jsr     PUTS
FC28 8620             (        forth.asm):04437 (2)             lda     #SP
FC2A BDE2D7           (        forth.asm):04438 (7)             jsr     PUTCH
FC2D 3504             (        forth.asm):04439 (4+1)           puls    b
FC2F 5A               (        forth.asm):04440 (1)             decb
FC30 26E1             (        forth.asm):04441 (3)             bne     @ndump1
FC32 3540             (        forth.asm):04442 (4+2)           puls    u
FC34 39               (        forth.asm):04443 (4)     @ndump3 rts
                      (        forth.asm):04444         
FC35 04               (        forth.asm):04445         QRYDUP  fcb     4               ANSI (Core)
FC36 3F445550         (        forth.asm):04446                 fcc     '?DUP'          ( x -- 0 | x x )
FC3A FBFB             (        forth.asm):04447                 fdb     DDUMP
                      (        forth.asm):04448                 RFCS
FC3C BDE7E4           (        forth.asm):04449 (7)             jsr     NPOP            ZFLAG is set by NPOP
FC3F 3610             (        forth.asm):04450                 UCNPUSH                 Push back the original parameter
FC41 1026EB91         (        forth.asm):04451 (5)             lbne    NPUSH           And DUP if NZ
FC45 39               (        forth.asm):04452 (4)             rts
                      (        forth.asm):04453         
FC46 04               (        forth.asm):04454         TUCK    fcb     4               ANSI (Core ext)
FC47 5455434B         (        forth.asm):04455                 fcc     'TUCK'          ( x1 x2 -- x2 x1 x2 ) i.e. SWAP OVER
FC4B FC35             (        forth.asm):04456                 fdb     QRYDUP
                      (        forth.asm):04457                 RFCS
FC4D 8D2B             (        forth.asm):04458                 RFXT    bsr,SWAP+7      XT for SWAP
FC4F 2065             (        forth.asm):04459                 RFXT    bra,OVER+7      XT for OVER
                      (        forth.asm):04460         
FC51 03               (        forth.asm):04461         NIP     fcb     3               ANSI (Core ext)
FC52 4E4950           (        forth.asm):04462                 fcc     'NIP'           ( x1 x2 -- x2 ) i.e. SWAP DROP
FC55 FC46             (        forth.asm):04463                 fdb     TUCK
                      (        forth.asm):04464                 RFCS
FC57 8D21             (        forth.asm):04465                 RFXT    bsr,SWAP+7      XT for SWAP
FC59 2015             (        forth.asm):04466                 RFXT    bra,DROP+7      XT for DROP
                      (        forth.asm):04467         
FC5B 03               (        forth.asm):04468         DUP     fcb     3               ANSI (Core)
FC5C 445550           (        forth.asm):04469                 fcc     'DUP'           ( x -- x x )
FC5F FC51             (        forth.asm):04470                 fdb     NIP
                      (        forth.asm):04471                 RFCS
FC61 BDE9C6           (        forth.asm):04472 (7)             jsr     MIN1PST         At least one cell needs to be stacked up
FC64 AEC4             (        forth.asm):04473 (5+0)           ldx     ,u
FC66 7EE7D6           (        forth.asm):04474 (3)             jmp     NPUSH
                      (        forth.asm):04475         
FC69 04               (        forth.asm):04476         DROP    fcb     4               ANSI (Core)
FC6A 44524F50         (        forth.asm):04477                 fcc     'DROP'          ( x -- )
FC6E FC5B             (        forth.asm):04478                 fdb     DUP
                      (        forth.asm):04479                 RFCS
FC70 7EE7E4           (        forth.asm):04480 (3)             jmp     NPOP
                      (        forth.asm):04481         
FC73 04               (        forth.asm):04482         SWAP    fcb     4               ANSI (Core)
FC74 53574150         (        forth.asm):04483                 fcc     'SWAP'          ( x1 x2 -- x2 x1 )
FC78 FC69             (        forth.asm):04484                 fdb     DROP
                      (        forth.asm):04485                 RFCS
FC7A BDE9CB           (        forth.asm):04486 (7)             jsr     MIN2PST         We need at least two cells stacked up
FC7D 10ECC4           (        forth.asm):04487 (8+0)           ldq     ,u              In place SWAP
FC80 1E06             (        forth.asm):04488 (5)             exg     d,w
FC82 10EDC4           (        forth.asm):04489 (8+0)           stq     ,u
FC85 39               (        forth.asm):04490 (4)             rts
                      (        forth.asm):04491         
FC86 04               (        forth.asm):04492         PICK    fcb     4               ANSI (Core ext)
FC87 5049434B         (        forth.asm):04493                 fcc     'PICK'          ( xu ... x1 x0 u -- xu ... x1 x0 xu )
FC8B FC73             (        forth.asm):04494                 fdb     SWAP
                      (        forth.asm):04495                 RFCS
FC8D BDE7E4           (        forth.asm):04496 (7)             jsr     NPOP            Arg <u> to X (expressed in cells)
FC90 CC02F8           (        forth.asm):04497 (3)     PICK1   ldd     #NSTBOT
FC93 103230           (        forth.asm):04498 (4)             subr    u,d
FC96 1044             (        forth.asm):04499 (2)             lsrd                    D has the data stack depth in cells
FC98 103701           (        forth.asm):04500 (4)             cmpr    d,x             We need to make sure (unsigned) X < D
FC9B 240D             (        forth.asm):04501 (3)             bhs     @pick1
FC9D 1F10             (        forth.asm):04502 (4)             tfr     x,d
FC9F 1048             (        forth.asm):04503 (2)             lsld                    Arg <u> cells byte count to D
FCA1 30CB             (        forth.asm):04504 (4+2)           leax    d,u
FCA3 1F12             (        forth.asm):04505 (4)             tfr     x,y             For the sake of ROLL's implementation
FCA5 AE84             (        forth.asm):04506 (5+0)           ldx     ,x
FCA7 3610             (        forth.asm):04507                 UCNPUSH
FCA9 39               (        forth.asm):04508 (4)             rts
FCAA C60D             (        forth.asm):04509 (2)     @pick1  ldb     #13             Argument is greater than or equal to DEPTH
FCAC BDE74C           (        forth.asm):04510 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):04511         
FCAF 04               (        forth.asm):04512         OVER    fcb     4               ANSI (Core)
FCB0 4F564552         (        forth.asm):04513                 fcc     'OVER'          ( x1 x2 -- x1 x2 x1 )
FCB4 FC86             (        forth.asm):04514                 fdb     PICK
                      (        forth.asm):04515                 RFCS
FCB6 8E0001           (        forth.asm):04516 (3)             ldx     #1
FCB9 20D5             (        forth.asm):04517 (3)             bra     PICK1
                      (        forth.asm):04518         
FCBB 04               (        forth.asm):04519         ROLL    fcb     4               ANSI (Core ext)
FCBC 524F4C4C         (        forth.asm):04520                 fcc     'ROLL'          ( xu xu-1 ... x0 u -- xu-1 ... x0 xu )
FCC0 FCAF             (        forth.asm):04521                 fdb     OVER
                      (        forth.asm):04522                 RFCS
FCC2 BDE7E4           (        forth.asm):04523 (7)             jsr     NPOP
FCC5 1F16             (        forth.asm):04524 (4)     ROLL1   tfr     x,w             Backup arg <u> to W
FCC7 8DC7             (        forth.asm):04525 (6)             bsr     PICK1           Let PICK do the error handling
FCC9 3121             (        forth.asm):04526 (4+1)           leay    1,y             Point to the LSB of the cell being picked
FCCB 303E             (        forth.asm):04527 (4+1)           leax    -2,y
FCCD 105C             (        forth.asm):04528 (2)             incw
FCCF 103066           (        forth.asm):04529 (4)             addr    w,w
FCD2 113912           (        forth.asm):04530 (6+?)           tfm     x-,y-
FCD5 7EE7E4           (        forth.asm):04531 (3)             jmp     NPOP
                      (        forth.asm):04532         
FCD8 03               (        forth.asm):04533         ROT     fcb     3               ANSI (Core)
FCD9 524F54           (        forth.asm):04534                 fcc     'ROT'           ( x1 x2 x3 -- x2 x3 x1 )
FCDC FCBB             (        forth.asm):04535                 fdb     ROLL
                      (        forth.asm):04536                 RFCS
FCDE 8E0002           (        forth.asm):04537 (3)             ldx     #2
FCE1 20E2             (        forth.asm):04538 (3)             bra     ROLL1
                      (        forth.asm):04539         
FCE3 04               (        forth.asm):04540         MROT    fcb     4               Non-standard
FCE4 2D524F54         (        forth.asm):04541                 fcc     '-ROT'
FCE8 FCD8             (        forth.asm):04542                 fdb     ROT
                      (        forth.asm):04543                 RFCS
FCEA 8DF2             (        forth.asm):04544                 RFXT    bsr,ROT+6       XT for ROT
FCEC 20F0             (        forth.asm):04545                 RFXT    bra,ROT+6       XT for ROT
                      (        forth.asm):04546         
FCEE 02               (        forth.asm):04547         CCOMMA  fcb     2               ANSI (Core)
FCEF 432C             (        forth.asm):04548                 fcc     'C,'            ( char -- )
FCF1 FCE3             (        forth.asm):04549                 fdb     MROT
                      (        forth.asm):04550                 RFCS
FCF3 BDE7E4           (        forth.asm):04551 (7)             jsr     NPOP
FCF6 1F10             (        forth.asm):04552 (4)             tfr     x,d
FCF8 109E08           (        forth.asm):04553 (5)             ldy     DICEND
FCFB E7A0             (        forth.asm):04554 (4+1)           stb     ,y+
FCFD 109F08           (        forth.asm):04555 (5)             sty     DICEND
FD00 39               (        forth.asm):04556 (4)             rts
                      (        forth.asm):04557         
FD01 01               (        forth.asm):04558         COMMA   fcb     1               ANSI (Core)
FD02 2C               (        forth.asm):04559                 fcc     ','             ( x -- )
FD03 FCEE             (        forth.asm):04560                 fdb     CCOMMA
                      (        forth.asm):04561                 RFCS
FD05 BDE7E4           (        forth.asm):04562 (7)             jsr     NPOP
FD08 109E08           (        forth.asm):04563 (5)             ldy     DICEND
FD0B AFA1             (        forth.asm):04564 (5+2)           stx     ,y++
FD0D 109F08           (        forth.asm):04565 (5)             sty     DICEND
FD10 39               (        forth.asm):04566 (4)             rts
                      (        forth.asm):04567         
FD11 05               (        forth.asm):04568         ALLOT   fcb     5               ANSI (Core)
FD12 414C4C4F54       (        forth.asm):04569                 fcc     'ALLOT'         ( n -- )
FD17 FD01             (        forth.asm):04570                 fdb     COMMA
                      (        forth.asm):04571                 RFCS
FD19 BDE7E4           (        forth.asm):04572 (7)             jsr     NPOP            N to X
FD1C DC08             (        forth.asm):04573 (4)             ldd     DICEND
FD1E 308B             (        forth.asm):04574 (4+2)           leax    d,x
FD20 9F08             (        forth.asm):04575 (4)             stx     DICEND          Adjust HERE
FD22 39               (        forth.asm):04576 (4)             rts
                      (        forth.asm):04577         
FD23 04               (        forth.asm):04578         FILL    fcb     4               ANSI (Core)
FD24 46494C4C         (        forth.asm):04579                 fcc     'FILL'          ( c-addr u char -- )
FD28 FD11             (        forth.asm):04580                 fdb     ALLOT
                      (        forth.asm):04581                 RFCS
FD2A BDE7E4           (        forth.asm):04582 (7)             jsr     NPOP
FD2D 1F16             (        forth.asm):04583 (4)             tfr     x,w             Byte fill value to W
FD2F BDE7E4           (        forth.asm):04584 (7)     FILL1   jsr     NPOP
FD32 1F12             (        forth.asm):04585 (4)             tfr     x,y             Byte count to Y
FD34 1E26             (        forth.asm):04586 (5)             exg     y,w             Byte count to W, byte fill value to Y
FD36 BDE7E4           (        forth.asm):04587 (7)             jsr     NPOP            Destination address to X
FD39 105D             (        forth.asm):04588 (2)             tstw
FD3B 2F0B             (        forth.asm):04589 (3)             ble     @filend
FD3D 1F20             (        forth.asm):04590 (4)             tfr     y,d             Byte fill value to B
FD3F E784             (        forth.asm):04591 (4+0)           stb     ,x
FD41 105A             (        forth.asm):04592 (2)             decw
FD43 3101             (        forth.asm):04593 (4+1)           leay    1,x
FD45 113812           (        forth.asm):04594 (6+?)           tfm     x+,y+
FD48 39               (        forth.asm):04595 (4)     @filend rts
                      (        forth.asm):04596         
FD49 05               (        forth.asm):04597         BLANK   fcb     5               ANSI (String)
FD4A 424C414E4B       (        forth.asm):04598                 fcc     'BLANK'         ( c-addr u -- )
FD4F FD23             (        forth.asm):04599                 fdb     FILL
                      (        forth.asm):04600                 RFCS
FD51 10860020         (        forth.asm):04601 (4)             ldw     #SP
FD55 20D8             (        forth.asm):04602 (3)             bra     FILL1
                      (        forth.asm):04603         
FD57 06               (        forth.asm):04604         CMOVED  fcb     6               ANSI (String)
FD58 434D4F56453E     (        forth.asm):04605                 fcc     'CMOVE>'
FD5E FD49             (        forth.asm):04606                 fdb     BLANK
                      (        forth.asm):04607                 RFCS
FD60 BDE596           (        forth.asm):04608 (7)             jsr     ACQMOVP
FD63 105D             (        forth.asm):04609 (2)             tstw
FD65 270D             (        forth.asm):04610 (3)             beq     @cmovd1
FD67 105A             (        forth.asm):04611 (2)     CMOVD1  decw
FD69 103061           (        forth.asm):04612 (4)             addr    w,x
FD6C 103062           (        forth.asm):04613 (4)             addr    w,y
FD6F 105C             (        forth.asm):04614 (2)             incw
FD71 113912           (        forth.asm):04615 (6+?)           tfm     x-,y-
FD74 39               (        forth.asm):04616 (4)     @cmovd1 rts
                      (        forth.asm):04617         
FD75 05               (        forth.asm):04618         CMOVE   fcb     5               ANSI (String)
FD76 434D4F5645       (        forth.asm):04619                 fcc     'CMOVE'
FD7B FD57             (        forth.asm):04620                 fdb     CMOVED
                      (        forth.asm):04621                 RFCS
FD7D BDE596           (        forth.asm):04622 (7)             jsr     ACQMOVP
FD80 113812           (        forth.asm):04623 (6+?)           tfm     x+,y+
FD83 39               (        forth.asm):04624 (4)             rts
                      (        forth.asm):04625         
                      (        forth.asm):04626         * Functionally:
                      (        forth.asm):04627         * : MOVE ( addr1 addr2 u -- )      \ u is expressed in bytes
                      (        forth.asm):04628         *   DUP 2OVER                      \ addr1 addr2 u u addr1 addr2
                      (        forth.asm):04629         *   SWAP -                         \ addr1 addr2 u u addr2-addr1
                      (        forth.asm):04630         *   SWAP                           \ addr1 addr2 u addr2-addr1 u
                      (        forth.asm):04631         *   U< IF CMOVE> ELSE CMOVE THEN ;
                      (        forth.asm):04632         * For those who care to read the 1994 specification, arg <u> is expressed in
                      (        forth.asm):04633         * address units. For the rest of us, mere mortals, this is just a byte count.
                      (        forth.asm):04634         * As an aside, this is functionality provided by the glibc memmove function.
FD84 04               (        forth.asm):04635         MOVE    fcb     4               ANSI (Core)
FD85 4D4F5645         (        forth.asm):04636                 fcc     'MOVE'          ( addr1 addr2 u -- )
FD89 FD75             (        forth.asm):04637                 fdb     CMOVE
                      (        forth.asm):04638                 RFCS
FD8B BDE596           (        forth.asm):04639 (7)             jsr     ACQMOVP         ADDR1 -> X, ADDR2 -> Y, U -> W
FD8E 105D             (        forth.asm):04640 (2)             tstw
FD90 270D             (        forth.asm):04641 (3)             beq     @movend
                      (        forth.asm):04642         * addr2 addr1 - u U< IF CMOVE> ELSE CMOVE THEN
FD92 1F20             (        forth.asm):04643 (4)             tfr     y,d             D has addr2 (dest)
FD94 103210           (        forth.asm):04644 (4)             subr    x,d             D has addr2 - addr1 (dest - src)
FD97 103760           (        forth.asm):04645 (4)             cmpr    w,d
FD9A 25CB             (        forth.asm):04646 (3)             blo     CMOVD1          CMOVE>
FD9C 113812           (        forth.asm):04647 (6+?)           tfm     x+,y+           CMOVE
FD9F 39               (        forth.asm):04648 (4)     @movend rts
                      (        forth.asm):04649         
FDA0 05               (        forth.asm):04650         CELLS   fcb     5               ANSI (Core)
FDA1 43454C4C53       (        forth.asm):04651                 fcc     'CELLS'         ( n1 -- n2 )
FDA6 FD84             (        forth.asm):04652                 fdb     MOVE
                      (        forth.asm):04653                 RFCS
FDA8 BDE7E4           (        forth.asm):04654 (7)             jsr     NPOP            N1 to X
FDAB 103011           (        forth.asm):04655 (4)             addr    x,x             Times 2
FDAE 3610             (        forth.asm):04656                 UCNPUSH                 X to N2
FDB0 39               (        forth.asm):04657 (4)             rts
                      (        forth.asm):04658         
FDB1 04               (        forth.asm):04659         LAST    fcb     4               79-STANDARD (REF)
FDB2 4C415354         (        forth.asm):04660                 fcc     'LAST'
FDB6 FDA0             (        forth.asm):04661                 fdb     CELLS
                      (        forth.asm):04662                 RFCS
FDB8 9E06             (        forth.asm):04663 (4)             ldx     LSTWAD
FDBA 7EE7D6           (        forth.asm):04664 (3)             jmp     NPUSH
                      (        forth.asm):04665         
FDBD 04               (        forth.asm):04666         HERE    fcb     4               ANSI (Core)
FDBE 48455245         (        forth.asm):04667                 fcc     'HERE'          ( -- addr )
FDC2 FDB1             (        forth.asm):04668                 fdb     LAST
                      (        forth.asm):04669                 RFCS
FDC4 9E08             (        forth.asm):04670 (4)             ldx     DICEND
FDC6 7EE7D6           (        forth.asm):04671 (3)             jmp     NPUSH
                      (        forth.asm):04672         
FDC9 02               (        forth.asm):04673         PLUSST  fcb     2               ANSI (Core)
FDCA 2B21             (        forth.asm):04674                 fcc     '+!'            ( n|u a-addr -- )
FDCC FDBD             (        forth.asm):04675                 fdb     HERE
                      (        forth.asm):04676                 RFCS
FDCE BDE9CB           (        forth.asm):04677 (7)             jsr     MIN2PST         We need at least two cells stacked up
FDD1 AEC4             (        forth.asm):04678 (5+0)           ldx     ,u              ADDR to X
FDD3 EC84             (        forth.asm):04679 (5+0)           ldd     ,x              @ADDR to D
FDD5 E342             (        forth.asm):04680 (5+1)           addd    2,u             Add INCR to D
FDD7 ED84             (        forth.asm):04681 (5+0)           std     ,x              Store the sum back to ADDR
FDD9 3344             (        forth.asm):04682 (4+1)           leau    4,u             Drop two cells from the data stack
FDDB 39               (        forth.asm):04683 (4)             rts
                      (        forth.asm):04684         
FDDC 02               (        forth.asm):04685         CSTORE  fcb     2               ANSI (Core)
FDDD 4321             (        forth.asm):04686                 fcc     'C!'            ( char c-addr -- )
FDDF FDC9             (        forth.asm):04687                 fdb     PLUSST
                      (        forth.asm):04688                 RFCS
FDE1 BDE9CB           (        forth.asm):04689 (7)             jsr     MIN2PST         We need at least two cells stacked up
FDE4 A643             (        forth.asm):04690 (4+1)           lda     3,u             CHAR to A
FDE6 A7D4             (        forth.asm):04691 (4+3)           sta     [,u]            Actual store to C-ADDR
FDE8 3344             (        forth.asm):04692 (4+1)           leau    4,u             Drop two cells from the data stack
FDEA 39               (        forth.asm):04693 (4)             rts
                      (        forth.asm):04694         
FDEB 01               (        forth.asm):04695         STORE   fcb     1               ANSI (Core)
FDEC 21               (        forth.asm):04696                 fcc     '!'             ( x a-addr -- )
FDED FDDC             (        forth.asm):04697                 fdb     CSTORE
                      (        forth.asm):04698                 RFCS
FDEF BDE9CB           (        forth.asm):04699 (7)             jsr     MIN2PST         At least two cells need to be stacked up
FDF2 EC42             (        forth.asm):04700 (5+1)           ldd     2,u             X to D
FDF4 EDD4             (        forth.asm):04701 (5+3)           std     [,u]            Actual store to A-ADDR
FDF6 3344             (        forth.asm):04702 (4+1)           leau    4,u             Drop two cells from the user stack
FDF8 39               (        forth.asm):04703 (4)             rts
                      (        forth.asm):04704         
FDF9 02               (        forth.asm):04705         CFETCH  fcb     2               ANSI (Core)
FDFA 4340             (        forth.asm):04706                 fcc     'C@'            ( c-addr -- char )
FDFC FDEB             (        forth.asm):04707                 fdb     STORE
                      (        forth.asm):04708                 RFCS
FDFE BDE9C6           (        forth.asm):04709 (7)             jsr     MIN1PST         We need at least one cell stacked up
FE01 4F               (        forth.asm):04710 (1)             clra
FE02 E6D4             (        forth.asm):04711 (4+3)           ldb     [,u]
FE04 EDC4             (        forth.asm):04712 (5+0)           std     ,u
FE06 39               (        forth.asm):04713 (4)             rts
                      (        forth.asm):04714         
FE07 01               (        forth.asm):04715         QMARK   fcb     1               ANSI (Programming tools)
FE08 3F               (        forth.asm):04716                 fcc     '?'
FE09 FDF9             (        forth.asm):04717                 fdb     CFETCH
                      (        forth.asm):04718                 RFCS
FE0B BD0CC4           (        forth.asm):04719 (7)             jsr     RAMFTCH         Call the RAM based incarnation of @
FE0E 7EF68D           (        forth.asm):04720                 RFXT    jmp,DOT+4       XT for .
                      (        forth.asm):04721         
                      (        forth.asm):04722         * End of ROM part of the builtin dictionary.
     FE11             (        forth.asm):04723         THEEND  equ     *               This is the end, Beautiful friend
                      (        forth.asm):04724         *                               This is the end, My only friend
                      (        forth.asm):04725         
                      (        forth.asm):04726         * This word is relocated to RAM, so that we can compile new definitions.
                      (        forth.asm):04727         * FORTHIN will take care of that and adjust the relevant pointers.
FE11 01               (        forth.asm):04728         FETCH   fcb     1               ANSI (Core)
FE12 40               (        forth.asm):04729                 fcc     '@'             ( a-addr -- x )
FE13 FE07             (        forth.asm):04730                 fdb     QMARK
                      (        forth.asm):04731                 RFCS
FE15 BDE9C6           (        forth.asm):04732 (7)             jsr     MIN1PST         At least one cell needs to be stacked up
FE18 ECD4             (        forth.asm):04733 (5+3)           ldd     [,u]
FE1A EDC4             (        forth.asm):04734 (5+0)           std     ,u              Returned through the data stack
FE1C 39               (        forth.asm):04735 (4)             rts
                      (        forth.asm):04736         
     FE1D             (        forth.asm):04737         REALEND equ     *
                      (        forth.asm):04738         
                      (        forth.asm):04739         *******************************************************************************
                      (        forth.asm):04740         * String literals.
                      (        forth.asm):04741         
                      (        forth.asm):04742         * Using CR+LF as it is Minicom's default.
                      (        forth.asm):04743         
                      (        forth.asm):04744         * Clear the screen, VT100 style.
FE1D 1B5B481B5B4A0D00 (        forth.asm):04745         CSVT100 fcb     $1B,'[','H',$1B,'[','J',CR,NUL
                      (        forth.asm):04746         
FE25 0D0A             (        forth.asm):04747         BOOTMSG fcb     CR,LF
                      (        forth.asm):04748                 IFNE    RTCFEAT
                      (        forth.asm):04749                 fcc     'Z79Forth/AR 6309 ANS Forth System'
                      (        forth.asm):04750                 ELSE
FE27 5A3739466F727468 (        forth.asm):04751                 fcc     'Z79Forth/AI 6309 ANS Forth System'
     2F41492036333039
     20414E5320466F72
     7468205379737465
     6D
                      (        forth.asm):04752                 ENDC                    RTCFEAT
FE48 0D0A             (        forth.asm):04753                 fcb     CR,LF
FE4A 3230323330313232 (        forth.asm):04754                 fcc     '20230122 (C) Francois Laagel 2019'
     2028432920467261
     6E636F6973204C61
     6167656C20323031
     39
FE6B 0D0A0D0A00       (        forth.asm):04755                 fcb     CR,LF,CR,LF,NUL
                      (        forth.asm):04756         
FE70 52414D204F4B3A20 (        forth.asm):04757         RAMOKM  fcc     'RAM OK: 32 KB'
     3332204B42
FE7D 0D0A00           (        forth.asm):04758         CRLFSTR fcb     CR,LF,NUL
                      (        forth.asm):04759         
FE80 52414D2063686563 (        forth.asm):04760         RAMFM   fcc     'RAM check failed'
     6B206661696C6564
FE90 0D0A00           (        forth.asm):04761                 fcb     CR,LF,NUL
                      (        forth.asm):04762         
                      (        forth.asm):04763                 IFNE    RTCFEAT
FE93                  (        forth.asm):04764         RTPRESM fcc     'MC146818 RTC'
                      (        forth.asm):04765                 fcb     CR,LF,NUL
                      (        forth.asm):04766                 ENDC
                      (        forth.asm):04767         
                      (        forth.asm):04768                 IFEQ    CSSNTVE
FE93 206F6B           (        forth.asm):04769         OKFEEDB fcc     ' ok'           As per GNU Forth's implementation...
                      (        forth.asm):04770                 ELSE
FE96                  (        forth.asm):04771         OKFEEDB fcc     ' OK'
                      (        forth.asm):04772                 ENDC                    CSSNTVE
FE96 0D0A00           (        forth.asm):04773                 fcb     CR,LF,NUL
                      (        forth.asm):04774         
                      (        forth.asm):04775         * Error messages for IODZHDL.
FE99 496C6C6567616C20 (        forth.asm):04776         IOPERRM fcn     'Illegal opcode near '
     6F70636F6465206E
     6561722000
FEAE 4469766973696F6E (        forth.asm):04777         DV0ERRM fcn     'Division by 0 near '
     2062792030206E65
     61722000
                      (        forth.asm):04778         
FEC2 4461746120737461 (        forth.asm):04779         ERRMTBL fcn     'Data stack overflow'   Error 0
     636B206F76657266
     6C6F7700
FED6 4461746120737461 (        forth.asm):04780                 fcn     'Data stack underflow'  Error 1
     636B20756E646572
     666C6F7700
FEEB 3F00             (        forth.asm):04781                 fcn     '?'                     Error 2
FEED 557365722041424F (        forth.asm):04782                 fcn     'User ABORT'            Error 3
     525400
FEF8 4F6F52206572726F (        forth.asm):04783                 fcn     'OoR error'             Error 4 (formerly 'Division by zero')
     7200
FF02 4D697373696E6720 (        forth.asm):04784                 fcn     'Missing word name'     Error 5
     776F7264206E616D
     6500
FF14 496E636F72726563 (        forth.asm):04785                 fcn     'Incorrect STATE'       Error 6
     7420535441544500
FF24 52657475726E2073 (        forth.asm):04786                 fcn     'Return stack overflow' Error 7
     7461636B206F7665
     72666C6F7700
FF3A 52657475726E2073 (        forth.asm):04787                 fcn     'Return stack underflow' Error 8
     7461636B20756E64
     6572666C6F7700
FF51 496C6C6567616C20 (        forth.asm):04788                 fcn     'Illegal construct'     Error 9
     636F6E7374727563
     7400
FF63 417373657274696F (        forth.asm):04789                 fcn     'Assertion failed'      Error 10
     6E206661696C6564
     00
FF74 524F20776F726400 (        forth.asm):04790                 fcn     'RO word'               Error 11
FF7C 4D697373696E6720 (        forth.asm):04791                 fcn     'Missing delimiter'     Error 12
     64656C696D697465
     7200
FF8E 496C6C6567616C20 (        forth.asm):04792                 fcn     'Illegal argument'      Error 13
     617267756D656E74
     00
FF9F 4E6F206D61746368 (        forth.asm):04793                 fcn     'No matching CREATE'    Error 14
     696E672043524541
     544500
                      (        forth.asm):04794                 IFNE DEBUG
                      (        forth.asm):04795                 fcn     'No current buffer'     Error 15
                      (        forth.asm):04796                 ELSE
FFB2 00               (        forth.asm):04797                 fcn     ''                      Error 15
                      (        forth.asm):04798                 ENDC                            DEBUG
FFB3 576F7264206E616D (        forth.asm):04799                 fcn     'Word name too long'    Error 16
     6520746F6F206C6F
     6E6700
FFC6 494F206572726F72 (        forth.asm):04800                 fcn     'IO error'              Error 17
     00
FFCF 3E494E204F757420 (        forth.asm):04801                 fcn     '>IN Out of range'      Error 18
     6F662072616E6765
     00
                      (        forth.asm):04802         
                      (        forth.asm):04803         * A-list used for numeric literal base prefixes.
FFE0 24               (        forth.asm):04804         BASALST fcc     '$'             Hexadecimal prefix
FFE1 10               (        forth.asm):04805                 fcb     16
FFE2 26               (        forth.asm):04806                 fcc     '&'             Decimal prefix (as in LWASM, VolksForth)
FFE3 0A               (        forth.asm):04807                 fcb     10
FFE4 23               (        forth.asm):04808                 fcc     '#'             Decimal prefix
FFE5 0A               (        forth.asm):04809                 fcb     10
FFE6 25               (        forth.asm):04810                 fcc     '%'             Binary prefix
FFE7 02               (        forth.asm):04811                 fcb     2
FFE8 40               (        forth.asm):04812                 fcc     '@'             Octal prefix
FFE9 08               (        forth.asm):04813                 fcb     8
FFEA 00               (        forth.asm):04814                 fcb     0               End of list marker
                      (        forth.asm):04815         
                      (        forth.asm):04816         * Under no circumstance should the following symbol be negative!
     0005             (        forth.asm):04817         AVL     equ     VECTBL-*        Available EEPROM space left
                      (        forth.asm):04818         
                      (        forth.asm):04819         *******************************************************************************
                      (        forth.asm):04820         * Interrupt vector table
                      (        forth.asm):04821                 org     VECTBL
                      (        forth.asm):04822         
FFF0 E000             (        forth.asm):04823                 fdb     IODZHDL         Illegal opcode/Division by zero trap
FFF2 E036             (        forth.asm):04824                 fdb     SWI3HDL         SWI 3 interrupt vector address
FFF4 E036             (        forth.asm):04825                 fdb     SWI2HDL         SWI 2 interrupt vector address
FFF6 E252             (        forth.asm):04826                 fdb     FIRQHDL         FIRQ interrupt vector address
FFF8 E036             (        forth.asm):04827                 fdb     IRQHDL          IRQ interrupt vector address
FFFA E036             (        forth.asm):04828                 fdb     SWIHDL          SWI interrupt vector address
FFFC E1DA             (        forth.asm):04829                 fdb     NMIHDL          NMI vector address
FFFE E037             (        forth.asm):04830                 fdb     RSTHDL          RESET vector address
                      (        forth.asm):04831         

Symbol Table:
[ G] _BS                              E301
[ G] _INTERP                          E0BF
[ G] ABORT                            F119
[ G] ABS                              EFCF
[ G] AC8N1                            0014
[ G] ACCEPT                           F77D
[ G] ACDIV16                          0001
[ G] ACIACTL                          D800
[ G] ACIADAT                          D801
[ G] ACIISVC                          0080
[ G] ACIOVRN                          0020
[ G] ACIRDRF                          0001
[ G] ACIRSET                          0043
[ G] ACIRTS0                          0095
[ G] ACIRTS1                          00D5
[ G] ACITDRE                          0002
[ G] ACQMOVP                          E596
[ G] ACQVMRA                          E599
[ G] ACRDINT                          0080
[ G] ACRST                            0003
[ G] ACRTS0                           0000
[ G] ACRTS1                           0040
[ G] ADDS                             E1BA
[ G] ADIV16                           E18D
[ G] AGAIN                            F00C
[ G] AGAIN1                           F024
[ G] AHEAD                            EDFD
[ G] AHEAD1                           EE08
[ G] ALIGN                            EBAF
[ G] ALIGND                           E9FD
[ G] ALLOT                            FD11
[ G] ANCMPF                           0134
[ G] AND                              EEE2
[SG] ANSFEAT                          0001
[ G] APADBUF                          01E4
[ G] AVL                              0005
[ G] BALCHK                           E82B
[ G] BALERR                           E830
[ G] BALNCD                           0135
[ G] BASALST                          FFE0
[ G] BASBKUP                          0136
[ G] BASE                             FBBD
[ G] BASESET                          FBD7
[ G] BCSOPC                           2503
[ G] BDICEND                          010C
[ G] BDIRTY                           0004
[ G] BEGIN                            EFF8
[ G] BFDISP                           0410
[ G] BINUSE                           0001
[ G] BKCHAR                           F2BB
[ G] BKIN2PT                          E86A
[ G] BKQUOT                           F19A
[ G] BKSLSH                           F367
[ G] BL                               F6F6
[ G] BLANK                            FD49
[ G] BLK                              EB24
[ G] BLKSIZ                           0400
[ G] BLOCK                            EAD3
[ G] BLSTWAD                          010A
[ G] BMAPPD                           0002
[ G] BNEOPC                           2603
[ G] BOBLKNO                          0402
[ G] BOFLAGS                          0401
[ G] BOOTMSG                          FE25
[ G] BOTERM                           0400
[ G] BS                               0008
[ G] BSBFADR                          0120
[ G] BUF0                             04A0
[ G] BUF1                             08B0
[ G] BUFFER                           EA8B
[ G] BYE                              F2B2
[ G] CCOMMA                           FCEE
[ G] CCREGM                           E21D
[ G] CELLP                            EA13
[ G] CELLS                            FDA0
[ G] CF1BKRD                          E985
[ G] CF1BKWR                          E9A0
[ G] CF1BPRE                          E968
[ G] CF1SRD                           E934
[ G] CF1SWR                           E953
[ G] CFANTHS                          E8DF
[ G] CFBASE                           C000
[ G] CFBSYB                           0080
[ G] CFCARDP                          0147
[ G] CFCHIGR                          C005
[ G] CFCLOWR                          C004
[ G] CFCMDIS                          E8C4
[ G] CFCMMIR                          0148
[ G] CFCOMDR                          C007
[ G] CFDATAR                          C000
[ G] CFDRHDR                          C006
[ G] CFDRQB                           0008
[ G] CFDRSEL                          E8D6
[ G] CFDSCB                           0010
[ G] CFDWFB                           0020
[ G] CFERRB                           0001
[ G] CFERRCD                          0149
[ G] CFERRCK                          E8B7
[ G] CFERROR                          C001
[ G] CFETCH                           FDF9
[ G] CFFEATR                          C001
[ G] CFIDDEV                          00EC
[ G] CFINIT                           E8FD
[ G] CFLAG                            0001
[ G] CFR1SRA                          E952
[ G] CFRDY                            E8A1
[ G] CFRDYB                           0040
[ G] CFRSCTS                          0020
[ G] CFSCNTR                          C002
[ G] CFSCSZ                           0200
[ G] CFSETFT                          00EF
[ G] CFSNUMR                          C003
[ G] CFSTATR                          C007
[ G] CFWAIT                           E899
[ G] CFWSCTS                          0030
[ G] CHAR                             F2C9
[ G] CHARP                            F8AD
[ G] CHARS                            EA09
[ G] CHKNDPT                          E9BB
[ G] CKDPTRA                          E9C6
[ G] CKNBPFX                          E3B6
[ G] CMDBFSZ                          0084
[ G] CMDBUF                           0378
[ G] CMOVD1                           FD67
[ G] CMOVE                            FD75
[ G] CMOVED                           FD57
[ G] CMP2                             E582
[ G] CMP2RA                           E585
[ G] CMPCOMA                          F1DF
[ G] COMMA                            FD01
[ G] COMP                             E115
[ G] COMPC                            F1F0
[ G] COMPC1                           F1F6
[ G] COMPLRA                          E127
[ G] COMPR                            F221
[ G] CONS                             EC78
[ G] COUNT                            F768
[ G] CR                               000D
[ G] CREAT1                           EC21
[ G] CREATE                           EC00
[ G] CRLF                             F737
[ G] CRLFSTR                          FE7D
[ G] CSPOP                            E7E4
[ G] CSPUSH                           E7D6
[ G] CSSNTVE                          0000
[ G] CSTORE                           FDDC
[ G] CSVT100                          FE1D
[ G] CURTOKL                          0142
[ G] CVISSGN                          0141
[ G] CVNSTR                           E456
[ G] CVT                              F5BF
[ G] CVT0                             F5C5
[ G] CVT1                             F5CD
[ G] CVTB                             F681
[ G] CVTE                             F579
[ G] CVTFCN                           013E
[ G] DBDIVSG                          F61E
[ G] DDUMP                            FBFB
[ G] DEBUG                            0000
[ G] DECIMAL                          FBCA
[ G] DEFFLG                           0145
[ G] DEFFLM                           0040
[ G] DEPTH                            EBEB
[ G] DEV0                             C000
[ G] DEV1                             C400
[ G] DEV2                             C800
[ G] DEV3                             CC00
[ G] DEV4                             D000
[ G] DEV5                             D400
[ G] DEV6                             D800
[ G] DEV7                             DC00
[ G] DICEND                           0108
[ G] DIFF                             EE86
[ G] DIV                              F9CA
[ G] DIV1                             F9D2
[ G] DIVDBL                           0139
[ G] DIVFCN                           0138
[ G] DIVSYM                           013A
[ G] DLESS                            F44B
[ G] DMINUS                           F427
[ G] DNEG                             F405
[ G] DO                               ED49
[ G] DOES                             EC29
[ G] DOESEX                           EC37
[ G] DOEX                             ED60
[ G] DOT                              F689
[ G] DOTR                             F6B1
[ G] DOTR0                            F6BA
[ G] DOTTICK                          FBE5
[ G] DPLUS                            F3ED
[ G] DPOPRA                           E7F5
[ G] DPREGM                           E229
[ G] DPSHRA                           E7E3
[ G] DREGM                            E221
[ G] DROP                             FC69
[ G] DUP                              FC5B
[ G] DV0ERRM                          FEAE
[ G] DVFDIV                           0002
[ G] DVFMASK                          0007
[ G] DVFMOD                           0001
[ G] DVFSLMD                          0000
[ G] DVOA1D                           0008
[ G] DVOWSYM                          0010
[ G] DZEQ                             F43F
[ G] EBUFS                            E9DA
[ G] ELSE                             EE41
[ G] EMIT                             F86E
[ G] EMPTYB                           E9EA
[ G] EMXASXT                          E152
[ G] EQ                               EE6E
[ G] ERRHD1                           E74F
[ G] ERRHDLR                          E74C
[ G] ERRMTBL                          FEC2
[ G] ETX                              0003
[ G] EVAL                             F7ED
[ G] EXCT                             F29C
[ G] EXIT                             F02F
[ G] F83DIVF                          013C
[ G] FALSE                            F8C7
[ G] FDCTSYM                          E5A4
[ G] FDIVADJ                          FA3A
[ G] FETCH                            FE11
[ G] FFLAG                            0040
[ G] FILL                             FD23
[ G] FILL1                            FD2F
[ G] FIND                             F126
[ G] FINDSYM                          E616
[ G] FIRQHDL                          E252
[ G] FLUSH                            EA66
[ G] FMSLMOD                          F9AC
[ G] FNDPLD                           0110
[ G] FORTHIN                          E34B
[ G] FWDREF                           0116
[ G] GETCH                            E2AB
[ G] GETS                             E30D
[ G] HDMP2                            E1AB
[ G] HDMP4                            E192
[ G] HERE                             FDBD
[ G] HEX                              FBDA
[ G] HEX1D                            E179
[ G] HEXBFSZ                          0050
[ G] HEXBUF                           03FC
[ G] HOLD                             F5A6
[ G] HT                               0009
[ G] HVNMI                            0001
[ G] HVNMI2                           0000
[ G] ICHECK                           ECFA
[ G] IF                               EE1E
[ G] IFLAG                            0010
[ G] ILLOPC                           00C7
[ G] IMDFLG                           0144
[ G] IMDFLM                           0080
[ G] IMMED                            ECBB
[ G] IMMED1                           ECC9
[ G] INDI                             F0BF
[ G] INDIP                            F0E1
[ G] INDJ                             F0EA
[ G] INDJP                            F0F2
[ G] INDK                             F0FB
[ G] INF                              EF91
[ G] INIT                             E047
[ G] INTERP                           E0B2
[ G] INTISRA                          E0F2
[ G] INTRPRA                          E0FB
[ G] INVERT                           EEF5
[ G] IODZHDL                          E000
[ G] IOERR                            E94D
[ G] IOPERRM                          FE99
[ G] IOSTRT                           C000
[ G] IRQHDL                           E036
[ G] ISDBLF                           0140
[ G] ISEADDR                          0128
[ G] ISERCHD                          E36B
[ G] ISLEN                            0126
[ G] ISNEGF                           013F
[ G] JMPOPC                           007E
[ G] JSRLAST                          0114
[ G] JSROPC                           00BD
[ G] KEY                              F85D
[ G] KEYP                             F84B
[ G] LAST                             FDB1
[ G] LBRACK                           F174
[ G] LDXOPC                           008E
[ G] LEAVE                            F0A1
[ G] LF                               000A
[ G] LIST                             EB71
[ G] LITER                            E566
[ G] LITERAL                          EC55
[ G] LOAD                             F7C6
[ G] LOAD1                            F7D3
[ G] LOAD2                            F7E1
[ G] LOCWRT                           E50B
[ G] LOOP                             ED69
[ G] LOOP1                            ED73
[ G] LOOPEX                           EDB0
[ G] LPAR                             F331
[ G] LSTWAD                           0106
[ G] LWMNRA                           E522
[ G] MARKER                           F268
[ G] MAX                              EF9F
[ G] MILLIS                           F835
[ G] MILLIS1                          F83F
[ G] MIN                              EFB7
[ G] MIN1PST                          E9C6
[ G] MIN2PST                          E9CB
[ G] MIN3PST                          E9D0
[ G] MIN4PST                          E9D5
[ G] MINTLRA                          E0BD
[ G] MINUS                            F8B7
[ G] MOD                              F995
[ G] MONITOR                          ECEF
[ G] MOVE                             FD84
[ G] MROT                             FCE3
[ G] MRUBUFA                          011E
[ G] MSLCNT                           031A
[ G] MSTAR                            F923
[ G] MULFCN                           013B
[ G] MULT                             F908
[ G] MULT1                            F90E
[ G] NAK                              0015
[ G] NCLR                             EBD1
[ G] NDCTWKS                          E63C
[ G] NEGATE                           EFE5
[ G] NIP                              FC51
[ G] NMCVCRA                          E139
[ G] NMCVIRA                          E0D0
[ G] NMI2DM                           E1C5
[ G] NMI4DM                           E1CB
[ G] NMIDML                           E1D1
[ G] NMIHDL                           E1DA
[ G] NONAME                           F211
[ G] NOT                              EF5D
[ G] NPOP                             E7E4
[ G] NPUSH                            E7D6
[ G] NSTBOT                           02F8
[ G] NSTKSZ                           00C0
[ G] NSTTOP                           0238
[ G] NUL                              0000
[ G] NULP                             EF3C
[ G] NUMCVRA                          E44E
[ G] NUMCVT                           E3DC
[ G] NXTCHAR                          E3AF
[ G] OKFEEDB                          FE93
[ G] ONEM                             F88F
[ G] ONEP                             F89E
[ G] OR                               EED0
[ G] OVER                             FCAF
[ G] PAD                              F73F
[ G] PADBSZ                           0054
[ G] PADBUF                           0190
[ G] PAGE                             F72A
[ G] PAYLOAD                          FAD9
[ G] PCREGM                           E23A
[ G] PICK                             FC86
[ G] PICK1                            FC90
[ G] PLOAD                            010E
[ G] PLOOP                            EDB5
[ G] PLOOPEX                          EDC2
[ G] PLOPEX1                          EDC5
[ G] PLUS                             F87F
[ G] PLUSST                           FDC9
[ G] POSTPON                          F1A5
[ G] pragma                           0000
[ G] PRBLKIN                          E71F
[ G] PREAPAD                          F60B
[ G] PSTR                             F384
[ G] PTOP0                            F691
[ G] PUTCH                            E2D7
[ G] PUTCR                            E2F7
[ G] PUTS                             E2EA
[ G] QDO                              ED04
[ G] QDO1                             ED28
[ G] QDOEX                            ED2F
[ G] QMARK                            FE07
[ G] QRYDUP                           FC35
[ G] QUIT                             F103
[ G] RAKEVAR                          0118
[ G] RAMCHK                           E057
[ G] RAMFAIL                          E069
[ G] RAMFM                            FE80
[SG] RAMFTCH                          0CC4
[ G] RAMOK                            E07B
[ G] RAMOKM                           FE70
[ G] RAMSIZE                          8000
[ G] RAMSTRT                          0000
[ G] RBRACK                           F16B
[ G] RBRACK1                          F171
[ G] RCLR                             EBDC
[ G] RDEPTH                           0137
[ G] READLN                           E166
[ G] REALEND                          FE1D
[ G] RECADDR                          0112
[ G] RECURSE                          F259
[ G] REFILL                           EB01
[SG] RELFEAT                          0000
[SG] RELFEAT                          0001
[ G] REPEAT                           F07D
[ G] RFETCH                           F0DA
[ G] RFROM                            F08B
[ G] ROLL                             FCBB
[ G] ROLL1                            FCC5
[ G] ROMSTRT                          E000
[ G] ROT                              FCD8
[ G] RPICKN                           F0C4
[ G] RPOP                             E812
[ G] RPOPRA                           E82B
[ G] RPSHRA                           E811
[ G] RPUSH                            E7F6
[ G] RSBSPFX                          E44F
[ G] RSP                              0100
[ G] RSTBOT                           0378
[ G] RSTHDL                           E037
[ G] RSTINP                           E850
[ G] RSTKSZ                           0080
[ G] RSTRCT                           ECD3
[ G] RSTTOP                           02F8
[ G] RTADV32                          0020
[ G] RTADVRS                          0070
[ G] RTARS64                          000A
[ G] RTAS                             D400
[ G] RTAUIP                           0080
[ G] RTB24                            0002
[ G] RTBDM                            0004
[ G] RTBPIE                           0040
[ G] RTBSET                           0080
[ G] RTCAVL                           0146
[ G] RTCFEAT                          0000
[ G] RTCFTCH                          EB58
[ G] RTCPF                            0040
[ G] RTCSTOR                          EB67
[ G] RTDS                             D401
[ G] RTODOM                           0007
[ G] RTODOW                           0006
[ G] RTOHOUR                          0004
[ G] RTOHRA                           0005
[ G] RTOMIN                           0002
[ G] RTOMINA                          0003
[ G] RTOMON                           0008
[ G] RTOPRES                          003F
[ G] RTOREGA                          000A
[ G] RTOREGB                          000B
[ G] RTOREGC                          000C
[ G] RTOREGD                          000D
[ G] RTOSEC                           0000
[ G] RTOSECA                          0001
[ G] RTOUMB                           000E
[ G] RTOYEAR                          0009
[ G] RTSOPC                           0039
[ G] RTUMSZ                           0032
[ G] SAVBUF                           EA25
[ G] SAVINP                           E835
[ G] SCNETOK                          E397
[ G] SCNSTOK                          E384
[ G] SCR                              EB3C
[ G] SERBCNT                          014E
[ G] SERBDEQ                          014D
[ G] SERBENQ                          014C
[ G] SERBSZ                           0040
[ G] SERBUF                           0150
[ G] SHARPS                           F5B4
[ G] SHIFT                            F8E1
[ G] SIGN                             F591
[ G] SINFEQ                           EE9F
[ G] SLEN                             E243
[ G] SLMOD                            F9A1
[ G] SMSLREM                          F9BB
[ G] SOURCE                           F354
[ G] SOURID                           F340
[ G] SP                               0020
[ G] SPACE                            F701
[ G] SPACES                           F70E
[ G] SQUOTE                           F398
[ G] SQUOTFN                          014B
[ G] SRCID                            014A
[ G] SREGM                            E23F
[ G] SSDFEAT                          0001
[ G] STATE                            FBAF
[ G] STOD                             EBB8
[ G] STORE                            FDEB
[ G] STRSL1                           FA50
[ G] STRSLMD                          FA7B
[ G] STRSLSH                          FA47
[ G] STSLFCN                          013D
[ G] SUP                              EF83
[ G] SVCTOKL                          0143
[ G] SWAP                             FC73
[ G] SWDIC                            E49D
[ G] SWDIC1                           E4A2
[ G] SWI2HDL                          E036
[ G] SWI3HDL                          E036
[ G] SWIHDL                           E036
[ G] SYSSTAT                          FACF
[ G] SYSSTK                           FAC6
[ G] TBUFF                            044C
[ G] TBUFSZ                           0048
[ G] TERPRET                          F795
[ G] THEEND                           FE11
[ G] THEN                             EE4F
[ G] THRU                             F814
[ G] TICK                             F17B
[ G] TICKS                            EB48
[ G] TIKSHI                           0130
[ G] TIKSLOW                          0132
[ G] TOIN                             EB30
[ G] TOKENEP                          0104
[ G] TOKENSP                          0102
[ G] TONUMBR                          F4EE
[ G] TOR                              F096
[ G] TRUE                             F8D4
[ G] TUCK                             FC46
[ G] TWODIV                           F986
[ G] TWODROP                          F4A5
[ G] TWODUP                           F4B3
[ G] TWOFTCH                          F4DB
[ G] TWOOVER                          F471
[ G] TWOSTOR                          F4CA
[ G] TWOSWAP                          F489
[ G] TWOTIM                           F977
[ G] TYPE                             F74B
[ G] U2INFRD                          E161
[ G] UBASE                            0122
[ G] UBLK                             012C
[ G] UDOT                             F6A8
[ G] UDOTR                            F6EC
[ G] UINF                             EF74
[ G] UMSLMOD                          FA87
[ G] UMSTAR                           F92E
[ G] UNLESS                           EE30
[ G] UNLOOP                           EDEE
[ G] UNMON                            ECE2
[ G] UNTIL                            F050
[ G] UPDATE                           EA73
[ G] UREGM                            E236
[ G] USCR                             012E
[ G] USTATE                           0124
[ G] USUP                             EF65
[ G] UTOIN                            012A
[ G] VARCON                           E578
[ G] VARCON1                          E57A
[ G] VARCON2                          E57D
[ G] VARI                             EC97
[ G] VARSPC                           0100
[ G] VECTBL                           FFF0
[ G] VLPRVEP                          011A
[ G] VLPRVHD                          011C
[ G] WBIFDRT                          EA3C
[ G] WDICSPC                          0CC0
[ G] WHILE                            F06F
[ G] WIEN2IN                          E100
[ G] WORD                             F2EF
[ G] WORD1                            F2F8
[ G] WORDS                            FAE8
[ G] WREGM                            E225
[ G] WRLNMSK                          001F
[ G] WTOOLNG                          E53A
[ G] XMITOK                           014F
[ G] XOFF                             0013
[ G] XON                              0011
[ G] XOR                              EEBA
[ G] XOR1                             EECB
[ G] XREGM                            E22E
[ G] YREGM                            E232
[ G] ZFLAG                            0004
[ G] ZGREAT                           EF0A
[ G] ZLESS                            EF23
[ G] ZNEQ                             EF53
