                      (        forth.asm):00001         * 6309 Forth based on my 1984/07/16 TRS-80 Model 1 level II ROM implementation.
                      (        forth.asm):00002         *
                      (        forth.asm):00003         * This work is dedicated to Alain Pinaud, author of "Programmer en Forth"
                      (        forth.asm):00004         * published by Editions du P.S.I. in 1983--i.e. my virtual mentor in the field.
                      (        forth.asm):00005         * Special thanks go William Astle for his fantastic LW Tools utility set and
                      (        forth.asm):00006         * to Robert Lipe for his advice on serial line handling. Apache subversion
                      (        forth.asm):00007         * and the sdiff utility also were on my side all the time.
                      (        forth.asm):00008         *
                      (        forth.asm):00009         * Also credited for their help: Justin Poirier (seminal HW design), Daniel
                      (        forth.asm):00010         * Tufvesson (original CompactFlash interface), Peter Minuth (general Forth
                      (        forth.asm):00011         * guruness), Paul E. Bennett (ANSI compatibility advice); Michel Jean, Bill
                      (        forth.asm):00012         * Ragsdale, Pablo Hugo Reda, Matthias Koch, Demitri Peynado and Bernd Paysan
                      (        forth.asm):00013         * for contributed application level code; Carsten Strotmann for most of the
                      (        forth.asm):00014         * benchmarking code (see https://theultimatebenchmark.org/); Gerry Jackson and
                      (        forth.asm):00015         * Steve R. Palmer (see https://github.com/gerryjackson/forth2012-test-suite)
                      (        forth.asm):00016         * for selected bits and pieces of the Forth2012 test suite
                      (        forth.asm):00017         * (see https://forth-standard.org/).
                      (        forth.asm):00018         *
                      (        forth.asm):00019         * This is a native Forth. Not a threaded interpretive implementation.
                      (        forth.asm):00020         * Worth noticing is the fact that the return stack does not hold return
                      (        forth.asm):00021         * addresses at all. All what is stored there is loop indexes and input stream
                      (        forth.asm):00022         * parameters. Actual return addresses are kept in the system stack. All in all,
                      (        forth.asm):00023         * this is the result of the work of a 19 year old, heavily revisited 35 years
                      (        forth.asm):00024         * later. The downside of this implementation is that the generated code is
                      (        forth.asm):00025         * about 30% larger than a threaded interpretive implementation would be.
                      (        forth.asm):00026         * So it goes...
                      (        forth.asm):00027         *
                      (        forth.asm):00028         * Control flow constructs have been re-implemented based on Wonyong Koh's
                      (        forth.asm):00029         * hForth for the 8086. The original code can be consulted at
                      (        forth.asm):00030         * https://github.com/nealcrook/hForth. Of particular interest is
                      (        forth.asm):00031         * 8086/HF86RAM.ASM. Entries on the control flow stack (implemented on the
                      (        forth.asm):00032         * data stack here) are two cell entities that consist of a parameter
                      (        forth.asm):00033         * (an address), on the top of which a tag identifying the type of address
                      (        forth.asm):00034         * is pushed. They are:
                      (        forth.asm):00035         *
                      (        forth.asm):00036         * Control-flow stack item    Representation (parameter and type)
                      (        forth.asm):00037         * -----------------------    -------------------------------------
                      (        forth.asm):00038         * dest                       control-flow destination      0
                      (        forth.asm):00039         * orig                       control-flow origin           1
                      (        forth.asm):00040         * of-sys                     OF origin                     2
                      (        forth.asm):00041         * case-sys                   x (any value)                 3
                      (        forth.asm):00042         * do-sys                     ?DO origin                    DO destination
                      (        forth.asm):00043         * colon-sys                  xt of current definition     -1 [1]
                      (        forth.asm):00044         *
                      (        forth.asm):00045         * [1] Not implemented in Z79Forth/A.
                      (        forth.asm):00046         * 
                      (        forth.asm):00047         * This mechanism allows for verification of balanced control flow constructs.
                      (        forth.asm):00048         *
                      (        forth.asm):00049         * The code generated is limited to a very small instruction set:
                      (        forth.asm):00050         *
                      (        forth.asm):00051         * LDXOPC        $8E     LDX (immediate)
                      (        forth.asm):00052         * JMPOPC        $7E     JMP (extended)
                      (        forth.asm):00053         * JSROPC        $BD     JSR (extended)
                      (        forth.asm):00054         * RTSOPC        $39     RTS (inherent)
                      (        forth.asm):00055         * BCSOPC        $2503   BCS *+5 (relative) Used in LOOP, +LOOP
                      (        forth.asm):00056         * BNEOPC        $2603   BNE *+5 (relative) Used in ?DO, IF, UNTIL
                      (        forth.asm):00057         *
                      (        forth.asm):00058         * On error, the system stack pointer is reset. The return stack also is
                      (        forth.asm):00059         * but the data stack will be in the same state as when the error occurred.
                      (        forth.asm):00060         * ABORT and QUIT enforce their own ANS94 standard behaviour.
                      (        forth.asm):00061         *
                      (        forth.asm):00062         * RESTRICT is non-standard. It comes from GNU Forth (VolksForth). The " OK"
                      (        forth.asm):00063         * non-prompt string also does, by the way. Thanks to Anton Ertl for his terse
                      (        forth.asm):00064         * yet valuable input.
                      (        forth.asm):00065         *
                      (        forth.asm):00066         * .' (dot-tick) is non-standard. It comes from SwiftForth. It will be supported
                      (        forth.asm):00067         * whether or not the symbolic stack dump has been configured (see SSDFEAT in
                      (        forth.asm):00068         * constants.asm). However, please note that effective symbolic references will
                      (        forth.asm):00069         * be resolved only if the feature was enabled at compilation time. Otherwise
                      (        forth.asm):00070         * a simple HEX print of the cell at the top of the data stack will be
                      (        forth.asm):00071         * performed. This is meant to support Forth source code that does not depend
                      (        forth.asm):00072         * on the feature vector (see examples/dis.4th).
                      (        forth.asm):00073         *
                      (        forth.asm):00074         * MONITOR and ICHECK are also non-standard. They are intended to maintain and
                      (        forth.asm):00075         * verify the integrity of a checksum of the code section of RAM resident
                      (        forth.asm):00076         * words, with the exception of VARIABLEs and CREATEd words. CREATEd words,
                      (        forth.asm):00077         * if subject to the MONITOR treatment will also carry a code section
                      (        forth.asm):00078         * checksum, although this is not the default behaviour. The checksum will
                      (        forth.asm):00079         * consist in an extra byte added to every word's header. MONITOR and ICHECK
                      (        forth.asm):00080         * will be available whether or not the reliability feature has been configured
                      (        forth.asm):00081         * (see RELFEAT in constants.asm). They will only carry effective semantics
                      (        forth.asm):00082         * if the feature was actually enabled at compilation time. This is meant to
                      (        forth.asm):00083         * support Forth source code that does not depend on the feature vector.
                      (        forth.asm):00084         *
                      (        forth.asm):00085         * Experimental MC146818 RTC support: the feature is disabled by default
                      (        forth.asm):00086         * (see RTCFEAT in constants.asm) because it relies on undocumented schematics.
                      (        forth.asm):00087         * Also, the required underlying circuitry is not intended to ever become an
                      (        forth.asm):00088         * integral part of the Z79Forth reference board itself. Some better designed
                      (        forth.asm):00089         * form of it might eventually surface in the form of an extension specification.
                      (        forth.asm):00090         * At the time of this writing this is just a proof of concept, but whether or
                      (        forth.asm):00091         * not the feature is enabled, three extra words will be added to the dictionary.
                      (        forth.asm):00092         * They are RTC@ RTC! and TICKS They can be safely ignored.
                      (        forth.asm):00093         *
                      (        forth.asm):00094         * Forth source code portability note:
                      (        forth.asm):00095         * Because Z79Forth does not use the return stack to store return addresses,
                      (        forth.asm):00096         * it makes it quite easy to write code that is not readily portable to classic
                      (        forth.asm):00097         * threaded interpretive implementations. The resulting code will be simpler but
                      (        forth.asm):00098         * portability will be limited.
                      (        forth.asm):00099         *
                      (        forth.asm):00100         * Miscellaneous notes: RA stands for return address; EP for entry point.
                      (        forth.asm):00101         * CF is a shortcut for CompactFlash. TOS means top of the data/normal stack.
                      (        forth.asm):00102         * Occasionally, CFA is used for code field address which, in this
                      (        forth.asm):00103         * implementation, is a synonym for compilation address. XT means execution
                      (        forth.asm):00104         * token--the ANSI term for a compilation address. MSC stands for most
                      (        forth.asm):00105         * significant cell; LSC for least significant cell.
                      (        forth.asm):00106         *
                      (        forth.asm):00107         * The complete guide to the HD6309 extended instruction set can be found at:
                      (        forth.asm):00108         * https://cyberabi.ipower.com/Downloads/The_6309_Book.pdf. For convenience,
                      (        forth.asm):00109         * and with the author's explicit agreement, this document has been included
                      (        forth.asm):00110         * in this distribution. This is recommended reading for anyone altering this
                      (        forth.asm):00111         * code or trying to make some sense of it!!!
                      (        forth.asm):00112         *
                      (        forth.asm):00113         * This whole effort started out as a porting endeavour and ended up being a
                      (        forth.asm):00114         * substantial rewrite, trying to take advantage of the features of the 6309
                      (        forth.asm):00115         * as much as possible. The primary goals of this implementation are:
                      (        forth.asm):00116         * reliability, performance and code compactness. A number of bugs in the
                      (        forth.asm):00117         * original code have been fixed--some remain for sure!
                      (        forth.asm):00118         *
                      (        forth.asm):00119         * Obligatory literary reference:
                      (        forth.asm):00120         * "The paper is very heavy going, and I should never have read it, had I not
                      (        forth.asm):00121         * written it myself." John E. Littlewood (1885-1977).
                      (        forth.asm):00122         *
                      (        forth.asm):00123         * The original soundtrack for this work is available at:
                      (        forth.asm):00124         * https://youtu.be/YqXZtGyFyDo?t=4023 (J.S. Bach BWV 1080, contrapunctus 14).
                      (        forth.asm):00125         
0000                  (        forth.asm):00126         pragma  opt cd,operandsizewarning
                      (        forth.asm):00127         
                      (        forth.asm):00128                 include constants.asm
                      (    constants.asm):00001         * Begin tunable parameters section.
                      (    constants.asm):00002         
     0000             (    constants.asm):00003         CSSNTVE equ     0               Words and HEX numbers are case sensitive if NZ
     0001             (    constants.asm):00004         SSDFEAT equ     1               Set to 1 to enable the symbolic stack dump feat.
     0001             (    constants.asm):00005         RELFEAT set     1               Set to 1 to enable the reliability feature
                      (    constants.asm):00006         
     0000             (    constants.asm):00007         RTCFEAT equ     0               Cool but the reliability feature must go...
     0000             (    constants.asm):00008         DEBUG   set     0               Enforce assertions and miscellaneous checks
     0001             (    constants.asm):00009         HVNMI   equ     1               NMI handler support
     0000             (    constants.asm):00010         HVNMI2  equ     0               NMI handler support (async input debugging)
                      (    constants.asm):00011         * Loop count for MS. This is busy waiting, so we depend on the CPU clock speed.
     031A             (    constants.asm):00012         MSLCNT  equ     794             at 4 MHz native mode
                      (    constants.asm):00013         *MSLCNT equ     994             at 5 MHz native mode
                      (    constants.asm):00014         
                      (    constants.asm):00015         * End tunable parameters section.
                      (    constants.asm):00016         
                      (    constants.asm):00017                 IFNE    RTCFEAT
0000                  (    constants.asm):00018         RELFEAT set     0               RTCFEAT disables RELFEAT
                      (    constants.asm):00019                 ELSE
                      (    constants.asm):00020                 IFNE    HVNMI
                      (    constants.asm):00021                 IFNE    HVNMI2
0000                  (    constants.asm):00022         RELFEAT set     0               (HVNMI and HVNMI2) disable RELFEAT
                      (    constants.asm):00023                 ENDC                    HVNMI2
                      (    constants.asm):00024                 ENDC                    HVNMI
                      (    constants.asm):00025                 ENDC                    RTCFEAT
                      (    constants.asm):00026         
                      (    constants.asm):00027         * Intrinsic ANS94 support prevents both DEBUG and the reliability feature.
     0000             (    constants.asm):00028         RELFEAT set     0
     0000             (    constants.asm):00029         DEBUG   set     0
                      (    constants.asm):00030         
                      (    constants.asm):00031         * Control flow stack implemented on the top of the data stack.
     E7DB             (    constants.asm):00032         CSPUSH  EQU     NPUSH
     E7E9             (    constants.asm):00033         CSPOP   EQU     NPOP
                      (    constants.asm):00034         
                      (    constants.asm):00035         * Memory map.
     0000             (    constants.asm):00036         RAMSTRT equ     $0000
     8000             (    constants.asm):00037         RAMSIZE equ     $8000
     C000             (    constants.asm):00038         IOSTRT  equ     $C000
     E000             (    constants.asm):00039         ROMSTRT equ     $E000
     FFF0             (    constants.asm):00040         VECTBL  equ     $FFF0
                      (    constants.asm):00041         
                      (    constants.asm):00042         * Base address for global variables (direct page addressed).
     0100             (    constants.asm):00043         VARSPC  equ     $100
                      (    constants.asm):00044         
                      (    constants.asm):00045         * The 74HCT138 (U7) IO address decoder maps one 1 KB area per usable device.
     C000             (    constants.asm):00046         DEV0    equ     $C000           Compact Flash memory module (optional)
     C400             (    constants.asm):00047         DEV1    equ     $C400
     C800             (    constants.asm):00048         DEV2    equ     $C800
     CC00             (    constants.asm):00049         DEV3    equ     $CC00
     D000             (    constants.asm):00050         DEV4    equ     $D000
     D400             (    constants.asm):00051         DEV5    equ     $D400           MC146818 RTC (optional)
     D800             (    constants.asm):00052         DEV6    equ     $D800           HD63B50 unit 0
     DC00             (    constants.asm):00053         DEV7    equ     $DC00
                      (    constants.asm):00054         
     D800             (    constants.asm):00055         ACIACTL equ     DEV6
     D801             (    constants.asm):00056         ACIADAT equ     DEV6+1
                      (    constants.asm):00057         
                      (    constants.asm):00058         * ACIA control register bits.
     0003             (    constants.asm):00059         ACRST   equ     %00000011       ACIA master reset
                      (    constants.asm):00060         
                      (    constants.asm):00061         * 1.84320 MHz Y1: 115200 bps in the direct path, 38400 bps in the DIV3 path
     0001             (    constants.asm):00062         ACDIV16 equ     %00000001       ACIA div 16
                      (    constants.asm):00063         
     0014             (    constants.asm):00064         AC8N1   equ     %00010100       ACIA 8N1
     0000             (    constants.asm):00065         ACRTS0  equ     %00000000       ACIA RTS# low
     0040             (    constants.asm):00066         ACRTS1  equ     %01000000       ACIA RTS# high
     0080             (    constants.asm):00067         ACRDINT equ     %10000000       IRQ on RDRF
                      (    constants.asm):00068         
     0043             (    constants.asm):00069         ACIRSET equ     ACRTS1|ACRST
     00D5             (    constants.asm):00070         ACIRTS1 equ     ACRTS1|ACRDINT|AC8N1|ACDIV16
     0095             (    constants.asm):00071         ACIRTS0 equ     ACRTS0|ACRDINT|AC8N1|ACDIV16
                      (    constants.asm):00072         
                      (    constants.asm):00073         * ACIA status register bits.
     0001             (    constants.asm):00074         ACIRDRF equ     %00000001       Receive data register full
     0002             (    constants.asm):00075         ACITDRE equ     %00000010       Transmit data register empty
     0020             (    constants.asm):00076         ACIOVRN equ     %00100000       Overrun status register bit
     0080             (    constants.asm):00077         ACIISVC equ     %10000000       Interrupt needs servicing
                      (    constants.asm):00078         
                      (    constants.asm):00079         * Compact Flash parameters.
     C000             (    constants.asm):00080         CFBASE  equ     DEV0
     C000             (    constants.asm):00081         CFDATAR equ     CFBASE          R/W data register
     C001             (    constants.asm):00082         CFERROR equ     CFBASE+1        RO error register
     C001             (    constants.asm):00083         CFFEATR equ     CFBASE+1        WO features register
     C002             (    constants.asm):00084         CFSCNTR equ     CFBASE+2        R/W sector count register
     C003             (    constants.asm):00085         CFSNUMR equ     CFBASE+3        R/W sector number register
     C004             (    constants.asm):00086         CFCLOWR equ     CFBASE+4        R/W cylinder low register
     C005             (    constants.asm):00087         CFCHIGR equ     CFBASE+5        R/W cylinder high register
     C006             (    constants.asm):00088         CFDRHDR equ     CFBASE+6        R/W drive/head register
     C007             (    constants.asm):00089         CFSTATR equ     CFBASE+7        RO status register
     C007             (    constants.asm):00090         CFCOMDR equ     CFBASE+7        WO command register
                      (    constants.asm):00091         
                      (    constants.asm):00092         * CF status bits.
     0080             (    constants.asm):00093         CFBSYB  equ     %10000000       BSY status bit
     0040             (    constants.asm):00094         CFRDYB  equ     %01000000       RDY status bit
     0020             (    constants.asm):00095         CFDWFB  equ     %00100000       DWF status bit (not used)
     0010             (    constants.asm):00096         CFDSCB  equ     %00010000       DSC status bit (not used)
     0008             (    constants.asm):00097         CFDRQB  equ     %00001000       DRQ status bit
     0001             (    constants.asm):00098         CFERRB  equ     %00000001       ERR status bit
                      (    constants.asm):00099         
     0200             (    constants.asm):00100         CFSCSZ  equ     $200            Compact Flash (IDE) sector size
                      (    constants.asm):00101         
                      (    constants.asm):00102         * CF commands.
     00EC             (    constants.asm):00103         CFIDDEV equ     $EC             Identify Device
     00EF             (    constants.asm):00104         CFSETFT equ     $EF             Set Feature
     0020             (    constants.asm):00105         CFRSCTS equ     $20             Read Sectors
     0030             (    constants.asm):00106         CFWSCTS equ     $30             Write Sectors
                      (    constants.asm):00107         
                      (    constants.asm):00108         * Buffer in-memory structure:
                      (    constants.asm):00109         * data: 1024 bytes.
                      (    constants.asm):00110         * terminator: 1 byte set to 0.
                      (    constants.asm):00111         * flags: 1 byte.
                      (    constants.asm):00112         * blknum: 2 bytes.
     0001             (    constants.asm):00113         BINUSE  equ     1               Buffer is allocated (the blknum field is valid)
     0002             (    constants.asm):00114         BMAPPD  equ     2               Block has been read from the CF device
     0004             (    constants.asm):00115         BDIRTY  equ     4               Block has been marked for update
     0400             (    constants.asm):00116         BLKSIZ  equ     2*CFSCSZ        Block size is 2 CF sectors (1 KB)
                      (    constants.asm):00117         * Buffer field offsets.
     0400             (    constants.asm):00118         BOTERM  equ     BLKSIZ          Base buffer to the 'terminator' field offset
     0401             (    constants.asm):00119         BOFLAGS equ     BLKSIZ+1        Base buffer to the 'flag' field offset
     0402             (    constants.asm):00120         BOBLKNO equ     BLKSIZ+2        Base buffer to the 'blknum' field offset
                      (    constants.asm):00121         
     0410             (    constants.asm):00122         BFDISP  equ     BUF1-BUF0       Offset between resident buffers
                      (    constants.asm):00123         
                      (    constants.asm):00124         * MC146818 RTC registers.
     D400             (    constants.asm):00125         RTAS    equ     DEV5            Latch target register address offset
     D401             (    constants.asm):00126         RTDS    equ     (DEV5+1)        Actual target register access
                      (    constants.asm):00127         * RTC internal register offsets.
     0000             (    constants.asm):00128         RTOSEC  equ     0               Seconds
     0001             (    constants.asm):00129         RTOSECA equ     1               Seconds alarm
     0002             (    constants.asm):00130         RTOMIN  equ     2               Minutes
     0003             (    constants.asm):00131         RTOMINA equ     3               Minutes alarm
     0004             (    constants.asm):00132         RTOHOUR equ     4               Hours
     0005             (    constants.asm):00133         RTOHRA  equ     5               Hours alarm
     0006             (    constants.asm):00134         RTODOW  equ     6               Day of week
     0007             (    constants.asm):00135         RTODOM  equ     7               Day of month
     0008             (    constants.asm):00136         RTOMON  equ     8               Month
     0009             (    constants.asm):00137         RTOYEAR equ     9               Year
     000A             (    constants.asm):00138         RTOREGA equ     10              Register A
     000B             (    constants.asm):00139         RTOREGB equ     11              Register B
     000C             (    constants.asm):00140         RTOREGC equ     12              Register C
     000D             (    constants.asm):00141         RTOREGD equ     13              Register D
     000E             (    constants.asm):00142         RTOUMB  equ     14              Base of user defined NVRAM storage
     0032             (    constants.asm):00143         RTUMSZ  equ     50              Size of user defined NVRAM storage
     003F             (    constants.asm):00144         RTOPRES equ     (RTOUMB+RTUMSZ-1) RTC NVRAM offset for dectecting dev presence
                      (    constants.asm):00145         
                      (    constants.asm):00146         * Register A bits.
     0080             (    constants.asm):00147         RTAUIP  equ     $80             Update in progress
     0070             (    constants.asm):00148         RTADVRS equ     $70             Divider reset, not in operation
     0020             (    constants.asm):00149         RTADV32 equ     $20             In operation, 32 KHz time base
     000A             (    constants.asm):00150         RTARS64 equ     $A              32 KHz time base, 64 Hz PI (every 15.625 ms)
                      (    constants.asm):00151         
                      (    constants.asm):00152         * Register B bits.
     0080             (    constants.asm):00153         RTBSET  equ     $80
     0040             (    constants.asm):00154         RTBPIE  equ     $40
     0004             (    constants.asm):00155         RTBDM   equ     4               Set to 1 for binary register contents
     0002             (    constants.asm):00156         RTB24   equ     2               Set to 1 for 24 hour format
                      (    constants.asm):00157         
                      (    constants.asm):00158         * Register C bits.
     0040             (    constants.asm):00159         RTCPF   equ     $40             Periodic interrupt pending flag
                      (    constants.asm):00160         
                      (    constants.asm):00161         * ASCII trivia.
     0000             (    constants.asm):00162         NUL     equ     0               End of string marker
     0003             (    constants.asm):00163         ETX     equ     3               Control-C (intr)
     0008             (    constants.asm):00164         BS      equ     8               Backspace
     0009             (    constants.asm):00165         HT      equ     9               Horizontal tab
     000A             (    constants.asm):00166         LF      equ     $0A             Aka new line
     000D             (    constants.asm):00167         CR      equ     $0D             Carriage return
     0015             (    constants.asm):00168         NAK     equ     $15             Control-U (kill)
     0020             (    constants.asm):00169         SP      equ     $20             Aka BL in Forth
     0013             (    constants.asm):00170         XOFF    equ     $13             Aka DC3
     0011             (    constants.asm):00171         XON     equ     $11             Aka DC1
                      (    constants.asm):00172         
                      (    constants.asm):00173         * Stack sizes.
     0100             (    constants.asm):00174         NSTKSZ  equ     256             Expressed in bytes. Now only limited by RAM size
     00FE             (    constants.asm):00175         RSTKSZ  equ     254             Expressed in bytes. Up to 127 nested loops
                      (    constants.asm):00176         
                      (    constants.asm):00177         * Buffer sizes.
     0084             (    constants.asm):00178         CMDBFSZ equ     132             Command line entry buffer
     0050             (    constants.asm):00179         HEXBFSZ equ     80
     0048             (    constants.asm):00180         TBUFSZ  equ     72              Used by VLIST to print word name and CVNSTR
     0054             (    constants.asm):00181         PADBSZ  equ     84              79-STANDARD mandates a minimum of 64 bytes
     0040             (    constants.asm):00182         SERBSZ  equ     64              Serial buffer size. Needs to be a power of 2
                      (    constants.asm):00183         
                      (    constants.asm):00184         * Dictionary flag masks.
     0080             (    constants.asm):00185         IMDFLM  equ     $80             Immediate flag mask
     0040             (    constants.asm):00186         DEFFLM  equ     $40             Compilation only flag mask
                      (    constants.asm):00187                 IFNE    RELFEAT
0000                  (    constants.asm):00188         MONFLM  equ     $20             Monitored flag mask. This indicates that the
                      (    constants.asm):00189         *                               word to which it relates might be checked for
                      (    constants.asm):00190         *                               integrity. This applies by default to all words
                      (    constants.asm):00191         *                               defined with : and all constants. It might
                      (    constants.asm):00192         *                               also apply to any other CREATEd object by
                      (    constants.asm):00193         *                               resorting to the MONITOR word. Using MONITOR
                      (    constants.asm):00194         *                               on variable word contents is guaranteed to
                      (    constants.asm):00195         *                               raise ICHECK's attention.
                      (    constants.asm):00196                 ENDC
                      (    constants.asm):00197         
                      (    constants.asm):00198         * Division function codes and options.
     0000             (    constants.asm):00199         DVFSLMD equ     0               Function is /MOD
     0001             (    constants.asm):00200         DVFMOD  equ     1               Function is MOD
     0002             (    constants.asm):00201         DVFDIV  equ     2               Function is /
     0008             (    constants.asm):00202         DVOA1D  equ     8               Argument 1 is a double (FM/MOD SM/REM)
     0010             (    constants.asm):00203         DVOWSYM equ     16              Want symmetric division (default is floored)
     0007             (    constants.asm):00204         DVFMASK equ     7               Mask for extracting function codes
                      (    constants.asm):00205         
     001F             (    constants.asm):00206         WRLNMSK equ     $1F             31 character is the maximum word length
                      (    constants.asm):00207         
                      (    constants.asm):00208         * 6309 opcodes.
     008E             (    constants.asm):00209         LDXOPC  equ     $8E             LDX (immediate)
     007E             (    constants.asm):00210         JMPOPC  equ     $7E             JMP (extended)
     00BD             (    constants.asm):00211         JSROPC  equ     $BD             JSR (extended)
     0039             (    constants.asm):00212         RTSOPC  equ     $39             RTS (inherent)
     2503             (    constants.asm):00213         BCSOPC  equ     $2503           BCS *+5 (relative)
     2603             (    constants.asm):00214         BNEOPC  equ     $2603           BNE *+5 (relative)
     00C7             (    constants.asm):00215         ILLOPC  equ     $C7             An illegal operation code. Meant to raise a trap
                      (    constants.asm):00216         
     0001             (    constants.asm):00217         CFLAG   equ     1               CC bit 0 (C)
     0004             (    constants.asm):00218         ZFLAG   equ     4               CC bit 2 (Z)
     0010             (    constants.asm):00219         IFLAG   equ     $10             CC bit 4 (I)
     0040             (    constants.asm):00220         FFLAG   equ     $40             CC bit 6 (F)
                      (    constants.asm):00221         
                      (    constants.asm):00222         * RAM based execution token for @.
     0D84             (    constants.asm):00223         RAMFTCH set     WDICSPC+4       Dictionary header overhead is word's length + 3
                      (    constants.asm):00224                 IFNE    RELFEAT         The reliability features adds one byte to the
0000                  (    constants.asm):00225         RAMFTCH set     WDICSPC+5       header: a checksum.
                      (    constants.asm):00226                 ENDC
                      (    constants.asm):00227         
                      (        forth.asm):00129         
                      (        forth.asm):00130         * Unchecked NPUSH. This is for situations in which there is absolutely no
                      (        forth.asm):00131         * chance of overflow. For instance, in case we just popped 2 cells and push
                      (        forth.asm):00132         * back one or two.
0000                  (        forth.asm):00133         UCNPUSH MACRO   NOEXPAND
                      (        forth.asm):00134                 pshu    x
                      (        forth.asm):00135                 ENDM
                      (        forth.asm):00136         
                      (        forth.asm):00137         * Unchecked NPOP. To be used only after trusted words have been invoked, i.e.
                      (        forth.asm):00138         * when one is positively sure that the data stack contains at least one cell.
0000                  (        forth.asm):00139         UCNPOP  MACRO   NOEXPAND
                      (        forth.asm):00140                 pulu    x
                      (        forth.asm):00141                 ENDM
                      (        forth.asm):00142         
                      (        forth.asm):00143         * Make sure minimum data stack requirements are satisfied upon word entry.
                      (        forth.asm):00144         * The requirement is expressed in cell size--2 bytes on the 6309.
                      (        forth.asm):00145         * \1 specifies the required number of cells.
0000                  (        forth.asm):00146         MINDREQ MACRO   NOEXPAND
                      (        forth.asm):00147                 ldd     #NSTBOT-(\1*2)  Cell count one expects to be stacked up
                      (        forth.asm):00148                 bra     CHKNDPT         No return if the condition is not met
                      (        forth.asm):00149                 ENDM
                      (        forth.asm):00150         
                      (        forth.asm):00151         * Reliability feature support: execution tokens.
                      (        forth.asm):00152         * \1 has the opcode we want to emit.
                      (        forth.asm):00153         * \2 has the execution token address, as if the header overhead always
                      (        forth.asm):00154         * was 3 bytes.
0000                  (        forth.asm):00155         RFXT    MACRO   NOEXPAND
                      (        forth.asm):00156                 IFNE    RELFEAT
                      (        forth.asm):00157                 \1      \2+1
                      (        forth.asm):00158                 ELSE
                      (        forth.asm):00159                 \1      \2
                      (        forth.asm):00160                 ENDC                    RELFEAT
                      (        forth.asm):00161                 ENDM
                      (        forth.asm):00162         
                      (        forth.asm):00163         * Reliability feature support: variable word header contents.
                      (        forth.asm):00164         * This is a dummy checksum only used for EEPROM resident words.
                      (        forth.asm):00165         * Those never are checked for code integrity by MONITOR.
0000                  (        forth.asm):00166         RFCS    MACRO   NOEXPAND
                      (        forth.asm):00167                 IFNE    RELFEAT
                      (        forth.asm):00168                 fcb     ILLOPC          Illegal opcode
                      (        forth.asm):00169                 ENDC                    RELFEAT
                      (        forth.asm):00170                 ENDM
                      (        forth.asm):00171         
                      (        forth.asm):00172         *******************************************************************************
                      (        forth.asm):00173         * RAM definitions. We cannot initialize globals from the assembly defs.
                      (        forth.asm):00174         * All we can do here is define addresses and size things up.
                      (        forth.asm):00175         
                      (        forth.asm):00176         * RAMSTART is 0. We leave page 0 unused as a bug proof area.
                      (        forth.asm):00177         * When compiled in debug mode, this area is filled with illegal
                      (        forth.asm):00178         * instruction opcodes ($C7).
                      (        forth.asm):00179         
                      (        forth.asm):00180                 org     VARSPC
                      (        forth.asm):00181         
                      (        forth.asm):00182         * Global pointers.
0100                  (        forth.asm):00183         RSP     rmb     2               The return stack pointer
0102                  (        forth.asm):00184         TOKENSP rmb     2               Token start pointer (STRS)
0104                  (        forth.asm):00185         TOKENEP rmb     2               Token end pointer (STRE)
0106                  (        forth.asm):00186         LSTWAD  rmb     2               Last defined word header pointer--LAST
0108                  (        forth.asm):00187         DICEND  rmb     2               Current end of the dictionary--HERE
010A                  (        forth.asm):00188         BLSTWAD rmb     2               Backup (was IX)
010C                  (        forth.asm):00189         BDICEND rmb     2               Backup (was IY)
010E                  (        forth.asm):00190         PLOAD   rmb     2               Word payload if found by SWDIC
0110                  (        forth.asm):00191         FNDPLD  rmb     2               Last code payload reported by FIND
0112                  (        forth.asm):00192         RECADDR rmb     2               Used by RECURSE
0114                  (        forth.asm):00193         JSRLAST rmb     2               Last compilation address of #JSROPC
0116                  (        forth.asm):00194         FWDREF  rmb     2               Address of the last forward reference
0118                  (        forth.asm):00195         RAKEVAR rmb     2               Linked list of LEAVE forward references
011A                  (        forth.asm):00196         VLPRVEP rmb     2               Used in WORDS to compute word code length
011C                  (        forth.asm):00197         VLPRVHD rmb     2               Used in WORDS to compute word code length
011E                  (        forth.asm):00198         MRUBUFA rmb     2               Most recently used buffer address
0120                  (        forth.asm):00199         BSBFADR rmb     2               Base buffer address for the input stream
                      (        forth.asm):00200         
                      (        forth.asm):00201         * Global variables.
0122                  (        forth.asm):00202         UBASE   rmb     2               Base for numbers input and output--BASE
0124                  (        forth.asm):00203         USTATE  rmb     2               0 if interpreting, 255 if compiling--STATE
0126                  (        forth.asm):00204         ISLEN   rmb     2               Input stream length
0128                  (        forth.asm):00205         ISEADDR rmb     2               End of input stream address (included)
012A                  (        forth.asm):00206         UTOIN   rmb     2               User variable for >IN
012C                  (        forth.asm):00207         UBLK    rmb     2               User variable for BLK
012E                  (        forth.asm):00208         USCR    rmb     2               User variable for SCR (output for LIST)
0130                  (        forth.asm):00209         TIKSHI  rmb     2               RTC clock ticks updated on FIRQ
0132                  (        forth.asm):00210         TIKSLOW rmb     2               RTC clock ticks updated on FIRQ
                      (        forth.asm):00211                 IFNE    DEBUG
0134                  (        forth.asm):00212         CCREG   rmb     2               A DEBUG variable for predicates (see CMP2)
                      (        forth.asm):00213                 ENDC                    DEBUG
                      (        forth.asm):00214                 IFNE    HVNMI
                      (        forth.asm):00215                 IFNE    HVNMI2
0134                  (        forth.asm):00216         SBDROPC rmb     2               Char. drop count for serial input (see FIRQHDL)
                      (        forth.asm):00217                 ENDC                    HVNMI2
                      (        forth.asm):00218                 ENDC                    HVNMI
0134                  (        forth.asm):00219         ANCMPF  rmb     1               Anonymous compilation flag
0135                  (        forth.asm):00220         BALNCD  rmb     1               Balanced flag for control flow constructs
0136                  (        forth.asm):00221         BASBKUP rmb     1               BASE backup when a base prefix is in use
0137                  (        forth.asm):00222         RDEPTH  rmb     1               Return stack depth in cells
0138                  (        forth.asm):00223         DIVFCN  rmb     1               Flag used by /, MOD and /MOD
0139                  (        forth.asm):00224         DIVDBL  rmb     1               DIV: N1 is a double (flag)
013A                  (        forth.asm):00225         DIVSYM  rmb     1               DIV: symmetric division required (flag)
013B                  (        forth.asm):00226         MULFCN  rmb     1               Flag used by *, M*
013C                  (        forth.asm):00227         F83DIVF rmb     1               FORTH-83 adjusment flag for floored division
013D                  (        forth.asm):00228         STSLFCN rmb     1               Flag used by */, */MOD
013E                  (        forth.asm):00229         CVTFCN  rmb     1               CVT: 0 => # semantics, 1 => #S semantics
013F                  (        forth.asm):00230         ISNEGF  rmb     1               Number being scanned is negative
0140                  (        forth.asm):00231         ISDBLF  rmb     1               Number being scanned is a double
0141                  (        forth.asm):00232         CVISSGN rmb     1               Flag: should CVNSTR consider numbers as signed
0142                  (        forth.asm):00233         CURTOKL rmb     1               Current token length. Set by SWDIC
0143                  (        forth.asm):00234         SVCTOKL rmb     1               Saved current token length. Set by NUMCVT
0144                  (        forth.asm):00235         IMDFLG  rmb     1               Immediate flag
0145                  (        forth.asm):00236         DEFFLG  rmb     1               Define flag
0146                  (        forth.asm):00237         RTCAVL  rmb     1               NZ if real time clock is present
0147                  (        forth.asm):00238         CFCARDP rmb     1               NZ if CF card present
0148                  (        forth.asm):00239         CFCMMIR rmb     1               Last CF command issued
0149                  (        forth.asm):00240         CFERRCD rmb     1               and the corresponding error code
014A                  (        forth.asm):00241         SRCID   rmb     1               ANSI SOURCE-ID (internal only)
014B                  (        forth.asm):00242         CYCLO   rmb     1               McCabe cyclomatic complexity counter
014C                  (        forth.asm):00243         SQUOTFN rmb     1               NZ only if running WORD from S" (or .")
                      (        forth.asm):00244         
                      (        forth.asm):00245         * Serial buffer parameters. Queing happens on FIRQ.
                      (        forth.asm):00246         * Dequeing occurs when GETCH is invoked.
014D                  (        forth.asm):00247         SERBENQ rmb     1               Enqueue offset
014E                  (        forth.asm):00248         SERBDEQ rmb     1               Dequeue offset
014F                  (        forth.asm):00249         SERBCNT rmb     1               Buffer byte count
0150                  (        forth.asm):00250         XMITOK  rmb     1               Software flow control on output flag
0151                  (        forth.asm):00251         SERBUF  rmb     SERBSZ          The actual buffer
                      (        forth.asm):00252         
0191                  (        forth.asm):00253         PADBUF  rmb     PADBSZ          PAD lives here.
01E5                  (        forth.asm):00254         APADBUF rmb     PADBSZ          Alternate PAD here. Used by <#, #, #S, #>
                      (        forth.asm):00255         
                      (        forth.asm):00256         * The normal (data) stack.
0239 00               (        forth.asm):00257                 align   2
     023A             (        forth.asm):00258         NSTTOP  equ     *               U's value when the data stack is full
023A                  (        forth.asm):00259                 rmb     NSTKSZ
     033A             (        forth.asm):00260         NSTBOT  equ     *               U's value when the data stack is empty
                      (        forth.asm):00261         
                      (        forth.asm):00262         * The return stack.
     033A             (        forth.asm):00263         RSTTOP  equ     *
033A                  (        forth.asm):00264                 rmb     RSTKSZ
     0438             (        forth.asm):00265         RSTBOT  equ     *
                      (        forth.asm):00266         
0438                  (        forth.asm):00267         CMDBUF  rmb     CMDBFSZ
04BC                  (        forth.asm):00268         HEXBUF  rmb     HEXBFSZ
                      (        forth.asm):00269         
050C                  (        forth.asm):00270         TBUFF   rmb     TBUFSZ          Output for CVNSTR
                      (        forth.asm):00271         
0554 0000000000000000 (        forth.asm):00272                 align   16
     00000000
0560                  (        forth.asm):00273         BUF0    rmb     BLKSIZ+4
                      (        forth.asm):00274         
0964 0000000000000000 (        forth.asm):00275                 align   16
     00000000
0970                  (        forth.asm):00276         BUF1    rmb     BLKSIZ+4
                      (        forth.asm):00277         
                      (        forth.asm):00278         *******************************************************************************
                      (        forth.asm):00279         * Writable dictionary section begins right here. We cannot have anything
                      (        forth.asm):00280         * statically defined at this point. Therefore, FORTHIN moves the code for @
                      (        forth.asm):00281         * to this location and sets up DICEND and LSTWAD accordingly. All the RAM
                      (        forth.asm):00282         * beyond this point (after the reallocated @ implementation) is user defined
                      (        forth.asm):00283         * material. Note that builtin words, though they cannot be forgotten (to the
                      (        forth.asm):00284         * extent they are ROM resident--not to mention inter-word dependencies),
                      (        forth.asm):00285         * might still be overridden by user definitions. WORDS will happily ignore
                      (        forth.asm):00286         * that fact and list everything in the dictionary linked list order.
                      (        forth.asm):00287         
0D74 0000000000000000 (        forth.asm):00288                 align   16
     00000000
     0D80             (        forth.asm):00289         WDICSPC equ     *
                      (        forth.asm):00290         
                      (        forth.asm):00291         *******************************************************************************
                      (        forth.asm):00292         * ROM code begins.
                      (        forth.asm):00293         
                      (        forth.asm):00294                 org     ROMSTRT
                      (        forth.asm):00295         * Trap handler: division by zero or illegal opcode. See page 4-10 of "The 6309
                      (        forth.asm):00296         * Book" for a description of interrupt stacks in native 6309 mode.
E000 113C40           (        forth.asm):00297 (4)     IODZHDL bitmd   #$40            Illegal opcode?
E003 2705             (        forth.asm):00298 (3)             beq     @iodzh1
E005 8EFEA1           (        forth.asm):00299 (3)             ldx     #IOPERRM
E008 2008             (        forth.asm):00300 (3)             bra     @iodzh2
E00A 113C80           (        forth.asm):00301 (4)     @iodzh1 bitmd   #$80            Division by zero?
E00D 2726             (        forth.asm):00302 (3)             beq     @iodzh3         And you may ask yourself, well
                      (        forth.asm):00303         *                               How did I get here?
E00F 8EFEB6           (        forth.asm):00304 (3)             ldx     #DV0ERRM        Division by zero it is!
E012 BDE2EA           (        forth.asm):00305 (7)     @iodzh2 jsr     PUTS
E015 EC6C             (        forth.asm):00306 (5+1)           ldd     12,s            Return code address (PC)
E017 108E04BC         (        forth.asm):00307 (4)             ldy     #HEXBUF
E01B BDE192           (        forth.asm):00308 (7)             jsr     HDMP4   
E01E 8E04BC           (        forth.asm):00309 (3)             ldx     #HEXBUF
E021 BDE2EA           (        forth.asm):00310 (7)             jsr     PUTS
E024 BDE2F7           (        forth.asm):00311 (7)             jsr     PUTCR
E027 8EE74F           (        forth.asm):00312 (3)             ldx     #ERRHD1
E02A AF6C             (        forth.asm):00313 (5+1)           stx     12,s            Resume execution in the error handler
E02C 8EE000           (        forth.asm):00314 (3)             ldx     #IODZHDL
E02F AF68             (        forth.asm):00315 (5+1)           stx     8,s             With Y set to IODZHDL
E031 8603             (        forth.asm):00316 (2)             lda     #3              And user ABORT error code
E033 A762             (        forth.asm):00317 (4+1)           sta     2,s             Passed back through B
E035 3B               (        forth.asm):00318 (17+?)  @iodzh3 rti
                      (        forth.asm):00319         
     E036             (        forth.asm):00320         SWI3HDL equ     *
     E036             (        forth.asm):00321         SWI2HDL equ     *
     E036             (        forth.asm):00322         IRQHDL  equ     *
     E036             (        forth.asm):00323         SWIHDL  equ     *
                      (        forth.asm):00324                 IFEQ    HVNMI
E036                  (        forth.asm):00325         NMIHDL                          These should never happen
                      (        forth.asm):00326                 ENDC
E036 3B               (        forth.asm):00327 (17+?)          rti
                      (        forth.asm):00328         
                      (        forth.asm):00329         * Interrupts are disabled by default upon reset.
                      (        forth.asm):00330         * NMI# will not be "armed" until S is initialized.
E037 113D01           (        forth.asm):00331 (5)     RSTHDL  ldmd    #1              Establish 6309 native mode
                      (        forth.asm):00332         
E03A 8643             (        forth.asm):00333 (2)             lda     #ACIRSET
E03C B7D800           (        forth.asm):00334 (4)             sta     ACIACTL         ACIA master reset
E03F 86D5             (        forth.asm):00335 (2)             lda     #ACIRTS1
E041 B7D800           (        forth.asm):00336 (4)             sta     ACIACTL         RTS# high, 8N1
                      (        forth.asm):00337         
E044 8EFE2D           (        forth.asm):00338 (3)             ldx     #BOOTMSG        Identity statement
                      (        forth.asm):00339         
                      (        forth.asm):00340         * Send the NUL terminated string pointed to by X to the ACIA.
                      (        forth.asm):00341         * The RAM is not yet assumed to be working.
E047 C602             (        forth.asm):00342 (2)     INIT    ldb     #ACITDRE
E049 A680             (        forth.asm):00343 (4+1)   @init0  lda     ,x+
E04B 270A             (        forth.asm):00344 (3)             beq     RAMCHK          NUL marks the end of the string
E04D F5D800           (        forth.asm):00345 (4)     @init1  bitb    ACIACTL         Wait for TDRE bit to be set
E050 27FB             (        forth.asm):00346 (3)             beq     @init1
E052 B7D801           (        forth.asm):00347 (4)             sta     ACIADAT         Transmit data
E055 20F2             (        forth.asm):00348 (3)             bra     @init0          Next char, if any
                      (        forth.asm):00349         
                      (        forth.asm):00350         * RAM0 32 KB self test (destructive).
E057 8E0000           (        forth.asm):00351 (3)     RAMCHK  ldx     #RAMSTRT
E05A AF84             (        forth.asm):00352 (5+0)   @ramch1 stx     ,x
E05C AC84             (        forth.asm):00353 (5+0)           cmpx    ,x
E05E 2609             (        forth.asm):00354 (3)             bne     RAMFAIL
E060 3002             (        forth.asm):00355 (4+1)           leax    2,x
E062 8C8000           (        forth.asm):00356 (3)             cmpx    #RAMSTRT+RAMSIZE
E065 26F3             (        forth.asm):00357 (3)             bne     @ramch1
E067 2012             (        forth.asm):00358 (3)             bra     RAMOK
                      (        forth.asm):00359         
E069 C680             (        forth.asm):00360 (2)     RAMFAIL ldb     #128
E06B 108E8000         (        forth.asm):00361 (4)     @ramf1  ldy     #$8000
E06F 313F             (        forth.asm):00362 (4+1)   @ramf2  leay    -1,y
E071 26FC             (        forth.asm):00363 (3)             bne     @ramf2
E073 5A               (        forth.asm):00364 (1)             decb
E074 26F5             (        forth.asm):00365 (3)             bne     @ramf1
E076 8EFE88           (        forth.asm):00366 (3)             ldx     #RAMFM
E079 20CC             (        forth.asm):00367 (3)             bra     INIT            Here we go again
                      (        forth.asm):00368         
                      (        forth.asm):00369         * RAM Initialization to all $C7 if DEBUG mode is enabled else zeroes.
E07B 8E0000           (        forth.asm):00370 (3)     RAMOK   ldx     #RAMSTRT
E07E 3101             (        forth.asm):00371 (4+1)           leay    1,x
E080 10867FFF         (        forth.asm):00372 (4)             ldw     #RAMSIZE-1
                      (        forth.asm):00373                 IFNE    DEBUG
                      (        forth.asm):00374                 lda     #ILLOPC
                      (        forth.asm):00375                 sta     ,x
                      (        forth.asm):00376                 ELSE
E084 6F84             (        forth.asm):00377 (6+0)           clr     ,x
                      (        forth.asm):00378                 ENDC                    DEBUG
E086 113812           (        forth.asm):00379 (6+?)           tfm     x+,y+
                      (        forth.asm):00380         
                      (        forth.asm):00381         * Initialize the system stack pointer and the direct page base address register.
E089 10CE8000         (        forth.asm):00382 (4)             lds     #RAMSTRT+RAMSIZE
E08D 8601             (        forth.asm):00383 (2)             lda     #VARSPC/256
E08F 1F8B             (        forth.asm):00384 (4)             tfr     a,dp
     01               (        forth.asm):00385                 SETDP   VARSPC/256
                      (        forth.asm):00386         
                      (        forth.asm):00387         * Serial buffer parameters initialization. We are doing this here because
                      (        forth.asm):00388         * PUTS requires prior software flow control initialization.
                      (        forth.asm):00389                 IFNE    DEBUG
                      (        forth.asm):00390                 clrd
                      (        forth.asm):00391                 std     SERBENQ         Two birds with one stone
                      (        forth.asm):00392                 sta     SERBCNT
                      (        forth.asm):00393                 IFNE    HVNMI
                      (        forth.asm):00394                 IFNE    HVNMI2
                      (        forth.asm):00395                 std     SBDROPC         Initialize chararacter drop count
                      (        forth.asm):00396                 ENDC                    HVNMI2
                      (        forth.asm):00397                 ENDC                    HVNMI
                      (        forth.asm):00398                 ENDC                    DEBUG
E091 8601             (        forth.asm):00399 (2)             lda     #1              Initialize software flow control on output
E093 9750             (        forth.asm):00400 (3)             sta     XMITOK
                      (        forth.asm):00401         
E095 8EFE78           (        forth.asm):00402 (3)             ldx     #RAMOKM
E098 BDE2EA           (        forth.asm):00403 (7)             jsr     PUTS
E09B BDE34B           (        forth.asm):00404 (7)             jsr     FORTHIN         Global variables initialization
E09E BDE902           (        forth.asm):00405 (7)             jsr     CFINIT          CompactFlash card initialization
                      (        forth.asm):00406                 IFNE    RTCFEAT
                      (        forth.asm):00407                 jsr     RTCINIT         Real time clock initialization
                      (        forth.asm):00408                 ENDC                    RTCFEAT
                      (        forth.asm):00409         
                      (        forth.asm):00410         * Lower RTS and enable FIRQ.
E0A1 8695             (        forth.asm):00411 (2)             lda     #ACIRTS0
E0A3 B7D800           (        forth.asm):00412 (4)             sta     ACIACTL
E0A6 1CBF             (        forth.asm):00413 (2)             andcc   #^FFLAG
                      (        forth.asm):00414         
E0A8 0D47             (        forth.asm):00415 (4)             tst     CFCARDP
E0AA 2706             (        forth.asm):00416 (3)             beq     INTERP
                      (        forth.asm):00417         
                      (        forth.asm):00418         * A CF card is present, LOAD block #1.
E0AC 8E0001           (        forth.asm):00419 (3)             ldx     #1
E0AF BDF7DE           (        forth.asm):00420 (7)             jsr     LOAD1
                      (        forth.asm):00421         
                      (        forth.asm):00422         * The interpreter main loop.
E0B2 104F             (        forth.asm):00423 (2)     INTERP  clrd
E0B4 DD2C             (        forth.asm):00424 (4)             std     UBLK            Interpreting from the console. Set BLK to 0
E0B6 974A             (        forth.asm):00425 (3)             sta     SRCID           Clear SOURCE-ID. Not invoked in EVALUATE context
E0B8 BDE166           (        forth.asm):00426 (7)             jsr     READLN          Acquire the next input line (>IN is cleared)
E0BB 8D02             (        forth.asm):00427 (6)             bsr     _INTERP
E0BD 20F3             (        forth.asm):00428 (3)     MINTLRA bra     INTERP
                      (        forth.asm):00429         
                      (        forth.asm):00430         * The interpreter itself.
E0BF BDE384           (        forth.asm):00431 (7)     _INTERP jsr     SCNSTOK         Scan for the beginning of a word at address X
E0C2 2710             (        forth.asm):00432 (3)             beq     @oeistr         This is the end
E0C4 0D25             (        forth.asm):00433 (4)             tst     USTATE+1        We do ignore the upper byte
E0C6 264D             (        forth.asm):00434 (3)             bne     COMP            We are compiling
E0C8 BDE49D           (        forth.asm):00435 (7)             jsr     SWDIC           Updates TOKENEP, CURTOKL, IMDFLG/DEFFLG
E0CB 261C             (        forth.asm):00436 (3)             bne     @exec           Word found, execute it
E0CD BDE3DC           (        forth.asm):00437 (7)             jsr     NUMCVT
     E0D0             (        forth.asm):00438         NMCVIRA equ     *
E0D0 9E04             (        forth.asm):00439 (4)             ldx     TOKENEP
E0D2 20EB             (        forth.asm):00440 (3)             bra     _INTERP         Next token, please!
                      (        forth.asm):00441         * End of input stream condition is recognized. We are looking at the past here.
E0D4 0D4A             (        forth.asm):00442 (4)     @oeistr tst     SRCID           Were we running a string via EVALUATE?
E0D6 2604             (        forth.asm):00443 (3)             bne     @done           No feedback if that was the case
E0D8 DC2C             (        forth.asm):00444 (4)             ldd     UBLK
E0DA 2701             (        forth.asm):00445 (3)             beq     @feedbk         We are back from the console
E0DC 39               (        forth.asm):00446 (4)     @done   rts                     We're done here
E0DD 8EFE9B           (        forth.asm):00447 (3)     @feedbk ldx     #OKFEEDB        Provide OK feedback
E0E0 0D25             (        forth.asm):00448 (4)             tst     USTATE+1        No OK feedback if we're compiling, just CRLF
E0E2 2702             (        forth.asm):00449 (3)             beq     @fullfb
E0E4 3003             (        forth.asm):00450 (4+1)           leax    3,x             Skip the ' OK' string when compiling
E0E6 7EE2EA           (        forth.asm):00451 (3)     @fullfb jmp     PUTS            Back to whoever invoked us
E0E9 9645             (        forth.asm):00452 (3)     @exec   lda     DEFFLG
E0EB 2705             (        forth.asm):00453 (3)             beq     @introk         Compilation only flag is not set
E0ED C606             (        forth.asm):00454 (2)             ldb     #6              Incorrect STATE
E0EF BDE74C           (        forth.asm):00455 (7)             jsr     ERRHDLR         No return
     E0F2             (        forth.asm):00456         INTISRA equ     *               For symbolic stack debugging purposes
E0F2 8D0C             (        forth.asm):00457 (6)     @introk bsr     WIEN2IN         Ask Vienna for its opinion about >IN
E0F4 8EE0FB           (        forth.asm):00458 (3)             ldx     #INTRPRA        The return address
E0F7 3410             (        forth.asm):00459 (4+2)           pshs    x
E0F9 1F25             (        forth.asm):00460 (4)             tfr     y,pc            An indirect call to Y
E0FB BDE86F           (        forth.asm):00461 (7)     INTRPRA jsr     BKIN2PT         Derive X from BLK, >IN
E0FE 20BF             (        forth.asm):00462 (3)             bra     _INTERP
                      (        forth.asm):00463         
                      (        forth.asm):00464         * The Vienna anomaly: have >IN point one character further into the input
                      (        forth.asm):00465         * stream if the end of the input stream has not been reached yet and
                      (        forth.asm):00466         * the next available character is BL. This simplifies WORD and is required
                      (        forth.asm):00467         * for the GNU Forth based PARSE implementation.
E100 9E04             (        forth.asm):00468 (4)     WIEN2IN ldx     TOKENEP
E102 DC28             (        forth.asm):00469 (4)             ldd     ISEADDR
E104 103701           (        forth.asm):00470 (4)             cmpr    d,x
E107 2708             (        forth.asm):00471 (3)             beq     @noskip         End of input stream reached already
E109 8620             (        forth.asm):00472 (2)             lda     #SP
E10B A184             (        forth.asm):00473 (4+0)           cmpa    ,x
E10D 2602             (        forth.asm):00474 (3)             bne     @noskip
E10F 3001             (        forth.asm):00475 (4+1)           leax    1,x
E111 1F10             (        forth.asm):00476 (4)     @noskip tfr     x,d
E113 204C             (        forth.asm):00477 (3)             bra     U2INFRD         Derive >IN from D
                      (        forth.asm):00478         
                      (        forth.asm):00479         * The compiler.
                      (        forth.asm):00480         * Upon entry TOKENSP has been set by a prior call to SCNSTOK.
E115 BDE49D           (        forth.asm):00481 (7)     COMP    jsr     SWDIC           Updates TOKENEP, CURTOKL, IMDFLG/DEFFLG
E118 271C             (        forth.asm):00482 (3)             beq     @cmpnum         Word @ TOKENSP is not in the dictionary
E11A 0D44             (        forth.asm):00483 (4)             tst     IMDFLG
E11C 2710             (        forth.asm):00484 (3)             beq     @notimd
E11E 8DE0             (        forth.asm):00485 (6)             bsr     WIEN2IN         Ask Vienna for its opinion about >IN
E120 8EE127           (        forth.asm):00486 (3)             ldx     #COMPLRA        Word is immediate. Execute it
E123 3410             (        forth.asm):00487 (4+2)           pshs    x               Return to COMPLRA
E125 1F25             (        forth.asm):00488 (4)             tfr     y,pc            An indirect call to Y
E127 BDE86F           (        forth.asm):00489 (7)     COMPLRA jsr     BKIN2PT         Derive X from BLK, >IN
E12A 9F04             (        forth.asm):00490 (4)             stx     TOKENEP
E12C 2091             (        forth.asm):00491 (3)             bra     _INTERP         Branch back to the interpreter
E12E 1F21             (        forth.asm):00492 (4)     @notimd tfr     y,x
E130 8D20             (        forth.asm):00493 (6)             bsr     EMXASXT         Emit X as an execution token
E132 9E04             (        forth.asm):00494 (4)     @cmpdon ldx     TOKENEP
E134 2089             (        forth.asm):00495 (3)             bra     _INTERP
E136 BDE3DC           (        forth.asm):00496 (7)     @cmpnum jsr     NUMCVT
     E139             (        forth.asm):00497         NMCVCRA equ     *
E139 0D40             (        forth.asm):00498 (4)             tst     ISDBLF
E13B 2607             (        forth.asm):00499 (3)             bne     @cmpdbl
E13D 3710             (        forth.asm):00500                 UCNPOP                  TOS to X
E13F BDE566           (        forth.asm):00501 (7)             jsr     LITER
E142 20EE             (        forth.asm):00502 (3)             bra     @cmpdon
                      (        forth.asm):00503         * The following is some sort of half baked 2LITERAL.
                      (        forth.asm):00504         * Please note that NUMCVT guarantees us that at least two cells are stacked up.
E144 AE42             (        forth.asm):00505 (5+1)   @cmpdbl ldx     2,u
E146 BDE566           (        forth.asm):00506 (7)             jsr     LITER           LSC
E149 AEC4             (        forth.asm):00507 (5+0)           ldx     ,u
E14B BDE566           (        forth.asm):00508 (7)             jsr     LITER           MSC
E14E 3344             (        forth.asm):00509 (4+1)           leau    4,u             2DROP
E150 20E0             (        forth.asm):00510 (3)             bra     @cmpdon
                      (        forth.asm):00511         
                      (        forth.asm):00512         * Emit (in a code generation understanding) X as an execution token.
                      (        forth.asm):00513         * In essence, this simply inserts JSR <X> at HERE.
                      (        forth.asm):00514         * Note: this code provides support for trailing JSR elimination.
                      (        forth.asm):00515         * On input: X has the target execution token.
                      (        forth.asm):00516         * On output: Y will have HERE, A will be altered, X will be preserved.
E152 109E08           (        forth.asm):00517 (5)     EMXASXT ldy     DICEND
E155 109F14           (        forth.asm):00518 (5)             sty     JSRLAST         JSRLAST points to the latest JSR code emission
E158 86BD             (        forth.asm):00519 (2)             lda     #JSROPC         JSR extended
E15A BDE57D           (        forth.asm):00520 (7)             jsr     VARCON2         Compile a JSR to the execution token
E15D 109F08           (        forth.asm):00521 (5)             sty     DICEND
E160 39               (        forth.asm):00522 (4)             rts
                      (        forth.asm):00523         
                      (        forth.asm):00524         * Derive UTOIN from D's current value. D is altered.
E161 9320             (        forth.asm):00525 (4)     U2INFRD subd    BSBFADR
E163 DD2A             (        forth.asm):00526 (4)             std     UTOIN
E165 39               (        forth.asm):00527 (4)             rts
                      (        forth.asm):00528         
                      (        forth.asm):00529         * Used by INTERP and REFILL.
E166 8E0438           (        forth.asm):00530 (3)     READLN  ldx     #CMDBUF
E169 9F20             (        forth.asm):00531 (4)             stx     BSBFADR
E16B C684             (        forth.asm):00532 (2)             ldb     #CMDBFSZ
E16D BDE30D           (        forth.asm):00533 (7)             jsr     GETS
E170 4F               (        forth.asm):00534 (1)             clra
E171 DD26             (        forth.asm):00535 (4)             std     ISLEN           GETS returns the entered character count via B
E173 5F               (        forth.asm):00536 (1)             clrb
E174 DD28             (        forth.asm):00537 (4)             std     ISEADDR         Clear end of input stream address (included)
E176 DD2A             (        forth.asm):00538 (4)             std     UTOIN           and >IN as well
E178 39               (        forth.asm):00539 (4)             rts
                      (        forth.asm):00540         
                      (        forth.asm):00541         * Store the HEX representation of the lower nibble of A to Y+.
E179 3404             (        forth.asm):00542 (4+1)   HEX1D   pshs    b
E17B C630             (        forth.asm):00543 (2)             ldb     #'0
E17D 840F             (        forth.asm):00544 (2)             anda    #$0f
E17F 810A             (        forth.asm):00545 (2)             cmpa    #10
E181 2502             (        forth.asm):00546 (3)             bcs     @hex1d1
E183 C637             (        forth.asm):00547 (2)             ldb     #'A-10
E185 103098           (        forth.asm):00548 (4)     @hex1d1 addr    b,a
E188 A7A0             (        forth.asm):00549 (4+1)           sta     ,y+
E18A 3504             (        forth.asm):00550 (4+1)           puls    b
E18C 39               (        forth.asm):00551 (4)             rts
                      (        forth.asm):00552         
E18D 44               (        forth.asm):00553 (1)     ADIV16  lsra
E18E 44               (        forth.asm):00554 (1)             lsra
E18F 44               (        forth.asm):00555 (1)             lsra
E190 44               (        forth.asm):00556 (1)             lsra
E191 39               (        forth.asm):00557 (4)             rts
                      (        forth.asm):00558         
                      (        forth.asm):00559         * Hexdump D to 4 bytes starting at Y.  Upon return, Y will point 1 byte
                      (        forth.asm):00560         * after the last character emitted. D is preserved.
E192 3406             (        forth.asm):00561 (4+2)   HDMP4   pshs    d
E194 8DF7             (        forth.asm):00562 (6)             bsr     ADIV16
E196 8DE1             (        forth.asm):00563 (6)             bsr     HEX1D
E198 A6E4             (        forth.asm):00564 (4+0)           lda     ,s
E19A 8DDD             (        forth.asm):00565 (6)             bsr     HEX1D
E19C A661             (        forth.asm):00566 (4+1)           lda     1,s
E19E 8DED             (        forth.asm):00567 (6)             bsr     ADIV16
E1A0 8DD7             (        forth.asm):00568 (6)             bsr     HEX1D
E1A2 A661             (        forth.asm):00569 (4+1)           lda     1,s
E1A4 8DD3             (        forth.asm):00570 (6)             bsr     HEX1D
E1A6 3506             (        forth.asm):00571 (4+2)           puls    d
E1A8 6FA4             (        forth.asm):00572 (6+0)           clr     ,y
E1AA 39               (        forth.asm):00573 (4)             rts
                      (        forth.asm):00574         
E1AB 3406             (        forth.asm):00575 (4+2)   HDMP2   pshs    d
E1AD 8DDE             (        forth.asm):00576 (6)             bsr     ADIV16
E1AF 8DC8             (        forth.asm):00577 (6)             bsr     HEX1D
E1B1 A6E4             (        forth.asm):00578 (4+0)           lda     ,s
E1B3 8DC4             (        forth.asm):00579 (6)             bsr     HEX1D
E1B5 3506             (        forth.asm):00580 (4+2)           puls    d
E1B7 6FA4             (        forth.asm):00581 (6+0)           clr     ,y
E1B9 39               (        forth.asm):00582 (4)             rts
                      (        forth.asm):00583         
                      (        forth.asm):00584                 IFNE    HVNMI
                      (        forth.asm):00585         * Add string pointed to by X starting at the address stored in Y.
E1BA 3402             (        forth.asm):00586 (4+1)   ADDS    pshs    a
E1BC A680             (        forth.asm):00587 (4+1)   @adds1  lda     ,x+
E1BE A7A0             (        forth.asm):00588 (4+1)           sta     ,y+
E1C0 26FA             (        forth.asm):00589 (3)             bne     @adds1
E1C2 3502             (        forth.asm):00590 (4+1)           puls    a
E1C4 39               (        forth.asm):00591 (4)             rts
                      (        forth.asm):00592         
E1C5 8DF3             (        forth.asm):00593 (6)     NMI2DM  bsr     ADDS
E1C7 313F             (        forth.asm):00594 (4+1)           leay    -1,y            Backward over NUL
E1C9 20E0             (        forth.asm):00595 (3)             bra     HDMP2
                      (        forth.asm):00596         
E1CB 8DED             (        forth.asm):00597 (6)     NMI4DM  bsr     ADDS
E1CD 313F             (        forth.asm):00598 (4+1)           leay    -1,y            Backward over NUL
E1CF 20C1             (        forth.asm):00599 (3)             bra     HDMP4
                      (        forth.asm):00600         
E1D1 8E050C           (        forth.asm):00601 (3)     NMIDML  ldx     #TBUFF
E1D4 BDE2EA           (        forth.asm):00602 (7)             jsr     PUTS
E1D7 7EE2F7           (        forth.asm):00603 (3)             jmp     PUTCR
                      (        forth.asm):00604         
                      (        forth.asm):00605         * All registers are stacked in native mode.
E1DA B6D800           (        forth.asm):00606 (4)     NMIHDL  lda     ACIACTL
E1DD 3402             (        forth.asm):00607 (4+1)           pshs    a
E1DF 9650             (        forth.asm):00608 (3)             lda     XMITOK
E1E1 3402             (        forth.asm):00609 (4+1)           pshs    a
E1E3 8601             (        forth.asm):00610 (2)             lda     #1
E1E5 9750             (        forth.asm):00611 (3)             sta     XMITOK
                      (        forth.asm):00612         * Stack structure at this point
                      (        forth.asm):00613         * 0     saved XMITOK: 1 byte
                      (        forth.asm):00614         * 1     saved ACIA status register: 1 byte
                      (        forth.asm):00615         * 2     CC
                      (        forth.asm):00616         * 3     D
                      (        forth.asm):00617         * 5     W
                      (        forth.asm):00618         * 7     DP
                      (        forth.asm):00619         * 8     X
                      (        forth.asm):00620         * 10    Y
                      (        forth.asm):00621         * 12    U
                      (        forth.asm):00622         * 14    PC
E1E7 BDE2F7           (        forth.asm):00623 (7)             jsr     PUTCR
                      (        forth.asm):00624         
                      (        forth.asm):00625         * First line: CC, D, W, DP, X, Y, U, PC, S
E1EA 108E050C         (        forth.asm):00626 (4)             ldy     #TBUFF
E1EE 8EE21D           (        forth.asm):00627 (3)             ldx     #CCREGM
E1F1 A662             (        forth.asm):00628 (4+1)           lda     2,s             CC in the system stack
E1F3 8DD0             (        forth.asm):00629 (6)             bsr     NMI2DM
                      (        forth.asm):00630         
E1F5 EC63             (        forth.asm):00631 (5+1)           ldd     3,s             D in the system stack
E1F7 8DD2             (        forth.asm):00632 (6)             bsr     NMI4DM
                      (        forth.asm):00633         
E1F9 EC65             (        forth.asm):00634 (5+1)           ldd     5,s             W in the system stack
E1FB 8DCE             (        forth.asm):00635 (6)             bsr     NMI4DM
                      (        forth.asm):00636         
E1FD A667             (        forth.asm):00637 (4+1)           lda     7,s             DP in the system stack
E1FF 8DC4             (        forth.asm):00638 (6)             bsr     NMI2DM
                      (        forth.asm):00639         
E201 EC68             (        forth.asm):00640 (5+1)           ldd     8,s             X in the system stack
E203 8DC6             (        forth.asm):00641 (6)             bsr     NMI4DM
                      (        forth.asm):00642         
E205 EC6A             (        forth.asm):00643 (5+1)           ldd     10,s            Y in the system stack
E207 8DC2             (        forth.asm):00644 (6)             bsr     NMI4DM
                      (        forth.asm):00645         
E209 EC6C             (        forth.asm):00646 (5+1)           ldd     12,s            U in the system stack
E20B 8DBE             (        forth.asm):00647 (6)             bsr     NMI4DM
                      (        forth.asm):00648         
E20D EC6E             (        forth.asm):00649 (5+1)           ldd     14,s            PC in the system stack
E20F 8DBA             (        forth.asm):00650 (6)             bsr     NMI4DM
                      (        forth.asm):00651         
E211 33E810           (        forth.asm):00652 (4+1)           leau    16,s            S in the system stack
E214 1F30             (        forth.asm):00653 (4)             tfr     u,d
E216 8DB3             (        forth.asm):00654 (6)             bsr     NMI4DM
                      (        forth.asm):00655         
E218 8DB7             (        forth.asm):00656 (6)             bsr     NMIDML
                      (        forth.asm):00657         
                      (        forth.asm):00658                 IFNE    HVNMI2
                      (        forth.asm):00659         * Second line: ACIST, XMTOK, SBASE, SBENQ, SBDEQ, SBCNT, SBDROPC
                      (        forth.asm):00660                 ldy     #TBUFF
                      (        forth.asm):00661                 ldx     #ACISTM
                      (        forth.asm):00662                 lda     1,s             ACIA status register in the system stack
                      (        forth.asm):00663                 bsr     NMI2DM
                      (        forth.asm):00664         
                      (        forth.asm):00665                 lda     ,s              XMITOK in the system stack
                      (        forth.asm):00666                 bsr     NMI2DM
                      (        forth.asm):00667         
                      (        forth.asm):00668                 ldd     #SERBUF         SERBUF address
                      (        forth.asm):00669                 bsr     NMI4DM
                      (        forth.asm):00670         
                      (        forth.asm):00671                 lda     SERBENQ         SERBENQ 8 bit offset
                      (        forth.asm):00672                 bsr     NMI2DM
                      (        forth.asm):00673         
                      (        forth.asm):00674                 lda     SERBDEQ         SERBDEQ 8 bit offset
                      (        forth.asm):00675                 bsr     NMI2DM
                      (        forth.asm):00676         
                      (        forth.asm):00677                 lda     SERBCNT
                      (        forth.asm):00678                 bsr     NMI2DM
                      (        forth.asm):00679         
                      (        forth.asm):00680                 ldd     SBDROPC         Number of bytes dropped because SERBUF was full
                      (        forth.asm):00681                 bsr     NMI4DM
                      (        forth.asm):00682         
                      (        forth.asm):00683                 bsr     NMIDML
                      (        forth.asm):00684                 ENDC                    HVNMI2
                      (        forth.asm):00685         
E21A 3262             (        forth.asm):00686 (4+1)           leas    2,s             System stack cleanup
E21C 3B               (        forth.asm):00687 (17+?)          rti
                      (        forth.asm):00688         
E21D 43432000         (        forth.asm):00689         CCREGM  fcn     'CC '
E221 20442000         (        forth.asm):00690         DREGM   fcn     ' D '
E225 20572000         (        forth.asm):00691         WREGM   fcn     ' W '
E229 2044502000       (        forth.asm):00692         DPREGM  fcn     ' DP '
E22E 20582000         (        forth.asm):00693         XREGM   fcn     ' X '
E232 20592000         (        forth.asm):00694         YREGM   fcn     ' Y '
E236 20552000         (        forth.asm):00695         UREGM   fcn     ' U '
E23A 2050432000       (        forth.asm):00696         PCREGM  fcn     ' PC '
E23F 20532000         (        forth.asm):00697         SREGM   fcn     ' S '
                      (        forth.asm):00698                 IFNE    HVNMI2
E243                  (        forth.asm):00699         ACISTM  fcn     'AS '           ACIA status register
E243                  (        forth.asm):00700         XMTOKM  fcn     ' XO '          XMITOK--software flow control (one byte)
E243                  (        forth.asm):00701         SBASEM  fcn     ' SB '          Serial FIFO base address (two bytes)
E243                  (        forth.asm):00702         SBENQM  fcn     ' EN '          FIFO enqueue offset (one byte)
E243                  (        forth.asm):00703         SBSEQM  fcn     ' DE '          FIFO dequeue offset (one byte)
E243                  (        forth.asm):00704         SBCNTM  fcn     ' CN '          FIFO queued byte count (one byte)
E243                  (        forth.asm):00705         SBDRPM  fcn     ' DR '          Number of characters dropped (two bytes)
                      (        forth.asm):00706                 ENDC                    HVNMI2
                      (        forth.asm):00707         
                      (        forth.asm):00708                 ENDC                    HVNMI
                      (        forth.asm):00709         
                      (        forth.asm):00710         * Returns the length of the string pointed to by X (terminator excluded) in W.
E243 3410             (        forth.asm):00711 (4+2)   SLEN    pshs    x
E245 105F             (        forth.asm):00712 (2)             clrw
E247 105C             (        forth.asm):00713 (2)     @slen1  incw
E249 A680             (        forth.asm):00714 (4+1)           lda     ,x+
E24B 26FA             (        forth.asm):00715 (3)             bne     @slen1
E24D 105A             (        forth.asm):00716 (2)             decw
E24F 3510             (        forth.asm):00717 (4+2)           puls    x
E251 39               (        forth.asm):00718 (4)             rts
                      (        forth.asm):00719         
                      (        forth.asm):00720                 include console.asm
                      (      console.asm):00001         * FIRQ interrupt handler. This is entered on RDRF (input available).
E252 3416             (      console.asm):00002 (4+4)   FIRQHDL pshs    x,d
                      (      console.asm):00003                 IFNE    RTCFEAT
                      (      console.asm):00004                 jsr     RTCIHDL         Check for RTC periodic interrupt
                      (      console.asm):00005                 ENDC                    RTCFEAT
E254 B6D800           (      console.asm):00006 (4)             lda     ACIACTL
E257 8580             (      console.asm):00007 (2)             bita    #ACIISVC        Does the ACIA need input service?
E259 2731             (      console.asm):00008 (3)             beq     @nsintr         No. This is not the IRQ source we're looking for
                      (      console.asm):00009                 IFNE    DEBUG
                      (      console.asm):00010                 bita    #ACIRDRF
                      (      console.asm):00011                 beq     @nsintr         ACIA RDRF status bit should be set in all cases
                      (      console.asm):00012                 bita    #ACIOVRN        ACIA data overrun on read?
                      (      console.asm):00013                 beq     @datval         No, incoming data is valid
                      (      console.asm):00014                 ldb     ACIADAT         Clear overrun bit and INTACK
                      (      console.asm):00015                 ldb     #'%             Error indicating character is %
                      (      console.asm):00016                 bra     @chkovf
                      (      console.asm):00017                 ENDC                    DEBUG
                      (      console.asm):00018         * Out of band characters processing.
E25B F6D801           (      console.asm):00019 (4)     @datval ldb     ACIADAT         Incoming data byte to B and INTACK
E25E C103             (      console.asm):00020 (2)             cmpb    #ETX            Control-C?
E260 272D             (      console.asm):00021 (3)             beq     @sigint         Yes
E262 C113             (      console.asm):00022 (2)             cmpb    #XOFF
E264 273C             (      console.asm):00023 (3)             beq     @outngo         Output is being suspended
E266 C111             (      console.asm):00024 (2)             cmpb    #XON
E268 273B             (      console.asm):00025 (3)             beq     @outok          Output is being re-enabled
E26A 964F             (      console.asm):00026 (3)     @chkovf lda     SERBCNT
E26C 810F             (      console.asm):00027 (2)             cmpa    #15             At high water level mark?
E26E 2609             (      console.asm):00028 (3)             bne     @sbenq          No, proceed without negating RTS#
E270 3404             (      console.asm):00029 (4+1)           pshs    b
E272 C6D5             (      console.asm):00030 (2)             ldb     #ACIRTS1
E274 F7D800           (      console.asm):00031 (4)             stb     ACIACTL         Negate RTS#
E277 3504             (      console.asm):00032 (4+1)           puls    b
E279 8140             (      console.asm):00033 (2)     @sbenq  cmpa    #SERBSZ
                      (      console.asm):00034                 IFNE    HVNMI2
                      (      console.asm):00035                 beq     @nsdrop         Serial input buffer physically full
                      (      console.asm):00036                 ELSE
E27B 270F             (      console.asm):00037 (3)             beq     @nsintr         Serial input buffer physically full
                      (      console.asm):00038                 ENDC                    HVNMI2
E27D 4C               (      console.asm):00039 (1)             inca
E27E 974F             (      console.asm):00040 (3)             sta     SERBCNT         Update incoming FIFO byte count
E280 8E0151           (      console.asm):00041 (3)             ldx     #SERBUF
E283 964D             (      console.asm):00042 (3)             lda     SERBENQ         Enqueue offset to A
E285 E786             (      console.asm):00043 (4+1)           stb     a,x             Enqueue incoming character
E287 4C               (      console.asm):00044 (1)             inca
E288 843F             (      console.asm):00045 (2)             anda    #SERBSZ-1       Modulo arithmetic
E28A 974D             (      console.asm):00046 (3)             sta     SERBENQ
E28C 3516             (      console.asm):00047 (4+4)   @nsintr puls    d,x
E28E 3B               (      console.asm):00048 (17+?)          rti
                      (      console.asm):00049         * Control-C was recognized.
E28F 3264             (      console.asm):00050 (4+1)   @sigint leas    4,s             Drop D and X
E291 964E             (      console.asm):00051 (3)             lda     SERBDEQ
E293 974D             (      console.asm):00052 (3)             sta     SERBENQ
E295 0F4F             (      console.asm):00053 (5)             clr     SERBCNT         Serial input buffer has been emptied
E297 10AE61           (      console.asm):00054 (6+1)           ldy     1,s             Saved PC from the FIRQ stack
E29A 8EE74F           (      console.asm):00055 (3)             ldx     #ERRHD1
E29D AF61             (      console.asm):00056 (5+1)           stx     1,s             Execution continues in the error handler
E29F C603             (      console.asm):00057 (2)             ldb     #3              with ABORT error code passed through B
E2A1 3B               (      console.asm):00058 (17+?)          rti
E2A2 4F               (      console.asm):00059 (1)     @outngo clra
E2A3 2002             (      console.asm):00060 (3)             bra     @sxmsta
E2A5 8601             (      console.asm):00061 (2)     @outok  lda     #1
E2A7 9750             (      console.asm):00062 (3)     @sxmsta sta     XMITOK          Update XMIT status flag
E2A9 20E1             (      console.asm):00063 (3)             bra     @nsintr
                      (      console.asm):00064                 IFNE    HVNMI2
                      (      console.asm):00065         * Increment character drop count (displayed by NMIHDL).
E2AB                  (      console.asm):00066         @nsdrop ldd     SBDROPC
                      (      console.asm):00067                 incd
                      (      console.asm):00068                 std     SBDROPC
                      (      console.asm):00069                 bra     @nsintr
                      (      console.asm):00070                 ENDC                    HVNMI2
                      (      console.asm):00071         
                      (      console.asm):00072         * We do not have to talk to the ACIA directly, unless SERBCNT is zero,
                      (      console.asm):00073         * in which case we have to lower RTS#, so as to accept incoming characters.
                      (      console.asm):00074         * This can only be called from base level!
E2AB 3416             (      console.asm):00075 (4+4)   GETCH   pshs    x,d
E2AD 0D4F             (      console.asm):00076 (4)     @again  tst     SERBCNT
E2AF 260F             (      console.asm):00077 (3)             bne     @sbdind         We have incoming material
E2B1 C695             (      console.asm):00078 (2)             ldb     #ACIRTS0
E2B3 F7D800           (      console.asm):00079 (4)             stb     ACIACTL         Assert RTS#
E2B6 1CBF             (      console.asm):00080 (2)             andcc   #^FFLAG         Unmask FIRQ
E2B8 8E0001           (      console.asm):00081 (3)             ldx     #1
E2BB BDF84A           (      console.asm):00082 (7)             jsr     MILLIS1         Busy waiting for one millisecond
E2BE 20ED             (      console.asm):00083 (3)             bra     @again          Try again
                      (      console.asm):00084         * Serial buffer data indication.
E2C0 1A40             (      console.asm):00085 (2)     @sbdind orcc    #FFLAG          Mask FIRQ
E2C2 0A4F             (      console.asm):00086 (5)             dec     SERBCNT
E2C4 1CBF             (      console.asm):00087 (2)             andcc   #^FFLAG         Unmask FIRQ
E2C6 8E0151           (      console.asm):00088 (3)             ldx     #SERBUF
E2C9 964E             (      console.asm):00089 (3)             lda     SERBDEQ         Dequeue offset to A
E2CB E686             (      console.asm):00090 (4+1)           ldb     a,x             Buffered input character to B
E2CD E7E4             (      console.asm):00091 (4+0)           stb     ,s              Incoming character to A in the caller's stack
E2CF 4C               (      console.asm):00092 (1)             inca
E2D0 843F             (      console.asm):00093 (2)             anda    #SERBSZ-1       Modulo arithmetic
E2D2 974E             (      console.asm):00094 (3)             sta     SERBDEQ
E2D4 3516             (      console.asm):00095 (4+4)           puls    d,x             Same as it ever was
E2D6 39               (      console.asm):00096 (4)             rts
                      (      console.asm):00097         
E2D7 3404             (      console.asm):00098 (4+1)   PUTCH   pshs    b
E2D9 C602             (      console.asm):00099 (2)             ldb     #ACITDRE
E2DB F5D800           (      console.asm):00100 (4)     @tdrdrn bitb    ACIACTL
E2DE 27FB             (      console.asm):00101 (3)             beq     @tdrdrn         Drain the transmit data register
E2E0 0D50             (      console.asm):00102 (4)     @wfxon  tst     XMITOK          Software flow control on output
E2E2 27FC             (      console.asm):00103 (3)             beq     @wfxon          Wait for XON
E2E4 B7D801           (      console.asm):00104 (4)             sta     ACIADAT         Transmit data
E2E7 3504             (      console.asm):00105 (4+1)           puls    b
E2E9 39               (      console.asm):00106 (4)             rts
                      (      console.asm):00107         
                      (      console.asm):00108         * Send NUL terminated string pointed to by X to the ACIA.
E2EA 3416             (      console.asm):00109 (4+4)   PUTS    pshs    x,d
E2EC A680             (      console.asm):00110 (4+1)   @puts1  lda     ,x+
E2EE 2704             (      console.asm):00111 (3)             beq     @puts2         NUL marks the end of the string
E2F0 8DE5             (      console.asm):00112 (6)             bsr     PUTCH
E2F2 20F8             (      console.asm):00113 (3)             bra     @puts1
E2F4 3516             (      console.asm):00114 (4+4)   @puts2  puls    d,x
E2F6 39               (      console.asm):00115 (4)             rts
                      (      console.asm):00116         
E2F7 3410             (      console.asm):00117 (4+2)   PUTCR   pshs    x
E2F9 8EFE85           (      console.asm):00118 (3)             ldx     #CRLFSTR
E2FC 8DEC             (      console.asm):00119 (6)             bsr     PUTS
E2FE 3510             (      console.asm):00120 (4+2)           puls    x
E300 39               (      console.asm):00121 (4)             rts
                      (      console.asm):00122         
E301 8608             (      console.asm):00123 (2)     _BS     lda     #BS
E303 8DD2             (      console.asm):00124 (6)             bsr     PUTCH          Output BS
E305 8620             (      console.asm):00125 (2)             lda     #SP
E307 8DCE             (      console.asm):00126 (6)             bsr     PUTCH          Clear character
E309 8608             (      console.asm):00127 (2)             lda     #BS
E30B 20CA             (      console.asm):00128 (3)             bra     PUTCH          And go back again
                      (      console.asm):00129         
                      (      console.asm):00130         * Receive CR terminated string and store it to X.
                      (      console.asm):00131         * Upon entry B contains the receiving buffer length.
                      (      console.asm):00132         * On exit, B will contain the number of characters
                      (      console.asm):00133         * entered. A and X are preserved.
E30D 5D               (      console.asm):00134 (1)     GETS    tstb
E30E 2601             (      console.asm):00135 (3)             bne     @gets0          If B is zero, do nothing
E310 39               (      console.asm):00136 (4)             rts
E311 3416             (      console.asm):00137 (4+4)   @gets0  pshs    x,d
E313 8D96             (      console.asm):00138 (6)     @gets1  bsr     GETCH
E315 8108             (      console.asm):00139 (2)             cmpa    #BS             Backspace?
E317 260B             (      console.asm):00140 (3)             bne     @gets3
E319 E161             (      console.asm):00141 (4+1)           cmpb    1,s             B upon routine entry
E31B 27F6             (      console.asm):00142 (3)             beq     @gets1          Do not go beyond the beginning of the buffer
E31D 8DE2             (      console.asm):00143 (6)             bsr     _BS
E31F 301F             (      console.asm):00144 (4+1)           leax    -1,x
E321 5C               (      console.asm):00145 (1)             incb
E322 20EF             (      console.asm):00146 (3)             bra     @gets1
E324 8115             (      console.asm):00147 (2)     @gets3  cmpa    #NAK            Kill input?
E326 260B             (      console.asm):00148 (3)             bne     @gets5
                      (      console.asm):00149         * While B != 1,S (initial buffer length), decrement X, increment B.
E328 E161             (      console.asm):00150 (4+1)   @gets4  cmpb    1,s
E32A 27E7             (      console.asm):00151 (3)             beq     @gets1
E32C 8DD3             (      console.asm):00152 (6)             bsr     _BS
E32E 301F             (      console.asm):00153 (4+1)           leax     -1,x
E330 5C               (      console.asm):00154 (1)             incb
E331 20F5             (      console.asm):00155 (3)             bra     @gets4
                      (      console.asm):00156         * Regular input handling: echo input character.
E333 810D             (      console.asm):00157 (2)     @gets5  cmpa    #CR
E335 2707             (      console.asm):00158 (3)             beq     @gets6          Minicom only sends CR
E337 8D9E             (      console.asm):00159 (6)             bsr     PUTCH
E339 A780             (      console.asm):00160 (4+1)           sta     ,x+
E33B 5A               (      console.asm):00161 (1)             decb
E33C 26D5             (      console.asm):00162 (3)             bne     @gets1
E33E 8620             (      console.asm):00163 (2)     @gets6  lda     #SP             End of buffer reached or CR entered
E340 8D95             (      console.asm):00164 (6)             bsr     PUTCH
E342 1F10             (      console.asm):00165 (4)             tfr     x,d
E344 A362             (      console.asm):00166 (5+1)           subd    2,s             Actual number of characters entered
E346 E761             (      console.asm):00167 (4+1)           stb     1,s             Stored to B (through the system stack).         
E348 3516             (      console.asm):00168 (4+4)           puls    d,x
E34A 39               (      console.asm):00169 (4)             rts
                      (      console.asm):00170         
                      (        forth.asm):00721         
E34B BDEBED           (        forth.asm):00722         FORTHIN RFXT    jsr,NCLR+7      XT for NCLR. Set up the normal stack
E34E BDEBF8           (        forth.asm):00723                 RFXT    jsr,RCLR+7      XT for RCLR. Set up the return stack
                      (        forth.asm):00724         * Relocate '@' code to RAM and set it up as the last dictionary entry (RO).
E351 8EFE19           (        forth.asm):00725 (3)             ldx     #THEEND         Source address for tfm
E354 1086000C         (        forth.asm):00726 (4)             ldw     #(REALEND-THEEND) Byte count for tfm
E358 108E0D80         (        forth.asm):00727 (4)             ldy     #WDICSPC        Destination address for tfm
E35C 109F06           (        forth.asm):00728 (5)             sty     LSTWAD
E35F 113812           (        forth.asm):00729 (6+?)           tfm     x+,y+
E362 109F08           (        forth.asm):00730 (5)             sty     DICEND
                      (        forth.asm):00731                 IFNE    RELFEAT
                      (        forth.asm):00732                 RFXT    jsr,MONITOR+10  XT for MONITOR (monitor @ in RAM)
                      (        forth.asm):00733                 ENDC                    RELFEAT
E365 BDE9EF           (        forth.asm):00734 (7)             jsr     EMPTYB          Buffer related initializations
                      (        forth.asm):00735                 IFNE    DEBUG
                      (        forth.asm):00736                 clrd
                      (        forth.asm):00737                 std     USTATE          Initial mode is interpretation
                      (        forth.asm):00738                 std     USCR            Clear SCR
                      (        forth.asm):00739                 std     UBLK            Clear BLK
                      (        forth.asm):00740                 std     UTOIN           Clear >IN
                      (        forth.asm):00741                 std     MRUBUFA         Clear most the recently used buffer address
                      (        forth.asm):00742                 sta     SRCID
                      (        forth.asm):00743                 ENDC                    DEBUG
E368 7EFBED           (        forth.asm):00744                 RFXT    jmp,DECIMAL+10  XT for DECIMAL. Default base is decimal
                      (        forth.asm):00745         
                      (        forth.asm):00746         * Input stream end reached? If ISEADDR is clear, compute it, then compare
                      (        forth.asm):00747         * X to it. EOL condition should be handled if we return from this with ZFLAG
                      (        forth.asm):00748         * set. BSBFADR and ISLEN must have been previously initialized.
E36B 3406             (        forth.asm):00749 (4+2)   ISERCHD pshs    d
E36D DC28             (        forth.asm):00750 (4)             ldd     ISEADDR
E36F 2606             (        forth.asm):00751 (3)             bne     @cont
                      (        forth.asm):00752         * Input stream end address (ISEADDR) needs to be initialized.
E371 DC20             (        forth.asm):00753 (4)             ldd     BSBFADR
E373 D326             (        forth.asm):00754 (4)             addd    ISLEN
E375 DD28             (        forth.asm):00755 (4)             std     ISEADDR
E377 103710           (        forth.asm):00756 (4)     @cont   cmpr    x,d             CC = (D - X)
E37A 3506             (        forth.asm):00757 (4+2)           puls    d
E37C 2501             (        forth.asm):00758 (3)             blo     @inpovf
E37E 39               (        forth.asm):00759 (4)             rts
E37F C612             (        forth.asm):00760 (2)     @inpovf ldb     #18             >IN Out of range
E381 BDE74C           (        forth.asm):00761 (7)             jsr     ERRHDLR
                      (        forth.asm):00762         
                      (        forth.asm):00763         * Scan for the next non-space character pointed to by X.
                      (        forth.asm):00764         * Return with ZFLAG set if an end of input stream condition is recognized,
                      (        forth.asm):00765         * otherwise ZFLAG will be clear. A is altered.
                      (        forth.asm):00766         * Update TOKENSP in all cases.
E384 8DE5             (        forth.asm):00767 (6)     SCNSTOK bsr     ISERCHD         End of input stream reached?
E386 2708             (        forth.asm):00768 (3)             beq     @scstk1         Yes, update TOKENSP and return w. ZFLAG set
E388 A680             (        forth.asm):00769 (4+1)           lda     ,x+
E38A 8120             (        forth.asm):00770 (2)             cmpa    #SP
E38C 27F6             (        forth.asm):00771 (3)             beq     SCNSTOK
E38E 301F             (        forth.asm):00772 (4+1)           leax    -1,x            Backward one character
                      (        forth.asm):00773         * LEA affects ZFLAG but it will remain clear at this point.
E390 1FA8             (        forth.asm):00774 (4)     @scstk1 tfr     cc,a
E392 9F02             (        forth.asm):00775 (4)             stx     TOKENSP         This affects ZFLAG!!!
E394 1F8A             (        forth.asm):00776 (4)             tfr     a,cc
E396 39               (        forth.asm):00777 (4)             rts
                      (        forth.asm):00778         
                      (        forth.asm):00779         * Scan for the next white space character as an end of token marker.
                      (        forth.asm):00780         * Upon entry:
                      (        forth.asm):00781         * - X points to the input stream.
                      (        forth.asm):00782         * Upon return:
                      (        forth.asm):00783         * - X will point to the next space character or one character after the
                      (        forth.asm):00784         *   end of the input stream.
                      (        forth.asm):00785         * - CURTOKL will hold the current token length (returned in B).
                      (        forth.asm):00786         * - TOKENEP will point to the end of the current token.
                      (        forth.asm):00787         * - A is altered.
                      (        forth.asm):00788         * This routine assumes there was an identified start of token in the past,
                      (        forth.asm):00789         * i.e. that X was not pointing to a BL character upon entry.
E397 5F               (        forth.asm):00790 (1)     SCNETOK clrb
E398 8DD1             (        forth.asm):00791 (6)     @scetok bsr     ISERCHD         End of input stream reached?
E39A 270A             (        forth.asm):00792 (3)             beq     @scetk1
E39C A680             (        forth.asm):00793 (4+1)           lda     ,x+
E39E 5C               (        forth.asm):00794 (1)             incb
E39F 8120             (        forth.asm):00795 (2)             cmpa    #SP
E3A1 26F5             (        forth.asm):00796 (3)             bne     @scetok
E3A3 301F             (        forth.asm):00797 (4+1)           leax    -1,x            Keep pointing at the trailing space
E3A5 5A               (        forth.asm):00798 (1)             decb                    Uncount BL as that was the end of token marker
E3A6 1FA8             (        forth.asm):00799 (4)     @scetk1 tfr     cc,a
E3A8 9F04             (        forth.asm):00800 (4)             stx     TOKENEP
E3AA D742             (        forth.asm):00801 (3)             stb     CURTOKL
E3AC 1F8A             (        forth.asm):00802 (4)             tfr     a,cc
E3AE 39               (        forth.asm):00803 (4)             rts
                      (        forth.asm):00804         
E3AF 8DBA             (        forth.asm):00805 (6)     NXTCHAR bsr     ISERCHD
E3B1 2702             (        forth.asm):00806 (3)             beq     @gtnxc1         End of input stream detected. Return with Z set
E3B3 A680             (        forth.asm):00807 (4+1)           lda     ,x+
E3B5 39               (        forth.asm):00808 (4)     @gtnxc1 rts
                      (        forth.asm):00809         
                      (        forth.asm):00810         * Check for numeric literal BASE prefix. On entry X has the input stream
                      (        forth.asm):00811         * pointer. On exit, BASE is altered if needed and the original BASE saved
                      (        forth.asm):00812         * to BASBKUP. If BASE was not changed, BASBKUP will be zero.
                      (        forth.asm):00813         * D is altered, X is updated if a BASE prefix is detected, other registers
                      (        forth.asm):00814         * are untouched.
E3B6 E684             (        forth.asm):00815 (4+0)   CKNBPFX ldb     ,x              B has a potential base prefix character
E3B8 3410             (        forth.asm):00816 (4+2)           pshs    x
E3BA 8EFFE1           (        forth.asm):00817 (3)             ldx     #BASALST        A associative list (A-list) of BASE prefixes
E3BD A681             (        forth.asm):00818 (4+2)   @pflkup lda     ,x++            Potential BASE prefix character to A
E3BF 2707             (        forth.asm):00819 (3)             beq     @nopfix         Reached the end of the A-list. No prefix found
E3C1 103798           (        forth.asm):00820 (4)             cmpr    b,a             Prefix match?
E3C4 2707             (        forth.asm):00821 (3)             beq     @pfxfnd         Yes
E3C6 20F5             (        forth.asm):00822 (3)             bra     @pflkup         Perform base prefix lookup
E3C8 0F36             (        forth.asm):00823 (5)     @nopfix clr     BASBKUP         Nothing to be restored to BASE
E3CA 3510             (        forth.asm):00824 (4+2)           puls    x
E3CC 39               (        forth.asm):00825 (4)             rts
E3CD 9623             (        forth.asm):00826 (3)     @pfxfnd lda     UBASE+1
E3CF 9736             (        forth.asm):00827 (3)             sta     BASBKUP         Back up the current BASE value
E3D1 A61F             (        forth.asm):00828 (4+1)           lda     -1,x            The BASE specified by the prefix
E3D3 9723             (        forth.asm):00829 (3)             sta     UBASE+1         Update BASE
E3D5 3510             (        forth.asm):00830 (4+2)           puls    x
E3D7 3001             (        forth.asm):00831 (4+1)           leax    1,x             Skip the prefix from the input stream
E3D9 0A42             (        forth.asm):00832 (5)             dec     CURTOKL         For the sanity of NUMCVT
E3DB 39               (        forth.asm):00833 (4)             rts
                      (        forth.asm):00834         
                      (        forth.asm):00835         * NUMCVT performs a signed string to number conversion. The input string is
                      (        forth.asm):00836         * acquired from the input stream. Note that this routine always is called
                      (        forth.asm):00837         * after a dictionary lookup (SWDIC), so TOKENEP and CURTOKL are guaranteed
                      (        forth.asm):00838         * to have been set previously. There are two ways out this routine:
                      (        forth.asm):00839         * - redirection to the error handler (Undefined word), or
                      (        forth.asm):00840         * - a converted cell or double cell returned through the data stack.
                      (        forth.asm):00841         *   Upon return, ISDBLF being NZ will indicate a double.
E3DC 0F3F             (        forth.asm):00842 (5)     NUMCVT  clr     ISNEGF          Assume the result is positive
E3DE 0F40             (        forth.asm):00843 (5)             clr     ISDBLF          Assume the result is not a double number
E3E0 9642             (        forth.asm):00844 (3)             lda     CURTOKL
E3E2 9743             (        forth.asm):00845 (3)             sta     SVCTOKL         Save CURTOKL's value upon entry
E3E4 9E02             (        forth.asm):00846 (4)             ldx     TOKENSP
E3E6 8DCE             (        forth.asm):00847 (6)             bsr     CKNBPFX         Check for numeric literal BASE prefix
                      (        forth.asm):00848         * Check for optional minus sign.
E3E8 A684             (        forth.asm):00849 (4+0)           lda     ,x
E3EA 812D             (        forth.asm):00850 (2)             cmpa    #'-
E3EC 2606             (        forth.asm):00851 (3)             bne     @ncini
E3EE 0A42             (        forth.asm):00852 (5)             dec     CURTOKL
E3F0 0C3F             (        forth.asm):00853 (5)             inc     ISNEGF          Remember to negate the result before returning
E3F2 3001             (        forth.asm):00854 (4+1)           leax    1,x             Skip the negativity!
E3F4 1F12             (        forth.asm):00855 (4)     @ncini  tfr     x,y             Backup input stream pointer
E3F6 1FC1             (        forth.asm):00856 (4)             tfr     0,x             Initialize the result
E3F8 BDE7DB           (        forth.asm):00857 (7)             jsr     NPUSH           LSC
E3FB BDE7DB           (        forth.asm):00858 (7)             jsr     NPUSH           MSC
E3FE 1F21             (        forth.asm):00859 (4)             tfr     y,x             Restore the input stream pointer
E400 BDE7DB           (        forth.asm):00860 (7)             jsr     NPUSH           Base scanning address
E403 4F               (        forth.asm):00861 (1)             clra
E404 D642             (        forth.asm):00862 (3)             ldb     CURTOKL
E406 1F01             (        forth.asm):00863 (4)             tfr     d,x             Token length to X (might include a trailing .)
E408 BDE7DB           (        forth.asm):00864 (7)             jsr     NPUSH
E40B BDF503           (        forth.asm):00865                 RFXT    jsr,TONUMBR+10
                      (        forth.asm):00866         * At this point, at least four cells are on the data stack.
E40E 3710             (        forth.asm):00867                 UCNPOP
E410 1F10             (        forth.asm):00868 (4)             tfr     x,d             Number of unconverted characters to D
E412 3710             (        forth.asm):00869                 UCNPOP                  Address of the last non convertible char to X
E414 104D             (        forth.asm):00870 (2)             tstd
E416 2717             (        forth.asm):00871 (3)             beq     @ncadj          Not dealing with a double
E418 10830001         (        forth.asm):00872 (4)             cmpd    #1
E41C 2623             (        forth.asm):00873 (3)             bne     @ncnogo         At most one character must be unconverted
E41E A684             (        forth.asm):00874 (4+0)           lda     ,x
E420 812E             (        forth.asm):00875 (2)             cmpa    #'.             Was a double number meant?
E422 261D             (        forth.asm):00876 (3)             bne     @ncnogo         No, we do not have a winner...
E424 0C40             (        forth.asm):00877 (5)             inc     ISDBLF
                      (        forth.asm):00878         * Double cell number adjustments.
E426 0D3F             (        forth.asm):00879 (4)             tst     ISNEGF          Are we dealing with a negative number?
E428 2725             (        forth.asm):00880 (3)             beq     RSBSPFX         No. Restore BASE if needed--the end
E42A BDF41A           (        forth.asm):00881                 RFXT    jsr,DNEG+10     Acknowledge the negativity
E42D 2020             (        forth.asm):00882 (3)             bra     RSBSPFX         Restore BASE if needed--the end
                      (        forth.asm):00883         * Single cell number adjustments.
E42F ECC1             (        forth.asm):00884 (5+2)   @ncadj  ldd     ,u++            MSC Should be zero
E431 2705             (        forth.asm):00885 (3)             beq     @cvsnok
E433 C604             (        forth.asm):00886 (2)             ldb     #4              Out of range error if not
E435 BDE74C           (        forth.asm):00887 (7)             jsr     ERRHDLR         No return
E438 0D3F             (        forth.asm):00888 (4)     @cvsnok tst     ISNEGF          Are we dealing with a negative number?
E43A 2713             (        forth.asm):00889 (3)             beq     RSBSPFX         No. Restore BASE if needed--the end
E43C BDF009           (        forth.asm):00890                 RFXT    jsr,NEGATE+9    Acknowledge the negativity
E43F 200E             (        forth.asm):00891 (3)             bra     RSBSPFX         Restore BASE if needed--the end
E441 3344             (        forth.asm):00892 (4+1)   @ncnogo leau    4,u             Drop two cells from the data stack
E443 9643             (        forth.asm):00893 (3)             lda     SVCTOKL
E445 9742             (        forth.asm):00894 (3)             sta     CURTOKL         Restore CURTOKL's original value
E447 9E02             (        forth.asm):00895 (4)             ldx     TOKENSP         Beginning address of the current token
E449 C602             (        forth.asm):00896 (2)             ldb     #2              Undefined (X points to the offending word)
E44B BDE74C           (        forth.asm):00897 (7)             jsr     ERRHDLR         No return
     E44E             (        forth.asm):00898         NUMCVRA equ     *               For symbolic stack dump purposes
E44E 12               (        forth.asm):00899 (1)             nop
                      (        forth.asm):00900         
                      (        forth.asm):00901         * Restore BASE if a numeric literal BASE prefix was detected.
                      (        forth.asm):00902         * X is to be preserved at all cost!
E44F 9636             (        forth.asm):00903 (3)     RSBSPFX lda     BASBKUP
E451 2702             (        forth.asm):00904 (3)             beq     @theend
E453 9723             (        forth.asm):00905 (3)             sta     UBASE+1
E455 39               (        forth.asm):00906 (4)     @theend rts
                      (        forth.asm):00907         
                      (        forth.asm):00908         * Convert number stored in X to a string (depending on BASE value).
                      (        forth.asm):00909         * Output is stored in the global TBUFF buffer. X is preserved.
E456 0F3F             (        forth.asm):00910 (5)     CVNSTR  clr     ISNEGF
E458 1F10             (        forth.asm):00911 (4)             tfr     x,d
E45A 0D41             (        forth.asm):00912 (4)             tst     CVISSGN         Are we to perform a signed conversion?
E45C 2708             (        forth.asm):00913 (3)             beq     @cvnst1
E45E 104D             (        forth.asm):00914 (2)             tstd
E460 2A04             (        forth.asm):00915 (3)             bpl     @cvnst1
E462 0C3F             (        forth.asm):00916 (5)             inc     ISNEGF          Number being converted is negative
E464 1040             (        forth.asm):00917 (2)             negd
E466 1F06             (        forth.asm):00918 (4)     @cvnst1 tfr     d,w
E468 104F             (        forth.asm):00919 (2)             clrd
E46A 108E051F         (        forth.asm):00920 (4)             ldy     #TBUFF+19       Sign + 16 digits + terminator + 1
E46E 6FA2             (        forth.asm):00921 (6+1)           clr     ,-y             End of string marker
E470 119E22           (        forth.asm):00922 (35)    @cvnst2 divq    UBASE           D returns the modulo and W the quotient
E473 8630             (        forth.asm):00923 (2)             lda     #'0
E475 C10A             (        forth.asm):00924 (2)             cmpb    #10
E477 2502             (        forth.asm):00925 (3)             bcs     @cvnst3
                      (        forth.asm):00926         * BASE has letters among its valid numbers.
E479 8637             (        forth.asm):00927 (2)             lda     #'A-10
E47B 103089           (        forth.asm):00928 (4)     @cvnst3 addr    a,b
E47E E7A2             (        forth.asm):00929 (4+1)           stb     ,-y
E480 104F             (        forth.asm):00930 (2)             clrd
E482 105D             (        forth.asm):00931 (2)             tstw
E484 26EA             (        forth.asm):00932 (3)             bne     @cvnst2
E486 C620             (        forth.asm):00933 (2)             ldb     #SP
E488 0D3F             (        forth.asm):00934 (4)             tst     ISNEGF
E48A 2702             (        forth.asm):00935 (3)             beq     @cvnst4
E48C C62D             (        forth.asm):00936 (2)             ldb     #'-
E48E E7A2             (        forth.asm):00937 (4+1)   @cvnst4 stb     ,-y
                      (        forth.asm):00938         * We need to insert leading spaces up to the beginning of the output buffer.
E490 C620             (        forth.asm):00939 (2)             ldb     #SP
E492 108C050C         (        forth.asm):00940 (4)     @cvnst5 cmpy    #TBUFF
E496 2601             (        forth.asm):00941 (3)             bne     @cvnst6
E498 39               (        forth.asm):00942 (4)             rts
E499 E7A2             (        forth.asm):00943 (4+1)   @cvnst6 stb     ,-y
E49B 20F5             (        forth.asm):00944 (3)             bra     @cvnst5
                      (        forth.asm):00945         
                      (        forth.asm):00946         * Search word beginning at address TOKENSP in the dictionary.
                      (        forth.asm):00947         * Upon return Z will be set if the word was not found.
                      (        forth.asm):00948         * Otherwise, Y will point to the code section of the word.
                      (        forth.asm):00949         * CSSNTVE (defined in constants.asm) defines whether the
                      (        forth.asm):00950         * dictionary match is case sensitive or not.
                      (        forth.asm):00951         * Important note: if the word is found TOKENEP will be copied to TOKENSP.
E49D 9E02             (        forth.asm):00952 (4)     SWDIC   ldx     TOKENSP
E49F BDE397           (        forth.asm):00953 (7)             jsr     SCNETOK         B has CURTOKL, update TOKENEP
E4A2 9E08             (        forth.asm):00954 (4)     SWDIC1  ldx     DICEND          Entry point for the ANSI FIND
E4A4 9F1A             (        forth.asm):00955 (4)             stx     VLPRVEP         Last dictionary entry code address + 1
E4A6 9E02             (        forth.asm):00956 (4)             ldx     TOKENSP
E4A8 109E06           (        forth.asm):00957 (5)             ldy     LSTWAD          Latest word header address to Y
E4AB 2606             (        forth.asm):00958 (3)     @swrdc0 bne     @swrdc1
E4AD 1FC2             (        forth.asm):00959 (4)             tfr     0,y             Word not found. Z is set
E4AF 109F0E           (        forth.asm):00960 (5)             sty     PLOAD
E4B2 39               (        forth.asm):00961 (4)             rts
E4B3 A6A4             (        forth.asm):00962 (4+0)   @swrdc1 lda     ,y              Word attribute to A
E4B5 841F             (        forth.asm):00963 (2)             anda    #WRLNMSK        Extract word length
E4B7 3420             (        forth.asm):00964 (4+2)           pshs    y
E4B9 103789           (        forth.asm):00965 (4)             cmpr    a,b             Word length match?
E4BC 2638             (        forth.asm):00966 (3)             bne     @swrdc3         No, point to next dictionary entry
E4BE 3121             (        forth.asm):00967 (4+1)           leay    1,y
E4C0 A6A0             (        forth.asm):00968 (4+1)   @swrdc2 lda     ,y+
                      (        forth.asm):00969                 IFNE    CSSNTVE
                      (        forth.asm):00970                 cmpa    ,x+             Case sensitive dictionary
                      (        forth.asm):00971                 ELSE
E4C2 1F9E             (        forth.asm):00972 (4)             tfr     b,e             Case insensitive search (preferred)
E4C4 E680             (        forth.asm):00973 (4+1)           ldb     ,x+
E4C6 C161             (        forth.asm):00974 (2)             cmpb    #'a
E4C8 2506             (        forth.asm):00975 (3)             bcs     @nochg
E4CA C17B             (        forth.asm):00976 (2)             cmpb    #'z+1
E4CC 2402             (        forth.asm):00977 (3)             bcc     @nochg
E4CE C020             (        forth.asm):00978 (2)             subb    #'a-'A
E4D0 103789           (        forth.asm):00979 (4)     @nochg  cmpr    a,b
E4D3 1FE9             (        forth.asm):00980 (4)             tfr     e,b
                      (        forth.asm):00981                 ENDC                    CSSNTVE
E4D5 261F             (        forth.asm):00982 (3)             bne     @swrdc3
E4D7 5A               (        forth.asm):00983 (1)             decb
E4D8 26E6             (        forth.asm):00984 (3)             bne     @swrdc2
                      (        forth.asm):00985         * Word match!
E4DA 3510             (        forth.asm):00986 (4+2)           puls    x
E4DC E684             (        forth.asm):00987 (4+0)           ldb     ,x              Word attribute byte to B
E4DE 4F               (        forth.asm):00988 (1)             clra
E4DF 58               (        forth.asm):00989 (1)             lslb                    Bit 7 to CFLAG
E4E0 49               (        forth.asm):00990 (1)             rola                    CFLAG to A
E4E1 9744             (        forth.asm):00991 (3)             sta     IMDFLG          Set IMMEDIATE flag
E4E3 4F               (        forth.asm):00992 (1)             clra
E4E4 58               (        forth.asm):00993 (1)             lslb                    Bit 6 to CFLAG
E4E5 49               (        forth.asm):00994 (1)             rola                    CFLAG to A
E4E6 9745             (        forth.asm):00995 (3)             sta     DEFFLG          Set DEFINE (compilation only) flag
E4E8 9E04             (        forth.asm):00996 (4)             ldx     TOKENEP
E4EA 9F02             (        forth.asm):00997 (4)             stx     TOKENSP
                      (        forth.asm):00998                 IFNE    RELFEAT
                      (        forth.asm):00999                 leay    3,y             Skip back pointer and checksum. Return XT
                      (        forth.asm):01000                 ELSE
E4EC 3122             (        forth.asm):01001 (4+1)           leay    2,y             Skip back pointer. Return XT
                      (        forth.asm):01002                 ENDC                    RELFEAT
E4EE DC1A             (        forth.asm):01003 (4)             ldd     VLPRVEP
E4F0 103220           (        forth.asm):01004 (4)             subr    y,d
E4F3 DD0E             (        forth.asm):01005 (4)             std     PLOAD
E4F5 39               (        forth.asm):01006 (4)             rts                     NZ since there is no zero payload word
E4F6 3520             (        forth.asm):01007 (4+2)   @swrdc3 puls    y
E4F8 109F1A           (        forth.asm):01008 (5)             sty     VLPRVEP
E4FB 4F               (        forth.asm):01009 (1)             clra
E4FC E6A0             (        forth.asm):01010 (4+1)           ldb     ,y+
E4FE C41F             (        forth.asm):01011 (2)             andb    #WRLNMSK
E500 31AB             (        forth.asm):01012 (4+2)           leay    d,y
E502 9E02             (        forth.asm):01013 (4)             ldx     TOKENSP
E504 D642             (        forth.asm):01014 (3)             ldb     CURTOKL
E506 10AEA4           (        forth.asm):01015 (6+0)           ldy     ,y              Point to previous word header
E509 20A0             (        forth.asm):01016 (3)             bra     @swrdc0
                      (        forth.asm):01017         
                      (        forth.asm):01018         * Create new dictionary entry. The word name being created is acquired from
                      (        forth.asm):01019         * the input stream. Warning, this requires a writable dictionary!
                      (        forth.asm):01020         * The new end of the dictionary is returned in Y. W is preserved.
E50B 1038             (        forth.asm):01021 (6)     LOCWRT  pshsw
E50D 9E08             (        forth.asm):01022 (4)             ldx     DICEND
                      (        forth.asm):01023                 IFNE    DEBUG
                      (        forth.asm):01024                 cmpx    #ROMSTRT
                      (        forth.asm):01025                 bcs     @locwr0
                      (        forth.asm):01026                 ldb     #10             Assertion failure (trying to write to ROM!)
                      (        forth.asm):01027                 jsr     ERRHDLR         No return
E50F                  (        forth.asm):01028         LWAFRA  equ     *
E50F                  (        forth.asm):01029         @locwr0
                      (        forth.asm):01030                 ENDC                    DEBUG
E50F 9F0C             (        forth.asm):01031 (4)             stx     BDICEND         Back pointer up
E511 9E06             (        forth.asm):01032 (4)             ldx     LSTWAD
E513 9F0A             (        forth.asm):01033 (4)             stx     BLSTWAD         Back pointer up
E515 BDE86F           (        forth.asm):01034 (7)             jsr     BKIN2PT         Derive X from BLK, >IN
E518 BDE384           (        forth.asm):01035 (7)             jsr     SCNSTOK         Locate token starting address
E51B 2605             (        forth.asm):01036 (3)             bne     @locwr1
E51D C605             (        forth.asm):01037 (2)             ldb     #5              EOIS condition recognized: missing word name
E51F BDE74C           (        forth.asm):01038 (7)             jsr     ERRHDLR         No return
     E522             (        forth.asm):01039         LWMNRA  equ     *               LOCWRT missing word name return address
E522 BDE397           (        forth.asm):01040 (7)     @locwr1 jsr     SCNETOK         X has TOKENEP, B has CURTOKL
E525 109E02           (        forth.asm):01041 (5)             ldy     TOKENSP
E528 103221           (        forth.asm):01042 (4)             subr    y,x
E52B 3410             (        forth.asm):01043 (4+2)           pshs    x               Word length to the system stack
E52D 9E08             (        forth.asm):01044 (4)             ldx     DICEND
E52F A661             (        forth.asm):01045 (4+1)           lda     1,s             Word length LSB in the system stack
E531 8120             (        forth.asm):01046 (2)             cmpa    #1+WRLNMSK      Max word length is 31, 79-STANDARD compliant
E533 2505             (        forth.asm):01047 (3)             blo     @locwr2
E535 C610             (        forth.asm):01048 (2)             ldb     #16             Word name is too long
E537 BDE74C           (        forth.asm):01049 (7)             jsr     ERRHDLR         No return
     E53A             (        forth.asm):01050         WTOOLNG equ     *
E53A A780             (        forth.asm):01051 (4+1)   @locwr2 sta     ,x+             Word length to dictionary
E53C 10A6E1           (        forth.asm):01052 (6+2)           ldw     ,s++            16-bit word length to W
E53F 1E12             (        forth.asm):01053 (5)             exg     x,y             Y points to the dictionary, X has TOKENSP
                      (        forth.asm):01054                 IFNE    CSSNTVE
                      (        forth.asm):01055                 tfm     x+,y+           Word name to dictionary, as is
                      (        forth.asm):01056                 ELSE
E541 1FF9             (        forth.asm):01057 (4)             tfr     f,b             Force dictionary entry to upper case
E543 A680             (        forth.asm):01058 (4+1)   @locwr3 lda     ,x+
E545 8161             (        forth.asm):01059 (2)             cmpa    #'a
E547 2506             (        forth.asm):01060 (3)             bcs     @locwr4
E549 817B             (        forth.asm):01061 (2)             cmpa    #'z+1
E54B 2402             (        forth.asm):01062 (3)             bcc     @locwr4
E54D 8020             (        forth.asm):01063 (2)             suba    #'a-'A          To upper case
E54F A7A0             (        forth.asm):01064 (4+1)   @locwr4 sta     ,y+
E551 5A               (        forth.asm):01065 (1)             decb
E552 26EF             (        forth.asm):01066 (3)             bne     @locwr3
                      (        forth.asm):01067                 ENDC                    CSSNTVE
E554 1F10             (        forth.asm):01068 (4)             tfr     x,d
E556 BDE161           (        forth.asm):01069 (7)             jsr     U2INFRD         Derive >IN from D
E559 9E06             (        forth.asm):01070 (4)             ldx     LSTWAD
E55B AFA1             (        forth.asm):01071 (5+2)           stx     ,y++            Back pointer to dictionary
                      (        forth.asm):01072                 IFNE    RELFEAT
                      (        forth.asm):01073                 clr     ,y+             Initialize the checksum header field
                      (        forth.asm):01074                 ENDC                    RELFEAT
E55D 109F08           (        forth.asm):01075 (5)             sty     DICEND
E560 109F12           (        forth.asm):01076 (5)             sty     RECADDR         Should we resort to recursion later on
E563 1039             (        forth.asm):01077 (6)             pulsw
E565 39               (        forth.asm):01078 (4)             rts
                      (        forth.asm):01079         
                      (        forth.asm):01080         * Compile 'ldx  #X; jsr NPUSH'.
                      (        forth.asm):01081         * DICEND is updated and returned in Y.
E566 109E08           (        forth.asm):01082 (5)     LITER   ldy     DICEND
E569 868E             (        forth.asm):01083 (2)             lda     #LDXOPC         LDX immediate
E56B 8D10             (        forth.asm):01084 (6)             bsr     VARCON2
E56D 86BD             (        forth.asm):01085 (2)             lda     #JSROPC         JSR extended
E56F 109F14           (        forth.asm):01086 (5)             sty     JSRLAST         JSRLAST points to the latest JSR code emission
E572 8D06             (        forth.asm):01087 (6)             bsr     VARCON1
E574 109F08           (        forth.asm):01088 (5)             sty     DICEND
E577 39               (        forth.asm):01089 (4)             rts
                      (        forth.asm):01090         
                      (        forth.asm):01091         * Compile 'jmp  NPUSH'.
                      (        forth.asm):01092         * Y points to the end of the dictionary on entry and on exit.
E578 867E             (        forth.asm):01093 (2)     VARCON  lda     #JMPOPC         JMP extended
E57A 8EE7DB           (        forth.asm):01094 (3)     VARCON1 ldx     #NPUSH
E57D A7A0             (        forth.asm):01095 (4+1)   VARCON2 sta     ,y+
E57F AFA1             (        forth.asm):01096 (5+2)           stx     ,y++
E581 39               (        forth.asm):01097 (4)             rts
                      (        forth.asm):01098         
                      (        forth.asm):01099         * Used by U<, U>, <, >.
E582 BDE9D0           (        forth.asm):01100 (7)     CMP2    jsr     MIN2PST         At least 2 cells must be stacked up
E585 10AEC4           (        forth.asm):01101 (6+0)   CMP2RA  ldy     ,u
E588 AE42             (        forth.asm):01102 (5+1)           ldx     2,u
E58A 103721           (        forth.asm):01103 (4)             cmpr    y,x
E58D 1FA9             (        forth.asm):01104 (4)             tfr     cc,b
                      (        forth.asm):01105                 IFNE    DEBUG
                      (        forth.asm):01106                 clra
                      (        forth.asm):01107                 std     CCREG
                      (        forth.asm):01108                 ENDC                    DEBUG
E58F 1FC1             (        forth.asm):01109 (4)             tfr     0,x
E591 3344             (        forth.asm):01110 (4+1)           leau    4,u
E593 1F9A             (        forth.asm):01111 (4)             tfr     b,cc
E595 39               (        forth.asm):01112 (4)             rts
                      (        forth.asm):01113         
                      (        forth.asm):01114         * Used by CMOVE, CMOVE>, MOVE.
E596 BDE9D5           (        forth.asm):01115 (7)     ACQMOVP jsr     MIN3PST         At least 3 cells must be stacked up
E599 10A6C4           (        forth.asm):01116 (6+0)   ACQVMRA ldw     ,u              Byte count
E59C 10AE42           (        forth.asm):01117 (6+1)           ldy     2,u             Destination address
E59F AE44             (        forth.asm):01118 (5+1)           ldx     4,u             Source address
E5A1 3346             (        forth.asm):01119 (4+1)           leau    6,u             Drop 3 cells from the user stack
E5A3 39               (        forth.asm):01120 (4)             rts
                      (        forth.asm):01121         
                      (        forth.asm):01122         * FDCTSYM enveadours to match the address stored in Y to a dictionary entry.
                      (        forth.asm):01123         * Upon a successful flexible match, it will output a string in the form of
                      (        forth.asm):01124         * <wordname>+<offset> to the string pointed to by X. <wordname> refers to the
                      (        forth.asm):01125         * code entry point of the matched word. <offset> will be expressed in hex.
                      (        forth.asm):01126         * If a match is found, Z will be clear, otherwise it will be set.
                      (        forth.asm):01127         * A candidate for a word code address must meet the following criteria:
                      (        forth.asm):01128         * ((Y U>= #EBUFS) AND (Y U< #THEEND)) OR ((Y U>= #WDICSPC) AND (Y U< DICEND)).
                      (        forth.asm):01129         * Upon return:
                      (        forth.asm):01130         * - the string pointed to by X will updated with its symbolic match
                      (        forth.asm):01131         *   (NUL terminated), if there is one. X itself might have been altered.
                      (        forth.asm):01132         * - Y should be preserved.
                      (        forth.asm):01133         * EBUFS (EMPTY-BUFFERS) header address is the last word in the dictionary.
                      (        forth.asm):01134                 IFNE    SSDFEAT
E5A4 3430             (        forth.asm):01135 (4+4)   FDCTSYM pshs    y,x     
E5A6 1F21             (        forth.asm):01136 (4)             tfr     y,x             Potential execution token to X
E5A8 8CE9DF           (        forth.asm):01137 (3)             cmpx    #EBUFS
E5AB 2505             (        forth.asm):01138 (3)             blo     @fdstr2 
E5AD 8CFE19           (        forth.asm):01139 (3)             cmpx    #THEEND
E5B0 250D             (        forth.asm):01140 (3)             blo     @fdsmtc
E5B2 8C0D80           (        forth.asm):01141 (3)     @fdstr2 cmpx    #WDICSPC        Term 2 of the predicate for a valid word addr
E5B5 2504             (        forth.asm):01142 (3)             blo     @fdsnom
E5B7 9C08             (        forth.asm):01143 (4)             cmpx    DICEND
E5B9 2504             (        forth.asm):01144 (3)             blo     @fdsmtc
E5BB 4F               (        forth.asm):01145 (1)     @fdsnom clra                    No match (Z is set)
E5BC 3530             (        forth.asm):01146 (4+4)           puls    x,y
E5BE 39               (        forth.asm):01147 (4)             rts
E5BF 9E06             (        forth.asm):01148 (4)     @fdsmtc ldx     LSTWAD          Potential match. Scan upward from LAST
                      (        forth.asm):01149         * X points to the latest word header, Y has an execution token.
E5C1 109608           (        forth.asm):01150 (5)             ldw     DICEND          W points to the end of the code section
E5C4 3410             (        forth.asm):01151 (4+2)   @fdslop pshs    x               Pointer to the current word header
E5C6 E680             (        forth.asm):01152 (4+1)           ldb     ,x+
E5C8 C41F             (        forth.asm):01153 (2)             andb    #WRLNMSK
E5CA 3A               (        forth.asm):01154 (1)             abx                     Skip word name string
E5CB EC81             (        forth.asm):01155 (5+2)           ldd     ,x++            Backlink to D
                      (        forth.asm):01156                 IFNE    RELFEAT
                      (        forth.asm):01157                 leax    1,x             Skip the checksum
                      (        forth.asm):01158                 ENDC                    RELFEAT
E5CD 103712           (        forth.asm):01159 (4)             cmpr    x,y
E5D0 2530             (        forth.asm):01160 (3)             blo     @fdsnwd
E5D2 103762           (        forth.asm):01161 (4)             cmpr    w,y
E5D5 222B             (        forth.asm):01162 (3)             bhi     @fdsnwd         An equal address is allowed here, in case
                      (        forth.asm):01163         * jsr ERRHDLR is the last instruction for the word under consideration.
                      (        forth.asm):01164         * This happens to be the case for FORGET and LPAR.
                      (        forth.asm):01165         * Y matches the code range for the current word.
E5D7 3510             (        forth.asm):01166 (4+2)           puls    x
E5D9 E680             (        forth.asm):01167 (4+1)           ldb     ,x+
E5DB C41F             (        forth.asm):01168 (2)             andb    #WRLNMSK
E5DD 1F9F             (        forth.asm):01169 (4)             tfr     b,f
E5DF 114F             (        forth.asm):01170 (2)             clre                    W has the matched word length
E5E1 10AEE4           (        forth.asm):01171 (6+0)           ldy     ,s              Y points to the target buffer
E5E4 113812           (        forth.asm):01172 (6+?)           tfm     x+,y+
E5E7 6FA4             (        forth.asm):01173 (6+0)           clr     ,y              We need this in case the offset is zero
                      (        forth.asm):01174         * Offset processing.
                      (        forth.asm):01175                 IFNE    RELFEAT
                      (        forth.asm):01176                 leax    3,x             Skip backlink and checksum
                      (        forth.asm):01177                 ELSE
E5E9 3002             (        forth.asm):01178 (4+1)           leax    2,x             Skip backlink
                      (        forth.asm):01179                 ENDC                    RELFEAT
E5EB EC62             (        forth.asm):01180 (5+1)           ldd     2,s             Execution token to D
E5ED 103210           (        forth.asm):01181 (4)             subr    x,d             Offset between XT and word entry point to D
E5F0 270B             (        forth.asm):01182 (3)             beq     @skoffs         Skip displaying the offset if it is zero
E5F2 3402             (        forth.asm):01183 (4+1)           pshs    a               Preserve the offset's MSB
E5F4 862B             (        forth.asm):01184 (2)             lda     #'+
E5F6 A7A0             (        forth.asm):01185 (4+1)           sta     ,y+
E5F8 3502             (        forth.asm):01186 (4+1)           puls    a               Restore the offset's MSB
E5FA BDE192           (        forth.asm):01187 (7)             jsr     HDMP4           Dump hex incarnation of the offset to Y
E5FD 3530             (        forth.asm):01188 (4+4)   @skoffs puls    x,y
E5FF 1CFB             (        forth.asm):01189 (2)             andcc   #^ZFLAG         Clear ZFLAG
E601 39               (        forth.asm):01190 (4)             rts
                      (        forth.asm):01191         * Point to the next word.
E602 1039             (        forth.asm):01192 (6)     @fdsnwd pulsw                   Retrieve current word header address
E604 104D             (        forth.asm):01193 (2)             tstd
E606 27B3             (        forth.asm):01194 (3)             beq     @fdsnom         Just met the last dictionary entry
E608 1F01             (        forth.asm):01195 (4)             tfr     d,x             Point to previous word header
E60A 10810D80         (        forth.asm):01196 (4)             cmpw    #WDICSPC        Are we transitioning from RAM to ROM?
E60E 26B4             (        forth.asm):01197 (3)             bne     @fdslop         No singularity
E610 1086FE19         (        forth.asm):01198 (4)             ldw     #THEEND         Won't be able to diagnose the ROM based @...
E614 20AE             (        forth.asm):01199 (3)             bra     @fdslop
                      (        forth.asm):01200         
                      (        forth.asm):01201         * Find the best possible symbolic approximation of Y and store it to the
                      (        forth.asm):01202         * buffer pointed to by X.
                      (        forth.asm):01203         * On entry:
                      (        forth.asm):01204         * - Y has a code address which is to be matched with a symbolic name + offset.
                      (        forth.asm):01205         * - X points to a buffer where the resolution is to be stored.
                      (        forth.asm):01206         * On return:
                      (        forth.asm):01207         * - Y is to be preserved.
                      (        forth.asm):01208         * - the output buffer will be updated with the best symbolic match (NUL term'd).
E616 3430             (        forth.asm):01209 (4+4)   FINDSYM pshs    y,x
E618 8D8A             (        forth.asm):01210 (6)             bsr     FDCTSYM         Search the dictionary first (flexible match)
E61A 261B             (        forth.asm):01211 (3)             bne     @dctmfn         Dictionary match found
E61C 8EE63C           (        forth.asm):01212 (3)             ldx     #NDCTWKS        Search kernel symbols for an exact match
E61F EC81             (        forth.asm):01213 (5+2)   @fsmlop ldd     ,x++
E621 270B             (        forth.asm):01214 (3)             beq     @fsmfnd         End of well known symbols list?
E623 103720           (        forth.asm):01215 (4)             cmpr    y,d
E626 2706             (        forth.asm):01216 (3)             beq     @fsmfnd
                      (        forth.asm):01217         * No well known symbol match. Skip string.
E628 A680             (        forth.asm):01218 (4+1)   @fsmskp lda     ,x+
E62A 26FC             (        forth.asm):01219 (3)             bne     @fsmskp
E62C 20F1             (        forth.asm):01220 (3)             bra     @fsmlop
E62E 10AEE4           (        forth.asm):01221 (6+0)   @fsmfnd ldy     ,s
E631 A680             (        forth.asm):01222 (4+1)   @fsmfn2 lda     ,x+
E633 A7A0             (        forth.asm):01223 (4+1)           sta     ,y+
E635 26FA             (        forth.asm):01224 (3)             bne     @fsmfn2
E637 3262             (        forth.asm):01225 (4+1)   @dctmfn leas    2,s             Drop X from the system stack
E639 3520             (        forth.asm):01226 (4+2)           puls    y
E63B 39               (        forth.asm):01227 (4)             rts
                      (        forth.asm):01228         
                      (        forth.asm):01229         * Non-dictionary well known symbols.
E63C E000             (        forth.asm):01230         NDCTWKS fdb     IODZHDL         Illegal opcode/Division by zero trap handler
E63E 494F445A48444C00 (        forth.asm):01231                 fcn     'IODZHDL'
E646 E7FA             (        forth.asm):01232                 fdb     DPOPRA          Data stack underflow
E648 44504F50524100   (        forth.asm):01233                 fcn     'DPOPRA'
E64F E7E8             (        forth.asm):01234                 fdb     DPSHRA          Data stack overflow
E651 44505348524100   (        forth.asm):01235                 fcn     'DPSHRA'
E658 E830             (        forth.asm):01236                 fdb     RPOPRA          Return stack underflow
E65A 52504F50524100   (        forth.asm):01237                 fcn     'RPOPRA'
E661 E816             (        forth.asm):01238                 fdb     RPSHRA          Return stack overflow
E663 52505348524100   (        forth.asm):01239                 fcn     'RPSHRA'
E66A E74C             (        forth.asm):01240                 fdb     ERRHDLR         Error handler
E66C 45525248444C5200 (        forth.asm):01241                 fcn     'ERRHDLR'
E674 E9CB             (        forth.asm):01242                 fdb     CKDPTRA         Not enough parameters supplied
E676 434B445054524100 (        forth.asm):01243                 fcn     'CKDPTRA'
E67E E9C0             (        forth.asm):01244                 fdb     CHKNDPT         Check data stack minimum depth
E680 43484B4E44505400 (        forth.asm):01245                 fcn     'CHKNDPT'
E688 E585             (        forth.asm):01246                 fdb     CMP2RA          Missing operand in any of U<, U>, <, >
E68A 434D5032524100   (        forth.asm):01247                 fcn     'CMP2RA'
E691 E599             (        forth.asm):01248                 fdb     ACQVMRA         Three operands missing in any of CMOVE,
                      (        forth.asm):01249         *                               CMOVE>, MOVE
E693 414351564D524100 (        forth.asm):01250                 fcn     'ACQVMRA'
E69B E0BD             (        forth.asm):01251                 fdb     MINTLRA         Main interpreter loop return address
E69D 4D494E544C524100 (        forth.asm):01252                 fcn     'MINTLRA'
E6A5 E44E             (        forth.asm):01253                 fdb     NUMCVRA         ? while converting a string to a number
E6A7 4E554D4356524100 (        forth.asm):01254                 fcn     'NUMCVRA'
E6AF E0D0             (        forth.asm):01255                 fdb     NMCVIRA         Numeric conversion error while interpreting
E6B1 4E4D435649524100 (        forth.asm):01256                 fcn     'NMCVIRA'
E6B9 E139             (        forth.asm):01257                 fdb     NMCVCRA         Numeric conversion error while compiling
E6BB 4E4D435643524100 (        forth.asm):01258                 fcn     'NMCVCRA'
E6C3 E0FB             (        forth.asm):01259                 fdb     INTRPRA         Interpreter RA (after the execution of a word)
E6C5 494E545250524100 (        forth.asm):01260                 fcn     'INTRPRA'
E6CD E127             (        forth.asm):01261                 fdb     COMPLRA         Compiler RA (after the execution of an IMD word)
E6CF 434F4D504C524100 (        forth.asm):01262                 fcn     'COMPLRA'
E6D7 E152             (        forth.asm):01263                 fdb     EMXASXT         Emit "JSR <X>" where X has an execution token
E6D9 454D584153585400 (        forth.asm):01264                 fcn     'EMXASXT'
E6E1 E522             (        forth.asm):01265                 fdb     LWMNRA          Missing word name in LOCWRT
E6E3 4C574D4E524100   (        forth.asm):01266                 fcn     'LWMNRA'
E6EA E957             (        forth.asm):01267                 fdb     CFR1SRA         CF read one sector failed
E6EC 4346523153524100 (        forth.asm):01268                 fcn     'CFR1SRA'
E6F4 E7DB             (        forth.asm):01269                 fdb     NPUSH           Not an error RA but useful to have as a symbol
E6F6 4E5055534800     (        forth.asm):01270                 fcn     'NPUSH'
E6FC E7FB             (        forth.asm):01271                 fdb     RPUSH           Not an error RA but useful to have as a symbol
E6FE 525055534800     (        forth.asm):01272                 fcn     'RPUSH'
E704 E7E9             (        forth.asm):01273                 fdb     NPOP            Not an error RA but useful to have as a symbol
E706 4E504F5000       (        forth.asm):01274                 fcn     'NPOP'
E70B E817             (        forth.asm):01275                 fdb     RPOP            Not an error RA but useful to have as a symbol
E70D 52504F5000       (        forth.asm):01276                 fcn     'RPOP'
E712 E2EA             (        forth.asm):01277                 fdb     PUTS            Not an error RA but useful to have as a symbol
E714 5055545300       (        forth.asm):01278                 fcn     'PUTS'
                      (        forth.asm):01279                 IFNE    DEBUG
                      (        forth.asm):01280                 fdb     LWAFRA          Assertion failure in LOCWRT
                      (        forth.asm):01281                 fcn     'LOCWRTAF'
                      (        forth.asm):01282                 ENDC
E719 0000             (        forth.asm):01283                 fdb     0               End of list
E71B 3F3F3F00         (        forth.asm):01284                 fcn     '???'           Admit we have no clue!
                      (        forth.asm):01285                 ENDC                    SSDFEAT
                      (        forth.asm):01286         
                      (        forth.asm):01287         * Print ' (xxxx/yyyy)' where xxxx is the hex representation for BLK @ and
                      (        forth.asm):01288         * yyyy is the hex representation for >IN @. Y is preserved, X and D are not.
E71F 3420             (        forth.asm):01289 (4+2)   PRBLKIN pshs    y
E721 108E04BC         (        forth.asm):01290 (4)             ldy     #HEXBUF
E725 8620             (        forth.asm):01291 (2)             lda     #SP
E727 A7A0             (        forth.asm):01292 (4+1)           sta     ,y+
E729 8628             (        forth.asm):01293 (2)             lda     #'(
E72B A7A0             (        forth.asm):01294 (4+1)           sta     ,y+
E72D DC2C             (        forth.asm):01295 (4)             ldd     UBLK
E72F BDE192           (        forth.asm):01296 (7)             jsr     HDMP4
E732 862F             (        forth.asm):01297 (2)             lda     #'/
E734 A7A0             (        forth.asm):01298 (4+1)           sta     ,y+
E736 DC2A             (        forth.asm):01299 (4)             ldd     UTOIN
E738 BDE192           (        forth.asm):01300 (7)             jsr     HDMP4
E73B 8629             (        forth.asm):01301 (2)             lda     #')
E73D A7A0             (        forth.asm):01302 (4+1)           sta     ,y+
E73F 6FA4             (        forth.asm):01303 (6+0)           clr     ,y
E741 8E04BC           (        forth.asm):01304 (3)             ldx     #HEXBUF
E744 BDE2EA           (        forth.asm):01305 (7)             jsr     PUTS
E747 3520             (        forth.asm):01306 (4+2)           puls    y
E749 7EE2F7           (        forth.asm):01307 (3)             jmp     PUTCR
                      (        forth.asm):01308         
                      (        forth.asm):01309         * Handle error condition. Error code is in B.
                      (        forth.asm):01310         * If B is 2 (undefined) X points to a string of length CURTOKL that has the
                      (        forth.asm):01311         * offending word.
E74C 10AEE4           (        forth.asm):01312 (6+0)   ERRHDLR ldy     ,s              Invoking return address
                      (        forth.asm):01313         * In case of a trap return, we enter here with Y set to #IODZHDL
E74F 860F             (        forth.asm):01314 (2)     ERRHD1  lda     #$0F            ASCII Shift in (restore dflt charset)
E751 BDE2D7           (        forth.asm):01315 (7)             jsr     PUTCH
E754 BDE2F7           (        forth.asm):01316 (7)             jsr     PUTCR           GNU Forth does this in its exception handler
E757 C102             (        forth.asm):01317 (2)             cmpb    #2              Undefined symbol?
E759 2618             (        forth.asm):01318 (3)             bne     @perrm          No
E75B 8627             (        forth.asm):01319 (2)             lda     #''             Begin quote
E75D BDE2D7           (        forth.asm):01320 (7)             jsr     PUTCH
E760 A680             (        forth.asm):01321 (4+1)   @prtsym lda     ,x+             Display undefined symbol name
E762 BDE2D7           (        forth.asm):01322 (7)             jsr     PUTCH
E765 0A42             (        forth.asm):01323 (5)             dec     CURTOKL
E767 26F7             (        forth.asm):01324 (3)             bne     @prtsym
E769 8627             (        forth.asm):01325 (2)             lda     #''             End quote
E76B BDE2D7           (        forth.asm):01326 (7)             jsr     PUTCH
E76E 8620             (        forth.asm):01327 (2)             lda     #SP             BL EMIT
E770 BDE2D7           (        forth.asm):01328 (7)             jsr     PUTCH
E773 8EFECA           (        forth.asm):01329 (3)     @perrm  ldx     #ERRMTBL        Regular error handling
E776 5D               (        forth.asm):01330 (1)     @nxterr tstb
E777 2637             (        forth.asm):01331 (3)             bne     @skerrm
E779 BDE2EA           (        forth.asm):01332 (7)             jsr     PUTS            Print error message
E77C 8DA1             (        forth.asm):01333 (6)             bsr     PRBLKIN         Print BLK and >IN values (in hex)
E77E 1F20             (        forth.asm):01334 (4)     @dmptos tfr     y,d             Dump top of the system stack contents
                      (        forth.asm):01335                 IFNE    SSDFEAT
E780 3406             (        forth.asm):01336 (4+2)           pshs    d
                      (        forth.asm):01337                 ENDC                    SSDFEAT
E782 108E04BC         (        forth.asm):01338 (4)             ldy     #HEXBUF
E786 BDE192           (        forth.asm):01339 (7)             jsr     HDMP4
E789 8620             (        forth.asm):01340 (2)             lda     #SP
E78B A7A0             (        forth.asm):01341 (4+1)           sta     ,y+
                      (        forth.asm):01342         * Symbolic stack dumps are configurable. In situations where the dictionary is
                      (        forth.asm):01343         * trashed, they may not be considered desirable. See SSDFEAT in constants.asm.
                      (        forth.asm):01344                 IFNE    SSDFEAT
E78D 1F21             (        forth.asm):01345 (4)             tfr     y,x             X has the buffer pointer
E78F 3520             (        forth.asm):01346 (4+2)           puls    y               Restore target symbol table entry
E791 BDE616           (        forth.asm):01347 (7)             jsr     FINDSYM
                      (        forth.asm):01348                 ELSE
                      (        forth.asm):01349                 clr     ,y              No symbolic information is to be printed
                      (        forth.asm):01350                 ENDC                    SSDFEAT
E794 8E04BC           (        forth.asm):01351 (3)             ldx     #HEXBUF
E797 BDE2EA           (        forth.asm):01352 (7)             jsr     PUTS
E79A BDE2F7           (        forth.asm):01353 (7)             jsr     PUTCR
E79D 108CE000         (        forth.asm):01354 (4)             cmpy    #IODZHDL
E7A1 2702             (        forth.asm):01355 (3)             beq     @wastrp         We're just back from the trap handler
E7A3 3262             (        forth.asm):01356 (4+1)           leas    2,s             Point to the next item on the stack
E7A5 118C8000         (        forth.asm):01357 (4)     @wastrp cmps    #RAMSTRT+RAMSIZE
E7A9 240C             (        forth.asm):01358 (3)             bhs     @errdon         We're done here
E7AB 10AEE4           (        forth.asm):01359 (6+0)           ldy     ,s
E7AE 20CE             (        forth.asm):01360 (3)             bra     @dmptos
E7B0 A680             (        forth.asm):01361 (4+1)   @skerrm lda     ,x+             Scan for the next error message
E7B2 26FC             (        forth.asm):01362 (3)             bne     @skerrm
E7B4 5A               (        forth.asm):01363 (1)             decb
E7B5 20BF             (        forth.asm):01364 (3)             bra     @nxterr
E7B7 10CE8000         (        forth.asm):01365 (4)     @errdon lds     #RAMSTRT+RAMSIZE
E7BB 0D25             (        forth.asm):01366 (4)             tst     USTATE+1        We do ignore the upper byte
E7BD 2710             (        forth.asm):01367 (3)             beq     @erdon2         No pointers to restore if we were interpreting
                      (        forth.asm):01368         * We were compiling: clear STATE; restore DICEND and LSTWAD, if not :NONAME.
E7BF 0F25             (        forth.asm):01369 (5)             clr     USTATE+1        Switch back to interpretation mode
E7C1 9E0C             (        forth.asm):01370 (4)             ldx     BDICEND         Restore essential pointers from backups
E7C3 9F08             (        forth.asm):01371 (4)             stx     DICEND          Restore HERE
E7C5 0D34             (        forth.asm):01372 (4)             tst     ANCMPF
E7C7 2604             (        forth.asm):01373 (3)             bne     @clrano
E7C9 9E0A             (        forth.asm):01374 (4)             ldx     BLSTWAD
E7CB 9F06             (        forth.asm):01375 (4)             stx     LSTWAD          Restore LAST
E7CD 0F34             (        forth.asm):01376 (5)     @clrano clr     ANCMPF
E7CF BDEBF8           (        forth.asm):01377         @erdon2 RFXT    jsr,RCLR+7      Clear the return stack and
E7D2 BDEBED           (        forth.asm):01378                 RFXT    jsr,NCLR+7      the control flow stack (moved here from ABORT)
E7D5 BDFBED           (        forth.asm):01379                 RFXT    jsr,DECIMAL+10  Back to decimal BASE, for one's sanity sake!
E7D8 7EE0B2           (        forth.asm):01380 (3)             jmp     INTERP
                      (        forth.asm):01381         
                      (        forth.asm):01382         * Push X to the data stack (boundary is checked).
E7DB 1183023A         (        forth.asm):01383 (4)     NPUSH   cmpu    #NSTTOP
E7DF 2303             (        forth.asm):01384 (3)             bls     @npush1         Anything <= than #NSTTOP indicates overflow
E7E1 3610             (        forth.asm):01385 (4+2)           pshu    x               Aka UCNPUSH
E7E3 39               (        forth.asm):01386 (4)             rts
E7E4 5F               (        forth.asm):01387 (1)     @npush1 clrb                    Data stack overflow
E7E5 BDE74C           (        forth.asm):01388 (7)             jsr     ERRHDLR         No return
     E7E8             (        forth.asm):01389         DPSHRA  equ     *
E7E8 12               (        forth.asm):01390 (1)             nop
                      (        forth.asm):01391         
                      (        forth.asm):01392         * Pull X from the data stack (boundary is checked).
                      (        forth.asm):01393         * D, W and Y are preserved.
E7E9 1183033A         (        forth.asm):01394 (4)     NPOP    cmpu    #NSTBOT
E7ED 2406             (        forth.asm):01395 (3)             bhs     @npop1          Anything >= than #NSTBOT indicates underflow
E7EF 3710             (        forth.asm):01396 (4+2)           pulu    x
E7F1 1037C1           (        forth.asm):01397 (4)             cmpr    0,x             Update CC based on the outcome
E7F4 39               (        forth.asm):01398 (4)             rts
E7F5 C601             (        forth.asm):01399 (2)     @npop1  ldb     #1              Data stack underflow
E7F7 BDE74C           (        forth.asm):01400 (7)             jsr     ERRHDLR         No return
     E7FA             (        forth.asm):01401         DPOPRA  equ     *
E7FA 12               (        forth.asm):01402 (1)             nop
                      (        forth.asm):01403         
                      (        forth.asm):01404         * Push X to the return stack (boundary is checked).
E7FB 9637             (        forth.asm):01405 (3)     RPUSH   lda     RDEPTH          RDEPTH is expressed in cells
E7FD 817F             (        forth.asm):01406 (2)             cmpa    #RSTKSZ/2       But RSTKZ is expressed in bytes
E7FF 2710             (        forth.asm):01407 (3)             beq     @rpush1
E801 4C               (        forth.asm):01408 (1)             inca
E802 9737             (        forth.asm):01409 (3)             sta     RDEPTH
E804 1F27             (        forth.asm):01410 (4)             tfr     y,v
E806 109E00           (        forth.asm):01411 (5)             ldy     RSP
E809 AFA3             (        forth.asm):01412 (5+2)           stx     ,--y
E80B 109F00           (        forth.asm):01413 (5)             sty     RSP
E80E 1F72             (        forth.asm):01414 (4)             tfr     v,y
E810 39               (        forth.asm):01415 (4)             rts
E811 C607             (        forth.asm):01416 (2)     @rpush1 ldb     #7              Return stack overflow
E813 BDE74C           (        forth.asm):01417 (7)             jsr     ERRHDLR         No return
     E816             (        forth.asm):01418         RPSHRA  equ     *
E816 12               (        forth.asm):01419 (1)             nop                     Meant to insulate RPUSH errors from RPOP EP
                      (        forth.asm):01420         
                      (        forth.asm):01421         * Pull X from the return stack (boundary is checked).
E817 9637             (        forth.asm):01422 (3)     RPOP    lda     RDEPTH          RDEPTH is expressed in cells
E819 2710             (        forth.asm):01423 (3)             beq     @rpop1
E81B 4A               (        forth.asm):01424 (1)             deca
E81C 9737             (        forth.asm):01425 (3)             sta     RDEPTH
E81E 1F27             (        forth.asm):01426 (4)             tfr     y,v
E820 109E00           (        forth.asm):01427 (5)             ldy     RSP
E823 AEA1             (        forth.asm):01428 (5+2)           ldx     ,y++
E825 109F00           (        forth.asm):01429 (5)             sty     RSP
E828 1F72             (        forth.asm):01430 (4)             tfr     v,y
E82A 39               (        forth.asm):01431 (4)             rts
E82B C608             (        forth.asm):01432 (2)     @rpop1  ldb     #8              Return stack underflow
E82D BDE74C           (        forth.asm):01433 (7)             jsr     ERRHDLR         No return
     E830             (        forth.asm):01434         RPOPRA  equ     *
                      (        forth.asm):01435         
E830 0D35             (        forth.asm):01436 (4)     BALCHK  tst     BALNCD
E832 2601             (        forth.asm):01437 (3)             bne     BALERR
E834 39               (        forth.asm):01438 (4)             rts
E835 C609             (        forth.asm):01439 (2)     BALERR  ldb     #9              Illegal construct
E837 BDE74C           (        forth.asm):01440 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):01441         
E83A 3410             (        forth.asm):01442 (4+2)   SAVINP  pshs    x
E83C 1FC1             (        forth.asm):01443 (4)             tfr     0,x
E83E 0D4A             (        forth.asm):01444 (4)             tst     SRCID
E840 2702             (        forth.asm):01445 (3)             beq     @pushb
E842 9E20             (        forth.asm):01446 (4)             ldx     BSBFADR
E844 8DB5             (        forth.asm):01447 (6)     @pushb  bsr     RPUSH           Push 0 if SRCID is zero else BSBFADR
E846 9E2C             (        forth.asm):01448 (4)             ldx     UBLK
E848 8DB1             (        forth.asm):01449 (6)             bsr     RPUSH           Push BLK on the return stack
E84A 9E2A             (        forth.asm):01450 (4)             ldx     UTOIN
E84C 8DAD             (        forth.asm):01451 (6)             bsr     RPUSH           Push >IN on the return stack
E84E 9E26             (        forth.asm):01452 (4)             ldx     ISLEN
E850 8DA9             (        forth.asm):01453 (6)             bsr     RPUSH           Push ISLEN on the return stack
E852 3510             (        forth.asm):01454 (4+2)           puls    x
E854 39               (        forth.asm):01455 (4)             rts
                      (        forth.asm):01456         
E855 8DC0             (        forth.asm):01457 (6)     RSTINP  bsr     RPOP
E857 9F26             (        forth.asm):01458 (4)             stx     ISLEN           Restore ISLEN from the return stack
E859 8DBC             (        forth.asm):01459 (6)             bsr     RPOP
E85B 9F2A             (        forth.asm):01460 (4)             stx     UTOIN           Restore >IN from the return stack
E85D 8DB8             (        forth.asm):01461 (6)             bsr     RPOP
E85F 9F2C             (        forth.asm):01462 (4)             stx     UBLK            Restore BLK from the return stack
E861 8DB4             (        forth.asm):01463 (6)             bsr     RPOP
E863 0F4A             (        forth.asm):01464 (5)             clr     SRCID
E865 1037C1           (        forth.asm):01465 (4)             cmpr    0,x
E868 2704             (        forth.asm):01466 (3)             beq     @done
E86A 9F20             (        forth.asm):01467 (4)             stx     BSBFADR
E86C 034A             (        forth.asm):01468 (5)             com     SRCID           Set SRCID to an NZ value
E86E 39               (        forth.asm):01469 (4)     @done   rts
                      (        forth.asm):01470         
                      (        forth.asm):01471         * Derive the current input stream pointer from BLK and >IN.
                      (        forth.asm):01472         * The resulting address is returned in X. D is altered.
                      (        forth.asm):01473         * The end of input stream address is re-computed.
                      (        forth.asm):01474         * Both Y and W are preserved.
E86F 3420             (        forth.asm):01475 (4+2)   BKIN2PT pshs    y
E871 9E2C             (        forth.asm):01476 (4)             ldx     UBLK
E873 271E             (        forth.asm):01477 (3)             beq     @notblk         Back to the console or a counted string
E875 1038             (        forth.asm):01478 (6)             pshsw
E877 BDE7DB           (        forth.asm):01479 (7)             jsr     NPUSH           Make sure BLK @ is loaded
E87A BDEAF0           (        forth.asm):01480                 RFXT    jsr,BLOCK+8     XT for BLOCK
E87D 1039             (        forth.asm):01481 (6)             pulsw
E87F 3710             (        forth.asm):01482                 UCNPOP                  Retrieve buffer addr to X
E881 9F20             (        forth.asm):01483 (4)     @rsolvd stx     BSBFADR         Update base buffer address
E883 1F12             (        forth.asm):01484 (4)             tfr     x,y
E885 DC26             (        forth.asm):01485 (4)             ldd     ISLEN
E887 31AB             (        forth.asm):01486 (4+2)           leay    d,y
E889 109F28           (        forth.asm):01487 (5)             sty     ISEADDR         Update the end of input stream address
E88C 3520             (        forth.asm):01488 (4+2)           puls    y
E88E DC2A             (        forth.asm):01489 (4)             ldd     UTOIN
E890 308B             (        forth.asm):01490 (4+2)           leax    d,x             Add the current offset. Return the result via X
E892 39               (        forth.asm):01491 (4)             rts
E893 8E0438           (        forth.asm):01492 (3)     @notblk ldx     #CMDBUF         Assume we are returning to the console
E896 0D4A             (        forth.asm):01493 (4)             tst     SRCID           Are we running under EVALUATE?
E898 27E7             (        forth.asm):01494 (3)             beq     @rsolvd         No
E89A 9E20             (        forth.asm):01495 (4)             ldx     BSBFADR         We are returning to a counted string
E89C 20E3             (        forth.asm):01496 (3)             bra     @rsolvd
                      (        forth.asm):01497         
                      (        forth.asm):01498                 include rtc.asm         Experimental MC146818 support
                      (          rtc.asm):00001                 IFNE RTCFEAT
                      (          rtc.asm):00002         
                      (          rtc.asm):00003         * FIRQ handler for the MC146818 RTC.
                      (          rtc.asm):00004         * In this particular context, only D and CC might be altered.
E89E                  (          rtc.asm):00005         RTCIHDL tst     RTCAVL          RTC chip detected?
                      (          rtc.asm):00006                 beq     @notick         Nope
                      (          rtc.asm):00007                 lda     #RTOREGC        Read RTCC. INTACK if any interrupt is pending.
                      (          rtc.asm):00008         * Two intructions inlined for RTREGRD in non-preemtible (interrupt) mode.
                      (          rtc.asm):00009                 sta     RTAS
                      (          rtc.asm):00010                 ldb     RTDS
                      (          rtc.asm):00011                 andb    #RTCPF          RTC periodic interrupt pending?
                      (          rtc.asm):00012                 beq     @notick         No, this ain't us ticking
                      (          rtc.asm):00013         * From "The 6309 Book" p. 3-69: "Note that INC does not effect the carry bit."
E89E                  (          rtc.asm):00014         @inctks ldd     TIKSLOW
                      (          rtc.asm):00015                 addd    #1
                      (          rtc.asm):00016                 std     TIKSLOW
                      (          rtc.asm):00017                 ldd     TIKSHI
                      (          rtc.asm):00018                 adcd    #0
                      (          rtc.asm):00019                 std     TIKSHI
E89E                  (          rtc.asm):00020         @notick rts
                      (          rtc.asm):00021         
                      (          rtc.asm):00022         * Read one byte from an internal's RTC register whose offset is in A upon
                      (          rtc.asm):00023         * routine entry. The register contents is returned in B.
                      (          rtc.asm):00024         * No other register is altered. FIRQ is temporarily disabled.
                      (          rtc.asm):00025         * Can be called from base or interrupt level.
E89E                  (          rtc.asm):00026         RTREGRD pshs    cc
                      (          rtc.asm):00027                 orcc    #FFLAG          Mask FIRQ
                      (          rtc.asm):00028                 sta     RTAS            Select target RTC register
                      (          rtc.asm):00029                 ldb     RTDS            Read RTC register contents
                      (          rtc.asm):00030                 puls    cc              Restore previous interrupt handling mode
                      (          rtc.asm):00031                 rts
                      (          rtc.asm):00032         
                      (          rtc.asm):00033         * Write one byte to an internal's RTC register whose offset is in A upon
                      (          rtc.asm):00034         * routine entry. The register byte output value is in B upon entry.
                      (          rtc.asm):00035         * FIRQ is temporarily masked. All regs contents are preserved.
                      (          rtc.asm):00036         * Can be called from base or interrupt level.
E89E                  (          rtc.asm):00037         RTREGWR pshs    cc
                      (          rtc.asm):00038                 orcc    #FFLAG          Mask FIRQ
                      (          rtc.asm):00039                 sta     RTAS            Select target RTC register
                      (          rtc.asm):00040                 stb     RTDS            Write RTC register contents
                      (          rtc.asm):00041                 puls    cc              Restore previous interrupt handling mode
                      (          rtc.asm):00042                 rts
                      (          rtc.asm):00043         
                      (          rtc.asm):00044         * Detect if an MC146818 chip is present.
E89E                  (          rtc.asm):00045         RTCINIT
                      (          rtc.asm):00046                 IFNE    DEBUG
                      (          rtc.asm):00047                 clrd
                      (          rtc.asm):00048                 std     TIKSHI          Initialize the TICKS double cell
                      (          rtc.asm):00049                 std     TIKSLOW
                      (          rtc.asm):00050                 clr     RTCAVL          Assume chip not present
                      (          rtc.asm):00051                 ENDC
                      (          rtc.asm):00052                 lda     #RTOPRES        Offset to the last NVRAM byte if dev is present
                      (          rtc.asm):00053                 bsr     RTREGRD         Read user memory byte. Value is returned in B   
                      (          rtc.asm):00054                 comb                    One's complement to B
                      (          rtc.asm):00055                 pshs    b
                      (          rtc.asm):00056                 bsr     RTREGWR         Write back one's complement to RTC
                      (          rtc.asm):00057                 bsr     RTREGRD         And read the last NVRAM byte back
                      (          rtc.asm):00058                 puls    a
                      (          rtc.asm):00059                 cmpr    b,a             Match?
                      (          rtc.asm):00060                 beq     @rtdtct         RTC chip detected all right!
                      (          rtc.asm):00061                 rts
                      (          rtc.asm):00062         * MC146818 RTC chip detected.
                      (          rtc.asm):00063         * On power up if register RTCA reads as 0, the SET bit in register RTCB will
                      (          rtc.asm):00064         * prevent any updates to the calendar (date/time). We do preserve the state of
                      (          rtc.asm):00065         * the SET bit, so as to indicate to the application software that the time and
                      (          rtc.asm):00066         * date have yet to be set manually.
E89E                  (          rtc.asm):00067         @rtdtct lda     #RTOREGA
                      (          rtc.asm):00068                 ldb     #(RTADV32|RTARS64)
                      (          rtc.asm):00069                 bsr     RTREGWR         Write B to the RTCA register
                      (          rtc.asm):00070                 lda     #RTOREGB
                      (          rtc.asm):00071                 bsr     RTREGRD
                      (          rtc.asm):00072                 andb    #RTBSET         Extract the SET bit
                      (          rtc.asm):00073                 orb     #(RTBPIE|RTBDM|RTB24)
                      (          rtc.asm):00074                 bsr     RTREGWR         Write B to the RTCB register
                      (          rtc.asm):00075                 inc     RTCAVL
                      (          rtc.asm):00076                 ldx     #RTPRESM        Real time clock detected message base address
                      (          rtc.asm):00077                 jmp     PUTS            Out to the console
                      (          rtc.asm):00078         
                      (          rtc.asm):00079                 ENDC                    RTCFEAT
                      (          rtc.asm):00080         
                      (        forth.asm):01499                 include storage.asm     CompactFlash support
                      (      storage.asm):00001         * Wait until the BSY bit is clear in the CF status register.
                      (      storage.asm):00002         * Upon return the BSY bit is guaranteed to be zero. Z will
                      (      storage.asm):00003         * be set in CC. This subroutine should not be called before
                      (      storage.asm):00004         * the CompactFlash presence has been assessed.
E89E B6C007           (      storage.asm):00005 (4)     CFWAIT  lda     CFSTATR
E8A1 8580             (      storage.asm):00006 (2)             bita    #CFBSYB
E8A3 26F9             (      storage.asm):00007 (3)             bne     CFWAIT
E8A5 39               (      storage.asm):00008 (4)             rts
                      (      storage.asm):00009         
                      (      storage.asm):00010         * Wait until the BSY bit is clear and the RDY bit is set.
E8A6 8DF6             (      storage.asm):00011 (6)     CFRDY   bsr     CFWAIT
E8A8 2703             (      storage.asm):00012 (3)             beq     @cfrdy0         Card not busy, proceed
E8AA 1A04             (      storage.asm):00013 (2)             orcc    #ZFLAG
E8AC 39               (      storage.asm):00014 (4)             rts
E8AD 8E2000           (      storage.asm):00015 (3)     @cfrdy0 ldx     #$2000          Maximum poll count
E8B0 8640             (      storage.asm):00016 (2)             lda     #CFRDYB
E8B2 B5C007           (      storage.asm):00017 (4)     @cfrdy1 bita    CFSTATR
E8B5 2604             (      storage.asm):00018 (3)             bne     @cfrdy2         BSY bit is set, continue
E8B7 301F             (      storage.asm):00019 (4+1)           leax    -1,x            Card not ready, decrement poll count
E8B9 26F7             (      storage.asm):00020 (3)             bne     @cfrdy1         and try again
E8BB 39               (      storage.asm):00021 (4)     @cfrdy2 rts                     Return with Z set: card not present
                      (      storage.asm):00022         *                               Return with Z clear: card is ready
                      (      storage.asm):00023         
                      (      storage.asm):00024         * Check for possible error condition.
                      (      storage.asm):00025         * Upon return either Z is set (A is zero) and no error occurred or
                      (      storage.asm):00026         * Z is clear and the CF error register contents is returned in A.
E8BC 8DE0             (      storage.asm):00027 (6)     CFERRCK bsr     CFWAIT
E8BE B6C007           (      storage.asm):00028 (4)             lda     CFSTATR
E8C1 8401             (      storage.asm):00029 (2)             anda    #CFERRB
E8C3 2703             (      storage.asm):00030 (3)             beq     @cfeck1
E8C5 B6C001           (      storage.asm):00031 (4)             lda     CFERROR         The error register contains error details
E8C8 39               (      storage.asm):00032 (4)     @cfeck1 rts
                      (      storage.asm):00033         
                      (      storage.asm):00034         * Issue CF command. The command code is passed through the B register.
                      (      storage.asm):00035         * Upon return:
                      (      storage.asm):00036         * - Z is set and everything is peachy.
                      (      storage.asm):00037         * - or Z is clear and the CF error register contents will be
                      (      storage.asm):00038         *   returned in A (and mirrored in the global CFERRCD variable).
                      (      storage.asm):00039         * B is preserved.
E8C9 8DDB             (      storage.asm):00040 (6)     CFCMDIS bsr     CFRDY
E8CB 270A             (      storage.asm):00041 (3)             beq     @cfciab         Card not ready, abort
E8CD D748             (      storage.asm):00042 (3)             stb     CFCMMIR         Update CF command mirror
E8CF F7C007           (      storage.asm):00043 (4)             stb     CFCOMDR         Send command to the CF card
E8D2 8DE8             (      storage.asm):00044 (6)             bsr     CFERRCK
E8D4 9749             (      storage.asm):00045 (3)     @cfcise sta     CFERRCD         CF command issue set error
                      (      storage.asm):00046                 IFNE    DEBUG
                      (      storage.asm):00047                 pshs    a,cc
                      (      storage.asm):00048                 beq     @cfciok
                      (      storage.asm):00049                 lda     #'!
                      (      storage.asm):00050                 jsr     PUTCH
E8D6                  (      storage.asm):00051         @cfcidi lda     CFCMMIR
                      (      storage.asm):00052                 ldy     #TBUFF
                      (      storage.asm):00053                 jsr     HDMP2
                      (      storage.asm):00054                 lda     #'/
                      (      storage.asm):00055                 sta     ,y+
                      (      storage.asm):00056                 lda     CFERRCD
                      (      storage.asm):00057                 jsr     HDMP2
                      (      storage.asm):00058                 ldx     #TBUFF
                      (      storage.asm):00059                 jsr     PUTS
                      (      storage.asm):00060                 jsr     PUTCR
                      (      storage.asm):00061                 bra     @cfcict         CF command issue continued
E8D6                  (      storage.asm):00062         @cfciok lda     #'#
                      (      storage.asm):00063                 jsr     PUTCH
                      (      storage.asm):00064                 bra     @cfcidi         CF command issue data indication
E8D6                  (      storage.asm):00065         @cfcict puls    cc,a
                      (      storage.asm):00066                 ENDC
E8D6 39               (      storage.asm):00067 (4)             rts
E8D7 86FF             (      storage.asm):00068 (2)     @cfciab lda     #$FF            Dummy error code
E8D9 20F9             (      storage.asm):00069 (3)             bra     @cfcise
                      (      storage.asm):00070         
                      (      storage.asm):00071         * Drive 0 select.
E8DB 8DC9             (      storage.asm):00072 (6)     CFDRSEL bsr     CFRDY
E8DD 86E0             (      storage.asm):00073 (2)             lda     #$E0            Drive 0, LBA mode
E8DF B7C006           (      storage.asm):00074 (4)             sta     CFDRHDR
E8E2 20C2             (      storage.asm):00075 (3)             bra     CFRDY
                      (      storage.asm):00076         
                      (      storage.asm):00077         * Analyze the response to the CF "Identify Device" request.
E8E4 9E08             (      storage.asm):00078 (4)     CFANTHS ldx     DICEND
E8E6 308836           (      storage.asm):00079 (4+1)           leax    $36,x           Point to the "Model number" field
E8E9 3410             (      storage.asm):00080 (4+2)           pshs    x
E8EB 118614           (      storage.asm):00081 (3)             lde     #$14            Number of 16 bit words to go through
E8EE EC84             (      storage.asm):00082 (5+0)   @bytswp ldd     ,x
E8F0 1E98             (      storage.asm):00083 (5)             exg     b,a             Byte swapping
E8F2 ED81             (      storage.asm):00084 (5+2)           std     ,x++
E8F4 114A             (      storage.asm):00085 (2)             dece
E8F6 26F6             (      storage.asm):00086 (3)             bne     @bytswp
E8F8 6F84             (      storage.asm):00087 (6+0)           clr     ,x
E8FA 3510             (      storage.asm):00088 (4+2)           puls    x
E8FC BDE2EA           (      storage.asm):00089 (7)             jsr     PUTS            Decent CF cards indicate the capacity that way
E8FF 7EE2F7           (      storage.asm):00090 (3)             jmp     PUTCR           Up to $10000 blocks is 64 MB!
                      (      storage.asm):00091         
                      (      storage.asm):00092         * Initialize the CompactFlash subsystem.
                      (      storage.asm):00093         * This is run once at boot time. There is no hot plug support here.
E902 0F47             (      storage.asm):00094 (5)     CFINIT  clr     CFCARDP         Clear card present,
                      (      storage.asm):00095                 IFEQ    DEBUG
E904 8DA0             (      storage.asm):00096 (6)             bsr     CFRDY
                      (      storage.asm):00097                 ELSE
                      (      storage.asm):00098                 jsr     CFRDY
                      (      storage.asm):00099                 ENDC
E906 2730             (      storage.asm):00100 (3)             beq     CFINIAB         Card not ready, abort
E908 8DD1             (      storage.asm):00101 (6)             bsr     CFDRSEL         Drive 0 select
                      (      storage.asm):00102         
E90A 8601             (      storage.asm):00103 (2)             lda     #1              Enable 8-bit data transfers
E90C B7C001           (      storage.asm):00104 (4)             sta     CFFEATR
E90F C6EF             (      storage.asm):00105 (2)             ldb     #CFSETFT        Issue a CF "Set Feature" command
                      (      storage.asm):00106                 IFEQ    DEBUG
E911 8DB6             (      storage.asm):00107 (6)             bsr     CFCMDIS         Not allowed to fail
                      (      storage.asm):00108                 ELSE
                      (      storage.asm):00109                 jsr     CFCMDIS         Not allowed to fail
                      (      storage.asm):00110                 ENDC
E913 2623             (      storage.asm):00111 (3)             bne     CFINIAB         Abort with card present flag clear
                      (      storage.asm):00112         
E915 860A             (      storage.asm):00113 (2)             lda     #%1010          Request PIO mode 2. Does not require IORDY
E917 B7C002           (      storage.asm):00114 (4)             sta     CFSCNTR
E91A 8603             (      storage.asm):00115 (2)             lda     #3              ATA-2 "Set Transfer mode"
E91C B7C001           (      storage.asm):00116 (4)             sta     CFFEATR
                      (      storage.asm):00117                 IFEQ    DEBUG
E91F 8DA8             (      storage.asm):00118 (6)             bsr     CFCMDIS         OK to fail
                      (      storage.asm):00119                 ELSE
                      (      storage.asm):00120                 jsr     CFCMDIS         OK to fail
                      (      storage.asm):00121                 ENDC
                      (      storage.asm):00122         
E921 8682             (      storage.asm):00123 (2)             lda     #$82            Disable write caching
E923 B7C001           (      storage.asm):00124 (4)             sta     CFFEATR
                      (      storage.asm):00125                 IFEQ    DEBUG
E926 8DA1             (      storage.asm):00126 (6)             bsr     CFCMDIS         B still has #CFSETFT. Also OK to fail
                      (      storage.asm):00127                 ELSE
                      (      storage.asm):00128                 jsr     CFCMDIS         B still has #CFSETFT. Also OK to fail
                      (      storage.asm):00129                 ENDC
                      (      storage.asm):00130         
E928 C6EC             (      storage.asm):00131 (2)             ldb     #CFIDDEV        Issue a CF "Identify Device" command
                      (      storage.asm):00132                 IFEQ    DEBUG
E92A 8D9D             (      storage.asm):00133 (6)             bsr     CFCMDIS         Not allowed to fail
                      (      storage.asm):00134                 ELSE
                      (      storage.asm):00135                 jsr     CFCMDIS         Not allowed to fail
                      (      storage.asm):00136                 ENDC
E92C 260A             (      storage.asm):00137 (3)             bne     CFINIAB         Abort with card present flag clear
                      (      storage.asm):00138         
E92E 9E08             (      storage.asm):00139 (4)             ldx     DICEND          Target address is HERE
E930 8D07             (      storage.asm):00140 (6)             bsr     CF1SRD          Read one sector
E932 8DB0             (      storage.asm):00141 (6)             bsr     CFANTHS         Analyze this!
E934 8601             (      storage.asm):00142 (2)             lda     #1
E936 9747             (      storage.asm):00143 (3)             sta     CFCARDP         Set the card present flag
E938 39               (      storage.asm):00144 (4)     CFINIAB rts
                      (      storage.asm):00145         
                      (      storage.asm):00146         * Read one sector. The LBA parameters are assumed to have been set previously.
                      (      storage.asm):00147         * On input X points to the receiving (at least 512 bytes long) buffer.
E939 B6C007           (      storage.asm):00148 (4)     CF1SRD  lda     CFSTATR
E93C 8508             (      storage.asm):00149 (2)             bita    #CFDRQB         Check for DRQ bit in the CF status register
E93E 2712             (      storage.asm):00150 (3)             beq     IOERR
E940 10860200         (      storage.asm):00151 (4)             ldw     #CFSCSZ         Sector size is 512 bytes
E944 108EC000         (      storage.asm):00152 (4)             ldy     #CFDATAR        The data source address
E948 3401             (      storage.asm):00153 (4+1)           pshs    cc
E94A 1A50             (      storage.asm):00154 (2)             orcc    #(FFLAG|IFLAG)  Disable maskable interrupts
E94C 113B21           (      storage.asm):00155 (6+?)           tfm     y,x+
E94F 3501             (      storage.asm):00156 (4+1)           puls    cc              Restore previous interrupt handling mode
E951 39               (      storage.asm):00157 (4)             rts
E952 C611             (      storage.asm):00158 (2)     IOERR   ldb     #17
E954 BDE74C           (      storage.asm):00159 (7)             jsr     ERRHDLR         No return
E957 12               (      storage.asm):00160 (1)     CFR1SRA nop                     For symbolic stack dump debugging purposes
                      (      storage.asm):00161         
                      (      storage.asm):00162         * Write one sector. The LBA parameters are assumed to have been set previously.
                      (      storage.asm):00163         * On input X points to the sending (at least 512 bytes long) buffer.
E958 B6C007           (      storage.asm):00164 (4)     CF1SWR  lda     CFSTATR
E95B 8488             (      storage.asm):00165 (2)             anda    #CFBSYB|CFDRQB
E95D 8108             (      storage.asm):00166 (2)             cmpa    #CFDRQB         Check for BSY clear and DRQ set
E95F 26F7             (      storage.asm):00167 (3)             bne     CF1SWR
E961 10860200         (      storage.asm):00168 (4)             ldw     #CFSCSZ         Sector size is 512 bytes
E965 108EC000         (      storage.asm):00169 (4)             ldy     #CFDATAR        The data destination address
E969 113A12           (      storage.asm):00170 (6+?)           tfm     x+,y            Note: tfm is interruptible!
E96C 39               (      storage.asm):00171 (4)             rts
                      (      storage.asm):00172         
                      (      storage.asm):00173         * 1KB Forth block support primitives. Not dictionary code. More like BIOS ops.
                      (      storage.asm):00174         
                      (      storage.asm):00175         * One block IO preamble: select drive and LBA parameters. On input:
                      (      storage.asm):00176         * ,s has the return address
                      (      storage.asm):00177         * 2,s had the return address for the caller
                      (      storage.asm):00178         * 4,s has the target block number
E96D BDE89E           (      storage.asm):00179 (7)     CF1BPRE jsr     CFWAIT
E970 BDE8DB           (      storage.asm):00180 (7)             jsr     CFDRSEL         Set drive and head parameters
E973 EC64             (      storage.asm):00181 (5+1)           ldd     4,s
E975 1048             (      storage.asm):00182 (2)             lsld                    Convert block number to sector number
E977 F7C003           (      storage.asm):00183 (4)             stb     CFSNUMR         LBA 7-0
E97A B7C004           (      storage.asm):00184 (4)             sta     CFCLOWR         LBA 15-8
E97D 1FA8             (      storage.asm):00185 (4)             tfr     cc,a
E97F 8401             (      storage.asm):00186 (2)             anda    #CFLAG
E981 B7C005           (      storage.asm):00187 (4)             sta     CFCHIGR         LBA 23-16 (carry to cylinder high)
E984 8602             (      storage.asm):00188 (2)             lda     #2              2 IDE sectors per Forth block
E986 B7C002           (      storage.asm):00189 (4)             sta     CFSCNTR
E989 39               (      storage.asm):00190 (4)             rts
                      (      storage.asm):00191         
                      (      storage.asm):00192         * Read one block from CF device. On input:
                      (      storage.asm):00193         * ,s has the return address
                      (      storage.asm):00194         * 2,s has the target block number
                      (      storage.asm):00195         * 4,s has the buffer base address
                      (      storage.asm):00196         * Upon return, Y will be preserved.
E98A 0D47             (      storage.asm):00197 (4)     CF1BKRD tst     CFCARDP
E98C 2602             (      storage.asm):00198 (3)             bne     @ctnued
E98E 20C2             (      storage.asm):00199 (3)             bra     IOERR           Card not present--CF subsystem not initialized
E990 1F27             (      storage.asm):00200 (4)     @ctnued tfr     y,v
E992 8DD9             (      storage.asm):00201 (6)             bsr     CF1BPRE
E994 C620             (      storage.asm):00202 (2)             ldb     #CFRSCTS        Issue a "Read sectors" CF command
E996 BDE8C9           (      storage.asm):00203 (7)             jsr     CFCMDIS
E999 AE64             (      storage.asm):00204 (5+1)           ldx     4,s             Target buffer address to X
E99B 8D9C             (      storage.asm):00205 (6)             bsr     CF1SRD          Read the even sector from CF device
E99D BDE89E           (      storage.asm):00206 (7)             jsr     CFWAIT          Wait for next sector to become available
E9A0 8D97             (      storage.asm):00207 (6)             bsr     CF1SRD          and read the odd sector
E9A2 1F72             (      storage.asm):00208 (4)             tfr     v,y
E9A4 39               (      storage.asm):00209 (4)             rts
                      (      storage.asm):00210         
                      (      storage.asm):00211         * Write one block to CF device. Upon entry:
                      (      storage.asm):00212         * ,s has the return address
                      (      storage.asm):00213         * 2,s has the target block number
                      (      storage.asm):00214         * 4,s has the buffer base address
                      (      storage.asm):00215         * Upon return, Y will be preserved.
E9A5 0D47             (      storage.asm):00216 (4)     CF1BKWR tst     CFCARDP
E9A7 2602             (      storage.asm):00217 (3)             bne     @ctnued
E9A9 20A7             (      storage.asm):00218 (3)             bra     IOERR           Card not present--CF subsystem not initialized
E9AB 1F27             (      storage.asm):00219 (4)     @ctnued tfr     y,v
E9AD 8DBE             (      storage.asm):00220 (6)             bsr     CF1BPRE
E9AF C630             (      storage.asm):00221 (2)             ldb     #CFWSCTS        Issue a "Write sectors" CF command
E9B1 BDE8C9           (      storage.asm):00222 (7)             jsr     CFCMDIS
E9B4 AE64             (      storage.asm):00223 (5+1)           ldx     4,s             Source buffer address to X
E9B6 8DA0             (      storage.asm):00224 (6)             bsr     CF1SWR          Write the even sector to CF device
E9B8 BDE89E           (      storage.asm):00225 (7)             jsr     CFWAIT          Wait for next sector to become available
E9BB 8D9B             (      storage.asm):00226 (6)             bsr     CF1SWR          and write the odd sector
E9BD 1F72             (      storage.asm):00227 (4)             tfr     v,y
E9BF 39               (      storage.asm):00228 (4)             rts
                      (      storage.asm):00229         
                      (        forth.asm):01500         
                      (        forth.asm):01501         * Check for minimal data stack depth. On input D has the lowest possible stack
                      (        forth.asm):01502         * address that satisfies the needs of the caller.
E9C0 103703           (        forth.asm):01503 (4)     CHKNDPT cmpr    d,u
E9C3 2201             (        forth.asm):01504 (3)             bhi     @stkudf
E9C5 39               (        forth.asm):01505 (4)             rts
E9C6 C601             (        forth.asm):01506 (2)     @stkudf ldb     #1              Data stack underflow
E9C8 BDE74C           (        forth.asm):01507 (7)             jsr     ERRHDLR         No return
     E9CB             (        forth.asm):01508         CKDPTRA equ     *
                      (        forth.asm):01509         
                      (        forth.asm):01510         * Parameter stack depth checking primitives.
E9CB CC033820F0       (        forth.asm):01511         MIN1PST MINDREQ 1
                      (        forth.asm):01512         
E9D0 CC033620EB       (        forth.asm):01513         MIN2PST MINDREQ 2
                      (        forth.asm):01514         
E9D5 CC033420E6       (        forth.asm):01515         MIN3PST MINDREQ 3
                      (        forth.asm):01516         
E9DA CC033220E1       (        forth.asm):01517         MIN4PST MINDREQ 4
                      (        forth.asm):01518         
                      (        forth.asm):01519         ******************************************************************************
                      (        forth.asm):01520         * Dictionary begins. Please note that @ has to be the first (in linked list
                      (        forth.asm):01521         * order) word and EMPTY-BUFFERS has to be the last one. In the code below ANSI
                      (        forth.asm):01522         * refers to ANSI-X3.215-1994 Draft 6 proposal (i.e. the free spec).
                      (        forth.asm):01523         
E9DF 0D               (        forth.asm):01524         EBUFS   fcb     13              ANSI (Block ext)
E9E0 454D5054592D4255 (        forth.asm):01525                 fcc     'EMPTY-BUFFERS' ( -- )
     4646455253
E9ED 0000             (        forth.asm):01526                 fdb     0               Last dictionary entry
                      (        forth.asm):01527                 RFCS
E9EF 104F             (        forth.asm):01528 (2)     EMPTYB  clrd                    The following cannot fail so it's OK to clear
E9F1 DD1E             (        forth.asm):01529 (4)             std     MRUBUFA         the most recently used buffer address now
E9F3 8E0560           (        forth.asm):01530 (3)             ldx     #BUF0
E9F6 8D03             (        forth.asm):01531 (6)             bsr     @empt1b
E9F8 8E0970           (        forth.asm):01532 (3)             ldx     #BUF1
                      (        forth.asm):01533         * Empty the buffer pointed to by X. D is zero upon entering this routine.
E9FB 30890400         (        forth.asm):01534 (4+3)   @empt1b leax    BOTERM,x        Buffer offset to the terminator field
E9FF ED84             (        forth.asm):01535 (5+0)           std     ,x              Clear terminator and flags fields
EA01 39               (        forth.asm):01536 (4)             rts
                      (        forth.asm):01537         
EA02 03               (        forth.asm):01538         MCCABE  fcb     3               Non-standard
EA03 4D4343           (        forth.asm):01539                 fcc     'MCC'           ( -- mcc ) Returns the cyclomatic complexity
EA06 E9DF             (        forth.asm):01540                 fdb     EBUFS           of the latest compiled word
                      (        forth.asm):01541                 RFCS
EA08 4F               (        forth.asm):01542 (1)             clra
EA09 D64B             (        forth.asm):01543 (3)             ldb     CYCLO
EA0B 1F01             (        forth.asm):01544 (4)             tfr     d,x
EA0D 3001             (        forth.asm):01545 (4+1)           leax    1,x             1 + number of BNE opcodes generated
EA0F 7EE7DB           (        forth.asm):01546 (3)             jmp     NPUSH
                      (        forth.asm):01547         
EA12 07               (        forth.asm):01548         ALIGND  fcb     7               ANSI Core
EA13 414C49474E4544   (        forth.asm):01549                 fcc     'ALIGNED'       ( addr -- a-addr )
EA1A EA02             (        forth.asm):01550                 fdb     MCCABE
                      (        forth.asm):01551                 RFCS
EA1C 20AD             (        forth.asm):01552 (3)             bra     MIN1PST         At least one cell must be stacked up
                      (        forth.asm):01553         
                      (        forth.asm):01554         * n2 is the size in address units (bytes) of n1 characters. A NOOP.
EA1E 05               (        forth.asm):01555         CHARS   fcb     5               ANSI Core
EA1F 4348415253       (        forth.asm):01556                 fcc     'CHARS'         ( n1 -- n2 )
EA24 EA12             (        forth.asm):01557                 fdb     ALIGND
                      (        forth.asm):01558                 RFCS
EA26 20A3             (        forth.asm):01559 (3)             bra     MIN1PST         At least one cell must be stacked up
                      (        forth.asm):01560         
EA28 05               (        forth.asm):01561         CELLP   fcb     5               ANSI (Core)
EA29 43454C4C2B       (        forth.asm):01562                 fcc     'CELL+'         ( a-addr1 -- a-addr2 )
EA2E EA1E             (        forth.asm):01563                 fdb     CHARS
                      (        forth.asm):01564                 RFCS
EA30 8D99             (        forth.asm):01565 (6)             bsr     MIN1PST         We need at least one cell stacked up
EA32 ECC4             (        forth.asm):01566 (5+0)           ldd     ,u
EA34 C30002           (        forth.asm):01567 (3)             addd    #2
EA37 EDC4             (        forth.asm):01568 (5+0)           std     ,u
EA39 39               (        forth.asm):01569 (4)             rts
                      (        forth.asm):01570         
EA3A 0C               (        forth.asm):01571         SAVBUF  fcb     12              ANSI (Block)
EA3B 534156452D425546 (        forth.asm):01572                 fcc     'SAVE-BUFFERS'  ( -- )
     46455253
EA47 EA28             (        forth.asm):01573                 fdb     CELLP
                      (        forth.asm):01574                 RFCS
EA49 8E0560           (        forth.asm):01575 (3)             ldx     #BUF0
EA4C 8D03             (        forth.asm):01576 (6)             bsr     WBIFDRT
EA4E 8E0970           (        forth.asm):01577 (3)             ldx     #BUF1
                      (        forth.asm):01578         * Write buffer back to mass storage if marked as dirty.
                      (        forth.asm):01579         * The dirty bit is cleared but the buffer contents itself is not.
                      (        forth.asm):01580         * The buffer will continue to be marked as "in use."
                      (        forth.asm):01581         * On input X has has the base buffer address. D, X and Y are all preserved.
EA51 3426             (        forth.asm):01582 (4+4)   WBIFDRT pshs    y,d
EA53 3410             (        forth.asm):01583 (4+2)           pshs    x               Base buffer address (arg1 to CF1BKWR)
EA55 8605             (        forth.asm):01584 (2)             lda     #BINUSE|BDIRTY
EA57 A4890401         (        forth.asm):01585 (4+3)           anda    BOFLAGS,x
EA5B 8105             (        forth.asm):01586 (2)             cmpa    #BINUSE|BDIRTY
EA5D 2617             (        forth.asm):01587 (3)             bne     @alldon         Block not in use or in use but not dirty
EA5F AE890402         (        forth.asm):01588 (5+3)           ldx     BOBLKNO,x
EA63 3410             (        forth.asm):01589 (4+2)           pshs    x               Block number (arg0 to CF1BKWR)
EA65 BDE9A5           (        forth.asm):01590 (7)             jsr     CF1BKWR         Write data buffer to CF
EA68 3262             (        forth.asm):01591 (4+1)           leas    2,s             Drop one cell from the system stack (blknum)
EA6A AEE4             (        forth.asm):01592 (5+0)           ldx     ,s              Retrieve base buffer address
EA6C 30890401         (        forth.asm):01593 (4+3)           leax    BOFLAGS,x
EA70 A684             (        forth.asm):01594 (4+0)           lda     ,x              Acquire the 'flags' field
EA72 84FB             (        forth.asm):01595 (2)             anda    #^BDIRTY        Clear the dirty bit
EA74 A784             (        forth.asm):01596 (4+0)           sta     ,x              and update the 'flags' field
EA76 3510             (        forth.asm):01597 (4+2)   @alldon puls    x               Restore X
EA78 3526             (        forth.asm):01598 (4+4)           puls    d,y             and D/Y
EA7A 39               (        forth.asm):01599 (4)             rts
                      (        forth.asm):01600         
EA7B 05               (        forth.asm):01601         FLUSH   fcb     5               ANSI (Block)
EA7C 464C555348       (        forth.asm):01602                 fcc     'FLUSH'         ( -- )
EA81 EA3A             (        forth.asm):01603                 fdb     SAVBUF
                      (        forth.asm):01604                 RFCS
EA83 8DC4             (        forth.asm):01605                 RFXT    bsr,SAVBUF+15   XT for SAVE-BUFFERS
EA85 7EE9EF           (        forth.asm):01606                 RFXT    jmp,EBUFS+16    XT for EMPTY-BUFFERS
                      (        forth.asm):01607         
EA88 06               (        forth.asm):01608         UPDATE  fcb     6               ANSI (Block)
EA89 555044415445     (        forth.asm):01609                 fcc     'UPDATE'        ( -- )
EA8F EA7B             (        forth.asm):01610                 fdb     FLUSH
                      (        forth.asm):01611                 RFCS
EA91 9E1E             (        forth.asm):01612 (4)             ldx     MRUBUFA         Most recently used buffer base address
EA93 270A             (        forth.asm):01613 (3)             beq     @xquiet         All buffers are currently invalidated
EA95 30890401         (        forth.asm):01614 (4+3)           leax    BOFLAGS,x       Buffer 'flags' field's address to X
EA99 A684             (        forth.asm):01615 (4+0)           lda     ,x              Buffer 'flags' field to A
                      (        forth.asm):01616                 IFNE    DEBUG
                      (        forth.asm):01617                 bita    #BINUSE         Is that buffer in use?
                      (        forth.asm):01618                 beq     @ncurbf         No, something's fishy here. Bail out now!
                      (        forth.asm):01619                 ENDC                    DEBUG
EA9B 8A04             (        forth.asm):01620 (2)             ora     #BDIRTY
EA9D A784             (        forth.asm):01621 (4+0)           sta     ,x              Set the dirty bit
EA9F 39               (        forth.asm):01622 (4)     @xquiet rts
                      (        forth.asm):01623                 IFNE DEBUG
EAA0                  (        forth.asm):01624         @ncurbf ldb     #15             No current buffer
                      (        forth.asm):01625                 jsr     ERRHDLR         No return
                      (        forth.asm):01626                 ENDC                    DEBUG
                      (        forth.asm):01627         
EAA0 06               (        forth.asm):01628         BUFFER  fcb     6               ANSI (Block)
EAA1 425546464552     (        forth.asm):01629                 fcc     'BUFFER'        ( ublkno -- addr )
EAA7 EA88             (        forth.asm):01630                 fdb     UPDATE
                      (        forth.asm):01631                 RFCS
EAA9 BDE7E9           (        forth.asm):01632 (7)             jsr     NPOP
EAAC 1F12             (        forth.asm):01633 (4)             tfr     x,y             ublkno to Y
                      (        forth.asm):01634         * Block lookup.
EAAE 8E0560           (        forth.asm):01635 (3)             ldx     #BUF0           Base address of the first resident buffer
EAB1 C602             (        forth.asm):01636 (2)             ldb     #2              Number of resident buffers
EAB3 A6890401         (        forth.asm):01637 (4+3)   @blkup  lda     BOFLAGS,x       Buffer flags to A
EAB7 8501             (        forth.asm):01638 (2)             bita    #BINUSE         Buffer in use?
EAB9 270C             (        forth.asm):01639 (3)             beq     @nxtbuf         No
EABB 10AC890402       (        forth.asm):01640 (6+3)           cmpy    BOBLKNO,x       Buffer is in use. Block number match?
EAC0 2605             (        forth.asm):01641 (3)             bne     @nxtbuf         No
EAC2 9F1E             (        forth.asm):01642 (4)     @retba  stx     MRUBUFA         Block number match. Mark as the MRU buffer
EAC4 3610             (        forth.asm):01643                 UCNPUSH                 and return its base address via the data stack
EAC6 39               (        forth.asm):01644 (4)             rts
EAC7 30890410         (        forth.asm):01645 (4+3)   @nxtbuf leax    BFDISP,x        Point to the next buffer
EACB 5A               (        forth.asm):01646 (1)             decb
EACC 26E5             (        forth.asm):01647 (3)             bne     @blkup
                      (        forth.asm):01648         * The block number in Y is not currently in use. Assign a buffer to it.
EACE 8E0560           (        forth.asm):01649 (3)             ldx     #BUF0
EAD1 9C1E             (        forth.asm):01650 (4)             cmpx    MRUBUFA         Most recently used buffer address
EAD3 2603             (        forth.asm):01651 (3)             bne     @bselct
EAD5 8E0970           (        forth.asm):01652 (3)             ldx     #BUF1
                      (        forth.asm):01653         * At this point X has the base address of the block we are interested in
                      (        forth.asm):01654         * and Y has the target block number.
EAD8 BDEA51           (        forth.asm):01655 (7)     @bselct jsr     WBIFDRT         Write back if dirty. X, Y and D are preserved
EADB 8601             (        forth.asm):01656 (2)             lda     #BINUSE
EADD A7890401         (        forth.asm):01657 (4+3)           sta     BOFLAGS,x       Update the buffer's 'flags' field
EAE1 10AF890402       (        forth.asm):01658 (6+3)           sty     BOBLKNO,x       and update the 'blknum' field as well
EAE6 20DA             (        forth.asm):01659 (3)             bra     @retba
                      (        forth.asm):01660         
EAE8 05               (        forth.asm):01661         BLOCK   fcb     5               ANSI (Block)
EAE9 424C4F434B       (        forth.asm):01662                 fcc     'BLOCK'         ( ublkno -- addr )
EAEE EAA0             (        forth.asm):01663                 fdb     BUFFER
                      (        forth.asm):01664                 RFCS
EAF0 8DB7             (        forth.asm):01665                 RFXT    bsr,BUFFER+9    XT for BUFFER
                      (        forth.asm):01666         * Upon return Y has has the block number.
EAF2 3710             (        forth.asm):01667                 UCNPOP                  Buffer base address to X
EAF4 3410             (        forth.asm):01668 (4+2)           pshs    x               Push base buffer address as Arg1 to CF1BKRD
EAF6 A6890401         (        forth.asm):01669 (4+3)           lda     BOFLAGS,x       Retrieve buffer 'flags' field
                      (        forth.asm):01670                 IFNE    DEBUG
                      (        forth.asm):01671                 bita    #BINUSE
                      (        forth.asm):01672                 bne     @blkctd
                      (        forth.asm):01673                 lda     #10             Assertion failed
                      (        forth.asm):01674                 jsr     ERRHDLR         No return
                      (        forth.asm):01675                 ENDC                    DEBUG
EAFA 8402             (        forth.asm):01676 (2)     @blkctd anda    #BMAPPD         Has the block been read yet?
EAFC 2613             (        forth.asm):01677 (3)             bne     @bkmapd         Yes
EAFE 3420             (        forth.asm):01678 (4+2)           pshs    y               No. Push block number as arg0 to CF1BKRD
                      (        forth.asm):01679         * Map in the block from the CF device. System stack structure is as follows:
                      (        forth.asm):01680         * ,s has the target block number.
                      (        forth.asm):01681         * 2,s has the buffer base address.
EB00 BDE98A           (        forth.asm):01682 (7)             jsr     CF1BKRD
EB03 3262             (        forth.asm):01683 (4+1)           leas    2,s             Drop one cell from the system stack
                      (        forth.asm):01684         * Update the buffer's flags field.
EB05 AEE4             (        forth.asm):01685 (5+0)           ldx     ,s              Base buffer address
EB07 30890401         (        forth.asm):01686 (4+3)           leax    BOFLAGS,x       Buffer 'flags' field address to X
EB0B A684             (        forth.asm):01687 (4+0)           lda     ,x              Read buffer 'flags' field
EB0D 8A02             (        forth.asm):01688 (2)             ora     #BMAPPD
EB0F A784             (        forth.asm):01689 (4+0)           sta     ,x              and mark it as read
EB11 3510             (        forth.asm):01690 (4+2)   @bkmapd puls    x               Buffer base address to X
EB13 3610             (        forth.asm):01691                 UCNPUSH
EB15 39               (        forth.asm):01692 (4)             rts
                      (        forth.asm):01693         
                      (        forth.asm):01694         * Three different behaviours have been observed here (from console input):
                      (        forth.asm):01695         * Interactive input is: "CR >IN ?<CR>"
                      (        forth.asm):01696         *
                      (        forth.asm):01697         * GNU Forth 0.7.3:
                      (        forth.asm):01698         * REFILL .S CR >IN ? <1> -1 
                      (        forth.asm):01699         * 11  ok
                      (        forth.asm):01700         * VFX Forth 5.11:
                      (        forth.asm):01701         * REFILL .S CR >IN ? 
                      (        forth.asm):01702         * 8  ok-1
                      (        forth.asm):01703         * SwiftForth 3.7.9:
                      (        forth.asm):01704         * REFILL .S CR >IN ?
                      (        forth.asm):01705         * 8  ok
                      (        forth.asm):01706         *
                      (        forth.asm):01707         * I am going for the SwiftForth solution.
EB16 06               (        forth.asm):01708         REFILL  fcb     6               ANSI (Core ext/Block ext)
EB17 524546494C4C     (        forth.asm):01709                 fcc     'REFILL'
EB1D EAE8             (        forth.asm):01710                 fdb     BLOCK
                      (        forth.asm):01711                 RFCS
EB1F 9E2C             (        forth.asm):01712 (4)             ldx     UBLK
EB21 260B             (        forth.asm):01713 (3)             bne     @nxtblk         We are running from block context
                      (        forth.asm):01714         * Running from the console (user input device) or from an EVALUATE string.
EB23 0D4A             (        forth.asm):01715 (4)             tst     SRCID           Are we being EVALUATEd?
EB25 10260DB1         (        forth.asm):01716                 RFXT    lbne,FALSE+8    Yes. Return false
EB29 BDE166           (        forth.asm):01717 (7)             jsr     READLN          >IN is cleared
EB2C 2008             (        forth.asm):01718 (3)             bra     @rtrue
EB2E 3001             (        forth.asm):01719 (4+1)   @nxtblk leax    1,x
EB30 9F2C             (        forth.asm):01720 (4)             stx     UBLK            Update BLK
EB32 1FC1             (        forth.asm):01721 (4)             tfr     0,x
EB34 9F2A             (        forth.asm):01722 (4)             stx     UTOIN           Clear >IN
                      (        forth.asm):01723         * Any possible block number is valid.
EB36 7EF8E6           (        forth.asm):01724         @rtrue  RFXT    jmp,TRUE+7      Return true.
                      (        forth.asm):01725         
EB39 03               (        forth.asm):01726         BLK     fcb     3               ANSI (Block)
EB3A 424C4B           (        forth.asm):01727                 fcc     'BLK'
EB3D EB16             (        forth.asm):01728                 fdb     REFILL
                      (        forth.asm):01729                 RFCS
EB3F 8E012C           (        forth.asm):01730 (3)             ldx     #UBLK
EB42 7EE7DB           (        forth.asm):01731 (3)             jmp     NPUSH
                      (        forth.asm):01732         
EB45 03               (        forth.asm):01733         TOIN    fcb     3               ANSI (Core)
EB46 3E494E           (        forth.asm):01734                 fcc     '>IN'           ( -- a-addr )
EB49 EB39             (        forth.asm):01735                 fdb     BLK
                      (        forth.asm):01736                 RFCS
EB4B 8E012A           (        forth.asm):01737 (3)             ldx     #UTOIN
EB4E 7EE7DB           (        forth.asm):01738 (3)             jmp     NPUSH
                      (        forth.asm):01739         
EB51 03               (        forth.asm):01740         SCR     fcb     3               ANSI (Block ext)
EB52 534352           (        forth.asm):01741                 fcc     'SCR'
EB55 EB45             (        forth.asm):01742                 fdb     TOIN
                      (        forth.asm):01743                 RFCS
EB57 8E012E           (        forth.asm):01744 (3)             ldx     #USCR
EB5A 7EE7DB           (        forth.asm):01745 (3)             jmp     NPUSH
                      (        forth.asm):01746         
                      (        forth.asm):01747         * Functionally: : LINE 6 SHIFT SCR @ BLOCK + ;
                      (        forth.asm):01748         * Moved to CompactFlash screen #4.
                      (        forth.asm):01749         
                      (        forth.asm):01750         * Functionally:
                      (        forth.asm):01751         * : INDEX 1+ SWAP DO
                      (        forth.asm):01752         *     CR   I SCR !
                      (        forth.asm):01753         *     0 LINE 64 TYPE
                      (        forth.asm):01754         *   LOOP ;
                      (        forth.asm):01755         * Moved to CompactFlash screen #4.
                      (        forth.asm):01756         
EB5D 05               (        forth.asm):01757         TICKS   fcb     5               Non-standard
EB5E 5449434B53       (        forth.asm):01758                 fcc     'TICKS'         ( -- tickslow tickshigh )
EB63 EB51             (        forth.asm):01759                 fdb     SCR
                      (        forth.asm):01760                 RFCS
                      (        forth.asm):01761                 IFNE    RTCFEAT
                      (        forth.asm):01762                 pshs    cc
                      (        forth.asm):01763                 orcc    #FFLAG          Mask FIRQ while reading the double cell
                      (        forth.asm):01764                 ldx     TIKSLOW
                      (        forth.asm):01765                 ldy     TIKSHI
                      (        forth.asm):01766                 puls    cc              Restore the previous interrupt handling mode
                      (        forth.asm):01767                 jsr     NPUSH
                      (        forth.asm):01768                 tfr     y,x
                      (        forth.asm):01769                 ELSE
EB65 1FC1             (        forth.asm):01770 (4)             tfr     0,x
EB67 BDE7DB           (        forth.asm):01771 (7)             jsr     NPUSH
                      (        forth.asm):01772                 ENDC                    RTCFEAT
EB6A 7EE7DB           (        forth.asm):01773 (3)             jmp     NPUSH
                      (        forth.asm):01774         
EB6D 04               (        forth.asm):01775         RTCFTCH fcb     4               Non-standard
EB6E 52544340         (        forth.asm):01776                 fcc     'RTC@'          ( regoff -- byteval )
EB72 EB5D             (        forth.asm):01777                 fdb     TICKS
                      (        forth.asm):01778                 RFCS
                      (        forth.asm):01779                 IFNE    RTCFEAT
                      (        forth.asm):01780                 tst     RTCAVL
                      (        forth.asm):01781                 beq     RTNOCON
                      (        forth.asm):01782         * An MC146818 RTC is present. Let's get down to business.
                      (        forth.asm):01783                 jsr     NPOP            REGOFF to X
                      (        forth.asm):01784                 tfr     x,d
                      (        forth.asm):01785                 tfr     b,a
                      (        forth.asm):01786                 jsr     RTREGRD
                      (        forth.asm):01787                 clra                    BYTEVAL to D
                      (        forth.asm):01788                 pshu    d               Unchecked NPUSH of D
                      (        forth.asm):01789                 rts
EB74                  (        forth.asm):01790         RTNOCON ldb     #17             RTC not detected on bootup -> I/O error
                      (        forth.asm):01791                 jsr     ERRHDLR         No return
                      (        forth.asm):01792                 ELSE
EB74 BDFC89           (        forth.asm):01793                 RFXT    jsr,DROP+7      XT for DROP
EB77 1FC1             (        forth.asm):01794 (4)             tfr     0,x
EB79 7EE7DB           (        forth.asm):01795 (3)             jmp     NPUSH
                      (        forth.asm):01796                 ENDC                    RTCFEAT
                      (        forth.asm):01797         
EB7C 04               (        forth.asm):01798         RTCSTOR fcb     4               Non-standard
EB7D 52544321         (        forth.asm):01799                 fcc     'RTC!'          ( byteval regoff -- )
EB81 EB6D             (        forth.asm):01800                 fdb     RTCFTCH
                      (        forth.asm):01801                 RFCS
                      (        forth.asm):01802                 IFNE    RTCFEAT
                      (        forth.asm):01803                 tst     RTCAVL
                      (        forth.asm):01804                 beq     RTNOCON
                      (        forth.asm):01805                 jsr     MIN2PST         At least two cells need to be stacked up
                      (        forth.asm):01806                 lda     1,u             REGOFF to A
                      (        forth.asm):01807                 ldb     3,u             BYTEVAL to B
                      (        forth.asm):01808                 leau    4,u             Drop two cells from the data stack
                      (        forth.asm):01809                 jmp     RTREGWR
                      (        forth.asm):01810                 ELSE
EB83 7EF4B8           (        forth.asm):01811                 RFXT    jmp,TWODROP+8   XT for 2 DROP
                      (        forth.asm):01812                 ENDC                    RTCFEAT
                      (        forth.asm):01813         
EB86 04               (        forth.asm):01814         LIST    fcb     4               ANSI (Block ext)
EB87 4C495354         (        forth.asm):01815                 fcc     'LIST'          ( ublkno -- )
EB8B EB7C             (        forth.asm):01816                 fdb     RTCSTOR
                      (        forth.asm):01817                 RFCS
EB8D 0D47             (        forth.asm):01818 (4)             tst     CFCARDP
EB8F 2605             (        forth.asm):01819 (3)             bne     @cont
EB91 C611             (        forth.asm):01820 (2)             ldb     #17             IO error
EB93 BDE74C           (        forth.asm):01821 (7)             jsr     ERRHDLR         No return
EB96 BDFC7A           (        forth.asm):01822         @cont   RFXT    jsr,DUP+6       XT for DUP
EB99 BDEAF0           (        forth.asm):01823                 RFXT    jsr,BLOCK+8     XT for BLOCK
                      (        forth.asm):01824         * TOS now has the base buffer address.
EB9C BDE7E9           (        forth.asm):01825 (7)             jsr     NPOP
EB9F 1F12             (        forth.asm):01826 (4)             tfr     x,y             Base buffer address to Y
EBA1 BDE7E9           (        forth.asm):01827 (7)             jsr     NPOP            ublkno to X
EBA4 9F2E             (        forth.asm):01828 (4)             stx     USCR            Update SCR's value
EBA6 C610             (        forth.asm):01829 (2)             ldb     #16             16 lines to go
EBA8 3404             (        forth.asm):01830 (4+1)   @loop   pshs    b
EBAA BDE2F7           (        forth.asm):01831 (7)             jsr     PUTCR
EBAD 1F21             (        forth.asm):01832 (4)             tfr     y,x
EBAF BDE7DB           (        forth.asm):01833 (7)             jsr     NPUSH           Start address for TYPE
EBB2 8E0040           (        forth.asm):01834 (3)             ldx     #64
EBB5 BDE7DB           (        forth.asm):01835 (7)             jsr     NPUSH           Byte count for TYPE
EBB8 103012           (        forth.asm):01836 (4)             addr    x,y
EBBB BDF75D           (        forth.asm):01837                 RFXT    jsr,TYPE+7      XT for TYPE
EBBE 3504             (        forth.asm):01838 (4+1)           puls    b
EBC0 5A               (        forth.asm):01839 (1)             decb
EBC1 26E5             (        forth.asm):01840 (3)             bne     @loop
EBC3 39               (        forth.asm):01841 (4)             rts
                      (        forth.asm):01842         
                      (        forth.asm):01843         * This is supposed to align HERE (DICEND), presumably on a cell boundary.
                      (        forth.asm):01844         * We have no such constraint on the 6309.
EBC4 05               (        forth.asm):01845         ALIGN   fcb     5               ANSI Core
EBC5 414C49474E       (        forth.asm):01846                 fcc     'ALIGN'         ( -- )
EBCA EB86             (        forth.asm):01847                 fdb     LIST
                      (        forth.asm):01848                 RFCS
EBCC 39               (        forth.asm):01849 (4)             rts
                      (        forth.asm):01850         
                      (        forth.asm):01851         * Convert a single cell to a double.
EBCD 03               (        forth.asm):01852         STOD    fcb     3               ANSI Core
EBCE 533E44           (        forth.asm):01853                 fcc     'S>D'           ( n -- d )
EBD1 EBC4             (        forth.asm):01854                 fdb     ALIGN
                      (        forth.asm):01855                 RFCS
EBD3 BDE7E9           (        forth.asm):01856 (7)             jsr     NPOP            N to X
EBD6 3610             (        forth.asm):01857                 UCNPUSH                 Push back low order cell
EBD8 104F             (        forth.asm):01858 (2)             clrd                    High order cell: default to N >= 0
EBDA 1E01             (        forth.asm):01859 (5)             exg     d,x
EBDC 4D               (        forth.asm):01860 (1)             tsta
EBDD 102AFBFA         (        forth.asm):01861 (5)             lbpl    NPUSH
EBE1 301F             (        forth.asm):01862 (4+1)           leax    -1,x            N is < 0. Sign extension is required. -1 to X
EBE3 7EE7DB           (        forth.asm):01863 (3)             jmp     NPUSH
                      (        forth.asm):01864         
EBE6 04               (        forth.asm):01865         NCLR    fcb     4               Non-standard
EBE7 4E434C52         (        forth.asm):01866                 fcc     'NCLR'          Clear the data (normal) stack
EBEB EBCD             (        forth.asm):01867                 fdb     STOD
                      (        forth.asm):01868                 RFCS
EBED CE033A           (        forth.asm):01869 (3)             ldu     #NSTBOT
EBF0 39               (        forth.asm):01870 (4)             rts
                      (        forth.asm):01871         
EBF1 04               (        forth.asm):01872         RCLR    fcb     4               Non-standard
EBF2 52434C52         (        forth.asm):01873                 fcc     'RCLR'          Clear the return stack
EBF6 EBE6             (        forth.asm):01874                 fdb     NCLR
                      (        forth.asm):01875                 RFCS
EBF8 8E0438           (        forth.asm):01876 (3)             ldx     #RSTBOT
EBFB 9F00             (        forth.asm):01877 (4)             stx     RSP
EBFD 0F37             (        forth.asm):01878 (5)             clr     RDEPTH
EBFF 39               (        forth.asm):01879 (4)             rts
                      (        forth.asm):01880         
EC00 05               (        forth.asm):01881         DEPTH   fcb     5               ANSI (Core)
EC01 4445505448       (        forth.asm):01882                 fcc     'DEPTH'         ( -- +n )
EC06 EBF1             (        forth.asm):01883                 fdb     RCLR
                      (        forth.asm):01884                 RFCS
EC08 CC033A           (        forth.asm):01885 (3)             ldd     #NSTBOT         Bottom data stack address
EC0B 103230           (        forth.asm):01886 (4)             subr    u,d             D has the current value of the data stack ptr
EC0E 1044             (        forth.asm):01887 (2)             lsrd                    divided by 2
EC10 1F01             (        forth.asm):01888 (4)             tfr     d,x
EC12 7EE7DB           (        forth.asm):01889 (3)             jmp     NPUSH           X to N
                      (        forth.asm):01890         
EC15 06               (        forth.asm):01891         CREATE  fcb     6               ANSI (Core)
EC16 435245415445     (        forth.asm):01892                 fcc     'CREATE'        Comp: ( "<spaces>name" -- )
EC1C EC00             (        forth.asm):01893                 fdb     DEPTH           Exec: ( -- a-addr )
                      (        forth.asm):01894                 RFCS
EC1E BDE50B           (        forth.asm):01895 (7)             jsr     LOCWRT          Code entry point returned to Y
EC21 868E             (        forth.asm):01896 (2)             lda     #LDXOPC         LDX immediate
EC23 A7A0             (        forth.asm):01897 (4+1)           sta     ,y+
EC25 1F21             (        forth.asm):01898 (4)             tfr     y,x
EC27 3008             (        forth.asm):01899 (4+1)           leax    8,x
EC29 AFA1             (        forth.asm):01900 (5+2)           stx     ,y++
EC2B 86BD             (        forth.asm):01901 (2)             lda     #JSROPC         JSR extended
EC2D BDE57A           (        forth.asm):01902 (7)             jsr     VARCON1         Compile JSR NPUSH
EC30 8639             (        forth.asm):01903 (2)             lda     #RTSOPC         RTS inherent
EC32 A7A0             (        forth.asm):01904 (4+1)           sta     ,y+
EC34 3122             (        forth.asm):01905 (4+1)           leay    2,y             Reserve room for a possible DOES> clause
EC36 109F08           (        forth.asm):01906 (5)     CREAT1  sty     DICEND
EC39 9E0C             (        forth.asm):01907 (4)             ldx     BDICEND         This is set by LOCWRT (was IY)
EC3B 9F06             (        forth.asm):01908 (4)             stx     LSTWAD
EC3D 39               (        forth.asm):01909 (4)             rts
                      (        forth.asm):01910         
EC3E C5               (        forth.asm):01911         DOES    fcb     $C5             ANSI (Core)
EC3F 444F45533E       (        forth.asm):01912                 fcc     'DOES>'
EC44 EC15             (        forth.asm):01913                 fdb     CREATE
                      (        forth.asm):01914                 RFCS
EC46 8EEC4C           (        forth.asm):01915 (3)             ldx     #DOESEX         JSR #DOESEX is compiled (no actual return)
EC49 7EE152           (        forth.asm):01916 (3)             jmp     EMXASXT         Set as action component
                      (        forth.asm):01917         
EC4C 9E06             (        forth.asm):01918 (4)     DOESEX  ldx     LSTWAD          Header of the last dictionary entry
EC4E E680             (        forth.asm):01919 (4+1)           ldb     ,x+
EC50 C41F             (        forth.asm):01920 (2)             andb    #WRLNMSK        Extract word length
EC52 3A               (        forth.asm):01921 (1)             abx
                      (        forth.asm):01922                 IFNE    RELFEAT
                      (        forth.asm):01923                 leax    9,x             2 bytes/backlink, 1/cksum, 6 bytes code offset
                      (        forth.asm):01924                 ELSE
EC53 3008             (        forth.asm):01925 (4+1)           leax    8,x             2 bytes/backlink, 6 bytes code offset
                      (        forth.asm):01926                 ENDC                    RELFEAT
EC55 A684             (        forth.asm):01927 (4+0)           lda     ,x
EC57 8139             (        forth.asm):01928 (2)             cmpa    #RTSOPC         RTS inherent
EC59 2705             (        forth.asm):01929 (3)             beq     @dosex1
EC5B C60E             (        forth.asm):01930 (2)             ldb     #14             No matching CREATE
EC5D BDE74C           (        forth.asm):01931 (7)             jsr     ERRHDLR         No return
EC60 867E             (        forth.asm):01932 (2)     @dosex1 lda     #JMPOPC         JMP extended
EC62 A780             (        forth.asm):01933 (4+1)           sta     ,x+             Overwrite RTS opcode
EC64 3520             (        forth.asm):01934 (4+2)           puls    y
EC66 10AF84           (        forth.asm):01935 (6+0)           sty     ,x
EC69 39               (        forth.asm):01936 (4)             rts
                      (        forth.asm):01937         
EC6A 87               (        forth.asm):01938         LITERAL fcb     $87             ANSI (Core)
EC6B 4C49544552414C   (        forth.asm):01939                 fcc     'LITERAL'       Comp: ( x -- )
EC72 EC3E             (        forth.asm):01940                 fdb     DOES            Exec: ( -- x )
                      (        forth.asm):01941                 RFCS
EC74 BDE7E9           (        forth.asm):01942 (7)             jsr     NPOP
EC77 0D25             (        forth.asm):01943 (4)             tst     USTATE+1
EC79 2601             (        forth.asm):01944 (3)             bne     @comp
EC7B 39               (        forth.asm):01945 (4)             rts                     The standard defines no semantics in interp mode
EC7C 109E08           (        forth.asm):01946 (5)     @comp   ldy     DICEND
EC7F 868E             (        forth.asm):01947 (2)             lda     #LDXOPC         LDX immediate
EC81 BDE57D           (        forth.asm):01948 (7)             jsr     VARCON2         Compile LDX #X
EC84 109F08           (        forth.asm):01949 (5)             sty     DICEND          Update HERE
EC87 8EE7DB           (        forth.asm):01950 (3)             ldx     #NPUSH
EC8A 7EE152           (        forth.asm):01951 (3)             jmp     EMXASXT         Set NPUSH as action component
                      (        forth.asm):01952         
                      (        forth.asm):01953         * Functionally: : CONSTANT CREATE , DOES> @ ;
                      (        forth.asm):01954         * The following code produces more compact code.
EC8D 08               (        forth.asm):01955         CONS    fcb     8               ANSI (Core)
EC8E 434F4E5354414E54 (        forth.asm):01956                 fcc     'CONSTANT'      Comp: ( x "<spaces>name" -- )
EC96 EC6A             (        forth.asm):01957                 fdb     LITERAL         Exec: ( -- x )
                      (        forth.asm):01958                 RFCS
EC98 BDE7E9           (        forth.asm):01959 (7)             jsr     NPOP
EC9B 1F16             (        forth.asm):01960 (4)             tfr     x,w
EC9D BDE50B           (        forth.asm):01961 (7)             jsr     LOCWRT          Create dictionary entry
ECA0 1F61             (        forth.asm):01962 (4)             tfr     w,x
ECA2 868E             (        forth.asm):01963 (2)             lda     #LDXOPC         ldx immediate
ECA4 BDE57D           (        forth.asm):01964 (7)             jsr     VARCON2         Compile LDX #CSTVAL
ECA7 BDE578           (        forth.asm):01965 (7)             jsr     VARCON          Compile JMP NPUSH
                      (        forth.asm):01966                 IFNE    RELFEAT
                      (        forth.asm):01967                 bsr     CREAT1
                      (        forth.asm):01968                 RFXT    bra,MONITOR+10  XT for MONITOR
                      (        forth.asm):01969                 ELSE
ECAA 208A             (        forth.asm):01970 (3)             bra     CREAT1
                      (        forth.asm):01971                 ENDC                    RELFEAT
                      (        forth.asm):01972         
                      (        forth.asm):01973         * Functionally: : VARIABLE CREATE 2 ALLOT ;
                      (        forth.asm):01974         * However we can save three bytes per instance with the following code.
ECAC 08               (        forth.asm):01975         VARI    fcb     8               ANSI (Core)
ECAD 5641524941424C45 (        forth.asm):01976                 fcc     'VARIABLE'      Comp: ( "<spaces>name" -- )
ECB5 EC8D             (        forth.asm):01977                 fdb     CONS            Exec: ( -- a-addr )
                      (        forth.asm):01978                 RFCS
ECB7 BDE50B           (        forth.asm):01979 (7)             jsr     LOCWRT
ECBA 868E             (        forth.asm):01980 (2)             lda     #LDXOPC         ldx immediate
ECBC A7A0             (        forth.asm):01981 (4+1)           sta     ,y+
ECBE 1F26             (        forth.asm):01982 (4)             tfr     y,w             Preserve Y (HERE)
ECC0 3125             (        forth.asm):01983 (4+1)           leay    5,y             Relative variable address
ECC2 1F21             (        forth.asm):01984 (4)             tfr     y,x
ECC4 1F62             (        forth.asm):01985 (4)             tfr     w,y             Restore Y (HERE)
ECC6 AFA1             (        forth.asm):01986 (5+2)           stx     ,y++            Address field for LDX #VARADDR
ECC8 BDE578           (        forth.asm):01987 (7)             jsr     VARCON          Compile JMP NPUSH
ECCB 3122             (        forth.asm):01988 (4+1)           leay    2,y             2 ALLOT
ECCD 7EEC36           (        forth.asm):01989 (3)             jmp     CREAT1
                      (        forth.asm):01990         
ECD0 09               (        forth.asm):01991         IMMED   fcb     9               ANSI (Core)
ECD1 494D4D4544494154 (        forth.asm):01992                 fcc     'IMMEDIATE'     ( -- )
     45
ECDA ECAC             (        forth.asm):01993                 fdb     VARI
                      (        forth.asm):01994                 RFCS
ECDC C680             (        forth.asm):01995 (2)             ldb     #IMDFLM
ECDE 9E06             (        forth.asm):01996 (4)     IMMED1  ldx     LSTWAD
ECE0 A684             (        forth.asm):01997 (4+0)           lda     ,x
ECE2 103598           (        forth.asm):01998 (4)             orr     b,a
ECE5 A784             (        forth.asm):01999 (4+0)           sta     ,x
ECE7 39               (        forth.asm):02000 (4)             rts
                      (        forth.asm):02001         
ECE8 08               (        forth.asm):02002         RSTRCT  fcb     8               Non-standard (GNU Forth)
ECE9 5245535452494354 (        forth.asm):02003                 fcc     'RESTRICT'      Make word available in compilation mode only
ECF1 ECD0             (        forth.asm):02004                 fdb     IMMED
                      (        forth.asm):02005                 RFCS
ECF3 C640             (        forth.asm):02006 (2)             ldb     #DEFFLM
ECF5 20E7             (        forth.asm):02007 (3)             bra     IMMED1
                      (        forth.asm):02008         
                      (        forth.asm):02009         * Added for better support of ANSI VALUEs.
ECF7 09               (        forth.asm):02010         UNMON   fcb     9               Non-standard
ECF8 554E4D4F4E49544F (        forth.asm):02011                 fcc     'UNMONITOR'     ( -- )
     52
ED01 ECE8             (        forth.asm):02012                 fdb     RSTRCT
                      (        forth.asm):02013                 RFCS
                      (        forth.asm):02014                 IFNE    RELFEAT
                      (        forth.asm):02015                 clra
                      (        forth.asm):02016                 pshs    a
                      (        forth.asm):02017                 bra     MONIT1
                      (        forth.asm):02018                 ELSE
ED03 39               (        forth.asm):02019 (4)             rts
                      (        forth.asm):02020                 ENDC                    RELFEAT
                      (        forth.asm):02021         
                      (        forth.asm):02022         * This non-standard word enables checkum monitoring by ICHECK for the
                      (        forth.asm):02023         * last defined word in the dictionary. : words are monitored by default
                      (        forth.asm):02024         * and so are constants. CREATEd words require an explicit invokation of
                      (        forth.asm):02025         * MONITOR if they are to be checked for integrity.
ED04 07               (        forth.asm):02026         MONITOR fcb     7               Non-standard
ED05 4D4F4E49544F52   (        forth.asm):02027                 fcc     'MONITOR'       ( -- )
ED0C ECF7             (        forth.asm):02028                 fdb     UNMON
                      (        forth.asm):02029                 RFCS
                      (        forth.asm):02030                 IFNE    RELFEAT
                      (        forth.asm):02031                 lda     #1              Set MONFLM in the word 'flags' header field
                      (        forth.asm):02032                 pshs    a
ED0E                  (        forth.asm):02033         MONIT1  ldx     LSTWAD          Latest defined word header address
                      (        forth.asm):02034                 lda     ,x
                      (        forth.asm):02035                 tst     ,s              Should we set or clear MONFLM?
                      (        forth.asm):02036                 bne     @setflg
                      (        forth.asm):02037                 anda    #^MONFLM        Clear MONFLM in the word's attribute field
                      (        forth.asm):02038                 bra     @cont
ED0E                  (        forth.asm):02039         @setflg ora     #MONFLM         Set MONFLM in the word's attribute field
ED0E                  (        forth.asm):02040         @cont   sta     ,x
                      (        forth.asm):02041                 bsr     HDRSKIP         Skip the header (XT to X), clear A
                      (        forth.asm):02042                 ldy     DICEND          The upper code section limit (excluded)
                      (        forth.asm):02043                 bsr     HDRCSUM         Current word's definition's checksum to A
                      (        forth.asm):02044                 sta     -1,x            Store the computed checksum into the header
                      (        forth.asm):02045                 leas    1,s             Drop one byte from the system stack
                      (        forth.asm):02046                 ENDC                    RELFEAT
ED0E 39               (        forth.asm):02047 (4)             rts
                      (        forth.asm):02048         
                      (        forth.asm):02049                 IFNE    RELFEAT
                      (        forth.asm):02050         * On entry, X has a word's header address. On return X has the compilation
                      (        forth.asm):02051         * address for that word (XT). A is cleared so as to initialize the checksum.
ED0F                  (        forth.asm):02052         HDRSKIP lda     ,x              Word's header attribute byte to A
                      (        forth.asm):02053                 anda    #WRLNMSK        Extract the word's length
                      (        forth.asm):02054                 adda    #4              1B attribute, 2B backlink, 1B checksum
                      (        forth.asm):02055                 leax    a,x             X has the word's XT. -1,X has the orig checksum
                      (        forth.asm):02056                 clra
                      (        forth.asm):02057                 rts
                      (        forth.asm):02058         
                      (        forth.asm):02059         * On entry X has a word's compilation address (XT). A is supposed to have been
                      (        forth.asm):02060         * previously cleared. Y has the upper bound of the code section's address
                      (        forth.asm):02061         * (excluded). On return, A will have the word's code section's checksum.
                      (        forth.asm):02062         * X is preserved.
ED0F                  (        forth.asm):02063         HDRCSUM pshs    x
ED0F                  (        forth.asm):02064         @hdrcs1 eora    ,x+             Update the checksum
                      (        forth.asm):02065                 cmpr    x,y             Upper bound reached?
                      (        forth.asm):02066                 bne     @hdrcs1         No. Process next byte in word's code section
                      (        forth.asm):02067                 puls    x
                      (        forth.asm):02068                 rts
                      (        forth.asm):02069         
ED0F                  (        forth.asm):02070         CSUMFLM fcn     'integrity check failed'
                      (        forth.asm):02071                 ENDC                    RELFEAT
                      (        forth.asm):02072         
                      (        forth.asm):02073         * This non-standard word walks through the dictionary linked list and checks
                      (        forth.asm):02074         * that the words that have the MONFLM flag set in their header's attribute
                      (        forth.asm):02075         * field have a definition that still matches the checksum stored in the word's
                      (        forth.asm):02076         * header. This is meant to be used interactively, as a debugging tool, since
                      (        forth.asm):02077         * multitasking is not supported by this implementation. Therefore no status
                      (        forth.asm):02078         * value is returned. Feedback will only be provided for corrupted words, in
                      (        forth.asm):02079         * the form of a diagnostic message printed to the console.
ED0F 06               (        forth.asm):02080         ICHECK  fcb     6               Non-standard
ED10 49434845434B     (        forth.asm):02081                 fcc     'ICHECK'        ( -- )
ED16 ED04             (        forth.asm):02082                 fdb     MONITOR
                      (        forth.asm):02083                 RFCS
                      (        forth.asm):02084                 IFNE    RELFEAT
                      (        forth.asm):02085                 ldy     DICEND          Upper bound for the code of the last word (exc.)
                      (        forth.asm):02086                 ldx     LSTWAD          LAST points to the header of the last word
ED18                  (        forth.asm):02087         @icklop pshs    x               Current word's header address
                      (        forth.asm):02088                 lda     ,x              Word's header attribute byte to A
                      (        forth.asm):02089                 bita    #MONFLM         Is this a monitored word?
                      (        forth.asm):02090                 beq     @icknxt         No. Point to the next word
                      (        forth.asm):02091                 bsr     HDRSKIP         Skip the header (XT to X), clear A
                      (        forth.asm):02092                 bsr     HDRCSUM         Current word's definition's checksum to A
                      (        forth.asm):02093                 cmpa    -1,x            Does the checksum match the compile time value?
                      (        forth.asm):02094                 beq     @icknxt         Yes. Point to the next word
                      (        forth.asm):02095         * Current word's definition has been modified since its original definition!
                      (        forth.asm):02096                 jsr     PUTCR
                      (        forth.asm):02097                 ldx     ,s              Current word's header address
                      (        forth.asm):02098                 ldb     ,x+
                      (        forth.asm):02099                 andb    #WRLNMSK
                      (        forth.asm):02100                 clra
                      (        forth.asm):02101                 jsr     NPUSH           Word's name base address
                      (        forth.asm):02102                 tfr     d,x
                      (        forth.asm):02103                 jsr     NPUSH           Byte count for TYPE
                      (        forth.asm):02104                 RFXT    jsr,TYPE+7      XT for TYPE
                      (        forth.asm):02105                 RFXT    jsr,SPACE+8     XT for SPACE
                      (        forth.asm):02106                 ldx     #CSUMFLM
                      (        forth.asm):02107                 jsr     PUTS            Feedback for checksum failure
ED18                  (        forth.asm):02108         @icknxt puls    x               Current word's header address
                      (        forth.asm):02109                 tfr     x,y             Point to the end of the previous word's code
                      (        forth.asm):02110                 bsr     HDRSKIP         Skip the header (XT to X), clear A
                      (        forth.asm):02111                 ldx     -3,x            Point to the previous header via the backlink
                      (        forth.asm):02112                 beq     @ickdon         We've just reached the end of the dictionary
                      (        forth.asm):02113                 bra     @icklop
                      (        forth.asm):02114                 ENDC                    RELFEAT
ED18 39               (        forth.asm):02115 (4)     @ickdon rts
                      (        forth.asm):02116         
                      (        forth.asm):02117         * hForth prototyping code below:
                      (        forth.asm):02118         * : ?DO 0 rakeVar !
                      (        forth.asm):02119         *   POSTPONE do?DO
                      (        forth.asm):02120         *   HERE            \ leave ?DO-orig
                      (        forth.asm):02121         *   0 ,
                      (        forth.asm):02122         *   HERE            \ leave DO-dest
                      (        forth.asm):02123         *   bal+ ; IMMEDIATE RESTRICT
ED19 C3               (        forth.asm):02124         QDO     fcb     $C3             ANSI (Core ext)
ED1A 3F444F           (        forth.asm):02125                 fcc     '?DO'           Comp: ( C: -- do-sys )
ED1D ED0F             (        forth.asm):02126                 fdb     ICHECK          Exec: ( n1|u1 n2|u2 -- ) ( R: -- | loop-sys )
                      (        forth.asm):02127                 RFCS
ED1F 8EED46           (        forth.asm):02128 (3)             ldx     #QDOEX
ED22 BDE152           (        forth.asm):02129 (7)             jsr     EMXASXT         Compile "JSR QDOEX"
ED25 0C4B             (        forth.asm):02130 (5)             inc     CYCLO           Update MCC counter
                      (        forth.asm):02131         * The rest of this code looks very much like IF, except that 1 is not pushed
                      (        forth.asm):02132         * to the control flow stack to indicate an IF. This is done later on when
                      (        forth.asm):02133         * the RAKE code is executed by LOOP.
ED27 CC2603           (        forth.asm):02134 (3)             ldd     #BNEOPC
ED2A EDA1             (        forth.asm):02135 (5+2)           std     ,y++
ED2C 867E             (        forth.asm):02136 (2)             lda     #JMPOPC
ED2E A7A0             (        forth.asm):02137 (4+1)           sta     ,y+
ED30 1F21             (        forth.asm):02138 (4)             tfr     y,x
ED32 BDE7DB           (        forth.asm):02139 (7)             jsr     CSPUSH          ANS:do-sys/addr (?DO-orig) is HERE
ED35 3122             (        forth.asm):02140 (4+1)           leay    2,y             2 ALLOT instead of 0 ,
ED37 109F08           (        forth.asm):02141 (5)             sty     DICEND
ED3A 1F21             (        forth.asm):02142 (4)             tfr     y,x             ANS:do-sys/type (DO-dest) is HERE
ED3C BDE7DB           (        forth.asm):02143 (7)             jsr     CSPUSH
ED3F 104F             (        forth.asm):02144 (2)     QDO1    clrd
ED41 DD18             (        forth.asm):02145 (4)             std     RAKEVAR         Used for LEAVE forward references handling
ED43 0C35             (        forth.asm):02146 (5)             inc     BALNCD
ED45 39               (        forth.asm):02147 (4)             rts
                      (        forth.asm):02148         
ED46 BDE9D0           (        forth.asm):02149 (7)     QDOEX   jsr     MIN2PST
ED49 AE42             (        forth.asm):02150 (5+1)           ldx     2,u             Loop limit
ED4B 10AEC4           (        forth.asm):02151 (6+0)           ldy     ,u              Loop index
ED4E 3344             (        forth.asm):02152 (4+1)           leau    4,u             2DROP
ED50 103721           (        forth.asm):02153 (4)             cmpr    y,x
ED53 270A             (        forth.asm):02154 (3)             beq     @skloop         Loop bypassed, return with ZFLAG set
ED55 BDE7FB           (        forth.asm):02155 (7)             jsr     RPUSH           limit >R
ED58 1F21             (        forth.asm):02156 (4)             tfr     y,x
ED5A BDE7FB           (        forth.asm):02157 (7)             jsr     RPUSH           index >R
ED5D 1CFB             (        forth.asm):02158 (2)             andcc   #^ZFLAG         Clear ZFLAG
ED5F 39               (        forth.asm):02159 (4)     @skloop rts
                      (        forth.asm):02160         
                      (        forth.asm):02161         * hForth prototyping code below:
                      (        forth.asm):02162         * : DO 0 rakeVar !   0   POSTPONE doDO   HERE   bal+ ; IMMEDIATE RESTRICT
ED60 C2               (        forth.asm):02163         DO      fcb     $C2             ANSI (Core)
ED61 444F             (        forth.asm):02164                 fcc     'DO'            Comp: ( C: -- do-sys )
ED63 ED19             (        forth.asm):02165                 fdb     QDO             Exec: ( n1|u1 n2|u2 -- ) ( R: -- loop-sys )
                      (        forth.asm):02166                 RFCS
ED65 8EED79           (        forth.asm):02167 (3)             ldx     #DOEX
ED68 BDE152           (        forth.asm):02168 (7)             jsr     EMXASXT         Compile "JSR DOEX"
ED6B 0C4B             (        forth.asm):02169 (5)             inc     CYCLO           Update MCC counter
ED6D 1FC1             (        forth.asm):02170 (4)             tfr     0,x             ANS:do-sys/addr (?DO-orig) is 0 for DO
ED6F BDE7DB           (        forth.asm):02171 (7)             jsr     CSPUSH
ED72 1F21             (        forth.asm):02172 (4)             tfr     y,x             ANS:do-sys/type (DO-dest) is HERE
ED74 BDE7DB           (        forth.asm):02173 (7)             jsr     CSPUSH
ED77 20C6             (        forth.asm):02174 (3)             bra     QDO1
                      (        forth.asm):02175         
ED79 BDFC93           (        forth.asm):02176         DOEX    RFXT    jsr,SWAP+7      XT for SWAP
ED7C BDF0B8           (        forth.asm):02177                 RFXT    jsr,TOR+5       XT for >R (limit)
ED7F 7EF0B8           (        forth.asm):02178                 RFXT    jmp,TOR+5       XT for >R (index)
                      (        forth.asm):02179         
                      (        forth.asm):02180         * hForth prototyping code below:
                      (        forth.asm):02181         * : LOOP POSTPONE doLOOP   rake ; IMMEDIATE RESTRICT
ED82 C4               (        forth.asm):02182         LOOP    fcb     $C4             ANSI (Core)
ED83 4C4F4F50         (        forth.asm):02183                 fcc     'LOOP'          Comp: ( C: do-sys -- )
ED87 ED60             (        forth.asm):02184                 fdb     DO              Exec: ( -- ) ( R:  loop-sys1 --  | loop-sys2 )
                      (        forth.asm):02185                 RFCS
ED89 8EEDC9           (        forth.asm):02186 (3)             ldx     #LOOPEX
ED8C BDE152           (        forth.asm):02187 (7)     LOOP1   jsr     EMXASXT
ED8F 8E2503           (        forth.asm):02188 (3)             ldx     #BCSOPC         Compile "BCS *+5"
ED92 AFA1             (        forth.asm):02189 (5+2)           stx     ,y++
ED94 BDE7E9           (        forth.asm):02190 (7)             jsr     CSPOP           ANS:do-sys/type (DO-dest): loop begin. addr.
ED97 867E             (        forth.asm):02191 (2)             lda     #JMPOPC
ED99 BDE57D           (        forth.asm):02192 (7)             jsr     VARCON2         Compile "JMP DO-dest"
ED9C 109F08           (        forth.asm):02193 (5)             sty     DICEND
ED9F 109F16           (        forth.asm):02194 (5)             sty     FWDREF          Last recorded forward reference
                      (        forth.asm):02195         * RAKE: Y has HERE, which all (if any) LEAVE forward references
                      (        forth.asm):02196         * should resolve to.
EDA2 9E18             (        forth.asm):02197 (4)             ldx     RAKEVAR
EDA4 270B             (        forth.asm):02198 (3)     @lopres beq     @lopdon
EDA6 EC84             (        forth.asm):02199 (5+0)           ldd     ,x              D has the next forward reference
EDA8 10AF84           (        forth.asm):02200 (6+0)           sty     ,x              Resolve LEAVE forward reference
EDAB 1F01             (        forth.asm):02201 (4)             tfr     d,x
EDAD 104D             (        forth.asm):02202 (2)             tstd
EDAF 20F3             (        forth.asm):02203 (3)             bra     @lopres
EDB1 9F18             (        forth.asm):02204 (4)     @lopdon stx     RAKEVAR
EDB3 0A35             (        forth.asm):02205 (5)             dec     BALNCD
EDB5 BDE7E9           (        forth.asm):02206 (7)             jsr     CSPOP           ANS:do-sys/addr (?DO-orig) to X
EDB8 2601             (        forth.asm):02207 (3)             bne     @endqdo         If NZ push it back, push type 1 and call THEN
EDBA 39               (        forth.asm):02208 (4)             rts
                      (        forth.asm):02209         * End a ?DO construct with an implicit THEN.
EDBB 0C35             (        forth.asm):02210 (5)     @endqdo inc     BALNCD
EDBD BDE7DB           (        forth.asm):02211 (7)             jsr     CSPUSH          Push back IF jump address 
EDC0 8E0001           (        forth.asm):02212 (3)             ldx     #1
EDC3 BDE7DB           (        forth.asm):02213 (7)             jsr     CSPUSH          to the control flow stack with type 1 (IF)
EDC6 7EEE71           (        forth.asm):02214                 RFXT    jmp,THEN+7
                      (        forth.asm):02215         
EDC9 8E0001           (        forth.asm):02216 (3)     LOOPEX  ldx     #1
EDCC 2010             (        forth.asm):02217 (3)             bra     PLOPEX1
                      (        forth.asm):02218         
EDCE C5               (        forth.asm):02219         PLOOP   fcb     $C5             ANSI (Core)
EDCF 2B4C4F4F50       (        forth.asm):02220                 fcc     '+LOOP'         Comp: ( C: do-sys -- )
EDD4 ED82             (        forth.asm):02221                 fdb     LOOP            Exec: ( n -- ) ( R: loop-sys1 -- | loop-sys2 )
                      (        forth.asm):02222                 RFCS
EDD6 8EEDDB           (        forth.asm):02223 (3)             ldx     #PLOOPEX
EDD9 20B1             (        forth.asm):02224 (3)             bra     LOOP1
                      (        forth.asm):02225         
                      (        forth.asm):02226         * Anton Ertl's forth-standard.org notes on +LOOP (2019-05-21 05:54:21):
                      (        forth.asm):02227         * "Note that the loop control parameters can be either signed or unsigned,
                      (        forth.asm):02228         * and +LOOP has to work for both. For systems with 2s-complement representation
                      (        forth.asm):02229         * for signed numbers, the way to go is to use circular arithmetic: compute
                      (        forth.asm):02230         * x=(index-limit)+minint, and observe if the addition x+n crosses the boundary
                      (        forth.asm):02231         * between minint and maxint. Many architectures report this through the
                      (        forth.asm):02232         * overflow flag."
                      (        forth.asm):02233         * Here we do precisely what the good Doktor says, setting the carry flag on
                      (        forth.asm):02234         * overflow detection.
EDDB BDE7E9           (        forth.asm):02235 (7)     PLOOPEX jsr     NPOP
EDDE 1F16             (        forth.asm):02236 (4)     PLOPEX1 tfr     x,w             Increment to W
EDE0 BDE817           (        forth.asm):02237 (7)             jsr     RPOP
EDE3 1F12             (        forth.asm):02238 (4)             tfr     x,y             Index to Y
EDE5 BDE817           (        forth.asm):02239 (7)             jsr     RPOP            Limit to X
EDE8 CC8000           (        forth.asm):02240 (3)             ldd     #$8000          Minimum integer on a 2 byte cell system
EDEB 103020           (        forth.asm):02241 (4)             addr    y,d             add the index
EDEE 103210           (        forth.asm):02242 (4)             subr    x,d             substract the limit
EDF1 103060           (        forth.asm):02243 (4)             addr    w,d             add the increment and check for overflow
EDF4 290E             (        forth.asm):02244 (3)             bvs     @limrcd         Limit reached
EDF6 BDE7FB           (        forth.asm):02245 (7)             jsr     RPUSH           Limit to the return stack
EDF9 103062           (        forth.asm):02246 (4)             addr    w,y             Update the index
EDFC 1F21             (        forth.asm):02247 (4)             tfr     y,x
EDFE BDE7FB           (        forth.asm):02248 (7)             jsr     RPUSH           Updated index to the return stack
EE01 1CFE             (        forth.asm):02249 (2)             andcc   #^CFLAG         Clear CFLAG
EE03 39               (        forth.asm):02250 (4)             rts
EE04 1A01             (        forth.asm):02251 (2)     @limrcd orcc    #CFLAG          Set CFLAG
EE06 39               (        forth.asm):02252 (4)             rts
                      (        forth.asm):02253         
EE07 46               (        forth.asm):02254         UNLOOP  fcb     $46             ANSI (Core)
EE08 554E4C4F4F50     (        forth.asm):02255                 fcc     'UNLOOP'        ( -- ) ( R: loop-sys -- )
EE0E EDCE             (        forth.asm):02256                 fdb     PLOOP
                      (        forth.asm):02257                 RFCS
EE10 BDE817           (        forth.asm):02258 (7)             jsr     RPOP            Drop the index from the return stack
EE13 7EE817           (        forth.asm):02259 (3)             jmp     RPOP            and the loop limit as well
                      (        forth.asm):02260         
                      (        forth.asm):02261         * hForth prototyping code below:
                      (        forth.asm):02262         *
                      (        forth.asm):02263         * VARIABLE bal   0 bal !
                      (        forth.asm):02264         * : bal+ 1 bal +! ;
                      (        forth.asm):02265         * : bal- -1 bal +! ;
                      (        forth.asm):02266         * : branch jmpopc C, ; RESTRICT
                      (        forth.asm):02267         * : 0branch jsropc C, npop ,
                      (        forth.asm):02268         *   bneopc ,
                      (        forth.asm):02269         *   branch ; RESTRICT
                      (        forth.asm):02270         * : AHEAD branch HERE 0 ,  \ 0 is an unresolved forward reference
                      (        forth.asm):02271         *   bal+ 1 ; IMMEDIATE RESTRICT
EE16 C5               (        forth.asm):02272         AHEAD   fcb     $C5             ANSI (Programming tools ext)
EE17 4148454144       (        forth.asm):02273                 fcc     'AHEAD'         Comp: ( C: -- orig )
EE1C EE07             (        forth.asm):02274                 fdb     UNLOOP          Exec: ( -- )
                      (        forth.asm):02275                 RFCS
EE1E 109E08           (        forth.asm):02276 (5)             ldy     DICEND
EE21 867E             (        forth.asm):02277 (2)     AHEAD1  lda     #JMPOPC
EE23 A7A0             (        forth.asm):02278 (4+1)           sta     ,y+
EE25 1F21             (        forth.asm):02279 (4)             tfr     y,x             Jump address location (ANS:orig/addr) to X
EE27 3122             (        forth.asm):02280 (4+1)           leay    2,y
EE29 109F08           (        forth.asm):02281 (5)             sty     DICEND          2 ALLOT (instead of 0 ,)
EE2C 0C35             (        forth.asm):02282 (5)             inc     BALNCD
EE2E BDE7DB           (        forth.asm):02283 (7)             jsr     CSPUSH          ANS:orig/addr to the control flow stack
EE31 8E0001           (        forth.asm):02284 (3)             ldx     #1              ANS:orig/type is 1
EE34 7EE7DB           (        forth.asm):02285 (3)             jmp     CSPUSH
                      (        forth.asm):02286         
                      (        forth.asm):02287         * hForth prototyping code below:
                      (        forth.asm):02288         * : IF 0branch HERE 0 ,  \ 0 is an unresolved forward reference
                      (        forth.asm):02289         *   bal+ 1 ; IMMEDIATE RESTRICT
EE37 C2               (        forth.asm):02290         IF      fcb     $C2             ANSI (Core)
EE38 4946             (        forth.asm):02291                 fcc     'IF'            Comp: ( C: -- orig )
EE3A EE16             (        forth.asm):02292                 fdb     AHEAD           Exec: ( x -- )
                      (        forth.asm):02293                 RFCS
EE3C 8EE7E9           (        forth.asm):02294 (3)             ldx     #NPOP
EE3F BDE152           (        forth.asm):02295 (7)             jsr     EMXASXT         Compile "JSR NPOP"
EE42 CC2603           (        forth.asm):02296 (3)             ldd     #BNEOPC
EE45 EDA1             (        forth.asm):02297 (5+2)           std     ,y++            Compile "BNE *+5"
EE47 0C4B             (        forth.asm):02298 (5)             inc     CYCLO           Update MCC counter
EE49 20D6             (        forth.asm):02299 (3)             bra     AHEAD1
                      (        forth.asm):02300         
                      (        forth.asm):02301         * Functionally equivalent to:
                      (        forth.asm):02302         * : UNLESS POSTPONE 0= POSTPONE IF ; IMMEDIATE RESTRICT
EE4B C6               (        forth.asm):02303         UNLESS  fcb     $C6             Non-standard (Perl inspired)
EE4C 554E4C455353     (        forth.asm):02304                 fcc     'UNLESS'
EE52 EE37             (        forth.asm):02305                 fdb     IF
                      (        forth.asm):02306                 RFCS
EE54 8EEF5C           (        forth.asm):02307                 RFXT    ldx,#NULP+5     XT for 0=
EE57 BDE152           (        forth.asm):02308 (7)             jsr     EMXASXT
EE5A 20E0             (        forth.asm):02309                 RFXT    bra,IF+5        XT for IF
                      (        forth.asm):02310         
                      (        forth.asm):02311         * hForth prototyping code below:
                      (        forth.asm):02312         * : ELSE POSTPONE AHEAD 2SWAP POSTPONE THEN ; IMMEDIATE RESTRICT
EE5C C4               (        forth.asm):02313         ELSE    fcb     $C4             ANSI (Core)
EE5D 454C5345         (        forth.asm):02314                 fcc     'ELSE'          Comp: ( C: orig1 -- orig2 )
EE61 EE4B             (        forth.asm):02315                 fdb     UNLESS          Exec: ( -- )
                      (        forth.asm):02316                 RFCS
EE63 8DB9             (        forth.asm):02317                 RFXT    bsr,AHEAD+8
EE65 BDF49C           (        forth.asm):02318                 RFXT    jsr,TWOSWAP+8   This should be read as "1 CS-ROLL"
EE68 2007             (        forth.asm):02319                 RFXT    bra,THEN+7
                      (        forth.asm):02320         
                      (        forth.asm):02321         * hForth prototyping code below:
                      (        forth.asm):02322         * : THEN 1- ABORT" Unbalanced IF/ELSE/THEN construct"
                      (        forth.asm):02323         *   HERE SWAP ! bal-
                      (        forth.asm):02324         *   HERE fwdref ! ; IMMEDIATE RESTRICT
EE6A C4               (        forth.asm):02325         THEN    fcb     $C4             ANSI (Core)
EE6B 5448454E         (        forth.asm):02326                 fcc     'THEN'          Comp: ( C: orig -- )
EE6F EE5C             (        forth.asm):02327                 fdb     ELSE            Exec: ( -- )
                      (        forth.asm):02328                 RFCS
EE71 BDE7E9           (        forth.asm):02329 (7)             jsr     CSPOP           ANS:orig/type to X
EE74 301F             (        forth.asm):02330 (4+1)           leax    -1,x
EE76 1026F9BB         (        forth.asm):02331 (5)             lbne    BALERR          Illegal construct, type must be 1
EE7A 109E08           (        forth.asm):02332 (5)             ldy     DICEND
EE7D BDE7E9           (        forth.asm):02333 (7)             jsr     CSPOP           ANS:orig/addr to X
EE80 10AF84           (        forth.asm):02334 (6+0)           sty     ,x              Resolve forward reference to HERE
EE83 109F16           (        forth.asm):02335 (5)             sty     FWDREF          Last recorded forward reference
EE86 0A35             (        forth.asm):02336 (5)             dec     BALNCD
EE88 39               (        forth.asm):02337 (4)             rts
                      (        forth.asm):02338         
EE89 01               (        forth.asm):02339         EQ      fcb     1               ANSI (Core)
EE8A 3D               (        forth.asm):02340                 fcc     '='             ( x1 x2 -- flag )
EE8B EE6A             (        forth.asm):02341                 fdb     THEN
                      (        forth.asm):02342                 RFCS
EE8D BDE9D0           (        forth.asm):02343 (7)             jsr     MIN2PST         At least two cells need to be stacked up
EE90 10ECC4           (        forth.asm):02344 (8+0)           ldq     ,u              D:W has X2:X1
EE93 3342             (        forth.asm):02345 (4+1)           leau    2,u             Drop one cell from the user stack
EE95 1FC1             (        forth.asm):02346 (4)             tfr     0,x
EE97 103760           (        forth.asm):02347 (4)             cmpr    w,d
EE9A 2602             (        forth.asm):02348 (3)             bne     @eq1
EE9C 301F             (        forth.asm):02349 (4+1)           leax    -1,x            Return the ANSI true
EE9E AFC4             (        forth.asm):02350 (5+0)   @eq1    stx     ,u              Store in place to FLAG
EEA0 39               (        forth.asm):02351 (4)             rts
                      (        forth.asm):02352         
EEA1 02               (        forth.asm):02353         DIFF    fcb     2               ANSI (Core ext)
EEA2 3C3E             (        forth.asm):02354                 fcc     '<>'            ( N1 N2 -- FLAG )
EEA4 EE89             (        forth.asm):02355                 fdb     EQ
                      (        forth.asm):02356                 RFCS
EEA6 BDE9D0           (        forth.asm):02357 (7)             jsr     MIN2PST         At least two cells need to be stacked up
EEA9 10ECC4           (        forth.asm):02358 (8+0)           ldq     ,u              D:W has N2:N1
EEAC 3342             (        forth.asm):02359 (4+1)           leau    2,u             Drop one cell from the user stack
EEAE 1FC1             (        forth.asm):02360 (4)             tfr     0,x
EEB0 103760           (        forth.asm):02361 (4)             cmpr    w,d
EEB3 2702             (        forth.asm):02362 (3)             beq     @diff1
EEB5 301F             (        forth.asm):02363 (4+1)           leax    -1,x            Return the ANSI true
EEB7 AFC4             (        forth.asm):02364 (5+0)   @diff1  stx     ,u              Store in place to FLAG
EEB9 39               (        forth.asm):02365 (4)             rts
                      (        forth.asm):02366         
EEBA 02               (        forth.asm):02367         SINFEQ  fcb     2               Non-standard (Not even ANSI!)
EEBB 3C3D             (        forth.asm):02368                 fcc     '<='            Required for the ORNL fixed sieve benchmark
EEBD EEA1             (        forth.asm):02369                 fdb     DIFF
                      (        forth.asm):02370                 RFCS
EEBF BDE9D0           (        forth.asm):02371 (7)             jsr     MIN2PST         At least two cells need to be stacked up
EEC2 10AEC4           (        forth.asm):02372 (6+0)           ldy     ,u
EEC5 AE42             (        forth.asm):02373 (5+1)           ldx     2,u
EEC7 104F             (        forth.asm):02374 (2)             clrd
EEC9 103721           (        forth.asm):02375 (4)             cmpr    y,x
EECC 2E02             (        forth.asm):02376 (3)             bgt     @sinfq1
EECE 104A             (        forth.asm):02377 (2)             decd                    Return the ANSI true
EED0 3342             (        forth.asm):02378 (4+1)   @sinfq1 leau    2,u             Drop one cell
EED2 EDC4             (        forth.asm):02379 (5+0)           std     ,u
EED4 39               (        forth.asm):02380 (4)             rts
                      (        forth.asm):02381         
                      (        forth.asm):02382                 IFNE    DEBUG
EED5                  (        forth.asm):02383         CC      fcb     2               Non-standard. Used for debugging
                      (        forth.asm):02384                 fcc     'CC'
                      (        forth.asm):02385                 fdb     SINFEQ
                      (        forth.asm):02386                 RFCS
                      (        forth.asm):02387                 ldx     CCREG
                      (        forth.asm):02388                 jmp     NPUSH
                      (        forth.asm):02389                 ENDC                    DEBUG
                      (        forth.asm):02390         
EED5 03               (        forth.asm):02391         XOR     fcb     3               ANSI (Core)
EED6 584F52           (        forth.asm):02392                 fcc     'XOR'           ( x1 x2 -- x3 )
                      (        forth.asm):02393                 IFNE    DEBUG
                      (        forth.asm):02394                 fdb     CC
                      (        forth.asm):02395                 ELSE
EED9 EEBA             (        forth.asm):02396                 fdb     SINFEQ
                      (        forth.asm):02397                 ENDC                    DEBUG
                      (        forth.asm):02398                 RFCS
EEDB BDE9D0           (        forth.asm):02399 (7)             jsr     MIN2PST         At least two cells need to be stacked up
EEDE ECC4             (        forth.asm):02400 (5+0)           ldd     ,u              X2 to D
EEE0 10A642           (        forth.asm):02401 (6+1)           ldw     2,u             X1 to W
EEE3 103660           (        forth.asm):02402 (4)             eorr    w,d
EEE6 3342             (        forth.asm):02403 (4+1)   XOR1    leau    2,u
EEE8 EDC4             (        forth.asm):02404 (5+0)           std     ,u              X1 ^ X2 to X3
EEEA 39               (        forth.asm):02405 (4)             rts
                      (        forth.asm):02406         
EEEB 02               (        forth.asm):02407         OR      fcb     2               ANSI (Core)
EEEC 4F52             (        forth.asm):02408                 fcc     'OR'            ( x1 x2 -- x3 )
EEEE EED5             (        forth.asm):02409                 fdb     XOR
                      (        forth.asm):02410                 RFCS
EEF0 BDE9D0           (        forth.asm):02411 (7)             jsr     MIN2PST         At least two cells need to be stacked up
EEF3 ECC4             (        forth.asm):02412 (5+0)           ldd     ,u              X2 to D
EEF5 10A642           (        forth.asm):02413 (6+1)           ldw     2,u             X1 to W
EEF8 103560           (        forth.asm):02414 (4)             orr     w,d
EEFB 20E9             (        forth.asm):02415 (3)             bra     XOR1            X1 | X2 to X3
                      (        forth.asm):02416         
EEFD 03               (        forth.asm):02417         AND     fcb     3               ANSI (Core)
EEFE 414E44           (        forth.asm):02418                 fcc     'AND'           ( x1 x2 -- x3 )
EF01 EEEB             (        forth.asm):02419                 fdb     OR
                      (        forth.asm):02420                 RFCS
EF03 BDE9D0           (        forth.asm):02421 (7)             jsr     MIN2PST         At least two cells need to be stacked up
EF06 ECC4             (        forth.asm):02422 (5+0)           ldd     ,u              X2 to D
EF08 10A642           (        forth.asm):02423 (6+1)           ldw     2,u             X1 to W
EF0B 103460           (        forth.asm):02424 (4)             andr    w,d
EF0E 20D6             (        forth.asm):02425 (3)             bra     XOR1            X1 & X2 to X3
                      (        forth.asm):02426         
EF10 06               (        forth.asm):02427         INVERT  fcb     6               ANSI (Core)
EF11 494E56455254     (        forth.asm):02428                 fcc     'INVERT'        ( x1 -- x2 )
EF17 EEFD             (        forth.asm):02429                 fdb     AND
                      (        forth.asm):02430                 RFCS
EF19 BDE7E9           (        forth.asm):02431 (7)             jsr     NPOP            X1 to X
EF1C 1F10             (        forth.asm):02432 (4)             tfr     x,d
EF1E 1043             (        forth.asm):02433 (2)             comd
EF20 1F01             (        forth.asm):02434 (4)             tfr     d,x             X2 to X
EF22 3610             (        forth.asm):02435                 UCNPUSH                 and to the data stack
EF24 39               (        forth.asm):02436 (4)             rts
                      (        forth.asm):02437         
EF25 02               (        forth.asm):02438         ZGREAT  fcb     2               ANSI (Core ext)
EF26 303E             (        forth.asm):02439                 fcc     '0>'
EF28 EF10             (        forth.asm):02440                 fdb     INVERT
                      (        forth.asm):02441                 RFCS
EF2A BDE7E9           (        forth.asm):02442 (7)             jsr     NPOP
EF2D 1F10             (        forth.asm):02443 (4)             tfr     x,d
EF2F 104D             (        forth.asm):02444 (2)             tstd
EF31 2F06             (        forth.asm):02445 (3)             ble     @zgrt1
EF33 8EFFFF           (        forth.asm):02446 (3)             ldx     #-1             Return the ANSI true
EF36 3610             (        forth.asm):02447                 UCNPUSH
EF38 39               (        forth.asm):02448 (4)             rts
EF39 1FC1             (        forth.asm):02449 (4)     @zgrt1  tfr     0,x
EF3B 3610             (        forth.asm):02450                 UCNPUSH
EF3D 39               (        forth.asm):02451 (4)             rts
                      (        forth.asm):02452         
EF3E 02               (        forth.asm):02453         ZLESS   fcb     2               ANSI (Core)
EF3F 303C             (        forth.asm):02454                 fcc     '0<'            ( n -- flag )
EF41 EF25             (        forth.asm):02455                 fdb     ZGREAT
                      (        forth.asm):02456                 RFCS
EF43 BDE7E9           (        forth.asm):02457 (7)             jsr     NPOP
EF46 1F10             (        forth.asm):02458 (4)             tfr     x,d
EF48 104D             (        forth.asm):02459 (2)             tstd
EF4A 2C06             (        forth.asm):02460 (3)             bge     @zlss1
EF4C 8EFFFF           (        forth.asm):02461 (3)             ldx     #-1             Return the ANSI true
EF4F 3610             (        forth.asm):02462                 UCNPUSH
EF51 39               (        forth.asm):02463 (4)             rts
EF52 1FC1             (        forth.asm):02464 (4)     @zlss1  tfr     0,x
EF54 3610             (        forth.asm):02465                 UCNPUSH
EF56 39               (        forth.asm):02466 (4)             rts
                      (        forth.asm):02467         
EF57 02               (        forth.asm):02468         NULP    fcb     2               ANSI (Core)
EF58 303D             (        forth.asm):02469                 fcc     '0='            ( x -- flag )
EF5A EF3E             (        forth.asm):02470                 fdb     ZLESS
                      (        forth.asm):02471                 RFCS
EF5C BDE7E9           (        forth.asm):02472 (7)             jsr     NPOP
EF5F 1F10             (        forth.asm):02473 (4)             tfr     x,d
EF61 1FC1             (        forth.asm):02474 (4)             tfr     0,x
EF63 104D             (        forth.asm):02475 (2)             tstd
EF65 2703             (        forth.asm):02476 (3)             beq     @nulp2
EF67 3610             (        forth.asm):02477         @nulp1  UCNPUSH
EF69 39               (        forth.asm):02478 (4)             rts
EF6A 301F             (        forth.asm):02479 (4+1)   @nulp2  leax    -1,x            Return the ANSI true
EF6C 20F9             (        forth.asm):02480 (3)             bra     @nulp1
                      (        forth.asm):02481         
EF6E 03               (        forth.asm):02482         ZNEQ    fcb     3               ANSI (Core ext)
EF6F 303C3E           (        forth.asm):02483                 fcc     '0<>'
EF72 EF57             (        forth.asm):02484                 fdb     NULP
                      (        forth.asm):02485                 RFCS
EF74 8DE6             (        forth.asm):02486                 RFXT    bsr,NULP+5
EF76 20A1             (        forth.asm):02487                 RFXT    bra,INVERT+9
                      (        forth.asm):02488         
                      (        forth.asm):02489         * Maybe this one should go. It is not specified in the ANS94 reference
                      (        forth.asm):02490         * document but Conklin/Rather have it as "common usage."
EF78 03               (        forth.asm):02491         NOT     fcb     3               79-STANDARD (REQ165)
EF79 4E4F54           (        forth.asm):02492                 fcc     'NOT'
EF7C EF6E             (        forth.asm):02493                 fdb     ZNEQ
                      (        forth.asm):02494                 RFCS
EF7E 20DC             (        forth.asm):02495                 RFXT    bra,NULP+5      XT for 0=
                      (        forth.asm):02496         
EF80 02               (        forth.asm):02497         USUP    fcb     2               ANSI (Core Ext)
EF81 553E             (        forth.asm):02498                 fcc     'U>'
EF83 EF78             (        forth.asm):02499                 fdb     NOT
                      (        forth.asm):02500                 RFCS
EF85 BDE582           (        forth.asm):02501 (7)             jsr     CMP2
EF88 2302             (        forth.asm):02502 (3)             bls     @usup1
EF8A 301F             (        forth.asm):02503 (4+1)           leax    -1,x            Return the ANSI true
EF8C 3610             (        forth.asm):02504         @usup1  UCNPUSH
EF8E 39               (        forth.asm):02505 (4)             rts
                      (        forth.asm):02506         
EF8F 02               (        forth.asm):02507         UINF    fcb     2               ANSI (Core)
EF90 553C             (        forth.asm):02508                 fcc     'U<'            ( u1 u2 -- flag )
EF92 EF80             (        forth.asm):02509                 fdb     USUP
                      (        forth.asm):02510                 RFCS
EF94 BDE582           (        forth.asm):02511 (7)             jsr     CMP2
EF97 2402             (        forth.asm):02512 (3)             bhs     @uinf1          Z is set
EF99 301F             (        forth.asm):02513 (4+1)           leax    -1,x            Return the ANSI true
EF9B 3610             (        forth.asm):02514         @uinf1  UCNPUSH
EF9D 39               (        forth.asm):02515 (4)             rts
                      (        forth.asm):02516         
EF9E 01               (        forth.asm):02517         SUP     fcb     1               ANSI (Core)
EF9F 3E               (        forth.asm):02518                 fcc     '>'             ( n1 n2 -- flag )
EFA0 EF8F             (        forth.asm):02519                 fdb     UINF
                      (        forth.asm):02520                 RFCS
EFA2 BDE582           (        forth.asm):02521 (7)             jsr     CMP2
EFA5 2F02             (        forth.asm):02522 (3)             ble     @sup1
EFA7 301F             (        forth.asm):02523 (4+1)           leax    -1,x            Return the ANSI true
EFA9 3610             (        forth.asm):02524         @sup1   UCNPUSH
EFAB 39               (        forth.asm):02525 (4)             rts
                      (        forth.asm):02526         
EFAC 01               (        forth.asm):02527         INF     fcb     1               ANSI (Core)
EFAD 3C               (        forth.asm):02528                 fcc     '<'             ( n1 n2 -- flag )
EFAE EF9E             (        forth.asm):02529                 fdb     SUP
                      (        forth.asm):02530                 RFCS
EFB0 BDE582           (        forth.asm):02531 (7)             jsr     CMP2
EFB3 2C02             (        forth.asm):02532 (3)             bge     @inf1
EFB5 301F             (        forth.asm):02533 (4+1)           leax    -1,x            Return the ANSI true
EFB7 3610             (        forth.asm):02534         @inf1   UCNPUSH
EFB9 39               (        forth.asm):02535 (4)             rts
                      (        forth.asm):02536         
EFBA 03               (        forth.asm):02537         MAX     fcb     3               ANSI (Core)
EFBB 4D4158           (        forth.asm):02538                 fcc     'MAX'           ( n1 n2 -- n3 )
EFBE EFAC             (        forth.asm):02539                 fdb     INF
                      (        forth.asm):02540                 RFCS
EFC0 BDE7E9           (        forth.asm):02541 (7)             jsr     NPOP
EFC3 1F12             (        forth.asm):02542 (4)             tfr     x,y             N2 to Y
EFC5 BDE7E9           (        forth.asm):02543 (7)             jsr     NPOP            N1 to X
EFC8 103721           (        forth.asm):02544 (4)             cmpr    y,x
EFCB 2C02             (        forth.asm):02545 (3)             bge     @pshrv1
EFCD 1F21             (        forth.asm):02546 (4)             tfr     y,x
EFCF 3610             (        forth.asm):02547         @pshrv1 UCNPUSH                 (X) N3 to the data stack
EFD1 39               (        forth.asm):02548 (4)             rts
                      (        forth.asm):02549         
EFD2 03               (        forth.asm):02550         MIN     fcb     3               ANSI (Core)
EFD3 4D494E           (        forth.asm):02551                 fcc     'MIN'           ( n1 n2 -- n3 )
EFD6 EFBA             (        forth.asm):02552                 fdb     MAX
                      (        forth.asm):02553                 RFCS
EFD8 BDE7E9           (        forth.asm):02554 (7)             jsr     NPOP
EFDB 1F12             (        forth.asm):02555 (4)             tfr     x,y             N2 to Y
EFDD BDE7E9           (        forth.asm):02556 (7)             jsr     NPOP            N1 to X
EFE0 103721           (        forth.asm):02557 (4)             cmpr    y,x
EFE3 2F02             (        forth.asm):02558 (3)             ble     @pshrv2
EFE5 1F21             (        forth.asm):02559 (4)             tfr     y,x
EFE7 3610             (        forth.asm):02560         @pshrv2 UCNPUSH                 (X) N3 to the data stack
EFE9 39               (        forth.asm):02561 (4)             rts
                      (        forth.asm):02562         
EFEA 03               (        forth.asm):02563         ABS     fcb     3               ANSI (Core)
EFEB 414253           (        forth.asm):02564                 fcc     'ABS'           ( n -- u )
EFEE EFD2             (        forth.asm):02565                 fdb     MIN
                      (        forth.asm):02566                 RFCS
EFF0 BDE7E9           (        forth.asm):02567 (7)             jsr     NPOP
EFF3 1F10             (        forth.asm):02568 (4)             tfr     x,d             N to D
EFF5 104D             (        forth.asm):02569 (2)             tstd
EFF7 2A04             (        forth.asm):02570 (3)             bpl     @abs1
EFF9 1040             (        forth.asm):02571 (2)             negd
EFFB 1F01             (        forth.asm):02572 (4)             tfr     d,x
EFFD 3610             (        forth.asm):02573         @abs1   UCNPUSH                 X to U
EFFF 39               (        forth.asm):02574 (4)             rts
                      (        forth.asm):02575         
F000 06               (        forth.asm):02576         NEGATE  fcb     6               ANSI (Core)
F001 4E4547415445     (        forth.asm):02577                 fcc     'NEGATE'        ( n1 -- n2 )
F007 EFEA             (        forth.asm):02578                 fdb     ABS
                      (        forth.asm):02579                 RFCS
F009 BDE9CB           (        forth.asm):02580 (7)             jsr     MIN1PST         At least one cell needs to be stacked up
F00C ECC4             (        forth.asm):02581 (5+0)           ldd     ,u
F00E 1040             (        forth.asm):02582 (2)             negd
F010 EDC4             (        forth.asm):02583 (5+0)           std     ,u
F012 39               (        forth.asm):02584 (4)             rts
                      (        forth.asm):02585         
                      (        forth.asm):02586         * hForth prototyping code below:
                      (        forth.asm):02587         * : BEGIN HERE 0 bal+ ; IMMEDIATE RESTRICT
F013 C5               (        forth.asm):02588         BEGIN   fcb     $C5             ANSI (Core)
F014 424547494E       (        forth.asm):02589                 fcc     'BEGIN'         Comp: ( C: -- dest )
F019 F000             (        forth.asm):02590                 fdb     NEGATE          Exec: ( -- )
                      (        forth.asm):02591                 RFCS
F01B 0C35             (        forth.asm):02592 (5)             inc     BALNCD
F01D 9E08             (        forth.asm):02593 (4)             ldx     DICEND          HERE is ANS:dest/addr
F01F BDE7DB           (        forth.asm):02594 (7)             jsr     CSPUSH          to the control flow stack
F022 1FC1             (        forth.asm):02595 (4)             tfr     0,x             ANS:dest/type is zero
F024 7EE7DB           (        forth.asm):02596 (3)             jmp     CSPUSH          to the control flow stack
                      (        forth.asm):02597         
                      (        forth.asm):02598         * hForth prototyping code below:
                      (        forth.asm):02599         * : AGAIN ABORT" Unbalanced BEGIN/AGAIN construct"
                      (        forth.asm):02600         *   branch , bal- ; IMMEDIATE RESTRICT
F027 C5               (        forth.asm):02601         AGAIN   fcb     $C5             ANSI (Core ext)
F028 414741494E       (        forth.asm):02602                 fcc     'AGAIN'         Comp: ( C: dest -- )
F02D F013             (        forth.asm):02603                 fdb     BEGIN           Exec: ( -- )
                      (        forth.asm):02604                 RFCS
F02F BDE7E9           (        forth.asm):02605 (7)             jsr     CSPOP           ANS:dest/type to X (CC is set)
F032 1026F7FF         (        forth.asm):02606 (5)             lbne    BALERR          type must be zero
F036 BDE7E9           (        forth.asm):02607 (7)             jsr     CSPOP           ANS:dest/addr to X
F039 109E08           (        forth.asm):02608 (5)             ldy     DICEND
F03C 109F14           (        forth.asm):02609 (5)             sty     JSRLAST
F03F 867E             (        forth.asm):02610 (2)     AGAIN1  lda     #JMPOPC         JMP extended
F041 BDE57D           (        forth.asm):02611 (7)             jsr     VARCON2
F044 109F08           (        forth.asm):02612 (5)             sty     DICEND
F047 0A35             (        forth.asm):02613 (5)             dec     BALNCD
F049 0C4B             (        forth.asm):02614 (5)             inc     CYCLO           Update MCC counter
F04B 39               (        forth.asm):02615 (4)             rts
                      (        forth.asm):02616         
                      (        forth.asm):02617         * The standard does not require this as being immediate but I do.
F04C C4               (        forth.asm):02618         EXIT    fcb     $C4             ANSI (Core)
F04D 45584954         (        forth.asm):02619                 fcc     'EXIT'          ( -- )
F051 F027             (        forth.asm):02620                 fdb     AGAIN
                      (        forth.asm):02621                 RFCS
F053 9E08             (        forth.asm):02622 (4)             ldx     DICEND
F055 301D             (        forth.asm):02623 (4+1)           leax    -3,x
F057 109E14           (        forth.asm):02624 (5)             ldy     JSRLAST
F05A 103721           (        forth.asm):02625 (4)             cmpr    y,x
F05D 2605             (        forth.asm):02626 (3)             bne     @noopt          Tail JMP optimization is not possible
F05F 867E             (        forth.asm):02627 (2)             lda     #JMPOPC         JMP extended
F061 A784             (        forth.asm):02628 (4+0)           sta     ,x
F063 39               (        forth.asm):02629 (4)             rts
F064 3003             (        forth.asm):02630 (4+1)   @noopt  leax    3,x             Point back to HERE
F066 8639             (        forth.asm):02631 (2)             lda     #RTSOPC         RTS inherent
F068 A780             (        forth.asm):02632 (4+1)           sta     ,x+
F06A 9F08             (        forth.asm):02633 (4)             stx     DICEND
F06C 39               (        forth.asm):02634 (4)             rts
                      (        forth.asm):02635         
                      (        forth.asm):02636         * hForth prototyping code below:
                      (        forth.asm):02637         * : UNTIL ABORT" Unbalanced BEGIN/UNTIL construct"
                      (        forth.asm):02638         *   0branch , bal- ; IMMEDIATE RESTRICT
F06D C5               (        forth.asm):02639         UNTIL   fcb     $C5             ANSI (Core)
F06E 554E54494C       (        forth.asm):02640                 fcc     'UNTIL'         Comp: ( C: dest -- )
F073 F04C             (        forth.asm):02641                 fdb     EXIT            Exec: (x -- )
                      (        forth.asm):02642                 RFCS
F075 BDE7E9           (        forth.asm):02643 (7)             jsr     CSPOP           ANS:dest/type to X (CC is set)
F078 1026F7B9         (        forth.asm):02644 (5)             lbne    BALERR          type must be zero
F07C 8EE7E9           (        forth.asm):02645 (3)             ldx     #NPOP
F07F BDE152           (        forth.asm):02646 (7)             jsr     EMXASXT         Compile "JSR NPOP"
F082 8E2603           (        forth.asm):02647 (3)             ldx     #BNEOPC         Compile "BNE *+5"
F085 AFA1             (        forth.asm):02648 (5+2)           stx     ,y++
F087 BDE7E9           (        forth.asm):02649 (7)             jsr     CSPOP           ANS:dest/addr to X
F08A 20B3             (        forth.asm):02650 (3)             bra     AGAIN1
                      (        forth.asm):02651         
                      (        forth.asm):02652         * hForth prototyping code below:
                      (        forth.asm):02653         * : WHILE POSTPONE IF 2SWAP ; RESTRICT IMMEDIATE
F08C C5               (        forth.asm):02654         WHILE   fcb     $C5             ANSI (Core)
F08D 5748494C45       (        forth.asm):02655                 fcc     'WHILE'         Comp: ( C: dest -- orig dest )
F092 F06D             (        forth.asm):02656                 fdb     UNTIL           Exec: ( x -- )
                      (        forth.asm):02657                 RFCS
F094 BDEE3C           (        forth.asm):02658                 RFXT    jsr,IF+5
F097 7EF49C           (        forth.asm):02659                 RFXT    jmp,TWOSWAP+8   This should be read as "1 CS-ROLL"
                      (        forth.asm):02660         
                      (        forth.asm):02661         * hForth prototyping code below:
                      (        forth.asm):02662         * : REPEAT POSTPONE AGAIN POSTPONE THEN ; RESTRICT IMMEDIATE
F09A C6               (        forth.asm):02663         REPEAT  fcb     $C6             ANSI (Core)
F09B 524550454154     (        forth.asm):02664                 fcc     'REPEAT'        Comp: ( C: orig dest -- )
F0A1 F08C             (        forth.asm):02665                 fdb     WHILE           Exec: ( -- )
                      (        forth.asm):02666                 RFCS
F0A3 8D8A             (        forth.asm):02667                 RFXT    bsr,AGAIN+8
F0A5 7EEE71           (        forth.asm):02668                 RFXT    jmp,THEN+7
                      (        forth.asm):02669         
F0A8 42               (        forth.asm):02670         RFROM   fcb     $42             ANSI (Core)
F0A9 523E             (        forth.asm):02671                 fcc     'R>'            ( -- x ) ( R:  x -- )
F0AB F09A             (        forth.asm):02672                 fdb     REPEAT
                      (        forth.asm):02673                 RFCS
F0AD BDE817           (        forth.asm):02674 (7)             jsr     RPOP
F0B0 7EE7DB           (        forth.asm):02675 (3)             jmp     NPUSH
                      (        forth.asm):02676         
F0B3 42               (        forth.asm):02677         TOR     fcb     $42             ANSI (Core)
F0B4 3E52             (        forth.asm):02678                 fcc     '>R'            ( x -- ) ( R:  -- x )
F0B6 F0A8             (        forth.asm):02679                 fdb     RFROM
                      (        forth.asm):02680                 RFCS
F0B8 BDE7E9           (        forth.asm):02681 (7)             jsr     NPOP
F0BB 7EE7FB           (        forth.asm):02682 (3)             jmp     RPUSH
                      (        forth.asm):02683         
                      (        forth.asm):02684         * hForth prototyping code below:
                      (        forth.asm):02685         * : LEAVE POSTPONE UNLOOP POSTPONE branch
                      (        forth.asm):02686         *   HERE rakeVar DUP @ , ! ; IMMEDIATE RESTRICT
                      (        forth.asm):02687         * rakeVar points to the head of a linked list of forward references to
                      (        forth.asm):02688         * be resolved later by LOOP/+LOOP.
F0BE C5               (        forth.asm):02689         LEAVE   fcb     $C5             ANSI (Core)
F0BF 4C45415645       (        forth.asm):02690                 fcc     'LEAVE'         Exec: ( -- ) ( R: loop-sys -- )
F0C4 F0B3             (        forth.asm):02691                 fdb     TOR
                      (        forth.asm):02692                 RFCS
F0C6 8EEE10           (        forth.asm):02693                 RFXT    ldx,#UNLOOP+9
F0C9 BDE152           (        forth.asm):02694 (7)             jsr     EMXASXT         POSTPONE UNLOOP
F0CC 867E             (        forth.asm):02695 (2)             lda     #JMPOPC
F0CE A7A0             (        forth.asm):02696 (4+1)           sta     ,y+             POSTPONE branch
F0D0 1F21             (        forth.asm):02697 (4)             tfr     y,x             save HERE (fwd ref. to be resolved by LOOP)
F0D2 DC18             (        forth.asm):02698 (4)             ldd     RAKEVAR
F0D4 EDA1             (        forth.asm):02699 (5+2)           std     ,y++            rakeVar @ ,
F0D6 9F18             (        forth.asm):02700 (4)             stx     RAKEVAR         HERE rakeVar !
F0D8 109F08           (        forth.asm):02701 (5)             sty     DICEND
F0DB 39               (        forth.asm):02702 (4)             rts
                      (        forth.asm):02703         
F0DC 41               (        forth.asm):02704         INDI    fcb     $41             ANSI (Core)
F0DD 49               (        forth.asm):02705                 fcc     'I'             ( -- n|u ) ( R:  loop-sys -- loop-sys )
F0DE F0BE             (        forth.asm):02706                 fdb     LEAVE
                      (        forth.asm):02707                 RFCS
F0E0 5F               (        forth.asm):02708 (1)             clrb
F0E1 9637             (        forth.asm):02709 (3)     RPICKN  lda     RDEPTH
F0E3 103789           (        forth.asm):02710 (4)             cmpr    a,b
F0E6 240A             (        forth.asm):02711 (3)             bhs     @rpick1
F0E8 9E00             (        forth.asm):02712 (4)             ldx     RSP
F0EA 4F               (        forth.asm):02713 (1)             clra
F0EB 1048             (        forth.asm):02714 (2)             lsld                    Times 2
F0ED AE8B             (        forth.asm):02715 (5+2)           ldx     d,x
F0EF 7EE7DB           (        forth.asm):02716 (3)             jmp     NPUSH           We cannot use UCNPUSH here
F0F2 C608             (        forth.asm):02717 (2)     @rpick1 ldb     #8              Return stack underflow
F0F4 BDE74C           (        forth.asm):02718 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02719         
F0F7 42               (        forth.asm):02720         RFETCH  fcb     $42             ANSI (Core)
F0F8 5240             (        forth.asm):02721                 fcc     'R@'            ( -- x ) ( R:  x -- x )
F0FA F0DC             (        forth.asm):02722                 fdb     INDI
                      (        forth.asm):02723                 RFCS
F0FC 20E2             (        forth.asm):02724                 RFXT    bra,INDI+4      XT for I
                      (        forth.asm):02725         
F0FE 42               (        forth.asm):02726         INDIP   fcb     $42             79-STANDARD (REF)
F0FF 4927             (        forth.asm):02727                 fdb     $4927
F101 F0F7             (        forth.asm):02728                 fdb     RFETCH
                      (        forth.asm):02729                 RFCS
F103 C601             (        forth.asm):02730 (2)             ldb     #1
F105 20DA             (        forth.asm):02731 (3)             bra     RPICKN
                      (        forth.asm):02732         
F107 41               (        forth.asm):02733         INDJ    fcb     $41             ANSI (Core)
F108 4A               (        forth.asm):02734                 fcc     'J'             Exec: ( -- n|u ) ( R: lsy1 lsy2 -- lsy1 lsy2 )
F109 F0FE             (        forth.asm):02735                 fdb     INDIP
                      (        forth.asm):02736                 RFCS
F10B C602             (        forth.asm):02737 (2)             ldb     #2
F10D 20D2             (        forth.asm):02738 (3)             bra     RPICKN
                      (        forth.asm):02739         
F10F 42               (        forth.asm):02740         INDJP   fcb     $42             Non-standard
F110 4A27             (        forth.asm):02741                 fdb     $4A27
F112 F107             (        forth.asm):02742                 fdb     INDJ
                      (        forth.asm):02743                 RFCS
F114 C603             (        forth.asm):02744 (2)             ldb     #3
F116 20C9             (        forth.asm):02745 (3)             bra     RPICKN
                      (        forth.asm):02746         
F118 41               (        forth.asm):02747         INDK    fcb     $41             79-STANDARD (REF)
F119 4B               (        forth.asm):02748                 fcc     'K'
F11A F10F             (        forth.asm):02749                 fdb     INDJP
                      (        forth.asm):02750                 RFCS
F11C C604             (        forth.asm):02751 (2)             ldb     #4
F11E 20C1             (        forth.asm):02752 (3)             bra     RPICKN
                      (        forth.asm):02753         
F120 04               (        forth.asm):02754         QUIT    fcb     4               ANSI (Core)
F121 51554954         (        forth.asm):02755                 fcc     'QUIT'          ( -- )  ( R:  i*x -- )
F125 F118             (        forth.asm):02756                 fdb     INDK
                      (        forth.asm):02757                 RFCS
F127 0F25             (        forth.asm):02758 (5)             clr     USTATE+1
F129 BDEBF8           (        forth.asm):02759                 RFXT    jsr,RCLR+7      XT for RCLR
F12C 10CE8000         (        forth.asm):02760 (4)             lds     #RAMSTRT+RAMSIZE Reset the system stack pointer
F130 BDE2F7           (        forth.asm):02761 (7)             jsr     PUTCR
F133 7EE0B2           (        forth.asm):02762 (3)             jmp     INTERP
                      (        forth.asm):02763         
F136 05               (        forth.asm):02764         ABORT   fcb     5               ANSI (Core)
F137 41424F5254       (        forth.asm):02765                 fcc     'ABORT'         ( i*x -- ) ( R: j*x -- )
F13C F120             (        forth.asm):02766                 fdb     QUIT
                      (        forth.asm):02767                 RFCS
F13E C603             (        forth.asm):02768 (2)             ldb     #3              User ABORT
F140 BDE74C           (        forth.asm):02769 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02770         
                      (        forth.asm):02771         * Implementation notes: GNU Forth, VFX and SwiftForth all report "invalid
                      (        forth.asm):02772         * memory address" for "0 FIND". Also the counted string at c-addr is not
                      (        forth.asm):02773         * scanned for leading spaces. If the counted string byte count is zero, the
                      (        forth.asm):02774         * string will be not found and the dictionary not searched at all.
F143 04               (        forth.asm):02775         FIND    fcb     4               ANSI (Core)
F144 46494E44         (        forth.asm):02776                 fcc     'FIND'          ( c-addr -- c-addr 0  |  xt 1  |  xt -1 )
F148 F136             (        forth.asm):02777                 fdb     ABORT
                      (        forth.asm):02778                 RFCS
F14A BDE9CB           (        forth.asm):02779 (7)             jsr     MIN1PST
F14D AEC4             (        forth.asm):02780 (5+0)           ldx     ,u              TOS to X (Arg <c-addr>)
F14F 2605             (        forth.asm):02781 (3)             bne     @afind1
F151 C60D             (        forth.asm):02782 (2)             ldb     #13             Illegal argument
F153 BDE74C           (        forth.asm):02783 (7)             jsr     ERRHDLR         No return
F156 6D84             (        forth.asm):02784 (5+0)   @afind1 tst     ,x
F158 2605             (        forth.asm):02785 (3)             bne     @afind3         Character count is NZ, proceed
F15A 1FC1             (        forth.asm):02786 (4)     @afind2 tfr     0,x             Word not found
F15C 7EE7DB           (        forth.asm):02787 (3)             jmp     NPUSH
F15F DC02             (        forth.asm):02788 (4)     @afind3 ldd     TOKENSP
F161 3406             (        forth.asm):02789 (4+2)           pshs    d               Save TOKENSP to the system stack
F163 E680             (        forth.asm):02790 (4+1)           ldb     ,x+
F165 D742             (        forth.asm):02791 (3)             stb     CURTOKL
F167 9F02             (        forth.asm):02792 (4)             stx     TOKENSP
F169 BDE4A2           (        forth.asm):02793 (7)             jsr     SWDIC1
F16C DC0E             (        forth.asm):02794 (4)             ldd     PLOAD           Retrieve word payload
F16E DD10             (        forth.asm):02795 (4)             std     FNDPLD          Make it accessible through PAYLOAD
F170 3506             (        forth.asm):02796 (4+2)           puls    d
F172 DD02             (        forth.asm):02797 (4)             std     TOKENSP         Restore TOKENSP from the system stack
                      (        forth.asm):02798         * If the word is not found, Y is 0 and we ought to branch back to that context.
F174 1037C2           (        forth.asm):02799 (4)             cmpr    0,y
F177 27E1             (        forth.asm):02800 (3)             beq     @afind2
                      (        forth.asm):02801         * Word was found, push the corresponding XT (in Y) to the data stack (in place).
F179 10AFC4           (        forth.asm):02802 (6+0)           sty     ,u
F17C 8EFFFF           (        forth.asm):02803 (3)             ldx     #-1             Assume non-immediate
F17F 0D44             (        forth.asm):02804 (4)             tst     IMDFLG
F181 2702             (        forth.asm):02805 (3)             beq     @afind4
F183 3002             (        forth.asm):02806 (4+1)           leax    2,x             #1 to X
F185 7EE7DB           (        forth.asm):02807 (3)     @afind4 jmp     NPUSH
                      (        forth.asm):02808         
F188 01               (        forth.asm):02809         RBRACK  fcb     1               ANSI (Core)
F189 5D               (        forth.asm):02810                 fcc     ']'             ( -- )
F18A F143             (        forth.asm):02811                 fdb     FIND
                      (        forth.asm):02812                 RFCS
F18C 86FF             (        forth.asm):02813 (2)             lda     #-1
F18E 9725             (        forth.asm):02814 (3)     RBRACK1 sta     USTATE+1
F190 39               (        forth.asm):02815 (4)             rts
                      (        forth.asm):02816         
                      (        forth.asm):02817         * Note: the standard does not mandate that this primitive be executed in
                      (        forth.asm):02818         * definitions only. IMHO, it ought to, therefore I am forcing the C bit here.
F191 C1               (        forth.asm):02819         LBRACK  fcb     $C1             ANSI (Core)
F192 5B               (        forth.asm):02820                 fcc     '['             ( -- )
F193 F188             (        forth.asm):02821                 fdb     RBRACK
                      (        forth.asm):02822                 RFCS
F195 4F               (        forth.asm):02823 (1)             clra
F196 20F6             (        forth.asm):02824 (3)             bra     RBRACK1
                      (        forth.asm):02825         
                      (        forth.asm):02826         * Functionally:
                      (        forth.asm):02827         * : ' BL WORD FIND IF
                      (        forth.asm):02828         *     EXIT                      \ XT is left on the data stack
                      (        forth.asm):02829         *   THEN
                      (        forth.asm):02830         *   DROP 0 ;
                      (        forth.asm):02831         * There is a little extra complexity here because the standard requires
                      (        forth.asm):02832         * an error condition to be triggered if the word is not found.
F198 01               (        forth.asm):02833         TICK    fcb     1               ANSI (Core)
F199 27               (        forth.asm):02834                 fcb     $27             ( "<spaces>name" -- xt )
F19A F191             (        forth.asm):02835                 fdb     LBRACK
                      (        forth.asm):02836                 RFCS
F19C BDF706           (        forth.asm):02837                 RFXT    jsr,BL+5
F19F BDF315           (        forth.asm):02838                 RFXT    jsr,WORD+7
F1A2 8DA6             (        forth.asm):02839                 RFXT    bsr,FIND+7
                      (        forth.asm):02840         * We have at least two cells returned by the ANS94 FIND on the data stack.
F1A4 ECC4             (        forth.asm):02841 (5+0)           ldd     ,u              TOS to D (ANS94 FIND flag)
F1A6 2703             (        forth.asm):02842 (3)             beq     @nfound         Target word was not found
F1A8 3342             (        forth.asm):02843 (4+1)           leau    2,u             Drop the flag and return the XT
F1AA 39               (        forth.asm):02844 (4)             rts
F1AB 3344             (        forth.asm):02845 (4+1)   @nfound leau    4,u             Drop two cells from the data stack
F1AD 9E02             (        forth.asm):02846 (4)             ldx     TOKENSP
F1AF BDE384           (        forth.asm):02847 (7)             jsr     SCNSTOK         Needed to skip leading spaces
F1B2 C602             (        forth.asm):02848 (2)             ldb     #2              Word not found
F1B4 BDE74C           (        forth.asm):02849 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02850         
                      (        forth.asm):02851         * Functionally: : ['] ' POSTPONE LITERAL ; IMMEDIATE RESTRICT
F1B7 C3               (        forth.asm):02852         BKQUOT  fcb     $C3             ANSI (Core)
F1B8 5B275D           (        forth.asm):02853                 fcb     $5B,$27,$5D     Comp: ( "<spaces>name" -- )
F1BB F198             (        forth.asm):02854                 fdb     TICK            Exec: ( -- xt )
                      (        forth.asm):02855                 RFCS
F1BD 8DDD             (        forth.asm):02856                 RFXT    bsr,TICK+4      XT for '
                      (        forth.asm):02857         * Data stack topmost cell has the target word address.
F1BF 7EEC74           (        forth.asm):02858                 RFXT    jmp,LITERAL+10  XT for LITERAL
                      (        forth.asm):02859         
F1C2 C8               (        forth.asm):02860         POSTPON fcb     $C8             ANSI (Core) Not a straight alias to [COMPILE]
F1C3 504F5354504F4E45 (        forth.asm):02861                 fcc     'POSTPONE'      ( "<spaces>name" -- )
F1CB F1B7             (        forth.asm):02862                 fdb     BKQUOT          Non-immediate words deserve special treatment
                      (        forth.asm):02863                 RFCS
F1CD BDE86F           (        forth.asm):02864 (7)             jsr     BKIN2PT         Derive X from BLK, >IN
F1D0 BDE384           (        forth.asm):02865 (7)             jsr     SCNSTOK
F1D3 2605             (        forth.asm):02866 (3)             bne     @postp1
F1D5 C605             (        forth.asm):02867 (2)             ldb     #5              Missing word name
F1D7 BDE74C           (        forth.asm):02868 (7)             jsr     ERRHDLR         No return
F1DA BDE49D           (        forth.asm):02869 (7)     @postp1 jsr     SWDIC
F1DD 2607             (        forth.asm):02870 (3)             bne     @postp2         Word found. Code address returned in Y
F1DF 9E02             (        forth.asm):02871 (4)             ldx     TOKENSP
F1E1 C602             (        forth.asm):02872 (2)             ldb     #2              Undefined (X points to the offending word)
F1E3 BDE74C           (        forth.asm):02873 (7)             jsr     ERRHDLR         No return
F1E6 1F21             (        forth.asm):02874 (4)     @postp2 tfr     y,x             X has the actual execution token
F1E8 0D44             (        forth.asm):02875 (4)             tst     IMDFLG
F1EA 2708             (        forth.asm):02876 (3)             beq     @postp4         Target word is not immediate
F1EC BDE152           (        forth.asm):02877 (7)     @postp3 jsr     EMXASXT         Set as action component
F1EF DC02             (        forth.asm):02878 (4)             ldd     TOKENSP         Updated by SWDIC if the word was found
F1F1 7EE161           (        forth.asm):02879 (3)             jmp     U2INFRD         Derive >IN from D
                      (        forth.asm):02880         * The word being considered is non-immediate. The equivalent input should be:
                      (        forth.asm):02881         * ['] <word> COMPILE, We have the XT for <word> in X.
F1F4 BDE566           (        forth.asm):02882 (7)     @postp4 jsr     LITER
F1F7 8EF207           (        forth.asm):02883                 RFXT    ldx,#CMPCOMA+11 XT for COMPILE,
F1FA 20F0             (        forth.asm):02884 (3)             bra     @postp3
                      (        forth.asm):02885         
                      (        forth.asm):02886         * GNU Forth has this as non-immediate so I am going for it as well.
F1FC 48               (        forth.asm):02887         CMPCOMA fcb     $48             ANSI (Core Ext)
F1FD 434F4D50494C452C (        forth.asm):02888                 fcc     'COMPILE,'      ( XT -- )
F205 F1C2             (        forth.asm):02889                 fdb     POSTPON
                      (        forth.asm):02890                 RFCS
F207 BDE7E9           (        forth.asm):02891 (7)             jsr     NPOP            Execution token to X
F20A 7EE152           (        forth.asm):02892 (3)             jmp     EMXASXT
                      (        forth.asm):02893         
                      (        forth.asm):02894         * As per the standard, : is not immediate. This allows for further interesting
                      (        forth.asm):02895         * developments, like tracing words execution...
F20D 01               (        forth.asm):02896         COMPC   fcb     $1              ANSI (Core)
F20E 3A               (        forth.asm):02897                 fcc     ':'             Comp: ( "<spaces>name" -- )
F20F F1FC             (        forth.asm):02898                 fdb     CMPCOMA
                      (        forth.asm):02899                 RFCS
F211 0F34             (        forth.asm):02900 (5)             clr     ANCMPF
F213 CCFFFF           (        forth.asm):02901 (3)     COMPC1  ldd     #-1
F216 9725             (        forth.asm):02902 (3)             sta     USTATE+1
F218 1043             (        forth.asm):02903 (2)             comd                    0 to D
F21A 9735             (        forth.asm):02904 (3)             sta     BALNCD
F21C 974B             (        forth.asm):02905 (3)             sta     CYCLO           Initialize cyclomatic complexity counter
F21E DD14             (        forth.asm):02906 (4)             std     JSRLAST
F220 DD16             (        forth.asm):02907 (4)             std     FWDREF
F222 0D34             (        forth.asm):02908 (4)             tst     ANCMPF          Anonymous compilation?
F224 2603             (        forth.asm):02909 (3)             bne     @isanon         Skip header creation if coming from :NONAME
F226 7EE50B           (        forth.asm):02910 (3)             jmp     LOCWRT
F229 9E08             (        forth.asm):02911 (4)     @isanon ldx     DICEND
F22B 9F0C             (        forth.asm):02912 (4)             stx     BDICEND         Backup HERE
F22D 9F12             (        forth.asm):02913 (4)             stx     RECADDR         Should RECURSE by used by a :NONAME definition
F22F 39               (        forth.asm):02914 (4)             rts
                      (        forth.asm):02915         
F230 07               (        forth.asm):02916         NONAME  fcb     $7              ANSI (Core ext)
F231 3A4E4F4E414D45   (        forth.asm):02917                 fcc     ':NONAME'
F238 F20D             (        forth.asm):02918                 fdb     COMPC
                      (        forth.asm):02919                 RFCS
F23A 8601             (        forth.asm):02920 (2)             lda     #1
F23C 9734             (        forth.asm):02921 (3)             sta     ANCMPF          Set the anonymous compilation flag
F23E 20D3             (        forth.asm):02922 (3)             bra     COMPC1
                      (        forth.asm):02923         
                      (        forth.asm):02924         * Tail call optimization notes:
                      (        forth.asm):02925         * 1: if JSRLAST is 0, emit an RTS, the end.
                      (        forth.asm):02926         * 2: if HERE - 3 == JSRLAST: replace JSR by a JMP.
                      (        forth.asm):02927         * 3: if FWDREF == HERE, emit an RTS.
                      (        forth.asm):02928         * The end means finalize with DEBUG code and an update of HERE (DICEND).
F240 C1               (        forth.asm):02929         COMPR   fcb     $C1             ANSI (Core)
F241 3B               (        forth.asm):02930                 fcc     ';'
F242 F230             (        forth.asm):02931                 fdb     NONAME
                      (        forth.asm):02932                 RFCS
F244 BDE830           (        forth.asm):02933 (7)             jsr     BALCHK          Check for unbalanced constructs
F247 0F25             (        forth.asm):02934 (5)             clr     USTATE+1        Back to interpretation mode
                      (        forth.asm):02935         * Do not restore LSTWAD if we came from :NONAME.
F249 9E0C             (        forth.asm):02936 (4)             ldx     BDICEND         X has HERE when : (LOCWRT) or :NONAME was called
F24B 0D34             (        forth.asm):02937 (4)             tst     ANCMPF
F24D 2604             (        forth.asm):02938 (3)             bne     @wasano
F24F 9F06             (        forth.asm):02939 (4)             stx     LSTWAD          Update LAST
F251 2005             (        forth.asm):02940 (3)             bra     @cont
F253 0F34             (        forth.asm):02941 (5)     @wasano clr     ANCMPF
F255 BDE7DB           (        forth.asm):02942 (7)             jsr     NPUSH           Anonynous execution token to the data stack
F258 9E08             (        forth.asm):02943 (4)     @cont   ldx     DICEND          HERE to X
                      (        forth.asm):02944         * Optimization: replace the last JSR by a JMP, if possible.
F25A DC14             (        forth.asm):02945 (4)             ldd     JSRLAST
F25C 2713             (        forth.asm):02946 (3)             beq     @rtsreq         Case #1
F25E 311D             (        forth.asm):02947 (4+1)           leay    -3,x            Y has HERE - 3, D has JSRLAST
F260 103702           (        forth.asm):02948 (4)             cmpr    d,y
F263 260C             (        forth.asm):02949 (3)             bne     @rtsreq
                      (        forth.asm):02950         * Tail call optimization applies (Case #2).
F265 867E             (        forth.asm):02951 (2)             lda     #JMPOPC
F267 A7A4             (        forth.asm):02952 (4+0)           sta     ,y
F269 109E16           (        forth.asm):02953 (5)             ldy     FWDREF
F26C 103712           (        forth.asm):02954 (4)             cmpr    x,y
F26F 2604             (        forth.asm):02955 (3)             bne     @finalz         Case #3
F271 8639             (        forth.asm):02956 (2)     @rtsreq lda     #RTSOPC         RTS inherent
F273 A780             (        forth.asm):02957 (4+1)           sta     ,x+
F275                  (        forth.asm):02958         @finalz
                      (        forth.asm):02959                 IFNE    DEBUG
                      (        forth.asm):02960                 lda     #ILLOPC         Illegal opcode
                      (        forth.asm):02961                 sta     ,x+
                      (        forth.asm):02962                 ENDC                    DEBUG
F275 9F08             (        forth.asm):02963 (4)             stx     DICEND          Update HERE
                      (        forth.asm):02964                 IFNE    RELFEAT
                      (        forth.asm):02965                 RFXT    jsr,MONITOR+10  XT for MONITOR. All : words are candidates
                      (        forth.asm):02966         *                               for integrity check by ICHECK.
                      (        forth.asm):02967                 ENDC                    RELFEAT
F277 39               (        forth.asm):02968 (4)             rts
                      (        forth.asm):02969         
F278 C7               (        forth.asm):02970         RECURSE fcb     $C7             ANSI (Core)
F279 52454355525345   (        forth.asm):02971                 fcc     'RECURSE'       ( -- )
F280 F240             (        forth.asm):02972                 fdb     COMPR
                      (        forth.asm):02973                 RFCS
F282 9E12             (        forth.asm):02974 (4)             ldx     RECADDR         Set up by LOCWRT
F284 7EE152           (        forth.asm):02975 (3)             jmp     EMXASXT         Set as action component
                      (        forth.asm):02976         
F287 06               (        forth.asm):02977         MARKER  fcb     6               ANSI (Tools ext)
F288 4D41524B4552     (        forth.asm):02978                 fcc     'MARKER'
F28E F278             (        forth.asm):02979                 fdb     RECURSE
                      (        forth.asm):02980                 RFCS
F290 109E08           (        forth.asm):02981 (5)             ldy     DICEND          HERE
F293 9E06             (        forth.asm):02982 (4)             ldx     LSTWAD          LAST
F295 3430             (        forth.asm):02983 (4+4)           pshs    y,x             Preserve essential dictionary pointers
F297 BDE50B           (        forth.asm):02984 (7)             jsr     LOCWRT          No pre-req on input, does all the heavy lifting
                      (        forth.asm):02985         
                      (        forth.asm):02986         * From here on, all we need to do is to emit the code necessary to restore
                      (        forth.asm):02987         * DICEND (2,s) and LSTWAD (,s). Y has HERE, as of right now.
F29A AE62             (        forth.asm):02988 (5+1)           ldx     2,s             Saved HERE to X
F29C 868E             (        forth.asm):02989 (2)             lda     #LDXOPC
F29E BDE57D           (        forth.asm):02990 (7)             jsr     VARCON2
F2A1 CC9F08           (        forth.asm):02991 (3)             ldd     #($9F*256)|(DICEND-VARSPC)
F2A4 EDA1             (        forth.asm):02992 (5+2)           std     ,y++            Compile stx DICEND (direct page)
                      (        forth.asm):02993         
F2A6 AEE4             (        forth.asm):02994 (5+0)           ldx     ,s              Saved LAST to X
F2A8 868E             (        forth.asm):02995 (2)             lda     #LDXOPC
F2AA BDE57D           (        forth.asm):02996 (7)             jsr     VARCON2
F2AD CC9F06           (        forth.asm):02997 (3)             ldd     #($9F*256)|(LSTWAD-VARSPC)
F2B0 EDA1             (        forth.asm):02998 (5+2)           std     ,y++            Compile stx LSTWAD (direct page)
                      (        forth.asm):02999         
F2B2 8639             (        forth.asm):03000 (2)             lda     #RTSOPC
F2B4 A7A0             (        forth.asm):03001 (4+1)           sta     ,y+             Emit an RTS
F2B6 3264             (        forth.asm):03002 (4+1)           leas    4,s             Drop material previously on the system stack
F2B8 7EEC36           (        forth.asm):03003 (3)             jmp     CREAT1          Finalize dictionary entry
                      (        forth.asm):03004         
F2BB 07               (        forth.asm):03005         EXCT    fcb     7               ANSI (Core)
F2BC 45584543555445   (        forth.asm):03006                 fcc     'EXECUTE'       ( i*x xt -- j*x )
F2C3 F287             (        forth.asm):03007                 fdb     MARKER
                      (        forth.asm):03008                 RFCS
F2C5 BDE7E9           (        forth.asm):03009 (7)             jsr     NPOP            Although the standard does not specify that
F2C8 2702             (        forth.asm):03010 (3)             beq     @exct1          a NUL address should trigger an error, I do
F2CA 1F15             (        forth.asm):03011 (4)             tfr     x,pc            Branch to the XT
F2CC C60D             (        forth.asm):03012 (2)     @exct1  ldb     #13             Illegal argument
F2CE BDE74C           (        forth.asm):03013 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):03014         
F2D1 03               (        forth.asm):03015         BYE     fcb     3               ANSI (Programming tools ext)
F2D2 425945           (        forth.asm):03016                 fcc     'BYE'
F2D5 F2BB             (        forth.asm):03017                 fdb     EXCT
                      (        forth.asm):03018                 RFCS
                      (        forth.asm):03019                 IFNE    RTCFEAT
                      (        forth.asm):03020                 lda     #RTOREGB
                      (        forth.asm):03021                 jsr     RTREGRD         RTCB register to B
                      (        forth.asm):03022                 andb    #^RTBPIE        Disable periodic interrupt generation
                      (        forth.asm):03023                 jsr     RTREGWR
                      (        forth.asm):03024                 ldx     #40
                      (        forth.asm):03025                 jsr     MILLIS1         Wait for 40 milliseconds
                      (        forth.asm):03026                 orcc    #(FFLAG|IFLAG)  Disable maskable interrupts
                      (        forth.asm):03027                 ENDC                    RTCFEAT
F2D7 7EE037           (        forth.asm):03028 (3)             jmp     RSTHDL
                      (        forth.asm):03029         
F2DA C6               (        forth.asm):03030         BKCHAR  fcb     $C6             ANSI (Core)
F2DB 5B434841525D     (        forth.asm):03031                 fcc     '[CHAR]'        Comp: ( "<spaces>name" -- )
F2E1 F2D1             (        forth.asm):03032                 fdb     BYE             Exec: ( -- char )
                      (        forth.asm):03033                 RFCS
F2E3 8D0A             (        forth.asm):03034                 RFXT    bsr,CHAR+7      XT for CHAR
F2E5 7EEC74           (        forth.asm):03035                 RFXT    jmp,LITERAL+10  XT for LITERAL
                      (        forth.asm):03036         
F2E8 04               (        forth.asm):03037         CHAR    fcb     4               ANSI (Core)
F2E9 43484152         (        forth.asm):03038                 fcc     'CHAR'          ( "<spaces>name" -- char )
F2ED F2DA             (        forth.asm):03039                 fdb     BKCHAR
                      (        forth.asm):03040                 RFCS
F2EF BDE86F           (        forth.asm):03041 (7)             jsr     BKIN2PT         Derive X from BLK, >IN
F2F2 BDE384           (        forth.asm):03042 (7)     @char1  jsr     SCNSTOK         X points to the beginning of the character
F2F5 2712             (        forth.asm):03043 (3)             beq     @chrerr
F2F7 E684             (        forth.asm):03044 (4+0)           ldb     ,x
F2F9 4F               (        forth.asm):03045 (1)             clra                    D has CHAR
F2FA 1F01             (        forth.asm):03046 (4)             tfr     d,x
F2FC BDE7DB           (        forth.asm):03047 (7)             jsr     NPUSH
F2FF 9E02             (        forth.asm):03048 (4)             ldx     TOKENSP         Set by SCNSTOK
F301 BDE397           (        forth.asm):03049 (7)             jsr     SCNETOK
F304 1F10             (        forth.asm):03050 (4)             tfr     x,d             TOKENEP
F306 7EE161           (        forth.asm):03051 (3)             jmp     U2INFRD         Derive >IN from D
F309 C60D             (        forth.asm):03052 (2)     @chrerr ldb     #13             Illegal argument
F30B BDE74C           (        forth.asm):03053 (7)             jsr     ERRHDLR
                      (        forth.asm):03054         * No return.
                      (        forth.asm):03055         
                      (        forth.asm):03056         * Hairy code but working.
F30E 04               (        forth.asm):03057         WORD    fcb     4               ANSI (Core)
F30F 574F5244         (        forth.asm):03058                 fcc     'WORD'          ( char "<chars>ccc<char>" -- c-addr )
F313 F2E8             (        forth.asm):03059                 fdb     CHAR
                      (        forth.asm):03060                 RFCS
F315 0F4C             (        forth.asm):03061 (5)             clr     SQUOTFN         Do not skip leading delimiter(s)
F317 BDE7E9           (        forth.asm):03062 (7)     WORD1   jsr     NPOP            Entry point for S"
F31A 1F16             (        forth.asm):03063 (4)             tfr     x,w             F has the delimiter ASCII code
F31C 109E08           (        forth.asm):03064 (5)             ldy     DICEND          The counted string returned is stored at HERE
F31F 3420             (        forth.asm):03065 (4+2)           pshs    y
F321 6FA0             (        forth.asm):03066 (6+1)           clr     ,y+             Initialize its length
F323 BDE86F           (        forth.asm):03067 (7)             jsr     BKIN2PT         Derive X from BLK, >IN
F326 BDE3AF           (        forth.asm):03068 (7)     @word1  jsr     NXTCHAR         Current input char to A unless ZFLAG is set
F329 271B             (        forth.asm):03069 (3)             beq     @word3          EOL reached, this is the end
F32B 0D4C             (        forth.asm):03070 (4)             tst     SQUOTFN         S"/." context: do not look for a leading delim.
F32D 260C             (        forth.asm):03071 (3)             bne     @word2x
F32F 1037F8           (        forth.asm):03072 (4)             cmpr    f,a             Leading delimiter matched?
F332 27F2             (        forth.asm):03073 (3)             beq     @word1          Yes, skip it (it might be repeated)
                      (        forth.asm):03074         * Either there was no leading delimiter or we went past the leading repetitions.
F334 301F             (        forth.asm):03075 (4+1)           leax    -1,x            Go back one char.
F336 BDE3AF           (        forth.asm):03076 (7)     @word2  jsr     NXTCHAR         Acquire next character from the input stream
F339 270B             (        forth.asm):03077 (3)             beq     @word3          EOL reached
F33B 1037F8           (        forth.asm):03078 (4)     @word2x cmpr    f,a             Trailing delimiter?
F33E 2706             (        forth.asm):03079 (3)             beq     @word3
F340 A7A0             (        forth.asm):03080 (4+1)           sta     ,y+
F342 6CF4             (        forth.asm):03081 (6+3)           inc     [,s]            Increment string length
F344 20F0             (        forth.asm):03082 (3)             bra     @word2
F346 1F10             (        forth.asm):03083 (4)     @word3  tfr     x,d             Pointing one char after the delimiter or EOIS
F348 BDE161           (        forth.asm):03084 (7)             jsr     U2INFRD         Derive >IN from D
F34B 3510             (        forth.asm):03085 (4+2)           puls    x
F34D 3610             (        forth.asm):03086                 UCNPUSH                 Push back HERE
F34F 39               (        forth.asm):03087 (4)             rts
                      (        forth.asm):03088         
F350 81               (        forth.asm):03089         LPAR    fcb     $81             ANSI (Core). No longer 79-STANDARD compliant
F351 28               (        forth.asm):03090                 fcc     '('             Exec: ( "ccc<paren>" -- )
F352 F30E             (        forth.asm):03091                 fdb     WORD
                      (        forth.asm):03092                 RFCS
F354 8E0029           (        forth.asm):03093 (3)             ldx     #')
F357 BDE7DB           (        forth.asm):03094 (7)             jsr     NPUSH
F35A 8DB9             (        forth.asm):03095                 RFXT    bsr,WORD+7
F35C 7EFC89           (        forth.asm):03096                 RFXT    jmp,DROP+7
                      (        forth.asm):03097         
F35F 06               (        forth.asm):03098         SOURCE  fcb     6               ANSI (Core)
F360 534F55524345     (        forth.asm):03099                 fcc     'SOURCE'        ( -- c-addr u )
F366 F350             (        forth.asm):03100                 fdb     LPAR
                      (        forth.asm):03101                 RFCS
F368 9E20             (        forth.asm):03102 (4)             ldx     BSBFADR         Where we're at, from a physical address point
F36A BDE7DB           (        forth.asm):03103 (7)             jsr     NPUSH
F36D 9E26             (        forth.asm):03104 (4)             ldx     ISLEN           Input stream length
F36F 7EE7DB           (        forth.asm):03105 (3)             jmp     NPUSH
                      (        forth.asm):03106         
                      (        forth.asm):03107         * This is a straightforward implementation borrowed from GNU Forth 'see \':
                      (        forth.asm):03108         * : \
                      (        forth.asm):03109         *   BLK @
                      (        forth.asm):03110         *   IF     >IN @ C/L / 1+ C/L * >IN ! EXIT
                      (        forth.asm):03111         *   THEN
                      (        forth.asm):03112         *   SOURCE >IN ! DROP ; IMMEDIATE
                      (        forth.asm):03113         * However since C/L (number of columns per line) is 64 (a power of 2), things
                      (        forth.asm):03114         * can be coded in a more compact manner as: >IN @ 63 INVERT AND 64 + >IN !
F372 81               (        forth.asm):03115         BKSLSH  fcb     $81             ANSI (Core Ext)
F373 5C               (        forth.asm):03116                 fcb     $5C             \ ( -- )
F374 F35F             (        forth.asm):03117                 fdb     SOURCE
                      (        forth.asm):03118                 RFCS
F376 DC2C             (        forth.asm):03119 (4)             ldd     UBLK            BLK @ to D
F378 270B             (        forth.asm):03120 (3)             beq     @comser         We operate from block 0: the console
F37A DC2A             (        forth.asm):03121 (4)             ldd     UTOIN           >IN @
F37C C4C0             (        forth.asm):03122 (2)             andb    #^$3F           Point to the beginning of the line
F37E CB40             (        forth.asm):03123 (2)             addb    #$40            next line
F380 8900             (        forth.asm):03124 (2)             adca    #0              Propagate potential carry from LSB
F382 DD2A             (        forth.asm):03125 (4)             std     UTOIN           >IN !
F384 39               (        forth.asm):03126 (4)             rts                     EXIT
F385 8DE1             (        forth.asm):03127         @comser RFXT    bsr,SOURCE+9    XT for SOURCE
F387 BDE7E9           (        forth.asm):03128 (7)             jsr     NPOP
F38A 9F2A             (        forth.asm):03129 (4)             stx     UTOIN           >IN !
F38C 7EFC89           (        forth.asm):03130                 RFXT    jmp,DROP+7      XT for DROP
                      (        forth.asm):03131                 ENDC
                      (        forth.asm):03132         
F38F 82               (        forth.asm):03133         PSTR    fcb     $82             ANSI (Core)
F390 2E22             (        forth.asm):03134                 fcc     '."'            Comp: ( "ccc<quote>" -- )
F392 F372             (        forth.asm):03135                 fdb     BKSLSH          Exec: ( -- )
                      (        forth.asm):03136                 RFCS
F394 8D12             (        forth.asm):03137                 RFXT    bsr,SQUOTE+5    XT for S"
F396 0D25             (        forth.asm):03138 (4)             tst     USTATE+1
F398 2603             (        forth.asm):03139 (3)             bne     @pstcmp
F39A 7EF75D           (        forth.asm):03140                 RFXT    jmp,TYPE+7      XT for TYPE
F39D 8EF75D           (        forth.asm):03141         @pstcmp RFXT    ldx,#TYPE+7     Emit TYPE as an XT
F3A0 7EE152           (        forth.asm):03142 (3)             jmp     EMXASXT
                      (        forth.asm):03143         
F3A3 82               (        forth.asm):03144         SQUOTE  fcb     $82             ANSI (Core)
F3A4 5322             (        forth.asm):03145                 fcc     'S"'            Comp: ( "ccc<quote>" -- )
F3A6 F38F             (        forth.asm):03146                 fdb     PSTR            Exec: ( -- c-addr u )
                      (        forth.asm):03147                 RFCS
F3A8 8601             (        forth.asm):03148 (2)             lda     #1
F3AA 974C             (        forth.asm):03149 (3)             sta     SQUOTFN         Do skip leading delimiter(s)
F3AC 0D25             (        forth.asm):03150 (4)             tst     USTATE+1
F3AE 260C             (        forth.asm):03151 (3)             bne     @sqcmp
F3B0 8E0022           (        forth.asm):03152 (3)             ldx     #'"             We are interpreting
F3B3 BDE7DB           (        forth.asm):03153 (7)             jsr     NPUSH
F3B6 BDF317           (        forth.asm):03154 (7)             jsr     WORD1
F3B9 7EF77B           (        forth.asm):03155                 RFXT    jmp,COUNT+8     XT for COUNT
F3BC 109E08           (        forth.asm):03156 (5)     @sqcmp  ldy     DICEND          We are compiling
F3BF 867E             (        forth.asm):03157 (2)             lda     #JMPOPC         JMP extended
F3C1 A7A0             (        forth.asm):03158 (4+1)           sta     ,y+
F3C3 3420             (        forth.asm):03159 (4+2)           pshs    y
F3C5 3122             (        forth.asm):03160 (4+1)           leay    2,y             2 ALLOT
F3C7 109F08           (        forth.asm):03161 (5)             sty     DICEND
F3CA 8E0022           (        forth.asm):03162 (3)             ldx     #'"
F3CD BDE7DB           (        forth.asm):03163 (7)             jsr     NPUSH
F3D0 BDF317           (        forth.asm):03164 (7)             jsr     WORD1
F3D3 BDE7E9           (        forth.asm):03165 (7)             jsr     NPOP
F3D6 4F               (        forth.asm):03166 (1)             clra
F3D7 E684             (        forth.asm):03167 (4+0)           ldb     ,x              C@
F3D9 3001             (        forth.asm):03168 (4+1)           leax    1,x             1+. Skip the byte count (X has HERE)
F3DB 308B             (        forth.asm):03169 (4+2)           leax    d,x             Skip string length material
F3DD 3520             (        forth.asm):03170 (4+2)           puls    y
F3DF AFA4             (        forth.asm):03171 (5+0)           stx     ,y              Install jump address
F3E1 3122             (        forth.asm):03172 (4+1)           leay    2,y             Counted string base address to Y
F3E3 868E             (        forth.asm):03173 (2)             lda     #LDXOPC
F3E5 A780             (        forth.asm):03174 (4+1)           sta     ,x+
F3E7 10AF81           (        forth.asm):03175 (6+2)           sty     ,x++
F3EA 9F08             (        forth.asm):03176 (4)             stx     DICEND          Update HERE
F3EC 8EE7DB           (        forth.asm):03177 (3)             ldx     #NPUSH
F3EF BDE152           (        forth.asm):03178 (7)             jsr     EMXASXT
F3F2 8EF77B           (        forth.asm):03179                 RFXT    ldx,#COUNT+8    XT for COUNT
F3F5 7EE152           (        forth.asm):03180 (3)             jmp     EMXASXT
                      (        forth.asm):03181         
F3F8 02               (        forth.asm):03182         DPLUS   fcb     2               ANSI (Double)
F3F9 442B             (        forth.asm):03183                 fcc     'D+'            ( d1 d2 -- d1+d2--signed )
F3FB F3A3             (        forth.asm):03184                 fdb     SQUOTE          In processor's terms U has ( L1 H1 L2 H2 )
                      (        forth.asm):03185                 RFCS
F3FD BDE9DA           (        forth.asm):03186 (7)             jsr     MIN4PST         Make sure we have at least 4 cells stacked up
F400 EC46             (        forth.asm):03187 (5+1)           ldd     6,u             L1
F402 E342             (        forth.asm):03188 (5+1)           addd    2,u             L2
F404 ED46             (        forth.asm):03189 (5+1)           std     6,u             d1+d2 least significant cell
F406 EC44             (        forth.asm):03190 (5+1)           ldd     4,u             H1
F408 10A9C4           (        forth.asm):03191 (6+0)           adcd    ,u              H2 (add with carry bit)
F40B ED44             (        forth.asm):03192 (5+1)           std     4,u             d1+d2 most significant cell
F40D 3344             (        forth.asm):03193 (4+1)           leau    4,u             Drop 2 cells from the data stack
F40F 39               (        forth.asm):03194 (4)             rts
                      (        forth.asm):03195         
F410 07               (        forth.asm):03196         DNEG    fcb     7               ANSI (Double)
F411 444E4547415445   (        forth.asm):03197                 fcc     'DNEGATE'
F418 F3F8             (        forth.asm):03198                 fdb     DPLUS
                      (        forth.asm):03199                 RFCS
F41A BDE9D0           (        forth.asm):03200 (7)             jsr     MIN2PST         We need at least 2 cells stacked up
F41D 10A642           (        forth.asm):03201 (6+1)           ldw     2,u             Least significant cell
F420 1053             (        forth.asm):03202 (2)             comw
F422 ECC4             (        forth.asm):03203 (5+0)           ldd     ,u              Most significant cell
F424 1043             (        forth.asm):03204 (2)             comd
F426 108B0001         (        forth.asm):03205 (4)             addw    #1
F42A 10890000         (        forth.asm):03206 (4)             adcd    #0              Propagate carry flag
F42E 10EDC4           (        forth.asm):03207 (8+0)           stq     ,u              Store the result back to the data stack
F431 39               (        forth.asm):03208 (4)             rts
                      (        forth.asm):03209         
F432 02               (        forth.asm):03210         DMINUS  fcb     2               ANSI (Double)
F433 442D             (        forth.asm):03211                 fcc     'D-'            ( d1 d2 -- d1-d2--signed )
F435 F410             (        forth.asm):03212                 fdb     DNEG            In processor's terms U has ( L1 H1 L2 H2)
                      (        forth.asm):03213                 RFCS
F437 BDE9DA           (        forth.asm):03214 (7)             jsr     MIN4PST         Make sure we have at least 4 cells stacked up
F43A EC46             (        forth.asm):03215 (5+1)           ldd     6,u             L1
F43C A342             (        forth.asm):03216 (5+1)           subd    2,u             L2
F43E ED46             (        forth.asm):03217 (5+1)           std     6,u             d1-d2 least significant cell
F440 EC44             (        forth.asm):03218 (5+1)           ldd     4,u             H1
F442 10A2C4           (        forth.asm):03219 (6+0)           sbcd    ,u              H2 (substract with borrow)
F445 ED44             (        forth.asm):03220 (5+1)           std     4,u             d1-d2 most significant cell
F447 3344             (        forth.asm):03221 (4+1)           leau    4,u
F449 39               (        forth.asm):03222 (4)             rts
                      (        forth.asm):03223         
F44A 03               (        forth.asm):03224         DZEQ    fcb     3               ANSI (Double)
F44B 44303D           (        forth.asm):03225                 fcc     'D0='           ( d -- flag )
F44E F432             (        forth.asm):03226                 fdb     DMINUS
                      (        forth.asm):03227                 RFCS
F450 BDEEF0           (        forth.asm):03228                 RFXT    jsr,OR+5        XT for OR
F453 7EEF5C           (        forth.asm):03229                 RFXT    jmp,NULP+5      XT for 0=
                      (        forth.asm):03230         
                      (        forth.asm):03231         * GNU Forth has:
                      (        forth.asm):03232         * f = FLAG(d1.hi==d2.hi ? d1.lo<d2.lo : d1.hi<d2.hi);
                      (        forth.asm):03233         * Comparisons between high cells are signed, but they are unsigned between
                      (        forth.asm):03234         * the low cells.
F456 02               (        forth.asm):03235         DLESS   fcb     2               ANSI (Double)
F457 443C             (        forth.asm):03236                 fcc     'D<'            ( d1 d2 -- flag )
F459 F44A             (        forth.asm):03237                 fdb     DZEQ
                      (        forth.asm):03238                 RFCS
F45B BDE9DA           (        forth.asm):03239 (7)             jsr     MIN4PST
                      (        forth.asm):03240         * Data stack structure at this point:
                      (        forth.asm):03241         * ,u    d2.hi                   1 cell
                      (        forth.asm):03242         * 2,u   d2.lo                   1 cell
                      (        forth.asm):03243         * 4,u   d1.hi                   1 cell
                      (        forth.asm):03244         * 6,u   d1.lo                   1 cell
F45E 115F             (        forth.asm):03245 (2)             clrf                    A priori return value for FLAG
F460 ECC4             (        forth.asm):03246 (5+0)           ldd     ,u              D2.HI
F462 10A344           (        forth.asm):03247 (6+1)           cmpd    4,u             D1.HI
F465 2611             (        forth.asm):03248 (3)             bne     @term2
F467 EC42             (        forth.asm):03249 (5+1)           ldd     2,u             D2.LO
F469 10A346           (        forth.asm):03250 (6+1)           cmpd    6,u             D1.LO
F46C 2302             (        forth.asm):03251 (3)             bls     @done
F46E 115A             (        forth.asm):03252 (2)     @anstru decf                    #$FF to F
F470 1FF9             (        forth.asm):03253 (4)     @done   tfr     f,b
F472 1D               (        forth.asm):03254 (1)             sex                     Sign extension B to D
F473 ED46             (        forth.asm):03255 (5+1)           std     6,u             FLAG returned as a cell
F475 3346             (        forth.asm):03256 (4+1)           leau    6,u             Drop three cells from the data stack
F477 39               (        forth.asm):03257 (4)             rts
F478 2FF6             (        forth.asm):03258 (3)     @term2  ble     @done
F47A 20F2             (        forth.asm):03259 (3)             bra     @anstru
                      (        forth.asm):03260         
F47C 05               (        forth.asm):03261         TWOOVER fcb     5               ANSI (Core)
F47D 324F564552       (        forth.asm):03262                 fcc     '2OVER'         ( d1 d2 -- d1 d2 d1 )
F482 F456             (        forth.asm):03263                 fdb     DLESS
                      (        forth.asm):03264                 RFCS
F484 BDE9DA           (        forth.asm):03265 (7)             jsr     MIN4PST         At least four cells need to be stacked up
F487 10EC44           (        forth.asm):03266 (8+1)           ldq     4,u             D:W has MSC:LSC of D1
F48A 1F61             (        forth.asm):03267 (4)             tfr     w,x
F48C BDE7DB           (        forth.asm):03268 (7)             jsr     NPUSH
F48F 1F01             (        forth.asm):03269 (4)             tfr     d,x
F491 7EE7DB           (        forth.asm):03270 (3)             jmp     NPUSH
                      (        forth.asm):03271         
F494 05               (        forth.asm):03272         TWOSWAP fcb     5               ANSI (Core)
F495 3253574150       (        forth.asm):03273                 fcc     '2SWAP'         ( d1 d2 -- d2 d1 )
F49A F47C             (        forth.asm):03274                 fdb     TWOOVER
                      (        forth.asm):03275                 RFCS
F49C BDE9DA           (        forth.asm):03276 (7)             jsr     MIN4PST         At least four cells must be stacked up
F49F AE44             (        forth.asm):03277 (5+1)           ldx     4,u             D1 most significant cell
F4A1 10AE46           (        forth.asm):03278 (6+1)           ldy     6,u             D1 least significant cell
F4A4 10ECC4           (        forth.asm):03279 (8+0)           ldq     ,u              D:W has MSC:LSC of D2
F4A7 10ED44           (        forth.asm):03280 (8+1)           stq     4,u
F4AA AFC4             (        forth.asm):03281 (5+0)           stx     ,u
F4AC 10AF42           (        forth.asm):03282 (6+1)           sty     2,u
F4AF 39               (        forth.asm):03283 (4)             rts
                      (        forth.asm):03284         
F4B0 05               (        forth.asm):03285         TWODROP fcb     5               ANSI (Core)
F4B1 3244524F50       (        forth.asm):03286                 fcc     '2DROP'         ( x1 x2 -- )
F4B6 F494             (        forth.asm):03287                 fdb     TWOSWAP
                      (        forth.asm):03288                 RFCS
F4B8 BDE9D0           (        forth.asm):03289 (7)             jsr     MIN2PST         At least two cells must be stacked up
F4BB 3344             (        forth.asm):03290 (4+1)           leau    4,u
F4BD 39               (        forth.asm):03291 (4)             rts
                      (        forth.asm):03292         
F4BE 04               (        forth.asm):03293         TWODUP  fcb     4               ANSI (Core)
F4BF 32445550         (        forth.asm):03294                 fcc     '2DUP'          ( double -- double double )
F4C3 F4B0             (        forth.asm):03295                 fdb     TWODROP
                      (        forth.asm):03296                 RFCS
F4C5 BDE9D0           (        forth.asm):03297 (7)             jsr     MIN2PST         At least two cells need to be stacked up
F4C8 10ECC4           (        forth.asm):03298 (8+0)           ldq     ,u              D:W has MSC:LSC of DOUBLE
F4CB 1F61             (        forth.asm):03299 (4)             tfr     w,x
F4CD BDE7DB           (        forth.asm):03300 (7)             jsr     NPUSH
F4D0 1F01             (        forth.asm):03301 (4)             tfr     d,x
F4D2 7EE7DB           (        forth.asm):03302 (3)             jmp     NPUSH
                      (        forth.asm):03303         
F4D5 02               (        forth.asm):03304         TWOSTOR fcb     2               ANSI (Core)
F4D6 3221             (        forth.asm):03305                 fcc     '2!'            ( x1 x2 a-addr -- )
F4D8 F4BE             (        forth.asm):03306                 fdb     TWODUP
                      (        forth.asm):03307                 RFCS
F4DA BDE9D5           (        forth.asm):03308 (7)             jsr     MIN3PST         At least three cells need to be stacked up
F4DD 10EC42           (        forth.asm):03309 (8+1)           ldq     2,u             DOUBLE to D:W
F4E0 10EDD4           (        forth.asm):03310 (8+3)           stq     [,u]            Store DOUBLE to ADDR
F4E3 3346             (        forth.asm):03311 (4+1)           leau    6,u             Drop three cells from the user stack
F4E5 39               (        forth.asm):03312 (4)             rts
                      (        forth.asm):03313         
F4E6 02               (        forth.asm):03314         TWOFTCH fcb     2               ANSI (Core)
F4E7 3240             (        forth.asm):03315                 fcc     '2@'            ( a-addr -- x1 x2 )
F4E9 F4D5             (        forth.asm):03316                 fdb     TWOSTOR
                      (        forth.asm):03317                 RFCS
F4EB BDE9CB           (        forth.asm):03318 (7)             jsr     MIN1PST         At least cell needs to be stacked up
F4EE 10ECD4           (        forth.asm):03319 (8+3)           ldq     [,u]            D:W has MSC:LSC of DBLADDR @
F4F1 10A7C4           (        forth.asm):03320 (6+0)           stw     ,u              Least significant cell stacked in place
F4F4 1F01             (        forth.asm):03321 (4)             tfr     d,x             Most significant cell goes through standard push
F4F6 7EE7DB           (        forth.asm):03322 (3)             jmp     NPUSH
                      (        forth.asm):03323         
F4F9 07               (        forth.asm):03324         TONUMBR fcb     7               ANSI (Core)
F4FA 3E4E554D424552   (        forth.asm):03325                 fcc     '>NUMBER'       ( ud1 c-addr1 u1 -- ud2 c-addr2 u2 )
F501 F4E6             (        forth.asm):03326                 fdb     TWOFTCH
                      (        forth.asm):03327                 RFCS
F503 BDE9DA           (        forth.asm):03328 (7)             jsr     MIN4PST         At least 4 cells need to be stacked up
F506 AE42             (        forth.asm):03329 (5+1)           ldx     2,u             C-ADDR1 to X
F508 ECC4             (        forth.asm):03330 (5+0)   @cvloop ldd     ,u              Check U1. End of input string reached?
F50A 2770             (        forth.asm):03331 (3)             beq     @cvdone         Yes--conversion is done
F50C E684             (        forth.asm):03332 (4+0)           ldb     ,x
                      (        forth.asm):03333         * B has the ASCII representation of something that may or may not be a valid
                      (        forth.asm):03334         * digit, expressed in BASE (alias (byte)UBASE+1). If it does, multiply D1 by
                      (        forth.asm):03335         * BASE and add that to D1 (aka D2 on exit). Then add DIGIT on the top of it.
F50E C030             (        forth.asm):03336 (2)             subb    #'0             Minimal ASCII value condition met?
F510 256A             (        forth.asm):03337 (3)             blo     @cvdone         No. Out of range. ,X cannot be a valid digit
F512 C10A             (        forth.asm):03338 (2)             cmpb    #10
F514 2510             (        forth.asm):03339 (3)             blo     @cvnolt         No letter in potential BASE
                      (        forth.asm):03340                 IFEQ    CSSNTVE
F516 C111             (        forth.asm):03341 (2)             cmpb    #'A-'0
F518 2562             (        forth.asm):03342 (3)             blo     @cvdone         Greater than 9 but lower than A
F51A C131             (        forth.asm):03343 (2)             cmpb    #'a-'0
F51C 2506             (        forth.asm):03344 (3)             blo     @cvisuc         Upper case already
F51E C14A             (        forth.asm):03345 (2)             cmpb    #'z-'0
F520 225A             (        forth.asm):03346 (3)             bhi     @cvdone         Definitely out of range
F522 C020             (        forth.asm):03347 (2)             subb    #'a-'A          To upper case
                      (        forth.asm):03348                 ENDC                    CSSNTVE
F524 C007             (        forth.asm):03349 (2)     @cvisuc subb    #'A-':          A-Z to number
F526 D123             (        forth.asm):03350 (3)     @cvnolt cmpb    UBASE+1         B has a digit. Make sure it's less than BASE
F528 2452             (        forth.asm):03351 (3)             bhs     @cvdone         Number under scrutiny is >= BASE
F52A 3276             (        forth.asm):03352 (4+1)           leas    -10,s           Allocate scratch space
F52C 6FE4             (        forth.asm):03353 (6+0)           clr     ,s
F52E E761             (        forth.asm):03354 (4+1)           stb     1,s
                      (        forth.asm):03355         * System and user stack structures are as follows:
                      (        forth.asm):03356         * ,s    current digit (1 cell)
                      (        forth.asm):03357         * 2,s   D0*B (1 cell)
                      (        forth.asm):03358         * 4,s   D1*B (1 cell)
                      (        forth.asm):03359         * 6,s   D2*B (1 cell)
                      (        forth.asm):03360         * 8,s   D3*B (1 cell)
                      (        forth.asm):03361         * ,u    U1 (1 cell)
                      (        forth.asm):03362         * 2,u   C-ADDR1 (1 cell)
                      (        forth.asm):03363         * 4,u   D1H most significant cell
                      (        forth.asm):03364         * 6,u   D1L least significant cell
F530 1F37             (        forth.asm):03365 (4)             tfr     u,v             Backup U
F532 3348             (        forth.asm):03366 (4+1)           leau    8,u             Point one byte after D1LL
F534 3162             (        forth.asm):03367 (4+1)           leay    2,s             Point to D0*B
F536 118604           (        forth.asm):03368 (3)             lde     #4              Four products to go through
F539 A6C2             (        forth.asm):03369 (4+1)   @cvmul  lda     ,-u
F53B D623             (        forth.asm):03370 (3)             ldb     UBASE+1
F53D 3D               (        forth.asm):03371 (10)            mul
F53E EDA1             (        forth.asm):03372 (5+2)           std     ,y++
F540 114A             (        forth.asm):03373 (2)             dece
F542 26F5             (        forth.asm):03374 (3)             bne     @cvmul
F544 1F73             (        forth.asm):03375 (4)             tfr     v,u             Restore U
                      (        forth.asm):03376         *
F546 A663             (        forth.asm):03377 (4+1)           lda     3,s             D0*B.L
F548 A747             (        forth.asm):03378 (4+1)           sta     7,u             D1L.L
                      (        forth.asm):03379         *
F54A A662             (        forth.asm):03380 (4+1)           lda     2,s             D0*B.H
F54C AB65             (        forth.asm):03381 (4+1)           adda    5,s             D1*B.L
F54E A746             (        forth.asm):03382 (4+1)           sta     6,u             D1L.H
                      (        forth.asm):03383         *
F550 A664             (        forth.asm):03384 (4+1)           lda     4,s             D1*B.H
F552 A967             (        forth.asm):03385 (4+1)           adca    7,s             D2*B.L
F554 A745             (        forth.asm):03386 (4+1)           sta     5,u             D1H.L
                      (        forth.asm):03387         *
F556 A666             (        forth.asm):03388 (4+1)           lda     6,s             D2*B.H
F558 A969             (        forth.asm):03389 (4+1)           adca    9,s             D3*B.L
F55A A744             (        forth.asm):03390 (4+1)           sta     4,u             D1H.H
                      (        forth.asm):03391         *
F55C 2521             (        forth.asm):03392 (3)             bcs     @cvovf          Out of range error if carry is set
F55E 6D68             (        forth.asm):03393 (5+1)           tst     8,s             D3*B.H
F560 261D             (        forth.asm):03394 (3)             bne     @cvovf          That one should be zero
                      (        forth.asm):03395         *
F562 EC46             (        forth.asm):03396 (5+1)           ldd     6,u             D1L
F564 E3E4             (        forth.asm):03397 (5+0)           addd    ,s              DIGIT
F566 ED46             (        forth.asm):03398 (5+1)           std     6,u
F568 EC44             (        forth.asm):03399 (5+1)           ldd     4,u             D1H
F56A 10890000         (        forth.asm):03400 (4)             adcd    #0              Potential carry from lower cell
F56E ED44             (        forth.asm):03401 (5+1)           std     4,u
F570 326A             (        forth.asm):03402 (4+1)           leas    10,s            Release scratch space
                      (        forth.asm):03403         * Update the count of unconverted characters (ultimately U2)
F572 ECC4             (        forth.asm):03404 (5+0)           ldd     ,u
F574 104A             (        forth.asm):03405 (2)             decd
F576 EDC4             (        forth.asm):03406 (5+0)           std     ,u
F578 3001             (        forth.asm):03407 (4+1)           leax    1,x             Point to the next character in the input string
F57A 208C             (        forth.asm):03408 (3)             bra     @cvloop         Here we go again
F57C AF42             (        forth.asm):03409 (5+1)   @cvdone stx     2,u             Set C-ADDR2
F57E 39               (        forth.asm):03410 (4)             rts
F57F C604             (        forth.asm):03411 (2)     @cvovf  ldb     #4              Out of range
F581 BDE74C           (        forth.asm):03412 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):03413         
F584 02               (        forth.asm):03414         CVTE    fcb     2               ANSI (Core)
F585 233E             (        forth.asm):03415                 fcc     '#>'            ( xd -- c-addr u )
F587 F4F9             (        forth.asm):03416                 fdb     TONUMBR
                      (        forth.asm):03417                 RFCS
F589 BDE7E9           (        forth.asm):03418 (7)             jsr     NPOP
F58C BDE7E9           (        forth.asm):03419 (7)             jsr     NPOP            Drop 2 cells from the data stack
F58F 8E01E5           (        forth.asm):03420 (3)             ldx     #APADBUF
F592 3610             (        forth.asm):03421                 UCNPUSH
F594 BDE243           (        forth.asm):03422 (7)             jsr     SLEN
F597 1F61             (        forth.asm):03423 (4)             tfr     w,x
F599 3610             (        forth.asm):03424                 UCNPUSH
F59B 39               (        forth.asm):03425 (4)             rts
                      (        forth.asm):03426         
F59C 04               (        forth.asm):03427         SIGN    fcb     4               ANSI (Core)
F59D 5349474E         (        forth.asm):03428                 fcc     'SIGN'          ( n -- )
F5A1 F584             (        forth.asm):03429                 fdb     CVTE
                      (        forth.asm):03430                 RFCS
F5A3 BDE7E9           (        forth.asm):03431 (7)             jsr     NPOP
F5A6 1F10             (        forth.asm):03432 (4)             tfr     x,d
F5A8 104D             (        forth.asm):03433 (2)             tstd
F5AA 2C04             (        forth.asm):03434 (3)             bge     @sign1
F5AC C62D             (        forth.asm):03435 (2)             ldb     #'-
F5AE 2066             (        forth.asm):03436 (3)             bra     PREAPAD
F5B0 39               (        forth.asm):03437 (4)     @sign1  rts
                      (        forth.asm):03438         
F5B1 04               (        forth.asm):03439         HOLD    fcb     4               ANSI (Core)
F5B2 484F4C44         (        forth.asm):03440                 fcc     'HOLD'          ( char -- )
F5B6 F59C             (        forth.asm):03441                 fdb     SIGN
                      (        forth.asm):03442                 RFCS
F5B8 BDE7E9           (        forth.asm):03443 (7)             jsr     NPOP
F5BB 1F10             (        forth.asm):03444 (4)             tfr     x,d
F5BD 2057             (        forth.asm):03445 (3)             bra     PREAPAD         B is inserted at the beginning of APADBUF.
                      (        forth.asm):03446         
F5BF 02               (        forth.asm):03447         SHARPS  fcb     2               ANSI (Core)
F5C0 2353             (        forth.asm):03448                 fcc     '#S'            ( ud1 -- ud2 )
F5C2 F5B1             (        forth.asm):03449                 fdb     HOLD
                      (        forth.asm):03450                 RFCS
F5C4 8601             (        forth.asm):03451 (2)             lda     #1
F5C6 973E             (        forth.asm):03452 (3)             sta     CVTFCN          CVT function #1 is #S
F5C8 2006             (        forth.asm):03453 (3)             bra     CVT0
                      (        forth.asm):03454         
                      (        forth.asm):03455         * Unsigned double on the top of the data stack gets divided by BASE.
                      (        forth.asm):03456         * The division algorithm implemented here is the binary long division.
                      (        forth.asm):03457         * See https://en.wikipedia.org/wiki/Division_algorithm for more information.
                      (        forth.asm):03458         * Remainder (converted to a character) gets prepended to APAD.
F5CA 01               (        forth.asm):03459         CVT     fcb     1               ANSI (Core)
F5CB 23               (        forth.asm):03460                 fcc     '#'             ( ud1 -- ud2 )
F5CC F5BF             (        forth.asm):03461                 fdb     SHARPS
                      (        forth.asm):03462                 RFCS
F5CE 0F3E             (        forth.asm):03463 (5)             clr     CVTFCN          CVT function 0 is #
F5D0 BDE7E9           (        forth.asm):03464 (7)     CVT0    jsr     NPOP
F5D3 1F12             (        forth.asm):03465 (4)             tfr     x,y
F5D5 BDE7E9           (        forth.asm):03466 (7)             jsr     NPOP
                      (        forth.asm):03467         * Stack structure:
                      (        forth.asm):03468         * ,s    Remainder               16 bits
                      (        forth.asm):03469         * 2,s   Bitmask high            16 bits
                      (        forth.asm):03470         * 4,s   Bitmask low             16 bits
                      (        forth.asm):03471         * 6,s   Quotient high           16 bits
                      (        forth.asm):03472         * 8,s   Quotient low            16 bits
                      (        forth.asm):03473         * 10,s  Numerator high          16 bits
                      (        forth.asm):03474         * 12,s  Numerator low           16 bits
                      (        forth.asm):03475         * 14,s  Denominator             16 bits
                      (        forth.asm):03476         * 16,s  Remainder carry         8 bits
F5D8 32E8EF           (        forth.asm):03477 (4+1)   CVT1    leas    -17,s
F5DB DC22             (        forth.asm):03478 (4)             ldd     UBASE
F5DD ED6E             (        forth.asm):03479 (5+1)           std     14,s            Denominator
F5DF AF6C             (        forth.asm):03480 (5+1)           stx     12,s            Numerator least significant cell
F5E1 10AF6A           (        forth.asm):03481 (6+1)           sty     10,s            Numerator most significant cell
F5E4 8D43             (        forth.asm):03482 (6)             bsr     DBDIVSG
                      (        forth.asm):03483         * Convert the remainder to a digit expressed in BASE.
F5E6 E661             (        forth.asm):03484 (4+1)           ldb     1,s
F5E8 8630             (        forth.asm):03485 (2)             lda     #'0
F5EA C10A             (        forth.asm):03486 (2)             cmpb    #10             B has the digit we want converted to BASE
F5EC 2502             (        forth.asm):03487 (3)             bcs     @cvtdgt
F5EE 8637             (        forth.asm):03488 (2)             lda     #'A-10
F5F0 103089           (        forth.asm):03489 (4)     @cvtdgt addr    a,b
F5F3 8D21             (        forth.asm):03490 (6)             bsr     PREAPAD         Prepend B to the string currently in PAD
F5F5 0D3E             (        forth.asm):03491 (4)             tst     CVTFCN
F5F7 2711             (        forth.asm):03492 (3)             beq     @cvtend         Function 0 is straight #, i.e. we're done here
                      (        forth.asm):03493         * Function 1 is #S, we iterate unless the quotient is 0.
F5F9 EC68             (        forth.asm):03494 (5+1)           ldd     8,s
F5FB 10AA66           (        forth.asm):03495 (6+1)           ord     6,s
F5FE 270A             (        forth.asm):03496 (3)             beq     @cvtend
F600 AE68             (        forth.asm):03497 (5+1)           ldx     8,s             New numerator low
F602 10AE66           (        forth.asm):03498 (6+1)           ldy     6,s             New numerator high
F605 32E811           (        forth.asm):03499 (4+1)           leas    17,s            Discard the stack frame
F608 20CE             (        forth.asm):03500 (3)             bra     CVT1            And go at it again
                      (        forth.asm):03501         * Push back the quotient on the data stack (low then high cell).
F60A AE68             (        forth.asm):03502 (5+1)   @cvtend ldx     8,s
F60C 3610             (        forth.asm):03503                 UCNPUSH
F60E AE66             (        forth.asm):03504 (5+1)           ldx     6,s
F610 3610             (        forth.asm):03505                 UCNPUSH
F612 32E811           (        forth.asm):03506 (4+1)           leas    17,s            Discard the stack frame
F615 39               (        forth.asm):03507 (4)             rts
                      (        forth.asm):03508         
                      (        forth.asm):03509         * Insert the character in B in front of the string at APADBUF.
F616 8E01E5           (        forth.asm):03510 (3)     PREAPAD ldx     #APADBUF
F619 BDE243           (        forth.asm):03511 (7)             jsr     SLEN
F61C 103061           (        forth.asm):03512 (4)             addr    w,x             X points to the PAD string's NUL terminator
F61F 105C             (        forth.asm):03513 (2)             incw                    Include the terminator
F621 3101             (        forth.asm):03514 (4+1)           leay    1,x
F623 113912           (        forth.asm):03515 (6+?)           tfm     x-,y-
F626 D7E5             (        forth.asm):03516 (3)             stb     APADBUF
F628 39               (        forth.asm):03517 (4)             rts
                      (        forth.asm):03518         
                      (        forth.asm):03519         * Double (numerator high/low) gets divided by a single cell number. Please note
                      (        forth.asm):03520         * that this is a strictly unsigned business. Input parameters are supposed to
                      (        forth.asm):03521         * have been set up by the caller on the system stack. The quotient (high/low)
                      (        forth.asm):03522         * and remainder are returned the same way. Current users of this routine are
                      (        forth.asm):03523         * CVT (#) and UMSLMOD (UM/MOD).
                      (        forth.asm):03524         *
                      (        forth.asm):03525         * Stack structure:
                      (        forth.asm):03526         * ,s    Return address          16 bits
                      (        forth.asm):03527         * 2,s   Remainder               16 bits
                      (        forth.asm):03528         * 4,s   Bitmask high            16 bits
                      (        forth.asm):03529         * 6,s   Bitmask low             16 bits
                      (        forth.asm):03530         * 8,s   Quotient high           16 bits
                      (        forth.asm):03531         * 10,s  Quotient low            16 bits
                      (        forth.asm):03532         * 12,s  Numerator high          16 bits
                      (        forth.asm):03533         * 14,s  Numerator low           16 bits
                      (        forth.asm):03534         * 16,s  Denominator             16 bits
                      (        forth.asm):03535         * 18,s  Remainder carry         8 bits
                      (        forth.asm):03536         *
F629 CC8000           (        forth.asm):03537 (3)     DBDIVSG ldd     #$8000
F62C ED64             (        forth.asm):03538 (5+1)           std     4,s             Bitmask high
F62E 4F               (        forth.asm):03539 (1)             clra
F62F ED66             (        forth.asm):03540 (5+1)           std     6,s             Bitmask low
F631 ED68             (        forth.asm):03541 (5+1)           std     8,s             Quotient high
F633 ED6A             (        forth.asm):03542 (5+1)           std     10,s            Quotient low
F635 ED62             (        forth.asm):03543 (5+1)           std     2,s             Remainder
F637 11C61F           (        forth.asm):03544 (3)             ldf     #31             32 bits to go
F63A 6863             (        forth.asm):03545 (6+1)   @cvbeg  lsl     3,s
F63C 6962             (        forth.asm):03546 (6+1)           rol     2,s             R := R << 1
F63E 1FA8             (        forth.asm):03547 (4)             tfr     cc,a
F640 8401             (        forth.asm):03548 (2)             anda    #CFLAG
F642 A7E812           (        forth.asm):03549 (4+1)           sta     18,s            Save CFLAG after left shift of the remainder
                      (        forth.asm):03550         * We need to extract bit <f> (i) of the numerator. Since (i) varies from 31
                      (        forth.asm):03551         * downto 0, all we need to do is to shift left a 32 bit quantity and isolate
                      (        forth.asm):03552         * the carry flag as the bit of interest.
F645 EC6E             (        forth.asm):03553 (5+1)           ldd     14,s            Numerator low
F647 1048             (        forth.asm):03554 (2)             lsld
F649 ED6E             (        forth.asm):03555 (5+1)           std     14,s
F64B EC6C             (        forth.asm):03556 (5+1)           ldd     12,s            Numerator high
F64D 1049             (        forth.asm):03557 (2)             rold
F64F ED6C             (        forth.asm):03558 (5+1)           std     12,s
F651 1FA8             (        forth.asm):03559 (4)             tfr     cc,a
F653 8401             (        forth.asm):03560 (2)             anda    #CFLAG          CFLAG is 1, which is ideal here
F655 AA63             (        forth.asm):03561 (4+1)           ora     3,s             R(0) := N(i)
F657 A763             (        forth.asm):03562 (4+1)           sta     3,s             Update the remainder
F659 1F89             (        forth.asm):03563 (4)             tfr     a,b             Remainder LSB
F65B A662             (        forth.asm):03564 (4+1)           lda     2,s             Remainder MSB
F65D 6DE812           (        forth.asm):03565 (5+1)           tst     18,s
F660 2606             (        forth.asm):03566 (3)             bne     @frcsub         Carry was set on left shift of the remainder
F662 10A3E810         (        forth.asm):03567 (6+1)           cmpd    16,s            Denominator
F666 2513             (        forth.asm):03568 (3)             blo     @cvshft
F668 A3E810           (        forth.asm):03569 (5+1)   @frcsub subd    16,s
F66B ED62             (        forth.asm):03570 (5+1)           std     2,s             R := R - D
                      (        forth.asm):03571         * Q(i) := 1 (use the bitmask).
F66D EC68             (        forth.asm):03572 (5+1)           ldd     8,s             Quotient high
F66F 10AA64           (        forth.asm):03573 (6+1)           ord     4,s             Bitmask high
F672 ED68             (        forth.asm):03574 (5+1)           std     8,s
F674 EC6A             (        forth.asm):03575 (5+1)           ldd     10,s            Quotient low
F676 10AA66           (        forth.asm):03576 (6+1)           ord     6,s             Bitmask low
F679 ED6A             (        forth.asm):03577 (5+1)           std     10,s
                      (        forth.asm):03578         * Shift the bitmask 1 bit right.
F67B EC64             (        forth.asm):03579 (5+1)   @cvshft ldd     4,s
F67D 1044             (        forth.asm):03580 (2)             lsrd
F67F ED64             (        forth.asm):03581 (5+1)           std     4,s
F681 EC66             (        forth.asm):03582 (5+1)           ldd     6,s
F683 1046             (        forth.asm):03583 (2)             rord
F685 ED66             (        forth.asm):03584 (5+1)           std     6,s
F687 115A             (        forth.asm):03585 (2)             decf
F689 2CAF             (        forth.asm):03586 (3)             bge     @cvbeg
F68B 39               (        forth.asm):03587 (4)             rts
                      (        forth.asm):03588         
F68C 02               (        forth.asm):03589         CVTB    fcb     2               ANSI (Core)
F68D 3C23             (        forth.asm):03590                 fcc     '<#'            ( -- )
F68F F5CA             (        forth.asm):03591                 fdb     CVT
                      (        forth.asm):03592                 RFCS
F691 0FE5             (        forth.asm):03593 (5)             clr     APADBUF
F693 39               (        forth.asm):03594 (4)             rts
                      (        forth.asm):03595         
F694 01               (        forth.asm):03596         DOT     fcb     1               ANSI (Core)
F695 2E               (        forth.asm):03597                 fcc     '.'             ( n -- )
F696 F68C             (        forth.asm):03598                 fdb     CVTB
                      (        forth.asm):03599                 RFCS
F698 8601             (        forth.asm):03600 (2)             lda     #1
F69A 9741             (        forth.asm):03601 (3)             sta     CVISSGN         Force a signed number conversion
F69C BDE7E9           (        forth.asm):03602 (7)     PTOP0   jsr     NPOP            N to X
F69F BDE456           (        forth.asm):03603 (7)             jsr     CVNSTR
F6A2 8E050C           (        forth.asm):03604 (3)             ldx     #TBUFF
F6A5 8620             (        forth.asm):03605 (2)             lda     #SP
F6A7 A180             (        forth.asm):03606 (4+1)   @ptop1  cmpa    ,x+             Skip leading spaces
F6A9 27FC             (        forth.asm):03607 (3)             beq     @ptop1
F6AB 301F             (        forth.asm):03608 (4+1)           leax    -1,x            Point to actual string start address
F6AD BDE2EA           (        forth.asm):03609 (7)             jsr     PUTS
F6B0 7EE2D7           (        forth.asm):03610 (3)             jmp     PUTCH           Extra space after printing a number
                      (        forth.asm):03611         
F6B3 02               (        forth.asm):03612         UDOT    fcb     2               ANSI (Core)
F6B4 552E             (        forth.asm):03613                 fcc     'U.'            ( u -- )
F6B6 F694             (        forth.asm):03614                 fdb     DOT
                      (        forth.asm):03615                 RFCS
F6B8 0F41             (        forth.asm):03616 (5)             clr     CVISSGN         Conversion is unsigned
F6BA 20E0             (        forth.asm):03617 (3)             bra     PTOP0
                      (        forth.asm):03618         
F6BC 02               (        forth.asm):03619         DOTR    fcb     2               ANSI (Core ext)
F6BD 2E52             (        forth.asm):03620                 fcc     '.R'
F6BF F6B3             (        forth.asm):03621                 fdb     UDOT
                      (        forth.asm):03622                 RFCS
F6C1 8601             (        forth.asm):03623 (2)             lda     #1
F6C3 9741             (        forth.asm):03624 (3)             sta     CVISSGN
F6C5 BDE7E9           (        forth.asm):03625 (7)     DOTR0   jsr     NPOP
F6C8 3410             (        forth.asm):03626 (4+2)           pshs    x               Length parameter value
F6CA BDE7E9           (        forth.asm):03627 (7)             jsr     NPOP
F6CD BDE456           (        forth.asm):03628 (7)             jsr     CVNSTR
F6D0 8E050C           (        forth.asm):03629 (3)             ldx     #TBUFF
F6D3 8620             (        forth.asm):03630 (2)             lda     #SP
F6D5 A180             (        forth.asm):03631 (4+1)   @dotr1  cmpa    ,x+
F6D7 27FC             (        forth.asm):03632 (3)             beq     @dotr1          Skip leading spaces
F6D9 301F             (        forth.asm):03633 (4+1)           leax    -1,x
F6DB BDE243           (        forth.asm):03634 (7)             jsr     SLEN            String length is returned in W
F6DE 3506             (        forth.asm):03635 (4+2)           puls    d
F6E0 1E06             (        forth.asm):03636 (5)             exg     d,w
F6E2 103206           (        forth.asm):03637 (4)             subr    d,w
F6E5 2F0D             (        forth.asm):03638 (3)             ble     @dotr3
F6E7 8620             (        forth.asm):03639 (2)             lda     #SP
F6E9 105D             (        forth.asm):03640 (2)     @dotr2  tstw
F6EB 2707             (        forth.asm):03641 (3)             beq     @dotr3
F6ED BDE2D7           (        forth.asm):03642 (7)             jsr     PUTCH
F6F0 105A             (        forth.asm):03643 (2)             decw
F6F2 20F5             (        forth.asm):03644 (3)             bra     @dotr2
F6F4 7EE2EA           (        forth.asm):03645 (3)     @dotr3  jmp     PUTS
                      (        forth.asm):03646         
F6F7 03               (        forth.asm):03647         UDOTR   fcb     3               ANSI (Core ext)
F6F8 552E52           (        forth.asm):03648                 fcc     'U.R'
F6FB F6BC             (        forth.asm):03649                 fdb     DOTR
                      (        forth.asm):03650                 RFCS
F6FD 0F41             (        forth.asm):03651 (5)             clr     CVISSGN
F6FF 20C4             (        forth.asm):03652 (3)             bra     DOTR0
                      (        forth.asm):03653         
F701 02               (        forth.asm):03654         BL      fcb     2               ANSI (Core)
F702 424C             (        forth.asm):03655                 fcc     'BL'            ( -- char )
F704 F6F7             (        forth.asm):03656                 fdb     UDOTR
                      (        forth.asm):03657                 RFCS
F706 8E0020           (        forth.asm):03658 (3)             ldx     #SP
F709 7EE7DB           (        forth.asm):03659 (3)             jmp     NPUSH
                      (        forth.asm):03660         
F70C 05               (        forth.asm):03661         SPACE   fcb     5               ANSI (Core)
F70D 5350414345       (        forth.asm):03662                 fcc     'SPACE'         ( -- )
F712 F701             (        forth.asm):03663                 fdb     BL
                      (        forth.asm):03664                 RFCS
F714 8620             (        forth.asm):03665 (2)             lda     #SP
F716 7EE2D7           (        forth.asm):03666 (3)             jmp     PUTCH
                      (        forth.asm):03667         
F719 06               (        forth.asm):03668         SPACES  fcb     6               ANSI (Core)
F71A 535041434553     (        forth.asm):03669                 fcc     'SPACES'        ( n -- )
F720 F70C             (        forth.asm):03670                 fdb     SPACE
                      (        forth.asm):03671                 RFCS
F722 BDE7E9           (        forth.asm):03672 (7)             jsr     NPOP
F725 8620             (        forth.asm):03673 (2)             lda     #SP
F727 1F16             (        forth.asm):03674 (4)             tfr     x,w
F729 105D             (        forth.asm):03675 (2)             tstw
F72B 2601             (        forth.asm):03676 (3)     @loop   bne     @cont
F72D 39               (        forth.asm):03677 (4)             rts
F72E BDE2D7           (        forth.asm):03678 (7)     @cont   jsr     PUTCH
F731 105A             (        forth.asm):03679 (2)             decw
F733 20F6             (        forth.asm):03680 (3)             bra     @loop
                      (        forth.asm):03681         
F735 04               (        forth.asm):03682         PAGE    fcb     4               ANSI (Facility)
F736 50414745         (        forth.asm):03683                 fcc     'PAGE'
F73A F719             (        forth.asm):03684                 fdb     SPACES
                      (        forth.asm):03685                 RFCS
F73C 8EFE25           (        forth.asm):03686 (3)             ldx     #CSVT100
F73F 7EE2EA           (        forth.asm):03687 (3)             jmp     PUTS
                      (        forth.asm):03688         
F742 02               (        forth.asm):03689         CRLF    fcb     2               ANSI (Core)
F743 4352             (        forth.asm):03690                 fcc     'CR'            ( -- )
F745 F735             (        forth.asm):03691                 fdb     PAGE
                      (        forth.asm):03692                 RFCS
F747 7EE2F7           (        forth.asm):03693 (3)             jmp     PUTCR
                      (        forth.asm):03694         
F74A 03               (        forth.asm):03695         PAD     fcb     3               ANSI (Core ext)
F74B 504144           (        forth.asm):03696                 fcc     'PAD'
F74E F742             (        forth.asm):03697                 fdb     CRLF
                      (        forth.asm):03698                 RFCS
F750 8E0191           (        forth.asm):03699 (3)             ldx     #PADBUF
F753 7EE7DB           (        forth.asm):03700 (3)             jmp     NPUSH
                      (        forth.asm):03701         
F756 04               (        forth.asm):03702         TYPE    fcb     4               ANSI (Core)
F757 54595045         (        forth.asm):03703                 fcc     'TYPE'          ( c-addr u -- )
F75B F74A             (        forth.asm):03704                 fdb     PAD
                      (        forth.asm):03705                 RFCS
F75D BDE7E9           (        forth.asm):03706 (7)             jsr     NPOP            Character count (signed)
F760 1F16             (        forth.asm):03707 (4)             tfr     x,w
F762 BDE7E9           (        forth.asm):03708 (7)             jsr     NPOP            Buffer address
F765 105D             (        forth.asm):03709 (2)             tstw                    
F767 2601             (        forth.asm):03710 (3)     @loop   bne     @cont
F769 39               (        forth.asm):03711 (4)             rts
F76A A680             (        forth.asm):03712 (4+1)   @cont   lda     ,x+
F76C BDE2D7           (        forth.asm):03713 (7)             jsr     PUTCH
F76F 105A             (        forth.asm):03714 (2)             decw
F771 20F4             (        forth.asm):03715 (3)             bra     @loop
                      (        forth.asm):03716         
F773 05               (        forth.asm):03717         COUNT   fcb     5               ANSI (Core)
F774 434F554E54       (        forth.asm):03718                 fcc     'COUNT'         ( c-addr1 -- c-addr2 u )
F779 F756             (        forth.asm):03719                 fdb     TYPE
                      (        forth.asm):03720                 RFCS
F77B BDE7E9           (        forth.asm):03721 (7)             jsr     NPOP            C-ADDR1 to X
F77E E680             (        forth.asm):03722 (4+1)           ldb     ,x+             B has LSB(U) and X has C-ADDR2
F780 3610             (        forth.asm):03723                 UCNPUSH                 C-ADDR2 to the data stack (B is preserved)
F782 4F               (        forth.asm):03724 (1)             clra
F783 1F01             (        forth.asm):03725 (4)             tfr     d,x
F785 7EE7DB           (        forth.asm):03726 (3)             jmp     NPUSH           U to the data stack
                      (        forth.asm):03727         
F788 06               (        forth.asm):03728         ACCEPT  fcb     6               ANSI (Core)
F789 414343455054     (        forth.asm):03729                 fcc     'ACCEPT'        ( c-addr +n1 -- +n2 )
F78F F773             (        forth.asm):03730                 fdb     COUNT
                      (        forth.asm):03731                 RFCS
F791 BDE7E9           (        forth.asm):03732 (7)             jsr     NPOP
F794 1F10             (        forth.asm):03733 (4)             tfr     x,d             Buffer length to B
F796 BDE7E9           (        forth.asm):03734 (7)             jsr     NPOP            Buffer address to X. B is preserved
F799 BDE30D           (        forth.asm):03735 (7)             jsr     GETS            Input character count is returned via B
F79C 4F               (        forth.asm):03736 (1)             clra
F79D 3606             (        forth.asm):03737 (4+2)           pshu    d               This saves us "tfr d,x" and "UCNPUSH"
F79F 39               (        forth.asm):03738 (4)             rts
                      (        forth.asm):03739         
F7A0 49               (        forth.asm):03740         TERPRET fcb     $49             79-STANDARD (REF) I make this compile time only
F7A1 494E544552505245 (        forth.asm):03741                 fcc     'INTERPRET'     ( -- )
     54
F7AA F788             (        forth.asm):03742                 fdb     ACCEPT
                      (        forth.asm):03743                 RFCS
                      (        forth.asm):03744         * Obtain a base buffer address based on the value of BLK.
F7AC 9E2C             (        forth.asm):03745 (4)             ldx     UBLK
F7AE 260B             (        forth.asm):03746 (3)             bne     @isblk
                      (        forth.asm):03747         * A Zero BLK value indicates the console OR a counted string set up by EVALUATE.
F7B0 8E0438           (        forth.asm):03748 (3)             ldx     #CMDBUF         Base buffer address for serial line input
F7B3 0D4A             (        forth.asm):03749 (4)             tst     SRCID           Counted string?
F7B5 2710             (        forth.asm):03750 (3)             beq     @rsolvd         No. Back to the serial console
F7B7 9E20             (        forth.asm):03751 (4)             ldx     BSBFADR         BSBFADR and ISLEN have been set up previously
F7B9 200C             (        forth.asm):03752 (3)             bra     @rsolvd
                      (        forth.asm):03753         * BLK is NZ, map the block in memory.
F7BB BDE7DB           (        forth.asm):03754 (7)     @isblk  jsr     NPUSH           X has the target block number
F7BE BDEAF0           (        forth.asm):03755                 RFXT    jsr,BLOCK+8     XT for BLOCK. Map the block in
F7C1 3710             (        forth.asm):03756                 UCNPOP                  Retrieve buffer address (to X)
                      (        forth.asm):03757         * The physical address of the current block might have changed. This should be
                      (        forth.asm):03758         * reflected by clearing ISEADDR.
F7C3 104F             (        forth.asm):03759 (2)             clrd
F7C5 DD28             (        forth.asm):03760 (4)             std     ISEADDR
F7C7 9F20             (        forth.asm):03761 (4)     @rsolvd stx     BSBFADR
                      (        forth.asm):03762         * Note: >IN is supposed to have been set by the caller!
F7C9 DC2A             (        forth.asm):03763 (4)             ldd     UTOIN
F7CB 103001           (        forth.asm):03764 (4)             addr    d,x
F7CE 7EE0BF           (        forth.asm):03765 (3)             jmp     _INTERP         Finally invoke _INTERP.
                      (        forth.asm):03766         
F7D1 04               (        forth.asm):03767         LOAD    fcb     4               ANSI (Block)
F7D2 4C4F4144         (        forth.asm):03768                 fcc     'LOAD'          ( i*x u -- j*x )
F7D6 F7A0             (        forth.asm):03769                 fdb     TERPRET
                      (        forth.asm):03770                 RFCS
F7D8 BDE7E9           (        forth.asm):03771 (7)             jsr     NPOP            ZFLAG is set by NPOP
F7DB 2601             (        forth.asm):03772 (3)             bne     LOAD1
F7DD 39               (        forth.asm):03773 (4)             rts                     Block 0 is _not_ loadable
F7DE BDE83A           (        forth.asm):03774 (7)     LOAD1   jsr     SAVINP          Save input parameters. X is preserved
F7E1 9F2C             (        forth.asm):03775 (4)             stx     UBLK            Update BLK with the LOAD argument
F7E3 CC0400           (        forth.asm):03776 (3)             ldd     #BLKSIZ         1024 bytes
F7E6 DD26             (        forth.asm):03777 (4)             std     ISLEN           Set input stream length
F7E8 104F             (        forth.asm):03778 (2)             clrd
F7EA 974A             (        forth.asm):03779 (3)             sta     SRCID           Not invoked in EVALUATE context
F7EC DD2A             (        forth.asm):03780 (4)     LOAD2   std     UTOIN           Clear >IN
F7EE DD28             (        forth.asm):03781 (4)             std     ISEADDR         End of input stream address (included)
                      (        forth.asm):03782         * Map the new BLK in, interpret code from there.
F7F0 8DBA             (        forth.asm):03783                 RFXT    bsr,TERPRET+12  XT for INTERPRET
F7F2 BDE855           (        forth.asm):03784 (7)             jsr     RSTINP          Restore input parameters
F7F5 7EE86F           (        forth.asm):03785 (3)             jmp     BKIN2PT         Map BLK in (if needed) and update BSBFADR
                      (        forth.asm):03786         
F7F8 08               (        forth.asm):03787         EVAL    fcb     8               ANSI (Core/Block)
F7F9 4556414C55415445 (        forth.asm):03788                 fcc     'EVALUATE'      ( i * x c-addr u -- j * x )
F801 F7D1             (        forth.asm):03789                 fdb     LOAD
                      (        forth.asm):03790                 RFCS
F803 BDE9D0           (        forth.asm):03791 (7)             jsr     MIN2PST         Need at least 2 parameters on the data stack
                      (        forth.asm):03792         * The whole thing looks like LOAD1 except we do not need to map a block in.
F806 AE42             (        forth.asm):03793 (5+1)           ldx     2,u             C-ADDR
F808 10AEC4           (        forth.asm):03794 (6+0)           ldy     ,u              U
F80B 3344             (        forth.asm):03795 (4+1)           leau    4,u             Drop 2 cells from the data stack
F80D BDE83A           (        forth.asm):03796 (7)             jsr     SAVINP          Save input context. X is preserved
F810 9F20             (        forth.asm):03797 (4)             stx     BSBFADR         Set BSBFADR from C-ADDR
F812 109F26           (        forth.asm):03798 (5)             sty     ISLEN           Set ISLEN from U
F815 86FF             (        forth.asm):03799 (2)             lda     #$FF
F817 974A             (        forth.asm):03800 (3)             sta     SRCID           -1 (byte) to SRCID. Invoked in EVALUATE context
F819 104F             (        forth.asm):03801 (2)             clrd
F81B DD2C             (        forth.asm):03802 (4)             std     UBLK            Target block number is zero
F81D 20CD             (        forth.asm):03803 (3)             bra     LOAD2           Interpret, restore input context and proceed
                      (        forth.asm):03804         
F81F 04               (        forth.asm):03805         THRU    fcb     4               ANSI (Block ext)
F820 54485255         (        forth.asm):03806                 fcc     'THRU'          ( u1 u2 -- )
F824 F7F8             (        forth.asm):03807                 fdb     EVAL
                      (        forth.asm):03808                 RFCS
F826 BDE7E9           (        forth.asm):03809 (7)             jsr     NPOP
F829 1F12             (        forth.asm):03810 (4)             tfr     x,y             Y has U2 (highblk)
F82B BDE7E9           (        forth.asm):03811 (7)             jsr     NPOP            X has U1 (lowblk)--both are unsigned numbers
F82E 103712           (        forth.asm):03812 (4)     @thrlop cmpr    x,y
F831 2401             (        forth.asm):03813 (3)             bhs     @cont           Limit is >= to the loop index
F833 39               (        forth.asm):03814 (4)             rts
F834 3430             (        forth.asm):03815 (4+4)   @cont   pshs    x,y             Backup loop parameters
F836 3610             (        forth.asm):03816                 UCNPUSH                 Current block number to the data stack
F838 8D9E             (        forth.asm):03817                 RFXT    bsr,LOAD+7      XT for LOAD
F83A 3530             (        forth.asm):03818 (4+4)           puls    y,x             Retrieve loop parameters
F83C 3001             (        forth.asm):03819 (4+1)           leax    1,x             Iterate over to the next screen
F83E 20EE             (        forth.asm):03820 (3)             bra     @thrlop
                      (        forth.asm):03821         
F840 02               (        forth.asm):03822         MILLIS  fcb     2               ANSI (Facility ext)
F841 4D53             (        forth.asm):03823                 fcc     'MS'            ( u -- )
F843 F81F             (        forth.asm):03824                 fdb     THRU
                      (        forth.asm):03825                 RFCS
F845 BDE7E9           (        forth.asm):03826 (7)             jsr     NPOP            ZFLAG is set by NPOP
F848 270B             (        forth.asm):03827 (3)             beq     @ms3
F84A CC031A           (        forth.asm):03828 (3)     MILLIS1 ldd     #MSLCNT
F84D 104A             (        forth.asm):03829 (2)     @ms2    decd
F84F 26FC             (        forth.asm):03830 (3)             bne     @ms2
F851 301F             (        forth.asm):03831 (4+1)           leax    -1,x
F853 26F5             (        forth.asm):03832 (3)             bne     MILLIS1
F855 39               (        forth.asm):03833 (4)     @ms3    rts
                      (        forth.asm):03834         
F856 04               (        forth.asm):03835         KEYP    fcb     4               ANSI (Facility)
F857 4B45593F         (        forth.asm):03836                 fcc     'KEY?'          ( -- flag )
F85B F840             (        forth.asm):03837                 fdb     MILLIS
                      (        forth.asm):03838                 RFCS
F85D 1FC1             (        forth.asm):03839 (4)             tfr     0,x
F85F 0D4F             (        forth.asm):03840 (4)             tst     SERBCNT
F861 2702             (        forth.asm):03841 (3)             beq     @done
F863 301F             (        forth.asm):03842 (4+1)           leax    -1,x            Return the ANSI true
F865 7EE7DB           (        forth.asm):03843 (3)     @done   jmp     NPUSH
                      (        forth.asm):03844         
F868 03               (        forth.asm):03845         KEY     fcb     3               ANSI (Core)
F869 4B4559           (        forth.asm):03846                 fcc     'KEY'           ( -- char )
F86C F856             (        forth.asm):03847                 fdb     KEYP
                      (        forth.asm):03848                 RFCS
F86E BDE2AB           (        forth.asm):03849 (7)             jsr     GETCH
F871 1F89             (        forth.asm):03850 (4)             tfr     a,b
F873 4F               (        forth.asm):03851 (1)             clra
F874 1F01             (        forth.asm):03852 (4)             tfr     d,x
F876 7EE7DB           (        forth.asm):03853 (3)             jmp     NPUSH
                      (        forth.asm):03854         
F879 04               (        forth.asm):03855         EMIT    fcb     4               ANSI (Core)
F87A 454D4954         (        forth.asm):03856                 fcc     'EMIT'          ( x -- )
F87E F868             (        forth.asm):03857                 fdb     KEY
                      (        forth.asm):03858                 RFCS
F880 BDE7E9           (        forth.asm):03859 (7)             jsr     NPOP
F883 1F10             (        forth.asm):03860 (4)             tfr     x,d
F885 1F98             (        forth.asm):03861 (4)             tfr     b,a
F887 7EE2D7           (        forth.asm):03862 (3)             jmp     PUTCH
                      (        forth.asm):03863         
F88A 01               (        forth.asm):03864         PLUS    fcb     1               ANSI (Core)
F88B 2B               (        forth.asm):03865                 fcc     '+'             ( n1 | u1 n2 | u2 -- n3 | u3 )
F88C F879             (        forth.asm):03866                 fdb     EMIT
                      (        forth.asm):03867                 RFCS
F88E BDE9D0           (        forth.asm):03868 (7)             jsr     MIN2PST         We need at least two cells stacked up
F891 EC42             (        forth.asm):03869 (5+1)           ldd     2,u             N1 to D
F893 E3C4             (        forth.asm):03870 (5+0)           addd    ,u              D has N1+N2
F895 ED42             (        forth.asm):03871 (5+1)           std     2,u             D to N3
F897 3342             (        forth.asm):03872 (4+1)           leau    2,u             Drop the top cell
F899 39               (        forth.asm):03873 (4)             rts
                      (        forth.asm):03874         
F89A 02               (        forth.asm):03875         ONEM    fcb     2               ANSI (Core)
F89B 312D             (        forth.asm):03876                 fcc     '1-'            ( n1|u1 -- n2|u2 )
F89D F88A             (        forth.asm):03877                 fdb     PLUS
                      (        forth.asm):03878                 RFCS
F89F BDE9CB           (        forth.asm):03879 (7)             jsr     MIN1PST         We need at least one cell stacked up
F8A2 ECC4             (        forth.asm):03880 (5+0)           ldd     ,u
F8A4 104A             (        forth.asm):03881 (2)             decd
F8A6 EDC4             (        forth.asm):03882 (5+0)           std     ,u
F8A8 39               (        forth.asm):03883 (4)             rts
                      (        forth.asm):03884         
F8A9 02               (        forth.asm):03885         ONEP    fcb     2               ANSI (Core)
F8AA 312B             (        forth.asm):03886                 fcc     '1+'            ( n1|u1 -- n2|u2 )
F8AC F89A             (        forth.asm):03887                 fdb     ONEM
                      (        forth.asm):03888                 RFCS
F8AE BDE9CB           (        forth.asm):03889 (7)             jsr     MIN1PST         We need at least one cell stacked up
F8B1 ECC4             (        forth.asm):03890 (5+0)           ldd     ,u
F8B3 104C             (        forth.asm):03891 (2)             incd
F8B5 EDC4             (        forth.asm):03892 (5+0)           std     ,u
F8B7 39               (        forth.asm):03893 (4)             rts
                      (        forth.asm):03894         
F8B8 05               (        forth.asm):03895         CHARP   fcb     5               ANSI Core
F8B9 434841522B       (        forth.asm):03896                 fcc     'CHAR+'         ( c-addr1 -- c-addr2 )
F8BE F8A9             (        forth.asm):03897                 fdb     ONEP
                      (        forth.asm):03898                 RFCS
F8C0 20EC             (        forth.asm):03899                 RFXT    bra,ONEP+5      XT for 1+
                      (        forth.asm):03900         
F8C2 01               (        forth.asm):03901         MINUS   fcb     1               ANSI (Core)
F8C3 2D               (        forth.asm):03902                 fcc     '-'             ( n1|u1 n2|u2 -- n3|u3 )
F8C4 F8B8             (        forth.asm):03903                 fdb     CHARP
                      (        forth.asm):03904                 RFCS
F8C6 BDE9D0           (        forth.asm):03905 (7)             jsr     MIN2PST         We need at least two cells stacked up
F8C9 EC42             (        forth.asm):03906 (5+1)           ldd     2,u             N1 to D
F8CB A3C4             (        forth.asm):03907 (5+0)           subd    ,u              D has N1-N2
F8CD ED42             (        forth.asm):03908 (5+1)           std     2,u             Store D to N3
F8CF 3342             (        forth.asm):03909 (4+1)           leau    2,u             Drop the top cell
F8D1 39               (        forth.asm):03910 (4)             rts
                      (        forth.asm):03911         
F8D2 05               (        forth.asm):03912         FALSE   fcb     5               ANSI (Core ext)
F8D3 46414C5345       (        forth.asm):03913                 fcc     'FALSE'
F8D8 F8C2             (        forth.asm):03914                 fdb     MINUS
                      (        forth.asm):03915                 RFCS
F8DA 1FC1             (        forth.asm):03916 (4)             tfr     0,x
F8DC 7EE7DB           (        forth.asm):03917 (3)             jmp     NPUSH
                      (        forth.asm):03918         
F8DF 04               (        forth.asm):03919         TRUE    fcb     4               ANSI (Core ext)
F8E0 54525545         (        forth.asm):03920                 fcc     'TRUE'
F8E4 F8D2             (        forth.asm):03921                 fdb     FALSE
                      (        forth.asm):03922                 RFCS
F8E6 8EFFFF           (        forth.asm):03923 (3)             ldx     #-1
F8E9 7EE7DB           (        forth.asm):03924 (3)             jmp     NPUSH
                      (        forth.asm):03925         
F8EC 05               (        forth.asm):03926         SHIFT   fcb     5               79-STANDARD (REF)
F8ED 5348494654       (        forth.asm):03927                 fcc     'SHIFT'
F8F2 F8DF             (        forth.asm):03928                 fdb     TRUE
                      (        forth.asm):03929                 RFCS
F8F4 BDE9D0           (        forth.asm):03930 (7)             jsr     MIN2PST         Two cells need to be stacked up
F8F7 10A6C4           (        forth.asm):03931 (6+0)           ldw     ,u              Shift bitcount
F8FA EC42             (        forth.asm):03932 (5+1)           ldd     2,u             The data itself
F8FC 105D             (        forth.asm):03933 (2)     @shftlp tstw
F8FE 2712             (        forth.asm):03934 (3)             beq     @shfdon
F900 2D08             (        forth.asm):03935 (3)             blt     @shftrg
F902 1048             (        forth.asm):03936 (2)             lsld                    Shift left (W is positive)
F904 270C             (        forth.asm):03937 (3)             beq     @shfdon         Done if outcome is zero
F906 105A             (        forth.asm):03938 (2)             decw
F908 20F2             (        forth.asm):03939 (3)             bra     @shftlp
F90A 1044             (        forth.asm):03940 (2)     @shftrg lsrd                    Shift right (W is negative)
F90C 2704             (        forth.asm):03941 (3)             beq     @shfdon         Done if outcome is zero
F90E 105C             (        forth.asm):03942 (2)             incw
F910 20EA             (        forth.asm):03943 (3)             bra     @shftlp
F912 ED42             (        forth.asm):03944 (5+1)   @shfdon std     2,u             Return value stored there
F914 3342             (        forth.asm):03945 (4+1)           leau    2,u             Drop one cell from the data stack
F916 39               (        forth.asm):03946 (4)             rts
                      (        forth.asm):03947         
                      (        forth.asm):03948         * Signed multiplication by hardware support.
F917 01               (        forth.asm):03949         MULT    fcb     1               ANSI (Core)
F918 2A               (        forth.asm):03950                 fcc     '*'             ( n1|u1 n2|u2 -- n3|u3 [n4|u4] )
F919 F8EC             (        forth.asm):03951                 fdb     SHIFT
                      (        forth.asm):03952                 RFCS
F91B 0F3B             (        forth.asm):03953 (5)             clr     MULFCN          Function 0 is *
F91D BDE9D0           (        forth.asm):03954 (7)     MULT1   jsr     MIN2PST         Two cells need to be stacked up
F920 EC42             (        forth.asm):03955 (5+1)           ldd     2,u             N1 to D
F922 11AFC4           (        forth.asm):03956 (30+0)          muld    ,u              D:W has N1*N2
F925 10A742           (        forth.asm):03957 (6+1)           stw     2,u             LSC to N3
F928 0D3B             (        forth.asm):03958 (4)             tst     MULFCN
F92A 2603             (        forth.asm):03959 (3)             bne     @mstsem
                      (        forth.asm):03960         * Semantics: return only the LSC.
F92C 3342             (        forth.asm):03961 (4+1)           leau    2,u             Drop one cell from the data stack
F92E 39               (        forth.asm):03962 (4)             rts
                      (        forth.asm):03963         * M* semantics, also return the MSC.
F92F EDC4             (        forth.asm):03964 (5+0)   @mstsem std     ,u              MSC to N4
F931 39               (        forth.asm):03965 (4)             rts
                      (        forth.asm):03966         
F932 02               (        forth.asm):03967         MSTAR   fcb     2               ANSI (Core)
F933 4D2A             (        forth.asm):03968                 fcc     'M*'            ( n1 n2 -- d )
F935 F917             (        forth.asm):03969                 fdb     MULT
F937 8601             (        forth.asm):03970 (2)             lda     #1
F939 973B             (        forth.asm):03971 (3)             sta     MULFCN          Function 1 is M*
F93B 20E0             (        forth.asm):03972 (3)             bra     MULT1
                      (        forth.asm):03973         
                      (        forth.asm):03974         * The algorithm implemented here is similar to Donald's Knuth algorithm M,
                      (        forth.asm):03975         * as described in "The Art of Computer Programming", Volume II, 3rd edition,
                      (        forth.asm):03976         * section 4.3.1, pp 268. It is not as generic as algorithm M but fits our
                      (        forth.asm):03977         * particular purpose here: a 16x16 bit unsigned multiplication that yields
                      (        forth.asm):03978         * a 32 bit result. A simpler description of algorithm M can be found in
                      (        forth.asm):03979         * Henry S. Warren Junior's "Hacker's Delight", second edition, section 8-1,
                      (        forth.asm):03980         * pp 171. A C prototype implementation for a little endian host is provided
                      (        forth.asm):03981         * in SW/util/umstar.c.
                      (        forth.asm):03982         * In essence we reduce the problem to a 2 digit by 2 digit (expressed in
                      (        forth.asm):03983         * base 256) multiplication and use the 6809 MUL (A * B -> D) instruction.
F93D 03               (        forth.asm):03984         UMSTAR  fcb     3               ANSI (Core)
F93E 554D2A           (        forth.asm):03985                 fcc     'UM*'           ( u1 u2 -- ud )
F941 F932             (        forth.asm):03986                 fdb     MSTAR
                      (        forth.asm):03987                 RFCS
F943 BDE9D0           (        forth.asm):03988 (7)             jsr     MIN2PST         2 parameters need to be stacked up
                      (        forth.asm):03989         * Register allocation notes:
                      (        forth.asm):03990         * X: pointer to ud1 (ARG_U/p in the C code).
                      (        forth.asm):03991         * Y: pointer to ud2 (ARG_V/q in the C code).
                      (        forth.asm):03992         * E: Inner loop index (i in the C code).
                      (        forth.asm):03993         * F: Outer loop index (j in the C code).
                      (        forth.asm):03994         *
                      (        forth.asm):03995         * We save U to the system stack and use it to point to a scratch area allocated
                      (        forth.asm):03996         * from the system stack that will contain the 4 bytes (double cell) ultimately
                      (        forth.asm):03997         * holding the result (MSB first, what else?).
                      (        forth.asm):03998         *
                      (        forth.asm):03999         * System stack structure:
                      (        forth.asm):04000         * ,S    Result scratch area (Result MSB)
                      (        forth.asm):04001         * 2,S   Result scratch area (Result LSB)
                      (        forth.asm):04002         * 4,S   Saved U register
                      (        forth.asm):04003         * Total: 6 bytes.
F946 327A             (        forth.asm):04004 (4+1)           leas    -6,s            Allocate system stack scratch space
F948 EF64             (        forth.asm):04005 (5+1)           stu     4,s             Save the U register
F94A 104F             (        forth.asm):04006 (2)             clrd
F94C EDE4             (        forth.asm):04007 (5+0)           std     ,s              Initialize the result's MSB
F94E ED62             (        forth.asm):04008 (5+1)           std     2,s             Initialize the result's LSB
F950 3141             (        forth.asm):04009 (4+1)           leay    1,u             Initialize outer loop pointer (q in the C code)
F952 3363             (        forth.asm):04010 (4+1)           leau    3,s             Initialize the result pointer (r in the C code)
F954 11C602           (        forth.asm):04011 (3)             ldf     #2              Outer loop index
F957 AE64             (        forth.asm):04012 (5+1)   @outer  ldx     4,s             Saved U register
F959 3003             (        forth.asm):04013 (4+1)           leax    3,x             Initialize inner loop pointer (p in the C code)
F95B 118602           (        forth.asm):04014 (3)             lde     #2              Inner loop index
F95E A684             (        forth.asm):04015 (4+0)   @inner  lda     ,x              *p to A
F960 E6A4             (        forth.asm):04016 (4+0)           ldb     ,y              *q to B
F962 3D               (        forth.asm):04017 (10)            mul                     *p * *q to D (tmpval in the C code)
F963 E35F             (        forth.asm):04018 (5+1)           addd    -1,u            r[-1] += tmpval
F965 ED5F             (        forth.asm):04019 (5+1)           std     -1,u
F967 2402             (        forth.asm):04020 (3)             bcc     @ncarry
F969 6C5E             (        forth.asm):04021 (6+1)           inc     -2,u            r[-2] += carry (propagate carry from ADDD above)
F96B 335F             (        forth.asm):04022 (4+1)   @ncarry leau    -1,u            r--
F96D 301F             (        forth.asm):04023 (4+1)           leax    -1,x            p--
F96F 114A             (        forth.asm):04024 (2)             dece                    i--
F971 26EB             (        forth.asm):04025 (3)             bne     @inner
F973 3341             (        forth.asm):04026 (4+1)           leau    1,u             r++
F975 313F             (        forth.asm):04027 (4+1)           leay    -1,y            q--
F977 115A             (        forth.asm):04028 (2)             decf                    j--
F979 26DC             (        forth.asm):04029 (3)             bne     @outer
F97B EE64             (        forth.asm):04030 (5+1)           ldu     4,s             Restore the U register
F97D 10ECE4           (        forth.asm):04031 (8+0)           ldq     ,s
F980 10EDC4           (        forth.asm):04032 (8+0)           stq     ,u              Result to the data stack (in place)
F983 3266             (        forth.asm):04033 (4+1)           leas    6,s             Release system stack scratch space
F985 39               (        forth.asm):04034 (4)             rts
                      (        forth.asm):04035         
F986 05               (        forth.asm):04036         CELLS   fcb     5               ANSI (Core)
F987 43454C4C53       (        forth.asm):04037                 fcc     'CELLS'         ( n1 -- n2 )
F98C F93D             (        forth.asm):04038                 fdb     UMSTAR
                      (        forth.asm):04039                 RFCS
F98E 2005             (        forth.asm):04040                 RFXT    bra,TWOTIM+5
                      (        forth.asm):04041         
F990 02               (        forth.asm):04042         TWOTIM  fcb     2               ANSI (Core)
F991 322A             (        forth.asm):04043                 fcc     '2*'            ( x1 -- x2 )
F993 F986             (        forth.asm):04044                 fdb     CELLS
                      (        forth.asm):04045                 RFCS
F995 BDE9CB           (        forth.asm):04046 (7)             jsr     MIN1PST         One cell needs to be stacked up
F998 ECC4             (        forth.asm):04047 (5+0)           ldd     ,u
F99A 1048             (        forth.asm):04048 (2)             asld
F99C EDC4             (        forth.asm):04049 (5+0)           std     ,u
F99E 39               (        forth.asm):04050 (4)             rts
                      (        forth.asm):04051         
F99F 02               (        forth.asm):04052         TWODIV  fcb     2               ANSI (Core)
F9A0 322F             (        forth.asm):04053                 fcc     '2/'            ( x1 -- x2 )
F9A2 F990             (        forth.asm):04054                 fdb     TWOTIM
                      (        forth.asm):04055                 RFCS
F9A4 BDE9CB           (        forth.asm):04056 (7)             jsr     MIN1PST         One cell needs to be stacked up
F9A7 ECC4             (        forth.asm):04057 (5+0)           ldd     ,u
F9A9 1047             (        forth.asm):04058 (2)             asrd
F9AB EDC4             (        forth.asm):04059 (5+0)           std     ,u
F9AD 39               (        forth.asm):04060 (4)             rts
                      (        forth.asm):04061         
F9AE 03               (        forth.asm):04062         MOD     fcb     3               ANSI (Core)
F9AF 4D4F44           (        forth.asm):04063                 fcc     'MOD'           ( N1 N2 -- N3 )
F9B2 F99F             (        forth.asm):04064                 fdb     TWODIV
                      (        forth.asm):04065                 RFCS
F9B4 8601             (        forth.asm):04066 (2)             lda     #DVFMOD
F9B6 9738             (        forth.asm):04067 (3)             sta     DIVFCN          Function 1: return only the modulo
F9B8 2031             (        forth.asm):04068 (3)             bra     DIV1
                      (        forth.asm):04069         
F9BA 04               (        forth.asm):04070         SLMOD   fcb     4               ANSI (Core)
F9BB 2F4D4F44         (        forth.asm):04071                 fcc     '/MOD'          ( N1 N2 -- N3 N4 )
F9BF F9AE             (        forth.asm):04072                 fdb     MOD
                      (        forth.asm):04073                 RFCS
F9C1 0F38             (        forth.asm):04074 (5)             clr     DIVFCN          Function 0: return the quotient and the modulo
F9C3 2026             (        forth.asm):04075 (3)             bra     DIV1
                      (        forth.asm):04076         
F9C5 06               (        forth.asm):04077         FMSLMOD fcb     6               ANSI (Core)
F9C6 464D2F4D4F44     (        forth.asm):04078                 fcc     'FM/MOD'        ( D1 N1 -- N2 N3 )
F9CC F9BA             (        forth.asm):04079                 fdb     SLMOD
                      (        forth.asm):04080                 RFCS
F9CE 8608             (        forth.asm):04081 (2)             lda     #(DVFSLMD|DVOA1D) Function 0, arg #1 is double
F9D0 9738             (        forth.asm):04082 (3)             sta     DIVFCN
F9D2 2017             (        forth.asm):04083 (3)             bra     DIV1
                      (        forth.asm):04084         
F9D4 06               (        forth.asm):04085         SMSLREM fcb     6               ANSI (Core)
F9D5 534D2F52454D     (        forth.asm):04086                 fcc     'SM/REM'        ( D1 N1 -- N2 N3 )
F9DB F9C5             (        forth.asm):04087                 fdb     FMSLMOD
                      (        forth.asm):04088                 RFCS
                      (        forth.asm):04089         * Function 0, arg #1 is double, want symmetric division.
F9DD 8618             (        forth.asm):04090 (2)             lda     #(DVFSLMD|DVOA1D|DVOWSYM)
F9DF 9738             (        forth.asm):04091 (3)             sta     DIVFCN
F9E1 2008             (        forth.asm):04092 (3)             bra     DIV1
                      (        forth.asm):04093         
                      (        forth.asm):04094         * /, MOD and /MOD are essentially the same function returning
                      (        forth.asm):04095         * the different parts returned by DIVQ.
                      (        forth.asm):04096         * We use a global variable to distinguish which functionality
                      (        forth.asm):04097         * is being requested:
                      (        forth.asm):04098         * 0: return the modulo and the quotient (/MOD).
                      (        forth.asm):04099         * 1: return the modulo only (MOD).
                      (        forth.asm):04100         * 2: return the quotient only (/).
F9E3 01               (        forth.asm):04101         DIV     fcb     1               ANSI (Core)
F9E4 2F               (        forth.asm):04102                 fcc     '/'             ( n1|d1 n2 -- n3 [n4] )
F9E5 F9D4             (        forth.asm):04103                 fdb     SMSLREM
                      (        forth.asm):04104                 RFCS
F9E7 8602             (        forth.asm):04105 (2)             lda     #DVFDIV
F9E9 9738             (        forth.asm):04106 (3)             sta     DIVFCN          Function 2: return only the quotient
F9EB 0F3C             (        forth.asm):04107 (5)     DIV1    clr     F83DIVF         Assume no adjustment required for floored div.
                      (        forth.asm):04108         
                      (        forth.asm):04109         * Split function code options into individual flags, extract base function code.
F9ED 0F39             (        forth.asm):04110 (5)             clr     DIVDBL
F9EF 0F3A             (        forth.asm):04111 (5)             clr     DIVSYM
F9F1 8601             (        forth.asm):04112 (2)             lda     #1
F9F3 D638             (        forth.asm):04113 (3)             ldb     DIVFCN
F9F5 C508             (        forth.asm):04114 (2)             bitb    #DVOA1D
F9F7 2702             (        forth.asm):04115 (3)             beq     *+4
F9F9 9739             (        forth.asm):04116 (3)             sta     DIVDBL
F9FB C510             (        forth.asm):04117 (2)             bitb    #DVOWSYM
F9FD 2702             (        forth.asm):04118 (3)             beq     *+4
F9FF 973A             (        forth.asm):04119 (3)             sta     DIVSYM
FA01 C407             (        forth.asm):04120 (2)             andb    #DVFMASK
FA03 D738             (        forth.asm):04121 (3)             stb     DIVFCN
                      (        forth.asm):04122         
FA05 0D39             (        forth.asm):04123 (4)             tst     DIVDBL          Numerator is double cell?
FA07 2605             (        forth.asm):04124 (3)             bne     *+7             Yes
FA09 BDE9D0           (        forth.asm):04125 (7)             jsr     MIN2PST         Assert single cell division reqs are met
FA0C 2003             (        forth.asm):04126 (3)             bra     *+5             Stacked parameters reqs verified OK
FA0E BDE9D5           (        forth.asm):04127 (7)             jsr     MIN3PST         Assert double cell division reqs are met
                      (        forth.asm):04128         
FA11 0D3A             (        forth.asm):04129 (4)             tst     DIVSYM
FA13 2608             (        forth.asm):04130 (3)             bne     @dvsym          Symmetric division is wanted
FA15 A642             (        forth.asm):04131 (4+1)           lda     2,u             Numerator's MSB
FA17 A8C4             (        forth.asm):04132 (4+0)           eora    ,u              Different sign from the denominator's MSB?
FA19 2A02             (        forth.asm):04133 (3)             bpl     @dvsym          No, proceed to the division code
FA1B 0C3C             (        forth.asm):04134 (5)             inc     F83DIVF         Numerator and denominator have different signs
FA1D 0D39             (        forth.asm):04135 (4)     @dvsym  tst     DIVDBL
FA1F 2705             (        forth.asm):04136 (3)             beq     @dvsgn
FA21 10EC42           (        forth.asm):04137 (8+1)           ldq     2,u             Double cell numerator to D:W
FA24 2009             (        forth.asm):04138 (3)             bra     @dvactu
                      (        forth.asm):04139         * Division by zero conditions are dealt with through the trap handler.
FA26 104F             (        forth.asm):04140 (2)     @dvsgn  clrd                    Clear the numerator's MSC
FA28 10A642           (        forth.asm):04141 (6+1)           ldw     2,u             Numerator's LSC
FA2B 2A02             (        forth.asm):04142 (3)             bpl     @dvactu         Branch if no sign extension is needed
                      (        forth.asm):04143         * Sign extension from W to Q.
FA2D 1043             (        forth.asm):04144 (2)             comd                    -1 to D (numerator's MSC)
FA2F 11AEC4           (        forth.asm):04145 (36)    @dvactu divq    ,u              ,u has the denominator
FA32 8D1F             (        forth.asm):04146 (6)             bsr     FDIVADJ         Perform floored division adjustment, if needed
                      (        forth.asm):04147         
FA34 0D39             (        forth.asm):04148 (4)             tst     DIVDBL
FA36 2702             (        forth.asm):04149 (3)             beq     *+4
FA38 3342             (        forth.asm):04150 (4+1)           leau    2,u             Drop one cell from the data stack
                      (        forth.asm):04151         
FA3A 0D38             (        forth.asm):04152 (4)             tst     DIVFCN
FA3C 2606             (        forth.asm):04153 (3)             bne     @div4
FA3E ED42             (        forth.asm):04154 (5+1)           std     2,u             Function 0: return the modulo and the quotient
FA40 10A7C4           (        forth.asm):04155 (6+0)   @div3   stw     ,u              Function 2: return only the quotient
FA43 39               (        forth.asm):04156 (4)             rts
FA44 3342             (        forth.asm):04157 (4+1)   @div4   leau    2,u             Drop one cell from the data stack
FA46 1F07             (        forth.asm):04158 (4)             tfr     d,v             Backup the modulo
FA48 9638             (        forth.asm):04159 (3)             lda     DIVFCN
FA4A 8101             (        forth.asm):04160 (2)             cmpa    #1
FA4C 26F2             (        forth.asm):04161 (3)             bne     @div3
FA4E 1F70             (        forth.asm):04162 (4)             tfr     v,d             Restore the modulo
FA50 EDC4             (        forth.asm):04163 (5+0)           std     ,u              Function 1: return only the modulo
FA52 39               (        forth.asm):04164 (4)             rts
                      (        forth.asm):04165         
                      (        forth.asm):04166         * Quotient is returned in W, modulo in D but this is symmetric division :-(
                      (        forth.asm):04167         * Need to return a floored division result for compat. with F83 and ANSI impls.
FA53 104D             (        forth.asm):04168 (2)     FDIVADJ tstd                    Is the remainder zero?
FA55 2708             (        forth.asm):04169 (3)             beq     @no83ad         Yes. No adjusment required for floored division
FA57 0D3C             (        forth.asm):04170 (4)             tst     F83DIVF         Different signs for numerator and denominator?
FA59 2704             (        forth.asm):04171 (3)             beq     @no83ad         No. Adjusment not needed for floored division
                      (        forth.asm):04172         * Adjusment for F83 floored division.
FA5B 105A             (        forth.asm):04173 (2)             decw                    Decrement the quotient
FA5D E3C4             (        forth.asm):04174 (5+0)           addd    ,u              Add the denominator to the modulo
FA5F 39               (        forth.asm):04175 (4)     @no83ad rts
                      (        forth.asm):04176         
FA60 02               (        forth.asm):04177         STRSLSH fcb     2               ANSI (Core)
FA61 2A2F             (        forth.asm):04178                 fcc     '*/'            ( N1 N2 N3 -- N4 [N5] )
FA63 F9E3             (        forth.asm):04179                 fdb     DIV
                      (        forth.asm):04180                 RFCS
FA65 8601             (        forth.asm):04181 (2)             lda     #1
FA67 973D             (        forth.asm):04182 (3)             sta     STSLFCN
FA69 BDE9D5           (        forth.asm):04183 (7)     STRSL1  jsr     MIN3PST         Three cells need to be stacked up
FA6C 0F3C             (        forth.asm):04184 (5)             clr     F83DIVF         Assume no adjustment required for floored div.
                      (        forth.asm):04185         * Division by zero conditions are dealt with through the trap handler.
FA6E EC44             (        forth.asm):04186 (5+1)           ldd     4,u             N1
FA70 11AF42           (        forth.asm):04187 (30+1)          muld    2,u             N2 (N1 * N2 -> D:W)
FA73 3402             (        forth.asm):04188 (4+1)           pshs    a               Product's MSC's MSB
FA75 A8C4             (        forth.asm):04189 (4+0)           eora    ,u              Different sign from the denominator's?
FA77 2A02             (        forth.asm):04190 (3)             bpl     @stslpr         No. Floored division adjustment not needed
FA79 0C3C             (        forth.asm):04191 (5)             inc     F83DIVF
FA7B 3502             (        forth.asm):04192 (4+1)   @stslpr puls    a
FA7D 11AEC4           (        forth.asm):04193 (36)            divq    ,u              N3
FA80 8DD1             (        forth.asm):04194 (6)             bsr     FDIVADJ         Perform floored division adjustment, if needed
FA82 3342             (        forth.asm):04195 (4+1)           leau    2,u
FA84 0D3D             (        forth.asm):04196 (4)             tst     STSLFCN
FA86 2606             (        forth.asm):04197 (3)             bne     @strsl2         Just the quotient, Ma'am!
FA88 ED42             (        forth.asm):04198 (5+1)           std     2,u             N4: the modulo
FA8A 10A7C4           (        forth.asm):04199 (6+0)           stw     ,u              N5: the quotient
FA8D 39               (        forth.asm):04200 (4)             rts
FA8E 3342             (        forth.asm):04201 (4+1)   @strsl2 leau    2,u
FA90 10A7C4           (        forth.asm):04202 (6+0)           stw     ,u              N4
FA93 39               (        forth.asm):04203 (4)             rts
                      (        forth.asm):04204         
FA94 05               (        forth.asm):04205         STRSLMD fcb     5               ANSI (Core)
FA95 2A2F4D4F44       (        forth.asm):04206                 fcc     '*/MOD'         ( N1 N2 N3 -- N4 N5 )
FA9A FA60             (        forth.asm):04207                 fdb     STRSLSH
                      (        forth.asm):04208                 RFCS
FA9C 0F3D             (        forth.asm):04209 (5)             clr     STSLFCN
FA9E 20C9             (        forth.asm):04210 (3)             bra     STRSL1
                      (        forth.asm):04211         
FAA0 06               (        forth.asm):04212         UMSLMOD fcb     6               ANSI (Core)
FAA1 554D2F4D4F44     (        forth.asm):04213                 fcc     'UM/MOD'        ( ud u1 -- u2 u3 )
FAA7 FA94             (        forth.asm):04214                 fdb     STRSLMD
                      (        forth.asm):04215                 RFCS
FAA9 BDE9D5           (        forth.asm):04216 (7)             jsr     MIN3PST
FAAC ECC4             (        forth.asm):04217 (5+0)           ldd     ,u              Is U1 zero?
FAAE 2605             (        forth.asm):04218 (3)             bne     @cont           No
FAB0 C604             (        forth.asm):04219 (2)     @oor    ldb     #4              Division by zero/Out of range
FAB2 BDE74C           (        forth.asm):04220 (7)             jsr     ERRHDLR         No return
FAB5 BDE7E9           (        forth.asm):04221 (7)     @cont   jsr     NPOP
FAB8 1F10             (        forth.asm):04222 (4)             tfr     x,d             U1 (denominator) to D
FABA BDE7E9           (        forth.asm):04223 (7)             jsr     NPOP
FABD 1F12             (        forth.asm):04224 (4)             tfr     x,y             Numerator MSC TO Y
FABF BDE7E9           (        forth.asm):04225 (7)             jsr     NPOP            Numerator LSC to X
FAC2 32E8EF           (        forth.asm):04226 (4+1)           leas    -17,s
FAC5 ED6E             (        forth.asm):04227 (5+1)           std     14,s            Denominator
FAC7 AF6C             (        forth.asm):04228 (5+1)           stx     12,s            Numerator least significant cell
FAC9 10AF6A           (        forth.asm):04229 (6+1)           sty     10,s            Numerator most significant cell
FACC BDF629           (        forth.asm):04230 (7)             jsr     DBDIVSG
FACF EC66             (        forth.asm):04231 (5+1)           ldd     6,s             Quotient high
FAD1 26DD             (        forth.asm):04232 (3)             bne     @oor            Out of range
FAD3 AEE4             (        forth.asm):04233 (5+0)           ldx     ,s              Remainder (U2)
FAD5 3610             (        forth.asm):04234                 UCNPUSH
FAD7 AE68             (        forth.asm):04235 (5+1)           ldx     8,s             Quotient low (U3)
FAD9 3610             (        forth.asm):04236                 UCNPUSH
FADB 32E811           (        forth.asm):04237 (4+1)           leas    17,s
FADE 39               (        forth.asm):04238 (4)             rts
                      (        forth.asm):04239         
                      (        forth.asm):04240         * Returns the current value of the Sreg register (informational only).
                      (        forth.asm):04241         * This word is either called (JSROPC) or jumped to (JMPOPC), as a result
                      (        forth.asm):04242         * of the tail call optimization process. There is no way to tell the
                      (        forth.asm):04243         * difference. Here we assume that it is called and return Sreg.
FADF 01               (        forth.asm):04244         SYSSTK  fcb     1               Non-standard
FAE0 53               (        forth.asm):04245                 fcc     'S'
FAE1 FAA0             (        forth.asm):04246                 fdb     UMSLMOD
                      (        forth.asm):04247                 RFCS
FAE3 1F41             (        forth.asm):04248 (4)             tfr     s,x
FAE5 7EE7DB           (        forth.asm):04249 (3)             jmp     NPUSH
                      (        forth.asm):04250         
FAE8 02               (        forth.asm):04251         SYSSTAT fcb     2               Non-standard
FAE9 5340             (        forth.asm):04252                 fcc     'S@'
FAEB FADF             (        forth.asm):04253                 fdb     SYSSTK
                      (        forth.asm):04254                 RFCS
FAED AEE4             (        forth.asm):04255 (5+0)           ldx     ,s
FAEF 7EE7DB           (        forth.asm):04256 (3)             jmp     NPUSH
                      (        forth.asm):04257         
FAF2 07               (        forth.asm):04258         PAYLOAD fcb     7               Non standard
FAF3 5041594C4F4144   (        forth.asm):04259                 fcc     'PAYLOAD'       ( -- len ) where len is the code payload
FAFA FAE8             (        forth.asm):04260                 fdb     SYSSTAT         of the word located by FIND (or NULL)
                      (        forth.asm):04261                 RFCS
FAFC 9E10             (        forth.asm):04262 (4)             ldx     FNDPLD          Code payload reported by FIND
FAFE 7EE7DB           (        forth.asm):04263 (3)             jmp     NPUSH
                      (        forth.asm):04264         
                      (        forth.asm):04265         * Differences from the original code (WORDS):
                      (        forth.asm):04266         * - display number in HEX rather than in the current base.
                      (        forth.asm):04267         * - dropped feat: the original stuff was interactively paged by 15 line screens.
                      (        forth.asm):04268         * - added feat: display code implementation payload.
                      (        forth.asm):04269         * - added feat: display the immedediate and define (compile time only) flags.
                      (        forth.asm):04270         * - added feat: display the forgettable status (R/W). Everything user
                      (        forth.asm):04271         *   defined is forgettable (i.e. RAM resident).
FB01 05               (        forth.asm):04272         WORDS   fcb     5               ANSI (Programming tools)
FB02 574F524453       (        forth.asm):04273                 fcc     'WORDS'         ( -- )
FB07 FAF2             (        forth.asm):04274                 fdb     PAYLOAD
                      (        forth.asm):04275                 RFCS
FB09 9E08             (        forth.asm):04276 (4)             ldx     DICEND
FB0B 9F1A             (        forth.asm):04277 (4)             stx     VLPRVEP         Last word code address + 1
FB0D 9E06             (        forth.asm):04278 (4)             ldx     LSTWAD
FB0F 9F1C             (        forth.asm):04279 (4)     @vlist1 stx     VLPRVHD         Last word header pointer
FB11 108E050C         (        forth.asm):04280 (4)             ldy     #TBUFF
FB15 E680             (        forth.asm):04281 (4+1)           ldb     ,x+
FB17 3404             (        forth.asm):04282 (4+1)           pshs    b
FB19 C41F             (        forth.asm):04283 (2)             andb    #WRLNMSK        Mask out word length
FB1B 4F               (        forth.asm):04284 (1)             clra
FB1C 3404             (        forth.asm):04285 (4+1)           pshs    b               Preserve word length
FB1E 1F06             (        forth.asm):04286 (4)             tfr     d,w
FB20 113812           (        forth.asm):04287 (6+?)           tfm     x+,y+
FB23 3502             (        forth.asm):04288 (4+1)           puls    a               Restore word length to A
FB25 C620             (        forth.asm):04289 (2)             ldb     #WRLNMSK+1
FB27 103289           (        forth.asm):04290 (4)             subr    a,b             Number of spaces we want to emit
FB2A 8620             (        forth.asm):04291 (2)             lda     #SP
FB2C A7A0             (        forth.asm):04292 (4+1)   @vlist2 sta     ,y+
FB2E 5A               (        forth.asm):04293 (1)             decb
FB2F 26FB             (        forth.asm):04294 (3)             bne     @vlist2
FB31 6FA0             (        forth.asm):04295 (6+1)           clr     ,y+             Terminate formatted output string
FB33 3410             (        forth.asm):04296 (4+2)           pshs    x               Address of the current word backlink address
FB35 BDE2F7           (        forth.asm):04297 (7)             jsr     PUTCR           Carriage return is output before anything else
FB38 8E050C           (        forth.asm):04298 (3)             ldx     #TBUFF
FB3B BDE2EA           (        forth.asm):04299 (7)             jsr     PUTS            Output word name formatted on 17 chars + SP
FB3E AEE4             (        forth.asm):04300 (5+0)           ldx     ,s
                      (        forth.asm):04301                 IFNE    RELFEAT
                      (        forth.asm):04302                 leax    3,x             Word XT to X (Skip backlink and checksum)
                      (        forth.asm):04303                 ELSE
FB40 3002             (        forth.asm):04304 (4+1)           leax    2,x             Word XT to X (Skip backlink)
                      (        forth.asm):04305                 ENDC                    RELFEAT
FB42 1F10             (        forth.asm):04306 (4)             tfr     x,d             CVNSTR depends on UBASE and we want HEX output
FB44 108E050C         (        forth.asm):04307 (4)             ldy     #TBUFF
FB48 BDE192           (        forth.asm):04308 (7)             jsr     HDMP4           So we use trusted debugging code
FB4B 8E050C           (        forth.asm):04309 (3)             ldx     #TBUFF
FB4E BDE2EA           (        forth.asm):04310 (7)             jsr     PUTS
                      (        forth.asm):04311         * Now to display word implementation length.
                      (        forth.asm):04312         * Implementation code length is from ,s+3 (or 2) to VLPRVEP
FB51 8609             (        forth.asm):04313 (2)             lda     #HT
FB53 BDE2D7           (        forth.asm):04314 (7)             jsr     PUTCH
FB56 9E1A             (        forth.asm):04315 (4)             ldx     VLPRVEP
FB58 10AEE4           (        forth.asm):04316 (6+0)           ldy     ,s
                      (        forth.asm):04317                 IFNE    RELFEAT
                      (        forth.asm):04318                 leay    3,y             Current word code entry address
                      (        forth.asm):04319                 ELSE
FB5B 3122             (        forth.asm):04320 (4+1)           leay    2,y             Current word code entry address
                      (        forth.asm):04321                 ENDC                    RELFEAT
FB5D 103221           (        forth.asm):04322 (4)             subr    y,x
FB60 1F10             (        forth.asm):04323 (4)             tfr     x,d
FB62 108E050C         (        forth.asm):04324 (4)             ldy     #TBUFF
FB66 BDE192           (        forth.asm):04325 (7)             jsr     HDMP4
FB69 8E050C           (        forth.asm):04326 (3)             ldx     #TBUFF
FB6C BDE2EA           (        forth.asm):04327 (7)             jsr     PUTS
                      (        forth.asm):04328         # Display attribute flags.
FB6F 8609             (        forth.asm):04329 (2)             lda     #HT
FB71 BDE2D7           (        forth.asm):04330 (7)             jsr     PUTCH
FB74 8E050C           (        forth.asm):04331 (3)             ldx     #TBUFF
FB77 E662             (        forth.asm):04332 (4+1)           ldb     2,s             Word attribute to B
FB79 862D             (        forth.asm):04333 (2)             lda     #'-
FB7B C580             (        forth.asm):04334 (2)             bitb    #IMDFLM         Check for immediate
FB7D 2702             (        forth.asm):04335 (3)             beq     @vlist4
FB7F 8649             (        forth.asm):04336 (2)             lda     #'I
FB81 A780             (        forth.asm):04337 (4+1)   @vlist4 sta     ,x+
FB83 862D             (        forth.asm):04338 (2)             lda     #'-
FB85 C540             (        forth.asm):04339 (2)             bitb    #DEFFLM         Check for define (compile time only)
FB87 2702             (        forth.asm):04340 (3)             beq     @vlist5
FB89 8643             (        forth.asm):04341 (2)             lda     #'C
FB8B A780             (        forth.asm):04342 (4+1)   @vlist5 sta     ,x+
                      (        forth.asm):04343                 IFNE    RELFEAT
                      (        forth.asm):04344                 lda     #'-
                      (        forth.asm):04345                 bitb    #MONFLM         Check for monitored status
                      (        forth.asm):04346                 beq     @vlst51
                      (        forth.asm):04347                 lda     #'M
FB8D                  (        forth.asm):04348         @vlst51 sta     ,x+
                      (        forth.asm):04349                 ENDC                    RELFEAT
                      (        forth.asm):04350         * Check for forgettable also. In ROM => R else W unless we just processed '@'.
FB8D 8652             (        forth.asm):04351 (2)             lda     #'R
FB8F 10AEE4           (        forth.asm):04352 (6+0)           ldy     ,s
                      (        forth.asm):04353                 IFNE    RELFEAT
                      (        forth.asm):04354                 leay    3,y             Word entry point to Y
                      (        forth.asm):04355                 ELSE
FB92 3122             (        forth.asm):04356 (4+1)           leay    2,y             Word entry point to Y
                      (        forth.asm):04357                 ENDC                    RELFEAT
FB94 108C0D84         (        forth.asm):04358 (4)             cmpy    #RAMFTCH        @ in RAM is unforgettable
FB98 2708             (        forth.asm):04359 (3)             beq     @vlist6
FB9A 108CE000         (        forth.asm):04360 (4)             cmpy    #ROMSTRT        as are all ROM resident words
FB9E 2402             (        forth.asm):04361 (3)             bcc     @vlist6
FBA0 8657             (        forth.asm):04362 (2)             lda     #'W
FBA2 A780             (        forth.asm):04363 (4+1)   @vlist6 sta     ,x+
FBA4 6F84             (        forth.asm):04364 (6+0)           clr     ,x
FBA6 8E050C           (        forth.asm):04365 (3)             ldx     #TBUFF
FBA9 BDE2EA           (        forth.asm):04366 (7)             jsr     PUTS
                      (        forth.asm):04367         * The point at which VLPRVHD==WDICSPC is a singularity (RAM to ROM transition).
FBAC 9E1C             (        forth.asm):04368 (4)             ldx     VLPRVHD
FBAE 8C0D80           (        forth.asm):04369 (3)             cmpx    #WDICSPC
FBB1 2608             (        forth.asm):04370 (3)             bne     @vlist7
FBB3 8EFE0F           (        forth.asm):04371 (3)             ldx     #QMARK          Word just before @ (ROM flavor)
FBB6 9F1C             (        forth.asm):04372 (4)             stx     VLPRVHD
FBB8 8EFE19           (        forth.asm):04373 (3)             ldx     #THEEND
FBBB 9F1A             (        forth.asm):04374 (4)     @vlist7 stx     VLPRVEP
FBBD 3510             (        forth.asm):04375 (4+2)           puls    x
FBBF 3504             (        forth.asm):04376 (4+1)           puls    b
FBC1 AE84             (        forth.asm):04377 (5+0)           ldx     ,x              Point to previous word
FBC3 1026FF48         (        forth.asm):04378 (5)             lbne    @vlist1
FBC7 39               (        forth.asm):04379 (4)             rts
                      (        forth.asm):04380         
FBC8 05               (        forth.asm):04381         STATE   fcb     5               ANSI (Core/Programming tools ext)
FBC9 5354415445       (        forth.asm):04382                 fcc     'STATE'         ( -- a-addr )
FBCE FB01             (        forth.asm):04383                 fdb     WORDS
                      (        forth.asm):04384                 RFCS
FBD0 8E0124           (        forth.asm):04385 (3)             ldx     #USTATE
FBD3 7EE7DB           (        forth.asm):04386 (3)             jmp     NPUSH
                      (        forth.asm):04387         
FBD6 04               (        forth.asm):04388         BASE    fcb     4               ANSI (Core)
FBD7 42415345         (        forth.asm):04389                 fcc     'BASE'          ( -- a-addr )
FBDB FBC8             (        forth.asm):04390                 fdb     STATE
                      (        forth.asm):04391                 RFCS
FBDD 8E0122           (        forth.asm):04392 (3)             ldx     #UBASE
FBE0 7EE7DB           (        forth.asm):04393 (3)             jmp     NPUSH
                      (        forth.asm):04394         
FBE3 07               (        forth.asm):04395         DECIMAL fcb     7               ANSI (Core)
FBE4 444543494D414C   (        forth.asm):04396                 fcc     'DECIMAL'       ( -- )
FBEB FBD6             (        forth.asm):04397                 fdb     BASE
                      (        forth.asm):04398                 RFCS
FBED CC000A           (        forth.asm):04399 (3)             ldd     #10
FBF0 DD22             (        forth.asm):04400 (4)     BASESET std     UBASE
FBF2 39               (        forth.asm):04401 (4)             rts
                      (        forth.asm):04402         
FBF3 03               (        forth.asm):04403         HEX     fcb     3               ANSI (Core)
FBF4 484558           (        forth.asm):04404                 fcc     'HEX'           ( -- )
FBF7 FBE3             (        forth.asm):04405                 fdb     DECIMAL
                      (        forth.asm):04406                 RFCS
FBF9 CC0010           (        forth.asm):04407 (3)             ldd     #16
FBFC 20F2             (        forth.asm):04408 (3)             bra     BASESET
                      (        forth.asm):04409         
FBFE 02               (        forth.asm):04410         DOTTICK fcb     2               Non-standard (SwiftForth)
FBFF 2E27             (        forth.asm):04411                 fcb     $2E,$27         .' ( memaddr -- )
FC01 FBF3             (        forth.asm):04412                 fdb     HEX
                      (        forth.asm):04413                 RFCS
                      (        forth.asm):04414                 IFNE    SSDFEAT
FC03 BDE7E9           (        forth.asm):04415 (7)             jsr     NPOP
FC06 1F12             (        forth.asm):04416 (4)             tfr     x,y
FC08 8E04BC           (        forth.asm):04417 (3)             ldx     #HEXBUF
FC0B BDE616           (        forth.asm):04418 (7)             jsr     FINDSYM
                      (        forth.asm):04419                 ELSE
                      (        forth.asm):04420                 lda     #'$
                      (        forth.asm):04421                 jsr     PUTCH
                      (        forth.asm):04422                 jsr     NPOP
                      (        forth.asm):04423                 tfr     x,d
                      (        forth.asm):04424                 ldy     #HEXBUF
                      (        forth.asm):04425                 jsr     HDMP4
                      (        forth.asm):04426                 ENDC                    SSDFEAT
FC0E 8E04BC           (        forth.asm):04427 (3)             ldx     #HEXBUF
FC11 7EE2EA           (        forth.asm):04428 (3)             jmp     PUTS
                      (        forth.asm):04429         
                      (        forth.asm):04430         * Display a dump of the data stack in the current BASE. In Leo Brodie's
                      (        forth.asm):04431         * "Starting Forth" the data stack is printed from the bottom up. So it is here.
FC14 02               (        forth.asm):04432         DDUMP   fcb     2               ANSI (Programming tools)
FC15 2E53             (        forth.asm):04433                 fcc     '.S'            ( -- )
FC17 FBFE             (        forth.asm):04434                 fdb     DOTTICK
                      (        forth.asm):04435                 RFCS
FC19 CC033A           (        forth.asm):04436 (3)             ldd     #NSTBOT
FC1C 103230           (        forth.asm):04437 (4)             subr    u,d
FC1F 1044             (        forth.asm):04438 (2)             lsrd                    DEPTH is in D
FC21 272A             (        forth.asm):04439 (3)             beq     @ndump3         Data stack is empty
FC23 3440             (        forth.asm):04440 (4+2)           pshs    u
FC25 CE033A           (        forth.asm):04441 (3)             ldu     #NSTBOT         Pointing to the bottom of the data stack
FC28 8601             (        forth.asm):04442 (2)             lda     #1
FC2A 9741             (        forth.asm):04443 (3)             sta     CVISSGN         Force a signed number conversion
FC2C 3404             (        forth.asm):04444 (4+1)   @ndump1 pshs    b
FC2E AEC3             (        forth.asm):04445 (5+2)           ldx     ,--u
FC30 BDE456           (        forth.asm):04446 (7)             jsr     CVNSTR
FC33 8E050C           (        forth.asm):04447 (3)             ldx     #TBUFF
                      (        forth.asm):04448         # Skip leading spaces.
FC36 A680             (        forth.asm):04449 (4+1)   @ndump2 lda     ,x+
FC38 8120             (        forth.asm):04450 (2)             cmpa    #SP
FC3A 27FA             (        forth.asm):04451 (3)             beq     @ndump2
FC3C 301F             (        forth.asm):04452 (4+1)           leax    -1,x
FC3E BDE2EA           (        forth.asm):04453 (7)             jsr     PUTS
FC41 8620             (        forth.asm):04454 (2)             lda     #SP
FC43 BDE2D7           (        forth.asm):04455 (7)             jsr     PUTCH
FC46 3504             (        forth.asm):04456 (4+1)           puls    b
FC48 5A               (        forth.asm):04457 (1)             decb
FC49 26E1             (        forth.asm):04458 (3)             bne     @ndump1
FC4B 3540             (        forth.asm):04459 (4+2)           puls    u
FC4D 39               (        forth.asm):04460 (4)     @ndump3 rts
                      (        forth.asm):04461         
FC4E 04               (        forth.asm):04462         QRYDUP  fcb     4               ANSI (Core)
FC4F 3F445550         (        forth.asm):04463                 fcc     '?DUP'          ( x -- 0 | x x )
FC53 FC14             (        forth.asm):04464                 fdb     DDUMP
                      (        forth.asm):04465                 RFCS
FC55 BDE7E9           (        forth.asm):04466 (7)             jsr     NPOP            ZFLAG is set by NPOP
FC58 3610             (        forth.asm):04467                 UCNPUSH                 Push back the original parameter
FC5A 1026EB7D         (        forth.asm):04468 (5)             lbne    NPUSH           And DUP if NZ
FC5E 39               (        forth.asm):04469 (4)             rts
                      (        forth.asm):04470         
FC5F 04               (        forth.asm):04471         TUCK    fcb     4               ANSI (Core ext)
FC60 5455434B         (        forth.asm):04472                 fcc     'TUCK'          ( x1 x2 -- x2 x1 x2 ) i.e. SWAP OVER
FC64 FC4E             (        forth.asm):04473                 fdb     QRYDUP
                      (        forth.asm):04474                 RFCS
FC66 8D2B             (        forth.asm):04475                 RFXT    bsr,SWAP+7      XT for SWAP
FC68 2065             (        forth.asm):04476                 RFXT    bra,OVER+7      XT for OVER
                      (        forth.asm):04477         
FC6A 03               (        forth.asm):04478         NIP     fcb     3               ANSI (Core ext)
FC6B 4E4950           (        forth.asm):04479                 fcc     'NIP'           ( x1 x2 -- x2 ) i.e. SWAP DROP
FC6E FC5F             (        forth.asm):04480                 fdb     TUCK
                      (        forth.asm):04481                 RFCS
FC70 8D21             (        forth.asm):04482                 RFXT    bsr,SWAP+7      XT for SWAP
FC72 2015             (        forth.asm):04483                 RFXT    bra,DROP+7      XT for DROP
                      (        forth.asm):04484         
FC74 03               (        forth.asm):04485         DUP     fcb     3               ANSI (Core)
FC75 445550           (        forth.asm):04486                 fcc     'DUP'           ( x -- x x )
FC78 FC6A             (        forth.asm):04487                 fdb     NIP
                      (        forth.asm):04488                 RFCS
FC7A BDE9CB           (        forth.asm):04489 (7)             jsr     MIN1PST         At least one cell needs to be stacked up
FC7D AEC4             (        forth.asm):04490 (5+0)           ldx     ,u
FC7F 7EE7DB           (        forth.asm):04491 (3)             jmp     NPUSH
                      (        forth.asm):04492         
FC82 04               (        forth.asm):04493         DROP    fcb     4               ANSI (Core)
FC83 44524F50         (        forth.asm):04494                 fcc     'DROP'          ( x -- )
FC87 FC74             (        forth.asm):04495                 fdb     DUP
                      (        forth.asm):04496                 RFCS
FC89 7EE7E9           (        forth.asm):04497 (3)             jmp     NPOP
                      (        forth.asm):04498         
FC8C 04               (        forth.asm):04499         SWAP    fcb     4               ANSI (Core)
FC8D 53574150         (        forth.asm):04500                 fcc     'SWAP'          ( x1 x2 -- x2 x1 )
FC91 FC82             (        forth.asm):04501                 fdb     DROP
                      (        forth.asm):04502                 RFCS
FC93 BDE9D0           (        forth.asm):04503 (7)             jsr     MIN2PST         We need at least two cells stacked up
FC96 10ECC4           (        forth.asm):04504 (8+0)           ldq     ,u              In place SWAP
FC99 1E06             (        forth.asm):04505 (5)             exg     d,w
FC9B 10EDC4           (        forth.asm):04506 (8+0)           stq     ,u
FC9E 39               (        forth.asm):04507 (4)             rts
                      (        forth.asm):04508         
FC9F 04               (        forth.asm):04509         PICK    fcb     4               ANSI (Core ext)
FCA0 5049434B         (        forth.asm):04510                 fcc     'PICK'          ( xu ... x1 x0 u -- xu ... x1 x0 xu )
FCA4 FC8C             (        forth.asm):04511                 fdb     SWAP
                      (        forth.asm):04512                 RFCS
FCA6 BDE7E9           (        forth.asm):04513 (7)             jsr     NPOP            Arg <u> to X (expressed in cells)
FCA9 CC033A           (        forth.asm):04514 (3)     PICK1   ldd     #NSTBOT
FCAC 103230           (        forth.asm):04515 (4)             subr    u,d
FCAF 1044             (        forth.asm):04516 (2)             lsrd                    D has the data stack depth in cells
FCB1 103701           (        forth.asm):04517 (4)             cmpr    d,x             We need to make sure (unsigned) X < D
FCB4 240D             (        forth.asm):04518 (3)             bhs     @pick1
FCB6 1F10             (        forth.asm):04519 (4)             tfr     x,d
FCB8 1048             (        forth.asm):04520 (2)             lsld                    Arg <u> cells byte count to D
FCBA 30CB             (        forth.asm):04521 (4+2)           leax    d,u
FCBC 1F12             (        forth.asm):04522 (4)             tfr     x,y             For the sake of ROLL's implementation
FCBE AE84             (        forth.asm):04523 (5+0)           ldx     ,x
FCC0 3610             (        forth.asm):04524                 UCNPUSH
FCC2 39               (        forth.asm):04525 (4)             rts
FCC3 C60D             (        forth.asm):04526 (2)     @pick1  ldb     #13             Argument is greater than or equal to DEPTH
FCC5 BDE74C           (        forth.asm):04527 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):04528         
FCC8 04               (        forth.asm):04529         OVER    fcb     4               ANSI (Core)
FCC9 4F564552         (        forth.asm):04530                 fcc     'OVER'          ( x1 x2 -- x1 x2 x1 )
FCCD FC9F             (        forth.asm):04531                 fdb     PICK
                      (        forth.asm):04532                 RFCS
FCCF 8E0001           (        forth.asm):04533 (3)             ldx     #1
FCD2 20D5             (        forth.asm):04534 (3)             bra     PICK1
                      (        forth.asm):04535         
FCD4 04               (        forth.asm):04536         ROLL    fcb     4               ANSI (Core ext)
FCD5 524F4C4C         (        forth.asm):04537                 fcc     'ROLL'          ( xu xu-1 ... x0 u -- xu-1 ... x0 xu )
FCD9 FCC8             (        forth.asm):04538                 fdb     OVER
                      (        forth.asm):04539                 RFCS
FCDB BDE7E9           (        forth.asm):04540 (7)             jsr     NPOP
FCDE 1F16             (        forth.asm):04541 (4)     ROLL1   tfr     x,w             Backup arg <u> to W
FCE0 8DC7             (        forth.asm):04542 (6)             bsr     PICK1           Let PICK do the error handling
FCE2 3121             (        forth.asm):04543 (4+1)           leay    1,y             Point to the LSB of the cell being picked
FCE4 303E             (        forth.asm):04544 (4+1)           leax    -2,y
FCE6 105C             (        forth.asm):04545 (2)             incw
FCE8 103066           (        forth.asm):04546 (4)             addr    w,w
FCEB 113912           (        forth.asm):04547 (6+?)           tfm     x-,y-
FCEE 7EE7E9           (        forth.asm):04548 (3)             jmp     NPOP
                      (        forth.asm):04549         
FCF1 03               (        forth.asm):04550         ROT     fcb     3               ANSI (Core)
FCF2 524F54           (        forth.asm):04551                 fcc     'ROT'           ( x1 x2 x3 -- x2 x3 x1 )
FCF5 FCD4             (        forth.asm):04552                 fdb     ROLL
                      (        forth.asm):04553                 RFCS
FCF7 8E0002           (        forth.asm):04554 (3)             ldx     #2
FCFA 20E2             (        forth.asm):04555 (3)             bra     ROLL1
                      (        forth.asm):04556         
FCFC 04               (        forth.asm):04557         MROT    fcb     4               Non-standard
FCFD 2D524F54         (        forth.asm):04558                 fcc     '-ROT'
FD01 FCF1             (        forth.asm):04559                 fdb     ROT
                      (        forth.asm):04560                 RFCS
FD03 8DF2             (        forth.asm):04561                 RFXT    bsr,ROT+6       XT for ROT
FD05 20F0             (        forth.asm):04562                 RFXT    bra,ROT+6       XT for ROT
                      (        forth.asm):04563         
FD07 02               (        forth.asm):04564         CCOMMA  fcb     2               ANSI (Core)
FD08 432C             (        forth.asm):04565                 fcc     'C,'            ( char -- )
FD0A FCFC             (        forth.asm):04566                 fdb     MROT
                      (        forth.asm):04567                 RFCS
FD0C BDE7E9           (        forth.asm):04568 (7)             jsr     NPOP
FD0F 1F10             (        forth.asm):04569 (4)             tfr     x,d
FD11 109E08           (        forth.asm):04570 (5)             ldy     DICEND
FD14 E7A0             (        forth.asm):04571 (4+1)           stb     ,y+
FD16 109F08           (        forth.asm):04572 (5)             sty     DICEND
FD19 39               (        forth.asm):04573 (4)             rts
                      (        forth.asm):04574         
FD1A 01               (        forth.asm):04575         COMMA   fcb     1               ANSI (Core)
FD1B 2C               (        forth.asm):04576                 fcc     ','             ( x -- )
FD1C FD07             (        forth.asm):04577                 fdb     CCOMMA
                      (        forth.asm):04578                 RFCS
FD1E BDE7E9           (        forth.asm):04579 (7)             jsr     NPOP
FD21 109E08           (        forth.asm):04580 (5)             ldy     DICEND
FD24 AFA1             (        forth.asm):04581 (5+2)           stx     ,y++
FD26 109F08           (        forth.asm):04582 (5)             sty     DICEND
FD29 39               (        forth.asm):04583 (4)             rts
                      (        forth.asm):04584         
FD2A 05               (        forth.asm):04585         ALLOT   fcb     5               ANSI (Core)
FD2B 414C4C4F54       (        forth.asm):04586                 fcc     'ALLOT'         ( n -- )
FD30 FD1A             (        forth.asm):04587                 fdb     COMMA
                      (        forth.asm):04588                 RFCS
FD32 BDE7E9           (        forth.asm):04589 (7)             jsr     NPOP            N to X
FD35 DC08             (        forth.asm):04590 (4)             ldd     DICEND
FD37 308B             (        forth.asm):04591 (4+2)           leax    d,x
FD39 9F08             (        forth.asm):04592 (4)             stx     DICEND          Adjust HERE
FD3B 39               (        forth.asm):04593 (4)             rts
                      (        forth.asm):04594         
FD3C 04               (        forth.asm):04595         FILL    fcb     4               ANSI (Core)
FD3D 46494C4C         (        forth.asm):04596                 fcc     'FILL'          ( c-addr u char -- )
FD41 FD2A             (        forth.asm):04597                 fdb     ALLOT
                      (        forth.asm):04598                 RFCS
FD43 BDE7E9           (        forth.asm):04599 (7)             jsr     NPOP
FD46 1F16             (        forth.asm):04600 (4)             tfr     x,w             Byte fill value to W
FD48 BDE7E9           (        forth.asm):04601 (7)     FILL1   jsr     NPOP
FD4B 1F12             (        forth.asm):04602 (4)             tfr     x,y             Byte count to Y
FD4D 1E26             (        forth.asm):04603 (5)             exg     y,w             Byte count to W, byte fill value to Y
FD4F BDE7E9           (        forth.asm):04604 (7)             jsr     NPOP            Destination address to X
FD52 105D             (        forth.asm):04605 (2)             tstw
FD54 2F0B             (        forth.asm):04606 (3)             ble     @filend
FD56 1F20             (        forth.asm):04607 (4)             tfr     y,d             Byte fill value to B
FD58 E784             (        forth.asm):04608 (4+0)           stb     ,x
FD5A 105A             (        forth.asm):04609 (2)             decw
FD5C 3101             (        forth.asm):04610 (4+1)           leay    1,x
FD5E 113812           (        forth.asm):04611 (6+?)           tfm     x+,y+
FD61 39               (        forth.asm):04612 (4)     @filend rts
                      (        forth.asm):04613         
FD62 05               (        forth.asm):04614         BLANK   fcb     5               ANSI (String)
FD63 424C414E4B       (        forth.asm):04615                 fcc     'BLANK'         ( c-addr u -- )
FD68 FD3C             (        forth.asm):04616                 fdb     FILL
                      (        forth.asm):04617                 RFCS
FD6A 10860020         (        forth.asm):04618 (4)             ldw     #SP
FD6E 20D8             (        forth.asm):04619 (3)             bra     FILL1
                      (        forth.asm):04620         
FD70 06               (        forth.asm):04621         CMOVED  fcb     6               ANSI (String)
FD71 434D4F56453E     (        forth.asm):04622                 fcc     'CMOVE>'
FD77 FD62             (        forth.asm):04623                 fdb     BLANK
                      (        forth.asm):04624                 RFCS
FD79 BDE596           (        forth.asm):04625 (7)             jsr     ACQMOVP
FD7C 105D             (        forth.asm):04626 (2)             tstw
FD7E 270D             (        forth.asm):04627 (3)             beq     @cmovd1
FD80 105A             (        forth.asm):04628 (2)     CMOVD1  decw
FD82 103061           (        forth.asm):04629 (4)             addr    w,x
FD85 103062           (        forth.asm):04630 (4)             addr    w,y
FD88 105C             (        forth.asm):04631 (2)             incw
FD8A 113912           (        forth.asm):04632 (6+?)           tfm     x-,y-
FD8D 39               (        forth.asm):04633 (4)     @cmovd1 rts
                      (        forth.asm):04634         
FD8E 05               (        forth.asm):04635         CMOVE   fcb     5               ANSI (String)
FD8F 434D4F5645       (        forth.asm):04636                 fcc     'CMOVE'
FD94 FD70             (        forth.asm):04637                 fdb     CMOVED
                      (        forth.asm):04638                 RFCS
FD96 BDE596           (        forth.asm):04639 (7)             jsr     ACQMOVP
FD99 113812           (        forth.asm):04640 (6+?)           tfm     x+,y+
FD9C 39               (        forth.asm):04641 (4)             rts
                      (        forth.asm):04642         
                      (        forth.asm):04643         * Functionally:
                      (        forth.asm):04644         * : MOVE ( addr1 addr2 u -- )      \ u is expressed in bytes
                      (        forth.asm):04645         *   DUP 2OVER                      \ addr1 addr2 u u addr1 addr2
                      (        forth.asm):04646         *   SWAP -                         \ addr1 addr2 u u addr2-addr1
                      (        forth.asm):04647         *   SWAP                           \ addr1 addr2 u addr2-addr1 u
                      (        forth.asm):04648         *   U< IF CMOVE> ELSE CMOVE THEN ;
                      (        forth.asm):04649         * For those who care to read the 1994 specification, arg <u> is expressed in
                      (        forth.asm):04650         * address units. For the rest of us, mere mortals, this is just a byte count.
                      (        forth.asm):04651         * As an aside, this is functionality provided by the glibc memmove function.
FD9D 04               (        forth.asm):04652         MOVE    fcb     4               ANSI (Core)
FD9E 4D4F5645         (        forth.asm):04653                 fcc     'MOVE'          ( addr1 addr2 u -- )
FDA2 FD8E             (        forth.asm):04654                 fdb     CMOVE
                      (        forth.asm):04655                 RFCS
FDA4 BDE596           (        forth.asm):04656 (7)             jsr     ACQMOVP         ADDR1 -> X, ADDR2 -> Y, U -> W
FDA7 105D             (        forth.asm):04657 (2)             tstw
FDA9 270D             (        forth.asm):04658 (3)             beq     @movend
                      (        forth.asm):04659         * addr2 addr1 - u U< IF CMOVE> ELSE CMOVE THEN
FDAB 1F20             (        forth.asm):04660 (4)             tfr     y,d             D has addr2 (dest)
FDAD 103210           (        forth.asm):04661 (4)             subr    x,d             D has addr2 - addr1 (dest - src)
FDB0 103760           (        forth.asm):04662 (4)             cmpr    w,d
FDB3 25CB             (        forth.asm):04663 (3)             blo     CMOVD1          CMOVE>
FDB5 113812           (        forth.asm):04664 (6+?)           tfm     x+,y+           CMOVE
FDB8 39               (        forth.asm):04665 (4)     @movend rts
                      (        forth.asm):04666         
FDB9 04               (        forth.asm):04667         LAST    fcb     4               79-STANDARD (REF)
FDBA 4C415354         (        forth.asm):04668                 fcc     'LAST'
FDBE FD9D             (        forth.asm):04669                 fdb     MOVE
                      (        forth.asm):04670                 RFCS
FDC0 9E06             (        forth.asm):04671 (4)             ldx     LSTWAD
FDC2 7EE7DB           (        forth.asm):04672 (3)             jmp     NPUSH
                      (        forth.asm):04673         
FDC5 04               (        forth.asm):04674         HERE    fcb     4               ANSI (Core)
FDC6 48455245         (        forth.asm):04675                 fcc     'HERE'          ( -- addr )
FDCA FDB9             (        forth.asm):04676                 fdb     LAST
                      (        forth.asm):04677                 RFCS
FDCC 9E08             (        forth.asm):04678 (4)             ldx     DICEND
FDCE 7EE7DB           (        forth.asm):04679 (3)             jmp     NPUSH
                      (        forth.asm):04680         
FDD1 02               (        forth.asm):04681         PLUSST  fcb     2               ANSI (Core)
FDD2 2B21             (        forth.asm):04682                 fcc     '+!'            ( n|u a-addr -- )
FDD4 FDC5             (        forth.asm):04683                 fdb     HERE
                      (        forth.asm):04684                 RFCS
FDD6 BDE9D0           (        forth.asm):04685 (7)             jsr     MIN2PST         We need at least two cells stacked up
FDD9 AEC4             (        forth.asm):04686 (5+0)           ldx     ,u              ADDR to X
FDDB EC84             (        forth.asm):04687 (5+0)           ldd     ,x              @ADDR to D
FDDD E342             (        forth.asm):04688 (5+1)           addd    2,u             Add INCR to D
FDDF ED84             (        forth.asm):04689 (5+0)           std     ,x              Store the sum back to ADDR
FDE1 3344             (        forth.asm):04690 (4+1)           leau    4,u             Drop two cells from the data stack
FDE3 39               (        forth.asm):04691 (4)             rts
                      (        forth.asm):04692         
FDE4 02               (        forth.asm):04693         CSTORE  fcb     2               ANSI (Core)
FDE5 4321             (        forth.asm):04694                 fcc     'C!'            ( char c-addr -- )
FDE7 FDD1             (        forth.asm):04695                 fdb     PLUSST
                      (        forth.asm):04696                 RFCS
FDE9 BDE9D0           (        forth.asm):04697 (7)             jsr     MIN2PST         We need at least two cells stacked up
FDEC A643             (        forth.asm):04698 (4+1)           lda     3,u             CHAR to A
FDEE A7D4             (        forth.asm):04699 (4+3)           sta     [,u]            Actual store to C-ADDR
FDF0 3344             (        forth.asm):04700 (4+1)           leau    4,u             Drop two cells from the data stack
FDF2 39               (        forth.asm):04701 (4)             rts
                      (        forth.asm):04702         
FDF3 01               (        forth.asm):04703         STORE   fcb     1               ANSI (Core)
FDF4 21               (        forth.asm):04704                 fcc     '!'             ( x a-addr -- )
FDF5 FDE4             (        forth.asm):04705                 fdb     CSTORE
                      (        forth.asm):04706                 RFCS
FDF7 BDE9D0           (        forth.asm):04707 (7)             jsr     MIN2PST         At least two cells need to be stacked up
FDFA EC42             (        forth.asm):04708 (5+1)           ldd     2,u             X to D
FDFC EDD4             (        forth.asm):04709 (5+3)           std     [,u]            Actual store to A-ADDR
FDFE 3344             (        forth.asm):04710 (4+1)           leau    4,u             Drop two cells from the user stack
FE00 39               (        forth.asm):04711 (4)             rts
                      (        forth.asm):04712         
FE01 02               (        forth.asm):04713         CFETCH  fcb     2               ANSI (Core)
FE02 4340             (        forth.asm):04714                 fcc     'C@'            ( c-addr -- char )
FE04 FDF3             (        forth.asm):04715                 fdb     STORE
                      (        forth.asm):04716                 RFCS
FE06 BDE9CB           (        forth.asm):04717 (7)             jsr     MIN1PST         We need at least one cell stacked up
FE09 4F               (        forth.asm):04718 (1)             clra
FE0A E6D4             (        forth.asm):04719 (4+3)           ldb     [,u]
FE0C EDC4             (        forth.asm):04720 (5+0)           std     ,u
FE0E 39               (        forth.asm):04721 (4)             rts
                      (        forth.asm):04722         
FE0F 01               (        forth.asm):04723         QMARK   fcb     1               ANSI (Programming tools)
FE10 3F               (        forth.asm):04724                 fcc     '?'
FE11 FE01             (        forth.asm):04725                 fdb     CFETCH
                      (        forth.asm):04726                 RFCS
FE13 BD0D84           (        forth.asm):04727 (7)             jsr     RAMFTCH         Call the RAM based incarnation of @
FE16 7EF698           (        forth.asm):04728                 RFXT    jmp,DOT+4       XT for .
                      (        forth.asm):04729         
                      (        forth.asm):04730         * End of ROM part of the builtin dictionary.
     FE19             (        forth.asm):04731         THEEND  equ     *               This is the end, Beautiful friend
                      (        forth.asm):04732         *                               This is the end, My only friend
                      (        forth.asm):04733         
                      (        forth.asm):04734         * This word is relocated to RAM, so that we can compile new definitions.
                      (        forth.asm):04735         * FORTHIN will take care of that and adjust the relevant pointers.
FE19 01               (        forth.asm):04736         FETCH   fcb     1               ANSI (Core)
FE1A 40               (        forth.asm):04737                 fcc     '@'             ( a-addr -- x )
FE1B FE0F             (        forth.asm):04738                 fdb     QMARK
                      (        forth.asm):04739                 RFCS
FE1D BDE9CB           (        forth.asm):04740 (7)             jsr     MIN1PST         At least one cell needs to be stacked up
FE20 ECD4             (        forth.asm):04741 (5+3)           ldd     [,u]
FE22 EDC4             (        forth.asm):04742 (5+0)           std     ,u              Returned through the data stack
FE24 39               (        forth.asm):04743 (4)             rts
                      (        forth.asm):04744         
     FE25             (        forth.asm):04745         REALEND equ     *
                      (        forth.asm):04746         
                      (        forth.asm):04747         *******************************************************************************
                      (        forth.asm):04748         * String literals.
                      (        forth.asm):04749         
                      (        forth.asm):04750         * Using CR+LF as it is Minicom's default.
                      (        forth.asm):04751         
                      (        forth.asm):04752         * Clear the screen, VT100 style.
FE25 1B5B481B5B4A0D00 (        forth.asm):04753         CSVT100 fcb     $1B,'[','H',$1B,'[','J',CR,NUL
                      (        forth.asm):04754         
FE2D 0D0A             (        forth.asm):04755         BOOTMSG fcb     CR,LF
                      (        forth.asm):04756                 IFNE    RTCFEAT
                      (        forth.asm):04757                 fcc     'Z79Forth/AR 6309 ANS Forth System'
                      (        forth.asm):04758                 ELSE
FE2F 5A3739466F727468 (        forth.asm):04759                 fcc     'Z79Forth/AI 6309 ANS Forth System'
     2F41492036333039
     20414E5320466F72
     7468205379737465
     6D
                      (        forth.asm):04760                 ENDC                    RTCFEAT
FE50 0D0A             (        forth.asm):04761                 fcb     CR,LF
FE52 3230323430323138 (        forth.asm):04762                 fcc     '20240218 (C) Francois Laagel 2019'
     2028432920467261
     6E636F6973204C61
     6167656C20323031
     39
FE73 0D0A0D0A00       (        forth.asm):04763                 fcb     CR,LF,CR,LF,NUL
                      (        forth.asm):04764         
FE78 52414D204F4B3A20 (        forth.asm):04765         RAMOKM  fcc     'RAM OK: 32 KB'
     3332204B42
FE85 0D0A00           (        forth.asm):04766         CRLFSTR fcb     CR,LF,NUL
                      (        forth.asm):04767         
FE88 52414D2063686563 (        forth.asm):04768         RAMFM   fcc     'RAM check failed'
     6B206661696C6564
FE98 0D0A00           (        forth.asm):04769                 fcb     CR,LF,NUL
                      (        forth.asm):04770         
                      (        forth.asm):04771                 IFNE    RTCFEAT
FE9B                  (        forth.asm):04772         RTPRESM fcc     'MC146818 RTC'
                      (        forth.asm):04773                 fcb     CR,LF,NUL
                      (        forth.asm):04774                 ENDC
                      (        forth.asm):04775         
                      (        forth.asm):04776                 IFEQ    CSSNTVE
FE9B 206F6B           (        forth.asm):04777         OKFEEDB fcc     ' ok'           As per GNU Forth's implementation...
                      (        forth.asm):04778                 ELSE
FE9E                  (        forth.asm):04779         OKFEEDB fcc     ' OK'
                      (        forth.asm):04780                 ENDC                    CSSNTVE
FE9E 0D0A00           (        forth.asm):04781                 fcb     CR,LF,NUL
                      (        forth.asm):04782         
                      (        forth.asm):04783         * Error messages for IODZHDL.
FEA1 496C6C6567616C20 (        forth.asm):04784         IOPERRM fcn     'Illegal opcode near '
     6F70636F6465206E
     6561722000
FEB6 4469766973696F6E (        forth.asm):04785         DV0ERRM fcn     'Division by 0 near '
     2062792030206E65
     61722000
                      (        forth.asm):04786         
FECA 4461746120737461 (        forth.asm):04787         ERRMTBL fcn     'Data stack overflow'   Error 0
     636B206F76657266
     6C6F7700
FEDE 4461746120737461 (        forth.asm):04788                 fcn     'Data stack underflow'  Error 1
     636B20756E646572
     666C6F7700
FEF3 3F00             (        forth.asm):04789                 fcn     '?'                     Error 2
FEF5 557365722041424F (        forth.asm):04790                 fcn     'User ABORT'            Error 3
     525400
FF00 4F6F52206572726F (        forth.asm):04791                 fcn     'OoR error'             Error 4 (formerly 'Division by zero')
     7200
FF0A 4D697373696E6720 (        forth.asm):04792                 fcn     'Missing word name'     Error 5
     776F7264206E616D
     6500
FF1C 496E636F72726563 (        forth.asm):04793                 fcn     'Incorrect STATE'       Error 6
     7420535441544500
FF2C 52657475726E2073 (        forth.asm):04794                 fcn     'Return stack overflow' Error 7
     7461636B206F7665
     72666C6F7700
FF42 52657475726E2073 (        forth.asm):04795                 fcn     'Return stack underflow' Error 8
     7461636B20756E64
     6572666C6F7700
FF59 496C6C6567616C20 (        forth.asm):04796                 fcn     'Illegal construct'     Error 9
     636F6E7374727563
     7400
FF6B 417373657274696F (        forth.asm):04797                 fcn     'Assertion failed'      Error 10
     6E206661696C6564
     00
FF7C 00               (        forth.asm):04798                 fcn     ''                      Error 11 (formerly 'RO word')
FF7D 4D697373696E6720 (        forth.asm):04799                 fcn     'Missing delimiter'     Error 12
     64656C696D697465
     7200
FF8F 496C6C6567616C20 (        forth.asm):04800                 fcn     'Illegal argument'      Error 13
     617267756D656E74
     00
FFA0 4E6F206D61746368 (        forth.asm):04801                 fcn     'No matching CREATE'    Error 14
     696E672043524541
     544500
                      (        forth.asm):04802                 IFNE DEBUG
                      (        forth.asm):04803                 fcn     'No current buffer'     Error 15
                      (        forth.asm):04804                 ELSE
FFB3 00               (        forth.asm):04805                 fcn     ''                      Error 15
                      (        forth.asm):04806                 ENDC                            DEBUG
FFB4 576F7264206E616D (        forth.asm):04807                 fcn     'Word name too long'    Error 16
     6520746F6F206C6F
     6E6700
FFC7 494F206572726F72 (        forth.asm):04808                 fcn     'IO error'              Error 17
     00
FFD0 3E494E204F757420 (        forth.asm):04809                 fcn     '>IN Out of range'      Error 18
     6F662072616E6765
     00
                      (        forth.asm):04810         
                      (        forth.asm):04811         * A-list used for numeric literal base prefixes.
FFE1 24               (        forth.asm):04812         BASALST fcc     '$'             Hexadecimal prefix
FFE2 10               (        forth.asm):04813                 fcb     16
FFE3 26               (        forth.asm):04814                 fcc     '&'             Decimal prefix (as in LWASM, VolksForth)
FFE4 0A               (        forth.asm):04815                 fcb     10
FFE5 23               (        forth.asm):04816                 fcc     '#'             Decimal prefix
FFE6 0A               (        forth.asm):04817                 fcb     10
FFE7 25               (        forth.asm):04818                 fcc     '%'             Binary prefix
FFE8 02               (        forth.asm):04819                 fcb     2
FFE9 40               (        forth.asm):04820                 fcc     '@'             Octal prefix
FFEA 08               (        forth.asm):04821                 fcb     8
FFEB 00               (        forth.asm):04822                 fcb     0               End of list marker
                      (        forth.asm):04823         
                      (        forth.asm):04824         * Under no circumstance should the following symbol be negative!
     0004             (        forth.asm):04825         AVL     equ     VECTBL-*        Available EEPROM space left
                      (        forth.asm):04826         
                      (        forth.asm):04827         *******************************************************************************
                      (        forth.asm):04828         * Interrupt vector table
                      (        forth.asm):04829                 org     VECTBL
                      (        forth.asm):04830         
FFF0 E000             (        forth.asm):04831                 fdb     IODZHDL         Illegal opcode/Division by zero trap
FFF2 E036             (        forth.asm):04832                 fdb     SWI3HDL         SWI 3 interrupt vector address
FFF4 E036             (        forth.asm):04833                 fdb     SWI2HDL         SWI 2 interrupt vector address
FFF6 E252             (        forth.asm):04834                 fdb     FIRQHDL         FIRQ interrupt vector address
FFF8 E036             (        forth.asm):04835                 fdb     IRQHDL          IRQ interrupt vector address
FFFA E036             (        forth.asm):04836                 fdb     SWIHDL          SWI interrupt vector address
FFFC E1DA             (        forth.asm):04837                 fdb     NMIHDL          NMI vector address
FFFE E037             (        forth.asm):04838                 fdb     RSTHDL          RESET vector address
                      (        forth.asm):04839         

Symbol Table:
[ G] _BS                              E301
[ G] _INTERP                          E0BF
[ G] ABORT                            F136
[ G] ABS                              EFEA
[ G] AC8N1                            0014
[ G] ACCEPT                           F788
[ G] ACDIV16                          0001
[ G] ACIACTL                          D800
[ G] ACIADAT                          D801
[ G] ACIISVC                          0080
[ G] ACIOVRN                          0020
[ G] ACIRDRF                          0001
[ G] ACIRSET                          0043
[ G] ACIRTS0                          0095
[ G] ACIRTS1                          00D5
[ G] ACITDRE                          0002
[ G] ACQMOVP                          E596
[ G] ACQVMRA                          E599
[ G] ACRDINT                          0080
[ G] ACRST                            0003
[ G] ACRTS0                           0000
[ G] ACRTS1                           0040
[ G] ADDS                             E1BA
[ G] ADIV16                           E18D
[ G] AGAIN                            F027
[ G] AGAIN1                           F03F
[ G] AHEAD                            EE16
[ G] AHEAD1                           EE21
[ G] ALIGN                            EBC4
[ G] ALIGND                           EA12
[ G] ALLOT                            FD2A
[ G] ANCMPF                           0134
[ G] AND                              EEFD
[ G] APADBUF                          01E5
[ G] AVL                              0004
[ G] BALCHK                           E830
[ G] BALERR                           E835
[ G] BALNCD                           0135
[ G] BASALST                          FFE1
[ G] BASBKUP                          0136
[ G] BASE                             FBD6
[ G] BASESET                          FBF0
[ G] BCSOPC                           2503
[ G] BDICEND                          010C
[ G] BDIRTY                           0004
[ G] BEGIN                            F013
[ G] BFDISP                           0410
[ G] BINUSE                           0001
[ G] BKCHAR                           F2DA
[ G] BKIN2PT                          E86F
[ G] BKQUOT                           F1B7
[ G] BKSLSH                           F372
[ G] BL                               F701
[ G] BLANK                            FD62
[ G] BLK                              EB39
[ G] BLKSIZ                           0400
[ G] BLOCK                            EAE8
[ G] BLSTWAD                          010A
[ G] BMAPPD                           0002
[ G] BNEOPC                           2603
[ G] BOBLKNO                          0402
[ G] BOFLAGS                          0401
[ G] BOOTMSG                          FE2D
[ G] BOTERM                           0400
[ G] BS                               0008
[ G] BSBFADR                          0120
[ G] BUF0                             0560
[ G] BUF1                             0970
[ G] BUFFER                           EAA0
[ G] BYE                              F2D1
[ G] CCOMMA                           FD07
[ G] CCREGM                           E21D
[ G] CELLP                            EA28
[ G] CELLS                            F986
[ G] CF1BKRD                          E98A
[ G] CF1BKWR                          E9A5
[ G] CF1BPRE                          E96D
[ G] CF1SRD                           E939
[ G] CF1SWR                           E958
[ G] CFANTHS                          E8E4
[ G] CFBASE                           C000
[ G] CFBSYB                           0080
[ G] CFCARDP                          0147
[ G] CFCHIGR                          C005
[ G] CFCLOWR                          C004
[ G] CFCMDIS                          E8C9
[ G] CFCMMIR                          0148
[ G] CFCOMDR                          C007
[ G] CFDATAR                          C000
[ G] CFDRHDR                          C006
[ G] CFDRQB                           0008
[ G] CFDRSEL                          E8DB
[ G] CFDSCB                           0010
[ G] CFDWFB                           0020
[ G] CFERRB                           0001
[ G] CFERRCD                          0149
[ G] CFERRCK                          E8BC
[ G] CFERROR                          C001
[ G] CFETCH                           FE01
[ G] CFFEATR                          C001
[ G] CFIDDEV                          00EC
[ G] CFINIAB                          E938
[ G] CFINIT                           E902
[ G] CFLAG                            0001
[ G] CFR1SRA                          E957
[ G] CFRDY                            E8A6
[ G] CFRDYB                           0040
[ G] CFRSCTS                          0020
[ G] CFSCNTR                          C002
[ G] CFSCSZ                           0200
[ G] CFSETFT                          00EF
[ G] CFSNUMR                          C003
[ G] CFSTATR                          C007
[ G] CFWAIT                           E89E
[ G] CFWSCTS                          0030
[ G] CHAR                             F2E8
[ G] CHARP                            F8B8
[ G] CHARS                            EA1E
[ G] CHKNDPT                          E9C0
[ G] CKDPTRA                          E9CB
[ G] CKNBPFX                          E3B6
[ G] CMDBFSZ                          0084
[ G] CMDBUF                           0438
[ G] CMOVD1                           FD80
[ G] CMOVE                            FD8E
[ G] CMOVED                           FD70
[ G] CMP2                             E582
[ G] CMP2RA                           E585
[ G] CMPCOMA                          F1FC
[ G] COMMA                            FD1A
[ G] COMP                             E115
[ G] COMPC                            F20D
[ G] COMPC1                           F213
[ G] COMPLRA                          E127
[ G] COMPR                            F240
[ G] CONS                             EC8D
[ G] COUNT                            F773
[ G] CR                               000D
[ G] CREAT1                           EC36
[ G] CREATE                           EC15
[ G] CRLF                             F742
[ G] CRLFSTR                          FE85
[ G] CSPOP                            E7E9
[ G] CSPUSH                           E7DB
[ G] CSSNTVE                          0000
[ G] CSTORE                           FDE4
[ G] CSVT100                          FE25
[ G] CURTOKL                          0142
[ G] CVISSGN                          0141
[ G] CVNSTR                           E456
[ G] CVT                              F5CA
[ G] CVT0                             F5D0
[ G] CVT1                             F5D8
[ G] CVTB                             F68C
[ G] CVTE                             F584
[ G] CVTFCN                           013E
[ G] CYCLO                            014B
[ G] DBDIVSG                          F629
[ G] DDUMP                            FC14
[SG] DEBUG                            0000
[SG] DEBUG                            0000
[ G] DECIMAL                          FBE3
[ G] DEFFLG                           0145
[ G] DEFFLM                           0040
[ G] DEPTH                            EC00
[ G] DEV0                             C000
[ G] DEV1                             C400
[ G] DEV2                             C800
[ G] DEV3                             CC00
[ G] DEV4                             D000
[ G] DEV5                             D400
[ G] DEV6                             D800
[ G] DEV7                             DC00
[ G] DICEND                           0108
[ G] DIFF                             EEA1
[ G] DIV                              F9E3
[ G] DIV1                             F9EB
[ G] DIVDBL                           0139
[ G] DIVFCN                           0138
[ G] DIVSYM                           013A
[ G] DLESS                            F456
[ G] DMINUS                           F432
[ G] DNEG                             F410
[ G] DO                               ED60
[ G] DOES                             EC3E
[ G] DOESEX                           EC4C
[ G] DOEX                             ED79
[ G] DOT                              F694
[ G] DOTR                             F6BC
[ G] DOTR0                            F6C5
[ G] DOTTICK                          FBFE
[ G] DPLUS                            F3F8
[ G] DPOPRA                           E7FA
[ G] DPREGM                           E229
[ G] DPSHRA                           E7E8
[ G] DREGM                            E221
[ G] DROP                             FC82
[ G] DUP                              FC74
[ G] DV0ERRM                          FEB6
[ G] DVFDIV                           0002
[ G] DVFMASK                          0007
[ G] DVFMOD                           0001
[ G] DVFSLMD                          0000
[ G] DVOA1D                           0008
[ G] DVOWSYM                          0010
[ G] DZEQ                             F44A
[ G] EBUFS                            E9DF
[ G] ELSE                             EE5C
[ G] EMIT                             F879
[ G] EMPTYB                           E9EF
[ G] EMXASXT                          E152
[ G] EQ                               EE89
[ G] ERRHD1                           E74F
[ G] ERRHDLR                          E74C
[ G] ERRMTBL                          FECA
[ G] ETX                              0003
[ G] EVAL                             F7F8
[ G] EXCT                             F2BB
[ G] EXIT                             F04C
[ G] F83DIVF                          013C
[ G] FALSE                            F8D2
[ G] FDCTSYM                          E5A4
[ G] FDIVADJ                          FA53
[ G] FETCH                            FE19
[ G] FFLAG                            0040
[ G] FILL                             FD3C
[ G] FILL1                            FD48
[ G] FIND                             F143
[ G] FINDSYM                          E616
[ G] FIRQHDL                          E252
[ G] FLUSH                            EA7B
[ G] FMSLMOD                          F9C5
[ G] FNDPLD                           0110
[ G] FORTHIN                          E34B
[ G] FWDREF                           0116
[ G] GETCH                            E2AB
[ G] GETS                             E30D
[ G] HDMP2                            E1AB
[ G] HDMP4                            E192
[ G] HERE                             FDC5
[ G] HEX                              FBF3
[ G] HEX1D                            E179
[ G] HEXBFSZ                          0050
[ G] HEXBUF                           04BC
[ G] HOLD                             F5B1
[ G] HT                               0009
[ G] HVNMI                            0001
[ G] HVNMI2                           0000
[ G] ICHECK                           ED0F
[ G] IF                               EE37
[ G] IFLAG                            0010
[ G] ILLOPC                           00C7
[ G] IMDFLG                           0144
[ G] IMDFLM                           0080
[ G] IMMED                            ECD0
[ G] IMMED1                           ECDE
[ G] INDI                             F0DC
[ G] INDIP                            F0FE
[ G] INDJ                             F107
[ G] INDJP                            F10F
[ G] INDK                             F118
[ G] INF                              EFAC
[ G] INIT                             E047
[ G] INTERP                           E0B2
[ G] INTISRA                          E0F2
[ G] INTRPRA                          E0FB
[ G] INVERT                           EF10
[ G] IODZHDL                          E000
[ G] IOERR                            E952
[ G] IOPERRM                          FEA1
[ G] IOSTRT                           C000
[ G] IRQHDL                           E036
[ G] ISDBLF                           0140
[ G] ISEADDR                          0128
[ G] ISERCHD                          E36B
[ G] ISLEN                            0126
[ G] ISNEGF                           013F
[ G] JMPOPC                           007E
[ G] JSRLAST                          0114
[ G] JSROPC                           00BD
[ G] KEY                              F868
[ G] KEYP                             F856
[ G] LAST                             FDB9
[ G] LBRACK                           F191
[ G] LDXOPC                           008E
[ G] LEAVE                            F0BE
[ G] LF                               000A
[ G] LIST                             EB86
[ G] LITER                            E566
[ G] LITERAL                          EC6A
[ G] LOAD                             F7D1
[ G] LOAD1                            F7DE
[ G] LOAD2                            F7EC
[ G] LOCWRT                           E50B
[ G] LOOP                             ED82
[ G] LOOP1                            ED8C
[ G] LOOPEX                           EDC9
[ G] LPAR                             F350
[ G] LSTWAD                           0106
[ G] LWMNRA                           E522
[ G] MARKER                           F287
[ G] MAX                              EFBA
[ G] MCCABE                           EA02
[ G] MILLIS                           F840
[ G] MILLIS1                          F84A
[ G] MIN                              EFD2
[ G] MIN1PST                          E9CB
[ G] MIN2PST                          E9D0
[ G] MIN3PST                          E9D5
[ G] MIN4PST                          E9DA
[ G] MINTLRA                          E0BD
[ G] MINUS                            F8C2
[ G] MOD                              F9AE
[ G] MONITOR                          ED04
[ G] MOVE                             FD9D
[ G] MROT                             FCFC
[ G] MRUBUFA                          011E
[ G] MSLCNT                           031A
[ G] MSTAR                            F932
[ G] MULFCN                           013B
[ G] MULT                             F917
[ G] MULT1                            F91D
[ G] NAK                              0015
[ G] NCLR                             EBE6
[ G] NDCTWKS                          E63C
[ G] NEGATE                           F000
[ G] NIP                              FC6A
[ G] NMCVCRA                          E139
[ G] NMCVIRA                          E0D0
[ G] NMI2DM                           E1C5
[ G] NMI4DM                           E1CB
[ G] NMIDML                           E1D1
[ G] NMIHDL                           E1DA
[ G] NONAME                           F230
[ G] NOT                              EF78
[ G] NPOP                             E7E9
[ G] NPUSH                            E7DB
[ G] NSTBOT                           033A
[ G] NSTKSZ                           0100
[ G] NSTTOP                           023A
[ G] NUL                              0000
[ G] NULP                             EF57
[ G] NUMCVRA                          E44E
[ G] NUMCVT                           E3DC
[ G] NXTCHAR                          E3AF
[ G] OKFEEDB                          FE9B
[ G] ONEM                             F89A
[ G] ONEP                             F8A9
[ G] OR                               EEEB
[ G] OVER                             FCC8
[ G] PAD                              F74A
[ G] PADBSZ                           0054
[ G] PADBUF                           0191
[ G] PAGE                             F735
[ G] PAYLOAD                          FAF2
[ G] PCREGM                           E23A
[ G] PICK                             FC9F
[ G] PICK1                            FCA9
[ G] PLOAD                            010E
[ G] PLOOP                            EDCE
[ G] PLOOPEX                          EDDB
[ G] PLOPEX1                          EDDE
[ G] PLUS                             F88A
[ G] PLUSST                           FDD1
[ G] POSTPON                          F1C2
[ G] pragma                           0000
[ G] PRBLKIN                          E71F
[ G] PREAPAD                          F616
[ G] PSTR                             F38F
[ G] PTOP0                            F69C
[ G] PUTCH                            E2D7
[ G] PUTCR                            E2F7
[ G] PUTS                             E2EA
[ G] QDO                              ED19
[ G] QDO1                             ED3F
[ G] QDOEX                            ED46
[ G] QMARK                            FE0F
[ G] QRYDUP                           FC4E
[ G] QUIT                             F120
[ G] RAKEVAR                          0118
[ G] RAMCHK                           E057
[ G] RAMFAIL                          E069
[ G] RAMFM                            FE88
[SG] RAMFTCH                          0D84
[ G] RAMOK                            E07B
[ G] RAMOKM                           FE78
[ G] RAMSIZE                          8000
[ G] RAMSTRT                          0000
[ G] RBRACK                           F188
[ G] RBRACK1                          F18E
[ G] RCLR                             EBF1
[ G] RDEPTH                           0137
[ G] READLN                           E166
[ G] REALEND                          FE25
[ G] RECADDR                          0112
[ G] RECURSE                          F278
[ G] REFILL                           EB16
[SG] RELFEAT                          0000
[SG] RELFEAT                          0001
[ G] REPEAT                           F09A
[ G] RFETCH                           F0F7
[ G] RFROM                            F0A8
[ G] ROLL                             FCD4
[ G] ROLL1                            FCDE
[ G] ROMSTRT                          E000
[ G] ROT                              FCF1
[ G] RPICKN                           F0E1
[ G] RPOP                             E817
[ G] RPOPRA                           E830
[ G] RPSHRA                           E816
[ G] RPUSH                            E7FB
[ G] RSBSPFX                          E44F
[ G] RSP                              0100
[ G] RSTBOT                           0438
[ G] RSTHDL                           E037
[ G] RSTINP                           E855
[ G] RSTKSZ                           00FE
[ G] RSTRCT                           ECE8
[ G] RSTTOP                           033A
[ G] RTADV32                          0020
[ G] RTADVRS                          0070
[ G] RTARS64                          000A
[ G] RTAS                             D400
[ G] RTAUIP                           0080
[ G] RTB24                            0002
[ G] RTBDM                            0004
[ G] RTBPIE                           0040
[ G] RTBSET                           0080
[ G] RTCAVL                           0146
[ G] RTCFEAT                          0000
[ G] RTCFTCH                          EB6D
[ G] RTCPF                            0040
[ G] RTCSTOR                          EB7C
[ G] RTDS                             D401
[ G] RTODOM                           0007
[ G] RTODOW                           0006
[ G] RTOHOUR                          0004
[ G] RTOHRA                           0005
[ G] RTOMIN                           0002
[ G] RTOMINA                          0003
[ G] RTOMON                           0008
[ G] RTOPRES                          003F
[ G] RTOREGA                          000A
[ G] RTOREGB                          000B
[ G] RTOREGC                          000C
[ G] RTOREGD                          000D
[ G] RTOSEC                           0000
[ G] RTOSECA                          0001
[ G] RTOUMB                           000E
[ G] RTOYEAR                          0009
[ G] RTSOPC                           0039
[ G] RTUMSZ                           0032
[ G] SAVBUF                           EA3A
[ G] SAVINP                           E83A
[ G] SCNETOK                          E397
[ G] SCNSTOK                          E384
[ G] SCR                              EB51
[ G] SERBCNT                          014F
[ G] SERBDEQ                          014E
[ G] SERBENQ                          014D
[ G] SERBSZ                           0040
[ G] SERBUF                           0151
[ G] SHARPS                           F5BF
[ G] SHIFT                            F8EC
[ G] SIGN                             F59C
[ G] SINFEQ                           EEBA
[ G] SLEN                             E243
[ G] SLMOD                            F9BA
[ G] SMSLREM                          F9D4
[ G] SOURCE                           F35F
[ G] SP                               0020
[ G] SPACE                            F70C
[ G] SPACES                           F719
[ G] SQUOTE                           F3A3
[ G] SQUOTFN                          014C
[ G] SRCID                            014A
[ G] SREGM                            E23F
[ G] SSDFEAT                          0001
[ G] STATE                            FBC8
[ G] STOD                             EBCD
[ G] STORE                            FDF3
[ G] STRSL1                           FA69
[ G] STRSLMD                          FA94
[ G] STRSLSH                          FA60
[ G] STSLFCN                          013D
[ G] SUP                              EF9E
[ G] SVCTOKL                          0143
[ G] SWAP                             FC8C
[ G] SWDIC                            E49D
[ G] SWDIC1                           E4A2
[ G] SWI2HDL                          E036
[ G] SWI3HDL                          E036
[ G] SWIHDL                           E036
[ G] SYSSTAT                          FAE8
[ G] SYSSTK                           FADF
[ G] TBUFF                            050C
[ G] TBUFSZ                           0048
[ G] TERPRET                          F7A0
[ G] THEEND                           FE19
[ G] THEN                             EE6A
[ G] THRU                             F81F
[ G] TICK                             F198
[ G] TICKS                            EB5D
[ G] TIKSHI                           0130
[ G] TIKSLOW                          0132
[ G] TOIN                             EB45
[ G] TOKENEP                          0104
[ G] TOKENSP                          0102
[ G] TONUMBR                          F4F9
[ G] TOR                              F0B3
[ G] TRUE                             F8DF
[ G] TUCK                             FC5F
[ G] TWODIV                           F99F
[ G] TWODROP                          F4B0
[ G] TWODUP                           F4BE
[ G] TWOFTCH                          F4E6
[ G] TWOOVER                          F47C
[ G] TWOSTOR                          F4D5
[ G] TWOSWAP                          F494
[ G] TWOTIM                           F990
[ G] TYPE                             F756
[ G] U2INFRD                          E161
[ G] UBASE                            0122
[ G] UBLK                             012C
[ G] UDOT                             F6B3
[ G] UDOTR                            F6F7
[ G] UINF                             EF8F
[ G] UMSLMOD                          FAA0
[ G] UMSTAR                           F93D
[ G] UNLESS                           EE4B
[ G] UNLOOP                           EE07
[ G] UNMON                            ECF7
[ G] UNTIL                            F06D
[ G] UPDATE                           EA88
[ G] UREGM                            E236
[ G] USCR                             012E
[ G] USTATE                           0124
[ G] USUP                             EF80
[ G] UTOIN                            012A
[ G] VARCON                           E578
[ G] VARCON1                          E57A
[ G] VARCON2                          E57D
[ G] VARI                             ECAC
[ G] VARSPC                           0100
[ G] VECTBL                           FFF0
[ G] VLPRVEP                          011A
[ G] VLPRVHD                          011C
[ G] WBIFDRT                          EA51
[ G] WDICSPC                          0D80
[ G] WHILE                            F08C
[ G] WIEN2IN                          E100
[ G] WORD                             F30E
[ G] WORD1                            F317
[ G] WORDS                            FB01
[ G] WREGM                            E225
[ G] WRLNMSK                          001F
[ G] WTOOLNG                          E53A
[ G] XMITOK                           0150
[ G] XOFF                             0013
[ G] XON                              0011
[ G] XOR                              EED5
[ G] XOR1                             EEE6
[ G] XREGM                            E22E
[ G] YREGM                            E232
[ G] ZFLAG                            0004
[ G] ZGREAT                           EF25
[ G] ZLESS                            EF3E
[ G] ZNEQ                             EF6E
