                      (        forth.asm):00001         * 6309 Forth based on my 1984/07/16 TRS-80 Model 1 level II ROM implementation.
                      (        forth.asm):00002         *
                      (        forth.asm):00003         * This work is dedicated to Alain Pinaud, author of "Programmer en Forth"
                      (        forth.asm):00004         * published by Editions du P.S.I. in 1983--i.e. my virtual mentor in the field.
                      (        forth.asm):00005         * Special thanks go William Astle for his fantastic LW Tools utility set and
                      (        forth.asm):00006         * to Robert Lipe for his advice on serial line handling. Apache subversion
                      (        forth.asm):00007         * and the sdiff utility also were on my side all the time.
                      (        forth.asm):00008         *
                      (        forth.asm):00009         * Also credited for their help: Justin Poirier (seminal HW design), Daniel
                      (        forth.asm):00010         * Tufvesson (original CompactFlash interface), Peter Minuth (general Forth
                      (        forth.asm):00011         * guruness), Paul E. Bennett (ANSI compatibility advice); Michel Jean, Bill
                      (        forth.asm):00012         * Ragsdale and Pablo Hugo Reda for contributed application level code;
                      (        forth.asm):00013         * Carsten Strotmann for most of the benchmarking code (see
                      (        forth.asm):00014         * https://theultimatebenchmark.org/); Gerry Jackson and Steve R. Palmer
                      (        forth.asm):00015         * (see https://github.com/gerryjackson/forth2012-test-suite) for selected
                      (        forth.asm):00016         * bits and pieces of the Forth2012 test suite (see https://forth-standard.org/).
                      (        forth.asm):00017         *
                      (        forth.asm):00018         * This is a native Forth. Not a threaded interpretive implementation.
                      (        forth.asm):00019         * Worth noticing is the fact that the return stack does not hold return
                      (        forth.asm):00020         * addresses at all. All what is stored there is loop indexes and control
                      (        forth.asm):00021         * structures jump addresses. Actual return addresses are kept in the system
                      (        forth.asm):00022         * stack. All in all, this is the result of the work of a 19 year old guy,
                      (        forth.asm):00023         * heavily revisited 35 years later. Some quirks remain that prevent me
                      (        forth.asm):00024         * from offering the full required set--not to mention the choice of using
                      (        forth.asm):00025         * an 8K EEPROM. The downside of this implementation is that the generated
                      (        forth.asm):00026         * code is about 30% larger than a threaded interpretive implementation
                      (        forth.asm):00027         * would be. So it goes...
                      (        forth.asm):00028         *
                      (        forth.asm):00029         * The code generated is limited to a very small instruction set:
                      (        forth.asm):00030         *
                      (        forth.asm):00031         * LDXOPC        $8E     LDX (immediate)
                      (        forth.asm):00032         * JMPOPC        $7E     JMP (extended)
                      (        forth.asm):00033         * JSROPC        $BD     JSR (extended)
                      (        forth.asm):00034         * RTSOPC        $39     RTS (inherent)
                      (        forth.asm):00035         * BCSOPC        $2503   BCS *+5 (relative) Used in LOOP, +LOOP
                      (        forth.asm):00036         * BNEOPC        $2603   BNE *+5 (relative) Used in IF, UNTIL
                      (        forth.asm):00037         *
                      (        forth.asm):00038         * On error, the system stack pointer is reset. The return stack also is
                      (        forth.asm):00039         * but the data stack will be in the same state as when the error occurred.
                      (        forth.asm):00040         * ABORT and QUIT enforce their own 79-STANDARD behaviour.
                      (        forth.asm):00041         *
                      (        forth.asm):00042         * The 79-STANDARD Forth specification can be downloaded from
                      (        forth.asm):00043         * https://www.complang.tuwien.ac.at/forth/fth79std/FORTH-79.TXT
                      (        forth.asm):00044         *
                      (        forth.asm):00045         * Additionally, this implementation provides a few FORTH-83 words. Those
                      (        forth.asm):00046         * words are CMOVE> and RECURSE. See
                      (        forth.asm):00047         * http://forth.sourceforge.net/standard/fst83/FORTH-83.PRN
                      (        forth.asm):00048         * Floored division has been implemented on the top of the processor's native
                      (        forth.asm):00049         * symmetric operation (credits to David Frech). This results in a slight
                      (        forth.asm):00050         * performance loss but helps a lot with compatibility with FORTH-83 and ANSI
                      (        forth.asm):00051         * code.
                      (        forth.asm):00052         *
                      (        forth.asm):00053         * \ ['] [CHAR] .S ACCEPT CELLS CHAR COMPILE, INVERT KEY? NIP POSTPONE S>D S"
                      (        forth.asm):00054         * SOURCE TUCK U> * UNLOOP and WITHIN have been borrowed from the ANSI draft 6
                      (        forth.asm):00055         * specification. See http://www.forth.org/svfig/Win32Forth/DPANS94.txt
                      (        forth.asm):00056         *
                      (        forth.asm):00057         * RESTRICT is non-standard. It comes from GNU Forth (VolksForth). The " OK"
                      (        forth.asm):00058         * non-prompt string also does, by the way. Thanks to Anton Ertl for his terse
                      (        forth.asm):00059         * yet valuable input.
                      (        forth.asm):00060         *
                      (        forth.asm):00061         * .' (dot-tick) is non-standard. It comes from SwiftForth. It will be supported
                      (        forth.asm):00062         * whether or not the symbolic stack dump has been configured (see SSDFEAT in
                      (        forth.asm):00063         * constants.asm). However, please note that effective symbolic references will
                      (        forth.asm):00064         * be resolved only if the feature was enabled at compilation time. Otherwise
                      (        forth.asm):00065         * a simple HEX print of the cell at the top of the data stack will be
                      (        forth.asm):00066         * performed. This is meant to support Forth source code that does not depend
                      (        forth.asm):00067         * on the feature vector (see examples/dis.4th).
                      (        forth.asm):00068         *
                      (        forth.asm):00069         * MONITOR and ICHECK are also non-standard. They are intended to maintain and
                      (        forth.asm):00070         * verify the integrity of a checksum of the code section of RAM resident
                      (        forth.asm):00071         * words, with the exception of VARIABLEs and CREATEd words. CREATEd words,
                      (        forth.asm):00072         * if subject to the MONITOR treatment will also carry a code section
                      (        forth.asm):00073         * checksum, although this is not the default behaviour. The checksum will
                      (        forth.asm):00074         * consist in an extra byte added to every word's header. MONITOR and ICHECK
                      (        forth.asm):00075         * will be available whether or not the reliability feature has been configured
                      (        forth.asm):00076         * (see RELFEAT in constants.asm). They will only carry effective semantics
                      (        forth.asm):00077         * if the feature was actually enabled at compilation time. This is meant to
                      (        forth.asm):00078         * support Forth source code that does not depend on the feature vector.
                      (        forth.asm):00079         *
                      (        forth.asm):00080         * Experimental MC146818 RTC support: the feature is disabled by default
                      (        forth.asm):00081         * (see RTCFEAT in constants.asm) because it relies on undocumented schematics.
                      (        forth.asm):00082         * Also, the required underlying circuitry is not intended to ever become an
                      (        forth.asm):00083         * integral part of the Z79Forth reference board itself. Some better designed
                      (        forth.asm):00084         * form of it might eventually surface in the form of an extension specification.
                      (        forth.asm):00085         * At the time of this writing this is just a proof of concept, but whether or
                      (        forth.asm):00086         * not the feature is enabled, three extra words will be added to the dictionary.
                      (        forth.asm):00087         * They are RTC@ RTC! and TICKS They can be safely ignored.
                      (        forth.asm):00088         *
                      (        forth.asm):00089         * Forth source code portability note:
                      (        forth.asm):00090         * Because Z79Forth does not use the return stack to store return addresses,
                      (        forth.asm):00091         * it makes it quite easy to write code that is not readily portable to classic
                      (        forth.asm):00092         * threaded interpretive implementations. The resulting code will be simpler but
                      (        forth.asm):00093         * portability will be limited.
                      (        forth.asm):00094         *
                      (        forth.asm):00095         * Miscellaneous notes: RA stands for return address; EP for entry point.
                      (        forth.asm):00096         * CF is a shortcut for CompactFlash. TOS means top of the data/normal stack.
                      (        forth.asm):00097         * Occasionally, CFA is used for code field address which, in this
                      (        forth.asm):00098         * implementation, is a synonym for compilation address. XT means execution
                      (        forth.asm):00099         * token--the ANSI term for a compilation address. MSC stands for most
                      (        forth.asm):00100         * significant cell; LSC for least significant cell.
                      (        forth.asm):00101         *
                      (        forth.asm):00102         * The complete guide to the HD6309 extended instruction set can be found at:
                      (        forth.asm):00103         * https://cyberabi.ipower.com/Downloads/The_6309_Book.pdf. For convenience,
                      (        forth.asm):00104         * and with the author's explicit agreement, this document has been included
                      (        forth.asm):00105         * in this distribution. This is recommended reading for anyone altering this
                      (        forth.asm):00106         * code or trying to make some sense of it!!!
                      (        forth.asm):00107         *
                      (        forth.asm):00108         * This whole effort started out as a porting endeavour and ended up being a
                      (        forth.asm):00109         * substantial rewrite, trying to take advantage of the features of the 6309
                      (        forth.asm):00110         * as much as possible. The primary goals of this implementation are:
                      (        forth.asm):00111         * reliability, performance and code compactness. A number of bugs in the
                      (        forth.asm):00112         * original code have been fixed--some remain for sure!
                      (        forth.asm):00113         *
                      (        forth.asm):00114         * Obligatory literary reference:
                      (        forth.asm):00115         * "The paper is very heavy going, and I should never have read it, had I not
                      (        forth.asm):00116         * written it myself." John E. Littlewood (1885-1977).
                      (        forth.asm):00117         *
                      (        forth.asm):00118         * The original soundtrack for this work is available at:
                      (        forth.asm):00119         * https://youtu.be/YqXZtGyFyDo?t=4023 (J.S. Bach BWV 1080, contrapunctus 14).
                      (        forth.asm):00120         
0000                  (        forth.asm):00121         pragma  opt cd,operandsizewarning
                      (        forth.asm):00122         
                      (        forth.asm):00123                 include constants.asm
                      (    constants.asm):00001         * Begin tunable parameters section.
                      (    constants.asm):00002         
     0000             (    constants.asm):00003         CSSNTVE equ     0               Words and HEX numbers are case sensitive if NZ
     0001             (    constants.asm):00004         SSDFEAT equ     1               Set to 1 to enable the symbolic stack dump feat.
     0001             (    constants.asm):00005         RELFEAT set     1               Set to 1 to enable the reliability feature
                      (    constants.asm):00006         *                               Caution: when this is enabled, you can no
                      (    constants.asm):00007         *                               longer fit a DEBUG image into an 8 KB EEPROM
     0000             (    constants.asm):00008         RTCFEAT equ     0               Cool but the reliability feature must go...
     0000             (    constants.asm):00009         DEBUG   equ     0               Enforce assertions and miscellaneous checks
     0001             (    constants.asm):00010         HVNMI   equ     1               NMI handler support
     0000             (    constants.asm):00011         HVNMI2  equ     0               NMI handler support (async input debugging)
                      (    constants.asm):00012         * Loop count for MS. This is busy waiting, so we depend on the CPU clock speed.
     031A             (    constants.asm):00013         MSLCNT  equ     794             at 4 MHz native mode
                      (    constants.asm):00014         *MSLCNT equ     994             at 5 MHz native mode
                      (    constants.asm):00015         
                      (    constants.asm):00016         * End tunable parameters section.
                      (    constants.asm):00017         
                      (    constants.asm):00018                 IFNE    RTCFEAT
0000                  (    constants.asm):00019         RELFEAT set     0               RTCFEAT disables RELFEAT
                      (    constants.asm):00020                 ENDC
                      (    constants.asm):00021         
                      (    constants.asm):00022         * Memory map.
     0000             (    constants.asm):00023         RAMSTRT equ     $0000
     8000             (    constants.asm):00024         RAMSIZE equ     $8000
     C000             (    constants.asm):00025         IOSTRT  equ     $C000
     E000             (    constants.asm):00026         ROMSTRT equ     $E000
     FFF0             (    constants.asm):00027         VECTBL  equ     $FFF0
                      (    constants.asm):00028         
                      (    constants.asm):00029         * Base address for global variables (direct page addressed).
     0100             (    constants.asm):00030         VARSPC  equ     $100
                      (    constants.asm):00031         
                      (    constants.asm):00032         * The 74HCT138 (U7) IO address decoder maps one 1 KB area per usable device.
     C000             (    constants.asm):00033         DEV0    equ     $C000           Compact Flash memory module (optional)
     C400             (    constants.asm):00034         DEV1    equ     $C400
     C800             (    constants.asm):00035         DEV2    equ     $C800
     CC00             (    constants.asm):00036         DEV3    equ     $CC00
     D000             (    constants.asm):00037         DEV4    equ     $D000
     D400             (    constants.asm):00038         DEV5    equ     $D400           MC146818 RTC (optional)
     D800             (    constants.asm):00039         DEV6    equ     $D800           HD63B50 unit 0
     DC00             (    constants.asm):00040         DEV7    equ     $DC00
                      (    constants.asm):00041         
     D800             (    constants.asm):00042         ACIACTL equ     DEV6
     D801             (    constants.asm):00043         ACIADAT equ     DEV6+1
                      (    constants.asm):00044         
                      (    constants.asm):00045         * ACIA control register bits.
     0003             (    constants.asm):00046         ACRST   equ     %00000011       ACIA master reset
                      (    constants.asm):00047         
                      (    constants.asm):00048         * 1.84320 MHz Y1: 115200 bps in the direct path, 38400 bps in the DIV3 path
     0001             (    constants.asm):00049         ACDIV16 equ     %00000001       ACIA div 16
                      (    constants.asm):00050         
     0014             (    constants.asm):00051         AC8N1   equ     %00010100       ACIA 8N1
     0000             (    constants.asm):00052         ACRTS0  equ     %00000000       ACIA RTS# low
     0040             (    constants.asm):00053         ACRTS1  equ     %01000000       ACIA RTS# high
     0080             (    constants.asm):00054         ACRDINT equ     %10000000       IRQ on RDRF
                      (    constants.asm):00055         
     0043             (    constants.asm):00056         ACIRSET equ     ACRTS1|ACRST
     00D5             (    constants.asm):00057         ACIRTS1 equ     ACRTS1|ACRDINT|AC8N1|ACDIV16
     0095             (    constants.asm):00058         ACIRTS0 equ     ACRTS0|ACRDINT|AC8N1|ACDIV16
                      (    constants.asm):00059         
                      (    constants.asm):00060         * ACIA status register bits.
     0001             (    constants.asm):00061         ACIRDRF equ     %00000001       Receive data register full
     0002             (    constants.asm):00062         ACITDRE equ     %00000010       Transmit data register empty
     0020             (    constants.asm):00063         ACIOVRN equ     %00100000       Overrun status register bit
     0080             (    constants.asm):00064         ACIISVC equ     %10000000       Interrupt needs servicing
                      (    constants.asm):00065         
                      (    constants.asm):00066         * Compact Flash parameters.
     C000             (    constants.asm):00067         CFBASE  equ     DEV0
     C000             (    constants.asm):00068         CFDATAR equ     CFBASE          R/W data register
     C001             (    constants.asm):00069         CFERROR equ     CFBASE+1        RO error register
     C001             (    constants.asm):00070         CFFEATR equ     CFBASE+1        WO features register
     C002             (    constants.asm):00071         CFSCNTR equ     CFBASE+2        R/W sector count register
     C003             (    constants.asm):00072         CFSNUMR equ     CFBASE+3        R/W sector number register
     C004             (    constants.asm):00073         CFCLOWR equ     CFBASE+4        R/W cylinder low register
     C005             (    constants.asm):00074         CFCHIGR equ     CFBASE+5        R/W cylinder high register
     C006             (    constants.asm):00075         CFDRHDR equ     CFBASE+6        R/W drive/head register
     C007             (    constants.asm):00076         CFSTATR equ     CFBASE+7        RO status register
     C007             (    constants.asm):00077         CFCOMDR equ     CFBASE+7        WO command register
                      (    constants.asm):00078         
                      (    constants.asm):00079         * CF status bits.
     0080             (    constants.asm):00080         CFBSYB  equ     %10000000       BSY status bit
     0040             (    constants.asm):00081         CFRDYB  equ     %01000000       RDY status bit
     0020             (    constants.asm):00082         CFDWFB  equ     %00100000       DWF status bit (not used)
     0010             (    constants.asm):00083         CFDSCB  equ     %00010000       DSC status bit (not used)
     0008             (    constants.asm):00084         CFDRQB  equ     %00001000       DRQ status bit
     0001             (    constants.asm):00085         CFERRB  equ     %00000001       ERR status bit
                      (    constants.asm):00086         
     0200             (    constants.asm):00087         CFSCSZ  equ     $200            Compact Flash (IDE) sector size
                      (    constants.asm):00088         
                      (    constants.asm):00089         * CF commands.
     00EC             (    constants.asm):00090         CFIDDEV equ     $EC             Identify Device
     00EF             (    constants.asm):00091         CFSETFT equ     $EF             Set Feature
     0020             (    constants.asm):00092         CFRSCTS equ     $20             Read Sectors
     0030             (    constants.asm):00093         CFWSCTS equ     $30             Write Sectors
                      (    constants.asm):00094         
                      (    constants.asm):00095         * Buffer in-memory structure:
                      (    constants.asm):00096         * data: 1024 bytes.
                      (    constants.asm):00097         * terminator: 1 byte set to 0.
                      (    constants.asm):00098         * flags: 1 byte.
                      (    constants.asm):00099         * blknum: 2 bytes.
     0001             (    constants.asm):00100         BINUSE  equ     1               Buffer is allocated (the blknum field is valid)
     0002             (    constants.asm):00101         BMAPPD  equ     2               Block has been read from the CF device
     0004             (    constants.asm):00102         BDIRTY  equ     4               Block has been marked for update
     0400             (    constants.asm):00103         BLKSIZ  equ     2*CFSCSZ        Block size is 2 CF sectors (1 KB)
                      (    constants.asm):00104         * Buffer field offsets.
     0400             (    constants.asm):00105         BOTERM  equ     BLKSIZ          Base buffer to the 'terminator' field offset
     0401             (    constants.asm):00106         BOFLAGS equ     BLKSIZ+1        Base buffer to the 'flag' field offset
     0402             (    constants.asm):00107         BOBLKNO equ     BLKSIZ+2        Base buffer to the 'blknum' field offset
                      (    constants.asm):00108         
     0410             (    constants.asm):00109         BFDISP  equ     BUF1-BUF0       Offset between resident buffers
                      (    constants.asm):00110         
                      (    constants.asm):00111         * MC146818 RTC registers.
     D400             (    constants.asm):00112         RTAS    equ     DEV5            Latch target register address offset
     D401             (    constants.asm):00113         RTDS    equ     (DEV5+1)        Actual target register access
                      (    constants.asm):00114         * RTC internal register offsets.
     0000             (    constants.asm):00115         RTOSEC  equ     0               Seconds
     0001             (    constants.asm):00116         RTOSECA equ     1               Seconds alarm
     0002             (    constants.asm):00117         RTOMIN  equ     2               Minutes
     0003             (    constants.asm):00118         RTOMINA equ     3               Minutes alarm
     0004             (    constants.asm):00119         RTOHOUR equ     4               Hours
     0005             (    constants.asm):00120         RTOHRA  equ     5               Hours alarm
     0006             (    constants.asm):00121         RTODOW  equ     6               Day of week
     0007             (    constants.asm):00122         RTODOM  equ     7               Day of month
     0008             (    constants.asm):00123         RTOMON  equ     8               Month
     0009             (    constants.asm):00124         RTOYEAR equ     9               Year
     000A             (    constants.asm):00125         RTOREGA equ     10              Register A
     000B             (    constants.asm):00126         RTOREGB equ     11              Register B
     000C             (    constants.asm):00127         RTOREGC equ     12              Register C
     000D             (    constants.asm):00128         RTOREGD equ     13              Register D
     000E             (    constants.asm):00129         RTOUMB  equ     14              Base of user defined NVRAM storage
     0032             (    constants.asm):00130         RTUMSZ  equ     50              Size of user defined NVRAM storage
     003F             (    constants.asm):00131         RTOPRES equ     (RTOUMB+RTUMSZ-1) RTC NVRAM offset for dectecting dev presence
                      (    constants.asm):00132         
                      (    constants.asm):00133         * Register A bits.
     0080             (    constants.asm):00134         RTAUIP  equ     $80             Update in progress
     0070             (    constants.asm):00135         RTADVRS equ     $70             Divider reset, not in operation
     0020             (    constants.asm):00136         RTADV32 equ     $20             In operation, 32 KHz time base
     000A             (    constants.asm):00137         RTARS64 equ     $A              32 KHz time base, 64 Hz PI (every 15.625 ms)
                      (    constants.asm):00138         
                      (    constants.asm):00139         * Register B bits.
     0080             (    constants.asm):00140         RTBSET  equ     $80
     0040             (    constants.asm):00141         RTBPIE  equ     $40
     0004             (    constants.asm):00142         RTBDM   equ     4               Set to 1 for binary register contents
     0002             (    constants.asm):00143         RTB24   equ     2               Set to 1 for 24 hour format
                      (    constants.asm):00144         
                      (    constants.asm):00145         * Register C bits.
     0040             (    constants.asm):00146         RTCPF   equ     $40             Periodic interrupt pending flag
                      (    constants.asm):00147         
                      (    constants.asm):00148         * ASCII trivia.
     0000             (    constants.asm):00149         NUL     equ     0               End of string marker
     0003             (    constants.asm):00150         ETX     equ     3               Control-C (intr)
     0008             (    constants.asm):00151         BS      equ     8               Backspace
     0009             (    constants.asm):00152         HT      equ     9               Horizontal tab
     000A             (    constants.asm):00153         LF      equ     $0A             Aka new line
     000D             (    constants.asm):00154         CR      equ     $0D             Carriage return
     0015             (    constants.asm):00155         NAK     equ     $15             Control-U (kill)
     0020             (    constants.asm):00156         SP      equ     $20             Aka BL in Forth
     0013             (    constants.asm):00157         XOFF    equ     $13             Aka DC3
     0011             (    constants.asm):00158         XON     equ     $11             Aka DC1
                      (    constants.asm):00159         
                      (    constants.asm):00160         * Stack sizes.
     00C0             (    constants.asm):00161         NSTKSZ  equ     192             Expressed in bytes. Now only limited by RAM size
     0080             (    constants.asm):00162         RSTKSZ  equ     128             Expressed in bytes
                      (    constants.asm):00163         
                      (    constants.asm):00164         * Buffer sizes.
     0084             (    constants.asm):00165         CMDBFSZ equ     132             Command line entry buffer
     0050             (    constants.asm):00166         HEXBFSZ equ     80
     0048             (    constants.asm):00167         TBUFSZ  equ     72              Used by VLIST to print word name and CVNSTR
     0051             (    constants.asm):00168         PADBSZ  equ     1+80            79-STANDARD mandates a minimum of 64 bytes
     0040             (    constants.asm):00169         SERBSZ  equ     64              Serial buffer size. Needs to be a power of 2
                      (    constants.asm):00170         
                      (    constants.asm):00171         * Dictionary flag masks.
     0080             (    constants.asm):00172         IMDFLM  equ     $80             Immediate flag mask
     0040             (    constants.asm):00173         DEFFLM  equ     $40             Compilation only flag mask
                      (    constants.asm):00174                 IFNE    RELFEAT
     0020             (    constants.asm):00175         MONFLM  equ     $20             Monitored flag mask. This indicates that the
                      (    constants.asm):00176         *                               word to which it relates might be checked for
                      (    constants.asm):00177         *                               integrity. This applies by default to all words
                      (    constants.asm):00178         *                               defined with : and all constants. It might
                      (    constants.asm):00179         *                               also apply to any other CREATEd object by
                      (    constants.asm):00180         *                               resorting to the MONITOR word. Using MONITOR
                      (    constants.asm):00181         *                               on variable word contents is guaranteed to
                      (    constants.asm):00182         *                               raise ICHECK's attention.
                      (    constants.asm):00183                 ENDC
                      (    constants.asm):00184         
     001F             (    constants.asm):00185         WRLNMSK equ     $1F             31 character is the maximum word length
                      (    constants.asm):00186         
                      (    constants.asm):00187         * 6309 opcodes.
     008E             (    constants.asm):00188         LDXOPC  equ     $8E             LDX (immediate)
     007E             (    constants.asm):00189         JMPOPC  equ     $7E             JMP (extended)
     00BD             (    constants.asm):00190         JSROPC  equ     $BD             JSR (extended)
     0039             (    constants.asm):00191         RTSOPC  equ     $39             RTS (inherent)
     2503             (    constants.asm):00192         BCSOPC  equ     $2503           BCS *+5 (relative)
     2603             (    constants.asm):00193         BNEOPC  equ     $2603           BNE *+5 (relative)
     00C7             (    constants.asm):00194         ILLOPC  equ     $C7             An illegal operation code. Meant to raise a trap
                      (    constants.asm):00195         
     0001             (    constants.asm):00196         CFLAG   equ     1               CC bit 0 (C)
     0004             (    constants.asm):00197         ZFLAG   equ     4               CC bit 2 (Z)
     0010             (    constants.asm):00198         IFLAG   equ     $10             CC bit 4 (I)
     0040             (    constants.asm):00199         FFLAG   equ     $40             CC bit 6 (F)
                      (    constants.asm):00200         
                      (    constants.asm):00201         * RAM based execution token for @.
     0C64             (    constants.asm):00202         RAMFTCH set     WDICSPC+4       Dictionary header overhead is word's length + 3
                      (    constants.asm):00203                 IFNE    RELFEAT         The reliability features adds one byte to the
     0C65             (    constants.asm):00204         RAMFTCH set     WDICSPC+5       header: a checksum.
                      (    constants.asm):00205                 ENDC
                      (    constants.asm):00206         
                      (        forth.asm):00124         
                      (        forth.asm):00125         * Unchecked NPUSH. This is for situations in which there is absolutely no
                      (        forth.asm):00126         * chance of overflow. For instance, in case we just popped 2 cells and push
                      (        forth.asm):00127         * back one or two.
0000                  (        forth.asm):00128         UCNPUSH MACRO   NOEXPAND
                      (        forth.asm):00129                 pshu    x
                      (        forth.asm):00130                 ENDM
                      (        forth.asm):00131         
                      (        forth.asm):00132         * Unchecked NPOP. To be used only after trusted words have been invoked, i.e.
                      (        forth.asm):00133         * when one is positively sure that the data stack contains at least one cell.
0000                  (        forth.asm):00134         UCNPOP  MACRO   NOEXPAND
                      (        forth.asm):00135                 pulu    x
                      (        forth.asm):00136                 ENDM
                      (        forth.asm):00137         
                      (        forth.asm):00138         * Make sure minimum data stack requirements are satisfied upon word entry.
                      (        forth.asm):00139         * The requirement is expressed in cell size--2 bytes on the 6309.
                      (        forth.asm):00140         * \1 specifies the required number of cells.
0000                  (        forth.asm):00141         MINDREQ MACRO   NOEXPAND
                      (        forth.asm):00142                 ldd     #NSTBOT-(\1*2)  Cell count one expects to be stacked up
                      (        forth.asm):00143                 bra     CHKNDPT         No return if the condition is not met
                      (        forth.asm):00144                 ENDM
                      (        forth.asm):00145         
                      (        forth.asm):00146         * Reliability feature support: execution tokens.
                      (        forth.asm):00147         * \1 has the opcode we want to emit.
                      (        forth.asm):00148         * \2 has the execution token address, as if the header overhead always
                      (        forth.asm):00149         * was 3 bytes.
0000                  (        forth.asm):00150         RFXT    MACRO   NOEXPAND
                      (        forth.asm):00151                 IFNE    RELFEAT
                      (        forth.asm):00152                 \1      \2+1
                      (        forth.asm):00153                 ELSE
                      (        forth.asm):00154                 \1      \2
                      (        forth.asm):00155                 ENDC                    RELFEAT
                      (        forth.asm):00156                 ENDM
                      (        forth.asm):00157         
                      (        forth.asm):00158         * Reliability feature support: variable word header contents.
                      (        forth.asm):00159         * This is a dummy checksum only used for EEPROM resident words.
                      (        forth.asm):00160         * Those never are checked for code integrity by MONITOR.
0000                  (        forth.asm):00161         RFCS    MACRO   NOEXPAND
                      (        forth.asm):00162                 IFNE    RELFEAT
                      (        forth.asm):00163                 fcb     ILLOPC          Illegal opcode
                      (        forth.asm):00164                 ENDC                    RELFEAT
                      (        forth.asm):00165                 ENDM
                      (        forth.asm):00166         
                      (        forth.asm):00167         *******************************************************************************
                      (        forth.asm):00168         * RAM definitions. We cannot initialize globals from the assembly defs.
                      (        forth.asm):00169         * All we can do here is define addresses and size things up.
                      (        forth.asm):00170         
                      (        forth.asm):00171         * RAMSTART is 0. We leave page 0 unused as a bug proof area.
                      (        forth.asm):00172         * When compiled in debug mode, this area is filled with illegal
                      (        forth.asm):00173         * instruction opcodes ($C7).
                      (        forth.asm):00174         
                      (        forth.asm):00175                 org     VARSPC
                      (        forth.asm):00176         
                      (        forth.asm):00177         * Global pointers.
0100                  (        forth.asm):00178         RSP     rmb     2               The return stack pointer
0102                  (        forth.asm):00179         TOKENSP rmb     2               Token start pointer (STRS)
0104                  (        forth.asm):00180         TOKENEP rmb     2               Token end pointer (STRE)
0106                  (        forth.asm):00181         LSTWAD  rmb     2               Last defined word header pointer--LAST
0108                  (        forth.asm):00182         DICEND  rmb     2               Current end of the dictionary--HERE
010A                  (        forth.asm):00183         BLSTWAD rmb     2               Backup (was IX)
010C                  (        forth.asm):00184         BDICEND rmb     2               Backup (was IY)
010E                  (        forth.asm):00185         PLOAD   rmb     2               Word payload if found by SWDIC
0110                  (        forth.asm):00186         FNDPLD  rmb     2               Last code payload reported by FIND
0112                  (        forth.asm):00187         RECADDR rmb     2               Used by RECURSE
0114                  (        forth.asm):00188         JSRLAST rmb     2               Last compilation address of #JSROPC
0116                  (        forth.asm):00189         VLPRVEP rmb     2               Used in VLIST to compute word code length
0118                  (        forth.asm):00190         VLPRVHD rmb     2               Used in VLIST to compute word code length
011A                  (        forth.asm):00191         MRUBUFA rmb     2               Most recently used buffer address
011C                  (        forth.asm):00192         BSBFADR rmb     2               Base buffer address for the input stream
                      (        forth.asm):00193         
                      (        forth.asm):00194         * Global variables.
011E                  (        forth.asm):00195         UBASE   rmb     2               Base for numbers input and output--BASE
0120                  (        forth.asm):00196         USTATE  rmb     2               0 if interpreting, 1 if compiling--STATE
0122                  (        forth.asm):00197         UTOIN   rmb     2               User variable for >IN
0124                  (        forth.asm):00198         UBLK    rmb     2               User variable for BLK
0126                  (        forth.asm):00199         USCR    rmb     2               User variable for SCR (output for LIST)
0128                  (        forth.asm):00200         TIKSHI  rmb     2               RTC clock ticks updated on FIRQ
012A                  (        forth.asm):00201         TIKSLOW rmb     2               RTC clock ticks updated on FIRQ
                      (        forth.asm):00202                 IFNE    DEBUG
012C                  (        forth.asm):00203         CCREG   rmb     2               A DEBUG variable for predicates (see CMP2)
                      (        forth.asm):00204                 ENDC                    DEBUG
                      (        forth.asm):00205                 IFNE    HVNMI
012C                  (        forth.asm):00206         SBDROPC rmb     2               Char. drop count for serial input (see FIRQHDL)
                      (        forth.asm):00207                 ENDC                    HVNMI
012E                  (        forth.asm):00208         BASBKUP rmb     1               BASE backup when a base prefix is in use
012F                  (        forth.asm):00209         CMDLNSZ rmb     1               Entered character count in GETS (INTERP)
0130                  (        forth.asm):00210         RDEPTH  rmb     1               Return stack depth in cells
0131                  (        forth.asm):00211         IRDPTH  rmb     1               Return stack depth when : was last invoked
0132                  (        forth.asm):00212         RTSREMV rmb     1               If > 1, omit the final RTS when compiling
0133                  (        forth.asm):00213         DIVFCN  rmb     1               Flag used by /, MOD and /MOD
0134                  (        forth.asm):00214         F83DIVF rmb     1               FORTH-83 adjusment flag for floored division
0135                  (        forth.asm):00215         STSLFCN rmb     1               Flag used by */, */MOD
0136                  (        forth.asm):00216         CVTFCN  rmb     1               CVT: 0 => # semantics, 1 => #S semantics
0137                  (        forth.asm):00217         ISNEGF  rmb     1               Number being scanned is negative
0138                  (        forth.asm):00218         ISDBLF  rmb     1               Number being scanned is a double
0139                  (        forth.asm):00219         CVISSGN rmb     1               Flag: should CVNSTR consider numbers as signed
013A                  (        forth.asm):00220         CURTOKL rmb     1               Current token length. Set by SWDIC
013B                  (        forth.asm):00221         IMDFLG  rmb     1               Immediate flag
013C                  (        forth.asm):00222         DEFFLG  rmb     1               Define flag
013D                  (        forth.asm):00223         NBCTFB0 rmb     1               NZ if -->/CONTINUED invoked from the console
013E                  (        forth.asm):00224         RTCAVL  rmb     1               NZ if real time clock is present
013F                  (        forth.asm):00225         CFCARDP rmb     1               NZ if CF card present
0140                  (        forth.asm):00226         CFCMMIR rmb     1               Last CF command issued
0141                  (        forth.asm):00227         CFERRCD rmb     1               and the corresponding error code
                      (        forth.asm):00228         
                      (        forth.asm):00229         * Serial buffer parameters. Queing happens on FIRQ.
                      (        forth.asm):00230         * Dequeing occurs when GETCH is invoked.
0142                  (        forth.asm):00231         SERBENQ rmb     1               Enqueue offset
0143                  (        forth.asm):00232         SERBDEQ rmb     1               Dequeue offset
0144                  (        forth.asm):00233         SERBCNT rmb     1               Buffer byte count
0145                  (        forth.asm):00234         XMITOK  rmb     1               Software flow control on output flag
0146                  (        forth.asm):00235         SERBUF  rmb     SERBSZ          The actual buffer
                      (        forth.asm):00236         
0186                  (        forth.asm):00237         PADBUF  rmb     PADBSZ          PAD lives here. Used by <#, #, #S, #>
                      (        forth.asm):00238         
                      (        forth.asm):00239         * The normal (data) stack.
01D7 00               (        forth.asm):00240                 align   2
     01D8             (        forth.asm):00241         NSTTOP  equ     *               U's value when the data stack is full
01D8                  (        forth.asm):00242                 rmb     NSTKSZ
     0298             (        forth.asm):00243         NSTBOT  equ     *               U's value when the data stack is empty
                      (        forth.asm):00244         
                      (        forth.asm):00245         * The return stack.
     0298             (        forth.asm):00246         RSTTOP  equ     *
0298                  (        forth.asm):00247                 rmb     RSTKSZ
     0318             (        forth.asm):00248         RSTBOT  equ     *
                      (        forth.asm):00249         
0318                  (        forth.asm):00250         CMDBUF  rmb     CMDBFSZ
039C                  (        forth.asm):00251         HEXBUF  rmb     HEXBFSZ
                      (        forth.asm):00252         
03EC                  (        forth.asm):00253         TBUFF   rmb     TBUFSZ          Output for CVNSTR
                      (        forth.asm):00254         
0434 0000000000000000 (        forth.asm):00255                 align   16
     00000000
0440                  (        forth.asm):00256         BUF0    rmb     BLKSIZ+4
                      (        forth.asm):00257         
0844 0000000000000000 (        forth.asm):00258                 align   16
     00000000
0850                  (        forth.asm):00259         BUF1    rmb     BLKSIZ+4
                      (        forth.asm):00260         
                      (        forth.asm):00261         *******************************************************************************
                      (        forth.asm):00262         * Writable dictionary section begins right here. We cannot have anything
                      (        forth.asm):00263         * statically defined at this point. Therefore, FORTHIN moves the code for @
                      (        forth.asm):00264         * to this location and sets up DICEND and LSTWAD accordingly. All the RAM
                      (        forth.asm):00265         * beyond this point (after the reallocated @ implementation) is user defined
                      (        forth.asm):00266         * material. Note that builtin words, though they cannot be forgotten (to the
                      (        forth.asm):00267         * extent they are ROM resident--not to mention inter-word dependencies),
                      (        forth.asm):00268         * might still be overridden by user definitions. VLIST will happily ignore
                      (        forth.asm):00269         * that fact and list everything in the dictionary linked list order.
                      (        forth.asm):00270         
0C54 0000000000000000 (        forth.asm):00271                 align   16
     00000000
     0C60             (        forth.asm):00272         WDICSPC equ     *
                      (        forth.asm):00273         
                      (        forth.asm):00274         *******************************************************************************
                      (        forth.asm):00275         * ROM code begins.
                      (        forth.asm):00276         
                      (        forth.asm):00277                 org     ROMSTRT
                      (        forth.asm):00278         * Trap handler: division by zero or illegal opcode. See page 4-10 of "The 6309
                      (        forth.asm):00279         * Book" for a description of interrupt stacks in native 6309 mode.
E000 113C40           (        forth.asm):00280 (4)     IODZHDL bitmd   #$40            Illegal opcode?
E003 2705             (        forth.asm):00281 (3)             beq     @iodzh1
E005 8EFEAB           (        forth.asm):00282 (3)             ldx     #IOPERRM
E008 2008             (        forth.asm):00283 (3)             bra     @iodxh2
E00A 113C80           (        forth.asm):00284 (4)     @iodzh1 bitmd   #$80            Division by zero?
E00D 2726             (        forth.asm):00285 (3)             beq     @iodzh3         And you may ask yourself, well
                      (        forth.asm):00286         *                               How did I get here?
E00F 8EFEC0           (        forth.asm):00287 (3)             ldx     #DV0ERRM
E012 BDE2FB           (        forth.asm):00288 (7)     @iodxh2 jsr     PUTS
E015 EC6C             (        forth.asm):00289 (5+1)           ldd     12,s            Return code address (PC)
E017 108E039C         (        forth.asm):00290 (4)             ldy     #HEXBUF
E01B BDE195           (        forth.asm):00291 (7)             jsr     HDMP4   
E01E 8E039C           (        forth.asm):00292 (3)             ldx     #HEXBUF
E021 BDE2FB           (        forth.asm):00293 (7)             jsr     PUTS
E024 BDE308           (        forth.asm):00294 (7)             jsr     PUTCR
E027 8EE775           (        forth.asm):00295 (3)             ldx     #ERRHD1
E02A AF6C             (        forth.asm):00296 (5+1)           stx     12,s            Resume execution in the error handler
E02C 8EE000           (        forth.asm):00297 (3)             ldx     #IODZHDL
E02F AF68             (        forth.asm):00298 (5+1)           stx     8,s             With Y set to IODZHDL
E031 8603             (        forth.asm):00299 (2)             lda     #3              And user ABORT error code
E033 A762             (        forth.asm):00300 (4+1)           sta     2,s             Passed back through B
E035 3B               (        forth.asm):00301 (17+?)  @iodzh3 rti
                      (        forth.asm):00302         
     E036             (        forth.asm):00303         SWI3HDL equ     *
     E036             (        forth.asm):00304         SWI2HDL equ     *
     E036             (        forth.asm):00305         IRQHDL  equ     *
     E036             (        forth.asm):00306         SWIHDL  equ     *
                      (        forth.asm):00307                 IFEQ    HVNMI
E036                  (        forth.asm):00308         NMIHDL                          These should never happen
                      (        forth.asm):00309                 ENDC
E036 3B               (        forth.asm):00310 (17+?)          rti
                      (        forth.asm):00311         
                      (        forth.asm):00312         * Interrupts are disabled by default upon reset.
                      (        forth.asm):00313         * NMI# will not be "armed" until S is initiliazed.
E037 113D01           (        forth.asm):00314 (5)     RSTHDL  ldmd    #1              Establish 6309 native mode
                      (        forth.asm):00315         
E03A 8643             (        forth.asm):00316 (2)             lda     #ACIRSET
E03C B7D800           (        forth.asm):00317 (4)             sta     ACIACTL         ACIA master reset
E03F 86D5             (        forth.asm):00318 (2)             lda     #ACIRTS1
E041 B7D800           (        forth.asm):00319 (4)             sta     ACIACTL         RTS# high, 8N1
                      (        forth.asm):00320         
E044 8EFE27           (        forth.asm):00321 (3)             ldx     #BOOTMSG        Identity statement
                      (        forth.asm):00322         
                      (        forth.asm):00323         * Send the NUL terminated string pointed to by X to the ACIA.
                      (        forth.asm):00324         * The RAM is not yet assumed to be working.
E047 C602             (        forth.asm):00325 (2)     INIT    ldb     #ACITDRE
E049 A680             (        forth.asm):00326 (4+1)   @init0  lda     ,x+
E04B 270A             (        forth.asm):00327 (3)             beq     RAMCHK          NUL marks the end of the string
E04D F5D800           (        forth.asm):00328 (4)     @init1  bitb    ACIACTL         Wait for TDRE bit to be set
E050 27FB             (        forth.asm):00329 (3)             beq     @init1
E052 B7D801           (        forth.asm):00330 (4)             sta     ACIADAT         Transmit data
E055 20F2             (        forth.asm):00331 (3)             bra     @init0          Next char, if any
                      (        forth.asm):00332         
                      (        forth.asm):00333         * RAM0 32 KB self test (destructive).
E057 8E0000           (        forth.asm):00334 (3)     RAMCHK  ldx     #RAMSTRT
E05A AF84             (        forth.asm):00335 (5+0)   @ramch1 stx     ,x
E05C AC84             (        forth.asm):00336 (5+0)           cmpx    ,x
E05E 2609             (        forth.asm):00337 (3)             bne     RAMFAIL
E060 3002             (        forth.asm):00338 (4+1)           leax    2,x
E062 8C8000           (        forth.asm):00339 (3)             cmpx    #RAMSTRT+RAMSIZE
E065 26F3             (        forth.asm):00340 (3)             bne     @ramch1
E067 2012             (        forth.asm):00341 (3)             bra     RAMOK
                      (        forth.asm):00342         
E069 C680             (        forth.asm):00343 (2)     RAMFAIL ldb     #128
E06B 108E8000         (        forth.asm):00344 (4)     @ramf1  ldy     #$8000
E06F 313F             (        forth.asm):00345 (4+1)   @ramf2  leay    -1,y
E071 26FC             (        forth.asm):00346 (3)             bne     @ramf2
E073 5A               (        forth.asm):00347 (1)             decb
E074 26F5             (        forth.asm):00348 (3)             bne     @ramf1
E076 8EFE92           (        forth.asm):00349 (3)             ldx     #RAMFM
E079 20CC             (        forth.asm):00350 (3)             bra     INIT            Here we go again
                      (        forth.asm):00351         
                      (        forth.asm):00352         * RAM Initialization to all $C7 if DEBUG mode is enabled else zeroes.
E07B 8E0000           (        forth.asm):00353 (3)     RAMOK   ldx     #RAMSTRT
E07E 3101             (        forth.asm):00354 (4+1)           leay    1,x
E080 10867FFF         (        forth.asm):00355 (4)             ldw     #RAMSIZE-1
                      (        forth.asm):00356                 IFNE    DEBUG
                      (        forth.asm):00357                 lda     #ILLOPC
                      (        forth.asm):00358                 sta     ,x
                      (        forth.asm):00359                 ELSE
E084 6F84             (        forth.asm):00360 (6+0)           clr     ,x
                      (        forth.asm):00361                 ENDC                    DEBUG
E086 113812           (        forth.asm):00362 (6+?)           tfm     x+,y+
                      (        forth.asm):00363         
                      (        forth.asm):00364         * Initialize the system stack pointer and the direct page base address register.
E089 10CE8000         (        forth.asm):00365 (4)             lds     #RAMSTRT+RAMSIZE
E08D 8601             (        forth.asm):00366 (2)             lda     #VARSPC/256
E08F 1F8B             (        forth.asm):00367 (4)             tfr     a,dp
     01               (        forth.asm):00368                 SETDP   VARSPC/256
                      (        forth.asm):00369         
                      (        forth.asm):00370         * Serial buffer parameters initialization. We are doing this here because
                      (        forth.asm):00371         * PUTS requires prior software flow control initialization.
                      (        forth.asm):00372                 IFNE    DEBUG
                      (        forth.asm):00373                 clrd
                      (        forth.asm):00374                 std     SERBENQ         Two birds with one stone
                      (        forth.asm):00375                 sta     SERBCNT
                      (        forth.asm):00376                 IFNE    HVNMI
                      (        forth.asm):00377                 std     SBDROPC         Initialize chararacter drop count
                      (        forth.asm):00378                 ENDC                    HVNMI
                      (        forth.asm):00379                 ENDC                    DEBUG
E091 8601             (        forth.asm):00380 (2)             lda     #1              Initialize software flow control on output
E093 9745             (        forth.asm):00381 (3)             sta     XMITOK
                      (        forth.asm):00382         
E095 8EFE82           (        forth.asm):00383 (3)             ldx     #RAMOKM
E098 BDE2FB           (        forth.asm):00384 (7)             jsr     PUTS
E09B BDE361           (        forth.asm):00385 (7)             jsr     FORTHIN         Global variables initialization
E09E BDE8CA           (        forth.asm):00386 (7)             jsr     CFINIT          CompactFlash card initialization
                      (        forth.asm):00387                 IFNE    RTCFEAT
                      (        forth.asm):00388                 jsr     RTCINIT         Real time clock initialization
                      (        forth.asm):00389                 ENDC                    RTCFEAT
                      (        forth.asm):00390         
                      (        forth.asm):00391         * Lower RTS and enable FIRQ.
E0A1 8695             (        forth.asm):00392 (2)             lda     #ACIRTS0
E0A3 B7D800           (        forth.asm):00393 (4)             sta     ACIACTL
E0A6 1CBF             (        forth.asm):00394 (2)             andcc   #^FFLAG
                      (        forth.asm):00395         
E0A8 0D3F             (        forth.asm):00396 (4)             tst     CFCARDP
E0AA 2706             (        forth.asm):00397 (3)             beq     INTERP
                      (        forth.asm):00398         
                      (        forth.asm):00399         * A CF card is present, LOAD block #1.
E0AC 8E0001           (        forth.asm):00400 (3)             ldx     #1
E0AF BDF80A           (        forth.asm):00401 (7)             jsr     LOAD1
                      (        forth.asm):00402         
                      (        forth.asm):00403         * The interpreter main loop.
E0B2 104F             (        forth.asm):00404 (2)     INTERP  clrd
E0B4 DD24             (        forth.asm):00405 (4)             std     UBLK            Interpreting from the console. Set BLK to 0
E0B6 DD22             (        forth.asm):00406 (4)             std     UTOIN
E0B8 8E0318           (        forth.asm):00407 (3)             ldx     #CMDBUF
E0BB 9F1C             (        forth.asm):00408 (4)             stx     BSBFADR
E0BD C683             (        forth.asm):00409 (2)             ldb     #CMDBFSZ-1      NUL terminator is not included in the char count
E0BF BDE31E           (        forth.asm):00410 (7)             jsr     GETS            Acquire command from the console
                      (        forth.asm):00411         * Additional setup in case the ANSI \ is used.
E0C2 D72F             (        forth.asm):00412 (3)             stb     CMDLNSZ         GETS returns the entered character count via B
                      (        forth.asm):00413         * Additional preparation work for block support.
E0C4 0F3D             (        forth.asm):00414 (5)             clr     NBCTFB0         Flag whether -->/CONTINUED is called from blk 0
E0C6 8D02             (        forth.asm):00415 (6)             bsr     _INTERP
E0C8 20E8             (        forth.asm):00416 (3)     MINTLRA bra     INTERP
                      (        forth.asm):00417         
                      (        forth.asm):00418         * The interpreter itself.
E0CA BDE396           (        forth.asm):00419 (7)     _INTERP jsr     SCNSTOK         Scan for the beginning of a word at address X
E0CD 2717             (        forth.asm):00420 (3)             beq     @more0          This is the end
E0CF 1F10             (        forth.asm):00421 (4)             tfr     x,d             Starting token address to D
E0D1 BDE177           (        forth.asm):00422 (7)             jsr     U2INFRD         Derive >IN from D
E0D4 0D21             (        forth.asm):00423 (4)             tst     USTATE+1        We do ignore the upper byte
E0D6 263E             (        forth.asm):00424 (3)             bne     COMP            We are compiling
E0D8 BDE4B1           (        forth.asm):00425 (7)             jsr     SWDIC           Updates TOKENEP, CURTOKL, IMDFLG/DEFFLG
E0DB 2620             (        forth.asm):00426 (3)             bne     @exec           Word found, execute it
E0DD BDE3F1           (        forth.asm):00427 (7)             jsr     NUMCVT
     E0E0             (        forth.asm):00428         NMCVIRA equ     *
E0E0 9E04             (        forth.asm):00429 (4)             ldx     TOKENEP
E0E2 6D84             (        forth.asm):00430 (5+0)   MORE    tst     ,x
E0E4 26E4             (        forth.asm):00431 (3)             bne     _INTERP         Next token, please!
                      (        forth.asm):00432         * End of input stream condition is recognized.
E0E6 DC24             (        forth.asm):00433 (4)     @more0  ldd     UBLK
E0E8 2705             (        forth.asm):00434 (3)             beq     @more1          We are back from the console
E0EA 0D3D             (        forth.asm):00435 (4)             tst     NBCTFB0         -->/CONTINUED invoked from the console?
E0EC 2601             (        forth.asm):00436 (3)             bne     @more1          Yes
E0EE 39               (        forth.asm):00437 (4)             rts                     No, we're done here
E0EF 0F3D             (        forth.asm):00438 (5)     @more1  clr     NBCTFB0         The -->/CONTINUED exception only applies once
E0F1 8EFEA5           (        forth.asm):00439 (3)             ldx     #OKFEEDB        Provide OK feedback
E0F4 0D21             (        forth.asm):00440 (4)             tst     USTATE+1        No OK feedback if we're compiling, just CRLF
E0F6 2702             (        forth.asm):00441 (3)             beq     @more2
E0F8 3003             (        forth.asm):00442 (4+1)           leax    3,x             Skip the ' OK' string when compiling
E0FA 7EE2FB           (        forth.asm):00443 (3)     @more2  jmp     PUTS            Back to whoever invoked us
E0FD 963C             (        forth.asm):00444 (3)     @exec   lda     DEFFLG
E0FF 2705             (        forth.asm):00445 (3)             beq     @introk         Compilation only flag is not set
E101 C606             (        forth.asm):00446 (2)             ldb     #6              Incorrect STATE
E103 BDE772           (        forth.asm):00447 (7)             jsr     ERRHDLR         No return
     E106             (        forth.asm):00448         INTISRA equ     *               For symbolic stack debugging purposes
E106 DC04             (        forth.asm):00449 (4)     @introk ldd     TOKENEP
E108 8D6D             (        forth.asm):00450 (6)             bsr     U2INFRD         Derive >IN from D
E10A 8EE111           (        forth.asm):00451 (3)             ldx     #INTRPRA        The return address
E10D 3410             (        forth.asm):00452 (4+2)           pshs    x
E10F 1F25             (        forth.asm):00453 (4)             tfr     y,pc            An indirect call to Y
E111 BDE847           (        forth.asm):00454 (7)     INTRPRA jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
E114 20CC             (        forth.asm):00455 (3)             bra     MORE
                      (        forth.asm):00456         
                      (        forth.asm):00457         * The compiler.
                      (        forth.asm):00458         * Upon entry TOKENSP has been set by a prior call to SCNSTOK.
E116 BDE4B1           (        forth.asm):00459 (7)     COMP    jsr     SWDIC           Updates TOKENEP, CURTOKL, IMDFLG/DEFFLG
E119 271E             (        forth.asm):00460 (3)             beq     @cmpnum         Word @ TOKENSP is not in the dictionary
E11B 0D3B             (        forth.asm):00461 (4)             tst     IMDFLG
E11D 2712             (        forth.asm):00462 (3)             beq     @notimd
E11F DC04             (        forth.asm):00463 (4)             ldd     TOKENEP
E121 8D54             (        forth.asm):00464 (6)             bsr     U2INFRD         Derive >IN from D
E123 8EE12A           (        forth.asm):00465 (3)             ldx     #COMPLRA        Word is immediate. Execute it.
E126 3410             (        forth.asm):00466 (4+2)           pshs    x               Return to COMPLRA
E128 1F25             (        forth.asm):00467 (4)             tfr     y,pc            An indirect call to Y
E12A BDE847           (        forth.asm):00468 (7)     COMPLRA jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
E12D 9F04             (        forth.asm):00469 (4)             stx     TOKENEP
E12F 20B1             (        forth.asm):00470 (3)             bra     MORE            Branch back to the interpreter
E131 1F21             (        forth.asm):00471 (4)     @notimd tfr     y,x
E133 8D34             (        forth.asm):00472 (6)             bsr     EMXASXT         Emit X as an execution token
E135 9E04             (        forth.asm):00473 (4)     @cmpdon ldx     TOKENEP
E137 20A9             (        forth.asm):00474 (3)             bra     MORE
E139 BDE3F1           (        forth.asm):00475 (7)     @cmpnum jsr     NUMCVT
     E13C             (        forth.asm):00476         NMCVCRA equ     *
E13C 0D38             (        forth.asm):00477 (4)             tst     ISDBLF
E13E 2607             (        forth.asm):00478 (3)             bne     @cmpdbl
E140 3710             (        forth.asm):00479                 UCNPOP                  TOS to X
E142 BDE580           (        forth.asm):00480 (7)             jsr     LITER
E145 20EE             (        forth.asm):00481 (3)             bra     @cmpdon
                      (        forth.asm):00482         * The following is some sort of half baked 2LITERAL.
                      (        forth.asm):00483         * Please note that NUMCVT guarantees us that at least two cells are stacked up.
E147 AE42             (        forth.asm):00484 (5+1)   @cmpdbl ldx     2,u
E149 BDE580           (        forth.asm):00485 (7)             jsr     LITER           LSC
E14C AEC4             (        forth.asm):00486 (5+0)           ldx     ,u
E14E BDE580           (        forth.asm):00487 (7)             jsr     LITER           MSC
E151 3344             (        forth.asm):00488 (4+1)           leau    4,u             2DROP
E153 20E0             (        forth.asm):00489 (3)             bra     @cmpdon
                      (        forth.asm):00490         
                      (        forth.asm):00491         * Check whether the final RTS can be eliminated. It can only be if we have no
                      (        forth.asm):00492         * forward references to HERE when COMPR (;) is invoked. This is a rather
                      (        forth.asm):00493         * complicated matter but this implementation works on the basis that we can do
                      (        forth.asm):00494         * so safely if at least 2 subroutine calls have been issued with a return
                      (        forth.asm):00495         * stack whose depth is equal to IRDPTH, immediately prior to the invokation
                      (        forth.asm):00496         * of COMPR (;).
E155 3402             (        forth.asm):00497 (4+1)   CHKRTS  pshs    a
E157 109F14           (        forth.asm):00498 (5)             sty     JSRLAST         JSRLAST points to the latest JSR code emission
E15A 9630             (        forth.asm):00499 (3)             lda     RDEPTH
E15C 9131             (        forth.asm):00500 (3)             cmpa    IRDPTH          Return stack depth when : was last invoked
E15E 2705             (        forth.asm):00501 (3)             beq     @ckrts1
E160 0F32             (        forth.asm):00502 (5)             clr     RTSREMV
E162 3502             (        forth.asm):00503 (4+1)   @ckrts0 puls    a
E164 39               (        forth.asm):00504 (4)             rts
E165 0C32             (        forth.asm):00505 (5)     @ckrts1 inc     RTSREMV
E167 20F9             (        forth.asm):00506 (3)             bra     @ckrts0
                      (        forth.asm):00507         
                      (        forth.asm):00508         * Emit (in a code generation understanding) X as an execution token.
                      (        forth.asm):00509         * In essence, this simply inserts JSR <X> at HERE.
                      (        forth.asm):00510         * Note: this code provides support for trailing JSR elimination.
                      (        forth.asm):00511         * On input: X has the target execution token.
                      (        forth.asm):00512         * On output: Y will have HERE, A will be altered, X will be preserved.
E169 109E08           (        forth.asm):00513 (5)     EMXASXT ldy     DICEND
E16C 8DE7             (        forth.asm):00514 (6)             bsr     CHKRTS          Check if the final RTS can be omitted
E16E 86BD             (        forth.asm):00515 (2)             lda     #JSROPC         JSR extended
E170 BDE597           (        forth.asm):00516 (7)             jsr     VARCON2         Compile a JSR to the execution token
E173 109F08           (        forth.asm):00517 (5)             sty     DICEND
E176 39               (        forth.asm):00518 (4)             rts
                      (        forth.asm):00519         
                      (        forth.asm):00520         * Derive UTOIN from D's current value. D is altered.
E177 931C             (        forth.asm):00521 (4)     U2INFRD subd    BSBFADR
E179 DD22             (        forth.asm):00522 (4)             std     UTOIN
E17B 39               (        forth.asm):00523 (4)             rts
                      (        forth.asm):00524         
                      (        forth.asm):00525         * Store the HEX representation of the lower nibble of A to Y+.
E17C 3404             (        forth.asm):00526 (4+1)   HEX1D   pshs    b
E17E C630             (        forth.asm):00527 (2)             ldb     #'0
E180 840F             (        forth.asm):00528 (2)             anda    #$0f
E182 810A             (        forth.asm):00529 (2)             cmpa    #10
E184 2502             (        forth.asm):00530 (3)             bcs     @hex1d1
E186 C637             (        forth.asm):00531 (2)             ldb     #'A-10
E188 103098           (        forth.asm):00532 (4)     @hex1d1 addr    b,a
E18B A7A0             (        forth.asm):00533 (4+1)           sta     ,y+
E18D 3504             (        forth.asm):00534 (4+1)           puls    b
E18F 39               (        forth.asm):00535 (4)             rts
                      (        forth.asm):00536         
E190 44               (        forth.asm):00537 (1)     ADIV16  lsra
E191 44               (        forth.asm):00538 (1)             lsra
E192 44               (        forth.asm):00539 (1)             lsra
E193 44               (        forth.asm):00540 (1)             lsra
E194 39               (        forth.asm):00541 (4)             rts
                      (        forth.asm):00542         
                      (        forth.asm):00543         * Hexdump D to 4 bytes starting at Y.  Upon return, Y will point 1 byte
                      (        forth.asm):00544         * after the last character emitted. D is preserved.
E195 3406             (        forth.asm):00545 (4+2)   HDMP4   pshs    d
E197 8DF7             (        forth.asm):00546 (6)             bsr     ADIV16
E199 8DE1             (        forth.asm):00547 (6)             bsr     HEX1D
E19B A6E4             (        forth.asm):00548 (4+0)           lda     ,s
E19D 8DDD             (        forth.asm):00549 (6)             bsr     HEX1D
E19F A661             (        forth.asm):00550 (4+1)           lda     1,s
E1A1 8DED             (        forth.asm):00551 (6)             bsr     ADIV16
E1A3 8DD7             (        forth.asm):00552 (6)             bsr     HEX1D
E1A5 A661             (        forth.asm):00553 (4+1)           lda     1,s
E1A7 8DD3             (        forth.asm):00554 (6)             bsr     HEX1D
E1A9 3506             (        forth.asm):00555 (4+2)           puls    d
E1AB 6FA4             (        forth.asm):00556 (6+0)           clr     ,y
E1AD 39               (        forth.asm):00557 (4)             rts
                      (        forth.asm):00558         
E1AE 3406             (        forth.asm):00559 (4+2)   HDMP2   pshs    d
E1B0 8DDE             (        forth.asm):00560 (6)             bsr     ADIV16
E1B2 8DC8             (        forth.asm):00561 (6)             bsr     HEX1D
E1B4 A6E4             (        forth.asm):00562 (4+0)           lda     ,s
E1B6 8DC4             (        forth.asm):00563 (6)             bsr     HEX1D
E1B8 3506             (        forth.asm):00564 (4+2)           puls    d
E1BA 6FA4             (        forth.asm):00565 (6+0)           clr     ,y
E1BC 39               (        forth.asm):00566 (4)             rts
                      (        forth.asm):00567         
                      (        forth.asm):00568                 IFNE    HVNMI
                      (        forth.asm):00569         * Add string pointed to by X starting at the address stored in Y.
E1BD 3402             (        forth.asm):00570 (4+1)   ADDS    pshs    a
E1BF A680             (        forth.asm):00571 (4+1)   @adds1  lda     ,x+
E1C1 A7A0             (        forth.asm):00572 (4+1)           sta     ,y+
E1C3 26FA             (        forth.asm):00573 (3)             bne     @adds1
E1C5 3502             (        forth.asm):00574 (4+1)           puls    a
E1C7 39               (        forth.asm):00575 (4)             rts
                      (        forth.asm):00576         
E1C8 8DF3             (        forth.asm):00577 (6)     NMI2DM  bsr     ADDS
E1CA 313F             (        forth.asm):00578 (4+1)           leay    -1,y            Backward over NUL
E1CC 20E0             (        forth.asm):00579 (3)             bra     HDMP2
                      (        forth.asm):00580         
E1CE 8DED             (        forth.asm):00581 (6)     NMI4DM  bsr     ADDS
E1D0 313F             (        forth.asm):00582 (4+1)           leay    -1,y            Backward over NUL
E1D2 20C1             (        forth.asm):00583 (3)             bra     HDMP4
                      (        forth.asm):00584         
E1D4 8E03EC           (        forth.asm):00585 (3)     NMIDML  ldx     #TBUFF
E1D7 BDE2FB           (        forth.asm):00586 (7)             jsr     PUTS
E1DA 7EE308           (        forth.asm):00587 (3)             jmp     PUTCR
                      (        forth.asm):00588         
                      (        forth.asm):00589         * All registers are stacked in native mode.
E1DD B6D800           (        forth.asm):00590 (4)     NMIHDL  lda     ACIACTL
E1E0 3402             (        forth.asm):00591 (4+1)           pshs    a
E1E2 9645             (        forth.asm):00592 (3)             lda     XMITOK
E1E4 3402             (        forth.asm):00593 (4+1)           pshs    a
E1E6 8601             (        forth.asm):00594 (2)             lda     #1
E1E8 9745             (        forth.asm):00595 (3)             sta     XMITOK
                      (        forth.asm):00596         * Stack structure at this point
                      (        forth.asm):00597         * 0     saved XMITOK: 1 byte
                      (        forth.asm):00598         * 1     saved ACIA status register: 1 byte
                      (        forth.asm):00599         * 2     CC
                      (        forth.asm):00600         * 3     D
                      (        forth.asm):00601         * 5     W
                      (        forth.asm):00602         * 7     DP
                      (        forth.asm):00603         * 8     X
                      (        forth.asm):00604         * 10    Y
                      (        forth.asm):00605         * 12    U
                      (        forth.asm):00606         * 14    PC
E1EA BDE308           (        forth.asm):00607 (7)             jsr     PUTCR
                      (        forth.asm):00608         
                      (        forth.asm):00609         * First line: CC, D, W, DP, X, Y, U, PC, S
E1ED 108E03EC         (        forth.asm):00610 (4)             ldy     #TBUFF
E1F1 8EE220           (        forth.asm):00611 (3)             ldx     #CCREGM
E1F4 A662             (        forth.asm):00612 (4+1)           lda     2,s             CC in the system stack
E1F6 8DD0             (        forth.asm):00613 (6)             bsr     NMI2DM
                      (        forth.asm):00614         
E1F8 EC63             (        forth.asm):00615 (5+1)           ldd     3,s             D in the system stack
E1FA 8DD2             (        forth.asm):00616 (6)             bsr     NMI4DM
                      (        forth.asm):00617         
E1FC EC65             (        forth.asm):00618 (5+1)           ldd     5,s             X in the system stack
E1FE 8DCE             (        forth.asm):00619 (6)             bsr     NMI4DM
                      (        forth.asm):00620         
E200 A667             (        forth.asm):00621 (4+1)           lda     7,s             DP in the system stack
E202 8DC4             (        forth.asm):00622 (6)             bsr     NMI2DM
                      (        forth.asm):00623         
E204 EC68             (        forth.asm):00624 (5+1)           ldd     8,s             X in the system stack
E206 8DC6             (        forth.asm):00625 (6)             bsr     NMI4DM
                      (        forth.asm):00626         
E208 EC6A             (        forth.asm):00627 (5+1)           ldd     10,s            Y in the system stack
E20A 8DC2             (        forth.asm):00628 (6)             bsr     NMI4DM
                      (        forth.asm):00629         
E20C EC6C             (        forth.asm):00630 (5+1)           ldd     12,s            U in the system stack
E20E 8DBE             (        forth.asm):00631 (6)             bsr     NMI4DM
                      (        forth.asm):00632         
E210 EC6E             (        forth.asm):00633 (5+1)           ldd     14,s            PC in the system stack
E212 8DBA             (        forth.asm):00634 (6)             bsr     NMI4DM
                      (        forth.asm):00635         
E214 33E810           (        forth.asm):00636 (4+1)           leau    16,s            S in the system stack
E217 1F30             (        forth.asm):00637 (4)             tfr     u,d
E219 8DB3             (        forth.asm):00638 (6)             bsr     NMI4DM
                      (        forth.asm):00639         
E21B 8DB7             (        forth.asm):00640 (6)             bsr     NMIDML
                      (        forth.asm):00641         
                      (        forth.asm):00642                 IFNE    HVNMI2
                      (        forth.asm):00643         * Second line: ACIST, XMTOK, SBASE, SBENQ, SBDEQ, SBCNT, SBDROPC
                      (        forth.asm):00644                 ldy     #TBUFF
                      (        forth.asm):00645                 ldx     #ACISTM
                      (        forth.asm):00646                 lda     1,s             ACIA status register in the system stack
                      (        forth.asm):00647                 bsr     NMI2DM
                      (        forth.asm):00648         
                      (        forth.asm):00649                 lda     ,s              XMITOK in the system stack
                      (        forth.asm):00650                 bsr     NMI2DM
                      (        forth.asm):00651         
                      (        forth.asm):00652                 ldd     #SERBUF         SERBUF address
                      (        forth.asm):00653                 bsr     NMI4DM
                      (        forth.asm):00654         
                      (        forth.asm):00655                 lda     SERBENQ         SERBENQ 8 bit offset
                      (        forth.asm):00656                 bsr     NMI2DM
                      (        forth.asm):00657         
                      (        forth.asm):00658                 lda     SERBDEQ         SERBDEQ 8 bit offset
                      (        forth.asm):00659                 bsr     NMI2DM
                      (        forth.asm):00660         
                      (        forth.asm):00661                 lda     SERBCNT
                      (        forth.asm):00662                 bsr     NMI2DM
                      (        forth.asm):00663         
                      (        forth.asm):00664                 ldd     SBDROPC         Number of bytes dropped because SERBUF was full
                      (        forth.asm):00665                 bsr     NMI4DM
                      (        forth.asm):00666         
                      (        forth.asm):00667                 bsr     NMIDML
                      (        forth.asm):00668                 ENDC                    HVNMI2
                      (        forth.asm):00669         
E21D 3262             (        forth.asm):00670 (4+1)           leas    2,s             System stack cleanup
E21F 3B               (        forth.asm):00671 (17+?)          rti
                      (        forth.asm):00672         
E220 43432000         (        forth.asm):00673         CCREGM  fcn     'CC '
E224 20442000         (        forth.asm):00674         DREGM   fcn     ' D '
E228 20572000         (        forth.asm):00675         WREGM   fcn     ' W '
E22C 2044502000       (        forth.asm):00676         DPREGM  fcn     ' DP '
E231 20582000         (        forth.asm):00677         XREGM   fcn     ' X '
E235 20592000         (        forth.asm):00678         YREGM   fcn     ' Y '
E239 20552000         (        forth.asm):00679         UREGM   fcn     ' U '
E23D 2050432000       (        forth.asm):00680         PCREGM  fcn     ' PC '
E242 20532000         (        forth.asm):00681         SREGM   fcn     ' S '
                      (        forth.asm):00682                 IFNE    HVNMI2
E246                  (        forth.asm):00683         ACISTM  fcn     'AS '
E246                  (        forth.asm):00684         XMTOKM  fcn     ' XO '
E246                  (        forth.asm):00685         SBASEM  fcn     ' SB '
E246                  (        forth.asm):00686         SBENQM  fcn     ' EN '
E246                  (        forth.asm):00687         SBSEQM  fcn     ' DE '
E246                  (        forth.asm):00688         SBCNTM  fcn     ' CN '
E246                  (        forth.asm):00689         SBDRPM  fcn     ' DR '
                      (        forth.asm):00690                 ENDC                    HVNMI2
                      (        forth.asm):00691         
                      (        forth.asm):00692                 ENDC                    HVNMI
                      (        forth.asm):00693         
                      (        forth.asm):00694         * Returns the length of the string pointed to by X (terminator excluded) in W.
E246 3410             (        forth.asm):00695 (4+2)   SLEN    pshs    x
E248 105F             (        forth.asm):00696 (2)             clrw
E24A 105C             (        forth.asm):00697 (2)     @slen1  incw
E24C A680             (        forth.asm):00698 (4+1)           lda     ,x+
E24E 26FA             (        forth.asm):00699 (3)             bne     @slen1
E250 105A             (        forth.asm):00700 (2)             decw
E252 3510             (        forth.asm):00701 (4+2)           puls    x
E254 39               (        forth.asm):00702 (4)             rts
                      (        forth.asm):00703         
                      (        forth.asm):00704                 include console.asm
                      (      console.asm):00001         * FIRQ interrupt handler. This is entered on RDRF (input available).
E255 3416             (      console.asm):00002 (4+4)   FIRQHDL pshs    x,d
                      (      console.asm):00003                 IFNE    RTCFEAT
                      (      console.asm):00004                 jsr     RTCIHDL         Check for RTC periodic interrupt
                      (      console.asm):00005                 ENDC                    RTCFEAT
E257 B6D800           (      console.asm):00006 (4)             lda     ACIACTL
E25A 8580             (      console.asm):00007 (2)             bita    #ACIISVC        Does the ACIA need input service?
E25C 2731             (      console.asm):00008 (3)             beq     @nsintr         No. This is not the IRQ source we're looking for
                      (      console.asm):00009                 IFNE    DEBUG
                      (      console.asm):00010                 bita    #ACIRDRF
                      (      console.asm):00011                 beq     @nsintr         ACIA RDRF status bit should be set in all cases
                      (      console.asm):00012                 bita    #ACIOVRN        ACIA data overrun on read?
                      (      console.asm):00013                 beq     @datval         No, incoming data is valid
                      (      console.asm):00014                 ldb     ACIADAT         Clear overrun bit and INTACK
                      (      console.asm):00015                 ldb     #'%             Error indicating character is %
                      (      console.asm):00016                 bra     @chkovf
                      (      console.asm):00017                 ENDC                    DEBUG
                      (      console.asm):00018         * Out of band characters processing.
E25E F6D801           (      console.asm):00019 (4)     @datval ldb     ACIADAT         Incoming data byte to B and INTACK
E261 C103             (      console.asm):00020 (2)             cmpb    #ETX            Control-C?
E263 272D             (      console.asm):00021 (3)             beq     @sigint         Yes
E265 C113             (      console.asm):00022 (2)             cmpb    #XOFF
E267 2742             (      console.asm):00023 (3)             beq     @outngo         Output is being suspended
E269 C111             (      console.asm):00024 (2)             cmpb    #XON
E26B 2741             (      console.asm):00025 (3)             beq     @outok          Output is being re-enabled
E26D 9644             (      console.asm):00026 (3)     @chkovf lda     SERBCNT
E26F 810F             (      console.asm):00027 (2)             cmpa    #15             At high water level mark?
E271 2609             (      console.asm):00028 (3)             bne     @sbenq          No, proceed without negating RTS#
E273 3404             (      console.asm):00029 (4+1)           pshs    b
E275 C6D5             (      console.asm):00030 (2)             ldb     #ACIRTS1
E277 F7D800           (      console.asm):00031 (4)             stb     ACIACTL         Negate RTS#
E27A 3504             (      console.asm):00032 (4+1)           puls    b
E27C 8140             (      console.asm):00033 (2)     @sbenq  cmpa    #SERBSZ
                      (      console.asm):00034                 IFNE    HVNMI
E27E 2734             (      console.asm):00035 (3)             beq     @nsdrop         Serial input buffer physically full
                      (      console.asm):00036                 ELSE
                      (      console.asm):00037                 beq     @nsintr         Serial input buffer physically full
                      (      console.asm):00038                 ENDC                    HVNMI
E280 4C               (      console.asm):00039 (1)             inca
E281 9744             (      console.asm):00040 (3)             sta     SERBCNT         Update incoming FIFO byte count
E283 8E0146           (      console.asm):00041 (3)             ldx     #SERBUF
E286 9642             (      console.asm):00042 (3)             lda     SERBENQ         Enqueue offset to A
E288 E786             (      console.asm):00043 (4+1)           stb     a,x             Enqueue incoming character
E28A 4C               (      console.asm):00044 (1)             inca
E28B 843F             (      console.asm):00045 (2)             anda    #SERBSZ-1       Modulo arithmetic
E28D 9742             (      console.asm):00046 (3)             sta     SERBENQ
E28F 3516             (      console.asm):00047 (4+4)   @nsintr puls    d,x
E291 3B               (      console.asm):00048 (17+?)          rti
                      (      console.asm):00049         * Control-C was recognized.
E292 3264             (      console.asm):00050 (4+1)   @sigint leas    4,s             Drop D and X
E294 9643             (      console.asm):00051 (3)             lda     SERBDEQ
E296 9742             (      console.asm):00052 (3)             sta     SERBENQ
E298 0F44             (      console.asm):00053 (5)             clr     SERBCNT         Serial input buffer has been emptied
E29A BDEB80           (      console.asm):00054                 RFXT    jsr,NCLR+7      Clear the data stack
E29D BDEB8C           (      console.asm):00055                 RFXT    jsr,RCLR+7      and the return stack
E2A0 10AE61           (      console.asm):00056 (6+1)           ldy     1,s             Saved PC from the FIRQ stack
E2A3 8EE775           (      console.asm):00057 (3)             ldx     #ERRHD1
E2A6 AF61             (      console.asm):00058 (5+1)           stx     1,s             Execution continues in the error handler
E2A8 C603             (      console.asm):00059 (2)             ldb     #3              with ABORT error code passed through B
E2AA 3B               (      console.asm):00060 (17+?)          rti
E2AB 4F               (      console.asm):00061 (1)     @outngo clra
E2AC 2002             (      console.asm):00062 (3)             bra     @sxmsta
E2AE 8601             (      console.asm):00063 (2)     @outok  lda     #1
E2B0 9745             (      console.asm):00064 (3)     @sxmsta sta     XMITOK          Update XMIT status flag
E2B2 20DB             (      console.asm):00065 (3)             bra     @nsintr
                      (      console.asm):00066                 IFNE    HVNMI
                      (      console.asm):00067         * Increment character drop count (displayed by NMIHDL).
E2B4 DC2C             (      console.asm):00068 (4)     @nsdrop ldd     SBDROPC
E2B6 104C             (      console.asm):00069 (2)             incd
E2B8 DD2C             (      console.asm):00070 (4)             std     SBDROPC
E2BA 20D3             (      console.asm):00071 (3)             bra     @nsintr
                      (      console.asm):00072                 ENDC                    HVNMI
                      (      console.asm):00073         
                      (      console.asm):00074         * We do not have to talk to the ACIA directly, unless SERBCNT is zero,
                      (      console.asm):00075         * in which case we have to lower RTS#, so as to accept incoming characters.
                      (      console.asm):00076         * This can only be called from base level!
E2BC 3416             (      console.asm):00077 (4+4)   GETCH   pshs    x,d
E2BE 0D44             (      console.asm):00078 (4)     @again  tst     SERBCNT
E2C0 260F             (      console.asm):00079 (3)             bne     @sbdind         We have incoming material
E2C2 C695             (      console.asm):00080 (2)             ldb     #ACIRTS0
E2C4 F7D800           (      console.asm):00081 (4)             stb     ACIACTL         Assert RTS#
E2C7 1CBF             (      console.asm):00082 (2)             andcc   #^FFLAG         Unmask FIRQ
E2C9 8E0001           (      console.asm):00083 (3)             ldx     #1
E2CC BDF893           (      console.asm):00084 (7)             jsr     MILLIS1         Busy waiting for one millisecond
E2CF 20ED             (      console.asm):00085 (3)             bra     @again          Try again
                      (      console.asm):00086         * Serial buffer data indication.
E2D1 1A40             (      console.asm):00087 (2)     @sbdind orcc    #FFLAG          Mask FIRQ
E2D3 0A44             (      console.asm):00088 (5)             dec     SERBCNT
E2D5 1CBF             (      console.asm):00089 (2)             andcc   #^FFLAG         Unmask FIRQ
E2D7 8E0146           (      console.asm):00090 (3)             ldx     #SERBUF
E2DA 9643             (      console.asm):00091 (3)             lda     SERBDEQ         Dequeue offset to A
E2DC E686             (      console.asm):00092 (4+1)           ldb     a,x             Buffered input character to B
E2DE E7E4             (      console.asm):00093 (4+0)           stb     ,s              Incoming character to A in the caller's stack
E2E0 4C               (      console.asm):00094 (1)             inca
E2E1 843F             (      console.asm):00095 (2)             anda    #SERBSZ-1       Modulo arithmetic
E2E3 9743             (      console.asm):00096 (3)             sta     SERBDEQ
E2E5 3516             (      console.asm):00097 (4+4)           puls    d,x             Same as it ever was
E2E7 39               (      console.asm):00098 (4)             rts
                      (      console.asm):00099         
E2E8 3404             (      console.asm):00100 (4+1)   PUTCH   pshs    b
E2EA C602             (      console.asm):00101 (2)             ldb     #ACITDRE
E2EC F5D800           (      console.asm):00102 (4)     @tdrdrn bitb    ACIACTL
E2EF 27FB             (      console.asm):00103 (3)             beq     @tdrdrn         Drain the transmit data register
E2F1 0D45             (      console.asm):00104 (4)     @wfxon  tst     XMITOK          Software flow control on output
E2F3 27FC             (      console.asm):00105 (3)             beq     @wfxon          Wait for XON
E2F5 B7D801           (      console.asm):00106 (4)             sta     ACIADAT         Transmit data
E2F8 3504             (      console.asm):00107 (4+1)           puls    b
E2FA 39               (      console.asm):00108 (4)             rts
                      (      console.asm):00109         
                      (      console.asm):00110         * Send NUL terminated string pointed to by X to the ACIA.
E2FB 3416             (      console.asm):00111 (4+4)   PUTS    pshs    x,d
E2FD A680             (      console.asm):00112 (4+1)   @puts1  lda     ,x+
E2FF 2704             (      console.asm):00113 (3)             beq     @puts2         NUL marks the end of the string
E301 8DE5             (      console.asm):00114 (6)             bsr     PUTCH
E303 20F8             (      console.asm):00115 (3)             bra     @puts1
E305 3516             (      console.asm):00116 (4+4)   @puts2  puls    d,x
E307 39               (      console.asm):00117 (4)             rts
                      (      console.asm):00118         
E308 3410             (      console.asm):00119 (4+2)   PUTCR   pshs    x
E30A 8EFE8F           (      console.asm):00120 (3)             ldx     #CRLFSTR
E30D 8DEC             (      console.asm):00121 (6)             bsr     PUTS
E30F 3510             (      console.asm):00122 (4+2)           puls    x
E311 39               (      console.asm):00123 (4)             rts
                      (      console.asm):00124         
E312 8608             (      console.asm):00125 (2)     _BS     lda     #BS
E314 8DD2             (      console.asm):00126 (6)             bsr     PUTCH          Output BS
E316 8620             (      console.asm):00127 (2)             lda     #SP
E318 8DCE             (      console.asm):00128 (6)             bsr     PUTCH          Clear character
E31A 8608             (      console.asm):00129 (2)             lda     #BS
E31C 20CA             (      console.asm):00130 (3)             bra     PUTCH          And go back again
                      (      console.asm):00131         
                      (      console.asm):00132         * Receive CR terminated string and store it to X.
                      (      console.asm):00133         * Upon entry B contains the receiving buffer length.
                      (      console.asm):00134         * (excluding the NUL terminator). On exit, B will
                      (      console.asm):00135         * contain the number of characters entered (excluding
                      (      console.asm):00136         * the trailing NUL). A and X are preserved. B will
                      (      console.asm):00137         * have the actual number of characters entered.
                      (      console.asm):00138         * Implementation of $05D9 in the TRS-80 Level II ROM.
E31E C102             (      console.asm):00139 (2)     GETS    cmpb    #2
E320 2401             (      console.asm):00140 (3)             bhs     @gets0          B must be 2 or more
E322 39               (      console.asm):00141 (4)             rts
E323 3416             (      console.asm):00142 (4+4)   @gets0  pshs    x,d
E325 8D95             (      console.asm):00143 (6)     @gets1  bsr     GETCH
E327 8108             (      console.asm):00144 (2)             cmpa    #BS             Backspace?
E329 260B             (      console.asm):00145 (3)             bne     @gets3
E32B E161             (      console.asm):00146 (4+1)           cmpb    1,s             B upon routine entry
E32D 27F6             (      console.asm):00147 (3)             beq     @gets1          Do not go beyond the beginning of the buffer
E32F 8DE1             (      console.asm):00148 (6)             bsr     _BS
E331 301F             (      console.asm):00149 (4+1)           leax    -1,x
E333 5C               (      console.asm):00150 (1)             incb
E334 20EF             (      console.asm):00151 (3)             bra     @gets1
E336 8115             (      console.asm):00152 (2)     @gets3  cmpa    #NAK            Kill input?
E338 260B             (      console.asm):00153 (3)             bne     @gets5
                      (      console.asm):00154         * While B != 1,S (initial buffer length), decrement X, increment B.
E33A E161             (      console.asm):00155 (4+1)   @gets4  cmpb    1,s
E33C 27E7             (      console.asm):00156 (3)             beq     @gets1
E33E 8DD2             (      console.asm):00157 (6)             bsr     _BS
E340 301F             (      console.asm):00158 (4+1)           leax     -1,x
E342 5C               (      console.asm):00159 (1)             incb
E343 20F5             (      console.asm):00160 (3)             bra     @gets4
                      (      console.asm):00161         * Regular input handling: echo input character.
E345 810D             (      console.asm):00162 (2)     @gets5  cmpa    #CR
E347 2709             (      console.asm):00163 (3)             beq     @gets6          Minicom only sends CR
E349 8D9D             (      console.asm):00164 (6)             bsr     PUTCH
E34B A780             (      console.asm):00165 (4+1)           sta     ,x+
E34D 5A               (      console.asm):00166 (1)             decb
E34E C101             (      console.asm):00167 (2)             cmpb    #1              End of buffer reached?
E350 26D3             (      console.asm):00168 (3)             bne     @gets1
E352 8620             (      console.asm):00169 (2)     @gets6  lda     #SP
E354 8D92             (      console.asm):00170 (6)             bsr     PUTCH
E356 6F84             (      console.asm):00171 (6+0)           clr     ,x
E358 1F10             (      console.asm):00172 (4)             tfr     x,d
E35A A362             (      console.asm):00173 (5+1)           subd    2,s             Actual number of characters entered
E35C E761             (      console.asm):00174 (4+1)           stb     1,s             Stored to B (through the system stack).         
E35E 3516             (      console.asm):00175 (4+4)           puls    d,x
E360 39               (      console.asm):00176 (4)             rts
                      (      console.asm):00177         
                      (        forth.asm):00705         
E361 BDEB80           (        forth.asm):00706         FORTHIN RFXT    jsr,NCLR+7      XT for NCLR. Set up the normal stack
E364 BDEB8C           (        forth.asm):00707                 RFXT    jsr,RCLR+7      XT for RCLR. Set up the return stack
                      (        forth.asm):00708         * Relocate '@' code to RAM and set it up as the last dictionary entry (RO).
E367 8EFE12           (        forth.asm):00709 (3)             ldx     #THEEND         Source address for tfm
E36A 1086000D         (        forth.asm):00710 (4)             ldw     #(REALEND-THEEND) Byte count for tfm
E36E 108E0C60         (        forth.asm):00711 (4)             ldy     #WDICSPC        Destination address for tfm
E372 109F06           (        forth.asm):00712 (5)             sty     LSTWAD
E375 113812           (        forth.asm):00713 (6+?)           tfm     x+,y+
E378 109F08           (        forth.asm):00714 (5)             sty     DICEND
                      (        forth.asm):00715                 IFNE    RELFEAT
E37B BDECA0           (        forth.asm):00716                 RFXT    jsr,MONITOR+10  XT for MONITOR (monitor @ in RAM)
                      (        forth.asm):00717                 ENDC                    RELFEAT
E37E 8D03             (        forth.asm):00718 (6)             bsr     EMPTYB          Buffer related initializations
                      (        forth.asm):00719                 IFNE    DEBUG
                      (        forth.asm):00720                 clrd
                      (        forth.asm):00721                 std     USTATE          Initial mode is interpretation
                      (        forth.asm):00722                 std     USCR            Clear SCR
                      (        forth.asm):00723                 std     UBLK            Clear BLK
                      (        forth.asm):00724                 std     UTOIN           Clear >IN
                      (        forth.asm):00725                 ENDC                    DEBUG
E380 7EFB8A           (        forth.asm):00726                 RFXT    jmp,DECIMAL+10  XT for DECIMAL. Default base is decimal
                      (        forth.asm):00727         
E383 8E0440           (        forth.asm):00728 (3)     EMPTYB  ldx     #BUF0
E386 8D03             (        forth.asm):00729 (6)             bsr     EMPT1B
E388 8E0850           (        forth.asm):00730 (3)             ldx     #BUF1
                      (        forth.asm):00731         * Empty the buffer pointed to by X.
E38B 9F1A             (        forth.asm):00732 (4)     EMPT1B  stx     MRUBUFA         Update most recently used buffer address
E38D 30890400         (        forth.asm):00733 (4+3)           leax    BOTERM,x        Buffer offset to the terminator field
E391 104F             (        forth.asm):00734 (2)             clrd
E393 ED84             (        forth.asm):00735 (5+0)           std     ,x              Clear terminator and flags fields
                      (        forth.asm):00736                 IFNE    DEBUG
                      (        forth.asm):00737                 ldd     #$C7C7
                      (        forth.asm):00738                 std     2,x             Dummy block number
                      (        forth.asm):00739                 ENDC                    DEBUG
E395 39               (        forth.asm):00740 (4)             rts
                      (        forth.asm):00741         
                      (        forth.asm):00742         * Scan for the next non-space character pointed to by X.
                      (        forth.asm):00743         * That character is returned through A. Flags are set accordingly.
E396 A680             (        forth.asm):00744 (4+1)   SCNSTOK lda     ,x+
E398 2704             (        forth.asm):00745 (3)             beq     @scstk1
E39A 8120             (        forth.asm):00746 (2)             cmpa    #SP
E39C 27F8             (        forth.asm):00747 (3)             beq     SCNSTOK
E39E 301F             (        forth.asm):00748 (4+1)   @scstk1 leax    -1,x            Keep X pointing at the beginning of the token
E3A0 9F02             (        forth.asm):00749 (4)             stx     TOKENSP
E3A2 4D               (        forth.asm):00750 (1)             tsta                    Have to test again because LEA affects Z
E3A3 39               (        forth.asm):00751 (4)             rts
                      (        forth.asm):00752         
                      (        forth.asm):00753         * Scan for the next white space character (or NUL) as an end of token marker.
                      (        forth.asm):00754         * Upon entry:
                      (        forth.asm):00755         * - X points to the input stream.
                      (        forth.asm):00756         * Upon return:
                      (        forth.asm):00757         * - X will point to the next space character or NUL.
                      (        forth.asm):00758         * - CURTOKL will hold the current token length (returned in B).
                      (        forth.asm):00759         * - TOKENEP will point to the end of the current token.
E3A4 5F               (        forth.asm):00760 (1)     SCNETOK clrb
E3A5 5C               (        forth.asm):00761 (1)     @scetok incb
E3A6 A680             (        forth.asm):00762 (4+1)           lda     ,x+
E3A8 2704             (        forth.asm):00763 (3)             beq     @scetk1
E3AA 8120             (        forth.asm):00764 (2)             cmpa    #SP
E3AC 26F7             (        forth.asm):00765 (3)             bne     @scetok
E3AE 301F             (        forth.asm):00766 (4+1)   @scetk1 leax    -1,x            Keep X pointing at the end of the token
E3B0 9F04             (        forth.asm):00767 (4)             stx     TOKENEP
E3B2 5A               (        forth.asm):00768 (1)             decb
E3B3 D73A             (        forth.asm):00769 (3)             stb     CURTOKL
E3B5 39               (        forth.asm):00770 (4)             rts
                      (        forth.asm):00771         
                      (        forth.asm):00772         * Check for numeric literal BASE prefix. On entry X has the input stream
                      (        forth.asm):00773         * pointer. On exit, BASE is altered if needed and the original BASE saved
                      (        forth.asm):00774         * to BASBKUP. If BASE was not changed, BASBKUP will be zero.
                      (        forth.asm):00775         * D is altered, X is updated if a BASE prefix is detected, other registers
                      (        forth.asm):00776         * are untouched.
E3B6 E684             (        forth.asm):00777 (4+0)   CKNBPFX ldb     ,x              B has a potential base prefix character
E3B8 3410             (        forth.asm):00778 (4+2)           pshs    x
E3BA 8EFFE5           (        forth.asm):00779 (3)             ldx     #BASALST        A associative list (A-list) of BASE prefixes
E3BD A681             (        forth.asm):00780 (4+2)   @pflkup lda     ,x++            Potential BASE prefix character to A
E3BF 2707             (        forth.asm):00781 (3)             beq     @nopfix         Reached the end of the A-list. No prefix found
E3C1 103798           (        forth.asm):00782 (4)             cmpr    b,a             Prefix match?
E3C4 2707             (        forth.asm):00783 (3)             beq     @pfxfnd         Yes
E3C6 20F5             (        forth.asm):00784 (3)             bra     @pflkup
E3C8 0F2E             (        forth.asm):00785 (5)     @nopfix clr     BASBKUP         Nothing to be restored to BASE
E3CA 3510             (        forth.asm):00786 (4+2)           puls    x
E3CC 39               (        forth.asm):00787 (4)             rts
E3CD 961F             (        forth.asm):00788 (3)     @pfxfnd lda     UBASE+1
E3CF 972E             (        forth.asm):00789 (3)             sta     BASBKUP         Back up the current BASE value
E3D1 A61F             (        forth.asm):00790 (4+1)           lda     -1,x            The BASE specified by the prefix
E3D3 971F             (        forth.asm):00791 (3)             sta     UBASE+1         Update BASE
E3D5 3510             (        forth.asm):00792 (4+2)           puls    x
E3D7 3001             (        forth.asm):00793 (4+1)           leax    1,x             Skip the prefix from the input stream
E3D9 39               (        forth.asm):00794 (4)             rts
                      (        forth.asm):00795         
                      (        forth.asm):00796         * Restore BASE if a numeric literal BASE prefix was detected.
                      (        forth.asm):00797         * X is to be preserved at all cost!
E3DA 962E             (        forth.asm):00798 (3)     RSBSPFX lda     BASBKUP
E3DC 2702             (        forth.asm):00799 (3)             beq     @theend
E3DE 971F             (        forth.asm):00800 (3)             sta     UBASE+1
E3E0 39               (        forth.asm):00801 (4)     @theend rts
                      (        forth.asm):00802         
                      (        forth.asm):00803         * Check whether BASE is in the supported range ([2..36]).
E3E1 961F             (        forth.asm):00804 (3)     CKBASE  lda     UBASE+1         BASE
E3E3 8102             (        forth.asm):00805 (2)             cmpa    #2
E3E5 2505             (        forth.asm):00806 (3)             blo     @ckbser         Must be >= 2
E3E7 8124             (        forth.asm):00807 (2)             cmpa    #36
E3E9 2201             (        forth.asm):00808 (3)             bhi     @ckbser         And <= 36 (the ANSI maximum)
E3EB 39               (        forth.asm):00809 (4)             rts
E3EC C60F             (        forth.asm):00810 (2)     @ckbser ldb     #15             Invalid BASE
E3EE BDE772           (        forth.asm):00811 (7)             jsr     ERRHDLR         No return
     E3F1             (        forth.asm):00812         CKBASRA equ     *
                      (        forth.asm):00813         
                      (        forth.asm):00814         * NUMCVT performs a signed string to number conversion. The input string is
                      (        forth.asm):00815         * acquired from the input stream. Note that this routine always is called
                      (        forth.asm):00816         * after a dictionary lookup (SWDIC), so TOKENSP and CURTOKL are guaranteed
                      (        forth.asm):00817         * to have been set previously. There are two ways out this routine:
                      (        forth.asm):00818         * - redirection to the error handler (Undefined word), or
                      (        forth.asm):00819         * - a converted cell or double cell returned through the data stack.
                      (        forth.asm):00820         *   Upon return, ISDBLF being NZ will indicate a double.
E3F1 8DEE             (        forth.asm):00821 (6)     NUMCVT  bsr     CKBASE          No return if BASE isn't in the [2..36] range
E3F3 0F37             (        forth.asm):00822 (5)             clr     ISNEGF          Assume the result is positive
E3F5 0F38             (        forth.asm):00823 (5)             clr     ISDBLF          Assume the result is not a double number
E3F7 9E02             (        forth.asm):00824 (4)             ldx     TOKENSP
E3F9 8DBB             (        forth.asm):00825 (6)             bsr     CKNBPFX         Check for numeric literal BASE prefix
                      (        forth.asm):00826         * Check for optional minus sign.
E3FB A684             (        forth.asm):00827 (4+0)           lda     ,x
E3FD 812D             (        forth.asm):00828 (2)             cmpa    #'-
E3FF 2604             (        forth.asm):00829 (3)             bne     @ncini
E401 0C37             (        forth.asm):00830 (5)             inc     ISNEGF          Remember to negate the result before returning
E403 3001             (        forth.asm):00831 (4+1)           leax    1,x             Skip the negativity!
E405 1F12             (        forth.asm):00832 (4)     @ncini  tfr     x,y             Backup input stream pointer
E407 1FC1             (        forth.asm):00833 (4)             tfr     0,x             Initialize the result
E409 BDE7F3           (        forth.asm):00834 (7)             jsr     NPUSH           LSC
E40C BDE7F3           (        forth.asm):00835 (7)             jsr     NPUSH           MSC
E40F 1F21             (        forth.asm):00836 (4)             tfr     y,x             Restore the input stream pointer
E411 301F             (        forth.asm):00837 (4+1)           leax    -1,x
E413 BDE7F3           (        forth.asm):00838 (7)             jsr     NPUSH           Base scanning address minus 1
E416 BDF4F6           (        forth.asm):00839                 RFXT    jsr,CONVERT+10
                      (        forth.asm):00840         * Upon return TOS C@ should be BL, NUL or . Anything else indicates an error.
                      (        forth.asm):00841         * In any case, at this point, at least three cells are on the data stack.
E419 3710             (        forth.asm):00842                 UCNPOP                  Address of the last non convertible char to X
E41B A684             (        forth.asm):00843 (4+0)           lda     ,x
E41D 270A             (        forth.asm):00844 (3)             beq     @ncadj          NUL is acceptable
E41F 8120             (        forth.asm):00845 (2)             cmpa    #SP
E421 2706             (        forth.asm):00846 (3)             beq     @ncadj          So is BL
E423 812E             (        forth.asm):00847 (2)             cmpa    #'.             Was a double number meant?
E425 2618             (        forth.asm):00848 (3)             bne     @ncnogo         No, we do not have a winner...
E427 0C38             (        forth.asm):00849 (5)             inc     ISDBLF
                      (        forth.asm):00850         * If Z is not set at this point, we are dealing with a double number.
E429 260B             (        forth.asm):00851 (3)     @ncadj  bne     @ncdadj 
E42B 3710             (        forth.asm):00852                 UCNPOP                  Drop the MSC
E42D 0D37             (        forth.asm):00853 (4)             tst     ISNEGF          Are we dealing with a negative number?
E42F 27A9             (        forth.asm):00854 (3)             beq     RSBSPFX         No. Restore BASE if needed--the end
E431 BDEFCC           (        forth.asm):00855                 RFXT    jsr,NEGATE+9    Acknowledge the negativity
E434 20A4             (        forth.asm):00856 (3)             bra     RSBSPFX         Restore BASE if needed--the end
E436 0D37             (        forth.asm):00857 (4)     @ncdadj tst     ISNEGF          Are we dealing with a negative number?
E438 27A0             (        forth.asm):00858 (3)             beq     RSBSPFX         No. Restore BASE if needed--the end
E43A BDF403           (        forth.asm):00859                 RFXT    jsr,DNEG+10     Acknowledge the negativity
E43D 209B             (        forth.asm):00860 (3)             bra     RSBSPFX         Restore BASE if needed--the end
E43F 3344             (        forth.asm):00861 (4+1)   @ncnogo leau    4,u             Drop two cells from the data stack
E441 9E02             (        forth.asm):00862 (4)             ldx     TOKENSP         Beginning address of the current token
E443 C602             (        forth.asm):00863 (2)             ldb     #2              Undefined (X points to the offending word)
E445 BDE772           (        forth.asm):00864 (7)             jsr     ERRHDLR         No return
     E448             (        forth.asm):00865         NUMCVRA equ     *               For symbolic stack dump purposes
E448 12               (        forth.asm):00866 (1)             nop
                      (        forth.asm):00867         
                      (        forth.asm):00868         * Convert number stored in X to a string (depending on BASE value).
                      (        forth.asm):00869         * Output is stored in the global TBUFF buffer. X is preserved.
E449 8D96             (        forth.asm):00870 (6)     CVNSTR  bsr     CKBASE
E44B 0F37             (        forth.asm):00871 (5)             clr     ISNEGF
E44D 1F10             (        forth.asm):00872 (4)             tfr     x,d
E44F 0D39             (        forth.asm):00873 (4)             tst     CVISSGN         Are we to perform a signed conversion?
E451 2708             (        forth.asm):00874 (3)             beq     @cvnst1
E453 104D             (        forth.asm):00875 (2)             tstd
E455 2A04             (        forth.asm):00876 (3)             bpl     @cvnst1
E457 0C37             (        forth.asm):00877 (5)             inc     ISNEGF          Number being converted is negative
E459 1040             (        forth.asm):00878 (2)             negd
E45B 1F06             (        forth.asm):00879 (4)     @cvnst1 tfr     d,w
E45D 104F             (        forth.asm):00880 (2)             clrd
E45F 108E03FF         (        forth.asm):00881 (4)             ldy     #TBUFF+19       Sign + 16 digits + terminator + 1
E463 6FA2             (        forth.asm):00882 (6+1)           clr     ,-y             End of string marker
E465 119E1E           (        forth.asm):00883 (35)    @cvnst2 divq    UBASE           D returns the modulo and W the quotient
E468 8630             (        forth.asm):00884 (2)             lda     #'0
E46A C10A             (        forth.asm):00885 (2)             cmpb    #10
E46C 2502             (        forth.asm):00886 (3)             bcs     @cvnst3
                      (        forth.asm):00887         * BASE has letters among its valid numbers.
E46E 8637             (        forth.asm):00888 (2)             lda     #'A-10
E470 103089           (        forth.asm):00889 (4)     @cvnst3 addr    a,b
E473 E7A2             (        forth.asm):00890 (4+1)           stb     ,-y
E475 104F             (        forth.asm):00891 (2)             clrd
E477 105D             (        forth.asm):00892 (2)             tstw
E479 26EA             (        forth.asm):00893 (3)             bne     @cvnst2
E47B C620             (        forth.asm):00894 (2)             ldb     #SP
E47D 0D37             (        forth.asm):00895 (4)             tst     ISNEGF
E47F 2702             (        forth.asm):00896 (3)             beq     @cvnst4
E481 C62D             (        forth.asm):00897 (2)             ldb     #'-
E483 E7A2             (        forth.asm):00898 (4+1)   @cvnst4 stb     ,-y
                      (        forth.asm):00899         * We need to insert leading spaces up to the beginning of the output buffer.
E485 C620             (        forth.asm):00900 (2)             ldb     #SP
E487 108C03EC         (        forth.asm):00901 (4)     @cvnst5 cmpy    #TBUFF
E48B 2601             (        forth.asm):00902 (3)             bne     @cvnst6
E48D 39               (        forth.asm):00903 (4)             rts
E48E E7A2             (        forth.asm):00904 (4+1)   @cvnst6 stb     ,-y
E490 20F5             (        forth.asm):00905 (3)             bra     @cvnst5
                      (        forth.asm):00906         
                      (        forth.asm):00907         * Check for minimal data stack depth. On input D has the lowest possible stack
                      (        forth.asm):00908         * address that satisfies the needs of the caller. This routine is meant
                      (        forth.asm):00909         * to support "transactional" behaviour, which is intended to improve
                      (        forth.asm):00910         * debugging support.
E492 103703           (        forth.asm):00911 (4)     CHKNDPT cmpr    d,u
E495 2201             (        forth.asm):00912 (3)             bhi     @stkudf
E497 39               (        forth.asm):00913 (4)             rts
E498 C601             (        forth.asm):00914 (2)     @stkudf ldb     #1              Data stack underflow
E49A BDE772           (        forth.asm):00915 (7)             jsr     ERRHDLR         No return
     E49D             (        forth.asm):00916         CKDPTRA equ     *
                      (        forth.asm):00917         
                      (        forth.asm):00918         * Parameter stack's depth checking primitives (transactional behavior support).
E49D CC029620F0       (        forth.asm):00919         MIN1PST MINDREQ 1
                      (        forth.asm):00920         
E4A2 CC029420EB       (        forth.asm):00921         MIN2PST MINDREQ 2
                      (        forth.asm):00922         
E4A7 CC029220E6       (        forth.asm):00923         MIN3PST MINDREQ 3
                      (        forth.asm):00924         
E4AC CC029020E1       (        forth.asm):00925         MIN4PST MINDREQ 4
                      (        forth.asm):00926         
                      (        forth.asm):00927         * Search word beginning at address TOKENSP in the dictionary.
                      (        forth.asm):00928         * Upon return Z will be set if the word was not found.
                      (        forth.asm):00929         * Otherwise, Y will point to the code section of the word.
                      (        forth.asm):00930         * CSSNTVE (defined in constants.asm) defines whether the
                      (        forth.asm):00931         * dictionary match is case sensitive or not.
                      (        forth.asm):00932         * Important note: if the word is found TOKENEP will be copied to TOKENSP.
E4B1 9E02             (        forth.asm):00933 (4)     SWDIC   ldx     TOKENSP
E4B3 BDE3A4           (        forth.asm):00934 (7)             jsr     SCNETOK         B has CURTOKL
E4B6 9E08             (        forth.asm):00935 (4)             ldx     DICEND
E4B8 9F16             (        forth.asm):00936 (4)             stx     VLPRVEP         Last dictionary entry code address + 1
E4BA 9E02             (        forth.asm):00937 (4)             ldx     TOKENSP
E4BC 109E06           (        forth.asm):00938 (5)             ldy     LSTWAD          Latest word header address to Y
E4BF 2606             (        forth.asm):00939 (3)     @swrdc0 bne     @swrdc1
E4C1 1FC2             (        forth.asm):00940 (4)             tfr     0,y             Word not found. Z is set
E4C3 109F0E           (        forth.asm):00941 (5)             sty     PLOAD
E4C6 39               (        forth.asm):00942 (4)             rts
E4C7 A6A4             (        forth.asm):00943 (4+0)   @swrdc1 lda     ,y              Word attribute to A
E4C9 841F             (        forth.asm):00944 (2)             anda    #WRLNMSK        Extract word length
E4CB 3420             (        forth.asm):00945 (4+2)           pshs    y
E4CD 103798           (        forth.asm):00946 (4)             cmpr    b,a             Word length match?
E4D0 2638             (        forth.asm):00947 (3)             bne     @swrdc3         No, point to next dictionary entry
E4D2 3121             (        forth.asm):00948 (4+1)           leay    1,y
E4D4 A6A0             (        forth.asm):00949 (4+1)   @swrdc2 lda     ,y+
                      (        forth.asm):00950                 IFNE    CSSNTVE
                      (        forth.asm):00951                 cmpa    ,x+             Case sensitive dictionary
                      (        forth.asm):00952                 ELSE
E4D6 1F9E             (        forth.asm):00953 (4)             tfr     b,e             Case insensitive search (preferred)
E4D8 E680             (        forth.asm):00954 (4+1)           ldb     ,x+
E4DA C161             (        forth.asm):00955 (2)             cmpb    #'a
E4DC 2506             (        forth.asm):00956 (3)             bcs     @nochg
E4DE C17B             (        forth.asm):00957 (2)             cmpb    #'z+1
E4E0 2402             (        forth.asm):00958 (3)             bcc     @nochg
E4E2 C020             (        forth.asm):00959 (2)             subb    #'a-'A
E4E4 103798           (        forth.asm):00960 (4)     @nochg  cmpr    b,a
E4E7 1FE9             (        forth.asm):00961 (4)             tfr     e,b
                      (        forth.asm):00962                 ENDC                    CSSNTVE
E4E9 261F             (        forth.asm):00963 (3)             bne     @swrdc3
E4EB 5A               (        forth.asm):00964 (1)             decb
E4EC 26E6             (        forth.asm):00965 (3)             bne     @swrdc2
                      (        forth.asm):00966         * Word match!
E4EE 3510             (        forth.asm):00967 (4+2)           puls    x
E4F0 E684             (        forth.asm):00968 (4+0)           ldb     ,x              Word attribute byte to B
E4F2 4F               (        forth.asm):00969 (1)             clra
E4F3 58               (        forth.asm):00970 (1)             lslb                    Bit 7 to CFLAG
E4F4 49               (        forth.asm):00971 (1)             rola                    CFLAG to A
E4F5 973B             (        forth.asm):00972 (3)             sta     IMDFLG          Set IMMEDIATE flag
E4F7 4F               (        forth.asm):00973 (1)             clra
E4F8 58               (        forth.asm):00974 (1)             lslb                    Bit 6 to CFLAG
E4F9 49               (        forth.asm):00975 (1)             rola                    CFLAG to A
E4FA 973C             (        forth.asm):00976 (3)             sta     DEFFLG          Set DEFINE flag
E4FC 9E04             (        forth.asm):00977 (4)             ldx     TOKENEP
E4FE 9F02             (        forth.asm):00978 (4)             stx     TOKENSP
                      (        forth.asm):00979                 IFNE    RELFEAT
E500 3123             (        forth.asm):00980 (4+1)           leay    3,y             Skip back pointer and checksum. Return XT
                      (        forth.asm):00981                 ELSE
                      (        forth.asm):00982                 leay    2,y             Skip back pointer. Return XT
                      (        forth.asm):00983                 ENDC                    RELFEAT
E502 DC16             (        forth.asm):00984 (4)             ldd     VLPRVEP
E504 103220           (        forth.asm):00985 (4)             subr    y,d
E507 DD0E             (        forth.asm):00986 (4)             std     PLOAD
E509 39               (        forth.asm):00987 (4)             rts                     NZ since there is no zero payload word
E50A 3520             (        forth.asm):00988 (4+2)   @swrdc3 puls    y               Point to previous word header
E50C 109F16           (        forth.asm):00989 (5)             sty     VLPRVEP
E50F 4F               (        forth.asm):00990 (1)             clra
E510 E6A0             (        forth.asm):00991 (4+1)           ldb     ,y+
E512 C41F             (        forth.asm):00992 (2)             andb    #WRLNMSK
E514 31AB             (        forth.asm):00993 (4+2)           leay    d,y
E516 9E02             (        forth.asm):00994 (4)             ldx     TOKENSP
E518 D63A             (        forth.asm):00995 (3)             ldb     CURTOKL
E51A 10AEA4           (        forth.asm):00996 (6+0)           ldy     ,y
E51D 20A0             (        forth.asm):00997 (3)             bra     @swrdc0
                      (        forth.asm):00998         
                      (        forth.asm):00999         * Create new dictionary entry. The word name being created is acquired from
                      (        forth.asm):01000         * the input stream. Warning, this requires a writable dictionary!
                      (        forth.asm):01001         * The new end of the dictionary is returned in Y. W is preserved.
E51F 1038             (        forth.asm):01002 (6)     LOCWRT  pshsw
E521 9E08             (        forth.asm):01003 (4)             ldx     DICEND
                      (        forth.asm):01004                 IFNE    DEBUG
                      (        forth.asm):01005                 cmpx    #ROMSTRT
                      (        forth.asm):01006                 bcs     @locwr0
                      (        forth.asm):01007                 ldb     #10             Assertion failure (trying to write to ROM!)
                      (        forth.asm):01008                 jsr     ERRHDLR         No return
E523                  (        forth.asm):01009         LWAFRA  equ     *
                      (        forth.asm):01010                 ENDC                    DEBUG
E523 9F0C             (        forth.asm):01011 (4)     @locwr0 stx     BDICEND         Back pointer up
E525 9E06             (        forth.asm):01012 (4)             ldx     LSTWAD
E527 9F0A             (        forth.asm):01013 (4)             stx     BLSTWAD         Back pointer up
E529 BDE847           (        forth.asm):01014 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
E52C 6D84             (        forth.asm):01015 (5+0)           tst     ,x
E52E 2605             (        forth.asm):01016 (3)             bne     @locwr2
E530 C605             (        forth.asm):01017 (2)     @locwr1 ldb     #5              Missing word name
E532 BDE772           (        forth.asm):01018 (7)             jsr     ERRHDLR         No return
     E535             (        forth.asm):01019         LWMNRA  equ     *               LOCWRT missing word name return address
E535 BDE396           (        forth.asm):01020 (7)     @locwr2 jsr     SCNSTOK
E538 27F6             (        forth.asm):01021 (3)             beq     @locwr1         End of line reached
E53A BDE3A4           (        forth.asm):01022 (7)             jsr     SCNETOK         X has TOKENEP, B has CURTOKL
E53D 109E02           (        forth.asm):01023 (5)             ldy     TOKENSP
E540 103221           (        forth.asm):01024 (4)             subr    y,x
E543 3410             (        forth.asm):01025 (4+2)           pshs    x               Word length to the system stack
E545 9E08             (        forth.asm):01026 (4)             ldx     DICEND
E547 A661             (        forth.asm):01027 (4+1)           lda     1,s             Word length LSB in the system stack
E549 8120             (        forth.asm):01028 (2)             cmpa    #1+WRLNMSK      Max word length is 31, 79-STANDARD compliant
E54B 2505             (        forth.asm):01029 (3)             blo     @lcwr21
E54D C610             (        forth.asm):01030 (2)             ldb     #16             Word name is too long
E54F BDE772           (        forth.asm):01031 (7)             jsr     ERRHDLR         No return
     E552             (        forth.asm):01032         WTOOLNG equ     *
E552 A780             (        forth.asm):01033 (4+1)   @lcwr21 sta     ,x+             Word length to dictionary
E554 10A6E1           (        forth.asm):01034 (6+2)           ldw     ,s++            16-bit word length to W
E557 1E12             (        forth.asm):01035 (5)             exg     x,y             Y points to the dictionary, X has TOKENSP
                      (        forth.asm):01036                 IFNE    CSSNTVE
                      (        forth.asm):01037                 tfm     x+,y+           Word name to dictionary, as is
                      (        forth.asm):01038                 ELSE
E559 1FF9             (        forth.asm):01039 (4)             tfr     f,b             Force dictionary entry to upper case
E55B A680             (        forth.asm):01040 (4+1)   @locwr3 lda     ,x+
E55D 8161             (        forth.asm):01041 (2)             cmpa    #'a
E55F 2506             (        forth.asm):01042 (3)             bcs     @locwr4
E561 817B             (        forth.asm):01043 (2)             cmpa    #'z+1
E563 2402             (        forth.asm):01044 (3)             bcc     @locwr4
E565 8020             (        forth.asm):01045 (2)             suba    #'a-'A          To upper case
E567 A7A0             (        forth.asm):01046 (4+1)   @locwr4 sta     ,y+
E569 5A               (        forth.asm):01047 (1)             decb
E56A 26EF             (        forth.asm):01048 (3)             bne     @locwr3
                      (        forth.asm):01049                 ENDC                    CSSNTVE
E56C 1F10             (        forth.asm):01050 (4)             tfr     x,d
E56E BDE177           (        forth.asm):01051 (7)             jsr     U2INFRD         Derive >IN from D
E571 9E06             (        forth.asm):01052 (4)             ldx     LSTWAD
E573 AFA1             (        forth.asm):01053 (5+2)           stx     ,y++            Back pointer to dictionary
                      (        forth.asm):01054                 IFNE    RELFEAT
E575 6FA0             (        forth.asm):01055 (6+1)           clr     ,y+             Initialize the checksum header field
                      (        forth.asm):01056                 ENDC                    RELFEAT
E577 109F08           (        forth.asm):01057 (5)             sty     DICEND
E57A 109F12           (        forth.asm):01058 (5)             sty     RECADDR         Should we resort to recursion later on
E57D 1039             (        forth.asm):01059 (6)             pulsw
E57F 39               (        forth.asm):01060 (4)             rts
                      (        forth.asm):01061         
                      (        forth.asm):01062         * Compile 'ldx  #X; jsr NPUSH'.
                      (        forth.asm):01063         * DICEND is updated and returned in Y.
E580 109E08           (        forth.asm):01064 (5)     LITER   ldy     DICEND
E583 868E             (        forth.asm):01065 (2)             lda     #LDXOPC         LDX immediate
E585 8D10             (        forth.asm):01066 (6)             bsr     VARCON2
E587 86BD             (        forth.asm):01067 (2)             lda     #JSROPC         JSR extended
E589 BDE155           (        forth.asm):01068 (7)             jsr     CHKRTS          Check if the final RTS can be omitted
E58C 8D06             (        forth.asm):01069 (6)             bsr     VARCON1
E58E 109F08           (        forth.asm):01070 (5)             sty     DICEND
E591 39               (        forth.asm):01071 (4)             rts
                      (        forth.asm):01072         
                      (        forth.asm):01073         * Compile 'jmp  NPUSH'.
                      (        forth.asm):01074         * Y points to the end of the dictionary on entry and on exit.
E592 867E             (        forth.asm):01075 (2)     VARCON  lda     #JMPOPC         JMP extended
E594 8EE7F3           (        forth.asm):01076 (3)     VARCON1 ldx     #NPUSH
E597 A7A0             (        forth.asm):01077 (4+1)   VARCON2 sta     ,y+
E599 AFA1             (        forth.asm):01078 (5+2)           stx     ,y++
E59B 39               (        forth.asm):01079 (4)             rts
                      (        forth.asm):01080         
                      (        forth.asm):01081         * Used by U<, U>, <, >.
E59C BDE4A2           (        forth.asm):01082 (7)     CMP2    jsr     MIN2PST         At least 2 cells must be stacked up
E59F 10AEC4           (        forth.asm):01083 (6+0)   CMP2RA  ldy     ,u
E5A2 AE42             (        forth.asm):01084 (5+1)           ldx     2,u
E5A4 103721           (        forth.asm):01085 (4)             cmpr    y,x
E5A7 1FA9             (        forth.asm):01086 (4)             tfr     cc,b
                      (        forth.asm):01087                 IFNE    DEBUG
                      (        forth.asm):01088                 clra
                      (        forth.asm):01089                 std     CCREG
                      (        forth.asm):01090                 ENDC                    DEBUG
E5A9 1FC1             (        forth.asm):01091 (4)             tfr     0,x
E5AB 3344             (        forth.asm):01092 (4+1)           leau    4,u
E5AD 1F9A             (        forth.asm):01093 (4)             tfr     b,cc
E5AF 39               (        forth.asm):01094 (4)             rts
                      (        forth.asm):01095         
                      (        forth.asm):01096         * Used by CMOVE, CMOVE>, MOVE.
E5B0 BDE4A7           (        forth.asm):01097 (7)     ACQMOVP jsr     MIN3PST         At least 3 cells must be stacked up
E5B3 10A6C4           (        forth.asm):01098 (6+0)   ACQVMRA ldw     ,u              Byte count
E5B6 10AE42           (        forth.asm):01099 (6+1)           ldy     2,u             Destination address
E5B9 AE44             (        forth.asm):01100 (5+1)           ldx     4,u             Source address
E5BB 3346             (        forth.asm):01101 (4+1)           leau    6,u             Drop 3 cells from the user stack
E5BD 39               (        forth.asm):01102 (4)             rts
                      (        forth.asm):01103         
                      (        forth.asm):01104         * FDCTSYM enveadours to match the address stored in Y to a dictionary entry.
                      (        forth.asm):01105         * Upon a successful flexible match, it will output a string in the form of
                      (        forth.asm):01106         * <wordname>+<offset> to the string pointed to by X. <wordname> refers to the
                      (        forth.asm):01107         * code entry point of the matched word. <offset> will be expressed in hex.
                      (        forth.asm):01108         * If a match is found, Z will be clear, otherwise it will be set.
                      (        forth.asm):01109         * A candidate for a word code address must meet the following criteria:
                      (        forth.asm):01110         * ((Y U>= #EBUFS) AND (Y U< #THEEND)) OR ((Y U>= #WDICSPC) AND (Y U< DICEND)).
                      (        forth.asm):01111         * Upon return:
                      (        forth.asm):01112         * - the string pointed to by X will updated with its symbolic match
                      (        forth.asm):01113         *   (NUL terminated), if there is one. X itself might have been altered.
                      (        forth.asm):01114         * - Y should be preserved.
                      (        forth.asm):01115         * EBUFS (EMPTY-BUFFERS) header address is the last word in the dictionary.
                      (        forth.asm):01116                 IFNE    SSDFEAT
E5BE 3430             (        forth.asm):01117 (4+4)   FDCTSYM pshs    y,x     
E5C0 1F21             (        forth.asm):01118 (4)             tfr     y,x             Potential execution token to X
E5C2 8CE988           (        forth.asm):01119 (3)             cmpx    #EBUFS
E5C5 2505             (        forth.asm):01120 (3)             blo     @fdstr2 
E5C7 8CFE12           (        forth.asm):01121 (3)             cmpx    #THEEND
E5CA 250D             (        forth.asm):01122 (3)             blo     @fdsmtc
E5CC 8C0C60           (        forth.asm):01123 (3)     @fdstr2 cmpx    #WDICSPC        Term 2 of the predicate for a valid word addr
E5CF 2504             (        forth.asm):01124 (3)             blo     @fdsnom
E5D1 9C08             (        forth.asm):01125 (4)             cmpx    DICEND
E5D3 2504             (        forth.asm):01126 (3)             blo     @fdsmtc
E5D5 4F               (        forth.asm):01127 (1)     @fdsnom clra                    No match (Z is set)
E5D6 3530             (        forth.asm):01128 (4+4)           puls    x,y
E5D8 39               (        forth.asm):01129 (4)             rts
E5D9 9E06             (        forth.asm):01130 (4)     @fdsmtc ldx     LSTWAD          Potential match. Scan upward from LAST
                      (        forth.asm):01131         * X points to the latest word header, Y has an execution token.
E5DB 109608           (        forth.asm):01132 (5)             ldw     DICEND          W points to the end of the code section
E5DE 3410             (        forth.asm):01133 (4+2)   @fdslop pshs    x               Pointer to the current word header
E5E0 E680             (        forth.asm):01134 (4+1)           ldb     ,x+
E5E2 C41F             (        forth.asm):01135 (2)             andb    #WRLNMSK
E5E4 3A               (        forth.asm):01136 (1)             abx                     Skip word name string
E5E5 EC81             (        forth.asm):01137 (5+2)           ldd     ,x++            Backlink to D
                      (        forth.asm):01138                 IFNE    RELFEAT
E5E7 3001             (        forth.asm):01139 (4+1)           leax    1,x             Skip the checksum
                      (        forth.asm):01140                 ENDC                    RELFEAT
E5E9 103712           (        forth.asm):01141 (4)             cmpr    x,y
E5EC 2530             (        forth.asm):01142 (3)             blo     @fdsnwd
E5EE 103762           (        forth.asm):01143 (4)             cmpr    w,y
E5F1 222B             (        forth.asm):01144 (3)             bhi     @fdsnwd         An equal address is allowed here, in case
                      (        forth.asm):01145         * jsr ERRHDLR is the last instruction for the word under consideration.
                      (        forth.asm):01146         * This happens to be the case for FORGET and LPAR.
                      (        forth.asm):01147         * Y matches the code range for the current word.
E5F3 3510             (        forth.asm):01148 (4+2)           puls    x
E5F5 E680             (        forth.asm):01149 (4+1)           ldb     ,x+
E5F7 C41F             (        forth.asm):01150 (2)             andb    #WRLNMSK
E5F9 1F9F             (        forth.asm):01151 (4)             tfr     b,f
E5FB 114F             (        forth.asm):01152 (2)             clre                    W has the matched word length
E5FD 10AEE4           (        forth.asm):01153 (6+0)           ldy     ,s              Y points to the target buffer
E600 113812           (        forth.asm):01154 (6+?)           tfm     x+,y+
E603 6FA4             (        forth.asm):01155 (6+0)           clr     ,y              We need this in case the offset is zero
                      (        forth.asm):01156         * Offset processing.
                      (        forth.asm):01157                 IFNE    RELFEAT
E605 3003             (        forth.asm):01158 (4+1)           leax    3,x             Skip backlink and checksum
                      (        forth.asm):01159                 ELSE
                      (        forth.asm):01160                 leax    2,x             Skip backlink
                      (        forth.asm):01161                 ENDC                    RELFEAT
E607 EC62             (        forth.asm):01162 (5+1)           ldd     2,s             Execution token to D
E609 103210           (        forth.asm):01163 (4)             subr    x,d             Offset between XT and word entry point to D
E60C 270B             (        forth.asm):01164 (3)             beq     @skoffs         Skip displaying the offset if it is zero
E60E 3402             (        forth.asm):01165 (4+1)           pshs    a               Preserve the offset's MSB
E610 862B             (        forth.asm):01166 (2)             lda     #'+
E612 A7A0             (        forth.asm):01167 (4+1)           sta     ,y+
E614 3502             (        forth.asm):01168 (4+1)           puls    a               Restore the offset's MSB
E616 BDE195           (        forth.asm):01169 (7)             jsr     HDMP4           Dump hex incarnation of the offset to Y
E619 3530             (        forth.asm):01170 (4+4)   @skoffs puls    x,y
E61B 1CFB             (        forth.asm):01171 (2)             andcc   #^ZFLAG         Clear ZFLAG
E61D 39               (        forth.asm):01172 (4)             rts
                      (        forth.asm):01173         * Point to the next word.
E61E 1039             (        forth.asm):01174 (6)     @fdsnwd pulsw                   Retrieve current word header address
E620 104D             (        forth.asm):01175 (2)             tstd
E622 27B1             (        forth.asm):01176 (3)             beq     @fdsnom         Just met the last dictionary entry
E624 1F01             (        forth.asm):01177 (4)             tfr     d,x             Point to previous word header
E626 10810C60         (        forth.asm):01178 (4)             cmpw    #WDICSPC        Are we transitioning from RAM to ROM?
E62A 26B2             (        forth.asm):01179 (3)             bne     @fdslop         No singularity
E62C 1086FE12         (        forth.asm):01180 (4)             ldw     #THEEND         Won't be able to diagnose the ROM based @...
E630 20AC             (        forth.asm):01181 (3)             bra     @fdslop
                      (        forth.asm):01182         
                      (        forth.asm):01183         * Find the best possible symbolic approximation of Y and store it to the
                      (        forth.asm):01184         * buffer pointed to by X.
                      (        forth.asm):01185         * On entry:
                      (        forth.asm):01186         * - Y has a code address which is to be matched with a symbolic name + offset.
                      (        forth.asm):01187         * - X points to a buffer where the resolution is to be stored.
                      (        forth.asm):01188         * On return:
                      (        forth.asm):01189         * - Y is to be preserved.
                      (        forth.asm):01190         * - the output buffer will be updated with the best symbolic match (NUL term'd).
E632 3430             (        forth.asm):01191 (4+4)   FINDSYM pshs    y,x
E634 8D88             (        forth.asm):01192 (6)             bsr     FDCTSYM         Search the dictionary first (flexible match)
E636 261B             (        forth.asm):01193 (3)             bne     @dctmfn         Dictionary match found
E638 8EE658           (        forth.asm):01194 (3)             ldx     #NDCTWKS        Search kernel symbols for an exact match
E63B EC81             (        forth.asm):01195 (5+2)   @fsmlop ldd     ,x++
E63D 270B             (        forth.asm):01196 (3)             beq     @fsmfnd         End of well known symbols list?
E63F 103720           (        forth.asm):01197 (4)             cmpr    y,d
E642 2706             (        forth.asm):01198 (3)             beq     @fsmfnd
                      (        forth.asm):01199         * No well known symbol match. Skip string.
E644 A680             (        forth.asm):01200 (4+1)   @fsmskp lda     ,x+
E646 26FC             (        forth.asm):01201 (3)             bne     @fsmskp
E648 20F1             (        forth.asm):01202 (3)             bra     @fsmlop
E64A 10AEE4           (        forth.asm):01203 (6+0)   @fsmfnd ldy     ,s
E64D A680             (        forth.asm):01204 (4+1)   @fsmfn2 lda     ,x+
E64F A7A0             (        forth.asm):01205 (4+1)           sta     ,y+
E651 26FA             (        forth.asm):01206 (3)             bne     @fsmfn2
E653 3262             (        forth.asm):01207 (4+1)   @dctmfn leas    2,s             Drop X from the system stack
E655 3520             (        forth.asm):01208 (4+2)           puls    y
E657 39               (        forth.asm):01209 (4)             rts
                      (        forth.asm):01210         
                      (        forth.asm):01211         * Non-dictionary well known symbols.
E658 E000             (        forth.asm):01212         NDCTWKS fdb     IODZHDL         Illegal opcode/Division by zero trap handler
E65A 494F445A48444C00 (        forth.asm):01213                 fcn     'IODZHDL'
E662 E80F             (        forth.asm):01214                 fdb     DPOPRA          Data stack underflow
E664 44504F50524100   (        forth.asm):01215                 fcn     'DPOPRA'
E66B E800             (        forth.asm):01216                 fdb     DPSHRA          Data stack overflow
E66D 44505348524100   (        forth.asm):01217                 fcn     'DPSHRA'
E674 E847             (        forth.asm):01218                 fdb     RPOPRA          Return stack underflow
E676 52504F50524100   (        forth.asm):01219                 fcn     'RPOPRA'
E67D E82D             (        forth.asm):01220                 fdb     RPSHRA          Return stack overflow
E67F 52505348524100   (        forth.asm):01221                 fcn     'RPSHRA'
E686 E772             (        forth.asm):01222                 fdb     ERRHDLR         Error handler
E688 45525248444C5200 (        forth.asm):01223                 fcn     'ERRHDLR'
E690 E3F1             (        forth.asm):01224                 fdb     CKBASRA         Illegal BASE value
E692 434B424153524100 (        forth.asm):01225                 fcn     'CKBASRA'
E69A E49D             (        forth.asm):01226                 fdb     CKDPTRA         Not enough parameters supplied (transac. behav.)
E69C 434B445054524100 (        forth.asm):01227                 fcn     'CKDPTRA'
E6A4 E492             (        forth.asm):01228                 fdb     CHKNDPT         Check data stack minimum depth (transac. behav.)
E6A6 43484B4E44505400 (        forth.asm):01229                 fcn     'CHKNDPT'
E6AE E59F             (        forth.asm):01230                 fdb     CMP2RA          Missing operand in any of U<, U>, <, >
E6B0 434D5032524100   (        forth.asm):01231                 fcn     'CMP2RA'
E6B7 E5B3             (        forth.asm):01232                 fdb     ACQVMRA         Three operands missing in any of CMOVE,
                      (        forth.asm):01233         *                               CMOVE>, MOVE
E6B9 414351564D524100 (        forth.asm):01234                 fcn     'ACQVMRA'
E6C1 E0C8             (        forth.asm):01235                 fdb     MINTLRA         Main interpreter loop return address
E6C3 4D494E544C524100 (        forth.asm):01236                 fcn     'MINTLRA'
E6CB E448             (        forth.asm):01237                 fdb     NUMCVRA         ? while converting a string to a number
E6CD 4E554D4356524100 (        forth.asm):01238                 fcn     'NUMCVRA'
E6D5 E0E0             (        forth.asm):01239                 fdb     NMCVIRA         Numeric conversion error while interpreting
E6D7 4E4D435649524100 (        forth.asm):01240                 fcn     'NMCVIRA'
E6DF E13C             (        forth.asm):01241                 fdb     NMCVCRA         Numeric conversion error while compiling
E6E1 4E4D435643524100 (        forth.asm):01242                 fcn     'NMCVCRA'
E6E9 E111             (        forth.asm):01243                 fdb     INTRPRA         Interpreter RA (after the execution of a word)
E6EB 494E545250524100 (        forth.asm):01244                 fcn     'INTRPRA'
E6F3 E12A             (        forth.asm):01245                 fdb     COMPLRA         Compiler RA (after the execution of an IMD word)
E6F5 434F4D504C524100 (        forth.asm):01246                 fcn     'COMPLRA'
E6FD E169             (        forth.asm):01247                 fdb     EMXASXT         Emit "JSR <X>" where X has an execution token
E6FF 454D584153585400 (        forth.asm):01248                 fcn     'EMXASXT'
E707 E535             (        forth.asm):01249                 fdb     LWMNRA          Missing word name in LOCWRT
E709 4C574D4E524100   (        forth.asm):01250                 fcn     'LWMNRA'
E710 E91F             (        forth.asm):01251                 fdb     CFR1SRA         CF read one sector failed
E712 4346523153524100 (        forth.asm):01252                 fcn     'CFR1SRA'
E71A E7F3             (        forth.asm):01253                 fdb     NPUSH           Not an error RA but useful to have as a symbol
E71C 4E5055534800     (        forth.asm):01254                 fcn     'NPUSH'
E722 E810             (        forth.asm):01255                 fdb     RPUSH           Not an error RA but useful to have as a symbol
E724 525055534800     (        forth.asm):01256                 fcn     'RPUSH'
E72A E801             (        forth.asm):01257                 fdb     NPOP            Not an error RA but useful to have as a symbol
E72C 4E504F5000       (        forth.asm):01258                 fcn     'NPOP'
E731 E82E             (        forth.asm):01259                 fdb     RPOP            Not an error RA but useful to have as a symbol
E733 52504F5000       (        forth.asm):01260                 fcn     'RPOP'
E738 E2FB             (        forth.asm):01261                 fdb     PUTS            Not an error RA but useful to have as a symbol
E73A 5055545300       (        forth.asm):01262                 fcn     'PUTS'
                      (        forth.asm):01263                 IFNE    DEBUG
                      (        forth.asm):01264                 fdb     LWAFRA          Assertion failure in LOCWRT
                      (        forth.asm):01265                 fcn     'LOCWRTAF'
                      (        forth.asm):01266                 ENDC
E73F 0000             (        forth.asm):01267                 fdb     0               End of list
E741 3F3F3F00         (        forth.asm):01268                 fcn     '???'           Admit we have no clue!
                      (        forth.asm):01269                 ENDC                    SSDFEAT
                      (        forth.asm):01270         
                      (        forth.asm):01271         * Print ' (xxxx/yyyy)' where xxxx is the hex representation for BLK @ and
                      (        forth.asm):01272         * yyyy is the hex representation for >IN @. Y is preserved, X and D are not.
E745 3420             (        forth.asm):01273 (4+2)   PRBLKIN pshs    y
E747 108E039C         (        forth.asm):01274 (4)             ldy     #HEXBUF
E74B 8620             (        forth.asm):01275 (2)             lda     #SP
E74D A7A0             (        forth.asm):01276 (4+1)           sta     ,y+
E74F 8628             (        forth.asm):01277 (2)             lda     #'(
E751 A7A0             (        forth.asm):01278 (4+1)           sta     ,y+
E753 DC24             (        forth.asm):01279 (4)             ldd     UBLK
E755 BDE195           (        forth.asm):01280 (7)             jsr     HDMP4
E758 862F             (        forth.asm):01281 (2)             lda     #'/
E75A A7A0             (        forth.asm):01282 (4+1)           sta     ,y+
E75C DC22             (        forth.asm):01283 (4)             ldd     UTOIN
E75E BDE195           (        forth.asm):01284 (7)             jsr     HDMP4
E761 8629             (        forth.asm):01285 (2)             lda     #')
E763 A7A0             (        forth.asm):01286 (4+1)           sta     ,y+
E765 6FA4             (        forth.asm):01287 (6+0)           clr     ,y
E767 8E039C           (        forth.asm):01288 (3)             ldx     #HEXBUF
E76A BDE2FB           (        forth.asm):01289 (7)             jsr     PUTS
E76D 3520             (        forth.asm):01290 (4+2)           puls    y
E76F 7EE308           (        forth.asm):01291 (3)             jmp     PUTCR
                      (        forth.asm):01292         
                      (        forth.asm):01293         * Handle error condition. Error code is in B.
                      (        forth.asm):01294         * If B is 2 (undefined) X points to a string of length CURTOKL that has the
                      (        forth.asm):01295         * offending word.
E772 10AEE4           (        forth.asm):01296 (6+0)   ERRHDLR ldy     ,s              Invoking return address
                      (        forth.asm):01297         * In case of a trap return, we enter here with Y set to #IODZHDL
E775 BDE308           (        forth.asm):01298 (7)     ERRHD1  jsr     PUTCR           GNU Forth does this in its exception handler
E778 C102             (        forth.asm):01299 (2)             cmpb    #2              Undefined symbol?
E77A 2618             (        forth.asm):01300 (3)             bne     @perrm          No
E77C 8627             (        forth.asm):01301 (2)             lda     #''             Begin quote
E77E BDE2E8           (        forth.asm):01302 (7)             jsr     PUTCH
E781 A680             (        forth.asm):01303 (4+1)   @prtsym lda     ,x+             Display undefined symbol name
E783 BDE2E8           (        forth.asm):01304 (7)             jsr     PUTCH
E786 0A3A             (        forth.asm):01305 (5)             dec     CURTOKL
E788 26F7             (        forth.asm):01306 (3)             bne     @prtsym
E78A 8627             (        forth.asm):01307 (2)             lda     #''             End quote
E78C BDE2E8           (        forth.asm):01308 (7)             jsr     PUTCH
E78F 8620             (        forth.asm):01309 (2)             lda     #SP             BL EMIT
E791 BDE2E8           (        forth.asm):01310 (7)             jsr     PUTCH
E794 8EFED4           (        forth.asm):01311 (3)     @perrm  ldx     #ERRMTBL        Regular error handling
E797 5D               (        forth.asm):01312 (1)     @nxterr tstb
E798 2637             (        forth.asm):01313 (3)             bne     @skerrm
E79A BDE2FB           (        forth.asm):01314 (7)             jsr     PUTS            Print error message
E79D 8DA6             (        forth.asm):01315 (6)             bsr     PRBLKIN         Print BLK and >IN values (in hex)
E79F 1F20             (        forth.asm):01316 (4)     @dmptos tfr     y,d             Dump top of the system stack contents
                      (        forth.asm):01317                 IFNE    SSDFEAT
E7A1 3406             (        forth.asm):01318 (4+2)           pshs    d
                      (        forth.asm):01319                 ENDC                    SSDFEAT
E7A3 108E039C         (        forth.asm):01320 (4)             ldy     #HEXBUF
E7A7 BDE195           (        forth.asm):01321 (7)             jsr     HDMP4
E7AA 8620             (        forth.asm):01322 (2)             lda     #SP
E7AC A7A0             (        forth.asm):01323 (4+1)           sta     ,y+
                      (        forth.asm):01324         * Symbolic stack dumps are configurable. In situations where the dictionary is
                      (        forth.asm):01325         * trashed, they may not be considered desirable. See SSDFEAT in constants.asm.
                      (        forth.asm):01326                 IFNE    SSDFEAT
E7AE 1F21             (        forth.asm):01327 (4)             tfr     y,x             X has the buffer pointer
E7B0 3520             (        forth.asm):01328 (4+2)           puls    y               Restore target symbol table entry
E7B2 BDE632           (        forth.asm):01329 (7)             jsr     FINDSYM
                      (        forth.asm):01330                 ELSE
                      (        forth.asm):01331                 clr     ,y              No symbolic information is to be printed
                      (        forth.asm):01332                 ENDC                    SSDFEAT
E7B5 8E039C           (        forth.asm):01333 (3)             ldx     #HEXBUF
E7B8 BDE2FB           (        forth.asm):01334 (7)             jsr     PUTS
E7BB BDE308           (        forth.asm):01335 (7)             jsr     PUTCR
E7BE 108CE000         (        forth.asm):01336 (4)             cmpy    #IODZHDL
E7C2 2702             (        forth.asm):01337 (3)             beq     @wastrp         We're just back from the trap handler
E7C4 3262             (        forth.asm):01338 (4+1)           leas    2,s             Point to the next item on the stack
E7C6 118C8000         (        forth.asm):01339 (4)     @wastrp cmps    #RAMSTRT+RAMSIZE
E7CA 240C             (        forth.asm):01340 (3)             bhs     @errdon         We're done here
E7CC 10AEE4           (        forth.asm):01341 (6+0)           ldy     ,s
E7CF 20CE             (        forth.asm):01342 (3)             bra     @dmptos
E7D1 A680             (        forth.asm):01343 (4+1)   @skerrm lda     ,x+             Scan for the next error message
E7D3 26FC             (        forth.asm):01344 (3)             bne     @skerrm
E7D5 5A               (        forth.asm):01345 (1)             decb
E7D6 20BF             (        forth.asm):01346 (3)             bra     @nxterr
E7D8 10CE8000         (        forth.asm):01347 (4)     @errdon lds     #RAMSTRT+RAMSIZE
E7DC 9621             (        forth.asm):01348 (3)             lda     USTATE+1        We do ignore the upper byte
E7DE 270D             (        forth.asm):01349 (3)             beq     @erdon2         No pointers to restore if we were interpreting
                      (        forth.asm):01350         * Compiling: clear STATE, RSP and restore LSTWAD, DICEND.
E7E0 0F21             (        forth.asm):01351 (5)             clr     USTATE+1        Switch back to interpretation mode
E7E2 BDEB8C           (        forth.asm):01352                 RFXT    jsr,RCLR+7      XT for RCLR
E7E5 9E0C             (        forth.asm):01353 (4)             ldx     BDICEND         Restore essential pointers from backups
E7E7 9F08             (        forth.asm):01354 (4)             stx     DICEND          Restore HERE
E7E9 9E0A             (        forth.asm):01355 (4)             ldx     BLSTWAD
E7EB 9F06             (        forth.asm):01356 (4)             stx     LSTWAD          Restore LAST
E7ED BDFB8A           (        forth.asm):01357         @erdon2 RFXT    jsr,DECIMAL+10  Back to decimal BASE, for one's sanity's sake!
E7F0 7EE0B2           (        forth.asm):01358 (3)             jmp     INTERP
                      (        forth.asm):01359         
                      (        forth.asm):01360         * Push X to the data stack (boundary is checked).
E7F3 118301D8         (        forth.asm):01361 (4)     NPUSH   cmpu    #NSTTOP
E7F7 2303             (        forth.asm):01362 (3)             bls     @npush1         Anything <= than #NSTTOP indicates overflow
E7F9 3610             (        forth.asm):01363 (4+2)           pshu    x               Aka UCNPUSH
E7FB 39               (        forth.asm):01364 (4)             rts
E7FC 5F               (        forth.asm):01365 (1)     @npush1 clrb                    Data stack overflow
E7FD BDE772           (        forth.asm):01366 (7)             jsr     ERRHDLR         No return
     E800             (        forth.asm):01367         DPSHRA  equ     *
E800 12               (        forth.asm):01368 (1)             nop
                      (        forth.asm):01369         
                      (        forth.asm):01370         * Pull X from the data stack (boundary is checked).
                      (        forth.asm):01371         * D, W and Y are preserved.
E801 11830298         (        forth.asm):01372 (4)     NPOP    cmpu    #NSTBOT
E805 2403             (        forth.asm):01373 (3)             bhs     @npop1          Anything >= than #NSTBOT indicates underflow
E807 3710             (        forth.asm):01374 (4+2)           pulu    x
E809 39               (        forth.asm):01375 (4)             rts
E80A C601             (        forth.asm):01376 (2)     @npop1  ldb     #1              Data stack underflow
E80C BDE772           (        forth.asm):01377 (7)             jsr     ERRHDLR         No return
     E80F             (        forth.asm):01378         DPOPRA  equ     *
E80F 12               (        forth.asm):01379 (1)             nop
                      (        forth.asm):01380         
                      (        forth.asm):01381         * Push X to the return stack (boundary is checked).
E810 9630             (        forth.asm):01382 (3)     RPUSH   lda     RDEPTH          RDEPTH is expressed in cells
E812 8140             (        forth.asm):01383 (2)             cmpa    #RSTKSZ/2       But RSTKZ is expressed in bytes
E814 2712             (        forth.asm):01384 (3)             beq     @rpush1
E816 4C               (        forth.asm):01385 (1)             inca
E817 9730             (        forth.asm):01386 (3)             sta     RDEPTH
E819 0F32             (        forth.asm):01387 (5)             clr     RTSREMV         Do not get rid of the final RTS
E81B 1F27             (        forth.asm):01388 (4)             tfr     y,v
E81D 109E00           (        forth.asm):01389 (5)             ldy     RSP
E820 AFA3             (        forth.asm):01390 (5+2)           stx     ,--y
E822 109F00           (        forth.asm):01391 (5)             sty     RSP
E825 1F72             (        forth.asm):01392 (4)             tfr     v,y
E827 39               (        forth.asm):01393 (4)             rts
E828 C607             (        forth.asm):01394 (2)     @rpush1 ldb     #7              Return stack overflow
E82A BDE772           (        forth.asm):01395 (7)             jsr     ERRHDLR         No return
     E82D             (        forth.asm):01396         RPSHRA  equ     *
E82D 12               (        forth.asm):01397 (1)             nop                     Meant to insulate RPUSH errors from RPOP EP
                      (        forth.asm):01398         
                      (        forth.asm):01399         * Pull X from the return stack (boundary is checked).
E82E 9630             (        forth.asm):01400 (3)     RPOP    lda     RDEPTH          RDEPTH is expressed in cells
E830 2710             (        forth.asm):01401 (3)             beq     @rpop1
E832 4A               (        forth.asm):01402 (1)             deca
E833 9730             (        forth.asm):01403 (3)             sta     RDEPTH
E835 1F27             (        forth.asm):01404 (4)             tfr     y,v
E837 109E00           (        forth.asm):01405 (5)             ldy     RSP
E83A AEA1             (        forth.asm):01406 (5+2)           ldx     ,y++
E83C 109F00           (        forth.asm):01407 (5)             sty     RSP
E83F 1F72             (        forth.asm):01408 (4)             tfr     v,y
E841 39               (        forth.asm):01409 (4)             rts
E842 C608             (        forth.asm):01410 (2)     @rpop1  ldb     #8              Return stack underflow
E844 BDE772           (        forth.asm):01411 (7)             jsr     ERRHDLR         No return
     E847             (        forth.asm):01412         RPOPRA  equ     *
                      (        forth.asm):01413         
                      (        forth.asm):01414         * Derive the current input stream pointer from BLK and >IN.
                      (        forth.asm):01415         * The resulting address is returned in X. D is altered.
                      (        forth.asm):01416         * Both Y and W are preserved.
E847 9E24             (        forth.asm):01417 (4)     BKIN2PT ldx     UBLK
E849 2716             (        forth.asm):01418 (3)             beq     @consol         We are switching back to the console
E84B 1038             (        forth.asm):01419 (6)             pshsw
E84D 3420             (        forth.asm):01420 (4+2)           pshs    y
E84F 8DA2             (        forth.asm):01421 (6)             bsr     NPUSH           Make sure BLK @ is loaded
E851 BDEA59           (        forth.asm):01422                 RFXT    jsr,BLOCK+8     XT for BLOCK
E854 3520             (        forth.asm):01423 (4+2)           puls    y
E856 1039             (        forth.asm):01424 (6)             pulsw
E858 3710             (        forth.asm):01425                 UCNPOP                  Retrieve buffer addr to X
E85A 9F1C             (        forth.asm):01426 (4)     @done   stx     BSBFADR         Update base buffer address
E85C DC22             (        forth.asm):01427 (4)             ldd     UTOIN
E85E 308B             (        forth.asm):01428 (4+2)           leax    d,x             Add the current offset. Return the result via X
E860 39               (        forth.asm):01429 (4)             rts
E861 8E0318           (        forth.asm):01430 (3)     @consol ldx     #CMDBUF
E864 20F4             (        forth.asm):01431 (3)             bra     @done
                      (        forth.asm):01432         
                      (        forth.asm):01433                 include rtc.asm
                      (          rtc.asm):00001                 IFNE RTCFEAT
                      (          rtc.asm):00002         
                      (          rtc.asm):00003         * FIRQ handler for the MC146818 RTC.
                      (          rtc.asm):00004         * In this particular context, only D and CC might be altered.
E866                  (          rtc.asm):00005         RTCIHDL tst     RTCAVL          RTC chip detected?
                      (          rtc.asm):00006                 beq     @notick         Nope
                      (          rtc.asm):00007                 lda     #RTOREGC        Read RTCC. INTACK if any interrupt is pending.
                      (          rtc.asm):00008         * Two intructions inlined for RTREGRD in non-preemtible (interrupt) mode.
                      (          rtc.asm):00009                 sta     RTAS
                      (          rtc.asm):00010                 ldb     RTDS
                      (          rtc.asm):00011                 andb    #RTCPF          RTC periodic interrupt pending?
                      (          rtc.asm):00012                 beq     @notick         No, this ain't us ticking
                      (          rtc.asm):00013         * From "The 6309 Book" p. 3-69: "Note that INC does not effect the carry bit."
E866                  (          rtc.asm):00014         @inctks ldd     TIKSLOW
                      (          rtc.asm):00015                 addd    #1
                      (          rtc.asm):00016                 std     TIKSLOW
                      (          rtc.asm):00017                 ldd     TIKSHI
                      (          rtc.asm):00018                 adcd    #0
                      (          rtc.asm):00019                 std     TIKSHI
E866                  (          rtc.asm):00020         @notick rts
                      (          rtc.asm):00021         
                      (          rtc.asm):00022         * Read one byte from an internal's RTC register whose offset is in A upon
                      (          rtc.asm):00023         * routine entry. The register contents is returned in B.
                      (          rtc.asm):00024         * No other register is altered. FIRQ is temporarily disabled.
                      (          rtc.asm):00025         * Can be called from base or interrupt level.
E866                  (          rtc.asm):00026         RTREGRD pshs    cc
                      (          rtc.asm):00027                 orcc    #FFLAG          Mask FIRQ
                      (          rtc.asm):00028                 sta     RTAS            Select target RTC register
                      (          rtc.asm):00029                 ldb     RTDS            Read RTC register contents
                      (          rtc.asm):00030                 puls    cc              Restore previous interrupt handling mode
                      (          rtc.asm):00031                 rts
                      (          rtc.asm):00032         
                      (          rtc.asm):00033         * Write one byte to an internal's RTC register whose offset is in A upon
                      (          rtc.asm):00034         * routine entry. The register byte output value is in B upon entry.
                      (          rtc.asm):00035         * FIRQ is temporarily masked. All regs contents are preserved.
                      (          rtc.asm):00036         * Can be called from base or interrupt level.
E866                  (          rtc.asm):00037         RTREGWR pshs    cc
                      (          rtc.asm):00038                 orcc    #FFLAG          Mask FIRQ
                      (          rtc.asm):00039                 sta     RTAS            Select target RTC register
                      (          rtc.asm):00040                 stb     RTDS            Write RTC register contents
                      (          rtc.asm):00041                 puls    cc              Restore previous interrupt handling mode
                      (          rtc.asm):00042                 rts
                      (          rtc.asm):00043         
                      (          rtc.asm):00044         * Detect if an MC146818 chip is present.
E866                  (          rtc.asm):00045         RTCINIT
                      (          rtc.asm):00046                 IFNE    DEBUG
                      (          rtc.asm):00047                 clrd
                      (          rtc.asm):00048                 std     TIKSHI          Initialize the TICKS double cell
                      (          rtc.asm):00049                 std     TIKSLOW
                      (          rtc.asm):00050                 clr     RTCAVL          Assume chip not present
                      (          rtc.asm):00051                 ENDC
                      (          rtc.asm):00052                 lda     #RTOPRES        Offset to the last NVRAM byte if dev is present
                      (          rtc.asm):00053                 bsr     RTREGRD         Read user memory byte. Value is returned in B   
                      (          rtc.asm):00054                 comb                    One's complement to B
                      (          rtc.asm):00055                 pshs    b
                      (          rtc.asm):00056                 bsr     RTREGWR         Write back one's complement to RTC
                      (          rtc.asm):00057                 bsr     RTREGRD         And read the last NVRAM byte back
                      (          rtc.asm):00058                 puls    a
                      (          rtc.asm):00059                 cmpr    b,a             Match?
                      (          rtc.asm):00060                 beq     @rtdtct         RTC chip detected all right!
                      (          rtc.asm):00061                 rts
                      (          rtc.asm):00062         * MC146818 RTC chip detected.
                      (          rtc.asm):00063         * On power up if register RTCA reads as 0, the SET bit in register RTCB will
                      (          rtc.asm):00064         * prevent any updates to the calendar (date/time). We do preserve the state of
                      (          rtc.asm):00065         * the SET bit, so as to indicate to the application software that the time and
                      (          rtc.asm):00066         * date have yet to be set manually.
E866                  (          rtc.asm):00067         @rtdtct lda     #RTOREGA
                      (          rtc.asm):00068                 ldb     #(RTADV32|RTARS64)
                      (          rtc.asm):00069                 bsr     RTREGWR         Write B to the RTCA register
                      (          rtc.asm):00070                 lda     #RTOREGB
                      (          rtc.asm):00071                 bsr     RTREGRD
                      (          rtc.asm):00072                 andb    #RTBSET         Extract the SET bit
                      (          rtc.asm):00073                 orb     #(RTBPIE|RTBDM|RTB24)
                      (          rtc.asm):00074                 bsr     RTREGWR         Write B to the RTCB register
                      (          rtc.asm):00075                 inc     RTCAVL
                      (          rtc.asm):00076                 ldx     #RTPRESM        Real time clock detected message base address
                      (          rtc.asm):00077                 jmp     PUTS            Out to the console
                      (          rtc.asm):00078         
                      (          rtc.asm):00079                 ENDC                    RTCFEAT
                      (          rtc.asm):00080         
                      (        forth.asm):01434                 include storage.asm
                      (      storage.asm):00001         * Wait until the BSY bit is clear in the CF status register.
                      (      storage.asm):00002         * Upon return the BSY bit is guaranteed to be zero. Z will
                      (      storage.asm):00003         * be set in CC. This subroutine should not be called before
                      (      storage.asm):00004         * the CompactFlash presence has been assessed.
E866 B6C007           (      storage.asm):00005 (4)     CFWAIT  lda     CFSTATR
E869 8580             (      storage.asm):00006 (2)             bita    #CFBSYB
E86B 26F9             (      storage.asm):00007 (3)             bne     CFWAIT
E86D 39               (      storage.asm):00008 (4)             rts
                      (      storage.asm):00009         
                      (      storage.asm):00010         * Wait until the BSY bit is clear and the RDY bit is set.
E86E 8DF6             (      storage.asm):00011 (6)     CFRDY   bsr     CFWAIT
E870 2703             (      storage.asm):00012 (3)             beq     @cfrdy0         Card not busy, proceed
E872 1A04             (      storage.asm):00013 (2)             orcc    #ZFLAG
E874 39               (      storage.asm):00014 (4)             rts
E875 8E2000           (      storage.asm):00015 (3)     @cfrdy0 ldx     #$2000          Maximum poll count
E878 8640             (      storage.asm):00016 (2)             lda     #CFRDYB
E87A B5C007           (      storage.asm):00017 (4)     @cfrdy1 bita    CFSTATR
E87D 2604             (      storage.asm):00018 (3)             bne     @cfrdy2         BSY bit is set, continue
E87F 301F             (      storage.asm):00019 (4+1)           leax    -1,x            Card not ready, decrement poll count
E881 26F7             (      storage.asm):00020 (3)             bne     @cfrdy1         and try again
E883 39               (      storage.asm):00021 (4)     @cfrdy2 rts                     Return with Z set: card not present
                      (      storage.asm):00022         *                               Return with Z clear: card is ready
                      (      storage.asm):00023         
                      (      storage.asm):00024         * Check for possible error condition.
                      (      storage.asm):00025         * Upon return either Z is set (A is zero) and no error occurred or
                      (      storage.asm):00026         * Z is clear and the CF error register contents is returned in A.
E884 8DE0             (      storage.asm):00027 (6)     CFERRCK bsr     CFWAIT
E886 B6C007           (      storage.asm):00028 (4)             lda     CFSTATR
E889 8401             (      storage.asm):00029 (2)             anda    #CFERRB
E88B 2703             (      storage.asm):00030 (3)             beq     @cfeck1
E88D B6C001           (      storage.asm):00031 (4)             lda     CFERROR         The error register contains error details
E890 39               (      storage.asm):00032 (4)     @cfeck1 rts
                      (      storage.asm):00033         
                      (      storage.asm):00034         * Issue CF command. The command code is passed through the B register.
                      (      storage.asm):00035         * Upon return:
                      (      storage.asm):00036         * - Z is set and everything is peachy.
                      (      storage.asm):00037         * - or Z is clear and the CF error register contents will be
                      (      storage.asm):00038         *   returned in A (and mirrored in the global CFERRCD variable).
                      (      storage.asm):00039         * B is preserved.
E891 8DDB             (      storage.asm):00040 (6)     CFCMDIS bsr     CFRDY
E893 270A             (      storage.asm):00041 (3)             beq     @cfciab         Card not ready, abort
E895 D740             (      storage.asm):00042 (3)             stb     CFCMMIR         Update CF command mirror
E897 F7C007           (      storage.asm):00043 (4)             stb     CFCOMDR         Send command to the CF card
E89A 8DE8             (      storage.asm):00044 (6)             bsr     CFERRCK
E89C 9741             (      storage.asm):00045 (3)     @cfcise sta     CFERRCD         CF command issue set error
                      (      storage.asm):00046                 IFNE    DEBUG
                      (      storage.asm):00047                 pshs    a,cc
                      (      storage.asm):00048                 beq     @cfciok
                      (      storage.asm):00049                 lda     #'!
                      (      storage.asm):00050                 jsr     PUTCH
E89E                  (      storage.asm):00051         @cfcidi lda     CFCMMIR
                      (      storage.asm):00052                 ldx     #TBUFF
                      (      storage.asm):00053                 jsr     HDMP2
                      (      storage.asm):00054                 lda     #'/
                      (      storage.asm):00055                 sta     ,x+
                      (      storage.asm):00056                 lda     CFERRCD
                      (      storage.asm):00057                 jsr     HDMP2
                      (      storage.asm):00058                 ldx     #TBUFF
                      (      storage.asm):00059                 jsr     PUTS
                      (      storage.asm):00060                 jsr     PUTCR
                      (      storage.asm):00061                 bra     @cfcict         CF command issue continued
E89E                  (      storage.asm):00062         @cfciok lda     #'#
                      (      storage.asm):00063                 jsr     PUTCH
                      (      storage.asm):00064                 bra     @cfcidi         CF command issue data indication
E89E                  (      storage.asm):00065         @cfcict puls    cc,a
                      (      storage.asm):00066                 ENDC
E89E 39               (      storage.asm):00067 (4)             rts
E89F 86FF             (      storage.asm):00068 (2)     @cfciab lda     #$FF            Dummy error code
E8A1 20F9             (      storage.asm):00069 (3)             bra     @cfcise
                      (      storage.asm):00070         
                      (      storage.asm):00071         * Drive 0 select.
E8A3 8DC9             (      storage.asm):00072 (6)     CFDRSEL bsr     CFRDY
E8A5 86E0             (      storage.asm):00073 (2)             lda     #$E0            Drive 0, LBA mode
E8A7 B7C006           (      storage.asm):00074 (4)             sta     CFDRHDR
E8AA 20C2             (      storage.asm):00075 (3)             bra     CFRDY
                      (      storage.asm):00076         
                      (      storage.asm):00077         * Analyze the response to the CF "Identify Device" request.
E8AC 9E08             (      storage.asm):00078 (4)     CFANTHS ldx     DICEND
E8AE 308836           (      storage.asm):00079 (4+1)           leax    $36,x           Point to the "Model number" field
E8B1 3410             (      storage.asm):00080 (4+2)           pshs    x
E8B3 118614           (      storage.asm):00081 (3)             lde     #$14            Number of 16 bit words to go through
E8B6 EC84             (      storage.asm):00082 (5+0)   @bytswp ldd     ,x
E8B8 1E98             (      storage.asm):00083 (5)             exg     b,a             Byte swapping
E8BA ED81             (      storage.asm):00084 (5+2)           std     ,x++
E8BC 114A             (      storage.asm):00085 (2)             dece
E8BE 26F6             (      storage.asm):00086 (3)             bne     @bytswp
E8C0 6F84             (      storage.asm):00087 (6+0)           clr     ,x
E8C2 3510             (      storage.asm):00088 (4+2)           puls    x
E8C4 BDE2FB           (      storage.asm):00089 (7)             jsr     PUTS            Decent CF cards indicate the capacity that way
E8C7 7EE308           (      storage.asm):00090 (3)             jmp     PUTCR           Up to $10000 blocks is 64 MB!
                      (      storage.asm):00091         
                      (      storage.asm):00092         * Initialize the CompactFlash subsystem.
                      (      storage.asm):00093         * This is run once at boot time. There is no hot plug support here.
E8CA 0F3F             (      storage.asm):00094 (5)     CFINIT  clr     CFCARDP         Clear card present,
                      (      storage.asm):00095                 IFEQ    DEBUG
E8CC 8DA0             (      storage.asm):00096 (6)             bsr     CFRDY
                      (      storage.asm):00097                 ELSE
                      (      storage.asm):00098                 jsr     CFRDY
                      (      storage.asm):00099                 ENDC
E8CE 2730             (      storage.asm):00100 (3)             beq     @cfinab         Card not ready, abort
E8D0 8DD1             (      storage.asm):00101 (6)             bsr     CFDRSEL         Drive 0 select
E8D2 8601             (      storage.asm):00102 (2)             lda     #1              Enable 8-bit data transfers
E8D4 B7C001           (      storage.asm):00103 (4)             sta     CFFEATR
E8D7 C6EF             (      storage.asm):00104 (2)             ldb     #CFSETFT        Issue a CF "Set Feature" command
                      (      storage.asm):00105                 IFEQ    DEBUG
E8D9 8DB6             (      storage.asm):00106 (6)             bsr     CFCMDIS         Not allowed to fail
                      (      storage.asm):00107                 ELSE
                      (      storage.asm):00108                 jsr     CFCMDIS         Not allowed to fail
                      (      storage.asm):00109                 ENDC
E8DB 2623             (      storage.asm):00110 (3)             bne     @cfinab         Abort with card present flag clear
E8DD 8601             (      storage.asm):00111 (2)             lda     #1              Request default PIO mode wo/ IORDY
E8DF B7C002           (      storage.asm):00112 (4)             sta     CFSCNTR
E8E2 8603             (      storage.asm):00113 (2)             lda     #3              ATA-2 "Set Transfer mode"
E8E4 B7C001           (      storage.asm):00114 (4)             sta     CFFEATR
                      (      storage.asm):00115                 IFEQ    DEBUG
E8E7 8DA8             (      storage.asm):00116 (6)             bsr     CFCMDIS         OK to fail
                      (      storage.asm):00117                 ELSE
                      (      storage.asm):00118                 jsr     CFCMDIS         OK to fail
                      (      storage.asm):00119                 ENDC
E8E9 8682             (      storage.asm):00120 (2)             lda     #$82            Disable write caching
E8EB B7C001           (      storage.asm):00121 (4)             sta     CFFEATR
                      (      storage.asm):00122                 IFEQ    DEBUG
E8EE 8DA1             (      storage.asm):00123 (6)             bsr     CFCMDIS         B still has #CFSETF. Also OK to fail
                      (      storage.asm):00124                 ELSE
                      (      storage.asm):00125                 jsr     CFCMDIS         B still has #CFSETF. Also OK to fail
                      (      storage.asm):00126                 ENDC
E8F0 C6EC             (      storage.asm):00127 (2)             ldb     #CFIDDEV        Issue a CF "Identify Device" command
                      (      storage.asm):00128                 IFEQ    DEBUG
E8F2 8D9D             (      storage.asm):00129 (6)             bsr     CFCMDIS         Not allowed to fail
                      (      storage.asm):00130                 ELSE
                      (      storage.asm):00131                 jsr     CFCMDIS         Not allowed to fail
                      (      storage.asm):00132                 ENDC
E8F4 260A             (      storage.asm):00133 (3)             bne     @cfinab         Abort with card present flag clear
E8F6 9E08             (      storage.asm):00134 (4)             ldx     DICEND          Target address is HERE
E8F8 8D07             (      storage.asm):00135 (6)             bsr     CF1SRD          Read one sector
E8FA 8DB0             (      storage.asm):00136 (6)             bsr     CFANTHS         Analyze this!
E8FC 8601             (      storage.asm):00137 (2)             lda     #1
E8FE 973F             (      storage.asm):00138 (3)             sta     CFCARDP         Set the card present flag
E900 39               (      storage.asm):00139 (4)     @cfinab rts
                      (      storage.asm):00140         
                      (      storage.asm):00141         * Read one sector. The LBA parameters are assumed to have been set previously.
                      (      storage.asm):00142         * On input X points to the receiving (at least 512 bytes long) buffer.
E901 B6C007           (      storage.asm):00143 (4)     CF1SRD  lda     CFSTATR
E904 8508             (      storage.asm):00144 (2)             bita    #CFDRQB         Check for DRQ bit in the CF status register
E906 2712             (      storage.asm):00145 (3)             beq     IOERR
E908 10860200         (      storage.asm):00146 (4)             ldw     #CFSCSZ         Sector size is 512 bytes
E90C 108EC000         (      storage.asm):00147 (4)             ldy     #CFDATAR        The data source address
E910 3401             (      storage.asm):00148 (4+1)           pshs    cc
E912 1A50             (      storage.asm):00149 (2)             orcc    #(FFLAG|IFLAG)  Disable maskable interrupts
E914 113B21           (      storage.asm):00150 (6+?)           tfm     y,x+
E917 3501             (      storage.asm):00151 (4+1)           puls    cc              Restore previous interrupt handling mode
E919 39               (      storage.asm):00152 (4)             rts
E91A C611             (      storage.asm):00153 (2)     IOERR   ldb     #17
E91C BDE772           (      storage.asm):00154 (7)             jsr     ERRHDLR         No return
E91F 12               (      storage.asm):00155 (1)     CFR1SRA nop                     For symbolic stack dump debugging purposes
                      (      storage.asm):00156         
                      (      storage.asm):00157         * Write one sector. The LBA parameters are assumed to have been set previously.
                      (      storage.asm):00158         * On input X points to the sending (at least 512 bytes long) buffer.
E920 B6C007           (      storage.asm):00159 (4)     CF1SWR  lda     CFSTATR
E923 8488             (      storage.asm):00160 (2)             anda    #CFBSYB|CFDRQB
E925 8108             (      storage.asm):00161 (2)             cmpa    #CFDRQB         Check for BSY clear and DRQ set
E927 26F7             (      storage.asm):00162 (3)             bne     CF1SWR
E929 10860200         (      storage.asm):00163 (4)             ldw     #CFSCSZ         Sector size is 512 bytes
E92D 108EC000         (      storage.asm):00164 (4)             ldy     #CFDATAR        The data destination address
E931 113A12           (      storage.asm):00165 (6+?)           tfm     x+,y            Note: tfm is interruptible!
E934 39               (      storage.asm):00166 (4)             rts
                      (      storage.asm):00167         
                      (      storage.asm):00168         * 1KB Forth block support primitives. Not dictionary code. More like BIOS ops.
                      (      storage.asm):00169         
                      (      storage.asm):00170         * One block IO preamble: select drive and LBA parameters. On input:
                      (      storage.asm):00171         * ,s has the return address
                      (      storage.asm):00172         * 2,s had the return address for the caller
                      (      storage.asm):00173         * 4,s has the target block number
E935 BDE866           (      storage.asm):00174 (7)     CF1BPRE jsr     CFWAIT
E938 BDE8A3           (      storage.asm):00175 (7)             jsr     CFDRSEL         Set drive and head parameters
E93B EC64             (      storage.asm):00176 (5+1)           ldd     4,s
E93D 1048             (      storage.asm):00177 (2)             lsld                    Convert block number to sector number
E93F F7C003           (      storage.asm):00178 (4)             stb     CFSNUMR         LBA 7-0
E942 B7C004           (      storage.asm):00179 (4)             sta     CFCLOWR         LBA 15-8
E945 1FA8             (      storage.asm):00180 (4)             tfr     cc,a
E947 8401             (      storage.asm):00181 (2)             anda    #CFLAG
E949 B7C005           (      storage.asm):00182 (4)             sta     CFCHIGR         LBA 23-16 (carry to cylinder high)
E94C 8602             (      storage.asm):00183 (2)             lda     #2              2 IDE sectors per Forth block
E94E B7C002           (      storage.asm):00184 (4)             sta     CFSCNTR
E951 39               (      storage.asm):00185 (4)             rts
                      (      storage.asm):00186         
                      (      storage.asm):00187         * Read one block from CF device. On input:
                      (      storage.asm):00188         * ,s has the return address
                      (      storage.asm):00189         * 2,s has the target block number
                      (      storage.asm):00190         * 4,s has the buffer base address
                      (      storage.asm):00191         * Upon return, Y will be preserved.
E952 0D3F             (      storage.asm):00192 (4)     CF1BKRD tst     CFCARDP
E954 2602             (      storage.asm):00193 (3)             bne     @ctnued
E956 20C2             (      storage.asm):00194 (3)             bra     IOERR           Card not present--CF subsystem not initialized
E958 1F27             (      storage.asm):00195 (4)     @ctnued tfr     y,v
E95A 8DD9             (      storage.asm):00196 (6)             bsr     CF1BPRE
E95C C620             (      storage.asm):00197 (2)             ldb     #CFRSCTS        Issue a "Read sectors" CF command
E95E BDE891           (      storage.asm):00198 (7)             jsr     CFCMDIS
E961 AE64             (      storage.asm):00199 (5+1)           ldx     4,s             Target buffer address to X
E963 8D9C             (      storage.asm):00200 (6)             bsr     CF1SRD          Read the even sector from CF device
E965 BDE866           (      storage.asm):00201 (7)             jsr     CFWAIT          Wait for next sector to become available
E968 8D97             (      storage.asm):00202 (6)             bsr     CF1SRD          and read the odd sector
E96A 1F72             (      storage.asm):00203 (4)             tfr     v,y
E96C 39               (      storage.asm):00204 (4)             rts
                      (      storage.asm):00205         
                      (      storage.asm):00206         * Write one block to CF device. Upon entry:
                      (      storage.asm):00207         * ,s has the return address
                      (      storage.asm):00208         * 2,s has the target block number
                      (      storage.asm):00209         * 4,s has the buffer base address
                      (      storage.asm):00210         * Upon return, Y will be preserved.
E96D 0D3F             (      storage.asm):00211 (4)     CF1BKWR tst     CFCARDP
E96F 2602             (      storage.asm):00212 (3)             bne     @ctnued
E971 20A7             (      storage.asm):00213 (3)             bra     IOERR           Card not present--CF subsystem not initialized
E973 1F27             (      storage.asm):00214 (4)     @ctnued tfr     y,v
E975 8DBE             (      storage.asm):00215 (6)             bsr     CF1BPRE
E977 C630             (      storage.asm):00216 (2)             ldb     #CFWSCTS        Issue a "Write sectors" CF command
E979 BDE891           (      storage.asm):00217 (7)             jsr     CFCMDIS
E97C AE64             (      storage.asm):00218 (5+1)           ldx     4,s             Source buffer address to X
E97E 8DA0             (      storage.asm):00219 (6)             bsr     CF1SWR          Write the even sector to CF device
E980 BDE866           (      storage.asm):00220 (7)             jsr     CFWAIT          Wait for next sector to become available
E983 8D9B             (      storage.asm):00221 (6)             bsr     CF1SWR          and write the odd sector
E985 1F72             (      storage.asm):00222 (4)             tfr     v,y
E987 39               (      storage.asm):00223 (4)             rts
                      (      storage.asm):00224         
                      (        forth.asm):01435         
                      (        forth.asm):01436         ******************************************************************************
                      (        forth.asm):01437         * Dictionary begins. In the code below ANSI refers to ANSI-X3.215-1994
                      (        forth.asm):01438         * Draft 6 proposal (i.e. the free spec).
                      (        forth.asm):01439         
E988 0D               (        forth.asm):01440         EBUFS   fcb     13              79-STANDARD (REQ145)
E989 454D5054592D4255 (        forth.asm):01441                 fcc     'EMPTY-BUFFERS' ( -- )
     4646455253
E996 0000             (        forth.asm):01442                 fdb     0               Last dictionary entry
E998 C7               (        forth.asm):01443                 RFCS
E999 7EE383           (        forth.asm):01444 (3)             jmp     EMPTYB
                      (        forth.asm):01445         
E99C 0C               (        forth.asm):01446         SAVBUF  fcb     12              79-STANDARD (REQ221)
E99D 534156452D425546 (        forth.asm):01447                 fcc     'SAVE-BUFFERS'  ( -- )
     46455253
E9A9 E988             (        forth.asm):01448                 fdb     EBUFS
E9AB C7               (        forth.asm):01449                 RFCS
E9AC 8E0440           (        forth.asm):01450 (3)             ldx     #BUF0
E9AF 8D03             (        forth.asm):01451 (6)             bsr     WBIFDRT
E9B1 8E0850           (        forth.asm):01452 (3)             ldx     #BUF1
                      (        forth.asm):01453         * Write buffer back to mass storage if marked as dirty.
                      (        forth.asm):01454         * The dirty bit is cleared but the buffer contents itself is not.
                      (        forth.asm):01455         * The buffer will continue to be marked as "in use."
                      (        forth.asm):01456         * On input X has has the base buffer address. Both D and X
                      (        forth.asm):01457         * are preserved. Y is not.
E9B4 3406             (        forth.asm):01458 (4+2)   WBIFDRT pshs    d
E9B6 3410             (        forth.asm):01459 (4+2)           pshs    x               Base buffer address (arg1 to CF1BKWR)
E9B8 8605             (        forth.asm):01460 (2)             lda     #BINUSE|BDIRTY
E9BA A4890401         (        forth.asm):01461 (4+3)           anda    BOFLAGS,x
E9BE 8105             (        forth.asm):01462 (2)             cmpa    #BINUSE|BDIRTY
E9C0 2616             (        forth.asm):01463 (3)             bne     @alldon         Block not in use or in use but not dirty
E9C2 AE890402         (        forth.asm):01464 (5+3)           ldx     BOBLKNO,x
E9C6 3410             (        forth.asm):01465 (4+2)           pshs    x               Block number (arg0 to CF1BKWR)
E9C8 8DA3             (        forth.asm):01466 (6)             bsr     CF1BKWR         Write data buffer to CF
E9CA 3262             (        forth.asm):01467 (4+1)           leas    2,s             Drop one cell from the system stack (blknum)
E9CC AEE4             (        forth.asm):01468 (5+0)           ldx     ,s              Retrieve base buffer address
E9CE 30890401         (        forth.asm):01469 (4+3)           leax    BOFLAGS,x
E9D2 A684             (        forth.asm):01470 (4+0)           lda     ,x              Acquire the 'flags' field
E9D4 84FB             (        forth.asm):01471 (2)             anda    #^BDIRTY        Clear the dirty bit
E9D6 A784             (        forth.asm):01472 (4+0)           sta     ,x              and update the 'flags' field
E9D8 3510             (        forth.asm):01473 (4+2)   @alldon puls    x               Restore X
E9DA 3506             (        forth.asm):01474 (4+2)           puls    d               and D
E9DC 39               (        forth.asm):01475 (4)             rts
                      (        forth.asm):01476         
E9DD 05               (        forth.asm):01477         FLUSH   fcb     5               79-STANDARD (REF)
E9DE 464C555348       (        forth.asm):01478                 fcc     'FLUSH'         ( -- ) An alias for SAVE-BUFFERS
E9E3 E99C             (        forth.asm):01479                 fdb     SAVBUF
E9E5 C7               (        forth.asm):01480                 RFCS
E9E6 20C4             (        forth.asm):01481                 RFXT    bra,SAVBUF+15   XT for SAVE-BUFFERS
                      (        forth.asm):01482         
E9E8 06               (        forth.asm):01483         UPDATE  fcb     6               79-STANDARD (REQ229)
E9E9 555044415445     (        forth.asm):01484                 fcc     'UPDATE'        ( -- )
E9EF E9DD             (        forth.asm):01485                 fdb     FLUSH
E9F1 C7               (        forth.asm):01486                 RFCS
E9F2 9E1A             (        forth.asm):01487 (4)             ldx     MRUBUFA         Most recently used buffer base address
E9F4 30890401         (        forth.asm):01488 (4+3)           leax    BOFLAGS,x       Buffer 'flags' field's address to X
E9F8 A684             (        forth.asm):01489 (4+0)           lda     ,x              Buffer 'flags' field to A
E9FA 8501             (        forth.asm):01490 (2)             bita    #BINUSE         Is that buffer in use?
E9FC 2704             (        forth.asm):01491 (3)             beq     @upddon         No, we're done here
E9FE 8A04             (        forth.asm):01492 (2)             ora     #BDIRTY
EA00 A784             (        forth.asm):01493 (4+0)           sta     ,x              Set the dirty bit
EA02 39               (        forth.asm):01494 (4)     @upddon rts
                      (        forth.asm):01495         
EA03 06               (        forth.asm):01496         BUFFER  fcb     6               79-STANDARD (REQ130)
EA04 425546464552     (        forth.asm):01497                 fcc     'BUFFER'        ( ublkno -- addr )
EA0A E9E8             (        forth.asm):01498                 fdb     UPDATE
EA0C C7               (        forth.asm):01499                 RFCS
EA0D BDE801           (        forth.asm):01500 (7)             jsr     NPOP
EA10 1F12             (        forth.asm):01501 (4)             tfr     x,y             ublkno to Y
                      (        forth.asm):01502         * Block lookup.
EA12 8E0440           (        forth.asm):01503 (3)             ldx     #BUF0           Base address of the first resident buffer
EA15 C602             (        forth.asm):01504 (2)             ldb     #2              Number of resident buffers
EA17 A6890401         (        forth.asm):01505 (4+3)   @blkup  lda     BOFLAGS,x       Buffer flags to A
EA1B 8501             (        forth.asm):01506 (2)             bita    #BINUSE         Buffer in use?
EA1D 270C             (        forth.asm):01507 (3)             beq     @nxtbuf         No
EA1F 10AC890402       (        forth.asm):01508 (6+3)           cmpy    BOBLKNO,x       Buffer is in use. Block number match?
EA24 2605             (        forth.asm):01509 (3)             bne     @nxtbuf         No
EA26 9F1A             (        forth.asm):01510 (4)     @retba  stx     MRUBUFA         Block number match. Mark as the MRU buffer
EA28 3610             (        forth.asm):01511                 UCNPUSH                 and return its base address via the data stack
EA2A 39               (        forth.asm):01512 (4)             rts
EA2B 30890410         (        forth.asm):01513 (4+3)   @nxtbuf leax    BFDISP,x        Point to the next buffer
EA2F 5A               (        forth.asm):01514 (1)             decb
EA30 26E5             (        forth.asm):01515 (3)             bne     @blkup
                      (        forth.asm):01516         * The block number in Y is not currently in use. Assign a buffer to it.
EA32 8E0440           (        forth.asm):01517 (3)             ldx     #BUF0
EA35 9C1A             (        forth.asm):01518 (4)             cmpx    MRUBUFA         Most recently used buffer address
EA37 2603             (        forth.asm):01519 (3)             bne     @bselct
EA39 8E0850           (        forth.asm):01520 (3)             ldx     #BUF1
                      (        forth.asm):01521         * At this point X has the base address of the block we are interested in.
EA3C 3420             (        forth.asm):01522 (4+2)   @bselct pshs    y               Backup the target block number
EA3E BDE9B4           (        forth.asm):01523 (7)             jsr     WBIFDRT         Write back if dirty. X and D are preserved
EA41 8601             (        forth.asm):01524 (2)             lda     #BINUSE
EA43 A7890401         (        forth.asm):01525 (4+3)           sta     BOFLAGS,x       Update the buffer's 'flags' field
EA47 3520             (        forth.asm):01526 (4+2)           puls    y               Restore the target block number
EA49 10AF890402       (        forth.asm):01527 (6+3)           sty     BOBLKNO,x       and update the 'blknum' field as well
EA4E 20D6             (        forth.asm):01528 (3)             bra     @retba
                      (        forth.asm):01529         
EA50 05               (        forth.asm):01530         BLOCK   fcb     5               79-STANDARD (REQ191)
EA51 424C4F434B       (        forth.asm):01531                 fcc     'BLOCK'         ( ublkno -- addr )
EA56 EA03             (        forth.asm):01532                 fdb     BUFFER
EA58 C7               (        forth.asm):01533                 RFCS
EA59 8DB2             (        forth.asm):01534                 RFXT    bsr,BUFFER+9    XT for BUFFER
                      (        forth.asm):01535         * Upon return Y has has the block number.
EA5B 3710             (        forth.asm):01536                 UCNPOP                  Buffer base address to X
EA5D 3410             (        forth.asm):01537 (4+2)           pshs    x               Push base buffer address as Arg1 to CF1BKRD
EA5F A6890401         (        forth.asm):01538 (4+3)           lda     BOFLAGS,x       Retrieve buffer 'flags' field
                      (        forth.asm):01539                 IFNE    DEBUG
                      (        forth.asm):01540                 bita    #BINUSE
                      (        forth.asm):01541                 bne     @blkctd
                      (        forth.asm):01542                 lda     #10             Assertion failed
                      (        forth.asm):01543                 jsr     ERRHDLR         No return
                      (        forth.asm):01544                 ENDC                    DEBUG
EA63 8402             (        forth.asm):01545 (2)     @blkctd anda    #BMAPPD         Has the block been read yet?
EA65 2613             (        forth.asm):01546 (3)             bne     @bkmapd         Yes
EA67 3420             (        forth.asm):01547 (4+2)           pshs    y               No. Push block number as arg0 to CF1BKRD
                      (        forth.asm):01548         * Map in the block from the CF device. System stack structure is as follows:
                      (        forth.asm):01549         * ,s has the target block number.
                      (        forth.asm):01550         * 2,s has the buffer base address.
EA69 BDE952           (        forth.asm):01551 (7)             jsr     CF1BKRD
EA6C 3262             (        forth.asm):01552 (4+1)           leas    2,s             Drop one cell from the system stack
                      (        forth.asm):01553         * Update the buffer's flags field.
EA6E AEE4             (        forth.asm):01554 (5+0)           ldx     ,s              Base buffer address
EA70 30890401         (        forth.asm):01555 (4+3)           leax    BOFLAGS,x       Buffer 'flags' field address to X
EA74 A684             (        forth.asm):01556 (4+0)           lda     ,x              Read buffer 'flags' field
EA76 8A02             (        forth.asm):01557 (2)             ora     #BMAPPD
EA78 A784             (        forth.asm):01558 (4+0)           sta     ,x              and mark it as read
EA7A 3510             (        forth.asm):01559 (4+2)   @bkmapd puls    x               Buffer base address to X
EA7C 3610             (        forth.asm):01560                 UCNPUSH
EA7E 39               (        forth.asm):01561 (4)             rts
                      (        forth.asm):01562         
EA7F 03               (        forth.asm):01563         BLK     fcb     3
EA80 424C4B           (        forth.asm):01564                 fcc     'BLK'
EA83 EA50             (        forth.asm):01565                 fdb     BLOCK
EA85 C7               (        forth.asm):01566                 RFCS
EA86 8E0124           (        forth.asm):01567 (3)             ldx     #UBLK
EA89 7EE7F3           (        forth.asm):01568 (3)             jmp     NPUSH
                      (        forth.asm):01569         
EA8C 03               (        forth.asm):01570         TOIN    fcb     3
EA8D 3E494E           (        forth.asm):01571                 fcc     '>IN'
EA90 EA7F             (        forth.asm):01572                 fdb     BLK
EA92 C7               (        forth.asm):01573                 RFCS
EA93 8E0122           (        forth.asm):01574 (3)             ldx     #UTOIN
EA96 7EE7F3           (        forth.asm):01575 (3)             jmp     NPUSH
                      (        forth.asm):01576         
EA99 03               (        forth.asm):01577         SCR     fcb     3
EA9A 534352           (        forth.asm):01578                 fcc     'SCR'
EA9D EA8C             (        forth.asm):01579                 fdb     TOIN
EA9F C7               (        forth.asm):01580                 RFCS
EAA0 8E0126           (        forth.asm):01581 (3)             ldx     #USCR
EAA3 7EE7F3           (        forth.asm):01582 (3)             jmp     NPUSH
                      (        forth.asm):01583         
                      (        forth.asm):01584         * Functionally: : LINE 6 SHIFT SCR @ BLOCK + ;
EAA6 04               (        forth.asm):01585         LINE    fcb     4               79-STANDARD (REF)
EAA7 4C494E45         (        forth.asm):01586                 fcc     'LINE'
EAAB EA99             (        forth.asm):01587                 fdb     SCR
EAAD C7               (        forth.asm):01588                 RFCS
EAAE 8E0006           (        forth.asm):01589 (3)             ldx     #6
EAB1 BDE7F3           (        forth.asm):01590 (7)             jsr     NPUSH
EAB4 BDF963           (        forth.asm):01591                 RFXT    jsr,SHIFT+8     XT for SHIFT
EAB7 9E26             (        forth.asm):01592 (4)             ldx     USCR
EAB9 BDE7F3           (        forth.asm):01593 (7)             jsr     NPUSH
EABC 8D9B             (        forth.asm):01594                 RFXT    bsr,BLOCK+8     XT for BLOCK
EABE 7EF8DB           (        forth.asm):01595                 RFXT    jmp,PLUS+4      XT for +
                      (        forth.asm):01596         
                      (        forth.asm):01597         * Functionally:
                      (        forth.asm):01598         * : INDEX 1+ SWAP DO
                      (        forth.asm):01599         *     CR   I SCR !
                      (        forth.asm):01600         *     0 LINE 64 TYPE
                      (        forth.asm):01601         *   LOOP ;
EAC1 05               (        forth.asm):01602         INDEX   fcb     5               79-STANDARD (REF)
EAC2 494E444558       (        forth.asm):01603                 fcc     'INDEX'         ( n1 n2 -- )
EAC7 EAA6             (        forth.asm):01604                 fdb     LINE
EAC9 C7               (        forth.asm):01605                 RFCS
EACA BDE801           (        forth.asm):01606 (7)             jsr     NPOP            N2 to X
EACD 3001             (        forth.asm):01607 (4+1)           leax    1,x             1+
EACF 1F12             (        forth.asm):01608 (4)             tfr     x,y             Y has the limit (not reached)
EAD1 BDE801           (        forth.asm):01609 (7)             jsr     NPOP            X has the index (N1)
EAD4 BDE308           (        forth.asm):01610 (7)     @indlop jsr     PUTCR           CR
EAD7 9F26             (        forth.asm):01611 (4)             stx     USCR            I SCR !
EAD9 3430             (        forth.asm):01612 (4+4)           pshs    y,x
EADB 1FC1             (        forth.asm):01613 (4)             tfr     0,x
EADD BDE7F3           (        forth.asm):01614 (7)             jsr     NPUSH
EAE0 8DCC             (        forth.asm):01615                 RFXT    bsr,LINE+7      XT for LINE
EAE2 8E0040           (        forth.asm):01616 (3)             ldx     #64
EAE5 BDE7F3           (        forth.asm):01617 (7)             jsr     NPUSH
EAE8 BDF73F           (        forth.asm):01618                 RFXT    jsr,TYPE+7      XT for TYPE
EAEB 3530             (        forth.asm):01619 (4+4)           puls    x,y             Restore loop parameters
EAED 3001             (        forth.asm):01620 (4+1)           leax    1,x
EAEF 103712           (        forth.asm):01621 (4)             cmpr    x,y
EAF2 26E0             (        forth.asm):01622 (3)             bne     @indlop
EAF4 39               (        forth.asm):01623 (4)             rts
                      (        forth.asm):01624         
EAF5 05               (        forth.asm):01625         TICKS   fcb     5               Non-standard
EAF6 5449434B53       (        forth.asm):01626                 fcc     'TICKS'         ( -- tickslow tickshigh )
EAFB EAC1             (        forth.asm):01627                 fdb     INDEX
EAFD C7               (        forth.asm):01628                 RFCS
                      (        forth.asm):01629                 IFNE    RTCFEAT
                      (        forth.asm):01630                 pshs    cc
                      (        forth.asm):01631                 orcc    #FFLAG          Mask FIRQ while reading the double cell
                      (        forth.asm):01632                 ldx     TIKSLOW
                      (        forth.asm):01633                 ldy     TIKSHI
                      (        forth.asm):01634                 puls    cc              Restore the previous interrupt handling mode
                      (        forth.asm):01635                 jsr     NPUSH
                      (        forth.asm):01636                 tfr     y,x
                      (        forth.asm):01637                 ELSE
EAFE 1FC1             (        forth.asm):01638 (4)             tfr     0,x
EB00 BDE7F3           (        forth.asm):01639 (7)             jsr     NPUSH
                      (        forth.asm):01640                 ENDC                    RTCFEAT
EB03 7EE7F3           (        forth.asm):01641 (3)             jmp     NPUSH
                      (        forth.asm):01642         
EB06 04               (        forth.asm):01643         RTCFTCH fcb     4               Non-standard
EB07 52544340         (        forth.asm):01644                 fcc     'RTC@'          ( regoff -- byteval )
EB0B EAF5             (        forth.asm):01645                 fdb     TICKS
EB0D C7               (        forth.asm):01646                 RFCS
                      (        forth.asm):01647                 IFNE    RTCFEAT
                      (        forth.asm):01648                 tst     RTCAVL
                      (        forth.asm):01649                 beq     RTNOCON
                      (        forth.asm):01650         * An MC146818 RTC is present. Let's get down to business.
                      (        forth.asm):01651                 jsr     NPOP            REGOFF to X
                      (        forth.asm):01652                 tfr     x,d
                      (        forth.asm):01653                 tfr     b,a
                      (        forth.asm):01654                 jsr     RTREGRD
                      (        forth.asm):01655                 clra                    BYTEVAL to D
                      (        forth.asm):01656                 pshu    d               Unchecked NPUSH of D
                      (        forth.asm):01657                 rts
EB0E                  (        forth.asm):01658         RTNOCON ldb     #17             RTC not detected on bootup -> I/O error
                      (        forth.asm):01659                 jsr     ERRHDLR         No return
                      (        forth.asm):01660                 ELSE
EB0E BDFC33           (        forth.asm):01661                 RFXT    jsr,DROP+7      XT for DROP
EB11 7EF93F           (        forth.asm):01662                 RFXT    jmp,ZEROL+4     XT for 0
                      (        forth.asm):01663                 ENDC                    RTCFEAT
                      (        forth.asm):01664         
EB14 04               (        forth.asm):01665         RTCSTOR fcb     4               Non-standard
EB15 52544321         (        forth.asm):01666                 fcc     'RTC!'          ( byteval regoff -- )
EB19 EB06             (        forth.asm):01667                 fdb     RTCFTCH
EB1B C7               (        forth.asm):01668                 RFCS
                      (        forth.asm):01669                 IFNE    RTCFEAT
                      (        forth.asm):01670                 tst     RTCAVL
                      (        forth.asm):01671                 beq     RTNOCON
                      (        forth.asm):01672                 jsr     MIN2PST         At least two cells need to be stacked up
                      (        forth.asm):01673                 lda     1,u             REGOFF to A
                      (        forth.asm):01674                 ldb     3,u             BYTEVAL to B
                      (        forth.asm):01675                 leau    4,u             Drop two cells from the data stack
                      (        forth.asm):01676                 jmp     RTREGWR
                      (        forth.asm):01677                 ELSE
EB1C 7EF4A7           (        forth.asm):01678                 RFXT    jmp,TWODROP+8   XT for 2 DROP
                      (        forth.asm):01679                 ENDC                    RTCFEAT
                      (        forth.asm):01680         
EB1F 04               (        forth.asm):01681         LIST    fcb     4               79-STANDARD (REQ109)
EB20 4C495354         (        forth.asm):01682                 fcc     'LIST'          ( ublkno -- )
EB24 EB14             (        forth.asm):01683                 fdb     RTCSTOR
EB26 C7               (        forth.asm):01684                 RFCS
EB27 0D3F             (        forth.asm):01685 (4)             tst     CFCARDP
EB29 2605             (        forth.asm):01686 (3)             bne     @lstpro
EB2B C611             (        forth.asm):01687 (2)             ldb     #17             IO error
EB2D BDE772           (        forth.asm):01688 (7)             jsr     ERRHDLR         No return
EB30 BDFC23           (        forth.asm):01689         @lstpro RFXT    jsr,DUP+6       XT for DUP
EB33 BDEA59           (        forth.asm):01690                 RFXT    jsr,BLOCK+8     XT for BLOCK
                      (        forth.asm):01691         * TOS now has the base buffer address.
EB36 BDE801           (        forth.asm):01692 (7)             jsr     NPOP
EB39 1F12             (        forth.asm):01693 (4)             tfr     x,y             Base buffer address to Y
EB3B BDE801           (        forth.asm):01694 (7)             jsr     NPOP            ublkno to X
EB3E 9F26             (        forth.asm):01695 (4)             stx     USCR            Update SCR's value
EB40 C610             (        forth.asm):01696 (2)             ldb     #16             16 lines to go
EB42 3404             (        forth.asm):01697 (4+1)   @lstlop pshs    b
EB44 BDE308           (        forth.asm):01698 (7)             jsr     PUTCR
EB47 1F21             (        forth.asm):01699 (4)             tfr     y,x
EB49 BDE7F3           (        forth.asm):01700 (7)             jsr     NPUSH           Start address for TYPE
EB4C 8E0040           (        forth.asm):01701 (3)             ldx     #64
EB4F BDE7F3           (        forth.asm):01702 (7)             jsr     NPUSH           Byte count for TYPE
EB52 103012           (        forth.asm):01703 (4)             addr    x,y
EB55 BDF73F           (        forth.asm):01704                 RFXT    jsr,TYPE+7      XT for TYPE
EB58 3504             (        forth.asm):01705 (4+1)           puls    b
EB5A 5A               (        forth.asm):01706 (1)             decb
EB5B 26E5             (        forth.asm):01707 (3)             bne     @lstlop
EB5D 39               (        forth.asm):01708 (4)             rts
                      (        forth.asm):01709         
                      (        forth.asm):01710         * Convert a single cell to a double. Non-transactional.
EB5E 03               (        forth.asm):01711         STOD    fcb     3               ANSI Core ( n -- d )
EB5F 533E44           (        forth.asm):01712                 fcc     'S>D'
EB62 EB1F             (        forth.asm):01713                 fdb     LIST
EB64 C7               (        forth.asm):01714                 RFCS
EB65 BDE801           (        forth.asm):01715 (7)             jsr     NPOP            N to X
EB68 3610             (        forth.asm):01716                 UCNPUSH                 Push back low order cell
EB6A 104F             (        forth.asm):01717 (2)             clrd                    High order cell: default to N >= 0
EB6C 1E01             (        forth.asm):01718 (5)             exg     d,x
EB6E 4D               (        forth.asm):01719 (1)             tsta
EB6F 102AFC80         (        forth.asm):01720 (5)             lbpl    NPUSH
EB73 301F             (        forth.asm):01721 (4+1)           leax    -1,x            N is < 0. Sign extension is required. -1 to X
EB75 7EE7F3           (        forth.asm):01722 (3)             jmp     NPUSH
                      (        forth.asm):01723         
EB78 04               (        forth.asm):01724         NCLR    fcb     4               Non-standard
EB79 4E434C52         (        forth.asm):01725                 fcc     'NCLR'          Clear the data (normal) stack
EB7D EB5E             (        forth.asm):01726                 fdb     STOD
EB7F C7               (        forth.asm):01727                 RFCS
EB80 CE0298           (        forth.asm):01728 (3)             ldu     #NSTBOT
EB83 39               (        forth.asm):01729 (4)             rts
                      (        forth.asm):01730         
EB84 04               (        forth.asm):01731         RCLR    fcb     4               Non-standard
EB85 52434C52         (        forth.asm):01732                 fcc     'RCLR'          Clear the return stack
EB89 EB78             (        forth.asm):01733                 fdb     NCLR
EB8B C7               (        forth.asm):01734                 RFCS
EB8C 8E0318           (        forth.asm):01735 (3)             ldx     #RSTBOT
EB8F 9F00             (        forth.asm):01736 (4)             stx     RSP
EB91 0F30             (        forth.asm):01737 (5)             clr     RDEPTH
EB93 39               (        forth.asm):01738 (4)             rts
                      (        forth.asm):01739         
EB94 05               (        forth.asm):01740         DEPTH   fcb     5               79-STANDARD (REQ238)
EB95 4445505448       (        forth.asm):01741                 fcc     'DEPTH'
EB9A EB84             (        forth.asm):01742                 fdb     RCLR
EB9C C7               (        forth.asm):01743                 RFCS
EB9D CC0298           (        forth.asm):01744 (3)             ldd     #NSTBOT         Bottom data stack address
EBA0 103230           (        forth.asm):01745 (4)             subr    u,d             D has the current value of the data stack ptr
EBA3 1044             (        forth.asm):01746 (2)             lsrd                    divided by 2
EBA5 1F01             (        forth.asm):01747 (4)             tfr     d,x
EBA7 7EE7F3           (        forth.asm):01748 (3)             jmp     NPUSH
                      (        forth.asm):01749         
EBAA 06               (        forth.asm):01750         CREATE  fcb     6               79-STANDARD (REQ239)
EBAB 435245415445     (        forth.asm):01751                 fcc     'CREATE'
EBB1 EB94             (        forth.asm):01752                 fdb     DEPTH
EBB3 C7               (        forth.asm):01753                 RFCS
EBB4 BDE51F           (        forth.asm):01754 (7)             jsr     LOCWRT          Code entry point returned to Y
EBB7 868E             (        forth.asm):01755 (2)             lda     #LDXOPC         LDX immediate
EBB9 A7A0             (        forth.asm):01756 (4+1)           sta     ,y+
EBBB 1F21             (        forth.asm):01757 (4)             tfr     y,x
EBBD 3008             (        forth.asm):01758 (4+1)           leax    8,x
EBBF AFA1             (        forth.asm):01759 (5+2)           stx     ,y++
EBC1 86BD             (        forth.asm):01760 (2)             lda     #JSROPC         JSR extended
EBC3 BDE594           (        forth.asm):01761 (7)             jsr     VARCON1         Compile JSR NPUSH
EBC6 8639             (        forth.asm):01762 (2)             lda     #RTSOPC         RTS inherent
EBC8 A7A0             (        forth.asm):01763 (4+1)           sta     ,y+
EBCA 3122             (        forth.asm):01764 (4+1)           leay    2,y             Reserve room for a possible DOES> clause
EBCC 109F08           (        forth.asm):01765 (5)     CREAT1  sty     DICEND
EBCF 9E0C             (        forth.asm):01766 (4)             ldx     BDICEND         This is set by LOCWRT (was IY)
EBD1 9F06             (        forth.asm):01767 (4)             stx     LSTWAD
EBD3 39               (        forth.asm):01768 (4)             rts
                      (        forth.asm):01769         
EBD4 C5               (        forth.asm):01770         DOES    fcb     $C5             79-STANDARD (REQ168)
EBD5 444F45533E       (        forth.asm):01771                 fcc     'DOES>'
EBDA EBAA             (        forth.asm):01772                 fdb     CREATE
EBDC C7               (        forth.asm):01773                 RFCS
EBDD 8EEBE3           (        forth.asm):01774 (3)             ldx     #DOESEX         JSR #DOESEX is compiled (no actual return)
EBE0 7EE169           (        forth.asm):01775 (3)             jmp     EMXASXT         Set as action component
                      (        forth.asm):01776         
EBE3 9E06             (        forth.asm):01777 (4)     DOESEX  ldx     LSTWAD          Header of the last dictionary entry
EBE5 E680             (        forth.asm):01778 (4+1)           ldb     ,x+
EBE7 C41F             (        forth.asm):01779 (2)             andb    #WRLNMSK        Extract word length
EBE9 3A               (        forth.asm):01780 (1)             abx
                      (        forth.asm):01781                 IFNE    RELFEAT
EBEA 3009             (        forth.asm):01782 (4+1)           leax    9,x             2 bytes/backlink, 1/cksum, 6 bytes code offset
                      (        forth.asm):01783                 ELSE
                      (        forth.asm):01784                 leax    8,x             2 bytes/backlink, 6 bytes code offset
                      (        forth.asm):01785                 ENDC                    RELFEAT
EBEC A684             (        forth.asm):01786 (4+0)           lda     ,x
EBEE 8139             (        forth.asm):01787 (2)             cmpa    #RTSOPC         RTS inherent
EBF0 2705             (        forth.asm):01788 (3)             beq     @dosex1
EBF2 C60E             (        forth.asm):01789 (2)             ldb     #14             No matching CREATE
EBF4 BDE772           (        forth.asm):01790 (7)             jsr     ERRHDLR         No return
EBF7 867E             (        forth.asm):01791 (2)     @dosex1 lda     #JMPOPC         JMP extended
EBF9 A780             (        forth.asm):01792 (4+1)           sta     ,x+             Overwrite RTS opcode
EBFB 3520             (        forth.asm):01793 (4+2)           puls    y
EBFD 10AF84           (        forth.asm):01794 (6+0)           sty     ,x
EC00 39               (        forth.asm):01795 (4)             rts
                      (        forth.asm):01796         
EC01 87               (        forth.asm):01797         LITERAL fcb     $87             79-STANDARD (REQ215)
EC02 4C49544552414C   (        forth.asm):01798                 fcc     'LITERAL'
EC09 EBD4             (        forth.asm):01799                 fdb     DOES
EC0B C7               (        forth.asm):01800                 RFCS
EC0C BDE801           (        forth.asm):01801 (7)             jsr     NPOP
EC0F 0D21             (        forth.asm):01802 (4)             tst     USTATE+1
EC11 2601             (        forth.asm):01803 (3)             bne     @comp
EC13 39               (        forth.asm):01804 (4)             rts                     The standard defines no semantics in interp mode
EC14 109E08           (        forth.asm):01805 (5)     @comp   ldy     DICEND
EC17 868E             (        forth.asm):01806 (2)             lda     #LDXOPC         LDX immediate
EC19 BDE597           (        forth.asm):01807 (7)             jsr     VARCON2         Compile LDX #X
EC1C 109F08           (        forth.asm):01808 (5)             sty     DICEND          Update HERE
EC1F 8EE7F3           (        forth.asm):01809 (3)             ldx     #NPUSH
EC22 7EE169           (        forth.asm):01810 (3)             jmp     EMXASXT         Set NPUSH as action component
                      (        forth.asm):01811         
                      (        forth.asm):01812         * Functionally: : CONSTANT CREATE , DOES> @ ;
                      (        forth.asm):01813         * The following code produces more compact code.
EC25 08               (        forth.asm):01814         CONS    fcb     8               79-STANDARD (REQ185)
EC26 434F4E5354414E54 (        forth.asm):01815                 fcc     'CONSTANT'
EC2E EC01             (        forth.asm):01816                 fdb     LITERAL
EC30 C7               (        forth.asm):01817                 RFCS
EC31 BDE801           (        forth.asm):01818 (7)             jsr     NPOP
EC34 1F16             (        forth.asm):01819 (4)             tfr     x,w
EC36 BDE51F           (        forth.asm):01820 (7)             jsr     LOCWRT          Create dictionary entry
EC39 1F61             (        forth.asm):01821 (4)             tfr     w,x
EC3B 868E             (        forth.asm):01822 (2)             lda     #LDXOPC         ldx immediate
EC3D BDE597           (        forth.asm):01823 (7)             jsr     VARCON2         Compile LDX #CSTVAL
EC40 BDE592           (        forth.asm):01824 (7)             jsr     VARCON          Compile JMP NPUSH
                      (        forth.asm):01825                 IFNE    RELFEAT
EC43 8D87             (        forth.asm):01826 (6)             bsr     CREAT1
EC45 2059             (        forth.asm):01827                 RFXT    bra,MONITOR+10  XT for MONITOR
                      (        forth.asm):01828                 ELSE
                      (        forth.asm):01829                 bra     CREAT1
                      (        forth.asm):01830                 ENDC                    RELFEAT
                      (        forth.asm):01831         
                      (        forth.asm):01832         * Functionally: : VARIABLE CREATE 2 ALLOT ;
                      (        forth.asm):01833         * However we can save three bytes per instance with the following code.
EC47 08               (        forth.asm):01834         VARI    fcb     8               79-STANDARD (REQ227)
EC48 5641524941424C45 (        forth.asm):01835                 fcc     'VARIABLE'
EC50 EC25             (        forth.asm):01836                 fdb     CONS
EC52 C7               (        forth.asm):01837                 RFCS
EC53 BDE51F           (        forth.asm):01838 (7)             jsr     LOCWRT
EC56 868E             (        forth.asm):01839 (2)             lda     #LDXOPC         ldx immediate
EC58 A7A0             (        forth.asm):01840 (4+1)           sta     ,y+
EC5A 1F26             (        forth.asm):01841 (4)             tfr     y,w             Preserve Y (HERE)
EC5C 3125             (        forth.asm):01842 (4+1)           leay    5,y             Relative variable address
EC5E 1F21             (        forth.asm):01843 (4)             tfr     y,x
EC60 1F62             (        forth.asm):01844 (4)             tfr     w,y             Restore Y (HERE)
EC62 AFA1             (        forth.asm):01845 (5+2)           stx     ,y++            Address field for LDX #VARADDR
EC64 BDE592           (        forth.asm):01846 (7)             jsr     VARCON          Compile JMP NPUSH
EC67 3122             (        forth.asm):01847 (4+1)           leay    2,y             2 ALLOT
EC69 7EEBCC           (        forth.asm):01848 (3)             jmp     CREAT1
                      (        forth.asm):01849         
EC6C 09               (        forth.asm):01850         IMMED   fcb     9               79-STANDARD (REQ103)
EC6D 494D4D4544494154 (        forth.asm):01851                 fcc     'IMMEDIATE'
     45
EC76 EC47             (        forth.asm):01852                 fdb     VARI
EC78 C7               (        forth.asm):01853                 RFCS
EC79 C680             (        forth.asm):01854 (2)             ldb     #IMDFLM
EC7B 9E06             (        forth.asm):01855 (4)     IMMED1  ldx     LSTWAD
EC7D A684             (        forth.asm):01856 (4+0)           lda     ,x
EC7F 103598           (        forth.asm):01857 (4)             orr     b,a
EC82 A784             (        forth.asm):01858 (4+0)           sta     ,x
EC84 39               (        forth.asm):01859 (4)             rts
                      (        forth.asm):01860         
EC85 08               (        forth.asm):01861         RSTRCT  fcb     8               Non-standard (GNU Forth)
EC86 5245535452494354 (        forth.asm):01862                 fcc     'RESTRICT'      Make word available in compilation mode only
EC8E EC6C             (        forth.asm):01863                 fdb     IMMED
EC90 C7               (        forth.asm):01864                 RFCS
EC91 C640             (        forth.asm):01865 (2)             ldb     #DEFFLM
EC93 20E6             (        forth.asm):01866 (3)             bra     IMMED1
                      (        forth.asm):01867         
                      (        forth.asm):01868         * This non-standard word enables checkum monitoring by ICHECK for the
                      (        forth.asm):01869         * last defined word in the dictionary. : words are monitored by default
                      (        forth.asm):01870         * and so are constants. CREATEd words require an explicit invokation of
                      (        forth.asm):01871         * MONITOR if they are to be checked for integrity.
EC95 07               (        forth.asm):01872         MONITOR fcb     7
EC96 4D4F4E49544F52   (        forth.asm):01873                 fcc     'MONITOR'       ( -- )
EC9D EC85             (        forth.asm):01874                 fdb     RSTRCT
EC9F C7               (        forth.asm):01875                 RFCS
                      (        forth.asm):01876                 IFNE    RELFEAT
ECA0 9E06             (        forth.asm):01877 (4)             ldx     LSTWAD          Last word header address
ECA2 A684             (        forth.asm):01878 (4+0)           lda     ,x
ECA4 8A20             (        forth.asm):01879 (2)             ora     #MONFLM         Set the monitored flag in the attribute field
ECA6 A784             (        forth.asm):01880 (4+0)           sta     ,x
ECA8 8D08             (        forth.asm):01881 (6)             bsr     HDRSKIP         Skip the header (XT to X), clear A
ECAA 109E08           (        forth.asm):01882 (5)             ldy     DICEND          The upper code section limit (excluded)
ECAD 8D0D             (        forth.asm):01883 (6)             bsr     HDRCSUM         Current word's definition's checksum to A
ECAF A71F             (        forth.asm):01884 (4+1)           sta     -1,x            Store the computed checksum into the header
                      (        forth.asm):01885                 ENDC                    RELFEAT
ECB1 39               (        forth.asm):01886 (4)             rts
                      (        forth.asm):01887         
                      (        forth.asm):01888                 IFNE    RELFEAT
                      (        forth.asm):01889         * On entry, X has a word's header address. On return X has the compilation
                      (        forth.asm):01890         * address for that word (XT). A is cleared so as to initialize the checksum.
ECB2 A684             (        forth.asm):01891 (4+0)   HDRSKIP lda     ,x              Word's header attribute byte to A
ECB4 841F             (        forth.asm):01892 (2)             anda    #WRLNMSK        Extract the word's length
ECB6 8B04             (        forth.asm):01893 (2)             adda    #4              1B attribute, 2B backlink, 1B checksum
ECB8 3086             (        forth.asm):01894 (4+1)           leax    a,x             X has the word's XT. -1,X has the orig checksum
ECBA 4F               (        forth.asm):01895 (1)             clra
ECBB 39               (        forth.asm):01896 (4)             rts
                      (        forth.asm):01897         
                      (        forth.asm):01898         * On entry X has a word's compilation address (XT). A is supposed to have been
                      (        forth.asm):01899         * previously cleared. Y has the upper bound of the code section's address
                      (        forth.asm):01900         * (excluded). On return, A will have the word's code section's checksum.
                      (        forth.asm):01901         * X is preserved.
ECBC 3410             (        forth.asm):01902 (4+2)   HDRCSUM pshs    x
ECBE A880             (        forth.asm):01903 (4+1)   @hdrcs1 eora    ,x+             Update the checksum
ECC0 103712           (        forth.asm):01904 (4)             cmpr    x,y             Upper bound reached?
ECC3 26F9             (        forth.asm):01905 (3)             bne     @hdrcs1         No. Process next byte in word's code section
ECC5 3510             (        forth.asm):01906 (4+2)           puls    x
ECC7 39               (        forth.asm):01907 (4)             rts
                      (        forth.asm):01908         
ECC8 696E746567726974 (        forth.asm):01909         CSUMFLM fcn     'integrity check failed'
     7920636865636B20
     6661696C656400
                      (        forth.asm):01910                 ENDC                    RELFEAT
                      (        forth.asm):01911         
                      (        forth.asm):01912         * This non-standard word walks through the dictionary linked list and checks
                      (        forth.asm):01913         * that the words that have the MONFLM flag set in their header's attribute
                      (        forth.asm):01914         * field have a definition that still matches the checksum stored in the word's
                      (        forth.asm):01915         * header. This is meant to be used interactively, as a debugging tool, since
                      (        forth.asm):01916         * multitasking is not supported by this implementation. Therefore no status
                      (        forth.asm):01917         * value is returned. Feedback will only be provided for corrupted words, in
                      (        forth.asm):01918         * the form of a diagnostic message printed to the console.
ECDF 06               (        forth.asm):01919         ICHECK  fcb     6
ECE0 49434845434B     (        forth.asm):01920                 fcc     'ICHECK'        ( -- )
ECE6 EC95             (        forth.asm):01921                 fdb     MONITOR
ECE8 C7               (        forth.asm):01922                 RFCS
                      (        forth.asm):01923                 IFNE    RELFEAT
ECE9 109E08           (        forth.asm):01924 (5)             ldy     DICEND          Upper bound for the code of the last word (exc.)
ECEC 9E06             (        forth.asm):01925 (4)             ldx     LSTWAD          LAST points to the header of the last word
ECEE 3410             (        forth.asm):01926 (4+2)   @icklop pshs    x               Current word's header address
ECF0 A684             (        forth.asm):01927 (4+0)           lda     ,x              Word's header attribute byte to A
ECF2 8520             (        forth.asm):01928 (2)             bita    #MONFLM         Is this a monitored word?
ECF4 2726             (        forth.asm):01929 (3)             beq     @icknxt         No. Point to the next word
ECF6 8DBA             (        forth.asm):01930 (6)             bsr     HDRSKIP         Skip the header (XT to X), clear A
ECF8 8DC2             (        forth.asm):01931 (6)             bsr     HDRCSUM         Current word's definition's checksum to A
ECFA A11F             (        forth.asm):01932 (4+1)           cmpa    -1,x            Does the checksum match the compile time value?
ECFC 271E             (        forth.asm):01933 (3)             beq     @icknxt         Yes. Point to the next word
                      (        forth.asm):01934         * Current word's definition has been modified since its original definition!
ECFE BDE308           (        forth.asm):01935 (7)             jsr     PUTCR
ED01 AEE4             (        forth.asm):01936 (5+0)           ldx     ,s              Current word's header address
ED03 E680             (        forth.asm):01937 (4+1)           ldb     ,x+
ED05 C41F             (        forth.asm):01938 (2)             andb    #WRLNMSK
ED07 4F               (        forth.asm):01939 (1)             clra
ED08 BDE7F3           (        forth.asm):01940 (7)             jsr     NPUSH           Word's name base address
ED0B 1F01             (        forth.asm):01941 (4)             tfr     d,x
ED0D BDE7F3           (        forth.asm):01942 (7)             jsr     NPUSH           Byte count for TYPE
ED10 BDF73F           (        forth.asm):01943                 RFXT    jsr,TYPE+7      XT for TYPE
ED13 BDF6F1           (        forth.asm):01944                 RFXT    jsr,SPACE+8     XT for SPACE
ED16 8EECC8           (        forth.asm):01945 (3)             ldx     #CSUMFLM
ED19 BDE2FB           (        forth.asm):01946 (7)             jsr     PUTS            Feedback for checksum failure
ED1C 3510             (        forth.asm):01947 (4+2)   @icknxt puls    x               Current word's header address
ED1E 1F12             (        forth.asm):01948 (4)             tfr     x,y             Point to the end of the previous word's code
ED20 8D90             (        forth.asm):01949 (6)             bsr     HDRSKIP         Skip the header (XT to X), clear A
ED22 AE1D             (        forth.asm):01950 (5+1)           ldx     -3,x            Point to the previous header via the backlink
ED24 2702             (        forth.asm):01951 (3)             beq     @ickdon         We've just reached the end of the dictionary
ED26 20C6             (        forth.asm):01952 (3)             bra     @icklop
                      (        forth.asm):01953                 ENDC                    RELFEAT
ED28 39               (        forth.asm):01954 (4)     @ickdon rts
                      (        forth.asm):01955         
ED29 C2               (        forth.asm):01956         DO      fcb     $C2             79-STANDARD (REQ142)
ED2A 444F             (        forth.asm):01957                 fcc     'DO'
ED2C ECDF             (        forth.asm):01958                 fdb     ICHECK
ED2E C7               (        forth.asm):01959                 RFCS
ED2F 8EED3A           (        forth.asm):01960 (3)             ldx     #DOEX
ED32 BDE169           (        forth.asm):01961 (7)             jsr     EMXASXT         Compile "JSR DOEX"
ED35 1F21             (        forth.asm):01962 (4)             tfr     y,x
ED37 7EE810           (        forth.asm):01963 (3)             jmp     RPUSH           HERE to the control flow stack
                      (        forth.asm):01964         
ED3A BDFC3E           (        forth.asm):01965         DOEX    RFXT    jsr,SWAP+7      XT for SWAP
ED3D BDF0B2           (        forth.asm):01966                 RFXT    jsr,TOR+5       XT for >R (limit)
ED40 7EF0B2           (        forth.asm):01967                 RFXT    jmp,TOR+5       XT for >R (index)
                      (        forth.asm):01968         
ED43 C4               (        forth.asm):01969         LOOP    fcb     $C4             79-STANDARD (REQ124)
ED44 4C4F4F50         (        forth.asm):01970                 fcc     'LOOP'
ED48 ED29             (        forth.asm):01971                 fdb     DO
ED4A C7               (        forth.asm):01972                 RFCS
ED4B 8EED62           (        forth.asm):01973 (3)             ldx     #LOOPEX
ED4E BDE169           (        forth.asm):01974 (7)     LOOP1   jsr     EMXASXT
ED51 8E2503           (        forth.asm):01975 (3)             ldx     #BCSOPC         Compile "BCS *+5"
ED54 AFA1             (        forth.asm):01976 (5+2)           stx     ,y++
ED56 BDE82E           (        forth.asm):01977 (7)             jsr     RPOP
ED59 867E             (        forth.asm):01978 (2)             lda     #JMPOPC
ED5B BDE597           (        forth.asm):01979 (7)             jsr     VARCON2         Compile "JMP R@"
ED5E 109F08           (        forth.asm):01980 (5)             sty     DICEND          No action component
ED61 39               (        forth.asm):01981 (4)             rts
                      (        forth.asm):01982         
ED62 8E0001           (        forth.asm):01983 (3)     LOOPEX  ldx     #1
ED65 2011             (        forth.asm):01984 (3)             bra     PLOPEX1
                      (        forth.asm):01985         
ED67 C5               (        forth.asm):01986         PLOOP   fcb     $C5             79-STANDARD (REQ141)
ED68 2B4C4F4F50       (        forth.asm):01987                 fcc     '+LOOP'         The sign hdl reqs for REQ124 should apply though
ED6D ED43             (        forth.asm):01988                 fdb     LOOP
ED6F C7               (        forth.asm):01989                 RFCS
ED70 8EED75           (        forth.asm):01990 (3)             ldx     #PLOOPEX
ED73 20D9             (        forth.asm):01991 (3)             bra     LOOP1
                      (        forth.asm):01992         
ED75 BDE801           (        forth.asm):01993 (7)     PLOOPEX jsr     NPOP
ED78 1F16             (        forth.asm):01994 (4)     PLOPEX1 tfr     x,w             Increment to W
ED7A BDE82E           (        forth.asm):01995 (7)             jsr     RPOP
ED7D 1F12             (        forth.asm):01996 (4)             tfr     x,y             Index to Y
ED7F BDE82E           (        forth.asm):01997 (7)             jsr     RPOP            Limit to X
ED82 103062           (        forth.asm):01998 (4)             addr    w,y             Update index
ED85 114D             (        forth.asm):01999 (2)             tste
ED87 2B10             (        forth.asm):02000 (3)             bmi     @neginc
ED89 103721           (        forth.asm):02001 (4)             cmpr    y,x
ED8C 2F12             (        forth.asm):02002 (3)             ble     @done           We're done. Return With CFLAG set
ED8E BDE810           (        forth.asm):02003 (7)     @iter   jsr     RPUSH           Push back the limit
ED91 1F21             (        forth.asm):02004 (4)             tfr     y,x
ED93 BDE810           (        forth.asm):02005 (7)             jsr     RPUSH           Push back the index
ED96 1CFE             (        forth.asm):02006 (2)             andcc   #^CFLAG         Clear CFLAG
ED98 39               (        forth.asm):02007 (4)             rts
ED99 103721           (        forth.asm):02008 (4)     @neginc cmpr    y,x
ED9C 27F0             (        forth.asm):02009 (3)             beq     @iter           79-STANDARD irregular historical precedent
ED9E 2BEE             (        forth.asm):02010 (3)             bmi     @iter
EDA0 1A01             (        forth.asm):02011 (2)     @done   orcc    #CFLAG          Set CFLAG
EDA2 39               (        forth.asm):02012 (4)             rts
                      (        forth.asm):02013         
EDA3 46               (        forth.asm):02014         UNLOOP  fcb     $46             ANSI (Core)
EDA4 554E4C4F4F50     (        forth.asm):02015                 fcc     'UNLOOP'
EDAA ED67             (        forth.asm):02016                 fdb     PLOOP
EDAC C7               (        forth.asm):02017                 RFCS
EDAD BDE82E           (        forth.asm):02018 (7)             jsr     RPOP            Drop the index from the return stack
EDB0 7EE82E           (        forth.asm):02019 (3)             jmp     RPOP            and the loop limit as well
                      (        forth.asm):02020         
EDB3 C2               (        forth.asm):02021         IF      fcb     $C2             79-STANDARD (REQ210)
EDB4 4946             (        forth.asm):02022                 fcc     'IF'
EDB6 EDA3             (        forth.asm):02023                 fdb     UNLOOP
EDB8 C7               (        forth.asm):02024                 RFCS
EDB9 8EEDD3           (        forth.asm):02025 (3)             ldx     #IFEX
EDBC BDE169           (        forth.asm):02026 (7)             jsr     EMXASXT         Compile "JSR IFEX"
EDBF 8E2603           (        forth.asm):02027 (3)             ldx     #BNEOPC
EDC2 AFA1             (        forth.asm):02028 (5+2)           stx     ,y++            Compile "BNE *+5"
EDC4 867E             (        forth.asm):02029 (2)             lda     #JMPOPC         JMP extended
EDC6 A7A0             (        forth.asm):02030 (4+1)           sta     ,y+             C,
EDC8 1F21             (        forth.asm):02031 (4)             tfr     y,x
EDCA BDE810           (        forth.asm):02032 (7)             jsr     RPUSH           HERE to the control stack (ANS:orig)
                      (        forth.asm):02033         * This cell contents is a forward reference that will be resolved by ELSE/THEN.
EDCD 3122             (        forth.asm):02034 (4+1)           leay    2,y
EDCF 109F08           (        forth.asm):02035 (5)             sty     DICEND          2 ALLOT
EDD2 39               (        forth.asm):02036 (4)             rts
                      (        forth.asm):02037         
EDD3 BDE801           (        forth.asm):02038 (7)     IFEX    jsr     NPOP
EDD6 1037C1           (        forth.asm):02039 (4)             cmpr    0,x
EDD9 39               (        forth.asm):02040 (4)             rts
                      (        forth.asm):02041         
                      (        forth.asm):02042         * Functionally equivalent to:
                      (        forth.asm):02043         * : UNLESS POSTPONE 0= POSTPONE IF ; IMMEDIATE RESTRICT
EDDA C6               (        forth.asm):02044         UNLESS  fcb     $C6             Non-standard (Perl inspired)
EDDB 554E4C455353     (        forth.asm):02045                 fcc     'UNLESS'
EDE1 EDB3             (        forth.asm):02046                 fdb     IF
EDE3 C7               (        forth.asm):02047                 RFCS
EDE4 8EEF05           (        forth.asm):02048                 RFXT    ldx,#NULP+5     XT for 0=
EDE7 BDE169           (        forth.asm):02049 (7)             jsr     EMXASXT
EDEA 20CD             (        forth.asm):02050                 RFXT    bra,IF+5        XT for IF
                      (        forth.asm):02051         
EDEC C4               (        forth.asm):02052         ELSE    fcb     $C4             79-STANDARD (REQ167)
EDED 454C5345         (        forth.asm):02053                 fcc     'ELSE'
EDF1 EDDA             (        forth.asm):02054                 fdb     UNLESS
EDF3 C7               (        forth.asm):02055                 RFCS
EDF4 109E08           (        forth.asm):02056 (5)             ldy     DICEND
EDF7 867E             (        forth.asm):02057 (2)             lda     #JMPOPC         JMP extended
EDF9 A7A0             (        forth.asm):02058 (4+1)           sta     ,y+
EDFB 3122             (        forth.asm):02059 (4+1)           leay    2,y
EDFD 109F08           (        forth.asm):02060 (5)             sty     DICEND
EE00 BDE82E           (        forth.asm):02061 (7)             jsr     RPOP
EE03 10AF84           (        forth.asm):02062 (6+0)           sty     ,x              Set actual ELSE jump address
EE06 1F21             (        forth.asm):02063 (4)             tfr     y,x
EE08 301E             (        forth.asm):02064 (4+1)           leax    -2,x
EE0A 7EE810           (        forth.asm):02065 (3)             jmp     RPUSH
                      (        forth.asm):02066         
EE0D C4               (        forth.asm):02067         THEN    fcb     $C4             79-STANDARD (REQ161)
EE0E 5448454E         (        forth.asm):02068                 fcc     'THEN'
EE12 EDEC             (        forth.asm):02069                 fdb     ELSE
EE14 C7               (        forth.asm):02070                 RFCS
EE15 109E08           (        forth.asm):02071 (5)             ldy     DICEND
EE18 BDE82E           (        forth.asm):02072 (7)             jsr     RPOP
EE1B 10AF84           (        forth.asm):02073 (6+0)           sty     ,x
EE1E 39               (        forth.asm):02074 (4)             rts
                      (        forth.asm):02075         
EE1F 01               (        forth.asm):02076         EQ      fcb     1               79-STANDARD (REQ173)
EE20 3D               (        forth.asm):02077                 fcc     '='             ( N1 N2 -- FLAG )
EE21 EE0D             (        forth.asm):02078                 fdb     THEN
EE23 C7               (        forth.asm):02079                 RFCS
EE24 BDE4A2           (        forth.asm):02080 (7)             jsr     MIN2PST         At least two cells need to be stacked up
EE27 10ECC4           (        forth.asm):02081 (8+0)           ldq     ,u              D:W has N2:N1
EE2A 3342             (        forth.asm):02082 (4+1)           leau    2,u             Drop one cell from the user stack
EE2C 1FC1             (        forth.asm):02083 (4)             tfr     0,x
EE2E 103760           (        forth.asm):02084 (4)             cmpr    w,d
EE31 2602             (        forth.asm):02085 (3)             bne     @eq1
EE33 3001             (        forth.asm):02086 (4+1)           leax    1,x
EE35 AFC4             (        forth.asm):02087 (5+0)   @eq1    stx     ,u              Store in place to FLAG
EE37 39               (        forth.asm):02088 (4)             rts
                      (        forth.asm):02089         
EE38 02               (        forth.asm):02090         DIFF    fcb     2               79-STANDARD (REF)
EE39 3C3E             (        forth.asm):02091                 fcc     '<>'            ( N1 N2 -- FLAG )
EE3B EE1F             (        forth.asm):02092                 fdb     EQ
EE3D C7               (        forth.asm):02093                 RFCS
EE3E BDE4A2           (        forth.asm):02094 (7)             jsr     MIN2PST         At least two cells need to be stacked up
EE41 10ECC4           (        forth.asm):02095 (8+0)           ldq     ,u              D:W has N2:N1
EE44 3342             (        forth.asm):02096 (4+1)           leau    2,u             Drop one cell from the user stack
EE46 1FC1             (        forth.asm):02097 (4)             tfr     0,x
EE48 103760           (        forth.asm):02098 (4)             cmpr    w,d
EE4B 2702             (        forth.asm):02099 (3)             beq     @diff1
EE4D 3001             (        forth.asm):02100 (4+1)           leax    1,x
EE4F AFC4             (        forth.asm):02101 (5+0)   @diff1  stx     ,u              Store in place to FLAG
EE51 39               (        forth.asm):02102 (4)             rts
                      (        forth.asm):02103         
EE52 02               (        forth.asm):02104         SINFEQ  fcb     2               Non-standard (Not even ANSI!)
EE53 3C3D             (        forth.asm):02105                 fcc     '<='            Required for the ORNL fixed sieve benchmark
EE55 EE38             (        forth.asm):02106                 fdb     DIFF
EE57 C7               (        forth.asm):02107                 RFCS
EE58 BDE4A2           (        forth.asm):02108 (7)             jsr     MIN2PST         At least two cells need to be stacked up
EE5B 10AEC4           (        forth.asm):02109 (6+0)           ldy     ,u
EE5E AE42             (        forth.asm):02110 (5+1)           ldx     2,u
EE60 104F             (        forth.asm):02111 (2)             clrd
EE62 103721           (        forth.asm):02112 (4)             cmpr    y,x
EE65 2E02             (        forth.asm):02113 (3)             bgt     @sinfq1
EE67 104C             (        forth.asm):02114 (2)             incd
EE69 3342             (        forth.asm):02115 (4+1)   @sinfq1 leau    2,u             Drop one cell
EE6B EDC4             (        forth.asm):02116 (5+0)           std     ,u
EE6D 39               (        forth.asm):02117 (4)             rts
                      (        forth.asm):02118         
                      (        forth.asm):02119                 IFNE    DEBUG
EE6E                  (        forth.asm):02120         CC      fcb     2               Non-standard. Used for debugging
                      (        forth.asm):02121                 fcc     'CC'
                      (        forth.asm):02122                 fdb     SINFEQ
                      (        forth.asm):02123                 RFCS
                      (        forth.asm):02124                 ldx     CCREG
                      (        forth.asm):02125                 jmp     NPUSH
                      (        forth.asm):02126                 ENDC                    DEBUG
                      (        forth.asm):02127         
EE6E 03               (        forth.asm):02128         XOR     fcb     3               79-STANDARD (REQ179)
EE6F 584F52           (        forth.asm):02129                 fcc     'XOR'
                      (        forth.asm):02130                 IFNE    DEBUG
                      (        forth.asm):02131                 fdb     CC
                      (        forth.asm):02132                 ELSE
EE72 EE52             (        forth.asm):02133                 fdb     SINFEQ
                      (        forth.asm):02134                 ENDC                    DEBUG
EE74 C7               (        forth.asm):02135                 RFCS
EE75 BDE4A2           (        forth.asm):02136 (7)             jsr     MIN2PST         At least two cells need to be stacked up
EE78 ECC4             (        forth.asm):02137 (5+0)           ldd     ,u
EE7A 10A642           (        forth.asm):02138 (6+1)           ldw     2,u
EE7D 103660           (        forth.asm):02139 (4)             eorr    w,d
EE80 3342             (        forth.asm):02140 (4+1)   XOR1    leau    2,u
EE82 EDC4             (        forth.asm):02141 (5+0)           std     ,u
EE84 39               (        forth.asm):02142 (4)             rts
                      (        forth.asm):02143         
EE85 02               (        forth.asm):02144         OR      fcb     2               79-STANDARD (REQ223)
EE86 4F52             (        forth.asm):02145                 fcc     'OR'
EE88 EE6E             (        forth.asm):02146                 fdb     XOR
EE8A C7               (        forth.asm):02147                 RFCS
EE8B BDE4A2           (        forth.asm):02148 (7)             jsr     MIN2PST         At least two cells need to be stacked up
EE8E ECC4             (        forth.asm):02149 (5+0)           ldd     ,u
EE90 10A642           (        forth.asm):02150 (6+1)           ldw     2,u
EE93 103560           (        forth.asm):02151 (4)             orr     w,d
EE96 20E8             (        forth.asm):02152 (3)             bra     XOR1
                      (        forth.asm):02153         
EE98 03               (        forth.asm):02154         AND     fcb     3               79-STANDARD (REQ183)
EE99 414E44           (        forth.asm):02155                 fcc     'AND'
EE9C EE85             (        forth.asm):02156                 fdb     OR
EE9E C7               (        forth.asm):02157                 RFCS
EE9F BDE4A2           (        forth.asm):02158 (7)             jsr     MIN2PST         At least two cells need to be stacked up
EEA2 ECC4             (        forth.asm):02159 (5+0)           ldd     ,u
EEA4 10A642           (        forth.asm):02160 (6+1)           ldw     2,u
EEA7 103460           (        forth.asm):02161 (4)             andr    w,d
EEAA 20D4             (        forth.asm):02162 (3)             bra     XOR1
                      (        forth.asm):02163         
EEAC 03               (        forth.asm):02164         COM     fcb     3               79-STANDARD (REF)
EEAD 434F4D           (        forth.asm):02165                 fcc     'COM'
EEB0 EE98             (        forth.asm):02166                 fdb     AND
EEB2 C7               (        forth.asm):02167                 RFCS
EEB3 BDE801           (        forth.asm):02168 (7)     COM0    jsr     NPOP
EEB6 1F10             (        forth.asm):02169 (4)             tfr     x,d
EEB8 1043             (        forth.asm):02170 (2)             comd
EEBA 1F01             (        forth.asm):02171 (4)             tfr     d,x
EEBC 3610             (        forth.asm):02172                 UCNPUSH
EEBE 39               (        forth.asm):02173 (4)             rts
                      (        forth.asm):02174         
EEBF 06               (        forth.asm):02175         INVERT  fcb     6               ANSI (Core)
EEC0 494E56455254     (        forth.asm):02176                 fcc     'INVERT'
EEC6 EEAC             (        forth.asm):02177                 fdb     COM
EEC8 C7               (        forth.asm):02178                 RFCS
EEC9 20E8             (        forth.asm):02179 (3)             bra     COM0
                      (        forth.asm):02180         
EECB 02               (        forth.asm):02181         ZGREAT  fcb     2               79-STANDARD (REQ118)
EECC 303E             (        forth.asm):02182                 fcc     '0>'
EECE EEBF             (        forth.asm):02183                 fdb     INVERT
EED0 C7               (        forth.asm):02184                 RFCS
EED1 BDE801           (        forth.asm):02185 (7)             jsr     NPOP
EED4 1F10             (        forth.asm):02186 (4)             tfr     x,d
EED6 104D             (        forth.asm):02187 (2)             tstd
EED8 2F06             (        forth.asm):02188 (3)             ble     @zgrt1
EEDA 8E0001           (        forth.asm):02189 (3)             ldx     #1
EEDD 3610             (        forth.asm):02190                 UCNPUSH
EEDF 39               (        forth.asm):02191 (4)             rts
EEE0 1FC1             (        forth.asm):02192 (4)     @zgrt1  tfr     0,x
EEE2 3610             (        forth.asm):02193                 UCNPUSH
EEE4 39               (        forth.asm):02194 (4)             rts
                      (        forth.asm):02195         
EEE5 02               (        forth.asm):02196         ZLESS   fcb     2               79-STANDARD (REQ144)
EEE6 303C             (        forth.asm):02197                 fcc     '0<'
EEE8 EECB             (        forth.asm):02198                 fdb     ZGREAT
EEEA C7               (        forth.asm):02199                 RFCS
EEEB BDE801           (        forth.asm):02200 (7)             jsr     NPOP
EEEE 1F10             (        forth.asm):02201 (4)             tfr     x,d
EEF0 104D             (        forth.asm):02202 (2)             tstd
EEF2 2C06             (        forth.asm):02203 (3)             bge     @zlss1
EEF4 8E0001           (        forth.asm):02204 (3)             ldx     #1
EEF7 3610             (        forth.asm):02205                 UCNPUSH
EEF9 39               (        forth.asm):02206 (4)             rts
EEFA 1FC1             (        forth.asm):02207 (4)     @zlss1  tfr     0,x
EEFC 3610             (        forth.asm):02208                 UCNPUSH
EEFE 39               (        forth.asm):02209 (4)             rts
                      (        forth.asm):02210         
EEFF 02               (        forth.asm):02211         NULP    fcb     2               79-STANDARD (REQ180)
EF00 303D             (        forth.asm):02212                 fcc     '0='
EF02 EEE5             (        forth.asm):02213                 fdb     ZLESS
EF04 C7               (        forth.asm):02214                 RFCS
EF05 BDE801           (        forth.asm):02215 (7)             jsr     NPOP
EF08 1F10             (        forth.asm):02216 (4)             tfr     x,d
EF0A 1FC1             (        forth.asm):02217 (4)             tfr     0,x
EF0C 104D             (        forth.asm):02218 (2)             tstd
EF0E 2703             (        forth.asm):02219 (3)             beq     @nulp2
EF10 3610             (        forth.asm):02220         @nulp1  UCNPUSH
EF12 39               (        forth.asm):02221 (4)             rts
EF13 3001             (        forth.asm):02222 (4+1)   @nulp2  leax    1,x
EF15 20F9             (        forth.asm):02223 (3)             bra     @nulp1
                      (        forth.asm):02224         
EF17 03               (        forth.asm):02225         NOT     fcb     3               79-STANDARD (REQ165)
EF18 4E4F54           (        forth.asm):02226                 fcc     'NOT'
EF1B EEFF             (        forth.asm):02227                 fdb     NULP
EF1D C7               (        forth.asm):02228                 RFCS
EF1E 20E5             (        forth.asm):02229                 RFXT    bra,NULP+5      XT for 0=
                      (        forth.asm):02230         
EF20 02               (        forth.asm):02231         USUP    fcb     2               ANSI (Core Ext)
EF21 553E             (        forth.asm):02232                 fcc     'U>'
EF23 EF17             (        forth.asm):02233                 fdb     NOT
EF25 C7               (        forth.asm):02234                 RFCS
EF26 BDE59C           (        forth.asm):02235 (7)             jsr     CMP2
EF29 2302             (        forth.asm):02236 (3)             bls     @usup1
EF2B 3001             (        forth.asm):02237 (4+1)           leax    1,x
EF2D 3610             (        forth.asm):02238         @usup1  UCNPUSH
EF2F 39               (        forth.asm):02239 (4)             rts
                      (        forth.asm):02240         
EF30 02               (        forth.asm):02241         UINF    fcb     2               79-STANDARD (REQ150)
EF31 553C             (        forth.asm):02242                 fcc     'U<'
EF33 EF20             (        forth.asm):02243                 fdb     USUP
EF35 C7               (        forth.asm):02244                 RFCS
EF36 BDE59C           (        forth.asm):02245 (7)             jsr     CMP2
EF39 2402             (        forth.asm):02246 (3)             bhs     @uinf1          Z is set
EF3B 3001             (        forth.asm):02247 (4+1)           leax    1,x
EF3D 3610             (        forth.asm):02248         @uinf1  UCNPUSH
EF3F 39               (        forth.asm):02249 (4)             rts
                      (        forth.asm):02250         
                      (        forth.asm):02251         * Functionally: : WITHIN OVER - >R - R> U< ;
EF40 06               (        forth.asm):02252         WITHIN  fcb     6               ANSI (Core)
EF41 57495448494E     (        forth.asm):02253                 fcc     'WITHIN'        ( n1 n2 n3 -- flag )
EF47 EF30             (        forth.asm):02254                 fdb     UINF
EF49 C7               (        forth.asm):02255                 RFCS
EF4A BDFC84           (        forth.asm):02256                 RFXT    jsr,OVER+7      XT for OVER
EF4D BDF90D           (        forth.asm):02257                 RFXT    jsr,MINUS+4     XT for -
EF50 BDF0B2           (        forth.asm):02258                 RFXT    jsr,TOR+5       XT for >R
EF53 BDF90D           (        forth.asm):02259                 RFXT    jsr,MINUS+4     XT for -
EF56 BDF0A6           (        forth.asm):02260                 RFXT    jsr,RFROM+5     XT for R>
EF59 20DB             (        forth.asm):02261                 RFXT    bra,UINF+5      XT for U<
                      (        forth.asm):02262         
EF5B 01               (        forth.asm):02263         SUP     fcb     1               79-STANDARD (REQ102)
EF5C 3E               (        forth.asm):02264                 fcc     '>'
EF5D EF40             (        forth.asm):02265                 fdb     WITHIN
EF5F C7               (        forth.asm):02266                 RFCS
EF60 BDE59C           (        forth.asm):02267 (7)             jsr     CMP2
EF63 2F02             (        forth.asm):02268 (3)             ble     @sup1
EF65 3001             (        forth.asm):02269 (4+1)           leax    1,x
EF67 3610             (        forth.asm):02270         @sup1   UCNPUSH
EF69 39               (        forth.asm):02271 (4)             rts
                      (        forth.asm):02272         
EF6A 01               (        forth.asm):02273         INF     fcb     1               79-STANDARD (REQ139)
EF6B 3C               (        forth.asm):02274                 fcc     '<'
EF6C EF5B             (        forth.asm):02275                 fdb     SUP
EF6E C7               (        forth.asm):02276                 RFCS
EF6F BDE59C           (        forth.asm):02277 (7)             jsr     CMP2
EF72 2C02             (        forth.asm):02278 (3)             bge     @inf1
EF74 3001             (        forth.asm):02279 (4+1)           leax    1,x
EF76 3610             (        forth.asm):02280         @inf1   UCNPUSH
EF78 39               (        forth.asm):02281 (4)             rts
                      (        forth.asm):02282         
EF79 03               (        forth.asm):02283         MAX     fcb     3               79-STANDARD (REQ218)
EF7A 4D4158           (        forth.asm):02284                 fcc     'MAX'
EF7D EF6A             (        forth.asm):02285                 fdb     INF
EF7F C7               (        forth.asm):02286                 RFCS
EF80 BDE801           (        forth.asm):02287 (7)             jsr     NPOP
EF83 1F12             (        forth.asm):02288 (4)             tfr     x,y
EF85 BDE801           (        forth.asm):02289 (7)             jsr     NPOP
EF88 103721           (        forth.asm):02290 (4)             cmpr    y,x
EF8B 2C02             (        forth.asm):02291 (3)             bge     @pshrv1
EF8D 1F21             (        forth.asm):02292 (4)             tfr     y,x
EF8F 3610             (        forth.asm):02293         @pshrv1 UCNPUSH
EF91 39               (        forth.asm):02294 (4)             rts
                      (        forth.asm):02295         
EF92 03               (        forth.asm):02296         MIN     fcb     3               79-STANDARD (REQ127)
EF93 4D494E           (        forth.asm):02297                 fcc     'MIN'
EF96 EF79             (        forth.asm):02298                 fdb     MAX
EF98 C7               (        forth.asm):02299                 RFCS
EF99 BDE801           (        forth.asm):02300 (7)             jsr     NPOP
EF9C 1F12             (        forth.asm):02301 (4)             tfr     x,y
EF9E BDE801           (        forth.asm):02302 (7)             jsr     NPOP
EFA1 103721           (        forth.asm):02303 (4)             cmpr    y,x
EFA4 2F02             (        forth.asm):02304 (3)             ble     @pshrv2
EFA6 1F21             (        forth.asm):02305 (4)             tfr     y,x
EFA8 3610             (        forth.asm):02306         @pshrv2 UCNPUSH
EFAA 39               (        forth.asm):02307 (4)             rts
                      (        forth.asm):02308         
EFAB 03               (        forth.asm):02309         ABS     fcb     3               79-STANDARD (REQ108)
EFAC 414253           (        forth.asm):02310                 fcc     'ABS'
EFAF EF92             (        forth.asm):02311                 fdb     MIN
EFB1 C7               (        forth.asm):02312                 RFCS
EFB2 BDE801           (        forth.asm):02313 (7)             jsr     NPOP
EFB5 1F10             (        forth.asm):02314 (4)             tfr     x,d
EFB7 104D             (        forth.asm):02315 (2)             tstd
EFB9 2A04             (        forth.asm):02316 (3)             bpl     @abs1
EFBB 1040             (        forth.asm):02317 (2)             negd
EFBD 1F01             (        forth.asm):02318 (4)             tfr     d,x
EFBF 3610             (        forth.asm):02319         @abs1   UCNPUSH
EFC1 39               (        forth.asm):02320 (4)             rts
                      (        forth.asm):02321         
EFC2 06               (        forth.asm):02322         NEGATE  fcb     6               79-STANDARD (REQ177)
EFC3 4E4547415445     (        forth.asm):02323                 fcc     'NEGATE'
EFC9 EFAB             (        forth.asm):02324                 fdb     ABS
EFCB C7               (        forth.asm):02325                 RFCS
EFCC BDE49D           (        forth.asm):02326 (7)             jsr     MIN1PST         At least one cell needs to be stacked up
EFCF ECC4             (        forth.asm):02327 (5+0)           ldd     ,u
EFD1 1040             (        forth.asm):02328 (2)             negd
EFD3 EDC4             (        forth.asm):02329 (5+0)           std     ,u
EFD5 39               (        forth.asm):02330 (4)             rts
                      (        forth.asm):02331         
EFD6 C5               (        forth.asm):02332         BEGIN   fcb     $C5             79-STANDARD (REQ147)
EFD7 424547494E       (        forth.asm):02333                 fcc     'BEGIN'
EFDC EFC2             (        forth.asm):02334                 fdb     NEGATE
EFDE C7               (        forth.asm):02335                 RFCS
EFDF 9E08             (        forth.asm):02336 (4)             ldx     DICEND          HERE is ANS:dest
EFE1 7EE810           (        forth.asm):02337 (3)             jmp     RPUSH           to the control flow stack
                      (        forth.asm):02338         
EFE4 C5               (        forth.asm):02339         AGAIN   fcb     $C5             79-STANDARD (REF114)
EFE5 414741494E       (        forth.asm):02340                 fcc     'AGAIN'
EFEA EFD6             (        forth.asm):02341                 fdb     BEGIN
EFEC C7               (        forth.asm):02342                 RFCS
EFED BDE82E           (        forth.asm):02343 (7)             jsr     RPOP
EFF0 1F12             (        forth.asm):02344 (4)             tfr     x,y             ANS:dest from the control flow stack to Y
EFF2 9E08             (        forth.asm):02345 (4)             ldx     DICEND
EFF4 867E             (        forth.asm):02346 (2)             lda     #JMPOPC         JMP extended
EFF6 A780             (        forth.asm):02347 (4+1)           sta     ,x+
EFF8 10AF81           (        forth.asm):02348 (6+2)           sty     ,x++
EFFB 9F08             (        forth.asm):02349 (4)             stx     DICEND
EFFD 8602             (        forth.asm):02350 (2)             lda     #2
EFFF 9732             (        forth.asm):02351 (3)             sta     RTSREMV         Trigger the RTS removal optimization
F001 39               (        forth.asm):02352 (4)             rts
                      (        forth.asm):02353         
                      (        forth.asm):02354         # The standard does not require this as being immediate but I do.
F002 C4               (        forth.asm):02355         EXIT    fcb     $C4             79-STANDARD (REQ117)
F003 45584954         (        forth.asm):02356                 fcc     'EXIT'
F007 EFE4             (        forth.asm):02357                 fdb     AGAIN
F009 C7               (        forth.asm):02358                 RFCS
F00A 9E08             (        forth.asm):02359 (4)             ldx     DICEND
F00C 301D             (        forth.asm):02360 (4+1)           leax    -3,x
F00E 109E14           (        forth.asm):02361 (5)             ldy     JSRLAST
F011 103721           (        forth.asm):02362 (4)             cmpr    y,x
F014 2605             (        forth.asm):02363 (3)             bne     @noopt          Tail JMP optimization is not possible
F016 867E             (        forth.asm):02364 (2)             lda     #JMPOPC         JMP extended
F018 A784             (        forth.asm):02365 (4+0)           sta     ,x
F01A 39               (        forth.asm):02366 (4)             rts
F01B 3003             (        forth.asm):02367 (4+1)   @noopt  leax    3,x             Point back to HERE
F01D 8639             (        forth.asm):02368 (2)             lda     #RTSOPC         RTS inherent
F01F A780             (        forth.asm):02369 (4+1)           sta     ,x+
F021 9F08             (        forth.asm):02370 (4)             stx     DICEND
F023 39               (        forth.asm):02371 (4)             rts
                      (        forth.asm):02372         
F024 C5               (        forth.asm):02373         UNTIL   fcb     $C5             79-STANDARD (REQ237)
F025 554E54494C       (        forth.asm):02374                 fcc     'UNTIL'
F02A F002             (        forth.asm):02375                 fdb     EXIT
F02C C7               (        forth.asm):02376                 RFCS
F02D 109E08           (        forth.asm):02377 (5)             ldy     DICEND
F030 86BD             (        forth.asm):02378 (2)             lda     #JSROPC         JSR extended
F032 8EEDD3           (        forth.asm):02379 (3)             ldx     #IFEX
F035 BDE155           (        forth.asm):02380 (7)             jsr     CHKRTS          Check if the final RTS can be omitted
F038 BDE597           (        forth.asm):02381 (7)             jsr     VARCON2
F03B 8E2603           (        forth.asm):02382 (3)             ldx     #BNEOPC         Compile "BNE *+5"
F03E AFA1             (        forth.asm):02383 (5+2)           stx     ,y++
F040 867E             (        forth.asm):02384 (2)             lda     #JMPOPC         JMP extended
F042 A7A0             (        forth.asm):02385 (4+1)           sta     ,y+
F044 BDE82E           (        forth.asm):02386 (7)             jsr     RPOP
F047 AFA1             (        forth.asm):02387 (5+2)           stx     ,y++
F049 109F08           (        forth.asm):02388 (5)             sty     DICEND
F04C 39               (        forth.asm):02389 (4)             rts
                      (        forth.asm):02390         
F04D C3               (        forth.asm):02391         END     fcb     $C3             79-STANDARD (REF224)
F04E 454E44           (        forth.asm):02392                 fcc     'END'
F051 F024             (        forth.asm):02393                 fdb     UNTIL
F053 C7               (        forth.asm):02394                 RFCS
F054 20D7             (        forth.asm):02395                 RFXT    bra,UNTIL+8     XT for UNTIL
                      (        forth.asm):02396         
F056 C5               (        forth.asm):02397         WHILE   fcb     $C5             79-STANDARD (REQ149)
F057 5748494C45       (        forth.asm):02398                 fcc     'WHILE'
F05C F04D             (        forth.asm):02399                 fdb     END
F05E C7               (        forth.asm):02400                 RFCS
F05F 8EEDD3           (        forth.asm):02401 (3)             ldx     #IFEX
F062 BDE169           (        forth.asm):02402 (7)             jsr     EMXASXT         Compile "JSR IFEX"
F065 CC2603           (        forth.asm):02403 (3)             ldd     #BNEOPC
F068 EDA1             (        forth.asm):02404 (5+2)           std     ,y++            Compile "BNE *+5"
F06A 867E             (        forth.asm):02405 (2)             lda     #JMPOPC         JMP extended
F06C A7A0             (        forth.asm):02406 (4+1)           sta     ,y+
F06E BDE82E           (        forth.asm):02407 (7)             jsr     RPOP            ANS:dest to X, Y has HERE (ANS:orig)
F071 1E21             (        forth.asm):02408 (5)             exg     y,x
F073 BDE810           (        forth.asm):02409 (7)             jsr     RPUSH           ANS:orig to the return stack
F076 1E21             (        forth.asm):02410 (5)             exg     y,x
F078 BDE810           (        forth.asm):02411 (7)             jsr     RPUSH           ANS:dest to the return stack
F07B 3122             (        forth.asm):02412 (4+1)           leay    2,y             2 ALLOT
F07D 109F08           (        forth.asm):02413 (5)             sty     DICEND
F080 39               (        forth.asm):02414 (4)             rts
                      (        forth.asm):02415         
F081 C6               (        forth.asm):02416         REPEAT  fcb     $C6             79-STANDARD (REQ120)
F082 524550454154     (        forth.asm):02417                 fcc     'REPEAT'
F088 F056             (        forth.asm):02418                 fdb     WHILE
F08A C7               (        forth.asm):02419                 RFCS
F08B BDE82E           (        forth.asm):02420 (7)             jsr     RPOP            ANS:dest to X
F08E 109E08           (        forth.asm):02421 (5)             ldy     DICEND
F091 867E             (        forth.asm):02422 (2)             lda     #JMPOPC         JMP extended
F093 BDE597           (        forth.asm):02423 (7)             jsr     VARCON2
F096 BDE82E           (        forth.asm):02424 (7)             jsr     RPOP            ANS:orig
F099 10AF84           (        forth.asm):02425 (6+0)           sty     ,x              Resolve ANS:orig to HERE
F09C 109F08           (        forth.asm):02426 (5)             sty     DICEND
F09F 39               (        forth.asm):02427 (4)             rts
                      (        forth.asm):02428         
F0A0 42               (        forth.asm):02429         RFROM   fcb     $42             79-STANDARD (REQ110)
F0A1 523E             (        forth.asm):02430                 fcc     'R>'
F0A3 F081             (        forth.asm):02431                 fdb     REPEAT
F0A5 C7               (        forth.asm):02432                 RFCS
F0A6 BDE82E           (        forth.asm):02433 (7)             jsr     RPOP
F0A9 7EE7F3           (        forth.asm):02434 (3)             jmp     NPUSH
                      (        forth.asm):02435         
F0AC 42               (        forth.asm):02436         TOR     fcb     $42             79-STANDARD (REQ200)
F0AD 3E52             (        forth.asm):02437                 fcc     '>R'
F0AF F0A0             (        forth.asm):02438                 fdb     RFROM
F0B1 C7               (        forth.asm):02439                 RFCS
F0B2 BDE801           (        forth.asm):02440 (7)             jsr     NPOP
F0B5 7EE810           (        forth.asm):02441 (3)             jmp     RPUSH
                      (        forth.asm):02442         
F0B8 45               (        forth.asm):02443         LEAVE   fcb     $45             79-STANDARD (REQ213)
F0B9 4C45415645       (        forth.asm):02444                 fcc     'LEAVE'
F0BE F0AC             (        forth.asm):02445                 fdb     TOR
F0C0 C7               (        forth.asm):02446                 RFCS
F0C1 BDE82E           (        forth.asm):02447 (7)             jsr     RPOP
F0C4 BDE82E           (        forth.asm):02448 (7)             jsr     RPOP
F0C7 BDE810           (        forth.asm):02449 (7)             jsr     RPUSH
F0CA 7EE810           (        forth.asm):02450 (3)             jmp     RPUSH
                      (        forth.asm):02451         
F0CD 41               (        forth.asm):02452         INDI    fcb     $41             79-STANDARD (REQ136)
F0CE 49               (        forth.asm):02453                 fcc     'I'
F0CF F0B8             (        forth.asm):02454                 fdb     LEAVE
F0D1 C7               (        forth.asm):02455                 RFCS
F0D2 5F               (        forth.asm):02456 (1)             clrb
                      (        forth.asm):02457         * This is called ARPICKN because the argument in B on entry is expected
                      (        forth.asm):02458         * to be zero to refer to the top of the return stack. This is some sort
                      (        forth.asm):02459         * of F83/ANSI behaviour that one would not expect in a 79-STANDARD.
                      (        forth.asm):02460         * It makes the code slightly more compact.
F0D3 9630             (        forth.asm):02461 (3)     ARPICKN lda     RDEPTH
F0D5 103789           (        forth.asm):02462 (4)             cmpr    a,b
F0D8 240A             (        forth.asm):02463 (3)             bhs     @rpick1
F0DA 9E00             (        forth.asm):02464 (4)             ldx     RSP
F0DC 4F               (        forth.asm):02465 (1)             clra
F0DD 1048             (        forth.asm):02466 (2)             lsld                    Times 2
F0DF AE8B             (        forth.asm):02467 (5+2)           ldx     d,x
F0E1 7EE7F3           (        forth.asm):02468 (3)             jmp     NPUSH           We cannot use UCNPUSH here
F0E4 C608             (        forth.asm):02469 (2)     @rpick1 ldb     #8              Return stack underflow
F0E6 BDE772           (        forth.asm):02470 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02471         
F0E9 42               (        forth.asm):02472         RFETCH  fcb     $42             79-STANDARD (REQ228)
F0EA 5240             (        forth.asm):02473                 fcc     'R@'
F0EC F0CD             (        forth.asm):02474                 fdb     INDI
F0EE C7               (        forth.asm):02475                 RFCS
F0EF 20E1             (        forth.asm):02476                 RFXT    bra,INDI+4      XT for I
                      (        forth.asm):02477         
F0F1 42               (        forth.asm):02478         INDIP   fcb     $42             79-STANDARD (REF)
F0F2 4927             (        forth.asm):02479                 fdb     $4927
F0F4 F0E9             (        forth.asm):02480                 fdb     RFETCH
F0F6 C7               (        forth.asm):02481                 RFCS
F0F7 C601             (        forth.asm):02482 (2)             ldb     #1
F0F9 20D8             (        forth.asm):02483 (3)             bra     ARPICKN
                      (        forth.asm):02484         
F0FB 41               (        forth.asm):02485         INDJ    fcb     $41             79-STANDARD (REQ225)
F0FC 4A               (        forth.asm):02486                 fcc     'J'
F0FD F0F1             (        forth.asm):02487                 fdb     INDIP
F0FF C7               (        forth.asm):02488                 RFCS
F100 C602             (        forth.asm):02489 (2)             ldb     #2
F102 20CF             (        forth.asm):02490 (3)             bra     ARPICKN
                      (        forth.asm):02491         
F104 42               (        forth.asm):02492         INDJP   fcb     $42             Non-standard
F105 4A27             (        forth.asm):02493                 fdb     $4A27
F107 F0FB             (        forth.asm):02494                 fdb     INDJ
F109 C7               (        forth.asm):02495                 RFCS
F10A C603             (        forth.asm):02496 (2)             ldb     #3
F10C 20C5             (        forth.asm):02497 (3)             bra     ARPICKN
                      (        forth.asm):02498         
F10E 41               (        forth.asm):02499         INDK    fcb     $41             79-STANDARD (REF)
F10F 4B               (        forth.asm):02500                 fcc     'K'
F110 F104             (        forth.asm):02501                 fdb     INDJP
F112 C7               (        forth.asm):02502                 RFCS
F113 C604             (        forth.asm):02503 (2)             ldb     #4
F115 20BC             (        forth.asm):02504 (3)             bra     ARPICKN
                      (        forth.asm):02505         
F117 04               (        forth.asm):02506         QUIT    fcb     4               79-STANDARD (REQ211)
F118 51554954         (        forth.asm):02507                 fcc     'QUIT'
F11C F10E             (        forth.asm):02508                 fdb     INDK
F11E C7               (        forth.asm):02509                 RFCS
F11F 0F21             (        forth.asm):02510 (5)             clr     USTATE+1
F121 BDEB8C           (        forth.asm):02511                 RFXT    jsr,RCLR+7      XT for RCLR
F124 10CE8000         (        forth.asm):02512 (4)             lds     #RAMSTRT+RAMSIZE Reset the system stack pointer
F128 BDE308           (        forth.asm):02513 (7)             jsr     PUTCR
F12B 7EE0B2           (        forth.asm):02514 (3)             jmp     INTERP
                      (        forth.asm):02515         
F12E 05               (        forth.asm):02516         ABORT   fcb     5               79-STANDARD (REQ101)
F12F 41424F5254       (        forth.asm):02517                 fcc     'ABORT'
F134 F117             (        forth.asm):02518                 fdb     QUIT
F136 C7               (        forth.asm):02519                 RFCS
F137 BDEB80           (        forth.asm):02520                 RFXT    jsr,NCLR+7      XT for NCLR
F13A BDEB8C           (        forth.asm):02521                 RFXT    jsr,RCLR+7      XT for RCLR
F13D C603             (        forth.asm):02522 (2)             ldb     #3
F13F BDE772           (        forth.asm):02523 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02524         
F142 04               (        forth.asm):02525         FIND    fcb     4               79-STANDARD (REQ203)
F143 46494E44         (        forth.asm):02526                 fcc     'FIND'          ( -- XT )
F147 F12E             (        forth.asm):02527                 fdb     ABORT
F149 C7               (        forth.asm):02528                 RFCS
F14A 1FC2             (        forth.asm):02529 (4)             tfr     0,y             Default return value is zero
F14C BDE847           (        forth.asm):02530 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
F14F 6D84             (        forth.asm):02531 (5+0)           tst     ,x
F151 2711             (        forth.asm):02532 (3)             beq     @find1
F153 BDE396           (        forth.asm):02533 (7)             jsr     SCNSTOK
F156 270C             (        forth.asm):02534 (3)             beq     @find1
F158 BDE4B1           (        forth.asm):02535 (7)             jsr     SWDIC
F15B DC0E             (        forth.asm):02536 (4)             ldd     PLOAD           Retrieve word payload
F15D DD10             (        forth.asm):02537 (4)             std     FNDPLD          Make it accessible through PAYLOAD
F15F DC04             (        forth.asm):02538 (4)             ldd     TOKENEP
F161 BDE177           (        forth.asm):02539 (7)             jsr     U2INFRD         Derive >IN from D
F164 1F21             (        forth.asm):02540 (4)     @find1  tfr     y,x
F166 7EE7F3           (        forth.asm):02541 (3)             jmp     NPUSH
                      (        forth.asm):02542         
F169 01               (        forth.asm):02543         RBRACK  fcb     1               79-STANDARD (REQ126)
F16A 5D               (        forth.asm):02544                 fcc     ']'
F16B F142             (        forth.asm):02545                 fdb     FIND
F16D C7               (        forth.asm):02546                 RFCS
F16E 8601             (        forth.asm):02547 (2)             lda     #1
F170 9721             (        forth.asm):02548 (3)             sta     USTATE+1
F172 39               (        forth.asm):02549 (4)             rts
                      (        forth.asm):02550         
                      (        forth.asm):02551         * Note: the standard does not mandate that this primitive be executed in
                      (        forth.asm):02552         * definitions only. IMHO, it ought to, therefore I am forcing the C bit here.
F173 C1               (        forth.asm):02553         LBRACK  fcb     $C1             79-STANDARD (REQ125)
F174 5B               (        forth.asm):02554                 fcc     '['
F175 F169             (        forth.asm):02555                 fdb     RBRACK
F177 C7               (        forth.asm):02556                 RFCS
F178 0F21             (        forth.asm):02557 (5)             clr     USTATE+1
F17A 39               (        forth.asm):02558 (4)             rts
                      (        forth.asm):02559         
                      (        forth.asm):02560         * Functionally: : ['] FIND POSTPONE LITERAL ; IMMEDIATE RESTRICT
F17B C3               (        forth.asm):02561         BKQUOT  fcb     $C3             ANSI (Core)
F17C 5B275D           (        forth.asm):02562                 fcb     $5B,$27,$5D
F17F F173             (        forth.asm):02563                 fdb     LBRACK
F181 C7               (        forth.asm):02564                 RFCS
F182 8DC6             (        forth.asm):02565                 RFXT    bsr,FIND+7      XT for FIND
                      (        forth.asm):02566         * Data stack topmost cell has the target word address.
F184 7EEC0C           (        forth.asm):02567                 RFXT    jmp,LITERAL+10  XT for LITERAL
                      (        forth.asm):02568         
F187 C8               (        forth.asm):02569         POSTPON fcb     $C8             ANSI (Core)
F188 504F5354504F4E45 (        forth.asm):02570                 fcc     'POSTPONE'      Not a straight alias to [COMPILE]
F190 F17B             (        forth.asm):02571                 fdb     BKQUOT          Non-immediate words deserve special treatment
F192 C7               (        forth.asm):02572                 RFCS
F193 BDE847           (        forth.asm):02573 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
F196 6D84             (        forth.asm):02574 (5+0)           tst     ,x
F198 2605             (        forth.asm):02575 (3)             bne     @postp2
F19A C605             (        forth.asm):02576 (2)     @postp1 ldb     #5              Missing word name
F19C BDE772           (        forth.asm):02577 (7)             jsr     ERRHDLR         No return
F19F BDE396           (        forth.asm):02578 (7)     @postp2 jsr     SCNSTOK
F1A2 27F6             (        forth.asm):02579 (3)             beq     @postp1
F1A4 BDE4B1           (        forth.asm):02580 (7)             jsr     SWDIC
F1A7 2607             (        forth.asm):02581 (3)             bne     @postp3         Word found. Code address returned in Y
F1A9 9E02             (        forth.asm):02582 (4)             ldx     TOKENSP
F1AB C602             (        forth.asm):02583 (2)             ldb     #2              Undefined (X points to the offending word)
F1AD BDE772           (        forth.asm):02584 (7)             jsr     ERRHDLR         No return
F1B0 1F21             (        forth.asm):02585 (4)     @postp3 tfr     y,x             X has the actual execution token
F1B2 0D3B             (        forth.asm):02586 (4)             tst     IMDFLG
F1B4 2708             (        forth.asm):02587 (3)             beq     @postp5         Target word is not immediate
F1B6 BDE169           (        forth.asm):02588 (7)     @postp4 jsr     EMXASXT         Set as action component
F1B9 DC02             (        forth.asm):02589 (4)             ldd     TOKENSP         Updated by SWDIC if the word was found
F1BB 7EE177           (        forth.asm):02590 (3)             jmp     U2INFRD         Derive >IN from D
                      (        forth.asm):02591         * The word being considered is non-immediate. The equivalent input should be:
                      (        forth.asm):02592         * ['] <word> COMPILE, We have the XT for <word> in X.
F1BE BDE580           (        forth.asm):02593 (7)     @postp5 jsr     LITER
F1C1 8EF1D2           (        forth.asm):02594                 RFXT    ldx,#CMPCOMA+11 XT for COMPILE,
F1C4 20F0             (        forth.asm):02595 (3)             bra     @postp4
                      (        forth.asm):02596         
                      (        forth.asm):02597         * Like the 79-STANDARD COMPILE word, GNU Forth has this as a compile-only word.
                      (        forth.asm):02598         * This is a wise choice since it allows us to possibly optimize it.
F1C6 48               (        forth.asm):02599         CMPCOMA fcb     $48             ANSI (Core Ext)
F1C7 434F4D50494C452C (        forth.asm):02600                 fcc     'COMPILE,'      ( XT -- )
F1CF F187             (        forth.asm):02601                 fdb     POSTPON
F1D1 C7               (        forth.asm):02602                 RFCS
F1D2 BDE801           (        forth.asm):02603 (7)             jsr     NPOP            Execution token to X
F1D5 7EE169           (        forth.asm):02604 (3)             jmp     EMXASXT
                      (        forth.asm):02605         
                      (        forth.asm):02606         * As per the standard, : is not immediate. This allows for further interesting
                      (        forth.asm):02607         * developments, like tracing words execution...
F1D8 01               (        forth.asm):02608         COMPC   fcb     $1              79-STANDARD (REQ116)
F1D9 3A               (        forth.asm):02609                 fcc     ':'
F1DA F1C6             (        forth.asm):02610                 fdb     CMPCOMA
F1DC C7               (        forth.asm):02611                 RFCS
F1DD 8601             (        forth.asm):02612 (2)             lda     #1
F1DF 9721             (        forth.asm):02613 (3)             sta     USTATE+1
F1E1 104F             (        forth.asm):02614 (2)             clrd
F1E3 DD14             (        forth.asm):02615 (4)             std     JSRLAST
F1E5 8602             (        forth.asm):02616 (2)             lda     #2
F1E7 9732             (        forth.asm):02617 (3)             sta     RTSREMV         Optimistic strategy: remove the final RTS
F1E9 9630             (        forth.asm):02618 (3)             lda     RDEPTH
F1EB 9731             (        forth.asm):02619 (3)             sta     IRDPTH          Meant to check for unbalanced constructs
F1ED 7EE51F           (        forth.asm):02620 (3)             jmp     LOCWRT
                      (        forth.asm):02621         
F1F0 C1               (        forth.asm):02622         COMPR   fcb     $C1             79-STANDARD (REQ196)
F1F1 3B               (        forth.asm):02623                 fcc     ';'
F1F2 F1D8             (        forth.asm):02624                 fdb     COMPC
F1F4 C7               (        forth.asm):02625                 RFCS
F1F5 9630             (        forth.asm):02626 (3)             lda     RDEPTH          Return stack depth
F1F7 9131             (        forth.asm):02627 (3)             cmpa    IRDPTH          Same as when : was entered?
F1F9 2705             (        forth.asm):02628 (3)             beq     @compr1
F1FB C609             (        forth.asm):02629 (2)             ldb     #9              Illegal construct if not
F1FD BDE772           (        forth.asm):02630 (7)             jsr     ERRHDLR         No return
F200 0F21             (        forth.asm):02631 (5)     @compr1 clr     USTATE+1        Back to interpretation mode
F202 9E0C             (        forth.asm):02632 (4)             ldx     BDICEND
F204 9F06             (        forth.asm):02633 (4)             stx     LSTWAD          Update LAST
F206 9E08             (        forth.asm):02634 (4)             ldx     DICEND
                      (        forth.asm):02635         * Optimization: replace the last JSR by a JMP, if possible.
F208 DC14             (        forth.asm):02636 (4)             ldd     JSRLAST
F20A 2712             (        forth.asm):02637 (3)             beq     @compr3         We need an RTS
F20C 301D             (        forth.asm):02638 (4+1)           leax    -3,x
F20E 9C14             (        forth.asm):02639 (4)             cmpx    JSRLAST
F210 2604             (        forth.asm):02640 (3)             bne     @compr2
F212 867E             (        forth.asm):02641 (2)             lda     #JMPOPC         JMP extended
F214 A784             (        forth.asm):02642 (4+0)           sta     ,x
                      (        forth.asm):02643         * At this point we still have to emit an RTS unless RTSREMV is 2 or more.
F216 3003             (        forth.asm):02644 (4+1)   @compr2 leax    3,x
F218 9632             (        forth.asm):02645 (3)             lda     RTSREMV
F21A 8102             (        forth.asm):02646 (2)             cmpa    #2
F21C 2404             (        forth.asm):02647 (3)             bhs     @compr4         Optimization applies. We have no forward refs
F21E 8639             (        forth.asm):02648 (2)     @compr3 lda     #RTSOPC         RTS inherent
F220 A780             (        forth.asm):02649 (4+1)           sta     ,x+
F222                  (        forth.asm):02650         @compr4
                      (        forth.asm):02651                 IFNE    DEBUG
                      (        forth.asm):02652                 lda     #ILLOPC         Illegal opcode
                      (        forth.asm):02653                 sta     ,x+
                      (        forth.asm):02654                 ENDC                    DEBUG
F222 9F08             (        forth.asm):02655 (4)             stx     DICEND          Update HERE
                      (        forth.asm):02656                 IFNE    RELFEAT
F224 BDECA0           (        forth.asm):02657                 RFXT    jsr,MONITOR+10  XT for MONITOR. All : words are candidates
                      (        forth.asm):02658         *                               for integrity check by ICHECK.
                      (        forth.asm):02659                 ENDC                    RELFEAT
F227 39               (        forth.asm):02660 (4)             rts
                      (        forth.asm):02661         
F228 C7               (        forth.asm):02662         RECURSE fcb     $C7             FORTH-83
F229 52454355525345   (        forth.asm):02663                 fcc     'RECURSE'
F230 F1F0             (        forth.asm):02664                 fdb     COMPR
F232 C7               (        forth.asm):02665                 RFCS
F233 9E12             (        forth.asm):02666 (4)             ldx     RECADDR         Set up by LOCWRT
F235 7EE169           (        forth.asm):02667 (3)             jmp     EMXASXT         Set as action component
                      (        forth.asm):02668         
F238 06               (        forth.asm):02669         FORGET  fcb     6               79-STANDARD (REQ196)
F239 464F52474554     (        forth.asm):02670                 fcc     'FORGET'
F23F F228             (        forth.asm):02671                 fdb     RECURSE
F241 C7               (        forth.asm):02672                 RFCS
F242 BDE847           (        forth.asm):02673 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
F245 6D84             (        forth.asm):02674 (5+0)           tst     ,x              EOL?
F247 2605             (        forth.asm):02675 (3)             bne     @frgt2          No
F249 C605             (        forth.asm):02676 (2)     @frgt1  ldb     #5              Missing word name
F24B BDE772           (        forth.asm):02677 (7)             jsr     ERRHDLR         No return
F24E BDE396           (        forth.asm):02678 (7)     @frgt2  jsr     SCNSTOK
F251 27F6             (        forth.asm):02679 (3)             beq     @frgt1          EOL before a non-SP character could be acquired
F253 BDE4B1           (        forth.asm):02680 (7)             jsr     SWDIC           SWDIC uses TOKENSP as input--not X!!
F256 2607             (        forth.asm):02681 (3)             bne     @frgt3          Word found. XT returned in Y
F258 9E02             (        forth.asm):02682 (4)             ldx     TOKENSP
F25A C602             (        forth.asm):02683 (2)             ldb     #2              Undefined (X points to the offending word)
F25C BDE772           (        forth.asm):02684 (7)             jsr     ERRHDLR         No return
F25F 1F21             (        forth.asm):02685 (4)     @frgt3  tfr     y,x             Y and X have the word's XT
F261 108C0C65         (        forth.asm):02686 (4)             cmpy    #RAMFTCH
F265 2719             (        forth.asm):02687 (3)             beq     @frgt4
F267 108CE000         (        forth.asm):02688 (4)             cmpy    #ROMSTRT
F26B 2413             (        forth.asm):02689 (3)             bhs     @frgt4
                      (        forth.asm):02690                 IFNE    RELFEAT
F26D AE1D             (        forth.asm):02691 (5+1)           ldx     -3,x            Backlink to X
F26F 9F06             (        forth.asm):02692 (4)             stx     LSTWAD          Update LAST
F271 303C             (        forth.asm):02693 (4+1)           leax    -4,y            XT-4 to X (1B/attr, 2B/backlink, 1B/checksum)
                      (        forth.asm):02694                 ELSE
                      (        forth.asm):02695                 ldx     -2,x            Backlink to X
                      (        forth.asm):02696                 stx     LSTWAD          Update LAST
                      (        forth.asm):02697                 leax    -3,y            XT-3 to X (1B/attr, 2B/backlink)
                      (        forth.asm):02698                 ENDC                    RELFEAT
F273 4F               (        forth.asm):02699 (1)             clra
F274 D63A             (        forth.asm):02700 (3)             ldb     CURTOKL         Token name length to D
F276 103201           (        forth.asm):02701 (4)             subr    d,x             Substract word length
F279 9F08             (        forth.asm):02702 (4)             stx     DICEND          Update HERE
F27B DC02             (        forth.asm):02703 (4)             ldd     TOKENSP         Set by SWDIC to point to the end of the token
F27D 7EE177           (        forth.asm):02704 (3)             jmp     U2INFRD         Derive >IN from D
F280 C60B             (        forth.asm):02705 (2)     @frgt4  ldb     #11             Word is unforgettable
F282 BDE772           (        forth.asm):02706 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02707         
F285 07               (        forth.asm):02708         EXCT    fcb     7               79-STANDARD (REQ163)
F286 45584543555445   (        forth.asm):02709                 fcc     'EXECUTE'
F28D F238             (        forth.asm):02710                 fdb     FORGET
F28F C7               (        forth.asm):02711                 RFCS
F290 BDE801           (        forth.asm):02712 (7)             jsr     NPOP
F293 1037C1           (        forth.asm):02713 (4)             cmpr    0,x             Although the standard does not specify that
F296 2702             (        forth.asm):02714 (3)             beq     @exct1          a NUL address should trigger an error, I do
F298 1F15             (        forth.asm):02715 (4)             tfr     x,pc
F29A C60D             (        forth.asm):02716 (2)     @exct1  ldb     #13             Illegal argument
F29C BDE772           (        forth.asm):02717 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02718         
F29F 03               (        forth.asm):02719         BYE     fcb     3               ANSI (Programming tools)
F2A0 425945           (        forth.asm):02720                 fcc     'BYE'
F2A3 F285             (        forth.asm):02721                 fdb     EXCT
F2A5 C7               (        forth.asm):02722                 RFCS
                      (        forth.asm):02723                 IFNE    RTCFEAT
                      (        forth.asm):02724                 lda     #RTOREGB
                      (        forth.asm):02725                 jsr     RTREGRD         RTCB register to B
                      (        forth.asm):02726                 andb    #^RTBPIE        Disable periodic interrupt generation
                      (        forth.asm):02727                 jsr     RTREGWR
                      (        forth.asm):02728                 ldx     #40
                      (        forth.asm):02729                 jsr     MILLIS1         Wait for 40 milliseconds
                      (        forth.asm):02730                 orcc    #(FFLAG|IFLAG)  Disable maskable interrupts
                      (        forth.asm):02731                 ENDC                    RTCFEAT
F2A6 7EE037           (        forth.asm):02732 (3)             jmp     RSTHDL
                      (        forth.asm):02733         
F2A9 C6               (        forth.asm):02734         BKCHAR  fcb     $C6             ANSI (Core)
F2AA 5B434841525D     (        forth.asm):02735                 fcc     '[CHAR]'
F2B0 F29F             (        forth.asm):02736                 fdb     BYE
F2B2 C7               (        forth.asm):02737                 RFCS
F2B3 8D0B             (        forth.asm):02738                 RFXT    bsr,CHAR+7      XT for CHAR
F2B5 7EEC0C           (        forth.asm):02739                 RFXT    jmp,LITERAL+10  XT for LITERAL
                      (        forth.asm):02740         
F2B8 04               (        forth.asm):02741         CHAR    fcb     4               ANSI (Core)
F2B9 43484152         (        forth.asm):02742                 fcc     'CHAR'
F2BD F2A9             (        forth.asm):02743                 fdb     BKCHAR
F2BF C7               (        forth.asm):02744                 RFCS
F2C0 BDE847           (        forth.asm):02745 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
F2C3 BDE396           (        forth.asm):02746 (7)     @char1  jsr     SCNSTOK         X points to the beginning of the character
F2C6 2712             (        forth.asm):02747 (3)             beq     @chrerr
F2C8 E684             (        forth.asm):02748 (4+0)           ldb     ,x
F2CA 4F               (        forth.asm):02749 (1)             clra
F2CB 1F01             (        forth.asm):02750 (4)             tfr     d,x
F2CD BDE7F3           (        forth.asm):02751 (7)             jsr     NPUSH
F2D0 9E02             (        forth.asm):02752 (4)             ldx     TOKENSP         Set by SCNSTOK
F2D2 BDE3A4           (        forth.asm):02753 (7)             jsr     SCNETOK
F2D5 1F10             (        forth.asm):02754 (4)             tfr     x,d             TOKENEP
F2D7 7EE177           (        forth.asm):02755 (3)             jmp     U2INFRD         Derive >IN from D
F2DA C60D             (        forth.asm):02756 (2)     @chrerr ldb     #13             Illegal argument
F2DC BDE772           (        forth.asm):02757 (7)             jsr     ERRHDLR
                      (        forth.asm):02758         * No return.
                      (        forth.asm):02759         
                      (        forth.asm):02760         * Hairy code but working.
F2DF 04               (        forth.asm):02761         WORD    fcb     4               79-STANDARD (REQ181)
F2E0 574F5244         (        forth.asm):02762                 fcc     'WORD'          ( char -- addr )
F2E4 F2B8             (        forth.asm):02763                 fdb     CHAR
F2E6 C7               (        forth.asm):02764                 RFCS
F2E7 BDE801           (        forth.asm):02765 (7)             jsr     NPOP
F2EA 1F16             (        forth.asm):02766 (4)             tfr     x,w             F has the delimiter ASCII code
F2EC 109E08           (        forth.asm):02767 (5)             ldy     DICEND          The counted string returned is stored at HERE
F2EF 3420             (        forth.asm):02768 (4+2)           pshs    y
F2F1 6FA0             (        forth.asm):02769 (6+1)           clr     ,y+             Initialize its length
F2F3 BDE847           (        forth.asm):02770 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
F2F6 6D84             (        forth.asm):02771 (5+0)           tst     ,x              EOL reached?
F2F8 2605             (        forth.asm):02772 (3)             bne     @word1          No, proceed
F2FA 3510             (        forth.asm):02773 (4+2)   @word0  puls    x
F2FC 3610             (        forth.asm):02774                 UCNPUSH                 Push back HERE
F2FE 39               (        forth.asm):02775 (4)             rts
F2FF 3001             (        forth.asm):02776 (4+1)   @word1  leax    1,x             Skip space character after WORD or leading delim
F301 A684             (        forth.asm):02777 (4+0)           lda     ,x
F303 2716             (        forth.asm):02778 (3)             beq     @word5          EOL reached, this is the end
F305 1037F8           (        forth.asm):02779 (4)             cmpr    f,a             Leading delimiter matched?
F308 27F5             (        forth.asm):02780 (3)             beq     @word1          Yes
F30A A680             (        forth.asm):02781 (4+1)   @word2  lda     ,x+             Acquire next character from the input stream
F30C A7A0             (        forth.asm):02782 (4+1)   @word3  sta     ,y+
F30E 2709             (        forth.asm):02783 (3)             beq     @word4          EOL reached
F310 1037F8           (        forth.asm):02784 (4)             cmpr    f,a             Trailing delimiter?
F313 2706             (        forth.asm):02785 (3)             beq     @word5
F315 6CF4             (        forth.asm):02786 (6+3)           inc     [,s]            Increment string length
F317 20F1             (        forth.asm):02787 (3)             bra     @word2
F319 301F             (        forth.asm):02788 (4+1)   @word4  leax    -1,x            EOL reached
F31B 1F10             (        forth.asm):02789 (4)     @word5  tfr     x,d             Pointing one char after the delimiter or to NUL
F31D BDE177           (        forth.asm):02790 (7)             jsr     U2INFRD         Derive >IN from D
F320 20D8             (        forth.asm):02791 (3)             bra     @word0
                      (        forth.asm):02792         
F322 81               (        forth.asm):02793         LPAR    fcb     $81             79-STANDARD (REQ122)
F323 28               (        forth.asm):02794                 fcc     '('
F324 F2DF             (        forth.asm):02795                 fdb     WORD
F326 C7               (        forth.asm):02796                 RFCS
F327 BDE847           (        forth.asm):02797 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
F32A A680             (        forth.asm):02798 (4+1)   @lpar1  lda     ,x+
F32C 2709             (        forth.asm):02799 (3)             beq     @lparx          Input stream exhausted before ) is matched
F32E 8129             (        forth.asm):02800 (2)             cmpa    #')
F330 26F8             (        forth.asm):02801 (3)             bne     @lpar1
F332 1F10             (        forth.asm):02802 (4)             tfr     x,d             Just matched )
F334 7EE177           (        forth.asm):02803 (3)             jmp     U2INFRD         Derive >IN from D
F337 C60C             (        forth.asm):02804 (2)     @lparx  ldb     #12             Missing delimiter
F339 BDE772           (        forth.asm):02805 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02806         
F33C 06               (        forth.asm):02807         SOURCE  fcb     6               ANSI (Core)
F33D 534F55524345     (        forth.asm):02808                 fcc     'SOURCE'        ( -- baseaddr charcount )
F343 F322             (        forth.asm):02809                 fdb     LPAR
F345 C7               (        forth.asm):02810                 RFCS
F346 9E1C             (        forth.asm):02811 (4)             ldx     BSBFADR
F348 BDE7F3           (        forth.asm):02812 (7)             jsr     NPUSH
F34B 8E0400           (        forth.asm):02813 (3)             ldx     #BLKSIZ         Non-zero block size
F34E DC24             (        forth.asm):02814 (4)             ldd     UBLK
F350 2605             (        forth.asm):02815 (3)             bne     @srcdon         Current BLK is NZ
F352 4F               (        forth.asm):02816 (1)             clra
F353 D62F             (        forth.asm):02817 (3)             ldb     CMDLNSZ         Character count entered through GETS in INTERP
F355 1F01             (        forth.asm):02818 (4)             tfr     d,x
F357 7EE7F3           (        forth.asm):02819 (3)     @srcdon jmp     NPUSH
                      (        forth.asm):02820         
                      (        forth.asm):02821         * This is a straightforward implementation borrowed from GNU Forth 'see \':
                      (        forth.asm):02822         * : \
                      (        forth.asm):02823         *   BLK @
                      (        forth.asm):02824         *   IF     >IN @ C/L / 1+ C/L * >IN ! EXIT
                      (        forth.asm):02825         *   THEN
                      (        forth.asm):02826         *   SOURCE >IN ! DROP ; IMMEDIATE
                      (        forth.asm):02827         * However since C/L (number of columns per line) is 64 (a power of 2), things
                      (        forth.asm):02828         * can be coded in a more compact manner as: >IN @ 63 COM AND 64 + >IN !
F35A 81               (        forth.asm):02829         BKSLSH  fcb     $81             ANSI (Block Ext)
F35B 5C               (        forth.asm):02830                 fcb     $5C             \ ( -- )
F35C F33C             (        forth.asm):02831                 fdb     SOURCE
F35E C7               (        forth.asm):02832                 RFCS
F35F DC24             (        forth.asm):02833 (4)             ldd     UBLK            BLK @ to D
F361 270B             (        forth.asm):02834 (3)             beq     @comser         We operate from block 0: the console
F363 DC22             (        forth.asm):02835 (4)             ldd     UTOIN           >IN @
F365 C4C0             (        forth.asm):02836 (2)             andb    #^$3F           Point to the beginning of the line
F367 CB40             (        forth.asm):02837 (2)             addb    #$40            next line
F369 8900             (        forth.asm):02838 (2)             adca    #0              Propagate potential carry from LSB
F36B DD22             (        forth.asm):02839 (4)             std     UTOIN           >IN !
F36D 39               (        forth.asm):02840 (4)             rts                     EXIT
F36E 8DD6             (        forth.asm):02841         @comser RFXT    bsr,SOURCE+9    XT for SOURCE
F370 BDE801           (        forth.asm):02842 (7)             jsr     NPOP
F373 9F22             (        forth.asm):02843 (4)             stx     UTOIN           >IN !
F375 7EFC33           (        forth.asm):02844                 RFXT    jmp,DROP+7      XT for DROP
                      (        forth.asm):02845                 ENDC
                      (        forth.asm):02846         
F378 82               (        forth.asm):02847         PSTR    fcb     $82             79-STANDARD (REQ133)
F379 2E22             (        forth.asm):02848                 fcc     '."'
F37B F35A             (        forth.asm):02849                 fdb     BKSLSH
F37D C7               (        forth.asm):02850                 RFCS
F37E 8D13             (        forth.asm):02851                 RFXT    bsr,SQUOTE+5    XT for S"
F380 0D21             (        forth.asm):02852 (4)             tst     USTATE+1
F382 2603             (        forth.asm):02853 (3)             bne     @pstcmp
F384 7EF73F           (        forth.asm):02854                 RFXT    jmp,TYPE+7      XT for TYPE
F387 8EF73F           (        forth.asm):02855         @pstcmp RFXT    ldx,#TYPE+7     Emit TYPE as an XT
F38A 7EE169           (        forth.asm):02856 (3)             jmp     EMXASXT
                      (        forth.asm):02857         
F38D 82               (        forth.asm):02858         SQUOTE  fcb     $82             ANSI (Core)
F38E 5322             (        forth.asm):02859                 fcc     'S"'
F390 F378             (        forth.asm):02860                 fdb     PSTR
F392 C7               (        forth.asm):02861                 RFCS
F393 0D21             (        forth.asm):02862 (4)             tst     USTATE+1
F395 260C             (        forth.asm):02863 (3)             bne     @sqcmp
F397 8E0022           (        forth.asm):02864 (3)             ldx     #'"             We are inperpreting
F39A BDE7F3           (        forth.asm):02865 (7)             jsr     NPUSH
F39D BDF2E7           (        forth.asm):02866                 RFXT    jsr,WORD+7      XT for WORD
F3A0 7EF75E           (        forth.asm):02867                 RFXT    jmp,COUNT+8     XT for COUNT
F3A3 109E08           (        forth.asm):02868 (5)     @sqcmp  ldy     DICEND          We are compiling
F3A6 867E             (        forth.asm):02869 (2)             lda     #JMPOPC         JMP extended
F3A8 A7A0             (        forth.asm):02870 (4+1)           sta     ,y+
F3AA 3420             (        forth.asm):02871 (4+2)           pshs    y
F3AC 3122             (        forth.asm):02872 (4+1)           leay    2,y             2 ALLOT
F3AE 109F08           (        forth.asm):02873 (5)             sty     DICEND
F3B1 8E0022           (        forth.asm):02874 (3)             ldx     #'"
F3B4 BDE7F3           (        forth.asm):02875 (7)             jsr     NPUSH
F3B7 BDF2E7           (        forth.asm):02876                 RFXT    jsr,WORD+7      XT for WORD
F3BA BDE801           (        forth.asm):02877 (7)             jsr     NPOP
F3BD 4F               (        forth.asm):02878 (1)             clra
F3BE E684             (        forth.asm):02879 (4+0)           ldb     ,x              C@
F3C0 3001             (        forth.asm):02880 (4+1)           leax    1,x             1+. Skip the byte count (X has HERE)
F3C2 308B             (        forth.asm):02881 (4+2)           leax    d,x             Skip string length material
F3C4 3520             (        forth.asm):02882 (4+2)           puls    y
F3C6 AFA4             (        forth.asm):02883 (5+0)           stx     ,y              Install jump address
F3C8 3122             (        forth.asm):02884 (4+1)           leay    2,y             Counted string base address to Y
F3CA 868E             (        forth.asm):02885 (2)             lda     #LDXOPC
F3CC A780             (        forth.asm):02886 (4+1)           sta     ,x+
F3CE 10AF81           (        forth.asm):02887 (6+2)           sty     ,x++
F3D1 9F08             (        forth.asm):02888 (4)             stx     DICEND          Update HERE
F3D3 8EE7F3           (        forth.asm):02889 (3)             ldx     #NPUSH
F3D6 BDE169           (        forth.asm):02890 (7)             jsr     EMXASXT
F3D9 8EF75E           (        forth.asm):02891                 RFXT    ldx,#COUNT+8    XT for COUNT
F3DC 7EE169           (        forth.asm):02892 (3)             jmp     EMXASXT
                      (        forth.asm):02893         
                      (        forth.asm):02894         * Transactional behaviour is guaranteed here. What this means is that the
                      (        forth.asm):02895         * operation will preserve the data stack contents, should insufficient
                      (        forth.asm):02896         * parameters be supplied. It is a very desirable feature (for debugging
                      (        forth.asm):02897         * purposes) which will be generalized to a number of other words. As an
                      (        forth.asm):02898         * aside, it also allows us to access the data stack as directly indexed
                      (        forth.asm):02899         * through the 6309 U register, resulting in better performance.
F3DF 02               (        forth.asm):02900         DPLUS   fcb     2               79-STANDARD (REQ241)
F3E0 442B             (        forth.asm):02901                 fcc     'D+'            ( d1 d2 -- d1+d2--signed )
F3E2 F38D             (        forth.asm):02902                 fdb     SQUOTE          In processor's terms U has ( L1 H1 L2 H2)
F3E4 C7               (        forth.asm):02903                 RFCS
F3E5 BDE4AC           (        forth.asm):02904 (7)             jsr     MIN4PST         Make sure we have at least 4 cells stacked up
                      (        forth.asm):02905         * At this point sufficient stack depth has been assessed. Let's rock and roll!
F3E8 EC46             (        forth.asm):02906 (5+1)           ldd     6,u             L1
F3EA E342             (        forth.asm):02907 (5+1)           addd    2,u             L2
F3EC ED46             (        forth.asm):02908 (5+1)           std     6,u             d1+d2 least significant cell
F3EE EC44             (        forth.asm):02909 (5+1)           ldd     4,u             H1
F3F0 10A9C4           (        forth.asm):02910 (6+0)           adcd    ,u              H2 (add with carry bit)
F3F3 ED44             (        forth.asm):02911 (5+1)           std     4,u             d1+d2 most significant cell
F3F5 3344             (        forth.asm):02912 (4+1)           leau    4,u             Drop 2 cells from the data stack
F3F7 39               (        forth.asm):02913 (4)             rts
                      (        forth.asm):02914         
F3F8 07               (        forth.asm):02915         DNEG    fcb     7               79-STANDARD (REQ245)
F3F9 444E4547415445   (        forth.asm):02916                 fcc     'DNEGATE'
F400 F3DF             (        forth.asm):02917                 fdb     DPLUS
F402 C7               (        forth.asm):02918                 RFCS
F403 BDE4A2           (        forth.asm):02919 (7)             jsr     MIN2PST         We need at least 2 cells stacked up
F406 10A642           (        forth.asm):02920 (6+1)           ldw     2,u             Least significant cell
F409 1053             (        forth.asm):02921 (2)             comw
F40B ECC4             (        forth.asm):02922 (5+0)           ldd     ,u              Most significant cell
F40D 1043             (        forth.asm):02923 (2)             comd
F40F 108B0001         (        forth.asm):02924 (4)             addw    #1
F413 10890000         (        forth.asm):02925 (4)             adcd    #0              Propagate carry flag
F417 10EDC4           (        forth.asm):02926 (8+0)           stq     ,u              Store the result back to the data stack
F41A 39               (        forth.asm):02927 (4)             rts
                      (        forth.asm):02928         
F41B 02               (        forth.asm):02929         DMINUS  fcb     2               79-STANDARD (REQ241)
F41C 442D             (        forth.asm):02930                 fcc     'D-'            ( d1 d2 -- d1-d2--signed )
F41E F3F8             (        forth.asm):02931                 fdb     DNEG            In processor's terms U has ( L1 H1 L2 H2)
F420 C7               (        forth.asm):02932                 RFCS
F421 BDE4AC           (        forth.asm):02933 (7)             jsr     MIN4PST         Make sure we have at least 4 cells stacked up
F424 EC46             (        forth.asm):02934 (5+1)           ldd     6,u             L1
F426 A342             (        forth.asm):02935 (5+1)           subd    2,u             L2
F428 ED46             (        forth.asm):02936 (5+1)           std     6,u             d1-d2 least significant cell
F42A EC44             (        forth.asm):02937 (5+1)           ldd     4,u             H1
F42C 10A2C4           (        forth.asm):02938 (6+0)           sbcd    ,u              H2 (substract with borrow)
F42F ED44             (        forth.asm):02939 (5+1)           std     4,u             d1-d2 most significant cell
F431 3344             (        forth.asm):02940 (4+1)           leau    4,u
F433 39               (        forth.asm):02941 (4)             rts
                      (        forth.asm):02942         
F434 03               (        forth.asm):02943         DZEQ    fcb     3               79-STANDARD (double number extension)
F435 44303D           (        forth.asm):02944                 fcc     'D0='           ( d -- flag )
F438 F41B             (        forth.asm):02945                 fdb     DMINUS
F43A C7               (        forth.asm):02946                 RFCS
F43B BDEE8B           (        forth.asm):02947                 RFXT    jsr,OR+5        XT for OR
F43E 7EEF05           (        forth.asm):02948                 RFXT    jmp,NULP+5      XT for 0=
                      (        forth.asm):02949         
                      (        forth.asm):02950         * GNU Forth has:
                      (        forth.asm):02951         * f = FLAG(d1.hi==d2.hi ? d1.lo<d2.lo : d1.hi<d2.hi);
                      (        forth.asm):02952         * Comparisons between high cells are signed, but they are unsigned between
                      (        forth.asm):02953         * the low cells.
F441 02               (        forth.asm):02954         DLESS   fcb     2               79-STANDARD (REQ244)
F442 443C             (        forth.asm):02955                 fcc     'D<'            ( d1 d2 -- flag )
F444 F434             (        forth.asm):02956                 fdb     DZEQ
F446 C7               (        forth.asm):02957                 RFCS
F447 BDE4AC           (        forth.asm):02958 (7)             jsr     MIN4PST
                      (        forth.asm):02959         * Data stack structure at this point:
                      (        forth.asm):02960         * ,u    d2.hi                   1 cell
                      (        forth.asm):02961         * 2,u   d2.lo                   1 cell
                      (        forth.asm):02962         * 4,u   d1.hi                   1 cell
                      (        forth.asm):02963         * 6,u   d1.lo                   1 cell
F44A 115F             (        forth.asm):02964 (2)             clrf                    A priori return value for FLAG
F44C ECC4             (        forth.asm):02965 (5+0)           ldd     ,u              D2.HI
F44E 10A344           (        forth.asm):02966 (6+1)           cmpd    4,u             D1.HI
F451 2611             (        forth.asm):02967 (3)             bne     @term2
F453 EC42             (        forth.asm):02968 (5+1)           ldd     2,u             D2.LO
F455 10A346           (        forth.asm):02969 (6+1)           cmpd    6,u             D1.LO
F458 2302             (        forth.asm):02970 (3)             bls     @done
F45A 115C             (        forth.asm):02971 (2)     @setto1 incf
F45C 11E747           (        forth.asm):02972 (5+1)   @done   stf     7,u             FLAG's LSB
F45F 6F46             (        forth.asm):02973 (6+1)           clr     6,u             FLAG's MSB
F461 3346             (        forth.asm):02974 (4+1)           leau    6,u             Drop three cells fron the data stack
F463 39               (        forth.asm):02975 (4)             rts
F464 2FF6             (        forth.asm):02976 (3)     @term2  ble     @done
F466 20F2             (        forth.asm):02977 (3)             bra     @setto1
                      (        forth.asm):02978         
F468 05               (        forth.asm):02979         TWOOVER fcb     5               79-STANDARD (double number extension)
F469 324F564552       (        forth.asm):02980                 fcc     '2OVER'         ( d1 d2 -- d1 d2 d1 )
F46E F441             (        forth.asm):02981                 fdb     DLESS
F470 C7               (        forth.asm):02982                 RFCS
F471 BDE4AC           (        forth.asm):02983 (7)             jsr     MIN4PST         At least four cells need to be stacked up
F474 10EC44           (        forth.asm):02984 (8+1)           ldq     4,u             D:W has MSC:LSC of D1
F477 1F61             (        forth.asm):02985 (4)             tfr     w,x
F479 BDE7F3           (        forth.asm):02986 (7)             jsr     NPUSH
F47C 1F01             (        forth.asm):02987 (4)             tfr     d,x
F47E 7EE7F3           (        forth.asm):02988 (3)             jmp     NPUSH
                      (        forth.asm):02989         
F481 05               (        forth.asm):02990         TWOSWAP fcb     5               79-STANDARD (double number extension)
F482 3253574150       (        forth.asm):02991                 fcc     '2SWAP'         ( d1 d2 -- d2 d1 )
F487 F468             (        forth.asm):02992                 fdb     TWOOVER
F489 C7               (        forth.asm):02993                 RFCS
F48A BDE4AC           (        forth.asm):02994 (7)             jsr     MIN4PST         At least four cells must be stacked up
F48D AE44             (        forth.asm):02995 (5+1)           ldx     4,u             D1 most significant cell
F48F 10AE46           (        forth.asm):02996 (6+1)           ldy     6,u             D1 least significant cell
F492 10ECC4           (        forth.asm):02997 (8+0)           ldq     ,u              D:W has MSC:LSC of D2
F495 10ED44           (        forth.asm):02998 (8+1)           stq     4,u
F498 AFC4             (        forth.asm):02999 (5+0)           stx     ,u
F49A 10AF42           (        forth.asm):03000 (6+1)           sty     2,u
F49D 39               (        forth.asm):03001 (4)             rts
                      (        forth.asm):03002         
F49E 05               (        forth.asm):03003         TWODROP fcb     5               79-STANDARD (double number extension)
F49F 3244524F50       (        forth.asm):03004                 fcc     '2DROP'         ( d -- )
F4A4 F481             (        forth.asm):03005                 fdb     TWOSWAP
F4A6 C7               (        forth.asm):03006                 RFCS
F4A7 BDE4A2           (        forth.asm):03007 (7)             jsr     MIN2PST         At least two cells must be stacked up
F4AA 3344             (        forth.asm):03008 (4+1)           leau    4,u
F4AC 39               (        forth.asm):03009 (4)             rts
                      (        forth.asm):03010         
F4AD 04               (        forth.asm):03011         TWODUP  fcb     4               79-STANDARD (double number extension)
F4AE 32445550         (        forth.asm):03012                 fcc     '2DUP'          ( double -- double double )
F4B2 F49E             (        forth.asm):03013                 fdb     TWODROP
F4B4 C7               (        forth.asm):03014                 RFCS
F4B5 BDE4A2           (        forth.asm):03015 (7)             jsr     MIN2PST         At least two cells need to be stacked up
F4B8 10ECC4           (        forth.asm):03016 (8+0)           ldq     ,u              D:W has MSC:LSC of DOUBLE
F4BB 1F61             (        forth.asm):03017 (4)             tfr     w,x
F4BD BDE7F3           (        forth.asm):03018 (7)             jsr     NPUSH
F4C0 1F01             (        forth.asm):03019 (4)             tfr     d,x
F4C2 7EE7F3           (        forth.asm):03020 (3)             jmp     NPUSH
                      (        forth.asm):03021         
F4C5 02               (        forth.asm):03022         TWOSTOR fcb     2               79-STANDARD (double number extension)
F4C6 3221             (        forth.asm):03023                 fcc     '2!'            ( double addr -- )
F4C8 F4AD             (        forth.asm):03024                 fdb     TWODUP
F4CA C7               (        forth.asm):03025                 RFCS
F4CB BDE4A7           (        forth.asm):03026 (7)             jsr     MIN3PST         At least three cells need to be stacked up
F4CE 10EC42           (        forth.asm):03027 (8+1)           ldq     2,u             DOUBLE to D:W
F4D1 10EDD4           (        forth.asm):03028 (8+3)           stq     [,u]            Store DOUBLE to ADDR
F4D4 3346             (        forth.asm):03029 (4+1)           leau    6,u             Drop three cells from the user stack
F4D6 39               (        forth.asm):03030 (4)             rts
                      (        forth.asm):03031         
F4D7 02               (        forth.asm):03032         TWOFTCH fcb     2               79-STANDARD (double number extension)
F4D8 3240             (        forth.asm):03033                 fcc     '2@'            ( dbladdr -- double )
F4DA F4C5             (        forth.asm):03034                 fdb     TWOSTOR
F4DC C7               (        forth.asm):03035                 RFCS
F4DD BDE49D           (        forth.asm):03036 (7)             jsr     MIN1PST         At least cell needs to be stacked up
F4E0 10ECD4           (        forth.asm):03037 (8+3)           ldq     [,u]            D:W has MSC:LSC of DBLADDR @
F4E3 10A7C4           (        forth.asm):03038 (6+0)           stw     ,u              Least significant cell stacked in place
F4E6 1F01             (        forth.asm):03039 (4)             tfr     d,x             Most significant cell goes through standard push
F4E8 7EE7F3           (        forth.asm):03040 (3)             jmp     NPUSH
                      (        forth.asm):03041         
F4EB 07               (        forth.asm):03042         CONVERT fcb     7               79-STANDARD (REQ195)
F4EC 434F4E56455254   (        forth.asm):03043                 fcc     'CONVERT'       ( d1 addr1 -- d2 addr2 )
F4F3 F4D7             (        forth.asm):03044                 fdb     TWOFTCH
F4F5 C7               (        forth.asm):03045                 RFCS
F4F6 BDE4A7           (        forth.asm):03046 (7)             jsr     MIN3PST         At least 3 cells need to be stacked up
F4F9 BDE3E1           (        forth.asm):03047 (7)             jsr     CKBASE          Check for supported BASE. No return if not
F4FC AEC4             (        forth.asm):03048 (5+0)           ldx     ,u              ADDR1 to X
F4FE 3001             (        forth.asm):03049 (4+1)   @cvloop leax    1,x
F500 E684             (        forth.asm):03050 (4+0)           ldb     ,x
                      (        forth.asm):03051         * B has the ASCII representation of something that may or may not be a valid
                      (        forth.asm):03052         * digit, expressed in BASE (alias (byte)UBASE+1). If it does, multiply D1 by
                      (        forth.asm):03053         * BASE and add that to D1 (aka D2 on exit). Then add DIGIT on the top of it.
F502 C030             (        forth.asm):03054 (2)             subb    #'0             Minimal ASCII value condition met?
F504 255B             (        forth.asm):03055 (3)             blo     @cvoor          No. Out of range. ,X cannot be a valid digit
F506 C10A             (        forth.asm):03056 (2)             cmpb    #10
F508 2510             (        forth.asm):03057 (3)             blo     @cvnolt         No letter in potential BASE
                      (        forth.asm):03058                 IFEQ    CSSNTVE
F50A C111             (        forth.asm):03059 (2)             cmpb    #'A-'0
F50C 2553             (        forth.asm):03060 (3)             blo     @cvoor          Greater than 9 but lower than A
F50E C131             (        forth.asm):03061 (2)             cmpb    #'a-'0
F510 2506             (        forth.asm):03062 (3)             blo     @cvisuc         Upper case already
F512 C14A             (        forth.asm):03063 (2)             cmpb    #'z-'0
F514 224B             (        forth.asm):03064 (3)             bhi     @cvoor          Definitely out of range
F516 C020             (        forth.asm):03065 (2)             subb    #'a-'A          To upper case
                      (        forth.asm):03066                 ENDC                    CSSNTVE
F518 C007             (        forth.asm):03067 (2)     @cvisuc subb    #'A-':          A-Z to number
F51A D11F             (        forth.asm):03068 (3)     @cvnolt cmpb    UBASE+1         B has a digit. Make sure it's less than BASE
F51C 2443             (        forth.asm):03069 (3)             bhs     @cvoor          Number under scrutiny is >= BASE
F51E 3278             (        forth.asm):03070 (4+1)           leas    -8,s            Allocate scratch space
F520 4F               (        forth.asm):03071 (1)             clra
F521 3406             (        forth.asm):03072 (4+2)           pshs    d
                      (        forth.asm):03073         * System and user stack structures are as follows:
                      (        forth.asm):03074         * ,s    current digit (1 cell)
                      (        forth.asm):03075         * 2,s   D0*B (1 cell)
                      (        forth.asm):03076         * 4,s   D1*B (1 cell)
                      (        forth.asm):03077         * 6,s   D2*B (1 cell)
                      (        forth.asm):03078         * 8,s   D3*B (1 cell)
                      (        forth.asm):03079         * 2,u   D1H most significant cell
                      (        forth.asm):03080         * 4,u   D1L least significant cell
F523 1F37             (        forth.asm):03081 (4)             tfr     u,v             Backup U
F525 3346             (        forth.asm):03082 (4+1)           leau    6,u             Point one byte after D1LL
F527 3162             (        forth.asm):03083 (4+1)           leay    2,s             Point to D0*B
F529 118604           (        forth.asm):03084 (3)             lde     #4              Four products to go through
F52C A6C2             (        forth.asm):03085 (4+1)   @cvmul  lda     ,-u
F52E D61F             (        forth.asm):03086 (3)             ldb     UBASE+1
F530 3D               (        forth.asm):03087 (10)            mul
F531 EDA1             (        forth.asm):03088 (5+2)           std     ,y++
F533 114A             (        forth.asm):03089 (2)             dece
F535 26F5             (        forth.asm):03090 (3)             bne     @cvmul
F537 1F73             (        forth.asm):03091 (4)             tfr     v,u             Restore U
F539 A663             (        forth.asm):03092 (4+1)           lda     3,s
F53B A745             (        forth.asm):03093 (4+1)           sta     5,u             D1LL
F53D A662             (        forth.asm):03094 (4+1)           lda     2,s
F53F AB65             (        forth.asm):03095 (4+1)           adda    5,s
F541 A744             (        forth.asm):03096 (4+1)           sta     4,u             D1LH
F543 A664             (        forth.asm):03097 (4+1)           lda     4,s
F545 A967             (        forth.asm):03098 (4+1)           adca    7,s
F547 A743             (        forth.asm):03099 (4+1)           sta     3,u             D1HL
F549 A666             (        forth.asm):03100 (4+1)           lda     6,s
F54B A969             (        forth.asm):03101 (4+1)           adca    9,s
F54D A742             (        forth.asm):03102 (4+1)           sta     2,u             D1HH
F54F EC44             (        forth.asm):03103 (5+1)           ldd     4,u             D1L
F551 E3E4             (        forth.asm):03104 (5+0)           addd    ,s              DIGIT
F553 ED44             (        forth.asm):03105 (5+1)           std     4,u
F555 EC42             (        forth.asm):03106 (5+1)           ldd     2,u             D1H
F557 10890000         (        forth.asm):03107 (4)             adcd    #0              Potential carry from lower cell
F55B ED42             (        forth.asm):03108 (5+1)           std     2,u
F55D 326A             (        forth.asm):03109 (4+1)           leas    10,s            Release scratch space
F55F 209D             (        forth.asm):03110 (3)             bra     @cvloop         Here we go again
F561 AFC4             (        forth.asm):03111 (5+0)   @cvoor  stx     ,u              Update ADDR2
F563 39               (        forth.asm):03112 (4)             rts
                      (        forth.asm):03113         
F564 02               (        forth.asm):03114         CVTE    fcb     2
F565 233E             (        forth.asm):03115                 fcc     '#>'
F567 F4EB             (        forth.asm):03116                 fdb     CONVERT
F569 C7               (        forth.asm):03117                 RFCS
F56A BDE801           (        forth.asm):03118 (7)             jsr     NPOP
F56D BDE801           (        forth.asm):03119 (7)             jsr     NPOP            Drop 2 cells from the data stack
F570 8E0186           (        forth.asm):03120 (3)             ldx     #PADBUF
F573 3610             (        forth.asm):03121                 UCNPUSH
F575 BDE246           (        forth.asm):03122 (7)             jsr     SLEN
F578 1F61             (        forth.asm):03123 (4)             tfr     w,x
F57A 3610             (        forth.asm):03124                 UCNPUSH
F57C 39               (        forth.asm):03125 (4)             rts
                      (        forth.asm):03126         
F57D 04               (        forth.asm):03127         SIGN    fcb     4
F57E 5349474E         (        forth.asm):03128                 fcc     'SIGN'
F582 F564             (        forth.asm):03129                 fdb     CVTE
F584 C7               (        forth.asm):03130                 RFCS
F585 BDE801           (        forth.asm):03131 (7)             jsr     NPOP
F588 1F10             (        forth.asm):03132 (4)             tfr     x,d
F58A 104D             (        forth.asm):03133 (2)             tstd
F58C 2C05             (        forth.asm):03134 (3)             bge     @sign1
F58E C62D             (        forth.asm):03135 (2)             ldb     #'-
F590 7EF64C           (        forth.asm):03136 (3)             jmp     INSBPAD
F593 39               (        forth.asm):03137 (4)     @sign1  rts
                      (        forth.asm):03138         
F594 04               (        forth.asm):03139         HOLD    fcb     4
F595 484F4C44         (        forth.asm):03140                 fcc     'HOLD'
F599 F57D             (        forth.asm):03141                 fdb     SIGN
F59B C7               (        forth.asm):03142                 RFCS
F59C BDE801           (        forth.asm):03143 (7)             jsr     NPOP
F59F 1F10             (        forth.asm):03144 (4)             tfr     x,d
F5A1 7EF64C           (        forth.asm):03145 (3)             jmp     INSBPAD         B is inserted at the beginning of PAD.
                      (        forth.asm):03146         
F5A4 02               (        forth.asm):03147         SHARPS  fcb     2
F5A5 2353             (        forth.asm):03148                 fcc     '#S'
F5A7 F594             (        forth.asm):03149                 fdb     HOLD
F5A9 C7               (        forth.asm):03150                 RFCS
F5AA 8601             (        forth.asm):03151 (2)             lda     #1
F5AC 9736             (        forth.asm):03152 (3)             sta     CVTFCN          CVT function #1 is #S
F5AE 2007             (        forth.asm):03153 (3)             bra     CVT0
                      (        forth.asm):03154         
                      (        forth.asm):03155         * Unsigned double on the top of the data stack gets divided by BASE.
                      (        forth.asm):03156         * The division algorithm implemented here is the binary long division.
                      (        forth.asm):03157         * See https://en.wikipedia.org/wiki/Division_algorithm for more information.
                      (        forth.asm):03158         * Remainder (converted to a character) gets prepended to PAD.
F5B0 01               (        forth.asm):03159         CVT     fcb     1
F5B1 23               (        forth.asm):03160                 fcc     '#'
F5B2 F5A4             (        forth.asm):03161                 fdb     SHARPS
F5B4 C7               (        forth.asm):03162                 RFCS
F5B5 0F36             (        forth.asm):03163 (5)             clr     CVTFCN          CVT function 0 is #
F5B7 BDE801           (        forth.asm):03164 (7)     CVT0    jsr     NPOP
F5BA 1F16             (        forth.asm):03165 (4)             tfr     x,w
F5BC BDE801           (        forth.asm):03166 (7)             jsr     NPOP
F5BF 3410             (        forth.asm):03167 (4+2)   CVT1    pshs    x               Numerator least significant cell
F5C1 1038             (        forth.asm):03168 (6)             pshsw                   Numerator most significant cell
F5C3 104F             (        forth.asm):03169 (2)             clrd
F5C5 3406             (        forth.asm):03170 (4+2)           pshs    d               Quotient low
F5C7 3406             (        forth.asm):03171 (4+2)           pshs    d               Quotient high
F5C9 3406             (        forth.asm):03172 (4+2)           pshs    d               Bitmask low
F5CB 10868000         (        forth.asm):03173 (4)             ldw     #$8000          Bitmask high
F5CF 1038             (        forth.asm):03174 (6)             pshsw
F5D1 3406             (        forth.asm):03175 (4+2)           pshs    d
                      (        forth.asm):03176         * Stack structure:
                      (        forth.asm):03177         * 1,s   remainder               8 bits (high order byte is zero and unused)
                      (        forth.asm):03178         * 2,s   Bitmask high            16 bits
                      (        forth.asm):03179         * 4,s   Bitmask low             16 bits
                      (        forth.asm):03180         * 6,s   Quotient high           16 bits
                      (        forth.asm):03181         * 8,s   Quotient low            16 bits
                      (        forth.asm):03182         * 10,s  Numerator high          16 bits
                      (        forth.asm):03183         * 12,s  Numerator low           16 bits
                      (        forth.asm):03184         * Denominator is at UBASE+1     8 bits
F5D3 11C61F           (        forth.asm):03185 (3)             ldf     #31             32 bits to go
F5D6 6861             (        forth.asm):03186 (6+1)   @cvt1   lsl     1,s             R := R << 1
                      (        forth.asm):03187         * We need to extract bit <f> from the numerator.
F5D8 306A             (        forth.asm):03188 (4+1)           leax    10,s            Numerator MSB address
F5DA 1FF8             (        forth.asm):03189 (4)             tfr     f,a             Not to alter the stack structure
F5DC 44               (        forth.asm):03190 (1)             lsra                    OffsetX: 3 - F >> 3
F5DD 44               (        forth.asm):03191 (1)             lsra
F5DE 44               (        forth.asm):03192 (1)             lsra
F5DF C603             (        forth.asm):03193 (2)             ldb     #3
F5E1 103289           (        forth.asm):03194 (4)             subr    a,b
F5E4 A685             (        forth.asm):03195 (4+1)           lda     b,x
F5E6 1FF9             (        forth.asm):03196 (4)             tfr     f,b             Bitno: F & 7
F5E8 C407             (        forth.asm):03197 (2)             andb    #7
                      (        forth.asm):03198         * At this point, A has the data we're interested in. B has the bit number.
F5EA 5D               (        forth.asm):03199 (1)     @cvtex  tstb
F5EB 2704             (        forth.asm):03200 (3)             beq     @cvtfnd         Bit 0 of A has the data
F5ED 44               (        forth.asm):03201 (1)             lsra
F5EE 5A               (        forth.asm):03202 (1)             decb
F5EF 20F9             (        forth.asm):03203 (3)             bra     @cvtex
F5F1 8401             (        forth.asm):03204 (2)     @cvtfnd anda    #1
F5F3 AA61             (        forth.asm):03205 (4+1)           ora     1,s             R(0) := N(i)
F5F5 A761             (        forth.asm):03206 (4+1)           sta     1,s             Update the remainder
F5F7 911F             (        forth.asm):03207 (3)             cmpa    UBASE+1
F5F9 2512             (        forth.asm):03208 (3)             blo     @cvt5
F5FB 901F             (        forth.asm):03209 (3)             suba    UBASE+1
F5FD A761             (        forth.asm):03210 (4+1)           sta     1,s             R := R - D
                      (        forth.asm):03211         * Q(i) := 1 (use the bitmask).
F5FF EC66             (        forth.asm):03212 (5+1)           ldd     6,s             Quotient high
F601 10AA62           (        forth.asm):03213 (6+1)           ord     2,s             Bitmask high
F604 ED66             (        forth.asm):03214 (5+1)           std     6,s
F606 EC68             (        forth.asm):03215 (5+1)           ldd     8,s             Quotient low
F608 10AA64           (        forth.asm):03216 (6+1)           ord     4,s             Bitmask low
F60B ED68             (        forth.asm):03217 (5+1)           std     8,s
                      (        forth.asm):03218         * Shift the bitmask 1 bit right.
F60D EC62             (        forth.asm):03219 (5+1)   @cvt5   ldd     2,s
F60F 1044             (        forth.asm):03220 (2)             lsrd
F611 ED62             (        forth.asm):03221 (5+1)           std     2,s
F613 EC64             (        forth.asm):03222 (5+1)           ldd     4,s
F615 1046             (        forth.asm):03223 (2)             rord
F617 ED64             (        forth.asm):03224 (5+1)           std     4,s
F619 115A             (        forth.asm):03225 (2)             decf
F61B 2CB9             (        forth.asm):03226 (3)             bge     @cvt1
                      (        forth.asm):03227         * Convert the remainder to a digit expressed in BASE.
F61D E661             (        forth.asm):03228 (4+1)           ldb     1,s
F61F 8630             (        forth.asm):03229 (2)             lda     #'0
F621 C10A             (        forth.asm):03230 (2)             cmpb    #10             B has the digit we want converted to BASE
F623 2502             (        forth.asm):03231 (3)             bcs     @cvtdgt
F625 8637             (        forth.asm):03232 (2)             lda     #'A-10
F627 103089           (        forth.asm):03233 (4)     @cvtdgt addr    a,b
F62A 8D20             (        forth.asm):03234 (6)             bsr     INSBPAD         Prepend B to the string currently in PAD
F62C 0D36             (        forth.asm):03235 (4)             tst     CVTFCN
F62E 2711             (        forth.asm):03236 (3)             beq     @cvtend         Function 0 is straight #, i.e. we're done here
                      (        forth.asm):03237         * Function 1 is #S, we iterate unless the quotient is 0.
F630 EC68             (        forth.asm):03238 (5+1)           ldd     8,s
F632 10AA66           (        forth.asm):03239 (6+1)           ord     6,s
F635 270A             (        forth.asm):03240 (3)             beq     @cvtend
F637 AE68             (        forth.asm):03241 (5+1)           ldx     8,s             New numerator low
F639 10A666           (        forth.asm):03242 (6+1)           ldw     6,s             New numerator high
F63C 326E             (        forth.asm):03243 (4+1)           leas    14,s            Discard the stack frame
F63E 7EF5BF           (        forth.asm):03244 (3)             jmp     CVT1            And go at it again
                      (        forth.asm):03245         * Push back the quotient on the data stack (low then high cell).
F641 AE68             (        forth.asm):03246 (5+1)   @cvtend ldx     8,s
F643 3610             (        forth.asm):03247                 UCNPUSH
F645 AE66             (        forth.asm):03248 (5+1)           ldx     6,s
F647 326E             (        forth.asm):03249 (4+1)           leas    14,s            Discard the stack frame
F649 3610             (        forth.asm):03250                 UCNPUSH
F64B 39               (        forth.asm):03251 (4)             rts
                      (        forth.asm):03252         
                      (        forth.asm):03253         * Insert the character in B in front of the string at PADBUF.
F64C 8E0186           (        forth.asm):03254 (3)     INSBPAD ldx     #PADBUF
F64F BDE246           (        forth.asm):03255 (7)             jsr     SLEN
F652 103061           (        forth.asm):03256 (4)             addr    w,x             X points to the PAD string's NUL terminator
F655 105C             (        forth.asm):03257 (2)             incw                    Include the terminator
F657 3101             (        forth.asm):03258 (4+1)           leay    1,x
F659 113912           (        forth.asm):03259 (6+?)           tfm     x-,y-
F65C D786             (        forth.asm):03260 (3)             stb     PADBUF
F65E 39               (        forth.asm):03261 (4)             rts
                      (        forth.asm):03262         
F65F 02               (        forth.asm):03263         CVTB    fcb     2
F660 3C23             (        forth.asm):03264                 fcc     '<#'
F662 F5B0             (        forth.asm):03265                 fdb     CVT
F664 C7               (        forth.asm):03266                 RFCS
F665 BDE3E1           (        forth.asm):03267 (7)             jsr     CKBASE          Sanity check. BASE can be altered at any time
F668 0F86             (        forth.asm):03268 (5)             clr     PADBUF
F66A 39               (        forth.asm):03269 (4)             rts
                      (        forth.asm):03270         
F66B 01               (        forth.asm):03271         DOT     fcb     1               79-STANDARD (REQ193)
F66C 2E               (        forth.asm):03272                 fcc     '.'
F66D F65F             (        forth.asm):03273                 fdb     CVTB
F66F C7               (        forth.asm):03274                 RFCS
F670 8601             (        forth.asm):03275 (2)             lda     #1
F672 9739             (        forth.asm):03276 (3)             sta     CVISSGN         Force a signed number conversion
F674 BDE801           (        forth.asm):03277 (7)     PTOP0   jsr     NPOP
F677 BDE449           (        forth.asm):03278 (7)             jsr     CVNSTR
F67A 8E03EC           (        forth.asm):03279 (3)             ldx     #TBUFF
F67D 8620             (        forth.asm):03280 (2)             lda     #SP
F67F A180             (        forth.asm):03281 (4+1)   @ptop1  cmpa    ,x+             Skip leading spaces
F681 27FC             (        forth.asm):03282 (3)             beq     @ptop1
F683 301F             (        forth.asm):03283 (4+1)           leax    -1,x            Point to actual string start address
F685 BDE2FB           (        forth.asm):03284 (7)             jsr     PUTS
F688 7EE2E8           (        forth.asm):03285 (3)             jmp     PUTCH           Extra space after printing a number
                      (        forth.asm):03286         
F68B 02               (        forth.asm):03287         UDOT    fcb     2               79-STANDARD (REQ106)
F68C 552E             (        forth.asm):03288                 fcc     'U.'
F68E F66B             (        forth.asm):03289                 fdb     DOT
F690 C7               (        forth.asm):03290                 RFCS
F691 0F39             (        forth.asm):03291 (5)             clr     CVISSGN         Conversion is unsigned
F693 20DF             (        forth.asm):03292 (3)             bra     PTOP0
                      (        forth.asm):03293         
F695 02               (        forth.asm):03294         DOTR    fcb     2               79-STANDARD (REF)
F696 2E52             (        forth.asm):03295                 fcc     '.R'
F698 F68B             (        forth.asm):03296                 fdb     UDOT
F69A C7               (        forth.asm):03297                 RFCS
F69B 8601             (        forth.asm):03298 (2)             lda     #1
F69D 9739             (        forth.asm):03299 (3)             sta     CVISSGN
F69F BDE801           (        forth.asm):03300 (7)     DOTR0   jsr     NPOP
F6A2 3410             (        forth.asm):03301 (4+2)           pshs    x               Length parameter value
F6A4 BDE801           (        forth.asm):03302 (7)             jsr     NPOP
F6A7 BDE449           (        forth.asm):03303 (7)             jsr     CVNSTR
F6AA 8E03EC           (        forth.asm):03304 (3)             ldx     #TBUFF
F6AD 8620             (        forth.asm):03305 (2)             lda     #SP
F6AF A180             (        forth.asm):03306 (4+1)   @dotr1  cmpa    ,x+
F6B1 27FC             (        forth.asm):03307 (3)             beq     @dotr1          Skip leading spaces
F6B3 301F             (        forth.asm):03308 (4+1)           leax    -1,x
F6B5 BDE246           (        forth.asm):03309 (7)             jsr     SLEN            String length is returned in W
F6B8 3506             (        forth.asm):03310 (4+2)           puls    d
F6BA 1E06             (        forth.asm):03311 (5)             exg     d,w
F6BC 103206           (        forth.asm):03312 (4)             subr    d,w
F6BF 2F0D             (        forth.asm):03313 (3)             ble     @dotr3
F6C1 8620             (        forth.asm):03314 (2)             lda     #SP
F6C3 105D             (        forth.asm):03315 (2)     @dotr2  tstw
F6C5 2707             (        forth.asm):03316 (3)             beq     @dotr3
F6C7 BDE2E8           (        forth.asm):03317 (7)             jsr     PUTCH
F6CA 105A             (        forth.asm):03318 (2)             decw
F6CC 20F5             (        forth.asm):03319 (3)             bra     @dotr2
F6CE 7EE2FB           (        forth.asm):03320 (3)     @dotr3  jmp     PUTS
                      (        forth.asm):03321         
F6D1 03               (        forth.asm):03322         UDOTR   fcb     3               79-STANDARD (REF216)
F6D2 552E52           (        forth.asm):03323                 fcc     'U.R'
F6D5 F695             (        forth.asm):03324                 fdb     DOTR
F6D7 C7               (        forth.asm):03325                 RFCS
F6D8 0F39             (        forth.asm):03326 (5)             clr     CVISSGN
F6DA 20C3             (        forth.asm):03327 (3)             bra     DOTR0
                      (        forth.asm):03328         
F6DC 02               (        forth.asm):03329         BL      fcb     2               79-STANDARD (REF176)
F6DD 424C             (        forth.asm):03330                 fcc     'BL'
F6DF F6D1             (        forth.asm):03331                 fdb     UDOTR
F6E1 C7               (        forth.asm):03332                 RFCS
F6E2 8E0020           (        forth.asm):03333 (3)             ldx     #SP
F6E5 7EE7F3           (        forth.asm):03334 (3)             jmp     NPUSH
                      (        forth.asm):03335         
F6E8 05               (        forth.asm):03336         SPACE   fcb     5               79-STANDARD (REQ232)
F6E9 5350414345       (        forth.asm):03337                 fcc     'SPACE'
F6EE F6DC             (        forth.asm):03338                 fdb     BL
F6F0 C7               (        forth.asm):03339                 RFCS
F6F1 8620             (        forth.asm):03340 (2)             lda     #SP
F6F3 7EE2E8           (        forth.asm):03341 (3)             jmp     PUTCH
                      (        forth.asm):03342         
F6F6 06               (        forth.asm):03343         SPACES  fcb     6               79-STANDARD (REQ231)
F6F7 535041434553     (        forth.asm):03344                 fcc     'SPACES'
F6FD F6E8             (        forth.asm):03345                 fdb     SPACE
F6FF C7               (        forth.asm):03346                 RFCS
F700 BDE801           (        forth.asm):03347 (7)             jsr     NPOP
F703 1F16             (        forth.asm):03348 (4)             tfr     x,w
F705 105D             (        forth.asm):03349 (2)             tstw
F707 2709             (        forth.asm):03350 (3)             beq     @spcs2
F709 8620             (        forth.asm):03351 (2)             lda     #SP
F70B BDE2E8           (        forth.asm):03352 (7)     @spcs1  jsr     PUTCH
F70E 105A             (        forth.asm):03353 (2)             decw
F710 26F9             (        forth.asm):03354 (3)             bne     @spcs1
F712 39               (        forth.asm):03355 (4)     @spcs2  rts
                      (        forth.asm):03356         
F713 04               (        forth.asm):03357         PAGE    fcb     4               79-STANDARD (REF)
F714 50414745         (        forth.asm):03358                 fcc     'PAGE'
F718 F6F6             (        forth.asm):03359                 fdb     SPACES
F71A C7               (        forth.asm):03360                 RFCS
F71B 8EFE1F           (        forth.asm):03361 (3)             ldx     #CSVT100
F71E 7EE2FB           (        forth.asm):03362 (3)             jmp     PUTS
                      (        forth.asm):03363         
F721 02               (        forth.asm):03364         CRLF    fcb     2               79-STANDARD (REQ160)
F722 4352             (        forth.asm):03365                 fcc     'CR'
F724 F713             (        forth.asm):03366                 fdb     PAGE
F726 C7               (        forth.asm):03367                 RFCS
F727 7EE308           (        forth.asm):03368 (3)             jmp     PUTCR
                      (        forth.asm):03369         
F72A 03               (        forth.asm):03370         PAD     fcb     3               79-STANDARD (REQ226)
F72B 504144           (        forth.asm):03371                 fcc     'PAD'
F72E F721             (        forth.asm):03372                 fdb     CRLF
F730 C7               (        forth.asm):03373                 RFCS
F731 8E0186           (        forth.asm):03374 (3)             ldx     #PADBUF
F734 7EE7F3           (        forth.asm):03375 (3)             jmp     NPUSH
                      (        forth.asm):03376         
F737 04               (        forth.asm):03377         TYPE    fcb     4               79-STANDARD (REQ222)
F738 54595045         (        forth.asm):03378                 fcc     'TYPE'          ( addr bcount -- )
F73C F72A             (        forth.asm):03379                 fdb     PAD
F73E C7               (        forth.asm):03380                 RFCS
F73F BDE801           (        forth.asm):03381 (7)             jsr     NPOP            Character count (signed)
F742 1F16             (        forth.asm):03382 (4)             tfr     x,w
F744 BDE801           (        forth.asm):03383 (7)             jsr     NPOP            Buffer address
F747 105D             (        forth.asm):03384 (2)             tstw                    
F749 2E01             (        forth.asm):03385 (3)     @type0  bgt     @type1
F74B 39               (        forth.asm):03386 (4)             rts
F74C A680             (        forth.asm):03387 (4+1)   @type1  lda     ,x+
F74E BDE2E8           (        forth.asm):03388 (7)             jsr     PUTCH
F751 105A             (        forth.asm):03389 (2)             decw
F753 20F4             (        forth.asm):03390 (3)             bra     @type0
                      (        forth.asm):03391         
F755 05               (        forth.asm):03392         COUNT   fcb     5               79-STANDARD (REQ159)
F756 434F554E54       (        forth.asm):03393                 fcc     'COUNT'
F75B F737             (        forth.asm):03394                 fdb     TYPE
F75D C7               (        forth.asm):03395                 RFCS
F75E BDE801           (        forth.asm):03396 (7)             jsr     NPOP
F761 E680             (        forth.asm):03397 (4+1)           ldb     ,x+
F763 3610             (        forth.asm):03398                 UCNPUSH                 B is preserved
F765 4F               (        forth.asm):03399 (1)             clra
F766 1F01             (        forth.asm):03400 (4)             tfr     d,x
F768 7EE7F3           (        forth.asm):03401 (3)             jmp     NPUSH
                      (        forth.asm):03402         
F76B 09               (        forth.asm):03403         DASHTR  fcb     9               79-STANDARD (REQ148)
F76C 2D545241494C494E (        forth.asm):03404                 fcc     '-TRAILING'     ( addr n1 -- addr n2 )
     47
F775 F755             (        forth.asm):03405                 fdb     COUNT
F777 C7               (        forth.asm):03406                 RFCS
F778 BDE801           (        forth.asm):03407 (7)             jsr     NPOP            N1 to X
F77B 1F10             (        forth.asm):03408 (4)             tfr     x,d             N1 to D
F77D BDE801           (        forth.asm):03409 (7)             jsr     NPOP            ADDR to X
F780 1F12             (        forth.asm):03410 (4)             tfr     x,y             Backup to I
F782 104D             (        forth.asm):03411 (2)             tstd                    Input character count (N1)
F784 2D1B             (        forth.asm):03412 (3)             blt     @invpar         Cannot be < 0
F786 308B             (        forth.asm):03413 (4+2)           leax    d,x             X has ADDR+N1
F788 1F06             (        forth.asm):03414 (4)             tfr     d,w             W has N1
F78A 105D             (        forth.asm):03415 (2)     @cknxtb tstw
F78C 270A             (        forth.asm):03416 (3)             beq     @ckdone
F78E A682             (        forth.asm):03417 (4+1)           lda     ,-x
F790 105A             (        forth.asm):03418 (2)             decw
F792 8120             (        forth.asm):03419 (2)             cmpa    #SP
F794 27F4             (        forth.asm):03420 (3)             beq     @cknxtb         Iterate over to the previous byte
F796 105C             (        forth.asm):03421 (2)             incw
F798 1F21             (        forth.asm):03422 (4)     @ckdone tfr     y,x
F79A 3610             (        forth.asm):03423                 UCNPUSH                 String base address
F79C 1F61             (        forth.asm):03424 (4)             tfr     w,x
F79E 3610             (        forth.asm):03425                 UCNPUSH                 Updated character count
F7A0 39               (        forth.asm):03426 (4)             rts
F7A1 C60D             (        forth.asm):03427 (2)     @invpar ldb     #13             Invalid parameter
F7A3 BDE772           (        forth.asm):03428 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):03429         
F7A6 06               (        forth.asm):03430         EXPECT  fcb     6               79-STANDARD (REQ189)
F7A7 455850454354     (        forth.asm):03431                 fcc     'EXPECT'        ( addr count -- )
F7AD F76B             (        forth.asm):03432                 fdb     DASHTR
F7AF C7               (        forth.asm):03433                 RFCS
F7B0 BDE801           (        forth.asm):03434 (7)     EXPCT1  jsr     NPOP
F7B3 1F10             (        forth.asm):03435 (4)             tfr     x,d             Buffer length to B
F7B5 BDE801           (        forth.asm):03436 (7)             jsr     NPOP            Buffer address to X. B is preserved
F7B8 5D               (        forth.asm):03437 (1)             tstb
F7B9 2701             (        forth.asm):03438 (3)             beq     @expct1
F7BB 5C               (        forth.asm):03439 (1)             incb                    Account for the NUL terminator
F7BC 7EE31E           (        forth.asm):03440 (3)     @expct1 jmp     GETS
                      (        forth.asm):03441         
F7BF 06               (        forth.asm):03442         ACCEPT  fcb     6               ANSI (Core)
F7C0 414343455054     (        forth.asm):03443                 fcc     'ACCEPT'
F7C6 F7A6             (        forth.asm):03444                 fdb     EXPECT
F7C8 C7               (        forth.asm):03445                 RFCS
F7C9 8DE5             (        forth.asm):03446 (6)             bsr     EXPCT1
F7CB 4F               (        forth.asm):03447 (1)             clra
F7CC 3606             (        forth.asm):03448 (4+2)           pshu    d               This saves us "tfr d,x" and "UCNPUSH"
F7CE 39               (        forth.asm):03449 (4)             rts
                      (        forth.asm):03450         
F7CF 49               (        forth.asm):03451         TERPRET fcb     $49             79-STANDARD (REF) I make this compile time only
F7D0 494E544552505245 (        forth.asm):03452                 fcc     'INTERPRET'     ( -- )
     54
F7D9 F7BF             (        forth.asm):03453                 fdb     ACCEPT
F7DB C7               (        forth.asm):03454                 RFCS
                      (        forth.asm):03455         * Obtain a base buffer address based on the value of BLK.
F7DC DC24             (        forth.asm):03456 (4)             ldd     UBLK
F7DE 2605             (        forth.asm):03457 (3)             bne     @notser
F7E0 8E0318           (        forth.asm):03458 (3)             ldx     #CMDBUF         Base buffer address for serial line input
F7E3 200A             (        forth.asm):03459 (3)             bra     @rsolvd
                      (        forth.asm):03460         * BLK is NZ, map the block in memory.
F7E5 1F01             (        forth.asm):03461 (4)     @notser tfr     d,x             Block number to X
F7E7 BDE7F3           (        forth.asm):03462 (7)             jsr     NPUSH
F7EA BDEA59           (        forth.asm):03463                 RFXT    jsr,BLOCK+8     XT for BLOCK. Map the block in
F7ED 3710             (        forth.asm):03464                 UCNPOP                  Retrieve buffer address (to X)
                      (        forth.asm):03465         * Note: >IN is supposed to have been set by the caller!
F7EF 9F1C             (        forth.asm):03466 (4)     @rsolvd stx     BSBFADR
F7F1 DC22             (        forth.asm):03467 (4)             ldd     UTOIN
F7F3 103001           (        forth.asm):03468 (4)             addr    d,x
F7F6 7EE0CA           (        forth.asm):03469 (3)             jmp     _INTERP         Finally invoke _INTERP.
                      (        forth.asm):03470         
F7F9 04               (        forth.asm):03471         LOAD    fcb     4               79-STANDARD (REQ202)
F7FA 4C4F4144         (        forth.asm):03472                 fcc     'LOAD'          ( blk -- )
F7FE F7CF             (        forth.asm):03473                 fdb     TERPRET
F800 C7               (        forth.asm):03474                 RFCS
F801 BDE801           (        forth.asm):03475 (7)             jsr     NPOP
F804 1037C1           (        forth.asm):03476 (4)             cmpr    0,x
F807 2601             (        forth.asm):03477 (3)             bne     LOAD1
F809 39               (        forth.asm):03478 (4)             rts                     Block 0 is _not_ loadable
F80A 3410             (        forth.asm):03479 (4+2)   LOAD1   pshs    x
F80C 9E24             (        forth.asm):03480 (4)             ldx     UBLK
F80E BDE810           (        forth.asm):03481 (7)             jsr     RPUSH           Push BLK on the return stack
F811 9E22             (        forth.asm):03482 (4)             ldx     UTOIN
F813 BDE810           (        forth.asm):03483 (7)             jsr     RPUSH           Push >IN on the return stack
F816 3510             (        forth.asm):03484 (4+2)           puls    x
F818 9F24             (        forth.asm):03485 (4)             stx     UBLK            Update BLK with the LOAD argument
F81A 104F             (        forth.asm):03486 (2)             clrd
F81C DD22             (        forth.asm):03487 (4)             std     UTOIN           Clear >IN
                      (        forth.asm):03488         * Map the new BLK in, interpret code from there.
F81E 8DBC             (        forth.asm):03489                 RFXT    bsr,TERPRET+12  XT for INTERPRET
F820 BDE82E           (        forth.asm):03490 (7)             jsr     RPOP
F823 9F22             (        forth.asm):03491 (4)             stx     UTOIN           Restore >IN from the return stack
F825 BDE82E           (        forth.asm):03492 (7)             jsr     RPOP
F828 9F24             (        forth.asm):03493 (4)             stx     UBLK            Restore BLK from the return stack
F82A 7EE847           (        forth.asm):03494 (3)             jmp     BKIN2PT         Map BLK in (if needed) and update BSBFADR
                      (        forth.asm):03495         
F82D 04               (        forth.asm):03496         THRU    fcb     4               79-STANDARD (REF)
F82E 54485255         (        forth.asm):03497                 fcc     'THRU'          ( lowblk highblk -- )
F832 F7F9             (        forth.asm):03498                 fdb     LOAD
F834 C7               (        forth.asm):03499                 RFCS
F835 BDE801           (        forth.asm):03500 (7)             jsr     NPOP
F838 1F12             (        forth.asm):03501 (4)             tfr     x,y             Y has highblk
F83A BDE801           (        forth.asm):03502 (7)             jsr     NPOP            X has lowblk--both are unsigned numbers
F83D 103712           (        forth.asm):03503 (4)     @thrlop cmpr    x,y
F840 2401             (        forth.asm):03504 (3)             bhs     @cont           Limit is >= to the loop index
F842 39               (        forth.asm):03505 (4)             rts
F843 3430             (        forth.asm):03506 (4+4)   @cont   pshs    x,y             Backup loop parameters
F845 3610             (        forth.asm):03507                 UCNPUSH                 Current block number to the data stack
F847 8DB8             (        forth.asm):03508                 RFXT    bsr,LOAD+7      XT for LOAD
F849 3530             (        forth.asm):03509 (4+4)           puls    y,x             Retrieve loop parameters
F84B 3001             (        forth.asm):03510 (4+1)           leax    1,x             Iterate over to the next screen
F84D 20EE             (        forth.asm):03511 (3)             bra     @thrlop
                      (        forth.asm):03512         
F84F 83               (        forth.asm):03513         NXTBLK  fcb     $83             79-STANDARD (REF131)
F850 2D2D3E           (        forth.asm):03514                 fcc     '-->'           ( -- )
F853 F82D             (        forth.asm):03515                 fdb     THRU
F855 C7               (        forth.asm):03516                 RFCS
F856 9E24             (        forth.asm):03517 (4)             ldx     UBLK
F858 3001             (        forth.asm):03518 (4+1)           leax    1,x
F85A DC24             (        forth.asm):03519 (4)     NXTBLK1 ldd     UBLK
F85C 2603             (        forth.asm):03520 (3)             bne     @nfrmb0         Not invoked from block 0 (the console)
                      (        forth.asm):03521         * --> or CONTINUED are being invoked from the console. Flag that condition
                      (        forth.asm):03522         * as a hint to the interpreter so that feedback is provided even if we are
                      (        forth.asm):03523         * back from a block.
F85E 4C               (        forth.asm):03524 (1)             inca                    1 to A
F85F 973D             (        forth.asm):03525 (3)             sta     NBCTFB0
F861 9F24             (        forth.asm):03526 (4)     @nfrmb0 stx     UBLK            Update BLK
F863 104F             (        forth.asm):03527 (2)             clrd
F865 DD22             (        forth.asm):03528 (4)             std     UTOIN           0 >IN !
                      (        forth.asm):03529         * Map the new BLK in, interpret code from there.
F867 7EF7DC           (        forth.asm):03530                 RFXT    jmp,TERPRET+12  XT for INTERPRET
                      (        forth.asm):03531         
F86A 89               (        forth.asm):03532         CONTIND fcb     $89             79-STANDARD (REF)
F86B 434F4E54494E5545 (        forth.asm):03533                 fcc     'CONTINUED'     ( nextblk -- )
     44
F874 F84F             (        forth.asm):03534                 fdb     NXTBLK
F876 C7               (        forth.asm):03535                 RFCS
F877 BDE801           (        forth.asm):03536 (7)             jsr     NPOP            NEXTBLK to X
F87A 1037C1           (        forth.asm):03537 (4)             cmpr    0,x             Cannot interpret from block 0!
F87D 26DB             (        forth.asm):03538 (3)             bne     NXTBLK1
F87F C60D             (        forth.asm):03539 (2)             ldb     #13             Illegal argument
F881 BDE772           (        forth.asm):03540 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):03541         
F884 02               (        forth.asm):03542         MILLIS  fcb     2               79-STANDARD (REF)
F885 4D53             (        forth.asm):03543                 fcc     'MS'            ( mscount -- )
F887 F86A             (        forth.asm):03544                 fdb     CONTIND
F889 C7               (        forth.asm):03545                 RFCS
F88A BDE801           (        forth.asm):03546 (7)             jsr     NPOP
F88D 1037C1           (        forth.asm):03547 (4)             cmpr    0,x
F890 2601             (        forth.asm):03548 (3)             bne     MILLIS1
F892 39               (        forth.asm):03549 (4)             rts
F893 CC031A           (        forth.asm):03550 (3)     MILLIS1 ldd     #MSLCNT
F896 104A             (        forth.asm):03551 (2)     @ms2    decd
F898 26FC             (        forth.asm):03552 (3)             bne     @ms2
F89A 301F             (        forth.asm):03553 (4+1)           leax    -1,x
F89C 26F5             (        forth.asm):03554 (3)             bne     MILLIS1
F89E 39               (        forth.asm):03555 (4)             rts
                      (        forth.asm):03556         
F89F 04               (        forth.asm):03557         KEYP    fcb     4               ANSI (Facility)
F8A0 4B45593F         (        forth.asm):03558                 fcc     'KEY?'          ( -- flag )
F8A4 F884             (        forth.asm):03559                 fdb     MILLIS
F8A6 C7               (        forth.asm):03560                 RFCS
F8A7 1FC1             (        forth.asm):03561 (4)             tfr     0,x
F8A9 0D44             (        forth.asm):03562 (4)             tst     SERBCNT
F8AB 2702             (        forth.asm):03563 (3)             beq     @done
F8AD 3001             (        forth.asm):03564 (4+1)           leax    1,x             Return the 79-STANDARD true flag
F8AF 7EE7F3           (        forth.asm):03565 (3)     @done   jmp     NPUSH
                      (        forth.asm):03566         
F8B2 03               (        forth.asm):03567         KEY     fcb     3               79-STANDARD (REQ100)
F8B3 4B4559           (        forth.asm):03568                 fcc     'KEY'
F8B6 F89F             (        forth.asm):03569                 fdb     KEYP
F8B8 C7               (        forth.asm):03570                 RFCS
F8B9 BDE2BC           (        forth.asm):03571 (7)             jsr     GETCH
F8BC 1F89             (        forth.asm):03572 (4)             tfr     a,b
F8BE 4F               (        forth.asm):03573 (1)             clra
F8BF 1F01             (        forth.asm):03574 (4)             tfr     d,x
F8C1 7EE7F3           (        forth.asm):03575 (3)             jmp     NPUSH
                      (        forth.asm):03576         
F8C4 04               (        forth.asm):03577         EMIT    fcb     4               79-STANDARD (REQ207)
F8C5 454D4954         (        forth.asm):03578                 fcc     'EMIT'
F8C9 F8B2             (        forth.asm):03579                 fdb     KEY
F8CB C7               (        forth.asm):03580                 RFCS
F8CC BDE801           (        forth.asm):03581 (7)             jsr     NPOP
F8CF 1F10             (        forth.asm):03582 (4)             tfr     x,d
F8D1 1F98             (        forth.asm):03583 (4)             tfr     b,a
F8D3 7EE2E8           (        forth.asm):03584 (3)             jmp     PUTCH
                      (        forth.asm):03585         
F8D6 01               (        forth.asm):03586         PLUS    fcb     1               79-STANDARD (REQ121)
F8D7 2B               (        forth.asm):03587                 fcc     '+'             ( n1 n2 -- sum )
F8D8 F8C4             (        forth.asm):03588                 fdb     EMIT
F8DA C7               (        forth.asm):03589                 RFCS
F8DB BDE4A2           (        forth.asm):03590 (7)             jsr     MIN2PST         We need at least two cells stacked up
F8DE EC42             (        forth.asm):03591 (5+1)           ldd     2,u             N1
F8E0 E3C4             (        forth.asm):03592 (5+0)           addd    ,u              N2
F8E2 ED42             (        forth.asm):03593 (5+1)           std     2,u             SUM
F8E4 3342             (        forth.asm):03594 (4+1)           leau    2,u             Drop the top cell
F8E6 39               (        forth.asm):03595 (4)             rts
                      (        forth.asm):03596         
F8E7 02               (        forth.asm):03597         ONEP    fcb     2               79-STANDARD (REQ107)
F8E8 312B             (        forth.asm):03598                 fcc     '1+'
F8EA F8D6             (        forth.asm):03599                 fdb     PLUS
F8EC C7               (        forth.asm):03600                 RFCS
F8ED BDE49D           (        forth.asm):03601 (7)             jsr     MIN1PST         We need at least one cell stacked up
F8F0 ECC4             (        forth.asm):03602 (5+0)           ldd     ,u
F8F2 104C             (        forth.asm):03603 (2)             incd
F8F4 EDC4             (        forth.asm):03604 (5+0)           std     ,u
F8F6 39               (        forth.asm):03605 (4)             rts
                      (        forth.asm):03606         
F8F7 02               (        forth.asm):03607         TWOP    fcb     2               79-STANDARD (REQ135)
F8F8 322B             (        forth.asm):03608                 fcc     '2+'            ( n -- n+2 )
F8FA F8E7             (        forth.asm):03609                 fdb     ONEP
F8FC C7               (        forth.asm):03610                 RFCS
F8FD BDE49D           (        forth.asm):03611 (7)             jsr     MIN1PST         We need at least one cell stacked up
F900 ECC4             (        forth.asm):03612 (5+0)           ldd     ,u
F902 C30002           (        forth.asm):03613 (3)             addd    #2
F905 EDC4             (        forth.asm):03614 (5+0)           std     ,u
F907 39               (        forth.asm):03615 (4)             rts
                      (        forth.asm):03616         
F908 01               (        forth.asm):03617         MINUS   fcb     1               79-STANDARD (REQ134)
F909 2D               (        forth.asm):03618                 fcc     '-'             ( n1 n2 -- dif )
F90A F8F7             (        forth.asm):03619                 fdb     TWOP
F90C C7               (        forth.asm):03620                 RFCS
F90D BDE4A2           (        forth.asm):03621 (7)             jsr     MIN2PST         We need at least two cells stacked up
F910 EC42             (        forth.asm):03622 (5+1)           ldd     2,u             N1
F912 A3C4             (        forth.asm):03623 (5+0)           subd    ,u              N2
F914 ED42             (        forth.asm):03624 (5+1)           std     2,u             DIF
F916 3342             (        forth.asm):03625 (4+1)           leau    2,u             Drop the top cell
F918 39               (        forth.asm):03626 (4)             rts
                      (        forth.asm):03627         
F919 02               (        forth.asm):03628         ONEM    fcb     2               79-STANDARD (REQ105)
F91A 312D             (        forth.asm):03629                 fcc     '1-'
F91C F908             (        forth.asm):03630                 fdb     MINUS
F91E C7               (        forth.asm):03631                 RFCS
F91F BDE49D           (        forth.asm):03632 (7)             jsr     MIN1PST         We need at least one cell stacked up
F922 ECC4             (        forth.asm):03633 (5+0)           ldd     ,u
F924 104A             (        forth.asm):03634 (2)             decd
F926 EDC4             (        forth.asm):03635 (5+0)           std     ,u
F928 39               (        forth.asm):03636 (4)             rts
                      (        forth.asm):03637         
F929 02               (        forth.asm):03638         TWOM    fcb     2               79-STANDARD (REQ129)
F92A 322D             (        forth.asm):03639                 fcc     '2-'
F92C F919             (        forth.asm):03640                 fdb     ONEM
F92E C7               (        forth.asm):03641                 RFCS
F92F BDE49D           (        forth.asm):03642 (7)             jsr     MIN1PST         We need at least one cell stacked up
F932 ECC4             (        forth.asm):03643 (5+0)           ldd     ,u
F934 830002           (        forth.asm):03644 (3)             subd    #2
F937 EDC4             (        forth.asm):03645 (5+0)           std     ,u
F939 39               (        forth.asm):03646 (4)             rts
                      (        forth.asm):03647         
F93A 01               (        forth.asm):03648         ZEROL   fcb     1               Non-standard
F93B 30               (        forth.asm):03649                 fcc     '0'
F93C F929             (        forth.asm):03650                 fdb     TWOM
F93E C7               (        forth.asm):03651                 RFCS
F93F 1FC1             (        forth.asm):03652 (4)             tfr     0,x
F941 7EE7F3           (        forth.asm):03653 (3)             jmp     NPUSH
                      (        forth.asm):03654         
F944 01               (        forth.asm):03655         ONEL    fcb     1               Non-standard
F945 31               (        forth.asm):03656                 fcc     '1'
F946 F93A             (        forth.asm):03657                 fdb     ZEROL
F948 C7               (        forth.asm):03658                 RFCS
F949 8E0001           (        forth.asm):03659 (3)             ldx     #1
F94C 7EE7F3           (        forth.asm):03660 (3)             jmp     NPUSH
                      (        forth.asm):03661         
F94F 01               (        forth.asm):03662         TWOL    fcb     1               Non-standard
F950 32               (        forth.asm):03663                 fcc     '2'
F951 F944             (        forth.asm):03664                 fdb     ONEL
F953 C7               (        forth.asm):03665                 RFCS
F954 8E0002           (        forth.asm):03666 (3)             ldx     #2
F957 7EE7F3           (        forth.asm):03667 (3)             jmp     NPUSH
                      (        forth.asm):03668         
F95A 05               (        forth.asm):03669         SHIFT   fcb     5               79-STANDARD (Ref)
F95B 5348494654       (        forth.asm):03670                 fcc     'SHIFT'
F960 F94F             (        forth.asm):03671                 fdb     TWOL
F962 C7               (        forth.asm):03672                 RFCS
F963 BDE4A2           (        forth.asm):03673 (7)             jsr     MIN2PST         Two cells need to be stacked up
F966 10A6C4           (        forth.asm):03674 (6+0)           ldw     ,u              Shift bitcount
F969 EC42             (        forth.asm):03675 (5+1)           ldd     2,u             The data itself
F96B 105D             (        forth.asm):03676 (2)     @shftlp tstw
F96D 270E             (        forth.asm):03677 (3)             beq     @shfdon
F96F 2D06             (        forth.asm):03678 (3)             blt     @shftrg
F971 1048             (        forth.asm):03679 (2)             lsld                    Shift left (W is positive)
F973 105A             (        forth.asm):03680 (2)             decw
F975 20F4             (        forth.asm):03681 (3)             bra     @shftlp
F977 1044             (        forth.asm):03682 (2)     @shftrg lsrd                    Shift right (W is negative)
F979 105C             (        forth.asm):03683 (2)             incw
F97B 20EE             (        forth.asm):03684 (3)             bra     @shftlp
F97D ED42             (        forth.asm):03685 (5+1)   @shfdon std     2,u             Return value stored there
F97F 3342             (        forth.asm):03686 (4+1)           leau    2,u             Drop one cell from the data stack
F981 39               (        forth.asm):03687 (4)             rts
                      (        forth.asm):03688         
                      (        forth.asm):03689         * Signed multiplication by hardware support.
F982 01               (        forth.asm):03690         MULT    fcb     1               79-STANDARD (REQ138)
F983 2A               (        forth.asm):03691                 fcc     '*'
F984 F95A             (        forth.asm):03692                 fdb     SHIFT
F986 C7               (        forth.asm):03693                 RFCS
F987 BDE4A2           (        forth.asm):03694 (7)             jsr     MIN2PST         Two cells need to be stacked up
F98A EC42             (        forth.asm):03695 (5+1)           ldd     2,u
F98C 11AFC4           (        forth.asm):03696 (30+0)          muld    ,u
F98F 10A742           (        forth.asm):03697 (6+1)           stw     2,u             Return only the lower 16 bits
F992 3342             (        forth.asm):03698 (4+1)           leau    2,u             Drop one cell from the data stack
F994 39               (        forth.asm):03699 (4)             rts
                      (        forth.asm):03700         
F995 02               (        forth.asm):03701         TWOTIM  fcb     2               79-STANDARD (REF)
F996 322A             (        forth.asm):03702                 fcc     '2*'
F998 F982             (        forth.asm):03703                 fdb     MULT
F99A C7               (        forth.asm):03704                 RFCS
F99B BDE49D           (        forth.asm):03705 (7)             jsr     MIN1PST         One cell needs to be stacked up
F99E ECC4             (        forth.asm):03706 (5+0)           ldd     ,u
F9A0 1048             (        forth.asm):03707 (2)             asld
F9A2 EDC4             (        forth.asm):03708 (5+0)           std     ,u
F9A4 39               (        forth.asm):03709 (4)             rts
                      (        forth.asm):03710         
F9A5 02               (        forth.asm):03711         TWODIV  fcb     2
F9A6 322F             (        forth.asm):03712                 fcc     '2/'
F9A8 F995             (        forth.asm):03713                 fdb     TWOTIM
F9AA C7               (        forth.asm):03714                 RFCS
F9AB BDE49D           (        forth.asm):03715 (7)             jsr     MIN1PST         One cell needs to be stacked up
F9AE ECC4             (        forth.asm):03716 (5+0)           ldd     ,u
F9B0 1047             (        forth.asm):03717 (2)             asrd
F9B2 EDC4             (        forth.asm):03718 (5+0)           std     ,u
F9B4 39               (        forth.asm):03719 (4)             rts
                      (        forth.asm):03720         
                      (        forth.asm):03721         * /, MOD and /MOD are essentially the same function returning
                      (        forth.asm):03722         * the different parts returned by DIVQ.
                      (        forth.asm):03723         * We use a global variable to distinguish which functionality
                      (        forth.asm):03724         * is being requested:
                      (        forth.asm):03725         * 0: return the modulo and the quotient (/MOD).
                      (        forth.asm):03726         * 1: return the modulo only (MOD).
                      (        forth.asm):03727         * 2: return the quotient only (/).
F9B5 01               (        forth.asm):03728         DIV     fcb     1               79-STANDARD (REQ178)
F9B6 2F               (        forth.asm):03729                 fcc     '/'             ( N1 N2 -- N3 [N4] )
F9B7 F9A5             (        forth.asm):03730                 fdb     TWODIV
F9B9 C7               (        forth.asm):03731                 RFCS
F9BA 8602             (        forth.asm):03732 (2)             lda     #2
F9BC 9733             (        forth.asm):03733 (3)             sta     DIVFCN          Function 2: return only the quotient
F9BE BDE4A2           (        forth.asm):03734 (7)     DIV1    jsr     MIN2PST         At least two cells need to be stacked up
F9C1 0F34             (        forth.asm):03735 (5)             clr     F83DIVF         Assume no adjustment required for floored div.
F9C3 A642             (        forth.asm):03736 (4+1)           lda     2,u             Numerator's MSB
F9C5 A8C4             (        forth.asm):03737 (4+0)           eora    ,u              Different sign from the denominator's MSB?
F9C7 2A02             (        forth.asm):03738 (3)             bpl     @divprc         No, proceed to the division code
F9C9 0C34             (        forth.asm):03739 (5)             inc     F83DIVF         Numerator and denominator have different signs
                      (        forth.asm):03740         * Division by zero conditions are dealt with through the trap handler.
F9CB 104F             (        forth.asm):03741 (2)     @divprc clrd                    Clear the numerator's MSC
F9CD 10A642           (        forth.asm):03742 (6+1)           ldw     2,u             Numerator's LSC
F9D0 2A02             (        forth.asm):03743 (3)             bpl     @dvnsex         Branch if no sign extention is needed
                      (        forth.asm):03744         * Sign extention from W to Q.
F9D2 1043             (        forth.asm):03745 (2)             comd                    -1 to D (numerator's MSC)
F9D4 11AEC4           (        forth.asm):03746 (36)    @dvnsex divq    ,u              ,u has the denominator
F9D7 8D19             (        forth.asm):03747 (6)             bsr     FDIVADJ         Perform floored division adjustment, if needed
F9D9 0D33             (        forth.asm):03748 (4)     @no83ad tst     DIVFCN
F9DB 2606             (        forth.asm):03749 (3)             bne     @div4
F9DD ED42             (        forth.asm):03750 (5+1)           std     2,u             Function 0: return the modulo and the quotient
F9DF 10A7C4           (        forth.asm):03751 (6+0)   @div3   stw     ,u              Function 2: return only the quotient
F9E2 39               (        forth.asm):03752 (4)             rts
F9E3 3342             (        forth.asm):03753 (4+1)   @div4   leau    2,u             Drop one cell from the data stack
F9E5 1F07             (        forth.asm):03754 (4)             tfr     d,v             Backup the modulo
F9E7 9633             (        forth.asm):03755 (3)             lda     DIVFCN
F9E9 8101             (        forth.asm):03756 (2)             cmpa    #1
F9EB 26F2             (        forth.asm):03757 (3)             bne     @div3
F9ED 1F70             (        forth.asm):03758 (4)             tfr     v,d             Restore the modulo
F9EF EDC4             (        forth.asm):03759 (5+0)           std     ,u              Function 1: return only the modulo
F9F1 39               (        forth.asm):03760 (4)             rts
                      (        forth.asm):03761         
                      (        forth.asm):03762         * Quotient is returned in W, modulo in D but this is symmetric division :-(
                      (        forth.asm):03763         * Need to return a floored division result for compat. with F83 and ANSI impls.
F9F2 104D             (        forth.asm):03764 (2)     FDIVADJ tstd                    Is the remainder zero?
F9F4 2708             (        forth.asm):03765 (3)             beq     @no83ad         Yes. No adjusment required for floored division
F9F6 0D34             (        forth.asm):03766 (4)             tst     F83DIVF         Different signs for numerator and denominator?
F9F8 2704             (        forth.asm):03767 (3)             beq     @no83ad         No. Adjusment not needed for floored division
                      (        forth.asm):03768         * Adjusment for F83 floored division.
F9FA 105A             (        forth.asm):03769 (2)             decw                    Decrement the quotient
F9FC E3C4             (        forth.asm):03770 (5+0)           addd    ,u              Add the denominator to the modulo
F9FE 39               (        forth.asm):03771 (4)     @no83ad rts
                      (        forth.asm):03772         
F9FF 03               (        forth.asm):03773         MOD     fcb     3               79-STANDARD (REQ104)
FA00 4D4F44           (        forth.asm):03774                 fcc     'MOD'           ( N1 N2 -- N3 )
FA03 F9B5             (        forth.asm):03775                 fdb     DIV
FA05 C7               (        forth.asm):03776                 RFCS
FA06 8601             (        forth.asm):03777 (2)             lda     #1
FA08 9733             (        forth.asm):03778 (3)             sta     DIVFCN
FA0A 20B2             (        forth.asm):03779 (3)             bra     DIV1
                      (        forth.asm):03780         
FA0C 04               (        forth.asm):03781         MDIV    fcb     4               79-STANDARD (REQ198)
FA0D 2F4D4F44         (        forth.asm):03782                 fcc     '/MOD'          ( N1 N2 -- N3 N4 )
FA11 F9FF             (        forth.asm):03783                 fdb     MOD
FA13 C7               (        forth.asm):03784                 RFCS
FA14 0F33             (        forth.asm):03785 (5)             clr     DIVFCN
FA16 20A6             (        forth.asm):03786 (3)             bra     DIV1
                      (        forth.asm):03787         
FA18 02               (        forth.asm):03788         STRSLSH fcb     2               79-STANDARD (REQ220)
FA19 2A2F             (        forth.asm):03789                 fcc     '*/'            ( N1 N2 N3 -- N4 [N5] )
FA1B FA0C             (        forth.asm):03790                 fdb     MDIV
FA1D C7               (        forth.asm):03791                 RFCS
FA1E 8601             (        forth.asm):03792 (2)             lda     #1
FA20 9735             (        forth.asm):03793 (3)             sta     STSLFCN
FA22 BDE4A7           (        forth.asm):03794 (7)     STRSL1  jsr     MIN3PST         Three cells need to be stacked up
FA25 0F34             (        forth.asm):03795 (5)             clr     F83DIVF         Assume no adjustment required for floored div.
                      (        forth.asm):03796         * Division by zero conditions are dealt with through the trap handler.
FA27 EC44             (        forth.asm):03797 (5+1)           ldd     4,u             N1
FA29 11AF42           (        forth.asm):03798 (30+1)          muld    2,u             N2 (N1 * N2 -> D:W)
FA2C 3402             (        forth.asm):03799 (4+1)           pshs    a               Product's MSC's MSB
FA2E A8C4             (        forth.asm):03800 (4+0)           eora    ,u              Different sign from the denominator's?
FA30 2A02             (        forth.asm):03801 (3)             bpl     @stslpr         No. Floored division adjustment not needed
FA32 0C34             (        forth.asm):03802 (5)             inc     F83DIVF
FA34 3502             (        forth.asm):03803 (4+1)   @stslpr puls    a
FA36 11AEC4           (        forth.asm):03804 (36)            divq    ,u              N3
FA39 8DB7             (        forth.asm):03805 (6)             bsr     FDIVADJ         Perform floored division adjustment, if needed
FA3B 3342             (        forth.asm):03806 (4+1)           leau    2,u
FA3D 0D35             (        forth.asm):03807 (4)             tst     STSLFCN
FA3F 2606             (        forth.asm):03808 (3)             bne     @strsl2         Just the quotient, Ma'am!
FA41 ED42             (        forth.asm):03809 (5+1)           std     2,u             N4: the modulo
FA43 10A7C4           (        forth.asm):03810 (6+0)           stw     ,u              N5: the quotient
FA46 39               (        forth.asm):03811 (4)             rts
FA47 3342             (        forth.asm):03812 (4+1)   @strsl2 leau    2,u
FA49 10A7C4           (        forth.asm):03813 (6+0)           stw     ,u              N4
FA4C 39               (        forth.asm):03814 (4)             rts
                      (        forth.asm):03815         
FA4D 05               (        forth.asm):03816         STRSLMD fcb     5               79-STANDARD (REQ192)
FA4E 2A2F4D4F44       (        forth.asm):03817                 fcc     '*/MOD'         ( N1 N2 N3 -- N4 N5 )
FA53 FA18             (        forth.asm):03818                 fdb     STRSLSH
FA55 C7               (        forth.asm):03819                 RFCS
FA56 0F35             (        forth.asm):03820 (5)             clr     STSLFCN
FA58 20C8             (        forth.asm):03821 (3)             bra     STRSL1
                      (        forth.asm):03822         
                      (        forth.asm):03823         * Returns the current value of the S register (informational only).
FA5A 01               (        forth.asm):03824         SYSSTK  fcb     1               Non-standard
FA5B 53               (        forth.asm):03825                 fcc     'S'
FA5C FA4D             (        forth.asm):03826                 fdb     STRSLMD
FA5E C7               (        forth.asm):03827                 RFCS
FA5F 1F41             (        forth.asm):03828 (4)             tfr     s,x
FA61 7EE7F3           (        forth.asm):03829 (3)             jmp     NPUSH
                      (        forth.asm):03830         
FA64 07               (        forth.asm):03831         PAYLOAD fcb     7               Non standard
FA65 5041594C4F4144   (        forth.asm):03832                 fcc     'PAYLOAD'       ( -- len ) where len is the code payload
FA6C FA5A             (        forth.asm):03833                 fdb     SYSSTK          of the word located by FIND (or NULL)
FA6E C7               (        forth.asm):03834                 RFCS
FA6F 9E10             (        forth.asm):03835 (4)             ldx     FNDPLD          Code payload reported by FIND
FA71 7EE7F3           (        forth.asm):03836 (3)             jmp     NPUSH
                      (        forth.asm):03837         
                      (        forth.asm):03838         * Differences from the original code:
                      (        forth.asm):03839         * - display number in HEX rather than in the current base.
                      (        forth.asm):03840         * - dropped feat: the original stuff was interactively paged by 15 line screens.
                      (        forth.asm):03841         * - added feat: display code implementation payload.
                      (        forth.asm):03842         * - added feat: display the immedediate and define (compile time only) flags.
                      (        forth.asm):03843         * - added feat: display the forgettable status (R/W). Everything user
                      (        forth.asm):03844         *   defined is forgettable (i.e. RAM resident).
FA74 05               (        forth.asm):03845         VLIST   fcb     5               Non-standard
FA75 564C495354       (        forth.asm):03846                 fcc     'VLIST'         ( -- )
FA7A FA64             (        forth.asm):03847                 fdb     PAYLOAD
FA7C C7               (        forth.asm):03848                 RFCS
FA7D 9E08             (        forth.asm):03849 (4)             ldx     DICEND
FA7F 9F16             (        forth.asm):03850 (4)             stx     VLPRVEP         Last word code address + 1
FA81 9E06             (        forth.asm):03851 (4)             ldx     LSTWAD
FA83 9F18             (        forth.asm):03852 (4)     @vlist1 stx     VLPRVHD         Last word header pointer
FA85 108E03EC         (        forth.asm):03853 (4)             ldy     #TBUFF
FA89 E680             (        forth.asm):03854 (4+1)           ldb     ,x+
FA8B 3404             (        forth.asm):03855 (4+1)           pshs    b
FA8D C41F             (        forth.asm):03856 (2)             andb    #WRLNMSK        Mask out word length
FA8F 4F               (        forth.asm):03857 (1)             clra
FA90 3404             (        forth.asm):03858 (4+1)           pshs    b               Preserve word length
FA92 1F06             (        forth.asm):03859 (4)             tfr     d,w
FA94 113812           (        forth.asm):03860 (6+?)           tfm     x+,y+
FA97 3502             (        forth.asm):03861 (4+1)           puls    a               Restore word length to A
FA99 C620             (        forth.asm):03862 (2)             ldb     #WRLNMSK+1
FA9B 103289           (        forth.asm):03863 (4)             subr    a,b             Number of spaces we want to emit
FA9E 8620             (        forth.asm):03864 (2)             lda     #SP
FAA0 A7A0             (        forth.asm):03865 (4+1)   @vlist2 sta     ,y+
FAA2 5A               (        forth.asm):03866 (1)             decb
FAA3 26FB             (        forth.asm):03867 (3)             bne     @vlist2
FAA5 6FA0             (        forth.asm):03868 (6+1)           clr     ,y+             Terminate formatted output string
FAA7 3410             (        forth.asm):03869 (4+2)           pshs    x               Address of the current word backlink address
FAA9 BDE308           (        forth.asm):03870 (7)             jsr     PUTCR           Carriage return is output before anything else
FAAC 8E03EC           (        forth.asm):03871 (3)             ldx     #TBUFF
FAAF BDE2FB           (        forth.asm):03872 (7)             jsr     PUTS            Output word name formatted on 17 chars + SP
FAB2 AEE4             (        forth.asm):03873 (5+0)           ldx     ,s
                      (        forth.asm):03874                 IFNE    RELFEAT
FAB4 3003             (        forth.asm):03875 (4+1)           leax    3,x             Word XT to X (Skip backlink and checksum)
                      (        forth.asm):03876                 ELSE
                      (        forth.asm):03877                 leax    2,x             Word XT to X (Skip backlink)
                      (        forth.asm):03878                 ENDC                    RELFEAT
FAB6 1F10             (        forth.asm):03879 (4)             tfr     x,d             CVNSTR depends on UBASE and we want HEX output
FAB8 108E03EC         (        forth.asm):03880 (4)             ldy     #TBUFF
FABC BDE195           (        forth.asm):03881 (7)             jsr     HDMP4           So we use trusted debugging code
FABF 8E03EC           (        forth.asm):03882 (3)             ldx     #TBUFF
FAC2 BDE2FB           (        forth.asm):03883 (7)             jsr     PUTS
                      (        forth.asm):03884         * Now to display word implementation length.
                      (        forth.asm):03885         * Implementation code length is from ,s+3 (or 2) to VLPRVEP
FAC5 8609             (        forth.asm):03886 (2)             lda     #HT
FAC7 BDE2E8           (        forth.asm):03887 (7)             jsr     PUTCH
FACA 9E16             (        forth.asm):03888 (4)             ldx     VLPRVEP
FACC 10AEE4           (        forth.asm):03889 (6+0)           ldy     ,s
                      (        forth.asm):03890                 IFNE    RELFEAT
FACF 3123             (        forth.asm):03891 (4+1)           leay    3,y             Current word code entry address
                      (        forth.asm):03892                 ELSE
                      (        forth.asm):03893                 leay    2,y             Current word code entry address
                      (        forth.asm):03894                 ENDC                    RELFEAT
FAD1 103221           (        forth.asm):03895 (4)             subr    y,x
FAD4 1F10             (        forth.asm):03896 (4)             tfr     x,d
FAD6 108E03EC         (        forth.asm):03897 (4)             ldy     #TBUFF
FADA BDE195           (        forth.asm):03898 (7)             jsr     HDMP4
FADD 8E03EC           (        forth.asm):03899 (3)             ldx     #TBUFF
FAE0 BDE2FB           (        forth.asm):03900 (7)             jsr     PUTS
                      (        forth.asm):03901         # Display attribute flags.
FAE3 8609             (        forth.asm):03902 (2)             lda     #HT
FAE5 BDE2E8           (        forth.asm):03903 (7)             jsr     PUTCH
FAE8 8E03EC           (        forth.asm):03904 (3)             ldx     #TBUFF
FAEB E662             (        forth.asm):03905 (4+1)           ldb     2,s             Word attribute to B
FAED 862D             (        forth.asm):03906 (2)             lda     #'-
FAEF C580             (        forth.asm):03907 (2)             bitb    #IMDFLM         Check for immediate
FAF1 2702             (        forth.asm):03908 (3)             beq     @vlist4
FAF3 8649             (        forth.asm):03909 (2)             lda     #'I
FAF5 A780             (        forth.asm):03910 (4+1)   @vlist4 sta     ,x+
FAF7 862D             (        forth.asm):03911 (2)             lda     #'-
FAF9 C540             (        forth.asm):03912 (2)             bitb    #DEFFLM         Check for define (compile time only)
FAFB 2702             (        forth.asm):03913 (3)             beq     @vlist5
FAFD 8643             (        forth.asm):03914 (2)             lda     #'C
FAFF A780             (        forth.asm):03915 (4+1)   @vlist5 sta     ,x+
                      (        forth.asm):03916                 IFNE    RELFEAT
FB01 862D             (        forth.asm):03917 (2)             lda     #'-
FB03 C520             (        forth.asm):03918 (2)             bitb    #MONFLM         Check for monitored status
FB05 2702             (        forth.asm):03919 (3)             beq     @vlst51
FB07 864D             (        forth.asm):03920 (2)             lda     #'M
FB09 A780             (        forth.asm):03921 (4+1)   @vlst51 sta     ,x+
                      (        forth.asm):03922                 ENDC                    RELFEAT
                      (        forth.asm):03923         * Check for forgettable also. In ROM => R else W unless we just processed '@'.
FB0B 8652             (        forth.asm):03924 (2)             lda     #'R
FB0D 10AEE4           (        forth.asm):03925 (6+0)           ldy     ,s
                      (        forth.asm):03926                 IFNE    RELFEAT
FB10 3123             (        forth.asm):03927 (4+1)           leay    3,y             Word entry point to Y
                      (        forth.asm):03928                 ELSE
                      (        forth.asm):03929                 leay    2,y             Word entry point to Y
                      (        forth.asm):03930                 ENDC                    RELFEAT
FB12 108C0C65         (        forth.asm):03931 (4)             cmpy    #RAMFTCH        @ in RAM is unforgettable
FB16 2708             (        forth.asm):03932 (3)             beq     @vlist6
FB18 108CE000         (        forth.asm):03933 (4)             cmpy    #ROMSTRT        as are all ROM resident words
FB1C 2402             (        forth.asm):03934 (3)             bcc     @vlist6
FB1E 8657             (        forth.asm):03935 (2)             lda     #'W
FB20 A780             (        forth.asm):03936 (4+1)   @vlist6 sta     ,x+
FB22 6F84             (        forth.asm):03937 (6+0)           clr     ,x
FB24 8E03EC           (        forth.asm):03938 (3)             ldx     #TBUFF
FB27 BDE2FB           (        forth.asm):03939 (7)             jsr     PUTS
                      (        forth.asm):03940         * The point at which VLPRVHD==WDICSPC is a singularity (RAM to ROM transition).
FB2A 9E18             (        forth.asm):03941 (4)             ldx     VLPRVHD
FB2C 8C0C60           (        forth.asm):03942 (3)             cmpx    #WDICSPC
FB2F 2608             (        forth.asm):03943 (3)             bne     @vlist7
FB31 8EFE07           (        forth.asm):03944 (3)             ldx     #QMARK          Word just before @ (ROM flavor)
FB34 9F18             (        forth.asm):03945 (4)             stx     VLPRVHD
FB36 8EFE12           (        forth.asm):03946 (3)             ldx     #THEEND
FB39 9F16             (        forth.asm):03947 (4)     @vlist7 stx     VLPRVEP
FB3B 3510             (        forth.asm):03948 (4+2)           puls    x
FB3D 3504             (        forth.asm):03949 (4+1)           puls    b
FB3F AE84             (        forth.asm):03950 (5+0)           ldx     ,x              Point to previous word
FB41 1026FF3E         (        forth.asm):03951 (5)             lbne    @vlist1
FB45 39               (        forth.asm):03952 (4)             rts
                      (        forth.asm):03953         
FB46 05               (        forth.asm):03954         STATE   fcb     5
FB47 5354415445       (        forth.asm):03955                 fcc     'STATE'
FB4C FA74             (        forth.asm):03956                 fdb     VLIST
FB4E C7               (        forth.asm):03957                 RFCS
FB4F 8E0120           (        forth.asm):03958 (3)             ldx     #USTATE
FB52 7EE7F3           (        forth.asm):03959 (3)             jmp     NPUSH
                      (        forth.asm):03960         
FB55 04               (        forth.asm):03961         BASE    fcb     4               79-STANDARD (REQ115)
FB56 42415345         (        forth.asm):03962                 fcc     'BASE'
FB5A FB46             (        forth.asm):03963                 fdb     STATE
FB5C C7               (        forth.asm):03964                 RFCS
FB5D 8E011E           (        forth.asm):03965 (3)             ldx     #UBASE
FB60 7EE7F3           (        forth.asm):03966 (3)             jmp     NPUSH
                      (        forth.asm):03967         
FB63 03               (        forth.asm):03968         BIN     fcb     3               Non-standard
FB64 42494E           (        forth.asm):03969                 fcc     'BIN'
FB67 FB55             (        forth.asm):03970                 fdb     BASE
FB69 C7               (        forth.asm):03971                 RFCS
FB6A CC0002           (        forth.asm):03972 (3)             ldd     #2
FB6D DD1E             (        forth.asm):03973 (4)             std     UBASE
FB6F 39               (        forth.asm):03974 (4)             rts
                      (        forth.asm):03975         
FB70 05               (        forth.asm):03976         OCTAL   fcb     5               79-STANDARD (REF)
FB71 4F4354414C       (        forth.asm):03977                 fcc     'OCTAL'
FB76 FB63             (        forth.asm):03978                 fdb     BIN
FB78 C7               (        forth.asm):03979                 RFCS
FB79 CC0008           (        forth.asm):03980 (3)             ldd     #8
FB7C DD1E             (        forth.asm):03981 (4)             std     UBASE
FB7E 39               (        forth.asm):03982 (4)             rts
                      (        forth.asm):03983         
FB7F 07               (        forth.asm):03984         DECIMAL fcb     7               79-STANDARD (REQ197)
FB80 444543494D414C   (        forth.asm):03985                 fcc     'DECIMAL'
FB87 FB70             (        forth.asm):03986                 fdb     OCTAL
FB89 C7               (        forth.asm):03987                 RFCS
FB8A CC000A           (        forth.asm):03988 (3)             ldd     #10
FB8D DD1E             (        forth.asm):03989 (4)             std     UBASE
FB8F 39               (        forth.asm):03990 (4)             rts
                      (        forth.asm):03991         
FB90 03               (        forth.asm):03992         HEX     fcb     3               79-STANDARD (REF162)
FB91 484558           (        forth.asm):03993                 fcc     'HEX'
FB94 FB7F             (        forth.asm):03994                 fdb     DECIMAL
FB96 C7               (        forth.asm):03995                 RFCS
FB97 CC0010           (        forth.asm):03996 (3)             ldd     #16
FB9A DD1E             (        forth.asm):03997 (4)             std     UBASE
FB9C 39               (        forth.asm):03998 (4)             rts
                      (        forth.asm):03999         
FB9D 02               (        forth.asm):04000         DOTTICK fcb     2               Non-standard (SwiftForth)
FB9E 2E27             (        forth.asm):04001                 fcb     $2E,$27         .' ( memaddr -- )
FBA0 FB90             (        forth.asm):04002                 fdb     HEX
FBA2 C7               (        forth.asm):04003                 RFCS
                      (        forth.asm):04004                 IFNE    SSDFEAT
FBA3 BDE801           (        forth.asm):04005 (7)             jsr     NPOP
FBA6 1F12             (        forth.asm):04006 (4)             tfr     x,y
FBA8 8E039C           (        forth.asm):04007 (3)             ldx     #HEXBUF
FBAB BDE632           (        forth.asm):04008 (7)             jsr     FINDSYM
                      (        forth.asm):04009                 ELSE
                      (        forth.asm):04010                 lda     #'$
                      (        forth.asm):04011                 jsr     PUTCH
                      (        forth.asm):04012                 jsr     NPOP
                      (        forth.asm):04013                 tfr     x,d
                      (        forth.asm):04014                 ldy     #HEXBUF
                      (        forth.asm):04015                 jsr     HDMP4
                      (        forth.asm):04016                 ENDC                    SSDFEAT
FBAE 8E039C           (        forth.asm):04017 (3)             ldx     #HEXBUF
FBB1 7EE2FB           (        forth.asm):04018 (3)             jmp     PUTS
                      (        forth.asm):04019         
                      (        forth.asm):04020         * Display a dump of the data stack in the current BASE. In Leo Brodie's
                      (        forth.asm):04021         * "Starting Forth" the data stack is printed from the bottom up. So it is here.
FBB4 02               (        forth.asm):04022         DDUMP   fcb     2               ANSI (Optional "Programming tools" word set)
FBB5 2E53             (        forth.asm):04023                 fcc     '.S'            ( -- )
FBB7 FB9D             (        forth.asm):04024                 fdb     DOTTICK
FBB9 C7               (        forth.asm):04025                 RFCS
FBBA CC0298           (        forth.asm):04026 (3)             ldd     #NSTBOT
FBBD 103230           (        forth.asm):04027 (4)             subr    u,d
FBC0 1044             (        forth.asm):04028 (2)             lsrd                    DEPTH is in D
FBC2 272A             (        forth.asm):04029 (3)             beq     @ndump3         Data stack is empty
FBC4 3440             (        forth.asm):04030 (4+2)           pshs    u
FBC6 CE0298           (        forth.asm):04031 (3)             ldu     #NSTBOT         Pointing to the bottom of the data stack
FBC9 8601             (        forth.asm):04032 (2)             lda     #1
FBCB 9739             (        forth.asm):04033 (3)             sta     CVISSGN         Force a signed number conversion
FBCD 3404             (        forth.asm):04034 (4+1)   @ndump1 pshs    b
FBCF AEC3             (        forth.asm):04035 (5+2)           ldx     ,--u
FBD1 BDE449           (        forth.asm):04036 (7)             jsr     CVNSTR
FBD4 8E03EC           (        forth.asm):04037 (3)             ldx     #TBUFF
                      (        forth.asm):04038         # Skip leading spaces.
FBD7 A680             (        forth.asm):04039 (4+1)   @ndump2 lda     ,x+
FBD9 8120             (        forth.asm):04040 (2)             cmpa    #SP
FBDB 27FA             (        forth.asm):04041 (3)             beq     @ndump2
FBDD 301F             (        forth.asm):04042 (4+1)           leax    -1,x
FBDF BDE2FB           (        forth.asm):04043 (7)             jsr     PUTS
FBE2 8620             (        forth.asm):04044 (2)             lda     #SP
FBE4 BDE2E8           (        forth.asm):04045 (7)             jsr     PUTCH
FBE7 3504             (        forth.asm):04046 (4+1)           puls    b
FBE9 5A               (        forth.asm):04047 (1)             decb
FBEA 26E1             (        forth.asm):04048 (3)             bne     @ndump1
FBEC 3540             (        forth.asm):04049 (4+2)           puls    u
FBEE 39               (        forth.asm):04050 (4)     @ndump3 rts
                      (        forth.asm):04051         
FBEF 04               (        forth.asm):04052         QRYDUP  fcb     4               79-STANDARD (REQ184)
FBF0 3F445550         (        forth.asm):04053                 fcc     '?DUP'
FBF4 FBB4             (        forth.asm):04054                 fdb     DDUMP
FBF6 C7               (        forth.asm):04055                 RFCS
FBF7 BDE801           (        forth.asm):04056 (7)             jsr     NPOP
FBFA 3610             (        forth.asm):04057                 UCNPUSH                 Push back the original parameter
FBFC 1037C1           (        forth.asm):04058 (4)             cmpr    0,x
FBFF 2601             (        forth.asm):04059 (3)             bne     @qrydp1
FC01 39               (        forth.asm):04060 (4)             rts
FC02 7EE7F3           (        forth.asm):04061 (3)     @qrydp1 jmp     NPUSH           And DUP if NZ
                      (        forth.asm):04062         
FC05 04               (        forth.asm):04063         TUCK    fcb     4               ANSI (Core ext)
FC06 5455434B         (        forth.asm):04064                 fcc     'TUCK'          ( x1 x2 -- x2 x1 x2 ) i.e. SWAP OVER
FC0A FBEF             (        forth.asm):04065                 fdb     QRYDUP
FC0C C7               (        forth.asm):04066                 RFCS
FC0D 8D2F             (        forth.asm):04067                 RFXT    bsr,SWAP+7      XT for SWAP
FC0F 2073             (        forth.asm):04068                 RFXT    bra,OVER+7      XT for OVER
                      (        forth.asm):04069         
FC11 03               (        forth.asm):04070         NIP     fcb     3               ANSI (Core ext)
FC12 4E4950           (        forth.asm):04071                 fcc     'NIP'           ( x1 x2 -- x2 ) i.e. SWAP DROP
FC15 FC05             (        forth.asm):04072                 fdb     TUCK
FC17 C7               (        forth.asm):04073                 RFCS
FC18 8D24             (        forth.asm):04074                 RFXT    bsr,SWAP+7      XT for SWAP
FC1A 2017             (        forth.asm):04075                 RFXT    bra,DROP+7      XT for DROP
                      (        forth.asm):04076         
FC1C 03               (        forth.asm):04077         DUP     fcb     3               79-STANDARD (REQ205)
FC1D 445550           (        forth.asm):04078                 fcc     'DUP'
FC20 FC11             (        forth.asm):04079                 fdb     NIP
FC22 C7               (        forth.asm):04080                 RFCS
FC23 BDE49D           (        forth.asm):04081 (7)             jsr     MIN1PST         At least one cell needs to be stacked up
FC26 AEC4             (        forth.asm):04082 (5+0)           ldx     ,u
FC28 7EE7F3           (        forth.asm):04083 (3)             jmp     NPUSH
                      (        forth.asm):04084         
FC2B 04               (        forth.asm):04085         DROP    fcb     4               79-STANDARD (REQ233)
FC2C 44524F50         (        forth.asm):04086                 fcc     'DROP'
FC30 FC1C             (        forth.asm):04087                 fdb     DUP
FC32 C7               (        forth.asm):04088                 RFCS
FC33 7EE801           (        forth.asm):04089 (3)             jmp     NPOP
                      (        forth.asm):04090         
FC36 04               (        forth.asm):04091         SWAP    fcb     4               79-STANDARD (REQ230)
FC37 53574150         (        forth.asm):04092                 fcc     'SWAP'
FC3B FC2B             (        forth.asm):04093                 fdb     DROP
FC3D C7               (        forth.asm):04094                 RFCS
FC3E BDE4A2           (        forth.asm):04095 (7)             jsr     MIN2PST         We need at least two cells stacked up
FC41 10ECC4           (        forth.asm):04096 (8+0)           ldq     ,u              In place SWAP
FC44 1E06             (        forth.asm):04097 (5)             exg     d,w
FC46 10EDC4           (        forth.asm):04098 (8+0)           stq     ,u
FC49 39               (        forth.asm):04099 (4)             rts
                      (        forth.asm):04100         
FC4A 04               (        forth.asm):04101         PICK    fcb     4
FC4B 5049434B         (        forth.asm):04102                 fcc     'PICK'
FC4F FC36             (        forth.asm):04103                 fdb     SWAP
FC51 C7               (        forth.asm):04104                 RFCS
FC52 BDE801           (        forth.asm):04105 (7)             jsr     NPOP
FC55 CC0298           (        forth.asm):04106 (3)     PICK1   ldd     #NSTBOT
FC58 103230           (        forth.asm):04107 (4)             subr    u,d
FC5B 1044             (        forth.asm):04108 (2)             lsrd                    D has the data stack depth in cells
FC5D 103710           (        forth.asm):04109 (4)             cmpr    x,d
FC60 2405             (        forth.asm):04110 (3)             bcc     @pick1
FC62 C60D             (        forth.asm):04111 (2)     ERRPCK  ldb     #13             Argument is greater than DEPTH
FC64 BDE772           (        forth.asm):04112 (7)             jsr     ERRHDLR         No return
FC67 1F10             (        forth.asm):04113 (4)     @pick1  tfr     x,d
FC69 104D             (        forth.asm):04114 (2)             tstd
FC6B 27F5             (        forth.asm):04115 (3)             beq     ERRPCK
FC6D 104A             (        forth.asm):04116 (2)             decd                    Minus 1, unlike in the Z80 implementation
FC6F 1048             (        forth.asm):04117 (2)             lsld                    Times 2
FC71 1F31             (        forth.asm):04118 (4)             tfr     u,x
FC73 308B             (        forth.asm):04119 (4+2)           leax    d,x
FC75 1F12             (        forth.asm):04120 (4)             tfr     x,y             For the sake of ROLL's implementation
FC77 AE84             (        forth.asm):04121 (5+0)           ldx     ,x
FC79 3610             (        forth.asm):04122                 UCNPUSH
FC7B 39               (        forth.asm):04123 (4)             rts
                      (        forth.asm):04124         
FC7C 04               (        forth.asm):04125         OVER    fcb     4
FC7D 4F564552         (        forth.asm):04126                 fcc     'OVER'
FC81 FC4A             (        forth.asm):04127                 fdb     PICK
FC83 C7               (        forth.asm):04128                 RFCS
FC84 8E0002           (        forth.asm):04129 (3)             ldx     #2
FC87 20CC             (        forth.asm):04130 (3)             bra     PICK1
                      (        forth.asm):04131         
FC89 04               (        forth.asm):04132         ROLL    fcb     4
FC8A 524F4C4C         (        forth.asm):04133                 fcc     'ROLL'
FC8E FC7C             (        forth.asm):04134                 fdb     OVER
FC90 C7               (        forth.asm):04135                 RFCS
FC91 BDE801           (        forth.asm):04136 (7)             jsr     NPOP
FC94 1F16             (        forth.asm):04137 (4)     ROLL1   tfr     x,w
FC96 8DBD             (        forth.asm):04138 (6)             bsr     PICK1           Let PICK do the error handling
FC98 3121             (        forth.asm):04139 (4+1)           leay    1,y             Point to the LSB since we're moving backward
FC9A 1F21             (        forth.asm):04140 (4)             tfr     y,x
FC9C 301E             (        forth.asm):04141 (4+1)           leax    -2,x
FC9E 103066           (        forth.asm):04142 (4)             addr    w,w
FCA1 113912           (        forth.asm):04143 (6+?)           tfm     x-,y-
FCA4 7EE801           (        forth.asm):04144 (3)             jmp     NPOP
                      (        forth.asm):04145         
FCA7 03               (        forth.asm):04146         ROT     fcb     3
FCA8 524F54           (        forth.asm):04147                 fcc     'ROT'
FCAB FC89             (        forth.asm):04148                 fdb     ROLL
FCAD C7               (        forth.asm):04149                 RFCS
FCAE 8E0003           (        forth.asm):04150 (3)             ldx     #3
FCB1 20E1             (        forth.asm):04151 (3)             bra     ROLL1
                      (        forth.asm):04152         
FCB3 04               (        forth.asm):04153         MROT    fcb     4
FCB4 2D524F54         (        forth.asm):04154                 fcc     '-ROT'
FCB8 FCA7             (        forth.asm):04155                 fdb     ROT
FCBA C7               (        forth.asm):04156                 RFCS
FCBB 8DF1             (        forth.asm):04157                 RFXT    bsr,ROT+6       XT for ROT
FCBD 20EF             (        forth.asm):04158                 RFXT    bra,ROT+6       XT for ROT
                      (        forth.asm):04159         
FCBF 02               (        forth.asm):04160         CCOMMA  fcb     2               79-STANDARD (REF)
FCC0 432C             (        forth.asm):04161                 fcc     'C,'
FCC2 FCB3             (        forth.asm):04162                 fdb     MROT
FCC4 C7               (        forth.asm):04163                 RFCS
FCC5 BDE801           (        forth.asm):04164 (7)             jsr     NPOP
FCC8 1F10             (        forth.asm):04165 (4)             tfr     x,d
FCCA 109E08           (        forth.asm):04166 (5)             ldy     DICEND
FCCD E7A0             (        forth.asm):04167 (4+1)           stb     ,y+
FCCF 109F08           (        forth.asm):04168 (5)             sty     DICEND
FCD2 39               (        forth.asm):04169 (4)             rts
                      (        forth.asm):04170         
FCD3 01               (        forth.asm):04171         COMMA   fcb     1               79-STANDARD (REQ143)
FCD4 2C               (        forth.asm):04172                 fcc     ','
FCD5 FCBF             (        forth.asm):04173                 fdb     CCOMMA
FCD7 C7               (        forth.asm):04174                 RFCS
FCD8 BDE801           (        forth.asm):04175 (7)             jsr     NPOP
FCDB 109E08           (        forth.asm):04176 (5)             ldy     DICEND
FCDE AFA1             (        forth.asm):04177 (5+2)           stx     ,y++
FCE0 109F08           (        forth.asm):04178 (5)             sty     DICEND
FCE3 39               (        forth.asm):04179 (4)             rts
                      (        forth.asm):04180         
FCE4 05               (        forth.asm):04181         ALLOT   fcb     5               79-STANDARD (REQ154)
FCE5 414C4C4F54       (        forth.asm):04182                 fcc     'ALLOT'         ( signedbytecount -- )
FCEA FCD3             (        forth.asm):04183                 fdb     COMMA
FCEC C7               (        forth.asm):04184                 RFCS
FCED BDE801           (        forth.asm):04185 (7)             jsr     NPOP
FCF0 DC08             (        forth.asm):04186 (4)             ldd     DICEND
FCF2 308B             (        forth.asm):04187 (4+2)           leax    d,x
FCF4 9F08             (        forth.asm):04188 (4)             stx     DICEND
FCF6 39               (        forth.asm):04189 (4)             rts
                      (        forth.asm):04190         
FCF7 04               (        forth.asm):04191         FILL    fcb     4               79-STANDARD (REQ234)
FCF8 46494C4C         (        forth.asm):04192                 fcc     'FILL'
FCFC FCE4             (        forth.asm):04193                 fdb     ALLOT
FCFE C7               (        forth.asm):04194                 RFCS
FCFF BDE801           (        forth.asm):04195 (7)             jsr     NPOP
FD02 1F16             (        forth.asm):04196 (4)             tfr     x,w             Byte fill value to W
FD04 BDE801           (        forth.asm):04197 (7)     FILL1   jsr     NPOP
FD07 1F12             (        forth.asm):04198 (4)             tfr     x,y             Byte count to Y
FD09 1E26             (        forth.asm):04199 (5)             exg     y,w             Byte count to W, byte fill value to Y
FD0B BDE801           (        forth.asm):04200 (7)             jsr     NPOP            Destination address to X
FD0E 105D             (        forth.asm):04201 (2)             tstw
FD10 2F0B             (        forth.asm):04202 (3)             ble     @filend
FD12 1F20             (        forth.asm):04203 (4)             tfr     y,d             Byte fill value to B
FD14 E784             (        forth.asm):04204 (4+0)           stb     ,x
FD16 105A             (        forth.asm):04205 (2)             decw
FD18 3101             (        forth.asm):04206 (4+1)           leay    1,x
FD1A 113812           (        forth.asm):04207 (6+?)           tfm     x+,y+
FD1D 39               (        forth.asm):04208 (4)     @filend rts
                      (        forth.asm):04209         
FD1E 06               (        forth.asm):04210         BLANKS  fcb     6               79-STANDARD (REF152)
FD1F 424C414E4B53     (        forth.asm):04211                 fcc     'BLANKS'
FD25 FCF7             (        forth.asm):04212                 fdb     FILL
FD27 C7               (        forth.asm):04213                 RFCS
FD28 10860020         (        forth.asm):04214 (4)             ldw     #SP
FD2C 20D6             (        forth.asm):04215 (3)             bra     FILL1
                      (        forth.asm):04216         
FD2E 06               (        forth.asm):04217         CMOVED  fcb     6               FORTH-83
FD2F 434D4F56453E     (        forth.asm):04218                 fcc     'CMOVE>'
FD35 FD1E             (        forth.asm):04219                 fdb     BLANKS
FD37 C7               (        forth.asm):04220                 RFCS
FD38 BDE5B0           (        forth.asm):04221 (7)             jsr     ACQMOVP
FD3B 105D             (        forth.asm):04222 (2)             tstw
FD3D 270D             (        forth.asm):04223 (3)             beq     @cmovd1
FD3F 105A             (        forth.asm):04224 (2)             decw
FD41 103061           (        forth.asm):04225 (4)             addr    w,x
FD44 103062           (        forth.asm):04226 (4)             addr    w,y
FD47 105C             (        forth.asm):04227 (2)             incw
FD49 113912           (        forth.asm):04228 (6+?)           tfm     x-,y-
FD4C 39               (        forth.asm):04229 (4)     @cmovd1 rts
                      (        forth.asm):04230         
FD4D 05               (        forth.asm):04231         CMOVE   fcb     5               79-STANDARD (REQ153)
FD4E 434D4F5645       (        forth.asm):04232                 fcc     'CMOVE'
FD53 FD2E             (        forth.asm):04233                 fdb     CMOVED
FD55 C7               (        forth.asm):04234                 RFCS
FD56 BDE5B0           (        forth.asm):04235 (7)             jsr     ACQMOVP
FD59 113812           (        forth.asm):04236 (6+?)           tfm     x+,y+
FD5C 39               (        forth.asm):04237 (4)             rts
                      (        forth.asm):04238         
FD5D 04               (        forth.asm):04239         MOVE    fcb     4               79-STANDARD (REQ113)
FD5E 4D4F5645         (        forth.asm):04240                 fcc     'MOVE'          ( srcaddr dstaddr ncells -- )
FD62 FD4D             (        forth.asm):04241                 fdb     CMOVE
FD64 C7               (        forth.asm):04242                 RFCS
FD65 BDE5B0           (        forth.asm):04243 (7)             jsr     ACQMOVP
FD68 105D             (        forth.asm):04244 (2)             tstw
FD6A 2F06             (        forth.asm):04245 (3)             ble     @move1
FD6C 103066           (        forth.asm):04246 (4)             addr    w,w             Convert cells to bytes
FD6F 113812           (        forth.asm):04247 (6+?)           tfm     x+,y+
FD72 39               (        forth.asm):04248 (4)     @move1  rts
                      (        forth.asm):04249         
FD73 05               (        forth.asm):04250         CELLS   fcb     5               ANSI-X3.215-1994
FD74 43454C4C53       (        forth.asm):04251                 fcc     'CELLS'
FD79 FD5D             (        forth.asm):04252                 fdb     MOVE
FD7B C7               (        forth.asm):04253                 RFCS
FD7C BDE801           (        forth.asm):04254 (7)             jsr     NPOP
FD7F 103011           (        forth.asm):04255 (4)             addr    x,x
FD82 3610             (        forth.asm):04256                 UCNPUSH
FD84 39               (        forth.asm):04257 (4)             rts
                      (        forth.asm):04258         
FD85 04               (        forth.asm):04259         LAST    fcb     4               79-STANDARD (REF)
FD86 4C415354         (        forth.asm):04260                 fcc     'LAST'
FD8A FD73             (        forth.asm):04261                 fdb     CELLS
FD8C C7               (        forth.asm):04262                 RFCS
FD8D 9E06             (        forth.asm):04263 (4)             ldx     LSTWAD
FD8F 7EE7F3           (        forth.asm):04264 (3)             jmp     NPUSH
                      (        forth.asm):04265         
FD92 04               (        forth.asm):04266         HERE    fcb     4               79-STANDARD (REQ188)
FD93 48455245         (        forth.asm):04267                 fcc     'HERE'
FD97 FD85             (        forth.asm):04268                 fdb     LAST
FD99 C7               (        forth.asm):04269                 RFCS
FD9A 9E08             (        forth.asm):04270 (4)             ldx     DICEND
FD9C 7EE7F3           (        forth.asm):04271 (3)             jmp     NPUSH
                      (        forth.asm):04272         
FD9F 02               (        forth.asm):04273         PLUSST  fcb     2               79-STANDARD (REQ157)
FDA0 2B21             (        forth.asm):04274                 fcc     '+!'            ( incr addr -- )
FDA2 FD92             (        forth.asm):04275                 fdb     HERE
FDA4 C7               (        forth.asm):04276                 RFCS
FDA5 BDE4A2           (        forth.asm):04277 (7)             jsr     MIN2PST         We need at least two cells stacked up
FDA8 AEC4             (        forth.asm):04278 (5+0)           ldx     ,u              ADDR to X
FDAA EC84             (        forth.asm):04279 (5+0)           ldd     ,x              @ADDR to D
FDAC E342             (        forth.asm):04280 (5+1)           addd    2,u             Add INCR to D
FDAE ED84             (        forth.asm):04281 (5+0)   PLUSST1 std     ,x              Store the sum back to ADDR
FDB0 3344             (        forth.asm):04282 (4+1)           leau    4,u             Drop two cells from the data stack
FDB2 39               (        forth.asm):04283 (4)             rts
                      (        forth.asm):04284         
FDB3 03               (        forth.asm):04285         ONEPST  fcb     3               79-STANDARD (REF)
FDB4 312B21           (        forth.asm):04286                 fcc     '1+!'
FDB7 FD9F             (        forth.asm):04287                 fdb     PLUSST
FDB9 C7               (        forth.asm):04288                 RFCS
FDBA BDE49D           (        forth.asm):04289 (7)             jsr     MIN1PST         At least one cell needs to be stacked up
FDBD AEC4             (        forth.asm):04290 (5+0)           ldx     ,u
FDBF EC84             (        forth.asm):04291 (5+0)           ldd     ,x
FDC1 104C             (        forth.asm):04292 (2)             incd
FDC3 ED84             (        forth.asm):04293 (5+0)           std     ,x
FDC5 3342             (        forth.asm):04294 (4+1)           leau    2,u
FDC7 39               (        forth.asm):04295 (4)             rts
                      (        forth.asm):04296         
FDC8 02               (        forth.asm):04297         MINUSST fcb     2               79-STANDARD (REQ157)
FDC9 2D21             (        forth.asm):04298                 fcc     '-!'            ( incr addr -- )
FDCB FDB3             (        forth.asm):04299                 fdb     ONEPST
FDCD C7               (        forth.asm):04300                 RFCS
FDCE BDE4A2           (        forth.asm):04301 (7)             jsr     MIN2PST         We need at least two cells stacked up
FDD1 AEC4             (        forth.asm):04302 (5+0)           ldx     ,u              ADDR to X
FDD3 EC84             (        forth.asm):04303 (5+0)           ldd     ,x              @ADDR to D
FDD5 A342             (        forth.asm):04304 (5+1)           subd    2,u             Substract INCR from D
FDD7 20D5             (        forth.asm):04305 (3)             bra     PLUSST1
                      (        forth.asm):04306         
FDD9 02               (        forth.asm):04307         CSTORE  fcb     2               79-STANDARD (REQ219)
FDDA 4321             (        forth.asm):04308                 fcc     'C!'            ( val8 addr -- )
FDDC FDC8             (        forth.asm):04309                 fdb     MINUSST
FDDE C7               (        forth.asm):04310                 RFCS
FDDF BDE4A2           (        forth.asm):04311 (7)             jsr     MIN2PST         We need at least two cells stacked up
FDE2 A643             (        forth.asm):04312 (4+1)           lda     3,u             VAL8 to A
FDE4 A7D4             (        forth.asm):04313 (4+3)           sta     [,u]            Actual store to ADDR
FDE6 3344             (        forth.asm):04314 (4+1)           leau    4,u             Drop two cells from the data stack
FDE8 39               (        forth.asm):04315 (4)             rts
                      (        forth.asm):04316         
FDE9 01               (        forth.asm):04317         STORE   fcb     1               79-STANDARD (REQ112)
FDEA 21               (        forth.asm):04318                 fcc     '!'             ( data addr -- )
FDEB FDD9             (        forth.asm):04319                 fdb     CSTORE
FDED C7               (        forth.asm):04320                 RFCS
FDEE BDE4A2           (        forth.asm):04321 (7)             jsr     MIN2PST         At least two cells need to be stacked up
FDF1 EC42             (        forth.asm):04322 (5+1)           ldd     2,u             DATA to D
FDF3 EDD4             (        forth.asm):04323 (5+3)           std     [,u]            Actual store to ADDR
FDF5 3344             (        forth.asm):04324 (4+1)           leau    4,u             Drop two cells from the user stack
FDF7 39               (        forth.asm):04325 (4)             rts
                      (        forth.asm):04326         
FDF8 02               (        forth.asm):04327         CFETCH  fcb     2               79-STANDARD (REQ156)
FDF9 4340             (        forth.asm):04328                 fcc     'C@'            ( addr -- val8 )
FDFB FDE9             (        forth.asm):04329                 fdb     STORE
FDFD C7               (        forth.asm):04330                 RFCS
FDFE BDE49D           (        forth.asm):04331 (7)             jsr     MIN1PST         We need at least one cell stacked up
FE01 4F               (        forth.asm):04332 (1)             clra
FE02 E6D4             (        forth.asm):04333 (4+3)           ldb     [,u]
FE04 EDC4             (        forth.asm):04334 (5+0)           std     ,u
FE06 39               (        forth.asm):04335 (4)             rts
                      (        forth.asm):04336         
FE07 01               (        forth.asm):04337         QMARK   fcb     1               79-STANDARD (REQ194)
FE08 3F               (        forth.asm):04338                 fcc     '?'
FE09 FDF8             (        forth.asm):04339                 fdb     CFETCH
FE0B C7               (        forth.asm):04340                 RFCS
FE0C BD0C65           (        forth.asm):04341 (7)             jsr     RAMFTCH         Call the RAM based incarnation of @
FE0F 7EF670           (        forth.asm):04342                 RFXT    jmp,DOT+4       XT for .
                      (        forth.asm):04343         
                      (        forth.asm):04344         * End of ROM part of the builtin dictionary.
     FE12             (        forth.asm):04345         THEEND  equ     *               This is the end, Beautiful friend
                      (        forth.asm):04346         *                               This is the end, My only friend
                      (        forth.asm):04347         
                      (        forth.asm):04348         * This transactional word is relocated to RAM, so that we can compile new
                      (        forth.asm):04349         * definitions. FORTHIN will take care of that and adjust the relevant pointers.
FE12 01               (        forth.asm):04350         FETCH   fcb     1               79-STANDARD (REQ199)
FE13 40               (        forth.asm):04351                 fcc     '@'             ( addr -- data )
FE14 FE07             (        forth.asm):04352                 fdb     QMARK
FE16 C7               (        forth.asm):04353                 RFCS
FE17 BDE49D           (        forth.asm):04354 (7)             jsr     MIN1PST         At least one cell needs to be stacked up
FE1A ECD4             (        forth.asm):04355 (5+3)           ldd     [,u]
FE1C EDC4             (        forth.asm):04356 (5+0)           std     ,u              Returned through the data stack
FE1E 39               (        forth.asm):04357 (4)             rts
                      (        forth.asm):04358         
     FE1F             (        forth.asm):04359         REALEND equ     *
                      (        forth.asm):04360         
                      (        forth.asm):04361         *******************************************************************************
                      (        forth.asm):04362         * String literals.
                      (        forth.asm):04363         
                      (        forth.asm):04364         * Using CR+LF as it is Minicom's default.
                      (        forth.asm):04365         
                      (        forth.asm):04366         * Clear the screen, VT100 style.
FE1F 1B5B481B5B4A0D00 (        forth.asm):04367         CSVT100 fcb     $1B,'[','H',$1B,'[','J',CR,NUL
                      (        forth.asm):04368         
FE27 0D0A             (        forth.asm):04369         BOOTMSG fcb     CR,LF
                      (        forth.asm):04370                 IFNE    RTCFEAT
                      (        forth.asm):04371                 fcc     'Z79Forth 6309/R FORTH-79 Standard Sub-set'
                      (        forth.asm):04372                 ELSE
FE29 5A3739466F727468 (        forth.asm):04373                 fcc     'Z79Forth 6309/I FORTH-79 Standard Sub-set'
     20363330392F4920
     464F5254482D3739
     205374616E646172
     64205375622D7365
     74
                      (        forth.asm):04374                 ENDC                    RTCFEAT
FE52 0D0A             (        forth.asm):04375                 fcb     CR,LF
FE54 3230323230333132 (        forth.asm):04376                 fcc     '20220312 Copyright Francois Laagel (2019)'
     20436F7079726967
     6874204672616E63
     6F6973204C616167
     656C202832303139
     29
FE7D 0D0A0D0A00       (        forth.asm):04377                 fcb     CR,LF,CR,LF,NUL
                      (        forth.asm):04378         
FE82 52414D204F4B3A20 (        forth.asm):04379         RAMOKM  fcc     'RAM OK: 32 KB'
     3332204B42
FE8F 0D0A00           (        forth.asm):04380         CRLFSTR fcb     CR,LF,NUL
                      (        forth.asm):04381         
FE92 52414D2063686563 (        forth.asm):04382         RAMFM   fcc     'RAM check failed'
     6B206661696C6564
FEA2 0D0A00           (        forth.asm):04383                 fcb     CR,LF,NUL
                      (        forth.asm):04384         
                      (        forth.asm):04385                 IFNE    RTCFEAT
FEA5                  (        forth.asm):04386         RTPRESM fcc     'MC146818 RTC'
                      (        forth.asm):04387                 fcb     CR,LF,NUL
                      (        forth.asm):04388                 ENDC
                      (        forth.asm):04389         
                      (        forth.asm):04390                 IFEQ    CSSNTVE
FEA5 206F6B           (        forth.asm):04391         OKFEEDB fcc     ' ok'           As per GNU Forth's implementation...
                      (        forth.asm):04392                 ELSE
FEA8                  (        forth.asm):04393         OKFEEDB fcc     ' OK'
                      (        forth.asm):04394                 ENDC                    CSSNTVE
FEA8 0D0A00           (        forth.asm):04395                 fcb     CR,LF,NUL
                      (        forth.asm):04396         
                      (        forth.asm):04397         * Error messages for IODZHDL.
FEAB 496C6C6567616C20 (        forth.asm):04398         IOPERRM fcn     'Illegal opcode near '
     6F70636F6465206E
     6561722000
FEC0 4469766973696F6E (        forth.asm):04399         DV0ERRM fcn     'Division by 0 near '
     2062792030206E65
     61722000
                      (        forth.asm):04400         
FED4 4461746120737461 (        forth.asm):04401         ERRMTBL fcn     'Data stack overflow'   Error 0
     636B206F76657266
     6C6F7700
FEE8 4461746120737461 (        forth.asm):04402                 fcn     'Data stack underflow'  Error 1
     636B20756E646572
     666C6F7700
FEFD 3F00             (        forth.asm):04403                 fcn     '?'                     Error 2
FEFF 557365722041424F (        forth.asm):04404                 fcn     'User ABORT'            Error 3
     525400
FF0A 00               (        forth.asm):04405                 fcn     ''                      Error 4 (formerly "Division by zero")
FF0B 4D697373696E6720 (        forth.asm):04406                 fcn     'Missing word name'     Error 5
     776F7264206E616D
     6500
FF1D 496E636F72726563 (        forth.asm):04407                 fcn     'Incorrect STATE'       Error 6
     7420535441544500
FF2D 52657475726E2073 (        forth.asm):04408                 fcn     'Return stack overflow' Error 7
     7461636B206F7665
     72666C6F7700
FF43 52657475726E2073 (        forth.asm):04409                 fcn     'Return stack underflow' Error 8
     7461636B20756E64
     6572666C6F7700
FF5A 496C6C6567616C20 (        forth.asm):04410                 fcn     'Illegal construct'     Error 9
     636F6E7374727563
     7400
FF6C 417373657274696F (        forth.asm):04411                 fcn     'Assertion failed'      Error 10
     6E206661696C6564
     00
FF7D 522F4F20776F7264 (        forth.asm):04412                 fcn     'R/O word'              Error 11
     00
FF86 4D697373696E6720 (        forth.asm):04413                 fcn     'Missing delimiter'     Error 12
     64656C696D697465
     7200
FF98 496C6C6567616C20 (        forth.asm):04414                 fcn     'Illegal argument'      Error 13
     617267756D656E74
     00
FFA9 4E6F206D61746368 (        forth.asm):04415                 fcn     'No matching CREATE'    Error 14
     696E672043524541
     544500
FFBC 496E76616C696420 (        forth.asm):04416                 fcn     'Invalid BASE'          Error 15
     4241534500
FFC9 576F7264206E616D (        forth.asm):04417                 fcn     'Word name too long'    Error 16
     6520746F6F206C6F
     6E6700
FFDC 494F206572726F72 (        forth.asm):04418                 fcn     'IO error'              Error 17
     00
                      (        forth.asm):04419         
                      (        forth.asm):04420         * A-list used for numeric literal base prefixes.
FFE5 24               (        forth.asm):04421         BASALST fcc     '$'             Hexadecimal prefix
FFE6 10               (        forth.asm):04422                 fcb     16
FFE7 26               (        forth.asm):04423                 fcc     '&'             Decimal prefix
FFE8 0A               (        forth.asm):04424                 fcb     10
FFE9 23               (        forth.asm):04425                 fcc     '#'             Decimal prefix (an ANSI concession)
FFEA 0A               (        forth.asm):04426                 fcb     10
FFEB 25               (        forth.asm):04427                 fcc     '%'             Binary prefix
FFEC 02               (        forth.asm):04428                 fcb     2
FFED 40               (        forth.asm):04429                 fcc     '@'             Octal prefix
FFEE 08               (        forth.asm):04430                 fcb     8
FFEF 00               (        forth.asm):04431                 fcb     0               End of list marker
                      (        forth.asm):04432         
                      (        forth.asm):04433         * Under no circumstance should the following symbol be negative!
     0000             (        forth.asm):04434         AVL     equ     VECTBL-*        Available EEPROM space left
                      (        forth.asm):04435         
                      (        forth.asm):04436         *******************************************************************************
                      (        forth.asm):04437         * Interrupt vector table
                      (        forth.asm):04438                 org     VECTBL
                      (        forth.asm):04439         
FFF0 E000             (        forth.asm):04440                 fdb     IODZHDL         Illegal opcode/Division by zero trap
FFF2 E036             (        forth.asm):04441                 fdb     SWI3HDL         SWI 3 interrupt vector address
FFF4 E036             (        forth.asm):04442                 fdb     SWI2HDL         SWI 2 interrupt vector address
FFF6 E255             (        forth.asm):04443                 fdb     FIRQHDL         FIRQ interrupt vector address
FFF8 E036             (        forth.asm):04444                 fdb     IRQHDL          IRQ interrupt vector address
FFFA E036             (        forth.asm):04445                 fdb     SWIHDL          SWI interrupt vector address
FFFC E1DD             (        forth.asm):04446                 fdb     NMIHDL          NMI vector address
FFFE E037             (        forth.asm):04447                 fdb     RSTHDL          RESET vector address
                      (        forth.asm):04448         

Symbol Table:
[ G] _BS                              E312
[ G] _INTERP                          E0CA
[ G] ABORT                            F12E
[ G] ABS                              EFAB
[ G] AC8N1                            0014
[ G] ACCEPT                           F7BF
[ G] ACDIV16                          0001
[ G] ACIACTL                          D800
[ G] ACIADAT                          D801
[ G] ACIISVC                          0080
[ G] ACIOVRN                          0020
[ G] ACIRDRF                          0001
[ G] ACIRSET                          0043
[ G] ACIRTS0                          0095
[ G] ACIRTS1                          00D5
[ G] ACITDRE                          0002
[ G] ACQMOVP                          E5B0
[ G] ACQVMRA                          E5B3
[ G] ACRDINT                          0080
[ G] ACRST                            0003
[ G] ACRTS0                           0000
[ G] ACRTS1                           0040
[ G] ADDS                             E1BD
[ G] ADIV16                           E190
[ G] AGAIN                            EFE4
[ G] ALLOT                            FCE4
[ G] AND                              EE98
[ G] ARPICKN                          F0D3
[ G] AVL                              0000
[ G] BASALST                          FFE5
[ G] BASBKUP                          012E
[ G] BASE                             FB55
[ G] BCSOPC                           2503
[ G] BDICEND                          010C
[ G] BDIRTY                           0004
[ G] BEGIN                            EFD6
[ G] BFDISP                           0410
[ G] BIN                              FB63
[ G] BINUSE                           0001
[ G] BKCHAR                           F2A9
[ G] BKIN2PT                          E847
[ G] BKQUOT                           F17B
[ G] BKSLSH                           F35A
[ G] BL                               F6DC
[ G] BLANKS                           FD1E
[ G] BLK                              EA7F
[ G] BLKSIZ                           0400
[ G] BLOCK                            EA50
[ G] BLSTWAD                          010A
[ G] BMAPPD                           0002
[ G] BNEOPC                           2603
[ G] BOBLKNO                          0402
[ G] BOFLAGS                          0401
[ G] BOOTMSG                          FE27
[ G] BOTERM                           0400
[ G] BS                               0008
[ G] BSBFADR                          011C
[ G] BUF0                             0440
[ G] BUF1                             0850
[ G] BUFFER                           EA03
[ G] BYE                              F29F
[ G] CCOMMA                           FCBF
[ G] CCREGM                           E220
[ G] CELLS                            FD73
[ G] CF1BKRD                          E952
[ G] CF1BKWR                          E96D
[ G] CF1BPRE                          E935
[ G] CF1SRD                           E901
[ G] CF1SWR                           E920
[ G] CFANTHS                          E8AC
[ G] CFBASE                           C000
[ G] CFBSYB                           0080
[ G] CFCARDP                          013F
[ G] CFCHIGR                          C005
[ G] CFCLOWR                          C004
[ G] CFCMDIS                          E891
[ G] CFCMMIR                          0140
[ G] CFCOMDR                          C007
[ G] CFDATAR                          C000
[ G] CFDRHDR                          C006
[ G] CFDRQB                           0008
[ G] CFDRSEL                          E8A3
[ G] CFDSCB                           0010
[ G] CFDWFB                           0020
[ G] CFERRB                           0001
[ G] CFERRCD                          0141
[ G] CFERRCK                          E884
[ G] CFERROR                          C001
[ G] CFETCH                           FDF8
[ G] CFFEATR                          C001
[ G] CFIDDEV                          00EC
[ G] CFINIT                           E8CA
[ G] CFLAG                            0001
[ G] CFR1SRA                          E91F
[ G] CFRDY                            E86E
[ G] CFRDYB                           0040
[ G] CFRSCTS                          0020
[ G] CFSCNTR                          C002
[ G] CFSCSZ                           0200
[ G] CFSETFT                          00EF
[ G] CFSNUMR                          C003
[ G] CFSTATR                          C007
[ G] CFWAIT                           E866
[ G] CFWSCTS                          0030
[ G] CHAR                             F2B8
[ G] CHKNDPT                          E492
[ G] CHKRTS                           E155
[ G] CKBASE                           E3E1
[ G] CKBASRA                          E3F1
[ G] CKDPTRA                          E49D
[ G] CKNBPFX                          E3B6
[ G] CMDBFSZ                          0084
[ G] CMDBUF                           0318
[ G] CMDLNSZ                          012F
[ G] CMOVE                            FD4D
[ G] CMOVED                           FD2E
[ G] CMP2                             E59C
[ G] CMP2RA                           E59F
[ G] CMPCOMA                          F1C6
[ G] COM                              EEAC
[ G] COM0                             EEB3
[ G] COMMA                            FCD3
[ G] COMP                             E116
[ G] COMPC                            F1D8
[ G] COMPLRA                          E12A
[ G] COMPR                            F1F0
[ G] CONS                             EC25
[ G] CONTIND                          F86A
[ G] CONVERT                          F4EB
[ G] COUNT                            F755
[ G] CR                               000D
[ G] CREAT1                           EBCC
[ G] CREATE                           EBAA
[ G] CRLF                             F721
[ G] CRLFSTR                          FE8F
[ G] CSSNTVE                          0000
[ G] CSTORE                           FDD9
[ G] CSUMFLM                          ECC8
[ G] CSVT100                          FE1F
[ G] CURTOKL                          013A
[ G] CVISSGN                          0139
[ G] CVNSTR                           E449
[ G] CVT                              F5B0
[ G] CVT0                             F5B7
[ G] CVT1                             F5BF
[ G] CVTB                             F65F
[ G] CVTE                             F564
[ G] CVTFCN                           0136
[ G] DASHTR                           F76B
[ G] DDUMP                            FBB4
[ G] DEBUG                            0000
[ G] DECIMAL                          FB7F
[ G] DEFFLG                           013C
[ G] DEFFLM                           0040
[ G] DEPTH                            EB94
[ G] DEV0                             C000
[ G] DEV1                             C400
[ G] DEV2                             C800
[ G] DEV3                             CC00
[ G] DEV4                             D000
[ G] DEV5                             D400
[ G] DEV6                             D800
[ G] DEV7                             DC00
[ G] DICEND                           0108
[ G] DIFF                             EE38
[ G] DIV                              F9B5
[ G] DIV1                             F9BE
[ G] DIVFCN                           0133
[ G] DLESS                            F441
[ G] DMINUS                           F41B
[ G] DNEG                             F3F8
[ G] DO                               ED29
[ G] DOES                             EBD4
[ G] DOESEX                           EBE3
[ G] DOEX                             ED3A
[ G] DOT                              F66B
[ G] DOTR                             F695
[ G] DOTR0                            F69F
[ G] DOTTICK                          FB9D
[ G] DPLUS                            F3DF
[ G] DPOPRA                           E80F
[ G] DPREGM                           E22C
[ G] DPSHRA                           E800
[ G] DREGM                            E224
[ G] DROP                             FC2B
[ G] DUP                              FC1C
[ G] DV0ERRM                          FEC0
[ G] DZEQ                             F434
[ G] EBUFS                            E988
[ G] ELSE                             EDEC
[ G] EMIT                             F8C4
[ G] EMPT1B                           E38B
[ G] EMPTYB                           E383
[ G] EMXASXT                          E169
[ G] END                              F04D
[ G] EQ                               EE1F
[ G] ERRHD1                           E775
[ G] ERRHDLR                          E772
[ G] ERRMTBL                          FED4
[ G] ERRPCK                           FC62
[ G] ETX                              0003
[ G] EXCT                             F285
[ G] EXIT                             F002
[ G] EXPCT1                           F7B0
[ G] EXPECT                           F7A6
[ G] F83DIVF                          0134
[ G] FDCTSYM                          E5BE
[ G] FDIVADJ                          F9F2
[ G] FETCH                            FE12
[ G] FFLAG                            0040
[ G] FILL                             FCF7
[ G] FILL1                            FD04
[ G] FIND                             F142
[ G] FINDSYM                          E632
[ G] FIRQHDL                          E255
[ G] FLUSH                            E9DD
[ G] FNDPLD                           0110
[ G] FORGET                           F238
[ G] FORTHIN                          E361
[ G] GETCH                            E2BC
[ G] GETS                             E31E
[ G] HDMP2                            E1AE
[ G] HDMP4                            E195
[ G] HDRCSUM                          ECBC
[ G] HDRSKIP                          ECB2
[ G] HERE                             FD92
[ G] HEX                              FB90
[ G] HEX1D                            E17C
[ G] HEXBFSZ                          0050
[ G] HEXBUF                           039C
[ G] HOLD                             F594
[ G] HT                               0009
[ G] HVNMI                            0001
[ G] HVNMI2                           0000
[ G] ICHECK                           ECDF
[ G] IF                               EDB3
[ G] IFEX                             EDD3
[ G] IFLAG                            0010
[ G] ILLOPC                           00C7
[ G] IMDFLG                           013B
[ G] IMDFLM                           0080
[ G] IMMED                            EC6C
[ G] IMMED1                           EC7B
[ G] INDEX                            EAC1
[ G] INDI                             F0CD
[ G] INDIP                            F0F1
[ G] INDJ                             F0FB
[ G] INDJP                            F104
[ G] INDK                             F10E
[ G] INF                              EF6A
[ G] INIT                             E047
[ G] INSBPAD                          F64C
[ G] INTERP                           E0B2
[ G] INTISRA                          E106
[ G] INTRPRA                          E111
[ G] INVERT                           EEBF
[ G] IODZHDL                          E000
[ G] IOERR                            E91A
[ G] IOPERRM                          FEAB
[ G] IOSTRT                           C000
[ G] IRDPTH                           0131
[ G] IRQHDL                           E036
[ G] ISDBLF                           0138
[ G] ISNEGF                           0137
[ G] JMPOPC                           007E
[ G] JSRLAST                          0114
[ G] JSROPC                           00BD
[ G] KEY                              F8B2
[ G] KEYP                             F89F
[ G] LAST                             FD85
[ G] LBRACK                           F173
[ G] LDXOPC                           008E
[ G] LEAVE                            F0B8
[ G] LF                               000A
[ G] LINE                             EAA6
[ G] LIST                             EB1F
[ G] LITER                            E580
[ G] LITERAL                          EC01
[ G] LOAD                             F7F9
[ G] LOAD1                            F80A
[ G] LOCWRT                           E51F
[ G] LOOP                             ED43
[ G] LOOP1                            ED4E
[ G] LOOPEX                           ED62
[ G] LPAR                             F322
[ G] LSTWAD                           0106
[ G] LWMNRA                           E535
[ G] MAX                              EF79
[ G] MDIV                             FA0C
[ G] MILLIS                           F884
[ G] MILLIS1                          F893
[ G] MIN                              EF92
[ G] MIN1PST                          E49D
[ G] MIN2PST                          E4A2
[ G] MIN3PST                          E4A7
[ G] MIN4PST                          E4AC
[ G] MINTLRA                          E0C8
[ G] MINUS                            F908
[ G] MINUSST                          FDC8
[ G] MOD                              F9FF
[ G] MONFLM                           0020
[ G] MONITOR                          EC95
[ G] MORE                             E0E2
[ G] MOVE                             FD5D
[ G] MROT                             FCB3
[ G] MRUBUFA                          011A
[ G] MSLCNT                           031A
[ G] MULT                             F982
[ G] NAK                              0015
[ G] NBCTFB0                          013D
[ G] NCLR                             EB78
[ G] NDCTWKS                          E658
[ G] NEGATE                           EFC2
[ G] NIP                              FC11
[ G] NMCVCRA                          E13C
[ G] NMCVIRA                          E0E0
[ G] NMI2DM                           E1C8
[ G] NMI4DM                           E1CE
[ G] NMIDML                           E1D4
[ G] NMIHDL                           E1DD
[ G] NOT                              EF17
[ G] NPOP                             E801
[ G] NPUSH                            E7F3
[ G] NSTBOT                           0298
[ G] NSTKSZ                           00C0
[ G] NSTTOP                           01D8
[ G] NUL                              0000
[ G] NULP                             EEFF
[ G] NUMCVRA                          E448
[ G] NUMCVT                           E3F1
[ G] NXTBLK                           F84F
[ G] NXTBLK1                          F85A
[ G] OCTAL                            FB70
[ G] OKFEEDB                          FEA5
[ G] ONEL                             F944
[ G] ONEM                             F919
[ G] ONEP                             F8E7
[ G] ONEPST                           FDB3
[ G] OR                               EE85
[ G] OVER                             FC7C
[ G] PAD                              F72A
[ G] PADBSZ                           0051
[ G] PADBUF                           0186
[ G] PAGE                             F713
[ G] PAYLOAD                          FA64
[ G] PCREGM                           E23D
[ G] PICK                             FC4A
[ G] PICK1                            FC55
[ G] PLOAD                            010E
[ G] PLOOP                            ED67
[ G] PLOOPEX                          ED75
[ G] PLOPEX1                          ED78
[ G] PLUS                             F8D6
[ G] PLUSST                           FD9F
[ G] PLUSST1                          FDAE
[ G] POSTPON                          F187
[ G] pragma                           0000
[ G] PRBLKIN                          E745
[ G] PSTR                             F378
[ G] PTOP0                            F674
[ G] PUTCH                            E2E8
[ G] PUTCR                            E308
[ G] PUTS                             E2FB
[ G] QMARK                            FE07
[ G] QRYDUP                           FBEF
[ G] QUIT                             F117
[ G] RAMCHK                           E057
[ G] RAMFAIL                          E069
[ G] RAMFM                            FE92
[SG] RAMFTCH                          0C65
[SG] RAMFTCH                          0C64
[ G] RAMOK                            E07B
[ G] RAMOKM                           FE82
[ G] RAMSIZE                          8000
[ G] RAMSTRT                          0000
[ G] RBRACK                           F169
[ G] RCLR                             EB84
[ G] RDEPTH                           0130
[ G] REALEND                          FE1F
[ G] RECADDR                          0112
[ G] RECURSE                          F228
[SG] RELFEAT                          0001
[ G] REPEAT                           F081
[ G] RFETCH                           F0E9
[ G] RFROM                            F0A0
[ G] ROLL                             FC89
[ G] ROLL1                            FC94
[ G] ROMSTRT                          E000
[ G] ROT                              FCA7
[ G] RPOP                             E82E
[ G] RPOPRA                           E847
[ G] RPSHRA                           E82D
[ G] RPUSH                            E810
[ G] RSBSPFX                          E3DA
[ G] RSP                              0100
[ G] RSTBOT                           0318
[ G] RSTHDL                           E037
[ G] RSTKSZ                           0080
[ G] RSTRCT                           EC85
[ G] RSTTOP                           0298
[ G] RTADV32                          0020
[ G] RTADVRS                          0070
[ G] RTARS64                          000A
[ G] RTAS                             D400
[ G] RTAUIP                           0080
[ G] RTB24                            0002
[ G] RTBDM                            0004
[ G] RTBPIE                           0040
[ G] RTBSET                           0080
[ G] RTCAVL                           013E
[ G] RTCFEAT                          0000
[ G] RTCFTCH                          EB06
[ G] RTCPF                            0040
[ G] RTCSTOR                          EB14
[ G] RTDS                             D401
[ G] RTODOM                           0007
[ G] RTODOW                           0006
[ G] RTOHOUR                          0004
[ G] RTOHRA                           0005
[ G] RTOMIN                           0002
[ G] RTOMINA                          0003
[ G] RTOMON                           0008
[ G] RTOPRES                          003F
[ G] RTOREGA                          000A
[ G] RTOREGB                          000B
[ G] RTOREGC                          000C
[ G] RTOREGD                          000D
[ G] RTOSEC                           0000
[ G] RTOSECA                          0001
[ G] RTOUMB                           000E
[ G] RTOYEAR                          0009
[ G] RTSOPC                           0039
[ G] RTSREMV                          0132
[ G] RTUMSZ                           0032
[ G] SAVBUF                           E99C
[ G] SBDROPC                          012C
[ G] SCNETOK                          E3A4
[ G] SCNSTOK                          E396
[ G] SCR                              EA99
[ G] SERBCNT                          0144
[ G] SERBDEQ                          0143
[ G] SERBENQ                          0142
[ G] SERBSZ                           0040
[ G] SERBUF                           0146
[ G] SHARPS                           F5A4
[ G] SHIFT                            F95A
[ G] SIGN                             F57D
[ G] SINFEQ                           EE52
[ G] SLEN                             E246
[ G] SOURCE                           F33C
[ G] SP                               0020
[ G] SPACE                            F6E8
[ G] SPACES                           F6F6
[ G] SQUOTE                           F38D
[ G] SREGM                            E242
[ G] SSDFEAT                          0001
[ G] STATE                            FB46
[ G] STOD                             EB5E
[ G] STORE                            FDE9
[ G] STRSL1                           FA22
[ G] STRSLMD                          FA4D
[ G] STRSLSH                          FA18
[ G] STSLFCN                          0135
[ G] SUP                              EF5B
[ G] SWAP                             FC36
[ G] SWDIC                            E4B1
[ G] SWI2HDL                          E036
[ G] SWI3HDL                          E036
[ G] SWIHDL                           E036
[ G] SYSSTK                           FA5A
[ G] TBUFF                            03EC
[ G] TBUFSZ                           0048
[ G] TERPRET                          F7CF
[ G] THEEND                           FE12
[ G] THEN                             EE0D
[ G] THRU                             F82D
[ G] TICKS                            EAF5
[ G] TIKSHI                           0128
[ G] TIKSLOW                          012A
[ G] TOIN                             EA8C
[ G] TOKENEP                          0104
[ G] TOKENSP                          0102
[ G] TOR                              F0AC
[ G] TUCK                             FC05
[ G] TWODIV                           F9A5
[ G] TWODROP                          F49E
[ G] TWODUP                           F4AD
[ G] TWOFTCH                          F4D7
[ G] TWOL                             F94F
[ G] TWOM                             F929
[ G] TWOOVER                          F468
[ G] TWOP                             F8F7
[ G] TWOSTOR                          F4C5
[ G] TWOSWAP                          F481
[ G] TWOTIM                           F995
[ G] TYPE                             F737
[ G] U2INFRD                          E177
[ G] UBASE                            011E
[ G] UBLK                             0124
[ G] UDOT                             F68B
[ G] UDOTR                            F6D1
[ G] UINF                             EF30
[ G] UNLESS                           EDDA
[ G] UNLOOP                           EDA3
[ G] UNTIL                            F024
[ G] UPDATE                           E9E8
[ G] UREGM                            E239
[ G] USCR                             0126
[ G] USTATE                           0120
[ G] USUP                             EF20
[ G] UTOIN                            0122
[ G] VARCON                           E592
[ G] VARCON1                          E594
[ G] VARCON2                          E597
[ G] VARI                             EC47
[ G] VARSPC                           0100
[ G] VECTBL                           FFF0
[ G] VLIST                            FA74
[ G] VLPRVEP                          0116
[ G] VLPRVHD                          0118
[ G] WBIFDRT                          E9B4
[ G] WDICSPC                          0C60
[ G] WHILE                            F056
[ G] WITHIN                           EF40
[ G] WORD                             F2DF
[ G] WREGM                            E228
[ G] WRLNMSK                          001F
[ G] WTOOLNG                          E552
[ G] XMITOK                           0145
[ G] XOFF                             0013
[ G] XON                              0011
[ G] XOR                              EE6E
[ G] XOR1                             EE80
[ G] XREGM                            E231
[ G] YREGM                            E235
[ G] ZEROL                            F93A
[ G] ZFLAG                            0004
[ G] ZGREAT                           EECB
[ G] ZLESS                            EEE5
