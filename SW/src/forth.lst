                      (        forth.asm):00001         * 6309 Forth based on my 1984/07/16 TRS-80 Model 1 level II ROM implementation.
                      (        forth.asm):00002         *
                      (        forth.asm):00003         * This work is dedicated to Alain Pinaud, author of "Programmer en Forth"
                      (        forth.asm):00004         * published by Editions du P.S.I. in 1983--i.e. my virtual mentor in the field.
                      (        forth.asm):00005         * Special thanks go William Astle for his fantastic LW Tools utility set and
                      (        forth.asm):00006         * to Robert Lipe for his advice on serial line handling. Apache subversion
                      (        forth.asm):00007         * and the sdiff utility also were on my side all the time.
                      (        forth.asm):00008         *
                      (        forth.asm):00009         * Also credited for their help: Justin Poirier (seminal HW design), Daniel
                      (        forth.asm):00010         * Tufvesson (CompactFlash interface), Peter Forth (FB alias), Paul E. Bennett
                      (        forth.asm):00011         * and Michel Jean.
                      (        forth.asm):00012         *
                      (        forth.asm):00013         * This is a native Forth. Not a threaded interpretive implementation.
                      (        forth.asm):00014         * Worth noticing is the fact that the return stack does not hold return
                      (        forth.asm):00015         * addresses at all. All what is stored there is loop indexes and control
                      (        forth.asm):00016         * structures jump addresses. Actual return addresses are kept in the system
                      (        forth.asm):00017         * stack. All in all, this is the result of the work of a 19 year old guy,
                      (        forth.asm):00018         * heavily revisited 35 years later. Some quirks remain that prevent me
                      (        forth.asm):00019         * from offering the full required set--not to mention the choice of using
                      (        forth.asm):00020         * an 8K EEPROM. The downside of this implementation is that the generated
                      (        forth.asm):00021         * code is about 30% larger than a threaded interpretive implementation
                      (        forth.asm):00022         * would be. So it goes...
                      (        forth.asm):00023         *
                      (        forth.asm):00024         * The code generated is limited to a very small instruction set:
                      (        forth.asm):00025         *
                      (        forth.asm):00026         * LDXOPC        $8E     LDX (immediate)
                      (        forth.asm):00027         * JMPOPC        $7E     JMP (extended)
                      (        forth.asm):00028         * JSROPC        $BD     JSR (extended)
                      (        forth.asm):00029         * RTSOPC        $39     RTS (inherent)
                      (        forth.asm):00030         * BCSOPC        $2503   BCS *+5 (relative) Used in LOOP, +LOOP
                      (        forth.asm):00031         * BNEOPC        $2603   BNE *+5 (relative) Used in IF, UNTIL
                      (        forth.asm):00032         *
                      (        forth.asm):00033         * On error, the system stack pointer is reset. The return stack also is
                      (        forth.asm):00034         * but the data stack will be in the same state as when the error occurred.
                      (        forth.asm):00035         * ABORT and QUIT enforce their own 79-STANDARD behaviour.
                      (        forth.asm):00036         *
                      (        forth.asm):00037         * The 79-STANDARD Forth specification can be downloaded from
                      (        forth.asm):00038         * https://www.complang.tuwien.ac.at/forth/fth79std/FORTH-79.TXT
                      (        forth.asm):00039         *
                      (        forth.asm):00040         * Additionally, this implementation provides a few FORTH-83 words. Those
                      (        forth.asm):00041         * words are CMOVE> and RECURSE. See
                      (        forth.asm):00042         * http://forth.sourceforge.net/standard/fst83/FORTH-83.PRN
                      (        forth.asm):00043         *
                      (        forth.asm):00044         * \ ['] [CHAR] .S ACCEPT CELLS CHAR COMPILE, INVERT KEY? NIP POSTPONE S>D S"
                      (        forth.asm):00045         * SOURCE TUCK U> * UNLOOP and WITHIN have been borrowed from the ANSI draft 6
                      (        forth.asm):00046         * specification. See http://www.forth.org/svfig/Win32Forth/DPANS94.txt
                      (        forth.asm):00047         *
                      (        forth.asm):00048         * RESTRICT is non-standard. It comes from GNU Forth (VolksForth). The " OK"
                      (        forth.asm):00049         * non-prompt string also does, by the way. Thanks to Anton Ertl for his terse
                      (        forth.asm):00050         * yet valuable input.
                      (        forth.asm):00051         *
                      (        forth.asm):00052         * .' (dot-tick) is non-standard. It comes from SwiftForth. It will be supported
                      (        forth.asm):00053         * if symbolic stack dump has not been disabled (see SSDFEAT in constants.asm).
                      (        forth.asm):00054         *
                      (        forth.asm):00055         * MONITOR and ICHECK are also non-standard. They are intended to maintain and
                      (        forth.asm):00056         * verify the integrity of a checksum of the code section of RAM resident
                      (        forth.asm):00057         * words, with the exception of VARIABLEs and CREATEd words. CREATEd words,
                      (        forth.asm):00058         * if subject to the MONITOR treatment will also carry a code section
                      (        forth.asm):00059         * checksum, although this is not the default behaviour. The checksum will
                      (        forth.asm):00060         * consist in an extra byte added to every word's header. MONITOR and ICHECK
                      (        forth.asm):00061         * will only be available if the reliability feature has not been disabled
                      (        forth.asm):00062         * (see RELFEAT in constants.asm).
                      (        forth.asm):00063         *
                      (        forth.asm):00064         * Forth source code portability note:
                      (        forth.asm):00065         * Because Z79Forth does not use the return stack to store return addresses,
                      (        forth.asm):00066         * it makes it quite easy to write code that is not readily portable to classic
                      (        forth.asm):00067         * threaded interpretive implementations. The resulting code will be simpler but
                      (        forth.asm):00068         * portability will be limited.
                      (        forth.asm):00069         *
                      (        forth.asm):00070         * Miscellaneous notes: RA stands for return address; EP for entry point.
                      (        forth.asm):00071         * CF is a shortcut for CompactFlash. TOS means top of the data/normal stack.
                      (        forth.asm):00072         * Occasionally, CFA is used for code field address which, in this
                      (        forth.asm):00073         * implementation, is a synonym for compilation address. XT means execution
                      (        forth.asm):00074         * token--the ANSI term for a compilation address. MSC stands for most
                      (        forth.asm):00075         * significant cell; LSC for least significant cell.
                      (        forth.asm):00076         *
                      (        forth.asm):00077         * The complete guide to the HD6309 extended instruction set can be found at:
                      (        forth.asm):00078         * https://cyberabi.ipower.com/Downloads/The_6309_Book.pdf. For convenience,
                      (        forth.asm):00079         * and with the author's explicit agreement, this document has been included
                      (        forth.asm):00080         * in this distribution. This is recommended reading for anyone altering this
                      (        forth.asm):00081         * code or trying to make some sense of it!!!
                      (        forth.asm):00082         *
                      (        forth.asm):00083         * This whole effort started out as a porting endeavour and ended up being a
                      (        forth.asm):00084         * substantial rewrite, trying to take advantage of the features of the 6309
                      (        forth.asm):00085         * as much as possible. The primary goals of this implementation are:
                      (        forth.asm):00086         * reliability, performance and code compactness. A number of bugs in the
                      (        forth.asm):00087         * original code have been fixed--some remain for sure!
                      (        forth.asm):00088         *
                      (        forth.asm):00089         * Obligatory literary reference:
                      (        forth.asm):00090         * "The paper is very heavy going, and I should never have read it, had I not
                      (        forth.asm):00091         * written it myself." J. E. Littlewood (1885-1977).
                      (        forth.asm):00092         *
                      (        forth.asm):00093         * The original soundtrack for this work is available at:
                      (        forth.asm):00094         * https://youtu.be/YqXZtGyFyDo?t=4023 (J.S. Bach BWV 1080, contrapunctus 14).
                      (        forth.asm):00095         
0000                  (        forth.asm):00096         pragma  opt cd,operandsizewarning
                      (        forth.asm):00097         
                      (        forth.asm):00098                 include constants.asm
                      (    constants.asm):00001         * Begin tunable parameters section.
                      (    constants.asm):00002         
     0000             (    constants.asm):00003         CSSNTVE equ     0               Words and HEX numbers are case sensitive if NZ
     0001             (    constants.asm):00004         SSDFEAT equ     1               Set to 1 to enable the symbolic stack dump feat.
     0001             (    constants.asm):00005         RELFEAT equ     1               Set to 1 to enable the reliability feature
                      (    constants.asm):00006         *                               Caution: when this is enabled, you can no
                      (    constants.asm):00007         *                               longer fit a DEBUG image into an 8 KB EEPROM
     0000             (    constants.asm):00008         DEBUG   equ     0               Enforce assertions and miscellaneous checks
     0000             (    constants.asm):00009         HVCONV  equ     0               Include CONVERT in the default dictionary
                      (    constants.asm):00010         * Loop count for MS. This is busy waiting, so we depend on the CPU clock speed.
     031A             (    constants.asm):00011         MSLCNT  equ     794             at 4 MHz native mode
                      (    constants.asm):00012         *MSLCNT equ     994             at 5 MHz native mode
                      (    constants.asm):00013         
                      (    constants.asm):00014         * End tunable parameters section.
                      (    constants.asm):00015         
                      (    constants.asm):00016         * Memory map.
     0000             (    constants.asm):00017         RAMSTRT equ     $0000
     8000             (    constants.asm):00018         RAMSIZE equ     $8000
     C000             (    constants.asm):00019         IOSTRT  equ     $C000
     E000             (    constants.asm):00020         ROMSTRT equ     $E000
     FFF0             (    constants.asm):00021         VECTBL  equ     $FFF0
                      (    constants.asm):00022         
                      (    constants.asm):00023         * Base address for global variables (direct page addressed).
     0100             (    constants.asm):00024         VARSPC  equ     $100
                      (    constants.asm):00025         
                      (    constants.asm):00026         * The 74HCT138 (U7) IO address decoder maps one 1 KB area per usable device.
     C000             (    constants.asm):00027         DEV0    equ     $C000           Compact Flash memory module
     C400             (    constants.asm):00028         DEV1    equ     $C400
     C800             (    constants.asm):00029         DEV2    equ     $C800
     CC00             (    constants.asm):00030         DEV3    equ     $CC00
     D000             (    constants.asm):00031         DEV4    equ     $D000
     D400             (    constants.asm):00032         DEV5    equ     $D400
     D800             (    constants.asm):00033         DEV6    equ     $D800           HD63B50 unit 0
     DC00             (    constants.asm):00034         DEV7    equ     $DC00
                      (    constants.asm):00035         
     D800             (    constants.asm):00036         ACIACTL equ     DEV6
     D801             (    constants.asm):00037         ACIADAT equ     DEV6+1
                      (    constants.asm):00038         
                      (    constants.asm):00039         * ACIA control register bits.
     0003             (    constants.asm):00040         ACRST   equ     %00000011       ACIA master reset
                      (    constants.asm):00041         
                      (    constants.asm):00042         * 1.84320 MHz Y1: 115200 bps in the DIRect path, 38400 bps in the DIV3 path
     0001             (    constants.asm):00043         ACDIV16 equ     %00000001       ACIA div 16
                      (    constants.asm):00044         
     0014             (    constants.asm):00045         AC8N1   equ     %00010100       ACIA 8N1
     0000             (    constants.asm):00046         ACRTS0  equ     %00000000       ACIA RTS# low
     0040             (    constants.asm):00047         ACRTS1  equ     %01000000       ACIA RTS# high
     0080             (    constants.asm):00048         ACRDINT equ     %10000000       IRQ on RDRF
                      (    constants.asm):00049         
     0043             (    constants.asm):00050         ACIRSET equ     ACRTS1|ACRST
     00D5             (    constants.asm):00051         ACIRTS1 equ     ACRTS1|ACRDINT|AC8N1|ACDIV16
     0095             (    constants.asm):00052         ACIRTS0 equ     ACRTS0|ACRDINT|AC8N1|ACDIV16
                      (    constants.asm):00053         
                      (    constants.asm):00054         * ACIA status register bits.
     0001             (    constants.asm):00055         ACIRDRF equ     %00000001       Receive data register full
     0002             (    constants.asm):00056         ACITDRE equ     %00000010       Transmit data register empty
     0080             (    constants.asm):00057         ACIISVC equ     %10000000       Interrupt needs servicing
                      (    constants.asm):00058         
                      (    constants.asm):00059         * Compact Flash parameters.
     C000             (    constants.asm):00060         CFBASE  equ     DEV0
     C000             (    constants.asm):00061         CFDATAR equ     CFBASE          R/W data register
     C001             (    constants.asm):00062         CFERROR equ     CFBASE+1        RO error register
     C001             (    constants.asm):00063         CFFEATR equ     CFBASE+1        WO features register
     C002             (    constants.asm):00064         CFSCNTR equ     CFBASE+2        R/W sector count register
     C003             (    constants.asm):00065         CFSNUMR equ     CFBASE+3        R/W sector number register
     C004             (    constants.asm):00066         CFCLOWR equ     CFBASE+4        R/W cylinder low register
     C005             (    constants.asm):00067         CFCHIGR equ     CFBASE+5        R/W cylinder high register
     C006             (    constants.asm):00068         CFDRHDR equ     CFBASE+6        R/W drive/head register
     C007             (    constants.asm):00069         CFSTATR equ     CFBASE+7        RO status register
     C007             (    constants.asm):00070         CFCOMDR equ     CFBASE+7        WO command register
                      (    constants.asm):00071         
                      (    constants.asm):00072         * CF status bits.
     0080             (    constants.asm):00073         CFBSYB  equ     %10000000       BSY status bit
     0040             (    constants.asm):00074         CFRDYB  equ     %01000000       RDY status bit
     0020             (    constants.asm):00075         CFDWFB  equ     %00100000       DWF status bit (not used)
     0010             (    constants.asm):00076         CFDSCB  equ     %00010000       DSC status bit (not used)
     0008             (    constants.asm):00077         CFDRQB  equ     %00001000       DRQ status bit
     0001             (    constants.asm):00078         CFERRB  equ     %00000001       ERR status bit
                      (    constants.asm):00079         
     0200             (    constants.asm):00080         CFSCSZ  equ     $200            Compact Flash (IDE) sector size
                      (    constants.asm):00081         
                      (    constants.asm):00082         * CF commands.
     00EC             (    constants.asm):00083         CFIDDEV equ     $EC             Identify Device
     00EF             (    constants.asm):00084         CFSETFT equ     $EF             Set Feature
     0020             (    constants.asm):00085         CFRSCTS equ     $20             Read Sectors
     0030             (    constants.asm):00086         CFWSCTS equ     $30             Write Sectors
                      (    constants.asm):00087         
                      (    constants.asm):00088         * Buffer in-memory structure:
                      (    constants.asm):00089         * data: 1024 bytes.
                      (    constants.asm):00090         * terminator: 1 byte set to 0.
                      (    constants.asm):00091         * flags: 1 byte.
                      (    constants.asm):00092         * blknum: 2 bytes.
     0001             (    constants.asm):00093         BINUSE  equ     1               Buffer is allocated (the blknum field is valid)
     0002             (    constants.asm):00094         BMAPPD  equ     2               Block has been read from the CF device
     0004             (    constants.asm):00095         BDIRTY  equ     4               Block has been marked for update
     0400             (    constants.asm):00096         BLKSIZ  equ     2*CFSCSZ        Block size is 2 CF sectors (1 KB)
                      (    constants.asm):00097         * Buffer field offsets.
     0400             (    constants.asm):00098         BOTERM  equ     BLKSIZ          Base buffer to the 'terminator' field offset
     0401             (    constants.asm):00099         BOFLAGS equ     BLKSIZ+1        Base buffer to the 'flag' field offset
     0402             (    constants.asm):00100         BOBLKNO equ     BLKSIZ+2        Base buffer to the 'blknum' field offset
                      (    constants.asm):00101         
     0410             (    constants.asm):00102         BFDISP  equ     BUF1-BUF0       Offset between resident buffers
                      (    constants.asm):00103         
                      (    constants.asm):00104         * ASCII trivia.
     0000             (    constants.asm):00105         NUL     equ     0               End of string marker
     0003             (    constants.asm):00106         ETX     equ     3               Control-C (intr)
     0008             (    constants.asm):00107         BS      equ     8               Backspace
     0009             (    constants.asm):00108         HT      equ     9               Horizontal tab
     000A             (    constants.asm):00109         LF      equ     $0A             Aka new line
     000D             (    constants.asm):00110         CR      equ     $0D             Carriage return
     0015             (    constants.asm):00111         NAK     equ     $15             Control-U (kill)
     0020             (    constants.asm):00112         SP      equ     $20             Aka BL in Forth
     0013             (    constants.asm):00113         XOFF    equ     $13             Aka DC3
     0011             (    constants.asm):00114         XON     equ     $11             Aka DC1
                      (    constants.asm):00115         
                      (    constants.asm):00116         * Stack sizes.
     00C0             (    constants.asm):00117         NSTKSZ  equ     192             Expressed in bytes. Now only limited by RAM size
     0080             (    constants.asm):00118         RSTKSZ  equ     128             Expressed in bytes
                      (    constants.asm):00119         
                      (    constants.asm):00120         * Buffer sizes.
     0084             (    constants.asm):00121         CMDBFSZ equ     132             Command line entry buffer
     0050             (    constants.asm):00122         HEXBFSZ equ     80
     0048             (    constants.asm):00123         TBUFSZ  equ     72              Used by VLIST to print word name, CVNSTR
                      (    constants.asm):00124         *                               And DUMP, at offset 69
     0051             (    constants.asm):00125         PADBSZ  equ     1+80            79-STANDARD mandates a minimum of 64 bytes
     0040             (    constants.asm):00126         SERBSZ  equ     64              Serial buffer size. Needs to be a power of 2
                      (    constants.asm):00127         
                      (    constants.asm):00128         * Dictionary flag masks.
     0080             (    constants.asm):00129         IMDFLM  equ     $80             Immediate flag mask
     0040             (    constants.asm):00130         DEFFLM  equ     $40             Compilation only flag mask
                      (    constants.asm):00131                 IFNE    RELFEAT
     0020             (    constants.asm):00132         MONFLM  equ     $20             Monitored flag mask. This indicates that the
                      (    constants.asm):00133         *                               word to which it relates might be checked for
                      (    constants.asm):00134         *                               integrity. This applies by default to all words
                      (    constants.asm):00135         *                               defined with : and all constants. It might
                      (    constants.asm):00136         *                               also apply to any other CREATEd object by
                      (    constants.asm):00137         *                               resorting to the MONITOR word. Using MONITOR
                      (    constants.asm):00138         *                               on variable word contents is guaranteed to
                      (    constants.asm):00139         *                               raise ICHECK's attention.
                      (    constants.asm):00140                 ENDC
                      (    constants.asm):00141         
     001F             (    constants.asm):00142         WRLNMSK equ     $1F             31 character is the maximum word length
                      (    constants.asm):00143         
                      (    constants.asm):00144         * 6309 opcodes.
     008E             (    constants.asm):00145         LDXOPC  equ     $8E             LDX (immediate)
     007E             (    constants.asm):00146         JMPOPC  equ     $7E             JMP (extended)
     00BD             (    constants.asm):00147         JSROPC  equ     $BD             JSR (extended)
     0039             (    constants.asm):00148         RTSOPC  equ     $39             RTS (inherent)
     2503             (    constants.asm):00149         BCSOPC  equ     $2503           BCS *+5 (relative)
     2603             (    constants.asm):00150         BNEOPC  equ     $2603           BNE *+5 (relative)
     00C7             (    constants.asm):00151         ILLOPC  equ     $C7             An illegal operation code. Meant to raise a trap
                      (    constants.asm):00152         
     0001             (    constants.asm):00153         CFLAG   equ     1               CC bit 0 (C)
     0004             (    constants.asm):00154         ZFLAG   equ     4               CC bit 2 (Z)
     0008             (    constants.asm):00155         NFLAG   equ     8               CC bit 3 (N)
     0040             (    constants.asm):00156         FFLAG   equ     $40             CC bit 6 (F)
                      (    constants.asm):00157         
                      (    constants.asm):00158         * RAM based execution token for @.
     0C54             (    constants.asm):00159         RAMFTCH set     WDICSPC+4       Dictionary header overhead is word's length + 3
                      (    constants.asm):00160                 IFNE    RELFEAT         The reliability features adds one byte to the
     0C55             (    constants.asm):00161         RAMFTCH set     WDICSPC+5       header: a checksum.
                      (    constants.asm):00162                 ENDC
                      (    constants.asm):00163         
                      (        forth.asm):00099         
                      (        forth.asm):00100         * Unchecked NPUSH. This is for situations in which there is absolutely no
                      (        forth.asm):00101         * chance of overflow. For instance, in case we just popped 2 cells and push
                      (        forth.asm):00102         * back one or two.
0000                  (        forth.asm):00103         UCNPUSH MACRO   NOEXPAND
                      (        forth.asm):00104                 pshu    x
                      (        forth.asm):00105                 ENDM
                      (        forth.asm):00106         
                      (        forth.asm):00107         * Unchecked NPOP. To be used only after trusted words have been invoked, i.e.
                      (        forth.asm):00108         * when one is positively sure that the data stack contains at least one cell.
0000                  (        forth.asm):00109         UCNPOP  MACRO   NOEXPAND
                      (        forth.asm):00110                 pulu    x
                      (        forth.asm):00111                 ENDM
                      (        forth.asm):00112         
                      (        forth.asm):00113         * Make sure minimum data stack requirements are satisfied upon word entry.
                      (        forth.asm):00114         * The requirement is expressed in cell size--2 bytes on the 6309.
                      (        forth.asm):00115         * \1 specifies the required number of cells.
0000                  (        forth.asm):00116         MINDREQ MACRO   NOEXPAND
                      (        forth.asm):00117                 ldd     #NSTBOT-(\1*2)  Cell count one expects to be stacked up
                      (        forth.asm):00118                 bra     CHKNDPT         No return if the condition is not met
                      (        forth.asm):00119                 ENDM
                      (        forth.asm):00120         
                      (        forth.asm):00121         * Reliability feature support: execution tokens.
                      (        forth.asm):00122         * \1 has the opcode we want to emit.
                      (        forth.asm):00123         * \2 has the execution token address, as if the header overhead always
                      (        forth.asm):00124         * was 3 bytes.
0000                  (        forth.asm):00125         RFXT    MACRO   NOEXPAND
                      (        forth.asm):00126                 IFNE    RELFEAT
                      (        forth.asm):00127                 \1      \2+1
                      (        forth.asm):00128                 ELSE
                      (        forth.asm):00129                 \1      \2
                      (        forth.asm):00130                 ENDC
                      (        forth.asm):00131                 ENDM
                      (        forth.asm):00132         
                      (        forth.asm):00133         * Reliability feature support: variable word header contents.
                      (        forth.asm):00134         * This is a dummy checksum only used for EEPROM resident words.
                      (        forth.asm):00135         * Those never are checked for code integrity by MONITOR.
0000                  (        forth.asm):00136         RFCS    MACRO   NOEXPAND
                      (        forth.asm):00137                 IFNE    RELFEAT
                      (        forth.asm):00138                 fcb     ILLOPC          Illegal opcode
                      (        forth.asm):00139                 ENDC
                      (        forth.asm):00140                 ENDM
                      (        forth.asm):00141         
                      (        forth.asm):00142         *******************************************************************************
                      (        forth.asm):00143         * RAM definitions. We cannot initialize globals from the assembly defs.
                      (        forth.asm):00144         * All we can do here is define addresses and size things up.
                      (        forth.asm):00145         
                      (        forth.asm):00146         * RAMSTART is 0. We leave page 0 unused as a bug proof area.
                      (        forth.asm):00147         * When compiled in debug mode, this area is filled with illegal
                      (        forth.asm):00148         * instruction opcodes ($C7).
                      (        forth.asm):00149         
                      (        forth.asm):00150                 org     VARSPC
                      (        forth.asm):00151         
                      (        forth.asm):00152         * Global pointers.
0100                  (        forth.asm):00153         RSP     rmb     2               The return stack pointer
0102                  (        forth.asm):00154         TOKENSP rmb     2               Token start pointer (STRS)
0104                  (        forth.asm):00155         TOKENEP rmb     2               Token end pointer (STRE)
0106                  (        forth.asm):00156         LSTWAD  rmb     2               Last defined word header pointer--LAST
0108                  (        forth.asm):00157         DICEND  rmb     2               Current end of the dictionary--HERE
010A                  (        forth.asm):00158         BLSTWAD rmb     2               Backup (was IX)
010C                  (        forth.asm):00159         BDICEND rmb     2               Backup (was IY)
010E                  (        forth.asm):00160         PLOAD   rmb     2               Word payload if found by SWDIC
0110                  (        forth.asm):00161         FNDPLD  rmb     2               Last code payload reported by FIND
0112                  (        forth.asm):00162         RECADDR rmb     2               Used by RECURSE
0114                  (        forth.asm):00163         JSRLAST rmb     2               Last compilation address of #JSROPC
0116                  (        forth.asm):00164         VLPRVEP rmb     2               Used in VLIST to compute word code length
0118                  (        forth.asm):00165         VLPRVHD rmb     2               Used in VLIST to compute word code length
011A                  (        forth.asm):00166         MRUBUFA rmb     2               Most recently used buffer address
011C                  (        forth.asm):00167         BSBFADR rmb     2               Base buffer address for the input stream
                      (        forth.asm):00168         
                      (        forth.asm):00169         * Global variables.
011E                  (        forth.asm):00170         UBASE   rmb     2               Base for numbers input and output--BASE
0120                  (        forth.asm):00171         USTATE  rmb     2               0 if interpreting, 1 if compiling--STATE
0122                  (        forth.asm):00172         UTOIN   rmb     2               User variable for >IN
0124                  (        forth.asm):00173         UBLK    rmb     2               User variable for BLK
0126                  (        forth.asm):00174         USCR    rmb     2               User variable for SCR (output for LIST)
                      (        forth.asm):00175                 IFNE    DEBUG
0128                  (        forth.asm):00176         CCREG   rmb     2               A DEBUG variable for predicates (see CMP2)
                      (        forth.asm):00177                 ENDC
0128                  (        forth.asm):00178         BASBKUP rmb     1               BASE backup when a base prefix is in use
0129                  (        forth.asm):00179         CMDLNSZ rmb     1               Entered character count in GETS (INTERP)
012A                  (        forth.asm):00180         RDEPTH  rmb     1               Return stack depth in cells
012B                  (        forth.asm):00181         IRDPTH  rmb     1               Return stack depth when : was last invoked
012C                  (        forth.asm):00182         RTSREMV rmb     1               If > 1, omit the final RTS when compiling
012D                  (        forth.asm):00183         DIVFCN  rmb     1               Flag used by /, MOD and /MOD
012E                  (        forth.asm):00184         F83DIVF rmb     1               FORTH-83 adjusment flag for floored division
012F                  (        forth.asm):00185         STSLFCN rmb     1               Flag used by */, */MOD
0130                  (        forth.asm):00186         CVTFCN  rmb     1               CVT: 0 => # semantics, 1 => #S semantics
0131                  (        forth.asm):00187         ISNEGF  rmb     1               Number being scanned is negative
0132                  (        forth.asm):00188         CVISSGN rmb     1               Flag: should CVNSTR consider numbers as signed
0133                  (        forth.asm):00189         CURTOKL rmb     1               Current token length. Set by SWDIC
0134                  (        forth.asm):00190         IMDFLG  rmb     1               Immediate flag
0135                  (        forth.asm):00191         DEFFLG  rmb     1               Define flag
0136                  (        forth.asm):00192         NBCTFB0 rmb     1               NZ if -->/CONTINUED invoked from the console
                      (        forth.asm):00193         
0137                  (        forth.asm):00194         CFCARDP rmb     1               NZ if CF card present
0138                  (        forth.asm):00195         CFCMMIR rmb     1               Last CF command issued
0139                  (        forth.asm):00196         CFERRCD rmb     1               and the corresponding error code
                      (        forth.asm):00197         
                      (        forth.asm):00198         * Serial buffer parameters. Queing happens on FIRQ.
                      (        forth.asm):00199         * Dequeing occurs when GETC is invoked.
013A                  (        forth.asm):00200         SERBENQ rmb     1               Enqueue offset
013B                  (        forth.asm):00201         SERBDEQ rmb     1               Dequeue offset
013C                  (        forth.asm):00202         SERBCNT rmb     1               Buffer byte count
013D                  (        forth.asm):00203         SERBUF  rmb     SERBSZ          The actual buffer
                      (        forth.asm):00204         
017D                  (        forth.asm):00205         XMITOK  rmb     1               Software flow control on output flag
                      (        forth.asm):00206         
017E                  (        forth.asm):00207         PADBUF  rmb     PADBSZ          PAD lives here. Used by <#, #, #S, #> and DUMP
                      (        forth.asm):00208         
                      (        forth.asm):00209         * The normal (data) stack.
01CF 00               (        forth.asm):00210                 align   2
     01D0             (        forth.asm):00211         NSTTOP  equ     *               U's value when the data stack is full
01D0                  (        forth.asm):00212                 rmb     NSTKSZ
     0290             (        forth.asm):00213         NSTBOT  equ     *               U's value when the data stack is empty
                      (        forth.asm):00214         
                      (        forth.asm):00215         * The return stack.
     0290             (        forth.asm):00216         RSTTOP  equ     *
0290                  (        forth.asm):00217                 rmb     RSTKSZ
     0310             (        forth.asm):00218         RSTBOT  equ     *
                      (        forth.asm):00219         
0310                  (        forth.asm):00220         CMDBUF  rmb     CMDBFSZ
0394                  (        forth.asm):00221         HEXBUF  rmb     HEXBFSZ
                      (        forth.asm):00222         
03E4                  (        forth.asm):00223         TBUFF   rmb     TBUFSZ          Output for CVNSTR. Also used by DUMP
                      (        forth.asm):00224         
042C 00000000         (        forth.asm):00225                 align   16
0430                  (        forth.asm):00226         BUF0    rmb     BLKSIZ+4
                      (        forth.asm):00227         
0834 0000000000000000 (        forth.asm):00228                 align   16
     00000000
0840                  (        forth.asm):00229         BUF1    rmb     BLKSIZ+4
                      (        forth.asm):00230         
                      (        forth.asm):00231         *******************************************************************************
                      (        forth.asm):00232         * Writable dictionary section begins right here. We cannot have anything
                      (        forth.asm):00233         * statically defined at this point. Therefore, FORTHIN moves the code for @
                      (        forth.asm):00234         * to this location and sets up DICEND and LSTWAD accordingly. All the RAM
                      (        forth.asm):00235         * beyond this point (after the reallocated @ implementation) is user defined
                      (        forth.asm):00236         * material. Note that builtin words, though they cannot be forgotten (to the
                      (        forth.asm):00237         * extent they are ROM resident--not to mention inter-word dependencies),
                      (        forth.asm):00238         * might still be overridden by user definitions. VLIST will happily ignore
                      (        forth.asm):00239         * that fact and list everything in the dictionary linked list order.
                      (        forth.asm):00240         
0C44 0000000000000000 (        forth.asm):00241                 align   16
     00000000
     0C50             (        forth.asm):00242         WDICSPC equ     *
                      (        forth.asm):00243         
                      (        forth.asm):00244         *******************************************************************************
                      (        forth.asm):00245         * ROM code begins.
                      (        forth.asm):00246         
                      (        forth.asm):00247                 org     ROMSTRT
                      (        forth.asm):00248         * Trap handler: division by zero or illegal opcode. See page 4-10 of "The 6309
                      (        forth.asm):00249         * Book" for a description of interrupt stacks in native 6309 mode.
E000 113C40           (        forth.asm):00250 (4)     IODZHDL bitmd   #$40            Illegal opcode?
E003 2705             (        forth.asm):00251 (3)             beq     @iodzh1
E005 8EFE49           (        forth.asm):00252 (3)             ldx     #IOPERRM
E008 2008             (        forth.asm):00253 (3)             bra     @iodxh2
E00A 113C80           (        forth.asm):00254 (4)     @iodzh1 bitmd   #$80            Division by zero?
E00D 2725             (        forth.asm):00255 (3)             beq     @iodzh3         And you may ask yourself, well
                      (        forth.asm):00256         *                               How did I get here?
E00F 8EFE5E           (        forth.asm):00257 (3)             ldx     #DV0ERRM
E012 BDE25F           (        forth.asm):00258 (7)     @iodxh2 jsr     PUTS
E015 EC6C             (        forth.asm):00259 (5+1)           ldd     12,s            Return code address (PC)
E017 8E0394           (        forth.asm):00260 (3)             ldx     #HEXBUF
E01A BDE184           (        forth.asm):00261 (7)             jsr     HDMP4   
E01D 8E0394           (        forth.asm):00262 (3)             ldx     #HEXBUF
E020 BDE25F           (        forth.asm):00263 (7)             jsr     PUTS
E023 BDE26C           (        forth.asm):00264 (7)             jsr     PUTCR
E026 8EE6E1           (        forth.asm):00265 (3)             ldx     #ERRHD1
E029 AF6C             (        forth.asm):00266 (5+1)           stx     12,s            Resume execution in the error handler
E02B 8EE000           (        forth.asm):00267 (3)             ldx     #IODZHDL
E02E AF68             (        forth.asm):00268 (5+1)           stx     8,s             With Y set to IODZHDL
E030 8603             (        forth.asm):00269 (2)             lda     #3              And user ABORT error code
E032 A762             (        forth.asm):00270 (4+1)           sta     2,s             Passed back through B
E034 3B               (        forth.asm):00271 (17+?)  @iodzh3 rti
                      (        forth.asm):00272         
     E035             (        forth.asm):00273         SWI3HDL equ     *
     E035             (        forth.asm):00274         SWI2HDL equ     *
     E035             (        forth.asm):00275         IRQHDL  equ     *
     E035             (        forth.asm):00276         SWIHDL  equ     *
E035 20FE             (        forth.asm):00277 (3)     NMIHDL  bra     *               These should never happen
                      (        forth.asm):00278         
                      (        forth.asm):00279         * Interrupts are disabled by default upon reset.
E037 113D01           (        forth.asm):00280 (5)     RSTHDL  ldmd    #1              Establish 6309 native mode
                      (        forth.asm):00281         
E03A 8643             (        forth.asm):00282 (2)             lda     #ACIRSET
E03C B7D800           (        forth.asm):00283 (4)             sta     ACIACTL         ACIA master reset
E03F 86D5             (        forth.asm):00284 (2)             lda     #ACIRTS1
E041 B7D800           (        forth.asm):00285 (4)             sta     ACIACTL         RTS# high, 8N1
                      (        forth.asm):00286         
E044 8EFDC5           (        forth.asm):00287 (3)             ldx     #BOOTMSG        Identity statement
                      (        forth.asm):00288         
                      (        forth.asm):00289         * Send the NUL terminated string pointed to by X to the ACIA.
                      (        forth.asm):00290         * The RAM is not assumed to be working.
E047 C602             (        forth.asm):00291 (2)     INIT    ldb     #ACITDRE
E049 A680             (        forth.asm):00292 (4+1)   @init0  lda     ,x+
E04B 270A             (        forth.asm):00293 (3)             beq     RAMCHK          NUL marks the end of the string
E04D F5D800           (        forth.asm):00294 (4)     @init1  bitb    ACIACTL         Wait for TDRE bit to be set
E050 27FB             (        forth.asm):00295 (3)             beq     @init1
E052 B7D801           (        forth.asm):00296 (4)             sta     ACIADAT         Transmit data
E055 20F2             (        forth.asm):00297 (3)             bra     @init0          Next char, if any
                      (        forth.asm):00298         
                      (        forth.asm):00299         * RAM0 32 KB self test (destructive).
E057 8E0000           (        forth.asm):00300 (3)     RAMCHK  ldx     #RAMSTRT
E05A AF84             (        forth.asm):00301 (5+0)   @ramch1 stx     ,x
E05C AC84             (        forth.asm):00302 (5+0)           cmpx    ,x
E05E 2609             (        forth.asm):00303 (3)             bne     RAMFAIL
E060 3002             (        forth.asm):00304 (4+1)           leax    2,x
E062 8C8000           (        forth.asm):00305 (3)             cmpx    #RAMSTRT+RAMSIZE
E065 26F3             (        forth.asm):00306 (3)             bne     @ramch1
E067 2012             (        forth.asm):00307 (3)             bra     RAMOK
                      (        forth.asm):00308         
E069 C680             (        forth.asm):00309 (2)     RAMFAIL ldb     #128
E06B 108E8000         (        forth.asm):00310 (4)     @ramf1  ldy     #$8000
E06F 313F             (        forth.asm):00311 (4+1)   @ramf2  leay    -1,y
E071 26FC             (        forth.asm):00312 (3)             bne     @ramf2
E073 5A               (        forth.asm):00313 (1)             decb
E074 26F5             (        forth.asm):00314 (3)             bne     @ramf1
E076 8EFE30           (        forth.asm):00315 (3)             ldx     #RAMFM
E079 20CC             (        forth.asm):00316 (3)             bra     INIT            Here we go again
                      (        forth.asm):00317         
                      (        forth.asm):00318         * RAM Initialization to all $C7 if DEBUG mode is enabled else zeroes.
E07B 8E0000           (        forth.asm):00319 (3)     RAMOK   ldx     #RAMSTRT
E07E 3101             (        forth.asm):00320 (4+1)           leay    1,x
E080 10867FFF         (        forth.asm):00321 (4)             ldw     #RAMSIZE-1
                      (        forth.asm):00322                 IFNE    DEBUG
                      (        forth.asm):00323                 lda     #ILLOPC
                      (        forth.asm):00324                 sta     ,x
                      (        forth.asm):00325                 ELSE
E084 6F84             (        forth.asm):00326 (6+0)           clr     ,x
                      (        forth.asm):00327                 ENDC
E086 113812           (        forth.asm):00328 (6+?)           tfm     x+,y+
                      (        forth.asm):00329         
                      (        forth.asm):00330         * Initialize the system stack pointer and the direct page base address register.
E089 10CE8000         (        forth.asm):00331 (4)             lds     #RAMSTRT+RAMSIZE
E08D 8601             (        forth.asm):00332 (2)             lda     #VARSPC/256
E08F 1F8B             (        forth.asm):00333 (4)             tfr     a,dp
     01               (        forth.asm):00334                 SETDP   VARSPC/256
                      (        forth.asm):00335         
                      (        forth.asm):00336         * Serial buffer parameters initialization.
E091 104F             (        forth.asm):00337 (2)             clrd
E093 DD3A             (        forth.asm):00338 (4)             std     SERBENQ         Two birds with one stone
E095 973C             (        forth.asm):00339 (3)             sta     SERBCNT
E097 4C               (        forth.asm):00340 (1)             inca                    Initialize software flow control on output
E098 977D             (        forth.asm):00341 (3)             sta     XMITOK
                      (        forth.asm):00342         
                      (        forth.asm):00343         * Lower RTS and enable FIRQ. This is only necessary if GETCH never gets called,
                      (        forth.asm):00344         * for instance if block #1 does not relinquish control back to the interpreter.
E09A 8695             (        forth.asm):00345 (2)             lda     #ACIRTS0
E09C B7D800           (        forth.asm):00346 (4)             sta     ACIACTL
E09F 1CBF             (        forth.asm):00347 (2)             andcc   #^FFLAG
                      (        forth.asm):00348         
E0A1 8EFE20           (        forth.asm):00349 (3)             ldx     #RAMOKM
E0A4 BDE25F           (        forth.asm):00350 (7)             jsr     PUTS
E0A7 BDE2C5           (        forth.asm):00351 (7)             jsr     FORTHIN         Global variables initialization
E0AA BDE832           (        forth.asm):00352 (7)             jsr     CFINIT          CompactFlash card initialization
E0AD 0D37             (        forth.asm):00353 (4)             tst     CFCARDP
E0AF 2706             (        forth.asm):00354 (3)             beq     INTERP
                      (        forth.asm):00355         
                      (        forth.asm):00356         * A CF card is present, LOAD block #1.
E0B1 8E0001           (        forth.asm):00357 (3)             ldx     #1
E0B4 BDF6AF           (        forth.asm):00358 (7)             jsr     LOAD1
                      (        forth.asm):00359         
                      (        forth.asm):00360         * The interpreter main loop.
E0B7 104F             (        forth.asm):00361 (2)     INTERP  clrd
E0B9 DD24             (        forth.asm):00362 (4)             std     UBLK            Interpreting from the console. Set BLK to 0
E0BB DD22             (        forth.asm):00363 (4)             std     UTOIN
E0BD 8E0310           (        forth.asm):00364 (3)             ldx     #CMDBUF
E0C0 9F1C             (        forth.asm):00365 (4)             stx     BSBFADR
E0C2 C683             (        forth.asm):00366 (2)             ldb     #CMDBFSZ-1      NUL terminator is not included in the char count
E0C4 BDE282           (        forth.asm):00367 (7)             jsr     GETS            Acquire command from the console
                      (        forth.asm):00368         * Additional setup in case the ANSI \ is used.
E0C7 D729             (        forth.asm):00369 (3)             stb     CMDLNSZ         GETS returns the entered character count via B
                      (        forth.asm):00370         * Additional preparation work for block support.
E0C9 0F36             (        forth.asm):00371 (5)             clr     NBCTFB0         Flag whether -->/CONTINUED is called from blk 0
E0CB 8D02             (        forth.asm):00372 (6)             bsr     _INTERP
E0CD 20E8             (        forth.asm):00373 (3)     MINTLRA bra     INTERP
                      (        forth.asm):00374         
                      (        forth.asm):00375         * The interpreter itself.
E0CF BDE304           (        forth.asm):00376 (7)     _INTERP jsr     SCNSTOK         Scan for the beginning of a word at address X
E0D2 2715             (        forth.asm):00377 (3)             beq     @more0          This is the end
E0D4 0D21             (        forth.asm):00378 (4)             tst     USTATE+1        We do ignore the upper byte
E0D6 2644             (        forth.asm):00379 (3)             bne     COMP            We are compiling
E0D8 BDE423           (        forth.asm):00380 (7)             jsr     SWDIC           Updates TOKENEP, CURTOKL, IMDFLG/DEFFLG
E0DB 2624             (        forth.asm):00381 (3)             bne     @exec           Word found, execute it
E0DD BDE361           (        forth.asm):00382 (7)             jsr     NUMCVT
     E0E0             (        forth.asm):00383         NMCVIRA equ     *
E0E0 BDE75B           (        forth.asm):00384 (7)             jsr     NPUSH
E0E3 9E04             (        forth.asm):00385 (4)             ldx     TOKENEP
E0E5 6D84             (        forth.asm):00386 (5+0)   MORE    tst     ,x
E0E7 26E6             (        forth.asm):00387 (3)             bne     _INTERP         Next token, please!
                      (        forth.asm):00388         * End of input stream condition is recognized.
E0E9 DC24             (        forth.asm):00389 (4)     @more0  ldd     UBLK
E0EB 2705             (        forth.asm):00390 (3)             beq     @more1          We are back from the console
E0ED 0D36             (        forth.asm):00391 (4)             tst     NBCTFB0         -->/CONTINUED invoked from the console?
E0EF 2601             (        forth.asm):00392 (3)             bne     @more1          Yes
E0F1 39               (        forth.asm):00393 (4)             rts                     No, we're done here
E0F2 0F36             (        forth.asm):00394 (5)     @more1  clr     NBCTFB0         The -->/CONTINUED exception only applies once
E0F4 8EFE43           (        forth.asm):00395 (3)             ldx     #OKFEEDB        Provide OK feedback
E0F7 0D21             (        forth.asm):00396 (4)             tst     USTATE+1        No OK feedback if we're compiling, just CRLF
E0F9 2702             (        forth.asm):00397 (3)             beq     @more2
E0FB 3003             (        forth.asm):00398 (4+1)           leax    3,x             Skip the ' OK' string when compiling
E0FD BDE25F           (        forth.asm):00399 (7)     @more2  jsr     PUTS
E100 39               (        forth.asm):00400 (4)             rts                     Back to whoever invoked us
E101 9635             (        forth.asm):00401 (3)     @exec   lda     DEFFLG
E103 2705             (        forth.asm):00402 (3)             beq     @introk         Compilation only flag is not set
E105 C606             (        forth.asm):00403 (2)             ldb     #6              Incorrect STATE
E107 BDE6DE           (        forth.asm):00404 (7)             jsr     ERRHDLR         No return
     E10A             (        forth.asm):00405         INTISRA equ     *               For symbolic stack debugging purposes
E10A DC04             (        forth.asm):00406 (4)     @introk ldd     TOKENEP
E10C 931C             (        forth.asm):00407 (4)             subd    BSBFADR
E10E DD22             (        forth.asm):00408 (4)             std     UTOIN           Derive >IN from TOKENEP
E110 8EE117           (        forth.asm):00409 (3)             ldx     #INTRPRA        The return address
E113 3410             (        forth.asm):00410 (4+2)           pshs    x
E115 1F25             (        forth.asm):00411 (4)             tfr     y,pc            An indirect call to Y
E117 BDE7AF           (        forth.asm):00412 (7)     INTRPRA jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
E11A 20C9             (        forth.asm):00413 (3)             bra     MORE
                      (        forth.asm):00414         
                      (        forth.asm):00415         * The compiler.
                      (        forth.asm):00416         * Upon entry TOKENSP has been set by a prior call to SCNSTOK.
E11C BDE423           (        forth.asm):00417 (7)     COMP    jsr     SWDIC           Updates TOKENEP, CURTOKL, IMDFLG/DEFFLG
E11F 2720             (        forth.asm):00418 (3)             beq     @cmpnum         Word @ TOKENSP is not in the dictionary
E121 0D34             (        forth.asm):00419 (4)             tst     IMDFLG
E123 2714             (        forth.asm):00420 (3)             beq     @notimd
E125 DC04             (        forth.asm):00421 (4)             ldd     TOKENEP         Derive >IN from TOKENEP
E127 931C             (        forth.asm):00422 (4)             subd    BSBFADR
E129 DD22             (        forth.asm):00423 (4)             std     UTOIN
E12B 8EE132           (        forth.asm):00424 (3)             ldx     #COMPLRA        Word is immediate. Execute it.
E12E 3410             (        forth.asm):00425 (4+2)           pshs    x               Return to COMPLRA
E130 1F25             (        forth.asm):00426 (4)             tfr     y,pc            An indirect call to Y
E132 BDE7AF           (        forth.asm):00427 (7)     COMPLRA jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
E135 9F04             (        forth.asm):00428 (4)             stx     TOKENEP
E137 20AC             (        forth.asm):00429 (3)             bra     MORE            Branch back to the interpreter
E139 1F21             (        forth.asm):00430 (4)     @notimd tfr     y,x
E13B 8D20             (        forth.asm):00431 (6)             bsr     EMXASXT         Emit X as an execution token
E13D 9E04             (        forth.asm):00432 (4)     @cmpdon ldx     TOKENEP
E13F 20A4             (        forth.asm):00433 (3)             bra     MORE
E141 BDE361           (        forth.asm):00434 (7)     @cmpnum jsr     NUMCVT
     E144             (        forth.asm):00435         NMCVCRA equ     *
E144 BDE4F3           (        forth.asm):00436 (7)             jsr     LITER
E147 20F4             (        forth.asm):00437 (3)             bra     @cmpdon
                      (        forth.asm):00438         
                      (        forth.asm):00439         * Check whether the final RTS can be eliminated. It can only be if we have no
                      (        forth.asm):00440         * forward references to HERE when COMPR (;) is invoked. This is a rather
                      (        forth.asm):00441         * complicated matter but this implementation works on the basis that we can do
                      (        forth.asm):00442         * so safely if at least 2 subroutine calls have been issued with a return
                      (        forth.asm):00443         * stack whose depth is equal to IRDPTH, immediately prior to the invokation
                      (        forth.asm):00444         * of COMPR (;).
E149 3402             (        forth.asm):00445 (4+1)   CHKRTS  pshs    a
E14B 109F14           (        forth.asm):00446 (5)             sty     JSRLAST         JSRLAST points to the latest JSR code emission
E14E 962A             (        forth.asm):00447 (3)             lda     RDEPTH
E150 912B             (        forth.asm):00448 (3)             cmpa    IRDPTH          Return stack depth when : was last invoked
E152 2705             (        forth.asm):00449 (3)             beq     @ckrts1
E154 0F2C             (        forth.asm):00450 (5)             clr     RTSREMV
E156 3502             (        forth.asm):00451 (4+1)   @ckrts0 puls    a
E158 39               (        forth.asm):00452 (4)             rts
E159 0C2C             (        forth.asm):00453 (5)     @ckrts1 inc     RTSREMV
E15B 20F9             (        forth.asm):00454 (3)             bra     @ckrts0
                      (        forth.asm):00455         
                      (        forth.asm):00456         * Emit (in a code generation understanding) X as an execution token.
                      (        forth.asm):00457         * In essence, this simply inserts JSR <X> at HERE.
                      (        forth.asm):00458         * Note: this code provides support for trailing JSR elimination.
                      (        forth.asm):00459         * On input: X has the target execution token.
                      (        forth.asm):00460         * On output: Y will have HERE, A will be altered, X will be preserved.
E15D 109E08           (        forth.asm):00461 (5)     EMXASXT ldy     DICEND
E160 8DE7             (        forth.asm):00462 (6)             bsr     CHKRTS          Check if the final RTS can be omitted
E162 86BD             (        forth.asm):00463 (2)             lda     #JSROPC         JSR extended
E164 BDE50A           (        forth.asm):00464 (7)             jsr     VARCON2         Compile a JSR to the action component
E167 109F08           (        forth.asm):00465 (5)             sty     DICEND
E16A 39               (        forth.asm):00466 (4)             rts
                      (        forth.asm):00467         
                      (        forth.asm):00468         * Store the HEX representation of the lower nibble of A to X+.
E16B 3404             (        forth.asm):00469 (4+1)   HEX1D   pshs    b
E16D C630             (        forth.asm):00470 (2)             ldb     #'0
E16F 840F             (        forth.asm):00471 (2)             anda    #$0f
E171 810A             (        forth.asm):00472 (2)             cmpa    #10
E173 2502             (        forth.asm):00473 (3)             bcs     @hex1d1
E175 C637             (        forth.asm):00474 (2)             ldb     #'A-10
E177 103098           (        forth.asm):00475 (4)     @hex1d1 addr    b,a
E17A A780             (        forth.asm):00476 (4+1)           sta     ,x+
E17C 3504             (        forth.asm):00477 (4+1)           puls    b
E17E 39               (        forth.asm):00478 (4)             rts
                      (        forth.asm):00479         
E17F 44               (        forth.asm):00480 (1)     ADIV16  lsra
E180 44               (        forth.asm):00481 (1)             lsra
E181 44               (        forth.asm):00482 (1)             lsra
E182 44               (        forth.asm):00483 (1)             lsra
E183 39               (        forth.asm):00484 (4)             rts
                      (        forth.asm):00485         
                      (        forth.asm):00486         * Hexdump D to 4 bytes starting at X.  Upon return, X will point 1 byte
                      (        forth.asm):00487         * after the last character emitted. D is preserved.
E184 3406             (        forth.asm):00488 (4+2)   HDMP4   pshs    d
E186 8DF7             (        forth.asm):00489 (6)             bsr     ADIV16
E188 8DE1             (        forth.asm):00490 (6)             bsr     HEX1D
E18A A6E4             (        forth.asm):00491 (4+0)           lda     ,s
E18C 8DDD             (        forth.asm):00492 (6)             bsr     HEX1D
E18E A661             (        forth.asm):00493 (4+1)           lda     1,s
E190 8DED             (        forth.asm):00494 (6)             bsr     ADIV16
E192 8DD7             (        forth.asm):00495 (6)             bsr     HEX1D
E194 A661             (        forth.asm):00496 (4+1)           lda     1,s
E196 8DD3             (        forth.asm):00497 (6)             bsr     HEX1D
E198 3506             (        forth.asm):00498 (4+2)           puls    d
E19A 6F84             (        forth.asm):00499 (6+0)           clr     ,x
E19C 39               (        forth.asm):00500 (4)             rts
                      (        forth.asm):00501         
E19D 3406             (        forth.asm):00502 (4+2)   HDMP2   pshs    d
E19F 8DDE             (        forth.asm):00503 (6)             bsr     ADIV16
E1A1 8DC8             (        forth.asm):00504 (6)             bsr     HEX1D
E1A3 A6E4             (        forth.asm):00505 (4+0)           lda     ,s
E1A5 8DC4             (        forth.asm):00506 (6)             bsr     HEX1D
E1A7 3506             (        forth.asm):00507 (4+2)           puls    d
E1A9 6F84             (        forth.asm):00508 (6+0)           clr     ,x
E1AB 39               (        forth.asm):00509 (4)             rts
                      (        forth.asm):00510         
                      (        forth.asm):00511         * Add string pointed to by Y starting at the address stored in X.
E1AC 3402             (        forth.asm):00512 (4+1)   ADDS    pshs    a
E1AE A6A0             (        forth.asm):00513 (4+1)   @adds1  lda     ,y+
E1B0 A780             (        forth.asm):00514 (4+1)           sta     ,x+
E1B2 26FA             (        forth.asm):00515 (3)             bne     @adds1
E1B4 3502             (        forth.asm):00516 (4+1)           puls    a
E1B6 39               (        forth.asm):00517 (4)             rts
                      (        forth.asm):00518         
                      (        forth.asm):00519         * Returns the length of the string pointed to by X (terminator excluded) in W.
E1B7 3410             (        forth.asm):00520 (4+2)   SLEN    pshs    x
E1B9 105F             (        forth.asm):00521 (2)             clrw
E1BB 105C             (        forth.asm):00522 (2)     @slen1  incw
E1BD A680             (        forth.asm):00523 (4+1)           lda     ,x+
E1BF 26FA             (        forth.asm):00524 (3)             bne     @slen1
E1C1 105A             (        forth.asm):00525 (2)             decw
E1C3 3510             (        forth.asm):00526 (4+2)           puls    x
E1C5 39               (        forth.asm):00527 (4)             rts
                      (        forth.asm):00528         
                      (        forth.asm):00529                 include console.asm
                      (      console.asm):00001         * FIRQ interrupt handler. This is entered on RDRF (input available).
E1C6 3416             (      console.asm):00002 (4+4)   FIRQHDL pshs    x,d
E1C8 B6D800           (      console.asm):00003 (4)             lda     ACIACTL
E1CB 8480             (      console.asm):00004 (2)             anda    #ACIISVC        Does the ACIA need input service?
E1CD 272F             (      console.asm):00005 (3)             beq     @nsint          No. This is not the IRQ source we're looking for
E1CF F6D801           (      console.asm):00006 (4)             ldb     ACIADAT         Incoming data byte to B (INTACK)
E1D2 C103             (      console.asm):00007 (2)             cmpb    #ETX            Control-C?
E1D4 272B             (      console.asm):00008 (3)             beq     @sigint         Yes
E1D6 C113             (      console.asm):00009 (2)             cmpb    #XOFF
E1D8 2740             (      console.asm):00010 (3)             beq     @outngo         Output is a no go
E1DA C111             (      console.asm):00011 (2)             cmpb    #XON
E1DC 273F             (      console.asm):00012 (3)             beq     @outok          Output is re-enabled
E1DE 963C             (      console.asm):00013 (3)             lda     SERBCNT
E1E0 8140             (      console.asm):00014 (2)             cmpa    #SERBSZ
E1E2 271A             (      console.asm):00015 (3)             beq     @nsint          Serial input buffer is full. So it goes...
E1E4 8E013D           (      console.asm):00016 (3)             ldx     #SERBUF
E1E7 963A             (      console.asm):00017 (3)             lda     SERBENQ         Enqueue offset to A
E1E9 E786             (      console.asm):00018 (4+1)           stb     a,x             Enqueue incoming character
E1EB 4C               (      console.asm):00019 (1)             inca
E1EC 843F             (      console.asm):00020 (2)             anda    #SERBSZ-1       Modulo arithmetic
E1EE 973A             (      console.asm):00021 (3)             sta     SERBENQ
E1F0 963C             (      console.asm):00022 (3)             lda     SERBCNT
E1F2 4C               (      console.asm):00023 (1)             inca
E1F3 8120             (      console.asm):00024 (2)             cmpa    #SERBSZ-32      Serial input buffer considered full?
E1F5 2605             (      console.asm):00025 (3)             bne     @upsbcn         No
E1F7 C6D5             (      console.asm):00026 (2)             ldb     #ACIRTS1
E1F9 F7D800           (      console.asm):00027 (4)             stb     ACIACTL         Set RTS# to high
E1FC 973C             (      console.asm):00028 (3)     @upsbcn sta     SERBCNT         Update serial buffer byte count
E1FE 3516             (      console.asm):00029 (4+4)   @nsint  puls    d,x
E200 3B               (      console.asm):00030 (17+?)          rti
                      (      console.asm):00031         * Control-C was recognized.
E201 3264             (      console.asm):00032 (4+1)   @sigint leas    4,s             Drop D and X
E203 963A             (      console.asm):00033 (3)             lda     SERBENQ
E205 973B             (      console.asm):00034 (3)             sta     SERBDEQ
E207 0F3C             (      console.asm):00035 (5)             clr     SERBCNT         Serial input buffer has been emptied
E209 BDEABC           (      console.asm):00036                 RFXT    jsr,NCLR+7      Clear the data stack
E20C BDEAC8           (      console.asm):00037                 RFXT    jsr,RCLR+7      and the return stack
E20F 10AE61           (      console.asm):00038 (6+1)           ldy     1,s             Saved PC from the FIRQ stack
E212 8EE6E1           (      console.asm):00039 (3)             ldx     #ERRHD1
E215 AF61             (      console.asm):00040 (5+1)           stx     1,s             Execution continues in the error handler
E217 C603             (      console.asm):00041 (2)             ldb     #3              with ABORT error code passed through B
E219 3B               (      console.asm):00042 (17+?)          rti
E21A 4F               (      console.asm):00043 (1)     @outngo clra
E21B 2002             (      console.asm):00044 (3)             bra     @sxmsta
E21D 8601             (      console.asm):00045 (2)     @outok  lda     #1
E21F 977D             (      console.asm):00046 (3)     @sxmsta sta     XMITOK          Update XMIT status flag
E221 20DB             (      console.asm):00047 (3)             bra     @nsint
                      (      console.asm):00048         
                      (      console.asm):00049         * We do not have to talk to the ACIA directly, unless SERBCNT is zero,
                      (      console.asm):00050         * in which case we have to lower RTS#, so as to accept incoming characters.
E223 3416             (      console.asm):00051 (4+4)   GETCH   pshs    x,d
E225 1A40             (      console.asm):00052 (2)             orcc    #FFLAG          Disable FIRQ
E227 0D3C             (      console.asm):00053 (4)             tst     SERBCNT
E229 260C             (      console.asm):00054 (3)             bne     @sbdind         Some data is available
E22B 8695             (      console.asm):00055 (2)             lda     #ACIRTS0
E22D B7D800           (      console.asm):00056 (4)             sta     ACIACTL         Clear RTS#
E230 1CBF             (      console.asm):00057 (2)             andcc   #^FFLAG         Enable FIRQ
E232 13               (      console.asm):00058 (1+?)   @again  sync                    Go to sleep and resume on interrupt
E233 0D3C             (      console.asm):00059 (4)     SYNCRA  tst     SERBCNT
E235 27FB             (      console.asm):00060 (3)             beq     @again
                      (      console.asm):00061         * Serial buffer data indication.
E237 1CBF             (      console.asm):00062 (2)     @sbdind andcc   #^FFLAG         Re-enable FIRQ
E239 8E013D           (      console.asm):00063 (3)             ldx     #SERBUF
E23C 963B             (      console.asm):00064 (3)             lda     SERBDEQ         Dequeue offset to A
E23E E686             (      console.asm):00065 (4+1)           ldb     a,x             Buffered input character to B
E240 E7E4             (      console.asm):00066 (4+0)           stb     ,s              Incoming character to A in the caller's stack
E242 4C               (      console.asm):00067 (1)             inca
E243 843F             (      console.asm):00068 (2)             anda    #SERBSZ-1       Modulo arithmetic
E245 973B             (      console.asm):00069 (3)             sta     SERBDEQ
E247 0A3C             (      console.asm):00070 (5)             dec     SERBCNT
E249 3516             (      console.asm):00071 (4+4)           puls    d,x
E24B 39               (      console.asm):00072 (4)             rts
                      (      console.asm):00073         
E24C 3404             (      console.asm):00074 (4+1)   PUTCH   pshs    b
E24E C602             (      console.asm):00075 (2)             ldb     #ACITDRE
E250 F5D800           (      console.asm):00076 (4)     @tdrdrn bitb    ACIACTL
E253 27FB             (      console.asm):00077 (3)             beq     @tdrdrn         Drain transmit data register
E255 0D7D             (      console.asm):00078 (4)     @wfxon  tst     XMITOK          Software flow control on output
E257 27FC             (      console.asm):00079 (3)             beq     @wfxon          Wait for XON
E259 B7D801           (      console.asm):00080 (4)             sta     ACIADAT         Transmit data
E25C 3504             (      console.asm):00081 (4+1)           puls    b
E25E 39               (      console.asm):00082 (4)             rts
                      (      console.asm):00083         
                      (      console.asm):00084         * Send NUL terminated string pointed to by X to the ACIA.
E25F 3416             (      console.asm):00085 (4+4)   PUTS    pshs    x,d
E261 A680             (      console.asm):00086 (4+1)   @puts1  lda     ,x+
E263 2704             (      console.asm):00087 (3)             beq     @puts2         NUL marks the end of the string
E265 8DE5             (      console.asm):00088 (6)             bsr     PUTCH
E267 20F8             (      console.asm):00089 (3)             bra     @puts1
E269 3516             (      console.asm):00090 (4+4)   @puts2  puls    d,x
E26B 39               (      console.asm):00091 (4)             rts
                      (      console.asm):00092         
E26C 3410             (      console.asm):00093 (4+2)   PUTCR   pshs    x
E26E 8EFE2D           (      console.asm):00094 (3)             ldx     #CRLFSTR
E271 8DEC             (      console.asm):00095 (6)             bsr     PUTS
E273 3510             (      console.asm):00096 (4+2)           puls    x
E275 39               (      console.asm):00097 (4)             rts
                      (      console.asm):00098         
E276 8608             (      console.asm):00099 (2)     _BS     lda     #BS
E278 8DD2             (      console.asm):00100 (6)             bsr     PUTCH          Output BS
E27A 8620             (      console.asm):00101 (2)             lda     #SP
E27C 8DCE             (      console.asm):00102 (6)             bsr     PUTCH          Clear character
E27E 8608             (      console.asm):00103 (2)             lda     #BS
E280 20CA             (      console.asm):00104 (3)             bra     PUTCH          And go back again
                      (      console.asm):00105         
                      (      console.asm):00106         * Receive CR terminated string and store it to X.
                      (      console.asm):00107         * Upon entry B contains the receiving buffer length.
                      (      console.asm):00108         * (excluding the NUL terminator). On exit, B will
                      (      console.asm):00109         * contain the number of characters entered (excluding
                      (      console.asm):00110         * the trailing NUL). A and X are preserved. B will
                      (      console.asm):00111         * have the actual number of characters entered.
                      (      console.asm):00112         * Implementation of $05D9 in the TRS-80 Level II ROM.
E282 C102             (      console.asm):00113 (2)     GETS    cmpb    #2
E284 2401             (      console.asm):00114 (3)             bhs     @gets0          B must be 2 or more
E286 39               (      console.asm):00115 (4)             rts
E287 3416             (      console.asm):00116 (4+4)   @gets0  pshs    x,d
E289 8D98             (      console.asm):00117 (6)     @gets1  bsr     GETCH
E28B 8108             (      console.asm):00118 (2)             cmpa    #BS             Backspace?
E28D 260B             (      console.asm):00119 (3)             bne     @gets3
E28F E161             (      console.asm):00120 (4+1)           cmpb    1,s             B upon routine entry
E291 27F6             (      console.asm):00121 (3)             beq     @gets1          Do not go beyond the beginning of the buffer
E293 8DE1             (      console.asm):00122 (6)             bsr     _BS
E295 301F             (      console.asm):00123 (4+1)           leax    -1,x
E297 5C               (      console.asm):00124 (1)             incb
E298 20EF             (      console.asm):00125 (3)             bra     @gets1
E29A 8115             (      console.asm):00126 (2)     @gets3  cmpa    #NAK            Kill input?
E29C 260B             (      console.asm):00127 (3)             bne     @gets5
                      (      console.asm):00128         * While B != 1,S (initial buffer length), decrement X, increment B.
E29E E161             (      console.asm):00129 (4+1)   @gets4  cmpb    1,s
E2A0 27E7             (      console.asm):00130 (3)             beq     @gets1
E2A2 8DD2             (      console.asm):00131 (6)             bsr     _BS
E2A4 301F             (      console.asm):00132 (4+1)           leax     -1,x
E2A6 5C               (      console.asm):00133 (1)             incb
E2A7 20F5             (      console.asm):00134 (3)             bra     @gets4
                      (      console.asm):00135         * Regular input handling: echo input character.
E2A9 810D             (      console.asm):00136 (2)     @gets5  cmpa    #CR
E2AB 2709             (      console.asm):00137 (3)             beq     @gets6          Minicom only sends CR
E2AD 8D9D             (      console.asm):00138 (6)             bsr     PUTCH
E2AF A780             (      console.asm):00139 (4+1)           sta     ,x+
E2B1 5A               (      console.asm):00140 (1)             decb
E2B2 C101             (      console.asm):00141 (2)             cmpb    #1              End of buffer reached?
E2B4 26D3             (      console.asm):00142 (3)             bne     @gets1
E2B6 8620             (      console.asm):00143 (2)     @gets6  lda     #SP
E2B8 8D92             (      console.asm):00144 (6)             bsr     PUTCH
E2BA 6F84             (      console.asm):00145 (6+0)           clr     ,x
E2BC 1F10             (      console.asm):00146 (4)             tfr     x,d
E2BE A362             (      console.asm):00147 (5+1)           subd    2,s             Actual number of characters entered
E2C0 E761             (      console.asm):00148 (4+1)           stb     1,s             Stored to B (through the system stack).         
E2C2 3516             (      console.asm):00149 (4+4)           puls    d,x
E2C4 39               (      console.asm):00150 (4)             rts
                      (      console.asm):00151         
                      (        forth.asm):00530         
                      (        forth.asm):00531                 IFNE    DEBUG
E2C5                  (        forth.asm):00532         PAGE0IN pshs    x               Fill up page 0 with all C7 (an illegal opcode)
                      (        forth.asm):00533                 ldx     #RAMSTRT
                      (        forth.asm):00534                 lda     #ILLOPC
                      (        forth.asm):00535                 sta     ,x
                      (        forth.asm):00536                 leay    1,x
                      (        forth.asm):00537                 ldw     #255
                      (        forth.asm):00538                 tfm     x+,y+
                      (        forth.asm):00539                 puls    x
                      (        forth.asm):00540                 rts
                      (        forth.asm):00541                 ENDC
                      (        forth.asm):00542         
E2C5 BDEABC           (        forth.asm):00543         FORTHIN RFXT    jsr,NCLR+7      XT for NCLR. Set up the normal stack
E2C8 BDEAC8           (        forth.asm):00544                 RFXT    jsr,RCLR+7      XT for RCLR. Set up the return stack
                      (        forth.asm):00545                 IFNE    DEBUG
                      (        forth.asm):00546                 bsr     PAGE0IN
                      (        forth.asm):00547                 ENDC
                      (        forth.asm):00548         * Relocate '@' code to RAM and set it up as the last dictionary entry (RO).
E2CB 8EFDB0           (        forth.asm):00549 (3)             ldx     #THEEND         Source address for tfm
E2CE 1086000D         (        forth.asm):00550 (4)             ldw     #(REALEND-THEEND) Byte count for tfm
E2D2 108E0C50         (        forth.asm):00551 (4)             ldy     #WDICSPC        Destination address for tfm
E2D6 109F06           (        forth.asm):00552 (5)             sty     LSTWAD
E2D9 113812           (        forth.asm):00553 (6+?)           tfm     x+,y+
E2DC 109F08           (        forth.asm):00554 (5)             sty     DICEND
                      (        forth.asm):00555                 IFNE    RELFEAT
E2DF BDEBDC           (        forth.asm):00556                 RFXT    jsr,MONITOR+10  XT for MONITOR (monitor @ in RAM)
                      (        forth.asm):00557                 ENDC
E2E2 8D0D             (        forth.asm):00558 (6)             bsr     EMPTYB          Buffer related initializations.
E2E4 104F             (        forth.asm):00559 (2)             clrd
E2E6 DD20             (        forth.asm):00560 (4)             std     USTATE          Initial mode is interpretation
E2E8 DD26             (        forth.asm):00561 (4)             std     USCR            Clear SCR
E2EA DD24             (        forth.asm):00562 (4)             std     UBLK            Clear BLK
E2EC DD22             (        forth.asm):00563 (4)             std     UTOIN           Clear >IN
E2EE 7EFA2D           (        forth.asm):00564                 RFXT    jmp,DECIMAL+10  XT for DECIMAL. Default base is decimal
                      (        forth.asm):00565         
E2F1 8E0430           (        forth.asm):00566 (3)     EMPTYB  ldx     #BUF0
E2F4 8D03             (        forth.asm):00567 (6)             bsr     EMPT1B
E2F6 8E0840           (        forth.asm):00568 (3)             ldx     #BUF1
                      (        forth.asm):00569         * Empty the buffer pointed to by X.
E2F9 9F1A             (        forth.asm):00570 (4)     EMPT1B  stx     MRUBUFA         Update most recently used buffer address
E2FB 30890400         (        forth.asm):00571 (4+3)           leax    BOTERM,x        Buffer offset to the terminator field
E2FF 104F             (        forth.asm):00572 (2)             clrd
E301 ED84             (        forth.asm):00573 (5+0)           std     ,x              Clear terminator and flags fields
                      (        forth.asm):00574                 IFNE    DEBUG
                      (        forth.asm):00575                 ldd     #$C7C7
                      (        forth.asm):00576                 std     2,x             Dummy block number
                      (        forth.asm):00577                 ENDC
E303 39               (        forth.asm):00578 (4)             rts
                      (        forth.asm):00579         
                      (        forth.asm):00580         * Scan for the next non-space character pointed to by X.
                      (        forth.asm):00581         * That character is returned through A. Flags are set accordingly.
E304 A680             (        forth.asm):00582 (4+1)   SCNSTOK lda     ,x+
E306 2704             (        forth.asm):00583 (3)             beq     @scstk1
E308 8120             (        forth.asm):00584 (2)             cmpa    #SP
E30A 27F8             (        forth.asm):00585 (3)             beq     SCNSTOK
E30C 301F             (        forth.asm):00586 (4+1)   @scstk1 leax    -1,x            Keep X pointing at the beginning of the token
E30E 9F02             (        forth.asm):00587 (4)             stx     TOKENSP
E310 4D               (        forth.asm):00588 (1)             tsta                    Have to test again because LEA affects Z
E311 39               (        forth.asm):00589 (4)             rts
                      (        forth.asm):00590         
                      (        forth.asm):00591         * Scan for the next white space character (or NUL) as an end of token marker.
                      (        forth.asm):00592         * Upon entry:
                      (        forth.asm):00593         * - X points to the input stream.
                      (        forth.asm):00594         * Upon return:
                      (        forth.asm):00595         * - X will point to the next space character or NUL.
                      (        forth.asm):00596         * - CURTOKL will hold the current token length (returned in B).
                      (        forth.asm):00597         * - TOKENEP will point to the end of the current token.
E312 5F               (        forth.asm):00598 (1)     SCNETOK clrb
E313 5C               (        forth.asm):00599 (1)     @scetok incb
E314 A680             (        forth.asm):00600 (4+1)           lda     ,x+
E316 2704             (        forth.asm):00601 (3)             beq     @scetk1
E318 8120             (        forth.asm):00602 (2)             cmpa    #SP
E31A 26F7             (        forth.asm):00603 (3)             bne     @scetok
E31C 301F             (        forth.asm):00604 (4+1)   @scetk1 leax    -1,x            Keep X pointing at the end of the token
E31E 9F04             (        forth.asm):00605 (4)             stx     TOKENEP
E320 5A               (        forth.asm):00606 (1)             decb
E321 D733             (        forth.asm):00607 (3)             stb     CURTOKL
E323 39               (        forth.asm):00608 (4)             rts
                      (        forth.asm):00609         
                      (        forth.asm):00610         * Check for numeric literal BASE prefix. On entry X has the input stream
                      (        forth.asm):00611         * pointer. On exit, BASE is altered if needed and the original BASE saved
                      (        forth.asm):00612         * to BASBKUP. If BASE was not changed, BASBKUP will be zero.
                      (        forth.asm):00613         * D is altered, X is updated if a BASE prefix is detected, other registers
                      (        forth.asm):00614         * are untouched.
E324 E684             (        forth.asm):00615 (4+0)   CKNBPFX ldb     ,x              B has a potential base prefix character
E326 3410             (        forth.asm):00616 (4+2)           pshs    x
E328 8EFF8B           (        forth.asm):00617 (3)             ldx     #BASALST        A associative list (A-list) of BASE prefixes
E32B A681             (        forth.asm):00618 (4+2)   @pflkup lda     ,x++            Potential BASE prefix character to A
E32D 2707             (        forth.asm):00619 (3)             beq     @nopfix         Reached the end of the A-list. No prefix found
E32F 103798           (        forth.asm):00620 (4)             cmpr    b,a             Prefix match?
E332 2707             (        forth.asm):00621 (3)             beq     @pfxfnd         Yes
E334 20F5             (        forth.asm):00622 (3)             bra     @pflkup
E336 0F28             (        forth.asm):00623 (5)     @nopfix clr     BASBKUP         Nothing to be restored to BASE
E338 3510             (        forth.asm):00624 (4+2)           puls    x
E33A 39               (        forth.asm):00625 (4)             rts
E33B 961F             (        forth.asm):00626 (3)     @pfxfnd lda     UBASE+1
E33D 9728             (        forth.asm):00627 (3)             sta     BASBKUP         Back up the current BASE value
E33F A61F             (        forth.asm):00628 (4+1)           lda     -1,x            The BASE specified by the prefix
E341 971F             (        forth.asm):00629 (3)             sta     UBASE+1         Update BASE
E343 3510             (        forth.asm):00630 (4+2)           puls    x
E345 3001             (        forth.asm):00631 (4+1)           leax    1,x             Skip the prefix from the input stream
                      (        forth.asm):00632         * The following is not especially pretty since we are altering system
                      (        forth.asm):00633         * stack contents owned by the caller. Yet it remains conducive to more
                      (        forth.asm):00634         * compact code. With only a few bytes of EEPROM left, I think this is legit.
E347 6A62             (        forth.asm):00635 (6+1)           dec     2,s             Decrement the stacked up flavour of CURTOKL
E349 39               (        forth.asm):00636 (4)             rts
                      (        forth.asm):00637         
                      (        forth.asm):00638         * Restore BASE if a numeric literal BASE prefix was detected.
                      (        forth.asm):00639         * X is to be preserved at all cost!
E34A 9628             (        forth.asm):00640 (3)     RSBSPFX lda     BASBKUP
E34C 2702             (        forth.asm):00641 (3)             beq     @theend
E34E 971F             (        forth.asm):00642 (3)             sta     UBASE+1
E350 39               (        forth.asm):00643 (4)     @theend rts
                      (        forth.asm):00644         
                      (        forth.asm):00645         * Check whether BASE is in the supported range ([2..36]).
E351 961F             (        forth.asm):00646 (3)     CKBASE  lda     UBASE+1         BASE
E353 8102             (        forth.asm):00647 (2)             cmpa    #2
E355 2505             (        forth.asm):00648 (3)             blo     @ckbser         Must be >= 2
E357 8124             (        forth.asm):00649 (2)             cmpa    #36
E359 2201             (        forth.asm):00650 (3)             bhi     @ckbser         And <= 36 (the ANSI maximum)
E35B 39               (        forth.asm):00651 (4)             rts
E35C C60F             (        forth.asm):00652 (2)     @ckbser ldb     #15             Invalid BASE
E35E BDE6DE           (        forth.asm):00653 (7)             jsr     ERRHDLR         No return
     E361             (        forth.asm):00654         CKBASRA equ     *
                      (        forth.asm):00655         
                      (        forth.asm):00656         * NUMCVT performs a signed string to number conversion. The input string is
                      (        forth.asm):00657         * acquired from the input stream. Note that this routine always is called
                      (        forth.asm):00658         * after a dictionary lookup (SWDIC), so TOKENSP and CURTOKL are guaranteed
                      (        forth.asm):00659         * to have been set previously. There are two ways out this routine:
                      (        forth.asm):00660         * - redirection to the error handler (Undefined word), or
                      (        forth.asm):00661         * - a converted cell returned through X.
                      (        forth.asm):00662         * This a re-implementation based on CONVERT but unlike CONVERT, which produces
                      (        forth.asm):00663         * an unsigned double as its output, this produces a signed single cell.
E361 8DEE             (        forth.asm):00664 (6)     NUMCVT  bsr     CKBASE          No return if BASE isn't in the [2..36] range
E363 9633             (        forth.asm):00665 (3)             lda     CURTOKL         Character count to go through
E365 3402             (        forth.asm):00666 (4+1)           pshs    a
E367 0F31             (        forth.asm):00667 (5)             clr     ISNEGF          Assume the result is positive
E369 9E02             (        forth.asm):00668 (4)             ldx     TOKENSP
E36B 8DB7             (        forth.asm):00669 (6)             bsr     CKNBPFX         Check for numeric literal BASE prefix
                      (        forth.asm):00670         * Check for optional minus sign.
E36D A684             (        forth.asm):00671 (4+0)           lda     ,x
E36F 812D             (        forth.asm):00672 (2)             cmpa    #'-
E371 2606             (        forth.asm):00673 (3)             bne     @ncini
E373 0C31             (        forth.asm):00674 (5)             inc     ISNEGF          Remember to negate the result before returning
E375 3001             (        forth.asm):00675 (4+1)           leax    1,x             Skip the negativity!
E377 6AE4             (        forth.asm):00676 (6+0)           dec     ,s              Decrement token length
E379 104F             (        forth.asm):00677 (2)     @ncini  clrd                    Initialize the result
E37B 119F1E           (        forth.asm):00678 (29)    @ncnxt  muld    UBASE           D multipled by BASE to Q (D:W)
E37E E680             (        forth.asm):00679 (4+1)           ldb     ,x+             Acquire next input char (ignore the product MSC)
E380 C030             (        forth.asm):00680 (2)             subb    #'0
E382 252D             (        forth.asm):00681 (3)             blo     @ncoor          Digit out of range
E384 C10A             (        forth.asm):00682 (2)             cmpb    #10
E386 2510             (        forth.asm):00683 (3)             blo     @ncnolt         No letter in potential BASE
                      (        forth.asm):00684                 IFEQ    CSSNTVE
E388 C111             (        forth.asm):00685 (2)             cmpb    #'A-'0
E38A 2525             (        forth.asm):00686 (3)             blo     @ncoor          Greater than 9 but lower than A
E38C C131             (        forth.asm):00687 (2)             cmpb    #'a-'0
E38E 2506             (        forth.asm):00688 (3)             blo     @ncisuc         Upper case already
E390 C14A             (        forth.asm):00689 (2)             cmpb    #'z-'0
E392 221D             (        forth.asm):00690 (3)             bhi     @ncoor          Definitely out of range
E394 C020             (        forth.asm):00691 (2)             subb    #'a-'A          To upper case
                      (        forth.asm):00692                 ENDC
E396 C007             (        forth.asm):00693 (2)     @ncisuc subb    #'A-':          A-Z to number
E398 D11F             (        forth.asm):00694 (3)     @ncnolt cmpb    UBASE+1         B has a digit. Make sure it's less than BASE
E39A 2415             (        forth.asm):00695 (3)             bhs     @ncoor
                      (        forth.asm):00696         * Digit in B has been validated wrt. BASE.
E39C 4F               (        forth.asm):00697 (1)             clra
E39D 103060           (        forth.asm):00698 (4)             addr    w,d
E3A0 6AE4             (        forth.asm):00699 (6+0)           dec     ,s              Are we done yet?
E3A2 26D7             (        forth.asm):00700 (3)             bne     @ncnxt          No. Iterate over to the next digit
E3A4 0D31             (        forth.asm):00701 (4)             tst     ISNEGF          Are we dealing with a negative number?
E3A6 2702             (        forth.asm):00702 (3)             beq     @ncdone         No
E3A8 1040             (        forth.asm):00703 (2)             negd                    Acknowledge the negativity
E3AA 3261             (        forth.asm):00704 (4+1)   @ncdone leas    1,s             Drop token length from the system stack
E3AC 1F01             (        forth.asm):00705 (4)             tfr     d,x             Return the result in X
E3AE 8D9A             (        forth.asm):00706 (6)             bsr     RSBSPFX         Restore BASE if needed
E3B0 39               (        forth.asm):00707 (4)             rts
E3B1 3261             (        forth.asm):00708 (4+1)   @ncoor  leas    1,s             Drop token length from the system stack
E3B3 9E02             (        forth.asm):00709 (4)             ldx     TOKENSP         Current digit is out of range
E3B5 C602             (        forth.asm):00710 (2)             ldb     #2              Undefined (X points to the offending word)
E3B7 BDE6DE           (        forth.asm):00711 (7)             jsr     ERRHDLR         No return
     E3BA             (        forth.asm):00712         NUMCVRA equ     *               For symbolic stack dump purposes
E3BA 12               (        forth.asm):00713 (1)             nop
                      (        forth.asm):00714         
                      (        forth.asm):00715         * Convert number stored in X to a string (depending on BASE value).
                      (        forth.asm):00716         * Output is stored in the global TBUFF buffer. X is preserved.
E3BB 8D94             (        forth.asm):00717 (6)     CVNSTR  bsr     CKBASE
E3BD 0F31             (        forth.asm):00718 (5)             clr     ISNEGF
E3BF 1F10             (        forth.asm):00719 (4)             tfr     x,d
E3C1 0D32             (        forth.asm):00720 (4)             tst     CVISSGN         Are we to perform a signed conversion?
E3C3 2708             (        forth.asm):00721 (3)             beq     @cvnst1
E3C5 104D             (        forth.asm):00722 (2)             tstd
E3C7 2A04             (        forth.asm):00723 (3)             bpl     @cvnst1
E3C9 0C31             (        forth.asm):00724 (5)             inc     ISNEGF          Number being converted is negative
E3CB 1040             (        forth.asm):00725 (2)             negd
E3CD 1F06             (        forth.asm):00726 (4)     @cvnst1 tfr     d,w
E3CF 104F             (        forth.asm):00727 (2)             clrd
E3D1 108E03F7         (        forth.asm):00728 (4)             ldy     #TBUFF+19       Sign + 16 digits + terminator + 1
E3D5 6FA2             (        forth.asm):00729 (6+1)           clr     ,-y             End of string marker
E3D7 119E1E           (        forth.asm):00730 (35)    @cvnst2 divq    UBASE           D returns the modulo and W the quotient
E3DA 8630             (        forth.asm):00731 (2)             lda     #'0
E3DC C10A             (        forth.asm):00732 (2)             cmpb    #10
E3DE 2502             (        forth.asm):00733 (3)             bcs     @cvnst3
                      (        forth.asm):00734         * BASE has letters among its valid numbers.
E3E0 8637             (        forth.asm):00735 (2)             lda     #'A-10
E3E2 103089           (        forth.asm):00736 (4)     @cvnst3 addr    a,b
E3E5 E7A2             (        forth.asm):00737 (4+1)           stb     ,-y
E3E7 104F             (        forth.asm):00738 (2)             clrd
E3E9 105D             (        forth.asm):00739 (2)             tstw
E3EB 26EA             (        forth.asm):00740 (3)             bne     @cvnst2
E3ED C620             (        forth.asm):00741 (2)             ldb     #SP
E3EF 0D31             (        forth.asm):00742 (4)             tst     ISNEGF
E3F1 2702             (        forth.asm):00743 (3)             beq     @cvnst4
E3F3 C62D             (        forth.asm):00744 (2)             ldb     #'-
E3F5 E7A2             (        forth.asm):00745 (4+1)   @cvnst4 stb     ,-y
                      (        forth.asm):00746         * We need to insert leading spaces up to the beginning of the output buffer.
E3F7 C620             (        forth.asm):00747 (2)             ldb     #SP
E3F9 108C03E4         (        forth.asm):00748 (4)     @cvnst5 cmpy    #TBUFF
E3FD 2601             (        forth.asm):00749 (3)             bne     @cvnst6
E3FF 39               (        forth.asm):00750 (4)             rts
E400 E7A2             (        forth.asm):00751 (4+1)   @cvnst6 stb     ,-y
E402 20F5             (        forth.asm):00752 (3)             bra     @cvnst5
                      (        forth.asm):00753         
                      (        forth.asm):00754         * Check for minimal data stack depth. On input D has the lowest possible stack
                      (        forth.asm):00755         * address that satisfies the needs of the caller. This routine is meant
                      (        forth.asm):00756         * to support "transactional" behaviour, which is intended to improve
                      (        forth.asm):00757         * debugging support.
E404 103703           (        forth.asm):00758 (4)     CHKNDPT cmpr    d,u
E407 2201             (        forth.asm):00759 (3)             bhi     @stkudf
E409 39               (        forth.asm):00760 (4)             rts
E40A C601             (        forth.asm):00761 (2)     @stkudf ldb     #1              Data stack underflow
E40C BDE6DE           (        forth.asm):00762 (7)             jsr     ERRHDLR         No return
     E40F             (        forth.asm):00763         CKDPTRA equ     *
                      (        forth.asm):00764         
                      (        forth.asm):00765         * Paramater stack's depth checking primitves (transactional behavior support).
E40F CC028E20F0       (        forth.asm):00766         MIN1PST MINDREQ 1
                      (        forth.asm):00767         
E414 CC028C20EB       (        forth.asm):00768         MIN2PST MINDREQ 2
                      (        forth.asm):00769         
E419 CC028A20E6       (        forth.asm):00770         MIN3PST MINDREQ 3
                      (        forth.asm):00771         
E41E CC028820E1       (        forth.asm):00772         MIN4PST MINDREQ 4
                      (        forth.asm):00773         
                      (        forth.asm):00774         * Search word beginning at address TOKENSP in the dictionary.
                      (        forth.asm):00775         * Upon return Z will be set if the word was not found.
                      (        forth.asm):00776         * Otherwise, Y will point to the code section of the word.
                      (        forth.asm):00777         * CSSNTVE (defined in constants.asm) defines whether the
                      (        forth.asm):00778         * dictionary match is case sensitive or not.
                      (        forth.asm):00779         * Important note: if the word is found TOKENEP will be copied to TOKENSP.
E423 9E02             (        forth.asm):00780 (4)     SWDIC   ldx     TOKENSP
E425 BDE312           (        forth.asm):00781 (7)             jsr     SCNETOK         B has CURTOKL
E428 9E08             (        forth.asm):00782 (4)             ldx     DICEND
E42A 9F16             (        forth.asm):00783 (4)             stx     VLPRVEP         Last dictionary entry code address + 1
E42C 9E02             (        forth.asm):00784 (4)             ldx     TOKENSP
E42E 109E06           (        forth.asm):00785 (5)             ldy     LSTWAD          Latest word header address to Y
E431 2606             (        forth.asm):00786 (3)     @swrdc0 bne     @swrdc1
E433 1FC2             (        forth.asm):00787 (4)             tfr     0,y             Word not found. Z is set
E435 109F0E           (        forth.asm):00788 (5)             sty     PLOAD
E438 39               (        forth.asm):00789 (4)             rts
E439 A6A4             (        forth.asm):00790 (4+0)   @swrdc1 lda     ,y              Word attribute to A
E43B 841F             (        forth.asm):00791 (2)             anda    #WRLNMSK        Extract word length
E43D 3420             (        forth.asm):00792 (4+2)           pshs    y
E43F 103798           (        forth.asm):00793 (4)             cmpr    b,a             Word length match?
E442 2638             (        forth.asm):00794 (3)             bne     @swrdc3         No, point to next dictionary entry
E444 3121             (        forth.asm):00795 (4+1)           leay    1,y
E446 A6A0             (        forth.asm):00796 (4+1)   @swrdc2 lda     ,y+
                      (        forth.asm):00797                 IFNE    CSSNTVE
                      (        forth.asm):00798                 cmpa    ,x+             Case sensitive dictionary
                      (        forth.asm):00799                 ELSE
E448 1F9E             (        forth.asm):00800 (4)             tfr     b,e             Case insensitive search (preferred)
E44A E680             (        forth.asm):00801 (4+1)           ldb     ,x+
E44C C161             (        forth.asm):00802 (2)             cmpb    #'a
E44E 2506             (        forth.asm):00803 (3)             bcs     @nochg
E450 C17B             (        forth.asm):00804 (2)             cmpb    #'z+1
E452 2402             (        forth.asm):00805 (3)             bcc     @nochg
E454 C020             (        forth.asm):00806 (2)             subb    #'a-'A
E456 103798           (        forth.asm):00807 (4)     @nochg  cmpr    b,a
E459 1FE9             (        forth.asm):00808 (4)             tfr     e,b
                      (        forth.asm):00809                 ENDC
E45B 261F             (        forth.asm):00810 (3)             bne     @swrdc3
E45D 5A               (        forth.asm):00811 (1)             decb
E45E 26E6             (        forth.asm):00812 (3)             bne     @swrdc2
                      (        forth.asm):00813         * Word match!
E460 3510             (        forth.asm):00814 (4+2)           puls    x
E462 E684             (        forth.asm):00815 (4+0)           ldb     ,x              Word attribute byte to B
E464 4F               (        forth.asm):00816 (1)             clra
E465 58               (        forth.asm):00817 (1)             lslb                    Bit 7 to CFLAG
E466 49               (        forth.asm):00818 (1)             rola                    CFLAG to A
E467 9734             (        forth.asm):00819 (3)             sta     IMDFLG          Set IMMEDIATE flag
E469 4F               (        forth.asm):00820 (1)             clra
E46A 58               (        forth.asm):00821 (1)             lslb                    Bit 6 to CFLAG
E46B 49               (        forth.asm):00822 (1)             rola                    CFLAG to A
E46C 9735             (        forth.asm):00823 (3)             sta     DEFFLG          Set DEFINE flag
E46E 9E04             (        forth.asm):00824 (4)             ldx     TOKENEP
E470 9F02             (        forth.asm):00825 (4)             stx     TOKENSP
                      (        forth.asm):00826                 IFNE    RELFEAT
E472 3123             (        forth.asm):00827 (4+1)           leay    3,y             Skip back pointer and checksum. Return XT
                      (        forth.asm):00828                 ELSE
                      (        forth.asm):00829                 leay    2,y             Skip back pointer. Return XT
                      (        forth.asm):00830                 ENDC
E474 DC16             (        forth.asm):00831 (4)             ldd     VLPRVEP
E476 103220           (        forth.asm):00832 (4)             subr    y,d
E479 DD0E             (        forth.asm):00833 (4)             std     PLOAD
E47B 39               (        forth.asm):00834 (4)             rts                     NZ since there is no zero payload word
E47C 3520             (        forth.asm):00835 (4+2)   @swrdc3 puls    y               Point to previous word header
E47E 109F16           (        forth.asm):00836 (5)             sty     VLPRVEP
E481 4F               (        forth.asm):00837 (1)             clra
E482 E6A0             (        forth.asm):00838 (4+1)           ldb     ,y+
E484 C41F             (        forth.asm):00839 (2)             andb    #WRLNMSK
E486 31AB             (        forth.asm):00840 (4+2)           leay    d,y
E488 9E02             (        forth.asm):00841 (4)             ldx     TOKENSP
E48A D633             (        forth.asm):00842 (3)             ldb     CURTOKL
E48C 10AEA4           (        forth.asm):00843 (6+0)           ldy     ,y
E48F 20A0             (        forth.asm):00844 (3)             bra     @swrdc0
                      (        forth.asm):00845         
                      (        forth.asm):00846         * Create new dictionary entry. The word name being created is acquired from
                      (        forth.asm):00847         * the input stream. Warning, this requires a writable dictionary!
                      (        forth.asm):00848         * The new end of the dictionary is returned in Y. W is preserved.
E491 1038             (        forth.asm):00849 (6)     LOCWRT  pshsw
E493 9E08             (        forth.asm):00850 (4)             ldx     DICEND
                      (        forth.asm):00851                 IFNE    DEBUG
                      (        forth.asm):00852                 cmpx    #ROMSTRT
                      (        forth.asm):00853                 bcs     @locwr0
                      (        forth.asm):00854                 ldb     #10             Assertion failure (trying to write to ROM!)
                      (        forth.asm):00855                 jsr     ERRHDLR         No return
E495                  (        forth.asm):00856         LWAFRA  equ     *
                      (        forth.asm):00857                 ENDC
E495 9F0C             (        forth.asm):00858 (4)     @locwr0 stx     BDICEND         Back pointer up
E497 9E06             (        forth.asm):00859 (4)             ldx     LSTWAD
E499 9F0A             (        forth.asm):00860 (4)             stx     BLSTWAD         Back pointer up
E49B BDE7AF           (        forth.asm):00861 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
E49E 6D84             (        forth.asm):00862 (5+0)           tst     ,x
E4A0 2605             (        forth.asm):00863 (3)             bne     @locwr2
E4A2 C605             (        forth.asm):00864 (2)     @locwr1 ldb     #5              Missing word name
E4A4 BDE6DE           (        forth.asm):00865 (7)             jsr     ERRHDLR         No return
     E4A7             (        forth.asm):00866         LWMNRA  equ     *               LOCWRT missing word name return address
E4A7 BDE304           (        forth.asm):00867 (7)     @locwr2 jsr     SCNSTOK
E4AA 27F6             (        forth.asm):00868 (3)             beq     @locwr1         End of line reached
E4AC BDE312           (        forth.asm):00869 (7)             jsr     SCNETOK         X has TOKENEP, B has CURTOKL
E4AF 109E02           (        forth.asm):00870 (5)             ldy     TOKENSP
E4B2 103221           (        forth.asm):00871 (4)             subr    y,x
E4B5 3410             (        forth.asm):00872 (4+2)           pshs    x               Word length to the system stack
E4B7 9E08             (        forth.asm):00873 (4)             ldx     DICEND
E4B9 A661             (        forth.asm):00874 (4+1)           lda     1,s             Word length LSB in the system stack
E4BB 8120             (        forth.asm):00875 (2)             cmpa    #1+WRLNMSK      Max word length is 31, 79-STANDARD compliant
E4BD 2505             (        forth.asm):00876 (3)             blo     @lcwr21
E4BF C610             (        forth.asm):00877 (2)             ldb     #16             Word name is too long
E4C1 BDE6DE           (        forth.asm):00878 (7)             jsr     ERRHDLR
     E4C4             (        forth.asm):00879         WTOOLNG equ     *
E4C4 A780             (        forth.asm):00880 (4+1)   @lcwr21 sta     ,x+             Word length to dictionary
E4C6 10A6E1           (        forth.asm):00881 (6+2)           ldw     ,s++            16-bit word length to W
E4C9 1E12             (        forth.asm):00882 (5)             exg     x,y             Y points to the dictionary, X has TOKENSP
                      (        forth.asm):00883                 IFNE    CSSNTVE
                      (        forth.asm):00884                 tfm     x+,y+           Word name to dictionary, as is
                      (        forth.asm):00885                 ELSE
E4CB 1FF9             (        forth.asm):00886 (4)             tfr     f,b             Force dictionary entry to upper case
E4CD A680             (        forth.asm):00887 (4+1)   @locwr3 lda     ,x+
E4CF 8161             (        forth.asm):00888 (2)             cmpa    #'a
E4D1 2506             (        forth.asm):00889 (3)             bcs     @locwr4
E4D3 817B             (        forth.asm):00890 (2)             cmpa    #'z+1
E4D5 2402             (        forth.asm):00891 (3)             bcc     @locwr4
E4D7 8020             (        forth.asm):00892 (2)             suba    #'a-'A          To upper case
E4D9 A7A0             (        forth.asm):00893 (4+1)   @locwr4 sta     ,y+
E4DB 5A               (        forth.asm):00894 (1)             decb
E4DC 26EF             (        forth.asm):00895 (3)             bne     @locwr3
                      (        forth.asm):00896                 ENDC
E4DE 1F10             (        forth.asm):00897 (4)             tfr     x,d
E4E0 931C             (        forth.asm):00898 (4)             subd    BSBFADR
E4E2 DD22             (        forth.asm):00899 (4)             std     UTOIN           Skip word name in the input stream
E4E4 9E06             (        forth.asm):00900 (4)             ldx     LSTWAD
E4E6 AFA1             (        forth.asm):00901 (5+2)           stx     ,y++            Back pointer to dictionary
                      (        forth.asm):00902                 IFNE    RELFEAT
E4E8 6FA0             (        forth.asm):00903 (6+1)           clr     ,y+             Initialize the checksum header field
                      (        forth.asm):00904                 ENDC
E4EA 109F08           (        forth.asm):00905 (5)             sty     DICEND
E4ED 109F12           (        forth.asm):00906 (5)             sty     RECADDR         Should we resort to recursion later on
E4F0 1039             (        forth.asm):00907 (6)             pulsw
E4F2 39               (        forth.asm):00908 (4)             rts
                      (        forth.asm):00909         
                      (        forth.asm):00910         * Compile 'ldx  #X; jsr NPUSH'.
                      (        forth.asm):00911         * DICEND is updated and returned in Y.
E4F3 109E08           (        forth.asm):00912 (5)     LITER   ldy     DICEND
E4F6 868E             (        forth.asm):00913 (2)             lda     #LDXOPC         LDX immediate
E4F8 8D10             (        forth.asm):00914 (6)             bsr     VARCON2
E4FA 86BD             (        forth.asm):00915 (2)             lda     #JSROPC         JSR extended
E4FC BDE149           (        forth.asm):00916 (7)             jsr     CHKRTS          Check if the final RTS can be omitted
E4FF 8D06             (        forth.asm):00917 (6)             bsr     VARCON1
E501 109F08           (        forth.asm):00918 (5)             sty     DICEND
E504 39               (        forth.asm):00919 (4)             rts
                      (        forth.asm):00920         
                      (        forth.asm):00921         * Compile 'jmp  NPUSH'.
                      (        forth.asm):00922         * Y points to the end of the dictionary on entry and on exit.
E505 867E             (        forth.asm):00923 (2)     VARCON  lda     #JMPOPC         JMP extended
E507 8EE75B           (        forth.asm):00924 (3)     VARCON1 ldx     #NPUSH
E50A A7A0             (        forth.asm):00925 (4+1)   VARCON2 sta     ,y+
E50C AFA1             (        forth.asm):00926 (5+2)           stx     ,y++
E50E 39               (        forth.asm):00927 (4)             rts
                      (        forth.asm):00928         
                      (        forth.asm):00929         * Used by U<, U>, <, >.
E50F BDE414           (        forth.asm):00930 (7)     CMP2    jsr     MIN2PST         At least 2 cells must be stacked up
E512 10AEC4           (        forth.asm):00931 (6+0)   CMP2RA  ldy     ,u
E515 AE42             (        forth.asm):00932 (5+1)           ldx     2,u
E517 103721           (        forth.asm):00933 (4)             cmpr    y,x
E51A 1FA9             (        forth.asm):00934 (4)             tfr     cc,b
                      (        forth.asm):00935                 IFNE    DEBUG
                      (        forth.asm):00936                 clra
                      (        forth.asm):00937                 std     CCREG
                      (        forth.asm):00938                 ENDC
E51C 1FC1             (        forth.asm):00939 (4)             tfr     0,x
E51E 3344             (        forth.asm):00940 (4+1)           leau    4,u
E520 1F9A             (        forth.asm):00941 (4)             tfr     b,cc
E522 39               (        forth.asm):00942 (4)             rts
                      (        forth.asm):00943         
                      (        forth.asm):00944         * Used by CMOVE, CMOVE>, MOVE.
E523 BDE419           (        forth.asm):00945 (7)     ACQMOVP jsr     MIN3PST         At least 3 cells must be stacked up
E526 10A6C4           (        forth.asm):00946 (6+0)   ACQVMRA ldw     ,u              Byte count
E529 10AE42           (        forth.asm):00947 (6+1)           ldy     2,u             Destination address
E52C AE44             (        forth.asm):00948 (5+1)           ldx     4,u             Source address
E52E 3346             (        forth.asm):00949 (4+1)           leau    6,u             Drop 3 cells from the user stack
E530 39               (        forth.asm):00950 (4)             rts
                      (        forth.asm):00951         
                      (        forth.asm):00952         * FDCTSYM enveadours to match the address stored in Y to a dictionary entry.
                      (        forth.asm):00953         * Upon a successful flexible match, it will output a string in the form of
                      (        forth.asm):00954         * <wordname>+<offset> to the string pointed to by X. <wordname> refers to the
                      (        forth.asm):00955         * code entry point of the matched word. <offset> will be expressed in hex.
                      (        forth.asm):00956         * If a match is found, Z will be clear, otherwise it will be set.
                      (        forth.asm):00957         * A candidate for a word code address must meet the following criteria:
                      (        forth.asm):00958         * ((Y U>= #EBUFS) AND (Y U< #THEEND)) OR ((Y U>= #WDICSPC) AND (Y U< DICEND)).
                      (        forth.asm):00959         * Upon return:
                      (        forth.asm):00960         * - the string pointed to by X will updated with its symbolic match
                      (        forth.asm):00961         *   (NUL terminated), if there is one. X itself might have been altered.
                      (        forth.asm):00962         * - Y should be preserved.
                      (        forth.asm):00963         * EBUFS (EMPTY-BUFFERS) header address is the last word in the dictionary.
                      (        forth.asm):00964                 IFNE    SSDFEAT
E531 3430             (        forth.asm):00965 (4+4)   FDCTSYM pshs    y,x     
E533 1F21             (        forth.asm):00966 (4)             tfr     y,x             Potential execution token to X
E535 8CE8EE           (        forth.asm):00967 (3)             cmpx    #EBUFS
E538 2505             (        forth.asm):00968 (3)             blo     @fdstr2 
E53A 8CFDB0           (        forth.asm):00969 (3)             cmpx    #THEEND
E53D 250D             (        forth.asm):00970 (3)             blo     @fdsmtc
E53F 8C0C50           (        forth.asm):00971 (3)     @fdstr2 cmpx    #WDICSPC        Term 2 of the predicate for a valid word addr
E542 2504             (        forth.asm):00972 (3)             blo     @fdsnom
E544 9C08             (        forth.asm):00973 (4)             cmpx    DICEND
E546 2504             (        forth.asm):00974 (3)             blo     @fdsmtc
E548 4F               (        forth.asm):00975 (1)     @fdsnom clra                    No match (Z is set)
E549 3530             (        forth.asm):00976 (4+4)           puls    x,y
E54B 39               (        forth.asm):00977 (4)             rts
E54C 9E06             (        forth.asm):00978 (4)     @fdsmtc ldx     LSTWAD          Potential match. Scan upward from LAST
                      (        forth.asm):00979         * X points to the latest word header, Y has an execution token.
E54E 109608           (        forth.asm):00980 (5)             ldw     DICEND          W points to the end of the code section
E551 3410             (        forth.asm):00981 (4+2)   @fdslop pshs    x               Pointer to the current word header
E553 E680             (        forth.asm):00982 (4+1)           ldb     ,x+
E555 C41F             (        forth.asm):00983 (2)             andb    #WRLNMSK
E557 3A               (        forth.asm):00984 (1)             abx                     Skip word name string
E558 EC81             (        forth.asm):00985 (5+2)           ldd     ,x++            Backlink to D
                      (        forth.asm):00986                 IFNE    RELFEAT
E55A 3001             (        forth.asm):00987 (4+1)           leax    1,x             Skip the checksum
                      (        forth.asm):00988                 ENDC
E55C 103712           (        forth.asm):00989 (4)             cmpr    x,y
E55F 2532             (        forth.asm):00990 (3)             blo     @fdsnwd
E561 103762           (        forth.asm):00991 (4)             cmpr    w,y
E564 222D             (        forth.asm):00992 (3)             bhi     @fdsnwd         An equal address is allowed here, in case
                      (        forth.asm):00993         * jsr ERRHDLR is the last instruction for the word under consideration.
                      (        forth.asm):00994         * This happens to be the case for FORGET and LPAR.
                      (        forth.asm):00995         * Y matches the code range for the current word.
E566 3510             (        forth.asm):00996 (4+2)           puls    x
E568 E680             (        forth.asm):00997 (4+1)           ldb     ,x+
E56A C41F             (        forth.asm):00998 (2)             andb    #WRLNMSK
E56C 1F9F             (        forth.asm):00999 (4)             tfr     b,f
E56E 114F             (        forth.asm):01000 (2)             clre                    W has the matched word length
E570 10AEE4           (        forth.asm):01001 (6+0)           ldy     ,s              Y points to the target buffer
E573 113812           (        forth.asm):01002 (6+?)           tfm     x+,y+
E576 6FA4             (        forth.asm):01003 (6+0)           clr     ,y              We need this in case the offset is zero
                      (        forth.asm):01004         * Offset processing.
                      (        forth.asm):01005                 IFNE    RELFEAT
E578 3003             (        forth.asm):01006 (4+1)           leax    3,x             Skip backlink and checksum
                      (        forth.asm):01007                 ELSE
                      (        forth.asm):01008                 leax    2,x             Skip backlink
                      (        forth.asm):01009                 ENDC
E57A EC62             (        forth.asm):01010 (5+1)           ldd     2,s             Execution token to D
E57C 103210           (        forth.asm):01011 (4)             subr    x,d             Offset between XT and word entry point to D
E57F 270D             (        forth.asm):01012 (3)             beq     @skoffs         Skip displaying the offset if it is zero
E581 3402             (        forth.asm):01013 (4+1)           pshs    a               Preserve the offset's MSB
E583 862B             (        forth.asm):01014 (2)             lda     #'+
E585 A7A0             (        forth.asm):01015 (4+1)           sta     ,y+
E587 3502             (        forth.asm):01016 (4+1)           puls    a               Restore the offset's MSB
E589 1F21             (        forth.asm):01017 (4)             tfr     y,x
E58B BDE184           (        forth.asm):01018 (7)             jsr     HDMP4           Dump hex incarnation of the offset to X
E58E 3530             (        forth.asm):01019 (4+4)   @skoffs puls    x,y
E590 1CFB             (        forth.asm):01020 (2)             andcc   #^ZFLAG         Clear ZFLAG
E592 39               (        forth.asm):01021 (4)             rts
                      (        forth.asm):01022         * Point to the next word.
E593 1039             (        forth.asm):01023 (6)     @fdsnwd pulsw                   Retrieve current word header address
E595 104D             (        forth.asm):01024 (2)             tstd
E597 27AF             (        forth.asm):01025 (3)             beq     @fdsnom         Just met the last dictionary entry
E599 1F01             (        forth.asm):01026 (4)             tfr     d,x             Point to previous word header
E59B 10810C50         (        forth.asm):01027 (4)             cmpw    #WDICSPC        Are we transitioning from RAM to ROM?
E59F 26B0             (        forth.asm):01028 (3)             bne     @fdslop         No singularity
E5A1 1086FDB0         (        forth.asm):01029 (4)             ldw     #THEEND         Won't be able to diagnose the ROM based @...
E5A5 20AA             (        forth.asm):01030 (3)             bra     @fdslop
                      (        forth.asm):01031         
                      (        forth.asm):01032         * Find the best possible symbolic approximation of Y and store it to the
                      (        forth.asm):01033         * buffer pointed to by X.
                      (        forth.asm):01034         * On entry:
                      (        forth.asm):01035         * - Y has a code address which is to be matched with a symbolic name + offset.
                      (        forth.asm):01036         * - X points to a buffer where the resolution is to be stored.
                      (        forth.asm):01037         * On return:
                      (        forth.asm):01038         * - Y is to be preserved.
                      (        forth.asm):01039         * - the output buffer will be updated with the best symbolic match (NUL term'd).
E5A7 3430             (        forth.asm):01040 (4+4)   FINDSYM pshs    y,x
E5A9 8D86             (        forth.asm):01041 (6)             bsr     FDCTSYM         Search the dictionary first (flexible match)
E5AB 261B             (        forth.asm):01042 (3)             bne     @dctmfn         Dictionary match found
E5AD 8EE5CD           (        forth.asm):01043 (3)             ldx     #NDCTWKS        Search kernel symbols for an exact match
E5B0 EC81             (        forth.asm):01044 (5+2)   @fsmlop ldd     ,x++
E5B2 270B             (        forth.asm):01045 (3)             beq     @fsmfnd         End of well known symbols list?
E5B4 103720           (        forth.asm):01046 (4)             cmpr    y,d
E5B7 2706             (        forth.asm):01047 (3)             beq     @fsmfnd
                      (        forth.asm):01048         * No well known symbol match. Skip string.
E5B9 A680             (        forth.asm):01049 (4+1)   @fsmskp lda     ,x+
E5BB 26FC             (        forth.asm):01050 (3)             bne     @fsmskp
E5BD 20F1             (        forth.asm):01051 (3)             bra     @fsmlop
E5BF 10AEE4           (        forth.asm):01052 (6+0)   @fsmfnd ldy     ,s
E5C2 A680             (        forth.asm):01053 (4+1)   @fsmfn2 lda     ,x+
E5C4 A7A0             (        forth.asm):01054 (4+1)           sta     ,y+
E5C6 26FA             (        forth.asm):01055 (3)             bne     @fsmfn2
E5C8 3262             (        forth.asm):01056 (4+1)   @dctmfn leas    2,s             Drop X from the system stack
E5CA 3520             (        forth.asm):01057 (4+2)           puls    y
E5CC 39               (        forth.asm):01058 (4)             rts
                      (        forth.asm):01059         
                      (        forth.asm):01060         * Non-dictionary well known symbols.
E5CD E000             (        forth.asm):01061         NDCTWKS fdb     IODZHDL         Illegal opcode/Division by zero trap handler
E5CF 494F445A48444C00 (        forth.asm):01062                 fcn     'IODZHDL'
E5D7 E777             (        forth.asm):01063                 fdb     DPOPRA          Data stack underflow
E5D9 44504F50524100   (        forth.asm):01064                 fcn     'DPOPRA'
E5E0 E768             (        forth.asm):01065                 fdb     DPSHRA          Data stack overflow
E5E2 44505348524100   (        forth.asm):01066                 fcn     'DPSHRA'
E5E9 E7AF             (        forth.asm):01067                 fdb     RPOPRA          Return stack underflow
E5EB 52504F50524100   (        forth.asm):01068                 fcn     'RPOPRA'
E5F2 E795             (        forth.asm):01069                 fdb     RPSHRA          Return stack overflow
E5F4 52505348524100   (        forth.asm):01070                 fcn     'RPSHRA'
E5FB E6DE             (        forth.asm):01071                 fdb     ERRHDLR         Error handler
E5FD 45525248444C5200 (        forth.asm):01072                 fcn     'ERRHDLR'
E605 E361             (        forth.asm):01073                 fdb     CKBASRA         Illegal BASE value
E607 434B424153524100 (        forth.asm):01074                 fcn     'CKBASRA'
E60F E40F             (        forth.asm):01075                 fdb     CKDPTRA         Not enough parameters supplied (transac. behav.)
E611 434B445054524100 (        forth.asm):01076                 fcn     'CKDPTRA'
E619 E404             (        forth.asm):01077                 fdb     CHKNDPT         Check data stack minimum depth (transac. behav.)
E61B 43484B4E44505400 (        forth.asm):01078                 fcn     'CHKNDPT'
E623 E512             (        forth.asm):01079                 fdb     CMP2RA          Missing operand in any of U<, U>, <, >
E625 434D5032524100   (        forth.asm):01080                 fcn     'CMP2RA'
E62C E526             (        forth.asm):01081                 fdb     ACQVMRA         Three operands missing in any of CMOVE,
                      (        forth.asm):01082         *                               CMOVE>, MOVE
E62E 414351564D524100 (        forth.asm):01083                 fcn     'ACQVMRA'
E636 E0CD             (        forth.asm):01084                 fdb     MINTLRA         Main interpreter loop return address
E638 4D494E544C524100 (        forth.asm):01085                 fcn     'MINTLRA'
E640 E3BA             (        forth.asm):01086                 fdb     NUMCVRA         ? while converting a string to a number
E642 4E554D4356524100 (        forth.asm):01087                 fcn     'NUMCVRA'
E64A E0E0             (        forth.asm):01088                 fdb     NMCVIRA         Numeric conversion error while interpreting
E64C 4E4D435649524100 (        forth.asm):01089                 fcn     'NMCVIRA'
E654 E144             (        forth.asm):01090                 fdb     NMCVCRA         Numeric conversion error while compiling
E656 4E4D435643524100 (        forth.asm):01091                 fcn     'NMCVCRA'
E65E E117             (        forth.asm):01092                 fdb     INTRPRA         Interpreter RA (after the execution of a word)
E660 494E545250524100 (        forth.asm):01093                 fcn     'INTRPRA'
E668 E132             (        forth.asm):01094                 fdb     COMPLRA         Compiler RA (after the execution of an IMD word)
E66A 434F4D504C524100 (        forth.asm):01095                 fcn     'COMPLRA'
E672 E4A7             (        forth.asm):01096                 fdb     LWMNRA          Missing word name in LOCWRT
E674 4C574D4E524100   (        forth.asm):01097                 fcn     'LWMNRA'
E67B E233             (        forth.asm):01098                 fdb     SYNCRA          SYNC return address in GETCH
E67D 53594E43524100   (        forth.asm):01099                 fcn     'SYNCRA'
E684 E885             (        forth.asm):01100                 fdb     CFR1SRA         CF read one sector failed
E686 4346523153524100 (        forth.asm):01101                 fcn     'CFR1SRA'
E68E E75B             (        forth.asm):01102                 fdb     NPUSH           Not an error RA but useful to have as a symbol
E690 4E5055534800     (        forth.asm):01103                 fcn     'NPUSH'
E696 E778             (        forth.asm):01104                 fdb     RPUSH           Not an error RA but useful to have as a symbol
E698 525055534800     (        forth.asm):01105                 fcn     'RPUSH'
E69E E769             (        forth.asm):01106                 fdb     NPOP            Not an error RA but useful to have as a symbol
E6A0 4E504F5000       (        forth.asm):01107                 fcn     'NPOP'
E6A5 E796             (        forth.asm):01108                 fdb     RPOP            Not an error RA but useful to have as a symbol
E6A7 52504F5000       (        forth.asm):01109                 fcn     'RPOP'
E6AC E25F             (        forth.asm):01110                 fdb     PUTS            Not an error RA but useful to have as a symbol
E6AE 5055545300       (        forth.asm):01111                 fcn     'PUTS'
                      (        forth.asm):01112                 IFNE    DEBUG
                      (        forth.asm):01113                 fdb     LWAFRA          Assertion failure in LOCWRT
                      (        forth.asm):01114                 fcn     'LOCWRTAF'
                      (        forth.asm):01115                 ENDC
E6B3 0000             (        forth.asm):01116                 fdb     0               End of list
E6B5 3F3F3F00         (        forth.asm):01117                 fcn     '???'           Admit we have no clue!
                      (        forth.asm):01118                 ENDC                    SSDFEAT
                      (        forth.asm):01119         
                      (        forth.asm):01120         * Print ' (xxxx/yyyy)' where xxxx is the hex representation for BLK @ and
                      (        forth.asm):01121         * yyyy is the hex representation for >IN @.
E6B9 8E0394           (        forth.asm):01122 (3)     PRBLKIN ldx     #HEXBUF
E6BC 8620             (        forth.asm):01123 (2)             lda     #SP
E6BE A780             (        forth.asm):01124 (4+1)           sta     ,x+
E6C0 8628             (        forth.asm):01125 (2)             lda     #'(
E6C2 A780             (        forth.asm):01126 (4+1)           sta     ,x+
E6C4 DC24             (        forth.asm):01127 (4)             ldd     UBLK
E6C6 BDE184           (        forth.asm):01128 (7)             jsr     HDMP4
E6C9 862F             (        forth.asm):01129 (2)             lda     #'/
E6CB A780             (        forth.asm):01130 (4+1)           sta     ,x+
E6CD DC22             (        forth.asm):01131 (4)             ldd     UTOIN
E6CF BDE184           (        forth.asm):01132 (7)             jsr     HDMP4
E6D2 8629             (        forth.asm):01133 (2)             lda     #')
E6D4 A780             (        forth.asm):01134 (4+1)           sta     ,x+
E6D6 6F84             (        forth.asm):01135 (6+0)           clr     ,x
E6D8 8E0394           (        forth.asm):01136 (3)             ldx     #HEXBUF
E6DB 7EE25F           (        forth.asm):01137 (3)             jmp     PUTS
                      (        forth.asm):01138         
                      (        forth.asm):01139         * Handle error condition. Error code is in B.
                      (        forth.asm):01140         * If B is 2 (undefined) X points to a string of length CURTOKL that has the
                      (        forth.asm):01141         * offending word.
E6DE 10AEE4           (        forth.asm):01142 (6+0)   ERRHDLR ldy     ,s              Invoking return address
                      (        forth.asm):01143         * In case of a trap return, we enter here with Y set to #IODZHDL
E6E1 BDE26C           (        forth.asm):01144 (7)     ERRHD1  jsr     PUTCR           GNU Forth does this in its exception handler
E6E4 C102             (        forth.asm):01145 (2)             cmpb    #2              Undefined symbol?
E6E6 2618             (        forth.asm):01146 (3)             bne     @perrm          No
E6E8 8627             (        forth.asm):01147 (2)             lda     #''             Begin quote
E6EA BDE24C           (        forth.asm):01148 (7)             jsr     PUTCH
E6ED A680             (        forth.asm):01149 (4+1)   @prtsym lda     ,x+             Display undefined symbol name
E6EF BDE24C           (        forth.asm):01150 (7)             jsr     PUTCH
E6F2 0A33             (        forth.asm):01151 (5)             dec     CURTOKL
E6F4 26F7             (        forth.asm):01152 (3)             bne     @prtsym
E6F6 8627             (        forth.asm):01153 (2)             lda     #''             End quote
E6F8 BDE24C           (        forth.asm):01154 (7)             jsr     PUTCH
E6FB 8620             (        forth.asm):01155 (2)             lda     #SP             BL EMIT
E6FD BDE24C           (        forth.asm):01156 (7)             jsr     PUTCH
E700 8EFE72           (        forth.asm):01157 (3)     @perrm  ldx     #ERRMTBL        Regular error handling
E703 5D               (        forth.asm):01158 (1)     @nxterr tstb
E704 2633             (        forth.asm):01159 (3)             bne     @skerrm
E706 BDE25F           (        forth.asm):01160 (7)             jsr     PUTS            Print error message
E709 8DAE             (        forth.asm):01161 (6)             bsr     PRBLKIN         Print BLK and >IN values (in hex)
E70B BDE26C           (        forth.asm):01162 (7)             jsr     PUTCR
E70E 1F20             (        forth.asm):01163 (4)     @dmptos tfr     y,d             Dump top of the system stack contents
E710 8E0394           (        forth.asm):01164 (3)             ldx     #HEXBUF
E713 BDE184           (        forth.asm):01165 (7)             jsr     HDMP4
E716 8620             (        forth.asm):01166 (2)             lda     #SP
E718 A780             (        forth.asm):01167 (4+1)           sta     ,x+
                      (        forth.asm):01168         * Symbolic stack dumps are configurable. In situations where the dictionary is
                      (        forth.asm):01169         * trashed, they may not be considered desirable. See SSDFEAT in constants.asm.
                      (        forth.asm):01170                 IFNE    SSDFEAT
E71A BDE5A7           (        forth.asm):01171 (7)             jsr     FINDSYM
                      (        forth.asm):01172                 ENDC
E71D 8E0394           (        forth.asm):01173 (3)             ldx     #HEXBUF
E720 BDE25F           (        forth.asm):01174 (7)             jsr     PUTS
E723 BDE26C           (        forth.asm):01175 (7)             jsr     PUTCR
E726 108CE000         (        forth.asm):01176 (4)             cmpy    #IODZHDL
E72A 2702             (        forth.asm):01177 (3)             beq     @wastrp         We're just back from the trap handler
E72C 3262             (        forth.asm):01178 (4+1)           leas    2,s             Point to the next item on the stack
E72E 118C8000         (        forth.asm):01179 (4)     @wastrp cmps    #RAMSTRT+RAMSIZE
E732 240C             (        forth.asm):01180 (3)             bhs     @errdon         We're done here
E734 10AEE4           (        forth.asm):01181 (6+0)           ldy     ,s
E737 20D5             (        forth.asm):01182 (3)             bra     @dmptos
E739 A680             (        forth.asm):01183 (4+1)   @skerrm lda     ,x+             Scan for the next error message
E73B 26FC             (        forth.asm):01184 (3)             bne     @skerrm
E73D 5A               (        forth.asm):01185 (1)             decb
E73E 20C3             (        forth.asm):01186 (3)             bra     @nxterr
E740 10CE8000         (        forth.asm):01187 (4)     @errdon lds     #RAMSTRT+RAMSIZE
E744 9621             (        forth.asm):01188 (3)             lda     USTATE+1        We do ignore the upper byte
E746 270D             (        forth.asm):01189 (3)             beq     @erdon2         No pointers to restore if we were interpreting
                      (        forth.asm):01190         * Compiling: clear STATE, RSP and restore LSTWAD, DICEND.
E748 0F21             (        forth.asm):01191 (5)             clr     USTATE+1        Switch back to interpretation mode
E74A BDEAC8           (        forth.asm):01192                 RFXT    jsr,RCLR+7      XT for RCLR
E74D 9E0C             (        forth.asm):01193 (4)             ldx     BDICEND         Restore essential pointers from backups
E74F 9F08             (        forth.asm):01194 (4)             stx     DICEND          Restore HERE
E751 9E0A             (        forth.asm):01195 (4)             ldx     BLSTWAD
E753 9F06             (        forth.asm):01196 (4)             stx     LSTWAD          Restore LAST
E755 BDFA2D           (        forth.asm):01197         @erdon2 RFXT    jsr,DECIMAL+10  Back to decimal BASE, for one's sanity's sake!
E758 7EE0B7           (        forth.asm):01198 (3)             jmp     INTERP
                      (        forth.asm):01199         
                      (        forth.asm):01200         * Push X to the data stack (boundary is checked).
E75B 118301D0         (        forth.asm):01201 (4)     NPUSH   cmpu    #NSTTOP
E75F 2303             (        forth.asm):01202 (3)             bls     @npush1         Anything <= than #NSTTOP indicates overflow
E761 3610             (        forth.asm):01203 (4+2)           pshu    x               Aka UCNPUSH
E763 39               (        forth.asm):01204 (4)             rts
E764 5F               (        forth.asm):01205 (1)     @npush1 clrb                    Data stack overflow
E765 BDE6DE           (        forth.asm):01206 (7)             jsr     ERRHDLR         No return
     E768             (        forth.asm):01207         DPSHRA  equ     *
E768 12               (        forth.asm):01208 (1)             nop
                      (        forth.asm):01209         
                      (        forth.asm):01210         * Pull X from the data stack (boundary is checked).
                      (        forth.asm):01211         * D, W and Y are preserved.
E769 11830290         (        forth.asm):01212 (4)     NPOP    cmpu    #NSTBOT
E76D 2403             (        forth.asm):01213 (3)             bhs     @npop1          Anything >= than #NSTBOT indicates underflow
E76F 3710             (        forth.asm):01214 (4+2)           pulu    x
E771 39               (        forth.asm):01215 (4)             rts
E772 C601             (        forth.asm):01216 (2)     @npop1  ldb     #1              Data stack underflow
E774 BDE6DE           (        forth.asm):01217 (7)             jsr     ERRHDLR         No return
     E777             (        forth.asm):01218         DPOPRA  equ     *
E777 12               (        forth.asm):01219 (1)             nop
                      (        forth.asm):01220         
                      (        forth.asm):01221         * Push X to the return stack (boundary is checked).
E778 962A             (        forth.asm):01222 (3)     RPUSH   lda     RDEPTH          RDEPTH is expressed in cells
E77A 8140             (        forth.asm):01223 (2)             cmpa    #RSTKSZ/2       But RSTKZ is expressed in bytes
E77C 2712             (        forth.asm):01224 (3)             beq     @rpush1
E77E 4C               (        forth.asm):01225 (1)             inca
E77F 972A             (        forth.asm):01226 (3)             sta     RDEPTH
E781 0F2C             (        forth.asm):01227 (5)             clr     RTSREMV         Do not get rid of the final RTS
E783 1F27             (        forth.asm):01228 (4)             tfr     y,v
E785 109E00           (        forth.asm):01229 (5)             ldy     RSP
E788 AFA3             (        forth.asm):01230 (5+2)           stx     ,--y
E78A 109F00           (        forth.asm):01231 (5)             sty     RSP
E78D 1F72             (        forth.asm):01232 (4)             tfr     v,y
E78F 39               (        forth.asm):01233 (4)             rts
E790 C607             (        forth.asm):01234 (2)     @rpush1 ldb     #7              Return stack overflow
E792 BDE6DE           (        forth.asm):01235 (7)             jsr     ERRHDLR         No return
     E795             (        forth.asm):01236         RPSHRA  equ     *
E795 12               (        forth.asm):01237 (1)             nop                     Meant to insulate RPUSH errors from RPOP EP
                      (        forth.asm):01238         
                      (        forth.asm):01239         * Pull X from the return stack (boundary is checked).
E796 962A             (        forth.asm):01240 (3)     RPOP    lda     RDEPTH          RDEPTH is expressed in cells
E798 2710             (        forth.asm):01241 (3)             beq     @rpop1
E79A 4A               (        forth.asm):01242 (1)             deca
E79B 972A             (        forth.asm):01243 (3)             sta     RDEPTH
E79D 1F27             (        forth.asm):01244 (4)             tfr     y,v
E79F 109E00           (        forth.asm):01245 (5)             ldy     RSP
E7A2 AEA1             (        forth.asm):01246 (5+2)           ldx     ,y++
E7A4 109F00           (        forth.asm):01247 (5)             sty     RSP
E7A7 1F72             (        forth.asm):01248 (4)             tfr     v,y
E7A9 39               (        forth.asm):01249 (4)             rts
E7AA C608             (        forth.asm):01250 (2)     @rpop1  ldb     #8              Return stack underflow
E7AC BDE6DE           (        forth.asm):01251 (7)             jsr     ERRHDLR         No return
     E7AF             (        forth.asm):01252         RPOPRA  equ     *
                      (        forth.asm):01253         
                      (        forth.asm):01254         * Derive the current input stream pointer from BLK and >IN.
                      (        forth.asm):01255         * The resulting address is returned in X. D is altered.
                      (        forth.asm):01256         * Both Y and W are preserved.
E7AF 9E24             (        forth.asm):01257 (4)     BKIN2PT ldx     UBLK
E7B1 2716             (        forth.asm):01258 (3)             beq     @consol         We are switching back to the console
E7B3 1038             (        forth.asm):01259 (6)             pshsw
E7B5 3420             (        forth.asm):01260 (4+2)           pshs    y
E7B7 8DA2             (        forth.asm):01261 (6)             bsr     NPUSH           Make sure BLK @ is loaded
E7B9 BDE9BF           (        forth.asm):01262                 RFXT    jsr,BLOCK+8     XT for BLOCK
E7BC 3520             (        forth.asm):01263 (4+2)           puls    y
E7BE 1039             (        forth.asm):01264 (6)             pulsw
E7C0 3710             (        forth.asm):01265                 UCNPOP                  Retrieve buffer addr (to X)
E7C2 9F1C             (        forth.asm):01266 (4)     @done   stx     BSBFADR         Update base buffer address
E7C4 DC22             (        forth.asm):01267 (4)             ldd     UTOIN
E7C6 308B             (        forth.asm):01268 (4+2)           leax    d,x             Add the current offset. Return the result via X
E7C8 39               (        forth.asm):01269 (4)             rts
E7C9 8E0310           (        forth.asm):01270 (3)     @consol ldx     #CMDBUF
E7CC 20F4             (        forth.asm):01271 (3)             bra     @done
                      (        forth.asm):01272         
                      (        forth.asm):01273                 include storage.asm
                      (      storage.asm):00001         * Wait until the BSY bit is clear in the CF status register.
                      (      storage.asm):00002         * Upon return the BSY bit is guaranteed to be zero. Z will
                      (      storage.asm):00003         * be set in CC. This subroutine should not be called before
                      (      storage.asm):00004         * the CompactFlash presence has been assessed.
E7CE B6C007           (      storage.asm):00005 (4)     CFWAIT  lda     CFSTATR
E7D1 8580             (      storage.asm):00006 (2)             bita    #CFBSYB
E7D3 26F9             (      storage.asm):00007 (3)             bne     CFWAIT
E7D5 39               (      storage.asm):00008 (4)             rts
                      (      storage.asm):00009         
                      (      storage.asm):00010         * Wait until the BSY bit is clear and the RDY bit is set.
E7D6 8DF6             (      storage.asm):00011 (6)     CFRDY   bsr     CFWAIT
E7D8 2703             (      storage.asm):00012 (3)             beq     @cfrdy0         Card not busy, proceed
E7DA 1A04             (      storage.asm):00013 (2)             orcc    #ZFLAG
E7DC 39               (      storage.asm):00014 (4)             rts
E7DD 8E2000           (      storage.asm):00015 (3)     @cfrdy0 ldx     #$2000          Maximum poll count
E7E0 8640             (      storage.asm):00016 (2)             lda     #CFRDYB
E7E2 B5C007           (      storage.asm):00017 (4)     @cfrdy1 bita    CFSTATR
E7E5 2604             (      storage.asm):00018 (3)             bne     @cfrdy2         BSY bit is set, continue
E7E7 301F             (      storage.asm):00019 (4+1)           leax    -1,x            Card not ready, decrement poll count
E7E9 26F7             (      storage.asm):00020 (3)             bne     @cfrdy1         and try again
E7EB 39               (      storage.asm):00021 (4)     @cfrdy2 rts                     Return with Z set: card not present
                      (      storage.asm):00022         *                               Return with Z clear: card is ready
                      (      storage.asm):00023         
                      (      storage.asm):00024         * Check for possible error condition.
                      (      storage.asm):00025         * Upon return either Z is set (A is zero) and no error occurred or
                      (      storage.asm):00026         * Z is clear and the CF error register contents is returned in A.
E7EC 8DE0             (      storage.asm):00027 (6)     CFERRCK bsr     CFWAIT
E7EE B6C007           (      storage.asm):00028 (4)             lda     CFSTATR
E7F1 8401             (      storage.asm):00029 (2)             anda    #CFERRB
E7F3 2703             (      storage.asm):00030 (3)             beq     @cfeck1
E7F5 B6C001           (      storage.asm):00031 (4)             lda     CFERROR         The error register contains error details
E7F8 39               (      storage.asm):00032 (4)     @cfeck1 rts
                      (      storage.asm):00033         
                      (      storage.asm):00034         * Issue CF command. The command code is passed through the B register.
                      (      storage.asm):00035         * Upon return:
                      (      storage.asm):00036         * - Z is set and everything is peachy.
                      (      storage.asm):00037         * - or Z is clear and the CF error register contents will be
                      (      storage.asm):00038         *   returned in A (and mirrored in the global CFERRCD variable).
                      (      storage.asm):00039         * B is preserved.
E7F9 8DDB             (      storage.asm):00040 (6)     CFCMDIS bsr     CFRDY
E7FB 270A             (      storage.asm):00041 (3)             beq     @cfciab         Card not ready, abort
E7FD D738             (      storage.asm):00042 (3)             stb     CFCMMIR         Update CF command mirror
E7FF F7C007           (      storage.asm):00043 (4)             stb     CFCOMDR         Send command to the CF card
E802 8DE8             (      storage.asm):00044 (6)             bsr     CFERRCK
E804 9739             (      storage.asm):00045 (3)     @cfcise sta     CFERRCD         CF command issue set error
                      (      storage.asm):00046                 IFNE    DEBUG
                      (      storage.asm):00047                 pshs    a,cc
                      (      storage.asm):00048                 beq     @cfciok
                      (      storage.asm):00049                 lda     #'!
                      (      storage.asm):00050                 jsr     PUTCH
E806                  (      storage.asm):00051         @cfcidi lda     CFCMMIR
                      (      storage.asm):00052                 ldx     #TBUFF
                      (      storage.asm):00053                 jsr     HDMP2
                      (      storage.asm):00054                 lda     #'/
                      (      storage.asm):00055                 sta     ,x+
                      (      storage.asm):00056                 lda     CFERRCD
                      (      storage.asm):00057                 jsr     HDMP2
                      (      storage.asm):00058                 ldx     #TBUFF
                      (      storage.asm):00059                 jsr     PUTS
                      (      storage.asm):00060                 jsr     PUTCR
                      (      storage.asm):00061                 bra     @cfcict         CF command issue continued
E806                  (      storage.asm):00062         @cfciok lda     #'#
                      (      storage.asm):00063                 jsr     PUTCH
                      (      storage.asm):00064                 bra     @cfcidi         CF command issue data indication
E806                  (      storage.asm):00065         @cfcict puls    cc,a
                      (      storage.asm):00066                 ENDC
E806 39               (      storage.asm):00067 (4)             rts
E807 86FF             (      storage.asm):00068 (2)     @cfciab lda     #$FF            Dummy error code
E809 20F9             (      storage.asm):00069 (3)             bra     @cfcise
                      (      storage.asm):00070         
                      (      storage.asm):00071         * Drive 0 select.
E80B 8DC9             (      storage.asm):00072 (6)     CFDRSEL bsr     CFRDY
E80D 86E0             (      storage.asm):00073 (2)             lda     #$E0            Drive 0, LBA mode
E80F B7C006           (      storage.asm):00074 (4)             sta     CFDRHDR
E812 20C2             (      storage.asm):00075 (3)             bra     CFRDY
                      (      storage.asm):00076         
                      (      storage.asm):00077         * Analyze the response to the CF "Identify Device" request.
E814 9E08             (      storage.asm):00078 (4)     CFANTHS ldx     DICEND
E816 308836           (      storage.asm):00079 (4+1)           leax    $36,x           Point to the "Model number" field
E819 3410             (      storage.asm):00080 (4+2)           pshs    x
E81B 118614           (      storage.asm):00081 (3)             lde     #$14            Number of 16 bit words to go through
E81E EC84             (      storage.asm):00082 (5+0)   @bytswp ldd     ,x
E820 1E98             (      storage.asm):00083 (5)             exg     b,a             Byte swapping
E822 ED81             (      storage.asm):00084 (5+2)           std     ,x++
E824 114A             (      storage.asm):00085 (2)             dece
E826 26F6             (      storage.asm):00086 (3)             bne     @bytswp
E828 6F84             (      storage.asm):00087 (6+0)           clr     ,x
E82A 3510             (      storage.asm):00088 (4+2)           puls    x
E82C BDE25F           (      storage.asm):00089 (7)             jsr     PUTS            Decent CF cards indicate the capacity that way
E82F 7EE26C           (      storage.asm):00090 (3)             jmp     PUTCR           Up to $10000 blocks is 64 MB!
                      (      storage.asm):00091         
                      (      storage.asm):00092         * Initialize the CompactFlash subsystem.
                      (      storage.asm):00093         * This is run once at boot time. There is no hot plug support here.
E832 0F37             (      storage.asm):00094 (5)     CFINIT  clr     CFCARDP         Clear card present,
                      (      storage.asm):00095                 IFEQ    DEBUG
E834 8DA0             (      storage.asm):00096 (6)             bsr     CFRDY
                      (      storage.asm):00097                 ELSE
                      (      storage.asm):00098                 jsr     CFRDY
                      (      storage.asm):00099                 ENDC
E836 2730             (      storage.asm):00100 (3)             beq     @cfinab         Card not ready, abort
E838 8DD1             (      storage.asm):00101 (6)             bsr     CFDRSEL         Drive 0 select
E83A 8601             (      storage.asm):00102 (2)             lda     #1              Enable 8-bit data transfers
E83C B7C001           (      storage.asm):00103 (4)             sta     CFFEATR
E83F C6EF             (      storage.asm):00104 (2)             ldb     #CFSETFT        Issue a CF "Set Feature" command
                      (      storage.asm):00105                 IFEQ    DEBUG
E841 8DB6             (      storage.asm):00106 (6)             bsr     CFCMDIS         Not allowed to fail
                      (      storage.asm):00107                 ELSE
                      (      storage.asm):00108                 jsr     CFCMDIS         Not allowed to fail
                      (      storage.asm):00109                 ENDC
E843 2623             (      storage.asm):00110 (3)             bne     @cfinab         Abort with card present flag clear
E845 8601             (      storage.asm):00111 (2)             lda     #1              Request default PIO mode wo/ IORDY
E847 B7C002           (      storage.asm):00112 (4)             sta     CFSCNTR
E84A 8603             (      storage.asm):00113 (2)             lda     #3              ATA-2 "Set Transfer mode"
E84C B7C001           (      storage.asm):00114 (4)             sta     CFFEATR
                      (      storage.asm):00115                 IFEQ    DEBUG
E84F 8DA8             (      storage.asm):00116 (6)             bsr     CFCMDIS         OK to fail
                      (      storage.asm):00117                 ELSE
                      (      storage.asm):00118                 jsr     CFCMDIS         OK to fail
                      (      storage.asm):00119                 ENDC
E851 8682             (      storage.asm):00120 (2)             lda     #$82            Disable write caching
E853 B7C001           (      storage.asm):00121 (4)             sta     CFFEATR
                      (      storage.asm):00122                 IFEQ    DEBUG
E856 8DA1             (      storage.asm):00123 (6)             bsr     CFCMDIS         B still has #CFSETF. Also OK to fail
                      (      storage.asm):00124                 ELSE
                      (      storage.asm):00125                 jsr     CFCMDIS         B still has #CFSETF. Also OK to fail
                      (      storage.asm):00126                 ENDC
E858 C6EC             (      storage.asm):00127 (2)             ldb     #CFIDDEV        Issue a CF "Identify Device" command
                      (      storage.asm):00128                 IFEQ    DEBUG
E85A 8D9D             (      storage.asm):00129 (6)             bsr     CFCMDIS         Not allowed to fail
                      (      storage.asm):00130                 ELSE
                      (      storage.asm):00131                 jsr     CFCMDIS         Not allowed to fail
                      (      storage.asm):00132                 ENDC
E85C 260A             (      storage.asm):00133 (3)             bne     @cfinab         Abort with card present flag clear
E85E 9E08             (      storage.asm):00134 (4)             ldx     DICEND          Target address is HERE
E860 8D07             (      storage.asm):00135 (6)             bsr     CF1SRD          Read one sector
E862 8DB0             (      storage.asm):00136 (6)             bsr     CFANTHS         Analyze this!
E864 8601             (      storage.asm):00137 (2)             lda     #1
E866 9737             (      storage.asm):00138 (3)             sta     CFCARDP         Set the card present flag
E868 39               (      storage.asm):00139 (4)     @cfinab rts
                      (      storage.asm):00140         
                      (      storage.asm):00141         * Read one sector. The LBA parameters are assumed to have been set previously.
                      (      storage.asm):00142         * On input X points to the receiving (at least 512 bytes long) buffer.
E869 B6C007           (      storage.asm):00143 (4)     CF1SRD  lda     CFSTATR
E86C 8508             (      storage.asm):00144 (2)             bita    #CFDRQB         Check for DRQ bit in the CF status register
E86E 2710             (      storage.asm):00145 (3)             beq     IOERR
E870 10860200         (      storage.asm):00146 (4)             ldw     #CFSCSZ         Sector size is 512 bytes
E874 108EC000         (      storage.asm):00147 (4)             ldy     #CFDATAR        The data source address
E878 1A40             (      storage.asm):00148 (2)             orcc    #FFLAG          Disable FIRQ
E87A 113B21           (      storage.asm):00149 (6+?)           tfm     y,x+
E87D 1CBF             (      storage.asm):00150 (2)             andcc   #^FFLAG         Enable FIRQ
E87F 39               (      storage.asm):00151 (4)             rts
E880 C611             (      storage.asm):00152 (2)     IOERR   ldb     #17
E882 BDE6DE           (      storage.asm):00153 (7)             jsr     ERRHDLR         No return
E885 12               (      storage.asm):00154 (1)     CFR1SRA nop                     For symbolic stack dump debugging purposes
                      (      storage.asm):00155         
                      (      storage.asm):00156         * Write one sector. The LBA parameters are assumed to have been set previously.
                      (      storage.asm):00157         * On input X points to the sending (at least 512 bytes long) buffer.
E886 B6C007           (      storage.asm):00158 (4)     CF1SWR  lda     CFSTATR
E889 8488             (      storage.asm):00159 (2)             anda    #CFBSYB|CFDRQB
E88B 8108             (      storage.asm):00160 (2)             cmpa    #CFDRQB         Check for BSY clear and DRQ set
E88D 26F7             (      storage.asm):00161 (3)             bne     CF1SWR
E88F 10860200         (      storage.asm):00162 (4)             ldw     #CFSCSZ         Sector size is 512 bytes
E893 108EC000         (      storage.asm):00163 (4)             ldy     #CFDATAR        The data destination address
E897 113A12           (      storage.asm):00164 (6+?)           tfm     x+,y            Note: tfm is interruptible!
E89A 39               (      storage.asm):00165 (4)             rts
                      (      storage.asm):00166         
                      (      storage.asm):00167         * 1KB Forth block support primitives. Not dictionary code. More like BIOS ops.
                      (      storage.asm):00168         
                      (      storage.asm):00169         * One block IO preamble: select drive and LBA parameters. On input:
                      (      storage.asm):00170         * ,s has the return address
                      (      storage.asm):00171         * 2,s had the return address for the caller
                      (      storage.asm):00172         * 4,s has the target block number
E89B BDE7CE           (      storage.asm):00173 (7)     CF1BPRE jsr     CFWAIT
E89E BDE80B           (      storage.asm):00174 (7)             jsr     CFDRSEL         Set drive and head parameters
E8A1 EC64             (      storage.asm):00175 (5+1)           ldd     4,s
E8A3 1048             (      storage.asm):00176 (2)             lsld                    Convert block number to sector number
E8A5 F7C003           (      storage.asm):00177 (4)             stb     CFSNUMR         LBA 7-0
E8A8 B7C004           (      storage.asm):00178 (4)             sta     CFCLOWR         LBA 15-8
E8AB 1FA8             (      storage.asm):00179 (4)             tfr     cc,a
E8AD 8401             (      storage.asm):00180 (2)             anda    #CFLAG
E8AF B7C005           (      storage.asm):00181 (4)             sta     CFCHIGR         LBA 23-16 (carry to cylinder high)
E8B2 8602             (      storage.asm):00182 (2)             lda     #2              2 IDE sectors per Forth block
E8B4 B7C002           (      storage.asm):00183 (4)             sta     CFSCNTR
E8B7 39               (      storage.asm):00184 (4)             rts
                      (      storage.asm):00185         
                      (      storage.asm):00186         * Read one block from CF device. On input:
                      (      storage.asm):00187         * ,s has the return address
                      (      storage.asm):00188         * 2,s has the target block number
                      (      storage.asm):00189         * 4,s has the buffer base address
                      (      storage.asm):00190         * Upon return, Y will be preserved.
E8B8 0D37             (      storage.asm):00191 (4)     CF1BKRD tst     CFCARDP
E8BA 2602             (      storage.asm):00192 (3)             bne     @ctnued
E8BC 20C2             (      storage.asm):00193 (3)             bra     IOERR           Card not present--CF subsystem not initialized
E8BE 1F27             (      storage.asm):00194 (4)     @ctnued tfr     y,v
E8C0 8DD9             (      storage.asm):00195 (6)             bsr     CF1BPRE
E8C2 C620             (      storage.asm):00196 (2)             ldb     #CFRSCTS        Issue a "Read sectors" CF command
E8C4 BDE7F9           (      storage.asm):00197 (7)             jsr     CFCMDIS
E8C7 AE64             (      storage.asm):00198 (5+1)           ldx     4,s             Target buffer address to X
E8C9 8D9E             (      storage.asm):00199 (6)             bsr     CF1SRD          Read the even sector from CF device
E8CB BDE7CE           (      storage.asm):00200 (7)             jsr     CFWAIT          Wait for next sector to become available
E8CE 8D99             (      storage.asm):00201 (6)             bsr     CF1SRD          and read the odd sector
E8D0 1F72             (      storage.asm):00202 (4)             tfr     v,y
E8D2 39               (      storage.asm):00203 (4)             rts
                      (      storage.asm):00204         
                      (      storage.asm):00205         * Write one block to CF device. Upon entry:
                      (      storage.asm):00206         * ,s has the return address
                      (      storage.asm):00207         * 2,s has the target block number
                      (      storage.asm):00208         * 4,s has the buffer base address
                      (      storage.asm):00209         * Upon return, Y will be preserved.
E8D3 0D37             (      storage.asm):00210 (4)     CF1BKWR tst     CFCARDP
E8D5 2602             (      storage.asm):00211 (3)             bne     @ctnued
E8D7 20A7             (      storage.asm):00212 (3)             bra     IOERR           Card not present--CF subsystem not initialized
E8D9 1F27             (      storage.asm):00213 (4)     @ctnued tfr     y,v
E8DB 8DBE             (      storage.asm):00214 (6)             bsr     CF1BPRE
E8DD C630             (      storage.asm):00215 (2)             ldb     #CFWSCTS        Issue a "Write sectors" CF command
E8DF BDE7F9           (      storage.asm):00216 (7)             jsr     CFCMDIS
E8E2 AE64             (      storage.asm):00217 (5+1)           ldx     4,s             Source buffer address to X
E8E4 8DA0             (      storage.asm):00218 (6)             bsr     CF1SWR          Write the even sector to CF device
E8E6 BDE7CE           (      storage.asm):00219 (7)             jsr     CFWAIT          Wait for next sector to become available
E8E9 8D9B             (      storage.asm):00220 (6)             bsr     CF1SWR          and write the odd sector
E8EB 1F72             (      storage.asm):00221 (4)             tfr     v,y
E8ED 39               (      storage.asm):00222 (4)             rts
                      (      storage.asm):00223         
                      (        forth.asm):01274         
                      (        forth.asm):01275         ******************************************************************************
                      (        forth.asm):01276         * Dictionary begins. In the code below ANSI refers to ANSI-X3.215-1994
                      (        forth.asm):01277         * Draft 6 proposal (i.e. the free spec).
                      (        forth.asm):01278         
E8EE 0D               (        forth.asm):01279         EBUFS   fcb     13              79-STANDARD (REQ145)
E8EF 454D5054592D4255 (        forth.asm):01280                 fcc     'EMPTY-BUFFERS' ( -- )
     4646455253
E8FC 0000             (        forth.asm):01281                 fdb     0               Last dictionary entry
E8FE C7               (        forth.asm):01282                 RFCS
E8FF 7EE2F1           (        forth.asm):01283 (3)             jmp     EMPTYB
                      (        forth.asm):01284         
E902 0C               (        forth.asm):01285         SAVBUF  fcb     12              79-STANDARD (REQ221)
E903 534156452D425546 (        forth.asm):01286                 fcc     'SAVE-BUFFERS'  ( -- )
     46455253
E90F E8EE             (        forth.asm):01287                 fdb     EBUFS
E911 C7               (        forth.asm):01288                 RFCS
E912 8E0430           (        forth.asm):01289 (3)             ldx     #BUF0
E915 8D03             (        forth.asm):01290 (6)             bsr     WBIFDRT
E917 8E0840           (        forth.asm):01291 (3)             ldx     #BUF1
                      (        forth.asm):01292         * Write buffer back to mass storage if marked as dirty.
                      (        forth.asm):01293         * The dirty bit is cleared but the buffer contents itself is not.
                      (        forth.asm):01294         * The buffer will continue to be marked as "in use."
                      (        forth.asm):01295         * On input X has has the base buffer address. Both D and X
                      (        forth.asm):01296         * are preserved. Y is not.
E91A 3406             (        forth.asm):01297 (4+2)   WBIFDRT pshs    d
E91C 3410             (        forth.asm):01298 (4+2)           pshs    x               Base buffer address (arg1 to CF1BKWR)
E91E 8605             (        forth.asm):01299 (2)             lda     #BINUSE|BDIRTY
E920 A4890401         (        forth.asm):01300 (4+3)           anda    BOFLAGS,x
E924 8105             (        forth.asm):01301 (2)             cmpa    #BINUSE|BDIRTY
E926 2616             (        forth.asm):01302 (3)             bne     @alldon         Block not in use or in use but not dirty
E928 AE890402         (        forth.asm):01303 (5+3)           ldx     BOBLKNO,x
E92C 3410             (        forth.asm):01304 (4+2)           pshs    x               Block number (arg0 to CF1BKWR)
E92E 8DA3             (        forth.asm):01305 (6)             bsr     CF1BKWR         Write data buffer to CF
E930 3262             (        forth.asm):01306 (4+1)           leas    2,s             Drop one cell from the system stack (blknum)
E932 AEE4             (        forth.asm):01307 (5+0)           ldx     ,s              Retrieve base buffer address
E934 30890401         (        forth.asm):01308 (4+3)           leax    BOFLAGS,x
E938 A684             (        forth.asm):01309 (4+0)           lda     ,x              Acquire the 'flags' field
E93A 84FB             (        forth.asm):01310 (2)             anda    #^BDIRTY        Clear the dirty bit
E93C A784             (        forth.asm):01311 (4+0)           sta     ,x              and update the 'flags' field
E93E 3510             (        forth.asm):01312 (4+2)   @alldon puls    x               Restore X
E940 3506             (        forth.asm):01313 (4+2)           puls    d               and D
E942 39               (        forth.asm):01314 (4)             rts
                      (        forth.asm):01315         
E943 05               (        forth.asm):01316         FLUSH   fcb     5               79-STANDARD (REF)
E944 464C555348       (        forth.asm):01317                 fcc     'FLUSH'         ( -- ) An alias for SAVE-BUFFERS
E949 E902             (        forth.asm):01318                 fdb     SAVBUF
E94B C7               (        forth.asm):01319                 RFCS
E94C 20C4             (        forth.asm):01320                 RFXT    bra,SAVBUF+15   XT for SAVE-BUFFERS
                      (        forth.asm):01321         
E94E 06               (        forth.asm):01322         UPDATE  fcb     6               79-STANDARD (REQ229)
E94F 555044415445     (        forth.asm):01323                 fcc     'UPDATE'        ( -- )
E955 E943             (        forth.asm):01324                 fdb     FLUSH
E957 C7               (        forth.asm):01325                 RFCS
E958 9E1A             (        forth.asm):01326 (4)             ldx     MRUBUFA         Most recently used buffer base address
E95A 30890401         (        forth.asm):01327 (4+3)           leax    BOFLAGS,x       Buffer 'flags' field's address to X
E95E A684             (        forth.asm):01328 (4+0)           lda     ,x              Buffer 'flags' field to A
E960 8501             (        forth.asm):01329 (2)             bita    #BINUSE         Is that buffer in use?
E962 2704             (        forth.asm):01330 (3)             beq     @upddon         No, we're done here
E964 8A04             (        forth.asm):01331 (2)             ora     #BDIRTY
E966 A784             (        forth.asm):01332 (4+0)           sta     ,x              Set the dirty bit
E968 39               (        forth.asm):01333 (4)     @upddon rts
                      (        forth.asm):01334         
E969 06               (        forth.asm):01335         BUFFER  fcb     6               79-STANDARD (REQ130)
E96A 425546464552     (        forth.asm):01336                 fcc     'BUFFER'        ( ublkno -- addr )
E970 E94E             (        forth.asm):01337                 fdb     UPDATE
E972 C7               (        forth.asm):01338                 RFCS
E973 BDE769           (        forth.asm):01339 (7)             jsr     NPOP
E976 1F12             (        forth.asm):01340 (4)             tfr     x,y             ublkno to Y
                      (        forth.asm):01341         * Block lookup.
E978 8E0430           (        forth.asm):01342 (3)             ldx     #BUF0           Base address of the first resident buffer
E97B C602             (        forth.asm):01343 (2)             ldb     #2              Number of resident buffers
E97D A6890401         (        forth.asm):01344 (4+3)   @blkup  lda     BOFLAGS,x       Buffer flags to A
E981 8501             (        forth.asm):01345 (2)             bita    #BINUSE         Buffer in use?
E983 270C             (        forth.asm):01346 (3)             beq     @nxtbuf         No
E985 10AC890402       (        forth.asm):01347 (6+3)           cmpy    BOBLKNO,x       Buffer is in use. Block number match?
E98A 2605             (        forth.asm):01348 (3)             bne     @nxtbuf         No
E98C 9F1A             (        forth.asm):01349 (4)     @retba  stx     MRUBUFA         Block number match. Mark as the MRU buffer
E98E 3610             (        forth.asm):01350                 UCNPUSH                 and return its base address via the data stack
E990 39               (        forth.asm):01351 (4)             rts
E991 30890410         (        forth.asm):01352 (4+3)   @nxtbuf leax    BFDISP,x        Point to the next buffer
E995 5A               (        forth.asm):01353 (1)             decb
E996 26E5             (        forth.asm):01354 (3)             bne     @blkup
                      (        forth.asm):01355         * The block number in Y is not currently in use. Assign a buffer to it.
E998 8E0430           (        forth.asm):01356 (3)             ldx     #BUF0
E99B 9C1A             (        forth.asm):01357 (4)             cmpx    MRUBUFA         Most recently used buffer address
E99D 2603             (        forth.asm):01358 (3)             bne     @bselct
E99F 8E0840           (        forth.asm):01359 (3)             ldx     #BUF1
                      (        forth.asm):01360         * At this point X has the base address of the block we are interested in.
E9A2 3420             (        forth.asm):01361 (4+2)   @bselct pshs    y               Backup the target block number
E9A4 BDE91A           (        forth.asm):01362 (7)             jsr     WBIFDRT         Write back if dirty. X and D are preserved
E9A7 8601             (        forth.asm):01363 (2)             lda     #BINUSE
E9A9 A7890401         (        forth.asm):01364 (4+3)           sta     BOFLAGS,x       Update the buffers 'flags' field
E9AD 3520             (        forth.asm):01365 (4+2)           puls    y               Restore the target block number
E9AF 10AF890402       (        forth.asm):01366 (6+3)           sty     BOBLKNO,x       and update the 'blknum' field as well
E9B4 20D6             (        forth.asm):01367 (3)             bra     @retba
                      (        forth.asm):01368         
E9B6 05               (        forth.asm):01369         BLOCK   fcb     5               79-STANDARD (REQ191)
E9B7 424C4F434B       (        forth.asm):01370                 fcc     'BLOCK'         ( ublkno -- addr )
E9BC E969             (        forth.asm):01371                 fdb     BUFFER
E9BE C7               (        forth.asm):01372                 RFCS
E9BF 8DB2             (        forth.asm):01373                 RFXT    bsr,BUFFER+9    XT for BUFFER
                      (        forth.asm):01374         * Upon return Y has has the block number.
E9C1 3710             (        forth.asm):01375                 UCNPOP                  Buffer base address to X
E9C3 3410             (        forth.asm):01376 (4+2)           pshs    x               Push base buffer address as Arg1 to CF1BKRD
E9C5 A6890401         (        forth.asm):01377 (4+3)           lda     BOFLAGS,x       Retrieve buffer 'flags' field
                      (        forth.asm):01378                 IFNE    DEBUG
                      (        forth.asm):01379                 bita    #BINUSE
                      (        forth.asm):01380                 bne     @blkctd
                      (        forth.asm):01381                 lda     #10             Assertion failed
                      (        forth.asm):01382                 jsr     ERRHDLR         No return
                      (        forth.asm):01383                 ENDC
E9C9 8402             (        forth.asm):01384 (2)     @blkctd anda    #BMAPPD         Has the block been read yet?
E9CB 2613             (        forth.asm):01385 (3)             bne     @bkmapd         Yes
E9CD 3420             (        forth.asm):01386 (4+2)           pshs    y               No. Push block number as arg0 to CF1BKRD
                      (        forth.asm):01387         * Map in the block from the CF device. System stack structure is as follows:
                      (        forth.asm):01388         * ,s has the target block number.
                      (        forth.asm):01389         * 2,s has the buffer base address.
E9CF BDE8B8           (        forth.asm):01390 (7)             jsr     CF1BKRD
E9D2 3262             (        forth.asm):01391 (4+1)           leas    2,s             Drop one cell from the system stack
                      (        forth.asm):01392         * Update the buffer flags field.
E9D4 AEE4             (        forth.asm):01393 (5+0)           ldx     ,s              Base buffer address
E9D6 30890401         (        forth.asm):01394 (4+3)           leax    BOFLAGS,x       Buffer 'flags' field address to X
E9DA A684             (        forth.asm):01395 (4+0)           lda     ,x              Read buffer 'flags' field
E9DC 8A02             (        forth.asm):01396 (2)             ora     #BMAPPD
E9DE A784             (        forth.asm):01397 (4+0)           sta     ,x              and mark it as read
E9E0 3510             (        forth.asm):01398 (4+2)   @bkmapd puls    x               Buffer base address to X
E9E2 3610             (        forth.asm):01399                 UCNPUSH
E9E4 39               (        forth.asm):01400 (4)             rts
                      (        forth.asm):01401         
E9E5 03               (        forth.asm):01402         BLK     fcb     3
E9E6 424C4B           (        forth.asm):01403                 fcc     'BLK'
E9E9 E9B6             (        forth.asm):01404                 fdb     BLOCK
E9EB C7               (        forth.asm):01405                 RFCS
E9EC 8E0124           (        forth.asm):01406 (3)             ldx     #UBLK
E9EF 7EE75B           (        forth.asm):01407 (3)             jmp     NPUSH
                      (        forth.asm):01408         
E9F2 03               (        forth.asm):01409         TOIN    fcb     3
E9F3 3E494E           (        forth.asm):01410                 fcc     '>IN'
E9F6 E9E5             (        forth.asm):01411                 fdb     BLK
E9F8 C7               (        forth.asm):01412                 RFCS
E9F9 8E0122           (        forth.asm):01413 (3)             ldx     #UTOIN
E9FC 7EE75B           (        forth.asm):01414 (3)             jmp     NPUSH
                      (        forth.asm):01415         
E9FF 03               (        forth.asm):01416         SCR     fcb     3
EA00 534352           (        forth.asm):01417                 fcc     'SCR'
EA03 E9F2             (        forth.asm):01418                 fdb     TOIN
EA05 C7               (        forth.asm):01419                 RFCS
EA06 8E0126           (        forth.asm):01420 (3)             ldx     #USCR
EA09 7EE75B           (        forth.asm):01421 (3)             jmp     NPUSH
                      (        forth.asm):01422         
                      (        forth.asm):01423         * Functionally: : LINE 6 SHIFT SCR @ BLOCK + ;
EA0C 04               (        forth.asm):01424         LINE    fcb     4               79-STANDARD (REF)
EA0D 4C494E45         (        forth.asm):01425                 fcc     'LINE'
EA11 E9FF             (        forth.asm):01426                 fdb     SCR
EA13 C7               (        forth.asm):01427                 RFCS
EA14 8E0006           (        forth.asm):01428 (3)             ldx     #6
EA17 BDE75B           (        forth.asm):01429 (7)             jsr     NPUSH
EA1A BDF808           (        forth.asm):01430                 RFXT    jsr,SHIFT+8     XT for SHIFT
EA1D 9E26             (        forth.asm):01431 (4)             ldx     USCR
EA1F BDE75B           (        forth.asm):01432 (7)             jsr     NPUSH
EA22 8D9B             (        forth.asm):01433                 RFXT    bsr,BLOCK+8     XT for BLOCK
EA24 7EF780           (        forth.asm):01434                 RFXT    jmp,PLUS+4      XT for +
                      (        forth.asm):01435         
                      (        forth.asm):01436         * Functionally:
                      (        forth.asm):01437         * : INDEX 1+ SWAP DO
                      (        forth.asm):01438         *     CR   I SCR !
                      (        forth.asm):01439         *     0 LINE 64 TYPE
                      (        forth.asm):01440         *   LOOP ;
EA27 05               (        forth.asm):01441         INDEX   fcb     5               79-STANDARD (REF)
EA28 494E444558       (        forth.asm):01442                 fcc     'INDEX'         ( n1 n2 -- )
EA2D EA0C             (        forth.asm):01443                 fdb     LINE
EA2F C7               (        forth.asm):01444                 RFCS
EA30 BDE769           (        forth.asm):01445 (7)             jsr     NPOP            N2 to X
EA33 3001             (        forth.asm):01446 (4+1)           leax    1,x             1+
EA35 1F12             (        forth.asm):01447 (4)             tfr     x,y             Y has the limit (not reached)
EA37 BDE769           (        forth.asm):01448 (7)             jsr     NPOP            X has the index (N1)
EA3A BDE26C           (        forth.asm):01449 (7)     @indlop jsr     PUTCR           CR
EA3D 9F26             (        forth.asm):01450 (4)             stx     USCR            I SCR !
EA3F 3430             (        forth.asm):01451 (4+4)           pshs    y,x
EA41 1FC1             (        forth.asm):01452 (4)             tfr     0,x
EA43 BDE75B           (        forth.asm):01453 (7)             jsr     NPUSH
EA46 8DCC             (        forth.asm):01454                 RFXT    bsr,LINE+7      XT for LINE
EA48 8E0040           (        forth.asm):01455 (3)             ldx     #64
EA4B BDE75B           (        forth.asm):01456 (7)             jsr     NPUSH
EA4E BDF5E4           (        forth.asm):01457                 RFXT    jsr,TYPE+7      XT for TYPE
EA51 3530             (        forth.asm):01458 (4+4)           puls    x,y             Restore loop parameters
EA53 3001             (        forth.asm):01459 (4+1)           leax    1,x
EA55 103712           (        forth.asm):01460 (4)             cmpr    x,y
EA58 26E0             (        forth.asm):01461 (3)             bne     @indlop
EA5A 39               (        forth.asm):01462 (4)             rts
                      (        forth.asm):01463         
EA5B 04               (        forth.asm):01464         LIST    fcb     4               79-STANDARD (REQ109)
EA5C 4C495354         (        forth.asm):01465                 fcc     'LIST'          ( ublkno -- )
EA60 EA27             (        forth.asm):01466                 fdb     INDEX
EA62 C7               (        forth.asm):01467                 RFCS
EA63 0D37             (        forth.asm):01468 (4)             tst     CFCARDP
EA65 2605             (        forth.asm):01469 (3)             bne     @lstpro
EA67 C611             (        forth.asm):01470 (2)             ldb     #17             IO error
EA69 BDE6DE           (        forth.asm):01471 (7)             jsr     ERRHDLR         No return
EA6C BDFBBE           (        forth.asm):01472         @lstpro RFXT    jsr,DUP+6       XT for DUP
EA6F BDE9BF           (        forth.asm):01473                 RFXT    jsr,BLOCK+8     XT for BLOCK
                      (        forth.asm):01474         * TOS now has the base buffer address.
EA72 BDE769           (        forth.asm):01475 (7)             jsr     NPOP
EA75 1F12             (        forth.asm):01476 (4)             tfr     x,y             Base buffer address to Y
EA77 BDE769           (        forth.asm):01477 (7)             jsr     NPOP            ublkno to X
EA7A 9F26             (        forth.asm):01478 (4)             stx     USCR            Update SCR's value
EA7C C610             (        forth.asm):01479 (2)             ldb     #16             16 lines to go
EA7E 3404             (        forth.asm):01480 (4+1)   @lstlop pshs    b
EA80 BDE26C           (        forth.asm):01481 (7)             jsr     PUTCR
EA83 1F21             (        forth.asm):01482 (4)             tfr     y,x
EA85 BDE75B           (        forth.asm):01483 (7)             jsr     NPUSH           Start address for TYPE
EA88 8E0040           (        forth.asm):01484 (3)             ldx     #64
EA8B BDE75B           (        forth.asm):01485 (7)             jsr     NPUSH           Byte count for TYPE
EA8E 103012           (        forth.asm):01486 (4)             addr    x,y
EA91 BDF5E4           (        forth.asm):01487                 RFXT    jsr,TYPE+7      XT for TYPE
EA94 3504             (        forth.asm):01488 (4+1)           puls    b
EA96 5A               (        forth.asm):01489 (1)             decb
EA97 26E5             (        forth.asm):01490 (3)             bne     @lstlop
EA99 39               (        forth.asm):01491 (4)             rts
                      (        forth.asm):01492         
                      (        forth.asm):01493         * Convert a single cell to a double. Non-transactional.
EA9A 03               (        forth.asm):01494         STOD    fcb     3               ANSI Core ( n -- d )
EA9B 533E44           (        forth.asm):01495                 fcc     'S>D'
EA9E EA5B             (        forth.asm):01496                 fdb     LIST
EAA0 C7               (        forth.asm):01497                 RFCS
EAA1 BDE769           (        forth.asm):01498 (7)             jsr     NPOP            N to X
EAA4 3610             (        forth.asm):01499                 UCNPUSH                 Push back low order cell
EAA6 104F             (        forth.asm):01500 (2)             clrd                    High order cell: default to N >= 0
EAA8 1E01             (        forth.asm):01501 (5)             exg     d,x
EAAA 4D               (        forth.asm):01502 (1)             tsta
EAAB 102AFCAC         (        forth.asm):01503 (5)             lbpl    NPUSH
EAAF 301F             (        forth.asm):01504 (4+1)           leax    -1,x            N is < 0. Sign extension is required. -1 to X
EAB1 7EE75B           (        forth.asm):01505 (3)             jmp     NPUSH
                      (        forth.asm):01506         
EAB4 04               (        forth.asm):01507         NCLR    fcb     4               Non-standard
EAB5 4E434C52         (        forth.asm):01508                 fcc     'NCLR'          Clear the data (normal) stack
EAB9 EA9A             (        forth.asm):01509                 fdb     STOD
EABB C7               (        forth.asm):01510                 RFCS
EABC CE0290           (        forth.asm):01511 (3)             ldu     #NSTBOT
EABF 39               (        forth.asm):01512 (4)             rts
                      (        forth.asm):01513         
EAC0 04               (        forth.asm):01514         RCLR    fcb     4               Non-standard
EAC1 52434C52         (        forth.asm):01515                 fcc     'RCLR'          Clear the return stack
EAC5 EAB4             (        forth.asm):01516                 fdb     NCLR
EAC7 C7               (        forth.asm):01517                 RFCS
EAC8 8E0310           (        forth.asm):01518 (3)             ldx     #RSTBOT
EACB 9F00             (        forth.asm):01519 (4)             stx     RSP
EACD 0F2A             (        forth.asm):01520 (5)             clr     RDEPTH
EACF 39               (        forth.asm):01521 (4)             rts
                      (        forth.asm):01522         
EAD0 05               (        forth.asm):01523         DEPTH   fcb     5               79-STANDARD (REQ238)
EAD1 4445505448       (        forth.asm):01524                 fcc     'DEPTH'
EAD6 EAC0             (        forth.asm):01525                 fdb     RCLR
EAD8 C7               (        forth.asm):01526                 RFCS
EAD9 CC0290           (        forth.asm):01527 (3)             ldd     #NSTBOT         Bottom data stack address
EADC 103230           (        forth.asm):01528 (4)             subr    u,d             D has the current value of the data stack ptr
EADF 1044             (        forth.asm):01529 (2)             lsrd                    divided by 2
EAE1 1F01             (        forth.asm):01530 (4)             tfr     d,x
EAE3 7EE75B           (        forth.asm):01531 (3)             jmp     NPUSH
                      (        forth.asm):01532         
EAE6 06               (        forth.asm):01533         CREATE  fcb     6               79-STANDARD (REQ239)
EAE7 435245415445     (        forth.asm):01534                 fcc     'CREATE'
EAED EAD0             (        forth.asm):01535                 fdb     DEPTH
EAEF C7               (        forth.asm):01536                 RFCS
EAF0 BDE491           (        forth.asm):01537 (7)     CREAT0  jsr     LOCWRT          Code entry point returned to Y
EAF3 868E             (        forth.asm):01538 (2)             lda     #LDXOPC         LDX immediate
EAF5 A7A0             (        forth.asm):01539 (4+1)           sta     ,y+
EAF7 1F21             (        forth.asm):01540 (4)             tfr     y,x
EAF9 3008             (        forth.asm):01541 (4+1)           leax    8,x
EAFB AFA1             (        forth.asm):01542 (5+2)           stx     ,y++
EAFD 86BD             (        forth.asm):01543 (2)             lda     #JSROPC         JSR extended
EAFF BDE507           (        forth.asm):01544 (7)             jsr     VARCON1         Compile JSR NPUSH
EB02 8639             (        forth.asm):01545 (2)             lda     #RTSOPC         RTS inherent
EB04 A7A0             (        forth.asm):01546 (4+1)           sta     ,y+
EB06 3122             (        forth.asm):01547 (4+1)           leay    2,y             Reserve room for a possible DOES> clause
EB08 109F08           (        forth.asm):01548 (5)     CREAT1  sty     DICEND
EB0B 9E0C             (        forth.asm):01549 (4)             ldx     BDICEND         This is set by LOCWRT (was IY)
EB0D 9F06             (        forth.asm):01550 (4)             stx     LSTWAD
EB0F 39               (        forth.asm):01551 (4)             rts
                      (        forth.asm):01552         
EB10 C5               (        forth.asm):01553         DOES    fcb     $C5             79-STANDARD (REQ168)
EB11 444F45533E       (        forth.asm):01554                 fcc     'DOES>'
EB16 EAE6             (        forth.asm):01555                 fdb     CREATE
EB18 C7               (        forth.asm):01556                 RFCS
EB19 8EEB1F           (        forth.asm):01557 (3)             ldx     #DOESEX         JSR #DOESEX is compiled (no actual return)
EB1C 7EE15D           (        forth.asm):01558 (3)             jmp     EMXASXT         Set as action component
                      (        forth.asm):01559         
EB1F 9E06             (        forth.asm):01560 (4)     DOESEX  ldx     LSTWAD          Header of the last dictionary entry
EB21 E680             (        forth.asm):01561 (4+1)           ldb     ,x+
EB23 C41F             (        forth.asm):01562 (2)             andb    #WRLNMSK        Extract word length
EB25 3A               (        forth.asm):01563 (1)             abx
                      (        forth.asm):01564                 IFNE    RELFEAT
EB26 3009             (        forth.asm):01565 (4+1)           leax    9,x             2 bytes/backlink, 1/cksum, 6 bytes code offset
                      (        forth.asm):01566                 ELSE
                      (        forth.asm):01567                 leax    8,x             2 bytes/backlink, 6 bytes code offset
                      (        forth.asm):01568                 ENDC
EB28 A684             (        forth.asm):01569 (4+0)           lda     ,x
EB2A 8139             (        forth.asm):01570 (2)             cmpa    #RTSOPC         RTS inherent
EB2C 2705             (        forth.asm):01571 (3)             beq     @dosex1
EB2E C60E             (        forth.asm):01572 (2)             ldb     #14             No matching CREATE
EB30 BDE6DE           (        forth.asm):01573 (7)             jsr     ERRHDLR         No return
EB33 867E             (        forth.asm):01574 (2)     @dosex1 lda     #JMPOPC         JMP extended
EB35 A780             (        forth.asm):01575 (4+1)           sta     ,x+             Overwrite RTS opcode
EB37 3520             (        forth.asm):01576 (4+2)           puls    y
EB39 10AF84           (        forth.asm):01577 (6+0)           sty     ,x
EB3C 39               (        forth.asm):01578 (4)             rts
                      (        forth.asm):01579         
EB3D 87               (        forth.asm):01580         LITERAL fcb     $87             79-STANDARD (REQ215)
EB3E 4C49544552414C   (        forth.asm):01581                 fcc     'LITERAL'
EB45 EB10             (        forth.asm):01582                 fdb     DOES
EB47 C7               (        forth.asm):01583                 RFCS
EB48 BDE769           (        forth.asm):01584 (7)             jsr     NPOP
EB4B 0D21             (        forth.asm):01585 (4)             tst     USTATE+1
EB4D 2601             (        forth.asm):01586 (3)             bne     @comp
EB4F 39               (        forth.asm):01587 (4)             rts                     The standard defines no semantics in interp mode
EB50 109E08           (        forth.asm):01588 (5)     @comp   ldy     DICEND
EB53 868E             (        forth.asm):01589 (2)             lda     #LDXOPC         LDX immediate
EB55 BDE50A           (        forth.asm):01590 (7)             jsr     VARCON2         Compile LDX #X
EB58 109F08           (        forth.asm):01591 (5)             sty     DICEND          Update HERE
EB5B 8EE75B           (        forth.asm):01592 (3)             ldx     #NPUSH
EB5E 7EE15D           (        forth.asm):01593 (3)             jmp     EMXASXT         Set NPUSH as action component
                      (        forth.asm):01594         
                      (        forth.asm):01595         * Functionally: : CONSTANT CREATE , DOES> @ ;
                      (        forth.asm):01596         * The following code produces more compact code.
EB61 08               (        forth.asm):01597         CONS    fcb     8               79-STANDARD (REQ185)
EB62 434F4E5354414E54 (        forth.asm):01598                 fcc     'CONSTANT'
EB6A EB3D             (        forth.asm):01599                 fdb     LITERAL
EB6C C7               (        forth.asm):01600                 RFCS
EB6D BDE769           (        forth.asm):01601 (7)             jsr     NPOP
EB70 1F16             (        forth.asm):01602 (4)             tfr     x,w
EB72 BDE491           (        forth.asm):01603 (7)             jsr     LOCWRT          Create dictionary entry
EB75 1F61             (        forth.asm):01604 (4)             tfr     w,x
EB77 868E             (        forth.asm):01605 (2)             lda     #LDXOPC         ldx immediate
EB79 BDE50A           (        forth.asm):01606 (7)             jsr     VARCON2         Compile LDX #CSTVAL
EB7C BDE505           (        forth.asm):01607 (7)             jsr     VARCON          Compile JMP NPUSH
                      (        forth.asm):01608                 IFNE    RELFEAT
EB7F 8D87             (        forth.asm):01609 (6)             bsr     CREAT1
EB81 2059             (        forth.asm):01610                 RFXT    bra,MONITOR+10  XT for MONITOR
                      (        forth.asm):01611                 ELSE
                      (        forth.asm):01612                 bra     CREAT1
                      (        forth.asm):01613                 ENDC
                      (        forth.asm):01614         
                      (        forth.asm):01615         * Functionally: : VARIABLE CREATE 2 ALLOT ;
                      (        forth.asm):01616         * However we can save three bytes per instance with the following code.
EB83 08               (        forth.asm):01617         VARI    fcb     8               79-STANDARD (REQ227)
EB84 5641524941424C45 (        forth.asm):01618                 fcc     'VARIABLE'
EB8C EB61             (        forth.asm):01619                 fdb     CONS
EB8E C7               (        forth.asm):01620                 RFCS
EB8F BDE491           (        forth.asm):01621 (7)             jsr     LOCWRT
EB92 868E             (        forth.asm):01622 (2)             lda     #LDXOPC         ldx immediate
EB94 A7A0             (        forth.asm):01623 (4+1)           sta     ,y+
EB96 1F26             (        forth.asm):01624 (4)             tfr     y,w             Preserve Y (HERE)
EB98 3125             (        forth.asm):01625 (4+1)           leay    5,y             Relative variable address
EB9A 1F21             (        forth.asm):01626 (4)             tfr     y,x
EB9C 1F62             (        forth.asm):01627 (4)             tfr     w,y             Restore Y (HERE)
EB9E AFA1             (        forth.asm):01628 (5+2)           stx     ,y++            Address field for LDX #VARADDR
EBA0 BDE505           (        forth.asm):01629 (7)             jsr     VARCON          Compile JMP NPUSH
EBA3 3122             (        forth.asm):01630 (4+1)           leay    2,y             2 ALLOT
EBA5 7EEB08           (        forth.asm):01631 (3)             jmp     CREAT1
                      (        forth.asm):01632         
EBA8 09               (        forth.asm):01633         IMMED   fcb     9               79-STANDARD (REQ103)
EBA9 494D4D4544494154 (        forth.asm):01634                 fcc     'IMMEDIATE'
     45
EBB2 EB83             (        forth.asm):01635                 fdb     VARI
EBB4 C7               (        forth.asm):01636                 RFCS
EBB5 C680             (        forth.asm):01637 (2)             ldb     #IMDFLM
EBB7 9E06             (        forth.asm):01638 (4)     IMMED1  ldx     LSTWAD
EBB9 A684             (        forth.asm):01639 (4+0)           lda     ,x
EBBB 103598           (        forth.asm):01640 (4)             orr     b,a
EBBE A784             (        forth.asm):01641 (4+0)           sta     ,x
EBC0 39               (        forth.asm):01642 (4)             rts
                      (        forth.asm):01643         
EBC1 08               (        forth.asm):01644         RSTRCT  fcb     8               Non-standard (GNU Forth)
EBC2 5245535452494354 (        forth.asm):01645                 fcc     'RESTRICT'      Make word available in compilation mode only
EBCA EBA8             (        forth.asm):01646                 fdb     IMMED
EBCC C7               (        forth.asm):01647                 RFCS
EBCD C640             (        forth.asm):01648 (2)             ldb     #DEFFLM
EBCF 20E6             (        forth.asm):01649 (3)             bra     IMMED1
                      (        forth.asm):01650         
                      (        forth.asm):01651                 IFNE    RELFEAT
                      (        forth.asm):01652         * This non-standard word enables checkum monitoring by ICHECK for the
                      (        forth.asm):01653         * last defined word in the dictionary. : words are monitored by default
                      (        forth.asm):01654         * and so are constants. CREATEd words require an explicit invokation of
                      (        forth.asm):01655         * MONITOR if they are to be checked for integrity.
EBD1 07               (        forth.asm):01656         MONITOR fcb     7
EBD2 4D4F4E49544F52   (        forth.asm):01657                 fcc     'MONITOR'       ( -- )
EBD9 EBC1             (        forth.asm):01658                 fdb     RSTRCT
EBDB C7               (        forth.asm):01659                 RFCS
EBDC 9E06             (        forth.asm):01660 (4)             ldx     LSTWAD          Last word header address
EBDE A684             (        forth.asm):01661 (4+0)           lda     ,x
EBE0 8A20             (        forth.asm):01662 (2)             ora     #MONFLM         Set the monitored flag in the attribute field
EBE2 A784             (        forth.asm):01663 (4+0)           sta     ,x
EBE4 8D08             (        forth.asm):01664 (6)             bsr     HDRSKIP         Skip the header (XT to X), clear A
EBE6 109E08           (        forth.asm):01665 (5)             ldy     DICEND          The upper code section limit (excluded)
EBE9 8D0D             (        forth.asm):01666 (6)             bsr     HDRCSUM         Current word's definition's checksum to A
EBEB A71F             (        forth.asm):01667 (4+1)           sta     -1,x            Store the computed checksum into the header
EBED 39               (        forth.asm):01668 (4)             rts
                      (        forth.asm):01669         
                      (        forth.asm):01670         * On entry, X has a word's header address. On return X has the compilation
                      (        forth.asm):01671         * address for that word (XT). A is cleared so as to initialize the checksum.
EBEE A684             (        forth.asm):01672 (4+0)   HDRSKIP lda     ,x              Word's header attribute byte to A
EBF0 841F             (        forth.asm):01673 (2)             anda    #WRLNMSK        Extract the word's length
EBF2 8B04             (        forth.asm):01674 (2)             adda    #4              1B attribute, 2B backlink, 1B checksum
EBF4 3086             (        forth.asm):01675 (4+1)           leax    a,x             X has the word's XT. -1,X has the orig checksum
EBF6 4F               (        forth.asm):01676 (1)             clra
EBF7 39               (        forth.asm):01677 (4)             rts
                      (        forth.asm):01678         
                      (        forth.asm):01679         * On entry X has a word's compilation address (XT). A is supposed to have been
                      (        forth.asm):01680         * previously cleared. Y has the upper bound of the code section's address
                      (        forth.asm):01681         * (excluded). On return, A will have the word's code section's checksum.
                      (        forth.asm):01682         * X is preserved.
EBF8 3410             (        forth.asm):01683 (4+2)   HDRCSUM pshs    x
EBFA A880             (        forth.asm):01684 (4+1)   @hdrcs1 eora    ,x+             Update the checksum
EBFC 103712           (        forth.asm):01685 (4)             cmpr    x,y             Upper bound reached?
EBFF 26F9             (        forth.asm):01686 (3)             bne     @hdrcs1         No. Process next byte in word's code section
EC01 3510             (        forth.asm):01687 (4+2)           puls    x
EC03 39               (        forth.asm):01688 (4)             rts
                      (        forth.asm):01689         
                      (        forth.asm):01690         * This non-standard word walks through the dictionary linked list and checks
                      (        forth.asm):01691         * that the words that have the MONFLM flag set in their header's attribute
                      (        forth.asm):01692         * field have a definition that still matches the checksum stored in the word's
                      (        forth.asm):01693         * header. This is meant to be used interactively, as a debugging tool, since
                      (        forth.asm):01694         * multitasking is not supported by this implementation. Therefore no status
                      (        forth.asm):01695         * value is returned. Feedback will only be provided for corrupted words, in
                      (        forth.asm):01696         * the form of a diagnostic message printed to the console.
EC04 06               (        forth.asm):01697         ICHECK  fcb     6
EC05 49434845434B     (        forth.asm):01698                 fcc     'ICHECK'        ( -- )
EC0B EBD1             (        forth.asm):01699                 fdb     MONITOR
EC0D C7               (        forth.asm):01700                 RFCS
EC0E 109E08           (        forth.asm):01701 (5)             ldy     DICEND          Upper bound for the code of the last word (exc.)
EC11 9E06             (        forth.asm):01702 (4)             ldx     LSTWAD          LAST points to the header of the last word
EC13 3410             (        forth.asm):01703 (4+2)   @icklop pshs    x               Current word's header address
EC15 A684             (        forth.asm):01704 (4+0)           lda     ,x              Word's header attribute byte to A
EC17 8520             (        forth.asm):01705 (2)             bita    #MONFLM         Is this a monitored word?
EC19 2726             (        forth.asm):01706 (3)             beq     @icknxt         No. Point to the next word
EC1B 8DD1             (        forth.asm):01707 (6)             bsr     HDRSKIP         Skip the header (XT to X), clear A
EC1D 8DD9             (        forth.asm):01708 (6)             bsr     HDRCSUM         Current word's definition's checksum to A
EC1F A11F             (        forth.asm):01709 (4+1)           cmpa    -1,x            Does the checksum match the compile time value?
EC21 271E             (        forth.asm):01710 (3)             beq     @icknxt         Yes. Point to the next word
                      (        forth.asm):01711         * Current word's definition has been modified since its original definition!
EC23 BDE26C           (        forth.asm):01712 (7)             jsr     PUTCR
EC26 AEE4             (        forth.asm):01713 (5+0)           ldx     ,s              Current word's header address
EC28 E680             (        forth.asm):01714 (4+1)           ldb     ,x+
EC2A C41F             (        forth.asm):01715 (2)             andb    #WRLNMSK
EC2C 4F               (        forth.asm):01716 (1)             clra
EC2D BDE75B           (        forth.asm):01717 (7)             jsr     NPUSH           Word's name base address
EC30 1F01             (        forth.asm):01718 (4)             tfr     d,x
EC32 BDE75B           (        forth.asm):01719 (7)             jsr     NPUSH           Byte count for TYPE
EC35 BDF5E4           (        forth.asm):01720                 RFXT    jsr,TYPE+7      XT for TYPE
EC38 BDF596           (        forth.asm):01721                 RFXT    jsr,SPACE+8     XT for SPACE
EC3B 8EEC4E           (        forth.asm):01722 (3)             ldx     #CSUMFLM
EC3E BDE25F           (        forth.asm):01723 (7)             jsr     PUTS            Feedback for checksum failure
EC41 3510             (        forth.asm):01724 (4+2)   @icknxt puls    x               Current word's header address
EC43 1F12             (        forth.asm):01725 (4)             tfr     x,y             Point to the end of the previous word's code
EC45 8DA7             (        forth.asm):01726 (6)             bsr     HDRSKIP         Skip the header (XT to X), clear A
EC47 AE1D             (        forth.asm):01727 (5+1)           ldx     -3,x            Point to the previous header via the backlink
EC49 2702             (        forth.asm):01728 (3)             beq     @ickdon         We've just reached the end of the dictionary
EC4B 20C6             (        forth.asm):01729 (3)             bra     @icklop
EC4D 39               (        forth.asm):01730 (4)     @ickdon rts
                      (        forth.asm):01731         
EC4E 696E746567726974 (        forth.asm):01732         CSUMFLM fcn     'integrity check failed'
     7920636865636B20
     6661696C656400
                      (        forth.asm):01733                 ENDC                    RELFEAT enabled
                      (        forth.asm):01734         
EC65 C2               (        forth.asm):01735         DO      fcb     $C2             79-STANDARD (REQ142)
EC66 444F             (        forth.asm):01736                 fcc     'DO'
                      (        forth.asm):01737                 IFNE    RELFEAT
EC68 EC04             (        forth.asm):01738                 fdb     ICHECK
                      (        forth.asm):01739                 ELSE
                      (        forth.asm):01740                 fdb     RSTRCT
                      (        forth.asm):01741                 ENDC
EC6A C7               (        forth.asm):01742                 RFCS
EC6B 9E08             (        forth.asm):01743 (4)             ldx     DICEND
EC6D 3003             (        forth.asm):01744 (4+1)           leax    3,x
EC6F BDE778           (        forth.asm):01745 (7)             jsr     RPUSH
EC72 8EEC78           (        forth.asm):01746 (3)             ldx     #DOEX
EC75 7EE15D           (        forth.asm):01747 (3)             jmp     EMXASXT         Set as action component
                      (        forth.asm):01748         
EC78 BDFBD9           (        forth.asm):01749         DOEX    RFXT    jsr,SWAP+7      XT for SWAP
EC7B BDEFE5           (        forth.asm):01750                 RFXT    jsr,TOR+5       XT for >R
EC7E 7EEFE5           (        forth.asm):01751                 RFXT    jmp,TOR+5       XT for >R
                      (        forth.asm):01752         
EC81 C4               (        forth.asm):01753         LOOP    fcb     $C4             79-STANDARD (REQ124)
EC82 4C4F4F50         (        forth.asm):01754                 fcc     'LOOP'
EC86 EC65             (        forth.asm):01755                 fdb     DO
EC88 C7               (        forth.asm):01756                 RFCS
EC89 8EECA8           (        forth.asm):01757 (3)             ldx     #LOOPEX
EC8C 109E08           (        forth.asm):01758 (5)     LOOP1   ldy     DICEND
EC8F 86BD             (        forth.asm):01759 (2)             lda     #JSROPC         JSR extended
EC91 BDE149           (        forth.asm):01760 (7)             jsr     CHKRTS          Check if the final RTS can be omitted
EC94 BDE50A           (        forth.asm):01761 (7)             jsr     VARCON2
EC97 8E2503           (        forth.asm):01762 (3)             ldx     #BCSOPC         Compile "BCS *+5"
EC9A AFA1             (        forth.asm):01763 (5+2)           stx     ,y++
EC9C BDE796           (        forth.asm):01764 (7)             jsr     RPOP
EC9F 867E             (        forth.asm):01765 (2)             lda     #JMPOPC
ECA1 BDE50A           (        forth.asm):01766 (7)             jsr     VARCON2         Compile "JMP R@"
ECA4 109F08           (        forth.asm):01767 (5)             sty     DICEND          No action component
ECA7 39               (        forth.asm):01768 (4)             rts
                      (        forth.asm):01769         
ECA8 8E0001           (        forth.asm):01770 (3)     LOOPEX  ldx     #1
ECAB 2011             (        forth.asm):01771 (3)             bra     PLOPEX1
                      (        forth.asm):01772         
ECAD C5               (        forth.asm):01773         PLOOP   fcb     $C5             79-STANDARD (REQ141)
ECAE 2B4C4F4F50       (        forth.asm):01774                 fcc     '+LOOP'         The sign hdl reqs for REQ124 should apply though
ECB3 EC81             (        forth.asm):01775                 fdb     LOOP
ECB5 C7               (        forth.asm):01776                 RFCS
ECB6 8EECBB           (        forth.asm):01777 (3)             ldx     #PLOOPEX
ECB9 20D1             (        forth.asm):01778 (3)             bra     LOOP1
                      (        forth.asm):01779         
ECBB BDE769           (        forth.asm):01780 (7)     PLOOPEX jsr     NPOP
ECBE 1F16             (        forth.asm):01781 (4)     PLOPEX1 tfr     x,w             Increment to W
ECC0 BDE796           (        forth.asm):01782 (7)             jsr     RPOP
ECC3 1F12             (        forth.asm):01783 (4)             tfr     x,y             Index to Y
ECC5 BDE796           (        forth.asm):01784 (7)             jsr     RPOP            Limit to X
ECC8 103062           (        forth.asm):01785 (4)             addr    w,y             Update index
ECCB 114D             (        forth.asm):01786 (2)             tste
ECCD 2B10             (        forth.asm):01787 (3)             bmi     @neginc
ECCF 103721           (        forth.asm):01788 (4)             cmpr    y,x
ECD2 2F12             (        forth.asm):01789 (3)             ble     @done           We're done. Return With CFLAG set
ECD4 BDE778           (        forth.asm):01790 (7)     @iter   jsr     RPUSH           Push back the limit
ECD7 1F21             (        forth.asm):01791 (4)             tfr     y,x
ECD9 BDE778           (        forth.asm):01792 (7)             jsr     RPUSH           Push back the index
ECDC 1CFE             (        forth.asm):01793 (2)             andcc   #^CFLAG         Clear CFLAG
ECDE 39               (        forth.asm):01794 (4)             rts
ECDF 103721           (        forth.asm):01795 (4)     @neginc cmpr    y,x
ECE2 27F0             (        forth.asm):01796 (3)             beq     @iter           79-STANDARD irregular historical precedent
ECE4 2BEE             (        forth.asm):01797 (3)             bmi     @iter
ECE6 1A01             (        forth.asm):01798 (2)     @done   orcc    #CFLAG          Set CFLAG
ECE8 39               (        forth.asm):01799 (4)             rts
                      (        forth.asm):01800         
ECE9 46               (        forth.asm):01801         UNLOOP  fcb     $46             ANSI (Core)
ECEA 554E4C4F4F50     (        forth.asm):01802                 fcc     'UNLOOP'
ECF0 ECAD             (        forth.asm):01803                 fdb     PLOOP
ECF2 C7               (        forth.asm):01804                 RFCS
ECF3 BDE796           (        forth.asm):01805 (7)             jsr     RPOP            Drop the index from the return stack
ECF6 7EE796           (        forth.asm):01806 (3)             jmp     RPOP            and the loop limit as well
                      (        forth.asm):01807         
ECF9 C2               (        forth.asm):01808         IF      fcb     $C2             79-STANDARD (REQ210)
ECFA 4946             (        forth.asm):01809                 fcc     'IF'
ECFC ECE9             (        forth.asm):01810                 fdb     UNLOOP
ECFE C7               (        forth.asm):01811                 RFCS
ECFF 109E08           (        forth.asm):01812 (5)             ldy     DICEND
ED02 8EED21           (        forth.asm):01813 (3)             ldx     #IFEX
ED05 86BD             (        forth.asm):01814 (2)             lda     #JSROPC         JSR extended
ED07 BDE149           (        forth.asm):01815 (7)             jsr     CHKRTS          Check if the final RTS can be omitted
ED0A BDE50A           (        forth.asm):01816 (7)             jsr     VARCON2
ED0D 8E2603           (        forth.asm):01817 (3)             ldx     #BNEOPC         Compile "BNE *+5"
ED10 AFA1             (        forth.asm):01818 (5+2)           stx     ,y++
ED12 867E             (        forth.asm):01819 (2)             lda     #JMPOPC         JMP extended
ED14 A7A0             (        forth.asm):01820 (4+1)           sta     ,y+
ED16 1F21             (        forth.asm):01821 (4)             tfr     y,x
ED18 BDE778           (        forth.asm):01822 (7)             jsr     RPUSH
ED1B 3122             (        forth.asm):01823 (4+1)           leay    2,y             Reserve 2 bytes for the jump address
ED1D 109F08           (        forth.asm):01824 (5)             sty     DICEND
ED20 39               (        forth.asm):01825 (4)             rts
                      (        forth.asm):01826         
ED21 BDE769           (        forth.asm):01827 (7)     IFEX    jsr     NPOP
ED24 1037C1           (        forth.asm):01828 (4)             cmpr    0,x
ED27 39               (        forth.asm):01829 (4)             rts
                      (        forth.asm):01830         
                      (        forth.asm):01831         * Functionally equivalent to:
                      (        forth.asm):01832         * UNLESS ['] 0= COMPILE, POSTPONE IF ; IMMEDIATE RESTRICT
ED28 C6               (        forth.asm):01833         UNLESS  fcb     $C6             Non-standard (Perl inspired)
ED29 554E4C455353     (        forth.asm):01834                 fcc     'UNLESS'
ED2F ECF9             (        forth.asm):01835                 fdb     IF
ED31 C7               (        forth.asm):01836                 RFCS
ED32 8EEE53           (        forth.asm):01837                 RFXT    ldx,#NULP+5     XT for 0=
ED35 BDF10C           (        forth.asm):01838 (7)             jsr     CMPCOM1
ED38 20C5             (        forth.asm):01839                 RFXT    bra,IF+5        XT for IF
                      (        forth.asm):01840         
ED3A C4               (        forth.asm):01841         ELSE    fcb     $C4             79-STANDARD (REQ167)
ED3B 454C5345         (        forth.asm):01842                 fcc     'ELSE'
ED3F ED28             (        forth.asm):01843                 fdb     UNLESS
ED41 C7               (        forth.asm):01844                 RFCS
ED42 109E08           (        forth.asm):01845 (5)             ldy     DICEND
ED45 867E             (        forth.asm):01846 (2)             lda     #JMPOPC         JMP extended
ED47 A7A0             (        forth.asm):01847 (4+1)           sta     ,y+
ED49 3122             (        forth.asm):01848 (4+1)           leay    2,y
ED4B 109F08           (        forth.asm):01849 (5)             sty     DICEND
ED4E BDE796           (        forth.asm):01850 (7)             jsr     RPOP
ED51 10AF84           (        forth.asm):01851 (6+0)           sty     ,x              Set actual ELSE jump address
ED54 1F21             (        forth.asm):01852 (4)             tfr     y,x
ED56 301E             (        forth.asm):01853 (4+1)           leax    -2,x
ED58 7EE778           (        forth.asm):01854 (3)             jmp     RPUSH
                      (        forth.asm):01855         
ED5B C4               (        forth.asm):01856         THEN    fcb     $C4             79-STANDARD (REQ161)
ED5C 5448454E         (        forth.asm):01857                 fcc     'THEN'
ED60 ED3A             (        forth.asm):01858                 fdb     ELSE
ED62 C7               (        forth.asm):01859                 RFCS
ED63 109E08           (        forth.asm):01860 (5)             ldy     DICEND
ED66 BDE796           (        forth.asm):01861 (7)             jsr     RPOP
ED69 10AF84           (        forth.asm):01862 (6+0)           sty     ,x
ED6C 39               (        forth.asm):01863 (4)             rts
                      (        forth.asm):01864         
ED6D 01               (        forth.asm):01865         EQ      fcb     1               79-STANDARD (REQ173)
ED6E 3D               (        forth.asm):01866                 fcc     '='             ( N1 N2 -- FLAG )
ED6F ED5B             (        forth.asm):01867                 fdb     THEN
ED71 C7               (        forth.asm):01868                 RFCS
ED72 BDE414           (        forth.asm):01869 (7)             jsr     MIN2PST         At least two cells need to be stacked up
ED75 10ECC4           (        forth.asm):01870 (8+0)           ldq     ,u              D:W has N2:N1
ED78 3342             (        forth.asm):01871 (4+1)           leau    2,u             Drop one cell from the user stack
ED7A 1FC1             (        forth.asm):01872 (4)             tfr     0,x
ED7C 103760           (        forth.asm):01873 (4)             cmpr    w,d
ED7F 2602             (        forth.asm):01874 (3)             bne     @eq1
ED81 3001             (        forth.asm):01875 (4+1)           leax    1,x
ED83 AFC4             (        forth.asm):01876 (5+0)   @eq1    stx     ,u              Store in place to FLAG
ED85 39               (        forth.asm):01877 (4)             rts
                      (        forth.asm):01878         
ED86 02               (        forth.asm):01879         DIFF    fcb     2               79-STANDARD (REF)
ED87 3C3E             (        forth.asm):01880                 fcc     '<>'            ( N1 N2 -- FLAG )
ED89 ED6D             (        forth.asm):01881                 fdb     EQ
ED8B C7               (        forth.asm):01882                 RFCS
ED8C BDE414           (        forth.asm):01883 (7)             jsr     MIN2PST         At least two cells need to be stacked up
ED8F 10ECC4           (        forth.asm):01884 (8+0)           ldq     ,u              D:W has N2:N1
ED92 3342             (        forth.asm):01885 (4+1)           leau    2,u             Drop one cell from the user stack
ED94 1FC1             (        forth.asm):01886 (4)             tfr     0,x
ED96 103760           (        forth.asm):01887 (4)             cmpr    w,d
ED99 2702             (        forth.asm):01888 (3)             beq     @diff1
ED9B 3001             (        forth.asm):01889 (4+1)           leax    1,x
ED9D AFC4             (        forth.asm):01890 (5+0)   @diff1  stx     ,u              Store in place to FLAG
ED9F 39               (        forth.asm):01891 (4)             rts
                      (        forth.asm):01892         
EDA0 02               (        forth.asm):01893         SINFEQ  fcb     2               Non-standard (Not even ANSI!)
EDA1 3C3D             (        forth.asm):01894                 fcc     '<='            Required for the ORNL fixed sieve benchmark
EDA3 ED86             (        forth.asm):01895                 fdb     DIFF
EDA5 C7               (        forth.asm):01896                 RFCS
EDA6 BDE414           (        forth.asm):01897 (7)             jsr     MIN2PST         At least two cells need to be stacked up
EDA9 10AEC4           (        forth.asm):01898 (6+0)           ldy     ,u
EDAC AE42             (        forth.asm):01899 (5+1)           ldx     2,u
EDAE 104F             (        forth.asm):01900 (2)             clrd
EDB0 103721           (        forth.asm):01901 (4)             cmpr    y,x
EDB3 2E02             (        forth.asm):01902 (3)             bgt     @sinfq1
EDB5 104C             (        forth.asm):01903 (2)             incd
EDB7 3342             (        forth.asm):01904 (4+1)   @sinfq1 leau    2,u             Drop one cell
EDB9 EDC4             (        forth.asm):01905 (5+0)           std     ,u
EDBB 39               (        forth.asm):01906 (4)             rts
                      (        forth.asm):01907         
                      (        forth.asm):01908                 IFNE    DEBUG
EDBC                  (        forth.asm):01909         CC      fcb     2               Non-standard. Used for debugging
                      (        forth.asm):01910                 fcc     'CC'
                      (        forth.asm):01911                 fdb     SINFEQ
                      (        forth.asm):01912                 RFCS
                      (        forth.asm):01913                 ldx     CCREG
                      (        forth.asm):01914                 jmp     NPUSH
                      (        forth.asm):01915                 ENDC
                      (        forth.asm):01916         
EDBC 03               (        forth.asm):01917         XOR     fcb     3               79-STANDARD (REQ179)
EDBD 584F52           (        forth.asm):01918                 fcc     'XOR'
                      (        forth.asm):01919                 IFNE    DEBUG
                      (        forth.asm):01920                 fdb     CC
                      (        forth.asm):01921                 ELSE
EDC0 EDA0             (        forth.asm):01922                 fdb     SINFEQ
                      (        forth.asm):01923                 ENDC
EDC2 C7               (        forth.asm):01924                 RFCS
EDC3 BDE414           (        forth.asm):01925 (7)             jsr     MIN2PST         At least two cells need to be stacked up
EDC6 ECC4             (        forth.asm):01926 (5+0)           ldd     ,u
EDC8 10A642           (        forth.asm):01927 (6+1)           ldw     2,u
EDCB 103660           (        forth.asm):01928 (4)             eorr    w,d
EDCE 3342             (        forth.asm):01929 (4+1)   XOR1    leau    2,u
EDD0 EDC4             (        forth.asm):01930 (5+0)           std     ,u
EDD2 39               (        forth.asm):01931 (4)             rts
                      (        forth.asm):01932         
EDD3 02               (        forth.asm):01933         OR      fcb     2               79-STANDARD (REQ223)
EDD4 4F52             (        forth.asm):01934                 fcc     'OR'
EDD6 EDBC             (        forth.asm):01935                 fdb     XOR
EDD8 C7               (        forth.asm):01936                 RFCS
EDD9 BDE414           (        forth.asm):01937 (7)             jsr     MIN2PST         At least two cells need to be stacked up
EDDC ECC4             (        forth.asm):01938 (5+0)           ldd     ,u
EDDE 10A642           (        forth.asm):01939 (6+1)           ldw     2,u
EDE1 103560           (        forth.asm):01940 (4)             orr     w,d
EDE4 20E8             (        forth.asm):01941 (3)             bra     XOR1
                      (        forth.asm):01942         
EDE6 03               (        forth.asm):01943         AND     fcb     3               79-STANDARD (REQ183)
EDE7 414E44           (        forth.asm):01944                 fcc     'AND'
EDEA EDD3             (        forth.asm):01945                 fdb     OR
EDEC C7               (        forth.asm):01946                 RFCS
EDED BDE414           (        forth.asm):01947 (7)             jsr     MIN2PST         At least two cells need to be stacked up
EDF0 ECC4             (        forth.asm):01948 (5+0)           ldd     ,u
EDF2 10A642           (        forth.asm):01949 (6+1)           ldw     2,u
EDF5 103460           (        forth.asm):01950 (4)             andr    w,d
EDF8 20D4             (        forth.asm):01951 (3)             bra     XOR1
                      (        forth.asm):01952         
EDFA 03               (        forth.asm):01953         COM     fcb     3               79-STANDARD (REF)
EDFB 434F4D           (        forth.asm):01954                 fcc     'COM'
EDFE EDE6             (        forth.asm):01955                 fdb     AND
EE00 C7               (        forth.asm):01956                 RFCS
EE01 BDE769           (        forth.asm):01957 (7)     COM0    jsr     NPOP
EE04 1F10             (        forth.asm):01958 (4)             tfr     x,d
EE06 1043             (        forth.asm):01959 (2)             comd
EE08 1F01             (        forth.asm):01960 (4)             tfr     d,x
EE0A 3610             (        forth.asm):01961                 UCNPUSH
EE0C 39               (        forth.asm):01962 (4)             rts
                      (        forth.asm):01963         
EE0D 06               (        forth.asm):01964         INVERT  fcb     6               ANSI (Core)
EE0E 494E56455254     (        forth.asm):01965                 fcc     'INVERT'
EE14 EDFA             (        forth.asm):01966                 fdb     COM
EE16 C7               (        forth.asm):01967                 RFCS
EE17 20E8             (        forth.asm):01968 (3)             bra     COM0
                      (        forth.asm):01969         
EE19 02               (        forth.asm):01970         ZGREAT  fcb     2               79-STANDARD (REQ118)
EE1A 303E             (        forth.asm):01971                 fcc     '0>'
EE1C EE0D             (        forth.asm):01972                 fdb     INVERT
EE1E C7               (        forth.asm):01973                 RFCS
EE1F BDE769           (        forth.asm):01974 (7)             jsr     NPOP
EE22 1F10             (        forth.asm):01975 (4)             tfr     x,d
EE24 104D             (        forth.asm):01976 (2)             tstd
EE26 2F06             (        forth.asm):01977 (3)             ble     @zgrt1
EE28 8E0001           (        forth.asm):01978 (3)             ldx     #1
EE2B 3610             (        forth.asm):01979                 UCNPUSH
EE2D 39               (        forth.asm):01980 (4)             rts
EE2E 1FC1             (        forth.asm):01981 (4)     @zgrt1  tfr     0,x
EE30 3610             (        forth.asm):01982                 UCNPUSH
EE32 39               (        forth.asm):01983 (4)             rts
                      (        forth.asm):01984         
EE33 02               (        forth.asm):01985         ZLESS   fcb     2               79-STANDARD (REQ144)
EE34 303C             (        forth.asm):01986                 fcc     '0<'
EE36 EE19             (        forth.asm):01987                 fdb     ZGREAT
EE38 C7               (        forth.asm):01988                 RFCS
EE39 BDE769           (        forth.asm):01989 (7)             jsr     NPOP
EE3C 1F10             (        forth.asm):01990 (4)             tfr     x,d
EE3E 104D             (        forth.asm):01991 (2)             tstd
EE40 2C06             (        forth.asm):01992 (3)             bge     @zlss1
EE42 8E0001           (        forth.asm):01993 (3)             ldx     #1
EE45 3610             (        forth.asm):01994                 UCNPUSH
EE47 39               (        forth.asm):01995 (4)             rts
EE48 1FC1             (        forth.asm):01996 (4)     @zlss1  tfr     0,x
EE4A 3610             (        forth.asm):01997                 UCNPUSH
EE4C 39               (        forth.asm):01998 (4)             rts
                      (        forth.asm):01999         
EE4D 02               (        forth.asm):02000         NULP    fcb     2               79-STANDARD (REQ180)
EE4E 303D             (        forth.asm):02001                 fcc     '0='
EE50 EE33             (        forth.asm):02002                 fdb     ZLESS
EE52 C7               (        forth.asm):02003                 RFCS
EE53 BDE769           (        forth.asm):02004 (7)             jsr     NPOP
EE56 1F10             (        forth.asm):02005 (4)             tfr     x,d
EE58 1FC1             (        forth.asm):02006 (4)             tfr     0,x
EE5A 104D             (        forth.asm):02007 (2)             tstd
EE5C 2703             (        forth.asm):02008 (3)             beq     @nulp2
EE5E 3610             (        forth.asm):02009         @nulp1  UCNPUSH
EE60 39               (        forth.asm):02010 (4)             rts
EE61 3001             (        forth.asm):02011 (4+1)   @nulp2  leax    1,x
EE63 20F9             (        forth.asm):02012 (3)             bra     @nulp1
                      (        forth.asm):02013         
EE65 03               (        forth.asm):02014         NOT     fcb     3               79-STANDARD (REQ165)
EE66 4E4F54           (        forth.asm):02015                 fcc     'NOT'
EE69 EE4D             (        forth.asm):02016                 fdb     NULP
EE6B C7               (        forth.asm):02017                 RFCS
EE6C 20E5             (        forth.asm):02018                 RFXT    bra,NULP+5      XT for 0=
                      (        forth.asm):02019         
EE6E 02               (        forth.asm):02020         USUP    fcb     2               ANSI (Core Ext)
EE6F 553E             (        forth.asm):02021                 fcc     'U>'
EE71 EE65             (        forth.asm):02022                 fdb     NOT
EE73 C7               (        forth.asm):02023                 RFCS
EE74 BDE50F           (        forth.asm):02024 (7)             jsr     CMP2
EE77 2302             (        forth.asm):02025 (3)             bls     @usup1
EE79 3001             (        forth.asm):02026 (4+1)           leax    1,x
EE7B 3610             (        forth.asm):02027         @usup1  UCNPUSH
EE7D 39               (        forth.asm):02028 (4)             rts
                      (        forth.asm):02029         
EE7E 02               (        forth.asm):02030         UINF    fcb     2               79-STANDARD (REQ150)
EE7F 553C             (        forth.asm):02031                 fcc     'U<'
EE81 EE6E             (        forth.asm):02032                 fdb     USUP
EE83 C7               (        forth.asm):02033                 RFCS
EE84 BDE50F           (        forth.asm):02034 (7)             jsr     CMP2
EE87 2402             (        forth.asm):02035 (3)             bhs     @uinf1          Z is set
EE89 3001             (        forth.asm):02036 (4+1)           leax    1,x
EE8B 3610             (        forth.asm):02037         @uinf1  UCNPUSH
EE8D 39               (        forth.asm):02038 (4)             rts
                      (        forth.asm):02039         
                      (        forth.asm):02040         * Functionally: : WITHIN OVER - >R - R> U< ;
EE8E 06               (        forth.asm):02041         WITHIN  fcb     6               ANSI (Core)
EE8F 57495448494E     (        forth.asm):02042                 fcc     'WITHIN'        ( n1 n2 n3 -- flag )
EE95 EE7E             (        forth.asm):02043                 fdb     UINF
EE97 C7               (        forth.asm):02044                 RFCS
EE98 BDFC1F           (        forth.asm):02045                 RFXT    jsr,OVER+7      XT for OVER
EE9B BDF7B2           (        forth.asm):02046                 RFXT    jsr,MINUS+4     XT for -
EE9E BDEFE5           (        forth.asm):02047                 RFXT    jsr,TOR+5       XT for >R
EEA1 BDF7B2           (        forth.asm):02048                 RFXT    jsr,MINUS+4     XT for -
EEA4 BDEFD9           (        forth.asm):02049                 RFXT    jsr,RFROM+5     XT for R>
EEA7 20DB             (        forth.asm):02050                 RFXT    bra,UINF+5      XT for U<
                      (        forth.asm):02051         
EEA9 01               (        forth.asm):02052         SUP     fcb     1               79-STANDARD (REQ102)
EEAA 3E               (        forth.asm):02053                 fcc     '>'
EEAB EE8E             (        forth.asm):02054                 fdb     WITHIN
EEAD C7               (        forth.asm):02055                 RFCS
EEAE BDE50F           (        forth.asm):02056 (7)             jsr     CMP2
EEB1 2F02             (        forth.asm):02057 (3)             ble     @sup1
EEB3 3001             (        forth.asm):02058 (4+1)           leax    1,x
EEB5 3610             (        forth.asm):02059         @sup1   UCNPUSH
EEB7 39               (        forth.asm):02060 (4)             rts
                      (        forth.asm):02061         
EEB8 01               (        forth.asm):02062         INF     fcb     1               79-STANDARD (REQ139)
EEB9 3C               (        forth.asm):02063                 fcc     '<'
EEBA EEA9             (        forth.asm):02064                 fdb     SUP
EEBC C7               (        forth.asm):02065                 RFCS
EEBD BDE50F           (        forth.asm):02066 (7)             jsr     CMP2
EEC0 2C02             (        forth.asm):02067 (3)             bge     @inf1
EEC2 3001             (        forth.asm):02068 (4+1)           leax    1,x
EEC4 3610             (        forth.asm):02069         @inf1   UCNPUSH
EEC6 39               (        forth.asm):02070 (4)             rts
                      (        forth.asm):02071         
EEC7 03               (        forth.asm):02072         MAX     fcb     3               79-STANDARD (REQ218)
EEC8 4D4158           (        forth.asm):02073                 fcc     'MAX'
EECB EEB8             (        forth.asm):02074                 fdb     INF
EECD C7               (        forth.asm):02075                 RFCS
EECE BDE769           (        forth.asm):02076 (7)             jsr     NPOP
EED1 1F12             (        forth.asm):02077 (4)             tfr     x,y
EED3 BDE769           (        forth.asm):02078 (7)             jsr     NPOP
EED6 103721           (        forth.asm):02079 (4)             cmpr    y,x
EED9 2C02             (        forth.asm):02080 (3)             bge     @pshrv1
EEDB 1F21             (        forth.asm):02081 (4)             tfr     y,x
EEDD 3610             (        forth.asm):02082         @pshrv1 UCNPUSH
EEDF 39               (        forth.asm):02083 (4)             rts
                      (        forth.asm):02084         
EEE0 03               (        forth.asm):02085         MIN     fcb     3               79-STANDARD (REQ127)
EEE1 4D494E           (        forth.asm):02086                 fcc     'MIN'
EEE4 EEC7             (        forth.asm):02087                 fdb     MAX
EEE6 C7               (        forth.asm):02088                 RFCS
EEE7 BDE769           (        forth.asm):02089 (7)             jsr     NPOP
EEEA 1F12             (        forth.asm):02090 (4)             tfr     x,y
EEEC BDE769           (        forth.asm):02091 (7)             jsr     NPOP
EEEF 103721           (        forth.asm):02092 (4)             cmpr    y,x
EEF2 2F02             (        forth.asm):02093 (3)             ble     @pshrv2
EEF4 1F21             (        forth.asm):02094 (4)             tfr     y,x
EEF6 3610             (        forth.asm):02095         @pshrv2 UCNPUSH
EEF8 39               (        forth.asm):02096 (4)             rts
                      (        forth.asm):02097         
EEF9 03               (        forth.asm):02098         ABS     fcb     3               79-STANDARD (REQ108)
EEFA 414253           (        forth.asm):02099                 fcc     'ABS'
EEFD EEE0             (        forth.asm):02100                 fdb     MIN
EEFF C7               (        forth.asm):02101                 RFCS
EF00 BDE769           (        forth.asm):02102 (7)             jsr     NPOP
EF03 1F10             (        forth.asm):02103 (4)             tfr     x,d
EF05 104D             (        forth.asm):02104 (2)             tstd
EF07 2A04             (        forth.asm):02105 (3)             bpl     @abs1
EF09 1040             (        forth.asm):02106 (2)             negd
EF0B 1F01             (        forth.asm):02107 (4)             tfr     d,x
EF0D 3610             (        forth.asm):02108         @abs1   UCNPUSH
EF0F 39               (        forth.asm):02109 (4)             rts
                      (        forth.asm):02110         
EF10 06               (        forth.asm):02111         NEGATE  fcb     6               79-STANDARD (REQ177)
EF11 4E4547415445     (        forth.asm):02112                 fcc     'NEGATE'
EF17 EEF9             (        forth.asm):02113                 fdb     ABS
EF19 C7               (        forth.asm):02114                 RFCS
EF1A BDE40F           (        forth.asm):02115 (7)             jsr     MIN1PST         At least one cell needs to be stacked up
EF1D ECC4             (        forth.asm):02116 (5+0)           ldd     ,u
EF1F 1040             (        forth.asm):02117 (2)             negd
EF21 EDC4             (        forth.asm):02118 (5+0)           std     ,u
EF23 39               (        forth.asm):02119 (4)             rts
                      (        forth.asm):02120         
EF24 C5               (        forth.asm):02121         BEGIN   fcb     $C5             79-STANDARD (REQ147)
EF25 424547494E       (        forth.asm):02122                 fcc     'BEGIN'
EF2A EF10             (        forth.asm):02123                 fdb     NEGATE
EF2C C7               (        forth.asm):02124                 RFCS
EF2D 9E08             (        forth.asm):02125 (4)             ldx     DICEND
EF2F 7EE778           (        forth.asm):02126 (3)             jmp     RPUSH
                      (        forth.asm):02127         
EF32 C5               (        forth.asm):02128         AGAIN   fcb     $C5             79-STANDARD (REF114)
EF33 414741494E       (        forth.asm):02129                 fcc     'AGAIN'
EF38 EF24             (        forth.asm):02130                 fdb     BEGIN
EF3A C7               (        forth.asm):02131                 RFCS
EF3B BDE796           (        forth.asm):02132 (7)             jsr     RPOP
EF3E 1F12             (        forth.asm):02133 (4)             tfr     x,y
EF40 9E08             (        forth.asm):02134 (4)             ldx     DICEND
EF42 867E             (        forth.asm):02135 (2)             lda     #JMPOPC         JMP extended
EF44 A780             (        forth.asm):02136 (4+1)           sta     ,x+
EF46 10AF81           (        forth.asm):02137 (6+2)           sty     ,x++
EF49 9F08             (        forth.asm):02138 (4)             stx     DICEND
EF4B 8602             (        forth.asm):02139 (2)             lda     #2
EF4D 972C             (        forth.asm):02140 (3)             sta     RTSREMV         Trigger the RTS removal optimization
EF4F 39               (        forth.asm):02141 (4)             rts
                      (        forth.asm):02142         
                      (        forth.asm):02143         # The standard does not require this as being immediate but I do.
EF50 C4               (        forth.asm):02144         EXIT    fcb     $C4             79-STANDARD (REQ117)
EF51 45584954         (        forth.asm):02145                 fcc     'EXIT'
EF55 EF32             (        forth.asm):02146                 fdb     AGAIN
EF57 C7               (        forth.asm):02147                 RFCS
EF58 9E08             (        forth.asm):02148 (4)             ldx     DICEND
EF5A 301D             (        forth.asm):02149 (4+1)           leax    -3,x
EF5C 109E14           (        forth.asm):02150 (5)             ldy     JSRLAST
EF5F 103721           (        forth.asm):02151 (4)             cmpr    y,x
EF62 2605             (        forth.asm):02152 (3)             bne     @noopt          Tail JMP optimization is not possible
EF64 867E             (        forth.asm):02153 (2)             lda     #JMPOPC         JMP extended
EF66 A784             (        forth.asm):02154 (4+0)           sta     ,x
EF68 39               (        forth.asm):02155 (4)             rts
EF69 3003             (        forth.asm):02156 (4+1)   @noopt  leax    3,x             Point back to HERE
EF6B 8639             (        forth.asm):02157 (2)             lda     #RTSOPC         RTS inherent
EF6D A780             (        forth.asm):02158 (4+1)           sta     ,x+
EF6F 9F08             (        forth.asm):02159 (4)             stx     DICEND
EF71 39               (        forth.asm):02160 (4)             rts
                      (        forth.asm):02161         
EF72 C5               (        forth.asm):02162         UNTIL   fcb     $C5             79-STANDARD (REQ237)
EF73 554E54494C       (        forth.asm):02163                 fcc     'UNTIL'
EF78 EF50             (        forth.asm):02164                 fdb     EXIT
EF7A C7               (        forth.asm):02165                 RFCS
EF7B 109E08           (        forth.asm):02166 (5)             ldy     DICEND
EF7E 86BD             (        forth.asm):02167 (2)             lda     #JSROPC         JSR extended
EF80 8EED21           (        forth.asm):02168 (3)             ldx     #IFEX
EF83 BDE149           (        forth.asm):02169 (7)             jsr     CHKRTS          Check if the final RTS can be omitted
EF86 BDE50A           (        forth.asm):02170 (7)             jsr     VARCON2
EF89 8E2603           (        forth.asm):02171 (3)             ldx     #BNEOPC         Compile "BNE *+5"
EF8C AFA1             (        forth.asm):02172 (5+2)           stx     ,y++
EF8E 867E             (        forth.asm):02173 (2)             lda     #JMPOPC         JMP extended
EF90 A7A0             (        forth.asm):02174 (4+1)           sta     ,y+
EF92 BDE796           (        forth.asm):02175 (7)             jsr     RPOP
EF95 AFA1             (        forth.asm):02176 (5+2)           stx     ,y++
EF97 109F08           (        forth.asm):02177 (5)             sty     DICEND
EF9A 39               (        forth.asm):02178 (4)             rts
                      (        forth.asm):02179         
EF9B C3               (        forth.asm):02180         END     fcb     $C3             79-STANDARD (REF224)
EF9C 454E44           (        forth.asm):02181                 fcc     'END'
EF9F EF72             (        forth.asm):02182                 fdb     UNTIL
EFA1 C7               (        forth.asm):02183                 RFCS
EFA2 20D7             (        forth.asm):02184                 RFXT    bra,UNTIL+8     XT for UNTIL
                      (        forth.asm):02185         
EFA4 C5               (        forth.asm):02186         WHILE   fcb     $C5             79-STANDARD (REQ149)
EFA5 5748494C45       (        forth.asm):02187                 fcc     'WHILE'
EFAA EF9B             (        forth.asm):02188                 fdb     END
EFAC C7               (        forth.asm):02189                 RFCS
EFAD 7EECFF           (        forth.asm):02190                 RFXT    jmp,IF+5        XT for IF
                      (        forth.asm):02191         
EFB0 C6               (        forth.asm):02192         REPEAT  fcb     $C6             79-STANDARD (REQ120)
EFB1 524550454154     (        forth.asm):02193                 fcc     'REPEAT'
EFB7 EFA4             (        forth.asm):02194                 fdb     WHILE
EFB9 C7               (        forth.asm):02195                 RFCS
EFBA BDE796           (        forth.asm):02196 (7)             jsr     RPOP
EFBD 3410             (        forth.asm):02197 (4+2)           pshs    x
EFBF BDE796           (        forth.asm):02198 (7)             jsr     RPOP
EFC2 109E08           (        forth.asm):02199 (5)             ldy     DICEND
EFC5 867E             (        forth.asm):02200 (2)             lda     #JMPOPC         JMP extended
EFC7 BDE50A           (        forth.asm):02201 (7)             jsr     VARCON2
EFCA 3510             (        forth.asm):02202 (4+2)           puls    x
EFCC 10AF84           (        forth.asm):02203 (6+0)           sty     ,x
EFCF 109F08           (        forth.asm):02204 (5)             sty     DICEND
EFD2 39               (        forth.asm):02205 (4)             rts
                      (        forth.asm):02206         
EFD3 42               (        forth.asm):02207         RFROM   fcb     $42             79-STANDARD (REQ110)
EFD4 523E             (        forth.asm):02208                 fcc     'R>'
EFD6 EFB0             (        forth.asm):02209                 fdb     REPEAT
EFD8 C7               (        forth.asm):02210                 RFCS
EFD9 BDE796           (        forth.asm):02211 (7)             jsr     RPOP
EFDC 7EE75B           (        forth.asm):02212 (3)             jmp     NPUSH
                      (        forth.asm):02213         
EFDF 42               (        forth.asm):02214         TOR     fcb     $42             79-STANDARD (REQ200)
EFE0 3E52             (        forth.asm):02215                 fcc     '>R'
EFE2 EFD3             (        forth.asm):02216                 fdb     RFROM
EFE4 C7               (        forth.asm):02217                 RFCS
EFE5 BDE769           (        forth.asm):02218 (7)             jsr     NPOP
EFE8 7EE778           (        forth.asm):02219 (3)             jmp     RPUSH
                      (        forth.asm):02220         
EFEB 45               (        forth.asm):02221         LEAVE   fcb     $45             79-STANDARD (REQ213)
EFEC 4C45415645       (        forth.asm):02222                 fcc     'LEAVE'
EFF1 EFDF             (        forth.asm):02223                 fdb     TOR
EFF3 C7               (        forth.asm):02224                 RFCS
EFF4 BDE796           (        forth.asm):02225 (7)             jsr     RPOP
EFF7 BDE796           (        forth.asm):02226 (7)             jsr     RPOP
EFFA BDE778           (        forth.asm):02227 (7)             jsr     RPUSH
EFFD 7EE778           (        forth.asm):02228 (3)             jmp     RPUSH
                      (        forth.asm):02229         
F000 41               (        forth.asm):02230         INDI    fcb     $41             79-STANDARD (REQ136)
F001 49               (        forth.asm):02231                 fcc     'I'
F002 EFEB             (        forth.asm):02232                 fdb     LEAVE
F004 C7               (        forth.asm):02233                 RFCS
F005 C601             (        forth.asm):02234 (2)             ldb     #1              1 means top of the stack
F007 962A             (        forth.asm):02235 (3)     RPICKN  lda     RDEPTH
F009 103798           (        forth.asm):02236 (4)             cmpr    b,a
F00C 250A             (        forth.asm):02237 (3)             bcs     @rpick1
F00E 9E00             (        forth.asm):02238 (4)             ldx     RSP
F010 5A               (        forth.asm):02239 (1)             decb                    Minus 1, unlike in the Z80 implementation
F011 58               (        forth.asm):02240 (1)             lslb                    Times 2
F012 3A               (        forth.asm):02241 (1)             abx
F013 AE84             (        forth.asm):02242 (5+0)           ldx     ,x
F015 7EE75B           (        forth.asm):02243 (3)             jmp     NPUSH
F018 C608             (        forth.asm):02244 (2)     @rpick1 ldb     #8              Return stack underflow
F01A BDE6DE           (        forth.asm):02245 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02246         
F01D 42               (        forth.asm):02247         RFETCH  fcb     $42             79-STANDARD (REQ228)
F01E 5240             (        forth.asm):02248                 fcc     'R@'
F020 F000             (        forth.asm):02249                 fdb     INDI
F022 C7               (        forth.asm):02250                 RFCS
F023 20E0             (        forth.asm):02251                 RFXT    bra,INDI+4      XT for I
                      (        forth.asm):02252         
F025 42               (        forth.asm):02253         INDIP   fcb     $42             79-STANDARD (REF)
F026 4927             (        forth.asm):02254                 fdb     $4927
F028 F01D             (        forth.asm):02255                 fdb     RFETCH
F02A C7               (        forth.asm):02256                 RFCS
F02B C602             (        forth.asm):02257 (2)             ldb     #2
F02D 20D8             (        forth.asm):02258 (3)             bra     RPICKN
                      (        forth.asm):02259         
F02F 41               (        forth.asm):02260         INDJ    fcb     $41             79-STANDARD (REQ225)
F030 4A               (        forth.asm):02261                 fcc     'J'
F031 F025             (        forth.asm):02262                 fdb     INDIP
F033 C7               (        forth.asm):02263                 RFCS
F034 C603             (        forth.asm):02264 (2)             ldb     #3
F036 20CF             (        forth.asm):02265 (3)             bra     RPICKN
                      (        forth.asm):02266         
F038 42               (        forth.asm):02267         INDJP   fcb     $42             Non-standard
F039 4A27             (        forth.asm):02268                 fdb     $4A27
F03B F02F             (        forth.asm):02269                 fdb     INDJ
F03D C7               (        forth.asm):02270                 RFCS
F03E C604             (        forth.asm):02271 (2)             ldb     #4
F040 20C5             (        forth.asm):02272 (3)             bra     RPICKN
                      (        forth.asm):02273         
F042 41               (        forth.asm):02274         INDK    fcb     $41             79-STANDARD (REF)
F043 4B               (        forth.asm):02275                 fcc     'K'
F044 F038             (        forth.asm):02276                 fdb     INDJP
F046 C7               (        forth.asm):02277                 RFCS
F047 C605             (        forth.asm):02278 (2)             ldb     #5
F049 20BC             (        forth.asm):02279 (3)             bra     RPICKN
                      (        forth.asm):02280         
F04B 04               (        forth.asm):02281         QUIT    fcb     4               79-STANDARD (REQ211)
F04C 51554954         (        forth.asm):02282                 fcc     'QUIT'
F050 F042             (        forth.asm):02283                 fdb     INDK
F052 C7               (        forth.asm):02284                 RFCS
F053 0F21             (        forth.asm):02285 (5)             clr     USTATE+1
F055 BDEAC8           (        forth.asm):02286                 RFXT    jsr,RCLR+7      XT for RCLR
F058 10CE8000         (        forth.asm):02287 (4)             lds     #RAMSTRT+RAMSIZE Reset the system stack pointer
F05C BDE26C           (        forth.asm):02288 (7)             jsr     PUTCR
F05F 7EE0B7           (        forth.asm):02289 (3)             jmp     INTERP
                      (        forth.asm):02290         
F062 05               (        forth.asm):02291         ABORT   fcb     5               79-STANDARD (REQ101)
F063 41424F5254       (        forth.asm):02292                 fcc     'ABORT'
F068 F04B             (        forth.asm):02293                 fdb     QUIT
F06A C7               (        forth.asm):02294                 RFCS
F06B BDEABC           (        forth.asm):02295                 RFXT    jsr,NCLR+7      XT for NCLR
F06E BDEAC8           (        forth.asm):02296                 RFXT    jsr,RCLR+7      XT for RCLR
F071 C603             (        forth.asm):02297 (2)             ldb     #3
F073 BDE6DE           (        forth.asm):02298 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02299         
F076 04               (        forth.asm):02300         FIND    fcb     4               79-STANDARD (REQ203)
F077 46494E44         (        forth.asm):02301                 fcc     'FIND'          ( -- XT )
F07B F062             (        forth.asm):02302                 fdb     ABORT
F07D C7               (        forth.asm):02303                 RFCS
F07E 1FC2             (        forth.asm):02304 (4)             tfr     0,y             Default return value is zero
F080 BDE7AF           (        forth.asm):02305 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
F083 6D84             (        forth.asm):02306 (5+0)           tst     ,x
F085 2712             (        forth.asm):02307 (3)             beq     @find1
F087 BDE304           (        forth.asm):02308 (7)             jsr     SCNSTOK
F08A 270D             (        forth.asm):02309 (3)             beq     @find1
F08C BDE423           (        forth.asm):02310 (7)             jsr     SWDIC
F08F DC0E             (        forth.asm):02311 (4)             ldd     PLOAD           Retrieve word payload
F091 DD10             (        forth.asm):02312 (4)             std     FNDPLD          Make it accessible through PAYLOAD
F093 DC04             (        forth.asm):02313 (4)             ldd     TOKENEP
F095 931C             (        forth.asm):02314 (4)             subd    BSBFADR
F097 DD22             (        forth.asm):02315 (4)             std     UTOIN           Derive >IN from TOKENEP
F099 1F21             (        forth.asm):02316 (4)     @find1  tfr     y,x
F09B 7EE75B           (        forth.asm):02317 (3)             jmp     NPUSH
                      (        forth.asm):02318         
F09E 01               (        forth.asm):02319         RBRACK  fcb     1               79-STANDARD (REQ126)
F09F 5D               (        forth.asm):02320                 fcc     ']'
F0A0 F076             (        forth.asm):02321                 fdb     FIND
F0A2 C7               (        forth.asm):02322                 RFCS
F0A3 8601             (        forth.asm):02323 (2)             lda     #1
F0A5 9721             (        forth.asm):02324 (3)             sta     USTATE+1
F0A7 39               (        forth.asm):02325 (4)             rts
                      (        forth.asm):02326         
                      (        forth.asm):02327         * Note: the standard does not mandate that this primitive be executed in
                      (        forth.asm):02328         * definitions only. IMHO, it ought to, therefore I am forcing the C bit here.
F0A8 C1               (        forth.asm):02329         LBRACK  fcb     $C1             79-STANDARD (REQ125)
F0A9 5B               (        forth.asm):02330                 fcc     '['
F0AA F09E             (        forth.asm):02331                 fdb     RBRACK
F0AC C7               (        forth.asm):02332                 RFCS
F0AD 0F21             (        forth.asm):02333 (5)             clr     USTATE+1
F0AF 39               (        forth.asm):02334 (4)             rts
                      (        forth.asm):02335         
                      (        forth.asm):02336         * Functionally: : ['] FIND POSTPONE LITERAL ; IMMEDIATE RESTRICT
F0B0 C3               (        forth.asm):02337         BKQUOT  fcb     $C3             ANSI (Core)
F0B1 5B275D           (        forth.asm):02338                 fcb     $5B,$27,$5D
F0B4 F0A8             (        forth.asm):02339                 fdb     LBRACK
F0B6 C7               (        forth.asm):02340                 RFCS
F0B7 8DC5             (        forth.asm):02341                 RFXT    bsr,FIND+7      XT for FIND
                      (        forth.asm):02342         * Data stack topmost cell has the target word address.
F0B9 7EEB48           (        forth.asm):02343                 RFXT    jmp,LITERAL+10  XT for LITERAL
                      (        forth.asm):02344         
F0BC C8               (        forth.asm):02345         POSTPON fcb     $C8             ANSI (Core)
F0BD 504F5354504F4E45 (        forth.asm):02346                 fcc     'POSTPONE'      Not a straight alias to [COMPILE]
F0C5 F0B0             (        forth.asm):02347                 fdb     BKQUOT          Non-immediate words deserve special treatment
F0C7 C7               (        forth.asm):02348                 RFCS
F0C8 BDE7AF           (        forth.asm):02349 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
F0CB 6D84             (        forth.asm):02350 (5+0)           tst     ,x
F0CD 2605             (        forth.asm):02351 (3)             bne     @postp2
F0CF C605             (        forth.asm):02352 (2)     @postp1 ldb     #5              Missing word name
F0D1 BDE6DE           (        forth.asm):02353 (7)             jsr     ERRHDLR         No return
F0D4 BDE304           (        forth.asm):02354 (7)     @postp2 jsr     SCNSTOK
F0D7 27F6             (        forth.asm):02355 (3)             beq     @postp1
F0D9 BDE423           (        forth.asm):02356 (7)             jsr     SWDIC
F0DC 2607             (        forth.asm):02357 (3)             bne     @postp3         Word found. Code address returned in Y
F0DE 9E02             (        forth.asm):02358 (4)             ldx     TOKENSP
F0E0 C602             (        forth.asm):02359 (2)             ldb     #2              Undefined (X points to the offending word)
F0E2 BDE6DE           (        forth.asm):02360 (7)             jsr     ERRHDLR         No return
F0E5 1F21             (        forth.asm):02361 (4)     @postp3 tfr     y,x             X has the actual execution token
F0E7 0D34             (        forth.asm):02362 (4)             tst     IMDFLG
F0E9 270A             (        forth.asm):02363 (3)             beq     @postp5         Target word is not immediate
F0EB BDE15D           (        forth.asm):02364 (7)     @postp4 jsr     EMXASXT         Set as action component
F0EE DC02             (        forth.asm):02365 (4)             ldd     TOKENSP         Updated by SWDIC if the word was found
F0F0 931C             (        forth.asm):02366 (4)             subd    BSBFADR
F0F2 DD22             (        forth.asm):02367 (4)             std     UTOIN
F0F4 39               (        forth.asm):02368 (4)             rts
                      (        forth.asm):02369         * The word being considered is non-immediate. The equivalent input should be:
                      (        forth.asm):02370         * ['] <word> COMPILE, We have the XT for <word> in X.
F0F5 BDE4F3           (        forth.asm):02371 (7)     @postp5 jsr     LITER
F0F8 8EF109           (        forth.asm):02372                 RFXT    ldx,#CMPCOMA+11
F0FB 20EE             (        forth.asm):02373 (3)             bra     @postp4
                      (        forth.asm):02374         
                      (        forth.asm):02375         * Like the 79-STANDARD COMPILE word, GNU Forth has this as a compile-only word.
                      (        forth.asm):02376         * This is a wise choice since it allows us to possibly optimize it.
F0FD 48               (        forth.asm):02377         CMPCOMA fcb     $48             ANSI (Core Ext)
F0FE 434F4D50494C452C (        forth.asm):02378                 fcc     'COMPILE,'      ( XT -- )
F106 F0BC             (        forth.asm):02379                 fdb     POSTPON
F108 C7               (        forth.asm):02380                 RFCS
F109 BDE769           (        forth.asm):02381 (7)             jsr     NPOP            Execution token to X
F10C 7EE15D           (        forth.asm):02382 (3)     CMPCOM1 jmp     EMXASXT
                      (        forth.asm):02383         
                      (        forth.asm):02384         * As per the standard, : is not immediate. This allows for further interesting
                      (        forth.asm):02385         * developments, like tracing words execution...
F10F 01               (        forth.asm):02386         COMPC   fcb     $1              79-STANDARD (REQ116)
F110 3A               (        forth.asm):02387                 fcc     ':'
F111 F0FD             (        forth.asm):02388                 fdb     CMPCOMA
F113 C7               (        forth.asm):02389                 RFCS
F114 8601             (        forth.asm):02390 (2)             lda     #1
F116 9721             (        forth.asm):02391 (3)             sta     USTATE+1
F118 104F             (        forth.asm):02392 (2)             clrd
F11A DD14             (        forth.asm):02393 (4)             std     JSRLAST
F11C 8602             (        forth.asm):02394 (2)             lda     #2
F11E 972C             (        forth.asm):02395 (3)             sta     RTSREMV         Optimistic strategy: remove the final RTS
F120 962A             (        forth.asm):02396 (3)             lda     RDEPTH
F122 972B             (        forth.asm):02397 (3)             sta     IRDPTH          Meant to check for unbalanced constructs
F124 7EE491           (        forth.asm):02398 (3)             jmp     LOCWRT
                      (        forth.asm):02399         
F127 C1               (        forth.asm):02400         COMPR   fcb     $C1             79-STANDARD (REQ196)
F128 3B               (        forth.asm):02401                 fcc     ';'
F129 F10F             (        forth.asm):02402                 fdb     COMPC
F12B C7               (        forth.asm):02403                 RFCS
F12C 962A             (        forth.asm):02404 (3)             lda     RDEPTH          Return stack depth
F12E 912B             (        forth.asm):02405 (3)             cmpa    IRDPTH          Same as when : was entered?
F130 2705             (        forth.asm):02406 (3)             beq     @compr1
F132 C609             (        forth.asm):02407 (2)             ldb     #9              Illegal construct if not
F134 BDE6DE           (        forth.asm):02408 (7)             jsr     ERRHDLR         No return
F137 0F21             (        forth.asm):02409 (5)     @compr1 clr     USTATE+1        Back to interpretation mode
F139 9E0C             (        forth.asm):02410 (4)             ldx     BDICEND
F13B 9F06             (        forth.asm):02411 (4)             stx     LSTWAD          Update LAST
F13D 9E08             (        forth.asm):02412 (4)             ldx     DICEND
                      (        forth.asm):02413         * Optimization: replace the last JSR by a JMP, if possible.
F13F DC14             (        forth.asm):02414 (4)             ldd     JSRLAST
F141 2712             (        forth.asm):02415 (3)             beq     @compr3         We need an RTS
F143 301D             (        forth.asm):02416 (4+1)           leax    -3,x
F145 9C14             (        forth.asm):02417 (4)             cmpx    JSRLAST
F147 2604             (        forth.asm):02418 (3)             bne     @compr2
F149 867E             (        forth.asm):02419 (2)             lda     #JMPOPC         JMP extended
F14B A784             (        forth.asm):02420 (4+0)           sta     ,x
                      (        forth.asm):02421         * At this point we still have to emit an RTS unless RTSREMV is 2 or more.
F14D 3003             (        forth.asm):02422 (4+1)   @compr2 leax    3,x
F14F 962C             (        forth.asm):02423 (3)             lda     RTSREMV
F151 8102             (        forth.asm):02424 (2)             cmpa    #2
F153 2404             (        forth.asm):02425 (3)             bhs     @compr4         Optimization applies. We have no forward refs
F155 8639             (        forth.asm):02426 (2)     @compr3 lda     #RTSOPC         RTS inherent
F157 A780             (        forth.asm):02427 (4+1)           sta     ,x+
F159                  (        forth.asm):02428         @compr4
                      (        forth.asm):02429                 IFNE    DEBUG
                      (        forth.asm):02430                 lda     #ILLOPC         Illegal opcode
                      (        forth.asm):02431                 sta     ,x+
                      (        forth.asm):02432                 ENDC
F159 9F08             (        forth.asm):02433 (4)             stx     DICEND          Update HERE
                      (        forth.asm):02434                 IFNE    RELFEAT
F15B BDEBDC           (        forth.asm):02435                 RFXT    jsr,MONITOR+10  XT for MONITOR. All : words are candidates
                      (        forth.asm):02436         *                               for integrity check by ICHECK.
                      (        forth.asm):02437                 ENDC
F15E 39               (        forth.asm):02438 (4)             rts
                      (        forth.asm):02439         
F15F C7               (        forth.asm):02440         RECURSE fcb     $C7             FORTH-83
F160 52454355525345   (        forth.asm):02441                 fcc     'RECURSE'
F167 F127             (        forth.asm):02442                 fdb     COMPR
F169 C7               (        forth.asm):02443                 RFCS
F16A 9E12             (        forth.asm):02444 (4)             ldx     RECADDR         Set up by LOCWRT
F16C 7EE15D           (        forth.asm):02445 (3)             jmp     EMXASXT         Set as action component
                      (        forth.asm):02446         
F16F 06               (        forth.asm):02447         FORGET  fcb     6               79-STANDARD (REQ196)
F170 464F52474554     (        forth.asm):02448                 fcc     'FORGET'
F176 F15F             (        forth.asm):02449                 fdb     RECURSE
F178 C7               (        forth.asm):02450                 RFCS
F179 BDE7AF           (        forth.asm):02451 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
F17C 6D84             (        forth.asm):02452 (5+0)           tst     ,x              EOL?
F17E 2605             (        forth.asm):02453 (3)             bne     @frgt2          No
F180 C605             (        forth.asm):02454 (2)     @frgt1  ldb     #5              Missing word name
F182 BDE6DE           (        forth.asm):02455 (7)             jsr     ERRHDLR         No return
F185 BDE304           (        forth.asm):02456 (7)     @frgt2  jsr     SCNSTOK
F188 27F6             (        forth.asm):02457 (3)             beq     @frgt1          EOL before a non-SP character could be acquired
F18A BDE423           (        forth.asm):02458 (7)             jsr     SWDIC           SWDIC uses TOKENSP as input--not X!!
F18D 2607             (        forth.asm):02459 (3)             bne     @frgt3          Word found. XT returned in Y
F18F 9E02             (        forth.asm):02460 (4)             ldx     TOKENSP
F191 C602             (        forth.asm):02461 (2)             ldb     #2              Undefined (X points to the offending word)
F193 BDE6DE           (        forth.asm):02462 (7)             jsr     ERRHDLR         No return
F196 1F21             (        forth.asm):02463 (4)     @frgt3  tfr     y,x             Y and X have the word's XT
F198 108C0C55         (        forth.asm):02464 (4)             cmpy    #RAMFTCH
F19C 271B             (        forth.asm):02465 (3)             beq     @frgt4
F19E 108CE000         (        forth.asm):02466 (4)             cmpy    #ROMSTRT
F1A2 2415             (        forth.asm):02467 (3)             bhs     @frgt4
                      (        forth.asm):02468                 IFNE    RELFEAT
F1A4 AE1D             (        forth.asm):02469 (5+1)           ldx     -3,x            Backlink to X
F1A6 9F06             (        forth.asm):02470 (4)             stx     LSTWAD          Update LAST
F1A8 303C             (        forth.asm):02471 (4+1)           leax    -4,y            XT-4 to X (1B/attr, 2B/backlink, 1B/checksum)
                      (        forth.asm):02472                 ELSE
                      (        forth.asm):02473                 ldx     -2,x            Backlink to X
                      (        forth.asm):02474                 stx     LSTWAD          Update LAST
                      (        forth.asm):02475                 leax    -3,y            XT-3 to X (1B/attr, 2B/backlink)
                      (        forth.asm):02476                 ENDC
F1AA 4F               (        forth.asm):02477 (1)             clra
F1AB D633             (        forth.asm):02478 (3)             ldb     CURTOKL         Token name length to D
F1AD 103201           (        forth.asm):02479 (4)             subr    d,x             Substract word length
F1B0 9F08             (        forth.asm):02480 (4)             stx     DICEND          Update HERE
F1B2 DC02             (        forth.asm):02481 (4)             ldd     TOKENSP         Set by SWDIC to point to the end of the token
F1B4 931C             (        forth.asm):02482 (4)             subd    BSBFADR
F1B6 DD22             (        forth.asm):02483 (4)             std     UTOIN           Derive >IN from TOKENSP
F1B8 39               (        forth.asm):02484 (4)             rts
F1B9 C60B             (        forth.asm):02485 (2)     @frgt4  ldb     #11             Word is unforgettable
F1BB BDE6DE           (        forth.asm):02486 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02487         
F1BE 07               (        forth.asm):02488         EXCT    fcb     7               79-STANDARD (REQ163)
F1BF 45584543555445   (        forth.asm):02489                 fcc     'EXECUTE'
F1C6 F16F             (        forth.asm):02490                 fdb     FORGET
F1C8 C7               (        forth.asm):02491                 RFCS
F1C9 BDE769           (        forth.asm):02492 (7)             jsr     NPOP
F1CC 1037C1           (        forth.asm):02493 (4)             cmpr    0,x             Although the standard does not specify that
F1CF 2702             (        forth.asm):02494 (3)             beq     @exct1          a NUL address should trigger an error, I do
F1D1 1F15             (        forth.asm):02495 (4)             tfr     x,pc
F1D3 C60D             (        forth.asm):02496 (2)     @exct1  ldb     #13             Illegal argument
F1D5 BDE6DE           (        forth.asm):02497 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02498         
F1D8 03               (        forth.asm):02499         BYE     fcb     3               Non-standard
F1D9 425945           (        forth.asm):02500                 fcc     'BYE'
F1DC F1BE             (        forth.asm):02501                 fdb     EXCT
F1DE C7               (        forth.asm):02502                 RFCS
F1DF 7EE037           (        forth.asm):02503 (3)             jmp     RSTHDL
                      (        forth.asm):02504         
F1E2 C6               (        forth.asm):02505         BKCHAR  fcb     $C6             ANSI (Core)
F1E3 5B434841525D     (        forth.asm):02506                 fcc     '[CHAR]'
F1E9 F1D8             (        forth.asm):02507                 fdb     BYE
F1EB C7               (        forth.asm):02508                 RFCS
F1EC 8D0B             (        forth.asm):02509                 RFXT    bsr,CHAR+7      XT for CHAR
F1EE 7EEB48           (        forth.asm):02510                 RFXT    jmp,LITERAL+10  XT for LITERAL
                      (        forth.asm):02511         
F1F1 04               (        forth.asm):02512         CHAR    fcb     4               ANSI (Core)
F1F2 43484152         (        forth.asm):02513                 fcc     'CHAR'
F1F6 F1E2             (        forth.asm):02514                 fdb     BKCHAR
F1F8 C7               (        forth.asm):02515                 RFCS
F1F9 BDE7AF           (        forth.asm):02516 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
F1FC BDE304           (        forth.asm):02517 (7)     @char1  jsr     SCNSTOK         X points to the beginning of the character
F1FF 2714             (        forth.asm):02518 (3)             beq     @chrerr
F201 E684             (        forth.asm):02519 (4+0)           ldb     ,x
F203 4F               (        forth.asm):02520 (1)             clra
F204 1F01             (        forth.asm):02521 (4)             tfr     d,x
F206 BDE75B           (        forth.asm):02522 (7)             jsr     NPUSH
F209 9E02             (        forth.asm):02523 (4)             ldx     TOKENSP         Set by SCNSTOK
F20B BDE312           (        forth.asm):02524 (7)             jsr     SCNETOK
F20E 1F10             (        forth.asm):02525 (4)             tfr     x,d             TOKENEP
F210 931C             (        forth.asm):02526 (4)             subd    BSBFADR
F212 DD22             (        forth.asm):02527 (4)             std     UTOIN           Derive >IN from TOKENEP
F214 39               (        forth.asm):02528 (4)             rts
F215 C60D             (        forth.asm):02529 (2)     @chrerr ldb     #13             Illegal argument
F217 BDE6DE           (        forth.asm):02530 (7)             jsr     ERRHDLR
                      (        forth.asm):02531         * No return.
                      (        forth.asm):02532         
                      (        forth.asm):02533         * Hairy code but working.
F21A 04               (        forth.asm):02534         WORD    fcb     4               79-STANDARD (REQ181)
F21B 574F5244         (        forth.asm):02535                 fcc     'WORD'          ( char -- addr )
F21F F1F1             (        forth.asm):02536                 fdb     CHAR
F221 C7               (        forth.asm):02537                 RFCS
F222 BDE769           (        forth.asm):02538 (7)             jsr     NPOP
F225 1F16             (        forth.asm):02539 (4)             tfr     x,w             F has the delimiter ASCII code
F227 109E08           (        forth.asm):02540 (5)             ldy     DICEND          The counted string returned is stored at HERE
F22A 3420             (        forth.asm):02541 (4+2)           pshs    y
F22C 6FA0             (        forth.asm):02542 (6+1)           clr     ,y+             Initialize its length
F22E BDE7AF           (        forth.asm):02543 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
F231 6D84             (        forth.asm):02544 (5+0)           tst     ,x              EOL reached?
F233 2605             (        forth.asm):02545 (3)             bne     @word1          No, proceed
F235 3510             (        forth.asm):02546 (4+2)   @word0  puls    x
F237 3610             (        forth.asm):02547                 UCNPUSH                 Push back HERE
F239 39               (        forth.asm):02548 (4)             rts
F23A 3001             (        forth.asm):02549 (4+1)   @word1  leax    1,x             Skip space character after WORD or leading delim
F23C A684             (        forth.asm):02550 (4+0)           lda     ,x
F23E 2716             (        forth.asm):02551 (3)             beq     @word5          EOL reached, this is the end
F240 1037F8           (        forth.asm):02552 (4)             cmpr    f,a             Leading delimiter matched?
F243 27F5             (        forth.asm):02553 (3)             beq     @word1          Yes
F245 A680             (        forth.asm):02554 (4+1)   @word2  lda     ,x+             Acquire next character from the input stream
F247 A7A0             (        forth.asm):02555 (4+1)   @word3  sta     ,y+
F249 2709             (        forth.asm):02556 (3)             beq     @word4          EOL reached
F24B 1037F8           (        forth.asm):02557 (4)             cmpr    f,a             Trailing delimiter?
F24E 2706             (        forth.asm):02558 (3)             beq     @word5
F250 6CF4             (        forth.asm):02559 (6+3)           inc     [,s]            Increment string length
F252 20F1             (        forth.asm):02560 (3)             bra     @word2
F254 301F             (        forth.asm):02561 (4+1)   @word4  leax    -1,x            EOL reached
F256 1F10             (        forth.asm):02562 (4)     @word5  tfr     x,d             Pointing one char after the delimiter or to NUL
F258 931C             (        forth.asm):02563 (4)             subd    BSBFADR
F25A DD22             (        forth.asm):02564 (4)             std     UTOIN
F25C 20D7             (        forth.asm):02565 (3)             bra     @word0
                      (        forth.asm):02566         
F25E 81               (        forth.asm):02567         LPAR    fcb     $81             79-STANDARD (REQ122)
F25F 28               (        forth.asm):02568                 fcc     '('
F260 F21A             (        forth.asm):02569                 fdb     WORD
F262 C7               (        forth.asm):02570                 RFCS
F263 BDE7AF           (        forth.asm):02571 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
F266 A680             (        forth.asm):02572 (4+1)   @lpar1  lda     ,x+
F268 270B             (        forth.asm):02573 (3)             beq     @lparx          Input stream exhausted before ) is matched
F26A 8129             (        forth.asm):02574 (2)             cmpa    #')
F26C 26F8             (        forth.asm):02575 (3)             bne     @lpar1
F26E 1F10             (        forth.asm):02576 (4)             tfr     x,d             Just matched )
F270 931C             (        forth.asm):02577 (4)             subd    BSBFADR
F272 DD22             (        forth.asm):02578 (4)             std     UTOIN           Update >IN
F274 39               (        forth.asm):02579 (4)             rts
F275 C60C             (        forth.asm):02580 (2)     @lparx  ldb     #12             Missing delimiter
F277 BDE6DE           (        forth.asm):02581 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02582         
F27A 06               (        forth.asm):02583         SOURCE  fcb     6               ANSI (Core)
F27B 534F55524345     (        forth.asm):02584                 fcc     'SOURCE'        ( -- baseaddr charcount )
F281 F25E             (        forth.asm):02585                 fdb     LPAR
F283 C7               (        forth.asm):02586                 RFCS
F284 9E1C             (        forth.asm):02587 (4)             ldx     BSBFADR
F286 BDE75B           (        forth.asm):02588 (7)             jsr     NPUSH
F289 8E0400           (        forth.asm):02589 (3)             ldx     #BLKSIZ         Non-zero block size
F28C DC24             (        forth.asm):02590 (4)             ldd     UBLK
F28E 2605             (        forth.asm):02591 (3)             bne     @srcdon         Current BLK is NZ
F290 4F               (        forth.asm):02592 (1)             clra
F291 D629             (        forth.asm):02593 (3)             ldb     CMDLNSZ         Character count entered through GETS in INTERP
F293 1F01             (        forth.asm):02594 (4)             tfr     d,x
F295 7EE75B           (        forth.asm):02595 (3)     @srcdon jmp     NPUSH
                      (        forth.asm):02596         
                      (        forth.asm):02597         * This is a straightforward implementation borrowed from GNU Forth 'see \':
                      (        forth.asm):02598         * : \
                      (        forth.asm):02599         *   BLK @
                      (        forth.asm):02600         *   IF     >IN @ C/L / 1+ C/L * >IN ! EXIT
                      (        forth.asm):02601         *   THEN
                      (        forth.asm):02602         *   SOURCE >IN ! DROP ; IMMEDIATE
                      (        forth.asm):02603         * However since C/L (number of columns per line) is 64 (a power of 2), things
                      (        forth.asm):02604         * can be coded in a more compact manner as: >IN @ 63 COM AND 64 + >IN !
F298 81               (        forth.asm):02605         BKSLSH  fcb     $81             ANSI (Block Ext)
F299 5C               (        forth.asm):02606                 fcb     $5C             \ ( -- )
F29A F27A             (        forth.asm):02607                 fdb     SOURCE
F29C C7               (        forth.asm):02608                 RFCS
F29D DC24             (        forth.asm):02609 (4)             ldd     UBLK            BLK @ to D
F29F 270B             (        forth.asm):02610 (3)             beq     @comser         We operate from block 0: the console
F2A1 DC22             (        forth.asm):02611 (4)             ldd     UTOIN           >IN @
F2A3 C4C0             (        forth.asm):02612 (2)             andb    #^$3F           Point to the beginning of the line
F2A5 CB40             (        forth.asm):02613 (2)             addb    #$40            next line
F2A7 8900             (        forth.asm):02614 (2)             adca    #0              Propagate potential carry from LSB
F2A9 DD22             (        forth.asm):02615 (4)             std     UTOIN           >IN !
F2AB 39               (        forth.asm):02616 (4)             rts                     EXIT
F2AC 8DD6             (        forth.asm):02617         @comser RFXT    bsr,SOURCE+9    XT for SOURCE
F2AE BDE769           (        forth.asm):02618 (7)             jsr     NPOP
F2B1 9F22             (        forth.asm):02619 (4)             stx     UTOIN           >IN !
F2B3 7EFBCE           (        forth.asm):02620                 RFXT    jmp,DROP+7      XT for DROP
                      (        forth.asm):02621                 ENDC
                      (        forth.asm):02622         
F2B6 82               (        forth.asm):02623         PSTR    fcb     $82             79-STANDARD (REQ133)
F2B7 2E22             (        forth.asm):02624                 fcc     '."'
F2B9 F298             (        forth.asm):02625                 fdb     BKSLSH
F2BB C7               (        forth.asm):02626                 RFCS
F2BC 8D13             (        forth.asm):02627                 RFXT    bsr,SQUOTE+5    XT for S"
F2BE 0D21             (        forth.asm):02628 (4)             tst     USTATE+1
F2C0 2603             (        forth.asm):02629 (3)             bne     @pstcmp
F2C2 7EF5E4           (        forth.asm):02630                 RFXT    jmp,TYPE+7
F2C5 8EF5E4           (        forth.asm):02631         @pstcmp RFXT    ldx,#TYPE+7
F2C8 7EE15D           (        forth.asm):02632 (3)             jmp     EMXASXT
                      (        forth.asm):02633         
F2CB 82               (        forth.asm):02634         SQUOTE  fcb     $82             ANSI (Core)
F2CC 5322             (        forth.asm):02635                 fcc     'S"'
F2CE F2B6             (        forth.asm):02636                 fdb     PSTR
F2D0 C7               (        forth.asm):02637                 RFCS
F2D1 0D21             (        forth.asm):02638 (4)             tst     USTATE+1
F2D3 260C             (        forth.asm):02639 (3)             bne     @sqcmp
F2D5 8E0022           (        forth.asm):02640 (3)             ldx     #'"             We are inperpreting
F2D8 BDE75B           (        forth.asm):02641 (7)             jsr     NPUSH
F2DB BDF222           (        forth.asm):02642                 RFXT    jsr,WORD+7      XT for WORD
F2DE 7EF603           (        forth.asm):02643                 RFXT    jmp,COUNT+8     XT for COUNT
F2E1 109E08           (        forth.asm):02644 (5)     @sqcmp  ldy     DICEND          We are compiling
F2E4 867E             (        forth.asm):02645 (2)             lda     #JMPOPC         JMP extended
F2E6 A7A0             (        forth.asm):02646 (4+1)           sta     ,y+
F2E8 3420             (        forth.asm):02647 (4+2)           pshs    y
F2EA 3122             (        forth.asm):02648 (4+1)           leay    2,y             2 ALLOT
F2EC 109F08           (        forth.asm):02649 (5)             sty     DICEND
F2EF 8E0022           (        forth.asm):02650 (3)             ldx     #'"
F2F2 BDE75B           (        forth.asm):02651 (7)             jsr     NPUSH
F2F5 BDF222           (        forth.asm):02652                 RFXT    jsr,WORD+7      XT for WORD
F2F8 BDE769           (        forth.asm):02653 (7)             jsr     NPOP
F2FB 4F               (        forth.asm):02654 (1)             clra
F2FC E684             (        forth.asm):02655 (4+0)           ldb     ,x              C@
F2FE 3001             (        forth.asm):02656 (4+1)           leax    1,x             1+. Skip the byte count (X has HERE)
F300 308B             (        forth.asm):02657 (4+2)           leax    d,x             Skip string length material
F302 3520             (        forth.asm):02658 (4+2)           puls    y
F304 AFA4             (        forth.asm):02659 (5+0)           stx     ,y              Install jump address
F306 3122             (        forth.asm):02660 (4+1)           leay    2,y             Counted string base address to Y
F308 868E             (        forth.asm):02661 (2)             lda     #LDXOPC
F30A A780             (        forth.asm):02662 (4+1)           sta     ,x+
F30C 10AF81           (        forth.asm):02663 (6+2)           sty     ,x++
F30F 9F08             (        forth.asm):02664 (4)             stx     DICEND          Update HERE
F311 8EE75B           (        forth.asm):02665 (3)             ldx     #NPUSH
F314 BDE15D           (        forth.asm):02666 (7)             jsr     EMXASXT
F317 8EF603           (        forth.asm):02667                 RFXT    ldx,#COUNT+8    XT for COUNT
F31A 7EE15D           (        forth.asm):02668 (3)             jmp     EMXASXT
                      (        forth.asm):02669         
                      (        forth.asm):02670         * Transactional behaviour is guaranteed here. What this means is that the
                      (        forth.asm):02671         * operation will preserve the data stack contents, should insufficient
                      (        forth.asm):02672         * parameters be supplied. It is a very desirable feature (for debugging
                      (        forth.asm):02673         * purposes) which will be generalized to a number of other words. As an
                      (        forth.asm):02674         * aside, it also allows us to access the data stack as directly indexed
                      (        forth.asm):02675         * through the 6309 U register, resulting in better performance.
F31D 02               (        forth.asm):02676         DPLUS   fcb     2               79-STANDARD (REQ241)
F31E 442B             (        forth.asm):02677                 fcc     'D+'            ( d2 d1 -- d1+d2--signed )
F320 F2CB             (        forth.asm):02678                 fdb     SQUOTE          Initially ( L2 H2 L1 H1)
F322 C7               (        forth.asm):02679                 RFCS
F323 BDE41E           (        forth.asm):02680 (7)             jsr     MIN4PST         Make sure we have at least 4 cells stacked up
                      (        forth.asm):02681         * At this point sufficient stack depth has been assessed. Let's rock and roll!
F326 BDFC49           (        forth.asm):02682         @stkok  RFXT    jsr,ROT+6       XT for ROT ( L2 L1 H1 H2 )
F329 EC44             (        forth.asm):02683 (5+1)           ldd     4,u             L1
F32B E346             (        forth.asm):02684 (5+1)           addd    6,u             L2
F32D ED46             (        forth.asm):02685 (5+1)           std     6,u             d1+d2 least significant cell
F32F EC42             (        forth.asm):02686 (5+1)           ldd     2,u             H1
F331 10890000         (        forth.asm):02687 (4)             adcd    #0              Carry from least significant cell addition
F335 E3C4             (        forth.asm):02688 (5+0)           addd    ,u              H2
F337 ED44             (        forth.asm):02689 (5+1)           std     4,u             d1+d2 most significant cell
F339 3344             (        forth.asm):02690 (4+1)           leau    4,u             Drop 2 cells from the data stack
F33B 39               (        forth.asm):02691 (4)             rts
                      (        forth.asm):02692         
F33C 07               (        forth.asm):02693         DNEG    fcb     7               79-STANDARD (REQ245)
F33D 444E4547415445   (        forth.asm):02694                 fcc     'DNEGATE'
F344 F31D             (        forth.asm):02695                 fdb     DPLUS
F346 C7               (        forth.asm):02696                 RFCS
F347 BDE414           (        forth.asm):02697 (7)             jsr     MIN2PST         We need at least 2 cells stacked up
F34A 10A642           (        forth.asm):02698 (6+1)           ldw     2,u             Least significant cell
F34D 1053             (        forth.asm):02699 (2)             comw
F34F ECC4             (        forth.asm):02700 (5+0)           ldd     ,u              Most significant cell
F351 1043             (        forth.asm):02701 (2)             comd
F353 108B0001         (        forth.asm):02702 (4)             addw    #1
F357 10890000         (        forth.asm):02703 (4)             adcd    #0              Propagate carry flag
F35B 10EDC4           (        forth.asm):02704 (8+0)           stq     ,u              Store the result back to the data stack
F35E 39               (        forth.asm):02705 (4)             rts
                      (        forth.asm):02706         
F35F 03               (        forth.asm):02707         DZEQ    fcb     3               79-STANDARD (double number extension)
F360 44303D           (        forth.asm):02708                 fcc     'D0='           ( d -- flag )
F363 F33C             (        forth.asm):02709                 fdb     DNEG
F365 C7               (        forth.asm):02710                 RFCS
F366 BDEDD9           (        forth.asm):02711                 RFXT    jsr,OR+5        XT for OR
F369 7EEE53           (        forth.asm):02712                 RFXT    jmp,NULP+5      XT for 0=
                      (        forth.asm):02713         
                      (        forth.asm):02714         * In essence:
                      (        forth.asm):02715         * : D< DNEGATE D+ NIP [ HEX ] 8000 AND IF 1 ELSE 0 THEN ;
F36C 02               (        forth.asm):02716         DLESS   fcb     2               79-STANDARD (REQ244)
F36D 443C             (        forth.asm):02717                 fcc     'D<'            ( d1 d2 -- flag )
F36F F35F             (        forth.asm):02718                 fdb     DZEQ
F371 C7               (        forth.asm):02719                 RFCS
F372 8DD3             (        forth.asm):02720                 RFXT    bsr,DNEG+10     XT for DNEGATE
F374 8DAD             (        forth.asm):02721                 RFXT    bsr,DPLUS+5     XT for D+
F376 4F               (        forth.asm):02722 (1)             clra
F377 A742             (        forth.asm):02723 (4+1)           sta     2,u
F379 E6C4             (        forth.asm):02724 (4+0)           ldb     ,u
F37B 2D05             (        forth.asm):02725 (3)             blt     @setto1
F37D A743             (        forth.asm):02726 (4+1)   @setrv  sta     3,u
F37F 3342             (        forth.asm):02727 (4+1)           leau    2,u
F381 39               (        forth.asm):02728 (4)             rts
F382 4C               (        forth.asm):02729 (1)     @setto1 inca
F383 20F8             (        forth.asm):02730 (3)             bra     @setrv
                      (        forth.asm):02731         
F385 05               (        forth.asm):02732         TWOOVER fcb     5               79-STANDARD (double number extension)
F386 324F564552       (        forth.asm):02733                 fcc     '2OVER'         ( d1 d2 -- d1 d2 d1 )
F38B F36C             (        forth.asm):02734                 fdb     DLESS
F38D C7               (        forth.asm):02735                 RFCS
F38E BDE41E           (        forth.asm):02736 (7)             jsr     MIN4PST         At least four cells need to be stacked up
F391 10EC44           (        forth.asm):02737 (8+1)           ldq     4,u             D:W has MSC:LSC of D1
F394 1F61             (        forth.asm):02738 (4)             tfr     w,x
F396 BDE75B           (        forth.asm):02739 (7)             jsr     NPUSH
F399 1F01             (        forth.asm):02740 (4)             tfr     d,x
F39B 7EE75B           (        forth.asm):02741 (3)             jmp     NPUSH
                      (        forth.asm):02742         
F39E 05               (        forth.asm):02743         TWOSWAP fcb     5               79-STANDARD (double number extension)
F39F 3253574150       (        forth.asm):02744                 fcc     '2SWAP'         ( d1 d2 -- d2 d1 )
F3A4 F385             (        forth.asm):02745                 fdb     TWOOVER
F3A6 C7               (        forth.asm):02746                 RFCS
F3A7 BDE41E           (        forth.asm):02747 (7)             jsr     MIN4PST         At least four cells must be stacked up
F3AA AE44             (        forth.asm):02748 (5+1)           ldx     4,u             D1 most significant cell
F3AC 10AE46           (        forth.asm):02749 (6+1)           ldy     6,u             D1 least significant cell
F3AF 10ECC4           (        forth.asm):02750 (8+0)           ldq     ,u              D:W has MSC:LSC of D2
F3B2 10ED44           (        forth.asm):02751 (8+1)           stq     4,u
F3B5 AFC4             (        forth.asm):02752 (5+0)           stx     ,u
F3B7 10AF42           (        forth.asm):02753 (6+1)           sty     2,u
F3BA 39               (        forth.asm):02754 (4)             rts
                      (        forth.asm):02755         
F3BB 05               (        forth.asm):02756         TWODROP fcb     5               79-STANDARD (double number extension)
F3BC 3244524F50       (        forth.asm):02757                 fcc     '2DROP'         ( d -- )
F3C1 F39E             (        forth.asm):02758                 fdb     TWOSWAP
F3C3 C7               (        forth.asm):02759                 RFCS
F3C4 BDE414           (        forth.asm):02760 (7)             jsr     MIN2PST         At least two cells must be stacked up
F3C7 3344             (        forth.asm):02761 (4+1)           leau    4,u
F3C9 39               (        forth.asm):02762 (4)             rts
                      (        forth.asm):02763         
F3CA 04               (        forth.asm):02764         TWODUP  fcb     4               79-STANDARD (double number extension)
F3CB 32445550         (        forth.asm):02765                 fcc     '2DUP'          ( double -- double double )
F3CF F3BB             (        forth.asm):02766                 fdb     TWODROP
F3D1 C7               (        forth.asm):02767                 RFCS
F3D2 BDE414           (        forth.asm):02768 (7)             jsr     MIN2PST         At least two cells need to be stacked up
F3D5 10ECC4           (        forth.asm):02769 (8+0)           ldq     ,u              D:W has MSC:LSC of DOUBLE
F3D8 1F61             (        forth.asm):02770 (4)             tfr     w,x
F3DA BDE75B           (        forth.asm):02771 (7)             jsr     NPUSH
F3DD 1F01             (        forth.asm):02772 (4)             tfr     d,x
F3DF 7EE75B           (        forth.asm):02773 (3)             jmp     NPUSH
                      (        forth.asm):02774         
F3E2 02               (        forth.asm):02775         TWOSTOR fcb     2               79-STANDARD (double number extension)
F3E3 3221             (        forth.asm):02776                 fcc     '2!'            ( double addr -- )
F3E5 F3CA             (        forth.asm):02777                 fdb     TWODUP
F3E7 C7               (        forth.asm):02778                 RFCS
F3E8 BDE419           (        forth.asm):02779 (7)             jsr     MIN3PST         At least three cells need to be stacked up
F3EB 10EC42           (        forth.asm):02780 (8+1)           ldq     2,u             DOUBLE to D:W
F3EE 10EDD4           (        forth.asm):02781 (8+3)           stq     [,u]            Store DOUBLE to ADDR
F3F1 3346             (        forth.asm):02782 (4+1)           leau    6,u             Drop three cells from the user stack
F3F3 39               (        forth.asm):02783 (4)             rts
                      (        forth.asm):02784         
F3F4 02               (        forth.asm):02785         TWOFTCH fcb     2               79-STANDARD (double number extension)
F3F5 3240             (        forth.asm):02786                 fcc     '2@'            ( dbladdr -- double )
F3F7 F3E2             (        forth.asm):02787                 fdb     TWOSTOR
F3F9 C7               (        forth.asm):02788                 RFCS
F3FA BDE40F           (        forth.asm):02789 (7)             jsr     MIN1PST         At least cell needs to be stacked up
F3FD 10ECD4           (        forth.asm):02790 (8+3)           ldq     [,u]            D:W has MSC:LSC of DBLADDR @
F400 10A7C4           (        forth.asm):02791 (6+0)           stw     ,u              Least significant cell stacked in place
F403 1F01             (        forth.asm):02792 (4)             tfr     d,x             Most significant cell goes through standard push
F405 7EE75B           (        forth.asm):02793 (3)             jmp     NPUSH
                      (        forth.asm):02794         
                      (        forth.asm):02795                 IFNE    HVCONV
F408                  (        forth.asm):02796         CONVERT fcb     7               79-STANDARD (REQ195)
                      (        forth.asm):02797                 fcc     'CONVERT'       ( d1 addr1 -- d2 addr2 )
                      (        forth.asm):02798                 fdb     TWOFTCH
                      (        forth.asm):02799                 RFCS
                      (        forth.asm):02800                 jsr     MIN3PST         At least 3 cells need to be stacked up
                      (        forth.asm):02801                 jsr     CKBASE          Check for supported BASE. No return if not
                      (        forth.asm):02802                 ldx     ,u              ADDR1 to X
F408                  (        forth.asm):02803         @cvloop leax    1,x
                      (        forth.asm):02804                 ldb     ,x
                      (        forth.asm):02805         * B has the ASCII representation of something that may or may not be a valid
                      (        forth.asm):02806         * digit, expressed in BASE (alias (byte)UBASE+1). If it does, multiply D1 by
                      (        forth.asm):02807         * BASE and add that to D1 (aka D2 on exit). Then add DIGIT on the top of it.
                      (        forth.asm):02808                 subb    #'0             Minimal ASCII value condition met?
                      (        forth.asm):02809                 blo     @cvoor          No. Out of range. ,X cannot be a valid digit
                      (        forth.asm):02810                 cmpb    #10
                      (        forth.asm):02811                 blo     @cvnolt         No letter in potential BASE
                      (        forth.asm):02812                 IFEQ    CSSNTVE
                      (        forth.asm):02813                 cmpb    #'A-'0
                      (        forth.asm):02814                 blo     @cvoor          Greater than 9 but lower than A
                      (        forth.asm):02815                 cmpb    #'a-'0
                      (        forth.asm):02816                 blo     @cvisuc         Upper case already
                      (        forth.asm):02817                 cmpb    #'z-'0
                      (        forth.asm):02818                 bhi     @cvoor          Definitely out of range
                      (        forth.asm):02819                 subb    #'a-'A          To upper case
                      (        forth.asm):02820                 ENDC
F408                  (        forth.asm):02821         @cvisuc subb    #'A-':          A-Z to number
F408                  (        forth.asm):02822         @cvnolt cmpb    UBASE+1         B has a digit. Make sure it's less than BASE
                      (        forth.asm):02823                 bhs     @cvoor          Number under scrutiny is >= BASE
                      (        forth.asm):02824                 leas    -8,s            Allocate scratch space
                      (        forth.asm):02825                 clra
                      (        forth.asm):02826                 pshs    d
                      (        forth.asm):02827         * System and user stack structures are as follows:
                      (        forth.asm):02828         * ,s    current digit (1 cell)
                      (        forth.asm):02829         * 2,s   D0*B (1 cell)
                      (        forth.asm):02830         * 4,s   D1*B (1 cell)
                      (        forth.asm):02831         * 6,s   D2*B (1 cell)
                      (        forth.asm):02832         * 8,s   D3*B (1 cell)
                      (        forth.asm):02833         * 2,u   D1H most significant cell
                      (        forth.asm):02834         * 4,u   D1L least significant cell
                      (        forth.asm):02835                 tfr     u,v             Backup U
                      (        forth.asm):02836                 leau    6,u             Point one byte after D1LL
                      (        forth.asm):02837                 leay    2,s             Point to D0*B
                      (        forth.asm):02838                 lde     #4              Four products to go through
F408                  (        forth.asm):02839         @cvmul  lda     ,-u
                      (        forth.asm):02840                 ldb     UBASE+1
                      (        forth.asm):02841                 mul
                      (        forth.asm):02842                 std     ,y++
                      (        forth.asm):02843                 dece
                      (        forth.asm):02844                 bne     @cvmul
                      (        forth.asm):02845                 tfr     v,u             Restore U
                      (        forth.asm):02846                 lda     3,s
                      (        forth.asm):02847                 sta     5,u             D1LL
                      (        forth.asm):02848                 lda     2,s
                      (        forth.asm):02849                 adda    5,s
                      (        forth.asm):02850                 sta     4,u             D1LH
                      (        forth.asm):02851                 lda     4,s
                      (        forth.asm):02852                 adca    7,s
                      (        forth.asm):02853                 sta     3,u             D1HL
                      (        forth.asm):02854                 lda     6,s
                      (        forth.asm):02855                 adca    9,s
                      (        forth.asm):02856                 sta     2,u             D1HH
                      (        forth.asm):02857                 ldd     4,u             D1L
                      (        forth.asm):02858                 addd    ,s              DIGIT
                      (        forth.asm):02859                 std     4,u
                      (        forth.asm):02860                 ldd     2,u             D1H
                      (        forth.asm):02861                 adcd    #0              Potential carry from lower cell
                      (        forth.asm):02862                 std     2,u
                      (        forth.asm):02863                 leas    10,s            Release scratch space
                      (        forth.asm):02864                 bra     @cvloop         Here we go again
F408                  (        forth.asm):02865         @cvoor  stx     ,u              Update ADDR2
                      (        forth.asm):02866                 rts
                      (        forth.asm):02867                 ENDC
                      (        forth.asm):02868         
F408 02               (        forth.asm):02869         CVTE    fcb     2
F409 233E             (        forth.asm):02870                 fcc     '#>'
                      (        forth.asm):02871                 IFNE    HVCONV
                      (        forth.asm):02872                 fdb     CONVERT
                      (        forth.asm):02873                 ELSE
F40B F3F4             (        forth.asm):02874                 fdb     TWOFTCH
                      (        forth.asm):02875                 ENDC
F40D C7               (        forth.asm):02876                 RFCS
F40E BDE769           (        forth.asm):02877 (7)             jsr     NPOP
F411 BDE769           (        forth.asm):02878 (7)             jsr     NPOP            Drop 2 cells from the data stack
F414 8E017E           (        forth.asm):02879 (3)             ldx     #PADBUF
F417 3610             (        forth.asm):02880                 UCNPUSH
F419 BDE1B7           (        forth.asm):02881 (7)             jsr     SLEN
F41C 1F61             (        forth.asm):02882 (4)             tfr     w,x
F41E 3610             (        forth.asm):02883                 UCNPUSH
F420 39               (        forth.asm):02884 (4)             rts
                      (        forth.asm):02885         
F421 04               (        forth.asm):02886         SIGN    fcb     4
F422 5349474E         (        forth.asm):02887                 fcc     'SIGN'
F426 F408             (        forth.asm):02888                 fdb     CVTE
F428 C7               (        forth.asm):02889                 RFCS
F429 BDE769           (        forth.asm):02890 (7)             jsr     NPOP
F42C 1F10             (        forth.asm):02891 (4)             tfr     x,d
F42E 104D             (        forth.asm):02892 (2)             tstd
F430 2C05             (        forth.asm):02893 (3)             bge     @sign1
F432 C62D             (        forth.asm):02894 (2)             ldb     #'-
F434 7EF4F1           (        forth.asm):02895 (3)             jmp     INSBPAD
F437 39               (        forth.asm):02896 (4)     @sign1  rts
                      (        forth.asm):02897         
F438 04               (        forth.asm):02898         HOLD    fcb     4
F439 484F4C44         (        forth.asm):02899                 fcc     'HOLD'
F43D F421             (        forth.asm):02900                 fdb     SIGN
F43F C7               (        forth.asm):02901                 RFCS
F440 BDE769           (        forth.asm):02902 (7)             jsr     NPOP
F443 1F10             (        forth.asm):02903 (4)             tfr     x,d
F445 7EF4F1           (        forth.asm):02904 (3)             jmp     INSBPAD         B is inserted at the beginning of PAD.
                      (        forth.asm):02905         
F448 02               (        forth.asm):02906         SHARPS  fcb     2
F449 2353             (        forth.asm):02907                 fcc     '#S'
F44B F438             (        forth.asm):02908                 fdb     HOLD
F44D C7               (        forth.asm):02909                 RFCS
F44E 8601             (        forth.asm):02910 (2)             lda     #1
F450 9730             (        forth.asm):02911 (3)             sta     CVTFCN          CVT function #1 is #S
F452 2007             (        forth.asm):02912 (3)             bra     CVT0
                      (        forth.asm):02913         
                      (        forth.asm):02914         * Unsigned double on the top of the data stack gets divided by BASE.
                      (        forth.asm):02915         * The division algorithm implemented here is the binary long division.
                      (        forth.asm):02916         * See https://en.wikipedia.org/wiki/Division_algorithm for more information.
                      (        forth.asm):02917         * Remainder (converted to a character) gets prepended to PAD.
F454 01               (        forth.asm):02918         CVT     fcb     1
F455 23               (        forth.asm):02919                 fcc     '#'
F456 F448             (        forth.asm):02920                 fdb     SHARPS
F458 C7               (        forth.asm):02921                 RFCS
F459 0F30             (        forth.asm):02922 (5)             clr     CVTFCN          CVT function 0 is #
F45B BDE769           (        forth.asm):02923 (7)     CVT0    jsr     NPOP
F45E 1F16             (        forth.asm):02924 (4)             tfr     x,w
F460 BDE769           (        forth.asm):02925 (7)             jsr     NPOP
F463 3410             (        forth.asm):02926 (4+2)   CVT1    pshs    x               Numerator least significant cell
F465 1038             (        forth.asm):02927 (6)             pshsw                   Numerator most significant cell
F467 104F             (        forth.asm):02928 (2)             clrd
F469 3406             (        forth.asm):02929 (4+2)           pshs    d               Quotient low
F46B 3406             (        forth.asm):02930 (4+2)           pshs    d               Quotient high
F46D 3406             (        forth.asm):02931 (4+2)           pshs    d               Bitmask low
F46F 10868000         (        forth.asm):02932 (4)             ldw     #$8000          Bitmask high
F473 1038             (        forth.asm):02933 (6)             pshsw
F475 3406             (        forth.asm):02934 (4+2)           pshs    d
                      (        forth.asm):02935         * Stack structure:
                      (        forth.asm):02936         * 1,s   remainder               8 bits (high order byte is zero and unused)
                      (        forth.asm):02937         * 2,s   Bitmask high            16 bits
                      (        forth.asm):02938         * 4,s   Bitmask low             16 bits
                      (        forth.asm):02939         * 6,s   Quotient high           16 bits
                      (        forth.asm):02940         * 8,s   Quotient low            16 bits
                      (        forth.asm):02941         * 10,s  Numerator high          16 bits
                      (        forth.asm):02942         * 12,s  Numerator low           16 bits
                      (        forth.asm):02943         * Denominator is at UBASE+1     8 bits
F477 11C61F           (        forth.asm):02944 (3)             ldf     #31             32 bits to go
F47A 6861             (        forth.asm):02945 (6+1)   @cvt1   lsl     1,s             R := R << 1
                      (        forth.asm):02946         * We need to extract bit <f> from the numerator.
F47C 306A             (        forth.asm):02947 (4+1)           leax    10,s            Numerator MSB address
F47E 1FF8             (        forth.asm):02948 (4)             tfr     f,a             Not to alter the stack structure
F480 44               (        forth.asm):02949 (1)             lsra                    OffsetX: 3 - F >> 3
F481 44               (        forth.asm):02950 (1)             lsra
F482 44               (        forth.asm):02951 (1)             lsra
F483 C603             (        forth.asm):02952 (2)             ldb     #3
F485 103289           (        forth.asm):02953 (4)             subr    a,b
F488 3A               (        forth.asm):02954 (1)             abx
F489 A684             (        forth.asm):02955 (4+0)           lda     ,x
F48B 1FF9             (        forth.asm):02956 (4)             tfr     f,b             Bitno: F & 7
F48D C407             (        forth.asm):02957 (2)             andb    #7
                      (        forth.asm):02958         * At this point, A has the data we're interested in. B has the bit number.
F48F 5D               (        forth.asm):02959 (1)     @cvtex  tstb
F490 2704             (        forth.asm):02960 (3)             beq     @cvtfnd         Bit 0 of A has the data
F492 44               (        forth.asm):02961 (1)             lsra
F493 5A               (        forth.asm):02962 (1)             decb
F494 20F9             (        forth.asm):02963 (3)             bra     @cvtex
F496 8401             (        forth.asm):02964 (2)     @cvtfnd anda    #1
F498 AA61             (        forth.asm):02965 (4+1)           ora     1,s             R(0) := N(i)
F49A A761             (        forth.asm):02966 (4+1)           sta     1,s             Update the remainder
F49C 911F             (        forth.asm):02967 (3)             cmpa    UBASE+1
F49E 2512             (        forth.asm):02968 (3)             blo     @cvt5
F4A0 901F             (        forth.asm):02969 (3)             suba    UBASE+1
F4A2 A761             (        forth.asm):02970 (4+1)           sta     1,s             R := R - D
                      (        forth.asm):02971         * Q(i) := 1 (use the bitmask).
F4A4 EC66             (        forth.asm):02972 (5+1)           ldd     6,s             Quotient high
F4A6 10AA62           (        forth.asm):02973 (6+1)           ord     2,s             Bitmask high
F4A9 ED66             (        forth.asm):02974 (5+1)           std     6,s
F4AB EC68             (        forth.asm):02975 (5+1)           ldd     8,s             Quotient low
F4AD 10AA64           (        forth.asm):02976 (6+1)           ord     4,s             Bitmask low
F4B0 ED68             (        forth.asm):02977 (5+1)           std     8,s
                      (        forth.asm):02978         * Shift the bitmask 1 bit right.
F4B2 EC62             (        forth.asm):02979 (5+1)   @cvt5   ldd     2,s
F4B4 1044             (        forth.asm):02980 (2)             lsrd
F4B6 ED62             (        forth.asm):02981 (5+1)           std     2,s
F4B8 EC64             (        forth.asm):02982 (5+1)           ldd     4,s
F4BA 1046             (        forth.asm):02983 (2)             rord
F4BC ED64             (        forth.asm):02984 (5+1)           std     4,s
F4BE 115A             (        forth.asm):02985 (2)             decf
F4C0 2CB8             (        forth.asm):02986 (3)             bge     @cvt1
                      (        forth.asm):02987         * Convert the remainder to a digit expressed in BASE.
F4C2 E661             (        forth.asm):02988 (4+1)           ldb     1,s
F4C4 8630             (        forth.asm):02989 (2)             lda     #'0
F4C6 C10A             (        forth.asm):02990 (2)             cmpb    #10             B has the digit we want converted to BASE
F4C8 2502             (        forth.asm):02991 (3)             bcs     @cvtdgt
F4CA 8637             (        forth.asm):02992 (2)             lda     #'A-10
F4CC 103089           (        forth.asm):02993 (4)     @cvtdgt addr    a,b
F4CF 8D20             (        forth.asm):02994 (6)             bsr     INSBPAD         Prepend B to the string currently in PAD
F4D1 0D30             (        forth.asm):02995 (4)             tst     CVTFCN
F4D3 2711             (        forth.asm):02996 (3)             beq     @cvtend         Function 0 is straight #, i.e. we're done here
                      (        forth.asm):02997         * Function 1 is #S, we iterate unless the quotient is 0.
F4D5 EC68             (        forth.asm):02998 (5+1)           ldd     8,s
F4D7 10AA66           (        forth.asm):02999 (6+1)           ord     6,s
F4DA 270A             (        forth.asm):03000 (3)             beq     @cvtend
F4DC AE68             (        forth.asm):03001 (5+1)           ldx     8,s             New numerator low
F4DE 10A666           (        forth.asm):03002 (6+1)           ldw     6,s             New numerator high
F4E1 326E             (        forth.asm):03003 (4+1)           leas    14,s            Discard the stack frame
F4E3 7EF463           (        forth.asm):03004 (3)             jmp     CVT1            And go at it again
                      (        forth.asm):03005         * Push back the quotient on the data stack (low then high cell).
F4E6 AE68             (        forth.asm):03006 (5+1)   @cvtend ldx     8,s
F4E8 3610             (        forth.asm):03007                 UCNPUSH
F4EA AE66             (        forth.asm):03008 (5+1)           ldx     6,s
F4EC 326E             (        forth.asm):03009 (4+1)           leas    14,s            Discard the stack frame
F4EE 3610             (        forth.asm):03010                 UCNPUSH
F4F0 39               (        forth.asm):03011 (4)             rts
                      (        forth.asm):03012         
                      (        forth.asm):03013         * Insert the character in B in front of the string at PADBUF.
F4F1 8E017E           (        forth.asm):03014 (3)     INSBPAD ldx     #PADBUF
F4F4 BDE1B7           (        forth.asm):03015 (7)             jsr     SLEN
F4F7 103061           (        forth.asm):03016 (4)             addr    w,x             X points to the PAD string's NUL terminator
F4FA 105C             (        forth.asm):03017 (2)             incw                    Include the terminator
F4FC 3101             (        forth.asm):03018 (4+1)           leay    1,x
F4FE 113912           (        forth.asm):03019 (6+?)           tfm     x-,y-
F501 D77E             (        forth.asm):03020 (3)             stb     PADBUF
F503 39               (        forth.asm):03021 (4)             rts
                      (        forth.asm):03022         
F504 02               (        forth.asm):03023         CVTB    fcb     2
F505 3C23             (        forth.asm):03024                 fcc     '<#'
F507 F454             (        forth.asm):03025                 fdb     CVT
F509 C7               (        forth.asm):03026                 RFCS
F50A BDE351           (        forth.asm):03027 (7)             jsr     CKBASE          Sanity check. BASE can be altered at any time
F50D 0F7E             (        forth.asm):03028 (5)             clr     PADBUF
F50F 39               (        forth.asm):03029 (4)             rts
                      (        forth.asm):03030         
F510 01               (        forth.asm):03031         DOT     fcb     1               79-STANDARD (REQ193)
F511 2E               (        forth.asm):03032                 fcc     '.'
F512 F504             (        forth.asm):03033                 fdb     CVTB
F514 C7               (        forth.asm):03034                 RFCS
F515 8601             (        forth.asm):03035 (2)             lda     #1
F517 9732             (        forth.asm):03036 (3)             sta     CVISSGN         Force a signed number conversion
F519 BDE769           (        forth.asm):03037 (7)     ptop0   jsr     NPOP
F51C BDE3BB           (        forth.asm):03038 (7)             jsr     CVNSTR
F51F 8E03E4           (        forth.asm):03039 (3)             ldx     #TBUFF
F522 8620             (        forth.asm):03040 (2)             lda     #SP
F524 A180             (        forth.asm):03041 (4+1)   @ptop1  cmpa    ,x+             Skip leading spaces
F526 27FC             (        forth.asm):03042 (3)             beq     @ptop1
F528 301F             (        forth.asm):03043 (4+1)           leax    -1,x            Point to actual string start address
F52A BDE25F           (        forth.asm):03044 (7)             jsr     PUTS
F52D 7EE24C           (        forth.asm):03045 (3)             jmp     PUTCH           Extra space after printing a number
                      (        forth.asm):03046         
F530 02               (        forth.asm):03047         UDOT    fcb     2               79-STANDARD (REQ106)
F531 552E             (        forth.asm):03048                 fcc     'U.'
F533 F510             (        forth.asm):03049                 fdb     DOT
F535 C7               (        forth.asm):03050                 RFCS
F536 0F32             (        forth.asm):03051 (5)             clr     CVISSGN         Conversion is unsigned
F538 20DF             (        forth.asm):03052 (3)             bra     ptop0
                      (        forth.asm):03053         
F53A 02               (        forth.asm):03054         DOTR    fcb     2               79-STANDARD (REF)
F53B 2E52             (        forth.asm):03055                 fcc     '.R'
F53D F530             (        forth.asm):03056                 fdb     UDOT
F53F C7               (        forth.asm):03057                 RFCS
F540 8601             (        forth.asm):03058 (2)             lda     #1
F542 9732             (        forth.asm):03059 (3)             sta     CVISSGN
F544 BDE769           (        forth.asm):03060 (7)     DOTR0   jsr     NPOP
F547 3410             (        forth.asm):03061 (4+2)           pshs    x               Length parameter value
F549 BDE769           (        forth.asm):03062 (7)             jsr     NPOP
F54C BDE3BB           (        forth.asm):03063 (7)             jsr     CVNSTR
F54F 8E03E4           (        forth.asm):03064 (3)             ldx     #TBUFF
F552 8620             (        forth.asm):03065 (2)             lda     #SP
F554 A180             (        forth.asm):03066 (4+1)   @dotr1  cmpa    ,x+
F556 27FC             (        forth.asm):03067 (3)             beq     @dotr1          Skip leading spaces
F558 301F             (        forth.asm):03068 (4+1)           leax    -1,x
F55A BDE1B7           (        forth.asm):03069 (7)             jsr     SLEN            String length is returned in W
F55D 3506             (        forth.asm):03070 (4+2)           puls    d
F55F 1E06             (        forth.asm):03071 (5)             exg     d,w
F561 103206           (        forth.asm):03072 (4)             subr    d,w
F564 2F0D             (        forth.asm):03073 (3)             ble     @dotr3
F566 8620             (        forth.asm):03074 (2)             lda     #SP
F568 105D             (        forth.asm):03075 (2)     @dotr2  tstw
F56A 2707             (        forth.asm):03076 (3)             beq     @dotr3
F56C BDE24C           (        forth.asm):03077 (7)             jsr     PUTCH
F56F 105A             (        forth.asm):03078 (2)             decw
F571 20F5             (        forth.asm):03079 (3)             bra     @dotr2
F573 7EE25F           (        forth.asm):03080 (3)     @dotr3  jmp     PUTS
                      (        forth.asm):03081         
F576 03               (        forth.asm):03082         UDOTR   fcb     3               79-STANDARD (REF216)
F577 552E52           (        forth.asm):03083                 fcc     'U.R'
F57A F53A             (        forth.asm):03084                 fdb     DOTR
F57C C7               (        forth.asm):03085                 RFCS
F57D 0F32             (        forth.asm):03086 (5)             clr     CVISSGN
F57F 20C3             (        forth.asm):03087 (3)             bra     DOTR0
                      (        forth.asm):03088         
F581 02               (        forth.asm):03089         BL      fcb     2               79-STANDARD (REF176)
F582 424C             (        forth.asm):03090                 fcc     'BL'
F584 F576             (        forth.asm):03091                 fdb     UDOTR
F586 C7               (        forth.asm):03092                 RFCS
F587 8E0020           (        forth.asm):03093 (3)             ldx     #SP
F58A 7EE75B           (        forth.asm):03094 (3)             jmp     NPUSH
                      (        forth.asm):03095         
F58D 05               (        forth.asm):03096         SPACE   fcb     5               79-STANDARD (REQ232)
F58E 5350414345       (        forth.asm):03097                 fcc     'SPACE'
F593 F581             (        forth.asm):03098                 fdb     BL
F595 C7               (        forth.asm):03099                 RFCS
F596 8620             (        forth.asm):03100 (2)             lda     #SP
F598 7EE24C           (        forth.asm):03101 (3)             jmp     PUTCH
                      (        forth.asm):03102         
F59B 06               (        forth.asm):03103         SPACES  fcb     6               79-STANDARD (REQ231)
F59C 535041434553     (        forth.asm):03104                 fcc     'SPACES'
F5A2 F58D             (        forth.asm):03105                 fdb     SPACE
F5A4 C7               (        forth.asm):03106                 RFCS
F5A5 BDE769           (        forth.asm):03107 (7)             jsr     NPOP
F5A8 1F16             (        forth.asm):03108 (4)             tfr     x,w
F5AA 105D             (        forth.asm):03109 (2)             tstw
F5AC 2709             (        forth.asm):03110 (3)             beq     @spcs2
F5AE 8620             (        forth.asm):03111 (2)             lda     #SP
F5B0 BDE24C           (        forth.asm):03112 (7)     @spcs1  jsr     PUTCH
F5B3 105A             (        forth.asm):03113 (2)             decw
F5B5 26F9             (        forth.asm):03114 (3)             bne     @spcs1
F5B7 39               (        forth.asm):03115 (4)     @spcs2  rts
                      (        forth.asm):03116         
F5B8 04               (        forth.asm):03117         PAGE    fcb     4               79-STANDARD (REF)
F5B9 50414745         (        forth.asm):03118                 fcc     'PAGE'
F5BD F59B             (        forth.asm):03119                 fdb     SPACES
F5BF C7               (        forth.asm):03120                 RFCS
F5C0 8EFDBD           (        forth.asm):03121 (3)             ldx     #CSVT100
F5C3 7EE25F           (        forth.asm):03122 (3)             jmp     PUTS
                      (        forth.asm):03123         
F5C6 02               (        forth.asm):03124         CRLF    fcb     2               79-STANDARD (REQ160)
F5C7 4352             (        forth.asm):03125                 fcc     'CR'
F5C9 F5B8             (        forth.asm):03126                 fdb     PAGE
F5CB C7               (        forth.asm):03127                 RFCS
F5CC 7EE26C           (        forth.asm):03128 (3)             jmp     PUTCR
                      (        forth.asm):03129         
F5CF 03               (        forth.asm):03130         PAD     fcb     3               79-STANDARD (REQ226)
F5D0 504144           (        forth.asm):03131                 fcc     'PAD'
F5D3 F5C6             (        forth.asm):03132                 fdb     CRLF
F5D5 C7               (        forth.asm):03133                 RFCS
F5D6 8E017E           (        forth.asm):03134 (3)             ldx     #PADBUF
F5D9 7EE75B           (        forth.asm):03135 (3)             jmp     NPUSH
                      (        forth.asm):03136         
F5DC 04               (        forth.asm):03137         TYPE    fcb     4               79-STANDARD (REQ222)
F5DD 54595045         (        forth.asm):03138                 fcc     'TYPE'          ( addr bcount -- )
F5E1 F5CF             (        forth.asm):03139                 fdb     PAD
F5E3 C7               (        forth.asm):03140                 RFCS
F5E4 BDE769           (        forth.asm):03141 (7)             jsr     NPOP            Character count (signed)
F5E7 1F16             (        forth.asm):03142 (4)             tfr     x,w
F5E9 BDE769           (        forth.asm):03143 (7)             jsr     NPOP            Buffer address
F5EC 105D             (        forth.asm):03144 (2)             tstw                    
F5EE 2E01             (        forth.asm):03145 (3)     @type0  bgt     @type1
F5F0 39               (        forth.asm):03146 (4)             rts
F5F1 A680             (        forth.asm):03147 (4+1)   @type1  lda     ,x+
F5F3 BDE24C           (        forth.asm):03148 (7)             jsr     PUTCH
F5F6 105A             (        forth.asm):03149 (2)             decw
F5F8 20F4             (        forth.asm):03150 (3)             bra     @type0
                      (        forth.asm):03151         
F5FA 05               (        forth.asm):03152         COUNT   fcb     5               79-STANDARD (REQ159)
F5FB 434F554E54       (        forth.asm):03153                 fcc     'COUNT'
F600 F5DC             (        forth.asm):03154                 fdb     TYPE
F602 C7               (        forth.asm):03155                 RFCS
F603 BDE769           (        forth.asm):03156 (7)             jsr     NPOP
F606 E680             (        forth.asm):03157 (4+1)           ldb     ,x+
F608 3610             (        forth.asm):03158                 UCNPUSH                 B is preserved
F60A 4F               (        forth.asm):03159 (1)             clra
F60B 1F01             (        forth.asm):03160 (4)             tfr     d,x
F60D 7EE75B           (        forth.asm):03161 (3)             jmp     NPUSH
                      (        forth.asm):03162         
F610 09               (        forth.asm):03163         DASHTR  fcb     9               79-STANDARD (REQ148)
F611 2D545241494C494E (        forth.asm):03164                 fcc     '-TRAILING'     ( addr n1 -- addr n2 )
     47
F61A F5FA             (        forth.asm):03165                 fdb     COUNT
F61C C7               (        forth.asm):03166                 RFCS
F61D BDE769           (        forth.asm):03167 (7)             jsr     NPOP            N1 to X
F620 1F10             (        forth.asm):03168 (4)             tfr     x,d             N1 to D
F622 BDE769           (        forth.asm):03169 (7)             jsr     NPOP            ADDR to X
F625 1F12             (        forth.asm):03170 (4)             tfr     x,y             Backup to I
F627 104D             (        forth.asm):03171 (2)             tstd                    Input character count (N1)
F629 2D1B             (        forth.asm):03172 (3)             blt     @invpar         Cannot be < 0
F62B 308B             (        forth.asm):03173 (4+2)           leax    d,x             X has ADDR+N1
F62D 1F06             (        forth.asm):03174 (4)             tfr     d,w             W has N1
F62F 105D             (        forth.asm):03175 (2)     @cknxtb tstw
F631 270A             (        forth.asm):03176 (3)             beq     @ckdone
F633 A682             (        forth.asm):03177 (4+1)           lda     ,-x
F635 105A             (        forth.asm):03178 (2)             decw
F637 8120             (        forth.asm):03179 (2)             cmpa    #SP
F639 27F4             (        forth.asm):03180 (3)             beq     @cknxtb         Iterate over to the previous byte
F63B 105C             (        forth.asm):03181 (2)             incw
F63D 1F21             (        forth.asm):03182 (4)     @ckdone tfr     y,x
F63F 3610             (        forth.asm):03183                 UCNPUSH                 String base address
F641 1F61             (        forth.asm):03184 (4)             tfr     w,x
F643 3610             (        forth.asm):03185                 UCNPUSH                 Updated character count
F645 39               (        forth.asm):03186 (4)             rts
F646 C60D             (        forth.asm):03187 (2)     @invpar ldb     #13             Invalid parameter
F648 BDE6DE           (        forth.asm):03188 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):03189         
F64B 06               (        forth.asm):03190         EXPECT  fcb     6               79-STANDARD (REQ189)
F64C 455850454354     (        forth.asm):03191                 fcc     'EXPECT'        ( addr count -- )
F652 F610             (        forth.asm):03192                 fdb     DASHTR
F654 C7               (        forth.asm):03193                 RFCS
F655 BDE769           (        forth.asm):03194 (7)     EXPCT1  jsr     NPOP
F658 1F10             (        forth.asm):03195 (4)             tfr     x,d             Buffer length to B
F65A BDE769           (        forth.asm):03196 (7)             jsr     NPOP            Buffer address to X. B is preserved
F65D 5D               (        forth.asm):03197 (1)             tstb
F65E 2701             (        forth.asm):03198 (3)             beq     @expct1
F660 5C               (        forth.asm):03199 (1)             incb                    Account for the NUL terminator
F661 7EE282           (        forth.asm):03200 (3)     @expct1 jmp     GETS
                      (        forth.asm):03201         
F664 06               (        forth.asm):03202         ACCEPT  fcb     6               ANSI (Core)
F665 414343455054     (        forth.asm):03203                 fcc     'ACCEPT'
F66B F64B             (        forth.asm):03204                 fdb     EXPECT
F66D C7               (        forth.asm):03205                 RFCS
F66E 8DE5             (        forth.asm):03206 (6)             bsr     EXPCT1
F670 4F               (        forth.asm):03207 (1)             clra
F671 3606             (        forth.asm):03208 (4+2)           pshu    d               This saves us "tfr d,x" and "UCNPUSH"
F673 39               (        forth.asm):03209 (4)             rts
                      (        forth.asm):03210         
F674 49               (        forth.asm):03211         TERPRET fcb     $49             79-STANDARD (REF) I make this compile time only
F675 494E544552505245 (        forth.asm):03212                 fcc     'INTERPRET'     ( -- )
     54
F67E F664             (        forth.asm):03213                 fdb     ACCEPT
F680 C7               (        forth.asm):03214                 RFCS
                      (        forth.asm):03215         * Obtain a base buffer address based on the value of BLK.
F681 DC24             (        forth.asm):03216 (4)             ldd     UBLK
F683 2605             (        forth.asm):03217 (3)             bne     @notser
F685 8E0310           (        forth.asm):03218 (3)             ldx     #CMDBUF         Base buffer address for serial line input
F688 200A             (        forth.asm):03219 (3)             bra     @rsolvd
                      (        forth.asm):03220         * BLK is NZ, map the block in memory.
F68A 1F01             (        forth.asm):03221 (4)     @notser tfr     d,x             Block number to X
F68C BDE75B           (        forth.asm):03222 (7)             jsr     NPUSH
F68F BDE9BF           (        forth.asm):03223                 RFXT    jsr,BLOCK+8     XT for BLOCK. Map the block in
F692 3710             (        forth.asm):03224                 UCNPOP                  Retrieve buffer address (to X)
                      (        forth.asm):03225         * Note: >IN is supposed to have been set by the caller!
F694 9F1C             (        forth.asm):03226 (4)     @rsolvd stx     BSBFADR
F696 DC22             (        forth.asm):03227 (4)             ldd     UTOIN
F698 103001           (        forth.asm):03228 (4)             addr    d,x
F69B 7EE0CF           (        forth.asm):03229 (3)             jmp     _INTERP         Finally invoke _INTERP.
                      (        forth.asm):03230         
F69E 04               (        forth.asm):03231         LOAD    fcb     4               79-STANDARD (REQ202)
F69F 4C4F4144         (        forth.asm):03232                 fcc     'LOAD'          ( blk -- )
F6A3 F674             (        forth.asm):03233                 fdb     TERPRET
F6A5 C7               (        forth.asm):03234                 RFCS
F6A6 BDE769           (        forth.asm):03235 (7)             jsr     NPOP
F6A9 1037C1           (        forth.asm):03236 (4)             cmpr    0,x
F6AC 2601             (        forth.asm):03237 (3)             bne     LOAD1
F6AE 39               (        forth.asm):03238 (4)             rts                     Block 0 is _not_ loadable
F6AF 3410             (        forth.asm):03239 (4+2)   LOAD1   pshs    x
F6B1 9E24             (        forth.asm):03240 (4)             ldx     UBLK
F6B3 BDE778           (        forth.asm):03241 (7)             jsr     RPUSH           Push BLK on the return stack
F6B6 9E22             (        forth.asm):03242 (4)             ldx     UTOIN
F6B8 BDE778           (        forth.asm):03243 (7)             jsr     RPUSH           Push >IN on the return stack
F6BB 3510             (        forth.asm):03244 (4+2)           puls    x
F6BD 9F24             (        forth.asm):03245 (4)             stx     UBLK            Update BLK with the LOAD argument
F6BF 104F             (        forth.asm):03246 (2)             clrd
F6C1 DD22             (        forth.asm):03247 (4)             std     UTOIN           Clear >IN
                      (        forth.asm):03248         * Map the new BLK in, interpret code from there.
F6C3 8DBC             (        forth.asm):03249                 RFXT    bsr,TERPRET+12  XT for INTERPRET
F6C5 BDE796           (        forth.asm):03250 (7)             jsr     RPOP
F6C8 9F22             (        forth.asm):03251 (4)             stx     UTOIN           Restore >IN from the return stack
F6CA BDE796           (        forth.asm):03252 (7)             jsr     RPOP
F6CD 9F24             (        forth.asm):03253 (4)             stx     UBLK            Restore BLK from the return stack
F6CF 7EE7AF           (        forth.asm):03254 (3)             jmp     BKIN2PT         Map BLK in (if needed) and update BSBFADR
                      (        forth.asm):03255         
F6D2 04               (        forth.asm):03256         THRU    fcb     4               79-STANDARD (REF)
F6D3 54485255         (        forth.asm):03257                 fcc     'THRU'          ( lowblk highblk -- )
F6D7 F69E             (        forth.asm):03258                 fdb     LOAD
F6D9 C7               (        forth.asm):03259                 RFCS
F6DA BDE769           (        forth.asm):03260 (7)             jsr     NPOP
F6DD 1F12             (        forth.asm):03261 (4)             tfr     x,y             Y has highblk
F6DF BDE769           (        forth.asm):03262 (7)             jsr     NPOP            X has lowblk--both are unsigned numbers
F6E2 103712           (        forth.asm):03263 (4)     @thrlop cmpr    x,y
F6E5 2401             (        forth.asm):03264 (3)             bhs     @cont           Limit is >= to the loop index
F6E7 39               (        forth.asm):03265 (4)             rts
F6E8 3430             (        forth.asm):03266 (4+4)   @cont   pshs    x,y             Backup loop parameters
F6EA 3610             (        forth.asm):03267                 UCNPUSH                 Current block number to the data stack
F6EC 8DB8             (        forth.asm):03268                 RFXT    bsr,LOAD+7      XT for LOAD
F6EE 3530             (        forth.asm):03269 (4+4)           puls    y,x             Retrieve loop parameters
F6F0 3001             (        forth.asm):03270 (4+1)           leax    1,x             Iterate over to the next screen
F6F2 20EE             (        forth.asm):03271 (3)             bra     @thrlop
                      (        forth.asm):03272         
F6F4 83               (        forth.asm):03273         NXTBLK  fcb     $83             79-STANDARD (REF131)
F6F5 2D2D3E           (        forth.asm):03274                 fcc     '-->'           ( -- )
F6F8 F6D2             (        forth.asm):03275                 fdb     THRU
F6FA C7               (        forth.asm):03276                 RFCS
F6FB 9E24             (        forth.asm):03277 (4)             ldx     UBLK
F6FD 3001             (        forth.asm):03278 (4+1)           leax    1,x
F6FF DC24             (        forth.asm):03279 (4)     NXTBLK1 ldd     UBLK
F701 2603             (        forth.asm):03280 (3)             bne     @nfrmb0         Not invoked from block 0 (the console)
                      (        forth.asm):03281         * --> or CONTINUED are being invoked from the console. Flag that condition
                      (        forth.asm):03282         * as a hint to the interpreter so that feedback is provided even if we are
                      (        forth.asm):03283         * back from a block.
F703 4C               (        forth.asm):03284 (1)             inca                    1 to A
F704 9736             (        forth.asm):03285 (3)             sta     NBCTFB0
F706 9F24             (        forth.asm):03286 (4)     @nfrmb0 stx     UBLK            Update BLK
F708 104F             (        forth.asm):03287 (2)             clrd
F70A DD22             (        forth.asm):03288 (4)             std     UTOIN           0 >IN !
                      (        forth.asm):03289         * Map the new BLK in, interpret code from there.
F70C 7EF681           (        forth.asm):03290                 RFXT    jmp,TERPRET+12  XT for INTERPRET
                      (        forth.asm):03291         
F70F 89               (        forth.asm):03292         CONTIND fcb     $89             79-STANDARD (REF)
F710 434F4E54494E5545 (        forth.asm):03293                 fcc     'CONTINUED'     ( nextblk -- )
     44
F719 F6F4             (        forth.asm):03294                 fdb     NXTBLK
F71B C7               (        forth.asm):03295                 RFCS
F71C BDE769           (        forth.asm):03296 (7)             jsr     NPOP            NEXTBLK to X
F71F 1037C1           (        forth.asm):03297 (4)             cmpr    0,x             Cannot interpret from block 0!
F722 26DB             (        forth.asm):03298 (3)             bne     NXTBLK1
F724 C60D             (        forth.asm):03299 (2)             ldb     #13             Illegal argument
F726 BDE6DE           (        forth.asm):03300 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):03301         
F729 02               (        forth.asm):03302         MILLIS  fcb     2               79-STANDARD (REF)
F72A 4D53             (        forth.asm):03303                 fcc     'MS'            ( mscount -- )
F72C F70F             (        forth.asm):03304                 fdb     CONTIND
F72E C7               (        forth.asm):03305                 RFCS
F72F BDE769           (        forth.asm):03306 (7)             jsr     NPOP
F732 1037C1           (        forth.asm):03307 (4)             cmpr    0,x
F735 2601             (        forth.asm):03308 (3)             bne     MILLIS1
F737 39               (        forth.asm):03309 (4)             rts
F738 CC031A           (        forth.asm):03310 (3)     MILLIS1 ldd     #MSLCNT
F73B 104A             (        forth.asm):03311 (2)     @ms2    decd
F73D 26FC             (        forth.asm):03312 (3)             bne     @ms2
F73F 301F             (        forth.asm):03313 (4+1)           leax    -1,x
F741 26F5             (        forth.asm):03314 (3)             bne     MILLIS1
F743 39               (        forth.asm):03315 (4)             rts
                      (        forth.asm):03316         
F744 04               (        forth.asm):03317         KEYP    fcb     4               ANSI (Facility)
F745 4B45593F         (        forth.asm):03318                 fcc     'KEY?'          ( -- flag )
F749 F729             (        forth.asm):03319                 fdb     MILLIS
F74B C7               (        forth.asm):03320                 RFCS
F74C 1FC1             (        forth.asm):03321 (4)             tfr     0,x
F74E 0D3C             (        forth.asm):03322 (4)             tst     SERBCNT
F750 2702             (        forth.asm):03323 (3)             beq     @done
F752 3001             (        forth.asm):03324 (4+1)           leax    1,x             Return the 79-STANDARD true flag
F754 7EE75B           (        forth.asm):03325 (3)     @done   jmp     NPUSH
                      (        forth.asm):03326         
F757 03               (        forth.asm):03327         KEY     fcb     3               79-STANDARD (REQ100)
F758 4B4559           (        forth.asm):03328                 fcc     'KEY'
F75B F744             (        forth.asm):03329                 fdb     KEYP
F75D C7               (        forth.asm):03330                 RFCS
F75E BDE223           (        forth.asm):03331 (7)             jsr     GETCH
F761 1F89             (        forth.asm):03332 (4)             tfr     a,b
F763 4F               (        forth.asm):03333 (1)             clra
F764 1F01             (        forth.asm):03334 (4)             tfr     d,x
F766 7EE75B           (        forth.asm):03335 (3)             jmp     NPUSH
                      (        forth.asm):03336         
F769 04               (        forth.asm):03337         EMIT    fcb     4               79-STANDARD (REQ207)
F76A 454D4954         (        forth.asm):03338                 fcc     'EMIT'
F76E F757             (        forth.asm):03339                 fdb     KEY
F770 C7               (        forth.asm):03340                 RFCS
F771 BDE769           (        forth.asm):03341 (7)             jsr     NPOP
F774 1F10             (        forth.asm):03342 (4)             tfr     x,d
F776 1F98             (        forth.asm):03343 (4)             tfr     b,a
F778 7EE24C           (        forth.asm):03344 (3)             jmp     PUTCH
                      (        forth.asm):03345         
F77B 01               (        forth.asm):03346         PLUS    fcb     1               79-STANDARD (REQ121)
F77C 2B               (        forth.asm):03347                 fcc     '+'             ( n1 n2 -- sum )
F77D F769             (        forth.asm):03348                 fdb     EMIT
F77F C7               (        forth.asm):03349                 RFCS
F780 BDE414           (        forth.asm):03350 (7)             jsr     MIN2PST         We need at least two cells stacked up
F783 EC42             (        forth.asm):03351 (5+1)           ldd     2,u             N1
F785 E3C4             (        forth.asm):03352 (5+0)           addd    ,u              N2
F787 ED42             (        forth.asm):03353 (5+1)           std     2,u             SUM
F789 3342             (        forth.asm):03354 (4+1)           leau    2,u             Drop the top cell
F78B 39               (        forth.asm):03355 (4)             rts
                      (        forth.asm):03356         
F78C 02               (        forth.asm):03357         ONEP    fcb     2               79-STANDARD (REQ107)
F78D 312B             (        forth.asm):03358                 fcc     '1+'
F78F F77B             (        forth.asm):03359                 fdb     PLUS
F791 C7               (        forth.asm):03360                 RFCS
F792 BDE40F           (        forth.asm):03361 (7)             jsr     MIN1PST         We need at least one cell stacked up
F795 ECC4             (        forth.asm):03362 (5+0)           ldd     ,u
F797 104C             (        forth.asm):03363 (2)             incd
F799 EDC4             (        forth.asm):03364 (5+0)           std     ,u
F79B 39               (        forth.asm):03365 (4)             rts
                      (        forth.asm):03366         
F79C 02               (        forth.asm):03367         TWOP    fcb     2               79-STANDARD (REQ135)
F79D 322B             (        forth.asm):03368                 fcc     '2+'            ( n -- n+2 )
F79F F78C             (        forth.asm):03369                 fdb     ONEP
F7A1 C7               (        forth.asm):03370                 RFCS
F7A2 BDE40F           (        forth.asm):03371 (7)             jsr     MIN1PST         We need at least one cell stacked up
F7A5 ECC4             (        forth.asm):03372 (5+0)           ldd     ,u
F7A7 C30002           (        forth.asm):03373 (3)             addd    #2
F7AA EDC4             (        forth.asm):03374 (5+0)           std     ,u
F7AC 39               (        forth.asm):03375 (4)             rts
                      (        forth.asm):03376         
F7AD 01               (        forth.asm):03377         MINUS   fcb     1               79-STANDARD (REQ134)
F7AE 2D               (        forth.asm):03378                 fcc     '-'             ( n1 n2 -- dif )
F7AF F79C             (        forth.asm):03379                 fdb     TWOP
F7B1 C7               (        forth.asm):03380                 RFCS
F7B2 BDE414           (        forth.asm):03381 (7)             jsr     MIN2PST         We need at least two cells stacked up
F7B5 EC42             (        forth.asm):03382 (5+1)           ldd     2,u             N1
F7B7 A3C4             (        forth.asm):03383 (5+0)           subd    ,u              N2
F7B9 ED42             (        forth.asm):03384 (5+1)           std     2,u             DIF
F7BB 3342             (        forth.asm):03385 (4+1)           leau    2,u             Drop the top cell
F7BD 39               (        forth.asm):03386 (4)             rts
                      (        forth.asm):03387         
F7BE 02               (        forth.asm):03388         ONEM    fcb     2               79-STANDARD (REQ105)
F7BF 312D             (        forth.asm):03389                 fcc     '1-'
F7C1 F7AD             (        forth.asm):03390                 fdb     MINUS
F7C3 C7               (        forth.asm):03391                 RFCS
F7C4 BDE40F           (        forth.asm):03392 (7)             jsr     MIN1PST         We need at least one cell stacked up
F7C7 ECC4             (        forth.asm):03393 (5+0)           ldd     ,u
F7C9 104A             (        forth.asm):03394 (2)             decd
F7CB EDC4             (        forth.asm):03395 (5+0)           std     ,u
F7CD 39               (        forth.asm):03396 (4)             rts
                      (        forth.asm):03397         
F7CE 02               (        forth.asm):03398         TWOM    fcb     2               79-STANDARD (REQ129)
F7CF 322D             (        forth.asm):03399                 fcc     '2-'
F7D1 F7BE             (        forth.asm):03400                 fdb     ONEM
F7D3 C7               (        forth.asm):03401                 RFCS
F7D4 BDE40F           (        forth.asm):03402 (7)             jsr     MIN1PST         We need at least one cell stacked up
F7D7 ECC4             (        forth.asm):03403 (5+0)           ldd     ,u
F7D9 830002           (        forth.asm):03404 (3)             subd    #2
F7DC EDC4             (        forth.asm):03405 (5+0)           std     ,u
F7DE 39               (        forth.asm):03406 (4)             rts
                      (        forth.asm):03407         
F7DF 01               (        forth.asm):03408         ZEROL   fcb     1               Non-standard
F7E0 30               (        forth.asm):03409                 fcc     '0'
F7E1 F7CE             (        forth.asm):03410                 fdb     TWOM
F7E3 C7               (        forth.asm):03411                 RFCS
F7E4 1FC1             (        forth.asm):03412 (4)             tfr     0,x
F7E6 7EE75B           (        forth.asm):03413 (3)             jmp     NPUSH
                      (        forth.asm):03414         
F7E9 01               (        forth.asm):03415         ONEL    fcb     1               Non-standard
F7EA 31               (        forth.asm):03416                 fcc     '1'
F7EB F7DF             (        forth.asm):03417                 fdb     ZEROL
F7ED C7               (        forth.asm):03418                 RFCS
F7EE 8E0001           (        forth.asm):03419 (3)             ldx     #1
F7F1 7EE75B           (        forth.asm):03420 (3)             jmp     NPUSH
                      (        forth.asm):03421         
F7F4 01               (        forth.asm):03422         TWOL    fcb     1               Non-standard
F7F5 32               (        forth.asm):03423                 fcc     '2'
F7F6 F7E9             (        forth.asm):03424                 fdb     ONEL
F7F8 C7               (        forth.asm):03425                 RFCS
F7F9 8E0002           (        forth.asm):03426 (3)             ldx     #2
F7FC 7EE75B           (        forth.asm):03427 (3)             jmp     NPUSH
                      (        forth.asm):03428         
F7FF 05               (        forth.asm):03429         SHIFT   fcb     5               79-STANDARD (Ref)
F800 5348494654       (        forth.asm):03430                 fcc     'SHIFT'
F805 F7F4             (        forth.asm):03431                 fdb     TWOL
F807 C7               (        forth.asm):03432                 RFCS
F808 BDE414           (        forth.asm):03433 (7)             jsr     MIN2PST         Two cells need to be stacked up
F80B 10A6C4           (        forth.asm):03434 (6+0)           ldw     ,u              Shift bitcount
F80E EC42             (        forth.asm):03435 (5+1)           ldd     2,u             The data itself
F810 105D             (        forth.asm):03436 (2)     @shftlp tstw
F812 270E             (        forth.asm):03437 (3)             beq     @shfdon
F814 2D06             (        forth.asm):03438 (3)             blt     @shftrg
F816 1048             (        forth.asm):03439 (2)             lsld                    Shift left (W is positive)
F818 105A             (        forth.asm):03440 (2)             decw
F81A 20F4             (        forth.asm):03441 (3)             bra     @shftlp
F81C 1044             (        forth.asm):03442 (2)     @shftrg lsrd                    Shift right (W is negative)
F81E 105C             (        forth.asm):03443 (2)             incw
F820 20EE             (        forth.asm):03444 (3)             bra     @shftlp
F822 ED42             (        forth.asm):03445 (5+1)   @shfdon std     2,u             Return value stored there
F824 3342             (        forth.asm):03446 (4+1)           leau    2,u             Drop one cell from the data stack
F826 39               (        forth.asm):03447 (4)             rts
                      (        forth.asm):03448         
                      (        forth.asm):03449         * Signed multiplication by hardware support.
F827 01               (        forth.asm):03450         MULT    fcb     1               79-STANDARD (REQ138)
F828 2A               (        forth.asm):03451                 fcc     '*'
F829 F7FF             (        forth.asm):03452                 fdb     SHIFT
F82B C7               (        forth.asm):03453                 RFCS
F82C BDE414           (        forth.asm):03454 (7)             jsr     MIN2PST         Two cells need to be stacked up
F82F EC42             (        forth.asm):03455 (5+1)           ldd     2,u
F831 11AFC4           (        forth.asm):03456 (30+0)          muld    ,u
F834 10A742           (        forth.asm):03457 (6+1)           stw     2,u             Return only the lower 16 bits
F837 3342             (        forth.asm):03458 (4+1)           leau    2,u             Drop one cell from the data stack
F839 39               (        forth.asm):03459 (4)             rts
                      (        forth.asm):03460         
F83A 02               (        forth.asm):03461         TWOTIM  fcb     2               79-STANDARD (REF)
F83B 322A             (        forth.asm):03462                 fcc     '2*'
F83D F827             (        forth.asm):03463                 fdb     MULT
F83F C7               (        forth.asm):03464                 RFCS
F840 BDE40F           (        forth.asm):03465 (7)             jsr     MIN1PST         One cell needs to be stacked up
F843 ECC4             (        forth.asm):03466 (5+0)           ldd     ,u
F845 1048             (        forth.asm):03467 (2)             asld
F847 EDC4             (        forth.asm):03468 (5+0)           std     ,u
F849 39               (        forth.asm):03469 (4)             rts
                      (        forth.asm):03470         
F84A 02               (        forth.asm):03471         TWODIV  fcb     2
F84B 322F             (        forth.asm):03472                 fcc     '2/'
F84D F83A             (        forth.asm):03473                 fdb     TWOTIM
F84F C7               (        forth.asm):03474                 RFCS
F850 BDE40F           (        forth.asm):03475 (7)             jsr     MIN1PST         One cell needs to be stacked up
F853 ECC4             (        forth.asm):03476 (5+0)           ldd     ,u
F855 1047             (        forth.asm):03477 (2)             asrd
F857 EDC4             (        forth.asm):03478 (5+0)           std     ,u
F859 39               (        forth.asm):03479 (4)             rts
                      (        forth.asm):03480         
                      (        forth.asm):03481         * /, MOD and /MOD are essentially the same function returning
                      (        forth.asm):03482         * the different parts returned by DIVQ.
                      (        forth.asm):03483         * We use a global variable to distinguish which functionality
                      (        forth.asm):03484         * is being requested:
                      (        forth.asm):03485         * 0: return the modulo and the quotient (/MOD).
                      (        forth.asm):03486         * 1: return the modulo only (MOD).
                      (        forth.asm):03487         * 2: return the quotient only (/).
F85A 01               (        forth.asm):03488         DIV     fcb     1               79-STANDARD (REQ178)
F85B 2F               (        forth.asm):03489                 fcc     '/'             ( N1 N2 -- N3 [N4] )
F85C F84A             (        forth.asm):03490                 fdb     TWODIV
F85E C7               (        forth.asm):03491                 RFCS
F85F 8602             (        forth.asm):03492 (2)             lda     #2
F861 972D             (        forth.asm):03493 (3)             sta     DIVFCN          Function 2: return only the quotient
F863 BDE414           (        forth.asm):03494 (7)     DIV1    jsr     MIN2PST         At least two cells need to be stacked up
F866 0F2E             (        forth.asm):03495 (5)             clr     F83DIVF         Assume no adjustment required for floored div.
F868 A642             (        forth.asm):03496 (4+1)           lda     2,u             Numerator's MSB
F86A A8C4             (        forth.asm):03497 (4+0)           eora    ,u              Different sign from the denominator's MSB?
F86C 2A02             (        forth.asm):03498 (3)             bpl     @divprc         No, proceed to the division code
F86E 0C2E             (        forth.asm):03499 (5)             inc     F83DIVF         Numerator and denominator have different signs
                      (        forth.asm):03500         * Division by zero conditions are dealt with through the trap handler.
F870 104F             (        forth.asm):03501 (2)     @divprc clrd                    Clear the numerator's MSC
F872 10A642           (        forth.asm):03502 (6+1)           ldw     2,u             Numerator's LSC
F875 2A02             (        forth.asm):03503 (3)             bpl     @dvnsex         Branch if no sign extention is needed
                      (        forth.asm):03504         * Sign extention from W to Q.
F877 1043             (        forth.asm):03505 (2)             comd                    -1 to D (numerator's MSC)
F879 11AEC4           (        forth.asm):03506 (36)    @dvnsex divq    ,u              ,u has the denominator
F87C 8D19             (        forth.asm):03507 (6)             bsr     FDIVADJ         Perform floored division adjustment, if needed
F87E 0D2D             (        forth.asm):03508 (4)     @no83ad tst     DIVFCN
F880 2606             (        forth.asm):03509 (3)             bne     @div4
F882 ED42             (        forth.asm):03510 (5+1)           std     2,u             Function 0: return the modulo and the quotient
F884 10A7C4           (        forth.asm):03511 (6+0)   @div3   stw     ,u              Function 2: return only the quotient
F887 39               (        forth.asm):03512 (4)             rts
F888 3342             (        forth.asm):03513 (4+1)   @div4   leau    2,u             Drop one cell from the data stack
F88A 1F07             (        forth.asm):03514 (4)             tfr     d,v             Backup the modulo
F88C 962D             (        forth.asm):03515 (3)             lda     DIVFCN
F88E 8101             (        forth.asm):03516 (2)             cmpa    #1
F890 26F2             (        forth.asm):03517 (3)             bne     @div3
F892 1F70             (        forth.asm):03518 (4)             tfr     v,d             Restore the modulo
F894 EDC4             (        forth.asm):03519 (5+0)           std     ,u              Function 1: return only the modulo
F896 39               (        forth.asm):03520 (4)             rts
                      (        forth.asm):03521         
                      (        forth.asm):03522         * Quotient is returned in W, modulo in D but this is symmetric division :-(
                      (        forth.asm):03523         * Need to return a floored division result for compat. with F83 and ANSI impls.
F897 104D             (        forth.asm):03524 (2)     FDIVADJ tstd                    Is the remainder zero?
F899 2708             (        forth.asm):03525 (3)             beq     @no83ad         Yes. No adjusment required for floored division
F89B 0D2E             (        forth.asm):03526 (4)             tst     F83DIVF         Different signs for numerator and denominator?
F89D 2704             (        forth.asm):03527 (3)             beq     @no83ad         No. Adjusment not needed for floored division
                      (        forth.asm):03528         * Adjusment for F83 floored division.
F89F 105A             (        forth.asm):03529 (2)             decw                    Decrement the quotient
F8A1 E3C4             (        forth.asm):03530 (5+0)           addd    ,u              Add the denominator to the modulo
F8A3 39               (        forth.asm):03531 (4)     @no83ad rts
                      (        forth.asm):03532         
F8A4 03               (        forth.asm):03533         MOD     fcb     3               79-STANDARD (REQ104)
F8A5 4D4F44           (        forth.asm):03534                 fcc     'MOD'           ( N1 N2 -- N3 )
F8A8 F85A             (        forth.asm):03535                 fdb     DIV
F8AA C7               (        forth.asm):03536                 RFCS
F8AB 8601             (        forth.asm):03537 (2)             lda     #1
F8AD 972D             (        forth.asm):03538 (3)             sta     DIVFCN
F8AF 20B2             (        forth.asm):03539 (3)             bra     DIV1
                      (        forth.asm):03540         
F8B1 04               (        forth.asm):03541         MDIV    fcb     4               79-STANDARD (REQ198)
F8B2 2F4D4F44         (        forth.asm):03542                 fcc     '/MOD'          ( N1 N2 -- N3 N4 )
F8B6 F8A4             (        forth.asm):03543                 fdb     MOD
F8B8 C7               (        forth.asm):03544                 RFCS
F8B9 0F2D             (        forth.asm):03545 (5)             clr     DIVFCN
F8BB 20A6             (        forth.asm):03546 (3)             bra     DIV1
                      (        forth.asm):03547         
F8BD 02               (        forth.asm):03548         STRSLSH fcb     2               79-STANDARD (REQ220)
F8BE 2A2F             (        forth.asm):03549                 fcc     '*/'            ( N1 N2 N3 -- N4 [N5] )
F8C0 F8B1             (        forth.asm):03550                 fdb     MDIV
F8C2 C7               (        forth.asm):03551                 RFCS
F8C3 8601             (        forth.asm):03552 (2)             lda     #1
F8C5 972F             (        forth.asm):03553 (3)             sta     STSLFCN
F8C7 BDE419           (        forth.asm):03554 (7)     STRSL1  jsr     MIN3PST         Three cells need to be stacked up
F8CA 0F2E             (        forth.asm):03555 (5)             clr     F83DIVF         Assume no adjustment required for floored div.
                      (        forth.asm):03556         * Division by zero conditions are dealt with through the trap handler.
F8CC EC44             (        forth.asm):03557 (5+1)           ldd     4,u             N1
F8CE 11AF42           (        forth.asm):03558 (30+1)          muld    2,u             N2 (N1 * N2 -> D:W)
F8D1 3402             (        forth.asm):03559 (4+1)           pshs    a               Product's MSC's MSB
F8D3 A8C4             (        forth.asm):03560 (4+0)           eora    ,u              Different sign from the denominator's?
F8D5 2A02             (        forth.asm):03561 (3)             bpl     @stslpr         No. Floored division adjustment not needed
F8D7 0C2E             (        forth.asm):03562 (5)             inc     F83DIVF
F8D9 3502             (        forth.asm):03563 (4+1)   @stslpr puls    a
F8DB 11AEC4           (        forth.asm):03564 (36)            divq    ,u              N3
F8DE 8DB7             (        forth.asm):03565 (6)             bsr     FDIVADJ         Perform floored division adjustment, if needed
F8E0 3342             (        forth.asm):03566 (4+1)           leau    2,u
F8E2 0D2F             (        forth.asm):03567 (4)             tst     STSLFCN
F8E4 2606             (        forth.asm):03568 (3)             bne     @strsl2         Just the quotient, Ma'am!
F8E6 ED42             (        forth.asm):03569 (5+1)           std     2,u             N4: the modulo
F8E8 10A7C4           (        forth.asm):03570 (6+0)           stw     ,u              N5: the quotient
F8EB 39               (        forth.asm):03571 (4)             rts
F8EC 3342             (        forth.asm):03572 (4+1)   @strsl2 leau    2,u
F8EE 10A7C4           (        forth.asm):03573 (6+0)           stw     ,u              N4
F8F1 39               (        forth.asm):03574 (4)             rts
                      (        forth.asm):03575         
F8F2 05               (        forth.asm):03576         STRSLMD fcb     5               79-STANDARD (REQ192)
F8F3 2A2F4D4F44       (        forth.asm):03577                 fcc     '*/MOD'         ( N1 N2 N3 -- N4 N5 )
F8F8 F8BD             (        forth.asm):03578                 fdb     STRSLSH
F8FA C7               (        forth.asm):03579                 RFCS
F8FB 0F2F             (        forth.asm):03580 (5)             clr     STSLFCN
F8FD 20C8             (        forth.asm):03581 (3)             bra     STRSL1
                      (        forth.asm):03582         
                      (        forth.asm):03583         * Returns the current value of the S register (informational only).
F8FF 01               (        forth.asm):03584         SYSSTK  fcb     1               Non-standard
F900 53               (        forth.asm):03585                 fcc     'S'
F901 F8F2             (        forth.asm):03586                 fdb     STRSLMD
F903 C7               (        forth.asm):03587                 RFCS
F904 1F41             (        forth.asm):03588 (4)             tfr     s,x
F906 7EE75B           (        forth.asm):03589 (3)             jmp     NPUSH
                      (        forth.asm):03590         
F909 07               (        forth.asm):03591         PAYLOAD fcb     7               Non standard
F90A 5041594C4F4144   (        forth.asm):03592                 fcc     'PAYLOAD'       ( -- len ) where len is the code payload
F911 F8FF             (        forth.asm):03593                 fdb     SYSSTK          of the word located by FIND (or NULL)
F913 C7               (        forth.asm):03594                 RFCS
F914 9E10             (        forth.asm):03595 (4)             ldx     FNDPLD          Code payload reported by FIND
F916 7EE75B           (        forth.asm):03596 (3)             jmp     NPUSH
                      (        forth.asm):03597         
                      (        forth.asm):03598         * Differences from the original code:
                      (        forth.asm):03599         * - display number in HEX rather than in the current base.
                      (        forth.asm):03600         * - dropped feat: the original stuff was interactively paged by 15 line screens.
                      (        forth.asm):03601         * - added feat: display code implementation payload.
                      (        forth.asm):03602         * - added feat: display the immedediate and define (compile time only) flags.
                      (        forth.asm):03603         * - added feat: display the forgettable status (R/W). Everything user
                      (        forth.asm):03604         *   defined is forgettable (i.e. RAM resident).
F919 05               (        forth.asm):03605         VLIST   fcb     5               Non-standard
F91A 564C495354       (        forth.asm):03606                 fcc     'VLIST'         ( -- )
F91F F909             (        forth.asm):03607                 fdb     PAYLOAD
F921 C7               (        forth.asm):03608                 RFCS
F922 9E08             (        forth.asm):03609 (4)             ldx     DICEND
F924 9F16             (        forth.asm):03610 (4)             stx     VLPRVEP         Last word code address + 1
F926 9E06             (        forth.asm):03611 (4)             ldx     LSTWAD
F928 9F18             (        forth.asm):03612 (4)     @vlist1 stx     VLPRVHD         Last word header pointer
F92A 108E03E4         (        forth.asm):03613 (4)             ldy     #TBUFF
F92E E680             (        forth.asm):03614 (4+1)           ldb     ,x+
F930 3404             (        forth.asm):03615 (4+1)           pshs    b
F932 C41F             (        forth.asm):03616 (2)             andb    #WRLNMSK        Mask out word length
F934 4F               (        forth.asm):03617 (1)             clra
F935 3404             (        forth.asm):03618 (4+1)           pshs    b               Preserve word length
F937 1F06             (        forth.asm):03619 (4)             tfr     d,w
F939 113812           (        forth.asm):03620 (6+?)           tfm     x+,y+
F93C 3502             (        forth.asm):03621 (4+1)           puls    a               Restore word length to A
F93E C620             (        forth.asm):03622 (2)             ldb     #WRLNMSK+1
F940 103289           (        forth.asm):03623 (4)             subr    a,b             Number of spaces we want to emit
F943 8620             (        forth.asm):03624 (2)             lda     #SP
F945 A7A0             (        forth.asm):03625 (4+1)   @vlist2 sta     ,y+
F947 5A               (        forth.asm):03626 (1)             decb
F948 26FB             (        forth.asm):03627 (3)             bne     @vlist2
F94A 6FA0             (        forth.asm):03628 (6+1)           clr     ,y+             Terminate formatted output string
F94C 3410             (        forth.asm):03629 (4+2)           pshs    x               Address of the current word backlink address
F94E BDE26C           (        forth.asm):03630 (7)             jsr     PUTCR           Carriage return is output before anything else
F951 8E03E4           (        forth.asm):03631 (3)             ldx     #TBUFF
F954 BDE25F           (        forth.asm):03632 (7)             jsr     PUTS            Output word name formatted on 17 chars + SP
F957 AEE4             (        forth.asm):03633 (5+0)           ldx     ,s
                      (        forth.asm):03634                 IFNE    RELFEAT
F959 3003             (        forth.asm):03635 (4+1)           leax    3,x             Word XT to X (Skip backlink and checksum)
                      (        forth.asm):03636                 ELSE
                      (        forth.asm):03637                 leax    2,x             Word XT to X (Skip backlink)
                      (        forth.asm):03638                 ENDC
F95B 1F10             (        forth.asm):03639 (4)             tfr     x,d             CVNSTR depends on UBASE and we want HEX output
F95D 8E03E4           (        forth.asm):03640 (3)             ldx     #TBUFF
F960 BDE184           (        forth.asm):03641 (7)             jsr     HDMP4           So we use trusted debugging code
F963 8E03E4           (        forth.asm):03642 (3)             ldx     #TBUFF
F966 BDE25F           (        forth.asm):03643 (7)             jsr     PUTS
                      (        forth.asm):03644         * Now to display word implementation length.
                      (        forth.asm):03645         * Implementation code length is from ,s+3 (or 2) to VLPRVEP
F969 8609             (        forth.asm):03646 (2)             lda     #HT
F96B BDE24C           (        forth.asm):03647 (7)             jsr     PUTCH
F96E 9E16             (        forth.asm):03648 (4)             ldx     VLPRVEP
F970 10AEE4           (        forth.asm):03649 (6+0)           ldy     ,s
                      (        forth.asm):03650                 IFNE    RELFEAT
F973 3123             (        forth.asm):03651 (4+1)           leay    3,y             Current word code entry address
                      (        forth.asm):03652                 ELSE
                      (        forth.asm):03653                 leay    2,y             Current word code entry address
                      (        forth.asm):03654                 ENDC
F975 103221           (        forth.asm):03655 (4)             subr    y,x
F978 1F10             (        forth.asm):03656 (4)             tfr     x,d
F97A 8E03E4           (        forth.asm):03657 (3)             ldx     #TBUFF
F97D BDE184           (        forth.asm):03658 (7)             jsr     HDMP4
F980 8E03E4           (        forth.asm):03659 (3)             ldx     #TBUFF
F983 BDE25F           (        forth.asm):03660 (7)             jsr     PUTS
                      (        forth.asm):03661         # Display attribute flags.
F986 8609             (        forth.asm):03662 (2)             lda     #HT
F988 BDE24C           (        forth.asm):03663 (7)             jsr     PUTCH
F98B 8E03E4           (        forth.asm):03664 (3)             ldx     #TBUFF
F98E E662             (        forth.asm):03665 (4+1)           ldb     2,s             Word attribute to B
F990 862D             (        forth.asm):03666 (2)             lda     #'-
F992 C580             (        forth.asm):03667 (2)             bitb    #IMDFLM         Check for immediate
F994 2702             (        forth.asm):03668 (3)             beq     @vlist4
F996 8649             (        forth.asm):03669 (2)             lda     #'I
F998 A780             (        forth.asm):03670 (4+1)   @vlist4 sta     ,x+
F99A 862D             (        forth.asm):03671 (2)             lda     #'-
F99C C540             (        forth.asm):03672 (2)             bitb    #DEFFLM         Check for define (compile time only)
F99E 2702             (        forth.asm):03673 (3)             beq     @vlist5
F9A0 8643             (        forth.asm):03674 (2)             lda     #'C
F9A2 A780             (        forth.asm):03675 (4+1)   @vlist5 sta     ,x+
                      (        forth.asm):03676                 IFNE    RELFEAT
F9A4 862D             (        forth.asm):03677 (2)             lda     #'-
F9A6 C520             (        forth.asm):03678 (2)             bitb    #MONFLM         Check for monitored status
F9A8 2702             (        forth.asm):03679 (3)             beq     @vlst51
F9AA 864D             (        forth.asm):03680 (2)             lda     #'M
F9AC A780             (        forth.asm):03681 (4+1)   @vlst51 sta     ,x+
                      (        forth.asm):03682                 ENDC
                      (        forth.asm):03683         * Check for forgettable also. In ROM => R else W unless we just processed '@'.
F9AE 8652             (        forth.asm):03684 (2)             lda     #'R
F9B0 10AEE4           (        forth.asm):03685 (6+0)           ldy     ,s
                      (        forth.asm):03686                 IFNE    RELFEAT
F9B3 3123             (        forth.asm):03687 (4+1)           leay    3,y             Word entry point to Y
                      (        forth.asm):03688                 ELSE
                      (        forth.asm):03689                 leay    2,y             Word entry point to Y
                      (        forth.asm):03690                 ENDC
F9B5 108C0C55         (        forth.asm):03691 (4)             cmpy    #RAMFTCH        @ in RAM is unforgettable
F9B9 2708             (        forth.asm):03692 (3)             beq     @vlist6
F9BB 108CE000         (        forth.asm):03693 (4)             cmpy    #ROMSTRT        as are all ROM resident words
F9BF 2402             (        forth.asm):03694 (3)             bcc     @vlist6
F9C1 8657             (        forth.asm):03695 (2)             lda     #'W
F9C3 A780             (        forth.asm):03696 (4+1)   @vlist6 sta     ,x+
F9C5 6F84             (        forth.asm):03697 (6+0)           clr     ,x
F9C7 8E03E4           (        forth.asm):03698 (3)             ldx     #TBUFF
F9CA BDE25F           (        forth.asm):03699 (7)             jsr     PUTS
                      (        forth.asm):03700         * The point at which VLPRVHD==WDICSPC is a singularity (RAM to ROM transition).
F9CD 9E18             (        forth.asm):03701 (4)             ldx     VLPRVHD
F9CF 8C0C50           (        forth.asm):03702 (3)             cmpx    #WDICSPC
F9D2 2608             (        forth.asm):03703 (3)             bne     @vlist7
F9D4 8EFDA5           (        forth.asm):03704 (3)             ldx     #QMARK          Word just before @ (ROM flavor)
F9D7 9F18             (        forth.asm):03705 (4)             stx     VLPRVHD
F9D9 8EFDB0           (        forth.asm):03706 (3)             ldx     #THEEND
F9DC 9F16             (        forth.asm):03707 (4)     @vlist7 stx     VLPRVEP
F9DE 3510             (        forth.asm):03708 (4+2)           puls    x
F9E0 3504             (        forth.asm):03709 (4+1)           puls    b
F9E2 AE84             (        forth.asm):03710 (5+0)           ldx     ,x              Point to previous word
F9E4 1026FF40         (        forth.asm):03711 (5)             lbne    @vlist1
F9E8 39               (        forth.asm):03712 (4)             rts
                      (        forth.asm):03713         
F9E9 05               (        forth.asm):03714         STATE   fcb     5
F9EA 5354415445       (        forth.asm):03715                 fcc     'STATE'
F9EF F919             (        forth.asm):03716                 fdb     VLIST
F9F1 C7               (        forth.asm):03717                 RFCS
F9F2 8E0120           (        forth.asm):03718 (3)             ldx     #USTATE
F9F5 7EE75B           (        forth.asm):03719 (3)             jmp     NPUSH
                      (        forth.asm):03720         
F9F8 04               (        forth.asm):03721         BASE    fcb     4               79-STANDARD (REQ115)
F9F9 42415345         (        forth.asm):03722                 fcc     'BASE'
F9FD F9E9             (        forth.asm):03723                 fdb     STATE
F9FF C7               (        forth.asm):03724                 RFCS
FA00 8E011E           (        forth.asm):03725 (3)             ldx     #UBASE
FA03 7EE75B           (        forth.asm):03726 (3)             jmp     NPUSH
                      (        forth.asm):03727         
FA06 03               (        forth.asm):03728         BIN     fcb     3               Non-standard
FA07 42494E           (        forth.asm):03729                 fcc     'BIN'
FA0A F9F8             (        forth.asm):03730                 fdb     BASE
FA0C C7               (        forth.asm):03731                 RFCS
FA0D CC0002           (        forth.asm):03732 (3)             ldd     #2
FA10 DD1E             (        forth.asm):03733 (4)             std     UBASE
FA12 39               (        forth.asm):03734 (4)             rts
                      (        forth.asm):03735         
FA13 05               (        forth.asm):03736         OCTAL   fcb     5               79-STANDARD (REF)
FA14 4F4354414C       (        forth.asm):03737                 fcc     'OCTAL'
FA19 FA06             (        forth.asm):03738                 fdb     BIN
FA1B C7               (        forth.asm):03739                 RFCS
FA1C CC0008           (        forth.asm):03740 (3)             ldd     #8
FA1F DD1E             (        forth.asm):03741 (4)             std     UBASE
FA21 39               (        forth.asm):03742 (4)             rts
                      (        forth.asm):03743         
FA22 07               (        forth.asm):03744         DECIMAL fcb     7               79-STANDARD (REQ197)
FA23 444543494D414C   (        forth.asm):03745                 fcc     'DECIMAL'
FA2A FA13             (        forth.asm):03746                 fdb     OCTAL
FA2C C7               (        forth.asm):03747                 RFCS
FA2D CC000A           (        forth.asm):03748 (3)             ldd     #10
FA30 DD1E             (        forth.asm):03749 (4)             std     UBASE
FA32 39               (        forth.asm):03750 (4)             rts
                      (        forth.asm):03751         
FA33 03               (        forth.asm):03752         HEX     fcb     3               79-STANDARD (REF162)
FA34 484558           (        forth.asm):03753                 fcc     'HEX'
FA37 FA22             (        forth.asm):03754                 fdb     DECIMAL
FA39 C7               (        forth.asm):03755                 RFCS
FA3A CC0010           (        forth.asm):03756 (3)             ldd     #16
FA3D DD1E             (        forth.asm):03757 (4)             std     UBASE
FA3F 39               (        forth.asm):03758 (4)             rts
                      (        forth.asm):03759         
                      (        forth.asm):03760         * DUMP is not optimized for speed or clarity but for code compactness and yet
                      (        forth.asm):03761         * it remains the largest dictionary entry! It resorts to builtin HEX dump
                      (        forth.asm):03762         * primitives that do not depend on the current base (HDMP4, HDMP2).
                      (        forth.asm):03763         * DUMP operates on the basis of one line of output to #TBUFF per 16 byte
                      (        forth.asm):03764         * (a block) of input. The input buffer is pointed to by D (backed up by Y)
                      (        forth.asm):03765         * and the output is pointed to by X. The output (besides the header line)
                      (        forth.asm):03766         * comprises 3 distinct areas:
                      (        forth.asm):03767         *
                      (        forth.asm):03768         * - the base block address. Aligned on a 16 byte address, followed by one #SP.
                      (        forth.asm):03769         * - the HEX dump area. Made up of 16 times 2 HEX numbers separated by #SP.
                      (        forth.asm):03770         * - the ASCII dump area. Made up of 16 characters.
                      (        forth.asm):03771         *
                      (        forth.asm):03772         * This results in the following "magical" constants:
                      (        forth.asm):03773         *
                      (        forth.asm):03774         * #TBUFF+53 points to the beginning of the ASCII dump area.
                      (        forth.asm):03775         * #TBUFF+69 points to the end of the output string (to be NUL terminated).
                      (        forth.asm):03776         *
FA40 04               (        forth.asm):03777         DUMP    fcb     4               79-STANDARD (REF123)
FA41 44554D50         (        forth.asm):03778                 fcc     'DUMP'          ( START NBYTES -- )
FA45 FA33             (        forth.asm):03779                 fdb     HEX
FA47 C7               (        forth.asm):03780                 RFCS
FA48 BDE769           (        forth.asm):03781 (7)             jsr     NPOP
FA4B 1F12             (        forth.asm):03782 (4)             tfr     x,y             NBYTES to Y
FA4D BDE769           (        forth.asm):03783 (7)             jsr     NPOP
                      (        forth.asm):03784         * Input parameter validation.
FA50 1037C2           (        forth.asm):03785 (4)             cmpr    0,y
FA53 2601             (        forth.asm):03786 (3)             bne     @dmproc         Proceed if NBYTES in non-zero
FA55 39               (        forth.asm):03787 (4)             rts                     A zero byte count is not flagged as an error
FA56 2E05             (        forth.asm):03788 (3)     @dmproc bgt     @dmpini
FA58 C60D             (        forth.asm):03789 (2)             ldb     #13             Illegal argument (negative)
FA5A BDE6DE           (        forth.asm):03790 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):03791         * Initialization and header processing.
FA5D 3420             (        forth.asm):03792 (4+2)   @dmpini pshs    y               NBYTES
FA5F 3410             (        forth.asm):03793 (4+2)           pshs    x               START
FA61 327E             (        forth.asm):03794 (4+1)           leas    -2,s            Allocate storage for STARTSEEN
                      (        forth.asm):03795         * Stack structure:
                      (        forth.asm):03796         * ,s    STARTSEEN               Set to 1 as soon as D is seen = to START
                      (        forth.asm):03797         *                               Only the LSB is used (1,s).
                      (        forth.asm):03798         * 2,s   START                   Lower bound of the area of interest (included)
                      (        forth.asm):03799         * 4,s   NBYTES                  Byte count to be dumped
FA63 1F10             (        forth.asm):03800 (4)             tfr     x,d             START to D
FA65 C4F0             (        forth.asm):03801 (2)             andb    #$F0            Align to lower 16 byte boundary
FA67 6F61             (        forth.asm):03802 (6+1)           clr     1,s             Clear STARTSEEN until better informed
FA69 BDE26C           (        forth.asm):03803 (7)             jsr     PUTCR           Print CR
FA6C 11C620           (        forth.asm):03804 (3)             ldf     #SP             Preserved across called subroutines
FA6F 8E03E4           (        forth.asm):03805 (3)             ldx     #TBUFF
FA72 1F17             (        forth.asm):03806 (4)             tfr     x,v             Invariants: F has #SP, V has #TBUFF
FA74 3406             (        forth.asm):03807 (4+2)           pshs    d
FA76 BDFB11           (        forth.asm):03808 (7)             jsr     _DMPHDR         D is not preserved
FA79 3506             (        forth.asm):03809 (4+2)           puls    d
FA7B 6F84             (        forth.asm):03810 (6+0)           clr     ,x              NUL terminate the current output line
FA7D 1F71             (        forth.asm):03811 (4)             tfr     v,x             Point back to the beginning of the output buffer
FA7F BDE25F           (        forth.asm):03812 (7)             jsr     PUTS            Print header
                      (        forth.asm):03813         * Main loop. Index is D. We output everything to the string pointed by X.
                      (        forth.asm):03814         * Occasional resort to #TBUFF + 53 + (B % 15) will be used.
FA82 3404             (        forth.asm):03815 (4+1)   @dmmain pshs    b
FA84 C40F             (        forth.asm):03816 (2)             andb    #$F
FA86 3504             (        forth.asm):03817 (4+1)           puls    b
FA88 2609             (        forth.asm):03818 (3)             bne     @dmphx          Not a beginning of line
FA8A BDE26C           (        forth.asm):03819 (7)             jsr     PUTCR           Print CR
FA8D BDE184           (        forth.asm):03820 (7)             jsr     HDMP4           4 hex digit dump of the base block address
FA90 11E780           (        forth.asm):03821 (5+1)           stf     ,x+             SPACE after the base address
FA93 1F02             (        forth.asm):03822 (4)     @dmphx  tfr     d,y             Save D, prepare pointer to actual data
FA95 8D59             (        forth.asm):03823 (6)             bsr     _DMPINT
FA97 260A             (        forth.asm):03824 (3)             bne     @dmhx2          We are in the area of interest
FA99 8620             (        forth.asm):03825 (2)     @dmspc  lda     #SP
FA9B A780             (        forth.asm):03826 (4+1)           sta     ,x+             Nothing interesting here. Emit three spaces
FA9D A780             (        forth.asm):03827 (4+1)           sta     ,x+
FA9F A780             (        forth.asm):03828 (4+1)           sta     ,x+
FAA1 2016             (        forth.asm):03829 (3)             bra     @dmasc          Have #SP printed to the ASCII area
                      (        forth.asm):03830         * We are within the area of interest. Perform a regular HEX 2 digit conversion.
FAA3 A6A4             (        forth.asm):03831 (4+0)   @dmhx2  lda     ,y
FAA5 BDE19D           (        forth.asm):03832 (7)             jsr     HDMP2
FAA8 11E780           (        forth.asm):03833 (5+1)           stf     ,x+
                      (        forth.asm):03834         * Decrement NBYTES, only if it is not already zero.
FAAB 3420             (        forth.asm):03835 (4+2)           pshs    y
FAAD 10AE66           (        forth.asm):03836 (6+1)           ldy     6,s             Offset plus 2 since we just pushed Y
FAB0 2705             (        forth.asm):03837 (3)             beq     @dmrsty         NBYTES is nul
FAB2 313F             (        forth.asm):03838 (4+1)           leay    -1,y            Decrement NBYTES
FAB4 10AF66           (        forth.asm):03839 (6+1)           sty     6,s
FAB7 3520             (        forth.asm):03840 (4+2)   @dmrsty puls    y
FAB9 8120             (        forth.asm):03841 (2)     @dmasc  cmpa    #SP
FABB 2504             (        forth.asm):03842 (3)             blo     @dmnprt         Character is not printable
FABD 817E             (        forth.asm):03843 (2)             cmpa    #$7E
FABF 2302             (        forth.asm):03844 (3)             bls     @dmasis
FAC1 862E             (        forth.asm):03845 (2)     @dmnprt lda     #'.             Default character when not printable
FAC3 3410             (        forth.asm):03846 (4+2)   @dmasis pshs    x               The ASCII image is the character itself
FAC5 8E0419           (        forth.asm):03847 (3)             ldx     #TBUFF+53       Base address for the ASCII dump area
FAC8 C40F             (        forth.asm):03848 (2)             andb    #$F             Offset is B modulo 15
FACA 3A               (        forth.asm):03849 (1)             abx                     Add offset to base address
FACB A780             (        forth.asm):03850 (4+1)           sta     ,x+
FACD 3510             (        forth.asm):03851 (4+2)           puls    x
                      (        forth.asm):03852         * If B is #$F, we've just processed the last byte of a block. Print #TBUFF.
FACF C10F             (        forth.asm):03853 (2)             cmpb    #$F
FAD1 1FAE             (        forth.asm):03854 (4)             tfr     cc,e
FAD3 2608             (        forth.asm):03855 (3)             bne     @dmctd
FAD5 1F71             (        forth.asm):03856 (4)             tfr     v,x             #TBUFF to X
FAD7 6F8845           (        forth.asm):03857 (6+1)           clr     69,x
FADA BDE25F           (        forth.asm):03858 (7)             jsr     PUTS
FADD 1F20             (        forth.asm):03859 (4)     @dmctd  tfr     y,d             Restore D
FADF 104C             (        forth.asm):03860 (2)             incd
FAE1 1FEA             (        forth.asm):03861 (4)             tfr     e,cc
FAE3 269D             (        forth.asm):03862 (3)             bne     @dmmain         Proceed until end of block is reached
FAE5 6D65             (        forth.asm):03863 (5+1)           tst     5,s             NBYTES LSB
FAE7 2699             (        forth.asm):03864 (3)             bne     @dmmain
FAE9 6D64             (        forth.asm):03865 (5+1)           tst     4,s             NYTES MSB
FAEB 2695             (        forth.asm):03866 (3)             bne     @dmmain
FAED 3266             (        forth.asm):03867 (4+1)           leas    6,s             Free stack storage used by local variables
FAEF 39               (        forth.asm):03868 (4)             rts
                      (        forth.asm):03869         
                      (        forth.asm):03870         * Predicate to indicate whether or not D covers the area of interest.
                      (        forth.asm):03871         * Upon return NZ will be set iff we are pointing to the "interesting" area.
FAF0 6D63             (        forth.asm):03872 (5+1)   _DMPINT tst     3,s             STARTSEEN?
FAF2 2608             (        forth.asm):03873 (3)             bne     @strsen         Yes, check for zero remaining byte count
FAF4 10A364           (        forth.asm):03874 (6+1)           cmpd    4,s             START
FAF7 240D             (        forth.asm):03875 (3)             bhs     @ststrt         Set STARTSEEN once and for all
FAF9 1A04             (        forth.asm):03876 (2)     @retwz  orcc    #ZFLAG          Set Z flag
FAFB 39               (        forth.asm):03877 (4)             rts
                      (        forth.asm):03878         * STARTSEEN is set. Check remaining byte count.
FAFC 6D67             (        forth.asm):03879 (5+1)   @strsen tst     7,s             NBYTES LSB
FAFE 260E             (        forth.asm):03880 (3)             bne     @retwnz
FB00 6D66             (        forth.asm):03881 (5+1)           tst     6,s             NBYTES MSB
FB02 260A             (        forth.asm):03882 (3)             bne     @retwnz
FB04 20F3             (        forth.asm):03883 (3)             bra     @retwz          We are beyond the interesting area
FB06 3402             (        forth.asm):03884 (4+1)   @ststrt pshs    a
FB08 8601             (        forth.asm):03885 (2)             lda     #1
FB0A A764             (        forth.asm):03886 (4+1)           sta     4,s             Set STARTSEEN
FB0C 3502             (        forth.asm):03887 (4+1)           puls    a
FB0E 1CFB             (        forth.asm):03888 (2)     @retwnz andcc   #^ZFLAG         Clear Z flag
FB10 39               (        forth.asm):03889 (4)             rts
                      (        forth.asm):03890         
                      (        forth.asm):03891         * Print the dump header to X.
FB11 8620             (        forth.asm):03892 (2)     _DMPHDR lda     #SP
FB13 A780             (        forth.asm):03893 (4+1)           sta     ,x+
FB15 A780             (        forth.asm):03894 (4+1)           sta     ,x+
FB17 A780             (        forth.asm):03895 (4+1)           sta     ,x+
FB19 A780             (        forth.asm):03896 (4+1)           sta     ,x+
FB1B 5F               (        forth.asm):03897 (1)             clrb
FB1C A780             (        forth.asm):03898 (4+1)   @dmhlp1 sta     ,x+             Space before every 2 hex digits
FB1E 1F98             (        forth.asm):03899 (4)             tfr     b,a
FB20 BDE19D           (        forth.asm):03900 (7)             jsr     HDMP2
FB23 8620             (        forth.asm):03901 (2)             lda     #SP
FB25 5C               (        forth.asm):03902 (1)             incb
FB26 C110             (        forth.asm):03903 (2)             cmpb    #$10
FB28 26F2             (        forth.asm):03904 (3)             bne     @dmhlp1
FB2A A780             (        forth.asm):03905 (4+1)           sta     ,x+             Space before the ASCII dump
FB2C 5F               (        forth.asm):03906 (1)             clrb
FB2D 1F98             (        forth.asm):03907 (4)     @dmhlp2 tfr     b,a
FB2F BDE16B           (        forth.asm):03908 (7)             jsr     HEX1D           Offset to HEX char stored to x+
FB32 5C               (        forth.asm):03909 (1)             incb
FB33 C110             (        forth.asm):03910 (2)             cmpb    #$10
FB35 26F6             (        forth.asm):03911 (3)             bne     @dmhlp2
FB37 39               (        forth.asm):03912 (4)             rts
                      (        forth.asm):03913         
                      (        forth.asm):03914                 IFNE    SSDFEAT
FB38 02               (        forth.asm):03915         DOTTICK fcb     2               Non-standard (SwiftForth)
FB39 2E27             (        forth.asm):03916                 fcb     $2E,$27         .' ( memaddr -- )
FB3B FA40             (        forth.asm):03917                 fdb     DUMP
FB3D C7               (        forth.asm):03918                 RFCS
FB3E BDE769           (        forth.asm):03919 (7)             jsr     NPOP
FB41 1F12             (        forth.asm):03920 (4)             tfr     x,y
FB43 8E0394           (        forth.asm):03921 (3)             ldx     #HEXBUF
FB46 BDE5A7           (        forth.asm):03922 (7)             jsr     FINDSYM
FB49 8E0394           (        forth.asm):03923 (3)             ldx     #HEXBUF
FB4C 7EE25F           (        forth.asm):03924 (3)             jmp     PUTS
                      (        forth.asm):03925                 ENDC
                      (        forth.asm):03926         
                      (        forth.asm):03927         * Display a dump of the data stack in the current BASE. In Leo Brodie's
                      (        forth.asm):03928         * "Starting Forth" the data stack is printed from the bottom up. So it is here.
FB4F 02               (        forth.asm):03929         DDUMP   fcb     2               ANSI (Optional "Programming tools" word set)
FB50 2E53             (        forth.asm):03930                 fcc     '.S'            ( memaddr bcount -- )
                      (        forth.asm):03931                 IFNE    SSDFEAT
FB52 FB38             (        forth.asm):03932                 fdb     DOTTICK
                      (        forth.asm):03933                 ELSE
                      (        forth.asm):03934                 fdb     DUMP
                      (        forth.asm):03935                 ENDC
FB54 C7               (        forth.asm):03936                 RFCS
FB55 CC0290           (        forth.asm):03937 (3)             ldd     #NSTBOT
FB58 103230           (        forth.asm):03938 (4)             subr    u,d
FB5B 1044             (        forth.asm):03939 (2)             lsrd                    DEPTH is in D
FB5D 272A             (        forth.asm):03940 (3)             beq     @ndump3         Data stack is empty
FB5F 3440             (        forth.asm):03941 (4+2)           pshs    u
FB61 CE0290           (        forth.asm):03942 (3)             ldu     #NSTBOT         Pointing to the bottom of the data stack
FB64 8601             (        forth.asm):03943 (2)             lda     #1
FB66 9732             (        forth.asm):03944 (3)             sta     CVISSGN         Force a signed number conversion
FB68 3404             (        forth.asm):03945 (4+1)   @ndump1 pshs    b
FB6A AEC3             (        forth.asm):03946 (5+2)           ldx     ,--u
FB6C BDE3BB           (        forth.asm):03947 (7)             jsr     CVNSTR
FB6F 8E03E4           (        forth.asm):03948 (3)             ldx     #TBUFF
                      (        forth.asm):03949         # Skip leading spaces.
FB72 A680             (        forth.asm):03950 (4+1)   @ndump2 lda     ,x+
FB74 8120             (        forth.asm):03951 (2)             cmpa    #SP
FB76 27FA             (        forth.asm):03952 (3)             beq     @ndump2
FB78 301F             (        forth.asm):03953 (4+1)           leax    -1,x
FB7A BDE25F           (        forth.asm):03954 (7)             jsr     PUTS
FB7D 8620             (        forth.asm):03955 (2)             lda     #SP
FB7F BDE24C           (        forth.asm):03956 (7)             jsr     PUTCH
FB82 3504             (        forth.asm):03957 (4+1)           puls    b
FB84 5A               (        forth.asm):03958 (1)             decb
FB85 26E1             (        forth.asm):03959 (3)             bne     @ndump1
FB87 3540             (        forth.asm):03960 (4+2)           puls    u
FB89 39               (        forth.asm):03961 (4)     @ndump3 rts
                      (        forth.asm):03962         
FB8A 04               (        forth.asm):03963         QRYDUP  fcb     4               79-STANDARD (REQ184)
FB8B 3F445550         (        forth.asm):03964                 fcc     '?DUP'
FB8F FB4F             (        forth.asm):03965                 fdb     DDUMP
FB91 C7               (        forth.asm):03966                 RFCS
FB92 BDE769           (        forth.asm):03967 (7)             jsr     NPOP
FB95 3610             (        forth.asm):03968                 UCNPUSH                 Push back the original parameter
FB97 1037C1           (        forth.asm):03969 (4)             cmpr    0,x
FB9A 2601             (        forth.asm):03970 (3)             bne     @qrydp1
FB9C 39               (        forth.asm):03971 (4)             rts
FB9D 7EE75B           (        forth.asm):03972 (3)     @qrydp1 jmp     NPUSH           And DUP if NZ
                      (        forth.asm):03973         
FBA0 04               (        forth.asm):03974         TUCK    fcb     4               ANSI (Core ext)
FBA1 5455434B         (        forth.asm):03975                 fcc     'TUCK'          ( x1 x2 -- x2 x1 x2 ) i.e. SWAP OVER
FBA5 FB8A             (        forth.asm):03976                 fdb     QRYDUP
FBA7 C7               (        forth.asm):03977                 RFCS
FBA8 8D2F             (        forth.asm):03978                 RFXT    bsr,SWAP+7
FBAA 2073             (        forth.asm):03979                 RFXT    bra,OVER+7
                      (        forth.asm):03980         
FBAC 03               (        forth.asm):03981         NIP     fcb     3               ANSI (Core ext)
FBAD 4E4950           (        forth.asm):03982                 fcc     'NIP'           ( x1 x2 -- x2 ) i.e. SWAP DROP
FBB0 FBA0             (        forth.asm):03983                 fdb     TUCK
FBB2 C7               (        forth.asm):03984                 RFCS
FBB3 8D24             (        forth.asm):03985                 RFXT    bsr,SWAP+7
FBB5 2017             (        forth.asm):03986                 RFXT    bra,DROP+7
                      (        forth.asm):03987         
FBB7 03               (        forth.asm):03988         DUP     fcb     3               79-STANDARD (REQ205)
FBB8 445550           (        forth.asm):03989                 fcc     'DUP'
FBBB FBAC             (        forth.asm):03990                 fdb     NIP
FBBD C7               (        forth.asm):03991                 RFCS
FBBE BDE40F           (        forth.asm):03992 (7)             jsr     MIN1PST         At least one cell needs to be stacked up
FBC1 AEC4             (        forth.asm):03993 (5+0)           ldx     ,u
FBC3 7EE75B           (        forth.asm):03994 (3)             jmp     NPUSH
                      (        forth.asm):03995         
FBC6 04               (        forth.asm):03996         DROP    fcb     4               79-STANDARD (REQ233)
FBC7 44524F50         (        forth.asm):03997                 fcc     'DROP'
FBCB FBB7             (        forth.asm):03998                 fdb     DUP
FBCD C7               (        forth.asm):03999                 RFCS
FBCE 7EE769           (        forth.asm):04000 (3)             jmp     NPOP
                      (        forth.asm):04001         
FBD1 04               (        forth.asm):04002         SWAP    fcb     4               79-STANDARD (REQ230)
FBD2 53574150         (        forth.asm):04003                 fcc     'SWAP'
FBD6 FBC6             (        forth.asm):04004                 fdb     DROP
FBD8 C7               (        forth.asm):04005                 RFCS
FBD9 BDE414           (        forth.asm):04006 (7)             jsr     MIN2PST         We need at least two cells stacked up
FBDC 10ECC4           (        forth.asm):04007 (8+0)           ldq     ,u              In place SWAP
FBDF 1E06             (        forth.asm):04008 (5)             exg     d,w
FBE1 10EDC4           (        forth.asm):04009 (8+0)           stq     ,u
FBE4 39               (        forth.asm):04010 (4)             rts
                      (        forth.asm):04011         
FBE5 04               (        forth.asm):04012         PICK    fcb     4
FBE6 5049434B         (        forth.asm):04013                 fcc     'PICK'
FBEA FBD1             (        forth.asm):04014                 fdb     SWAP
FBEC C7               (        forth.asm):04015                 RFCS
FBED BDE769           (        forth.asm):04016 (7)             jsr     NPOP
FBF0 CC0290           (        forth.asm):04017 (3)     PICK1   ldd     #NSTBOT
FBF3 103230           (        forth.asm):04018 (4)             subr    u,d
FBF6 1044             (        forth.asm):04019 (2)             lsrd                    D has the data stack depth in cells
FBF8 103710           (        forth.asm):04020 (4)             cmpr    x,d
FBFB 2405             (        forth.asm):04021 (3)             bcc     @pick1
FBFD C60D             (        forth.asm):04022 (2)     ERRPCK  ldb     #13             Argument is greater than DEPTH
FBFF BDE6DE           (        forth.asm):04023 (7)             jsr     ERRHDLR         No return
FC02 1F10             (        forth.asm):04024 (4)     @pick1  tfr     x,d
FC04 104D             (        forth.asm):04025 (2)             tstd
FC06 27F5             (        forth.asm):04026 (3)             beq     ERRPCK
FC08 104A             (        forth.asm):04027 (2)             decd                    Minus 1, unlike in the Z80 implementation
FC0A 1048             (        forth.asm):04028 (2)             lsld                    Times 2
FC0C 1F31             (        forth.asm):04029 (4)             tfr     u,x
FC0E 308B             (        forth.asm):04030 (4+2)           leax    d,x
FC10 1F12             (        forth.asm):04031 (4)             tfr     x,y             For the sake of ROLL's implementation
FC12 AE84             (        forth.asm):04032 (5+0)           ldx     ,x
FC14 3610             (        forth.asm):04033                 UCNPUSH
FC16 39               (        forth.asm):04034 (4)             rts
                      (        forth.asm):04035         
FC17 04               (        forth.asm):04036         OVER    fcb     4
FC18 4F564552         (        forth.asm):04037                 fcc     'OVER'
FC1C FBE5             (        forth.asm):04038                 fdb     PICK
FC1E C7               (        forth.asm):04039                 RFCS
FC1F 8E0002           (        forth.asm):04040 (3)             ldx     #2
FC22 20CC             (        forth.asm):04041 (3)             bra     PICK1
                      (        forth.asm):04042         
FC24 04               (        forth.asm):04043         ROLL    fcb     4
FC25 524F4C4C         (        forth.asm):04044                 fcc     'ROLL'
FC29 FC17             (        forth.asm):04045                 fdb     OVER
FC2B C7               (        forth.asm):04046                 RFCS
FC2C BDE769           (        forth.asm):04047 (7)             jsr     NPOP
FC2F 1F16             (        forth.asm):04048 (4)     ROLL1   tfr     x,w
FC31 8DBD             (        forth.asm):04049 (6)             bsr     PICK1           Let PICK do the error handling
FC33 3121             (        forth.asm):04050 (4+1)           leay    1,y             Point to the LSB since we're moving backward
FC35 1F21             (        forth.asm):04051 (4)             tfr     y,x
FC37 301E             (        forth.asm):04052 (4+1)           leax    -2,x
FC39 103066           (        forth.asm):04053 (4)             addr    w,w
FC3C 113912           (        forth.asm):04054 (6+?)           tfm     x-,y-
FC3F 7EE769           (        forth.asm):04055 (3)             jmp     NPOP
                      (        forth.asm):04056         
FC42 03               (        forth.asm):04057         ROT     fcb     3
FC43 524F54           (        forth.asm):04058                 fcc     'ROT'
FC46 FC24             (        forth.asm):04059                 fdb     ROLL
FC48 C7               (        forth.asm):04060                 RFCS
FC49 8E0003           (        forth.asm):04061 (3)             ldx     #3
FC4C 20E1             (        forth.asm):04062 (3)             bra     ROLL1
                      (        forth.asm):04063         
FC4E 04               (        forth.asm):04064         MROT    fcb     4
FC4F 2D524F54         (        forth.asm):04065                 fcc     '-ROT'
FC53 FC42             (        forth.asm):04066                 fdb     ROT
FC55 C7               (        forth.asm):04067                 RFCS
FC56 8DF1             (        forth.asm):04068                 RFXT    bsr,ROT+6       XT for ROT
FC58 20EF             (        forth.asm):04069                 RFXT    bra,ROT+6       XT for ROT
                      (        forth.asm):04070         
FC5A 02               (        forth.asm):04071         CCOMMA  fcb     2               79-STANDARD (REF)
FC5B 432C             (        forth.asm):04072                 fcc     'C,'
FC5D FC4E             (        forth.asm):04073                 fdb     MROT
FC5F C7               (        forth.asm):04074                 RFCS
FC60 BDE769           (        forth.asm):04075 (7)             jsr     NPOP
FC63 1F10             (        forth.asm):04076 (4)             tfr     x,d
FC65 109E08           (        forth.asm):04077 (5)             ldy     DICEND
FC68 E7A0             (        forth.asm):04078 (4+1)           stb     ,y+
FC6A 109F08           (        forth.asm):04079 (5)             sty     DICEND
FC6D 39               (        forth.asm):04080 (4)             rts
                      (        forth.asm):04081         
FC6E 01               (        forth.asm):04082         COMMA   fcb     1               79-STANDARD (REQ143)
FC6F 2C               (        forth.asm):04083                 fcc     ','
FC70 FC5A             (        forth.asm):04084                 fdb     CCOMMA
FC72 C7               (        forth.asm):04085                 RFCS
FC73 BDE769           (        forth.asm):04086 (7)             jsr     NPOP
FC76 109E08           (        forth.asm):04087 (5)             ldy     DICEND
FC79 AFA1             (        forth.asm):04088 (5+2)           stx     ,y++
FC7B 109F08           (        forth.asm):04089 (5)             sty     DICEND
FC7E 39               (        forth.asm):04090 (4)             rts
                      (        forth.asm):04091         
FC7F 05               (        forth.asm):04092         ALLOT   fcb     5               79-STANDARD (REQ154)
FC80 414C4C4F54       (        forth.asm):04093                 fcc     'ALLOT'         ( signedbytecount -- )
FC85 FC6E             (        forth.asm):04094                 fdb     COMMA
FC87 C7               (        forth.asm):04095                 RFCS
FC88 BDE769           (        forth.asm):04096 (7)             jsr     NPOP
FC8B 109E08           (        forth.asm):04097 (5)             ldy     DICEND
FC8E 103012           (        forth.asm):04098 (4)             addr    x,y
FC91 109F08           (        forth.asm):04099 (5)             sty     DICEND
FC94 39               (        forth.asm):04100 (4)             rts
                      (        forth.asm):04101         
FC95 04               (        forth.asm):04102         FILL    fcb     4               79-STANDARD (REQ234)
FC96 46494C4C         (        forth.asm):04103                 fcc     'FILL'
FC9A FC7F             (        forth.asm):04104                 fdb     ALLOT
FC9C C7               (        forth.asm):04105                 RFCS
FC9D BDE769           (        forth.asm):04106 (7)             jsr     NPOP
FCA0 1F16             (        forth.asm):04107 (4)             tfr     x,w             Byte fill value to W
FCA2 BDE769           (        forth.asm):04108 (7)     FILL1   jsr     NPOP
FCA5 1F12             (        forth.asm):04109 (4)             tfr     x,y             Byte count to Y
FCA7 1E26             (        forth.asm):04110 (5)             exg     y,w             Byte count to W, byte fill value to Y
FCA9 BDE769           (        forth.asm):04111 (7)             jsr     NPOP            Destination address to X
FCAC 105D             (        forth.asm):04112 (2)             tstw
FCAE 2F0B             (        forth.asm):04113 (3)             ble     @filend
FCB0 1F20             (        forth.asm):04114 (4)             tfr     y,d             Byte fill value to B
FCB2 E784             (        forth.asm):04115 (4+0)           stb     ,x
FCB4 105A             (        forth.asm):04116 (2)             decw
FCB6 3101             (        forth.asm):04117 (4+1)           leay    1,x
FCB8 113812           (        forth.asm):04118 (6+?)           tfm     x+,y+
FCBB 39               (        forth.asm):04119 (4)     @filend rts
                      (        forth.asm):04120         
FCBC 06               (        forth.asm):04121         BLANKS  fcb     6               79-STANDARD (REF152)
FCBD 424C414E4B53     (        forth.asm):04122                 fcc     'BLANKS'
FCC3 FC95             (        forth.asm):04123                 fdb     FILL
FCC5 C7               (        forth.asm):04124                 RFCS
FCC6 10860020         (        forth.asm):04125 (4)             ldw     #SP
FCCA 20D6             (        forth.asm):04126 (3)             bra     FILL1
                      (        forth.asm):04127         
FCCC 06               (        forth.asm):04128         CMOVED  fcb     6               FORTH-83
FCCD 434D4F56453E     (        forth.asm):04129                 fcc     'CMOVE>'
FCD3 FCBC             (        forth.asm):04130                 fdb     BLANKS
FCD5 C7               (        forth.asm):04131                 RFCS
FCD6 BDE523           (        forth.asm):04132 (7)             jsr     ACQMOVP
FCD9 105D             (        forth.asm):04133 (2)             tstw
FCDB 270D             (        forth.asm):04134 (3)             beq     @cmovd1
FCDD 105A             (        forth.asm):04135 (2)             decw
FCDF 103061           (        forth.asm):04136 (4)             addr    w,x
FCE2 103062           (        forth.asm):04137 (4)             addr    w,y
FCE5 105C             (        forth.asm):04138 (2)             incw
FCE7 113912           (        forth.asm):04139 (6+?)           tfm     x-,y-
FCEA 39               (        forth.asm):04140 (4)     @cmovd1 rts
                      (        forth.asm):04141         
FCEB 05               (        forth.asm):04142         CMOVE   fcb     5               79-STANDARD (REQ153)
FCEC 434D4F5645       (        forth.asm):04143                 fcc     'CMOVE'
FCF1 FCCC             (        forth.asm):04144                 fdb     CMOVED
FCF3 C7               (        forth.asm):04145                 RFCS
FCF4 BDE523           (        forth.asm):04146 (7)             jsr     ACQMOVP
FCF7 113812           (        forth.asm):04147 (6+?)           tfm     x+,y+
FCFA 39               (        forth.asm):04148 (4)             rts
                      (        forth.asm):04149         
FCFB 04               (        forth.asm):04150         MOVE    fcb     4               79-STANDARD (REQ113)
FCFC 4D4F5645         (        forth.asm):04151                 fcc     'MOVE'          ( srcaddr dstaddr ncells -- )
FD00 FCEB             (        forth.asm):04152                 fdb     CMOVE
FD02 C7               (        forth.asm):04153                 RFCS
FD03 BDE523           (        forth.asm):04154 (7)             jsr     ACQMOVP
FD06 105D             (        forth.asm):04155 (2)             tstw
FD08 2F06             (        forth.asm):04156 (3)             ble     @move1
FD0A 103066           (        forth.asm):04157 (4)             addr    w,w             Convert cells to bytes
FD0D 113812           (        forth.asm):04158 (6+?)           tfm     x+,y+
FD10 39               (        forth.asm):04159 (4)     @move1  rts
                      (        forth.asm):04160         
FD11 05               (        forth.asm):04161         CELLS   fcb     5               ANSI-X3.215-1994
FD12 43454C4C53       (        forth.asm):04162                 fcc     'CELLS'
FD17 FCFB             (        forth.asm):04163                 fdb     MOVE
FD19 C7               (        forth.asm):04164                 RFCS
FD1A BDE769           (        forth.asm):04165 (7)             jsr     NPOP
FD1D 103011           (        forth.asm):04166 (4)             addr    x,x
FD20 3610             (        forth.asm):04167                 UCNPUSH
FD22 39               (        forth.asm):04168 (4)             rts
                      (        forth.asm):04169         
FD23 04               (        forth.asm):04170         LAST    fcb     4               79-STANDARD (REF)
FD24 4C415354         (        forth.asm):04171                 fcc     'LAST'
FD28 FD11             (        forth.asm):04172                 fdb     CELLS
FD2A C7               (        forth.asm):04173                 RFCS
FD2B 9E06             (        forth.asm):04174 (4)             ldx     LSTWAD
FD2D 7EE75B           (        forth.asm):04175 (3)             jmp     NPUSH
                      (        forth.asm):04176         
FD30 04               (        forth.asm):04177         HERE    fcb     4               79-STANDARD (REQ188)
FD31 48455245         (        forth.asm):04178                 fcc     'HERE'
FD35 FD23             (        forth.asm):04179                 fdb     LAST
FD37 C7               (        forth.asm):04180                 RFCS
FD38 9E08             (        forth.asm):04181 (4)             ldx     DICEND
FD3A 7EE75B           (        forth.asm):04182 (3)             jmp     NPUSH
                      (        forth.asm):04183         
FD3D 02               (        forth.asm):04184         PLUSST  fcb     2               79-STANDARD (REQ157)
FD3E 2B21             (        forth.asm):04185                 fcc     '+!'            ( incr addr -- )
FD40 FD30             (        forth.asm):04186                 fdb     HERE
FD42 C7               (        forth.asm):04187                 RFCS
FD43 BDE414           (        forth.asm):04188 (7)             jsr     MIN2PST         We need at least two cells stacked up
FD46 AEC4             (        forth.asm):04189 (5+0)           ldx     ,u              ADDR to X
FD48 EC84             (        forth.asm):04190 (5+0)           ldd     ,x              @ADDR to D
FD4A E342             (        forth.asm):04191 (5+1)           addd    2,u             Add INCR to D
FD4C ED84             (        forth.asm):04192 (5+0)   PLUSST1 std     ,x              Store the sum back to ADDR
FD4E 3344             (        forth.asm):04193 (4+1)           leau    4,u             Drop two cells from the data stack
FD50 39               (        forth.asm):04194 (4)             rts
                      (        forth.asm):04195         
FD51 03               (        forth.asm):04196         ONEPST  fcb     3               79-STANDARD (REF)
FD52 312B21           (        forth.asm):04197                 fcc     '1+!'
FD55 FD3D             (        forth.asm):04198                 fdb     PLUSST
FD57 C7               (        forth.asm):04199                 RFCS
FD58 BDE40F           (        forth.asm):04200 (7)             jsr     MIN1PST         At least one cell needs to be stacked up
FD5B AEC4             (        forth.asm):04201 (5+0)           ldx     ,u
FD5D EC84             (        forth.asm):04202 (5+0)           ldd     ,x
FD5F 104C             (        forth.asm):04203 (2)             incd
FD61 ED84             (        forth.asm):04204 (5+0)           std     ,x
FD63 3342             (        forth.asm):04205 (4+1)           leau    2,u
FD65 39               (        forth.asm):04206 (4)             rts
                      (        forth.asm):04207         
FD66 02               (        forth.asm):04208         MINUSST fcb     2               79-STANDARD (REQ157)
FD67 2D21             (        forth.asm):04209                 fcc     '-!'            ( incr addr -- )
FD69 FD51             (        forth.asm):04210                 fdb     ONEPST
FD6B C7               (        forth.asm):04211                 RFCS
FD6C BDE414           (        forth.asm):04212 (7)             jsr     MIN2PST         We need at least two cells stacked up
FD6F AEC4             (        forth.asm):04213 (5+0)           ldx     ,u              ADDR to X
FD71 EC84             (        forth.asm):04214 (5+0)           ldd     ,x              @ADDR to D
FD73 A342             (        forth.asm):04215 (5+1)           subd    2,u             Substract INCR from D
FD75 20D5             (        forth.asm):04216 (3)             bra     PLUSST1
                      (        forth.asm):04217         
FD77 02               (        forth.asm):04218         CSTORE  fcb     2               79-STANDARD (REQ219)
FD78 4321             (        forth.asm):04219                 fcc     'C!'            ( val8 addr -- )
FD7A FD66             (        forth.asm):04220                 fdb     MINUSST
FD7C C7               (        forth.asm):04221                 RFCS
FD7D BDE414           (        forth.asm):04222 (7)             jsr     MIN2PST         We need at least two cells stacked up
FD80 A643             (        forth.asm):04223 (4+1)           lda     3,u             VAL8 to A
FD82 A7D4             (        forth.asm):04224 (4+3)           sta     [,u]            Actual store to ADDR
FD84 3344             (        forth.asm):04225 (4+1)           leau    4,u             Drop two cells from the data stack
FD86 39               (        forth.asm):04226 (4)             rts
                      (        forth.asm):04227         
FD87 01               (        forth.asm):04228         STORE   fcb     1               79-STANDARD (REQ112)
FD88 21               (        forth.asm):04229                 fcc     '!'             ( data addr -- )
FD89 FD77             (        forth.asm):04230                 fdb     CSTORE
FD8B C7               (        forth.asm):04231                 RFCS
FD8C BDE414           (        forth.asm):04232 (7)             jsr     MIN2PST         At least two cells need to be stacked up
FD8F EC42             (        forth.asm):04233 (5+1)           ldd     2,u             DATA to D
FD91 EDD4             (        forth.asm):04234 (5+3)           std     [,u]            Actual store to ADDR
FD93 3344             (        forth.asm):04235 (4+1)           leau    4,u             Drop two cells from the user stack
FD95 39               (        forth.asm):04236 (4)             rts
                      (        forth.asm):04237         
FD96 02               (        forth.asm):04238         CFETCH  fcb     2               79-STANDARD (REQ156)
FD97 4340             (        forth.asm):04239                 fcc     'C@'            ( addr -- val8 )
FD99 FD87             (        forth.asm):04240                 fdb     STORE
FD9B C7               (        forth.asm):04241                 RFCS
FD9C BDE40F           (        forth.asm):04242 (7)             jsr     MIN1PST         We need at least one cell stacked up
FD9F 4F               (        forth.asm):04243 (1)             clra
FDA0 E6D4             (        forth.asm):04244 (4+3)           ldb     [,u]
FDA2 EDC4             (        forth.asm):04245 (5+0)           std     ,u
FDA4 39               (        forth.asm):04246 (4)             rts
                      (        forth.asm):04247         
FDA5 01               (        forth.asm):04248         QMARK   fcb     1               79-STANDARD (REQ194)
FDA6 3F               (        forth.asm):04249                 fcc     '?'
FDA7 FD96             (        forth.asm):04250                 fdb     CFETCH
FDA9 C7               (        forth.asm):04251                 RFCS
FDAA BD0C55           (        forth.asm):04252 (7)             jsr     RAMFTCH         Call the RAM based incarnation of @
FDAD 7EF515           (        forth.asm):04253                 RFXT    jmp,DOT+4       XT for .
                      (        forth.asm):04254         
                      (        forth.asm):04255         * End of ROM part of the builtin dictionary.
     FDB0             (        forth.asm):04256         THEEND  equ     *               This is the end, Beautiful friend
                      (        forth.asm):04257         *                               This is the end, My only friend
                      (        forth.asm):04258         
                      (        forth.asm):04259         * This transactional word is relocated to RAM, so that we can compile new
                      (        forth.asm):04260         * definitions. FORTHIN will take care of that and adjust the relevant pointers.
FDB0 01               (        forth.asm):04261         FETCH   fcb     1               79-STANDARD (REQ199)
FDB1 40               (        forth.asm):04262                 fcc     '@'             ( addr -- data )
FDB2 FDA5             (        forth.asm):04263                 fdb     QMARK
FDB4 C7               (        forth.asm):04264                 RFCS
FDB5 BDE40F           (        forth.asm):04265 (7)             jsr     MIN1PST         At least one cell needs to be stacked up
FDB8 ECD4             (        forth.asm):04266 (5+3)           ldd     [,u]
FDBA EDC4             (        forth.asm):04267 (5+0)           std     ,u              Returned through the data stack
FDBC 39               (        forth.asm):04268 (4)             rts
                      (        forth.asm):04269         
     FDBD             (        forth.asm):04270         REALEND equ     *
                      (        forth.asm):04271         
                      (        forth.asm):04272         *******************************************************************************
                      (        forth.asm):04273         * String literals.
                      (        forth.asm):04274         
                      (        forth.asm):04275         * Using CR+LF as it is Minicom's default.
                      (        forth.asm):04276         
                      (        forth.asm):04277         * Clear the screen, VT100 style.
FDBD 1B5B481B5B4A0D00 (        forth.asm):04278         CSVT100 fcb     $1B,'[','H',$1B,'[','J',CR,NUL
                      (        forth.asm):04279         
FDC5 0D0A             (        forth.asm):04280         BOOTMSG fcb     CR,LF
FDC7 5A3739466F727468 (        forth.asm):04281                 fcc     'Z79Forth 6309/I FORTH-79 Standard Sub-set'
     20363330392F4920
     464F5254482D3739
     205374616E646172
     64205375622D7365
     74
FDF0 0D0A             (        forth.asm):04282                 fcb     CR,LF
FDF2 3230323131313031 (        forth.asm):04283                 fcc     '20211101 Copyright Francois Laagel (2019)'
     20436F7079726967
     6874204672616E63
     6F6973204C616167
     656C202832303139
     29
FE1B 0D0A0D0A00       (        forth.asm):04284                 fcb     CR,LF,CR,LF,NUL
                      (        forth.asm):04285         
FE20 52414D204F4B3A20 (        forth.asm):04286         RAMOKM  fcc     'RAM OK: 32 KB'
     3332204B42
FE2D 0D0A00           (        forth.asm):04287         CRLFSTR fcb     CR,LF,NUL
                      (        forth.asm):04288         
FE30 52414D2063686563 (        forth.asm):04289         RAMFM   fcc     'RAM check failed'
     6B206661696C6564
FE40 0D0A00           (        forth.asm):04290                 fcb     CR,LF,NUL
                      (        forth.asm):04291         
                      (        forth.asm):04292                 IFEQ    CSSNTVE
FE43 206F6B           (        forth.asm):04293         OKFEEDB fcc     ' ok'           As per GNU Forth's implementation...
                      (        forth.asm):04294                 ELSE
FE46                  (        forth.asm):04295         OKFEEDB fcc     ' OK'
                      (        forth.asm):04296                 ENDC
FE46 0D0A00           (        forth.asm):04297                 fcb     CR,LF,NUL
                      (        forth.asm):04298         
                      (        forth.asm):04299         * Error messages for IODZHDL.
FE49 496C6C6567616C20 (        forth.asm):04300         IOPERRM fcn     'Illegal opcode near '
     6F70636F6465206E
     6561722000
FE5E 4469766973696F6E (        forth.asm):04301         DV0ERRM fcn     'Division by 0 near '
     2062792030206E65
     61722000
                      (        forth.asm):04302         
FE72 4461746120737461 (        forth.asm):04303         ERRMTBL fcn     'Data stack overflow'   Error 0
     636B206F76657266
     6C6F7700
FE86 4461746120737461 (        forth.asm):04304                 fcn     'Data stack underflow'  Error 1
     636B20756E646572
     666C6F7700
FE9B 556E646566696E65 (        forth.asm):04305                 fcn     'Undefined'             Error 2
     6400
FEA5 557365722041424F (        forth.asm):04306                 fcn     'User ABORT'            Error 3
     525400
FEB0 00               (        forth.asm):04307                 fcn     ''                      Error 4 (formerly "Division by zero")
FEB1 4D697373696E6720 (        forth.asm):04308                 fcn     'Missing word name'     Error 5
     776F7264206E616D
     6500
FEC3 496E636F72726563 (        forth.asm):04309                 fcn     'Incorrect STATE'       Error 6
     7420535441544500
FED3 52657475726E2073 (        forth.asm):04310                 fcn     'Return stack overflow' Error 7
     7461636B206F7665
     72666C6F7700
FEE9 52657475726E2073 (        forth.asm):04311                 fcn     'Return stack underflow' Error 8
     7461636B20756E64
     6572666C6F7700
FF00 496C6C6567616C20 (        forth.asm):04312                 fcn     'Illegal construct'     Error 9
     636F6E7374727563
     7400
FF12 417373657274696F (        forth.asm):04313                 fcn     'Assertion failed'      Error 10
     6E206661696C6564
     00
FF23 522F4F20776F7264 (        forth.asm):04314                 fcn     'R/O word'              Error 11
     00
FF2C 4D697373696E6720 (        forth.asm):04315                 fcn     'Missing delimiter'     Error 12
     64656C696D697465
     7200
FF3E 496C6C6567616C20 (        forth.asm):04316                 fcn     'Illegal argument'      Error 13
     617267756D656E74
     00
FF4F 4E6F206D61746368 (        forth.asm):04317                 fcn     'No matching CREATE'    Error 14
     696E672043524541
     544500
FF62 496E76616C696420 (        forth.asm):04318                 fcn     'Invalid BASE'          Error 15
     4241534500
FF6F 576F7264206E616D (        forth.asm):04319                 fcn     'Word name too long'    Error 16
     6520746F6F206C6F
     6E6700
FF82 494F206572726F72 (        forth.asm):04320                 fcn     'IO error'              Error 17
     00
                      (        forth.asm):04321         
                      (        forth.asm):04322         * A-list used for numeric literal base prefixes.
FF8B 24               (        forth.asm):04323         BASALST fcc     '$'             Hexadecimal prefix
FF8C 10               (        forth.asm):04324                 fcb     16
FF8D 26               (        forth.asm):04325                 fcc     '&'             Decimal prefix
FF8E 0A               (        forth.asm):04326                 fcb     10
FF8F 23               (        forth.asm):04327                 fcc     '#'             Decimal prefix (an ANSI concession)
FF90 0A               (        forth.asm):04328                 fcb     10
FF91 25               (        forth.asm):04329                 fcc     '%'             Binary prefix
FF92 02               (        forth.asm):04330                 fcb     2
FF93 40               (        forth.asm):04331                 fcc     '@'             Octal prefix
FF94 08               (        forth.asm):04332                 fcb     8
FF95 00               (        forth.asm):04333                 fcb     0               End of list marker
                      (        forth.asm):04334         
                      (        forth.asm):04335         * Under no circumstance should the following symbol be negative!
     005A             (        forth.asm):04336         AVL     equ     VECTBL-*        Available EEPROM space left
                      (        forth.asm):04337         
                      (        forth.asm):04338         *******************************************************************************
                      (        forth.asm):04339         * Interrupt vector table
                      (        forth.asm):04340                 org     VECTBL
                      (        forth.asm):04341         
FFF0 E000             (        forth.asm):04342                 fdb     IODZHDL         Illegal opcode/Division by zero trap
FFF2 E035             (        forth.asm):04343                 fdb     SWI3HDL         SWI 3 interrupt vector address
FFF4 E035             (        forth.asm):04344                 fdb     SWI2HDL         SWI 2 interrupt vector address
FFF6 E1C6             (        forth.asm):04345                 fdb     FIRQHDL         FIRQ interrupt vector address
FFF8 E035             (        forth.asm):04346                 fdb     IRQHDL          IRQ interrupt vector address
FFFA E035             (        forth.asm):04347                 fdb     SWIHDL          SWI interrupt vector address
FFFC E035             (        forth.asm):04348                 fdb     NMIHDL          NMI vector address
FFFE E037             (        forth.asm):04349                 fdb     RSTHDL          RESET vector address
                      (        forth.asm):04350         

Symbol Table:
[ G] _BS                              E276
[ G] _DMPHDR                          FB11
[ G] _DMPINT                          FAF0
[ G] _INTERP                          E0CF
[ G] ABORT                            F062
[ G] ABS                              EEF9
[ G] AC8N1                            0014
[ G] ACCEPT                           F664
[ G] ACDIV16                          0001
[ G] ACIACTL                          D800
[ G] ACIADAT                          D801
[ G] ACIISVC                          0080
[ G] ACIRDRF                          0001
[ G] ACIRSET                          0043
[ G] ACIRTS0                          0095
[ G] ACIRTS1                          00D5
[ G] ACITDRE                          0002
[ G] ACQMOVP                          E523
[ G] ACQVMRA                          E526
[ G] ACRDINT                          0080
[ G] ACRST                            0003
[ G] ACRTS0                           0000
[ G] ACRTS1                           0040
[ G] ADDS                             E1AC
[ G] ADIV16                           E17F
[ G] AGAIN                            EF32
[ G] ALLOT                            FC7F
[ G] AND                              EDE6
[ G] AVL                              005A
[ G] BASALST                          FF8B
[ G] BASBKUP                          0128
[ G] BASE                             F9F8
[ G] BCSOPC                           2503
[ G] BDICEND                          010C
[ G] BDIRTY                           0004
[ G] BEGIN                            EF24
[ G] BFDISP                           0410
[ G] BIN                              FA06
[ G] BINUSE                           0001
[ G] BKCHAR                           F1E2
[ G] BKIN2PT                          E7AF
[ G] BKQUOT                           F0B0
[ G] BKSLSH                           F298
[ G] BL                               F581
[ G] BLANKS                           FCBC
[ G] BLK                              E9E5
[ G] BLKSIZ                           0400
[ G] BLOCK                            E9B6
[ G] BLSTWAD                          010A
[ G] BMAPPD                           0002
[ G] BNEOPC                           2603
[ G] BOBLKNO                          0402
[ G] BOFLAGS                          0401
[ G] BOOTMSG                          FDC5
[ G] BOTERM                           0400
[ G] BS                               0008
[ G] BSBFADR                          011C
[ G] BUF0                             0430
[ G] BUF1                             0840
[ G] BUFFER                           E969
[ G] BYE                              F1D8
[ G] CCOMMA                           FC5A
[ G] CELLS                            FD11
[ G] CF1BKRD                          E8B8
[ G] CF1BKWR                          E8D3
[ G] CF1BPRE                          E89B
[ G] CF1SRD                           E869
[ G] CF1SWR                           E886
[ G] CFANTHS                          E814
[ G] CFBASE                           C000
[ G] CFBSYB                           0080
[ G] CFCARDP                          0137
[ G] CFCHIGR                          C005
[ G] CFCLOWR                          C004
[ G] CFCMDIS                          E7F9
[ G] CFCMMIR                          0138
[ G] CFCOMDR                          C007
[ G] CFDATAR                          C000
[ G] CFDRHDR                          C006
[ G] CFDRQB                           0008
[ G] CFDRSEL                          E80B
[ G] CFDSCB                           0010
[ G] CFDWFB                           0020
[ G] CFERRB                           0001
[ G] CFERRCD                          0139
[ G] CFERRCK                          E7EC
[ G] CFERROR                          C001
[ G] CFETCH                           FD96
[ G] CFFEATR                          C001
[ G] CFIDDEV                          00EC
[ G] CFINIT                           E832
[ G] CFLAG                            0001
[ G] CFR1SRA                          E885
[ G] CFRDY                            E7D6
[ G] CFRDYB                           0040
[ G] CFRSCTS                          0020
[ G] CFSCNTR                          C002
[ G] CFSCSZ                           0200
[ G] CFSETFT                          00EF
[ G] CFSNUMR                          C003
[ G] CFSTATR                          C007
[ G] CFWAIT                           E7CE
[ G] CFWSCTS                          0030
[ G] CHAR                             F1F1
[ G] CHKNDPT                          E404
[ G] CHKRTS                           E149
[ G] CKBASE                           E351
[ G] CKBASRA                          E361
[ G] CKDPTRA                          E40F
[ G] CKNBPFX                          E324
[ G] CMDBFSZ                          0084
[ G] CMDBUF                           0310
[ G] CMDLNSZ                          0129
[ G] CMOVE                            FCEB
[ G] CMOVED                           FCCC
[ G] CMP2                             E50F
[ G] CMP2RA                           E512
[ G] CMPCOM1                          F10C
[ G] CMPCOMA                          F0FD
[ G] COM                              EDFA
[ G] COM0                             EE01
[ G] COMMA                            FC6E
[ G] COMP                             E11C
[ G] COMPC                            F10F
[ G] COMPLRA                          E132
[ G] COMPR                            F127
[ G] CONS                             EB61
[ G] CONTIND                          F70F
[ G] COUNT                            F5FA
[ G] CR                               000D
[ G] CREAT0                           EAF0
[ G] CREAT1                           EB08
[ G] CREATE                           EAE6
[ G] CRLF                             F5C6
[ G] CRLFSTR                          FE2D
[ G] CSSNTVE                          0000
[ G] CSTORE                           FD77
[ G] CSUMFLM                          EC4E
[ G] CSVT100                          FDBD
[ G] CURTOKL                          0133
[ G] CVISSGN                          0132
[ G] CVNSTR                           E3BB
[ G] CVT                              F454
[ G] CVT0                             F45B
[ G] CVT1                             F463
[ G] CVTB                             F504
[ G] CVTE                             F408
[ G] CVTFCN                           0130
[ G] DASHTR                           F610
[ G] DDUMP                            FB4F
[ G] DEBUG                            0000
[ G] DECIMAL                          FA22
[ G] DEFFLG                           0135
[ G] DEFFLM                           0040
[ G] DEPTH                            EAD0
[ G] DEV0                             C000
[ G] DEV1                             C400
[ G] DEV2                             C800
[ G] DEV3                             CC00
[ G] DEV4                             D000
[ G] DEV5                             D400
[ G] DEV6                             D800
[ G] DEV7                             DC00
[ G] DICEND                           0108
[ G] DIFF                             ED86
[ G] DIV                              F85A
[ G] DIV1                             F863
[ G] DIVFCN                           012D
[ G] DLESS                            F36C
[ G] DNEG                             F33C
[ G] DO                               EC65
[ G] DOES                             EB10
[ G] DOESEX                           EB1F
[ G] DOEX                             EC78
[ G] DOT                              F510
[ G] DOTR                             F53A
[ G] DOTR0                            F544
[ G] DOTTICK                          FB38
[ G] DPLUS                            F31D
[ G] DPOPRA                           E777
[ G] DPSHRA                           E768
[ G] DROP                             FBC6
[ G] DUMP                             FA40
[ G] DUP                              FBB7
[ G] DV0ERRM                          FE5E
[ G] DZEQ                             F35F
[ G] EBUFS                            E8EE
[ G] ELSE                             ED3A
[ G] EMIT                             F769
[ G] EMPT1B                           E2F9
[ G] EMPTYB                           E2F1
[ G] EMXASXT                          E15D
[ G] END                              EF9B
[ G] EQ                               ED6D
[ G] ERRHD1                           E6E1
[ G] ERRHDLR                          E6DE
[ G] ERRMTBL                          FE72
[ G] ERRPCK                           FBFD
[ G] ETX                              0003
[ G] EXCT                             F1BE
[ G] EXIT                             EF50
[ G] EXPCT1                           F655
[ G] EXPECT                           F64B
[ G] F83DIVF                          012E
[ G] FDCTSYM                          E531
[ G] FDIVADJ                          F897
[ G] FETCH                            FDB0
[ G] FFLAG                            0040
[ G] FILL                             FC95
[ G] FILL1                            FCA2
[ G] FIND                             F076
[ G] FINDSYM                          E5A7
[ G] FIRQHDL                          E1C6
[ G] FLUSH                            E943
[ G] FNDPLD                           0110
[ G] FORGET                           F16F
[ G] FORTHIN                          E2C5
[ G] GETCH                            E223
[ G] GETS                             E282
[ G] HDMP2                            E19D
[ G] HDMP4                            E184
[ G] HDRCSUM                          EBF8
[ G] HDRSKIP                          EBEE
[ G] HERE                             FD30
[ G] HEX                              FA33
[ G] HEX1D                            E16B
[ G] HEXBFSZ                          0050
[ G] HEXBUF                           0394
[ G] HOLD                             F438
[ G] HT                               0009
[ G] HVCONV                           0000
[ G] ICHECK                           EC04
[ G] IF                               ECF9
[ G] IFEX                             ED21
[ G] ILLOPC                           00C7
[ G] IMDFLG                           0134
[ G] IMDFLM                           0080
[ G] IMMED                            EBA8
[ G] IMMED1                           EBB7
[ G] INDEX                            EA27
[ G] INDI                             F000
[ G] INDIP                            F025
[ G] INDJ                             F02F
[ G] INDJP                            F038
[ G] INDK                             F042
[ G] INF                              EEB8
[ G] INIT                             E047
[ G] INSBPAD                          F4F1
[ G] INTERP                           E0B7
[ G] INTISRA                          E10A
[ G] INTRPRA                          E117
[ G] INVERT                           EE0D
[ G] IODZHDL                          E000
[ G] IOERR                            E880
[ G] IOPERRM                          FE49
[ G] IOSTRT                           C000
[ G] IRDPTH                           012B
[ G] IRQHDL                           E035
[ G] ISNEGF                           0131
[ G] JMPOPC                           007E
[ G] JSRLAST                          0114
[ G] JSROPC                           00BD
[ G] KEY                              F757
[ G] KEYP                             F744
[ G] LAST                             FD23
[ G] LBRACK                           F0A8
[ G] LDXOPC                           008E
[ G] LEAVE                            EFEB
[ G] LF                               000A
[ G] LINE                             EA0C
[ G] LIST                             EA5B
[ G] LITER                            E4F3
[ G] LITERAL                          EB3D
[ G] LOAD                             F69E
[ G] LOAD1                            F6AF
[ G] LOCWRT                           E491
[ G] LOOP                             EC81
[ G] LOOP1                            EC8C
[ G] LOOPEX                           ECA8
[ G] LPAR                             F25E
[ G] LSTWAD                           0106
[ G] LWMNRA                           E4A7
[ G] MAX                              EEC7
[ G] MDIV                             F8B1
[ G] MILLIS                           F729
[ G] MILLIS1                          F738
[ G] MIN                              EEE0
[ G] MIN1PST                          E40F
[ G] MIN2PST                          E414
[ G] MIN3PST                          E419
[ G] MIN4PST                          E41E
[ G] MINTLRA                          E0CD
[ G] MINUS                            F7AD
[ G] MINUSST                          FD66
[ G] MOD                              F8A4
[ G] MONFLM                           0020
[ G] MONITOR                          EBD1
[ G] MORE                             E0E5
[ G] MOVE                             FCFB
[ G] MROT                             FC4E
[ G] MRUBUFA                          011A
[ G] MSLCNT                           031A
[ G] MULT                             F827
[ G] NAK                              0015
[ G] NBCTFB0                          0136
[ G] NCLR                             EAB4
[ G] NDCTWKS                          E5CD
[ G] NEGATE                           EF10
[ G] NFLAG                            0008
[ G] NIP                              FBAC
[ G] NMCVCRA                          E144
[ G] NMCVIRA                          E0E0
[ G] NMIHDL                           E035
[ G] NOT                              EE65
[ G] NPOP                             E769
[ G] NPUSH                            E75B
[ G] NSTBOT                           0290
[ G] NSTKSZ                           00C0
[ G] NSTTOP                           01D0
[ G] NUL                              0000
[ G] NULP                             EE4D
[ G] NUMCVRA                          E3BA
[ G] NUMCVT                           E361
[ G] NXTBLK                           F6F4
[ G] NXTBLK1                          F6FF
[ G] OCTAL                            FA13
[ G] OKFEEDB                          FE43
[ G] ONEL                             F7E9
[ G] ONEM                             F7BE
[ G] ONEP                             F78C
[ G] ONEPST                           FD51
[ G] OR                               EDD3
[ G] OVER                             FC17
[ G] PAD                              F5CF
[ G] PADBSZ                           0051
[ G] PADBUF                           017E
[ G] PAGE                             F5B8
[ G] PAYLOAD                          F909
[ G] PICK                             FBE5
[ G] PICK1                            FBF0
[ G] PLOAD                            010E
[ G] PLOOP                            ECAD
[ G] PLOOPEX                          ECBB
[ G] PLOPEX1                          ECBE
[ G] PLUS                             F77B
[ G] PLUSST                           FD3D
[ G] PLUSST1                          FD4C
[ G] POSTPON                          F0BC
[ G] pragma                           0000
[ G] PRBLKIN                          E6B9
[ G] PSTR                             F2B6
[ G] ptop0                            F519
[ G] PUTCH                            E24C
[ G] PUTCR                            E26C
[ G] PUTS                             E25F
[ G] QMARK                            FDA5
[ G] QRYDUP                           FB8A
[ G] QUIT                             F04B
[ G] RAMCHK                           E057
[ G] RAMFAIL                          E069
[ G] RAMFM                            FE30
[SG] RAMFTCH                          0C55
[SG] RAMFTCH                          0C54
[ G] RAMOK                            E07B
[ G] RAMOKM                           FE20
[ G] RAMSIZE                          8000
[ G] RAMSTRT                          0000
[ G] RBRACK                           F09E
[ G] RCLR                             EAC0
[ G] RDEPTH                           012A
[ G] REALEND                          FDBD
[ G] RECADDR                          0112
[ G] RECURSE                          F15F
[ G] RELFEAT                          0001
[ G] REPEAT                           EFB0
[ G] RFETCH                           F01D
[ G] RFROM                            EFD3
[ G] ROLL                             FC24
[ G] ROLL1                            FC2F
[ G] ROMSTRT                          E000
[ G] ROT                              FC42
[ G] RPICKN                           F007
[ G] RPOP                             E796
[ G] RPOPRA                           E7AF
[ G] RPSHRA                           E795
[ G] RPUSH                            E778
[ G] RSBSPFX                          E34A
[ G] RSP                              0100
[ G] RSTBOT                           0310
[ G] RSTHDL                           E037
[ G] RSTKSZ                           0080
[ G] RSTRCT                           EBC1
[ G] RSTTOP                           0290
[ G] RTSOPC                           0039
[ G] RTSREMV                          012C
[ G] SAVBUF                           E902
[ G] SCNETOK                          E312
[ G] SCNSTOK                          E304
[ G] SCR                              E9FF
[ G] SERBCNT                          013C
[ G] SERBDEQ                          013B
[ G] SERBENQ                          013A
[ G] SERBSZ                           0040
[ G] SERBUF                           013D
[ G] SHARPS                           F448
[ G] SHIFT                            F7FF
[ G] SIGN                             F421
[ G] SINFEQ                           EDA0
[ G] SLEN                             E1B7
[ G] SOURCE                           F27A
[ G] SP                               0020
[ G] SPACE                            F58D
[ G] SPACES                           F59B
[ G] SQUOTE                           F2CB
[ G] SSDFEAT                          0001
[ G] STATE                            F9E9
[ G] STOD                             EA9A
[ G] STORE                            FD87
[ G] STRSL1                           F8C7
[ G] STRSLMD                          F8F2
[ G] STRSLSH                          F8BD
[ G] STSLFCN                          012F
[ G] SUP                              EEA9
[ G] SWAP                             FBD1
[ G] SWDIC                            E423
[ G] SWI2HDL                          E035
[ G] SWI3HDL                          E035
[ G] SWIHDL                           E035
[ G] SYNCRA                           E233
[ G] SYSSTK                           F8FF
[ G] TBUFF                            03E4
[ G] TBUFSZ                           0048
[ G] TERPRET                          F674
[ G] THEEND                           FDB0
[ G] THEN                             ED5B
[ G] THRU                             F6D2
[ G] TOIN                             E9F2
[ G] TOKENEP                          0104
[ G] TOKENSP                          0102
[ G] TOR                              EFDF
[ G] TUCK                             FBA0
[ G] TWODIV                           F84A
[ G] TWODROP                          F3BB
[ G] TWODUP                           F3CA
[ G] TWOFTCH                          F3F4
[ G] TWOL                             F7F4
[ G] TWOM                             F7CE
[ G] TWOOVER                          F385
[ G] TWOP                             F79C
[ G] TWOSTOR                          F3E2
[ G] TWOSWAP                          F39E
[ G] TWOTIM                           F83A
[ G] TYPE                             F5DC
[ G] UBASE                            011E
[ G] UBLK                             0124
[ G] UDOT                             F530
[ G] UDOTR                            F576
[ G] UINF                             EE7E
[ G] UNLESS                           ED28
[ G] UNLOOP                           ECE9
[ G] UNTIL                            EF72
[ G] UPDATE                           E94E
[ G] USCR                             0126
[ G] USTATE                           0120
[ G] USUP                             EE6E
[ G] UTOIN                            0122
[ G] VARCON                           E505
[ G] VARCON1                          E507
[ G] VARCON2                          E50A
[ G] VARI                             EB83
[ G] VARSPC                           0100
[ G] VECTBL                           FFF0
[ G] VLIST                            F919
[ G] VLPRVEP                          0116
[ G] VLPRVHD                          0118
[ G] WBIFDRT                          E91A
[ G] WDICSPC                          0C50
[ G] WHILE                            EFA4
[ G] WITHIN                           EE8E
[ G] WORD                             F21A
[ G] WRLNMSK                          001F
[ G] WTOOLNG                          E4C4
[ G] XMITOK                           017D
[ G] XOFF                             0013
[ G] XON                              0011
[ G] XOR                              EDBC
[ G] XOR1                             EDCE
[ G] ZEROL                            F7DF
[ G] ZFLAG                            0004
[ G] ZGREAT                           EE19
[ G] ZLESS                            EE33
