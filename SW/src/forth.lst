                      (        forth.asm):00001         * 6309 Forth based on my 1984/07/16 TRS-80 Model 1 level II ROM implementation.
                      (        forth.asm):00002         *
                      (        forth.asm):00003         * This work is dedicated to Alain Pinaud, author of "Programmer en Forth"
                      (        forth.asm):00004         * published by Editions du P.S.I. in 1983--i.e. my virtual mentor in the field.
                      (        forth.asm):00005         * Special thanks go William Astle for his fantastic LW Tools utility set and
                      (        forth.asm):00006         * to Robert Lipe for his advice on serial line handling. Apache subversion
                      (        forth.asm):00007         * and the sdiff utility also were on my side all the time.
                      (        forth.asm):00008         *
                      (        forth.asm):00009         * Also credited for their help: Justin Poirier (seminal HW design), Daniel
                      (        forth.asm):00010         * Tufvesson (original CompactFlash interface), Peter Minuth (general Forth
                      (        forth.asm):00011         * guruness), Paul E. Bennett (ANSI compatibility advice); Michel Jean, Bill
                      (        forth.asm):00012         * Ragsdale, Pablo Hugo Reda, Demitri Peynado and Bernd Paysan for contributed
                      (        forth.asm):00013         * application level code; Carsten Strotmann for most of the benchmarking code
                      (        forth.asm):00014         * (see https://theultimatebenchmark.org/); Gerry Jackson and Steve R. Palmer
                      (        forth.asm):00015         * (see https://github.com/gerryjackson/forth2012-test-suite) for selected
                      (        forth.asm):00016         * bits and pieces of the Forth2012 test suite (see https://forth-standard.org/).
                      (        forth.asm):00017         *
                      (        forth.asm):00018         * This is a native Forth. Not a threaded interpretive implementation.
                      (        forth.asm):00019         * Worth noticing is the fact that the return stack does not hold return
                      (        forth.asm):00020         * addresses at all. All what is stored there is loop indexes and control
                      (        forth.asm):00021         * structures jump addresses. Actual return addresses are kept in the system
                      (        forth.asm):00022         * stack. All in all, this is the result of the work of a 19 year old guy,
                      (        forth.asm):00023         * heavily revisited 35 years later. Some quirks remain that prevent me
                      (        forth.asm):00024         * from offering the full required set--not to mention the choice of using
                      (        forth.asm):00025         * an 8K EEPROM. The downside of this implementation is that the generated
                      (        forth.asm):00026         * code is about 30% larger than a threaded interpretive implementation
                      (        forth.asm):00027         * would be. So it goes...
                      (        forth.asm):00028         *
                      (        forth.asm):00029         * The code generated is limited to a very small instruction set:
                      (        forth.asm):00030         *
                      (        forth.asm):00031         * LDXOPC        $8E     LDX (immediate)
                      (        forth.asm):00032         * JMPOPC        $7E     JMP (extended)
                      (        forth.asm):00033         * JSROPC        $BD     JSR (extended)
                      (        forth.asm):00034         * RTSOPC        $39     RTS (inherent)
                      (        forth.asm):00035         * BCSOPC        $2503   BCS *+5 (relative) Used in LOOP, +LOOP
                      (        forth.asm):00036         * BNEOPC        $2603   BNE *+5 (relative) Used in IF, UNTIL
                      (        forth.asm):00037         *
                      (        forth.asm):00038         * On error, the system stack pointer is reset. The return stack also is
                      (        forth.asm):00039         * but the data stack will be in the same state as when the error occurred.
                      (        forth.asm):00040         * ABORT and QUIT enforce their own 79-STANDARD behaviour.
                      (        forth.asm):00041         *
                      (        forth.asm):00042         * The 79-STANDARD Forth specification can be downloaded from
                      (        forth.asm):00043         * https://www.complang.tuwien.ac.at/forth/fth79std/FORTH-79.TXT
                      (        forth.asm):00044         *
                      (        forth.asm):00045         * Additionally, this implementation provides a few FORTH-83 words. Those
                      (        forth.asm):00046         * words are CMOVE> and RECURSE. See
                      (        forth.asm):00047         * http://forth.sourceforge.net/standard/fst83/FORTH-83.PRN
                      (        forth.asm):00048         * Floored division has been implemented on the top of the processor's native
                      (        forth.asm):00049         * symmetric operation (credits to David Frech). This results in a slight
                      (        forth.asm):00050         * performance loss but helps a lot with compatibility with FORTH-83 and ANSI
                      (        forth.asm):00051         * code.
                      (        forth.asm):00052         *
                      (        forth.asm):00053         * \ ['] [CHAR] .S ACCEPT CELLS CHAR COMPILE, INVERT KEY? NIP POSTPONE S>D S"
                      (        forth.asm):00054         * SOURCE TUCK U> * UNLOOP and WITHIN have been borrowed from the ANSI draft 6
                      (        forth.asm):00055         * specification. See http://www.forth.org/svfig/Win32Forth/DPANS94.txt
                      (        forth.asm):00056         *
                      (        forth.asm):00057         * RESTRICT is non-standard. It comes from GNU Forth (VolksForth). The " OK"
                      (        forth.asm):00058         * non-prompt string also does, by the way. Thanks to Anton Ertl for his terse
                      (        forth.asm):00059         * yet valuable input.
                      (        forth.asm):00060         *
                      (        forth.asm):00061         * .' (dot-tick) is non-standard. It comes from SwiftForth. It will be supported
                      (        forth.asm):00062         * whether or not the symbolic stack dump has been configured (see SSDFEAT in
                      (        forth.asm):00063         * constants.asm). However, please note that effective symbolic references will
                      (        forth.asm):00064         * be resolved only if the feature was enabled at compilation time. Otherwise
                      (        forth.asm):00065         * a simple HEX print of the cell at the top of the data stack will be
                      (        forth.asm):00066         * performed. This is meant to support Forth source code that does not depend
                      (        forth.asm):00067         * on the feature vector (see examples/dis.4th).
                      (        forth.asm):00068         *
                      (        forth.asm):00069         * MONITOR and ICHECK are also non-standard. They are intended to maintain and
                      (        forth.asm):00070         * verify the integrity of a checksum of the code section of RAM resident
                      (        forth.asm):00071         * words, with the exception of VARIABLEs and CREATEd words. CREATEd words,
                      (        forth.asm):00072         * if subject to the MONITOR treatment will also carry a code section
                      (        forth.asm):00073         * checksum, although this is not the default behaviour. The checksum will
                      (        forth.asm):00074         * consist in an extra byte added to every word's header. MONITOR and ICHECK
                      (        forth.asm):00075         * will be available whether or not the reliability feature has been configured
                      (        forth.asm):00076         * (see RELFEAT in constants.asm). They will only carry effective semantics
                      (        forth.asm):00077         * if the feature was actually enabled at compilation time. This is meant to
                      (        forth.asm):00078         * support Forth source code that does not depend on the feature vector.
                      (        forth.asm):00079         *
                      (        forth.asm):00080         * Experimental MC146818 RTC support: the feature is disabled by default
                      (        forth.asm):00081         * (see RTCFEAT in constants.asm) because it relies on undocumented schematics.
                      (        forth.asm):00082         * Also, the required underlying circuitry is not intended to ever become an
                      (        forth.asm):00083         * integral part of the Z79Forth reference board itself. Some better designed
                      (        forth.asm):00084         * form of it might eventually surface in the form of an extension specification.
                      (        forth.asm):00085         * At the time of this writing this is just a proof of concept, but whether or
                      (        forth.asm):00086         * not the feature is enabled, three extra words will be added to the dictionary.
                      (        forth.asm):00087         * They are RTC@ RTC! and TICKS They can be safely ignored.
                      (        forth.asm):00088         *
                      (        forth.asm):00089         * Forth source code portability note:
                      (        forth.asm):00090         * Because Z79Forth does not use the return stack to store return addresses,
                      (        forth.asm):00091         * it makes it quite easy to write code that is not readily portable to classic
                      (        forth.asm):00092         * threaded interpretive implementations. The resulting code will be simpler but
                      (        forth.asm):00093         * portability will be limited.
                      (        forth.asm):00094         *
                      (        forth.asm):00095         * Miscellaneous notes: RA stands for return address; EP for entry point.
                      (        forth.asm):00096         * CF is a shortcut for CompactFlash. TOS means top of the data/normal stack.
                      (        forth.asm):00097         * Occasionally, CFA is used for code field address which, in this
                      (        forth.asm):00098         * implementation, is a synonym for compilation address. XT means execution
                      (        forth.asm):00099         * token--the ANSI term for a compilation address. MSC stands for most
                      (        forth.asm):00100         * significant cell; LSC for least significant cell.
                      (        forth.asm):00101         *
                      (        forth.asm):00102         * The complete guide to the HD6309 extended instruction set can be found at:
                      (        forth.asm):00103         * https://cyberabi.ipower.com/Downloads/The_6309_Book.pdf. For convenience,
                      (        forth.asm):00104         * and with the author's explicit agreement, this document has been included
                      (        forth.asm):00105         * in this distribution. This is recommended reading for anyone altering this
                      (        forth.asm):00106         * code or trying to make some sense of it!!!
                      (        forth.asm):00107         *
                      (        forth.asm):00108         * This whole effort started out as a porting endeavour and ended up being a
                      (        forth.asm):00109         * substantial rewrite, trying to take advantage of the features of the 6309
                      (        forth.asm):00110         * as much as possible. The primary goals of this implementation are:
                      (        forth.asm):00111         * reliability, performance and code compactness. A number of bugs in the
                      (        forth.asm):00112         * original code have been fixed--some remain for sure!
                      (        forth.asm):00113         *
                      (        forth.asm):00114         * Obligatory literary reference:
                      (        forth.asm):00115         * "The paper is very heavy going, and I should never have read it, had I not
                      (        forth.asm):00116         * written it myself." John E. Littlewood (1885-1977).
                      (        forth.asm):00117         *
                      (        forth.asm):00118         * The original soundtrack for this work is available at:
                      (        forth.asm):00119         * https://youtu.be/YqXZtGyFyDo?t=4023 (J.S. Bach BWV 1080, contrapunctus 14).
                      (        forth.asm):00120         
0000                  (        forth.asm):00121         pragma  opt cd,operandsizewarning
                      (        forth.asm):00122         
                      (        forth.asm):00123                 include constants.asm
                      (    constants.asm):00001         * Begin tunable parameters section.
                      (    constants.asm):00002         
     0000             (    constants.asm):00003         CSSNTVE equ     0               Words and HEX numbers are case sensitive if NZ
     0001             (    constants.asm):00004         SSDFEAT equ     1               Set to 1 to enable the symbolic stack dump feat.
     0001             (    constants.asm):00005         RELFEAT set     1               Set to 1 to enable the reliability feature
                      (    constants.asm):00006         *                               Caution: when this is enabled, you can no
                      (    constants.asm):00007         *                               longer fit a DEBUG image into an 8 KB EEPROM
     0000             (    constants.asm):00008         RTCFEAT equ     0               Cool but the reliability feature must go...
     0000             (    constants.asm):00009         DEBUG   equ     0               Enforce assertions and miscellaneous checks
     0001             (    constants.asm):00010         HVNMI   equ     1               NMI handler support
     0000             (    constants.asm):00011         HVNMI2  equ     0               NMI handler support (async input debugging)
                      (    constants.asm):00012         * Loop count for MS. This is busy waiting, so we depend on the CPU clock speed.
     031A             (    constants.asm):00013         MSLCNT  equ     794             at 4 MHz native mode
                      (    constants.asm):00014         *MSLCNT equ     994             at 5 MHz native mode
                      (    constants.asm):00015         
                      (    constants.asm):00016         * End tunable parameters section.
                      (    constants.asm):00017         
                      (    constants.asm):00018                 IFNE    RTCFEAT
0000                  (    constants.asm):00019         RELFEAT set     0               RTCFEAT disables RELFEAT
                      (    constants.asm):00020                 ELSE
                      (    constants.asm):00021                 IFNE    HVNMI
                      (    constants.asm):00022                 IFNE    HVNMI2
0000                  (    constants.asm):00023         RELFEAT set     0               HVNMI and HVNMI2 disable RELFEAT
                      (    constants.asm):00024                 ENDC                    HVNMI2
                      (    constants.asm):00025                 ENDC                    HVNMI
                      (    constants.asm):00026                 ENDC                    RTCFEAT
                      (    constants.asm):00027         
                      (    constants.asm):00028         * Memory map.
     0000             (    constants.asm):00029         RAMSTRT equ     $0000
     8000             (    constants.asm):00030         RAMSIZE equ     $8000
     C000             (    constants.asm):00031         IOSTRT  equ     $C000
     E000             (    constants.asm):00032         ROMSTRT equ     $E000
     FFF0             (    constants.asm):00033         VECTBL  equ     $FFF0
                      (    constants.asm):00034         
                      (    constants.asm):00035         * Base address for global variables (direct page addressed).
     0100             (    constants.asm):00036         VARSPC  equ     $100
                      (    constants.asm):00037         
                      (    constants.asm):00038         * The 74HCT138 (U7) IO address decoder maps one 1 KB area per usable device.
     C000             (    constants.asm):00039         DEV0    equ     $C000           Compact Flash memory module (optional)
     C400             (    constants.asm):00040         DEV1    equ     $C400
     C800             (    constants.asm):00041         DEV2    equ     $C800
     CC00             (    constants.asm):00042         DEV3    equ     $CC00
     D000             (    constants.asm):00043         DEV4    equ     $D000
     D400             (    constants.asm):00044         DEV5    equ     $D400           MC146818 RTC (optional)
     D800             (    constants.asm):00045         DEV6    equ     $D800           HD63B50 unit 0
     DC00             (    constants.asm):00046         DEV7    equ     $DC00
                      (    constants.asm):00047         
     D800             (    constants.asm):00048         ACIACTL equ     DEV6
     D801             (    constants.asm):00049         ACIADAT equ     DEV6+1
                      (    constants.asm):00050         
                      (    constants.asm):00051         * ACIA control register bits.
     0003             (    constants.asm):00052         ACRST   equ     %00000011       ACIA master reset
                      (    constants.asm):00053         
                      (    constants.asm):00054         * 1.84320 MHz Y1: 115200 bps in the direct path, 38400 bps in the DIV3 path
     0001             (    constants.asm):00055         ACDIV16 equ     %00000001       ACIA div 16
                      (    constants.asm):00056         
     0014             (    constants.asm):00057         AC8N1   equ     %00010100       ACIA 8N1
     0000             (    constants.asm):00058         ACRTS0  equ     %00000000       ACIA RTS# low
     0040             (    constants.asm):00059         ACRTS1  equ     %01000000       ACIA RTS# high
     0080             (    constants.asm):00060         ACRDINT equ     %10000000       IRQ on RDRF
                      (    constants.asm):00061         
     0043             (    constants.asm):00062         ACIRSET equ     ACRTS1|ACRST
     00D5             (    constants.asm):00063         ACIRTS1 equ     ACRTS1|ACRDINT|AC8N1|ACDIV16
     0095             (    constants.asm):00064         ACIRTS0 equ     ACRTS0|ACRDINT|AC8N1|ACDIV16
                      (    constants.asm):00065         
                      (    constants.asm):00066         * ACIA status register bits.
     0001             (    constants.asm):00067         ACIRDRF equ     %00000001       Receive data register full
     0002             (    constants.asm):00068         ACITDRE equ     %00000010       Transmit data register empty
     0020             (    constants.asm):00069         ACIOVRN equ     %00100000       Overrun status register bit
     0080             (    constants.asm):00070         ACIISVC equ     %10000000       Interrupt needs servicing
                      (    constants.asm):00071         
                      (    constants.asm):00072         * Compact Flash parameters.
     C000             (    constants.asm):00073         CFBASE  equ     DEV0
     C000             (    constants.asm):00074         CFDATAR equ     CFBASE          R/W data register
     C001             (    constants.asm):00075         CFERROR equ     CFBASE+1        RO error register
     C001             (    constants.asm):00076         CFFEATR equ     CFBASE+1        WO features register
     C002             (    constants.asm):00077         CFSCNTR equ     CFBASE+2        R/W sector count register
     C003             (    constants.asm):00078         CFSNUMR equ     CFBASE+3        R/W sector number register
     C004             (    constants.asm):00079         CFCLOWR equ     CFBASE+4        R/W cylinder low register
     C005             (    constants.asm):00080         CFCHIGR equ     CFBASE+5        R/W cylinder high register
     C006             (    constants.asm):00081         CFDRHDR equ     CFBASE+6        R/W drive/head register
     C007             (    constants.asm):00082         CFSTATR equ     CFBASE+7        RO status register
     C007             (    constants.asm):00083         CFCOMDR equ     CFBASE+7        WO command register
                      (    constants.asm):00084         
                      (    constants.asm):00085         * CF status bits.
     0080             (    constants.asm):00086         CFBSYB  equ     %10000000       BSY status bit
     0040             (    constants.asm):00087         CFRDYB  equ     %01000000       RDY status bit
     0020             (    constants.asm):00088         CFDWFB  equ     %00100000       DWF status bit (not used)
     0010             (    constants.asm):00089         CFDSCB  equ     %00010000       DSC status bit (not used)
     0008             (    constants.asm):00090         CFDRQB  equ     %00001000       DRQ status bit
     0001             (    constants.asm):00091         CFERRB  equ     %00000001       ERR status bit
                      (    constants.asm):00092         
     0200             (    constants.asm):00093         CFSCSZ  equ     $200            Compact Flash (IDE) sector size
                      (    constants.asm):00094         
                      (    constants.asm):00095         * CF commands.
     00EC             (    constants.asm):00096         CFIDDEV equ     $EC             Identify Device
     00EF             (    constants.asm):00097         CFSETFT equ     $EF             Set Feature
     0020             (    constants.asm):00098         CFRSCTS equ     $20             Read Sectors
     0030             (    constants.asm):00099         CFWSCTS equ     $30             Write Sectors
                      (    constants.asm):00100         
                      (    constants.asm):00101         * Buffer in-memory structure:
                      (    constants.asm):00102         * data: 1024 bytes.
                      (    constants.asm):00103         * terminator: 1 byte set to 0.
                      (    constants.asm):00104         * flags: 1 byte.
                      (    constants.asm):00105         * blknum: 2 bytes.
     0001             (    constants.asm):00106         BINUSE  equ     1               Buffer is allocated (the blknum field is valid)
     0002             (    constants.asm):00107         BMAPPD  equ     2               Block has been read from the CF device
     0004             (    constants.asm):00108         BDIRTY  equ     4               Block has been marked for update
     0400             (    constants.asm):00109         BLKSIZ  equ     2*CFSCSZ        Block size is 2 CF sectors (1 KB)
                      (    constants.asm):00110         * Buffer field offsets.
     0400             (    constants.asm):00111         BOTERM  equ     BLKSIZ          Base buffer to the 'terminator' field offset
     0401             (    constants.asm):00112         BOFLAGS equ     BLKSIZ+1        Base buffer to the 'flag' field offset
     0402             (    constants.asm):00113         BOBLKNO equ     BLKSIZ+2        Base buffer to the 'blknum' field offset
                      (    constants.asm):00114         
     0410             (    constants.asm):00115         BFDISP  equ     BUF1-BUF0       Offset between resident buffers
                      (    constants.asm):00116         
                      (    constants.asm):00117         * MC146818 RTC registers.
     D400             (    constants.asm):00118         RTAS    equ     DEV5            Latch target register address offset
     D401             (    constants.asm):00119         RTDS    equ     (DEV5+1)        Actual target register access
                      (    constants.asm):00120         * RTC internal register offsets.
     0000             (    constants.asm):00121         RTOSEC  equ     0               Seconds
     0001             (    constants.asm):00122         RTOSECA equ     1               Seconds alarm
     0002             (    constants.asm):00123         RTOMIN  equ     2               Minutes
     0003             (    constants.asm):00124         RTOMINA equ     3               Minutes alarm
     0004             (    constants.asm):00125         RTOHOUR equ     4               Hours
     0005             (    constants.asm):00126         RTOHRA  equ     5               Hours alarm
     0006             (    constants.asm):00127         RTODOW  equ     6               Day of week
     0007             (    constants.asm):00128         RTODOM  equ     7               Day of month
     0008             (    constants.asm):00129         RTOMON  equ     8               Month
     0009             (    constants.asm):00130         RTOYEAR equ     9               Year
     000A             (    constants.asm):00131         RTOREGA equ     10              Register A
     000B             (    constants.asm):00132         RTOREGB equ     11              Register B
     000C             (    constants.asm):00133         RTOREGC equ     12              Register C
     000D             (    constants.asm):00134         RTOREGD equ     13              Register D
     000E             (    constants.asm):00135         RTOUMB  equ     14              Base of user defined NVRAM storage
     0032             (    constants.asm):00136         RTUMSZ  equ     50              Size of user defined NVRAM storage
     003F             (    constants.asm):00137         RTOPRES equ     (RTOUMB+RTUMSZ-1) RTC NVRAM offset for dectecting dev presence
                      (    constants.asm):00138         
                      (    constants.asm):00139         * Register A bits.
     0080             (    constants.asm):00140         RTAUIP  equ     $80             Update in progress
     0070             (    constants.asm):00141         RTADVRS equ     $70             Divider reset, not in operation
     0020             (    constants.asm):00142         RTADV32 equ     $20             In operation, 32 KHz time base
     000A             (    constants.asm):00143         RTARS64 equ     $A              32 KHz time base, 64 Hz PI (every 15.625 ms)
                      (    constants.asm):00144         
                      (    constants.asm):00145         * Register B bits.
     0080             (    constants.asm):00146         RTBSET  equ     $80
     0040             (    constants.asm):00147         RTBPIE  equ     $40
     0004             (    constants.asm):00148         RTBDM   equ     4               Set to 1 for binary register contents
     0002             (    constants.asm):00149         RTB24   equ     2               Set to 1 for 24 hour format
                      (    constants.asm):00150         
                      (    constants.asm):00151         * Register C bits.
     0040             (    constants.asm):00152         RTCPF   equ     $40             Periodic interrupt pending flag
                      (    constants.asm):00153         
                      (    constants.asm):00154         * ASCII trivia.
     0000             (    constants.asm):00155         NUL     equ     0               End of string marker
     0003             (    constants.asm):00156         ETX     equ     3               Control-C (intr)
     0008             (    constants.asm):00157         BS      equ     8               Backspace
     0009             (    constants.asm):00158         HT      equ     9               Horizontal tab
     000A             (    constants.asm):00159         LF      equ     $0A             Aka new line
     000D             (    constants.asm):00160         CR      equ     $0D             Carriage return
     0015             (    constants.asm):00161         NAK     equ     $15             Control-U (kill)
     0020             (    constants.asm):00162         SP      equ     $20             Aka BL in Forth
     0013             (    constants.asm):00163         XOFF    equ     $13             Aka DC3
     0011             (    constants.asm):00164         XON     equ     $11             Aka DC1
                      (    constants.asm):00165         
                      (    constants.asm):00166         * Stack sizes.
     00C0             (    constants.asm):00167         NSTKSZ  equ     192             Expressed in bytes. Now only limited by RAM size
     0080             (    constants.asm):00168         RSTKSZ  equ     128             Expressed in bytes
                      (    constants.asm):00169         
                      (    constants.asm):00170         * Buffer sizes.
     0084             (    constants.asm):00171         CMDBFSZ equ     132             Command line entry buffer
     0050             (    constants.asm):00172         HEXBFSZ equ     80
     0048             (    constants.asm):00173         TBUFSZ  equ     72              Used by VLIST to print word name and CVNSTR
     0051             (    constants.asm):00174         PADBSZ  equ     1+80            79-STANDARD mandates a minimum of 64 bytes
     0040             (    constants.asm):00175         SERBSZ  equ     64              Serial buffer size. Needs to be a power of 2
                      (    constants.asm):00176         
                      (    constants.asm):00177         * Dictionary flag masks.
     0080             (    constants.asm):00178         IMDFLM  equ     $80             Immediate flag mask
     0040             (    constants.asm):00179         DEFFLM  equ     $40             Compilation only flag mask
                      (    constants.asm):00180                 IFNE    RELFEAT
     0020             (    constants.asm):00181         MONFLM  equ     $20             Monitored flag mask. This indicates that the
                      (    constants.asm):00182         *                               word to which it relates might be checked for
                      (    constants.asm):00183         *                               integrity. This applies by default to all words
                      (    constants.asm):00184         *                               defined with : and all constants. It might
                      (    constants.asm):00185         *                               also apply to any other CREATEd object by
                      (    constants.asm):00186         *                               resorting to the MONITOR word. Using MONITOR
                      (    constants.asm):00187         *                               on variable word contents is guaranteed to
                      (    constants.asm):00188         *                               raise ICHECK's attention.
                      (    constants.asm):00189                 ENDC
                      (    constants.asm):00190         
     001F             (    constants.asm):00191         WRLNMSK equ     $1F             31 character is the maximum word length
                      (    constants.asm):00192         
                      (    constants.asm):00193         * 6309 opcodes.
     008E             (    constants.asm):00194         LDXOPC  equ     $8E             LDX (immediate)
     007E             (    constants.asm):00195         JMPOPC  equ     $7E             JMP (extended)
     00BD             (    constants.asm):00196         JSROPC  equ     $BD             JSR (extended)
     0039             (    constants.asm):00197         RTSOPC  equ     $39             RTS (inherent)
     2503             (    constants.asm):00198         BCSOPC  equ     $2503           BCS *+5 (relative)
     2603             (    constants.asm):00199         BNEOPC  equ     $2603           BNE *+5 (relative)
     00C7             (    constants.asm):00200         ILLOPC  equ     $C7             An illegal operation code. Meant to raise a trap
                      (    constants.asm):00201         
     0001             (    constants.asm):00202         CFLAG   equ     1               CC bit 0 (C)
     0004             (    constants.asm):00203         ZFLAG   equ     4               CC bit 2 (Z)
     0010             (    constants.asm):00204         IFLAG   equ     $10             CC bit 4 (I)
     0040             (    constants.asm):00205         FFLAG   equ     $40             CC bit 6 (F)
                      (    constants.asm):00206         
                      (    constants.asm):00207         * RAM based execution token for @.
     0C64             (    constants.asm):00208         RAMFTCH set     WDICSPC+4       Dictionary header overhead is word's length + 3
                      (    constants.asm):00209                 IFNE    RELFEAT         The reliability features adds one byte to the
     0C65             (    constants.asm):00210         RAMFTCH set     WDICSPC+5       header: a checksum.
                      (    constants.asm):00211                 ENDC
                      (    constants.asm):00212         
                      (        forth.asm):00124         
                      (        forth.asm):00125         * Unchecked NPUSH. This is for situations in which there is absolutely no
                      (        forth.asm):00126         * chance of overflow. For instance, in case we just popped 2 cells and push
                      (        forth.asm):00127         * back one or two.
0000                  (        forth.asm):00128         UCNPUSH MACRO   NOEXPAND
                      (        forth.asm):00129                 pshu    x
                      (        forth.asm):00130                 ENDM
                      (        forth.asm):00131         
                      (        forth.asm):00132         * Unchecked NPOP. To be used only after trusted words have been invoked, i.e.
                      (        forth.asm):00133         * when one is positively sure that the data stack contains at least one cell.
0000                  (        forth.asm):00134         UCNPOP  MACRO   NOEXPAND
                      (        forth.asm):00135                 pulu    x
                      (        forth.asm):00136                 ENDM
                      (        forth.asm):00137         
                      (        forth.asm):00138         * Make sure minimum data stack requirements are satisfied upon word entry.
                      (        forth.asm):00139         * The requirement is expressed in cell size--2 bytes on the 6309.
                      (        forth.asm):00140         * \1 specifies the required number of cells.
0000                  (        forth.asm):00141         MINDREQ MACRO   NOEXPAND
                      (        forth.asm):00142                 ldd     #NSTBOT-(\1*2)  Cell count one expects to be stacked up
                      (        forth.asm):00143                 bra     CHKNDPT         No return if the condition is not met
                      (        forth.asm):00144                 ENDM
                      (        forth.asm):00145         
                      (        forth.asm):00146         * Reliability feature support: execution tokens.
                      (        forth.asm):00147         * \1 has the opcode we want to emit.
                      (        forth.asm):00148         * \2 has the execution token address, as if the header overhead always
                      (        forth.asm):00149         * was 3 bytes.
0000                  (        forth.asm):00150         RFXT    MACRO   NOEXPAND
                      (        forth.asm):00151                 IFNE    RELFEAT
                      (        forth.asm):00152                 \1      \2+1
                      (        forth.asm):00153                 ELSE
                      (        forth.asm):00154                 \1      \2
                      (        forth.asm):00155                 ENDC                    RELFEAT
                      (        forth.asm):00156                 ENDM
                      (        forth.asm):00157         
                      (        forth.asm):00158         * Reliability feature support: variable word header contents.
                      (        forth.asm):00159         * This is a dummy checksum only used for EEPROM resident words.
                      (        forth.asm):00160         * Those never are checked for code integrity by MONITOR.
0000                  (        forth.asm):00161         RFCS    MACRO   NOEXPAND
                      (        forth.asm):00162                 IFNE    RELFEAT
                      (        forth.asm):00163                 fcb     ILLOPC          Illegal opcode
                      (        forth.asm):00164                 ENDC                    RELFEAT
                      (        forth.asm):00165                 ENDM
                      (        forth.asm):00166         
                      (        forth.asm):00167         *******************************************************************************
                      (        forth.asm):00168         * RAM definitions. We cannot initialize globals from the assembly defs.
                      (        forth.asm):00169         * All we can do here is define addresses and size things up.
                      (        forth.asm):00170         
                      (        forth.asm):00171         * RAMSTART is 0. We leave page 0 unused as a bug proof area.
                      (        forth.asm):00172         * When compiled in debug mode, this area is filled with illegal
                      (        forth.asm):00173         * instruction opcodes ($C7).
                      (        forth.asm):00174         
                      (        forth.asm):00175                 org     VARSPC
                      (        forth.asm):00176         
                      (        forth.asm):00177         * Global pointers.
0100                  (        forth.asm):00178         RSP     rmb     2               The return stack pointer
0102                  (        forth.asm):00179         TOKENSP rmb     2               Token start pointer (STRS)
0104                  (        forth.asm):00180         TOKENEP rmb     2               Token end pointer (STRE)
0106                  (        forth.asm):00181         LSTWAD  rmb     2               Last defined word header pointer--LAST
0108                  (        forth.asm):00182         DICEND  rmb     2               Current end of the dictionary--HERE
010A                  (        forth.asm):00183         BLSTWAD rmb     2               Backup (was IX)
010C                  (        forth.asm):00184         BDICEND rmb     2               Backup (was IY)
010E                  (        forth.asm):00185         PLOAD   rmb     2               Word payload if found by SWDIC
0110                  (        forth.asm):00186         FNDPLD  rmb     2               Last code payload reported by FIND
0112                  (        forth.asm):00187         RECADDR rmb     2               Used by RECURSE
0114                  (        forth.asm):00188         JSRLAST rmb     2               Last compilation address of #JSROPC
0116                  (        forth.asm):00189         VLPRVEP rmb     2               Used in VLIST to compute word code length
0118                  (        forth.asm):00190         VLPRVHD rmb     2               Used in VLIST to compute word code length
011A                  (        forth.asm):00191         MRUBUFA rmb     2               Most recently used buffer address
011C                  (        forth.asm):00192         BSBFADR rmb     2               Base buffer address for the input stream
                      (        forth.asm):00193         
                      (        forth.asm):00194         * Global variables.
011E                  (        forth.asm):00195         UBASE   rmb     2               Base for numbers input and output--BASE
0120                  (        forth.asm):00196         USTATE  rmb     2               0 if interpreting, 1 if compiling--STATE
0122                  (        forth.asm):00197         UTOIN   rmb     2               User variable for >IN
0124                  (        forth.asm):00198         UBLK    rmb     2               User variable for BLK
0126                  (        forth.asm):00199         USCR    rmb     2               User variable for SCR (output for LIST)
0128                  (        forth.asm):00200         TIKSHI  rmb     2               RTC clock ticks updated on FIRQ
012A                  (        forth.asm):00201         TIKSLOW rmb     2               RTC clock ticks updated on FIRQ
                      (        forth.asm):00202                 IFNE    DEBUG
012C                  (        forth.asm):00203         CCREG   rmb     2               A DEBUG variable for predicates (see CMP2)
                      (        forth.asm):00204                 ENDC                    DEBUG
                      (        forth.asm):00205                 IFNE    HVNMI
                      (        forth.asm):00206                 IFNE    HVNMI2
012C                  (        forth.asm):00207         SBDROPC rmb     2               Char. drop count for serial input (see FIRQHDL)
                      (        forth.asm):00208                 ENDC                    HVNMI2
                      (        forth.asm):00209                 ENDC                    HVNMI
012C                  (        forth.asm):00210         BASBKUP rmb     1               BASE backup when a base prefix is in use
012D                  (        forth.asm):00211         CMDLNSZ rmb     1               Entered character count in GETS (INTERP)
012E                  (        forth.asm):00212         RDEPTH  rmb     1               Return stack depth in cells
012F                  (        forth.asm):00213         IRDPTH  rmb     1               Return stack depth when : was last invoked
0130                  (        forth.asm):00214         RTSREMV rmb     1               If > 1, omit the final RTS when compiling
0131                  (        forth.asm):00215         DIVFCN  rmb     1               Flag used by /, MOD and /MOD
0132                  (        forth.asm):00216         F83DIVF rmb     1               FORTH-83 adjusment flag for floored division
0133                  (        forth.asm):00217         STSLFCN rmb     1               Flag used by */, */MOD
0134                  (        forth.asm):00218         CVTFCN  rmb     1               CVT: 0 => # semantics, 1 => #S semantics
0135                  (        forth.asm):00219         ISNEGF  rmb     1               Number being scanned is negative
0136                  (        forth.asm):00220         ISDBLF  rmb     1               Number being scanned is a double
0137                  (        forth.asm):00221         CVISSGN rmb     1               Flag: should CVNSTR consider numbers as signed
0138                  (        forth.asm):00222         CURTOKL rmb     1               Current token length. Set by SWDIC
0139                  (        forth.asm):00223         IMDFLG  rmb     1               Immediate flag
013A                  (        forth.asm):00224         DEFFLG  rmb     1               Define flag
013B                  (        forth.asm):00225         NBCTFB0 rmb     1               NZ if -->/CONTINUED invoked from the console
013C                  (        forth.asm):00226         RTCAVL  rmb     1               NZ if real time clock is present
013D                  (        forth.asm):00227         CFCARDP rmb     1               NZ if CF card present
013E                  (        forth.asm):00228         CFCMMIR rmb     1               Last CF command issued
013F                  (        forth.asm):00229         CFERRCD rmb     1               and the corresponding error code
                      (        forth.asm):00230         
                      (        forth.asm):00231         * Serial buffer parameters. Queing happens on FIRQ.
                      (        forth.asm):00232         * Dequeing occurs when GETCH is invoked.
0140                  (        forth.asm):00233         SERBENQ rmb     1               Enqueue offset
0141                  (        forth.asm):00234         SERBDEQ rmb     1               Dequeue offset
0142                  (        forth.asm):00235         SERBCNT rmb     1               Buffer byte count
0143                  (        forth.asm):00236         XMITOK  rmb     1               Software flow control on output flag
0144                  (        forth.asm):00237         SERBUF  rmb     SERBSZ          The actual buffer
                      (        forth.asm):00238         
0184                  (        forth.asm):00239         PADBUF  rmb     PADBSZ          PAD lives here. Used by <#, #, #S, #>
                      (        forth.asm):00240         
                      (        forth.asm):00241         * The normal (data) stack.
01D5 00               (        forth.asm):00242                 align   2
     01D6             (        forth.asm):00243         NSTTOP  equ     *               U's value when the data stack is full
01D6                  (        forth.asm):00244                 rmb     NSTKSZ
     0296             (        forth.asm):00245         NSTBOT  equ     *               U's value when the data stack is empty
                      (        forth.asm):00246         
                      (        forth.asm):00247         * The return stack.
     0296             (        forth.asm):00248         RSTTOP  equ     *
0296                  (        forth.asm):00249                 rmb     RSTKSZ
     0316             (        forth.asm):00250         RSTBOT  equ     *
                      (        forth.asm):00251         
0316                  (        forth.asm):00252         CMDBUF  rmb     CMDBFSZ
039A                  (        forth.asm):00253         HEXBUF  rmb     HEXBFSZ
                      (        forth.asm):00254         
03EA                  (        forth.asm):00255         TBUFF   rmb     TBUFSZ          Output for CVNSTR
                      (        forth.asm):00256         
0432 0000000000000000 (        forth.asm):00257                 align   16
     000000000000
0440                  (        forth.asm):00258         BUF0    rmb     BLKSIZ+4
                      (        forth.asm):00259         
0844 0000000000000000 (        forth.asm):00260                 align   16
     00000000
0850                  (        forth.asm):00261         BUF1    rmb     BLKSIZ+4
                      (        forth.asm):00262         
                      (        forth.asm):00263         *******************************************************************************
                      (        forth.asm):00264         * Writable dictionary section begins right here. We cannot have anything
                      (        forth.asm):00265         * statically defined at this point. Therefore, FORTHIN moves the code for @
                      (        forth.asm):00266         * to this location and sets up DICEND and LSTWAD accordingly. All the RAM
                      (        forth.asm):00267         * beyond this point (after the reallocated @ implementation) is user defined
                      (        forth.asm):00268         * material. Note that builtin words, though they cannot be forgotten (to the
                      (        forth.asm):00269         * extent they are ROM resident--not to mention inter-word dependencies),
                      (        forth.asm):00270         * might still be overridden by user definitions. VLIST will happily ignore
                      (        forth.asm):00271         * that fact and list everything in the dictionary linked list order.
                      (        forth.asm):00272         
0C54 0000000000000000 (        forth.asm):00273                 align   16
     00000000
     0C60             (        forth.asm):00274         WDICSPC equ     *
                      (        forth.asm):00275         
                      (        forth.asm):00276         *******************************************************************************
                      (        forth.asm):00277         * ROM code begins.
                      (        forth.asm):00278         
                      (        forth.asm):00279                 org     ROMSTRT
                      (        forth.asm):00280         * Trap handler: division by zero or illegal opcode. See page 4-10 of "The 6309
                      (        forth.asm):00281         * Book" for a description of interrupt stacks in native 6309 mode.
E000 113C40           (        forth.asm):00282 (4)     IODZHDL bitmd   #$40            Illegal opcode?
E003 2705             (        forth.asm):00283 (3)             beq     @iodzh1
E005 8EFE77           (        forth.asm):00284 (3)             ldx     #IOPERRM
E008 2008             (        forth.asm):00285 (3)             bra     @iodxh2
E00A 113C80           (        forth.asm):00286 (4)     @iodzh1 bitmd   #$80            Division by zero?
E00D 2726             (        forth.asm):00287 (3)             beq     @iodzh3         And you may ask yourself, well
                      (        forth.asm):00288         *                               How did I get here?
E00F 8EFE8C           (        forth.asm):00289 (3)             ldx     #DV0ERRM
E012 BDE2F3           (        forth.asm):00290 (7)     @iodxh2 jsr     PUTS
E015 EC6C             (        forth.asm):00291 (5+1)           ldd     12,s            Return code address (PC)
E017 108E039A         (        forth.asm):00292 (4)             ldy     #HEXBUF
E01B BDE195           (        forth.asm):00293 (7)             jsr     HDMP4   
E01E 8E039A           (        forth.asm):00294 (3)             ldx     #HEXBUF
E021 BDE2F3           (        forth.asm):00295 (7)             jsr     PUTS
E024 BDE300           (        forth.asm):00296 (7)             jsr     PUTCR
E027 8EE76D           (        forth.asm):00297 (3)             ldx     #ERRHD1
E02A AF6C             (        forth.asm):00298 (5+1)           stx     12,s            Resume execution in the error handler
E02C 8EE000           (        forth.asm):00299 (3)             ldx     #IODZHDL
E02F AF68             (        forth.asm):00300 (5+1)           stx     8,s             With Y set to IODZHDL
E031 8603             (        forth.asm):00301 (2)             lda     #3              And user ABORT error code
E033 A762             (        forth.asm):00302 (4+1)           sta     2,s             Passed back through B
E035 3B               (        forth.asm):00303 (17+?)  @iodzh3 rti
                      (        forth.asm):00304         
     E036             (        forth.asm):00305         SWI3HDL equ     *
     E036             (        forth.asm):00306         SWI2HDL equ     *
     E036             (        forth.asm):00307         IRQHDL  equ     *
     E036             (        forth.asm):00308         SWIHDL  equ     *
                      (        forth.asm):00309                 IFEQ    HVNMI
E036                  (        forth.asm):00310         NMIHDL                          These should never happen
                      (        forth.asm):00311                 ENDC
E036 3B               (        forth.asm):00312 (17+?)          rti
                      (        forth.asm):00313         
                      (        forth.asm):00314         * Interrupts are disabled by default upon reset.
                      (        forth.asm):00315         * NMI# will not be "armed" until S is initiliazed.
E037 113D01           (        forth.asm):00316 (5)     RSTHDL  ldmd    #1              Establish 6309 native mode
                      (        forth.asm):00317         
E03A 8643             (        forth.asm):00318 (2)             lda     #ACIRSET
E03C B7D800           (        forth.asm):00319 (4)             sta     ACIACTL         ACIA master reset
E03F 86D5             (        forth.asm):00320 (2)             lda     #ACIRTS1
E041 B7D800           (        forth.asm):00321 (4)             sta     ACIACTL         RTS# high, 8N1
                      (        forth.asm):00322         
E044 8EFDF3           (        forth.asm):00323 (3)             ldx     #BOOTMSG        Identity statement
                      (        forth.asm):00324         
                      (        forth.asm):00325         * Send the NUL terminated string pointed to by X to the ACIA.
                      (        forth.asm):00326         * The RAM is not yet assumed to be working.
E047 C602             (        forth.asm):00327 (2)     INIT    ldb     #ACITDRE
E049 A680             (        forth.asm):00328 (4+1)   @init0  lda     ,x+
E04B 270A             (        forth.asm):00329 (3)             beq     RAMCHK          NUL marks the end of the string
E04D F5D800           (        forth.asm):00330 (4)     @init1  bitb    ACIACTL         Wait for TDRE bit to be set
E050 27FB             (        forth.asm):00331 (3)             beq     @init1
E052 B7D801           (        forth.asm):00332 (4)             sta     ACIADAT         Transmit data
E055 20F2             (        forth.asm):00333 (3)             bra     @init0          Next char, if any
                      (        forth.asm):00334         
                      (        forth.asm):00335         * RAM0 32 KB self test (destructive).
E057 8E0000           (        forth.asm):00336 (3)     RAMCHK  ldx     #RAMSTRT
E05A AF84             (        forth.asm):00337 (5+0)   @ramch1 stx     ,x
E05C AC84             (        forth.asm):00338 (5+0)           cmpx    ,x
E05E 2609             (        forth.asm):00339 (3)             bne     RAMFAIL
E060 3002             (        forth.asm):00340 (4+1)           leax    2,x
E062 8C8000           (        forth.asm):00341 (3)             cmpx    #RAMSTRT+RAMSIZE
E065 26F3             (        forth.asm):00342 (3)             bne     @ramch1
E067 2012             (        forth.asm):00343 (3)             bra     RAMOK
                      (        forth.asm):00344         
E069 C680             (        forth.asm):00345 (2)     RAMFAIL ldb     #128
E06B 108E8000         (        forth.asm):00346 (4)     @ramf1  ldy     #$8000
E06F 313F             (        forth.asm):00347 (4+1)   @ramf2  leay    -1,y
E071 26FC             (        forth.asm):00348 (3)             bne     @ramf2
E073 5A               (        forth.asm):00349 (1)             decb
E074 26F5             (        forth.asm):00350 (3)             bne     @ramf1
E076 8EFE5E           (        forth.asm):00351 (3)             ldx     #RAMFM
E079 20CC             (        forth.asm):00352 (3)             bra     INIT            Here we go again
                      (        forth.asm):00353         
                      (        forth.asm):00354         * RAM Initialization to all $C7 if DEBUG mode is enabled else zeroes.
E07B 8E0000           (        forth.asm):00355 (3)     RAMOK   ldx     #RAMSTRT
E07E 3101             (        forth.asm):00356 (4+1)           leay    1,x
E080 10867FFF         (        forth.asm):00357 (4)             ldw     #RAMSIZE-1
                      (        forth.asm):00358                 IFNE    DEBUG
                      (        forth.asm):00359                 lda     #ILLOPC
                      (        forth.asm):00360                 sta     ,x
                      (        forth.asm):00361                 ELSE
E084 6F84             (        forth.asm):00362 (6+0)           clr     ,x
                      (        forth.asm):00363                 ENDC                    DEBUG
E086 113812           (        forth.asm):00364 (6+?)           tfm     x+,y+
                      (        forth.asm):00365         
                      (        forth.asm):00366         * Initialize the system stack pointer and the direct page base address register.
E089 10CE8000         (        forth.asm):00367 (4)             lds     #RAMSTRT+RAMSIZE
E08D 8601             (        forth.asm):00368 (2)             lda     #VARSPC/256
E08F 1F8B             (        forth.asm):00369 (4)             tfr     a,dp
     01               (        forth.asm):00370                 SETDP   VARSPC/256
                      (        forth.asm):00371         
                      (        forth.asm):00372         * Serial buffer parameters initialization. We are doing this here because
                      (        forth.asm):00373         * PUTS requires prior software flow control initialization.
                      (        forth.asm):00374                 IFNE    DEBUG
                      (        forth.asm):00375                 clrd
                      (        forth.asm):00376                 std     SERBENQ         Two birds with one stone
                      (        forth.asm):00377                 sta     SERBCNT
                      (        forth.asm):00378                 IFNE    HVNMI
                      (        forth.asm):00379                 IFNE    HVNMI2
                      (        forth.asm):00380                 std     SBDROPC         Initialize chararacter drop count
                      (        forth.asm):00381                 ENDC                    HVNMI2
                      (        forth.asm):00382                 ENDC                    HVNMI
                      (        forth.asm):00383                 ENDC                    DEBUG
E091 8601             (        forth.asm):00384 (2)             lda     #1              Initialize software flow control on output
E093 9743             (        forth.asm):00385 (3)             sta     XMITOK
                      (        forth.asm):00386         
E095 8EFE4E           (        forth.asm):00387 (3)             ldx     #RAMOKM
E098 BDE2F3           (        forth.asm):00388 (7)             jsr     PUTS
E09B BDE359           (        forth.asm):00389 (7)             jsr     FORTHIN         Global variables initialization
E09E BDE8C4           (        forth.asm):00390 (7)             jsr     CFINIT          CompactFlash card initialization
                      (        forth.asm):00391                 IFNE    RTCFEAT
                      (        forth.asm):00392                 jsr     RTCINIT         Real time clock initialization
                      (        forth.asm):00393                 ENDC                    RTCFEAT
                      (        forth.asm):00394         
                      (        forth.asm):00395         * Lower RTS and enable FIRQ.
E0A1 8695             (        forth.asm):00396 (2)             lda     #ACIRTS0
E0A3 B7D800           (        forth.asm):00397 (4)             sta     ACIACTL
E0A6 1CBF             (        forth.asm):00398 (2)             andcc   #^FFLAG
                      (        forth.asm):00399         
E0A8 0D3D             (        forth.asm):00400 (4)             tst     CFCARDP
E0AA 2706             (        forth.asm):00401 (3)             beq     INTERP
                      (        forth.asm):00402         
                      (        forth.asm):00403         * A CF card is present, LOAD block #1.
E0AC 8E0001           (        forth.asm):00404 (3)             ldx     #1
E0AF BDF7CB           (        forth.asm):00405 (7)             jsr     LOAD1
                      (        forth.asm):00406         
                      (        forth.asm):00407         * The interpreter main loop.
E0B2 104F             (        forth.asm):00408 (2)     INTERP  clrd
E0B4 DD24             (        forth.asm):00409 (4)             std     UBLK            Interpreting from the console. Set BLK to 0
E0B6 DD22             (        forth.asm):00410 (4)             std     UTOIN
E0B8 8E0316           (        forth.asm):00411 (3)             ldx     #CMDBUF
E0BB 9F1C             (        forth.asm):00412 (4)             stx     BSBFADR
E0BD C683             (        forth.asm):00413 (2)             ldb     #CMDBFSZ-1      NUL terminator is not included in the char count
E0BF BDE316           (        forth.asm):00414 (7)             jsr     GETS            Acquire command from the console
                      (        forth.asm):00415         * Additional setup in case the ANSI \ is used.
E0C2 D72D             (        forth.asm):00416 (3)             stb     CMDLNSZ         GETS returns the entered character count via B
                      (        forth.asm):00417         * Additional preparation work for block support.
E0C4 0F3B             (        forth.asm):00418 (5)             clr     NBCTFB0         Flag whether -->/CONTINUED is called from blk 0
E0C6 8D02             (        forth.asm):00419 (6)             bsr     _INTERP
E0C8 20E8             (        forth.asm):00420 (3)     MINTLRA bra     INTERP
                      (        forth.asm):00421         
                      (        forth.asm):00422         * The interpreter itself.
E0CA BDE38E           (        forth.asm):00423 (7)     _INTERP jsr     SCNSTOK         Scan for the beginning of a word at address X
E0CD 2717             (        forth.asm):00424 (3)             beq     @more0          This is the end
E0CF 1F10             (        forth.asm):00425 (4)             tfr     x,d             Starting token address to D
E0D1 BDE177           (        forth.asm):00426 (7)             jsr     U2INFRD         Derive >IN from D
E0D4 0D21             (        forth.asm):00427 (4)             tst     USTATE+1        We do ignore the upper byte
E0D6 263E             (        forth.asm):00428 (3)             bne     COMP            We are compiling
E0D8 BDE4A9           (        forth.asm):00429 (7)             jsr     SWDIC           Updates TOKENEP, CURTOKL, IMDFLG/DEFFLG
E0DB 2620             (        forth.asm):00430 (3)             bne     @exec           Word found, execute it
E0DD BDE3E9           (        forth.asm):00431 (7)             jsr     NUMCVT
     E0E0             (        forth.asm):00432         NMCVIRA equ     *
E0E0 9E04             (        forth.asm):00433 (4)             ldx     TOKENEP
E0E2 6D84             (        forth.asm):00434 (5+0)   MORE    tst     ,x
E0E4 26E4             (        forth.asm):00435 (3)             bne     _INTERP         Next token, please!
                      (        forth.asm):00436         * End of input stream condition is recognized.
E0E6 DC24             (        forth.asm):00437 (4)     @more0  ldd     UBLK
E0E8 2705             (        forth.asm):00438 (3)             beq     @more1          We are back from the console
E0EA 0D3B             (        forth.asm):00439 (4)             tst     NBCTFB0         -->/CONTINUED invoked from the console?
E0EC 2601             (        forth.asm):00440 (3)             bne     @more1          Yes
E0EE 39               (        forth.asm):00441 (4)             rts                     No, we're done here
E0EF 0F3B             (        forth.asm):00442 (5)     @more1  clr     NBCTFB0         The -->/CONTINUED exception only applies once
E0F1 8EFE71           (        forth.asm):00443 (3)             ldx     #OKFEEDB        Provide OK feedback
E0F4 0D21             (        forth.asm):00444 (4)             tst     USTATE+1        No OK feedback if we're compiling, just CRLF
E0F6 2702             (        forth.asm):00445 (3)             beq     @more2
E0F8 3003             (        forth.asm):00446 (4+1)           leax    3,x             Skip the ' OK' string when compiling
E0FA 7EE2F3           (        forth.asm):00447 (3)     @more2  jmp     PUTS            Back to whoever invoked us
E0FD 963A             (        forth.asm):00448 (3)     @exec   lda     DEFFLG
E0FF 2705             (        forth.asm):00449 (3)             beq     @introk         Compilation only flag is not set
E101 C606             (        forth.asm):00450 (2)             ldb     #6              Incorrect STATE
E103 BDE76A           (        forth.asm):00451 (7)             jsr     ERRHDLR         No return
     E106             (        forth.asm):00452         INTISRA equ     *               For symbolic stack debugging purposes
E106 DC04             (        forth.asm):00453 (4)     @introk ldd     TOKENEP
E108 8D6D             (        forth.asm):00454 (6)             bsr     U2INFRD         Derive >IN from D
E10A 8EE111           (        forth.asm):00455 (3)             ldx     #INTRPRA        The return address
E10D 3410             (        forth.asm):00456 (4+2)           pshs    x
E10F 1F25             (        forth.asm):00457 (4)             tfr     y,pc            An indirect call to Y
E111 BDE841           (        forth.asm):00458 (7)     INTRPRA jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
E114 20CC             (        forth.asm):00459 (3)             bra     MORE
                      (        forth.asm):00460         
                      (        forth.asm):00461         * The compiler.
                      (        forth.asm):00462         * Upon entry TOKENSP has been set by a prior call to SCNSTOK.
E116 BDE4A9           (        forth.asm):00463 (7)     COMP    jsr     SWDIC           Updates TOKENEP, CURTOKL, IMDFLG/DEFFLG
E119 271E             (        forth.asm):00464 (3)             beq     @cmpnum         Word @ TOKENSP is not in the dictionary
E11B 0D39             (        forth.asm):00465 (4)             tst     IMDFLG
E11D 2712             (        forth.asm):00466 (3)             beq     @notimd
E11F DC04             (        forth.asm):00467 (4)             ldd     TOKENEP
E121 8D54             (        forth.asm):00468 (6)             bsr     U2INFRD         Derive >IN from D
E123 8EE12A           (        forth.asm):00469 (3)             ldx     #COMPLRA        Word is immediate. Execute it.
E126 3410             (        forth.asm):00470 (4+2)           pshs    x               Return to COMPLRA
E128 1F25             (        forth.asm):00471 (4)             tfr     y,pc            An indirect call to Y
E12A BDE841           (        forth.asm):00472 (7)     COMPLRA jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
E12D 9F04             (        forth.asm):00473 (4)             stx     TOKENEP
E12F 20B1             (        forth.asm):00474 (3)             bra     MORE            Branch back to the interpreter
E131 1F21             (        forth.asm):00475 (4)     @notimd tfr     y,x
E133 8D34             (        forth.asm):00476 (6)             bsr     EMXASXT         Emit X as an execution token
E135 9E04             (        forth.asm):00477 (4)     @cmpdon ldx     TOKENEP
E137 20A9             (        forth.asm):00478 (3)             bra     MORE
E139 BDE3E9           (        forth.asm):00479 (7)     @cmpnum jsr     NUMCVT
     E13C             (        forth.asm):00480         NMCVCRA equ     *
E13C 0D36             (        forth.asm):00481 (4)             tst     ISDBLF
E13E 2607             (        forth.asm):00482 (3)             bne     @cmpdbl
E140 3710             (        forth.asm):00483                 UCNPOP                  TOS to X
E142 BDE578           (        forth.asm):00484 (7)             jsr     LITER
E145 20EE             (        forth.asm):00485 (3)             bra     @cmpdon
                      (        forth.asm):00486         * The following is some sort of half baked 2LITERAL.
                      (        forth.asm):00487         * Please note that NUMCVT guarantees us that at least two cells are stacked up.
E147 AE42             (        forth.asm):00488 (5+1)   @cmpdbl ldx     2,u
E149 BDE578           (        forth.asm):00489 (7)             jsr     LITER           LSC
E14C AEC4             (        forth.asm):00490 (5+0)           ldx     ,u
E14E BDE578           (        forth.asm):00491 (7)             jsr     LITER           MSC
E151 3344             (        forth.asm):00492 (4+1)           leau    4,u             2DROP
E153 20E0             (        forth.asm):00493 (3)             bra     @cmpdon
                      (        forth.asm):00494         
                      (        forth.asm):00495         * Check whether the final RTS can be eliminated. It can only be if we have no
                      (        forth.asm):00496         * forward references to HERE when COMPR (;) is invoked. This is a rather
                      (        forth.asm):00497         * complicated matter but this implementation works on the basis that we can do
                      (        forth.asm):00498         * so safely if at least 2 subroutine calls have been issued with a return
                      (        forth.asm):00499         * stack whose depth is equal to IRDPTH, immediately prior to the invokation
                      (        forth.asm):00500         * of COMPR (;).
E155 3402             (        forth.asm):00501 (4+1)   CHKRTS  pshs    a
E157 109F14           (        forth.asm):00502 (5)             sty     JSRLAST         JSRLAST points to the latest JSR code emission
E15A 962E             (        forth.asm):00503 (3)             lda     RDEPTH
E15C 912F             (        forth.asm):00504 (3)             cmpa    IRDPTH          Return stack depth when : was last invoked
E15E 2705             (        forth.asm):00505 (3)             beq     @ckrts1
E160 0F30             (        forth.asm):00506 (5)             clr     RTSREMV
E162 3502             (        forth.asm):00507 (4+1)   @ckrts0 puls    a
E164 39               (        forth.asm):00508 (4)             rts
E165 0C30             (        forth.asm):00509 (5)     @ckrts1 inc     RTSREMV
E167 20F9             (        forth.asm):00510 (3)             bra     @ckrts0
                      (        forth.asm):00511         
                      (        forth.asm):00512         * Emit (in a code generation understanding) X as an execution token.
                      (        forth.asm):00513         * In essence, this simply inserts JSR <X> at HERE.
                      (        forth.asm):00514         * Note: this code provides support for trailing JSR elimination.
                      (        forth.asm):00515         * On input: X has the target execution token.
                      (        forth.asm):00516         * On output: Y will have HERE, A will be altered, X will be preserved.
E169 109E08           (        forth.asm):00517 (5)     EMXASXT ldy     DICEND
E16C 8DE7             (        forth.asm):00518 (6)             bsr     CHKRTS          Check if the final RTS can be omitted
E16E 86BD             (        forth.asm):00519 (2)             lda     #JSROPC         JSR extended
E170 BDE58F           (        forth.asm):00520 (7)             jsr     VARCON2         Compile a JSR to the execution token
E173 109F08           (        forth.asm):00521 (5)             sty     DICEND
E176 39               (        forth.asm):00522 (4)             rts
                      (        forth.asm):00523         
                      (        forth.asm):00524         * Derive UTOIN from D's current value. D is altered.
E177 931C             (        forth.asm):00525 (4)     U2INFRD subd    BSBFADR
E179 DD22             (        forth.asm):00526 (4)             std     UTOIN
E17B 39               (        forth.asm):00527 (4)             rts
                      (        forth.asm):00528         
                      (        forth.asm):00529         * Store the HEX representation of the lower nibble of A to Y+.
E17C 3404             (        forth.asm):00530 (4+1)   HEX1D   pshs    b
E17E C630             (        forth.asm):00531 (2)             ldb     #'0
E180 840F             (        forth.asm):00532 (2)             anda    #$0f
E182 810A             (        forth.asm):00533 (2)             cmpa    #10
E184 2502             (        forth.asm):00534 (3)             bcs     @hex1d1
E186 C637             (        forth.asm):00535 (2)             ldb     #'A-10
E188 103098           (        forth.asm):00536 (4)     @hex1d1 addr    b,a
E18B A7A0             (        forth.asm):00537 (4+1)           sta     ,y+
E18D 3504             (        forth.asm):00538 (4+1)           puls    b
E18F 39               (        forth.asm):00539 (4)             rts
                      (        forth.asm):00540         
E190 44               (        forth.asm):00541 (1)     ADIV16  lsra
E191 44               (        forth.asm):00542 (1)             lsra
E192 44               (        forth.asm):00543 (1)             lsra
E193 44               (        forth.asm):00544 (1)             lsra
E194 39               (        forth.asm):00545 (4)             rts
                      (        forth.asm):00546         
                      (        forth.asm):00547         * Hexdump D to 4 bytes starting at Y.  Upon return, Y will point 1 byte
                      (        forth.asm):00548         * after the last character emitted. D is preserved.
E195 3406             (        forth.asm):00549 (4+2)   HDMP4   pshs    d
E197 8DF7             (        forth.asm):00550 (6)             bsr     ADIV16
E199 8DE1             (        forth.asm):00551 (6)             bsr     HEX1D
E19B A6E4             (        forth.asm):00552 (4+0)           lda     ,s
E19D 8DDD             (        forth.asm):00553 (6)             bsr     HEX1D
E19F A661             (        forth.asm):00554 (4+1)           lda     1,s
E1A1 8DED             (        forth.asm):00555 (6)             bsr     ADIV16
E1A3 8DD7             (        forth.asm):00556 (6)             bsr     HEX1D
E1A5 A661             (        forth.asm):00557 (4+1)           lda     1,s
E1A7 8DD3             (        forth.asm):00558 (6)             bsr     HEX1D
E1A9 3506             (        forth.asm):00559 (4+2)           puls    d
E1AB 6FA4             (        forth.asm):00560 (6+0)           clr     ,y
E1AD 39               (        forth.asm):00561 (4)             rts
                      (        forth.asm):00562         
E1AE 3406             (        forth.asm):00563 (4+2)   HDMP2   pshs    d
E1B0 8DDE             (        forth.asm):00564 (6)             bsr     ADIV16
E1B2 8DC8             (        forth.asm):00565 (6)             bsr     HEX1D
E1B4 A6E4             (        forth.asm):00566 (4+0)           lda     ,s
E1B6 8DC4             (        forth.asm):00567 (6)             bsr     HEX1D
E1B8 3506             (        forth.asm):00568 (4+2)           puls    d
E1BA 6FA4             (        forth.asm):00569 (6+0)           clr     ,y
E1BC 39               (        forth.asm):00570 (4)             rts
                      (        forth.asm):00571         
                      (        forth.asm):00572                 IFNE    HVNMI
                      (        forth.asm):00573         * Add string pointed to by X starting at the address stored in Y.
E1BD 3402             (        forth.asm):00574 (4+1)   ADDS    pshs    a
E1BF A680             (        forth.asm):00575 (4+1)   @adds1  lda     ,x+
E1C1 A7A0             (        forth.asm):00576 (4+1)           sta     ,y+
E1C3 26FA             (        forth.asm):00577 (3)             bne     @adds1
E1C5 3502             (        forth.asm):00578 (4+1)           puls    a
E1C7 39               (        forth.asm):00579 (4)             rts
                      (        forth.asm):00580         
E1C8 8DF3             (        forth.asm):00581 (6)     NMI2DM  bsr     ADDS
E1CA 313F             (        forth.asm):00582 (4+1)           leay    -1,y            Backward over NUL
E1CC 20E0             (        forth.asm):00583 (3)             bra     HDMP2
                      (        forth.asm):00584         
E1CE 8DED             (        forth.asm):00585 (6)     NMI4DM  bsr     ADDS
E1D0 313F             (        forth.asm):00586 (4+1)           leay    -1,y            Backward over NUL
E1D2 20C1             (        forth.asm):00587 (3)             bra     HDMP4
                      (        forth.asm):00588         
E1D4 8E03EA           (        forth.asm):00589 (3)     NMIDML  ldx     #TBUFF
E1D7 BDE2F3           (        forth.asm):00590 (7)             jsr     PUTS
E1DA 7EE300           (        forth.asm):00591 (3)             jmp     PUTCR
                      (        forth.asm):00592         
                      (        forth.asm):00593         * All registers are stacked in native mode.
E1DD B6D800           (        forth.asm):00594 (4)     NMIHDL  lda     ACIACTL
E1E0 3402             (        forth.asm):00595 (4+1)           pshs    a
E1E2 9643             (        forth.asm):00596 (3)             lda     XMITOK
E1E4 3402             (        forth.asm):00597 (4+1)           pshs    a
E1E6 8601             (        forth.asm):00598 (2)             lda     #1
E1E8 9743             (        forth.asm):00599 (3)             sta     XMITOK
                      (        forth.asm):00600         * Stack structure at this point
                      (        forth.asm):00601         * 0     saved XMITOK: 1 byte
                      (        forth.asm):00602         * 1     saved ACIA status register: 1 byte
                      (        forth.asm):00603         * 2     CC
                      (        forth.asm):00604         * 3     D
                      (        forth.asm):00605         * 5     W
                      (        forth.asm):00606         * 7     DP
                      (        forth.asm):00607         * 8     X
                      (        forth.asm):00608         * 10    Y
                      (        forth.asm):00609         * 12    U
                      (        forth.asm):00610         * 14    PC
E1EA BDE300           (        forth.asm):00611 (7)             jsr     PUTCR
                      (        forth.asm):00612         
                      (        forth.asm):00613         * First line: CC, D, W, DP, X, Y, U, PC, S
E1ED 108E03EA         (        forth.asm):00614 (4)             ldy     #TBUFF
E1F1 8EE220           (        forth.asm):00615 (3)             ldx     #CCREGM
E1F4 A662             (        forth.asm):00616 (4+1)           lda     2,s             CC in the system stack
E1F6 8DD0             (        forth.asm):00617 (6)             bsr     NMI2DM
                      (        forth.asm):00618         
E1F8 EC63             (        forth.asm):00619 (5+1)           ldd     3,s             D in the system stack
E1FA 8DD2             (        forth.asm):00620 (6)             bsr     NMI4DM
                      (        forth.asm):00621         
E1FC EC65             (        forth.asm):00622 (5+1)           ldd     5,s             W in the system stack
E1FE 8DCE             (        forth.asm):00623 (6)             bsr     NMI4DM
                      (        forth.asm):00624         
E200 A667             (        forth.asm):00625 (4+1)           lda     7,s             DP in the system stack
E202 8DC4             (        forth.asm):00626 (6)             bsr     NMI2DM
                      (        forth.asm):00627         
E204 EC68             (        forth.asm):00628 (5+1)           ldd     8,s             X in the system stack
E206 8DC6             (        forth.asm):00629 (6)             bsr     NMI4DM
                      (        forth.asm):00630         
E208 EC6A             (        forth.asm):00631 (5+1)           ldd     10,s            Y in the system stack
E20A 8DC2             (        forth.asm):00632 (6)             bsr     NMI4DM
                      (        forth.asm):00633         
E20C EC6C             (        forth.asm):00634 (5+1)           ldd     12,s            U in the system stack
E20E 8DBE             (        forth.asm):00635 (6)             bsr     NMI4DM
                      (        forth.asm):00636         
E210 EC6E             (        forth.asm):00637 (5+1)           ldd     14,s            PC in the system stack
E212 8DBA             (        forth.asm):00638 (6)             bsr     NMI4DM
                      (        forth.asm):00639         
E214 33E810           (        forth.asm):00640 (4+1)           leau    16,s            S in the system stack
E217 1F30             (        forth.asm):00641 (4)             tfr     u,d
E219 8DB3             (        forth.asm):00642 (6)             bsr     NMI4DM
                      (        forth.asm):00643         
E21B 8DB7             (        forth.asm):00644 (6)             bsr     NMIDML
                      (        forth.asm):00645         
                      (        forth.asm):00646                 IFNE    HVNMI2
                      (        forth.asm):00647         * Second line: ACIST, XMTOK, SBASE, SBENQ, SBDEQ, SBCNT, SBDROPC
                      (        forth.asm):00648                 ldy     #TBUFF
                      (        forth.asm):00649                 ldx     #ACISTM
                      (        forth.asm):00650                 lda     1,s             ACIA status register in the system stack
                      (        forth.asm):00651                 bsr     NMI2DM
                      (        forth.asm):00652         
                      (        forth.asm):00653                 lda     ,s              XMITOK in the system stack
                      (        forth.asm):00654                 bsr     NMI2DM
                      (        forth.asm):00655         
                      (        forth.asm):00656                 ldd     #SERBUF         SERBUF address
                      (        forth.asm):00657                 bsr     NMI4DM
                      (        forth.asm):00658         
                      (        forth.asm):00659                 lda     SERBENQ         SERBENQ 8 bit offset
                      (        forth.asm):00660                 bsr     NMI2DM
                      (        forth.asm):00661         
                      (        forth.asm):00662                 lda     SERBDEQ         SERBDEQ 8 bit offset
                      (        forth.asm):00663                 bsr     NMI2DM
                      (        forth.asm):00664         
                      (        forth.asm):00665                 lda     SERBCNT
                      (        forth.asm):00666                 bsr     NMI2DM
                      (        forth.asm):00667         
                      (        forth.asm):00668                 ldd     SBDROPC         Number of bytes dropped because SERBUF was full
                      (        forth.asm):00669                 bsr     NMI4DM
                      (        forth.asm):00670         
                      (        forth.asm):00671                 bsr     NMIDML
                      (        forth.asm):00672                 ENDC                    HVNMI2
                      (        forth.asm):00673         
E21D 3262             (        forth.asm):00674 (4+1)           leas    2,s             System stack cleanup
E21F 3B               (        forth.asm):00675 (17+?)          rti
                      (        forth.asm):00676         
E220 43432000         (        forth.asm):00677         CCREGM  fcn     'CC '
E224 20442000         (        forth.asm):00678         DREGM   fcn     ' D '
E228 20572000         (        forth.asm):00679         WREGM   fcn     ' W '
E22C 2044502000       (        forth.asm):00680         DPREGM  fcn     ' DP '
E231 20582000         (        forth.asm):00681         XREGM   fcn     ' X '
E235 20592000         (        forth.asm):00682         YREGM   fcn     ' Y '
E239 20552000         (        forth.asm):00683         UREGM   fcn     ' U '
E23D 2050432000       (        forth.asm):00684         PCREGM  fcn     ' PC '
E242 20532000         (        forth.asm):00685         SREGM   fcn     ' S '
                      (        forth.asm):00686                 IFNE    HVNMI2
E246                  (        forth.asm):00687         ACISTM  fcn     'AS '
E246                  (        forth.asm):00688         XMTOKM  fcn     ' XO '
E246                  (        forth.asm):00689         SBASEM  fcn     ' SB '
E246                  (        forth.asm):00690         SBENQM  fcn     ' EN '
E246                  (        forth.asm):00691         SBSEQM  fcn     ' DE '
E246                  (        forth.asm):00692         SBCNTM  fcn     ' CN '
E246                  (        forth.asm):00693         SBDRPM  fcn     ' DR '
                      (        forth.asm):00694                 ENDC                    HVNMI2
                      (        forth.asm):00695         
                      (        forth.asm):00696                 ENDC                    HVNMI
                      (        forth.asm):00697         
                      (        forth.asm):00698         * Returns the length of the string pointed to by X (terminator excluded) in W.
E246 3410             (        forth.asm):00699 (4+2)   SLEN    pshs    x
E248 105F             (        forth.asm):00700 (2)             clrw
E24A 105C             (        forth.asm):00701 (2)     @slen1  incw
E24C A680             (        forth.asm):00702 (4+1)           lda     ,x+
E24E 26FA             (        forth.asm):00703 (3)             bne     @slen1
E250 105A             (        forth.asm):00704 (2)             decw
E252 3510             (        forth.asm):00705 (4+2)           puls    x
E254 39               (        forth.asm):00706 (4)             rts
                      (        forth.asm):00707         
                      (        forth.asm):00708                 include console.asm
                      (      console.asm):00001         * FIRQ interrupt handler. This is entered on RDRF (input available).
E255 3416             (      console.asm):00002 (4+4)   FIRQHDL pshs    x,d
                      (      console.asm):00003                 IFNE    RTCFEAT
                      (      console.asm):00004                 jsr     RTCIHDL         Check for RTC periodic interrupt
                      (      console.asm):00005                 ENDC                    RTCFEAT
E257 B6D800           (      console.asm):00006 (4)             lda     ACIACTL
E25A 8580             (      console.asm):00007 (2)             bita    #ACIISVC        Does the ACIA need input service?
E25C 2731             (      console.asm):00008 (3)             beq     @nsintr         No. This is not the IRQ source we're looking for
                      (      console.asm):00009                 IFNE    DEBUG
                      (      console.asm):00010                 bita    #ACIRDRF
                      (      console.asm):00011                 beq     @nsintr         ACIA RDRF status bit should be set in all cases
                      (      console.asm):00012                 bita    #ACIOVRN        ACIA data overrun on read?
                      (      console.asm):00013                 beq     @datval         No, incoming data is valid
                      (      console.asm):00014                 ldb     ACIADAT         Clear overrun bit and INTACK
                      (      console.asm):00015                 ldb     #'%             Error indicating character is %
                      (      console.asm):00016                 bra     @chkovf
                      (      console.asm):00017                 ENDC                    DEBUG
                      (      console.asm):00018         * Out of band characters processing.
E25E F6D801           (      console.asm):00019 (4)     @datval ldb     ACIADAT         Incoming data byte to B and INTACK
E261 C103             (      console.asm):00020 (2)             cmpb    #ETX            Control-C?
E263 272D             (      console.asm):00021 (3)             beq     @sigint         Yes
E265 C113             (      console.asm):00022 (2)             cmpb    #XOFF
E267 2742             (      console.asm):00023 (3)             beq     @outngo         Output is being suspended
E269 C111             (      console.asm):00024 (2)             cmpb    #XON
E26B 2741             (      console.asm):00025 (3)             beq     @outok          Output is being re-enabled
E26D 9642             (      console.asm):00026 (3)     @chkovf lda     SERBCNT
E26F 810F             (      console.asm):00027 (2)             cmpa    #15             At high water level mark?
E271 2609             (      console.asm):00028 (3)             bne     @sbenq          No, proceed without negating RTS#
E273 3404             (      console.asm):00029 (4+1)           pshs    b
E275 C6D5             (      console.asm):00030 (2)             ldb     #ACIRTS1
E277 F7D800           (      console.asm):00031 (4)             stb     ACIACTL         Negate RTS#
E27A 3504             (      console.asm):00032 (4+1)           puls    b
E27C 8140             (      console.asm):00033 (2)     @sbenq  cmpa    #SERBSZ
                      (      console.asm):00034                 IFNE    HVNMI2
                      (      console.asm):00035                 beq     @nsdrop         Serial input buffer physically full
                      (      console.asm):00036                 ELSE
E27E 270F             (      console.asm):00037 (3)             beq     @nsintr         Serial input buffer physically full
                      (      console.asm):00038                 ENDC                    HVNMI2
E280 4C               (      console.asm):00039 (1)             inca
E281 9742             (      console.asm):00040 (3)             sta     SERBCNT         Update incoming FIFO byte count
E283 8E0144           (      console.asm):00041 (3)             ldx     #SERBUF
E286 9640             (      console.asm):00042 (3)             lda     SERBENQ         Enqueue offset to A
E288 E786             (      console.asm):00043 (4+1)           stb     a,x             Enqueue incoming character
E28A 4C               (      console.asm):00044 (1)             inca
E28B 843F             (      console.asm):00045 (2)             anda    #SERBSZ-1       Modulo arithmetic
E28D 9740             (      console.asm):00046 (3)             sta     SERBENQ
E28F 3516             (      console.asm):00047 (4+4)   @nsintr puls    d,x
E291 3B               (      console.asm):00048 (17+?)          rti
                      (      console.asm):00049         * Control-C was recognized.
E292 3264             (      console.asm):00050 (4+1)   @sigint leas    4,s             Drop D and X
E294 9641             (      console.asm):00051 (3)             lda     SERBDEQ
E296 9740             (      console.asm):00052 (3)             sta     SERBENQ
E298 0F42             (      console.asm):00053 (5)             clr     SERBCNT         Serial input buffer has been emptied
E29A BDEB2B           (      console.asm):00054                 RFXT    jsr,NCLR+7      Clear the data stack
E29D BDEB37           (      console.asm):00055                 RFXT    jsr,RCLR+7      and the return stack
E2A0 10AE61           (      console.asm):00056 (6+1)           ldy     1,s             Saved PC from the FIRQ stack
E2A3 8EE76D           (      console.asm):00057 (3)             ldx     #ERRHD1
E2A6 AF61             (      console.asm):00058 (5+1)           stx     1,s             Execution continues in the error handler
E2A8 C603             (      console.asm):00059 (2)             ldb     #3              with ABORT error code passed through B
E2AA 3B               (      console.asm):00060 (17+?)          rti
E2AB 4F               (      console.asm):00061 (1)     @outngo clra
E2AC 2002             (      console.asm):00062 (3)             bra     @sxmsta
E2AE 8601             (      console.asm):00063 (2)     @outok  lda     #1
E2B0 9743             (      console.asm):00064 (3)     @sxmsta sta     XMITOK          Update XMIT status flag
E2B2 20DB             (      console.asm):00065 (3)             bra     @nsintr
                      (      console.asm):00066                 IFNE    HVNMI2
                      (      console.asm):00067         * Increment character drop count (displayed by NMIHDL).
E2B4                  (      console.asm):00068         @nsdrop ldd     SBDROPC
                      (      console.asm):00069                 incd
                      (      console.asm):00070                 std     SBDROPC
                      (      console.asm):00071                 bra     @nsintr
                      (      console.asm):00072                 ENDC                    HVNMI2
                      (      console.asm):00073         
                      (      console.asm):00074         * We do not have to talk to the ACIA directly, unless SERBCNT is zero,
                      (      console.asm):00075         * in which case we have to lower RTS#, so as to accept incoming characters.
                      (      console.asm):00076         * This can only be called from base level!
E2B4 3416             (      console.asm):00077 (4+4)   GETCH   pshs    x,d
E2B6 0D42             (      console.asm):00078 (4)     @again  tst     SERBCNT
E2B8 260F             (      console.asm):00079 (3)             bne     @sbdind         We have incoming material
E2BA C695             (      console.asm):00080 (2)             ldb     #ACIRTS0
E2BC F7D800           (      console.asm):00081 (4)             stb     ACIACTL         Assert RTS#
E2BF 1CBF             (      console.asm):00082 (2)             andcc   #^FFLAG         Unmask FIRQ
E2C1 8E0001           (      console.asm):00083 (3)             ldx     #1
E2C4 BDF854           (      console.asm):00084 (7)             jsr     MILLIS1         Busy waiting for one millisecond
E2C7 20ED             (      console.asm):00085 (3)             bra     @again          Try again
                      (      console.asm):00086         * Serial buffer data indication.
E2C9 1A40             (      console.asm):00087 (2)     @sbdind orcc    #FFLAG          Mask FIRQ
E2CB 0A42             (      console.asm):00088 (5)             dec     SERBCNT
E2CD 1CBF             (      console.asm):00089 (2)             andcc   #^FFLAG         Unmask FIRQ
E2CF 8E0144           (      console.asm):00090 (3)             ldx     #SERBUF
E2D2 9641             (      console.asm):00091 (3)             lda     SERBDEQ         Dequeue offset to A
E2D4 E686             (      console.asm):00092 (4+1)           ldb     a,x             Buffered input character to B
E2D6 E7E4             (      console.asm):00093 (4+0)           stb     ,s              Incoming character to A in the caller's stack
E2D8 4C               (      console.asm):00094 (1)             inca
E2D9 843F             (      console.asm):00095 (2)             anda    #SERBSZ-1       Modulo arithmetic
E2DB 9741             (      console.asm):00096 (3)             sta     SERBDEQ
E2DD 3516             (      console.asm):00097 (4+4)           puls    d,x             Same as it ever was
E2DF 39               (      console.asm):00098 (4)             rts
                      (      console.asm):00099         
E2E0 3404             (      console.asm):00100 (4+1)   PUTCH   pshs    b
E2E2 C602             (      console.asm):00101 (2)             ldb     #ACITDRE
E2E4 F5D800           (      console.asm):00102 (4)     @tdrdrn bitb    ACIACTL
E2E7 27FB             (      console.asm):00103 (3)             beq     @tdrdrn         Drain the transmit data register
E2E9 0D43             (      console.asm):00104 (4)     @wfxon  tst     XMITOK          Software flow control on output
E2EB 27FC             (      console.asm):00105 (3)             beq     @wfxon          Wait for XON
E2ED B7D801           (      console.asm):00106 (4)             sta     ACIADAT         Transmit data
E2F0 3504             (      console.asm):00107 (4+1)           puls    b
E2F2 39               (      console.asm):00108 (4)             rts
                      (      console.asm):00109         
                      (      console.asm):00110         * Send NUL terminated string pointed to by X to the ACIA.
E2F3 3416             (      console.asm):00111 (4+4)   PUTS    pshs    x,d
E2F5 A680             (      console.asm):00112 (4+1)   @puts1  lda     ,x+
E2F7 2704             (      console.asm):00113 (3)             beq     @puts2         NUL marks the end of the string
E2F9 8DE5             (      console.asm):00114 (6)             bsr     PUTCH
E2FB 20F8             (      console.asm):00115 (3)             bra     @puts1
E2FD 3516             (      console.asm):00116 (4+4)   @puts2  puls    d,x
E2FF 39               (      console.asm):00117 (4)             rts
                      (      console.asm):00118         
E300 3410             (      console.asm):00119 (4+2)   PUTCR   pshs    x
E302 8EFE5B           (      console.asm):00120 (3)             ldx     #CRLFSTR
E305 8DEC             (      console.asm):00121 (6)             bsr     PUTS
E307 3510             (      console.asm):00122 (4+2)           puls    x
E309 39               (      console.asm):00123 (4)             rts
                      (      console.asm):00124         
E30A 8608             (      console.asm):00125 (2)     _BS     lda     #BS
E30C 8DD2             (      console.asm):00126 (6)             bsr     PUTCH          Output BS
E30E 8620             (      console.asm):00127 (2)             lda     #SP
E310 8DCE             (      console.asm):00128 (6)             bsr     PUTCH          Clear character
E312 8608             (      console.asm):00129 (2)             lda     #BS
E314 20CA             (      console.asm):00130 (3)             bra     PUTCH          And go back again
                      (      console.asm):00131         
                      (      console.asm):00132         * Receive CR terminated string and store it to X.
                      (      console.asm):00133         * Upon entry B contains the receiving buffer length.
                      (      console.asm):00134         * (excluding the NUL terminator). On exit, B will
                      (      console.asm):00135         * contain the number of characters entered (excluding
                      (      console.asm):00136         * the trailing NUL). A and X are preserved. B will
                      (      console.asm):00137         * have the actual number of characters entered.
                      (      console.asm):00138         * Implementation of $05D9 in the TRS-80 Level II ROM.
E316 C102             (      console.asm):00139 (2)     GETS    cmpb    #2
E318 2401             (      console.asm):00140 (3)             bhs     @gets0          B must be 2 or more
E31A 39               (      console.asm):00141 (4)             rts
E31B 3416             (      console.asm):00142 (4+4)   @gets0  pshs    x,d
E31D 8D95             (      console.asm):00143 (6)     @gets1  bsr     GETCH
E31F 8108             (      console.asm):00144 (2)             cmpa    #BS             Backspace?
E321 260B             (      console.asm):00145 (3)             bne     @gets3
E323 E161             (      console.asm):00146 (4+1)           cmpb    1,s             B upon routine entry
E325 27F6             (      console.asm):00147 (3)             beq     @gets1          Do not go beyond the beginning of the buffer
E327 8DE1             (      console.asm):00148 (6)             bsr     _BS
E329 301F             (      console.asm):00149 (4+1)           leax    -1,x
E32B 5C               (      console.asm):00150 (1)             incb
E32C 20EF             (      console.asm):00151 (3)             bra     @gets1
E32E 8115             (      console.asm):00152 (2)     @gets3  cmpa    #NAK            Kill input?
E330 260B             (      console.asm):00153 (3)             bne     @gets5
                      (      console.asm):00154         * While B != 1,S (initial buffer length), decrement X, increment B.
E332 E161             (      console.asm):00155 (4+1)   @gets4  cmpb    1,s
E334 27E7             (      console.asm):00156 (3)             beq     @gets1
E336 8DD2             (      console.asm):00157 (6)             bsr     _BS
E338 301F             (      console.asm):00158 (4+1)           leax     -1,x
E33A 5C               (      console.asm):00159 (1)             incb
E33B 20F5             (      console.asm):00160 (3)             bra     @gets4
                      (      console.asm):00161         * Regular input handling: echo input character.
E33D 810D             (      console.asm):00162 (2)     @gets5  cmpa    #CR
E33F 2709             (      console.asm):00163 (3)             beq     @gets6          Minicom only sends CR
E341 8D9D             (      console.asm):00164 (6)             bsr     PUTCH
E343 A780             (      console.asm):00165 (4+1)           sta     ,x+
E345 5A               (      console.asm):00166 (1)             decb
E346 C101             (      console.asm):00167 (2)             cmpb    #1              End of buffer reached?
E348 26D3             (      console.asm):00168 (3)             bne     @gets1
E34A 8620             (      console.asm):00169 (2)     @gets6  lda     #SP
E34C 8D92             (      console.asm):00170 (6)             bsr     PUTCH
E34E 6F84             (      console.asm):00171 (6+0)           clr     ,x
E350 1F10             (      console.asm):00172 (4)             tfr     x,d
E352 A362             (      console.asm):00173 (5+1)           subd    2,s             Actual number of characters entered
E354 E761             (      console.asm):00174 (4+1)           stb     1,s             Stored to B (through the system stack).         
E356 3516             (      console.asm):00175 (4+4)           puls    d,x
E358 39               (      console.asm):00176 (4)             rts
                      (      console.asm):00177         
                      (        forth.asm):00709         
E359 BDEB2B           (        forth.asm):00710         FORTHIN RFXT    jsr,NCLR+7      XT for NCLR. Set up the normal stack
E35C BDEB37           (        forth.asm):00711                 RFXT    jsr,RCLR+7      XT for RCLR. Set up the return stack
                      (        forth.asm):00712         * Relocate '@' code to RAM and set it up as the last dictionary entry (RO).
E35F 8EFDDE           (        forth.asm):00713 (3)             ldx     #THEEND         Source address for tfm
E362 1086000D         (        forth.asm):00714 (4)             ldw     #(REALEND-THEEND) Byte count for tfm
E366 108E0C60         (        forth.asm):00715 (4)             ldy     #WDICSPC        Destination address for tfm
E36A 109F06           (        forth.asm):00716 (5)             sty     LSTWAD
E36D 113812           (        forth.asm):00717 (6+?)           tfm     x+,y+
E370 109F08           (        forth.asm):00718 (5)             sty     DICEND
                      (        forth.asm):00719                 IFNE    RELFEAT
E373 BDEC4B           (        forth.asm):00720                 RFXT    jsr,MONITOR+10  XT for MONITOR (monitor @ in RAM)
                      (        forth.asm):00721                 ENDC                    RELFEAT
E376 8D03             (        forth.asm):00722 (6)             bsr     EMPTYB          Buffer related initializations
                      (        forth.asm):00723                 IFNE    DEBUG
                      (        forth.asm):00724                 clrd
                      (        forth.asm):00725                 std     USTATE          Initial mode is interpretation
                      (        forth.asm):00726                 std     USCR            Clear SCR
                      (        forth.asm):00727                 std     UBLK            Clear BLK
                      (        forth.asm):00728                 std     UTOIN           Clear >IN
                      (        forth.asm):00729                 ENDC                    DEBUG
E378 7EFB56           (        forth.asm):00730                 RFXT    jmp,DECIMAL+10  XT for DECIMAL. Default base is decimal
                      (        forth.asm):00731         
E37B 8E0440           (        forth.asm):00732 (3)     EMPTYB  ldx     #BUF0
E37E 8D03             (        forth.asm):00733 (6)             bsr     EMPT1B
E380 8E0850           (        forth.asm):00734 (3)             ldx     #BUF1
                      (        forth.asm):00735         * Empty the buffer pointed to by X.
E383 9F1A             (        forth.asm):00736 (4)     EMPT1B  stx     MRUBUFA         Update most recently used buffer address
E385 30890400         (        forth.asm):00737 (4+3)           leax    BOTERM,x        Buffer offset to the terminator field
E389 104F             (        forth.asm):00738 (2)             clrd
E38B ED84             (        forth.asm):00739 (5+0)           std     ,x              Clear terminator and flags fields
                      (        forth.asm):00740                 IFNE    DEBUG
                      (        forth.asm):00741                 ldd     #$C7C7
                      (        forth.asm):00742                 std     2,x             Dummy block number
                      (        forth.asm):00743                 ENDC                    DEBUG
E38D 39               (        forth.asm):00744 (4)             rts
                      (        forth.asm):00745         
                      (        forth.asm):00746         * Scan for the next non-space character pointed to by X.
                      (        forth.asm):00747         * That character is returned through A. Flags are set accordingly.
E38E A680             (        forth.asm):00748 (4+1)   SCNSTOK lda     ,x+
E390 2704             (        forth.asm):00749 (3)             beq     @scstk1
E392 8120             (        forth.asm):00750 (2)             cmpa    #SP
E394 27F8             (        forth.asm):00751 (3)             beq     SCNSTOK
E396 301F             (        forth.asm):00752 (4+1)   @scstk1 leax    -1,x            Keep X pointing at the beginning of the token
E398 9F02             (        forth.asm):00753 (4)             stx     TOKENSP
E39A 4D               (        forth.asm):00754 (1)             tsta                    Have to test again because LEA affects Z
E39B 39               (        forth.asm):00755 (4)             rts
                      (        forth.asm):00756         
                      (        forth.asm):00757         * Scan for the next white space character (or NUL) as an end of token marker.
                      (        forth.asm):00758         * Upon entry:
                      (        forth.asm):00759         * - X points to the input stream.
                      (        forth.asm):00760         * Upon return:
                      (        forth.asm):00761         * - X will point to the next space character or NUL.
                      (        forth.asm):00762         * - CURTOKL will hold the current token length (returned in B).
                      (        forth.asm):00763         * - TOKENEP will point to the end of the current token.
E39C 5F               (        forth.asm):00764 (1)     SCNETOK clrb
E39D 5C               (        forth.asm):00765 (1)     @scetok incb
E39E A680             (        forth.asm):00766 (4+1)           lda     ,x+
E3A0 2704             (        forth.asm):00767 (3)             beq     @scetk1
E3A2 8120             (        forth.asm):00768 (2)             cmpa    #SP
E3A4 26F7             (        forth.asm):00769 (3)             bne     @scetok
E3A6 301F             (        forth.asm):00770 (4+1)   @scetk1 leax    -1,x            Keep X pointing at the end of the token
E3A8 9F04             (        forth.asm):00771 (4)             stx     TOKENEP
E3AA 5A               (        forth.asm):00772 (1)             decb
E3AB D738             (        forth.asm):00773 (3)             stb     CURTOKL
E3AD 39               (        forth.asm):00774 (4)             rts
                      (        forth.asm):00775         
                      (        forth.asm):00776         * Check for numeric literal BASE prefix. On entry X has the input stream
                      (        forth.asm):00777         * pointer. On exit, BASE is altered if needed and the original BASE saved
                      (        forth.asm):00778         * to BASBKUP. If BASE was not changed, BASBKUP will be zero.
                      (        forth.asm):00779         * D is altered, X is updated if a BASE prefix is detected, other registers
                      (        forth.asm):00780         * are untouched.
E3AE E684             (        forth.asm):00781 (4+0)   CKNBPFX ldb     ,x              B has a potential base prefix character
E3B0 3410             (        forth.asm):00782 (4+2)           pshs    x
E3B2 8EFFB1           (        forth.asm):00783 (3)             ldx     #BASALST        A associative list (A-list) of BASE prefixes
E3B5 A681             (        forth.asm):00784 (4+2)   @pflkup lda     ,x++            Potential BASE prefix character to A
E3B7 2707             (        forth.asm):00785 (3)             beq     @nopfix         Reached the end of the A-list. No prefix found
E3B9 103798           (        forth.asm):00786 (4)             cmpr    b,a             Prefix match?
E3BC 2707             (        forth.asm):00787 (3)             beq     @pfxfnd         Yes
E3BE 20F5             (        forth.asm):00788 (3)             bra     @pflkup
E3C0 0F2C             (        forth.asm):00789 (5)     @nopfix clr     BASBKUP         Nothing to be restored to BASE
E3C2 3510             (        forth.asm):00790 (4+2)           puls    x
E3C4 39               (        forth.asm):00791 (4)             rts
E3C5 961F             (        forth.asm):00792 (3)     @pfxfnd lda     UBASE+1
E3C7 972C             (        forth.asm):00793 (3)             sta     BASBKUP         Back up the current BASE value
E3C9 A61F             (        forth.asm):00794 (4+1)           lda     -1,x            The BASE specified by the prefix
E3CB 971F             (        forth.asm):00795 (3)             sta     UBASE+1         Update BASE
E3CD 3510             (        forth.asm):00796 (4+2)           puls    x
E3CF 3001             (        forth.asm):00797 (4+1)           leax    1,x             Skip the prefix from the input stream
E3D1 39               (        forth.asm):00798 (4)             rts
                      (        forth.asm):00799         
                      (        forth.asm):00800         * Restore BASE if a numeric literal BASE prefix was detected.
                      (        forth.asm):00801         * X is to be preserved at all cost!
E3D2 962C             (        forth.asm):00802 (3)     RSBSPFX lda     BASBKUP
E3D4 2702             (        forth.asm):00803 (3)             beq     @theend
E3D6 971F             (        forth.asm):00804 (3)             sta     UBASE+1
E3D8 39               (        forth.asm):00805 (4)     @theend rts
                      (        forth.asm):00806         
                      (        forth.asm):00807         * Check whether BASE is in the supported range ([2..36]).
E3D9 961F             (        forth.asm):00808 (3)     CKBASE  lda     UBASE+1         BASE
E3DB 8102             (        forth.asm):00809 (2)             cmpa    #2
E3DD 2505             (        forth.asm):00810 (3)             blo     @ckbser         Must be >= 2
E3DF 8124             (        forth.asm):00811 (2)             cmpa    #36
E3E1 2201             (        forth.asm):00812 (3)             bhi     @ckbser         And <= 36 (the ANSI maximum)
E3E3 39               (        forth.asm):00813 (4)             rts
E3E4 C60F             (        forth.asm):00814 (2)     @ckbser ldb     #15             Invalid BASE
E3E6 BDE76A           (        forth.asm):00815 (7)             jsr     ERRHDLR         No return
     E3E9             (        forth.asm):00816         CKBASRA equ     *
                      (        forth.asm):00817         
                      (        forth.asm):00818         * NUMCVT performs a signed string to number conversion. The input string is
                      (        forth.asm):00819         * acquired from the input stream. Note that this routine always is called
                      (        forth.asm):00820         * after a dictionary lookup (SWDIC), so TOKENSP and CURTOKL are guaranteed
                      (        forth.asm):00821         * to have been set previously. There are two ways out this routine:
                      (        forth.asm):00822         * - redirection to the error handler (Undefined word), or
                      (        forth.asm):00823         * - a converted cell or double cell returned through the data stack.
                      (        forth.asm):00824         *   Upon return, ISDBLF being NZ will indicate a double.
E3E9 8DEE             (        forth.asm):00825 (6)     NUMCVT  bsr     CKBASE          No return if BASE isn't in the [2..36] range
E3EB 0F35             (        forth.asm):00826 (5)             clr     ISNEGF          Assume the result is positive
E3ED 0F36             (        forth.asm):00827 (5)             clr     ISDBLF          Assume the result is not a double number
E3EF 9E02             (        forth.asm):00828 (4)             ldx     TOKENSP
E3F1 8DBB             (        forth.asm):00829 (6)             bsr     CKNBPFX         Check for numeric literal BASE prefix
                      (        forth.asm):00830         * Check for optional minus sign.
E3F3 A684             (        forth.asm):00831 (4+0)           lda     ,x
E3F5 812D             (        forth.asm):00832 (2)             cmpa    #'-
E3F7 2604             (        forth.asm):00833 (3)             bne     @ncini
E3F9 0C35             (        forth.asm):00834 (5)             inc     ISNEGF          Remember to negate the result before returning
E3FB 3001             (        forth.asm):00835 (4+1)           leax    1,x             Skip the negativity!
E3FD 1F12             (        forth.asm):00836 (4)     @ncini  tfr     x,y             Backup input stream pointer
E3FF 1FC1             (        forth.asm):00837 (4)             tfr     0,x             Initialize the result
E401 BDE7ED           (        forth.asm):00838 (7)             jsr     NPUSH           LSC
E404 BDE7ED           (        forth.asm):00839 (7)             jsr     NPUSH           MSC
E407 1F21             (        forth.asm):00840 (4)             tfr     y,x             Restore the input stream pointer
E409 301F             (        forth.asm):00841 (4+1)           leax    -1,x
E40B BDE7ED           (        forth.asm):00842 (7)             jsr     NPUSH           Base scanning address minus 1
E40E BDF4B7           (        forth.asm):00843                 RFXT    jsr,CONVERT+10
                      (        forth.asm):00844         * Upon return TOS C@ should be BL, NUL or . Anything else indicates an error.
                      (        forth.asm):00845         * In any case, at this point, at least three cells are on the data stack.
E411 3710             (        forth.asm):00846                 UCNPOP                  Address of the last non convertible char to X
E413 A684             (        forth.asm):00847 (4+0)           lda     ,x
E415 270A             (        forth.asm):00848 (3)             beq     @ncadj          NUL is acceptable
E417 8120             (        forth.asm):00849 (2)             cmpa    #SP
E419 2706             (        forth.asm):00850 (3)             beq     @ncadj          So is BL
E41B 812E             (        forth.asm):00851 (2)             cmpa    #'.             Was a double number meant?
E41D 2618             (        forth.asm):00852 (3)             bne     @ncnogo         No, we do not have a winner...
E41F 0C36             (        forth.asm):00853 (5)             inc     ISDBLF
                      (        forth.asm):00854         * If Z is not set at this point, we are dealing with a double number.
E421 260B             (        forth.asm):00855 (3)     @ncadj  bne     @ncdadj 
E423 3710             (        forth.asm):00856                 UCNPOP                  Drop the MSC
E425 0D35             (        forth.asm):00857 (4)             tst     ISNEGF          Are we dealing with a negative number?
E427 27A9             (        forth.asm):00858 (3)             beq     RSBSPFX         No. Restore BASE if needed--the end
E429 BDEF97           (        forth.asm):00859                 RFXT    jsr,NEGATE+9    Acknowledge the negativity
E42C 20A4             (        forth.asm):00860 (3)             bra     RSBSPFX         Restore BASE if needed--the end
E42E 0D35             (        forth.asm):00861 (4)     @ncdadj tst     ISNEGF          Are we dealing with a negative number?
E430 27A0             (        forth.asm):00862 (3)             beq     RSBSPFX         No. Restore BASE if needed--the end
E432 BDF3C4           (        forth.asm):00863                 RFXT    jsr,DNEG+10     Acknowledge the negativity
E435 209B             (        forth.asm):00864 (3)             bra     RSBSPFX         Restore BASE if needed--the end
E437 3344             (        forth.asm):00865 (4+1)   @ncnogo leau    4,u             Drop two cells from the data stack
E439 9E02             (        forth.asm):00866 (4)             ldx     TOKENSP         Beginning address of the current token
E43B C602             (        forth.asm):00867 (2)             ldb     #2              Undefined (X points to the offending word)
E43D BDE76A           (        forth.asm):00868 (7)             jsr     ERRHDLR         No return
     E440             (        forth.asm):00869         NUMCVRA equ     *               For symbolic stack dump purposes
E440 12               (        forth.asm):00870 (1)             nop
                      (        forth.asm):00871         
                      (        forth.asm):00872         * Convert number stored in X to a string (depending on BASE value).
                      (        forth.asm):00873         * Output is stored in the global TBUFF buffer. X is preserved.
E441 8D96             (        forth.asm):00874 (6)     CVNSTR  bsr     CKBASE
E443 0F35             (        forth.asm):00875 (5)             clr     ISNEGF
E445 1F10             (        forth.asm):00876 (4)             tfr     x,d
E447 0D37             (        forth.asm):00877 (4)             tst     CVISSGN         Are we to perform a signed conversion?
E449 2708             (        forth.asm):00878 (3)             beq     @cvnst1
E44B 104D             (        forth.asm):00879 (2)             tstd
E44D 2A04             (        forth.asm):00880 (3)             bpl     @cvnst1
E44F 0C35             (        forth.asm):00881 (5)             inc     ISNEGF          Number being converted is negative
E451 1040             (        forth.asm):00882 (2)             negd
E453 1F06             (        forth.asm):00883 (4)     @cvnst1 tfr     d,w
E455 104F             (        forth.asm):00884 (2)             clrd
E457 108E03FD         (        forth.asm):00885 (4)             ldy     #TBUFF+19       Sign + 16 digits + terminator + 1
E45B 6FA2             (        forth.asm):00886 (6+1)           clr     ,-y             End of string marker
E45D 119E1E           (        forth.asm):00887 (35)    @cvnst2 divq    UBASE           D returns the modulo and W the quotient
E460 8630             (        forth.asm):00888 (2)             lda     #'0
E462 C10A             (        forth.asm):00889 (2)             cmpb    #10
E464 2502             (        forth.asm):00890 (3)             bcs     @cvnst3
                      (        forth.asm):00891         * BASE has letters among its valid numbers.
E466 8637             (        forth.asm):00892 (2)             lda     #'A-10
E468 103089           (        forth.asm):00893 (4)     @cvnst3 addr    a,b
E46B E7A2             (        forth.asm):00894 (4+1)           stb     ,-y
E46D 104F             (        forth.asm):00895 (2)             clrd
E46F 105D             (        forth.asm):00896 (2)             tstw
E471 26EA             (        forth.asm):00897 (3)             bne     @cvnst2
E473 C620             (        forth.asm):00898 (2)             ldb     #SP
E475 0D35             (        forth.asm):00899 (4)             tst     ISNEGF
E477 2702             (        forth.asm):00900 (3)             beq     @cvnst4
E479 C62D             (        forth.asm):00901 (2)             ldb     #'-
E47B E7A2             (        forth.asm):00902 (4+1)   @cvnst4 stb     ,-y
                      (        forth.asm):00903         * We need to insert leading spaces up to the beginning of the output buffer.
E47D C620             (        forth.asm):00904 (2)             ldb     #SP
E47F 108C03EA         (        forth.asm):00905 (4)     @cvnst5 cmpy    #TBUFF
E483 2601             (        forth.asm):00906 (3)             bne     @cvnst6
E485 39               (        forth.asm):00907 (4)             rts
E486 E7A2             (        forth.asm):00908 (4+1)   @cvnst6 stb     ,-y
E488 20F5             (        forth.asm):00909 (3)             bra     @cvnst5
                      (        forth.asm):00910         
                      (        forth.asm):00911         * Check for minimal data stack depth. On input D has the lowest possible stack
                      (        forth.asm):00912         * address that satisfies the needs of the caller. This routine is meant
                      (        forth.asm):00913         * to support "transactional" behaviour, which is intended to improve
                      (        forth.asm):00914         * debugging support.
E48A 103703           (        forth.asm):00915 (4)     CHKNDPT cmpr    d,u
E48D 2201             (        forth.asm):00916 (3)             bhi     @stkudf
E48F 39               (        forth.asm):00917 (4)             rts
E490 C601             (        forth.asm):00918 (2)     @stkudf ldb     #1              Data stack underflow
E492 BDE76A           (        forth.asm):00919 (7)             jsr     ERRHDLR         No return
     E495             (        forth.asm):00920         CKDPTRA equ     *
                      (        forth.asm):00921         
                      (        forth.asm):00922         * Parameter stack's depth checking primitives (transactional behavior support).
E495 CC029420F0       (        forth.asm):00923         MIN1PST MINDREQ 1
                      (        forth.asm):00924         
E49A CC029220EB       (        forth.asm):00925         MIN2PST MINDREQ 2
                      (        forth.asm):00926         
E49F CC029020E6       (        forth.asm):00927         MIN3PST MINDREQ 3
                      (        forth.asm):00928         
E4A4 CC028E20E1       (        forth.asm):00929         MIN4PST MINDREQ 4
                      (        forth.asm):00930         
                      (        forth.asm):00931         * Search word beginning at address TOKENSP in the dictionary.
                      (        forth.asm):00932         * Upon return Z will be set if the word was not found.
                      (        forth.asm):00933         * Otherwise, Y will point to the code section of the word.
                      (        forth.asm):00934         * CSSNTVE (defined in constants.asm) defines whether the
                      (        forth.asm):00935         * dictionary match is case sensitive or not.
                      (        forth.asm):00936         * Important note: if the word is found TOKENEP will be copied to TOKENSP.
E4A9 9E02             (        forth.asm):00937 (4)     SWDIC   ldx     TOKENSP
E4AB BDE39C           (        forth.asm):00938 (7)             jsr     SCNETOK         B has CURTOKL
E4AE 9E08             (        forth.asm):00939 (4)             ldx     DICEND
E4B0 9F16             (        forth.asm):00940 (4)             stx     VLPRVEP         Last dictionary entry code address + 1
E4B2 9E02             (        forth.asm):00941 (4)             ldx     TOKENSP
E4B4 109E06           (        forth.asm):00942 (5)             ldy     LSTWAD          Latest word header address to Y
E4B7 2606             (        forth.asm):00943 (3)     @swrdc0 bne     @swrdc1
E4B9 1FC2             (        forth.asm):00944 (4)             tfr     0,y             Word not found. Z is set
E4BB 109F0E           (        forth.asm):00945 (5)             sty     PLOAD
E4BE 39               (        forth.asm):00946 (4)             rts
E4BF A6A4             (        forth.asm):00947 (4+0)   @swrdc1 lda     ,y              Word attribute to A
E4C1 841F             (        forth.asm):00948 (2)             anda    #WRLNMSK        Extract word length
E4C3 3420             (        forth.asm):00949 (4+2)           pshs    y
E4C5 103798           (        forth.asm):00950 (4)             cmpr    b,a             Word length match?
E4C8 2638             (        forth.asm):00951 (3)             bne     @swrdc3         No, point to next dictionary entry
E4CA 3121             (        forth.asm):00952 (4+1)           leay    1,y
E4CC A6A0             (        forth.asm):00953 (4+1)   @swrdc2 lda     ,y+
                      (        forth.asm):00954                 IFNE    CSSNTVE
                      (        forth.asm):00955                 cmpa    ,x+             Case sensitive dictionary
                      (        forth.asm):00956                 ELSE
E4CE 1F9E             (        forth.asm):00957 (4)             tfr     b,e             Case insensitive search (preferred)
E4D0 E680             (        forth.asm):00958 (4+1)           ldb     ,x+
E4D2 C161             (        forth.asm):00959 (2)             cmpb    #'a
E4D4 2506             (        forth.asm):00960 (3)             bcs     @nochg
E4D6 C17B             (        forth.asm):00961 (2)             cmpb    #'z+1
E4D8 2402             (        forth.asm):00962 (3)             bcc     @nochg
E4DA C020             (        forth.asm):00963 (2)             subb    #'a-'A
E4DC 103798           (        forth.asm):00964 (4)     @nochg  cmpr    b,a
E4DF 1FE9             (        forth.asm):00965 (4)             tfr     e,b
                      (        forth.asm):00966                 ENDC                    CSSNTVE
E4E1 261F             (        forth.asm):00967 (3)             bne     @swrdc3
E4E3 5A               (        forth.asm):00968 (1)             decb
E4E4 26E6             (        forth.asm):00969 (3)             bne     @swrdc2
                      (        forth.asm):00970         * Word match!
E4E6 3510             (        forth.asm):00971 (4+2)           puls    x
E4E8 E684             (        forth.asm):00972 (4+0)           ldb     ,x              Word attribute byte to B
E4EA 4F               (        forth.asm):00973 (1)             clra
E4EB 58               (        forth.asm):00974 (1)             lslb                    Bit 7 to CFLAG
E4EC 49               (        forth.asm):00975 (1)             rola                    CFLAG to A
E4ED 9739             (        forth.asm):00976 (3)             sta     IMDFLG          Set IMMEDIATE flag
E4EF 4F               (        forth.asm):00977 (1)             clra
E4F0 58               (        forth.asm):00978 (1)             lslb                    Bit 6 to CFLAG
E4F1 49               (        forth.asm):00979 (1)             rola                    CFLAG to A
E4F2 973A             (        forth.asm):00980 (3)             sta     DEFFLG          Set DEFINE flag
E4F4 9E04             (        forth.asm):00981 (4)             ldx     TOKENEP
E4F6 9F02             (        forth.asm):00982 (4)             stx     TOKENSP
                      (        forth.asm):00983                 IFNE    RELFEAT
E4F8 3123             (        forth.asm):00984 (4+1)           leay    3,y             Skip back pointer and checksum. Return XT
                      (        forth.asm):00985                 ELSE
                      (        forth.asm):00986                 leay    2,y             Skip back pointer. Return XT
                      (        forth.asm):00987                 ENDC                    RELFEAT
E4FA DC16             (        forth.asm):00988 (4)             ldd     VLPRVEP
E4FC 103220           (        forth.asm):00989 (4)             subr    y,d
E4FF DD0E             (        forth.asm):00990 (4)             std     PLOAD
E501 39               (        forth.asm):00991 (4)             rts                     NZ since there is no zero payload word
E502 3520             (        forth.asm):00992 (4+2)   @swrdc3 puls    y               Point to previous word header
E504 109F16           (        forth.asm):00993 (5)             sty     VLPRVEP
E507 4F               (        forth.asm):00994 (1)             clra
E508 E6A0             (        forth.asm):00995 (4+1)           ldb     ,y+
E50A C41F             (        forth.asm):00996 (2)             andb    #WRLNMSK
E50C 31AB             (        forth.asm):00997 (4+2)           leay    d,y
E50E 9E02             (        forth.asm):00998 (4)             ldx     TOKENSP
E510 D638             (        forth.asm):00999 (3)             ldb     CURTOKL
E512 10AEA4           (        forth.asm):01000 (6+0)           ldy     ,y
E515 20A0             (        forth.asm):01001 (3)             bra     @swrdc0
                      (        forth.asm):01002         
                      (        forth.asm):01003         * Create new dictionary entry. The word name being created is acquired from
                      (        forth.asm):01004         * the input stream. Warning, this requires a writable dictionary!
                      (        forth.asm):01005         * The new end of the dictionary is returned in Y. W is preserved.
E517 1038             (        forth.asm):01006 (6)     LOCWRT  pshsw
E519 9E08             (        forth.asm):01007 (4)             ldx     DICEND
                      (        forth.asm):01008                 IFNE    DEBUG
                      (        forth.asm):01009                 cmpx    #ROMSTRT
                      (        forth.asm):01010                 bcs     @locwr0
                      (        forth.asm):01011                 ldb     #10             Assertion failure (trying to write to ROM!)
                      (        forth.asm):01012                 jsr     ERRHDLR         No return
E51B                  (        forth.asm):01013         LWAFRA  equ     *
                      (        forth.asm):01014                 ENDC                    DEBUG
E51B 9F0C             (        forth.asm):01015 (4)     @locwr0 stx     BDICEND         Back pointer up
E51D 9E06             (        forth.asm):01016 (4)             ldx     LSTWAD
E51F 9F0A             (        forth.asm):01017 (4)             stx     BLSTWAD         Back pointer up
E521 BDE841           (        forth.asm):01018 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
E524 6D84             (        forth.asm):01019 (5+0)           tst     ,x
E526 2605             (        forth.asm):01020 (3)             bne     @locwr2
E528 C605             (        forth.asm):01021 (2)     @locwr1 ldb     #5              Missing word name
E52A BDE76A           (        forth.asm):01022 (7)             jsr     ERRHDLR         No return
     E52D             (        forth.asm):01023         LWMNRA  equ     *               LOCWRT missing word name return address
E52D BDE38E           (        forth.asm):01024 (7)     @locwr2 jsr     SCNSTOK
E530 27F6             (        forth.asm):01025 (3)             beq     @locwr1         End of line reached
E532 BDE39C           (        forth.asm):01026 (7)             jsr     SCNETOK         X has TOKENEP, B has CURTOKL
E535 109E02           (        forth.asm):01027 (5)             ldy     TOKENSP
E538 103221           (        forth.asm):01028 (4)             subr    y,x
E53B 3410             (        forth.asm):01029 (4+2)           pshs    x               Word length to the system stack
E53D 9E08             (        forth.asm):01030 (4)             ldx     DICEND
E53F A661             (        forth.asm):01031 (4+1)           lda     1,s             Word length LSB in the system stack
E541 8120             (        forth.asm):01032 (2)             cmpa    #1+WRLNMSK      Max word length is 31, 79-STANDARD compliant
E543 2505             (        forth.asm):01033 (3)             blo     @lcwr21
E545 C610             (        forth.asm):01034 (2)             ldb     #16             Word name is too long
E547 BDE76A           (        forth.asm):01035 (7)             jsr     ERRHDLR         No return
     E54A             (        forth.asm):01036         WTOOLNG equ     *
E54A A780             (        forth.asm):01037 (4+1)   @lcwr21 sta     ,x+             Word length to dictionary
E54C 10A6E1           (        forth.asm):01038 (6+2)           ldw     ,s++            16-bit word length to W
E54F 1E12             (        forth.asm):01039 (5)             exg     x,y             Y points to the dictionary, X has TOKENSP
                      (        forth.asm):01040                 IFNE    CSSNTVE
                      (        forth.asm):01041                 tfm     x+,y+           Word name to dictionary, as is
                      (        forth.asm):01042                 ELSE
E551 1FF9             (        forth.asm):01043 (4)             tfr     f,b             Force dictionary entry to upper case
E553 A680             (        forth.asm):01044 (4+1)   @locwr3 lda     ,x+
E555 8161             (        forth.asm):01045 (2)             cmpa    #'a
E557 2506             (        forth.asm):01046 (3)             bcs     @locwr4
E559 817B             (        forth.asm):01047 (2)             cmpa    #'z+1
E55B 2402             (        forth.asm):01048 (3)             bcc     @locwr4
E55D 8020             (        forth.asm):01049 (2)             suba    #'a-'A          To upper case
E55F A7A0             (        forth.asm):01050 (4+1)   @locwr4 sta     ,y+
E561 5A               (        forth.asm):01051 (1)             decb
E562 26EF             (        forth.asm):01052 (3)             bne     @locwr3
                      (        forth.asm):01053                 ENDC                    CSSNTVE
E564 1F10             (        forth.asm):01054 (4)             tfr     x,d
E566 BDE177           (        forth.asm):01055 (7)             jsr     U2INFRD         Derive >IN from D
E569 9E06             (        forth.asm):01056 (4)             ldx     LSTWAD
E56B AFA1             (        forth.asm):01057 (5+2)           stx     ,y++            Back pointer to dictionary
                      (        forth.asm):01058                 IFNE    RELFEAT
E56D 6FA0             (        forth.asm):01059 (6+1)           clr     ,y+             Initialize the checksum header field
                      (        forth.asm):01060                 ENDC                    RELFEAT
E56F 109F08           (        forth.asm):01061 (5)             sty     DICEND
E572 109F12           (        forth.asm):01062 (5)             sty     RECADDR         Should we resort to recursion later on
E575 1039             (        forth.asm):01063 (6)             pulsw
E577 39               (        forth.asm):01064 (4)             rts
                      (        forth.asm):01065         
                      (        forth.asm):01066         * Compile 'ldx  #X; jsr NPUSH'.
                      (        forth.asm):01067         * DICEND is updated and returned in Y.
E578 109E08           (        forth.asm):01068 (5)     LITER   ldy     DICEND
E57B 868E             (        forth.asm):01069 (2)             lda     #LDXOPC         LDX immediate
E57D 8D10             (        forth.asm):01070 (6)             bsr     VARCON2
E57F 86BD             (        forth.asm):01071 (2)             lda     #JSROPC         JSR extended
E581 BDE155           (        forth.asm):01072 (7)             jsr     CHKRTS          Check if the final RTS can be omitted
E584 8D06             (        forth.asm):01073 (6)             bsr     VARCON1
E586 109F08           (        forth.asm):01074 (5)             sty     DICEND
E589 39               (        forth.asm):01075 (4)             rts
                      (        forth.asm):01076         
                      (        forth.asm):01077         * Compile 'jmp  NPUSH'.
                      (        forth.asm):01078         * Y points to the end of the dictionary on entry and on exit.
E58A 867E             (        forth.asm):01079 (2)     VARCON  lda     #JMPOPC         JMP extended
E58C 8EE7ED           (        forth.asm):01080 (3)     VARCON1 ldx     #NPUSH
E58F A7A0             (        forth.asm):01081 (4+1)   VARCON2 sta     ,y+
E591 AFA1             (        forth.asm):01082 (5+2)           stx     ,y++
E593 39               (        forth.asm):01083 (4)             rts
                      (        forth.asm):01084         
                      (        forth.asm):01085         * Used by U<, U>, <, >.
E594 BDE49A           (        forth.asm):01086 (7)     CMP2    jsr     MIN2PST         At least 2 cells must be stacked up
E597 10AEC4           (        forth.asm):01087 (6+0)   CMP2RA  ldy     ,u
E59A AE42             (        forth.asm):01088 (5+1)           ldx     2,u
E59C 103721           (        forth.asm):01089 (4)             cmpr    y,x
E59F 1FA9             (        forth.asm):01090 (4)             tfr     cc,b
                      (        forth.asm):01091                 IFNE    DEBUG
                      (        forth.asm):01092                 clra
                      (        forth.asm):01093                 std     CCREG
                      (        forth.asm):01094                 ENDC                    DEBUG
E5A1 1FC1             (        forth.asm):01095 (4)             tfr     0,x
E5A3 3344             (        forth.asm):01096 (4+1)           leau    4,u
E5A5 1F9A             (        forth.asm):01097 (4)             tfr     b,cc
E5A7 39               (        forth.asm):01098 (4)             rts
                      (        forth.asm):01099         
                      (        forth.asm):01100         * Used by CMOVE, CMOVE>, MOVE.
E5A8 BDE49F           (        forth.asm):01101 (7)     ACQMOVP jsr     MIN3PST         At least 3 cells must be stacked up
E5AB 10A6C4           (        forth.asm):01102 (6+0)   ACQVMRA ldw     ,u              Byte count
E5AE 10AE42           (        forth.asm):01103 (6+1)           ldy     2,u             Destination address
E5B1 AE44             (        forth.asm):01104 (5+1)           ldx     4,u             Source address
E5B3 3346             (        forth.asm):01105 (4+1)           leau    6,u             Drop 3 cells from the user stack
E5B5 39               (        forth.asm):01106 (4)             rts
                      (        forth.asm):01107         
                      (        forth.asm):01108         * FDCTSYM enveadours to match the address stored in Y to a dictionary entry.
                      (        forth.asm):01109         * Upon a successful flexible match, it will output a string in the form of
                      (        forth.asm):01110         * <wordname>+<offset> to the string pointed to by X. <wordname> refers to the
                      (        forth.asm):01111         * code entry point of the matched word. <offset> will be expressed in hex.
                      (        forth.asm):01112         * If a match is found, Z will be clear, otherwise it will be set.
                      (        forth.asm):01113         * A candidate for a word code address must meet the following criteria:
                      (        forth.asm):01114         * ((Y U>= #EBUFS) AND (Y U< #THEEND)) OR ((Y U>= #WDICSPC) AND (Y U< DICEND)).
                      (        forth.asm):01115         * Upon return:
                      (        forth.asm):01116         * - the string pointed to by X will updated with its symbolic match
                      (        forth.asm):01117         *   (NUL terminated), if there is one. X itself might have been altered.
                      (        forth.asm):01118         * - Y should be preserved.
                      (        forth.asm):01119         * EBUFS (EMPTY-BUFFERS) header address is the last word in the dictionary.
                      (        forth.asm):01120                 IFNE    SSDFEAT
E5B6 3430             (        forth.asm):01121 (4+4)   FDCTSYM pshs    y,x     
E5B8 1F21             (        forth.asm):01122 (4)             tfr     y,x             Potential execution token to X
E5BA 8CE982           (        forth.asm):01123 (3)             cmpx    #EBUFS
E5BD 2505             (        forth.asm):01124 (3)             blo     @fdstr2 
E5BF 8CFDDE           (        forth.asm):01125 (3)             cmpx    #THEEND
E5C2 250D             (        forth.asm):01126 (3)             blo     @fdsmtc
E5C4 8C0C60           (        forth.asm):01127 (3)     @fdstr2 cmpx    #WDICSPC        Term 2 of the predicate for a valid word addr
E5C7 2504             (        forth.asm):01128 (3)             blo     @fdsnom
E5C9 9C08             (        forth.asm):01129 (4)             cmpx    DICEND
E5CB 2504             (        forth.asm):01130 (3)             blo     @fdsmtc
E5CD 4F               (        forth.asm):01131 (1)     @fdsnom clra                    No match (Z is set)
E5CE 3530             (        forth.asm):01132 (4+4)           puls    x,y
E5D0 39               (        forth.asm):01133 (4)             rts
E5D1 9E06             (        forth.asm):01134 (4)     @fdsmtc ldx     LSTWAD          Potential match. Scan upward from LAST
                      (        forth.asm):01135         * X points to the latest word header, Y has an execution token.
E5D3 109608           (        forth.asm):01136 (5)             ldw     DICEND          W points to the end of the code section
E5D6 3410             (        forth.asm):01137 (4+2)   @fdslop pshs    x               Pointer to the current word header
E5D8 E680             (        forth.asm):01138 (4+1)           ldb     ,x+
E5DA C41F             (        forth.asm):01139 (2)             andb    #WRLNMSK
E5DC 3A               (        forth.asm):01140 (1)             abx                     Skip word name string
E5DD EC81             (        forth.asm):01141 (5+2)           ldd     ,x++            Backlink to D
                      (        forth.asm):01142                 IFNE    RELFEAT
E5DF 3001             (        forth.asm):01143 (4+1)           leax    1,x             Skip the checksum
                      (        forth.asm):01144                 ENDC                    RELFEAT
E5E1 103712           (        forth.asm):01145 (4)             cmpr    x,y
E5E4 2530             (        forth.asm):01146 (3)             blo     @fdsnwd
E5E6 103762           (        forth.asm):01147 (4)             cmpr    w,y
E5E9 222B             (        forth.asm):01148 (3)             bhi     @fdsnwd         An equal address is allowed here, in case
                      (        forth.asm):01149         * jsr ERRHDLR is the last instruction for the word under consideration.
                      (        forth.asm):01150         * This happens to be the case for FORGET and LPAR.
                      (        forth.asm):01151         * Y matches the code range for the current word.
E5EB 3510             (        forth.asm):01152 (4+2)           puls    x
E5ED E680             (        forth.asm):01153 (4+1)           ldb     ,x+
E5EF C41F             (        forth.asm):01154 (2)             andb    #WRLNMSK
E5F1 1F9F             (        forth.asm):01155 (4)             tfr     b,f
E5F3 114F             (        forth.asm):01156 (2)             clre                    W has the matched word length
E5F5 10AEE4           (        forth.asm):01157 (6+0)           ldy     ,s              Y points to the target buffer
E5F8 113812           (        forth.asm):01158 (6+?)           tfm     x+,y+
E5FB 6FA4             (        forth.asm):01159 (6+0)           clr     ,y              We need this in case the offset is zero
                      (        forth.asm):01160         * Offset processing.
                      (        forth.asm):01161                 IFNE    RELFEAT
E5FD 3003             (        forth.asm):01162 (4+1)           leax    3,x             Skip backlink and checksum
                      (        forth.asm):01163                 ELSE
                      (        forth.asm):01164                 leax    2,x             Skip backlink
                      (        forth.asm):01165                 ENDC                    RELFEAT
E5FF EC62             (        forth.asm):01166 (5+1)           ldd     2,s             Execution token to D
E601 103210           (        forth.asm):01167 (4)             subr    x,d             Offset between XT and word entry point to D
E604 270B             (        forth.asm):01168 (3)             beq     @skoffs         Skip displaying the offset if it is zero
E606 3402             (        forth.asm):01169 (4+1)           pshs    a               Preserve the offset's MSB
E608 862B             (        forth.asm):01170 (2)             lda     #'+
E60A A7A0             (        forth.asm):01171 (4+1)           sta     ,y+
E60C 3502             (        forth.asm):01172 (4+1)           puls    a               Restore the offset's MSB
E60E BDE195           (        forth.asm):01173 (7)             jsr     HDMP4           Dump hex incarnation of the offset to Y
E611 3530             (        forth.asm):01174 (4+4)   @skoffs puls    x,y
E613 1CFB             (        forth.asm):01175 (2)             andcc   #^ZFLAG         Clear ZFLAG
E615 39               (        forth.asm):01176 (4)             rts
                      (        forth.asm):01177         * Point to the next word.
E616 1039             (        forth.asm):01178 (6)     @fdsnwd pulsw                   Retrieve current word header address
E618 104D             (        forth.asm):01179 (2)             tstd
E61A 27B1             (        forth.asm):01180 (3)             beq     @fdsnom         Just met the last dictionary entry
E61C 1F01             (        forth.asm):01181 (4)             tfr     d,x             Point to previous word header
E61E 10810C60         (        forth.asm):01182 (4)             cmpw    #WDICSPC        Are we transitioning from RAM to ROM?
E622 26B2             (        forth.asm):01183 (3)             bne     @fdslop         No singularity
E624 1086FDDE         (        forth.asm):01184 (4)             ldw     #THEEND         Won't be able to diagnose the ROM based @...
E628 20AC             (        forth.asm):01185 (3)             bra     @fdslop
                      (        forth.asm):01186         
                      (        forth.asm):01187         * Find the best possible symbolic approximation of Y and store it to the
                      (        forth.asm):01188         * buffer pointed to by X.
                      (        forth.asm):01189         * On entry:
                      (        forth.asm):01190         * - Y has a code address which is to be matched with a symbolic name + offset.
                      (        forth.asm):01191         * - X points to a buffer where the resolution is to be stored.
                      (        forth.asm):01192         * On return:
                      (        forth.asm):01193         * - Y is to be preserved.
                      (        forth.asm):01194         * - the output buffer will be updated with the best symbolic match (NUL term'd).
E62A 3430             (        forth.asm):01195 (4+4)   FINDSYM pshs    y,x
E62C 8D88             (        forth.asm):01196 (6)             bsr     FDCTSYM         Search the dictionary first (flexible match)
E62E 261B             (        forth.asm):01197 (3)             bne     @dctmfn         Dictionary match found
E630 8EE650           (        forth.asm):01198 (3)             ldx     #NDCTWKS        Search kernel symbols for an exact match
E633 EC81             (        forth.asm):01199 (5+2)   @fsmlop ldd     ,x++
E635 270B             (        forth.asm):01200 (3)             beq     @fsmfnd         End of well known symbols list?
E637 103720           (        forth.asm):01201 (4)             cmpr    y,d
E63A 2706             (        forth.asm):01202 (3)             beq     @fsmfnd
                      (        forth.asm):01203         * No well known symbol match. Skip string.
E63C A680             (        forth.asm):01204 (4+1)   @fsmskp lda     ,x+
E63E 26FC             (        forth.asm):01205 (3)             bne     @fsmskp
E640 20F1             (        forth.asm):01206 (3)             bra     @fsmlop
E642 10AEE4           (        forth.asm):01207 (6+0)   @fsmfnd ldy     ,s
E645 A680             (        forth.asm):01208 (4+1)   @fsmfn2 lda     ,x+
E647 A7A0             (        forth.asm):01209 (4+1)           sta     ,y+
E649 26FA             (        forth.asm):01210 (3)             bne     @fsmfn2
E64B 3262             (        forth.asm):01211 (4+1)   @dctmfn leas    2,s             Drop X from the system stack
E64D 3520             (        forth.asm):01212 (4+2)           puls    y
E64F 39               (        forth.asm):01213 (4)             rts
                      (        forth.asm):01214         
                      (        forth.asm):01215         * Non-dictionary well known symbols.
E650 E000             (        forth.asm):01216         NDCTWKS fdb     IODZHDL         Illegal opcode/Division by zero trap handler
E652 494F445A48444C00 (        forth.asm):01217                 fcn     'IODZHDL'
E65A E809             (        forth.asm):01218                 fdb     DPOPRA          Data stack underflow
E65C 44504F50524100   (        forth.asm):01219                 fcn     'DPOPRA'
E663 E7FA             (        forth.asm):01220                 fdb     DPSHRA          Data stack overflow
E665 44505348524100   (        forth.asm):01221                 fcn     'DPSHRA'
E66C E841             (        forth.asm):01222                 fdb     RPOPRA          Return stack underflow
E66E 52504F50524100   (        forth.asm):01223                 fcn     'RPOPRA'
E675 E827             (        forth.asm):01224                 fdb     RPSHRA          Return stack overflow
E677 52505348524100   (        forth.asm):01225                 fcn     'RPSHRA'
E67E E76A             (        forth.asm):01226                 fdb     ERRHDLR         Error handler
E680 45525248444C5200 (        forth.asm):01227                 fcn     'ERRHDLR'
E688 E3E9             (        forth.asm):01228                 fdb     CKBASRA         Illegal BASE value
E68A 434B424153524100 (        forth.asm):01229                 fcn     'CKBASRA'
E692 E495             (        forth.asm):01230                 fdb     CKDPTRA         Not enough parameters supplied (transac. behav.)
E694 434B445054524100 (        forth.asm):01231                 fcn     'CKDPTRA'
E69C E48A             (        forth.asm):01232                 fdb     CHKNDPT         Check data stack minimum depth (transac. behav.)
E69E 43484B4E44505400 (        forth.asm):01233                 fcn     'CHKNDPT'
E6A6 E597             (        forth.asm):01234                 fdb     CMP2RA          Missing operand in any of U<, U>, <, >
E6A8 434D5032524100   (        forth.asm):01235                 fcn     'CMP2RA'
E6AF E5AB             (        forth.asm):01236                 fdb     ACQVMRA         Three operands missing in any of CMOVE,
                      (        forth.asm):01237         *                               CMOVE>, MOVE
E6B1 414351564D524100 (        forth.asm):01238                 fcn     'ACQVMRA'
E6B9 E0C8             (        forth.asm):01239                 fdb     MINTLRA         Main interpreter loop return address
E6BB 4D494E544C524100 (        forth.asm):01240                 fcn     'MINTLRA'
E6C3 E440             (        forth.asm):01241                 fdb     NUMCVRA         ? while converting a string to a number
E6C5 4E554D4356524100 (        forth.asm):01242                 fcn     'NUMCVRA'
E6CD E0E0             (        forth.asm):01243                 fdb     NMCVIRA         Numeric conversion error while interpreting
E6CF 4E4D435649524100 (        forth.asm):01244                 fcn     'NMCVIRA'
E6D7 E13C             (        forth.asm):01245                 fdb     NMCVCRA         Numeric conversion error while compiling
E6D9 4E4D435643524100 (        forth.asm):01246                 fcn     'NMCVCRA'
E6E1 E111             (        forth.asm):01247                 fdb     INTRPRA         Interpreter RA (after the execution of a word)
E6E3 494E545250524100 (        forth.asm):01248                 fcn     'INTRPRA'
E6EB E12A             (        forth.asm):01249                 fdb     COMPLRA         Compiler RA (after the execution of an IMD word)
E6ED 434F4D504C524100 (        forth.asm):01250                 fcn     'COMPLRA'
E6F5 E169             (        forth.asm):01251                 fdb     EMXASXT         Emit "JSR <X>" where X has an execution token
E6F7 454D584153585400 (        forth.asm):01252                 fcn     'EMXASXT'
E6FF E52D             (        forth.asm):01253                 fdb     LWMNRA          Missing word name in LOCWRT
E701 4C574D4E524100   (        forth.asm):01254                 fcn     'LWMNRA'
E708 E919             (        forth.asm):01255                 fdb     CFR1SRA         CF read one sector failed
E70A 4346523153524100 (        forth.asm):01256                 fcn     'CFR1SRA'
E712 E7ED             (        forth.asm):01257                 fdb     NPUSH           Not an error RA but useful to have as a symbol
E714 4E5055534800     (        forth.asm):01258                 fcn     'NPUSH'
E71A E80A             (        forth.asm):01259                 fdb     RPUSH           Not an error RA but useful to have as a symbol
E71C 525055534800     (        forth.asm):01260                 fcn     'RPUSH'
E722 E7FB             (        forth.asm):01261                 fdb     NPOP            Not an error RA but useful to have as a symbol
E724 4E504F5000       (        forth.asm):01262                 fcn     'NPOP'
E729 E828             (        forth.asm):01263                 fdb     RPOP            Not an error RA but useful to have as a symbol
E72B 52504F5000       (        forth.asm):01264                 fcn     'RPOP'
E730 E2F3             (        forth.asm):01265                 fdb     PUTS            Not an error RA but useful to have as a symbol
E732 5055545300       (        forth.asm):01266                 fcn     'PUTS'
                      (        forth.asm):01267                 IFNE    DEBUG
                      (        forth.asm):01268                 fdb     LWAFRA          Assertion failure in LOCWRT
                      (        forth.asm):01269                 fcn     'LOCWRTAF'
                      (        forth.asm):01270                 ENDC
E737 0000             (        forth.asm):01271                 fdb     0               End of list
E739 3F3F3F00         (        forth.asm):01272                 fcn     '???'           Admit we have no clue!
                      (        forth.asm):01273                 ENDC                    SSDFEAT
                      (        forth.asm):01274         
                      (        forth.asm):01275         * Print ' (xxxx/yyyy)' where xxxx is the hex representation for BLK @ and
                      (        forth.asm):01276         * yyyy is the hex representation for >IN @. Y is preserved, X and D are not.
E73D 3420             (        forth.asm):01277 (4+2)   PRBLKIN pshs    y
E73F 108E039A         (        forth.asm):01278 (4)             ldy     #HEXBUF
E743 8620             (        forth.asm):01279 (2)             lda     #SP
E745 A7A0             (        forth.asm):01280 (4+1)           sta     ,y+
E747 8628             (        forth.asm):01281 (2)             lda     #'(
E749 A7A0             (        forth.asm):01282 (4+1)           sta     ,y+
E74B DC24             (        forth.asm):01283 (4)             ldd     UBLK
E74D BDE195           (        forth.asm):01284 (7)             jsr     HDMP4
E750 862F             (        forth.asm):01285 (2)             lda     #'/
E752 A7A0             (        forth.asm):01286 (4+1)           sta     ,y+
E754 DC22             (        forth.asm):01287 (4)             ldd     UTOIN
E756 BDE195           (        forth.asm):01288 (7)             jsr     HDMP4
E759 8629             (        forth.asm):01289 (2)             lda     #')
E75B A7A0             (        forth.asm):01290 (4+1)           sta     ,y+
E75D 6FA4             (        forth.asm):01291 (6+0)           clr     ,y
E75F 8E039A           (        forth.asm):01292 (3)             ldx     #HEXBUF
E762 BDE2F3           (        forth.asm):01293 (7)             jsr     PUTS
E765 3520             (        forth.asm):01294 (4+2)           puls    y
E767 7EE300           (        forth.asm):01295 (3)             jmp     PUTCR
                      (        forth.asm):01296         
                      (        forth.asm):01297         * Handle error condition. Error code is in B.
                      (        forth.asm):01298         * If B is 2 (undefined) X points to a string of length CURTOKL that has the
                      (        forth.asm):01299         * offending word.
E76A 10AEE4           (        forth.asm):01300 (6+0)   ERRHDLR ldy     ,s              Invoking return address
                      (        forth.asm):01301         * In case of a trap return, we enter here with Y set to #IODZHDL
E76D BDE300           (        forth.asm):01302 (7)     ERRHD1  jsr     PUTCR           GNU Forth does this in its exception handler
E770 C102             (        forth.asm):01303 (2)             cmpb    #2              Undefined symbol?
E772 2618             (        forth.asm):01304 (3)             bne     @perrm          No
E774 8627             (        forth.asm):01305 (2)             lda     #''             Begin quote
E776 BDE2E0           (        forth.asm):01306 (7)             jsr     PUTCH
E779 A680             (        forth.asm):01307 (4+1)   @prtsym lda     ,x+             Display undefined symbol name
E77B BDE2E0           (        forth.asm):01308 (7)             jsr     PUTCH
E77E 0A38             (        forth.asm):01309 (5)             dec     CURTOKL
E780 26F7             (        forth.asm):01310 (3)             bne     @prtsym
E782 8627             (        forth.asm):01311 (2)             lda     #''             End quote
E784 BDE2E0           (        forth.asm):01312 (7)             jsr     PUTCH
E787 8620             (        forth.asm):01313 (2)             lda     #SP             BL EMIT
E789 BDE2E0           (        forth.asm):01314 (7)             jsr     PUTCH
E78C 8EFEA0           (        forth.asm):01315 (3)     @perrm  ldx     #ERRMTBL        Regular error handling
E78F 5D               (        forth.asm):01316 (1)     @nxterr tstb
E790 2637             (        forth.asm):01317 (3)             bne     @skerrm
E792 BDE2F3           (        forth.asm):01318 (7)             jsr     PUTS            Print error message
E795 8DA6             (        forth.asm):01319 (6)             bsr     PRBLKIN         Print BLK and >IN values (in hex)
E797 1F20             (        forth.asm):01320 (4)     @dmptos tfr     y,d             Dump top of the system stack contents
                      (        forth.asm):01321                 IFNE    SSDFEAT
E799 3406             (        forth.asm):01322 (4+2)           pshs    d
                      (        forth.asm):01323                 ENDC                    SSDFEAT
E79B 108E039A         (        forth.asm):01324 (4)             ldy     #HEXBUF
E79F BDE195           (        forth.asm):01325 (7)             jsr     HDMP4
E7A2 8620             (        forth.asm):01326 (2)             lda     #SP
E7A4 A7A0             (        forth.asm):01327 (4+1)           sta     ,y+
                      (        forth.asm):01328         * Symbolic stack dumps are configurable. In situations where the dictionary is
                      (        forth.asm):01329         * trashed, they may not be considered desirable. See SSDFEAT in constants.asm.
                      (        forth.asm):01330                 IFNE    SSDFEAT
E7A6 1F21             (        forth.asm):01331 (4)             tfr     y,x             X has the buffer pointer
E7A8 3520             (        forth.asm):01332 (4+2)           puls    y               Restore target symbol table entry
E7AA BDE62A           (        forth.asm):01333 (7)             jsr     FINDSYM
                      (        forth.asm):01334                 ELSE
                      (        forth.asm):01335                 clr     ,y              No symbolic information is to be printed
                      (        forth.asm):01336                 ENDC                    SSDFEAT
E7AD 8E039A           (        forth.asm):01337 (3)             ldx     #HEXBUF
E7B0 BDE2F3           (        forth.asm):01338 (7)             jsr     PUTS
E7B3 BDE300           (        forth.asm):01339 (7)             jsr     PUTCR
E7B6 108CE000         (        forth.asm):01340 (4)             cmpy    #IODZHDL
E7BA 2702             (        forth.asm):01341 (3)             beq     @wastrp         We're just back from the trap handler
E7BC 3262             (        forth.asm):01342 (4+1)           leas    2,s             Point to the next item on the stack
E7BE 118C8000         (        forth.asm):01343 (4)     @wastrp cmps    #RAMSTRT+RAMSIZE
E7C2 240C             (        forth.asm):01344 (3)             bhs     @errdon         We're done here
E7C4 10AEE4           (        forth.asm):01345 (6+0)           ldy     ,s
E7C7 20CE             (        forth.asm):01346 (3)             bra     @dmptos
E7C9 A680             (        forth.asm):01347 (4+1)   @skerrm lda     ,x+             Scan for the next error message
E7CB 26FC             (        forth.asm):01348 (3)             bne     @skerrm
E7CD 5A               (        forth.asm):01349 (1)             decb
E7CE 20BF             (        forth.asm):01350 (3)             bra     @nxterr
E7D0 10CE8000         (        forth.asm):01351 (4)     @errdon lds     #RAMSTRT+RAMSIZE
E7D4 9621             (        forth.asm):01352 (3)             lda     USTATE+1        We do ignore the upper byte
E7D6 270C             (        forth.asm):01353 (3)             beq     @erdon2         No pointers to restore if we were interpreting
                      (        forth.asm):01354         * Compiling: clear STATE and restore LSTWAD, DICEND.
E7D8 104F             (        forth.asm):01355 (2)             clrd
E7DA DD20             (        forth.asm):01356 (4)             std     USTATE          Switch back to interpretation mode
E7DC 9E0C             (        forth.asm):01357 (4)             ldx     BDICEND         Restore essential pointers from backups
E7DE 9F08             (        forth.asm):01358 (4)             stx     DICEND          Restore HERE
E7E0 9E0A             (        forth.asm):01359 (4)             ldx     BLSTWAD
E7E2 9F06             (        forth.asm):01360 (4)             stx     LSTWAD          Restore LAST
E7E4 BDEB37           (        forth.asm):01361         @erdon2 RFXT    jsr,RCLR+7      XT for RCLR
E7E7 BDFB56           (        forth.asm):01362                 RFXT    jsr,DECIMAL+10  Back to decimal BASE, for one's sanity's sake!
E7EA 7EE0B2           (        forth.asm):01363 (3)             jmp     INTERP
                      (        forth.asm):01364         
                      (        forth.asm):01365         * Push X to the data stack (boundary is checked).
E7ED 118301D6         (        forth.asm):01366 (4)     NPUSH   cmpu    #NSTTOP
E7F1 2303             (        forth.asm):01367 (3)             bls     @npush1         Anything <= than #NSTTOP indicates overflow
E7F3 3610             (        forth.asm):01368 (4+2)           pshu    x               Aka UCNPUSH
E7F5 39               (        forth.asm):01369 (4)             rts
E7F6 5F               (        forth.asm):01370 (1)     @npush1 clrb                    Data stack overflow
E7F7 BDE76A           (        forth.asm):01371 (7)             jsr     ERRHDLR         No return
     E7FA             (        forth.asm):01372         DPSHRA  equ     *
E7FA 12               (        forth.asm):01373 (1)             nop
                      (        forth.asm):01374         
                      (        forth.asm):01375         * Pull X from the data stack (boundary is checked).
                      (        forth.asm):01376         * D, W and Y are preserved.
E7FB 11830296         (        forth.asm):01377 (4)     NPOP    cmpu    #NSTBOT
E7FF 2403             (        forth.asm):01378 (3)             bhs     @npop1          Anything >= than #NSTBOT indicates underflow
E801 3710             (        forth.asm):01379 (4+2)           pulu    x
E803 39               (        forth.asm):01380 (4)             rts
E804 C601             (        forth.asm):01381 (2)     @npop1  ldb     #1              Data stack underflow
E806 BDE76A           (        forth.asm):01382 (7)             jsr     ERRHDLR         No return
     E809             (        forth.asm):01383         DPOPRA  equ     *
E809 12               (        forth.asm):01384 (1)             nop
                      (        forth.asm):01385         
                      (        forth.asm):01386         * Push X to the return stack (boundary is checked).
E80A 962E             (        forth.asm):01387 (3)     RPUSH   lda     RDEPTH          RDEPTH is expressed in cells
E80C 8140             (        forth.asm):01388 (2)             cmpa    #RSTKSZ/2       But RSTKZ is expressed in bytes
E80E 2712             (        forth.asm):01389 (3)             beq     @rpush1
E810 4C               (        forth.asm):01390 (1)             inca
E811 972E             (        forth.asm):01391 (3)             sta     RDEPTH
E813 0F30             (        forth.asm):01392 (5)             clr     RTSREMV         Do not get rid of the final RTS
E815 1F27             (        forth.asm):01393 (4)             tfr     y,v
E817 109E00           (        forth.asm):01394 (5)             ldy     RSP
E81A AFA3             (        forth.asm):01395 (5+2)           stx     ,--y
E81C 109F00           (        forth.asm):01396 (5)             sty     RSP
E81F 1F72             (        forth.asm):01397 (4)             tfr     v,y
E821 39               (        forth.asm):01398 (4)             rts
E822 C607             (        forth.asm):01399 (2)     @rpush1 ldb     #7              Return stack overflow
E824 BDE76A           (        forth.asm):01400 (7)             jsr     ERRHDLR         No return
     E827             (        forth.asm):01401         RPSHRA  equ     *
E827 12               (        forth.asm):01402 (1)             nop                     Meant to insulate RPUSH errors from RPOP EP
                      (        forth.asm):01403         
                      (        forth.asm):01404         * Pull X from the return stack (boundary is checked).
E828 962E             (        forth.asm):01405 (3)     RPOP    lda     RDEPTH          RDEPTH is expressed in cells
E82A 2710             (        forth.asm):01406 (3)             beq     @rpop1
E82C 4A               (        forth.asm):01407 (1)             deca
E82D 972E             (        forth.asm):01408 (3)             sta     RDEPTH
E82F 1F27             (        forth.asm):01409 (4)             tfr     y,v
E831 109E00           (        forth.asm):01410 (5)             ldy     RSP
E834 AEA1             (        forth.asm):01411 (5+2)           ldx     ,y++
E836 109F00           (        forth.asm):01412 (5)             sty     RSP
E839 1F72             (        forth.asm):01413 (4)             tfr     v,y
E83B 39               (        forth.asm):01414 (4)             rts
E83C C608             (        forth.asm):01415 (2)     @rpop1  ldb     #8              Return stack underflow
E83E BDE76A           (        forth.asm):01416 (7)             jsr     ERRHDLR         No return
     E841             (        forth.asm):01417         RPOPRA  equ     *
                      (        forth.asm):01418         
                      (        forth.asm):01419         * Derive the current input stream pointer from BLK and >IN.
                      (        forth.asm):01420         * The resulting address is returned in X. D is altered.
                      (        forth.asm):01421         * Both Y and W are preserved.
E841 9E24             (        forth.asm):01422 (4)     BKIN2PT ldx     UBLK
E843 2716             (        forth.asm):01423 (3)             beq     @consol         We are switching back to the console
E845 1038             (        forth.asm):01424 (6)             pshsw
E847 3420             (        forth.asm):01425 (4+2)           pshs    y
E849 8DA2             (        forth.asm):01426 (6)             bsr     NPUSH           Make sure BLK @ is loaded
E84B BDEA53           (        forth.asm):01427                 RFXT    jsr,BLOCK+8     XT for BLOCK
E84E 3520             (        forth.asm):01428 (4+2)           puls    y
E850 1039             (        forth.asm):01429 (6)             pulsw
E852 3710             (        forth.asm):01430                 UCNPOP                  Retrieve buffer addr to X
E854 9F1C             (        forth.asm):01431 (4)     @done   stx     BSBFADR         Update base buffer address
E856 DC22             (        forth.asm):01432 (4)             ldd     UTOIN
E858 308B             (        forth.asm):01433 (4+2)           leax    d,x             Add the current offset. Return the result via X
E85A 39               (        forth.asm):01434 (4)             rts
E85B 8E0316           (        forth.asm):01435 (3)     @consol ldx     #CMDBUF
E85E 20F4             (        forth.asm):01436 (3)             bra     @done
                      (        forth.asm):01437         
                      (        forth.asm):01438                 include rtc.asm
                      (          rtc.asm):00001                 IFNE RTCFEAT
                      (          rtc.asm):00002         
                      (          rtc.asm):00003         * FIRQ handler for the MC146818 RTC.
                      (          rtc.asm):00004         * In this particular context, only D and CC might be altered.
E860                  (          rtc.asm):00005         RTCIHDL tst     RTCAVL          RTC chip detected?
                      (          rtc.asm):00006                 beq     @notick         Nope
                      (          rtc.asm):00007                 lda     #RTOREGC        Read RTCC. INTACK if any interrupt is pending.
                      (          rtc.asm):00008         * Two intructions inlined for RTREGRD in non-preemtible (interrupt) mode.
                      (          rtc.asm):00009                 sta     RTAS
                      (          rtc.asm):00010                 ldb     RTDS
                      (          rtc.asm):00011                 andb    #RTCPF          RTC periodic interrupt pending?
                      (          rtc.asm):00012                 beq     @notick         No, this ain't us ticking
                      (          rtc.asm):00013         * From "The 6309 Book" p. 3-69: "Note that INC does not effect the carry bit."
E860                  (          rtc.asm):00014         @inctks ldd     TIKSLOW
                      (          rtc.asm):00015                 addd    #1
                      (          rtc.asm):00016                 std     TIKSLOW
                      (          rtc.asm):00017                 ldd     TIKSHI
                      (          rtc.asm):00018                 adcd    #0
                      (          rtc.asm):00019                 std     TIKSHI
E860                  (          rtc.asm):00020         @notick rts
                      (          rtc.asm):00021         
                      (          rtc.asm):00022         * Read one byte from an internal's RTC register whose offset is in A upon
                      (          rtc.asm):00023         * routine entry. The register contents is returned in B.
                      (          rtc.asm):00024         * No other register is altered. FIRQ is temporarily disabled.
                      (          rtc.asm):00025         * Can be called from base or interrupt level.
E860                  (          rtc.asm):00026         RTREGRD pshs    cc
                      (          rtc.asm):00027                 orcc    #FFLAG          Mask FIRQ
                      (          rtc.asm):00028                 sta     RTAS            Select target RTC register
                      (          rtc.asm):00029                 ldb     RTDS            Read RTC register contents
                      (          rtc.asm):00030                 puls    cc              Restore previous interrupt handling mode
                      (          rtc.asm):00031                 rts
                      (          rtc.asm):00032         
                      (          rtc.asm):00033         * Write one byte to an internal's RTC register whose offset is in A upon
                      (          rtc.asm):00034         * routine entry. The register byte output value is in B upon entry.
                      (          rtc.asm):00035         * FIRQ is temporarily masked. All regs contents are preserved.
                      (          rtc.asm):00036         * Can be called from base or interrupt level.
E860                  (          rtc.asm):00037         RTREGWR pshs    cc
                      (          rtc.asm):00038                 orcc    #FFLAG          Mask FIRQ
                      (          rtc.asm):00039                 sta     RTAS            Select target RTC register
                      (          rtc.asm):00040                 stb     RTDS            Write RTC register contents
                      (          rtc.asm):00041                 puls    cc              Restore previous interrupt handling mode
                      (          rtc.asm):00042                 rts
                      (          rtc.asm):00043         
                      (          rtc.asm):00044         * Detect if an MC146818 chip is present.
E860                  (          rtc.asm):00045         RTCINIT
                      (          rtc.asm):00046                 IFNE    DEBUG
                      (          rtc.asm):00047                 clrd
                      (          rtc.asm):00048                 std     TIKSHI          Initialize the TICKS double cell
                      (          rtc.asm):00049                 std     TIKSLOW
                      (          rtc.asm):00050                 clr     RTCAVL          Assume chip not present
                      (          rtc.asm):00051                 ENDC
                      (          rtc.asm):00052                 lda     #RTOPRES        Offset to the last NVRAM byte if dev is present
                      (          rtc.asm):00053                 bsr     RTREGRD         Read user memory byte. Value is returned in B   
                      (          rtc.asm):00054                 comb                    One's complement to B
                      (          rtc.asm):00055                 pshs    b
                      (          rtc.asm):00056                 bsr     RTREGWR         Write back one's complement to RTC
                      (          rtc.asm):00057                 bsr     RTREGRD         And read the last NVRAM byte back
                      (          rtc.asm):00058                 puls    a
                      (          rtc.asm):00059                 cmpr    b,a             Match?
                      (          rtc.asm):00060                 beq     @rtdtct         RTC chip detected all right!
                      (          rtc.asm):00061                 rts
                      (          rtc.asm):00062         * MC146818 RTC chip detected.
                      (          rtc.asm):00063         * On power up if register RTCA reads as 0, the SET bit in register RTCB will
                      (          rtc.asm):00064         * prevent any updates to the calendar (date/time). We do preserve the state of
                      (          rtc.asm):00065         * the SET bit, so as to indicate to the application software that the time and
                      (          rtc.asm):00066         * date have yet to be set manually.
E860                  (          rtc.asm):00067         @rtdtct lda     #RTOREGA
                      (          rtc.asm):00068                 ldb     #(RTADV32|RTARS64)
                      (          rtc.asm):00069                 bsr     RTREGWR         Write B to the RTCA register
                      (          rtc.asm):00070                 lda     #RTOREGB
                      (          rtc.asm):00071                 bsr     RTREGRD
                      (          rtc.asm):00072                 andb    #RTBSET         Extract the SET bit
                      (          rtc.asm):00073                 orb     #(RTBPIE|RTBDM|RTB24)
                      (          rtc.asm):00074                 bsr     RTREGWR         Write B to the RTCB register
                      (          rtc.asm):00075                 inc     RTCAVL
                      (          rtc.asm):00076                 ldx     #RTPRESM        Real time clock detected message base address
                      (          rtc.asm):00077                 jmp     PUTS            Out to the console
                      (          rtc.asm):00078         
                      (          rtc.asm):00079                 ENDC                    RTCFEAT
                      (          rtc.asm):00080         
                      (        forth.asm):01439                 include storage.asm
                      (      storage.asm):00001         * Wait until the BSY bit is clear in the CF status register.
                      (      storage.asm):00002         * Upon return the BSY bit is guaranteed to be zero. Z will
                      (      storage.asm):00003         * be set in CC. This subroutine should not be called before
                      (      storage.asm):00004         * the CompactFlash presence has been assessed.
E860 B6C007           (      storage.asm):00005 (4)     CFWAIT  lda     CFSTATR
E863 8580             (      storage.asm):00006 (2)             bita    #CFBSYB
E865 26F9             (      storage.asm):00007 (3)             bne     CFWAIT
E867 39               (      storage.asm):00008 (4)             rts
                      (      storage.asm):00009         
                      (      storage.asm):00010         * Wait until the BSY bit is clear and the RDY bit is set.
E868 8DF6             (      storage.asm):00011 (6)     CFRDY   bsr     CFWAIT
E86A 2703             (      storage.asm):00012 (3)             beq     @cfrdy0         Card not busy, proceed
E86C 1A04             (      storage.asm):00013 (2)             orcc    #ZFLAG
E86E 39               (      storage.asm):00014 (4)             rts
E86F 8E2000           (      storage.asm):00015 (3)     @cfrdy0 ldx     #$2000          Maximum poll count
E872 8640             (      storage.asm):00016 (2)             lda     #CFRDYB
E874 B5C007           (      storage.asm):00017 (4)     @cfrdy1 bita    CFSTATR
E877 2604             (      storage.asm):00018 (3)             bne     @cfrdy2         BSY bit is set, continue
E879 301F             (      storage.asm):00019 (4+1)           leax    -1,x            Card not ready, decrement poll count
E87B 26F7             (      storage.asm):00020 (3)             bne     @cfrdy1         and try again
E87D 39               (      storage.asm):00021 (4)     @cfrdy2 rts                     Return with Z set: card not present
                      (      storage.asm):00022         *                               Return with Z clear: card is ready
                      (      storage.asm):00023         
                      (      storage.asm):00024         * Check for possible error condition.
                      (      storage.asm):00025         * Upon return either Z is set (A is zero) and no error occurred or
                      (      storage.asm):00026         * Z is clear and the CF error register contents is returned in A.
E87E 8DE0             (      storage.asm):00027 (6)     CFERRCK bsr     CFWAIT
E880 B6C007           (      storage.asm):00028 (4)             lda     CFSTATR
E883 8401             (      storage.asm):00029 (2)             anda    #CFERRB
E885 2703             (      storage.asm):00030 (3)             beq     @cfeck1
E887 B6C001           (      storage.asm):00031 (4)             lda     CFERROR         The error register contains error details
E88A 39               (      storage.asm):00032 (4)     @cfeck1 rts
                      (      storage.asm):00033         
                      (      storage.asm):00034         * Issue CF command. The command code is passed through the B register.
                      (      storage.asm):00035         * Upon return:
                      (      storage.asm):00036         * - Z is set and everything is peachy.
                      (      storage.asm):00037         * - or Z is clear and the CF error register contents will be
                      (      storage.asm):00038         *   returned in A (and mirrored in the global CFERRCD variable).
                      (      storage.asm):00039         * B is preserved.
E88B 8DDB             (      storage.asm):00040 (6)     CFCMDIS bsr     CFRDY
E88D 270A             (      storage.asm):00041 (3)             beq     @cfciab         Card not ready, abort
E88F D73E             (      storage.asm):00042 (3)             stb     CFCMMIR         Update CF command mirror
E891 F7C007           (      storage.asm):00043 (4)             stb     CFCOMDR         Send command to the CF card
E894 8DE8             (      storage.asm):00044 (6)             bsr     CFERRCK
E896 973F             (      storage.asm):00045 (3)     @cfcise sta     CFERRCD         CF command issue set error
                      (      storage.asm):00046                 IFNE    DEBUG
                      (      storage.asm):00047                 pshs    a,cc
                      (      storage.asm):00048                 beq     @cfciok
                      (      storage.asm):00049                 lda     #'!
                      (      storage.asm):00050                 jsr     PUTCH
E898                  (      storage.asm):00051         @cfcidi lda     CFCMMIR
                      (      storage.asm):00052                 ldx     #TBUFF
                      (      storage.asm):00053                 jsr     HDMP2
                      (      storage.asm):00054                 lda     #'/
                      (      storage.asm):00055                 sta     ,x+
                      (      storage.asm):00056                 lda     CFERRCD
                      (      storage.asm):00057                 jsr     HDMP2
                      (      storage.asm):00058                 ldx     #TBUFF
                      (      storage.asm):00059                 jsr     PUTS
                      (      storage.asm):00060                 jsr     PUTCR
                      (      storage.asm):00061                 bra     @cfcict         CF command issue continued
E898                  (      storage.asm):00062         @cfciok lda     #'#
                      (      storage.asm):00063                 jsr     PUTCH
                      (      storage.asm):00064                 bra     @cfcidi         CF command issue data indication
E898                  (      storage.asm):00065         @cfcict puls    cc,a
                      (      storage.asm):00066                 ENDC
E898 39               (      storage.asm):00067 (4)             rts
E899 86FF             (      storage.asm):00068 (2)     @cfciab lda     #$FF            Dummy error code
E89B 20F9             (      storage.asm):00069 (3)             bra     @cfcise
                      (      storage.asm):00070         
                      (      storage.asm):00071         * Drive 0 select.
E89D 8DC9             (      storage.asm):00072 (6)     CFDRSEL bsr     CFRDY
E89F 86E0             (      storage.asm):00073 (2)             lda     #$E0            Drive 0, LBA mode
E8A1 B7C006           (      storage.asm):00074 (4)             sta     CFDRHDR
E8A4 20C2             (      storage.asm):00075 (3)             bra     CFRDY
                      (      storage.asm):00076         
                      (      storage.asm):00077         * Analyze the response to the CF "Identify Device" request.
E8A6 9E08             (      storage.asm):00078 (4)     CFANTHS ldx     DICEND
E8A8 308836           (      storage.asm):00079 (4+1)           leax    $36,x           Point to the "Model number" field
E8AB 3410             (      storage.asm):00080 (4+2)           pshs    x
E8AD 118614           (      storage.asm):00081 (3)             lde     #$14            Number of 16 bit words to go through
E8B0 EC84             (      storage.asm):00082 (5+0)   @bytswp ldd     ,x
E8B2 1E98             (      storage.asm):00083 (5)             exg     b,a             Byte swapping
E8B4 ED81             (      storage.asm):00084 (5+2)           std     ,x++
E8B6 114A             (      storage.asm):00085 (2)             dece
E8B8 26F6             (      storage.asm):00086 (3)             bne     @bytswp
E8BA 6F84             (      storage.asm):00087 (6+0)           clr     ,x
E8BC 3510             (      storage.asm):00088 (4+2)           puls    x
E8BE BDE2F3           (      storage.asm):00089 (7)             jsr     PUTS            Decent CF cards indicate the capacity that way
E8C1 7EE300           (      storage.asm):00090 (3)             jmp     PUTCR           Up to $10000 blocks is 64 MB!
                      (      storage.asm):00091         
                      (      storage.asm):00092         * Initialize the CompactFlash subsystem.
                      (      storage.asm):00093         * This is run once at boot time. There is no hot plug support here.
E8C4 0F3D             (      storage.asm):00094 (5)     CFINIT  clr     CFCARDP         Clear card present,
                      (      storage.asm):00095                 IFEQ    DEBUG
E8C6 8DA0             (      storage.asm):00096 (6)             bsr     CFRDY
                      (      storage.asm):00097                 ELSE
                      (      storage.asm):00098                 jsr     CFRDY
                      (      storage.asm):00099                 ENDC
E8C8 2730             (      storage.asm):00100 (3)             beq     @cfinab         Card not ready, abort
E8CA 8DD1             (      storage.asm):00101 (6)             bsr     CFDRSEL         Drive 0 select
E8CC 8601             (      storage.asm):00102 (2)             lda     #1              Enable 8-bit data transfers
E8CE B7C001           (      storage.asm):00103 (4)             sta     CFFEATR
E8D1 C6EF             (      storage.asm):00104 (2)             ldb     #CFSETFT        Issue a CF "Set Feature" command
                      (      storage.asm):00105                 IFEQ    DEBUG
E8D3 8DB6             (      storage.asm):00106 (6)             bsr     CFCMDIS         Not allowed to fail
                      (      storage.asm):00107                 ELSE
                      (      storage.asm):00108                 jsr     CFCMDIS         Not allowed to fail
                      (      storage.asm):00109                 ENDC
E8D5 2623             (      storage.asm):00110 (3)             bne     @cfinab         Abort with card present flag clear
E8D7 8601             (      storage.asm):00111 (2)             lda     #1              Request default PIO mode wo/ IORDY
E8D9 B7C002           (      storage.asm):00112 (4)             sta     CFSCNTR
E8DC 8603             (      storage.asm):00113 (2)             lda     #3              ATA-2 "Set Transfer mode"
E8DE B7C001           (      storage.asm):00114 (4)             sta     CFFEATR
                      (      storage.asm):00115                 IFEQ    DEBUG
E8E1 8DA8             (      storage.asm):00116 (6)             bsr     CFCMDIS         OK to fail
                      (      storage.asm):00117                 ELSE
                      (      storage.asm):00118                 jsr     CFCMDIS         OK to fail
                      (      storage.asm):00119                 ENDC
E8E3 8682             (      storage.asm):00120 (2)             lda     #$82            Disable write caching
E8E5 B7C001           (      storage.asm):00121 (4)             sta     CFFEATR
                      (      storage.asm):00122                 IFEQ    DEBUG
E8E8 8DA1             (      storage.asm):00123 (6)             bsr     CFCMDIS         B still has #CFSETF. Also OK to fail
                      (      storage.asm):00124                 ELSE
                      (      storage.asm):00125                 jsr     CFCMDIS         B still has #CFSETF. Also OK to fail
                      (      storage.asm):00126                 ENDC
E8EA C6EC             (      storage.asm):00127 (2)             ldb     #CFIDDEV        Issue a CF "Identify Device" command
                      (      storage.asm):00128                 IFEQ    DEBUG
E8EC 8D9D             (      storage.asm):00129 (6)             bsr     CFCMDIS         Not allowed to fail
                      (      storage.asm):00130                 ELSE
                      (      storage.asm):00131                 jsr     CFCMDIS         Not allowed to fail
                      (      storage.asm):00132                 ENDC
E8EE 260A             (      storage.asm):00133 (3)             bne     @cfinab         Abort with card present flag clear
E8F0 9E08             (      storage.asm):00134 (4)             ldx     DICEND          Target address is HERE
E8F2 8D07             (      storage.asm):00135 (6)             bsr     CF1SRD          Read one sector
E8F4 8DB0             (      storage.asm):00136 (6)             bsr     CFANTHS         Analyze this!
E8F6 8601             (      storage.asm):00137 (2)             lda     #1
E8F8 973D             (      storage.asm):00138 (3)             sta     CFCARDP         Set the card present flag
E8FA 39               (      storage.asm):00139 (4)     @cfinab rts
                      (      storage.asm):00140         
                      (      storage.asm):00141         * Read one sector. The LBA parameters are assumed to have been set previously.
                      (      storage.asm):00142         * On input X points to the receiving (at least 512 bytes long) buffer.
E8FB B6C007           (      storage.asm):00143 (4)     CF1SRD  lda     CFSTATR
E8FE 8508             (      storage.asm):00144 (2)             bita    #CFDRQB         Check for DRQ bit in the CF status register
E900 2712             (      storage.asm):00145 (3)             beq     IOERR
E902 10860200         (      storage.asm):00146 (4)             ldw     #CFSCSZ         Sector size is 512 bytes
E906 108EC000         (      storage.asm):00147 (4)             ldy     #CFDATAR        The data source address
E90A 3401             (      storage.asm):00148 (4+1)           pshs    cc
E90C 1A50             (      storage.asm):00149 (2)             orcc    #(FFLAG|IFLAG)  Disable maskable interrupts
E90E 113B21           (      storage.asm):00150 (6+?)           tfm     y,x+
E911 3501             (      storage.asm):00151 (4+1)           puls    cc              Restore previous interrupt handling mode
E913 39               (      storage.asm):00152 (4)             rts
E914 C611             (      storage.asm):00153 (2)     IOERR   ldb     #17
E916 BDE76A           (      storage.asm):00154 (7)             jsr     ERRHDLR         No return
E919 12               (      storage.asm):00155 (1)     CFR1SRA nop                     For symbolic stack dump debugging purposes
                      (      storage.asm):00156         
                      (      storage.asm):00157         * Write one sector. The LBA parameters are assumed to have been set previously.
                      (      storage.asm):00158         * On input X points to the sending (at least 512 bytes long) buffer.
E91A B6C007           (      storage.asm):00159 (4)     CF1SWR  lda     CFSTATR
E91D 8488             (      storage.asm):00160 (2)             anda    #CFBSYB|CFDRQB
E91F 8108             (      storage.asm):00161 (2)             cmpa    #CFDRQB         Check for BSY clear and DRQ set
E921 26F7             (      storage.asm):00162 (3)             bne     CF1SWR
E923 10860200         (      storage.asm):00163 (4)             ldw     #CFSCSZ         Sector size is 512 bytes
E927 108EC000         (      storage.asm):00164 (4)             ldy     #CFDATAR        The data destination address
E92B 113A12           (      storage.asm):00165 (6+?)           tfm     x+,y            Note: tfm is interruptible!
E92E 39               (      storage.asm):00166 (4)             rts
                      (      storage.asm):00167         
                      (      storage.asm):00168         * 1KB Forth block support primitives. Not dictionary code. More like BIOS ops.
                      (      storage.asm):00169         
                      (      storage.asm):00170         * One block IO preamble: select drive and LBA parameters. On input:
                      (      storage.asm):00171         * ,s has the return address
                      (      storage.asm):00172         * 2,s had the return address for the caller
                      (      storage.asm):00173         * 4,s has the target block number
E92F BDE860           (      storage.asm):00174 (7)     CF1BPRE jsr     CFWAIT
E932 BDE89D           (      storage.asm):00175 (7)             jsr     CFDRSEL         Set drive and head parameters
E935 EC64             (      storage.asm):00176 (5+1)           ldd     4,s
E937 1048             (      storage.asm):00177 (2)             lsld                    Convert block number to sector number
E939 F7C003           (      storage.asm):00178 (4)             stb     CFSNUMR         LBA 7-0
E93C B7C004           (      storage.asm):00179 (4)             sta     CFCLOWR         LBA 15-8
E93F 1FA8             (      storage.asm):00180 (4)             tfr     cc,a
E941 8401             (      storage.asm):00181 (2)             anda    #CFLAG
E943 B7C005           (      storage.asm):00182 (4)             sta     CFCHIGR         LBA 23-16 (carry to cylinder high)
E946 8602             (      storage.asm):00183 (2)             lda     #2              2 IDE sectors per Forth block
E948 B7C002           (      storage.asm):00184 (4)             sta     CFSCNTR
E94B 39               (      storage.asm):00185 (4)             rts
                      (      storage.asm):00186         
                      (      storage.asm):00187         * Read one block from CF device. On input:
                      (      storage.asm):00188         * ,s has the return address
                      (      storage.asm):00189         * 2,s has the target block number
                      (      storage.asm):00190         * 4,s has the buffer base address
                      (      storage.asm):00191         * Upon return, Y will be preserved.
E94C 0D3D             (      storage.asm):00192 (4)     CF1BKRD tst     CFCARDP
E94E 2602             (      storage.asm):00193 (3)             bne     @ctnued
E950 20C2             (      storage.asm):00194 (3)             bra     IOERR           Card not present--CF subsystem not initialized
E952 1F27             (      storage.asm):00195 (4)     @ctnued tfr     y,v
E954 8DD9             (      storage.asm):00196 (6)             bsr     CF1BPRE
E956 C620             (      storage.asm):00197 (2)             ldb     #CFRSCTS        Issue a "Read sectors" CF command
E958 BDE88B           (      storage.asm):00198 (7)             jsr     CFCMDIS
E95B AE64             (      storage.asm):00199 (5+1)           ldx     4,s             Target buffer address to X
E95D 8D9C             (      storage.asm):00200 (6)             bsr     CF1SRD          Read the even sector from CF device
E95F BDE860           (      storage.asm):00201 (7)             jsr     CFWAIT          Wait for next sector to become available
E962 8D97             (      storage.asm):00202 (6)             bsr     CF1SRD          and read the odd sector
E964 1F72             (      storage.asm):00203 (4)             tfr     v,y
E966 39               (      storage.asm):00204 (4)             rts
                      (      storage.asm):00205         
                      (      storage.asm):00206         * Write one block to CF device. Upon entry:
                      (      storage.asm):00207         * ,s has the return address
                      (      storage.asm):00208         * 2,s has the target block number
                      (      storage.asm):00209         * 4,s has the buffer base address
                      (      storage.asm):00210         * Upon return, Y will be preserved.
E967 0D3D             (      storage.asm):00211 (4)     CF1BKWR tst     CFCARDP
E969 2602             (      storage.asm):00212 (3)             bne     @ctnued
E96B 20A7             (      storage.asm):00213 (3)             bra     IOERR           Card not present--CF subsystem not initialized
E96D 1F27             (      storage.asm):00214 (4)     @ctnued tfr     y,v
E96F 8DBE             (      storage.asm):00215 (6)             bsr     CF1BPRE
E971 C630             (      storage.asm):00216 (2)             ldb     #CFWSCTS        Issue a "Write sectors" CF command
E973 BDE88B           (      storage.asm):00217 (7)             jsr     CFCMDIS
E976 AE64             (      storage.asm):00218 (5+1)           ldx     4,s             Source buffer address to X
E978 8DA0             (      storage.asm):00219 (6)             bsr     CF1SWR          Write the even sector to CF device
E97A BDE860           (      storage.asm):00220 (7)             jsr     CFWAIT          Wait for next sector to become available
E97D 8D9B             (      storage.asm):00221 (6)             bsr     CF1SWR          and write the odd sector
E97F 1F72             (      storage.asm):00222 (4)             tfr     v,y
E981 39               (      storage.asm):00223 (4)             rts
                      (      storage.asm):00224         
                      (        forth.asm):01440         
                      (        forth.asm):01441         ******************************************************************************
                      (        forth.asm):01442         * Dictionary begins. In the code below ANSI refers to ANSI-X3.215-1994
                      (        forth.asm):01443         * Draft 6 proposal (i.e. the free spec).
                      (        forth.asm):01444         
E982 0D               (        forth.asm):01445         EBUFS   fcb     13              79-STANDARD (REQ145)
E983 454D5054592D4255 (        forth.asm):01446                 fcc     'EMPTY-BUFFERS' ( -- )
     4646455253
E990 0000             (        forth.asm):01447                 fdb     0               Last dictionary entry
E992 C7               (        forth.asm):01448                 RFCS
E993 7EE37B           (        forth.asm):01449 (3)             jmp     EMPTYB
                      (        forth.asm):01450         
E996 0C               (        forth.asm):01451         SAVBUF  fcb     12              79-STANDARD (REQ221)
E997 534156452D425546 (        forth.asm):01452                 fcc     'SAVE-BUFFERS'  ( -- )
     46455253
E9A3 E982             (        forth.asm):01453                 fdb     EBUFS
E9A5 C7               (        forth.asm):01454                 RFCS
E9A6 8E0440           (        forth.asm):01455 (3)             ldx     #BUF0
E9A9 8D03             (        forth.asm):01456 (6)             bsr     WBIFDRT
E9AB 8E0850           (        forth.asm):01457 (3)             ldx     #BUF1
                      (        forth.asm):01458         * Write buffer back to mass storage if marked as dirty.
                      (        forth.asm):01459         * The dirty bit is cleared but the buffer contents itself is not.
                      (        forth.asm):01460         * The buffer will continue to be marked as "in use."
                      (        forth.asm):01461         * On input X has has the base buffer address. Both D and X
                      (        forth.asm):01462         * are preserved. Y is not.
E9AE 3406             (        forth.asm):01463 (4+2)   WBIFDRT pshs    d
E9B0 3410             (        forth.asm):01464 (4+2)           pshs    x               Base buffer address (arg1 to CF1BKWR)
E9B2 8605             (        forth.asm):01465 (2)             lda     #BINUSE|BDIRTY
E9B4 A4890401         (        forth.asm):01466 (4+3)           anda    BOFLAGS,x
E9B8 8105             (        forth.asm):01467 (2)             cmpa    #BINUSE|BDIRTY
E9BA 2616             (        forth.asm):01468 (3)             bne     @alldon         Block not in use or in use but not dirty
E9BC AE890402         (        forth.asm):01469 (5+3)           ldx     BOBLKNO,x
E9C0 3410             (        forth.asm):01470 (4+2)           pshs    x               Block number (arg0 to CF1BKWR)
E9C2 8DA3             (        forth.asm):01471 (6)             bsr     CF1BKWR         Write data buffer to CF
E9C4 3262             (        forth.asm):01472 (4+1)           leas    2,s             Drop one cell from the system stack (blknum)
E9C6 AEE4             (        forth.asm):01473 (5+0)           ldx     ,s              Retrieve base buffer address
E9C8 30890401         (        forth.asm):01474 (4+3)           leax    BOFLAGS,x
E9CC A684             (        forth.asm):01475 (4+0)           lda     ,x              Acquire the 'flags' field
E9CE 84FB             (        forth.asm):01476 (2)             anda    #^BDIRTY        Clear the dirty bit
E9D0 A784             (        forth.asm):01477 (4+0)           sta     ,x              and update the 'flags' field
E9D2 3510             (        forth.asm):01478 (4+2)   @alldon puls    x               Restore X
E9D4 3506             (        forth.asm):01479 (4+2)           puls    d               and D
E9D6 39               (        forth.asm):01480 (4)             rts
                      (        forth.asm):01481         
E9D7 05               (        forth.asm):01482         FLUSH   fcb     5               79-STANDARD (REF)
E9D8 464C555348       (        forth.asm):01483                 fcc     'FLUSH'         ( -- ) An alias for SAVE-BUFFERS
E9DD E996             (        forth.asm):01484                 fdb     SAVBUF
E9DF C7               (        forth.asm):01485                 RFCS
E9E0 20C4             (        forth.asm):01486                 RFXT    bra,SAVBUF+15   XT for SAVE-BUFFERS
                      (        forth.asm):01487         
E9E2 06               (        forth.asm):01488         UPDATE  fcb     6               79-STANDARD (REQ229)
E9E3 555044415445     (        forth.asm):01489                 fcc     'UPDATE'        ( -- )
E9E9 E9D7             (        forth.asm):01490                 fdb     FLUSH
E9EB C7               (        forth.asm):01491                 RFCS
E9EC 9E1A             (        forth.asm):01492 (4)             ldx     MRUBUFA         Most recently used buffer base address
E9EE 30890401         (        forth.asm):01493 (4+3)           leax    BOFLAGS,x       Buffer 'flags' field's address to X
E9F2 A684             (        forth.asm):01494 (4+0)           lda     ,x              Buffer 'flags' field to A
E9F4 8501             (        forth.asm):01495 (2)             bita    #BINUSE         Is that buffer in use?
E9F6 2704             (        forth.asm):01496 (3)             beq     @upddon         No, we're done here
E9F8 8A04             (        forth.asm):01497 (2)             ora     #BDIRTY
E9FA A784             (        forth.asm):01498 (4+0)           sta     ,x              Set the dirty bit
E9FC 39               (        forth.asm):01499 (4)     @upddon rts
                      (        forth.asm):01500         
E9FD 06               (        forth.asm):01501         BUFFER  fcb     6               79-STANDARD (REQ130)
E9FE 425546464552     (        forth.asm):01502                 fcc     'BUFFER'        ( ublkno -- addr )
EA04 E9E2             (        forth.asm):01503                 fdb     UPDATE
EA06 C7               (        forth.asm):01504                 RFCS
EA07 BDE7FB           (        forth.asm):01505 (7)             jsr     NPOP
EA0A 1F12             (        forth.asm):01506 (4)             tfr     x,y             ublkno to Y
                      (        forth.asm):01507         * Block lookup.
EA0C 8E0440           (        forth.asm):01508 (3)             ldx     #BUF0           Base address of the first resident buffer
EA0F C602             (        forth.asm):01509 (2)             ldb     #2              Number of resident buffers
EA11 A6890401         (        forth.asm):01510 (4+3)   @blkup  lda     BOFLAGS,x       Buffer flags to A
EA15 8501             (        forth.asm):01511 (2)             bita    #BINUSE         Buffer in use?
EA17 270C             (        forth.asm):01512 (3)             beq     @nxtbuf         No
EA19 10AC890402       (        forth.asm):01513 (6+3)           cmpy    BOBLKNO,x       Buffer is in use. Block number match?
EA1E 2605             (        forth.asm):01514 (3)             bne     @nxtbuf         No
EA20 9F1A             (        forth.asm):01515 (4)     @retba  stx     MRUBUFA         Block number match. Mark as the MRU buffer
EA22 3610             (        forth.asm):01516                 UCNPUSH                 and return its base address via the data stack
EA24 39               (        forth.asm):01517 (4)             rts
EA25 30890410         (        forth.asm):01518 (4+3)   @nxtbuf leax    BFDISP,x        Point to the next buffer
EA29 5A               (        forth.asm):01519 (1)             decb
EA2A 26E5             (        forth.asm):01520 (3)             bne     @blkup
                      (        forth.asm):01521         * The block number in Y is not currently in use. Assign a buffer to it.
EA2C 8E0440           (        forth.asm):01522 (3)             ldx     #BUF0
EA2F 9C1A             (        forth.asm):01523 (4)             cmpx    MRUBUFA         Most recently used buffer address
EA31 2603             (        forth.asm):01524 (3)             bne     @bselct
EA33 8E0850           (        forth.asm):01525 (3)             ldx     #BUF1
                      (        forth.asm):01526         * At this point X has the base address of the block we are interested in.
EA36 3420             (        forth.asm):01527 (4+2)   @bselct pshs    y               Backup the target block number
EA38 BDE9AE           (        forth.asm):01528 (7)             jsr     WBIFDRT         Write back if dirty. X and D are preserved
EA3B 8601             (        forth.asm):01529 (2)             lda     #BINUSE
EA3D A7890401         (        forth.asm):01530 (4+3)           sta     BOFLAGS,x       Update the buffer's 'flags' field
EA41 3520             (        forth.asm):01531 (4+2)           puls    y               Restore the target block number
EA43 10AF890402       (        forth.asm):01532 (6+3)           sty     BOBLKNO,x       and update the 'blknum' field as well
EA48 20D6             (        forth.asm):01533 (3)             bra     @retba
                      (        forth.asm):01534         
EA4A 05               (        forth.asm):01535         BLOCK   fcb     5               79-STANDARD (REQ191)
EA4B 424C4F434B       (        forth.asm):01536                 fcc     'BLOCK'         ( ublkno -- addr )
EA50 E9FD             (        forth.asm):01537                 fdb     BUFFER
EA52 C7               (        forth.asm):01538                 RFCS
EA53 8DB2             (        forth.asm):01539                 RFXT    bsr,BUFFER+9    XT for BUFFER
                      (        forth.asm):01540         * Upon return Y has has the block number.
EA55 3710             (        forth.asm):01541                 UCNPOP                  Buffer base address to X
EA57 3410             (        forth.asm):01542 (4+2)           pshs    x               Push base buffer address as Arg1 to CF1BKRD
EA59 A6890401         (        forth.asm):01543 (4+3)           lda     BOFLAGS,x       Retrieve buffer 'flags' field
                      (        forth.asm):01544                 IFNE    DEBUG
                      (        forth.asm):01545                 bita    #BINUSE
                      (        forth.asm):01546                 bne     @blkctd
                      (        forth.asm):01547                 lda     #10             Assertion failed
                      (        forth.asm):01548                 jsr     ERRHDLR         No return
                      (        forth.asm):01549                 ENDC                    DEBUG
EA5D 8402             (        forth.asm):01550 (2)     @blkctd anda    #BMAPPD         Has the block been read yet?
EA5F 2613             (        forth.asm):01551 (3)             bne     @bkmapd         Yes
EA61 3420             (        forth.asm):01552 (4+2)           pshs    y               No. Push block number as arg0 to CF1BKRD
                      (        forth.asm):01553         * Map in the block from the CF device. System stack structure is as follows:
                      (        forth.asm):01554         * ,s has the target block number.
                      (        forth.asm):01555         * 2,s has the buffer base address.
EA63 BDE94C           (        forth.asm):01556 (7)             jsr     CF1BKRD
EA66 3262             (        forth.asm):01557 (4+1)           leas    2,s             Drop one cell from the system stack
                      (        forth.asm):01558         * Update the buffer's flags field.
EA68 AEE4             (        forth.asm):01559 (5+0)           ldx     ,s              Base buffer address
EA6A 30890401         (        forth.asm):01560 (4+3)           leax    BOFLAGS,x       Buffer 'flags' field address to X
EA6E A684             (        forth.asm):01561 (4+0)           lda     ,x              Read buffer 'flags' field
EA70 8A02             (        forth.asm):01562 (2)             ora     #BMAPPD
EA72 A784             (        forth.asm):01563 (4+0)           sta     ,x              and mark it as read
EA74 3510             (        forth.asm):01564 (4+2)   @bkmapd puls    x               Buffer base address to X
EA76 3610             (        forth.asm):01565                 UCNPUSH
EA78 39               (        forth.asm):01566 (4)             rts
                      (        forth.asm):01567         
EA79 03               (        forth.asm):01568         BLK     fcb     3
EA7A 424C4B           (        forth.asm):01569                 fcc     'BLK'
EA7D EA4A             (        forth.asm):01570                 fdb     BLOCK
EA7F C7               (        forth.asm):01571                 RFCS
EA80 8E0124           (        forth.asm):01572 (3)             ldx     #UBLK
EA83 7EE7ED           (        forth.asm):01573 (3)             jmp     NPUSH
                      (        forth.asm):01574         
EA86 03               (        forth.asm):01575         TOIN    fcb     3
EA87 3E494E           (        forth.asm):01576                 fcc     '>IN'
EA8A EA79             (        forth.asm):01577                 fdb     BLK
EA8C C7               (        forth.asm):01578                 RFCS
EA8D 8E0122           (        forth.asm):01579 (3)             ldx     #UTOIN
EA90 7EE7ED           (        forth.asm):01580 (3)             jmp     NPUSH
                      (        forth.asm):01581         
EA93 03               (        forth.asm):01582         SCR     fcb     3
EA94 534352           (        forth.asm):01583                 fcc     'SCR'
EA97 EA86             (        forth.asm):01584                 fdb     TOIN
EA99 C7               (        forth.asm):01585                 RFCS
EA9A 8E0126           (        forth.asm):01586 (3)             ldx     #USCR
EA9D 7EE7ED           (        forth.asm):01587 (3)             jmp     NPUSH
                      (        forth.asm):01588         
EAA0 05               (        forth.asm):01589         TICKS   fcb     5               Non-standard
EAA1 5449434B53       (        forth.asm):01590                 fcc     'TICKS'         ( -- tickslow tickshigh )
EAA6 EA93             (        forth.asm):01591                 fdb     SCR
EAA8 C7               (        forth.asm):01592                 RFCS
                      (        forth.asm):01593                 IFNE    RTCFEAT
                      (        forth.asm):01594                 pshs    cc
                      (        forth.asm):01595                 orcc    #FFLAG          Mask FIRQ while reading the double cell
                      (        forth.asm):01596                 ldx     TIKSLOW
                      (        forth.asm):01597                 ldy     TIKSHI
                      (        forth.asm):01598                 puls    cc              Restore the previous interrupt handling mode
                      (        forth.asm):01599                 jsr     NPUSH
                      (        forth.asm):01600                 tfr     y,x
                      (        forth.asm):01601                 ELSE
EAA9 1FC1             (        forth.asm):01602 (4)             tfr     0,x
EAAB BDE7ED           (        forth.asm):01603 (7)             jsr     NPUSH
                      (        forth.asm):01604                 ENDC                    RTCFEAT
EAAE 7EE7ED           (        forth.asm):01605 (3)             jmp     NPUSH
                      (        forth.asm):01606         
EAB1 04               (        forth.asm):01607         RTCFTCH fcb     4               Non-standard
EAB2 52544340         (        forth.asm):01608                 fcc     'RTC@'          ( regoff -- byteval )
EAB6 EAA0             (        forth.asm):01609                 fdb     TICKS
EAB8 C7               (        forth.asm):01610                 RFCS
                      (        forth.asm):01611                 IFNE    RTCFEAT
                      (        forth.asm):01612                 tst     RTCAVL
                      (        forth.asm):01613                 beq     RTNOCON
                      (        forth.asm):01614         * An MC146818 RTC is present. Let's get down to business.
                      (        forth.asm):01615                 jsr     NPOP            REGOFF to X
                      (        forth.asm):01616                 tfr     x,d
                      (        forth.asm):01617                 tfr     b,a
                      (        forth.asm):01618                 jsr     RTREGRD
                      (        forth.asm):01619                 clra                    BYTEVAL to D
                      (        forth.asm):01620                 pshu    d               Unchecked NPUSH of D
                      (        forth.asm):01621                 rts
EAB9                  (        forth.asm):01622         RTNOCON ldb     #17             RTC not detected on bootup -> I/O error
                      (        forth.asm):01623                 jsr     ERRHDLR         No return
                      (        forth.asm):01624                 ELSE
EAB9 BDFBFF           (        forth.asm):01625                 RFXT    jsr,DROP+7      XT for DROP
EABC 7EF900           (        forth.asm):01626                 RFXT    jmp,ZEROL+4     XT for 0
                      (        forth.asm):01627                 ENDC                    RTCFEAT
                      (        forth.asm):01628         
EABF 04               (        forth.asm):01629         RTCSTOR fcb     4               Non-standard
EAC0 52544321         (        forth.asm):01630                 fcc     'RTC!'          ( byteval regoff -- )
EAC4 EAB1             (        forth.asm):01631                 fdb     RTCFTCH
EAC6 C7               (        forth.asm):01632                 RFCS
                      (        forth.asm):01633                 IFNE    RTCFEAT
                      (        forth.asm):01634                 tst     RTCAVL
                      (        forth.asm):01635                 beq     RTNOCON
                      (        forth.asm):01636                 jsr     MIN2PST         At least two cells need to be stacked up
                      (        forth.asm):01637                 lda     1,u             REGOFF to A
                      (        forth.asm):01638                 ldb     3,u             BYTEVAL to B
                      (        forth.asm):01639                 leau    4,u             Drop two cells from the data stack
                      (        forth.asm):01640                 jmp     RTREGWR
                      (        forth.asm):01641                 ELSE
EAC7 7EF468           (        forth.asm):01642                 RFXT    jmp,TWODROP+8   XT for 2 DROP
                      (        forth.asm):01643                 ENDC                    RTCFEAT
                      (        forth.asm):01644         
EACA 04               (        forth.asm):01645         LIST    fcb     4               79-STANDARD (REQ109)
EACB 4C495354         (        forth.asm):01646                 fcc     'LIST'          ( ublkno -- )
EACF EABF             (        forth.asm):01647                 fdb     RTCSTOR
EAD1 C7               (        forth.asm):01648                 RFCS
EAD2 0D3D             (        forth.asm):01649 (4)             tst     CFCARDP
EAD4 2605             (        forth.asm):01650 (3)             bne     @lstpro
EAD6 C611             (        forth.asm):01651 (2)             ldb     #17             IO error
EAD8 BDE76A           (        forth.asm):01652 (7)             jsr     ERRHDLR         No return
EADB BDFBEF           (        forth.asm):01653         @lstpro RFXT    jsr,DUP+6       XT for DUP
EADE BDEA53           (        forth.asm):01654                 RFXT    jsr,BLOCK+8     XT for BLOCK
                      (        forth.asm):01655         * TOS now has the base buffer address.
EAE1 BDE7FB           (        forth.asm):01656 (7)             jsr     NPOP
EAE4 1F12             (        forth.asm):01657 (4)             tfr     x,y             Base buffer address to Y
EAE6 BDE7FB           (        forth.asm):01658 (7)             jsr     NPOP            ublkno to X
EAE9 9F26             (        forth.asm):01659 (4)             stx     USCR            Update SCR's value
EAEB C610             (        forth.asm):01660 (2)             ldb     #16             16 lines to go
EAED 3404             (        forth.asm):01661 (4+1)   @lstlop pshs    b
EAEF BDE300           (        forth.asm):01662 (7)             jsr     PUTCR
EAF2 1F21             (        forth.asm):01663 (4)             tfr     y,x
EAF4 BDE7ED           (        forth.asm):01664 (7)             jsr     NPUSH           Start address for TYPE
EAF7 8E0040           (        forth.asm):01665 (3)             ldx     #64
EAFA BDE7ED           (        forth.asm):01666 (7)             jsr     NPUSH           Byte count for TYPE
EAFD 103012           (        forth.asm):01667 (4)             addr    x,y
EB00 BDF700           (        forth.asm):01668                 RFXT    jsr,TYPE+7      XT for TYPE
EB03 3504             (        forth.asm):01669 (4+1)           puls    b
EB05 5A               (        forth.asm):01670 (1)             decb
EB06 26E5             (        forth.asm):01671 (3)             bne     @lstlop
EB08 39               (        forth.asm):01672 (4)             rts
                      (        forth.asm):01673         
                      (        forth.asm):01674         * Convert a single cell to a double. Non-transactional.
EB09 03               (        forth.asm):01675         STOD    fcb     3               ANSI Core ( n -- d )
EB0A 533E44           (        forth.asm):01676                 fcc     'S>D'
EB0D EACA             (        forth.asm):01677                 fdb     LIST
EB0F C7               (        forth.asm):01678                 RFCS
EB10 BDE7FB           (        forth.asm):01679 (7)             jsr     NPOP            N to X
EB13 3610             (        forth.asm):01680                 UCNPUSH                 Push back low order cell
EB15 104F             (        forth.asm):01681 (2)             clrd                    High order cell: default to N >= 0
EB17 1E01             (        forth.asm):01682 (5)             exg     d,x
EB19 4D               (        forth.asm):01683 (1)             tsta
EB1A 102AFCCF         (        forth.asm):01684 (5)             lbpl    NPUSH
EB1E 301F             (        forth.asm):01685 (4+1)           leax    -1,x            N is < 0. Sign extension is required. -1 to X
EB20 7EE7ED           (        forth.asm):01686 (3)             jmp     NPUSH
                      (        forth.asm):01687         
EB23 04               (        forth.asm):01688         NCLR    fcb     4               Non-standard
EB24 4E434C52         (        forth.asm):01689                 fcc     'NCLR'          Clear the data (normal) stack
EB28 EB09             (        forth.asm):01690                 fdb     STOD
EB2A C7               (        forth.asm):01691                 RFCS
EB2B CE0296           (        forth.asm):01692 (3)             ldu     #NSTBOT
EB2E 39               (        forth.asm):01693 (4)             rts
                      (        forth.asm):01694         
EB2F 04               (        forth.asm):01695         RCLR    fcb     4               Non-standard
EB30 52434C52         (        forth.asm):01696                 fcc     'RCLR'          Clear the return stack
EB34 EB23             (        forth.asm):01697                 fdb     NCLR
EB36 C7               (        forth.asm):01698                 RFCS
EB37 8E0316           (        forth.asm):01699 (3)             ldx     #RSTBOT
EB3A 9F00             (        forth.asm):01700 (4)             stx     RSP
EB3C 0F2E             (        forth.asm):01701 (5)             clr     RDEPTH
EB3E 39               (        forth.asm):01702 (4)             rts
                      (        forth.asm):01703         
EB3F 05               (        forth.asm):01704         DEPTH   fcb     5               79-STANDARD (REQ238)
EB40 4445505448       (        forth.asm):01705                 fcc     'DEPTH'
EB45 EB2F             (        forth.asm):01706                 fdb     RCLR
EB47 C7               (        forth.asm):01707                 RFCS
EB48 CC0296           (        forth.asm):01708 (3)             ldd     #NSTBOT         Bottom data stack address
EB4B 103230           (        forth.asm):01709 (4)             subr    u,d             D has the current value of the data stack ptr
EB4E 1044             (        forth.asm):01710 (2)             lsrd                    divided by 2
EB50 1F01             (        forth.asm):01711 (4)             tfr     d,x
EB52 7EE7ED           (        forth.asm):01712 (3)             jmp     NPUSH
                      (        forth.asm):01713         
EB55 06               (        forth.asm):01714         CREATE  fcb     6               79-STANDARD (REQ239)
EB56 435245415445     (        forth.asm):01715                 fcc     'CREATE'
EB5C EB3F             (        forth.asm):01716                 fdb     DEPTH
EB5E C7               (        forth.asm):01717                 RFCS
EB5F BDE517           (        forth.asm):01718 (7)             jsr     LOCWRT          Code entry point returned to Y
EB62 868E             (        forth.asm):01719 (2)             lda     #LDXOPC         LDX immediate
EB64 A7A0             (        forth.asm):01720 (4+1)           sta     ,y+
EB66 1F21             (        forth.asm):01721 (4)             tfr     y,x
EB68 3008             (        forth.asm):01722 (4+1)           leax    8,x
EB6A AFA1             (        forth.asm):01723 (5+2)           stx     ,y++
EB6C 86BD             (        forth.asm):01724 (2)             lda     #JSROPC         JSR extended
EB6E BDE58C           (        forth.asm):01725 (7)             jsr     VARCON1         Compile JSR NPUSH
EB71 8639             (        forth.asm):01726 (2)             lda     #RTSOPC         RTS inherent
EB73 A7A0             (        forth.asm):01727 (4+1)           sta     ,y+
EB75 3122             (        forth.asm):01728 (4+1)           leay    2,y             Reserve room for a possible DOES> clause
EB77 109F08           (        forth.asm):01729 (5)     CREAT1  sty     DICEND
EB7A 9E0C             (        forth.asm):01730 (4)             ldx     BDICEND         This is set by LOCWRT (was IY)
EB7C 9F06             (        forth.asm):01731 (4)             stx     LSTWAD
EB7E 39               (        forth.asm):01732 (4)             rts
                      (        forth.asm):01733         
EB7F C5               (        forth.asm):01734         DOES    fcb     $C5             79-STANDARD (REQ168)
EB80 444F45533E       (        forth.asm):01735                 fcc     'DOES>'
EB85 EB55             (        forth.asm):01736                 fdb     CREATE
EB87 C7               (        forth.asm):01737                 RFCS
EB88 8EEB8E           (        forth.asm):01738 (3)             ldx     #DOESEX         JSR #DOESEX is compiled (no actual return)
EB8B 7EE169           (        forth.asm):01739 (3)             jmp     EMXASXT         Set as action component
                      (        forth.asm):01740         
EB8E 9E06             (        forth.asm):01741 (4)     DOESEX  ldx     LSTWAD          Header of the last dictionary entry
EB90 E680             (        forth.asm):01742 (4+1)           ldb     ,x+
EB92 C41F             (        forth.asm):01743 (2)             andb    #WRLNMSK        Extract word length
EB94 3A               (        forth.asm):01744 (1)             abx
                      (        forth.asm):01745                 IFNE    RELFEAT
EB95 3009             (        forth.asm):01746 (4+1)           leax    9,x             2 bytes/backlink, 1/cksum, 6 bytes code offset
                      (        forth.asm):01747                 ELSE
                      (        forth.asm):01748                 leax    8,x             2 bytes/backlink, 6 bytes code offset
                      (        forth.asm):01749                 ENDC                    RELFEAT
EB97 A684             (        forth.asm):01750 (4+0)           lda     ,x
EB99 8139             (        forth.asm):01751 (2)             cmpa    #RTSOPC         RTS inherent
EB9B 2705             (        forth.asm):01752 (3)             beq     @dosex1
EB9D C60E             (        forth.asm):01753 (2)             ldb     #14             No matching CREATE
EB9F BDE76A           (        forth.asm):01754 (7)             jsr     ERRHDLR         No return
EBA2 867E             (        forth.asm):01755 (2)     @dosex1 lda     #JMPOPC         JMP extended
EBA4 A780             (        forth.asm):01756 (4+1)           sta     ,x+             Overwrite RTS opcode
EBA6 3520             (        forth.asm):01757 (4+2)           puls    y
EBA8 10AF84           (        forth.asm):01758 (6+0)           sty     ,x
EBAB 39               (        forth.asm):01759 (4)             rts
                      (        forth.asm):01760         
EBAC 87               (        forth.asm):01761         LITERAL fcb     $87             79-STANDARD (REQ215)
EBAD 4C49544552414C   (        forth.asm):01762                 fcc     'LITERAL'
EBB4 EB7F             (        forth.asm):01763                 fdb     DOES
EBB6 C7               (        forth.asm):01764                 RFCS
EBB7 BDE7FB           (        forth.asm):01765 (7)             jsr     NPOP
EBBA 0D21             (        forth.asm):01766 (4)             tst     USTATE+1
EBBC 2601             (        forth.asm):01767 (3)             bne     @comp
EBBE 39               (        forth.asm):01768 (4)             rts                     The standard defines no semantics in interp mode
EBBF 109E08           (        forth.asm):01769 (5)     @comp   ldy     DICEND
EBC2 868E             (        forth.asm):01770 (2)             lda     #LDXOPC         LDX immediate
EBC4 BDE58F           (        forth.asm):01771 (7)             jsr     VARCON2         Compile LDX #X
EBC7 109F08           (        forth.asm):01772 (5)             sty     DICEND          Update HERE
EBCA 8EE7ED           (        forth.asm):01773 (3)             ldx     #NPUSH
EBCD 7EE169           (        forth.asm):01774 (3)             jmp     EMXASXT         Set NPUSH as action component
                      (        forth.asm):01775         
                      (        forth.asm):01776         * Functionally: : CONSTANT CREATE , DOES> @ ;
                      (        forth.asm):01777         * The following code produces more compact code.
EBD0 08               (        forth.asm):01778         CONS    fcb     8               79-STANDARD (REQ185)
EBD1 434F4E5354414E54 (        forth.asm):01779                 fcc     'CONSTANT'
EBD9 EBAC             (        forth.asm):01780                 fdb     LITERAL
EBDB C7               (        forth.asm):01781                 RFCS
EBDC BDE7FB           (        forth.asm):01782 (7)             jsr     NPOP
EBDF 1F16             (        forth.asm):01783 (4)             tfr     x,w
EBE1 BDE517           (        forth.asm):01784 (7)             jsr     LOCWRT          Create dictionary entry
EBE4 1F61             (        forth.asm):01785 (4)             tfr     w,x
EBE6 868E             (        forth.asm):01786 (2)             lda     #LDXOPC         ldx immediate
EBE8 BDE58F           (        forth.asm):01787 (7)             jsr     VARCON2         Compile LDX #CSTVAL
EBEB BDE58A           (        forth.asm):01788 (7)             jsr     VARCON          Compile JMP NPUSH
                      (        forth.asm):01789                 IFNE    RELFEAT
EBEE 8D87             (        forth.asm):01790 (6)             bsr     CREAT1
EBF0 2059             (        forth.asm):01791                 RFXT    bra,MONITOR+10  XT for MONITOR
                      (        forth.asm):01792                 ELSE
                      (        forth.asm):01793                 bra     CREAT1
                      (        forth.asm):01794                 ENDC                    RELFEAT
                      (        forth.asm):01795         
                      (        forth.asm):01796         * Functionally: : VARIABLE CREATE 2 ALLOT ;
                      (        forth.asm):01797         * However we can save three bytes per instance with the following code.
EBF2 08               (        forth.asm):01798         VARI    fcb     8               79-STANDARD (REQ227)
EBF3 5641524941424C45 (        forth.asm):01799                 fcc     'VARIABLE'
EBFB EBD0             (        forth.asm):01800                 fdb     CONS
EBFD C7               (        forth.asm):01801                 RFCS
EBFE BDE517           (        forth.asm):01802 (7)             jsr     LOCWRT
EC01 868E             (        forth.asm):01803 (2)             lda     #LDXOPC         ldx immediate
EC03 A7A0             (        forth.asm):01804 (4+1)           sta     ,y+
EC05 1F26             (        forth.asm):01805 (4)             tfr     y,w             Preserve Y (HERE)
EC07 3125             (        forth.asm):01806 (4+1)           leay    5,y             Relative variable address
EC09 1F21             (        forth.asm):01807 (4)             tfr     y,x
EC0B 1F62             (        forth.asm):01808 (4)             tfr     w,y             Restore Y (HERE)
EC0D AFA1             (        forth.asm):01809 (5+2)           stx     ,y++            Address field for LDX #VARADDR
EC0F BDE58A           (        forth.asm):01810 (7)             jsr     VARCON          Compile JMP NPUSH
EC12 3122             (        forth.asm):01811 (4+1)           leay    2,y             2 ALLOT
EC14 7EEB77           (        forth.asm):01812 (3)             jmp     CREAT1
                      (        forth.asm):01813         
EC17 09               (        forth.asm):01814         IMMED   fcb     9               79-STANDARD (REQ103)
EC18 494D4D4544494154 (        forth.asm):01815                 fcc     'IMMEDIATE'
     45
EC21 EBF2             (        forth.asm):01816                 fdb     VARI
EC23 C7               (        forth.asm):01817                 RFCS
EC24 C680             (        forth.asm):01818 (2)             ldb     #IMDFLM
EC26 9E06             (        forth.asm):01819 (4)     IMMED1  ldx     LSTWAD
EC28 A684             (        forth.asm):01820 (4+0)           lda     ,x
EC2A 103598           (        forth.asm):01821 (4)             orr     b,a
EC2D A784             (        forth.asm):01822 (4+0)           sta     ,x
EC2F 39               (        forth.asm):01823 (4)             rts
                      (        forth.asm):01824         
EC30 08               (        forth.asm):01825         RSTRCT  fcb     8               Non-standard (GNU Forth)
EC31 5245535452494354 (        forth.asm):01826                 fcc     'RESTRICT'      Make word available in compilation mode only
EC39 EC17             (        forth.asm):01827                 fdb     IMMED
EC3B C7               (        forth.asm):01828                 RFCS
EC3C C640             (        forth.asm):01829 (2)             ldb     #DEFFLM
EC3E 20E6             (        forth.asm):01830 (3)             bra     IMMED1
                      (        forth.asm):01831         
                      (        forth.asm):01832         * This non-standard word enables checkum monitoring by ICHECK for the
                      (        forth.asm):01833         * last defined word in the dictionary. : words are monitored by default
                      (        forth.asm):01834         * and so are constants. CREATEd words require an explicit invokation of
                      (        forth.asm):01835         * MONITOR if they are to be checked for integrity.
EC40 07               (        forth.asm):01836         MONITOR fcb     7
EC41 4D4F4E49544F52   (        forth.asm):01837                 fcc     'MONITOR'       ( -- )
EC48 EC30             (        forth.asm):01838                 fdb     RSTRCT
EC4A C7               (        forth.asm):01839                 RFCS
                      (        forth.asm):01840                 IFNE    RELFEAT
EC4B 8601             (        forth.asm):01841 (2)             lda     #1              Set MONFLM in the word 'flags' header field
EC4D 3402             (        forth.asm):01842 (4+1)           pshs    a
EC4F 9E06             (        forth.asm):01843 (4)     MONIT1  ldx     LSTWAD          Latest defined word header address
EC51 A684             (        forth.asm):01844 (4+0)           lda     ,x
EC53 6DE4             (        forth.asm):01845 (5+0)           tst     ,s              Should we set or clear MONFLM?
EC55 2604             (        forth.asm):01846 (3)             bne     @setflg
EC57 84DF             (        forth.asm):01847 (2)             anda    #^MONFLM        Clear MONFLM in the word's attribute field
EC59 2002             (        forth.asm):01848 (3)             bra     @cont
EC5B 8A20             (        forth.asm):01849 (2)     @setflg ora     #MONFLM         Set MONFLM in the word's attribute field
EC5D A784             (        forth.asm):01850 (4+0)   @cont   sta     ,x
EC5F 8D1C             (        forth.asm):01851 (6)             bsr     HDRSKIP         Skip the header (XT to X), clear A
EC61 109E08           (        forth.asm):01852 (5)             ldy     DICEND          The upper code section limit (excluded)
EC64 8D21             (        forth.asm):01853 (6)             bsr     HDRCSUM         Current word's definition's checksum to A
EC66 A71F             (        forth.asm):01854 (4+1)           sta     -1,x            Store the computed checksum into the header
EC68 3261             (        forth.asm):01855 (4+1)           leas    1,s             Drop one byte from the system stack
                      (        forth.asm):01856                 ENDC                    RELFEAT
EC6A 39               (        forth.asm):01857 (4)             rts
                      (        forth.asm):01858         
                      (        forth.asm):01859         * Added for better support of ANSI VALUEs.
EC6B 09               (        forth.asm):01860         UNMON   fcb     9
EC6C 554E4D4F4E49544F (        forth.asm):01861                 fcc     'UNMONITOR'     ( -- )
     52
EC75 EC40             (        forth.asm):01862                 fdb     MONITOR
EC77 C7               (        forth.asm):01863                 RFCS
                      (        forth.asm):01864                 IFNE    RELFEAT
EC78 4F               (        forth.asm):01865 (1)             clra
EC79 3402             (        forth.asm):01866 (4+1)           pshs    a
EC7B 20D2             (        forth.asm):01867 (3)             bra     MONIT1
                      (        forth.asm):01868                 ELSE
                      (        forth.asm):01869                 rts
                      (        forth.asm):01870                 ENDC                    RELFEAT
                      (        forth.asm):01871         
                      (        forth.asm):01872                 IFNE    RELFEAT
                      (        forth.asm):01873         * On entry, X has a word's header address. On return X has the compilation
                      (        forth.asm):01874         * address for that word (XT). A is cleared so as to initialize the checksum.
EC7D A684             (        forth.asm):01875 (4+0)   HDRSKIP lda     ,x              Word's header attribute byte to A
EC7F 841F             (        forth.asm):01876 (2)             anda    #WRLNMSK        Extract the word's length
EC81 8B04             (        forth.asm):01877 (2)             adda    #4              1B attribute, 2B backlink, 1B checksum
EC83 3086             (        forth.asm):01878 (4+1)           leax    a,x             X has the word's XT. -1,X has the orig checksum
EC85 4F               (        forth.asm):01879 (1)             clra
EC86 39               (        forth.asm):01880 (4)             rts
                      (        forth.asm):01881         
                      (        forth.asm):01882         * On entry X has a word's compilation address (XT). A is supposed to have been
                      (        forth.asm):01883         * previously cleared. Y has the upper bound of the code section's address
                      (        forth.asm):01884         * (excluded). On return, A will have the word's code section's checksum.
                      (        forth.asm):01885         * X is preserved.
EC87 3410             (        forth.asm):01886 (4+2)   HDRCSUM pshs    x
EC89 A880             (        forth.asm):01887 (4+1)   @hdrcs1 eora    ,x+             Update the checksum
EC8B 103712           (        forth.asm):01888 (4)             cmpr    x,y             Upper bound reached?
EC8E 26F9             (        forth.asm):01889 (3)             bne     @hdrcs1         No. Process next byte in word's code section
EC90 3510             (        forth.asm):01890 (4+2)           puls    x
EC92 39               (        forth.asm):01891 (4)             rts
                      (        forth.asm):01892         
EC93 696E746567726974 (        forth.asm):01893         CSUMFLM fcn     'integrity check failed'
     7920636865636B20
     6661696C656400
                      (        forth.asm):01894                 ENDC                    RELFEAT
                      (        forth.asm):01895         
                      (        forth.asm):01896         * This non-standard word walks through the dictionary linked list and checks
                      (        forth.asm):01897         * that the words that have the MONFLM flag set in their header's attribute
                      (        forth.asm):01898         * field have a definition that still matches the checksum stored in the word's
                      (        forth.asm):01899         * header. This is meant to be used interactively, as a debugging tool, since
                      (        forth.asm):01900         * multitasking is not supported by this implementation. Therefore no status
                      (        forth.asm):01901         * value is returned. Feedback will only be provided for corrupted words, in
                      (        forth.asm):01902         * the form of a diagnostic message printed to the console.
ECAA 06               (        forth.asm):01903         ICHECK  fcb     6
ECAB 49434845434B     (        forth.asm):01904                 fcc     'ICHECK'        ( -- )
ECB1 EC6B             (        forth.asm):01905                 fdb     UNMON
ECB3 C7               (        forth.asm):01906                 RFCS
                      (        forth.asm):01907                 IFNE    RELFEAT
ECB4 109E08           (        forth.asm):01908 (5)             ldy     DICEND          Upper bound for the code of the last word (exc.)
ECB7 9E06             (        forth.asm):01909 (4)             ldx     LSTWAD          LAST points to the header of the last word
ECB9 3410             (        forth.asm):01910 (4+2)   @icklop pshs    x               Current word's header address
ECBB A684             (        forth.asm):01911 (4+0)           lda     ,x              Word's header attribute byte to A
ECBD 8520             (        forth.asm):01912 (2)             bita    #MONFLM         Is this a monitored word?
ECBF 2726             (        forth.asm):01913 (3)             beq     @icknxt         No. Point to the next word
ECC1 8DBA             (        forth.asm):01914 (6)             bsr     HDRSKIP         Skip the header (XT to X), clear A
ECC3 8DC2             (        forth.asm):01915 (6)             bsr     HDRCSUM         Current word's definition's checksum to A
ECC5 A11F             (        forth.asm):01916 (4+1)           cmpa    -1,x            Does the checksum match the compile time value?
ECC7 271E             (        forth.asm):01917 (3)             beq     @icknxt         Yes. Point to the next word
                      (        forth.asm):01918         * Current word's definition has been modified since its original definition!
ECC9 BDE300           (        forth.asm):01919 (7)             jsr     PUTCR
ECCC AEE4             (        forth.asm):01920 (5+0)           ldx     ,s              Current word's header address
ECCE E680             (        forth.asm):01921 (4+1)           ldb     ,x+
ECD0 C41F             (        forth.asm):01922 (2)             andb    #WRLNMSK
ECD2 4F               (        forth.asm):01923 (1)             clra
ECD3 BDE7ED           (        forth.asm):01924 (7)             jsr     NPUSH           Word's name base address
ECD6 1F01             (        forth.asm):01925 (4)             tfr     d,x
ECD8 BDE7ED           (        forth.asm):01926 (7)             jsr     NPUSH           Byte count for TYPE
ECDB BDF700           (        forth.asm):01927                 RFXT    jsr,TYPE+7      XT for TYPE
ECDE BDF6B2           (        forth.asm):01928                 RFXT    jsr,SPACE+8     XT for SPACE
ECE1 8EEC93           (        forth.asm):01929 (3)             ldx     #CSUMFLM
ECE4 BDE2F3           (        forth.asm):01930 (7)             jsr     PUTS            Feedback for checksum failure
ECE7 3510             (        forth.asm):01931 (4+2)   @icknxt puls    x               Current word's header address
ECE9 1F12             (        forth.asm):01932 (4)             tfr     x,y             Point to the end of the previous word's code
ECEB 8D90             (        forth.asm):01933 (6)             bsr     HDRSKIP         Skip the header (XT to X), clear A
ECED AE1D             (        forth.asm):01934 (5+1)           ldx     -3,x            Point to the previous header via the backlink
ECEF 2702             (        forth.asm):01935 (3)             beq     @ickdon         We've just reached the end of the dictionary
ECF1 20C6             (        forth.asm):01936 (3)             bra     @icklop
                      (        forth.asm):01937                 ENDC                    RELFEAT
ECF3 39               (        forth.asm):01938 (4)     @ickdon rts
                      (        forth.asm):01939         
ECF4 C2               (        forth.asm):01940         DO      fcb     $C2             79-STANDARD (REQ142)
ECF5 444F             (        forth.asm):01941                 fcc     'DO'
ECF7 ECAA             (        forth.asm):01942                 fdb     ICHECK
ECF9 C7               (        forth.asm):01943                 RFCS
ECFA 8EED05           (        forth.asm):01944 (3)             ldx     #DOEX
ECFD BDE169           (        forth.asm):01945 (7)             jsr     EMXASXT         Compile "JSR DOEX"
ED00 1F21             (        forth.asm):01946 (4)             tfr     y,x
ED02 7EE80A           (        forth.asm):01947 (3)             jmp     RPUSH           HERE to the control flow stack
                      (        forth.asm):01948         
ED05 BDFC0A           (        forth.asm):01949         DOEX    RFXT    jsr,SWAP+7      XT for SWAP
ED08 BDF074           (        forth.asm):01950                 RFXT    jsr,TOR+5       XT for >R (limit)
ED0B 7EF074           (        forth.asm):01951                 RFXT    jmp,TOR+5       XT for >R (index)
                      (        forth.asm):01952         
ED0E C4               (        forth.asm):01953         LOOP    fcb     $C4             79-STANDARD (REQ124)
ED0F 4C4F4F50         (        forth.asm):01954                 fcc     'LOOP'
ED13 ECF4             (        forth.asm):01955                 fdb     DO
ED15 C7               (        forth.asm):01956                 RFCS
ED16 8EED2D           (        forth.asm):01957 (3)             ldx     #LOOPEX
ED19 BDE169           (        forth.asm):01958 (7)     LOOP1   jsr     EMXASXT
ED1C 8E2503           (        forth.asm):01959 (3)             ldx     #BCSOPC         Compile "BCS *+5"
ED1F AFA1             (        forth.asm):01960 (5+2)           stx     ,y++
ED21 BDE828           (        forth.asm):01961 (7)             jsr     RPOP
ED24 867E             (        forth.asm):01962 (2)             lda     #JMPOPC
ED26 BDE58F           (        forth.asm):01963 (7)             jsr     VARCON2         Compile "JMP R@"
ED29 109F08           (        forth.asm):01964 (5)             sty     DICEND          No action component
ED2C 39               (        forth.asm):01965 (4)             rts
                      (        forth.asm):01966         
ED2D 8E0001           (        forth.asm):01967 (3)     LOOPEX  ldx     #1
ED30 2011             (        forth.asm):01968 (3)             bra     PLOPEX1
                      (        forth.asm):01969         
ED32 C5               (        forth.asm):01970         PLOOP   fcb     $C5             79-STANDARD (REQ141)
ED33 2B4C4F4F50       (        forth.asm):01971                 fcc     '+LOOP'         The sign hdl reqs for REQ124 should apply though
ED38 ED0E             (        forth.asm):01972                 fdb     LOOP
ED3A C7               (        forth.asm):01973                 RFCS
ED3B 8EED40           (        forth.asm):01974 (3)             ldx     #PLOOPEX
ED3E 20D9             (        forth.asm):01975 (3)             bra     LOOP1
                      (        forth.asm):01976         
ED40 BDE7FB           (        forth.asm):01977 (7)     PLOOPEX jsr     NPOP
ED43 1F16             (        forth.asm):01978 (4)     PLOPEX1 tfr     x,w             Increment to W
ED45 BDE828           (        forth.asm):01979 (7)             jsr     RPOP
ED48 1F12             (        forth.asm):01980 (4)             tfr     x,y             Index to Y
ED4A BDE828           (        forth.asm):01981 (7)             jsr     RPOP            Limit to X
ED4D 103062           (        forth.asm):01982 (4)             addr    w,y             Update index
ED50 114D             (        forth.asm):01983 (2)             tste
ED52 2B10             (        forth.asm):01984 (3)             bmi     @neginc
ED54 103721           (        forth.asm):01985 (4)             cmpr    y,x
ED57 2F12             (        forth.asm):01986 (3)             ble     @done           We're done. Return With CFLAG set
ED59 BDE80A           (        forth.asm):01987 (7)     @iter   jsr     RPUSH           Push back the limit
ED5C 1F21             (        forth.asm):01988 (4)             tfr     y,x
ED5E BDE80A           (        forth.asm):01989 (7)             jsr     RPUSH           Push back the index
ED61 1CFE             (        forth.asm):01990 (2)             andcc   #^CFLAG         Clear CFLAG
ED63 39               (        forth.asm):01991 (4)             rts
ED64 103721           (        forth.asm):01992 (4)     @neginc cmpr    y,x
ED67 27F0             (        forth.asm):01993 (3)             beq     @iter           79-STANDARD irregular historical precedent
ED69 2BEE             (        forth.asm):01994 (3)             bmi     @iter
ED6B 1A01             (        forth.asm):01995 (2)     @done   orcc    #CFLAG          Set CFLAG
ED6D 39               (        forth.asm):01996 (4)             rts
                      (        forth.asm):01997         
ED6E 46               (        forth.asm):01998         UNLOOP  fcb     $46             ANSI (Core)
ED6F 554E4C4F4F50     (        forth.asm):01999                 fcc     'UNLOOP'
ED75 ED32             (        forth.asm):02000                 fdb     PLOOP
ED77 C7               (        forth.asm):02001                 RFCS
ED78 BDE828           (        forth.asm):02002 (7)             jsr     RPOP            Drop the index from the return stack
ED7B 7EE828           (        forth.asm):02003 (3)             jmp     RPOP            and the loop limit as well
                      (        forth.asm):02004         
ED7E C2               (        forth.asm):02005         IF      fcb     $C2             79-STANDARD (REQ210)
ED7F 4946             (        forth.asm):02006                 fcc     'IF'
ED81 ED6E             (        forth.asm):02007                 fdb     UNLOOP
ED83 C7               (        forth.asm):02008                 RFCS
ED84 8EED9E           (        forth.asm):02009 (3)             ldx     #IFEX
ED87 BDE169           (        forth.asm):02010 (7)             jsr     EMXASXT         Compile "JSR IFEX"
ED8A 8E2603           (        forth.asm):02011 (3)             ldx     #BNEOPC
ED8D AFA1             (        forth.asm):02012 (5+2)           stx     ,y++            Compile "BNE *+5"
ED8F 867E             (        forth.asm):02013 (2)             lda     #JMPOPC         JMP extended
ED91 A7A0             (        forth.asm):02014 (4+1)           sta     ,y+             C,
ED93 1F21             (        forth.asm):02015 (4)             tfr     y,x
ED95 BDE80A           (        forth.asm):02016 (7)             jsr     RPUSH           HERE to the control stack (ANS:orig)
                      (        forth.asm):02017         * This cell contents is a forward reference that will be resolved by ELSE/THEN.
ED98 3122             (        forth.asm):02018 (4+1)           leay    2,y
ED9A 109F08           (        forth.asm):02019 (5)             sty     DICEND          2 ALLOT
ED9D 39               (        forth.asm):02020 (4)             rts
                      (        forth.asm):02021         
ED9E BDE7FB           (        forth.asm):02022 (7)     IFEX    jsr     NPOP
EDA1 1037C1           (        forth.asm):02023 (4)             cmpr    0,x
EDA4 39               (        forth.asm):02024 (4)             rts
                      (        forth.asm):02025         
                      (        forth.asm):02026         * Functionally equivalent to:
                      (        forth.asm):02027         * : UNLESS POSTPONE 0= POSTPONE IF ; IMMEDIATE RESTRICT
EDA5 C6               (        forth.asm):02028         UNLESS  fcb     $C6             Non-standard (Perl inspired)
EDA6 554E4C455353     (        forth.asm):02029                 fcc     'UNLESS'
EDAC ED7E             (        forth.asm):02030                 fdb     IF
EDAE C7               (        forth.asm):02031                 RFCS
EDAF 8EEED0           (        forth.asm):02032                 RFXT    ldx,#NULP+5     XT for 0=
EDB2 BDE169           (        forth.asm):02033 (7)             jsr     EMXASXT
EDB5 20CD             (        forth.asm):02034                 RFXT    bra,IF+5        XT for IF
                      (        forth.asm):02035         
EDB7 C4               (        forth.asm):02036         ELSE    fcb     $C4             79-STANDARD (REQ167)
EDB8 454C5345         (        forth.asm):02037                 fcc     'ELSE'
EDBC EDA5             (        forth.asm):02038                 fdb     UNLESS
EDBE C7               (        forth.asm):02039                 RFCS
EDBF 109E08           (        forth.asm):02040 (5)             ldy     DICEND
EDC2 867E             (        forth.asm):02041 (2)             lda     #JMPOPC         JMP extended
EDC4 A7A0             (        forth.asm):02042 (4+1)           sta     ,y+
EDC6 3122             (        forth.asm):02043 (4+1)           leay    2,y
EDC8 109F08           (        forth.asm):02044 (5)             sty     DICEND
EDCB BDE828           (        forth.asm):02045 (7)             jsr     RPOP
EDCE 10AF84           (        forth.asm):02046 (6+0)           sty     ,x              Set actual ELSE jump address
EDD1 1F21             (        forth.asm):02047 (4)             tfr     y,x
EDD3 301E             (        forth.asm):02048 (4+1)           leax    -2,x
EDD5 7EE80A           (        forth.asm):02049 (3)             jmp     RPUSH
                      (        forth.asm):02050         
EDD8 C4               (        forth.asm):02051         THEN    fcb     $C4             79-STANDARD (REQ161)
EDD9 5448454E         (        forth.asm):02052                 fcc     'THEN'
EDDD EDB7             (        forth.asm):02053                 fdb     ELSE
EDDF C7               (        forth.asm):02054                 RFCS
EDE0 109E08           (        forth.asm):02055 (5)             ldy     DICEND
EDE3 BDE828           (        forth.asm):02056 (7)             jsr     RPOP
EDE6 10AF84           (        forth.asm):02057 (6+0)           sty     ,x
EDE9 39               (        forth.asm):02058 (4)             rts
                      (        forth.asm):02059         
EDEA 01               (        forth.asm):02060         EQ      fcb     1               79-STANDARD (REQ173)
EDEB 3D               (        forth.asm):02061                 fcc     '='             ( N1 N2 -- FLAG )
EDEC EDD8             (        forth.asm):02062                 fdb     THEN
EDEE C7               (        forth.asm):02063                 RFCS
EDEF BDE49A           (        forth.asm):02064 (7)             jsr     MIN2PST         At least two cells need to be stacked up
EDF2 10ECC4           (        forth.asm):02065 (8+0)           ldq     ,u              D:W has N2:N1
EDF5 3342             (        forth.asm):02066 (4+1)           leau    2,u             Drop one cell from the user stack
EDF7 1FC1             (        forth.asm):02067 (4)             tfr     0,x
EDF9 103760           (        forth.asm):02068 (4)             cmpr    w,d
EDFC 2602             (        forth.asm):02069 (3)             bne     @eq1
EDFE 3001             (        forth.asm):02070 (4+1)           leax    1,x
EE00 AFC4             (        forth.asm):02071 (5+0)   @eq1    stx     ,u              Store in place to FLAG
EE02 39               (        forth.asm):02072 (4)             rts
                      (        forth.asm):02073         
EE03 02               (        forth.asm):02074         DIFF    fcb     2               79-STANDARD (REF)
EE04 3C3E             (        forth.asm):02075                 fcc     '<>'            ( N1 N2 -- FLAG )
EE06 EDEA             (        forth.asm):02076                 fdb     EQ
EE08 C7               (        forth.asm):02077                 RFCS
EE09 BDE49A           (        forth.asm):02078 (7)             jsr     MIN2PST         At least two cells need to be stacked up
EE0C 10ECC4           (        forth.asm):02079 (8+0)           ldq     ,u              D:W has N2:N1
EE0F 3342             (        forth.asm):02080 (4+1)           leau    2,u             Drop one cell from the user stack
EE11 1FC1             (        forth.asm):02081 (4)             tfr     0,x
EE13 103760           (        forth.asm):02082 (4)             cmpr    w,d
EE16 2702             (        forth.asm):02083 (3)             beq     @diff1
EE18 3001             (        forth.asm):02084 (4+1)           leax    1,x
EE1A AFC4             (        forth.asm):02085 (5+0)   @diff1  stx     ,u              Store in place to FLAG
EE1C 39               (        forth.asm):02086 (4)             rts
                      (        forth.asm):02087         
EE1D 02               (        forth.asm):02088         SINFEQ  fcb     2               Non-standard (Not even ANSI!)
EE1E 3C3D             (        forth.asm):02089                 fcc     '<='            Required for the ORNL fixed sieve benchmark
EE20 EE03             (        forth.asm):02090                 fdb     DIFF
EE22 C7               (        forth.asm):02091                 RFCS
EE23 BDE49A           (        forth.asm):02092 (7)             jsr     MIN2PST         At least two cells need to be stacked up
EE26 10AEC4           (        forth.asm):02093 (6+0)           ldy     ,u
EE29 AE42             (        forth.asm):02094 (5+1)           ldx     2,u
EE2B 104F             (        forth.asm):02095 (2)             clrd
EE2D 103721           (        forth.asm):02096 (4)             cmpr    y,x
EE30 2E02             (        forth.asm):02097 (3)             bgt     @sinfq1
EE32 104C             (        forth.asm):02098 (2)             incd
EE34 3342             (        forth.asm):02099 (4+1)   @sinfq1 leau    2,u             Drop one cell
EE36 EDC4             (        forth.asm):02100 (5+0)           std     ,u
EE38 39               (        forth.asm):02101 (4)             rts
                      (        forth.asm):02102         
                      (        forth.asm):02103                 IFNE    DEBUG
EE39                  (        forth.asm):02104         CC      fcb     2               Non-standard. Used for debugging
                      (        forth.asm):02105                 fcc     'CC'
                      (        forth.asm):02106                 fdb     SINFEQ
                      (        forth.asm):02107                 RFCS
                      (        forth.asm):02108                 ldx     CCREG
                      (        forth.asm):02109                 jmp     NPUSH
                      (        forth.asm):02110                 ENDC                    DEBUG
                      (        forth.asm):02111         
EE39 03               (        forth.asm):02112         XOR     fcb     3               79-STANDARD (REQ179)
EE3A 584F52           (        forth.asm):02113                 fcc     'XOR'
                      (        forth.asm):02114                 IFNE    DEBUG
                      (        forth.asm):02115                 fdb     CC
                      (        forth.asm):02116                 ELSE
EE3D EE1D             (        forth.asm):02117                 fdb     SINFEQ
                      (        forth.asm):02118                 ENDC                    DEBUG
EE3F C7               (        forth.asm):02119                 RFCS
EE40 BDE49A           (        forth.asm):02120 (7)             jsr     MIN2PST         At least two cells need to be stacked up
EE43 ECC4             (        forth.asm):02121 (5+0)           ldd     ,u
EE45 10A642           (        forth.asm):02122 (6+1)           ldw     2,u
EE48 103660           (        forth.asm):02123 (4)             eorr    w,d
EE4B 3342             (        forth.asm):02124 (4+1)   XOR1    leau    2,u
EE4D EDC4             (        forth.asm):02125 (5+0)           std     ,u
EE4F 39               (        forth.asm):02126 (4)             rts
                      (        forth.asm):02127         
EE50 02               (        forth.asm):02128         OR      fcb     2               79-STANDARD (REQ223)
EE51 4F52             (        forth.asm):02129                 fcc     'OR'
EE53 EE39             (        forth.asm):02130                 fdb     XOR
EE55 C7               (        forth.asm):02131                 RFCS
EE56 BDE49A           (        forth.asm):02132 (7)             jsr     MIN2PST         At least two cells need to be stacked up
EE59 ECC4             (        forth.asm):02133 (5+0)           ldd     ,u
EE5B 10A642           (        forth.asm):02134 (6+1)           ldw     2,u
EE5E 103560           (        forth.asm):02135 (4)             orr     w,d
EE61 20E8             (        forth.asm):02136 (3)             bra     XOR1
                      (        forth.asm):02137         
EE63 03               (        forth.asm):02138         AND     fcb     3               79-STANDARD (REQ183)
EE64 414E44           (        forth.asm):02139                 fcc     'AND'
EE67 EE50             (        forth.asm):02140                 fdb     OR
EE69 C7               (        forth.asm):02141                 RFCS
EE6A BDE49A           (        forth.asm):02142 (7)             jsr     MIN2PST         At least two cells need to be stacked up
EE6D ECC4             (        forth.asm):02143 (5+0)           ldd     ,u
EE6F 10A642           (        forth.asm):02144 (6+1)           ldw     2,u
EE72 103460           (        forth.asm):02145 (4)             andr    w,d
EE75 20D4             (        forth.asm):02146 (3)             bra     XOR1
                      (        forth.asm):02147         
EE77 03               (        forth.asm):02148         COM     fcb     3               79-STANDARD (REF)
EE78 434F4D           (        forth.asm):02149                 fcc     'COM'
EE7B EE63             (        forth.asm):02150                 fdb     AND
EE7D C7               (        forth.asm):02151                 RFCS
EE7E BDE7FB           (        forth.asm):02152 (7)     COM0    jsr     NPOP
EE81 1F10             (        forth.asm):02153 (4)             tfr     x,d
EE83 1043             (        forth.asm):02154 (2)             comd
EE85 1F01             (        forth.asm):02155 (4)             tfr     d,x
EE87 3610             (        forth.asm):02156                 UCNPUSH
EE89 39               (        forth.asm):02157 (4)             rts
                      (        forth.asm):02158         
EE8A 06               (        forth.asm):02159         INVERT  fcb     6               ANSI (Core)
EE8B 494E56455254     (        forth.asm):02160                 fcc     'INVERT'
EE91 EE77             (        forth.asm):02161                 fdb     COM
EE93 C7               (        forth.asm):02162                 RFCS
EE94 20E8             (        forth.asm):02163 (3)             bra     COM0
                      (        forth.asm):02164         
EE96 02               (        forth.asm):02165         ZGREAT  fcb     2               79-STANDARD (REQ118)
EE97 303E             (        forth.asm):02166                 fcc     '0>'
EE99 EE8A             (        forth.asm):02167                 fdb     INVERT
EE9B C7               (        forth.asm):02168                 RFCS
EE9C BDE7FB           (        forth.asm):02169 (7)             jsr     NPOP
EE9F 1F10             (        forth.asm):02170 (4)             tfr     x,d
EEA1 104D             (        forth.asm):02171 (2)             tstd
EEA3 2F06             (        forth.asm):02172 (3)             ble     @zgrt1
EEA5 8E0001           (        forth.asm):02173 (3)             ldx     #1
EEA8 3610             (        forth.asm):02174                 UCNPUSH
EEAA 39               (        forth.asm):02175 (4)             rts
EEAB 1FC1             (        forth.asm):02176 (4)     @zgrt1  tfr     0,x
EEAD 3610             (        forth.asm):02177                 UCNPUSH
EEAF 39               (        forth.asm):02178 (4)             rts
                      (        forth.asm):02179         
EEB0 02               (        forth.asm):02180         ZLESS   fcb     2               79-STANDARD (REQ144)
EEB1 303C             (        forth.asm):02181                 fcc     '0<'
EEB3 EE96             (        forth.asm):02182                 fdb     ZGREAT
EEB5 C7               (        forth.asm):02183                 RFCS
EEB6 BDE7FB           (        forth.asm):02184 (7)             jsr     NPOP
EEB9 1F10             (        forth.asm):02185 (4)             tfr     x,d
EEBB 104D             (        forth.asm):02186 (2)             tstd
EEBD 2C06             (        forth.asm):02187 (3)             bge     @zlss1
EEBF 8E0001           (        forth.asm):02188 (3)             ldx     #1
EEC2 3610             (        forth.asm):02189                 UCNPUSH
EEC4 39               (        forth.asm):02190 (4)             rts
EEC5 1FC1             (        forth.asm):02191 (4)     @zlss1  tfr     0,x
EEC7 3610             (        forth.asm):02192                 UCNPUSH
EEC9 39               (        forth.asm):02193 (4)             rts
                      (        forth.asm):02194         
EECA 02               (        forth.asm):02195         NULP    fcb     2               79-STANDARD (REQ180)
EECB 303D             (        forth.asm):02196                 fcc     '0='
EECD EEB0             (        forth.asm):02197                 fdb     ZLESS
EECF C7               (        forth.asm):02198                 RFCS
EED0 BDE7FB           (        forth.asm):02199 (7)             jsr     NPOP
EED3 1F10             (        forth.asm):02200 (4)             tfr     x,d
EED5 1FC1             (        forth.asm):02201 (4)             tfr     0,x
EED7 104D             (        forth.asm):02202 (2)             tstd
EED9 2703             (        forth.asm):02203 (3)             beq     @nulp2
EEDB 3610             (        forth.asm):02204         @nulp1  UCNPUSH
EEDD 39               (        forth.asm):02205 (4)             rts
EEDE 3001             (        forth.asm):02206 (4+1)   @nulp2  leax    1,x
EEE0 20F9             (        forth.asm):02207 (3)             bra     @nulp1
                      (        forth.asm):02208         
EEE2 03               (        forth.asm):02209         NOT     fcb     3               79-STANDARD (REQ165)
EEE3 4E4F54           (        forth.asm):02210                 fcc     'NOT'
EEE6 EECA             (        forth.asm):02211                 fdb     NULP
EEE8 C7               (        forth.asm):02212                 RFCS
EEE9 20E5             (        forth.asm):02213                 RFXT    bra,NULP+5      XT for 0=
                      (        forth.asm):02214         
EEEB 02               (        forth.asm):02215         USUP    fcb     2               ANSI (Core Ext)
EEEC 553E             (        forth.asm):02216                 fcc     'U>'
EEEE EEE2             (        forth.asm):02217                 fdb     NOT
EEF0 C7               (        forth.asm):02218                 RFCS
EEF1 BDE594           (        forth.asm):02219 (7)             jsr     CMP2
EEF4 2302             (        forth.asm):02220 (3)             bls     @usup1
EEF6 3001             (        forth.asm):02221 (4+1)           leax    1,x
EEF8 3610             (        forth.asm):02222         @usup1  UCNPUSH
EEFA 39               (        forth.asm):02223 (4)             rts
                      (        forth.asm):02224         
EEFB 02               (        forth.asm):02225         UINF    fcb     2               79-STANDARD (REQ150)
EEFC 553C             (        forth.asm):02226                 fcc     'U<'
EEFE EEEB             (        forth.asm):02227                 fdb     USUP
EF00 C7               (        forth.asm):02228                 RFCS
EF01 BDE594           (        forth.asm):02229 (7)             jsr     CMP2
EF04 2402             (        forth.asm):02230 (3)             bhs     @uinf1          Z is set
EF06 3001             (        forth.asm):02231 (4+1)           leax    1,x
EF08 3610             (        forth.asm):02232         @uinf1  UCNPUSH
EF0A 39               (        forth.asm):02233 (4)             rts
                      (        forth.asm):02234         
                      (        forth.asm):02235         * Functionally: : WITHIN OVER - >R - R> U< ;
EF0B 06               (        forth.asm):02236         WITHIN  fcb     6               ANSI (Core)
EF0C 57495448494E     (        forth.asm):02237                 fcc     'WITHIN'        ( n1 n2 n3 -- flag )
EF12 EEFB             (        forth.asm):02238                 fdb     UINF
EF14 C7               (        forth.asm):02239                 RFCS
EF15 BDFC50           (        forth.asm):02240                 RFXT    jsr,OVER+7      XT for OVER
EF18 BDF8CE           (        forth.asm):02241                 RFXT    jsr,MINUS+4     XT for -
EF1B BDF074           (        forth.asm):02242                 RFXT    jsr,TOR+5       XT for >R
EF1E BDF8CE           (        forth.asm):02243                 RFXT    jsr,MINUS+4     XT for -
EF21 BDF068           (        forth.asm):02244                 RFXT    jsr,RFROM+5     XT for R>
EF24 20DB             (        forth.asm):02245                 RFXT    bra,UINF+5      XT for U<
                      (        forth.asm):02246         
EF26 01               (        forth.asm):02247         SUP     fcb     1               79-STANDARD (REQ102)
EF27 3E               (        forth.asm):02248                 fcc     '>'
EF28 EF0B             (        forth.asm):02249                 fdb     WITHIN
EF2A C7               (        forth.asm):02250                 RFCS
EF2B BDE594           (        forth.asm):02251 (7)             jsr     CMP2
EF2E 2F02             (        forth.asm):02252 (3)             ble     @sup1
EF30 3001             (        forth.asm):02253 (4+1)           leax    1,x
EF32 3610             (        forth.asm):02254         @sup1   UCNPUSH
EF34 39               (        forth.asm):02255 (4)             rts
                      (        forth.asm):02256         
EF35 01               (        forth.asm):02257         INF     fcb     1               79-STANDARD (REQ139)
EF36 3C               (        forth.asm):02258                 fcc     '<'
EF37 EF26             (        forth.asm):02259                 fdb     SUP
EF39 C7               (        forth.asm):02260                 RFCS
EF3A BDE594           (        forth.asm):02261 (7)             jsr     CMP2
EF3D 2C02             (        forth.asm):02262 (3)             bge     @inf1
EF3F 3001             (        forth.asm):02263 (4+1)           leax    1,x
EF41 3610             (        forth.asm):02264         @inf1   UCNPUSH
EF43 39               (        forth.asm):02265 (4)             rts
                      (        forth.asm):02266         
EF44 03               (        forth.asm):02267         MAX     fcb     3               79-STANDARD (REQ218)
EF45 4D4158           (        forth.asm):02268                 fcc     'MAX'
EF48 EF35             (        forth.asm):02269                 fdb     INF
EF4A C7               (        forth.asm):02270                 RFCS
EF4B BDE7FB           (        forth.asm):02271 (7)             jsr     NPOP
EF4E 1F12             (        forth.asm):02272 (4)             tfr     x,y
EF50 BDE7FB           (        forth.asm):02273 (7)             jsr     NPOP
EF53 103721           (        forth.asm):02274 (4)             cmpr    y,x
EF56 2C02             (        forth.asm):02275 (3)             bge     @pshrv1
EF58 1F21             (        forth.asm):02276 (4)             tfr     y,x
EF5A 3610             (        forth.asm):02277         @pshrv1 UCNPUSH
EF5C 39               (        forth.asm):02278 (4)             rts
                      (        forth.asm):02279         
EF5D 03               (        forth.asm):02280         MIN     fcb     3               79-STANDARD (REQ127)
EF5E 4D494E           (        forth.asm):02281                 fcc     'MIN'
EF61 EF44             (        forth.asm):02282                 fdb     MAX
EF63 C7               (        forth.asm):02283                 RFCS
EF64 BDE7FB           (        forth.asm):02284 (7)             jsr     NPOP
EF67 1F12             (        forth.asm):02285 (4)             tfr     x,y
EF69 BDE7FB           (        forth.asm):02286 (7)             jsr     NPOP
EF6C 103721           (        forth.asm):02287 (4)             cmpr    y,x
EF6F 2F02             (        forth.asm):02288 (3)             ble     @pshrv2
EF71 1F21             (        forth.asm):02289 (4)             tfr     y,x
EF73 3610             (        forth.asm):02290         @pshrv2 UCNPUSH
EF75 39               (        forth.asm):02291 (4)             rts
                      (        forth.asm):02292         
EF76 03               (        forth.asm):02293         ABS     fcb     3               79-STANDARD (REQ108)
EF77 414253           (        forth.asm):02294                 fcc     'ABS'
EF7A EF5D             (        forth.asm):02295                 fdb     MIN
EF7C C7               (        forth.asm):02296                 RFCS
EF7D BDE7FB           (        forth.asm):02297 (7)             jsr     NPOP
EF80 1F10             (        forth.asm):02298 (4)             tfr     x,d
EF82 104D             (        forth.asm):02299 (2)             tstd
EF84 2A04             (        forth.asm):02300 (3)             bpl     @abs1
EF86 1040             (        forth.asm):02301 (2)             negd
EF88 1F01             (        forth.asm):02302 (4)             tfr     d,x
EF8A 3610             (        forth.asm):02303         @abs1   UCNPUSH
EF8C 39               (        forth.asm):02304 (4)             rts
                      (        forth.asm):02305         
EF8D 06               (        forth.asm):02306         NEGATE  fcb     6               79-STANDARD (REQ177)
EF8E 4E4547415445     (        forth.asm):02307                 fcc     'NEGATE'
EF94 EF76             (        forth.asm):02308                 fdb     ABS
EF96 C7               (        forth.asm):02309                 RFCS
EF97 BDE495           (        forth.asm):02310 (7)             jsr     MIN1PST         At least one cell needs to be stacked up
EF9A ECC4             (        forth.asm):02311 (5+0)           ldd     ,u
EF9C 1040             (        forth.asm):02312 (2)             negd
EF9E EDC4             (        forth.asm):02313 (5+0)           std     ,u
EFA0 39               (        forth.asm):02314 (4)             rts
                      (        forth.asm):02315         
EFA1 C5               (        forth.asm):02316         BEGIN   fcb     $C5             79-STANDARD (REQ147)
EFA2 424547494E       (        forth.asm):02317                 fcc     'BEGIN'
EFA7 EF8D             (        forth.asm):02318                 fdb     NEGATE
EFA9 C7               (        forth.asm):02319                 RFCS
EFAA 9E08             (        forth.asm):02320 (4)             ldx     DICEND          HERE is ANS:dest
EFAC 7EE80A           (        forth.asm):02321 (3)             jmp     RPUSH           to the control flow stack
                      (        forth.asm):02322         
EFAF C5               (        forth.asm):02323         AGAIN   fcb     $C5             79-STANDARD (REF114)
EFB0 414741494E       (        forth.asm):02324                 fcc     'AGAIN'
EFB5 EFA1             (        forth.asm):02325                 fdb     BEGIN
EFB7 C7               (        forth.asm):02326                 RFCS
EFB8 BDE828           (        forth.asm):02327 (7)             jsr     RPOP
EFBB 1F12             (        forth.asm):02328 (4)             tfr     x,y             ANS:dest from the control flow stack to Y
EFBD 9E08             (        forth.asm):02329 (4)             ldx     DICEND
EFBF 867E             (        forth.asm):02330 (2)             lda     #JMPOPC         JMP extended
EFC1 A780             (        forth.asm):02331 (4+1)           sta     ,x+
EFC3 10AF81           (        forth.asm):02332 (6+2)           sty     ,x++
EFC6 9F08             (        forth.asm):02333 (4)             stx     DICEND
EFC8 8602             (        forth.asm):02334 (2)             lda     #2
EFCA 9730             (        forth.asm):02335 (3)             sta     RTSREMV         Trigger the RTS removal optimization
EFCC 39               (        forth.asm):02336 (4)             rts
                      (        forth.asm):02337         
                      (        forth.asm):02338         # The standard does not require this as being immediate but I do.
EFCD C4               (        forth.asm):02339         EXIT    fcb     $C4             79-STANDARD (REQ117)
EFCE 45584954         (        forth.asm):02340                 fcc     'EXIT'
EFD2 EFAF             (        forth.asm):02341                 fdb     AGAIN
EFD4 C7               (        forth.asm):02342                 RFCS
EFD5 9E08             (        forth.asm):02343 (4)             ldx     DICEND
EFD7 301D             (        forth.asm):02344 (4+1)           leax    -3,x
EFD9 109E14           (        forth.asm):02345 (5)             ldy     JSRLAST
EFDC 103721           (        forth.asm):02346 (4)             cmpr    y,x
EFDF 2605             (        forth.asm):02347 (3)             bne     @noopt          Tail JMP optimization is not possible
EFE1 867E             (        forth.asm):02348 (2)             lda     #JMPOPC         JMP extended
EFE3 A784             (        forth.asm):02349 (4+0)           sta     ,x
EFE5 39               (        forth.asm):02350 (4)             rts
EFE6 3003             (        forth.asm):02351 (4+1)   @noopt  leax    3,x             Point back to HERE
EFE8 8639             (        forth.asm):02352 (2)             lda     #RTSOPC         RTS inherent
EFEA A780             (        forth.asm):02353 (4+1)           sta     ,x+
EFEC 9F08             (        forth.asm):02354 (4)             stx     DICEND
EFEE 39               (        forth.asm):02355 (4)             rts
                      (        forth.asm):02356         
EFEF C5               (        forth.asm):02357         UNTIL   fcb     $C5             79-STANDARD (REQ237)
EFF0 554E54494C       (        forth.asm):02358                 fcc     'UNTIL'
EFF5 EFCD             (        forth.asm):02359                 fdb     EXIT
EFF7 C7               (        forth.asm):02360                 RFCS
EFF8 109E08           (        forth.asm):02361 (5)             ldy     DICEND
EFFB 86BD             (        forth.asm):02362 (2)             lda     #JSROPC         JSR extended
EFFD 8EED9E           (        forth.asm):02363 (3)             ldx     #IFEX
F000 BDE155           (        forth.asm):02364 (7)             jsr     CHKRTS          Check if the final RTS can be omitted
F003 BDE58F           (        forth.asm):02365 (7)             jsr     VARCON2
F006 8E2603           (        forth.asm):02366 (3)             ldx     #BNEOPC         Compile "BNE *+5"
F009 AFA1             (        forth.asm):02367 (5+2)           stx     ,y++
F00B 867E             (        forth.asm):02368 (2)             lda     #JMPOPC         JMP extended
F00D A7A0             (        forth.asm):02369 (4+1)           sta     ,y+
F00F BDE828           (        forth.asm):02370 (7)             jsr     RPOP
F012 AFA1             (        forth.asm):02371 (5+2)           stx     ,y++
F014 109F08           (        forth.asm):02372 (5)             sty     DICEND
F017 39               (        forth.asm):02373 (4)             rts
                      (        forth.asm):02374         
F018 C5               (        forth.asm):02375         WHILE   fcb     $C5             79-STANDARD (REQ149)
F019 5748494C45       (        forth.asm):02376                 fcc     'WHILE'
F01E EFEF             (        forth.asm):02377                 fdb     UNTIL
F020 C7               (        forth.asm):02378                 RFCS
F021 8EED9E           (        forth.asm):02379 (3)             ldx     #IFEX
F024 BDE169           (        forth.asm):02380 (7)             jsr     EMXASXT         Compile "JSR IFEX"
F027 CC2603           (        forth.asm):02381 (3)             ldd     #BNEOPC
F02A EDA1             (        forth.asm):02382 (5+2)           std     ,y++            Compile "BNE *+5"
F02C 867E             (        forth.asm):02383 (2)             lda     #JMPOPC         JMP extended
F02E A7A0             (        forth.asm):02384 (4+1)           sta     ,y+
F030 BDE828           (        forth.asm):02385 (7)             jsr     RPOP            ANS:dest to X, Y has HERE (ANS:orig)
F033 1E21             (        forth.asm):02386 (5)             exg     y,x
F035 BDE80A           (        forth.asm):02387 (7)             jsr     RPUSH           ANS:orig to the return stack
F038 1E21             (        forth.asm):02388 (5)             exg     y,x
F03A BDE80A           (        forth.asm):02389 (7)             jsr     RPUSH           ANS:dest to the return stack
F03D 3122             (        forth.asm):02390 (4+1)           leay    2,y             2 ALLOT
F03F 109F08           (        forth.asm):02391 (5)             sty     DICEND
F042 39               (        forth.asm):02392 (4)             rts
                      (        forth.asm):02393         
F043 C6               (        forth.asm):02394         REPEAT  fcb     $C6             79-STANDARD (REQ120)
F044 524550454154     (        forth.asm):02395                 fcc     'REPEAT'
F04A F018             (        forth.asm):02396                 fdb     WHILE
F04C C7               (        forth.asm):02397                 RFCS
F04D BDE828           (        forth.asm):02398 (7)             jsr     RPOP            ANS:dest to X
F050 109E08           (        forth.asm):02399 (5)             ldy     DICEND
F053 867E             (        forth.asm):02400 (2)             lda     #JMPOPC         JMP extended
F055 BDE58F           (        forth.asm):02401 (7)             jsr     VARCON2
F058 BDE828           (        forth.asm):02402 (7)             jsr     RPOP            ANS:orig
F05B 10AF84           (        forth.asm):02403 (6+0)           sty     ,x              Resolve ANS:orig to HERE
F05E 109F08           (        forth.asm):02404 (5)             sty     DICEND
F061 39               (        forth.asm):02405 (4)             rts
                      (        forth.asm):02406         
F062 42               (        forth.asm):02407         RFROM   fcb     $42             79-STANDARD (REQ110)
F063 523E             (        forth.asm):02408                 fcc     'R>'
F065 F043             (        forth.asm):02409                 fdb     REPEAT
F067 C7               (        forth.asm):02410                 RFCS
F068 BDE828           (        forth.asm):02411 (7)             jsr     RPOP
F06B 7EE7ED           (        forth.asm):02412 (3)             jmp     NPUSH
                      (        forth.asm):02413         
F06E 42               (        forth.asm):02414         TOR     fcb     $42             79-STANDARD (REQ200)
F06F 3E52             (        forth.asm):02415                 fcc     '>R'
F071 F062             (        forth.asm):02416                 fdb     RFROM
F073 C7               (        forth.asm):02417                 RFCS
F074 BDE7FB           (        forth.asm):02418 (7)             jsr     NPOP
F077 7EE80A           (        forth.asm):02419 (3)             jmp     RPUSH
                      (        forth.asm):02420         
F07A 45               (        forth.asm):02421         LEAVE   fcb     $45             79-STANDARD (REQ213)
F07B 4C45415645       (        forth.asm):02422                 fcc     'LEAVE'
F080 F06E             (        forth.asm):02423                 fdb     TOR
F082 C7               (        forth.asm):02424                 RFCS
F083 BDE828           (        forth.asm):02425 (7)             jsr     RPOP
F086 BDE828           (        forth.asm):02426 (7)             jsr     RPOP
F089 BDE80A           (        forth.asm):02427 (7)             jsr     RPUSH
F08C 7EE80A           (        forth.asm):02428 (3)             jmp     RPUSH
                      (        forth.asm):02429         
F08F 41               (        forth.asm):02430         INDI    fcb     $41             79-STANDARD (REQ136)
F090 49               (        forth.asm):02431                 fcc     'I'
F091 F07A             (        forth.asm):02432                 fdb     LEAVE
F093 C7               (        forth.asm):02433                 RFCS
F094 5F               (        forth.asm):02434 (1)             clrb
                      (        forth.asm):02435         * This is called ARPICKN because the argument in B on entry is expected
                      (        forth.asm):02436         * to be zero to refer to the top of the return stack. This is some sort
                      (        forth.asm):02437         * of F83/ANSI behaviour that one would not expect in a 79-STANDARD.
                      (        forth.asm):02438         * It makes the code slightly more compact.
F095 962E             (        forth.asm):02439 (3)     ARPICKN lda     RDEPTH
F097 103789           (        forth.asm):02440 (4)             cmpr    a,b
F09A 240A             (        forth.asm):02441 (3)             bhs     @rpick1
F09C 9E00             (        forth.asm):02442 (4)             ldx     RSP
F09E 4F               (        forth.asm):02443 (1)             clra
F09F 1048             (        forth.asm):02444 (2)             lsld                    Times 2
F0A1 AE8B             (        forth.asm):02445 (5+2)           ldx     d,x
F0A3 7EE7ED           (        forth.asm):02446 (3)             jmp     NPUSH           We cannot use UCNPUSH here
F0A6 C608             (        forth.asm):02447 (2)     @rpick1 ldb     #8              Return stack underflow
F0A8 BDE76A           (        forth.asm):02448 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02449         
F0AB 42               (        forth.asm):02450         RFETCH  fcb     $42             79-STANDARD (REQ228)
F0AC 5240             (        forth.asm):02451                 fcc     'R@'
F0AE F08F             (        forth.asm):02452                 fdb     INDI
F0B0 C7               (        forth.asm):02453                 RFCS
F0B1 20E1             (        forth.asm):02454                 RFXT    bra,INDI+4      XT for I
                      (        forth.asm):02455         
F0B3 42               (        forth.asm):02456         INDIP   fcb     $42             79-STANDARD (REF)
F0B4 4927             (        forth.asm):02457                 fdb     $4927
F0B6 F0AB             (        forth.asm):02458                 fdb     RFETCH
F0B8 C7               (        forth.asm):02459                 RFCS
F0B9 C601             (        forth.asm):02460 (2)             ldb     #1
F0BB 20D8             (        forth.asm):02461 (3)             bra     ARPICKN
                      (        forth.asm):02462         
F0BD 41               (        forth.asm):02463         INDJ    fcb     $41             79-STANDARD (REQ225)
F0BE 4A               (        forth.asm):02464                 fcc     'J'
F0BF F0B3             (        forth.asm):02465                 fdb     INDIP
F0C1 C7               (        forth.asm):02466                 RFCS
F0C2 C602             (        forth.asm):02467 (2)             ldb     #2
F0C4 20CF             (        forth.asm):02468 (3)             bra     ARPICKN
                      (        forth.asm):02469         
F0C6 42               (        forth.asm):02470         INDJP   fcb     $42             Non-standard
F0C7 4A27             (        forth.asm):02471                 fdb     $4A27
F0C9 F0BD             (        forth.asm):02472                 fdb     INDJ
F0CB C7               (        forth.asm):02473                 RFCS
F0CC C603             (        forth.asm):02474 (2)             ldb     #3
F0CE 20C5             (        forth.asm):02475 (3)             bra     ARPICKN
                      (        forth.asm):02476         
F0D0 41               (        forth.asm):02477         INDK    fcb     $41             79-STANDARD (REF)
F0D1 4B               (        forth.asm):02478                 fcc     'K'
F0D2 F0C6             (        forth.asm):02479                 fdb     INDJP
F0D4 C7               (        forth.asm):02480                 RFCS
F0D5 C604             (        forth.asm):02481 (2)             ldb     #4
F0D7 20BC             (        forth.asm):02482 (3)             bra     ARPICKN
                      (        forth.asm):02483         
F0D9 04               (        forth.asm):02484         QUIT    fcb     4               79-STANDARD (REQ211)
F0DA 51554954         (        forth.asm):02485                 fcc     'QUIT'
F0DE F0D0             (        forth.asm):02486                 fdb     INDK
F0E0 C7               (        forth.asm):02487                 RFCS
F0E1 0F21             (        forth.asm):02488 (5)             clr     USTATE+1
F0E3 BDEB37           (        forth.asm):02489                 RFXT    jsr,RCLR+7      XT for RCLR
F0E6 10CE8000         (        forth.asm):02490 (4)             lds     #RAMSTRT+RAMSIZE Reset the system stack pointer
F0EA BDE300           (        forth.asm):02491 (7)             jsr     PUTCR
F0ED 7EE0B2           (        forth.asm):02492 (3)             jmp     INTERP
                      (        forth.asm):02493         
F0F0 05               (        forth.asm):02494         ABORT   fcb     5               79-STANDARD (REQ101)
F0F1 41424F5254       (        forth.asm):02495                 fcc     'ABORT'
F0F6 F0D9             (        forth.asm):02496                 fdb     QUIT
F0F8 C7               (        forth.asm):02497                 RFCS
F0F9 BDEB2B           (        forth.asm):02498                 RFXT    jsr,NCLR+7      XT for NCLR
F0FC C603             (        forth.asm):02499 (2)             ldb     #3
F0FE BDE76A           (        forth.asm):02500 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02501         
F101 04               (        forth.asm):02502         FIND    fcb     4               79-STANDARD (REQ203)
F102 46494E44         (        forth.asm):02503                 fcc     'FIND'          ( -- XT )
F106 F0F0             (        forth.asm):02504                 fdb     ABORT
F108 C7               (        forth.asm):02505                 RFCS
F109 1FC2             (        forth.asm):02506 (4)             tfr     0,y             Default return value is zero
F10B BDE841           (        forth.asm):02507 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
F10E 6D84             (        forth.asm):02508 (5+0)           tst     ,x
F110 2711             (        forth.asm):02509 (3)             beq     @find1
F112 BDE38E           (        forth.asm):02510 (7)             jsr     SCNSTOK
F115 270C             (        forth.asm):02511 (3)             beq     @find1
F117 BDE4A9           (        forth.asm):02512 (7)             jsr     SWDIC
F11A DC0E             (        forth.asm):02513 (4)             ldd     PLOAD           Retrieve word payload
F11C DD10             (        forth.asm):02514 (4)             std     FNDPLD          Make it accessible through PAYLOAD
F11E DC04             (        forth.asm):02515 (4)             ldd     TOKENEP
F120 BDE177           (        forth.asm):02516 (7)             jsr     U2INFRD         Derive >IN from D
F123 1F21             (        forth.asm):02517 (4)     @find1  tfr     y,x
F125 7EE7ED           (        forth.asm):02518 (3)             jmp     NPUSH
                      (        forth.asm):02519         
F128 01               (        forth.asm):02520         RBRACK  fcb     1               79-STANDARD (REQ126)
F129 5D               (        forth.asm):02521                 fcc     ']'
F12A F101             (        forth.asm):02522                 fdb     FIND
F12C C7               (        forth.asm):02523                 RFCS
F12D 8601             (        forth.asm):02524 (2)             lda     #1
F12F 9721             (        forth.asm):02525 (3)             sta     USTATE+1
F131 39               (        forth.asm):02526 (4)             rts
                      (        forth.asm):02527         
                      (        forth.asm):02528         * Note: the standard does not mandate that this primitive be executed in
                      (        forth.asm):02529         * definitions only. IMHO, it ought to, therefore I am forcing the C bit here.
F132 C1               (        forth.asm):02530         LBRACK  fcb     $C1             79-STANDARD (REQ125)
F133 5B               (        forth.asm):02531                 fcc     '['
F134 F128             (        forth.asm):02532                 fdb     RBRACK
F136 C7               (        forth.asm):02533                 RFCS
F137 0F21             (        forth.asm):02534 (5)             clr     USTATE+1
F139 39               (        forth.asm):02535 (4)             rts
                      (        forth.asm):02536         
                      (        forth.asm):02537         * Functionally: : ['] FIND POSTPONE LITERAL ; IMMEDIATE RESTRICT
F13A C3               (        forth.asm):02538         BKQUOT  fcb     $C3             ANSI (Core)
F13B 5B275D           (        forth.asm):02539                 fcb     $5B,$27,$5D
F13E F132             (        forth.asm):02540                 fdb     LBRACK
F140 C7               (        forth.asm):02541                 RFCS
F141 8DC6             (        forth.asm):02542                 RFXT    bsr,FIND+7      XT for FIND
                      (        forth.asm):02543         * Data stack topmost cell has the target word address.
F143 7EEBB7           (        forth.asm):02544                 RFXT    jmp,LITERAL+10  XT for LITERAL
                      (        forth.asm):02545         
F146 C8               (        forth.asm):02546         POSTPON fcb     $C8             ANSI (Core)
F147 504F5354504F4E45 (        forth.asm):02547                 fcc     'POSTPONE'      Not a straight alias to [COMPILE]
F14F F13A             (        forth.asm):02548                 fdb     BKQUOT          Non-immediate words deserve special treatment
F151 C7               (        forth.asm):02549                 RFCS
F152 BDE841           (        forth.asm):02550 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
F155 6D84             (        forth.asm):02551 (5+0)           tst     ,x
F157 2605             (        forth.asm):02552 (3)             bne     @postp2
F159 C605             (        forth.asm):02553 (2)     @postp1 ldb     #5              Missing word name
F15B BDE76A           (        forth.asm):02554 (7)             jsr     ERRHDLR         No return
F15E BDE38E           (        forth.asm):02555 (7)     @postp2 jsr     SCNSTOK
F161 27F6             (        forth.asm):02556 (3)             beq     @postp1
F163 BDE4A9           (        forth.asm):02557 (7)             jsr     SWDIC
F166 2607             (        forth.asm):02558 (3)             bne     @postp3         Word found. Code address returned in Y
F168 9E02             (        forth.asm):02559 (4)             ldx     TOKENSP
F16A C602             (        forth.asm):02560 (2)             ldb     #2              Undefined (X points to the offending word)
F16C BDE76A           (        forth.asm):02561 (7)             jsr     ERRHDLR         No return
F16F 1F21             (        forth.asm):02562 (4)     @postp3 tfr     y,x             X has the actual execution token
F171 0D39             (        forth.asm):02563 (4)             tst     IMDFLG
F173 2708             (        forth.asm):02564 (3)             beq     @postp5         Target word is not immediate
F175 BDE169           (        forth.asm):02565 (7)     @postp4 jsr     EMXASXT         Set as action component
F178 DC02             (        forth.asm):02566 (4)             ldd     TOKENSP         Updated by SWDIC if the word was found
F17A 7EE177           (        forth.asm):02567 (3)             jmp     U2INFRD         Derive >IN from D
                      (        forth.asm):02568         * The word being considered is non-immediate. The equivalent input should be:
                      (        forth.asm):02569         * ['] <word> COMPILE, We have the XT for <word> in X.
F17D BDE578           (        forth.asm):02570 (7)     @postp5 jsr     LITER
F180 8EF191           (        forth.asm):02571                 RFXT    ldx,#CMPCOMA+11 XT for COMPILE,
F183 20F0             (        forth.asm):02572 (3)             bra     @postp4
                      (        forth.asm):02573         
                      (        forth.asm):02574         * Like the 79-STANDARD COMPILE word, GNU Forth has this as a compile-only word.
                      (        forth.asm):02575         * This is a wise choice since it allows us to possibly optimize it.
F185 48               (        forth.asm):02576         CMPCOMA fcb     $48             ANSI (Core Ext)
F186 434F4D50494C452C (        forth.asm):02577                 fcc     'COMPILE,'      ( XT -- )
F18E F146             (        forth.asm):02578                 fdb     POSTPON
F190 C7               (        forth.asm):02579                 RFCS
F191 BDE7FB           (        forth.asm):02580 (7)             jsr     NPOP            Execution token to X
F194 7EE169           (        forth.asm):02581 (3)             jmp     EMXASXT
                      (        forth.asm):02582         
                      (        forth.asm):02583         * As per the standard, : is not immediate. This allows for further interesting
                      (        forth.asm):02584         * developments, like tracing words execution...
F197 01               (        forth.asm):02585         COMPC   fcb     $1              79-STANDARD (REQ116)
F198 3A               (        forth.asm):02586                 fcc     ':'
F199 F185             (        forth.asm):02587                 fdb     CMPCOMA
F19B C7               (        forth.asm):02588                 RFCS
F19C 8601             (        forth.asm):02589 (2)             lda     #1
F19E 9721             (        forth.asm):02590 (3)             sta     USTATE+1
F1A0 104F             (        forth.asm):02591 (2)             clrd
F1A2 DD14             (        forth.asm):02592 (4)             std     JSRLAST
F1A4 8602             (        forth.asm):02593 (2)             lda     #2
F1A6 9730             (        forth.asm):02594 (3)             sta     RTSREMV         Optimistic strategy: remove the final RTS
F1A8 962E             (        forth.asm):02595 (3)             lda     RDEPTH
F1AA 972F             (        forth.asm):02596 (3)             sta     IRDPTH          Meant to check for unbalanced constructs
F1AC 7EE517           (        forth.asm):02597 (3)             jmp     LOCWRT
                      (        forth.asm):02598         
F1AF C1               (        forth.asm):02599         COMPR   fcb     $C1             79-STANDARD (REQ196)
F1B0 3B               (        forth.asm):02600                 fcc     ';'
F1B1 F197             (        forth.asm):02601                 fdb     COMPC
F1B3 C7               (        forth.asm):02602                 RFCS
F1B4 962E             (        forth.asm):02603 (3)             lda     RDEPTH          Return stack depth
F1B6 912F             (        forth.asm):02604 (3)             cmpa    IRDPTH          Same as when : was entered?
F1B8 2705             (        forth.asm):02605 (3)             beq     @compr1
F1BA C609             (        forth.asm):02606 (2)             ldb     #9              Illegal construct if not
F1BC BDE76A           (        forth.asm):02607 (7)             jsr     ERRHDLR         No return
F1BF 0F21             (        forth.asm):02608 (5)     @compr1 clr     USTATE+1        Back to interpretation mode
F1C1 9E0C             (        forth.asm):02609 (4)             ldx     BDICEND
F1C3 9F06             (        forth.asm):02610 (4)             stx     LSTWAD          Update LAST
F1C5 9E08             (        forth.asm):02611 (4)             ldx     DICEND
                      (        forth.asm):02612         * Optimization: replace the last JSR by a JMP, if possible.
F1C7 DC14             (        forth.asm):02613 (4)             ldd     JSRLAST
F1C9 2712             (        forth.asm):02614 (3)             beq     @compr3         We need an RTS
F1CB 301D             (        forth.asm):02615 (4+1)           leax    -3,x
F1CD 9C14             (        forth.asm):02616 (4)             cmpx    JSRLAST
F1CF 2604             (        forth.asm):02617 (3)             bne     @compr2
F1D1 867E             (        forth.asm):02618 (2)             lda     #JMPOPC         JMP extended
F1D3 A784             (        forth.asm):02619 (4+0)           sta     ,x
                      (        forth.asm):02620         * At this point we still have to emit an RTS unless RTSREMV is 2 or more.
F1D5 3003             (        forth.asm):02621 (4+1)   @compr2 leax    3,x
F1D7 9630             (        forth.asm):02622 (3)             lda     RTSREMV
F1D9 8102             (        forth.asm):02623 (2)             cmpa    #2
F1DB 2404             (        forth.asm):02624 (3)             bhs     @compr4         Optimization applies. We have no forward refs
F1DD 8639             (        forth.asm):02625 (2)     @compr3 lda     #RTSOPC         RTS inherent
F1DF A780             (        forth.asm):02626 (4+1)           sta     ,x+
F1E1                  (        forth.asm):02627         @compr4
                      (        forth.asm):02628                 IFNE    DEBUG
                      (        forth.asm):02629                 lda     #ILLOPC         Illegal opcode
                      (        forth.asm):02630                 sta     ,x+
                      (        forth.asm):02631                 ENDC                    DEBUG
F1E1 9F08             (        forth.asm):02632 (4)             stx     DICEND          Update HERE
                      (        forth.asm):02633                 IFNE    RELFEAT
F1E3 BDEC4B           (        forth.asm):02634                 RFXT    jsr,MONITOR+10  XT for MONITOR. All : words are candidates
                      (        forth.asm):02635         *                               for integrity check by ICHECK.
                      (        forth.asm):02636                 ENDC                    RELFEAT
F1E6 39               (        forth.asm):02637 (4)             rts
                      (        forth.asm):02638         
F1E7 C7               (        forth.asm):02639         RECURSE fcb     $C7             FORTH-83
F1E8 52454355525345   (        forth.asm):02640                 fcc     'RECURSE'
F1EF F1AF             (        forth.asm):02641                 fdb     COMPR
F1F1 C7               (        forth.asm):02642                 RFCS
F1F2 9E12             (        forth.asm):02643 (4)             ldx     RECADDR         Set up by LOCWRT
F1F4 7EE169           (        forth.asm):02644 (3)             jmp     EMXASXT         Set as action component
                      (        forth.asm):02645         
F1F7 06               (        forth.asm):02646         FORGET  fcb     6               79-STANDARD (REQ196)
F1F8 464F52474554     (        forth.asm):02647                 fcc     'FORGET'
F1FE F1E7             (        forth.asm):02648                 fdb     RECURSE
F200 C7               (        forth.asm):02649                 RFCS
F201 BDE841           (        forth.asm):02650 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
F204 6D84             (        forth.asm):02651 (5+0)           tst     ,x              EOL?
F206 2605             (        forth.asm):02652 (3)             bne     @frgt2          No
F208 C605             (        forth.asm):02653 (2)     @frgt1  ldb     #5              Missing word name
F20A BDE76A           (        forth.asm):02654 (7)             jsr     ERRHDLR         No return
F20D BDE38E           (        forth.asm):02655 (7)     @frgt2  jsr     SCNSTOK
F210 27F6             (        forth.asm):02656 (3)             beq     @frgt1          EOL before a non-SP character could be acquired
F212 BDE4A9           (        forth.asm):02657 (7)             jsr     SWDIC           SWDIC uses TOKENSP as input--not X!!
F215 2607             (        forth.asm):02658 (3)             bne     @frgt3          Word found. XT returned in Y
F217 9E02             (        forth.asm):02659 (4)             ldx     TOKENSP
F219 C602             (        forth.asm):02660 (2)             ldb     #2              Undefined (X points to the offending word)
F21B BDE76A           (        forth.asm):02661 (7)             jsr     ERRHDLR         No return
F21E 1F21             (        forth.asm):02662 (4)     @frgt3  tfr     y,x             Y and X have the word's XT
F220 108C0C65         (        forth.asm):02663 (4)             cmpy    #RAMFTCH
F224 2719             (        forth.asm):02664 (3)             beq     @frgt4
F226 108CE000         (        forth.asm):02665 (4)             cmpy    #ROMSTRT
F22A 2413             (        forth.asm):02666 (3)             bhs     @frgt4
                      (        forth.asm):02667                 IFNE    RELFEAT
F22C AE1D             (        forth.asm):02668 (5+1)           ldx     -3,x            Backlink to X
F22E 9F06             (        forth.asm):02669 (4)             stx     LSTWAD          Update LAST
F230 303C             (        forth.asm):02670 (4+1)           leax    -4,y            XT-4 to X (1B/attr, 2B/backlink, 1B/checksum)
                      (        forth.asm):02671                 ELSE
                      (        forth.asm):02672                 ldx     -2,x            Backlink to X
                      (        forth.asm):02673                 stx     LSTWAD          Update LAST
                      (        forth.asm):02674                 leax    -3,y            XT-3 to X (1B/attr, 2B/backlink)
                      (        forth.asm):02675                 ENDC                    RELFEAT
F232 4F               (        forth.asm):02676 (1)             clra
F233 D638             (        forth.asm):02677 (3)             ldb     CURTOKL         Token name length to D
F235 103201           (        forth.asm):02678 (4)             subr    d,x             Substract word length
F238 9F08             (        forth.asm):02679 (4)             stx     DICEND          Update HERE
F23A DC02             (        forth.asm):02680 (4)             ldd     TOKENSP         Set by SWDIC to point to the end of the token
F23C 7EE177           (        forth.asm):02681 (3)             jmp     U2INFRD         Derive >IN from D
F23F C60B             (        forth.asm):02682 (2)     @frgt4  ldb     #11             Word is unforgettable
F241 BDE76A           (        forth.asm):02683 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02684         
F244 07               (        forth.asm):02685         EXCT    fcb     7               79-STANDARD (REQ163)
F245 45584543555445   (        forth.asm):02686                 fcc     'EXECUTE'
F24C F1F7             (        forth.asm):02687                 fdb     FORGET
F24E C7               (        forth.asm):02688                 RFCS
F24F BDE7FB           (        forth.asm):02689 (7)             jsr     NPOP
F252 1037C1           (        forth.asm):02690 (4)             cmpr    0,x             Although the standard does not specify that
F255 2702             (        forth.asm):02691 (3)             beq     @exct1          a NUL address should trigger an error, I do
F257 1F15             (        forth.asm):02692 (4)             tfr     x,pc
F259 C60D             (        forth.asm):02693 (2)     @exct1  ldb     #13             Illegal argument
F25B BDE76A           (        forth.asm):02694 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02695         
F25E 03               (        forth.asm):02696         BYE     fcb     3               ANSI (Programming tools)
F25F 425945           (        forth.asm):02697                 fcc     'BYE'
F262 F244             (        forth.asm):02698                 fdb     EXCT
F264 C7               (        forth.asm):02699                 RFCS
                      (        forth.asm):02700                 IFNE    RTCFEAT
                      (        forth.asm):02701                 lda     #RTOREGB
                      (        forth.asm):02702                 jsr     RTREGRD         RTCB register to B
                      (        forth.asm):02703                 andb    #^RTBPIE        Disable periodic interrupt generation
                      (        forth.asm):02704                 jsr     RTREGWR
                      (        forth.asm):02705                 ldx     #40
                      (        forth.asm):02706                 jsr     MILLIS1         Wait for 40 milliseconds
                      (        forth.asm):02707                 orcc    #(FFLAG|IFLAG)  Disable maskable interrupts
                      (        forth.asm):02708                 ENDC                    RTCFEAT
F265 7EE037           (        forth.asm):02709 (3)             jmp     RSTHDL
                      (        forth.asm):02710         
F268 C6               (        forth.asm):02711         BKCHAR  fcb     $C6             ANSI (Core)
F269 5B434841525D     (        forth.asm):02712                 fcc     '[CHAR]'
F26F F25E             (        forth.asm):02713                 fdb     BYE
F271 C7               (        forth.asm):02714                 RFCS
F272 8D0B             (        forth.asm):02715                 RFXT    bsr,CHAR+7      XT for CHAR
F274 7EEBB7           (        forth.asm):02716                 RFXT    jmp,LITERAL+10  XT for LITERAL
                      (        forth.asm):02717         
F277 04               (        forth.asm):02718         CHAR    fcb     4               ANSI (Core)
F278 43484152         (        forth.asm):02719                 fcc     'CHAR'
F27C F268             (        forth.asm):02720                 fdb     BKCHAR
F27E C7               (        forth.asm):02721                 RFCS
F27F BDE841           (        forth.asm):02722 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
F282 BDE38E           (        forth.asm):02723 (7)     @char1  jsr     SCNSTOK         X points to the beginning of the character
F285 2712             (        forth.asm):02724 (3)             beq     @chrerr
F287 E684             (        forth.asm):02725 (4+0)           ldb     ,x
F289 4F               (        forth.asm):02726 (1)             clra
F28A 1F01             (        forth.asm):02727 (4)             tfr     d,x
F28C BDE7ED           (        forth.asm):02728 (7)             jsr     NPUSH
F28F 9E02             (        forth.asm):02729 (4)             ldx     TOKENSP         Set by SCNSTOK
F291 BDE39C           (        forth.asm):02730 (7)             jsr     SCNETOK
F294 1F10             (        forth.asm):02731 (4)             tfr     x,d             TOKENEP
F296 7EE177           (        forth.asm):02732 (3)             jmp     U2INFRD         Derive >IN from D
F299 C60D             (        forth.asm):02733 (2)     @chrerr ldb     #13             Illegal argument
F29B BDE76A           (        forth.asm):02734 (7)             jsr     ERRHDLR
                      (        forth.asm):02735         * No return.
                      (        forth.asm):02736         
                      (        forth.asm):02737         * Hairy code but working.
F29E 04               (        forth.asm):02738         WORD    fcb     4               79-STANDARD (REQ181)
F29F 574F5244         (        forth.asm):02739                 fcc     'WORD'          ( char -- addr )
F2A3 F277             (        forth.asm):02740                 fdb     CHAR
F2A5 C7               (        forth.asm):02741                 RFCS
F2A6 BDE7FB           (        forth.asm):02742 (7)             jsr     NPOP
F2A9 1F16             (        forth.asm):02743 (4)             tfr     x,w             F has the delimiter ASCII code
F2AB 109E08           (        forth.asm):02744 (5)             ldy     DICEND          The counted string returned is stored at HERE
F2AE 3420             (        forth.asm):02745 (4+2)           pshs    y
F2B0 6FA0             (        forth.asm):02746 (6+1)           clr     ,y+             Initialize its length
F2B2 BDE841           (        forth.asm):02747 (7)             jsr     BKIN2PT         Derive X from BLK, >IN
F2B5 A680             (        forth.asm):02748 (4+1)           lda     ,x+             >IN @
F2B7 8120             (        forth.asm):02749 (2)             cmpa    #SP             BL
F2B9 2702             (        forth.asm):02750 (3)             beq     @word1          Skip initial blank if there is one
F2BB 301F             (        forth.asm):02751 (4+1)           leax    -1,x            Go back one char.
F2BD A680             (        forth.asm):02752 (4+1)   @word1  lda     ,x+
F2BF 2716             (        forth.asm):02753 (3)             beq     @word3          EOL reached, this is the end
F2C1 1037F8           (        forth.asm):02754 (4)             cmpr    f,a             Leading delimiter matched?
F2C4 27F7             (        forth.asm):02755 (3)             beq     @word1          Yes, skip it (it might be repeated)
                      (        forth.asm):02756         * Either there was no leading delimiter or we went past the leading repetitions.
F2C6 301F             (        forth.asm):02757 (4+1)           leax    -1,x
F2C8 A680             (        forth.asm):02758 (4+1)   @word2  lda     ,x+             Acquire next character from the input stream
F2CA 270B             (        forth.asm):02759 (3)             beq     @word3          EOL reached
F2CC 1037F8           (        forth.asm):02760 (4)             cmpr    f,a             Trailing delimiter?
F2CF 2708             (        forth.asm):02761 (3)             beq     @word4
F2D1 A7A0             (        forth.asm):02762 (4+1)           sta     ,y+
F2D3 6CF4             (        forth.asm):02763 (6+3)           inc     [,s]            Increment string length
F2D5 20F1             (        forth.asm):02764 (3)             bra     @word2
F2D7 301F             (        forth.asm):02765 (4+1)   @word3  leax    -1,x            EOL reached
F2D9 1F10             (        forth.asm):02766 (4)     @word4  tfr     x,d             Pointing one char after the delimiter or to NUL
F2DB BDE177           (        forth.asm):02767 (7)             jsr     U2INFRD         Derive >IN from D
F2DE 3510             (        forth.asm):02768 (4+2)           puls    x
F2E0 3610             (        forth.asm):02769                 UCNPUSH                 Push back HERE
F2E2 39               (        forth.asm):02770 (4)             rts
                      (        forth.asm):02771         
F2E3 81               (        forth.asm):02772         LPAR    fcb     $81             79-STANDARD (REQ122)
F2E4 28               (        forth.asm):02773                 fcc     '('
F2E5 F29E             (        forth.asm):02774                 fdb     WORD
F2E7 C7               (        forth.asm):02775                 RFCS
F2E8 BDE841           (        forth.asm):02776 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
F2EB A680             (        forth.asm):02777 (4+1)   @lpar1  lda     ,x+
F2ED 2709             (        forth.asm):02778 (3)             beq     @lparx          Input stream exhausted before ) is matched
F2EF 8129             (        forth.asm):02779 (2)             cmpa    #')
F2F1 26F8             (        forth.asm):02780 (3)             bne     @lpar1
F2F3 1F10             (        forth.asm):02781 (4)             tfr     x,d             Just matched )
F2F5 7EE177           (        forth.asm):02782 (3)             jmp     U2INFRD         Derive >IN from D
F2F8 C60C             (        forth.asm):02783 (2)     @lparx  ldb     #12             Missing delimiter
F2FA BDE76A           (        forth.asm):02784 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02785         
F2FD 06               (        forth.asm):02786         SOURCE  fcb     6               ANSI (Core)
F2FE 534F55524345     (        forth.asm):02787                 fcc     'SOURCE'        ( -- baseaddr charcount )
F304 F2E3             (        forth.asm):02788                 fdb     LPAR
F306 C7               (        forth.asm):02789                 RFCS
F307 9E1C             (        forth.asm):02790 (4)             ldx     BSBFADR
F309 BDE7ED           (        forth.asm):02791 (7)             jsr     NPUSH
F30C 8E0400           (        forth.asm):02792 (3)             ldx     #BLKSIZ         Non-zero block size
F30F DC24             (        forth.asm):02793 (4)             ldd     UBLK
F311 2605             (        forth.asm):02794 (3)             bne     @srcdon         Current BLK is NZ
F313 4F               (        forth.asm):02795 (1)             clra
F314 D62D             (        forth.asm):02796 (3)             ldb     CMDLNSZ         Character count entered through GETS in INTERP
F316 1F01             (        forth.asm):02797 (4)             tfr     d,x
F318 7EE7ED           (        forth.asm):02798 (3)     @srcdon jmp     NPUSH
                      (        forth.asm):02799         
                      (        forth.asm):02800         * This is a straightforward implementation borrowed from GNU Forth 'see \':
                      (        forth.asm):02801         * : \
                      (        forth.asm):02802         *   BLK @
                      (        forth.asm):02803         *   IF     >IN @ C/L / 1+ C/L * >IN ! EXIT
                      (        forth.asm):02804         *   THEN
                      (        forth.asm):02805         *   SOURCE >IN ! DROP ; IMMEDIATE
                      (        forth.asm):02806         * However since C/L (number of columns per line) is 64 (a power of 2), things
                      (        forth.asm):02807         * can be coded in a more compact manner as: >IN @ 63 COM AND 64 + >IN !
F31B 81               (        forth.asm):02808         BKSLSH  fcb     $81             ANSI (Block Ext)
F31C 5C               (        forth.asm):02809                 fcb     $5C             \ ( -- )
F31D F2FD             (        forth.asm):02810                 fdb     SOURCE
F31F C7               (        forth.asm):02811                 RFCS
F320 DC24             (        forth.asm):02812 (4)             ldd     UBLK            BLK @ to D
F322 270B             (        forth.asm):02813 (3)             beq     @comser         We operate from block 0: the console
F324 DC22             (        forth.asm):02814 (4)             ldd     UTOIN           >IN @
F326 C4C0             (        forth.asm):02815 (2)             andb    #^$3F           Point to the beginning of the line
F328 CB40             (        forth.asm):02816 (2)             addb    #$40            next line
F32A 8900             (        forth.asm):02817 (2)             adca    #0              Propagate potential carry from LSB
F32C DD22             (        forth.asm):02818 (4)             std     UTOIN           >IN !
F32E 39               (        forth.asm):02819 (4)             rts                     EXIT
F32F 8DD6             (        forth.asm):02820         @comser RFXT    bsr,SOURCE+9    XT for SOURCE
F331 BDE7FB           (        forth.asm):02821 (7)             jsr     NPOP
F334 9F22             (        forth.asm):02822 (4)             stx     UTOIN           >IN !
F336 7EFBFF           (        forth.asm):02823                 RFXT    jmp,DROP+7      XT for DROP
                      (        forth.asm):02824                 ENDC
                      (        forth.asm):02825         
F339 82               (        forth.asm):02826         PSTR    fcb     $82             79-STANDARD (REQ133)
F33A 2E22             (        forth.asm):02827                 fcc     '."'
F33C F31B             (        forth.asm):02828                 fdb     BKSLSH
F33E C7               (        forth.asm):02829                 RFCS
F33F 8D13             (        forth.asm):02830                 RFXT    bsr,SQUOTE+5    XT for S"
F341 0D21             (        forth.asm):02831 (4)             tst     USTATE+1
F343 2603             (        forth.asm):02832 (3)             bne     @pstcmp
F345 7EF700           (        forth.asm):02833                 RFXT    jmp,TYPE+7      XT for TYPE
F348 8EF700           (        forth.asm):02834         @pstcmp RFXT    ldx,#TYPE+7     Emit TYPE as an XT
F34B 7EE169           (        forth.asm):02835 (3)             jmp     EMXASXT
                      (        forth.asm):02836         
F34E 82               (        forth.asm):02837         SQUOTE  fcb     $82             ANSI (Core)
F34F 5322             (        forth.asm):02838                 fcc     'S"'
F351 F339             (        forth.asm):02839                 fdb     PSTR
F353 C7               (        forth.asm):02840                 RFCS
F354 0D21             (        forth.asm):02841 (4)             tst     USTATE+1
F356 260C             (        forth.asm):02842 (3)             bne     @sqcmp
F358 8E0022           (        forth.asm):02843 (3)             ldx     #'"             We are inperpreting
F35B BDE7ED           (        forth.asm):02844 (7)             jsr     NPUSH
F35E BDF2A6           (        forth.asm):02845                 RFXT    jsr,WORD+7      XT for WORD
F361 7EF71F           (        forth.asm):02846                 RFXT    jmp,COUNT+8     XT for COUNT
F364 109E08           (        forth.asm):02847 (5)     @sqcmp  ldy     DICEND          We are compiling
F367 867E             (        forth.asm):02848 (2)             lda     #JMPOPC         JMP extended
F369 A7A0             (        forth.asm):02849 (4+1)           sta     ,y+
F36B 3420             (        forth.asm):02850 (4+2)           pshs    y
F36D 3122             (        forth.asm):02851 (4+1)           leay    2,y             2 ALLOT
F36F 109F08           (        forth.asm):02852 (5)             sty     DICEND
F372 8E0022           (        forth.asm):02853 (3)             ldx     #'"
F375 BDE7ED           (        forth.asm):02854 (7)             jsr     NPUSH
F378 BDF2A6           (        forth.asm):02855                 RFXT    jsr,WORD+7      XT for WORD
F37B BDE7FB           (        forth.asm):02856 (7)             jsr     NPOP
F37E 4F               (        forth.asm):02857 (1)             clra
F37F E684             (        forth.asm):02858 (4+0)           ldb     ,x              C@
F381 3001             (        forth.asm):02859 (4+1)           leax    1,x             1+. Skip the byte count (X has HERE)
F383 308B             (        forth.asm):02860 (4+2)           leax    d,x             Skip string length material
F385 3520             (        forth.asm):02861 (4+2)           puls    y
F387 AFA4             (        forth.asm):02862 (5+0)           stx     ,y              Install jump address
F389 3122             (        forth.asm):02863 (4+1)           leay    2,y             Counted string base address to Y
F38B 868E             (        forth.asm):02864 (2)             lda     #LDXOPC
F38D A780             (        forth.asm):02865 (4+1)           sta     ,x+
F38F 10AF81           (        forth.asm):02866 (6+2)           sty     ,x++
F392 9F08             (        forth.asm):02867 (4)             stx     DICEND          Update HERE
F394 8EE7ED           (        forth.asm):02868 (3)             ldx     #NPUSH
F397 BDE169           (        forth.asm):02869 (7)             jsr     EMXASXT
F39A 8EF71F           (        forth.asm):02870                 RFXT    ldx,#COUNT+8    XT for COUNT
F39D 7EE169           (        forth.asm):02871 (3)             jmp     EMXASXT
                      (        forth.asm):02872         
                      (        forth.asm):02873         * Transactional behaviour is guaranteed here. What this means is that the
                      (        forth.asm):02874         * operation will preserve the data stack contents, should insufficient
                      (        forth.asm):02875         * parameters be supplied. It is a very desirable feature (for debugging
                      (        forth.asm):02876         * purposes) which will be generalized to a number of other words. As an
                      (        forth.asm):02877         * aside, it also allows us to access the data stack as directly indexed
                      (        forth.asm):02878         * through the 6309 U register, resulting in better performance.
F3A0 02               (        forth.asm):02879         DPLUS   fcb     2               79-STANDARD (REQ241)
F3A1 442B             (        forth.asm):02880                 fcc     'D+'            ( d1 d2 -- d1+d2--signed )
F3A3 F34E             (        forth.asm):02881                 fdb     SQUOTE          In processor's terms U has ( L1 H1 L2 H2)
F3A5 C7               (        forth.asm):02882                 RFCS
F3A6 BDE4A4           (        forth.asm):02883 (7)             jsr     MIN4PST         Make sure we have at least 4 cells stacked up
                      (        forth.asm):02884         * At this point sufficient stack depth has been assessed. Let's rock and roll!
F3A9 EC46             (        forth.asm):02885 (5+1)           ldd     6,u             L1
F3AB E342             (        forth.asm):02886 (5+1)           addd    2,u             L2
F3AD ED46             (        forth.asm):02887 (5+1)           std     6,u             d1+d2 least significant cell
F3AF EC44             (        forth.asm):02888 (5+1)           ldd     4,u             H1
F3B1 10A9C4           (        forth.asm):02889 (6+0)           adcd    ,u              H2 (add with carry bit)
F3B4 ED44             (        forth.asm):02890 (5+1)           std     4,u             d1+d2 most significant cell
F3B6 3344             (        forth.asm):02891 (4+1)           leau    4,u             Drop 2 cells from the data stack
F3B8 39               (        forth.asm):02892 (4)             rts
                      (        forth.asm):02893         
F3B9 07               (        forth.asm):02894         DNEG    fcb     7               79-STANDARD (REQ245)
F3BA 444E4547415445   (        forth.asm):02895                 fcc     'DNEGATE'
F3C1 F3A0             (        forth.asm):02896                 fdb     DPLUS
F3C3 C7               (        forth.asm):02897                 RFCS
F3C4 BDE49A           (        forth.asm):02898 (7)             jsr     MIN2PST         We need at least 2 cells stacked up
F3C7 10A642           (        forth.asm):02899 (6+1)           ldw     2,u             Least significant cell
F3CA 1053             (        forth.asm):02900 (2)             comw
F3CC ECC4             (        forth.asm):02901 (5+0)           ldd     ,u              Most significant cell
F3CE 1043             (        forth.asm):02902 (2)             comd
F3D0 108B0001         (        forth.asm):02903 (4)             addw    #1
F3D4 10890000         (        forth.asm):02904 (4)             adcd    #0              Propagate carry flag
F3D8 10EDC4           (        forth.asm):02905 (8+0)           stq     ,u              Store the result back to the data stack
F3DB 39               (        forth.asm):02906 (4)             rts
                      (        forth.asm):02907         
F3DC 02               (        forth.asm):02908         DMINUS  fcb     2               79-STANDARD (double number extension)
F3DD 442D             (        forth.asm):02909                 fcc     'D-'            ( d1 d2 -- d1-d2--signed )
F3DF F3B9             (        forth.asm):02910                 fdb     DNEG            In processor's terms U has ( L1 H1 L2 H2)
F3E1 C7               (        forth.asm):02911                 RFCS
F3E2 BDE4A4           (        forth.asm):02912 (7)             jsr     MIN4PST         Make sure we have at least 4 cells stacked up
F3E5 EC46             (        forth.asm):02913 (5+1)           ldd     6,u             L1
F3E7 A342             (        forth.asm):02914 (5+1)           subd    2,u             L2
F3E9 ED46             (        forth.asm):02915 (5+1)           std     6,u             d1-d2 least significant cell
F3EB EC44             (        forth.asm):02916 (5+1)           ldd     4,u             H1
F3ED 10A2C4           (        forth.asm):02917 (6+0)           sbcd    ,u              H2 (substract with borrow)
F3F0 ED44             (        forth.asm):02918 (5+1)           std     4,u             d1-d2 most significant cell
F3F2 3344             (        forth.asm):02919 (4+1)           leau    4,u
F3F4 39               (        forth.asm):02920 (4)             rts
                      (        forth.asm):02921         
F3F5 03               (        forth.asm):02922         DZEQ    fcb     3               79-STANDARD (double number extension)
F3F6 44303D           (        forth.asm):02923                 fcc     'D0='           ( d -- flag )
F3F9 F3DC             (        forth.asm):02924                 fdb     DMINUS
F3FB C7               (        forth.asm):02925                 RFCS
F3FC BDEE56           (        forth.asm):02926                 RFXT    jsr,OR+5        XT for OR
F3FF 7EEED0           (        forth.asm):02927                 RFXT    jmp,NULP+5      XT for 0=
                      (        forth.asm):02928         
                      (        forth.asm):02929         * GNU Forth has:
                      (        forth.asm):02930         * f = FLAG(d1.hi==d2.hi ? d1.lo<d2.lo : d1.hi<d2.hi);
                      (        forth.asm):02931         * Comparisons between high cells are signed, but they are unsigned between
                      (        forth.asm):02932         * the low cells.
F402 02               (        forth.asm):02933         DLESS   fcb     2               79-STANDARD (REQ244)
F403 443C             (        forth.asm):02934                 fcc     'D<'            ( d1 d2 -- flag )
F405 F3F5             (        forth.asm):02935                 fdb     DZEQ
F407 C7               (        forth.asm):02936                 RFCS
F408 BDE4A4           (        forth.asm):02937 (7)             jsr     MIN4PST
                      (        forth.asm):02938         * Data stack structure at this point:
                      (        forth.asm):02939         * ,u    d2.hi                   1 cell
                      (        forth.asm):02940         * 2,u   d2.lo                   1 cell
                      (        forth.asm):02941         * 4,u   d1.hi                   1 cell
                      (        forth.asm):02942         * 6,u   d1.lo                   1 cell
F40B 115F             (        forth.asm):02943 (2)             clrf                    A priori return value for FLAG
F40D ECC4             (        forth.asm):02944 (5+0)           ldd     ,u              D2.HI
F40F 10A344           (        forth.asm):02945 (6+1)           cmpd    4,u             D1.HI
F412 2611             (        forth.asm):02946 (3)             bne     @term2
F414 EC42             (        forth.asm):02947 (5+1)           ldd     2,u             D2.LO
F416 10A346           (        forth.asm):02948 (6+1)           cmpd    6,u             D1.LO
F419 2302             (        forth.asm):02949 (3)             bls     @done
F41B 115C             (        forth.asm):02950 (2)     @setto1 incf
F41D 11E747           (        forth.asm):02951 (5+1)   @done   stf     7,u             FLAG's LSB
F420 6F46             (        forth.asm):02952 (6+1)           clr     6,u             FLAG's MSB
F422 3346             (        forth.asm):02953 (4+1)           leau    6,u             Drop three cells fron the data stack
F424 39               (        forth.asm):02954 (4)             rts
F425 2FF6             (        forth.asm):02955 (3)     @term2  ble     @done
F427 20F2             (        forth.asm):02956 (3)             bra     @setto1
                      (        forth.asm):02957         
F429 05               (        forth.asm):02958         TWOOVER fcb     5               79-STANDARD (double number extension)
F42A 324F564552       (        forth.asm):02959                 fcc     '2OVER'         ( d1 d2 -- d1 d2 d1 )
F42F F402             (        forth.asm):02960                 fdb     DLESS
F431 C7               (        forth.asm):02961                 RFCS
F432 BDE4A4           (        forth.asm):02962 (7)             jsr     MIN4PST         At least four cells need to be stacked up
F435 10EC44           (        forth.asm):02963 (8+1)           ldq     4,u             D:W has MSC:LSC of D1
F438 1F61             (        forth.asm):02964 (4)             tfr     w,x
F43A BDE7ED           (        forth.asm):02965 (7)             jsr     NPUSH
F43D 1F01             (        forth.asm):02966 (4)             tfr     d,x
F43F 7EE7ED           (        forth.asm):02967 (3)             jmp     NPUSH
                      (        forth.asm):02968         
F442 05               (        forth.asm):02969         TWOSWAP fcb     5               79-STANDARD (double number extension)
F443 3253574150       (        forth.asm):02970                 fcc     '2SWAP'         ( d1 d2 -- d2 d1 )
F448 F429             (        forth.asm):02971                 fdb     TWOOVER
F44A C7               (        forth.asm):02972                 RFCS
F44B BDE4A4           (        forth.asm):02973 (7)             jsr     MIN4PST         At least four cells must be stacked up
F44E AE44             (        forth.asm):02974 (5+1)           ldx     4,u             D1 most significant cell
F450 10AE46           (        forth.asm):02975 (6+1)           ldy     6,u             D1 least significant cell
F453 10ECC4           (        forth.asm):02976 (8+0)           ldq     ,u              D:W has MSC:LSC of D2
F456 10ED44           (        forth.asm):02977 (8+1)           stq     4,u
F459 AFC4             (        forth.asm):02978 (5+0)           stx     ,u
F45B 10AF42           (        forth.asm):02979 (6+1)           sty     2,u
F45E 39               (        forth.asm):02980 (4)             rts
                      (        forth.asm):02981         
F45F 05               (        forth.asm):02982         TWODROP fcb     5               79-STANDARD (double number extension)
F460 3244524F50       (        forth.asm):02983                 fcc     '2DROP'         ( d -- )
F465 F442             (        forth.asm):02984                 fdb     TWOSWAP
F467 C7               (        forth.asm):02985                 RFCS
F468 BDE49A           (        forth.asm):02986 (7)             jsr     MIN2PST         At least two cells must be stacked up
F46B 3344             (        forth.asm):02987 (4+1)           leau    4,u
F46D 39               (        forth.asm):02988 (4)             rts
                      (        forth.asm):02989         
F46E 04               (        forth.asm):02990         TWODUP  fcb     4               79-STANDARD (double number extension)
F46F 32445550         (        forth.asm):02991                 fcc     '2DUP'          ( double -- double double )
F473 F45F             (        forth.asm):02992                 fdb     TWODROP
F475 C7               (        forth.asm):02993                 RFCS
F476 BDE49A           (        forth.asm):02994 (7)             jsr     MIN2PST         At least two cells need to be stacked up
F479 10ECC4           (        forth.asm):02995 (8+0)           ldq     ,u              D:W has MSC:LSC of DOUBLE
F47C 1F61             (        forth.asm):02996 (4)             tfr     w,x
F47E BDE7ED           (        forth.asm):02997 (7)             jsr     NPUSH
F481 1F01             (        forth.asm):02998 (4)             tfr     d,x
F483 7EE7ED           (        forth.asm):02999 (3)             jmp     NPUSH
                      (        forth.asm):03000         
F486 02               (        forth.asm):03001         TWOSTOR fcb     2               79-STANDARD (double number extension)
F487 3221             (        forth.asm):03002                 fcc     '2!'            ( double addr -- )
F489 F46E             (        forth.asm):03003                 fdb     TWODUP
F48B C7               (        forth.asm):03004                 RFCS
F48C BDE49F           (        forth.asm):03005 (7)             jsr     MIN3PST         At least three cells need to be stacked up
F48F 10EC42           (        forth.asm):03006 (8+1)           ldq     2,u             DOUBLE to D:W
F492 10EDD4           (        forth.asm):03007 (8+3)           stq     [,u]            Store DOUBLE to ADDR
F495 3346             (        forth.asm):03008 (4+1)           leau    6,u             Drop three cells from the user stack
F497 39               (        forth.asm):03009 (4)             rts
                      (        forth.asm):03010         
F498 02               (        forth.asm):03011         TWOFTCH fcb     2               79-STANDARD (double number extension)
F499 3240             (        forth.asm):03012                 fcc     '2@'            ( dbladdr -- double )
F49B F486             (        forth.asm):03013                 fdb     TWOSTOR
F49D C7               (        forth.asm):03014                 RFCS
F49E BDE495           (        forth.asm):03015 (7)             jsr     MIN1PST         At least cell needs to be stacked up
F4A1 10ECD4           (        forth.asm):03016 (8+3)           ldq     [,u]            D:W has MSC:LSC of DBLADDR @
F4A4 10A7C4           (        forth.asm):03017 (6+0)           stw     ,u              Least significant cell stacked in place
F4A7 1F01             (        forth.asm):03018 (4)             tfr     d,x             Most significant cell goes through standard push
F4A9 7EE7ED           (        forth.asm):03019 (3)             jmp     NPUSH
                      (        forth.asm):03020         
F4AC 07               (        forth.asm):03021         CONVERT fcb     7               79-STANDARD (REQ195)
F4AD 434F4E56455254   (        forth.asm):03022                 fcc     'CONVERT'       ( d1 addr1 -- d2 addr2 )
F4B4 F498             (        forth.asm):03023                 fdb     TWOFTCH
F4B6 C7               (        forth.asm):03024                 RFCS
F4B7 BDE49F           (        forth.asm):03025 (7)             jsr     MIN3PST         At least 3 cells need to be stacked up
F4BA BDE3D9           (        forth.asm):03026 (7)             jsr     CKBASE          Check for supported BASE. No return if not
F4BD AEC4             (        forth.asm):03027 (5+0)           ldx     ,u              ADDR1 to X
F4BF 3001             (        forth.asm):03028 (4+1)   @cvloop leax    1,x
F4C1 E684             (        forth.asm):03029 (4+0)           ldb     ,x
                      (        forth.asm):03030         * B has the ASCII representation of something that may or may not be a valid
                      (        forth.asm):03031         * digit, expressed in BASE (alias (byte)UBASE+1). If it does, multiply D1 by
                      (        forth.asm):03032         * BASE and add that to D1 (aka D2 on exit). Then add DIGIT on the top of it.
F4C3 C030             (        forth.asm):03033 (2)             subb    #'0             Minimal ASCII value condition met?
F4C5 255B             (        forth.asm):03034 (3)             blo     @cvoor          No. Out of range. ,X cannot be a valid digit
F4C7 C10A             (        forth.asm):03035 (2)             cmpb    #10
F4C9 2510             (        forth.asm):03036 (3)             blo     @cvnolt         No letter in potential BASE
                      (        forth.asm):03037                 IFEQ    CSSNTVE
F4CB C111             (        forth.asm):03038 (2)             cmpb    #'A-'0
F4CD 2553             (        forth.asm):03039 (3)             blo     @cvoor          Greater than 9 but lower than A
F4CF C131             (        forth.asm):03040 (2)             cmpb    #'a-'0
F4D1 2506             (        forth.asm):03041 (3)             blo     @cvisuc         Upper case already
F4D3 C14A             (        forth.asm):03042 (2)             cmpb    #'z-'0
F4D5 224B             (        forth.asm):03043 (3)             bhi     @cvoor          Definitely out of range
F4D7 C020             (        forth.asm):03044 (2)             subb    #'a-'A          To upper case
                      (        forth.asm):03045                 ENDC                    CSSNTVE
F4D9 C007             (        forth.asm):03046 (2)     @cvisuc subb    #'A-':          A-Z to number
F4DB D11F             (        forth.asm):03047 (3)     @cvnolt cmpb    UBASE+1         B has a digit. Make sure it's less than BASE
F4DD 2443             (        forth.asm):03048 (3)             bhs     @cvoor          Number under scrutiny is >= BASE
F4DF 3278             (        forth.asm):03049 (4+1)           leas    -8,s            Allocate scratch space
F4E1 4F               (        forth.asm):03050 (1)             clra
F4E2 3406             (        forth.asm):03051 (4+2)           pshs    d
                      (        forth.asm):03052         * System and user stack structures are as follows:
                      (        forth.asm):03053         * ,s    current digit (1 cell)
                      (        forth.asm):03054         * 2,s   D0*B (1 cell)
                      (        forth.asm):03055         * 4,s   D1*B (1 cell)
                      (        forth.asm):03056         * 6,s   D2*B (1 cell)
                      (        forth.asm):03057         * 8,s   D3*B (1 cell)
                      (        forth.asm):03058         * 2,u   D1H most significant cell
                      (        forth.asm):03059         * 4,u   D1L least significant cell
F4E4 1F37             (        forth.asm):03060 (4)             tfr     u,v             Backup U
F4E6 3346             (        forth.asm):03061 (4+1)           leau    6,u             Point one byte after D1LL
F4E8 3162             (        forth.asm):03062 (4+1)           leay    2,s             Point to D0*B
F4EA 118604           (        forth.asm):03063 (3)             lde     #4              Four products to go through
F4ED A6C2             (        forth.asm):03064 (4+1)   @cvmul  lda     ,-u
F4EF D61F             (        forth.asm):03065 (3)             ldb     UBASE+1
F4F1 3D               (        forth.asm):03066 (10)            mul
F4F2 EDA1             (        forth.asm):03067 (5+2)           std     ,y++
F4F4 114A             (        forth.asm):03068 (2)             dece
F4F6 26F5             (        forth.asm):03069 (3)             bne     @cvmul
F4F8 1F73             (        forth.asm):03070 (4)             tfr     v,u             Restore U
F4FA A663             (        forth.asm):03071 (4+1)           lda     3,s
F4FC A745             (        forth.asm):03072 (4+1)           sta     5,u             D1LL
F4FE A662             (        forth.asm):03073 (4+1)           lda     2,s
F500 AB65             (        forth.asm):03074 (4+1)           adda    5,s
F502 A744             (        forth.asm):03075 (4+1)           sta     4,u             D1LH
F504 A664             (        forth.asm):03076 (4+1)           lda     4,s
F506 A967             (        forth.asm):03077 (4+1)           adca    7,s
F508 A743             (        forth.asm):03078 (4+1)           sta     3,u             D1HL
F50A A666             (        forth.asm):03079 (4+1)           lda     6,s
F50C A969             (        forth.asm):03080 (4+1)           adca    9,s
F50E A742             (        forth.asm):03081 (4+1)           sta     2,u             D1HH
F510 EC44             (        forth.asm):03082 (5+1)           ldd     4,u             D1L
F512 E3E4             (        forth.asm):03083 (5+0)           addd    ,s              DIGIT
F514 ED44             (        forth.asm):03084 (5+1)           std     4,u
F516 EC42             (        forth.asm):03085 (5+1)           ldd     2,u             D1H
F518 10890000         (        forth.asm):03086 (4)             adcd    #0              Potential carry from lower cell
F51C ED42             (        forth.asm):03087 (5+1)           std     2,u
F51E 326A             (        forth.asm):03088 (4+1)           leas    10,s            Release scratch space
F520 209D             (        forth.asm):03089 (3)             bra     @cvloop         Here we go again
F522 AFC4             (        forth.asm):03090 (5+0)   @cvoor  stx     ,u              Update ADDR2
F524 39               (        forth.asm):03091 (4)             rts
                      (        forth.asm):03092         
F525 02               (        forth.asm):03093         CVTE    fcb     2
F526 233E             (        forth.asm):03094                 fcc     '#>'
F528 F4AC             (        forth.asm):03095                 fdb     CONVERT
F52A C7               (        forth.asm):03096                 RFCS
F52B BDE7FB           (        forth.asm):03097 (7)             jsr     NPOP
F52E BDE7FB           (        forth.asm):03098 (7)             jsr     NPOP            Drop 2 cells from the data stack
F531 8E0184           (        forth.asm):03099 (3)             ldx     #PADBUF
F534 3610             (        forth.asm):03100                 UCNPUSH
F536 BDE246           (        forth.asm):03101 (7)             jsr     SLEN
F539 1F61             (        forth.asm):03102 (4)             tfr     w,x
F53B 3610             (        forth.asm):03103                 UCNPUSH
F53D 39               (        forth.asm):03104 (4)             rts
                      (        forth.asm):03105         
F53E 04               (        forth.asm):03106         SIGN    fcb     4
F53F 5349474E         (        forth.asm):03107                 fcc     'SIGN'
F543 F525             (        forth.asm):03108                 fdb     CVTE
F545 C7               (        forth.asm):03109                 RFCS
F546 BDE7FB           (        forth.asm):03110 (7)             jsr     NPOP
F549 1F10             (        forth.asm):03111 (4)             tfr     x,d
F54B 104D             (        forth.asm):03112 (2)             tstd
F54D 2C05             (        forth.asm):03113 (3)             bge     @sign1
F54F C62D             (        forth.asm):03114 (2)             ldb     #'-
F551 7EF60D           (        forth.asm):03115 (3)             jmp     INSBPAD
F554 39               (        forth.asm):03116 (4)     @sign1  rts
                      (        forth.asm):03117         
F555 04               (        forth.asm):03118         HOLD    fcb     4
F556 484F4C44         (        forth.asm):03119                 fcc     'HOLD'
F55A F53E             (        forth.asm):03120                 fdb     SIGN
F55C C7               (        forth.asm):03121                 RFCS
F55D BDE7FB           (        forth.asm):03122 (7)             jsr     NPOP
F560 1F10             (        forth.asm):03123 (4)             tfr     x,d
F562 7EF60D           (        forth.asm):03124 (3)             jmp     INSBPAD         B is inserted at the beginning of PAD.
                      (        forth.asm):03125         
F565 02               (        forth.asm):03126         SHARPS  fcb     2
F566 2353             (        forth.asm):03127                 fcc     '#S'
F568 F555             (        forth.asm):03128                 fdb     HOLD
F56A C7               (        forth.asm):03129                 RFCS
F56B 8601             (        forth.asm):03130 (2)             lda     #1
F56D 9734             (        forth.asm):03131 (3)             sta     CVTFCN          CVT function #1 is #S
F56F 2007             (        forth.asm):03132 (3)             bra     CVT0
                      (        forth.asm):03133         
                      (        forth.asm):03134         * Unsigned double on the top of the data stack gets divided by BASE.
                      (        forth.asm):03135         * The division algorithm implemented here is the binary long division.
                      (        forth.asm):03136         * See https://en.wikipedia.org/wiki/Division_algorithm for more information.
                      (        forth.asm):03137         * Remainder (converted to a character) gets prepended to PAD.
F571 01               (        forth.asm):03138         CVT     fcb     1
F572 23               (        forth.asm):03139                 fcc     '#'
F573 F565             (        forth.asm):03140                 fdb     SHARPS
F575 C7               (        forth.asm):03141                 RFCS
F576 0F34             (        forth.asm):03142 (5)             clr     CVTFCN          CVT function 0 is #
F578 BDE7FB           (        forth.asm):03143 (7)     CVT0    jsr     NPOP
F57B 1F16             (        forth.asm):03144 (4)             tfr     x,w
F57D BDE7FB           (        forth.asm):03145 (7)             jsr     NPOP
F580 3410             (        forth.asm):03146 (4+2)   CVT1    pshs    x               Numerator least significant cell
F582 1038             (        forth.asm):03147 (6)             pshsw                   Numerator most significant cell
F584 104F             (        forth.asm):03148 (2)             clrd
F586 3406             (        forth.asm):03149 (4+2)           pshs    d               Quotient low
F588 3406             (        forth.asm):03150 (4+2)           pshs    d               Quotient high
F58A 3406             (        forth.asm):03151 (4+2)           pshs    d               Bitmask low
F58C 10868000         (        forth.asm):03152 (4)             ldw     #$8000          Bitmask high
F590 1038             (        forth.asm):03153 (6)             pshsw
F592 3406             (        forth.asm):03154 (4+2)           pshs    d
                      (        forth.asm):03155         * Stack structure:
                      (        forth.asm):03156         * 1,s   remainder               8 bits (high order byte is zero and unused)
                      (        forth.asm):03157         * 2,s   Bitmask high            16 bits
                      (        forth.asm):03158         * 4,s   Bitmask low             16 bits
                      (        forth.asm):03159         * 6,s   Quotient high           16 bits
                      (        forth.asm):03160         * 8,s   Quotient low            16 bits
                      (        forth.asm):03161         * 10,s  Numerator high          16 bits
                      (        forth.asm):03162         * 12,s  Numerator low           16 bits
                      (        forth.asm):03163         * Denominator is at UBASE+1     8 bits
F594 11C61F           (        forth.asm):03164 (3)             ldf     #31             32 bits to go
F597 6861             (        forth.asm):03165 (6+1)   @cvt1   lsl     1,s             R := R << 1
                      (        forth.asm):03166         * We need to extract bit <f> from the numerator.
F599 306A             (        forth.asm):03167 (4+1)           leax    10,s            Numerator MSB address
F59B 1FF8             (        forth.asm):03168 (4)             tfr     f,a             Not to alter the stack structure
F59D 44               (        forth.asm):03169 (1)             lsra                    OffsetX: 3 - F >> 3
F59E 44               (        forth.asm):03170 (1)             lsra
F59F 44               (        forth.asm):03171 (1)             lsra
F5A0 C603             (        forth.asm):03172 (2)             ldb     #3
F5A2 103289           (        forth.asm):03173 (4)             subr    a,b
F5A5 A685             (        forth.asm):03174 (4+1)           lda     b,x
F5A7 1FF9             (        forth.asm):03175 (4)             tfr     f,b             Bitno: F & 7
F5A9 C407             (        forth.asm):03176 (2)             andb    #7
                      (        forth.asm):03177         * At this point, A has the data we're interested in. B has the bit number.
F5AB 5D               (        forth.asm):03178 (1)     @cvtex  tstb
F5AC 2704             (        forth.asm):03179 (3)             beq     @cvtfnd         Bit 0 of A has the data
F5AE 44               (        forth.asm):03180 (1)             lsra
F5AF 5A               (        forth.asm):03181 (1)             decb
F5B0 20F9             (        forth.asm):03182 (3)             bra     @cvtex
F5B2 8401             (        forth.asm):03183 (2)     @cvtfnd anda    #1
F5B4 AA61             (        forth.asm):03184 (4+1)           ora     1,s             R(0) := N(i)
F5B6 A761             (        forth.asm):03185 (4+1)           sta     1,s             Update the remainder
F5B8 911F             (        forth.asm):03186 (3)             cmpa    UBASE+1
F5BA 2512             (        forth.asm):03187 (3)             blo     @cvt5
F5BC 901F             (        forth.asm):03188 (3)             suba    UBASE+1
F5BE A761             (        forth.asm):03189 (4+1)           sta     1,s             R := R - D
                      (        forth.asm):03190         * Q(i) := 1 (use the bitmask).
F5C0 EC66             (        forth.asm):03191 (5+1)           ldd     6,s             Quotient high
F5C2 10AA62           (        forth.asm):03192 (6+1)           ord     2,s             Bitmask high
F5C5 ED66             (        forth.asm):03193 (5+1)           std     6,s
F5C7 EC68             (        forth.asm):03194 (5+1)           ldd     8,s             Quotient low
F5C9 10AA64           (        forth.asm):03195 (6+1)           ord     4,s             Bitmask low
F5CC ED68             (        forth.asm):03196 (5+1)           std     8,s
                      (        forth.asm):03197         * Shift the bitmask 1 bit right.
F5CE EC62             (        forth.asm):03198 (5+1)   @cvt5   ldd     2,s
F5D0 1044             (        forth.asm):03199 (2)             lsrd
F5D2 ED62             (        forth.asm):03200 (5+1)           std     2,s
F5D4 EC64             (        forth.asm):03201 (5+1)           ldd     4,s
F5D6 1046             (        forth.asm):03202 (2)             rord
F5D8 ED64             (        forth.asm):03203 (5+1)           std     4,s
F5DA 115A             (        forth.asm):03204 (2)             decf
F5DC 2CB9             (        forth.asm):03205 (3)             bge     @cvt1
                      (        forth.asm):03206         * Convert the remainder to a digit expressed in BASE.
F5DE E661             (        forth.asm):03207 (4+1)           ldb     1,s
F5E0 8630             (        forth.asm):03208 (2)             lda     #'0
F5E2 C10A             (        forth.asm):03209 (2)             cmpb    #10             B has the digit we want converted to BASE
F5E4 2502             (        forth.asm):03210 (3)             bcs     @cvtdgt
F5E6 8637             (        forth.asm):03211 (2)             lda     #'A-10
F5E8 103089           (        forth.asm):03212 (4)     @cvtdgt addr    a,b
F5EB 8D20             (        forth.asm):03213 (6)             bsr     INSBPAD         Prepend B to the string currently in PAD
F5ED 0D34             (        forth.asm):03214 (4)             tst     CVTFCN
F5EF 2711             (        forth.asm):03215 (3)             beq     @cvtend         Function 0 is straight #, i.e. we're done here
                      (        forth.asm):03216         * Function 1 is #S, we iterate unless the quotient is 0.
F5F1 EC68             (        forth.asm):03217 (5+1)           ldd     8,s
F5F3 10AA66           (        forth.asm):03218 (6+1)           ord     6,s
F5F6 270A             (        forth.asm):03219 (3)             beq     @cvtend
F5F8 AE68             (        forth.asm):03220 (5+1)           ldx     8,s             New numerator low
F5FA 10A666           (        forth.asm):03221 (6+1)           ldw     6,s             New numerator high
F5FD 326E             (        forth.asm):03222 (4+1)           leas    14,s            Discard the stack frame
F5FF 7EF580           (        forth.asm):03223 (3)             jmp     CVT1            And go at it again
                      (        forth.asm):03224         * Push back the quotient on the data stack (low then high cell).
F602 AE68             (        forth.asm):03225 (5+1)   @cvtend ldx     8,s
F604 3610             (        forth.asm):03226                 UCNPUSH
F606 AE66             (        forth.asm):03227 (5+1)           ldx     6,s
F608 326E             (        forth.asm):03228 (4+1)           leas    14,s            Discard the stack frame
F60A 3610             (        forth.asm):03229                 UCNPUSH
F60C 39               (        forth.asm):03230 (4)             rts
                      (        forth.asm):03231         
                      (        forth.asm):03232         * Insert the character in B in front of the string at PADBUF.
F60D 8E0184           (        forth.asm):03233 (3)     INSBPAD ldx     #PADBUF
F610 BDE246           (        forth.asm):03234 (7)             jsr     SLEN
F613 103061           (        forth.asm):03235 (4)             addr    w,x             X points to the PAD string's NUL terminator
F616 105C             (        forth.asm):03236 (2)             incw                    Include the terminator
F618 3101             (        forth.asm):03237 (4+1)           leay    1,x
F61A 113912           (        forth.asm):03238 (6+?)           tfm     x-,y-
F61D D784             (        forth.asm):03239 (3)             stb     PADBUF
F61F 39               (        forth.asm):03240 (4)             rts
                      (        forth.asm):03241         
F620 02               (        forth.asm):03242         CVTB    fcb     2
F621 3C23             (        forth.asm):03243                 fcc     '<#'
F623 F571             (        forth.asm):03244                 fdb     CVT
F625 C7               (        forth.asm):03245                 RFCS
F626 BDE3D9           (        forth.asm):03246 (7)             jsr     CKBASE          Sanity check. BASE can be altered at any time
F629 0F84             (        forth.asm):03247 (5)             clr     PADBUF
F62B 39               (        forth.asm):03248 (4)             rts
                      (        forth.asm):03249         
F62C 01               (        forth.asm):03250         DOT     fcb     1               79-STANDARD (REQ193)
F62D 2E               (        forth.asm):03251                 fcc     '.'
F62E F620             (        forth.asm):03252                 fdb     CVTB
F630 C7               (        forth.asm):03253                 RFCS
F631 8601             (        forth.asm):03254 (2)             lda     #1
F633 9737             (        forth.asm):03255 (3)             sta     CVISSGN         Force a signed number conversion
F635 BDE7FB           (        forth.asm):03256 (7)     PTOP0   jsr     NPOP
F638 BDE441           (        forth.asm):03257 (7)             jsr     CVNSTR
F63B 8E03EA           (        forth.asm):03258 (3)             ldx     #TBUFF
F63E 8620             (        forth.asm):03259 (2)             lda     #SP
F640 A180             (        forth.asm):03260 (4+1)   @ptop1  cmpa    ,x+             Skip leading spaces
F642 27FC             (        forth.asm):03261 (3)             beq     @ptop1
F644 301F             (        forth.asm):03262 (4+1)           leax    -1,x            Point to actual string start address
F646 BDE2F3           (        forth.asm):03263 (7)             jsr     PUTS
F649 7EE2E0           (        forth.asm):03264 (3)             jmp     PUTCH           Extra space after printing a number
                      (        forth.asm):03265         
F64C 02               (        forth.asm):03266         UDOT    fcb     2               79-STANDARD (REQ106)
F64D 552E             (        forth.asm):03267                 fcc     'U.'
F64F F62C             (        forth.asm):03268                 fdb     DOT
F651 C7               (        forth.asm):03269                 RFCS
F652 0F37             (        forth.asm):03270 (5)             clr     CVISSGN         Conversion is unsigned
F654 20DF             (        forth.asm):03271 (3)             bra     PTOP0
                      (        forth.asm):03272         
F656 02               (        forth.asm):03273         DOTR    fcb     2               79-STANDARD (REF)
F657 2E52             (        forth.asm):03274                 fcc     '.R'
F659 F64C             (        forth.asm):03275                 fdb     UDOT
F65B C7               (        forth.asm):03276                 RFCS
F65C 8601             (        forth.asm):03277 (2)             lda     #1
F65E 9737             (        forth.asm):03278 (3)             sta     CVISSGN
F660 BDE7FB           (        forth.asm):03279 (7)     DOTR0   jsr     NPOP
F663 3410             (        forth.asm):03280 (4+2)           pshs    x               Length parameter value
F665 BDE7FB           (        forth.asm):03281 (7)             jsr     NPOP
F668 BDE441           (        forth.asm):03282 (7)             jsr     CVNSTR
F66B 8E03EA           (        forth.asm):03283 (3)             ldx     #TBUFF
F66E 8620             (        forth.asm):03284 (2)             lda     #SP
F670 A180             (        forth.asm):03285 (4+1)   @dotr1  cmpa    ,x+
F672 27FC             (        forth.asm):03286 (3)             beq     @dotr1          Skip leading spaces
F674 301F             (        forth.asm):03287 (4+1)           leax    -1,x
F676 BDE246           (        forth.asm):03288 (7)             jsr     SLEN            String length is returned in W
F679 3506             (        forth.asm):03289 (4+2)           puls    d
F67B 1E06             (        forth.asm):03290 (5)             exg     d,w
F67D 103206           (        forth.asm):03291 (4)             subr    d,w
F680 2F0D             (        forth.asm):03292 (3)             ble     @dotr3
F682 8620             (        forth.asm):03293 (2)             lda     #SP
F684 105D             (        forth.asm):03294 (2)     @dotr2  tstw
F686 2707             (        forth.asm):03295 (3)             beq     @dotr3
F688 BDE2E0           (        forth.asm):03296 (7)             jsr     PUTCH
F68B 105A             (        forth.asm):03297 (2)             decw
F68D 20F5             (        forth.asm):03298 (3)             bra     @dotr2
F68F 7EE2F3           (        forth.asm):03299 (3)     @dotr3  jmp     PUTS
                      (        forth.asm):03300         
F692 03               (        forth.asm):03301         UDOTR   fcb     3               79-STANDARD (REF216)
F693 552E52           (        forth.asm):03302                 fcc     'U.R'
F696 F656             (        forth.asm):03303                 fdb     DOTR
F698 C7               (        forth.asm):03304                 RFCS
F699 0F37             (        forth.asm):03305 (5)             clr     CVISSGN
F69B 20C3             (        forth.asm):03306 (3)             bra     DOTR0
                      (        forth.asm):03307         
F69D 02               (        forth.asm):03308         BL      fcb     2               79-STANDARD (REF176)
F69E 424C             (        forth.asm):03309                 fcc     'BL'
F6A0 F692             (        forth.asm):03310                 fdb     UDOTR
F6A2 C7               (        forth.asm):03311                 RFCS
F6A3 8E0020           (        forth.asm):03312 (3)             ldx     #SP
F6A6 7EE7ED           (        forth.asm):03313 (3)             jmp     NPUSH
                      (        forth.asm):03314         
F6A9 05               (        forth.asm):03315         SPACE   fcb     5               79-STANDARD (REQ232)
F6AA 5350414345       (        forth.asm):03316                 fcc     'SPACE'
F6AF F69D             (        forth.asm):03317                 fdb     BL
F6B1 C7               (        forth.asm):03318                 RFCS
F6B2 8620             (        forth.asm):03319 (2)             lda     #SP
F6B4 7EE2E0           (        forth.asm):03320 (3)             jmp     PUTCH
                      (        forth.asm):03321         
F6B7 06               (        forth.asm):03322         SPACES  fcb     6               79-STANDARD (REQ231)
F6B8 535041434553     (        forth.asm):03323                 fcc     'SPACES'
F6BE F6A9             (        forth.asm):03324                 fdb     SPACE
F6C0 C7               (        forth.asm):03325                 RFCS
F6C1 BDE7FB           (        forth.asm):03326 (7)             jsr     NPOP
F6C4 1F16             (        forth.asm):03327 (4)             tfr     x,w
F6C6 105D             (        forth.asm):03328 (2)             tstw
F6C8 2709             (        forth.asm):03329 (3)             beq     @spcs2
F6CA 8620             (        forth.asm):03330 (2)             lda     #SP
F6CC BDE2E0           (        forth.asm):03331 (7)     @spcs1  jsr     PUTCH
F6CF 105A             (        forth.asm):03332 (2)             decw
F6D1 26F9             (        forth.asm):03333 (3)             bne     @spcs1
F6D3 39               (        forth.asm):03334 (4)     @spcs2  rts
                      (        forth.asm):03335         
F6D4 04               (        forth.asm):03336         PAGE    fcb     4               79-STANDARD (REF)
F6D5 50414745         (        forth.asm):03337                 fcc     'PAGE'
F6D9 F6B7             (        forth.asm):03338                 fdb     SPACES
F6DB C7               (        forth.asm):03339                 RFCS
F6DC 8EFDEB           (        forth.asm):03340 (3)             ldx     #CSVT100
F6DF 7EE2F3           (        forth.asm):03341 (3)             jmp     PUTS
                      (        forth.asm):03342         
F6E2 02               (        forth.asm):03343         CRLF    fcb     2               79-STANDARD (REQ160)
F6E3 4352             (        forth.asm):03344                 fcc     'CR'
F6E5 F6D4             (        forth.asm):03345                 fdb     PAGE
F6E7 C7               (        forth.asm):03346                 RFCS
F6E8 7EE300           (        forth.asm):03347 (3)             jmp     PUTCR
                      (        forth.asm):03348         
F6EB 03               (        forth.asm):03349         PAD     fcb     3               79-STANDARD (REQ226)
F6EC 504144           (        forth.asm):03350                 fcc     'PAD'
F6EF F6E2             (        forth.asm):03351                 fdb     CRLF
F6F1 C7               (        forth.asm):03352                 RFCS
F6F2 8E0184           (        forth.asm):03353 (3)             ldx     #PADBUF
F6F5 7EE7ED           (        forth.asm):03354 (3)             jmp     NPUSH
                      (        forth.asm):03355         
F6F8 04               (        forth.asm):03356         TYPE    fcb     4               79-STANDARD (REQ222)
F6F9 54595045         (        forth.asm):03357                 fcc     'TYPE'          ( addr bcount -- )
F6FD F6EB             (        forth.asm):03358                 fdb     PAD
F6FF C7               (        forth.asm):03359                 RFCS
F700 BDE7FB           (        forth.asm):03360 (7)             jsr     NPOP            Character count (signed)
F703 1F16             (        forth.asm):03361 (4)             tfr     x,w
F705 BDE7FB           (        forth.asm):03362 (7)             jsr     NPOP            Buffer address
F708 105D             (        forth.asm):03363 (2)             tstw                    
F70A 2E01             (        forth.asm):03364 (3)     @type0  bgt     @type1
F70C 39               (        forth.asm):03365 (4)             rts
F70D A680             (        forth.asm):03366 (4+1)   @type1  lda     ,x+
F70F BDE2E0           (        forth.asm):03367 (7)             jsr     PUTCH
F712 105A             (        forth.asm):03368 (2)             decw
F714 20F4             (        forth.asm):03369 (3)             bra     @type0
                      (        forth.asm):03370         
F716 05               (        forth.asm):03371         COUNT   fcb     5               79-STANDARD (REQ159)
F717 434F554E54       (        forth.asm):03372                 fcc     'COUNT'
F71C F6F8             (        forth.asm):03373                 fdb     TYPE
F71E C7               (        forth.asm):03374                 RFCS
F71F BDE7FB           (        forth.asm):03375 (7)             jsr     NPOP
F722 E680             (        forth.asm):03376 (4+1)           ldb     ,x+
F724 3610             (        forth.asm):03377                 UCNPUSH                 B is preserved
F726 4F               (        forth.asm):03378 (1)             clra
F727 1F01             (        forth.asm):03379 (4)             tfr     d,x
F729 7EE7ED           (        forth.asm):03380 (3)             jmp     NPUSH
                      (        forth.asm):03381         
F72C 09               (        forth.asm):03382         DASHTR  fcb     9               79-STANDARD (REQ148)
F72D 2D545241494C494E (        forth.asm):03383                 fcc     '-TRAILING'     ( addr n1 -- addr n2 )
     47
F736 F716             (        forth.asm):03384                 fdb     COUNT
F738 C7               (        forth.asm):03385                 RFCS
F739 BDE7FB           (        forth.asm):03386 (7)             jsr     NPOP            N1 to X
F73C 1F10             (        forth.asm):03387 (4)             tfr     x,d             N1 to D
F73E BDE7FB           (        forth.asm):03388 (7)             jsr     NPOP            ADDR to X
F741 1F12             (        forth.asm):03389 (4)             tfr     x,y             Backup to I
F743 104D             (        forth.asm):03390 (2)             tstd                    Input character count (N1)
F745 2D1B             (        forth.asm):03391 (3)             blt     @invpar         Cannot be < 0
F747 308B             (        forth.asm):03392 (4+2)           leax    d,x             X has ADDR+N1
F749 1F06             (        forth.asm):03393 (4)             tfr     d,w             W has N1
F74B 105D             (        forth.asm):03394 (2)     @cknxtb tstw
F74D 270A             (        forth.asm):03395 (3)             beq     @ckdone
F74F A682             (        forth.asm):03396 (4+1)           lda     ,-x
F751 105A             (        forth.asm):03397 (2)             decw
F753 8120             (        forth.asm):03398 (2)             cmpa    #SP
F755 27F4             (        forth.asm):03399 (3)             beq     @cknxtb         Iterate over to the previous byte
F757 105C             (        forth.asm):03400 (2)             incw
F759 1F21             (        forth.asm):03401 (4)     @ckdone tfr     y,x
F75B 3610             (        forth.asm):03402                 UCNPUSH                 String base address
F75D 1F61             (        forth.asm):03403 (4)             tfr     w,x
F75F 3610             (        forth.asm):03404                 UCNPUSH                 Updated character count
F761 39               (        forth.asm):03405 (4)             rts
F762 C60D             (        forth.asm):03406 (2)     @invpar ldb     #13             Invalid parameter
F764 BDE76A           (        forth.asm):03407 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):03408         
F767 06               (        forth.asm):03409         EXPECT  fcb     6               79-STANDARD (REQ189)
F768 455850454354     (        forth.asm):03410                 fcc     'EXPECT'        ( addr count -- )
F76E F72C             (        forth.asm):03411                 fdb     DASHTR
F770 C7               (        forth.asm):03412                 RFCS
F771 BDE7FB           (        forth.asm):03413 (7)     EXPCT1  jsr     NPOP
F774 1F10             (        forth.asm):03414 (4)             tfr     x,d             Buffer length to B
F776 BDE7FB           (        forth.asm):03415 (7)             jsr     NPOP            Buffer address to X. B is preserved
F779 5D               (        forth.asm):03416 (1)             tstb
F77A 2701             (        forth.asm):03417 (3)             beq     @expct1
F77C 5C               (        forth.asm):03418 (1)             incb                    Account for the NUL terminator
F77D 7EE316           (        forth.asm):03419 (3)     @expct1 jmp     GETS
                      (        forth.asm):03420         
F780 06               (        forth.asm):03421         ACCEPT  fcb     6               ANSI (Core)
F781 414343455054     (        forth.asm):03422                 fcc     'ACCEPT'
F787 F767             (        forth.asm):03423                 fdb     EXPECT
F789 C7               (        forth.asm):03424                 RFCS
F78A 8DE5             (        forth.asm):03425 (6)             bsr     EXPCT1
F78C 4F               (        forth.asm):03426 (1)             clra
F78D 3606             (        forth.asm):03427 (4+2)           pshu    d               This saves us "tfr d,x" and "UCNPUSH"
F78F 39               (        forth.asm):03428 (4)             rts
                      (        forth.asm):03429         
F790 49               (        forth.asm):03430         TERPRET fcb     $49             79-STANDARD (REF) I make this compile time only
F791 494E544552505245 (        forth.asm):03431                 fcc     'INTERPRET'     ( -- )
     54
F79A F780             (        forth.asm):03432                 fdb     ACCEPT
F79C C7               (        forth.asm):03433                 RFCS
                      (        forth.asm):03434         * Obtain a base buffer address based on the value of BLK.
F79D DC24             (        forth.asm):03435 (4)             ldd     UBLK
F79F 2605             (        forth.asm):03436 (3)             bne     @notser
F7A1 8E0316           (        forth.asm):03437 (3)             ldx     #CMDBUF         Base buffer address for serial line input
F7A4 200A             (        forth.asm):03438 (3)             bra     @rsolvd
                      (        forth.asm):03439         * BLK is NZ, map the block in memory.
F7A6 1F01             (        forth.asm):03440 (4)     @notser tfr     d,x             Block number to X
F7A8 BDE7ED           (        forth.asm):03441 (7)             jsr     NPUSH
F7AB BDEA53           (        forth.asm):03442                 RFXT    jsr,BLOCK+8     XT for BLOCK. Map the block in
F7AE 3710             (        forth.asm):03443                 UCNPOP                  Retrieve buffer address (to X)
                      (        forth.asm):03444         * Note: >IN is supposed to have been set by the caller!
F7B0 9F1C             (        forth.asm):03445 (4)     @rsolvd stx     BSBFADR
F7B2 DC22             (        forth.asm):03446 (4)             ldd     UTOIN
F7B4 103001           (        forth.asm):03447 (4)             addr    d,x
F7B7 7EE0CA           (        forth.asm):03448 (3)             jmp     _INTERP         Finally invoke _INTERP.
                      (        forth.asm):03449         
F7BA 04               (        forth.asm):03450         LOAD    fcb     4               79-STANDARD (REQ202)
F7BB 4C4F4144         (        forth.asm):03451                 fcc     'LOAD'          ( blk -- )
F7BF F790             (        forth.asm):03452                 fdb     TERPRET
F7C1 C7               (        forth.asm):03453                 RFCS
F7C2 BDE7FB           (        forth.asm):03454 (7)             jsr     NPOP
F7C5 1037C1           (        forth.asm):03455 (4)             cmpr    0,x
F7C8 2601             (        forth.asm):03456 (3)             bne     LOAD1
F7CA 39               (        forth.asm):03457 (4)             rts                     Block 0 is _not_ loadable
F7CB 3410             (        forth.asm):03458 (4+2)   LOAD1   pshs    x
F7CD 9E24             (        forth.asm):03459 (4)             ldx     UBLK
F7CF BDE80A           (        forth.asm):03460 (7)             jsr     RPUSH           Push BLK on the return stack
F7D2 9E22             (        forth.asm):03461 (4)             ldx     UTOIN
F7D4 BDE80A           (        forth.asm):03462 (7)             jsr     RPUSH           Push >IN on the return stack
F7D7 3510             (        forth.asm):03463 (4+2)           puls    x
F7D9 9F24             (        forth.asm):03464 (4)             stx     UBLK            Update BLK with the LOAD argument
F7DB 104F             (        forth.asm):03465 (2)             clrd
F7DD DD22             (        forth.asm):03466 (4)             std     UTOIN           Clear >IN
                      (        forth.asm):03467         * Map the new BLK in, interpret code from there.
F7DF 8DBC             (        forth.asm):03468                 RFXT    bsr,TERPRET+12  XT for INTERPRET
F7E1 BDE828           (        forth.asm):03469 (7)             jsr     RPOP
F7E4 9F22             (        forth.asm):03470 (4)             stx     UTOIN           Restore >IN from the return stack
F7E6 BDE828           (        forth.asm):03471 (7)             jsr     RPOP
F7E9 9F24             (        forth.asm):03472 (4)             stx     UBLK            Restore BLK from the return stack
F7EB 7EE841           (        forth.asm):03473 (3)             jmp     BKIN2PT         Map BLK in (if needed) and update BSBFADR
                      (        forth.asm):03474         
F7EE 04               (        forth.asm):03475         THRU    fcb     4               79-STANDARD (REF)
F7EF 54485255         (        forth.asm):03476                 fcc     'THRU'          ( lowblk highblk -- )
F7F3 F7BA             (        forth.asm):03477                 fdb     LOAD
F7F5 C7               (        forth.asm):03478                 RFCS
F7F6 BDE7FB           (        forth.asm):03479 (7)             jsr     NPOP
F7F9 1F12             (        forth.asm):03480 (4)             tfr     x,y             Y has highblk
F7FB BDE7FB           (        forth.asm):03481 (7)             jsr     NPOP            X has lowblk--both are unsigned numbers
F7FE 103712           (        forth.asm):03482 (4)     @thrlop cmpr    x,y
F801 2401             (        forth.asm):03483 (3)             bhs     @cont           Limit is >= to the loop index
F803 39               (        forth.asm):03484 (4)             rts
F804 3430             (        forth.asm):03485 (4+4)   @cont   pshs    x,y             Backup loop parameters
F806 3610             (        forth.asm):03486                 UCNPUSH                 Current block number to the data stack
F808 8DB8             (        forth.asm):03487                 RFXT    bsr,LOAD+7      XT for LOAD
F80A 3530             (        forth.asm):03488 (4+4)           puls    y,x             Retrieve loop parameters
F80C 3001             (        forth.asm):03489 (4+1)           leax    1,x             Iterate over to the next screen
F80E 20EE             (        forth.asm):03490 (3)             bra     @thrlop
                      (        forth.asm):03491         
F810 83               (        forth.asm):03492         NXTBLK  fcb     $83             79-STANDARD (REF131)
F811 2D2D3E           (        forth.asm):03493                 fcc     '-->'           ( -- )
F814 F7EE             (        forth.asm):03494                 fdb     THRU
F816 C7               (        forth.asm):03495                 RFCS
F817 9E24             (        forth.asm):03496 (4)             ldx     UBLK
F819 3001             (        forth.asm):03497 (4+1)           leax    1,x
F81B DC24             (        forth.asm):03498 (4)     NXTBLK1 ldd     UBLK
F81D 2603             (        forth.asm):03499 (3)             bne     @nfrmb0         Not invoked from block 0 (the console)
                      (        forth.asm):03500         * --> or CONTINUED are being invoked from the console. Flag that condition
                      (        forth.asm):03501         * as a hint to the interpreter so that feedback is provided even if we are
                      (        forth.asm):03502         * back from a block.
F81F 4C               (        forth.asm):03503 (1)             inca                    1 to A
F820 973B             (        forth.asm):03504 (3)             sta     NBCTFB0
F822 9F24             (        forth.asm):03505 (4)     @nfrmb0 stx     UBLK            Update BLK
F824 104F             (        forth.asm):03506 (2)             clrd
F826 DD22             (        forth.asm):03507 (4)             std     UTOIN           0 >IN !
                      (        forth.asm):03508         * Map the new BLK in, interpret code from there.
F828 7EF79D           (        forth.asm):03509                 RFXT    jmp,TERPRET+12  XT for INTERPRET
                      (        forth.asm):03510         
F82B 89               (        forth.asm):03511         CONTIND fcb     $89             79-STANDARD (REF)
F82C 434F4E54494E5545 (        forth.asm):03512                 fcc     'CONTINUED'     ( nextblk -- )
     44
F835 F810             (        forth.asm):03513                 fdb     NXTBLK
F837 C7               (        forth.asm):03514                 RFCS
F838 BDE7FB           (        forth.asm):03515 (7)             jsr     NPOP            NEXTBLK to X
F83B 1037C1           (        forth.asm):03516 (4)             cmpr    0,x             Cannot interpret from block 0!
F83E 26DB             (        forth.asm):03517 (3)             bne     NXTBLK1
F840 C60D             (        forth.asm):03518 (2)             ldb     #13             Illegal argument
F842 BDE76A           (        forth.asm):03519 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):03520         
F845 02               (        forth.asm):03521         MILLIS  fcb     2               79-STANDARD (REF)
F846 4D53             (        forth.asm):03522                 fcc     'MS'            ( mscount -- )
F848 F82B             (        forth.asm):03523                 fdb     CONTIND
F84A C7               (        forth.asm):03524                 RFCS
F84B BDE7FB           (        forth.asm):03525 (7)             jsr     NPOP
F84E 1037C1           (        forth.asm):03526 (4)             cmpr    0,x
F851 2601             (        forth.asm):03527 (3)             bne     MILLIS1
F853 39               (        forth.asm):03528 (4)             rts
F854 CC031A           (        forth.asm):03529 (3)     MILLIS1 ldd     #MSLCNT
F857 104A             (        forth.asm):03530 (2)     @ms2    decd
F859 26FC             (        forth.asm):03531 (3)             bne     @ms2
F85B 301F             (        forth.asm):03532 (4+1)           leax    -1,x
F85D 26F5             (        forth.asm):03533 (3)             bne     MILLIS1
F85F 39               (        forth.asm):03534 (4)             rts
                      (        forth.asm):03535         
F860 04               (        forth.asm):03536         KEYP    fcb     4               ANSI (Facility)
F861 4B45593F         (        forth.asm):03537                 fcc     'KEY?'          ( -- flag )
F865 F845             (        forth.asm):03538                 fdb     MILLIS
F867 C7               (        forth.asm):03539                 RFCS
F868 1FC1             (        forth.asm):03540 (4)             tfr     0,x
F86A 0D42             (        forth.asm):03541 (4)             tst     SERBCNT
F86C 2702             (        forth.asm):03542 (3)             beq     @done
F86E 3001             (        forth.asm):03543 (4+1)           leax    1,x             Return the 79-STANDARD true flag
F870 7EE7ED           (        forth.asm):03544 (3)     @done   jmp     NPUSH
                      (        forth.asm):03545         
F873 03               (        forth.asm):03546         KEY     fcb     3               79-STANDARD (REQ100)
F874 4B4559           (        forth.asm):03547                 fcc     'KEY'
F877 F860             (        forth.asm):03548                 fdb     KEYP
F879 C7               (        forth.asm):03549                 RFCS
F87A BDE2B4           (        forth.asm):03550 (7)             jsr     GETCH
F87D 1F89             (        forth.asm):03551 (4)             tfr     a,b
F87F 4F               (        forth.asm):03552 (1)             clra
F880 1F01             (        forth.asm):03553 (4)             tfr     d,x
F882 7EE7ED           (        forth.asm):03554 (3)             jmp     NPUSH
                      (        forth.asm):03555         
F885 04               (        forth.asm):03556         EMIT    fcb     4               79-STANDARD (REQ207)
F886 454D4954         (        forth.asm):03557                 fcc     'EMIT'
F88A F873             (        forth.asm):03558                 fdb     KEY
F88C C7               (        forth.asm):03559                 RFCS
F88D BDE7FB           (        forth.asm):03560 (7)             jsr     NPOP
F890 1F10             (        forth.asm):03561 (4)             tfr     x,d
F892 1F98             (        forth.asm):03562 (4)             tfr     b,a
F894 7EE2E0           (        forth.asm):03563 (3)             jmp     PUTCH
                      (        forth.asm):03564         
F897 01               (        forth.asm):03565         PLUS    fcb     1               79-STANDARD (REQ121)
F898 2B               (        forth.asm):03566                 fcc     '+'             ( n1 n2 -- sum )
F899 F885             (        forth.asm):03567                 fdb     EMIT
F89B C7               (        forth.asm):03568                 RFCS
F89C BDE49A           (        forth.asm):03569 (7)             jsr     MIN2PST         We need at least two cells stacked up
F89F EC42             (        forth.asm):03570 (5+1)           ldd     2,u             N1
F8A1 E3C4             (        forth.asm):03571 (5+0)           addd    ,u              N2
F8A3 ED42             (        forth.asm):03572 (5+1)           std     2,u             SUM
F8A5 3342             (        forth.asm):03573 (4+1)           leau    2,u             Drop the top cell
F8A7 39               (        forth.asm):03574 (4)             rts
                      (        forth.asm):03575         
F8A8 02               (        forth.asm):03576         ONEP    fcb     2               79-STANDARD (REQ107)
F8A9 312B             (        forth.asm):03577                 fcc     '1+'
F8AB F897             (        forth.asm):03578                 fdb     PLUS
F8AD C7               (        forth.asm):03579                 RFCS
F8AE BDE495           (        forth.asm):03580 (7)             jsr     MIN1PST         We need at least one cell stacked up
F8B1 ECC4             (        forth.asm):03581 (5+0)           ldd     ,u
F8B3 104C             (        forth.asm):03582 (2)             incd
F8B5 EDC4             (        forth.asm):03583 (5+0)           std     ,u
F8B7 39               (        forth.asm):03584 (4)             rts
                      (        forth.asm):03585         
F8B8 02               (        forth.asm):03586         TWOP    fcb     2               79-STANDARD (REQ135)
F8B9 322B             (        forth.asm):03587                 fcc     '2+'            ( n -- n+2 )
F8BB F8A8             (        forth.asm):03588                 fdb     ONEP
F8BD C7               (        forth.asm):03589                 RFCS
F8BE BDE495           (        forth.asm):03590 (7)             jsr     MIN1PST         We need at least one cell stacked up
F8C1 ECC4             (        forth.asm):03591 (5+0)           ldd     ,u
F8C3 C30002           (        forth.asm):03592 (3)             addd    #2
F8C6 EDC4             (        forth.asm):03593 (5+0)           std     ,u
F8C8 39               (        forth.asm):03594 (4)             rts
                      (        forth.asm):03595         
F8C9 01               (        forth.asm):03596         MINUS   fcb     1               79-STANDARD (REQ134)
F8CA 2D               (        forth.asm):03597                 fcc     '-'             ( n1 n2 -- dif )
F8CB F8B8             (        forth.asm):03598                 fdb     TWOP
F8CD C7               (        forth.asm):03599                 RFCS
F8CE BDE49A           (        forth.asm):03600 (7)             jsr     MIN2PST         We need at least two cells stacked up
F8D1 EC42             (        forth.asm):03601 (5+1)           ldd     2,u             N1
F8D3 A3C4             (        forth.asm):03602 (5+0)           subd    ,u              N2
F8D5 ED42             (        forth.asm):03603 (5+1)           std     2,u             DIF
F8D7 3342             (        forth.asm):03604 (4+1)           leau    2,u             Drop the top cell
F8D9 39               (        forth.asm):03605 (4)             rts
                      (        forth.asm):03606         
F8DA 02               (        forth.asm):03607         ONEM    fcb     2               79-STANDARD (REQ105)
F8DB 312D             (        forth.asm):03608                 fcc     '1-'
F8DD F8C9             (        forth.asm):03609                 fdb     MINUS
F8DF C7               (        forth.asm):03610                 RFCS
F8E0 BDE495           (        forth.asm):03611 (7)             jsr     MIN1PST         We need at least one cell stacked up
F8E3 ECC4             (        forth.asm):03612 (5+0)           ldd     ,u
F8E5 104A             (        forth.asm):03613 (2)             decd
F8E7 EDC4             (        forth.asm):03614 (5+0)           std     ,u
F8E9 39               (        forth.asm):03615 (4)             rts
                      (        forth.asm):03616         
F8EA 02               (        forth.asm):03617         TWOM    fcb     2               79-STANDARD (REQ129)
F8EB 322D             (        forth.asm):03618                 fcc     '2-'
F8ED F8DA             (        forth.asm):03619                 fdb     ONEM
F8EF C7               (        forth.asm):03620                 RFCS
F8F0 BDE495           (        forth.asm):03621 (7)             jsr     MIN1PST         We need at least one cell stacked up
F8F3 ECC4             (        forth.asm):03622 (5+0)           ldd     ,u
F8F5 830002           (        forth.asm):03623 (3)             subd    #2
F8F8 EDC4             (        forth.asm):03624 (5+0)           std     ,u
F8FA 39               (        forth.asm):03625 (4)             rts
                      (        forth.asm):03626         
F8FB 01               (        forth.asm):03627         ZEROL   fcb     1               Non-standard
F8FC 30               (        forth.asm):03628                 fcc     '0'
F8FD F8EA             (        forth.asm):03629                 fdb     TWOM
F8FF C7               (        forth.asm):03630                 RFCS
F900 1FC1             (        forth.asm):03631 (4)             tfr     0,x
F902 7EE7ED           (        forth.asm):03632 (3)             jmp     NPUSH
                      (        forth.asm):03633         
F905 01               (        forth.asm):03634         ONEL    fcb     1               Non-standard
F906 31               (        forth.asm):03635                 fcc     '1'
F907 F8FB             (        forth.asm):03636                 fdb     ZEROL
F909 C7               (        forth.asm):03637                 RFCS
F90A 8E0001           (        forth.asm):03638 (3)             ldx     #1
F90D 7EE7ED           (        forth.asm):03639 (3)             jmp     NPUSH
                      (        forth.asm):03640         
F910 01               (        forth.asm):03641         TWOL    fcb     1               Non-standard
F911 32               (        forth.asm):03642                 fcc     '2'
F912 F905             (        forth.asm):03643                 fdb     ONEL
F914 C7               (        forth.asm):03644                 RFCS
F915 8E0002           (        forth.asm):03645 (3)             ldx     #2
F918 7EE7ED           (        forth.asm):03646 (3)             jmp     NPUSH
                      (        forth.asm):03647         
F91B 05               (        forth.asm):03648         SHIFT   fcb     5               79-STANDARD (Ref)
F91C 5348494654       (        forth.asm):03649                 fcc     'SHIFT'
F921 F910             (        forth.asm):03650                 fdb     TWOL
F923 C7               (        forth.asm):03651                 RFCS
F924 BDE49A           (        forth.asm):03652 (7)             jsr     MIN2PST         Two cells need to be stacked up
F927 10A6C4           (        forth.asm):03653 (6+0)           ldw     ,u              Shift bitcount
F92A EC42             (        forth.asm):03654 (5+1)           ldd     2,u             The data itself
F92C 105D             (        forth.asm):03655 (2)     @shftlp tstw
F92E 270E             (        forth.asm):03656 (3)             beq     @shfdon
F930 2D06             (        forth.asm):03657 (3)             blt     @shftrg
F932 1048             (        forth.asm):03658 (2)             lsld                    Shift left (W is positive)
F934 105A             (        forth.asm):03659 (2)             decw
F936 20F4             (        forth.asm):03660 (3)             bra     @shftlp
F938 1044             (        forth.asm):03661 (2)     @shftrg lsrd                    Shift right (W is negative)
F93A 105C             (        forth.asm):03662 (2)             incw
F93C 20EE             (        forth.asm):03663 (3)             bra     @shftlp
F93E ED42             (        forth.asm):03664 (5+1)   @shfdon std     2,u             Return value stored there
F940 3342             (        forth.asm):03665 (4+1)           leau    2,u             Drop one cell from the data stack
F942 39               (        forth.asm):03666 (4)             rts
                      (        forth.asm):03667         
                      (        forth.asm):03668         * Signed multiplication by hardware support.
F943 01               (        forth.asm):03669         MULT    fcb     1               79-STANDARD (REQ138)
F944 2A               (        forth.asm):03670                 fcc     '*'
F945 F91B             (        forth.asm):03671                 fdb     SHIFT
F947 C7               (        forth.asm):03672                 RFCS
F948 BDE49A           (        forth.asm):03673 (7)             jsr     MIN2PST         Two cells need to be stacked up
F94B EC42             (        forth.asm):03674 (5+1)           ldd     2,u
F94D 11AFC4           (        forth.asm):03675 (30+0)          muld    ,u
F950 10A742           (        forth.asm):03676 (6+1)           stw     2,u             Return only the lower 16 bits
F953 3342             (        forth.asm):03677 (4+1)           leau    2,u             Drop one cell from the data stack
F955 39               (        forth.asm):03678 (4)             rts
                      (        forth.asm):03679         
F956 02               (        forth.asm):03680         TWOTIM  fcb     2               79-STANDARD (REF)
F957 322A             (        forth.asm):03681                 fcc     '2*'
F959 F943             (        forth.asm):03682                 fdb     MULT
F95B C7               (        forth.asm):03683                 RFCS
F95C BDE495           (        forth.asm):03684 (7)             jsr     MIN1PST         One cell needs to be stacked up
F95F ECC4             (        forth.asm):03685 (5+0)           ldd     ,u
F961 1048             (        forth.asm):03686 (2)             asld
F963 EDC4             (        forth.asm):03687 (5+0)           std     ,u
F965 39               (        forth.asm):03688 (4)             rts
                      (        forth.asm):03689         
F966 02               (        forth.asm):03690         TWODIV  fcb     2
F967 322F             (        forth.asm):03691                 fcc     '2/'
F969 F956             (        forth.asm):03692                 fdb     TWOTIM
F96B C7               (        forth.asm):03693                 RFCS
F96C BDE495           (        forth.asm):03694 (7)             jsr     MIN1PST         One cell needs to be stacked up
F96F ECC4             (        forth.asm):03695 (5+0)           ldd     ,u
F971 1047             (        forth.asm):03696 (2)             asrd
F973 EDC4             (        forth.asm):03697 (5+0)           std     ,u
F975 39               (        forth.asm):03698 (4)             rts
                      (        forth.asm):03699         
                      (        forth.asm):03700         * /, MOD and /MOD are essentially the same function returning
                      (        forth.asm):03701         * the different parts returned by DIVQ.
                      (        forth.asm):03702         * We use a global variable to distinguish which functionality
                      (        forth.asm):03703         * is being requested:
                      (        forth.asm):03704         * 0: return the modulo and the quotient (/MOD).
                      (        forth.asm):03705         * 1: return the modulo only (MOD).
                      (        forth.asm):03706         * 2: return the quotient only (/).
F976 01               (        forth.asm):03707         DIV     fcb     1               79-STANDARD (REQ178)
F977 2F               (        forth.asm):03708                 fcc     '/'             ( N1 N2 -- N3 [N4] )
F978 F966             (        forth.asm):03709                 fdb     TWODIV
F97A C7               (        forth.asm):03710                 RFCS
F97B 8602             (        forth.asm):03711 (2)             lda     #2
F97D 9731             (        forth.asm):03712 (3)             sta     DIVFCN          Function 2: return only the quotient
F97F BDE49A           (        forth.asm):03713 (7)     DIV1    jsr     MIN2PST         At least two cells need to be stacked up
F982 0F32             (        forth.asm):03714 (5)             clr     F83DIVF         Assume no adjustment required for floored div.
F984 A642             (        forth.asm):03715 (4+1)           lda     2,u             Numerator's MSB
F986 A8C4             (        forth.asm):03716 (4+0)           eora    ,u              Different sign from the denominator's MSB?
F988 2A02             (        forth.asm):03717 (3)             bpl     @divprc         No, proceed to the division code
F98A 0C32             (        forth.asm):03718 (5)             inc     F83DIVF         Numerator and denominator have different signs
                      (        forth.asm):03719         * Division by zero conditions are dealt with through the trap handler.
F98C 104F             (        forth.asm):03720 (2)     @divprc clrd                    Clear the numerator's MSC
F98E 10A642           (        forth.asm):03721 (6+1)           ldw     2,u             Numerator's LSC
F991 2A02             (        forth.asm):03722 (3)             bpl     @dvnsex         Branch if no sign extention is needed
                      (        forth.asm):03723         * Sign extention from W to Q.
F993 1043             (        forth.asm):03724 (2)             comd                    -1 to D (numerator's MSC)
F995 11AEC4           (        forth.asm):03725 (36)    @dvnsex divq    ,u              ,u has the denominator
F998 8D19             (        forth.asm):03726 (6)             bsr     FDIVADJ         Perform floored division adjustment, if needed
F99A 0D31             (        forth.asm):03727 (4)     @no83ad tst     DIVFCN
F99C 2606             (        forth.asm):03728 (3)             bne     @div4
F99E ED42             (        forth.asm):03729 (5+1)           std     2,u             Function 0: return the modulo and the quotient
F9A0 10A7C4           (        forth.asm):03730 (6+0)   @div3   stw     ,u              Function 2: return only the quotient
F9A3 39               (        forth.asm):03731 (4)             rts
F9A4 3342             (        forth.asm):03732 (4+1)   @div4   leau    2,u             Drop one cell from the data stack
F9A6 1F07             (        forth.asm):03733 (4)             tfr     d,v             Backup the modulo
F9A8 9631             (        forth.asm):03734 (3)             lda     DIVFCN
F9AA 8101             (        forth.asm):03735 (2)             cmpa    #1
F9AC 26F2             (        forth.asm):03736 (3)             bne     @div3
F9AE 1F70             (        forth.asm):03737 (4)             tfr     v,d             Restore the modulo
F9B0 EDC4             (        forth.asm):03738 (5+0)           std     ,u              Function 1: return only the modulo
F9B2 39               (        forth.asm):03739 (4)             rts
                      (        forth.asm):03740         
                      (        forth.asm):03741         * Quotient is returned in W, modulo in D but this is symmetric division :-(
                      (        forth.asm):03742         * Need to return a floored division result for compat. with F83 and ANSI impls.
F9B3 104D             (        forth.asm):03743 (2)     FDIVADJ tstd                    Is the remainder zero?
F9B5 2708             (        forth.asm):03744 (3)             beq     @no83ad         Yes. No adjusment required for floored division
F9B7 0D32             (        forth.asm):03745 (4)             tst     F83DIVF         Different signs for numerator and denominator?
F9B9 2704             (        forth.asm):03746 (3)             beq     @no83ad         No. Adjusment not needed for floored division
                      (        forth.asm):03747         * Adjusment for F83 floored division.
F9BB 105A             (        forth.asm):03748 (2)             decw                    Decrement the quotient
F9BD E3C4             (        forth.asm):03749 (5+0)           addd    ,u              Add the denominator to the modulo
F9BF 39               (        forth.asm):03750 (4)     @no83ad rts
                      (        forth.asm):03751         
F9C0 03               (        forth.asm):03752         MOD     fcb     3               79-STANDARD (REQ104)
F9C1 4D4F44           (        forth.asm):03753                 fcc     'MOD'           ( N1 N2 -- N3 )
F9C4 F976             (        forth.asm):03754                 fdb     DIV
F9C6 C7               (        forth.asm):03755                 RFCS
F9C7 8601             (        forth.asm):03756 (2)             lda     #1
F9C9 9731             (        forth.asm):03757 (3)             sta     DIVFCN
F9CB 20B2             (        forth.asm):03758 (3)             bra     DIV1
                      (        forth.asm):03759         
F9CD 04               (        forth.asm):03760         MDIV    fcb     4               79-STANDARD (REQ198)
F9CE 2F4D4F44         (        forth.asm):03761                 fcc     '/MOD'          ( N1 N2 -- N3 N4 )
F9D2 F9C0             (        forth.asm):03762                 fdb     MOD
F9D4 C7               (        forth.asm):03763                 RFCS
F9D5 0F31             (        forth.asm):03764 (5)             clr     DIVFCN
F9D7 20A6             (        forth.asm):03765 (3)             bra     DIV1
                      (        forth.asm):03766         
F9D9 02               (        forth.asm):03767         STRSLSH fcb     2               79-STANDARD (REQ220)
F9DA 2A2F             (        forth.asm):03768                 fcc     '*/'            ( N1 N2 N3 -- N4 [N5] )
F9DC F9CD             (        forth.asm):03769                 fdb     MDIV
F9DE C7               (        forth.asm):03770                 RFCS
F9DF 8601             (        forth.asm):03771 (2)             lda     #1
F9E1 9733             (        forth.asm):03772 (3)             sta     STSLFCN
F9E3 BDE49F           (        forth.asm):03773 (7)     STRSL1  jsr     MIN3PST         Three cells need to be stacked up
F9E6 0F32             (        forth.asm):03774 (5)             clr     F83DIVF         Assume no adjustment required for floored div.
                      (        forth.asm):03775         * Division by zero conditions are dealt with through the trap handler.
F9E8 EC44             (        forth.asm):03776 (5+1)           ldd     4,u             N1
F9EA 11AF42           (        forth.asm):03777 (30+1)          muld    2,u             N2 (N1 * N2 -> D:W)
F9ED 3402             (        forth.asm):03778 (4+1)           pshs    a               Product's MSC's MSB
F9EF A8C4             (        forth.asm):03779 (4+0)           eora    ,u              Different sign from the denominator's?
F9F1 2A02             (        forth.asm):03780 (3)             bpl     @stslpr         No. Floored division adjustment not needed
F9F3 0C32             (        forth.asm):03781 (5)             inc     F83DIVF
F9F5 3502             (        forth.asm):03782 (4+1)   @stslpr puls    a
F9F7 11AEC4           (        forth.asm):03783 (36)            divq    ,u              N3
F9FA 8DB7             (        forth.asm):03784 (6)             bsr     FDIVADJ         Perform floored division adjustment, if needed
F9FC 3342             (        forth.asm):03785 (4+1)           leau    2,u
F9FE 0D33             (        forth.asm):03786 (4)             tst     STSLFCN
FA00 2606             (        forth.asm):03787 (3)             bne     @strsl2         Just the quotient, Ma'am!
FA02 ED42             (        forth.asm):03788 (5+1)           std     2,u             N4: the modulo
FA04 10A7C4           (        forth.asm):03789 (6+0)           stw     ,u              N5: the quotient
FA07 39               (        forth.asm):03790 (4)             rts
FA08 3342             (        forth.asm):03791 (4+1)   @strsl2 leau    2,u
FA0A 10A7C4           (        forth.asm):03792 (6+0)           stw     ,u              N4
FA0D 39               (        forth.asm):03793 (4)             rts
                      (        forth.asm):03794         
FA0E 05               (        forth.asm):03795         STRSLMD fcb     5               79-STANDARD (REQ192)
FA0F 2A2F4D4F44       (        forth.asm):03796                 fcc     '*/MOD'         ( N1 N2 N3 -- N4 N5 )
FA14 F9D9             (        forth.asm):03797                 fdb     STRSLSH
FA16 C7               (        forth.asm):03798                 RFCS
FA17 0F33             (        forth.asm):03799 (5)             clr     STSLFCN
FA19 20C8             (        forth.asm):03800 (3)             bra     STRSL1
                      (        forth.asm):03801         
                      (        forth.asm):03802         * Returns the current value of the Sreg register (informational only).
                      (        forth.asm):03803         * This word is either called (JSROPC) or jumped to (JMPOPC), as a result
                      (        forth.asm):03804         * of the tail call optimization process. There is no way to tell the
                      (        forth.asm):03805         * difference. Here we assume that it is called and return Sreg.
FA1B 01               (        forth.asm):03806         SYSSTK  fcb     1               Non-standard
FA1C 53               (        forth.asm):03807                 fcc     'S'
FA1D FA0E             (        forth.asm):03808                 fdb     STRSLMD
FA1F C7               (        forth.asm):03809                 RFCS
FA20 1F41             (        forth.asm):03810 (4)             tfr     s,x
FA22 7EE7ED           (        forth.asm):03811 (3)             jmp     NPUSH
                      (        forth.asm):03812         
FA25 02               (        forth.asm):03813         SYSSTAT fcb     2
FA26 5340             (        forth.asm):03814                 fcc     'S@'
FA28 FA1B             (        forth.asm):03815                 fdb     SYSSTK
FA2A C7               (        forth.asm):03816                 RFCS
FA2B AEE4             (        forth.asm):03817 (5+0)           ldx     ,s
FA2D 7EE7ED           (        forth.asm):03818 (3)             jmp     NPUSH
                      (        forth.asm):03819         
FA30 07               (        forth.asm):03820         PAYLOAD fcb     7               Non standard
FA31 5041594C4F4144   (        forth.asm):03821                 fcc     'PAYLOAD'       ( -- len ) where len is the code payload
FA38 FA25             (        forth.asm):03822                 fdb     SYSSTAT         of the word located by FIND (or NULL)
FA3A C7               (        forth.asm):03823                 RFCS
FA3B 9E10             (        forth.asm):03824 (4)             ldx     FNDPLD          Code payload reported by FIND
FA3D 7EE7ED           (        forth.asm):03825 (3)             jmp     NPUSH
                      (        forth.asm):03826         
                      (        forth.asm):03827         * Differences from the original code:
                      (        forth.asm):03828         * - display number in HEX rather than in the current base.
                      (        forth.asm):03829         * - dropped feat: the original stuff was interactively paged by 15 line screens.
                      (        forth.asm):03830         * - added feat: display code implementation payload.
                      (        forth.asm):03831         * - added feat: display the immedediate and define (compile time only) flags.
                      (        forth.asm):03832         * - added feat: display the forgettable status (R/W). Everything user
                      (        forth.asm):03833         *   defined is forgettable (i.e. RAM resident).
FA40 05               (        forth.asm):03834         VLIST   fcb     5               Non-standard
FA41 564C495354       (        forth.asm):03835                 fcc     'VLIST'         ( -- )
FA46 FA30             (        forth.asm):03836                 fdb     PAYLOAD
FA48 C7               (        forth.asm):03837                 RFCS
FA49 9E08             (        forth.asm):03838 (4)             ldx     DICEND
FA4B 9F16             (        forth.asm):03839 (4)             stx     VLPRVEP         Last word code address + 1
FA4D 9E06             (        forth.asm):03840 (4)             ldx     LSTWAD
FA4F 9F18             (        forth.asm):03841 (4)     @vlist1 stx     VLPRVHD         Last word header pointer
FA51 108E03EA         (        forth.asm):03842 (4)             ldy     #TBUFF
FA55 E680             (        forth.asm):03843 (4+1)           ldb     ,x+
FA57 3404             (        forth.asm):03844 (4+1)           pshs    b
FA59 C41F             (        forth.asm):03845 (2)             andb    #WRLNMSK        Mask out word length
FA5B 4F               (        forth.asm):03846 (1)             clra
FA5C 3404             (        forth.asm):03847 (4+1)           pshs    b               Preserve word length
FA5E 1F06             (        forth.asm):03848 (4)             tfr     d,w
FA60 113812           (        forth.asm):03849 (6+?)           tfm     x+,y+
FA63 3502             (        forth.asm):03850 (4+1)           puls    a               Restore word length to A
FA65 C620             (        forth.asm):03851 (2)             ldb     #WRLNMSK+1
FA67 103289           (        forth.asm):03852 (4)             subr    a,b             Number of spaces we want to emit
FA6A 8620             (        forth.asm):03853 (2)             lda     #SP
FA6C A7A0             (        forth.asm):03854 (4+1)   @vlist2 sta     ,y+
FA6E 5A               (        forth.asm):03855 (1)             decb
FA6F 26FB             (        forth.asm):03856 (3)             bne     @vlist2
FA71 6FA0             (        forth.asm):03857 (6+1)           clr     ,y+             Terminate formatted output string
FA73 3410             (        forth.asm):03858 (4+2)           pshs    x               Address of the current word backlink address
FA75 BDE300           (        forth.asm):03859 (7)             jsr     PUTCR           Carriage return is output before anything else
FA78 8E03EA           (        forth.asm):03860 (3)             ldx     #TBUFF
FA7B BDE2F3           (        forth.asm):03861 (7)             jsr     PUTS            Output word name formatted on 17 chars + SP
FA7E AEE4             (        forth.asm):03862 (5+0)           ldx     ,s
                      (        forth.asm):03863                 IFNE    RELFEAT
FA80 3003             (        forth.asm):03864 (4+1)           leax    3,x             Word XT to X (Skip backlink and checksum)
                      (        forth.asm):03865                 ELSE
                      (        forth.asm):03866                 leax    2,x             Word XT to X (Skip backlink)
                      (        forth.asm):03867                 ENDC                    RELFEAT
FA82 1F10             (        forth.asm):03868 (4)             tfr     x,d             CVNSTR depends on UBASE and we want HEX output
FA84 108E03EA         (        forth.asm):03869 (4)             ldy     #TBUFF
FA88 BDE195           (        forth.asm):03870 (7)             jsr     HDMP4           So we use trusted debugging code
FA8B 8E03EA           (        forth.asm):03871 (3)             ldx     #TBUFF
FA8E BDE2F3           (        forth.asm):03872 (7)             jsr     PUTS
                      (        forth.asm):03873         * Now to display word implementation length.
                      (        forth.asm):03874         * Implementation code length is from ,s+3 (or 2) to VLPRVEP
FA91 8609             (        forth.asm):03875 (2)             lda     #HT
FA93 BDE2E0           (        forth.asm):03876 (7)             jsr     PUTCH
FA96 9E16             (        forth.asm):03877 (4)             ldx     VLPRVEP
FA98 10AEE4           (        forth.asm):03878 (6+0)           ldy     ,s
                      (        forth.asm):03879                 IFNE    RELFEAT
FA9B 3123             (        forth.asm):03880 (4+1)           leay    3,y             Current word code entry address
                      (        forth.asm):03881                 ELSE
                      (        forth.asm):03882                 leay    2,y             Current word code entry address
                      (        forth.asm):03883                 ENDC                    RELFEAT
FA9D 103221           (        forth.asm):03884 (4)             subr    y,x
FAA0 1F10             (        forth.asm):03885 (4)             tfr     x,d
FAA2 108E03EA         (        forth.asm):03886 (4)             ldy     #TBUFF
FAA6 BDE195           (        forth.asm):03887 (7)             jsr     HDMP4
FAA9 8E03EA           (        forth.asm):03888 (3)             ldx     #TBUFF
FAAC BDE2F3           (        forth.asm):03889 (7)             jsr     PUTS
                      (        forth.asm):03890         # Display attribute flags.
FAAF 8609             (        forth.asm):03891 (2)             lda     #HT
FAB1 BDE2E0           (        forth.asm):03892 (7)             jsr     PUTCH
FAB4 8E03EA           (        forth.asm):03893 (3)             ldx     #TBUFF
FAB7 E662             (        forth.asm):03894 (4+1)           ldb     2,s             Word attribute to B
FAB9 862D             (        forth.asm):03895 (2)             lda     #'-
FABB C580             (        forth.asm):03896 (2)             bitb    #IMDFLM         Check for immediate
FABD 2702             (        forth.asm):03897 (3)             beq     @vlist4
FABF 8649             (        forth.asm):03898 (2)             lda     #'I
FAC1 A780             (        forth.asm):03899 (4+1)   @vlist4 sta     ,x+
FAC3 862D             (        forth.asm):03900 (2)             lda     #'-
FAC5 C540             (        forth.asm):03901 (2)             bitb    #DEFFLM         Check for define (compile time only)
FAC7 2702             (        forth.asm):03902 (3)             beq     @vlist5
FAC9 8643             (        forth.asm):03903 (2)             lda     #'C
FACB A780             (        forth.asm):03904 (4+1)   @vlist5 sta     ,x+
                      (        forth.asm):03905                 IFNE    RELFEAT
FACD 862D             (        forth.asm):03906 (2)             lda     #'-
FACF C520             (        forth.asm):03907 (2)             bitb    #MONFLM         Check for monitored status
FAD1 2702             (        forth.asm):03908 (3)             beq     @vlst51
FAD3 864D             (        forth.asm):03909 (2)             lda     #'M
FAD5 A780             (        forth.asm):03910 (4+1)   @vlst51 sta     ,x+
                      (        forth.asm):03911                 ENDC                    RELFEAT
                      (        forth.asm):03912         * Check for forgettable also. In ROM => R else W unless we just processed '@'.
FAD7 8652             (        forth.asm):03913 (2)             lda     #'R
FAD9 10AEE4           (        forth.asm):03914 (6+0)           ldy     ,s
                      (        forth.asm):03915                 IFNE    RELFEAT
FADC 3123             (        forth.asm):03916 (4+1)           leay    3,y             Word entry point to Y
                      (        forth.asm):03917                 ELSE
                      (        forth.asm):03918                 leay    2,y             Word entry point to Y
                      (        forth.asm):03919                 ENDC                    RELFEAT
FADE 108C0C65         (        forth.asm):03920 (4)             cmpy    #RAMFTCH        @ in RAM is unforgettable
FAE2 2708             (        forth.asm):03921 (3)             beq     @vlist6
FAE4 108CE000         (        forth.asm):03922 (4)             cmpy    #ROMSTRT        as are all ROM resident words
FAE8 2402             (        forth.asm):03923 (3)             bcc     @vlist6
FAEA 8657             (        forth.asm):03924 (2)             lda     #'W
FAEC A780             (        forth.asm):03925 (4+1)   @vlist6 sta     ,x+
FAEE 6F84             (        forth.asm):03926 (6+0)           clr     ,x
FAF0 8E03EA           (        forth.asm):03927 (3)             ldx     #TBUFF
FAF3 BDE2F3           (        forth.asm):03928 (7)             jsr     PUTS
                      (        forth.asm):03929         * The point at which VLPRVHD==WDICSPC is a singularity (RAM to ROM transition).
FAF6 9E18             (        forth.asm):03930 (4)             ldx     VLPRVHD
FAF8 8C0C60           (        forth.asm):03931 (3)             cmpx    #WDICSPC
FAFB 2608             (        forth.asm):03932 (3)             bne     @vlist7
FAFD 8EFDD3           (        forth.asm):03933 (3)             ldx     #QMARK          Word just before @ (ROM flavor)
FB00 9F18             (        forth.asm):03934 (4)             stx     VLPRVHD
FB02 8EFDDE           (        forth.asm):03935 (3)             ldx     #THEEND
FB05 9F16             (        forth.asm):03936 (4)     @vlist7 stx     VLPRVEP
FB07 3510             (        forth.asm):03937 (4+2)           puls    x
FB09 3504             (        forth.asm):03938 (4+1)           puls    b
FB0B AE84             (        forth.asm):03939 (5+0)           ldx     ,x              Point to previous word
FB0D 1026FF3E         (        forth.asm):03940 (5)             lbne    @vlist1
FB11 39               (        forth.asm):03941 (4)             rts
                      (        forth.asm):03942         
FB12 05               (        forth.asm):03943         STATE   fcb     5
FB13 5354415445       (        forth.asm):03944                 fcc     'STATE'
FB18 FA40             (        forth.asm):03945                 fdb     VLIST
FB1A C7               (        forth.asm):03946                 RFCS
FB1B 8E0120           (        forth.asm):03947 (3)             ldx     #USTATE
FB1E 7EE7ED           (        forth.asm):03948 (3)             jmp     NPUSH
                      (        forth.asm):03949         
FB21 04               (        forth.asm):03950         BASE    fcb     4               79-STANDARD (REQ115)
FB22 42415345         (        forth.asm):03951                 fcc     'BASE'
FB26 FB12             (        forth.asm):03952                 fdb     STATE
FB28 C7               (        forth.asm):03953                 RFCS
FB29 8E011E           (        forth.asm):03954 (3)             ldx     #UBASE
FB2C 7EE7ED           (        forth.asm):03955 (3)             jmp     NPUSH
                      (        forth.asm):03956         
FB2F 03               (        forth.asm):03957         BIN     fcb     3               Non-standard
FB30 42494E           (        forth.asm):03958                 fcc     'BIN'
FB33 FB21             (        forth.asm):03959                 fdb     BASE
FB35 C7               (        forth.asm):03960                 RFCS
FB36 CC0002           (        forth.asm):03961 (3)             ldd     #2
FB39 DD1E             (        forth.asm):03962 (4)             std     UBASE
FB3B 39               (        forth.asm):03963 (4)             rts
                      (        forth.asm):03964         
FB3C 05               (        forth.asm):03965         OCTAL   fcb     5               79-STANDARD (REF)
FB3D 4F4354414C       (        forth.asm):03966                 fcc     'OCTAL'
FB42 FB2F             (        forth.asm):03967                 fdb     BIN
FB44 C7               (        forth.asm):03968                 RFCS
FB45 CC0008           (        forth.asm):03969 (3)             ldd     #8
FB48 DD1E             (        forth.asm):03970 (4)             std     UBASE
FB4A 39               (        forth.asm):03971 (4)             rts
                      (        forth.asm):03972         
FB4B 07               (        forth.asm):03973         DECIMAL fcb     7               79-STANDARD (REQ197)
FB4C 444543494D414C   (        forth.asm):03974                 fcc     'DECIMAL'
FB53 FB3C             (        forth.asm):03975                 fdb     OCTAL
FB55 C7               (        forth.asm):03976                 RFCS
FB56 CC000A           (        forth.asm):03977 (3)             ldd     #10
FB59 DD1E             (        forth.asm):03978 (4)             std     UBASE
FB5B 39               (        forth.asm):03979 (4)             rts
                      (        forth.asm):03980         
FB5C 03               (        forth.asm):03981         HEX     fcb     3               79-STANDARD (REF162)
FB5D 484558           (        forth.asm):03982                 fcc     'HEX'
FB60 FB4B             (        forth.asm):03983                 fdb     DECIMAL
FB62 C7               (        forth.asm):03984                 RFCS
FB63 CC0010           (        forth.asm):03985 (3)             ldd     #16
FB66 DD1E             (        forth.asm):03986 (4)             std     UBASE
FB68 39               (        forth.asm):03987 (4)             rts
                      (        forth.asm):03988         
FB69 02               (        forth.asm):03989         DOTTICK fcb     2               Non-standard (SwiftForth)
FB6A 2E27             (        forth.asm):03990                 fcb     $2E,$27         .' ( memaddr -- )
FB6C FB5C             (        forth.asm):03991                 fdb     HEX
FB6E C7               (        forth.asm):03992                 RFCS
                      (        forth.asm):03993                 IFNE    SSDFEAT
FB6F BDE7FB           (        forth.asm):03994 (7)             jsr     NPOP
FB72 1F12             (        forth.asm):03995 (4)             tfr     x,y
FB74 8E039A           (        forth.asm):03996 (3)             ldx     #HEXBUF
FB77 BDE62A           (        forth.asm):03997 (7)             jsr     FINDSYM
                      (        forth.asm):03998                 ELSE
                      (        forth.asm):03999                 lda     #'$
                      (        forth.asm):04000                 jsr     PUTCH
                      (        forth.asm):04001                 jsr     NPOP
                      (        forth.asm):04002                 tfr     x,d
                      (        forth.asm):04003                 ldy     #HEXBUF
                      (        forth.asm):04004                 jsr     HDMP4
                      (        forth.asm):04005                 ENDC                    SSDFEAT
FB7A 8E039A           (        forth.asm):04006 (3)             ldx     #HEXBUF
FB7D 7EE2F3           (        forth.asm):04007 (3)             jmp     PUTS
                      (        forth.asm):04008         
                      (        forth.asm):04009         * Display a dump of the data stack in the current BASE. In Leo Brodie's
                      (        forth.asm):04010         * "Starting Forth" the data stack is printed from the bottom up. So it is here.
FB80 02               (        forth.asm):04011         DDUMP   fcb     2               ANSI (Optional "Programming tools" word set)
FB81 2E53             (        forth.asm):04012                 fcc     '.S'            ( -- )
FB83 FB69             (        forth.asm):04013                 fdb     DOTTICK
FB85 C7               (        forth.asm):04014                 RFCS
FB86 CC0296           (        forth.asm):04015 (3)             ldd     #NSTBOT
FB89 103230           (        forth.asm):04016 (4)             subr    u,d
FB8C 1044             (        forth.asm):04017 (2)             lsrd                    DEPTH is in D
FB8E 272A             (        forth.asm):04018 (3)             beq     @ndump3         Data stack is empty
FB90 3440             (        forth.asm):04019 (4+2)           pshs    u
FB92 CE0296           (        forth.asm):04020 (3)             ldu     #NSTBOT         Pointing to the bottom of the data stack
FB95 8601             (        forth.asm):04021 (2)             lda     #1
FB97 9737             (        forth.asm):04022 (3)             sta     CVISSGN         Force a signed number conversion
FB99 3404             (        forth.asm):04023 (4+1)   @ndump1 pshs    b
FB9B AEC3             (        forth.asm):04024 (5+2)           ldx     ,--u
FB9D BDE441           (        forth.asm):04025 (7)             jsr     CVNSTR
FBA0 8E03EA           (        forth.asm):04026 (3)             ldx     #TBUFF
                      (        forth.asm):04027         # Skip leading spaces.
FBA3 A680             (        forth.asm):04028 (4+1)   @ndump2 lda     ,x+
FBA5 8120             (        forth.asm):04029 (2)             cmpa    #SP
FBA7 27FA             (        forth.asm):04030 (3)             beq     @ndump2
FBA9 301F             (        forth.asm):04031 (4+1)           leax    -1,x
FBAB BDE2F3           (        forth.asm):04032 (7)             jsr     PUTS
FBAE 8620             (        forth.asm):04033 (2)             lda     #SP
FBB0 BDE2E0           (        forth.asm):04034 (7)             jsr     PUTCH
FBB3 3504             (        forth.asm):04035 (4+1)           puls    b
FBB5 5A               (        forth.asm):04036 (1)             decb
FBB6 26E1             (        forth.asm):04037 (3)             bne     @ndump1
FBB8 3540             (        forth.asm):04038 (4+2)           puls    u
FBBA 39               (        forth.asm):04039 (4)     @ndump3 rts
                      (        forth.asm):04040         
FBBB 04               (        forth.asm):04041         QRYDUP  fcb     4               79-STANDARD (REQ184)
FBBC 3F445550         (        forth.asm):04042                 fcc     '?DUP'
FBC0 FB80             (        forth.asm):04043                 fdb     DDUMP
FBC2 C7               (        forth.asm):04044                 RFCS
FBC3 BDE7FB           (        forth.asm):04045 (7)             jsr     NPOP
FBC6 3610             (        forth.asm):04046                 UCNPUSH                 Push back the original parameter
FBC8 1037C1           (        forth.asm):04047 (4)             cmpr    0,x
FBCB 2601             (        forth.asm):04048 (3)             bne     @qrydp1
FBCD 39               (        forth.asm):04049 (4)             rts
FBCE 7EE7ED           (        forth.asm):04050 (3)     @qrydp1 jmp     NPUSH           And DUP if NZ
                      (        forth.asm):04051         
FBD1 04               (        forth.asm):04052         TUCK    fcb     4               ANSI (Core ext)
FBD2 5455434B         (        forth.asm):04053                 fcc     'TUCK'          ( x1 x2 -- x2 x1 x2 ) i.e. SWAP OVER
FBD6 FBBB             (        forth.asm):04054                 fdb     QRYDUP
FBD8 C7               (        forth.asm):04055                 RFCS
FBD9 8D2F             (        forth.asm):04056                 RFXT    bsr,SWAP+7      XT for SWAP
FBDB 2073             (        forth.asm):04057                 RFXT    bra,OVER+7      XT for OVER
                      (        forth.asm):04058         
FBDD 03               (        forth.asm):04059         NIP     fcb     3               ANSI (Core ext)
FBDE 4E4950           (        forth.asm):04060                 fcc     'NIP'           ( x1 x2 -- x2 ) i.e. SWAP DROP
FBE1 FBD1             (        forth.asm):04061                 fdb     TUCK
FBE3 C7               (        forth.asm):04062                 RFCS
FBE4 8D24             (        forth.asm):04063                 RFXT    bsr,SWAP+7      XT for SWAP
FBE6 2017             (        forth.asm):04064                 RFXT    bra,DROP+7      XT for DROP
                      (        forth.asm):04065         
FBE8 03               (        forth.asm):04066         DUP     fcb     3               79-STANDARD (REQ205)
FBE9 445550           (        forth.asm):04067                 fcc     'DUP'
FBEC FBDD             (        forth.asm):04068                 fdb     NIP
FBEE C7               (        forth.asm):04069                 RFCS
FBEF BDE495           (        forth.asm):04070 (7)             jsr     MIN1PST         At least one cell needs to be stacked up
FBF2 AEC4             (        forth.asm):04071 (5+0)           ldx     ,u
FBF4 7EE7ED           (        forth.asm):04072 (3)             jmp     NPUSH
                      (        forth.asm):04073         
FBF7 04               (        forth.asm):04074         DROP    fcb     4               79-STANDARD (REQ233)
FBF8 44524F50         (        forth.asm):04075                 fcc     'DROP'
FBFC FBE8             (        forth.asm):04076                 fdb     DUP
FBFE C7               (        forth.asm):04077                 RFCS
FBFF 7EE7FB           (        forth.asm):04078 (3)             jmp     NPOP
                      (        forth.asm):04079         
FC02 04               (        forth.asm):04080         SWAP    fcb     4               79-STANDARD (REQ230)
FC03 53574150         (        forth.asm):04081                 fcc     'SWAP'
FC07 FBF7             (        forth.asm):04082                 fdb     DROP
FC09 C7               (        forth.asm):04083                 RFCS
FC0A BDE49A           (        forth.asm):04084 (7)             jsr     MIN2PST         We need at least two cells stacked up
FC0D 10ECC4           (        forth.asm):04085 (8+0)           ldq     ,u              In place SWAP
FC10 1E06             (        forth.asm):04086 (5)             exg     d,w
FC12 10EDC4           (        forth.asm):04087 (8+0)           stq     ,u
FC15 39               (        forth.asm):04088 (4)             rts
                      (        forth.asm):04089         
FC16 04               (        forth.asm):04090         PICK    fcb     4
FC17 5049434B         (        forth.asm):04091                 fcc     'PICK'
FC1B FC02             (        forth.asm):04092                 fdb     SWAP
FC1D C7               (        forth.asm):04093                 RFCS
FC1E BDE7FB           (        forth.asm):04094 (7)             jsr     NPOP
FC21 CC0296           (        forth.asm):04095 (3)     PICK1   ldd     #NSTBOT
FC24 103230           (        forth.asm):04096 (4)             subr    u,d
FC27 1044             (        forth.asm):04097 (2)             lsrd                    D has the data stack depth in cells
FC29 103710           (        forth.asm):04098 (4)             cmpr    x,d
FC2C 2405             (        forth.asm):04099 (3)             bcc     @pick1
FC2E C60D             (        forth.asm):04100 (2)     ERRPCK  ldb     #13             Argument is greater than DEPTH
FC30 BDE76A           (        forth.asm):04101 (7)             jsr     ERRHDLR         No return
FC33 1F10             (        forth.asm):04102 (4)     @pick1  tfr     x,d
FC35 104D             (        forth.asm):04103 (2)             tstd
FC37 27F5             (        forth.asm):04104 (3)             beq     ERRPCK
FC39 104A             (        forth.asm):04105 (2)             decd                    Minus 1, unlike in the Z80 implementation
FC3B 1048             (        forth.asm):04106 (2)             lsld                    Times 2
FC3D 1F31             (        forth.asm):04107 (4)             tfr     u,x
FC3F 308B             (        forth.asm):04108 (4+2)           leax    d,x
FC41 1F12             (        forth.asm):04109 (4)             tfr     x,y             For the sake of ROLL's implementation
FC43 AE84             (        forth.asm):04110 (5+0)           ldx     ,x
FC45 3610             (        forth.asm):04111                 UCNPUSH
FC47 39               (        forth.asm):04112 (4)             rts
                      (        forth.asm):04113         
FC48 04               (        forth.asm):04114         OVER    fcb     4
FC49 4F564552         (        forth.asm):04115                 fcc     'OVER'
FC4D FC16             (        forth.asm):04116                 fdb     PICK
FC4F C7               (        forth.asm):04117                 RFCS
FC50 8E0002           (        forth.asm):04118 (3)             ldx     #2
FC53 20CC             (        forth.asm):04119 (3)             bra     PICK1
                      (        forth.asm):04120         
FC55 04               (        forth.asm):04121         ROLL    fcb     4
FC56 524F4C4C         (        forth.asm):04122                 fcc     'ROLL'
FC5A FC48             (        forth.asm):04123                 fdb     OVER
FC5C C7               (        forth.asm):04124                 RFCS
FC5D BDE7FB           (        forth.asm):04125 (7)             jsr     NPOP
FC60 1F16             (        forth.asm):04126 (4)     ROLL1   tfr     x,w
FC62 8DBD             (        forth.asm):04127 (6)             bsr     PICK1           Let PICK do the error handling
FC64 3121             (        forth.asm):04128 (4+1)           leay    1,y             Point to the LSB since we're moving backward
FC66 1F21             (        forth.asm):04129 (4)             tfr     y,x
FC68 301E             (        forth.asm):04130 (4+1)           leax    -2,x
FC6A 103066           (        forth.asm):04131 (4)             addr    w,w
FC6D 113912           (        forth.asm):04132 (6+?)           tfm     x-,y-
FC70 7EE7FB           (        forth.asm):04133 (3)             jmp     NPOP
                      (        forth.asm):04134         
FC73 03               (        forth.asm):04135         ROT     fcb     3
FC74 524F54           (        forth.asm):04136                 fcc     'ROT'
FC77 FC55             (        forth.asm):04137                 fdb     ROLL
FC79 C7               (        forth.asm):04138                 RFCS
FC7A 8E0003           (        forth.asm):04139 (3)             ldx     #3
FC7D 20E1             (        forth.asm):04140 (3)             bra     ROLL1
                      (        forth.asm):04141         
FC7F 04               (        forth.asm):04142         MROT    fcb     4
FC80 2D524F54         (        forth.asm):04143                 fcc     '-ROT'
FC84 FC73             (        forth.asm):04144                 fdb     ROT
FC86 C7               (        forth.asm):04145                 RFCS
FC87 8DF1             (        forth.asm):04146                 RFXT    bsr,ROT+6       XT for ROT
FC89 20EF             (        forth.asm):04147                 RFXT    bra,ROT+6       XT for ROT
                      (        forth.asm):04148         
FC8B 02               (        forth.asm):04149         CCOMMA  fcb     2               79-STANDARD (REF)
FC8C 432C             (        forth.asm):04150                 fcc     'C,'
FC8E FC7F             (        forth.asm):04151                 fdb     MROT
FC90 C7               (        forth.asm):04152                 RFCS
FC91 BDE7FB           (        forth.asm):04153 (7)             jsr     NPOP
FC94 1F10             (        forth.asm):04154 (4)             tfr     x,d
FC96 109E08           (        forth.asm):04155 (5)             ldy     DICEND
FC99 E7A0             (        forth.asm):04156 (4+1)           stb     ,y+
FC9B 109F08           (        forth.asm):04157 (5)             sty     DICEND
FC9E 39               (        forth.asm):04158 (4)             rts
                      (        forth.asm):04159         
FC9F 01               (        forth.asm):04160         COMMA   fcb     1               79-STANDARD (REQ143)
FCA0 2C               (        forth.asm):04161                 fcc     ','
FCA1 FC8B             (        forth.asm):04162                 fdb     CCOMMA
FCA3 C7               (        forth.asm):04163                 RFCS
FCA4 BDE7FB           (        forth.asm):04164 (7)             jsr     NPOP
FCA7 109E08           (        forth.asm):04165 (5)             ldy     DICEND
FCAA AFA1             (        forth.asm):04166 (5+2)           stx     ,y++
FCAC 109F08           (        forth.asm):04167 (5)             sty     DICEND
FCAF 39               (        forth.asm):04168 (4)             rts
                      (        forth.asm):04169         
FCB0 05               (        forth.asm):04170         ALLOT   fcb     5               79-STANDARD (REQ154)
FCB1 414C4C4F54       (        forth.asm):04171                 fcc     'ALLOT'         ( signedbytecount -- )
FCB6 FC9F             (        forth.asm):04172                 fdb     COMMA
FCB8 C7               (        forth.asm):04173                 RFCS
FCB9 BDE7FB           (        forth.asm):04174 (7)             jsr     NPOP
FCBC DC08             (        forth.asm):04175 (4)             ldd     DICEND
FCBE 308B             (        forth.asm):04176 (4+2)           leax    d,x
FCC0 9F08             (        forth.asm):04177 (4)             stx     DICEND
FCC2 39               (        forth.asm):04178 (4)             rts
                      (        forth.asm):04179         
FCC3 04               (        forth.asm):04180         FILL    fcb     4               79-STANDARD (REQ234)
FCC4 46494C4C         (        forth.asm):04181                 fcc     'FILL'
FCC8 FCB0             (        forth.asm):04182                 fdb     ALLOT
FCCA C7               (        forth.asm):04183                 RFCS
FCCB BDE7FB           (        forth.asm):04184 (7)             jsr     NPOP
FCCE 1F16             (        forth.asm):04185 (4)             tfr     x,w             Byte fill value to W
FCD0 BDE7FB           (        forth.asm):04186 (7)     FILL1   jsr     NPOP
FCD3 1F12             (        forth.asm):04187 (4)             tfr     x,y             Byte count to Y
FCD5 1E26             (        forth.asm):04188 (5)             exg     y,w             Byte count to W, byte fill value to Y
FCD7 BDE7FB           (        forth.asm):04189 (7)             jsr     NPOP            Destination address to X
FCDA 105D             (        forth.asm):04190 (2)             tstw
FCDC 2F0B             (        forth.asm):04191 (3)             ble     @filend
FCDE 1F20             (        forth.asm):04192 (4)             tfr     y,d             Byte fill value to B
FCE0 E784             (        forth.asm):04193 (4+0)           stb     ,x
FCE2 105A             (        forth.asm):04194 (2)             decw
FCE4 3101             (        forth.asm):04195 (4+1)           leay    1,x
FCE6 113812           (        forth.asm):04196 (6+?)           tfm     x+,y+
FCE9 39               (        forth.asm):04197 (4)     @filend rts
                      (        forth.asm):04198         
FCEA 06               (        forth.asm):04199         BLANKS  fcb     6               79-STANDARD (REF152)
FCEB 424C414E4B53     (        forth.asm):04200                 fcc     'BLANKS'
FCF1 FCC3             (        forth.asm):04201                 fdb     FILL
FCF3 C7               (        forth.asm):04202                 RFCS
FCF4 10860020         (        forth.asm):04203 (4)             ldw     #SP
FCF8 20D6             (        forth.asm):04204 (3)             bra     FILL1
                      (        forth.asm):04205         
FCFA 06               (        forth.asm):04206         CMOVED  fcb     6               FORTH-83
FCFB 434D4F56453E     (        forth.asm):04207                 fcc     'CMOVE>'
FD01 FCEA             (        forth.asm):04208                 fdb     BLANKS
FD03 C7               (        forth.asm):04209                 RFCS
FD04 BDE5A8           (        forth.asm):04210 (7)             jsr     ACQMOVP
FD07 105D             (        forth.asm):04211 (2)             tstw
FD09 270D             (        forth.asm):04212 (3)             beq     @cmovd1
FD0B 105A             (        forth.asm):04213 (2)             decw
FD0D 103061           (        forth.asm):04214 (4)             addr    w,x
FD10 103062           (        forth.asm):04215 (4)             addr    w,y
FD13 105C             (        forth.asm):04216 (2)             incw
FD15 113912           (        forth.asm):04217 (6+?)           tfm     x-,y-
FD18 39               (        forth.asm):04218 (4)     @cmovd1 rts
                      (        forth.asm):04219         
FD19 05               (        forth.asm):04220         CMOVE   fcb     5               79-STANDARD (REQ153)
FD1A 434D4F5645       (        forth.asm):04221                 fcc     'CMOVE'
FD1F FCFA             (        forth.asm):04222                 fdb     CMOVED
FD21 C7               (        forth.asm):04223                 RFCS
FD22 BDE5A8           (        forth.asm):04224 (7)             jsr     ACQMOVP
FD25 113812           (        forth.asm):04225 (6+?)           tfm     x+,y+
FD28 39               (        forth.asm):04226 (4)             rts
                      (        forth.asm):04227         
FD29 04               (        forth.asm):04228         MOVE    fcb     4               79-STANDARD (REQ113)
FD2A 4D4F5645         (        forth.asm):04229                 fcc     'MOVE'          ( srcaddr dstaddr ncells -- )
FD2E FD19             (        forth.asm):04230                 fdb     CMOVE
FD30 C7               (        forth.asm):04231                 RFCS
FD31 BDE5A8           (        forth.asm):04232 (7)             jsr     ACQMOVP
FD34 105D             (        forth.asm):04233 (2)             tstw
FD36 2F06             (        forth.asm):04234 (3)             ble     @move1
FD38 103066           (        forth.asm):04235 (4)             addr    w,w             Convert cells to bytes
FD3B 113812           (        forth.asm):04236 (6+?)           tfm     x+,y+
FD3E 39               (        forth.asm):04237 (4)     @move1  rts
                      (        forth.asm):04238         
FD3F 05               (        forth.asm):04239         CELLS   fcb     5               ANSI-X3.215-1994
FD40 43454C4C53       (        forth.asm):04240                 fcc     'CELLS'
FD45 FD29             (        forth.asm):04241                 fdb     MOVE
FD47 C7               (        forth.asm):04242                 RFCS
FD48 BDE7FB           (        forth.asm):04243 (7)             jsr     NPOP
FD4B 103011           (        forth.asm):04244 (4)             addr    x,x
FD4E 3610             (        forth.asm):04245                 UCNPUSH
FD50 39               (        forth.asm):04246 (4)             rts
                      (        forth.asm):04247         
FD51 04               (        forth.asm):04248         LAST    fcb     4               79-STANDARD (REF)
FD52 4C415354         (        forth.asm):04249                 fcc     'LAST'
FD56 FD3F             (        forth.asm):04250                 fdb     CELLS
FD58 C7               (        forth.asm):04251                 RFCS
FD59 9E06             (        forth.asm):04252 (4)             ldx     LSTWAD
FD5B 7EE7ED           (        forth.asm):04253 (3)             jmp     NPUSH
                      (        forth.asm):04254         
FD5E 04               (        forth.asm):04255         HERE    fcb     4               79-STANDARD (REQ188)
FD5F 48455245         (        forth.asm):04256                 fcc     'HERE'
FD63 FD51             (        forth.asm):04257                 fdb     LAST
FD65 C7               (        forth.asm):04258                 RFCS
FD66 9E08             (        forth.asm):04259 (4)             ldx     DICEND
FD68 7EE7ED           (        forth.asm):04260 (3)             jmp     NPUSH
                      (        forth.asm):04261         
FD6B 02               (        forth.asm):04262         PLUSST  fcb     2               79-STANDARD (REQ157)
FD6C 2B21             (        forth.asm):04263                 fcc     '+!'            ( incr addr -- )
FD6E FD5E             (        forth.asm):04264                 fdb     HERE
FD70 C7               (        forth.asm):04265                 RFCS
FD71 BDE49A           (        forth.asm):04266 (7)             jsr     MIN2PST         We need at least two cells stacked up
FD74 AEC4             (        forth.asm):04267 (5+0)           ldx     ,u              ADDR to X
FD76 EC84             (        forth.asm):04268 (5+0)           ldd     ,x              @ADDR to D
FD78 E342             (        forth.asm):04269 (5+1)           addd    2,u             Add INCR to D
FD7A ED84             (        forth.asm):04270 (5+0)   PLUSST1 std     ,x              Store the sum back to ADDR
FD7C 3344             (        forth.asm):04271 (4+1)           leau    4,u             Drop two cells from the data stack
FD7E 39               (        forth.asm):04272 (4)             rts
                      (        forth.asm):04273         
FD7F 03               (        forth.asm):04274         ONEPST  fcb     3               79-STANDARD (REF)
FD80 312B21           (        forth.asm):04275                 fcc     '1+!'
FD83 FD6B             (        forth.asm):04276                 fdb     PLUSST
FD85 C7               (        forth.asm):04277                 RFCS
FD86 BDE495           (        forth.asm):04278 (7)             jsr     MIN1PST         At least one cell needs to be stacked up
FD89 AEC4             (        forth.asm):04279 (5+0)           ldx     ,u
FD8B EC84             (        forth.asm):04280 (5+0)           ldd     ,x
FD8D 104C             (        forth.asm):04281 (2)             incd
FD8F ED84             (        forth.asm):04282 (5+0)           std     ,x
FD91 3342             (        forth.asm):04283 (4+1)           leau    2,u
FD93 39               (        forth.asm):04284 (4)             rts
                      (        forth.asm):04285         
FD94 02               (        forth.asm):04286         MINUSST fcb     2               79-STANDARD (REQ157)
FD95 2D21             (        forth.asm):04287                 fcc     '-!'            ( incr addr -- )
FD97 FD7F             (        forth.asm):04288                 fdb     ONEPST
FD99 C7               (        forth.asm):04289                 RFCS
FD9A BDE49A           (        forth.asm):04290 (7)             jsr     MIN2PST         We need at least two cells stacked up
FD9D AEC4             (        forth.asm):04291 (5+0)           ldx     ,u              ADDR to X
FD9F EC84             (        forth.asm):04292 (5+0)           ldd     ,x              @ADDR to D
FDA1 A342             (        forth.asm):04293 (5+1)           subd    2,u             Substract INCR from D
FDA3 20D5             (        forth.asm):04294 (3)             bra     PLUSST1
                      (        forth.asm):04295         
FDA5 02               (        forth.asm):04296         CSTORE  fcb     2               79-STANDARD (REQ219)
FDA6 4321             (        forth.asm):04297                 fcc     'C!'            ( val8 addr -- )
FDA8 FD94             (        forth.asm):04298                 fdb     MINUSST
FDAA C7               (        forth.asm):04299                 RFCS
FDAB BDE49A           (        forth.asm):04300 (7)             jsr     MIN2PST         We need at least two cells stacked up
FDAE A643             (        forth.asm):04301 (4+1)           lda     3,u             VAL8 to A
FDB0 A7D4             (        forth.asm):04302 (4+3)           sta     [,u]            Actual store to ADDR
FDB2 3344             (        forth.asm):04303 (4+1)           leau    4,u             Drop two cells from the data stack
FDB4 39               (        forth.asm):04304 (4)             rts
                      (        forth.asm):04305         
FDB5 01               (        forth.asm):04306         STORE   fcb     1               79-STANDARD (REQ112)
FDB6 21               (        forth.asm):04307                 fcc     '!'             ( data addr -- )
FDB7 FDA5             (        forth.asm):04308                 fdb     CSTORE
FDB9 C7               (        forth.asm):04309                 RFCS
FDBA BDE49A           (        forth.asm):04310 (7)             jsr     MIN2PST         At least two cells need to be stacked up
FDBD EC42             (        forth.asm):04311 (5+1)           ldd     2,u             DATA to D
FDBF EDD4             (        forth.asm):04312 (5+3)           std     [,u]            Actual store to ADDR
FDC1 3344             (        forth.asm):04313 (4+1)           leau    4,u             Drop two cells from the user stack
FDC3 39               (        forth.asm):04314 (4)             rts
                      (        forth.asm):04315         
FDC4 02               (        forth.asm):04316         CFETCH  fcb     2               79-STANDARD (REQ156)
FDC5 4340             (        forth.asm):04317                 fcc     'C@'            ( addr -- val8 )
FDC7 FDB5             (        forth.asm):04318                 fdb     STORE
FDC9 C7               (        forth.asm):04319                 RFCS
FDCA BDE495           (        forth.asm):04320 (7)             jsr     MIN1PST         We need at least one cell stacked up
FDCD 4F               (        forth.asm):04321 (1)             clra
FDCE E6D4             (        forth.asm):04322 (4+3)           ldb     [,u]
FDD0 EDC4             (        forth.asm):04323 (5+0)           std     ,u
FDD2 39               (        forth.asm):04324 (4)             rts
                      (        forth.asm):04325         
FDD3 01               (        forth.asm):04326         QMARK   fcb     1               79-STANDARD (REQ194)
FDD4 3F               (        forth.asm):04327                 fcc     '?'
FDD5 FDC4             (        forth.asm):04328                 fdb     CFETCH
FDD7 C7               (        forth.asm):04329                 RFCS
FDD8 BD0C65           (        forth.asm):04330 (7)             jsr     RAMFTCH         Call the RAM based incarnation of @
FDDB 7EF631           (        forth.asm):04331                 RFXT    jmp,DOT+4       XT for .
                      (        forth.asm):04332         
                      (        forth.asm):04333         * End of ROM part of the builtin dictionary.
     FDDE             (        forth.asm):04334         THEEND  equ     *               This is the end, Beautiful friend
                      (        forth.asm):04335         *                               This is the end, My only friend
                      (        forth.asm):04336         
                      (        forth.asm):04337         * This transactional word is relocated to RAM, so that we can compile new
                      (        forth.asm):04338         * definitions. FORTHIN will take care of that and adjust the relevant pointers.
FDDE 01               (        forth.asm):04339         FETCH   fcb     1               79-STANDARD (REQ199)
FDDF 40               (        forth.asm):04340                 fcc     '@'             ( addr -- data )
FDE0 FDD3             (        forth.asm):04341                 fdb     QMARK
FDE2 C7               (        forth.asm):04342                 RFCS
FDE3 BDE495           (        forth.asm):04343 (7)             jsr     MIN1PST         At least one cell needs to be stacked up
FDE6 ECD4             (        forth.asm):04344 (5+3)           ldd     [,u]
FDE8 EDC4             (        forth.asm):04345 (5+0)           std     ,u              Returned through the data stack
FDEA 39               (        forth.asm):04346 (4)             rts
                      (        forth.asm):04347         
     FDEB             (        forth.asm):04348         REALEND equ     *
                      (        forth.asm):04349         
                      (        forth.asm):04350         *******************************************************************************
                      (        forth.asm):04351         * String literals.
                      (        forth.asm):04352         
                      (        forth.asm):04353         * Using CR+LF as it is Minicom's default.
                      (        forth.asm):04354         
                      (        forth.asm):04355         * Clear the screen, VT100 style.
FDEB 1B5B481B5B4A0D00 (        forth.asm):04356         CSVT100 fcb     $1B,'[','H',$1B,'[','J',CR,NUL
                      (        forth.asm):04357         
FDF3 0D0A             (        forth.asm):04358         BOOTMSG fcb     CR,LF
                      (        forth.asm):04359                 IFNE    RTCFEAT
                      (        forth.asm):04360                 fcc     'Z79Forth 6309/R FORTH-79 Standard Sub-set'
                      (        forth.asm):04361                 ELSE
FDF5 5A3739466F727468 (        forth.asm):04362                 fcc     'Z79Forth 6309/I FORTH-79 Standard Sub-set'
     20363330392F4920
     464F5254482D3739
     205374616E646172
     64205375622D7365
     74
                      (        forth.asm):04363                 ENDC                    RTCFEAT
FE1E 0D0A             (        forth.asm):04364                 fcb     CR,LF
FE20 3230323230393131 (        forth.asm):04365                 fcc     '20220911 Copyright Francois Laagel (2019)'
     20436F7079726967
     6874204672616E63
     6F6973204C616167
     656C202832303139
     29
FE49 0D0A0D0A00       (        forth.asm):04366                 fcb     CR,LF,CR,LF,NUL
                      (        forth.asm):04367         
FE4E 52414D204F4B3A20 (        forth.asm):04368         RAMOKM  fcc     'RAM OK: 32 KB'
     3332204B42
FE5B 0D0A00           (        forth.asm):04369         CRLFSTR fcb     CR,LF,NUL
                      (        forth.asm):04370         
FE5E 52414D2063686563 (        forth.asm):04371         RAMFM   fcc     'RAM check failed'
     6B206661696C6564
FE6E 0D0A00           (        forth.asm):04372                 fcb     CR,LF,NUL
                      (        forth.asm):04373         
                      (        forth.asm):04374                 IFNE    RTCFEAT
FE71                  (        forth.asm):04375         RTPRESM fcc     'MC146818 RTC'
                      (        forth.asm):04376                 fcb     CR,LF,NUL
                      (        forth.asm):04377                 ENDC
                      (        forth.asm):04378         
                      (        forth.asm):04379                 IFEQ    CSSNTVE
FE71 206F6B           (        forth.asm):04380         OKFEEDB fcc     ' ok'           As per GNU Forth's implementation...
                      (        forth.asm):04381                 ELSE
FE74                  (        forth.asm):04382         OKFEEDB fcc     ' OK'
                      (        forth.asm):04383                 ENDC                    CSSNTVE
FE74 0D0A00           (        forth.asm):04384                 fcb     CR,LF,NUL
                      (        forth.asm):04385         
                      (        forth.asm):04386         * Error messages for IODZHDL.
FE77 496C6C6567616C20 (        forth.asm):04387         IOPERRM fcn     'Illegal opcode near '
     6F70636F6465206E
     6561722000
FE8C 4469766973696F6E (        forth.asm):04388         DV0ERRM fcn     'Division by 0 near '
     2062792030206E65
     61722000
                      (        forth.asm):04389         
FEA0 4461746120737461 (        forth.asm):04390         ERRMTBL fcn     'Data stack overflow'   Error 0
     636B206F76657266
     6C6F7700
FEB4 4461746120737461 (        forth.asm):04391                 fcn     'Data stack underflow'  Error 1
     636B20756E646572
     666C6F7700
FEC9 3F00             (        forth.asm):04392                 fcn     '?'                     Error 2
FECB 557365722041424F (        forth.asm):04393                 fcn     'User ABORT'            Error 3
     525400
FED6 00               (        forth.asm):04394                 fcn     ''                      Error 4 (formerly "Division by zero")
FED7 4D697373696E6720 (        forth.asm):04395                 fcn     'Missing word name'     Error 5
     776F7264206E616D
     6500
FEE9 496E636F72726563 (        forth.asm):04396                 fcn     'Incorrect STATE'       Error 6
     7420535441544500
FEF9 52657475726E2073 (        forth.asm):04397                 fcn     'Return stack overflow' Error 7
     7461636B206F7665
     72666C6F7700
FF0F 52657475726E2073 (        forth.asm):04398                 fcn     'Return stack underflow' Error 8
     7461636B20756E64
     6572666C6F7700
FF26 496C6C6567616C20 (        forth.asm):04399                 fcn     'Illegal construct'     Error 9
     636F6E7374727563
     7400
FF38 417373657274696F (        forth.asm):04400                 fcn     'Assertion failed'      Error 10
     6E206661696C6564
     00
FF49 522F4F20776F7264 (        forth.asm):04401                 fcn     'R/O word'              Error 11
     00
FF52 4D697373696E6720 (        forth.asm):04402                 fcn     'Missing delimiter'     Error 12
     64656C696D697465
     7200
FF64 496C6C6567616C20 (        forth.asm):04403                 fcn     'Illegal argument'      Error 13
     617267756D656E74
     00
FF75 4E6F206D61746368 (        forth.asm):04404                 fcn     'No matching CREATE'    Error 14
     696E672043524541
     544500
FF88 496E76616C696420 (        forth.asm):04405                 fcn     'Invalid BASE'          Error 15
     4241534500
FF95 576F7264206E616D (        forth.asm):04406                 fcn     'Word name too long'    Error 16
     6520746F6F206C6F
     6E6700
FFA8 494F206572726F72 (        forth.asm):04407                 fcn     'IO error'              Error 17
     00
                      (        forth.asm):04408         
                      (        forth.asm):04409         * A-list used for numeric literal base prefixes.
FFB1 24               (        forth.asm):04410         BASALST fcc     '$'             Hexadecimal prefix
FFB2 10               (        forth.asm):04411                 fcb     16
FFB3 26               (        forth.asm):04412                 fcc     '&'             Decimal prefix
FFB4 0A               (        forth.asm):04413                 fcb     10
FFB5 23               (        forth.asm):04414                 fcc     '#'             Decimal prefix (an ANSI concession)
FFB6 0A               (        forth.asm):04415                 fcb     10
FFB7 25               (        forth.asm):04416                 fcc     '%'             Binary prefix
FFB8 02               (        forth.asm):04417                 fcb     2
FFB9 40               (        forth.asm):04418                 fcc     '@'             Octal prefix
FFBA 08               (        forth.asm):04419                 fcb     8
FFBB 00               (        forth.asm):04420                 fcb     0               End of list marker
                      (        forth.asm):04421         
                      (        forth.asm):04422         * Under no circumstance should the following symbol be negative!
     0034             (        forth.asm):04423         AVL     equ     VECTBL-*        Available EEPROM space left
                      (        forth.asm):04424         
                      (        forth.asm):04425         *******************************************************************************
                      (        forth.asm):04426         * Interrupt vector table
                      (        forth.asm):04427                 org     VECTBL
                      (        forth.asm):04428         
FFF0 E000             (        forth.asm):04429                 fdb     IODZHDL         Illegal opcode/Division by zero trap
FFF2 E036             (        forth.asm):04430                 fdb     SWI3HDL         SWI 3 interrupt vector address
FFF4 E036             (        forth.asm):04431                 fdb     SWI2HDL         SWI 2 interrupt vector address
FFF6 E255             (        forth.asm):04432                 fdb     FIRQHDL         FIRQ interrupt vector address
FFF8 E036             (        forth.asm):04433                 fdb     IRQHDL          IRQ interrupt vector address
FFFA E036             (        forth.asm):04434                 fdb     SWIHDL          SWI interrupt vector address
FFFC E1DD             (        forth.asm):04435                 fdb     NMIHDL          NMI vector address
FFFE E037             (        forth.asm):04436                 fdb     RSTHDL          RESET vector address
                      (        forth.asm):04437         

Symbol Table:
[ G] _BS                              E30A
[ G] _INTERP                          E0CA
[ G] ABORT                            F0F0
[ G] ABS                              EF76
[ G] AC8N1                            0014
[ G] ACCEPT                           F780
[ G] ACDIV16                          0001
[ G] ACIACTL                          D800
[ G] ACIADAT                          D801
[ G] ACIISVC                          0080
[ G] ACIOVRN                          0020
[ G] ACIRDRF                          0001
[ G] ACIRSET                          0043
[ G] ACIRTS0                          0095
[ G] ACIRTS1                          00D5
[ G] ACITDRE                          0002
[ G] ACQMOVP                          E5A8
[ G] ACQVMRA                          E5AB
[ G] ACRDINT                          0080
[ G] ACRST                            0003
[ G] ACRTS0                           0000
[ G] ACRTS1                           0040
[ G] ADDS                             E1BD
[ G] ADIV16                           E190
[ G] AGAIN                            EFAF
[ G] ALLOT                            FCB0
[ G] AND                              EE63
[ G] ARPICKN                          F095
[ G] AVL                              0034
[ G] BASALST                          FFB1
[ G] BASBKUP                          012C
[ G] BASE                             FB21
[ G] BCSOPC                           2503
[ G] BDICEND                          010C
[ G] BDIRTY                           0004
[ G] BEGIN                            EFA1
[ G] BFDISP                           0410
[ G] BIN                              FB2F
[ G] BINUSE                           0001
[ G] BKCHAR                           F268
[ G] BKIN2PT                          E841
[ G] BKQUOT                           F13A
[ G] BKSLSH                           F31B
[ G] BL                               F69D
[ G] BLANKS                           FCEA
[ G] BLK                              EA79
[ G] BLKSIZ                           0400
[ G] BLOCK                            EA4A
[ G] BLSTWAD                          010A
[ G] BMAPPD                           0002
[ G] BNEOPC                           2603
[ G] BOBLKNO                          0402
[ G] BOFLAGS                          0401
[ G] BOOTMSG                          FDF3
[ G] BOTERM                           0400
[ G] BS                               0008
[ G] BSBFADR                          011C
[ G] BUF0                             0440
[ G] BUF1                             0850
[ G] BUFFER                           E9FD
[ G] BYE                              F25E
[ G] CCOMMA                           FC8B
[ G] CCREGM                           E220
[ G] CELLS                            FD3F
[ G] CF1BKRD                          E94C
[ G] CF1BKWR                          E967
[ G] CF1BPRE                          E92F
[ G] CF1SRD                           E8FB
[ G] CF1SWR                           E91A
[ G] CFANTHS                          E8A6
[ G] CFBASE                           C000
[ G] CFBSYB                           0080
[ G] CFCARDP                          013D
[ G] CFCHIGR                          C005
[ G] CFCLOWR                          C004
[ G] CFCMDIS                          E88B
[ G] CFCMMIR                          013E
[ G] CFCOMDR                          C007
[ G] CFDATAR                          C000
[ G] CFDRHDR                          C006
[ G] CFDRQB                           0008
[ G] CFDRSEL                          E89D
[ G] CFDSCB                           0010
[ G] CFDWFB                           0020
[ G] CFERRB                           0001
[ G] CFERRCD                          013F
[ G] CFERRCK                          E87E
[ G] CFERROR                          C001
[ G] CFETCH                           FDC4
[ G] CFFEATR                          C001
[ G] CFIDDEV                          00EC
[ G] CFINIT                           E8C4
[ G] CFLAG                            0001
[ G] CFR1SRA                          E919
[ G] CFRDY                            E868
[ G] CFRDYB                           0040
[ G] CFRSCTS                          0020
[ G] CFSCNTR                          C002
[ G] CFSCSZ                           0200
[ G] CFSETFT                          00EF
[ G] CFSNUMR                          C003
[ G] CFSTATR                          C007
[ G] CFWAIT                           E860
[ G] CFWSCTS                          0030
[ G] CHAR                             F277
[ G] CHKNDPT                          E48A
[ G] CHKRTS                           E155
[ G] CKBASE                           E3D9
[ G] CKBASRA                          E3E9
[ G] CKDPTRA                          E495
[ G] CKNBPFX                          E3AE
[ G] CMDBFSZ                          0084
[ G] CMDBUF                           0316
[ G] CMDLNSZ                          012D
[ G] CMOVE                            FD19
[ G] CMOVED                           FCFA
[ G] CMP2                             E594
[ G] CMP2RA                           E597
[ G] CMPCOMA                          F185
[ G] COM                              EE77
[ G] COM0                             EE7E
[ G] COMMA                            FC9F
[ G] COMP                             E116
[ G] COMPC                            F197
[ G] COMPLRA                          E12A
[ G] COMPR                            F1AF
[ G] CONS                             EBD0
[ G] CONTIND                          F82B
[ G] CONVERT                          F4AC
[ G] COUNT                            F716
[ G] CR                               000D
[ G] CREAT1                           EB77
[ G] CREATE                           EB55
[ G] CRLF                             F6E2
[ G] CRLFSTR                          FE5B
[ G] CSSNTVE                          0000
[ G] CSTORE                           FDA5
[ G] CSUMFLM                          EC93
[ G] CSVT100                          FDEB
[ G] CURTOKL                          0138
[ G] CVISSGN                          0137
[ G] CVNSTR                           E441
[ G] CVT                              F571
[ G] CVT0                             F578
[ G] CVT1                             F580
[ G] CVTB                             F620
[ G] CVTE                             F525
[ G] CVTFCN                           0134
[ G] DASHTR                           F72C
[ G] DDUMP                            FB80
[ G] DEBUG                            0000
[ G] DECIMAL                          FB4B
[ G] DEFFLG                           013A
[ G] DEFFLM                           0040
[ G] DEPTH                            EB3F
[ G] DEV0                             C000
[ G] DEV1                             C400
[ G] DEV2                             C800
[ G] DEV3                             CC00
[ G] DEV4                             D000
[ G] DEV5                             D400
[ G] DEV6                             D800
[ G] DEV7                             DC00
[ G] DICEND                           0108
[ G] DIFF                             EE03
[ G] DIV                              F976
[ G] DIV1                             F97F
[ G] DIVFCN                           0131
[ G] DLESS                            F402
[ G] DMINUS                           F3DC
[ G] DNEG                             F3B9
[ G] DO                               ECF4
[ G] DOES                             EB7F
[ G] DOESEX                           EB8E
[ G] DOEX                             ED05
[ G] DOT                              F62C
[ G] DOTR                             F656
[ G] DOTR0                            F660
[ G] DOTTICK                          FB69
[ G] DPLUS                            F3A0
[ G] DPOPRA                           E809
[ G] DPREGM                           E22C
[ G] DPSHRA                           E7FA
[ G] DREGM                            E224
[ G] DROP                             FBF7
[ G] DUP                              FBE8
[ G] DV0ERRM                          FE8C
[ G] DZEQ                             F3F5
[ G] EBUFS                            E982
[ G] ELSE                             EDB7
[ G] EMIT                             F885
[ G] EMPT1B                           E383
[ G] EMPTYB                           E37B
[ G] EMXASXT                          E169
[ G] EQ                               EDEA
[ G] ERRHD1                           E76D
[ G] ERRHDLR                          E76A
[ G] ERRMTBL                          FEA0
[ G] ERRPCK                           FC2E
[ G] ETX                              0003
[ G] EXCT                             F244
[ G] EXIT                             EFCD
[ G] EXPCT1                           F771
[ G] EXPECT                           F767
[ G] F83DIVF                          0132
[ G] FDCTSYM                          E5B6
[ G] FDIVADJ                          F9B3
[ G] FETCH                            FDDE
[ G] FFLAG                            0040
[ G] FILL                             FCC3
[ G] FILL1                            FCD0
[ G] FIND                             F101
[ G] FINDSYM                          E62A
[ G] FIRQHDL                          E255
[ G] FLUSH                            E9D7
[ G] FNDPLD                           0110
[ G] FORGET                           F1F7
[ G] FORTHIN                          E359
[ G] GETCH                            E2B4
[ G] GETS                             E316
[ G] HDMP2                            E1AE
[ G] HDMP4                            E195
[ G] HDRCSUM                          EC87
[ G] HDRSKIP                          EC7D
[ G] HERE                             FD5E
[ G] HEX                              FB5C
[ G] HEX1D                            E17C
[ G] HEXBFSZ                          0050
[ G] HEXBUF                           039A
[ G] HOLD                             F555
[ G] HT                               0009
[ G] HVNMI                            0001
[ G] HVNMI2                           0000
[ G] ICHECK                           ECAA
[ G] IF                               ED7E
[ G] IFEX                             ED9E
[ G] IFLAG                            0010
[ G] ILLOPC                           00C7
[ G] IMDFLG                           0139
[ G] IMDFLM                           0080
[ G] IMMED                            EC17
[ G] IMMED1                           EC26
[ G] INDI                             F08F
[ G] INDIP                            F0B3
[ G] INDJ                             F0BD
[ G] INDJP                            F0C6
[ G] INDK                             F0D0
[ G] INF                              EF35
[ G] INIT                             E047
[ G] INSBPAD                          F60D
[ G] INTERP                           E0B2
[ G] INTISRA                          E106
[ G] INTRPRA                          E111
[ G] INVERT                           EE8A
[ G] IODZHDL                          E000
[ G] IOERR                            E914
[ G] IOPERRM                          FE77
[ G] IOSTRT                           C000
[ G] IRDPTH                           012F
[ G] IRQHDL                           E036
[ G] ISDBLF                           0136
[ G] ISNEGF                           0135
[ G] JMPOPC                           007E
[ G] JSRLAST                          0114
[ G] JSROPC                           00BD
[ G] KEY                              F873
[ G] KEYP                             F860
[ G] LAST                             FD51
[ G] LBRACK                           F132
[ G] LDXOPC                           008E
[ G] LEAVE                            F07A
[ G] LF                               000A
[ G] LIST                             EACA
[ G] LITER                            E578
[ G] LITERAL                          EBAC
[ G] LOAD                             F7BA
[ G] LOAD1                            F7CB
[ G] LOCWRT                           E517
[ G] LOOP                             ED0E
[ G] LOOP1                            ED19
[ G] LOOPEX                           ED2D
[ G] LPAR                             F2E3
[ G] LSTWAD                           0106
[ G] LWMNRA                           E52D
[ G] MAX                              EF44
[ G] MDIV                             F9CD
[ G] MILLIS                           F845
[ G] MILLIS1                          F854
[ G] MIN                              EF5D
[ G] MIN1PST                          E495
[ G] MIN2PST                          E49A
[ G] MIN3PST                          E49F
[ G] MIN4PST                          E4A4
[ G] MINTLRA                          E0C8
[ G] MINUS                            F8C9
[ G] MINUSST                          FD94
[ G] MOD                              F9C0
[ G] MONFLM                           0020
[ G] MONIT1                           EC4F
[ G] MONITOR                          EC40
[ G] MORE                             E0E2
[ G] MOVE                             FD29
[ G] MROT                             FC7F
[ G] MRUBUFA                          011A
[ G] MSLCNT                           031A
[ G] MULT                             F943
[ G] NAK                              0015
[ G] NBCTFB0                          013B
[ G] NCLR                             EB23
[ G] NDCTWKS                          E650
[ G] NEGATE                           EF8D
[ G] NIP                              FBDD
[ G] NMCVCRA                          E13C
[ G] NMCVIRA                          E0E0
[ G] NMI2DM                           E1C8
[ G] NMI4DM                           E1CE
[ G] NMIDML                           E1D4
[ G] NMIHDL                           E1DD
[ G] NOT                              EEE2
[ G] NPOP                             E7FB
[ G] NPUSH                            E7ED
[ G] NSTBOT                           0296
[ G] NSTKSZ                           00C0
[ G] NSTTOP                           01D6
[ G] NUL                              0000
[ G] NULP                             EECA
[ G] NUMCVRA                          E440
[ G] NUMCVT                           E3E9
[ G] NXTBLK                           F810
[ G] NXTBLK1                          F81B
[ G] OCTAL                            FB3C
[ G] OKFEEDB                          FE71
[ G] ONEL                             F905
[ G] ONEM                             F8DA
[ G] ONEP                             F8A8
[ G] ONEPST                           FD7F
[ G] OR                               EE50
[ G] OVER                             FC48
[ G] PAD                              F6EB
[ G] PADBSZ                           0051
[ G] PADBUF                           0184
[ G] PAGE                             F6D4
[ G] PAYLOAD                          FA30
[ G] PCREGM                           E23D
[ G] PICK                             FC16
[ G] PICK1                            FC21
[ G] PLOAD                            010E
[ G] PLOOP                            ED32
[ G] PLOOPEX                          ED40
[ G] PLOPEX1                          ED43
[ G] PLUS                             F897
[ G] PLUSST                           FD6B
[ G] PLUSST1                          FD7A
[ G] POSTPON                          F146
[ G] pragma                           0000
[ G] PRBLKIN                          E73D
[ G] PSTR                             F339
[ G] PTOP0                            F635
[ G] PUTCH                            E2E0
[ G] PUTCR                            E300
[ G] PUTS                             E2F3
[ G] QMARK                            FDD3
[ G] QRYDUP                           FBBB
[ G] QUIT                             F0D9
[ G] RAMCHK                           E057
[ G] RAMFAIL                          E069
[ G] RAMFM                            FE5E
[SG] RAMFTCH                          0C65
[SG] RAMFTCH                          0C64
[ G] RAMOK                            E07B
[ G] RAMOKM                           FE4E
[ G] RAMSIZE                          8000
[ G] RAMSTRT                          0000
[ G] RBRACK                           F128
[ G] RCLR                             EB2F
[ G] RDEPTH                           012E
[ G] REALEND                          FDEB
[ G] RECADDR                          0112
[ G] RECURSE                          F1E7
[SG] RELFEAT                          0001
[ G] REPEAT                           F043
[ G] RFETCH                           F0AB
[ G] RFROM                            F062
[ G] ROLL                             FC55
[ G] ROLL1                            FC60
[ G] ROMSTRT                          E000
[ G] ROT                              FC73
[ G] RPOP                             E828
[ G] RPOPRA                           E841
[ G] RPSHRA                           E827
[ G] RPUSH                            E80A
[ G] RSBSPFX                          E3D2
[ G] RSP                              0100
[ G] RSTBOT                           0316
[ G] RSTHDL                           E037
[ G] RSTKSZ                           0080
[ G] RSTRCT                           EC30
[ G] RSTTOP                           0296
[ G] RTADV32                          0020
[ G] RTADVRS                          0070
[ G] RTARS64                          000A
[ G] RTAS                             D400
[ G] RTAUIP                           0080
[ G] RTB24                            0002
[ G] RTBDM                            0004
[ G] RTBPIE                           0040
[ G] RTBSET                           0080
[ G] RTCAVL                           013C
[ G] RTCFEAT                          0000
[ G] RTCFTCH                          EAB1
[ G] RTCPF                            0040
[ G] RTCSTOR                          EABF
[ G] RTDS                             D401
[ G] RTODOM                           0007
[ G] RTODOW                           0006
[ G] RTOHOUR                          0004
[ G] RTOHRA                           0005
[ G] RTOMIN                           0002
[ G] RTOMINA                          0003
[ G] RTOMON                           0008
[ G] RTOPRES                          003F
[ G] RTOREGA                          000A
[ G] RTOREGB                          000B
[ G] RTOREGC                          000C
[ G] RTOREGD                          000D
[ G] RTOSEC                           0000
[ G] RTOSECA                          0001
[ G] RTOUMB                           000E
[ G] RTOYEAR                          0009
[ G] RTSOPC                           0039
[ G] RTSREMV                          0130
[ G] RTUMSZ                           0032
[ G] SAVBUF                           E996
[ G] SCNETOK                          E39C
[ G] SCNSTOK                          E38E
[ G] SCR                              EA93
[ G] SERBCNT                          0142
[ G] SERBDEQ                          0141
[ G] SERBENQ                          0140
[ G] SERBSZ                           0040
[ G] SERBUF                           0144
[ G] SHARPS                           F565
[ G] SHIFT                            F91B
[ G] SIGN                             F53E
[ G] SINFEQ                           EE1D
[ G] SLEN                             E246
[ G] SOURCE                           F2FD
[ G] SP                               0020
[ G] SPACE                            F6A9
[ G] SPACES                           F6B7
[ G] SQUOTE                           F34E
[ G] SREGM                            E242
[ G] SSDFEAT                          0001
[ G] STATE                            FB12
[ G] STOD                             EB09
[ G] STORE                            FDB5
[ G] STRSL1                           F9E3
[ G] STRSLMD                          FA0E
[ G] STRSLSH                          F9D9
[ G] STSLFCN                          0133
[ G] SUP                              EF26
[ G] SWAP                             FC02
[ G] SWDIC                            E4A9
[ G] SWI2HDL                          E036
[ G] SWI3HDL                          E036
[ G] SWIHDL                           E036
[ G] SYSSTAT                          FA25
[ G] SYSSTK                           FA1B
[ G] TBUFF                            03EA
[ G] TBUFSZ                           0048
[ G] TERPRET                          F790
[ G] THEEND                           FDDE
[ G] THEN                             EDD8
[ G] THRU                             F7EE
[ G] TICKS                            EAA0
[ G] TIKSHI                           0128
[ G] TIKSLOW                          012A
[ G] TOIN                             EA86
[ G] TOKENEP                          0104
[ G] TOKENSP                          0102
[ G] TOR                              F06E
[ G] TUCK                             FBD1
[ G] TWODIV                           F966
[ G] TWODROP                          F45F
[ G] TWODUP                           F46E
[ G] TWOFTCH                          F498
[ G] TWOL                             F910
[ G] TWOM                             F8EA
[ G] TWOOVER                          F429
[ G] TWOP                             F8B8
[ G] TWOSTOR                          F486
[ G] TWOSWAP                          F442
[ G] TWOTIM                           F956
[ G] TYPE                             F6F8
[ G] U2INFRD                          E177
[ G] UBASE                            011E
[ G] UBLK                             0124
[ G] UDOT                             F64C
[ G] UDOTR                            F692
[ G] UINF                             EEFB
[ G] UNLESS                           EDA5
[ G] UNLOOP                           ED6E
[ G] UNMON                            EC6B
[ G] UNTIL                            EFEF
[ G] UPDATE                           E9E2
[ G] UREGM                            E239
[ G] USCR                             0126
[ G] USTATE                           0120
[ G] USUP                             EEEB
[ G] UTOIN                            0122
[ G] VARCON                           E58A
[ G] VARCON1                          E58C
[ G] VARCON2                          E58F
[ G] VARI                             EBF2
[ G] VARSPC                           0100
[ G] VECTBL                           FFF0
[ G] VLIST                            FA40
[ G] VLPRVEP                          0116
[ G] VLPRVHD                          0118
[ G] WBIFDRT                          E9AE
[ G] WDICSPC                          0C60
[ G] WHILE                            F018
[ G] WITHIN                           EF0B
[ G] WORD                             F29E
[ G] WREGM                            E228
[ G] WRLNMSK                          001F
[ G] WTOOLNG                          E54A
[ G] XMITOK                           0143
[ G] XOFF                             0013
[ G] XON                              0011
[ G] XOR                              EE39
[ G] XOR1                             EE4B
[ G] XREGM                            E231
[ G] YREGM                            E235
[ G] ZEROL                            F8FB
[ G] ZFLAG                            0004
[ G] ZGREAT                           EE96
[ G] ZLESS                            EEB0
