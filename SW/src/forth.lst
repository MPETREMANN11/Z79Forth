                      (        forth.asm):00001         * 6309 Forth based on my 1984/07/16 TRS-80 Model 1 level II ROM implementation.
                      (        forth.asm):00002         *
                      (        forth.asm):00003         * This work is dedicated to Alain Pinaud, author of "Programmer en Forth"
                      (        forth.asm):00004         * published by Editions du P.S.I. in 1983--i.e. my virtual mentor in the field.
                      (        forth.asm):00005         * Special thanks go William Astle for his fantastic LW Tools utility set and
                      (        forth.asm):00006         * to Robert Lipe for his advice on serial line handling. Apache subversion
                      (        forth.asm):00007         * and the sdiff utility also were on my side all the time.
                      (        forth.asm):00008         *
                      (        forth.asm):00009         * Also credited for their help: Justin Poirier (seminal HW design), Daniel
                      (        forth.asm):00010         * Tufvesson (original CompactFlash interface), Peter Minuth (general Forth
                      (        forth.asm):00011         * guruness), Paul E. Bennett (ANSI compatibility advice); Michel Jean, Bill
                      (        forth.asm):00012         * Ragsdale, Pablo Hugo Reda, Demitri Peynado and Bernd Paysan for contributed
                      (        forth.asm):00013         * application level code; Carsten Strotmann for most of the benchmarking code
                      (        forth.asm):00014         * (see https://theultimatebenchmark.org/); Gerry Jackson and Steve R. Palmer
                      (        forth.asm):00015         * (see https://github.com/gerryjackson/forth2012-test-suite) for selected
                      (        forth.asm):00016         * bits and pieces of the Forth2012 test suite (see https://forth-standard.org/).
                      (        forth.asm):00017         *
                      (        forth.asm):00018         * This is a native Forth. Not a threaded interpretive implementation.
                      (        forth.asm):00019         * Worth noticing is the fact that the return stack does not hold return
                      (        forth.asm):00020         * addresses at all. All what is stored there is loop indexes and control
                      (        forth.asm):00021         * structures jump addresses. Actual return addresses are kept in the system
                      (        forth.asm):00022         * stack. All in all, this is the result of the work of a 19 year old guy,
                      (        forth.asm):00023         * heavily revisited 35 years later. Some quirks remain that prevent me
                      (        forth.asm):00024         * from offering the full required set--not to mention the choice of using
                      (        forth.asm):00025         * an 8K EEPROM. The downside of this implementation is that the generated
                      (        forth.asm):00026         * code is about 30% larger than a threaded interpretive implementation
                      (        forth.asm):00027         * would be. So it goes...
                      (        forth.asm):00028         *
                      (        forth.asm):00029         * The code generated is limited to a very small instruction set:
                      (        forth.asm):00030         *
                      (        forth.asm):00031         * LDXOPC        $8E     LDX (immediate)
                      (        forth.asm):00032         * JMPOPC        $7E     JMP (extended)
                      (        forth.asm):00033         * JSROPC        $BD     JSR (extended)
                      (        forth.asm):00034         * RTSOPC        $39     RTS (inherent)
                      (        forth.asm):00035         * BCSOPC        $2503   BCS *+5 (relative) Used in LOOP, +LOOP
                      (        forth.asm):00036         * BNEOPC        $2603   BNE *+5 (relative) Used in IF, UNTIL
                      (        forth.asm):00037         *
                      (        forth.asm):00038         * On error, the system stack pointer is reset. The return stack also is
                      (        forth.asm):00039         * but the data stack will be in the same state as when the error occurred.
                      (        forth.asm):00040         * ABORT and QUIT enforce their own 79-STANDARD behaviour.
                      (        forth.asm):00041         *
                      (        forth.asm):00042         * The 79-STANDARD Forth specification can be downloaded from
                      (        forth.asm):00043         * https://www.complang.tuwien.ac.at/forth/fth79std/FORTH-79.TXT
                      (        forth.asm):00044         *
                      (        forth.asm):00045         * Additionally, this implementation provides a few FORTH-83 words. Those
                      (        forth.asm):00046         * words are CMOVE> and RECURSE. See
                      (        forth.asm):00047         * http://forth.sourceforge.net/standard/fst83/FORTH-83.PRN
                      (        forth.asm):00048         * Floored division has been implemented on the top of the processor's native
                      (        forth.asm):00049         * symmetric operation (credits to David Frech). This results in a slight
                      (        forth.asm):00050         * performance loss but helps a lot with compatibility with FORTH-83 and ANSI
                      (        forth.asm):00051         * code.
                      (        forth.asm):00052         *
                      (        forth.asm):00053         * \ ['] [CHAR] .S ACCEPT CELLS CHAR COMPILE, INVERT KEY? NIP POSTPONE S>D S"
                      (        forth.asm):00054         * SOURCE TUCK U> * UNLOOP and WITHIN have been borrowed from the ANSI draft 6
                      (        forth.asm):00055         * specification. See http://www.forth.org/svfig/Win32Forth/DPANS94.txt
                      (        forth.asm):00056         *
                      (        forth.asm):00057         * RESTRICT is non-standard. It comes from GNU Forth (VolksForth). The " OK"
                      (        forth.asm):00058         * non-prompt string also does, by the way. Thanks to Anton Ertl for his terse
                      (        forth.asm):00059         * yet valuable input.
                      (        forth.asm):00060         *
                      (        forth.asm):00061         * .' (dot-tick) is non-standard. It comes from SwiftForth. It will be supported
                      (        forth.asm):00062         * whether or not the symbolic stack dump has been configured (see SSDFEAT in
                      (        forth.asm):00063         * constants.asm). However, please note that effective symbolic references will
                      (        forth.asm):00064         * be resolved only if the feature was enabled at compilation time. Otherwise
                      (        forth.asm):00065         * a simple HEX print of the cell at the top of the data stack will be
                      (        forth.asm):00066         * performed. This is meant to support Forth source code that does not depend
                      (        forth.asm):00067         * on the feature vector (see examples/dis.4th).
                      (        forth.asm):00068         *
                      (        forth.asm):00069         * MONITOR and ICHECK are also non-standard. They are intended to maintain and
                      (        forth.asm):00070         * verify the integrity of a checksum of the code section of RAM resident
                      (        forth.asm):00071         * words, with the exception of VARIABLEs and CREATEd words. CREATEd words,
                      (        forth.asm):00072         * if subject to the MONITOR treatment will also carry a code section
                      (        forth.asm):00073         * checksum, although this is not the default behaviour. The checksum will
                      (        forth.asm):00074         * consist in an extra byte added to every word's header. MONITOR and ICHECK
                      (        forth.asm):00075         * will be available whether or not the reliability feature has been configured
                      (        forth.asm):00076         * (see RELFEAT in constants.asm). They will only carry effective semantics
                      (        forth.asm):00077         * if the feature was actually enabled at compilation time. This is meant to
                      (        forth.asm):00078         * support Forth source code that does not depend on the feature vector.
                      (        forth.asm):00079         *
                      (        forth.asm):00080         * Experimental MC146818 RTC support: the feature is disabled by default
                      (        forth.asm):00081         * (see RTCFEAT in constants.asm) because it relies on undocumented schematics.
                      (        forth.asm):00082         * Also, the required underlying circuitry is not intended to ever become an
                      (        forth.asm):00083         * integral part of the Z79Forth reference board itself. Some better designed
                      (        forth.asm):00084         * form of it might eventually surface in the form of an extension specification.
                      (        forth.asm):00085         * At the time of this writing this is just a proof of concept, but whether or
                      (        forth.asm):00086         * not the feature is enabled, three extra words will be added to the dictionary.
                      (        forth.asm):00087         * They are RTC@ RTC! and TICKS They can be safely ignored.
                      (        forth.asm):00088         *
                      (        forth.asm):00089         * Forth source code portability note:
                      (        forth.asm):00090         * Because Z79Forth does not use the return stack to store return addresses,
                      (        forth.asm):00091         * it makes it quite easy to write code that is not readily portable to classic
                      (        forth.asm):00092         * threaded interpretive implementations. The resulting code will be simpler but
                      (        forth.asm):00093         * portability will be limited.
                      (        forth.asm):00094         *
                      (        forth.asm):00095         * Miscellaneous notes: RA stands for return address; EP for entry point.
                      (        forth.asm):00096         * CF is a shortcut for CompactFlash. TOS means top of the data/normal stack.
                      (        forth.asm):00097         * Occasionally, CFA is used for code field address which, in this
                      (        forth.asm):00098         * implementation, is a synonym for compilation address. XT means execution
                      (        forth.asm):00099         * token--the ANSI term for a compilation address. MSC stands for most
                      (        forth.asm):00100         * significant cell; LSC for least significant cell.
                      (        forth.asm):00101         *
                      (        forth.asm):00102         * The complete guide to the HD6309 extended instruction set can be found at:
                      (        forth.asm):00103         * https://cyberabi.ipower.com/Downloads/The_6309_Book.pdf. For convenience,
                      (        forth.asm):00104         * and with the author's explicit agreement, this document has been included
                      (        forth.asm):00105         * in this distribution. This is recommended reading for anyone altering this
                      (        forth.asm):00106         * code or trying to make some sense of it!!!
                      (        forth.asm):00107         *
                      (        forth.asm):00108         * This whole effort started out as a porting endeavour and ended up being a
                      (        forth.asm):00109         * substantial rewrite, trying to take advantage of the features of the 6309
                      (        forth.asm):00110         * as much as possible. The primary goals of this implementation are:
                      (        forth.asm):00111         * reliability, performance and code compactness. A number of bugs in the
                      (        forth.asm):00112         * original code have been fixed--some remain for sure!
                      (        forth.asm):00113         *
                      (        forth.asm):00114         * Obligatory literary reference:
                      (        forth.asm):00115         * "The paper is very heavy going, and I should never have read it, had I not
                      (        forth.asm):00116         * written it myself." John E. Littlewood (1885-1977).
                      (        forth.asm):00117         *
                      (        forth.asm):00118         * The original soundtrack for this work is available at:
                      (        forth.asm):00119         * https://youtu.be/YqXZtGyFyDo?t=4023 (J.S. Bach BWV 1080, contrapunctus 14).
                      (        forth.asm):00120         
0000                  (        forth.asm):00121         pragma  opt cd,operandsizewarning
                      (        forth.asm):00122         
                      (        forth.asm):00123                 include constants.asm
                      (    constants.asm):00001         * Begin tunable parameters section.
                      (    constants.asm):00002         
     0000             (    constants.asm):00003         CSSNTVE equ     0               Words and HEX numbers are case sensitive if NZ
     0001             (    constants.asm):00004         SSDFEAT equ     1               Set to 1 to enable the symbolic stack dump feat.
     0001             (    constants.asm):00005         RELFEAT set     1               Set to 1 to enable the reliability feature
                      (    constants.asm):00006         *                               Caution: when this is enabled, you can no
                      (    constants.asm):00007         *                               longer fit a DEBUG image into an 8 KB EEPROM
     0000             (    constants.asm):00008         RTCFEAT equ     0               Cool but the reliability feature must go...
     0000             (    constants.asm):00009         DEBUG   equ     0               Enforce assertions and miscellaneous checks
     0001             (    constants.asm):00010         HVNMI   equ     1               NMI handler support
     0000             (    constants.asm):00011         HVNMI2  equ     0               NMI handler support (async input debugging)
                      (    constants.asm):00012         * Loop count for MS. This is busy waiting, so we depend on the CPU clock speed.
     031A             (    constants.asm):00013         MSLCNT  equ     794             at 4 MHz native mode
                      (    constants.asm):00014         *MSLCNT equ     994             at 5 MHz native mode
                      (    constants.asm):00015         
                      (    constants.asm):00016         * End tunable parameters section.
                      (    constants.asm):00017         
                      (    constants.asm):00018                 IFNE    RTCFEAT
0000                  (    constants.asm):00019         RELFEAT set     0               RTCFEAT disables RELFEAT
                      (    constants.asm):00020                 ELSE
                      (    constants.asm):00021                 IFNE    HVNMI
                      (    constants.asm):00022                 IFNE    HVNMI2
0000                  (    constants.asm):00023         RELFEAT set     0               HVNMI and HVNMI2 disable RELFEAT
                      (    constants.asm):00024                 ENDC                    HVNMI2
                      (    constants.asm):00025                 ENDC                    HVNMI
                      (    constants.asm):00026                 ENDC                    RTCFEAT
                      (    constants.asm):00027         
                      (    constants.asm):00028         * Control flow stack implemented on the top of the data stack.
     E7C9             (    constants.asm):00029         CSPUSH  EQU     NPUSH  
     E7D7             (    constants.asm):00030         CSPOP   EQU     NPOP
                      (    constants.asm):00031         
                      (    constants.asm):00032         * Memory map.
     0000             (    constants.asm):00033         RAMSTRT equ     $0000
     8000             (    constants.asm):00034         RAMSIZE equ     $8000
     C000             (    constants.asm):00035         IOSTRT  equ     $C000
     E000             (    constants.asm):00036         ROMSTRT equ     $E000
     FFF0             (    constants.asm):00037         VECTBL  equ     $FFF0
                      (    constants.asm):00038         
                      (    constants.asm):00039         * Base address for global variables (direct page addressed).
     0100             (    constants.asm):00040         VARSPC  equ     $100
                      (    constants.asm):00041         
                      (    constants.asm):00042         * The 74HCT138 (U7) IO address decoder maps one 1 KB area per usable device.
     C000             (    constants.asm):00043         DEV0    equ     $C000           Compact Flash memory module (optional)
     C400             (    constants.asm):00044         DEV1    equ     $C400
     C800             (    constants.asm):00045         DEV2    equ     $C800
     CC00             (    constants.asm):00046         DEV3    equ     $CC00
     D000             (    constants.asm):00047         DEV4    equ     $D000
     D400             (    constants.asm):00048         DEV5    equ     $D400           MC146818 RTC (optional)
     D800             (    constants.asm):00049         DEV6    equ     $D800           HD63B50 unit 0
     DC00             (    constants.asm):00050         DEV7    equ     $DC00
                      (    constants.asm):00051         
     D800             (    constants.asm):00052         ACIACTL equ     DEV6
     D801             (    constants.asm):00053         ACIADAT equ     DEV6+1
                      (    constants.asm):00054         
                      (    constants.asm):00055         * ACIA control register bits.
     0003             (    constants.asm):00056         ACRST   equ     %00000011       ACIA master reset
                      (    constants.asm):00057         
                      (    constants.asm):00058         * 1.84320 MHz Y1: 115200 bps in the direct path, 38400 bps in the DIV3 path
     0001             (    constants.asm):00059         ACDIV16 equ     %00000001       ACIA div 16
                      (    constants.asm):00060         
     0014             (    constants.asm):00061         AC8N1   equ     %00010100       ACIA 8N1
     0000             (    constants.asm):00062         ACRTS0  equ     %00000000       ACIA RTS# low
     0040             (    constants.asm):00063         ACRTS1  equ     %01000000       ACIA RTS# high
     0080             (    constants.asm):00064         ACRDINT equ     %10000000       IRQ on RDRF
                      (    constants.asm):00065         
     0043             (    constants.asm):00066         ACIRSET equ     ACRTS1|ACRST
     00D5             (    constants.asm):00067         ACIRTS1 equ     ACRTS1|ACRDINT|AC8N1|ACDIV16
     0095             (    constants.asm):00068         ACIRTS0 equ     ACRTS0|ACRDINT|AC8N1|ACDIV16
                      (    constants.asm):00069         
                      (    constants.asm):00070         * ACIA status register bits.
     0001             (    constants.asm):00071         ACIRDRF equ     %00000001       Receive data register full
     0002             (    constants.asm):00072         ACITDRE equ     %00000010       Transmit data register empty
     0020             (    constants.asm):00073         ACIOVRN equ     %00100000       Overrun status register bit
     0080             (    constants.asm):00074         ACIISVC equ     %10000000       Interrupt needs servicing
                      (    constants.asm):00075         
                      (    constants.asm):00076         * Compact Flash parameters.
     C000             (    constants.asm):00077         CFBASE  equ     DEV0
     C000             (    constants.asm):00078         CFDATAR equ     CFBASE          R/W data register
     C001             (    constants.asm):00079         CFERROR equ     CFBASE+1        RO error register
     C001             (    constants.asm):00080         CFFEATR equ     CFBASE+1        WO features register
     C002             (    constants.asm):00081         CFSCNTR equ     CFBASE+2        R/W sector count register
     C003             (    constants.asm):00082         CFSNUMR equ     CFBASE+3        R/W sector number register
     C004             (    constants.asm):00083         CFCLOWR equ     CFBASE+4        R/W cylinder low register
     C005             (    constants.asm):00084         CFCHIGR equ     CFBASE+5        R/W cylinder high register
     C006             (    constants.asm):00085         CFDRHDR equ     CFBASE+6        R/W drive/head register
     C007             (    constants.asm):00086         CFSTATR equ     CFBASE+7        RO status register
     C007             (    constants.asm):00087         CFCOMDR equ     CFBASE+7        WO command register
                      (    constants.asm):00088         
                      (    constants.asm):00089         * CF status bits.
     0080             (    constants.asm):00090         CFBSYB  equ     %10000000       BSY status bit
     0040             (    constants.asm):00091         CFRDYB  equ     %01000000       RDY status bit
     0020             (    constants.asm):00092         CFDWFB  equ     %00100000       DWF status bit (not used)
     0010             (    constants.asm):00093         CFDSCB  equ     %00010000       DSC status bit (not used)
     0008             (    constants.asm):00094         CFDRQB  equ     %00001000       DRQ status bit
     0001             (    constants.asm):00095         CFERRB  equ     %00000001       ERR status bit
                      (    constants.asm):00096         
     0200             (    constants.asm):00097         CFSCSZ  equ     $200            Compact Flash (IDE) sector size
                      (    constants.asm):00098         
                      (    constants.asm):00099         * CF commands.
     00EC             (    constants.asm):00100         CFIDDEV equ     $EC             Identify Device
     00EF             (    constants.asm):00101         CFSETFT equ     $EF             Set Feature
     0020             (    constants.asm):00102         CFRSCTS equ     $20             Read Sectors
     0030             (    constants.asm):00103         CFWSCTS equ     $30             Write Sectors
                      (    constants.asm):00104         
                      (    constants.asm):00105         * Buffer in-memory structure:
                      (    constants.asm):00106         * data: 1024 bytes.
                      (    constants.asm):00107         * terminator: 1 byte set to 0.
                      (    constants.asm):00108         * flags: 1 byte.
                      (    constants.asm):00109         * blknum: 2 bytes.
     0001             (    constants.asm):00110         BINUSE  equ     1               Buffer is allocated (the blknum field is valid)
     0002             (    constants.asm):00111         BMAPPD  equ     2               Block has been read from the CF device
     0004             (    constants.asm):00112         BDIRTY  equ     4               Block has been marked for update
     0400             (    constants.asm):00113         BLKSIZ  equ     2*CFSCSZ        Block size is 2 CF sectors (1 KB)
                      (    constants.asm):00114         * Buffer field offsets.
     0400             (    constants.asm):00115         BOTERM  equ     BLKSIZ          Base buffer to the 'terminator' field offset
     0401             (    constants.asm):00116         BOFLAGS equ     BLKSIZ+1        Base buffer to the 'flag' field offset
     0402             (    constants.asm):00117         BOBLKNO equ     BLKSIZ+2        Base buffer to the 'blknum' field offset
                      (    constants.asm):00118         
     0410             (    constants.asm):00119         BFDISP  equ     BUF1-BUF0       Offset between resident buffers
                      (    constants.asm):00120         
                      (    constants.asm):00121         * MC146818 RTC registers.
     D400             (    constants.asm):00122         RTAS    equ     DEV5            Latch target register address offset
     D401             (    constants.asm):00123         RTDS    equ     (DEV5+1)        Actual target register access
                      (    constants.asm):00124         * RTC internal register offsets.
     0000             (    constants.asm):00125         RTOSEC  equ     0               Seconds
     0001             (    constants.asm):00126         RTOSECA equ     1               Seconds alarm
     0002             (    constants.asm):00127         RTOMIN  equ     2               Minutes
     0003             (    constants.asm):00128         RTOMINA equ     3               Minutes alarm
     0004             (    constants.asm):00129         RTOHOUR equ     4               Hours
     0005             (    constants.asm):00130         RTOHRA  equ     5               Hours alarm
     0006             (    constants.asm):00131         RTODOW  equ     6               Day of week
     0007             (    constants.asm):00132         RTODOM  equ     7               Day of month
     0008             (    constants.asm):00133         RTOMON  equ     8               Month
     0009             (    constants.asm):00134         RTOYEAR equ     9               Year
     000A             (    constants.asm):00135         RTOREGA equ     10              Register A
     000B             (    constants.asm):00136         RTOREGB equ     11              Register B
     000C             (    constants.asm):00137         RTOREGC equ     12              Register C
     000D             (    constants.asm):00138         RTOREGD equ     13              Register D
     000E             (    constants.asm):00139         RTOUMB  equ     14              Base of user defined NVRAM storage
     0032             (    constants.asm):00140         RTUMSZ  equ     50              Size of user defined NVRAM storage
     003F             (    constants.asm):00141         RTOPRES equ     (RTOUMB+RTUMSZ-1) RTC NVRAM offset for dectecting dev presence
                      (    constants.asm):00142         
                      (    constants.asm):00143         * Register A bits.
     0080             (    constants.asm):00144         RTAUIP  equ     $80             Update in progress
     0070             (    constants.asm):00145         RTADVRS equ     $70             Divider reset, not in operation
     0020             (    constants.asm):00146         RTADV32 equ     $20             In operation, 32 KHz time base
     000A             (    constants.asm):00147         RTARS64 equ     $A              32 KHz time base, 64 Hz PI (every 15.625 ms)
                      (    constants.asm):00148         
                      (    constants.asm):00149         * Register B bits.
     0080             (    constants.asm):00150         RTBSET  equ     $80
     0040             (    constants.asm):00151         RTBPIE  equ     $40
     0004             (    constants.asm):00152         RTBDM   equ     4               Set to 1 for binary register contents
     0002             (    constants.asm):00153         RTB24   equ     2               Set to 1 for 24 hour format
                      (    constants.asm):00154         
                      (    constants.asm):00155         * Register C bits.
     0040             (    constants.asm):00156         RTCPF   equ     $40             Periodic interrupt pending flag
                      (    constants.asm):00157         
                      (    constants.asm):00158         * ASCII trivia.
     0000             (    constants.asm):00159         NUL     equ     0               End of string marker
     0003             (    constants.asm):00160         ETX     equ     3               Control-C (intr)
     0008             (    constants.asm):00161         BS      equ     8               Backspace
     0009             (    constants.asm):00162         HT      equ     9               Horizontal tab
     000A             (    constants.asm):00163         LF      equ     $0A             Aka new line
     000D             (    constants.asm):00164         CR      equ     $0D             Carriage return
     0015             (    constants.asm):00165         NAK     equ     $15             Control-U (kill)
     0020             (    constants.asm):00166         SP      equ     $20             Aka BL in Forth
     0013             (    constants.asm):00167         XOFF    equ     $13             Aka DC3
     0011             (    constants.asm):00168         XON     equ     $11             Aka DC1
                      (    constants.asm):00169         
                      (    constants.asm):00170         * Stack sizes.
     00C0             (    constants.asm):00171         NSTKSZ  equ     192             Expressed in bytes. Now only limited by RAM size
     0080             (    constants.asm):00172         RSTKSZ  equ     128             Expressed in bytes
                      (    constants.asm):00173         
                      (    constants.asm):00174         * Buffer sizes.
     0084             (    constants.asm):00175         CMDBFSZ equ     132             Command line entry buffer
     0050             (    constants.asm):00176         HEXBFSZ equ     80
     0048             (    constants.asm):00177         TBUFSZ  equ     72              Used by VLIST to print word name and CVNSTR
     0051             (    constants.asm):00178         PADBSZ  equ     1+80            79-STANDARD mandates a minimum of 64 bytes
     0040             (    constants.asm):00179         SERBSZ  equ     64              Serial buffer size. Needs to be a power of 2
                      (    constants.asm):00180         
                      (    constants.asm):00181         * Dictionary flag masks.
     0080             (    constants.asm):00182         IMDFLM  equ     $80             Immediate flag mask
     0040             (    constants.asm):00183         DEFFLM  equ     $40             Compilation only flag mask
                      (    constants.asm):00184                 IFNE    RELFEAT
     0020             (    constants.asm):00185         MONFLM  equ     $20             Monitored flag mask. This indicates that the
                      (    constants.asm):00186         *                               word to which it relates might be checked for
                      (    constants.asm):00187         *                               integrity. This applies by default to all words
                      (    constants.asm):00188         *                               defined with : and all constants. It might
                      (    constants.asm):00189         *                               also apply to any other CREATEd object by
                      (    constants.asm):00190         *                               resorting to the MONITOR word. Using MONITOR
                      (    constants.asm):00191         *                               on variable word contents is guaranteed to
                      (    constants.asm):00192         *                               raise ICHECK's attention.
                      (    constants.asm):00193                 ENDC
                      (    constants.asm):00194         
     001F             (    constants.asm):00195         WRLNMSK equ     $1F             31 character is the maximum word length
                      (    constants.asm):00196         
                      (    constants.asm):00197         * 6309 opcodes.
     008E             (    constants.asm):00198         LDXOPC  equ     $8E             LDX (immediate)
     007E             (    constants.asm):00199         JMPOPC  equ     $7E             JMP (extended)
     00BD             (    constants.asm):00200         JSROPC  equ     $BD             JSR (extended)
     0039             (    constants.asm):00201         RTSOPC  equ     $39             RTS (inherent)
     2503             (    constants.asm):00202         BCSOPC  equ     $2503           BCS *+5 (relative)
     2603             (    constants.asm):00203         BNEOPC  equ     $2603           BNE *+5 (relative)
     00C7             (    constants.asm):00204         ILLOPC  equ     $C7             An illegal operation code. Meant to raise a trap
                      (    constants.asm):00205         
     0001             (    constants.asm):00206         CFLAG   equ     1               CC bit 0 (C)
     0004             (    constants.asm):00207         ZFLAG   equ     4               CC bit 2 (Z)
     0010             (    constants.asm):00208         IFLAG   equ     $10             CC bit 4 (I)
     0040             (    constants.asm):00209         FFLAG   equ     $40             CC bit 6 (F)
                      (    constants.asm):00210         
                      (    constants.asm):00211         * RAM based execution token for @.
     0C64             (    constants.asm):00212         RAMFTCH set     WDICSPC+4       Dictionary header overhead is word's length + 3
                      (    constants.asm):00213                 IFNE    RELFEAT         The reliability features adds one byte to the
     0C65             (    constants.asm):00214         RAMFTCH set     WDICSPC+5       header: a checksum.
                      (    constants.asm):00215                 ENDC
                      (    constants.asm):00216         
                      (        forth.asm):00124         
                      (        forth.asm):00125         * Unchecked NPUSH. This is for situations in which there is absolutely no
                      (        forth.asm):00126         * chance of overflow. For instance, in case we just popped 2 cells and push
                      (        forth.asm):00127         * back one or two.
0000                  (        forth.asm):00128         UCNPUSH MACRO   NOEXPAND
                      (        forth.asm):00129                 pshu    x
                      (        forth.asm):00130                 ENDM
                      (        forth.asm):00131         
                      (        forth.asm):00132         * Unchecked NPOP. To be used only after trusted words have been invoked, i.e.
                      (        forth.asm):00133         * when one is positively sure that the data stack contains at least one cell.
0000                  (        forth.asm):00134         UCNPOP  MACRO   NOEXPAND
                      (        forth.asm):00135                 pulu    x
                      (        forth.asm):00136                 ENDM
                      (        forth.asm):00137         
                      (        forth.asm):00138         * Make sure minimum data stack requirements are satisfied upon word entry.
                      (        forth.asm):00139         * The requirement is expressed in cell size--2 bytes on the 6309.
                      (        forth.asm):00140         * \1 specifies the required number of cells.
0000                  (        forth.asm):00141         MINDREQ MACRO   NOEXPAND
                      (        forth.asm):00142                 ldd     #NSTBOT-(\1*2)  Cell count one expects to be stacked up
                      (        forth.asm):00143                 bra     CHKNDPT         No return if the condition is not met
                      (        forth.asm):00144                 ENDM
                      (        forth.asm):00145         
                      (        forth.asm):00146         * Reliability feature support: execution tokens.
                      (        forth.asm):00147         * \1 has the opcode we want to emit.
                      (        forth.asm):00148         * \2 has the execution token address, as if the header overhead always
                      (        forth.asm):00149         * was 3 bytes.
0000                  (        forth.asm):00150         RFXT    MACRO   NOEXPAND
                      (        forth.asm):00151                 IFNE    RELFEAT
                      (        forth.asm):00152                 \1      \2+1
                      (        forth.asm):00153                 ELSE
                      (        forth.asm):00154                 \1      \2
                      (        forth.asm):00155                 ENDC                    RELFEAT
                      (        forth.asm):00156                 ENDM
                      (        forth.asm):00157         
                      (        forth.asm):00158         * Reliability feature support: variable word header contents.
                      (        forth.asm):00159         * This is a dummy checksum only used for EEPROM resident words.
                      (        forth.asm):00160         * Those never are checked for code integrity by MONITOR.
0000                  (        forth.asm):00161         RFCS    MACRO   NOEXPAND
                      (        forth.asm):00162                 IFNE    RELFEAT
                      (        forth.asm):00163                 fcb     ILLOPC          Illegal opcode
                      (        forth.asm):00164                 ENDC                    RELFEAT
                      (        forth.asm):00165                 ENDM
                      (        forth.asm):00166         
                      (        forth.asm):00167         *******************************************************************************
                      (        forth.asm):00168         * RAM definitions. We cannot initialize globals from the assembly defs.
                      (        forth.asm):00169         * All we can do here is define addresses and size things up.
                      (        forth.asm):00170         
                      (        forth.asm):00171         * RAMSTART is 0. We leave page 0 unused as a bug proof area.
                      (        forth.asm):00172         * When compiled in debug mode, this area is filled with illegal
                      (        forth.asm):00173         * instruction opcodes ($C7).
                      (        forth.asm):00174         
                      (        forth.asm):00175                 org     VARSPC
                      (        forth.asm):00176         
                      (        forth.asm):00177         * Global pointers.
0100                  (        forth.asm):00178         RSP     rmb     2               The return stack pointer
0102                  (        forth.asm):00179         TOKENSP rmb     2               Token start pointer (STRS)
0104                  (        forth.asm):00180         TOKENEP rmb     2               Token end pointer (STRE)
0106                  (        forth.asm):00181         LSTWAD  rmb     2               Last defined word header pointer--LAST
0108                  (        forth.asm):00182         DICEND  rmb     2               Current end of the dictionary--HERE
010A                  (        forth.asm):00183         BLSTWAD rmb     2               Backup (was IX)
010C                  (        forth.asm):00184         BDICEND rmb     2               Backup (was IY)
010E                  (        forth.asm):00185         PLOAD   rmb     2               Word payload if found by SWDIC
0110                  (        forth.asm):00186         FNDPLD  rmb     2               Last code payload reported by FIND
0112                  (        forth.asm):00187         RECADDR rmb     2               Used by RECURSE
0114                  (        forth.asm):00188         JSRLAST rmb     2               Last compilation address of #JSROPC
0116                  (        forth.asm):00189         FWDREF  rmb     2               Address of the last forward reference
0118                  (        forth.asm):00190         VLPRVEP rmb     2               Used in VLIST to compute word code length
011A                  (        forth.asm):00191         VLPRVHD rmb     2               Used in VLIST to compute word code length
011C                  (        forth.asm):00192         MRUBUFA rmb     2               Most recently used buffer address
011E                  (        forth.asm):00193         BSBFADR rmb     2               Base buffer address for the input stream
                      (        forth.asm):00194         
                      (        forth.asm):00195         * Global variables.
0120                  (        forth.asm):00196         UBASE   rmb     2               Base for numbers input and output--BASE
0122                  (        forth.asm):00197         USTATE  rmb     2               0 if interpreting, 1 if compiling--STATE
0124                  (        forth.asm):00198         UTOIN   rmb     2               User variable for >IN
0126                  (        forth.asm):00199         UBLK    rmb     2               User variable for BLK
0128                  (        forth.asm):00200         USCR    rmb     2               User variable for SCR (output for LIST)
012A                  (        forth.asm):00201         TIKSHI  rmb     2               RTC clock ticks updated on FIRQ
012C                  (        forth.asm):00202         TIKSLOW rmb     2               RTC clock ticks updated on FIRQ
                      (        forth.asm):00203                 IFNE    DEBUG
012E                  (        forth.asm):00204         CCREG   rmb     2               A DEBUG variable for predicates (see CMP2)
                      (        forth.asm):00205                 ENDC                    DEBUG
                      (        forth.asm):00206                 IFNE    HVNMI
                      (        forth.asm):00207                 IFNE    HVNMI2
012E                  (        forth.asm):00208         SBDROPC rmb     2               Char. drop count for serial input (see FIRQHDL)
                      (        forth.asm):00209                 ENDC                    HVNMI2
                      (        forth.asm):00210                 ENDC                    HVNMI
012E                  (        forth.asm):00211         ANCMPF  rmb     1               Anonymous compilation flag
012F                  (        forth.asm):00212         BALNCD  rmb     1               Balanced flag for control flow constructs
0130                  (        forth.asm):00213         BASBKUP rmb     1               BASE backup when a base prefix is in use
0131                  (        forth.asm):00214         CMDLNSZ rmb     1               Entered character count in GETS (INTERP)
0132                  (        forth.asm):00215         RDEPTH  rmb     1               Return stack depth in cells
0133                  (        forth.asm):00216         DIVFCN  rmb     1               Flag used by /, MOD and /MOD
0134                  (        forth.asm):00217         F83DIVF rmb     1               FORTH-83 adjusment flag for floored division
0135                  (        forth.asm):00218         STSLFCN rmb     1               Flag used by */, */MOD
0136                  (        forth.asm):00219         CVTFCN  rmb     1               CVT: 0 => # semantics, 1 => #S semantics
0137                  (        forth.asm):00220         ISNEGF  rmb     1               Number being scanned is negative
0138                  (        forth.asm):00221         ISDBLF  rmb     1               Number being scanned is a double
0139                  (        forth.asm):00222         CVISSGN rmb     1               Flag: should CVNSTR consider numbers as signed
013A                  (        forth.asm):00223         CURTOKL rmb     1               Current token length. Set by SWDIC
013B                  (        forth.asm):00224         IMDFLG  rmb     1               Immediate flag
013C                  (        forth.asm):00225         DEFFLG  rmb     1               Define flag
013D                  (        forth.asm):00226         NBCTFB0 rmb     1               NZ if -->/CONTINUED invoked from the console
013E                  (        forth.asm):00227         RTCAVL  rmb     1               NZ if real time clock is present
013F                  (        forth.asm):00228         CFCARDP rmb     1               NZ if CF card present
0140                  (        forth.asm):00229         CFCMMIR rmb     1               Last CF command issued
0141                  (        forth.asm):00230         CFERRCD rmb     1               and the corresponding error code
                      (        forth.asm):00231         
                      (        forth.asm):00232         * Serial buffer parameters. Queing happens on FIRQ.
                      (        forth.asm):00233         * Dequeing occurs when GETCH is invoked.
0142                  (        forth.asm):00234         SERBENQ rmb     1               Enqueue offset
0143                  (        forth.asm):00235         SERBDEQ rmb     1               Dequeue offset
0144                  (        forth.asm):00236         SERBCNT rmb     1               Buffer byte count
0145                  (        forth.asm):00237         XMITOK  rmb     1               Software flow control on output flag
0146                  (        forth.asm):00238         SERBUF  rmb     SERBSZ          The actual buffer
                      (        forth.asm):00239         
0186                  (        forth.asm):00240         PADBUF  rmb     PADBSZ          PAD lives here. Used by <#, #, #S, #>
                      (        forth.asm):00241         
                      (        forth.asm):00242         * The normal (data) stack.
01D7 00               (        forth.asm):00243                 align   2
     01D8             (        forth.asm):00244         NSTTOP  equ     *               U's value when the data stack is full
01D8                  (        forth.asm):00245                 rmb     NSTKSZ
     0298             (        forth.asm):00246         NSTBOT  equ     *               U's value when the data stack is empty
                      (        forth.asm):00247         
                      (        forth.asm):00248         * The return stack.
     0298             (        forth.asm):00249         RSTTOP  equ     *
0298                  (        forth.asm):00250                 rmb     RSTKSZ
     0318             (        forth.asm):00251         RSTBOT  equ     *
                      (        forth.asm):00252         
0318                  (        forth.asm):00253         CMDBUF  rmb     CMDBFSZ
039C                  (        forth.asm):00254         HEXBUF  rmb     HEXBFSZ
                      (        forth.asm):00255         
03EC                  (        forth.asm):00256         TBUFF   rmb     TBUFSZ          Output for CVNSTR
                      (        forth.asm):00257         
0434 0000000000000000 (        forth.asm):00258                 align   16
     00000000
0440                  (        forth.asm):00259         BUF0    rmb     BLKSIZ+4
                      (        forth.asm):00260         
0844 0000000000000000 (        forth.asm):00261                 align   16
     00000000
0850                  (        forth.asm):00262         BUF1    rmb     BLKSIZ+4
                      (        forth.asm):00263         
                      (        forth.asm):00264         *******************************************************************************
                      (        forth.asm):00265         * Writable dictionary section begins right here. We cannot have anything
                      (        forth.asm):00266         * statically defined at this point. Therefore, FORTHIN moves the code for @
                      (        forth.asm):00267         * to this location and sets up DICEND and LSTWAD accordingly. All the RAM
                      (        forth.asm):00268         * beyond this point (after the reallocated @ implementation) is user defined
                      (        forth.asm):00269         * material. Note that builtin words, though they cannot be forgotten (to the
                      (        forth.asm):00270         * extent they are ROM resident--not to mention inter-word dependencies),
                      (        forth.asm):00271         * might still be overridden by user definitions. VLIST will happily ignore
                      (        forth.asm):00272         * that fact and list everything in the dictionary linked list order.
                      (        forth.asm):00273         
0C54 0000000000000000 (        forth.asm):00274                 align   16
     00000000
     0C60             (        forth.asm):00275         WDICSPC equ     *
                      (        forth.asm):00276         
                      (        forth.asm):00277         *******************************************************************************
                      (        forth.asm):00278         * ROM code begins.
                      (        forth.asm):00279         
                      (        forth.asm):00280                 org     ROMSTRT
                      (        forth.asm):00281         * Trap handler: division by zero or illegal opcode. See page 4-10 of "The 6309
                      (        forth.asm):00282         * Book" for a description of interrupt stacks in native 6309 mode.
E000 113C40           (        forth.asm):00283 (4)     IODZHDL bitmd   #$40            Illegal opcode?
E003 2705             (        forth.asm):00284 (3)             beq     @iodzh1
E005 8EFE40           (        forth.asm):00285 (3)             ldx     #IOPERRM
E008 2008             (        forth.asm):00286 (3)             bra     @iodxh2
E00A 113C80           (        forth.asm):00287 (4)     @iodzh1 bitmd   #$80            Division by zero?
E00D 2726             (        forth.asm):00288 (3)             beq     @iodzh3         And you may ask yourself, well
                      (        forth.asm):00289         *                               How did I get here?
E00F 8EFE55           (        forth.asm):00290 (3)             ldx     #DV0ERRM
E012 BDE2DE           (        forth.asm):00291 (7)     @iodxh2 jsr     PUTS
E015 EC6C             (        forth.asm):00292 (5+1)           ldd     12,s            Return code address (PC)
E017 108E039C         (        forth.asm):00293 (4)             ldy     #HEXBUF
E01B BDE180           (        forth.asm):00294 (7)             jsr     HDMP4   
E01E 8E039C           (        forth.asm):00295 (3)             ldx     #HEXBUF
E021 BDE2DE           (        forth.asm):00296 (7)             jsr     PUTS
E024 BDE2EB           (        forth.asm):00297 (7)             jsr     PUTCR
E027 8EE742           (        forth.asm):00298 (3)             ldx     #ERRHD1
E02A AF6C             (        forth.asm):00299 (5+1)           stx     12,s            Resume execution in the error handler
E02C 8EE000           (        forth.asm):00300 (3)             ldx     #IODZHDL
E02F AF68             (        forth.asm):00301 (5+1)           stx     8,s             With Y set to IODZHDL
E031 8603             (        forth.asm):00302 (2)             lda     #3              And user ABORT error code
E033 A762             (        forth.asm):00303 (4+1)           sta     2,s             Passed back through B
E035 3B               (        forth.asm):00304 (17+?)  @iodzh3 rti
                      (        forth.asm):00305         
     E036             (        forth.asm):00306         SWI3HDL equ     *
     E036             (        forth.asm):00307         SWI2HDL equ     *
     E036             (        forth.asm):00308         IRQHDL  equ     *
     E036             (        forth.asm):00309         SWIHDL  equ     *
                      (        forth.asm):00310                 IFEQ    HVNMI
E036                  (        forth.asm):00311         NMIHDL                          These should never happen
                      (        forth.asm):00312                 ENDC
E036 3B               (        forth.asm):00313 (17+?)          rti
                      (        forth.asm):00314         
                      (        forth.asm):00315         * Interrupts are disabled by default upon reset.
                      (        forth.asm):00316         * NMI# will not be "armed" until S is initiliazed.
E037 113D01           (        forth.asm):00317 (5)     RSTHDL  ldmd    #1              Establish 6309 native mode
                      (        forth.asm):00318         
E03A 8643             (        forth.asm):00319 (2)             lda     #ACIRSET
E03C B7D800           (        forth.asm):00320 (4)             sta     ACIACTL         ACIA master reset
E03F 86D5             (        forth.asm):00321 (2)             lda     #ACIRTS1
E041 B7D800           (        forth.asm):00322 (4)             sta     ACIACTL         RTS# high, 8N1
                      (        forth.asm):00323         
E044 8EFDBC           (        forth.asm):00324 (3)             ldx     #BOOTMSG        Identity statement
                      (        forth.asm):00325         
                      (        forth.asm):00326         * Send the NUL terminated string pointed to by X to the ACIA.
                      (        forth.asm):00327         * The RAM is not yet assumed to be working.
E047 C602             (        forth.asm):00328 (2)     INIT    ldb     #ACITDRE
E049 A680             (        forth.asm):00329 (4+1)   @init0  lda     ,x+
E04B 270A             (        forth.asm):00330 (3)             beq     RAMCHK          NUL marks the end of the string
E04D F5D800           (        forth.asm):00331 (4)     @init1  bitb    ACIACTL         Wait for TDRE bit to be set
E050 27FB             (        forth.asm):00332 (3)             beq     @init1
E052 B7D801           (        forth.asm):00333 (4)             sta     ACIADAT         Transmit data
E055 20F2             (        forth.asm):00334 (3)             bra     @init0          Next char, if any
                      (        forth.asm):00335         
                      (        forth.asm):00336         * RAM0 32 KB self test (destructive).
E057 8E0000           (        forth.asm):00337 (3)     RAMCHK  ldx     #RAMSTRT
E05A AF84             (        forth.asm):00338 (5+0)   @ramch1 stx     ,x
E05C AC84             (        forth.asm):00339 (5+0)           cmpx    ,x
E05E 2609             (        forth.asm):00340 (3)             bne     RAMFAIL
E060 3002             (        forth.asm):00341 (4+1)           leax    2,x
E062 8C8000           (        forth.asm):00342 (3)             cmpx    #RAMSTRT+RAMSIZE
E065 26F3             (        forth.asm):00343 (3)             bne     @ramch1
E067 2012             (        forth.asm):00344 (3)             bra     RAMOK
                      (        forth.asm):00345         
E069 C680             (        forth.asm):00346 (2)     RAMFAIL ldb     #128
E06B 108E8000         (        forth.asm):00347 (4)     @ramf1  ldy     #$8000
E06F 313F             (        forth.asm):00348 (4+1)   @ramf2  leay    -1,y
E071 26FC             (        forth.asm):00349 (3)             bne     @ramf2
E073 5A               (        forth.asm):00350 (1)             decb
E074 26F5             (        forth.asm):00351 (3)             bne     @ramf1
E076 8EFE27           (        forth.asm):00352 (3)             ldx     #RAMFM
E079 20CC             (        forth.asm):00353 (3)             bra     INIT            Here we go again
                      (        forth.asm):00354         
                      (        forth.asm):00355         * RAM Initialization to all $C7 if DEBUG mode is enabled else zeroes.
E07B 8E0000           (        forth.asm):00356 (3)     RAMOK   ldx     #RAMSTRT
E07E 3101             (        forth.asm):00357 (4+1)           leay    1,x
E080 10867FFF         (        forth.asm):00358 (4)             ldw     #RAMSIZE-1
                      (        forth.asm):00359                 IFNE    DEBUG
                      (        forth.asm):00360                 lda     #ILLOPC
                      (        forth.asm):00361                 sta     ,x
                      (        forth.asm):00362                 ELSE
E084 6F84             (        forth.asm):00363 (6+0)           clr     ,x
                      (        forth.asm):00364                 ENDC                    DEBUG
E086 113812           (        forth.asm):00365 (6+?)           tfm     x+,y+
                      (        forth.asm):00366         
                      (        forth.asm):00367         * Initialize the system stack pointer and the direct page base address register.
E089 10CE8000         (        forth.asm):00368 (4)             lds     #RAMSTRT+RAMSIZE
E08D 8601             (        forth.asm):00369 (2)             lda     #VARSPC/256
E08F 1F8B             (        forth.asm):00370 (4)             tfr     a,dp
     01               (        forth.asm):00371                 SETDP   VARSPC/256
                      (        forth.asm):00372         
                      (        forth.asm):00373         * Serial buffer parameters initialization. We are doing this here because
                      (        forth.asm):00374         * PUTS requires prior software flow control initialization.
                      (        forth.asm):00375                 IFNE    DEBUG
                      (        forth.asm):00376                 clrd
                      (        forth.asm):00377                 std     SERBENQ         Two birds with one stone
                      (        forth.asm):00378                 sta     SERBCNT
                      (        forth.asm):00379                 IFNE    HVNMI
                      (        forth.asm):00380                 IFNE    HVNMI2
                      (        forth.asm):00381                 std     SBDROPC         Initialize chararacter drop count
                      (        forth.asm):00382                 ENDC                    HVNMI2
                      (        forth.asm):00383                 ENDC                    HVNMI
                      (        forth.asm):00384                 ENDC                    DEBUG
E091 8601             (        forth.asm):00385 (2)             lda     #1              Initialize software flow control on output
E093 9745             (        forth.asm):00386 (3)             sta     XMITOK
                      (        forth.asm):00387         
E095 8EFE17           (        forth.asm):00388 (3)             ldx     #RAMOKM
E098 BDE2DE           (        forth.asm):00389 (7)             jsr     PUTS
E09B BDE344           (        forth.asm):00390 (7)             jsr     FORTHIN         Global variables initialization
E09E BDE8AB           (        forth.asm):00391 (7)             jsr     CFINIT          CompactFlash card initialization
                      (        forth.asm):00392                 IFNE    RTCFEAT
                      (        forth.asm):00393                 jsr     RTCINIT         Real time clock initialization
                      (        forth.asm):00394                 ENDC                    RTCFEAT
                      (        forth.asm):00395         
                      (        forth.asm):00396         * Lower RTS and enable FIRQ.
E0A1 8695             (        forth.asm):00397 (2)             lda     #ACIRTS0
E0A3 B7D800           (        forth.asm):00398 (4)             sta     ACIACTL
E0A6 1CBF             (        forth.asm):00399 (2)             andcc   #^FFLAG
                      (        forth.asm):00400         
E0A8 0D3F             (        forth.asm):00401 (4)             tst     CFCARDP
E0AA 2706             (        forth.asm):00402 (3)             beq     INTERP
                      (        forth.asm):00403         
                      (        forth.asm):00404         * A CF card is present, LOAD block #1.
E0AC 8E0001           (        forth.asm):00405 (3)             ldx     #1
E0AF BDF7A2           (        forth.asm):00406 (7)             jsr     LOAD1
                      (        forth.asm):00407         
                      (        forth.asm):00408         * The interpreter main loop.
E0B2 104F             (        forth.asm):00409 (2)     INTERP  clrd
E0B4 DD26             (        forth.asm):00410 (4)             std     UBLK            Interpreting from the console. Set BLK to 0
E0B6 DD24             (        forth.asm):00411 (4)             std     UTOIN
E0B8 8E0318           (        forth.asm):00412 (3)             ldx     #CMDBUF
E0BB 9F1E             (        forth.asm):00413 (4)             stx     BSBFADR
E0BD C683             (        forth.asm):00414 (2)             ldb     #CMDBFSZ-1      NUL terminator is not included in the char count
E0BF BDE301           (        forth.asm):00415 (7)             jsr     GETS            Acquire command from the console
                      (        forth.asm):00416         * Additional setup in case the ANSI \ is used.
E0C2 D731             (        forth.asm):00417 (3)             stb     CMDLNSZ         GETS returns the entered character count via B
                      (        forth.asm):00418         * Additional preparation work for block support.
E0C4 0F3D             (        forth.asm):00419 (5)             clr     NBCTFB0         Flag whether -->/CONTINUED is called from blk 0
E0C6 8D02             (        forth.asm):00420 (6)             bsr     _INTERP
E0C8 20E8             (        forth.asm):00421 (3)     MINTLRA bra     INTERP
                      (        forth.asm):00422         
                      (        forth.asm):00423         * The interpreter itself.
E0CA BDE367           (        forth.asm):00424 (7)     _INTERP jsr     SCNSTOK         Scan for the beginning of a word at address X
E0CD 2715             (        forth.asm):00425 (3)             beq     @oeistr         This is the end
E0CF 1F10             (        forth.asm):00426 (4)             tfr     x,d             Starting token address to D
E0D1 BDE162           (        forth.asm):00427 (7)             jsr     U2INFRD         Derive >IN from D
E0D4 0D23             (        forth.asm):00428 (4)             tst     USTATE+1        We do ignore the upper byte
E0D6 263C             (        forth.asm):00429 (3)             bne     COMP            We are compiling
E0D8 BDE482           (        forth.asm):00430 (7)             jsr     SWDIC           Updates TOKENEP, CURTOKL, IMDFLG/DEFFLG
E0DB 261E             (        forth.asm):00431 (3)             bne     @exec           Word found, execute it
E0DD BDE3C2           (        forth.asm):00432 (7)             jsr     NUMCVT
     E0E0             (        forth.asm):00433         NMCVIRA equ     *
E0E0 9E04             (        forth.asm):00434 (4)             ldx     TOKENEP
E0E2 20E6             (        forth.asm):00435 (3)             bra     _INTERP         Next token, please!
                      (        forth.asm):00436         * End of input stream condition is recognized. We are looking at past here.
E0E4 DC26             (        forth.asm):00437 (4)     @oeistr ldd     UBLK
E0E6 2705             (        forth.asm):00438 (3)             beq     @feedbk         We are back from the console
E0E8 0D3D             (        forth.asm):00439 (4)             tst     NBCTFB0         -->/CONTINUED invoked from the console?
E0EA 2601             (        forth.asm):00440 (3)             bne     @feedbk         Yes
E0EC 39               (        forth.asm):00441 (4)             rts                     No, we're done here
E0ED 0F3D             (        forth.asm):00442 (5)     @feedbk clr     NBCTFB0         The -->/CONTINUED exception only applies once
E0EF 8EFE3A           (        forth.asm):00443 (3)             ldx     #OKFEEDB        Provide OK feedback
E0F2 0D23             (        forth.asm):00444 (4)             tst     USTATE+1        No OK feedback if we're compiling, just CRLF
E0F4 2702             (        forth.asm):00445 (3)             beq     @fullfb
E0F6 3003             (        forth.asm):00446 (4+1)           leax    3,x             Skip the ' OK' string when compiling
E0F8 7EE2DE           (        forth.asm):00447 (3)     @fullfb jmp     PUTS            Back to whoever invoked us
E0FB 963C             (        forth.asm):00448 (3)     @exec   lda     DEFFLG
E0FD 2705             (        forth.asm):00449 (3)             beq     @introk         Compilation only flag is not set
E0FF C606             (        forth.asm):00450 (2)             ldb     #6              Incorrect STATE
E101 BDE73F           (        forth.asm):00451 (7)             jsr     ERRHDLR         No return
     E104             (        forth.asm):00452         INTISRA equ     *               For symbolic stack debugging purposes
E104 DC04             (        forth.asm):00453 (4)     @introk ldd     TOKENEP
E106 8D5A             (        forth.asm):00454 (6)             bsr     U2INFRD         Derive >IN from D
E108 8EE10F           (        forth.asm):00455 (3)             ldx     #INTRPRA        The return address
E10B 3410             (        forth.asm):00456 (4+2)           pshs    x
E10D 1F25             (        forth.asm):00457 (4)             tfr     y,pc            An indirect call to Y
E10F BDE828           (        forth.asm):00458 (7)     INTRPRA jsr     BKIN2PT         Derive X from BLK, >IN
E112 20B6             (        forth.asm):00459 (3)             bra     _INTERP
                      (        forth.asm):00460         
                      (        forth.asm):00461         * The compiler.
                      (        forth.asm):00462         * Upon entry TOKENSP has been set by a prior call to SCNSTOK.
E114 BDE482           (        forth.asm):00463 (7)     COMP    jsr     SWDIC           Updates TOKENEP, CURTOKL, IMDFLG/DEFFLG
E117 271E             (        forth.asm):00464 (3)             beq     @cmpnum         Word @ TOKENSP is not in the dictionary
E119 0D3B             (        forth.asm):00465 (4)             tst     IMDFLG
E11B 2712             (        forth.asm):00466 (3)             beq     @notimd
E11D DC04             (        forth.asm):00467 (4)             ldd     TOKENEP
E11F 8D41             (        forth.asm):00468 (6)             bsr     U2INFRD         Derive >IN from D
E121 8EE128           (        forth.asm):00469 (3)             ldx     #COMPLRA        Word is immediate. Execute it.
E124 3410             (        forth.asm):00470 (4+2)           pshs    x               Return to COMPLRA
E126 1F25             (        forth.asm):00471 (4)             tfr     y,pc            An indirect call to Y
E128 BDE828           (        forth.asm):00472 (7)     COMPLRA jsr     BKIN2PT         Derive X from BLK, >IN
E12B 9F04             (        forth.asm):00473 (4)             stx     TOKENEP
E12D 209B             (        forth.asm):00474 (3)             bra     _INTERP         Branch back to the interpreter
E12F 1F21             (        forth.asm):00475 (4)     @notimd tfr     y,x
E131 8D20             (        forth.asm):00476 (6)             bsr     EMXASXT         Emit X as an execution token
E133 9E04             (        forth.asm):00477 (4)     @cmpdon ldx     TOKENEP
E135 2093             (        forth.asm):00478 (3)             bra     _INTERP
E137 BDE3C2           (        forth.asm):00479 (7)     @cmpnum jsr     NUMCVT
     E13A             (        forth.asm):00480         NMCVCRA equ     *
E13A 0D38             (        forth.asm):00481 (4)             tst     ISDBLF
E13C 2607             (        forth.asm):00482 (3)             bne     @cmpdbl
E13E 3710             (        forth.asm):00483                 UCNPOP                  TOS to X
E140 BDE54D           (        forth.asm):00484 (7)             jsr     LITER
E143 20EE             (        forth.asm):00485 (3)             bra     @cmpdon
                      (        forth.asm):00486         * The following is some sort of half baked 2LITERAL.
                      (        forth.asm):00487         * Please note that NUMCVT guarantees us that at least two cells are stacked up.
E145 AE42             (        forth.asm):00488 (5+1)   @cmpdbl ldx     2,u
E147 BDE54D           (        forth.asm):00489 (7)             jsr     LITER           LSC
E14A AEC4             (        forth.asm):00490 (5+0)           ldx     ,u
E14C BDE54D           (        forth.asm):00491 (7)             jsr     LITER           MSC
E14F 3344             (        forth.asm):00492 (4+1)           leau    4,u             2DROP
E151 20E0             (        forth.asm):00493 (3)             bra     @cmpdon
                      (        forth.asm):00494         
                      (        forth.asm):00495         * Emit (in a code generation understanding) X as an execution token.
                      (        forth.asm):00496         * In essence, this simply inserts JSR <X> at HERE.
                      (        forth.asm):00497         * Note: this code provides support for trailing JSR elimination.
                      (        forth.asm):00498         * On input: X has the target execution token.
                      (        forth.asm):00499         * On output: Y will have HERE, A will be altered, X will be preserved.
E153 109E08           (        forth.asm):00500 (5)     EMXASXT ldy     DICEND
E156 109F14           (        forth.asm):00501 (5)             sty     JSRLAST         JSRLAST points to the latest JSR code emission
E159 86BD             (        forth.asm):00502 (2)             lda     #JSROPC         JSR extended
E15B BDE564           (        forth.asm):00503 (7)             jsr     VARCON2         Compile a JSR to the execution token
E15E 109F08           (        forth.asm):00504 (5)             sty     DICEND
E161 39               (        forth.asm):00505 (4)             rts
                      (        forth.asm):00506         
                      (        forth.asm):00507         * Derive UTOIN from D's current value. D is altered.
E162 931E             (        forth.asm):00508 (4)     U2INFRD subd    BSBFADR
E164 DD24             (        forth.asm):00509 (4)             std     UTOIN
E166 39               (        forth.asm):00510 (4)             rts
                      (        forth.asm):00511         
                      (        forth.asm):00512         * Store the HEX representation of the lower nibble of A to Y+.
E167 3404             (        forth.asm):00513 (4+1)   HEX1D   pshs    b
E169 C630             (        forth.asm):00514 (2)             ldb     #'0
E16B 840F             (        forth.asm):00515 (2)             anda    #$0f
E16D 810A             (        forth.asm):00516 (2)             cmpa    #10
E16F 2502             (        forth.asm):00517 (3)             bcs     @hex1d1
E171 C637             (        forth.asm):00518 (2)             ldb     #'A-10
E173 103098           (        forth.asm):00519 (4)     @hex1d1 addr    b,a
E176 A7A0             (        forth.asm):00520 (4+1)           sta     ,y+
E178 3504             (        forth.asm):00521 (4+1)           puls    b
E17A 39               (        forth.asm):00522 (4)             rts
                      (        forth.asm):00523         
E17B 44               (        forth.asm):00524 (1)     ADIV16  lsra
E17C 44               (        forth.asm):00525 (1)             lsra
E17D 44               (        forth.asm):00526 (1)             lsra
E17E 44               (        forth.asm):00527 (1)             lsra
E17F 39               (        forth.asm):00528 (4)             rts
                      (        forth.asm):00529         
                      (        forth.asm):00530         * Hexdump D to 4 bytes starting at Y.  Upon return, Y will point 1 byte
                      (        forth.asm):00531         * after the last character emitted. D is preserved.
E180 3406             (        forth.asm):00532 (4+2)   HDMP4   pshs    d
E182 8DF7             (        forth.asm):00533 (6)             bsr     ADIV16
E184 8DE1             (        forth.asm):00534 (6)             bsr     HEX1D
E186 A6E4             (        forth.asm):00535 (4+0)           lda     ,s
E188 8DDD             (        forth.asm):00536 (6)             bsr     HEX1D
E18A A661             (        forth.asm):00537 (4+1)           lda     1,s
E18C 8DED             (        forth.asm):00538 (6)             bsr     ADIV16
E18E 8DD7             (        forth.asm):00539 (6)             bsr     HEX1D
E190 A661             (        forth.asm):00540 (4+1)           lda     1,s
E192 8DD3             (        forth.asm):00541 (6)             bsr     HEX1D
E194 3506             (        forth.asm):00542 (4+2)           puls    d
E196 6FA4             (        forth.asm):00543 (6+0)           clr     ,y
E198 39               (        forth.asm):00544 (4)             rts
                      (        forth.asm):00545         
E199 3406             (        forth.asm):00546 (4+2)   HDMP2   pshs    d
E19B 8DDE             (        forth.asm):00547 (6)             bsr     ADIV16
E19D 8DC8             (        forth.asm):00548 (6)             bsr     HEX1D
E19F A6E4             (        forth.asm):00549 (4+0)           lda     ,s
E1A1 8DC4             (        forth.asm):00550 (6)             bsr     HEX1D
E1A3 3506             (        forth.asm):00551 (4+2)           puls    d
E1A5 6FA4             (        forth.asm):00552 (6+0)           clr     ,y
E1A7 39               (        forth.asm):00553 (4)             rts
                      (        forth.asm):00554         
                      (        forth.asm):00555                 IFNE    HVNMI
                      (        forth.asm):00556         * Add string pointed to by X starting at the address stored in Y.
E1A8 3402             (        forth.asm):00557 (4+1)   ADDS    pshs    a
E1AA A680             (        forth.asm):00558 (4+1)   @adds1  lda     ,x+
E1AC A7A0             (        forth.asm):00559 (4+1)           sta     ,y+
E1AE 26FA             (        forth.asm):00560 (3)             bne     @adds1
E1B0 3502             (        forth.asm):00561 (4+1)           puls    a
E1B2 39               (        forth.asm):00562 (4)             rts
                      (        forth.asm):00563         
E1B3 8DF3             (        forth.asm):00564 (6)     NMI2DM  bsr     ADDS
E1B5 313F             (        forth.asm):00565 (4+1)           leay    -1,y            Backward over NUL
E1B7 20E0             (        forth.asm):00566 (3)             bra     HDMP2
                      (        forth.asm):00567         
E1B9 8DED             (        forth.asm):00568 (6)     NMI4DM  bsr     ADDS
E1BB 313F             (        forth.asm):00569 (4+1)           leay    -1,y            Backward over NUL
E1BD 20C1             (        forth.asm):00570 (3)             bra     HDMP4
                      (        forth.asm):00571         
E1BF 8E03EC           (        forth.asm):00572 (3)     NMIDML  ldx     #TBUFF
E1C2 BDE2DE           (        forth.asm):00573 (7)             jsr     PUTS
E1C5 7EE2EB           (        forth.asm):00574 (3)             jmp     PUTCR
                      (        forth.asm):00575         
                      (        forth.asm):00576         * All registers are stacked in native mode.
E1C8 B6D800           (        forth.asm):00577 (4)     NMIHDL  lda     ACIACTL
E1CB 3402             (        forth.asm):00578 (4+1)           pshs    a
E1CD 9645             (        forth.asm):00579 (3)             lda     XMITOK
E1CF 3402             (        forth.asm):00580 (4+1)           pshs    a
E1D1 8601             (        forth.asm):00581 (2)             lda     #1
E1D3 9745             (        forth.asm):00582 (3)             sta     XMITOK
                      (        forth.asm):00583         * Stack structure at this point
                      (        forth.asm):00584         * 0     saved XMITOK: 1 byte
                      (        forth.asm):00585         * 1     saved ACIA status register: 1 byte
                      (        forth.asm):00586         * 2     CC
                      (        forth.asm):00587         * 3     D
                      (        forth.asm):00588         * 5     W
                      (        forth.asm):00589         * 7     DP
                      (        forth.asm):00590         * 8     X
                      (        forth.asm):00591         * 10    Y
                      (        forth.asm):00592         * 12    U
                      (        forth.asm):00593         * 14    PC
E1D5 BDE2EB           (        forth.asm):00594 (7)             jsr     PUTCR
                      (        forth.asm):00595         
                      (        forth.asm):00596         * First line: CC, D, W, DP, X, Y, U, PC, S
E1D8 108E03EC         (        forth.asm):00597 (4)             ldy     #TBUFF
E1DC 8EE20B           (        forth.asm):00598 (3)             ldx     #CCREGM
E1DF A662             (        forth.asm):00599 (4+1)           lda     2,s             CC in the system stack
E1E1 8DD0             (        forth.asm):00600 (6)             bsr     NMI2DM
                      (        forth.asm):00601         
E1E3 EC63             (        forth.asm):00602 (5+1)           ldd     3,s             D in the system stack
E1E5 8DD2             (        forth.asm):00603 (6)             bsr     NMI4DM
                      (        forth.asm):00604         
E1E7 EC65             (        forth.asm):00605 (5+1)           ldd     5,s             W in the system stack
E1E9 8DCE             (        forth.asm):00606 (6)             bsr     NMI4DM
                      (        forth.asm):00607         
E1EB A667             (        forth.asm):00608 (4+1)           lda     7,s             DP in the system stack
E1ED 8DC4             (        forth.asm):00609 (6)             bsr     NMI2DM
                      (        forth.asm):00610         
E1EF EC68             (        forth.asm):00611 (5+1)           ldd     8,s             X in the system stack
E1F1 8DC6             (        forth.asm):00612 (6)             bsr     NMI4DM
                      (        forth.asm):00613         
E1F3 EC6A             (        forth.asm):00614 (5+1)           ldd     10,s            Y in the system stack
E1F5 8DC2             (        forth.asm):00615 (6)             bsr     NMI4DM
                      (        forth.asm):00616         
E1F7 EC6C             (        forth.asm):00617 (5+1)           ldd     12,s            U in the system stack
E1F9 8DBE             (        forth.asm):00618 (6)             bsr     NMI4DM
                      (        forth.asm):00619         
E1FB EC6E             (        forth.asm):00620 (5+1)           ldd     14,s            PC in the system stack
E1FD 8DBA             (        forth.asm):00621 (6)             bsr     NMI4DM
                      (        forth.asm):00622         
E1FF 33E810           (        forth.asm):00623 (4+1)           leau    16,s            S in the system stack
E202 1F30             (        forth.asm):00624 (4)             tfr     u,d
E204 8DB3             (        forth.asm):00625 (6)             bsr     NMI4DM
                      (        forth.asm):00626         
E206 8DB7             (        forth.asm):00627 (6)             bsr     NMIDML
                      (        forth.asm):00628         
                      (        forth.asm):00629                 IFNE    HVNMI2
                      (        forth.asm):00630         * Second line: ACIST, XMTOK, SBASE, SBENQ, SBDEQ, SBCNT, SBDROPC
                      (        forth.asm):00631                 ldy     #TBUFF
                      (        forth.asm):00632                 ldx     #ACISTM
                      (        forth.asm):00633                 lda     1,s             ACIA status register in the system stack
                      (        forth.asm):00634                 bsr     NMI2DM
                      (        forth.asm):00635         
                      (        forth.asm):00636                 lda     ,s              XMITOK in the system stack
                      (        forth.asm):00637                 bsr     NMI2DM
                      (        forth.asm):00638         
                      (        forth.asm):00639                 ldd     #SERBUF         SERBUF address
                      (        forth.asm):00640                 bsr     NMI4DM
                      (        forth.asm):00641         
                      (        forth.asm):00642                 lda     SERBENQ         SERBENQ 8 bit offset
                      (        forth.asm):00643                 bsr     NMI2DM
                      (        forth.asm):00644         
                      (        forth.asm):00645                 lda     SERBDEQ         SERBDEQ 8 bit offset
                      (        forth.asm):00646                 bsr     NMI2DM
                      (        forth.asm):00647         
                      (        forth.asm):00648                 lda     SERBCNT
                      (        forth.asm):00649                 bsr     NMI2DM
                      (        forth.asm):00650         
                      (        forth.asm):00651                 ldd     SBDROPC         Number of bytes dropped because SERBUF was full
                      (        forth.asm):00652                 bsr     NMI4DM
                      (        forth.asm):00653         
                      (        forth.asm):00654                 bsr     NMIDML
                      (        forth.asm):00655                 ENDC                    HVNMI2
                      (        forth.asm):00656         
E208 3262             (        forth.asm):00657 (4+1)           leas    2,s             System stack cleanup
E20A 3B               (        forth.asm):00658 (17+?)          rti
                      (        forth.asm):00659         
E20B 43432000         (        forth.asm):00660         CCREGM  fcn     'CC '
E20F 20442000         (        forth.asm):00661         DREGM   fcn     ' D '
E213 20572000         (        forth.asm):00662         WREGM   fcn     ' W '
E217 2044502000       (        forth.asm):00663         DPREGM  fcn     ' DP '
E21C 20582000         (        forth.asm):00664         XREGM   fcn     ' X '
E220 20592000         (        forth.asm):00665         YREGM   fcn     ' Y '
E224 20552000         (        forth.asm):00666         UREGM   fcn     ' U '
E228 2050432000       (        forth.asm):00667         PCREGM  fcn     ' PC '
E22D 20532000         (        forth.asm):00668         SREGM   fcn     ' S '
                      (        forth.asm):00669                 IFNE    HVNMI2
E231                  (        forth.asm):00670         ACISTM  fcn     'AS '           ACIA status register
E231                  (        forth.asm):00671         XMTOKM  fcn     ' XO '          XMITOK--software flow control (one byte)
E231                  (        forth.asm):00672         SBASEM  fcn     ' SB '          Serial FIFO base address (two bytes)
E231                  (        forth.asm):00673         SBENQM  fcn     ' EN '          FIFO enqueue offset (one byte)
E231                  (        forth.asm):00674         SBSEQM  fcn     ' DE '          FIFO dequeue offset (one byte)
E231                  (        forth.asm):00675         SBCNTM  fcn     ' CN '          FIFO queued byte count (one byte)
E231                  (        forth.asm):00676         SBDRPM  fcn     ' DR '          Number of characters dropped (two bytes)
                      (        forth.asm):00677                 ENDC                    HVNMI2
                      (        forth.asm):00678         
                      (        forth.asm):00679                 ENDC                    HVNMI
                      (        forth.asm):00680         
                      (        forth.asm):00681         * Returns the length of the string pointed to by X (terminator excluded) in W.
E231 3410             (        forth.asm):00682 (4+2)   SLEN    pshs    x
E233 105F             (        forth.asm):00683 (2)             clrw
E235 105C             (        forth.asm):00684 (2)     @slen1  incw
E237 A680             (        forth.asm):00685 (4+1)           lda     ,x+
E239 26FA             (        forth.asm):00686 (3)             bne     @slen1
E23B 105A             (        forth.asm):00687 (2)             decw
E23D 3510             (        forth.asm):00688 (4+2)           puls    x
E23F 39               (        forth.asm):00689 (4)             rts
                      (        forth.asm):00690         
                      (        forth.asm):00691                 include console.asm
                      (      console.asm):00001         * FIRQ interrupt handler. This is entered on RDRF (input available).
E240 3416             (      console.asm):00002 (4+4)   FIRQHDL pshs    x,d
                      (      console.asm):00003                 IFNE    RTCFEAT
                      (      console.asm):00004                 jsr     RTCIHDL         Check for RTC periodic interrupt
                      (      console.asm):00005                 ENDC                    RTCFEAT
E242 B6D800           (      console.asm):00006 (4)             lda     ACIACTL
E245 8580             (      console.asm):00007 (2)             bita    #ACIISVC        Does the ACIA need input service?
E247 2731             (      console.asm):00008 (3)             beq     @nsintr         No. This is not the IRQ source we're looking for
                      (      console.asm):00009                 IFNE    DEBUG
                      (      console.asm):00010                 bita    #ACIRDRF
                      (      console.asm):00011                 beq     @nsintr         ACIA RDRF status bit should be set in all cases
                      (      console.asm):00012                 bita    #ACIOVRN        ACIA data overrun on read?
                      (      console.asm):00013                 beq     @datval         No, incoming data is valid
                      (      console.asm):00014                 ldb     ACIADAT         Clear overrun bit and INTACK
                      (      console.asm):00015                 ldb     #'%             Error indicating character is %
                      (      console.asm):00016                 bra     @chkovf
                      (      console.asm):00017                 ENDC                    DEBUG
                      (      console.asm):00018         * Out of band characters processing.
E249 F6D801           (      console.asm):00019 (4)     @datval ldb     ACIADAT         Incoming data byte to B and INTACK
E24C C103             (      console.asm):00020 (2)             cmpb    #ETX            Control-C?
E24E 272D             (      console.asm):00021 (3)             beq     @sigint         Yes
E250 C113             (      console.asm):00022 (2)             cmpb    #XOFF
E252 2742             (      console.asm):00023 (3)             beq     @outngo         Output is being suspended
E254 C111             (      console.asm):00024 (2)             cmpb    #XON
E256 2741             (      console.asm):00025 (3)             beq     @outok          Output is being re-enabled
E258 9644             (      console.asm):00026 (3)     @chkovf lda     SERBCNT
E25A 810F             (      console.asm):00027 (2)             cmpa    #15             At high water level mark?
E25C 2609             (      console.asm):00028 (3)             bne     @sbenq          No, proceed without negating RTS#
E25E 3404             (      console.asm):00029 (4+1)           pshs    b
E260 C6D5             (      console.asm):00030 (2)             ldb     #ACIRTS1
E262 F7D800           (      console.asm):00031 (4)             stb     ACIACTL         Negate RTS#
E265 3504             (      console.asm):00032 (4+1)           puls    b
E267 8140             (      console.asm):00033 (2)     @sbenq  cmpa    #SERBSZ
                      (      console.asm):00034                 IFNE    HVNMI2
                      (      console.asm):00035                 beq     @nsdrop         Serial input buffer physically full
                      (      console.asm):00036                 ELSE
E269 270F             (      console.asm):00037 (3)             beq     @nsintr         Serial input buffer physically full
                      (      console.asm):00038                 ENDC                    HVNMI2
E26B 4C               (      console.asm):00039 (1)             inca
E26C 9744             (      console.asm):00040 (3)             sta     SERBCNT         Update incoming FIFO byte count
E26E 8E0146           (      console.asm):00041 (3)             ldx     #SERBUF
E271 9642             (      console.asm):00042 (3)             lda     SERBENQ         Enqueue offset to A
E273 E786             (      console.asm):00043 (4+1)           stb     a,x             Enqueue incoming character
E275 4C               (      console.asm):00044 (1)             inca
E276 843F             (      console.asm):00045 (2)             anda    #SERBSZ-1       Modulo arithmetic
E278 9742             (      console.asm):00046 (3)             sta     SERBENQ
E27A 3516             (      console.asm):00047 (4+4)   @nsintr puls    d,x
E27C 3B               (      console.asm):00048 (17+?)          rti
                      (      console.asm):00049         * Control-C was recognized.
E27D 3264             (      console.asm):00050 (4+1)   @sigint leas    4,s             Drop D and X
E27F 9643             (      console.asm):00051 (3)             lda     SERBDEQ
E281 9742             (      console.asm):00052 (3)             sta     SERBENQ
E283 0F44             (      console.asm):00053 (5)             clr     SERBCNT         Serial input buffer has been emptied
E285 BDEB22           (      console.asm):00054                 RFXT    jsr,NCLR+7      Clear the data stack
E288 BDEB2E           (      console.asm):00055                 RFXT    jsr,RCLR+7      and the return stack
E28B 10AE61           (      console.asm):00056 (6+1)           ldy     1,s             Saved PC from the FIRQ stack
E28E 8EE742           (      console.asm):00057 (3)             ldx     #ERRHD1
E291 AF61             (      console.asm):00058 (5+1)           stx     1,s             Execution continues in the error handler
E293 C603             (      console.asm):00059 (2)             ldb     #3              with ABORT error code passed through B
E295 3B               (      console.asm):00060 (17+?)          rti
E296 4F               (      console.asm):00061 (1)     @outngo clra
E297 2002             (      console.asm):00062 (3)             bra     @sxmsta
E299 8601             (      console.asm):00063 (2)     @outok  lda     #1
E29B 9745             (      console.asm):00064 (3)     @sxmsta sta     XMITOK          Update XMIT status flag
E29D 20DB             (      console.asm):00065 (3)             bra     @nsintr
                      (      console.asm):00066                 IFNE    HVNMI2
                      (      console.asm):00067         * Increment character drop count (displayed by NMIHDL).
E29F                  (      console.asm):00068         @nsdrop ldd     SBDROPC
                      (      console.asm):00069                 incd
                      (      console.asm):00070                 std     SBDROPC
                      (      console.asm):00071                 bra     @nsintr
                      (      console.asm):00072                 ENDC                    HVNMI2
                      (      console.asm):00073         
                      (      console.asm):00074         * We do not have to talk to the ACIA directly, unless SERBCNT is zero,
                      (      console.asm):00075         * in which case we have to lower RTS#, so as to accept incoming characters.
                      (      console.asm):00076         * This can only be called from base level!
E29F 3416             (      console.asm):00077 (4+4)   GETCH   pshs    x,d
E2A1 0D44             (      console.asm):00078 (4)     @again  tst     SERBCNT
E2A3 260F             (      console.asm):00079 (3)             bne     @sbdind         We have incoming material
E2A5 C695             (      console.asm):00080 (2)             ldb     #ACIRTS0
E2A7 F7D800           (      console.asm):00081 (4)             stb     ACIACTL         Assert RTS#
E2AA 1CBF             (      console.asm):00082 (2)             andcc   #^FFLAG         Unmask FIRQ
E2AC 8E0001           (      console.asm):00083 (3)             ldx     #1
E2AF BDF825           (      console.asm):00084 (7)             jsr     MILLIS1         Busy waiting for one millisecond
E2B2 20ED             (      console.asm):00085 (3)             bra     @again          Try again
                      (      console.asm):00086         * Serial buffer data indication.
E2B4 1A40             (      console.asm):00087 (2)     @sbdind orcc    #FFLAG          Mask FIRQ
E2B6 0A44             (      console.asm):00088 (5)             dec     SERBCNT
E2B8 1CBF             (      console.asm):00089 (2)             andcc   #^FFLAG         Unmask FIRQ
E2BA 8E0146           (      console.asm):00090 (3)             ldx     #SERBUF
E2BD 9643             (      console.asm):00091 (3)             lda     SERBDEQ         Dequeue offset to A
E2BF E686             (      console.asm):00092 (4+1)           ldb     a,x             Buffered input character to B
E2C1 E7E4             (      console.asm):00093 (4+0)           stb     ,s              Incoming character to A in the caller's stack
E2C3 4C               (      console.asm):00094 (1)             inca
E2C4 843F             (      console.asm):00095 (2)             anda    #SERBSZ-1       Modulo arithmetic
E2C6 9743             (      console.asm):00096 (3)             sta     SERBDEQ
E2C8 3516             (      console.asm):00097 (4+4)           puls    d,x             Same as it ever was
E2CA 39               (      console.asm):00098 (4)             rts
                      (      console.asm):00099         
E2CB 3404             (      console.asm):00100 (4+1)   PUTCH   pshs    b
E2CD C602             (      console.asm):00101 (2)             ldb     #ACITDRE
E2CF F5D800           (      console.asm):00102 (4)     @tdrdrn bitb    ACIACTL
E2D2 27FB             (      console.asm):00103 (3)             beq     @tdrdrn         Drain the transmit data register
E2D4 0D45             (      console.asm):00104 (4)     @wfxon  tst     XMITOK          Software flow control on output
E2D6 27FC             (      console.asm):00105 (3)             beq     @wfxon          Wait for XON
E2D8 B7D801           (      console.asm):00106 (4)             sta     ACIADAT         Transmit data
E2DB 3504             (      console.asm):00107 (4+1)           puls    b
E2DD 39               (      console.asm):00108 (4)             rts
                      (      console.asm):00109         
                      (      console.asm):00110         * Send NUL terminated string pointed to by X to the ACIA.
E2DE 3416             (      console.asm):00111 (4+4)   PUTS    pshs    x,d
E2E0 A680             (      console.asm):00112 (4+1)   @puts1  lda     ,x+
E2E2 2704             (      console.asm):00113 (3)             beq     @puts2         NUL marks the end of the string
E2E4 8DE5             (      console.asm):00114 (6)             bsr     PUTCH
E2E6 20F8             (      console.asm):00115 (3)             bra     @puts1
E2E8 3516             (      console.asm):00116 (4+4)   @puts2  puls    d,x
E2EA 39               (      console.asm):00117 (4)             rts
                      (      console.asm):00118         
E2EB 3410             (      console.asm):00119 (4+2)   PUTCR   pshs    x
E2ED 8EFE24           (      console.asm):00120 (3)             ldx     #CRLFSTR
E2F0 8DEC             (      console.asm):00121 (6)             bsr     PUTS
E2F2 3510             (      console.asm):00122 (4+2)           puls    x
E2F4 39               (      console.asm):00123 (4)             rts
                      (      console.asm):00124         
E2F5 8608             (      console.asm):00125 (2)     _BS     lda     #BS
E2F7 8DD2             (      console.asm):00126 (6)             bsr     PUTCH          Output BS
E2F9 8620             (      console.asm):00127 (2)             lda     #SP
E2FB 8DCE             (      console.asm):00128 (6)             bsr     PUTCH          Clear character
E2FD 8608             (      console.asm):00129 (2)             lda     #BS
E2FF 20CA             (      console.asm):00130 (3)             bra     PUTCH          And go back again
                      (      console.asm):00131         
                      (      console.asm):00132         * Receive CR terminated string and store it to X.
                      (      console.asm):00133         * Upon entry B contains the receiving buffer length.
                      (      console.asm):00134         * (excluding the NUL terminator). On exit, B will
                      (      console.asm):00135         * contain the number of characters entered (excluding
                      (      console.asm):00136         * the trailing NUL). A and X are preserved. B will
                      (      console.asm):00137         * have the actual number of characters entered.
                      (      console.asm):00138         * Implementation of $05D9 in the TRS-80 Level II ROM.
E301 C102             (      console.asm):00139 (2)     GETS    cmpb    #2
E303 2401             (      console.asm):00140 (3)             bhs     @gets0          B must be 2 or more
E305 39               (      console.asm):00141 (4)             rts
E306 3416             (      console.asm):00142 (4+4)   @gets0  pshs    x,d
E308 8D95             (      console.asm):00143 (6)     @gets1  bsr     GETCH
E30A 8108             (      console.asm):00144 (2)             cmpa    #BS             Backspace?
E30C 260B             (      console.asm):00145 (3)             bne     @gets3
E30E E161             (      console.asm):00146 (4+1)           cmpb    1,s             B upon routine entry
E310 27F6             (      console.asm):00147 (3)             beq     @gets1          Do not go beyond the beginning of the buffer
E312 8DE1             (      console.asm):00148 (6)             bsr     _BS
E314 301F             (      console.asm):00149 (4+1)           leax    -1,x
E316 5C               (      console.asm):00150 (1)             incb
E317 20EF             (      console.asm):00151 (3)             bra     @gets1
E319 8115             (      console.asm):00152 (2)     @gets3  cmpa    #NAK            Kill input?
E31B 260B             (      console.asm):00153 (3)             bne     @gets5
                      (      console.asm):00154         * While B != 1,S (initial buffer length), decrement X, increment B.
E31D E161             (      console.asm):00155 (4+1)   @gets4  cmpb    1,s
E31F 27E7             (      console.asm):00156 (3)             beq     @gets1
E321 8DD2             (      console.asm):00157 (6)             bsr     _BS
E323 301F             (      console.asm):00158 (4+1)           leax     -1,x
E325 5C               (      console.asm):00159 (1)             incb
E326 20F5             (      console.asm):00160 (3)             bra     @gets4
                      (      console.asm):00161         * Regular input handling: echo input character.
E328 810D             (      console.asm):00162 (2)     @gets5  cmpa    #CR
E32A 2709             (      console.asm):00163 (3)             beq     @gets6          Minicom only sends CR
E32C 8D9D             (      console.asm):00164 (6)             bsr     PUTCH
E32E A780             (      console.asm):00165 (4+1)           sta     ,x+
E330 5A               (      console.asm):00166 (1)             decb
E331 C101             (      console.asm):00167 (2)             cmpb    #1              End of buffer reached?
E333 26D3             (      console.asm):00168 (3)             bne     @gets1
E335 8620             (      console.asm):00169 (2)     @gets6  lda     #SP
E337 8D92             (      console.asm):00170 (6)             bsr     PUTCH
E339 6F84             (      console.asm):00171 (6+0)           clr     ,x
E33B 1F10             (      console.asm):00172 (4)             tfr     x,d
E33D A362             (      console.asm):00173 (5+1)           subd    2,s             Actual number of characters entered
E33F E761             (      console.asm):00174 (4+1)           stb     1,s             Stored to B (through the system stack).         
E341 3516             (      console.asm):00175 (4+4)           puls    d,x
E343 39               (      console.asm):00176 (4)             rts
                      (      console.asm):00177         
                      (        forth.asm):00692         
E344 BDEB22           (        forth.asm):00693         FORTHIN RFXT    jsr,NCLR+7      XT for NCLR. Set up the normal stack
E347 BDEB2E           (        forth.asm):00694                 RFXT    jsr,RCLR+7      XT for RCLR. Set up the return stack
                      (        forth.asm):00695         * Relocate '@' code to RAM and set it up as the last dictionary entry (RO).
E34A 8EFDA7           (        forth.asm):00696 (3)             ldx     #THEEND         Source address for tfm
E34D 1086000D         (        forth.asm):00697 (4)             ldw     #(REALEND-THEEND) Byte count for tfm
E351 108E0C60         (        forth.asm):00698 (4)             ldy     #WDICSPC        Destination address for tfm
E355 109F06           (        forth.asm):00699 (5)             sty     LSTWAD
E358 113812           (        forth.asm):00700 (6+?)           tfm     x+,y+
E35B 109F08           (        forth.asm):00701 (5)             sty     DICEND
                      (        forth.asm):00702                 IFNE    RELFEAT
E35E BDEC54           (        forth.asm):00703                 RFXT    jsr,MONITOR+10  XT for MONITOR (monitor @ in RAM)
                      (        forth.asm):00704                 ENDC                    RELFEAT
E361 BDE97A           (        forth.asm):00705 (7)             jsr     EMPTYB          Buffer related initializations
                      (        forth.asm):00706                 IFNE    DEBUG
                      (        forth.asm):00707                 clrd
                      (        forth.asm):00708                 std     USTATE          Initial mode is interpretation
                      (        forth.asm):00709                 std     USCR            Clear SCR
                      (        forth.asm):00710                 std     UBLK            Clear BLK
                      (        forth.asm):00711                 std     UTOIN           Clear >IN
                      (        forth.asm):00712                 ENDC                    DEBUG
E364 7EFB27           (        forth.asm):00713                 RFXT    jmp,DECIMAL+10  XT for DECIMAL. Default base is decimal
                      (        forth.asm):00714         
                      (        forth.asm):00715         * Scan for the next non-space character pointed to by X.
                      (        forth.asm):00716         * That character is returned through A. Flags are set accordingly.
E367 A680             (        forth.asm):00717 (4+1)   SCNSTOK lda     ,x+
E369 2704             (        forth.asm):00718 (3)             beq     @scstk1
E36B 8120             (        forth.asm):00719 (2)             cmpa    #SP
E36D 27F8             (        forth.asm):00720 (3)             beq     SCNSTOK
E36F 301F             (        forth.asm):00721 (4+1)   @scstk1 leax    -1,x            Keep X pointing at the beginning of the token
E371 9F02             (        forth.asm):00722 (4)             stx     TOKENSP
E373 4D               (        forth.asm):00723 (1)             tsta                    Have to test again because LEA affects Z
E374 39               (        forth.asm):00724 (4)             rts
                      (        forth.asm):00725         
                      (        forth.asm):00726         * Scan for the next white space character (or NUL) as an end of token marker.
                      (        forth.asm):00727         * Upon entry:
                      (        forth.asm):00728         * - X points to the input stream.
                      (        forth.asm):00729         * Upon return:
                      (        forth.asm):00730         * - X will point to the next space character or NUL.
                      (        forth.asm):00731         * - CURTOKL will hold the current token length (returned in B).
                      (        forth.asm):00732         * - TOKENEP will point to the end of the current token.
                      (        forth.asm):00733         * - A is altered.
                      (        forth.asm):00734         * This routine assumes there was an identified start of token in the past,
                      (        forth.asm):00735         * i.e. that X was not pointing to a BL character upon entry.
E375 5F               (        forth.asm):00736 (1)     SCNETOK clrb
E376 5C               (        forth.asm):00737 (1)     @scetok incb
E377 A680             (        forth.asm):00738 (4+1)           lda     ,x+
E379 2704             (        forth.asm):00739 (3)             beq     @scetk1
E37B 8120             (        forth.asm):00740 (2)             cmpa    #SP
E37D 26F7             (        forth.asm):00741 (3)             bne     @scetok
E37F 301F             (        forth.asm):00742 (4+1)   @scetk1 leax    -1,x            Keep X pointing at the end of the token
E381 9F04             (        forth.asm):00743 (4)             stx     TOKENEP
E383 5A               (        forth.asm):00744 (1)             decb
E384 D73A             (        forth.asm):00745 (3)             stb     CURTOKL
E386 39               (        forth.asm):00746 (4)             rts
                      (        forth.asm):00747         
                      (        forth.asm):00748         * Check for numeric literal BASE prefix. On entry X has the input stream
                      (        forth.asm):00749         * pointer. On exit, BASE is altered if needed and the original BASE saved
                      (        forth.asm):00750         * to BASBKUP. If BASE was not changed, BASBKUP will be zero.
                      (        forth.asm):00751         * D is altered, X is updated if a BASE prefix is detected, other registers
                      (        forth.asm):00752         * are untouched.
E387 E684             (        forth.asm):00753 (4+0)   CKNBPFX ldb     ,x              B has a potential base prefix character
E389 3410             (        forth.asm):00754 (4+2)           pshs    x
E38B 8EFF7A           (        forth.asm):00755 (3)             ldx     #BASALST        A associative list (A-list) of BASE prefixes
E38E A681             (        forth.asm):00756 (4+2)   @pflkup lda     ,x++            Potential BASE prefix character to A
E390 2707             (        forth.asm):00757 (3)             beq     @nopfix         Reached the end of the A-list. No prefix found
E392 103798           (        forth.asm):00758 (4)             cmpr    b,a             Prefix match?
E395 2707             (        forth.asm):00759 (3)             beq     @pfxfnd         Yes
E397 20F5             (        forth.asm):00760 (3)             bra     @pflkup         Perform base prefix lookup
E399 0F30             (        forth.asm):00761 (5)     @nopfix clr     BASBKUP         Nothing to be restored to BASE
E39B 3510             (        forth.asm):00762 (4+2)           puls    x
E39D 39               (        forth.asm):00763 (4)             rts
E39E 9621             (        forth.asm):00764 (3)     @pfxfnd lda     UBASE+1
E3A0 9730             (        forth.asm):00765 (3)             sta     BASBKUP         Back up the current BASE value
E3A2 A61F             (        forth.asm):00766 (4+1)           lda     -1,x            The BASE specified by the prefix
E3A4 9721             (        forth.asm):00767 (3)             sta     UBASE+1         Update BASE
E3A6 3510             (        forth.asm):00768 (4+2)           puls    x
E3A8 3001             (        forth.asm):00769 (4+1)           leax    1,x             Skip the prefix from the input stream
E3AA 39               (        forth.asm):00770 (4)             rts
                      (        forth.asm):00771         
                      (        forth.asm):00772         * Restore BASE if a numeric literal BASE prefix was detected.
                      (        forth.asm):00773         * X is to be preserved at all cost!
E3AB 9630             (        forth.asm):00774 (3)     RSBSPFX lda     BASBKUP
E3AD 2702             (        forth.asm):00775 (3)             beq     @theend
E3AF 9721             (        forth.asm):00776 (3)             sta     UBASE+1
E3B1 39               (        forth.asm):00777 (4)     @theend rts
                      (        forth.asm):00778         
                      (        forth.asm):00779         * Check whether BASE is in the supported range ([2..36]).
E3B2 9621             (        forth.asm):00780 (3)     CKBASE  lda     UBASE+1         BASE
E3B4 8102             (        forth.asm):00781 (2)             cmpa    #2
E3B6 2505             (        forth.asm):00782 (3)             blo     @ckbser         Must be >= 2
E3B8 8124             (        forth.asm):00783 (2)             cmpa    #36
E3BA 2201             (        forth.asm):00784 (3)             bhi     @ckbser         And <= 36 (the ANSI maximum)
E3BC 39               (        forth.asm):00785 (4)             rts
E3BD C60F             (        forth.asm):00786 (2)     @ckbser ldb     #15             Invalid BASE
E3BF BDE73F           (        forth.asm):00787 (7)             jsr     ERRHDLR         No return
     E3C2             (        forth.asm):00788         CKBASRA equ     *
                      (        forth.asm):00789         
                      (        forth.asm):00790         * NUMCVT performs a signed string to number conversion. The input string is
                      (        forth.asm):00791         * acquired from the input stream. Note that this routine always is called
                      (        forth.asm):00792         * after a dictionary lookup (SWDIC), so TOKENSP and CURTOKL are guaranteed
                      (        forth.asm):00793         * to have been set previously. There are two ways out this routine:
                      (        forth.asm):00794         * - redirection to the error handler (Undefined word), or
                      (        forth.asm):00795         * - a converted cell or double cell returned through the data stack.
                      (        forth.asm):00796         *   Upon return, ISDBLF being NZ will indicate a double.
E3C2 8DEE             (        forth.asm):00797 (6)     NUMCVT  bsr     CKBASE          No return if BASE isn't in the [2..36] range
E3C4 0F37             (        forth.asm):00798 (5)             clr     ISNEGF          Assume the result is positive
E3C6 0F38             (        forth.asm):00799 (5)             clr     ISDBLF          Assume the result is not a double number
E3C8 9E02             (        forth.asm):00800 (4)             ldx     TOKENSP
E3CA 8DBB             (        forth.asm):00801 (6)             bsr     CKNBPFX         Check for numeric literal BASE prefix
                      (        forth.asm):00802         * Check for optional minus sign.
E3CC A684             (        forth.asm):00803 (4+0)           lda     ,x
E3CE 812D             (        forth.asm):00804 (2)             cmpa    #'-
E3D0 2604             (        forth.asm):00805 (3)             bne     @ncini
E3D2 0C37             (        forth.asm):00806 (5)             inc     ISNEGF          Remember to negate the result before returning
E3D4 3001             (        forth.asm):00807 (4+1)           leax    1,x             Skip the negativity!
E3D6 1F12             (        forth.asm):00808 (4)     @ncini  tfr     x,y             Backup input stream pointer
E3D8 1FC1             (        forth.asm):00809 (4)             tfr     0,x             Initialize the result
E3DA BDE7C9           (        forth.asm):00810 (7)             jsr     NPUSH           LSC
E3DD BDE7C9           (        forth.asm):00811 (7)             jsr     NPUSH           MSC
E3E0 1F21             (        forth.asm):00812 (4)             tfr     y,x             Restore the input stream pointer
E3E2 301F             (        forth.asm):00813 (4+1)           leax    -1,x
E3E4 BDE7C9           (        forth.asm):00814 (7)             jsr     NPUSH           Base scanning address minus 1
E3E7 BDF491           (        forth.asm):00815                 RFXT    jsr,CONVERT+10
                      (        forth.asm):00816         * Upon return TOS C@ should be BL, NUL or . Anything else indicates an error.
                      (        forth.asm):00817         * In any case, at this point, at least three cells are on the data stack.
E3EA 3710             (        forth.asm):00818                 UCNPOP                  Address of the last non convertible char to X
E3EC A684             (        forth.asm):00819 (4+0)           lda     ,x
E3EE 270A             (        forth.asm):00820 (3)             beq     @ncadj          NUL is acceptable
E3F0 8120             (        forth.asm):00821 (2)             cmpa    #SP
E3F2 2706             (        forth.asm):00822 (3)             beq     @ncadj          So is BL
E3F4 812E             (        forth.asm):00823 (2)             cmpa    #'.             Was a double number meant?
E3F6 2618             (        forth.asm):00824 (3)             bne     @ncnogo         No, we do not have a winner...
E3F8 0C38             (        forth.asm):00825 (5)             inc     ISDBLF
                      (        forth.asm):00826         * If Z is not set at this point, we are dealing with a double number.
E3FA 260B             (        forth.asm):00827 (3)     @ncadj  bne     @ncdadj 
E3FC 3710             (        forth.asm):00828                 UCNPOP                  Drop the MSC
E3FE 0D37             (        forth.asm):00829 (4)             tst     ISNEGF          Are we dealing with a negative number?
E400 27A9             (        forth.asm):00830 (3)             beq     RSBSPFX         No. Restore BASE if needed--the end
E402 BDEF94           (        forth.asm):00831                 RFXT    jsr,NEGATE+9    Acknowledge the negativity
E405 20A4             (        forth.asm):00832 (3)             bra     RSBSPFX         Restore BASE if needed--the end
E407 0D37             (        forth.asm):00833 (4)     @ncdadj tst     ISNEGF          Are we dealing with a negative number?
E409 27A0             (        forth.asm):00834 (3)             beq     RSBSPFX         No. Restore BASE if needed--the end
E40B BDF39E           (        forth.asm):00835                 RFXT    jsr,DNEG+10     Acknowledge the negativity
E40E 209B             (        forth.asm):00836 (3)             bra     RSBSPFX         Restore BASE if needed--the end
E410 3344             (        forth.asm):00837 (4+1)   @ncnogo leau    4,u             Drop two cells from the data stack
E412 9E02             (        forth.asm):00838 (4)             ldx     TOKENSP         Beginning address of the current token
E414 C602             (        forth.asm):00839 (2)             ldb     #2              Undefined (X points to the offending word)
E416 BDE73F           (        forth.asm):00840 (7)             jsr     ERRHDLR         No return
     E419             (        forth.asm):00841         NUMCVRA equ     *               For symbolic stack dump purposes
E419 12               (        forth.asm):00842 (1)             nop
                      (        forth.asm):00843         
                      (        forth.asm):00844         * Convert number stored in X to a string (depending on BASE value).
                      (        forth.asm):00845         * Output is stored in the global TBUFF buffer. X is preserved.
E41A 8D96             (        forth.asm):00846 (6)     CVNSTR  bsr     CKBASE
E41C 0F37             (        forth.asm):00847 (5)             clr     ISNEGF
E41E 1F10             (        forth.asm):00848 (4)             tfr     x,d
E420 0D39             (        forth.asm):00849 (4)             tst     CVISSGN         Are we to perform a signed conversion?
E422 2708             (        forth.asm):00850 (3)             beq     @cvnst1
E424 104D             (        forth.asm):00851 (2)             tstd
E426 2A04             (        forth.asm):00852 (3)             bpl     @cvnst1
E428 0C37             (        forth.asm):00853 (5)             inc     ISNEGF          Number being converted is negative
E42A 1040             (        forth.asm):00854 (2)             negd
E42C 1F06             (        forth.asm):00855 (4)     @cvnst1 tfr     d,w
E42E 104F             (        forth.asm):00856 (2)             clrd
E430 108E03FF         (        forth.asm):00857 (4)             ldy     #TBUFF+19       Sign + 16 digits + terminator + 1
E434 6FA2             (        forth.asm):00858 (6+1)           clr     ,-y             End of string marker
E436 119E20           (        forth.asm):00859 (35)    @cvnst2 divq    UBASE           D returns the modulo and W the quotient
E439 8630             (        forth.asm):00860 (2)             lda     #'0
E43B C10A             (        forth.asm):00861 (2)             cmpb    #10
E43D 2502             (        forth.asm):00862 (3)             bcs     @cvnst3
                      (        forth.asm):00863         * BASE has letters among its valid numbers.
E43F 8637             (        forth.asm):00864 (2)             lda     #'A-10
E441 103089           (        forth.asm):00865 (4)     @cvnst3 addr    a,b
E444 E7A2             (        forth.asm):00866 (4+1)           stb     ,-y
E446 104F             (        forth.asm):00867 (2)             clrd
E448 105D             (        forth.asm):00868 (2)             tstw
E44A 26EA             (        forth.asm):00869 (3)             bne     @cvnst2
E44C C620             (        forth.asm):00870 (2)             ldb     #SP
E44E 0D37             (        forth.asm):00871 (4)             tst     ISNEGF
E450 2702             (        forth.asm):00872 (3)             beq     @cvnst4
E452 C62D             (        forth.asm):00873 (2)             ldb     #'-
E454 E7A2             (        forth.asm):00874 (4+1)   @cvnst4 stb     ,-y
                      (        forth.asm):00875         * We need to insert leading spaces up to the beginning of the output buffer.
E456 C620             (        forth.asm):00876 (2)             ldb     #SP
E458 108C03EC         (        forth.asm):00877 (4)     @cvnst5 cmpy    #TBUFF
E45C 2601             (        forth.asm):00878 (3)             bne     @cvnst6
E45E 39               (        forth.asm):00879 (4)             rts
E45F E7A2             (        forth.asm):00880 (4+1)   @cvnst6 stb     ,-y
E461 20F5             (        forth.asm):00881 (3)             bra     @cvnst5
                      (        forth.asm):00882         
                      (        forth.asm):00883         * Check for minimal data stack depth. On input D has the lowest possible stack
                      (        forth.asm):00884         * address that satisfies the needs of the caller. This routine is meant
                      (        forth.asm):00885         * to support "transactional" behaviour, which is intended to improve
                      (        forth.asm):00886         * debugging support.
E463 103703           (        forth.asm):00887 (4)     CHKNDPT cmpr    d,u
E466 2201             (        forth.asm):00888 (3)             bhi     @stkudf
E468 39               (        forth.asm):00889 (4)             rts
E469 C601             (        forth.asm):00890 (2)     @stkudf ldb     #1              Data stack underflow
E46B BDE73F           (        forth.asm):00891 (7)             jsr     ERRHDLR         No return
     E46E             (        forth.asm):00892         CKDPTRA equ     *
                      (        forth.asm):00893         
                      (        forth.asm):00894         * Parameter stack's depth checking primitives (transactional behavior support).
E46E CC029620F0       (        forth.asm):00895         MIN1PST MINDREQ 1
                      (        forth.asm):00896         
E473 CC029420EB       (        forth.asm):00897         MIN2PST MINDREQ 2
                      (        forth.asm):00898         
E478 CC029220E6       (        forth.asm):00899         MIN3PST MINDREQ 3
                      (        forth.asm):00900         
E47D CC029020E1       (        forth.asm):00901         MIN4PST MINDREQ 4
                      (        forth.asm):00902         
                      (        forth.asm):00903         * Search word beginning at address TOKENSP in the dictionary.
                      (        forth.asm):00904         * Upon return Z will be set if the word was not found.
                      (        forth.asm):00905         * Otherwise, Y will point to the code section of the word.
                      (        forth.asm):00906         * CSSNTVE (defined in constants.asm) defines whether the
                      (        forth.asm):00907         * dictionary match is case sensitive or not.
                      (        forth.asm):00908         * Important note: if the word is found TOKENEP will be copied to TOKENSP.
E482 9E02             (        forth.asm):00909 (4)     SWDIC   ldx     TOKENSP
E484 BDE375           (        forth.asm):00910 (7)             jsr     SCNETOK         B has CURTOKL, update TOKENEP
E487 9E08             (        forth.asm):00911 (4)             ldx     DICEND
E489 9F18             (        forth.asm):00912 (4)             stx     VLPRVEP         Last dictionary entry code address + 1
E48B 9E02             (        forth.asm):00913 (4)             ldx     TOKENSP
E48D 109E06           (        forth.asm):00914 (5)             ldy     LSTWAD          Latest word header address to Y
E490 2606             (        forth.asm):00915 (3)     @swrdc0 bne     @swrdc1
E492 1FC2             (        forth.asm):00916 (4)             tfr     0,y             Word not found. Z is set
E494 109F0E           (        forth.asm):00917 (5)             sty     PLOAD
E497 39               (        forth.asm):00918 (4)             rts
E498 A6A4             (        forth.asm):00919 (4+0)   @swrdc1 lda     ,y              Word attribute to A
E49A 841F             (        forth.asm):00920 (2)             anda    #WRLNMSK        Extract word length
E49C 3420             (        forth.asm):00921 (4+2)           pshs    y
E49E 103789           (        forth.asm):00922 (4)             cmpr    a,b             Word length match?
E4A1 2638             (        forth.asm):00923 (3)             bne     @swrdc3         No, point to next dictionary entry
E4A3 3121             (        forth.asm):00924 (4+1)           leay    1,y
E4A5 A6A0             (        forth.asm):00925 (4+1)   @swrdc2 lda     ,y+
                      (        forth.asm):00926                 IFNE    CSSNTVE
                      (        forth.asm):00927                 cmpa    ,x+             Case sensitive dictionary
                      (        forth.asm):00928                 ELSE
E4A7 1F9E             (        forth.asm):00929 (4)             tfr     b,e             Case insensitive search (preferred)
E4A9 E680             (        forth.asm):00930 (4+1)           ldb     ,x+
E4AB C161             (        forth.asm):00931 (2)             cmpb    #'a
E4AD 2506             (        forth.asm):00932 (3)             bcs     @nochg
E4AF C17B             (        forth.asm):00933 (2)             cmpb    #'z+1
E4B1 2402             (        forth.asm):00934 (3)             bcc     @nochg
E4B3 C020             (        forth.asm):00935 (2)             subb    #'a-'A
E4B5 103789           (        forth.asm):00936 (4)     @nochg  cmpr    a,b
E4B8 1FE9             (        forth.asm):00937 (4)             tfr     e,b
                      (        forth.asm):00938                 ENDC                    CSSNTVE
E4BA 261F             (        forth.asm):00939 (3)             bne     @swrdc3
E4BC 5A               (        forth.asm):00940 (1)             decb
E4BD 26E6             (        forth.asm):00941 (3)             bne     @swrdc2
                      (        forth.asm):00942         * Word match!
E4BF 3510             (        forth.asm):00943 (4+2)           puls    x
E4C1 E684             (        forth.asm):00944 (4+0)           ldb     ,x              Word attribute byte to B
E4C3 4F               (        forth.asm):00945 (1)             clra
E4C4 58               (        forth.asm):00946 (1)             lslb                    Bit 7 to CFLAG
E4C5 49               (        forth.asm):00947 (1)             rola                    CFLAG to A
E4C6 973B             (        forth.asm):00948 (3)             sta     IMDFLG          Set IMMEDIATE flag
E4C8 4F               (        forth.asm):00949 (1)             clra
E4C9 58               (        forth.asm):00950 (1)             lslb                    Bit 6 to CFLAG
E4CA 49               (        forth.asm):00951 (1)             rola                    CFLAG to A
E4CB 973C             (        forth.asm):00952 (3)             sta     DEFFLG          Set DEFINE flag
E4CD 9E04             (        forth.asm):00953 (4)             ldx     TOKENEP
E4CF 9F02             (        forth.asm):00954 (4)             stx     TOKENSP
                      (        forth.asm):00955                 IFNE    RELFEAT
E4D1 3123             (        forth.asm):00956 (4+1)           leay    3,y             Skip back pointer and checksum. Return XT
                      (        forth.asm):00957                 ELSE
                      (        forth.asm):00958                 leay    2,y             Skip back pointer. Return XT
                      (        forth.asm):00959                 ENDC                    RELFEAT
E4D3 DC18             (        forth.asm):00960 (4)             ldd     VLPRVEP
E4D5 103220           (        forth.asm):00961 (4)             subr    y,d
E4D8 DD0E             (        forth.asm):00962 (4)             std     PLOAD
E4DA 39               (        forth.asm):00963 (4)             rts                     NZ since there is no zero payload word
E4DB 3520             (        forth.asm):00964 (4+2)   @swrdc3 puls    y
E4DD 109F18           (        forth.asm):00965 (5)             sty     VLPRVEP
E4E0 4F               (        forth.asm):00966 (1)             clra
E4E1 E6A0             (        forth.asm):00967 (4+1)           ldb     ,y+
E4E3 C41F             (        forth.asm):00968 (2)             andb    #WRLNMSK
E4E5 31AB             (        forth.asm):00969 (4+2)           leay    d,y
E4E7 9E02             (        forth.asm):00970 (4)             ldx     TOKENSP
E4E9 D63A             (        forth.asm):00971 (3)             ldb     CURTOKL
E4EB 10AEA4           (        forth.asm):00972 (6+0)           ldy     ,y              Point to previous word header
E4EE 20A0             (        forth.asm):00973 (3)             bra     @swrdc0
                      (        forth.asm):00974         
                      (        forth.asm):00975         * Create new dictionary entry. The word name being created is acquired from
                      (        forth.asm):00976         * the input stream. Warning, this requires a writable dictionary!
                      (        forth.asm):00977         * The new end of the dictionary is returned in Y. W is preserved.
E4F0 1038             (        forth.asm):00978 (6)     LOCWRT  pshsw
E4F2 9E08             (        forth.asm):00979 (4)             ldx     DICEND
                      (        forth.asm):00980                 IFNE    DEBUG
                      (        forth.asm):00981                 cmpx    #ROMSTRT
                      (        forth.asm):00982                 bcs     @locwr0
                      (        forth.asm):00983                 ldb     #10             Assertion failure (trying to write to ROM!)
                      (        forth.asm):00984                 jsr     ERRHDLR         No return
E4F4                  (        forth.asm):00985         LWAFRA  equ     *
E4F4                  (        forth.asm):00986         @locwr0
                      (        forth.asm):00987                 ENDC                    DEBUG
E4F4 9F0C             (        forth.asm):00988 (4)             stx     BDICEND         Back pointer up
E4F6 9E06             (        forth.asm):00989 (4)             ldx     LSTWAD
E4F8 9F0A             (        forth.asm):00990 (4)             stx     BLSTWAD         Back pointer up
E4FA BDE828           (        forth.asm):00991 (7)             jsr     BKIN2PT         Derive X from BLK, >IN
E4FD BDE367           (        forth.asm):00992 (7)             jsr     SCNSTOK         Locate token starting address
E500 2605             (        forth.asm):00993 (3)             bne     @locwr1
E502 C605             (        forth.asm):00994 (2)             ldb     #5              EOIS condition recognized: missing word name
E504 BDE73F           (        forth.asm):00995 (7)             jsr     ERRHDLR         No return
     E507             (        forth.asm):00996         LWMNRA  equ     *               LOCWRT missing word name return address
E507 BDE375           (        forth.asm):00997 (7)     @locwr1 jsr     SCNETOK         X has TOKENEP, B has CURTOKL
E50A 109E02           (        forth.asm):00998 (5)             ldy     TOKENSP
E50D 103221           (        forth.asm):00999 (4)             subr    y,x
E510 3410             (        forth.asm):01000 (4+2)           pshs    x               Word length to the system stack
E512 9E08             (        forth.asm):01001 (4)             ldx     DICEND
E514 A661             (        forth.asm):01002 (4+1)           lda     1,s             Word length LSB in the system stack
E516 8120             (        forth.asm):01003 (2)             cmpa    #1+WRLNMSK      Max word length is 31, 79-STANDARD compliant
E518 2505             (        forth.asm):01004 (3)             blo     @locwr2
E51A C610             (        forth.asm):01005 (2)             ldb     #16             Word name is too long
E51C BDE73F           (        forth.asm):01006 (7)             jsr     ERRHDLR         No return
     E51F             (        forth.asm):01007         WTOOLNG equ     *
E51F A780             (        forth.asm):01008 (4+1)   @locwr2 sta     ,x+             Word length to dictionary
E521 10A6E1           (        forth.asm):01009 (6+2)           ldw     ,s++            16-bit word length to W
E524 1E12             (        forth.asm):01010 (5)             exg     x,y             Y points to the dictionary, X has TOKENSP
                      (        forth.asm):01011                 IFNE    CSSNTVE
                      (        forth.asm):01012                 tfm     x+,y+           Word name to dictionary, as is
                      (        forth.asm):01013                 ELSE
E526 1FF9             (        forth.asm):01014 (4)             tfr     f,b             Force dictionary entry to upper case
E528 A680             (        forth.asm):01015 (4+1)   @locwr3 lda     ,x+
E52A 8161             (        forth.asm):01016 (2)             cmpa    #'a
E52C 2506             (        forth.asm):01017 (3)             bcs     @locwr4
E52E 817B             (        forth.asm):01018 (2)             cmpa    #'z+1
E530 2402             (        forth.asm):01019 (3)             bcc     @locwr4
E532 8020             (        forth.asm):01020 (2)             suba    #'a-'A          To upper case
E534 A7A0             (        forth.asm):01021 (4+1)   @locwr4 sta     ,y+
E536 5A               (        forth.asm):01022 (1)             decb
E537 26EF             (        forth.asm):01023 (3)             bne     @locwr3
                      (        forth.asm):01024                 ENDC                    CSSNTVE
E539 1F10             (        forth.asm):01025 (4)             tfr     x,d
E53B BDE162           (        forth.asm):01026 (7)             jsr     U2INFRD         Derive >IN from D
E53E 9E06             (        forth.asm):01027 (4)             ldx     LSTWAD
E540 AFA1             (        forth.asm):01028 (5+2)           stx     ,y++            Back pointer to dictionary
                      (        forth.asm):01029                 IFNE    RELFEAT
E542 6FA0             (        forth.asm):01030 (6+1)           clr     ,y+             Initialize the checksum header field
                      (        forth.asm):01031                 ENDC                    RELFEAT
E544 109F08           (        forth.asm):01032 (5)             sty     DICEND
E547 109F12           (        forth.asm):01033 (5)             sty     RECADDR         Should we resort to recursion later on
E54A 1039             (        forth.asm):01034 (6)             pulsw
E54C 39               (        forth.asm):01035 (4)             rts
                      (        forth.asm):01036         
                      (        forth.asm):01037         * Compile 'ldx  #X; jsr NPUSH'.
                      (        forth.asm):01038         * DICEND is updated and returned in Y.
E54D 109E08           (        forth.asm):01039 (5)     LITER   ldy     DICEND
E550 868E             (        forth.asm):01040 (2)             lda     #LDXOPC         LDX immediate
E552 8D10             (        forth.asm):01041 (6)             bsr     VARCON2
E554 86BD             (        forth.asm):01042 (2)             lda     #JSROPC         JSR extended
E556 109F14           (        forth.asm):01043 (5)             sty     JSRLAST         JSRLAST points to the latest JSR code emission
E559 8D06             (        forth.asm):01044 (6)             bsr     VARCON1
E55B 109F08           (        forth.asm):01045 (5)             sty     DICEND
E55E 39               (        forth.asm):01046 (4)             rts
                      (        forth.asm):01047         
                      (        forth.asm):01048         * Compile 'jmp  NPUSH'.
                      (        forth.asm):01049         * Y points to the end of the dictionary on entry and on exit.
E55F 867E             (        forth.asm):01050 (2)     VARCON  lda     #JMPOPC         JMP extended
E561 8EE7C9           (        forth.asm):01051 (3)     VARCON1 ldx     #NPUSH
E564 A7A0             (        forth.asm):01052 (4+1)   VARCON2 sta     ,y+
E566 AFA1             (        forth.asm):01053 (5+2)           stx     ,y++
E568 39               (        forth.asm):01054 (4)             rts
                      (        forth.asm):01055         
                      (        forth.asm):01056         * Used by U<, U>, <, >.
E569 BDE473           (        forth.asm):01057 (7)     CMP2    jsr     MIN2PST         At least 2 cells must be stacked up
E56C 10AEC4           (        forth.asm):01058 (6+0)   CMP2RA  ldy     ,u
E56F AE42             (        forth.asm):01059 (5+1)           ldx     2,u
E571 103721           (        forth.asm):01060 (4)             cmpr    y,x
E574 1FA9             (        forth.asm):01061 (4)             tfr     cc,b
                      (        forth.asm):01062                 IFNE    DEBUG
                      (        forth.asm):01063                 clra
                      (        forth.asm):01064                 std     CCREG
                      (        forth.asm):01065                 ENDC                    DEBUG
E576 1FC1             (        forth.asm):01066 (4)             tfr     0,x
E578 3344             (        forth.asm):01067 (4+1)           leau    4,u
E57A 1F9A             (        forth.asm):01068 (4)             tfr     b,cc
E57C 39               (        forth.asm):01069 (4)             rts
                      (        forth.asm):01070         
                      (        forth.asm):01071         * Used by CMOVE, CMOVE>, MOVE.
E57D BDE478           (        forth.asm):01072 (7)     ACQMOVP jsr     MIN3PST         At least 3 cells must be stacked up
E580 10A6C4           (        forth.asm):01073 (6+0)   ACQVMRA ldw     ,u              Byte count
E583 10AE42           (        forth.asm):01074 (6+1)           ldy     2,u             Destination address
E586 AE44             (        forth.asm):01075 (5+1)           ldx     4,u             Source address
E588 3346             (        forth.asm):01076 (4+1)           leau    6,u             Drop 3 cells from the user stack
E58A 39               (        forth.asm):01077 (4)             rts
                      (        forth.asm):01078         
                      (        forth.asm):01079         * FDCTSYM enveadours to match the address stored in Y to a dictionary entry.
                      (        forth.asm):01080         * Upon a successful flexible match, it will output a string in the form of
                      (        forth.asm):01081         * <wordname>+<offset> to the string pointed to by X. <wordname> refers to the
                      (        forth.asm):01082         * code entry point of the matched word. <offset> will be expressed in hex.
                      (        forth.asm):01083         * If a match is found, Z will be clear, otherwise it will be set.
                      (        forth.asm):01084         * A candidate for a word code address must meet the following criteria:
                      (        forth.asm):01085         * ((Y U>= #EBUFS) AND (Y U< #THEEND)) OR ((Y U>= #WDICSPC) AND (Y U< DICEND)).
                      (        forth.asm):01086         * Upon return:
                      (        forth.asm):01087         * - the string pointed to by X will updated with its symbolic match
                      (        forth.asm):01088         *   (NUL terminated), if there is one. X itself might have been altered.
                      (        forth.asm):01089         * - Y should be preserved.
                      (        forth.asm):01090         * EBUFS (EMPTY-BUFFERS) header address is the last word in the dictionary.
                      (        forth.asm):01091                 IFNE    SSDFEAT
E58B 3430             (        forth.asm):01092 (4+4)   FDCTSYM pshs    y,x     
E58D 1F21             (        forth.asm):01093 (4)             tfr     y,x             Potential execution token to X
E58F 8CE969           (        forth.asm):01094 (3)             cmpx    #EBUFS
E592 2505             (        forth.asm):01095 (3)             blo     @fdstr2 
E594 8CFDA7           (        forth.asm):01096 (3)             cmpx    #THEEND
E597 250D             (        forth.asm):01097 (3)             blo     @fdsmtc
E599 8C0C60           (        forth.asm):01098 (3)     @fdstr2 cmpx    #WDICSPC        Term 2 of the predicate for a valid word addr
E59C 2504             (        forth.asm):01099 (3)             blo     @fdsnom
E59E 9C08             (        forth.asm):01100 (4)             cmpx    DICEND
E5A0 2504             (        forth.asm):01101 (3)             blo     @fdsmtc
E5A2 4F               (        forth.asm):01102 (1)     @fdsnom clra                    No match (Z is set)
E5A3 3530             (        forth.asm):01103 (4+4)           puls    x,y
E5A5 39               (        forth.asm):01104 (4)             rts
E5A6 9E06             (        forth.asm):01105 (4)     @fdsmtc ldx     LSTWAD          Potential match. Scan upward from LAST
                      (        forth.asm):01106         * X points to the latest word header, Y has an execution token.
E5A8 109608           (        forth.asm):01107 (5)             ldw     DICEND          W points to the end of the code section
E5AB 3410             (        forth.asm):01108 (4+2)   @fdslop pshs    x               Pointer to the current word header
E5AD E680             (        forth.asm):01109 (4+1)           ldb     ,x+
E5AF C41F             (        forth.asm):01110 (2)             andb    #WRLNMSK
E5B1 3A               (        forth.asm):01111 (1)             abx                     Skip word name string
E5B2 EC81             (        forth.asm):01112 (5+2)           ldd     ,x++            Backlink to D
                      (        forth.asm):01113                 IFNE    RELFEAT
E5B4 3001             (        forth.asm):01114 (4+1)           leax    1,x             Skip the checksum
                      (        forth.asm):01115                 ENDC                    RELFEAT
E5B6 103712           (        forth.asm):01116 (4)             cmpr    x,y
E5B9 2530             (        forth.asm):01117 (3)             blo     @fdsnwd
E5BB 103762           (        forth.asm):01118 (4)             cmpr    w,y
E5BE 222B             (        forth.asm):01119 (3)             bhi     @fdsnwd         An equal address is allowed here, in case
                      (        forth.asm):01120         * jsr ERRHDLR is the last instruction for the word under consideration.
                      (        forth.asm):01121         * This happens to be the case for FORGET and LPAR.
                      (        forth.asm):01122         * Y matches the code range for the current word.
E5C0 3510             (        forth.asm):01123 (4+2)           puls    x
E5C2 E680             (        forth.asm):01124 (4+1)           ldb     ,x+
E5C4 C41F             (        forth.asm):01125 (2)             andb    #WRLNMSK
E5C6 1F9F             (        forth.asm):01126 (4)             tfr     b,f
E5C8 114F             (        forth.asm):01127 (2)             clre                    W has the matched word length
E5CA 10AEE4           (        forth.asm):01128 (6+0)           ldy     ,s              Y points to the target buffer
E5CD 113812           (        forth.asm):01129 (6+?)           tfm     x+,y+
E5D0 6FA4             (        forth.asm):01130 (6+0)           clr     ,y              We need this in case the offset is zero
                      (        forth.asm):01131         * Offset processing.
                      (        forth.asm):01132                 IFNE    RELFEAT
E5D2 3003             (        forth.asm):01133 (4+1)           leax    3,x             Skip backlink and checksum
                      (        forth.asm):01134                 ELSE
                      (        forth.asm):01135                 leax    2,x             Skip backlink
                      (        forth.asm):01136                 ENDC                    RELFEAT
E5D4 EC62             (        forth.asm):01137 (5+1)           ldd     2,s             Execution token to D
E5D6 103210           (        forth.asm):01138 (4)             subr    x,d             Offset between XT and word entry point to D
E5D9 270B             (        forth.asm):01139 (3)             beq     @skoffs         Skip displaying the offset if it is zero
E5DB 3402             (        forth.asm):01140 (4+1)           pshs    a               Preserve the offset's MSB
E5DD 862B             (        forth.asm):01141 (2)             lda     #'+
E5DF A7A0             (        forth.asm):01142 (4+1)           sta     ,y+
E5E1 3502             (        forth.asm):01143 (4+1)           puls    a               Restore the offset's MSB
E5E3 BDE180           (        forth.asm):01144 (7)             jsr     HDMP4           Dump hex incarnation of the offset to Y
E5E6 3530             (        forth.asm):01145 (4+4)   @skoffs puls    x,y
E5E8 1CFB             (        forth.asm):01146 (2)             andcc   #^ZFLAG         Clear ZFLAG
E5EA 39               (        forth.asm):01147 (4)             rts
                      (        forth.asm):01148         * Point to the next word.
E5EB 1039             (        forth.asm):01149 (6)     @fdsnwd pulsw                   Retrieve current word header address
E5ED 104D             (        forth.asm):01150 (2)             tstd
E5EF 27B1             (        forth.asm):01151 (3)             beq     @fdsnom         Just met the last dictionary entry
E5F1 1F01             (        forth.asm):01152 (4)             tfr     d,x             Point to previous word header
E5F3 10810C60         (        forth.asm):01153 (4)             cmpw    #WDICSPC        Are we transitioning from RAM to ROM?
E5F7 26B2             (        forth.asm):01154 (3)             bne     @fdslop         No singularity
E5F9 1086FDA7         (        forth.asm):01155 (4)             ldw     #THEEND         Won't be able to diagnose the ROM based @...
E5FD 20AC             (        forth.asm):01156 (3)             bra     @fdslop
                      (        forth.asm):01157         
                      (        forth.asm):01158         * Find the best possible symbolic approximation of Y and store it to the
                      (        forth.asm):01159         * buffer pointed to by X.
                      (        forth.asm):01160         * On entry:
                      (        forth.asm):01161         * - Y has a code address which is to be matched with a symbolic name + offset.
                      (        forth.asm):01162         * - X points to a buffer where the resolution is to be stored.
                      (        forth.asm):01163         * On return:
                      (        forth.asm):01164         * - Y is to be preserved.
                      (        forth.asm):01165         * - the output buffer will be updated with the best symbolic match (NUL term'd).
E5FF 3430             (        forth.asm):01166 (4+4)   FINDSYM pshs    y,x
E601 8D88             (        forth.asm):01167 (6)             bsr     FDCTSYM         Search the dictionary first (flexible match)
E603 261B             (        forth.asm):01168 (3)             bne     @dctmfn         Dictionary match found
E605 8EE625           (        forth.asm):01169 (3)             ldx     #NDCTWKS        Search kernel symbols for an exact match
E608 EC81             (        forth.asm):01170 (5+2)   @fsmlop ldd     ,x++
E60A 270B             (        forth.asm):01171 (3)             beq     @fsmfnd         End of well known symbols list?
E60C 103720           (        forth.asm):01172 (4)             cmpr    y,d
E60F 2706             (        forth.asm):01173 (3)             beq     @fsmfnd
                      (        forth.asm):01174         * No well known symbol match. Skip string.
E611 A680             (        forth.asm):01175 (4+1)   @fsmskp lda     ,x+
E613 26FC             (        forth.asm):01176 (3)             bne     @fsmskp
E615 20F1             (        forth.asm):01177 (3)             bra     @fsmlop
E617 10AEE4           (        forth.asm):01178 (6+0)   @fsmfnd ldy     ,s
E61A A680             (        forth.asm):01179 (4+1)   @fsmfn2 lda     ,x+
E61C A7A0             (        forth.asm):01180 (4+1)           sta     ,y+
E61E 26FA             (        forth.asm):01181 (3)             bne     @fsmfn2
E620 3262             (        forth.asm):01182 (4+1)   @dctmfn leas    2,s             Drop X from the system stack
E622 3520             (        forth.asm):01183 (4+2)           puls    y
E624 39               (        forth.asm):01184 (4)             rts
                      (        forth.asm):01185         
                      (        forth.asm):01186         * Non-dictionary well known symbols.
E625 E000             (        forth.asm):01187         NDCTWKS fdb     IODZHDL         Illegal opcode/Division by zero trap handler
E627 494F445A48444C00 (        forth.asm):01188                 fcn     'IODZHDL'
E62F E7E8             (        forth.asm):01189                 fdb     DPOPRA          Data stack underflow
E631 44504F50524100   (        forth.asm):01190                 fcn     'DPOPRA'
E638 E7D6             (        forth.asm):01191                 fdb     DPSHRA          Data stack overflow
E63A 44505348524100   (        forth.asm):01192                 fcn     'DPSHRA'
E641 E81E             (        forth.asm):01193                 fdb     RPOPRA          Return stack underflow
E643 52504F50524100   (        forth.asm):01194                 fcn     'RPOPRA'
E64A E804             (        forth.asm):01195                 fdb     RPSHRA          Return stack overflow
E64C 52505348524100   (        forth.asm):01196                 fcn     'RPSHRA'
E653 E73F             (        forth.asm):01197                 fdb     ERRHDLR         Error handler
E655 45525248444C5200 (        forth.asm):01198                 fcn     'ERRHDLR'
E65D E3C2             (        forth.asm):01199                 fdb     CKBASRA         Illegal BASE value
E65F 434B424153524100 (        forth.asm):01200                 fcn     'CKBASRA'
E667 E46E             (        forth.asm):01201                 fdb     CKDPTRA         Not enough parameters supplied (transac. behav.)
E669 434B445054524100 (        forth.asm):01202                 fcn     'CKDPTRA'
E671 E463             (        forth.asm):01203                 fdb     CHKNDPT         Check data stack minimum depth (transac. behav.)
E673 43484B4E44505400 (        forth.asm):01204                 fcn     'CHKNDPT'
E67B E56C             (        forth.asm):01205                 fdb     CMP2RA          Missing operand in any of U<, U>, <, >
E67D 434D5032524100   (        forth.asm):01206                 fcn     'CMP2RA'
E684 E580             (        forth.asm):01207                 fdb     ACQVMRA         Three operands missing in any of CMOVE,
                      (        forth.asm):01208         *                               CMOVE>, MOVE
E686 414351564D524100 (        forth.asm):01209                 fcn     'ACQVMRA'
E68E E0C8             (        forth.asm):01210                 fdb     MINTLRA         Main interpreter loop return address
E690 4D494E544C524100 (        forth.asm):01211                 fcn     'MINTLRA'
E698 E419             (        forth.asm):01212                 fdb     NUMCVRA         ? while converting a string to a number
E69A 4E554D4356524100 (        forth.asm):01213                 fcn     'NUMCVRA'
E6A2 E0E0             (        forth.asm):01214                 fdb     NMCVIRA         Numeric conversion error while interpreting
E6A4 4E4D435649524100 (        forth.asm):01215                 fcn     'NMCVIRA'
E6AC E13A             (        forth.asm):01216                 fdb     NMCVCRA         Numeric conversion error while compiling
E6AE 4E4D435643524100 (        forth.asm):01217                 fcn     'NMCVCRA'
E6B6 E10F             (        forth.asm):01218                 fdb     INTRPRA         Interpreter RA (after the execution of a word)
E6B8 494E545250524100 (        forth.asm):01219                 fcn     'INTRPRA'
E6C0 E128             (        forth.asm):01220                 fdb     COMPLRA         Compiler RA (after the execution of an IMD word)
E6C2 434F4D504C524100 (        forth.asm):01221                 fcn     'COMPLRA'
E6CA E153             (        forth.asm):01222                 fdb     EMXASXT         Emit "JSR <X>" where X has an execution token
E6CC 454D584153585400 (        forth.asm):01223                 fcn     'EMXASXT'
E6D4 E507             (        forth.asm):01224                 fdb     LWMNRA          Missing word name in LOCWRT
E6D6 4C574D4E524100   (        forth.asm):01225                 fcn     'LWMNRA'
E6DD E900             (        forth.asm):01226                 fdb     CFR1SRA         CF read one sector failed
E6DF 4346523153524100 (        forth.asm):01227                 fcn     'CFR1SRA'
E6E7 E7C9             (        forth.asm):01228                 fdb     NPUSH           Not an error RA but useful to have as a symbol
E6E9 4E5055534800     (        forth.asm):01229                 fcn     'NPUSH'
E6EF E7E9             (        forth.asm):01230                 fdb     RPUSH           Not an error RA but useful to have as a symbol
E6F1 525055534800     (        forth.asm):01231                 fcn     'RPUSH'
E6F7 E7D7             (        forth.asm):01232                 fdb     NPOP            Not an error RA but useful to have as a symbol
E6F9 4E504F5000       (        forth.asm):01233                 fcn     'NPOP'
E6FE E805             (        forth.asm):01234                 fdb     RPOP            Not an error RA but useful to have as a symbol
E700 52504F5000       (        forth.asm):01235                 fcn     'RPOP'
E705 E2DE             (        forth.asm):01236                 fdb     PUTS            Not an error RA but useful to have as a symbol
E707 5055545300       (        forth.asm):01237                 fcn     'PUTS'
                      (        forth.asm):01238                 IFNE    DEBUG
                      (        forth.asm):01239                 fdb     LWAFRA          Assertion failure in LOCWRT
                      (        forth.asm):01240                 fcn     'LOCWRTAF'
                      (        forth.asm):01241                 ENDC
E70C 0000             (        forth.asm):01242                 fdb     0               End of list
E70E 3F3F3F00         (        forth.asm):01243                 fcn     '???'           Admit we have no clue!
                      (        forth.asm):01244                 ENDC                    SSDFEAT
                      (        forth.asm):01245         
                      (        forth.asm):01246         * Print ' (xxxx/yyyy)' where xxxx is the hex representation for BLK @ and
                      (        forth.asm):01247         * yyyy is the hex representation for >IN @. Y is preserved, X and D are not.
E712 3420             (        forth.asm):01248 (4+2)   PRBLKIN pshs    y
E714 108E039C         (        forth.asm):01249 (4)             ldy     #HEXBUF
E718 8620             (        forth.asm):01250 (2)             lda     #SP
E71A A7A0             (        forth.asm):01251 (4+1)           sta     ,y+
E71C 8628             (        forth.asm):01252 (2)             lda     #'(
E71E A7A0             (        forth.asm):01253 (4+1)           sta     ,y+
E720 DC26             (        forth.asm):01254 (4)             ldd     UBLK
E722 BDE180           (        forth.asm):01255 (7)             jsr     HDMP4
E725 862F             (        forth.asm):01256 (2)             lda     #'/
E727 A7A0             (        forth.asm):01257 (4+1)           sta     ,y+
E729 DC24             (        forth.asm):01258 (4)             ldd     UTOIN
E72B BDE180           (        forth.asm):01259 (7)             jsr     HDMP4
E72E 8629             (        forth.asm):01260 (2)             lda     #')
E730 A7A0             (        forth.asm):01261 (4+1)           sta     ,y+
E732 6FA4             (        forth.asm):01262 (6+0)           clr     ,y
E734 8E039C           (        forth.asm):01263 (3)             ldx     #HEXBUF
E737 BDE2DE           (        forth.asm):01264 (7)             jsr     PUTS
E73A 3520             (        forth.asm):01265 (4+2)           puls    y
E73C 7EE2EB           (        forth.asm):01266 (3)             jmp     PUTCR
                      (        forth.asm):01267         
                      (        forth.asm):01268         * Handle error condition. Error code is in B.
                      (        forth.asm):01269         * If B is 2 (undefined) X points to a string of length CURTOKL that has the
                      (        forth.asm):01270         * offending word.
E73F 10AEE4           (        forth.asm):01271 (6+0)   ERRHDLR ldy     ,s              Invoking return address
                      (        forth.asm):01272         * In case of a trap return, we enter here with Y set to #IODZHDL
E742 BDE2EB           (        forth.asm):01273 (7)     ERRHD1  jsr     PUTCR           GNU Forth does this in its exception handler
E745 C102             (        forth.asm):01274 (2)             cmpb    #2              Undefined symbol?
E747 2618             (        forth.asm):01275 (3)             bne     @perrm          No
E749 8627             (        forth.asm):01276 (2)             lda     #''             Begin quote
E74B BDE2CB           (        forth.asm):01277 (7)             jsr     PUTCH
E74E A680             (        forth.asm):01278 (4+1)   @prtsym lda     ,x+             Display undefined symbol name
E750 BDE2CB           (        forth.asm):01279 (7)             jsr     PUTCH
E753 0A3A             (        forth.asm):01280 (5)             dec     CURTOKL
E755 26F7             (        forth.asm):01281 (3)             bne     @prtsym
E757 8627             (        forth.asm):01282 (2)             lda     #''             End quote
E759 BDE2CB           (        forth.asm):01283 (7)             jsr     PUTCH
E75C 8620             (        forth.asm):01284 (2)             lda     #SP             BL EMIT
E75E BDE2CB           (        forth.asm):01285 (7)             jsr     PUTCH
E761 8EFE69           (        forth.asm):01286 (3)     @perrm  ldx     #ERRMTBL        Regular error handling
E764 5D               (        forth.asm):01287 (1)     @nxterr tstb
E765 2637             (        forth.asm):01288 (3)             bne     @skerrm
E767 BDE2DE           (        forth.asm):01289 (7)             jsr     PUTS            Print error message
E76A 8DA6             (        forth.asm):01290 (6)             bsr     PRBLKIN         Print BLK and >IN values (in hex)
E76C 1F20             (        forth.asm):01291 (4)     @dmptos tfr     y,d             Dump top of the system stack contents
                      (        forth.asm):01292                 IFNE    SSDFEAT
E76E 3406             (        forth.asm):01293 (4+2)           pshs    d
                      (        forth.asm):01294                 ENDC                    SSDFEAT
E770 108E039C         (        forth.asm):01295 (4)             ldy     #HEXBUF
E774 BDE180           (        forth.asm):01296 (7)             jsr     HDMP4
E777 8620             (        forth.asm):01297 (2)             lda     #SP
E779 A7A0             (        forth.asm):01298 (4+1)           sta     ,y+
                      (        forth.asm):01299         * Symbolic stack dumps are configurable. In situations where the dictionary is
                      (        forth.asm):01300         * trashed, they may not be considered desirable. See SSDFEAT in constants.asm.
                      (        forth.asm):01301                 IFNE    SSDFEAT
E77B 1F21             (        forth.asm):01302 (4)             tfr     y,x             X has the buffer pointer
E77D 3520             (        forth.asm):01303 (4+2)           puls    y               Restore target symbol table entry
E77F BDE5FF           (        forth.asm):01304 (7)             jsr     FINDSYM
                      (        forth.asm):01305                 ELSE
                      (        forth.asm):01306                 clr     ,y              No symbolic information is to be printed
                      (        forth.asm):01307                 ENDC                    SSDFEAT
E782 8E039C           (        forth.asm):01308 (3)             ldx     #HEXBUF
E785 BDE2DE           (        forth.asm):01309 (7)             jsr     PUTS
E788 BDE2EB           (        forth.asm):01310 (7)             jsr     PUTCR
E78B 108CE000         (        forth.asm):01311 (4)             cmpy    #IODZHDL
E78F 2702             (        forth.asm):01312 (3)             beq     @wastrp         We're just back from the trap handler
E791 3262             (        forth.asm):01313 (4+1)           leas    2,s             Point to the next item on the stack
E793 118C8000         (        forth.asm):01314 (4)     @wastrp cmps    #RAMSTRT+RAMSIZE
E797 240C             (        forth.asm):01315 (3)             bhs     @errdon         We're done here
E799 10AEE4           (        forth.asm):01316 (6+0)           ldy     ,s
E79C 20CE             (        forth.asm):01317 (3)             bra     @dmptos
E79E A680             (        forth.asm):01318 (4+1)   @skerrm lda     ,x+             Scan for the next error message
E7A0 26FC             (        forth.asm):01319 (3)             bne     @skerrm
E7A2 5A               (        forth.asm):01320 (1)             decb
E7A3 20BF             (        forth.asm):01321 (3)             bra     @nxterr
E7A5 10CE8000         (        forth.asm):01322 (4)     @errdon lds     #RAMSTRT+RAMSIZE
E7A9 0D23             (        forth.asm):01323 (4)             tst     USTATE+1        We do ignore the upper byte
E7AB 2710             (        forth.asm):01324 (3)             beq     @erdon2         No pointers to restore if we were interpreting
                      (        forth.asm):01325         * We were compiling: clear STATE; restore DICEND and LSTWAD, if not :NONAME.
E7AD 0F23             (        forth.asm):01326 (5)             clr     USTATE+1        Switch back to interpretation mode
E7AF 9E0C             (        forth.asm):01327 (4)             ldx     BDICEND         Restore essential pointers from backups
E7B1 9F08             (        forth.asm):01328 (4)             stx     DICEND          Restore HERE
E7B3 0D2E             (        forth.asm):01329 (4)             tst     ANCMPF
E7B5 2604             (        forth.asm):01330 (3)             bne     @clrano
E7B7 9E0A             (        forth.asm):01331 (4)             ldx     BLSTWAD
E7B9 9F06             (        forth.asm):01332 (4)             stx     LSTWAD          Restore LAST
E7BB 0F2E             (        forth.asm):01333 (5)     @clrano clr     ANCMPF
E7BD BDEB2E           (        forth.asm):01334         @erdon2 RFXT    jsr,RCLR+7      Clear the return stack and
E7C0 BDEB22           (        forth.asm):01335                 RFXT    jsr,NCLR+7      the control flow stack (moved here from ABORT)
E7C3 BDFB27           (        forth.asm):01336                 RFXT    jsr,DECIMAL+10  Back to decimal BASE, for one's sanity sake!
E7C6 7EE0B2           (        forth.asm):01337 (3)             jmp     INTERP
                      (        forth.asm):01338         
                      (        forth.asm):01339         * Push X to the data stack (boundary is checked).
E7C9 118301D8         (        forth.asm):01340 (4)     NPUSH   cmpu    #NSTTOP
E7CD 2303             (        forth.asm):01341 (3)             bls     @npush1         Anything <= than #NSTTOP indicates overflow
E7CF 3610             (        forth.asm):01342 (4+2)           pshu    x               Aka UCNPUSH
E7D1 39               (        forth.asm):01343 (4)             rts
E7D2 5F               (        forth.asm):01344 (1)     @npush1 clrb                    Data stack overflow
E7D3 BDE73F           (        forth.asm):01345 (7)             jsr     ERRHDLR         No return
     E7D6             (        forth.asm):01346         DPSHRA  equ     *
E7D6 12               (        forth.asm):01347 (1)             nop
                      (        forth.asm):01348         
                      (        forth.asm):01349         * Pull X from the data stack (boundary is checked).
                      (        forth.asm):01350         * D, W and Y are preserved.
E7D7 11830298         (        forth.asm):01351 (4)     NPOP    cmpu    #NSTBOT
E7DB 2406             (        forth.asm):01352 (3)             bhs     @npop1          Anything >= than #NSTBOT indicates underflow
E7DD 3710             (        forth.asm):01353 (4+2)           pulu    x
E7DF 1037C1           (        forth.asm):01354 (4)             cmpr    0,x             Update CC based on the outcome
E7E2 39               (        forth.asm):01355 (4)             rts
E7E3 C601             (        forth.asm):01356 (2)     @npop1  ldb     #1              Data stack underflow
E7E5 BDE73F           (        forth.asm):01357 (7)             jsr     ERRHDLR         No return
     E7E8             (        forth.asm):01358         DPOPRA  equ     *
E7E8 12               (        forth.asm):01359 (1)             nop
                      (        forth.asm):01360         
                      (        forth.asm):01361         * Push X to the return stack (boundary is checked).
E7E9 9632             (        forth.asm):01362 (3)     RPUSH   lda     RDEPTH          RDEPTH is expressed in cells
E7EB 8140             (        forth.asm):01363 (2)             cmpa    #RSTKSZ/2       But RSTKZ is expressed in bytes
E7ED 2710             (        forth.asm):01364 (3)             beq     @rpush1
E7EF 4C               (        forth.asm):01365 (1)             inca
E7F0 9732             (        forth.asm):01366 (3)             sta     RDEPTH
E7F2 1F27             (        forth.asm):01367 (4)             tfr     y,v
E7F4 109E00           (        forth.asm):01368 (5)             ldy     RSP
E7F7 AFA3             (        forth.asm):01369 (5+2)           stx     ,--y
E7F9 109F00           (        forth.asm):01370 (5)             sty     RSP
E7FC 1F72             (        forth.asm):01371 (4)             tfr     v,y
E7FE 39               (        forth.asm):01372 (4)             rts
E7FF C607             (        forth.asm):01373 (2)     @rpush1 ldb     #7              Return stack overflow
E801 BDE73F           (        forth.asm):01374 (7)             jsr     ERRHDLR         No return
     E804             (        forth.asm):01375         RPSHRA  equ     *
E804 12               (        forth.asm):01376 (1)             nop                     Meant to insulate RPUSH errors from RPOP EP
                      (        forth.asm):01377         
                      (        forth.asm):01378         * Pull X from the return stack (boundary is checked).
E805 9632             (        forth.asm):01379 (3)     RPOP    lda     RDEPTH          RDEPTH is expressed in cells
E807 2710             (        forth.asm):01380 (3)             beq     @rpop1
E809 4A               (        forth.asm):01381 (1)             deca
E80A 9732             (        forth.asm):01382 (3)             sta     RDEPTH
E80C 1F27             (        forth.asm):01383 (4)             tfr     y,v
E80E 109E00           (        forth.asm):01384 (5)             ldy     RSP
E811 AEA1             (        forth.asm):01385 (5+2)           ldx     ,y++
E813 109F00           (        forth.asm):01386 (5)             sty     RSP
E816 1F72             (        forth.asm):01387 (4)             tfr     v,y
E818 39               (        forth.asm):01388 (4)             rts
E819 C608             (        forth.asm):01389 (2)     @rpop1  ldb     #8              Return stack underflow
E81B BDE73F           (        forth.asm):01390 (7)             jsr     ERRHDLR         No return
     E81E             (        forth.asm):01391         RPOPRA  equ     *
                      (        forth.asm):01392         
E81E 0D2F             (        forth.asm):01393 (4)     BALCHK  tst     BALNCD
E820 2601             (        forth.asm):01394 (3)             bne     BALERR
E822 39               (        forth.asm):01395 (4)             rts
E823 C609             (        forth.asm):01396 (2)     BALERR  ldb     #9              Illegal construct
E825 BDE73F           (        forth.asm):01397 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):01398         
                      (        forth.asm):01399         * Derive the current input stream pointer from BLK and >IN.
                      (        forth.asm):01400         * The resulting address is returned in X. D is altered.
                      (        forth.asm):01401         * Both Y and W are preserved.
E828 9E26             (        forth.asm):01402 (4)     BKIN2PT ldx     UBLK
E82A 2716             (        forth.asm):01403 (3)             beq     @notblk         We are switching back to the console
E82C 1038             (        forth.asm):01404 (6)             pshsw
E82E 3420             (        forth.asm):01405 (4+2)           pshs    y
E830 8D97             (        forth.asm):01406 (6)             bsr     NPUSH           Make sure BLK @ is loaded
E832 BDEA4A           (        forth.asm):01407                 RFXT    jsr,BLOCK+8     XT for BLOCK
E835 3520             (        forth.asm):01408 (4+2)           puls    y
E837 1039             (        forth.asm):01409 (6)             pulsw
E839 3710             (        forth.asm):01410                 UCNPOP                  Retrieve buffer addr to X
E83B 9F1E             (        forth.asm):01411 (4)     @done   stx     BSBFADR         Update base buffer address
E83D DC24             (        forth.asm):01412 (4)             ldd     UTOIN
E83F 308B             (        forth.asm):01413 (4+2)           leax    d,x             Add the current offset. Return the result via X
E841 39               (        forth.asm):01414 (4)             rts
E842 8E0318           (        forth.asm):01415 (3)     @notblk ldx     #CMDBUF
E845 20F4             (        forth.asm):01416 (3)             bra     @done
                      (        forth.asm):01417         
                      (        forth.asm):01418                 include rtc.asm         Experimental MC146818 support
                      (          rtc.asm):00001                 IFNE RTCFEAT
                      (          rtc.asm):00002         
                      (          rtc.asm):00003         * FIRQ handler for the MC146818 RTC.
                      (          rtc.asm):00004         * In this particular context, only D and CC might be altered.
E847                  (          rtc.asm):00005         RTCIHDL tst     RTCAVL          RTC chip detected?
                      (          rtc.asm):00006                 beq     @notick         Nope
                      (          rtc.asm):00007                 lda     #RTOREGC        Read RTCC. INTACK if any interrupt is pending.
                      (          rtc.asm):00008         * Two intructions inlined for RTREGRD in non-preemtible (interrupt) mode.
                      (          rtc.asm):00009                 sta     RTAS
                      (          rtc.asm):00010                 ldb     RTDS
                      (          rtc.asm):00011                 andb    #RTCPF          RTC periodic interrupt pending?
                      (          rtc.asm):00012                 beq     @notick         No, this ain't us ticking
                      (          rtc.asm):00013         * From "The 6309 Book" p. 3-69: "Note that INC does not effect the carry bit."
E847                  (          rtc.asm):00014         @inctks ldd     TIKSLOW
                      (          rtc.asm):00015                 addd    #1
                      (          rtc.asm):00016                 std     TIKSLOW
                      (          rtc.asm):00017                 ldd     TIKSHI
                      (          rtc.asm):00018                 adcd    #0
                      (          rtc.asm):00019                 std     TIKSHI
E847                  (          rtc.asm):00020         @notick rts
                      (          rtc.asm):00021         
                      (          rtc.asm):00022         * Read one byte from an internal's RTC register whose offset is in A upon
                      (          rtc.asm):00023         * routine entry. The register contents is returned in B.
                      (          rtc.asm):00024         * No other register is altered. FIRQ is temporarily disabled.
                      (          rtc.asm):00025         * Can be called from base or interrupt level.
E847                  (          rtc.asm):00026         RTREGRD pshs    cc
                      (          rtc.asm):00027                 orcc    #FFLAG          Mask FIRQ
                      (          rtc.asm):00028                 sta     RTAS            Select target RTC register
                      (          rtc.asm):00029                 ldb     RTDS            Read RTC register contents
                      (          rtc.asm):00030                 puls    cc              Restore previous interrupt handling mode
                      (          rtc.asm):00031                 rts
                      (          rtc.asm):00032         
                      (          rtc.asm):00033         * Write one byte to an internal's RTC register whose offset is in A upon
                      (          rtc.asm):00034         * routine entry. The register byte output value is in B upon entry.
                      (          rtc.asm):00035         * FIRQ is temporarily masked. All regs contents are preserved.
                      (          rtc.asm):00036         * Can be called from base or interrupt level.
E847                  (          rtc.asm):00037         RTREGWR pshs    cc
                      (          rtc.asm):00038                 orcc    #FFLAG          Mask FIRQ
                      (          rtc.asm):00039                 sta     RTAS            Select target RTC register
                      (          rtc.asm):00040                 stb     RTDS            Write RTC register contents
                      (          rtc.asm):00041                 puls    cc              Restore previous interrupt handling mode
                      (          rtc.asm):00042                 rts
                      (          rtc.asm):00043         
                      (          rtc.asm):00044         * Detect if an MC146818 chip is present.
E847                  (          rtc.asm):00045         RTCINIT
                      (          rtc.asm):00046                 IFNE    DEBUG
                      (          rtc.asm):00047                 clrd
                      (          rtc.asm):00048                 std     TIKSHI          Initialize the TICKS double cell
                      (          rtc.asm):00049                 std     TIKSLOW
                      (          rtc.asm):00050                 clr     RTCAVL          Assume chip not present
                      (          rtc.asm):00051                 ENDC
                      (          rtc.asm):00052                 lda     #RTOPRES        Offset to the last NVRAM byte if dev is present
                      (          rtc.asm):00053                 bsr     RTREGRD         Read user memory byte. Value is returned in B   
                      (          rtc.asm):00054                 comb                    One's complement to B
                      (          rtc.asm):00055                 pshs    b
                      (          rtc.asm):00056                 bsr     RTREGWR         Write back one's complement to RTC
                      (          rtc.asm):00057                 bsr     RTREGRD         And read the last NVRAM byte back
                      (          rtc.asm):00058                 puls    a
                      (          rtc.asm):00059                 cmpr    b,a             Match?
                      (          rtc.asm):00060                 beq     @rtdtct         RTC chip detected all right!
                      (          rtc.asm):00061                 rts
                      (          rtc.asm):00062         * MC146818 RTC chip detected.
                      (          rtc.asm):00063         * On power up if register RTCA reads as 0, the SET bit in register RTCB will
                      (          rtc.asm):00064         * prevent any updates to the calendar (date/time). We do preserve the state of
                      (          rtc.asm):00065         * the SET bit, so as to indicate to the application software that the time and
                      (          rtc.asm):00066         * date have yet to be set manually.
E847                  (          rtc.asm):00067         @rtdtct lda     #RTOREGA
                      (          rtc.asm):00068                 ldb     #(RTADV32|RTARS64)
                      (          rtc.asm):00069                 bsr     RTREGWR         Write B to the RTCA register
                      (          rtc.asm):00070                 lda     #RTOREGB
                      (          rtc.asm):00071                 bsr     RTREGRD
                      (          rtc.asm):00072                 andb    #RTBSET         Extract the SET bit
                      (          rtc.asm):00073                 orb     #(RTBPIE|RTBDM|RTB24)
                      (          rtc.asm):00074                 bsr     RTREGWR         Write B to the RTCB register
                      (          rtc.asm):00075                 inc     RTCAVL
                      (          rtc.asm):00076                 ldx     #RTPRESM        Real time clock detected message base address
                      (          rtc.asm):00077                 jmp     PUTS            Out to the console
                      (          rtc.asm):00078         
                      (          rtc.asm):00079                 ENDC                    RTCFEAT
                      (          rtc.asm):00080         
                      (        forth.asm):01419                 include storage.asm     CompactFlash support
                      (      storage.asm):00001         * Wait until the BSY bit is clear in the CF status register.
                      (      storage.asm):00002         * Upon return the BSY bit is guaranteed to be zero. Z will
                      (      storage.asm):00003         * be set in CC. This subroutine should not be called before
                      (      storage.asm):00004         * the CompactFlash presence has been assessed.
E847 B6C007           (      storage.asm):00005 (4)     CFWAIT  lda     CFSTATR
E84A 8580             (      storage.asm):00006 (2)             bita    #CFBSYB
E84C 26F9             (      storage.asm):00007 (3)             bne     CFWAIT
E84E 39               (      storage.asm):00008 (4)             rts
                      (      storage.asm):00009         
                      (      storage.asm):00010         * Wait until the BSY bit is clear and the RDY bit is set.
E84F 8DF6             (      storage.asm):00011 (6)     CFRDY   bsr     CFWAIT
E851 2703             (      storage.asm):00012 (3)             beq     @cfrdy0         Card not busy, proceed
E853 1A04             (      storage.asm):00013 (2)             orcc    #ZFLAG
E855 39               (      storage.asm):00014 (4)             rts
E856 8E2000           (      storage.asm):00015 (3)     @cfrdy0 ldx     #$2000          Maximum poll count
E859 8640             (      storage.asm):00016 (2)             lda     #CFRDYB
E85B B5C007           (      storage.asm):00017 (4)     @cfrdy1 bita    CFSTATR
E85E 2604             (      storage.asm):00018 (3)             bne     @cfrdy2         BSY bit is set, continue
E860 301F             (      storage.asm):00019 (4+1)           leax    -1,x            Card not ready, decrement poll count
E862 26F7             (      storage.asm):00020 (3)             bne     @cfrdy1         and try again
E864 39               (      storage.asm):00021 (4)     @cfrdy2 rts                     Return with Z set: card not present
                      (      storage.asm):00022         *                               Return with Z clear: card is ready
                      (      storage.asm):00023         
                      (      storage.asm):00024         * Check for possible error condition.
                      (      storage.asm):00025         * Upon return either Z is set (A is zero) and no error occurred or
                      (      storage.asm):00026         * Z is clear and the CF error register contents is returned in A.
E865 8DE0             (      storage.asm):00027 (6)     CFERRCK bsr     CFWAIT
E867 B6C007           (      storage.asm):00028 (4)             lda     CFSTATR
E86A 8401             (      storage.asm):00029 (2)             anda    #CFERRB
E86C 2703             (      storage.asm):00030 (3)             beq     @cfeck1
E86E B6C001           (      storage.asm):00031 (4)             lda     CFERROR         The error register contains error details
E871 39               (      storage.asm):00032 (4)     @cfeck1 rts
                      (      storage.asm):00033         
                      (      storage.asm):00034         * Issue CF command. The command code is passed through the B register.
                      (      storage.asm):00035         * Upon return:
                      (      storage.asm):00036         * - Z is set and everything is peachy.
                      (      storage.asm):00037         * - or Z is clear and the CF error register contents will be
                      (      storage.asm):00038         *   returned in A (and mirrored in the global CFERRCD variable).
                      (      storage.asm):00039         * B is preserved.
E872 8DDB             (      storage.asm):00040 (6)     CFCMDIS bsr     CFRDY
E874 270A             (      storage.asm):00041 (3)             beq     @cfciab         Card not ready, abort
E876 D740             (      storage.asm):00042 (3)             stb     CFCMMIR         Update CF command mirror
E878 F7C007           (      storage.asm):00043 (4)             stb     CFCOMDR         Send command to the CF card
E87B 8DE8             (      storage.asm):00044 (6)             bsr     CFERRCK
E87D 9741             (      storage.asm):00045 (3)     @cfcise sta     CFERRCD         CF command issue set error
                      (      storage.asm):00046                 IFNE    DEBUG
                      (      storage.asm):00047                 pshs    a,cc
                      (      storage.asm):00048                 beq     @cfciok
                      (      storage.asm):00049                 lda     #'!
                      (      storage.asm):00050                 jsr     PUTCH
E87F                  (      storage.asm):00051         @cfcidi lda     CFCMMIR
                      (      storage.asm):00052                 ldx     #TBUFF
                      (      storage.asm):00053                 jsr     HDMP2
                      (      storage.asm):00054                 lda     #'/
                      (      storage.asm):00055                 sta     ,x+
                      (      storage.asm):00056                 lda     CFERRCD
                      (      storage.asm):00057                 jsr     HDMP2
                      (      storage.asm):00058                 ldx     #TBUFF
                      (      storage.asm):00059                 jsr     PUTS
                      (      storage.asm):00060                 jsr     PUTCR
                      (      storage.asm):00061                 bra     @cfcict         CF command issue continued
E87F                  (      storage.asm):00062         @cfciok lda     #'#
                      (      storage.asm):00063                 jsr     PUTCH
                      (      storage.asm):00064                 bra     @cfcidi         CF command issue data indication
E87F                  (      storage.asm):00065         @cfcict puls    cc,a
                      (      storage.asm):00066                 ENDC
E87F 39               (      storage.asm):00067 (4)             rts
E880 86FF             (      storage.asm):00068 (2)     @cfciab lda     #$FF            Dummy error code
E882 20F9             (      storage.asm):00069 (3)             bra     @cfcise
                      (      storage.asm):00070         
                      (      storage.asm):00071         * Drive 0 select.
E884 8DC9             (      storage.asm):00072 (6)     CFDRSEL bsr     CFRDY
E886 86E0             (      storage.asm):00073 (2)             lda     #$E0            Drive 0, LBA mode
E888 B7C006           (      storage.asm):00074 (4)             sta     CFDRHDR
E88B 20C2             (      storage.asm):00075 (3)             bra     CFRDY
                      (      storage.asm):00076         
                      (      storage.asm):00077         * Analyze the response to the CF "Identify Device" request.
E88D 9E08             (      storage.asm):00078 (4)     CFANTHS ldx     DICEND
E88F 308836           (      storage.asm):00079 (4+1)           leax    $36,x           Point to the "Model number" field
E892 3410             (      storage.asm):00080 (4+2)           pshs    x
E894 118614           (      storage.asm):00081 (3)             lde     #$14            Number of 16 bit words to go through
E897 EC84             (      storage.asm):00082 (5+0)   @bytswp ldd     ,x
E899 1E98             (      storage.asm):00083 (5)             exg     b,a             Byte swapping
E89B ED81             (      storage.asm):00084 (5+2)           std     ,x++
E89D 114A             (      storage.asm):00085 (2)             dece
E89F 26F6             (      storage.asm):00086 (3)             bne     @bytswp
E8A1 6F84             (      storage.asm):00087 (6+0)           clr     ,x
E8A3 3510             (      storage.asm):00088 (4+2)           puls    x
E8A5 BDE2DE           (      storage.asm):00089 (7)             jsr     PUTS            Decent CF cards indicate the capacity that way
E8A8 7EE2EB           (      storage.asm):00090 (3)             jmp     PUTCR           Up to $10000 blocks is 64 MB!
                      (      storage.asm):00091         
                      (      storage.asm):00092         * Initialize the CompactFlash subsystem.
                      (      storage.asm):00093         * This is run once at boot time. There is no hot plug support here.
E8AB 0F3F             (      storage.asm):00094 (5)     CFINIT  clr     CFCARDP         Clear card present,
                      (      storage.asm):00095                 IFEQ    DEBUG
E8AD 8DA0             (      storage.asm):00096 (6)             bsr     CFRDY
                      (      storage.asm):00097                 ELSE
                      (      storage.asm):00098                 jsr     CFRDY
                      (      storage.asm):00099                 ENDC
E8AF 2730             (      storage.asm):00100 (3)             beq     @cfinab         Card not ready, abort
E8B1 8DD1             (      storage.asm):00101 (6)             bsr     CFDRSEL         Drive 0 select
E8B3 8601             (      storage.asm):00102 (2)             lda     #1              Enable 8-bit data transfers
E8B5 B7C001           (      storage.asm):00103 (4)             sta     CFFEATR
E8B8 C6EF             (      storage.asm):00104 (2)             ldb     #CFSETFT        Issue a CF "Set Feature" command
                      (      storage.asm):00105                 IFEQ    DEBUG
E8BA 8DB6             (      storage.asm):00106 (6)             bsr     CFCMDIS         Not allowed to fail
                      (      storage.asm):00107                 ELSE
                      (      storage.asm):00108                 jsr     CFCMDIS         Not allowed to fail
                      (      storage.asm):00109                 ENDC
E8BC 2623             (      storage.asm):00110 (3)             bne     @cfinab         Abort with card present flag clear
E8BE 8601             (      storage.asm):00111 (2)             lda     #1              Request default PIO mode wo/ IORDY
E8C0 B7C002           (      storage.asm):00112 (4)             sta     CFSCNTR
E8C3 8603             (      storage.asm):00113 (2)             lda     #3              ATA-2 "Set Transfer mode"
E8C5 B7C001           (      storage.asm):00114 (4)             sta     CFFEATR
                      (      storage.asm):00115                 IFEQ    DEBUG
E8C8 8DA8             (      storage.asm):00116 (6)             bsr     CFCMDIS         OK to fail
                      (      storage.asm):00117                 ELSE
                      (      storage.asm):00118                 jsr     CFCMDIS         OK to fail
                      (      storage.asm):00119                 ENDC
E8CA 8682             (      storage.asm):00120 (2)             lda     #$82            Disable write caching
E8CC B7C001           (      storage.asm):00121 (4)             sta     CFFEATR
                      (      storage.asm):00122                 IFEQ    DEBUG
E8CF 8DA1             (      storage.asm):00123 (6)             bsr     CFCMDIS         B still has #CFSETF. Also OK to fail
                      (      storage.asm):00124                 ELSE
                      (      storage.asm):00125                 jsr     CFCMDIS         B still has #CFSETF. Also OK to fail
                      (      storage.asm):00126                 ENDC
E8D1 C6EC             (      storage.asm):00127 (2)             ldb     #CFIDDEV        Issue a CF "Identify Device" command
                      (      storage.asm):00128                 IFEQ    DEBUG
E8D3 8D9D             (      storage.asm):00129 (6)             bsr     CFCMDIS         Not allowed to fail
                      (      storage.asm):00130                 ELSE
                      (      storage.asm):00131                 jsr     CFCMDIS         Not allowed to fail
                      (      storage.asm):00132                 ENDC
E8D5 260A             (      storage.asm):00133 (3)             bne     @cfinab         Abort with card present flag clear
E8D7 9E08             (      storage.asm):00134 (4)             ldx     DICEND          Target address is HERE
E8D9 8D07             (      storage.asm):00135 (6)             bsr     CF1SRD          Read one sector
E8DB 8DB0             (      storage.asm):00136 (6)             bsr     CFANTHS         Analyze this!
E8DD 8601             (      storage.asm):00137 (2)             lda     #1
E8DF 973F             (      storage.asm):00138 (3)             sta     CFCARDP         Set the card present flag
E8E1 39               (      storage.asm):00139 (4)     @cfinab rts
                      (      storage.asm):00140         
                      (      storage.asm):00141         * Read one sector. The LBA parameters are assumed to have been set previously.
                      (      storage.asm):00142         * On input X points to the receiving (at least 512 bytes long) buffer.
E8E2 B6C007           (      storage.asm):00143 (4)     CF1SRD  lda     CFSTATR
E8E5 8508             (      storage.asm):00144 (2)             bita    #CFDRQB         Check for DRQ bit in the CF status register
E8E7 2712             (      storage.asm):00145 (3)             beq     IOERR
E8E9 10860200         (      storage.asm):00146 (4)             ldw     #CFSCSZ         Sector size is 512 bytes
E8ED 108EC000         (      storage.asm):00147 (4)             ldy     #CFDATAR        The data source address
E8F1 3401             (      storage.asm):00148 (4+1)           pshs    cc
E8F3 1A50             (      storage.asm):00149 (2)             orcc    #(FFLAG|IFLAG)  Disable maskable interrupts
E8F5 113B21           (      storage.asm):00150 (6+?)           tfm     y,x+
E8F8 3501             (      storage.asm):00151 (4+1)           puls    cc              Restore previous interrupt handling mode
E8FA 39               (      storage.asm):00152 (4)             rts
E8FB C611             (      storage.asm):00153 (2)     IOERR   ldb     #17
E8FD BDE73F           (      storage.asm):00154 (7)             jsr     ERRHDLR         No return
E900 12               (      storage.asm):00155 (1)     CFR1SRA nop                     For symbolic stack dump debugging purposes
                      (      storage.asm):00156         
                      (      storage.asm):00157         * Write one sector. The LBA parameters are assumed to have been set previously.
                      (      storage.asm):00158         * On input X points to the sending (at least 512 bytes long) buffer.
E901 B6C007           (      storage.asm):00159 (4)     CF1SWR  lda     CFSTATR
E904 8488             (      storage.asm):00160 (2)             anda    #CFBSYB|CFDRQB
E906 8108             (      storage.asm):00161 (2)             cmpa    #CFDRQB         Check for BSY clear and DRQ set
E908 26F7             (      storage.asm):00162 (3)             bne     CF1SWR
E90A 10860200         (      storage.asm):00163 (4)             ldw     #CFSCSZ         Sector size is 512 bytes
E90E 108EC000         (      storage.asm):00164 (4)             ldy     #CFDATAR        The data destination address
E912 113A12           (      storage.asm):00165 (6+?)           tfm     x+,y            Note: tfm is interruptible!
E915 39               (      storage.asm):00166 (4)             rts
                      (      storage.asm):00167         
                      (      storage.asm):00168         * 1KB Forth block support primitives. Not dictionary code. More like BIOS ops.
                      (      storage.asm):00169         
                      (      storage.asm):00170         * One block IO preamble: select drive and LBA parameters. On input:
                      (      storage.asm):00171         * ,s has the return address
                      (      storage.asm):00172         * 2,s had the return address for the caller
                      (      storage.asm):00173         * 4,s has the target block number
E916 BDE847           (      storage.asm):00174 (7)     CF1BPRE jsr     CFWAIT
E919 BDE884           (      storage.asm):00175 (7)             jsr     CFDRSEL         Set drive and head parameters
E91C EC64             (      storage.asm):00176 (5+1)           ldd     4,s
E91E 1048             (      storage.asm):00177 (2)             lsld                    Convert block number to sector number
E920 F7C003           (      storage.asm):00178 (4)             stb     CFSNUMR         LBA 7-0
E923 B7C004           (      storage.asm):00179 (4)             sta     CFCLOWR         LBA 15-8
E926 1FA8             (      storage.asm):00180 (4)             tfr     cc,a
E928 8401             (      storage.asm):00181 (2)             anda    #CFLAG
E92A B7C005           (      storage.asm):00182 (4)             sta     CFCHIGR         LBA 23-16 (carry to cylinder high)
E92D 8602             (      storage.asm):00183 (2)             lda     #2              2 IDE sectors per Forth block
E92F B7C002           (      storage.asm):00184 (4)             sta     CFSCNTR
E932 39               (      storage.asm):00185 (4)             rts
                      (      storage.asm):00186         
                      (      storage.asm):00187         * Read one block from CF device. On input:
                      (      storage.asm):00188         * ,s has the return address
                      (      storage.asm):00189         * 2,s has the target block number
                      (      storage.asm):00190         * 4,s has the buffer base address
                      (      storage.asm):00191         * Upon return, Y will be preserved.
E933 0D3F             (      storage.asm):00192 (4)     CF1BKRD tst     CFCARDP
E935 2602             (      storage.asm):00193 (3)             bne     @ctnued
E937 20C2             (      storage.asm):00194 (3)             bra     IOERR           Card not present--CF subsystem not initialized
E939 1F27             (      storage.asm):00195 (4)     @ctnued tfr     y,v
E93B 8DD9             (      storage.asm):00196 (6)             bsr     CF1BPRE
E93D C620             (      storage.asm):00197 (2)             ldb     #CFRSCTS        Issue a "Read sectors" CF command
E93F BDE872           (      storage.asm):00198 (7)             jsr     CFCMDIS
E942 AE64             (      storage.asm):00199 (5+1)           ldx     4,s             Target buffer address to X
E944 8D9C             (      storage.asm):00200 (6)             bsr     CF1SRD          Read the even sector from CF device
E946 BDE847           (      storage.asm):00201 (7)             jsr     CFWAIT          Wait for next sector to become available
E949 8D97             (      storage.asm):00202 (6)             bsr     CF1SRD          and read the odd sector
E94B 1F72             (      storage.asm):00203 (4)             tfr     v,y
E94D 39               (      storage.asm):00204 (4)             rts
                      (      storage.asm):00205         
                      (      storage.asm):00206         * Write one block to CF device. Upon entry:
                      (      storage.asm):00207         * ,s has the return address
                      (      storage.asm):00208         * 2,s has the target block number
                      (      storage.asm):00209         * 4,s has the buffer base address
                      (      storage.asm):00210         * Upon return, Y will be preserved.
E94E 0D3F             (      storage.asm):00211 (4)     CF1BKWR tst     CFCARDP
E950 2602             (      storage.asm):00212 (3)             bne     @ctnued
E952 20A7             (      storage.asm):00213 (3)             bra     IOERR           Card not present--CF subsystem not initialized
E954 1F27             (      storage.asm):00214 (4)     @ctnued tfr     y,v
E956 8DBE             (      storage.asm):00215 (6)             bsr     CF1BPRE
E958 C630             (      storage.asm):00216 (2)             ldb     #CFWSCTS        Issue a "Write sectors" CF command
E95A BDE872           (      storage.asm):00217 (7)             jsr     CFCMDIS
E95D AE64             (      storage.asm):00218 (5+1)           ldx     4,s             Source buffer address to X
E95F 8DA0             (      storage.asm):00219 (6)             bsr     CF1SWR          Write the even sector to CF device
E961 BDE847           (      storage.asm):00220 (7)             jsr     CFWAIT          Wait for next sector to become available
E964 8D9B             (      storage.asm):00221 (6)             bsr     CF1SWR          and write the odd sector
E966 1F72             (      storage.asm):00222 (4)             tfr     v,y
E968 39               (      storage.asm):00223 (4)             rts
                      (      storage.asm):00224         
                      (        forth.asm):01420         
                      (        forth.asm):01421         ******************************************************************************
                      (        forth.asm):01422         * Dictionary begins. Please note that @ has to be the first (in linked list
                      (        forth.asm):01423         * order) word and EMPTY-BUFFERS has to be the last one. In the code below ANSI
                      (        forth.asm):01424         * refers to ANSI-X3.215-1994 Draft 6 proposal (i.e. the free spec).
                      (        forth.asm):01425         
E969 0D               (        forth.asm):01426         EBUFS   fcb     13              79-STANDARD (REQ145)
E96A 454D5054592D4255 (        forth.asm):01427                 fcc     'EMPTY-BUFFERS' ( -- )
     4646455253
E977 0000             (        forth.asm):01428                 fdb     0               Last dictionary entry
E979 C7               (        forth.asm):01429                 RFCS
E97A 8E0440           (        forth.asm):01430 (3)     EMPTYB  ldx     #BUF0
E97D 8D03             (        forth.asm):01431 (6)             bsr     EMPT1B
E97F 8E0850           (        forth.asm):01432 (3)             ldx     #BUF1
                      (        forth.asm):01433         * Empty the buffer pointed to by X.
E982 9F1C             (        forth.asm):01434 (4)     EMPT1B  stx     MRUBUFA         Update most recently used buffer address
E984 30890400         (        forth.asm):01435 (4+3)           leax    BOTERM,x        Buffer offset to the terminator field
E988 104F             (        forth.asm):01436 (2)             clrd
E98A ED84             (        forth.asm):01437 (5+0)           std     ,x              Clear terminator and flags fields
                      (        forth.asm):01438                 IFNE    DEBUG
                      (        forth.asm):01439                 ldd     #$C7C7
                      (        forth.asm):01440                 std     2,x             Dummy block number
                      (        forth.asm):01441                 ENDC                    DEBUG
E98C 39               (        forth.asm):01442 (4)             rts
                      (        forth.asm):01443         
E98D 0C               (        forth.asm):01444         SAVBUF  fcb     12              79-STANDARD (REQ221)
E98E 534156452D425546 (        forth.asm):01445                 fcc     'SAVE-BUFFERS'  ( -- )
     46455253
E99A E969             (        forth.asm):01446                 fdb     EBUFS
E99C C7               (        forth.asm):01447                 RFCS
E99D 8E0440           (        forth.asm):01448 (3)             ldx     #BUF0
E9A0 8D03             (        forth.asm):01449 (6)             bsr     WBIFDRT
E9A2 8E0850           (        forth.asm):01450 (3)             ldx     #BUF1
                      (        forth.asm):01451         * Write buffer back to mass storage if marked as dirty.
                      (        forth.asm):01452         * The dirty bit is cleared but the buffer contents itself is not.
                      (        forth.asm):01453         * The buffer will continue to be marked as "in use."
                      (        forth.asm):01454         * On input X has has the base buffer address. Both D and X
                      (        forth.asm):01455         * are preserved. Y is not.
E9A5 3406             (        forth.asm):01456 (4+2)   WBIFDRT pshs    d
E9A7 3410             (        forth.asm):01457 (4+2)           pshs    x               Base buffer address (arg1 to CF1BKWR)
E9A9 8605             (        forth.asm):01458 (2)             lda     #BINUSE|BDIRTY
E9AB A4890401         (        forth.asm):01459 (4+3)           anda    BOFLAGS,x
E9AF 8105             (        forth.asm):01460 (2)             cmpa    #BINUSE|BDIRTY
E9B1 2616             (        forth.asm):01461 (3)             bne     @alldon         Block not in use or in use but not dirty
E9B3 AE890402         (        forth.asm):01462 (5+3)           ldx     BOBLKNO,x
E9B7 3410             (        forth.asm):01463 (4+2)           pshs    x               Block number (arg0 to CF1BKWR)
E9B9 8D93             (        forth.asm):01464 (6)             bsr     CF1BKWR         Write data buffer to CF
E9BB 3262             (        forth.asm):01465 (4+1)           leas    2,s             Drop one cell from the system stack (blknum)
E9BD AEE4             (        forth.asm):01466 (5+0)           ldx     ,s              Retrieve base buffer address
E9BF 30890401         (        forth.asm):01467 (4+3)           leax    BOFLAGS,x
E9C3 A684             (        forth.asm):01468 (4+0)           lda     ,x              Acquire the 'flags' field
E9C5 84FB             (        forth.asm):01469 (2)             anda    #^BDIRTY        Clear the dirty bit
E9C7 A784             (        forth.asm):01470 (4+0)           sta     ,x              and update the 'flags' field
E9C9 3510             (        forth.asm):01471 (4+2)   @alldon puls    x               Restore X
E9CB 3506             (        forth.asm):01472 (4+2)           puls    d               and D
E9CD 39               (        forth.asm):01473 (4)             rts
                      (        forth.asm):01474         
E9CE 05               (        forth.asm):01475         FLUSH   fcb     5               79-STANDARD (REF)
E9CF 464C555348       (        forth.asm):01476                 fcc     'FLUSH'         ( -- ) An alias for SAVE-BUFFERS
E9D4 E98D             (        forth.asm):01477                 fdb     SAVBUF
E9D6 C7               (        forth.asm):01478                 RFCS
E9D7 20C4             (        forth.asm):01479                 RFXT    bra,SAVBUF+15   XT for SAVE-BUFFERS
                      (        forth.asm):01480         
E9D9 06               (        forth.asm):01481         UPDATE  fcb     6               79-STANDARD (REQ229)
E9DA 555044415445     (        forth.asm):01482                 fcc     'UPDATE'        ( -- )
E9E0 E9CE             (        forth.asm):01483                 fdb     FLUSH
E9E2 C7               (        forth.asm):01484                 RFCS
E9E3 9E1C             (        forth.asm):01485 (4)             ldx     MRUBUFA         Most recently used buffer base address
E9E5 30890401         (        forth.asm):01486 (4+3)           leax    BOFLAGS,x       Buffer 'flags' field's address to X
E9E9 A684             (        forth.asm):01487 (4+0)           lda     ,x              Buffer 'flags' field to A
E9EB 8501             (        forth.asm):01488 (2)             bita    #BINUSE         Is that buffer in use?
E9ED 2704             (        forth.asm):01489 (3)             beq     @upddon         No, we're done here
E9EF 8A04             (        forth.asm):01490 (2)             ora     #BDIRTY
E9F1 A784             (        forth.asm):01491 (4+0)           sta     ,x              Set the dirty bit
E9F3 39               (        forth.asm):01492 (4)     @upddon rts
                      (        forth.asm):01493         
E9F4 06               (        forth.asm):01494         BUFFER  fcb     6               79-STANDARD (REQ130)
E9F5 425546464552     (        forth.asm):01495                 fcc     'BUFFER'        ( ublkno -- addr )
E9FB E9D9             (        forth.asm):01496                 fdb     UPDATE
E9FD C7               (        forth.asm):01497                 RFCS
E9FE BDE7D7           (        forth.asm):01498 (7)             jsr     NPOP
EA01 1F12             (        forth.asm):01499 (4)             tfr     x,y             ublkno to Y
                      (        forth.asm):01500         * Block lookup.
EA03 8E0440           (        forth.asm):01501 (3)             ldx     #BUF0           Base address of the first resident buffer
EA06 C602             (        forth.asm):01502 (2)             ldb     #2              Number of resident buffers
EA08 A6890401         (        forth.asm):01503 (4+3)   @blkup  lda     BOFLAGS,x       Buffer flags to A
EA0C 8501             (        forth.asm):01504 (2)             bita    #BINUSE         Buffer in use?
EA0E 270C             (        forth.asm):01505 (3)             beq     @nxtbuf         No
EA10 10AC890402       (        forth.asm):01506 (6+3)           cmpy    BOBLKNO,x       Buffer is in use. Block number match?
EA15 2605             (        forth.asm):01507 (3)             bne     @nxtbuf         No
EA17 9F1C             (        forth.asm):01508 (4)     @retba  stx     MRUBUFA         Block number match. Mark as the MRU buffer
EA19 3610             (        forth.asm):01509                 UCNPUSH                 and return its base address via the data stack
EA1B 39               (        forth.asm):01510 (4)             rts
EA1C 30890410         (        forth.asm):01511 (4+3)   @nxtbuf leax    BFDISP,x        Point to the next buffer
EA20 5A               (        forth.asm):01512 (1)             decb
EA21 26E5             (        forth.asm):01513 (3)             bne     @blkup
                      (        forth.asm):01514         * The block number in Y is not currently in use. Assign a buffer to it.
EA23 8E0440           (        forth.asm):01515 (3)             ldx     #BUF0
EA26 9C1C             (        forth.asm):01516 (4)             cmpx    MRUBUFA         Most recently used buffer address
EA28 2603             (        forth.asm):01517 (3)             bne     @bselct
EA2A 8E0850           (        forth.asm):01518 (3)             ldx     #BUF1
                      (        forth.asm):01519         * At this point X has the base address of the block we are interested in.
EA2D 3420             (        forth.asm):01520 (4+2)   @bselct pshs    y               Backup the target block number
EA2F BDE9A5           (        forth.asm):01521 (7)             jsr     WBIFDRT         Write back if dirty. X and D are preserved
EA32 8601             (        forth.asm):01522 (2)             lda     #BINUSE
EA34 A7890401         (        forth.asm):01523 (4+3)           sta     BOFLAGS,x       Update the buffer's 'flags' field
EA38 3520             (        forth.asm):01524 (4+2)           puls    y               Restore the target block number
EA3A 10AF890402       (        forth.asm):01525 (6+3)           sty     BOBLKNO,x       and update the 'blknum' field as well
EA3F 20D6             (        forth.asm):01526 (3)             bra     @retba
                      (        forth.asm):01527         
EA41 05               (        forth.asm):01528         BLOCK   fcb     5               79-STANDARD (REQ191)
EA42 424C4F434B       (        forth.asm):01529                 fcc     'BLOCK'         ( ublkno -- addr )
EA47 E9F4             (        forth.asm):01530                 fdb     BUFFER
EA49 C7               (        forth.asm):01531                 RFCS
EA4A 8DB2             (        forth.asm):01532                 RFXT    bsr,BUFFER+9    XT for BUFFER
                      (        forth.asm):01533         * Upon return Y has has the block number.
EA4C 3710             (        forth.asm):01534                 UCNPOP                  Buffer base address to X
EA4E 3410             (        forth.asm):01535 (4+2)           pshs    x               Push base buffer address as Arg1 to CF1BKRD
EA50 A6890401         (        forth.asm):01536 (4+3)           lda     BOFLAGS,x       Retrieve buffer 'flags' field
                      (        forth.asm):01537                 IFNE    DEBUG
                      (        forth.asm):01538                 bita    #BINUSE
                      (        forth.asm):01539                 bne     @blkctd
                      (        forth.asm):01540                 lda     #10             Assertion failed
                      (        forth.asm):01541                 jsr     ERRHDLR         No return
                      (        forth.asm):01542                 ENDC                    DEBUG
EA54 8402             (        forth.asm):01543 (2)     @blkctd anda    #BMAPPD         Has the block been read yet?
EA56 2613             (        forth.asm):01544 (3)             bne     @bkmapd         Yes
EA58 3420             (        forth.asm):01545 (4+2)           pshs    y               No. Push block number as arg0 to CF1BKRD
                      (        forth.asm):01546         * Map in the block from the CF device. System stack structure is as follows:
                      (        forth.asm):01547         * ,s has the target block number.
                      (        forth.asm):01548         * 2,s has the buffer base address.
EA5A BDE933           (        forth.asm):01549 (7)             jsr     CF1BKRD
EA5D 3262             (        forth.asm):01550 (4+1)           leas    2,s             Drop one cell from the system stack
                      (        forth.asm):01551         * Update the buffer's flags field.
EA5F AEE4             (        forth.asm):01552 (5+0)           ldx     ,s              Base buffer address
EA61 30890401         (        forth.asm):01553 (4+3)           leax    BOFLAGS,x       Buffer 'flags' field address to X
EA65 A684             (        forth.asm):01554 (4+0)           lda     ,x              Read buffer 'flags' field
EA67 8A02             (        forth.asm):01555 (2)             ora     #BMAPPD
EA69 A784             (        forth.asm):01556 (4+0)           sta     ,x              and mark it as read
EA6B 3510             (        forth.asm):01557 (4+2)   @bkmapd puls    x               Buffer base address to X
EA6D 3610             (        forth.asm):01558                 UCNPUSH
EA6F 39               (        forth.asm):01559 (4)             rts
                      (        forth.asm):01560         
EA70 03               (        forth.asm):01561         BLK     fcb     3
EA71 424C4B           (        forth.asm):01562                 fcc     'BLK'
EA74 EA41             (        forth.asm):01563                 fdb     BLOCK
EA76 C7               (        forth.asm):01564                 RFCS
EA77 8E0126           (        forth.asm):01565 (3)             ldx     #UBLK
EA7A 7EE7C9           (        forth.asm):01566 (3)             jmp     NPUSH
                      (        forth.asm):01567         
EA7D 03               (        forth.asm):01568         TOIN    fcb     3
EA7E 3E494E           (        forth.asm):01569                 fcc     '>IN'
EA81 EA70             (        forth.asm):01570                 fdb     BLK
EA83 C7               (        forth.asm):01571                 RFCS
EA84 8E0124           (        forth.asm):01572 (3)             ldx     #UTOIN
EA87 7EE7C9           (        forth.asm):01573 (3)             jmp     NPUSH
                      (        forth.asm):01574         
EA8A 03               (        forth.asm):01575         SCR     fcb     3
EA8B 534352           (        forth.asm):01576                 fcc     'SCR'
EA8E EA7D             (        forth.asm):01577                 fdb     TOIN
EA90 C7               (        forth.asm):01578                 RFCS
EA91 8E0128           (        forth.asm):01579 (3)             ldx     #USCR
EA94 7EE7C9           (        forth.asm):01580 (3)             jmp     NPUSH
                      (        forth.asm):01581         
                      (        forth.asm):01582         * Functionally: : LINE 6 SHIFT SCR @ BLOCK + ;
                      (        forth.asm):01583         * Moved to CompactFlash screen #4.
                      (        forth.asm):01584         
                      (        forth.asm):01585         * Functionally:
                      (        forth.asm):01586         * : INDEX 1+ SWAP DO
                      (        forth.asm):01587         *     CR   I SCR !
                      (        forth.asm):01588         *     0 LINE 64 TYPE
                      (        forth.asm):01589         *   LOOP ;
                      (        forth.asm):01590         * Moved to CompactFlash screen #4.
                      (        forth.asm):01591         
EA97 05               (        forth.asm):01592         TICKS   fcb     5               Non-standard
EA98 5449434B53       (        forth.asm):01593                 fcc     'TICKS'         ( -- tickslow tickshigh )
EA9D EA8A             (        forth.asm):01594                 fdb     SCR
EA9F C7               (        forth.asm):01595                 RFCS
                      (        forth.asm):01596                 IFNE    RTCFEAT
                      (        forth.asm):01597                 pshs    cc
                      (        forth.asm):01598                 orcc    #FFLAG          Mask FIRQ while reading the double cell
                      (        forth.asm):01599                 ldx     TIKSLOW
                      (        forth.asm):01600                 ldy     TIKSHI
                      (        forth.asm):01601                 puls    cc              Restore the previous interrupt handling mode
                      (        forth.asm):01602                 jsr     NPUSH
                      (        forth.asm):01603                 tfr     y,x
                      (        forth.asm):01604                 ELSE
EAA0 1FC1             (        forth.asm):01605 (4)             tfr     0,x
EAA2 BDE7C9           (        forth.asm):01606 (7)             jsr     NPUSH
                      (        forth.asm):01607                 ENDC                    RTCFEAT
EAA5 7EE7C9           (        forth.asm):01608 (3)             jmp     NPUSH
                      (        forth.asm):01609         
EAA8 04               (        forth.asm):01610         RTCFTCH fcb     4               Non-standard
EAA9 52544340         (        forth.asm):01611                 fcc     'RTC@'          ( regoff -- byteval )
EAAD EA97             (        forth.asm):01612                 fdb     TICKS
EAAF C7               (        forth.asm):01613                 RFCS
                      (        forth.asm):01614                 IFNE    RTCFEAT
                      (        forth.asm):01615                 tst     RTCAVL
                      (        forth.asm):01616                 beq     RTNOCON
                      (        forth.asm):01617         * An MC146818 RTC is present. Let's get down to business.
                      (        forth.asm):01618                 jsr     NPOP            REGOFF to X
                      (        forth.asm):01619                 tfr     x,d
                      (        forth.asm):01620                 tfr     b,a
                      (        forth.asm):01621                 jsr     RTREGRD
                      (        forth.asm):01622                 clra                    BYTEVAL to D
                      (        forth.asm):01623                 pshu    d               Unchecked NPUSH of D
                      (        forth.asm):01624                 rts
EAB0                  (        forth.asm):01625         RTNOCON ldb     #17             RTC not detected on bootup -> I/O error
                      (        forth.asm):01626                 jsr     ERRHDLR         No return
                      (        forth.asm):01627                 ELSE
EAB0 BDFBCC           (        forth.asm):01628                 RFXT    jsr,DROP+7      XT for DROP
EAB3 7EF8D1           (        forth.asm):01629                 RFXT    jmp,ZEROL+4     XT for 0
                      (        forth.asm):01630                 ENDC                    RTCFEAT
                      (        forth.asm):01631         
EAB6 04               (        forth.asm):01632         RTCSTOR fcb     4               Non-standard
EAB7 52544321         (        forth.asm):01633                 fcc     'RTC!'          ( byteval regoff -- )
EABB EAA8             (        forth.asm):01634                 fdb     RTCFTCH
EABD C7               (        forth.asm):01635                 RFCS
                      (        forth.asm):01636                 IFNE    RTCFEAT
                      (        forth.asm):01637                 tst     RTCAVL
                      (        forth.asm):01638                 beq     RTNOCON
                      (        forth.asm):01639                 jsr     MIN2PST         At least two cells need to be stacked up
                      (        forth.asm):01640                 lda     1,u             REGOFF to A
                      (        forth.asm):01641                 ldb     3,u             BYTEVAL to B
                      (        forth.asm):01642                 leau    4,u             Drop two cells from the data stack
                      (        forth.asm):01643                 jmp     RTREGWR
                      (        forth.asm):01644                 ELSE
EABE 7EF442           (        forth.asm):01645                 RFXT    jmp,TWODROP+8   XT for 2 DROP
                      (        forth.asm):01646                 ENDC                    RTCFEAT
                      (        forth.asm):01647         
EAC1 04               (        forth.asm):01648         LIST    fcb     4               79-STANDARD (REQ109)
EAC2 4C495354         (        forth.asm):01649                 fcc     'LIST'          ( ublkno -- )
EAC6 EAB6             (        forth.asm):01650                 fdb     RTCSTOR
EAC8 C7               (        forth.asm):01651                 RFCS
EAC9 0D3F             (        forth.asm):01652 (4)             tst     CFCARDP
EACB 2605             (        forth.asm):01653 (3)             bne     @cont
EACD C611             (        forth.asm):01654 (2)             ldb     #17             IO error
EACF BDE73F           (        forth.asm):01655 (7)             jsr     ERRHDLR         No return
EAD2 BDFBBC           (        forth.asm):01656         @cont   RFXT    jsr,DUP+6       XT for DUP
EAD5 BDEA4A           (        forth.asm):01657                 RFXT    jsr,BLOCK+8     XT for BLOCK
                      (        forth.asm):01658         * TOS now has the base buffer address.
EAD8 BDE7D7           (        forth.asm):01659 (7)             jsr     NPOP
EADB 1F12             (        forth.asm):01660 (4)             tfr     x,y             Base buffer address to Y
EADD BDE7D7           (        forth.asm):01661 (7)             jsr     NPOP            ublkno to X
EAE0 9F28             (        forth.asm):01662 (4)             stx     USCR            Update SCR's value
EAE2 C610             (        forth.asm):01663 (2)             ldb     #16             16 lines to go
EAE4 3404             (        forth.asm):01664 (4+1)   @loop   pshs    b
EAE6 BDE2EB           (        forth.asm):01665 (7)             jsr     PUTCR
EAE9 1F21             (        forth.asm):01666 (4)             tfr     y,x
EAEB BDE7C9           (        forth.asm):01667 (7)             jsr     NPUSH           Start address for TYPE
EAEE 8E0040           (        forth.asm):01668 (3)             ldx     #64
EAF1 BDE7C9           (        forth.asm):01669 (7)             jsr     NPUSH           Byte count for TYPE
EAF4 103012           (        forth.asm):01670 (4)             addr    x,y
EAF7 BDF6DA           (        forth.asm):01671                 RFXT    jsr,TYPE+7      XT for TYPE
EAFA 3504             (        forth.asm):01672 (4+1)           puls    b
EAFC 5A               (        forth.asm):01673 (1)             decb
EAFD 26E5             (        forth.asm):01674 (3)             bne     @loop
EAFF 39               (        forth.asm):01675 (4)             rts
                      (        forth.asm):01676         
                      (        forth.asm):01677         * Convert a single cell to a double. Non-transactional.
EB00 03               (        forth.asm):01678         STOD    fcb     3               ANSI Core ( n -- d )
EB01 533E44           (        forth.asm):01679                 fcc     'S>D'
EB04 EAC1             (        forth.asm):01680                 fdb     LIST
EB06 C7               (        forth.asm):01681                 RFCS
EB07 BDE7D7           (        forth.asm):01682 (7)             jsr     NPOP            N to X
EB0A 3610             (        forth.asm):01683                 UCNPUSH                 Push back low order cell
EB0C 104F             (        forth.asm):01684 (2)             clrd                    High order cell: default to N >= 0
EB0E 1E01             (        forth.asm):01685 (5)             exg     d,x
EB10 4D               (        forth.asm):01686 (1)             tsta
EB11 102AFCB4         (        forth.asm):01687 (5)             lbpl    NPUSH
EB15 301F             (        forth.asm):01688 (4+1)           leax    -1,x            N is < 0. Sign extension is required. -1 to X
EB17 7EE7C9           (        forth.asm):01689 (3)             jmp     NPUSH
                      (        forth.asm):01690         
EB1A 04               (        forth.asm):01691         NCLR    fcb     4               Non-standard
EB1B 4E434C52         (        forth.asm):01692                 fcc     'NCLR'          Clear the data (normal) stack
EB1F EB00             (        forth.asm):01693                 fdb     STOD
EB21 C7               (        forth.asm):01694                 RFCS
EB22 CE0298           (        forth.asm):01695 (3)             ldu     #NSTBOT
EB25 39               (        forth.asm):01696 (4)             rts
                      (        forth.asm):01697         
EB26 04               (        forth.asm):01698         RCLR    fcb     4               Non-standard
EB27 52434C52         (        forth.asm):01699                 fcc     'RCLR'          Clear the return stack
EB2B EB1A             (        forth.asm):01700                 fdb     NCLR
EB2D C7               (        forth.asm):01701                 RFCS
EB2E 8E0318           (        forth.asm):01702 (3)             ldx     #RSTBOT
EB31 9F00             (        forth.asm):01703 (4)             stx     RSP
EB33 0F32             (        forth.asm):01704 (5)             clr     RDEPTH
EB35 39               (        forth.asm):01705 (4)             rts
                      (        forth.asm):01706         
EB36 05               (        forth.asm):01707         DEPTH   fcb     5               79-STANDARD (REQ238)
EB37 4445505448       (        forth.asm):01708                 fcc     'DEPTH'
EB3C EB26             (        forth.asm):01709                 fdb     RCLR
EB3E C7               (        forth.asm):01710                 RFCS
EB3F CC0298           (        forth.asm):01711 (3)             ldd     #NSTBOT         Bottom data stack address
EB42 103230           (        forth.asm):01712 (4)             subr    u,d             D has the current value of the data stack ptr
EB45 1044             (        forth.asm):01713 (2)             lsrd                    divided by 2
EB47 1F01             (        forth.asm):01714 (4)             tfr     d,x
EB49 7EE7C9           (        forth.asm):01715 (3)             jmp     NPUSH
                      (        forth.asm):01716         
EB4C 06               (        forth.asm):01717         CREATE  fcb     6               79-STANDARD (REQ239)
EB4D 435245415445     (        forth.asm):01718                 fcc     'CREATE'
EB53 EB36             (        forth.asm):01719                 fdb     DEPTH
EB55 C7               (        forth.asm):01720                 RFCS
EB56 BDE4F0           (        forth.asm):01721 (7)             jsr     LOCWRT          Code entry point returned to Y
EB59 868E             (        forth.asm):01722 (2)             lda     #LDXOPC         LDX immediate
EB5B A7A0             (        forth.asm):01723 (4+1)           sta     ,y+
EB5D 1F21             (        forth.asm):01724 (4)             tfr     y,x
EB5F 3008             (        forth.asm):01725 (4+1)           leax    8,x
EB61 AFA1             (        forth.asm):01726 (5+2)           stx     ,y++
EB63 86BD             (        forth.asm):01727 (2)             lda     #JSROPC         JSR extended
EB65 BDE561           (        forth.asm):01728 (7)             jsr     VARCON1         Compile JSR NPUSH
EB68 8639             (        forth.asm):01729 (2)             lda     #RTSOPC         RTS inherent
EB6A A7A0             (        forth.asm):01730 (4+1)           sta     ,y+
EB6C 3122             (        forth.asm):01731 (4+1)           leay    2,y             Reserve room for a possible DOES> clause
EB6E 109F08           (        forth.asm):01732 (5)     CREAT1  sty     DICEND
EB71 9E0C             (        forth.asm):01733 (4)             ldx     BDICEND         This is set by LOCWRT (was IY)
EB73 9F06             (        forth.asm):01734 (4)             stx     LSTWAD
EB75 39               (        forth.asm):01735 (4)             rts
                      (        forth.asm):01736         
EB76 C5               (        forth.asm):01737         DOES    fcb     $C5             79-STANDARD (REQ168)
EB77 444F45533E       (        forth.asm):01738                 fcc     'DOES>'
EB7C EB4C             (        forth.asm):01739                 fdb     CREATE
EB7E C7               (        forth.asm):01740                 RFCS
EB7F 8EEB85           (        forth.asm):01741 (3)             ldx     #DOESEX         JSR #DOESEX is compiled (no actual return)
EB82 7EE153           (        forth.asm):01742 (3)             jmp     EMXASXT         Set as action component
                      (        forth.asm):01743         
EB85 9E06             (        forth.asm):01744 (4)     DOESEX  ldx     LSTWAD          Header of the last dictionary entry
EB87 E680             (        forth.asm):01745 (4+1)           ldb     ,x+
EB89 C41F             (        forth.asm):01746 (2)             andb    #WRLNMSK        Extract word length
EB8B 3A               (        forth.asm):01747 (1)             abx
                      (        forth.asm):01748                 IFNE    RELFEAT
EB8C 3009             (        forth.asm):01749 (4+1)           leax    9,x             2 bytes/backlink, 1/cksum, 6 bytes code offset
                      (        forth.asm):01750                 ELSE
                      (        forth.asm):01751                 leax    8,x             2 bytes/backlink, 6 bytes code offset
                      (        forth.asm):01752                 ENDC                    RELFEAT
EB8E A684             (        forth.asm):01753 (4+0)           lda     ,x
EB90 8139             (        forth.asm):01754 (2)             cmpa    #RTSOPC         RTS inherent
EB92 2705             (        forth.asm):01755 (3)             beq     @dosex1
EB94 C60E             (        forth.asm):01756 (2)             ldb     #14             No matching CREATE
EB96 BDE73F           (        forth.asm):01757 (7)             jsr     ERRHDLR         No return
EB99 867E             (        forth.asm):01758 (2)     @dosex1 lda     #JMPOPC         JMP extended
EB9B A780             (        forth.asm):01759 (4+1)           sta     ,x+             Overwrite RTS opcode
EB9D 3520             (        forth.asm):01760 (4+2)           puls    y
EB9F 10AF84           (        forth.asm):01761 (6+0)           sty     ,x
EBA2 39               (        forth.asm):01762 (4)             rts
                      (        forth.asm):01763         
EBA3 87               (        forth.asm):01764         LITERAL fcb     $87             79-STANDARD (REQ215)
EBA4 4C49544552414C   (        forth.asm):01765                 fcc     'LITERAL'
EBAB EB76             (        forth.asm):01766                 fdb     DOES
EBAD C7               (        forth.asm):01767                 RFCS
EBAE BDE7D7           (        forth.asm):01768 (7)             jsr     NPOP
EBB1 0D23             (        forth.asm):01769 (4)             tst     USTATE+1
EBB3 2601             (        forth.asm):01770 (3)             bne     @comp
EBB5 39               (        forth.asm):01771 (4)             rts                     The standard defines no semantics in interp mode
EBB6 109E08           (        forth.asm):01772 (5)     @comp   ldy     DICEND
EBB9 868E             (        forth.asm):01773 (2)             lda     #LDXOPC         LDX immediate
EBBB BDE564           (        forth.asm):01774 (7)             jsr     VARCON2         Compile LDX #X
EBBE 109F08           (        forth.asm):01775 (5)             sty     DICEND          Update HERE
EBC1 8EE7C9           (        forth.asm):01776 (3)             ldx     #NPUSH
EBC4 7EE153           (        forth.asm):01777 (3)             jmp     EMXASXT         Set NPUSH as action component
                      (        forth.asm):01778         
                      (        forth.asm):01779         * Functionally: : CONSTANT CREATE , DOES> @ ;
                      (        forth.asm):01780         * The following code produces more compact code.
EBC7 08               (        forth.asm):01781         CONS    fcb     8               79-STANDARD (REQ185)
EBC8 434F4E5354414E54 (        forth.asm):01782                 fcc     'CONSTANT'
EBD0 EBA3             (        forth.asm):01783                 fdb     LITERAL
EBD2 C7               (        forth.asm):01784                 RFCS
EBD3 BDE7D7           (        forth.asm):01785 (7)             jsr     NPOP
EBD6 1F16             (        forth.asm):01786 (4)             tfr     x,w
EBD8 BDE4F0           (        forth.asm):01787 (7)             jsr     LOCWRT          Create dictionary entry
EBDB 1F61             (        forth.asm):01788 (4)             tfr     w,x
EBDD 868E             (        forth.asm):01789 (2)             lda     #LDXOPC         ldx immediate
EBDF BDE564           (        forth.asm):01790 (7)             jsr     VARCON2         Compile LDX #CSTVAL
EBE2 BDE55F           (        forth.asm):01791 (7)             jsr     VARCON          Compile JMP NPUSH
                      (        forth.asm):01792                 IFNE    RELFEAT
EBE5 8D87             (        forth.asm):01793 (6)             bsr     CREAT1
EBE7 206B             (        forth.asm):01794                 RFXT    bra,MONITOR+10  XT for MONITOR
                      (        forth.asm):01795                 ELSE
                      (        forth.asm):01796                 bra     CREAT1
                      (        forth.asm):01797                 ENDC                    RELFEAT
                      (        forth.asm):01798         
                      (        forth.asm):01799         * Functionally: : VARIABLE CREATE 2 ALLOT ;
                      (        forth.asm):01800         * However we can save three bytes per instance with the following code.
EBE9 08               (        forth.asm):01801         VARI    fcb     8               79-STANDARD (REQ227)
EBEA 5641524941424C45 (        forth.asm):01802                 fcc     'VARIABLE'
EBF2 EBC7             (        forth.asm):01803                 fdb     CONS
EBF4 C7               (        forth.asm):01804                 RFCS
EBF5 BDE4F0           (        forth.asm):01805 (7)             jsr     LOCWRT
EBF8 868E             (        forth.asm):01806 (2)             lda     #LDXOPC         ldx immediate
EBFA A7A0             (        forth.asm):01807 (4+1)           sta     ,y+
EBFC 1F26             (        forth.asm):01808 (4)             tfr     y,w             Preserve Y (HERE)
EBFE 3125             (        forth.asm):01809 (4+1)           leay    5,y             Relative variable address
EC00 1F21             (        forth.asm):01810 (4)             tfr     y,x
EC02 1F62             (        forth.asm):01811 (4)             tfr     w,y             Restore Y (HERE)
EC04 AFA1             (        forth.asm):01812 (5+2)           stx     ,y++            Address field for LDX #VARADDR
EC06 BDE55F           (        forth.asm):01813 (7)             jsr     VARCON          Compile JMP NPUSH
EC09 3122             (        forth.asm):01814 (4+1)           leay    2,y             2 ALLOT
EC0B 7EEB6E           (        forth.asm):01815 (3)             jmp     CREAT1
                      (        forth.asm):01816         
EC0E 09               (        forth.asm):01817         IMMED   fcb     9               79-STANDARD (REQ103)
EC0F 494D4D4544494154 (        forth.asm):01818                 fcc     'IMMEDIATE'
     45
EC18 EBE9             (        forth.asm):01819                 fdb     VARI
EC1A C7               (        forth.asm):01820                 RFCS
EC1B C680             (        forth.asm):01821 (2)             ldb     #IMDFLM
EC1D 9E06             (        forth.asm):01822 (4)     IMMED1  ldx     LSTWAD
EC1F A684             (        forth.asm):01823 (4+0)           lda     ,x
EC21 103598           (        forth.asm):01824 (4)             orr     b,a
EC24 A784             (        forth.asm):01825 (4+0)           sta     ,x
EC26 39               (        forth.asm):01826 (4)             rts
                      (        forth.asm):01827         
EC27 08               (        forth.asm):01828         RSTRCT  fcb     8               Non-standard (GNU Forth)
EC28 5245535452494354 (        forth.asm):01829                 fcc     'RESTRICT'      Make word available in compilation mode only
EC30 EC0E             (        forth.asm):01830                 fdb     IMMED
EC32 C7               (        forth.asm):01831                 RFCS
EC33 C640             (        forth.asm):01832 (2)             ldb     #DEFFLM
EC35 20E6             (        forth.asm):01833 (3)             bra     IMMED1
                      (        forth.asm):01834         
                      (        forth.asm):01835         * Added for better support of ANSI VALUEs.
EC37 09               (        forth.asm):01836         UNMON   fcb     9
EC38 554E4D4F4E49544F (        forth.asm):01837                 fcc     'UNMONITOR'     ( -- )
     52
EC41 EC27             (        forth.asm):01838                 fdb     RSTRCT
EC43 C7               (        forth.asm):01839                 RFCS
                      (        forth.asm):01840                 IFNE    RELFEAT
EC44 4F               (        forth.asm):01841 (1)             clra
EC45 3402             (        forth.asm):01842 (4+1)           pshs    a
EC47 200F             (        forth.asm):01843 (3)             bra     MONIT1
                      (        forth.asm):01844                 ELSE
                      (        forth.asm):01845                 rts
                      (        forth.asm):01846                 ENDC                    RELFEAT
                      (        forth.asm):01847         
                      (        forth.asm):01848         * This non-standard word enables checkum monitoring by ICHECK for the
                      (        forth.asm):01849         * last defined word in the dictionary. : words are monitored by default
                      (        forth.asm):01850         * and so are constants. CREATEd words require an explicit invokation of
                      (        forth.asm):01851         * MONITOR if they are to be checked for integrity.
EC49 07               (        forth.asm):01852         MONITOR fcb     7
EC4A 4D4F4E49544F52   (        forth.asm):01853                 fcc     'MONITOR'       ( -- )
EC51 EC37             (        forth.asm):01854                 fdb     UNMON
EC53 C7               (        forth.asm):01855                 RFCS
                      (        forth.asm):01856                 IFNE    RELFEAT
EC54 8601             (        forth.asm):01857 (2)             lda     #1              Set MONFLM in the word 'flags' header field
EC56 3402             (        forth.asm):01858 (4+1)           pshs    a
EC58 9E06             (        forth.asm):01859 (4)     MONIT1  ldx     LSTWAD          Latest defined word header address
EC5A A684             (        forth.asm):01860 (4+0)           lda     ,x
EC5C 6DE4             (        forth.asm):01861 (5+0)           tst     ,s              Should we set or clear MONFLM?
EC5E 2604             (        forth.asm):01862 (3)             bne     @setflg
EC60 84DF             (        forth.asm):01863 (2)             anda    #^MONFLM        Clear MONFLM in the word's attribute field
EC62 2002             (        forth.asm):01864 (3)             bra     @cont
EC64 8A20             (        forth.asm):01865 (2)     @setflg ora     #MONFLM         Set MONFLM in the word's attribute field
EC66 A784             (        forth.asm):01866 (4+0)   @cont   sta     ,x
EC68 8D0A             (        forth.asm):01867 (6)             bsr     HDRSKIP         Skip the header (XT to X), clear A
EC6A 109E08           (        forth.asm):01868 (5)             ldy     DICEND          The upper code section limit (excluded)
EC6D 8D0F             (        forth.asm):01869 (6)             bsr     HDRCSUM         Current word's definition's checksum to A
EC6F A71F             (        forth.asm):01870 (4+1)           sta     -1,x            Store the computed checksum into the header
EC71 3261             (        forth.asm):01871 (4+1)           leas    1,s             Drop one byte from the system stack
                      (        forth.asm):01872                 ENDC                    RELFEAT
EC73 39               (        forth.asm):01873 (4)             rts
                      (        forth.asm):01874         
                      (        forth.asm):01875                 IFNE    RELFEAT
                      (        forth.asm):01876         * On entry, X has a word's header address. On return X has the compilation
                      (        forth.asm):01877         * address for that word (XT). A is cleared so as to initialize the checksum.
EC74 A684             (        forth.asm):01878 (4+0)   HDRSKIP lda     ,x              Word's header attribute byte to A
EC76 841F             (        forth.asm):01879 (2)             anda    #WRLNMSK        Extract the word's length
EC78 8B04             (        forth.asm):01880 (2)             adda    #4              1B attribute, 2B backlink, 1B checksum
EC7A 3086             (        forth.asm):01881 (4+1)           leax    a,x             X has the word's XT. -1,X has the orig checksum
EC7C 4F               (        forth.asm):01882 (1)             clra
EC7D 39               (        forth.asm):01883 (4)             rts
                      (        forth.asm):01884         
                      (        forth.asm):01885         * On entry X has a word's compilation address (XT). A is supposed to have been
                      (        forth.asm):01886         * previously cleared. Y has the upper bound of the code section's address
                      (        forth.asm):01887         * (excluded). On return, A will have the word's code section's checksum.
                      (        forth.asm):01888         * X is preserved.
EC7E 3410             (        forth.asm):01889 (4+2)   HDRCSUM pshs    x
EC80 A880             (        forth.asm):01890 (4+1)   @hdrcs1 eora    ,x+             Update the checksum
EC82 103712           (        forth.asm):01891 (4)             cmpr    x,y             Upper bound reached?
EC85 26F9             (        forth.asm):01892 (3)             bne     @hdrcs1         No. Process next byte in word's code section
EC87 3510             (        forth.asm):01893 (4+2)           puls    x
EC89 39               (        forth.asm):01894 (4)             rts
                      (        forth.asm):01895         
EC8A 696E746567726974 (        forth.asm):01896         CSUMFLM fcn     'integrity check failed'
     7920636865636B20
     6661696C656400
                      (        forth.asm):01897                 ENDC                    RELFEAT
                      (        forth.asm):01898         
                      (        forth.asm):01899         * This non-standard word walks through the dictionary linked list and checks
                      (        forth.asm):01900         * that the words that have the MONFLM flag set in their header's attribute
                      (        forth.asm):01901         * field have a definition that still matches the checksum stored in the word's
                      (        forth.asm):01902         * header. This is meant to be used interactively, as a debugging tool, since
                      (        forth.asm):01903         * multitasking is not supported by this implementation. Therefore no status
                      (        forth.asm):01904         * value is returned. Feedback will only be provided for corrupted words, in
                      (        forth.asm):01905         * the form of a diagnostic message printed to the console.
ECA1 06               (        forth.asm):01906         ICHECK  fcb     6
ECA2 49434845434B     (        forth.asm):01907                 fcc     'ICHECK'        ( -- )
ECA8 EC49             (        forth.asm):01908                 fdb     MONITOR
ECAA C7               (        forth.asm):01909                 RFCS
                      (        forth.asm):01910                 IFNE    RELFEAT
ECAB 109E08           (        forth.asm):01911 (5)             ldy     DICEND          Upper bound for the code of the last word (exc.)
ECAE 9E06             (        forth.asm):01912 (4)             ldx     LSTWAD          LAST points to the header of the last word
ECB0 3410             (        forth.asm):01913 (4+2)   @icklop pshs    x               Current word's header address
ECB2 A684             (        forth.asm):01914 (4+0)           lda     ,x              Word's header attribute byte to A
ECB4 8520             (        forth.asm):01915 (2)             bita    #MONFLM         Is this a monitored word?
ECB6 2726             (        forth.asm):01916 (3)             beq     @icknxt         No. Point to the next word
ECB8 8DBA             (        forth.asm):01917 (6)             bsr     HDRSKIP         Skip the header (XT to X), clear A
ECBA 8DC2             (        forth.asm):01918 (6)             bsr     HDRCSUM         Current word's definition's checksum to A
ECBC A11F             (        forth.asm):01919 (4+1)           cmpa    -1,x            Does the checksum match the compile time value?
ECBE 271E             (        forth.asm):01920 (3)             beq     @icknxt         Yes. Point to the next word
                      (        forth.asm):01921         * Current word's definition has been modified since its original definition!
ECC0 BDE2EB           (        forth.asm):01922 (7)             jsr     PUTCR
ECC3 AEE4             (        forth.asm):01923 (5+0)           ldx     ,s              Current word's header address
ECC5 E680             (        forth.asm):01924 (4+1)           ldb     ,x+
ECC7 C41F             (        forth.asm):01925 (2)             andb    #WRLNMSK
ECC9 4F               (        forth.asm):01926 (1)             clra
ECCA BDE7C9           (        forth.asm):01927 (7)             jsr     NPUSH           Word's name base address
ECCD 1F01             (        forth.asm):01928 (4)             tfr     d,x
ECCF BDE7C9           (        forth.asm):01929 (7)             jsr     NPUSH           Byte count for TYPE
ECD2 BDF6DA           (        forth.asm):01930                 RFXT    jsr,TYPE+7      XT for TYPE
ECD5 BDF68C           (        forth.asm):01931                 RFXT    jsr,SPACE+8     XT for SPACE
ECD8 8EEC8A           (        forth.asm):01932 (3)             ldx     #CSUMFLM
ECDB BDE2DE           (        forth.asm):01933 (7)             jsr     PUTS            Feedback for checksum failure
ECDE 3510             (        forth.asm):01934 (4+2)   @icknxt puls    x               Current word's header address
ECE0 1F12             (        forth.asm):01935 (4)             tfr     x,y             Point to the end of the previous word's code
Warning: Operand size larger than required
ECE2 BDEC74           (        forth.asm):01936 (7)             jsr     HDRSKIP         Skip the header (XT to X), clear A
ECE5 AE1D             (        forth.asm):01937 (5+1)           ldx     -3,x            Point to the previous header via the backlink
ECE7 2702             (        forth.asm):01938 (3)             beq     @ickdon         We've just reached the end of the dictionary
ECE9 20C5             (        forth.asm):01939 (3)             bra     @icklop
                      (        forth.asm):01940                 ENDC                    RELFEAT
ECEB 39               (        forth.asm):01941 (4)     @ickdon rts
                      (        forth.asm):01942         
ECEC C2               (        forth.asm):01943         DO      fcb     $C2             79-STANDARD (REQ142)
ECED 444F             (        forth.asm):01944                 fcc     'DO'
ECEF ECA1             (        forth.asm):01945                 fdb     ICHECK
ECF1 C7               (        forth.asm):01946                 RFCS
ECF2 8EECFF           (        forth.asm):01947 (3)             ldx     #DOEX
ECF5 BDE153           (        forth.asm):01948 (7)             jsr     EMXASXT         Compile "JSR DOEX"
ECF8 0C2F             (        forth.asm):01949 (5)             inc     BALNCD
ECFA 1F21             (        forth.asm):01950 (4)             tfr     y,x
ECFC 7EE7C9           (        forth.asm):01951 (3)             jmp     CSPUSH          HERE to the control flow stack
                      (        forth.asm):01952         
ECFF BDFBD7           (        forth.asm):01953         DOEX    RFXT    jsr,SWAP+7      XT for SWAP
ED02 BDF036           (        forth.asm):01954                 RFXT    jsr,TOR+5       XT for >R (limit)
ED05 7EF036           (        forth.asm):01955                 RFXT    jmp,TOR+5       XT for >R (index)
                      (        forth.asm):01956         
ED08 C4               (        forth.asm):01957         LOOP    fcb     $C4             79-STANDARD (REQ124)
ED09 4C4F4F50         (        forth.asm):01958                 fcc     'LOOP'
ED0D ECEC             (        forth.asm):01959                 fdb     DO
ED0F C7               (        forth.asm):01960                 RFCS
ED10 8EED2C           (        forth.asm):01961 (3)             ldx     #LOOPEX
ED13 BDE153           (        forth.asm):01962 (7)     LOOP1   jsr     EMXASXT
ED16 8E2503           (        forth.asm):01963 (3)             ldx     #BCSOPC         Compile "BCS *+5"
ED19 AFA1             (        forth.asm):01964 (5+2)           stx     ,y++
ED1B BDE7D7           (        forth.asm):01965 (7)             jsr     CSPOP
ED1E 867E             (        forth.asm):01966 (2)             lda     #JMPOPC
ED20 BDE564           (        forth.asm):01967 (7)             jsr     VARCON2         Compile "JMP R@"
ED23 109F08           (        forth.asm):01968 (5)             sty     DICEND          No action component
ED26 109F16           (        forth.asm):01969 (5)             sty     FWDREF          Last recorded forward reference
ED29 0A2F             (        forth.asm):01970 (5)             dec     BALNCD
ED2B 39               (        forth.asm):01971 (4)             rts
                      (        forth.asm):01972         
ED2C 8E0001           (        forth.asm):01973 (3)     LOOPEX  ldx     #1
ED2F 2011             (        forth.asm):01974 (3)             bra     PLOPEX1
                      (        forth.asm):01975         
ED31 C5               (        forth.asm):01976         PLOOP   fcb     $C5             79-STANDARD (REQ141)
ED32 2B4C4F4F50       (        forth.asm):01977                 fcc     '+LOOP'         The sign hdl reqs for REQ124 should apply though
ED37 ED08             (        forth.asm):01978                 fdb     LOOP
ED39 C7               (        forth.asm):01979                 RFCS
ED3A 8EED3F           (        forth.asm):01980 (3)             ldx     #PLOOPEX
ED3D 20D4             (        forth.asm):01981 (3)             bra     LOOP1
                      (        forth.asm):01982         
                      (        forth.asm):01983         * Anton Ertl's forth-standard.org notes on +LOOP (2019-05-21 05:54:21):
                      (        forth.asm):01984         * "Note that the loop control parameters can be either signed or unsigned,
                      (        forth.asm):01985         * and +LOOP has to work for both. For systems with 2s-complement representation
                      (        forth.asm):01986         * for signed numbers, the way to go is to use circular arithmetic: compute
                      (        forth.asm):01987         * x=(index-limit)+minint, and observe if the addition x+n crosses the boundary
                      (        forth.asm):01988         * between minint and maxint. Many architectures report this through the
                      (        forth.asm):01989         * overflow flag."
                      (        forth.asm):01990         * Here we do precisely what the good Doktor says, setting the carry flag on
                      (        forth.asm):01991         * overflow detection.
ED3F BDE7D7           (        forth.asm):01992 (7)     PLOOPEX jsr     NPOP
ED42 1F16             (        forth.asm):01993 (4)     PLOPEX1 tfr     x,w             Increment to W
ED44 BDE805           (        forth.asm):01994 (7)             jsr     RPOP
ED47 1F12             (        forth.asm):01995 (4)             tfr     x,y             Index to Y
ED49 BDE805           (        forth.asm):01996 (7)             jsr     RPOP            Limit to X
                      (        forth.asm):01997         * The following two lines are only necessary for the 79-STANDARD LEAVE!
ED4C 103721           (        forth.asm):01998 (4)             cmpr    y,x
ED4F 271C             (        forth.asm):01999 (3)             beq     @limrcd
ED51 CC8000           (        forth.asm):02000 (3)             ldd     #$8000          Minimum integer on a 2 byte cell system
ED54 103020           (        forth.asm):02001 (4)             addr    y,d             add the index
ED57 103210           (        forth.asm):02002 (4)             subr    x,d             substract the limit
ED5A 103060           (        forth.asm):02003 (4)             addr    w,d             add the increment and check for overflow
ED5D 290E             (        forth.asm):02004 (3)             bvs     @limrcd         Limit reached
ED5F BDE7E9           (        forth.asm):02005 (7)             jsr     RPUSH           Limit to the return stack
ED62 103062           (        forth.asm):02006 (4)             addr    w,y             Update the index
ED65 1F21             (        forth.asm):02007 (4)             tfr     y,x
ED67 BDE7E9           (        forth.asm):02008 (7)             jsr     RPUSH           Updated index to the return stack
ED6A 1CFE             (        forth.asm):02009 (2)             andcc   #^CFLAG         Clear CFLAG
ED6C 39               (        forth.asm):02010 (4)             rts
ED6D 1A01             (        forth.asm):02011 (2)     @limrcd orcc    #CFLAG          Set CFLAG
ED6F 39               (        forth.asm):02012 (4)             rts
                      (        forth.asm):02013         
ED70 46               (        forth.asm):02014         UNLOOP  fcb     $46             ANSI (Core)
ED71 554E4C4F4F50     (        forth.asm):02015                 fcc     'UNLOOP'
ED77 ED31             (        forth.asm):02016                 fdb     PLOOP
ED79 C7               (        forth.asm):02017                 RFCS
ED7A BDE805           (        forth.asm):02018 (7)             jsr     RPOP            Drop the index from the return stack
ED7D 7EE805           (        forth.asm):02019 (3)             jmp     RPOP            and the loop limit as well
                      (        forth.asm):02020         
ED80 C5               (        forth.asm):02021         AHEAD   fcb     $C5             ANSI (Tools ext)
ED81 4148454144       (        forth.asm):02022                 fcc     'AHEAD'         Comp: ( C: -- orig )
ED86 ED70             (        forth.asm):02023                 fdb     UNLOOP          Exec: ( -- )
ED88 C7               (        forth.asm):02024                 RFCS
ED89 109E08           (        forth.asm):02025 (5)             ldy     DICEND
ED8C 867E             (        forth.asm):02026 (2)     AHEAD1  lda     #JMPOPC
ED8E A7A0             (        forth.asm):02027 (4+1)           sta     ,y+
ED90 1F21             (        forth.asm):02028 (4)             tfr     y,x             Jump address location (ANS:orig) to X
ED92 3122             (        forth.asm):02029 (4+1)           leay    2,y
ED94 109F08           (        forth.asm):02030 (5)             sty     DICEND          2 ALLOT (instead of 0 ,)
ED97 0C2F             (        forth.asm):02031 (5)             inc     BALNCD
ED99 7EE7C9           (        forth.asm):02032 (3)             jmp     CSPUSH          ANS:orig to the control flow stack
                      (        forth.asm):02033         
ED9C C2               (        forth.asm):02034         IF      fcb     $C2             79-STANDARD (REQ210)
ED9D 4946             (        forth.asm):02035                 fcc     'IF'
ED9F ED80             (        forth.asm):02036                 fdb     AHEAD
EDA1 C7               (        forth.asm):02037                 RFCS
EDA2 8EE7D7           (        forth.asm):02038 (3)             ldx     #NPOP
EDA5 BDE153           (        forth.asm):02039 (7)             jsr     EMXASXT         Compile "JSR NPOP"
EDA8 CC2603           (        forth.asm):02040 (3)             ldd     #BNEOPC
EDAB EDA1             (        forth.asm):02041 (5+2)           std     ,y++            Compile "BNE *+5"
EDAD 20DD             (        forth.asm):02042 (3)             bra     AHEAD1
                      (        forth.asm):02043         
                      (        forth.asm):02044         * Functionally equivalent to:
                      (        forth.asm):02045         * : UNLESS POSTPONE 0= POSTPONE IF ; IMMEDIATE RESTRICT
EDAF C6               (        forth.asm):02046         UNLESS  fcb     $C6             Non-standard (Perl inspired)
EDB0 554E4C455353     (        forth.asm):02047                 fcc     'UNLESS'
EDB6 ED9C             (        forth.asm):02048                 fdb     IF
EDB8 C7               (        forth.asm):02049                 RFCS
EDB9 8EEECD           (        forth.asm):02050                 RFXT    ldx,#NULP+5     XT for 0=
EDBC BDE153           (        forth.asm):02051 (7)             jsr     EMXASXT
EDBF 20E1             (        forth.asm):02052                 RFXT    bra,IF+5        XT for IF
                      (        forth.asm):02053         
EDC1 C4               (        forth.asm):02054         ELSE    fcb     $C4             79-STANDARD (REQ167)
EDC2 454C5345         (        forth.asm):02055                 fcc     'ELSE'
EDC6 EDAF             (        forth.asm):02056                 fdb     UNLESS
EDC8 C7               (        forth.asm):02057                 RFCS
EDC9 8DBE             (        forth.asm):02058                 RFXT    bsr,AHEAD+8
EDCB BDFBD7           (        forth.asm):02059                 RFXT    jsr,SWAP+7      This should be read as "1 CS-ROLL"
EDCE 2008             (        forth.asm):02060                 RFXT    bra,THEN+7
                      (        forth.asm):02061         
EDD0 C4               (        forth.asm):02062         THEN    fcb     $C4             79-STANDARD (REQ161)
EDD1 5448454E         (        forth.asm):02063                 fcc     'THEN'
EDD5 EDC1             (        forth.asm):02064                 fdb     ELSE
EDD7 C7               (        forth.asm):02065                 RFCS
EDD8 109E08           (        forth.asm):02066 (5)             ldy     DICEND
EDDB BDE7D7           (        forth.asm):02067 (7)             jsr     CSPOP
EDDE 10AF84           (        forth.asm):02068 (6+0)           sty     ,x              Resolve forward reference to HERE
EDE1 109F16           (        forth.asm):02069 (5)             sty     FWDREF          Last recorded forward reference
EDE4 0A2F             (        forth.asm):02070 (5)             dec     BALNCD
EDE6 39               (        forth.asm):02071 (4)             rts
                      (        forth.asm):02072         
EDE7 01               (        forth.asm):02073         EQ      fcb     1               79-STANDARD (REQ173)
EDE8 3D               (        forth.asm):02074                 fcc     '='             ( N1 N2 -- FLAG )
EDE9 EDD0             (        forth.asm):02075                 fdb     THEN
EDEB C7               (        forth.asm):02076                 RFCS
EDEC BDE473           (        forth.asm):02077 (7)             jsr     MIN2PST         At least two cells need to be stacked up
EDEF 10ECC4           (        forth.asm):02078 (8+0)           ldq     ,u              D:W has N2:N1
EDF2 3342             (        forth.asm):02079 (4+1)           leau    2,u             Drop one cell from the user stack
EDF4 1FC1             (        forth.asm):02080 (4)             tfr     0,x
EDF6 103760           (        forth.asm):02081 (4)             cmpr    w,d
EDF9 2602             (        forth.asm):02082 (3)             bne     @eq1
EDFB 3001             (        forth.asm):02083 (4+1)           leax    1,x
EDFD AFC4             (        forth.asm):02084 (5+0)   @eq1    stx     ,u              Store in place to FLAG
EDFF 39               (        forth.asm):02085 (4)             rts
                      (        forth.asm):02086         
EE00 02               (        forth.asm):02087         DIFF    fcb     2               79-STANDARD (REF)
EE01 3C3E             (        forth.asm):02088                 fcc     '<>'            ( N1 N2 -- FLAG )
EE03 EDE7             (        forth.asm):02089                 fdb     EQ
EE05 C7               (        forth.asm):02090                 RFCS
EE06 BDE473           (        forth.asm):02091 (7)             jsr     MIN2PST         At least two cells need to be stacked up
EE09 10ECC4           (        forth.asm):02092 (8+0)           ldq     ,u              D:W has N2:N1
EE0C 3342             (        forth.asm):02093 (4+1)           leau    2,u             Drop one cell from the user stack
EE0E 1FC1             (        forth.asm):02094 (4)             tfr     0,x
EE10 103760           (        forth.asm):02095 (4)             cmpr    w,d
EE13 2702             (        forth.asm):02096 (3)             beq     @diff1
EE15 3001             (        forth.asm):02097 (4+1)           leax    1,x
EE17 AFC4             (        forth.asm):02098 (5+0)   @diff1  stx     ,u              Store in place to FLAG
EE19 39               (        forth.asm):02099 (4)             rts
                      (        forth.asm):02100         
EE1A 02               (        forth.asm):02101         SINFEQ  fcb     2               Non-standard (Not even ANSI!)
EE1B 3C3D             (        forth.asm):02102                 fcc     '<='            Required for the ORNL fixed sieve benchmark
EE1D EE00             (        forth.asm):02103                 fdb     DIFF
EE1F C7               (        forth.asm):02104                 RFCS
EE20 BDE473           (        forth.asm):02105 (7)             jsr     MIN2PST         At least two cells need to be stacked up
EE23 10AEC4           (        forth.asm):02106 (6+0)           ldy     ,u
EE26 AE42             (        forth.asm):02107 (5+1)           ldx     2,u
EE28 104F             (        forth.asm):02108 (2)             clrd
EE2A 103721           (        forth.asm):02109 (4)             cmpr    y,x
EE2D 2E02             (        forth.asm):02110 (3)             bgt     @sinfq1
EE2F 104C             (        forth.asm):02111 (2)             incd
EE31 3342             (        forth.asm):02112 (4+1)   @sinfq1 leau    2,u             Drop one cell
EE33 EDC4             (        forth.asm):02113 (5+0)           std     ,u
EE35 39               (        forth.asm):02114 (4)             rts
                      (        forth.asm):02115         
                      (        forth.asm):02116                 IFNE    DEBUG
EE36                  (        forth.asm):02117         CC      fcb     2               Non-standard. Used for debugging
                      (        forth.asm):02118                 fcc     'CC'
                      (        forth.asm):02119                 fdb     SINFEQ
                      (        forth.asm):02120                 RFCS
                      (        forth.asm):02121                 ldx     CCREG
                      (        forth.asm):02122                 jmp     NPUSH
                      (        forth.asm):02123                 ENDC                    DEBUG
                      (        forth.asm):02124         
EE36 03               (        forth.asm):02125         XOR     fcb     3               79-STANDARD (REQ179)
EE37 584F52           (        forth.asm):02126                 fcc     'XOR'
                      (        forth.asm):02127                 IFNE    DEBUG
                      (        forth.asm):02128                 fdb     CC
                      (        forth.asm):02129                 ELSE
EE3A EE1A             (        forth.asm):02130                 fdb     SINFEQ
                      (        forth.asm):02131                 ENDC                    DEBUG
EE3C C7               (        forth.asm):02132                 RFCS
EE3D BDE473           (        forth.asm):02133 (7)             jsr     MIN2PST         At least two cells need to be stacked up
EE40 ECC4             (        forth.asm):02134 (5+0)           ldd     ,u
EE42 10A642           (        forth.asm):02135 (6+1)           ldw     2,u
EE45 103660           (        forth.asm):02136 (4)             eorr    w,d
EE48 3342             (        forth.asm):02137 (4+1)   XOR1    leau    2,u
EE4A EDC4             (        forth.asm):02138 (5+0)           std     ,u
EE4C 39               (        forth.asm):02139 (4)             rts
                      (        forth.asm):02140         
EE4D 02               (        forth.asm):02141         OR      fcb     2               79-STANDARD (REQ223)
EE4E 4F52             (        forth.asm):02142                 fcc     'OR'
EE50 EE36             (        forth.asm):02143                 fdb     XOR
EE52 C7               (        forth.asm):02144                 RFCS
EE53 BDE473           (        forth.asm):02145 (7)             jsr     MIN2PST         At least two cells need to be stacked up
EE56 ECC4             (        forth.asm):02146 (5+0)           ldd     ,u
EE58 10A642           (        forth.asm):02147 (6+1)           ldw     2,u
EE5B 103560           (        forth.asm):02148 (4)             orr     w,d
EE5E 20E8             (        forth.asm):02149 (3)             bra     XOR1
                      (        forth.asm):02150         
EE60 03               (        forth.asm):02151         AND     fcb     3               79-STANDARD (REQ183)
EE61 414E44           (        forth.asm):02152                 fcc     'AND'
EE64 EE4D             (        forth.asm):02153                 fdb     OR
EE66 C7               (        forth.asm):02154                 RFCS
EE67 BDE473           (        forth.asm):02155 (7)             jsr     MIN2PST         At least two cells need to be stacked up
EE6A ECC4             (        forth.asm):02156 (5+0)           ldd     ,u
EE6C 10A642           (        forth.asm):02157 (6+1)           ldw     2,u
EE6F 103460           (        forth.asm):02158 (4)             andr    w,d
EE72 20D4             (        forth.asm):02159 (3)             bra     XOR1
                      (        forth.asm):02160         
EE74 03               (        forth.asm):02161         COM     fcb     3               79-STANDARD (REF)
EE75 434F4D           (        forth.asm):02162                 fcc     'COM'
EE78 EE60             (        forth.asm):02163                 fdb     AND
EE7A C7               (        forth.asm):02164                 RFCS
EE7B BDE7D7           (        forth.asm):02165 (7)     COM0    jsr     NPOP
EE7E 1F10             (        forth.asm):02166 (4)             tfr     x,d
EE80 1043             (        forth.asm):02167 (2)             comd
EE82 1F01             (        forth.asm):02168 (4)             tfr     d,x
EE84 3610             (        forth.asm):02169                 UCNPUSH
EE86 39               (        forth.asm):02170 (4)             rts
                      (        forth.asm):02171         
EE87 06               (        forth.asm):02172         INVERT  fcb     6               ANSI (Core)
EE88 494E56455254     (        forth.asm):02173                 fcc     'INVERT'
EE8E EE74             (        forth.asm):02174                 fdb     COM
EE90 C7               (        forth.asm):02175                 RFCS
EE91 20E8             (        forth.asm):02176 (3)             bra     COM0
                      (        forth.asm):02177         
EE93 02               (        forth.asm):02178         ZGREAT  fcb     2               79-STANDARD (REQ118)
EE94 303E             (        forth.asm):02179                 fcc     '0>'
EE96 EE87             (        forth.asm):02180                 fdb     INVERT
EE98 C7               (        forth.asm):02181                 RFCS
EE99 BDE7D7           (        forth.asm):02182 (7)             jsr     NPOP
EE9C 1F10             (        forth.asm):02183 (4)             tfr     x,d
EE9E 104D             (        forth.asm):02184 (2)             tstd
EEA0 2F06             (        forth.asm):02185 (3)             ble     @zgrt1
EEA2 8E0001           (        forth.asm):02186 (3)             ldx     #1
EEA5 3610             (        forth.asm):02187                 UCNPUSH
EEA7 39               (        forth.asm):02188 (4)             rts
EEA8 1FC1             (        forth.asm):02189 (4)     @zgrt1  tfr     0,x
EEAA 3610             (        forth.asm):02190                 UCNPUSH
EEAC 39               (        forth.asm):02191 (4)             rts
                      (        forth.asm):02192         
EEAD 02               (        forth.asm):02193         ZLESS   fcb     2               79-STANDARD (REQ144)
EEAE 303C             (        forth.asm):02194                 fcc     '0<'
EEB0 EE93             (        forth.asm):02195                 fdb     ZGREAT
EEB2 C7               (        forth.asm):02196                 RFCS
EEB3 BDE7D7           (        forth.asm):02197 (7)             jsr     NPOP
EEB6 1F10             (        forth.asm):02198 (4)             tfr     x,d
EEB8 104D             (        forth.asm):02199 (2)             tstd
EEBA 2C06             (        forth.asm):02200 (3)             bge     @zlss1
EEBC 8E0001           (        forth.asm):02201 (3)             ldx     #1
EEBF 3610             (        forth.asm):02202                 UCNPUSH
EEC1 39               (        forth.asm):02203 (4)             rts
EEC2 1FC1             (        forth.asm):02204 (4)     @zlss1  tfr     0,x
EEC4 3610             (        forth.asm):02205                 UCNPUSH
EEC6 39               (        forth.asm):02206 (4)             rts
                      (        forth.asm):02207         
EEC7 02               (        forth.asm):02208         NULP    fcb     2               79-STANDARD (REQ180)
EEC8 303D             (        forth.asm):02209                 fcc     '0='
EECA EEAD             (        forth.asm):02210                 fdb     ZLESS
EECC C7               (        forth.asm):02211                 RFCS
EECD BDE7D7           (        forth.asm):02212 (7)             jsr     NPOP
EED0 1F10             (        forth.asm):02213 (4)             tfr     x,d
EED2 1FC1             (        forth.asm):02214 (4)             tfr     0,x
EED4 104D             (        forth.asm):02215 (2)             tstd
EED6 2703             (        forth.asm):02216 (3)             beq     @nulp2
EED8 3610             (        forth.asm):02217         @nulp1  UCNPUSH
EEDA 39               (        forth.asm):02218 (4)             rts
EEDB 3001             (        forth.asm):02219 (4+1)   @nulp2  leax    1,x
EEDD 20F9             (        forth.asm):02220 (3)             bra     @nulp1
                      (        forth.asm):02221         
EEDF 03               (        forth.asm):02222         NOT     fcb     3               79-STANDARD (REQ165)
EEE0 4E4F54           (        forth.asm):02223                 fcc     'NOT'
EEE3 EEC7             (        forth.asm):02224                 fdb     NULP
EEE5 C7               (        forth.asm):02225                 RFCS
EEE6 20E5             (        forth.asm):02226                 RFXT    bra,NULP+5      XT for 0=
                      (        forth.asm):02227         
EEE8 02               (        forth.asm):02228         USUP    fcb     2               ANSI (Core Ext)
EEE9 553E             (        forth.asm):02229                 fcc     'U>'
EEEB EEDF             (        forth.asm):02230                 fdb     NOT
EEED C7               (        forth.asm):02231                 RFCS
EEEE BDE569           (        forth.asm):02232 (7)             jsr     CMP2
EEF1 2302             (        forth.asm):02233 (3)             bls     @usup1
EEF3 3001             (        forth.asm):02234 (4+1)           leax    1,x
EEF5 3610             (        forth.asm):02235         @usup1  UCNPUSH
EEF7 39               (        forth.asm):02236 (4)             rts
                      (        forth.asm):02237         
EEF8 02               (        forth.asm):02238         UINF    fcb     2               79-STANDARD (REQ150)
EEF9 553C             (        forth.asm):02239                 fcc     'U<'
EEFB EEE8             (        forth.asm):02240                 fdb     USUP
EEFD C7               (        forth.asm):02241                 RFCS
EEFE BDE569           (        forth.asm):02242 (7)             jsr     CMP2
EF01 2402             (        forth.asm):02243 (3)             bhs     @uinf1          Z is set
EF03 3001             (        forth.asm):02244 (4+1)           leax    1,x
EF05 3610             (        forth.asm):02245         @uinf1  UCNPUSH
EF07 39               (        forth.asm):02246 (4)             rts
                      (        forth.asm):02247         
                      (        forth.asm):02248         * Functionally: : WITHIN OVER - >R - R> U< ;
EF08 06               (        forth.asm):02249         WITHIN  fcb     6               ANSI (Core)
EF09 57495448494E     (        forth.asm):02250                 fcc     'WITHIN'        ( n1 n2 n3 -- flag )
EF0F EEF8             (        forth.asm):02251                 fdb     UINF
EF11 C7               (        forth.asm):02252                 RFCS
EF12 BDFC19           (        forth.asm):02253                 RFXT    jsr,OVER+7      XT for OVER
EF15 BDF89F           (        forth.asm):02254                 RFXT    jsr,MINUS+4     XT for -
EF18 BDF036           (        forth.asm):02255                 RFXT    jsr,TOR+5       XT for >R
EF1B BDF89F           (        forth.asm):02256                 RFXT    jsr,MINUS+4     XT for -
EF1E BDF02A           (        forth.asm):02257                 RFXT    jsr,RFROM+5     XT for R>
EF21 20DB             (        forth.asm):02258                 RFXT    bra,UINF+5      XT for U<
                      (        forth.asm):02259         
EF23 01               (        forth.asm):02260         SUP     fcb     1               79-STANDARD (REQ102)
EF24 3E               (        forth.asm):02261                 fcc     '>'
EF25 EF08             (        forth.asm):02262                 fdb     WITHIN
EF27 C7               (        forth.asm):02263                 RFCS
EF28 BDE569           (        forth.asm):02264 (7)             jsr     CMP2
EF2B 2F02             (        forth.asm):02265 (3)             ble     @sup1
EF2D 3001             (        forth.asm):02266 (4+1)           leax    1,x
EF2F 3610             (        forth.asm):02267         @sup1   UCNPUSH
EF31 39               (        forth.asm):02268 (4)             rts
                      (        forth.asm):02269         
EF32 01               (        forth.asm):02270         INF     fcb     1               79-STANDARD (REQ139)
EF33 3C               (        forth.asm):02271                 fcc     '<'
EF34 EF23             (        forth.asm):02272                 fdb     SUP
EF36 C7               (        forth.asm):02273                 RFCS
EF37 BDE569           (        forth.asm):02274 (7)             jsr     CMP2
EF3A 2C02             (        forth.asm):02275 (3)             bge     @inf1
EF3C 3001             (        forth.asm):02276 (4+1)           leax    1,x
EF3E 3610             (        forth.asm):02277         @inf1   UCNPUSH
EF40 39               (        forth.asm):02278 (4)             rts
                      (        forth.asm):02279         
EF41 03               (        forth.asm):02280         MAX     fcb     3               79-STANDARD (REQ218)
EF42 4D4158           (        forth.asm):02281                 fcc     'MAX'
EF45 EF32             (        forth.asm):02282                 fdb     INF
EF47 C7               (        forth.asm):02283                 RFCS
EF48 BDE7D7           (        forth.asm):02284 (7)             jsr     NPOP
EF4B 1F12             (        forth.asm):02285 (4)             tfr     x,y
EF4D BDE7D7           (        forth.asm):02286 (7)             jsr     NPOP
EF50 103721           (        forth.asm):02287 (4)             cmpr    y,x
EF53 2C02             (        forth.asm):02288 (3)             bge     @pshrv1
EF55 1F21             (        forth.asm):02289 (4)             tfr     y,x
EF57 3610             (        forth.asm):02290         @pshrv1 UCNPUSH
EF59 39               (        forth.asm):02291 (4)             rts
                      (        forth.asm):02292         
EF5A 03               (        forth.asm):02293         MIN     fcb     3               79-STANDARD (REQ127)
EF5B 4D494E           (        forth.asm):02294                 fcc     'MIN'
EF5E EF41             (        forth.asm):02295                 fdb     MAX
EF60 C7               (        forth.asm):02296                 RFCS
EF61 BDE7D7           (        forth.asm):02297 (7)             jsr     NPOP
EF64 1F12             (        forth.asm):02298 (4)             tfr     x,y
EF66 BDE7D7           (        forth.asm):02299 (7)             jsr     NPOP
EF69 103721           (        forth.asm):02300 (4)             cmpr    y,x
EF6C 2F02             (        forth.asm):02301 (3)             ble     @pshrv2
EF6E 1F21             (        forth.asm):02302 (4)             tfr     y,x
EF70 3610             (        forth.asm):02303         @pshrv2 UCNPUSH
EF72 39               (        forth.asm):02304 (4)             rts
                      (        forth.asm):02305         
EF73 03               (        forth.asm):02306         ABS     fcb     3               79-STANDARD (REQ108)
EF74 414253           (        forth.asm):02307                 fcc     'ABS'
EF77 EF5A             (        forth.asm):02308                 fdb     MIN
EF79 C7               (        forth.asm):02309                 RFCS
EF7A BDE7D7           (        forth.asm):02310 (7)             jsr     NPOP
EF7D 1F10             (        forth.asm):02311 (4)             tfr     x,d
EF7F 104D             (        forth.asm):02312 (2)             tstd
EF81 2A04             (        forth.asm):02313 (3)             bpl     @abs1
EF83 1040             (        forth.asm):02314 (2)             negd
EF85 1F01             (        forth.asm):02315 (4)             tfr     d,x
EF87 3610             (        forth.asm):02316         @abs1   UCNPUSH
EF89 39               (        forth.asm):02317 (4)             rts
                      (        forth.asm):02318         
EF8A 06               (        forth.asm):02319         NEGATE  fcb     6               79-STANDARD (REQ177)
EF8B 4E4547415445     (        forth.asm):02320                 fcc     'NEGATE'
EF91 EF73             (        forth.asm):02321                 fdb     ABS
EF93 C7               (        forth.asm):02322                 RFCS
EF94 BDE46E           (        forth.asm):02323 (7)             jsr     MIN1PST         At least one cell needs to be stacked up
EF97 ECC4             (        forth.asm):02324 (5+0)           ldd     ,u
EF99 1040             (        forth.asm):02325 (2)             negd
EF9B EDC4             (        forth.asm):02326 (5+0)           std     ,u
EF9D 39               (        forth.asm):02327 (4)             rts
                      (        forth.asm):02328         
EF9E C5               (        forth.asm):02329         BEGIN   fcb     $C5             79-STANDARD (REQ147)
EF9F 424547494E       (        forth.asm):02330                 fcc     'BEGIN'
EFA4 EF8A             (        forth.asm):02331                 fdb     NEGATE
EFA6 C7               (        forth.asm):02332                 RFCS
EFA7 0C2F             (        forth.asm):02333 (5)             inc     BALNCD
EFA9 9E08             (        forth.asm):02334 (4)             ldx     DICEND          HERE is ANS:dest
EFAB 7EE7C9           (        forth.asm):02335 (3)             jmp     CSPUSH          to the control flow stack
                      (        forth.asm):02336         
EFAE C5               (        forth.asm):02337         AGAIN   fcb     $C5             79-STANDARD (REF114)
EFAF 414741494E       (        forth.asm):02338                 fcc     'AGAIN'
EFB4 EF9E             (        forth.asm):02339                 fdb     BEGIN
EFB6 C7               (        forth.asm):02340                 RFCS
EFB7 BDE7D7           (        forth.asm):02341 (7)             jsr     CSPOP           ANS:dest from the control flow stack to X
EFBA 109E08           (        forth.asm):02342 (5)             ldy     DICEND
EFBD 109F14           (        forth.asm):02343 (5)             sty     JSRLAST
EFC0 867E             (        forth.asm):02344 (2)     AGAIN1  lda     #JMPOPC         JMP extended
EFC2 BDE564           (        forth.asm):02345 (7)             jsr     VARCON2
EFC5 109F08           (        forth.asm):02346 (5)             sty     DICEND
EFC8 0A2F             (        forth.asm):02347 (5)             dec     BALNCD
EFCA 39               (        forth.asm):02348 (4)             rts
                      (        forth.asm):02349         
                      (        forth.asm):02350         # The standard does not require this as being immediate but I do.
EFCB C4               (        forth.asm):02351         EXIT    fcb     $C4             79-STANDARD (REQ117)
EFCC 45584954         (        forth.asm):02352                 fcc     'EXIT'
EFD0 EFAE             (        forth.asm):02353                 fdb     AGAIN
EFD2 C7               (        forth.asm):02354                 RFCS
EFD3 9E08             (        forth.asm):02355 (4)             ldx     DICEND
EFD5 301D             (        forth.asm):02356 (4+1)           leax    -3,x
EFD7 109E14           (        forth.asm):02357 (5)             ldy     JSRLAST
EFDA 103721           (        forth.asm):02358 (4)             cmpr    y,x
EFDD 2605             (        forth.asm):02359 (3)             bne     @noopt          Tail JMP optimization is not possible
EFDF 867E             (        forth.asm):02360 (2)             lda     #JMPOPC         JMP extended
EFE1 A784             (        forth.asm):02361 (4+0)           sta     ,x
EFE3 39               (        forth.asm):02362 (4)             rts
EFE4 3003             (        forth.asm):02363 (4+1)   @noopt  leax    3,x             Point back to HERE
EFE6 8639             (        forth.asm):02364 (2)             lda     #RTSOPC         RTS inherent
EFE8 A780             (        forth.asm):02365 (4+1)           sta     ,x+
EFEA 9F08             (        forth.asm):02366 (4)             stx     DICEND
EFEC 39               (        forth.asm):02367 (4)             rts
                      (        forth.asm):02368         
EFED C5               (        forth.asm):02369         UNTIL   fcb     $C5             79-STANDARD (REQ237)
EFEE 554E54494C       (        forth.asm):02370                 fcc     'UNTIL'
EFF3 EFCB             (        forth.asm):02371                 fdb     EXIT
EFF5 C7               (        forth.asm):02372                 RFCS
EFF6 8EE7D7           (        forth.asm):02373 (3)             ldx     #NPOP
EFF9 BDE153           (        forth.asm):02374 (7)             jsr     EMXASXT         Compile "JSR NPOP"
EFFC 8E2603           (        forth.asm):02375 (3)             ldx     #BNEOPC         Compile "BNE *+5"
EFFF AFA1             (        forth.asm):02376 (5+2)           stx     ,y++
F001 BDE7D7           (        forth.asm):02377 (7)             jsr     CSPOP           ANS:dest to X
F004 20BA             (        forth.asm):02378 (3)             bra     AGAIN1
                      (        forth.asm):02379         
F006 C5               (        forth.asm):02380         WHILE   fcb     $C5             79-STANDARD (REQ149)
F007 5748494C45       (        forth.asm):02381                 fcc     'WHILE'
F00C EFED             (        forth.asm):02382                 fdb     UNTIL
F00E C7               (        forth.asm):02383                 RFCS
F00F BDEDA2           (        forth.asm):02384                 RFXT    jsr,IF+5
F012 7EFBD7           (        forth.asm):02385                 RFXT    jmp,SWAP+7      This should be read as "1 CS-ROLL"
                      (        forth.asm):02386         
F015 C6               (        forth.asm):02387         REPEAT  fcb     $C6             79-STANDARD (REQ120)
F016 524550454154     (        forth.asm):02388                 fcc     'REPEAT'
F01C F006             (        forth.asm):02389                 fdb     WHILE
F01E C7               (        forth.asm):02390                 RFCS
F01F 8D96             (        forth.asm):02391                 RFXT    bsr,AGAIN+8
F021 7EEDD8           (        forth.asm):02392                 RFXT    jmp,THEN+7
                      (        forth.asm):02393         
F024 42               (        forth.asm):02394         RFROM   fcb     $42             79-STANDARD (REQ110)
F025 523E             (        forth.asm):02395                 fcc     'R>'
F027 F015             (        forth.asm):02396                 fdb     REPEAT
F029 C7               (        forth.asm):02397                 RFCS
F02A BDE805           (        forth.asm):02398 (7)             jsr     RPOP
F02D 7EE7C9           (        forth.asm):02399 (3)             jmp     NPUSH
                      (        forth.asm):02400         
F030 42               (        forth.asm):02401         TOR     fcb     $42             79-STANDARD (REQ200)
F031 3E52             (        forth.asm):02402                 fcc     '>R'
F033 F024             (        forth.asm):02403                 fdb     RFROM
F035 C7               (        forth.asm):02404                 RFCS
F036 BDE7D7           (        forth.asm):02405 (7)             jsr     NPOP
F039 7EE7E9           (        forth.asm):02406 (3)             jmp     RPUSH
                      (        forth.asm):02407         
F03C 45               (        forth.asm):02408         LEAVE   fcb     $45             79-STANDARD (REQ213)
F03D 4C45415645       (        forth.asm):02409                 fcc     'LEAVE'
F042 F030             (        forth.asm):02410                 fdb     TOR
F044 C7               (        forth.asm):02411                 RFCS
F045 BDE805           (        forth.asm):02412 (7)             jsr     RPOP
F048 BDE805           (        forth.asm):02413 (7)             jsr     RPOP
F04B BDE7E9           (        forth.asm):02414 (7)             jsr     RPUSH
F04E 7EE7E9           (        forth.asm):02415 (3)             jmp     RPUSH
                      (        forth.asm):02416         
F051 41               (        forth.asm):02417         INDI    fcb     $41             79-STANDARD (REQ136)
F052 49               (        forth.asm):02418                 fcc     'I'
F053 F03C             (        forth.asm):02419                 fdb     LEAVE
F055 C7               (        forth.asm):02420                 RFCS
F056 5F               (        forth.asm):02421 (1)             clrb
F057 9632             (        forth.asm):02422 (3)     RPICKN  lda     RDEPTH
F059 103789           (        forth.asm):02423 (4)             cmpr    a,b
F05C 240A             (        forth.asm):02424 (3)             bhs     @rpick1
F05E 9E00             (        forth.asm):02425 (4)             ldx     RSP
F060 4F               (        forth.asm):02426 (1)             clra
F061 1048             (        forth.asm):02427 (2)             lsld                    Times 2
F063 AE8B             (        forth.asm):02428 (5+2)           ldx     d,x
F065 7EE7C9           (        forth.asm):02429 (3)             jmp     NPUSH           We cannot use UCNPUSH here
F068 C608             (        forth.asm):02430 (2)     @rpick1 ldb     #8              Return stack underflow
F06A BDE73F           (        forth.asm):02431 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02432         
F06D 42               (        forth.asm):02433         RFETCH  fcb     $42             79-STANDARD (REQ228)
F06E 5240             (        forth.asm):02434                 fcc     'R@'
F070 F051             (        forth.asm):02435                 fdb     INDI
F072 C7               (        forth.asm):02436                 RFCS
F073 20E1             (        forth.asm):02437                 RFXT    bra,INDI+4      XT for I
                      (        forth.asm):02438         
F075 42               (        forth.asm):02439         INDIP   fcb     $42             79-STANDARD (REF)
F076 4927             (        forth.asm):02440                 fdb     $4927
F078 F06D             (        forth.asm):02441                 fdb     RFETCH
F07A C7               (        forth.asm):02442                 RFCS
F07B C601             (        forth.asm):02443 (2)             ldb     #1
F07D 20D8             (        forth.asm):02444 (3)             bra     RPICKN
                      (        forth.asm):02445         
F07F 41               (        forth.asm):02446         INDJ    fcb     $41             79-STANDARD (REQ225)
F080 4A               (        forth.asm):02447                 fcc     'J'
F081 F075             (        forth.asm):02448                 fdb     INDIP
F083 C7               (        forth.asm):02449                 RFCS
F084 C602             (        forth.asm):02450 (2)             ldb     #2
F086 20CF             (        forth.asm):02451 (3)             bra     RPICKN
                      (        forth.asm):02452         
F088 42               (        forth.asm):02453         INDJP   fcb     $42             Non-standard
F089 4A27             (        forth.asm):02454                 fdb     $4A27
F08B F07F             (        forth.asm):02455                 fdb     INDJ
F08D C7               (        forth.asm):02456                 RFCS
F08E C603             (        forth.asm):02457 (2)             ldb     #3
F090 20C5             (        forth.asm):02458 (3)             bra     RPICKN
                      (        forth.asm):02459         
F092 41               (        forth.asm):02460         INDK    fcb     $41             79-STANDARD (REF)
F093 4B               (        forth.asm):02461                 fcc     'K'
F094 F088             (        forth.asm):02462                 fdb     INDJP
F096 C7               (        forth.asm):02463                 RFCS
F097 C604             (        forth.asm):02464 (2)             ldb     #4
F099 20BC             (        forth.asm):02465 (3)             bra     RPICKN
                      (        forth.asm):02466         
F09B 04               (        forth.asm):02467         QUIT    fcb     4               79-STANDARD (REQ211)
F09C 51554954         (        forth.asm):02468                 fcc     'QUIT'
F0A0 F092             (        forth.asm):02469                 fdb     INDK
F0A2 C7               (        forth.asm):02470                 RFCS
F0A3 0F23             (        forth.asm):02471 (5)             clr     USTATE+1
F0A5 BDEB2E           (        forth.asm):02472                 RFXT    jsr,RCLR+7      XT for RCLR
F0A8 10CE8000         (        forth.asm):02473 (4)             lds     #RAMSTRT+RAMSIZE Reset the system stack pointer
F0AC BDE2EB           (        forth.asm):02474 (7)             jsr     PUTCR
F0AF 7EE0B2           (        forth.asm):02475 (3)             jmp     INTERP
                      (        forth.asm):02476         
F0B2 05               (        forth.asm):02477         ABORT   fcb     5               79-STANDARD (REQ101)
F0B3 41424F5254       (        forth.asm):02478                 fcc     'ABORT'
F0B8 F09B             (        forth.asm):02479                 fdb     QUIT
F0BA C7               (        forth.asm):02480                 RFCS
F0BB C603             (        forth.asm):02481 (2)             ldb     #3
F0BD BDE73F           (        forth.asm):02482 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02483         
F0C0 04               (        forth.asm):02484         FIND    fcb     4               79-STANDARD (REQ203)
F0C1 46494E44         (        forth.asm):02485                 fcc     'FIND'          ( -- XT )
F0C5 F0B2             (        forth.asm):02486                 fdb     ABORT
F0C7 C7               (        forth.asm):02487                 RFCS
F0C8 1FC2             (        forth.asm):02488 (4)             tfr     0,y             Default return value is zero
F0CA BDE828           (        forth.asm):02489 (7)             jsr     BKIN2PT         Derive X from BLK, >IN
F0CD 6D84             (        forth.asm):02490 (5+0)           tst     ,x
F0CF 2711             (        forth.asm):02491 (3)             beq     @find1
F0D1 BDE367           (        forth.asm):02492 (7)             jsr     SCNSTOK
F0D4 270C             (        forth.asm):02493 (3)             beq     @find1
F0D6 BDE482           (        forth.asm):02494 (7)             jsr     SWDIC
F0D9 DC0E             (        forth.asm):02495 (4)             ldd     PLOAD           Retrieve word payload
F0DB DD10             (        forth.asm):02496 (4)             std     FNDPLD          Make it accessible through PAYLOAD
F0DD DC04             (        forth.asm):02497 (4)             ldd     TOKENEP
F0DF BDE162           (        forth.asm):02498 (7)             jsr     U2INFRD         Derive >IN from D
F0E2 1F21             (        forth.asm):02499 (4)     @find1  tfr     y,x
F0E4 7EE7C9           (        forth.asm):02500 (3)             jmp     NPUSH
                      (        forth.asm):02501         
F0E7 01               (        forth.asm):02502         RBRACK  fcb     1               79-STANDARD (REQ126)
F0E8 5D               (        forth.asm):02503                 fcc     ']'
F0E9 F0C0             (        forth.asm):02504                 fdb     FIND
F0EB C7               (        forth.asm):02505                 RFCS
F0EC 8601             (        forth.asm):02506 (2)             lda     #1
F0EE 9723             (        forth.asm):02507 (3)             sta     USTATE+1
F0F0 39               (        forth.asm):02508 (4)             rts
                      (        forth.asm):02509         
                      (        forth.asm):02510         * Note: the standard does not mandate that this primitive be executed in
                      (        forth.asm):02511         * definitions only. IMHO, it ought to, therefore I am forcing the C bit here.
F0F1 C1               (        forth.asm):02512         LBRACK  fcb     $C1             79-STANDARD (REQ125)
F0F2 5B               (        forth.asm):02513                 fcc     '['
F0F3 F0E7             (        forth.asm):02514                 fdb     RBRACK
F0F5 C7               (        forth.asm):02515                 RFCS
F0F6 0F23             (        forth.asm):02516 (5)             clr     USTATE+1
F0F8 39               (        forth.asm):02517 (4)             rts
                      (        forth.asm):02518         
                      (        forth.asm):02519         * Functionally: : ['] FIND POSTPONE LITERAL ; IMMEDIATE RESTRICT
F0F9 C3               (        forth.asm):02520         BKQUOT  fcb     $C3             ANSI (Core)
F0FA 5B275D           (        forth.asm):02521                 fcb     $5B,$27,$5D
F0FD F0F1             (        forth.asm):02522                 fdb     LBRACK
F0FF C7               (        forth.asm):02523                 RFCS
F100 8DC6             (        forth.asm):02524                 RFXT    bsr,FIND+7      XT for FIND
                      (        forth.asm):02525         * Data stack topmost cell has the target word address.
F102 7EEBAE           (        forth.asm):02526                 RFXT    jmp,LITERAL+10  XT for LITERAL
                      (        forth.asm):02527         
F105 C8               (        forth.asm):02528         POSTPON fcb     $C8             ANSI (Core)
F106 504F5354504F4E45 (        forth.asm):02529                 fcc     'POSTPONE'      Not a straight alias to [COMPILE]
F10E F0F9             (        forth.asm):02530                 fdb     BKQUOT          Non-immediate words deserve special treatment
F110 C7               (        forth.asm):02531                 RFCS
F111 BDE828           (        forth.asm):02532 (7)             jsr     BKIN2PT         Derive X from BLK, >IN
F114 6D84             (        forth.asm):02533 (5+0)           tst     ,x
F116 2605             (        forth.asm):02534 (3)             bne     @postp2
F118 C605             (        forth.asm):02535 (2)     @postp1 ldb     #5              Missing word name
F11A BDE73F           (        forth.asm):02536 (7)             jsr     ERRHDLR         No return
F11D BDE367           (        forth.asm):02537 (7)     @postp2 jsr     SCNSTOK
F120 27F6             (        forth.asm):02538 (3)             beq     @postp1
F122 BDE482           (        forth.asm):02539 (7)             jsr     SWDIC
F125 2607             (        forth.asm):02540 (3)             bne     @postp3         Word found. Code address returned in Y
F127 9E02             (        forth.asm):02541 (4)             ldx     TOKENSP
F129 C602             (        forth.asm):02542 (2)             ldb     #2              Undefined (X points to the offending word)
F12B BDE73F           (        forth.asm):02543 (7)             jsr     ERRHDLR         No return
F12E 1F21             (        forth.asm):02544 (4)     @postp3 tfr     y,x             X has the actual execution token
F130 0D3B             (        forth.asm):02545 (4)             tst     IMDFLG
F132 2708             (        forth.asm):02546 (3)             beq     @postp5         Target word is not immediate
F134 BDE153           (        forth.asm):02547 (7)     @postp4 jsr     EMXASXT         Set as action component
F137 DC02             (        forth.asm):02548 (4)             ldd     TOKENSP         Updated by SWDIC if the word was found
F139 7EE162           (        forth.asm):02549 (3)             jmp     U2INFRD         Derive >IN from D
                      (        forth.asm):02550         * The word being considered is non-immediate. The equivalent input should be:
                      (        forth.asm):02551         * ['] <word> COMPILE, We have the XT for <word> in X.
F13C BDE54D           (        forth.asm):02552 (7)     @postp5 jsr     LITER
F13F 8EF150           (        forth.asm):02553                 RFXT    ldx,#CMPCOMA+11 XT for COMPILE,
F142 20F0             (        forth.asm):02554 (3)             bra     @postp4
                      (        forth.asm):02555         
                      (        forth.asm):02556         * GNU Forth has this as non-immediate so I am going for it as well.
F144 48               (        forth.asm):02557         CMPCOMA fcb     $48             ANSI (Core Ext)
F145 434F4D50494C452C (        forth.asm):02558                 fcc     'COMPILE,'      ( XT -- )
F14D F105             (        forth.asm):02559                 fdb     POSTPON
F14F C7               (        forth.asm):02560                 RFCS
F150 BDE7D7           (        forth.asm):02561 (7)             jsr     NPOP            Execution token to X
F153 7EE153           (        forth.asm):02562 (3)             jmp     EMXASXT
                      (        forth.asm):02563         
                      (        forth.asm):02564         * As per the standard, : is not immediate. This allows for further interesting
                      (        forth.asm):02565         * developments, like tracing words execution...
F156 01               (        forth.asm):02566         COMPC   fcb     $1              79-STANDARD (REQ116)
F157 3A               (        forth.asm):02567                 fcc     ':'
F158 F144             (        forth.asm):02568                 fdb     CMPCOMA
F15A C7               (        forth.asm):02569                 RFCS
F15B 0F2E             (        forth.asm):02570 (5)             clr     ANCMPF
F15D 8601             (        forth.asm):02571 (2)     COMPC1  lda     #1
F15F 9723             (        forth.asm):02572 (3)             sta     USTATE+1        Switch to compilation mode
F161 104F             (        forth.asm):02573 (2)             clrd
F163 972F             (        forth.asm):02574 (3)             sta     BALNCD
F165 DD14             (        forth.asm):02575 (4)             std     JSRLAST
F167 DD16             (        forth.asm):02576 (4)             std     FWDREF
F169 0D2E             (        forth.asm):02577 (4)             tst     ANCMPF          Anonymous compilation?
F16B 2603             (        forth.asm):02578 (3)             bne     @isanon
F16D 7EE4F0           (        forth.asm):02579 (3)             jmp     LOCWRT
F170 9E08             (        forth.asm):02580 (4)     @isanon ldx     DICEND
F172 9F0C             (        forth.asm):02581 (4)             stx     BDICEND         Backup HERE
F174 9F12             (        forth.asm):02582 (4)             stx     RECADDR         Should RECURSE by used by a :NONAME definition
F176 39               (        forth.asm):02583 (4)             rts
                      (        forth.asm):02584         
F177 07               (        forth.asm):02585         NONAME  fcb     $7
F178 3A4E4F4E414D45   (        forth.asm):02586                 fcc     ':NONAME'
F17F F156             (        forth.asm):02587                 fdb     COMPC
F181 C7               (        forth.asm):02588                 RFCS
F182 8601             (        forth.asm):02589 (2)             lda     #1
F184 972E             (        forth.asm):02590 (3)             sta     ANCMPF          Set the anonymous compilation flag
F186 20D5             (        forth.asm):02591 (3)             bra     COMPC1
                      (        forth.asm):02592         
                      (        forth.asm):02593         * Tail call optimization notes:
                      (        forth.asm):02594         * 1: if JSRLAST is 0, emit an RTS, the end.
                      (        forth.asm):02595         * 2: if HERE - 3 == JSRLAST: replace JSR by a JMP.
                      (        forth.asm):02596         * 3: if FWDREF == HERE, emit an RTS.
                      (        forth.asm):02597         * The end means finalize with DEBUG code and an update of HERE (DICEND).
F188 C1               (        forth.asm):02598         COMPR   fcb     $C1             79-STANDARD (REQ196)
F189 3B               (        forth.asm):02599                 fcc     ';'
F18A F177             (        forth.asm):02600                 fdb     NONAME
F18C C7               (        forth.asm):02601                 RFCS
F18D BDE81E           (        forth.asm):02602 (7)             jsr     BALCHK          Check for unbalanced constructs
F190 0F23             (        forth.asm):02603 (5)             clr     USTATE+1        Back to interpretation mode
                      (        forth.asm):02604         * Do not restore LSTWAD if we came from :NONAME.
F192 9E0C             (        forth.asm):02605 (4)             ldx     BDICEND         X as HERE when : (LOCWRT) or :NONAME was called
F194 0D2E             (        forth.asm):02606 (4)             tst     ANCMPF
F196 2604             (        forth.asm):02607 (3)             bne     @wasano
F198 9F06             (        forth.asm):02608 (4)             stx     LSTWAD          Update LAST
F19A 2005             (        forth.asm):02609 (3)             bra     @cont
F19C 0F2E             (        forth.asm):02610 (5)     @wasano clr     ANCMPF
F19E BDE7C9           (        forth.asm):02611 (7)             jsr     NPUSH           Anonynous execution token to the data stack
F1A1 9E08             (        forth.asm):02612 (4)     @cont   ldx     DICEND          HERE to X
                      (        forth.asm):02613         * Optimization: replace the last JSR by a JMP, if possible.
F1A3 DC14             (        forth.asm):02614 (4)             ldd     JSRLAST
F1A5 2713             (        forth.asm):02615 (3)             beq     @rtsreq         Case #1
F1A7 311D             (        forth.asm):02616 (4+1)           leay    -3,x            Y has HERE - 3, D has JSRLAST
F1A9 103702           (        forth.asm):02617 (4)             cmpr    d,y
F1AC 260C             (        forth.asm):02618 (3)             bne     @rtsreq
                      (        forth.asm):02619         * Tail call optimization applies (Case #2).
F1AE 867E             (        forth.asm):02620 (2)             lda     #JMPOPC
F1B0 A7A4             (        forth.asm):02621 (4+0)           sta     ,y
F1B2 109E16           (        forth.asm):02622 (5)             ldy     FWDREF
F1B5 103712           (        forth.asm):02623 (4)             cmpr    x,y
F1B8 2604             (        forth.asm):02624 (3)             bne     @finalz         Case #3
F1BA 8639             (        forth.asm):02625 (2)     @rtsreq lda     #RTSOPC         RTS inherent
F1BC A780             (        forth.asm):02626 (4+1)           sta     ,x+
F1BE                  (        forth.asm):02627         @finalz
                      (        forth.asm):02628                 IFNE    DEBUG
                      (        forth.asm):02629                 lda     #ILLOPC         Illegal opcode
                      (        forth.asm):02630                 sta     ,x+
                      (        forth.asm):02631                 ENDC                    DEBUG
F1BE 9F08             (        forth.asm):02632 (4)             stx     DICEND          Update HERE
                      (        forth.asm):02633                 IFNE    RELFEAT
F1C0 BDEC54           (        forth.asm):02634                 RFXT    jsr,MONITOR+10  XT for MONITOR. All : words are candidates
                      (        forth.asm):02635         *                               for integrity check by ICHECK.
                      (        forth.asm):02636                 ENDC                    RELFEAT
F1C3 39               (        forth.asm):02637 (4)             rts
                      (        forth.asm):02638         
F1C4 C7               (        forth.asm):02639         RECURSE fcb     $C7             FORTH-83
F1C5 52454355525345   (        forth.asm):02640                 fcc     'RECURSE'
F1CC F188             (        forth.asm):02641                 fdb     COMPR
F1CE C7               (        forth.asm):02642                 RFCS
F1CF 9E12             (        forth.asm):02643 (4)             ldx     RECADDR         Set up by LOCWRT
F1D1 7EE153           (        forth.asm):02644 (3)             jmp     EMXASXT         Set as action component
                      (        forth.asm):02645         
F1D4 06               (        forth.asm):02646         FORGET  fcb     6               79-STANDARD (REQ196)
F1D5 464F52474554     (        forth.asm):02647                 fcc     'FORGET'
F1DB F1C4             (        forth.asm):02648                 fdb     RECURSE
F1DD C7               (        forth.asm):02649                 RFCS
F1DE BDE828           (        forth.asm):02650 (7)             jsr     BKIN2PT         Derive X from BLK, >IN
F1E1 6D84             (        forth.asm):02651 (5+0)           tst     ,x              EOL?
F1E3 2605             (        forth.asm):02652 (3)             bne     @frgt2          No
F1E5 C605             (        forth.asm):02653 (2)     @frgt1  ldb     #5              Missing word name
F1E7 BDE73F           (        forth.asm):02654 (7)             jsr     ERRHDLR         No return
F1EA BDE367           (        forth.asm):02655 (7)     @frgt2  jsr     SCNSTOK
F1ED 27F6             (        forth.asm):02656 (3)             beq     @frgt1          EOL before a non-SP character could be acquired
F1EF BDE482           (        forth.asm):02657 (7)             jsr     SWDIC           SWDIC uses TOKENSP as input--not X!!
F1F2 2607             (        forth.asm):02658 (3)             bne     @frgt3          Word found. XT returned in Y
F1F4 9E02             (        forth.asm):02659 (4)             ldx     TOKENSP
F1F6 C602             (        forth.asm):02660 (2)             ldb     #2              Undefined (X points to the offending word)
F1F8 BDE73F           (        forth.asm):02661 (7)             jsr     ERRHDLR         No return
F1FB 1F21             (        forth.asm):02662 (4)     @frgt3  tfr     y,x             Y and X have the word's XT
F1FD 108C0C65         (        forth.asm):02663 (4)             cmpy    #RAMFTCH
F201 2719             (        forth.asm):02664 (3)             beq     @frgt4
F203 108CE000         (        forth.asm):02665 (4)             cmpy    #ROMSTRT
F207 2413             (        forth.asm):02666 (3)             bhs     @frgt4
                      (        forth.asm):02667                 IFNE    RELFEAT
F209 AE1D             (        forth.asm):02668 (5+1)           ldx     -3,x            Backlink to X
F20B 9F06             (        forth.asm):02669 (4)             stx     LSTWAD          Update LAST
F20D 303C             (        forth.asm):02670 (4+1)           leax    -4,y            XT-4 to X (1B/attr, 2B/backlink, 1B/checksum)
                      (        forth.asm):02671                 ELSE
                      (        forth.asm):02672                 ldx     -2,x            Backlink to X
                      (        forth.asm):02673                 stx     LSTWAD          Update LAST
                      (        forth.asm):02674                 leax    -3,y            XT-3 to X (1B/attr, 2B/backlink)
                      (        forth.asm):02675                 ENDC                    RELFEAT
F20F 4F               (        forth.asm):02676 (1)             clra
F210 D63A             (        forth.asm):02677 (3)             ldb     CURTOKL         Token name length to D
F212 103201           (        forth.asm):02678 (4)             subr    d,x             Substract word length
F215 9F08             (        forth.asm):02679 (4)             stx     DICEND          Update HERE
F217 DC02             (        forth.asm):02680 (4)             ldd     TOKENSP         Set by SWDIC to point to the end of the token
F219 7EE162           (        forth.asm):02681 (3)             jmp     U2INFRD         Derive >IN from D
F21C C60B             (        forth.asm):02682 (2)     @frgt4  ldb     #11             Word is unforgettable
F21E BDE73F           (        forth.asm):02683 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02684         
F221 07               (        forth.asm):02685         EXCT    fcb     7               79-STANDARD (REQ163)
F222 45584543555445   (        forth.asm):02686                 fcc     'EXECUTE'
F229 F1D4             (        forth.asm):02687                 fdb     FORGET
F22B C7               (        forth.asm):02688                 RFCS
F22C BDE7D7           (        forth.asm):02689 (7)             jsr     NPOP            Although the standard does not specify that
F22F 2702             (        forth.asm):02690 (3)             beq     @exct1          a NUL address should trigger an error, I do
F231 1F15             (        forth.asm):02691 (4)             tfr     x,pc
F233 C60D             (        forth.asm):02692 (2)     @exct1  ldb     #13             Illegal argument
F235 BDE73F           (        forth.asm):02693 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02694         
F238 03               (        forth.asm):02695         BYE     fcb     3               ANSI (Programming tools)
F239 425945           (        forth.asm):02696                 fcc     'BYE'
F23C F221             (        forth.asm):02697                 fdb     EXCT
F23E C7               (        forth.asm):02698                 RFCS
                      (        forth.asm):02699                 IFNE    RTCFEAT
                      (        forth.asm):02700                 lda     #RTOREGB
                      (        forth.asm):02701                 jsr     RTREGRD         RTCB register to B
                      (        forth.asm):02702                 andb    #^RTBPIE        Disable periodic interrupt generation
                      (        forth.asm):02703                 jsr     RTREGWR
                      (        forth.asm):02704                 ldx     #40
                      (        forth.asm):02705                 jsr     MILLIS1         Wait for 40 milliseconds
                      (        forth.asm):02706                 orcc    #(FFLAG|IFLAG)  Disable maskable interrupts
                      (        forth.asm):02707                 ENDC                    RTCFEAT
F23F 7EE037           (        forth.asm):02708 (3)             jmp     RSTHDL
                      (        forth.asm):02709         
F242 C6               (        forth.asm):02710         BKCHAR  fcb     $C6             ANSI (Core)
F243 5B434841525D     (        forth.asm):02711                 fcc     '[CHAR]'
F249 F238             (        forth.asm):02712                 fdb     BYE
F24B C7               (        forth.asm):02713                 RFCS
F24C 8D0B             (        forth.asm):02714                 RFXT    bsr,CHAR+7      XT for CHAR
F24E 7EEBAE           (        forth.asm):02715                 RFXT    jmp,LITERAL+10  XT for LITERAL
                      (        forth.asm):02716         
F251 04               (        forth.asm):02717         CHAR    fcb     4               ANSI (Core)
F252 43484152         (        forth.asm):02718                 fcc     'CHAR'
F256 F242             (        forth.asm):02719                 fdb     BKCHAR
F258 C7               (        forth.asm):02720                 RFCS
F259 BDE828           (        forth.asm):02721 (7)             jsr     BKIN2PT         Derive X from BLK, >IN
F25C BDE367           (        forth.asm):02722 (7)     @char1  jsr     SCNSTOK         X points to the beginning of the character
F25F 2712             (        forth.asm):02723 (3)             beq     @chrerr
F261 E684             (        forth.asm):02724 (4+0)           ldb     ,x
F263 4F               (        forth.asm):02725 (1)             clra
F264 1F01             (        forth.asm):02726 (4)             tfr     d,x
F266 BDE7C9           (        forth.asm):02727 (7)             jsr     NPUSH
F269 9E02             (        forth.asm):02728 (4)             ldx     TOKENSP         Set by SCNSTOK
F26B BDE375           (        forth.asm):02729 (7)             jsr     SCNETOK
F26E 1F10             (        forth.asm):02730 (4)             tfr     x,d             TOKENEP
F270 7EE162           (        forth.asm):02731 (3)             jmp     U2INFRD         Derive >IN from D
F273 C60D             (        forth.asm):02732 (2)     @chrerr ldb     #13             Illegal argument
F275 BDE73F           (        forth.asm):02733 (7)             jsr     ERRHDLR
                      (        forth.asm):02734         * No return.
                      (        forth.asm):02735         
                      (        forth.asm):02736         * Hairy code but working.
F278 04               (        forth.asm):02737         WORD    fcb     4               79-STANDARD (REQ181)
F279 574F5244         (        forth.asm):02738                 fcc     'WORD'          ( char -- addr )
F27D F251             (        forth.asm):02739                 fdb     CHAR
F27F C7               (        forth.asm):02740                 RFCS
F280 BDE7D7           (        forth.asm):02741 (7)             jsr     NPOP
F283 1F16             (        forth.asm):02742 (4)             tfr     x,w             F has the delimiter ASCII code
F285 109E08           (        forth.asm):02743 (5)             ldy     DICEND          The counted string returned is stored at HERE
F288 3420             (        forth.asm):02744 (4+2)           pshs    y
F28A 6FA0             (        forth.asm):02745 (6+1)           clr     ,y+             Initialize its length
F28C BDE828           (        forth.asm):02746 (7)             jsr     BKIN2PT         Derive X from BLK, >IN
F28F A680             (        forth.asm):02747 (4+1)           lda     ,x+             >IN @
F291 8120             (        forth.asm):02748 (2)             cmpa    #SP             BL
F293 2702             (        forth.asm):02749 (3)             beq     @word1          Skip initial blank if there is one
F295 301F             (        forth.asm):02750 (4+1)           leax    -1,x            Go back one char.
F297 A680             (        forth.asm):02751 (4+1)   @word1  lda     ,x+
F299 2716             (        forth.asm):02752 (3)             beq     @word3          EOL reached, this is the end
F29B 1037F8           (        forth.asm):02753 (4)             cmpr    f,a             Leading delimiter matched?
F29E 27F7             (        forth.asm):02754 (3)             beq     @word1          Yes, skip it (it might be repeated)
                      (        forth.asm):02755         * Either there was no leading delimiter or we went past the leading repetitions.
F2A0 301F             (        forth.asm):02756 (4+1)           leax    -1,x            Go back one char.
F2A2 A680             (        forth.asm):02757 (4+1)   @word2  lda     ,x+             Acquire next character from the input stream
F2A4 270B             (        forth.asm):02758 (3)             beq     @word3          EOL reached
F2A6 1037F8           (        forth.asm):02759 (4)             cmpr    f,a             Trailing delimiter?
F2A9 2708             (        forth.asm):02760 (3)             beq     @word4
F2AB A7A0             (        forth.asm):02761 (4+1)           sta     ,y+
F2AD 6CF4             (        forth.asm):02762 (6+3)           inc     [,s]            Increment string length
F2AF 20F1             (        forth.asm):02763 (3)             bra     @word2
F2B1 301F             (        forth.asm):02764 (4+1)   @word3  leax    -1,x            EOL reached
F2B3 1F10             (        forth.asm):02765 (4)     @word4  tfr     x,d             Pointing one char after the delimiter or to NUL
F2B5 BDE162           (        forth.asm):02766 (7)             jsr     U2INFRD         Derive >IN from D
F2B8 3510             (        forth.asm):02767 (4+2)           puls    x
F2BA 3610             (        forth.asm):02768                 UCNPUSH                 Push back HERE
F2BC 39               (        forth.asm):02769 (4)             rts
                      (        forth.asm):02770         
F2BD 81               (        forth.asm):02771         LPAR    fcb     $81             79-STANDARD (REQ122)
F2BE 28               (        forth.asm):02772                 fcc     '('
F2BF F278             (        forth.asm):02773                 fdb     WORD
F2C1 C7               (        forth.asm):02774                 RFCS
F2C2 BDE828           (        forth.asm):02775 (7)             jsr     BKIN2PT         Derive X from BLK, >IN
F2C5 A680             (        forth.asm):02776 (4+1)   @lpar1  lda     ,x+
F2C7 2709             (        forth.asm):02777 (3)             beq     @lparx          Input stream exhausted before ) is matched
F2C9 8129             (        forth.asm):02778 (2)             cmpa    #')
F2CB 26F8             (        forth.asm):02779 (3)             bne     @lpar1
F2CD 1F10             (        forth.asm):02780 (4)             tfr     x,d             Just matched )
F2CF 7EE162           (        forth.asm):02781 (3)             jmp     U2INFRD         Derive >IN from D
F2D2 C60C             (        forth.asm):02782 (2)     @lparx  ldb     #12             Missing delimiter
F2D4 BDE73F           (        forth.asm):02783 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02784         
F2D7 06               (        forth.asm):02785         SOURCE  fcb     6               ANSI (Core)
F2D8 534F55524345     (        forth.asm):02786                 fcc     'SOURCE'        ( -- baseaddr charcount )
F2DE F2BD             (        forth.asm):02787                 fdb     LPAR
F2E0 C7               (        forth.asm):02788                 RFCS
F2E1 9E1E             (        forth.asm):02789 (4)             ldx     BSBFADR
F2E3 BDE7C9           (        forth.asm):02790 (7)             jsr     NPUSH
F2E6 8E0400           (        forth.asm):02791 (3)             ldx     #BLKSIZ         Non-zero block size
F2E9 DC26             (        forth.asm):02792 (4)             ldd     UBLK
F2EB 2605             (        forth.asm):02793 (3)             bne     @srcdon         Current BLK is NZ
F2ED 4F               (        forth.asm):02794 (1)             clra
F2EE D631             (        forth.asm):02795 (3)             ldb     CMDLNSZ         Character count entered through GETS in INTERP
F2F0 1F01             (        forth.asm):02796 (4)             tfr     d,x
F2F2 7EE7C9           (        forth.asm):02797 (3)     @srcdon jmp     NPUSH
                      (        forth.asm):02798         
                      (        forth.asm):02799         * This is a straightforward implementation borrowed from GNU Forth 'see \':
                      (        forth.asm):02800         * : \
                      (        forth.asm):02801         *   BLK @
                      (        forth.asm):02802         *   IF     >IN @ C/L / 1+ C/L * >IN ! EXIT
                      (        forth.asm):02803         *   THEN
                      (        forth.asm):02804         *   SOURCE >IN ! DROP ; IMMEDIATE
                      (        forth.asm):02805         * However since C/L (number of columns per line) is 64 (a power of 2), things
                      (        forth.asm):02806         * can be coded in a more compact manner as: >IN @ 63 COM AND 64 + >IN !
F2F5 81               (        forth.asm):02807         BKSLSH  fcb     $81             ANSI (Block Ext)
F2F6 5C               (        forth.asm):02808                 fcb     $5C             \ ( -- )
F2F7 F2D7             (        forth.asm):02809                 fdb     SOURCE
F2F9 C7               (        forth.asm):02810                 RFCS
F2FA DC26             (        forth.asm):02811 (4)             ldd     UBLK            BLK @ to D
F2FC 270B             (        forth.asm):02812 (3)             beq     @comser         We operate from block 0: the console
F2FE DC24             (        forth.asm):02813 (4)             ldd     UTOIN           >IN @
F300 C4C0             (        forth.asm):02814 (2)             andb    #^$3F           Point to the beginning of the line
F302 CB40             (        forth.asm):02815 (2)             addb    #$40            next line
F304 8900             (        forth.asm):02816 (2)             adca    #0              Propagate potential carry from LSB
F306 DD24             (        forth.asm):02817 (4)             std     UTOIN           >IN !
F308 39               (        forth.asm):02818 (4)             rts                     EXIT
F309 8DD6             (        forth.asm):02819         @comser RFXT    bsr,SOURCE+9    XT for SOURCE
F30B BDE7D7           (        forth.asm):02820 (7)             jsr     NPOP
F30E 9F24             (        forth.asm):02821 (4)             stx     UTOIN           >IN !
F310 7EFBCC           (        forth.asm):02822                 RFXT    jmp,DROP+7      XT for DROP
                      (        forth.asm):02823                 ENDC
                      (        forth.asm):02824         
F313 82               (        forth.asm):02825         PSTR    fcb     $82             79-STANDARD (REQ133)
F314 2E22             (        forth.asm):02826                 fcc     '."'
F316 F2F5             (        forth.asm):02827                 fdb     BKSLSH
F318 C7               (        forth.asm):02828                 RFCS
F319 8D13             (        forth.asm):02829                 RFXT    bsr,SQUOTE+5    XT for S"
F31B 0D23             (        forth.asm):02830 (4)             tst     USTATE+1
F31D 2603             (        forth.asm):02831 (3)             bne     @pstcmp
F31F 7EF6DA           (        forth.asm):02832                 RFXT    jmp,TYPE+7      XT for TYPE
F322 8EF6DA           (        forth.asm):02833         @pstcmp RFXT    ldx,#TYPE+7     Emit TYPE as an XT
F325 7EE153           (        forth.asm):02834 (3)             jmp     EMXASXT
                      (        forth.asm):02835         
F328 82               (        forth.asm):02836         SQUOTE  fcb     $82             ANSI (Core)
F329 5322             (        forth.asm):02837                 fcc     'S"'
F32B F313             (        forth.asm):02838                 fdb     PSTR
F32D C7               (        forth.asm):02839                 RFCS
F32E 0D23             (        forth.asm):02840 (4)             tst     USTATE+1
F330 260C             (        forth.asm):02841 (3)             bne     @sqcmp
F332 8E0022           (        forth.asm):02842 (3)             ldx     #'"             We are interpreting
F335 BDE7C9           (        forth.asm):02843 (7)             jsr     NPUSH
F338 BDF280           (        forth.asm):02844                 RFXT    jsr,WORD+7      XT for WORD
F33B 7EF6F9           (        forth.asm):02845                 RFXT    jmp,COUNT+8     XT for COUNT
F33E 109E08           (        forth.asm):02846 (5)     @sqcmp  ldy     DICEND          We are compiling
F341 867E             (        forth.asm):02847 (2)             lda     #JMPOPC         JMP extended
F343 A7A0             (        forth.asm):02848 (4+1)           sta     ,y+
F345 3420             (        forth.asm):02849 (4+2)           pshs    y
F347 3122             (        forth.asm):02850 (4+1)           leay    2,y             2 ALLOT
F349 109F08           (        forth.asm):02851 (5)             sty     DICEND
F34C 8E0022           (        forth.asm):02852 (3)             ldx     #'"
F34F BDE7C9           (        forth.asm):02853 (7)             jsr     NPUSH
F352 BDF280           (        forth.asm):02854                 RFXT    jsr,WORD+7      XT for WORD
F355 BDE7D7           (        forth.asm):02855 (7)             jsr     NPOP
F358 4F               (        forth.asm):02856 (1)             clra
F359 E684             (        forth.asm):02857 (4+0)           ldb     ,x              C@
F35B 3001             (        forth.asm):02858 (4+1)           leax    1,x             1+. Skip the byte count (X has HERE)
F35D 308B             (        forth.asm):02859 (4+2)           leax    d,x             Skip string length material
F35F 3520             (        forth.asm):02860 (4+2)           puls    y
F361 AFA4             (        forth.asm):02861 (5+0)           stx     ,y              Install jump address
F363 3122             (        forth.asm):02862 (4+1)           leay    2,y             Counted string base address to Y
F365 868E             (        forth.asm):02863 (2)             lda     #LDXOPC
F367 A780             (        forth.asm):02864 (4+1)           sta     ,x+
F369 10AF81           (        forth.asm):02865 (6+2)           sty     ,x++
F36C 9F08             (        forth.asm):02866 (4)             stx     DICEND          Update HERE
F36E 8EE7C9           (        forth.asm):02867 (3)             ldx     #NPUSH
F371 BDE153           (        forth.asm):02868 (7)             jsr     EMXASXT
F374 8EF6F9           (        forth.asm):02869                 RFXT    ldx,#COUNT+8    XT for COUNT
F377 7EE153           (        forth.asm):02870 (3)             jmp     EMXASXT
                      (        forth.asm):02871         
                      (        forth.asm):02872         * Transactional behaviour is guaranteed here. What this means is that the
                      (        forth.asm):02873         * operation will preserve the data stack contents, should insufficient
                      (        forth.asm):02874         * parameters be supplied. It is a very desirable feature (for debugging
                      (        forth.asm):02875         * purposes) which will be generalized to a number of other words. As an
                      (        forth.asm):02876         * aside, it also allows us to access the data stack as directly indexed
                      (        forth.asm):02877         * through the 6309 U register, resulting in better performance.
F37A 02               (        forth.asm):02878         DPLUS   fcb     2               79-STANDARD (REQ241)
F37B 442B             (        forth.asm):02879                 fcc     'D+'            ( d1 d2 -- d1+d2--signed )
F37D F328             (        forth.asm):02880                 fdb     SQUOTE          In processor's terms U has ( L1 H1 L2 H2)
F37F C7               (        forth.asm):02881                 RFCS
F380 BDE47D           (        forth.asm):02882 (7)             jsr     MIN4PST         Make sure we have at least 4 cells stacked up
                      (        forth.asm):02883         * At this point sufficient stack depth has been assessed. Let's rock and roll!
F383 EC46             (        forth.asm):02884 (5+1)           ldd     6,u             L1
F385 E342             (        forth.asm):02885 (5+1)           addd    2,u             L2
F387 ED46             (        forth.asm):02886 (5+1)           std     6,u             d1+d2 least significant cell
F389 EC44             (        forth.asm):02887 (5+1)           ldd     4,u             H1
F38B 10A9C4           (        forth.asm):02888 (6+0)           adcd    ,u              H2 (add with carry bit)
F38E ED44             (        forth.asm):02889 (5+1)           std     4,u             d1+d2 most significant cell
F390 3344             (        forth.asm):02890 (4+1)           leau    4,u             Drop 2 cells from the data stack
F392 39               (        forth.asm):02891 (4)             rts
                      (        forth.asm):02892         
F393 07               (        forth.asm):02893         DNEG    fcb     7               79-STANDARD (REQ245)
F394 444E4547415445   (        forth.asm):02894                 fcc     'DNEGATE'
F39B F37A             (        forth.asm):02895                 fdb     DPLUS
F39D C7               (        forth.asm):02896                 RFCS
F39E BDE473           (        forth.asm):02897 (7)             jsr     MIN2PST         We need at least 2 cells stacked up
F3A1 10A642           (        forth.asm):02898 (6+1)           ldw     2,u             Least significant cell
F3A4 1053             (        forth.asm):02899 (2)             comw
F3A6 ECC4             (        forth.asm):02900 (5+0)           ldd     ,u              Most significant cell
F3A8 1043             (        forth.asm):02901 (2)             comd
F3AA 108B0001         (        forth.asm):02902 (4)             addw    #1
F3AE 10890000         (        forth.asm):02903 (4)             adcd    #0              Propagate carry flag
F3B2 10EDC4           (        forth.asm):02904 (8+0)           stq     ,u              Store the result back to the data stack
F3B5 39               (        forth.asm):02905 (4)             rts
                      (        forth.asm):02906         
F3B6 02               (        forth.asm):02907         DMINUS  fcb     2               79-STANDARD (double number extension)
F3B7 442D             (        forth.asm):02908                 fcc     'D-'            ( d1 d2 -- d1-d2--signed )
F3B9 F393             (        forth.asm):02909                 fdb     DNEG            In processor's terms U has ( L1 H1 L2 H2)
F3BB C7               (        forth.asm):02910                 RFCS
F3BC BDE47D           (        forth.asm):02911 (7)             jsr     MIN4PST         Make sure we have at least 4 cells stacked up
F3BF EC46             (        forth.asm):02912 (5+1)           ldd     6,u             L1
F3C1 A342             (        forth.asm):02913 (5+1)           subd    2,u             L2
F3C3 ED46             (        forth.asm):02914 (5+1)           std     6,u             d1-d2 least significant cell
F3C5 EC44             (        forth.asm):02915 (5+1)           ldd     4,u             H1
F3C7 10A2C4           (        forth.asm):02916 (6+0)           sbcd    ,u              H2 (substract with borrow)
F3CA ED44             (        forth.asm):02917 (5+1)           std     4,u             d1-d2 most significant cell
F3CC 3344             (        forth.asm):02918 (4+1)           leau    4,u
F3CE 39               (        forth.asm):02919 (4)             rts
                      (        forth.asm):02920         
F3CF 03               (        forth.asm):02921         DZEQ    fcb     3               79-STANDARD (double number extension)
F3D0 44303D           (        forth.asm):02922                 fcc     'D0='           ( d -- flag )
F3D3 F3B6             (        forth.asm):02923                 fdb     DMINUS
F3D5 C7               (        forth.asm):02924                 RFCS
F3D6 BDEE53           (        forth.asm):02925                 RFXT    jsr,OR+5        XT for OR
F3D9 7EEECD           (        forth.asm):02926                 RFXT    jmp,NULP+5      XT for 0=
                      (        forth.asm):02927         
                      (        forth.asm):02928         * GNU Forth has:
                      (        forth.asm):02929         * f = FLAG(d1.hi==d2.hi ? d1.lo<d2.lo : d1.hi<d2.hi);
                      (        forth.asm):02930         * Comparisons between high cells are signed, but they are unsigned between
                      (        forth.asm):02931         * the low cells.
F3DC 02               (        forth.asm):02932         DLESS   fcb     2               79-STANDARD (REQ244)
F3DD 443C             (        forth.asm):02933                 fcc     'D<'            ( d1 d2 -- flag )
F3DF F3CF             (        forth.asm):02934                 fdb     DZEQ
F3E1 C7               (        forth.asm):02935                 RFCS
F3E2 BDE47D           (        forth.asm):02936 (7)             jsr     MIN4PST
                      (        forth.asm):02937         * Data stack structure at this point:
                      (        forth.asm):02938         * ,u    d2.hi                   1 cell
                      (        forth.asm):02939         * 2,u   d2.lo                   1 cell
                      (        forth.asm):02940         * 4,u   d1.hi                   1 cell
                      (        forth.asm):02941         * 6,u   d1.lo                   1 cell
F3E5 115F             (        forth.asm):02942 (2)             clrf                    A priori return value for FLAG
F3E7 ECC4             (        forth.asm):02943 (5+0)           ldd     ,u              D2.HI
F3E9 10A344           (        forth.asm):02944 (6+1)           cmpd    4,u             D1.HI
F3EC 2611             (        forth.asm):02945 (3)             bne     @term2
F3EE EC42             (        forth.asm):02946 (5+1)           ldd     2,u             D2.LO
F3F0 10A346           (        forth.asm):02947 (6+1)           cmpd    6,u             D1.LO
F3F3 2302             (        forth.asm):02948 (3)             bls     @done
F3F5 115C             (        forth.asm):02949 (2)     @setto1 incf
F3F7 11E747           (        forth.asm):02950 (5+1)   @done   stf     7,u             FLAG's LSB
F3FA 6F46             (        forth.asm):02951 (6+1)           clr     6,u             FLAG's MSB
F3FC 3346             (        forth.asm):02952 (4+1)           leau    6,u             Drop three cells fron the data stack
F3FE 39               (        forth.asm):02953 (4)             rts
F3FF 2FF6             (        forth.asm):02954 (3)     @term2  ble     @done
F401 20F2             (        forth.asm):02955 (3)             bra     @setto1
                      (        forth.asm):02956         
F403 05               (        forth.asm):02957         TWOOVER fcb     5               79-STANDARD (double number extension)
F404 324F564552       (        forth.asm):02958                 fcc     '2OVER'         ( d1 d2 -- d1 d2 d1 )
F409 F3DC             (        forth.asm):02959                 fdb     DLESS
F40B C7               (        forth.asm):02960                 RFCS
F40C BDE47D           (        forth.asm):02961 (7)             jsr     MIN4PST         At least four cells need to be stacked up
F40F 10EC44           (        forth.asm):02962 (8+1)           ldq     4,u             D:W has MSC:LSC of D1
F412 1F61             (        forth.asm):02963 (4)             tfr     w,x
F414 BDE7C9           (        forth.asm):02964 (7)             jsr     NPUSH
F417 1F01             (        forth.asm):02965 (4)             tfr     d,x
F419 7EE7C9           (        forth.asm):02966 (3)             jmp     NPUSH
                      (        forth.asm):02967         
F41C 05               (        forth.asm):02968         TWOSWAP fcb     5               79-STANDARD (double number extension)
F41D 3253574150       (        forth.asm):02969                 fcc     '2SWAP'         ( d1 d2 -- d2 d1 )
F422 F403             (        forth.asm):02970                 fdb     TWOOVER
F424 C7               (        forth.asm):02971                 RFCS
F425 BDE47D           (        forth.asm):02972 (7)             jsr     MIN4PST         At least four cells must be stacked up
F428 AE44             (        forth.asm):02973 (5+1)           ldx     4,u             D1 most significant cell
F42A 10AE46           (        forth.asm):02974 (6+1)           ldy     6,u             D1 least significant cell
F42D 10ECC4           (        forth.asm):02975 (8+0)           ldq     ,u              D:W has MSC:LSC of D2
F430 10ED44           (        forth.asm):02976 (8+1)           stq     4,u
F433 AFC4             (        forth.asm):02977 (5+0)           stx     ,u
F435 10AF42           (        forth.asm):02978 (6+1)           sty     2,u
F438 39               (        forth.asm):02979 (4)             rts
                      (        forth.asm):02980         
F439 05               (        forth.asm):02981         TWODROP fcb     5               79-STANDARD (double number extension)
F43A 3244524F50       (        forth.asm):02982                 fcc     '2DROP'         ( d -- )
F43F F41C             (        forth.asm):02983                 fdb     TWOSWAP
F441 C7               (        forth.asm):02984                 RFCS
F442 BDE473           (        forth.asm):02985 (7)             jsr     MIN2PST         At least two cells must be stacked up
F445 3344             (        forth.asm):02986 (4+1)           leau    4,u
F447 39               (        forth.asm):02987 (4)             rts
                      (        forth.asm):02988         
F448 04               (        forth.asm):02989         TWODUP  fcb     4               79-STANDARD (double number extension)
F449 32445550         (        forth.asm):02990                 fcc     '2DUP'          ( double -- double double )
F44D F439             (        forth.asm):02991                 fdb     TWODROP
F44F C7               (        forth.asm):02992                 RFCS
F450 BDE473           (        forth.asm):02993 (7)             jsr     MIN2PST         At least two cells need to be stacked up
F453 10ECC4           (        forth.asm):02994 (8+0)           ldq     ,u              D:W has MSC:LSC of DOUBLE
F456 1F61             (        forth.asm):02995 (4)             tfr     w,x
F458 BDE7C9           (        forth.asm):02996 (7)             jsr     NPUSH
F45B 1F01             (        forth.asm):02997 (4)             tfr     d,x
F45D 7EE7C9           (        forth.asm):02998 (3)             jmp     NPUSH
                      (        forth.asm):02999         
F460 02               (        forth.asm):03000         TWOSTOR fcb     2               79-STANDARD (double number extension)
F461 3221             (        forth.asm):03001                 fcc     '2!'            ( double addr -- )
F463 F448             (        forth.asm):03002                 fdb     TWODUP
F465 C7               (        forth.asm):03003                 RFCS
F466 BDE478           (        forth.asm):03004 (7)             jsr     MIN3PST         At least three cells need to be stacked up
F469 10EC42           (        forth.asm):03005 (8+1)           ldq     2,u             DOUBLE to D:W
F46C 10EDD4           (        forth.asm):03006 (8+3)           stq     [,u]            Store DOUBLE to ADDR
F46F 3346             (        forth.asm):03007 (4+1)           leau    6,u             Drop three cells from the user stack
F471 39               (        forth.asm):03008 (4)             rts
                      (        forth.asm):03009         
F472 02               (        forth.asm):03010         TWOFTCH fcb     2               79-STANDARD (double number extension)
F473 3240             (        forth.asm):03011                 fcc     '2@'            ( dbladdr -- double )
F475 F460             (        forth.asm):03012                 fdb     TWOSTOR
F477 C7               (        forth.asm):03013                 RFCS
F478 BDE46E           (        forth.asm):03014 (7)             jsr     MIN1PST         At least cell needs to be stacked up
F47B 10ECD4           (        forth.asm):03015 (8+3)           ldq     [,u]            D:W has MSC:LSC of DBLADDR @
F47E 10A7C4           (        forth.asm):03016 (6+0)           stw     ,u              Least significant cell stacked in place
F481 1F01             (        forth.asm):03017 (4)             tfr     d,x             Most significant cell goes through standard push
F483 7EE7C9           (        forth.asm):03018 (3)             jmp     NPUSH
                      (        forth.asm):03019         
F486 07               (        forth.asm):03020         CONVERT fcb     7               79-STANDARD (REQ195)
F487 434F4E56455254   (        forth.asm):03021                 fcc     'CONVERT'       ( d1 addr1 -- d2 addr2 )
F48E F472             (        forth.asm):03022                 fdb     TWOFTCH
F490 C7               (        forth.asm):03023                 RFCS
F491 BDE478           (        forth.asm):03024 (7)             jsr     MIN3PST         At least 3 cells need to be stacked up
F494 BDE3B2           (        forth.asm):03025 (7)             jsr     CKBASE          Check for supported BASE. No return if not
F497 AEC4             (        forth.asm):03026 (5+0)           ldx     ,u              ADDR1 to X
F499 3001             (        forth.asm):03027 (4+1)   @cvloop leax    1,x
F49B E684             (        forth.asm):03028 (4+0)           ldb     ,x
                      (        forth.asm):03029         * B has the ASCII representation of something that may or may not be a valid
                      (        forth.asm):03030         * digit, expressed in BASE (alias (byte)UBASE+1). If it does, multiply D1 by
                      (        forth.asm):03031         * BASE and add that to D1 (aka D2 on exit). Then add DIGIT on the top of it.
F49D C030             (        forth.asm):03032 (2)             subb    #'0             Minimal ASCII value condition met?
F49F 255B             (        forth.asm):03033 (3)             blo     @cvoor          No. Out of range. ,X cannot be a valid digit
F4A1 C10A             (        forth.asm):03034 (2)             cmpb    #10
F4A3 2510             (        forth.asm):03035 (3)             blo     @cvnolt         No letter in potential BASE
                      (        forth.asm):03036                 IFEQ    CSSNTVE
F4A5 C111             (        forth.asm):03037 (2)             cmpb    #'A-'0
F4A7 2553             (        forth.asm):03038 (3)             blo     @cvoor          Greater than 9 but lower than A
F4A9 C131             (        forth.asm):03039 (2)             cmpb    #'a-'0
F4AB 2506             (        forth.asm):03040 (3)             blo     @cvisuc         Upper case already
F4AD C14A             (        forth.asm):03041 (2)             cmpb    #'z-'0
F4AF 224B             (        forth.asm):03042 (3)             bhi     @cvoor          Definitely out of range
F4B1 C020             (        forth.asm):03043 (2)             subb    #'a-'A          To upper case
                      (        forth.asm):03044                 ENDC                    CSSNTVE
F4B3 C007             (        forth.asm):03045 (2)     @cvisuc subb    #'A-':          A-Z to number
F4B5 D121             (        forth.asm):03046 (3)     @cvnolt cmpb    UBASE+1         B has a digit. Make sure it's less than BASE
F4B7 2443             (        forth.asm):03047 (3)             bhs     @cvoor          Number under scrutiny is >= BASE
F4B9 3278             (        forth.asm):03048 (4+1)           leas    -8,s            Allocate scratch space
F4BB 4F               (        forth.asm):03049 (1)             clra
F4BC 3406             (        forth.asm):03050 (4+2)           pshs    d
                      (        forth.asm):03051         * System and user stack structures are as follows:
                      (        forth.asm):03052         * ,s    current digit (1 cell)
                      (        forth.asm):03053         * 2,s   D0*B (1 cell)
                      (        forth.asm):03054         * 4,s   D1*B (1 cell)
                      (        forth.asm):03055         * 6,s   D2*B (1 cell)
                      (        forth.asm):03056         * 8,s   D3*B (1 cell)
                      (        forth.asm):03057         * 2,u   D1H most significant cell
                      (        forth.asm):03058         * 4,u   D1L least significant cell
F4BE 1F37             (        forth.asm):03059 (4)             tfr     u,v             Backup U
F4C0 3346             (        forth.asm):03060 (4+1)           leau    6,u             Point one byte after D1LL
F4C2 3162             (        forth.asm):03061 (4+1)           leay    2,s             Point to D0*B
F4C4 118604           (        forth.asm):03062 (3)             lde     #4              Four products to go through
F4C7 A6C2             (        forth.asm):03063 (4+1)   @cvmul  lda     ,-u
F4C9 D621             (        forth.asm):03064 (3)             ldb     UBASE+1
F4CB 3D               (        forth.asm):03065 (10)            mul
F4CC EDA1             (        forth.asm):03066 (5+2)           std     ,y++
F4CE 114A             (        forth.asm):03067 (2)             dece
F4D0 26F5             (        forth.asm):03068 (3)             bne     @cvmul
F4D2 1F73             (        forth.asm):03069 (4)             tfr     v,u             Restore U
F4D4 A663             (        forth.asm):03070 (4+1)           lda     3,s
F4D6 A745             (        forth.asm):03071 (4+1)           sta     5,u             D1LL
F4D8 A662             (        forth.asm):03072 (4+1)           lda     2,s
F4DA AB65             (        forth.asm):03073 (4+1)           adda    5,s
F4DC A744             (        forth.asm):03074 (4+1)           sta     4,u             D1LH
F4DE A664             (        forth.asm):03075 (4+1)           lda     4,s
F4E0 A967             (        forth.asm):03076 (4+1)           adca    7,s
F4E2 A743             (        forth.asm):03077 (4+1)           sta     3,u             D1HL
F4E4 A666             (        forth.asm):03078 (4+1)           lda     6,s
F4E6 A969             (        forth.asm):03079 (4+1)           adca    9,s
F4E8 A742             (        forth.asm):03080 (4+1)           sta     2,u             D1HH
F4EA EC44             (        forth.asm):03081 (5+1)           ldd     4,u             D1L
F4EC E3E4             (        forth.asm):03082 (5+0)           addd    ,s              DIGIT
F4EE ED44             (        forth.asm):03083 (5+1)           std     4,u
F4F0 EC42             (        forth.asm):03084 (5+1)           ldd     2,u             D1H
F4F2 10890000         (        forth.asm):03085 (4)             adcd    #0              Potential carry from lower cell
F4F6 ED42             (        forth.asm):03086 (5+1)           std     2,u
F4F8 326A             (        forth.asm):03087 (4+1)           leas    10,s            Release scratch space
F4FA 209D             (        forth.asm):03088 (3)             bra     @cvloop         Here we go again
F4FC AFC4             (        forth.asm):03089 (5+0)   @cvoor  stx     ,u              Update ADDR2
F4FE 39               (        forth.asm):03090 (4)             rts
                      (        forth.asm):03091         
F4FF 02               (        forth.asm):03092         CVTE    fcb     2
F500 233E             (        forth.asm):03093                 fcc     '#>'
F502 F486             (        forth.asm):03094                 fdb     CONVERT
F504 C7               (        forth.asm):03095                 RFCS
F505 BDE7D7           (        forth.asm):03096 (7)             jsr     NPOP
F508 BDE7D7           (        forth.asm):03097 (7)             jsr     NPOP            Drop 2 cells from the data stack
F50B 8E0186           (        forth.asm):03098 (3)             ldx     #PADBUF
F50E 3610             (        forth.asm):03099                 UCNPUSH
F510 BDE231           (        forth.asm):03100 (7)             jsr     SLEN
F513 1F61             (        forth.asm):03101 (4)             tfr     w,x
F515 3610             (        forth.asm):03102                 UCNPUSH
F517 39               (        forth.asm):03103 (4)             rts
                      (        forth.asm):03104         
F518 04               (        forth.asm):03105         SIGN    fcb     4
F519 5349474E         (        forth.asm):03106                 fcc     'SIGN'
F51D F4FF             (        forth.asm):03107                 fdb     CVTE
F51F C7               (        forth.asm):03108                 RFCS
F520 BDE7D7           (        forth.asm):03109 (7)             jsr     NPOP
F523 1F10             (        forth.asm):03110 (4)             tfr     x,d
F525 104D             (        forth.asm):03111 (2)             tstd
F527 2C05             (        forth.asm):03112 (3)             bge     @sign1
F529 C62D             (        forth.asm):03113 (2)             ldb     #'-
F52B 7EF5E7           (        forth.asm):03114 (3)             jmp     INSBPAD
F52E 39               (        forth.asm):03115 (4)     @sign1  rts
                      (        forth.asm):03116         
F52F 04               (        forth.asm):03117         HOLD    fcb     4
F530 484F4C44         (        forth.asm):03118                 fcc     'HOLD'
F534 F518             (        forth.asm):03119                 fdb     SIGN
F536 C7               (        forth.asm):03120                 RFCS
F537 BDE7D7           (        forth.asm):03121 (7)             jsr     NPOP
F53A 1F10             (        forth.asm):03122 (4)             tfr     x,d
F53C 7EF5E7           (        forth.asm):03123 (3)             jmp     INSBPAD         B is inserted at the beginning of PAD.
                      (        forth.asm):03124         
F53F 02               (        forth.asm):03125         SHARPS  fcb     2
F540 2353             (        forth.asm):03126                 fcc     '#S'
F542 F52F             (        forth.asm):03127                 fdb     HOLD
F544 C7               (        forth.asm):03128                 RFCS
F545 8601             (        forth.asm):03129 (2)             lda     #1
F547 9736             (        forth.asm):03130 (3)             sta     CVTFCN          CVT function #1 is #S
F549 2007             (        forth.asm):03131 (3)             bra     CVT0
                      (        forth.asm):03132         
                      (        forth.asm):03133         * Unsigned double on the top of the data stack gets divided by BASE.
                      (        forth.asm):03134         * The division algorithm implemented here is the binary long division.
                      (        forth.asm):03135         * See https://en.wikipedia.org/wiki/Division_algorithm for more information.
                      (        forth.asm):03136         * Remainder (converted to a character) gets prepended to PAD.
F54B 01               (        forth.asm):03137         CVT     fcb     1
F54C 23               (        forth.asm):03138                 fcc     '#'
F54D F53F             (        forth.asm):03139                 fdb     SHARPS
F54F C7               (        forth.asm):03140                 RFCS
F550 0F36             (        forth.asm):03141 (5)             clr     CVTFCN          CVT function 0 is #
F552 BDE7D7           (        forth.asm):03142 (7)     CVT0    jsr     NPOP
F555 1F16             (        forth.asm):03143 (4)             tfr     x,w
F557 BDE7D7           (        forth.asm):03144 (7)             jsr     NPOP
F55A 3410             (        forth.asm):03145 (4+2)   CVT1    pshs    x               Numerator least significant cell
F55C 1038             (        forth.asm):03146 (6)             pshsw                   Numerator most significant cell
F55E 104F             (        forth.asm):03147 (2)             clrd
F560 3406             (        forth.asm):03148 (4+2)           pshs    d               Quotient low
F562 3406             (        forth.asm):03149 (4+2)           pshs    d               Quotient high
F564 3406             (        forth.asm):03150 (4+2)           pshs    d               Bitmask low
F566 10868000         (        forth.asm):03151 (4)             ldw     #$8000          Bitmask high
F56A 1038             (        forth.asm):03152 (6)             pshsw
F56C 3406             (        forth.asm):03153 (4+2)           pshs    d
                      (        forth.asm):03154         * Stack structure:
                      (        forth.asm):03155         * 1,s   remainder               8 bits (high order byte is zero and unused)
                      (        forth.asm):03156         * 2,s   Bitmask high            16 bits
                      (        forth.asm):03157         * 4,s   Bitmask low             16 bits
                      (        forth.asm):03158         * 6,s   Quotient high           16 bits
                      (        forth.asm):03159         * 8,s   Quotient low            16 bits
                      (        forth.asm):03160         * 10,s  Numerator high          16 bits
                      (        forth.asm):03161         * 12,s  Numerator low           16 bits
                      (        forth.asm):03162         * Denominator is at UBASE+1     8 bits
F56E 11C61F           (        forth.asm):03163 (3)             ldf     #31             32 bits to go
F571 6861             (        forth.asm):03164 (6+1)   @cvt1   lsl     1,s             R := R << 1
                      (        forth.asm):03165         * We need to extract bit <f> from the numerator.
F573 306A             (        forth.asm):03166 (4+1)           leax    10,s            Numerator MSB address
F575 1FF8             (        forth.asm):03167 (4)             tfr     f,a             Not to alter the stack structure
F577 44               (        forth.asm):03168 (1)             lsra                    OffsetX: 3 - F >> 3
F578 44               (        forth.asm):03169 (1)             lsra
F579 44               (        forth.asm):03170 (1)             lsra
F57A C603             (        forth.asm):03171 (2)             ldb     #3
F57C 103289           (        forth.asm):03172 (4)             subr    a,b
F57F A685             (        forth.asm):03173 (4+1)           lda     b,x
F581 1FF9             (        forth.asm):03174 (4)             tfr     f,b             Bitno: F & 7
F583 C407             (        forth.asm):03175 (2)             andb    #7
                      (        forth.asm):03176         * At this point, A has the data we're interested in. B has the bit number.
F585 5D               (        forth.asm):03177 (1)     @cvtex  tstb
F586 2704             (        forth.asm):03178 (3)             beq     @cvtfnd         Bit 0 of A has the data
F588 44               (        forth.asm):03179 (1)             lsra
F589 5A               (        forth.asm):03180 (1)             decb
F58A 20F9             (        forth.asm):03181 (3)             bra     @cvtex
F58C 8401             (        forth.asm):03182 (2)     @cvtfnd anda    #1
F58E AA61             (        forth.asm):03183 (4+1)           ora     1,s             R(0) := N(i)
F590 A761             (        forth.asm):03184 (4+1)           sta     1,s             Update the remainder
F592 9121             (        forth.asm):03185 (3)             cmpa    UBASE+1
F594 2512             (        forth.asm):03186 (3)             blo     @cvt5
F596 9021             (        forth.asm):03187 (3)             suba    UBASE+1
F598 A761             (        forth.asm):03188 (4+1)           sta     1,s             R := R - D
                      (        forth.asm):03189         * Q(i) := 1 (use the bitmask).
F59A EC66             (        forth.asm):03190 (5+1)           ldd     6,s             Quotient high
F59C 10AA62           (        forth.asm):03191 (6+1)           ord     2,s             Bitmask high
F59F ED66             (        forth.asm):03192 (5+1)           std     6,s
F5A1 EC68             (        forth.asm):03193 (5+1)           ldd     8,s             Quotient low
F5A3 10AA64           (        forth.asm):03194 (6+1)           ord     4,s             Bitmask low
F5A6 ED68             (        forth.asm):03195 (5+1)           std     8,s
                      (        forth.asm):03196         * Shift the bitmask 1 bit right.
F5A8 EC62             (        forth.asm):03197 (5+1)   @cvt5   ldd     2,s
F5AA 1044             (        forth.asm):03198 (2)             lsrd
F5AC ED62             (        forth.asm):03199 (5+1)           std     2,s
F5AE EC64             (        forth.asm):03200 (5+1)           ldd     4,s
F5B0 1046             (        forth.asm):03201 (2)             rord
F5B2 ED64             (        forth.asm):03202 (5+1)           std     4,s
F5B4 115A             (        forth.asm):03203 (2)             decf
F5B6 2CB9             (        forth.asm):03204 (3)             bge     @cvt1
                      (        forth.asm):03205         * Convert the remainder to a digit expressed in BASE.
F5B8 E661             (        forth.asm):03206 (4+1)           ldb     1,s
F5BA 8630             (        forth.asm):03207 (2)             lda     #'0
F5BC C10A             (        forth.asm):03208 (2)             cmpb    #10             B has the digit we want converted to BASE
F5BE 2502             (        forth.asm):03209 (3)             bcs     @cvtdgt
F5C0 8637             (        forth.asm):03210 (2)             lda     #'A-10
F5C2 103089           (        forth.asm):03211 (4)     @cvtdgt addr    a,b
F5C5 8D20             (        forth.asm):03212 (6)             bsr     INSBPAD         Prepend B to the string currently in PAD
F5C7 0D36             (        forth.asm):03213 (4)             tst     CVTFCN
F5C9 2711             (        forth.asm):03214 (3)             beq     @cvtend         Function 0 is straight #, i.e. we're done here
                      (        forth.asm):03215         * Function 1 is #S, we iterate unless the quotient is 0.
F5CB EC68             (        forth.asm):03216 (5+1)           ldd     8,s
F5CD 10AA66           (        forth.asm):03217 (6+1)           ord     6,s
F5D0 270A             (        forth.asm):03218 (3)             beq     @cvtend
F5D2 AE68             (        forth.asm):03219 (5+1)           ldx     8,s             New numerator low
F5D4 10A666           (        forth.asm):03220 (6+1)           ldw     6,s             New numerator high
F5D7 326E             (        forth.asm):03221 (4+1)           leas    14,s            Discard the stack frame
F5D9 7EF55A           (        forth.asm):03222 (3)             jmp     CVT1            And go at it again
                      (        forth.asm):03223         * Push back the quotient on the data stack (low then high cell).
F5DC AE68             (        forth.asm):03224 (5+1)   @cvtend ldx     8,s
F5DE 3610             (        forth.asm):03225                 UCNPUSH
F5E0 AE66             (        forth.asm):03226 (5+1)           ldx     6,s
F5E2 326E             (        forth.asm):03227 (4+1)           leas    14,s            Discard the stack frame
F5E4 3610             (        forth.asm):03228                 UCNPUSH
F5E6 39               (        forth.asm):03229 (4)             rts
                      (        forth.asm):03230         
                      (        forth.asm):03231         * Insert the character in B in front of the string at PADBUF.
F5E7 8E0186           (        forth.asm):03232 (3)     INSBPAD ldx     #PADBUF
F5EA BDE231           (        forth.asm):03233 (7)             jsr     SLEN
F5ED 103061           (        forth.asm):03234 (4)             addr    w,x             X points to the PAD string's NUL terminator
F5F0 105C             (        forth.asm):03235 (2)             incw                    Include the terminator
F5F2 3101             (        forth.asm):03236 (4+1)           leay    1,x
F5F4 113912           (        forth.asm):03237 (6+?)           tfm     x-,y-
F5F7 D786             (        forth.asm):03238 (3)             stb     PADBUF
F5F9 39               (        forth.asm):03239 (4)             rts
                      (        forth.asm):03240         
F5FA 02               (        forth.asm):03241         CVTB    fcb     2
F5FB 3C23             (        forth.asm):03242                 fcc     '<#'
F5FD F54B             (        forth.asm):03243                 fdb     CVT
F5FF C7               (        forth.asm):03244                 RFCS
F600 BDE3B2           (        forth.asm):03245 (7)             jsr     CKBASE          Sanity check. BASE can be altered at any time
F603 0F86             (        forth.asm):03246 (5)             clr     PADBUF
F605 39               (        forth.asm):03247 (4)             rts
                      (        forth.asm):03248         
F606 01               (        forth.asm):03249         DOT     fcb     1               79-STANDARD (REQ193)
F607 2E               (        forth.asm):03250                 fcc     '.'
F608 F5FA             (        forth.asm):03251                 fdb     CVTB
F60A C7               (        forth.asm):03252                 RFCS
F60B 8601             (        forth.asm):03253 (2)             lda     #1
F60D 9739             (        forth.asm):03254 (3)             sta     CVISSGN         Force a signed number conversion
F60F BDE7D7           (        forth.asm):03255 (7)     PTOP0   jsr     NPOP
F612 BDE41A           (        forth.asm):03256 (7)             jsr     CVNSTR
F615 8E03EC           (        forth.asm):03257 (3)             ldx     #TBUFF
F618 8620             (        forth.asm):03258 (2)             lda     #SP
F61A A180             (        forth.asm):03259 (4+1)   @ptop1  cmpa    ,x+             Skip leading spaces
F61C 27FC             (        forth.asm):03260 (3)             beq     @ptop1
F61E 301F             (        forth.asm):03261 (4+1)           leax    -1,x            Point to actual string start address
F620 BDE2DE           (        forth.asm):03262 (7)             jsr     PUTS
F623 7EE2CB           (        forth.asm):03263 (3)             jmp     PUTCH           Extra space after printing a number
                      (        forth.asm):03264         
F626 02               (        forth.asm):03265         UDOT    fcb     2               79-STANDARD (REQ106)
F627 552E             (        forth.asm):03266                 fcc     'U.'
F629 F606             (        forth.asm):03267                 fdb     DOT
F62B C7               (        forth.asm):03268                 RFCS
F62C 0F39             (        forth.asm):03269 (5)             clr     CVISSGN         Conversion is unsigned
F62E 20DF             (        forth.asm):03270 (3)             bra     PTOP0
                      (        forth.asm):03271         
F630 02               (        forth.asm):03272         DOTR    fcb     2               79-STANDARD (REF)
F631 2E52             (        forth.asm):03273                 fcc     '.R'
F633 F626             (        forth.asm):03274                 fdb     UDOT
F635 C7               (        forth.asm):03275                 RFCS
F636 8601             (        forth.asm):03276 (2)             lda     #1
F638 9739             (        forth.asm):03277 (3)             sta     CVISSGN
F63A BDE7D7           (        forth.asm):03278 (7)     DOTR0   jsr     NPOP
F63D 3410             (        forth.asm):03279 (4+2)           pshs    x               Length parameter value
F63F BDE7D7           (        forth.asm):03280 (7)             jsr     NPOP
F642 BDE41A           (        forth.asm):03281 (7)             jsr     CVNSTR
F645 8E03EC           (        forth.asm):03282 (3)             ldx     #TBUFF
F648 8620             (        forth.asm):03283 (2)             lda     #SP
F64A A180             (        forth.asm):03284 (4+1)   @dotr1  cmpa    ,x+
F64C 27FC             (        forth.asm):03285 (3)             beq     @dotr1          Skip leading spaces
F64E 301F             (        forth.asm):03286 (4+1)           leax    -1,x
F650 BDE231           (        forth.asm):03287 (7)             jsr     SLEN            String length is returned in W
F653 3506             (        forth.asm):03288 (4+2)           puls    d
F655 1E06             (        forth.asm):03289 (5)             exg     d,w
F657 103206           (        forth.asm):03290 (4)             subr    d,w
F65A 2F0D             (        forth.asm):03291 (3)             ble     @dotr3
F65C 8620             (        forth.asm):03292 (2)             lda     #SP
F65E 105D             (        forth.asm):03293 (2)     @dotr2  tstw
F660 2707             (        forth.asm):03294 (3)             beq     @dotr3
F662 BDE2CB           (        forth.asm):03295 (7)             jsr     PUTCH
F665 105A             (        forth.asm):03296 (2)             decw
F667 20F5             (        forth.asm):03297 (3)             bra     @dotr2
F669 7EE2DE           (        forth.asm):03298 (3)     @dotr3  jmp     PUTS
                      (        forth.asm):03299         
F66C 03               (        forth.asm):03300         UDOTR   fcb     3               79-STANDARD (REF216)
F66D 552E52           (        forth.asm):03301                 fcc     'U.R'
F670 F630             (        forth.asm):03302                 fdb     DOTR
F672 C7               (        forth.asm):03303                 RFCS
F673 0F39             (        forth.asm):03304 (5)             clr     CVISSGN
F675 20C3             (        forth.asm):03305 (3)             bra     DOTR0
                      (        forth.asm):03306         
F677 02               (        forth.asm):03307         BL      fcb     2               79-STANDARD (REF176)
F678 424C             (        forth.asm):03308                 fcc     'BL'
F67A F66C             (        forth.asm):03309                 fdb     UDOTR
F67C C7               (        forth.asm):03310                 RFCS
F67D 8E0020           (        forth.asm):03311 (3)             ldx     #SP
F680 7EE7C9           (        forth.asm):03312 (3)             jmp     NPUSH
                      (        forth.asm):03313         
F683 05               (        forth.asm):03314         SPACE   fcb     5               79-STANDARD (REQ232)
F684 5350414345       (        forth.asm):03315                 fcc     'SPACE'
F689 F677             (        forth.asm):03316                 fdb     BL
F68B C7               (        forth.asm):03317                 RFCS
F68C 8620             (        forth.asm):03318 (2)             lda     #SP
F68E 7EE2CB           (        forth.asm):03319 (3)             jmp     PUTCH
                      (        forth.asm):03320         
F691 06               (        forth.asm):03321         SPACES  fcb     6               79-STANDARD (REQ231)
F692 535041434553     (        forth.asm):03322                 fcc     'SPACES'
F698 F683             (        forth.asm):03323                 fdb     SPACE
F69A C7               (        forth.asm):03324                 RFCS
F69B BDE7D7           (        forth.asm):03325 (7)             jsr     NPOP
F69E 1F16             (        forth.asm):03326 (4)             tfr     x,w
F6A0 105D             (        forth.asm):03327 (2)             tstw
F6A2 2709             (        forth.asm):03328 (3)             beq     @spcs2
F6A4 8620             (        forth.asm):03329 (2)             lda     #SP
F6A6 BDE2CB           (        forth.asm):03330 (7)     @spcs1  jsr     PUTCH
F6A9 105A             (        forth.asm):03331 (2)             decw
F6AB 26F9             (        forth.asm):03332 (3)             bne     @spcs1
F6AD 39               (        forth.asm):03333 (4)     @spcs2  rts
                      (        forth.asm):03334         
F6AE 04               (        forth.asm):03335         PAGE    fcb     4               79-STANDARD (REF)
F6AF 50414745         (        forth.asm):03336                 fcc     'PAGE'
F6B3 F691             (        forth.asm):03337                 fdb     SPACES
F6B5 C7               (        forth.asm):03338                 RFCS
F6B6 8EFDB4           (        forth.asm):03339 (3)             ldx     #CSVT100
F6B9 7EE2DE           (        forth.asm):03340 (3)             jmp     PUTS
                      (        forth.asm):03341         
F6BC 02               (        forth.asm):03342         CRLF    fcb     2               79-STANDARD (REQ160)
F6BD 4352             (        forth.asm):03343                 fcc     'CR'
F6BF F6AE             (        forth.asm):03344                 fdb     PAGE
F6C1 C7               (        forth.asm):03345                 RFCS
F6C2 7EE2EB           (        forth.asm):03346 (3)             jmp     PUTCR
                      (        forth.asm):03347         
F6C5 03               (        forth.asm):03348         PAD     fcb     3               79-STANDARD (REQ226)
F6C6 504144           (        forth.asm):03349                 fcc     'PAD'
F6C9 F6BC             (        forth.asm):03350                 fdb     CRLF
F6CB C7               (        forth.asm):03351                 RFCS
F6CC 8E0186           (        forth.asm):03352 (3)             ldx     #PADBUF
F6CF 7EE7C9           (        forth.asm):03353 (3)             jmp     NPUSH
                      (        forth.asm):03354         
F6D2 04               (        forth.asm):03355         TYPE    fcb     4               79-STANDARD (REQ222)
F6D3 54595045         (        forth.asm):03356                 fcc     'TYPE'          ( addr bcount -- )
F6D7 F6C5             (        forth.asm):03357                 fdb     PAD
F6D9 C7               (        forth.asm):03358                 RFCS
F6DA BDE7D7           (        forth.asm):03359 (7)             jsr     NPOP            Character count (signed)
F6DD 1F16             (        forth.asm):03360 (4)             tfr     x,w
F6DF BDE7D7           (        forth.asm):03361 (7)             jsr     NPOP            Buffer address
F6E2 105D             (        forth.asm):03362 (2)             tstw                    
F6E4 2E01             (        forth.asm):03363 (3)     @type0  bgt     @type1
F6E6 39               (        forth.asm):03364 (4)             rts
F6E7 A680             (        forth.asm):03365 (4+1)   @type1  lda     ,x+
F6E9 BDE2CB           (        forth.asm):03366 (7)             jsr     PUTCH
F6EC 105A             (        forth.asm):03367 (2)             decw
F6EE 20F4             (        forth.asm):03368 (3)             bra     @type0
                      (        forth.asm):03369         
F6F0 05               (        forth.asm):03370         COUNT   fcb     5               79-STANDARD (REQ159)
F6F1 434F554E54       (        forth.asm):03371                 fcc     'COUNT'
F6F6 F6D2             (        forth.asm):03372                 fdb     TYPE
F6F8 C7               (        forth.asm):03373                 RFCS
F6F9 BDE7D7           (        forth.asm):03374 (7)             jsr     NPOP
F6FC E680             (        forth.asm):03375 (4+1)           ldb     ,x+
F6FE 3610             (        forth.asm):03376                 UCNPUSH                 B is preserved
F700 4F               (        forth.asm):03377 (1)             clra
F701 1F01             (        forth.asm):03378 (4)             tfr     d,x
F703 7EE7C9           (        forth.asm):03379 (3)             jmp     NPUSH
                      (        forth.asm):03380         
F706 09               (        forth.asm):03381         DASHTR  fcb     9               79-STANDARD (REQ148)
F707 2D545241494C494E (        forth.asm):03382                 fcc     '-TRAILING'     ( addr n1 -- addr n2 )
     47
F710 F6F0             (        forth.asm):03383                 fdb     COUNT
F712 C7               (        forth.asm):03384                 RFCS
F713 BDE7D7           (        forth.asm):03385 (7)             jsr     NPOP            N1 to X
F716 1F10             (        forth.asm):03386 (4)             tfr     x,d             N1 to D
F718 BDE7D7           (        forth.asm):03387 (7)             jsr     NPOP            ADDR to X
F71B 1F12             (        forth.asm):03388 (4)             tfr     x,y             Backup to I
F71D 104D             (        forth.asm):03389 (2)             tstd                    Input character count (N1)
F71F 2D1B             (        forth.asm):03390 (3)             blt     @invpar         Cannot be < 0
F721 308B             (        forth.asm):03391 (4+2)           leax    d,x             X has ADDR+N1
F723 1F06             (        forth.asm):03392 (4)             tfr     d,w             W has N1
F725 105D             (        forth.asm):03393 (2)     @cknxtb tstw
F727 270A             (        forth.asm):03394 (3)             beq     @ckdone
F729 A682             (        forth.asm):03395 (4+1)           lda     ,-x
F72B 105A             (        forth.asm):03396 (2)             decw
F72D 8120             (        forth.asm):03397 (2)             cmpa    #SP
F72F 27F4             (        forth.asm):03398 (3)             beq     @cknxtb         Iterate over to the previous byte
F731 105C             (        forth.asm):03399 (2)             incw
F733 1F21             (        forth.asm):03400 (4)     @ckdone tfr     y,x
F735 3610             (        forth.asm):03401                 UCNPUSH                 String base address
F737 1F61             (        forth.asm):03402 (4)             tfr     w,x
F739 3610             (        forth.asm):03403                 UCNPUSH                 Updated character count
F73B 39               (        forth.asm):03404 (4)             rts
F73C C60D             (        forth.asm):03405 (2)     @invpar ldb     #13             Invalid parameter
F73E BDE73F           (        forth.asm):03406 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):03407         
F741 06               (        forth.asm):03408         EXPECT  fcb     6               79-STANDARD (REQ189)
F742 455850454354     (        forth.asm):03409                 fcc     'EXPECT'        ( addr count -- )
F748 F706             (        forth.asm):03410                 fdb     DASHTR
F74A C7               (        forth.asm):03411                 RFCS
F74B BDE7D7           (        forth.asm):03412 (7)     EXPCT1  jsr     NPOP
F74E 1F10             (        forth.asm):03413 (4)             tfr     x,d             Buffer length to B
F750 BDE7D7           (        forth.asm):03414 (7)             jsr     NPOP            Buffer address to X. B is preserved
F753 5D               (        forth.asm):03415 (1)             tstb
F754 2701             (        forth.asm):03416 (3)             beq     @expct1
F756 5C               (        forth.asm):03417 (1)             incb                    Account for the NUL terminator
F757 7EE301           (        forth.asm):03418 (3)     @expct1 jmp     GETS
                      (        forth.asm):03419         
F75A 06               (        forth.asm):03420         ACCEPT  fcb     6               ANSI (Core)
F75B 414343455054     (        forth.asm):03421                 fcc     'ACCEPT'
F761 F741             (        forth.asm):03422                 fdb     EXPECT
F763 C7               (        forth.asm):03423                 RFCS
F764 8DE5             (        forth.asm):03424 (6)             bsr     EXPCT1
F766 4F               (        forth.asm):03425 (1)             clra
F767 3606             (        forth.asm):03426 (4+2)           pshu    d               This saves us "tfr d,x" and "UCNPUSH"
F769 39               (        forth.asm):03427 (4)             rts
                      (        forth.asm):03428         
F76A 49               (        forth.asm):03429         TERPRET fcb     $49             79-STANDARD (REF) I make this compile time only
F76B 494E544552505245 (        forth.asm):03430                 fcc     'INTERPRET'     ( -- )
     54
F774 F75A             (        forth.asm):03431                 fdb     ACCEPT
F776 C7               (        forth.asm):03432                 RFCS
                      (        forth.asm):03433         * Obtain a base buffer address based on the value of BLK.
F777 DC26             (        forth.asm):03434 (4)             ldd     UBLK
F779 2605             (        forth.asm):03435 (3)             bne     @notser
F77B 8E0318           (        forth.asm):03436 (3)             ldx     #CMDBUF         Base buffer address for serial line input
F77E 200A             (        forth.asm):03437 (3)             bra     @rsolvd
                      (        forth.asm):03438         * BLK is NZ, map the block in memory.
F780 1F01             (        forth.asm):03439 (4)     @notser tfr     d,x             Block number to X
F782 BDE7C9           (        forth.asm):03440 (7)             jsr     NPUSH
F785 BDEA4A           (        forth.asm):03441                 RFXT    jsr,BLOCK+8     XT for BLOCK. Map the block in
F788 3710             (        forth.asm):03442                 UCNPOP                  Retrieve buffer address (to X)
                      (        forth.asm):03443         * Note: >IN is supposed to have been set by the caller!
F78A 9F1E             (        forth.asm):03444 (4)     @rsolvd stx     BSBFADR
F78C DC24             (        forth.asm):03445 (4)             ldd     UTOIN
F78E 103001           (        forth.asm):03446 (4)             addr    d,x
F791 7EE0CA           (        forth.asm):03447 (3)             jmp     _INTERP         Finally invoke _INTERP.
                      (        forth.asm):03448         
F794 04               (        forth.asm):03449         LOAD    fcb     4               79-STANDARD (REQ202)
F795 4C4F4144         (        forth.asm):03450                 fcc     'LOAD'          ( blk -- )
F799 F76A             (        forth.asm):03451                 fdb     TERPRET
F79B C7               (        forth.asm):03452                 RFCS
F79C BDE7D7           (        forth.asm):03453 (7)             jsr     NPOP
F79F 2601             (        forth.asm):03454 (3)             bne     LOAD1
F7A1 39               (        forth.asm):03455 (4)             rts                     Block 0 is _not_ loadable
F7A2 3410             (        forth.asm):03456 (4+2)   LOAD1   pshs    x
F7A4 9E26             (        forth.asm):03457 (4)             ldx     UBLK
F7A6 BDE7E9           (        forth.asm):03458 (7)             jsr     RPUSH           Push BLK on the return stack
F7A9 9E24             (        forth.asm):03459 (4)             ldx     UTOIN
F7AB BDE7E9           (        forth.asm):03460 (7)             jsr     RPUSH           Push >IN on the return stack
F7AE 3510             (        forth.asm):03461 (4+2)           puls    x
F7B0 9F26             (        forth.asm):03462 (4)             stx     UBLK            Update BLK with the LOAD argument
F7B2 104F             (        forth.asm):03463 (2)             clrd
F7B4 DD24             (        forth.asm):03464 (4)             std     UTOIN           Clear >IN
                      (        forth.asm):03465         * Map the new BLK in, interpret code from there.
F7B6 8DBF             (        forth.asm):03466                 RFXT    bsr,TERPRET+12  XT for INTERPRET
F7B8 BDE805           (        forth.asm):03467 (7)             jsr     RPOP
F7BB 9F24             (        forth.asm):03468 (4)             stx     UTOIN           Restore >IN from the return stack
F7BD BDE805           (        forth.asm):03469 (7)             jsr     RPOP
F7C0 9F26             (        forth.asm):03470 (4)             stx     UBLK            Restore BLK from the return stack
F7C2 7EE828           (        forth.asm):03471 (3)             jmp     BKIN2PT         Map BLK in (if needed) and update BSBFADR
                      (        forth.asm):03472         
F7C5 04               (        forth.asm):03473         THRU    fcb     4               79-STANDARD (REF)
F7C6 54485255         (        forth.asm):03474                 fcc     'THRU'          ( lowblk highblk -- )
F7CA F794             (        forth.asm):03475                 fdb     LOAD
F7CC C7               (        forth.asm):03476                 RFCS
F7CD BDE7D7           (        forth.asm):03477 (7)             jsr     NPOP
F7D0 1F12             (        forth.asm):03478 (4)             tfr     x,y             Y has highblk
F7D2 BDE7D7           (        forth.asm):03479 (7)             jsr     NPOP            X has lowblk--both are unsigned numbers
F7D5 103712           (        forth.asm):03480 (4)     @thrlop cmpr    x,y
F7D8 2401             (        forth.asm):03481 (3)             bhs     @cont           Limit is >= to the loop index
F7DA 39               (        forth.asm):03482 (4)             rts
F7DB 3430             (        forth.asm):03483 (4+4)   @cont   pshs    x,y             Backup loop parameters
F7DD 3610             (        forth.asm):03484                 UCNPUSH                 Current block number to the data stack
F7DF 8DBB             (        forth.asm):03485                 RFXT    bsr,LOAD+7      XT for LOAD
F7E1 3530             (        forth.asm):03486 (4+4)           puls    y,x             Retrieve loop parameters
F7E3 3001             (        forth.asm):03487 (4+1)           leax    1,x             Iterate over to the next screen
F7E5 20EE             (        forth.asm):03488 (3)             bra     @thrlop
                      (        forth.asm):03489         
F7E7 83               (        forth.asm):03490         NXTBLK  fcb     $83             79-STANDARD (REF131)
F7E8 2D2D3E           (        forth.asm):03491                 fcc     '-->'           ( -- )
F7EB F7C5             (        forth.asm):03492                 fdb     THRU
F7ED C7               (        forth.asm):03493                 RFCS
F7EE 9E26             (        forth.asm):03494 (4)             ldx     UBLK
F7F0 3001             (        forth.asm):03495 (4+1)           leax    1,x
F7F2 DC26             (        forth.asm):03496 (4)     NXTBLK1 ldd     UBLK
F7F4 2603             (        forth.asm):03497 (3)             bne     @nfrmb0         Not invoked from block 0 (the console)
                      (        forth.asm):03498         * --> or CONTINUED are being invoked from the console. Flag that condition
                      (        forth.asm):03499         * as a hint to the interpreter so that feedback is provided even if we are
                      (        forth.asm):03500         * back from a block.
F7F6 4C               (        forth.asm):03501 (1)             inca                    1 to A
F7F7 973D             (        forth.asm):03502 (3)             sta     NBCTFB0
F7F9 9F26             (        forth.asm):03503 (4)     @nfrmb0 stx     UBLK            Update BLK
F7FB 104F             (        forth.asm):03504 (2)             clrd
F7FD DD24             (        forth.asm):03505 (4)             std     UTOIN           0 >IN !
                      (        forth.asm):03506         * Map the new BLK in, interpret code from there.
F7FF 7EF777           (        forth.asm):03507                 RFXT    jmp,TERPRET+12  XT for INTERPRET
                      (        forth.asm):03508         
F802 89               (        forth.asm):03509         CONTIND fcb     $89             79-STANDARD (REF)
F803 434F4E54494E5545 (        forth.asm):03510                 fcc     'CONTINUED'     ( nextblk -- )
     44
F80C F7E7             (        forth.asm):03511                 fdb     NXTBLK
F80E C7               (        forth.asm):03512                 RFCS
F80F BDE7D7           (        forth.asm):03513 (7)             jsr     NPOP            NEXTBLK to X
F812 26DE             (        forth.asm):03514 (3)             bne     NXTBLK1
F814 C60D             (        forth.asm):03515 (2)             ldb     #13             Illegal argument
F816 BDE73F           (        forth.asm):03516 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):03517         
F819 02               (        forth.asm):03518         MILLIS  fcb     2               79-STANDARD (REF)
F81A 4D53             (        forth.asm):03519                 fcc     'MS'            ( mscount -- )
F81C F802             (        forth.asm):03520                 fdb     CONTIND
F81E C7               (        forth.asm):03521                 RFCS
F81F BDE7D7           (        forth.asm):03522 (7)             jsr     NPOP
F822 2601             (        forth.asm):03523 (3)             bne     MILLIS1
F824 39               (        forth.asm):03524 (4)             rts
F825 CC031A           (        forth.asm):03525 (3)     MILLIS1 ldd     #MSLCNT
F828 104A             (        forth.asm):03526 (2)     @ms2    decd
F82A 26FC             (        forth.asm):03527 (3)             bne     @ms2
F82C 301F             (        forth.asm):03528 (4+1)           leax    -1,x
F82E 26F5             (        forth.asm):03529 (3)             bne     MILLIS1
F830 39               (        forth.asm):03530 (4)             rts
                      (        forth.asm):03531         
F831 04               (        forth.asm):03532         KEYP    fcb     4               ANSI (Facility)
F832 4B45593F         (        forth.asm):03533                 fcc     'KEY?'          ( -- flag )
F836 F819             (        forth.asm):03534                 fdb     MILLIS
F838 C7               (        forth.asm):03535                 RFCS
F839 1FC1             (        forth.asm):03536 (4)             tfr     0,x
F83B 0D44             (        forth.asm):03537 (4)             tst     SERBCNT
F83D 2702             (        forth.asm):03538 (3)             beq     @done
F83F 3001             (        forth.asm):03539 (4+1)           leax    1,x             Return the 79-STANDARD true flag
F841 7EE7C9           (        forth.asm):03540 (3)     @done   jmp     NPUSH
                      (        forth.asm):03541         
F844 03               (        forth.asm):03542         KEY     fcb     3               79-STANDARD (REQ100)
F845 4B4559           (        forth.asm):03543                 fcc     'KEY'
F848 F831             (        forth.asm):03544                 fdb     KEYP
F84A C7               (        forth.asm):03545                 RFCS
F84B BDE29F           (        forth.asm):03546 (7)             jsr     GETCH
F84E 1F89             (        forth.asm):03547 (4)             tfr     a,b
F850 4F               (        forth.asm):03548 (1)             clra
F851 1F01             (        forth.asm):03549 (4)             tfr     d,x
F853 7EE7C9           (        forth.asm):03550 (3)             jmp     NPUSH
                      (        forth.asm):03551         
F856 04               (        forth.asm):03552         EMIT    fcb     4               79-STANDARD (REQ207)
F857 454D4954         (        forth.asm):03553                 fcc     'EMIT'
F85B F844             (        forth.asm):03554                 fdb     KEY
F85D C7               (        forth.asm):03555                 RFCS
F85E BDE7D7           (        forth.asm):03556 (7)             jsr     NPOP
F861 1F10             (        forth.asm):03557 (4)             tfr     x,d
F863 1F98             (        forth.asm):03558 (4)             tfr     b,a
F865 7EE2CB           (        forth.asm):03559 (3)             jmp     PUTCH
                      (        forth.asm):03560         
F868 01               (        forth.asm):03561         PLUS    fcb     1               79-STANDARD (REQ121)
F869 2B               (        forth.asm):03562                 fcc     '+'             ( n1 n2 -- sum )
F86A F856             (        forth.asm):03563                 fdb     EMIT
F86C C7               (        forth.asm):03564                 RFCS
F86D BDE473           (        forth.asm):03565 (7)             jsr     MIN2PST         We need at least two cells stacked up
F870 EC42             (        forth.asm):03566 (5+1)           ldd     2,u             N1
F872 E3C4             (        forth.asm):03567 (5+0)           addd    ,u              N2
F874 ED42             (        forth.asm):03568 (5+1)           std     2,u             SUM
F876 3342             (        forth.asm):03569 (4+1)           leau    2,u             Drop the top cell
F878 39               (        forth.asm):03570 (4)             rts
                      (        forth.asm):03571         
F879 02               (        forth.asm):03572         ONEP    fcb     2               79-STANDARD (REQ107)
F87A 312B             (        forth.asm):03573                 fcc     '1+'
F87C F868             (        forth.asm):03574                 fdb     PLUS
F87E C7               (        forth.asm):03575                 RFCS
F87F BDE46E           (        forth.asm):03576 (7)             jsr     MIN1PST         We need at least one cell stacked up
F882 ECC4             (        forth.asm):03577 (5+0)           ldd     ,u
F884 104C             (        forth.asm):03578 (2)             incd
F886 EDC4             (        forth.asm):03579 (5+0)           std     ,u
F888 39               (        forth.asm):03580 (4)             rts
                      (        forth.asm):03581         
F889 02               (        forth.asm):03582         TWOP    fcb     2               79-STANDARD (REQ135)
F88A 322B             (        forth.asm):03583                 fcc     '2+'            ( n -- n+2 )
F88C F879             (        forth.asm):03584                 fdb     ONEP
F88E C7               (        forth.asm):03585                 RFCS
F88F BDE46E           (        forth.asm):03586 (7)             jsr     MIN1PST         We need at least one cell stacked up
F892 ECC4             (        forth.asm):03587 (5+0)           ldd     ,u
F894 C30002           (        forth.asm):03588 (3)             addd    #2
F897 EDC4             (        forth.asm):03589 (5+0)           std     ,u
F899 39               (        forth.asm):03590 (4)             rts
                      (        forth.asm):03591         
F89A 01               (        forth.asm):03592         MINUS   fcb     1               79-STANDARD (REQ134)
F89B 2D               (        forth.asm):03593                 fcc     '-'             ( n1 n2 -- dif )
F89C F889             (        forth.asm):03594                 fdb     TWOP
F89E C7               (        forth.asm):03595                 RFCS
F89F BDE473           (        forth.asm):03596 (7)             jsr     MIN2PST         We need at least two cells stacked up
F8A2 EC42             (        forth.asm):03597 (5+1)           ldd     2,u             N1
F8A4 A3C4             (        forth.asm):03598 (5+0)           subd    ,u              N2
F8A6 ED42             (        forth.asm):03599 (5+1)           std     2,u             DIF
F8A8 3342             (        forth.asm):03600 (4+1)           leau    2,u             Drop the top cell
F8AA 39               (        forth.asm):03601 (4)             rts
                      (        forth.asm):03602         
F8AB 02               (        forth.asm):03603         ONEM    fcb     2               79-STANDARD (REQ105)
F8AC 312D             (        forth.asm):03604                 fcc     '1-'
F8AE F89A             (        forth.asm):03605                 fdb     MINUS
F8B0 C7               (        forth.asm):03606                 RFCS
F8B1 BDE46E           (        forth.asm):03607 (7)             jsr     MIN1PST         We need at least one cell stacked up
F8B4 ECC4             (        forth.asm):03608 (5+0)           ldd     ,u
F8B6 104A             (        forth.asm):03609 (2)             decd
F8B8 EDC4             (        forth.asm):03610 (5+0)           std     ,u
F8BA 39               (        forth.asm):03611 (4)             rts
                      (        forth.asm):03612         
F8BB 02               (        forth.asm):03613         TWOM    fcb     2               79-STANDARD (REQ129)
F8BC 322D             (        forth.asm):03614                 fcc     '2-'
F8BE F8AB             (        forth.asm):03615                 fdb     ONEM
F8C0 C7               (        forth.asm):03616                 RFCS
F8C1 BDE46E           (        forth.asm):03617 (7)             jsr     MIN1PST         We need at least one cell stacked up
F8C4 ECC4             (        forth.asm):03618 (5+0)           ldd     ,u
F8C6 830002           (        forth.asm):03619 (3)             subd    #2
F8C9 EDC4             (        forth.asm):03620 (5+0)           std     ,u
F8CB 39               (        forth.asm):03621 (4)             rts
                      (        forth.asm):03622         
F8CC 01               (        forth.asm):03623         ZEROL   fcb     1               Non-standard
F8CD 30               (        forth.asm):03624                 fcc     '0'
F8CE F8BB             (        forth.asm):03625                 fdb     TWOM
F8D0 C7               (        forth.asm):03626                 RFCS
F8D1 1FC1             (        forth.asm):03627 (4)             tfr     0,x
F8D3 7EE7C9           (        forth.asm):03628 (3)             jmp     NPUSH
                      (        forth.asm):03629         
F8D6 01               (        forth.asm):03630         ONEL    fcb     1               Non-standard
F8D7 31               (        forth.asm):03631                 fcc     '1'
F8D8 F8CC             (        forth.asm):03632                 fdb     ZEROL
F8DA C7               (        forth.asm):03633                 RFCS
F8DB 8E0001           (        forth.asm):03634 (3)             ldx     #1
F8DE 7EE7C9           (        forth.asm):03635 (3)             jmp     NPUSH
                      (        forth.asm):03636         
F8E1 01               (        forth.asm):03637         TWOL    fcb     1               Non-standard
F8E2 32               (        forth.asm):03638                 fcc     '2'
F8E3 F8D6             (        forth.asm):03639                 fdb     ONEL
F8E5 C7               (        forth.asm):03640                 RFCS
F8E6 8E0002           (        forth.asm):03641 (3)             ldx     #2
F8E9 7EE7C9           (        forth.asm):03642 (3)             jmp     NPUSH
                      (        forth.asm):03643         
F8EC 05               (        forth.asm):03644         SHIFT   fcb     5               79-STANDARD (Ref)
F8ED 5348494654       (        forth.asm):03645                 fcc     'SHIFT'
F8F2 F8E1             (        forth.asm):03646                 fdb     TWOL
F8F4 C7               (        forth.asm):03647                 RFCS
F8F5 BDE473           (        forth.asm):03648 (7)             jsr     MIN2PST         Two cells need to be stacked up
F8F8 10A6C4           (        forth.asm):03649 (6+0)           ldw     ,u              Shift bitcount
F8FB EC42             (        forth.asm):03650 (5+1)           ldd     2,u             The data itself
F8FD 105D             (        forth.asm):03651 (2)     @shftlp tstw
F8FF 270E             (        forth.asm):03652 (3)             beq     @shfdon
F901 2D06             (        forth.asm):03653 (3)             blt     @shftrg
F903 1048             (        forth.asm):03654 (2)             lsld                    Shift left (W is positive)
F905 105A             (        forth.asm):03655 (2)             decw
F907 20F4             (        forth.asm):03656 (3)             bra     @shftlp
F909 1044             (        forth.asm):03657 (2)     @shftrg lsrd                    Shift right (W is negative)
F90B 105C             (        forth.asm):03658 (2)             incw
F90D 20EE             (        forth.asm):03659 (3)             bra     @shftlp
F90F ED42             (        forth.asm):03660 (5+1)   @shfdon std     2,u             Return value stored there
F911 3342             (        forth.asm):03661 (4+1)           leau    2,u             Drop one cell from the data stack
F913 39               (        forth.asm):03662 (4)             rts
                      (        forth.asm):03663         
                      (        forth.asm):03664         * Signed multiplication by hardware support.
F914 01               (        forth.asm):03665         MULT    fcb     1               79-STANDARD (REQ138)
F915 2A               (        forth.asm):03666                 fcc     '*'
F916 F8EC             (        forth.asm):03667                 fdb     SHIFT
F918 C7               (        forth.asm):03668                 RFCS
F919 BDE473           (        forth.asm):03669 (7)             jsr     MIN2PST         Two cells need to be stacked up
F91C EC42             (        forth.asm):03670 (5+1)           ldd     2,u
F91E 11AFC4           (        forth.asm):03671 (30+0)          muld    ,u
F921 10A742           (        forth.asm):03672 (6+1)           stw     2,u             Return only the lower 16 bits
F924 3342             (        forth.asm):03673 (4+1)           leau    2,u             Drop one cell from the data stack
F926 39               (        forth.asm):03674 (4)             rts
                      (        forth.asm):03675         
F927 02               (        forth.asm):03676         TWOTIM  fcb     2               79-STANDARD (REF)
F928 322A             (        forth.asm):03677                 fcc     '2*'
F92A F914             (        forth.asm):03678                 fdb     MULT
F92C C7               (        forth.asm):03679                 RFCS
F92D BDE46E           (        forth.asm):03680 (7)             jsr     MIN1PST         One cell needs to be stacked up
F930 ECC4             (        forth.asm):03681 (5+0)           ldd     ,u
F932 1048             (        forth.asm):03682 (2)             asld
F934 EDC4             (        forth.asm):03683 (5+0)           std     ,u
F936 39               (        forth.asm):03684 (4)             rts
                      (        forth.asm):03685         
F937 02               (        forth.asm):03686         TWODIV  fcb     2
F938 322F             (        forth.asm):03687                 fcc     '2/'
F93A F927             (        forth.asm):03688                 fdb     TWOTIM
F93C C7               (        forth.asm):03689                 RFCS
F93D BDE46E           (        forth.asm):03690 (7)             jsr     MIN1PST         One cell needs to be stacked up
F940 ECC4             (        forth.asm):03691 (5+0)           ldd     ,u
F942 1047             (        forth.asm):03692 (2)             asrd
F944 EDC4             (        forth.asm):03693 (5+0)           std     ,u
F946 39               (        forth.asm):03694 (4)             rts
                      (        forth.asm):03695         
                      (        forth.asm):03696         * /, MOD and /MOD are essentially the same function returning
                      (        forth.asm):03697         * the different parts returned by DIVQ.
                      (        forth.asm):03698         * We use a global variable to distinguish which functionality
                      (        forth.asm):03699         * is being requested:
                      (        forth.asm):03700         * 0: return the modulo and the quotient (/MOD).
                      (        forth.asm):03701         * 1: return the modulo only (MOD).
                      (        forth.asm):03702         * 2: return the quotient only (/).
F947 01               (        forth.asm):03703         DIV     fcb     1               79-STANDARD (REQ178)
F948 2F               (        forth.asm):03704                 fcc     '/'             ( N1 N2 -- N3 [N4] )
F949 F937             (        forth.asm):03705                 fdb     TWODIV
F94B C7               (        forth.asm):03706                 RFCS
F94C 8602             (        forth.asm):03707 (2)             lda     #2
F94E 9733             (        forth.asm):03708 (3)             sta     DIVFCN          Function 2: return only the quotient
F950 BDE473           (        forth.asm):03709 (7)     DIV1    jsr     MIN2PST         At least two cells need to be stacked up
F953 0F34             (        forth.asm):03710 (5)             clr     F83DIVF         Assume no adjustment required for floored div.
F955 A642             (        forth.asm):03711 (4+1)           lda     2,u             Numerator's MSB
F957 A8C4             (        forth.asm):03712 (4+0)           eora    ,u              Different sign from the denominator's MSB?
F959 2A02             (        forth.asm):03713 (3)             bpl     @divprc         No, proceed to the division code
F95B 0C34             (        forth.asm):03714 (5)             inc     F83DIVF         Numerator and denominator have different signs
                      (        forth.asm):03715         * Division by zero conditions are dealt with through the trap handler.
F95D 104F             (        forth.asm):03716 (2)     @divprc clrd                    Clear the numerator's MSC
F95F 10A642           (        forth.asm):03717 (6+1)           ldw     2,u             Numerator's LSC
F962 2A02             (        forth.asm):03718 (3)             bpl     @dvnsex         Branch if no sign extention is needed
                      (        forth.asm):03719         * Sign extention from W to Q.
F964 1043             (        forth.asm):03720 (2)             comd                    -1 to D (numerator's MSC)
F966 11AEC4           (        forth.asm):03721 (36)    @dvnsex divq    ,u              ,u has the denominator
F969 8D19             (        forth.asm):03722 (6)             bsr     FDIVADJ         Perform floored division adjustment, if needed
F96B 0D33             (        forth.asm):03723 (4)     @no83ad tst     DIVFCN
F96D 2606             (        forth.asm):03724 (3)             bne     @div4
F96F ED42             (        forth.asm):03725 (5+1)           std     2,u             Function 0: return the modulo and the quotient
F971 10A7C4           (        forth.asm):03726 (6+0)   @div3   stw     ,u              Function 2: return only the quotient
F974 39               (        forth.asm):03727 (4)             rts
F975 3342             (        forth.asm):03728 (4+1)   @div4   leau    2,u             Drop one cell from the data stack
F977 1F07             (        forth.asm):03729 (4)             tfr     d,v             Backup the modulo
F979 9633             (        forth.asm):03730 (3)             lda     DIVFCN
F97B 8101             (        forth.asm):03731 (2)             cmpa    #1
F97D 26F2             (        forth.asm):03732 (3)             bne     @div3
F97F 1F70             (        forth.asm):03733 (4)             tfr     v,d             Restore the modulo
F981 EDC4             (        forth.asm):03734 (5+0)           std     ,u              Function 1: return only the modulo
F983 39               (        forth.asm):03735 (4)             rts
                      (        forth.asm):03736         
                      (        forth.asm):03737         * Quotient is returned in W, modulo in D but this is symmetric division :-(
                      (        forth.asm):03738         * Need to return a floored division result for compat. with F83 and ANSI impls.
F984 104D             (        forth.asm):03739 (2)     FDIVADJ tstd                    Is the remainder zero?
F986 2708             (        forth.asm):03740 (3)             beq     @no83ad         Yes. No adjusment required for floored division
F988 0D34             (        forth.asm):03741 (4)             tst     F83DIVF         Different signs for numerator and denominator?
F98A 2704             (        forth.asm):03742 (3)             beq     @no83ad         No. Adjusment not needed for floored division
                      (        forth.asm):03743         * Adjusment for F83 floored division.
F98C 105A             (        forth.asm):03744 (2)             decw                    Decrement the quotient
F98E E3C4             (        forth.asm):03745 (5+0)           addd    ,u              Add the denominator to the modulo
F990 39               (        forth.asm):03746 (4)     @no83ad rts
                      (        forth.asm):03747         
F991 03               (        forth.asm):03748         MOD     fcb     3               79-STANDARD (REQ104)
F992 4D4F44           (        forth.asm):03749                 fcc     'MOD'           ( N1 N2 -- N3 )
F995 F947             (        forth.asm):03750                 fdb     DIV
F997 C7               (        forth.asm):03751                 RFCS
F998 8601             (        forth.asm):03752 (2)             lda     #1
F99A 9733             (        forth.asm):03753 (3)             sta     DIVFCN
F99C 20B2             (        forth.asm):03754 (3)             bra     DIV1
                      (        forth.asm):03755         
F99E 04               (        forth.asm):03756         MDIV    fcb     4               79-STANDARD (REQ198)
F99F 2F4D4F44         (        forth.asm):03757                 fcc     '/MOD'          ( N1 N2 -- N3 N4 )
F9A3 F991             (        forth.asm):03758                 fdb     MOD
F9A5 C7               (        forth.asm):03759                 RFCS
F9A6 0F33             (        forth.asm):03760 (5)             clr     DIVFCN
F9A8 20A6             (        forth.asm):03761 (3)             bra     DIV1
                      (        forth.asm):03762         
F9AA 02               (        forth.asm):03763         STRSLSH fcb     2               79-STANDARD (REQ220)
F9AB 2A2F             (        forth.asm):03764                 fcc     '*/'            ( N1 N2 N3 -- N4 [N5] )
F9AD F99E             (        forth.asm):03765                 fdb     MDIV
F9AF C7               (        forth.asm):03766                 RFCS
F9B0 8601             (        forth.asm):03767 (2)             lda     #1
F9B2 9735             (        forth.asm):03768 (3)             sta     STSLFCN
F9B4 BDE478           (        forth.asm):03769 (7)     STRSL1  jsr     MIN3PST         Three cells need to be stacked up
F9B7 0F34             (        forth.asm):03770 (5)             clr     F83DIVF         Assume no adjustment required for floored div.
                      (        forth.asm):03771         * Division by zero conditions are dealt with through the trap handler.
F9B9 EC44             (        forth.asm):03772 (5+1)           ldd     4,u             N1
F9BB 11AF42           (        forth.asm):03773 (30+1)          muld    2,u             N2 (N1 * N2 -> D:W)
F9BE 3402             (        forth.asm):03774 (4+1)           pshs    a               Product's MSC's MSB
F9C0 A8C4             (        forth.asm):03775 (4+0)           eora    ,u              Different sign from the denominator's?
F9C2 2A02             (        forth.asm):03776 (3)             bpl     @stslpr         No. Floored division adjustment not needed
F9C4 0C34             (        forth.asm):03777 (5)             inc     F83DIVF
F9C6 3502             (        forth.asm):03778 (4+1)   @stslpr puls    a
F9C8 11AEC4           (        forth.asm):03779 (36)            divq    ,u              N3
F9CB 8DB7             (        forth.asm):03780 (6)             bsr     FDIVADJ         Perform floored division adjustment, if needed
F9CD 3342             (        forth.asm):03781 (4+1)           leau    2,u
F9CF 0D35             (        forth.asm):03782 (4)             tst     STSLFCN
F9D1 2606             (        forth.asm):03783 (3)             bne     @strsl2         Just the quotient, Ma'am!
F9D3 ED42             (        forth.asm):03784 (5+1)           std     2,u             N4: the modulo
F9D5 10A7C4           (        forth.asm):03785 (6+0)           stw     ,u              N5: the quotient
F9D8 39               (        forth.asm):03786 (4)             rts
F9D9 3342             (        forth.asm):03787 (4+1)   @strsl2 leau    2,u
F9DB 10A7C4           (        forth.asm):03788 (6+0)           stw     ,u              N4
F9DE 39               (        forth.asm):03789 (4)             rts
                      (        forth.asm):03790         
F9DF 05               (        forth.asm):03791         STRSLMD fcb     5               79-STANDARD (REQ192)
F9E0 2A2F4D4F44       (        forth.asm):03792                 fcc     '*/MOD'         ( N1 N2 N3 -- N4 N5 )
F9E5 F9AA             (        forth.asm):03793                 fdb     STRSLSH
F9E7 C7               (        forth.asm):03794                 RFCS
F9E8 0F35             (        forth.asm):03795 (5)             clr     STSLFCN
F9EA 20C8             (        forth.asm):03796 (3)             bra     STRSL1
                      (        forth.asm):03797         
                      (        forth.asm):03798         * Returns the current value of the Sreg register (informational only).
                      (        forth.asm):03799         * This word is either called (JSROPC) or jumped to (JMPOPC), as a result
                      (        forth.asm):03800         * of the tail call optimization process. There is no way to tell the
                      (        forth.asm):03801         * difference. Here we assume that it is called and return Sreg.
F9EC 01               (        forth.asm):03802         SYSSTK  fcb     1               Non-standard
F9ED 53               (        forth.asm):03803                 fcc     'S'
F9EE F9DF             (        forth.asm):03804                 fdb     STRSLMD
F9F0 C7               (        forth.asm):03805                 RFCS
F9F1 1F41             (        forth.asm):03806 (4)             tfr     s,x
F9F3 7EE7C9           (        forth.asm):03807 (3)             jmp     NPUSH
                      (        forth.asm):03808         
F9F6 02               (        forth.asm):03809         SYSSTAT fcb     2
F9F7 5340             (        forth.asm):03810                 fcc     'S@'
F9F9 F9EC             (        forth.asm):03811                 fdb     SYSSTK
F9FB C7               (        forth.asm):03812                 RFCS
F9FC AEE4             (        forth.asm):03813 (5+0)           ldx     ,s
F9FE 7EE7C9           (        forth.asm):03814 (3)             jmp     NPUSH
                      (        forth.asm):03815         
FA01 07               (        forth.asm):03816         PAYLOAD fcb     7               Non standard
FA02 5041594C4F4144   (        forth.asm):03817                 fcc     'PAYLOAD'       ( -- len ) where len is the code payload
FA09 F9F6             (        forth.asm):03818                 fdb     SYSSTAT         of the word located by FIND (or NULL)
FA0B C7               (        forth.asm):03819                 RFCS
FA0C 9E10             (        forth.asm):03820 (4)             ldx     FNDPLD          Code payload reported by FIND
FA0E 7EE7C9           (        forth.asm):03821 (3)             jmp     NPUSH
                      (        forth.asm):03822         
                      (        forth.asm):03823         * Differences from the original code:
                      (        forth.asm):03824         * - display number in HEX rather than in the current base.
                      (        forth.asm):03825         * - dropped feat: the original stuff was interactively paged by 15 line screens.
                      (        forth.asm):03826         * - added feat: display code implementation payload.
                      (        forth.asm):03827         * - added feat: display the immedediate and define (compile time only) flags.
                      (        forth.asm):03828         * - added feat: display the forgettable status (R/W). Everything user
                      (        forth.asm):03829         *   defined is forgettable (i.e. RAM resident).
FA11 05               (        forth.asm):03830         VLIST   fcb     5               Non-standard
FA12 564C495354       (        forth.asm):03831                 fcc     'VLIST'         ( -- )
FA17 FA01             (        forth.asm):03832                 fdb     PAYLOAD
FA19 C7               (        forth.asm):03833                 RFCS
FA1A 9E08             (        forth.asm):03834 (4)             ldx     DICEND
FA1C 9F18             (        forth.asm):03835 (4)             stx     VLPRVEP         Last word code address + 1
FA1E 9E06             (        forth.asm):03836 (4)             ldx     LSTWAD
FA20 9F1A             (        forth.asm):03837 (4)     @vlist1 stx     VLPRVHD         Last word header pointer
FA22 108E03EC         (        forth.asm):03838 (4)             ldy     #TBUFF
FA26 E680             (        forth.asm):03839 (4+1)           ldb     ,x+
FA28 3404             (        forth.asm):03840 (4+1)           pshs    b
FA2A C41F             (        forth.asm):03841 (2)             andb    #WRLNMSK        Mask out word length
FA2C 4F               (        forth.asm):03842 (1)             clra
FA2D 3404             (        forth.asm):03843 (4+1)           pshs    b               Preserve word length
FA2F 1F06             (        forth.asm):03844 (4)             tfr     d,w
FA31 113812           (        forth.asm):03845 (6+?)           tfm     x+,y+
FA34 3502             (        forth.asm):03846 (4+1)           puls    a               Restore word length to A
FA36 C620             (        forth.asm):03847 (2)             ldb     #WRLNMSK+1
FA38 103289           (        forth.asm):03848 (4)             subr    a,b             Number of spaces we want to emit
FA3B 8620             (        forth.asm):03849 (2)             lda     #SP
FA3D A7A0             (        forth.asm):03850 (4+1)   @vlist2 sta     ,y+
FA3F 5A               (        forth.asm):03851 (1)             decb
FA40 26FB             (        forth.asm):03852 (3)             bne     @vlist2
FA42 6FA0             (        forth.asm):03853 (6+1)           clr     ,y+             Terminate formatted output string
FA44 3410             (        forth.asm):03854 (4+2)           pshs    x               Address of the current word backlink address
FA46 BDE2EB           (        forth.asm):03855 (7)             jsr     PUTCR           Carriage return is output before anything else
FA49 8E03EC           (        forth.asm):03856 (3)             ldx     #TBUFF
FA4C BDE2DE           (        forth.asm):03857 (7)             jsr     PUTS            Output word name formatted on 17 chars + SP
FA4F AEE4             (        forth.asm):03858 (5+0)           ldx     ,s
                      (        forth.asm):03859                 IFNE    RELFEAT
FA51 3003             (        forth.asm):03860 (4+1)           leax    3,x             Word XT to X (Skip backlink and checksum)
                      (        forth.asm):03861                 ELSE
                      (        forth.asm):03862                 leax    2,x             Word XT to X (Skip backlink)
                      (        forth.asm):03863                 ENDC                    RELFEAT
FA53 1F10             (        forth.asm):03864 (4)             tfr     x,d             CVNSTR depends on UBASE and we want HEX output
FA55 108E03EC         (        forth.asm):03865 (4)             ldy     #TBUFF
FA59 BDE180           (        forth.asm):03866 (7)             jsr     HDMP4           So we use trusted debugging code
FA5C 8E03EC           (        forth.asm):03867 (3)             ldx     #TBUFF
FA5F BDE2DE           (        forth.asm):03868 (7)             jsr     PUTS
                      (        forth.asm):03869         * Now to display word implementation length.
                      (        forth.asm):03870         * Implementation code length is from ,s+3 (or 2) to VLPRVEP
FA62 8609             (        forth.asm):03871 (2)             lda     #HT
FA64 BDE2CB           (        forth.asm):03872 (7)             jsr     PUTCH
FA67 9E18             (        forth.asm):03873 (4)             ldx     VLPRVEP
FA69 10AEE4           (        forth.asm):03874 (6+0)           ldy     ,s
                      (        forth.asm):03875                 IFNE    RELFEAT
FA6C 3123             (        forth.asm):03876 (4+1)           leay    3,y             Current word code entry address
                      (        forth.asm):03877                 ELSE
                      (        forth.asm):03878                 leay    2,y             Current word code entry address
                      (        forth.asm):03879                 ENDC                    RELFEAT
FA6E 103221           (        forth.asm):03880 (4)             subr    y,x
FA71 1F10             (        forth.asm):03881 (4)             tfr     x,d
FA73 108E03EC         (        forth.asm):03882 (4)             ldy     #TBUFF
FA77 BDE180           (        forth.asm):03883 (7)             jsr     HDMP4
FA7A 8E03EC           (        forth.asm):03884 (3)             ldx     #TBUFF
FA7D BDE2DE           (        forth.asm):03885 (7)             jsr     PUTS
                      (        forth.asm):03886         # Display attribute flags.
FA80 8609             (        forth.asm):03887 (2)             lda     #HT
FA82 BDE2CB           (        forth.asm):03888 (7)             jsr     PUTCH
FA85 8E03EC           (        forth.asm):03889 (3)             ldx     #TBUFF
FA88 E662             (        forth.asm):03890 (4+1)           ldb     2,s             Word attribute to B
FA8A 862D             (        forth.asm):03891 (2)             lda     #'-
FA8C C580             (        forth.asm):03892 (2)             bitb    #IMDFLM         Check for immediate
FA8E 2702             (        forth.asm):03893 (3)             beq     @vlist4
FA90 8649             (        forth.asm):03894 (2)             lda     #'I
FA92 A780             (        forth.asm):03895 (4+1)   @vlist4 sta     ,x+
FA94 862D             (        forth.asm):03896 (2)             lda     #'-
FA96 C540             (        forth.asm):03897 (2)             bitb    #DEFFLM         Check for define (compile time only)
FA98 2702             (        forth.asm):03898 (3)             beq     @vlist5
FA9A 8643             (        forth.asm):03899 (2)             lda     #'C
FA9C A780             (        forth.asm):03900 (4+1)   @vlist5 sta     ,x+
                      (        forth.asm):03901                 IFNE    RELFEAT
FA9E 862D             (        forth.asm):03902 (2)             lda     #'-
FAA0 C520             (        forth.asm):03903 (2)             bitb    #MONFLM         Check for monitored status
FAA2 2702             (        forth.asm):03904 (3)             beq     @vlst51
FAA4 864D             (        forth.asm):03905 (2)             lda     #'M
FAA6 A780             (        forth.asm):03906 (4+1)   @vlst51 sta     ,x+
                      (        forth.asm):03907                 ENDC                    RELFEAT
                      (        forth.asm):03908         * Check for forgettable also. In ROM => R else W unless we just processed '@'.
FAA8 8652             (        forth.asm):03909 (2)             lda     #'R
FAAA 10AEE4           (        forth.asm):03910 (6+0)           ldy     ,s
                      (        forth.asm):03911                 IFNE    RELFEAT
FAAD 3123             (        forth.asm):03912 (4+1)           leay    3,y             Word entry point to Y
                      (        forth.asm):03913                 ELSE
                      (        forth.asm):03914                 leay    2,y             Word entry point to Y
                      (        forth.asm):03915                 ENDC                    RELFEAT
FAAF 108C0C65         (        forth.asm):03916 (4)             cmpy    #RAMFTCH        @ in RAM is unforgettable
FAB3 2708             (        forth.asm):03917 (3)             beq     @vlist6
FAB5 108CE000         (        forth.asm):03918 (4)             cmpy    #ROMSTRT        as are all ROM resident words
FAB9 2402             (        forth.asm):03919 (3)             bcc     @vlist6
FABB 8657             (        forth.asm):03920 (2)             lda     #'W
FABD A780             (        forth.asm):03921 (4+1)   @vlist6 sta     ,x+
FABF 6F84             (        forth.asm):03922 (6+0)           clr     ,x
FAC1 8E03EC           (        forth.asm):03923 (3)             ldx     #TBUFF
FAC4 BDE2DE           (        forth.asm):03924 (7)             jsr     PUTS
                      (        forth.asm):03925         * The point at which VLPRVHD==WDICSPC is a singularity (RAM to ROM transition).
FAC7 9E1A             (        forth.asm):03926 (4)             ldx     VLPRVHD
FAC9 8C0C60           (        forth.asm):03927 (3)             cmpx    #WDICSPC
FACC 2608             (        forth.asm):03928 (3)             bne     @vlist7
FACE 8EFD9C           (        forth.asm):03929 (3)             ldx     #QMARK          Word just before @ (ROM flavor)
FAD1 9F1A             (        forth.asm):03930 (4)             stx     VLPRVHD
FAD3 8EFDA7           (        forth.asm):03931 (3)             ldx     #THEEND
FAD6 9F18             (        forth.asm):03932 (4)     @vlist7 stx     VLPRVEP
FAD8 3510             (        forth.asm):03933 (4+2)           puls    x
FADA 3504             (        forth.asm):03934 (4+1)           puls    b
FADC AE84             (        forth.asm):03935 (5+0)           ldx     ,x              Point to previous word
FADE 1026FF3E         (        forth.asm):03936 (5)             lbne    @vlist1
FAE2 39               (        forth.asm):03937 (4)             rts
                      (        forth.asm):03938         
FAE3 05               (        forth.asm):03939         STATE   fcb     5
FAE4 5354415445       (        forth.asm):03940                 fcc     'STATE'
FAE9 FA11             (        forth.asm):03941                 fdb     VLIST
FAEB C7               (        forth.asm):03942                 RFCS
FAEC 8E0122           (        forth.asm):03943 (3)             ldx     #USTATE
FAEF 7EE7C9           (        forth.asm):03944 (3)             jmp     NPUSH
                      (        forth.asm):03945         
FAF2 04               (        forth.asm):03946         BASE    fcb     4               79-STANDARD (REQ115)
FAF3 42415345         (        forth.asm):03947                 fcc     'BASE'
FAF7 FAE3             (        forth.asm):03948                 fdb     STATE
FAF9 C7               (        forth.asm):03949                 RFCS
FAFA 8E0120           (        forth.asm):03950 (3)             ldx     #UBASE
FAFD 7EE7C9           (        forth.asm):03951 (3)             jmp     NPUSH
                      (        forth.asm):03952         
FB00 03               (        forth.asm):03953         BIN     fcb     3               Non-standard
FB01 42494E           (        forth.asm):03954                 fcc     'BIN'
FB04 FAF2             (        forth.asm):03955                 fdb     BASE
FB06 C7               (        forth.asm):03956                 RFCS
FB07 CC0002           (        forth.asm):03957 (3)             ldd     #2
FB0A DD20             (        forth.asm):03958 (4)             std     UBASE
FB0C 39               (        forth.asm):03959 (4)             rts
                      (        forth.asm):03960         
FB0D 05               (        forth.asm):03961         OCTAL   fcb     5               79-STANDARD (REF)
FB0E 4F4354414C       (        forth.asm):03962                 fcc     'OCTAL'
FB13 FB00             (        forth.asm):03963                 fdb     BIN
FB15 C7               (        forth.asm):03964                 RFCS
FB16 CC0008           (        forth.asm):03965 (3)             ldd     #8
FB19 DD20             (        forth.asm):03966 (4)             std     UBASE
FB1B 39               (        forth.asm):03967 (4)             rts
                      (        forth.asm):03968         
FB1C 07               (        forth.asm):03969         DECIMAL fcb     7               79-STANDARD (REQ197)
FB1D 444543494D414C   (        forth.asm):03970                 fcc     'DECIMAL'
FB24 FB0D             (        forth.asm):03971                 fdb     OCTAL
FB26 C7               (        forth.asm):03972                 RFCS
FB27 CC000A           (        forth.asm):03973 (3)             ldd     #10
FB2A DD20             (        forth.asm):03974 (4)             std     UBASE
FB2C 39               (        forth.asm):03975 (4)             rts
                      (        forth.asm):03976         
FB2D 03               (        forth.asm):03977         HEX     fcb     3               79-STANDARD (REF162)
FB2E 484558           (        forth.asm):03978                 fcc     'HEX'
FB31 FB1C             (        forth.asm):03979                 fdb     DECIMAL
FB33 C7               (        forth.asm):03980                 RFCS
FB34 CC0010           (        forth.asm):03981 (3)             ldd     #16
FB37 DD20             (        forth.asm):03982 (4)             std     UBASE
FB39 39               (        forth.asm):03983 (4)             rts
                      (        forth.asm):03984         
FB3A 02               (        forth.asm):03985         DOTTICK fcb     2               Non-standard (SwiftForth)
FB3B 2E27             (        forth.asm):03986                 fcb     $2E,$27         .' ( memaddr -- )
FB3D FB2D             (        forth.asm):03987                 fdb     HEX
FB3F C7               (        forth.asm):03988                 RFCS
                      (        forth.asm):03989                 IFNE    SSDFEAT
FB40 BDE7D7           (        forth.asm):03990 (7)             jsr     NPOP
FB43 1F12             (        forth.asm):03991 (4)             tfr     x,y
FB45 8E039C           (        forth.asm):03992 (3)             ldx     #HEXBUF
FB48 BDE5FF           (        forth.asm):03993 (7)             jsr     FINDSYM
                      (        forth.asm):03994                 ELSE
                      (        forth.asm):03995                 lda     #'$
                      (        forth.asm):03996                 jsr     PUTCH
                      (        forth.asm):03997                 jsr     NPOP
                      (        forth.asm):03998                 tfr     x,d
                      (        forth.asm):03999                 ldy     #HEXBUF
                      (        forth.asm):04000                 jsr     HDMP4
                      (        forth.asm):04001                 ENDC                    SSDFEAT
FB4B 8E039C           (        forth.asm):04002 (3)             ldx     #HEXBUF
FB4E 7EE2DE           (        forth.asm):04003 (3)             jmp     PUTS
                      (        forth.asm):04004         
                      (        forth.asm):04005         * Display a dump of the data stack in the current BASE. In Leo Brodie's
                      (        forth.asm):04006         * "Starting Forth" the data stack is printed from the bottom up. So it is here.
FB51 02               (        forth.asm):04007         DDUMP   fcb     2               ANSI (Optional "Programming tools" word set)
FB52 2E53             (        forth.asm):04008                 fcc     '.S'            ( -- )
FB54 FB3A             (        forth.asm):04009                 fdb     DOTTICK
FB56 C7               (        forth.asm):04010                 RFCS
FB57 CC0298           (        forth.asm):04011 (3)             ldd     #NSTBOT
FB5A 103230           (        forth.asm):04012 (4)             subr    u,d
FB5D 1044             (        forth.asm):04013 (2)             lsrd                    DEPTH is in D
FB5F 272A             (        forth.asm):04014 (3)             beq     @ndump3         Data stack is empty
FB61 3440             (        forth.asm):04015 (4+2)           pshs    u
FB63 CE0298           (        forth.asm):04016 (3)             ldu     #NSTBOT         Pointing to the bottom of the data stack
FB66 8601             (        forth.asm):04017 (2)             lda     #1
FB68 9739             (        forth.asm):04018 (3)             sta     CVISSGN         Force a signed number conversion
FB6A 3404             (        forth.asm):04019 (4+1)   @ndump1 pshs    b
FB6C AEC3             (        forth.asm):04020 (5+2)           ldx     ,--u
FB6E BDE41A           (        forth.asm):04021 (7)             jsr     CVNSTR
FB71 8E03EC           (        forth.asm):04022 (3)             ldx     #TBUFF
                      (        forth.asm):04023         # Skip leading spaces.
FB74 A680             (        forth.asm):04024 (4+1)   @ndump2 lda     ,x+
FB76 8120             (        forth.asm):04025 (2)             cmpa    #SP
FB78 27FA             (        forth.asm):04026 (3)             beq     @ndump2
FB7A 301F             (        forth.asm):04027 (4+1)           leax    -1,x
FB7C BDE2DE           (        forth.asm):04028 (7)             jsr     PUTS
FB7F 8620             (        forth.asm):04029 (2)             lda     #SP
FB81 BDE2CB           (        forth.asm):04030 (7)             jsr     PUTCH
FB84 3504             (        forth.asm):04031 (4+1)           puls    b
FB86 5A               (        forth.asm):04032 (1)             decb
FB87 26E1             (        forth.asm):04033 (3)             bne     @ndump1
FB89 3540             (        forth.asm):04034 (4+2)           puls    u
FB8B 39               (        forth.asm):04035 (4)     @ndump3 rts
                      (        forth.asm):04036         
FB8C 04               (        forth.asm):04037         QRYDUP  fcb     4               79-STANDARD (REQ184)
FB8D 3F445550         (        forth.asm):04038                 fcc     '?DUP'
FB91 FB51             (        forth.asm):04039                 fdb     DDUMP
FB93 C7               (        forth.asm):04040                 RFCS
FB94 BDE7D7           (        forth.asm):04041 (7)             jsr     NPOP            ZFLAG is set by NPOP
FB97 3610             (        forth.asm):04042                 UCNPUSH                 Push back the original parameter
FB99 1026EC2C         (        forth.asm):04043 (5)             lbne    NPUSH           And DUP if NZ
FB9D 39               (        forth.asm):04044 (4)             rts
                      (        forth.asm):04045         
FB9E 04               (        forth.asm):04046         TUCK    fcb     4               ANSI (Core ext)
FB9F 5455434B         (        forth.asm):04047                 fcc     'TUCK'          ( x1 x2 -- x2 x1 x2 ) i.e. SWAP OVER
FBA3 FB8C             (        forth.asm):04048                 fdb     QRYDUP
FBA5 C7               (        forth.asm):04049                 RFCS
FBA6 8D2F             (        forth.asm):04050                 RFXT    bsr,SWAP+7      XT for SWAP
FBA8 206F             (        forth.asm):04051                 RFXT    bra,OVER+7      XT for OVER
                      (        forth.asm):04052         
FBAA 03               (        forth.asm):04053         NIP     fcb     3               ANSI (Core ext)
FBAB 4E4950           (        forth.asm):04054                 fcc     'NIP'           ( x1 x2 -- x2 ) i.e. SWAP DROP
FBAE FB9E             (        forth.asm):04055                 fdb     TUCK
FBB0 C7               (        forth.asm):04056                 RFCS
FBB1 8D24             (        forth.asm):04057                 RFXT    bsr,SWAP+7      XT for SWAP
FBB3 2017             (        forth.asm):04058                 RFXT    bra,DROP+7      XT for DROP
                      (        forth.asm):04059         
FBB5 03               (        forth.asm):04060         DUP     fcb     3               79-STANDARD (REQ205)
FBB6 445550           (        forth.asm):04061                 fcc     'DUP'
FBB9 FBAA             (        forth.asm):04062                 fdb     NIP
FBBB C7               (        forth.asm):04063                 RFCS
FBBC BDE46E           (        forth.asm):04064 (7)             jsr     MIN1PST         At least one cell needs to be stacked up
FBBF AEC4             (        forth.asm):04065 (5+0)           ldx     ,u
FBC1 7EE7C9           (        forth.asm):04066 (3)             jmp     NPUSH
                      (        forth.asm):04067         
FBC4 04               (        forth.asm):04068         DROP    fcb     4               79-STANDARD (REQ233)
FBC5 44524F50         (        forth.asm):04069                 fcc     'DROP'
FBC9 FBB5             (        forth.asm):04070                 fdb     DUP
FBCB C7               (        forth.asm):04071                 RFCS
FBCC 7EE7D7           (        forth.asm):04072 (3)             jmp     NPOP
                      (        forth.asm):04073         
FBCF 04               (        forth.asm):04074         SWAP    fcb     4               79-STANDARD (REQ230)
FBD0 53574150         (        forth.asm):04075                 fcc     'SWAP'
FBD4 FBC4             (        forth.asm):04076                 fdb     DROP
FBD6 C7               (        forth.asm):04077                 RFCS
FBD7 BDE473           (        forth.asm):04078 (7)             jsr     MIN2PST         We need at least two cells stacked up
FBDA 10ECC4           (        forth.asm):04079 (8+0)           ldq     ,u              In place SWAP
FBDD 1E06             (        forth.asm):04080 (5)             exg     d,w
FBDF 10EDC4           (        forth.asm):04081 (8+0)           stq     ,u
FBE2 39               (        forth.asm):04082 (4)             rts
                      (        forth.asm):04083         
FBE3 04               (        forth.asm):04084         PICK    fcb     4               79-STANDARD (REQ240)
FBE4 5049434B         (        forth.asm):04085                 fcc     'PICK'          ( n1 -- n2 )
FBE8 FBCF             (        forth.asm):04086                 fdb     SWAP
FBEA C7               (        forth.asm):04087                 RFCS
FBEB BDE7D7           (        forth.asm):04088 (7)             jsr     NPOP            Arg <n1> to X (expressed in cells)
FBEE 301F             (        forth.asm):04089 (4+1)   PICK1   leax    -1,x            Normalize to a FORTH-83 argument
FBF0 2B0D             (        forth.asm):04090 (3)             bmi     @pckerr         Cannot be negative
FBF2 CC0298           (        forth.asm):04091 (3)             ldd     #NSTBOT
FBF5 103230           (        forth.asm):04092 (4)             subr    u,d
FBF8 1044             (        forth.asm):04093 (2)             lsrd                    D has the data stack depth in cells
FBFA 103701           (        forth.asm):04094 (4)             cmpr    d,x
FBFD 2505             (        forth.asm):04095 (3)             blo     @pick1
FBFF C60D             (        forth.asm):04096 (2)     @pckerr ldb     #13             Argument is greater than DEPTH
FC01 BDE73F           (        forth.asm):04097 (7)             jsr     ERRHDLR         No return
FC04 1F10             (        forth.asm):04098 (4)     @pick1  tfr     x,d
FC06 1048             (        forth.asm):04099 (2)             lsld                    Cell count to bytes
FC08 30CB             (        forth.asm):04100 (4+2)           leax    d,u
FC0A 1F12             (        forth.asm):04101 (4)             tfr     x,y             For the sake of ROLL's implementation
FC0C AE84             (        forth.asm):04102 (5+0)           ldx     ,x
FC0E 3610             (        forth.asm):04103                 UCNPUSH
FC10 39               (        forth.asm):04104 (4)             rts
                      (        forth.asm):04105         
FC11 04               (        forth.asm):04106         OVER    fcb     4
FC12 4F564552         (        forth.asm):04107                 fcc     'OVER'
FC16 FBE3             (        forth.asm):04108                 fdb     PICK
FC18 C7               (        forth.asm):04109                 RFCS
FC19 8E0002           (        forth.asm):04110 (3)             ldx     #2
FC1C 20D0             (        forth.asm):04111 (3)             bra     PICK1
                      (        forth.asm):04112         
FC1E 04               (        forth.asm):04113         ROLL    fcb     4
FC1F 524F4C4C         (        forth.asm):04114                 fcc     'ROLL'
FC23 FC11             (        forth.asm):04115                 fdb     OVER
FC25 C7               (        forth.asm):04116                 RFCS
FC26 BDE7D7           (        forth.asm):04117 (7)             jsr     NPOP
FC29 1F16             (        forth.asm):04118 (4)     ROLL1   tfr     x,w
FC2B 8DC1             (        forth.asm):04119 (6)             bsr     PICK1           Let PICK do the error handling
FC2D 3121             (        forth.asm):04120 (4+1)           leay    1,y             Point to the LSB since we're moving backward
FC2F 1F21             (        forth.asm):04121 (4)             tfr     y,x
FC31 301E             (        forth.asm):04122 (4+1)           leax    -2,x
FC33 103066           (        forth.asm):04123 (4)             addr    w,w
FC36 113912           (        forth.asm):04124 (6+?)           tfm     x-,y-
FC39 7EE7D7           (        forth.asm):04125 (3)             jmp     NPOP
                      (        forth.asm):04126         
FC3C 03               (        forth.asm):04127         ROT     fcb     3
FC3D 524F54           (        forth.asm):04128                 fcc     'ROT'
FC40 FC1E             (        forth.asm):04129                 fdb     ROLL
FC42 C7               (        forth.asm):04130                 RFCS
FC43 8E0003           (        forth.asm):04131 (3)             ldx     #3
FC46 20E1             (        forth.asm):04132 (3)             bra     ROLL1
                      (        forth.asm):04133         
FC48 04               (        forth.asm):04134         MROT    fcb     4
FC49 2D524F54         (        forth.asm):04135                 fcc     '-ROT'
FC4D FC3C             (        forth.asm):04136                 fdb     ROT
FC4F C7               (        forth.asm):04137                 RFCS
FC50 8DF1             (        forth.asm):04138                 RFXT    bsr,ROT+6       XT for ROT
FC52 20EF             (        forth.asm):04139                 RFXT    bra,ROT+6       XT for ROT
                      (        forth.asm):04140         
FC54 02               (        forth.asm):04141         CCOMMA  fcb     2               79-STANDARD (REF)
FC55 432C             (        forth.asm):04142                 fcc     'C,'
FC57 FC48             (        forth.asm):04143                 fdb     MROT
FC59 C7               (        forth.asm):04144                 RFCS
FC5A BDE7D7           (        forth.asm):04145 (7)             jsr     NPOP
FC5D 1F10             (        forth.asm):04146 (4)             tfr     x,d
FC5F 109E08           (        forth.asm):04147 (5)             ldy     DICEND
FC62 E7A0             (        forth.asm):04148 (4+1)           stb     ,y+
FC64 109F08           (        forth.asm):04149 (5)             sty     DICEND
FC67 39               (        forth.asm):04150 (4)             rts
                      (        forth.asm):04151         
FC68 01               (        forth.asm):04152         COMMA   fcb     1               79-STANDARD (REQ143)
FC69 2C               (        forth.asm):04153                 fcc     ','
FC6A FC54             (        forth.asm):04154                 fdb     CCOMMA
FC6C C7               (        forth.asm):04155                 RFCS
FC6D BDE7D7           (        forth.asm):04156 (7)             jsr     NPOP
FC70 109E08           (        forth.asm):04157 (5)             ldy     DICEND
FC73 AFA1             (        forth.asm):04158 (5+2)           stx     ,y++
FC75 109F08           (        forth.asm):04159 (5)             sty     DICEND
FC78 39               (        forth.asm):04160 (4)             rts
                      (        forth.asm):04161         
FC79 05               (        forth.asm):04162         ALLOT   fcb     5               79-STANDARD (REQ154)
FC7A 414C4C4F54       (        forth.asm):04163                 fcc     'ALLOT'         ( signedbytecount -- )
FC7F FC68             (        forth.asm):04164                 fdb     COMMA
FC81 C7               (        forth.asm):04165                 RFCS
FC82 BDE7D7           (        forth.asm):04166 (7)             jsr     NPOP
FC85 DC08             (        forth.asm):04167 (4)             ldd     DICEND
FC87 308B             (        forth.asm):04168 (4+2)           leax    d,x
FC89 9F08             (        forth.asm):04169 (4)             stx     DICEND
FC8B 39               (        forth.asm):04170 (4)             rts
                      (        forth.asm):04171         
FC8C 04               (        forth.asm):04172         FILL    fcb     4               79-STANDARD (REQ234)
FC8D 46494C4C         (        forth.asm):04173                 fcc     'FILL'
FC91 FC79             (        forth.asm):04174                 fdb     ALLOT
FC93 C7               (        forth.asm):04175                 RFCS
FC94 BDE7D7           (        forth.asm):04176 (7)             jsr     NPOP
FC97 1F16             (        forth.asm):04177 (4)             tfr     x,w             Byte fill value to W
FC99 BDE7D7           (        forth.asm):04178 (7)     FILL1   jsr     NPOP
FC9C 1F12             (        forth.asm):04179 (4)             tfr     x,y             Byte count to Y
FC9E 1E26             (        forth.asm):04180 (5)             exg     y,w             Byte count to W, byte fill value to Y
FCA0 BDE7D7           (        forth.asm):04181 (7)             jsr     NPOP            Destination address to X
FCA3 105D             (        forth.asm):04182 (2)             tstw
FCA5 2F0B             (        forth.asm):04183 (3)             ble     @filend
FCA7 1F20             (        forth.asm):04184 (4)             tfr     y,d             Byte fill value to B
FCA9 E784             (        forth.asm):04185 (4+0)           stb     ,x
FCAB 105A             (        forth.asm):04186 (2)             decw
FCAD 3101             (        forth.asm):04187 (4+1)           leay    1,x
FCAF 113812           (        forth.asm):04188 (6+?)           tfm     x+,y+
FCB2 39               (        forth.asm):04189 (4)     @filend rts
                      (        forth.asm):04190         
FCB3 06               (        forth.asm):04191         BLANKS  fcb     6               79-STANDARD (REF152)
FCB4 424C414E4B53     (        forth.asm):04192                 fcc     'BLANKS'
FCBA FC8C             (        forth.asm):04193                 fdb     FILL
FCBC C7               (        forth.asm):04194                 RFCS
FCBD 10860020         (        forth.asm):04195 (4)             ldw     #SP
FCC1 20D6             (        forth.asm):04196 (3)             bra     FILL1
                      (        forth.asm):04197         
FCC3 06               (        forth.asm):04198         CMOVED  fcb     6               FORTH-83
FCC4 434D4F56453E     (        forth.asm):04199                 fcc     'CMOVE>'
FCCA FCB3             (        forth.asm):04200                 fdb     BLANKS
FCCC C7               (        forth.asm):04201                 RFCS
FCCD BDE57D           (        forth.asm):04202 (7)             jsr     ACQMOVP
FCD0 105D             (        forth.asm):04203 (2)             tstw
FCD2 270D             (        forth.asm):04204 (3)             beq     @cmovd1
FCD4 105A             (        forth.asm):04205 (2)             decw
FCD6 103061           (        forth.asm):04206 (4)             addr    w,x
FCD9 103062           (        forth.asm):04207 (4)             addr    w,y
FCDC 105C             (        forth.asm):04208 (2)             incw
FCDE 113912           (        forth.asm):04209 (6+?)           tfm     x-,y-
FCE1 39               (        forth.asm):04210 (4)     @cmovd1 rts
                      (        forth.asm):04211         
FCE2 05               (        forth.asm):04212         CMOVE   fcb     5               79-STANDARD (REQ153)
FCE3 434D4F5645       (        forth.asm):04213                 fcc     'CMOVE'
FCE8 FCC3             (        forth.asm):04214                 fdb     CMOVED
FCEA C7               (        forth.asm):04215                 RFCS
FCEB BDE57D           (        forth.asm):04216 (7)             jsr     ACQMOVP
FCEE 113812           (        forth.asm):04217 (6+?)           tfm     x+,y+
FCF1 39               (        forth.asm):04218 (4)             rts
                      (        forth.asm):04219         
FCF2 04               (        forth.asm):04220         MOVE    fcb     4               79-STANDARD (REQ113)
FCF3 4D4F5645         (        forth.asm):04221                 fcc     'MOVE'          ( srcaddr dstaddr ncells -- )
FCF7 FCE2             (        forth.asm):04222                 fdb     CMOVE
FCF9 C7               (        forth.asm):04223                 RFCS
FCFA BDE57D           (        forth.asm):04224 (7)             jsr     ACQMOVP
FCFD 105D             (        forth.asm):04225 (2)             tstw
FCFF 2F06             (        forth.asm):04226 (3)             ble     @move1
FD01 103066           (        forth.asm):04227 (4)             addr    w,w             Convert cells to bytes
FD04 113812           (        forth.asm):04228 (6+?)           tfm     x+,y+
FD07 39               (        forth.asm):04229 (4)     @move1  rts
                      (        forth.asm):04230         
FD08 05               (        forth.asm):04231         CELLS   fcb     5               ANSI-X3.215-1994
FD09 43454C4C53       (        forth.asm):04232                 fcc     'CELLS'
FD0E FCF2             (        forth.asm):04233                 fdb     MOVE
FD10 C7               (        forth.asm):04234                 RFCS
FD11 BDE7D7           (        forth.asm):04235 (7)             jsr     NPOP
FD14 103011           (        forth.asm):04236 (4)             addr    x,x
FD17 3610             (        forth.asm):04237                 UCNPUSH
FD19 39               (        forth.asm):04238 (4)             rts
                      (        forth.asm):04239         
FD1A 04               (        forth.asm):04240         LAST    fcb     4               79-STANDARD (REF)
FD1B 4C415354         (        forth.asm):04241                 fcc     'LAST'
FD1F FD08             (        forth.asm):04242                 fdb     CELLS
FD21 C7               (        forth.asm):04243                 RFCS
FD22 9E06             (        forth.asm):04244 (4)             ldx     LSTWAD
FD24 7EE7C9           (        forth.asm):04245 (3)             jmp     NPUSH
                      (        forth.asm):04246         
FD27 04               (        forth.asm):04247         HERE    fcb     4               79-STANDARD (REQ188)
FD28 48455245         (        forth.asm):04248                 fcc     'HERE'
FD2C FD1A             (        forth.asm):04249                 fdb     LAST
FD2E C7               (        forth.asm):04250                 RFCS
FD2F 9E08             (        forth.asm):04251 (4)             ldx     DICEND
FD31 7EE7C9           (        forth.asm):04252 (3)             jmp     NPUSH
                      (        forth.asm):04253         
FD34 02               (        forth.asm):04254         PLUSST  fcb     2               79-STANDARD (REQ157)
FD35 2B21             (        forth.asm):04255                 fcc     '+!'            ( incr addr -- )
FD37 FD27             (        forth.asm):04256                 fdb     HERE
FD39 C7               (        forth.asm):04257                 RFCS
FD3A BDE473           (        forth.asm):04258 (7)             jsr     MIN2PST         We need at least two cells stacked up
FD3D AEC4             (        forth.asm):04259 (5+0)           ldx     ,u              ADDR to X
FD3F EC84             (        forth.asm):04260 (5+0)           ldd     ,x              @ADDR to D
FD41 E342             (        forth.asm):04261 (5+1)           addd    2,u             Add INCR to D
FD43 ED84             (        forth.asm):04262 (5+0)   PLUSST1 std     ,x              Store the sum back to ADDR
FD45 3344             (        forth.asm):04263 (4+1)           leau    4,u             Drop two cells from the data stack
FD47 39               (        forth.asm):04264 (4)             rts
                      (        forth.asm):04265         
FD48 03               (        forth.asm):04266         ONEPST  fcb     3               79-STANDARD (REF)
FD49 312B21           (        forth.asm):04267                 fcc     '1+!'
FD4C FD34             (        forth.asm):04268                 fdb     PLUSST
FD4E C7               (        forth.asm):04269                 RFCS
FD4F BDE46E           (        forth.asm):04270 (7)             jsr     MIN1PST         At least one cell needs to be stacked up
FD52 AEC4             (        forth.asm):04271 (5+0)           ldx     ,u
FD54 EC84             (        forth.asm):04272 (5+0)           ldd     ,x
FD56 104C             (        forth.asm):04273 (2)             incd
FD58 ED84             (        forth.asm):04274 (5+0)           std     ,x
FD5A 3342             (        forth.asm):04275 (4+1)           leau    2,u
FD5C 39               (        forth.asm):04276 (4)             rts
                      (        forth.asm):04277         
FD5D 02               (        forth.asm):04278         MINUSST fcb     2               79-STANDARD (REQ157)
FD5E 2D21             (        forth.asm):04279                 fcc     '-!'            ( incr addr -- )
FD60 FD48             (        forth.asm):04280                 fdb     ONEPST
FD62 C7               (        forth.asm):04281                 RFCS
FD63 BDE473           (        forth.asm):04282 (7)             jsr     MIN2PST         We need at least two cells stacked up
FD66 AEC4             (        forth.asm):04283 (5+0)           ldx     ,u              ADDR to X
FD68 EC84             (        forth.asm):04284 (5+0)           ldd     ,x              @ADDR to D
FD6A A342             (        forth.asm):04285 (5+1)           subd    2,u             Substract INCR from D
FD6C 20D5             (        forth.asm):04286 (3)             bra     PLUSST1
                      (        forth.asm):04287         
FD6E 02               (        forth.asm):04288         CSTORE  fcb     2               79-STANDARD (REQ219)
FD6F 4321             (        forth.asm):04289                 fcc     'C!'            ( val8 addr -- )
FD71 FD5D             (        forth.asm):04290                 fdb     MINUSST
FD73 C7               (        forth.asm):04291                 RFCS
FD74 BDE473           (        forth.asm):04292 (7)             jsr     MIN2PST         We need at least two cells stacked up
FD77 A643             (        forth.asm):04293 (4+1)           lda     3,u             VAL8 to A
FD79 A7D4             (        forth.asm):04294 (4+3)           sta     [,u]            Actual store to ADDR
FD7B 3344             (        forth.asm):04295 (4+1)           leau    4,u             Drop two cells from the data stack
FD7D 39               (        forth.asm):04296 (4)             rts
                      (        forth.asm):04297         
FD7E 01               (        forth.asm):04298         STORE   fcb     1               79-STANDARD (REQ112)
FD7F 21               (        forth.asm):04299                 fcc     '!'             ( data addr -- )
FD80 FD6E             (        forth.asm):04300                 fdb     CSTORE
FD82 C7               (        forth.asm):04301                 RFCS
FD83 BDE473           (        forth.asm):04302 (7)             jsr     MIN2PST         At least two cells need to be stacked up
FD86 EC42             (        forth.asm):04303 (5+1)           ldd     2,u             DATA to D
FD88 EDD4             (        forth.asm):04304 (5+3)           std     [,u]            Actual store to ADDR
FD8A 3344             (        forth.asm):04305 (4+1)           leau    4,u             Drop two cells from the user stack
FD8C 39               (        forth.asm):04306 (4)             rts
                      (        forth.asm):04307         
FD8D 02               (        forth.asm):04308         CFETCH  fcb     2               79-STANDARD (REQ156)
FD8E 4340             (        forth.asm):04309                 fcc     'C@'            ( addr -- val8 )
FD90 FD7E             (        forth.asm):04310                 fdb     STORE
FD92 C7               (        forth.asm):04311                 RFCS
FD93 BDE46E           (        forth.asm):04312 (7)             jsr     MIN1PST         We need at least one cell stacked up
FD96 4F               (        forth.asm):04313 (1)             clra
FD97 E6D4             (        forth.asm):04314 (4+3)           ldb     [,u]
FD99 EDC4             (        forth.asm):04315 (5+0)           std     ,u
FD9B 39               (        forth.asm):04316 (4)             rts
                      (        forth.asm):04317         
FD9C 01               (        forth.asm):04318         QMARK   fcb     1               79-STANDARD (REQ194)
FD9D 3F               (        forth.asm):04319                 fcc     '?'
FD9E FD8D             (        forth.asm):04320                 fdb     CFETCH
FDA0 C7               (        forth.asm):04321                 RFCS
FDA1 BD0C65           (        forth.asm):04322 (7)             jsr     RAMFTCH         Call the RAM based incarnation of @
FDA4 7EF60B           (        forth.asm):04323                 RFXT    jmp,DOT+4       XT for .
                      (        forth.asm):04324         
                      (        forth.asm):04325         * End of ROM part of the builtin dictionary.
     FDA7             (        forth.asm):04326         THEEND  equ     *               This is the end, Beautiful friend
                      (        forth.asm):04327         *                               This is the end, My only friend
                      (        forth.asm):04328         
                      (        forth.asm):04329         * This transactional word is relocated to RAM, so that we can compile new
                      (        forth.asm):04330         * definitions. FORTHIN will take care of that and adjust the relevant pointers.
FDA7 01               (        forth.asm):04331         FETCH   fcb     1               79-STANDARD (REQ199)
FDA8 40               (        forth.asm):04332                 fcc     '@'             ( addr -- data )
FDA9 FD9C             (        forth.asm):04333                 fdb     QMARK
FDAB C7               (        forth.asm):04334                 RFCS
FDAC BDE46E           (        forth.asm):04335 (7)             jsr     MIN1PST         At least one cell needs to be stacked up
FDAF ECD4             (        forth.asm):04336 (5+3)           ldd     [,u]
FDB1 EDC4             (        forth.asm):04337 (5+0)           std     ,u              Returned through the data stack
FDB3 39               (        forth.asm):04338 (4)             rts
                      (        forth.asm):04339         
     FDB4             (        forth.asm):04340         REALEND equ     *
                      (        forth.asm):04341         
                      (        forth.asm):04342         *******************************************************************************
                      (        forth.asm):04343         * String literals.
                      (        forth.asm):04344         
                      (        forth.asm):04345         * Using CR+LF as it is Minicom's default.
                      (        forth.asm):04346         
                      (        forth.asm):04347         * Clear the screen, VT100 style.
FDB4 1B5B481B5B4A0D00 (        forth.asm):04348         CSVT100 fcb     $1B,'[','H',$1B,'[','J',CR,NUL
                      (        forth.asm):04349         
FDBC 0D0A             (        forth.asm):04350         BOOTMSG fcb     CR,LF
                      (        forth.asm):04351                 IFNE    RTCFEAT
                      (        forth.asm):04352                 fcc     'Z79Forth 6309/R FORTH-79 Standard Sub-set'
                      (        forth.asm):04353                 ELSE
FDBE 5A3739466F727468 (        forth.asm):04354                 fcc     'Z79Forth 6309/I FORTH-79 Standard Sub-set'
     20363330392F4920
     464F5254482D3739
     205374616E646172
     64205375622D7365
     74
                      (        forth.asm):04355                 ENDC                    RTCFEAT
FDE7 0D0A             (        forth.asm):04356                 fcb     CR,LF
FDE9 3230323231303137 (        forth.asm):04357                 fcc     '20221017 Copyright Francois Laagel (2019)'
     20436F7079726967
     6874204672616E63
     6F6973204C616167
     656C202832303139
     29
FE12 0D0A0D0A00       (        forth.asm):04358                 fcb     CR,LF,CR,LF,NUL
                      (        forth.asm):04359         
FE17 52414D204F4B3A20 (        forth.asm):04360         RAMOKM  fcc     'RAM OK: 32 KB'
     3332204B42
FE24 0D0A00           (        forth.asm):04361         CRLFSTR fcb     CR,LF,NUL
                      (        forth.asm):04362         
FE27 52414D2063686563 (        forth.asm):04363         RAMFM   fcc     'RAM check failed'
     6B206661696C6564
FE37 0D0A00           (        forth.asm):04364                 fcb     CR,LF,NUL
                      (        forth.asm):04365         
                      (        forth.asm):04366                 IFNE    RTCFEAT
FE3A                  (        forth.asm):04367         RTPRESM fcc     'MC146818 RTC'
                      (        forth.asm):04368                 fcb     CR,LF,NUL
                      (        forth.asm):04369                 ENDC
                      (        forth.asm):04370         
                      (        forth.asm):04371                 IFEQ    CSSNTVE
FE3A 206F6B           (        forth.asm):04372         OKFEEDB fcc     ' ok'           As per GNU Forth's implementation...
                      (        forth.asm):04373                 ELSE
FE3D                  (        forth.asm):04374         OKFEEDB fcc     ' OK'
                      (        forth.asm):04375                 ENDC                    CSSNTVE
FE3D 0D0A00           (        forth.asm):04376                 fcb     CR,LF,NUL
                      (        forth.asm):04377         
                      (        forth.asm):04378         * Error messages for IODZHDL.
FE40 496C6C6567616C20 (        forth.asm):04379         IOPERRM fcn     'Illegal opcode near '
     6F70636F6465206E
     6561722000
FE55 4469766973696F6E (        forth.asm):04380         DV0ERRM fcn     'Division by 0 near '
     2062792030206E65
     61722000
                      (        forth.asm):04381         
FE69 4461746120737461 (        forth.asm):04382         ERRMTBL fcn     'Data stack overflow'   Error 0
     636B206F76657266
     6C6F7700
FE7D 4461746120737461 (        forth.asm):04383                 fcn     'Data stack underflow'  Error 1
     636B20756E646572
     666C6F7700
FE92 3F00             (        forth.asm):04384                 fcn     '?'                     Error 2
FE94 557365722041424F (        forth.asm):04385                 fcn     'User ABORT'            Error 3
     525400
FE9F 00               (        forth.asm):04386                 fcn     ''                      Error 4 (formerly "Division by zero")
FEA0 4D697373696E6720 (        forth.asm):04387                 fcn     'Missing word name'     Error 5
     776F7264206E616D
     6500
FEB2 496E636F72726563 (        forth.asm):04388                 fcn     'Incorrect STATE'       Error 6
     7420535441544500
FEC2 52657475726E2073 (        forth.asm):04389                 fcn     'Return stack overflow' Error 7
     7461636B206F7665
     72666C6F7700
FED8 52657475726E2073 (        forth.asm):04390                 fcn     'Return stack underflow' Error 8
     7461636B20756E64
     6572666C6F7700
FEEF 496C6C6567616C20 (        forth.asm):04391                 fcn     'Illegal construct'     Error 9
     636F6E7374727563
     7400
FF01 417373657274696F (        forth.asm):04392                 fcn     'Assertion failed'      Error 10
     6E206661696C6564
     00
FF12 522F4F20776F7264 (        forth.asm):04393                 fcn     'R/O word'              Error 11
     00
FF1B 4D697373696E6720 (        forth.asm):04394                 fcn     'Missing delimiter'     Error 12
     64656C696D697465
     7200
FF2D 496C6C6567616C20 (        forth.asm):04395                 fcn     'Illegal argument'      Error 13
     617267756D656E74
     00
FF3E 4E6F206D61746368 (        forth.asm):04396                 fcn     'No matching CREATE'    Error 14
     696E672043524541
     544500
FF51 496E76616C696420 (        forth.asm):04397                 fcn     'Invalid BASE'          Error 15
     4241534500
FF5E 576F7264206E616D (        forth.asm):04398                 fcn     'Word name too long'    Error 16
     6520746F6F206C6F
     6E6700
FF71 494F206572726F72 (        forth.asm):04399                 fcn     'IO error'              Error 17
     00
                      (        forth.asm):04400         
                      (        forth.asm):04401         * A-list used for numeric literal base prefixes.
FF7A 24               (        forth.asm):04402         BASALST fcc     '$'             Hexadecimal prefix
FF7B 10               (        forth.asm):04403                 fcb     16
FF7C 26               (        forth.asm):04404                 fcc     '&'             Decimal prefix (as in LWASM, VolksForth)
FF7D 0A               (        forth.asm):04405                 fcb     10
FF7E 23               (        forth.asm):04406                 fcc     '#'             Decimal prefix (an ANSI concession)
FF7F 0A               (        forth.asm):04407                 fcb     10
FF80 25               (        forth.asm):04408                 fcc     '%'             Binary prefix
FF81 02               (        forth.asm):04409                 fcb     2
FF82 40               (        forth.asm):04410                 fcc     '@'             Octal prefix
FF83 08               (        forth.asm):04411                 fcb     8
FF84 00               (        forth.asm):04412                 fcb     0               End of list marker
                      (        forth.asm):04413         
                      (        forth.asm):04414         * Under no circumstance should the following symbol be negative!
     006B             (        forth.asm):04415         AVL     equ     VECTBL-*        Available EEPROM space left
                      (        forth.asm):04416         
                      (        forth.asm):04417         *******************************************************************************
                      (        forth.asm):04418         * Interrupt vector table
                      (        forth.asm):04419                 org     VECTBL
                      (        forth.asm):04420         
FFF0 E000             (        forth.asm):04421                 fdb     IODZHDL         Illegal opcode/Division by zero trap
FFF2 E036             (        forth.asm):04422                 fdb     SWI3HDL         SWI 3 interrupt vector address
FFF4 E036             (        forth.asm):04423                 fdb     SWI2HDL         SWI 2 interrupt vector address
FFF6 E240             (        forth.asm):04424                 fdb     FIRQHDL         FIRQ interrupt vector address
FFF8 E036             (        forth.asm):04425                 fdb     IRQHDL          IRQ interrupt vector address
FFFA E036             (        forth.asm):04426                 fdb     SWIHDL          SWI interrupt vector address
FFFC E1C8             (        forth.asm):04427                 fdb     NMIHDL          NMI vector address
FFFE E037             (        forth.asm):04428                 fdb     RSTHDL          RESET vector address
                      (        forth.asm):04429         

Symbol Table:
[ G] _BS                              E2F5
[ G] _INTERP                          E0CA
[ G] ABORT                            F0B2
[ G] ABS                              EF73
[ G] AC8N1                            0014
[ G] ACCEPT                           F75A
[ G] ACDIV16                          0001
[ G] ACIACTL                          D800
[ G] ACIADAT                          D801
[ G] ACIISVC                          0080
[ G] ACIOVRN                          0020
[ G] ACIRDRF                          0001
[ G] ACIRSET                          0043
[ G] ACIRTS0                          0095
[ G] ACIRTS1                          00D5
[ G] ACITDRE                          0002
[ G] ACQMOVP                          E57D
[ G] ACQVMRA                          E580
[ G] ACRDINT                          0080
[ G] ACRST                            0003
[ G] ACRTS0                           0000
[ G] ACRTS1                           0040
[ G] ADDS                             E1A8
[ G] ADIV16                           E17B
[ G] AGAIN                            EFAE
[ G] AGAIN1                           EFC0
[ G] AHEAD                            ED80
[ G] AHEAD1                           ED8C
[ G] ALLOT                            FC79
[ G] ANCMPF                           012E
[ G] AND                              EE60
[ G] AVL                              006B
[ G] BALCHK                           E81E
[ G] BALERR                           E823
[ G] BALNCD                           012F
[ G] BASALST                          FF7A
[ G] BASBKUP                          0130
[ G] BASE                             FAF2
[ G] BCSOPC                           2503
[ G] BDICEND                          010C
[ G] BDIRTY                           0004
[ G] BEGIN                            EF9E
[ G] BFDISP                           0410
[ G] BIN                              FB00
[ G] BINUSE                           0001
[ G] BKCHAR                           F242
[ G] BKIN2PT                          E828
[ G] BKQUOT                           F0F9
[ G] BKSLSH                           F2F5
[ G] BL                               F677
[ G] BLANKS                           FCB3
[ G] BLK                              EA70
[ G] BLKSIZ                           0400
[ G] BLOCK                            EA41
[ G] BLSTWAD                          010A
[ G] BMAPPD                           0002
[ G] BNEOPC                           2603
[ G] BOBLKNO                          0402
[ G] BOFLAGS                          0401
[ G] BOOTMSG                          FDBC
[ G] BOTERM                           0400
[ G] BS                               0008
[ G] BSBFADR                          011E
[ G] BUF0                             0440
[ G] BUF1                             0850
[ G] BUFFER                           E9F4
[ G] BYE                              F238
[ G] CCOMMA                           FC54
[ G] CCREGM                           E20B
[ G] CELLS                            FD08
[ G] CF1BKRD                          E933
[ G] CF1BKWR                          E94E
[ G] CF1BPRE                          E916
[ G] CF1SRD                           E8E2
[ G] CF1SWR                           E901
[ G] CFANTHS                          E88D
[ G] CFBASE                           C000
[ G] CFBSYB                           0080
[ G] CFCARDP                          013F
[ G] CFCHIGR                          C005
[ G] CFCLOWR                          C004
[ G] CFCMDIS                          E872
[ G] CFCMMIR                          0140
[ G] CFCOMDR                          C007
[ G] CFDATAR                          C000
[ G] CFDRHDR                          C006
[ G] CFDRQB                           0008
[ G] CFDRSEL                          E884
[ G] CFDSCB                           0010
[ G] CFDWFB                           0020
[ G] CFERRB                           0001
[ G] CFERRCD                          0141
[ G] CFERRCK                          E865
[ G] CFERROR                          C001
[ G] CFETCH                           FD8D
[ G] CFFEATR                          C001
[ G] CFIDDEV                          00EC
[ G] CFINIT                           E8AB
[ G] CFLAG                            0001
[ G] CFR1SRA                          E900
[ G] CFRDY                            E84F
[ G] CFRDYB                           0040
[ G] CFRSCTS                          0020
[ G] CFSCNTR                          C002
[ G] CFSCSZ                           0200
[ G] CFSETFT                          00EF
[ G] CFSNUMR                          C003
[ G] CFSTATR                          C007
[ G] CFWAIT                           E847
[ G] CFWSCTS                          0030
[ G] CHAR                             F251
[ G] CHKNDPT                          E463
[ G] CKBASE                           E3B2
[ G] CKBASRA                          E3C2
[ G] CKDPTRA                          E46E
[ G] CKNBPFX                          E387
[ G] CMDBFSZ                          0084
[ G] CMDBUF                           0318
[ G] CMDLNSZ                          0131
[ G] CMOVE                            FCE2
[ G] CMOVED                           FCC3
[ G] CMP2                             E569
[ G] CMP2RA                           E56C
[ G] CMPCOMA                          F144
[ G] COM                              EE74
[ G] COM0                             EE7B
[ G] COMMA                            FC68
[ G] COMP                             E114
[ G] COMPC                            F156
[ G] COMPC1                           F15D
[ G] COMPLRA                          E128
[ G] COMPR                            F188
[ G] CONS                             EBC7
[ G] CONTIND                          F802
[ G] CONVERT                          F486
[ G] COUNT                            F6F0
[ G] CR                               000D
[ G] CREAT1                           EB6E
[ G] CREATE                           EB4C
[ G] CRLF                             F6BC
[ G] CRLFSTR                          FE24
[ G] CSPOP                            E7D7
[ G] CSPUSH                           E7C9
[ G] CSSNTVE                          0000
[ G] CSTORE                           FD6E
[ G] CSUMFLM                          EC8A
[ G] CSVT100                          FDB4
[ G] CURTOKL                          013A
[ G] CVISSGN                          0139
[ G] CVNSTR                           E41A
[ G] CVT                              F54B
[ G] CVT0                             F552
[ G] CVT1                             F55A
[ G] CVTB                             F5FA
[ G] CVTE                             F4FF
[ G] CVTFCN                           0136
[ G] DASHTR                           F706
[ G] DDUMP                            FB51
[ G] DEBUG                            0000
[ G] DECIMAL                          FB1C
[ G] DEFFLG                           013C
[ G] DEFFLM                           0040
[ G] DEPTH                            EB36
[ G] DEV0                             C000
[ G] DEV1                             C400
[ G] DEV2                             C800
[ G] DEV3                             CC00
[ G] DEV4                             D000
[ G] DEV5                             D400
[ G] DEV6                             D800
[ G] DEV7                             DC00
[ G] DICEND                           0108
[ G] DIFF                             EE00
[ G] DIV                              F947
[ G] DIV1                             F950
[ G] DIVFCN                           0133
[ G] DLESS                            F3DC
[ G] DMINUS                           F3B6
[ G] DNEG                             F393
[ G] DO                               ECEC
[ G] DOES                             EB76
[ G] DOESEX                           EB85
[ G] DOEX                             ECFF
[ G] DOT                              F606
[ G] DOTR                             F630
[ G] DOTR0                            F63A
[ G] DOTTICK                          FB3A
[ G] DPLUS                            F37A
[ G] DPOPRA                           E7E8
[ G] DPREGM                           E217
[ G] DPSHRA                           E7D6
[ G] DREGM                            E20F
[ G] DROP                             FBC4
[ G] DUP                              FBB5
[ G] DV0ERRM                          FE55
[ G] DZEQ                             F3CF
[ G] EBUFS                            E969
[ G] ELSE                             EDC1
[ G] EMIT                             F856
[ G] EMPT1B                           E982
[ G] EMPTYB                           E97A
[ G] EMXASXT                          E153
[ G] EQ                               EDE7
[ G] ERRHD1                           E742
[ G] ERRHDLR                          E73F
[ G] ERRMTBL                          FE69
[ G] ETX                              0003
[ G] EXCT                             F221
[ G] EXIT                             EFCB
[ G] EXPCT1                           F74B
[ G] EXPECT                           F741
[ G] F83DIVF                          0134
[ G] FDCTSYM                          E58B
[ G] FDIVADJ                          F984
[ G] FETCH                            FDA7
[ G] FFLAG                            0040
[ G] FILL                             FC8C
[ G] FILL1                            FC99
[ G] FIND                             F0C0
[ G] FINDSYM                          E5FF
[ G] FIRQHDL                          E240
[ G] FLUSH                            E9CE
[ G] FNDPLD                           0110
[ G] FORGET                           F1D4
[ G] FORTHIN                          E344
[ G] FWDREF                           0116
[ G] GETCH                            E29F
[ G] GETS                             E301
[ G] HDMP2                            E199
[ G] HDMP4                            E180
[ G] HDRCSUM                          EC7E
[ G] HDRSKIP                          EC74
[ G] HERE                             FD27
[ G] HEX                              FB2D
[ G] HEX1D                            E167
[ G] HEXBFSZ                          0050
[ G] HEXBUF                           039C
[ G] HOLD                             F52F
[ G] HT                               0009
[ G] HVNMI                            0001
[ G] HVNMI2                           0000
[ G] ICHECK                           ECA1
[ G] IF                               ED9C
[ G] IFLAG                            0010
[ G] ILLOPC                           00C7
[ G] IMDFLG                           013B
[ G] IMDFLM                           0080
[ G] IMMED                            EC0E
[ G] IMMED1                           EC1D
[ G] INDI                             F051
[ G] INDIP                            F075
[ G] INDJ                             F07F
[ G] INDJP                            F088
[ G] INDK                             F092
[ G] INF                              EF32
[ G] INIT                             E047
[ G] INSBPAD                          F5E7
[ G] INTERP                           E0B2
[ G] INTISRA                          E104
[ G] INTRPRA                          E10F
[ G] INVERT                           EE87
[ G] IODZHDL                          E000
[ G] IOERR                            E8FB
[ G] IOPERRM                          FE40
[ G] IOSTRT                           C000
[ G] IRQHDL                           E036
[ G] ISDBLF                           0138
[ G] ISNEGF                           0137
[ G] JMPOPC                           007E
[ G] JSRLAST                          0114
[ G] JSROPC                           00BD
[ G] KEY                              F844
[ G] KEYP                             F831
[ G] LAST                             FD1A
[ G] LBRACK                           F0F1
[ G] LDXOPC                           008E
[ G] LEAVE                            F03C
[ G] LF                               000A
[ G] LIST                             EAC1
[ G] LITER                            E54D
[ G] LITERAL                          EBA3
[ G] LOAD                             F794
[ G] LOAD1                            F7A2
[ G] LOCWRT                           E4F0
[ G] LOOP                             ED08
[ G] LOOP1                            ED13
[ G] LOOPEX                           ED2C
[ G] LPAR                             F2BD
[ G] LSTWAD                           0106
[ G] LWMNRA                           E507
[ G] MAX                              EF41
[ G] MDIV                             F99E
[ G] MILLIS                           F819
[ G] MILLIS1                          F825
[ G] MIN                              EF5A
[ G] MIN1PST                          E46E
[ G] MIN2PST                          E473
[ G] MIN3PST                          E478
[ G] MIN4PST                          E47D
[ G] MINTLRA                          E0C8
[ G] MINUS                            F89A
[ G] MINUSST                          FD5D
[ G] MOD                              F991
[ G] MONFLM                           0020
[ G] MONIT1                           EC58
[ G] MONITOR                          EC49
[ G] MOVE                             FCF2
[ G] MROT                             FC48
[ G] MRUBUFA                          011C
[ G] MSLCNT                           031A
[ G] MULT                             F914
[ G] NAK                              0015
[ G] NBCTFB0                          013D
[ G] NCLR                             EB1A
[ G] NDCTWKS                          E625
[ G] NEGATE                           EF8A
[ G] NIP                              FBAA
[ G] NMCVCRA                          E13A
[ G] NMCVIRA                          E0E0
[ G] NMI2DM                           E1B3
[ G] NMI4DM                           E1B9
[ G] NMIDML                           E1BF
[ G] NMIHDL                           E1C8
[ G] NONAME                           F177
[ G] NOT                              EEDF
[ G] NPOP                             E7D7
[ G] NPUSH                            E7C9
[ G] NSTBOT                           0298
[ G] NSTKSZ                           00C0
[ G] NSTTOP                           01D8
[ G] NUL                              0000
[ G] NULP                             EEC7
[ G] NUMCVRA                          E419
[ G] NUMCVT                           E3C2
[ G] NXTBLK                           F7E7
[ G] NXTBLK1                          F7F2
[ G] OCTAL                            FB0D
[ G] OKFEEDB                          FE3A
[ G] ONEL                             F8D6
[ G] ONEM                             F8AB
[ G] ONEP                             F879
[ G] ONEPST                           FD48
[ G] OR                               EE4D
[ G] OVER                             FC11
[ G] PAD                              F6C5
[ G] PADBSZ                           0051
[ G] PADBUF                           0186
[ G] PAGE                             F6AE
[ G] PAYLOAD                          FA01
[ G] PCREGM                           E228
[ G] PICK                             FBE3
[ G] PICK1                            FBEE
[ G] PLOAD                            010E
[ G] PLOOP                            ED31
[ G] PLOOPEX                          ED3F
[ G] PLOPEX1                          ED42
[ G] PLUS                             F868
[ G] PLUSST                           FD34
[ G] PLUSST1                          FD43
[ G] POSTPON                          F105
[ G] pragma                           0000
[ G] PRBLKIN                          E712
[ G] PSTR                             F313
[ G] PTOP0                            F60F
[ G] PUTCH                            E2CB
[ G] PUTCR                            E2EB
[ G] PUTS                             E2DE
[ G] QMARK                            FD9C
[ G] QRYDUP                           FB8C
[ G] QUIT                             F09B
[ G] RAMCHK                           E057
[ G] RAMFAIL                          E069
[ G] RAMFM                            FE27
[SG] RAMFTCH                          0C65
[SG] RAMFTCH                          0C64
[ G] RAMOK                            E07B
[ G] RAMOKM                           FE17
[ G] RAMSIZE                          8000
[ G] RAMSTRT                          0000
[ G] RBRACK                           F0E7
[ G] RCLR                             EB26
[ G] RDEPTH                           0132
[ G] REALEND                          FDB4
[ G] RECADDR                          0112
[ G] RECURSE                          F1C4
[SG] RELFEAT                          0001
[ G] REPEAT                           F015
[ G] RFETCH                           F06D
[ G] RFROM                            F024
[ G] ROLL                             FC1E
[ G] ROLL1                            FC29
[ G] ROMSTRT                          E000
[ G] ROT                              FC3C
[ G] RPICKN                           F057
[ G] RPOP                             E805
[ G] RPOPRA                           E81E
[ G] RPSHRA                           E804
[ G] RPUSH                            E7E9
[ G] RSBSPFX                          E3AB
[ G] RSP                              0100
[ G] RSTBOT                           0318
[ G] RSTHDL                           E037
[ G] RSTKSZ                           0080
[ G] RSTRCT                           EC27
[ G] RSTTOP                           0298
[ G] RTADV32                          0020
[ G] RTADVRS                          0070
[ G] RTARS64                          000A
[ G] RTAS                             D400
[ G] RTAUIP                           0080
[ G] RTB24                            0002
[ G] RTBDM                            0004
[ G] RTBPIE                           0040
[ G] RTBSET                           0080
[ G] RTCAVL                           013E
[ G] RTCFEAT                          0000
[ G] RTCFTCH                          EAA8
[ G] RTCPF                            0040
[ G] RTCSTOR                          EAB6
[ G] RTDS                             D401
[ G] RTODOM                           0007
[ G] RTODOW                           0006
[ G] RTOHOUR                          0004
[ G] RTOHRA                           0005
[ G] RTOMIN                           0002
[ G] RTOMINA                          0003
[ G] RTOMON                           0008
[ G] RTOPRES                          003F
[ G] RTOREGA                          000A
[ G] RTOREGB                          000B
[ G] RTOREGC                          000C
[ G] RTOREGD                          000D
[ G] RTOSEC                           0000
[ G] RTOSECA                          0001
[ G] RTOUMB                           000E
[ G] RTOYEAR                          0009
[ G] RTSOPC                           0039
[ G] RTUMSZ                           0032
[ G] SAVBUF                           E98D
[ G] SCNETOK                          E375
[ G] SCNSTOK                          E367
[ G] SCR                              EA8A
[ G] SERBCNT                          0144
[ G] SERBDEQ                          0143
[ G] SERBENQ                          0142
[ G] SERBSZ                           0040
[ G] SERBUF                           0146
[ G] SHARPS                           F53F
[ G] SHIFT                            F8EC
[ G] SIGN                             F518
[ G] SINFEQ                           EE1A
[ G] SLEN                             E231
[ G] SOURCE                           F2D7
[ G] SP                               0020
[ G] SPACE                            F683
[ G] SPACES                           F691
[ G] SQUOTE                           F328
[ G] SREGM                            E22D
[ G] SSDFEAT                          0001
[ G] STATE                            FAE3
[ G] STOD                             EB00
[ G] STORE                            FD7E
[ G] STRSL1                           F9B4
[ G] STRSLMD                          F9DF
[ G] STRSLSH                          F9AA
[ G] STSLFCN                          0135
[ G] SUP                              EF23
[ G] SWAP                             FBCF
[ G] SWDIC                            E482
[ G] SWI2HDL                          E036
[ G] SWI3HDL                          E036
[ G] SWIHDL                           E036
[ G] SYSSTAT                          F9F6
[ G] SYSSTK                           F9EC
[ G] TBUFF                            03EC
[ G] TBUFSZ                           0048
[ G] TERPRET                          F76A
[ G] THEEND                           FDA7
[ G] THEN                             EDD0
[ G] THRU                             F7C5
[ G] TICKS                            EA97
[ G] TIKSHI                           012A
[ G] TIKSLOW                          012C
[ G] TOIN                             EA7D
[ G] TOKENEP                          0104
[ G] TOKENSP                          0102
[ G] TOR                              F030
[ G] TUCK                             FB9E
[ G] TWODIV                           F937
[ G] TWODROP                          F439
[ G] TWODUP                           F448
[ G] TWOFTCH                          F472
[ G] TWOL                             F8E1
[ G] TWOM                             F8BB
[ G] TWOOVER                          F403
[ G] TWOP                             F889
[ G] TWOSTOR                          F460
[ G] TWOSWAP                          F41C
[ G] TWOTIM                           F927
[ G] TYPE                             F6D2
[ G] U2INFRD                          E162
[ G] UBASE                            0120
[ G] UBLK                             0126
[ G] UDOT                             F626
[ G] UDOTR                            F66C
[ G] UINF                             EEF8
[ G] UNLESS                           EDAF
[ G] UNLOOP                           ED70
[ G] UNMON                            EC37
[ G] UNTIL                            EFED
[ G] UPDATE                           E9D9
[ G] UREGM                            E224
[ G] USCR                             0128
[ G] USTATE                           0122
[ G] USUP                             EEE8
[ G] UTOIN                            0124
[ G] VARCON                           E55F
[ G] VARCON1                          E561
[ G] VARCON2                          E564
[ G] VARI                             EBE9
[ G] VARSPC                           0100
[ G] VECTBL                           FFF0
[ G] VLIST                            FA11
[ G] VLPRVEP                          0118
[ G] VLPRVHD                          011A
[ G] WBIFDRT                          E9A5
[ G] WDICSPC                          0C60
[ G] WHILE                            F006
[ G] WITHIN                           EF08
[ G] WORD                             F278
[ G] WREGM                            E213
[ G] WRLNMSK                          001F
[ G] WTOOLNG                          E51F
[ G] XMITOK                           0145
[ G] XOFF                             0013
[ G] XON                              0011
[ G] XOR                              EE36
[ G] XOR1                             EE48
[ G] XREGM                            E21C
[ G] YREGM                            E220
[ G] ZEROL                            F8CC
[ G] ZFLAG                            0004
[ G] ZGREAT                           EE93
[ G] ZLESS                            EEAD
