                      (        forth.asm):00001         * 6309 Forth based on my 1984/07/16 TRS-80 Model 1 level II ROM implementation.
                      (        forth.asm):00002         *
                      (        forth.asm):00003         * This work is dedicated to Alain Pinaud, author of "Programmer en Forth"
                      (        forth.asm):00004         * published by Editions du P.S.I. in 1983--i.e. my virtual mentor in the field.
                      (        forth.asm):00005         * Special thanks go William Astle for his fantastic LW Tools utility set and
                      (        forth.asm):00006         * to Robert Lipe for his advice on serial line handling. Apache subversion
                      (        forth.asm):00007         * and the sdiff utility also were on my side all the time.
                      (        forth.asm):00008         *
                      (        forth.asm):00009         * Also credited for their help: Justin Poirier (seminal HW design), Daniel
                      (        forth.asm):00010         * Tufvesson (original CompactFlash interface), Peter Minuth (general Forth
                      (        forth.asm):00011         * guruness), Paul E. Bennett (ANSI compatibility advice); Michel Jean, Bill
                      (        forth.asm):00012         * Ragsdale, Pablo Hugo Reda, Demitri Peynado and Bernd Paysan for contributed
                      (        forth.asm):00013         * application level code; Carsten Strotmann for most of the benchmarking code
                      (        forth.asm):00014         * (see https://theultimatebenchmark.org/); Gerry Jackson and Steve R. Palmer
                      (        forth.asm):00015         * (see https://github.com/gerryjackson/forth2012-test-suite) for selected
                      (        forth.asm):00016         * bits and pieces of the Forth2012 test suite (see https://forth-standard.org/).
                      (        forth.asm):00017         *
                      (        forth.asm):00018         * This is a native Forth. Not a threaded interpretive implementation.
                      (        forth.asm):00019         * Worth noticing is the fact that the return stack does not hold return
                      (        forth.asm):00020         * addresses at all. All what is stored there is loop indexes and input stream
                      (        forth.asm):00021         * parameters. Actual return addresses are kept in the system stack. All in all,
                      (        forth.asm):00022         * this is the result of the work of a 19 year old, heavily revisited 35 years
                      (        forth.asm):00023         * later. The downside of this implementation is that the generated code is
                      (        forth.asm):00024         * about 30% larger than a threaded interpretive implementation would be.
                      (        forth.asm):00025         * So it goes...
                      (        forth.asm):00026         *
                      (        forth.asm):00027         * Control flow constructs have been re-implemented based on Wonyong Koh's
                      (        forth.asm):00028         * hForth for the 8086. The original code can be consulted at
                      (        forth.asm):00029         * https://github.com/nealcrook/hForth. Of particular interest is
                      (        forth.asm):00030         * 8086/HF86RAM.ASM. Entries on the control flow stack (implemented on the
                      (        forth.asm):00031         * data stack here) are two cell entities that consist of a parameter
                      (        forth.asm):00032         * (an address), on the top of which a tag identifying the type of address
                      (        forth.asm):00033         * is pushed. They are:
                      (        forth.asm):00034         *
                      (        forth.asm):00035         * Control-flow stack item    Representation (parameter and type)
                      (        forth.asm):00036         * -----------------------    -------------------------------------
                      (        forth.asm):00037         * dest                       control-flow destination      0
                      (        forth.asm):00038         * orig                       control-flow origin           1
                      (        forth.asm):00039         * of-sys                     OF origin                     2
                      (        forth.asm):00040         * case-sys                   x (any value)                 3
                      (        forth.asm):00041         * do-sys                     ?DO origin                    DO destination
                      (        forth.asm):00042         * colon-sys                  xt of current definition     -1 [1]
                      (        forth.asm):00043         *
                      (        forth.asm):00044         * [1] Not implemented in Z79Forth/A.
                      (        forth.asm):00045         * 
                      (        forth.asm):00046         * This mechanism allows for verification of balanced control flow constructs.
                      (        forth.asm):00047         *
                      (        forth.asm):00048         * The code generated is limited to a very small instruction set:
                      (        forth.asm):00049         *
                      (        forth.asm):00050         * LDXOPC        $8E     LDX (immediate)
                      (        forth.asm):00051         * JMPOPC        $7E     JMP (extended)
                      (        forth.asm):00052         * JSROPC        $BD     JSR (extended)
                      (        forth.asm):00053         * RTSOPC        $39     RTS (inherent)
                      (        forth.asm):00054         * BCSOPC        $2503   BCS *+5 (relative) Used in LOOP, +LOOP
                      (        forth.asm):00055         * BNEOPC        $2603   BNE *+5 (relative) Used in ?DO, IF, UNTIL
                      (        forth.asm):00056         *
                      (        forth.asm):00057         * On error, the system stack pointer is reset. The return stack also is
                      (        forth.asm):00058         * but the data stack will be in the same state as when the error occurred.
                      (        forth.asm):00059         * ABORT and QUIT enforce their own ANS94 standard behaviour.
                      (        forth.asm):00060         *
                      (        forth.asm):00061         * RESTRICT is non-standard. It comes from GNU Forth (VolksForth). The " OK"
                      (        forth.asm):00062         * non-prompt string also does, by the way. Thanks to Anton Ertl for his terse
                      (        forth.asm):00063         * yet valuable input.
                      (        forth.asm):00064         *
                      (        forth.asm):00065         * .' (dot-tick) is non-standard. It comes from SwiftForth. It will be supported
                      (        forth.asm):00066         * whether or not the symbolic stack dump has been configured (see SSDFEAT in
                      (        forth.asm):00067         * constants.asm). However, please note that effective symbolic references will
                      (        forth.asm):00068         * be resolved only if the feature was enabled at compilation time. Otherwise
                      (        forth.asm):00069         * a simple HEX print of the cell at the top of the data stack will be
                      (        forth.asm):00070         * performed. This is meant to support Forth source code that does not depend
                      (        forth.asm):00071         * on the feature vector (see examples/dis.4th).
                      (        forth.asm):00072         *
                      (        forth.asm):00073         * MONITOR and ICHECK are also non-standard. They are intended to maintain and
                      (        forth.asm):00074         * verify the integrity of a checksum of the code section of RAM resident
                      (        forth.asm):00075         * words, with the exception of VARIABLEs and CREATEd words. CREATEd words,
                      (        forth.asm):00076         * if subject to the MONITOR treatment will also carry a code section
                      (        forth.asm):00077         * checksum, although this is not the default behaviour. The checksum will
                      (        forth.asm):00078         * consist in an extra byte added to every word's header. MONITOR and ICHECK
                      (        forth.asm):00079         * will be available whether or not the reliability feature has been configured
                      (        forth.asm):00080         * (see RELFEAT in constants.asm). They will only carry effective semantics
                      (        forth.asm):00081         * if the feature was actually enabled at compilation time. This is meant to
                      (        forth.asm):00082         * support Forth source code that does not depend on the feature vector.
                      (        forth.asm):00083         *
                      (        forth.asm):00084         * Experimental MC146818 RTC support: the feature is disabled by default
                      (        forth.asm):00085         * (see RTCFEAT in constants.asm) because it relies on undocumented schematics.
                      (        forth.asm):00086         * Also, the required underlying circuitry is not intended to ever become an
                      (        forth.asm):00087         * integral part of the Z79Forth reference board itself. Some better designed
                      (        forth.asm):00088         * form of it might eventually surface in the form of an extension specification.
                      (        forth.asm):00089         * At the time of this writing this is just a proof of concept, but whether or
                      (        forth.asm):00090         * not the feature is enabled, three extra words will be added to the dictionary.
                      (        forth.asm):00091         * They are RTC@ RTC! and TICKS They can be safely ignored.
                      (        forth.asm):00092         *
                      (        forth.asm):00093         * Forth source code portability note:
                      (        forth.asm):00094         * Because Z79Forth does not use the return stack to store return addresses,
                      (        forth.asm):00095         * it makes it quite easy to write code that is not readily portable to classic
                      (        forth.asm):00096         * threaded interpretive implementations. The resulting code will be simpler but
                      (        forth.asm):00097         * portability will be limited.
                      (        forth.asm):00098         *
                      (        forth.asm):00099         * Miscellaneous notes: RA stands for return address; EP for entry point.
                      (        forth.asm):00100         * CF is a shortcut for CompactFlash. TOS means top of the data/normal stack.
                      (        forth.asm):00101         * NOS stands for "next of stack", i.e. the second cell on the data stack.
                      (        forth.asm):00102         * Occasionally, CFA is used for code field address which, in this
                      (        forth.asm):00103         * implementation, is a synonym for compilation address. XT means execution
                      (        forth.asm):00104         * token--the ANSI term for a compilation address. MSC stands for most
                      (        forth.asm):00105         * significant cell; LSC for least significant cell.
                      (        forth.asm):00106         *
                      (        forth.asm):00107         * The complete guide to the HD6309 extended instruction set can be found at:
                      (        forth.asm):00108         * https://cyberabi.ipower.com/Downloads/The_6309_Book.pdf. For convenience,
                      (        forth.asm):00109         * and with the author's explicit agreement, this document has been included
                      (        forth.asm):00110         * in this distribution. This is recommended reading for anyone altering this
                      (        forth.asm):00111         * code or trying to make some sense of it!!!
                      (        forth.asm):00112         *
                      (        forth.asm):00113         * This whole effort started out as a porting endeavour and ended up being a
                      (        forth.asm):00114         * substantial rewrite, trying to take advantage of the features of the 6309
                      (        forth.asm):00115         * as much as possible. The primary goals of this implementation are:
                      (        forth.asm):00116         * reliability, performance and code compactness. A number of bugs in the
                      (        forth.asm):00117         * original code have been fixed--some remain for sure!
                      (        forth.asm):00118         *
                      (        forth.asm):00119         * Obligatory literary reference:
                      (        forth.asm):00120         * "The paper is very heavy going, and I should never have read it, had I not
                      (        forth.asm):00121         * written it myself." John E. Littlewood (1885-1977).
                      (        forth.asm):00122         *
                      (        forth.asm):00123         * The original soundtrack for this work is available at:
                      (        forth.asm):00124         * https://youtu.be/YqXZtGyFyDo?t=4023 (J.S. Bach BWV 1080, contrapunctus 14).
                      (        forth.asm):00125         
0000                  (        forth.asm):00126         pragma  opt cd,operandsizewarning
                      (        forth.asm):00127         
                      (        forth.asm):00128                 include constants.asm
                      (    constants.asm):00001         * Begin tunable parameters section.
                      (    constants.asm):00002         
     0000             (    constants.asm):00003         CSSNTVE equ     0               Words and HEX numbers are case sensitive if NZ
     0001             (    constants.asm):00004         SSDFEAT equ     1               Set to 1 to enable the symbolic stack dump feat.
     0001             (    constants.asm):00005         RELFEAT set     1               Set to 1 to enable the reliability feature
                      (    constants.asm):00006         
                      (    constants.asm):00007         * Ultimately, this one should just go and become the only available option.
     0001             (    constants.asm):00008         ANSFEAT set     1               Set to 1 to enable the ANS94 Core feature set
                      (    constants.asm):00009         
                      (    constants.asm):00010         *                               Caution: when this is enabled, you can no
                      (    constants.asm):00011         *                               longer fit a DEBUG image into an 8 KB EEPROM
     0000             (    constants.asm):00012         RTCFEAT equ     0               Cool but the reliability feature must go...
     0000             (    constants.asm):00013         DEBUG   equ     0               Enforce assertions and miscellaneous checks
     0001             (    constants.asm):00014         HVNMI   equ     1               NMI handler support
     0000             (    constants.asm):00015         HVNMI2  equ     0               NMI handler support (async input debugging)
                      (    constants.asm):00016         * Loop count for MS. This is busy waiting, so we depend on the CPU clock speed.
     031A             (    constants.asm):00017         MSLCNT  equ     794             at 4 MHz native mode
                      (    constants.asm):00018         *MSLCNT equ     994             at 5 MHz native mode
                      (    constants.asm):00019         
                      (    constants.asm):00020         * End tunable parameters section.
                      (    constants.asm):00021         
                      (    constants.asm):00022                 IFNE    RTCFEAT
0000                  (    constants.asm):00023         RELFEAT set     0               RTCFEAT disables RELFEAT
                      (    constants.asm):00024                 ELSE
                      (    constants.asm):00025                 IFNE    HVNMI
                      (    constants.asm):00026                 IFNE    HVNMI2
0000                  (    constants.asm):00027         RELFEAT set     0               HVNMI and HVNMI2 disable RELFEAT
                      (    constants.asm):00028                 ENDC                    HVNMI2
                      (    constants.asm):00029                 ENDC                    HVNMI
                      (    constants.asm):00030                 ENDC                    RTCFEAT
                      (    constants.asm):00031         
                      (    constants.asm):00032                 IFNE    ANSFEAT
     0000             (    constants.asm):00033         RELFEAT set     0
                      (    constants.asm):00034                 ENDC
                      (    constants.asm):00035         
                      (    constants.asm):00036         * Control flow stack implemented on the top of the data stack.
     E7E8             (    constants.asm):00037         CSPUSH  EQU     NPUSH
     E7F6             (    constants.asm):00038         CSPOP   EQU     NPOP
                      (    constants.asm):00039         
                      (    constants.asm):00040         * Memory map.
     0000             (    constants.asm):00041         RAMSTRT equ     $0000
     8000             (    constants.asm):00042         RAMSIZE equ     $8000
     C000             (    constants.asm):00043         IOSTRT  equ     $C000
     E000             (    constants.asm):00044         ROMSTRT equ     $E000
     FFF0             (    constants.asm):00045         VECTBL  equ     $FFF0
                      (    constants.asm):00046         
                      (    constants.asm):00047         * Base address for global variables (direct page addressed).
     0100             (    constants.asm):00048         VARSPC  equ     $100
                      (    constants.asm):00049         
                      (    constants.asm):00050         * The 74HCT138 (U7) IO address decoder maps one 1 KB area per usable device.
     C000             (    constants.asm):00051         DEV0    equ     $C000           Compact Flash memory module (optional)
     C400             (    constants.asm):00052         DEV1    equ     $C400
     C800             (    constants.asm):00053         DEV2    equ     $C800
     CC00             (    constants.asm):00054         DEV3    equ     $CC00
     D000             (    constants.asm):00055         DEV4    equ     $D000
     D400             (    constants.asm):00056         DEV5    equ     $D400           MC146818 RTC (optional)
     D800             (    constants.asm):00057         DEV6    equ     $D800           HD63B50 unit 0
     DC00             (    constants.asm):00058         DEV7    equ     $DC00
                      (    constants.asm):00059         
     D800             (    constants.asm):00060         ACIACTL equ     DEV6
     D801             (    constants.asm):00061         ACIADAT equ     DEV6+1
                      (    constants.asm):00062         
                      (    constants.asm):00063         * ACIA control register bits.
     0003             (    constants.asm):00064         ACRST   equ     %00000011       ACIA master reset
                      (    constants.asm):00065         
                      (    constants.asm):00066         * 1.84320 MHz Y1: 115200 bps in the direct path, 38400 bps in the DIV3 path
     0001             (    constants.asm):00067         ACDIV16 equ     %00000001       ACIA div 16
                      (    constants.asm):00068         
     0014             (    constants.asm):00069         AC8N1   equ     %00010100       ACIA 8N1
     0000             (    constants.asm):00070         ACRTS0  equ     %00000000       ACIA RTS# low
     0040             (    constants.asm):00071         ACRTS1  equ     %01000000       ACIA RTS# high
     0080             (    constants.asm):00072         ACRDINT equ     %10000000       IRQ on RDRF
                      (    constants.asm):00073         
     0043             (    constants.asm):00074         ACIRSET equ     ACRTS1|ACRST
     00D5             (    constants.asm):00075         ACIRTS1 equ     ACRTS1|ACRDINT|AC8N1|ACDIV16
     0095             (    constants.asm):00076         ACIRTS0 equ     ACRTS0|ACRDINT|AC8N1|ACDIV16
                      (    constants.asm):00077         
                      (    constants.asm):00078         * ACIA status register bits.
     0001             (    constants.asm):00079         ACIRDRF equ     %00000001       Receive data register full
     0002             (    constants.asm):00080         ACITDRE equ     %00000010       Transmit data register empty
     0020             (    constants.asm):00081         ACIOVRN equ     %00100000       Overrun status register bit
     0080             (    constants.asm):00082         ACIISVC equ     %10000000       Interrupt needs servicing
                      (    constants.asm):00083         
                      (    constants.asm):00084         * Compact Flash parameters.
     C000             (    constants.asm):00085         CFBASE  equ     DEV0
     C000             (    constants.asm):00086         CFDATAR equ     CFBASE          R/W data register
     C001             (    constants.asm):00087         CFERROR equ     CFBASE+1        RO error register
     C001             (    constants.asm):00088         CFFEATR equ     CFBASE+1        WO features register
     C002             (    constants.asm):00089         CFSCNTR equ     CFBASE+2        R/W sector count register
     C003             (    constants.asm):00090         CFSNUMR equ     CFBASE+3        R/W sector number register
     C004             (    constants.asm):00091         CFCLOWR equ     CFBASE+4        R/W cylinder low register
     C005             (    constants.asm):00092         CFCHIGR equ     CFBASE+5        R/W cylinder high register
     C006             (    constants.asm):00093         CFDRHDR equ     CFBASE+6        R/W drive/head register
     C007             (    constants.asm):00094         CFSTATR equ     CFBASE+7        RO status register
     C007             (    constants.asm):00095         CFCOMDR equ     CFBASE+7        WO command register
                      (    constants.asm):00096         
                      (    constants.asm):00097         * CF status bits.
     0080             (    constants.asm):00098         CFBSYB  equ     %10000000       BSY status bit
     0040             (    constants.asm):00099         CFRDYB  equ     %01000000       RDY status bit
     0020             (    constants.asm):00100         CFDWFB  equ     %00100000       DWF status bit (not used)
     0010             (    constants.asm):00101         CFDSCB  equ     %00010000       DSC status bit (not used)
     0008             (    constants.asm):00102         CFDRQB  equ     %00001000       DRQ status bit
     0001             (    constants.asm):00103         CFERRB  equ     %00000001       ERR status bit
                      (    constants.asm):00104         
     0200             (    constants.asm):00105         CFSCSZ  equ     $200            Compact Flash (IDE) sector size
                      (    constants.asm):00106         
                      (    constants.asm):00107         * CF commands.
     00EC             (    constants.asm):00108         CFIDDEV equ     $EC             Identify Device
     00EF             (    constants.asm):00109         CFSETFT equ     $EF             Set Feature
     0020             (    constants.asm):00110         CFRSCTS equ     $20             Read Sectors
     0030             (    constants.asm):00111         CFWSCTS equ     $30             Write Sectors
                      (    constants.asm):00112         
                      (    constants.asm):00113         * Buffer in-memory structure:
                      (    constants.asm):00114         * data: 1024 bytes.
                      (    constants.asm):00115         * terminator: 1 byte set to 0.
                      (    constants.asm):00116         * flags: 1 byte.
                      (    constants.asm):00117         * blknum: 2 bytes.
     0001             (    constants.asm):00118         BINUSE  equ     1               Buffer is allocated (the blknum field is valid)
     0002             (    constants.asm):00119         BMAPPD  equ     2               Block has been read from the CF device
     0004             (    constants.asm):00120         BDIRTY  equ     4               Block has been marked for update
     0400             (    constants.asm):00121         BLKSIZ  equ     2*CFSCSZ        Block size is 2 CF sectors (1 KB)
                      (    constants.asm):00122         * Buffer field offsets.
     0400             (    constants.asm):00123         BOTERM  equ     BLKSIZ          Base buffer to the 'terminator' field offset
     0401             (    constants.asm):00124         BOFLAGS equ     BLKSIZ+1        Base buffer to the 'flag' field offset
     0402             (    constants.asm):00125         BOBLKNO equ     BLKSIZ+2        Base buffer to the 'blknum' field offset
                      (    constants.asm):00126         
     0410             (    constants.asm):00127         BFDISP  equ     BUF1-BUF0       Offset between resident buffers
                      (    constants.asm):00128         
                      (    constants.asm):00129         * MC146818 RTC registers.
     D400             (    constants.asm):00130         RTAS    equ     DEV5            Latch target register address offset
     D401             (    constants.asm):00131         RTDS    equ     (DEV5+1)        Actual target register access
                      (    constants.asm):00132         * RTC internal register offsets.
     0000             (    constants.asm):00133         RTOSEC  equ     0               Seconds
     0001             (    constants.asm):00134         RTOSECA equ     1               Seconds alarm
     0002             (    constants.asm):00135         RTOMIN  equ     2               Minutes
     0003             (    constants.asm):00136         RTOMINA equ     3               Minutes alarm
     0004             (    constants.asm):00137         RTOHOUR equ     4               Hours
     0005             (    constants.asm):00138         RTOHRA  equ     5               Hours alarm
     0006             (    constants.asm):00139         RTODOW  equ     6               Day of week
     0007             (    constants.asm):00140         RTODOM  equ     7               Day of month
     0008             (    constants.asm):00141         RTOMON  equ     8               Month
     0009             (    constants.asm):00142         RTOYEAR equ     9               Year
     000A             (    constants.asm):00143         RTOREGA equ     10              Register A
     000B             (    constants.asm):00144         RTOREGB equ     11              Register B
     000C             (    constants.asm):00145         RTOREGC equ     12              Register C
     000D             (    constants.asm):00146         RTOREGD equ     13              Register D
     000E             (    constants.asm):00147         RTOUMB  equ     14              Base of user defined NVRAM storage
     0032             (    constants.asm):00148         RTUMSZ  equ     50              Size of user defined NVRAM storage
     003F             (    constants.asm):00149         RTOPRES equ     (RTOUMB+RTUMSZ-1) RTC NVRAM offset for dectecting dev presence
                      (    constants.asm):00150         
                      (    constants.asm):00151         * Register A bits.
     0080             (    constants.asm):00152         RTAUIP  equ     $80             Update in progress
     0070             (    constants.asm):00153         RTADVRS equ     $70             Divider reset, not in operation
     0020             (    constants.asm):00154         RTADV32 equ     $20             In operation, 32 KHz time base
     000A             (    constants.asm):00155         RTARS64 equ     $A              32 KHz time base, 64 Hz PI (every 15.625 ms)
                      (    constants.asm):00156         
                      (    constants.asm):00157         * Register B bits.
     0080             (    constants.asm):00158         RTBSET  equ     $80
     0040             (    constants.asm):00159         RTBPIE  equ     $40
     0004             (    constants.asm):00160         RTBDM   equ     4               Set to 1 for binary register contents
     0002             (    constants.asm):00161         RTB24   equ     2               Set to 1 for 24 hour format
                      (    constants.asm):00162         
                      (    constants.asm):00163         * Register C bits.
     0040             (    constants.asm):00164         RTCPF   equ     $40             Periodic interrupt pending flag
                      (    constants.asm):00165         
                      (    constants.asm):00166         * ASCII trivia.
     0000             (    constants.asm):00167         NUL     equ     0               End of string marker
     0003             (    constants.asm):00168         ETX     equ     3               Control-C (intr)
     0008             (    constants.asm):00169         BS      equ     8               Backspace
     0009             (    constants.asm):00170         HT      equ     9               Horizontal tab
     000A             (    constants.asm):00171         LF      equ     $0A             Aka new line
     000D             (    constants.asm):00172         CR      equ     $0D             Carriage return
     0015             (    constants.asm):00173         NAK     equ     $15             Control-U (kill)
     0020             (    constants.asm):00174         SP      equ     $20             Aka BL in Forth
     0013             (    constants.asm):00175         XOFF    equ     $13             Aka DC3
     0011             (    constants.asm):00176         XON     equ     $11             Aka DC1
                      (    constants.asm):00177         
                      (    constants.asm):00178         * Stack sizes.
     00C0             (    constants.asm):00179         NSTKSZ  equ     192             Expressed in bytes. Now only limited by RAM size
     0080             (    constants.asm):00180         RSTKSZ  equ     128             Expressed in bytes
                      (    constants.asm):00181         
                      (    constants.asm):00182         * Buffer sizes.
     0084             (    constants.asm):00183         CMDBFSZ equ     132             Command line entry buffer
     0050             (    constants.asm):00184         HEXBFSZ equ     80
     0048             (    constants.asm):00185         TBUFSZ  equ     72              Used by VLIST to print word name and CVNSTR
     0054             (    constants.asm):00186         PADBSZ  equ     84              79-STANDARD mandates a minimum of 64 bytes
     0040             (    constants.asm):00187         SERBSZ  equ     64              Serial buffer size. Needs to be a power of 2
                      (    constants.asm):00188         
                      (    constants.asm):00189         * Dictionary flag masks.
     0080             (    constants.asm):00190         IMDFLM  equ     $80             Immediate flag mask
     0040             (    constants.asm):00191         DEFFLM  equ     $40             Compilation only flag mask
                      (    constants.asm):00192                 IFNE    RELFEAT
0000                  (    constants.asm):00193         MONFLM  equ     $20             Monitored flag mask. This indicates that the
                      (    constants.asm):00194         *                               word to which it relates might be checked for
                      (    constants.asm):00195         *                               integrity. This applies by default to all words
                      (    constants.asm):00196         *                               defined with : and all constants. It might
                      (    constants.asm):00197         *                               also apply to any other CREATEd object by
                      (    constants.asm):00198         *                               resorting to the MONITOR word. Using MONITOR
                      (    constants.asm):00199         *                               on variable word contents is guaranteed to
                      (    constants.asm):00200         *                               raise ICHECK's attention.
                      (    constants.asm):00201                 ENDC
                      (    constants.asm):00202         
                      (    constants.asm):00203         * Division function codes and options.
     0000             (    constants.asm):00204         DVFSLMD equ     0               Function is /MOD
     0001             (    constants.asm):00205         DVFMOD  equ     1               Function is MOD
     0002             (    constants.asm):00206         DVFDIV  equ     2               Function is /
     0008             (    constants.asm):00207         DVOA1D  equ     8               Argument 1 is a double (FM/MOD SM/REM)
     0010             (    constants.asm):00208         DVOWSYM equ     16              Want symmetric division (default is floored)
     0007             (    constants.asm):00209         DVFMASK equ     7               Mask for extracting function codes
                      (    constants.asm):00210         
     001F             (    constants.asm):00211         WRLNMSK equ     $1F             31 character is the maximum word length
                      (    constants.asm):00212         
                      (    constants.asm):00213         * 6309 opcodes.
     008E             (    constants.asm):00214         LDXOPC  equ     $8E             LDX (immediate)
     007E             (    constants.asm):00215         JMPOPC  equ     $7E             JMP (extended)
     00BD             (    constants.asm):00216         JSROPC  equ     $BD             JSR (extended)
     0039             (    constants.asm):00217         RTSOPC  equ     $39             RTS (inherent)
     2503             (    constants.asm):00218         BCSOPC  equ     $2503           BCS *+5 (relative)
     2603             (    constants.asm):00219         BNEOPC  equ     $2603           BNE *+5 (relative)
     00C7             (    constants.asm):00220         ILLOPC  equ     $C7             An illegal operation code. Meant to raise a trap
                      (    constants.asm):00221         
     0001             (    constants.asm):00222         CFLAG   equ     1               CC bit 0 (C)
     0004             (    constants.asm):00223         ZFLAG   equ     4               CC bit 2 (Z)
     0010             (    constants.asm):00224         IFLAG   equ     $10             CC bit 4 (I)
     0040             (    constants.asm):00225         FFLAG   equ     $40             CC bit 6 (F)
                      (    constants.asm):00226         
                      (    constants.asm):00227         * RAM based execution token for @.
     0CC4             (    constants.asm):00228         RAMFTCH set     WDICSPC+4       Dictionary header overhead is word's length + 3
                      (    constants.asm):00229                 IFNE    RELFEAT         The reliability features adds one byte to the
0000                  (    constants.asm):00230         RAMFTCH set     WDICSPC+5       header: a checksum.
                      (    constants.asm):00231                 ENDC
                      (    constants.asm):00232         
                      (        forth.asm):00129         
                      (        forth.asm):00130         * Unchecked NPUSH. This is for situations in which there is absolutely no
                      (        forth.asm):00131         * chance of overflow. For instance, in case we just popped 2 cells and push
                      (        forth.asm):00132         * back one or two.
0000                  (        forth.asm):00133         UCNPUSH MACRO   NOEXPAND
                      (        forth.asm):00134                 pshu    x
                      (        forth.asm):00135                 ENDM
                      (        forth.asm):00136         
                      (        forth.asm):00137         * Unchecked NPOP. To be used only after trusted words have been invoked, i.e.
                      (        forth.asm):00138         * when one is positively sure that the data stack contains at least one cell.
0000                  (        forth.asm):00139         UCNPOP  MACRO   NOEXPAND
                      (        forth.asm):00140                 pulu    x
                      (        forth.asm):00141                 ENDM
                      (        forth.asm):00142         
                      (        forth.asm):00143         * Make sure minimum data stack requirements are satisfied upon word entry.
                      (        forth.asm):00144         * The requirement is expressed in cell size--2 bytes on the 6309.
                      (        forth.asm):00145         * \1 specifies the required number of cells.
0000                  (        forth.asm):00146         MINDREQ MACRO   NOEXPAND
                      (        forth.asm):00147                 ldd     #NSTBOT-(\1*2)  Cell count one expects to be stacked up
                      (        forth.asm):00148                 bra     CHKNDPT         No return if the condition is not met
                      (        forth.asm):00149                 ENDM
                      (        forth.asm):00150         
                      (        forth.asm):00151         * Reliability feature support: execution tokens.
                      (        forth.asm):00152         * \1 has the opcode we want to emit.
                      (        forth.asm):00153         * \2 has the execution token address, as if the header overhead always
                      (        forth.asm):00154         * was 3 bytes.
0000                  (        forth.asm):00155         RFXT    MACRO   NOEXPAND
                      (        forth.asm):00156                 IFNE    RELFEAT
                      (        forth.asm):00157                 \1      \2+1
                      (        forth.asm):00158                 ELSE
                      (        forth.asm):00159                 \1      \2
                      (        forth.asm):00160                 ENDC                    RELFEAT
                      (        forth.asm):00161                 ENDM
                      (        forth.asm):00162         
                      (        forth.asm):00163         * Reliability feature support: variable word header contents.
                      (        forth.asm):00164         * This is a dummy checksum only used for EEPROM resident words.
                      (        forth.asm):00165         * Those never are checked for code integrity by MONITOR.
0000                  (        forth.asm):00166         RFCS    MACRO   NOEXPAND
                      (        forth.asm):00167                 IFNE    RELFEAT
                      (        forth.asm):00168                 fcb     ILLOPC          Illegal opcode
                      (        forth.asm):00169                 ENDC                    RELFEAT
                      (        forth.asm):00170                 ENDM
                      (        forth.asm):00171         
                      (        forth.asm):00172         *******************************************************************************
                      (        forth.asm):00173         * RAM definitions. We cannot initialize globals from the assembly defs.
                      (        forth.asm):00174         * All we can do here is define addresses and size things up.
                      (        forth.asm):00175         
                      (        forth.asm):00176         * RAMSTART is 0. We leave page 0 unused as a bug proof area.
                      (        forth.asm):00177         * When compiled in debug mode, this area is filled with illegal
                      (        forth.asm):00178         * instruction opcodes ($C7).
                      (        forth.asm):00179         
                      (        forth.asm):00180                 org     VARSPC
                      (        forth.asm):00181         
                      (        forth.asm):00182         * Global pointers.
0100                  (        forth.asm):00183         RSP     rmb     2               The return stack pointer
0102                  (        forth.asm):00184         TOKENSP rmb     2               Token start pointer (STRS)
0104                  (        forth.asm):00185         TOKENEP rmb     2               Token end pointer (STRE)
0106                  (        forth.asm):00186         LSTWAD  rmb     2               Last defined word header pointer--LAST
0108                  (        forth.asm):00187         DICEND  rmb     2               Current end of the dictionary--HERE
010A                  (        forth.asm):00188         BLSTWAD rmb     2               Backup (was IX)
010C                  (        forth.asm):00189         BDICEND rmb     2               Backup (was IY)
010E                  (        forth.asm):00190         PLOAD   rmb     2               Word payload if found by SWDIC
0110                  (        forth.asm):00191         FNDPLD  rmb     2               Last code payload reported by FIND
0112                  (        forth.asm):00192         RECADDR rmb     2               Used by RECURSE
0114                  (        forth.asm):00193         JSRLAST rmb     2               Last compilation address of #JSROPC
0116                  (        forth.asm):00194         FWDREF  rmb     2               Address of the last forward reference
0118                  (        forth.asm):00195         RAKEVAR rmb     2               Linked list of LEAVE forward references
011A                  (        forth.asm):00196         VLPRVEP rmb     2               Used in WORDS to compute word code length
011C                  (        forth.asm):00197         VLPRVHD rmb     2               Used in WORDS to compute word code length
011E                  (        forth.asm):00198         MRUBUFA rmb     2               Most recently used buffer address
0120                  (        forth.asm):00199         BSBFADR rmb     2               Base buffer address for the input stream
                      (        forth.asm):00200         
                      (        forth.asm):00201         * Global variables.
0122                  (        forth.asm):00202         UBASE   rmb     2               Base for numbers input and output--BASE
0124                  (        forth.asm):00203         USTATE  rmb     2               0 if interpreting, -1 if compiling--STATE
0126                  (        forth.asm):00204         ISLEN   rmb     2               Input stream length
0128                  (        forth.asm):00205         ISEADDR rmb     2               End of input stream address (included)
012A                  (        forth.asm):00206         UTOIN   rmb     2               User variable for >IN
012C                  (        forth.asm):00207         UBLK    rmb     2               User variable for BLK
012E                  (        forth.asm):00208         USCR    rmb     2               User variable for SCR (output for LIST)
0130                  (        forth.asm):00209         TIKSHI  rmb     2               RTC clock ticks updated on FIRQ
0132                  (        forth.asm):00210         TIKSLOW rmb     2               RTC clock ticks updated on FIRQ
                      (        forth.asm):00211                 IFNE    DEBUG
0134                  (        forth.asm):00212         CCREG   rmb     2               A DEBUG variable for predicates (see CMP2)
                      (        forth.asm):00213                 ENDC                    DEBUG
                      (        forth.asm):00214                 IFNE    HVNMI
                      (        forth.asm):00215                 IFNE    HVNMI2
0134                  (        forth.asm):00216         SBDROPC rmb     2               Char. drop count for serial input (see FIRQHDL)
                      (        forth.asm):00217                 ENDC                    HVNMI2
                      (        forth.asm):00218                 ENDC                    HVNMI
0134                  (        forth.asm):00219         ANCMPF  rmb     1               Anonymous compilation flag
0135                  (        forth.asm):00220         BALNCD  rmb     1               Balanced flag for control flow constructs
0136                  (        forth.asm):00221         BASBKUP rmb     1               BASE backup when a base prefix is in use
0137                  (        forth.asm):00222         RDEPTH  rmb     1               Return stack depth in cells
0138                  (        forth.asm):00223         DIVFCN  rmb     1               Flag used by /, MOD and /MOD
0139                  (        forth.asm):00224         DIVDBL  rmb     1               DIV: N1 is a double (flag)
013A                  (        forth.asm):00225         DIVSYM  rmb     1               DIV: symmetric division required (flag)
013B                  (        forth.asm):00226         MULFCN  rmb     1               Flag used by *, M*
013C                  (        forth.asm):00227         F83DIVF rmb     1               FORTH-83 adjusment flag for floored division
013D                  (        forth.asm):00228         STSLFCN rmb     1               Flag used by */, */MOD
013E                  (        forth.asm):00229         CVTFCN  rmb     1               CVT: 0 => # semantics, 1 => #S semantics
013F                  (        forth.asm):00230         ISNEGF  rmb     1               Number being scanned is negative
0140                  (        forth.asm):00231         ISDBLF  rmb     1               Number being scanned is a double
0141                  (        forth.asm):00232         CVISSGN rmb     1               Flag: should CVNSTR consider numbers as signed
0142                  (        forth.asm):00233         CURTOKL rmb     1               Current token length. Set by SWDIC
0143                  (        forth.asm):00234         IMDFLG  rmb     1               Immediate flag
0144                  (        forth.asm):00235         DEFFLG  rmb     1               Define flag
0145                  (        forth.asm):00236         RTCAVL  rmb     1               NZ if real time clock is present
0146                  (        forth.asm):00237         CFCARDP rmb     1               NZ if CF card present
0147                  (        forth.asm):00238         CFCMMIR rmb     1               Last CF command issued
0148                  (        forth.asm):00239         CFERRCD rmb     1               and the corresponding error code
0149                  (        forth.asm):00240         SRCID   rmb     1               ANSI SOURCE-ID (internal only).
                      (        forth.asm):00241         
                      (        forth.asm):00242         * Serial buffer parameters. Queing happens on FIRQ.
                      (        forth.asm):00243         * Dequeing occurs when GETCH is invoked.
014A                  (        forth.asm):00244         SERBENQ rmb     1               Enqueue offset
014B                  (        forth.asm):00245         SERBDEQ rmb     1               Dequeue offset
014C                  (        forth.asm):00246         SERBCNT rmb     1               Buffer byte count
014D                  (        forth.asm):00247         XMITOK  rmb     1               Software flow control on output flag
014E                  (        forth.asm):00248         SERBUF  rmb     SERBSZ          The actual buffer
                      (        forth.asm):00249         
018E                  (        forth.asm):00250         PADBUF  rmb     PADBSZ          PAD lives here.
01E2                  (        forth.asm):00251         APADBUF rmb     PADBSZ          Alternate PAD here. Used by <#, #, #S, #>
                      (        forth.asm):00252         
                      (        forth.asm):00253         * The normal (data) stack.
                      (        forth.asm):00254                 align   2
     0236             (        forth.asm):00255         NSTTOP  equ     *               U's value when the data stack is full
0236                  (        forth.asm):00256                 rmb     NSTKSZ
     02F6             (        forth.asm):00257         NSTBOT  equ     *               U's value when the data stack is empty
                      (        forth.asm):00258         
                      (        forth.asm):00259         * The return stack.
     02F6             (        forth.asm):00260         RSTTOP  equ     *
02F6                  (        forth.asm):00261                 rmb     RSTKSZ
     0376             (        forth.asm):00262         RSTBOT  equ     *
                      (        forth.asm):00263         
0376                  (        forth.asm):00264         CMDBUF  rmb     CMDBFSZ
03FA                  (        forth.asm):00265         HEXBUF  rmb     HEXBFSZ
                      (        forth.asm):00266         
044A                  (        forth.asm):00267         TBUFF   rmb     TBUFSZ          Output for CVNSTR
                      (        forth.asm):00268         
0492 0000000000000000 (        forth.asm):00269                 align   16
     000000000000
04A0                  (        forth.asm):00270         BUF0    rmb     BLKSIZ+4
                      (        forth.asm):00271         
08A4 0000000000000000 (        forth.asm):00272                 align   16
     00000000
08B0                  (        forth.asm):00273         BUF1    rmb     BLKSIZ+4
                      (        forth.asm):00274         
                      (        forth.asm):00275         *******************************************************************************
                      (        forth.asm):00276         * Writable dictionary section begins right here. We cannot have anything
                      (        forth.asm):00277         * statically defined at this point. Therefore, FORTHIN moves the code for @
                      (        forth.asm):00278         * to this location and sets up DICEND and LSTWAD accordingly. All the RAM
                      (        forth.asm):00279         * beyond this point (after the reallocated @ implementation) is user defined
                      (        forth.asm):00280         * material. Note that builtin words, though they cannot be forgotten (to the
                      (        forth.asm):00281         * extent they are ROM resident--not to mention inter-word dependencies),
                      (        forth.asm):00282         * might still be overridden by user definitions. WORDS will happily ignore
                      (        forth.asm):00283         * that fact and list everything in the dictionary linked list order.
                      (        forth.asm):00284         
0CB4 0000000000000000 (        forth.asm):00285                 align   16
     00000000
     0CC0             (        forth.asm):00286         WDICSPC equ     *
                      (        forth.asm):00287         
                      (        forth.asm):00288         *******************************************************************************
                      (        forth.asm):00289         * ROM code begins.
                      (        forth.asm):00290         
                      (        forth.asm):00291                 org     ROMSTRT
                      (        forth.asm):00292         * Trap handler: division by zero or illegal opcode. See page 4-10 of "The 6309
                      (        forth.asm):00293         * Book" for a description of interrupt stacks in native 6309 mode.
E000 113C40           (        forth.asm):00294 (4)     IODZHDL bitmd   #$40            Illegal opcode?
E003 2705             (        forth.asm):00295 (3)             beq     @iodzh1
E005 8EFE8B           (        forth.asm):00296 (3)             ldx     #IOPERRM
E008 2008             (        forth.asm):00297 (3)             bra     @iodxh2
E00A 113C80           (        forth.asm):00298 (4)     @iodzh1 bitmd   #$80            Division by zero?
E00D 2726             (        forth.asm):00299 (3)             beq     @iodzh3         And you may ask yourself, well
                      (        forth.asm):00300         *                               How did I get here?
E00F 8EFEA0           (        forth.asm):00301 (3)             ldx     #DV0ERRM
E012 BDE2E0           (        forth.asm):00302 (7)     @iodxh2 jsr     PUTS
E015 EC6C             (        forth.asm):00303 (5+1)           ldd     12,s            Return code address (PC)
E017 108E03FA         (        forth.asm):00304 (4)             ldy     #HEXBUF
E01B BDE182           (        forth.asm):00305 (7)             jsr     HDMP4   
E01E 8E03FA           (        forth.asm):00306 (3)             ldx     #HEXBUF
E021 BDE2E0           (        forth.asm):00307 (7)             jsr     PUTS
E024 BDE2ED           (        forth.asm):00308 (7)             jsr     PUTCR
E027 8EE761           (        forth.asm):00309 (3)             ldx     #ERRHD1
E02A AF6C             (        forth.asm):00310 (5+1)           stx     12,s            Resume execution in the error handler
E02C 8EE000           (        forth.asm):00311 (3)             ldx     #IODZHDL
E02F AF68             (        forth.asm):00312 (5+1)           stx     8,s             With Y set to IODZHDL
E031 8603             (        forth.asm):00313 (2)             lda     #3              And user ABORT error code
E033 A762             (        forth.asm):00314 (4+1)           sta     2,s             Passed back through B
E035 3B               (        forth.asm):00315 (17+?)  @iodzh3 rti
                      (        forth.asm):00316         
     E036             (        forth.asm):00317         SWI3HDL equ     *
     E036             (        forth.asm):00318         SWI2HDL equ     *
     E036             (        forth.asm):00319         IRQHDL  equ     *
     E036             (        forth.asm):00320         SWIHDL  equ     *
                      (        forth.asm):00321                 IFEQ    HVNMI
E036                  (        forth.asm):00322         NMIHDL                          These should never happen
                      (        forth.asm):00323                 ENDC
E036 3B               (        forth.asm):00324 (17+?)          rti
                      (        forth.asm):00325         
                      (        forth.asm):00326         * Interrupts are disabled by default upon reset.
                      (        forth.asm):00327         * NMI# will not be "armed" until S is initiliazed.
E037 113D01           (        forth.asm):00328 (5)     RSTHDL  ldmd    #1              Establish 6309 native mode
                      (        forth.asm):00329         
E03A 8643             (        forth.asm):00330 (2)             lda     #ACIRSET
E03C B7D800           (        forth.asm):00331 (4)             sta     ACIACTL         ACIA master reset
E03F 86D5             (        forth.asm):00332 (2)             lda     #ACIRTS1
E041 B7D800           (        forth.asm):00333 (4)             sta     ACIACTL         RTS# high, 8N1
                      (        forth.asm):00334         
E044 8EFE17           (        forth.asm):00335 (3)             ldx     #BOOTMSG        Identity statement
                      (        forth.asm):00336         
                      (        forth.asm):00337         * Send the NUL terminated string pointed to by X to the ACIA.
                      (        forth.asm):00338         * The RAM is not yet assumed to be working.
E047 C602             (        forth.asm):00339 (2)     INIT    ldb     #ACITDRE
E049 A680             (        forth.asm):00340 (4+1)   @init0  lda     ,x+
E04B 270A             (        forth.asm):00341 (3)             beq     RAMCHK          NUL marks the end of the string
E04D F5D800           (        forth.asm):00342 (4)     @init1  bitb    ACIACTL         Wait for TDRE bit to be set
E050 27FB             (        forth.asm):00343 (3)             beq     @init1
E052 B7D801           (        forth.asm):00344 (4)             sta     ACIADAT         Transmit data
E055 20F2             (        forth.asm):00345 (3)             bra     @init0          Next char, if any
                      (        forth.asm):00346         
                      (        forth.asm):00347         * RAM0 32 KB self test (destructive).
E057 8E0000           (        forth.asm):00348 (3)     RAMCHK  ldx     #RAMSTRT
E05A AF84             (        forth.asm):00349 (5+0)   @ramch1 stx     ,x
E05C AC84             (        forth.asm):00350 (5+0)           cmpx    ,x
E05E 2609             (        forth.asm):00351 (3)             bne     RAMFAIL
E060 3002             (        forth.asm):00352 (4+1)           leax    2,x
E062 8C8000           (        forth.asm):00353 (3)             cmpx    #RAMSTRT+RAMSIZE
E065 26F3             (        forth.asm):00354 (3)             bne     @ramch1
E067 2012             (        forth.asm):00355 (3)             bra     RAMOK
                      (        forth.asm):00356         
E069 C680             (        forth.asm):00357 (2)     RAMFAIL ldb     #128
E06B 108E8000         (        forth.asm):00358 (4)     @ramf1  ldy     #$8000
E06F 313F             (        forth.asm):00359 (4+1)   @ramf2  leay    -1,y
E071 26FC             (        forth.asm):00360 (3)             bne     @ramf2
E073 5A               (        forth.asm):00361 (1)             decb
E074 26F5             (        forth.asm):00362 (3)             bne     @ramf1
E076 8EFE72           (        forth.asm):00363 (3)             ldx     #RAMFM
E079 20CC             (        forth.asm):00364 (3)             bra     INIT            Here we go again
                      (        forth.asm):00365         
                      (        forth.asm):00366         * RAM Initialization to all $C7 if DEBUG mode is enabled else zeroes.
E07B 8E0000           (        forth.asm):00367 (3)     RAMOK   ldx     #RAMSTRT
E07E 3101             (        forth.asm):00368 (4+1)           leay    1,x
E080 10867FFF         (        forth.asm):00369 (4)             ldw     #RAMSIZE-1
                      (        forth.asm):00370                 IFNE    DEBUG
                      (        forth.asm):00371                 lda     #ILLOPC
                      (        forth.asm):00372                 sta     ,x
                      (        forth.asm):00373                 ELSE
E084 6F84             (        forth.asm):00374 (6+0)           clr     ,x
                      (        forth.asm):00375                 ENDC                    DEBUG
E086 113812           (        forth.asm):00376 (6+?)           tfm     x+,y+
                      (        forth.asm):00377         
                      (        forth.asm):00378         * Initialize the system stack pointer and the direct page base address register.
E089 10CE8000         (        forth.asm):00379 (4)             lds     #RAMSTRT+RAMSIZE
E08D 8601             (        forth.asm):00380 (2)             lda     #VARSPC/256
E08F 1F8B             (        forth.asm):00381 (4)             tfr     a,dp
     01               (        forth.asm):00382                 SETDP   VARSPC/256
                      (        forth.asm):00383         
                      (        forth.asm):00384         * Serial buffer parameters initialization. We are doing this here because
                      (        forth.asm):00385         * PUTS requires prior software flow control initialization.
                      (        forth.asm):00386                 IFNE    DEBUG
                      (        forth.asm):00387                 clrd
                      (        forth.asm):00388                 std     SERBENQ         Two birds with one stone
                      (        forth.asm):00389                 sta     SERBCNT
                      (        forth.asm):00390                 IFNE    HVNMI
                      (        forth.asm):00391                 IFNE    HVNMI2
                      (        forth.asm):00392                 std     SBDROPC         Initialize chararacter drop count
                      (        forth.asm):00393                 ENDC                    HVNMI2
                      (        forth.asm):00394                 ENDC                    HVNMI
                      (        forth.asm):00395                 ENDC                    DEBUG
E091 8601             (        forth.asm):00396 (2)             lda     #1              Initialize software flow control on output
E093 974D             (        forth.asm):00397 (3)             sta     XMITOK
                      (        forth.asm):00398         
E095 8EFE62           (        forth.asm):00399 (3)             ldx     #RAMOKM
E098 BDE2E0           (        forth.asm):00400 (7)             jsr     PUTS
E09B BDE341           (        forth.asm):00401 (7)             jsr     FORTHIN         Global variables initialization
E09E BDE90F           (        forth.asm):00402 (7)             jsr     CFINIT          CompactFlash card initialization
                      (        forth.asm):00403                 IFNE    RTCFEAT
                      (        forth.asm):00404                 jsr     RTCINIT         Real time clock initialization
                      (        forth.asm):00405                 ENDC                    RTCFEAT
                      (        forth.asm):00406         
                      (        forth.asm):00407         * Lower RTS and enable FIRQ.
E0A1 8695             (        forth.asm):00408 (2)             lda     #ACIRTS0
E0A3 B7D800           (        forth.asm):00409 (4)             sta     ACIACTL
E0A6 1CBF             (        forth.asm):00410 (2)             andcc   #^FFLAG
                      (        forth.asm):00411         
E0A8 0D46             (        forth.asm):00412 (4)             tst     CFCARDP
E0AA 2706             (        forth.asm):00413 (3)             beq     INTERP
                      (        forth.asm):00414         
                      (        forth.asm):00415         * A CF card is present, LOAD block #1.
E0AC 8E0001           (        forth.asm):00416 (3)             ldx     #1
E0AF BDF7BC           (        forth.asm):00417 (7)             jsr     LOAD1
                      (        forth.asm):00418         
                      (        forth.asm):00419         * The interpreter main loop.
E0B2 104F             (        forth.asm):00420 (2)     INTERP  clrd
E0B4 DD2C             (        forth.asm):00421 (4)             std     UBLK            Interpreting from the console. Set BLK to 0
E0B6 DD2A             (        forth.asm):00422 (4)             std     UTOIN
E0B8 9749             (        forth.asm):00423 (3)             sta     SRCID           Clear SOURCE-ID. Not invoked in EVALUATE context
E0BA 8E0376           (        forth.asm):00424 (3)             ldx     #CMDBUF
E0BD 9F20             (        forth.asm):00425 (4)             stx     BSBFADR
E0BF C684             (        forth.asm):00426 (2)             ldb     #CMDBFSZ        No NUL terminal in this implementation
E0C1 BDE303           (        forth.asm):00427 (7)             jsr     GETS            Acquire command from the console
                      (        forth.asm):00428         
                      (        forth.asm):00429         * Additional setup in case the ANSI \ is used.
E0C4 4F               (        forth.asm):00430 (1)             clra
E0C5 DD26             (        forth.asm):00431 (4)             std     ISLEN           GETS returns the entered character count via B
                      (        forth.asm):00432         
E0C7 5F               (        forth.asm):00433 (1)             clrb
E0C8 DD28             (        forth.asm):00434 (4)             std     ISEADDR         Clear end of input stream address (included)
E0CA 8D02             (        forth.asm):00435 (6)             bsr     _INTERP
E0CC 20E4             (        forth.asm):00436 (3)     MINTLRA bra     INTERP
                      (        forth.asm):00437         
                      (        forth.asm):00438         * The interpreter itself.
E0CE BDE375           (        forth.asm):00439 (7)     _INTERP jsr     SCNSTOK         Scan for the beginning of a word at address X
E0D1 2715             (        forth.asm):00440 (3)             beq     @oeistr         This is the end
E0D3 1F10             (        forth.asm):00441 (4)             tfr     x,d             Starting token address to D
E0D5 BDE164           (        forth.asm):00442 (7)             jsr     U2INFRD         Derive >IN from D
E0D8 0D25             (        forth.asm):00443 (4)             tst     USTATE+1        We do ignore the upper byte
E0DA 263A             (        forth.asm):00444 (3)             bne     COMP            We are compiling
E0DC BDE4A5           (        forth.asm):00445 (7)             jsr     SWDIC           Updates TOKENEP, CURTOKL, IMDFLG/DEFFLG
E0DF 261C             (        forth.asm):00446 (3)             bne     @exec           Word found, execute it
E0E1 BDE3E2           (        forth.asm):00447 (7)             jsr     NUMCVT
     E0E4             (        forth.asm):00448         NMCVIRA equ     *
E0E4 9E04             (        forth.asm):00449 (4)             ldx     TOKENEP
E0E6 20E6             (        forth.asm):00450 (3)             bra     _INTERP         Next token, please!
                      (        forth.asm):00451         * End of input stream condition is recognized. We are looking at past here
E0E8 0D49             (        forth.asm):00452 (4)     @oeistr tst     SRCID           Were we running a string via EVALUATE?
E0EA 2604             (        forth.asm):00453 (3)             bne     @done           No feedback if that was the case
E0EC DC2C             (        forth.asm):00454 (4)             ldd     UBLK
E0EE 2701             (        forth.asm):00455 (3)             beq     @feedbk         We are back from the console
E0F0 39               (        forth.asm):00456 (4)     @done   rts                     We're done here
E0F1 8EFE85           (        forth.asm):00457 (3)     @feedbk ldx     #OKFEEDB        Provide OK feedback
E0F4 0D25             (        forth.asm):00458 (4)             tst     USTATE+1        No OK feedback if we're compiling, just CRLF
E0F6 2702             (        forth.asm):00459 (3)             beq     @fullfb
E0F8 3003             (        forth.asm):00460 (4+1)           leax    3,x             Skip the ' OK' string when compiling
E0FA 7EE2E0           (        forth.asm):00461 (3)     @fullfb jmp     PUTS            Back to whoever invoked us
E0FD 9644             (        forth.asm):00462 (3)     @exec   lda     DEFFLG
E0FF 2705             (        forth.asm):00463 (3)             beq     @introk         Compilation only flag is not set
E101 C606             (        forth.asm):00464 (2)             ldb     #6              Incorrect STATE
E103 BDE75E           (        forth.asm):00465 (7)             jsr     ERRHDLR         No return
     E106             (        forth.asm):00466         INTISRA equ     *               For symbolic stack debugging purposes
E106 DC04             (        forth.asm):00467 (4)     @introk ldd     TOKENEP
E108 8D5A             (        forth.asm):00468 (6)             bsr     U2INFRD         Derive >IN from D
E10A 8EE111           (        forth.asm):00469 (3)             ldx     #INTRPRA        The return address
E10D 3410             (        forth.asm):00470 (4+2)           pshs    x
E10F 1F25             (        forth.asm):00471 (4)             tfr     y,pc            An indirect call to Y
E111 BDE87C           (        forth.asm):00472 (7)     INTRPRA jsr     BKIN2PT         Derive X from BLK, >IN
E114 20B8             (        forth.asm):00473 (3)             bra     _INTERP
                      (        forth.asm):00474         
                      (        forth.asm):00475         * The compiler.
                      (        forth.asm):00476         * Upon entry TOKENSP has been set by a prior call to SCNSTOK.
E116 BDE4A5           (        forth.asm):00477 (7)     COMP    jsr     SWDIC           Updates TOKENEP, CURTOKL, IMDFLG/DEFFLG
E119 271E             (        forth.asm):00478 (3)             beq     @cmpnum         Word @ TOKENSP is not in the dictionary
E11B 0D43             (        forth.asm):00479 (4)             tst     IMDFLG
E11D 2712             (        forth.asm):00480 (3)             beq     @notimd
E11F DC04             (        forth.asm):00481 (4)             ldd     TOKENEP
E121 8D41             (        forth.asm):00482 (6)             bsr     U2INFRD         Derive >IN from D
E123 8EE12A           (        forth.asm):00483 (3)             ldx     #COMPLRA        Word is immediate. Execute it.
E126 3410             (        forth.asm):00484 (4+2)           pshs    x               Return to COMPLRA
E128 1F25             (        forth.asm):00485 (4)             tfr     y,pc            An indirect call to Y
E12A BDE87C           (        forth.asm):00486 (7)     COMPLRA jsr     BKIN2PT         Derive X from BLK, >IN
E12D 9F04             (        forth.asm):00487 (4)             stx     TOKENEP
E12F 209D             (        forth.asm):00488 (3)             bra     _INTERP         Branch back to the interpreter
E131 1F21             (        forth.asm):00489 (4)     @notimd tfr     y,x
E133 8D20             (        forth.asm):00490 (6)             bsr     EMXASXT         Emit X as an execution token
E135 9E04             (        forth.asm):00491 (4)     @cmpdon ldx     TOKENEP
E137 2095             (        forth.asm):00492 (3)             bra     _INTERP
E139 BDE3E2           (        forth.asm):00493 (7)     @cmpnum jsr     NUMCVT
     E13C             (        forth.asm):00494         NMCVCRA equ     *
E13C 0D40             (        forth.asm):00495 (4)             tst     ISDBLF
E13E 2607             (        forth.asm):00496 (3)             bne     @cmpdbl
E140 3710             (        forth.asm):00497                 UCNPOP                  TOS to X
E142 BDE56E           (        forth.asm):00498 (7)             jsr     LITER
E145 20EE             (        forth.asm):00499 (3)             bra     @cmpdon
                      (        forth.asm):00500         * The following is some sort of half baked 2LITERAL.
                      (        forth.asm):00501         * Please note that NUMCVT guarantees us that at least two cells are stacked up.
E147 AE42             (        forth.asm):00502 (5+1)   @cmpdbl ldx     2,u
E149 BDE56E           (        forth.asm):00503 (7)             jsr     LITER           LSC
E14C AEC4             (        forth.asm):00504 (5+0)           ldx     ,u
E14E BDE56E           (        forth.asm):00505 (7)             jsr     LITER           MSC
E151 3344             (        forth.asm):00506 (4+1)           leau    4,u             2DROP
E153 20E0             (        forth.asm):00507 (3)             bra     @cmpdon
                      (        forth.asm):00508         
                      (        forth.asm):00509         * Emit (in a code generation understanding) X as an execution token.
                      (        forth.asm):00510         * In essence, this simply inserts JSR <X> at HERE.
                      (        forth.asm):00511         * Note: this code provides support for trailing JSR elimination.
                      (        forth.asm):00512         * On input: X has the target execution token.
                      (        forth.asm):00513         * On output: Y will have HERE, A will be altered, X will be preserved.
E155 109E08           (        forth.asm):00514 (5)     EMXASXT ldy     DICEND
E158 109F14           (        forth.asm):00515 (5)             sty     JSRLAST         JSRLAST points to the latest JSR code emission
E15B 86BD             (        forth.asm):00516 (2)             lda     #JSROPC         JSR extended
E15D BDE585           (        forth.asm):00517 (7)             jsr     VARCON2         Compile a JSR to the execution token
E160 109F08           (        forth.asm):00518 (5)             sty     DICEND
E163 39               (        forth.asm):00519 (4)             rts
                      (        forth.asm):00520         
                      (        forth.asm):00521         * Derive UTOIN from D's current value. D is altered.
E164 9320             (        forth.asm):00522 (4)     U2INFRD subd    BSBFADR
E166 DD2A             (        forth.asm):00523 (4)             std     UTOIN
E168 39               (        forth.asm):00524 (4)             rts
                      (        forth.asm):00525         
                      (        forth.asm):00526         * Store the HEX representation of the lower nibble of A to Y+.
E169 3404             (        forth.asm):00527 (4+1)   HEX1D   pshs    b
E16B C630             (        forth.asm):00528 (2)             ldb     #'0
E16D 840F             (        forth.asm):00529 (2)             anda    #$0f
E16F 810A             (        forth.asm):00530 (2)             cmpa    #10
E171 2502             (        forth.asm):00531 (3)             bcs     @hex1d1
E173 C637             (        forth.asm):00532 (2)             ldb     #'A-10
E175 103098           (        forth.asm):00533 (4)     @hex1d1 addr    b,a
E178 A7A0             (        forth.asm):00534 (4+1)           sta     ,y+
E17A 3504             (        forth.asm):00535 (4+1)           puls    b
E17C 39               (        forth.asm):00536 (4)             rts
                      (        forth.asm):00537         
E17D 44               (        forth.asm):00538 (1)     ADIV16  lsra
E17E 44               (        forth.asm):00539 (1)             lsra
E17F 44               (        forth.asm):00540 (1)             lsra
E180 44               (        forth.asm):00541 (1)             lsra
E181 39               (        forth.asm):00542 (4)             rts
                      (        forth.asm):00543         
                      (        forth.asm):00544         * Hexdump D to 4 bytes starting at Y.  Upon return, Y will point 1 byte
                      (        forth.asm):00545         * after the last character emitted. D is preserved.
E182 3406             (        forth.asm):00546 (4+2)   HDMP4   pshs    d
E184 8DF7             (        forth.asm):00547 (6)             bsr     ADIV16
E186 8DE1             (        forth.asm):00548 (6)             bsr     HEX1D
E188 A6E4             (        forth.asm):00549 (4+0)           lda     ,s
E18A 8DDD             (        forth.asm):00550 (6)             bsr     HEX1D
E18C A661             (        forth.asm):00551 (4+1)           lda     1,s
E18E 8DED             (        forth.asm):00552 (6)             bsr     ADIV16
E190 8DD7             (        forth.asm):00553 (6)             bsr     HEX1D
E192 A661             (        forth.asm):00554 (4+1)           lda     1,s
E194 8DD3             (        forth.asm):00555 (6)             bsr     HEX1D
E196 3506             (        forth.asm):00556 (4+2)           puls    d
E198 6FA4             (        forth.asm):00557 (6+0)           clr     ,y
E19A 39               (        forth.asm):00558 (4)             rts
                      (        forth.asm):00559         
E19B 3406             (        forth.asm):00560 (4+2)   HDMP2   pshs    d
E19D 8DDE             (        forth.asm):00561 (6)             bsr     ADIV16
E19F 8DC8             (        forth.asm):00562 (6)             bsr     HEX1D
E1A1 A6E4             (        forth.asm):00563 (4+0)           lda     ,s
E1A3 8DC4             (        forth.asm):00564 (6)             bsr     HEX1D
E1A5 3506             (        forth.asm):00565 (4+2)           puls    d
E1A7 6FA4             (        forth.asm):00566 (6+0)           clr     ,y
E1A9 39               (        forth.asm):00567 (4)             rts
                      (        forth.asm):00568         
                      (        forth.asm):00569                 IFNE    HVNMI
                      (        forth.asm):00570         * Add string pointed to by X starting at the address stored in Y.
E1AA 3402             (        forth.asm):00571 (4+1)   ADDS    pshs    a
E1AC A680             (        forth.asm):00572 (4+1)   @adds1  lda     ,x+
E1AE A7A0             (        forth.asm):00573 (4+1)           sta     ,y+
E1B0 26FA             (        forth.asm):00574 (3)             bne     @adds1
E1B2 3502             (        forth.asm):00575 (4+1)           puls    a
E1B4 39               (        forth.asm):00576 (4)             rts
                      (        forth.asm):00577         
E1B5 8DF3             (        forth.asm):00578 (6)     NMI2DM  bsr     ADDS
E1B7 313F             (        forth.asm):00579 (4+1)           leay    -1,y            Backward over NUL
E1B9 20E0             (        forth.asm):00580 (3)             bra     HDMP2
                      (        forth.asm):00581         
E1BB 8DED             (        forth.asm):00582 (6)     NMI4DM  bsr     ADDS
E1BD 313F             (        forth.asm):00583 (4+1)           leay    -1,y            Backward over NUL
E1BF 20C1             (        forth.asm):00584 (3)             bra     HDMP4
                      (        forth.asm):00585         
E1C1 8E044A           (        forth.asm):00586 (3)     NMIDML  ldx     #TBUFF
E1C4 BDE2E0           (        forth.asm):00587 (7)             jsr     PUTS
E1C7 7EE2ED           (        forth.asm):00588 (3)             jmp     PUTCR
                      (        forth.asm):00589         
                      (        forth.asm):00590         * All registers are stacked in native mode.
E1CA B6D800           (        forth.asm):00591 (4)     NMIHDL  lda     ACIACTL
E1CD 3402             (        forth.asm):00592 (4+1)           pshs    a
E1CF 964D             (        forth.asm):00593 (3)             lda     XMITOK
E1D1 3402             (        forth.asm):00594 (4+1)           pshs    a
E1D3 8601             (        forth.asm):00595 (2)             lda     #1
E1D5 974D             (        forth.asm):00596 (3)             sta     XMITOK
                      (        forth.asm):00597         * Stack structure at this point
                      (        forth.asm):00598         * 0     saved XMITOK: 1 byte
                      (        forth.asm):00599         * 1     saved ACIA status register: 1 byte
                      (        forth.asm):00600         * 2     CC
                      (        forth.asm):00601         * 3     D
                      (        forth.asm):00602         * 5     W
                      (        forth.asm):00603         * 7     DP
                      (        forth.asm):00604         * 8     X
                      (        forth.asm):00605         * 10    Y
                      (        forth.asm):00606         * 12    U
                      (        forth.asm):00607         * 14    PC
E1D7 BDE2ED           (        forth.asm):00608 (7)             jsr     PUTCR
                      (        forth.asm):00609         
                      (        forth.asm):00610         * First line: CC, D, W, DP, X, Y, U, PC, S
E1DA 108E044A         (        forth.asm):00611 (4)             ldy     #TBUFF
E1DE 8EE20D           (        forth.asm):00612 (3)             ldx     #CCREGM
E1E1 A662             (        forth.asm):00613 (4+1)           lda     2,s             CC in the system stack
E1E3 8DD0             (        forth.asm):00614 (6)             bsr     NMI2DM
                      (        forth.asm):00615         
E1E5 EC63             (        forth.asm):00616 (5+1)           ldd     3,s             D in the system stack
E1E7 8DD2             (        forth.asm):00617 (6)             bsr     NMI4DM
                      (        forth.asm):00618         
E1E9 EC65             (        forth.asm):00619 (5+1)           ldd     5,s             W in the system stack
E1EB 8DCE             (        forth.asm):00620 (6)             bsr     NMI4DM
                      (        forth.asm):00621         
E1ED A667             (        forth.asm):00622 (4+1)           lda     7,s             DP in the system stack
E1EF 8DC4             (        forth.asm):00623 (6)             bsr     NMI2DM
                      (        forth.asm):00624         
E1F1 EC68             (        forth.asm):00625 (5+1)           ldd     8,s             X in the system stack
E1F3 8DC6             (        forth.asm):00626 (6)             bsr     NMI4DM
                      (        forth.asm):00627         
E1F5 EC6A             (        forth.asm):00628 (5+1)           ldd     10,s            Y in the system stack
E1F7 8DC2             (        forth.asm):00629 (6)             bsr     NMI4DM
                      (        forth.asm):00630         
E1F9 EC6C             (        forth.asm):00631 (5+1)           ldd     12,s            U in the system stack
E1FB 8DBE             (        forth.asm):00632 (6)             bsr     NMI4DM
                      (        forth.asm):00633         
E1FD EC6E             (        forth.asm):00634 (5+1)           ldd     14,s            PC in the system stack
E1FF 8DBA             (        forth.asm):00635 (6)             bsr     NMI4DM
                      (        forth.asm):00636         
E201 33E810           (        forth.asm):00637 (4+1)           leau    16,s            S in the system stack
E204 1F30             (        forth.asm):00638 (4)             tfr     u,d
E206 8DB3             (        forth.asm):00639 (6)             bsr     NMI4DM
                      (        forth.asm):00640         
E208 8DB7             (        forth.asm):00641 (6)             bsr     NMIDML
                      (        forth.asm):00642         
                      (        forth.asm):00643                 IFNE    HVNMI2
                      (        forth.asm):00644         * Second line: ACIST, XMTOK, SBASE, SBENQ, SBDEQ, SBCNT, SBDROPC
                      (        forth.asm):00645                 ldy     #TBUFF
                      (        forth.asm):00646                 ldx     #ACISTM
                      (        forth.asm):00647                 lda     1,s             ACIA status register in the system stack
                      (        forth.asm):00648                 bsr     NMI2DM
                      (        forth.asm):00649         
                      (        forth.asm):00650                 lda     ,s              XMITOK in the system stack
                      (        forth.asm):00651                 bsr     NMI2DM
                      (        forth.asm):00652         
                      (        forth.asm):00653                 ldd     #SERBUF         SERBUF address
                      (        forth.asm):00654                 bsr     NMI4DM
                      (        forth.asm):00655         
                      (        forth.asm):00656                 lda     SERBENQ         SERBENQ 8 bit offset
                      (        forth.asm):00657                 bsr     NMI2DM
                      (        forth.asm):00658         
                      (        forth.asm):00659                 lda     SERBDEQ         SERBDEQ 8 bit offset
                      (        forth.asm):00660                 bsr     NMI2DM
                      (        forth.asm):00661         
                      (        forth.asm):00662                 lda     SERBCNT
                      (        forth.asm):00663                 bsr     NMI2DM
                      (        forth.asm):00664         
                      (        forth.asm):00665                 ldd     SBDROPC         Number of bytes dropped because SERBUF was full
                      (        forth.asm):00666                 bsr     NMI4DM
                      (        forth.asm):00667         
                      (        forth.asm):00668                 bsr     NMIDML
                      (        forth.asm):00669                 ENDC                    HVNMI2
                      (        forth.asm):00670         
E20A 3262             (        forth.asm):00671 (4+1)           leas    2,s             System stack cleanup
E20C 3B               (        forth.asm):00672 (17+?)          rti
                      (        forth.asm):00673         
E20D 43432000         (        forth.asm):00674         CCREGM  fcn     'CC '
E211 20442000         (        forth.asm):00675         DREGM   fcn     ' D '
E215 20572000         (        forth.asm):00676         WREGM   fcn     ' W '
E219 2044502000       (        forth.asm):00677         DPREGM  fcn     ' DP '
E21E 20582000         (        forth.asm):00678         XREGM   fcn     ' X '
E222 20592000         (        forth.asm):00679         YREGM   fcn     ' Y '
E226 20552000         (        forth.asm):00680         UREGM   fcn     ' U '
E22A 2050432000       (        forth.asm):00681         PCREGM  fcn     ' PC '
E22F 20532000         (        forth.asm):00682         SREGM   fcn     ' S '
                      (        forth.asm):00683                 IFNE    HVNMI2
E233                  (        forth.asm):00684         ACISTM  fcn     'AS '           ACIA status register
E233                  (        forth.asm):00685         XMTOKM  fcn     ' XO '          XMITOK--software flow control (one byte)
E233                  (        forth.asm):00686         SBASEM  fcn     ' SB '          Serial FIFO base address (two bytes)
E233                  (        forth.asm):00687         SBENQM  fcn     ' EN '          FIFO enqueue offset (one byte)
E233                  (        forth.asm):00688         SBSEQM  fcn     ' DE '          FIFO dequeue offset (one byte)
E233                  (        forth.asm):00689         SBCNTM  fcn     ' CN '          FIFO queued byte count (one byte)
E233                  (        forth.asm):00690         SBDRPM  fcn     ' DR '          Number of characters dropped (two bytes)
                      (        forth.asm):00691                 ENDC                    HVNMI2
                      (        forth.asm):00692         
                      (        forth.asm):00693                 ENDC                    HVNMI
                      (        forth.asm):00694         
                      (        forth.asm):00695         * Returns the length of the string pointed to by X (terminator excluded) in W.
E233 3410             (        forth.asm):00696 (4+2)   SLEN    pshs    x
E235 105F             (        forth.asm):00697 (2)             clrw
E237 105C             (        forth.asm):00698 (2)     @slen1  incw
E239 A680             (        forth.asm):00699 (4+1)           lda     ,x+
E23B 26FA             (        forth.asm):00700 (3)             bne     @slen1
E23D 105A             (        forth.asm):00701 (2)             decw
E23F 3510             (        forth.asm):00702 (4+2)           puls    x
E241 39               (        forth.asm):00703 (4)             rts
                      (        forth.asm):00704         
                      (        forth.asm):00705                 include console.asm
                      (      console.asm):00001         * FIRQ interrupt handler. This is entered on RDRF (input available).
E242 3416             (      console.asm):00002 (4+4)   FIRQHDL pshs    x,d
                      (      console.asm):00003                 IFNE    RTCFEAT
                      (      console.asm):00004                 jsr     RTCIHDL         Check for RTC periodic interrupt
                      (      console.asm):00005                 ENDC                    RTCFEAT
E244 B6D800           (      console.asm):00006 (4)             lda     ACIACTL
E247 8580             (      console.asm):00007 (2)             bita    #ACIISVC        Does the ACIA need input service?
E249 2731             (      console.asm):00008 (3)             beq     @nsintr         No. This is not the IRQ source we're looking for
                      (      console.asm):00009                 IFNE    DEBUG
                      (      console.asm):00010                 bita    #ACIRDRF
                      (      console.asm):00011                 beq     @nsintr         ACIA RDRF status bit should be set in all cases
                      (      console.asm):00012                 bita    #ACIOVRN        ACIA data overrun on read?
                      (      console.asm):00013                 beq     @datval         No, incoming data is valid
                      (      console.asm):00014                 ldb     ACIADAT         Clear overrun bit and INTACK
                      (      console.asm):00015                 ldb     #'%             Error indicating character is %
                      (      console.asm):00016                 bra     @chkovf
                      (      console.asm):00017                 ENDC                    DEBUG
                      (      console.asm):00018         * Out of band characters processing.
E24B F6D801           (      console.asm):00019 (4)     @datval ldb     ACIADAT         Incoming data byte to B and INTACK
E24E C103             (      console.asm):00020 (2)             cmpb    #ETX            Control-C?
E250 272D             (      console.asm):00021 (3)             beq     @sigint         Yes
E252 C113             (      console.asm):00022 (2)             cmpb    #XOFF
E254 2742             (      console.asm):00023 (3)             beq     @outngo         Output is being suspended
E256 C111             (      console.asm):00024 (2)             cmpb    #XON
E258 2741             (      console.asm):00025 (3)             beq     @outok          Output is being re-enabled
E25A 964C             (      console.asm):00026 (3)     @chkovf lda     SERBCNT
E25C 810F             (      console.asm):00027 (2)             cmpa    #15             At high water level mark?
E25E 2609             (      console.asm):00028 (3)             bne     @sbenq          No, proceed without negating RTS#
E260 3404             (      console.asm):00029 (4+1)           pshs    b
E262 C6D5             (      console.asm):00030 (2)             ldb     #ACIRTS1
E264 F7D800           (      console.asm):00031 (4)             stb     ACIACTL         Negate RTS#
E267 3504             (      console.asm):00032 (4+1)           puls    b
E269 8140             (      console.asm):00033 (2)     @sbenq  cmpa    #SERBSZ
                      (      console.asm):00034                 IFNE    HVNMI2
                      (      console.asm):00035                 beq     @nsdrop         Serial input buffer physically full
                      (      console.asm):00036                 ELSE
E26B 270F             (      console.asm):00037 (3)             beq     @nsintr         Serial input buffer physically full
                      (      console.asm):00038                 ENDC                    HVNMI2
E26D 4C               (      console.asm):00039 (1)             inca
E26E 974C             (      console.asm):00040 (3)             sta     SERBCNT         Update incoming FIFO byte count
E270 8E014E           (      console.asm):00041 (3)             ldx     #SERBUF
E273 964A             (      console.asm):00042 (3)             lda     SERBENQ         Enqueue offset to A
E275 E786             (      console.asm):00043 (4+1)           stb     a,x             Enqueue incoming character
E277 4C               (      console.asm):00044 (1)             inca
E278 843F             (      console.asm):00045 (2)             anda    #SERBSZ-1       Modulo arithmetic
E27A 974A             (      console.asm):00046 (3)             sta     SERBENQ
E27C 3516             (      console.asm):00047 (4+4)   @nsintr puls    d,x
E27E 3B               (      console.asm):00048 (17+?)          rti
                      (      console.asm):00049         * Control-C was recognized.
E27F 3264             (      console.asm):00050 (4+1)   @sigint leas    4,s             Drop D and X
E281 964B             (      console.asm):00051 (3)             lda     SERBDEQ
E283 974A             (      console.asm):00052 (3)             sta     SERBENQ
E285 0F4C             (      console.asm):00053 (5)             clr     SERBCNT         Serial input buffer has been emptied
E287 BDEBA5           (      console.asm):00054                 RFXT    jsr,NCLR+7      Clear the data stack
E28A BDEBB0           (      console.asm):00055                 RFXT    jsr,RCLR+7      and the return stack
E28D 10AE61           (      console.asm):00056 (6+1)           ldy     1,s             Saved PC from the FIRQ stack
E290 8EE761           (      console.asm):00057 (3)             ldx     #ERRHD1
E293 AF61             (      console.asm):00058 (5+1)           stx     1,s             Execution continues in the error handler
E295 C603             (      console.asm):00059 (2)             ldb     #3              with ABORT error code passed through B
E297 3B               (      console.asm):00060 (17+?)          rti
E298 4F               (      console.asm):00061 (1)     @outngo clra
E299 2002             (      console.asm):00062 (3)             bra     @sxmsta
E29B 8601             (      console.asm):00063 (2)     @outok  lda     #1
E29D 974D             (      console.asm):00064 (3)     @sxmsta sta     XMITOK          Update XMIT status flag
E29F 20DB             (      console.asm):00065 (3)             bra     @nsintr
                      (      console.asm):00066                 IFNE    HVNMI2
                      (      console.asm):00067         * Increment character drop count (displayed by NMIHDL).
E2A1                  (      console.asm):00068         @nsdrop ldd     SBDROPC
                      (      console.asm):00069                 incd
                      (      console.asm):00070                 std     SBDROPC
                      (      console.asm):00071                 bra     @nsintr
                      (      console.asm):00072                 ENDC                    HVNMI2
                      (      console.asm):00073         
                      (      console.asm):00074         * We do not have to talk to the ACIA directly, unless SERBCNT is zero,
                      (      console.asm):00075         * in which case we have to lower RTS#, so as to accept incoming characters.
                      (      console.asm):00076         * This can only be called from base level!
E2A1 3416             (      console.asm):00077 (4+4)   GETCH   pshs    x,d
E2A3 0D4C             (      console.asm):00078 (4)     @again  tst     SERBCNT
E2A5 260F             (      console.asm):00079 (3)             bne     @sbdind         We have incoming material
E2A7 C695             (      console.asm):00080 (2)             ldb     #ACIRTS0
E2A9 F7D800           (      console.asm):00081 (4)             stb     ACIACTL         Assert RTS#
E2AC 1CBF             (      console.asm):00082 (2)             andcc   #^FFLAG         Unmask FIRQ
E2AE 8E0001           (      console.asm):00083 (3)             ldx     #1
E2B1 BDF828           (      console.asm):00084 (7)             jsr     MILLIS1         Busy waiting for one millisecond
E2B4 20ED             (      console.asm):00085 (3)             bra     @again          Try again
                      (      console.asm):00086         * Serial buffer data indication.
E2B6 1A40             (      console.asm):00087 (2)     @sbdind orcc    #FFLAG          Mask FIRQ
E2B8 0A4C             (      console.asm):00088 (5)             dec     SERBCNT
E2BA 1CBF             (      console.asm):00089 (2)             andcc   #^FFLAG         Unmask FIRQ
E2BC 8E014E           (      console.asm):00090 (3)             ldx     #SERBUF
E2BF 964B             (      console.asm):00091 (3)             lda     SERBDEQ         Dequeue offset to A
E2C1 E686             (      console.asm):00092 (4+1)           ldb     a,x             Buffered input character to B
E2C3 E7E4             (      console.asm):00093 (4+0)           stb     ,s              Incoming character to A in the caller's stack
E2C5 4C               (      console.asm):00094 (1)             inca
E2C6 843F             (      console.asm):00095 (2)             anda    #SERBSZ-1       Modulo arithmetic
E2C8 974B             (      console.asm):00096 (3)             sta     SERBDEQ
E2CA 3516             (      console.asm):00097 (4+4)           puls    d,x             Same as it ever was
E2CC 39               (      console.asm):00098 (4)             rts
                      (      console.asm):00099         
E2CD 3404             (      console.asm):00100 (4+1)   PUTCH   pshs    b
E2CF C602             (      console.asm):00101 (2)             ldb     #ACITDRE
E2D1 F5D800           (      console.asm):00102 (4)     @tdrdrn bitb    ACIACTL
E2D4 27FB             (      console.asm):00103 (3)             beq     @tdrdrn         Drain the transmit data register
E2D6 0D4D             (      console.asm):00104 (4)     @wfxon  tst     XMITOK          Software flow control on output
E2D8 27FC             (      console.asm):00105 (3)             beq     @wfxon          Wait for XON
E2DA B7D801           (      console.asm):00106 (4)             sta     ACIADAT         Transmit data
E2DD 3504             (      console.asm):00107 (4+1)           puls    b
E2DF 39               (      console.asm):00108 (4)             rts
                      (      console.asm):00109         
                      (      console.asm):00110         * Send NUL terminated string pointed to by X to the ACIA.
E2E0 3416             (      console.asm):00111 (4+4)   PUTS    pshs    x,d
E2E2 A680             (      console.asm):00112 (4+1)   @puts1  lda     ,x+
E2E4 2704             (      console.asm):00113 (3)             beq     @puts2         NUL marks the end of the string
E2E6 8DE5             (      console.asm):00114 (6)             bsr     PUTCH
E2E8 20F8             (      console.asm):00115 (3)             bra     @puts1
E2EA 3516             (      console.asm):00116 (4+4)   @puts2  puls    d,x
E2EC 39               (      console.asm):00117 (4)             rts
                      (      console.asm):00118         
E2ED 3410             (      console.asm):00119 (4+2)   PUTCR   pshs    x
E2EF 8EFE6F           (      console.asm):00120 (3)             ldx     #CRLFSTR
E2F2 8DEC             (      console.asm):00121 (6)             bsr     PUTS
E2F4 3510             (      console.asm):00122 (4+2)           puls    x
E2F6 39               (      console.asm):00123 (4)             rts
                      (      console.asm):00124         
E2F7 8608             (      console.asm):00125 (2)     _BS     lda     #BS
E2F9 8DD2             (      console.asm):00126 (6)             bsr     PUTCH          Output BS
E2FB 8620             (      console.asm):00127 (2)             lda     #SP
E2FD 8DCE             (      console.asm):00128 (6)             bsr     PUTCH          Clear character
E2FF 8608             (      console.asm):00129 (2)             lda     #BS
E301 20CA             (      console.asm):00130 (3)             bra     PUTCH          And go back again
                      (      console.asm):00131         
                      (      console.asm):00132         * Receive CR terminated string and store it to X.
                      (      console.asm):00133         * Upon entry B contains the receiving buffer length.
                      (      console.asm):00134         * On exit, B will contain the number of characters
                      (      console.asm):00135         * entered. A and X are preserved.
E303 5D               (      console.asm):00136 (1)     GETS    tstb
E304 2601             (      console.asm):00137 (3)             bne     @gets0          If B is zero, do nothing
E306 39               (      console.asm):00138 (4)             rts
E307 3416             (      console.asm):00139 (4+4)   @gets0  pshs    x,d
E309 8D96             (      console.asm):00140 (6)     @gets1  bsr     GETCH
E30B 8108             (      console.asm):00141 (2)             cmpa    #BS             Backspace?
E30D 260B             (      console.asm):00142 (3)             bne     @gets3
E30F E161             (      console.asm):00143 (4+1)           cmpb    1,s             B upon routine entry
E311 27F6             (      console.asm):00144 (3)             beq     @gets1          Do not go beyond the beginning of the buffer
E313 8DE2             (      console.asm):00145 (6)             bsr     _BS
E315 301F             (      console.asm):00146 (4+1)           leax    -1,x
E317 5C               (      console.asm):00147 (1)             incb
E318 20EF             (      console.asm):00148 (3)             bra     @gets1
E31A 8115             (      console.asm):00149 (2)     @gets3  cmpa    #NAK            Kill input?
E31C 260B             (      console.asm):00150 (3)             bne     @gets5
                      (      console.asm):00151         * While B != 1,S (initial buffer length), decrement X, increment B.
E31E E161             (      console.asm):00152 (4+1)   @gets4  cmpb    1,s
E320 27E7             (      console.asm):00153 (3)             beq     @gets1
E322 8DD3             (      console.asm):00154 (6)             bsr     _BS
E324 301F             (      console.asm):00155 (4+1)           leax     -1,x
E326 5C               (      console.asm):00156 (1)             incb
E327 20F5             (      console.asm):00157 (3)             bra     @gets4
                      (      console.asm):00158         * Regular input handling: echo input character.
E329 810D             (      console.asm):00159 (2)     @gets5  cmpa    #CR
E32B 2707             (      console.asm):00160 (3)             beq     @gets6          Minicom only sends CR
E32D 8D9E             (      console.asm):00161 (6)             bsr     PUTCH
E32F A780             (      console.asm):00162 (4+1)           sta     ,x+
E331 5A               (      console.asm):00163 (1)             decb
E332 26D5             (      console.asm):00164 (3)             bne     @gets1
E334 8620             (      console.asm):00165 (2)     @gets6  lda     #SP             End of buffer reached or CR entered
E336 8D95             (      console.asm):00166 (6)             bsr     PUTCH
E338 1F10             (      console.asm):00167 (4)             tfr     x,d
E33A A362             (      console.asm):00168 (5+1)           subd    2,s             Actual number of characters entered
E33C E761             (      console.asm):00169 (4+1)           stb     1,s             Stored to B (through the system stack).         
E33E 3516             (      console.asm):00170 (4+4)           puls    d,x
E340 39               (      console.asm):00171 (4)             rts
                      (      console.asm):00172         
                      (        forth.asm):00706         
E341 BDEBA5           (        forth.asm):00707         FORTHIN RFXT    jsr,NCLR+7      XT for NCLR. Set up the normal stack
E344 BDEBB0           (        forth.asm):00708                 RFXT    jsr,RCLR+7      XT for RCLR. Set up the return stack
                      (        forth.asm):00709         * Relocate '@' code to RAM and set it up as the last dictionary entry (RO).
E347 8EFE03           (        forth.asm):00710 (3)             ldx     #THEEND         Source address for tfm
E34A 1086000C         (        forth.asm):00711 (4)             ldw     #(REALEND-THEEND) Byte count for tfm
E34E 108E0CC0         (        forth.asm):00712 (4)             ldy     #WDICSPC        Destination address for tfm
E352 109F06           (        forth.asm):00713 (5)             sty     LSTWAD
E355 113812           (        forth.asm):00714 (6+?)           tfm     x+,y+
E358 109F08           (        forth.asm):00715 (5)             sty     DICEND
                      (        forth.asm):00716                 IFNE    RELFEAT
                      (        forth.asm):00717                 RFXT    jsr,MONITOR+10  XT for MONITOR (monitor @ in RAM)
                      (        forth.asm):00718                 ENDC                    RELFEAT
E35B BDE9DD           (        forth.asm):00719 (7)             jsr     EMPTYB          Buffer related initializations
                      (        forth.asm):00720                 IFNE    DEBUG
                      (        forth.asm):00721                 clrd
                      (        forth.asm):00722                 std     USTATE          Initial mode is interpretation
                      (        forth.asm):00723                 std     USCR            Clear SCR
                      (        forth.asm):00724                 std     UBLK            Clear BLK
                      (        forth.asm):00725                 std     UTOIN           Clear >IN
                      (        forth.asm):00726                 sta     SRCID
                      (        forth.asm):00727                 ENDC                    DEBUG
E35E 7EFBC6           (        forth.asm):00728                 RFXT    jmp,DECIMAL+10  XT for DECIMAL. Default base is decimal
                      (        forth.asm):00729         
                      (        forth.asm):00730         * Input stream end reached? If ISEADDR is clear, compute it, then compare
                      (        forth.asm):00731         * X to it. EOL condition should be handled if we return from this with ZFLAG
                      (        forth.asm):00732         * set. BSBFADR and ISLEN must have been previously initilized.
E361 3406             (        forth.asm):00733 (4+2)   ISERCHD pshs    d
E363 DC28             (        forth.asm):00734 (4)             ldd     ISEADDR
E365 2706             (        forth.asm):00735 (3)             beq     @iseset
E367 103710           (        forth.asm):00736 (4)     @cont   cmpr    x,d
E36A 3506             (        forth.asm):00737 (4+2)           puls    d
E36C 39               (        forth.asm):00738 (4)             rts
E36D DC20             (        forth.asm):00739 (4)     @iseset ldd     BSBFADR
E36F D326             (        forth.asm):00740 (4)             addd    ISLEN
E371 DD28             (        forth.asm):00741 (4)             std     ISEADDR
E373 20F2             (        forth.asm):00742 (3)             bra     @cont
                      (        forth.asm):00743         
                      (        forth.asm):00744         * Scan for the next non-space character pointed to by X.
                      (        forth.asm):00745         * Return with ZFLAG set if an end of input stream condition is recognized,
                      (        forth.asm):00746         * otherwise ZFLAG will be clear. A is altered.
                      (        forth.asm):00747         * Update TOKENSP in all cases.
E375 8DEA             (        forth.asm):00748 (6)     SCNSTOK bsr     ISERCHD         End of input stream reached?
E377 2708             (        forth.asm):00749 (3)             beq     @scstk1         Yes, update TOKENSP and return w. ZFLAG set
E379 A680             (        forth.asm):00750 (4+1)           lda     ,x+
E37B 8120             (        forth.asm):00751 (2)             cmpa    #SP
E37D 27F6             (        forth.asm):00752 (3)             beq     SCNSTOK
E37F 301F             (        forth.asm):00753 (4+1)           leax    -1,x            Backward one character
                      (        forth.asm):00754         * LEA affects ZFLAG but it will remain clear at this point.
E381 1FA8             (        forth.asm):00755 (4)     @scstk1 tfr     cc,a
E383 9F02             (        forth.asm):00756 (4)             stx     TOKENSP         This affects ZFLAG!!!
E385 1F8A             (        forth.asm):00757 (4)             tfr     a,cc
E387 39               (        forth.asm):00758 (4)             rts
                      (        forth.asm):00759         
                      (        forth.asm):00760         * Scan for the next white space character as an end of token marker.
                      (        forth.asm):00761         * Upon entry:
                      (        forth.asm):00762         * - X points to the input stream.
                      (        forth.asm):00763         * Upon return:
                      (        forth.asm):00764         * - X will point to the next space character or one character after the
                      (        forth.asm):00765         *   end of the input stream.
                      (        forth.asm):00766         * - CURTOKL will hold the current token length (returned in B).
                      (        forth.asm):00767         * - TOKENEP will point to the end of the current token.
                      (        forth.asm):00768         * - A is altered.
                      (        forth.asm):00769         * This routine assumes there was an identified start of token in the past,
                      (        forth.asm):00770         * i.e. that X was not pointing to a BL character upon entry.
E388 5F               (        forth.asm):00771 (1)     SCNETOK clrb
E389 8DD6             (        forth.asm):00772 (6)     @scetok bsr     ISERCHD         End of input stream reached?
E38B 270A             (        forth.asm):00773 (3)             beq     @scetk1
E38D A680             (        forth.asm):00774 (4+1)           lda     ,x+
E38F 5C               (        forth.asm):00775 (1)             incb
E390 8120             (        forth.asm):00776 (2)             cmpa    #SP
E392 26F5             (        forth.asm):00777 (3)             bne     @scetok
E394 301F             (        forth.asm):00778 (4+1)           leax    -1,x            Keep pointing at the trailing space
E396 5A               (        forth.asm):00779 (1)             decb                    Uncount BL if that was the end of token marker
E397 1FA8             (        forth.asm):00780 (4)     @scetk1 tfr     cc,a
E399 9F04             (        forth.asm):00781 (4)             stx     TOKENEP
E39B D742             (        forth.asm):00782 (3)             stb     CURTOKL
E39D 1F8A             (        forth.asm):00783 (4)             tfr     a,cc
E39F 39               (        forth.asm):00784 (4)             rts
                      (        forth.asm):00785         
E3A0 8DBF             (        forth.asm):00786 (6)     NXTCHAR bsr     ISERCHD
E3A2 2702             (        forth.asm):00787 (3)             beq     @gtnxc1         End of input stream detected. Return with Z set
E3A4 A680             (        forth.asm):00788 (4+1)           lda     ,x+
E3A6 39               (        forth.asm):00789 (4)     @gtnxc1 rts
                      (        forth.asm):00790         
                      (        forth.asm):00791         * Check for numeric literal BASE prefix. On entry X has the input stream
                      (        forth.asm):00792         * pointer. On exit, BASE is altered if needed and the original BASE saved
                      (        forth.asm):00793         * to BASBKUP. If BASE was not changed, BASBKUP will be zero.
                      (        forth.asm):00794         * D is altered, X is updated if a BASE prefix is detected, other registers
                      (        forth.asm):00795         * are untouched.
E3A7 E684             (        forth.asm):00796 (4+0)   CKNBPFX ldb     ,x              B has a potential base prefix character
E3A9 3410             (        forth.asm):00797 (4+2)           pshs    x
E3AB 8EFFCD           (        forth.asm):00798 (3)             ldx     #BASALST        A associative list (A-list) of BASE prefixes
E3AE A681             (        forth.asm):00799 (4+2)   @pflkup lda     ,x++            Potential BASE prefix character to A
E3B0 2707             (        forth.asm):00800 (3)             beq     @nopfix         Reached the end of the A-list. No prefix found
E3B2 103798           (        forth.asm):00801 (4)             cmpr    b,a             Prefix match?
E3B5 2707             (        forth.asm):00802 (3)             beq     @pfxfnd         Yes
E3B7 20F5             (        forth.asm):00803 (3)             bra     @pflkup         Perform base prefix lookup
E3B9 0F36             (        forth.asm):00804 (5)     @nopfix clr     BASBKUP         Nothing to be restored to BASE
E3BB 3510             (        forth.asm):00805 (4+2)           puls    x
E3BD 39               (        forth.asm):00806 (4)             rts
E3BE 9623             (        forth.asm):00807 (3)     @pfxfnd lda     UBASE+1
E3C0 9736             (        forth.asm):00808 (3)             sta     BASBKUP         Back up the current BASE value
E3C2 A61F             (        forth.asm):00809 (4+1)           lda     -1,x            The BASE specified by the prefix
E3C4 9723             (        forth.asm):00810 (3)             sta     UBASE+1         Update BASE
E3C6 3510             (        forth.asm):00811 (4+2)           puls    x
E3C8 3001             (        forth.asm):00812 (4+1)           leax    1,x             Skip the prefix from the input stream
E3CA 39               (        forth.asm):00813 (4)             rts
                      (        forth.asm):00814         
                      (        forth.asm):00815         * Restore BASE if a numeric literal BASE prefix was detected.
                      (        forth.asm):00816         * X is to be preserved at all cost!
E3CB 9636             (        forth.asm):00817 (3)     RSBSPFX lda     BASBKUP
E3CD 2702             (        forth.asm):00818 (3)             beq     @theend
E3CF 9723             (        forth.asm):00819 (3)             sta     UBASE+1
E3D1 39               (        forth.asm):00820 (4)     @theend rts
                      (        forth.asm):00821         
                      (        forth.asm):00822         * Check whether BASE is in the supported range ([2..36]).
E3D2 9623             (        forth.asm):00823 (3)     CKBASE  lda     UBASE+1         BASE
E3D4 8102             (        forth.asm):00824 (2)             cmpa    #2
E3D6 2505             (        forth.asm):00825 (3)             blo     @ckbser         Must be >= 2
E3D8 8124             (        forth.asm):00826 (2)             cmpa    #36
E3DA 2201             (        forth.asm):00827 (3)             bhi     @ckbser         And <= 36 (the ANSI maximum)
E3DC 39               (        forth.asm):00828 (4)             rts
E3DD C60F             (        forth.asm):00829 (2)     @ckbser ldb     #15             Invalid BASE
E3DF BDE75E           (        forth.asm):00830 (7)             jsr     ERRHDLR         No return
     E3E2             (        forth.asm):00831         CKBASRA equ     *
                      (        forth.asm):00832         
                      (        forth.asm):00833         * NUMCVT performs a signed string to number conversion. The input string is
                      (        forth.asm):00834         * acquired from the input stream. Note that this routine always is called
                      (        forth.asm):00835         * after a dictionary lookup (SWDIC), so TOKENSP and CURTOKL are guaranteed
                      (        forth.asm):00836         * to have been set previously. There are two ways out this routine:
                      (        forth.asm):00837         * - redirection to the error handler (Undefined word), or
                      (        forth.asm):00838         * - a converted cell or double cell returned through the data stack.
                      (        forth.asm):00839         *   Upon return, ISDBLF being NZ will indicate a double.
E3E2 8DEE             (        forth.asm):00840 (6)     NUMCVT  bsr     CKBASE          No return if BASE isn't in the [2..36] range
E3E4 0F3F             (        forth.asm):00841 (5)             clr     ISNEGF          Assume the result is positive
E3E6 0F40             (        forth.asm):00842 (5)             clr     ISDBLF          Assume the result is not a double number
E3E8 9E02             (        forth.asm):00843 (4)             ldx     TOKENSP
E3EA 8DBB             (        forth.asm):00844 (6)             bsr     CKNBPFX         Check for numeric literal BASE prefix
                      (        forth.asm):00845         * Check for optional minus sign.
E3EC A684             (        forth.asm):00846 (4+0)           lda     ,x
E3EE 812D             (        forth.asm):00847 (2)             cmpa    #'-
E3F0 2604             (        forth.asm):00848 (3)             bne     @ncini
E3F2 0C3F             (        forth.asm):00849 (5)             inc     ISNEGF          Remember to negate the result before returning
E3F4 3001             (        forth.asm):00850 (4+1)           leax    1,x             Skip the negativity!
E3F6 1F12             (        forth.asm):00851 (4)     @ncini  tfr     x,y             Backup input stream pointer
E3F8 1FC1             (        forth.asm):00852 (4)             tfr     0,x             Initialize the result
E3FA BDE7E8           (        forth.asm):00853 (7)             jsr     NPUSH           LSC
E3FD BDE7E8           (        forth.asm):00854 (7)             jsr     NPUSH           MSC
E400 1F21             (        forth.asm):00855 (4)             tfr     y,x             Restore the input stream pointer
E402 301F             (        forth.asm):00856 (4+1)           leax    -1,x
E404 BDE7E8           (        forth.asm):00857 (7)             jsr     NPUSH           Base scanning address minus 1
E407 BDF4B2           (        forth.asm):00858                 RFXT    jsr,CONVERT+10
                      (        forth.asm):00859         * Upon return TOS C@ should be BL or . Anything else indicates an error.
                      (        forth.asm):00860         * In any case, at this point, at least three cells are on the data stack.
E40A 3710             (        forth.asm):00861                 UCNPOP                  Address of the last non convertible char to X
E40C BDE361           (        forth.asm):00862 (7)             jsr     ISERCHD
E40F 270C             (        forth.asm):00863 (3)             beq     @ncadj          End of input stream detected
E411 A684             (        forth.asm):00864 (4+0)           lda     ,x
E413 8120             (        forth.asm):00865 (2)             cmpa    #SP
E415 2706             (        forth.asm):00866 (3)             beq     @ncadj          BL is acceptable
E417 812E             (        forth.asm):00867 (2)             cmpa    #'.             Was a double number meant?
E419 2618             (        forth.asm):00868 (3)             bne     @ncnogo         No, we do not have a winner...
E41B 0C40             (        forth.asm):00869 (5)             inc     ISDBLF
                      (        forth.asm):00870         * If Z is not set at this point, we are dealing with a double number.
E41D 260B             (        forth.asm):00871 (3)     @ncadj  bne     @ncdadj 
E41F 3710             (        forth.asm):00872                 UCNPOP                  Drop the MSC
E421 0D3F             (        forth.asm):00873 (4)             tst     ISNEGF          Are we dealing with a negative number?
E423 27A6             (        forth.asm):00874 (3)             beq     RSBSPFX         No. Restore BASE if needed--the end
E425 BDEFBB           (        forth.asm):00875                 RFXT    jsr,NEGATE+9    Acknowledge the negativity
E428 20A1             (        forth.asm):00876 (3)             bra     RSBSPFX         Restore BASE if needed--the end
E42A 0D3F             (        forth.asm):00877 (4)     @ncdadj tst     ISNEGF          Are we dealing with a negative number?
E42C 279D             (        forth.asm):00878 (3)             beq     RSBSPFX         No. Restore BASE if needed--the end
E42E BDF3C9           (        forth.asm):00879                 RFXT    jsr,DNEG+10     Acknowledge the negativity
E431 2098             (        forth.asm):00880 (3)             bra     RSBSPFX         Restore BASE if needed--the end
E433 3344             (        forth.asm):00881 (4+1)   @ncnogo leau    4,u             Drop two cells from the data stack
E435 9E02             (        forth.asm):00882 (4)             ldx     TOKENSP         Beginning address of the current token
E437 C602             (        forth.asm):00883 (2)             ldb     #2              Undefined (X points to the offending word)
E439 BDE75E           (        forth.asm):00884 (7)             jsr     ERRHDLR         No return
     E43C             (        forth.asm):00885         NUMCVRA equ     *               For symbolic stack dump purposes
E43C 12               (        forth.asm):00886 (1)             nop
                      (        forth.asm):00887         
                      (        forth.asm):00888         * Convert number stored in X to a string (depending on BASE value).
                      (        forth.asm):00889         * Output is stored in the global TBUFF buffer. X is preserved.
E43D 8D93             (        forth.asm):00890 (6)     CVNSTR  bsr     CKBASE
E43F 0F3F             (        forth.asm):00891 (5)             clr     ISNEGF
E441 1F10             (        forth.asm):00892 (4)             tfr     x,d
E443 0D41             (        forth.asm):00893 (4)             tst     CVISSGN         Are we to perform a signed conversion?
E445 2708             (        forth.asm):00894 (3)             beq     @cvnst1
E447 104D             (        forth.asm):00895 (2)             tstd
E449 2A04             (        forth.asm):00896 (3)             bpl     @cvnst1
E44B 0C3F             (        forth.asm):00897 (5)             inc     ISNEGF          Number being converted is negative
E44D 1040             (        forth.asm):00898 (2)             negd
E44F 1F06             (        forth.asm):00899 (4)     @cvnst1 tfr     d,w
E451 104F             (        forth.asm):00900 (2)             clrd
E453 108E045D         (        forth.asm):00901 (4)             ldy     #TBUFF+19       Sign + 16 digits + terminator + 1
E457 6FA2             (        forth.asm):00902 (6+1)           clr     ,-y             End of string marker
E459 119E22           (        forth.asm):00903 (35)    @cvnst2 divq    UBASE           D returns the modulo and W the quotient
E45C 8630             (        forth.asm):00904 (2)             lda     #'0
E45E C10A             (        forth.asm):00905 (2)             cmpb    #10
E460 2502             (        forth.asm):00906 (3)             bcs     @cvnst3
                      (        forth.asm):00907         * BASE has letters among its valid numbers.
E462 8637             (        forth.asm):00908 (2)             lda     #'A-10
E464 103089           (        forth.asm):00909 (4)     @cvnst3 addr    a,b
E467 E7A2             (        forth.asm):00910 (4+1)           stb     ,-y
E469 104F             (        forth.asm):00911 (2)             clrd
E46B 105D             (        forth.asm):00912 (2)             tstw
E46D 26EA             (        forth.asm):00913 (3)             bne     @cvnst2
E46F C620             (        forth.asm):00914 (2)             ldb     #SP
E471 0D3F             (        forth.asm):00915 (4)             tst     ISNEGF
E473 2702             (        forth.asm):00916 (3)             beq     @cvnst4
E475 C62D             (        forth.asm):00917 (2)             ldb     #'-
E477 E7A2             (        forth.asm):00918 (4+1)   @cvnst4 stb     ,-y
                      (        forth.asm):00919         * We need to insert leading spaces up to the beginning of the output buffer.
E479 C620             (        forth.asm):00920 (2)             ldb     #SP
E47B 108C044A         (        forth.asm):00921 (4)     @cvnst5 cmpy    #TBUFF
E47F 2601             (        forth.asm):00922 (3)             bne     @cvnst6
E481 39               (        forth.asm):00923 (4)             rts
E482 E7A2             (        forth.asm):00924 (4+1)   @cvnst6 stb     ,-y
E484 20F5             (        forth.asm):00925 (3)             bra     @cvnst5
                      (        forth.asm):00926         
                      (        forth.asm):00927         * Check for minimal data stack depth. On input D has the lowest possible stack
                      (        forth.asm):00928         * address that satisfies the needs of the caller. This routine is meant
                      (        forth.asm):00929         * to support "transactional" behaviour, which is intended to improve
                      (        forth.asm):00930         * debugging support.
E486 103703           (        forth.asm):00931 (4)     CHKNDPT cmpr    d,u
E489 2201             (        forth.asm):00932 (3)             bhi     @stkudf
E48B 39               (        forth.asm):00933 (4)             rts
E48C C601             (        forth.asm):00934 (2)     @stkudf ldb     #1              Data stack underflow
E48E BDE75E           (        forth.asm):00935 (7)             jsr     ERRHDLR         No return
     E491             (        forth.asm):00936         CKDPTRA equ     *
                      (        forth.asm):00937         
                      (        forth.asm):00938         * Parameter stack's depth checking primitives (transactional behavior support).
E491 CC02F420F0       (        forth.asm):00939         MIN1PST MINDREQ 1
                      (        forth.asm):00940         
E496 CC02F220EB       (        forth.asm):00941         MIN2PST MINDREQ 2
                      (        forth.asm):00942         
E49B CC02F020E6       (        forth.asm):00943         MIN3PST MINDREQ 3
                      (        forth.asm):00944         
E4A0 CC02EE20E1       (        forth.asm):00945         MIN4PST MINDREQ 4
                      (        forth.asm):00946         
                      (        forth.asm):00947         * Search word beginning at address TOKENSP in the dictionary.
                      (        forth.asm):00948         * Upon return Z will be set if the word was not found.
                      (        forth.asm):00949         * Otherwise, Y will point to the code section of the word.
                      (        forth.asm):00950         * CSSNTVE (defined in constants.asm) defines whether the
                      (        forth.asm):00951         * dictionary match is case sensitive or not.
                      (        forth.asm):00952         * Important note: if the word is found TOKENEP will be copied to TOKENSP.
E4A5 9E02             (        forth.asm):00953 (4)     SWDIC   ldx     TOKENSP
E4A7 BDE388           (        forth.asm):00954 (7)             jsr     SCNETOK         B has CURTOKL, update TOKENEP
E4AA 9E08             (        forth.asm):00955 (4)     SWDIC1  ldx     DICEND          Entry point for the ANSI FIND
E4AC 9F1A             (        forth.asm):00956 (4)             stx     VLPRVEP         Last dictionary entry code address + 1
E4AE 9E02             (        forth.asm):00957 (4)             ldx     TOKENSP
E4B0 109E06           (        forth.asm):00958 (5)             ldy     LSTWAD          Latest word header address to Y
E4B3 2606             (        forth.asm):00959 (3)     @swrdc0 bne     @swrdc1
E4B5 1FC2             (        forth.asm):00960 (4)             tfr     0,y             Word not found. Z is set
E4B7 109F0E           (        forth.asm):00961 (5)             sty     PLOAD
E4BA 39               (        forth.asm):00962 (4)             rts
E4BB A6A4             (        forth.asm):00963 (4+0)   @swrdc1 lda     ,y              Word attribute to A
E4BD 841F             (        forth.asm):00964 (2)             anda    #WRLNMSK        Extract word length
E4BF 3420             (        forth.asm):00965 (4+2)           pshs    y
E4C1 103789           (        forth.asm):00966 (4)             cmpr    a,b             Word length match?
E4C4 2638             (        forth.asm):00967 (3)             bne     @swrdc3         No, point to next dictionary entry
E4C6 3121             (        forth.asm):00968 (4+1)           leay    1,y
E4C8 A6A0             (        forth.asm):00969 (4+1)   @swrdc2 lda     ,y+
                      (        forth.asm):00970                 IFNE    CSSNTVE
                      (        forth.asm):00971                 cmpa    ,x+             Case sensitive dictionary
                      (        forth.asm):00972                 ELSE
E4CA 1F9E             (        forth.asm):00973 (4)             tfr     b,e             Case insensitive search (preferred)
E4CC E680             (        forth.asm):00974 (4+1)           ldb     ,x+
E4CE C161             (        forth.asm):00975 (2)             cmpb    #'a
E4D0 2506             (        forth.asm):00976 (3)             bcs     @nochg
E4D2 C17B             (        forth.asm):00977 (2)             cmpb    #'z+1
E4D4 2402             (        forth.asm):00978 (3)             bcc     @nochg
E4D6 C020             (        forth.asm):00979 (2)             subb    #'a-'A
E4D8 103789           (        forth.asm):00980 (4)     @nochg  cmpr    a,b
E4DB 1FE9             (        forth.asm):00981 (4)             tfr     e,b
                      (        forth.asm):00982                 ENDC                    CSSNTVE
E4DD 261F             (        forth.asm):00983 (3)             bne     @swrdc3
E4DF 5A               (        forth.asm):00984 (1)             decb
E4E0 26E6             (        forth.asm):00985 (3)             bne     @swrdc2
                      (        forth.asm):00986         * Word match!
E4E2 3510             (        forth.asm):00987 (4+2)           puls    x
E4E4 E684             (        forth.asm):00988 (4+0)           ldb     ,x              Word attribute byte to B
E4E6 4F               (        forth.asm):00989 (1)             clra
E4E7 58               (        forth.asm):00990 (1)             lslb                    Bit 7 to CFLAG
E4E8 49               (        forth.asm):00991 (1)             rola                    CFLAG to A
E4E9 9743             (        forth.asm):00992 (3)             sta     IMDFLG          Set IMMEDIATE flag
E4EB 4F               (        forth.asm):00993 (1)             clra
E4EC 58               (        forth.asm):00994 (1)             lslb                    Bit 6 to CFLAG
E4ED 49               (        forth.asm):00995 (1)             rola                    CFLAG to A
E4EE 9744             (        forth.asm):00996 (3)             sta     DEFFLG          Set DEFINE flag
E4F0 9E04             (        forth.asm):00997 (4)             ldx     TOKENEP
E4F2 9F02             (        forth.asm):00998 (4)             stx     TOKENSP
                      (        forth.asm):00999                 IFNE    RELFEAT
                      (        forth.asm):01000                 leay    3,y             Skip back pointer and checksum. Return XT
                      (        forth.asm):01001                 ELSE
E4F4 3122             (        forth.asm):01002 (4+1)           leay    2,y             Skip back pointer. Return XT
                      (        forth.asm):01003                 ENDC                    RELFEAT
E4F6 DC1A             (        forth.asm):01004 (4)             ldd     VLPRVEP
E4F8 103220           (        forth.asm):01005 (4)             subr    y,d
E4FB DD0E             (        forth.asm):01006 (4)             std     PLOAD
E4FD 39               (        forth.asm):01007 (4)             rts                     NZ since there is no zero payload word
E4FE 3520             (        forth.asm):01008 (4+2)   @swrdc3 puls    y
E500 109F1A           (        forth.asm):01009 (5)             sty     VLPRVEP
E503 4F               (        forth.asm):01010 (1)             clra
E504 E6A0             (        forth.asm):01011 (4+1)           ldb     ,y+
E506 C41F             (        forth.asm):01012 (2)             andb    #WRLNMSK
E508 31AB             (        forth.asm):01013 (4+2)           leay    d,y
E50A 9E02             (        forth.asm):01014 (4)             ldx     TOKENSP
E50C D642             (        forth.asm):01015 (3)             ldb     CURTOKL
E50E 10AEA4           (        forth.asm):01016 (6+0)           ldy     ,y              Point to previous word header
E511 20A0             (        forth.asm):01017 (3)             bra     @swrdc0
                      (        forth.asm):01018         
                      (        forth.asm):01019         * Create new dictionary entry. The word name being created is acquired from
                      (        forth.asm):01020         * the input stream. Warning, this requires a writable dictionary!
                      (        forth.asm):01021         * The new end of the dictionary is returned in Y. W is preserved.
E513 1038             (        forth.asm):01022 (6)     LOCWRT  pshsw
E515 9E08             (        forth.asm):01023 (4)             ldx     DICEND
                      (        forth.asm):01024                 IFNE    DEBUG
                      (        forth.asm):01025                 cmpx    #ROMSTRT
                      (        forth.asm):01026                 bcs     @locwr0
                      (        forth.asm):01027                 ldb     #10             Assertion failure (trying to write to ROM!)
                      (        forth.asm):01028                 jsr     ERRHDLR         No return
E517                  (        forth.asm):01029         LWAFRA  equ     *
E517                  (        forth.asm):01030         @locwr0
                      (        forth.asm):01031                 ENDC                    DEBUG
E517 9F0C             (        forth.asm):01032 (4)             stx     BDICEND         Back pointer up
E519 9E06             (        forth.asm):01033 (4)             ldx     LSTWAD
E51B 9F0A             (        forth.asm):01034 (4)             stx     BLSTWAD         Back pointer up
E51D BDE87C           (        forth.asm):01035 (7)             jsr     BKIN2PT         Derive X from BLK, >IN
E520 BDE375           (        forth.asm):01036 (7)             jsr     SCNSTOK         Locate token starting address
E523 2605             (        forth.asm):01037 (3)             bne     @locwr1
E525 C605             (        forth.asm):01038 (2)             ldb     #5              EOIS condition recognized: missing word name
E527 BDE75E           (        forth.asm):01039 (7)             jsr     ERRHDLR         No return
     E52A             (        forth.asm):01040         LWMNRA  equ     *               LOCWRT missing word name return address
E52A BDE388           (        forth.asm):01041 (7)     @locwr1 jsr     SCNETOK         X has TOKENEP, B has CURTOKL
E52D 109E02           (        forth.asm):01042 (5)             ldy     TOKENSP
E530 103221           (        forth.asm):01043 (4)             subr    y,x
E533 3410             (        forth.asm):01044 (4+2)           pshs    x               Word length to the system stack
E535 9E08             (        forth.asm):01045 (4)             ldx     DICEND
E537 A661             (        forth.asm):01046 (4+1)           lda     1,s             Word length LSB in the system stack
E539 8120             (        forth.asm):01047 (2)             cmpa    #1+WRLNMSK      Max word length is 31, 79-STANDARD compliant
E53B 2505             (        forth.asm):01048 (3)             blo     @locwr2
E53D C610             (        forth.asm):01049 (2)             ldb     #16             Word name is too long
E53F BDE75E           (        forth.asm):01050 (7)             jsr     ERRHDLR         No return
     E542             (        forth.asm):01051         WTOOLNG equ     *
E542 A780             (        forth.asm):01052 (4+1)   @locwr2 sta     ,x+             Word length to dictionary
E544 10A6E1           (        forth.asm):01053 (6+2)           ldw     ,s++            16-bit word length to W
E547 1E12             (        forth.asm):01054 (5)             exg     x,y             Y points to the dictionary, X has TOKENSP
                      (        forth.asm):01055                 IFNE    CSSNTVE
                      (        forth.asm):01056                 tfm     x+,y+           Word name to dictionary, as is
                      (        forth.asm):01057                 ELSE
E549 1FF9             (        forth.asm):01058 (4)             tfr     f,b             Force dictionary entry to upper case
E54B A680             (        forth.asm):01059 (4+1)   @locwr3 lda     ,x+
E54D 8161             (        forth.asm):01060 (2)             cmpa    #'a
E54F 2506             (        forth.asm):01061 (3)             bcs     @locwr4
E551 817B             (        forth.asm):01062 (2)             cmpa    #'z+1
E553 2402             (        forth.asm):01063 (3)             bcc     @locwr4
E555 8020             (        forth.asm):01064 (2)             suba    #'a-'A          To upper case
E557 A7A0             (        forth.asm):01065 (4+1)   @locwr4 sta     ,y+
E559 5A               (        forth.asm):01066 (1)             decb
E55A 26EF             (        forth.asm):01067 (3)             bne     @locwr3
                      (        forth.asm):01068                 ENDC                    CSSNTVE
E55C 1F10             (        forth.asm):01069 (4)             tfr     x,d
E55E BDE164           (        forth.asm):01070 (7)             jsr     U2INFRD         Derive >IN from D
E561 9E06             (        forth.asm):01071 (4)             ldx     LSTWAD
E563 AFA1             (        forth.asm):01072 (5+2)           stx     ,y++            Back pointer to dictionary
                      (        forth.asm):01073                 IFNE    RELFEAT
                      (        forth.asm):01074                 clr     ,y+             Initialize the checksum header field
                      (        forth.asm):01075                 ENDC                    RELFEAT
E565 109F08           (        forth.asm):01076 (5)             sty     DICEND
E568 109F12           (        forth.asm):01077 (5)             sty     RECADDR         Should we resort to recursion later on
E56B 1039             (        forth.asm):01078 (6)             pulsw
E56D 39               (        forth.asm):01079 (4)             rts
                      (        forth.asm):01080         
                      (        forth.asm):01081         * Compile 'ldx  #X; jsr NPUSH'.
                      (        forth.asm):01082         * DICEND is updated and returned in Y.
E56E 109E08           (        forth.asm):01083 (5)     LITER   ldy     DICEND
E571 868E             (        forth.asm):01084 (2)             lda     #LDXOPC         LDX immediate
E573 8D10             (        forth.asm):01085 (6)             bsr     VARCON2
E575 86BD             (        forth.asm):01086 (2)             lda     #JSROPC         JSR extended
E577 109F14           (        forth.asm):01087 (5)             sty     JSRLAST         JSRLAST points to the latest JSR code emission
E57A 8D06             (        forth.asm):01088 (6)             bsr     VARCON1
E57C 109F08           (        forth.asm):01089 (5)             sty     DICEND
E57F 39               (        forth.asm):01090 (4)             rts
                      (        forth.asm):01091         
                      (        forth.asm):01092         * Compile 'jmp  NPUSH'.
                      (        forth.asm):01093         * Y points to the end of the dictionary on entry and on exit.
E580 867E             (        forth.asm):01094 (2)     VARCON  lda     #JMPOPC         JMP extended
E582 8EE7E8           (        forth.asm):01095 (3)     VARCON1 ldx     #NPUSH
E585 A7A0             (        forth.asm):01096 (4+1)   VARCON2 sta     ,y+
E587 AFA1             (        forth.asm):01097 (5+2)           stx     ,y++
E589 39               (        forth.asm):01098 (4)             rts
                      (        forth.asm):01099         
                      (        forth.asm):01100         * Used by U<, U>, <, >.
E58A BDE496           (        forth.asm):01101 (7)     CMP2    jsr     MIN2PST         At least 2 cells must be stacked up
E58D 10AEC4           (        forth.asm):01102 (6+0)   CMP2RA  ldy     ,u
E590 AE42             (        forth.asm):01103 (5+1)           ldx     2,u
E592 103721           (        forth.asm):01104 (4)             cmpr    y,x
E595 1FA9             (        forth.asm):01105 (4)             tfr     cc,b
                      (        forth.asm):01106                 IFNE    DEBUG
                      (        forth.asm):01107                 clra
                      (        forth.asm):01108                 std     CCREG
                      (        forth.asm):01109                 ENDC                    DEBUG
E597 1FC1             (        forth.asm):01110 (4)             tfr     0,x
E599 3344             (        forth.asm):01111 (4+1)           leau    4,u
E59B 1F9A             (        forth.asm):01112 (4)             tfr     b,cc
E59D 39               (        forth.asm):01113 (4)             rts
                      (        forth.asm):01114         
                      (        forth.asm):01115         * Used by CMOVE, CMOVE>, MOVE.
E59E BDE49B           (        forth.asm):01116 (7)     ACQMOVP jsr     MIN3PST         At least 3 cells must be stacked up
E5A1 10A6C4           (        forth.asm):01117 (6+0)   ACQVMRA ldw     ,u              Byte count
E5A4 10AE42           (        forth.asm):01118 (6+1)           ldy     2,u             Destination address
E5A7 AE44             (        forth.asm):01119 (5+1)           ldx     4,u             Source address
E5A9 3346             (        forth.asm):01120 (4+1)           leau    6,u             Drop 3 cells from the user stack
E5AB 39               (        forth.asm):01121 (4)             rts
                      (        forth.asm):01122         
                      (        forth.asm):01123         * FDCTSYM enveadours to match the address stored in Y to a dictionary entry.
                      (        forth.asm):01124         * Upon a successful flexible match, it will output a string in the form of
                      (        forth.asm):01125         * <wordname>+<offset> to the string pointed to by X. <wordname> refers to the
                      (        forth.asm):01126         * code entry point of the matched word. <offset> will be expressed in hex.
                      (        forth.asm):01127         * If a match is found, Z will be clear, otherwise it will be set.
                      (        forth.asm):01128         * A candidate for a word code address must meet the following criteria:
                      (        forth.asm):01129         * ((Y U>= #EBUFS) AND (Y U< #THEEND)) OR ((Y U>= #WDICSPC) AND (Y U< DICEND)).
                      (        forth.asm):01130         * Upon return:
                      (        forth.asm):01131         * - the string pointed to by X will updated with its symbolic match
                      (        forth.asm):01132         *   (NUL terminated), if there is one. X itself might have been altered.
                      (        forth.asm):01133         * - Y should be preserved.
                      (        forth.asm):01134         * EBUFS (EMPTY-BUFFERS) header address is the last word in the dictionary.
                      (        forth.asm):01135                 IFNE    SSDFEAT
E5AC 3430             (        forth.asm):01136 (4+4)   FDCTSYM pshs    y,x     
E5AE 1F21             (        forth.asm):01137 (4)             tfr     y,x             Potential execution token to X
E5B0 8CE9CD           (        forth.asm):01138 (3)             cmpx    #EBUFS
E5B3 2505             (        forth.asm):01139 (3)             blo     @fdstr2 
E5B5 8CFE03           (        forth.asm):01140 (3)             cmpx    #THEEND
E5B8 250D             (        forth.asm):01141 (3)             blo     @fdsmtc
E5BA 8C0CC0           (        forth.asm):01142 (3)     @fdstr2 cmpx    #WDICSPC        Term 2 of the predicate for a valid word addr
E5BD 2504             (        forth.asm):01143 (3)             blo     @fdsnom
E5BF 9C08             (        forth.asm):01144 (4)             cmpx    DICEND
E5C1 2504             (        forth.asm):01145 (3)             blo     @fdsmtc
E5C3 4F               (        forth.asm):01146 (1)     @fdsnom clra                    No match (Z is set)
E5C4 3530             (        forth.asm):01147 (4+4)           puls    x,y
E5C6 39               (        forth.asm):01148 (4)             rts
E5C7 9E06             (        forth.asm):01149 (4)     @fdsmtc ldx     LSTWAD          Potential match. Scan upward from LAST
                      (        forth.asm):01150         * X points to the latest word header, Y has an execution token.
E5C9 109608           (        forth.asm):01151 (5)             ldw     DICEND          W points to the end of the code section
E5CC 3410             (        forth.asm):01152 (4+2)   @fdslop pshs    x               Pointer to the current word header
E5CE E680             (        forth.asm):01153 (4+1)           ldb     ,x+
E5D0 C41F             (        forth.asm):01154 (2)             andb    #WRLNMSK
E5D2 3A               (        forth.asm):01155 (1)             abx                     Skip word name string
E5D3 EC81             (        forth.asm):01156 (5+2)           ldd     ,x++            Backlink to D
                      (        forth.asm):01157                 IFNE    RELFEAT
                      (        forth.asm):01158                 leax    1,x             Skip the checksum
                      (        forth.asm):01159                 ENDC                    RELFEAT
E5D5 103712           (        forth.asm):01160 (4)             cmpr    x,y
E5D8 2530             (        forth.asm):01161 (3)             blo     @fdsnwd
E5DA 103762           (        forth.asm):01162 (4)             cmpr    w,y
E5DD 222B             (        forth.asm):01163 (3)             bhi     @fdsnwd         An equal address is allowed here, in case
                      (        forth.asm):01164         * jsr ERRHDLR is the last instruction for the word under consideration.
                      (        forth.asm):01165         * This happens to be the case for FORGET and LPAR.
                      (        forth.asm):01166         * Y matches the code range for the current word.
E5DF 3510             (        forth.asm):01167 (4+2)           puls    x
E5E1 E680             (        forth.asm):01168 (4+1)           ldb     ,x+
E5E3 C41F             (        forth.asm):01169 (2)             andb    #WRLNMSK
E5E5 1F9F             (        forth.asm):01170 (4)             tfr     b,f
E5E7 114F             (        forth.asm):01171 (2)             clre                    W has the matched word length
E5E9 10AEE4           (        forth.asm):01172 (6+0)           ldy     ,s              Y points to the target buffer
E5EC 113812           (        forth.asm):01173 (6+?)           tfm     x+,y+
E5EF 6FA4             (        forth.asm):01174 (6+0)           clr     ,y              We need this in case the offset is zero
                      (        forth.asm):01175         * Offset processing.
                      (        forth.asm):01176                 IFNE    RELFEAT
                      (        forth.asm):01177                 leax    3,x             Skip backlink and checksum
                      (        forth.asm):01178                 ELSE
E5F1 3002             (        forth.asm):01179 (4+1)           leax    2,x             Skip backlink
                      (        forth.asm):01180                 ENDC                    RELFEAT
E5F3 EC62             (        forth.asm):01181 (5+1)           ldd     2,s             Execution token to D
E5F5 103210           (        forth.asm):01182 (4)             subr    x,d             Offset between XT and word entry point to D
E5F8 270B             (        forth.asm):01183 (3)             beq     @skoffs         Skip displaying the offset if it is zero
E5FA 3402             (        forth.asm):01184 (4+1)           pshs    a               Preserve the offset's MSB
E5FC 862B             (        forth.asm):01185 (2)             lda     #'+
E5FE A7A0             (        forth.asm):01186 (4+1)           sta     ,y+
E600 3502             (        forth.asm):01187 (4+1)           puls    a               Restore the offset's MSB
E602 BDE182           (        forth.asm):01188 (7)             jsr     HDMP4           Dump hex incarnation of the offset to Y
E605 3530             (        forth.asm):01189 (4+4)   @skoffs puls    x,y
E607 1CFB             (        forth.asm):01190 (2)             andcc   #^ZFLAG         Clear ZFLAG
E609 39               (        forth.asm):01191 (4)             rts
                      (        forth.asm):01192         * Point to the next word.
E60A 1039             (        forth.asm):01193 (6)     @fdsnwd pulsw                   Retrieve current word header address
E60C 104D             (        forth.asm):01194 (2)             tstd
E60E 27B3             (        forth.asm):01195 (3)             beq     @fdsnom         Just met the last dictionary entry
E610 1F01             (        forth.asm):01196 (4)             tfr     d,x             Point to previous word header
E612 10810CC0         (        forth.asm):01197 (4)             cmpw    #WDICSPC        Are we transitioning from RAM to ROM?
E616 26B4             (        forth.asm):01198 (3)             bne     @fdslop         No singularity
E618 1086FE03         (        forth.asm):01199 (4)             ldw     #THEEND         Won't be able to diagnose the ROM based @...
E61C 20AE             (        forth.asm):01200 (3)             bra     @fdslop
                      (        forth.asm):01201         
                      (        forth.asm):01202         * Find the best possible symbolic approximation of Y and store it to the
                      (        forth.asm):01203         * buffer pointed to by X.
                      (        forth.asm):01204         * On entry:
                      (        forth.asm):01205         * - Y has a code address which is to be matched with a symbolic name + offset.
                      (        forth.asm):01206         * - X points to a buffer where the resolution is to be stored.
                      (        forth.asm):01207         * On return:
                      (        forth.asm):01208         * - Y is to be preserved.
                      (        forth.asm):01209         * - the output buffer will be updated with the best symbolic match (NUL term'd).
E61E 3430             (        forth.asm):01210 (4+4)   FINDSYM pshs    y,x
E620 8D8A             (        forth.asm):01211 (6)             bsr     FDCTSYM         Search the dictionary first (flexible match)
E622 261B             (        forth.asm):01212 (3)             bne     @dctmfn         Dictionary match found
E624 8EE644           (        forth.asm):01213 (3)             ldx     #NDCTWKS        Search kernel symbols for an exact match
E627 EC81             (        forth.asm):01214 (5+2)   @fsmlop ldd     ,x++
E629 270B             (        forth.asm):01215 (3)             beq     @fsmfnd         End of well known symbols list?
E62B 103720           (        forth.asm):01216 (4)             cmpr    y,d
E62E 2706             (        forth.asm):01217 (3)             beq     @fsmfnd
                      (        forth.asm):01218         * No well known symbol match. Skip string.
E630 A680             (        forth.asm):01219 (4+1)   @fsmskp lda     ,x+
E632 26FC             (        forth.asm):01220 (3)             bne     @fsmskp
E634 20F1             (        forth.asm):01221 (3)             bra     @fsmlop
E636 10AEE4           (        forth.asm):01222 (6+0)   @fsmfnd ldy     ,s
E639 A680             (        forth.asm):01223 (4+1)   @fsmfn2 lda     ,x+
E63B A7A0             (        forth.asm):01224 (4+1)           sta     ,y+
E63D 26FA             (        forth.asm):01225 (3)             bne     @fsmfn2
E63F 3262             (        forth.asm):01226 (4+1)   @dctmfn leas    2,s             Drop X from the system stack
E641 3520             (        forth.asm):01227 (4+2)           puls    y
E643 39               (        forth.asm):01228 (4)             rts
                      (        forth.asm):01229         
                      (        forth.asm):01230         * Non-dictionary well known symbols.
E644 E000             (        forth.asm):01231         NDCTWKS fdb     IODZHDL         Illegal opcode/Division by zero trap handler
E646 494F445A48444C00 (        forth.asm):01232                 fcn     'IODZHDL'
E64E E807             (        forth.asm):01233                 fdb     DPOPRA          Data stack underflow
E650 44504F50524100   (        forth.asm):01234                 fcn     'DPOPRA'
E657 E7F5             (        forth.asm):01235                 fdb     DPSHRA          Data stack overflow
E659 44505348524100   (        forth.asm):01236                 fcn     'DPSHRA'
E660 E83D             (        forth.asm):01237                 fdb     RPOPRA          Return stack underflow
E662 52504F50524100   (        forth.asm):01238                 fcn     'RPOPRA'
E669 E823             (        forth.asm):01239                 fdb     RPSHRA          Return stack overflow
E66B 52505348524100   (        forth.asm):01240                 fcn     'RPSHRA'
E672 E75E             (        forth.asm):01241                 fdb     ERRHDLR         Error handler
E674 45525248444C5200 (        forth.asm):01242                 fcn     'ERRHDLR'
E67C E3E2             (        forth.asm):01243                 fdb     CKBASRA         Illegal BASE value
E67E 434B424153524100 (        forth.asm):01244                 fcn     'CKBASRA'
E686 E491             (        forth.asm):01245                 fdb     CKDPTRA         Not enough parameters supplied (transac. behav.)
E688 434B445054524100 (        forth.asm):01246                 fcn     'CKDPTRA'
E690 E486             (        forth.asm):01247                 fdb     CHKNDPT         Check data stack minimum depth (transac. behav.)
E692 43484B4E44505400 (        forth.asm):01248                 fcn     'CHKNDPT'
E69A E58D             (        forth.asm):01249                 fdb     CMP2RA          Missing operand in any of U<, U>, <, >
E69C 434D5032524100   (        forth.asm):01250                 fcn     'CMP2RA'
E6A3 E5A1             (        forth.asm):01251                 fdb     ACQVMRA         Three operands missing in any of CMOVE,
                      (        forth.asm):01252         *                               CMOVE>, MOVE
E6A5 414351564D524100 (        forth.asm):01253                 fcn     'ACQVMRA'
E6AD E0CC             (        forth.asm):01254                 fdb     MINTLRA         Main interpreter loop return address
E6AF 4D494E544C524100 (        forth.asm):01255                 fcn     'MINTLRA'
E6B7 E43C             (        forth.asm):01256                 fdb     NUMCVRA         ? while converting a string to a number
E6B9 4E554D4356524100 (        forth.asm):01257                 fcn     'NUMCVRA'
E6C1 E0E4             (        forth.asm):01258                 fdb     NMCVIRA         Numeric conversion error while interpreting
E6C3 4E4D435649524100 (        forth.asm):01259                 fcn     'NMCVIRA'
E6CB E13C             (        forth.asm):01260                 fdb     NMCVCRA         Numeric conversion error while compiling
E6CD 4E4D435643524100 (        forth.asm):01261                 fcn     'NMCVCRA'
E6D5 E111             (        forth.asm):01262                 fdb     INTRPRA         Interpreter RA (after the execution of a word)
E6D7 494E545250524100 (        forth.asm):01263                 fcn     'INTRPRA'
E6DF E12A             (        forth.asm):01264                 fdb     COMPLRA         Compiler RA (after the execution of an IMD word)
E6E1 434F4D504C524100 (        forth.asm):01265                 fcn     'COMPLRA'
E6E9 E155             (        forth.asm):01266                 fdb     EMXASXT         Emit "JSR <X>" where X has an execution token
E6EB 454D584153585400 (        forth.asm):01267                 fcn     'EMXASXT'
E6F3 E52A             (        forth.asm):01268                 fdb     LWMNRA          Missing word name in LOCWRT
E6F5 4C574D4E524100   (        forth.asm):01269                 fcn     'LWMNRA'
E6FC E964             (        forth.asm):01270                 fdb     CFR1SRA         CF read one sector failed
E6FE 4346523153524100 (        forth.asm):01271                 fcn     'CFR1SRA'
E706 E7E8             (        forth.asm):01272                 fdb     NPUSH           Not an error RA but useful to have as a symbol
E708 4E5055534800     (        forth.asm):01273                 fcn     'NPUSH'
E70E E808             (        forth.asm):01274                 fdb     RPUSH           Not an error RA but useful to have as a symbol
E710 525055534800     (        forth.asm):01275                 fcn     'RPUSH'
E716 E7F6             (        forth.asm):01276                 fdb     NPOP            Not an error RA but useful to have as a symbol
E718 4E504F5000       (        forth.asm):01277                 fcn     'NPOP'
E71D E824             (        forth.asm):01278                 fdb     RPOP            Not an error RA but useful to have as a symbol
E71F 52504F5000       (        forth.asm):01279                 fcn     'RPOP'
E724 E2E0             (        forth.asm):01280                 fdb     PUTS            Not an error RA but useful to have as a symbol
E726 5055545300       (        forth.asm):01281                 fcn     'PUTS'
                      (        forth.asm):01282                 IFNE    DEBUG
                      (        forth.asm):01283                 fdb     LWAFRA          Assertion failure in LOCWRT
                      (        forth.asm):01284                 fcn     'LOCWRTAF'
                      (        forth.asm):01285                 ENDC
E72B 0000             (        forth.asm):01286                 fdb     0               End of list
E72D 3F3F3F00         (        forth.asm):01287                 fcn     '???'           Admit we have no clue!
                      (        forth.asm):01288                 ENDC                    SSDFEAT
                      (        forth.asm):01289         
                      (        forth.asm):01290         * Print ' (xxxx/yyyy)' where xxxx is the hex representation for BLK @ and
                      (        forth.asm):01291         * yyyy is the hex representation for >IN @. Y is preserved, X and D are not.
E731 3420             (        forth.asm):01292 (4+2)   PRBLKIN pshs    y
E733 108E03FA         (        forth.asm):01293 (4)             ldy     #HEXBUF
E737 8620             (        forth.asm):01294 (2)             lda     #SP
E739 A7A0             (        forth.asm):01295 (4+1)           sta     ,y+
E73B 8628             (        forth.asm):01296 (2)             lda     #'(
E73D A7A0             (        forth.asm):01297 (4+1)           sta     ,y+
E73F DC2C             (        forth.asm):01298 (4)             ldd     UBLK
E741 BDE182           (        forth.asm):01299 (7)             jsr     HDMP4
E744 862F             (        forth.asm):01300 (2)             lda     #'/
E746 A7A0             (        forth.asm):01301 (4+1)           sta     ,y+
E748 DC2A             (        forth.asm):01302 (4)             ldd     UTOIN
E74A BDE182           (        forth.asm):01303 (7)             jsr     HDMP4
E74D 8629             (        forth.asm):01304 (2)             lda     #')
E74F A7A0             (        forth.asm):01305 (4+1)           sta     ,y+
E751 6FA4             (        forth.asm):01306 (6+0)           clr     ,y
E753 8E03FA           (        forth.asm):01307 (3)             ldx     #HEXBUF
E756 BDE2E0           (        forth.asm):01308 (7)             jsr     PUTS
E759 3520             (        forth.asm):01309 (4+2)           puls    y
E75B 7EE2ED           (        forth.asm):01310 (3)             jmp     PUTCR
                      (        forth.asm):01311         
                      (        forth.asm):01312         * Handle error condition. Error code is in B.
                      (        forth.asm):01313         * If B is 2 (undefined) X points to a string of length CURTOKL that has the
                      (        forth.asm):01314         * offending word.
E75E 10AEE4           (        forth.asm):01315 (6+0)   ERRHDLR ldy     ,s              Invoking return address
                      (        forth.asm):01316         * In case of a trap return, we enter here with Y set to #IODZHDL
E761 BDE2ED           (        forth.asm):01317 (7)     ERRHD1  jsr     PUTCR           GNU Forth does this in its exception handler
E764 C102             (        forth.asm):01318 (2)             cmpb    #2              Undefined symbol?
E766 2618             (        forth.asm):01319 (3)             bne     @perrm          No
E768 8627             (        forth.asm):01320 (2)             lda     #''             Begin quote
E76A BDE2CD           (        forth.asm):01321 (7)             jsr     PUTCH
E76D A680             (        forth.asm):01322 (4+1)   @prtsym lda     ,x+             Display undefined symbol name
E76F BDE2CD           (        forth.asm):01323 (7)             jsr     PUTCH
E772 0A42             (        forth.asm):01324 (5)             dec     CURTOKL
E774 26F7             (        forth.asm):01325 (3)             bne     @prtsym
E776 8627             (        forth.asm):01326 (2)             lda     #''             End quote
E778 BDE2CD           (        forth.asm):01327 (7)             jsr     PUTCH
E77B 8620             (        forth.asm):01328 (2)             lda     #SP             BL EMIT
E77D BDE2CD           (        forth.asm):01329 (7)             jsr     PUTCH
E780 8EFEB4           (        forth.asm):01330 (3)     @perrm  ldx     #ERRMTBL        Regular error handling
E783 5D               (        forth.asm):01331 (1)     @nxterr tstb
E784 2637             (        forth.asm):01332 (3)             bne     @skerrm
E786 BDE2E0           (        forth.asm):01333 (7)             jsr     PUTS            Print error message
E789 8DA6             (        forth.asm):01334 (6)             bsr     PRBLKIN         Print BLK and >IN values (in hex)
E78B 1F20             (        forth.asm):01335 (4)     @dmptos tfr     y,d             Dump top of the system stack contents
                      (        forth.asm):01336                 IFNE    SSDFEAT
E78D 3406             (        forth.asm):01337 (4+2)           pshs    d
                      (        forth.asm):01338                 ENDC                    SSDFEAT
E78F 108E03FA         (        forth.asm):01339 (4)             ldy     #HEXBUF
E793 BDE182           (        forth.asm):01340 (7)             jsr     HDMP4
E796 8620             (        forth.asm):01341 (2)             lda     #SP
E798 A7A0             (        forth.asm):01342 (4+1)           sta     ,y+
                      (        forth.asm):01343         * Symbolic stack dumps are configurable. In situations where the dictionary is
                      (        forth.asm):01344         * trashed, they may not be considered desirable. See SSDFEAT in constants.asm.
                      (        forth.asm):01345                 IFNE    SSDFEAT
E79A 1F21             (        forth.asm):01346 (4)             tfr     y,x             X has the buffer pointer
E79C 3520             (        forth.asm):01347 (4+2)           puls    y               Restore target symbol table entry
E79E BDE61E           (        forth.asm):01348 (7)             jsr     FINDSYM
                      (        forth.asm):01349                 ELSE
                      (        forth.asm):01350                 clr     ,y              No symbolic information is to be printed
                      (        forth.asm):01351                 ENDC                    SSDFEAT
E7A1 8E03FA           (        forth.asm):01352 (3)             ldx     #HEXBUF
E7A4 BDE2E0           (        forth.asm):01353 (7)             jsr     PUTS
E7A7 BDE2ED           (        forth.asm):01354 (7)             jsr     PUTCR
E7AA 108CE000         (        forth.asm):01355 (4)             cmpy    #IODZHDL
E7AE 2702             (        forth.asm):01356 (3)             beq     @wastrp         We're just back from the trap handler
E7B0 3262             (        forth.asm):01357 (4+1)           leas    2,s             Point to the next item on the stack
E7B2 118C8000         (        forth.asm):01358 (4)     @wastrp cmps    #RAMSTRT+RAMSIZE
E7B6 240C             (        forth.asm):01359 (3)             bhs     @errdon         We're done here
E7B8 10AEE4           (        forth.asm):01360 (6+0)           ldy     ,s
E7BB 20CE             (        forth.asm):01361 (3)             bra     @dmptos
E7BD A680             (        forth.asm):01362 (4+1)   @skerrm lda     ,x+             Scan for the next error message
E7BF 26FC             (        forth.asm):01363 (3)             bne     @skerrm
E7C1 5A               (        forth.asm):01364 (1)             decb
E7C2 20BF             (        forth.asm):01365 (3)             bra     @nxterr
E7C4 10CE8000         (        forth.asm):01366 (4)     @errdon lds     #RAMSTRT+RAMSIZE
E7C8 0D25             (        forth.asm):01367 (4)             tst     USTATE+1        We do ignore the upper byte
E7CA 2710             (        forth.asm):01368 (3)             beq     @erdon2         No pointers to restore if we were interpreting
                      (        forth.asm):01369         * We were compiling: clear STATE; restore DICEND and LSTWAD, if not :NONAME.
E7CC 0F25             (        forth.asm):01370 (5)             clr     USTATE+1        Switch back to interpretation mode
E7CE 9E0C             (        forth.asm):01371 (4)             ldx     BDICEND         Restore essential pointers from backups
E7D0 9F08             (        forth.asm):01372 (4)             stx     DICEND          Restore HERE
E7D2 0D34             (        forth.asm):01373 (4)             tst     ANCMPF
E7D4 2604             (        forth.asm):01374 (3)             bne     @clrano
E7D6 9E0A             (        forth.asm):01375 (4)             ldx     BLSTWAD
E7D8 9F06             (        forth.asm):01376 (4)             stx     LSTWAD          Restore LAST
E7DA 0F34             (        forth.asm):01377 (5)     @clrano clr     ANCMPF
E7DC BDEBB0           (        forth.asm):01378         @erdon2 RFXT    jsr,RCLR+7      Clear the return stack and
E7DF BDEBA5           (        forth.asm):01379                 RFXT    jsr,NCLR+7      the control flow stack (moved here from ABORT)
E7E2 BDFBC6           (        forth.asm):01380                 RFXT    jsr,DECIMAL+10  Back to decimal BASE, for one's sanity sake!
E7E5 7EE0B2           (        forth.asm):01381 (3)             jmp     INTERP
                      (        forth.asm):01382         
                      (        forth.asm):01383         * Push X to the data stack (boundary is checked).
E7E8 11830236         (        forth.asm):01384 (4)     NPUSH   cmpu    #NSTTOP
E7EC 2303             (        forth.asm):01385 (3)             bls     @npush1         Anything <= than #NSTTOP indicates overflow
E7EE 3610             (        forth.asm):01386 (4+2)           pshu    x               Aka UCNPUSH
E7F0 39               (        forth.asm):01387 (4)             rts
E7F1 5F               (        forth.asm):01388 (1)     @npush1 clrb                    Data stack overflow
E7F2 BDE75E           (        forth.asm):01389 (7)             jsr     ERRHDLR         No return
     E7F5             (        forth.asm):01390         DPSHRA  equ     *
E7F5 12               (        forth.asm):01391 (1)             nop
                      (        forth.asm):01392         
                      (        forth.asm):01393         * Pull X from the data stack (boundary is checked).
                      (        forth.asm):01394         * D, W and Y are preserved.
E7F6 118302F6         (        forth.asm):01395 (4)     NPOP    cmpu    #NSTBOT
E7FA 2406             (        forth.asm):01396 (3)             bhs     @npop1          Anything >= than #NSTBOT indicates underflow
E7FC 3710             (        forth.asm):01397 (4+2)           pulu    x
E7FE 1037C1           (        forth.asm):01398 (4)             cmpr    0,x             Update CC based on the outcome
E801 39               (        forth.asm):01399 (4)             rts
E802 C601             (        forth.asm):01400 (2)     @npop1  ldb     #1              Data stack underflow
E804 BDE75E           (        forth.asm):01401 (7)             jsr     ERRHDLR         No return
     E807             (        forth.asm):01402         DPOPRA  equ     *
E807 12               (        forth.asm):01403 (1)             nop
                      (        forth.asm):01404         
                      (        forth.asm):01405         * Push X to the return stack (boundary is checked).
E808 9637             (        forth.asm):01406 (3)     RPUSH   lda     RDEPTH          RDEPTH is expressed in cells
E80A 8140             (        forth.asm):01407 (2)             cmpa    #RSTKSZ/2       But RSTKZ is expressed in bytes
E80C 2710             (        forth.asm):01408 (3)             beq     @rpush1
E80E 4C               (        forth.asm):01409 (1)             inca
E80F 9737             (        forth.asm):01410 (3)             sta     RDEPTH
E811 1F27             (        forth.asm):01411 (4)             tfr     y,v
E813 109E00           (        forth.asm):01412 (5)             ldy     RSP
E816 AFA3             (        forth.asm):01413 (5+2)           stx     ,--y
E818 109F00           (        forth.asm):01414 (5)             sty     RSP
E81B 1F72             (        forth.asm):01415 (4)             tfr     v,y
E81D 39               (        forth.asm):01416 (4)             rts
E81E C607             (        forth.asm):01417 (2)     @rpush1 ldb     #7              Return stack overflow
E820 BDE75E           (        forth.asm):01418 (7)             jsr     ERRHDLR         No return
     E823             (        forth.asm):01419         RPSHRA  equ     *
E823 12               (        forth.asm):01420 (1)             nop                     Meant to insulate RPUSH errors from RPOP EP
                      (        forth.asm):01421         
                      (        forth.asm):01422         * Pull X from the return stack (boundary is checked).
E824 9637             (        forth.asm):01423 (3)     RPOP    lda     RDEPTH          RDEPTH is expressed in cells
E826 2710             (        forth.asm):01424 (3)             beq     @rpop1
E828 4A               (        forth.asm):01425 (1)             deca
E829 9737             (        forth.asm):01426 (3)             sta     RDEPTH
E82B 1F27             (        forth.asm):01427 (4)             tfr     y,v
E82D 109E00           (        forth.asm):01428 (5)             ldy     RSP
E830 AEA1             (        forth.asm):01429 (5+2)           ldx     ,y++
E832 109F00           (        forth.asm):01430 (5)             sty     RSP
E835 1F72             (        forth.asm):01431 (4)             tfr     v,y
E837 39               (        forth.asm):01432 (4)             rts
E838 C608             (        forth.asm):01433 (2)     @rpop1  ldb     #8              Return stack underflow
E83A BDE75E           (        forth.asm):01434 (7)             jsr     ERRHDLR         No return
     E83D             (        forth.asm):01435         RPOPRA  equ     *
                      (        forth.asm):01436         
E83D 0D35             (        forth.asm):01437 (4)     BALCHK  tst     BALNCD
E83F 2601             (        forth.asm):01438 (3)             bne     BALERR
E841 39               (        forth.asm):01439 (4)             rts
E842 C609             (        forth.asm):01440 (2)     BALERR  ldb     #9              Illegal construct
E844 BDE75E           (        forth.asm):01441 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):01442         
E847 3410             (        forth.asm):01443 (4+2)   SAVINP  pshs    x
E849 1FC1             (        forth.asm):01444 (4)             tfr     0,x
E84B 0D49             (        forth.asm):01445 (4)             tst     SRCID
E84D 2702             (        forth.asm):01446 (3)             beq     @pushb
E84F 9E20             (        forth.asm):01447 (4)             ldx     BSBFADR
E851 8DB5             (        forth.asm):01448 (6)     @pushb  bsr     RPUSH           Push 0 if SRCID is zero else BSBFADR
E853 9E2C             (        forth.asm):01449 (4)             ldx     UBLK
E855 8DB1             (        forth.asm):01450 (6)             bsr     RPUSH           Push BLK on the return stack
E857 9E2A             (        forth.asm):01451 (4)             ldx     UTOIN
E859 8DAD             (        forth.asm):01452 (6)             bsr     RPUSH           Push >IN on the return stack
E85B 9E26             (        forth.asm):01453 (4)             ldx     ISLEN
E85D 8DA9             (        forth.asm):01454 (6)             bsr     RPUSH           Push ISLEN on the return stack
E85F 3510             (        forth.asm):01455 (4+2)           puls    x
E861 39               (        forth.asm):01456 (4)             rts
                      (        forth.asm):01457         
E862 8DC0             (        forth.asm):01458 (6)     RSTINP  bsr     RPOP
E864 9F26             (        forth.asm):01459 (4)             stx     ISLEN           Restore ISLEN from the return stack
E866 8DBC             (        forth.asm):01460 (6)             bsr     RPOP
E868 9F2A             (        forth.asm):01461 (4)             stx     UTOIN           Restore >IN from the return stack
E86A 8DB8             (        forth.asm):01462 (6)             bsr     RPOP
E86C 9F2C             (        forth.asm):01463 (4)             stx     UBLK            Restore BLK from the return stack
E86E 8DB4             (        forth.asm):01464 (6)             bsr     RPOP
E870 0F49             (        forth.asm):01465 (5)             clr     SRCID
E872 1037C1           (        forth.asm):01466 (4)             cmpr    0,x
E875 2704             (        forth.asm):01467 (3)             beq     @done
E877 9F20             (        forth.asm):01468 (4)             stx     BSBFADR
E879 0349             (        forth.asm):01469 (5)             com     SRCID           Set SRCID to an NZ value
E87B 39               (        forth.asm):01470 (4)     @done   rts
                      (        forth.asm):01471         
                      (        forth.asm):01472         * Derive the current input stream pointer from BLK and >IN.
                      (        forth.asm):01473         * The resulting address is returned in X. D is altered.
                      (        forth.asm):01474         * The end of input stream address is re-computed.
                      (        forth.asm):01475         * Both Y and W are preserved.
E87C 3420             (        forth.asm):01476 (4+2)   BKIN2PT pshs    y
E87E 9E2C             (        forth.asm):01477 (4)             ldx     UBLK
E880 271E             (        forth.asm):01478 (3)             beq     @notblk         Back to the console or a counted string
E882 1038             (        forth.asm):01479 (6)             pshsw
E884 BDE7E8           (        forth.asm):01480 (7)             jsr     NPUSH           Make sure BLK @ is loaded
E887 BDEAA8           (        forth.asm):01481                 RFXT    jsr,BLOCK+8     XT for BLOCK
E88A 1039             (        forth.asm):01482 (6)             pulsw
E88C 3710             (        forth.asm):01483                 UCNPOP                  Retrieve buffer addr to X
E88E 9F20             (        forth.asm):01484 (4)     @rsolvd stx     BSBFADR         Update base buffer address
E890 1F12             (        forth.asm):01485 (4)             tfr     x,y
E892 DC26             (        forth.asm):01486 (4)             ldd     ISLEN
E894 31AB             (        forth.asm):01487 (4+2)           leay    d,y
E896 109F28           (        forth.asm):01488 (5)             sty     ISEADDR         Update the end of input stream address
E899 3520             (        forth.asm):01489 (4+2)           puls    y
E89B DC2A             (        forth.asm):01490 (4)             ldd     UTOIN
E89D 308B             (        forth.asm):01491 (4+2)           leax    d,x             Add the current offset. Return the result via X
E89F 39               (        forth.asm):01492 (4)             rts
E8A0 8E0376           (        forth.asm):01493 (3)     @notblk ldx     #CMDBUF         Assume we are returning to the console
E8A3 0D49             (        forth.asm):01494 (4)             tst     SRCID           Are we running under EVALUATE?
E8A5 27E7             (        forth.asm):01495 (3)             beq     @rsolvd         No
E8A7 9E20             (        forth.asm):01496 (4)             ldx     BSBFADR         We are returning to a counted string
E8A9 20E3             (        forth.asm):01497 (3)             bra     @rsolvd
                      (        forth.asm):01498         
                      (        forth.asm):01499                 include rtc.asm         Experimental MC146818 support
                      (          rtc.asm):00001                 IFNE RTCFEAT
                      (          rtc.asm):00002         
                      (          rtc.asm):00003         * FIRQ handler for the MC146818 RTC.
                      (          rtc.asm):00004         * In this particular context, only D and CC might be altered.
E8AB                  (          rtc.asm):00005         RTCIHDL tst     RTCAVL          RTC chip detected?
                      (          rtc.asm):00006                 beq     @notick         Nope
                      (          rtc.asm):00007                 lda     #RTOREGC        Read RTCC. INTACK if any interrupt is pending.
                      (          rtc.asm):00008         * Two intructions inlined for RTREGRD in non-preemtible (interrupt) mode.
                      (          rtc.asm):00009                 sta     RTAS
                      (          rtc.asm):00010                 ldb     RTDS
                      (          rtc.asm):00011                 andb    #RTCPF          RTC periodic interrupt pending?
                      (          rtc.asm):00012                 beq     @notick         No, this ain't us ticking
                      (          rtc.asm):00013         * From "The 6309 Book" p. 3-69: "Note that INC does not effect the carry bit."
E8AB                  (          rtc.asm):00014         @inctks ldd     TIKSLOW
                      (          rtc.asm):00015                 addd    #1
                      (          rtc.asm):00016                 std     TIKSLOW
                      (          rtc.asm):00017                 ldd     TIKSHI
                      (          rtc.asm):00018                 adcd    #0
                      (          rtc.asm):00019                 std     TIKSHI
E8AB                  (          rtc.asm):00020         @notick rts
                      (          rtc.asm):00021         
                      (          rtc.asm):00022         * Read one byte from an internal's RTC register whose offset is in A upon
                      (          rtc.asm):00023         * routine entry. The register contents is returned in B.
                      (          rtc.asm):00024         * No other register is altered. FIRQ is temporarily disabled.
                      (          rtc.asm):00025         * Can be called from base or interrupt level.
E8AB                  (          rtc.asm):00026         RTREGRD pshs    cc
                      (          rtc.asm):00027                 orcc    #FFLAG          Mask FIRQ
                      (          rtc.asm):00028                 sta     RTAS            Select target RTC register
                      (          rtc.asm):00029                 ldb     RTDS            Read RTC register contents
                      (          rtc.asm):00030                 puls    cc              Restore previous interrupt handling mode
                      (          rtc.asm):00031                 rts
                      (          rtc.asm):00032         
                      (          rtc.asm):00033         * Write one byte to an internal's RTC register whose offset is in A upon
                      (          rtc.asm):00034         * routine entry. The register byte output value is in B upon entry.
                      (          rtc.asm):00035         * FIRQ is temporarily masked. All regs contents are preserved.
                      (          rtc.asm):00036         * Can be called from base or interrupt level.
E8AB                  (          rtc.asm):00037         RTREGWR pshs    cc
                      (          rtc.asm):00038                 orcc    #FFLAG          Mask FIRQ
                      (          rtc.asm):00039                 sta     RTAS            Select target RTC register
                      (          rtc.asm):00040                 stb     RTDS            Write RTC register contents
                      (          rtc.asm):00041                 puls    cc              Restore previous interrupt handling mode
                      (          rtc.asm):00042                 rts
                      (          rtc.asm):00043         
                      (          rtc.asm):00044         * Detect if an MC146818 chip is present.
E8AB                  (          rtc.asm):00045         RTCINIT
                      (          rtc.asm):00046                 IFNE    DEBUG
                      (          rtc.asm):00047                 clrd
                      (          rtc.asm):00048                 std     TIKSHI          Initialize the TICKS double cell
                      (          rtc.asm):00049                 std     TIKSLOW
                      (          rtc.asm):00050                 clr     RTCAVL          Assume chip not present
                      (          rtc.asm):00051                 ENDC
                      (          rtc.asm):00052                 lda     #RTOPRES        Offset to the last NVRAM byte if dev is present
                      (          rtc.asm):00053                 bsr     RTREGRD         Read user memory byte. Value is returned in B   
                      (          rtc.asm):00054                 comb                    One's complement to B
                      (          rtc.asm):00055                 pshs    b
                      (          rtc.asm):00056                 bsr     RTREGWR         Write back one's complement to RTC
                      (          rtc.asm):00057                 bsr     RTREGRD         And read the last NVRAM byte back
                      (          rtc.asm):00058                 puls    a
                      (          rtc.asm):00059                 cmpr    b,a             Match?
                      (          rtc.asm):00060                 beq     @rtdtct         RTC chip detected all right!
                      (          rtc.asm):00061                 rts
                      (          rtc.asm):00062         * MC146818 RTC chip detected.
                      (          rtc.asm):00063         * On power up if register RTCA reads as 0, the SET bit in register RTCB will
                      (          rtc.asm):00064         * prevent any updates to the calendar (date/time). We do preserve the state of
                      (          rtc.asm):00065         * the SET bit, so as to indicate to the application software that the time and
                      (          rtc.asm):00066         * date have yet to be set manually.
E8AB                  (          rtc.asm):00067         @rtdtct lda     #RTOREGA
                      (          rtc.asm):00068                 ldb     #(RTADV32|RTARS64)
                      (          rtc.asm):00069                 bsr     RTREGWR         Write B to the RTCA register
                      (          rtc.asm):00070                 lda     #RTOREGB
                      (          rtc.asm):00071                 bsr     RTREGRD
                      (          rtc.asm):00072                 andb    #RTBSET         Extract the SET bit
                      (          rtc.asm):00073                 orb     #(RTBPIE|RTBDM|RTB24)
                      (          rtc.asm):00074                 bsr     RTREGWR         Write B to the RTCB register
                      (          rtc.asm):00075                 inc     RTCAVL
                      (          rtc.asm):00076                 ldx     #RTPRESM        Real time clock detected message base address
                      (          rtc.asm):00077                 jmp     PUTS            Out to the console
                      (          rtc.asm):00078         
                      (          rtc.asm):00079                 ENDC                    RTCFEAT
                      (          rtc.asm):00080         
                      (        forth.asm):01500                 include storage.asm     CompactFlash support
                      (      storage.asm):00001         * Wait until the BSY bit is clear in the CF status register.
                      (      storage.asm):00002         * Upon return the BSY bit is guaranteed to be zero. Z will
                      (      storage.asm):00003         * be set in CC. This subroutine should not be called before
                      (      storage.asm):00004         * the CompactFlash presence has been assessed.
E8AB B6C007           (      storage.asm):00005 (4)     CFWAIT  lda     CFSTATR
E8AE 8580             (      storage.asm):00006 (2)             bita    #CFBSYB
E8B0 26F9             (      storage.asm):00007 (3)             bne     CFWAIT
E8B2 39               (      storage.asm):00008 (4)             rts
                      (      storage.asm):00009         
                      (      storage.asm):00010         * Wait until the BSY bit is clear and the RDY bit is set.
E8B3 8DF6             (      storage.asm):00011 (6)     CFRDY   bsr     CFWAIT
E8B5 2703             (      storage.asm):00012 (3)             beq     @cfrdy0         Card not busy, proceed
E8B7 1A04             (      storage.asm):00013 (2)             orcc    #ZFLAG
E8B9 39               (      storage.asm):00014 (4)             rts
E8BA 8E2000           (      storage.asm):00015 (3)     @cfrdy0 ldx     #$2000          Maximum poll count
E8BD 8640             (      storage.asm):00016 (2)             lda     #CFRDYB
E8BF B5C007           (      storage.asm):00017 (4)     @cfrdy1 bita    CFSTATR
E8C2 2604             (      storage.asm):00018 (3)             bne     @cfrdy2         BSY bit is set, continue
E8C4 301F             (      storage.asm):00019 (4+1)           leax    -1,x            Card not ready, decrement poll count
E8C6 26F7             (      storage.asm):00020 (3)             bne     @cfrdy1         and try again
E8C8 39               (      storage.asm):00021 (4)     @cfrdy2 rts                     Return with Z set: card not present
                      (      storage.asm):00022         *                               Return with Z clear: card is ready
                      (      storage.asm):00023         
                      (      storage.asm):00024         * Check for possible error condition.
                      (      storage.asm):00025         * Upon return either Z is set (A is zero) and no error occurred or
                      (      storage.asm):00026         * Z is clear and the CF error register contents is returned in A.
E8C9 8DE0             (      storage.asm):00027 (6)     CFERRCK bsr     CFWAIT
E8CB B6C007           (      storage.asm):00028 (4)             lda     CFSTATR
E8CE 8401             (      storage.asm):00029 (2)             anda    #CFERRB
E8D0 2703             (      storage.asm):00030 (3)             beq     @cfeck1
E8D2 B6C001           (      storage.asm):00031 (4)             lda     CFERROR         The error register contains error details
E8D5 39               (      storage.asm):00032 (4)     @cfeck1 rts
                      (      storage.asm):00033         
                      (      storage.asm):00034         * Issue CF command. The command code is passed through the B register.
                      (      storage.asm):00035         * Upon return:
                      (      storage.asm):00036         * - Z is set and everything is peachy.
                      (      storage.asm):00037         * - or Z is clear and the CF error register contents will be
                      (      storage.asm):00038         *   returned in A (and mirrored in the global CFERRCD variable).
                      (      storage.asm):00039         * B is preserved.
E8D6 8DDB             (      storage.asm):00040 (6)     CFCMDIS bsr     CFRDY
E8D8 270A             (      storage.asm):00041 (3)             beq     @cfciab         Card not ready, abort
E8DA D747             (      storage.asm):00042 (3)             stb     CFCMMIR         Update CF command mirror
E8DC F7C007           (      storage.asm):00043 (4)             stb     CFCOMDR         Send command to the CF card
E8DF 8DE8             (      storage.asm):00044 (6)             bsr     CFERRCK
E8E1 9748             (      storage.asm):00045 (3)     @cfcise sta     CFERRCD         CF command issue set error
                      (      storage.asm):00046                 IFNE    DEBUG
                      (      storage.asm):00047                 pshs    a,cc
                      (      storage.asm):00048                 beq     @cfciok
                      (      storage.asm):00049                 lda     #'!
                      (      storage.asm):00050                 jsr     PUTCH
E8E3                  (      storage.asm):00051         @cfcidi lda     CFCMMIR
                      (      storage.asm):00052                 ldx     #TBUFF
                      (      storage.asm):00053                 jsr     HDMP2
                      (      storage.asm):00054                 lda     #'/
                      (      storage.asm):00055                 sta     ,x+
                      (      storage.asm):00056                 lda     CFERRCD
                      (      storage.asm):00057                 jsr     HDMP2
                      (      storage.asm):00058                 ldx     #TBUFF
                      (      storage.asm):00059                 jsr     PUTS
                      (      storage.asm):00060                 jsr     PUTCR
                      (      storage.asm):00061                 bra     @cfcict         CF command issue continued
E8E3                  (      storage.asm):00062         @cfciok lda     #'#
                      (      storage.asm):00063                 jsr     PUTCH
                      (      storage.asm):00064                 bra     @cfcidi         CF command issue data indication
E8E3                  (      storage.asm):00065         @cfcict puls    cc,a
                      (      storage.asm):00066                 ENDC
E8E3 39               (      storage.asm):00067 (4)             rts
E8E4 86FF             (      storage.asm):00068 (2)     @cfciab lda     #$FF            Dummy error code
E8E6 20F9             (      storage.asm):00069 (3)             bra     @cfcise
                      (      storage.asm):00070         
                      (      storage.asm):00071         * Drive 0 select.
E8E8 8DC9             (      storage.asm):00072 (6)     CFDRSEL bsr     CFRDY
E8EA 86E0             (      storage.asm):00073 (2)             lda     #$E0            Drive 0, LBA mode
E8EC B7C006           (      storage.asm):00074 (4)             sta     CFDRHDR
E8EF 20C2             (      storage.asm):00075 (3)             bra     CFRDY
                      (      storage.asm):00076         
                      (      storage.asm):00077         * Analyze the response to the CF "Identify Device" request.
E8F1 9E08             (      storage.asm):00078 (4)     CFANTHS ldx     DICEND
E8F3 308836           (      storage.asm):00079 (4+1)           leax    $36,x           Point to the "Model number" field
E8F6 3410             (      storage.asm):00080 (4+2)           pshs    x
E8F8 118614           (      storage.asm):00081 (3)             lde     #$14            Number of 16 bit words to go through
E8FB EC84             (      storage.asm):00082 (5+0)   @bytswp ldd     ,x
E8FD 1E98             (      storage.asm):00083 (5)             exg     b,a             Byte swapping
E8FF ED81             (      storage.asm):00084 (5+2)           std     ,x++
E901 114A             (      storage.asm):00085 (2)             dece
E903 26F6             (      storage.asm):00086 (3)             bne     @bytswp
E905 6F84             (      storage.asm):00087 (6+0)           clr     ,x
E907 3510             (      storage.asm):00088 (4+2)           puls    x
E909 BDE2E0           (      storage.asm):00089 (7)             jsr     PUTS            Decent CF cards indicate the capacity that way
E90C 7EE2ED           (      storage.asm):00090 (3)             jmp     PUTCR           Up to $10000 blocks is 64 MB!
                      (      storage.asm):00091         
                      (      storage.asm):00092         * Initialize the CompactFlash subsystem.
                      (      storage.asm):00093         * This is run once at boot time. There is no hot plug support here.
E90F 0F46             (      storage.asm):00094 (5)     CFINIT  clr     CFCARDP         Clear card present,
                      (      storage.asm):00095                 IFEQ    DEBUG
E911 8DA0             (      storage.asm):00096 (6)             bsr     CFRDY
                      (      storage.asm):00097                 ELSE
                      (      storage.asm):00098                 jsr     CFRDY
                      (      storage.asm):00099                 ENDC
E913 2730             (      storage.asm):00100 (3)             beq     @cfinab         Card not ready, abort
E915 8DD1             (      storage.asm):00101 (6)             bsr     CFDRSEL         Drive 0 select
E917 8601             (      storage.asm):00102 (2)             lda     #1              Enable 8-bit data transfers
E919 B7C001           (      storage.asm):00103 (4)             sta     CFFEATR
E91C C6EF             (      storage.asm):00104 (2)             ldb     #CFSETFT        Issue a CF "Set Feature" command
                      (      storage.asm):00105                 IFEQ    DEBUG
E91E 8DB6             (      storage.asm):00106 (6)             bsr     CFCMDIS         Not allowed to fail
                      (      storage.asm):00107                 ELSE
                      (      storage.asm):00108                 jsr     CFCMDIS         Not allowed to fail
                      (      storage.asm):00109                 ENDC
E920 2623             (      storage.asm):00110 (3)             bne     @cfinab         Abort with card present flag clear
E922 8601             (      storage.asm):00111 (2)             lda     #1              Request default PIO mode wo/ IORDY
E924 B7C002           (      storage.asm):00112 (4)             sta     CFSCNTR
E927 8603             (      storage.asm):00113 (2)             lda     #3              ATA-2 "Set Transfer mode"
E929 B7C001           (      storage.asm):00114 (4)             sta     CFFEATR
                      (      storage.asm):00115                 IFEQ    DEBUG
E92C 8DA8             (      storage.asm):00116 (6)             bsr     CFCMDIS         OK to fail
                      (      storage.asm):00117                 ELSE
                      (      storage.asm):00118                 jsr     CFCMDIS         OK to fail
                      (      storage.asm):00119                 ENDC
E92E 8682             (      storage.asm):00120 (2)             lda     #$82            Disable write caching
E930 B7C001           (      storage.asm):00121 (4)             sta     CFFEATR
                      (      storage.asm):00122                 IFEQ    DEBUG
E933 8DA1             (      storage.asm):00123 (6)             bsr     CFCMDIS         B still has #CFSETF. Also OK to fail
                      (      storage.asm):00124                 ELSE
                      (      storage.asm):00125                 jsr     CFCMDIS         B still has #CFSETF. Also OK to fail
                      (      storage.asm):00126                 ENDC
E935 C6EC             (      storage.asm):00127 (2)             ldb     #CFIDDEV        Issue a CF "Identify Device" command
                      (      storage.asm):00128                 IFEQ    DEBUG
E937 8D9D             (      storage.asm):00129 (6)             bsr     CFCMDIS         Not allowed to fail
                      (      storage.asm):00130                 ELSE
                      (      storage.asm):00131                 jsr     CFCMDIS         Not allowed to fail
                      (      storage.asm):00132                 ENDC
E939 260A             (      storage.asm):00133 (3)             bne     @cfinab         Abort with card present flag clear
E93B 9E08             (      storage.asm):00134 (4)             ldx     DICEND          Target address is HERE
E93D 8D07             (      storage.asm):00135 (6)             bsr     CF1SRD          Read one sector
E93F 8DB0             (      storage.asm):00136 (6)             bsr     CFANTHS         Analyze this!
E941 8601             (      storage.asm):00137 (2)             lda     #1
E943 9746             (      storage.asm):00138 (3)             sta     CFCARDP         Set the card present flag
E945 39               (      storage.asm):00139 (4)     @cfinab rts
                      (      storage.asm):00140         
                      (      storage.asm):00141         * Read one sector. The LBA parameters are assumed to have been set previously.
                      (      storage.asm):00142         * On input X points to the receiving (at least 512 bytes long) buffer.
E946 B6C007           (      storage.asm):00143 (4)     CF1SRD  lda     CFSTATR
E949 8508             (      storage.asm):00144 (2)             bita    #CFDRQB         Check for DRQ bit in the CF status register
E94B 2712             (      storage.asm):00145 (3)             beq     IOERR
E94D 10860200         (      storage.asm):00146 (4)             ldw     #CFSCSZ         Sector size is 512 bytes
E951 108EC000         (      storage.asm):00147 (4)             ldy     #CFDATAR        The data source address
E955 3401             (      storage.asm):00148 (4+1)           pshs    cc
E957 1A50             (      storage.asm):00149 (2)             orcc    #(FFLAG|IFLAG)  Disable maskable interrupts
E959 113B21           (      storage.asm):00150 (6+?)           tfm     y,x+
E95C 3501             (      storage.asm):00151 (4+1)           puls    cc              Restore previous interrupt handling mode
E95E 39               (      storage.asm):00152 (4)             rts
E95F C611             (      storage.asm):00153 (2)     IOERR   ldb     #17
E961 BDE75E           (      storage.asm):00154 (7)             jsr     ERRHDLR         No return
E964 12               (      storage.asm):00155 (1)     CFR1SRA nop                     For symbolic stack dump debugging purposes
                      (      storage.asm):00156         
                      (      storage.asm):00157         * Write one sector. The LBA parameters are assumed to have been set previously.
                      (      storage.asm):00158         * On input X points to the sending (at least 512 bytes long) buffer.
E965 B6C007           (      storage.asm):00159 (4)     CF1SWR  lda     CFSTATR
E968 8488             (      storage.asm):00160 (2)             anda    #CFBSYB|CFDRQB
E96A 8108             (      storage.asm):00161 (2)             cmpa    #CFDRQB         Check for BSY clear and DRQ set
E96C 26F7             (      storage.asm):00162 (3)             bne     CF1SWR
E96E 10860200         (      storage.asm):00163 (4)             ldw     #CFSCSZ         Sector size is 512 bytes
E972 108EC000         (      storage.asm):00164 (4)             ldy     #CFDATAR        The data destination address
E976 113A12           (      storage.asm):00165 (6+?)           tfm     x+,y            Note: tfm is interruptible!
E979 39               (      storage.asm):00166 (4)             rts
                      (      storage.asm):00167         
                      (      storage.asm):00168         * 1KB Forth block support primitives. Not dictionary code. More like BIOS ops.
                      (      storage.asm):00169         
                      (      storage.asm):00170         * One block IO preamble: select drive and LBA parameters. On input:
                      (      storage.asm):00171         * ,s has the return address
                      (      storage.asm):00172         * 2,s had the return address for the caller
                      (      storage.asm):00173         * 4,s has the target block number
E97A BDE8AB           (      storage.asm):00174 (7)     CF1BPRE jsr     CFWAIT
E97D BDE8E8           (      storage.asm):00175 (7)             jsr     CFDRSEL         Set drive and head parameters
E980 EC64             (      storage.asm):00176 (5+1)           ldd     4,s
E982 1048             (      storage.asm):00177 (2)             lsld                    Convert block number to sector number
E984 F7C003           (      storage.asm):00178 (4)             stb     CFSNUMR         LBA 7-0
E987 B7C004           (      storage.asm):00179 (4)             sta     CFCLOWR         LBA 15-8
E98A 1FA8             (      storage.asm):00180 (4)             tfr     cc,a
E98C 8401             (      storage.asm):00181 (2)             anda    #CFLAG
E98E B7C005           (      storage.asm):00182 (4)             sta     CFCHIGR         LBA 23-16 (carry to cylinder high)
E991 8602             (      storage.asm):00183 (2)             lda     #2              2 IDE sectors per Forth block
E993 B7C002           (      storage.asm):00184 (4)             sta     CFSCNTR
E996 39               (      storage.asm):00185 (4)             rts
                      (      storage.asm):00186         
                      (      storage.asm):00187         * Read one block from CF device. On input:
                      (      storage.asm):00188         * ,s has the return address
                      (      storage.asm):00189         * 2,s has the target block number
                      (      storage.asm):00190         * 4,s has the buffer base address
                      (      storage.asm):00191         * Upon return, Y will be preserved.
E997 0D46             (      storage.asm):00192 (4)     CF1BKRD tst     CFCARDP
E999 2602             (      storage.asm):00193 (3)             bne     @ctnued
E99B 20C2             (      storage.asm):00194 (3)             bra     IOERR           Card not present--CF subsystem not initialized
E99D 1F27             (      storage.asm):00195 (4)     @ctnued tfr     y,v
E99F 8DD9             (      storage.asm):00196 (6)             bsr     CF1BPRE
E9A1 C620             (      storage.asm):00197 (2)             ldb     #CFRSCTS        Issue a "Read sectors" CF command
E9A3 BDE8D6           (      storage.asm):00198 (7)             jsr     CFCMDIS
E9A6 AE64             (      storage.asm):00199 (5+1)           ldx     4,s             Target buffer address to X
E9A8 8D9C             (      storage.asm):00200 (6)             bsr     CF1SRD          Read the even sector from CF device
E9AA BDE8AB           (      storage.asm):00201 (7)             jsr     CFWAIT          Wait for next sector to become available
E9AD 8D97             (      storage.asm):00202 (6)             bsr     CF1SRD          and read the odd sector
E9AF 1F72             (      storage.asm):00203 (4)             tfr     v,y
E9B1 39               (      storage.asm):00204 (4)             rts
                      (      storage.asm):00205         
                      (      storage.asm):00206         * Write one block to CF device. Upon entry:
                      (      storage.asm):00207         * ,s has the return address
                      (      storage.asm):00208         * 2,s has the target block number
                      (      storage.asm):00209         * 4,s has the buffer base address
                      (      storage.asm):00210         * Upon return, Y will be preserved.
E9B2 0D46             (      storage.asm):00211 (4)     CF1BKWR tst     CFCARDP
E9B4 2602             (      storage.asm):00212 (3)             bne     @ctnued
E9B6 20A7             (      storage.asm):00213 (3)             bra     IOERR           Card not present--CF subsystem not initialized
E9B8 1F27             (      storage.asm):00214 (4)     @ctnued tfr     y,v
E9BA 8DBE             (      storage.asm):00215 (6)             bsr     CF1BPRE
E9BC C630             (      storage.asm):00216 (2)             ldb     #CFWSCTS        Issue a "Write sectors" CF command
E9BE BDE8D6           (      storage.asm):00217 (7)             jsr     CFCMDIS
E9C1 AE64             (      storage.asm):00218 (5+1)           ldx     4,s             Source buffer address to X
E9C3 8DA0             (      storage.asm):00219 (6)             bsr     CF1SWR          Write the even sector to CF device
E9C5 BDE8AB           (      storage.asm):00220 (7)             jsr     CFWAIT          Wait for next sector to become available
E9C8 8D9B             (      storage.asm):00221 (6)             bsr     CF1SWR          and write the odd sector
E9CA 1F72             (      storage.asm):00222 (4)             tfr     v,y
E9CC 39               (      storage.asm):00223 (4)             rts
                      (      storage.asm):00224         
                      (        forth.asm):01501         
                      (        forth.asm):01502         ******************************************************************************
                      (        forth.asm):01503         * Dictionary begins. Please note that @ has to be the first (in linked list
                      (        forth.asm):01504         * order) word and EMPTY-BUFFERS has to be the last one. In the code below ANSI
                      (        forth.asm):01505         * refers to ANSI-X3.215-1994 Draft 6 proposal (i.e. the free spec).
                      (        forth.asm):01506         
E9CD 0D               (        forth.asm):01507         EBUFS   fcb     13              79-STANDARD (REQ145)
E9CE 454D5054592D4255 (        forth.asm):01508                 fcc     'EMPTY-BUFFERS' ( -- )
     4646455253
E9DB 0000             (        forth.asm):01509                 fdb     0               Last dictionary entry
                      (        forth.asm):01510                 RFCS
E9DD 8E04A0           (        forth.asm):01511 (3)     EMPTYB  ldx     #BUF0
E9E0 8D03             (        forth.asm):01512 (6)             bsr     EMPT1B
E9E2 8E08B0           (        forth.asm):01513 (3)             ldx     #BUF1
                      (        forth.asm):01514         * Empty the buffer pointed to by X.
E9E5 9F1E             (        forth.asm):01515 (4)     EMPT1B  stx     MRUBUFA         Update most recently used buffer address
E9E7 30890400         (        forth.asm):01516 (4+3)           leax    BOTERM,x        Buffer offset to the terminator field
E9EB 104F             (        forth.asm):01517 (2)             clrd
E9ED ED84             (        forth.asm):01518 (5+0)           std     ,x              Clear terminator and flags fields
                      (        forth.asm):01519                 IFNE    DEBUG
                      (        forth.asm):01520                 ldd     #$C7C7
                      (        forth.asm):01521                 std     2,x             Dummy block number
                      (        forth.asm):01522                 ENDC                    DEBUG
E9EF 39               (        forth.asm):01523 (4)             rts
                      (        forth.asm):01524         
E9F0 0C               (        forth.asm):01525         SAVBUF  fcb     12              79-STANDARD (REQ221)
E9F1 534156452D425546 (        forth.asm):01526                 fcc     'SAVE-BUFFERS'  ( -- )
     46455253
E9FD E9CD             (        forth.asm):01527                 fdb     EBUFS
                      (        forth.asm):01528                 RFCS
E9FF 8E04A0           (        forth.asm):01529 (3)             ldx     #BUF0
EA02 8D03             (        forth.asm):01530 (6)             bsr     WBIFDRT
EA04 8E08B0           (        forth.asm):01531 (3)             ldx     #BUF1
                      (        forth.asm):01532         * Write buffer back to mass storage if marked as dirty.
                      (        forth.asm):01533         * The dirty bit is cleared but the buffer contents itself is not.
                      (        forth.asm):01534         * The buffer will continue to be marked as "in use."
                      (        forth.asm):01535         * On input X has has the base buffer address. Both D and X
                      (        forth.asm):01536         * are preserved. Y is not.
EA07 3406             (        forth.asm):01537 (4+2)   WBIFDRT pshs    d
EA09 3410             (        forth.asm):01538 (4+2)           pshs    x               Base buffer address (arg1 to CF1BKWR)
EA0B 8605             (        forth.asm):01539 (2)             lda     #BINUSE|BDIRTY
EA0D A4890401         (        forth.asm):01540 (4+3)           anda    BOFLAGS,x
EA11 8105             (        forth.asm):01541 (2)             cmpa    #BINUSE|BDIRTY
EA13 2616             (        forth.asm):01542 (3)             bne     @alldon         Block not in use or in use but not dirty
EA15 AE890402         (        forth.asm):01543 (5+3)           ldx     BOBLKNO,x
EA19 3410             (        forth.asm):01544 (4+2)           pshs    x               Block number (arg0 to CF1BKWR)
EA1B 8D95             (        forth.asm):01545 (6)             bsr     CF1BKWR         Write data buffer to CF
EA1D 3262             (        forth.asm):01546 (4+1)           leas    2,s             Drop one cell from the system stack (blknum)
EA1F AEE4             (        forth.asm):01547 (5+0)           ldx     ,s              Retrieve base buffer address
EA21 30890401         (        forth.asm):01548 (4+3)           leax    BOFLAGS,x
EA25 A684             (        forth.asm):01549 (4+0)           lda     ,x              Acquire the 'flags' field
EA27 84FB             (        forth.asm):01550 (2)             anda    #^BDIRTY        Clear the dirty bit
EA29 A784             (        forth.asm):01551 (4+0)           sta     ,x              and update the 'flags' field
EA2B 3510             (        forth.asm):01552 (4+2)   @alldon puls    x               Restore X
EA2D 3506             (        forth.asm):01553 (4+2)           puls    d               and D
EA2F 39               (        forth.asm):01554 (4)             rts
                      (        forth.asm):01555         
EA30 05               (        forth.asm):01556         FLUSH   fcb     5               79-STANDARD (REF)
EA31 464C555348       (        forth.asm):01557                 fcc     'FLUSH'         ( -- ) An alias for SAVE-BUFFERS
EA36 E9F0             (        forth.asm):01558                 fdb     SAVBUF
                      (        forth.asm):01559                 RFCS
EA38 20C5             (        forth.asm):01560                 RFXT    bra,SAVBUF+15   XT for SAVE-BUFFERS
                      (        forth.asm):01561         
EA3A 06               (        forth.asm):01562         UPDATE  fcb     6               79-STANDARD (REQ229)
EA3B 555044415445     (        forth.asm):01563                 fcc     'UPDATE'        ( -- )
EA41 EA30             (        forth.asm):01564                 fdb     FLUSH
                      (        forth.asm):01565                 RFCS
EA43 9E1E             (        forth.asm):01566 (4)             ldx     MRUBUFA         Most recently used buffer base address
EA45 30890401         (        forth.asm):01567 (4+3)           leax    BOFLAGS,x       Buffer 'flags' field's address to X
EA49 A684             (        forth.asm):01568 (4+0)           lda     ,x              Buffer 'flags' field to A
EA4B 8501             (        forth.asm):01569 (2)             bita    #BINUSE         Is that buffer in use?
EA4D 2704             (        forth.asm):01570 (3)             beq     @upddon         No, we're done here
EA4F 8A04             (        forth.asm):01571 (2)             ora     #BDIRTY
EA51 A784             (        forth.asm):01572 (4+0)           sta     ,x              Set the dirty bit
EA53 39               (        forth.asm):01573 (4)     @upddon rts
                      (        forth.asm):01574         
EA54 06               (        forth.asm):01575         BUFFER  fcb     6               79-STANDARD (REQ130)
EA55 425546464552     (        forth.asm):01576                 fcc     'BUFFER'        ( ublkno -- addr )
EA5B EA3A             (        forth.asm):01577                 fdb     UPDATE
                      (        forth.asm):01578                 RFCS
EA5D BDE7F6           (        forth.asm):01579 (7)             jsr     NPOP
EA60 1F12             (        forth.asm):01580 (4)             tfr     x,y             ublkno to Y
                      (        forth.asm):01581         * Block lookup.
EA62 8E04A0           (        forth.asm):01582 (3)             ldx     #BUF0           Base address of the first resident buffer
EA65 C602             (        forth.asm):01583 (2)             ldb     #2              Number of resident buffers
EA67 A6890401         (        forth.asm):01584 (4+3)   @blkup  lda     BOFLAGS,x       Buffer flags to A
EA6B 8501             (        forth.asm):01585 (2)             bita    #BINUSE         Buffer in use?
EA6D 270C             (        forth.asm):01586 (3)             beq     @nxtbuf         No
EA6F 10AC890402       (        forth.asm):01587 (6+3)           cmpy    BOBLKNO,x       Buffer is in use. Block number match?
EA74 2605             (        forth.asm):01588 (3)             bne     @nxtbuf         No
EA76 9F1E             (        forth.asm):01589 (4)     @retba  stx     MRUBUFA         Block number match. Mark as the MRU buffer
EA78 3610             (        forth.asm):01590                 UCNPUSH                 and return its base address via the data stack
EA7A 39               (        forth.asm):01591 (4)             rts
EA7B 30890410         (        forth.asm):01592 (4+3)   @nxtbuf leax    BFDISP,x        Point to the next buffer
EA7F 5A               (        forth.asm):01593 (1)             decb
EA80 26E5             (        forth.asm):01594 (3)             bne     @blkup
                      (        forth.asm):01595         * The block number in Y is not currently in use. Assign a buffer to it.
EA82 8E04A0           (        forth.asm):01596 (3)             ldx     #BUF0
EA85 9C1E             (        forth.asm):01597 (4)             cmpx    MRUBUFA         Most recently used buffer address
EA87 2603             (        forth.asm):01598 (3)             bne     @bselct
EA89 8E08B0           (        forth.asm):01599 (3)             ldx     #BUF1
                      (        forth.asm):01600         * At this point X has the base address of the block we are interested in.
EA8C 3420             (        forth.asm):01601 (4+2)   @bselct pshs    y               Backup the target block number
EA8E BDEA07           (        forth.asm):01602 (7)             jsr     WBIFDRT         Write back if dirty. X and D are preserved
EA91 8601             (        forth.asm):01603 (2)             lda     #BINUSE
EA93 A7890401         (        forth.asm):01604 (4+3)           sta     BOFLAGS,x       Update the buffer's 'flags' field
EA97 3520             (        forth.asm):01605 (4+2)           puls    y               Restore the target block number
EA99 10AF890402       (        forth.asm):01606 (6+3)           sty     BOBLKNO,x       and update the 'blknum' field as well
EA9E 20D6             (        forth.asm):01607 (3)             bra     @retba
                      (        forth.asm):01608         
EAA0 05               (        forth.asm):01609         BLOCK   fcb     5               79-STANDARD (REQ191)
EAA1 424C4F434B       (        forth.asm):01610                 fcc     'BLOCK'         ( ublkno -- addr )
EAA6 EA54             (        forth.asm):01611                 fdb     BUFFER
                      (        forth.asm):01612                 RFCS
EAA8 8DB3             (        forth.asm):01613                 RFXT    bsr,BUFFER+9    XT for BUFFER
                      (        forth.asm):01614         * Upon return Y has has the block number.
EAAA 3710             (        forth.asm):01615                 UCNPOP                  Buffer base address to X
EAAC 3410             (        forth.asm):01616 (4+2)           pshs    x               Push base buffer address as Arg1 to CF1BKRD
EAAE A6890401         (        forth.asm):01617 (4+3)           lda     BOFLAGS,x       Retrieve buffer 'flags' field
                      (        forth.asm):01618                 IFNE    DEBUG
                      (        forth.asm):01619                 bita    #BINUSE
                      (        forth.asm):01620                 bne     @blkctd
                      (        forth.asm):01621                 lda     #10             Assertion failed
                      (        forth.asm):01622                 jsr     ERRHDLR         No return
                      (        forth.asm):01623                 ENDC                    DEBUG
EAB2 8402             (        forth.asm):01624 (2)     @blkctd anda    #BMAPPD         Has the block been read yet?
EAB4 2613             (        forth.asm):01625 (3)             bne     @bkmapd         Yes
EAB6 3420             (        forth.asm):01626 (4+2)           pshs    y               No. Push block number as arg0 to CF1BKRD
                      (        forth.asm):01627         * Map in the block from the CF device. System stack structure is as follows:
                      (        forth.asm):01628         * ,s has the target block number.
                      (        forth.asm):01629         * 2,s has the buffer base address.
EAB8 BDE997           (        forth.asm):01630 (7)             jsr     CF1BKRD
EABB 3262             (        forth.asm):01631 (4+1)           leas    2,s             Drop one cell from the system stack
                      (        forth.asm):01632         * Update the buffer's flags field.
EABD AEE4             (        forth.asm):01633 (5+0)           ldx     ,s              Base buffer address
EABF 30890401         (        forth.asm):01634 (4+3)           leax    BOFLAGS,x       Buffer 'flags' field address to X
EAC3 A684             (        forth.asm):01635 (4+0)           lda     ,x              Read buffer 'flags' field
EAC5 8A02             (        forth.asm):01636 (2)             ora     #BMAPPD
EAC7 A784             (        forth.asm):01637 (4+0)           sta     ,x              and mark it as read
EAC9 3510             (        forth.asm):01638 (4+2)   @bkmapd puls    x               Buffer base address to X
EACB 3610             (        forth.asm):01639                 UCNPUSH
EACD 39               (        forth.asm):01640 (4)             rts
                      (        forth.asm):01641         
EACE 03               (        forth.asm):01642         BLK     fcb     3
EACF 424C4B           (        forth.asm):01643                 fcc     'BLK'
EAD2 EAA0             (        forth.asm):01644                 fdb     BLOCK
                      (        forth.asm):01645                 RFCS
EAD4 8E012C           (        forth.asm):01646 (3)             ldx     #UBLK
EAD7 7EE7E8           (        forth.asm):01647 (3)             jmp     NPUSH
                      (        forth.asm):01648         
EADA 03               (        forth.asm):01649         TOIN    fcb     3               ANSI (Core)
EADB 3E494E           (        forth.asm):01650                 fcc     '>IN'           ( -- a-addr )
EADE EACE             (        forth.asm):01651                 fdb     BLK
                      (        forth.asm):01652                 RFCS
EAE0 8E012A           (        forth.asm):01653 (3)             ldx     #UTOIN
EAE3 7EE7E8           (        forth.asm):01654 (3)             jmp     NPUSH
                      (        forth.asm):01655         
EAE6 03               (        forth.asm):01656         SCR     fcb     3
EAE7 534352           (        forth.asm):01657                 fcc     'SCR'
EAEA EADA             (        forth.asm):01658                 fdb     TOIN
                      (        forth.asm):01659                 RFCS
EAEC 8E012E           (        forth.asm):01660 (3)             ldx     #USCR
EAEF 7EE7E8           (        forth.asm):01661 (3)             jmp     NPUSH
                      (        forth.asm):01662         
                      (        forth.asm):01663         * Functionally: : LINE 6 SHIFT SCR @ BLOCK + ;
                      (        forth.asm):01664         * Moved to CompactFlash screen #4.
                      (        forth.asm):01665         
                      (        forth.asm):01666         * Functionally:
                      (        forth.asm):01667         * : INDEX 1+ SWAP DO
                      (        forth.asm):01668         *     CR   I SCR !
                      (        forth.asm):01669         *     0 LINE 64 TYPE
                      (        forth.asm):01670         *   LOOP ;
                      (        forth.asm):01671         * Moved to CompactFlash screen #4.
                      (        forth.asm):01672         
EAF2 05               (        forth.asm):01673         TICKS   fcb     5               Non-standard
EAF3 5449434B53       (        forth.asm):01674                 fcc     'TICKS'         ( -- tickslow tickshigh )
EAF8 EAE6             (        forth.asm):01675                 fdb     SCR
                      (        forth.asm):01676                 RFCS
                      (        forth.asm):01677                 IFNE    RTCFEAT
                      (        forth.asm):01678                 pshs    cc
                      (        forth.asm):01679                 orcc    #FFLAG          Mask FIRQ while reading the double cell
                      (        forth.asm):01680                 ldx     TIKSLOW
                      (        forth.asm):01681                 ldy     TIKSHI
                      (        forth.asm):01682                 puls    cc              Restore the previous interrupt handling mode
                      (        forth.asm):01683                 jsr     NPUSH
                      (        forth.asm):01684                 tfr     y,x
                      (        forth.asm):01685                 ELSE
EAFA 1FC1             (        forth.asm):01686 (4)             tfr     0,x
EAFC BDE7E8           (        forth.asm):01687 (7)             jsr     NPUSH
                      (        forth.asm):01688                 ENDC                    RTCFEAT
EAFF 7EE7E8           (        forth.asm):01689 (3)             jmp     NPUSH
                      (        forth.asm):01690         
EB02 04               (        forth.asm):01691         RTCFTCH fcb     4               Non-standard
EB03 52544340         (        forth.asm):01692                 fcc     'RTC@'          ( regoff -- byteval )
EB07 EAF2             (        forth.asm):01693                 fdb     TICKS
                      (        forth.asm):01694                 RFCS
                      (        forth.asm):01695                 IFNE    RTCFEAT
                      (        forth.asm):01696                 tst     RTCAVL
                      (        forth.asm):01697                 beq     RTNOCON
                      (        forth.asm):01698         * An MC146818 RTC is present. Let's get down to business.
                      (        forth.asm):01699                 jsr     NPOP            REGOFF to X
                      (        forth.asm):01700                 tfr     x,d
                      (        forth.asm):01701                 tfr     b,a
                      (        forth.asm):01702                 jsr     RTREGRD
                      (        forth.asm):01703                 clra                    BYTEVAL to D
                      (        forth.asm):01704                 pshu    d               Unchecked NPUSH of D
                      (        forth.asm):01705                 rts
EB09                  (        forth.asm):01706         RTNOCON ldb     #17             RTC not detected on bootup -> I/O error
                      (        forth.asm):01707                 jsr     ERRHDLR         No return
                      (        forth.asm):01708                 ELSE
EB09 BDFC62           (        forth.asm):01709                 RFXT    jsr,DROP+7      XT for DROP
EB0C 1FC1             (        forth.asm):01710 (4)             tfr     0,x
EB0E 7EE7E8           (        forth.asm):01711 (3)             jmp     NPUSH
                      (        forth.asm):01712                 ENDC                    RTCFEAT
                      (        forth.asm):01713         
EB11 04               (        forth.asm):01714         RTCSTOR fcb     4               Non-standard
EB12 52544321         (        forth.asm):01715                 fcc     'RTC!'          ( byteval regoff -- )
EB16 EB02             (        forth.asm):01716                 fdb     RTCFTCH
                      (        forth.asm):01717                 RFCS
                      (        forth.asm):01718                 IFNE    RTCFEAT
                      (        forth.asm):01719                 tst     RTCAVL
                      (        forth.asm):01720                 beq     RTNOCON
                      (        forth.asm):01721                 jsr     MIN2PST         At least two cells need to be stacked up
                      (        forth.asm):01722                 lda     1,u             REGOFF to A
                      (        forth.asm):01723                 ldb     3,u             BYTEVAL to B
                      (        forth.asm):01724                 leau    4,u             Drop two cells from the data stack
                      (        forth.asm):01725                 jmp     RTREGWR
                      (        forth.asm):01726                 ELSE
EB18 7EF467           (        forth.asm):01727                 RFXT    jmp,TWODROP+8   XT for 2 DROP
                      (        forth.asm):01728                 ENDC                    RTCFEAT
                      (        forth.asm):01729         
EB1B 04               (        forth.asm):01730         LIST    fcb     4               79-STANDARD (REQ109)
EB1C 4C495354         (        forth.asm):01731                 fcc     'LIST'          ( ublkno -- )
EB20 EB11             (        forth.asm):01732                 fdb     RTCSTOR
                      (        forth.asm):01733                 RFCS
EB22 0D46             (        forth.asm):01734 (4)             tst     CFCARDP
EB24 2605             (        forth.asm):01735 (3)             bne     @cont
EB26 C611             (        forth.asm):01736 (2)             ldb     #17             IO error
EB28 BDE75E           (        forth.asm):01737 (7)             jsr     ERRHDLR         No return
EB2B BDFC53           (        forth.asm):01738         @cont   RFXT    jsr,DUP+6       XT for DUP
EB2E BDEAA8           (        forth.asm):01739                 RFXT    jsr,BLOCK+8     XT for BLOCK
                      (        forth.asm):01740         * TOS now has the base buffer address.
EB31 BDE7F6           (        forth.asm):01741 (7)             jsr     NPOP
EB34 1F12             (        forth.asm):01742 (4)             tfr     x,y             Base buffer address to Y
EB36 BDE7F6           (        forth.asm):01743 (7)             jsr     NPOP            ublkno to X
EB39 9F2E             (        forth.asm):01744 (4)             stx     USCR            Update SCR's value
EB3B C610             (        forth.asm):01745 (2)             ldb     #16             16 lines to go
EB3D 3404             (        forth.asm):01746 (4+1)   @loop   pshs    b
EB3F BDE2ED           (        forth.asm):01747 (7)             jsr     PUTCR
EB42 1F21             (        forth.asm):01748 (4)             tfr     y,x
EB44 BDE7E8           (        forth.asm):01749 (7)             jsr     NPUSH           Start address for TYPE
EB47 8E0040           (        forth.asm):01750 (3)             ldx     #64
EB4A BDE7E8           (        forth.asm):01751 (7)             jsr     NPUSH           Byte count for TYPE
EB4D 103012           (        forth.asm):01752 (4)             addr    x,y
EB50 BDF701           (        forth.asm):01753                 RFXT    jsr,TYPE+7      XT for TYPE
EB53 3504             (        forth.asm):01754 (4+1)           puls    b
EB55 5A               (        forth.asm):01755 (1)             decb
EB56 26E5             (        forth.asm):01756 (3)             bne     @loop
EB58 39               (        forth.asm):01757 (4)             rts
                      (        forth.asm):01758         
                      (        forth.asm):01759         * This is supposed to align HERE (DICEND), presumably on a cell boundary.
                      (        forth.asm):01760         * We have no such constraint on the 6309.
EB59 05               (        forth.asm):01761         ALIGN   fcb     5               ANSI Core
EB5A 414C49474E       (        forth.asm):01762                 fcc     'ALIGN'         ( -- )
EB5F EB1B             (        forth.asm):01763                 fdb     LIST
                      (        forth.asm):01764                 RFCS
EB61 39               (        forth.asm):01765 (4)             rts
                      (        forth.asm):01766         
EB62 07               (        forth.asm):01767         ALIGND  fcb     7               ANSI Core
EB63 414C49474E4544   (        forth.asm):01768                 fcc     'ALIGNED'       ( addr -- a-addr )
EB6A EB59             (        forth.asm):01769                 fdb     ALIGN
                      (        forth.asm):01770                 RFCS
EB6C 7EE491           (        forth.asm):01771 (3)             jmp     MIN1PST         At least one cell must be stacked up
                      (        forth.asm):01772         
EB6F 05               (        forth.asm):01773         CHARP   fcb     5               ANSI Core
EB70 434841522B       (        forth.asm):01774                 fcc     'CHAR+'         ( c-addr1 -- c-addr2 )
EB75 EB62             (        forth.asm):01775                 fdb     ALIGND
                      (        forth.asm):01776                 RFCS
EB77 7EF88C           (        forth.asm):01777                 RFXT    jmp,ONEP+5      XT for 1+
                      (        forth.asm):01778         
                      (        forth.asm):01779         * n2 is the size in address units (bytes) of n1 characters. A NOOP.
EB7A 05               (        forth.asm):01780         CHARS   fcb     5               ANSI Core
EB7B 4348415253       (        forth.asm):01781                 fcc     'CHARS'         ( n1 -- n2 )
EB80 EB6F             (        forth.asm):01782                 fdb     CHARP
                      (        forth.asm):01783                 RFCS
EB82 7EE491           (        forth.asm):01784 (3)             jmp     MIN1PST         At least one cell must be stacked up
                      (        forth.asm):01785         
                      (        forth.asm):01786         * Convert a single cell to a double. Non-transactional.
EB85 03               (        forth.asm):01787         STOD    fcb     3               ANSI Core
EB86 533E44           (        forth.asm):01788                 fcc     'S>D'           ( n -- d )
EB89 EB7A             (        forth.asm):01789                 fdb     CHARS
                      (        forth.asm):01790                 RFCS
EB8B BDE7F6           (        forth.asm):01791 (7)             jsr     NPOP            N to X
EB8E 3610             (        forth.asm):01792                 UCNPUSH                 Push back low order cell
EB90 104F             (        forth.asm):01793 (2)             clrd                    High order cell: default to N >= 0
EB92 1E01             (        forth.asm):01794 (5)             exg     d,x
EB94 4D               (        forth.asm):01795 (1)             tsta
EB95 102AFC4F         (        forth.asm):01796 (5)             lbpl    NPUSH
EB99 301F             (        forth.asm):01797 (4+1)           leax    -1,x            N is < 0. Sign extension is required. -1 to X
EB9B 7EE7E8           (        forth.asm):01798 (3)             jmp     NPUSH
                      (        forth.asm):01799         
EB9E 04               (        forth.asm):01800         NCLR    fcb     4               Non-standard
EB9F 4E434C52         (        forth.asm):01801                 fcc     'NCLR'          Clear the data (normal) stack
EBA3 EB85             (        forth.asm):01802                 fdb     STOD
                      (        forth.asm):01803                 RFCS
EBA5 CE02F6           (        forth.asm):01804 (3)             ldu     #NSTBOT
EBA8 39               (        forth.asm):01805 (4)             rts
                      (        forth.asm):01806         
EBA9 04               (        forth.asm):01807         RCLR    fcb     4               Non-standard
EBAA 52434C52         (        forth.asm):01808                 fcc     'RCLR'          Clear the return stack
EBAE EB9E             (        forth.asm):01809                 fdb     NCLR
                      (        forth.asm):01810                 RFCS
EBB0 8E0376           (        forth.asm):01811 (3)             ldx     #RSTBOT
EBB3 9F00             (        forth.asm):01812 (4)             stx     RSP
EBB5 0F37             (        forth.asm):01813 (5)             clr     RDEPTH
EBB7 39               (        forth.asm):01814 (4)             rts
                      (        forth.asm):01815         
EBB8 05               (        forth.asm):01816         DEPTH   fcb     5               ANSI (Core)
EBB9 4445505448       (        forth.asm):01817                 fcc     'DEPTH'         ( -- +n )
EBBE EBA9             (        forth.asm):01818                 fdb     RCLR
                      (        forth.asm):01819                 RFCS
EBC0 CC02F6           (        forth.asm):01820 (3)             ldd     #NSTBOT         Bottom data stack address
EBC3 103230           (        forth.asm):01821 (4)             subr    u,d             D has the current value of the data stack ptr
EBC6 1044             (        forth.asm):01822 (2)             lsrd                    divided by 2
EBC8 1F01             (        forth.asm):01823 (4)             tfr     d,x
EBCA 7EE7E8           (        forth.asm):01824 (3)             jmp     NPUSH           X to N
                      (        forth.asm):01825         
EBCD 06               (        forth.asm):01826         CREATE  fcb     6               ANSI (Core)
EBCE 435245415445     (        forth.asm):01827                 fcc     'CREATE'        Comp: ( "<spaces>name" -- )
EBD4 EBB8             (        forth.asm):01828                 fdb     DEPTH           Exec: ( -- a-addr )
                      (        forth.asm):01829                 RFCS
EBD6 BDE513           (        forth.asm):01830 (7)             jsr     LOCWRT          Code entry point returned to Y
EBD9 868E             (        forth.asm):01831 (2)             lda     #LDXOPC         LDX immediate
EBDB A7A0             (        forth.asm):01832 (4+1)           sta     ,y+
EBDD 1F21             (        forth.asm):01833 (4)             tfr     y,x
EBDF 3008             (        forth.asm):01834 (4+1)           leax    8,x
EBE1 AFA1             (        forth.asm):01835 (5+2)           stx     ,y++
EBE3 86BD             (        forth.asm):01836 (2)             lda     #JSROPC         JSR extended
EBE5 BDE582           (        forth.asm):01837 (7)             jsr     VARCON1         Compile JSR NPUSH
EBE8 8639             (        forth.asm):01838 (2)             lda     #RTSOPC         RTS inherent
EBEA A7A0             (        forth.asm):01839 (4+1)           sta     ,y+
EBEC 3122             (        forth.asm):01840 (4+1)           leay    2,y             Reserve room for a possible DOES> clause
EBEE 109F08           (        forth.asm):01841 (5)     CREAT1  sty     DICEND
EBF1 9E0C             (        forth.asm):01842 (4)             ldx     BDICEND         This is set by LOCWRT (was IY)
EBF3 9F06             (        forth.asm):01843 (4)             stx     LSTWAD
EBF5 39               (        forth.asm):01844 (4)             rts
                      (        forth.asm):01845         
EBF6 C5               (        forth.asm):01846         DOES    fcb     $C5             ANSI (Core)
EBF7 444F45533E       (        forth.asm):01847                 fcc     'DOES>'
EBFC EBCD             (        forth.asm):01848                 fdb     CREATE
                      (        forth.asm):01849                 RFCS
EBFE 8EEC04           (        forth.asm):01850 (3)             ldx     #DOESEX         JSR #DOESEX is compiled (no actual return)
EC01 7EE155           (        forth.asm):01851 (3)             jmp     EMXASXT         Set as action component
                      (        forth.asm):01852         
EC04 9E06             (        forth.asm):01853 (4)     DOESEX  ldx     LSTWAD          Header of the last dictionary entry
EC06 E680             (        forth.asm):01854 (4+1)           ldb     ,x+
EC08 C41F             (        forth.asm):01855 (2)             andb    #WRLNMSK        Extract word length
EC0A 3A               (        forth.asm):01856 (1)             abx
                      (        forth.asm):01857                 IFNE    RELFEAT
                      (        forth.asm):01858                 leax    9,x             2 bytes/backlink, 1/cksum, 6 bytes code offset
                      (        forth.asm):01859                 ELSE
EC0B 3008             (        forth.asm):01860 (4+1)           leax    8,x             2 bytes/backlink, 6 bytes code offset
                      (        forth.asm):01861                 ENDC                    RELFEAT
EC0D A684             (        forth.asm):01862 (4+0)           lda     ,x
EC0F 8139             (        forth.asm):01863 (2)             cmpa    #RTSOPC         RTS inherent
EC11 2705             (        forth.asm):01864 (3)             beq     @dosex1
EC13 C60E             (        forth.asm):01865 (2)             ldb     #14             No matching CREATE
EC15 BDE75E           (        forth.asm):01866 (7)             jsr     ERRHDLR         No return
EC18 867E             (        forth.asm):01867 (2)     @dosex1 lda     #JMPOPC         JMP extended
EC1A A780             (        forth.asm):01868 (4+1)           sta     ,x+             Overwrite RTS opcode
EC1C 3520             (        forth.asm):01869 (4+2)           puls    y
EC1E 10AF84           (        forth.asm):01870 (6+0)           sty     ,x
EC21 39               (        forth.asm):01871 (4)             rts
                      (        forth.asm):01872         
EC22 87               (        forth.asm):01873         LITERAL fcb     $87             ANSI (Core)
EC23 4C49544552414C   (        forth.asm):01874                 fcc     'LITERAL'       Comp: ( x -- )
EC2A EBF6             (        forth.asm):01875                 fdb     DOES            Exec: ( -- x )
                      (        forth.asm):01876                 RFCS
EC2C BDE7F6           (        forth.asm):01877 (7)             jsr     NPOP
EC2F 0D25             (        forth.asm):01878 (4)             tst     USTATE+1
EC31 2601             (        forth.asm):01879 (3)             bne     @comp
EC33 39               (        forth.asm):01880 (4)             rts                     The standard defines no semantics in interp mode
EC34 109E08           (        forth.asm):01881 (5)     @comp   ldy     DICEND
EC37 868E             (        forth.asm):01882 (2)             lda     #LDXOPC         LDX immediate
EC39 BDE585           (        forth.asm):01883 (7)             jsr     VARCON2         Compile LDX #X
EC3C 109F08           (        forth.asm):01884 (5)             sty     DICEND          Update HERE
EC3F 8EE7E8           (        forth.asm):01885 (3)             ldx     #NPUSH
EC42 7EE155           (        forth.asm):01886 (3)             jmp     EMXASXT         Set NPUSH as action component
                      (        forth.asm):01887         
                      (        forth.asm):01888         * Functionally: : CONSTANT CREATE , DOES> @ ;
                      (        forth.asm):01889         * The following code produces more compact code.
EC45 08               (        forth.asm):01890         CONS    fcb     8               ANSI (Core)
EC46 434F4E5354414E54 (        forth.asm):01891                 fcc     'CONSTANT'      Comp: ( x "<spaces>name" -- )
EC4E EC22             (        forth.asm):01892                 fdb     LITERAL         Exec: ( -- x )
                      (        forth.asm):01893                 RFCS
EC50 BDE7F6           (        forth.asm):01894 (7)             jsr     NPOP
EC53 1F16             (        forth.asm):01895 (4)             tfr     x,w
EC55 BDE513           (        forth.asm):01896 (7)             jsr     LOCWRT          Create dictionary entry
EC58 1F61             (        forth.asm):01897 (4)             tfr     w,x
EC5A 868E             (        forth.asm):01898 (2)             lda     #LDXOPC         ldx immediate
EC5C BDE585           (        forth.asm):01899 (7)             jsr     VARCON2         Compile LDX #CSTVAL
EC5F BDE580           (        forth.asm):01900 (7)             jsr     VARCON          Compile JMP NPUSH
                      (        forth.asm):01901                 IFNE    RELFEAT
                      (        forth.asm):01902                 bsr     CREAT1
                      (        forth.asm):01903                 RFXT    bra,MONITOR+10  XT for MONITOR
                      (        forth.asm):01904                 ELSE
EC62 208A             (        forth.asm):01905 (3)             bra     CREAT1
                      (        forth.asm):01906                 ENDC                    RELFEAT
                      (        forth.asm):01907         
                      (        forth.asm):01908         * Functionally: : VARIABLE CREATE 2 ALLOT ;
                      (        forth.asm):01909         * However we can save three bytes per instance with the following code.
EC64 08               (        forth.asm):01910         VARI    fcb     8               ANSI (Core)
EC65 5641524941424C45 (        forth.asm):01911                 fcc     'VARIABLE'      Comp: ( "<spaces>name" -- )
EC6D EC45             (        forth.asm):01912                 fdb     CONS            Exec: ( -- a-addr )
                      (        forth.asm):01913                 RFCS
EC6F BDE513           (        forth.asm):01914 (7)             jsr     LOCWRT
EC72 868E             (        forth.asm):01915 (2)             lda     #LDXOPC         ldx immediate
EC74 A7A0             (        forth.asm):01916 (4+1)           sta     ,y+
EC76 1F26             (        forth.asm):01917 (4)             tfr     y,w             Preserve Y (HERE)
EC78 3125             (        forth.asm):01918 (4+1)           leay    5,y             Relative variable address
EC7A 1F21             (        forth.asm):01919 (4)             tfr     y,x
EC7C 1F62             (        forth.asm):01920 (4)             tfr     w,y             Restore Y (HERE)
EC7E AFA1             (        forth.asm):01921 (5+2)           stx     ,y++            Address field for LDX #VARADDR
EC80 BDE580           (        forth.asm):01922 (7)             jsr     VARCON          Compile JMP NPUSH
EC83 3122             (        forth.asm):01923 (4+1)           leay    2,y             2 ALLOT
EC85 7EEBEE           (        forth.asm):01924 (3)             jmp     CREAT1
                      (        forth.asm):01925         
EC88 09               (        forth.asm):01926         IMMED   fcb     9               ANSI (Core)
EC89 494D4D4544494154 (        forth.asm):01927                 fcc     'IMMEDIATE'     ( -- )
     45
EC92 EC64             (        forth.asm):01928                 fdb     VARI
                      (        forth.asm):01929                 RFCS
EC94 C680             (        forth.asm):01930 (2)             ldb     #IMDFLM
EC96 9E06             (        forth.asm):01931 (4)     IMMED1  ldx     LSTWAD
EC98 A684             (        forth.asm):01932 (4+0)           lda     ,x
EC9A 103598           (        forth.asm):01933 (4)             orr     b,a
EC9D A784             (        forth.asm):01934 (4+0)           sta     ,x
EC9F 39               (        forth.asm):01935 (4)             rts
                      (        forth.asm):01936         
ECA0 08               (        forth.asm):01937         RSTRCT  fcb     8               Non-standard (GNU Forth)
ECA1 5245535452494354 (        forth.asm):01938                 fcc     'RESTRICT'      Make word available in compilation mode only
ECA9 EC88             (        forth.asm):01939                 fdb     IMMED
                      (        forth.asm):01940                 RFCS
ECAB C640             (        forth.asm):01941 (2)             ldb     #DEFFLM
ECAD 20E7             (        forth.asm):01942 (3)             bra     IMMED1
                      (        forth.asm):01943         
                      (        forth.asm):01944         * This non-standard word enables checkum monitoring by ICHECK for the
                      (        forth.asm):01945         * last defined word in the dictionary. : words are monitored by default
                      (        forth.asm):01946         * and so are constants. CREATEd words require an explicit invokation of
                      (        forth.asm):01947         * MONITOR if they are to be checked for integrity.
ECAF 07               (        forth.asm):01948         MONITOR fcb     7
ECB0 4D4F4E49544F52   (        forth.asm):01949                 fcc     'MONITOR'       ( -- )
ECB7 ECA0             (        forth.asm):01950                 fdb     RSTRCT
                      (        forth.asm):01951                 RFCS
                      (        forth.asm):01952                 IFNE    RELFEAT
                      (        forth.asm):01953                 lda     #1              Set MONFLM in the word 'flags' header field
                      (        forth.asm):01954                 pshs    a
ECB9                  (        forth.asm):01955         MONIT1  ldx     LSTWAD          Latest defined word header address
                      (        forth.asm):01956                 lda     ,x
                      (        forth.asm):01957                 tst     ,s              Should we set or clear MONFLM?
                      (        forth.asm):01958                 bne     @setflg
                      (        forth.asm):01959                 anda    #^MONFLM        Clear MONFLM in the word's attribute field
                      (        forth.asm):01960                 bra     @cont
ECB9                  (        forth.asm):01961         @setflg ora     #MONFLM         Set MONFLM in the word's attribute field
ECB9                  (        forth.asm):01962         @cont   sta     ,x
                      (        forth.asm):01963                 bsr     HDRSKIP         Skip the header (XT to X), clear A
                      (        forth.asm):01964                 ldy     DICEND          The upper code section limit (excluded)
                      (        forth.asm):01965                 bsr     HDRCSUM         Current word's definition's checksum to A
                      (        forth.asm):01966                 sta     -1,x            Store the computed checksum into the header
                      (        forth.asm):01967                 leas    1,s             Drop one byte from the system stack
                      (        forth.asm):01968                 ENDC                    RELFEAT
ECB9 39               (        forth.asm):01969 (4)             rts
                      (        forth.asm):01970         
                      (        forth.asm):01971         * Added for better support of ANSI VALUEs.
ECBA 09               (        forth.asm):01972         UNMON   fcb     9
ECBB 554E4D4F4E49544F (        forth.asm):01973                 fcc     'UNMONITOR'     ( -- )
     52
ECC4 ECAF             (        forth.asm):01974                 fdb     MONITOR
                      (        forth.asm):01975                 RFCS
                      (        forth.asm):01976                 IFNE    RELFEAT
                      (        forth.asm):01977                 clra
                      (        forth.asm):01978                 pshs    a
                      (        forth.asm):01979                 bra     MONIT1
                      (        forth.asm):01980                 ELSE
ECC6 39               (        forth.asm):01981 (4)             rts
                      (        forth.asm):01982                 ENDC                    RELFEAT
                      (        forth.asm):01983         
                      (        forth.asm):01984                 IFNE    RELFEAT
                      (        forth.asm):01985         * On entry, X has a word's header address. On return X has the compilation
                      (        forth.asm):01986         * address for that word (XT). A is cleared so as to initialize the checksum.
ECC7                  (        forth.asm):01987         HDRSKIP lda     ,x              Word's header attribute byte to A
                      (        forth.asm):01988                 anda    #WRLNMSK        Extract the word's length
                      (        forth.asm):01989                 adda    #4              1B attribute, 2B backlink, 1B checksum
                      (        forth.asm):01990                 leax    a,x             X has the word's XT. -1,X has the orig checksum
                      (        forth.asm):01991                 clra
                      (        forth.asm):01992                 rts
                      (        forth.asm):01993         
                      (        forth.asm):01994         * On entry X has a word's compilation address (XT). A is supposed to have been
                      (        forth.asm):01995         * previously cleared. Y has the upper bound of the code section's address
                      (        forth.asm):01996         * (excluded). On return, A will have the word's code section's checksum.
                      (        forth.asm):01997         * X is preserved.
ECC7                  (        forth.asm):01998         HDRCSUM pshs    x
ECC7                  (        forth.asm):01999         @hdrcs1 eora    ,x+             Update the checksum
                      (        forth.asm):02000                 cmpr    x,y             Upper bound reached?
                      (        forth.asm):02001                 bne     @hdrcs1         No. Process next byte in word's code section
                      (        forth.asm):02002                 puls    x
                      (        forth.asm):02003                 rts
                      (        forth.asm):02004         
ECC7                  (        forth.asm):02005         CSUMFLM fcn     'integrity check failed'
                      (        forth.asm):02006                 ENDC                    RELFEAT
                      (        forth.asm):02007         
                      (        forth.asm):02008         * This non-standard word walks through the dictionary linked list and checks
                      (        forth.asm):02009         * that the words that have the MONFLM flag set in their header's attribute
                      (        forth.asm):02010         * field have a definition that still matches the checksum stored in the word's
                      (        forth.asm):02011         * header. This is meant to be used interactively, as a debugging tool, since
                      (        forth.asm):02012         * multitasking is not supported by this implementation. Therefore no status
                      (        forth.asm):02013         * value is returned. Feedback will only be provided for corrupted words, in
                      (        forth.asm):02014         * the form of a diagnostic message printed to the console.
ECC7 06               (        forth.asm):02015         ICHECK  fcb     6
ECC8 49434845434B     (        forth.asm):02016                 fcc     'ICHECK'        ( -- )
ECCE ECBA             (        forth.asm):02017                 fdb     UNMON
                      (        forth.asm):02018                 RFCS
                      (        forth.asm):02019                 IFNE    RELFEAT
                      (        forth.asm):02020                 ldy     DICEND          Upper bound for the code of the last word (exc.)
                      (        forth.asm):02021                 ldx     LSTWAD          LAST points to the header of the last word
ECD0                  (        forth.asm):02022         @icklop pshs    x               Current word's header address
                      (        forth.asm):02023                 lda     ,x              Word's header attribute byte to A
                      (        forth.asm):02024                 bita    #MONFLM         Is this a monitored word?
                      (        forth.asm):02025                 beq     @icknxt         No. Point to the next word
                      (        forth.asm):02026                 bsr     HDRSKIP         Skip the header (XT to X), clear A
                      (        forth.asm):02027                 bsr     HDRCSUM         Current word's definition's checksum to A
                      (        forth.asm):02028                 cmpa    -1,x            Does the checksum match the compile time value?
                      (        forth.asm):02029                 beq     @icknxt         Yes. Point to the next word
                      (        forth.asm):02030         * Current word's definition has been modified since its original definition!
                      (        forth.asm):02031                 jsr     PUTCR
                      (        forth.asm):02032                 ldx     ,s              Current word's header address
                      (        forth.asm):02033                 ldb     ,x+
                      (        forth.asm):02034                 andb    #WRLNMSK
                      (        forth.asm):02035                 clra
                      (        forth.asm):02036                 jsr     NPUSH           Word's name base address
                      (        forth.asm):02037                 tfr     d,x
                      (        forth.asm):02038                 jsr     NPUSH           Byte count for TYPE
                      (        forth.asm):02039                 RFXT    jsr,TYPE+7      XT for TYPE
                      (        forth.asm):02040                 RFXT    jsr,SPACE+8     XT for SPACE
                      (        forth.asm):02041                 ldx     #CSUMFLM
                      (        forth.asm):02042                 jsr     PUTS            Feedback for checksum failure
ECD0                  (        forth.asm):02043         @icknxt puls    x               Current word's header address
                      (        forth.asm):02044                 tfr     x,y             Point to the end of the previous word's code
                      (        forth.asm):02045                 bsr     HDRSKIP         Skip the header (XT to X), clear A
                      (        forth.asm):02046                 ldx     -3,x            Point to the previous header via the backlink
                      (        forth.asm):02047                 beq     @ickdon         We've just reached the end of the dictionary
                      (        forth.asm):02048                 bra     @icklop
                      (        forth.asm):02049                 ENDC                    RELFEAT
ECD0 39               (        forth.asm):02050 (4)     @ickdon rts
                      (        forth.asm):02051         
                      (        forth.asm):02052         * : ?DO 0 rakeVar !
                      (        forth.asm):02053         *   POSTPONE do?DO
                      (        forth.asm):02054         *   HERE            \ leave ?DO-orig
                      (        forth.asm):02055         *   0 ,
                      (        forth.asm):02056         *   HERE            \ leave DO-dest
                      (        forth.asm):02057         *   bal+ ; IMMEDIATE RESTRICT
ECD1 C3               (        forth.asm):02058         QDO     fcb     $C3             ANSI (Core ext)
ECD2 3F444F           (        forth.asm):02059                 fcc     '?DO'           Comp: ( C: -- do-sys )
ECD5 ECC7             (        forth.asm):02060                 fdb     ICHECK          Exec: ( n1|u1 n2|u2 -- ) ( R: -- | loop-sys )
                      (        forth.asm):02061                 RFCS
ECD7 8EECFC           (        forth.asm):02062 (3)             ldx     #QDOEX
ECDA BDE155           (        forth.asm):02063 (7)             jsr     EMXASXT         Compile "JSR QDOEX"
                      (        forth.asm):02064         * The rest of this code looks very much like IF, except that 1 is not pushed
                      (        forth.asm):02065         * to the control flow stack to indicate an IF. This is done later on when
                      (        forth.asm):02066         * the RAKE code is executed by LOOP.
ECDD CC2603           (        forth.asm):02067 (3)             ldd     #BNEOPC
ECE0 EDA1             (        forth.asm):02068 (5+2)           std     ,y++
ECE2 867E             (        forth.asm):02069 (2)             lda     #JMPOPC
ECE4 A7A0             (        forth.asm):02070 (4+1)           sta     ,y+
ECE6 1F21             (        forth.asm):02071 (4)             tfr     y,x
ECE8 BDE7E8           (        forth.asm):02072 (7)             jsr     CSPUSH          ANS:do-sys/addr (?DO-orig) is HERE
ECEB 3122             (        forth.asm):02073 (4+1)           leay    2,y             2 ALLOT instead of 0 ,
ECED 109F08           (        forth.asm):02074 (5)             sty     DICEND
ECF0 1F21             (        forth.asm):02075 (4)             tfr     y,x             ANS:do-sys/type (DO-dest) is HERE
ECF2 BDE7E8           (        forth.asm):02076 (7)             jsr     CSPUSH
ECF5 104F             (        forth.asm):02077 (2)     QDO1    clrd
ECF7 DD18             (        forth.asm):02078 (4)             std     RAKEVAR         Used for LEAVE forward references handling
ECF9 0C35             (        forth.asm):02079 (5)             inc     BALNCD
ECFB 39               (        forth.asm):02080 (4)             rts
                      (        forth.asm):02081         
ECFC BDE496           (        forth.asm):02082 (7)     QDOEX   jsr     MIN2PST
ECFF AE42             (        forth.asm):02083 (5+1)           ldx     2,u             Loop limit
ED01 10AEC4           (        forth.asm):02084 (6+0)           ldy     ,u              Loop index
ED04 3344             (        forth.asm):02085 (4+1)           leau    4,u             2DROP
ED06 103721           (        forth.asm):02086 (4)             cmpr    y,x
ED09 270A             (        forth.asm):02087 (3)             beq     @skloop         Loop bypassed, return with ZFLAG set
ED0B BDE808           (        forth.asm):02088 (7)             jsr     RPUSH           limit >R
ED0E 1F21             (        forth.asm):02089 (4)             tfr     y,x
ED10 BDE808           (        forth.asm):02090 (7)             jsr     RPUSH           index >R
ED13 1CFB             (        forth.asm):02091 (2)             andcc   #^ZFLAG         Clear ZFLAG
ED15 39               (        forth.asm):02092 (4)     @skloop rts
                      (        forth.asm):02093         
                      (        forth.asm):02094         * : DO 0 rakeVar !   0   POSTPONE doDO   HERE   bal+ ; IMMEDIATE RESTRICT
ED16 C2               (        forth.asm):02095         DO      fcb     $C2             ANSI (Core)
ED17 444F             (        forth.asm):02096                 fcc     'DO'            Comp: ( C: -- do-sys )
ED19 ECD1             (        forth.asm):02097                 fdb     QDO             Exec: ( n1|u1 n2|u2 -- ) ( R: -- loop-sys )
                      (        forth.asm):02098                 RFCS
ED1B 8EED2D           (        forth.asm):02099 (3)             ldx     #DOEX
ED1E BDE155           (        forth.asm):02100 (7)             jsr     EMXASXT         Compile "JSR DOEX"
ED21 1FC1             (        forth.asm):02101 (4)             tfr     0,x             ANS:do-sys/addr (?DO-orig) is 0 for DO
ED23 BDE7E8           (        forth.asm):02102 (7)             jsr     CSPUSH
ED26 1F21             (        forth.asm):02103 (4)             tfr     y,x             ANS:do-sys/type (DO-dest) is HERE
ED28 BDE7E8           (        forth.asm):02104 (7)             jsr     CSPUSH
ED2B 20C8             (        forth.asm):02105 (3)             bra     QDO1
                      (        forth.asm):02106         
ED2D BDFC6C           (        forth.asm):02107         DOEX    RFXT    jsr,SWAP+7      XT for SWAP
ED30 BDF068           (        forth.asm):02108                 RFXT    jsr,TOR+5       XT for >R (limit)
ED33 7EF068           (        forth.asm):02109                 RFXT    jmp,TOR+5       XT for >R (index)
                      (        forth.asm):02110         
                      (        forth.asm):02111         * : LOOP POSTPONE doLOOP   rake ; IMMEDIATE RESTRICT
ED36 C4               (        forth.asm):02112         LOOP    fcb     $C4             ANSI (Core)
ED37 4C4F4F50         (        forth.asm):02113                 fcc     'LOOP'          Comp: ( C: do-sys -- )
ED3B ED16             (        forth.asm):02114                 fdb     DO              Exec: ( -- ) ( R:  loop-sys1 --  | loop-sys2 )
                      (        forth.asm):02115                 RFCS
ED3D 8EED7D           (        forth.asm):02116 (3)             ldx     #LOOPEX
ED40 BDE155           (        forth.asm):02117 (7)     LOOP1   jsr     EMXASXT
ED43 8E2503           (        forth.asm):02118 (3)             ldx     #BCSOPC         Compile "BCS *+5"
ED46 AFA1             (        forth.asm):02119 (5+2)           stx     ,y++
ED48 BDE7F6           (        forth.asm):02120 (7)             jsr     CSPOP           ANS:do-sys/type (DO-dest): loop begin. addr.
ED4B 867E             (        forth.asm):02121 (2)             lda     #JMPOPC
ED4D BDE585           (        forth.asm):02122 (7)             jsr     VARCON2         Compile "JMP DO-dest"
ED50 109F08           (        forth.asm):02123 (5)             sty     DICEND
ED53 109F16           (        forth.asm):02124 (5)             sty     FWDREF          Last recorded forward reference
                      (        forth.asm):02125         * RAKE: Y has HERE, which all (if any) LEAVE forward references
                      (        forth.asm):02126         * should resolve to.
ED56 9E18             (        forth.asm):02127 (4)             ldx     RAKEVAR
ED58 270B             (        forth.asm):02128 (3)     @lopres beq     @lopdon
ED5A EC84             (        forth.asm):02129 (5+0)           ldd     ,x              D has the next forward reference
ED5C 10AF84           (        forth.asm):02130 (6+0)           sty     ,x              Resolve LEAVE forward reference
ED5F 1F01             (        forth.asm):02131 (4)             tfr     d,x
ED61 104D             (        forth.asm):02132 (2)             tstd
ED63 20F3             (        forth.asm):02133 (3)             bra     @lopres
ED65 DD18             (        forth.asm):02134 (4)     @lopdon std     RAKEVAR
ED67 0A35             (        forth.asm):02135 (5)             dec     BALNCD
ED69 BDE7F6           (        forth.asm):02136 (7)             jsr     CSPOP           ANS:do-sys/addr (?DO-orig) to X
ED6C 2601             (        forth.asm):02137 (3)             bne     @endqdo         If NZ push it back, push type 1 and call THEN
ED6E 39               (        forth.asm):02138 (4)             rts
                      (        forth.asm):02139         * End a ?DO construct with an implicit THEN.
ED6F 0C35             (        forth.asm):02140 (5)     @endqdo inc     BALNCD
ED71 BDE7E8           (        forth.asm):02141 (7)             jsr     CSPUSH          Push back IF jump address 
ED74 8E0001           (        forth.asm):02142 (3)             ldx     #1
ED77 BDE7E8           (        forth.asm):02143 (7)             jsr     CSPUSH          to the control flow stack with type 1 (IF)
ED7A 7EEE23           (        forth.asm):02144                 RFXT    jmp,THEN+7
                      (        forth.asm):02145         
ED7D 8E0001           (        forth.asm):02146 (3)     LOOPEX  ldx     #1
ED80 2010             (        forth.asm):02147 (3)             bra     PLOPEX1
                      (        forth.asm):02148         
ED82 C5               (        forth.asm):02149         PLOOP   fcb     $C5             ANSI (Core)
ED83 2B4C4F4F50       (        forth.asm):02150                 fcc     '+LOOP'         Comp: ( C: do-sys -- )
ED88 ED36             (        forth.asm):02151                 fdb     LOOP            Exec: ( n -- ) ( R: loop-sys1 -- | loop-sys2 )
                      (        forth.asm):02152                 RFCS
ED8A 8EED8F           (        forth.asm):02153 (3)             ldx     #PLOOPEX
ED8D 20B1             (        forth.asm):02154 (3)             bra     LOOP1
                      (        forth.asm):02155         
                      (        forth.asm):02156         * Anton Ertl's forth-standard.org notes on +LOOP (2019-05-21 05:54:21):
                      (        forth.asm):02157         * "Note that the loop control parameters can be either signed or unsigned,
                      (        forth.asm):02158         * and +LOOP has to work for both. For systems with 2s-complement representation
                      (        forth.asm):02159         * for signed numbers, the way to go is to use circular arithmetic: compute
                      (        forth.asm):02160         * x=(index-limit)+minint, and observe if the addition x+n crosses the boundary
                      (        forth.asm):02161         * between minint and maxint. Many architectures report this through the
                      (        forth.asm):02162         * overflow flag."
                      (        forth.asm):02163         * Here we do precisely what the good Doktor says, setting the carry flag on
                      (        forth.asm):02164         * overflow detection.
ED8F BDE7F6           (        forth.asm):02165 (7)     PLOOPEX jsr     NPOP
ED92 1F16             (        forth.asm):02166 (4)     PLOPEX1 tfr     x,w             Increment to W
ED94 BDE824           (        forth.asm):02167 (7)             jsr     RPOP
ED97 1F12             (        forth.asm):02168 (4)             tfr     x,y             Index to Y
ED99 BDE824           (        forth.asm):02169 (7)             jsr     RPOP            Limit to X
ED9C CC8000           (        forth.asm):02170 (3)             ldd     #$8000          Minimum integer on a 2 byte cell system
ED9F 103020           (        forth.asm):02171 (4)             addr    y,d             add the index
EDA2 103210           (        forth.asm):02172 (4)             subr    x,d             substract the limit
EDA5 103060           (        forth.asm):02173 (4)             addr    w,d             add the increment and check for overflow
EDA8 290E             (        forth.asm):02174 (3)             bvs     @limrcd         Limit reached
EDAA BDE808           (        forth.asm):02175 (7)             jsr     RPUSH           Limit to the return stack
EDAD 103062           (        forth.asm):02176 (4)             addr    w,y             Update the index
EDB0 1F21             (        forth.asm):02177 (4)             tfr     y,x
EDB2 BDE808           (        forth.asm):02178 (7)             jsr     RPUSH           Updated index to the return stack
EDB5 1CFE             (        forth.asm):02179 (2)             andcc   #^CFLAG         Clear CFLAG
EDB7 39               (        forth.asm):02180 (4)             rts
EDB8 1A01             (        forth.asm):02181 (2)     @limrcd orcc    #CFLAG          Set CFLAG
EDBA 39               (        forth.asm):02182 (4)             rts
                      (        forth.asm):02183         
EDBB 46               (        forth.asm):02184         UNLOOP  fcb     $46             ANSI (Core)
EDBC 554E4C4F4F50     (        forth.asm):02185                 fcc     'UNLOOP'        ( -- ) ( R: loop-sys -- )
EDC2 ED82             (        forth.asm):02186                 fdb     PLOOP
                      (        forth.asm):02187                 RFCS
EDC4 BDE824           (        forth.asm):02188 (7)             jsr     RPOP            Drop the index from the return stack
EDC7 7EE824           (        forth.asm):02189 (3)             jmp     RPOP            and the loop limit as well
                      (        forth.asm):02190         
                      (        forth.asm):02191         * Prototyping code below:
                      (        forth.asm):02192         *
                      (        forth.asm):02193         * VARIABLE bal   0 bal !
                      (        forth.asm):02194         * : bal+ 1 bal +! ;
                      (        forth.asm):02195         * : bal- -1 bal +! ;
                      (        forth.asm):02196         * : branch jmpopc C, ; RESTRICT
                      (        forth.asm):02197         * : 0branch jsropc C, npop ,
                      (        forth.asm):02198         *   bneopc ,
                      (        forth.asm):02199         *   branch ; RESTRICT
                      (        forth.asm):02200         * : AHEAD branch HERE 0 ,  \ 0 is an unresolved forward reference
                      (        forth.asm):02201         *   bal+ 1 ; IMMEDIATE RESTRICT
EDCA C5               (        forth.asm):02202         AHEAD   fcb     $C5             ANSI (Tools ext)
EDCB 4148454144       (        forth.asm):02203                 fcc     'AHEAD'         Comp: ( C: -- orig )
EDD0 EDBB             (        forth.asm):02204                 fdb     UNLOOP          Exec: ( -- )
                      (        forth.asm):02205                 RFCS
EDD2 109E08           (        forth.asm):02206 (5)             ldy     DICEND
EDD5 867E             (        forth.asm):02207 (2)     AHEAD1  lda     #JMPOPC
EDD7 A7A0             (        forth.asm):02208 (4+1)           sta     ,y+
EDD9 1F21             (        forth.asm):02209 (4)             tfr     y,x             Jump address location (ANS:orig/addr) to X
EDDB 3122             (        forth.asm):02210 (4+1)           leay    2,y
EDDD 109F08           (        forth.asm):02211 (5)             sty     DICEND          2 ALLOT (instead of 0 ,)
EDE0 0C35             (        forth.asm):02212 (5)             inc     BALNCD
EDE2 BDE7E8           (        forth.asm):02213 (7)             jsr     CSPUSH          ANS:orig/addr to the control flow stack
EDE5 8E0001           (        forth.asm):02214 (3)             ldx     #1              ANS:orig/type is 1
EDE8 7EE7E8           (        forth.asm):02215 (3)             jmp     CSPUSH
                      (        forth.asm):02216         
                      (        forth.asm):02217         * : IF 0branch HERE 0 ,  \ 0 is an unresolved forward reference
                      (        forth.asm):02218         *   bal+ 1 ; IMMEDIATE RESTRICT
EDEB C2               (        forth.asm):02219         IF      fcb     $C2             ANSI (Core)
EDEC 4946             (        forth.asm):02220                 fcc     'IF'            Comp: ( C: -- orig )
EDEE EDCA             (        forth.asm):02221                 fdb     AHEAD           Exec: ( x -- )
                      (        forth.asm):02222                 RFCS
EDF0 8EE7F6           (        forth.asm):02223 (3)             ldx     #NPOP
EDF3 BDE155           (        forth.asm):02224 (7)             jsr     EMXASXT         Compile "JSR NPOP"
EDF6 CC2603           (        forth.asm):02225 (3)             ldd     #BNEOPC
EDF9 EDA1             (        forth.asm):02226 (5+2)           std     ,y++            Compile "BNE *+5"
EDFB 20D8             (        forth.asm):02227 (3)             bra     AHEAD1
                      (        forth.asm):02228         
                      (        forth.asm):02229         * Functionally equivalent to:
                      (        forth.asm):02230         * : UNLESS POSTPONE 0= POSTPONE IF ; IMMEDIATE RESTRICT
EDFD C6               (        forth.asm):02231         UNLESS  fcb     $C6             Non-standard (Perl inspired)
EDFE 554E4C455353     (        forth.asm):02232                 fcc     'UNLESS'
EE04 EDEB             (        forth.asm):02233                 fdb     IF
                      (        forth.asm):02234                 RFCS
EE06 8EEF0E           (        forth.asm):02235                 RFXT    ldx,#NULP+5     XT for 0=
EE09 BDE155           (        forth.asm):02236 (7)             jsr     EMXASXT
EE0C 20E2             (        forth.asm):02237                 RFXT    bra,IF+5        XT for IF
                      (        forth.asm):02238         
                      (        forth.asm):02239         * : ELSE POSTPONE AHEAD 2SWAP POSTPONE THEN ; IMMEDIATE RESTRICT
EE0E C4               (        forth.asm):02240         ELSE    fcb     $C4             ANSI (Core)
EE0F 454C5345         (        forth.asm):02241                 fcc     'ELSE'          Comp: ( C: orig1 -- orig2 )
EE13 EDFD             (        forth.asm):02242                 fdb     UNLESS          Exec: ( -- )
                      (        forth.asm):02243                 RFCS
EE15 8DBB             (        forth.asm):02244                 RFXT    bsr,AHEAD+8
EE17 BDF44B           (        forth.asm):02245                 RFXT    jsr,TWOSWAP+8   This should be read as "1 CS-ROLL"
EE1A 2007             (        forth.asm):02246                 RFXT    bra,THEN+7
                      (        forth.asm):02247         
                      (        forth.asm):02248         * : THEN 1- ABORT" Unbalanced IF/ELSE/THEN construct"
                      (        forth.asm):02249         *   HERE SWAP ! bal-
                      (        forth.asm):02250         *   HERE fwdref ! ; IMMEDIATE RESTRICT
EE1C C4               (        forth.asm):02251         THEN    fcb     $C4             ANSI (Core)
EE1D 5448454E         (        forth.asm):02252                 fcc     'THEN'          Comp: ( C: orig -- )
EE21 EE0E             (        forth.asm):02253                 fdb     ELSE            Exec: ( -- )
                      (        forth.asm):02254                 RFCS
EE23 BDE7F6           (        forth.asm):02255 (7)             jsr     CSPOP           ANS:orig/type to X
EE26 301F             (        forth.asm):02256 (4+1)           leax    -1,x
EE28 1026FA16         (        forth.asm):02257 (5)             lbne    BALERR          Illegal construct, type must be 1
EE2C 109E08           (        forth.asm):02258 (5)             ldy     DICEND
EE2F BDE7F6           (        forth.asm):02259 (7)             jsr     CSPOP           ANS:orig/addr to X
EE32 10AF84           (        forth.asm):02260 (6+0)           sty     ,x              Resolve forward reference to HERE
EE35 109F16           (        forth.asm):02261 (5)             sty     FWDREF          Last recorded forward reference
EE38 0A35             (        forth.asm):02262 (5)             dec     BALNCD
EE3A 39               (        forth.asm):02263 (4)             rts
                      (        forth.asm):02264         
EE3B 01               (        forth.asm):02265         EQ      fcb     1               ANSI (Core)
EE3C 3D               (        forth.asm):02266                 fcc     '='             ( x1 x2 -- flag )
EE3D EE1C             (        forth.asm):02267                 fdb     THEN
                      (        forth.asm):02268                 RFCS
EE3F BDE496           (        forth.asm):02269 (7)             jsr     MIN2PST         At least two cells need to be stacked up
EE42 10ECC4           (        forth.asm):02270 (8+0)           ldq     ,u              D:W has X2:X1
EE45 3342             (        forth.asm):02271 (4+1)           leau    2,u             Drop one cell from the user stack
EE47 1FC1             (        forth.asm):02272 (4)             tfr     0,x
EE49 103760           (        forth.asm):02273 (4)             cmpr    w,d
EE4C 2602             (        forth.asm):02274 (3)             bne     @eq1
EE4E 301F             (        forth.asm):02275 (4+1)           leax    -1,x            Return the ANSI true
EE50 AFC4             (        forth.asm):02276 (5+0)   @eq1    stx     ,u              Store in place to FLAG
EE52 39               (        forth.asm):02277 (4)             rts
                      (        forth.asm):02278         
EE53 02               (        forth.asm):02279         DIFF    fcb     2               79-STANDARD (REF)
EE54 3C3E             (        forth.asm):02280                 fcc     '<>'            ( N1 N2 -- FLAG )
EE56 EE3B             (        forth.asm):02281                 fdb     EQ
                      (        forth.asm):02282                 RFCS
EE58 BDE496           (        forth.asm):02283 (7)             jsr     MIN2PST         At least two cells need to be stacked up
EE5B 10ECC4           (        forth.asm):02284 (8+0)           ldq     ,u              D:W has N2:N1
EE5E 3342             (        forth.asm):02285 (4+1)           leau    2,u             Drop one cell from the user stack
EE60 1FC1             (        forth.asm):02286 (4)             tfr     0,x
EE62 103760           (        forth.asm):02287 (4)             cmpr    w,d
EE65 2702             (        forth.asm):02288 (3)             beq     @diff1
EE67 301F             (        forth.asm):02289 (4+1)           leax    -1,x            Return the ANSI true
EE69 AFC4             (        forth.asm):02290 (5+0)   @diff1  stx     ,u              Store in place to FLAG
EE6B 39               (        forth.asm):02291 (4)             rts
                      (        forth.asm):02292         
EE6C 02               (        forth.asm):02293         SINFEQ  fcb     2               Non-standard (Not even ANSI!)
EE6D 3C3D             (        forth.asm):02294                 fcc     '<='            Required for the ORNL fixed sieve benchmark
EE6F EE53             (        forth.asm):02295                 fdb     DIFF
                      (        forth.asm):02296                 RFCS
EE71 BDE496           (        forth.asm):02297 (7)             jsr     MIN2PST         At least two cells need to be stacked up
EE74 10AEC4           (        forth.asm):02298 (6+0)           ldy     ,u
EE77 AE42             (        forth.asm):02299 (5+1)           ldx     2,u
EE79 104F             (        forth.asm):02300 (2)             clrd
EE7B 103721           (        forth.asm):02301 (4)             cmpr    y,x
EE7E 2E02             (        forth.asm):02302 (3)             bgt     @sinfq1
EE80 104A             (        forth.asm):02303 (2)             decd                    Return the ANSI true
EE82 3342             (        forth.asm):02304 (4+1)   @sinfq1 leau    2,u             Drop one cell
EE84 EDC4             (        forth.asm):02305 (5+0)           std     ,u
EE86 39               (        forth.asm):02306 (4)             rts
                      (        forth.asm):02307         
                      (        forth.asm):02308                 IFNE    DEBUG
EE87                  (        forth.asm):02309         CC      fcb     2               Non-standard. Used for debugging
                      (        forth.asm):02310                 fcc     'CC'
                      (        forth.asm):02311                 fdb     SINFEQ
                      (        forth.asm):02312                 RFCS
                      (        forth.asm):02313                 ldx     CCREG
                      (        forth.asm):02314                 jmp     NPUSH
                      (        forth.asm):02315                 ENDC                    DEBUG
                      (        forth.asm):02316         
EE87 03               (        forth.asm):02317         XOR     fcb     3               ANSI (Core)
EE88 584F52           (        forth.asm):02318                 fcc     'XOR'           ( x1 x2 -- x3 )
                      (        forth.asm):02319                 IFNE    DEBUG
                      (        forth.asm):02320                 fdb     CC
                      (        forth.asm):02321                 ELSE
EE8B EE6C             (        forth.asm):02322                 fdb     SINFEQ
                      (        forth.asm):02323                 ENDC                    DEBUG
                      (        forth.asm):02324                 RFCS
EE8D BDE496           (        forth.asm):02325 (7)             jsr     MIN2PST         At least two cells need to be stacked up
EE90 ECC4             (        forth.asm):02326 (5+0)           ldd     ,u              X2 to D
EE92 10A642           (        forth.asm):02327 (6+1)           ldw     2,u             X1 to W
EE95 103660           (        forth.asm):02328 (4)             eorr    w,d
EE98 3342             (        forth.asm):02329 (4+1)   XOR1    leau    2,u
EE9A EDC4             (        forth.asm):02330 (5+0)           std     ,u              X1 ^ X2 to X3
EE9C 39               (        forth.asm):02331 (4)             rts
                      (        forth.asm):02332         
EE9D 02               (        forth.asm):02333         OR      fcb     2               ANSI (Core)
EE9E 4F52             (        forth.asm):02334                 fcc     'OR'            ( x1 x2 -- x3 )
EEA0 EE87             (        forth.asm):02335                 fdb     XOR
                      (        forth.asm):02336                 RFCS
EEA2 BDE496           (        forth.asm):02337 (7)             jsr     MIN2PST         At least two cells need to be stacked up
EEA5 ECC4             (        forth.asm):02338 (5+0)           ldd     ,u              X2 to D
EEA7 10A642           (        forth.asm):02339 (6+1)           ldw     2,u             X1 to W
EEAA 103560           (        forth.asm):02340 (4)             orr     w,d
EEAD 20E9             (        forth.asm):02341 (3)             bra     XOR1            X1 | X2 to X3
                      (        forth.asm):02342         
EEAF 03               (        forth.asm):02343         AND     fcb     3               ANSI (Core)
EEB0 414E44           (        forth.asm):02344                 fcc     'AND'           ( x1 x2 -- x3 )
EEB3 EE9D             (        forth.asm):02345                 fdb     OR
                      (        forth.asm):02346                 RFCS
EEB5 BDE496           (        forth.asm):02347 (7)             jsr     MIN2PST         At least two cells need to be stacked up
EEB8 ECC4             (        forth.asm):02348 (5+0)           ldd     ,u              X2 to D
EEBA 10A642           (        forth.asm):02349 (6+1)           ldw     2,u             X1 to W
EEBD 103460           (        forth.asm):02350 (4)             andr    w,d
EEC0 20D6             (        forth.asm):02351 (3)             bra     XOR1            X1 & X2 to X3
                      (        forth.asm):02352         
EEC2 06               (        forth.asm):02353         INVERT  fcb     6               ANSI (Core)
EEC3 494E56455254     (        forth.asm):02354                 fcc     'INVERT'        ( x1 -- x2 )
EEC9 EEAF             (        forth.asm):02355                 fdb     AND
                      (        forth.asm):02356                 RFCS
EECB BDE7F6           (        forth.asm):02357 (7)             jsr     NPOP            X1 to X
EECE 1F10             (        forth.asm):02358 (4)             tfr     x,d
EED0 1043             (        forth.asm):02359 (2)             comd
EED2 1F01             (        forth.asm):02360 (4)             tfr     d,x             X2 to X
EED4 3610             (        forth.asm):02361                 UCNPUSH                 and to the data stack
EED6 39               (        forth.asm):02362 (4)             rts
                      (        forth.asm):02363         
EED7 02               (        forth.asm):02364         ZGREAT  fcb     2               79-STANDARD (REQ118)
EED8 303E             (        forth.asm):02365                 fcc     '0>'
EEDA EEC2             (        forth.asm):02366                 fdb     INVERT
                      (        forth.asm):02367                 RFCS
EEDC BDE7F6           (        forth.asm):02368 (7)             jsr     NPOP
EEDF 1F10             (        forth.asm):02369 (4)             tfr     x,d
EEE1 104D             (        forth.asm):02370 (2)             tstd
EEE3 2F06             (        forth.asm):02371 (3)             ble     @zgrt1
EEE5 8EFFFF           (        forth.asm):02372 (3)             ldx     #-1             Return the ANSI true
EEE8 3610             (        forth.asm):02373                 UCNPUSH
EEEA 39               (        forth.asm):02374 (4)             rts
EEEB 1FC1             (        forth.asm):02375 (4)     @zgrt1  tfr     0,x
EEED 3610             (        forth.asm):02376                 UCNPUSH
EEEF 39               (        forth.asm):02377 (4)             rts
                      (        forth.asm):02378         
EEF0 02               (        forth.asm):02379         ZLESS   fcb     2               ANSI (Core)
EEF1 303C             (        forth.asm):02380                 fcc     '0<'            ( n -- flag )
EEF3 EED7             (        forth.asm):02381                 fdb     ZGREAT
                      (        forth.asm):02382                 RFCS
EEF5 BDE7F6           (        forth.asm):02383 (7)             jsr     NPOP
EEF8 1F10             (        forth.asm):02384 (4)             tfr     x,d
EEFA 104D             (        forth.asm):02385 (2)             tstd
EEFC 2C06             (        forth.asm):02386 (3)             bge     @zlss1
EEFE 8EFFFF           (        forth.asm):02387 (3)             ldx     #-1             Return the ANSI true
EF01 3610             (        forth.asm):02388                 UCNPUSH
EF03 39               (        forth.asm):02389 (4)             rts
EF04 1FC1             (        forth.asm):02390 (4)     @zlss1  tfr     0,x
EF06 3610             (        forth.asm):02391                 UCNPUSH
EF08 39               (        forth.asm):02392 (4)             rts
                      (        forth.asm):02393         
EF09 02               (        forth.asm):02394         NULP    fcb     2               ANSI (Core)
EF0A 303D             (        forth.asm):02395                 fcc     '0='            ( x -- flag )
EF0C EEF0             (        forth.asm):02396                 fdb     ZLESS
                      (        forth.asm):02397                 RFCS
EF0E BDE7F6           (        forth.asm):02398 (7)             jsr     NPOP
EF11 1F10             (        forth.asm):02399 (4)             tfr     x,d
EF13 1FC1             (        forth.asm):02400 (4)             tfr     0,x
EF15 104D             (        forth.asm):02401 (2)             tstd
EF17 2703             (        forth.asm):02402 (3)             beq     @nulp2
EF19 3610             (        forth.asm):02403         @nulp1  UCNPUSH
EF1B 39               (        forth.asm):02404 (4)             rts
EF1C 301F             (        forth.asm):02405 (4+1)   @nulp2  leax    -1,x            Return the ANSI true
EF1E 20F9             (        forth.asm):02406 (3)             bra     @nulp1
                      (        forth.asm):02407         
EF20 03               (        forth.asm):02408         ZNEQ    fcb     3               ANSI (Core ext)
EF21 303C3E           (        forth.asm):02409                 fcc     '0<>'
EF24 EF09             (        forth.asm):02410                 fdb     NULP
                      (        forth.asm):02411                 RFCS
EF26 8DE6             (        forth.asm):02412                 RFXT    bsr,NULP+5
EF28 20A1             (        forth.asm):02413                 RFXT    bra,INVERT+9
                      (        forth.asm):02414         
                      (        forth.asm):02415         * Maybe this one should go. It is not specified in the ANS94 reference
                      (        forth.asm):02416         * document but Conklin/Rather have it as "common usage."
EF2A 03               (        forth.asm):02417         NOT     fcb     3               79-STANDARD (REQ165)
EF2B 4E4F54           (        forth.asm):02418                 fcc     'NOT'
EF2E EF20             (        forth.asm):02419                 fdb     ZNEQ
                      (        forth.asm):02420                 RFCS
EF30 20DC             (        forth.asm):02421                 RFXT    bra,NULP+5      XT for 0=
                      (        forth.asm):02422         
EF32 02               (        forth.asm):02423         USUP    fcb     2               ANSI (Core Ext)
EF33 553E             (        forth.asm):02424                 fcc     'U>'
EF35 EF2A             (        forth.asm):02425                 fdb     NOT
                      (        forth.asm):02426                 RFCS
EF37 BDE58A           (        forth.asm):02427 (7)             jsr     CMP2
EF3A 2302             (        forth.asm):02428 (3)             bls     @usup1
EF3C 301F             (        forth.asm):02429 (4+1)           leax    -1,x            Return the ANSI true
EF3E 3610             (        forth.asm):02430         @usup1  UCNPUSH
EF40 39               (        forth.asm):02431 (4)             rts
                      (        forth.asm):02432         
EF41 02               (        forth.asm):02433         UINF    fcb     2               ANSI (Core)
EF42 553C             (        forth.asm):02434                 fcc     'U<'            ( u1 u2 -- flag )
EF44 EF32             (        forth.asm):02435                 fdb     USUP
                      (        forth.asm):02436                 RFCS
EF46 BDE58A           (        forth.asm):02437 (7)             jsr     CMP2
EF49 2402             (        forth.asm):02438 (3)             bhs     @uinf1          Z is set
EF4B 301F             (        forth.asm):02439 (4+1)           leax    -1,x            Return the ANSI true
EF4D 3610             (        forth.asm):02440         @uinf1  UCNPUSH
EF4F 39               (        forth.asm):02441 (4)             rts
                      (        forth.asm):02442         
EF50 01               (        forth.asm):02443         SUP     fcb     1               ANSI (Core)
EF51 3E               (        forth.asm):02444                 fcc     '>'             ( n1 n2 -- flag )
EF52 EF41             (        forth.asm):02445                 fdb     UINF
                      (        forth.asm):02446                 RFCS
EF54 BDE58A           (        forth.asm):02447 (7)             jsr     CMP2
EF57 2F02             (        forth.asm):02448 (3)             ble     @sup1
EF59 301F             (        forth.asm):02449 (4+1)           leax    -1,x            Return the ANSI true
EF5B 3610             (        forth.asm):02450         @sup1   UCNPUSH
EF5D 39               (        forth.asm):02451 (4)             rts
                      (        forth.asm):02452         
EF5E 01               (        forth.asm):02453         INF     fcb     1               ANSI (Core)
EF5F 3C               (        forth.asm):02454                 fcc     '<'             ( n1 n2 -- flag )
EF60 EF50             (        forth.asm):02455                 fdb     SUP
                      (        forth.asm):02456                 RFCS
EF62 BDE58A           (        forth.asm):02457 (7)             jsr     CMP2
EF65 2C02             (        forth.asm):02458 (3)             bge     @inf1
EF67 301F             (        forth.asm):02459 (4+1)           leax    -1,x            Return the ANSI true
EF69 3610             (        forth.asm):02460         @inf1   UCNPUSH
EF6B 39               (        forth.asm):02461 (4)             rts
                      (        forth.asm):02462         
EF6C 03               (        forth.asm):02463         MAX     fcb     3               ANSI (Core)
EF6D 4D4158           (        forth.asm):02464                 fcc     'MAX'           ( n1 n2 -- n3 )
EF70 EF5E             (        forth.asm):02465                 fdb     INF
                      (        forth.asm):02466                 RFCS
EF72 BDE7F6           (        forth.asm):02467 (7)             jsr     NPOP
EF75 1F12             (        forth.asm):02468 (4)             tfr     x,y             N2 to Y
EF77 BDE7F6           (        forth.asm):02469 (7)             jsr     NPOP            N1 to X
EF7A 103721           (        forth.asm):02470 (4)             cmpr    y,x
EF7D 2C02             (        forth.asm):02471 (3)             bge     @pshrv1
EF7F 1F21             (        forth.asm):02472 (4)             tfr     y,x
EF81 3610             (        forth.asm):02473         @pshrv1 UCNPUSH                 (X) N3 to the data stack
EF83 39               (        forth.asm):02474 (4)             rts
                      (        forth.asm):02475         
EF84 03               (        forth.asm):02476         MIN     fcb     3               ANSI (Core)
EF85 4D494E           (        forth.asm):02477                 fcc     'MIN'           ( n1 n2 -- n3 )
EF88 EF6C             (        forth.asm):02478                 fdb     MAX
                      (        forth.asm):02479                 RFCS
EF8A BDE7F6           (        forth.asm):02480 (7)             jsr     NPOP
EF8D 1F12             (        forth.asm):02481 (4)             tfr     x,y             N2 to Y
EF8F BDE7F6           (        forth.asm):02482 (7)             jsr     NPOP            N1 to X
EF92 103721           (        forth.asm):02483 (4)             cmpr    y,x
EF95 2F02             (        forth.asm):02484 (3)             ble     @pshrv2
EF97 1F21             (        forth.asm):02485 (4)             tfr     y,x
EF99 3610             (        forth.asm):02486         @pshrv2 UCNPUSH                 (X) N3 to the data stack
EF9B 39               (        forth.asm):02487 (4)             rts
                      (        forth.asm):02488         
EF9C 03               (        forth.asm):02489         ABS     fcb     3               ANSI (Core)
EF9D 414253           (        forth.asm):02490                 fcc     'ABS'           ( n -- u )
EFA0 EF84             (        forth.asm):02491                 fdb     MIN
                      (        forth.asm):02492                 RFCS
EFA2 BDE7F6           (        forth.asm):02493 (7)             jsr     NPOP
EFA5 1F10             (        forth.asm):02494 (4)             tfr     x,d             N to D
EFA7 104D             (        forth.asm):02495 (2)             tstd
EFA9 2A04             (        forth.asm):02496 (3)             bpl     @abs1
EFAB 1040             (        forth.asm):02497 (2)             negd
EFAD 1F01             (        forth.asm):02498 (4)             tfr     d,x
EFAF 3610             (        forth.asm):02499         @abs1   UCNPUSH                 X to U
EFB1 39               (        forth.asm):02500 (4)             rts
                      (        forth.asm):02501         
EFB2 06               (        forth.asm):02502         NEGATE  fcb     6               ANSI (Core)
EFB3 4E4547415445     (        forth.asm):02503                 fcc     'NEGATE'        ( n1 -- n2 )
EFB9 EF9C             (        forth.asm):02504                 fdb     ABS
                      (        forth.asm):02505                 RFCS
EFBB BDE491           (        forth.asm):02506 (7)             jsr     MIN1PST         At least one cell needs to be stacked up
EFBE ECC4             (        forth.asm):02507 (5+0)           ldd     ,u
EFC0 1040             (        forth.asm):02508 (2)             negd
EFC2 EDC4             (        forth.asm):02509 (5+0)           std     ,u
EFC4 39               (        forth.asm):02510 (4)             rts
                      (        forth.asm):02511         
                      (        forth.asm):02512         * : BEGIN HERE 0 bal+ ; IMMEDIATE RESTRICT
EFC5 C5               (        forth.asm):02513         BEGIN   fcb     $C5             ANSI (Core)
EFC6 424547494E       (        forth.asm):02514                 fcc     'BEGIN'         Comp: ( C: -- dest )
EFCB EFB2             (        forth.asm):02515                 fdb     NEGATE          Exec: ( -- )
                      (        forth.asm):02516                 RFCS
EFCD 0C35             (        forth.asm):02517 (5)             inc     BALNCD
EFCF 9E08             (        forth.asm):02518 (4)             ldx     DICEND          HERE is ANS:dest/addr
EFD1 BDE7E8           (        forth.asm):02519 (7)             jsr     CSPUSH          to the control flow stack
EFD4 1FC1             (        forth.asm):02520 (4)             tfr     0,x             ANS:dest/type is zero
EFD6 7EE7E8           (        forth.asm):02521 (3)             jmp     CSPUSH          to the control flow stack
                      (        forth.asm):02522         
                      (        forth.asm):02523         * : AGAIN ABORT" Unbalanced BEGIN/AGAIN construct"
                      (        forth.asm):02524         *   branch , bal- ; IMMEDIATE RESTRICT
EFD9 C5               (        forth.asm):02525         AGAIN   fcb     $C5             ANSI (Core ext)
EFDA 414741494E       (        forth.asm):02526                 fcc     'AGAIN'         Comp: ( C: dest -- )
EFDF EFC5             (        forth.asm):02527                 fdb     BEGIN           Exec: ( -- )
                      (        forth.asm):02528                 RFCS
EFE1 BDE7F6           (        forth.asm):02529 (7)             jsr     CSPOP           ANS:dest/type to X (CC is set)
EFE4 1026F85A         (        forth.asm):02530 (5)             lbne    BALERR          type must be zero
EFE8 BDE7F6           (        forth.asm):02531 (7)             jsr     CSPOP           ANS:dest/addr to X
EFEB 109E08           (        forth.asm):02532 (5)             ldy     DICEND
EFEE 109F14           (        forth.asm):02533 (5)             sty     JSRLAST
EFF1 867E             (        forth.asm):02534 (2)     AGAIN1  lda     #JMPOPC         JMP extended
EFF3 BDE585           (        forth.asm):02535 (7)             jsr     VARCON2
EFF6 109F08           (        forth.asm):02536 (5)             sty     DICEND
EFF9 0A35             (        forth.asm):02537 (5)             dec     BALNCD
EFFB 39               (        forth.asm):02538 (4)             rts
                      (        forth.asm):02539         
                      (        forth.asm):02540         * The standard does not require this as being immediate but I do.
EFFC C4               (        forth.asm):02541         EXIT    fcb     $C4             ANSI (Core)
EFFD 45584954         (        forth.asm):02542                 fcc     'EXIT'          ( -- )
F001 EFD9             (        forth.asm):02543                 fdb     AGAIN
                      (        forth.asm):02544                 RFCS
F003 9E08             (        forth.asm):02545 (4)             ldx     DICEND
F005 301D             (        forth.asm):02546 (4+1)           leax    -3,x
F007 109E14           (        forth.asm):02547 (5)             ldy     JSRLAST
F00A 103721           (        forth.asm):02548 (4)             cmpr    y,x
F00D 2605             (        forth.asm):02549 (3)             bne     @noopt          Tail JMP optimization is not possible
F00F 867E             (        forth.asm):02550 (2)             lda     #JMPOPC         JMP extended
F011 A784             (        forth.asm):02551 (4+0)           sta     ,x
F013 39               (        forth.asm):02552 (4)             rts
F014 3003             (        forth.asm):02553 (4+1)   @noopt  leax    3,x             Point back to HERE
F016 8639             (        forth.asm):02554 (2)             lda     #RTSOPC         RTS inherent
F018 A780             (        forth.asm):02555 (4+1)           sta     ,x+
F01A 9F08             (        forth.asm):02556 (4)             stx     DICEND
F01C 39               (        forth.asm):02557 (4)             rts
                      (        forth.asm):02558         
                      (        forth.asm):02559         * : UNTIL ABORT" Unbalanced BEGIN/UNTIL construct"
                      (        forth.asm):02560         *   0branch , bal- ; IMMEDIATE RESTRICT
F01D C5               (        forth.asm):02561         UNTIL   fcb     $C5             ANSI (Core)
F01E 554E54494C       (        forth.asm):02562                 fcc     'UNTIL'         Comp: ( C: dest -- )
F023 EFFC             (        forth.asm):02563                 fdb     EXIT            Exec: (x -- )
                      (        forth.asm):02564                 RFCS
F025 BDE7F6           (        forth.asm):02565 (7)             jsr     CSPOP           ANS:dest/type to X (CC is set)
F028 1026F816         (        forth.asm):02566 (5)             lbne    BALERR          type must be zero
F02C 8EE7F6           (        forth.asm):02567 (3)             ldx     #NPOP
F02F BDE155           (        forth.asm):02568 (7)             jsr     EMXASXT         Compile "JSR NPOP"
F032 8E2603           (        forth.asm):02569 (3)             ldx     #BNEOPC         Compile "BNE *+5"
F035 AFA1             (        forth.asm):02570 (5+2)           stx     ,y++
F037 BDE7F6           (        forth.asm):02571 (7)             jsr     CSPOP           ANS:dest/addr to X
F03A 20B5             (        forth.asm):02572 (3)             bra     AGAIN1
                      (        forth.asm):02573         
                      (        forth.asm):02574         * : WHILE POSTPONE IF 2SWAP ; RESTRICT IMMEDIATE
F03C C5               (        forth.asm):02575         WHILE   fcb     $C5             ANSI (Core)
F03D 5748494C45       (        forth.asm):02576                 fcc     'WHILE'         Comp: ( C: dest -- orig dest )
F042 F01D             (        forth.asm):02577                 fdb     UNTIL           Exec: ( x -- )
                      (        forth.asm):02578                 RFCS
F044 BDEDF0           (        forth.asm):02579                 RFXT    jsr,IF+5
F047 7EF44B           (        forth.asm):02580                 RFXT    jmp,TWOSWAP+8   This should be read as "1 CS-ROLL"
                      (        forth.asm):02581         
                      (        forth.asm):02582         * : REPEAT POSTPONE AGAIN POSTPONE THEN ; RESTRICT IMMEDIATE
F04A C6               (        forth.asm):02583         REPEAT  fcb     $C6             ANSI (Core)
F04B 524550454154     (        forth.asm):02584                 fcc     'REPEAT'        Comp: ( C: orig dest -- )
F051 F03C             (        forth.asm):02585                 fdb     WHILE           Exec: ( -- )
                      (        forth.asm):02586                 RFCS
F053 8D8C             (        forth.asm):02587                 RFXT    bsr,AGAIN+8
F055 7EEE23           (        forth.asm):02588                 RFXT    jmp,THEN+7
                      (        forth.asm):02589         
F058 42               (        forth.asm):02590         RFROM   fcb     $42             ANSI (Core)
F059 523E             (        forth.asm):02591                 fcc     'R>'            ( -- x ) ( R:  x -- )
F05B F04A             (        forth.asm):02592                 fdb     REPEAT
                      (        forth.asm):02593                 RFCS
F05D BDE824           (        forth.asm):02594 (7)             jsr     RPOP
F060 7EE7E8           (        forth.asm):02595 (3)             jmp     NPUSH
                      (        forth.asm):02596         
F063 42               (        forth.asm):02597         TOR     fcb     $42             ANSI (Core)
F064 3E52             (        forth.asm):02598                 fcc     '>R'            ( x -- ) ( R:  -- x )
F066 F058             (        forth.asm):02599                 fdb     RFROM
                      (        forth.asm):02600                 RFCS
F068 BDE7F6           (        forth.asm):02601 (7)             jsr     NPOP
F06B 7EE808           (        forth.asm):02602 (3)             jmp     RPUSH
                      (        forth.asm):02603         
                      (        forth.asm):02604         * : LEAVE POSTPONE UNLOOP POSTPONE branch
                      (        forth.asm):02605         *   HERE rakeVar DUP @ , ! ; IMMEDIATE RESTRICT
                      (        forth.asm):02606         * rakeVar points to the head of a linked list of forward references to
                      (        forth.asm):02607         * be resolved later by LOOP/+LOOP.
F06E C5               (        forth.asm):02608         LEAVE   fcb     $C5             ANSI (Core)
F06F 4C45415645       (        forth.asm):02609                 fcc     'LEAVE'         Exec: ( -- ) ( R: loop-sys -- )
F074 F063             (        forth.asm):02610                 fdb     TOR
                      (        forth.asm):02611                 RFCS
F076 8EEDC4           (        forth.asm):02612                 RFXT    ldx,#UNLOOP+9
F079 BDE155           (        forth.asm):02613 (7)             jsr     EMXASXT         POSTPONE UNLOOP
F07C 867E             (        forth.asm):02614 (2)             lda     #JMPOPC
F07E A7A0             (        forth.asm):02615 (4+1)           sta     ,y+             POSTPONE branch
F080 1F21             (        forth.asm):02616 (4)             tfr     y,x             save HERE (fwd ref. to be resolved by LOOP)
F082 DC18             (        forth.asm):02617 (4)             ldd     RAKEVAR
F084 EDA1             (        forth.asm):02618 (5+2)           std     ,y++            rakeVar @ ,
F086 9F18             (        forth.asm):02619 (4)             stx     RAKEVAR         HERE rakeVar !
F088 109F08           (        forth.asm):02620 (5)             sty     DICEND
F08B 39               (        forth.asm):02621 (4)             rts
                      (        forth.asm):02622         
F08C 41               (        forth.asm):02623         INDI    fcb     $41             ANSI (Core)
F08D 49               (        forth.asm):02624                 fcc     'I'             ( -- n|u ) ( R:  loop-sys -- loop-sys )
F08E F06E             (        forth.asm):02625                 fdb     LEAVE
                      (        forth.asm):02626                 RFCS
F090 5F               (        forth.asm):02627 (1)             clrb
F091 9637             (        forth.asm):02628 (3)     RPICKN  lda     RDEPTH
F093 103789           (        forth.asm):02629 (4)             cmpr    a,b
F096 240A             (        forth.asm):02630 (3)             bhs     @rpick1
F098 9E00             (        forth.asm):02631 (4)             ldx     RSP
F09A 4F               (        forth.asm):02632 (1)             clra
F09B 1048             (        forth.asm):02633 (2)             lsld                    Times 2
F09D AE8B             (        forth.asm):02634 (5+2)           ldx     d,x
F09F 7EE7E8           (        forth.asm):02635 (3)             jmp     NPUSH           We cannot use UCNPUSH here
F0A2 C608             (        forth.asm):02636 (2)     @rpick1 ldb     #8              Return stack underflow
F0A4 BDE75E           (        forth.asm):02637 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02638         
F0A7 42               (        forth.asm):02639         RFETCH  fcb     $42             ANSI (Core)
F0A8 5240             (        forth.asm):02640                 fcc     'R@'            ( -- x ) ( R:  x -- x )
F0AA F08C             (        forth.asm):02641                 fdb     INDI
                      (        forth.asm):02642                 RFCS
F0AC 20E2             (        forth.asm):02643                 RFXT    bra,INDI+4      XT for I
                      (        forth.asm):02644         
F0AE 42               (        forth.asm):02645         INDIP   fcb     $42             79-STANDARD (REF)
F0AF 4927             (        forth.asm):02646                 fdb     $4927
F0B1 F0A7             (        forth.asm):02647                 fdb     RFETCH
                      (        forth.asm):02648                 RFCS
F0B3 C601             (        forth.asm):02649 (2)             ldb     #1
F0B5 20DA             (        forth.asm):02650 (3)             bra     RPICKN
                      (        forth.asm):02651         
F0B7 41               (        forth.asm):02652         INDJ    fcb     $41             ANSI (Core)
F0B8 4A               (        forth.asm):02653                 fcc     'J'             Exec: ( -- n|u ) ( R: lsy1 lsy2 -- lsy1 lsy2 )
F0B9 F0AE             (        forth.asm):02654                 fdb     INDIP
                      (        forth.asm):02655                 RFCS
F0BB C602             (        forth.asm):02656 (2)             ldb     #2
F0BD 20D2             (        forth.asm):02657 (3)             bra     RPICKN
                      (        forth.asm):02658         
F0BF 42               (        forth.asm):02659         INDJP   fcb     $42             Non-standard
F0C0 4A27             (        forth.asm):02660                 fdb     $4A27
F0C2 F0B7             (        forth.asm):02661                 fdb     INDJ
                      (        forth.asm):02662                 RFCS
F0C4 C603             (        forth.asm):02663 (2)             ldb     #3
F0C6 20C9             (        forth.asm):02664 (3)             bra     RPICKN
                      (        forth.asm):02665         
F0C8 41               (        forth.asm):02666         INDK    fcb     $41             79-STANDARD (REF)
F0C9 4B               (        forth.asm):02667                 fcc     'K'
F0CA F0BF             (        forth.asm):02668                 fdb     INDJP
                      (        forth.asm):02669                 RFCS
F0CC C604             (        forth.asm):02670 (2)             ldb     #4
F0CE 20C1             (        forth.asm):02671 (3)             bra     RPICKN
                      (        forth.asm):02672         
F0D0 04               (        forth.asm):02673         QUIT    fcb     4               ANSI (Core)
F0D1 51554954         (        forth.asm):02674                 fcc     'QUIT'          ( -- )  ( R:  i*x -- )
F0D5 F0C8             (        forth.asm):02675                 fdb     INDK
                      (        forth.asm):02676                 RFCS
F0D7 0F25             (        forth.asm):02677 (5)             clr     USTATE+1
F0D9 BDEBB0           (        forth.asm):02678                 RFXT    jsr,RCLR+7      XT for RCLR
F0DC 10CE8000         (        forth.asm):02679 (4)             lds     #RAMSTRT+RAMSIZE Reset the system stack pointer
F0E0 BDE2ED           (        forth.asm):02680 (7)             jsr     PUTCR
F0E3 7EE0B2           (        forth.asm):02681 (3)             jmp     INTERP
                      (        forth.asm):02682         
F0E6 05               (        forth.asm):02683         ABORT   fcb     5               ANSI (Core)
F0E7 41424F5254       (        forth.asm):02684                 fcc     'ABORT'         ( i*x -- ) ( R: j*x -- )
F0EC F0D0             (        forth.asm):02685                 fdb     QUIT
                      (        forth.asm):02686                 RFCS
F0EE C603             (        forth.asm):02687 (2)             ldb     #3              User ABORT
F0F0 BDE75E           (        forth.asm):02688 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02689         
                      (        forth.asm):02690         * Implementation notes: GNU Forth, VFX and SwiftForth all report "invalid
                      (        forth.asm):02691         * memory address" for "0 FIND". Also the counted string at c-addr is not
                      (        forth.asm):02692         * scanned for leading spaces. If the counted string byte count is zero, the
                      (        forth.asm):02693         * string will be not found and the dictionary not searched at all.
F0F3 04               (        forth.asm):02694         FIND    fcb     4               ANSI (Core)
F0F4 46494E44         (        forth.asm):02695                 fcc     'FIND'          ( c-addr -- c-addr 0  |  xt 1  |  xt -1 )
F0F8 F0E6             (        forth.asm):02696                 fdb     ABORT
                      (        forth.asm):02697                 RFCS
F0FA BDE491           (        forth.asm):02698 (7)             jsr     MIN1PST
F0FD AEC4             (        forth.asm):02699 (5+0)           ldx     ,u              TOS to X (Arg <c-addr>)
F0FF 2605             (        forth.asm):02700 (3)             bne     @afind1
F101 C60D             (        forth.asm):02701 (2)             ldb     #13             Illegal argument
F103 BDE75E           (        forth.asm):02702 (7)             jsr     ERRHDLR         No return
F106 6D84             (        forth.asm):02703 (5+0)   @afind1 tst     ,x
F108 2605             (        forth.asm):02704 (3)             bne     @afind3         Character count is NZ, proceed
F10A 1FC1             (        forth.asm):02705 (4)     @afind2 tfr     0,x             Word not found
F10C 7EE7E8           (        forth.asm):02706 (3)             jmp     NPUSH
F10F DC02             (        forth.asm):02707 (4)     @afind3 ldd     TOKENSP
F111 3406             (        forth.asm):02708 (4+2)           pshs    d               Save TOKENSP to the system stack
F113 E680             (        forth.asm):02709 (4+1)           ldb     ,x+
F115 D742             (        forth.asm):02710 (3)             stb     CURTOKL
F117 9F02             (        forth.asm):02711 (4)             stx     TOKENSP
F119 BDE4AA           (        forth.asm):02712 (7)             jsr     SWDIC1
F11C DC0E             (        forth.asm):02713 (4)             ldd     PLOAD           Retrieve word payload
F11E DD10             (        forth.asm):02714 (4)             std     FNDPLD          Make it accessible through PAYLOAD
F120 3506             (        forth.asm):02715 (4+2)           puls    d
F122 DD02             (        forth.asm):02716 (4)             std     TOKENSP         Restore TOKENSP from the system stack
                      (        forth.asm):02717         * If the word is not found, Y is 0 and we ought to branch back to that context.
F124 1037C2           (        forth.asm):02718 (4)             cmpr    0,y
F127 27E1             (        forth.asm):02719 (3)             beq     @afind2
                      (        forth.asm):02720         * Word was found, push the corresponding XT (in Y) to the data stack (in place).
F129 10AFC4           (        forth.asm):02721 (6+0)           sty     ,u
F12C 8EFFFF           (        forth.asm):02722 (3)             ldx     #-1             Assume non-immediate
F12F 0D43             (        forth.asm):02723 (4)             tst     IMDFLG
F131 2702             (        forth.asm):02724 (3)             beq     @afind4
F133 3002             (        forth.asm):02725 (4+1)           leax    2,x             #1 to X
F135 7EE7E8           (        forth.asm):02726 (3)     @afind4 jmp     NPUSH
                      (        forth.asm):02727         
F138 01               (        forth.asm):02728         RBRACK  fcb     1               ANSI (Core)
F139 5D               (        forth.asm):02729                 fcc     ']'             ( -- )
F13A F0F3             (        forth.asm):02730                 fdb     FIND
                      (        forth.asm):02731                 RFCS
F13C 86FF             (        forth.asm):02732 (2)             lda     #-1
F13E 9725             (        forth.asm):02733 (3)     RBRACK1 sta     USTATE+1
F140 39               (        forth.asm):02734 (4)             rts
                      (        forth.asm):02735         
                      (        forth.asm):02736         * Note: the standard does not mandate that this primitive be executed in
                      (        forth.asm):02737         * definitions only. IMHO, it ought to, therefore I am forcing the C bit here.
F141 C1               (        forth.asm):02738         LBRACK  fcb     $C1             ANSI (Core)
F142 5B               (        forth.asm):02739                 fcc     '['             ( -- )
F143 F138             (        forth.asm):02740                 fdb     RBRACK
                      (        forth.asm):02741                 RFCS
F145 4F               (        forth.asm):02742 (1)             clra
F146 20F6             (        forth.asm):02743 (3)             bra     RBRACK1
                      (        forth.asm):02744         
                      (        forth.asm):02745         * Functionally:
                      (        forth.asm):02746         * : ' BL WORD FIND IF
                      (        forth.asm):02747         *     EXIT                      \ XT is left on the data stack
                      (        forth.asm):02748         *   THEN
                      (        forth.asm):02749         *   DROP 0 ;
F148 01               (        forth.asm):02750         TICK    fcb     1               ANSI (Core)
F149 27               (        forth.asm):02751                 fcb     $27             ( "<spaces>name" -- xt )
F14A F141             (        forth.asm):02752                 fdb     LBRACK
                      (        forth.asm):02753                 RFCS
F14C BDF6AA           (        forth.asm):02754                 RFXT    jsr,BL+5
F14F BDF2C3           (        forth.asm):02755                 RFXT    jsr,WORD+7
F152 8DA6             (        forth.asm):02756                 RFXT    bsr,FIND+7
                      (        forth.asm):02757         * We have at least two cells returned by the ANS94 FIND on the data stack.
F154 ECC4             (        forth.asm):02758 (5+0)           ldd     ,u              TOS to D (ANS94 FIND flag)
F156 2703             (        forth.asm):02759 (3)             beq     @nfound         Target word was not found
F158 3342             (        forth.asm):02760 (4+1)           leau    2,u             Drop the flag and return the XT
F15A 39               (        forth.asm):02761 (4)             rts
F15B 3344             (        forth.asm):02762 (4+1)   @nfound leau    4,u             Drop two cells from the data stack
F15D 9E02             (        forth.asm):02763 (4)             ldx     TOKENSP
F15F BDE375           (        forth.asm):02764 (7)             jsr     SCNSTOK         Needed to skip leading spaces
F162 C602             (        forth.asm):02765 (2)             ldb     #2              Word not found
F164 BDE75E           (        forth.asm):02766 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02767         
                      (        forth.asm):02768         * Functionally: : ['] ' POSTPONE LITERAL ; IMMEDIATE RESTRICT
F167 C3               (        forth.asm):02769         BKQUOT  fcb     $C3             ANSI (Core)
F168 5B275D           (        forth.asm):02770                 fcb     $5B,$27,$5D     Comp: ( "<spaces>name" -- )
F16B F148             (        forth.asm):02771                 fdb     TICK            Exec: ( -- xt )
                      (        forth.asm):02772                 RFCS
F16D 8DDD             (        forth.asm):02773                 RFXT    bsr,TICK+4      XT for '
                      (        forth.asm):02774         * Data stack topmost cell has the target word address.
F16F 7EEC2C           (        forth.asm):02775                 RFXT    jmp,LITERAL+10  XT for LITERAL
                      (        forth.asm):02776         
F172 C8               (        forth.asm):02777         POSTPON fcb     $C8             ANSI (Core) Not a straight alias to [COMPILE]
F173 504F5354504F4E45 (        forth.asm):02778                 fcc     'POSTPONE'      ( "<spaces>name" -- )
F17B F167             (        forth.asm):02779                 fdb     BKQUOT          Non-immediate words deserve special treatment
                      (        forth.asm):02780                 RFCS
F17D BDE87C           (        forth.asm):02781 (7)             jsr     BKIN2PT         Derive X from BLK, >IN
F180 BDE375           (        forth.asm):02782 (7)             jsr     SCNSTOK
F183 2605             (        forth.asm):02783 (3)             bne     @postp1
F185 C605             (        forth.asm):02784 (2)             ldb     #5              Missing word name
F187 BDE75E           (        forth.asm):02785 (7)             jsr     ERRHDLR         No return
F18A BDE4A5           (        forth.asm):02786 (7)     @postp1 jsr     SWDIC
F18D 2607             (        forth.asm):02787 (3)             bne     @postp2         Word found. Code address returned in Y
F18F 9E02             (        forth.asm):02788 (4)             ldx     TOKENSP
F191 C602             (        forth.asm):02789 (2)             ldb     #2              Undefined (X points to the offending word)
F193 BDE75E           (        forth.asm):02790 (7)             jsr     ERRHDLR         No return
F196 1F21             (        forth.asm):02791 (4)     @postp2 tfr     y,x             X has the actual execution token
F198 0D43             (        forth.asm):02792 (4)             tst     IMDFLG
F19A 2708             (        forth.asm):02793 (3)             beq     @postp4         Target word is not immediate
F19C BDE155           (        forth.asm):02794 (7)     @postp3 jsr     EMXASXT         Set as action component
F19F DC02             (        forth.asm):02795 (4)             ldd     TOKENSP         Updated by SWDIC if the word was found
F1A1 7EE164           (        forth.asm):02796 (3)             jmp     U2INFRD         Derive >IN from D
                      (        forth.asm):02797         * The word being considered is non-immediate. The equivalent input should be:
                      (        forth.asm):02798         * ['] <word> COMPILE, We have the XT for <word> in X.
F1A4 BDE56E           (        forth.asm):02799 (7)     @postp4 jsr     LITER
F1A7 8EF1B7           (        forth.asm):02800                 RFXT    ldx,#CMPCOMA+11 XT for COMPILE,
F1AA 20F0             (        forth.asm):02801 (3)             bra     @postp3
                      (        forth.asm):02802         
                      (        forth.asm):02803         * GNU Forth has this as non-immediate so I am going for it as well.
F1AC 48               (        forth.asm):02804         CMPCOMA fcb     $48             ANSI (Core Ext)
F1AD 434F4D50494C452C (        forth.asm):02805                 fcc     'COMPILE,'      ( XT -- )
F1B5 F172             (        forth.asm):02806                 fdb     POSTPON
                      (        forth.asm):02807                 RFCS
F1B7 BDE7F6           (        forth.asm):02808 (7)             jsr     NPOP            Execution token to X
F1BA 7EE155           (        forth.asm):02809 (3)             jmp     EMXASXT
                      (        forth.asm):02810         
                      (        forth.asm):02811         * As per the standard, : is not immediate. This allows for further interesting
                      (        forth.asm):02812         * developments, like tracing words execution...
F1BD 01               (        forth.asm):02813         COMPC   fcb     $1              ANSI (Core)
F1BE 3A               (        forth.asm):02814                 fcc     ':'             Comp: ( "<spaces>name" -- )
F1BF F1AC             (        forth.asm):02815                 fdb     CMPCOMA
                      (        forth.asm):02816                 RFCS
F1C1 0F34             (        forth.asm):02817 (5)             clr     ANCMPF
F1C3 CCFFFF           (        forth.asm):02818 (3)     COMPC1  ldd     #-1
F1C6 9725             (        forth.asm):02819 (3)             sta     USTATE+1
F1C8 1043             (        forth.asm):02820 (2)             comd                    0 to D
F1CA 9735             (        forth.asm):02821 (3)             sta     BALNCD
F1CC DD14             (        forth.asm):02822 (4)             std     JSRLAST
F1CE DD16             (        forth.asm):02823 (4)             std     FWDREF
F1D0 0D34             (        forth.asm):02824 (4)             tst     ANCMPF          Anonymous compilation?
F1D2 2603             (        forth.asm):02825 (3)             bne     @isanon
F1D4 7EE513           (        forth.asm):02826 (3)             jmp     LOCWRT
F1D7 9E08             (        forth.asm):02827 (4)     @isanon ldx     DICEND
F1D9 9F0C             (        forth.asm):02828 (4)             stx     BDICEND         Backup HERE
F1DB 9F12             (        forth.asm):02829 (4)             stx     RECADDR         Should RECURSE by used by a :NONAME definition
F1DD 39               (        forth.asm):02830 (4)             rts
                      (        forth.asm):02831         
F1DE 07               (        forth.asm):02832         NONAME  fcb     $7
F1DF 3A4E4F4E414D45   (        forth.asm):02833                 fcc     ':NONAME'
F1E6 F1BD             (        forth.asm):02834                 fdb     COMPC
                      (        forth.asm):02835                 RFCS
F1E8 8601             (        forth.asm):02836 (2)             lda     #1
F1EA 9734             (        forth.asm):02837 (3)             sta     ANCMPF          Set the anonymous compilation flag
F1EC 20D5             (        forth.asm):02838 (3)             bra     COMPC1
                      (        forth.asm):02839         
                      (        forth.asm):02840         * Tail call optimization notes:
                      (        forth.asm):02841         * 1: if JSRLAST is 0, emit an RTS, the end.
                      (        forth.asm):02842         * 2: if HERE - 3 == JSRLAST: replace JSR by a JMP.
                      (        forth.asm):02843         * 3: if FWDREF == HERE, emit an RTS.
                      (        forth.asm):02844         * The end means finalize with DEBUG code and an update of HERE (DICEND).
F1EE C1               (        forth.asm):02845         COMPR   fcb     $C1             ANSI (Core)
F1EF 3B               (        forth.asm):02846                 fcc     ';'
F1F0 F1DE             (        forth.asm):02847                 fdb     NONAME
                      (        forth.asm):02848                 RFCS
F1F2 BDE83D           (        forth.asm):02849 (7)             jsr     BALCHK          Check for unbalanced constructs
F1F5 0F25             (        forth.asm):02850 (5)             clr     USTATE+1        Back to interpretation mode
                      (        forth.asm):02851         * Do not restore LSTWAD if we came from :NONAME.
F1F7 9E0C             (        forth.asm):02852 (4)             ldx     BDICEND         X as HERE when : (LOCWRT) or :NONAME was called
F1F9 0D34             (        forth.asm):02853 (4)             tst     ANCMPF
F1FB 2604             (        forth.asm):02854 (3)             bne     @wasano
F1FD 9F06             (        forth.asm):02855 (4)             stx     LSTWAD          Update LAST
F1FF 2005             (        forth.asm):02856 (3)             bra     @cont
F201 0F34             (        forth.asm):02857 (5)     @wasano clr     ANCMPF
F203 BDE7E8           (        forth.asm):02858 (7)             jsr     NPUSH           Anonynous execution token to the data stack
F206 9E08             (        forth.asm):02859 (4)     @cont   ldx     DICEND          HERE to X
                      (        forth.asm):02860         * Optimization: replace the last JSR by a JMP, if possible.
F208 DC14             (        forth.asm):02861 (4)             ldd     JSRLAST
F20A 2713             (        forth.asm):02862 (3)             beq     @rtsreq         Case #1
F20C 311D             (        forth.asm):02863 (4+1)           leay    -3,x            Y has HERE - 3, D has JSRLAST
F20E 103702           (        forth.asm):02864 (4)             cmpr    d,y
F211 260C             (        forth.asm):02865 (3)             bne     @rtsreq
                      (        forth.asm):02866         * Tail call optimization applies (Case #2).
F213 867E             (        forth.asm):02867 (2)             lda     #JMPOPC
F215 A7A4             (        forth.asm):02868 (4+0)           sta     ,y
F217 109E16           (        forth.asm):02869 (5)             ldy     FWDREF
F21A 103712           (        forth.asm):02870 (4)             cmpr    x,y
F21D 2604             (        forth.asm):02871 (3)             bne     @finalz         Case #3
F21F 8639             (        forth.asm):02872 (2)     @rtsreq lda     #RTSOPC         RTS inherent
F221 A780             (        forth.asm):02873 (4+1)           sta     ,x+
F223                  (        forth.asm):02874         @finalz
                      (        forth.asm):02875                 IFNE    DEBUG
                      (        forth.asm):02876                 lda     #ILLOPC         Illegal opcode
                      (        forth.asm):02877                 sta     ,x+
                      (        forth.asm):02878                 ENDC                    DEBUG
F223 9F08             (        forth.asm):02879 (4)             stx     DICEND          Update HERE
                      (        forth.asm):02880                 IFNE    RELFEAT
                      (        forth.asm):02881                 RFXT    jsr,MONITOR+10  XT for MONITOR. All : words are candidates
                      (        forth.asm):02882         *                               for integrity check by ICHECK.
                      (        forth.asm):02883                 ENDC                    RELFEAT
F225 39               (        forth.asm):02884 (4)             rts
                      (        forth.asm):02885         
F226 C7               (        forth.asm):02886         RECURSE fcb     $C7             ANSI (Core)
F227 52454355525345   (        forth.asm):02887                 fcc     'RECURSE'       ( -- )
F22E F1EE             (        forth.asm):02888                 fdb     COMPR
                      (        forth.asm):02889                 RFCS
F230 9E12             (        forth.asm):02890 (4)             ldx     RECADDR         Set up by LOCWRT
F232 7EE155           (        forth.asm):02891 (3)             jmp     EMXASXT         Set as action component
                      (        forth.asm):02892         
F235 06               (        forth.asm):02893         MARKER  fcb     6               ANSI (Tools ext)
F236 4D41524B4552     (        forth.asm):02894                 fcc     'MARKER'
F23C F226             (        forth.asm):02895                 fdb     RECURSE
                      (        forth.asm):02896                 RFCS
F23E 109E08           (        forth.asm):02897 (5)             ldy     DICEND          HERE
F241 9E06             (        forth.asm):02898 (4)             ldx     LSTWAD          LAST
F243 3430             (        forth.asm):02899 (4+4)           pshs    y,x             Preserve essential dictionary pointers
F245 BDE513           (        forth.asm):02900 (7)             jsr     LOCWRT          No pre-req on input, does all the heavy lifting
                      (        forth.asm):02901         
                      (        forth.asm):02902         * From here on, all we need to do is to emit the code necessary to restore
                      (        forth.asm):02903         * DICEND (2,s) and LSTWAD (,s). Y has HERE, as of right now.
F248 AE62             (        forth.asm):02904 (5+1)           ldx     2,s             Saved HERE to X
F24A 868E             (        forth.asm):02905 (2)             lda     #LDXOPC
F24C BDE585           (        forth.asm):02906 (7)             jsr     VARCON2
F24F CC9F08           (        forth.asm):02907 (3)             ldd     #($9F*256)|(DICEND-VARSPC)
F252 EDA1             (        forth.asm):02908 (5+2)           std     ,y++            Compile stx DICEND (direct page)
                      (        forth.asm):02909         
F254 AEE4             (        forth.asm):02910 (5+0)           ldx     ,s              Saved LAST to X
F256 868E             (        forth.asm):02911 (2)             lda     #LDXOPC
F258 BDE585           (        forth.asm):02912 (7)             jsr     VARCON2
F25B CC9F06           (        forth.asm):02913 (3)             ldd     #($9F*256)|(LSTWAD-VARSPC)
F25E EDA1             (        forth.asm):02914 (5+2)           std     ,y++            Compile stx LSTWAD (direct page)
                      (        forth.asm):02915         
F260 8639             (        forth.asm):02916 (2)             lda     #RTSOPC
F262 A7A0             (        forth.asm):02917 (4+1)           sta     ,y+             Emit an RTS
F264 3264             (        forth.asm):02918 (4+1)           leas    4,s             Drop material previously on the system stack
F266 7EEBEE           (        forth.asm):02919 (3)             jmp     CREAT1          Finalize dictionary entry
                      (        forth.asm):02920         
F269 07               (        forth.asm):02921         EXCT    fcb     7               ANSI (Core)
F26A 45584543555445   (        forth.asm):02922                 fcc     'EXECUTE'       ( i*x xt -- j*x )
F271 F235             (        forth.asm):02923                 fdb     MARKER
                      (        forth.asm):02924                 RFCS
F273 BDE7F6           (        forth.asm):02925 (7)             jsr     NPOP            Although the standard does not specify that
F276 2702             (        forth.asm):02926 (3)             beq     @exct1          a NUL address should trigger an error, I do
F278 1F15             (        forth.asm):02927 (4)             tfr     x,pc            Branch to the XT
F27A C60D             (        forth.asm):02928 (2)     @exct1  ldb     #13             Illegal argument
F27C BDE75E           (        forth.asm):02929 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02930         
F27F 03               (        forth.asm):02931         BYE     fcb     3               ANSI (Programming tools)
F280 425945           (        forth.asm):02932                 fcc     'BYE'
F283 F269             (        forth.asm):02933                 fdb     EXCT
                      (        forth.asm):02934                 RFCS
                      (        forth.asm):02935                 IFNE    RTCFEAT
                      (        forth.asm):02936                 lda     #RTOREGB
                      (        forth.asm):02937                 jsr     RTREGRD         RTCB register to B
                      (        forth.asm):02938                 andb    #^RTBPIE        Disable periodic interrupt generation
                      (        forth.asm):02939                 jsr     RTREGWR
                      (        forth.asm):02940                 ldx     #40
                      (        forth.asm):02941                 jsr     MILLIS1         Wait for 40 milliseconds
                      (        forth.asm):02942                 orcc    #(FFLAG|IFLAG)  Disable maskable interrupts
                      (        forth.asm):02943                 ENDC                    RTCFEAT
F285 7EE037           (        forth.asm):02944 (3)             jmp     RSTHDL
                      (        forth.asm):02945         
F288 C6               (        forth.asm):02946         BKCHAR  fcb     $C6             ANSI (Core)
F289 5B434841525D     (        forth.asm):02947                 fcc     '[CHAR]'        Comp: ( "<spaces>name" -- )
F28F F27F             (        forth.asm):02948                 fdb     BYE             Exec: ( -- char )
                      (        forth.asm):02949                 RFCS
F291 8D0A             (        forth.asm):02950                 RFXT    bsr,CHAR+7      XT for CHAR
F293 7EEC2C           (        forth.asm):02951                 RFXT    jmp,LITERAL+10  XT for LITERAL
                      (        forth.asm):02952         
F296 04               (        forth.asm):02953         CHAR    fcb     4               ANSI (Core)
F297 43484152         (        forth.asm):02954                 fcc     'CHAR'          ( "<spaces>name" -- char )
F29B F288             (        forth.asm):02955                 fdb     BKCHAR
                      (        forth.asm):02956                 RFCS
F29D BDE87C           (        forth.asm):02957 (7)             jsr     BKIN2PT         Derive X from BLK, >IN
F2A0 BDE375           (        forth.asm):02958 (7)     @char1  jsr     SCNSTOK         X points to the beginning of the character
F2A3 2712             (        forth.asm):02959 (3)             beq     @chrerr
F2A5 E684             (        forth.asm):02960 (4+0)           ldb     ,x
F2A7 4F               (        forth.asm):02961 (1)             clra                    D has CHAR
F2A8 1F01             (        forth.asm):02962 (4)             tfr     d,x
F2AA BDE7E8           (        forth.asm):02963 (7)             jsr     NPUSH
F2AD 9E02             (        forth.asm):02964 (4)             ldx     TOKENSP         Set by SCNSTOK
F2AF BDE388           (        forth.asm):02965 (7)             jsr     SCNETOK
F2B2 1F10             (        forth.asm):02966 (4)             tfr     x,d             TOKENEP
F2B4 7EE164           (        forth.asm):02967 (3)             jmp     U2INFRD         Derive >IN from D
F2B7 C60D             (        forth.asm):02968 (2)     @chrerr ldb     #13             Illegal argument
F2B9 BDE75E           (        forth.asm):02969 (7)             jsr     ERRHDLR
                      (        forth.asm):02970         * No return.
                      (        forth.asm):02971         
                      (        forth.asm):02972         * Hairy code but working.
F2BC 04               (        forth.asm):02973         WORD    fcb     4               ANSI (Core)
F2BD 574F5244         (        forth.asm):02974                 fcc     'WORD'          ( char "<chars>ccc<char>" -- c-addr )
F2C1 F296             (        forth.asm):02975                 fdb     CHAR
                      (        forth.asm):02976                 RFCS
F2C3 BDE7F6           (        forth.asm):02977 (7)             jsr     NPOP
F2C6 1F16             (        forth.asm):02978 (4)             tfr     x,w             F has the delimiter ASCII code
F2C8 109E08           (        forth.asm):02979 (5)             ldy     DICEND          The counted string returned is stored at HERE
F2CB 3420             (        forth.asm):02980 (4+2)           pshs    y
F2CD 6FA0             (        forth.asm):02981 (6+1)           clr     ,y+             Initialize its length
F2CF BDE87C           (        forth.asm):02982 (7)             jsr     BKIN2PT         Derive X from BLK, >IN
F2D2 BDE3A0           (        forth.asm):02983 (7)             jsr     NXTCHAR         Current input char to A unless ZFLAG is set
F2D5 2722             (        forth.asm):02984 (3)             beq     @word3
F2D7 8120             (        forth.asm):02985 (2)             cmpa    #SP             BL
F2D9 2702             (        forth.asm):02986 (3)             beq     @word1          Skip initial blank if there is one
F2DB 301F             (        forth.asm):02987 (4+1)           leax    -1,x            Go back one char.
F2DD BDE3A0           (        forth.asm):02988 (7)     @word1  jsr     NXTCHAR
F2E0 2717             (        forth.asm):02989 (3)             beq     @word3          EOL reached, this is the end
F2E2 1037F8           (        forth.asm):02990 (4)             cmpr    f,a             Leading delimiter matched?
F2E5 27F6             (        forth.asm):02991 (3)             beq     @word1          Yes, skip it (it might be repeated)
                      (        forth.asm):02992         * Either there was no leading delimiter or we went past the leading repetitions.
F2E7 301F             (        forth.asm):02993 (4+1)           leax    -1,x            Go back one char.
F2E9 BDE3A0           (        forth.asm):02994 (7)     @word2  jsr     NXTCHAR         Acquire next character from the input stream
F2EC 270B             (        forth.asm):02995 (3)             beq     @word3          EOL reached
F2EE 1037F8           (        forth.asm):02996 (4)             cmpr    f,a             Trailing delimiter?
F2F1 2706             (        forth.asm):02997 (3)             beq     @word3
F2F3 A7A0             (        forth.asm):02998 (4+1)           sta     ,y+
F2F5 6CF4             (        forth.asm):02999 (6+3)           inc     [,s]            Increment string length
F2F7 20F0             (        forth.asm):03000 (3)             bra     @word2
F2F9 1F10             (        forth.asm):03001 (4)     @word3  tfr     x,d             Pointing one char after the delimiter or EOIS
F2FB BDE164           (        forth.asm):03002 (7)             jsr     U2INFRD         Derive >IN from D
F2FE 3510             (        forth.asm):03003 (4+2)           puls    x
F300 3610             (        forth.asm):03004                 UCNPUSH                 Push back HERE
F302 39               (        forth.asm):03005 (4)             rts
                      (        forth.asm):03006         
F303 81               (        forth.asm):03007         LPAR    fcb     $81             ANSI (Core). No longer 79-STANDARD compliant
F304 28               (        forth.asm):03008                 fcc     '('             Exec: ( "ccc<paren>" -- )
F305 F2BC             (        forth.asm):03009                 fdb     WORD
                      (        forth.asm):03010                 RFCS
F307 8E0029           (        forth.asm):03011 (3)             ldx     #')
F30A BDE7E8           (        forth.asm):03012 (7)             jsr     NPUSH
F30D 8DB4             (        forth.asm):03013                 RFXT    bsr,WORD+7
F30F 7EFC62           (        forth.asm):03014                 RFXT    jmp,DROP+7
                      (        forth.asm):03015         
F312 06               (        forth.asm):03016         SOURCE  fcb     6               ANSI (Core)
F313 534F55524345     (        forth.asm):03017                 fcc     'SOURCE'        ( -- c-addr u )
F319 F303             (        forth.asm):03018                 fdb     LPAR
                      (        forth.asm):03019                 RFCS
F31B 9E20             (        forth.asm):03020 (4)             ldx     BSBFADR
F31D BDE7E8           (        forth.asm):03021 (7)             jsr     NPUSH
F320 9E26             (        forth.asm):03022 (4)             ldx     ISLEN           Input stream length
F322 7EE7E8           (        forth.asm):03023 (3)             jmp     NPUSH
                      (        forth.asm):03024         
                      (        forth.asm):03025         * This is a straightforward implementation borrowed from GNU Forth 'see \':
                      (        forth.asm):03026         * : \
                      (        forth.asm):03027         *   BLK @
                      (        forth.asm):03028         *   IF     >IN @ C/L / 1+ C/L * >IN ! EXIT
                      (        forth.asm):03029         *   THEN
                      (        forth.asm):03030         *   SOURCE >IN ! DROP ; IMMEDIATE
                      (        forth.asm):03031         * However since C/L (number of columns per line) is 64 (a power of 2), things
                      (        forth.asm):03032         * can be coded in a more compact manner as: >IN @ 63 INVERT AND 64 + >IN !
F325 81               (        forth.asm):03033         BKSLSH  fcb     $81             ANSI (Block Ext)
F326 5C               (        forth.asm):03034                 fcb     $5C             \ ( -- )
F327 F312             (        forth.asm):03035                 fdb     SOURCE
                      (        forth.asm):03036                 RFCS
F329 DC2C             (        forth.asm):03037 (4)             ldd     UBLK            BLK @ to D
F32B 270B             (        forth.asm):03038 (3)             beq     @comser         We operate from block 0: the console
F32D DC2A             (        forth.asm):03039 (4)             ldd     UTOIN           >IN @
F32F C4C0             (        forth.asm):03040 (2)             andb    #^$3F           Point to the beginning of the line
F331 CB40             (        forth.asm):03041 (2)             addb    #$40            next line
F333 8900             (        forth.asm):03042 (2)             adca    #0              Propagate potential carry from LSB
F335 DD2A             (        forth.asm):03043 (4)             std     UTOIN           >IN !
F337 39               (        forth.asm):03044 (4)             rts                     EXIT
F338 8DE1             (        forth.asm):03045         @comser RFXT    bsr,SOURCE+9    XT for SOURCE
F33A BDE7F6           (        forth.asm):03046 (7)             jsr     NPOP
F33D 9F2A             (        forth.asm):03047 (4)             stx     UTOIN           >IN !
F33F 7EFC62           (        forth.asm):03048                 RFXT    jmp,DROP+7      XT for DROP
                      (        forth.asm):03049                 ENDC
                      (        forth.asm):03050         
F342 82               (        forth.asm):03051         PSTR    fcb     $82             ANSI (Core)
F343 2E22             (        forth.asm):03052                 fcc     '."'            Comp: ( "ccc<quote>" -- )
F345 F325             (        forth.asm):03053                 fdb     BKSLSH          Exec: ( -- )
                      (        forth.asm):03054                 RFCS
F347 8D12             (        forth.asm):03055                 RFXT    bsr,SQUOTE+5    XT for S"
F349 0D25             (        forth.asm):03056 (4)             tst     USTATE+1
F34B 2603             (        forth.asm):03057 (3)             bne     @pstcmp
F34D 7EF701           (        forth.asm):03058                 RFXT    jmp,TYPE+7      XT for TYPE
F350 8EF701           (        forth.asm):03059         @pstcmp RFXT    ldx,#TYPE+7     Emit TYPE as an XT
F353 7EE155           (        forth.asm):03060 (3)             jmp     EMXASXT
                      (        forth.asm):03061         
F356 82               (        forth.asm):03062         SQUOTE  fcb     $82             ANSI (Core)
F357 5322             (        forth.asm):03063                 fcc     'S"'            Comp: ( "ccc<quote>" -- )
F359 F342             (        forth.asm):03064                 fdb     PSTR            Exec: ( -- c-addr u )
                      (        forth.asm):03065                 RFCS
F35B 0D25             (        forth.asm):03066 (4)             tst     USTATE+1
F35D 260C             (        forth.asm):03067 (3)             bne     @sqcmp
F35F 8E0022           (        forth.asm):03068 (3)             ldx     #'"             We are interpreting
F362 BDE7E8           (        forth.asm):03069 (7)             jsr     NPUSH
F365 BDF2C3           (        forth.asm):03070                 RFXT    jsr,WORD+7      XT for WORD
F368 7EF71F           (        forth.asm):03071                 RFXT    jmp,COUNT+8     XT for COUNT
F36B 109E08           (        forth.asm):03072 (5)     @sqcmp  ldy     DICEND          We are compiling
F36E 867E             (        forth.asm):03073 (2)             lda     #JMPOPC         JMP extended
F370 A7A0             (        forth.asm):03074 (4+1)           sta     ,y+
F372 3420             (        forth.asm):03075 (4+2)           pshs    y
F374 3122             (        forth.asm):03076 (4+1)           leay    2,y             2 ALLOT
F376 109F08           (        forth.asm):03077 (5)             sty     DICEND
F379 8E0022           (        forth.asm):03078 (3)             ldx     #'"
F37C BDE7E8           (        forth.asm):03079 (7)             jsr     NPUSH
F37F BDF2C3           (        forth.asm):03080                 RFXT    jsr,WORD+7      XT for WORD
F382 BDE7F6           (        forth.asm):03081 (7)             jsr     NPOP
F385 4F               (        forth.asm):03082 (1)             clra
F386 E684             (        forth.asm):03083 (4+0)           ldb     ,x              C@
F388 3001             (        forth.asm):03084 (4+1)           leax    1,x             1+. Skip the byte count (X has HERE)
F38A 308B             (        forth.asm):03085 (4+2)           leax    d,x             Skip string length material
F38C 3520             (        forth.asm):03086 (4+2)           puls    y
F38E AFA4             (        forth.asm):03087 (5+0)           stx     ,y              Install jump address
F390 3122             (        forth.asm):03088 (4+1)           leay    2,y             Counted string base address to Y
F392 868E             (        forth.asm):03089 (2)             lda     #LDXOPC
F394 A780             (        forth.asm):03090 (4+1)           sta     ,x+
F396 10AF81           (        forth.asm):03091 (6+2)           sty     ,x++
F399 9F08             (        forth.asm):03092 (4)             stx     DICEND          Update HERE
F39B 8EE7E8           (        forth.asm):03093 (3)             ldx     #NPUSH
F39E BDE155           (        forth.asm):03094 (7)             jsr     EMXASXT
F3A1 8EF71F           (        forth.asm):03095                 RFXT    ldx,#COUNT+8    XT for COUNT
F3A4 7EE155           (        forth.asm):03096 (3)             jmp     EMXASXT
                      (        forth.asm):03097         
                      (        forth.asm):03098         * Transactional behaviour is guaranteed here. What this means is that the
                      (        forth.asm):03099         * operation will preserve the data stack contents, should insufficient
                      (        forth.asm):03100         * parameters be supplied. It is a very desirable feature (for debugging
                      (        forth.asm):03101         * purposes) which will be generalized to a number of other words. As an
                      (        forth.asm):03102         * aside, it also allows us to access the data stack as directly indexed
                      (        forth.asm):03103         * through the 6309 U register, resulting in better performance.
F3A7 02               (        forth.asm):03104         DPLUS   fcb     2               79-STANDARD (REQ241)
F3A8 442B             (        forth.asm):03105                 fcc     'D+'            ( d1 d2 -- d1+d2--signed )
F3AA F356             (        forth.asm):03106                 fdb     SQUOTE          In processor's terms U has ( L1 H1 L2 H2)
                      (        forth.asm):03107                 RFCS
F3AC BDE4A0           (        forth.asm):03108 (7)             jsr     MIN4PST         Make sure we have at least 4 cells stacked up
                      (        forth.asm):03109         * At this point sufficient stack depth has been assessed. Let's rock and roll!
F3AF EC46             (        forth.asm):03110 (5+1)           ldd     6,u             L1
F3B1 E342             (        forth.asm):03111 (5+1)           addd    2,u             L2
F3B3 ED46             (        forth.asm):03112 (5+1)           std     6,u             d1+d2 least significant cell
F3B5 EC44             (        forth.asm):03113 (5+1)           ldd     4,u             H1
F3B7 10A9C4           (        forth.asm):03114 (6+0)           adcd    ,u              H2 (add with carry bit)
F3BA ED44             (        forth.asm):03115 (5+1)           std     4,u             d1+d2 most significant cell
F3BC 3344             (        forth.asm):03116 (4+1)           leau    4,u             Drop 2 cells from the data stack
F3BE 39               (        forth.asm):03117 (4)             rts
                      (        forth.asm):03118         
F3BF 07               (        forth.asm):03119         DNEG    fcb     7               79-STANDARD (REQ245)
F3C0 444E4547415445   (        forth.asm):03120                 fcc     'DNEGATE'
F3C7 F3A7             (        forth.asm):03121                 fdb     DPLUS
                      (        forth.asm):03122                 RFCS
F3C9 BDE496           (        forth.asm):03123 (7)             jsr     MIN2PST         We need at least 2 cells stacked up
F3CC 10A642           (        forth.asm):03124 (6+1)           ldw     2,u             Least significant cell
F3CF 1053             (        forth.asm):03125 (2)             comw
F3D1 ECC4             (        forth.asm):03126 (5+0)           ldd     ,u              Most significant cell
F3D3 1043             (        forth.asm):03127 (2)             comd
F3D5 108B0001         (        forth.asm):03128 (4)             addw    #1
F3D9 10890000         (        forth.asm):03129 (4)             adcd    #0              Propagate carry flag
F3DD 10EDC4           (        forth.asm):03130 (8+0)           stq     ,u              Store the result back to the data stack
F3E0 39               (        forth.asm):03131 (4)             rts
                      (        forth.asm):03132         
F3E1 02               (        forth.asm):03133         DMINUS  fcb     2               79-STANDARD (double number extension)
F3E2 442D             (        forth.asm):03134                 fcc     'D-'            ( d1 d2 -- d1-d2--signed )
F3E4 F3BF             (        forth.asm):03135                 fdb     DNEG            In processor's terms U has ( L1 H1 L2 H2)
                      (        forth.asm):03136                 RFCS
F3E6 BDE4A0           (        forth.asm):03137 (7)             jsr     MIN4PST         Make sure we have at least 4 cells stacked up
F3E9 EC46             (        forth.asm):03138 (5+1)           ldd     6,u             L1
F3EB A342             (        forth.asm):03139 (5+1)           subd    2,u             L2
F3ED ED46             (        forth.asm):03140 (5+1)           std     6,u             d1-d2 least significant cell
F3EF EC44             (        forth.asm):03141 (5+1)           ldd     4,u             H1
F3F1 10A2C4           (        forth.asm):03142 (6+0)           sbcd    ,u              H2 (substract with borrow)
F3F4 ED44             (        forth.asm):03143 (5+1)           std     4,u             d1-d2 most significant cell
F3F6 3344             (        forth.asm):03144 (4+1)           leau    4,u
F3F8 39               (        forth.asm):03145 (4)             rts
                      (        forth.asm):03146         
F3F9 03               (        forth.asm):03147         DZEQ    fcb     3               79-STANDARD (double number extension)
F3FA 44303D           (        forth.asm):03148                 fcc     'D0='           ( d -- flag )
F3FD F3E1             (        forth.asm):03149                 fdb     DMINUS
                      (        forth.asm):03150                 RFCS
F3FF BDEEA2           (        forth.asm):03151                 RFXT    jsr,OR+5        XT for OR
F402 7EEF0E           (        forth.asm):03152                 RFXT    jmp,NULP+5      XT for 0=
                      (        forth.asm):03153         
                      (        forth.asm):03154         * GNU Forth has:
                      (        forth.asm):03155         * f = FLAG(d1.hi==d2.hi ? d1.lo<d2.lo : d1.hi<d2.hi);
                      (        forth.asm):03156         * Comparisons between high cells are signed, but they are unsigned between
                      (        forth.asm):03157         * the low cells.
F405 02               (        forth.asm):03158         DLESS   fcb     2               79-STANDARD (REQ244)
F406 443C             (        forth.asm):03159                 fcc     'D<'            ( d1 d2 -- flag )
F408 F3F9             (        forth.asm):03160                 fdb     DZEQ
                      (        forth.asm):03161                 RFCS
F40A BDE4A0           (        forth.asm):03162 (7)             jsr     MIN4PST
                      (        forth.asm):03163         * Data stack structure at this point:
                      (        forth.asm):03164         * ,u    d2.hi                   1 cell
                      (        forth.asm):03165         * 2,u   d2.lo                   1 cell
                      (        forth.asm):03166         * 4,u   d1.hi                   1 cell
                      (        forth.asm):03167         * 6,u   d1.lo                   1 cell
F40D 115F             (        forth.asm):03168 (2)             clrf                    A priori return value for FLAG
F40F ECC4             (        forth.asm):03169 (5+0)           ldd     ,u              D2.HI
F411 10A344           (        forth.asm):03170 (6+1)           cmpd    4,u             D1.HI
F414 2611             (        forth.asm):03171 (3)             bne     @term2
F416 EC42             (        forth.asm):03172 (5+1)           ldd     2,u             D2.LO
F418 10A346           (        forth.asm):03173 (6+1)           cmpd    6,u             D1.LO
F41B 2302             (        forth.asm):03174 (3)             bls     @done
F41D 115A             (        forth.asm):03175 (2)     @anstru decf                    #$FF to F
F41F 1FF9             (        forth.asm):03176 (4)     @done   tfr     f,b
F421 1D               (        forth.asm):03177 (1)             sex                     Sign extention B to D
F422 ED46             (        forth.asm):03178 (5+1)           std     6,u             FLAG returned as a cell
F424 3346             (        forth.asm):03179 (4+1)           leau    6,u             Drop three cells from the data stack
F426 39               (        forth.asm):03180 (4)             rts
F427 2FF6             (        forth.asm):03181 (3)     @term2  ble     @done
F429 20F2             (        forth.asm):03182 (3)             bra     @anstru
                      (        forth.asm):03183         
F42B 05               (        forth.asm):03184         TWOOVER fcb     5               ANSI (Core)
F42C 324F564552       (        forth.asm):03185                 fcc     '2OVER'         ( d1 d2 -- d1 d2 d1 )
F431 F405             (        forth.asm):03186                 fdb     DLESS
                      (        forth.asm):03187                 RFCS
F433 BDE4A0           (        forth.asm):03188 (7)             jsr     MIN4PST         At least four cells need to be stacked up
F436 10EC44           (        forth.asm):03189 (8+1)           ldq     4,u             D:W has MSC:LSC of D1
F439 1F61             (        forth.asm):03190 (4)             tfr     w,x
F43B BDE7E8           (        forth.asm):03191 (7)             jsr     NPUSH
F43E 1F01             (        forth.asm):03192 (4)             tfr     d,x
F440 7EE7E8           (        forth.asm):03193 (3)             jmp     NPUSH
                      (        forth.asm):03194         
F443 05               (        forth.asm):03195         TWOSWAP fcb     5               ANSI (Core)
F444 3253574150       (        forth.asm):03196                 fcc     '2SWAP'         ( d1 d2 -- d2 d1 )
F449 F42B             (        forth.asm):03197                 fdb     TWOOVER
                      (        forth.asm):03198                 RFCS
F44B BDE4A0           (        forth.asm):03199 (7)             jsr     MIN4PST         At least four cells must be stacked up
F44E AE44             (        forth.asm):03200 (5+1)           ldx     4,u             D1 most significant cell
F450 10AE46           (        forth.asm):03201 (6+1)           ldy     6,u             D1 least significant cell
F453 10ECC4           (        forth.asm):03202 (8+0)           ldq     ,u              D:W has MSC:LSC of D2
F456 10ED44           (        forth.asm):03203 (8+1)           stq     4,u
F459 AFC4             (        forth.asm):03204 (5+0)           stx     ,u
F45B 10AF42           (        forth.asm):03205 (6+1)           sty     2,u
F45E 39               (        forth.asm):03206 (4)             rts
                      (        forth.asm):03207         
F45F 05               (        forth.asm):03208         TWODROP fcb     5               ANSI (Core)
F460 3244524F50       (        forth.asm):03209                 fcc     '2DROP'         ( x1 x2 -- )
F465 F443             (        forth.asm):03210                 fdb     TWOSWAP
                      (        forth.asm):03211                 RFCS
F467 BDE496           (        forth.asm):03212 (7)             jsr     MIN2PST         At least two cells must be stacked up
F46A 3344             (        forth.asm):03213 (4+1)           leau    4,u
F46C 39               (        forth.asm):03214 (4)             rts
                      (        forth.asm):03215         
F46D 04               (        forth.asm):03216         TWODUP  fcb     4               ANSI (Core)
F46E 32445550         (        forth.asm):03217                 fcc     '2DUP'          ( double -- double double )
F472 F45F             (        forth.asm):03218                 fdb     TWODROP
                      (        forth.asm):03219                 RFCS
F474 BDE496           (        forth.asm):03220 (7)             jsr     MIN2PST         At least two cells need to be stacked up
F477 10ECC4           (        forth.asm):03221 (8+0)           ldq     ,u              D:W has MSC:LSC of DOUBLE
F47A 1F61             (        forth.asm):03222 (4)             tfr     w,x
F47C BDE7E8           (        forth.asm):03223 (7)             jsr     NPUSH
F47F 1F01             (        forth.asm):03224 (4)             tfr     d,x
F481 7EE7E8           (        forth.asm):03225 (3)             jmp     NPUSH
                      (        forth.asm):03226         
F484 02               (        forth.asm):03227         TWOSTOR fcb     2               ANSI (Core)
F485 3221             (        forth.asm):03228                 fcc     '2!'            ( x1 x2 a-addr -- )
F487 F46D             (        forth.asm):03229                 fdb     TWODUP
                      (        forth.asm):03230                 RFCS
F489 BDE49B           (        forth.asm):03231 (7)             jsr     MIN3PST         At least three cells need to be stacked up
F48C 10EC42           (        forth.asm):03232 (8+1)           ldq     2,u             DOUBLE to D:W
F48F 10EDD4           (        forth.asm):03233 (8+3)           stq     [,u]            Store DOUBLE to ADDR
F492 3346             (        forth.asm):03234 (4+1)           leau    6,u             Drop three cells from the user stack
F494 39               (        forth.asm):03235 (4)             rts
                      (        forth.asm):03236         
F495 02               (        forth.asm):03237         TWOFTCH fcb     2               ANSI (Core)
F496 3240             (        forth.asm):03238                 fcc     '2@'            ( a-addr -- x1 x2 )
F498 F484             (        forth.asm):03239                 fdb     TWOSTOR
                      (        forth.asm):03240                 RFCS
F49A BDE491           (        forth.asm):03241 (7)             jsr     MIN1PST         At least cell needs to be stacked up
F49D 10ECD4           (        forth.asm):03242 (8+3)           ldq     [,u]            D:W has MSC:LSC of DBLADDR @
F4A0 10A7C4           (        forth.asm):03243 (6+0)           stw     ,u              Least significant cell stacked in place
F4A3 1F01             (        forth.asm):03244 (4)             tfr     d,x             Most significant cell goes through standard push
F4A5 7EE7E8           (        forth.asm):03245 (3)             jmp     NPUSH
                      (        forth.asm):03246         
F4A8 07               (        forth.asm):03247         CONVERT fcb     7               79-STANDARD (REQ195)
F4A9 434F4E56455254   (        forth.asm):03248                 fcc     'CONVERT'       ( d1 addr1 -- d2 addr2 )
F4B0 F495             (        forth.asm):03249                 fdb     TWOFTCH
                      (        forth.asm):03250                 RFCS
F4B2 BDE49B           (        forth.asm):03251 (7)             jsr     MIN3PST         At least 3 cells need to be stacked up
F4B5 BDE3D2           (        forth.asm):03252 (7)             jsr     CKBASE          Check for supported BASE. No return if not
F4B8 AEC4             (        forth.asm):03253 (5+0)           ldx     ,u              ADDR1 to X
F4BA 3001             (        forth.asm):03254 (4+1)   @cvloop leax    1,x
F4BC BDE361           (        forth.asm):03255 (7)             jsr     ISERCHD         End of input stream reached?
F4BF 2761             (        forth.asm):03256 (3)             beq     @cvoor          Yes--game over
F4C1 E684             (        forth.asm):03257 (4+0)           ldb     ,x
                      (        forth.asm):03258         * B has the ASCII representation of something that may or may not be a valid
                      (        forth.asm):03259         * digit, expressed in BASE (alias (byte)UBASE+1). If it does, multiply D1 by
                      (        forth.asm):03260         * BASE and add that to D1 (aka D2 on exit). Then add DIGIT on the top of it.
F4C3 C030             (        forth.asm):03261 (2)             subb    #'0             Minimal ASCII value condition met?
F4C5 255B             (        forth.asm):03262 (3)             blo     @cvoor          No. Out of range. ,X cannot be a valid digit
F4C7 C10A             (        forth.asm):03263 (2)             cmpb    #10
F4C9 2510             (        forth.asm):03264 (3)             blo     @cvnolt         No letter in potential BASE
                      (        forth.asm):03265                 IFEQ    CSSNTVE
F4CB C111             (        forth.asm):03266 (2)             cmpb    #'A-'0
F4CD 2553             (        forth.asm):03267 (3)             blo     @cvoor          Greater than 9 but lower than A
F4CF C131             (        forth.asm):03268 (2)             cmpb    #'a-'0
F4D1 2506             (        forth.asm):03269 (3)             blo     @cvisuc         Upper case already
F4D3 C14A             (        forth.asm):03270 (2)             cmpb    #'z-'0
F4D5 224B             (        forth.asm):03271 (3)             bhi     @cvoor          Definitely out of range
F4D7 C020             (        forth.asm):03272 (2)             subb    #'a-'A          To upper case
                      (        forth.asm):03273                 ENDC                    CSSNTVE
F4D9 C007             (        forth.asm):03274 (2)     @cvisuc subb    #'A-':          A-Z to number
F4DB D123             (        forth.asm):03275 (3)     @cvnolt cmpb    UBASE+1         B has a digit. Make sure it's less than BASE
F4DD 2443             (        forth.asm):03276 (3)             bhs     @cvoor          Number under scrutiny is >= BASE
F4DF 3278             (        forth.asm):03277 (4+1)           leas    -8,s            Allocate scratch space
F4E1 4F               (        forth.asm):03278 (1)             clra
F4E2 3406             (        forth.asm):03279 (4+2)           pshs    d
                      (        forth.asm):03280         * System and user stack structures are as follows:
                      (        forth.asm):03281         * ,s    current digit (1 cell)
                      (        forth.asm):03282         * 2,s   D0*B (1 cell)
                      (        forth.asm):03283         * 4,s   D1*B (1 cell)
                      (        forth.asm):03284         * 6,s   D2*B (1 cell)
                      (        forth.asm):03285         * 8,s   D3*B (1 cell)
                      (        forth.asm):03286         * 2,u   D1H most significant cell
                      (        forth.asm):03287         * 4,u   D1L least significant cell
F4E4 1F37             (        forth.asm):03288 (4)             tfr     u,v             Backup U
F4E6 3346             (        forth.asm):03289 (4+1)           leau    6,u             Point one byte after D1LL
F4E8 3162             (        forth.asm):03290 (4+1)           leay    2,s             Point to D0*B
F4EA 118604           (        forth.asm):03291 (3)             lde     #4              Four products to go through
F4ED A6C2             (        forth.asm):03292 (4+1)   @cvmul  lda     ,-u
F4EF D623             (        forth.asm):03293 (3)             ldb     UBASE+1
F4F1 3D               (        forth.asm):03294 (10)            mul
F4F2 EDA1             (        forth.asm):03295 (5+2)           std     ,y++
F4F4 114A             (        forth.asm):03296 (2)             dece
F4F6 26F5             (        forth.asm):03297 (3)             bne     @cvmul
F4F8 1F73             (        forth.asm):03298 (4)             tfr     v,u             Restore U
F4FA A663             (        forth.asm):03299 (4+1)           lda     3,s
F4FC A745             (        forth.asm):03300 (4+1)           sta     5,u             D1LL
F4FE A662             (        forth.asm):03301 (4+1)           lda     2,s
F500 AB65             (        forth.asm):03302 (4+1)           adda    5,s
F502 A744             (        forth.asm):03303 (4+1)           sta     4,u             D1LH
F504 A664             (        forth.asm):03304 (4+1)           lda     4,s
F506 A967             (        forth.asm):03305 (4+1)           adca    7,s
F508 A743             (        forth.asm):03306 (4+1)           sta     3,u             D1HL
F50A A666             (        forth.asm):03307 (4+1)           lda     6,s
F50C A969             (        forth.asm):03308 (4+1)           adca    9,s
F50E A742             (        forth.asm):03309 (4+1)           sta     2,u             D1HH
F510 EC44             (        forth.asm):03310 (5+1)           ldd     4,u             D1L
F512 E3E4             (        forth.asm):03311 (5+0)           addd    ,s              DIGIT
F514 ED44             (        forth.asm):03312 (5+1)           std     4,u
F516 EC42             (        forth.asm):03313 (5+1)           ldd     2,u             D1H
F518 10890000         (        forth.asm):03314 (4)             adcd    #0              Potential carry from lower cell
F51C ED42             (        forth.asm):03315 (5+1)           std     2,u
F51E 326A             (        forth.asm):03316 (4+1)           leas    10,s            Release scratch space
F520 2098             (        forth.asm):03317 (3)             bra     @cvloop         Here we go again
F522 AFC4             (        forth.asm):03318 (5+0)   @cvoor  stx     ,u              Update ADDR2
F524 39               (        forth.asm):03319 (4)             rts
                      (        forth.asm):03320         
F525 02               (        forth.asm):03321         CVTE    fcb     2               ANSI (Core)
F526 233E             (        forth.asm):03322                 fcc     '#>'            ( xd -- c-addr u )
F528 F4A8             (        forth.asm):03323                 fdb     CONVERT
                      (        forth.asm):03324                 RFCS
F52A BDE7F6           (        forth.asm):03325 (7)             jsr     NPOP
F52D BDE7F6           (        forth.asm):03326 (7)             jsr     NPOP            Drop 2 cells from the data stack
F530 8E01E2           (        forth.asm):03327 (3)             ldx     #APADBUF
F533 3610             (        forth.asm):03328                 UCNPUSH
F535 BDE233           (        forth.asm):03329 (7)             jsr     SLEN
F538 1F61             (        forth.asm):03330 (4)             tfr     w,x
F53A 3610             (        forth.asm):03331                 UCNPUSH
F53C 39               (        forth.asm):03332 (4)             rts
                      (        forth.asm):03333         
F53D 04               (        forth.asm):03334         SIGN    fcb     4               ANSI (Core)
F53E 5349474E         (        forth.asm):03335                 fcc     'SIGN'          ( n -- )
F542 F525             (        forth.asm):03336                 fdb     CVTE
                      (        forth.asm):03337                 RFCS
F544 BDE7F6           (        forth.asm):03338 (7)             jsr     NPOP
F547 1F10             (        forth.asm):03339 (4)             tfr     x,d
F549 104D             (        forth.asm):03340 (2)             tstd
F54B 2C04             (        forth.asm):03341 (3)             bge     @sign1
F54D C62D             (        forth.asm):03342 (2)             ldb     #'-
F54F 2066             (        forth.asm):03343 (3)             bra     PREAPAD
F551 39               (        forth.asm):03344 (4)     @sign1  rts
                      (        forth.asm):03345         
F552 04               (        forth.asm):03346         HOLD    fcb     4               ANSI (Core)
F553 484F4C44         (        forth.asm):03347                 fcc     'HOLD'          ( char -- )
F557 F53D             (        forth.asm):03348                 fdb     SIGN
                      (        forth.asm):03349                 RFCS
F559 BDE7F6           (        forth.asm):03350 (7)             jsr     NPOP
F55C 1F10             (        forth.asm):03351 (4)             tfr     x,d
F55E 2057             (        forth.asm):03352 (3)             bra     PREAPAD         B is inserted at the beginning of APADBUF.
                      (        forth.asm):03353         
F560 02               (        forth.asm):03354         SHARPS  fcb     2               ANSI (Core)
F561 2353             (        forth.asm):03355                 fcc     '#S'            ( ud1 -- ud2 )
F563 F552             (        forth.asm):03356                 fdb     HOLD
                      (        forth.asm):03357                 RFCS
F565 8601             (        forth.asm):03358 (2)             lda     #1
F567 973E             (        forth.asm):03359 (3)             sta     CVTFCN          CVT function #1 is #S
F569 2006             (        forth.asm):03360 (3)             bra     CVT0
                      (        forth.asm):03361         
                      (        forth.asm):03362         * Unsigned double on the top of the data stack gets divided by BASE.
                      (        forth.asm):03363         * The division algorithm implemented here is the binary long division.
                      (        forth.asm):03364         * See https://en.wikipedia.org/wiki/Division_algorithm for more information.
                      (        forth.asm):03365         * Remainder (converted to a character) gets prepended to APAD.
F56B 01               (        forth.asm):03366         CVT     fcb     1               ANSI (Core)
F56C 23               (        forth.asm):03367                 fcc     '#'             ( ud1 -- ud2 )
F56D F560             (        forth.asm):03368                 fdb     SHARPS
                      (        forth.asm):03369                 RFCS
F56F 0F3E             (        forth.asm):03370 (5)             clr     CVTFCN          CVT function 0 is #
F571 BDE7F6           (        forth.asm):03371 (7)     CVT0    jsr     NPOP
F574 1F12             (        forth.asm):03372 (4)             tfr     x,y
F576 BDE7F6           (        forth.asm):03373 (7)             jsr     NPOP
                      (        forth.asm):03374         * Stack structure:
                      (        forth.asm):03375         * ,s    Remainder               16 bits
                      (        forth.asm):03376         * 2,s   Bitmask high            16 bits
                      (        forth.asm):03377         * 4,s   Bitmask low             16 bits
                      (        forth.asm):03378         * 6,s   Quotient high           16 bits
                      (        forth.asm):03379         * 8,s   Quotient low            16 bits
                      (        forth.asm):03380         * 10,s  Numerator high          16 bits
                      (        forth.asm):03381         * 12,s  Numerator low           16 bits
                      (        forth.asm):03382         * 14,s  Denominator             16 bits
                      (        forth.asm):03383         * 16,s  Remainder carry         8 bits
F579 32E8EF           (        forth.asm):03384 (4+1)   CVT1    leas    -17,s
F57C DC22             (        forth.asm):03385 (4)             ldd     UBASE
F57E ED6E             (        forth.asm):03386 (5+1)           std     14,s            Denominator
F580 AF6C             (        forth.asm):03387 (5+1)           stx     12,s            Numerator least significant cell
F582 10AF6A           (        forth.asm):03388 (6+1)           sty     10,s            Numerator most significant cell
F585 8D43             (        forth.asm):03389 (6)             bsr     DBDIVSG
                      (        forth.asm):03390         * Convert the remainder to a digit expressed in BASE.
F587 E661             (        forth.asm):03391 (4+1)           ldb     1,s
F589 8630             (        forth.asm):03392 (2)             lda     #'0
F58B C10A             (        forth.asm):03393 (2)             cmpb    #10             B has the digit we want converted to BASE
F58D 2502             (        forth.asm):03394 (3)             bcs     @cvtdgt
F58F 8637             (        forth.asm):03395 (2)             lda     #'A-10
F591 103089           (        forth.asm):03396 (4)     @cvtdgt addr    a,b
F594 8D21             (        forth.asm):03397 (6)             bsr     PREAPAD         Prepend B to the string currently in PAD
F596 0D3E             (        forth.asm):03398 (4)             tst     CVTFCN
F598 2711             (        forth.asm):03399 (3)             beq     @cvtend         Function 0 is straight #, i.e. we're done here
                      (        forth.asm):03400         * Function 1 is #S, we iterate unless the quotient is 0.
F59A EC68             (        forth.asm):03401 (5+1)           ldd     8,s
F59C 10AA66           (        forth.asm):03402 (6+1)           ord     6,s
F59F 270A             (        forth.asm):03403 (3)             beq     @cvtend
F5A1 AE68             (        forth.asm):03404 (5+1)           ldx     8,s             New numerator low
F5A3 10AE66           (        forth.asm):03405 (6+1)           ldy     6,s             New numerator high
F5A6 32E811           (        forth.asm):03406 (4+1)           leas    17,s            Discard the stack frame
F5A9 20CE             (        forth.asm):03407 (3)             bra     CVT1            And go at it again
                      (        forth.asm):03408         * Push back the quotient on the data stack (low then high cell).
F5AB AE68             (        forth.asm):03409 (5+1)   @cvtend ldx     8,s
F5AD 3610             (        forth.asm):03410                 UCNPUSH
F5AF AE66             (        forth.asm):03411 (5+1)           ldx     6,s
F5B1 3610             (        forth.asm):03412                 UCNPUSH
F5B3 32E811           (        forth.asm):03413 (4+1)           leas    17,s            Discard the stack frame
F5B6 39               (        forth.asm):03414 (4)             rts
                      (        forth.asm):03415         
                      (        forth.asm):03416         * Insert the character in B in front of the string at APADBUF.
F5B7 8E01E2           (        forth.asm):03417 (3)     PREAPAD ldx     #APADBUF
F5BA BDE233           (        forth.asm):03418 (7)             jsr     SLEN
F5BD 103061           (        forth.asm):03419 (4)             addr    w,x             X points to the PAD string's NUL terminator
F5C0 105C             (        forth.asm):03420 (2)             incw                    Include the terminator
F5C2 3101             (        forth.asm):03421 (4+1)           leay    1,x
F5C4 113912           (        forth.asm):03422 (6+?)           tfm     x-,y-
F5C7 D7E2             (        forth.asm):03423 (3)             stb     APADBUF
F5C9 39               (        forth.asm):03424 (4)             rts
                      (        forth.asm):03425         
                      (        forth.asm):03426         * Double (numerator high/low) gets divided by a single cell number. Please note
                      (        forth.asm):03427         * that this is a strictly unsigned business. Input parameters are supposed to
                      (        forth.asm):03428         * have been set up by the caller on the system stack. The quotient (high/low)
                      (        forth.asm):03429         * and remainder are returned the same way. Current users of this routine are
                      (        forth.asm):03430         * CVT (#) and UMSLMOD (UM/MOD).
                      (        forth.asm):03431         *
                      (        forth.asm):03432         * Stack structure:
                      (        forth.asm):03433         * ,s    Return address          16 bits
                      (        forth.asm):03434         * 2,s   Remainder               16 bits
                      (        forth.asm):03435         * 4,s   Bitmask high            16 bits
                      (        forth.asm):03436         * 6,s   Bitmask low             16 bits
                      (        forth.asm):03437         * 8,s   Quotient high           16 bits
                      (        forth.asm):03438         * 10,s  Quotient low            16 bits
                      (        forth.asm):03439         * 12,s  Numerator high          16 bits
                      (        forth.asm):03440         * 14,s  Numerator low           16 bits
                      (        forth.asm):03441         * 16,s  Denominator             16 bits
                      (        forth.asm):03442         * 18,s  Remainder carry         8 bits
                      (        forth.asm):03443         *
F5CA CC8000           (        forth.asm):03444 (3)     DBDIVSG ldd     #$8000
F5CD ED64             (        forth.asm):03445 (5+1)           std     4,s             Bitmask high
F5CF 4F               (        forth.asm):03446 (1)             clra
F5D0 ED66             (        forth.asm):03447 (5+1)           std     6,s             Bitmask low
F5D2 ED68             (        forth.asm):03448 (5+1)           std     8,s             Quotient high
F5D4 ED6A             (        forth.asm):03449 (5+1)           std     10,s            Quotient low
F5D6 ED62             (        forth.asm):03450 (5+1)           std     2,s             Remainder
F5D8 11C61F           (        forth.asm):03451 (3)             ldf     #31             32 bits to go
F5DB 6863             (        forth.asm):03452 (6+1)   @cvbeg  lsl     3,s
F5DD 6962             (        forth.asm):03453 (6+1)           rol     2,s             R := R << 1
F5DF 1FA8             (        forth.asm):03454 (4)             tfr     cc,a
F5E1 8401             (        forth.asm):03455 (2)             anda    #CFLAG
F5E3 A7E812           (        forth.asm):03456 (4+1)           sta     18,s            Save CFLAG after left shift of the remainder
                      (        forth.asm):03457         * We need to extract bit <f> (i) of the numerator. Since (i) varies from 31
                      (        forth.asm):03458         * downto 0, all we need to do is to shift left a 32 bit quantity and isolate
                      (        forth.asm):03459         * the carry flag as the bit of interest.
F5E6 EC6E             (        forth.asm):03460 (5+1)           ldd     14,s            Numerator low
F5E8 1048             (        forth.asm):03461 (2)             lsld
F5EA ED6E             (        forth.asm):03462 (5+1)           std     14,s
F5EC EC6C             (        forth.asm):03463 (5+1)           ldd     12,s            Numerator high
F5EE 1049             (        forth.asm):03464 (2)             rold
F5F0 ED6C             (        forth.asm):03465 (5+1)           std     12,s
F5F2 1FA8             (        forth.asm):03466 (4)             tfr     cc,a
F5F4 8401             (        forth.asm):03467 (2)             anda    #CFLAG          CFLAG is 1, which is ideal here
F5F6 AA63             (        forth.asm):03468 (4+1)           ora     3,s             R(0) := N(i)
F5F8 A763             (        forth.asm):03469 (4+1)           sta     3,s             Update the remainder
F5FA 1F89             (        forth.asm):03470 (4)             tfr     a,b             Remainder LSB
F5FC A662             (        forth.asm):03471 (4+1)           lda     2,s             Remainder MSB
F5FE 6DE812           (        forth.asm):03472 (5+1)           tst     18,s
F601 2606             (        forth.asm):03473 (3)             bne     @frcsub         Carry was set on left shift of the remainder
F603 10A3E810         (        forth.asm):03474 (6+1)           cmpd    16,s            Denominator
F607 2513             (        forth.asm):03475 (3)             blo     @cvshft
F609 A3E810           (        forth.asm):03476 (5+1)   @frcsub subd    16,s
F60C ED62             (        forth.asm):03477 (5+1)           std     2,s             R := R - D
                      (        forth.asm):03478         * Q(i) := 1 (use the bitmask).
F60E EC68             (        forth.asm):03479 (5+1)           ldd     8,s             Quotient high
F610 10AA64           (        forth.asm):03480 (6+1)           ord     4,s             Bitmask high
F613 ED68             (        forth.asm):03481 (5+1)           std     8,s
F615 EC6A             (        forth.asm):03482 (5+1)           ldd     10,s            Quotient low
F617 10AA66           (        forth.asm):03483 (6+1)           ord     6,s             Bitmask low
F61A ED6A             (        forth.asm):03484 (5+1)           std     10,s
                      (        forth.asm):03485         * Shift the bitmask 1 bit right.
F61C EC64             (        forth.asm):03486 (5+1)   @cvshft ldd     4,s
F61E 1044             (        forth.asm):03487 (2)             lsrd
F620 ED64             (        forth.asm):03488 (5+1)           std     4,s
F622 EC66             (        forth.asm):03489 (5+1)           ldd     6,s
F624 1046             (        forth.asm):03490 (2)             rord
F626 ED66             (        forth.asm):03491 (5+1)           std     6,s
F628 115A             (        forth.asm):03492 (2)             decf
F62A 2CAF             (        forth.asm):03493 (3)             bge     @cvbeg
F62C 39               (        forth.asm):03494 (4)             rts
                      (        forth.asm):03495         
F62D 02               (        forth.asm):03496         CVTB    fcb     2               ANSI (Core)
F62E 3C23             (        forth.asm):03497                 fcc     '<#'            ( -- )
F630 F56B             (        forth.asm):03498                 fdb     CVT
                      (        forth.asm):03499                 RFCS
F632 BDE3D2           (        forth.asm):03500 (7)             jsr     CKBASE          Sanity check. BASE can be altered at any time
F635 0FE2             (        forth.asm):03501 (5)             clr     APADBUF
F637 39               (        forth.asm):03502 (4)             rts
                      (        forth.asm):03503         
F638 01               (        forth.asm):03504         DOT     fcb     1               ANSI (Core)
F639 2E               (        forth.asm):03505                 fcc     '.'             ( n -- )
F63A F62D             (        forth.asm):03506                 fdb     CVTB
                      (        forth.asm):03507                 RFCS
F63C 8601             (        forth.asm):03508 (2)             lda     #1
F63E 9741             (        forth.asm):03509 (3)             sta     CVISSGN         Force a signed number conversion
F640 BDE7F6           (        forth.asm):03510 (7)     PTOP0   jsr     NPOP            N to X
F643 BDE43D           (        forth.asm):03511 (7)             jsr     CVNSTR
F646 8E044A           (        forth.asm):03512 (3)             ldx     #TBUFF
F649 8620             (        forth.asm):03513 (2)             lda     #SP
F64B A180             (        forth.asm):03514 (4+1)   @ptop1  cmpa    ,x+             Skip leading spaces
F64D 27FC             (        forth.asm):03515 (3)             beq     @ptop1
F64F 301F             (        forth.asm):03516 (4+1)           leax    -1,x            Point to actual string start address
F651 BDE2E0           (        forth.asm):03517 (7)             jsr     PUTS
F654 7EE2CD           (        forth.asm):03518 (3)             jmp     PUTCH           Extra space after printing a number
                      (        forth.asm):03519         
F657 02               (        forth.asm):03520         UDOT    fcb     2               ANSI (Core)
F658 552E             (        forth.asm):03521                 fcc     'U.'            ( u -- )
F65A F638             (        forth.asm):03522                 fdb     DOT
                      (        forth.asm):03523                 RFCS
F65C 0F41             (        forth.asm):03524 (5)             clr     CVISSGN         Conversion is unsigned
F65E 20E0             (        forth.asm):03525 (3)             bra     PTOP0
                      (        forth.asm):03526         
F660 02               (        forth.asm):03527         DOTR    fcb     2               79-STANDARD (REF)
F661 2E52             (        forth.asm):03528                 fcc     '.R'
F663 F657             (        forth.asm):03529                 fdb     UDOT
                      (        forth.asm):03530                 RFCS
F665 8601             (        forth.asm):03531 (2)             lda     #1
F667 9741             (        forth.asm):03532 (3)             sta     CVISSGN
F669 BDE7F6           (        forth.asm):03533 (7)     DOTR0   jsr     NPOP
F66C 3410             (        forth.asm):03534 (4+2)           pshs    x               Length parameter value
F66E BDE7F6           (        forth.asm):03535 (7)             jsr     NPOP
F671 BDE43D           (        forth.asm):03536 (7)             jsr     CVNSTR
F674 8E044A           (        forth.asm):03537 (3)             ldx     #TBUFF
F677 8620             (        forth.asm):03538 (2)             lda     #SP
F679 A180             (        forth.asm):03539 (4+1)   @dotr1  cmpa    ,x+
F67B 27FC             (        forth.asm):03540 (3)             beq     @dotr1          Skip leading spaces
F67D 301F             (        forth.asm):03541 (4+1)           leax    -1,x
F67F BDE233           (        forth.asm):03542 (7)             jsr     SLEN            String length is returned in W
F682 3506             (        forth.asm):03543 (4+2)           puls    d
F684 1E06             (        forth.asm):03544 (5)             exg     d,w
F686 103206           (        forth.asm):03545 (4)             subr    d,w
F689 2F0D             (        forth.asm):03546 (3)             ble     @dotr3
F68B 8620             (        forth.asm):03547 (2)             lda     #SP
F68D 105D             (        forth.asm):03548 (2)     @dotr2  tstw
F68F 2707             (        forth.asm):03549 (3)             beq     @dotr3
F691 BDE2CD           (        forth.asm):03550 (7)             jsr     PUTCH
F694 105A             (        forth.asm):03551 (2)             decw
F696 20F5             (        forth.asm):03552 (3)             bra     @dotr2
F698 7EE2E0           (        forth.asm):03553 (3)     @dotr3  jmp     PUTS
                      (        forth.asm):03554         
F69B 03               (        forth.asm):03555         UDOTR   fcb     3               79-STANDARD (REF216)
F69C 552E52           (        forth.asm):03556                 fcc     'U.R'
F69F F660             (        forth.asm):03557                 fdb     DOTR
                      (        forth.asm):03558                 RFCS
F6A1 0F41             (        forth.asm):03559 (5)             clr     CVISSGN
F6A3 20C4             (        forth.asm):03560 (3)             bra     DOTR0
                      (        forth.asm):03561         
F6A5 02               (        forth.asm):03562         BL      fcb     2               ANSI (Core)
F6A6 424C             (        forth.asm):03563                 fcc     'BL'            ( -- char )
F6A8 F69B             (        forth.asm):03564                 fdb     UDOTR
                      (        forth.asm):03565                 RFCS
F6AA 8E0020           (        forth.asm):03566 (3)             ldx     #SP
F6AD 7EE7E8           (        forth.asm):03567 (3)             jmp     NPUSH
                      (        forth.asm):03568         
F6B0 05               (        forth.asm):03569         SPACE   fcb     5               ANSI (Core)
F6B1 5350414345       (        forth.asm):03570                 fcc     'SPACE'         ( -- )
F6B6 F6A5             (        forth.asm):03571                 fdb     BL
                      (        forth.asm):03572                 RFCS
F6B8 8620             (        forth.asm):03573 (2)             lda     #SP
F6BA 7EE2CD           (        forth.asm):03574 (3)             jmp     PUTCH
                      (        forth.asm):03575         
F6BD 06               (        forth.asm):03576         SPACES  fcb     6               ANSI (Core)
F6BE 535041434553     (        forth.asm):03577                 fcc     'SPACES'        ( n -- )
F6C4 F6B0             (        forth.asm):03578                 fdb     SPACE
                      (        forth.asm):03579                 RFCS
F6C6 BDE7F6           (        forth.asm):03580 (7)             jsr     NPOP
F6C9 8620             (        forth.asm):03581 (2)             lda     #SP
F6CB 1F16             (        forth.asm):03582 (4)             tfr     x,w
F6CD 105D             (        forth.asm):03583 (2)             tstw
F6CF 2601             (        forth.asm):03584 (3)     @loop   bne     @cont
F6D1 39               (        forth.asm):03585 (4)             rts
F6D2 BDE2CD           (        forth.asm):03586 (7)     @cont   jsr     PUTCH
F6D5 105A             (        forth.asm):03587 (2)             decw
F6D7 20F6             (        forth.asm):03588 (3)             bra     @loop
                      (        forth.asm):03589         
F6D9 04               (        forth.asm):03590         PAGE    fcb     4               79-STANDARD (REF)
F6DA 50414745         (        forth.asm):03591                 fcc     'PAGE'
F6DE F6BD             (        forth.asm):03592                 fdb     SPACES
                      (        forth.asm):03593                 RFCS
F6E0 8EFE0F           (        forth.asm):03594 (3)             ldx     #CSVT100
F6E3 7EE2E0           (        forth.asm):03595 (3)             jmp     PUTS
                      (        forth.asm):03596         
F6E6 02               (        forth.asm):03597         CRLF    fcb     2               ANSI (Core)
F6E7 4352             (        forth.asm):03598                 fcc     'CR'            ( -- )
F6E9 F6D9             (        forth.asm):03599                 fdb     PAGE
                      (        forth.asm):03600                 RFCS
F6EB 7EE2ED           (        forth.asm):03601 (3)             jmp     PUTCR
                      (        forth.asm):03602         
F6EE 03               (        forth.asm):03603         PAD     fcb     3               79-STANDARD (REQ226)
F6EF 504144           (        forth.asm):03604                 fcc     'PAD'
F6F2 F6E6             (        forth.asm):03605                 fdb     CRLF
                      (        forth.asm):03606                 RFCS
F6F4 8E018E           (        forth.asm):03607 (3)             ldx     #PADBUF
F6F7 7EE7E8           (        forth.asm):03608 (3)             jmp     NPUSH
                      (        forth.asm):03609         
F6FA 04               (        forth.asm):03610         TYPE    fcb     4               79-STANDARD (REQ222)
F6FB 54595045         (        forth.asm):03611                 fcc     'TYPE'          ( c-addr u -- )
F6FF F6EE             (        forth.asm):03612                 fdb     PAD
                      (        forth.asm):03613                 RFCS
F701 BDE7F6           (        forth.asm):03614 (7)             jsr     NPOP            Character count (signed)
F704 1F16             (        forth.asm):03615 (4)             tfr     x,w
F706 BDE7F6           (        forth.asm):03616 (7)             jsr     NPOP            Buffer address
F709 105D             (        forth.asm):03617 (2)             tstw                    
F70B 2601             (        forth.asm):03618 (3)     @loop   bne     @cont
F70D 39               (        forth.asm):03619 (4)             rts
F70E A680             (        forth.asm):03620 (4+1)   @cont   lda     ,x+
F710 BDE2CD           (        forth.asm):03621 (7)             jsr     PUTCH
F713 105A             (        forth.asm):03622 (2)             decw
F715 20F4             (        forth.asm):03623 (3)             bra     @loop
                      (        forth.asm):03624         
F717 05               (        forth.asm):03625         COUNT   fcb     5               ANSI (Core)
F718 434F554E54       (        forth.asm):03626                 fcc     'COUNT'         ( c-addr1 -- c-addr2 u )
F71D F6FA             (        forth.asm):03627                 fdb     TYPE
                      (        forth.asm):03628                 RFCS
F71F BDE7F6           (        forth.asm):03629 (7)             jsr     NPOP            C-ADDR1 to X
F722 E680             (        forth.asm):03630 (4+1)           ldb     ,x+             B has LSB(U) and X has C-ADDR2
F724 3610             (        forth.asm):03631                 UCNPUSH                 C-ADDR2 to the data stack (B is preserved)
F726 4F               (        forth.asm):03632 (1)             clra
F727 1F01             (        forth.asm):03633 (4)             tfr     d,x
F729 7EE7E8           (        forth.asm):03634 (3)             jmp     NPUSH           U to the data stack
                      (        forth.asm):03635         
F72C 09               (        forth.asm):03636         DASHTR  fcb     9               79-STANDARD (REQ148)
F72D 2D545241494C494E (        forth.asm):03637                 fcc     '-TRAILING'     ( addr n1 -- addr n2 )
     47
F736 F717             (        forth.asm):03638                 fdb     COUNT
                      (        forth.asm):03639                 RFCS
F738 BDE7F6           (        forth.asm):03640 (7)             jsr     NPOP            N1 to X
F73B 1F10             (        forth.asm):03641 (4)             tfr     x,d             N1 to D
F73D BDE7F6           (        forth.asm):03642 (7)             jsr     NPOP            ADDR to X
F740 1F12             (        forth.asm):03643 (4)             tfr     x,y             Backup to I
F742 104D             (        forth.asm):03644 (2)             tstd                    Input character count (N1)
F744 2D1B             (        forth.asm):03645 (3)             blt     @invpar         Cannot be < 0
F746 308B             (        forth.asm):03646 (4+2)           leax    d,x             X has ADDR+N1
F748 1F06             (        forth.asm):03647 (4)             tfr     d,w             W has N1
F74A 105D             (        forth.asm):03648 (2)     @cknxtb tstw
F74C 270A             (        forth.asm):03649 (3)             beq     @ckdone
F74E A682             (        forth.asm):03650 (4+1)           lda     ,-x
F750 105A             (        forth.asm):03651 (2)             decw
F752 8120             (        forth.asm):03652 (2)             cmpa    #SP
F754 27F4             (        forth.asm):03653 (3)             beq     @cknxtb         Iterate over to the previous byte
F756 105C             (        forth.asm):03654 (2)             incw
F758 1F21             (        forth.asm):03655 (4)     @ckdone tfr     y,x
F75A 3610             (        forth.asm):03656                 UCNPUSH                 String base address
F75C 1F61             (        forth.asm):03657 (4)             tfr     w,x
F75E 3610             (        forth.asm):03658                 UCNPUSH                 Updated character count
F760 39               (        forth.asm):03659 (4)             rts
F761 C60D             (        forth.asm):03660 (2)     @invpar ldb     #13             Invalid parameter
F763 BDE75E           (        forth.asm):03661 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):03662         
F766 06               (        forth.asm):03663         ACCEPT  fcb     6               ANSI (Core)
F767 414343455054     (        forth.asm):03664                 fcc     'ACCEPT'        ( c-addr +n1 -- +n2 )
F76D F72C             (        forth.asm):03665                 fdb     DASHTR
                      (        forth.asm):03666                 RFCS
F76F BDE7F6           (        forth.asm):03667 (7)             jsr     NPOP
F772 1F10             (        forth.asm):03668 (4)             tfr     x,d             Buffer length to B
F774 BDE7F6           (        forth.asm):03669 (7)             jsr     NPOP            Buffer address to X. B is preserved
F777 BDE303           (        forth.asm):03670 (7)             jsr     GETS            Input character count is returned via B
F77A 4F               (        forth.asm):03671 (1)             clra
F77B 3606             (        forth.asm):03672 (4+2)           pshu    d               This saves us "tfr d,x" and "UCNPUSH"
F77D 39               (        forth.asm):03673 (4)             rts
                      (        forth.asm):03674         
F77E 49               (        forth.asm):03675         TERPRET fcb     $49             79-STANDARD (REF) I make this compile time only
F77F 494E544552505245 (        forth.asm):03676                 fcc     'INTERPRET'     ( -- )
     54
F788 F766             (        forth.asm):03677                 fdb     ACCEPT
                      (        forth.asm):03678                 RFCS
                      (        forth.asm):03679         * Obtain a base buffer address based on the value of BLK.
F78A 9E2C             (        forth.asm):03680 (4)             ldx     UBLK
F78C 260B             (        forth.asm):03681 (3)             bne     @isblk
                      (        forth.asm):03682         * A Zero BLK value indicates the console OR a counted string set up by EVALUATE.
F78E 8E0376           (        forth.asm):03683 (3)             ldx     #CMDBUF         Base buffer address for serial line input
F791 0D49             (        forth.asm):03684 (4)             tst     SRCID           Counted string?
F793 2710             (        forth.asm):03685 (3)             beq     @rsolvd         No. Back to the serial console
F795 9E20             (        forth.asm):03686 (4)             ldx     BSBFADR         BSBFADR and ISELEN have been set up previously
F797 200C             (        forth.asm):03687 (3)             bra     @rsolvd
                      (        forth.asm):03688         * BLK is NZ, map the block in memory.
F799 BDE7E8           (        forth.asm):03689 (7)     @isblk  jsr     NPUSH           X has the target block number
F79C BDEAA8           (        forth.asm):03690                 RFXT    jsr,BLOCK+8     XT for BLOCK. Map the block in
F79F 3710             (        forth.asm):03691                 UCNPOP                  Retrieve buffer address (to X)
                      (        forth.asm):03692         * The physical address of the current block might have changed. This should be
                      (        forth.asm):03693         * reflected by clearing ISEADDR.
F7A1 104F             (        forth.asm):03694 (2)             clrd
F7A3 DD28             (        forth.asm):03695 (4)             std     ISEADDR
F7A5 9F20             (        forth.asm):03696 (4)     @rsolvd stx     BSBFADR
                      (        forth.asm):03697         * Note: >IN is supposed to have been set by the caller!
F7A7 DC2A             (        forth.asm):03698 (4)             ldd     UTOIN
F7A9 103001           (        forth.asm):03699 (4)             addr    d,x
F7AC 7EE0CE           (        forth.asm):03700 (3)             jmp     _INTERP         Finally invoke _INTERP.
                      (        forth.asm):03701         
F7AF 04               (        forth.asm):03702         LOAD    fcb     4               ANSI (Block)
F7B0 4C4F4144         (        forth.asm):03703                 fcc     'LOAD'          ( i*x u -- j*x )
F7B4 F77E             (        forth.asm):03704                 fdb     TERPRET
                      (        forth.asm):03705                 RFCS
F7B6 BDE7F6           (        forth.asm):03706 (7)             jsr     NPOP            ZFLAG is set by NPOP
F7B9 2601             (        forth.asm):03707 (3)             bne     LOAD1
F7BB 39               (        forth.asm):03708 (4)             rts                     Block 0 is _not_ loadable
F7BC BDE847           (        forth.asm):03709 (7)     LOAD1   jsr     SAVINP          Save input parameters. X is preserved
F7BF 9F2C             (        forth.asm):03710 (4)             stx     UBLK            Update BLK with the LOAD argument
F7C1 CC0400           (        forth.asm):03711 (3)             ldd     #BLKSIZ         1024 bytes
F7C4 DD26             (        forth.asm):03712 (4)             std     ISLEN           Set input stream length
F7C6 104F             (        forth.asm):03713 (2)             clrd
F7C8 9749             (        forth.asm):03714 (3)             sta     SRCID           Not invoked in EVALUATE context
F7CA DD2A             (        forth.asm):03715 (4)     LOAD2   std     UTOIN           Clear >IN
F7CC DD28             (        forth.asm):03716 (4)             std     ISEADDR         End of input stream address (included)
                      (        forth.asm):03717         * Map the new BLK in, interpret code from there.
F7CE 8DBA             (        forth.asm):03718                 RFXT    bsr,TERPRET+12  XT for INTERPRET
F7D0 BDE862           (        forth.asm):03719 (7)             jsr     RSTINP          Restore input parameters
F7D3 7EE87C           (        forth.asm):03720 (3)             jmp     BKIN2PT         Map BLK in (if needed) and update BSBFADR
                      (        forth.asm):03721         
F7D6 08               (        forth.asm):03722         EVAL    fcb     8               ANSI (Core)
F7D7 4556414C55415445 (        forth.asm):03723                 fcc     'EVALUATE'      ( i * x c-addr u -- j * x )
F7DF F7AF             (        forth.asm):03724                 fdb     LOAD
                      (        forth.asm):03725                 RFCS
F7E1 BDE496           (        forth.asm):03726 (7)             jsr     MIN2PST         Need at least 2 parameters on the data stack
                      (        forth.asm):03727         * The whole thing looks like LOAD1 except we do not need to map a block in.
F7E4 AE42             (        forth.asm):03728 (5+1)           ldx     2,u             C-ADDR
F7E6 10AEC4           (        forth.asm):03729 (6+0)           ldy     ,u              U
F7E9 3344             (        forth.asm):03730 (4+1)           leau    4,u             Drop 2 cells from the data stack
F7EB BDE847           (        forth.asm):03731 (7)             jsr     SAVINP          Save input context. X is preserved
F7EE 9F20             (        forth.asm):03732 (4)             stx     BSBFADR         Set BSBFADR from C-ADDR
F7F0 109F26           (        forth.asm):03733 (5)             sty     ISLEN           Set ISLEN from U
F7F3 86FF             (        forth.asm):03734 (2)             lda     #$FF
F7F5 9749             (        forth.asm):03735 (3)             sta     SRCID           -1 (byte) to SRCID. Invoked in EVALUATE context
F7F7 104F             (        forth.asm):03736 (2)             clrd
F7F9 DD2C             (        forth.asm):03737 (4)             std     UBLK            Target block number is zero
F7FB 20CD             (        forth.asm):03738 (3)             bra     LOAD2           Interpret, restore input context and proceed
                      (        forth.asm):03739         
F7FD 04               (        forth.asm):03740         THRU    fcb     4               ANSI (Block ext)
F7FE 54485255         (        forth.asm):03741                 fcc     'THRU'          ( u1 u2 -- )
F802 F7D6             (        forth.asm):03742                 fdb     EVAL
                      (        forth.asm):03743                 RFCS
F804 BDE7F6           (        forth.asm):03744 (7)             jsr     NPOP
F807 1F12             (        forth.asm):03745 (4)             tfr     x,y             Y has U2 (highblk)
F809 BDE7F6           (        forth.asm):03746 (7)             jsr     NPOP            X has U1 (lowblk)--both are unsigned numbers
F80C 103712           (        forth.asm):03747 (4)     @thrlop cmpr    x,y
F80F 2401             (        forth.asm):03748 (3)             bhs     @cont           Limit is >= to the loop index
F811 39               (        forth.asm):03749 (4)             rts
F812 3430             (        forth.asm):03750 (4+4)   @cont   pshs    x,y             Backup loop parameters
F814 3610             (        forth.asm):03751                 UCNPUSH                 Current block number to the data stack
F816 8D9E             (        forth.asm):03752                 RFXT    bsr,LOAD+7      XT for LOAD
F818 3530             (        forth.asm):03753 (4+4)           puls    y,x             Retrieve loop parameters
F81A 3001             (        forth.asm):03754 (4+1)           leax    1,x             Iterate over to the next screen
F81C 20EE             (        forth.asm):03755 (3)             bra     @thrlop
                      (        forth.asm):03756         
F81E 02               (        forth.asm):03757         MILLIS  fcb     2               ANSI (Facility ext)
F81F 4D53             (        forth.asm):03758                 fcc     'MS'            ( u -- )
F821 F7FD             (        forth.asm):03759                 fdb     THRU
                      (        forth.asm):03760                 RFCS
F823 BDE7F6           (        forth.asm):03761 (7)             jsr     NPOP            ZFLAG is set by NPOP
F826 270B             (        forth.asm):03762 (3)             beq     @ms3
F828 CC031A           (        forth.asm):03763 (3)     MILLIS1 ldd     #MSLCNT
F82B 104A             (        forth.asm):03764 (2)     @ms2    decd
F82D 26FC             (        forth.asm):03765 (3)             bne     @ms2
F82F 301F             (        forth.asm):03766 (4+1)           leax    -1,x
F831 26F5             (        forth.asm):03767 (3)             bne     MILLIS1
F833 39               (        forth.asm):03768 (4)     @ms3    rts
                      (        forth.asm):03769         
F834 04               (        forth.asm):03770         KEYP    fcb     4               ANSI (Facility)
F835 4B45593F         (        forth.asm):03771                 fcc     'KEY?'          ( -- flag )
F839 F81E             (        forth.asm):03772                 fdb     MILLIS
                      (        forth.asm):03773                 RFCS
F83B 1FC1             (        forth.asm):03774 (4)             tfr     0,x
F83D 0D4C             (        forth.asm):03775 (4)             tst     SERBCNT
F83F 2702             (        forth.asm):03776 (3)             beq     @done
F841 301F             (        forth.asm):03777 (4+1)           leax    -1,x            Return the ANSI true
F843 7EE7E8           (        forth.asm):03778 (3)     @done   jmp     NPUSH
                      (        forth.asm):03779         
F846 03               (        forth.asm):03780         KEY     fcb     3               ANSI (Core)
F847 4B4559           (        forth.asm):03781                 fcc     'KEY'           ( -- char )
F84A F834             (        forth.asm):03782                 fdb     KEYP
                      (        forth.asm):03783                 RFCS
F84C BDE2A1           (        forth.asm):03784 (7)             jsr     GETCH
F84F 1F89             (        forth.asm):03785 (4)             tfr     a,b
F851 4F               (        forth.asm):03786 (1)             clra
F852 1F01             (        forth.asm):03787 (4)             tfr     d,x
F854 7EE7E8           (        forth.asm):03788 (3)             jmp     NPUSH
                      (        forth.asm):03789         
F857 04               (        forth.asm):03790         EMIT    fcb     4               ANSI (Core)
F858 454D4954         (        forth.asm):03791                 fcc     'EMIT'          ( x -- )
F85C F846             (        forth.asm):03792                 fdb     KEY
                      (        forth.asm):03793                 RFCS
F85E BDE7F6           (        forth.asm):03794 (7)             jsr     NPOP
F861 1F10             (        forth.asm):03795 (4)             tfr     x,d
F863 1F98             (        forth.asm):03796 (4)             tfr     b,a
F865 7EE2CD           (        forth.asm):03797 (3)             jmp     PUTCH
                      (        forth.asm):03798         
F868 01               (        forth.asm):03799         PLUS    fcb     1               ANSI (Core)
F869 2B               (        forth.asm):03800                 fcc     '+'             ( n1 | u1 n2 | u2 -- n3 | u3 )
F86A F857             (        forth.asm):03801                 fdb     EMIT
                      (        forth.asm):03802                 RFCS
F86C BDE496           (        forth.asm):03803 (7)             jsr     MIN2PST         We need at least two cells stacked up
F86F EC42             (        forth.asm):03804 (5+1)           ldd     2,u             N1 to D
F871 E3C4             (        forth.asm):03805 (5+0)           addd    ,u              D has N1+N2
F873 ED42             (        forth.asm):03806 (5+1)           std     2,u             D to N3
F875 3342             (        forth.asm):03807 (4+1)           leau    2,u             Drop the top cell
F877 39               (        forth.asm):03808 (4)             rts
                      (        forth.asm):03809         
F878 02               (        forth.asm):03810         ONEM    fcb     2               ANSI (Core)
F879 312D             (        forth.asm):03811                 fcc     '1-'            ( n1|u1 -- n2|u2 )
F87B F868             (        forth.asm):03812                 fdb     PLUS
                      (        forth.asm):03813                 RFCS
F87D BDE491           (        forth.asm):03814 (7)             jsr     MIN1PST         We need at least one cell stacked up
F880 ECC4             (        forth.asm):03815 (5+0)           ldd     ,u
F882 104A             (        forth.asm):03816 (2)             decd
F884 EDC4             (        forth.asm):03817 (5+0)           std     ,u
F886 39               (        forth.asm):03818 (4)             rts
                      (        forth.asm):03819         
F887 02               (        forth.asm):03820         ONEP    fcb     2               ANSI (Core)
F888 312B             (        forth.asm):03821                 fcc     '1+'            ( n1|u1 -- n2|u2 )
F88A F878             (        forth.asm):03822                 fdb     ONEM
                      (        forth.asm):03823                 RFCS
F88C BDE491           (        forth.asm):03824 (7)             jsr     MIN1PST         We need at least one cell stacked up
F88F ECC4             (        forth.asm):03825 (5+0)           ldd     ,u
F891 104C             (        forth.asm):03826 (2)             incd
F893 EDC4             (        forth.asm):03827 (5+0)           std     ,u
F895 39               (        forth.asm):03828 (4)             rts
                      (        forth.asm):03829         
F896 05               (        forth.asm):03830         CELLP   fcb     5               ANSI (Core)
F897 43454C4C2B       (        forth.asm):03831                 fcc     'CELL+'         ( a-addr1 -- a-addr2 )
F89C F887             (        forth.asm):03832                 fdb     ONEP
                      (        forth.asm):03833                 RFCS
F89E BDE491           (        forth.asm):03834 (7)             jsr     MIN1PST         We need at least one cell stacked up
F8A1 ECC4             (        forth.asm):03835 (5+0)           ldd     ,u
F8A3 C30002           (        forth.asm):03836 (3)             addd    #2
F8A6 EDC4             (        forth.asm):03837 (5+0)           std     ,u
F8A8 39               (        forth.asm):03838 (4)             rts
                      (        forth.asm):03839         
F8A9 01               (        forth.asm):03840         MINUS   fcb     1               ANSI (Core)
F8AA 2D               (        forth.asm):03841                 fcc     '-'             ( n1|u1 n2|u2 -- n3|u3 )
F8AB F896             (        forth.asm):03842                 fdb     CELLP
                      (        forth.asm):03843                 RFCS
F8AD BDE496           (        forth.asm):03844 (7)             jsr     MIN2PST         We need at least two cells stacked up
F8B0 EC42             (        forth.asm):03845 (5+1)           ldd     2,u             N1 to D
F8B2 A3C4             (        forth.asm):03846 (5+0)           subd    ,u              D has N1-N2
F8B4 ED42             (        forth.asm):03847 (5+1)           std     2,u             Store D to N3
F8B6 3342             (        forth.asm):03848 (4+1)           leau    2,u             Drop the top cell
F8B8 39               (        forth.asm):03849 (4)             rts
                      (        forth.asm):03850         
F8B9 05               (        forth.asm):03851         FALSE   fcb     5               ANSI (Core ext)
F8BA 46414C5345       (        forth.asm):03852                 fcc     'FALSE'
F8BF F8A9             (        forth.asm):03853                 fdb     MINUS
                      (        forth.asm):03854                 RFCS
F8C1 1FC1             (        forth.asm):03855 (4)             tfr     0,x
F8C3 7EE7E8           (        forth.asm):03856 (3)             jmp     NPUSH
                      (        forth.asm):03857         
F8C6 04               (        forth.asm):03858         TRUE    fcb     4               ANSI (Core ext)
F8C7 54525545         (        forth.asm):03859                 fcc     'TRUE'
F8CB F8B9             (        forth.asm):03860                 fdb     FALSE
                      (        forth.asm):03861                 RFCS
F8CD 8EFFFF           (        forth.asm):03862 (3)             ldx     #-1
F8D0 7EE7E8           (        forth.asm):03863 (3)             jmp     NPUSH
                      (        forth.asm):03864         
F8D3 05               (        forth.asm):03865         SHIFT   fcb     5               79-STANDARD (REF)
F8D4 5348494654       (        forth.asm):03866                 fcc     'SHIFT'
F8D9 F8C6             (        forth.asm):03867                 fdb     TRUE
                      (        forth.asm):03868                 RFCS
F8DB BDE496           (        forth.asm):03869 (7)             jsr     MIN2PST         Two cells need to be stacked up
F8DE 10A6C4           (        forth.asm):03870 (6+0)           ldw     ,u              Shift bitcount
F8E1 EC42             (        forth.asm):03871 (5+1)           ldd     2,u             The data itself
F8E3 105D             (        forth.asm):03872 (2)     @shftlp tstw
F8E5 270E             (        forth.asm):03873 (3)             beq     @shfdon
F8E7 2D06             (        forth.asm):03874 (3)             blt     @shftrg
F8E9 1048             (        forth.asm):03875 (2)             lsld                    Shift left (W is positive)
F8EB 105A             (        forth.asm):03876 (2)             decw
F8ED 20F4             (        forth.asm):03877 (3)             bra     @shftlp
F8EF 1044             (        forth.asm):03878 (2)     @shftrg lsrd                    Shift right (W is negative)
F8F1 105C             (        forth.asm):03879 (2)             incw
F8F3 20EE             (        forth.asm):03880 (3)             bra     @shftlp
F8F5 ED42             (        forth.asm):03881 (5+1)   @shfdon std     2,u             Return value stored there
F8F7 3342             (        forth.asm):03882 (4+1)           leau    2,u             Drop one cell from the data stack
F8F9 39               (        forth.asm):03883 (4)             rts
                      (        forth.asm):03884         
                      (        forth.asm):03885         * Signed multiplication by hardware support.
F8FA 01               (        forth.asm):03886         MULT    fcb     1               ANSI (Core)
F8FB 2A               (        forth.asm):03887                 fcc     '*'             ( n1|u1 n2|u2 -- n3|u3 [n4|u4] )
F8FC F8D3             (        forth.asm):03888                 fdb     SHIFT
                      (        forth.asm):03889                 RFCS
F8FE 0F3B             (        forth.asm):03890 (5)             clr     MULFCN          Function 0 is *
F900 BDE496           (        forth.asm):03891 (7)     MULT1   jsr     MIN2PST         Two cells need to be stacked up
F903 EC42             (        forth.asm):03892 (5+1)           ldd     2,u             N1 to D
F905 11AFC4           (        forth.asm):03893 (30+0)          muld    ,u              D:W has N1*N2
F908 10A742           (        forth.asm):03894 (6+1)           stw     2,u             LSC to N3
F90B 0D3B             (        forth.asm):03895 (4)             tst     MULFCN
F90D 2603             (        forth.asm):03896 (3)             bne     @mstsem
                      (        forth.asm):03897         * Semantics: return only the LSC.
F90F 3342             (        forth.asm):03898 (4+1)           leau    2,u             Drop one cell from the data stack
F911 39               (        forth.asm):03899 (4)             rts
                      (        forth.asm):03900         * M* semantics, also return the MSC.
F912 EDC4             (        forth.asm):03901 (5+0)   @mstsem std     ,u              MSC to N4
F914 39               (        forth.asm):03902 (4)             rts
                      (        forth.asm):03903         
F915 02               (        forth.asm):03904         MSTAR   fcb     2               ANSI (Core)
F916 4D2A             (        forth.asm):03905                 fcc     'M*'            ( n1 n2 -- d )
F918 F8FA             (        forth.asm):03906                 fdb     MULT
F91A 8601             (        forth.asm):03907 (2)             lda     #1
F91C 973B             (        forth.asm):03908 (3)             sta     MULFCN          Function 1 is M*
F91E 20E0             (        forth.asm):03909 (3)             bra     MULT1
                      (        forth.asm):03910         
                      (        forth.asm):03911         * The algorithm implemented here is similar to Donald's Knuth algorithm M,
                      (        forth.asm):03912         * as described in "The Art of Computer Programming", Volume II, 3rd edition,
                      (        forth.asm):03913         * section 4.3.1, pp 268. It is not as generic as algorithm M but fits our
                      (        forth.asm):03914         * particular purpose here: a 16x16 bit unsigned multiplication that yields
                      (        forth.asm):03915         * a 32 bit result. A simpler description of algorithm M can be found in
                      (        forth.asm):03916         * Henry S. Warren Junior's "Hacker's Delight", second edition, section 8-1,
                      (        forth.asm):03917         * pp 171. A C prototype implementation for a little endian host is provided
                      (        forth.asm):03918         * in SW/util/umstar.c.
                      (        forth.asm):03919         * In essence we reduce the problem to a 2 digit by 2 digit (expressed in
                      (        forth.asm):03920         * base 256) multiplication and use the 6809 MUL (A * B -> D) instruction.
F920 03               (        forth.asm):03921         UMSTAR  fcb     3               ANSI (Core)
F921 554D2A           (        forth.asm):03922                 fcc     'UM*'           ( u1 u2 -- ud )
F924 F915             (        forth.asm):03923                 fdb     MSTAR
                      (        forth.asm):03924                 RFCS
F926 BDE496           (        forth.asm):03925 (7)             jsr     MIN2PST         2 parameters need to be stacked up
                      (        forth.asm):03926         * Register allocation notes:
                      (        forth.asm):03927         * X: pointer to ud1 (ARG_U/p in the C code).
                      (        forth.asm):03928         * Y: pointer to ud2 (ARG_V/q in the C code).
                      (        forth.asm):03929         * E: Inner loop index (i in the C code).
                      (        forth.asm):03930         * F: Outer loop index (j in the C code).
                      (        forth.asm):03931         *
                      (        forth.asm):03932         * We save U to the system stack and use it to point to a scratch area allocated
                      (        forth.asm):03933         * from the system stack that will contain the 4 bytes (double cell) ultimately
                      (        forth.asm):03934         * holding the result (MSB first, what else?).
                      (        forth.asm):03935         *
                      (        forth.asm):03936         * System stack structure:
                      (        forth.asm):03937         * ,S    Result scratch area (Result MSB)
                      (        forth.asm):03938         * 2,S   Result scratch area (Result LSB)
                      (        forth.asm):03939         * 4,S   Saved U register
                      (        forth.asm):03940         * Total: 6 bytes.
F929 327A             (        forth.asm):03941 (4+1)           leas    -6,s            Allocate system stack scratch space
F92B EF64             (        forth.asm):03942 (5+1)           stu     4,s             Save the U register
F92D 104F             (        forth.asm):03943 (2)             clrd
F92F EDE4             (        forth.asm):03944 (5+0)           std     ,s              Initialize the result's MSB
F931 ED62             (        forth.asm):03945 (5+1)           std     2,s             Initialize the result's LSB
F933 3141             (        forth.asm):03946 (4+1)           leay    1,u             Initialize outer loop pointer (q in the C code)
F935 3363             (        forth.asm):03947 (4+1)           leau    3,s             Initialize the result pointer (r in the C code)
F937 11C602           (        forth.asm):03948 (3)             ldf     #2              Outer loop index
F93A AE64             (        forth.asm):03949 (5+1)   @outer  ldx     4,s             Saved U register
F93C 3003             (        forth.asm):03950 (4+1)           leax    3,x             Initialize inner loop pointer (p in the C code)
F93E 118602           (        forth.asm):03951 (3)             lde     #2              Inner loop index
F941 A684             (        forth.asm):03952 (4+0)   @inner  lda     ,x              *p to A
F943 E6A4             (        forth.asm):03953 (4+0)           ldb     ,y              *q to B
F945 3D               (        forth.asm):03954 (10)            mul                     *p * *q to D (tmpval in the C code)
F946 E35F             (        forth.asm):03955 (5+1)           addd    -1,u            r[-1] += tmpval
F948 ED5F             (        forth.asm):03956 (5+1)           std     -1,u
F94A 2402             (        forth.asm):03957 (3)             bcc     @ncarry
F94C 6C5E             (        forth.asm):03958 (6+1)           inc     -2,u            r[-2] += carry (propagate carry from ADDD above)
F94E 335F             (        forth.asm):03959 (4+1)   @ncarry leau    -1,u            r--
F950 301F             (        forth.asm):03960 (4+1)           leax    -1,x            p--
F952 114A             (        forth.asm):03961 (2)             dece                    i--
F954 26EB             (        forth.asm):03962 (3)             bne     @inner
F956 3341             (        forth.asm):03963 (4+1)           leau    1,u             r++
F958 313F             (        forth.asm):03964 (4+1)           leay    -1,y            q--
F95A 115A             (        forth.asm):03965 (2)             decf                    j--
F95C 26DC             (        forth.asm):03966 (3)             bne     @outer
F95E EE64             (        forth.asm):03967 (5+1)           ldu     4,s             Restore the U register
F960 10ECE4           (        forth.asm):03968 (8+0)           ldq     ,s
F963 10EDC4           (        forth.asm):03969 (8+0)           stq     ,u              Result to the data stack (in place)
F966 3266             (        forth.asm):03970 (4+1)           leas    6,s             Release system stack scratch space
F968 39               (        forth.asm):03971 (4)             rts
                      (        forth.asm):03972         
F969 02               (        forth.asm):03973         TWOTIM  fcb     2               ANSI (Core)
F96A 322A             (        forth.asm):03974                 fcc     '2*'            ( x1 -- x2 )
F96C F920             (        forth.asm):03975                 fdb     UMSTAR
                      (        forth.asm):03976                 RFCS
F96E BDE491           (        forth.asm):03977 (7)             jsr     MIN1PST         One cell needs to be stacked up
F971 ECC4             (        forth.asm):03978 (5+0)           ldd     ,u
F973 1048             (        forth.asm):03979 (2)             asld
F975 EDC4             (        forth.asm):03980 (5+0)           std     ,u
F977 39               (        forth.asm):03981 (4)             rts
                      (        forth.asm):03982         
F978 02               (        forth.asm):03983         TWODIV  fcb     2               ANSI (Core)
F979 322F             (        forth.asm):03984                 fcc     '2/'            ( x1 -- x2 )
F97B F969             (        forth.asm):03985                 fdb     TWOTIM
                      (        forth.asm):03986                 RFCS
F97D BDE491           (        forth.asm):03987 (7)             jsr     MIN1PST         One cell needs to be stacked up
F980 ECC4             (        forth.asm):03988 (5+0)           ldd     ,u
F982 1047             (        forth.asm):03989 (2)             asrd
F984 EDC4             (        forth.asm):03990 (5+0)           std     ,u
F986 39               (        forth.asm):03991 (4)             rts
                      (        forth.asm):03992         
F987 03               (        forth.asm):03993         MOD     fcb     3               ANSI (Core)
F988 4D4F44           (        forth.asm):03994                 fcc     'MOD'           ( N1 N2 -- N3 )
F98B F978             (        forth.asm):03995                 fdb     TWODIV
                      (        forth.asm):03996                 RFCS
F98D 8601             (        forth.asm):03997 (2)             lda     #DVFMOD
F98F 9738             (        forth.asm):03998 (3)             sta     DIVFCN          Function 1: return only the modulo
F991 2031             (        forth.asm):03999 (3)             bra     DIV1
                      (        forth.asm):04000         
F993 04               (        forth.asm):04001         SLMOD   fcb     4               ANSI (Core)
F994 2F4D4F44         (        forth.asm):04002                 fcc     '/MOD'          ( N1 N2 -- N3 N4 )
F998 F987             (        forth.asm):04003                 fdb     MOD
                      (        forth.asm):04004                 RFCS
F99A 0F38             (        forth.asm):04005 (5)             clr     DIVFCN          Function 0: return the quotient and the modulo
F99C 2026             (        forth.asm):04006 (3)             bra     DIV1
                      (        forth.asm):04007         
F99E 06               (        forth.asm):04008         FMSLMOD fcb     6               ANSI (Core)
F99F 464D2F4D4F44     (        forth.asm):04009                 fcc     'FM/MOD'        ( D1 N1 -- N2 N3 )
F9A5 F993             (        forth.asm):04010                 fdb     SLMOD
                      (        forth.asm):04011                 RFCS
F9A7 8608             (        forth.asm):04012 (2)             lda     #(DVFSLMD|DVOA1D) Function 0, arg #1 is double
F9A9 9738             (        forth.asm):04013 (3)             sta     DIVFCN
F9AB 2017             (        forth.asm):04014 (3)             bra     DIV1
                      (        forth.asm):04015         
F9AD 06               (        forth.asm):04016         SMSLREM fcb     6               ANSI (Core)
F9AE 534D2F52454D     (        forth.asm):04017                 fcc     'SM/REM'        ( D1 N1 -- N2 N3 )
F9B4 F99E             (        forth.asm):04018                 fdb     FMSLMOD
                      (        forth.asm):04019                 RFCS
                      (        forth.asm):04020         * Function 0, arg #1 is double, want symmetric division.
F9B6 8618             (        forth.asm):04021 (2)             lda     #(DVFSLMD|DVOA1D|DVOWSYM)
F9B8 9738             (        forth.asm):04022 (3)             sta     DIVFCN
F9BA 2008             (        forth.asm):04023 (3)             bra     DIV1
                      (        forth.asm):04024         
                      (        forth.asm):04025         * /, MOD and /MOD are essentially the same function returning
                      (        forth.asm):04026         * the different parts returned by DIVQ.
                      (        forth.asm):04027         * We use a global variable to distinguish which functionality
                      (        forth.asm):04028         * is being requested:
                      (        forth.asm):04029         * 0: return the modulo and the quotient (/MOD).
                      (        forth.asm):04030         * 1: return the modulo only (MOD).
                      (        forth.asm):04031         * 2: return the quotient only (/).
F9BC 01               (        forth.asm):04032         DIV     fcb     1               ANSI (Core)
F9BD 2F               (        forth.asm):04033                 fcc     '/'             ( n1|d1 n2 -- n3 [n4] )
F9BE F9AD             (        forth.asm):04034                 fdb     SMSLREM
                      (        forth.asm):04035                 RFCS
F9C0 8602             (        forth.asm):04036 (2)             lda     #DVFDIV
F9C2 9738             (        forth.asm):04037 (3)             sta     DIVFCN          Function 2: return only the quotient
F9C4 0F3C             (        forth.asm):04038 (5)     DIV1    clr     F83DIVF         Assume no adjustment required for floored div.
                      (        forth.asm):04039         
                      (        forth.asm):04040         * Split function code options into individual flags, extract base function code.
F9C6 0F39             (        forth.asm):04041 (5)             clr     DIVDBL
F9C8 0F3A             (        forth.asm):04042 (5)             clr     DIVSYM
F9CA 8601             (        forth.asm):04043 (2)             lda     #1
F9CC D638             (        forth.asm):04044 (3)             ldb     DIVFCN
F9CE C508             (        forth.asm):04045 (2)             bitb    #DVOA1D
F9D0 2702             (        forth.asm):04046 (3)             beq     *+4
F9D2 9739             (        forth.asm):04047 (3)             sta     DIVDBL
F9D4 C510             (        forth.asm):04048 (2)             bitb    #DVOWSYM
F9D6 2702             (        forth.asm):04049 (3)             beq     *+4
F9D8 973A             (        forth.asm):04050 (3)             sta     DIVSYM
F9DA C407             (        forth.asm):04051 (2)             andb    #DVFMASK
F9DC D738             (        forth.asm):04052 (3)             stb     DIVFCN
                      (        forth.asm):04053         
F9DE 0D39             (        forth.asm):04054 (4)             tst     DIVDBL
F9E0 2605             (        forth.asm):04055 (3)             bne     *+7             Make sure double stack requirements are met
F9E2 BDE496           (        forth.asm):04056 (7)             jsr     MIN2PST         At least two cells need to be stacked up
F9E5 2003             (        forth.asm):04057 (3)             bra     *+5
F9E7 BDE49B           (        forth.asm):04058 (7)             jsr     MIN3PST         At least three cells need to be stacked up
                      (        forth.asm):04059         
F9EA 0D3A             (        forth.asm):04060 (4)             tst     DIVSYM
F9EC 2608             (        forth.asm):04061 (3)             bne     @dvsym          Symmetric division is wanted
F9EE A642             (        forth.asm):04062 (4+1)           lda     2,u             Numerator's MSB
F9F0 A8C4             (        forth.asm):04063 (4+0)           eora    ,u              Different sign from the denominator's MSB?
F9F2 2A02             (        forth.asm):04064 (3)             bpl     @dvsym          No, proceed to the division code
F9F4 0C3C             (        forth.asm):04065 (5)             inc     F83DIVF         Numerator and denominator have different signs
F9F6 0D39             (        forth.asm):04066 (4)     @dvsym  tst     DIVDBL
F9F8 2705             (        forth.asm):04067 (3)             beq     @dvsgn
F9FA 10EC42           (        forth.asm):04068 (8+1)           ldq     2,u             Double cell numerator to D:W
F9FD 2009             (        forth.asm):04069 (3)             bra     @dvactu
                      (        forth.asm):04070         * Division by zero conditions are dealt with through the trap handler.
F9FF 104F             (        forth.asm):04071 (2)     @dvsgn  clrd                    Clear the numerator's MSC
FA01 10A642           (        forth.asm):04072 (6+1)           ldw     2,u             Numerator's LSC
FA04 2A02             (        forth.asm):04073 (3)             bpl     @dvactu         Branch if no sign extention is needed
                      (        forth.asm):04074         * Sign extention from W to Q.
FA06 1043             (        forth.asm):04075 (2)             comd                    -1 to D (numerator's MSC)
FA08 11AEC4           (        forth.asm):04076 (36)    @dvactu divq    ,u              ,u has the denominator
FA0B 8D1F             (        forth.asm):04077 (6)             bsr     FDIVADJ         Perform floored division adjustment, if needed
                      (        forth.asm):04078         
FA0D 0D39             (        forth.asm):04079 (4)             tst     DIVDBL
FA0F 2702             (        forth.asm):04080 (3)             beq     *+4
FA11 3342             (        forth.asm):04081 (4+1)           leau    2,u             Drop one cell from the data stack
                      (        forth.asm):04082         
FA13 0D38             (        forth.asm):04083 (4)             tst     DIVFCN
FA15 2606             (        forth.asm):04084 (3)             bne     @div4
FA17 ED42             (        forth.asm):04085 (5+1)           std     2,u             Function 0: return the modulo and the quotient
FA19 10A7C4           (        forth.asm):04086 (6+0)   @div3   stw     ,u              Function 2: return only the quotient
FA1C 39               (        forth.asm):04087 (4)             rts
FA1D 3342             (        forth.asm):04088 (4+1)   @div4   leau    2,u             Drop one cell from the data stack
FA1F 1F07             (        forth.asm):04089 (4)             tfr     d,v             Backup the modulo
FA21 9638             (        forth.asm):04090 (3)             lda     DIVFCN
FA23 8101             (        forth.asm):04091 (2)             cmpa    #1
FA25 26F2             (        forth.asm):04092 (3)             bne     @div3
FA27 1F70             (        forth.asm):04093 (4)             tfr     v,d             Restore the modulo
FA29 EDC4             (        forth.asm):04094 (5+0)           std     ,u              Function 1: return only the modulo
FA2B 39               (        forth.asm):04095 (4)             rts
                      (        forth.asm):04096         
                      (        forth.asm):04097         * Quotient is returned in W, modulo in D but this is symmetric division :-(
                      (        forth.asm):04098         * Need to return a floored division result for compat. with F83 and ANSI impls.
FA2C 104D             (        forth.asm):04099 (2)     FDIVADJ tstd                    Is the remainder zero?
FA2E 2708             (        forth.asm):04100 (3)             beq     @no83ad         Yes. No adjusment required for floored division
FA30 0D3C             (        forth.asm):04101 (4)             tst     F83DIVF         Different signs for numerator and denominator?
FA32 2704             (        forth.asm):04102 (3)             beq     @no83ad         No. Adjusment not needed for floored division
                      (        forth.asm):04103         * Adjusment for F83 floored division.
FA34 105A             (        forth.asm):04104 (2)             decw                    Decrement the quotient
FA36 E3C4             (        forth.asm):04105 (5+0)           addd    ,u              Add the denominator to the modulo
FA38 39               (        forth.asm):04106 (4)     @no83ad rts
                      (        forth.asm):04107         
FA39 02               (        forth.asm):04108         STRSLSH fcb     2               ANSI (Core)
FA3A 2A2F             (        forth.asm):04109                 fcc     '*/'            ( N1 N2 N3 -- N4 [N5] )
FA3C F9BC             (        forth.asm):04110                 fdb     DIV
                      (        forth.asm):04111                 RFCS
FA3E 8601             (        forth.asm):04112 (2)             lda     #1
FA40 973D             (        forth.asm):04113 (3)             sta     STSLFCN
FA42 BDE49B           (        forth.asm):04114 (7)     STRSL1  jsr     MIN3PST         Three cells need to be stacked up
FA45 0F3C             (        forth.asm):04115 (5)             clr     F83DIVF         Assume no adjustment required for floored div.
                      (        forth.asm):04116         * Division by zero conditions are dealt with through the trap handler.
FA47 EC44             (        forth.asm):04117 (5+1)           ldd     4,u             N1
FA49 11AF42           (        forth.asm):04118 (30+1)          muld    2,u             N2 (N1 * N2 -> D:W)
FA4C 3402             (        forth.asm):04119 (4+1)           pshs    a               Product's MSC's MSB
FA4E A8C4             (        forth.asm):04120 (4+0)           eora    ,u              Different sign from the denominator's?
FA50 2A02             (        forth.asm):04121 (3)             bpl     @stslpr         No. Floored division adjustment not needed
FA52 0C3C             (        forth.asm):04122 (5)             inc     F83DIVF
FA54 3502             (        forth.asm):04123 (4+1)   @stslpr puls    a
FA56 11AEC4           (        forth.asm):04124 (36)            divq    ,u              N3
FA59 8DD1             (        forth.asm):04125 (6)             bsr     FDIVADJ         Perform floored division adjustment, if needed
FA5B 3342             (        forth.asm):04126 (4+1)           leau    2,u
FA5D 0D3D             (        forth.asm):04127 (4)             tst     STSLFCN
FA5F 2606             (        forth.asm):04128 (3)             bne     @strsl2         Just the quotient, Ma'am!
FA61 ED42             (        forth.asm):04129 (5+1)           std     2,u             N4: the modulo
FA63 10A7C4           (        forth.asm):04130 (6+0)           stw     ,u              N5: the quotient
FA66 39               (        forth.asm):04131 (4)             rts
FA67 3342             (        forth.asm):04132 (4+1)   @strsl2 leau    2,u
FA69 10A7C4           (        forth.asm):04133 (6+0)           stw     ,u              N4
FA6C 39               (        forth.asm):04134 (4)             rts
                      (        forth.asm):04135         
FA6D 05               (        forth.asm):04136         STRSLMD fcb     5               ANSI (Core)
FA6E 2A2F4D4F44       (        forth.asm):04137                 fcc     '*/MOD'         ( N1 N2 N3 -- N4 N5 )
FA73 FA39             (        forth.asm):04138                 fdb     STRSLSH
                      (        forth.asm):04139                 RFCS
FA75 0F3D             (        forth.asm):04140 (5)             clr     STSLFCN
FA77 20C9             (        forth.asm):04141 (3)             bra     STRSL1
                      (        forth.asm):04142         
FA79 06               (        forth.asm):04143         UMSLMOD fcb     6               ANSI (Core)
FA7A 554D2F4D4F44     (        forth.asm):04144                 fcc     'UM/MOD'        ( ud u1 -- u2 u3 )
FA80 FA6D             (        forth.asm):04145                 fdb     STRSLMD
                      (        forth.asm):04146                 RFCS
FA82 BDE49B           (        forth.asm):04147 (7)             jsr     MIN3PST
FA85 ECC4             (        forth.asm):04148 (5+0)           ldd     ,u              Is U1 zero?
FA87 2605             (        forth.asm):04149 (3)             bne     @cont           No
FA89 C604             (        forth.asm):04150 (2)     @oor    ldb     #4              Division by zero/Out of range
FA8B BDE75E           (        forth.asm):04151 (7)             jsr     ERRHDLR         No return
FA8E BDE7F6           (        forth.asm):04152 (7)     @cont   jsr     NPOP
FA91 1F10             (        forth.asm):04153 (4)             tfr     x,d             U1 (denominator) to D
FA93 BDE7F6           (        forth.asm):04154 (7)             jsr     NPOP
FA96 1F12             (        forth.asm):04155 (4)             tfr     x,y             Numerator MSC TO Y
FA98 BDE7F6           (        forth.asm):04156 (7)             jsr     NPOP            Numerator LSC to X
FA9B 32E8EF           (        forth.asm):04157 (4+1)           leas    -17,s
FA9E ED6E             (        forth.asm):04158 (5+1)           std     14,s            Denominator
FAA0 AF6C             (        forth.asm):04159 (5+1)           stx     12,s            Numerator least significant cell
FAA2 10AF6A           (        forth.asm):04160 (6+1)           sty     10,s            Numerator most significant cell
FAA5 BDF5CA           (        forth.asm):04161 (7)             jsr     DBDIVSG
FAA8 EC66             (        forth.asm):04162 (5+1)           ldd     6,s             Quotient high
FAAA 26DD             (        forth.asm):04163 (3)             bne     @oor            Out of range
FAAC AEE4             (        forth.asm):04164 (5+0)           ldx     ,s              Remainder (U2)
FAAE 3610             (        forth.asm):04165                 UCNPUSH
FAB0 AE68             (        forth.asm):04166 (5+1)           ldx     8,s             Quotient low (U3)
FAB2 3610             (        forth.asm):04167                 UCNPUSH
FAB4 32E811           (        forth.asm):04168 (4+1)           leas    17,s
FAB7 39               (        forth.asm):04169 (4)             rts
                      (        forth.asm):04170         
                      (        forth.asm):04171         * Returns the current value of the Sreg register (informational only).
                      (        forth.asm):04172         * This word is either called (JSROPC) or jumped to (JMPOPC), as a result
                      (        forth.asm):04173         * of the tail call optimization process. There is no way to tell the
                      (        forth.asm):04174         * difference. Here we assume that it is called and return Sreg.
FAB8 01               (        forth.asm):04175         SYSSTK  fcb     1               Non-standard
FAB9 53               (        forth.asm):04176                 fcc     'S'
FABA FA79             (        forth.asm):04177                 fdb     UMSLMOD
                      (        forth.asm):04178                 RFCS
FABC 1F41             (        forth.asm):04179 (4)             tfr     s,x
FABE 7EE7E8           (        forth.asm):04180 (3)             jmp     NPUSH
                      (        forth.asm):04181         
FAC1 02               (        forth.asm):04182         SYSSTAT fcb     2
FAC2 5340             (        forth.asm):04183                 fcc     'S@'
FAC4 FAB8             (        forth.asm):04184                 fdb     SYSSTK
                      (        forth.asm):04185                 RFCS
FAC6 AEE4             (        forth.asm):04186 (5+0)           ldx     ,s
FAC8 7EE7E8           (        forth.asm):04187 (3)             jmp     NPUSH
                      (        forth.asm):04188         
FACB 07               (        forth.asm):04189         PAYLOAD fcb     7               Non standard
FACC 5041594C4F4144   (        forth.asm):04190                 fcc     'PAYLOAD'       ( -- len ) where len is the code payload
FAD3 FAC1             (        forth.asm):04191                 fdb     SYSSTAT         of the word located by FIND (or NULL)
                      (        forth.asm):04192                 RFCS
FAD5 9E10             (        forth.asm):04193 (4)             ldx     FNDPLD          Code payload reported by FIND
FAD7 7EE7E8           (        forth.asm):04194 (3)             jmp     NPUSH
                      (        forth.asm):04195         
                      (        forth.asm):04196         * Differences from the original code (WORDS):
                      (        forth.asm):04197         * - display number in HEX rather than in the current base.
                      (        forth.asm):04198         * - dropped feat: the original stuff was interactively paged by 15 line screens.
                      (        forth.asm):04199         * - added feat: display code implementation payload.
                      (        forth.asm):04200         * - added feat: display the immedediate and define (compile time only) flags.
                      (        forth.asm):04201         * - added feat: display the forgettable status (R/W). Everything user
                      (        forth.asm):04202         *   defined is forgettable (i.e. RAM resident).
FADA 05               (        forth.asm):04203         WORDS   fcb     5               Non-standard
FADB 574F524453       (        forth.asm):04204                 fcc     'WORDS'         ( -- )
FAE0 FACB             (        forth.asm):04205                 fdb     PAYLOAD
                      (        forth.asm):04206                 RFCS
FAE2 9E08             (        forth.asm):04207 (4)             ldx     DICEND
FAE4 9F1A             (        forth.asm):04208 (4)             stx     VLPRVEP         Last word code address + 1
FAE6 9E06             (        forth.asm):04209 (4)             ldx     LSTWAD
FAE8 9F1C             (        forth.asm):04210 (4)     @vlist1 stx     VLPRVHD         Last word header pointer
FAEA 108E044A         (        forth.asm):04211 (4)             ldy     #TBUFF
FAEE E680             (        forth.asm):04212 (4+1)           ldb     ,x+
FAF0 3404             (        forth.asm):04213 (4+1)           pshs    b
FAF2 C41F             (        forth.asm):04214 (2)             andb    #WRLNMSK        Mask out word length
FAF4 4F               (        forth.asm):04215 (1)             clra
FAF5 3404             (        forth.asm):04216 (4+1)           pshs    b               Preserve word length
FAF7 1F06             (        forth.asm):04217 (4)             tfr     d,w
FAF9 113812           (        forth.asm):04218 (6+?)           tfm     x+,y+
FAFC 3502             (        forth.asm):04219 (4+1)           puls    a               Restore word length to A
FAFE C620             (        forth.asm):04220 (2)             ldb     #WRLNMSK+1
FB00 103289           (        forth.asm):04221 (4)             subr    a,b             Number of spaces we want to emit
FB03 8620             (        forth.asm):04222 (2)             lda     #SP
FB05 A7A0             (        forth.asm):04223 (4+1)   @vlist2 sta     ,y+
FB07 5A               (        forth.asm):04224 (1)             decb
FB08 26FB             (        forth.asm):04225 (3)             bne     @vlist2
FB0A 6FA0             (        forth.asm):04226 (6+1)           clr     ,y+             Terminate formatted output string
FB0C 3410             (        forth.asm):04227 (4+2)           pshs    x               Address of the current word backlink address
FB0E BDE2ED           (        forth.asm):04228 (7)             jsr     PUTCR           Carriage return is output before anything else
FB11 8E044A           (        forth.asm):04229 (3)             ldx     #TBUFF
FB14 BDE2E0           (        forth.asm):04230 (7)             jsr     PUTS            Output word name formatted on 17 chars + SP
FB17 AEE4             (        forth.asm):04231 (5+0)           ldx     ,s
                      (        forth.asm):04232                 IFNE    RELFEAT
                      (        forth.asm):04233                 leax    3,x             Word XT to X (Skip backlink and checksum)
                      (        forth.asm):04234                 ELSE
FB19 3002             (        forth.asm):04235 (4+1)           leax    2,x             Word XT to X (Skip backlink)
                      (        forth.asm):04236                 ENDC                    RELFEAT
FB1B 1F10             (        forth.asm):04237 (4)             tfr     x,d             CVNSTR depends on UBASE and we want HEX output
FB1D 108E044A         (        forth.asm):04238 (4)             ldy     #TBUFF
FB21 BDE182           (        forth.asm):04239 (7)             jsr     HDMP4           So we use trusted debugging code
FB24 8E044A           (        forth.asm):04240 (3)             ldx     #TBUFF
FB27 BDE2E0           (        forth.asm):04241 (7)             jsr     PUTS
                      (        forth.asm):04242         * Now to display word implementation length.
                      (        forth.asm):04243         * Implementation code length is from ,s+3 (or 2) to VLPRVEP
FB2A 8609             (        forth.asm):04244 (2)             lda     #HT
FB2C BDE2CD           (        forth.asm):04245 (7)             jsr     PUTCH
FB2F 9E1A             (        forth.asm):04246 (4)             ldx     VLPRVEP
FB31 10AEE4           (        forth.asm):04247 (6+0)           ldy     ,s
                      (        forth.asm):04248                 IFNE    RELFEAT
                      (        forth.asm):04249                 leay    3,y             Current word code entry address
                      (        forth.asm):04250                 ELSE
FB34 3122             (        forth.asm):04251 (4+1)           leay    2,y             Current word code entry address
                      (        forth.asm):04252                 ENDC                    RELFEAT
FB36 103221           (        forth.asm):04253 (4)             subr    y,x
FB39 1F10             (        forth.asm):04254 (4)             tfr     x,d
FB3B 108E044A         (        forth.asm):04255 (4)             ldy     #TBUFF
FB3F BDE182           (        forth.asm):04256 (7)             jsr     HDMP4
FB42 8E044A           (        forth.asm):04257 (3)             ldx     #TBUFF
FB45 BDE2E0           (        forth.asm):04258 (7)             jsr     PUTS
                      (        forth.asm):04259         # Display attribute flags.
FB48 8609             (        forth.asm):04260 (2)             lda     #HT
FB4A BDE2CD           (        forth.asm):04261 (7)             jsr     PUTCH
FB4D 8E044A           (        forth.asm):04262 (3)             ldx     #TBUFF
FB50 E662             (        forth.asm):04263 (4+1)           ldb     2,s             Word attribute to B
FB52 862D             (        forth.asm):04264 (2)             lda     #'-
FB54 C580             (        forth.asm):04265 (2)             bitb    #IMDFLM         Check for immediate
FB56 2702             (        forth.asm):04266 (3)             beq     @vlist4
FB58 8649             (        forth.asm):04267 (2)             lda     #'I
FB5A A780             (        forth.asm):04268 (4+1)   @vlist4 sta     ,x+
FB5C 862D             (        forth.asm):04269 (2)             lda     #'-
FB5E C540             (        forth.asm):04270 (2)             bitb    #DEFFLM         Check for define (compile time only)
FB60 2702             (        forth.asm):04271 (3)             beq     @vlist5
FB62 8643             (        forth.asm):04272 (2)             lda     #'C
FB64 A780             (        forth.asm):04273 (4+1)   @vlist5 sta     ,x+
                      (        forth.asm):04274                 IFNE    RELFEAT
                      (        forth.asm):04275                 lda     #'-
                      (        forth.asm):04276                 bitb    #MONFLM         Check for monitored status
                      (        forth.asm):04277                 beq     @vlst51
                      (        forth.asm):04278                 lda     #'M
FB66                  (        forth.asm):04279         @vlst51 sta     ,x+
                      (        forth.asm):04280                 ENDC                    RELFEAT
                      (        forth.asm):04281         * Check for forgettable also. In ROM => R else W unless we just processed '@'.
FB66 8652             (        forth.asm):04282 (2)             lda     #'R
FB68 10AEE4           (        forth.asm):04283 (6+0)           ldy     ,s
                      (        forth.asm):04284                 IFNE    RELFEAT
                      (        forth.asm):04285                 leay    3,y             Word entry point to Y
                      (        forth.asm):04286                 ELSE
FB6B 3122             (        forth.asm):04287 (4+1)           leay    2,y             Word entry point to Y
                      (        forth.asm):04288                 ENDC                    RELFEAT
FB6D 108C0CC4         (        forth.asm):04289 (4)             cmpy    #RAMFTCH        @ in RAM is unforgettable
FB71 2708             (        forth.asm):04290 (3)             beq     @vlist6
FB73 108CE000         (        forth.asm):04291 (4)             cmpy    #ROMSTRT        as are all ROM resident words
FB77 2402             (        forth.asm):04292 (3)             bcc     @vlist6
FB79 8657             (        forth.asm):04293 (2)             lda     #'W
FB7B A780             (        forth.asm):04294 (4+1)   @vlist6 sta     ,x+
FB7D 6F84             (        forth.asm):04295 (6+0)           clr     ,x
FB7F 8E044A           (        forth.asm):04296 (3)             ldx     #TBUFF
FB82 BDE2E0           (        forth.asm):04297 (7)             jsr     PUTS
                      (        forth.asm):04298         * The point at which VLPRVHD==WDICSPC is a singularity (RAM to ROM transition).
FB85 9E1C             (        forth.asm):04299 (4)             ldx     VLPRVHD
FB87 8C0CC0           (        forth.asm):04300 (3)             cmpx    #WDICSPC
FB8A 2608             (        forth.asm):04301 (3)             bne     @vlist7
FB8C 8EFDF9           (        forth.asm):04302 (3)             ldx     #QMARK          Word just before @ (ROM flavor)
FB8F 9F1C             (        forth.asm):04303 (4)             stx     VLPRVHD
FB91 8EFE03           (        forth.asm):04304 (3)             ldx     #THEEND
FB94 9F1A             (        forth.asm):04305 (4)     @vlist7 stx     VLPRVEP
FB96 3510             (        forth.asm):04306 (4+2)           puls    x
FB98 3504             (        forth.asm):04307 (4+1)           puls    b
FB9A AE84             (        forth.asm):04308 (5+0)           ldx     ,x              Point to previous word
FB9C 1026FF48         (        forth.asm):04309 (5)             lbne    @vlist1
FBA0 39               (        forth.asm):04310 (4)             rts
                      (        forth.asm):04311         
FBA1 05               (        forth.asm):04312         STATE   fcb     5               ANSI (Core)
FBA2 5354415445       (        forth.asm):04313                 fcc     'STATE'         ( -- a-addr )
FBA7 FADA             (        forth.asm):04314                 fdb     WORDS
                      (        forth.asm):04315                 RFCS
FBA9 8E0124           (        forth.asm):04316 (3)             ldx     #USTATE
FBAC 7EE7E8           (        forth.asm):04317 (3)             jmp     NPUSH
                      (        forth.asm):04318         
FBAF 04               (        forth.asm):04319         BASE    fcb     4               ANSI (Core)
FBB0 42415345         (        forth.asm):04320                 fcc     'BASE'          ( -- a-addr )
FBB4 FBA1             (        forth.asm):04321                 fdb     STATE
                      (        forth.asm):04322                 RFCS
FBB6 8E0122           (        forth.asm):04323 (3)             ldx     #UBASE
FBB9 7EE7E8           (        forth.asm):04324 (3)             jmp     NPUSH
                      (        forth.asm):04325         
FBBC 07               (        forth.asm):04326         DECIMAL fcb     7               ANSI (Core)
FBBD 444543494D414C   (        forth.asm):04327                 fcc     'DECIMAL'       ( -- )
FBC4 FBAF             (        forth.asm):04328                 fdb     BASE
                      (        forth.asm):04329                 RFCS
FBC6 CC000A           (        forth.asm):04330 (3)             ldd     #10
FBC9 DD22             (        forth.asm):04331 (4)     BASESET std     UBASE
FBCB 39               (        forth.asm):04332 (4)             rts
                      (        forth.asm):04333         
FBCC 03               (        forth.asm):04334         HEX     fcb     3               ANSI (Core)
FBCD 484558           (        forth.asm):04335                 fcc     'HEX'           ( -- )
FBD0 FBBC             (        forth.asm):04336                 fdb     DECIMAL
                      (        forth.asm):04337                 RFCS
FBD2 CC0010           (        forth.asm):04338 (3)             ldd     #16
FBD5 20F2             (        forth.asm):04339 (3)             bra     BASESET
                      (        forth.asm):04340         
FBD7 02               (        forth.asm):04341         DOTTICK fcb     2               Non-standard (SwiftForth)
FBD8 2E27             (        forth.asm):04342                 fcb     $2E,$27         .' ( memaddr -- )
FBDA FBCC             (        forth.asm):04343                 fdb     HEX
                      (        forth.asm):04344                 RFCS
                      (        forth.asm):04345                 IFNE    SSDFEAT
FBDC BDE7F6           (        forth.asm):04346 (7)             jsr     NPOP
FBDF 1F12             (        forth.asm):04347 (4)             tfr     x,y
FBE1 8E03FA           (        forth.asm):04348 (3)             ldx     #HEXBUF
FBE4 BDE61E           (        forth.asm):04349 (7)             jsr     FINDSYM
                      (        forth.asm):04350                 ELSE
                      (        forth.asm):04351                 lda     #'$
                      (        forth.asm):04352                 jsr     PUTCH
                      (        forth.asm):04353                 jsr     NPOP
                      (        forth.asm):04354                 tfr     x,d
                      (        forth.asm):04355                 ldy     #HEXBUF
                      (        forth.asm):04356                 jsr     HDMP4
                      (        forth.asm):04357                 ENDC                    SSDFEAT
FBE7 8E03FA           (        forth.asm):04358 (3)             ldx     #HEXBUF
FBEA 7EE2E0           (        forth.asm):04359 (3)             jmp     PUTS
                      (        forth.asm):04360         
                      (        forth.asm):04361         * Display a dump of the data stack in the current BASE. In Leo Brodie's
                      (        forth.asm):04362         * "Starting Forth" the data stack is printed from the bottom up. So it is here.
FBED 02               (        forth.asm):04363         DDUMP   fcb     2               ANSI (Optional "Programming tools" word set)
FBEE 2E53             (        forth.asm):04364                 fcc     '.S'            ( -- )
FBF0 FBD7             (        forth.asm):04365                 fdb     DOTTICK
                      (        forth.asm):04366                 RFCS
FBF2 CC02F6           (        forth.asm):04367 (3)             ldd     #NSTBOT
FBF5 103230           (        forth.asm):04368 (4)             subr    u,d
FBF8 1044             (        forth.asm):04369 (2)             lsrd                    DEPTH is in D
FBFA 272A             (        forth.asm):04370 (3)             beq     @ndump3         Data stack is empty
FBFC 3440             (        forth.asm):04371 (4+2)           pshs    u
FBFE CE02F6           (        forth.asm):04372 (3)             ldu     #NSTBOT         Pointing to the bottom of the data stack
FC01 8601             (        forth.asm):04373 (2)             lda     #1
FC03 9741             (        forth.asm):04374 (3)             sta     CVISSGN         Force a signed number conversion
FC05 3404             (        forth.asm):04375 (4+1)   @ndump1 pshs    b
FC07 AEC3             (        forth.asm):04376 (5+2)           ldx     ,--u
FC09 BDE43D           (        forth.asm):04377 (7)             jsr     CVNSTR
FC0C 8E044A           (        forth.asm):04378 (3)             ldx     #TBUFF
                      (        forth.asm):04379         # Skip leading spaces.
FC0F A680             (        forth.asm):04380 (4+1)   @ndump2 lda     ,x+
FC11 8120             (        forth.asm):04381 (2)             cmpa    #SP
FC13 27FA             (        forth.asm):04382 (3)             beq     @ndump2
FC15 301F             (        forth.asm):04383 (4+1)           leax    -1,x
FC17 BDE2E0           (        forth.asm):04384 (7)             jsr     PUTS
FC1A 8620             (        forth.asm):04385 (2)             lda     #SP
FC1C BDE2CD           (        forth.asm):04386 (7)             jsr     PUTCH
FC1F 3504             (        forth.asm):04387 (4+1)           puls    b
FC21 5A               (        forth.asm):04388 (1)             decb
FC22 26E1             (        forth.asm):04389 (3)             bne     @ndump1
FC24 3540             (        forth.asm):04390 (4+2)           puls    u
FC26 39               (        forth.asm):04391 (4)     @ndump3 rts
                      (        forth.asm):04392         
FC27 04               (        forth.asm):04393         QRYDUP  fcb     4               ANSI (Core)
FC28 3F445550         (        forth.asm):04394                 fcc     '?DUP'          ( x -- 0 | x x )
FC2C FBED             (        forth.asm):04395                 fdb     DDUMP
                      (        forth.asm):04396                 RFCS
FC2E BDE7F6           (        forth.asm):04397 (7)             jsr     NPOP            ZFLAG is set by NPOP
FC31 3610             (        forth.asm):04398                 UCNPUSH                 Push back the original parameter
FC33 1026EBB1         (        forth.asm):04399 (5)             lbne    NPUSH           And DUP if NZ
FC37 39               (        forth.asm):04400 (4)             rts
                      (        forth.asm):04401         
FC38 04               (        forth.asm):04402         TUCK    fcb     4               ANSI (Core ext)
FC39 5455434B         (        forth.asm):04403                 fcc     'TUCK'          ( x1 x2 -- x2 x1 x2 ) i.e. SWAP OVER
FC3D FC27             (        forth.asm):04404                 fdb     QRYDUP
                      (        forth.asm):04405                 RFCS
FC3F 8D2B             (        forth.asm):04406                 RFXT    bsr,SWAP+7      XT for SWAP
FC41 2065             (        forth.asm):04407                 RFXT    bra,OVER+7      XT for OVER
                      (        forth.asm):04408         
FC43 03               (        forth.asm):04409         NIP     fcb     3               ANSI (Core ext)
FC44 4E4950           (        forth.asm):04410                 fcc     'NIP'           ( x1 x2 -- x2 ) i.e. SWAP DROP
FC47 FC38             (        forth.asm):04411                 fdb     TUCK
                      (        forth.asm):04412                 RFCS
FC49 8D21             (        forth.asm):04413                 RFXT    bsr,SWAP+7      XT for SWAP
FC4B 2015             (        forth.asm):04414                 RFXT    bra,DROP+7      XT for DROP
                      (        forth.asm):04415         
FC4D 03               (        forth.asm):04416         DUP     fcb     3               ANSI (Core)
FC4E 445550           (        forth.asm):04417                 fcc     'DUP'           ( x -- x x )
FC51 FC43             (        forth.asm):04418                 fdb     NIP
                      (        forth.asm):04419                 RFCS
FC53 BDE491           (        forth.asm):04420 (7)             jsr     MIN1PST         At least one cell needs to be stacked up
FC56 AEC4             (        forth.asm):04421 (5+0)           ldx     ,u
FC58 7EE7E8           (        forth.asm):04422 (3)             jmp     NPUSH
                      (        forth.asm):04423         
FC5B 04               (        forth.asm):04424         DROP    fcb     4               ANSI (Core)
FC5C 44524F50         (        forth.asm):04425                 fcc     'DROP'          ( x -- )
FC60 FC4D             (        forth.asm):04426                 fdb     DUP
                      (        forth.asm):04427                 RFCS
FC62 7EE7F6           (        forth.asm):04428 (3)             jmp     NPOP
                      (        forth.asm):04429         
FC65 04               (        forth.asm):04430         SWAP    fcb     4               ANSI (Core)
FC66 53574150         (        forth.asm):04431                 fcc     'SWAP'          ( x1 x2 -- x2 x1 )
FC6A FC5B             (        forth.asm):04432                 fdb     DROP
                      (        forth.asm):04433                 RFCS
FC6C BDE496           (        forth.asm):04434 (7)             jsr     MIN2PST         We need at least two cells stacked up
FC6F 10ECC4           (        forth.asm):04435 (8+0)           ldq     ,u              In place SWAP
FC72 1E06             (        forth.asm):04436 (5)             exg     d,w
FC74 10EDC4           (        forth.asm):04437 (8+0)           stq     ,u
FC77 39               (        forth.asm):04438 (4)             rts
                      (        forth.asm):04439         
FC78 04               (        forth.asm):04440         PICK    fcb     4               ANSI (Core ext)
FC79 5049434B         (        forth.asm):04441                 fcc     'PICK'          ( xu ... x1 x0 u -- xu ... x1 x0 xu )
FC7D FC65             (        forth.asm):04442                 fdb     SWAP
                      (        forth.asm):04443                 RFCS
FC7F BDE7F6           (        forth.asm):04444 (7)             jsr     NPOP            Arg <u> to X (expressed in cells)
FC82 CC02F6           (        forth.asm):04445 (3)     PICK1   ldd     #NSTBOT
FC85 103230           (        forth.asm):04446 (4)             subr    u,d
FC88 1044             (        forth.asm):04447 (2)             lsrd                    D has the data stack depth in cells
FC8A 103701           (        forth.asm):04448 (4)             cmpr    d,x             We need to make sure (unsigned) X < D
FC8D 2400             (        forth.asm):04449 (3)             bhs     @pick1
FC8F 1F10             (        forth.asm):04450 (4)     @pick1  tfr     x,d
FC91 1048             (        forth.asm):04451 (2)             lsld                    Arg <u> cells byte count to D
FC93 30CB             (        forth.asm):04452 (4+2)           leax    d,u
FC95 1F12             (        forth.asm):04453 (4)             tfr     x,y             For the sake of ROLL's implementation
FC97 AE84             (        forth.asm):04454 (5+0)           ldx     ,x
FC99 3610             (        forth.asm):04455                 UCNPUSH
FC9B 39               (        forth.asm):04456 (4)             rts
FC9C C60D             (        forth.asm):04457 (2)             ldb     #13             Argument is greater than or equal to DEPTH
FC9E BDE75E           (        forth.asm):04458 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):04459         
FCA1 04               (        forth.asm):04460         OVER    fcb     4               ANSI (Core)
FCA2 4F564552         (        forth.asm):04461                 fcc     'OVER'          ( x1 x2 -- x1 x2 x1 )
FCA6 FC78             (        forth.asm):04462                 fdb     PICK
                      (        forth.asm):04463                 RFCS
FCA8 8E0001           (        forth.asm):04464 (3)             ldx     #1
FCAB 20D5             (        forth.asm):04465 (3)             bra     PICK1
                      (        forth.asm):04466         
FCAD 04               (        forth.asm):04467         ROLL    fcb     4               ANSI (Core ext)
FCAE 524F4C4C         (        forth.asm):04468                 fcc     'ROLL'          ( xu xu-1 ... x0 u -- xu-1 ... x0 xu )
FCB2 FCA1             (        forth.asm):04469                 fdb     OVER
                      (        forth.asm):04470                 RFCS
FCB4 BDE7F6           (        forth.asm):04471 (7)             jsr     NPOP
FCB7 1F16             (        forth.asm):04472 (4)     ROLL1   tfr     x,w             Backup arg <u> to W
FCB9 8DC7             (        forth.asm):04473 (6)             bsr     PICK1           Let PICK do the error handling
FCBB 3121             (        forth.asm):04474 (4+1)           leay    1,y             Point to the LSB of the cell being picked
FCBD 303E             (        forth.asm):04475 (4+1)           leax    -2,y
FCBF 105C             (        forth.asm):04476 (2)             incw
FCC1 103066           (        forth.asm):04477 (4)             addr    w,w
FCC4 113912           (        forth.asm):04478 (6+?)           tfm     x-,y-
FCC7 7EE7F6           (        forth.asm):04479 (3)             jmp     NPOP
                      (        forth.asm):04480         
FCCA 03               (        forth.asm):04481         ROT     fcb     3               ANSI (Core)
FCCB 524F54           (        forth.asm):04482                 fcc     'ROT'           ( x1 x2 x3 -- x2 x3 x1 )
FCCE FCAD             (        forth.asm):04483                 fdb     ROLL
                      (        forth.asm):04484                 RFCS
FCD0 8E0002           (        forth.asm):04485 (3)             ldx     #2
FCD3 20E2             (        forth.asm):04486 (3)             bra     ROLL1
                      (        forth.asm):04487         
FCD5 04               (        forth.asm):04488         MROT    fcb     4
FCD6 2D524F54         (        forth.asm):04489                 fcc     '-ROT'
FCDA FCCA             (        forth.asm):04490                 fdb     ROT
                      (        forth.asm):04491                 RFCS
FCDC 8DF2             (        forth.asm):04492                 RFXT    bsr,ROT+6       XT for ROT
FCDE 20F0             (        forth.asm):04493                 RFXT    bra,ROT+6       XT for ROT
                      (        forth.asm):04494         
FCE0 02               (        forth.asm):04495         CCOMMA  fcb     2               ANSI (Core)
FCE1 432C             (        forth.asm):04496                 fcc     'C,'            ( char -- )
FCE3 FCD5             (        forth.asm):04497                 fdb     MROT
                      (        forth.asm):04498                 RFCS
FCE5 BDE7F6           (        forth.asm):04499 (7)             jsr     NPOP
FCE8 1F10             (        forth.asm):04500 (4)             tfr     x,d
FCEA 109E08           (        forth.asm):04501 (5)             ldy     DICEND
FCED E7A0             (        forth.asm):04502 (4+1)           stb     ,y+
FCEF 109F08           (        forth.asm):04503 (5)             sty     DICEND
FCF2 39               (        forth.asm):04504 (4)             rts
                      (        forth.asm):04505         
FCF3 01               (        forth.asm):04506         COMMA   fcb     1               ANSI (Core)
FCF4 2C               (        forth.asm):04507                 fcc     ','             ( x -- )
FCF5 FCE0             (        forth.asm):04508                 fdb     CCOMMA
                      (        forth.asm):04509                 RFCS
FCF7 BDE7F6           (        forth.asm):04510 (7)             jsr     NPOP
FCFA 109E08           (        forth.asm):04511 (5)             ldy     DICEND
FCFD AFA1             (        forth.asm):04512 (5+2)           stx     ,y++
FCFF 109F08           (        forth.asm):04513 (5)             sty     DICEND
FD02 39               (        forth.asm):04514 (4)             rts
                      (        forth.asm):04515         
FD03 05               (        forth.asm):04516         ALLOT   fcb     5               ANSI (Core)
FD04 414C4C4F54       (        forth.asm):04517                 fcc     'ALLOT'         ( n -- )
FD09 FCF3             (        forth.asm):04518                 fdb     COMMA
                      (        forth.asm):04519                 RFCS
FD0B BDE7F6           (        forth.asm):04520 (7)             jsr     NPOP            N to X
FD0E DC08             (        forth.asm):04521 (4)             ldd     DICEND
FD10 308B             (        forth.asm):04522 (4+2)           leax    d,x
FD12 9F08             (        forth.asm):04523 (4)             stx     DICEND          Adjust HERE
FD14 39               (        forth.asm):04524 (4)             rts
                      (        forth.asm):04525         
FD15 04               (        forth.asm):04526         FILL    fcb     4               ANSI (Core)
FD16 46494C4C         (        forth.asm):04527                 fcc     'FILL'          ( c-addr u char -- )
FD1A FD03             (        forth.asm):04528                 fdb     ALLOT
                      (        forth.asm):04529                 RFCS
FD1C BDE7F6           (        forth.asm):04530 (7)             jsr     NPOP
FD1F 1F16             (        forth.asm):04531 (4)             tfr     x,w             Byte fill value to W
FD21 BDE7F6           (        forth.asm):04532 (7)     FILL1   jsr     NPOP
FD24 1F12             (        forth.asm):04533 (4)             tfr     x,y             Byte count to Y
FD26 1E26             (        forth.asm):04534 (5)             exg     y,w             Byte count to W, byte fill value to Y
FD28 BDE7F6           (        forth.asm):04535 (7)             jsr     NPOP            Destination address to X
FD2B 105D             (        forth.asm):04536 (2)             tstw
FD2D 2F0B             (        forth.asm):04537 (3)             ble     @filend
FD2F 1F20             (        forth.asm):04538 (4)             tfr     y,d             Byte fill value to B
FD31 E784             (        forth.asm):04539 (4+0)           stb     ,x
FD33 105A             (        forth.asm):04540 (2)             decw
FD35 3101             (        forth.asm):04541 (4+1)           leay    1,x
FD37 113812           (        forth.asm):04542 (6+?)           tfm     x+,y+
FD3A 39               (        forth.asm):04543 (4)     @filend rts
                      (        forth.asm):04544         
FD3B 05               (        forth.asm):04545         BLANK   fcb     5               ANSI (String)
FD3C 424C414E4B       (        forth.asm):04546                 fcc     'BLANK'         ( c-addr u -- )
FD41 FD15             (        forth.asm):04547                 fdb     FILL
                      (        forth.asm):04548                 RFCS
FD43 10860020         (        forth.asm):04549 (4)             ldw     #SP
FD47 20D8             (        forth.asm):04550 (3)             bra     FILL1
                      (        forth.asm):04551         
FD49 06               (        forth.asm):04552         CMOVED  fcb     6               FORTH-83
FD4A 434D4F56453E     (        forth.asm):04553                 fcc     'CMOVE>'
FD50 FD3B             (        forth.asm):04554                 fdb     BLANK
                      (        forth.asm):04555                 RFCS
FD52 BDE59E           (        forth.asm):04556 (7)             jsr     ACQMOVP
FD55 105D             (        forth.asm):04557 (2)             tstw
FD57 270D             (        forth.asm):04558 (3)             beq     @cmovd1
FD59 105A             (        forth.asm):04559 (2)     CMOVD1  decw
FD5B 103061           (        forth.asm):04560 (4)             addr    w,x
FD5E 103062           (        forth.asm):04561 (4)             addr    w,y
FD61 105C             (        forth.asm):04562 (2)             incw
FD63 113912           (        forth.asm):04563 (6+?)           tfm     x-,y-
FD66 39               (        forth.asm):04564 (4)     @cmovd1 rts
                      (        forth.asm):04565         
FD67 05               (        forth.asm):04566         CMOVE   fcb     5               79-STANDARD (REQ153)
FD68 434D4F5645       (        forth.asm):04567                 fcc     'CMOVE'
FD6D FD49             (        forth.asm):04568                 fdb     CMOVED
                      (        forth.asm):04569                 RFCS
FD6F BDE59E           (        forth.asm):04570 (7)             jsr     ACQMOVP
FD72 113812           (        forth.asm):04571 (6+?)           tfm     x+,y+
FD75 39               (        forth.asm):04572 (4)             rts
                      (        forth.asm):04573         
                      (        forth.asm):04574         * Functionally:
                      (        forth.asm):04575         * : MOVE ( addr1 addr2 u -- )      \ u is expressed in bytes
                      (        forth.asm):04576         *   DUP 2OVER                      \ addr1 addr2 u u addr1 addr2
                      (        forth.asm):04577         *   SWAP -                         \ addr1 addr2 u u addr2-addr1
                      (        forth.asm):04578         *   SWAP                           \ addr1 addr2 u addr2-addr1 u
                      (        forth.asm):04579         *   U< IF CMOVE> ELSE CMOVE THEN ;
                      (        forth.asm):04580         * For those who care to read the 1994 specification, arg <u> is expressed in
                      (        forth.asm):04581         * address units. For the rest of us, mere mortals, this is just a byte count.
                      (        forth.asm):04582         * As an aside, this is functionality provided by the glibc memmove function.
FD76 04               (        forth.asm):04583         MOVE    fcb     4               ANSI (Core)
FD77 4D4F5645         (        forth.asm):04584                 fcc     'MOVE'          ( addr1 addr2 u -- )
FD7B FD67             (        forth.asm):04585                 fdb     CMOVE
                      (        forth.asm):04586                 RFCS
FD7D BDE59E           (        forth.asm):04587 (7)             jsr     ACQMOVP         ADDR1 -> X, ADDR2 -> Y, U -> W
FD80 105D             (        forth.asm):04588 (2)             tstw
FD82 270D             (        forth.asm):04589 (3)             beq     @movend
                      (        forth.asm):04590         * addr2 addr1 - u U< IF CMOVE> ELSE CMOVE THEN
FD84 1F20             (        forth.asm):04591 (4)             tfr     y,d             D has addr2 (dest)
FD86 103210           (        forth.asm):04592 (4)             subr    x,d             D has addr2 - addr1 (dest - src)
FD89 103760           (        forth.asm):04593 (4)             cmpr    w,d
FD8C 25CB             (        forth.asm):04594 (3)             blo     CMOVD1          CMOVE>
FD8E 113812           (        forth.asm):04595 (6+?)           tfm     x+,y+           CMOVE
FD91 39               (        forth.asm):04596 (4)     @movend rts
                      (        forth.asm):04597         
FD92 05               (        forth.asm):04598         CELLS   fcb     5               ANSI (Core)
FD93 43454C4C53       (        forth.asm):04599                 fcc     'CELLS'         ( n1 -- n2 )
FD98 FD76             (        forth.asm):04600                 fdb     MOVE
                      (        forth.asm):04601                 RFCS
FD9A BDE7F6           (        forth.asm):04602 (7)             jsr     NPOP            N1 to X
FD9D 103011           (        forth.asm):04603 (4)             addr    x,x             Times 2
FDA0 3610             (        forth.asm):04604                 UCNPUSH                 X to N2
FDA2 39               (        forth.asm):04605 (4)             rts
                      (        forth.asm):04606         
FDA3 04               (        forth.asm):04607         LAST    fcb     4               79-STANDARD (REF)
FDA4 4C415354         (        forth.asm):04608                 fcc     'LAST'
FDA8 FD92             (        forth.asm):04609                 fdb     CELLS
                      (        forth.asm):04610                 RFCS
FDAA 9E06             (        forth.asm):04611 (4)             ldx     LSTWAD
FDAC 7EE7E8           (        forth.asm):04612 (3)             jmp     NPUSH
                      (        forth.asm):04613         
FDAF 04               (        forth.asm):04614         HERE    fcb     4               ANSI (Core)
FDB0 48455245         (        forth.asm):04615                 fcc     'HERE'          ( -- addr )
FDB4 FDA3             (        forth.asm):04616                 fdb     LAST
                      (        forth.asm):04617                 RFCS
FDB6 9E08             (        forth.asm):04618 (4)             ldx     DICEND
FDB8 7EE7E8           (        forth.asm):04619 (3)             jmp     NPUSH
                      (        forth.asm):04620         
FDBB 02               (        forth.asm):04621         PLUSST  fcb     2               ANSI (Core)
FDBC 2B21             (        forth.asm):04622                 fcc     '+!'            ( n|u a-addr -- )
FDBE FDAF             (        forth.asm):04623                 fdb     HERE
                      (        forth.asm):04624                 RFCS
FDC0 BDE496           (        forth.asm):04625 (7)             jsr     MIN2PST         We need at least two cells stacked up
FDC3 AEC4             (        forth.asm):04626 (5+0)           ldx     ,u              ADDR to X
FDC5 EC84             (        forth.asm):04627 (5+0)           ldd     ,x              @ADDR to D
FDC7 E342             (        forth.asm):04628 (5+1)           addd    2,u             Add INCR to D
FDC9 ED84             (        forth.asm):04629 (5+0)           std     ,x              Store the sum back to ADDR
FDCB 3344             (        forth.asm):04630 (4+1)           leau    4,u             Drop two cells from the data stack
FDCD 39               (        forth.asm):04631 (4)             rts
                      (        forth.asm):04632         
FDCE 02               (        forth.asm):04633         CSTORE  fcb     2               ANSI (Core)
FDCF 4321             (        forth.asm):04634                 fcc     'C!'            ( char c-addr -- )
FDD1 FDBB             (        forth.asm):04635                 fdb     PLUSST
                      (        forth.asm):04636                 RFCS
FDD3 BDE496           (        forth.asm):04637 (7)             jsr     MIN2PST         We need at least two cells stacked up
FDD6 A643             (        forth.asm):04638 (4+1)           lda     3,u             CHAR to A
FDD8 A7D4             (        forth.asm):04639 (4+3)           sta     [,u]            Actual store to C-ADDR
FDDA 3344             (        forth.asm):04640 (4+1)           leau    4,u             Drop two cells from the data stack
FDDC 39               (        forth.asm):04641 (4)             rts
                      (        forth.asm):04642         
FDDD 01               (        forth.asm):04643         STORE   fcb     1               ANSI (Core)
FDDE 21               (        forth.asm):04644                 fcc     '!'             ( x a-addr -- )
FDDF FDCE             (        forth.asm):04645                 fdb     CSTORE
                      (        forth.asm):04646                 RFCS
FDE1 BDE496           (        forth.asm):04647 (7)             jsr     MIN2PST         At least two cells need to be stacked up
FDE4 EC42             (        forth.asm):04648 (5+1)           ldd     2,u             X to D
FDE6 EDD4             (        forth.asm):04649 (5+3)           std     [,u]            Actual store to A-ADDR
FDE8 3344             (        forth.asm):04650 (4+1)           leau    4,u             Drop two cells from the user stack
FDEA 39               (        forth.asm):04651 (4)             rts
                      (        forth.asm):04652         
FDEB 02               (        forth.asm):04653         CFETCH  fcb     2               ANSI (Core)
FDEC 4340             (        forth.asm):04654                 fcc     'C@'            ( c-addr -- char )
FDEE FDDD             (        forth.asm):04655                 fdb     STORE
                      (        forth.asm):04656                 RFCS
FDF0 BDE491           (        forth.asm):04657 (7)             jsr     MIN1PST         We need at least one cell stacked up
FDF3 4F               (        forth.asm):04658 (1)             clra
FDF4 E6D4             (        forth.asm):04659 (4+3)           ldb     [,u]
FDF6 EDC4             (        forth.asm):04660 (5+0)           std     ,u
FDF8 39               (        forth.asm):04661 (4)             rts
                      (        forth.asm):04662         
FDF9 01               (        forth.asm):04663         QMARK   fcb     1               79-STANDARD (REQ194)
FDFA 3F               (        forth.asm):04664                 fcc     '?'
FDFB FDEB             (        forth.asm):04665                 fdb     CFETCH
                      (        forth.asm):04666                 RFCS
FDFD BD0CC4           (        forth.asm):04667 (7)             jsr     RAMFTCH         Call the RAM based incarnation of @
FE00 7EF63C           (        forth.asm):04668                 RFXT    jmp,DOT+4       XT for .
                      (        forth.asm):04669         
                      (        forth.asm):04670         * End of ROM part of the builtin dictionary.
     FE03             (        forth.asm):04671         THEEND  equ     *               This is the end, Beautiful friend
                      (        forth.asm):04672         *                               This is the end, My only friend
                      (        forth.asm):04673         
                      (        forth.asm):04674         * This transactional word is relocated to RAM, so that we can compile new
                      (        forth.asm):04675         * definitions. FORTHIN will take care of that and adjust the relevant pointers.
FE03 01               (        forth.asm):04676         FETCH   fcb     1               ANSI (Core)
FE04 40               (        forth.asm):04677                 fcc     '@'             ( a-addr -- x )
FE05 FDF9             (        forth.asm):04678                 fdb     QMARK
                      (        forth.asm):04679                 RFCS
FE07 BDE491           (        forth.asm):04680 (7)             jsr     MIN1PST         At least one cell needs to be stacked up
FE0A ECD4             (        forth.asm):04681 (5+3)           ldd     [,u]
FE0C EDC4             (        forth.asm):04682 (5+0)           std     ,u              Returned through the data stack
FE0E 39               (        forth.asm):04683 (4)             rts
                      (        forth.asm):04684         
     FE0F             (        forth.asm):04685         REALEND equ     *
                      (        forth.asm):04686         
                      (        forth.asm):04687         *******************************************************************************
                      (        forth.asm):04688         * String literals.
                      (        forth.asm):04689         
                      (        forth.asm):04690         * Using CR+LF as it is Minicom's default.
                      (        forth.asm):04691         
                      (        forth.asm):04692         * Clear the screen, VT100 style.
FE0F 1B5B481B5B4A0D00 (        forth.asm):04693         CSVT100 fcb     $1B,'[','H',$1B,'[','J',CR,NUL
                      (        forth.asm):04694         
FE17 0D0A             (        forth.asm):04695         BOOTMSG fcb     CR,LF
                      (        forth.asm):04696                 IFNE    RTCFEAT
                      (        forth.asm):04697                 fcc     'Z79Forth/AR 6309 ANS Forth System'
                      (        forth.asm):04698                 ELSE
FE19 5A3739466F727468 (        forth.asm):04699                 fcc     'Z79Forth/A  6309 ANS Forth System'
     2F41202036333039
     20414E5320466F72
     7468205379737465
     6D
                      (        forth.asm):04700                 ENDC                    RTCFEAT
FE3A 0D0A             (        forth.asm):04701                 fcb     CR,LF
FE3C 3230323231303133 (        forth.asm):04702                 fcc     '20221013 (C) Francois Laagel 2019'
     2028432920467261
     6E636F6973204C61
     6167656C20323031
     39
FE5D 0D0A0D0A00       (        forth.asm):04703                 fcb     CR,LF,CR,LF,NUL
                      (        forth.asm):04704         
FE62 52414D204F4B3A20 (        forth.asm):04705         RAMOKM  fcc     'RAM OK: 32 KB'
     3332204B42
FE6F 0D0A00           (        forth.asm):04706         CRLFSTR fcb     CR,LF,NUL
                      (        forth.asm):04707         
FE72 52414D2063686563 (        forth.asm):04708         RAMFM   fcc     'RAM check failed'
     6B206661696C6564
FE82 0D0A00           (        forth.asm):04709                 fcb     CR,LF,NUL
                      (        forth.asm):04710         
                      (        forth.asm):04711                 IFNE    RTCFEAT
FE85                  (        forth.asm):04712         RTPRESM fcc     'MC146818 RTC'
                      (        forth.asm):04713                 fcb     CR,LF,NUL
                      (        forth.asm):04714                 ENDC
                      (        forth.asm):04715         
                      (        forth.asm):04716                 IFEQ    CSSNTVE
FE85 206F6B           (        forth.asm):04717         OKFEEDB fcc     ' ok'           As per GNU Forth's implementation...
                      (        forth.asm):04718                 ELSE
FE88                  (        forth.asm):04719         OKFEEDB fcc     ' OK'
                      (        forth.asm):04720                 ENDC                    CSSNTVE
FE88 0D0A00           (        forth.asm):04721                 fcb     CR,LF,NUL
                      (        forth.asm):04722         
                      (        forth.asm):04723         * Error messages for IODZHDL.
FE8B 496C6C6567616C20 (        forth.asm):04724         IOPERRM fcn     'Illegal opcode near '
     6F70636F6465206E
     6561722000
FEA0 4469766973696F6E (        forth.asm):04725         DV0ERRM fcn     'Division by 0 near '
     2062792030206E65
     61722000
                      (        forth.asm):04726         
FEB4 4461746120737461 (        forth.asm):04727         ERRMTBL fcn     'Data stack overflow'   Error 0
     636B206F76657266
     6C6F7700
FEC8 4461746120737461 (        forth.asm):04728                 fcn     'Data stack underflow'  Error 1
     636B20756E646572
     666C6F7700
FEDD 3F00             (        forth.asm):04729                 fcn     '?'                     Error 2
FEDF 557365722041424F (        forth.asm):04730                 fcn     'User ABORT'            Error 3
     525400
FEEA 4F6F52206572726F (        forth.asm):04731                 fcn     'OoR error'             Error 4 (formerly 'Division by zero')
     7200
FEF4 4D697373696E6720 (        forth.asm):04732                 fcn     'Missing word name'     Error 5
     776F7264206E616D
     6500
FF06 496E636F72726563 (        forth.asm):04733                 fcn     'Incorrect STATE'       Error 6
     7420535441544500
FF16 52657475726E2073 (        forth.asm):04734                 fcn     'Return stack overflow' Error 7
     7461636B206F7665
     72666C6F7700
FF2C 52657475726E2073 (        forth.asm):04735                 fcn     'Return stack underflow' Error 8
     7461636B20756E64
     6572666C6F7700
FF43 496C6C6567616C20 (        forth.asm):04736                 fcn     'Illegal construct'     Error 9
     636F6E7374727563
     7400
FF55 417373657274696F (        forth.asm):04737                 fcn     'Assertion failed'      Error 10
     6E206661696C6564
     00
FF66 524F20776F726400 (        forth.asm):04738                 fcn     'RO word'               Error 11
FF6E 4D697373696E6720 (        forth.asm):04739                 fcn     'Missing delimiter'     Error 12
     64656C696D697465
     7200
FF80 496C6C6567616C20 (        forth.asm):04740                 fcn     'Illegal argument'      Error 13
     617267756D656E74
     00
FF91 4E6F206D61746368 (        forth.asm):04741                 fcn     'No matching CREATE'    Error 14
     696E672043524541
     544500
FFA4 496E76616C696420 (        forth.asm):04742                 fcn     'Invalid BASE'          Error 15
     4241534500
FFB1 576F7264206E616D (        forth.asm):04743                 fcn     'Word name too long'    Error 16
     6520746F6F206C6F
     6E6700
FFC4 494F206572726F72 (        forth.asm):04744                 fcn     'IO error'              Error 17
     00
                      (        forth.asm):04745         
                      (        forth.asm):04746         * A-list used for numeric literal base prefixes.
FFCD 24               (        forth.asm):04747         BASALST fcc     '$'             Hexadecimal prefix
FFCE 10               (        forth.asm):04748                 fcb     16
FFCF 26               (        forth.asm):04749                 fcc     '&'             Decimal prefix (as in LWASM, VolksForth)
FFD0 0A               (        forth.asm):04750                 fcb     10
FFD1 23               (        forth.asm):04751                 fcc     '#'             Decimal prefix
FFD2 0A               (        forth.asm):04752                 fcb     10
FFD3 25               (        forth.asm):04753                 fcc     '%'             Binary prefix
FFD4 02               (        forth.asm):04754                 fcb     2
FFD5 40               (        forth.asm):04755                 fcc     '@'             Octal prefix
FFD6 08               (        forth.asm):04756                 fcb     8
FFD7 00               (        forth.asm):04757                 fcb     0               End of list marker
                      (        forth.asm):04758         
                      (        forth.asm):04759         * Under no circumstance should the following symbol be negative!
     0018             (        forth.asm):04760         AVL     equ     VECTBL-*        Available EEPROM space left
                      (        forth.asm):04761         
                      (        forth.asm):04762         *******************************************************************************
                      (        forth.asm):04763         * Interrupt vector table
                      (        forth.asm):04764                 org     VECTBL
                      (        forth.asm):04765         
FFF0 E000             (        forth.asm):04766                 fdb     IODZHDL         Illegal opcode/Division by zero trap
FFF2 E036             (        forth.asm):04767                 fdb     SWI3HDL         SWI 3 interrupt vector address
FFF4 E036             (        forth.asm):04768                 fdb     SWI2HDL         SWI 2 interrupt vector address
FFF6 E242             (        forth.asm):04769                 fdb     FIRQHDL         FIRQ interrupt vector address
FFF8 E036             (        forth.asm):04770                 fdb     IRQHDL          IRQ interrupt vector address
FFFA E036             (        forth.asm):04771                 fdb     SWIHDL          SWI interrupt vector address
FFFC E1CA             (        forth.asm):04772                 fdb     NMIHDL          NMI vector address
FFFE E037             (        forth.asm):04773                 fdb     RSTHDL          RESET vector address
                      (        forth.asm):04774         

Symbol Table:
[ G] _BS                              E2F7
[ G] _INTERP                          E0CE
[ G] ABORT                            F0E6
[ G] ABS                              EF9C
[ G] AC8N1                            0014
[ G] ACCEPT                           F766
[ G] ACDIV16                          0001
[ G] ACIACTL                          D800
[ G] ACIADAT                          D801
[ G] ACIISVC                          0080
[ G] ACIOVRN                          0020
[ G] ACIRDRF                          0001
[ G] ACIRSET                          0043
[ G] ACIRTS0                          0095
[ G] ACIRTS1                          00D5
[ G] ACITDRE                          0002
[ G] ACQMOVP                          E59E
[ G] ACQVMRA                          E5A1
[ G] ACRDINT                          0080
[ G] ACRST                            0003
[ G] ACRTS0                           0000
[ G] ACRTS1                           0040
[ G] ADDS                             E1AA
[ G] ADIV16                           E17D
[ G] AGAIN                            EFD9
[ G] AGAIN1                           EFF1
[ G] AHEAD                            EDCA
[ G] AHEAD1                           EDD5
[ G] ALIGN                            EB59
[ G] ALIGND                           EB62
[ G] ALLOT                            FD03
[ G] ANCMPF                           0134
[ G] AND                              EEAF
[SG] ANSFEAT                          0001
[ G] APADBUF                          01E2
[ G] AVL                              0018
[ G] BALCHK                           E83D
[ G] BALERR                           E842
[ G] BALNCD                           0135
[ G] BASALST                          FFCD
[ G] BASBKUP                          0136
[ G] BASE                             FBAF
[ G] BASESET                          FBC9
[ G] BCSOPC                           2503
[ G] BDICEND                          010C
[ G] BDIRTY                           0004
[ G] BEGIN                            EFC5
[ G] BFDISP                           0410
[ G] BINUSE                           0001
[ G] BKCHAR                           F288
[ G] BKIN2PT                          E87C
[ G] BKQUOT                           F167
[ G] BKSLSH                           F325
[ G] BL                               F6A5
[ G] BLANK                            FD3B
[ G] BLK                              EACE
[ G] BLKSIZ                           0400
[ G] BLOCK                            EAA0
[ G] BLSTWAD                          010A
[ G] BMAPPD                           0002
[ G] BNEOPC                           2603
[ G] BOBLKNO                          0402
[ G] BOFLAGS                          0401
[ G] BOOTMSG                          FE17
[ G] BOTERM                           0400
[ G] BS                               0008
[ G] BSBFADR                          0120
[ G] BUF0                             04A0
[ G] BUF1                             08B0
[ G] BUFFER                           EA54
[ G] BYE                              F27F
[ G] CCOMMA                           FCE0
[ G] CCREGM                           E20D
[ G] CELLP                            F896
[ G] CELLS                            FD92
[ G] CF1BKRD                          E997
[ G] CF1BKWR                          E9B2
[ G] CF1BPRE                          E97A
[ G] CF1SRD                           E946
[ G] CF1SWR                           E965
[ G] CFANTHS                          E8F1
[ G] CFBASE                           C000
[ G] CFBSYB                           0080
[ G] CFCARDP                          0146
[ G] CFCHIGR                          C005
[ G] CFCLOWR                          C004
[ G] CFCMDIS                          E8D6
[ G] CFCMMIR                          0147
[ G] CFCOMDR                          C007
[ G] CFDATAR                          C000
[ G] CFDRHDR                          C006
[ G] CFDRQB                           0008
[ G] CFDRSEL                          E8E8
[ G] CFDSCB                           0010
[ G] CFDWFB                           0020
[ G] CFERRB                           0001
[ G] CFERRCD                          0148
[ G] CFERRCK                          E8C9
[ G] CFERROR                          C001
[ G] CFETCH                           FDEB
[ G] CFFEATR                          C001
[ G] CFIDDEV                          00EC
[ G] CFINIT                           E90F
[ G] CFLAG                            0001
[ G] CFR1SRA                          E964
[ G] CFRDY                            E8B3
[ G] CFRDYB                           0040
[ G] CFRSCTS                          0020
[ G] CFSCNTR                          C002
[ G] CFSCSZ                           0200
[ G] CFSETFT                          00EF
[ G] CFSNUMR                          C003
[ G] CFSTATR                          C007
[ G] CFWAIT                           E8AB
[ G] CFWSCTS                          0030
[ G] CHAR                             F296
[ G] CHARP                            EB6F
[ G] CHARS                            EB7A
[ G] CHKNDPT                          E486
[ G] CKBASE                           E3D2
[ G] CKBASRA                          E3E2
[ G] CKDPTRA                          E491
[ G] CKNBPFX                          E3A7
[ G] CMDBFSZ                          0084
[ G] CMDBUF                           0376
[ G] CMOVD1                           FD59
[ G] CMOVE                            FD67
[ G] CMOVED                           FD49
[ G] CMP2                             E58A
[ G] CMP2RA                           E58D
[ G] CMPCOMA                          F1AC
[ G] COMMA                            FCF3
[ G] COMP                             E116
[ G] COMPC                            F1BD
[ G] COMPC1                           F1C3
[ G] COMPLRA                          E12A
[ G] COMPR                            F1EE
[ G] CONS                             EC45
[ G] CONVERT                          F4A8
[ G] COUNT                            F717
[ G] CR                               000D
[ G] CREAT1                           EBEE
[ G] CREATE                           EBCD
[ G] CRLF                             F6E6
[ G] CRLFSTR                          FE6F
[ G] CSPOP                            E7F6
[ G] CSPUSH                           E7E8
[ G] CSSNTVE                          0000
[ G] CSTORE                           FDCE
[ G] CSVT100                          FE0F
[ G] CURTOKL                          0142
[ G] CVISSGN                          0141
[ G] CVNSTR                           E43D
[ G] CVT                              F56B
[ G] CVT0                             F571
[ G] CVT1                             F579
[ G] CVTB                             F62D
[ G] CVTE                             F525
[ G] CVTFCN                           013E
[ G] DASHTR                           F72C
[ G] DBDIVSG                          F5CA
[ G] DDUMP                            FBED
[ G] DEBUG                            0000
[ G] DECIMAL                          FBBC
[ G] DEFFLG                           0144
[ G] DEFFLM                           0040
[ G] DEPTH                            EBB8
[ G] DEV0                             C000
[ G] DEV1                             C400
[ G] DEV2                             C800
[ G] DEV3                             CC00
[ G] DEV4                             D000
[ G] DEV5                             D400
[ G] DEV6                             D800
[ G] DEV7                             DC00
[ G] DICEND                           0108
[ G] DIFF                             EE53
[ G] DIV                              F9BC
[ G] DIV1                             F9C4
[ G] DIVDBL                           0139
[ G] DIVFCN                           0138
[ G] DIVSYM                           013A
[ G] DLESS                            F405
[ G] DMINUS                           F3E1
[ G] DNEG                             F3BF
[ G] DO                               ED16
[ G] DOES                             EBF6
[ G] DOESEX                           EC04
[ G] DOEX                             ED2D
[ G] DOT                              F638
[ G] DOTR                             F660
[ G] DOTR0                            F669
[ G] DOTTICK                          FBD7
[ G] DPLUS                            F3A7
[ G] DPOPRA                           E807
[ G] DPREGM                           E219
[ G] DPSHRA                           E7F5
[ G] DREGM                            E211
[ G] DROP                             FC5B
[ G] DUP                              FC4D
[ G] DV0ERRM                          FEA0
[ G] DVFDIV                           0002
[ G] DVFMASK                          0007
[ G] DVFMOD                           0001
[ G] DVFSLMD                          0000
[ G] DVOA1D                           0008
[ G] DVOWSYM                          0010
[ G] DZEQ                             F3F9
[ G] EBUFS                            E9CD
[ G] ELSE                             EE0E
[ G] EMIT                             F857
[ G] EMPT1B                           E9E5
[ G] EMPTYB                           E9DD
[ G] EMXASXT                          E155
[ G] EQ                               EE3B
[ G] ERRHD1                           E761
[ G] ERRHDLR                          E75E
[ G] ERRMTBL                          FEB4
[ G] ETX                              0003
[ G] EVAL                             F7D6
[ G] EXCT                             F269
[ G] EXIT                             EFFC
[ G] F83DIVF                          013C
[ G] FALSE                            F8B9
[ G] FDCTSYM                          E5AC
[ G] FDIVADJ                          FA2C
[ G] FETCH                            FE03
[ G] FFLAG                            0040
[ G] FILL                             FD15
[ G] FILL1                            FD21
[ G] FIND                             F0F3
[ G] FINDSYM                          E61E
[ G] FIRQHDL                          E242
[ G] FLUSH                            EA30
[ G] FMSLMOD                          F99E
[ G] FNDPLD                           0110
[ G] FORTHIN                          E341
[ G] FWDREF                           0116
[ G] GETCH                            E2A1
[ G] GETS                             E303
[ G] HDMP2                            E19B
[ G] HDMP4                            E182
[ G] HERE                             FDAF
[ G] HEX                              FBCC
[ G] HEX1D                            E169
[ G] HEXBFSZ                          0050
[ G] HEXBUF                           03FA
[ G] HOLD                             F552
[ G] HT                               0009
[ G] HVNMI                            0001
[ G] HVNMI2                           0000
[ G] ICHECK                           ECC7
[ G] IF                               EDEB
[ G] IFLAG                            0010
[ G] ILLOPC                           00C7
[ G] IMDFLG                           0143
[ G] IMDFLM                           0080
[ G] IMMED                            EC88
[ G] IMMED1                           EC96
[ G] INDI                             F08C
[ G] INDIP                            F0AE
[ G] INDJ                             F0B7
[ G] INDJP                            F0BF
[ G] INDK                             F0C8
[ G] INF                              EF5E
[ G] INIT                             E047
[ G] INTERP                           E0B2
[ G] INTISRA                          E106
[ G] INTRPRA                          E111
[ G] INVERT                           EEC2
[ G] IODZHDL                          E000
[ G] IOERR                            E95F
[ G] IOPERRM                          FE8B
[ G] IOSTRT                           C000
[ G] IRQHDL                           E036
[ G] ISDBLF                           0140
[ G] ISEADDR                          0128
[ G] ISERCHD                          E361
[ G] ISLEN                            0126
[ G] ISNEGF                           013F
[ G] JMPOPC                           007E
[ G] JSRLAST                          0114
[ G] JSROPC                           00BD
[ G] KEY                              F846
[ G] KEYP                             F834
[ G] LAST                             FDA3
[ G] LBRACK                           F141
[ G] LDXOPC                           008E
[ G] LEAVE                            F06E
[ G] LF                               000A
[ G] LIST                             EB1B
[ G] LITER                            E56E
[ G] LITERAL                          EC22
[ G] LOAD                             F7AF
[ G] LOAD1                            F7BC
[ G] LOAD2                            F7CA
[ G] LOCWRT                           E513
[ G] LOOP                             ED36
[ G] LOOP1                            ED40
[ G] LOOPEX                           ED7D
[ G] LPAR                             F303
[ G] LSTWAD                           0106
[ G] LWMNRA                           E52A
[ G] MARKER                           F235
[ G] MAX                              EF6C
[ G] MILLIS                           F81E
[ G] MILLIS1                          F828
[ G] MIN                              EF84
[ G] MIN1PST                          E491
[ G] MIN2PST                          E496
[ G] MIN3PST                          E49B
[ G] MIN4PST                          E4A0
[ G] MINTLRA                          E0CC
[ G] MINUS                            F8A9
[ G] MOD                              F987
[ G] MONITOR                          ECAF
[ G] MOVE                             FD76
[ G] MROT                             FCD5
[ G] MRUBUFA                          011E
[ G] MSLCNT                           031A
[ G] MSTAR                            F915
[ G] MULFCN                           013B
[ G] MULT                             F8FA
[ G] MULT1                            F900
[ G] NAK                              0015
[ G] NCLR                             EB9E
[ G] NDCTWKS                          E644
[ G] NEGATE                           EFB2
[ G] NIP                              FC43
[ G] NMCVCRA                          E13C
[ G] NMCVIRA                          E0E4
[ G] NMI2DM                           E1B5
[ G] NMI4DM                           E1BB
[ G] NMIDML                           E1C1
[ G] NMIHDL                           E1CA
[ G] NONAME                           F1DE
[ G] NOT                              EF2A
[ G] NPOP                             E7F6
[ G] NPUSH                            E7E8
[ G] NSTBOT                           02F6
[ G] NSTKSZ                           00C0
[ G] NSTTOP                           0236
[ G] NUL                              0000
[ G] NULP                             EF09
[ G] NUMCVRA                          E43C
[ G] NUMCVT                           E3E2
[ G] NXTCHAR                          E3A0
[ G] OKFEEDB                          FE85
[ G] ONEM                             F878
[ G] ONEP                             F887
[ G] OR                               EE9D
[ G] OVER                             FCA1
[ G] PAD                              F6EE
[ G] PADBSZ                           0054
[ G] PADBUF                           018E
[ G] PAGE                             F6D9
[ G] PAYLOAD                          FACB
[ G] PCREGM                           E22A
[ G] PICK                             FC78
[ G] PICK1                            FC82
[ G] PLOAD                            010E
[ G] PLOOP                            ED82
[ G] PLOOPEX                          ED8F
[ G] PLOPEX1                          ED92
[ G] PLUS                             F868
[ G] PLUSST                           FDBB
[ G] POSTPON                          F172
[ G] pragma                           0000
[ G] PRBLKIN                          E731
[ G] PREAPAD                          F5B7
[ G] PSTR                             F342
[ G] PTOP0                            F640
[ G] PUTCH                            E2CD
[ G] PUTCR                            E2ED
[ G] PUTS                             E2E0
[ G] QDO                              ECD1
[ G] QDO1                             ECF5
[ G] QDOEX                            ECFC
[ G] QMARK                            FDF9
[ G] QRYDUP                           FC27
[ G] QUIT                             F0D0
[ G] RAKEVAR                          0118
[ G] RAMCHK                           E057
[ G] RAMFAIL                          E069
[ G] RAMFM                            FE72
[SG] RAMFTCH                          0CC4
[ G] RAMOK                            E07B
[ G] RAMOKM                           FE62
[ G] RAMSIZE                          8000
[ G] RAMSTRT                          0000
[ G] RBRACK                           F138
[ G] RBRACK1                          F13E
[ G] RCLR                             EBA9
[ G] RDEPTH                           0137
[ G] REALEND                          FE0F
[ G] RECADDR                          0112
[ G] RECURSE                          F226
[SG] RELFEAT                          0000
[SG] RELFEAT                          0001
[ G] REPEAT                           F04A
[ G] RFETCH                           F0A7
[ G] RFROM                            F058
[ G] ROLL                             FCAD
[ G] ROLL1                            FCB7
[ G] ROMSTRT                          E000
[ G] ROT                              FCCA
[ G] RPICKN                           F091
[ G] RPOP                             E824
[ G] RPOPRA                           E83D
[ G] RPSHRA                           E823
[ G] RPUSH                            E808
[ G] RSBSPFX                          E3CB
[ G] RSP                              0100
[ G] RSTBOT                           0376
[ G] RSTHDL                           E037
[ G] RSTINP                           E862
[ G] RSTKSZ                           0080
[ G] RSTRCT                           ECA0
[ G] RSTTOP                           02F6
[ G] RTADV32                          0020
[ G] RTADVRS                          0070
[ G] RTARS64                          000A
[ G] RTAS                             D400
[ G] RTAUIP                           0080
[ G] RTB24                            0002
[ G] RTBDM                            0004
[ G] RTBPIE                           0040
[ G] RTBSET                           0080
[ G] RTCAVL                           0145
[ G] RTCFEAT                          0000
[ G] RTCFTCH                          EB02
[ G] RTCPF                            0040
[ G] RTCSTOR                          EB11
[ G] RTDS                             D401
[ G] RTODOM                           0007
[ G] RTODOW                           0006
[ G] RTOHOUR                          0004
[ G] RTOHRA                           0005
[ G] RTOMIN                           0002
[ G] RTOMINA                          0003
[ G] RTOMON                           0008
[ G] RTOPRES                          003F
[ G] RTOREGA                          000A
[ G] RTOREGB                          000B
[ G] RTOREGC                          000C
[ G] RTOREGD                          000D
[ G] RTOSEC                           0000
[ G] RTOSECA                          0001
[ G] RTOUMB                           000E
[ G] RTOYEAR                          0009
[ G] RTSOPC                           0039
[ G] RTUMSZ                           0032
[ G] SAVBUF                           E9F0
[ G] SAVINP                           E847
[ G] SCNETOK                          E388
[ G] SCNSTOK                          E375
[ G] SCR                              EAE6
[ G] SERBCNT                          014C
[ G] SERBDEQ                          014B
[ G] SERBENQ                          014A
[ G] SERBSZ                           0040
[ G] SERBUF                           014E
[ G] SHARPS                           F560
[ G] SHIFT                            F8D3
[ G] SIGN                             F53D
[ G] SINFEQ                           EE6C
[ G] SLEN                             E233
[ G] SLMOD                            F993
[ G] SMSLREM                          F9AD
[ G] SOURCE                           F312
[ G] SP                               0020
[ G] SPACE                            F6B0
[ G] SPACES                           F6BD
[ G] SQUOTE                           F356
[ G] SRCID                            0149
[ G] SREGM                            E22F
[ G] SSDFEAT                          0001
[ G] STATE                            FBA1
[ G] STOD                             EB85
[ G] STORE                            FDDD
[ G] STRSL1                           FA42
[ G] STRSLMD                          FA6D
[ G] STRSLSH                          FA39
[ G] STSLFCN                          013D
[ G] SUP                              EF50
[ G] SWAP                             FC65
[ G] SWDIC                            E4A5
[ G] SWDIC1                           E4AA
[ G] SWI2HDL                          E036
[ G] SWI3HDL                          E036
[ G] SWIHDL                           E036
[ G] SYSSTAT                          FAC1
[ G] SYSSTK                           FAB8
[ G] TBUFF                            044A
[ G] TBUFSZ                           0048
[ G] TERPRET                          F77E
[ G] THEEND                           FE03
[ G] THEN                             EE1C
[ G] THRU                             F7FD
[ G] TICK                             F148
[ G] TICKS                            EAF2
[ G] TIKSHI                           0130
[ G] TIKSLOW                          0132
[ G] TOIN                             EADA
[ G] TOKENEP                          0104
[ G] TOKENSP                          0102
[ G] TOR                              F063
[ G] TRUE                             F8C6
[ G] TUCK                             FC38
[ G] TWODIV                           F978
[ G] TWODROP                          F45F
[ G] TWODUP                           F46D
[ G] TWOFTCH                          F495
[ G] TWOOVER                          F42B
[ G] TWOSTOR                          F484
[ G] TWOSWAP                          F443
[ G] TWOTIM                           F969
[ G] TYPE                             F6FA
[ G] U2INFRD                          E164
[ G] UBASE                            0122
[ G] UBLK                             012C
[ G] UDOT                             F657
[ G] UDOTR                            F69B
[ G] UINF                             EF41
[ G] UMSLMOD                          FA79
[ G] UMSTAR                           F920
[ G] UNLESS                           EDFD
[ G] UNLOOP                           EDBB
[ G] UNMON                            ECBA
[ G] UNTIL                            F01D
[ G] UPDATE                           EA3A
[ G] UREGM                            E226
[ G] USCR                             012E
[ G] USTATE                           0124
[ G] USUP                             EF32
[ G] UTOIN                            012A
[ G] VARCON                           E580
[ G] VARCON1                          E582
[ G] VARCON2                          E585
[ G] VARI                             EC64
[ G] VARSPC                           0100
[ G] VECTBL                           FFF0
[ G] VLPRVEP                          011A
[ G] VLPRVHD                          011C
[ G] WBIFDRT                          EA07
[ G] WDICSPC                          0CC0
[ G] WHILE                            F03C
[ G] WORD                             F2BC
[ G] WORDS                            FADA
[ G] WREGM                            E215
[ G] WRLNMSK                          001F
[ G] WTOOLNG                          E542
[ G] XMITOK                           014D
[ G] XOFF                             0013
[ G] XON                              0011
[ G] XOR                              EE87
[ G] XOR1                             EE98
[ G] XREGM                            E21E
[ G] YREGM                            E222
[ G] ZFLAG                            0004
[ G] ZGREAT                           EED7
[ G] ZLESS                            EEF0
[ G] ZNEQ                             EF20
