                      (        forth.asm):00001         * 6309 Forth based on my 1984/07/16 TRS-80 Model 1 level II ROM implementation.
                      (        forth.asm):00002         *
                      (        forth.asm):00003         * This work is dedicated to Alain Pinaud, author of "Programmer en Forth"
                      (        forth.asm):00004         * published by Editions du P.S.I. in 1983--i.e. my virtual mentor in the field.
                      (        forth.asm):00005         * Special thanks go William Astle for his fantastic LW Tools utility set and
                      (        forth.asm):00006         * to Robert Lipe for his advice on serial line handling. Apache subversion
                      (        forth.asm):00007         * and the sdiff utility also were on my side all the time.
                      (        forth.asm):00008         *
                      (        forth.asm):00009         * Also credited for their help: Justin Poirier (seminal HW design), Daniel
                      (        forth.asm):00010         * Tufvesson (CompactFlash interface), Peter Forth (FB alias), Paul E. Bennett
                      (        forth.asm):00011         * and Michel Jean.
                      (        forth.asm):00012         *
                      (        forth.asm):00013         * This is a native Forth. Not a threaded interpretive implementation.
                      (        forth.asm):00014         * Worth noticing is the fact that the return stack does not hold return
                      (        forth.asm):00015         * addresses at all. All what is stored there is loop indexes and control
                      (        forth.asm):00016         * structures jump addresses. Actual return addresses are kept in the system
                      (        forth.asm):00017         * stack. All in all, this is the result of the work of a 19 year old guy,
                      (        forth.asm):00018         * heavily revisited 35 years later. Some quirks remain that prevent me
                      (        forth.asm):00019         * from offering the full required set--not to mention the choice of using
                      (        forth.asm):00020         * an 8K EEPROM. The downside of this implementation is that the generated
                      (        forth.asm):00021         * code is about 30% larger than a threaded interpretive implementation
                      (        forth.asm):00022         * would be. So it goes...
                      (        forth.asm):00023         *
                      (        forth.asm):00024         * The code generated is limited to a very small instruction set:
                      (        forth.asm):00025         *
                      (        forth.asm):00026         * LDXOPC        $8E     LDX (immediate)
                      (        forth.asm):00027         * JMPOPC        $7E     JMP (extended)
                      (        forth.asm):00028         * JSROPC        $BD     JSR (extended)
                      (        forth.asm):00029         * RTSOPC        $39     RTS (inherent)
                      (        forth.asm):00030         * BCSOPC        $2503   BCS *+5 (relative) Used in LOOP, +LOOP
                      (        forth.asm):00031         * BNEOPC        $2603   BNE *+5 (relative) Used in IF, UNTIL
                      (        forth.asm):00032         *
                      (        forth.asm):00033         * On error, the system stack pointer is reset. The return stack also is 
                      (        forth.asm):00034         * but the data stack will be in the same state as when the error occurred.
                      (        forth.asm):00035         * ABORT and QUIT enforce their own 79-STANDARD behaviour.
                      (        forth.asm):00036         *
                      (        forth.asm):00037         * The 79-STANDARD Forth specification can be downloaded from
                      (        forth.asm):00038         * https://www.complang.tuwien.ac.at/forth/fth79std/FORTH-79.TXT
                      (        forth.asm):00039         *
                      (        forth.asm):00040         * Additionally, this implementation provides a few FORTH-83 words. Those
                      (        forth.asm):00041         * words are CMOVE> and RECURSE. See
                      (        forth.asm):00042         * http://forth.sourceforge.net/standard/fst83/FORTH-83.PRN
                      (        forth.asm):00043         *
                      (        forth.asm):00044         * \ ['] [CHAR] .S CELLS CHAR COMPILE, INVERT KEY? NIP POSTPONE SOURCE TUCK U>
                      (        forth.asm):00045         * UNLOOP and WITHIN have been borrowed from the ANSI draft 6 specification.
                      (        forth.asm):00046         * See http://www.forth.org/svfig/Win32Forth/DPANS94.txt
                      (        forth.asm):00047         *
                      (        forth.asm):00048         * RESTRICT is non-standard. It comes from GNU Forth (VolksForth). The " OK"
                      (        forth.asm):00049         * non-prompt string also does, by the way. Thanks to Anton Ertl for his terse
                      (        forth.asm):00050         * yet valuable input.
                      (        forth.asm):00051         *
                      (        forth.asm):00052         * .' (dot-tick) is non-standard. It comes from SwiftForth. It will be supported
                      (        forth.asm):00053         * if symbolic stack dump has not been disabled (see SSDFEAT in constants.asm).
                      (        forth.asm):00054         *
                      (        forth.asm):00055         * MONITOR and ICHECK are also non-standard. They are intended to maintain and
                      (        forth.asm):00056         * verify the integrity of a checksum of the code section of RAM resident
                      (        forth.asm):00057         * words, with the exception of VARIABLEs and CREATEd words. CREATEd words,
                      (        forth.asm):00058         * if subject to the MONITOR treatment will also carry a code section
                      (        forth.asm):00059         * checksum, although this is not the default behaviour. The checksum will
                      (        forth.asm):00060         * consist in an extra byte added to every word's header. MONITOR and ICHECK
                      (        forth.asm):00061         * will only be available if the reliability feature has not been disabled
                      (        forth.asm):00062         * (see RELFEAT in constants.asm).
                      (        forth.asm):00063         *
                      (        forth.asm):00064         * Forth source code portability note:
                      (        forth.asm):00065         * Because Z79Forth does not use the return stack to store return addresses,
                      (        forth.asm):00066         * it makes it quite easy to write code that is not readily portable to classic
                      (        forth.asm):00067         * threaded interpretive implementations. The resulting code will be simpler but
                      (        forth.asm):00068         * portability will be limited.
                      (        forth.asm):00069         *
                      (        forth.asm):00070         * Miscellaneous notes: RA stands for return address; EP for entry point.
                      (        forth.asm):00071         * CF is a shortcut for CompactFlash. TOS means top of the data/normal stack.
                      (        forth.asm):00072         * Occasionally, CFA is used for code field address which, in this
                      (        forth.asm):00073         * implementation, is a synonym for compilation address. XT means execution
                      (        forth.asm):00074         * token--the ANSI term for a compilation address. MSC stands for most
                      (        forth.asm):00075         * significant cell; LSC for least significant cell.
                      (        forth.asm):00076         *
                      (        forth.asm):00077         * The complete guide to the HD6309 extended instruction set can be found at:
                      (        forth.asm):00078         * https://cyberabi.ipower.com/Downloads/The_6309_Book.pdf. For convenience,
                      (        forth.asm):00079         * and with the author's explicit agreement, this document has been included
                      (        forth.asm):00080         * in this distribution. This is recommended reading for anyone altering this
                      (        forth.asm):00081         * code or trying to make some sense of it!!!
                      (        forth.asm):00082         *
                      (        forth.asm):00083         * This whole effort started out as a porting endeavour and ended up being a
                      (        forth.asm):00084         * substantial rewrite, trying to take advantage of the features of the 6309
                      (        forth.asm):00085         * as much as possible. The primary goals of this implementation are:
                      (        forth.asm):00086         * reliability, performance and code compactness. A number of bugs in the
                      (        forth.asm):00087         * original code have been fixed--some remain for sure!
                      (        forth.asm):00088         *
                      (        forth.asm):00089         * Obligatory literary reference:
                      (        forth.asm):00090         * "The paper is very heavy going, and I should never have read it, had I not
                      (        forth.asm):00091         * written it myself." J. E. Littlewood (1885-1977).
                      (        forth.asm):00092         
0000                  (        forth.asm):00093         pragma  opt cd,operandsizewarning
                      (        forth.asm):00094         
                      (        forth.asm):00095                 include constants.asm
                      (    constants.asm):00001         * Memory map.
     0000             (    constants.asm):00002         RAMSTRT equ     $0000
     8000             (    constants.asm):00003         RAMSIZE equ     $8000
     C000             (    constants.asm):00004         IOSTRT  equ     $C000
     E000             (    constants.asm):00005         ROMSTRT equ     $E000
     FFF0             (    constants.asm):00006         VECTBL  equ     $FFF0
                      (    constants.asm):00007         
                      (    constants.asm):00008         * Base address for global variables (direct page addressed by default).
     0100             (    constants.asm):00009         VARSPC  equ     $100
                      (    constants.asm):00010         
                      (    constants.asm):00011         * The 74HCT138 IO address decoder maps one 1KB page per usable device.
     C000             (    constants.asm):00012         DEV0    equ     $C000           Compact Flash memory module
     C400             (    constants.asm):00013         DEV1    equ     $C400
     C800             (    constants.asm):00014         DEV2    equ     $C800
     CC00             (    constants.asm):00015         DEV3    equ     $CC00
     D000             (    constants.asm):00016         DEV4    equ     $D000
     D400             (    constants.asm):00017         DEV5    equ     $D400
     D800             (    constants.asm):00018         DEV6    equ     $D800           HD63B50 unit 0
     DC00             (    constants.asm):00019         DEV7    equ     $DC00
                      (    constants.asm):00020         
     D800             (    constants.asm):00021         ACIACTL equ     DEV6
     D801             (    constants.asm):00022         ACIADAT equ     DEV6+1
                      (    constants.asm):00023         
                      (    constants.asm):00024         * ACIA control register bits.
     0003             (    constants.asm):00025         ACRST   equ     11b             ACIA master reset
                      (    constants.asm):00026         
                      (    constants.asm):00027         * 115200 bps w. 7.37280 MHz oscillator, 38400 bps w. 2.45760 MHz oscillator.
     0001             (    constants.asm):00028         ACD16   equ     01b             ACIA div 16
                      (    constants.asm):00029         * 28800 bps w. 7.37280 MHz oscillator, bps 9600 w. 2.45760 MHz oscillator.
     0002             (    constants.asm):00030         ACD64   equ     10b             ACIA div 64
     0001             (    constants.asm):00031         ACDVSEL equ     ACD16           Selected divider value
                      (    constants.asm):00032         
     0014             (    constants.asm):00033         AC8N1   equ     10100b          ACIA 8N1
     0000             (    constants.asm):00034         ACRTS0  equ     0000000b        ACIA RTS low
     0040             (    constants.asm):00035         ACRTS1  equ     1000000b        ACIA RTS high
                      (    constants.asm):00036         
     0043             (    constants.asm):00037         ACIRSET equ     ACRTS1|ACRST
     0055             (    constants.asm):00038         ACIRTS1 equ     ACRTS1|AC8N1|ACDVSEL
     0015             (    constants.asm):00039         ACIRTS0 equ     ACRTS0|AC8N1|ACDVSEL
                      (    constants.asm):00040         
                      (    constants.asm):00041         * ACIA status register bits.
     0001             (    constants.asm):00042         ACIRDRF equ     1               Receive data register full
     0002             (    constants.asm):00043         ACITDRE equ     2               Transmit data register empty
     0020             (    constants.asm):00044         ACIOVRN equ     32              Overrun status register bit (req. NZ CKOVRUN)
                      (    constants.asm):00045         
                      (    constants.asm):00046         * Compact Flash parameters.
     C000             (    constants.asm):00047         CFBASE  equ     DEV0
     C000             (    constants.asm):00048         CFDATAR equ     CFBASE          R/W data register
     C001             (    constants.asm):00049         CFERROR equ     CFBASE+1        RO error register
     C001             (    constants.asm):00050         CFFEATR equ     CFBASE+1        WO features register
     C002             (    constants.asm):00051         CFSCNTR equ     CFBASE+2        R/W sector count register
     C003             (    constants.asm):00052         CFSNUMR equ     CFBASE+3        R/W sector number register
     C004             (    constants.asm):00053         CFCLOWR equ     CFBASE+4        R/W cylinder low register
     C005             (    constants.asm):00054         CFCHIGR equ     CFBASE+5        R/W cylinder high register
     C006             (    constants.asm):00055         CFDRHDR equ     CFBASE+6        R/W drive/head register
     C007             (    constants.asm):00056         CFSTATR equ     CFBASE+7        RO status register
     C007             (    constants.asm):00057         CFCOMDR equ     CFBASE+7        WO command register
                      (    constants.asm):00058         
                      (    constants.asm):00059         * CF status bits.
     0080             (    constants.asm):00060         CFBSYB  equ     10000000b       BSY status bit
     0040             (    constants.asm):00061         CFRDYB  equ     01000000b       RDY status bit
     0020             (    constants.asm):00062         CFDWFB  equ     00100000b       DWF status bit (not used)
     0010             (    constants.asm):00063         CFDSCB  equ     00010000b       DSC status bit (not used)
     0008             (    constants.asm):00064         CFDRQB  equ     00001000b       DRQ status bit
     0001             (    constants.asm):00065         CFERRB  equ     00000001b       ERR status bit
                      (    constants.asm):00066         
     0200             (    constants.asm):00067         CFSCSZ  equ     $200            Compact Flash (IDE) sector size
                      (    constants.asm):00068         
                      (    constants.asm):00069         * CF commands.
     00EC             (    constants.asm):00070         CFIDDEV equ     $EC             Identify Device
     00EF             (    constants.asm):00071         CFSETFT equ     $EF             Set Feature
     0020             (    constants.asm):00072         CFRSCTS equ     $20             Read Sectors
     0030             (    constants.asm):00073         CFWSCTS equ     $30             Write Sectors
                      (    constants.asm):00074         
                      (    constants.asm):00075         * Buffer in-memory structure:
                      (    constants.asm):00076         * data: 1024 bytes.
                      (    constants.asm):00077         * terminator: 1 byte set to 0.
                      (    constants.asm):00078         * flags: 1 byte.
                      (    constants.asm):00079         * blknum: 2 bytes.
     0001             (    constants.asm):00080         BINUSE  equ     1               Buffer is allocated (the blknum field is valid)
     0002             (    constants.asm):00081         BMAPPD  equ     2               Block has been read from the CF device
     0004             (    constants.asm):00082         BDIRTY  equ     4               Block has been marked for update
     0400             (    constants.asm):00083         BLKSIZ  equ     2*CFSCSZ        Block size is 2 CF sectors (1 KB)
                      (    constants.asm):00084         * Buffer field offsets.
     0401             (    constants.asm):00085         BOFLAGS equ     BLKSIZ+1        Base buffer to the 'flag' field offset
     0402             (    constants.asm):00086         BOBLKNO equ     BLKSIZ+2        Base buffer to the 'blknum' field offset
                      (    constants.asm):00087         
     0410             (    constants.asm):00088         BFDISP  equ     BUF1-BUF0       Offset between resident buffers
                      (    constants.asm):00089         
                      (    constants.asm):00090         * ASCII trivia.
     0000             (    constants.asm):00091         NUL     equ     0               End of string marker
     0003             (    constants.asm):00092         ETX     equ     3               Control-C (intr)
     0008             (    constants.asm):00093         BS      equ     8               Backspace
     0009             (    constants.asm):00094         HT      equ     9               Horizontal tab
     000A             (    constants.asm):00095         LF      equ     $0A             aka new line
     000D             (    constants.asm):00096         CR      equ     $0D             Carriage return
     000C             (    constants.asm):00097         FF      equ     $0C             Form feed (clear screen)
     0015             (    constants.asm):00098         NAK     equ     $15             Control-U (kill)
     0020             (    constants.asm):00099         SP      equ     $20
                      (    constants.asm):00100         
                      (    constants.asm):00101         * Configuration tunable parameters.
     0000             (    constants.asm):00102         CSSNTVE equ     0               Words and HEX numbers are case sensitive if NZ
     0000             (    constants.asm):00103         STRCT79 equ     0               Set to 1 to omit the COMPILE word
     0000             (    constants.asm):00104         DEBUG   equ     0               Enforce assertions and miscellaneous checks
     0000             (    constants.asm):00105         CKOVRUN equ     0               Check for overruns in GETCH
     0001             (    constants.asm):00106         USEDP   equ     1               Set to 1 to use direct page addressing
     0001             (    constants.asm):00107         SSDFEAT equ     1               Set to 1 to enable the symbolic stack dump feat.
     0001             (    constants.asm):00108         RELFEAT equ     1               Set to 1 to enable the reliability feature
                      (    constants.asm):00109         *                               Caution: when this is enabled, you can no
                      (    constants.asm):00110         *                               longer fit a DEBUG image into an 8 KB EEPROM
                      (    constants.asm):00111         * Loop count for MS. This is busy waiting, so we depend on the CPU clock speed.
                      (    constants.asm):00112         *MSLCNT equ     496             at 3 MHz emulation mode
                      (    constants.asm):00113         *MSLCNT equ     662             at 4 MHz emulation mode
                      (    constants.asm):00114         *MSLCNT equ     794             at 4 MHz native mode
     03E2             (    constants.asm):00115         MSLCNT  equ     994             at 5 MHz native mode
                      (    constants.asm):00116         
                      (    constants.asm):00117         * Stack sizes.
     00C0             (    constants.asm):00118         NSTKSZ  equ     192             Expressed in bytes. Now only limited by RAM size
     0080             (    constants.asm):00119         RSTKSZ  equ     128             Expressed in bytes
                      (    constants.asm):00120         
                      (    constants.asm):00121         * Buffer sizes.
     0084             (    constants.asm):00122         CMDBFSZ equ     132             Command line entry buffer
     0050             (    constants.asm):00123         HEXBFSZ equ     80
     0048             (    constants.asm):00124         TBUFSZ  equ     72              Used by VLIST to print word name, CVNSTR
                      (    constants.asm):00125         *                               And DUMP, at offset 69
     0051             (    constants.asm):00126         PADBSZ  equ     1+80            79-STANDARD mandates a minimum of 64 bytes
                      (    constants.asm):00127         
                      (    constants.asm):00128         * Dictionary flag masks.
     0080             (    constants.asm):00129         IMDFLM  equ     $80             Immediate flag mask
     0040             (    constants.asm):00130         DEFFLM  equ     $40             Compilation only flag mask
                      (    constants.asm):00131                 IFNE    RELFEAT
     0020             (    constants.asm):00132         MONFLM  equ     $20             Monitored flag mask. This indicates that the
                      (    constants.asm):00133         *                               word to which it relates might be checked for
                      (    constants.asm):00134         *                               integrity. This applies by default to all words
                      (    constants.asm):00135         *                               defined with : and all constants. It might
                      (    constants.asm):00136         *                               also apply to any other CREATEd object by
                      (    constants.asm):00137         *                               resorting to the MONITOR word. Using MONITOR
                      (    constants.asm):00138         *                               on variable word contents is guaranteed to
                      (    constants.asm):00139         *                               raise ICHECK's attention.
                      (    constants.asm):00140                 ENDC
                      (    constants.asm):00141         
     001F             (    constants.asm):00142         WRLNMSK equ     $1F             31 character is the maximum word length
                      (    constants.asm):00143         
                      (    constants.asm):00144         * 6309 opcodes.
     008E             (    constants.asm):00145         LDXOPC  equ     $8E             LDX (immediate)
     007E             (    constants.asm):00146         JMPOPC  equ     $7E             JMP (extended)
     00BD             (    constants.asm):00147         JSROPC  equ     $BD             JSR (extended)
     0039             (    constants.asm):00148         RTSOPC  equ     $39             RTS (inherent)
     2503             (    constants.asm):00149         BCSOPC  equ     $2503           BCS *+5 (relative)
     2603             (    constants.asm):00150         BNEOPC  equ     $2603           BNE *+5 (relative)
     00C7             (    constants.asm):00151         ILLOPC  equ     $C7             An illegal operation code. Meant to raise a trap
                      (    constants.asm):00152         
     0001             (    constants.asm):00153         CFLAG   equ     1               CC bit 0
     0004             (    constants.asm):00154         ZFLAG   equ     4               CC bit 2
     0008             (    constants.asm):00155         NFLAG   equ     8               CC bit 3
                      (    constants.asm):00156         
                      (    constants.asm):00157         * RAM based execution token for @.
     0C14             (    constants.asm):00158         RAMFTCH set     WDICSPC+4       Dictionary header overhead is word's length + 3
                      (    constants.asm):00159                 IFNE    RELFEAT         The reliability features adds one byte to the
     0C15             (    constants.asm):00160         RAMFTCH set     WDICSPC+5       header: a checksum.
                      (    constants.asm):00161                 ENDC
                      (    constants.asm):00162         
                      (        forth.asm):00096         
                      (        forth.asm):00097         * Unchecked NPUSH. This is for situations in which there is
                      (        forth.asm):00098         * absolutely no chance of overflow. For instance, in case
                      (        forth.asm):00099         * we just popped 2 cells and push back one or two. This
                      (        forth.asm):00100         * always is inlined,
0000                  (        forth.asm):00101         UCNPUSH MACRO   NOEXPAND
                      (        forth.asm):00102                 pshu    x
                      (        forth.asm):00103                 ENDM
                      (        forth.asm):00104         
                      (        forth.asm):00105         * Make sure minimum data stack requirements are satisfied upon word entry.
                      (        forth.asm):00106         * The requirement is expressed in cell size--2 bytes on the 6309.
                      (        forth.asm):00107         * \1 specifies the required number of cells.
0000                  (        forth.asm):00108         MINDREQ MACRO   NOEXPAND
                      (        forth.asm):00109                 ldd     #NSTBOT-(\1*2)  Cell count one expects to be stacked up
                      (        forth.asm):00110                 jsr     CHKNDPT         No return if the condition is not met
                      (        forth.asm):00111                 ENDM
                      (        forth.asm):00112         
                      (        forth.asm):00113         * Reliability feature support: execution tokens.
                      (        forth.asm):00114         * \1 has the opcode we want to emit.
                      (        forth.asm):00115         * \2 has the execution token address, as if the header overhead always
                      (        forth.asm):00116         * was 3 bytes.
0000                  (        forth.asm):00117         RFXT    MACRO   NOEXPAND
                      (        forth.asm):00118                 IFNE    RELFEAT
                      (        forth.asm):00119                 \1      \2+1
                      (        forth.asm):00120                 ELSE
                      (        forth.asm):00121                 \1      \2
                      (        forth.asm):00122                 ENDC
                      (        forth.asm):00123                 ENDM
                      (        forth.asm):00124         
                      (        forth.asm):00125         * Reliability feature support: variable word header contents.
                      (        forth.asm):00126         * This is a dummy checksum only used for EEPROM resident words.
                      (        forth.asm):00127         * Those never are checked for code integrity by MONITOR.
0000                  (        forth.asm):00128         RFCS    MACRO   NOEXPAND
                      (        forth.asm):00129                 IFNE    RELFEAT
                      (        forth.asm):00130                 fcb     ILLOPC          Illegal opcode
                      (        forth.asm):00131                 ENDC
                      (        forth.asm):00132                 ENDM
                      (        forth.asm):00133         
                      (        forth.asm):00134         *******************************************************************************
                      (        forth.asm):00135         * RAM definitions. We cannot initialize globals from the assembly defs.
                      (        forth.asm):00136         * All we can do here is define addresses and size things up.
                      (        forth.asm):00137         
                      (        forth.asm):00138         * RAMSTART is 0. We leave page 0 unused as a bug proof area.
                      (        forth.asm):00139         * When compiled in debug mode, this area is filled with illegal
                      (        forth.asm):00140         * instruction opcodes ($C7).
                      (        forth.asm):00141         
                      (        forth.asm):00142                 org     VARSPC
                      (        forth.asm):00143         
                      (        forth.asm):00144         * Global pointers.
0100                  (        forth.asm):00145         RSP     rmb     2               The return stack pointer
0102                  (        forth.asm):00146         TOKENSP rmb     2               Token start pointer (STRS)
0104                  (        forth.asm):00147         TOKENEP rmb     2               Token end pointer (STRE)
0106                  (        forth.asm):00148         LSTWAD  rmb     2               Last defined word header pointer--LAST
0108                  (        forth.asm):00149         DICEND  rmb     2               Current end of the dictionary--HERE
010A                  (        forth.asm):00150         BLSTWAD rmb     2               Backup (was IX)
010C                  (        forth.asm):00151         BDICEND rmb     2               Backup (was IY)
010E                  (        forth.asm):00152         RECADDR rmb     2               Used by RECURSE
0110                  (        forth.asm):00153         JSRLAST rmb     2               Last compilation address of #JSROPC
0112                  (        forth.asm):00154         VLPRVEP rmb     2               Used in VLIST to compute word code length
0114                  (        forth.asm):00155         VLPRVHD rmb     2               Used in VLIST to compute word code length
0116                  (        forth.asm):00156         MRUBUFA rmb     2               Most recently used buffer address
                      (        forth.asm):00157         
                      (        forth.asm):00158         * Global variables.
0118                  (        forth.asm):00159         UBASE   rmb     2               Base for numbers input and output--BASE
011A                  (        forth.asm):00160         USTATE  rmb     2               0 if interpreting, 1 if compiling--STATE
011C                  (        forth.asm):00161         UTOIN   rmb     2               User variable for >IN
011E                  (        forth.asm):00162         UBLK    rmb     2               User variable for BLK
0120                  (        forth.asm):00163         USCR    rmb     2               User variable for SCR (output for LIST)
0122                  (        forth.asm):00164         BSBFADR rmb     2               Base buffer address for the input stream
                      (        forth.asm):00165                 IFNE    DEBUG
0124                  (        forth.asm):00166         CCREG   rmb     2               A DEBUG variable for predicates (see CMP2)
                      (        forth.asm):00167                 ENDC
0124                  (        forth.asm):00168         CMDLNSZ rmb     1               Entered character count in GETS (INTERP)
0125                  (        forth.asm):00169         RDEPTH  rmb     1               Return stack depth in cells
0126                  (        forth.asm):00170         IRDPTH  rmb     1               Return stack depth when : was last invoked
0127                  (        forth.asm):00171         RTSREMV rmb     1               If > 1, omit the final RTS when compiling
0128                  (        forth.asm):00172         DIVFCN  rmb     1               Flag used by /, MOD and /MOD
0129                  (        forth.asm):00173         STSLFCN rmb     1               Flag used by */, */MOD
012A                  (        forth.asm):00174         CVTFCN  rmb     1               CVT: 0 => # semantics, 1 => #S semantics
012B                  (        forth.asm):00175         ISNEGF  rmb     1               Number being scanned is negative
012C                  (        forth.asm):00176         CVISSGN rmb     1               Flag: should CVNSTR consider numbers as signed
012D                  (        forth.asm):00177         CURTOKL rmb     1               Current token length. Set by SWDIC
012E                  (        forth.asm):00178         IMDFLG  rmb     1               Immediate flag
012F                  (        forth.asm):00179         DEFFLG  rmb     1               Define flag
0130                  (        forth.asm):00180         NBCTFB0 rmb     1               NZ if -->/CONTINUED invoked from the console
                      (        forth.asm):00181         
0131                  (        forth.asm):00182         CFCARDP rmb     1               NZ if CF card present
0132                  (        forth.asm):00183         CFCMMIR rmb     1               Last CF command issued
0133                  (        forth.asm):00184         CFERRCD rmb     1               and the corresponding error code
                      (        forth.asm):00185         
0134                  (        forth.asm):00186         PADBUF  rmb     PADBSZ          PAD lives here. Used by <#, #, #S, #> and DUMP
                      (        forth.asm):00187         
                      (        forth.asm):00188         * The normal (data) stack.
0185 00               (        forth.asm):00189                 align   2
     0186             (        forth.asm):00190         NSTTOP  equ     *               U's value when the data stack is full
0186                  (        forth.asm):00191                 rmb     NSTKSZ
     0246             (        forth.asm):00192         NSTBOT  equ     *               U's value when the data stack is empty
                      (        forth.asm):00193         
                      (        forth.asm):00194         * The return stack.
     0246             (        forth.asm):00195         RSTTOP  equ     *
0246                  (        forth.asm):00196                 rmb     RSTKSZ
     02C6             (        forth.asm):00197         RSTBOT  equ     *
                      (        forth.asm):00198         
02C6                  (        forth.asm):00199         CMDBUF  rmb     CMDBFSZ
034A                  (        forth.asm):00200         HEXBUF  rmb     HEXBFSZ
                      (        forth.asm):00201         
039A                  (        forth.asm):00202         TBUFF   rmb     TBUFSZ          Output for CVNSTR. Also used by DUMP
                      (        forth.asm):00203         
03E2 0000000000000000 (        forth.asm):00204                 align   16
     000000000000
03F0                  (        forth.asm):00205         BUF0    rmb     BLKSIZ+4
07F4 0000000000000000 (        forth.asm):00206                 align   16
     00000000
0800                  (        forth.asm):00207         BUF1    rmb     BLKSIZ+4
                      (        forth.asm):00208         
                      (        forth.asm):00209         *******************************************************************************
                      (        forth.asm):00210         * Writable dictionary section begins right here. We cannot have anything
                      (        forth.asm):00211         * statically defined at this point. Therefore, FORTHIN moves the code for @
                      (        forth.asm):00212         * to this location and sets up DICEND and LSTWAD accordingly. All the RAM
                      (        forth.asm):00213         * beyond this point (after the reallocated @ implementation) is user defined
                      (        forth.asm):00214         * material. Note that builtin words, though they cannot be forgotten (to the
                      (        forth.asm):00215         * extent they are ROM resident--not to mention inter-word dependencies),
                      (        forth.asm):00216         * might still be overridden by user definitions. VLIST will happily ignore
                      (        forth.asm):00217         * that fact and list everything in the dictionary linked list order.
                      (        forth.asm):00218         
0C04 0000000000000000 (        forth.asm):00219                 align   16
     00000000
     0C10             (        forth.asm):00220         WDICSPC equ     *
                      (        forth.asm):00221         
                      (        forth.asm):00222         *******************************************************************************
                      (        forth.asm):00223         * ROM code begins.
                      (        forth.asm):00224         
                      (        forth.asm):00225                 org     ROMSTRT
                      (        forth.asm):00226         * Trap handler: division by zero or illegal opcode. See page 4-10 of "The 6309
                      (        forth.asm):00227         * Book" for a description of interrupt stacks in native 6309 mode.
E000 113C40           (        forth.asm):00228 (4)     IODZHDL bitmd   #$40            Illegal opcode?
E003 2705             (        forth.asm):00229 (3)             beq     @iodzh1
E005 8EFE73           (        forth.asm):00230 (3)             ldx     #IOPERRM
E008 2008             (        forth.asm):00231 (3)             bra     @iodxh2
E00A 113C80           (        forth.asm):00232 (4)     @iodzh1 bitmd   #$80            Division by zero?
E00D 2725             (        forth.asm):00233 (3)             beq     @iodzh3         And you may ask yourself, well
                      (        forth.asm):00234         *                               How did I get here?
E00F 8EFE88           (        forth.asm):00235 (3)             ldx     #DV0ERRM
E012 BDE1D8           (        forth.asm):00236 (7)     @iodxh2 jsr     PUTS
E015 EC6C             (        forth.asm):00237 (5+1)           ldd     12,s            Return code address (PC)
E017 8E034A           (        forth.asm):00238 (3)             ldx     #HEXBUF
E01A BDE172           (        forth.asm):00239 (7)             jsr     HDMP4   
E01D 8E034A           (        forth.asm):00240 (3)             ldx     #HEXBUF
E020 BDE1D8           (        forth.asm):00241 (7)             jsr     PUTS
E023 BDE1E5           (        forth.asm):00242 (7)             jsr     PUTCR
E026 8EE614           (        forth.asm):00243 (3)             ldx     #ERRHD1
E029 AF6C             (        forth.asm):00244 (5+1)           stx     12,s            Resume execution in the error handler
E02B 8EE000           (        forth.asm):00245 (3)             ldx     #IODZHDL
E02E AF68             (        forth.asm):00246 (5+1)           stx     8,s             With Y set to IODZHDL
E030 8603             (        forth.asm):00247 (2)             lda     #3              And user ABORT error code
E032 A762             (        forth.asm):00248 (4+1)           sta     2,s             Passed back through B
E034 3B               (        forth.asm):00249 (17+?)  @iodzh3 rti
                      (        forth.asm):00250         
     E035             (        forth.asm):00251         SWI3HDL equ     *
     E035             (        forth.asm):00252         SWI2HDL equ     *
     E035             (        forth.asm):00253         FIRQHDL equ     *
     E035             (        forth.asm):00254         IRQHDL  equ     *
     E035             (        forth.asm):00255         SWIHDL  equ     *
E035 13               (        forth.asm):00256 (1+?)   NMIHDL  sync                    Go to low power mode idling forever
                      (        forth.asm):00257         
E036 1A50             (        forth.asm):00258 (2)     RSTHDL  orcc    #$50            Disable interrupts
                      (        forth.asm):00259         
                      (        forth.asm):00260         * In theory, this means 15% extra performance.
                      (        forth.asm):00261         * In practice, this means an extra 5 mA current comsumption.
                      (        forth.asm):00262         * The additional performance is measurable so I am going for it.
E038 113D01           (        forth.asm):00263 (5)             ldmd    #1              Establish 6309 native mode
                      (        forth.asm):00264         
E03B 8643             (        forth.asm):00265 (2)             lda     #ACIRSET
E03D B7D800           (        forth.asm):00266 (4)             sta     ACIACTL         ACIA master reset
E040 8655             (        forth.asm):00267 (2)             lda     #ACIRTS1
E042 B7D800           (        forth.asm):00268 (4)             sta     ACIACTL         No IRQ on RDRF, RTS high, 8N1, 115200 bps
                      (        forth.asm):00269         
E045 8EFDE3           (        forth.asm):00270 (3)             ldx     #BOOTMSG        Identity statement
                      (        forth.asm):00271         
                      (        forth.asm):00272         * Send the NUL terminated string pointed to by X to the ACIA.
                      (        forth.asm):00273         * The RAM is not assumed to be working.
E048 C602             (        forth.asm):00274 (2)     INIT    ldb     #ACITDRE
E04A A680             (        forth.asm):00275 (4+1)   @init0  lda     ,x+
E04C 270A             (        forth.asm):00276 (3)             beq     RAMCHK          NUL marks the end of the string
E04E F5D800           (        forth.asm):00277 (4)     @init1  bitb    ACIACTL         Wait for TDRE bit to be set
E051 27FB             (        forth.asm):00278 (3)             beq     @init1
E053 B7D801           (        forth.asm):00279 (4)             sta     ACIADAT         Transmit data
E056 20F2             (        forth.asm):00280 (3)             bra     @init0          Next char, if any
                      (        forth.asm):00281         
                      (        forth.asm):00282         * RAM0 32 KB self test (destructive).
E058 8E0000           (        forth.asm):00283 (3)     RAMCHK  ldx     #RAMSTRT
E05B AF84             (        forth.asm):00284 (5+0)   @ramch1 stx     ,x
E05D AC84             (        forth.asm):00285 (5+0)           cmpx    ,x
E05F 2609             (        forth.asm):00286 (3)             bne     RAMFAIL
E061 3002             (        forth.asm):00287 (4+1)           leax    2,x
E063 8C8000           (        forth.asm):00288 (3)             cmpx    #RAMSTRT+RAMSIZE
E066 26F3             (        forth.asm):00289 (3)             bne     @ramch1
E068 2012             (        forth.asm):00290 (3)             bra     RAMOK
                      (        forth.asm):00291         
E06A C680             (        forth.asm):00292 (2)     RAMFAIL ldb     #128
E06C 108E8000         (        forth.asm):00293 (4)     @ramf1  ldy     #$8000
E070 313F             (        forth.asm):00294 (4+1)   @ramf2  leay    -1,y
E072 26FC             (        forth.asm):00295 (3)             bne     @ramf2
E074 5A               (        forth.asm):00296 (1)             decb
E075 26F5             (        forth.asm):00297 (3)             bne     @ramf1
E077 8EFE57           (        forth.asm):00298 (3)             ldx     #RAMFM
E07A 20CC             (        forth.asm):00299 (3)             bra     INIT            Here we go again
                      (        forth.asm):00300         
                      (        forth.asm):00301         * RAM Initialization to all $C7 if DEBUG mode is enabled else zeroes.
E07C 8E0000           (        forth.asm):00302 (3)     RAMOK   ldx     #RAMSTRT
E07F 3101             (        forth.asm):00303 (4+1)           leay    1,x
E081 10867FFF         (        forth.asm):00304 (4)             ldw     #RAMSIZE-1
                      (        forth.asm):00305                 IFNE    DEBUG
                      (        forth.asm):00306                 lda     #ILLOPC
                      (        forth.asm):00307                 sta     ,x
                      (        forth.asm):00308                 ELSE
E085 6F84             (        forth.asm):00309 (6+0)           clr     ,x
                      (        forth.asm):00310                 ENDC
E087 113812           (        forth.asm):00311 (6+?)           tfm     x+,y+
                      (        forth.asm):00312         
                      (        forth.asm):00313         * Initialize the system stack pointer and the direct page base address register.
E08A 10CE8000         (        forth.asm):00314 (4)             lds     #RAMSTRT+RAMSIZE
                      (        forth.asm):00315                 IFNE    USEDP
E08E 8601             (        forth.asm):00316 (2)             lda     #VARSPC/256
E090 1F8B             (        forth.asm):00317 (4)             tfr     a,dp
     01               (        forth.asm):00318                 SETDP   VARSPC/256
                      (        forth.asm):00319                 ENDC
E092 8EFE3F           (        forth.asm):00320 (3)             ldx     #RAMOKM
E095 BDE1D8           (        forth.asm):00321 (7)             jsr     PUTS
E098 BDE23E           (        forth.asm):00322 (7)             jsr     FORTHIN         Global variables initialization
E09B BDE77C           (        forth.asm):00323 (7)             jsr     CFINIT          CompactFlash card initialization
                      (        forth.asm):00324         
                      (        forth.asm):00325         * The interpreter main loop.
E09E 104F             (        forth.asm):00326 (2)     INTERP  clrd
E0A0 DD1E             (        forth.asm):00327 (4)             std     UBLK            Interpreting from the console. Set BLK to 0
E0A2 DD1C             (        forth.asm):00328 (4)             std     UTOIN
E0A4 8E02C6           (        forth.asm):00329 (3)             ldx     #CMDBUF
E0A7 9F22             (        forth.asm):00330 (4)             stx     BSBFADR
E0A9 C683             (        forth.asm):00331 (2)             ldb     #CMDBFSZ-1      NUL terminator is not included in the char count
E0AB BDE1FB           (        forth.asm):00332 (7)             jsr     GETS            Acquire command from the console
                      (        forth.asm):00333         * Additional setup in case the ANSI \ is used.
E0AE D724             (        forth.asm):00334 (3)             stb     CMDLNSZ         GETS returns the entered character count via B
                      (        forth.asm):00335         * Additional preparation work for block support.
E0B0 0F30             (        forth.asm):00336 (5)             clr     NBCTFB0         Flag whether -->/CONTINUED is called from blk 0
E0B2 8D02             (        forth.asm):00337 (6)             bsr     _INTERP
E0B4 20E8             (        forth.asm):00338 (3)     MINTLRA bra     INTERP
                      (        forth.asm):00339         
                      (        forth.asm):00340         * The interpreter itself.
E0B6 BDE27D           (        forth.asm):00341 (7)     _INTERP jsr     SCNSTOK         Scan for the beginning of a word at address X
E0B9 2715             (        forth.asm):00342 (3)             beq     @more0          This is the end
E0BB 0D1B             (        forth.asm):00343 (4)             tst     USTATE+1        We do ignore the upper byte
E0BD 2644             (        forth.asm):00344 (3)             bne     COMP            We are compiling
E0BF BDE358           (        forth.asm):00345 (7)             jsr     SWDIC           Updates TOKENEP, CURTOKL, IMDFLG/DEFFLG
E0C2 2624             (        forth.asm):00346 (3)             bne     @exec           Word found, execute it
E0C4 BDE2AD           (        forth.asm):00347 (7)             jsr     NUMCVT
     E0C7             (        forth.asm):00348         NMCVIRA equ     *
E0C7 BDE68A           (        forth.asm):00349 (7)             jsr     NPUSH
E0CA 9E04             (        forth.asm):00350 (4)             ldx     TOKENEP
E0CC 6D84             (        forth.asm):00351 (5+0)   MORE    tst     ,x
E0CE 26E6             (        forth.asm):00352 (3)             bne     _INTERP         Next token, please!
                      (        forth.asm):00353         * End of input stream condition is recognized.
E0D0 DC1E             (        forth.asm):00354 (4)     @more0  ldd     UBLK
E0D2 2705             (        forth.asm):00355 (3)             beq     @more1          We are back from the console
E0D4 0D30             (        forth.asm):00356 (4)             tst     NBCTFB0         -->/CONTINUED invoked from the console?
E0D6 2601             (        forth.asm):00357 (3)             bne     @more1          Yes
E0D8 39               (        forth.asm):00358 (4)             rts                     No, we're done here
E0D9 0F30             (        forth.asm):00359 (5)     @more1  clr     NBCTFB0         The -->/CONTINUED exception only applies once
E0DB 8EFE6D           (        forth.asm):00360 (3)             ldx     #OKPRMPT        Provide OK feedback
E0DE 0D1B             (        forth.asm):00361 (4)             tst     USTATE+1        No OK feedback if we're compiling, just CRLF
E0E0 2702             (        forth.asm):00362 (3)             beq     @more2
E0E2 3003             (        forth.asm):00363 (4+1)           leax    3,x             Skip the ' OK' string when compiling
E0E4 BDE1D8           (        forth.asm):00364 (7)     @more2  jsr     PUTS
E0E7 39               (        forth.asm):00365 (4)             rts                     Back to whoever invoked us
E0E8 962F             (        forth.asm):00366 (3)     @exec   lda     DEFFLG
E0EA 2705             (        forth.asm):00367 (3)             beq     @introk         Compilation only flag is not set
E0EC C606             (        forth.asm):00368 (2)             ldb     #6              Incorrect STATE
E0EE BDE611           (        forth.asm):00369 (7)             jsr     ERRHDLR         No return
     E0F1             (        forth.asm):00370         INTISRA equ     *               For symbolic stack debugging purposes
E0F1 DC04             (        forth.asm):00371 (4)     @introk ldd     TOKENEP
E0F3 9322             (        forth.asm):00372 (4)             subd    BSBFADR
E0F5 DD1C             (        forth.asm):00373 (4)             std     UTOIN           Derive >IN from TOKENEP
E0F7 8EE0FE           (        forth.asm):00374 (3)             ldx     #INTRPRA        The return address
E0FA 3410             (        forth.asm):00375 (4+2)           pshs    x
E0FC 1F25             (        forth.asm):00376 (4)             tfr     y,pc            An indirect call to Y
E0FE BDE711           (        forth.asm):00377 (7)     INTRPRA jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
E101 20C9             (        forth.asm):00378 (3)             bra     MORE
                      (        forth.asm):00379         
                      (        forth.asm):00380         * The compiler.
                      (        forth.asm):00381         * Upon entry TOKENSP has been set by a prior call to SCNSTOK.
E103 BDE358           (        forth.asm):00382 (7)     COMP    jsr     SWDIC           Updates TOKENEP, CURTOKL, IMDFLG/DEFFLG
E106 2733             (        forth.asm):00383 (3)             beq     @cmpnum         Word @ TOKENSP is not in the dictionary
E108 0D2E             (        forth.asm):00384 (4)             tst     IMDFLG
E10A 271E             (        forth.asm):00385 (3)             beq     @notimd
E10C DC04             (        forth.asm):00386 (4)             ldd     TOKENEP         Derive >IN from TOKENEP
E10E 9322             (        forth.asm):00387 (4)             subd    BSBFADR
E110 DD1C             (        forth.asm):00388 (4)             std     UTOIN
                      (        forth.asm):00389         * Immediate word processing. We execute the word with an option to compile
                      (        forth.asm):00390         * an execution routine as well. This is achieved by allowing the callee to
                      (        forth.asm):00391         * set an 'action component' address that resides at 2,s in the context
                      (        forth.asm):00392         * of the (immediate) word being executed. Upon return, if that address is
                      (        forth.asm):00393         * found to be NZ, a JSR to that address will be compiled. This feature is
                      (        forth.asm):00394         * used in a number of words. DOES> is one of them.
E112 104F             (        forth.asm):00395 (2)             clrd
E114 3406             (        forth.asm):00396 (4+2)           pshs    d               Default action component address is none
E116 8EE11D           (        forth.asm):00397 (3)             ldx     #COMPLRA        Word is IMD. Invoke it. Maybe compile it too
E119 3410             (        forth.asm):00398 (4+2)           pshs    x               Return to COMPLRA
E11B 1F25             (        forth.asm):00399 (4)             tfr     y,pc            An indirect call to Y
E11D BDE711           (        forth.asm):00400 (7)     COMPLRA jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
E120 9F04             (        forth.asm):00401 (4)             stx     TOKENEP
E122 3506             (        forth.asm):00402 (4+2)           puls    d               Code address possibly set by IMD word
E124 104D             (        forth.asm):00403 (2)             tstd
E126 27D6             (        forth.asm):00404 (3)             beq     INTRPRA         Word has no action component
E128 1F02             (        forth.asm):00405 (4)             tfr     d,y
E12A 1F21             (        forth.asm):00406 (4)     @notimd tfr     y,x
E12C 109E08           (        forth.asm):00407 (5)             ldy     DICEND
E12F 86BD             (        forth.asm):00408 (2)             lda     #JSROPC         JSR extended
E131 8D12             (        forth.asm):00409 (6)             bsr     CHKRTS          Check if the final RTS can be omitted
E133 BDE42E           (        forth.asm):00410 (7)             jsr     VARCON2         Compile a JSR to the action component
E136 109F08           (        forth.asm):00411 (5)             sty     DICEND
E139 2006             (        forth.asm):00412 (3)             bra     @cmpdon         Branch back to the interpreter
E13B BDE2AD           (        forth.asm):00413 (7)     @cmpnum jsr     NUMCVT
     E13E             (        forth.asm):00414         NMCVCRA equ     *
E13E BDE417           (        forth.asm):00415 (7)             jsr     LITER
E141 9E04             (        forth.asm):00416 (4)     @cmpdon ldx     TOKENEP
E143 2087             (        forth.asm):00417 (3)             bra     MORE
                      (        forth.asm):00418         
                      (        forth.asm):00419         * Check whether the final RTS can be eliminated. It can only be if we have no
                      (        forth.asm):00420         * forward references to HERE when COMPR (;) is invoked. This is a rather
                      (        forth.asm):00421         * complicated matter but this implementation works on the basis that we can do
                      (        forth.asm):00422         * so safely if at least 2 subroutine calls have been issued with a return
                      (        forth.asm):00423         * stack whose depth is equal to IRDPTH, immediately prior to the invokation
                      (        forth.asm):00424         * of COMPR (;).
E145 3402             (        forth.asm):00425 (4+1)   CHKRTS  pshs    a
E147 109F10           (        forth.asm):00426 (5)             sty     JSRLAST         JSRLAST points to the latest JSR code emission
E14A 9625             (        forth.asm):00427 (3)             lda     RDEPTH
E14C 9126             (        forth.asm):00428 (3)             cmpa    IRDPTH          Return stack depth when : was last invoked
E14E 2705             (        forth.asm):00429 (3)             beq     @ckrts1
E150 0F27             (        forth.asm):00430 (5)             clr     RTSREMV
E152 3502             (        forth.asm):00431 (4+1)   @ckrts0 puls    a
E154 39               (        forth.asm):00432 (4)             rts
E155 0C27             (        forth.asm):00433 (5)     @ckrts1 inc     RTSREMV
E157 20F9             (        forth.asm):00434 (3)             bra     @ckrts0
                      (        forth.asm):00435         
                      (        forth.asm):00436         * Store the HEX representation of the lower nibble of A to X+.
E159 3404             (        forth.asm):00437 (4+1)   HEX1D   pshs    b
E15B C630             (        forth.asm):00438 (2)             ldb     #'0
E15D 840F             (        forth.asm):00439 (2)             anda    #$0f
E15F 810A             (        forth.asm):00440 (2)             cmpa    #10
E161 2502             (        forth.asm):00441 (3)             bcs     @hex1d1
E163 C637             (        forth.asm):00442 (2)             ldb     #'A-10
E165 103098           (        forth.asm):00443 (4)     @hex1d1 addr    b,a
E168 A780             (        forth.asm):00444 (4+1)           sta     ,x+
E16A 3504             (        forth.asm):00445 (4+1)           puls    b
E16C 39               (        forth.asm):00446 (4)             rts
                      (        forth.asm):00447         
E16D 44               (        forth.asm):00448 (1)     ADIV16  lsra
E16E 44               (        forth.asm):00449 (1)             lsra
E16F 44               (        forth.asm):00450 (1)             lsra
E170 44               (        forth.asm):00451 (1)             lsra
E171 39               (        forth.asm):00452 (4)             rts
                      (        forth.asm):00453         
                      (        forth.asm):00454         * Hexdump D to 4 bytes starting at X.  Upon return, X will point 1 byte
                      (        forth.asm):00455         * after the last character emitted. D is preserved.
E172 3406             (        forth.asm):00456 (4+2)   HDMP4   pshs    d
E174 8DF7             (        forth.asm):00457 (6)             bsr     ADIV16
E176 8DE1             (        forth.asm):00458 (6)             bsr     HEX1D
E178 A6E4             (        forth.asm):00459 (4+0)           lda     ,s
E17A 8DDD             (        forth.asm):00460 (6)             bsr     HEX1D
E17C A661             (        forth.asm):00461 (4+1)           lda     1,s
E17E 8DED             (        forth.asm):00462 (6)             bsr     ADIV16
E180 8DD7             (        forth.asm):00463 (6)             bsr     HEX1D
E182 A661             (        forth.asm):00464 (4+1)           lda     1,s
E184 8DD3             (        forth.asm):00465 (6)             bsr     HEX1D
E186 3506             (        forth.asm):00466 (4+2)           puls    d
E188 6F84             (        forth.asm):00467 (6+0)           clr     ,x
E18A 39               (        forth.asm):00468 (4)             rts
                      (        forth.asm):00469         
E18B 3406             (        forth.asm):00470 (4+2)   HDMP2   pshs    d
E18D 8DDE             (        forth.asm):00471 (6)             bsr     ADIV16
E18F 8DC8             (        forth.asm):00472 (6)             bsr     HEX1D
E191 A6E4             (        forth.asm):00473 (4+0)           lda     ,s
E193 8DC4             (        forth.asm):00474 (6)             bsr     HEX1D
E195 3506             (        forth.asm):00475 (4+2)           puls    d
E197 6F84             (        forth.asm):00476 (6+0)           clr     ,x
E199 39               (        forth.asm):00477 (4)             rts
                      (        forth.asm):00478         
                      (        forth.asm):00479         * Add string pointed to by Y starting at the address stored in X.
E19A 3402             (        forth.asm):00480 (4+1)   ADDS    pshs    a
E19C A6A0             (        forth.asm):00481 (4+1)   @adds1  lda     ,y+
E19E A780             (        forth.asm):00482 (4+1)           sta     ,x+
E1A0 26FA             (        forth.asm):00483 (3)             bne     @adds1
E1A2 3502             (        forth.asm):00484 (4+1)           puls    a
E1A4 39               (        forth.asm):00485 (4)             rts
                      (        forth.asm):00486         
                      (        forth.asm):00487         * Returns the length of the string pointed to by X (terminator excluded) in W.
E1A5 3410             (        forth.asm):00488 (4+2)   SLEN    pshs    x
E1A7 105F             (        forth.asm):00489 (2)             clrw
E1A9 105C             (        forth.asm):00490 (2)     @slen1  incw
E1AB A680             (        forth.asm):00491 (4+1)           lda     ,x+
E1AD 26FA             (        forth.asm):00492 (3)             bne     @slen1
E1AF 105A             (        forth.asm):00493 (2)             decw
E1B1 3510             (        forth.asm):00494 (4+2)           puls    x
E1B3 39               (        forth.asm):00495 (4)             rts
                      (        forth.asm):00496         
                      (        forth.asm):00497                 include console.asm
E1B4 3404             (      console.asm):00001 (4+1)   PUTCH   pshs    b
E1B6 C602             (      console.asm):00002 (2)             ldb     #ACITDRE
E1B8 F5D800           (      console.asm):00003 (4)     @ptch1  bitb    ACIACTL         Wait for TDRE bit to be set
E1BB 27FB             (      console.asm):00004 (3)             beq     @ptch1
E1BD B7D801           (      console.asm):00005 (4)             sta     ACIADAT         Transmit data
E1C0 3504             (      console.asm):00006 (4+1)           puls    b
E1C2 39               (      console.asm):00007 (4)             rts
                      (      console.asm):00008         
E1C3 8615             (      console.asm):00009 (2)     GETCH   lda     #ACIRTS0
E1C5 B7D800           (      console.asm):00010 (4)             sta     ACIACTL         You may talk to me now
E1C8 8601             (      console.asm):00011 (2)             lda     #ACIRDRF
E1CA B5D800           (      console.asm):00012 (4)     @again  bita    ACIACTL
E1CD 27FB             (      console.asm):00013 (3)             beq     @again
E1CF 8655             (      console.asm):00014 (2)             lda     #ACIRTS1
E1D1 B7D800           (      console.asm):00015 (4)             sta     ACIACTL         You may shut up now
                      (      console.asm):00016                 IFNE    CKOVRUN
                      (      console.asm):00017                 lda     #ACIOVRN
                      (      console.asm):00018                 bita    ACIACTL         Check for overrun
                      (      console.asm):00019                 beq     @getdat
                      (      console.asm):00020                 lda     #'*
                      (      console.asm):00021                 bsr     PUTCH
                      (      console.asm):00022                 ENDC
E1D4 B6D801           (      console.asm):00023 (4)     @getdat lda     ACIADAT         Get character from the ACIA
E1D7 39               (      console.asm):00024 (4)             rts
                      (      console.asm):00025         
                      (      console.asm):00026         * Send NUL terminated string pointed to by X to the ACIA.
E1D8 3416             (      console.asm):00027 (4+4)   PUTS    pshs    x,d
E1DA A680             (      console.asm):00028 (4+1)   @puts1  lda     ,x+
E1DC 2704             (      console.asm):00029 (3)             beq     @puts2         NUL marks the end of the string
E1DE 8DD4             (      console.asm):00030 (6)             bsr     PUTCH
E1E0 20F8             (      console.asm):00031 (3)             bra     @puts1
E1E2 3516             (      console.asm):00032 (4+4)   @puts2  puls    d,x
E1E4 39               (      console.asm):00033 (4)             rts
                      (      console.asm):00034         
E1E5 3410             (      console.asm):00035 (4+2)   PUTCR   pshs    x
E1E7 8EFE54           (      console.asm):00036 (3)             ldx     #CRLFSTR
E1EA 8DEC             (      console.asm):00037 (6)             bsr     PUTS
E1EC 3510             (      console.asm):00038 (4+2)           puls    x
E1EE 39               (      console.asm):00039 (4)             rts
                      (      console.asm):00040         
E1EF 8608             (      console.asm):00041 (2)     _BS     lda     #BS
E1F1 8DC1             (      console.asm):00042 (6)             bsr     PUTCH          Output BS
E1F3 8620             (      console.asm):00043 (2)             lda     #SP
E1F5 8DBD             (      console.asm):00044 (6)             bsr     PUTCH          Clear character
E1F7 8608             (      console.asm):00045 (2)             lda     #BS
E1F9 20B9             (      console.asm):00046 (3)             bra     PUTCH          And go back again
                      (      console.asm):00047         
                      (      console.asm):00048         * Receive CR terminated string and store it to X.
                      (      console.asm):00049         * Upon entry B contains the receiving buffer length.
                      (      console.asm):00050         * (excluding the NUL terminator). On exit, B will
                      (      console.asm):00051         * contain the number of characters entered (excluding
                      (      console.asm):00052         * the trailing NUL). A and X are preserved. B will
                      (      console.asm):00053         * have the actual number of characters entered.
                      (      console.asm):00054         * Implementation of $05D9 in TRS-80 Level II ROM.
E1FB C102             (      console.asm):00055 (2)     GETS    cmpb    #2
E1FD 2401             (      console.asm):00056 (3)             bhs     @gets0          B must be 2 or more
E1FF 39               (      console.asm):00057 (4)             rts
E200 3416             (      console.asm):00058 (4+4)   @gets0  pshs    x,d
E202 8DBF             (      console.asm):00059 (6)     @gets1  bsr     GETCH
E204 8108             (      console.asm):00060 (2)             cmpa    #BS             Backspace?
E206 260B             (      console.asm):00061 (3)             bne     @gets3
E208 E161             (      console.asm):00062 (4+1)           cmpb    1,s             B upon routine entry
E20A 27F6             (      console.asm):00063 (3)             beq     @gets1          Do not go beyond the beginning of the buffer
E20C 8DE1             (      console.asm):00064 (6)             bsr     _BS
E20E 301F             (      console.asm):00065 (4+1)           leax    -1,x
E210 5C               (      console.asm):00066 (1)             incb
E211 20EF             (      console.asm):00067 (3)             bra     @gets1
E213 8115             (      console.asm):00068 (2)     @gets3  cmpa    #NAK            Kill input?
E215 260B             (      console.asm):00069 (3)             bne     @gets5
                      (      console.asm):00070         * While B != 1,S (initial buffer length), decrement X, increment B.
E217 E161             (      console.asm):00071 (4+1)   @gets4  cmpb    1,s
E219 27E7             (      console.asm):00072 (3)             beq     @gets1
E21B 8DD2             (      console.asm):00073 (6)             bsr     _BS
E21D 301F             (      console.asm):00074 (4+1)           leax     -1,x
E21F 5C               (      console.asm):00075 (1)             incb
E220 20F5             (      console.asm):00076 (3)             bra     @gets4
                      (      console.asm):00077         * Regular input handling: echo input character.
E222 810D             (      console.asm):00078 (2)     @gets5  cmpa    #CR
E224 2709             (      console.asm):00079 (3)             beq     @gets6          Minicom only sends CR
E226 8D8C             (      console.asm):00080 (6)             bsr     PUTCH
E228 A780             (      console.asm):00081 (4+1)           sta     ,x+
E22A 5A               (      console.asm):00082 (1)             decb
E22B C101             (      console.asm):00083 (2)             cmpb    #1              End of buffer reached?
E22D 26D3             (      console.asm):00084 (3)             bne     @gets1
E22F 8620             (      console.asm):00085 (2)     @gets6  lda     #SP
E231 8D81             (      console.asm):00086 (6)             bsr     PUTCH
E233 6F84             (      console.asm):00087 (6+0)           clr     ,x
E235 1F10             (      console.asm):00088 (4)             tfr     x,d
E237 A362             (      console.asm):00089 (5+1)           subd    2,s             Actual number of characters entered
E239 E761             (      console.asm):00090 (4+1)           stb     1,s             Stored to B (through the system stack).         
E23B 3516             (      console.asm):00091 (4+4)           puls    x,d
E23D 39               (      console.asm):00092 (4)             rts
                      (      console.asm):00093         
                      (        forth.asm):00498         
                      (        forth.asm):00499                 IFNE    DEBUG
E23E                  (        forth.asm):00500         PAGE0IN pshs    x               Fill up page 0 with all C7 (an illegal opcode)
                      (        forth.asm):00501                 ldx     #RAMSTRT
                      (        forth.asm):00502                 lda     #ILLOPC
                      (        forth.asm):00503                 sta     ,x
                      (        forth.asm):00504                 leay    1,x
                      (        forth.asm):00505                 ldw     #255
                      (        forth.asm):00506                 tfm     x+,y+
                      (        forth.asm):00507                 puls    x
                      (        forth.asm):00508                 rts
                      (        forth.asm):00509                 ENDC
                      (        forth.asm):00510         
E23E BDE9E9           (        forth.asm):00511         FORTHIN RFXT    jsr,NCLR+7      XT for NCLR. Set up the normal stack
E241 BDE9F5           (        forth.asm):00512                 RFXT    jsr,RCLR+7      XT for RCLR. Set up the return stack
                      (        forth.asm):00513                 IFNE    DEBUG
                      (        forth.asm):00514                 bsr     PAGE0IN
                      (        forth.asm):00515                 ENDC
                      (        forth.asm):00516         * Relocate '@' code to RAM and set it up as the last dictionary entry (RO).
E244 8EFDD3           (        forth.asm):00517 (3)             ldx     #THEEND         Source address for tfm
E247 CCFDE3           (        forth.asm):00518 (3)             ldd     #REALEND
E24A 103210           (        forth.asm):00519 (4)             subr    x,d
E24D 1F06             (        forth.asm):00520 (4)             tfr     d,w             Byte count for tfm
E24F 108E0C10         (        forth.asm):00521 (4)             ldy     #WDICSPC        Destination address for tfm
E253 109F06           (        forth.asm):00522 (5)             sty     LSTWAD
E256 113812           (        forth.asm):00523 (6+?)           tfm     x+,y+
E259 109F08           (        forth.asm):00524 (5)             sty     DICEND
                      (        forth.asm):00525                 IFNE    RELFEAT
E25C BDEB08           (        forth.asm):00526                 RFXT    jsr,MONITOR+10  XT for MONITOR (monitor @ in RAM)
                      (        forth.asm):00527                 ENDC
E25F 8D09             (        forth.asm):00528 (6)             bsr     EMPTYB          Buffer related initializations.
E261 104F             (        forth.asm):00529 (2)             clrd
E263 DD1A             (        forth.asm):00530 (4)             std     USTATE          Initial mode is interpretation
E265 DD20             (        forth.asm):00531 (4)             std     USCR            Clear SCR
E267 7EFA0F           (        forth.asm):00532                 RFXT    jmp,DECIMAL+10  XT for DECIMAL. Default base is decimal
                      (        forth.asm):00533         
E26A 8E03F0           (        forth.asm):00534 (3)     EMPTYB  ldx     #BUF0
E26D 8D03             (        forth.asm):00535 (6)             bsr     EMPT1B
E26F 8E0800           (        forth.asm):00536 (3)             ldx     #BUF1
                      (        forth.asm):00537         * Empty the buffer pointed to by X.
E272 9F16             (        forth.asm):00538 (4)     EMPT1B  stx     MRUBUFA         Update most recently used buffer address
E274 31890401         (        forth.asm):00539 (4+3)           leay    BLKSIZ+1,x
E278 104F             (        forth.asm):00540 (2)             clrd
E27A EDA4             (        forth.asm):00541 (5+0)           std     ,y              Clear terminator and flags fields
E27C 39               (        forth.asm):00542 (4)             rts
                      (        forth.asm):00543         
                      (        forth.asm):00544         * Scan for the next non-space character pointed to by X.
                      (        forth.asm):00545         * That character is returned through A. Flags are set accordingly.
E27D A680             (        forth.asm):00546 (4+1)   SCNSTOK lda     ,x+
E27F 2704             (        forth.asm):00547 (3)             beq     @scstk1
E281 8120             (        forth.asm):00548 (2)             cmpa    #SP
E283 27F8             (        forth.asm):00549 (3)             beq     SCNSTOK
E285 301F             (        forth.asm):00550 (4+1)   @scstk1 leax    -1,x            Keep X pointing at the beginning of the token
E287 9F02             (        forth.asm):00551 (4)             stx     TOKENSP
E289 4D               (        forth.asm):00552 (1)             tsta                    Have to test again because LEA affects Z
E28A 39               (        forth.asm):00553 (4)             rts
                      (        forth.asm):00554         
                      (        forth.asm):00555         * Scan for the next white space character (or NUL) as an end of token marker.
                      (        forth.asm):00556         * Upon entry:
                      (        forth.asm):00557         * - X points to the input stream.
                      (        forth.asm):00558         * Upon return:
                      (        forth.asm):00559         * - X will point to the next space character or NUL.
                      (        forth.asm):00560         * - CURTOKL will hold the current token length (returned in B).
                      (        forth.asm):00561         * - TOKENEP will point to the end of the current token.
E28B 5F               (        forth.asm):00562 (1)     SCNETOK clrb
E28C 5C               (        forth.asm):00563 (1)     @scetok incb
E28D A680             (        forth.asm):00564 (4+1)           lda     ,x+
E28F 2704             (        forth.asm):00565 (3)             beq     @scetk1
E291 8120             (        forth.asm):00566 (2)             cmpa    #SP
E293 26F7             (        forth.asm):00567 (3)             bne     @scetok
E295 301F             (        forth.asm):00568 (4+1)   @scetk1 leax    -1,x            Keep X pointing at the end of the token
E297 9F04             (        forth.asm):00569 (4)             stx     TOKENEP
E299 5A               (        forth.asm):00570 (1)             decb
E29A D72D             (        forth.asm):00571 (3)             stb     CURTOKL
E29C 39               (        forth.asm):00572 (4)             rts
                      (        forth.asm):00573         
                      (        forth.asm):00574         * Check whether BASE is in the supported range ([2..36]).
E29D 9619             (        forth.asm):00575 (3)     CKBASE  lda     UBASE+1         BASE
E29F 8102             (        forth.asm):00576 (2)             cmpa    #2
E2A1 2505             (        forth.asm):00577 (3)             blo     @ckbser         Must be >= 2
E2A3 8124             (        forth.asm):00578 (2)             cmpa    #36
E2A5 2201             (        forth.asm):00579 (3)             bhi     @ckbser         And <= 36 (the ANSi maximum)
E2A7 39               (        forth.asm):00580 (4)             rts
E2A8 C60F             (        forth.asm):00581 (2)     @ckbser ldb     #15             Invalid BASE
E2AA BDE611           (        forth.asm):00582 (7)             jsr     ERRHDLR         No return
     E2AD             (        forth.asm):00583         CKBASRA equ     *
                      (        forth.asm):00584         
                      (        forth.asm):00585         * NUMCVT performs a signed string to number conversion. The input string is
                      (        forth.asm):00586         * acquired from the input stream. Note that this routine always is called
                      (        forth.asm):00587         * after a dictionary lookup (SWDIC), so TOKENSP and CURTOKL are guaranteed
                      (        forth.asm):00588         * to have been set previously. There are two ways out this routine:
                      (        forth.asm):00589         * - redirection to the error handler (Undefined word), or
                      (        forth.asm):00590         * - a converted cell returned through X.
                      (        forth.asm):00591         * This a re-implementation based on CONVERT but unlike CONVERT, which produces
                      (        forth.asm):00592         * an unsigned double as its output, this produces a signed single cell.
E2AD 8DEE             (        forth.asm):00593 (6)     NUMCVT  bsr     CKBASE          No return if BASE isn't in the [2..36] range
E2AF 9E02             (        forth.asm):00594 (4)             ldx     TOKENSP
E2B1 962D             (        forth.asm):00595 (3)             lda     CURTOKL         Character count to go through
E2B3 3402             (        forth.asm):00596 (4+1)           pshs    a
E2B5 104F             (        forth.asm):00597 (2)             clrd                    Initialize the result
E2B7 972B             (        forth.asm):00598 (3)             sta     ISNEGF          Assume it be be non-negative
                      (        forth.asm):00599         * Check for optional minus sign.
E2B9 11E684           (        forth.asm):00600 (5+0)           ldf     ,x
E2BC 11C12D           (        forth.asm):00601 (3)             cmpf    #'-
E2BF 2606             (        forth.asm):00602 (3)             bne     @ncnxt
E2C1 0C2B             (        forth.asm):00603 (5)             inc     ISNEGF          Remember to negate the result before returning
E2C3 3001             (        forth.asm):00604 (4+1)           leax    1,x             Skip the negativity!
E2C5 6AE4             (        forth.asm):00605 (6+0)           dec     ,s              Decrement token length
E2C7 119F18           (        forth.asm):00606 (29)    @ncnxt  muld    UBASE           D multipled by BASE to Q (D:W)
E2CA E680             (        forth.asm):00607 (4+1)           ldb     ,x+             Acquire next input char (ignore the product MSC)
E2CC C030             (        forth.asm):00608 (2)             subb    #'0
E2CE 252B             (        forth.asm):00609 (3)             blo     @ncoor          Digit out of range
E2D0 C10A             (        forth.asm):00610 (2)             cmpb    #10
E2D2 2510             (        forth.asm):00611 (3)             blo     @ncnolt         No letter in potential BASE
                      (        forth.asm):00612                 IFEQ    CSSNTVE
E2D4 C111             (        forth.asm):00613 (2)             cmpb    #'A-'0
E2D6 2523             (        forth.asm):00614 (3)             blo     @ncoor          Greater than 9 but lower than A
E2D8 C131             (        forth.asm):00615 (2)             cmpb    #'a-'0
E2DA 2506             (        forth.asm):00616 (3)             blo     @ncisuc         Upper case already
E2DC C14A             (        forth.asm):00617 (2)             cmpb    #'z-'0
E2DE 221B             (        forth.asm):00618 (3)             bhi     @ncoor          Definitely out of range
E2E0 C020             (        forth.asm):00619 (2)             subb    #'a-'A          To upper case
                      (        forth.asm):00620                 ENDC
E2E2 C007             (        forth.asm):00621 (2)     @ncisuc subb    #'A-':          A-Z to number
E2E4 D119             (        forth.asm):00622 (3)     @ncnolt cmpb    UBASE+1         B has a digit. Make sure it's less than BASE
E2E6 2413             (        forth.asm):00623 (3)             bhs     @ncoor
                      (        forth.asm):00624         * Digit in B has been validated wrt. BASE.
E2E8 4F               (        forth.asm):00625 (1)             clra
E2E9 103060           (        forth.asm):00626 (4)             addr    w,d
E2EC 6AE4             (        forth.asm):00627 (6+0)           dec     ,s              Are we done yet?
E2EE 26D7             (        forth.asm):00628 (3)             bne     @ncnxt          No. Iterate over to the next digit
E2F0 0D2B             (        forth.asm):00629 (4)             tst     ISNEGF          Are we dealing with a negative number?
E2F2 2702             (        forth.asm):00630 (3)             beq     @ncdone         No
E2F4 1040             (        forth.asm):00631 (2)             negd                    Acknowledge the negativity
E2F6 3261             (        forth.asm):00632 (4+1)   @ncdone leas    1,s             Drop token length from the system stack
E2F8 1F01             (        forth.asm):00633 (4)             tfr     d,x             Return the result in X
E2FA 39               (        forth.asm):00634 (4)             rts
E2FB 3261             (        forth.asm):00635 (4+1)   @ncoor  leas    1,s             Drop token length from the system stack
E2FD 9E02             (        forth.asm):00636 (4)             ldx     TOKENSP         Current digit is out of range
E2FF C602             (        forth.asm):00637 (2)             ldb     #2              Undefined (X points to the offending word)
E301 BDE611           (        forth.asm):00638 (7)             jsr     ERRHDLR         No return
     E304             (        forth.asm):00639         NUMCVRA equ     *               For symbolic stack dump purposes
                      (        forth.asm):00640         
                      (        forth.asm):00641         * Check for minimal data depth. On input D has the lowest possible stack
                      (        forth.asm):00642         * address that satisfies the needs of the caller. This routine is meant
                      (        forth.asm):00643         * to support "transactional" behaviour, which is intended to improve
                      (        forth.asm):00644         * debugging support.
E304 103703           (        forth.asm):00645 (4)     CHKNDPT cmpr    d,u
E307 2201             (        forth.asm):00646 (3)             bhi     @stkudf
E309 39               (        forth.asm):00647 (4)             rts
E30A C601             (        forth.asm):00648 (2)     @stkudf ldb     #1              Data stack underflow
E30C BDE611           (        forth.asm):00649 (7)             jsr     ERRHDLR         No return
     E30F             (        forth.asm):00650         CKDPTRA equ     *
                      (        forth.asm):00651         
                      (        forth.asm):00652         * Convert number stored in X to a string (depending on BASE value).
                      (        forth.asm):00653         * Output is stored in the global TBUFF buffer. X is preserved.
E30F 8D8C             (        forth.asm):00654 (6)     CVNSTR  bsr     CKBASE
E311 0F2B             (        forth.asm):00655 (5)             clr     ISNEGF
E313 1F10             (        forth.asm):00656 (4)             tfr     x,d
E315 0D2C             (        forth.asm):00657 (4)             tst     CVISSGN         Are we to perform a signed conversion?
E317 2708             (        forth.asm):00658 (3)             beq     @cvnst1
E319 104D             (        forth.asm):00659 (2)             tstd
E31B 2A04             (        forth.asm):00660 (3)             bpl     @cvnst1
E31D 0C2B             (        forth.asm):00661 (5)             inc     ISNEGF          Number being converted is negative
E31F 1040             (        forth.asm):00662 (2)             negd
E321 1F06             (        forth.asm):00663 (4)     @cvnst1 tfr     d,w
E323 104F             (        forth.asm):00664 (2)             clrd
E325 108E03AD         (        forth.asm):00665 (4)             ldy     #TBUFF+19       Sign + 16 digits + terminator + 1
E329 6FA2             (        forth.asm):00666 (6+1)           clr     ,-y             End of string marker
E32B 119E18           (        forth.asm):00667 (35)    @cvnst2 divq    UBASE           D returns the modulo and W the quotient
E32E 8630             (        forth.asm):00668 (2)             lda     #'0
E330 C10A             (        forth.asm):00669 (2)             cmpb    #10
E332 2502             (        forth.asm):00670 (3)             bcs     @cvnst3
                      (        forth.asm):00671         * BASE has letters among its valid numbers.
E334 8637             (        forth.asm):00672 (2)             lda     #'A-10
E336 103089           (        forth.asm):00673 (4)     @cvnst3 addr    a,b
E339 E7A2             (        forth.asm):00674 (4+1)           stb     ,-y
E33B 104F             (        forth.asm):00675 (2)             clrd
E33D 105D             (        forth.asm):00676 (2)             tstw
E33F 26EA             (        forth.asm):00677 (3)             bne     @cvnst2
E341 C620             (        forth.asm):00678 (2)             ldb     #SP
E343 0D2B             (        forth.asm):00679 (4)             tst     ISNEGF
E345 2702             (        forth.asm):00680 (3)             beq     @cvnst4
E347 C62D             (        forth.asm):00681 (2)             ldb     #'-
E349 E7A2             (        forth.asm):00682 (4+1)   @cvnst4 stb     ,-y
                      (        forth.asm):00683         * We need to insert leading spaces up to the beginning of the output buffer.
E34B C620             (        forth.asm):00684 (2)             ldb     #SP
E34D 108C039A         (        forth.asm):00685 (4)     @cvnst5 cmpy    #TBUFF
E351 2601             (        forth.asm):00686 (3)             bne     @cvnst6
E353 39               (        forth.asm):00687 (4)             rts
E354 E7A2             (        forth.asm):00688 (4+1)   @cvnst6 stb     ,-y
E356 20F5             (        forth.asm):00689 (3)             bra     @cvnst5
                      (        forth.asm):00690         
                      (        forth.asm):00691         * Search word beginning at address TOKENSP in the dictionary.
                      (        forth.asm):00692         * Upon return Z will be set if the word was not found.
                      (        forth.asm):00693         * Otherwise, Y will point to the code section of the word.
                      (        forth.asm):00694         * CSSNTVE (defined in constants.asm) defines whether the
                      (        forth.asm):00695         * dictionary match is case sensitive or not.
                      (        forth.asm):00696         * Important note: if the word is found TOKENEP will be copied to TOKENSP.
E358 9E02             (        forth.asm):00697 (4)     SWDIC   ldx     TOKENSP
E35A BDE28B           (        forth.asm):00698 (7)             jsr     SCNETOK         B has CURTOKL
E35D 9E02             (        forth.asm):00699 (4)             ldx     TOKENSP
E35F 109E06           (        forth.asm):00700 (5)             ldy     LSTWAD          Latest word header address to Y
E362 2603             (        forth.asm):00701 (3)     @swrdc0 bne     @swrdc1
E364 1FC2             (        forth.asm):00702 (4)             tfr     0,y             Word not found. Z is set
E366 39               (        forth.asm):00703 (4)             rts
E367 A6A4             (        forth.asm):00704 (4+0)   @swrdc1 lda     ,y              Word attribute to A
E369 841F             (        forth.asm):00705 (2)             anda    #WRLNMSK        Extract word length
E36B 3420             (        forth.asm):00706 (4+2)           pshs    y
E36D 103798           (        forth.asm):00707 (4)             cmpr    b,a             Word length match?
E370 2631             (        forth.asm):00708 (3)             bne     @swrdc3         No, point to next dictionary entry
E372 3121             (        forth.asm):00709 (4+1)           leay    1,y
E374 A6A0             (        forth.asm):00710 (4+1)   @swrdc2 lda     ,y+
                      (        forth.asm):00711                 IFNE    CSSNTVE
                      (        forth.asm):00712                 cmpa    ,x+             Case sensitive dictionary
                      (        forth.asm):00713                 ELSE
E376 1F9E             (        forth.asm):00714 (4)             tfr     b,e             Case insensitive search (preferred)
E378 E680             (        forth.asm):00715 (4+1)           ldb     ,x+
E37A C161             (        forth.asm):00716 (2)             cmpb    #'a
E37C 2506             (        forth.asm):00717 (3)             bcs     @nochg
E37E C17B             (        forth.asm):00718 (2)             cmpb    #'z+1
E380 2402             (        forth.asm):00719 (3)             bcc     @nochg
E382 C020             (        forth.asm):00720 (2)             subb    #'a-'A
E384 103798           (        forth.asm):00721 (4)     @nochg  cmpr    b,a
E387 1FE9             (        forth.asm):00722 (4)             tfr     e,b
                      (        forth.asm):00723                 ENDC
E389 2618             (        forth.asm):00724 (3)             bne     @swrdc3
E38B 5A               (        forth.asm):00725 (1)             decb
E38C 26E6             (        forth.asm):00726 (3)             bne     @swrdc2
                      (        forth.asm):00727         * Word match!
E38E 3510             (        forth.asm):00728 (4+2)           puls    x
E390 E684             (        forth.asm):00729 (4+0)           ldb     ,x              Word attribute byte to B
E392 4F               (        forth.asm):00730 (1)             clra
E393 58               (        forth.asm):00731 (1)             lslb                    Bit 7 to CFLAG
E394 49               (        forth.asm):00732 (1)             rola                    CFLAG to A
E395 972E             (        forth.asm):00733 (3)             sta     IMDFLG          Set IMMEDIATE flag
E397 4F               (        forth.asm):00734 (1)             clra
E398 58               (        forth.asm):00735 (1)             lslb                    Bit 6 to CFLAG
E399 49               (        forth.asm):00736 (1)             rola                    CFLAG to A
E39A 972F             (        forth.asm):00737 (3)             sta     DEFFLG          Set DEFINE flag
E39C 9E04             (        forth.asm):00738 (4)             ldx     TOKENEP
E39E 9F02             (        forth.asm):00739 (4)             stx     TOKENSP
                      (        forth.asm):00740                 IFNE    RELFEAT
E3A0 3123             (        forth.asm):00741 (4+1)           leay    3,y             Skip back pointer and checksum. Return XT
                      (        forth.asm):00742                 ELSE
                      (        forth.asm):00743                 leay    2,y             Skip back pointer. Return XT
                      (        forth.asm):00744                 ENDC
E3A2 39               (        forth.asm):00745 (4)             rts                     Z is clear due to the latest leay invocation
E3A3 3520             (        forth.asm):00746 (4+2)   @swrdc3 puls    y               Point to previous word in the dictionary
E3A5 4F               (        forth.asm):00747 (1)             clra
E3A6 E6A0             (        forth.asm):00748 (4+1)           ldb     ,y+
E3A8 C41F             (        forth.asm):00749 (2)             andb    #WRLNMSK
E3AA 31AB             (        forth.asm):00750 (4+2)           leay    d,y
E3AC 9E02             (        forth.asm):00751 (4)             ldx     TOKENSP
E3AE D62D             (        forth.asm):00752 (3)             ldb     CURTOKL
E3B0 10AEA4           (        forth.asm):00753 (6+0)           ldy     ,y
E3B3 20AD             (        forth.asm):00754 (3)             bra     @swrdc0
                      (        forth.asm):00755         
                      (        forth.asm):00756         * Create new dictionary entry. The word name being created is acquired from
                      (        forth.asm):00757         * the input stream. Warning, this requires a writable dictionary!
                      (        forth.asm):00758         * The new end of the dictionary is returned in Y. W is preserved.
E3B5 1038             (        forth.asm):00759 (6)     LOCWRT  pshsw
E3B7 9E08             (        forth.asm):00760 (4)             ldx     DICEND
                      (        forth.asm):00761                 IFNE    DEBUG
                      (        forth.asm):00762                 cmpx    #ROMSTRT
                      (        forth.asm):00763                 bcs     @locwr0
                      (        forth.asm):00764                 ldb     #10             Assertion failure (trying to write to ROM!)
                      (        forth.asm):00765                 jsr     ERRHDLR         No return
E3B9                  (        forth.asm):00766         LWAFRA  equ     *
                      (        forth.asm):00767                 ENDC
E3B9 9F0C             (        forth.asm):00768 (4)     @locwr0 stx     BDICEND         Back pointer up
E3BB 9E06             (        forth.asm):00769 (4)             ldx     LSTWAD
E3BD 9F0A             (        forth.asm):00770 (4)             stx     BLSTWAD         Back pointer up
E3BF BDE711           (        forth.asm):00771 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
E3C2 6D84             (        forth.asm):00772 (5+0)           tst     ,x
E3C4 2605             (        forth.asm):00773 (3)             bne     @locwr2
E3C6 C605             (        forth.asm):00774 (2)     @locwr1 ldb     #5              Missing word name
E3C8 BDE611           (        forth.asm):00775 (7)             jsr     ERRHDLR         No return
     E3CB             (        forth.asm):00776         LWMNRA  equ     *               LOCWRT missing word name return address
E3CB BDE27D           (        forth.asm):00777 (7)     @locwr2 jsr     SCNSTOK
E3CE 27F6             (        forth.asm):00778 (3)             beq     @locwr1         End of line reached
E3D0 BDE28B           (        forth.asm):00779 (7)             jsr     SCNETOK         X has TOKENEP, B has CURTOKL
E3D3 109E02           (        forth.asm):00780 (5)             ldy     TOKENSP
E3D6 103221           (        forth.asm):00781 (4)             subr    y,x
E3D9 3410             (        forth.asm):00782 (4+2)           pshs    x               Word length to the system stack
E3DB 9E08             (        forth.asm):00783 (4)             ldx     DICEND
E3DD A661             (        forth.asm):00784 (4+1)           lda     1,s             Word length LSB in the system stack
E3DF 8120             (        forth.asm):00785 (2)             cmpa    #1+WRLNMSK      Max word length is 31, 79-STANDARD compliant
E3E1 2505             (        forth.asm):00786 (3)             blo     @lcwr21
E3E3 C610             (        forth.asm):00787 (2)             ldb     #16             Word name is too long
E3E5 BDE611           (        forth.asm):00788 (7)             jsr     ERRHDLR
     E3E8             (        forth.asm):00789         WTOOLNG equ     *
E3E8 A780             (        forth.asm):00790 (4+1)   @lcwr21 sta     ,x+             Word length to dictionary
E3EA 10A6E1           (        forth.asm):00791 (6+2)           ldw     ,s++            16-bit word length to W
E3ED 1E12             (        forth.asm):00792 (5)             exg     x,y             Y points to the dictionary, X has TOKENSP
                      (        forth.asm):00793                 IFNE    CSSNTVE
                      (        forth.asm):00794                 tfm     x+,y+           Word name to dictionary, as is
                      (        forth.asm):00795                 ELSE
E3EF 1FF9             (        forth.asm):00796 (4)             tfr     f,b             Force dictionary entry to upper case
E3F1 A680             (        forth.asm):00797 (4+1)   @locwr3 lda     ,x+
E3F3 8161             (        forth.asm):00798 (2)             cmpa    #'a
E3F5 2506             (        forth.asm):00799 (3)             bcs     @locwr4
E3F7 817B             (        forth.asm):00800 (2)             cmpa    #'z+1
E3F9 2402             (        forth.asm):00801 (3)             bcc     @locwr4
E3FB 8020             (        forth.asm):00802 (2)             suba    #'a-'A          To upper case
E3FD A7A0             (        forth.asm):00803 (4+1)   @locwr4 sta     ,y+
E3FF 5A               (        forth.asm):00804 (1)             decb
E400 26EF             (        forth.asm):00805 (3)             bne     @locwr3
                      (        forth.asm):00806                 ENDC
E402 1F10             (        forth.asm):00807 (4)             tfr     x,d
E404 9322             (        forth.asm):00808 (4)             subd    BSBFADR
E406 DD1C             (        forth.asm):00809 (4)             std     UTOIN           Skip word name in the input stream
E408 9E06             (        forth.asm):00810 (4)             ldx     LSTWAD
E40A AFA1             (        forth.asm):00811 (5+2)           stx     ,y++            Back pointer to dictionary
                      (        forth.asm):00812                 IFNE    RELFEAT
E40C 6FA0             (        forth.asm):00813 (6+1)           clr     ,y+             Initialize the checksum header field
                      (        forth.asm):00814                 ENDC
E40E 109F08           (        forth.asm):00815 (5)             sty     DICEND
E411 109F0E           (        forth.asm):00816 (5)             sty     RECADDR         Should we resort to recursion later on
E414 1039             (        forth.asm):00817 (6)             pulsw
E416 39               (        forth.asm):00818 (4)             rts
                      (        forth.asm):00819         
                      (        forth.asm):00820         * Compile 'ldx  #X; jsr NPUSH'.
                      (        forth.asm):00821         * DICEND is updated and returned in Y.
E417 109E08           (        forth.asm):00822 (5)     LITER   ldy     DICEND
E41A 868E             (        forth.asm):00823 (2)             lda     #LDXOPC         LDX immediate
E41C 8D10             (        forth.asm):00824 (6)             bsr     VARCON2
E41E 86BD             (        forth.asm):00825 (2)             lda     #JSROPC         JSR extended
E420 BDE145           (        forth.asm):00826 (7)             jsr     CHKRTS          Check if the final RTS can be omitted
E423 8D06             (        forth.asm):00827 (6)             bsr     VARCON1
E425 109F08           (        forth.asm):00828 (5)             sty     DICEND
E428 39               (        forth.asm):00829 (4)             rts
                      (        forth.asm):00830         
                      (        forth.asm):00831         * Compile 'jmp  NPUSH'.
                      (        forth.asm):00832         * Y points to the end of the dictionary on entry and on exit.
E429 867E             (        forth.asm):00833 (2)     VARCON  lda     #JMPOPC         JMP extended
E42B 8EE68A           (        forth.asm):00834 (3)     VARCON1 ldx     #NPUSH
E42E A7A0             (        forth.asm):00835 (4+1)   VARCON2 sta     ,y+
E430 AFA1             (        forth.asm):00836 (5+2)           stx     ,y++
E432 39               (        forth.asm):00837 (4)             rts
                      (        forth.asm):00838         
                      (        forth.asm):00839         * Used by U<, U>, <, >.
E433 CC0242BDE304     (        forth.asm):00840         CMP2    MINDREQ 2               At least 2 cells must be stacked up
E439 10AEC4           (        forth.asm):00841 (6+0)   CMP2RA  ldy     ,u
E43C AE42             (        forth.asm):00842 (5+1)           ldx     2,u
E43E 103721           (        forth.asm):00843 (4)             cmpr    y,x
E441 1FA9             (        forth.asm):00844 (4)             tfr     cc,b
                      (        forth.asm):00845                 IFNE    DEBUG
                      (        forth.asm):00846                 clra
                      (        forth.asm):00847                 std     CCREG
                      (        forth.asm):00848                 ENDC
E443 1FC1             (        forth.asm):00849 (4)             tfr     0,x
E445 3344             (        forth.asm):00850 (4+1)           leau    4,u
E447 1F9A             (        forth.asm):00851 (4)             tfr     b,cc
E449 39               (        forth.asm):00852 (4)             rts
                      (        forth.asm):00853         
                      (        forth.asm):00854         * Used by CMOVE, <CMOVE, CMOVE>, MOVE.
E44A CC0240BDE304     (        forth.asm):00855         ACQMOVP MINDREQ 3               At least 3 cells must be stacked up
E450 10A6C4           (        forth.asm):00856 (6+0)   ACQVMRA ldw     ,u              Byte count
E453 10AE42           (        forth.asm):00857 (6+1)           ldy     2,u             Destination address
E456 AE44             (        forth.asm):00858 (5+1)           ldx     4,u             Source address
E458 3346             (        forth.asm):00859 (4+1)           leau    6,u             Drop 3 cells from the user stack
E45A 39               (        forth.asm):00860 (4)             rts
                      (        forth.asm):00861         
                      (        forth.asm):00862         * FDCTSYM enveadours to match the address stored in Y to a dictionary entry.
                      (        forth.asm):00863         * Upon a successful flexible match, it will output a string in the form of
                      (        forth.asm):00864         * <wordname>+<offset> to the string pointed to by X. <wordname> refers to the
                      (        forth.asm):00865         * code entry point of the matched word. <offset> will be expressed in hex.
                      (        forth.asm):00866         * If a match is found, Z will be clear, otherwise it will be set.
                      (        forth.asm):00867         * A candidate for a word code address must meet the following criteria:
                      (        forth.asm):00868         * ((Y U>= #EBUFS) AND (Y U< #THEEND)) OR ((Y U>= #WDICSPC) AND (Y U< DICEND)).
                      (        forth.asm):00869         * Upon return:
                      (        forth.asm):00870         * - the string pointed to by X will updated with its symbolic match
                      (        forth.asm):00871         *   (NUL terminated), if there is one. X itself might have been altered.
                      (        forth.asm):00872         * - Y should be preserved.
                      (        forth.asm):00873         * EBUFS (EMPTY-BUFFERS) header address is the last word in the dictionary.
                      (        forth.asm):00874                 IFNE    SSDFEAT
E45B 3430             (        forth.asm):00875 (4+4)   FDCTSYM pshs    y,x     
E45D 1F21             (        forth.asm):00876 (4)             tfr     y,x             Potential execution token to X
E45F 8CE834           (        forth.asm):00877 (3)             cmpx    #EBUFS
E462 2505             (        forth.asm):00878 (3)             blo     @fdstr2 
E464 8CFDD3           (        forth.asm):00879 (3)             cmpx    #THEEND
E467 250D             (        forth.asm):00880 (3)             blo     @fdsmtc
E469 8C0C10           (        forth.asm):00881 (3)     @fdstr2 cmpx    #WDICSPC        Term 2 of the predicate for a valid word addr
E46C 2504             (        forth.asm):00882 (3)             blo     @fdsnom
E46E 9C08             (        forth.asm):00883 (4)             cmpx    DICEND
E470 2504             (        forth.asm):00884 (3)             blo     @fdsmtc
E472 4F               (        forth.asm):00885 (1)     @fdsnom clra                    No match (Z is set)
E473 3530             (        forth.asm):00886 (4+4)           puls    x,y
E475 39               (        forth.asm):00887 (4)             rts
E476 9E06             (        forth.asm):00888 (4)     @fdsmtc ldx     LSTWAD          Potential match. Scan upward from LAST
                      (        forth.asm):00889         * X points to the latest word header, Y has an execution token.
E478 109608           (        forth.asm):00890 (5)             ldw     DICEND          W points to the end of the code section
E47B 3410             (        forth.asm):00891 (4+2)   @fdslop pshs    x               Pointer to the current word header
E47D E680             (        forth.asm):00892 (4+1)           ldb     ,x+
E47F C41F             (        forth.asm):00893 (2)             andb    #WRLNMSK
E481 3A               (        forth.asm):00894 (1)             abx                     Skip word name string
E482 EC81             (        forth.asm):00895 (5+2)           ldd     ,x++            Backlink to D
                      (        forth.asm):00896                 IFNE    RELFEAT
E484 3001             (        forth.asm):00897 (4+1)           leax    1,x             Skip the checksum
                      (        forth.asm):00898                 ENDC
E486 103712           (        forth.asm):00899 (4)             cmpr    x,y
E489 2530             (        forth.asm):00900 (3)             blo     @fdsnwd
E48B 103762           (        forth.asm):00901 (4)             cmpr    w,y
E48E 222B             (        forth.asm):00902 (3)             bhi     @fdsnwd         An equal address is allowed here, in case
                      (        forth.asm):00903         * jsr ERRHDLR is the last instruction for the word under consideration.
                      (        forth.asm):00904         * This happens to be the case for FORGET and LPAR.
                      (        forth.asm):00905         * Y matches the code range for the current word.
E490 3510             (        forth.asm):00906 (4+2)           puls    x
E492 E680             (        forth.asm):00907 (4+1)           ldb     ,x+
E494 C41F             (        forth.asm):00908 (2)             andb    #WRLNMSK
E496 1F9F             (        forth.asm):00909 (4)             tfr     b,f
E498 114F             (        forth.asm):00910 (2)             clre                    W has the matched word length
E49A 10AEE4           (        forth.asm):00911 (6+0)           ldy     ,s              Y points to the target buffer
E49D 8627             (        forth.asm):00912 (2)             lda     #''
E49F A7A0             (        forth.asm):00913 (4+1)           sta     ,y+
E4A1 113812           (        forth.asm):00914 (6+?)           tfm     x+,y+
E4A4 A7A0             (        forth.asm):00915 (4+1)           sta     ,y+
                      (        forth.asm):00916         * Offset processing.
E4A6 862B             (        forth.asm):00917 (2)             lda     #'+
E4A8 A7A0             (        forth.asm):00918 (4+1)           sta     ,y+
                      (        forth.asm):00919                 IFNE    RELFEAT
E4AA 3003             (        forth.asm):00920 (4+1)           leax    3,x             Skip backlink and checksum
                      (        forth.asm):00921                 ELSE
                      (        forth.asm):00922                 leax    2,x             Skip backlink
                      (        forth.asm):00923                 ENDC
E4AC EC62             (        forth.asm):00924 (5+1)           ldd     2,s             Execution token to D
E4AE 103210           (        forth.asm):00925 (4)             subr    x,d             Offset between XT and word entry point to D
E4B1 1F21             (        forth.asm):00926 (4)             tfr     y,x
E4B3 BDE172           (        forth.asm):00927 (7)             jsr     HDMP4           Dump hex incarnation of the offset to X
E4B6 3530             (        forth.asm):00928 (4+4)           puls    x,y
E4B8 1CFB             (        forth.asm):00929 (2)             andcc   #^ZFLAG         Clear ZFLAG
E4BA 39               (        forth.asm):00930 (4)             rts
                      (        forth.asm):00931         * Point to the next word.
E4BB 1039             (        forth.asm):00932 (6)     @fdsnwd pulsw                   Retrieve current word header address
E4BD 104D             (        forth.asm):00933 (2)             tstd
E4BF 27B1             (        forth.asm):00934 (3)             beq     @fdsnom         Just met the last dictionary entry
E4C1 1F01             (        forth.asm):00935 (4)             tfr     d,x             Point to previous word header
E4C3 10810C10         (        forth.asm):00936 (4)             cmpw    #WDICSPC        Are we transitioning from RAM to ROM?
E4C7 26B2             (        forth.asm):00937 (3)             bne     @fdslop         No singularity
E4C9 1086FDD3         (        forth.asm):00938 (4)             ldw     #THEEND         Won't be able to diagnose the ROM based @...
E4CD 20AC             (        forth.asm):00939 (3)             bra     @fdslop
                      (        forth.asm):00940         
                      (        forth.asm):00941         * Find the best possible symbolic approximation of Y and store it to the
                      (        forth.asm):00942         * buffer pointed to by X.
                      (        forth.asm):00943         * On entry:
                      (        forth.asm):00944         * - Y has a code address which is to be matched with a symbolic name + offset.
                      (        forth.asm):00945         * - X points to a buffer where the resolution is to be stored.
                      (        forth.asm):00946         * On return:
                      (        forth.asm):00947         * - Y is to be preserved.
                      (        forth.asm):00948         * - the output buffer will be updated with the best symbolic match (NUL term'd).
E4CF 3430             (        forth.asm):00949 (4+4)   FINDSYM pshs    y,x
E4D1 8D88             (        forth.asm):00950 (6)             bsr     FDCTSYM         Search the dictionary first (flexible match)
E4D3 261B             (        forth.asm):00951 (3)             bne     @dctmfn         Dictionary match found
E4D5 8EE4F5           (        forth.asm):00952 (3)             ldx     #NDCTWKS        Search kernel symbols for an exact match
E4D8 EC81             (        forth.asm):00953 (5+2)   @fsmlop ldd     ,x++
E4DA 270B             (        forth.asm):00954 (3)             beq     @fsmfnd         End of well known symbols list?
E4DC 103720           (        forth.asm):00955 (4)             cmpr    y,d
E4DF 2706             (        forth.asm):00956 (3)             beq     @fsmfnd
                      (        forth.asm):00957         * No well known symbol match. Skip string.
E4E1 A680             (        forth.asm):00958 (4+1)   @fsmskp lda     ,x+
E4E3 26FC             (        forth.asm):00959 (3)             bne     @fsmskp
E4E5 20F1             (        forth.asm):00960 (3)             bra     @fsmlop
E4E7 10AEE4           (        forth.asm):00961 (6+0)   @fsmfnd ldy     ,s
E4EA A680             (        forth.asm):00962 (4+1)   @fsmfn2 lda     ,x+
E4EC A7A0             (        forth.asm):00963 (4+1)           sta     ,y+
E4EE 26FA             (        forth.asm):00964 (3)             bne     @fsmfn2
E4F0 3262             (        forth.asm):00965 (4+1)   @dctmfn leas    2,s
E4F2 3520             (        forth.asm):00966 (4+2)           puls    y
E4F4 39               (        forth.asm):00967 (4)             rts
                      (        forth.asm):00968         
                      (        forth.asm):00969         * Non-dictionary well known symbols.
E4F5 E000             (        forth.asm):00970         NDCTWKS fdb     IODZHDL         Illegal opcode/Division by zero trap handler
E4F7 494F445A48444C00 (        forth.asm):00971                 fcn     'IODZHDL'
E4FF E6A6             (        forth.asm):00972                 fdb     DPOPRA          Data stack underflow
E501 44504F50524100   (        forth.asm):00973                 fcn     'DPOPRA'
E508 E697             (        forth.asm):00974                 fdb     DPSHRA          Data stack overflow
E50A 44505348524100   (        forth.asm):00975                 fcn     'DPSHRA'
E511 E6DE             (        forth.asm):00976                 fdb     RPOPRA          Return stack underflow
E513 52504F50524100   (        forth.asm):00977                 fcn     'RPOPRA'
E51A E6C4             (        forth.asm):00978                 fdb     RPSHRA          Return stack overflow
E51C 52505348524100   (        forth.asm):00979                 fcn     'RPSHRA'
E523 E611             (        forth.asm):00980                 fdb     ERRHDLR         Error handler
E525 45525248444C5200 (        forth.asm):00981                 fcn     'ERRHDLR'
E52D E2AD             (        forth.asm):00982                 fdb     CKBASRA         Illegal BASE value
E52F 434B424153524100 (        forth.asm):00983                 fcn     'CKBASRA'
E537 E30F             (        forth.asm):00984                 fdb     CKDPTRA         Not enough parameters supplied (transac. behav.)
E539 434B445054524100 (        forth.asm):00985                 fcn     'CKDPTRA'
E541 E439             (        forth.asm):00986                 fdb     CMP2RA          Missing operand in any of U<, U>, <, >
E543 434D5032524100   (        forth.asm):00987                 fcn     'CMP2RA'
E54A E450             (        forth.asm):00988                 fdb     ACQVMRA         Three operands missing in any of CMOVE,
                      (        forth.asm):00989         *                               <CMOVE, CMOVE>, MOVE
E54C 414351564D524100 (        forth.asm):00990                 fcn     'ACQVMRA'
E554 E0B4             (        forth.asm):00991                 fdb     MINTLRA         Main interpreter loop return address
E556 4D494E544C524100 (        forth.asm):00992                 fcn     'MINTLRA'
E55E E304             (        forth.asm):00993                 fdb     NUMCVRA         ? while converting a string to a number
E560 4E554D4356524100 (        forth.asm):00994                 fcn     'NUMCVRA'
E568 E0C7             (        forth.asm):00995                 fdb     NMCVIRA         Numeric conversion error while interpreting
E56A 4E4D435649524100 (        forth.asm):00996                 fcn     'NMCVIRA'
E572 E13E             (        forth.asm):00997                 fdb     NMCVCRA         Numeric conversion error while compiling
E574 4E4D435643524100 (        forth.asm):00998                 fcn     'NMCVCRA'
E57C E0FE             (        forth.asm):00999                 fdb     INTRPRA         Interpreter RA (after the execution of a word)
E57E 494E545250524100 (        forth.asm):01000                 fcn     'INTRPRA'
E586 E0B6             (        forth.asm):01001                 fdb     _INTERP         Interpreter actual active subroutine
E588 5F494E5445525000 (        forth.asm):01002                 fcn     '_INTERP'
E590 E11D             (        forth.asm):01003                 fdb     COMPLRA         Compiler RA (after the execution of an IMD word)
E592 434F4D504C524100 (        forth.asm):01004                 fcn     'COMPLRA'
E59A E3CB             (        forth.asm):01005                 fdb     LWMNRA          Missing word name in LOCWRT
E59C 4C574D4E524100   (        forth.asm):01006                 fcn     'LWMNRA'
E5A3 E3E8             (        forth.asm):01007                 fdb     WTOOLNG         Word length is too long
E5A5 57544F4F4C4E4700 (        forth.asm):01008                 fcn     'WTOOLNG'
E5AD E7CB             (        forth.asm):01009                 fdb     CFR1SRA         CF read one sector failed
E5AF 4346523153524100 (        forth.asm):01010                 fcn     'CFR1SRA'
E5B7 E68A             (        forth.asm):01011                 fdb     NPUSH           Not an error RA but useful to have as a symbol
E5B9 4E5055534800     (        forth.asm):01012                 fcn     'NPUSH'
E5BF E6A7             (        forth.asm):01013                 fdb     RPUSH           Not an error RA but useful to have as a symbol
E5C1 525055534800     (        forth.asm):01014                 fcn     'RPUSH'
E5C7 E698             (        forth.asm):01015                 fdb     NPOP            Not an error RA but useful to have as a symbol
E5C9 4E504F5000       (        forth.asm):01016                 fcn     'NPOP'
E5CE E6C5             (        forth.asm):01017                 fdb     RPOP            Not an error RA but useful to have as a symbol
E5D0 52504F5000       (        forth.asm):01018                 fcn     'RPOP'
E5D5 E1D8             (        forth.asm):01019                 fdb     PUTS            Not an error RA but useful to have as a symbol
E5D7 5055545300       (        forth.asm):01020                 fcn     'PUTS'
E5DC E70C             (        forth.asm):01021                 fdb     BK2BBRA
E5DE 424B324242524100 (        forth.asm):01022                 fcn     'BK2BBRA'       Block BLK @ not mapped in INTERPRET
                      (        forth.asm):01023                 IFNE    DEBUG
                      (        forth.asm):01024                 fdb     LWAFRA          Assertion failure in LOCWRT
                      (        forth.asm):01025                 fcn     'LOCWRTAF'
                      (        forth.asm):01026                 ENDC
E5E6 0000             (        forth.asm):01027                 fdb     0               End of list
E5E8 3F3F3F00         (        forth.asm):01028                 fcn     '???'           Admit we have no clue!
                      (        forth.asm):01029                 ENDC                    SSDFEAT
                      (        forth.asm):01030         
                      (        forth.asm):01031         * Print ' (xxxx/yyyy)' where xxxx is the hex representation for BLK @ and
                      (        forth.asm):01032         * yyyy is the hex representation for >IN @.
E5EC 8E034A           (        forth.asm):01033 (3)     PRBLKIN ldx     #HEXBUF
E5EF 8620             (        forth.asm):01034 (2)             lda     #SP
E5F1 A780             (        forth.asm):01035 (4+1)           sta     ,x+
E5F3 8628             (        forth.asm):01036 (2)             lda     #'(
E5F5 A780             (        forth.asm):01037 (4+1)           sta     ,x+
E5F7 DC1E             (        forth.asm):01038 (4)             ldd     UBLK
E5F9 BDE172           (        forth.asm):01039 (7)             jsr     HDMP4
E5FC 862F             (        forth.asm):01040 (2)             lda     #'/
E5FE A780             (        forth.asm):01041 (4+1)           sta     ,x+
E600 DC1C             (        forth.asm):01042 (4)             ldd     UTOIN
E602 BDE172           (        forth.asm):01043 (7)             jsr     HDMP4
E605 8629             (        forth.asm):01044 (2)             lda     #')
E607 A780             (        forth.asm):01045 (4+1)           sta     ,x+
E609 6F84             (        forth.asm):01046 (6+0)           clr     ,x
E60B 8E034A           (        forth.asm):01047 (3)             ldx     #HEXBUF
E60E 7EE1D8           (        forth.asm):01048 (3)             jmp     PUTS
                      (        forth.asm):01049         
                      (        forth.asm):01050         * Handle error condition. Error code is in B.
                      (        forth.asm):01051         * If B is 2 (undefined) X points to a string of length CURTOKL that has the
                      (        forth.asm):01052         * offending word.
E611 10AEE4           (        forth.asm):01053 (6+0)   ERRHDLR ldy     ,s              Invoking return address
                      (        forth.asm):01054         * In case of a trap return, we enter here with Y set to #IODZHDL
E614 C102             (        forth.asm):01055 (2)     ERRHD1  cmpb    #2              Undefined symbol?
E616 261A             (        forth.asm):01056 (3)             bne     @perrm          No
E618 8627             (        forth.asm):01057 (2)             lda     #''
E61A BDE1B4           (        forth.asm):01058 (7)             jsr     PUTCH
E61D A680             (        forth.asm):01059 (4+1)   @prtsym lda     ,x+             Display undefined symbol name
E61F BDE1B4           (        forth.asm):01060 (7)             jsr     PUTCH
E622 0A2D             (        forth.asm):01061 (5)             dec     CURTOKL
E624 2702             (        forth.asm):01062 (3)             beq     @endquo
E626 20F5             (        forth.asm):01063 (3)             bra     @prtsym
E628 8627             (        forth.asm):01064 (2)     @endquo lda     #''
E62A BDE1B4           (        forth.asm):01065 (7)             jsr     PUTCH
E62D 8620             (        forth.asm):01066 (2)             lda     #SP
E62F BDE1B4           (        forth.asm):01067 (7)             jsr     PUTCH
E632 8EFE9F           (        forth.asm):01068 (3)     @perrm  ldx     #ERRMTBL        Regular error handling
E635 5D               (        forth.asm):01069 (1)     @nxterr tstb
E636 2633             (        forth.asm):01070 (3)             bne     @skerrm
E638 BDE1D8           (        forth.asm):01071 (7)             jsr     PUTS            Print error message
E63B 8DAF             (        forth.asm):01072 (6)             bsr     PRBLKIN         Print BLK and >IN values (in hex)
E63D BDE1E5           (        forth.asm):01073 (7)             jsr     PUTCR
E640 1F20             (        forth.asm):01074 (4)     @dmptos tfr     y,d             Dump top of the system stack contents
E642 8E034A           (        forth.asm):01075 (3)             ldx     #HEXBUF
E645 BDE172           (        forth.asm):01076 (7)             jsr     HDMP4
E648 8620             (        forth.asm):01077 (2)             lda     #SP
E64A A780             (        forth.asm):01078 (4+1)           sta     ,x+
                      (        forth.asm):01079         * Symbolic stack dumps are configurable. In situations where the dictionary is
                      (        forth.asm):01080         * trashed, they may not be considered desirable. See SSDFEAT in constants.asm.
                      (        forth.asm):01081                 IFNE    SSDFEAT
E64C BDE4CF           (        forth.asm):01082 (7)             jsr     FINDSYM
                      (        forth.asm):01083                 ENDC
E64F 8E034A           (        forth.asm):01084 (3)             ldx     #HEXBUF
E652 BDE1D8           (        forth.asm):01085 (7)             jsr     PUTS
E655 BDE1E5           (        forth.asm):01086 (7)             jsr     PUTCR
E658 108CE000         (        forth.asm):01087 (4)             cmpy    #IODZHDL
E65C 2702             (        forth.asm):01088 (3)             beq     @wastrp         We're just back from the trap handler
E65E 3262             (        forth.asm):01089 (4+1)           leas    2,s             Point to the next item on the stack
E660 118C8000         (        forth.asm):01090 (4)     @wastrp cmps    #RAMSTRT+RAMSIZE
E664 270C             (        forth.asm):01091 (3)             beq     @errdon         We're done here
E666 10AEE4           (        forth.asm):01092 (6+0)           ldy     ,s
E669 20D5             (        forth.asm):01093 (3)             bra     @dmptos
E66B A680             (        forth.asm):01094 (4+1)   @skerrm lda     ,x+             Scan for the next error message
E66D 26FC             (        forth.asm):01095 (3)             bne     @skerrm
E66F 5A               (        forth.asm):01096 (1)             decb
E670 20C3             (        forth.asm):01097 (3)             bra     @nxterr
E672 10CE8000         (        forth.asm):01098 (4)     @errdon lds     #RAMSTRT+RAMSIZE
E676 961B             (        forth.asm):01099 (3)             lda     USTATE+1        We do ignore the upper byte
E678 270D             (        forth.asm):01100 (3)             beq     @erdon2         No pointers to restore if we were interpreting
                      (        forth.asm):01101         * Compiling: clear STATE, RSP and restore LSTWAD, DICEND.
E67A 0F1B             (        forth.asm):01102 (5)             clr     USTATE+1        Switch back to interpretation mode
E67C BDE9F5           (        forth.asm):01103                 RFXT    jsr,RCLR+7      XT for RCLR
E67F 9E0C             (        forth.asm):01104 (4)             ldx     BDICEND         Restore essential pointers from backups
E681 9F08             (        forth.asm):01105 (4)             stx     DICEND          Restore HERE
E683 9E0A             (        forth.asm):01106 (4)             ldx     BLSTWAD
E685 9F06             (        forth.asm):01107 (4)             stx     LSTWAD          Restore LAST
E687 7EE09E           (        forth.asm):01108 (3)     @erdon2 jmp     INTERP
                      (        forth.asm):01109         
                      (        forth.asm):01110         * Push X to the data stack (boundary is checked).
E68A 11830186         (        forth.asm):01111 (4)     NPUSH   cmpu    #NSTTOP
E68E 2303             (        forth.asm):01112 (3)             bls     @npush1         Anything <= than #NSTTOP indicates overflow
E690 3610             (        forth.asm):01113 (4+2)           pshu    x               Aka UCNPUSH
E692 39               (        forth.asm):01114 (4)             rts
E693 5F               (        forth.asm):01115 (1)     @npush1 clrb                    Data stack overflow
E694 BDE611           (        forth.asm):01116 (7)             jsr     ERRHDLR         No return
     E697             (        forth.asm):01117         DPSHRA  equ     *
E697 12               (        forth.asm):01118 (1)             nop
                      (        forth.asm):01119         
                      (        forth.asm):01120         * Pull X from the data stack (boundary is checked).
                      (        forth.asm):01121         * D, W and Y are preserved.
E698 11830246         (        forth.asm):01122 (4)     NPOP    cmpu    #NSTBOT
E69C 2403             (        forth.asm):01123 (3)             bhs     @npop1          Anything >= than #NSTBOT indicates underflow
E69E 3710             (        forth.asm):01124 (4+2)           pulu    x
E6A0 39               (        forth.asm):01125 (4)             rts
E6A1 C601             (        forth.asm):01126 (2)     @npop1  ldb     #1              Data stack underflow
E6A3 BDE611           (        forth.asm):01127 (7)             jsr     ERRHDLR         No return
     E6A6             (        forth.asm):01128         DPOPRA  equ     *
E6A6 12               (        forth.asm):01129 (1)             nop
                      (        forth.asm):01130         
                      (        forth.asm):01131         * Push X to the return stack (boundary is checked).
E6A7 9625             (        forth.asm):01132 (3)     RPUSH   lda     RDEPTH          RDEPTH is expressed in cells
E6A9 8140             (        forth.asm):01133 (2)             cmpa    #RSTKSZ/2       But RSTKZ is expressed in bytes
E6AB 2712             (        forth.asm):01134 (3)             beq     @rpush1
E6AD 4C               (        forth.asm):01135 (1)             inca
E6AE 9725             (        forth.asm):01136 (3)             sta     RDEPTH
E6B0 0F27             (        forth.asm):01137 (5)             clr     RTSREMV         Do not get rid of the final RTS
E6B2 1F27             (        forth.asm):01138 (4)             tfr     y,v
E6B4 109E00           (        forth.asm):01139 (5)             ldy     RSP
E6B7 AFA3             (        forth.asm):01140 (5+2)           stx     ,--y
E6B9 109F00           (        forth.asm):01141 (5)             sty     RSP
E6BC 1F72             (        forth.asm):01142 (4)             tfr     v,y
E6BE 39               (        forth.asm):01143 (4)             rts
E6BF C607             (        forth.asm):01144 (2)     @rpush1 ldb     #7              Return stack overflow
E6C1 BDE611           (        forth.asm):01145 (7)             jsr     ERRHDLR         No return
     E6C4             (        forth.asm):01146         RPSHRA  equ     *
E6C4 12               (        forth.asm):01147 (1)             nop                     Meant to insulate RPUSH errors from RPOP EP
                      (        forth.asm):01148         
                      (        forth.asm):01149         * Pull X from the return stack (boundary is checked).
E6C5 9625             (        forth.asm):01150 (3)     RPOP    lda     RDEPTH          RDEPTH is expressed in cells
E6C7 2710             (        forth.asm):01151 (3)             beq     @rpop1
E6C9 4A               (        forth.asm):01152 (1)             deca
E6CA 9725             (        forth.asm):01153 (3)             sta     RDEPTH
E6CC 1F27             (        forth.asm):01154 (4)             tfr     y,v
E6CE 109E00           (        forth.asm):01155 (5)             ldy     RSP
E6D1 AEA1             (        forth.asm):01156 (5+2)           ldx     ,y++
E6D3 109F00           (        forth.asm):01157 (5)             sty     RSP
E6D6 1F72             (        forth.asm):01158 (4)             tfr     v,y
E6D8 39               (        forth.asm):01159 (4)             rts
E6D9 C608             (        forth.asm):01160 (2)     @rpop1  ldb     #8              Return stack underflow
E6DB BDE611           (        forth.asm):01161 (7)             jsr     ERRHDLR         No return
     E6DE             (        forth.asm):01162         RPOPRA  equ     *
                      (        forth.asm):01163         
                      (        forth.asm):01164         * Derive a workable base buffer address from BLK and return it through X.
                      (        forth.asm):01165         * Update BSBFADR accordingly. The buffer in question is assumed to have been
                      (        forth.asm):01166         * mapped previously (through a call to BLOCK). An assertion failure will be
                      (        forth.asm):01167         * raised if that is not the case. W is preserved, Y is untouched.
E6DE 1038             (        forth.asm):01168 (6)     BLK2BB  pshsw
E6E0 10961E           (        forth.asm):01169 (5)             ldw     UBLK
E6E3 2605             (        forth.asm):01170 (3)             bne     @bufadr
E6E5 8E02C6           (        forth.asm):01171 (3)             ldx     #CMDBUF         Base buffer address for the serial line
E6E8 2022             (        forth.asm):01172 (3)             bra     @rslvd
E6EA 8E03F0           (        forth.asm):01173 (3)     @bufadr ldx     #BUF0           Buffer 0 base address
E6ED C602             (        forth.asm):01174 (2)             ldb     #2              Number of resident buffers
E6EF A6890401         (        forth.asm):01175 (4+3)   @chkflg lda     BOFLAGS,x       Buffer flags to A
E6F3 8403             (        forth.asm):01176 (2)             anda    #BINUSE|BMAPPD
E6F5 8103             (        forth.asm):01177 (2)             cmpa    #BINUSE|BMAPPD  Is this buffer in use and mapped in?
E6F7 2607             (        forth.asm):01178 (3)             bne     @nxtbuf
E6F9 10A1890402       (        forth.asm):01179 (6+3)           cmpw    BOBLKNO,x       Is this the block we are looking for?
E6FE 270C             (        forth.asm):01180 (3)             beq     @rslvd          Yes
E700 30890410         (        forth.asm):01181 (4+3)   @nxtbuf leax    BFDISP,x        Point to the next buffer
E704 5A               (        forth.asm):01182 (1)             decb
E705 26E8             (        forth.asm):01183 (3)             bne     @chkflg
E707 C60A             (        forth.asm):01184 (2)     @asfail ldb     #10             Assertion failure
E709 BDE611           (        forth.asm):01185 (7)             jsr     ERRHDLR         No return
     E70C             (        forth.asm):01186         BK2BBRA equ     *               For symbolic system stack debugging purposes
E70C 9F22             (        forth.asm):01187 (4)     @rslvd  stx     BSBFADR         Base buffer address is resolved through X
E70E 1039             (        forth.asm):01188 (6)             pulsw
E710 39               (        forth.asm):01189 (4)             rts
                      (        forth.asm):01190         
                      (        forth.asm):01191         * Derive the current input stream pointer from BLK and >IN.
                      (        forth.asm):01192         * Y and W are untouched. The resulting address is returned in X.
                      (        forth.asm):01193         * D is altered. W is preserved, Y is untouched.
E711 8DCB             (        forth.asm):01194 (6)     BKIN2PT bsr     BLK2BB          Retrieve buffer address based on BLK's value
E713 DC1C             (        forth.asm):01195 (4)             ldd     UTOIN
E715 308B             (        forth.asm):01196 (4+2)           leax    d,x             Add the current offset. Return the result via X
E717 39               (        forth.asm):01197 (4)             rts
                      (        forth.asm):01198         
                      (        forth.asm):01199                 include storage.asm
                      (      storage.asm):00001         * Wait until the BSY bit is clear in the CF status register.
                      (      storage.asm):00002         * Upon return the BSY bit is guaranteed to be zero. Z will
                      (      storage.asm):00003         * be set in CC. This subroutine should not be called before
                      (      storage.asm):00004         * the CompactFlash presence has been assessed.
E718 B6C007           (      storage.asm):00005 (4)     CFWAIT  lda     CFSTATR
E71B 8580             (      storage.asm):00006 (2)             bita    #CFBSYB
E71D 26F9             (      storage.asm):00007 (3)             bne     CFWAIT
E71F 39               (      storage.asm):00008 (4)             rts
                      (      storage.asm):00009         
                      (      storage.asm):00010         * Wait until the BSY bit is clear and the RDY bit is set.
E720 8DF6             (      storage.asm):00011 (6)     CFRDY   bsr     CFWAIT
E722 2703             (      storage.asm):00012 (3)             beq     @cfrdy0         Card not busy, proceed
E724 1A04             (      storage.asm):00013 (2)             orcc    #ZFLAG
E726 39               (      storage.asm):00014 (4)             rts
E727 8E2000           (      storage.asm):00015 (3)     @cfrdy0 ldx     #$2000          Maximum poll count
E72A 8640             (      storage.asm):00016 (2)             lda     #CFRDYB
E72C B5C007           (      storage.asm):00017 (4)     @cfrdy1 bita    CFSTATR
E72F 2604             (      storage.asm):00018 (3)             bne     @cfrdy2         BSY bit is set, continue
E731 301F             (      storage.asm):00019 (4+1)           leax    -1,x            Card not ready, decrement poll count
E733 26F7             (      storage.asm):00020 (3)             bne     @cfrdy1         and try again
E735 39               (      storage.asm):00021 (4)     @cfrdy2 rts                     Return with Z set: card not present
                      (      storage.asm):00022         *                               Return with Z clear: card is ready
                      (      storage.asm):00023         
                      (      storage.asm):00024         * Check for possible error condition.
                      (      storage.asm):00025         * Upon return either Z is set (A is zero) and no error occurred or
                      (      storage.asm):00026         * Z is clear and the CF error register contents is returned in A.
E736 8DE0             (      storage.asm):00027 (6)     CFERRCK bsr     CFWAIT
E738 B6C007           (      storage.asm):00028 (4)             lda     CFSTATR
E73B 8401             (      storage.asm):00029 (2)             anda    #CFERRB
E73D 2703             (      storage.asm):00030 (3)             beq     @cfeck1
E73F B6C001           (      storage.asm):00031 (4)             lda     CFERROR         The error register contains error details
E742 39               (      storage.asm):00032 (4)     @cfeck1 rts
                      (      storage.asm):00033         
                      (      storage.asm):00034         * Issue CF command. The command code is passed through the B register.
                      (      storage.asm):00035         * Upon return:
                      (      storage.asm):00036         * - Z is set and everything is peachy.
                      (      storage.asm):00037         * - or Z is clear and the CF error register contents will be
                      (      storage.asm):00038         *   returned in A (and mirrored in the global CFERRCD variable).
                      (      storage.asm):00039         * B is preserved.
E743 8DDB             (      storage.asm):00040 (6)     CFCMDIS bsr     CFRDY
E745 270A             (      storage.asm):00041 (3)             beq     @cfciab         Card not ready, abort
E747 D732             (      storage.asm):00042 (3)             stb     CFCMMIR         Update CF command mirror
E749 F7C007           (      storage.asm):00043 (4)             stb     CFCOMDR         Send command to the CF card
E74C 8DE8             (      storage.asm):00044 (6)             bsr     CFERRCK
E74E 9733             (      storage.asm):00045 (3)     @cfcise sta     CFERRCD         CF command issue set error
                      (      storage.asm):00046                 IFNE    DEBUG
                      (      storage.asm):00047                 pshs    a,cc
                      (      storage.asm):00048                 beq     @cfciok
                      (      storage.asm):00049                 lda     #'!
                      (      storage.asm):00050                 jsr     PUTCH
E750                  (      storage.asm):00051         @cfcidi lda     CFCMMIR
                      (      storage.asm):00052                 ldx     #TBUFF
                      (      storage.asm):00053                 jsr     HDMP2
                      (      storage.asm):00054                 lda     #'/
                      (      storage.asm):00055                 sta     ,x+
                      (      storage.asm):00056                 lda     CFERRCD
                      (      storage.asm):00057                 jsr     HDMP2
                      (      storage.asm):00058                 ldx     #TBUFF
                      (      storage.asm):00059                 jsr     PUTS
                      (      storage.asm):00060                 jsr     PUTCR
                      (      storage.asm):00061                 bra     @cfcict         CF command issue continued
E750                  (      storage.asm):00062         @cfciok lda     #'#
                      (      storage.asm):00063                 jsr     PUTCH
                      (      storage.asm):00064                 bra     @cfcidi         CF command issue data indication
E750                  (      storage.asm):00065         @cfcict puls    cc,a
                      (      storage.asm):00066                 ENDC
E750 39               (      storage.asm):00067 (4)             rts
E751 86FF             (      storage.asm):00068 (2)     @cfciab lda     #$FF            Dummy error code
E753 20F9             (      storage.asm):00069 (3)             bra     @cfcise
                      (      storage.asm):00070         
                      (      storage.asm):00071         * Drive 0 select.
E755 8DC9             (      storage.asm):00072 (6)     CFDRSEL bsr     CFRDY
E757 86E0             (      storage.asm):00073 (2)             lda     #$E0            Drive 0, LBA mode
E759 B7C006           (      storage.asm):00074 (4)             sta     CFDRHDR
E75C 20C2             (      storage.asm):00075 (3)             bra     CFRDY
                      (      storage.asm):00076         
                      (      storage.asm):00077         * Analyze the response to the CF "Identify Device" request.
E75E 9E08             (      storage.asm):00078 (4)     CFANTHS ldx     DICEND
E760 308836           (      storage.asm):00079 (4+1)           leax    $36,x           Point to the "Model number" field
E763 3410             (      storage.asm):00080 (4+2)           pshs    x
E765 118614           (      storage.asm):00081 (3)             lde     #$14            Number of 16 bit words to go through
E768 EC84             (      storage.asm):00082 (5+0)   @bytswp ldd     ,x
E76A 1E98             (      storage.asm):00083 (5)             exg     b,a             Byte swapping
E76C ED81             (      storage.asm):00084 (5+2)           std     ,x++
E76E 114A             (      storage.asm):00085 (2)             dece
E770 26F6             (      storage.asm):00086 (3)             bne     @bytswp
E772 6F84             (      storage.asm):00087 (6+0)           clr     ,x
E774 3510             (      storage.asm):00088 (4+2)           puls    x
E776 BDE1D8           (      storage.asm):00089 (7)             jsr     PUTS            Decent CF cards indicate the capacity that way
E779 7EE1E5           (      storage.asm):00090 (3)             jmp     PUTCR           Up to $10000 blocks is 64 MB!
                      (      storage.asm):00091         
                      (      storage.asm):00092         * Initialize the CompactFlash subsystem.
                      (      storage.asm):00093         * This is run once at boot time. There is no hot plug support here.
E77C 0F31             (      storage.asm):00094 (5)     CFINIT  clr     CFCARDP         Clear card present,
                      (      storage.asm):00095                 IFEQ    DEBUG
E77E 8DA0             (      storage.asm):00096 (6)             bsr     CFRDY
                      (      storage.asm):00097                 ELSE
                      (      storage.asm):00098                 jsr     CFRDY
                      (      storage.asm):00099                 ENDC
E780 2730             (      storage.asm):00100 (3)             beq     @cfinab         Card not ready, abort
E782 8DD1             (      storage.asm):00101 (6)             bsr     CFDRSEL         Drive 0 select
E784 8601             (      storage.asm):00102 (2)             lda     #1              Enable 8-bit data transfers
E786 B7C001           (      storage.asm):00103 (4)             sta     CFFEATR
E789 C6EF             (      storage.asm):00104 (2)             ldb     #CFSETFT        Issue a CF "Set Feature" command
                      (      storage.asm):00105                 IFEQ    DEBUG
E78B 8DB6             (      storage.asm):00106 (6)             bsr     CFCMDIS         Not allowed to fail
                      (      storage.asm):00107                 ELSE
                      (      storage.asm):00108                 jsr     CFCMDIS         Not allowed to fail
                      (      storage.asm):00109                 ENDC
E78D 2623             (      storage.asm):00110 (3)             bne     @cfinab         Abort with card present flag clear
E78F 8601             (      storage.asm):00111 (2)             lda     #1              Request default PIO mode wo/ IORDY
E791 B7C002           (      storage.asm):00112 (4)             sta     CFSCNTR
E794 8603             (      storage.asm):00113 (2)             lda     #3              ATA-2 "Set Transfer mode"
E796 B7C001           (      storage.asm):00114 (4)             sta     CFFEATR
                      (      storage.asm):00115                 IFEQ    DEBUG
E799 8DA8             (      storage.asm):00116 (6)             bsr     CFCMDIS         OK to fail
                      (      storage.asm):00117                 ELSE
                      (      storage.asm):00118                 jsr     CFCMDIS         OK to fail
                      (      storage.asm):00119                 ENDC
E79B 8682             (      storage.asm):00120 (2)             lda     #$82            Disable write caching
E79D B7C001           (      storage.asm):00121 (4)             sta     CFFEATR
                      (      storage.asm):00122                 IFEQ    DEBUG
E7A0 8DA1             (      storage.asm):00123 (6)             bsr     CFCMDIS         B still has #CFSETF. Also OK to fail
                      (      storage.asm):00124                 ELSE
                      (      storage.asm):00125                 jsr     CFCMDIS         B still has #CFSETF. Also OK to fail
                      (      storage.asm):00126                 ENDC
E7A2 C6EC             (      storage.asm):00127 (2)             ldb     #CFIDDEV        Issue a CF "Identify Device" command
                      (      storage.asm):00128                 IFEQ    DEBUG
E7A4 8D9D             (      storage.asm):00129 (6)             bsr     CFCMDIS         Not allowed to fail
                      (      storage.asm):00130                 ELSE
                      (      storage.asm):00131                 jsr     CFCMDIS         Not allowed to fail
                      (      storage.asm):00132                 ENDC
E7A6 260A             (      storage.asm):00133 (3)             bne     @cfinab         Abort with card present flag clear
E7A8 9E08             (      storage.asm):00134 (4)             ldx     DICEND          Target address is HERE
E7AA 8D07             (      storage.asm):00135 (6)             bsr     CF1SRD          Read one sector
E7AC 8DB0             (      storage.asm):00136 (6)             bsr     CFANTHS         Analyze this!
E7AE 8601             (      storage.asm):00137 (2)             lda     #1
E7B0 9731             (      storage.asm):00138 (3)             sta     CFCARDP         Set the card present flag
E7B2 39               (      storage.asm):00139 (4)     @cfinab rts
                      (      storage.asm):00140         
                      (      storage.asm):00141         * Read one sector. The LBA parameters are assumed to have been set previously.
                      (      storage.asm):00142         * On input X points to the receiving (at least 512 bytes long) buffer.
E7B3 B6C007           (      storage.asm):00143 (4)     CF1SRD  lda     CFSTATR
E7B6 8508             (      storage.asm):00144 (2)             bita    #CFDRQB         Check for DRQ bit in the CF status register
E7B8 270C             (      storage.asm):00145 (3)             beq     IOERR
E7BA 10860200         (      storage.asm):00146 (4)             ldw     #CFSCSZ         Sector size is 512 bytes
E7BE 108EC000         (      storage.asm):00147 (4)             ldy     #CFDATAR        The data source address
E7C2 113B21           (      storage.asm):00148 (6+?)           tfm     y,x+            Note: tfm is interruptible!
E7C5 39               (      storage.asm):00149 (4)             rts
E7C6 C611             (      storage.asm):00150 (2)     IOERR   ldb     #17
E7C8 BDE611           (      storage.asm):00151 (7)             jsr     ERRHDLR         No return
E7CB 12               (      storage.asm):00152 (1)     CFR1SRA nop                     For symbolic stack dump debugging purposes
                      (      storage.asm):00153         
                      (      storage.asm):00154         * Write one sector. The LBA parameters are assumed to have been set previously.
                      (      storage.asm):00155         * On input X points to the sending (at least 512 bytes long) buffer.
E7CC B6C007           (      storage.asm):00156 (4)     CF1SWR  lda     CFSTATR
E7CF 8488             (      storage.asm):00157 (2)             anda    #CFBSYB|CFDRQB
E7D1 8108             (      storage.asm):00158 (2)             cmpa    #CFDRQB         Check for BSY clear and DRQ set
E7D3 26F7             (      storage.asm):00159 (3)             bne     CF1SWR
E7D5 10860200         (      storage.asm):00160 (4)             ldw     #CFSCSZ         Sector size is 512 bytes
E7D9 108EC000         (      storage.asm):00161 (4)             ldy     #CFDATAR        The data destination address
E7DD 113A12           (      storage.asm):00162 (6+?)           tfm     x+,y            Note: tfm is interruptible!
E7E0 39               (      storage.asm):00163 (4)             rts
                      (      storage.asm):00164         
                      (      storage.asm):00165         * 1KB Forth block support primitives. Not dictionary code. More like BIOS ops.
                      (      storage.asm):00166         
                      (      storage.asm):00167         * One block IO preamble: select drive and LBA parameters. On input:
                      (      storage.asm):00168         * ,s has the return address
                      (      storage.asm):00169         * 2,s had the return address for the caller
                      (      storage.asm):00170         * 4,s has the target block number
E7E1 BDE718           (      storage.asm):00171 (7)     CF1BPRE jsr     CFWAIT
E7E4 BDE755           (      storage.asm):00172 (7)             jsr     CFDRSEL         Set drive and head parameters
E7E7 EC64             (      storage.asm):00173 (5+1)           ldd     4,s
E7E9 1048             (      storage.asm):00174 (2)             lsld                    Convert block number to sector number
E7EB F7C003           (      storage.asm):00175 (4)             stb     CFSNUMR         LBA 7-0
E7EE B7C004           (      storage.asm):00176 (4)             sta     CFCLOWR         LBA 15-8
E7F1 1FA8             (      storage.asm):00177 (4)             tfr     cc,a
E7F3 8401             (      storage.asm):00178 (2)             anda    #CFLAG
E7F5 B7C005           (      storage.asm):00179 (4)             sta     CFCHIGR         LBA 23-16 (carry to cylinder high)
E7F8 8602             (      storage.asm):00180 (2)             lda     #2              2 IDE sectors per Forth block
E7FA B7C002           (      storage.asm):00181 (4)             sta     CFSCNTR
E7FD 39               (      storage.asm):00182 (4)             rts
                      (      storage.asm):00183         
                      (      storage.asm):00184         * Read one block from CF device. On input:
                      (      storage.asm):00185         * ,s has the return address
                      (      storage.asm):00186         * 2,s has the target block number
                      (      storage.asm):00187         * 4,s has the buffer base address
                      (      storage.asm):00188         * Upon return, Y will be preserved.
E7FE 0D31             (      storage.asm):00189 (4)     CF1BKRD tst     CFCARDP
E800 2602             (      storage.asm):00190 (3)             bne     @ctnued
E802 20C2             (      storage.asm):00191 (3)             bra     IOERR           Card not present--CF subsystem not initialized
E804 1F27             (      storage.asm):00192 (4)     @ctnued tfr     y,v
E806 8DD9             (      storage.asm):00193 (6)             bsr     CF1BPRE
E808 C620             (      storage.asm):00194 (2)             ldb     #CFRSCTS        Issue a "Read sectors" CF command
E80A BDE743           (      storage.asm):00195 (7)             jsr     CFCMDIS
E80D AE64             (      storage.asm):00196 (5+1)           ldx     4,s             Target buffer address to X
E80F 8DA2             (      storage.asm):00197 (6)             bsr     CF1SRD          Read the even sector from CF device
E811 BDE718           (      storage.asm):00198 (7)             jsr     CFWAIT          Wait for next sector to become available
E814 8D9D             (      storage.asm):00199 (6)             bsr     CF1SRD          and read the odd sector
E816 1F72             (      storage.asm):00200 (4)             tfr     v,y
E818 39               (      storage.asm):00201 (4)             rts
                      (      storage.asm):00202         
                      (      storage.asm):00203         * Write one block to CF device. Upon entry:
                      (      storage.asm):00204         * ,s has the return address
                      (      storage.asm):00205         * 2,s has the target block number
                      (      storage.asm):00206         * 4,s has the buffer base address
                      (      storage.asm):00207         * Upon return, Y will be preserved.
E819 0D31             (      storage.asm):00208 (4)     CF1BKWR tst     CFCARDP
E81B 2602             (      storage.asm):00209 (3)             bne     @ctnued
E81D 20A7             (      storage.asm):00210 (3)             bra     IOERR           Card not present--CF subsystem not initialized
E81F 1F27             (      storage.asm):00211 (4)     @ctnued tfr     y,v
E821 8DBE             (      storage.asm):00212 (6)             bsr     CF1BPRE
E823 C630             (      storage.asm):00213 (2)             ldb     #CFWSCTS        Issue a "Write sectors" CF command
E825 BDE743           (      storage.asm):00214 (7)             jsr     CFCMDIS
E828 AE64             (      storage.asm):00215 (5+1)           ldx     4,s             Source buffer address to X
E82A 8DA0             (      storage.asm):00216 (6)             bsr     CF1SWR          Write the even sector to CF device
E82C BDE718           (      storage.asm):00217 (7)             jsr     CFWAIT          Wait for next sector to become available
E82F 8D9B             (      storage.asm):00218 (6)             bsr     CF1SWR          and write the odd sector
E831 1F72             (      storage.asm):00219 (4)             tfr     v,y
E833 39               (      storage.asm):00220 (4)             rts
                      (      storage.asm):00221         
                      (        forth.asm):01200         
                      (        forth.asm):01201         ******************************************************************************
                      (        forth.asm):01202         * Dictionary begins. In the code below ANSI refers to ANSI-X3.215-1994
                      (        forth.asm):01203         * Draft 6 proposal (i.e. the free spec).
                      (        forth.asm):01204         
E834 0D               (        forth.asm):01205         EBUFS   fcb     13              79-STANDARD (REQ145)
E835 454D5054592D4255 (        forth.asm):01206                 fcc     'EMPTY-BUFFERS' ( -- )
     4646455253
E842 0000             (        forth.asm):01207                 fdb     0               Last dictionary entry
E844 C7               (        forth.asm):01208                 RFCS
E845 7EE26A           (        forth.asm):01209 (3)             jmp     EMPTYB
                      (        forth.asm):01210         
E848 0C               (        forth.asm):01211         SAVBUF  fcb     12              79-STANDARD (REQ221)
E849 534156452D425546 (        forth.asm):01212                 fcc     'SAVE-BUFFERS'  ( -- )
     46455253
E855 E834             (        forth.asm):01213                 fdb     EBUFS
E857 C7               (        forth.asm):01214                 RFCS
E858 8E03F0           (        forth.asm):01215 (3)             ldx     #BUF0
E85B 8D03             (        forth.asm):01216 (6)             bsr     WBIFDRT
E85D 8E0800           (        forth.asm):01217 (3)             ldx     #BUF1
                      (        forth.asm):01218         * Write buffer back to mass storage if marked as dirty.
                      (        forth.asm):01219         * The dirty bit is cleared but the buffer contents itself is not.
                      (        forth.asm):01220         * The buffer will continue to be marked as "in use."
                      (        forth.asm):01221         * On input X has has the base buffer address. Both D and X
                      (        forth.asm):01222         * are preserved. Y is not.
E860 1F02             (        forth.asm):01223 (4)     WBIFDRT tfr     d,y
E862 3410             (        forth.asm):01224 (4+2)           pshs    x               Base buffer address (arg1 to CF1BKWR)
E864 8605             (        forth.asm):01225 (2)             lda     #BINUSE|BDIRTY
E866 A4890401         (        forth.asm):01226 (4+3)           anda    BOFLAGS,x
E86A 8105             (        forth.asm):01227 (2)             cmpa    #BINUSE|BDIRTY
E86C 2616             (        forth.asm):01228 (3)             bne     @alldon         Block not in use or in use but not dirty
E86E AE890402         (        forth.asm):01229 (5+3)           ldx     BOBLKNO,x
E872 3410             (        forth.asm):01230 (4+2)           pshs    x               Block number (arg0 to CF1BKWR)
E874 8DA3             (        forth.asm):01231 (6)             bsr     CF1BKWR         Write data buffer to CF
E876 3262             (        forth.asm):01232 (4+1)           leas    2,s             Drop one cell from the system stack (blknum)
E878 AEE4             (        forth.asm):01233 (5+0)           ldx     ,s              Retrieve base buffer address
E87A A6890401         (        forth.asm):01234 (4+3)           lda     BOFLAGS,x
E87E 84FB             (        forth.asm):01235 (2)             anda    #^BDIRTY        Clear the dirty bit
E880 A7890401         (        forth.asm):01236 (4+3)           sta     BOFLAGS,x       and update the 'flags' field
E884 3510             (        forth.asm):01237 (4+2)   @alldon puls    x               Restore X
E886 1F20             (        forth.asm):01238 (4)             tfr     y,d             and D
E888 39               (        forth.asm):01239 (4)             rts
                      (        forth.asm):01240         
E889 05               (        forth.asm):01241         FLUSH   fcb     5               79-STANDARD (REF)
E88A 464C555348       (        forth.asm):01242                 fcc     'FLUSH'         ( -- ) An alias for SAVE-BUFFERS
E88F E848             (        forth.asm):01243                 fdb     SAVBUF
E891 C7               (        forth.asm):01244                 RFCS
E892 20C4             (        forth.asm):01245                 RFXT    bra,SAVBUF+15   XT for SAVE-BUFFERS
                      (        forth.asm):01246         
E894 06               (        forth.asm):01247         UPDATE  fcb     6               79-STANDARD (REQ229)
E895 555044415445     (        forth.asm):01248                 fcc     'UPDATE'        ( -- )
E89B E889             (        forth.asm):01249                 fdb     FLUSH
E89D C7               (        forth.asm):01250                 RFCS
E89E 9E16             (        forth.asm):01251 (4)             ldx     MRUBUFA         Most recently used buffer base address
E8A0 A6890401         (        forth.asm):01252 (4+3)           lda     BOFLAGS,x       Buffer 'flags' field to A
E8A4 8501             (        forth.asm):01253 (2)             bita    #BINUSE         Is that buffer in use?
E8A6 2706             (        forth.asm):01254 (3)             beq     @upddon         No, we're done here
E8A8 8A04             (        forth.asm):01255 (2)             ora     #BDIRTY
E8AA A7890401         (        forth.asm):01256 (4+3)           sta     BOFLAGS,x       Set the dirty bit
E8AE 39               (        forth.asm):01257 (4)     @upddon rts
                      (        forth.asm):01258         
E8AF 06               (        forth.asm):01259         BUFFER  fcb     6               79-STANDARD (REQ130)
E8B0 425546464552     (        forth.asm):01260                 fcc     'BUFFER'        ( ublkno -- addr )
E8B6 E894             (        forth.asm):01261                 fdb     UPDATE
E8B8 C7               (        forth.asm):01262                 RFCS
E8B9 BDE698           (        forth.asm):01263 (7)             jsr     NPOP
E8BC 1F12             (        forth.asm):01264 (4)             tfr     x,y             ublkno to Y
                      (        forth.asm):01265         * Block lookup.
E8BE 8E03F0           (        forth.asm):01266 (3)             ldx     #BUF0           Base address of the first resident buffer
E8C1 C602             (        forth.asm):01267 (2)             ldb     #2              Number of resident buffers
E8C3 A6890401         (        forth.asm):01268 (4+3)   @blkup  lda     BOFLAGS,x       Buffer flags to A
E8C7 8501             (        forth.asm):01269 (2)             bita    #BINUSE         Buffer in use?
E8C9 270A             (        forth.asm):01270 (3)             beq     @nxtbuf         No
E8CB 10AC890402       (        forth.asm):01271 (6+3)           cmpy    BOBLKNO,x       Buffer is in use. Block number match?
E8D0 2603             (        forth.asm):01272 (3)             bne     @nxtbuf         No
E8D2 3610             (        forth.asm):01273         @retba  UCNPUSH                 Block number match. Return the base address
E8D4 39               (        forth.asm):01274 (4)             rts
E8D5 30890410         (        forth.asm):01275 (4+3)   @nxtbuf leax    BFDISP,x        Point to the next buffer
E8D9 5A               (        forth.asm):01276 (1)             decb
E8DA 26E7             (        forth.asm):01277 (3)             bne     @blkup
                      (        forth.asm):01278         * The block number in Y is not currently in use. Assign a buffer to it.
E8DC 8E03F0           (        forth.asm):01279 (3)             ldx     #BUF0
E8DF 9C16             (        forth.asm):01280 (4)             cmpx    MRUBUFA         Most recently used buffer address
E8E1 2603             (        forth.asm):01281 (3)             bne     @bselct
E8E3 8E0800           (        forth.asm):01282 (3)             ldx     #BUF1
E8E6 9F16             (        forth.asm):01283 (4)     @bselct stx     MRUBUFA
E8E8 3420             (        forth.asm):01284 (4+2)           pshs    y               Backup the target block number
E8EA BDE860           (        forth.asm):01285 (7)             jsr     WBIFDRT         Write back if dirty. X and D are preserved
E8ED 8601             (        forth.asm):01286 (2)             lda     #BINUSE
E8EF A7890401         (        forth.asm):01287 (4+3)           sta     BOFLAGS,x       Update the buffers 'flags' field
E8F3 3520             (        forth.asm):01288 (4+2)           puls    y               Restore the target block number
E8F5 10AF890402       (        forth.asm):01289 (6+3)           sty     BOBLKNO,x       and update the 'blknum' field as well
E8FA 20D6             (        forth.asm):01290 (3)             bra     @retba
                      (        forth.asm):01291         
E8FC 05               (        forth.asm):01292         BLOCK   fcb     5               79-STANDARD (REQ191)
E8FD 424C4F434B       (        forth.asm):01293                 fcc     'BLOCK'         ( ublkno -- addr )
E902 E8AF             (        forth.asm):01294                 fdb     BUFFER
E904 C7               (        forth.asm):01295                 RFCS
E905 8DB2             (        forth.asm):01296                 RFXT    bsr,BUFFER+9    XT for BUFFER
                      (        forth.asm):01297         * Upon return Y has has the block number.
E907 BDE698           (        forth.asm):01298 (7)             jsr     NPOP            Buffer base address to X
E90A 3410             (        forth.asm):01299 (4+2)           pshs    x               Push base buffer address as Arg1 to CF1BKRD
E90C A6890401         (        forth.asm):01300 (4+3)           lda     BOFLAGS,x       Retrieve buffer 'flags' field
                      (        forth.asm):01301                 IFNE    DEBUG
                      (        forth.asm):01302                 bita    #BINUSE
                      (        forth.asm):01303                 bne     @blkctd
                      (        forth.asm):01304                 lda     #10             Assertion failed
                      (        forth.asm):01305                 jsr     ERRHDLR         No return
                      (        forth.asm):01306                 ENDC
E910 8402             (        forth.asm):01307 (2)     @blkctd anda    #BMAPPD         Has the block been read yet?
E912 2613             (        forth.asm):01308 (3)             bne     @bkmapd         yes
E914 3420             (        forth.asm):01309 (4+2)           pshs    y               no. Push block number as arg0 to CF1BKRD
                      (        forth.asm):01310         * Map in the block from the CF device. System stack structure is as follows:
                      (        forth.asm):01311         * ,s has the target block number.
                      (        forth.asm):01312         * 2,s has the buffer base address.
E916 BDE7FE           (        forth.asm):01313 (7)             jsr     CF1BKRD
E919 3262             (        forth.asm):01314 (4+1)           leas    2,s             Drop one cell from the system stack
                      (        forth.asm):01315         * Update the buffer flags field.
E91B AEE4             (        forth.asm):01316 (5+0)           ldx     ,s              Base buffer address
E91D A6890401         (        forth.asm):01317 (4+3)           lda     BOFLAGS,x       Buffer 'flags' field to A
E921 8A02             (        forth.asm):01318 (2)             ora     #BMAPPD
E923 A7890401         (        forth.asm):01319 (4+3)           sta     BOFLAGS,x       Update buffer 'flags' field
E927 3510             (        forth.asm):01320 (4+2)   @bkmapd puls    x               Buffer base address to X
E929 3610             (        forth.asm):01321                 UCNPUSH
E92B 39               (        forth.asm):01322 (4)             rts
                      (        forth.asm):01323         
E92C 03               (        forth.asm):01324         BLK     fcb     3
E92D 424C4B           (        forth.asm):01325                 fcc     'BLK'
E930 E8FC             (        forth.asm):01326                 fdb     BLOCK
E932 C7               (        forth.asm):01327                 RFCS
E933 8E011E           (        forth.asm):01328 (3)             ldx     #UBLK
E936 7EE68A           (        forth.asm):01329 (3)             jmp     NPUSH
                      (        forth.asm):01330         
E939 03               (        forth.asm):01331         TOIN    fcb     3
E93A 3E494E           (        forth.asm):01332                 fcc     '>IN'
E93D E92C             (        forth.asm):01333                 fdb     BLK
E93F C7               (        forth.asm):01334                 RFCS
E940 8E011C           (        forth.asm):01335 (3)             ldx     #UTOIN
E943 7EE68A           (        forth.asm):01336 (3)             jmp     NPUSH
                      (        forth.asm):01337         
E946 03               (        forth.asm):01338         SCR     fcb     3
E947 534352           (        forth.asm):01339                 fcc     'SCR'
E94A E939             (        forth.asm):01340                 fdb     TOIN
E94C C7               (        forth.asm):01341                 RFCS
E94D 8E0120           (        forth.asm):01342 (3)             ldx     #USCR
E950 7EE68A           (        forth.asm):01343 (3)             jmp     NPUSH
                      (        forth.asm):01344         
                      (        forth.asm):01345         * Functionally: : LINE 6 SHIFT SCR @ BLOCK + ;
E953 04               (        forth.asm):01346         LINE    fcb     4               79-STANDARD (REF)
E954 4C494E45         (        forth.asm):01347                 fcc     'LINE'
E958 E946             (        forth.asm):01348                 fdb     SCR
E95A C7               (        forth.asm):01349                 RFCS
E95B 8E0006           (        forth.asm):01350 (3)             ldx     #6
E95E BDE68A           (        forth.asm):01351 (7)             jsr     NPUSH
E961 BDF800           (        forth.asm):01352                 RFXT    jsr,SHIFT+8     XT for SHIFT
E964 9E20             (        forth.asm):01353 (4)             ldx     USCR
E966 BDE68A           (        forth.asm):01354 (7)             jsr     NPUSH
E969 8D9A             (        forth.asm):01355                 RFXT    bsr,BLOCK+8     XT for BLOCK
E96B 7EF766           (        forth.asm):01356                 RFXT    jmp,PLUS+4      XT for +
                      (        forth.asm):01357         
                      (        forth.asm):01358         * Functionally:
                      (        forth.asm):01359         * : INDEX 1+ SWAP DO
                      (        forth.asm):01360         *     CR   I SCR !
                      (        forth.asm):01361         *     0 LINE 64 TYPE
                      (        forth.asm):01362         *   LOOP ;
E96E 05               (        forth.asm):01363         INDEX   fcb     5               79-STANDARD (REF)
E96F 494E444558       (        forth.asm):01364                 fcc     'INDEX'         ( n1 n2 -- )
E974 E953             (        forth.asm):01365                 fdb     LINE
E976 C7               (        forth.asm):01366                 RFCS
E977 BDE698           (        forth.asm):01367 (7)             jsr     NPOP            N2 to X
E97A 3001             (        forth.asm):01368 (4+1)           leax    1,x             1+
E97C 1F12             (        forth.asm):01369 (4)             tfr     x,y             Y has the limit (not reached)
E97E BDE698           (        forth.asm):01370 (7)             jsr     NPOP            X has the index (N1)
E981 BDE1E5           (        forth.asm):01371 (7)     @indlop jsr     PUTCR           CR
E984 9F20             (        forth.asm):01372 (4)             stx     USCR            I SCR !
E986 3430             (        forth.asm):01373 (4+4)           pshs    y,x
E988 1FC1             (        forth.asm):01374 (4)             tfr     0,x
E98A BDE68A           (        forth.asm):01375 (7)             jsr     NPUSH
E98D 8DCC             (        forth.asm):01376                 RFXT    bsr,LINE+7      XT for LINE
E98F 8E0040           (        forth.asm):01377 (3)             ldx     #64
E992 BDE68A           (        forth.asm):01378 (7)             jsr     NPUSH
E995 BDF5D1           (        forth.asm):01379                 RFXT    jsr,TYPE+7      XT for TYPE
E998 3530             (        forth.asm):01380 (4+4)           puls    x,y             Restore loop parameters
E99A 3001             (        forth.asm):01381 (4+1)           leax    1,x
E99C 103712           (        forth.asm):01382 (4)             cmpr    x,y
E99F 26E0             (        forth.asm):01383 (3)             bne     @indlop
E9A1 39               (        forth.asm):01384 (4)             rts
                      (        forth.asm):01385         
E9A2 04               (        forth.asm):01386         LIST    fcb     4               79-STANDARD (REQ109)
E9A3 4C495354         (        forth.asm):01387                 fcc     'LIST'          ( ublkno -- )
E9A7 E96E             (        forth.asm):01388                 fdb     INDEX
E9A9 C7               (        forth.asm):01389                 RFCS
E9AA 0D31             (        forth.asm):01390 (4)             tst     CFCARDP
E9AC 2605             (        forth.asm):01391 (3)             bne     @lstpro
E9AE C611             (        forth.asm):01392 (2)             ldb     #17             IO error
E9B0 BDE611           (        forth.asm):01393 (7)             jsr     ERRHDLR         No return
E9B3 BDFBB8           (        forth.asm):01394         @lstpro RFXT    jsr,DUP+6       XT for DUP
E9B6 BDE905           (        forth.asm):01395                 RFXT    jsr,BLOCK+8     XT for BLOCK
                      (        forth.asm):01396         * TOS now has the base buffer address.
E9B9 BDE698           (        forth.asm):01397 (7)             jsr     NPOP
E9BC 1F12             (        forth.asm):01398 (4)             tfr     x,y             Base buffer address to Y
E9BE BDE698           (        forth.asm):01399 (7)             jsr     NPOP            ublkno to X
E9C1 9F20             (        forth.asm):01400 (4)             stx     USCR            Update SCR's value
E9C3 C610             (        forth.asm):01401 (2)             ldb     #16             16 lines to go
E9C5 3404             (        forth.asm):01402 (4+1)   @lstlop pshs    b
E9C7 BDE1E5           (        forth.asm):01403 (7)             jsr     PUTCR
E9CA 1F21             (        forth.asm):01404 (4)             tfr     y,x
E9CC BDE68A           (        forth.asm):01405 (7)             jsr     NPUSH           Start address for TYPE
E9CF 8E0040           (        forth.asm):01406 (3)             ldx     #64
E9D2 BDE68A           (        forth.asm):01407 (7)             jsr     NPUSH           Byte count for TYPE
E9D5 103012           (        forth.asm):01408 (4)             addr    x,y
E9D8 BDF5D1           (        forth.asm):01409                 RFXT    jsr,TYPE+7      XT for TYPE
E9DB 3504             (        forth.asm):01410 (4+1)           puls    b
E9DD 5A               (        forth.asm):01411 (1)             decb
E9DE 26E5             (        forth.asm):01412 (3)             bne     @lstlop
E9E0 39               (        forth.asm):01413 (4)             rts
                      (        forth.asm):01414         
E9E1 04               (        forth.asm):01415         NCLR    fcb     4               Non-standard
E9E2 4E434C52         (        forth.asm):01416                 fcc     'NCLR'          Clear the data (normal) stack
E9E6 E9A2             (        forth.asm):01417                 fdb     LIST
E9E8 C7               (        forth.asm):01418                 RFCS
E9E9 CE0246           (        forth.asm):01419 (3)             ldu     #NSTBOT
E9EC 39               (        forth.asm):01420 (4)             rts
                      (        forth.asm):01421         
E9ED 04               (        forth.asm):01422         RCLR    fcb     4               Non-standard
E9EE 52434C52         (        forth.asm):01423                 fcc     'RCLR'          Clear the return stack
E9F2 E9E1             (        forth.asm):01424                 fdb     NCLR
E9F4 C7               (        forth.asm):01425                 RFCS
E9F5 8E02C6           (        forth.asm):01426 (3)             ldx     #RSTBOT
E9F8 9F00             (        forth.asm):01427 (4)             stx     RSP
E9FA 0F25             (        forth.asm):01428 (5)             clr     RDEPTH
E9FC 39               (        forth.asm):01429 (4)             rts
                      (        forth.asm):01430         
E9FD 05               (        forth.asm):01431         DEPTH   fcb     5               79-STANDARD (REQ238)
E9FE 4445505448       (        forth.asm):01432                 fcc     'DEPTH'
EA03 E9ED             (        forth.asm):01433                 fdb     RCLR
EA05 C7               (        forth.asm):01434                 RFCS
EA06 CC0246           (        forth.asm):01435 (3)             ldd     #NSTBOT         Bottom data stack address
EA09 103230           (        forth.asm):01436 (4)             subr    u,d             D has the current value of the data stack ptr
EA0C 1044             (        forth.asm):01437 (2)             lsrd                    divided by 2
EA0E 1F01             (        forth.asm):01438 (4)             tfr     d,x
EA10 7EE68A           (        forth.asm):01439 (3)             jmp     NPUSH
                      (        forth.asm):01440         
EA13 06               (        forth.asm):01441         CREATE  fcb     6               79-STANDARD (REQ239)
EA14 435245415445     (        forth.asm):01442                 fcc     'CREATE'
EA1A E9FD             (        forth.asm):01443                 fdb     DEPTH
EA1C C7               (        forth.asm):01444                 RFCS
EA1D BDE3B5           (        forth.asm):01445 (7)     CREAT0  jsr     LOCWRT          Code entry point returned to Y
EA20 868E             (        forth.asm):01446 (2)             lda     #LDXOPC         LDX immediate
EA22 A7A0             (        forth.asm):01447 (4+1)           sta     ,y+
EA24 1F21             (        forth.asm):01448 (4)             tfr     y,x
EA26 3008             (        forth.asm):01449 (4+1)           leax    8,x
EA28 AFA1             (        forth.asm):01450 (5+2)           stx     ,y++
EA2A 86BD             (        forth.asm):01451 (2)             lda     #JSROPC         JSR extended
EA2C BDE42B           (        forth.asm):01452 (7)             jsr     VARCON1         Compile JSR NPUSH
EA2F 8639             (        forth.asm):01453 (2)             lda     #RTSOPC         RTS inherent
EA31 A7A0             (        forth.asm):01454 (4+1)           sta     ,y+
EA33 3122             (        forth.asm):01455 (4+1)           leay    2,y             Reserve room for a possible DOES> clause
EA35 109F08           (        forth.asm):01456 (5)     CREAT1  sty     DICEND
EA38 9E0C             (        forth.asm):01457 (4)             ldx     BDICEND         This is set by LOCWRT (was IY)
EA3A 9F06             (        forth.asm):01458 (4)             stx     LSTWAD
EA3C 39               (        forth.asm):01459 (4)             rts
                      (        forth.asm):01460         
EA3D C5               (        forth.asm):01461         DOES    fcb     $C5             79-STANDARD (REQ168)
EA3E 444F45533E       (        forth.asm):01462                 fcc     'DOES>'
EA43 EA13             (        forth.asm):01463                 fdb     CREATE
EA45 C7               (        forth.asm):01464                 RFCS
EA46 8EEA4C           (        forth.asm):01465 (3)             ldx     #DOESEX         JSR #DOESEX is compiled (no actual return)
EA49 AF62             (        forth.asm):01466 (5+1)           stx     2,s             Set as action component
EA4B 39               (        forth.asm):01467 (4)             rts
                      (        forth.asm):01468         
EA4C 9E06             (        forth.asm):01469 (4)     DOESEX  ldx     LSTWAD          Header of the last dictionary entry
EA4E E680             (        forth.asm):01470 (4+1)           ldb     ,x+
EA50 C41F             (        forth.asm):01471 (2)             andb    #WRLNMSK        Extract word length
EA52 3A               (        forth.asm):01472 (1)             abx
                      (        forth.asm):01473                 IFNE    RELFEAT
EA53 3009             (        forth.asm):01474 (4+1)           leax    9,x             2 bytes/backlink, 1/cksum, 6 bytes code offset
                      (        forth.asm):01475                 ELSE
                      (        forth.asm):01476                 leax    8,x             2 bytes/backlink, 6 bytes code offset
                      (        forth.asm):01477                 ENDC
EA55 A684             (        forth.asm):01478 (4+0)           lda     ,x
EA57 8139             (        forth.asm):01479 (2)             cmpa    #RTSOPC         RTS inherent
EA59 2705             (        forth.asm):01480 (3)             beq     @dosex1
EA5B C60E             (        forth.asm):01481 (2)             ldb     #14             No matching CREATE
EA5D BDE611           (        forth.asm):01482 (7)             jsr     ERRHDLR         No return
EA60 867E             (        forth.asm):01483 (2)     @dosex1 lda     #JMPOPC         JMP extended
EA62 A780             (        forth.asm):01484 (4+1)           sta     ,x+             Overwrite RTS opcode
EA64 3520             (        forth.asm):01485 (4+2)           puls    y
EA66 10AF84           (        forth.asm):01486 (6+0)           sty     ,x
EA69 39               (        forth.asm):01487 (4)             rts
                      (        forth.asm):01488         
EA6A 87               (        forth.asm):01489         LITERAL fcb     $87             79-STANDARD (REQ215)
EA6B 4C49544552414C   (        forth.asm):01490                 fcc     'LITERAL'
EA72 EA3D             (        forth.asm):01491                 fdb     DOES
EA74 C7               (        forth.asm):01492                 RFCS
EA75 BDE698           (        forth.asm):01493 (7)             jsr     NPOP
EA78 961B             (        forth.asm):01494 (3)             lda     USTATE+1
EA7A 2710             (        forth.asm):01495 (3)             beq     @nojoy          The standard defines no semantics in interp mode
EA7C 109E08           (        forth.asm):01496 (5)     @comp   ldy     DICEND
EA7F 868E             (        forth.asm):01497 (2)             lda     #LDXOPC         LDX immediate
EA81 BDE42E           (        forth.asm):01498 (7)             jsr     VARCON2         Compile LDX #X
EA84 109F08           (        forth.asm):01499 (5)             sty     DICEND          Update HERE
EA87 8EE68A           (        forth.asm):01500 (3)             ldx     #NPUSH
EA8A AF62             (        forth.asm):01501 (5+1)           stx     2,s             Set NPUSH as action component
EA8C 39               (        forth.asm):01502 (4)     @nojoy  rts
                      (        forth.asm):01503         
                      (        forth.asm):01504         * Functionally: : CONSTANT CREATE , DOES> @ ;
                      (        forth.asm):01505         * The following code produces more compact code.
EA8D 08               (        forth.asm):01506         CONS    fcb     8               79-STANDARD (REQ185)
EA8E 434F4E5354414E54 (        forth.asm):01507                 fcc     'CONSTANT'
EA96 EA6A             (        forth.asm):01508                 fdb     LITERAL
EA98 C7               (        forth.asm):01509                 RFCS
EA99 BDE698           (        forth.asm):01510 (7)             jsr     NPOP
EA9C 1F16             (        forth.asm):01511 (4)             tfr     x,w
EA9E BDE3B5           (        forth.asm):01512 (7)             jsr     LOCWRT          Create dictionary entry
EAA1 1F61             (        forth.asm):01513 (4)             tfr     w,x
EAA3 868E             (        forth.asm):01514 (2)             lda     #LDXOPC         ldx immediate
EAA5 BDE42E           (        forth.asm):01515 (7)             jsr     VARCON2         Compile LDX #CSTVAL
EAA8 BDE429           (        forth.asm):01516 (7)             jsr     VARCON          Compile JMP NPUSH
                      (        forth.asm):01517                 IFNE    RELFEAT
EAAB 8D88             (        forth.asm):01518 (6)             bsr     CREAT1
EAAD 2059             (        forth.asm):01519                 RFXT    bra,MONITOR+10  XT for MONITOR
                      (        forth.asm):01520                 ELSE
                      (        forth.asm):01521                 bra     CREAT1
                      (        forth.asm):01522                 ENDC
                      (        forth.asm):01523         
                      (        forth.asm):01524         * Functionally: : VARIABLE CREATE 2 ALLOT ;
                      (        forth.asm):01525         * However we can save three bytes per instance with the following code.
EAAF 08               (        forth.asm):01526         VARI    fcb     8               79-STANDARD (REQ227)
EAB0 5641524941424C45 (        forth.asm):01527                 fcc     'VARIABLE'
EAB8 EA8D             (        forth.asm):01528                 fdb     CONS
EABA C7               (        forth.asm):01529                 RFCS
EABB BDE3B5           (        forth.asm):01530 (7)             jsr     LOCWRT
EABE 868E             (        forth.asm):01531 (2)             lda     #LDXOPC         ldx immediate
EAC0 A7A0             (        forth.asm):01532 (4+1)           sta     ,y+
EAC2 1F26             (        forth.asm):01533 (4)             tfr     y,w             Preserve Y (HERE)
EAC4 3125             (        forth.asm):01534 (4+1)           leay    5,y             Relative variable address
EAC6 1F21             (        forth.asm):01535 (4)             tfr     y,x
EAC8 1F62             (        forth.asm):01536 (4)             tfr     w,y             Restore Y (HERE)
EACA AFA1             (        forth.asm):01537 (5+2)           stx     ,y++            Address field for LDX #VARADDR
EACC BDE429           (        forth.asm):01538 (7)             jsr     VARCON          Compile JMP NPUSH
EACF 3122             (        forth.asm):01539 (4+1)           leay    2,y             2 ALLOT
EAD1 7EEA35           (        forth.asm):01540 (3)             jmp     CREAT1
                      (        forth.asm):01541         
EAD4 09               (        forth.asm):01542         IMMED   fcb     9               79-STANDARD (REQ103)
EAD5 494D4D4544494154 (        forth.asm):01543                 fcc     'IMMEDIATE'
     45
EADE EAAF             (        forth.asm):01544                 fdb     VARI
EAE0 C7               (        forth.asm):01545                 RFCS
EAE1 C680             (        forth.asm):01546 (2)             ldb     #IMDFLM
EAE3 9E06             (        forth.asm):01547 (4)     IMMED1  ldx     LSTWAD
EAE5 A684             (        forth.asm):01548 (4+0)           lda     ,x
EAE7 103598           (        forth.asm):01549 (4)             orr     b,a
EAEA A784             (        forth.asm):01550 (4+0)           sta     ,x
EAEC 39               (        forth.asm):01551 (4)             rts
                      (        forth.asm):01552         
EAED 08               (        forth.asm):01553         RSTRCT  fcb     8               Non-standard (GNU Forth)
EAEE 5245535452494354 (        forth.asm):01554                 fcc     'RESTRICT'      Make word available in compilation mode only
EAF6 EAD4             (        forth.asm):01555                 fdb     IMMED
EAF8 C7               (        forth.asm):01556                 RFCS
EAF9 C640             (        forth.asm):01557 (2)             ldb     #DEFFLM
EAFB 20E6             (        forth.asm):01558 (3)             bra     IMMED1
                      (        forth.asm):01559         
                      (        forth.asm):01560                 IFNE    RELFEAT
                      (        forth.asm):01561         * This non-standard word enables checkum monitoring by ICHECK for the
                      (        forth.asm):01562         * last defined word in the dictionary. : words are monitored by default
                      (        forth.asm):01563         * and so are constants. CREATEd words require an explicit invokation of
                      (        forth.asm):01564         * MONITOR if they are to be checked for integrity.
EAFD 07               (        forth.asm):01565         MONITOR fcb     7
EAFE 4D4F4E49544F52   (        forth.asm):01566                 fcc     'MONITOR'       ( -- )
EB05 EAED             (        forth.asm):01567                 fdb     RSTRCT
EB07 C7               (        forth.asm):01568                 RFCS
EB08 9E06             (        forth.asm):01569 (4)             ldx     LSTWAD          Last word header address
EB0A A684             (        forth.asm):01570 (4+0)           lda     ,x
EB0C 8A20             (        forth.asm):01571 (2)             ora     #MONFLM         Set the monitored flag in the attribute field
EB0E A784             (        forth.asm):01572 (4+0)           sta     ,x
EB10 8D08             (        forth.asm):01573 (6)             bsr     HDRSKIP         Skip the header (XT to X), clear A
EB12 109E08           (        forth.asm):01574 (5)             ldy     DICEND          The upper code section limit (excluded)
EB15 8D0D             (        forth.asm):01575 (6)             bsr     HDRCSUM         Current word's definition's checksum to A
EB17 A71F             (        forth.asm):01576 (4+1)           sta     -1,x            Store the computed checksum into the header
EB19 39               (        forth.asm):01577 (4)             rts
                      (        forth.asm):01578         
                      (        forth.asm):01579         * On entry, X has a word's header address. On return X has the compilation
                      (        forth.asm):01580         * address for that word (XT). A is cleared so as to initialize the checksum.
EB1A A684             (        forth.asm):01581 (4+0)   HDRSKIP lda     ,x              Word's header attribute byte to A
EB1C 841F             (        forth.asm):01582 (2)             anda    #WRLNMSK        Extract the word's length
EB1E 8B04             (        forth.asm):01583 (2)             adda    #4              1B attribute, 2B backlink, 1B checksum
EB20 3086             (        forth.asm):01584 (4+1)           leax    a,x             X has the word's XT. -1,X has the orig checksum
EB22 4F               (        forth.asm):01585 (1)             clra
EB23 39               (        forth.asm):01586 (4)             rts
                      (        forth.asm):01587         
                      (        forth.asm):01588         * On entry X has a word's compilation address (XT). A is supposed to have been
                      (        forth.asm):01589         * previously cleared. Y has the upper bound of the code section's address
                      (        forth.asm):01590         * (excluded). On return, A will have the word's code section's checksum.
                      (        forth.asm):01591         * X is preserved.
EB24 3410             (        forth.asm):01592 (4+2)   HDRCSUM pshs    x
EB26 A880             (        forth.asm):01593 (4+1)   @hdrcs1 eora    ,x+             Update the checksum
EB28 103712           (        forth.asm):01594 (4)             cmpr    x,y             Upper bound reached?
EB2B 26F9             (        forth.asm):01595 (3)             bne     @hdrcs1         No. Process next byte in word's code section
EB2D 3510             (        forth.asm):01596 (4+2)           puls    x
EB2F 39               (        forth.asm):01597 (4)             rts
                      (        forth.asm):01598         
                      (        forth.asm):01599         * This non-standard word walks through the dictionary linked list and checks
                      (        forth.asm):01600         * that the words that have the MONFLM flag set in their header's attribute
                      (        forth.asm):01601         * field have a definition that still matches the checksum stored in the word's
                      (        forth.asm):01602         * header. This is meant to be used interactively, as a debugging tool, since
                      (        forth.asm):01603         * multitasking is not supported by this implementation. Therefore no status
                      (        forth.asm):01604         * value is returned. Feedback will only be provided for corrupted words, in
                      (        forth.asm):01605         * the form of a diagnostic message printed to the console.
EB30 06               (        forth.asm):01606         ICHECK  fcb     6
EB31 49434845434B     (        forth.asm):01607                 fcc     'ICHECK'        ( -- )
EB37 EAFD             (        forth.asm):01608                 fdb     MONITOR
EB39 C7               (        forth.asm):01609                 RFCS
EB3A 109E08           (        forth.asm):01610 (5)             ldy     DICEND          Upper bound for the code of the last word (exc.)
EB3D 9E06             (        forth.asm):01611 (4)             ldx     LSTWAD          LAST points to the header of the last word
EB3F 3410             (        forth.asm):01612 (4+2)   @icklop pshs    x               Current word's header address
EB41 A684             (        forth.asm):01613 (4+0)           lda     ,x              Word's header attribute byte to A
EB43 8520             (        forth.asm):01614 (2)             bita    #MONFLM         Is this a monitored word?
EB45 2726             (        forth.asm):01615 (3)             beq     @icknxt         No. Point to the next word
EB47 8DD1             (        forth.asm):01616 (6)             bsr     HDRSKIP         Skip the header (XT to X), clear A
EB49 8DD9             (        forth.asm):01617 (6)             bsr     HDRCSUM         Current word's definition's checksum to A
EB4B A11F             (        forth.asm):01618 (4+1)           cmpa    -1,x            Does the checksum match the compile time value?
EB4D 271E             (        forth.asm):01619 (3)             beq     @icknxt         Yes. Point to the next word
                      (        forth.asm):01620         * Current word's definition has been modified since its original definition!
EB4F BDE1E5           (        forth.asm):01621 (7)             jsr     PUTCR
EB52 AEE4             (        forth.asm):01622 (5+0)           ldx     ,s              Current word's header address
EB54 E680             (        forth.asm):01623 (4+1)           ldb     ,x+
EB56 C41F             (        forth.asm):01624 (2)             andb    #WRLNMSK
EB58 4F               (        forth.asm):01625 (1)             clra
EB59 BDE68A           (        forth.asm):01626 (7)             jsr     NPUSH           Word's name base address
EB5C 1F01             (        forth.asm):01627 (4)             tfr     d,x
EB5E BDE68A           (        forth.asm):01628 (7)             jsr     NPUSH           Byte count for TYPE
EB61 BDF5D1           (        forth.asm):01629                 RFXT    jsr,TYPE+7      XT for TYPE
EB64 BDF588           (        forth.asm):01630                 RFXT    jsr,SPACE+8     XT for SPACE
EB67 8EEB7A           (        forth.asm):01631 (3)             ldx     #CSUMFLM
EB6A BDE1D8           (        forth.asm):01632 (7)             jsr     PUTS            Feedback for checksum failure
EB6D 3510             (        forth.asm):01633 (4+2)   @icknxt puls    x               Current word's header address
EB6F 1F12             (        forth.asm):01634 (4)             tfr     x,y             Point to the end of the previous word's code
EB71 8DA7             (        forth.asm):01635 (6)             bsr     HDRSKIP         Skip the header (XT to X), clear A
EB73 AE1D             (        forth.asm):01636 (5+1)           ldx     -3,x            Point to the previous header via the backlink
EB75 2702             (        forth.asm):01637 (3)             beq     @ickdon         We've just reached the end of the dictionary
EB77 20C6             (        forth.asm):01638 (3)             bra     @icklop
EB79 39               (        forth.asm):01639 (4)     @ickdon rts
                      (        forth.asm):01640         
EB7A 696E746567726974 (        forth.asm):01641         CSUMFLM fcn     'integrity check failed'
     7920636865636B20
     6661696C656400
                      (        forth.asm):01642                 ENDC                    RELFEAT enabled
                      (        forth.asm):01643         
EB91 C2               (        forth.asm):01644         DO      fcb     $C2             79-STANDARD (REQ142)
EB92 444F             (        forth.asm):01645                 fcc     'DO'
                      (        forth.asm):01646                 IFNE    RELFEAT
EB94 EB30             (        forth.asm):01647                 fdb     ICHECK
                      (        forth.asm):01648                 ELSE
                      (        forth.asm):01649                 fdb     RSTRCT
                      (        forth.asm):01650                 ENDC
EB96 C7               (        forth.asm):01651                 RFCS
EB97 9E08             (        forth.asm):01652 (4)             ldx     DICEND
EB99 3003             (        forth.asm):01653 (4+1)           leax    3,x
EB9B BDE6A7           (        forth.asm):01654 (7)             jsr     RPUSH
EB9E 8EEBA4           (        forth.asm):01655 (3)             ldx     #DOEX
EBA1 AF62             (        forth.asm):01656 (5+1)           stx     2,s             Set as action component
EBA3 39               (        forth.asm):01657 (4)             rts
                      (        forth.asm):01658         
EBA4 BDFBD6           (        forth.asm):01659         DOEX    RFXT    jsr,SWAP+7      XT for SWAP
EBA7 BDEF15           (        forth.asm):01660                 RFXT    jsr,TOR+5       XT for >R
EBAA 7EEF15           (        forth.asm):01661                 RFXT    jmp,TOR+5       XT for >R
                      (        forth.asm):01662         
EBAD C4               (        forth.asm):01663         LOOP    fcb     $C4             79-STANDARD (REQ124)
EBAE 4C4F4F50         (        forth.asm):01664                 fcc     'LOOP'
EBB2 EB91             (        forth.asm):01665                 fdb     DO
EBB4 C7               (        forth.asm):01666                 RFCS
EBB5 8EEBD4           (        forth.asm):01667 (3)             ldx     #LOOPEX
EBB8 109E08           (        forth.asm):01668 (5)     LOOP1   ldy     DICEND
EBBB 86BD             (        forth.asm):01669 (2)             lda     #JSROPC         JSR extended
EBBD BDE145           (        forth.asm):01670 (7)             jsr     CHKRTS          Check if the final RTS can be omitted
EBC0 BDE42E           (        forth.asm):01671 (7)             jsr     VARCON2
EBC3 8E2503           (        forth.asm):01672 (3)             ldx     #BCSOPC         Compile "BCS *+5"
EBC6 AFA1             (        forth.asm):01673 (5+2)           stx     ,y++
EBC8 BDE6C5           (        forth.asm):01674 (7)             jsr     RPOP
EBCB 867E             (        forth.asm):01675 (2)             lda     #JMPOPC
EBCD BDE42E           (        forth.asm):01676 (7)             jsr     VARCON2         Compile "JMP R@"
EBD0 109F08           (        forth.asm):01677 (5)             sty     DICEND          No action component
EBD3 39               (        forth.asm):01678 (4)             rts
                      (        forth.asm):01679         
EBD4 8E0001           (        forth.asm):01680 (3)     LOOPEX  ldx     #1
EBD7 2011             (        forth.asm):01681 (3)             bra     PLOPEX1
                      (        forth.asm):01682         
EBD9 C5               (        forth.asm):01683         PLOOP   fcb     $C5             79-STANDARD (REQ141)
EBDA 2B4C4F4F50       (        forth.asm):01684                 fcc     '+LOOP'         The sign hdl reqs for REQ124 should apply though
EBDF EBAD             (        forth.asm):01685                 fdb     LOOP
EBE1 C7               (        forth.asm):01686                 RFCS
EBE2 8EEBE7           (        forth.asm):01687 (3)             ldx     #PLOOPEX
EBE5 20D1             (        forth.asm):01688 (3)             bra     LOOP1
                      (        forth.asm):01689         
EBE7 BDE698           (        forth.asm):01690 (7)     PLOOPEX jsr     NPOP
EBEA 1F16             (        forth.asm):01691 (4)     PLOPEX1 tfr     x,w             Increment to W
EBEC BDE6C5           (        forth.asm):01692 (7)             jsr     RPOP
EBEF 1F12             (        forth.asm):01693 (4)             tfr     x,y             Index to Y
EBF1 BDE6C5           (        forth.asm):01694 (7)             jsr     RPOP            Limit to X
EBF4 103062           (        forth.asm):01695 (4)             addr    w,y             Update index
EBF7 114D             (        forth.asm):01696 (2)             tste
EBF9 2B10             (        forth.asm):01697 (3)             bmi     @neginc
EBFB 103721           (        forth.asm):01698 (4)             cmpr    y,x
EBFE 2F12             (        forth.asm):01699 (3)             ble     @done           We're done. Return With CFLAG set
EC00 BDE6A7           (        forth.asm):01700 (7)     @iter   jsr     RPUSH           Push back the limit
EC03 1F21             (        forth.asm):01701 (4)             tfr     y,x
EC05 BDE6A7           (        forth.asm):01702 (7)             jsr     RPUSH           Push back the index
EC08 1CFE             (        forth.asm):01703 (2)             andcc   #^CFLAG         Clear CFLAG
EC0A 39               (        forth.asm):01704 (4)             rts
EC0B 103721           (        forth.asm):01705 (4)     @neginc cmpr    y,x
EC0E 27F0             (        forth.asm):01706 (3)             beq     @iter           79-STANDARD irregular historical precedent
EC10 2BEE             (        forth.asm):01707 (3)             bmi     @iter
EC12 1A01             (        forth.asm):01708 (2)     @done   orcc    #CFLAG          Set CFLAG
EC14 39               (        forth.asm):01709 (4)             rts
                      (        forth.asm):01710         
EC15 46               (        forth.asm):01711         UNLOOP  fcb     $46             ANSI (Core)
EC16 554E4C4F4F50     (        forth.asm):01712                 fcc     'UNLOOP'
EC1C EBD9             (        forth.asm):01713                 fdb     PLOOP
EC1E C7               (        forth.asm):01714                 RFCS
EC1F BDE6C5           (        forth.asm):01715 (7)             jsr     RPOP            Drop the index from the return stack
EC22 7EE6C5           (        forth.asm):01716 (3)             jmp     RPOP            and the loop limit as well
                      (        forth.asm):01717         
EC25 C2               (        forth.asm):01718         IF      fcb     $C2             79-STANDARD (REQ210)
EC26 4946             (        forth.asm):01719                 fcc     'IF'
EC28 EC15             (        forth.asm):01720                 fdb     UNLOOP
EC2A C7               (        forth.asm):01721                 RFCS
EC2B 109E08           (        forth.asm):01722 (5)             ldy     DICEND
EC2E 8EEC4D           (        forth.asm):01723 (3)             ldx     #IFEX
EC31 86BD             (        forth.asm):01724 (2)             lda     #JSROPC         JSR extended
EC33 BDE145           (        forth.asm):01725 (7)             jsr     CHKRTS          Check if the final RTS can be omitted
EC36 BDE42E           (        forth.asm):01726 (7)             jsr     VARCON2
EC39 8E2603           (        forth.asm):01727 (3)             ldx     #BNEOPC         Compile "BNE *+5"
EC3C AFA1             (        forth.asm):01728 (5+2)           stx     ,y++
EC3E 867E             (        forth.asm):01729 (2)             lda     #JMPOPC         JMP extended
EC40 A7A0             (        forth.asm):01730 (4+1)           sta     ,y+
EC42 1F21             (        forth.asm):01731 (4)             tfr     y,x
EC44 BDE6A7           (        forth.asm):01732 (7)             jsr     RPUSH
EC47 3122             (        forth.asm):01733 (4+1)           leay    2,y             Reserve 2 bytes for the jump address
EC49 109F08           (        forth.asm):01734 (5)             sty     DICEND
EC4C 39               (        forth.asm):01735 (4)             rts
                      (        forth.asm):01736         
EC4D BDE698           (        forth.asm):01737 (7)     IFEX    jsr     NPOP
EC50 1037C1           (        forth.asm):01738 (4)             cmpr    0,x
EC53 39               (        forth.asm):01739 (4)             rts
                      (        forth.asm):01740         
                      (        forth.asm):01741         * Functionally equivalent to:
                      (        forth.asm):01742         * (ANSI) : UNLESS ['] 0= COMPILE, POSTPONE IF ; IMMEDIATE RESTRICT
                      (        forth.asm):01743         * or
                      (        forth.asm):01744         * (old style) : UNLESS COMPILE NOT [COMPILE] IF ; IMMEDIATE RESTRICT
EC54 C6               (        forth.asm):01745         UNLESS  fcb     $C6             Non-standard (Perl inspired)
EC55 554E4C455353     (        forth.asm):01746                 fcc     'UNLESS'
EC5B EC25             (        forth.asm):01747                 fdb     IF
EC5D C7               (        forth.asm):01748                 RFCS
                      (        forth.asm):01749                 IFNE    RELFEAT
EC5E 8EED91           (        forth.asm):01750 (3)             ldx     #NULP+6         XT for 0=
                      (        forth.asm):01751                 ELSE
                      (        forth.asm):01752                 ldx     #NULP+5         XT for 0=
                      (        forth.asm):01753                 ENDC
EC61 BDF056           (        forth.asm):01754 (7)             jsr     CMPCOM1
EC64 20C5             (        forth.asm):01755                 RFXT    bra,IF+5        XT for IF
                      (        forth.asm):01756         
EC66 C4               (        forth.asm):01757         ELSE    fcb     $C4             79-STANDARD (REQ167)
EC67 454C5345         (        forth.asm):01758                 fcc     'ELSE'
EC6B EC54             (        forth.asm):01759                 fdb     UNLESS
EC6D C7               (        forth.asm):01760                 RFCS
EC6E 109E08           (        forth.asm):01761 (5)             ldy     DICEND
EC71 867E             (        forth.asm):01762 (2)             lda     #JMPOPC         JMP extended
EC73 A7A0             (        forth.asm):01763 (4+1)           sta     ,y+
EC75 3122             (        forth.asm):01764 (4+1)           leay    2,y
EC77 109F08           (        forth.asm):01765 (5)             sty     DICEND
EC7A BDE6C5           (        forth.asm):01766 (7)             jsr     RPOP
EC7D 10AF84           (        forth.asm):01767 (6+0)           sty     ,x              Set actual ELSE jump address
EC80 1F21             (        forth.asm):01768 (4)             tfr     y,x
EC82 301E             (        forth.asm):01769 (4+1)           leax    -2,x
EC84 7EE6A7           (        forth.asm):01770 (3)             jmp     RPUSH
                      (        forth.asm):01771         
EC87 C4               (        forth.asm):01772         THEN    fcb     $C4             79-STANDARD (REQ161)
EC88 5448454E         (        forth.asm):01773                 fcc     'THEN'
EC8C EC66             (        forth.asm):01774                 fdb     ELSE
EC8E C7               (        forth.asm):01775                 RFCS
EC8F 109E08           (        forth.asm):01776 (5)             ldy     DICEND
EC92 BDE6C5           (        forth.asm):01777 (7)             jsr     RPOP
EC95 10AF84           (        forth.asm):01778 (6+0)           sty     ,x
EC98 39               (        forth.asm):01779 (4)             rts
                      (        forth.asm):01780         
EC99 01               (        forth.asm):01781         EQ      fcb     1               79-STANDARD (REQ173)
EC9A 3D               (        forth.asm):01782                 fcc     '='             ( N1 N2 -- FLAG )
EC9B EC87             (        forth.asm):01783                 fdb     THEN
EC9D C7               (        forth.asm):01784                 RFCS
EC9E CC0242BDE304     (        forth.asm):01785                 MINDREQ 2
ECA4 10ECC4           (        forth.asm):01786 (8+0)           ldq     ,u              D:W has N2:N1
ECA7 3342             (        forth.asm):01787 (4+1)           leau    2,u             Drop one cell from the user stack
ECA9 1FC1             (        forth.asm):01788 (4)             tfr     0,x
ECAB 103760           (        forth.asm):01789 (4)             cmpr    w,d
ECAE 2602             (        forth.asm):01790 (3)             bne     @eq1
ECB0 3001             (        forth.asm):01791 (4+1)           leax    1,x
ECB2 AFC4             (        forth.asm):01792 (5+0)   @eq1    stx     ,u              Store in place to FLAG
ECB4 39               (        forth.asm):01793 (4)             rts
                      (        forth.asm):01794         
ECB5 02               (        forth.asm):01795         DIFF    fcb     2               79-STANDARD (REF)
ECB6 3C3E             (        forth.asm):01796                 fcc     '<>'            ( N1 N2 -- FLAG )
ECB8 EC99             (        forth.asm):01797                 fdb     EQ
ECBA C7               (        forth.asm):01798                 RFCS
ECBB CC0242BDE304     (        forth.asm):01799                 MINDREQ 2
ECC1 10ECC4           (        forth.asm):01800 (8+0)           ldq     ,u              D:W has N2:N1
ECC4 3342             (        forth.asm):01801 (4+1)           leau    2,u             Drop one cell from the user stack
ECC6 1FC1             (        forth.asm):01802 (4)             tfr     0,x
ECC8 103760           (        forth.asm):01803 (4)             cmpr    w,d
ECCB 2702             (        forth.asm):01804 (3)             beq     @diff1
ECCD 3001             (        forth.asm):01805 (4+1)           leax    1,x
ECCF AFC4             (        forth.asm):01806 (5+0)   @diff1  stx     ,u              Store in place to FLAG
ECD1 39               (        forth.asm):01807 (4)             rts
                      (        forth.asm):01808         
ECD2 02               (        forth.asm):01809         SINFEQ  fcb     2               Non-standard (Not even ANSI!)
ECD3 3C3D             (        forth.asm):01810                 fcc     '<='            Required for the ORNL fixed sieve benchmark
ECD5 ECB5             (        forth.asm):01811                 fdb     DIFF
ECD7 C7               (        forth.asm):01812                 RFCS
ECD8 CC0242BDE304     (        forth.asm):01813                 MINDREQ 2               At least two cells need to be stacked up
ECDE 10AEC4           (        forth.asm):01814 (6+0)           ldy     ,u
ECE1 AE42             (        forth.asm):01815 (5+1)           ldx     2,u
ECE3 104F             (        forth.asm):01816 (2)             clrd
ECE5 103721           (        forth.asm):01817 (4)             cmpr    y,x
ECE8 2E02             (        forth.asm):01818 (3)             bgt     @sinfq1
ECEA 104C             (        forth.asm):01819 (2)             incd
ECEC 3342             (        forth.asm):01820 (4+1)   @sinfq1 leau    2,u             Drop one cell
ECEE EDC4             (        forth.asm):01821 (5+0)           std     ,u
ECF0 39               (        forth.asm):01822 (4)             rts
                      (        forth.asm):01823         
                      (        forth.asm):01824                 IFNE    DEBUG
ECF1                  (        forth.asm):01825         CC      fcb     2               Non-standard. Used for debugging
                      (        forth.asm):01826                 fcc     'CC'
                      (        forth.asm):01827                 fdb     SINFEQ
                      (        forth.asm):01828                 RFCS
                      (        forth.asm):01829                 ldx     CCREG
                      (        forth.asm):01830                 jmp     NPUSH
                      (        forth.asm):01831                 ENDC
                      (        forth.asm):01832         
ECF1 03               (        forth.asm):01833         XOR     fcb     3               79-STANDARD (REQ179)
ECF2 584F52           (        forth.asm):01834                 fcc     'XOR'
                      (        forth.asm):01835                 IFNE    DEBUG
                      (        forth.asm):01836                 fdb     CC
                      (        forth.asm):01837                 ELSE
ECF5 ECD2             (        forth.asm):01838                 fdb     SINFEQ
                      (        forth.asm):01839                 ENDC
ECF7 C7               (        forth.asm):01840                 RFCS
ECF8 CC0242BDE304     (        forth.asm):01841                 MINDREQ 2
ECFE ECC4             (        forth.asm):01842 (5+0)           ldd     ,u
ED00 10A642           (        forth.asm):01843 (6+1)           ldw     2,u
ED03 103660           (        forth.asm):01844 (4)             eorr    w,d
ED06 3342             (        forth.asm):01845 (4+1)   XOR1    leau    2,u
ED08 EDC4             (        forth.asm):01846 (5+0)           std     ,u
ED0A 39               (        forth.asm):01847 (4)             rts
                      (        forth.asm):01848         
ED0B 02               (        forth.asm):01849         OR      fcb     2               79-STANDARD (REQ223)
ED0C 4F52             (        forth.asm):01850                 fcc     'OR'
ED0E ECF1             (        forth.asm):01851                 fdb     XOR
ED10 C7               (        forth.asm):01852                 RFCS
ED11 CC0242BDE304     (        forth.asm):01853                 MINDREQ 2
ED17 ECC4             (        forth.asm):01854 (5+0)           ldd     ,u
ED19 10A642           (        forth.asm):01855 (6+1)           ldw     2,u
ED1C 103560           (        forth.asm):01856 (4)             orr     w,d
ED1F 20E5             (        forth.asm):01857 (3)             bra     XOR1
                      (        forth.asm):01858         
ED21 03               (        forth.asm):01859         AND     fcb     3               79-STANDARD (REQ183)
ED22 414E44           (        forth.asm):01860                 fcc     'AND'
ED25 ED0B             (        forth.asm):01861                 fdb     OR
ED27 C7               (        forth.asm):01862                 RFCS
ED28 CC0242BDE304     (        forth.asm):01863                 MINDREQ 2
ED2E ECC4             (        forth.asm):01864 (5+0)           ldd     ,u
ED30 10A642           (        forth.asm):01865 (6+1)           ldw     2,u
ED33 103460           (        forth.asm):01866 (4)             andr    w,d
ED36 20CE             (        forth.asm):01867 (3)             bra     XOR1
                      (        forth.asm):01868         
ED38 03               (        forth.asm):01869         COM     fcb     3               79-STANDARD (REF)
ED39 434F4D           (        forth.asm):01870                 fcc     'COM'
ED3C ED21             (        forth.asm):01871                 fdb     AND
ED3E C7               (        forth.asm):01872                 RFCS
ED3F BDE698           (        forth.asm):01873 (7)     COM0    jsr     NPOP
ED42 1F10             (        forth.asm):01874 (4)             tfr     x,d
ED44 1043             (        forth.asm):01875 (2)             comd
ED46 1F01             (        forth.asm):01876 (4)             tfr     d,x
ED48 3610             (        forth.asm):01877                 UCNPUSH
ED4A 39               (        forth.asm):01878 (4)             rts
                      (        forth.asm):01879         
ED4B 06               (        forth.asm):01880         INVERT  fcb     6               ANSI (Core)
ED4C 494E56455254     (        forth.asm):01881                 fcc     'INVERT'
ED52 ED38             (        forth.asm):01882                 fdb     COM
ED54 C7               (        forth.asm):01883                 RFCS
ED55 20E8             (        forth.asm):01884 (3)             bra     COM0
                      (        forth.asm):01885         
ED57 02               (        forth.asm):01886         ZGREAT  fcb     2               79-STANDARD (REQ118)
ED58 303E             (        forth.asm):01887                 fcc     '0>'
ED5A ED4B             (        forth.asm):01888                 fdb     INVERT
ED5C C7               (        forth.asm):01889                 RFCS
ED5D BDE698           (        forth.asm):01890 (7)             jsr     NPOP
ED60 1F10             (        forth.asm):01891 (4)             tfr     x,d
ED62 104D             (        forth.asm):01892 (2)             tstd
ED64 2F06             (        forth.asm):01893 (3)             ble     @zgrt1
ED66 8E0001           (        forth.asm):01894 (3)             ldx     #1
ED69 3610             (        forth.asm):01895                 UCNPUSH
ED6B 39               (        forth.asm):01896 (4)             rts
ED6C 1FC1             (        forth.asm):01897 (4)     @zgrt1  tfr     0,x
ED6E 3610             (        forth.asm):01898                 UCNPUSH
ED70 39               (        forth.asm):01899 (4)             rts
                      (        forth.asm):01900         
ED71 02               (        forth.asm):01901         ZLESS   fcb     2               79-STANDARD (REQ144)
ED72 303C             (        forth.asm):01902                 fcc     '0<'
ED74 ED57             (        forth.asm):01903                 fdb     ZGREAT
ED76 C7               (        forth.asm):01904                 RFCS
ED77 BDE698           (        forth.asm):01905 (7)             jsr     NPOP
ED7A 1F10             (        forth.asm):01906 (4)             tfr     x,d
ED7C 104D             (        forth.asm):01907 (2)             tstd
ED7E 2C06             (        forth.asm):01908 (3)             bge     @zlss1
ED80 8E0001           (        forth.asm):01909 (3)             ldx     #1
ED83 3610             (        forth.asm):01910                 UCNPUSH
ED85 39               (        forth.asm):01911 (4)             rts
ED86 1FC1             (        forth.asm):01912 (4)     @zlss1  tfr     0,x
ED88 3610             (        forth.asm):01913                 UCNPUSH
ED8A 39               (        forth.asm):01914 (4)             rts
                      (        forth.asm):01915         
ED8B 02               (        forth.asm):01916         NULP    fcb     2               79-STANDARD (REQ180)
ED8C 303D             (        forth.asm):01917                 fcc     '0='
ED8E ED71             (        forth.asm):01918                 fdb     ZLESS
ED90 C7               (        forth.asm):01919                 RFCS
ED91 BDE698           (        forth.asm):01920 (7)             jsr     NPOP
ED94 1F10             (        forth.asm):01921 (4)             tfr     x,d
ED96 1FC1             (        forth.asm):01922 (4)             tfr     0,x
ED98 104D             (        forth.asm):01923 (2)             tstd
ED9A 2703             (        forth.asm):01924 (3)             beq     @nulp2
ED9C 3610             (        forth.asm):01925         @nulp1  UCNPUSH
ED9E 39               (        forth.asm):01926 (4)             rts
ED9F 3001             (        forth.asm):01927 (4+1)   @nulp2  leax    1,x
EDA1 20F9             (        forth.asm):01928 (3)             bra     @nulp1
                      (        forth.asm):01929         
EDA3 03               (        forth.asm):01930         NOT     fcb     3               79-STANDARD (REQ165)
EDA4 4E4F54           (        forth.asm):01931                 fcc     'NOT'
EDA7 ED8B             (        forth.asm):01932                 fdb     NULP
EDA9 C7               (        forth.asm):01933                 RFCS
EDAA 20E5             (        forth.asm):01934                 RFXT    bra,NULP+5      XT for 0=
                      (        forth.asm):01935         
EDAC 02               (        forth.asm):01936         USUP    fcb     2               ANSI (Core Ext)
EDAD 553E             (        forth.asm):01937                 fcc     'U>'
EDAF EDA3             (        forth.asm):01938                 fdb     NOT
EDB1 C7               (        forth.asm):01939                 RFCS
EDB2 BDE433           (        forth.asm):01940 (7)             jsr     CMP2
EDB5 2302             (        forth.asm):01941 (3)             bls     @usup1
EDB7 3001             (        forth.asm):01942 (4+1)           leax    1,x
EDB9 3610             (        forth.asm):01943         @usup1  UCNPUSH
EDBB 39               (        forth.asm):01944 (4)             rts
                      (        forth.asm):01945         
EDBC 02               (        forth.asm):01946         UINF    fcb     2               79-STANDARD (REQ150)
EDBD 553C             (        forth.asm):01947                 fcc     'U<'
EDBF EDAC             (        forth.asm):01948                 fdb     USUP
EDC1 C7               (        forth.asm):01949                 RFCS
EDC2 BDE433           (        forth.asm):01950 (7)             jsr     CMP2
EDC5 2402             (        forth.asm):01951 (3)             bhs     @uinf1          Z is set
EDC7 3001             (        forth.asm):01952 (4+1)           leax    1,x
EDC9 3610             (        forth.asm):01953         @uinf1  UCNPUSH
EDCB 39               (        forth.asm):01954 (4)             rts
                      (        forth.asm):01955         
                      (        forth.asm):01956         * Functionally: : WITHIN OVER - >R - R> U< ;
EDCC 06               (        forth.asm):01957         WITHIN  fcb     6               ANSI (Core)
EDCD 57495448494E     (        forth.asm):01958                 fcc     'WITHIN'        ( n1 n2 n3 -- flag )
EDD3 EDBC             (        forth.asm):01959                 fdb     UINF
EDD5 C7               (        forth.asm):01960                 RFCS
EDD6 BDFC1F           (        forth.asm):01961                 RFXT    jsr,OVER+7      XT for OVER
EDD9 BDF7A1           (        forth.asm):01962                 RFXT    jsr,MINUS+4     XT for -
EDDC BDEF15           (        forth.asm):01963                 RFXT    jsr,TOR+5       XT for >R
EDDF BDF7A1           (        forth.asm):01964                 RFXT    jsr,MINUS+4     XT for -
EDE2 BDEF09           (        forth.asm):01965                 RFXT    jsr,RFROM+5     XT for R>
EDE5 20DB             (        forth.asm):01966                 RFXT    bra,UINF+5      XT for U<
                      (        forth.asm):01967         
EDE7 01               (        forth.asm):01968         SUP     fcb     1               79-STANDARD (REQ102)
EDE8 3E               (        forth.asm):01969                 fcc     '>'
EDE9 EDCC             (        forth.asm):01970                 fdb     WITHIN
EDEB C7               (        forth.asm):01971                 RFCS
EDEC BDE433           (        forth.asm):01972 (7)             jsr     CMP2
EDEF 2F02             (        forth.asm):01973 (3)             ble     @sup1
EDF1 3001             (        forth.asm):01974 (4+1)           leax    1,x
EDF3 3610             (        forth.asm):01975         @sup1   UCNPUSH
EDF5 39               (        forth.asm):01976 (4)             rts
                      (        forth.asm):01977         
EDF6 01               (        forth.asm):01978         INF     fcb     1               79-STANDARD (REQ139)
EDF7 3C               (        forth.asm):01979                 fcc     '<'
EDF8 EDE7             (        forth.asm):01980                 fdb     SUP
EDFA C7               (        forth.asm):01981                 RFCS
EDFB BDE433           (        forth.asm):01982 (7)             jsr     CMP2
EDFE 2C02             (        forth.asm):01983 (3)             bge     @inf1
EE00 3001             (        forth.asm):01984 (4+1)           leax    1,x
EE02 3610             (        forth.asm):01985         @inf1   UCNPUSH
EE04 39               (        forth.asm):01986 (4)             rts
                      (        forth.asm):01987          
EE05 03               (        forth.asm):01988         MAX     fcb     3               79-STANDARD (REQ218)
EE06 4D4158           (        forth.asm):01989                 fcc     'MAX'
EE09 EDF6             (        forth.asm):01990                 fdb     INF
EE0B C7               (        forth.asm):01991                 RFCS
EE0C BDE698           (        forth.asm):01992 (7)             jsr     NPOP
EE0F 1F12             (        forth.asm):01993 (4)             tfr     x,y
EE11 BDE698           (        forth.asm):01994 (7)             jsr     NPOP
EE14 103721           (        forth.asm):01995 (4)             cmpr    y,x
EE17 2C02             (        forth.asm):01996 (3)             bge     @pshrv1
EE19 1F21             (        forth.asm):01997 (4)             tfr     y,x
EE1B 3610             (        forth.asm):01998         @pshrv1 UCNPUSH
EE1D 39               (        forth.asm):01999 (4)             rts
                      (        forth.asm):02000         
EE1E 03               (        forth.asm):02001         MIN     fcb     3               79-STANDARD (REQ127)
EE1F 4D494E           (        forth.asm):02002                 fcc     'MIN'
EE22 EE05             (        forth.asm):02003                 fdb     MAX
EE24 C7               (        forth.asm):02004                 RFCS
EE25 BDE698           (        forth.asm):02005 (7)             jsr     NPOP
EE28 1F12             (        forth.asm):02006 (4)             tfr     x,y
EE2A BDE698           (        forth.asm):02007 (7)             jsr     NPOP
EE2D 103721           (        forth.asm):02008 (4)             cmpr    y,x
EE30 2F02             (        forth.asm):02009 (3)             ble     @pshrv2
EE32 1F21             (        forth.asm):02010 (4)             tfr     y,x
EE34 3610             (        forth.asm):02011         @pshrv2 UCNPUSH
EE36 39               (        forth.asm):02012 (4)             rts
                      (        forth.asm):02013         
EE37 03               (        forth.asm):02014         ABS     fcb     3               79-STANDARD (REQ108)
EE38 414253           (        forth.asm):02015                 fcc     'ABS'
EE3B EE1E             (        forth.asm):02016                 fdb     MIN
EE3D C7               (        forth.asm):02017                 RFCS
EE3E BDE698           (        forth.asm):02018 (7)             jsr     NPOP
EE41 1F10             (        forth.asm):02019 (4)             tfr     x,d
EE43 104D             (        forth.asm):02020 (2)             tstd
EE45 2A04             (        forth.asm):02021 (3)             bpl     @abs1
EE47 1040             (        forth.asm):02022 (2)             negd
EE49 1F01             (        forth.asm):02023 (4)             tfr     d,x
EE4B 3610             (        forth.asm):02024         @abs1   UCNPUSH
EE4D 39               (        forth.asm):02025 (4)             rts
                      (        forth.asm):02026         
EE4E 06               (        forth.asm):02027         NEGATE  fcb     6               79-STANDARD (REQ177)
EE4F 4E4547415445     (        forth.asm):02028                 fcc     'NEGATE'
EE55 EE37             (        forth.asm):02029                 fdb     ABS
EE57 C7               (        forth.asm):02030                 RFCS
EE58 CC0244BDE304     (        forth.asm):02031                 MINDREQ 1               One cell needs to be stacked up
EE5E ECC4             (        forth.asm):02032 (5+0)           ldd     ,u
EE60 1040             (        forth.asm):02033 (2)             negd
EE62 EDC4             (        forth.asm):02034 (5+0)           std     ,u
EE64 39               (        forth.asm):02035 (4)             rts
                      (        forth.asm):02036         
EE65 C5               (        forth.asm):02037         BEGIN   fcb     $C5             79-STANDARD (REQ147)
EE66 424547494E       (        forth.asm):02038                 fcc     'BEGIN'
EE6B EE4E             (        forth.asm):02039                 fdb     NEGATE
EE6D C7               (        forth.asm):02040                 RFCS
EE6E 9E08             (        forth.asm):02041 (4)             ldx     DICEND
EE70 7EE6A7           (        forth.asm):02042 (3)             jmp     RPUSH
                      (        forth.asm):02043         
EE73 C5               (        forth.asm):02044         AGAIN   fcb     $C5             79-STANDARD (REF114)
EE74 414741494E       (        forth.asm):02045                 fcc     'AGAIN'
EE79 EE65             (        forth.asm):02046                 fdb     BEGIN
EE7B C7               (        forth.asm):02047                 RFCS
EE7C BDE6C5           (        forth.asm):02048 (7)             jsr     RPOP
EE7F 1F12             (        forth.asm):02049 (4)             tfr     x,y
EE81 9E08             (        forth.asm):02050 (4)             ldx     DICEND
EE83 867E             (        forth.asm):02051 (2)             lda     #JMPOPC         JMP extended
EE85 A780             (        forth.asm):02052 (4+1)           sta     ,x+
EE87 10AF81           (        forth.asm):02053 (6+2)           sty     ,x++
EE8A 9F08             (        forth.asm):02054 (4)             stx     DICEND
EE8C 8602             (        forth.asm):02055 (2)             lda     #2
EE8E 9727             (        forth.asm):02056 (3)             sta     RTSREMV         Trigger the RTS removal optimization
EE90 39               (        forth.asm):02057 (4)             rts
                      (        forth.asm):02058         
                      (        forth.asm):02059         # The standard does not require this as being immediate but I do.
EE91 C4               (        forth.asm):02060         EXIT    fcb     $C4             79-STANDARD (REQ117)
EE92 45584954         (        forth.asm):02061                 fcc     'EXIT'
EE96 EE73             (        forth.asm):02062                 fdb     AGAIN
EE98 C7               (        forth.asm):02063                 RFCS
EE99 9E08             (        forth.asm):02064 (4)             ldx     DICEND
EE9B 8639             (        forth.asm):02065 (2)             lda     #RTSOPC         RTS inherent
EE9D A780             (        forth.asm):02066 (4+1)           sta     ,x+
EE9F 9F08             (        forth.asm):02067 (4)             stx     DICEND
EEA1 39               (        forth.asm):02068 (4)             rts
                      (        forth.asm):02069         
EEA2 C5               (        forth.asm):02070         UNTIL   fcb     $C5             79-STANDARD (REQ237)
EEA3 554E54494C       (        forth.asm):02071                 fcc     'UNTIL'
EEA8 EE91             (        forth.asm):02072                 fdb     EXIT
EEAA C7               (        forth.asm):02073                 RFCS
EEAB 109E08           (        forth.asm):02074 (5)             ldy     DICEND
EEAE 86BD             (        forth.asm):02075 (2)             lda     #JSROPC         JSR extended
EEB0 8EEC4D           (        forth.asm):02076 (3)             ldx     #IFEX
EEB3 BDE145           (        forth.asm):02077 (7)             jsr     CHKRTS          Check if the final RTS can be omitted
EEB6 BDE42E           (        forth.asm):02078 (7)             jsr     VARCON2
EEB9 8E2603           (        forth.asm):02079 (3)             ldx     #BNEOPC         Compile "BNE *+5"
EEBC AFA1             (        forth.asm):02080 (5+2)           stx     ,y++
EEBE 867E             (        forth.asm):02081 (2)             lda     #JMPOPC         JMP extended
EEC0 A7A0             (        forth.asm):02082 (4+1)           sta     ,y+
EEC2 BDE6C5           (        forth.asm):02083 (7)             jsr     RPOP
EEC5 AFA1             (        forth.asm):02084 (5+2)           stx     ,y++
EEC7 109F08           (        forth.asm):02085 (5)             sty     DICEND
EECA 39               (        forth.asm):02086 (4)             rts
                      (        forth.asm):02087         
EECB C3               (        forth.asm):02088         END     fcb     $C3             79-STANDARD (REF224)
EECC 454E44           (        forth.asm):02089                 fcc     'END'
EECF EEA2             (        forth.asm):02090                 fdb     UNTIL
EED1 C7               (        forth.asm):02091                 RFCS
EED2 20D7             (        forth.asm):02092                 RFXT    bra,UNTIL+8     XT for UNTIL
                      (        forth.asm):02093         
EED4 C5               (        forth.asm):02094         WHILE   fcb     $C5             79-STANDARD (REQ149)
EED5 5748494C45       (        forth.asm):02095                 fcc     'WHILE'
EEDA EECB             (        forth.asm):02096                 fdb     END
EEDC C7               (        forth.asm):02097                 RFCS
EEDD 7EEC2B           (        forth.asm):02098                 RFXT    jmp,IF+5        XT for IF
                      (        forth.asm):02099         
EEE0 C6               (        forth.asm):02100         REPEAT  fcb     $C6             79-STANDARD (REQ120)
EEE1 524550454154     (        forth.asm):02101                 fcc     'REPEAT'
EEE7 EED4             (        forth.asm):02102                 fdb     WHILE
EEE9 C7               (        forth.asm):02103                 RFCS
EEEA BDE6C5           (        forth.asm):02104 (7)             jsr     RPOP
EEED 3410             (        forth.asm):02105 (4+2)           pshs    x
EEEF BDE6C5           (        forth.asm):02106 (7)             jsr     RPOP
EEF2 109E08           (        forth.asm):02107 (5)             ldy     DICEND
EEF5 867E             (        forth.asm):02108 (2)             lda     #JMPOPC         JMP extended
EEF7 BDE42E           (        forth.asm):02109 (7)             jsr     VARCON2
EEFA 3510             (        forth.asm):02110 (4+2)           puls    x
EEFC 10AF84           (        forth.asm):02111 (6+0)           sty     ,x
EEFF 109F08           (        forth.asm):02112 (5)             sty     DICEND
EF02 39               (        forth.asm):02113 (4)             rts
                      (        forth.asm):02114         
EF03 42               (        forth.asm):02115         RFROM   fcb     $42             79-STANDARD (REQ110)
EF04 523E             (        forth.asm):02116                 fcc     'R>'
EF06 EEE0             (        forth.asm):02117                 fdb     REPEAT
EF08 C7               (        forth.asm):02118                 RFCS
EF09 BDE6C5           (        forth.asm):02119 (7)             jsr     RPOP
EF0C 7EE68A           (        forth.asm):02120 (3)             jmp     NPUSH
                      (        forth.asm):02121         
EF0F 42               (        forth.asm):02122         TOR     fcb     $42             79-STANDARD (REQ200)
EF10 3E52             (        forth.asm):02123                 fcc     '>R'
EF12 EF03             (        forth.asm):02124                 fdb     RFROM
EF14 C7               (        forth.asm):02125                 RFCS
EF15 BDE698           (        forth.asm):02126 (7)             jsr     NPOP
EF18 7EE6A7           (        forth.asm):02127 (3)             jmp     RPUSH
                      (        forth.asm):02128         
EF1B 45               (        forth.asm):02129         LEAVE   fcb     $45             79-STANDARD (REQ213)
EF1C 4C45415645       (        forth.asm):02130                 fcc     'LEAVE'
EF21 EF0F             (        forth.asm):02131                 fdb     TOR
EF23 C7               (        forth.asm):02132                 RFCS
EF24 BDE6C5           (        forth.asm):02133 (7)             jsr     RPOP
EF27 BDE6C5           (        forth.asm):02134 (7)             jsr     RPOP
EF2A BDE6A7           (        forth.asm):02135 (7)             jsr     RPUSH
EF2D 7EE6A7           (        forth.asm):02136 (3)             jmp     RPUSH
                      (        forth.asm):02137         
EF30 41               (        forth.asm):02138         INDI    fcb     $41             79-STANDARD (REQ136)
EF31 49               (        forth.asm):02139                 fcc     'I'
EF32 EF1B             (        forth.asm):02140                 fdb     LEAVE
EF34 C7               (        forth.asm):02141                 RFCS
EF35 C601             (        forth.asm):02142 (2)             ldb     #1              1 means top of the stack
EF37 9625             (        forth.asm):02143 (3)     RPICKN  lda     RDEPTH
EF39 103798           (        forth.asm):02144 (4)             cmpr    b,a
EF3C 250A             (        forth.asm):02145 (3)             bcs     @rpick1
EF3E 9E00             (        forth.asm):02146 (4)             ldx     RSP
EF40 5A               (        forth.asm):02147 (1)             decb                    Minus 1, unlike in the Z80 implementation
EF41 58               (        forth.asm):02148 (1)             lslb                    Times 2
EF42 3A               (        forth.asm):02149 (1)             abx
EF43 AE84             (        forth.asm):02150 (5+0)           ldx     ,x
EF45 7EE68A           (        forth.asm):02151 (3)             jmp     NPUSH
EF48 C608             (        forth.asm):02152 (2)     @rpick1 ldb     #8              Return stack underflow
EF4A BDE611           (        forth.asm):02153 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02154         
EF4D 42               (        forth.asm):02155         RFETCH  fcb     $42             79-STANDARD (REQ228)
EF4E 5240             (        forth.asm):02156                 fcc     'R@'
EF50 EF30             (        forth.asm):02157                 fdb     INDI
EF52 C7               (        forth.asm):02158                 RFCS
EF53 20E0             (        forth.asm):02159                 RFXT    bra,INDI+4      XT for I
                      (        forth.asm):02160         
EF55 42               (        forth.asm):02161         INDIP   fcb     $42             79-STANDARD (REF)
EF56 4927             (        forth.asm):02162                 fdb     $4927
EF58 EF4D             (        forth.asm):02163                 fdb     RFETCH
EF5A C7               (        forth.asm):02164                 RFCS
EF5B C602             (        forth.asm):02165 (2)             ldb     #2
EF5D 20D8             (        forth.asm):02166 (3)             bra     RPICKN
                      (        forth.asm):02167         
EF5F 41               (        forth.asm):02168         INDJ    fcb     $41             79-STANDARD (REQ225)
EF60 4A               (        forth.asm):02169                 fcc     'J'
EF61 EF55             (        forth.asm):02170                 fdb     INDIP
EF63 C7               (        forth.asm):02171                 RFCS
EF64 C603             (        forth.asm):02172 (2)             ldb     #3
EF66 20CF             (        forth.asm):02173 (3)             bra     RPICKN
                      (        forth.asm):02174         
EF68 42               (        forth.asm):02175         INDJP   fcb     $42             Non-standard
EF69 4A27             (        forth.asm):02176                 fdb     $4A27
EF6B EF5F             (        forth.asm):02177                 fdb     INDJ
EF6D C7               (        forth.asm):02178                 RFCS
EF6E C604             (        forth.asm):02179 (2)             ldb     #4
EF70 20C5             (        forth.asm):02180 (3)             bra     RPICKN
                      (        forth.asm):02181         
EF72 41               (        forth.asm):02182         INDK    fcb     $41             79-STANDARD (REF)
EF73 4B               (        forth.asm):02183                 fcc     'K'
EF74 EF68             (        forth.asm):02184                 fdb     INDJP
EF76 C7               (        forth.asm):02185                 RFCS
EF77 C605             (        forth.asm):02186 (2)             ldb     #5
EF79 20BC             (        forth.asm):02187 (3)             bra     RPICKN
                      (        forth.asm):02188         
EF7B 04               (        forth.asm):02189         QUIT    fcb     4               79-STANDARD (REQ211)
EF7C 51554954         (        forth.asm):02190                 fcc     'QUIT'
EF80 EF72             (        forth.asm):02191                 fdb     INDK
EF82 C7               (        forth.asm):02192                 RFCS
EF83 0F1B             (        forth.asm):02193 (5)             clr     USTATE+1
EF85 BDE9F5           (        forth.asm):02194                 RFXT    jsr,RCLR+7      XT for RCLR
EF88 10CE8000         (        forth.asm):02195 (4)             lds     #RAMSTRT+RAMSIZE Reset system stack pointer
EF8C BDE1E5           (        forth.asm):02196 (7)             jsr     PUTCR
EF8F 7EE09E           (        forth.asm):02197 (3)             jmp     INTERP
                      (        forth.asm):02198         
EF92 05               (        forth.asm):02199         ABORT   fcb     5               79-STANDARD (REQ101)
EF93 41424F5254       (        forth.asm):02200                 fcc     'ABORT'
EF98 EF7B             (        forth.asm):02201                 fdb     QUIT
EF9A C7               (        forth.asm):02202                 RFCS
EF9B BDE9E9           (        forth.asm):02203                 RFXT    jsr,NCLR+7      XT for NCLR
EF9E BDE9F5           (        forth.asm):02204                 RFXT    jsr,RCLR+7      XT for RCLR
EFA1 C603             (        forth.asm):02205 (2)             ldb     #3
EFA3 BDE611           (        forth.asm):02206 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02207         
EFA6 04               (        forth.asm):02208         FIND    fcb     4               79-STANDARD (REQ203)
EFA7 46494E44         (        forth.asm):02209                 fcc     'FIND'          ( -- XT )
EFAB EF92             (        forth.asm):02210                 fdb     ABORT
EFAD C7               (        forth.asm):02211                 RFCS
EFAE 1FC2             (        forth.asm):02212 (4)             tfr     0,y             Default return value is zero
EFB0 BDE711           (        forth.asm):02213 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
EFB3 6D84             (        forth.asm):02214 (5+0)           tst     ,x
EFB5 270E             (        forth.asm):02215 (3)             beq     @find1
EFB7 BDE27D           (        forth.asm):02216 (7)             jsr     SCNSTOK
EFBA 2709             (        forth.asm):02217 (3)             beq     @find1
EFBC BDE358           (        forth.asm):02218 (7)             jsr     SWDIC
EFBF DC04             (        forth.asm):02219 (4)             ldd     TOKENEP
EFC1 9322             (        forth.asm):02220 (4)             subd    BSBFADR
EFC3 DD1C             (        forth.asm):02221 (4)             std     UTOIN           Derive >IN from TOKENEP
EFC5 1F21             (        forth.asm):02222 (4)     @find1  tfr     y,x
EFC7 7EE68A           (        forth.asm):02223 (3)             jmp     NPUSH
                      (        forth.asm):02224         
EFCA 01               (        forth.asm):02225         RBRACK  fcb     1               79-STANDARD (REQ126)
EFCB 5D               (        forth.asm):02226                 fcc     ']'
EFCC EFA6             (        forth.asm):02227                 fdb     FIND
EFCE C7               (        forth.asm):02228                 RFCS
EFCF 8601             (        forth.asm):02229 (2)             lda     #1
EFD1 971B             (        forth.asm):02230 (3)             sta     USTATE+1
EFD3 39               (        forth.asm):02231 (4)             rts
                      (        forth.asm):02232         
                      (        forth.asm):02233         * Note: the standard does not mandate that this primitive be executed in
                      (        forth.asm):02234         * definitions only. IMHO, it ought to, Therefore I am forcing the C bit here.
EFD4 C1               (        forth.asm):02235         LBRACK  fcb     $C1             79-STANDARD (REQ125)
EFD5 5B               (        forth.asm):02236                 fcc     '['
EFD6 EFCA             (        forth.asm):02237                 fdb     RBRACK
EFD8 C7               (        forth.asm):02238                 RFCS
EFD9 0F1B             (        forth.asm):02239 (5)             clr     USTATE+1
EFDB 39               (        forth.asm):02240 (4)             rts
                      (        forth.asm):02241         
EFDC C9               (        forth.asm):02242         BKCOMP  fcb     $C9             79-STANDARD (REQ179)
EFDD 5B434F4D50494C45 (        forth.asm):02243                 fcc     '[COMPILE]'
     5D
EFE6 EFD4             (        forth.asm):02244                 fdb     LBRACK
EFE8 C7               (        forth.asm):02245                 RFCS
EFE9 BDE711           (        forth.asm):02246 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
EFEC 6D84             (        forth.asm):02247 (5+0)           tst     ,x
EFEE 2605             (        forth.asm):02248 (3)             bne     @bkcmp2
EFF0 C605             (        forth.asm):02249 (2)     @bkcmp1 ldb     #5              Missing word name
EFF2 BDE611           (        forth.asm):02250 (7)             jsr     ERRHDLR         No return
EFF5 BDE27D           (        forth.asm):02251 (7)     @bkcmp2 jsr     SCNSTOK
EFF8 27F6             (        forth.asm):02252 (3)             beq     @bkcmp1
EFFA BDE358           (        forth.asm):02253 (7)             jsr     SWDIC
EFFD 2607             (        forth.asm):02254 (3)             bne     @bkcmp3         Word found. Code address returned in Y
EFFF 9E02             (        forth.asm):02255 (4)             ldx     TOKENSP
F001 C602             (        forth.asm):02256 (2)             ldb     #2              Undefined (X points to the offending word)
F003 BDE611           (        forth.asm):02257 (7)             jsr     ERRHDLR         No return
F006 10AF62           (        forth.asm):02258 (6+1)   @bkcmp3 sty     2,s             Set as action component
F009 DC02             (        forth.asm):02259 (4)             ldd     TOKENSP         Updated by SWDIC if the word was found
F00B 9322             (        forth.asm):02260 (4)             subd    BSBFADR
F00D DD1C             (        forth.asm):02261 (4)             std     UTOIN
F00F 39               (        forth.asm):02262 (4)             rts
                      (        forth.asm):02263         
                      (        forth.asm):02264         * Functionally: : ['] FIND [COMPILE] LITERAL ; IMMEDIATE RESTRICT
F010 C3               (        forth.asm):02265         BKQUOT  fcb     $C3             ANSI (Core)
F011 5B275D           (        forth.asm):02266                 fcb     $5B,$27,$5D
F014 EFDC             (        forth.asm):02267                 fdb     BKCOMP
F016 C7               (        forth.asm):02268                 RFCS
F017 8D95             (        forth.asm):02269                 RFXT    bsr,FIND+7      XT for FIND
                      (        forth.asm):02270         * Data stack topmost cell has the target word address.
F019 7EEA75           (        forth.asm):02271                 RFXT    jmp,LITERAL+10  XT for LITERAL
                      (        forth.asm):02272         
F01C C8               (        forth.asm):02273         POSTPON fcb     $C8             ANSI (Core)
F01D 504F5354504F4E45 (        forth.asm):02274                 fcc     'POSTPONE'      ( -- ) as an alias for [COMPILE]
F025 F010             (        forth.asm):02275                 fdb     BKQUOT
F027 C7               (        forth.asm):02276                 RFCS
F028 20BF             (        forth.asm):02277                 RFXT    bra,BKCOMP+12   XT for [COMPILE]
                      (        forth.asm):02278         
                      (        forth.asm):02279                 IFEQ    STRCT79
F02A 47               (        forth.asm):02280         COMPILE fcb     $47             79-STANDARD (REQ146)
F02B 434F4D50494C45   (        forth.asm):02281                 fcc     'COMPILE'
F032 F01C             (        forth.asm):02282                 fdb     POSTPON
F034 C7               (        forth.asm):02283                 RFCS
                      (        forth.asm):02284         * Return address points to 3 bytes of code (JSR <cfa>) to be inserted HERE and
                      (        forth.asm):02285         * to be skipped before returning to the caller. This is not permitted by a
                      (        forth.asm):02286         * strict interpretation of the 79-STANDARD, which only provides for a threaded
                      (        forth.asm):02287         * implementation (2 bytes payload). For all practical purposes, it works though.
F035 3510             (        forth.asm):02288 (4+2)           puls    x
F037 109E08           (        forth.asm):02289 (5)             ldy     DICEND
F03A A680             (        forth.asm):02290 (4+1)           lda     ,x+             JSR opcode
F03C A7A0             (        forth.asm):02291 (4+1)           sta     ,y+
F03E EC81             (        forth.asm):02292 (5+2)           ldd     ,x++
F040 EDA1             (        forth.asm):02293 (5+2)           std     ,y++
F042 109F08           (        forth.asm):02294 (5)             sty     DICEND
F045 1F15             (        forth.asm):02295 (4)             tfr     x,pc
                      (        forth.asm):02296                 ENDC
                      (        forth.asm):02297         
                      (        forth.asm):02298         * Like the 79-STANDARD COMPILE word, GNU Forth has this as a compile-only word.
                      (        forth.asm):02299         * This is a wise choice since it allows us to possibly optimize it.
F047 48               (        forth.asm):02300         CMPCOMA fcb     $48             ANSI (Core Ext)
F048 434F4D50494C452C (        forth.asm):02301                 fcc     'COMPILE,'      ( XT -- )
                      (        forth.asm):02302                 IFNE    STRCT79
                      (        forth.asm):02303                 fdb     POSTPON
                      (        forth.asm):02304                 ELSE
F050 F02A             (        forth.asm):02305                 fdb     COMPILE
                      (        forth.asm):02306                 ENDC
F052 C7               (        forth.asm):02307                 RFCS
F053 BDE698           (        forth.asm):02308 (7)             jsr     NPOP            Execution token to X
F056 109E08           (        forth.asm):02309 (5)     CMPCOM1 ldy     DICEND
F059 86BD             (        forth.asm):02310 (2)             lda     #JSROPC
F05B BDE145           (        forth.asm):02311 (7)             jsr     CHKRTS
F05E BDE42E           (        forth.asm):02312 (7)             jsr     VARCON2
F061 109F08           (        forth.asm):02313 (5)             sty     DICEND
F064 39               (        forth.asm):02314 (4)             rts
                      (        forth.asm):02315         
                      (        forth.asm):02316         * As per the standard, : is not immediate. This allows for further interesting
                      (        forth.asm):02317         * developments, like tracing words execution...
F065 01               (        forth.asm):02318         COMPC   fcb     $1              79-STANDARD (REQ116)
F066 3A               (        forth.asm):02319                 fcc     ':'
F067 F047             (        forth.asm):02320                 fdb     CMPCOMA
F069 C7               (        forth.asm):02321                 RFCS
F06A 8601             (        forth.asm):02322 (2)             lda     #1
F06C 971B             (        forth.asm):02323 (3)             sta     USTATE+1
F06E 104F             (        forth.asm):02324 (2)             clrd
F070 DD10             (        forth.asm):02325 (4)             std     JSRLAST
F072 8602             (        forth.asm):02326 (2)             lda     #2
F074 9727             (        forth.asm):02327 (3)             sta     RTSREMV         Optimistic strategy: remove the final RTS
F076 9625             (        forth.asm):02328 (3)             lda     RDEPTH
F078 9726             (        forth.asm):02329 (3)             sta     IRDPTH          Meant to check for unbalanced constructs
F07A 7EE3B5           (        forth.asm):02330 (3)             jmp     LOCWRT
                      (        forth.asm):02331         
F07D C1               (        forth.asm):02332         COMPR   fcb     $C1             79-STANDARD (REQ196)
F07E 3B               (        forth.asm):02333                 fcc     ';'
F07F F065             (        forth.asm):02334                 fdb     COMPC
F081 C7               (        forth.asm):02335                 RFCS
F082 9625             (        forth.asm):02336 (3)             lda     RDEPTH          Return stack depth
F084 9126             (        forth.asm):02337 (3)             cmpa    IRDPTH          Same as when : was entered?
F086 2705             (        forth.asm):02338 (3)             beq     @compr1
F088 C609             (        forth.asm):02339 (2)             ldb     #9              Illegal construct if not
F08A BDE611           (        forth.asm):02340 (7)             jsr     ERRHDLR         No return
F08D 0F1B             (        forth.asm):02341 (5)     @compr1 clr     USTATE+1        Back to interpretation mode
F08F 9E0C             (        forth.asm):02342 (4)             ldx     BDICEND
F091 9F06             (        forth.asm):02343 (4)             stx     LSTWAD          Update LAST
F093 9E08             (        forth.asm):02344 (4)             ldx     DICEND
                      (        forth.asm):02345         * Optimization: replace the last JSR by a JMP, if possible.
F095 DC10             (        forth.asm):02346 (4)             ldd     JSRLAST
F097 2712             (        forth.asm):02347 (3)             beq     @compr3         We need an RTS
F099 301D             (        forth.asm):02348 (4+1)           leax    -3,x
F09B 9C10             (        forth.asm):02349 (4)             cmpx    JSRLAST
F09D 2604             (        forth.asm):02350 (3)             bne     @compr2
F09F 867E             (        forth.asm):02351 (2)             lda     #JMPOPC         JMP extended
F0A1 A784             (        forth.asm):02352 (4+0)           sta     ,x
                      (        forth.asm):02353         * At this point we still have to emit an RTS unless RTSREMV is 2 or more.
F0A3 3003             (        forth.asm):02354 (4+1)   @compr2 leax    3,x
F0A5 9627             (        forth.asm):02355 (3)             lda     RTSREMV
F0A7 8102             (        forth.asm):02356 (2)             cmpa    #2
F0A9 2404             (        forth.asm):02357 (3)             bhs     @compr4         Optimization applies. We have no forward refs
F0AB 8639             (        forth.asm):02358 (2)     @compr3 lda     #RTSOPC         RTS inherent
F0AD A780             (        forth.asm):02359 (4+1)           sta     ,x+
F0AF                  (        forth.asm):02360         @compr4
                      (        forth.asm):02361                 IFNE    DEBUG
                      (        forth.asm):02362                 lda     #ILLOPC         Illegal opcode
                      (        forth.asm):02363                 sta     ,x+
                      (        forth.asm):02364                 ENDC
F0AF 9F08             (        forth.asm):02365 (4)             stx     DICEND          Update HERE
F0B1 3264             (        forth.asm):02366 (4+1)           leas    4,s             Drop 2 cells from the system stack (see COMP)
                      (        forth.asm):02367                 IFNE    RELFEAT
F0B3 BDEB08           (        forth.asm):02368                 RFXT    jsr,MONITOR+10  XT for MONITOR. All : words are candidates
                      (        forth.asm):02369         *                               for integrity check by ICHECK.
                      (        forth.asm):02370                 ENDC
F0B6 7EE0FE           (        forth.asm):02371 (3)             jmp     INTRPRA
                      (        forth.asm):02372         
F0B9 C7               (        forth.asm):02373         RECURSE fcb     $C7             FORTH-83
F0BA 52454355525345   (        forth.asm):02374                 fcc     'RECURSE'
F0C1 F07D             (        forth.asm):02375                 fdb     COMPR
F0C3 C7               (        forth.asm):02376                 RFCS
F0C4 9E0E             (        forth.asm):02377 (4)             ldx     RECADDR         Set up by LOCWRT
F0C6 AF62             (        forth.asm):02378 (5+1)           stx     2,s             Set as action component
F0C8 39               (        forth.asm):02379 (4)             rts
                      (        forth.asm):02380         
F0C9 06               (        forth.asm):02381         FORGET  fcb     6               79-STANDARD (REQ196)
F0CA 464F52474554     (        forth.asm):02382                 fcc     'FORGET'
F0D0 F0B9             (        forth.asm):02383                 fdb     RECURSE
F0D2 C7               (        forth.asm):02384                 RFCS
F0D3 BDE711           (        forth.asm):02385 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
F0D6 6D84             (        forth.asm):02386 (5+0)           tst     ,x              EOL?
F0D8 2605             (        forth.asm):02387 (3)             bne     @frgt2          No
F0DA C605             (        forth.asm):02388 (2)     @frgt1  ldb     #5              Missing word name
F0DC BDE611           (        forth.asm):02389 (7)             jsr     ERRHDLR         No return
F0DF BDE27D           (        forth.asm):02390 (7)     @frgt2  jsr     SCNSTOK
F0E2 27F6             (        forth.asm):02391 (3)             beq     @frgt1          EOL before a non-SP character could be acquired
F0E4 BDE358           (        forth.asm):02392 (7)             jsr     SWDIC           SWDIC uses TOKENSP as input--not X!!
F0E7 2607             (        forth.asm):02393 (3)             bne     @frgt3          Word found. XT returned in Y
F0E9 9E02             (        forth.asm):02394 (4)             ldx     TOKENSP
F0EB C602             (        forth.asm):02395 (2)             ldb     #2              Undefined (X points to the offending word)
F0ED BDE611           (        forth.asm):02396 (7)             jsr     ERRHDLR         No return
F0F0 1F21             (        forth.asm):02397 (4)     @frgt3  tfr     y,x             Y and X have the word's XT
F0F2 108C0C15         (        forth.asm):02398 (4)             cmpy    #RAMFTCH
F0F6 271B             (        forth.asm):02399 (3)             beq     @frgt4
F0F8 108CE000         (        forth.asm):02400 (4)             cmpy    #ROMSTRT
F0FC 2415             (        forth.asm):02401 (3)             bhs     @frgt4
                      (        forth.asm):02402                 IFNE    RELFEAT
F0FE AE1D             (        forth.asm):02403 (5+1)           ldx     -3,x            Backlink to X
F100 9F06             (        forth.asm):02404 (4)             stx     LSTWAD          Update LAST
F102 303C             (        forth.asm):02405 (4+1)           leax    -4,y            XT-4 to X (1B/attr, 2B/backlink, 1B/checksum)
                      (        forth.asm):02406                 ELSE
                      (        forth.asm):02407                 ldx     -2,x            Backlink to X
                      (        forth.asm):02408                 stx     LSTWAD          Update LAST
                      (        forth.asm):02409                 leax    -3,y            XT-3 to X (1B/attr, 2B/backlink)
                      (        forth.asm):02410                 ENDC
F104 4F               (        forth.asm):02411 (1)             clra
F105 D62D             (        forth.asm):02412 (3)             ldb     CURTOKL         Token name length to D
F107 103201           (        forth.asm):02413 (4)             subr    d,x             Substract word length
F10A 9F08             (        forth.asm):02414 (4)             stx     DICEND          Update HERE
F10C DC02             (        forth.asm):02415 (4)             ldd     TOKENSP         Set by SWDIC to point to the end of the token
F10E 9322             (        forth.asm):02416 (4)             subd    BSBFADR
F110 DD1C             (        forth.asm):02417 (4)             std     UTOIN           Derive >IN from TOKENSP
F112 39               (        forth.asm):02418 (4)             rts
F113 C60B             (        forth.asm):02419 (2)     @frgt4  ldb     #11             Word is unforgettable
F115 BDE611           (        forth.asm):02420 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02421         
F118 07               (        forth.asm):02422         EXCT    fcb     7               79-STANDARD (REQ163)
F119 45584543555445   (        forth.asm):02423                 fcc     'EXECUTE'
F120 F0C9             (        forth.asm):02424                 fdb     FORGET
F122 C7               (        forth.asm):02425                 RFCS
F123 BDE698           (        forth.asm):02426 (7)             jsr     NPOP
F126 1037C1           (        forth.asm):02427 (4)             cmpr    0,x             Although the standard does not specify that
F129 2702             (        forth.asm):02428 (3)             beq     @exct1          a NUL address should trigger an error, I do
F12B 1F15             (        forth.asm):02429 (4)             tfr     x,pc
F12D C60D             (        forth.asm):02430 (2)     @exct1  ldb     #13             Illegal argument
F12F BDE611           (        forth.asm):02431 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02432         
F132 03               (        forth.asm):02433         BYE     fcb     3               Non-standard
F133 425945           (        forth.asm):02434                 fcc     'BYE'
F136 F118             (        forth.asm):02435                 fdb     EXCT
F138 C7               (        forth.asm):02436                 RFCS
F139 7EE036           (        forth.asm):02437 (3)             jmp     RSTHDL
                      (        forth.asm):02438         
F13C C6               (        forth.asm):02439         BKCHAR  fcb     $C6             ANSI (Core)
F13D 5B434841525D     (        forth.asm):02440                 fcc     '[CHAR]'
F143 F132             (        forth.asm):02441                 fdb     BYE
F145 C7               (        forth.asm):02442                 RFCS
F146 8D0B             (        forth.asm):02443                 RFXT    bsr,CHAR+7      XT for CHAR
F148 7EEA75           (        forth.asm):02444                 RFXT    jmp,LITERAL+10  XT for LITERAL
                      (        forth.asm):02445         
F14B 04               (        forth.asm):02446         CHAR    fcb     4               ANSI (Core)
F14C 43484152         (        forth.asm):02447                 fcc     'CHAR'
F150 F13C             (        forth.asm):02448                 fdb     BKCHAR
F152 C7               (        forth.asm):02449                 RFCS
F153 BDE711           (        forth.asm):02450 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
F156 BDE27D           (        forth.asm):02451 (7)     @char1  jsr     SCNSTOK         X points to the beginning of the character
F159 2714             (        forth.asm):02452 (3)             beq     @chrerr
F15B E684             (        forth.asm):02453 (4+0)           ldb     ,x
F15D 4F               (        forth.asm):02454 (1)             clra
F15E 1F01             (        forth.asm):02455 (4)             tfr     d,x
F160 BDE68A           (        forth.asm):02456 (7)             jsr     NPUSH
F163 9E02             (        forth.asm):02457 (4)             ldx     TOKENSP         Set by SCNSTOK
F165 BDE28B           (        forth.asm):02458 (7)             jsr     SCNETOK
F168 1F10             (        forth.asm):02459 (4)             tfr     x,d             TOKENEP
F16A 9322             (        forth.asm):02460 (4)             subd    BSBFADR
F16C DD1C             (        forth.asm):02461 (4)             std     UTOIN           Derive >IN from TOKENEP
F16E 39               (        forth.asm):02462 (4)             rts
F16F C60D             (        forth.asm):02463 (2)     @chrerr ldb     #13             Illegal argument
F171 BDE611           (        forth.asm):02464 (7)             jsr     ERRHDLR
                      (        forth.asm):02465         * No return.
                      (        forth.asm):02466         
                      (        forth.asm):02467         * Hairy code but working.
F174 04               (        forth.asm):02468         WORD    fcb     4               79-STANDARD (REQ181)
F175 574F5244         (        forth.asm):02469                 fcc     'WORD'          ( char -- addr )
F179 F14B             (        forth.asm):02470                 fdb     CHAR
F17B C7               (        forth.asm):02471                 RFCS
F17C BDE698           (        forth.asm):02472 (7)             jsr     NPOP
F17F 1F16             (        forth.asm):02473 (4)             tfr     x,w             F has the delimiter ASCII code
F181 109E08           (        forth.asm):02474 (5)             ldy     DICEND          The counted string returned is stored at HERE
F184 3420             (        forth.asm):02475 (4+2)           pshs    y
F186 6FA0             (        forth.asm):02476 (6+1)           clr     ,y+             Initialize its length
F188 BDE711           (        forth.asm):02477 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
F18B 6D84             (        forth.asm):02478 (5+0)           tst     ,x              EOL reached?
F18D 2605             (        forth.asm):02479 (3)             bne     @word1          No, proceed
F18F 3510             (        forth.asm):02480 (4+2)   @word0  puls    x
F191 3610             (        forth.asm):02481                 UCNPUSH                 Push back HERE
F193 39               (        forth.asm):02482 (4)             rts
F194 BDE27D           (        forth.asm):02483 (7)     @word1  jsr     SCNSTOK         Scan for the next non-space character
F197 2718             (        forth.asm):02484 (3)             beq     @word5          EOL reached, this is the end
F199 A680             (        forth.asm):02485 (4+1)           lda     ,x+             First non-space character
F19B 1037F8           (        forth.asm):02486 (4)             cmpr    f,a             Leading delimiter matched?
F19E 2602             (        forth.asm):02487 (3)             bne     @word3          No
F1A0 A680             (        forth.asm):02488 (4+1)   @word2  lda     ,x+             Acquire next character from the input stream
F1A2 A7A0             (        forth.asm):02489 (4+1)   @word3  sta     ,y+
F1A4 2709             (        forth.asm):02490 (3)             beq     @word4          EOL reached
F1A6 1037F8           (        forth.asm):02491 (4)             cmpr    f,a             Trailing delimiter?
F1A9 2706             (        forth.asm):02492 (3)             beq     @word5
F1AB 6CF4             (        forth.asm):02493 (6+3)           inc     [,s]            Increment string length
F1AD 20F1             (        forth.asm):02494 (3)             bra     @word2
F1AF 301F             (        forth.asm):02495 (4+1)   @word4  leax    -1,x            EOL reached
F1B1 1F10             (        forth.asm):02496 (4)     @word5  tfr     x,d             Pointing one char after the delimiter or to NUL
F1B3 9322             (        forth.asm):02497 (4)             subd    BSBFADR
F1B5 DD1C             (        forth.asm):02498 (4)             std     UTOIN
F1B7 20D6             (        forth.asm):02499 (3)             bra     @word0
                      (        forth.asm):02500         
F1B9 81               (        forth.asm):02501         LPAR    fcb     $81             79-STANDARD (REQ122)
F1BA 28               (        forth.asm):02502                 fcc     '('
F1BB F174             (        forth.asm):02503                 fdb     WORD
F1BD C7               (        forth.asm):02504                 RFCS
F1BE BDE711           (        forth.asm):02505 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
F1C1 A680             (        forth.asm):02506 (4+1)   @lpar1  lda     ,x+
F1C3 270B             (        forth.asm):02507 (3)             beq     @lparx          Input stream exhausted before ) is matched
F1C5 8129             (        forth.asm):02508 (2)             cmpa    #')
F1C7 26F8             (        forth.asm):02509 (3)             bne     @lpar1
F1C9 1F10             (        forth.asm):02510 (4)             tfr     x,d             Just matched )
F1CB 9322             (        forth.asm):02511 (4)             subd    BSBFADR
F1CD DD1C             (        forth.asm):02512 (4)             std     UTOIN           Update >IN
F1CF 39               (        forth.asm):02513 (4)             rts
F1D0 C60C             (        forth.asm):02514 (2)     @lparx  ldb     #12             Missing delimiter
F1D2 BDE611           (        forth.asm):02515 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02516         
F1D5 06               (        forth.asm):02517         SOURCE  fcb     6               ANSI (Core)
F1D6 534F55524345     (        forth.asm):02518                 fcc     'SOURCE'        ( -- baseaddr charcount )
F1DC F1B9             (        forth.asm):02519                 fdb     LPAR
F1DE C7               (        forth.asm):02520                 RFCS
F1DF 9E22             (        forth.asm):02521 (4)             ldx     BSBFADR
F1E1 BDE68A           (        forth.asm):02522 (7)             jsr     NPUSH
F1E4 8E0400           (        forth.asm):02523 (3)             ldx     #BLKSIZ         Non-zero block size
F1E7 DC1E             (        forth.asm):02524 (4)             ldd     UBLK
F1E9 2605             (        forth.asm):02525 (3)             bne     @srcdon         Current BLK is NZ
F1EB 4F               (        forth.asm):02526 (1)             clra
F1EC D624             (        forth.asm):02527 (3)             ldb     CMDLNSZ         Character count entered through GETS in INTERP
F1EE 1F01             (        forth.asm):02528 (4)             tfr     d,x
F1F0 7EE68A           (        forth.asm):02529 (3)     @srcdon jmp     NPUSH
                      (        forth.asm):02530         
                      (        forth.asm):02531         * This is a straightforward implementation borrowed from GNU Forth 'see \':
                      (        forth.asm):02532         * : \  
                      (        forth.asm):02533         *   BLK @ 
                      (        forth.asm):02534         *   IF     >IN @ C/L / 1+ C/L * >IN ! EXIT 
                      (        forth.asm):02535         *   THEN 
                      (        forth.asm):02536         *   SOURCE >IN ! DROP ; IMMEDIATE
                      (        forth.asm):02537         * However since C/L (number of columns per line) is 64 (a power of 2), things
                      (        forth.asm):02538         * can be coded in a more compact manner as: >IN @ 63 COM AND 64 + >IN !
F1F3 81               (        forth.asm):02539         BKSLSH  fcb     $81             ANSI (Block Ext)
F1F4 5C               (        forth.asm):02540                 fcb     $5C             \ ( -- )
F1F5 F1D5             (        forth.asm):02541                 fdb     SOURCE
F1F7 C7               (        forth.asm):02542                 RFCS
F1F8 DC1E             (        forth.asm):02543 (4)             ldd     UBLK            BLK @ to D
F1FA 270B             (        forth.asm):02544 (3)             beq     @comser         We operate from block 0: the console
F1FC DC1C             (        forth.asm):02545 (4)             ldd     UTOIN           >IN @
F1FE C4C0             (        forth.asm):02546 (2)             andb    #^$3F           Point to the beginning of the line
F200 CB40             (        forth.asm):02547 (2)             addb    #$40            next line
F202 8900             (        forth.asm):02548 (2)             adca    #0              Propagate potential carry from LSB
F204 DD1C             (        forth.asm):02549 (4)             std     UTOIN           >IN !
F206 39               (        forth.asm):02550 (4)             rts                     EXIT
F207 8DD6             (        forth.asm):02551         @comser RFXT    bsr,SOURCE+9    XT for SOURCE
F209 BDE698           (        forth.asm):02552 (7)             jsr     NPOP
F20C 9F1C             (        forth.asm):02553 (4)             stx     UTOIN           >IN !
F20E 7EFBCB           (        forth.asm):02554                 RFXT    jmp,DROP+7      XT for DROP
                      (        forth.asm):02555                 ENDC
                      (        forth.asm):02556         
F211 82               (        forth.asm):02557         PSTR    fcb     $82             79-STANDARD (REQ133)
F212 2E22             (        forth.asm):02558                 fcc     '."'
F214 F1F3             (        forth.asm):02559                 fdb     BKSLSH
F216 C7               (        forth.asm):02560                 RFCS
F217 BDE711           (        forth.asm):02561 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
F21A 6D80             (        forth.asm):02562 (5+1)           tst     ,x+
F21C 270C             (        forth.asm):02563 (3)             beq     @pstr2          Met the end of the input stream before "
F21E 9F02             (        forth.asm):02564 (4)             stx     TOKENSP         Beginning of string address
F220 A680             (        forth.asm):02565 (4+1)   @pstr1  lda     ,x+
F222 2706             (        forth.asm):02566 (3)             beq     @pstr2
F224 8122             (        forth.asm):02567 (2)             cmpa    #'"
F226 2707             (        forth.asm):02568 (3)             beq     @pstr3
F228 20F6             (        forth.asm):02569 (3)             bra     @pstr1
F22A C60C             (        forth.asm):02570 (2)     @pstr2  ldb     #12             Missing delimiter
F22C BDE611           (        forth.asm):02571 (7)             jsr     ERRHDLR         No return
F22F 9F04             (        forth.asm):02572 (4)     @pstr3  stx     TOKENEP         X points to the character following "
F231 6F1F             (        forth.asm):02573 (6+1)           clr     -1,x            Overwrite the trailing " with NUL
F233 1F10             (        forth.asm):02574 (4)             tfr     x,d
F235 9322             (        forth.asm):02575 (4)             subd    BSBFADR
F237 DD1C             (        forth.asm):02576 (4)             std     UTOIN           Derive >IN from TOKENEP
F239 0D1B             (        forth.asm):02577 (4)             tst     USTATE+1
F23B 260E             (        forth.asm):02578 (3)             bne     PSTRCMP
F23D 1F12             (        forth.asm):02579 (4)             tfr     x,y             Y has TOKENEP
F23F 9E02             (        forth.asm):02580 (4)             ldx     TOKENSP
F241 BDE1D8           (        forth.asm):02581 (7)             jsr     PUTS
F244 1F21             (        forth.asm):02582 (4)             tfr     y,x
F246 8622             (        forth.asm):02583 (2)     @pstr4  lda     #'"
F248 A71F             (        forth.asm):02584 (4+1)           sta     -1,x            Restore the trailing "
F24A 39               (        forth.asm):02585 (4)             rts
F24B 109E08           (        forth.asm):02586 (5)     PSTRCMP ldy     DICEND          We are compiling
F24E 868E             (        forth.asm):02587 (2)             lda     #LDXOPC         LDX immediate
F250 A7A0             (        forth.asm):02588 (4+1)           sta     ,y+
F252 3025             (        forth.asm):02589 (4+1)           leax    5,y
F254 AFA1             (        forth.asm):02590 (5+2)           stx     ,y++
F256 867E             (        forth.asm):02591 (2)             lda     #JMPOPC         JMP extended
F258 A7A0             (        forth.asm):02592 (4+1)           sta     ,y+
F25A 3420             (        forth.asm):02593 (4+2)           pshs    y               Jump address beyond the string
F25C 3122             (        forth.asm):02594 (4+1)           leay    2,y
F25E 9E02             (        forth.asm):02595 (4)             ldx     TOKENSP
F260 DC04             (        forth.asm):02596 (4)             ldd     TOKENEP
F262 103210           (        forth.asm):02597 (4)             subr    x,d
F265 1F06             (        forth.asm):02598 (4)             tfr     d,w
F267 113812           (        forth.asm):02599 (6+?)           tfm     x+,y+
F26A 109F08           (        forth.asm):02600 (5)             sty     DICEND
F26D 3510             (        forth.asm):02601 (4+2)           puls    x
F26F 10AF84           (        forth.asm):02602 (6+0)           sty     ,x              Install JMP address
F272 8EE1D8           (        forth.asm):02603 (3)             ldx     #PUTS
F275 AF62             (        forth.asm):02604 (5+1)           stx     2,s             Set as action component
F277 9E04             (        forth.asm):02605 (4)             ldx     TOKENEP
F279 20CB             (        forth.asm):02606 (3)             bra     @pstr4
                      (        forth.asm):02607         
                      (        forth.asm):02608         * Transactional behaviour is guaranteed here. What this means is that the
                      (        forth.asm):02609         * operation will preserve the data stack contents, should insufficient
                      (        forth.asm):02610         * parameters be supplied. It is a very desirable feature (for debugging
                      (        forth.asm):02611         * purposes) which will be generalized to a number of other words. As an
                      (        forth.asm):02612         * aside, it also allows us to access the data stack as directly indexed
                      (        forth.asm):02613         * through the 6309 U register, resulting in better performance.
F27B 02               (        forth.asm):02614         DPLUS   fcb     2               79-STANDARD (REQ241)
F27C 442B             (        forth.asm):02615                 fcc     'D+'            ( d2 d1 -- d1+d2--signed )
F27E F211             (        forth.asm):02616                 fdb     PSTR            Initially ( L2 H2 L1 H1)
F280 C7               (        forth.asm):02617                 RFCS
F281 CC023EBDE304     (        forth.asm):02618                 MINDREQ 4               Make sure we have at least 4 cells stacked up
                      (        forth.asm):02619         * At this point sufficient stack depth has been assessed. Let's rock and roll!
F287 BDFC49           (        forth.asm):02620         @stkok  RFXT    jsr,ROT+6       XT for ROT ( L2 L1 H1 H2 )
F28A EC44             (        forth.asm):02621 (5+1)           ldd     4,u             L1
F28C E346             (        forth.asm):02622 (5+1)           addd    6,u             L2
F28E ED46             (        forth.asm):02623 (5+1)           std     6,u             d1+d2 least significant cell
F290 EC42             (        forth.asm):02624 (5+1)           ldd     2,u             H1
F292 10890000         (        forth.asm):02625 (4)             adcd    #0              Carry from least significant cell addition
F296 E3C4             (        forth.asm):02626 (5+0)           addd    ,u              H2
F298 ED44             (        forth.asm):02627 (5+1)           std     4,u             d1+d2 most significant cell
F29A 3344             (        forth.asm):02628 (4+1)           leau    4,u             Drop 2 cells from the data stack
F29C 39               (        forth.asm):02629 (4)             rts
                      (        forth.asm):02630         
F29D 07               (        forth.asm):02631         DNEG    fcb     7               79-STANDARD (REQ245)
F29E 444E4547415445   (        forth.asm):02632                 fcc     'DNEGATE'
F2A5 F27B             (        forth.asm):02633                 fdb     DPLUS
F2A7 C7               (        forth.asm):02634                 RFCS
F2A8 CC0242BDE304     (        forth.asm):02635                 MINDREQ 2               We need at least 2 cells stacked up
F2AE 10A642           (        forth.asm):02636 (6+1)           ldw     2,u             Least significant cell
F2B1 1053             (        forth.asm):02637 (2)             comw
F2B3 ECC4             (        forth.asm):02638 (5+0)           ldd     ,u              Most significant cell
F2B5 1043             (        forth.asm):02639 (2)             comd
F2B7 108B0001         (        forth.asm):02640 (4)             addw    #1
F2BB 10890000         (        forth.asm):02641 (4)             adcd    #0              Propagate carry flag
F2BF 10EDC4           (        forth.asm):02642 (8+0)           stq     ,u              Store the result back to the data stack
F2C2 39               (        forth.asm):02643 (4)             rts
                      (        forth.asm):02644         
F2C3 03               (        forth.asm):02645         DZEQ    fcb     3               79-STANDARD (double number extension)
F2C4 44303D           (        forth.asm):02646                 fcc     'D0='           ( d -- flag )
F2C7 F29D             (        forth.asm):02647                 fdb     DNEG
F2C9 C7               (        forth.asm):02648                 RFCS
F2CA BDED11           (        forth.asm):02649                 RFXT    jsr,OR+5        XT for OR
F2CD 7EED91           (        forth.asm):02650                 RFXT    jmp,NULP+5      XT for 0=
                      (        forth.asm):02651         
                      (        forth.asm):02652         * In essence:
                      (        forth.asm):02653         * : D< DNEGATE D+ NIP [ HEX ] 8000 AND IF 1 ELSE 0 THEN ;
F2D0 02               (        forth.asm):02654         DLESS   fcb     2               79-STANDARD (REQ244)
F2D1 443C             (        forth.asm):02655                 fcc     'D<'            ( d1 d2 -- flag )
F2D3 F2C3             (        forth.asm):02656                 fdb     DZEQ
F2D5 C7               (        forth.asm):02657                 RFCS
F2D6 8DD0             (        forth.asm):02658                 RFXT    bsr,DNEG+10     XT for DNEGATE
F2D8 8DA7             (        forth.asm):02659                 RFXT    bsr,DPLUS+5     XT for D+
F2DA 4F               (        forth.asm):02660 (1)             clra
F2DB A742             (        forth.asm):02661 (4+1)           sta     2,u
F2DD E6C4             (        forth.asm):02662 (4+0)           ldb     ,u
F2DF 2D05             (        forth.asm):02663 (3)             blt     @setto1
F2E1 A743             (        forth.asm):02664 (4+1)   @setrv  sta     3,u
F2E3 3342             (        forth.asm):02665 (4+1)           leau    2,u
F2E5 39               (        forth.asm):02666 (4)             rts
F2E6 4C               (        forth.asm):02667 (1)     @setto1 inca
F2E7 20F8             (        forth.asm):02668 (3)             bra     @setrv
                      (        forth.asm):02669         
F2E9 05               (        forth.asm):02670         TWOOVER fcb     5               79-STANDARD (double number extension)
F2EA 324F564552       (        forth.asm):02671                 fcc     '2OVER'         ( d1 d2 -- d1 d2 d1 )
F2EF F2D0             (        forth.asm):02672                 fdb     DLESS
F2F1 C7               (        forth.asm):02673                 RFCS
F2F2 CC023EBDE304     (        forth.asm):02674                 MINDREQ 4
F2F8 10EC44           (        forth.asm):02675 (8+1)           ldq     4,u             D:W has MSC:LSC of D1
F2FB 1F61             (        forth.asm):02676 (4)             tfr     w,x
F2FD BDE68A           (        forth.asm):02677 (7)             jsr     NPUSH
F300 1F01             (        forth.asm):02678 (4)             tfr     d,x
F302 7EE68A           (        forth.asm):02679 (3)             jmp     NPUSH
                      (        forth.asm):02680         
F305 05               (        forth.asm):02681         TWOSWAP fcb     5               79-STANDARD (double number extension)
F306 3253574150       (        forth.asm):02682                 fcc     '2SWAP'         ( d1 d2 -- d2 d1 )
F30B F2E9             (        forth.asm):02683                 fdb     TWOOVER
F30D C7               (        forth.asm):02684                 RFCS
F30E CC023EBDE304     (        forth.asm):02685                 MINDREQ 4               At least four cells must be stacked up
F314 AE44             (        forth.asm):02686 (5+1)           ldx     4,u             D1 most significant cell
F316 10AE46           (        forth.asm):02687 (6+1)           ldy     6,u             D1 least significant cell
F319 10ECC4           (        forth.asm):02688 (8+0)           ldq     ,u              D:W has MSC:LSC of D2
F31C 10ED44           (        forth.asm):02689 (8+1)           stq     4,u
F31F AFC4             (        forth.asm):02690 (5+0)           stx     ,u
F321 10AF42           (        forth.asm):02691 (6+1)           sty     2,u
F324 39               (        forth.asm):02692 (4)             rts
                      (        forth.asm):02693         
F325 05               (        forth.asm):02694         TWODROP fcb     5               79-STANDARD (double number extension)
F326 3244524F50       (        forth.asm):02695                 fcc     '2DROP'         ( d -- )
F32B F305             (        forth.asm):02696                 fdb     TWOSWAP
F32D C7               (        forth.asm):02697                 RFCS
F32E CC0242BDE304     (        forth.asm):02698                 MINDREQ 2               At least two cells must be stacked up
F334 3344             (        forth.asm):02699 (4+1)           leau    4,u
F336 39               (        forth.asm):02700 (4)             rts
                      (        forth.asm):02701         
F337 04               (        forth.asm):02702         TWODUP  fcb     4               79-STANDARD (double number extension)
F338 32445550         (        forth.asm):02703                 fcc     '2DUP'          ( double -- double double )
F33C F325             (        forth.asm):02704                 fdb     TWODROP
F33E C7               (        forth.asm):02705                 RFCS
F33F CC0242BDE304     (        forth.asm):02706                 MINDREQ 2
F345 10ECC4           (        forth.asm):02707 (8+0)           ldq     ,u              D:W has MSC:LSC of DOUBLE
F348 1F61             (        forth.asm):02708 (4)             tfr     w,x
F34A BDE68A           (        forth.asm):02709 (7)             jsr     NPUSH
F34D 1F01             (        forth.asm):02710 (4)             tfr     d,x
F34F 7EE68A           (        forth.asm):02711 (3)             jmp     NPUSH
                      (        forth.asm):02712         
F352 02               (        forth.asm):02713         TWOSTOR fcb     2               79-STANDARD (double number extension)
F353 3221             (        forth.asm):02714                 fcc     '2!'            ( double addr -- )
F355 F337             (        forth.asm):02715                 fdb     TWODUP
F357 C7               (        forth.asm):02716                 RFCS
F358 CC0240BDE304     (        forth.asm):02717                 MINDREQ 3
F35E 10EC42           (        forth.asm):02718 (8+1)           ldq     2,u             DOUBLE to D:W
F361 10EDD4           (        forth.asm):02719 (8+3)           stq     [,u]            Store DOUBLE to ADDR
F364 3346             (        forth.asm):02720 (4+1)           leau    6,u             Drop three cells from the user stack
F366 39               (        forth.asm):02721 (4)             rts
                      (        forth.asm):02722         
F367 02               (        forth.asm):02723         TWOFTCH fcb     2               79-STANDARD (double number extension)
F368 3240             (        forth.asm):02724                 fcc     '2@'            ( dbladdr -- double )
F36A F352             (        forth.asm):02725                 fdb     TWOSTOR
F36C C7               (        forth.asm):02726                 RFCS
F36D CC0244BDE304     (        forth.asm):02727                 MINDREQ 1
F373 10ECD4           (        forth.asm):02728 (8+3)           ldq     [,u]            D:W has MSC:LSC of DBLADDR @
F376 10A7C4           (        forth.asm):02729 (6+0)           stw     ,u              Least significant cell stacked in place
F379 1F01             (        forth.asm):02730 (4)             tfr     d,x             Most significant cell goes through standard push
F37B 7EE68A           (        forth.asm):02731 (3)             jmp     NPUSH
                      (        forth.asm):02732         
F37E 07               (        forth.asm):02733         CONVERT fcb     7               79-STANDARD (REQ195)
F37F 434F4E56455254   (        forth.asm):02734                 fcc     'CONVERT'       ( d1 addr1 -- d2 addr2 )
F386 F367             (        forth.asm):02735                 fdb     TWOFTCH
F388 C7               (        forth.asm):02736                 RFCS
F389 CC0240BDE304     (        forth.asm):02737                 MINDREQ 3               At least 3 cells need to be stacked up on entry
F38F BDE29D           (        forth.asm):02738 (7)             jsr     CKBASE          Check for supported BASE. No return if not
F392 AEC4             (        forth.asm):02739 (5+0)           ldx     ,u              ADDR1 to X
F394 3001             (        forth.asm):02740 (4+1)   @cvloop leax    1,x
F396 E684             (        forth.asm):02741 (4+0)           ldb     ,x
                      (        forth.asm):02742         * B has the ASCII representation of something that may or may not be a valid
                      (        forth.asm):02743         * digit, expressed in BASE (alias (byte)UBASE+1). If it does, multiply D1 by
                      (        forth.asm):02744         * BASE and add that to D1 (aka D2 on exit). Then add DIGIT on the top of it.
F398 C030             (        forth.asm):02745 (2)             subb    #'0             Minimal ASCII value condition met?
F39A 255B             (        forth.asm):02746 (3)             blo     @cvoor          No. Out of range. ,X cannot be a valid digit
F39C C10A             (        forth.asm):02747 (2)             cmpb    #10
F39E 2510             (        forth.asm):02748 (3)             blo     @cvnolt         No letter in potential BASE
                      (        forth.asm):02749                 IFEQ    CSSNTVE
F3A0 C111             (        forth.asm):02750 (2)             cmpb    #'A-'0
F3A2 2553             (        forth.asm):02751 (3)             blo     @cvoor          Greater than 9 but lower than A
F3A4 C131             (        forth.asm):02752 (2)             cmpb    #'a-'0
F3A6 2506             (        forth.asm):02753 (3)             blo     @cvisuc         Upper case already
F3A8 C14A             (        forth.asm):02754 (2)             cmpb    #'z-'0
F3AA 224B             (        forth.asm):02755 (3)             bhi     @cvoor          Definitely out of range
F3AC C020             (        forth.asm):02756 (2)             subb    #'a-'A          To upper case
                      (        forth.asm):02757                 ENDC
F3AE C007             (        forth.asm):02758 (2)     @cvisuc subb    #'A-':          A-Z to number
F3B0 D119             (        forth.asm):02759 (3)     @cvnolt cmpb    UBASE+1         B has a digit. Make sure it's less than BASE
F3B2 2443             (        forth.asm):02760 (3)             bhs     @cvoor          Number under scrutiny is >= BASE
F3B4 3278             (        forth.asm):02761 (4+1)           leas    -8,s            Allocate scratch space
F3B6 4F               (        forth.asm):02762 (1)             clra
F3B7 3406             (        forth.asm):02763 (4+2)           pshs    d
                      (        forth.asm):02764         * System and user stack structures are as follows:
                      (        forth.asm):02765         * ,s    current digit (1 cell)
                      (        forth.asm):02766         * 2,s   D0*B (1 cell)
                      (        forth.asm):02767         * 4,s   D1*B (1 cell)
                      (        forth.asm):02768         * 6,s   D2*B (1 cell)
                      (        forth.asm):02769         * 8,s   D3*B (1 cell)
                      (        forth.asm):02770         * 2,u   D1H most significant cell
                      (        forth.asm):02771         * 4,u   D1L least significant cell
F3B9 1F37             (        forth.asm):02772 (4)             tfr     u,v             Backup U
F3BB 3346             (        forth.asm):02773 (4+1)           leau    6,u             Point one byte after D1LL
F3BD 3162             (        forth.asm):02774 (4+1)           leay    2,s             Point to D0*B
F3BF 118604           (        forth.asm):02775 (3)             lde     #4              Four products to go through
F3C2 A6C2             (        forth.asm):02776 (4+1)   @cvmul  lda     ,-u
F3C4 D619             (        forth.asm):02777 (3)             ldb     UBASE+1
F3C6 3D               (        forth.asm):02778 (10)            mul
F3C7 EDA1             (        forth.asm):02779 (5+2)           std     ,y++
F3C9 114A             (        forth.asm):02780 (2)             dece
F3CB 26F5             (        forth.asm):02781 (3)             bne     @cvmul
F3CD 1F73             (        forth.asm):02782 (4)             tfr     v,u             Restore U
F3CF A663             (        forth.asm):02783 (4+1)           lda     3,s
F3D1 A745             (        forth.asm):02784 (4+1)           sta     5,u             D1LL
F3D3 A662             (        forth.asm):02785 (4+1)           lda     2,s
F3D5 AB65             (        forth.asm):02786 (4+1)           adda    5,s
F3D7 A744             (        forth.asm):02787 (4+1)           sta     4,u             D1LH
F3D9 A664             (        forth.asm):02788 (4+1)           lda     4,s
F3DB A967             (        forth.asm):02789 (4+1)           adca    7,s
F3DD A743             (        forth.asm):02790 (4+1)           sta     3,u             D1HL
F3DF A666             (        forth.asm):02791 (4+1)           lda     6,s
F3E1 A969             (        forth.asm):02792 (4+1)           adca    9,s
F3E3 A742             (        forth.asm):02793 (4+1)           sta     2,u             D1HH
F3E5 EC44             (        forth.asm):02794 (5+1)           ldd     4,u             D1L
F3E7 E3E4             (        forth.asm):02795 (5+0)           addd    ,s              DIGIT
F3E9 ED44             (        forth.asm):02796 (5+1)           std     4,u
F3EB EC42             (        forth.asm):02797 (5+1)           ldd     2,u             D1H
F3ED 10890000         (        forth.asm):02798 (4)             adcd    #0              Potential carry from lower cell
F3F1 ED42             (        forth.asm):02799 (5+1)           std     2,u
F3F3 326A             (        forth.asm):02800 (4+1)           leas    10,s            Release scratch space
F3F5 209D             (        forth.asm):02801 (3)             bra     @cvloop         Here we go again
F3F7 AFC4             (        forth.asm):02802 (5+0)   @cvoor  stx     ,u              Update ADDR2
F3F9 39               (        forth.asm):02803 (4)             rts
                      (        forth.asm):02804         
F3FA 02               (        forth.asm):02805         CVTE    fcb     2
F3FB 233E             (        forth.asm):02806                 fcc     '#>'
F3FD F37E             (        forth.asm):02807                 fdb     CONVERT
F3FF C7               (        forth.asm):02808                 RFCS
F400 BDE698           (        forth.asm):02809 (7)             jsr     NPOP
F403 BDE698           (        forth.asm):02810 (7)             jsr     NPOP            Drop 2 cells from the data stack
F406 8E0134           (        forth.asm):02811 (3)             ldx     #PADBUF
F409 3610             (        forth.asm):02812                 UCNPUSH
F40B BDE1A5           (        forth.asm):02813 (7)             jsr     SLEN
F40E 1F61             (        forth.asm):02814 (4)             tfr     w,x
F410 3610             (        forth.asm):02815                 UCNPUSH
F412 39               (        forth.asm):02816 (4)             rts
                      (        forth.asm):02817         
F413 04               (        forth.asm):02818         SIGN    fcb     4
F414 5349474E         (        forth.asm):02819                 fcc     'SIGN'
F418 F3FA             (        forth.asm):02820                 fdb     CVTE
F41A C7               (        forth.asm):02821                 RFCS
F41B BDE698           (        forth.asm):02822 (7)             jsr     NPOP
F41E 1F10             (        forth.asm):02823 (4)             tfr     x,d
F420 104D             (        forth.asm):02824 (2)             tstd
F422 2C05             (        forth.asm):02825 (3)             bge     @sign1
F424 C62D             (        forth.asm):02826 (2)             ldb     #'-
F426 7EF4E3           (        forth.asm):02827 (3)             jmp     INSBPAD
F429 39               (        forth.asm):02828 (4)     @sign1  rts
                      (        forth.asm):02829         
F42A 04               (        forth.asm):02830         HOLD    fcb     4
F42B 484F4C44         (        forth.asm):02831                 fcc     'HOLD'
F42F F413             (        forth.asm):02832                 fdb     SIGN
F431 C7               (        forth.asm):02833                 RFCS
F432 BDE698           (        forth.asm):02834 (7)             jsr     NPOP
F435 1F10             (        forth.asm):02835 (4)             tfr     x,d
F437 7EF4E3           (        forth.asm):02836 (3)             jmp     INSBPAD         B is inserted at the beginning of PAD.
                      (        forth.asm):02837         
F43A 02               (        forth.asm):02838         SHARPS  fcb     2
F43B 2353             (        forth.asm):02839                 fcc     '#S'
F43D F42A             (        forth.asm):02840                 fdb     HOLD
F43F C7               (        forth.asm):02841                 RFCS
F440 8601             (        forth.asm):02842 (2)             lda     #1
F442 972A             (        forth.asm):02843 (3)             sta     CVTFCN          CVT function #1 is #S
F444 2007             (        forth.asm):02844 (3)             bra     CVT0
                      (        forth.asm):02845         
                      (        forth.asm):02846         * Unsigned double on the top of the data stack gets divided by BASE.
                      (        forth.asm):02847         * The division algorithm implemented here is the binary long division.
                      (        forth.asm):02848         * See https://en.wikipedia.org/wiki/Division_algorithm for more information.
                      (        forth.asm):02849         * Remainder (converted to a character) gets prepended to PAD.
F446 01               (        forth.asm):02850         CVT     fcb     1
F447 23               (        forth.asm):02851                 fcc     '#'
F448 F43A             (        forth.asm):02852                 fdb     SHARPS
F44A C7               (        forth.asm):02853                 RFCS
F44B 0F2A             (        forth.asm):02854 (5)             clr     CVTFCN          CVT function 0 is #
F44D BDE698           (        forth.asm):02855 (7)     CVT0    jsr     NPOP
F450 1F16             (        forth.asm):02856 (4)             tfr     x,w
F452 BDE698           (        forth.asm):02857 (7)             jsr     NPOP
F455 3410             (        forth.asm):02858 (4+2)   CVT1    pshs    x               Numerator least significant cell
F457 1038             (        forth.asm):02859 (6)             pshsw                   Numerator most significant cell
F459 104F             (        forth.asm):02860 (2)             clrd
F45B 3406             (        forth.asm):02861 (4+2)           pshs    d               Quotient low
F45D 3406             (        forth.asm):02862 (4+2)           pshs    d               Quotient high
F45F 3406             (        forth.asm):02863 (4+2)           pshs    d               Bitmask low
F461 10868000         (        forth.asm):02864 (4)             ldw     #$8000          Bitmask high
F465 1038             (        forth.asm):02865 (6)             pshsw
F467 3406             (        forth.asm):02866 (4+2)           pshs    d
                      (        forth.asm):02867         * Stack structure:
                      (        forth.asm):02868         * 1,s   remainder               8 bits (high order byte is zero and unused)
                      (        forth.asm):02869         * 2,s   Bitmask high            16 bits
                      (        forth.asm):02870         * 4,s   Bitmask low             16 bits
                      (        forth.asm):02871         * 6,s   Quotient high           16 bits
                      (        forth.asm):02872         * 8,s   Quotient low            16 bits
                      (        forth.asm):02873         * 10,s  Numerator high          16 bits
                      (        forth.asm):02874         * 12,s  Numerator low           16 bits
                      (        forth.asm):02875         * Denominator is at UBASE+1     8 bits
F469 11C61F           (        forth.asm):02876 (3)             ldf     #31             32 bits to go
F46C 6861             (        forth.asm):02877 (6+1)   @cvt1   lsl     1,s             R := R << 1
                      (        forth.asm):02878         * We need to extract bit <f> from the numerator.
F46E 306A             (        forth.asm):02879 (4+1)           leax    10,s            Numerator MSB address
F470 1FF8             (        forth.asm):02880 (4)             tfr     f,a             Not to alter the stack structure
F472 44               (        forth.asm):02881 (1)             lsra                    OffsetX: 3 - F >> 3
F473 44               (        forth.asm):02882 (1)             lsra
F474 44               (        forth.asm):02883 (1)             lsra
F475 C603             (        forth.asm):02884 (2)             ldb     #3
F477 103289           (        forth.asm):02885 (4)             subr    a,b
F47A 3A               (        forth.asm):02886 (1)             abx
F47B A684             (        forth.asm):02887 (4+0)           lda     ,x
F47D 1FF9             (        forth.asm):02888 (4)             tfr     f,b             Bitno: F & 7
F47F C407             (        forth.asm):02889 (2)             andb    #7
                      (        forth.asm):02890         * At this point, A has the data we're interested in. B has the bit number.
F481 5D               (        forth.asm):02891 (1)     @cvtex  tstb
F482 2704             (        forth.asm):02892 (3)             beq     @cvtfnd         Bit 0 of A has the data
F484 44               (        forth.asm):02893 (1)             lsra
F485 5A               (        forth.asm):02894 (1)             decb
F486 20F9             (        forth.asm):02895 (3)             bra     @cvtex
F488 8401             (        forth.asm):02896 (2)     @cvtfnd anda    #1
F48A AA61             (        forth.asm):02897 (4+1)           ora     1,s             R(0) := N(i)
F48C A761             (        forth.asm):02898 (4+1)           sta     1,s             Update the remainder
F48E 9119             (        forth.asm):02899 (3)             cmpa    UBASE+1
F490 2512             (        forth.asm):02900 (3)             blo     @cvt5
F492 9019             (        forth.asm):02901 (3)             suba    UBASE+1
F494 A761             (        forth.asm):02902 (4+1)           sta     1,s             R := R - D
                      (        forth.asm):02903         * Q(i) := 1 (use the bitmask).
F496 EC66             (        forth.asm):02904 (5+1)           ldd     6,s             Quotient high
F498 10AA62           (        forth.asm):02905 (6+1)           ord     2,s             Bitmask high
F49B ED66             (        forth.asm):02906 (5+1)           std     6,s
F49D EC68             (        forth.asm):02907 (5+1)           ldd     8,s             Quotient low
F49F 10AA64           (        forth.asm):02908 (6+1)           ord     4,s             Bitmask low
F4A2 ED68             (        forth.asm):02909 (5+1)           std     8,s
                      (        forth.asm):02910         * Shift the bitmask 1 bit right.
F4A4 EC62             (        forth.asm):02911 (5+1)   @cvt5   ldd     2,s
F4A6 1044             (        forth.asm):02912 (2)             lsrd
F4A8 ED62             (        forth.asm):02913 (5+1)           std     2,s
F4AA EC64             (        forth.asm):02914 (5+1)           ldd     4,s
F4AC 1046             (        forth.asm):02915 (2)             rord
F4AE ED64             (        forth.asm):02916 (5+1)           std     4,s
F4B0 115A             (        forth.asm):02917 (2)             decf
F4B2 2CB8             (        forth.asm):02918 (3)             bge     @cvt1
                      (        forth.asm):02919         * Convert the remainder to a digit expressed in BASE.
F4B4 E661             (        forth.asm):02920 (4+1)           ldb     1,s
F4B6 8630             (        forth.asm):02921 (2)             lda     #'0
F4B8 C10A             (        forth.asm):02922 (2)             cmpb    #10             B has the digit we want converted to BASE
F4BA 2502             (        forth.asm):02923 (3)             bcs     @cvtdgt
F4BC 8637             (        forth.asm):02924 (2)             lda     #'A-10
F4BE 103089           (        forth.asm):02925 (4)     @cvtdgt addr    a,b
F4C1 8D20             (        forth.asm):02926 (6)             bsr     INSBPAD         Prepend B to the string currently in PAD
F4C3 0D2A             (        forth.asm):02927 (4)             tst     CVTFCN
F4C5 2711             (        forth.asm):02928 (3)             beq     @cvtend         Function 0 is straight #, i.e. we're done here
                      (        forth.asm):02929         * Function 1 is #S, we iterate unless the quotient is 0.
F4C7 EC68             (        forth.asm):02930 (5+1)           ldd     8,s
F4C9 10AA66           (        forth.asm):02931 (6+1)           ord     6,s
F4CC 270A             (        forth.asm):02932 (3)             beq     @cvtend
F4CE AE68             (        forth.asm):02933 (5+1)           ldx     8,s             New numerator low
F4D0 10A666           (        forth.asm):02934 (6+1)           ldw     6,s             New numerator high
F4D3 326E             (        forth.asm):02935 (4+1)           leas    14,s            Discard the stack frame
F4D5 7EF455           (        forth.asm):02936 (3)             jmp     CVT1            And go at it again
                      (        forth.asm):02937         * Push back the quotient on the data stack (low then high cell).
F4D8 AE68             (        forth.asm):02938 (5+1)   @cvtend ldx     8,s
F4DA 3610             (        forth.asm):02939                 UCNPUSH
F4DC AE66             (        forth.asm):02940 (5+1)           ldx     6,s
F4DE 326E             (        forth.asm):02941 (4+1)           leas    14,s            Discard the stack frame
F4E0 3610             (        forth.asm):02942                 UCNPUSH
F4E2 39               (        forth.asm):02943 (4)             rts
                      (        forth.asm):02944         
                      (        forth.asm):02945         * Insert the character in B in front of the string at PADBUF.
F4E3 8E0134           (        forth.asm):02946 (3)     INSBPAD ldx     #PADBUF
F4E6 BDE1A5           (        forth.asm):02947 (7)             jsr     SLEN
F4E9 103061           (        forth.asm):02948 (4)             addr    w,x             X points to the PAD string's NUL terminator
F4EC 105C             (        forth.asm):02949 (2)             incw                    Include the terminator
F4EE 3101             (        forth.asm):02950 (4+1)           leay    1,x
F4F0 113912           (        forth.asm):02951 (6+?)           tfm     x-,y-
F4F3 D734             (        forth.asm):02952 (3)             stb     PADBUF
F4F5 39               (        forth.asm):02953 (4)             rts
                      (        forth.asm):02954         
F4F6 02               (        forth.asm):02955         CVTB    fcb     2
F4F7 3C23             (        forth.asm):02956                 fcc     '<#'
F4F9 F446             (        forth.asm):02957                 fdb     CVT
F4FB C7               (        forth.asm):02958                 RFCS
F4FC BDE29D           (        forth.asm):02959 (7)             jsr     CKBASE          Sanity check. BASE can be altered at any time
F4FF 0F34             (        forth.asm):02960 (5)             clr     PADBUF
F501 39               (        forth.asm):02961 (4)             rts
                      (        forth.asm):02962         
F502 01               (        forth.asm):02963         DOT     fcb     1               79-STANDARD (REQ193)
F503 2E               (        forth.asm):02964                 fcc     '.'
F504 F4F6             (        forth.asm):02965                 fdb     CVTB
F506 C7               (        forth.asm):02966                 RFCS
F507 8601             (        forth.asm):02967 (2)             lda     #1
F509 972C             (        forth.asm):02968 (3)             sta     CVISSGN         Force a signed number conversion
F50B BDE698           (        forth.asm):02969 (7)     ptop0   jsr     NPOP
F50E BDE30F           (        forth.asm):02970 (7)             jsr     CVNSTR
F511 8E039A           (        forth.asm):02971 (3)             ldx     #TBUFF
F514 8620             (        forth.asm):02972 (2)             lda     #SP
F516 A180             (        forth.asm):02973 (4+1)   @ptop1  cmpa    ,x+             Skip leading spaces
F518 27FC             (        forth.asm):02974 (3)             beq     @ptop1
F51A 301F             (        forth.asm):02975 (4+1)           leax    -1,x            Point to actual string start address
F51C BDE1D8           (        forth.asm):02976 (7)             jsr     PUTS
F51F 7EE1B4           (        forth.asm):02977 (3)             jmp     PUTCH           Extra space after printing a number
                      (        forth.asm):02978         
F522 02               (        forth.asm):02979         UDOT    fcb     2               79-STANDARD (REQ106)
F523 552E             (        forth.asm):02980                 fcc     'U.'
F525 F502             (        forth.asm):02981                 fdb     DOT
F527 C7               (        forth.asm):02982                 RFCS
F528 0F2C             (        forth.asm):02983 (5)             clr     CVISSGN         Conversion is unsigned
F52A 20DF             (        forth.asm):02984 (3)             bra     ptop0
                      (        forth.asm):02985         
F52C 02               (        forth.asm):02986         DOTR    fcb     2               79-STANDARD (REF)
F52D 2E52             (        forth.asm):02987                 fcc     '.R'
F52F F522             (        forth.asm):02988                 fdb     UDOT
F531 C7               (        forth.asm):02989                 RFCS
F532 8601             (        forth.asm):02990 (2)             lda     #1
F534 972C             (        forth.asm):02991 (3)             sta     CVISSGN
F536 BDE698           (        forth.asm):02992 (7)     DOTR0   jsr     NPOP
F539 3410             (        forth.asm):02993 (4+2)           pshs    x               Length parameter value
F53B BDE698           (        forth.asm):02994 (7)             jsr     NPOP
F53E BDE30F           (        forth.asm):02995 (7)             jsr     CVNSTR
F541 8E039A           (        forth.asm):02996 (3)             ldx     #TBUFF
F544 8620             (        forth.asm):02997 (2)             lda     #SP
F546 A180             (        forth.asm):02998 (4+1)   @dotr1  cmpa    ,x+
F548 27FC             (        forth.asm):02999 (3)             beq     @dotr1          Skip leading spaces
F54A 301F             (        forth.asm):03000 (4+1)           leax    -1,x
F54C BDE1A5           (        forth.asm):03001 (7)             jsr     SLEN            String length is returned in W
F54F 3506             (        forth.asm):03002 (4+2)           puls    d
F551 1E06             (        forth.asm):03003 (5)             exg     d,w
F553 103206           (        forth.asm):03004 (4)             subr    d,w
F556 2F0D             (        forth.asm):03005 (3)             ble     @dotr3
F558 8620             (        forth.asm):03006 (2)             lda     #SP
F55A 105D             (        forth.asm):03007 (2)     @dotr2  tstw
F55C 2707             (        forth.asm):03008 (3)             beq     @dotr3
F55E BDE1B4           (        forth.asm):03009 (7)             jsr     PUTCH
F561 105A             (        forth.asm):03010 (2)             decw
F563 20F5             (        forth.asm):03011 (3)             bra     @dotr2
F565 7EE1D8           (        forth.asm):03012 (3)     @dotr3  jmp     PUTS
                      (        forth.asm):03013         
F568 03               (        forth.asm):03014         UDOTR   fcb     3               79-STANDARD (REF216)
F569 552E52           (        forth.asm):03015                 fcc     'U.R'
F56C F52C             (        forth.asm):03016                 fdb     DOTR
F56E C7               (        forth.asm):03017                 RFCS
F56F 0F2C             (        forth.asm):03018 (5)             clr     CVISSGN
F571 20C3             (        forth.asm):03019 (3)             bra     DOTR0
                      (        forth.asm):03020         
F573 02               (        forth.asm):03021         BL      fcb     2               79-STANDARD (REF176)
F574 424C             (        forth.asm):03022                 fcc     'BL'
F576 F568             (        forth.asm):03023                 fdb     UDOTR
F578 C7               (        forth.asm):03024                 RFCS
F579 8E0020           (        forth.asm):03025 (3)             ldx     #SP
F57C 7EE68A           (        forth.asm):03026 (3)             jmp     NPUSH
                      (        forth.asm):03027         
F57F 05               (        forth.asm):03028         SPACE   fcb     5               79-STANDARD (REQ232)
F580 5350414345       (        forth.asm):03029                 fcc     'SPACE'
F585 F573             (        forth.asm):03030                 fdb     BL
F587 C7               (        forth.asm):03031                 RFCS
F588 8620             (        forth.asm):03032 (2)             lda     #SP
F58A 7EE1B4           (        forth.asm):03033 (3)             jmp     PUTCH
                      (        forth.asm):03034         
F58D 06               (        forth.asm):03035         SPACES  fcb     6               79-STANDARD (REQ231)
F58E 535041434553     (        forth.asm):03036                 fcc     'SPACES'
F594 F57F             (        forth.asm):03037                 fdb     SPACE
F596 C7               (        forth.asm):03038                 RFCS
F597 BDE698           (        forth.asm):03039 (7)             jsr     NPOP
F59A 1F16             (        forth.asm):03040 (4)             tfr     x,w
F59C 8620             (        forth.asm):03041 (2)             lda     #SP
F59E BDE1B4           (        forth.asm):03042 (7)     @spcs1  jsr     PUTCH
F5A1 105A             (        forth.asm):03043 (2)             decw
F5A3 26F9             (        forth.asm):03044 (3)             bne     @spcs1
F5A5 39               (        forth.asm):03045 (4)             rts
                      (        forth.asm):03046         
F5A6 04               (        forth.asm):03047         PAGE    fcb     4               79-STANDARD (REF)
F5A7 50414745         (        forth.asm):03048                 fcc     'PAGE'
F5AB F58D             (        forth.asm):03049                 fdb     SPACES
F5AD C7               (        forth.asm):03050                 RFCS
F5AE 860C             (        forth.asm):03051 (2)             lda     #FF
F5B0 7EE1B4           (        forth.asm):03052 (3)             jmp     PUTCH
                      (        forth.asm):03053         
F5B3 02               (        forth.asm):03054         CRLF    fcb     2               79-STANDARD (REQ160)
F5B4 4352             (        forth.asm):03055                 fcc     'CR'
F5B6 F5A6             (        forth.asm):03056                 fdb     PAGE
F5B8 C7               (        forth.asm):03057                 RFCS
F5B9 7EE1E5           (        forth.asm):03058 (3)             jmp     PUTCR
                      (        forth.asm):03059         
F5BC 03               (        forth.asm):03060         PAD     fcb     3               79-STANDARD (REQ226)
F5BD 504144           (        forth.asm):03061                 fcc     'PAD'
F5C0 F5B3             (        forth.asm):03062                 fdb     CRLF
F5C2 C7               (        forth.asm):03063                 RFCS
F5C3 8E0134           (        forth.asm):03064 (3)             ldx     #PADBUF
F5C6 7EE68A           (        forth.asm):03065 (3)             jmp     NPUSH
                      (        forth.asm):03066         
F5C9 04               (        forth.asm):03067         TYPE    fcb     4               79-STANDARD (REQ222)
F5CA 54595045         (        forth.asm):03068                 fcc     'TYPE'          ( addr bcount -- )
F5CE F5BC             (        forth.asm):03069                 fdb     PAD
F5D0 C7               (        forth.asm):03070                 RFCS
F5D1 BDE698           (        forth.asm):03071 (7)             jsr     NPOP            Character count (signed)
F5D4 1F16             (        forth.asm):03072 (4)             tfr     x,w
F5D6 BDE698           (        forth.asm):03073 (7)             jsr     NPOP            Buffer address
F5D9 105D             (        forth.asm):03074 (2)             tstw                    
F5DB 2E01             (        forth.asm):03075 (3)     @type0  bgt     @type1
F5DD 39               (        forth.asm):03076 (4)             rts
F5DE A680             (        forth.asm):03077 (4+1)   @type1  lda     ,x+
F5E0 BDE1B4           (        forth.asm):03078 (7)             jsr     PUTCH
F5E3 105A             (        forth.asm):03079 (2)             decw
F5E5 20F4             (        forth.asm):03080 (3)             bra     @type0
                      (        forth.asm):03081         
F5E7 05               (        forth.asm):03082         COUNT   fcb     5               79-STANDARD (REQ159)
F5E8 434F554E54       (        forth.asm):03083                 fcc     'COUNT'
F5ED F5C9             (        forth.asm):03084                 fdb     TYPE
F5EF C7               (        forth.asm):03085                 RFCS
F5F0 BDE698           (        forth.asm):03086 (7)             jsr     NPOP
F5F3 E680             (        forth.asm):03087 (4+1)           ldb     ,x+
F5F5 3610             (        forth.asm):03088                 UCNPUSH                 B is preserved
F5F7 4F               (        forth.asm):03089 (1)             clra
F5F8 1F01             (        forth.asm):03090 (4)             tfr     d,x
F5FA 7EE68A           (        forth.asm):03091 (3)             jmp     NPUSH
                      (        forth.asm):03092         
F5FD 09               (        forth.asm):03093         DASHTR  fcb     9               79-STANDARD (REQ148)
F5FE 2D545241494C494E (        forth.asm):03094                 fcc     '-TRAILING'     ( addr n1 -- addr n2 )
     47
F607 F5E7             (        forth.asm):03095                 fdb     COUNT
F609 C7               (        forth.asm):03096                 RFCS
F60A BDE698           (        forth.asm):03097 (7)             jsr     NPOP            N1 to X
F60D 1F10             (        forth.asm):03098 (4)             tfr     x,d             N1 to D
F60F BDE698           (        forth.asm):03099 (7)             jsr     NPOP            ADDR to X
F612 1F12             (        forth.asm):03100 (4)             tfr     x,y             Backup to I
F614 104D             (        forth.asm):03101 (2)             tstd                    Input character count (N1)
F616 2D1B             (        forth.asm):03102 (3)             blt     @invpar         Cannot be < 0
F618 308B             (        forth.asm):03103 (4+2)           leax    d,x             X has ADDR+N1
F61A 1F06             (        forth.asm):03104 (4)             tfr     d,w             W has N1
F61C 105D             (        forth.asm):03105 (2)     @cknxtb tstw
F61E 270A             (        forth.asm):03106 (3)             beq     @ckdone
F620 A682             (        forth.asm):03107 (4+1)           lda     ,-x
F622 105A             (        forth.asm):03108 (2)             decw
F624 8120             (        forth.asm):03109 (2)             cmpa    #SP
F626 27F4             (        forth.asm):03110 (3)             beq     @cknxtb         Iterate over to the previous byte
F628 105C             (        forth.asm):03111 (2)             incw
F62A 1F21             (        forth.asm):03112 (4)     @ckdone tfr     y,x
F62C 3610             (        forth.asm):03113                 UCNPUSH                 String base address
F62E 1F61             (        forth.asm):03114 (4)             tfr     w,x
F630 3610             (        forth.asm):03115                 UCNPUSH                 Updated character count
F632 39               (        forth.asm):03116 (4)             rts
F633 C60D             (        forth.asm):03117 (2)     @invpar ldb     #13             Invalid parameter
F635 BDE611           (        forth.asm):03118 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):03119         
F638 06               (        forth.asm):03120         EXPECT  fcb     6               79-STANDARD (REQ189)
F639 455850454354     (        forth.asm):03121                 fcc     'EXPECT'        ( addr count -- )
F63F F5FD             (        forth.asm):03122                 fdb     DASHTR
F641 C7               (        forth.asm):03123                 RFCS
F642 BDE698           (        forth.asm):03124 (7)             jsr     NPOP
F645 1F10             (        forth.asm):03125 (4)             tfr     x,d             Buffer length to B
F647 BDE698           (        forth.asm):03126 (7)             jsr     NPOP            Buffer address to X. B is preserved
F64A 5D               (        forth.asm):03127 (1)             tstb
F64B 2701             (        forth.asm):03128 (3)             beq     @expct1
F64D 5C               (        forth.asm):03129 (1)             incb                    Account for the NUL terminator
F64E 7EE1FB           (        forth.asm):03130 (3)     @expct1 jmp     GETS
                      (        forth.asm):03131         
F651 49               (        forth.asm):03132         TERPRET fcb     $49             79-STANDARD (REF) I make this compile time only
F652 494E544552505245 (        forth.asm):03133                 fcc     'INTERPRET'     ( -- )
     54
F65B F638             (        forth.asm):03134                 fdb     EXPECT
F65D C7               (        forth.asm):03135                 RFCS
                      (        forth.asm):03136         * Obtain a base buffer address based on the value of BLK.
F65E DC1E             (        forth.asm):03137 (4)             ldd     UBLK
F660 2605             (        forth.asm):03138 (3)             bne     @notser
F662 8E02C6           (        forth.asm):03139 (3)             ldx     #CMDBUF         Base buffer address for serial line input
F665 200B             (        forth.asm):03140 (3)             bra     @gocmd
                      (        forth.asm):03141         * BLK is NZ, map the block in memory.
F667 1F01             (        forth.asm):03142 (4)     @notser tfr     d,x             Block number to X
F669 BDE68A           (        forth.asm):03143 (7)             jsr     NPUSH
F66C BDE905           (        forth.asm):03144                 RFXT    jsr,BLOCK+8     XT for BLOCK. Map the block in
F66F BDE698           (        forth.asm):03145 (7)             jsr     NPOP            Retrieve buffer address
                      (        forth.asm):03146         * Note: >IN is supposed to have been set by the caller!
F672 9F22             (        forth.asm):03147 (4)     @gocmd  stx     BSBFADR
F674 7EE0B6           (        forth.asm):03148 (3)             jmp     _INTERP         Finally invoke _INTERP.
                      (        forth.asm):03149         
F677 04               (        forth.asm):03150         LOAD    fcb     4               79-STANDARD (REQ202)
F678 4C4F4144         (        forth.asm):03151                 fcc     'LOAD'          ( blk -- )
F67C F651             (        forth.asm):03152                 fdb     TERPRET
F67E C7               (        forth.asm):03153                 RFCS
F67F BDE698           (        forth.asm):03154 (7)             jsr     NPOP
F682 1037C1           (        forth.asm):03155 (4)             cmpr    0,x
F685 2601             (        forth.asm):03156 (3)             bne     @ctnued
F687 39               (        forth.asm):03157 (4)             rts                     Block 0 is _not_ loadable
F688 3410             (        forth.asm):03158 (4+2)   @ctnued pshs    x
F68A 9E1E             (        forth.asm):03159 (4)             ldx     UBLK
F68C BDE6A7           (        forth.asm):03160 (7)             jsr     RPUSH           Push BLK on the return stack
F68F 9E1C             (        forth.asm):03161 (4)             ldx     UTOIN
F691 BDE6A7           (        forth.asm):03162 (7)             jsr     RPUSH           Push >IN on the return stack
F694 3510             (        forth.asm):03163 (4+2)           puls    x
F696 9F1E             (        forth.asm):03164 (4)             stx     UBLK            Update BLK with the LOAD argument
F698 104F             (        forth.asm):03165 (2)             clrd
F69A DD1C             (        forth.asm):03166 (4)             std     UTOIN           Clear >IN
                      (        forth.asm):03167         * Map the new BLK in, interpret code from there.
F69C 8DC0             (        forth.asm):03168                 RFXT    bsr,TERPRET+12  XT for INTERPRET
F69E BDE6C5           (        forth.asm):03169 (7)             jsr     RPOP
F6A1 9F1C             (        forth.asm):03170 (4)             stx     UTOIN           Restore >IN from the return stack
F6A3 BDE6C5           (        forth.asm):03171 (7)             jsr     RPOP
F6A6 9F1E             (        forth.asm):03172 (4)             stx     UBLK            Restore BLK from the return stack
F6A8 7EE6DE           (        forth.asm):03173 (3)             jmp     BLK2BB          Update BSBFADR based on the new BLK value
                      (        forth.asm):03174         
F6AB 04               (        forth.asm):03175         THRU    fcb     4               79-STANDARD (REF)
F6AC 54485255         (        forth.asm):03176                 fcc     'THRU'          ( lowblk highblk -- )
F6B0 F677             (        forth.asm):03177                 fdb     LOAD
F6B2 C7               (        forth.asm):03178                 RFCS
F6B3 BDE698           (        forth.asm):03179 (7)             jsr     NPOP
F6B6 1F12             (        forth.asm):03180 (4)             tfr     x,y             Y has highblk
F6B8 BDE698           (        forth.asm):03181 (7)             jsr     NPOP            X has lowblk -- both are unsigned numbers
F6BB 103721           (        forth.asm):03182 (4)     @thrlop cmpr    y,x
F6BE 2301             (        forth.asm):03183 (3)             bls     @cont
F6C0 39               (        forth.asm):03184 (4)             rts
F6C1 3610             (        forth.asm):03185         @cont   UCNPUSH
F6C3 3410             (        forth.asm):03186 (4+2)           pshs    x
F6C5 8DB8             (        forth.asm):03187                 RFXT    bsr,LOAD+7      XT for LOAD
F6C7 3510             (        forth.asm):03188 (4+2)           puls    x
F6C9 3001             (        forth.asm):03189 (4+1)           leax    1,x
F6CB 20EE             (        forth.asm):03190 (3)             bra     @thrlop
                      (        forth.asm):03191         
F6CD 83               (        forth.asm):03192         NXTBLK  fcb     $83             79-STANDARD (REF131)
F6CE 2D2D3E           (        forth.asm):03193                 fcc     '-->'           ( -- )
F6D1 F6AB             (        forth.asm):03194                 fdb     THRU
F6D3 C7               (        forth.asm):03195                 RFCS
F6D4 9E1E             (        forth.asm):03196 (4)             ldx     UBLK
F6D6 3001             (        forth.asm):03197 (4+1)           leax    1,x
F6D8 DC1E             (        forth.asm):03198 (4)     NXTBLK1 ldd     UBLK
F6DA 2603             (        forth.asm):03199 (3)             bne     @nfrmb0         Not invoked from block 0 (the console)
                      (        forth.asm):03200         * --> or CONTINUED are being invoked from the console. Flag that condition
                      (        forth.asm):03201         * as a hint to the interpreter so that feedback is provided even if we are
                      (        forth.asm):03202         * back from a block.
F6DC 4C               (        forth.asm):03203 (1)             inca                    1 to A
F6DD 9730             (        forth.asm):03204 (3)             sta     NBCTFB0
F6DF 9F1E             (        forth.asm):03205 (4)     @nfrmb0 stx     UBLK            Update BLK
F6E1 104F             (        forth.asm):03206 (2)             clrd
F6E3 DD1C             (        forth.asm):03207 (4)             std     UTOIN           0 >IN !
                      (        forth.asm):03208         * Map the new BLK in, interpret code from there.
F6E5 7EF65E           (        forth.asm):03209                 RFXT    jmp,TERPRET+12  XT for INTERPRET
                      (        forth.asm):03210         
F6E8 89               (        forth.asm):03211         CONTIND fcb     $89             79-STANDARD (REF)
F6E9 434F4E54494E5545 (        forth.asm):03212                 fcc     'CONTINUED'     ( nextblk -- )
     44
F6F2 F6CD             (        forth.asm):03213                 fdb     NXTBLK
F6F4 C7               (        forth.asm):03214                 RFCS
F6F5 BDE698           (        forth.asm):03215 (7)             jsr     NPOP            NEXTBLK to X
F6F8 1037C1           (        forth.asm):03216 (4)             cmpr    0,x             Cannot interpret from block 0!
F6FB 26DB             (        forth.asm):03217 (3)             bne     NXTBLK1
F6FD C60D             (        forth.asm):03218 (2)             ldb     #13             Illegal argument
F6FF BDE611           (        forth.asm):03219 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):03220         
F702 02               (        forth.asm):03221         MILLIS  fcb     2               79-STANDARD (REF)
F703 4D53             (        forth.asm):03222                 fcc     'MS'            ( mscount -- )
F705 F6E8             (        forth.asm):03223                 fdb     CONTIND
F707 C7               (        forth.asm):03224                 RFCS
F708 BDE698           (        forth.asm):03225 (7)             jsr     NPOP
F70B 1037C1           (        forth.asm):03226 (4)             cmpr    0,x
F70E 2601             (        forth.asm):03227 (3)             bne     MILLIS1
F710 39               (        forth.asm):03228 (4)             rts
F711 CC03E2           (        forth.asm):03229 (3)     MILLIS1 ldd     #MSLCNT
F714 104A             (        forth.asm):03230 (2)     @ms2    decd
F716 26FC             (        forth.asm):03231 (3)             bne     @ms2
F718 301F             (        forth.asm):03232 (4+1)           leax    -1,x
F71A 26F5             (        forth.asm):03233 (3)             bne     MILLIS1
F71C 39               (        forth.asm):03234 (4)             rts
                      (        forth.asm):03235         
F71D 04               (        forth.asm):03236         KEYP    fcb     4               ANSI (Facility)
F71E 4B45593F         (        forth.asm):03237                 fcc     'KEY?'          ( -- flag )
F722 F702             (        forth.asm):03238                 fdb     MILLIS
F724 C7               (        forth.asm):03239                 RFCS
F725 1FC1             (        forth.asm):03240 (4)             tfr     0,x
F727 8615             (        forth.asm):03241 (2)             lda     #ACIRTS0
F729 B7D800           (        forth.asm):03242 (4)             sta     ACIACTL
F72C 8601             (        forth.asm):03243 (2)             lda     #ACIRDRF
F72E B5D800           (        forth.asm):03244 (4)             bita    ACIACTL
F731 2702             (        forth.asm):03245 (3)             beq     @keyp1
F733 3001             (        forth.asm):03246 (4+1)           leax    1,x
F735 8655             (        forth.asm):03247 (2)     @keyp1  lda     #ACIRTS1
F737 B7D800           (        forth.asm):03248 (4)             sta     ACIACTL
F73A 7EE68A           (        forth.asm):03249 (3)             jmp     NPUSH
                      (        forth.asm):03250         
F73D 03               (        forth.asm):03251         KEY     fcb     3               79-STANDARD (REQ100)
F73E 4B4559           (        forth.asm):03252                 fcc     'KEY'
F741 F71D             (        forth.asm):03253                 fdb     KEYP
F743 C7               (        forth.asm):03254                 RFCS
F744 BDE1C3           (        forth.asm):03255 (7)             jsr     GETCH
F747 1F89             (        forth.asm):03256 (4)             tfr     a,b
F749 4F               (        forth.asm):03257 (1)             clra
F74A 1F01             (        forth.asm):03258 (4)             tfr     d,x
F74C 7EE68A           (        forth.asm):03259 (3)             jmp     NPUSH
                      (        forth.asm):03260         
F74F 04               (        forth.asm):03261         EMIT    fcb     4               79-STANDARD (REQ207)
F750 454D4954         (        forth.asm):03262                 fcc     'EMIT'
F754 F73D             (        forth.asm):03263                 fdb     KEY
F756 C7               (        forth.asm):03264                 RFCS
F757 BDE698           (        forth.asm):03265 (7)             jsr     NPOP
F75A 1F10             (        forth.asm):03266 (4)             tfr     x,d
F75C 1F98             (        forth.asm):03267 (4)             tfr     b,a
F75E 7EE1B4           (        forth.asm):03268 (3)             jmp     PUTCH
                      (        forth.asm):03269         
F761 01               (        forth.asm):03270         PLUS    fcb     1               79-STANDARD (REQ121)
F762 2B               (        forth.asm):03271                 fcc     '+'             ( n1 n2 -- sum )
F763 F74F             (        forth.asm):03272                 fdb     EMIT
F765 C7               (        forth.asm):03273                 RFCS
F766 CC0242BDE304     (        forth.asm):03274                 MINDREQ 2               We need at least two cells stacked up
F76C EC42             (        forth.asm):03275 (5+1)           ldd     2,u             N1
F76E E3C4             (        forth.asm):03276 (5+0)           addd    ,u              N2
F770 ED42             (        forth.asm):03277 (5+1)           std     2,u             SUM
F772 3342             (        forth.asm):03278 (4+1)           leau    2,u             Drop the top cell
F774 39               (        forth.asm):03279 (4)             rts
                      (        forth.asm):03280         
F775 02               (        forth.asm):03281         ONEP    fcb     2               79-STANDARD (REQ107)
F776 312B             (        forth.asm):03282                 fcc     '1+'
F778 F761             (        forth.asm):03283                 fdb     PLUS
F77A C7               (        forth.asm):03284                 RFCS
F77B CC0244BDE304     (        forth.asm):03285                 MINDREQ 1               We need at least one cell stacked up
F781 ECC4             (        forth.asm):03286 (5+0)           ldd     ,u
F783 104C             (        forth.asm):03287 (2)             incd
F785 EDC4             (        forth.asm):03288 (5+0)           std     ,u
F787 39               (        forth.asm):03289 (4)             rts
                      (        forth.asm):03290         
F788 02               (        forth.asm):03291         TWOP    fcb     2               79-STANDARD (REQ135)
F789 322B             (        forth.asm):03292                 fcc     '2+'            ( n -- n+2 )
F78B F775             (        forth.asm):03293                 fdb     ONEP
F78D C7               (        forth.asm):03294                 RFCS
F78E CC0244BDE304     (        forth.asm):03295                 MINDREQ 1
F794 ECC4             (        forth.asm):03296 (5+0)           ldd     ,u
F796 C30002           (        forth.asm):03297 (3)             addd    #2
F799 EDC4             (        forth.asm):03298 (5+0)           std     ,u
F79B 39               (        forth.asm):03299 (4)             rts
                      (        forth.asm):03300         
F79C 01               (        forth.asm):03301         MINUS   fcb     1               79-STANDARD (REQ134)
F79D 2D               (        forth.asm):03302                 fcc     '-'             ( n1 n2 -- dif )
F79E F788             (        forth.asm):03303                 fdb     TWOP
F7A0 C7               (        forth.asm):03304                 RFCS
F7A1 CC0242BDE304     (        forth.asm):03305                 MINDREQ 2               We need at least two cells stacked up
F7A7 EC42             (        forth.asm):03306 (5+1)           ldd     2,u             N1
F7A9 A3C4             (        forth.asm):03307 (5+0)           subd    ,u              N2
F7AB ED42             (        forth.asm):03308 (5+1)           std     2,u             DIF
F7AD 3342             (        forth.asm):03309 (4+1)           leau    2,u             Drop the top cell
F7AF 39               (        forth.asm):03310 (4)             rts
                      (        forth.asm):03311         
F7B0 02               (        forth.asm):03312         ONEM    fcb     2               79-STANDARD (REQ105)
F7B1 312D             (        forth.asm):03313                 fcc     '1-'
F7B3 F79C             (        forth.asm):03314                 fdb     MINUS
F7B5 C7               (        forth.asm):03315                 RFCS
F7B6 CC0244BDE304     (        forth.asm):03316                 MINDREQ 1               We need at least one cell stacked up
F7BC ECC4             (        forth.asm):03317 (5+0)           ldd     ,u
F7BE 104A             (        forth.asm):03318 (2)             decd
F7C0 EDC4             (        forth.asm):03319 (5+0)           std     ,u
F7C2 39               (        forth.asm):03320 (4)             rts
                      (        forth.asm):03321         
F7C3 02               (        forth.asm):03322         TWOM    fcb     2               79-STANDARD (REQ129)
F7C4 322D             (        forth.asm):03323                 fcc     '2-'
F7C6 F7B0             (        forth.asm):03324                 fdb     ONEM
F7C8 C7               (        forth.asm):03325                 RFCS
F7C9 CC0244BDE304     (        forth.asm):03326                 MINDREQ 1               We need at least one cell stacked up
F7CF ECC4             (        forth.asm):03327 (5+0)           ldd     ,u
F7D1 830002           (        forth.asm):03328 (3)             subd    #2
F7D4 EDC4             (        forth.asm):03329 (5+0)           std     ,u
F7D6 39               (        forth.asm):03330 (4)             rts
                      (        forth.asm):03331         
F7D7 01               (        forth.asm):03332         ZEROL   fcb     1               Non-standard
F7D8 30               (        forth.asm):03333                 fcc     '0'
F7D9 F7C3             (        forth.asm):03334                 fdb     TWOM
F7DB C7               (        forth.asm):03335                 RFCS
F7DC 1FC1             (        forth.asm):03336 (4)             tfr     0,x
F7DE 7EE68A           (        forth.asm):03337 (3)             jmp     NPUSH
                      (        forth.asm):03338         
F7E1 01               (        forth.asm):03339         ONEL    fcb     1               Non-standard
F7E2 31               (        forth.asm):03340                 fcc     '1'
F7E3 F7D7             (        forth.asm):03341                 fdb     ZEROL
F7E5 C7               (        forth.asm):03342                 RFCS
F7E6 8E0001           (        forth.asm):03343 (3)             ldx     #1
F7E9 7EE68A           (        forth.asm):03344 (3)             jmp     NPUSH
                      (        forth.asm):03345         
F7EC 01               (        forth.asm):03346         TWOL    fcb     1               Non-standard
F7ED 32               (        forth.asm):03347                 fcc     '2'
F7EE F7E1             (        forth.asm):03348                 fdb     ONEL
F7F0 C7               (        forth.asm):03349                 RFCS
F7F1 8E0002           (        forth.asm):03350 (3)             ldx     #2
F7F4 7EE68A           (        forth.asm):03351 (3)             jmp     NPUSH
                      (        forth.asm):03352         
F7F7 05               (        forth.asm):03353         SHIFT   fcb     5               79-STANDARD (Ref)
F7F8 5348494654       (        forth.asm):03354                 fcc     'SHIFT'
F7FD F7EC             (        forth.asm):03355                 fdb     TWOL
F7FF C7               (        forth.asm):03356                 RFCS
F800 CC0242BDE304     (        forth.asm):03357                 MINDREQ 2               Two cells need to be stacked up
F806 10A6C4           (        forth.asm):03358 (6+0)           ldw     ,u              Shift bitcount
F809 EC42             (        forth.asm):03359 (5+1)           ldd     2,u             The data itself
F80B 105D             (        forth.asm):03360 (2)     @shftlp tstw
F80D 270E             (        forth.asm):03361 (3)             beq     @shfdon
F80F 2D06             (        forth.asm):03362 (3)             blt     @shftrg
F811 1048             (        forth.asm):03363 (2)             lsld                    Shift left (W is positive)
F813 105A             (        forth.asm):03364 (2)             decw
F815 20F4             (        forth.asm):03365 (3)             bra     @shftlp
F817 1044             (        forth.asm):03366 (2)     @shftrg lsrd                    Shift right (W is negative)
F819 105C             (        forth.asm):03367 (2)             incw
F81B 20EE             (        forth.asm):03368 (3)             bra     @shftlp
F81D ED42             (        forth.asm):03369 (5+1)   @shfdon std     2,u             Return value stored there
F81F 3342             (        forth.asm):03370 (4+1)           leau    2,u             Drop one cell from the data stack
F821 39               (        forth.asm):03371 (4)             rts
                      (        forth.asm):03372         
                      (        forth.asm):03373         * Signed multiplication by hardware support.
F822 01               (        forth.asm):03374         MULT    fcb     1               79-STANDARD (REQ138)
F823 2A               (        forth.asm):03375                 fcc     '*'
F824 F7F7             (        forth.asm):03376                 fdb     SHIFT
F826 C7               (        forth.asm):03377                 RFCS
F827 CC0242BDE304     (        forth.asm):03378                 MINDREQ 2               Two cells need to be stacked up
F82D EC42             (        forth.asm):03379 (5+1)           ldd     2,u
F82F 11AFC4           (        forth.asm):03380 (30+0)          muld    ,u
F832 10A742           (        forth.asm):03381 (6+1)           stw     2,u             Return only the lower 16 bits
F835 3342             (        forth.asm):03382 (4+1)           leau    2,u             Drop one cell from the data stack
F837 39               (        forth.asm):03383 (4)             rts
                      (        forth.asm):03384         
F838 02               (        forth.asm):03385         TWOTIM  fcb     2               79-STANDARD (REF)
F839 322A             (        forth.asm):03386                 fcc     '2*'
F83B F822             (        forth.asm):03387                 fdb     MULT
F83D C7               (        forth.asm):03388                 RFCS
F83E CC0244BDE304     (        forth.asm):03389                 MINDREQ 1               One cell needs to be stacked up
F844 ECC4             (        forth.asm):03390 (5+0)           ldd     ,u
F846 1048             (        forth.asm):03391 (2)             asld
F848 EDC4             (        forth.asm):03392 (5+0)           std     ,u
F84A 39               (        forth.asm):03393 (4)             rts
                      (        forth.asm):03394         
F84B 02               (        forth.asm):03395         TWODIV  fcb     2
F84C 322F             (        forth.asm):03396                 fcc     '2/'
F84E F838             (        forth.asm):03397                 fdb     TWOTIM
F850 C7               (        forth.asm):03398                 RFCS
F851 CC0244BDE304     (        forth.asm):03399                 MINDREQ 1               One cell needs to be stacked up
F857 ECC4             (        forth.asm):03400 (5+0)           ldd     ,u
F859 1047             (        forth.asm):03401 (2)             asrd
F85B EDC4             (        forth.asm):03402 (5+0)           std     ,u
F85D 39               (        forth.asm):03403 (4)             rts
                      (        forth.asm):03404         
                      (        forth.asm):03405         * /, MOD and /MOD are essentially the same function returning
                      (        forth.asm):03406         * the different parts returned by DIVQ.
                      (        forth.asm):03407         * We use a global variable to distinguish which functionality
                      (        forth.asm):03408         * is being requested:
                      (        forth.asm):03409         * 0: return the modulo and the quotient (/MOD).
                      (        forth.asm):03410         * 1: return the modulo only (MOD).
                      (        forth.asm):03411         * 2: return the quotient only (/).
F85E 01               (        forth.asm):03412         DIV     fcb     1
F85F 2F               (        forth.asm):03413                 fcc     '/'
F860 F84B             (        forth.asm):03414                 fdb     TWODIV
F862 C7               (        forth.asm):03415                 RFCS
F863 8602             (        forth.asm):03416 (2)             lda     #2
F865 9728             (        forth.asm):03417 (3)             sta     DIVFCN
F867 CC0242BDE304     (        forth.asm):03418         DIV1    MINDREQ 2
                      (        forth.asm):03419         * Division by zero conditions are dealt with through the trap handler.
F86D 104F             (        forth.asm):03420 (2)             clrd
F86F 10A642           (        forth.asm):03421 (6+1)           ldw     2,u             Numerator
                      (        forth.asm):03422         * We need a sign extention from W to Q. SEX and SEXW do not cut it.
F872 114D             (        forth.asm):03423 (2)             tste
F874 2A02             (        forth.asm):03424 (3)             bpl     @div2
F876 1043             (        forth.asm):03425 (2)             comd
F878 11AEC4           (        forth.asm):03426 (36)    @div2   divq    ,u              Quotient is returned in W, modulo in D
F87B 0D28             (        forth.asm):03427 (4)             tst     DIVFCN
F87D 2606             (        forth.asm):03428 (3)             bne     @div3
F87F ED42             (        forth.asm):03429 (5+1)           std     2,u             Function 0: return the modulo and the quotient
F881 10A7C4           (        forth.asm):03430 (6+0)           stw     ,u
F884 39               (        forth.asm):03431 (4)             rts
F885 3342             (        forth.asm):03432 (4+1)   @div3   leau    2,u             Drop one cell from the data stack
F887 11D628           (        forth.asm):03433 (4)             ldf     DIVFCN
F88A 11C101           (        forth.asm):03434 (3)             cmpf    #1
F88D 2603             (        forth.asm):03435 (3)             bne     @div4
F88F EDC4             (        forth.asm):03436 (5+0)           std     ,u              Function 1: return only the modulo
F891 39               (        forth.asm):03437 (4)             rts
F892 10A7C4           (        forth.asm):03438 (6+0)   @div4   stw     ,u              Function 2: return only the quotient
F895 39               (        forth.asm):03439 (4)             rts
                      (        forth.asm):03440         
F896 03               (        forth.asm):03441         MOD     fcb     3
F897 4D4F44           (        forth.asm):03442                 fcc     'MOD'
F89A F85E             (        forth.asm):03443                 fdb     DIV
F89C C7               (        forth.asm):03444                 RFCS
F89D 8601             (        forth.asm):03445 (2)             lda     #1
F89F 9728             (        forth.asm):03446 (3)             sta     DIVFCN
F8A1 20C4             (        forth.asm):03447 (3)             bra     DIV1
                      (        forth.asm):03448         
F8A3 04               (        forth.asm):03449         MDIV    fcb     4
F8A4 2F4D4F44         (        forth.asm):03450                 fcc     '/MOD'
F8A8 F896             (        forth.asm):03451                 fdb     MOD
F8AA C7               (        forth.asm):03452                 RFCS
F8AB 0F28             (        forth.asm):03453 (5)             clr     DIVFCN
F8AD 20B8             (        forth.asm):03454 (3)             bra     DIV1
                      (        forth.asm):03455         
F8AF 02               (        forth.asm):03456         STRSLSH fcb     2
F8B0 2A2F             (        forth.asm):03457                 fcc     '*/'            ( n1 n2 n3 -- n4 [n5] )
F8B2 F8A3             (        forth.asm):03458                 fdb     MDIV
F8B4 C7               (        forth.asm):03459                 RFCS
F8B5 8601             (        forth.asm):03460 (2)             lda     #1
F8B7 9729             (        forth.asm):03461 (3)             sta     STSLFCN
F8B9 CC0240BDE304     (        forth.asm):03462         STRSL1  MINDREQ 3
                      (        forth.asm):03463         * Division by zero conditions are dealt with through the trap handler.
F8BF EC44             (        forth.asm):03464 (5+1)           ldd     4,u             N1
F8C1 11AF42           (        forth.asm):03465 (30+1)          muld    2,u             N2
F8C4 11AEC4           (        forth.asm):03466 (36)            divq    ,u              N3
F8C7 3342             (        forth.asm):03467 (4+1)           leau    2,u
F8C9 0D29             (        forth.asm):03468 (4)             tst     STSLFCN
F8CB 2606             (        forth.asm):03469 (3)             bne     @strsl2         Just the quotient, Ma'am!
F8CD ED42             (        forth.asm):03470 (5+1)           std     2,u             N4: the modulo
F8CF 10A7C4           (        forth.asm):03471 (6+0)           stw     ,u              N5: the quotient
F8D2 39               (        forth.asm):03472 (4)             rts
F8D3 3342             (        forth.asm):03473 (4+1)   @strsl2 leau    2,u
F8D5 10A7C4           (        forth.asm):03474 (6+0)           stw     ,u              N4
F8D8 39               (        forth.asm):03475 (4)             rts
                      (        forth.asm):03476         
F8D9 05               (        forth.asm):03477         STRSLMD fcb     5
F8DA 2A2F4D4F44       (        forth.asm):03478                 fcc     '*/MOD'
F8DF F8AF             (        forth.asm):03479                 fdb     STRSLSH
F8E1 C7               (        forth.asm):03480                 RFCS
F8E2 0F29             (        forth.asm):03481 (5)             clr     STSLFCN
F8E4 20D3             (        forth.asm):03482 (3)             bra     STRSL1
                      (        forth.asm):03483         
                      (        forth.asm):03484         * Returns the current value of the S register (informational only).
F8E6 01               (        forth.asm):03485         SYSSTK  fcb     1               Non-standard
F8E7 53               (        forth.asm):03486                 fcc     'S'
F8E8 F8D9             (        forth.asm):03487                 fdb     STRSLMD
F8EA C7               (        forth.asm):03488                 RFCS
F8EB 1F41             (        forth.asm):03489 (4)             tfr     s,x
F8ED 7EE68A           (        forth.asm):03490 (3)             jmp     NPUSH
                      (        forth.asm):03491         
F8F0 05               (        forth.asm):03492         WORDS   fcb     5               ANSI (Tools)
F8F1 574F524453       (        forth.asm):03493                 fcc     'WORDS'         ( -- )
F8F6 F8E6             (        forth.asm):03494                 fdb     SYSSTK
F8F8 C7               (        forth.asm):03495                 RFCS
F8F9 2009             (        forth.asm):03496                 RFXT    bra,VLIST+8     XT for VLIST
                      (        forth.asm):03497         
                      (        forth.asm):03498         * Differences from the original code:
                      (        forth.asm):03499         * - display number in HEX rather than in the current base.
                      (        forth.asm):03500         * - dropped feat: the original stuff was interactively paged by 15 line screens.
                      (        forth.asm):03501         * - added feat: display code implementation payload.
                      (        forth.asm):03502         * - added feat: display the immedediate and define (compile time only) flags.
                      (        forth.asm):03503         * - added feat: display the forgettable status (R/W). Everything user
                      (        forth.asm):03504         *   defined is forgettable (i.e. RAM resident).
F8FB 05               (        forth.asm):03505         VLIST   fcb     5               Non-standard
F8FC 564C495354       (        forth.asm):03506                 fcc     'VLIST'         ( -- )
F901 F8F0             (        forth.asm):03507                 fdb     WORDS
F903 C7               (        forth.asm):03508                 RFCS
F904 9E08             (        forth.asm):03509 (4)             ldx     DICEND
F906 9F12             (        forth.asm):03510 (4)             stx     VLPRVEP         Last word code address + 1
F908 9E06             (        forth.asm):03511 (4)             ldx     LSTWAD
F90A 9F14             (        forth.asm):03512 (4)     @vlist1 stx     VLPRVHD         Last word header pointer
F90C 108E039A         (        forth.asm):03513 (4)             ldy     #TBUFF
F910 E680             (        forth.asm):03514 (4+1)           ldb     ,x+
F912 3404             (        forth.asm):03515 (4+1)           pshs    b
F914 C41F             (        forth.asm):03516 (2)             andb    #WRLNMSK        Mask out word length
F916 4F               (        forth.asm):03517 (1)             clra
F917 3404             (        forth.asm):03518 (4+1)           pshs    b               Preserve word length 
F919 1F06             (        forth.asm):03519 (4)             tfr     d,w
F91B 113812           (        forth.asm):03520 (6+?)           tfm     x+,y+
F91E 3502             (        forth.asm):03521 (4+1)           puls    a               Restore word length to A
F920 C620             (        forth.asm):03522 (2)             ldb     #WRLNMSK+1
F922 103289           (        forth.asm):03523 (4)             subr    a,b             Number of spaces we want to emit
F925 8620             (        forth.asm):03524 (2)             lda     #SP
F927 A7A0             (        forth.asm):03525 (4+1)   @vlist2 sta     ,y+
F929 5A               (        forth.asm):03526 (1)             decb
F92A 26FB             (        forth.asm):03527 (3)             bne     @vlist2
F92C 6FA0             (        forth.asm):03528 (6+1)           clr     ,y+             Terminate formatted output string
F92E 3410             (        forth.asm):03529 (4+2)           pshs    x               Address of the current word backlink address
F930 BDE1E5           (        forth.asm):03530 (7)             jsr     PUTCR           Carriage return is output before anything else
F933 8E039A           (        forth.asm):03531 (3)             ldx     #TBUFF
F936 BDE1D8           (        forth.asm):03532 (7)             jsr     PUTS            Output word name formatted on 17 chars + SP
F939 AEE4             (        forth.asm):03533 (5+0)           ldx     ,s
                      (        forth.asm):03534                 IFNE    RELFEAT
F93B 3003             (        forth.asm):03535 (4+1)           leax    3,x             Word XT to X (Skip backlink and checksum)
                      (        forth.asm):03536                 ELSE
                      (        forth.asm):03537                 leax    2,x             Word XT to X (Skip backlink)
                      (        forth.asm):03538                 ENDC
F93D 1F10             (        forth.asm):03539 (4)             tfr     x,d             CVNSTR depends on UBASE and we want HEX output
F93F 8E039A           (        forth.asm):03540 (3)             ldx     #TBUFF
F942 BDE172           (        forth.asm):03541 (7)             jsr     HDMP4           So we use trusted debugging code
F945 8E039A           (        forth.asm):03542 (3)             ldx     #TBUFF
F948 BDE1D8           (        forth.asm):03543 (7)             jsr     PUTS
                      (        forth.asm):03544         * Now to display word implementation length.
                      (        forth.asm):03545         * Implementation code length is from ,s+3 (or 2) to VLPRVEP
F94B 8609             (        forth.asm):03546 (2)             lda     #HT
F94D BDE1B4           (        forth.asm):03547 (7)             jsr     PUTCH
F950 9E12             (        forth.asm):03548 (4)             ldx     VLPRVEP
F952 10AEE4           (        forth.asm):03549 (6+0)           ldy     ,s
                      (        forth.asm):03550                 IFNE    RELFEAT
F955 3123             (        forth.asm):03551 (4+1)           leay    3,y             Current word code entry address
                      (        forth.asm):03552                 ELSE
                      (        forth.asm):03553                 leay    2,y             Current word code entry address
                      (        forth.asm):03554                 ENDC
F957 103221           (        forth.asm):03555 (4)             subr    y,x
F95A 1F10             (        forth.asm):03556 (4)             tfr     x,d
F95C 8E039A           (        forth.asm):03557 (3)             ldx     #TBUFF
F95F BDE172           (        forth.asm):03558 (7)             jsr     HDMP4
F962 8E039A           (        forth.asm):03559 (3)             ldx     #TBUFF
F965 BDE1D8           (        forth.asm):03560 (7)             jsr     PUTS
                      (        forth.asm):03561         # Display attribute flags.
F968 8609             (        forth.asm):03562 (2)             lda     #HT
F96A BDE1B4           (        forth.asm):03563 (7)             jsr     PUTCH
F96D 8E039A           (        forth.asm):03564 (3)             ldx     #TBUFF
F970 E662             (        forth.asm):03565 (4+1)           ldb     2,s             Word attribute to B
F972 862D             (        forth.asm):03566 (2)             lda     #'-
F974 C580             (        forth.asm):03567 (2)             bitb    #IMDFLM         Check for immediate
F976 2702             (        forth.asm):03568 (3)             beq     @vlist4
F978 8649             (        forth.asm):03569 (2)             lda     #'I
F97A A780             (        forth.asm):03570 (4+1)   @vlist4 sta     ,x+
F97C 862D             (        forth.asm):03571 (2)             lda     #'-
F97E C540             (        forth.asm):03572 (2)             bitb    #DEFFLM         Check for define (compile time only)
F980 2702             (        forth.asm):03573 (3)             beq     @vlist5
F982 8643             (        forth.asm):03574 (2)             lda     #'C
F984 A780             (        forth.asm):03575 (4+1)   @vlist5 sta     ,x+
                      (        forth.asm):03576                 IFNE    RELFEAT
F986 862D             (        forth.asm):03577 (2)             lda     #'-
F988 C520             (        forth.asm):03578 (2)             bitb    #MONFLM         Check for monitored status
F98A 2702             (        forth.asm):03579 (3)             beq     @vlst51
F98C 864D             (        forth.asm):03580 (2)             lda     #'M
F98E A780             (        forth.asm):03581 (4+1)   @vlst51 sta     ,x+
                      (        forth.asm):03582                 ENDC
                      (        forth.asm):03583         * Check for forgettable also. In ROM => R else W unless we just processed '@'.
F990 8652             (        forth.asm):03584 (2)             lda     #'R
F992 10AEE4           (        forth.asm):03585 (6+0)           ldy     ,s
                      (        forth.asm):03586                 IFNE    RELFEAT
F995 3123             (        forth.asm):03587 (4+1)           leay    3,y             Word entry point to Y
                      (        forth.asm):03588                 ELSE
                      (        forth.asm):03589                 leay    2,y             Word entry point to Y
                      (        forth.asm):03590                 ENDC
F997 108C0C15         (        forth.asm):03591 (4)             cmpy    #RAMFTCH        @ in RAM is unforgettable
F99B 2708             (        forth.asm):03592 (3)             beq     @vlist6
F99D 108CE000         (        forth.asm):03593 (4)             cmpy    #ROMSTRT        as are all ROM resident words
F9A1 2402             (        forth.asm):03594 (3)             bcc     @vlist6
F9A3 8657             (        forth.asm):03595 (2)             lda     #'W
F9A5 A780             (        forth.asm):03596 (4+1)   @vlist6 sta     ,x+
F9A7 6F84             (        forth.asm):03597 (6+0)           clr     ,x
F9A9 8E039A           (        forth.asm):03598 (3)             ldx     #TBUFF
F9AC BDE1D8           (        forth.asm):03599 (7)             jsr     PUTS
                      (        forth.asm):03600         * The point at which VLPRVHD==WDICSPC is a singularity (RAM to ROM transition).
F9AF 9E14             (        forth.asm):03601 (4)             ldx     VLPRVHD
F9B1 8C0C10           (        forth.asm):03602 (3)             cmpx    #WDICSPC
F9B4 2608             (        forth.asm):03603 (3)             bne     @vlist7
F9B6 8EFDC8           (        forth.asm):03604 (3)             ldx     #QMARK          Word just before @ (ROM flavor)
F9B9 9F14             (        forth.asm):03605 (4)             stx     VLPRVHD
F9BB 8EFDD3           (        forth.asm):03606 (3)             ldx     #THEEND
F9BE 9F12             (        forth.asm):03607 (4)     @vlist7 stx     VLPRVEP
F9C0 3510             (        forth.asm):03608 (4+2)           puls    x
F9C2 3504             (        forth.asm):03609 (4+1)           puls    b
F9C4 AE84             (        forth.asm):03610 (5+0)           ldx     ,x              Point to previous word
F9C6 1026FF40         (        forth.asm):03611 (5)             lbne    @vlist1
F9CA 39               (        forth.asm):03612 (4)             rts
                      (        forth.asm):03613         
F9CB 05               (        forth.asm):03614         STATE   fcb     5
F9CC 5354415445       (        forth.asm):03615                 fcc     'STATE'
F9D1 F8FB             (        forth.asm):03616                 fdb     VLIST
F9D3 C7               (        forth.asm):03617                 RFCS
F9D4 8E011A           (        forth.asm):03618 (3)             ldx     #USTATE
F9D7 7EE68A           (        forth.asm):03619 (3)             jmp     NPUSH
                      (        forth.asm):03620         
F9DA 04               (        forth.asm):03621         BASE    fcb     4               79-STANDARD (REQ115)
F9DB 42415345         (        forth.asm):03622                 fcc     'BASE'
F9DF F9CB             (        forth.asm):03623                 fdb     STATE
F9E1 C7               (        forth.asm):03624                 RFCS
F9E2 8E0118           (        forth.asm):03625 (3)             ldx     #UBASE
F9E5 7EE68A           (        forth.asm):03626 (3)             jmp     NPUSH
                      (        forth.asm):03627         
F9E8 03               (        forth.asm):03628         BIN     fcb     3               Non-standard
F9E9 42494E           (        forth.asm):03629                 fcc     'BIN'
F9EC F9DA             (        forth.asm):03630                 fdb     BASE
F9EE C7               (        forth.asm):03631                 RFCS
F9EF CC0002           (        forth.asm):03632 (3)             ldd     #2
F9F2 DD18             (        forth.asm):03633 (4)             std     UBASE
F9F4 39               (        forth.asm):03634 (4)             rts
                      (        forth.asm):03635         
F9F5 05               (        forth.asm):03636         OCTAL   fcb     5               79-STANDARD (REF)
F9F6 4F4354414C       (        forth.asm):03637                 fcc     'OCTAL'
F9FB F9E8             (        forth.asm):03638                 fdb     BIN
F9FD C7               (        forth.asm):03639                 RFCS
F9FE CC0008           (        forth.asm):03640 (3)             ldd     #8
FA01 DD18             (        forth.asm):03641 (4)             std     UBASE
FA03 39               (        forth.asm):03642 (4)             rts
                      (        forth.asm):03643         
FA04 07               (        forth.asm):03644         DECIMAL fcb     7               79-STANDARD (REQ197)
FA05 444543494D414C   (        forth.asm):03645                 fcc     'DECIMAL'
FA0C F9F5             (        forth.asm):03646                 fdb     OCTAL
FA0E C7               (        forth.asm):03647                 RFCS
FA0F CC000A           (        forth.asm):03648 (3)             ldd     #10
FA12 DD18             (        forth.asm):03649 (4)             std     UBASE
FA14 39               (        forth.asm):03650 (4)             rts
                      (        forth.asm):03651         
FA15 03               (        forth.asm):03652         HEX     fcb     3               79-STANDARD (REF162)
FA16 484558           (        forth.asm):03653                 fcc     'HEX'
FA19 FA04             (        forth.asm):03654                 fdb     DECIMAL
FA1B C7               (        forth.asm):03655                 RFCS
FA1C CC0010           (        forth.asm):03656 (3)             ldd     #16
FA1F DD18             (        forth.asm):03657 (4)             std     UBASE
FA21 39               (        forth.asm):03658 (4)             rts
                      (        forth.asm):03659         
                      (        forth.asm):03660         * DUMP is not optimized for speed or clarity but for code compactness and yet
                      (        forth.asm):03661         * it remains the largest dictionary entry! It resorts to builtin HEX dump
                      (        forth.asm):03662         * primitives that do not depend on the current base (HDMP4, HDMP2).
                      (        forth.asm):03663         * DUMP operates on the basis of one line of output to #TBUFF per 16 byte
                      (        forth.asm):03664         * (a block) of input. The input buffer is pointed to by D (backed up by Y)
                      (        forth.asm):03665         * and the output is pointed to by X. The output (besides the header line)
                      (        forth.asm):03666         * comprises 3 distinct areas:
                      (        forth.asm):03667         *
                      (        forth.asm):03668         * - the base block address. Aligned on a 16 byte address, followed by one #SP.
                      (        forth.asm):03669         * - the HEX dump area. Made up of 16 times 2 HEX numbers separated by #SP.
                      (        forth.asm):03670         * - the ASCII dump area. Made up of 16 characters.
                      (        forth.asm):03671         *
                      (        forth.asm):03672         * This results in the following "magical" constants:
                      (        forth.asm):03673         *
                      (        forth.asm):03674         * #TBUFF+53 points to the beginning of the ASCII dump area.
                      (        forth.asm):03675         * #TBUFF+69 points to the end of the output string (to be NUL terminated).
                      (        forth.asm):03676         *
FA22 04               (        forth.asm):03677         DUMP    fcb     4               79-STANDARD (REF123)
FA23 44554D50         (        forth.asm):03678                 fcc     'DUMP'          ( START NBYTES -- )
FA27 FA15             (        forth.asm):03679                 fdb     HEX
FA29 C7               (        forth.asm):03680                 RFCS
FA2A BDE698           (        forth.asm):03681 (7)             jsr     NPOP
FA2D 1F12             (        forth.asm):03682 (4)             tfr     x,y             NBYTES to Y
FA2F BDE698           (        forth.asm):03683 (7)             jsr     NPOP
                      (        forth.asm):03684         * Input parameter validation.
FA32 1037C2           (        forth.asm):03685 (4)             cmpr    0,y
FA35 2601             (        forth.asm):03686 (3)             bne     @dmproc         Proceed if NBYTES in non-zero
FA37 39               (        forth.asm):03687 (4)             rts                     A zero byte count is not flagged as an error
FA38 2E05             (        forth.asm):03688 (3)     @dmproc bgt     @dmpini
FA3A C60D             (        forth.asm):03689 (2)             ldb     #13             Illegal argument (negative)
FA3C BDE611           (        forth.asm):03690 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):03691         * Initialization and header processing.
FA3F 3420             (        forth.asm):03692 (4+2)   @dmpini pshs    y               NBYTES
FA41 3410             (        forth.asm):03693 (4+2)           pshs    x               START
FA43 327E             (        forth.asm):03694 (4+1)           leas    -2,s            Allocate storage for STARTSEEN
                      (        forth.asm):03695         * Stack structure:
                      (        forth.asm):03696         * ,s    STARTSEEN               Set to 1 as soon as D is seen = to START
                      (        forth.asm):03697         *                               Only the LSB is used (1,s).
                      (        forth.asm):03698         * 2,s   START                   Lower bound of the area of interest (included)
                      (        forth.asm):03699         * 4,s   NBYTES                  Byte count to be dumped
FA45 1F10             (        forth.asm):03700 (4)             tfr     x,d             START to D
FA47 C4F0             (        forth.asm):03701 (2)             andb    #$F0            Align to lower 16 byte boundary
FA49 6F61             (        forth.asm):03702 (6+1)           clr     1,s             Clear STARTSEEN until better informed
FA4B BDE1E5           (        forth.asm):03703 (7)             jsr     PUTCR           Print CR
FA4E 11C620           (        forth.asm):03704 (3)             ldf     #SP             Preserved across called subroutines
FA51 8E039A           (        forth.asm):03705 (3)             ldx     #TBUFF
FA54 1F17             (        forth.asm):03706 (4)             tfr     x,v             Invariants: F has #SP, V has #TBUFF
FA56 3406             (        forth.asm):03707 (4+2)           pshs    d
FA58 BDFAF3           (        forth.asm):03708 (7)             jsr     _DMPHDR         D is not preserved
FA5B 3506             (        forth.asm):03709 (4+2)           puls    d
FA5D 6F84             (        forth.asm):03710 (6+0)           clr     ,x              NUL terminate the current output line
FA5F 1F71             (        forth.asm):03711 (4)             tfr     v,x             Point back to the beginning of the output buffer
FA61 BDE1D8           (        forth.asm):03712 (7)             jsr     PUTS            Print header
                      (        forth.asm):03713         * Main loop. Index is D. We output everything to the string pointed by X.
                      (        forth.asm):03714         * Occasional resort to #TBUFF + 53 + (B % 15) will be used.
FA64 3404             (        forth.asm):03715 (4+1)   @dmmain pshs    b
FA66 C40F             (        forth.asm):03716 (2)             andb    #$F
FA68 3504             (        forth.asm):03717 (4+1)           puls    b
FA6A 2609             (        forth.asm):03718 (3)             bne     @dmphx          Not a beginning of line
FA6C BDE1E5           (        forth.asm):03719 (7)             jsr     PUTCR           Print CR
FA6F BDE172           (        forth.asm):03720 (7)             jsr     HDMP4           4 hex digit dump of the base block address
FA72 11E780           (        forth.asm):03721 (5+1)           stf     ,x+             SPACE after the base address
FA75 1F02             (        forth.asm):03722 (4)     @dmphx  tfr     d,y             Save D, prepare pointer to actual data
FA77 8D59             (        forth.asm):03723 (6)             bsr     _DMPINT
FA79 260A             (        forth.asm):03724 (3)             bne     @dmhx2          We are in the area of interest
FA7B 8620             (        forth.asm):03725 (2)     @dmspc  lda     #SP
FA7D A780             (        forth.asm):03726 (4+1)           sta     ,x+             Nothing interesting here. Emit three spaces
FA7F A780             (        forth.asm):03727 (4+1)           sta     ,x+
FA81 A780             (        forth.asm):03728 (4+1)           sta     ,x+
FA83 2016             (        forth.asm):03729 (3)             bra     @dmasc          Have #SP printed to the ASCII area
                      (        forth.asm):03730         * We are within the area of interest. Perform a regular HEX 2 digit conversion.
FA85 A6A4             (        forth.asm):03731 (4+0)   @dmhx2  lda     ,y
FA87 BDE18B           (        forth.asm):03732 (7)             jsr     HDMP2
FA8A 11E780           (        forth.asm):03733 (5+1)           stf     ,x+
                      (        forth.asm):03734         * Decrement NBYTES, only if it is not already zero.
FA8D 3420             (        forth.asm):03735 (4+2)           pshs    y
FA8F 10AE66           (        forth.asm):03736 (6+1)           ldy     6,s             Offset plus 2 since we just pushed Y
FA92 2705             (        forth.asm):03737 (3)             beq     @dmrsty         NBYTES is nul
FA94 313F             (        forth.asm):03738 (4+1)           leay    -1,y            Decrement NBYTES
FA96 10AF66           (        forth.asm):03739 (6+1)           sty     6,s
FA99 3520             (        forth.asm):03740 (4+2)   @dmrsty puls    y
FA9B 8120             (        forth.asm):03741 (2)     @dmasc  cmpa    #SP
FA9D 2504             (        forth.asm):03742 (3)             blo     @dmnprt         Character is not printable
FA9F 817E             (        forth.asm):03743 (2)             cmpa    #$7E
FAA1 2302             (        forth.asm):03744 (3)             bls     @dmasis
FAA3 862E             (        forth.asm):03745 (2)     @dmnprt lda     #'.             Default character when not printable
FAA5 3410             (        forth.asm):03746 (4+2)   @dmasis pshs    x               The ASCII image is the character itself
FAA7 8E03CF           (        forth.asm):03747 (3)             ldx     #TBUFF+53       Base address for the ASCII dump area
FAAA C40F             (        forth.asm):03748 (2)             andb    #$F             Offset is B modulo 15
FAAC 3A               (        forth.asm):03749 (1)             abx                     Add offset to base address
FAAD A780             (        forth.asm):03750 (4+1)           sta     ,x+
FAAF 3510             (        forth.asm):03751 (4+2)           puls    x
                      (        forth.asm):03752         * If B is #$F, we've just processed the last byte of a block. Print #TBUFF.
FAB1 C10F             (        forth.asm):03753 (2)             cmpb    #$F
FAB3 1FAE             (        forth.asm):03754 (4)             tfr     cc,e
FAB5 2608             (        forth.asm):03755 (3)             bne     @dmctd
FAB7 1F71             (        forth.asm):03756 (4)             tfr     v,x             #TBUFF to X
FAB9 6F8845           (        forth.asm):03757 (6+1)           clr     69,x
FABC BDE1D8           (        forth.asm):03758 (7)             jsr     PUTS
FABF 1F20             (        forth.asm):03759 (4)     @dmctd  tfr     y,d             Restore D
FAC1 104C             (        forth.asm):03760 (2)             incd
FAC3 1FEA             (        forth.asm):03761 (4)             tfr     e,cc
FAC5 269D             (        forth.asm):03762 (3)             bne     @dmmain         Proceed until end of block is reached
FAC7 6D65             (        forth.asm):03763 (5+1)           tst     5,s             NBYTES LSB
FAC9 2699             (        forth.asm):03764 (3)             bne     @dmmain
FACB 6D64             (        forth.asm):03765 (5+1)           tst     4,s             NYTES MSB
FACD 2695             (        forth.asm):03766 (3)             bne     @dmmain
FACF 3266             (        forth.asm):03767 (4+1)           leas    6,s             Free stack storage used by local variables
FAD1 39               (        forth.asm):03768 (4)             rts
                      (        forth.asm):03769         
                      (        forth.asm):03770         * Predicate to indicate whether or not D covers the area of interest.
                      (        forth.asm):03771         * Upon return NZ will be set iff we are pointing to the "interesting" area.
FAD2 6D63             (        forth.asm):03772 (5+1)   _DMPINT tst     3,s             STARTSEEN?
FAD4 2608             (        forth.asm):03773 (3)             bne     @strsen         Yes, check for zero remaining byte count
FAD6 10A364           (        forth.asm):03774 (6+1)           cmpd    4,s             START
FAD9 240D             (        forth.asm):03775 (3)             bhs     @ststrt         Set STARTSEEN once and for all
FADB 1A04             (        forth.asm):03776 (2)     @retwz  orcc    #ZFLAG          Set Z flag
FADD 39               (        forth.asm):03777 (4)             rts
                      (        forth.asm):03778         * STARTSEEN is set. Check remaining byte count.
FADE 6D67             (        forth.asm):03779 (5+1)   @strsen tst     7,s             NBYTES LSB
FAE0 260E             (        forth.asm):03780 (3)             bne     @retwnz
FAE2 6D66             (        forth.asm):03781 (5+1)           tst     6,s             NBYTES MSB
FAE4 260A             (        forth.asm):03782 (3)             bne     @retwnz
FAE6 20F3             (        forth.asm):03783 (3)             bra     @retwz          We are beyond the interesting area
FAE8 3402             (        forth.asm):03784 (4+1)   @ststrt pshs    a
FAEA 8601             (        forth.asm):03785 (2)             lda     #1
FAEC A764             (        forth.asm):03786 (4+1)           sta     4,s             Set STARTSEEN
FAEE 3502             (        forth.asm):03787 (4+1)           puls    a
FAF0 1CFB             (        forth.asm):03788 (2)     @retwnz andcc   #^ZFLAG         Clear Z flag
FAF2 39               (        forth.asm):03789 (4)             rts
                      (        forth.asm):03790         
                      (        forth.asm):03791         * Print the dump header to X.
FAF3 8620             (        forth.asm):03792 (2)     _DMPHDR lda     #SP
FAF5 A780             (        forth.asm):03793 (4+1)           sta     ,x+
FAF7 A780             (        forth.asm):03794 (4+1)           sta     ,x+
FAF9 A780             (        forth.asm):03795 (4+1)           sta     ,x+
FAFB A780             (        forth.asm):03796 (4+1)           sta     ,x+
FAFD 5F               (        forth.asm):03797 (1)             clrb
FAFE A780             (        forth.asm):03798 (4+1)   @dmhlp1 sta     ,x+             Space before every 2 hex digits
FB00 1F98             (        forth.asm):03799 (4)             tfr     b,a
FB02 BDE18B           (        forth.asm):03800 (7)             jsr     HDMP2
FB05 8620             (        forth.asm):03801 (2)             lda     #SP
FB07 5C               (        forth.asm):03802 (1)             incb
FB08 C110             (        forth.asm):03803 (2)             cmpb    #$10
FB0A 26F2             (        forth.asm):03804 (3)             bne     @dmhlp1
FB0C A780             (        forth.asm):03805 (4+1)           sta     ,x+             Space before the ASCII dump
FB0E 5F               (        forth.asm):03806 (1)             clrb
FB0F 1F98             (        forth.asm):03807 (4)     @dmhlp2 tfr     b,a
FB11 BDE159           (        forth.asm):03808 (7)             jsr     HEX1D           Offset to HEX char stored to x+
FB14 5C               (        forth.asm):03809 (1)             incb
FB15 C110             (        forth.asm):03810 (2)             cmpb    #$10
FB17 26F6             (        forth.asm):03811 (3)             bne     @dmhlp2
FB19 39               (        forth.asm):03812 (4)             rts
                      (        forth.asm):03813         
                      (        forth.asm):03814                 IFNE    SSDFEAT
FB1A 02               (        forth.asm):03815         DOTTICK fcb     2               Non-standard (SwiftForth)
FB1B 2E27             (        forth.asm):03816                 fcb     $2E,$27         .' ( memaddr -- )
FB1D FA22             (        forth.asm):03817                 fdb     DUMP
FB1F C7               (        forth.asm):03818                 RFCS
FB20 BDE698           (        forth.asm):03819 (7)             jsr     NPOP
FB23 1F12             (        forth.asm):03820 (4)             tfr     x,y
FB25 8E034A           (        forth.asm):03821 (3)             ldx     #HEXBUF
FB28 BDE4CF           (        forth.asm):03822 (7)             jsr     FINDSYM
FB2B 8E034A           (        forth.asm):03823 (3)             ldx     #HEXBUF
FB2E 7EE1D8           (        forth.asm):03824 (3)             jmp     PUTS
                      (        forth.asm):03825                 ENDC
                      (        forth.asm):03826         
                      (        forth.asm):03827         * Display a dump of the data stack in the current BASE. In Leo Brodie's
                      (        forth.asm):03828         * "Starting Forth" the data stack is printed from the bottom up. So it is here.
FB31 02               (        forth.asm):03829         DDUMP   fcb     2               ANSI (Optional "Programming tools" word set)
FB32 2E53             (        forth.asm):03830                 fcc     '.S'            ( memaddr bcount -- )
                      (        forth.asm):03831                 IFNE    SSDFEAT
FB34 FB1A             (        forth.asm):03832                 fdb     DOTTICK
                      (        forth.asm):03833                 ELSE
                      (        forth.asm):03834                 fdb     DUMP
                      (        forth.asm):03835                 ENDC
FB36 C7               (        forth.asm):03836                 RFCS
FB37 CC0246           (        forth.asm):03837 (3)             ldd     #NSTBOT
FB3A 103230           (        forth.asm):03838 (4)             subr    u,d
FB3D 1044             (        forth.asm):03839 (2)             lsrd                    DEPTH is in D
FB3F 272A             (        forth.asm):03840 (3)             beq     @ndump3         Data stack is empty
FB41 3440             (        forth.asm):03841 (4+2)           pshs    u
FB43 CE0246           (        forth.asm):03842 (3)             ldu     #NSTBOT         Pointing to the bottom of the data stack
FB46 8601             (        forth.asm):03843 (2)             lda     #1
FB48 972C             (        forth.asm):03844 (3)             sta     CVISSGN         Force a signed number conversion
FB4A 3404             (        forth.asm):03845 (4+1)   @ndump1 pshs    b
FB4C AEC3             (        forth.asm):03846 (5+2)           ldx     ,--u
FB4E BDE30F           (        forth.asm):03847 (7)             jsr     CVNSTR
FB51 8E039A           (        forth.asm):03848 (3)             ldx     #TBUFF
                      (        forth.asm):03849         # Skip leading spaces.
FB54 A680             (        forth.asm):03850 (4+1)   @ndump2 lda     ,x+
FB56 8120             (        forth.asm):03851 (2)             cmpa    #SP
FB58 27FA             (        forth.asm):03852 (3)             beq     @ndump2
FB5A 301F             (        forth.asm):03853 (4+1)           leax    -1,x
FB5C BDE1D8           (        forth.asm):03854 (7)             jsr     PUTS
FB5F 8620             (        forth.asm):03855 (2)             lda     #SP
FB61 BDE1B4           (        forth.asm):03856 (7)             jsr     PUTCH
FB64 3504             (        forth.asm):03857 (4+1)           puls    b
FB66 5A               (        forth.asm):03858 (1)             decb
FB67 26E1             (        forth.asm):03859 (3)             bne     @ndump1
FB69 3540             (        forth.asm):03860 (4+2)           puls    u
FB6B 39               (        forth.asm):03861 (4)     @ndump3 rts
                      (        forth.asm):03862         
FB6C 04               (        forth.asm):03863         QRYDUP  fcb     4               79-STANDARD (REQ184)
FB6D 3F445550         (        forth.asm):03864                 fcc     '?DUP'
FB71 FB31             (        forth.asm):03865                 fdb     DDUMP
FB73 C7               (        forth.asm):03866                 RFCS
FB74 BDE698           (        forth.asm):03867 (7)             jsr     NPOP
FB77 3610             (        forth.asm):03868                 UCNPUSH                 Push back the original parameter
FB79 1037C1           (        forth.asm):03869 (4)             cmpr    0,x
FB7C 2601             (        forth.asm):03870 (3)             bne     @qrydp1
FB7E 39               (        forth.asm):03871 (4)             rts
FB7F 7EE68A           (        forth.asm):03872 (3)     @qrydp1 jmp     NPUSH           And DUP if NZ
                      (        forth.asm):03873         
FB82 04               (        forth.asm):03874         TUCK    fcb     4               ANSI (Core ext)
FB83 5455434B         (        forth.asm):03875                 fcc     'TUCK'          ( x1 x2 -- x2 x1 x2 ) i.e. SWAP OVER
FB87 FB6C             (        forth.asm):03876                 fdb     QRYDUP
FB89 C7               (        forth.asm):03877                 RFCS
FB8A CC0242BDE304     (        forth.asm):03878                 MINDREQ 2
FB90 10ECC4           (        forth.asm):03879 (8+0)           ldq     ,u              D:W is X2:X1
FB93 1E06             (        forth.asm):03880 (5)             exg     d,w
FB95 10EDC4           (        forth.asm):03881 (8+0)           stq     ,u
FB98 1F61             (        forth.asm):03882 (4)             tfr     w,x             X has X2
FB9A 7EE68A           (        forth.asm):03883 (3)             jmp     NPUSH
                      (        forth.asm):03884         
FB9D 03               (        forth.asm):03885         NIP     fcb     3               ANSI (Core ext)
FB9E 4E4950           (        forth.asm):03886                 fcc     'NIP'           ( x1 x2 -- x2 ) i.e. SWAP DROP
FBA1 FB82             (        forth.asm):03887                 fdb     TUCK
FBA3 C7               (        forth.asm):03888                 RFCS
FBA4 CC0242BDE304     (        forth.asm):03889                 MINDREQ 2
FBAA ECC4             (        forth.asm):03890 (5+0)           ldd     ,u
FBAC 3342             (        forth.asm):03891 (4+1)           leau    2,u
FBAE EDC4             (        forth.asm):03892 (5+0)           std     ,u
FBB0 39               (        forth.asm):03893 (4)             rts
                      (        forth.asm):03894         
FBB1 03               (        forth.asm):03895         DUP     fcb     3               79-STANDARD (REQ205)
FBB2 445550           (        forth.asm):03896                 fcc     'DUP'
FBB5 FB9D             (        forth.asm):03897                 fdb     NIP
FBB7 C7               (        forth.asm):03898                 RFCS
FBB8 CC0244BDE304     (        forth.asm):03899                 MINDREQ 1
FBBE AEC4             (        forth.asm):03900 (5+0)           ldx     ,u
FBC0 7EE68A           (        forth.asm):03901 (3)             jmp     NPUSH
                      (        forth.asm):03902         
FBC3 04               (        forth.asm):03903         DROP    fcb     4               79-STANDARD (REQ233)
FBC4 44524F50         (        forth.asm):03904                 fcc     'DROP'
FBC8 FBB1             (        forth.asm):03905                 fdb     DUP
FBCA C7               (        forth.asm):03906                 RFCS
FBCB 7EE698           (        forth.asm):03907 (3)             jmp     NPOP
                      (        forth.asm):03908         
FBCE 04               (        forth.asm):03909         SWAP    fcb     4               79-STANDARD (REQ230)
FBCF 53574150         (        forth.asm):03910                 fcc     'SWAP'
FBD3 FBC3             (        forth.asm):03911                 fdb     DROP
FBD5 C7               (        forth.asm):03912                 RFCS
FBD6 CC0242BDE304     (        forth.asm):03913                 MINDREQ 2               We need at least two cells stacked up
FBDC 10ECC4           (        forth.asm):03914 (8+0)           ldq     ,u              In place SWAP
FBDF 1E06             (        forth.asm):03915 (5)             exg     d,w
FBE1 10EDC4           (        forth.asm):03916 (8+0)           stq     ,u
FBE4 39               (        forth.asm):03917 (4)             rts
                      (        forth.asm):03918         
FBE5 04               (        forth.asm):03919         PICK    fcb     4
FBE6 5049434B         (        forth.asm):03920                 fcc     'PICK'
FBEA FBCE             (        forth.asm):03921                 fdb     SWAP
FBEC C7               (        forth.asm):03922                 RFCS
FBED BDE698           (        forth.asm):03923 (7)             jsr     NPOP
FBF0 CC0246           (        forth.asm):03924 (3)     PICK1   ldd     #NSTBOT
FBF3 103230           (        forth.asm):03925 (4)             subr    u,d
FBF6 1044             (        forth.asm):03926 (2)             lsrd                    D has the data stack depth in cells
FBF8 103710           (        forth.asm):03927 (4)             cmpr    x,d
FBFB 2405             (        forth.asm):03928 (3)             bcc     @pick1
FBFD C60D             (        forth.asm):03929 (2)     ERRPCK  ldb     #13             Argument is greater than DEPTH
FBFF BDE611           (        forth.asm):03930 (7)             jsr     ERRHDLR         No return
FC02 1F10             (        forth.asm):03931 (4)     @pick1  tfr     x,d
FC04 104D             (        forth.asm):03932 (2)             tstd
FC06 27F5             (        forth.asm):03933 (3)             beq     ERRPCK
FC08 104A             (        forth.asm):03934 (2)             decd                    Minus 1, unlike in the Z80 implementation
FC0A 1048             (        forth.asm):03935 (2)             lsld                    Times 2
FC0C 1F31             (        forth.asm):03936 (4)             tfr     u,x
FC0E 308B             (        forth.asm):03937 (4+2)           leax    d,x
FC10 1F12             (        forth.asm):03938 (4)             tfr     x,y             For the sake of ROLL's implementation
FC12 AE84             (        forth.asm):03939 (5+0)           ldx     ,x
FC14 3610             (        forth.asm):03940                 UCNPUSH
FC16 39               (        forth.asm):03941 (4)             rts
                      (        forth.asm):03942         
FC17 04               (        forth.asm):03943         OVER    fcb     4
FC18 4F564552         (        forth.asm):03944                 fcc     'OVER'
FC1C FBE5             (        forth.asm):03945                 fdb     PICK
FC1E C7               (        forth.asm):03946                 RFCS
FC1F 8E0002           (        forth.asm):03947 (3)             ldx     #2
FC22 20CC             (        forth.asm):03948 (3)             bra     PICK1
                      (        forth.asm):03949         
FC24 04               (        forth.asm):03950         ROLL    fcb     4
FC25 524F4C4C         (        forth.asm):03951                 fcc     'ROLL'
FC29 FC17             (        forth.asm):03952                 fdb     OVER
FC2B C7               (        forth.asm):03953                 RFCS
FC2C BDE698           (        forth.asm):03954 (7)             jsr     NPOP
FC2F 1F16             (        forth.asm):03955 (4)     ROLL1   tfr     x,w
FC31 8DBD             (        forth.asm):03956 (6)             bsr     PICK1           Let PICK do the error handling
FC33 3121             (        forth.asm):03957 (4+1)           leay    1,y             Point to the LSB since we're moving backward
FC35 1F21             (        forth.asm):03958 (4)             tfr     y,x
FC37 301E             (        forth.asm):03959 (4+1)           leax    -2,x
FC39 103066           (        forth.asm):03960 (4)             addr    w,w
FC3C 113912           (        forth.asm):03961 (6+?)           tfm     x-,y-
FC3F 7EE698           (        forth.asm):03962 (3)             jmp     NPOP
                      (        forth.asm):03963         
FC42 03               (        forth.asm):03964         ROT     fcb     3
FC43 524F54           (        forth.asm):03965                 fcc     'ROT'
FC46 FC24             (        forth.asm):03966                 fdb     ROLL
FC48 C7               (        forth.asm):03967                 RFCS
FC49 8E0003           (        forth.asm):03968 (3)             ldx     #3
FC4C 20E1             (        forth.asm):03969 (3)             bra     ROLL1
                      (        forth.asm):03970         
FC4E 04               (        forth.asm):03971         MROT    fcb     4
FC4F 2D524F54         (        forth.asm):03972                 fcc     '-ROT'
FC53 FC42             (        forth.asm):03973                 fdb     ROT
FC55 C7               (        forth.asm):03974                 RFCS
FC56 8DF1             (        forth.asm):03975                 RFXT    bsr,ROT+6       XT for ROT
FC58 20EF             (        forth.asm):03976                 RFXT    bra,ROT+6       XT for ROT
                      (        forth.asm):03977         
FC5A 02               (        forth.asm):03978         CCOMMA  fcb     2               79-STANDARD (REF)
FC5B 432C             (        forth.asm):03979                 fcc     'C,'
FC5D FC4E             (        forth.asm):03980                 fdb     MROT
FC5F C7               (        forth.asm):03981                 RFCS
FC60 BDE698           (        forth.asm):03982 (7)             jsr     NPOP
FC63 1F10             (        forth.asm):03983 (4)             tfr     x,d
FC65 109E08           (        forth.asm):03984 (5)             ldy     DICEND
FC68 E7A0             (        forth.asm):03985 (4+1)           stb     ,y+
FC6A 109F08           (        forth.asm):03986 (5)             sty     DICEND
FC6D 39               (        forth.asm):03987 (4)             rts
                      (        forth.asm):03988         
FC6E 01               (        forth.asm):03989         COMMA   fcb     1               79-STANDARD (REQ143)
FC6F 2C               (        forth.asm):03990                 fcc     ','
FC70 FC5A             (        forth.asm):03991                 fdb     CCOMMA
FC72 C7               (        forth.asm):03992                 RFCS
FC73 BDE698           (        forth.asm):03993 (7)             jsr     NPOP
FC76 109E08           (        forth.asm):03994 (5)             ldy     DICEND
FC79 AFA1             (        forth.asm):03995 (5+2)           stx     ,y++
FC7B 109F08           (        forth.asm):03996 (5)             sty     DICEND
FC7E 39               (        forth.asm):03997 (4)             rts
                      (        forth.asm):03998         
FC7F 05               (        forth.asm):03999         ALLOT   fcb     5               79-STANDARD (REQ154)
FC80 414C4C4F54       (        forth.asm):04000                 fcc     'ALLOT'         ( signedbytecount -- )
FC85 FC6E             (        forth.asm):04001                 fdb     COMMA
FC87 C7               (        forth.asm):04002                 RFCS
FC88 BDE698           (        forth.asm):04003 (7)             jsr     NPOP
FC8B 109E08           (        forth.asm):04004 (5)             ldy     DICEND
FC8E 103012           (        forth.asm):04005 (4)             addr    x,y
FC91 109F08           (        forth.asm):04006 (5)             sty     DICEND
FC94 39               (        forth.asm):04007 (4)             rts
                      (        forth.asm):04008         
FC95 04               (        forth.asm):04009         FILL    fcb     4               79-STANDARD (REQ234)
FC96 46494C4C         (        forth.asm):04010                 fcc     'FILL'
FC9A FC7F             (        forth.asm):04011                 fdb     ALLOT
FC9C C7               (        forth.asm):04012                 RFCS
FC9D BDE698           (        forth.asm):04013 (7)             jsr     NPOP
FCA0 1F16             (        forth.asm):04014 (4)             tfr     x,w             Byte fill value to W
FCA2 BDE698           (        forth.asm):04015 (7)     FILL1   jsr     NPOP
FCA5 1F12             (        forth.asm):04016 (4)             tfr     x,y             Byte count to Y
FCA7 1E26             (        forth.asm):04017 (5)             exg     y,w             Byte count to W, byte fill value to Y
FCA9 BDE698           (        forth.asm):04018 (7)             jsr     NPOP            Destination address to X
FCAC 105D             (        forth.asm):04019 (2)             tstw
FCAE 2F0B             (        forth.asm):04020 (3)             ble     @filend
FCB0 1F20             (        forth.asm):04021 (4)             tfr     y,d             Byte fill value to B
FCB2 E784             (        forth.asm):04022 (4+0)           stb     ,x
FCB4 105A             (        forth.asm):04023 (2)             decw
FCB6 3101             (        forth.asm):04024 (4+1)           leay    1,x
FCB8 113812           (        forth.asm):04025 (6+?)           tfm     x+,y+
FCBB 39               (        forth.asm):04026 (4)     @filend rts
                      (        forth.asm):04027         
FCBC 06               (        forth.asm):04028         BLANKS  fcb     6               79-STANDARD (REF152)
FCBD 424C414E4B53     (        forth.asm):04029                 fcc     'BLANKS'
FCC3 FC95             (        forth.asm):04030                 fdb     FILL
FCC5 C7               (        forth.asm):04031                 RFCS
FCC6 10860020         (        forth.asm):04032 (4)             ldw     #SP
FCCA 20D6             (        forth.asm):04033 (3)             bra     FILL1
                      (        forth.asm):04034         
FCCC 06               (        forth.asm):04035         CMOVED  fcb     6               FORTH-83
FCCD 434D4F56453E     (        forth.asm):04036                 fcc     'CMOVE>'
FCD3 FCBC             (        forth.asm):04037                 fdb     BLANKS
FCD5 C7               (        forth.asm):04038                 RFCS
FCD6 BDE44A           (        forth.asm):04039 (7)             jsr     ACQMOVP
FCD9 105D             (        forth.asm):04040 (2)             tstw
FCDB 270D             (        forth.asm):04041 (3)             beq     @cmovd1
FCDD 105A             (        forth.asm):04042 (2)             decw
FCDF 103061           (        forth.asm):04043 (4)             addr    w,x
FCE2 103062           (        forth.asm):04044 (4)             addr    w,y
FCE5 105C             (        forth.asm):04045 (2)             incw
FCE7 113912           (        forth.asm):04046 (6+?)           tfm     x-,y-
FCEA 39               (        forth.asm):04047 (4)     @cmovd1 rts
                      (        forth.asm):04048         
FCEB 06               (        forth.asm):04049         DCMOVE  fcb     6               79-STANDARD (REF)
FCEC 3C434D4F5645     (        forth.asm):04050                 fcc     '<CMOVE'
FCF2 FCCC             (        forth.asm):04051                 fdb     CMOVED
FCF4 C7               (        forth.asm):04052                 RFCS
FCF5 BDE44A           (        forth.asm):04053 (7)             jsr     ACQMOVP
FCF8 113912           (        forth.asm):04054 (6+?)           tfm     x-,y-
FCFB 39               (        forth.asm):04055 (4)             rts
                      (        forth.asm):04056         
FCFC 05               (        forth.asm):04057         CMOVE   fcb     5               79-STANDARD (REQ153)
FCFD 434D4F5645       (        forth.asm):04058                 fcc     'CMOVE'
FD02 FCEB             (        forth.asm):04059                 fdb     DCMOVE
FD04 C7               (        forth.asm):04060                 RFCS
FD05 BDE44A           (        forth.asm):04061 (7)             jsr     ACQMOVP
FD08 113812           (        forth.asm):04062 (6+?)           tfm     x+,y+
FD0B 39               (        forth.asm):04063 (4)             rts
                      (        forth.asm):04064         
FD0C 04               (        forth.asm):04065         MOVE    fcb     4               79-STANDARD (REQ113)
FD0D 4D4F5645         (        forth.asm):04066                 fcc     'MOVE'          ( srcaddr dstaddr ncells -- )
FD11 FCFC             (        forth.asm):04067                 fdb     CMOVE
FD13 C7               (        forth.asm):04068                 RFCS
FD14 BDE44A           (        forth.asm):04069 (7)             jsr     ACQMOVP
FD17 105D             (        forth.asm):04070 (2)             tstw
FD19 2F06             (        forth.asm):04071 (3)             ble     @move1
FD1B 103066           (        forth.asm):04072 (4)             addr    w,w             Convert cells to bytes
FD1E 113812           (        forth.asm):04073 (6+?)           tfm     x+,y+
FD21 39               (        forth.asm):04074 (4)     @move1  rts
                      (        forth.asm):04075         
FD22 05               (        forth.asm):04076         CELLS   fcb     5               ANSI-X3.215-1994
FD23 43454C4C53       (        forth.asm):04077                 fcc     'CELLS'
FD28 FD0C             (        forth.asm):04078                 fdb     MOVE
FD2A C7               (        forth.asm):04079                 RFCS
FD2B BDE698           (        forth.asm):04080 (7)             jsr     NPOP
FD2E 103011           (        forth.asm):04081 (4)             addr    x,x
FD31 3610             (        forth.asm):04082                 UCNPUSH
FD33 39               (        forth.asm):04083 (4)             rts
                      (        forth.asm):04084         
FD34 04               (        forth.asm):04085         LAST    fcb     4               79-STANDARD (REF)
FD35 4C415354         (        forth.asm):04086                 fcc     'LAST'
FD39 FD22             (        forth.asm):04087                 fdb     CELLS
FD3B C7               (        forth.asm):04088                 RFCS
FD3C 9E06             (        forth.asm):04089 (4)             ldx     LSTWAD
FD3E 7EE68A           (        forth.asm):04090 (3)             jmp     NPUSH
                      (        forth.asm):04091         
FD41 04               (        forth.asm):04092         HERE    fcb     4               79-STANDARD (REQ188)
FD42 48455245         (        forth.asm):04093                 fcc     'HERE'
FD46 FD34             (        forth.asm):04094                 fdb     LAST
FD48 C7               (        forth.asm):04095                 RFCS
FD49 9E08             (        forth.asm):04096 (4)             ldx     DICEND
FD4B 7EE68A           (        forth.asm):04097 (3)             jmp     NPUSH
                      (        forth.asm):04098         
FD4E 02               (        forth.asm):04099         PLUSST  fcb     2               79-STANDARD (REQ157)
FD4F 2B21             (        forth.asm):04100                 fcc     '+!'            ( incr addr -- )
FD51 FD41             (        forth.asm):04101                 fdb     HERE
FD53 C7               (        forth.asm):04102                 RFCS
FD54 CC0242BDE304     (        forth.asm):04103                 MINDREQ 2               We need at least two cells stacked up
FD5A AEC4             (        forth.asm):04104 (5+0)           ldx     ,u              ADDR to X
FD5C EC84             (        forth.asm):04105 (5+0)           ldd     ,x              @ADDR to D
FD5E E342             (        forth.asm):04106 (5+1)           addd    2,u             Add INCR to D
FD60 ED84             (        forth.asm):04107 (5+0)   PLUSST1 std     ,x              Store the sum back to ADDR
FD62 3344             (        forth.asm):04108 (4+1)           leau    4,u             Drop two cells from the data stack
FD64 39               (        forth.asm):04109 (4)             rts
                      (        forth.asm):04110         
FD65 03               (        forth.asm):04111         ONEPST  fcb     3               79-STANDARD (REF)
FD66 312B21           (        forth.asm):04112                 fcc     '1+!'
FD69 FD4E             (        forth.asm):04113                 fdb     PLUSST
FD6B C7               (        forth.asm):04114                 RFCS
FD6C CC0244BDE304     (        forth.asm):04115                 MINDREQ 1
FD72 AEC4             (        forth.asm):04116 (5+0)           ldx     ,u
FD74 EC84             (        forth.asm):04117 (5+0)           ldd     ,x
FD76 104C             (        forth.asm):04118 (2)             incd
FD78 ED84             (        forth.asm):04119 (5+0)           std     ,x
FD7A 3342             (        forth.asm):04120 (4+1)           leau    2,u
FD7C 39               (        forth.asm):04121 (4)             rts
                      (        forth.asm):04122         
FD7D 02               (        forth.asm):04123         MINUSST fcb     2               79-STANDARD (REQ157)
FD7E 2D21             (        forth.asm):04124                 fcc     '-!'            ( incr addr -- )
FD80 FD65             (        forth.asm):04125                 fdb     ONEPST
FD82 C7               (        forth.asm):04126                 RFCS
FD83 CC0242BDE304     (        forth.asm):04127                 MINDREQ 2               We need at least two cells stacked up
FD89 AEC4             (        forth.asm):04128 (5+0)           ldx     ,u              ADDR to X
FD8B EC84             (        forth.asm):04129 (5+0)           ldd     ,x              @ADDR to D
FD8D A342             (        forth.asm):04130 (5+1)           subd    2,u             Substract INCR from D
FD8F 20CF             (        forth.asm):04131 (3)             bra     PLUSST1
                      (        forth.asm):04132         
FD91 02               (        forth.asm):04133         CSTORE  fcb     2               79-STANDARD (REQ219)
FD92 4321             (        forth.asm):04134                 fcc     'C!'            ( val8 addr -- )
FD94 FD7D             (        forth.asm):04135                 fdb     MINUSST
FD96 C7               (        forth.asm):04136                 RFCS
FD97 CC0242BDE304     (        forth.asm):04137                 MINDREQ 2               We need at least two cells stacked up
FD9D A643             (        forth.asm):04138 (4+1)           lda     3,u             VAL8 to A
FD9F A7D4             (        forth.asm):04139 (4+3)           sta     [,u]            Actual store to ADDR
FDA1 3344             (        forth.asm):04140 (4+1)           leau    4,u             Drop two cells from the data stack
FDA3 39               (        forth.asm):04141 (4)             rts
                      (        forth.asm):04142         
FDA4 01               (        forth.asm):04143         STORE   fcb     1               79-STANDARD (REQ112)
FDA5 21               (        forth.asm):04144                 fcc     '!'             ( data addr -- )
FDA6 FD91             (        forth.asm):04145                 fdb     CSTORE
FDA8 C7               (        forth.asm):04146                 RFCS
FDA9 CC0242BDE304     (        forth.asm):04147                 MINDREQ 2               At least two cells need to be stacked up
FDAF EC42             (        forth.asm):04148 (5+1)           ldd     2,u             DATA to D
FDB1 EDD4             (        forth.asm):04149 (5+3)           std     [,u]            Actual store to ADDR
FDB3 3344             (        forth.asm):04150 (4+1)           leau    4,u             Drop two cells from the user stack
FDB5 39               (        forth.asm):04151 (4)             rts
                      (        forth.asm):04152         
FDB6 02               (        forth.asm):04153         CFETCH  fcb     2               79-STANDARD (REQ156)
FDB7 4340             (        forth.asm):04154                 fcc     'C@'            ( addr -- val8 )
FDB9 FDA4             (        forth.asm):04155                 fdb     STORE
FDBB C7               (        forth.asm):04156                 RFCS
FDBC CC0244BDE304     (        forth.asm):04157                 MINDREQ 1               We need at least one cell stacked up
FDC2 4F               (        forth.asm):04158 (1)             clra
FDC3 E6D4             (        forth.asm):04159 (4+3)           ldb     [,u]
FDC5 EDC4             (        forth.asm):04160 (5+0)           std     ,u
FDC7 39               (        forth.asm):04161 (4)             rts
                      (        forth.asm):04162         
FDC8 01               (        forth.asm):04163         QMARK   fcb     1               79-STANDARD (REQ194)
FDC9 3F               (        forth.asm):04164                 fcc     '?'
FDCA FDB6             (        forth.asm):04165                 fdb     CFETCH
FDCC C7               (        forth.asm):04166                 RFCS
FDCD BD0C15           (        forth.asm):04167 (7)             jsr     RAMFTCH         Call the RAM based incarnation of @
FDD0 7EF507           (        forth.asm):04168                 RFXT    jmp,DOT+4       XT for .
                      (        forth.asm):04169         
                      (        forth.asm):04170         * End of ROM part of the builtin dictionary.
     FDD3             (        forth.asm):04171         THEEND  equ     *               This is the end, Beautiful friend
                      (        forth.asm):04172         *                               This is the end, My only friend
                      (        forth.asm):04173         
                      (        forth.asm):04174         * This transactional word is relocated to RAM, so that we can compile new
                      (        forth.asm):04175         * definitions. FORTHIN will take care of that and adjust the relevant pointers.
FDD3 01               (        forth.asm):04176         FETCH   fcb     1               79-STANDARD (REQ199)
FDD4 40               (        forth.asm):04177                 fcc     '@'             ( addr -- data )
FDD5 FDC8             (        forth.asm):04178                 fdb     QMARK
FDD7 C7               (        forth.asm):04179                 RFCS
FDD8 CC0244BDE304     (        forth.asm):04180                 MINDREQ 1               At least one cell needs to be stacked up
FDDE ECD4             (        forth.asm):04181 (5+3)           ldd     [,u]
FDE0 EDC4             (        forth.asm):04182 (5+0)           std     ,u              Returned through the data stack
FDE2 39               (        forth.asm):04183 (4)             rts
                      (        forth.asm):04184         
     FDE3             (        forth.asm):04185         REALEND equ     *
                      (        forth.asm):04186         
                      (        forth.asm):04187         *******************************************************************************
                      (        forth.asm):04188         * String literals.
                      (        forth.asm):04189         
                      (        forth.asm):04190         * Using CR+LF as it is Minicom's default.
FDE3 0C               (        forth.asm):04191         BOOTMSG fcb     FF              Form Feed (clear the screen in console context)
FDE4 5A3739466F727468 (        forth.asm):04192                 fcc     'Z79Forth - 6309 FORTH-79 Standard Sub-set.'
     202D203633303920
     464F5254482D3739
     205374616E646172
     64205375622D7365
     742E
FE0E 0D0A             (        forth.asm):04193                 fcb     CR,LF
FE10 3230323031313135 (        forth.asm):04194                 fcc     '20201115 Copyright Francois Laagel (2020).'
     20436F7079726967
     6874204672616E63
     6F6973204C616167
     656C202832303230
     292E
FE3A 0D0A0D0A00       (        forth.asm):04195                 fcb     CR,LF,CR,LF,NUL
                      (        forth.asm):04196         
FE3F 52414D3020636865 (        forth.asm):04197         RAMOKM  fcc     'RAM0 check OK: 32 KB.'
     636B204F4B3A2033
     32204B422E
FE54 0D0A00           (        forth.asm):04198         CRLFSTR fcb     CR,LF,NUL
                      (        forth.asm):04199         
FE57 52414D3020636865 (        forth.asm):04200         RAMFM   fcc     'RAM0 check failure.'
     636B206661696C75
     72652E
FE6A 0D0A00           (        forth.asm):04201                 fcb     CR,LF,NUL
                      (        forth.asm):04202         
FE6D 204F4B           (        forth.asm):04203         OKPRMPT fcc     ' OK'
FE70 0D0A00           (        forth.asm):04204                 fcb     CR,LF,NUL
                      (        forth.asm):04205         
                      (        forth.asm):04206         * Error messages for IODZHDL.
FE73 496C6C6567616C20 (        forth.asm):04207         IOPERRM fcn     'Illegal opcode near '
     6F70636F6465206E
     6561722000
FE88 4469766973696F6E (        forth.asm):04208         DV0ERRM fcn     'Division by zero near '
     206279207A65726F
     206E6561722000
                      (        forth.asm):04209         
FE9F 4461746120737461 (        forth.asm):04210         ERRMTBL fcn     'Data stack overflow'   Error 0
     636B206F76657266
     6C6F7700
FEB3 4461746120737461 (        forth.asm):04211                 fcn     'Data stack underflow'  Error 1
     636B20756E646572
     666C6F7700
FEC8 556E646566696E65 (        forth.asm):04212                 fcn     'Undefined'             Error 2
     6400
FED2 557365722041424F (        forth.asm):04213                 fcn     'User ABORT'            Error 3
     525400
FEDD 00               (        forth.asm):04214                 fcn     ''                      Error 4 (formerly "Division by zero")
FEDE 4D697373696E6720 (        forth.asm):04215                 fcn     'Missing word name'     Error 5
     776F7264206E616D
     6500
FEF0 496E636F72726563 (        forth.asm):04216                 fcn     'Incorrect STATE'       Error 6
     7420535441544500
FF00 52657475726E2073 (        forth.asm):04217                 fcn     'Return stack overflow' Error 7
     7461636B206F7665
     72666C6F7700
FF16 52657475726E2073 (        forth.asm):04218                 fcn     'Return stack underflow' Error 8
     7461636B20756E64
     6572666C6F7700
FF2D 496C6C6567616C20 (        forth.asm):04219                 fcn     'Illegal construct'     Error 9
     636F6E7374727563
     7400
FF3F 417373657274696F (        forth.asm):04220                 fcn     'Assertion failed'      Error 10
     6E206661696C6564
     00
FF50 522F4F20776F7264 (        forth.asm):04221                 fcn     'R/O word'              Error 11
     00
FF59 4D697373696E6720 (        forth.asm):04222                 fcn     'Missing delimiter'     Error 12
     64656C696D697465
     7200
FF6B 496C6C6567616C20 (        forth.asm):04223                 fcn     'Illegal argument'      Error 13
     617267756D656E74
     00
FF7C 4E6F206D61746368 (        forth.asm):04224                 fcn     'No matching CREATE'    Error 14
     696E672043524541
     544500
FF8F 496E76616C696420 (        forth.asm):04225                 fcn     'Invalid BASE'          Error 15
     4241534500
FF9C 576F7264206E616D (        forth.asm):04226                 fcn     'Word name too long'    Error 16
     6520746F6F206C6F
     6E6700
FFAF 494F206572726F72 (        forth.asm):04227                 fcn     'IO error'              Error 17
     00
                      (        forth.asm):04228         
     FFB8             (        forth.asm):04229         AVL     equ     *               Marker of available EEPROM space left
                      (        forth.asm):04230         
                      (        forth.asm):04231         *******************************************************************************
                      (        forth.asm):04232         * Interrupt vector table
                      (        forth.asm):04233                 org     VECTBL
                      (        forth.asm):04234         
FFF0 E000             (        forth.asm):04235                 fdb     IODZHDL         Illegal opcode/Division by zero trap
FFF2 E035             (        forth.asm):04236                 fdb     SWI3HDL         SWI 3 interrupt vector address
FFF4 E035             (        forth.asm):04237                 fdb     SWI2HDL         SWI 2 interrupt vector address
FFF6 E035             (        forth.asm):04238                 fdb     FIRQHDL         FIRQ interrupt vector address
FFF8 E035             (        forth.asm):04239                 fdb     IRQHDL          IRA interrupt vector address
FFFA E035             (        forth.asm):04240                 fdb     SWIHDL          SWI interrupt vector address
FFFC E035             (        forth.asm):04241                 fdb     NMIHDL          NMI vector address
FFFE E036             (        forth.asm):04242                 fdb     RSTHDL          RESET vector address
                      (        forth.asm):04243         

Symbol Table:
[ G] _BS                              E1EF
[ G] _DMPHDR                          FAF3
[ G] _DMPINT                          FAD2
[ G] _INTERP                          E0B6
[ G] ABORT                            EF92
[ G] ABS                              EE37
[ G] AC8N1                            0014
[ G] ACD16                            0001
[ G] ACD64                            0002
[ G] ACDVSEL                          0001
[ G] ACIACTL                          D800
[ G] ACIADAT                          D801
[ G] ACIOVRN                          0020
[ G] ACIRDRF                          0001
[ G] ACIRSET                          0043
[ G] ACIRTS0                          0015
[ G] ACIRTS1                          0055
[ G] ACITDRE                          0002
[ G] ACQMOVP                          E44A
[ G] ACQVMRA                          E450
[ G] ACRST                            0003
[ G] ACRTS0                           0000
[ G] ACRTS1                           0040
[ G] ADDS                             E19A
[ G] ADIV16                           E16D
[ G] AGAIN                            EE73
[ G] ALLOT                            FC7F
[ G] AND                              ED21
[ G] AVL                              FFB8
[ G] BASE                             F9DA
[ G] BCSOPC                           2503
[ G] BDICEND                          010C
[ G] BDIRTY                           0004
[ G] BEGIN                            EE65
[ G] BFDISP                           0410
[ G] BIN                              F9E8
[ G] BINUSE                           0001
[ G] BK2BBRA                          E70C
[ G] BKCHAR                           F13C
[ G] BKCOMP                           EFDC
[ G] BKIN2PT                          E711
[ G] BKQUOT                           F010
[ G] BKSLSH                           F1F3
[ G] BL                               F573
[ G] BLANKS                           FCBC
[ G] BLK                              E92C
[ G] BLK2BB                           E6DE
[ G] BLKSIZ                           0400
[ G] BLOCK                            E8FC
[ G] BLSTWAD                          010A
[ G] BMAPPD                           0002
[ G] BNEOPC                           2603
[ G] BOBLKNO                          0402
[ G] BOFLAGS                          0401
[ G] BOOTMSG                          FDE3
[ G] BS                               0008
[ G] BSBFADR                          0122
[ G] BUF0                             03F0
[ G] BUF1                             0800
[ G] BUFFER                           E8AF
[ G] BYE                              F132
[ G] CCOMMA                           FC5A
[ G] CELLS                            FD22
[ G] CF1BKRD                          E7FE
[ G] CF1BKWR                          E819
[ G] CF1BPRE                          E7E1
[ G] CF1SRD                           E7B3
[ G] CF1SWR                           E7CC
[ G] CFANTHS                          E75E
[ G] CFBASE                           C000
[ G] CFBSYB                           0080
[ G] CFCARDP                          0131
[ G] CFCHIGR                          C005
[ G] CFCLOWR                          C004
[ G] CFCMDIS                          E743
[ G] CFCMMIR                          0132
[ G] CFCOMDR                          C007
[ G] CFDATAR                          C000
[ G] CFDRHDR                          C006
[ G] CFDRQB                           0008
[ G] CFDRSEL                          E755
[ G] CFDSCB                           0010
[ G] CFDWFB                           0020
[ G] CFERRB                           0001
[ G] CFERRCD                          0133
[ G] CFERRCK                          E736
[ G] CFERROR                          C001
[ G] CFETCH                           FDB6
[ G] CFFEATR                          C001
[ G] CFIDDEV                          00EC
[ G] CFINIT                           E77C
[ G] CFLAG                            0001
[ G] CFR1SRA                          E7CB
[ G] CFRDY                            E720
[ G] CFRDYB                           0040
[ G] CFRSCTS                          0020
[ G] CFSCNTR                          C002
[ G] CFSCSZ                           0200
[ G] CFSETFT                          00EF
[ G] CFSNUMR                          C003
[ G] CFSTATR                          C007
[ G] CFWAIT                           E718
[ G] CFWSCTS                          0030
[ G] CHAR                             F14B
[ G] CHKNDPT                          E304
[ G] CHKRTS                           E145
[ G] CKBASE                           E29D
[ G] CKBASRA                          E2AD
[ G] CKDPTRA                          E30F
[ G] CKOVRUN                          0000
[ G] CMDBFSZ                          0084
[ G] CMDBUF                           02C6
[ G] CMDLNSZ                          0124
[ G] CMOVE                            FCFC
[ G] CMOVED                           FCCC
[ G] CMP2                             E433
[ G] CMP2RA                           E439
[ G] CMPCOM1                          F056
[ G] CMPCOMA                          F047
[ G] COM                              ED38
[ G] COM0                             ED3F
[ G] COMMA                            FC6E
[ G] COMP                             E103
[ G] COMPC                            F065
[ G] COMPILE                          F02A
[ G] COMPLRA                          E11D
[ G] COMPR                            F07D
[ G] CONS                             EA8D
[ G] CONTIND                          F6E8
[ G] CONVERT                          F37E
[ G] COUNT                            F5E7
[ G] CR                               000D
[ G] CREAT0                           EA1D
[ G] CREAT1                           EA35
[ G] CREATE                           EA13
[ G] CRLF                             F5B3
[ G] CRLFSTR                          FE54
[ G] CSSNTVE                          0000
[ G] CSTORE                           FD91
[ G] CSUMFLM                          EB7A
[ G] CURTOKL                          012D
[ G] CVISSGN                          012C
[ G] CVNSTR                           E30F
[ G] CVT                              F446
[ G] CVT0                             F44D
[ G] CVT1                             F455
[ G] CVTB                             F4F6
[ G] CVTE                             F3FA
[ G] CVTFCN                           012A
[ G] DASHTR                           F5FD
[ G] DCMOVE                           FCEB
[ G] DDUMP                            FB31
[ G] DEBUG                            0000
[ G] DECIMAL                          FA04
[ G] DEFFLG                           012F
[ G] DEFFLM                           0040
[ G] DEPTH                            E9FD
[ G] DEV0                             C000
[ G] DEV1                             C400
[ G] DEV2                             C800
[ G] DEV3                             CC00
[ G] DEV4                             D000
[ G] DEV5                             D400
[ G] DEV6                             D800
[ G] DEV7                             DC00
[ G] DICEND                           0108
[ G] DIFF                             ECB5
[ G] DIV                              F85E
[ G] DIV1                             F867
[ G] DIVFCN                           0128
[ G] DLESS                            F2D0
[ G] DNEG                             F29D
[ G] DO                               EB91
[ G] DOES                             EA3D
[ G] DOESEX                           EA4C
[ G] DOEX                             EBA4
[ G] DOT                              F502
[ G] DOTR                             F52C
[ G] DOTR0                            F536
[ G] DOTTICK                          FB1A
[ G] DPLUS                            F27B
[ G] DPOPRA                           E6A6
[ G] DPSHRA                           E697
[ G] DROP                             FBC3
[ G] DUMP                             FA22
[ G] DUP                              FBB1
[ G] DV0ERRM                          FE88
[ G] DZEQ                             F2C3
[ G] EBUFS                            E834
[ G] ELSE                             EC66
[ G] EMIT                             F74F
[ G] EMPT1B                           E272
[ G] EMPTYB                           E26A
[ G] END                              EECB
[ G] EQ                               EC99
[ G] ERRHD1                           E614
[ G] ERRHDLR                          E611
[ G] ERRMTBL                          FE9F
[ G] ERRPCK                           FBFD
[ G] ETX                              0003
[ G] EXCT                             F118
[ G] EXIT                             EE91
[ G] EXPECT                           F638
[ G] FDCTSYM                          E45B
[ G] FETCH                            FDD3
[ G] FF                               000C
[ G] FILL                             FC95
[ G] FILL1                            FCA2
[ G] FIND                             EFA6
[ G] FINDSYM                          E4CF
[ G] FIRQHDL                          E035
[ G] FLUSH                            E889
[ G] FORGET                           F0C9
[ G] FORTHIN                          E23E
[ G] GETCH                            E1C3
[ G] GETS                             E1FB
[ G] HDMP2                            E18B
[ G] HDMP4                            E172
[ G] HDRCSUM                          EB24
[ G] HDRSKIP                          EB1A
[ G] HERE                             FD41
[ G] HEX                              FA15
[ G] HEX1D                            E159
[ G] HEXBFSZ                          0050
[ G] HEXBUF                           034A
[ G] HOLD                             F42A
[ G] HT                               0009
[ G] ICHECK                           EB30
[ G] IF                               EC25
[ G] IFEX                             EC4D
[ G] ILLOPC                           00C7
[ G] IMDFLG                           012E
[ G] IMDFLM                           0080
[ G] IMMED                            EAD4
[ G] IMMED1                           EAE3
[ G] INDEX                            E96E
[ G] INDI                             EF30
[ G] INDIP                            EF55
[ G] INDJ                             EF5F
[ G] INDJP                            EF68
[ G] INDK                             EF72
[ G] INF                              EDF6
[ G] INIT                             E048
[ G] INSBPAD                          F4E3
[ G] INTERP                           E09E
[ G] INTISRA                          E0F1
[ G] INTRPRA                          E0FE
[ G] INVERT                           ED4B
[ G] IODZHDL                          E000
[ G] IOERR                            E7C6
[ G] IOPERRM                          FE73
[ G] IOSTRT                           C000
[ G] IRDPTH                           0126
[ G] IRQHDL                           E035
[ G] ISNEGF                           012B
[ G] JMPOPC                           007E
[ G] JSRLAST                          0110
[ G] JSROPC                           00BD
[ G] KEY                              F73D
[ G] KEYP                             F71D
[ G] LAST                             FD34
[ G] LBRACK                           EFD4
[ G] LDXOPC                           008E
[ G] LEAVE                            EF1B
[ G] LF                               000A
[ G] LINE                             E953
[ G] LIST                             E9A2
[ G] LITER                            E417
[ G] LITERAL                          EA6A
[ G] LOAD                             F677
[ G] LOCWRT                           E3B5
[ G] LOOP                             EBAD
[ G] LOOP1                            EBB8
[ G] LOOPEX                           EBD4
[ G] LPAR                             F1B9
[ G] LSTWAD                           0106
[ G] LWMNRA                           E3CB
[ G] MAX                              EE05
[ G] MDIV                             F8A3
[ G] MILLIS                           F702
[ G] MILLIS1                          F711
[ G] MIN                              EE1E
[ G] MINTLRA                          E0B4
[ G] MINUS                            F79C
[ G] MINUSST                          FD7D
[ G] MOD                              F896
[ G] MONFLM                           0020
[ G] MONITOR                          EAFD
[ G] MORE                             E0CC
[ G] MOVE                             FD0C
[ G] MROT                             FC4E
[ G] MRUBUFA                          0116
[ G] MSLCNT                           03E2
[ G] MULT                             F822
[ G] NAK                              0015
[ G] NBCTFB0                          0130
[ G] NCLR                             E9E1
[ G] NDCTWKS                          E4F5
[ G] NEGATE                           EE4E
[ G] NFLAG                            0008
[ G] NIP                              FB9D
[ G] NMCVCRA                          E13E
[ G] NMCVIRA                          E0C7
[ G] NMIHDL                           E035
[ G] NOT                              EDA3
[ G] NPOP                             E698
[ G] NPUSH                            E68A
[ G] NSTBOT                           0246
[ G] NSTKSZ                           00C0
[ G] NSTTOP                           0186
[ G] NUL                              0000
[ G] NULP                             ED8B
[ G] NUMCVRA                          E304
[ G] NUMCVT                           E2AD
[ G] NXTBLK                           F6CD
[ G] NXTBLK1                          F6D8
[ G] OCTAL                            F9F5
[ G] OKPRMPT                          FE6D
[ G] ONEL                             F7E1
[ G] ONEM                             F7B0
[ G] ONEP                             F775
[ G] ONEPST                           FD65
[ G] OR                               ED0B
[ G] OVER                             FC17
[ G] PAD                              F5BC
[ G] PADBSZ                           0051
[ G] PADBUF                           0134
[ G] PAGE                             F5A6
[ G] PICK                             FBE5
[ G] PICK1                            FBF0
[ G] PLOOP                            EBD9
[ G] PLOOPEX                          EBE7
[ G] PLOPEX1                          EBEA
[ G] PLUS                             F761
[ G] PLUSST                           FD4E
[ G] PLUSST1                          FD60
[ G] POSTPON                          F01C
[ G] pragma                           0000
[ G] PRBLKIN                          E5EC
[ G] PSTR                             F211
[ G] PSTRCMP                          F24B
[ G] ptop0                            F50B
[ G] PUTCH                            E1B4
[ G] PUTCR                            E1E5
[ G] PUTS                             E1D8
[ G] QMARK                            FDC8
[ G] QRYDUP                           FB6C
[ G] QUIT                             EF7B
[ G] RAMCHK                           E058
[ G] RAMFAIL                          E06A
[ G] RAMFM                            FE57
[SG] RAMFTCH                          0C15
[SG] RAMFTCH                          0C14
[ G] RAMOK                            E07C
[ G] RAMOKM                           FE3F
[ G] RAMSIZE                          8000
[ G] RAMSTRT                          0000
[ G] RBRACK                           EFCA
[ G] RCLR                             E9ED
[ G] RDEPTH                           0125
[ G] REALEND                          FDE3
[ G] RECADDR                          010E
[ G] RECURSE                          F0B9
[ G] RELFEAT                          0001
[ G] REPEAT                           EEE0
[ G] RFETCH                           EF4D
[ G] RFROM                            EF03
[ G] ROLL                             FC24
[ G] ROLL1                            FC2F
[ G] ROMSTRT                          E000
[ G] ROT                              FC42
[ G] RPICKN                           EF37
[ G] RPOP                             E6C5
[ G] RPOPRA                           E6DE
[ G] RPSHRA                           E6C4
[ G] RPUSH                            E6A7
[ G] RSP                              0100
[ G] RSTBOT                           02C6
[ G] RSTHDL                           E036
[ G] RSTKSZ                           0080
[ G] RSTRCT                           EAED
[ G] RSTTOP                           0246
[ G] RTSOPC                           0039
[ G] RTSREMV                          0127
[ G] SAVBUF                           E848
[ G] SCNETOK                          E28B
[ G] SCNSTOK                          E27D
[ G] SCR                              E946
[ G] SHARPS                           F43A
[ G] SHIFT                            F7F7
[ G] SIGN                             F413
[ G] SINFEQ                           ECD2
[ G] SLEN                             E1A5
[ G] SOURCE                           F1D5
[ G] SP                               0020
[ G] SPACE                            F57F
[ G] SPACES                           F58D
[ G] SSDFEAT                          0001
[ G] STATE                            F9CB
[ G] STORE                            FDA4
[ G] STRCT79                          0000
[ G] STRSL1                           F8B9
[ G] STRSLMD                          F8D9
[ G] STRSLSH                          F8AF
[ G] STSLFCN                          0129
[ G] SUP                              EDE7
[ G] SWAP                             FBCE
[ G] SWDIC                            E358
[ G] SWI2HDL                          E035
[ G] SWI3HDL                          E035
[ G] SWIHDL                           E035
[ G] SYSSTK                           F8E6
[ G] TBUFF                            039A
[ G] TBUFSZ                           0048
[ G] TERPRET                          F651
[ G] THEEND                           FDD3
[ G] THEN                             EC87
[ G] THRU                             F6AB
[ G] TOIN                             E939
[ G] TOKENEP                          0104
[ G] TOKENSP                          0102
[ G] TOR                              EF0F
[ G] TUCK                             FB82
[ G] TWODIV                           F84B
[ G] TWODROP                          F325
[ G] TWODUP                           F337
[ G] TWOFTCH                          F367
[ G] TWOL                             F7EC
[ G] TWOM                             F7C3
[ G] TWOOVER                          F2E9
[ G] TWOP                             F788
[ G] TWOSTOR                          F352
[ G] TWOSWAP                          F305
[ G] TWOTIM                           F838
[ G] TYPE                             F5C9
[ G] UBASE                            0118
[ G] UBLK                             011E
[ G] UDOT                             F522
[ G] UDOTR                            F568
[ G] UINF                             EDBC
[ G] UNLESS                           EC54
[ G] UNLOOP                           EC15
[ G] UNTIL                            EEA2
[ G] UPDATE                           E894
[ G] USCR                             0120
[ G] USEDP                            0001
[ G] USTATE                           011A
[ G] USUP                             EDAC
[ G] UTOIN                            011C
[ G] VARCON                           E429
[ G] VARCON1                          E42B
[ G] VARCON2                          E42E
[ G] VARI                             EAAF
[ G] VARSPC                           0100
[ G] VECTBL                           FFF0
[ G] VLIST                            F8FB
[ G] VLPRVEP                          0112
[ G] VLPRVHD                          0114
[ G] WBIFDRT                          E860
[ G] WDICSPC                          0C10
[ G] WHILE                            EED4
[ G] WITHIN                           EDCC
[ G] WORD                             F174
[ G] WORDS                            F8F0
[ G] WRLNMSK                          001F
[ G] WTOOLNG                          E3E8
[ G] XOR                              ECF1
[ G] XOR1                             ED06
[ G] ZEROL                            F7D7
[ G] ZFLAG                            0004
[ G] ZGREAT                           ED57
[ G] ZLESS                            ED71
