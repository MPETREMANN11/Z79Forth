                      (        forth.asm):00001         * 6309 Forth based on my 1984/07/16 TRS-80 Model 1 level II ROM implementation.
                      (        forth.asm):00002         *
                      (        forth.asm):00003         * This work is dedicated to Alain Pinaud, author of "Programmer en Forth"
                      (        forth.asm):00004         * published by Editions du P.S.I. in 1983--i.e. my virtual mentor in the field.
                      (        forth.asm):00005         * Special thanks go William Astle for his fantastic LW Tools utility set and
                      (        forth.asm):00006         * to Robert Lipe for his advice on serial line handling. Apache subversion
                      (        forth.asm):00007         * and the sdiff utility also were on my side all the time.
                      (        forth.asm):00008         *
                      (        forth.asm):00009         * Also credited for their help: Justin Poirier (seminal HW design), Daniel
                      (        forth.asm):00010         * Tufvesson (original CompactFlash interface), Peter Minuth (general Forth
                      (        forth.asm):00011         * guruness), Paul E. Bennett (ANSI compatibility advice); Michel Jean, Bill
                      (        forth.asm):00012         * Ragsdale and Pablo Hugo Reda for contributed application level code;
                      (        forth.asm):00013         * Carsten Strotmann for most of the benchmarking code (see
                      (        forth.asm):00014         * https://theultimatebenchmark.org/); Gerry Jackson and Steve R. Palmer
                      (        forth.asm):00015         * (see https://github.com/gerryjackson/forth2012-test-suite) for selected
                      (        forth.asm):00016         * bits and pieces of the Forth2012 test suite (see https://forth-standard.org/).
                      (        forth.asm):00017         *
                      (        forth.asm):00018         * This is a native Forth. Not a threaded interpretive implementation.
                      (        forth.asm):00019         * Worth noticing is the fact that the return stack does not hold return
                      (        forth.asm):00020         * addresses at all. All what is stored there is loop indexes and control
                      (        forth.asm):00021         * structures jump addresses. Actual return addresses are kept in the system
                      (        forth.asm):00022         * stack. All in all, this is the result of the work of a 19 year old guy,
                      (        forth.asm):00023         * heavily revisited 35 years later. Some quirks remain that prevent me
                      (        forth.asm):00024         * from offering the full required set--not to mention the choice of using
                      (        forth.asm):00025         * an 8K EEPROM. The downside of this implementation is that the generated
                      (        forth.asm):00026         * code is about 30% larger than a threaded interpretive implementation
                      (        forth.asm):00027         * would be. So it goes...
                      (        forth.asm):00028         *
                      (        forth.asm):00029         * The code generated is limited to a very small instruction set:
                      (        forth.asm):00030         *
                      (        forth.asm):00031         * LDXOPC        $8E     LDX (immediate)
                      (        forth.asm):00032         * JMPOPC        $7E     JMP (extended)
                      (        forth.asm):00033         * JSROPC        $BD     JSR (extended)
                      (        forth.asm):00034         * RTSOPC        $39     RTS (inherent)
                      (        forth.asm):00035         * BCSOPC        $2503   BCS *+5 (relative) Used in LOOP, +LOOP
                      (        forth.asm):00036         * BNEOPC        $2603   BNE *+5 (relative) Used in IF, UNTIL
                      (        forth.asm):00037         *
                      (        forth.asm):00038         * On error, the system stack pointer is reset. The return stack also is
                      (        forth.asm):00039         * but the data stack will be in the same state as when the error occurred.
                      (        forth.asm):00040         * ABORT and QUIT enforce their own 79-STANDARD behaviour.
                      (        forth.asm):00041         *
                      (        forth.asm):00042         * The 79-STANDARD Forth specification can be downloaded from
                      (        forth.asm):00043         * https://www.complang.tuwien.ac.at/forth/fth79std/FORTH-79.TXT
                      (        forth.asm):00044         *
                      (        forth.asm):00045         * Additionally, this implementation provides a few FORTH-83 words. Those
                      (        forth.asm):00046         * words are CMOVE> and RECURSE. See
                      (        forth.asm):00047         * http://forth.sourceforge.net/standard/fst83/FORTH-83.PRN
                      (        forth.asm):00048         * Floored division has been implemented on the top of the processor's native
                      (        forth.asm):00049         * symmetric operation (credits to David Frech). This results in a slight
                      (        forth.asm):00050         * performance loss but helps a lot with compatibility with FORTH-83 and ANSI
                      (        forth.asm):00051         * code.
                      (        forth.asm):00052         *
                      (        forth.asm):00053         * \ ['] [CHAR] .S ACCEPT CELLS CHAR COMPILE, INVERT KEY? NIP POSTPONE S>D S"
                      (        forth.asm):00054         * SOURCE TUCK U> * UNLOOP and WITHIN have been borrowed from the ANSI draft 6
                      (        forth.asm):00055         * specification. See http://www.forth.org/svfig/Win32Forth/DPANS94.txt
                      (        forth.asm):00056         *
                      (        forth.asm):00057         * RESTRICT is non-standard. It comes from GNU Forth (VolksForth). The " OK"
                      (        forth.asm):00058         * non-prompt string also does, by the way. Thanks to Anton Ertl for his terse
                      (        forth.asm):00059         * yet valuable input.
                      (        forth.asm):00060         *
                      (        forth.asm):00061         * .' (dot-tick) is non-standard. It comes from SwiftForth. It will be supported
                      (        forth.asm):00062         * whether or not the symbolic stack dump has been configured (see SSDFEAT in
                      (        forth.asm):00063         * constants.asm). However, please note that effective symbolic references will
                      (        forth.asm):00064         * be resolved only if the feature was enabled at compilation time. Otherwise
                      (        forth.asm):00065         * a simple HEX print of the cell at the top of the data stack will be
                      (        forth.asm):00066         * performed. This is meant to support Forth source code that does not depend
                      (        forth.asm):00067         * on the feature vector (see examples/dis.4th).
                      (        forth.asm):00068         *
                      (        forth.asm):00069         * MONITOR and ICHECK are also non-standard. They are intended to maintain and
                      (        forth.asm):00070         * verify the integrity of a checksum of the code section of RAM resident
                      (        forth.asm):00071         * words, with the exception of VARIABLEs and CREATEd words. CREATEd words,
                      (        forth.asm):00072         * if subject to the MONITOR treatment will also carry a code section
                      (        forth.asm):00073         * checksum, although this is not the default behaviour. The checksum will
                      (        forth.asm):00074         * consist in an extra byte added to every word's header. MONITOR and ICHECK
                      (        forth.asm):00075         * will be available whether or not the reliability feature has been configured
                      (        forth.asm):00076         * (see RELFEAT in constants.asm). They will only carry effective semantics
                      (        forth.asm):00077         * if the feature was actually enabled at compilation time. This is meant to
                      (        forth.asm):00078         * support Forth source code that does not depend on the feature vector.
                      (        forth.asm):00079         *
                      (        forth.asm):00080         * Experimental MC146818 RTC support: the feature is disabled by default
                      (        forth.asm):00081         * (see RTCFEAT in constants.asm) because it relies on undocumented schematics.
                      (        forth.asm):00082         * Also, the required underlying circuitry is not intended to ever become an
                      (        forth.asm):00083         * integral part of the Z79Forth reference board itself. Some better designed
                      (        forth.asm):00084         * form of it might eventually surface in the form of an extension specification.
                      (        forth.asm):00085         * At the time of this writing this is just a proof of concept, but whether or
                      (        forth.asm):00086         * not the feature is enabled, three extra words will be added to the dictionary.
                      (        forth.asm):00087         * They are RTC@ RTC! and TICKS They can be safely ignored.
                      (        forth.asm):00088         *
                      (        forth.asm):00089         * Forth source code portability note:
                      (        forth.asm):00090         * Because Z79Forth does not use the return stack to store return addresses,
                      (        forth.asm):00091         * it makes it quite easy to write code that is not readily portable to classic
                      (        forth.asm):00092         * threaded interpretive implementations. The resulting code will be simpler but
                      (        forth.asm):00093         * portability will be limited.
                      (        forth.asm):00094         *
                      (        forth.asm):00095         * Miscellaneous notes: RA stands for return address; EP for entry point.
                      (        forth.asm):00096         * CF is a shortcut for CompactFlash. TOS means top of the data/normal stack.
                      (        forth.asm):00097         * Occasionally, CFA is used for code field address which, in this
                      (        forth.asm):00098         * implementation, is a synonym for compilation address. XT means execution
                      (        forth.asm):00099         * token--the ANSI term for a compilation address. MSC stands for most
                      (        forth.asm):00100         * significant cell; LSC for least significant cell.
                      (        forth.asm):00101         *
                      (        forth.asm):00102         * The complete guide to the HD6309 extended instruction set can be found at:
                      (        forth.asm):00103         * https://cyberabi.ipower.com/Downloads/The_6309_Book.pdf. For convenience,
                      (        forth.asm):00104         * and with the author's explicit agreement, this document has been included
                      (        forth.asm):00105         * in this distribution. This is recommended reading for anyone altering this
                      (        forth.asm):00106         * code or trying to make some sense of it!!!
                      (        forth.asm):00107         *
                      (        forth.asm):00108         * This whole effort started out as a porting endeavour and ended up being a
                      (        forth.asm):00109         * substantial rewrite, trying to take advantage of the features of the 6309
                      (        forth.asm):00110         * as much as possible. The primary goals of this implementation are:
                      (        forth.asm):00111         * reliability, performance and code compactness. A number of bugs in the
                      (        forth.asm):00112         * original code have been fixed--some remain for sure!
                      (        forth.asm):00113         *
                      (        forth.asm):00114         * Obligatory literary reference:
                      (        forth.asm):00115         * "The paper is very heavy going, and I should never have read it, had I not
                      (        forth.asm):00116         * written it myself." John E. Littlewood (1885-1977).
                      (        forth.asm):00117         *
                      (        forth.asm):00118         * The original soundtrack for this work is available at:
                      (        forth.asm):00119         * https://youtu.be/YqXZtGyFyDo?t=4023 (J.S. Bach BWV 1080, contrapunctus 14).
                      (        forth.asm):00120         
0000                  (        forth.asm):00121         pragma  opt cd,operandsizewarning
                      (        forth.asm):00122         
                      (        forth.asm):00123                 include constants.asm
                      (    constants.asm):00001         * Begin tunable parameters section.
                      (    constants.asm):00002         
     0000             (    constants.asm):00003         CSSNTVE equ     0               Words and HEX numbers are case sensitive if NZ
     0001             (    constants.asm):00004         SSDFEAT equ     1               Set to 1 to enable the symbolic stack dump feat.
     0001             (    constants.asm):00005         RELFEAT set     1               Set to 1 to enable the reliability feature
                      (    constants.asm):00006         *                               Caution: when this is enabled, you can no
                      (    constants.asm):00007         *                               longer fit a DEBUG image into an 8 KB EEPROM
     0000             (    constants.asm):00008         RTCFEAT equ     0               Cool but the reliability feature must go...
     0000             (    constants.asm):00009         DEBUG   equ     0               Enforce assertions and miscellaneous checks
     0001             (    constants.asm):00010         HVNMI   equ     1               NMI handler support (async input debugging)
     0000             (    constants.asm):00011         HVCONV  equ     0               Include CONVERT in the default dictionary
                      (    constants.asm):00012         * Loop count for MS. This is busy waiting, so we depend on the CPU clock speed.
     031A             (    constants.asm):00013         MSLCNT  equ     794             at 4 MHz native mode
                      (    constants.asm):00014         *MSLCNT equ     994             at 5 MHz native mode
                      (    constants.asm):00015         
                      (    constants.asm):00016         * End tunable parameters section.
                      (    constants.asm):00017         
                      (    constants.asm):00018                 IFNE    RTCFEAT
0000                  (    constants.asm):00019         RELFEAT set     0               RTCFEAT disables RELFEAT
                      (    constants.asm):00020                 ENDC
                      (    constants.asm):00021         
                      (    constants.asm):00022         * Memory map.
     0000             (    constants.asm):00023         RAMSTRT equ     $0000
     8000             (    constants.asm):00024         RAMSIZE equ     $8000
     C000             (    constants.asm):00025         IOSTRT  equ     $C000
     E000             (    constants.asm):00026         ROMSTRT equ     $E000
     FFF0             (    constants.asm):00027         VECTBL  equ     $FFF0
                      (    constants.asm):00028         
                      (    constants.asm):00029         * Base address for global variables (direct page addressed).
     0100             (    constants.asm):00030         VARSPC  equ     $100
                      (    constants.asm):00031         
                      (    constants.asm):00032         * The 74HCT138 (U7) IO address decoder maps one 1 KB area per usable device.
     C000             (    constants.asm):00033         DEV0    equ     $C000           Compact Flash memory module (optional)
     C400             (    constants.asm):00034         DEV1    equ     $C400
     C800             (    constants.asm):00035         DEV2    equ     $C800
     CC00             (    constants.asm):00036         DEV3    equ     $CC00
     D000             (    constants.asm):00037         DEV4    equ     $D000
     D400             (    constants.asm):00038         DEV5    equ     $D400           MC146818 RTC (optional)
     D800             (    constants.asm):00039         DEV6    equ     $D800           HD63B50 unit 0
     DC00             (    constants.asm):00040         DEV7    equ     $DC00
                      (    constants.asm):00041         
     D800             (    constants.asm):00042         ACIACTL equ     DEV6
     D801             (    constants.asm):00043         ACIADAT equ     DEV6+1
                      (    constants.asm):00044         
                      (    constants.asm):00045         * ACIA control register bits.
     0003             (    constants.asm):00046         ACRST   equ     %00000011       ACIA master reset
                      (    constants.asm):00047         
                      (    constants.asm):00048         * 1.84320 MHz Y1: 115200 bps in the direct path, 38400 bps in the DIV3 path
     0001             (    constants.asm):00049         ACDIV16 equ     %00000001       ACIA div 16
                      (    constants.asm):00050         
     0014             (    constants.asm):00051         AC8N1   equ     %00010100       ACIA 8N1
     0000             (    constants.asm):00052         ACRTS0  equ     %00000000       ACIA RTS# low
     0040             (    constants.asm):00053         ACRTS1  equ     %01000000       ACIA RTS# high
     0080             (    constants.asm):00054         ACRDINT equ     %10000000       IRQ on RDRF
                      (    constants.asm):00055         
     0043             (    constants.asm):00056         ACIRSET equ     ACRTS1|ACRST
     00D5             (    constants.asm):00057         ACIRTS1 equ     ACRTS1|ACRDINT|AC8N1|ACDIV16
     0095             (    constants.asm):00058         ACIRTS0 equ     ACRTS0|ACRDINT|AC8N1|ACDIV16
                      (    constants.asm):00059         
                      (    constants.asm):00060         * ACIA status register bits.
     0001             (    constants.asm):00061         ACIRDRF equ     %00000001       Receive data register full
     0002             (    constants.asm):00062         ACITDRE equ     %00000010       Transmit data register empty
     0020             (    constants.asm):00063         ACIOVRN equ     %00100000       Overrun status register bit
     0080             (    constants.asm):00064         ACIISVC equ     %10000000       Interrupt needs servicing
                      (    constants.asm):00065         
                      (    constants.asm):00066         * Compact Flash parameters.
     C000             (    constants.asm):00067         CFBASE  equ     DEV0
     C000             (    constants.asm):00068         CFDATAR equ     CFBASE          R/W data register
     C001             (    constants.asm):00069         CFERROR equ     CFBASE+1        RO error register
     C001             (    constants.asm):00070         CFFEATR equ     CFBASE+1        WO features register
     C002             (    constants.asm):00071         CFSCNTR equ     CFBASE+2        R/W sector count register
     C003             (    constants.asm):00072         CFSNUMR equ     CFBASE+3        R/W sector number register
     C004             (    constants.asm):00073         CFCLOWR equ     CFBASE+4        R/W cylinder low register
     C005             (    constants.asm):00074         CFCHIGR equ     CFBASE+5        R/W cylinder high register
     C006             (    constants.asm):00075         CFDRHDR equ     CFBASE+6        R/W drive/head register
     C007             (    constants.asm):00076         CFSTATR equ     CFBASE+7        RO status register
     C007             (    constants.asm):00077         CFCOMDR equ     CFBASE+7        WO command register
                      (    constants.asm):00078         
                      (    constants.asm):00079         * CF status bits.
     0080             (    constants.asm):00080         CFBSYB  equ     %10000000       BSY status bit
     0040             (    constants.asm):00081         CFRDYB  equ     %01000000       RDY status bit
     0020             (    constants.asm):00082         CFDWFB  equ     %00100000       DWF status bit (not used)
     0010             (    constants.asm):00083         CFDSCB  equ     %00010000       DSC status bit (not used)
     0008             (    constants.asm):00084         CFDRQB  equ     %00001000       DRQ status bit
     0001             (    constants.asm):00085         CFERRB  equ     %00000001       ERR status bit
                      (    constants.asm):00086         
     0200             (    constants.asm):00087         CFSCSZ  equ     $200            Compact Flash (IDE) sector size
                      (    constants.asm):00088         
                      (    constants.asm):00089         * CF commands.
     00EC             (    constants.asm):00090         CFIDDEV equ     $EC             Identify Device
     00EF             (    constants.asm):00091         CFSETFT equ     $EF             Set Feature
     0020             (    constants.asm):00092         CFRSCTS equ     $20             Read Sectors
     0030             (    constants.asm):00093         CFWSCTS equ     $30             Write Sectors
                      (    constants.asm):00094         
                      (    constants.asm):00095         * Buffer in-memory structure:
                      (    constants.asm):00096         * data: 1024 bytes.
                      (    constants.asm):00097         * terminator: 1 byte set to 0.
                      (    constants.asm):00098         * flags: 1 byte.
                      (    constants.asm):00099         * blknum: 2 bytes.
     0001             (    constants.asm):00100         BINUSE  equ     1               Buffer is allocated (the blknum field is valid)
     0002             (    constants.asm):00101         BMAPPD  equ     2               Block has been read from the CF device
     0004             (    constants.asm):00102         BDIRTY  equ     4               Block has been marked for update
     0400             (    constants.asm):00103         BLKSIZ  equ     2*CFSCSZ        Block size is 2 CF sectors (1 KB)
                      (    constants.asm):00104         * Buffer field offsets.
     0400             (    constants.asm):00105         BOTERM  equ     BLKSIZ          Base buffer to the 'terminator' field offset
     0401             (    constants.asm):00106         BOFLAGS equ     BLKSIZ+1        Base buffer to the 'flag' field offset
     0402             (    constants.asm):00107         BOBLKNO equ     BLKSIZ+2        Base buffer to the 'blknum' field offset
                      (    constants.asm):00108         
     0410             (    constants.asm):00109         BFDISP  equ     BUF1-BUF0       Offset between resident buffers
                      (    constants.asm):00110         
                      (    constants.asm):00111         * MC146818 RTC registers.
     D400             (    constants.asm):00112         RTAS    equ     DEV5            Latch target register address offset
     D401             (    constants.asm):00113         RTDS    equ     (DEV5+1)        Actual target register access
                      (    constants.asm):00114         * RTC internal register offsets.
     0000             (    constants.asm):00115         RTOSEC  equ     0               Seconds
     0001             (    constants.asm):00116         RTOSECA equ     1               Seconds alarm
     0002             (    constants.asm):00117         RTOMIN  equ     2               Minutes
     0003             (    constants.asm):00118         RTOMINA equ     3               Minutes alarm
     0004             (    constants.asm):00119         RTOHOUR equ     4               Hours
     0005             (    constants.asm):00120         RTOHRA  equ     5               Hours alarm
     0006             (    constants.asm):00121         RTODOW  equ     6               Day of week
     0007             (    constants.asm):00122         RTODOM  equ     7               Day of month
     0008             (    constants.asm):00123         RTOMON  equ     8               Month
     0009             (    constants.asm):00124         RTOYEAR equ     9               Year
     000A             (    constants.asm):00125         RTOREGA equ     10              Register A
     000B             (    constants.asm):00126         RTOREGB equ     11              Register B
     000C             (    constants.asm):00127         RTOREGC equ     12              Register C
     000D             (    constants.asm):00128         RTOREGD equ     13              Register D
     000E             (    constants.asm):00129         RTOUMB  equ     14              Base of user defined NVRAM storage
     0032             (    constants.asm):00130         RTUMSZ  equ     50              Size of user defined NVRAM storage
     003F             (    constants.asm):00131         RTOPRES equ     (RTOUMB+RTUMSZ-1) RTC NVRAM offset for dectecting dev presence
                      (    constants.asm):00132         
                      (    constants.asm):00133         * Register A bits.
     0080             (    constants.asm):00134         RTAUIP  equ     $80             Update in progress
     0070             (    constants.asm):00135         RTADVRS equ     $70             Divider reset, not in operation
     0020             (    constants.asm):00136         RTADV32 equ     $20             In operation, 32 KHz time base
     000A             (    constants.asm):00137         RTARS64 equ     $A              32 KHz time base, 64 Hz PI (every 15.625 ms)
                      (    constants.asm):00138         
                      (    constants.asm):00139         * Register B bits.
     0080             (    constants.asm):00140         RTBSET  equ     $80
     0040             (    constants.asm):00141         RTBPIE  equ     $40
     0004             (    constants.asm):00142         RTBDM   equ     4               Set to 1 for binary register contents
     0002             (    constants.asm):00143         RTB24   equ     2               Set to 1 for 24 hour format
                      (    constants.asm):00144         
                      (    constants.asm):00145         * Register C bits.
     0040             (    constants.asm):00146         RTCPF   equ     $40             Periodic interrupt pending flag
                      (    constants.asm):00147         
                      (    constants.asm):00148         * ASCII trivia.
     0000             (    constants.asm):00149         NUL     equ     0               End of string marker
     0003             (    constants.asm):00150         ETX     equ     3               Control-C (intr)
     0008             (    constants.asm):00151         BS      equ     8               Backspace
     0009             (    constants.asm):00152         HT      equ     9               Horizontal tab
     000A             (    constants.asm):00153         LF      equ     $0A             Aka new line
     000D             (    constants.asm):00154         CR      equ     $0D             Carriage return
     0015             (    constants.asm):00155         NAK     equ     $15             Control-U (kill)
     0020             (    constants.asm):00156         SP      equ     $20             Aka BL in Forth
     0013             (    constants.asm):00157         XOFF    equ     $13             Aka DC3
     0011             (    constants.asm):00158         XON     equ     $11             Aka DC1
                      (    constants.asm):00159         
                      (    constants.asm):00160         * Stack sizes.
     00C0             (    constants.asm):00161         NSTKSZ  equ     192             Expressed in bytes. Now only limited by RAM size
     0080             (    constants.asm):00162         RSTKSZ  equ     128             Expressed in bytes
                      (    constants.asm):00163         
                      (    constants.asm):00164         * Buffer sizes.
     0084             (    constants.asm):00165         CMDBFSZ equ     132             Command line entry buffer
     0050             (    constants.asm):00166         HEXBFSZ equ     80
     0048             (    constants.asm):00167         TBUFSZ  equ     72              Used by VLIST to print word name and CVNSTR
     0051             (    constants.asm):00168         PADBSZ  equ     1+80            79-STANDARD mandates a minimum of 64 bytes
     0040             (    constants.asm):00169         SERBSZ  equ     64              Serial buffer size. Needs to be a power of 2
                      (    constants.asm):00170         
                      (    constants.asm):00171         * Dictionary flag masks.
     0080             (    constants.asm):00172         IMDFLM  equ     $80             Immediate flag mask
     0040             (    constants.asm):00173         DEFFLM  equ     $40             Compilation only flag mask
                      (    constants.asm):00174                 IFNE    RELFEAT
     0020             (    constants.asm):00175         MONFLM  equ     $20             Monitored flag mask. This indicates that the
                      (    constants.asm):00176         *                               word to which it relates might be checked for
                      (    constants.asm):00177         *                               integrity. This applies by default to all words
                      (    constants.asm):00178         *                               defined with : and all constants. It might
                      (    constants.asm):00179         *                               also apply to any other CREATEd object by
                      (    constants.asm):00180         *                               resorting to the MONITOR word. Using MONITOR
                      (    constants.asm):00181         *                               on variable word contents is guaranteed to
                      (    constants.asm):00182         *                               raise ICHECK's attention.
                      (    constants.asm):00183                 ENDC
                      (    constants.asm):00184         
     001F             (    constants.asm):00185         WRLNMSK equ     $1F             31 character is the maximum word length
                      (    constants.asm):00186         
                      (    constants.asm):00187         * 6309 opcodes.
     008E             (    constants.asm):00188         LDXOPC  equ     $8E             LDX (immediate)
     007E             (    constants.asm):00189         JMPOPC  equ     $7E             JMP (extended)
     00BD             (    constants.asm):00190         JSROPC  equ     $BD             JSR (extended)
     0039             (    constants.asm):00191         RTSOPC  equ     $39             RTS (inherent)
     2503             (    constants.asm):00192         BCSOPC  equ     $2503           BCS *+5 (relative)
     2603             (    constants.asm):00193         BNEOPC  equ     $2603           BNE *+5 (relative)
     00C7             (    constants.asm):00194         ILLOPC  equ     $C7             An illegal operation code. Meant to raise a trap
                      (    constants.asm):00195         
     0001             (    constants.asm):00196         CFLAG   equ     1               CC bit 0 (C)
     0004             (    constants.asm):00197         ZFLAG   equ     4               CC bit 2 (Z)
     0010             (    constants.asm):00198         IFLAG   equ     $10             CC bit 4 (I)
     0040             (    constants.asm):00199         FFLAG   equ     $40             CC bit 6 (F)
                      (    constants.asm):00200         
                      (    constants.asm):00201         * RAM based execution token for @.
     0C64             (    constants.asm):00202         RAMFTCH set     WDICSPC+4       Dictionary header overhead is word's length + 3
                      (    constants.asm):00203                 IFNE    RELFEAT         The reliability features adds one byte to the
     0C65             (    constants.asm):00204         RAMFTCH set     WDICSPC+5       header: a checksum.
                      (    constants.asm):00205                 ENDC
                      (    constants.asm):00206         
                      (        forth.asm):00124         
                      (        forth.asm):00125         * Unchecked NPUSH. This is for situations in which there is absolutely no
                      (        forth.asm):00126         * chance of overflow. For instance, in case we just popped 2 cells and push
                      (        forth.asm):00127         * back one or two.
0000                  (        forth.asm):00128         UCNPUSH MACRO   NOEXPAND
                      (        forth.asm):00129                 pshu    x
                      (        forth.asm):00130                 ENDM
                      (        forth.asm):00131         
                      (        forth.asm):00132         * Unchecked NPOP. To be used only after trusted words have been invoked, i.e.
                      (        forth.asm):00133         * when one is positively sure that the data stack contains at least one cell.
0000                  (        forth.asm):00134         UCNPOP  MACRO   NOEXPAND
                      (        forth.asm):00135                 pulu    x
                      (        forth.asm):00136                 ENDM
                      (        forth.asm):00137         
                      (        forth.asm):00138         * Make sure minimum data stack requirements are satisfied upon word entry.
                      (        forth.asm):00139         * The requirement is expressed in cell size--2 bytes on the 6309.
                      (        forth.asm):00140         * \1 specifies the required number of cells.
0000                  (        forth.asm):00141         MINDREQ MACRO   NOEXPAND
                      (        forth.asm):00142                 ldd     #NSTBOT-(\1*2)  Cell count one expects to be stacked up
                      (        forth.asm):00143                 bra     CHKNDPT         No return if the condition is not met
                      (        forth.asm):00144                 ENDM
                      (        forth.asm):00145         
                      (        forth.asm):00146         * Reliability feature support: execution tokens.
                      (        forth.asm):00147         * \1 has the opcode we want to emit.
                      (        forth.asm):00148         * \2 has the execution token address, as if the header overhead always
                      (        forth.asm):00149         * was 3 bytes.
0000                  (        forth.asm):00150         RFXT    MACRO   NOEXPAND
                      (        forth.asm):00151                 IFNE    RELFEAT
                      (        forth.asm):00152                 \1      \2+1
                      (        forth.asm):00153                 ELSE
                      (        forth.asm):00154                 \1      \2
                      (        forth.asm):00155                 ENDC                    RELFEAT
                      (        forth.asm):00156                 ENDM
                      (        forth.asm):00157         
                      (        forth.asm):00158         * Reliability feature support: variable word header contents.
                      (        forth.asm):00159         * This is a dummy checksum only used for EEPROM resident words.
                      (        forth.asm):00160         * Those never are checked for code integrity by MONITOR.
0000                  (        forth.asm):00161         RFCS    MACRO   NOEXPAND
                      (        forth.asm):00162                 IFNE    RELFEAT
                      (        forth.asm):00163                 fcb     ILLOPC          Illegal opcode
                      (        forth.asm):00164                 ENDC                    RELFEAT
                      (        forth.asm):00165                 ENDM
                      (        forth.asm):00166         
                      (        forth.asm):00167         *******************************************************************************
                      (        forth.asm):00168         * RAM definitions. We cannot initialize globals from the assembly defs.
                      (        forth.asm):00169         * All we can do here is define addresses and size things up.
                      (        forth.asm):00170         
                      (        forth.asm):00171         * RAMSTART is 0. We leave page 0 unused as a bug proof area.
                      (        forth.asm):00172         * When compiled in debug mode, this area is filled with illegal
                      (        forth.asm):00173         * instruction opcodes ($C7).
                      (        forth.asm):00174         
                      (        forth.asm):00175                 org     VARSPC
                      (        forth.asm):00176         
                      (        forth.asm):00177         * Global pointers.
0100                  (        forth.asm):00178         RSP     rmb     2               The return stack pointer
0102                  (        forth.asm):00179         TOKENSP rmb     2               Token start pointer (STRS)
0104                  (        forth.asm):00180         TOKENEP rmb     2               Token end pointer (STRE)
0106                  (        forth.asm):00181         LSTWAD  rmb     2               Last defined word header pointer--LAST
0108                  (        forth.asm):00182         DICEND  rmb     2               Current end of the dictionary--HERE
010A                  (        forth.asm):00183         BLSTWAD rmb     2               Backup (was IX)
010C                  (        forth.asm):00184         BDICEND rmb     2               Backup (was IY)
010E                  (        forth.asm):00185         PLOAD   rmb     2               Word payload if found by SWDIC
0110                  (        forth.asm):00186         FNDPLD  rmb     2               Last code payload reported by FIND
0112                  (        forth.asm):00187         RECADDR rmb     2               Used by RECURSE
0114                  (        forth.asm):00188         JSRLAST rmb     2               Last compilation address of #JSROPC
0116                  (        forth.asm):00189         VLPRVEP rmb     2               Used in VLIST to compute word code length
0118                  (        forth.asm):00190         VLPRVHD rmb     2               Used in VLIST to compute word code length
011A                  (        forth.asm):00191         MRUBUFA rmb     2               Most recently used buffer address
011C                  (        forth.asm):00192         BSBFADR rmb     2               Base buffer address for the input stream
                      (        forth.asm):00193         
                      (        forth.asm):00194         * Global variables.
011E                  (        forth.asm):00195         UBASE   rmb     2               Base for numbers input and output--BASE
0120                  (        forth.asm):00196         USTATE  rmb     2               0 if interpreting, 1 if compiling--STATE
0122                  (        forth.asm):00197         UTOIN   rmb     2               User variable for >IN
0124                  (        forth.asm):00198         UBLK    rmb     2               User variable for BLK
0126                  (        forth.asm):00199         USCR    rmb     2               User variable for SCR (output for LIST)
0128                  (        forth.asm):00200         TIKSHI  rmb     2               RTC clock ticks updated on FIRQ
012A                  (        forth.asm):00201         TIKSLOW rmb     2               RTC clock ticks updated on FIRQ
                      (        forth.asm):00202                 IFNE    DEBUG
012C                  (        forth.asm):00203         CCREG   rmb     2               A DEBUG variable for predicates (see CMP2)
                      (        forth.asm):00204                 ENDC                    DEBUG
                      (        forth.asm):00205                 IFNE    HVNMI
012C                  (        forth.asm):00206         SBDROPC rmb     2               Char. drop count for serial input (see FIRQHDL)
                      (        forth.asm):00207                 ENDC                    HVNMI
012E                  (        forth.asm):00208         BASBKUP rmb     1               BASE backup when a base prefix is in use
012F                  (        forth.asm):00209         CMDLNSZ rmb     1               Entered character count in GETS (INTERP)
0130                  (        forth.asm):00210         RDEPTH  rmb     1               Return stack depth in cells
0131                  (        forth.asm):00211         IRDPTH  rmb     1               Return stack depth when : was last invoked
0132                  (        forth.asm):00212         RTSREMV rmb     1               If > 1, omit the final RTS when compiling
0133                  (        forth.asm):00213         DIVFCN  rmb     1               Flag used by /, MOD and /MOD
0134                  (        forth.asm):00214         F83DIVF rmb     1               FORTH-83 adjusment flag for floored division
0135                  (        forth.asm):00215         STSLFCN rmb     1               Flag used by */, */MOD
0136                  (        forth.asm):00216         CVTFCN  rmb     1               CVT: 0 => # semantics, 1 => #S semantics
0137                  (        forth.asm):00217         ISNEGF  rmb     1               Number being scanned is negative
0138                  (        forth.asm):00218         CVISSGN rmb     1               Flag: should CVNSTR consider numbers as signed
0139                  (        forth.asm):00219         CURTOKL rmb     1               Current token length. Set by SWDIC
013A                  (        forth.asm):00220         IMDFLG  rmb     1               Immediate flag
013B                  (        forth.asm):00221         DEFFLG  rmb     1               Define flag
013C                  (        forth.asm):00222         NBCTFB0 rmb     1               NZ if -->/CONTINUED invoked from the console
013D                  (        forth.asm):00223         RTCAVL  rmb     1               NZ if real time clock is present
013E                  (        forth.asm):00224         CFCARDP rmb     1               NZ if CF card present
013F                  (        forth.asm):00225         CFCMMIR rmb     1               Last CF command issued
0140                  (        forth.asm):00226         CFERRCD rmb     1               and the corresponding error code
                      (        forth.asm):00227         
                      (        forth.asm):00228         * Serial buffer parameters. Queing happens on FIRQ.
                      (        forth.asm):00229         * Dequeing occurs when GETCH is invoked.
0141                  (        forth.asm):00230         SERBENQ rmb     1               Enqueue offset
0142                  (        forth.asm):00231         SERBDEQ rmb     1               Dequeue offset
0143                  (        forth.asm):00232         SERBCNT rmb     1               Buffer byte count
0144                  (        forth.asm):00233         XMITOK  rmb     1               Software flow control on output flag
0145                  (        forth.asm):00234         SERBUF  rmb     SERBSZ          The actual buffer
                      (        forth.asm):00235         
0185                  (        forth.asm):00236         PADBUF  rmb     PADBSZ          PAD lives here. Used by <#, #, #S, #>
                      (        forth.asm):00237         
                      (        forth.asm):00238         * The normal (data) stack.
                      (        forth.asm):00239                 align   2
     01D6             (        forth.asm):00240         NSTTOP  equ     *               U's value when the data stack is full
01D6                  (        forth.asm):00241                 rmb     NSTKSZ
     0296             (        forth.asm):00242         NSTBOT  equ     *               U's value when the data stack is empty
                      (        forth.asm):00243         
                      (        forth.asm):00244         * The return stack.
     0296             (        forth.asm):00245         RSTTOP  equ     *
0296                  (        forth.asm):00246                 rmb     RSTKSZ
     0316             (        forth.asm):00247         RSTBOT  equ     *
                      (        forth.asm):00248         
0316                  (        forth.asm):00249         CMDBUF  rmb     CMDBFSZ
039A                  (        forth.asm):00250         HEXBUF  rmb     HEXBFSZ
                      (        forth.asm):00251         
03EA                  (        forth.asm):00252         TBUFF   rmb     TBUFSZ          Output for CVNSTR
                      (        forth.asm):00253         
0432 0000000000000000 (        forth.asm):00254                 align   16
     000000000000
0440                  (        forth.asm):00255         BUF0    rmb     BLKSIZ+4
                      (        forth.asm):00256         
0844 0000000000000000 (        forth.asm):00257                 align   16
     00000000
0850                  (        forth.asm):00258         BUF1    rmb     BLKSIZ+4
                      (        forth.asm):00259         
                      (        forth.asm):00260         *******************************************************************************
                      (        forth.asm):00261         * Writable dictionary section begins right here. We cannot have anything
                      (        forth.asm):00262         * statically defined at this point. Therefore, FORTHIN moves the code for @
                      (        forth.asm):00263         * to this location and sets up DICEND and LSTWAD accordingly. All the RAM
                      (        forth.asm):00264         * beyond this point (after the reallocated @ implementation) is user defined
                      (        forth.asm):00265         * material. Note that builtin words, though they cannot be forgotten (to the
                      (        forth.asm):00266         * extent they are ROM resident--not to mention inter-word dependencies),
                      (        forth.asm):00267         * might still be overridden by user definitions. VLIST will happily ignore
                      (        forth.asm):00268         * that fact and list everything in the dictionary linked list order.
                      (        forth.asm):00269         
0C54 0000000000000000 (        forth.asm):00270                 align   16
     00000000
     0C60             (        forth.asm):00271         WDICSPC equ     *
                      (        forth.asm):00272         
                      (        forth.asm):00273         *******************************************************************************
                      (        forth.asm):00274         * ROM code begins.
                      (        forth.asm):00275         
                      (        forth.asm):00276                 org     ROMSTRT
                      (        forth.asm):00277         * Trap handler: division by zero or illegal opcode. See page 4-10 of "The 6309
                      (        forth.asm):00278         * Book" for a description of interrupt stacks in native 6309 mode.
E000 113C40           (        forth.asm):00279 (4)     IODZHDL bitmd   #$40            Illegal opcode?
E003 2705             (        forth.asm):00280 (3)             beq     @iodzh1
E005 8EFE49           (        forth.asm):00281 (3)             ldx     #IOPERRM
E008 2008             (        forth.asm):00282 (3)             bra     @iodxh2
E00A 113C80           (        forth.asm):00283 (4)     @iodzh1 bitmd   #$80            Division by zero?
E00D 2726             (        forth.asm):00284 (3)             beq     @iodzh3         And you may ask yourself, well
                      (        forth.asm):00285         *                               How did I get here?
E00F 8EFE5E           (        forth.asm):00286 (3)             ldx     #DV0ERRM
E012 BDE332           (        forth.asm):00287 (7)     @iodxh2 jsr     PUTS
E015 EC6C             (        forth.asm):00288 (5+1)           ldd     12,s            Return code address (PC)
E017 108E039A         (        forth.asm):00289 (4)             ldy     #HEXBUF
E01B BDE184           (        forth.asm):00290 (7)             jsr     HDMP4   
E01E 8E039A           (        forth.asm):00291 (3)             ldx     #HEXBUF
E021 BDE332           (        forth.asm):00292 (7)             jsr     PUTS
E024 BDE33F           (        forth.asm):00293 (7)             jsr     PUTCR
E027 8EE7A5           (        forth.asm):00294 (3)             ldx     #ERRHD1
E02A AF6C             (        forth.asm):00295 (5+1)           stx     12,s            Resume execution in the error handler
E02C 8EE000           (        forth.asm):00296 (3)             ldx     #IODZHDL
E02F AF68             (        forth.asm):00297 (5+1)           stx     8,s             With Y set to IODZHDL
E031 8603             (        forth.asm):00298 (2)             lda     #3              And user ABORT error code
E033 A762             (        forth.asm):00299 (4+1)           sta     2,s             Passed back through B
E035 3B               (        forth.asm):00300 (17+?)  @iodzh3 rti
                      (        forth.asm):00301         
     E036             (        forth.asm):00302         SWI3HDL equ     *
     E036             (        forth.asm):00303         SWI2HDL equ     *
     E036             (        forth.asm):00304         IRQHDL  equ     *
     E036             (        forth.asm):00305         SWIHDL  equ     *
                      (        forth.asm):00306                 IFEQ    HVNMI
E036                  (        forth.asm):00307         NMIHDL                          These should never happen
                      (        forth.asm):00308                 ENDC
E036 3B               (        forth.asm):00309 (17+?)          rti
                      (        forth.asm):00310         
                      (        forth.asm):00311         * Interrupts are disabled by default upon reset.
                      (        forth.asm):00312         * NMI# will not be "armed" until S is initiliazed.
E037 113D01           (        forth.asm):00313 (5)     RSTHDL  ldmd    #1              Establish 6309 native mode
                      (        forth.asm):00314         
E03A 8643             (        forth.asm):00315 (2)             lda     #ACIRSET
E03C B7D800           (        forth.asm):00316 (4)             sta     ACIACTL         ACIA master reset
E03F 86D5             (        forth.asm):00317 (2)             lda     #ACIRTS1
E041 B7D800           (        forth.asm):00318 (4)             sta     ACIACTL         RTS# high, 8N1
                      (        forth.asm):00319         
E044 8EFDB6           (        forth.asm):00320 (3)             ldx     #BOOTMSG        Identity statement
                      (        forth.asm):00321         
                      (        forth.asm):00322         * Send the NUL terminated string pointed to by X to the ACIA.
                      (        forth.asm):00323         * The RAM is not yet assumed to be working.
E047 C602             (        forth.asm):00324 (2)     INIT    ldb     #ACITDRE
E049 A680             (        forth.asm):00325 (4+1)   @init0  lda     ,x+
E04B 270A             (        forth.asm):00326 (3)             beq     RAMCHK          NUL marks the end of the string
E04D F5D800           (        forth.asm):00327 (4)     @init1  bitb    ACIACTL         Wait for TDRE bit to be set
E050 27FB             (        forth.asm):00328 (3)             beq     @init1
E052 B7D801           (        forth.asm):00329 (4)             sta     ACIADAT         Transmit data
E055 20F2             (        forth.asm):00330 (3)             bra     @init0          Next char, if any
                      (        forth.asm):00331         
                      (        forth.asm):00332         * RAM0 32 KB self test (destructive).
E057 8E0000           (        forth.asm):00333 (3)     RAMCHK  ldx     #RAMSTRT
E05A AF84             (        forth.asm):00334 (5+0)   @ramch1 stx     ,x
E05C AC84             (        forth.asm):00335 (5+0)           cmpx    ,x
E05E 2609             (        forth.asm):00336 (3)             bne     RAMFAIL
E060 3002             (        forth.asm):00337 (4+1)           leax    2,x
E062 8C8000           (        forth.asm):00338 (3)             cmpx    #RAMSTRT+RAMSIZE
E065 26F3             (        forth.asm):00339 (3)             bne     @ramch1
E067 2012             (        forth.asm):00340 (3)             bra     RAMOK
                      (        forth.asm):00341         
E069 C680             (        forth.asm):00342 (2)     RAMFAIL ldb     #128
E06B 108E8000         (        forth.asm):00343 (4)     @ramf1  ldy     #$8000
E06F 313F             (        forth.asm):00344 (4+1)   @ramf2  leay    -1,y
E071 26FC             (        forth.asm):00345 (3)             bne     @ramf2
E073 5A               (        forth.asm):00346 (1)             decb
E074 26F5             (        forth.asm):00347 (3)             bne     @ramf1
E076 8EFE21           (        forth.asm):00348 (3)             ldx     #RAMFM
E079 20CC             (        forth.asm):00349 (3)             bra     INIT            Here we go again
                      (        forth.asm):00350         
                      (        forth.asm):00351         * RAM Initialization to all $C7 if DEBUG mode is enabled else zeroes.
E07B 8E0000           (        forth.asm):00352 (3)     RAMOK   ldx     #RAMSTRT
E07E 3101             (        forth.asm):00353 (4+1)           leay    1,x
E080 10867FFF         (        forth.asm):00354 (4)             ldw     #RAMSIZE-1
                      (        forth.asm):00355                 IFNE    DEBUG
                      (        forth.asm):00356                 lda     #ILLOPC
                      (        forth.asm):00357                 sta     ,x
                      (        forth.asm):00358                 ELSE
E084 6F84             (        forth.asm):00359 (6+0)           clr     ,x
                      (        forth.asm):00360                 ENDC                    DEBUG
E086 113812           (        forth.asm):00361 (6+?)           tfm     x+,y+
                      (        forth.asm):00362         
                      (        forth.asm):00363         * Initialize the system stack pointer and the direct page base address register.
E089 10CE8000         (        forth.asm):00364 (4)             lds     #RAMSTRT+RAMSIZE
E08D 8601             (        forth.asm):00365 (2)             lda     #VARSPC/256
E08F 1F8B             (        forth.asm):00366 (4)             tfr     a,dp
     01               (        forth.asm):00367                 SETDP   VARSPC/256
                      (        forth.asm):00368         
                      (        forth.asm):00369         * Serial buffer parameters initialization. We are doing this here because
                      (        forth.asm):00370         * PUTS requires prior software flow control initialization.
                      (        forth.asm):00371                 IFNE    DEBUG
                      (        forth.asm):00372                 clrd
                      (        forth.asm):00373                 std     SERBENQ         Two birds with one stone
                      (        forth.asm):00374                 sta     SERBCNT
                      (        forth.asm):00375                 IFNE    HVNMI
                      (        forth.asm):00376                 std     SBDROPC         Initialize chararacter drop count
                      (        forth.asm):00377                 ENDC                    HVNMI
                      (        forth.asm):00378                 ENDC                    DEBUG
E091 8601             (        forth.asm):00379 (2)             lda     #1              Initialize software flow control on output
E093 9744             (        forth.asm):00380 (3)             sta     XMITOK
                      (        forth.asm):00381         
E095 8EFE11           (        forth.asm):00382 (3)             ldx     #RAMOKM
E098 BDE332           (        forth.asm):00383 (7)             jsr     PUTS
E09B BDE398           (        forth.asm):00384 (7)             jsr     FORTHIN         Global variables initialization
E09E BDE8FA           (        forth.asm):00385 (7)             jsr     CFINIT          CompactFlash card initialization
                      (        forth.asm):00386                 IFNE    RTCFEAT
                      (        forth.asm):00387                 jsr     RTCINIT         Real time clock initialization
                      (        forth.asm):00388                 ENDC                    RTCFEAT
                      (        forth.asm):00389         
                      (        forth.asm):00390         * Lower RTS and enable FIRQ.
E0A1 8695             (        forth.asm):00391 (2)             lda     #ACIRTS0
E0A3 B7D800           (        forth.asm):00392 (4)             sta     ACIACTL
E0A6 1CBF             (        forth.asm):00393 (2)             andcc   #^FFLAG
                      (        forth.asm):00394         
E0A8 0D3E             (        forth.asm):00395 (4)             tst     CFCARDP
E0AA 2706             (        forth.asm):00396 (3)             beq     INTERP
                      (        forth.asm):00397         
                      (        forth.asm):00398         * A CF card is present, LOAD block #1.
E0AC 8E0001           (        forth.asm):00399 (3)             ldx     #1
E0AF BDF799           (        forth.asm):00400 (7)             jsr     LOAD1
                      (        forth.asm):00401         
                      (        forth.asm):00402         * The interpreter main loop.
E0B2 104F             (        forth.asm):00403 (2)     INTERP  clrd
E0B4 DD24             (        forth.asm):00404 (4)             std     UBLK            Interpreting from the console. Set BLK to 0
E0B6 DD22             (        forth.asm):00405 (4)             std     UTOIN
E0B8 8E0316           (        forth.asm):00406 (3)             ldx     #CMDBUF
E0BB 9F1C             (        forth.asm):00407 (4)             stx     BSBFADR
E0BD C683             (        forth.asm):00408 (2)             ldb     #CMDBFSZ-1      NUL terminator is not included in the char count
E0BF BDE355           (        forth.asm):00409 (7)             jsr     GETS            Acquire command from the console
                      (        forth.asm):00410         * Additional setup in case the ANSI \ is used.
E0C2 D72F             (        forth.asm):00411 (3)             stb     CMDLNSZ         GETS returns the entered character count via B
                      (        forth.asm):00412         * Additional preparation work for block support.
E0C4 0F3C             (        forth.asm):00413 (5)             clr     NBCTFB0         Flag whether -->/CONTINUED is called from blk 0
E0C6 8D02             (        forth.asm):00414 (6)             bsr     _INTERP
E0C8 20E8             (        forth.asm):00415 (3)     MINTLRA bra     INTERP
                      (        forth.asm):00416         
                      (        forth.asm):00417         * The interpreter itself.
E0CA BDE3CD           (        forth.asm):00418 (7)     _INTERP jsr     SCNSTOK         Scan for the beginning of a word at address X
E0CD 271A             (        forth.asm):00419 (3)             beq     @more0          This is the end
E0CF 1F10             (        forth.asm):00420 (4)             tfr     x,d             Start to token address to D
E0D1 BDE166           (        forth.asm):00421 (7)             jsr     U2INFRD         Derive >IN from D
E0D4 0D21             (        forth.asm):00422 (4)             tst     USTATE+1        We do ignore the upper byte
E0D6 2641             (        forth.asm):00423 (3)             bne     COMP            We are compiling
E0D8 BDE4EB           (        forth.asm):00424 (7)             jsr     SWDIC           Updates TOKENEP, CURTOKL, IMDFLG/DEFFLG
E0DB 2623             (        forth.asm):00425 (3)             bne     @exec           Word found, execute it
E0DD BDE42A           (        forth.asm):00426 (7)             jsr     NUMCVT
     E0E0             (        forth.asm):00427         NMCVIRA equ     *
E0E0 BDE823           (        forth.asm):00428 (7)             jsr     NPUSH
E0E3 9E04             (        forth.asm):00429 (4)             ldx     TOKENEP
E0E5 6D84             (        forth.asm):00430 (5+0)   MORE    tst     ,x
E0E7 26E1             (        forth.asm):00431 (3)             bne     _INTERP         Next token, please!
                      (        forth.asm):00432         * End of input stream condition is recognized.
E0E9 DC24             (        forth.asm):00433 (4)     @more0  ldd     UBLK
E0EB 2705             (        forth.asm):00434 (3)             beq     @more1          We are back from the console
E0ED 0D3C             (        forth.asm):00435 (4)             tst     NBCTFB0         -->/CONTINUED invoked from the console?
E0EF 2601             (        forth.asm):00436 (3)             bne     @more1          Yes
E0F1 39               (        forth.asm):00437 (4)             rts                     No, we're done here
E0F2 0F3C             (        forth.asm):00438 (5)     @more1  clr     NBCTFB0         The -->/CONTINUED exception only applies once
E0F4 8EFE43           (        forth.asm):00439 (3)             ldx     #OKFEEDB        Provide OK feedback
E0F7 0D21             (        forth.asm):00440 (4)             tst     USTATE+1        No OK feedback if we're compiling, just CRLF
E0F9 2702             (        forth.asm):00441 (3)             beq     @more2
E0FB 3003             (        forth.asm):00442 (4+1)           leax    3,x             Skip the ' OK' string when compiling
E0FD 7EE332           (        forth.asm):00443 (3)     @more2  jmp     PUTS            Back to whoever invoked us
E100 963B             (        forth.asm):00444 (3)     @exec   lda     DEFFLG
E102 2705             (        forth.asm):00445 (3)             beq     @introk         Compilation only flag is not set
E104 C606             (        forth.asm):00446 (2)             ldb     #6              Incorrect STATE
E106 BDE7A2           (        forth.asm):00447 (7)             jsr     ERRHDLR         No return
     E109             (        forth.asm):00448         INTISRA equ     *               For symbolic stack debugging purposes
E109 DC04             (        forth.asm):00449 (4)     @introk ldd     TOKENEP
E10B 8D59             (        forth.asm):00450 (6)             bsr     U2INFRD         Derive >IN from D
E10D 8EE114           (        forth.asm):00451 (3)             ldx     #INTRPRA        The return address
E110 3410             (        forth.asm):00452 (4+2)           pshs    x
E112 1F25             (        forth.asm):00453 (4)             tfr     y,pc            An indirect call to Y
E114 BDE877           (        forth.asm):00454 (7)     INTRPRA jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
E117 20CC             (        forth.asm):00455 (3)             bra     MORE
                      (        forth.asm):00456         
                      (        forth.asm):00457         * The compiler.
                      (        forth.asm):00458         * Upon entry TOKENSP has been set by a prior call to SCNSTOK.
E119 BDE4EB           (        forth.asm):00459 (7)     COMP    jsr     SWDIC           Updates TOKENEP, CURTOKL, IMDFLG/DEFFLG
E11C 271E             (        forth.asm):00460 (3)             beq     @cmpnum         Word @ TOKENSP is not in the dictionary
E11E 0D3A             (        forth.asm):00461 (4)             tst     IMDFLG
E120 2712             (        forth.asm):00462 (3)             beq     @notimd
E122 DC04             (        forth.asm):00463 (4)             ldd     TOKENEP
E124 8D40             (        forth.asm):00464 (6)             bsr     U2INFRD         Derive >IN from D
E126 8EE12D           (        forth.asm):00465 (3)             ldx     #COMPLRA        Word is immediate. Execute it.
E129 3410             (        forth.asm):00466 (4+2)           pshs    x               Return to COMPLRA
E12B 1F25             (        forth.asm):00467 (4)             tfr     y,pc            An indirect call to Y
E12D BDE877           (        forth.asm):00468 (7)     COMPLRA jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
E130 9F04             (        forth.asm):00469 (4)             stx     TOKENEP
E132 20B1             (        forth.asm):00470 (3)             bra     MORE            Branch back to the interpreter
E134 1F21             (        forth.asm):00471 (4)     @notimd tfr     y,x
E136 8D20             (        forth.asm):00472 (6)             bsr     EMXASXT         Emit X as an execution token
E138 9E04             (        forth.asm):00473 (4)     @cmpdon ldx     TOKENEP
E13A 20A9             (        forth.asm):00474 (3)             bra     MORE
E13C BDE42A           (        forth.asm):00475 (7)     @cmpnum jsr     NUMCVT
     E13F             (        forth.asm):00476         NMCVCRA equ     *
E13F BDE5BA           (        forth.asm):00477 (7)             jsr     LITER
E142 20F4             (        forth.asm):00478 (3)             bra     @cmpdon
                      (        forth.asm):00479         
                      (        forth.asm):00480         * Check whether the final RTS can be eliminated. It can only be if we have no
                      (        forth.asm):00481         * forward references to HERE when COMPR (;) is invoked. This is a rather
                      (        forth.asm):00482         * complicated matter but this implementation works on the basis that we can do
                      (        forth.asm):00483         * so safely if at least 2 subroutine calls have been issued with a return
                      (        forth.asm):00484         * stack whose depth is equal to IRDPTH, immediately prior to the invokation
                      (        forth.asm):00485         * of COMPR (;).
E144 3402             (        forth.asm):00486 (4+1)   CHKRTS  pshs    a
E146 109F14           (        forth.asm):00487 (5)             sty     JSRLAST         JSRLAST points to the latest JSR code emission
E149 9630             (        forth.asm):00488 (3)             lda     RDEPTH
E14B 9131             (        forth.asm):00489 (3)             cmpa    IRDPTH          Return stack depth when : was last invoked
E14D 2705             (        forth.asm):00490 (3)             beq     @ckrts1
E14F 0F32             (        forth.asm):00491 (5)             clr     RTSREMV
E151 3502             (        forth.asm):00492 (4+1)   @ckrts0 puls    a
E153 39               (        forth.asm):00493 (4)             rts
E154 0C32             (        forth.asm):00494 (5)     @ckrts1 inc     RTSREMV
E156 20F9             (        forth.asm):00495 (3)             bra     @ckrts0
                      (        forth.asm):00496         
                      (        forth.asm):00497         * Emit (in a code generation understanding) X as an execution token.
                      (        forth.asm):00498         * In essence, this simply inserts JSR <X> at HERE.
                      (        forth.asm):00499         * Note: this code provides support for trailing JSR elimination.
                      (        forth.asm):00500         * On input: X has the target execution token.
                      (        forth.asm):00501         * On output: Y will have HERE, A will be altered, X will be preserved.
E158 109E08           (        forth.asm):00502 (5)     EMXASXT ldy     DICEND
E15B 8DE7             (        forth.asm):00503 (6)             bsr     CHKRTS          Check if the final RTS can be omitted
E15D 86BD             (        forth.asm):00504 (2)             lda     #JSROPC         JSR extended
E15F BDE5D1           (        forth.asm):00505 (7)             jsr     VARCON2         Compile a JSR to the execution token
E162 109F08           (        forth.asm):00506 (5)             sty     DICEND
E165 39               (        forth.asm):00507 (4)             rts
                      (        forth.asm):00508         
                      (        forth.asm):00509         * Derive UTOIN from D's current value. D is altered.
E166 931C             (        forth.asm):00510 (4)     U2INFRD subd    BSBFADR
E168 DD22             (        forth.asm):00511 (4)             std     UTOIN
E16A 39               (        forth.asm):00512 (4)             rts
                      (        forth.asm):00513         
                      (        forth.asm):00514         * Store the HEX representation of the lower nibble of A to Y+.
E16B 3404             (        forth.asm):00515 (4+1)   HEX1D   pshs    b
E16D C630             (        forth.asm):00516 (2)             ldb     #'0
E16F 840F             (        forth.asm):00517 (2)             anda    #$0f
E171 810A             (        forth.asm):00518 (2)             cmpa    #10
E173 2502             (        forth.asm):00519 (3)             bcs     @hex1d1
E175 C637             (        forth.asm):00520 (2)             ldb     #'A-10
E177 103098           (        forth.asm):00521 (4)     @hex1d1 addr    b,a
E17A A7A0             (        forth.asm):00522 (4+1)           sta     ,y+
E17C 3504             (        forth.asm):00523 (4+1)           puls    b
E17E 39               (        forth.asm):00524 (4)             rts
                      (        forth.asm):00525         
E17F 44               (        forth.asm):00526 (1)     ADIV16  lsra
E180 44               (        forth.asm):00527 (1)             lsra
E181 44               (        forth.asm):00528 (1)             lsra
E182 44               (        forth.asm):00529 (1)             lsra
E183 39               (        forth.asm):00530 (4)             rts
                      (        forth.asm):00531         
                      (        forth.asm):00532         * Hexdump D to 4 bytes starting at Y.  Upon return, Y will point 1 byte
                      (        forth.asm):00533         * after the last character emitted. D is preserved.
E184 3406             (        forth.asm):00534 (4+2)   HDMP4   pshs    d
E186 8DF7             (        forth.asm):00535 (6)             bsr     ADIV16
E188 8DE1             (        forth.asm):00536 (6)             bsr     HEX1D
E18A A6E4             (        forth.asm):00537 (4+0)           lda     ,s
E18C 8DDD             (        forth.asm):00538 (6)             bsr     HEX1D
E18E A661             (        forth.asm):00539 (4+1)           lda     1,s
E190 8DED             (        forth.asm):00540 (6)             bsr     ADIV16
E192 8DD7             (        forth.asm):00541 (6)             bsr     HEX1D
E194 A661             (        forth.asm):00542 (4+1)           lda     1,s
E196 8DD3             (        forth.asm):00543 (6)             bsr     HEX1D
E198 3506             (        forth.asm):00544 (4+2)           puls    d
E19A 6FA4             (        forth.asm):00545 (6+0)           clr     ,y
E19C 39               (        forth.asm):00546 (4)             rts
                      (        forth.asm):00547         
E19D 3406             (        forth.asm):00548 (4+2)   HDMP2   pshs    d
E19F 8DDE             (        forth.asm):00549 (6)             bsr     ADIV16
E1A1 8DC8             (        forth.asm):00550 (6)             bsr     HEX1D
E1A3 A6E4             (        forth.asm):00551 (4+0)           lda     ,s
E1A5 8DC4             (        forth.asm):00552 (6)             bsr     HEX1D
E1A7 3506             (        forth.asm):00553 (4+2)           puls    d
E1A9 6FA4             (        forth.asm):00554 (6+0)           clr     ,y
E1AB 39               (        forth.asm):00555 (4)             rts
                      (        forth.asm):00556         
                      (        forth.asm):00557                 IFNE    HVNMI
                      (        forth.asm):00558         * Add string pointed to by X starting at the address stored in Y.
E1AC 3402             (        forth.asm):00559 (4+1)   ADDS    pshs    a
E1AE A680             (        forth.asm):00560 (4+1)   @adds1  lda     ,x+
E1B0 A7A0             (        forth.asm):00561 (4+1)           sta     ,y+
E1B2 26FA             (        forth.asm):00562 (3)             bne     @adds1
E1B4 3502             (        forth.asm):00563 (4+1)           puls    a
E1B6 39               (        forth.asm):00564 (4)             rts
                      (        forth.asm):00565         
E1B7 8DF3             (        forth.asm):00566 (6)     NMI2DM  bsr     ADDS
E1B9 313F             (        forth.asm):00567 (4+1)           leay    -1,y            Backward over NUL
E1BB 20E0             (        forth.asm):00568 (3)             bra     HDMP2
                      (        forth.asm):00569         
E1BD 8DED             (        forth.asm):00570 (6)     NMI4DM  bsr     ADDS
E1BF 313F             (        forth.asm):00571 (4+1)           leay    -1,y            Backward over NUL
E1C1 20C1             (        forth.asm):00572 (3)             bra     HDMP4
                      (        forth.asm):00573         
E1C3 8E03EA           (        forth.asm):00574 (3)     NMIDML  ldx     #TBUFF
E1C6 BDE332           (        forth.asm):00575 (7)             jsr     PUTS
E1C9 7EE33F           (        forth.asm):00576 (3)             jmp     PUTCR
                      (        forth.asm):00577         
                      (        forth.asm):00578         * All registers are stacked in native mode.
E1CC B6D800           (        forth.asm):00579 (4)     NMIHDL  lda     ACIACTL
E1CF 3402             (        forth.asm):00580 (4+1)           pshs    a
E1D1 9644             (        forth.asm):00581 (3)             lda     XMITOK
E1D3 3402             (        forth.asm):00582 (4+1)           pshs    a
E1D5 8601             (        forth.asm):00583 (2)             lda     #1
E1D7 9744             (        forth.asm):00584 (3)             sta     XMITOK
                      (        forth.asm):00585         * Stack structure at this point
                      (        forth.asm):00586         * 0     saved XMITOK: 1 byte
                      (        forth.asm):00587         * 1     saved ACIA status register: 1 byte
                      (        forth.asm):00588         * 2     CC
                      (        forth.asm):00589         * 3     D
                      (        forth.asm):00590         * 5     W
                      (        forth.asm):00591         * 7     DP
                      (        forth.asm):00592         * 8     X
                      (        forth.asm):00593         * 10    Y
                      (        forth.asm):00594         * 12    U
                      (        forth.asm):00595         * 14    PC
E1D9 BDE33F           (        forth.asm):00596 (7)             jsr     PUTCR
                      (        forth.asm):00597         
                      (        forth.asm):00598         * First line: CC, D, W, DP, X, Y, U, PC, S
E1DC 108E03EA         (        forth.asm):00599 (4)             ldy     #TBUFF
E1E0 8EE235           (        forth.asm):00600 (3)             ldx     #CCREGM
E1E3 A662             (        forth.asm):00601 (4+1)           lda     2,s             CC in the system stack
E1E5 8DD0             (        forth.asm):00602 (6)             bsr     NMI2DM
                      (        forth.asm):00603         
E1E7 EC63             (        forth.asm):00604 (5+1)           ldd     3,s             D in the system stack
E1E9 8DD2             (        forth.asm):00605 (6)             bsr     NMI4DM
                      (        forth.asm):00606         
E1EB EC65             (        forth.asm):00607 (5+1)           ldd     5,s             X in the system stack
E1ED 8DCE             (        forth.asm):00608 (6)             bsr     NMI4DM
                      (        forth.asm):00609         
E1EF A667             (        forth.asm):00610 (4+1)           lda     7,s             DP in the system stack
E1F1 8DC4             (        forth.asm):00611 (6)             bsr     NMI2DM
                      (        forth.asm):00612         
E1F3 EC68             (        forth.asm):00613 (5+1)           ldd     8,s             X in the system stack
E1F5 8DC6             (        forth.asm):00614 (6)             bsr     NMI4DM
                      (        forth.asm):00615         
E1F7 EC6A             (        forth.asm):00616 (5+1)           ldd     10,s            Y in the system stack
E1F9 8DC2             (        forth.asm):00617 (6)             bsr     NMI4DM
                      (        forth.asm):00618         
E1FB EC6C             (        forth.asm):00619 (5+1)           ldd     12,s            U in the system stack
E1FD 8DBE             (        forth.asm):00620 (6)             bsr     NMI4DM
                      (        forth.asm):00621         
E1FF EC6E             (        forth.asm):00622 (5+1)           ldd     14,s            PC in the system stack
E201 8DBA             (        forth.asm):00623 (6)             bsr     NMI4DM
                      (        forth.asm):00624         
E203 33E810           (        forth.asm):00625 (4+1)           leau    16,s            S in the system stack
E206 1F30             (        forth.asm):00626 (4)             tfr     u,d
E208 8DB3             (        forth.asm):00627 (6)             bsr     NMI4DM
                      (        forth.asm):00628         
E20A 8DB7             (        forth.asm):00629 (6)             bsr     NMIDML
                      (        forth.asm):00630         
                      (        forth.asm):00631         * Second line: ACIST, XMTOK, SBASE, SBENQ, SBDEQ, SBCNT, SBDROPC
E20C 108E03EA         (        forth.asm):00632 (4)             ldy     #TBUFF
E210 8EE25B           (        forth.asm):00633 (3)             ldx     #ACISTM
E213 A661             (        forth.asm):00634 (4+1)           lda     1,s             ACIA status register in the system stack
E215 8DA0             (        forth.asm):00635 (6)             bsr     NMI2DM
                      (        forth.asm):00636         
E217 A6E4             (        forth.asm):00637 (4+0)           lda     ,s              XMITOK in the system stack
E219 8D9C             (        forth.asm):00638 (6)             bsr     NMI2DM
                      (        forth.asm):00639         
E21B CC0145           (        forth.asm):00640 (3)             ldd     #SERBUF         SERBUF address
E21E 8D9D             (        forth.asm):00641 (6)             bsr     NMI4DM
                      (        forth.asm):00642         
E220 9641             (        forth.asm):00643 (3)             lda     SERBENQ         SERBENQ 8 bit offset
E222 8D93             (        forth.asm):00644 (6)             bsr     NMI2DM
                      (        forth.asm):00645         
E224 9642             (        forth.asm):00646 (3)             lda     SERBDEQ         SERBDEQ 8 bit offset
E226 8D8F             (        forth.asm):00647 (6)             bsr     NMI2DM
                      (        forth.asm):00648         
E228 9643             (        forth.asm):00649 (3)             lda     SERBCNT
E22A 8D8B             (        forth.asm):00650 (6)             bsr     NMI2DM
                      (        forth.asm):00651         
E22C DC2C             (        forth.asm):00652 (4)             ldd     SBDROPC         Number of bytes dropped because SERBUF was full
E22E 8D8D             (        forth.asm):00653 (6)             bsr     NMI4DM
                      (        forth.asm):00654         
E230 8D91             (        forth.asm):00655 (6)             bsr     NMIDML
                      (        forth.asm):00656         
E232 3262             (        forth.asm):00657 (4+1)           leas    2,s             System stack cleanup
E234 3B               (        forth.asm):00658 (17+?)          rti
                      (        forth.asm):00659         
E235 43432000         (        forth.asm):00660         CCREGM  fcn     'CC '
E239 20442000         (        forth.asm):00661         DREGM   fcn     ' D '
E23D 20572000         (        forth.asm):00662         WREGM   fcn     ' W '
E241 2044502000       (        forth.asm):00663         DPREGM  fcn     ' DP '
E246 20582000         (        forth.asm):00664         XREGM   fcn     ' X '
E24A 20592000         (        forth.asm):00665         YREGM   fcn     ' Y '
E24E 20552000         (        forth.asm):00666         UREGM   fcn     ' U '
E252 2050432000       (        forth.asm):00667         PCREGM  fcn     ' PC '
E257 20532000         (        forth.asm):00668         SREGM   fcn     ' S '
E25B 41532000         (        forth.asm):00669         ACISTM  fcn     'AS '
E25F 20584F2000       (        forth.asm):00670         XMTOKM  fcn     ' XO '
E264 2053422000       (        forth.asm):00671         SBASEM  fcn     ' SB '
E269 20454E2000       (        forth.asm):00672         SBENQM  fcn     ' EN '
E26E 2044452000       (        forth.asm):00673         SBSEQM  fcn     ' DE '
E273 20434E2000       (        forth.asm):00674         SBCNTM  fcn     ' CN '
E278 2044522000       (        forth.asm):00675         SBDRPM  fcn     ' DR '
                      (        forth.asm):00676         
                      (        forth.asm):00677                 ENDC                    HVNMI
                      (        forth.asm):00678         
                      (        forth.asm):00679         * Returns the length of the string pointed to by X (terminator excluded) in W.
E27D 3410             (        forth.asm):00680 (4+2)   SLEN    pshs    x
E27F 105F             (        forth.asm):00681 (2)             clrw
E281 105C             (        forth.asm):00682 (2)     @slen1  incw
E283 A680             (        forth.asm):00683 (4+1)           lda     ,x+
E285 26FA             (        forth.asm):00684 (3)             bne     @slen1
E287 105A             (        forth.asm):00685 (2)             decw
E289 3510             (        forth.asm):00686 (4+2)           puls    x
E28B 39               (        forth.asm):00687 (4)             rts
                      (        forth.asm):00688         
                      (        forth.asm):00689                 include console.asm
                      (      console.asm):00001         * FIRQ interrupt handler. This is entered on RDRF (input available).
E28C 3416             (      console.asm):00002 (4+4)   FIRQHDL pshs    x,d
                      (      console.asm):00003                 IFNE    RTCFEAT
                      (      console.asm):00004                 jsr     RTCIHDL         Check for RTC periodic interrupt
                      (      console.asm):00005                 ENDC                    RTCFEAT
E28E B6D800           (      console.asm):00006 (4)             lda     ACIACTL
E291 8580             (      console.asm):00007 (2)             bita    #ACIISVC        Does the ACIA need input service?
E293 2731             (      console.asm):00008 (3)             beq     @nsintr         No. This is not the IRQ source we're looking for
                      (      console.asm):00009                 IFNE    DEBUG
                      (      console.asm):00010                 bita    #ACIRDRF
                      (      console.asm):00011                 beq     @nsintr         ACIA RDRF status bit should be set in all cases
                      (      console.asm):00012                 bita    #ACIOVRN        ACIA data overrun on read?
                      (      console.asm):00013                 beq     @datval         No, incoming data is valid
                      (      console.asm):00014                 ldb     ACIADAT         Clear overrun bit and INTACK
                      (      console.asm):00015                 ldb     #'%             Error indicating character is %
                      (      console.asm):00016                 bra     @chkovf
                      (      console.asm):00017                 ENDC                    DEBUG
                      (      console.asm):00018         * Out of band characters processing.
E295 F6D801           (      console.asm):00019 (4)     @datval ldb     ACIADAT         Incoming data byte to B and INTACK
E298 C103             (      console.asm):00020 (2)             cmpb    #ETX            Control-C?
E29A 272D             (      console.asm):00021 (3)             beq     @sigint         Yes
E29C C113             (      console.asm):00022 (2)             cmpb    #XOFF
E29E 2742             (      console.asm):00023 (3)             beq     @outngo         Output is being suspended
E2A0 C111             (      console.asm):00024 (2)             cmpb    #XON
E2A2 2741             (      console.asm):00025 (3)             beq     @outok          Output is being re-enabled
E2A4 9643             (      console.asm):00026 (3)     @chkovf lda     SERBCNT
E2A6 810F             (      console.asm):00027 (2)             cmpa    #15             At high water level mark?
E2A8 2609             (      console.asm):00028 (3)             bne     @sbenq          No, proceed without negating RTS#
E2AA 3404             (      console.asm):00029 (4+1)           pshs    b
E2AC C6D5             (      console.asm):00030 (2)             ldb     #ACIRTS1
E2AE F7D800           (      console.asm):00031 (4)             stb     ACIACTL         Negate RTS#
E2B1 3504             (      console.asm):00032 (4+1)           puls    b
E2B3 8140             (      console.asm):00033 (2)     @sbenq  cmpa    #SERBSZ
                      (      console.asm):00034                 IFNE    HVNMI
E2B5 2734             (      console.asm):00035 (3)             beq     @nsdrop         Serial input buffer physically full
                      (      console.asm):00036                 ELSE
                      (      console.asm):00037                 beq     @nsintr         Serial input buffer physically full
                      (      console.asm):00038                 ENDC                    HVNMI
E2B7 4C               (      console.asm):00039 (1)             inca
E2B8 9743             (      console.asm):00040 (3)             sta     SERBCNT         Update incoming FIFO byte count
E2BA 8E0145           (      console.asm):00041 (3)             ldx     #SERBUF
E2BD 9641             (      console.asm):00042 (3)             lda     SERBENQ         Enqueue offset to A
E2BF E786             (      console.asm):00043 (4+1)           stb     a,x             Enqueue incoming character
E2C1 4C               (      console.asm):00044 (1)             inca
E2C2 843F             (      console.asm):00045 (2)             anda    #SERBSZ-1       Modulo arithmetic
E2C4 9741             (      console.asm):00046 (3)             sta     SERBENQ
E2C6 3516             (      console.asm):00047 (4+4)   @nsintr puls    d,x
E2C8 3B               (      console.asm):00048 (17+?)          rti
                      (      console.asm):00049         * Control-C was recognized.
E2C9 3264             (      console.asm):00050 (4+1)   @sigint leas    4,s             Drop D and X
E2CB 9642             (      console.asm):00051 (3)             lda     SERBDEQ
E2CD 9741             (      console.asm):00052 (3)             sta     SERBENQ
E2CF 0F43             (      console.asm):00053 (5)             clr     SERBCNT         Serial input buffer has been emptied
E2D1 BDEBB0           (      console.asm):00054                 RFXT    jsr,NCLR+7      Clear the data stack
E2D4 BDEBBC           (      console.asm):00055                 RFXT    jsr,RCLR+7      and the return stack
E2D7 10AE61           (      console.asm):00056 (6+1)           ldy     1,s             Saved PC from the FIRQ stack
E2DA 8EE7A5           (      console.asm):00057 (3)             ldx     #ERRHD1
E2DD AF61             (      console.asm):00058 (5+1)           stx     1,s             Execution continues in the error handler
E2DF C603             (      console.asm):00059 (2)             ldb     #3              with ABORT error code passed through B
E2E1 3B               (      console.asm):00060 (17+?)          rti
E2E2 4F               (      console.asm):00061 (1)     @outngo clra
E2E3 2002             (      console.asm):00062 (3)             bra     @sxmsta
E2E5 8601             (      console.asm):00063 (2)     @outok  lda     #1
E2E7 9744             (      console.asm):00064 (3)     @sxmsta sta     XMITOK          Update XMIT status flag
E2E9 20DB             (      console.asm):00065 (3)             bra     @nsintr
                      (      console.asm):00066                 IFNE    HVNMI
                      (      console.asm):00067         * Increment character drop count (displayed by NMIHDL).
E2EB DC2C             (      console.asm):00068 (4)     @nsdrop ldd     SBDROPC
E2ED 104C             (      console.asm):00069 (2)             incd
E2EF DD2C             (      console.asm):00070 (4)             std     SBDROPC
E2F1 20D3             (      console.asm):00071 (3)             bra     @nsintr
                      (      console.asm):00072                 ENDC                    HVNMI
                      (      console.asm):00073         
                      (      console.asm):00074         * We do not have to talk to the ACIA directly, unless SERBCNT is zero,
                      (      console.asm):00075         * in which case we have to lower RTS#, so as to accept incoming characters.
                      (      console.asm):00076         * This can only be called from base level!
E2F3 3416             (      console.asm):00077 (4+4)   GETCH   pshs    x,d
E2F5 0D43             (      console.asm):00078 (4)     @again  tst     SERBCNT
E2F7 260F             (      console.asm):00079 (3)             bne     @sbdind         We have incoming material
E2F9 C695             (      console.asm):00080 (2)             ldb     #ACIRTS0
E2FB F7D800           (      console.asm):00081 (4)             stb     ACIACTL         Assert RTS#
E2FE 1CBF             (      console.asm):00082 (2)             andcc   #^FFLAG         Unmask FIRQ
E300 8E0001           (      console.asm):00083 (3)             ldx     #1
E303 BDF822           (      console.asm):00084 (7)             jsr     MILLIS1         Busy waiting for one millisecond
E306 20ED             (      console.asm):00085 (3)             bra     @again          Try again
                      (      console.asm):00086         * Serial buffer data indication.
E308 1A40             (      console.asm):00087 (2)     @sbdind orcc    #FFLAG          Mask FIRQ
E30A 0A43             (      console.asm):00088 (5)             dec     SERBCNT
E30C 1CBF             (      console.asm):00089 (2)             andcc   #^FFLAG         Unmask FIRQ
E30E 8E0145           (      console.asm):00090 (3)             ldx     #SERBUF
E311 9642             (      console.asm):00091 (3)             lda     SERBDEQ         Dequeue offset to A
E313 E686             (      console.asm):00092 (4+1)           ldb     a,x             Buffered input character to B
E315 E7E4             (      console.asm):00093 (4+0)           stb     ,s              Incoming character to A in the caller's stack
E317 4C               (      console.asm):00094 (1)             inca
E318 843F             (      console.asm):00095 (2)             anda    #SERBSZ-1       Modulo arithmetic
E31A 9742             (      console.asm):00096 (3)             sta     SERBDEQ
E31C 3516             (      console.asm):00097 (4+4)           puls    d,x             Same as it ever was
E31E 39               (      console.asm):00098 (4)             rts
                      (      console.asm):00099         
E31F 3404             (      console.asm):00100 (4+1)   PUTCH   pshs    b
E321 C602             (      console.asm):00101 (2)             ldb     #ACITDRE
E323 F5D800           (      console.asm):00102 (4)     @tdrdrn bitb    ACIACTL
E326 27FB             (      console.asm):00103 (3)             beq     @tdrdrn         Drain the transmit data register
E328 0D44             (      console.asm):00104 (4)     @wfxon  tst     XMITOK          Software flow control on output
E32A 27FC             (      console.asm):00105 (3)             beq     @wfxon          Wait for XON
E32C B7D801           (      console.asm):00106 (4)             sta     ACIADAT         Transmit data
E32F 3504             (      console.asm):00107 (4+1)           puls    b
E331 39               (      console.asm):00108 (4)             rts
                      (      console.asm):00109         
                      (      console.asm):00110         * Send NUL terminated string pointed to by X to the ACIA.
E332 3416             (      console.asm):00111 (4+4)   PUTS    pshs    x,d
E334 A680             (      console.asm):00112 (4+1)   @puts1  lda     ,x+
E336 2704             (      console.asm):00113 (3)             beq     @puts2         NUL marks the end of the string
E338 8DE5             (      console.asm):00114 (6)             bsr     PUTCH
E33A 20F8             (      console.asm):00115 (3)             bra     @puts1
E33C 3516             (      console.asm):00116 (4+4)   @puts2  puls    d,x
E33E 39               (      console.asm):00117 (4)             rts
                      (      console.asm):00118         
E33F 3410             (      console.asm):00119 (4+2)   PUTCR   pshs    x
E341 8EFE1E           (      console.asm):00120 (3)             ldx     #CRLFSTR
E344 8DEC             (      console.asm):00121 (6)             bsr     PUTS
E346 3510             (      console.asm):00122 (4+2)           puls    x
E348 39               (      console.asm):00123 (4)             rts
                      (      console.asm):00124         
E349 8608             (      console.asm):00125 (2)     _BS     lda     #BS
E34B 8DD2             (      console.asm):00126 (6)             bsr     PUTCH          Output BS
E34D 8620             (      console.asm):00127 (2)             lda     #SP
E34F 8DCE             (      console.asm):00128 (6)             bsr     PUTCH          Clear character
E351 8608             (      console.asm):00129 (2)             lda     #BS
E353 20CA             (      console.asm):00130 (3)             bra     PUTCH          And go back again
                      (      console.asm):00131         
                      (      console.asm):00132         * Receive CR terminated string and store it to X.
                      (      console.asm):00133         * Upon entry B contains the receiving buffer length.
                      (      console.asm):00134         * (excluding the NUL terminator). On exit, B will
                      (      console.asm):00135         * contain the number of characters entered (excluding
                      (      console.asm):00136         * the trailing NUL). A and X are preserved. B will
                      (      console.asm):00137         * have the actual number of characters entered.
                      (      console.asm):00138         * Implementation of $05D9 in the TRS-80 Level II ROM.
E355 C102             (      console.asm):00139 (2)     GETS    cmpb    #2
E357 2401             (      console.asm):00140 (3)             bhs     @gets0          B must be 2 or more
E359 39               (      console.asm):00141 (4)             rts
E35A 3416             (      console.asm):00142 (4+4)   @gets0  pshs    x,d
E35C 8D95             (      console.asm):00143 (6)     @gets1  bsr     GETCH
E35E 8108             (      console.asm):00144 (2)             cmpa    #BS             Backspace?
E360 260B             (      console.asm):00145 (3)             bne     @gets3
E362 E161             (      console.asm):00146 (4+1)           cmpb    1,s             B upon routine entry
E364 27F6             (      console.asm):00147 (3)             beq     @gets1          Do not go beyond the beginning of the buffer
E366 8DE1             (      console.asm):00148 (6)             bsr     _BS
E368 301F             (      console.asm):00149 (4+1)           leax    -1,x
E36A 5C               (      console.asm):00150 (1)             incb
E36B 20EF             (      console.asm):00151 (3)             bra     @gets1
E36D 8115             (      console.asm):00152 (2)     @gets3  cmpa    #NAK            Kill input?
E36F 260B             (      console.asm):00153 (3)             bne     @gets5
                      (      console.asm):00154         * While B != 1,S (initial buffer length), decrement X, increment B.
E371 E161             (      console.asm):00155 (4+1)   @gets4  cmpb    1,s
E373 27E7             (      console.asm):00156 (3)             beq     @gets1
E375 8DD2             (      console.asm):00157 (6)             bsr     _BS
E377 301F             (      console.asm):00158 (4+1)           leax     -1,x
E379 5C               (      console.asm):00159 (1)             incb
E37A 20F5             (      console.asm):00160 (3)             bra     @gets4
                      (      console.asm):00161         * Regular input handling: echo input character.
E37C 810D             (      console.asm):00162 (2)     @gets5  cmpa    #CR
E37E 2709             (      console.asm):00163 (3)             beq     @gets6          Minicom only sends CR
E380 8D9D             (      console.asm):00164 (6)             bsr     PUTCH
E382 A780             (      console.asm):00165 (4+1)           sta     ,x+
E384 5A               (      console.asm):00166 (1)             decb
E385 C101             (      console.asm):00167 (2)             cmpb    #1              End of buffer reached?
E387 26D3             (      console.asm):00168 (3)             bne     @gets1
E389 8620             (      console.asm):00169 (2)     @gets6  lda     #SP
E38B 8D92             (      console.asm):00170 (6)             bsr     PUTCH
E38D 6F84             (      console.asm):00171 (6+0)           clr     ,x
E38F 1F10             (      console.asm):00172 (4)             tfr     x,d
E391 A362             (      console.asm):00173 (5+1)           subd    2,s             Actual number of characters entered
E393 E761             (      console.asm):00174 (4+1)           stb     1,s             Stored to B (through the system stack).         
E395 3516             (      console.asm):00175 (4+4)           puls    d,x
E397 39               (      console.asm):00176 (4)             rts
                      (      console.asm):00177         
                      (        forth.asm):00690         
E398 BDEBB0           (        forth.asm):00691         FORTHIN RFXT    jsr,NCLR+7      XT for NCLR. Set up the normal stack
E39B BDEBBC           (        forth.asm):00692                 RFXT    jsr,RCLR+7      XT for RCLR. Set up the return stack
                      (        forth.asm):00693         * Relocate '@' code to RAM and set it up as the last dictionary entry (RO).
E39E 8EFDA1           (        forth.asm):00694 (3)             ldx     #THEEND         Source address for tfm
E3A1 1086000D         (        forth.asm):00695 (4)             ldw     #(REALEND-THEEND) Byte count for tfm
E3A5 108E0C60         (        forth.asm):00696 (4)             ldy     #WDICSPC        Destination address for tfm
E3A9 109F06           (        forth.asm):00697 (5)             sty     LSTWAD
E3AC 113812           (        forth.asm):00698 (6+?)           tfm     x+,y+
E3AF 109F08           (        forth.asm):00699 (5)             sty     DICEND
                      (        forth.asm):00700                 IFNE    RELFEAT
E3B2 BDECD0           (        forth.asm):00701                 RFXT    jsr,MONITOR+10  XT for MONITOR (monitor @ in RAM)
                      (        forth.asm):00702                 ENDC                    RELFEAT
E3B5 8D03             (        forth.asm):00703 (6)             bsr     EMPTYB          Buffer related initializations
                      (        forth.asm):00704                 IFNE    DEBUG
                      (        forth.asm):00705                 clrd
                      (        forth.asm):00706                 std     USTATE          Initial mode is interpretation
                      (        forth.asm):00707                 std     USCR            Clear SCR
                      (        forth.asm):00708                 std     UBLK            Clear BLK
                      (        forth.asm):00709                 std     UTOIN           Clear >IN
                      (        forth.asm):00710                 ENDC                    DEBUG
E3B7 7EFB19           (        forth.asm):00711                 RFXT    jmp,DECIMAL+10  XT for DECIMAL. Default base is decimal
                      (        forth.asm):00712         
E3BA 8E0440           (        forth.asm):00713 (3)     EMPTYB  ldx     #BUF0
E3BD 8D03             (        forth.asm):00714 (6)             bsr     EMPT1B
E3BF 8E0850           (        forth.asm):00715 (3)             ldx     #BUF1
                      (        forth.asm):00716         * Empty the buffer pointed to by X.
E3C2 9F1A             (        forth.asm):00717 (4)     EMPT1B  stx     MRUBUFA         Update most recently used buffer address
E3C4 30890400         (        forth.asm):00718 (4+3)           leax    BOTERM,x        Buffer offset to the terminator field
E3C8 104F             (        forth.asm):00719 (2)             clrd
E3CA ED84             (        forth.asm):00720 (5+0)           std     ,x              Clear terminator and flags fields
                      (        forth.asm):00721                 IFNE    DEBUG
                      (        forth.asm):00722                 ldd     #$C7C7
                      (        forth.asm):00723                 std     2,x             Dummy block number
                      (        forth.asm):00724                 ENDC                    DEBUG
E3CC 39               (        forth.asm):00725 (4)             rts
                      (        forth.asm):00726         
                      (        forth.asm):00727         * Scan for the next non-space character pointed to by X.
                      (        forth.asm):00728         * That character is returned through A. Flags are set accordingly.
E3CD A680             (        forth.asm):00729 (4+1)   SCNSTOK lda     ,x+
E3CF 2704             (        forth.asm):00730 (3)             beq     @scstk1
E3D1 8120             (        forth.asm):00731 (2)             cmpa    #SP
E3D3 27F8             (        forth.asm):00732 (3)             beq     SCNSTOK
E3D5 301F             (        forth.asm):00733 (4+1)   @scstk1 leax    -1,x            Keep X pointing at the beginning of the token
E3D7 9F02             (        forth.asm):00734 (4)             stx     TOKENSP
E3D9 4D               (        forth.asm):00735 (1)             tsta                    Have to test again because LEA affects Z
E3DA 39               (        forth.asm):00736 (4)             rts
                      (        forth.asm):00737         
                      (        forth.asm):00738         * Scan for the next white space character (or NUL) as an end of token marker.
                      (        forth.asm):00739         * Upon entry:
                      (        forth.asm):00740         * - X points to the input stream.
                      (        forth.asm):00741         * Upon return:
                      (        forth.asm):00742         * - X will point to the next space character or NUL.
                      (        forth.asm):00743         * - CURTOKL will hold the current token length (returned in B).
                      (        forth.asm):00744         * - TOKENEP will point to the end of the current token.
E3DB 5F               (        forth.asm):00745 (1)     SCNETOK clrb
E3DC 5C               (        forth.asm):00746 (1)     @scetok incb
E3DD A680             (        forth.asm):00747 (4+1)           lda     ,x+
E3DF 2704             (        forth.asm):00748 (3)             beq     @scetk1
E3E1 8120             (        forth.asm):00749 (2)             cmpa    #SP
E3E3 26F7             (        forth.asm):00750 (3)             bne     @scetok
E3E5 301F             (        forth.asm):00751 (4+1)   @scetk1 leax    -1,x            Keep X pointing at the end of the token
E3E7 9F04             (        forth.asm):00752 (4)             stx     TOKENEP
E3E9 5A               (        forth.asm):00753 (1)             decb
E3EA D739             (        forth.asm):00754 (3)             stb     CURTOKL
E3EC 39               (        forth.asm):00755 (4)             rts
                      (        forth.asm):00756         
                      (        forth.asm):00757         * Check for numeric literal BASE prefix. On entry X has the input stream
                      (        forth.asm):00758         * pointer. On exit, BASE is altered if needed and the original BASE saved
                      (        forth.asm):00759         * to BASBKUP. If BASE was not changed, BASBKUP will be zero.
                      (        forth.asm):00760         * D is altered, X is updated if a BASE prefix is detected, other registers
                      (        forth.asm):00761         * are untouched.
E3ED E684             (        forth.asm):00762 (4+0)   CKNBPFX ldb     ,x              B has a potential base prefix character
E3EF 3410             (        forth.asm):00763 (4+2)           pshs    x
E3F1 8EFF83           (        forth.asm):00764 (3)             ldx     #BASALST        A associative list (A-list) of BASE prefixes
E3F4 A681             (        forth.asm):00765 (4+2)   @pflkup lda     ,x++            Potential BASE prefix character to A
E3F6 2707             (        forth.asm):00766 (3)             beq     @nopfix         Reached the end of the A-list. No prefix found
E3F8 103798           (        forth.asm):00767 (4)             cmpr    b,a             Prefix match?
E3FB 2707             (        forth.asm):00768 (3)             beq     @pfxfnd         Yes
E3FD 20F5             (        forth.asm):00769 (3)             bra     @pflkup
E3FF 0F2E             (        forth.asm):00770 (5)     @nopfix clr     BASBKUP         Nothing to be restored to BASE
E401 3510             (        forth.asm):00771 (4+2)           puls    x
E403 39               (        forth.asm):00772 (4)             rts
E404 961F             (        forth.asm):00773 (3)     @pfxfnd lda     UBASE+1
E406 972E             (        forth.asm):00774 (3)             sta     BASBKUP         Back up the current BASE value
E408 A61F             (        forth.asm):00775 (4+1)           lda     -1,x            The BASE specified by the prefix
E40A 971F             (        forth.asm):00776 (3)             sta     UBASE+1         Update BASE
E40C 3510             (        forth.asm):00777 (4+2)           puls    x
E40E 3001             (        forth.asm):00778 (4+1)           leax    1,x             Skip the prefix from the input stream
                      (        forth.asm):00779         * The following is not especially pretty since we are altering system
                      (        forth.asm):00780         * stack contents owned by the caller. Yet it remains conducive to more
                      (        forth.asm):00781         * compact code. With only a few bytes of EEPROM left, I think this is legit.
E410 6A62             (        forth.asm):00782 (6+1)           dec     2,s             Decrement the stacked up flavour of CURTOKL
E412 39               (        forth.asm):00783 (4)             rts
                      (        forth.asm):00784         
                      (        forth.asm):00785         * Restore BASE if a numeric literal BASE prefix was detected.
                      (        forth.asm):00786         * X is to be preserved at all cost!
E413 962E             (        forth.asm):00787 (3)     RSBSPFX lda     BASBKUP
E415 2702             (        forth.asm):00788 (3)             beq     @theend
E417 971F             (        forth.asm):00789 (3)             sta     UBASE+1
E419 39               (        forth.asm):00790 (4)     @theend rts
                      (        forth.asm):00791         
                      (        forth.asm):00792         * Check whether BASE is in the supported range ([2..36]).
E41A 961F             (        forth.asm):00793 (3)     CKBASE  lda     UBASE+1         BASE
E41C 8102             (        forth.asm):00794 (2)             cmpa    #2
E41E 2505             (        forth.asm):00795 (3)             blo     @ckbser         Must be >= 2
E420 8124             (        forth.asm):00796 (2)             cmpa    #36
E422 2201             (        forth.asm):00797 (3)             bhi     @ckbser         And <= 36 (the ANSI maximum)
E424 39               (        forth.asm):00798 (4)             rts
E425 C60F             (        forth.asm):00799 (2)     @ckbser ldb     #15             Invalid BASE
E427 BDE7A2           (        forth.asm):00800 (7)             jsr     ERRHDLR         No return
     E42A             (        forth.asm):00801         CKBASRA equ     *
                      (        forth.asm):00802         
                      (        forth.asm):00803         * NUMCVT performs a signed string to number conversion. The input string is
                      (        forth.asm):00804         * acquired from the input stream. Note that this routine always is called
                      (        forth.asm):00805         * after a dictionary lookup (SWDIC), so TOKENSP and CURTOKL are guaranteed
                      (        forth.asm):00806         * to have been set previously. There are two ways out this routine:
                      (        forth.asm):00807         * - redirection to the error handler (Undefined word), or
                      (        forth.asm):00808         * - a converted cell returned through X.
                      (        forth.asm):00809         * This a re-implementation based on CONVERT but unlike CONVERT, which produces
                      (        forth.asm):00810         * an unsigned double as its output, this produces a signed single cell.
E42A 8DEE             (        forth.asm):00811 (6)     NUMCVT  bsr     CKBASE          No return if BASE isn't in the [2..36] range
E42C 9639             (        forth.asm):00812 (3)             lda     CURTOKL         Character count to go through
E42E 3402             (        forth.asm):00813 (4+1)           pshs    a
E430 0F37             (        forth.asm):00814 (5)             clr     ISNEGF          Assume the result is positive
E432 9E02             (        forth.asm):00815 (4)             ldx     TOKENSP
E434 8DB7             (        forth.asm):00816 (6)             bsr     CKNBPFX         Check for numeric literal BASE prefix
                      (        forth.asm):00817         * Check for optional minus sign.
E436 A684             (        forth.asm):00818 (4+0)           lda     ,x
E438 812D             (        forth.asm):00819 (2)             cmpa    #'-
E43A 2606             (        forth.asm):00820 (3)             bne     @ncini
E43C 0C37             (        forth.asm):00821 (5)             inc     ISNEGF          Remember to negate the result before returning
E43E 3001             (        forth.asm):00822 (4+1)           leax    1,x             Skip the negativity!
E440 6AE4             (        forth.asm):00823 (6+0)           dec     ,s              Decrement token length
E442 104F             (        forth.asm):00824 (2)     @ncini  clrd                    Initialize the result
E444 119F1E           (        forth.asm):00825 (29)    @ncnxt  muld    UBASE           D multipled by BASE to Q (D:W)
E447 E680             (        forth.asm):00826 (4+1)           ldb     ,x+             Acquire next input char (ignore the product MSC)
E449 C030             (        forth.asm):00827 (2)             subb    #'0
E44B 252C             (        forth.asm):00828 (3)             blo     @ncoor          Digit out of range
E44D C10A             (        forth.asm):00829 (2)             cmpb    #10
E44F 2510             (        forth.asm):00830 (3)             blo     @ncnolt         No letter in potential BASE
                      (        forth.asm):00831                 IFEQ    CSSNTVE
E451 C111             (        forth.asm):00832 (2)             cmpb    #'A-'0
E453 2524             (        forth.asm):00833 (3)             blo     @ncoor          Greater than 9 but lower than A
E455 C131             (        forth.asm):00834 (2)             cmpb    #'a-'0
E457 2506             (        forth.asm):00835 (3)             blo     @ncisuc         Upper case already
E459 C14A             (        forth.asm):00836 (2)             cmpb    #'z-'0
E45B 221C             (        forth.asm):00837 (3)             bhi     @ncoor          Definitely out of range
E45D C020             (        forth.asm):00838 (2)             subb    #'a-'A          To upper case
                      (        forth.asm):00839                 ENDC                    CSSNTVE
E45F C007             (        forth.asm):00840 (2)     @ncisuc subb    #'A-':          A-Z to number
E461 D11F             (        forth.asm):00841 (3)     @ncnolt cmpb    UBASE+1         B has a digit. Make sure it's less than BASE
E463 2414             (        forth.asm):00842 (3)             bhs     @ncoor
                      (        forth.asm):00843         * Digit in B has been validated wrt. BASE.
E465 4F               (        forth.asm):00844 (1)             clra
E466 103060           (        forth.asm):00845 (4)             addr    w,d
E469 6AE4             (        forth.asm):00846 (6+0)           dec     ,s              Are we done yet?
E46B 26D7             (        forth.asm):00847 (3)             bne     @ncnxt          No. Iterate over to the next digit
E46D 0D37             (        forth.asm):00848 (4)             tst     ISNEGF          Are we dealing with a negative number?
E46F 2702             (        forth.asm):00849 (3)             beq     @ncdone         No
E471 1040             (        forth.asm):00850 (2)             negd                    Acknowledge the negativity
E473 3261             (        forth.asm):00851 (4+1)   @ncdone leas    1,s             Drop token length from the system stack
E475 1F01             (        forth.asm):00852 (4)             tfr     d,x             Return the result in X
E477 209A             (        forth.asm):00853 (3)             bra     RSBSPFX         Restore BASE if needed--the end
E479 3261             (        forth.asm):00854 (4+1)   @ncoor  leas    1,s             Drop token length from the system stack
E47B 9E02             (        forth.asm):00855 (4)             ldx     TOKENSP         Current digit is out of range
E47D C602             (        forth.asm):00856 (2)             ldb     #2              Undefined (X points to the offending word)
E47F BDE7A2           (        forth.asm):00857 (7)             jsr     ERRHDLR         No return
     E482             (        forth.asm):00858         NUMCVRA equ     *               For symbolic stack dump purposes
E482 12               (        forth.asm):00859 (1)             nop
                      (        forth.asm):00860         
                      (        forth.asm):00861         * Convert number stored in X to a string (depending on BASE value).
                      (        forth.asm):00862         * Output is stored in the global TBUFF buffer. X is preserved.
E483 8D95             (        forth.asm):00863 (6)     CVNSTR  bsr     CKBASE
E485 0F37             (        forth.asm):00864 (5)             clr     ISNEGF
E487 1F10             (        forth.asm):00865 (4)             tfr     x,d
E489 0D38             (        forth.asm):00866 (4)             tst     CVISSGN         Are we to perform a signed conversion?
E48B 2708             (        forth.asm):00867 (3)             beq     @cvnst1
E48D 104D             (        forth.asm):00868 (2)             tstd
E48F 2A04             (        forth.asm):00869 (3)             bpl     @cvnst1
E491 0C37             (        forth.asm):00870 (5)             inc     ISNEGF          Number being converted is negative
E493 1040             (        forth.asm):00871 (2)             negd
E495 1F06             (        forth.asm):00872 (4)     @cvnst1 tfr     d,w
E497 104F             (        forth.asm):00873 (2)             clrd
E499 108E03FD         (        forth.asm):00874 (4)             ldy     #TBUFF+19       Sign + 16 digits + terminator + 1
E49D 6FA2             (        forth.asm):00875 (6+1)           clr     ,-y             End of string marker
E49F 119E1E           (        forth.asm):00876 (35)    @cvnst2 divq    UBASE           D returns the modulo and W the quotient
E4A2 8630             (        forth.asm):00877 (2)             lda     #'0
E4A4 C10A             (        forth.asm):00878 (2)             cmpb    #10
E4A6 2502             (        forth.asm):00879 (3)             bcs     @cvnst3
                      (        forth.asm):00880         * BASE has letters among its valid numbers.
E4A8 8637             (        forth.asm):00881 (2)             lda     #'A-10
E4AA 103089           (        forth.asm):00882 (4)     @cvnst3 addr    a,b
E4AD E7A2             (        forth.asm):00883 (4+1)           stb     ,-y
E4AF 104F             (        forth.asm):00884 (2)             clrd
E4B1 105D             (        forth.asm):00885 (2)             tstw
E4B3 26EA             (        forth.asm):00886 (3)             bne     @cvnst2
E4B5 C620             (        forth.asm):00887 (2)             ldb     #SP
E4B7 0D37             (        forth.asm):00888 (4)             tst     ISNEGF
E4B9 2702             (        forth.asm):00889 (3)             beq     @cvnst4
E4BB C62D             (        forth.asm):00890 (2)             ldb     #'-
E4BD E7A2             (        forth.asm):00891 (4+1)   @cvnst4 stb     ,-y
                      (        forth.asm):00892         * We need to insert leading spaces up to the beginning of the output buffer.
E4BF C620             (        forth.asm):00893 (2)             ldb     #SP
E4C1 108C03EA         (        forth.asm):00894 (4)     @cvnst5 cmpy    #TBUFF
E4C5 2601             (        forth.asm):00895 (3)             bne     @cvnst6
E4C7 39               (        forth.asm):00896 (4)             rts
E4C8 E7A2             (        forth.asm):00897 (4+1)   @cvnst6 stb     ,-y
E4CA 20F5             (        forth.asm):00898 (3)             bra     @cvnst5
                      (        forth.asm):00899         
                      (        forth.asm):00900         * Check for minimal data stack depth. On input D has the lowest possible stack
                      (        forth.asm):00901         * address that satisfies the needs of the caller. This routine is meant
                      (        forth.asm):00902         * to support "transactional" behaviour, which is intended to improve
                      (        forth.asm):00903         * debugging support.
E4CC 103703           (        forth.asm):00904 (4)     CHKNDPT cmpr    d,u
E4CF 2201             (        forth.asm):00905 (3)             bhi     @stkudf
E4D1 39               (        forth.asm):00906 (4)             rts
E4D2 C601             (        forth.asm):00907 (2)     @stkudf ldb     #1              Data stack underflow
E4D4 BDE7A2           (        forth.asm):00908 (7)             jsr     ERRHDLR         No return
     E4D7             (        forth.asm):00909         CKDPTRA equ     *
                      (        forth.asm):00910         
                      (        forth.asm):00911         * Parameter stack's depth checking primitives (transactional behavior support).
E4D7 CC029420F0       (        forth.asm):00912         MIN1PST MINDREQ 1
                      (        forth.asm):00913         
E4DC CC029220EB       (        forth.asm):00914         MIN2PST MINDREQ 2
                      (        forth.asm):00915         
E4E1 CC029020E6       (        forth.asm):00916         MIN3PST MINDREQ 3
                      (        forth.asm):00917         
E4E6 CC028E20E1       (        forth.asm):00918         MIN4PST MINDREQ 4
                      (        forth.asm):00919         
                      (        forth.asm):00920         * Search word beginning at address TOKENSP in the dictionary.
                      (        forth.asm):00921         * Upon return Z will be set if the word was not found.
                      (        forth.asm):00922         * Otherwise, Y will point to the code section of the word.
                      (        forth.asm):00923         * CSSNTVE (defined in constants.asm) defines whether the
                      (        forth.asm):00924         * dictionary match is case sensitive or not.
                      (        forth.asm):00925         * Important note: if the word is found TOKENEP will be copied to TOKENSP.
E4EB 9E02             (        forth.asm):00926 (4)     SWDIC   ldx     TOKENSP
E4ED BDE3DB           (        forth.asm):00927 (7)             jsr     SCNETOK         B has CURTOKL
E4F0 9E08             (        forth.asm):00928 (4)             ldx     DICEND
E4F2 9F16             (        forth.asm):00929 (4)             stx     VLPRVEP         Last dictionary entry code address + 1
E4F4 9E02             (        forth.asm):00930 (4)             ldx     TOKENSP
E4F6 109E06           (        forth.asm):00931 (5)             ldy     LSTWAD          Latest word header address to Y
E4F9 2606             (        forth.asm):00932 (3)     @swrdc0 bne     @swrdc1
E4FB 1FC2             (        forth.asm):00933 (4)             tfr     0,y             Word not found. Z is set
E4FD 109F0E           (        forth.asm):00934 (5)             sty     PLOAD
E500 39               (        forth.asm):00935 (4)             rts
E501 A6A4             (        forth.asm):00936 (4+0)   @swrdc1 lda     ,y              Word attribute to A
E503 841F             (        forth.asm):00937 (2)             anda    #WRLNMSK        Extract word length
E505 3420             (        forth.asm):00938 (4+2)           pshs    y
E507 103798           (        forth.asm):00939 (4)             cmpr    b,a             Word length match?
E50A 2638             (        forth.asm):00940 (3)             bne     @swrdc3         No, point to next dictionary entry
E50C 3121             (        forth.asm):00941 (4+1)           leay    1,y
E50E A6A0             (        forth.asm):00942 (4+1)   @swrdc2 lda     ,y+
                      (        forth.asm):00943                 IFNE    CSSNTVE
                      (        forth.asm):00944                 cmpa    ,x+             Case sensitive dictionary
                      (        forth.asm):00945                 ELSE
E510 1F9E             (        forth.asm):00946 (4)             tfr     b,e             Case insensitive search (preferred)
E512 E680             (        forth.asm):00947 (4+1)           ldb     ,x+
E514 C161             (        forth.asm):00948 (2)             cmpb    #'a
E516 2506             (        forth.asm):00949 (3)             bcs     @nochg
E518 C17B             (        forth.asm):00950 (2)             cmpb    #'z+1
E51A 2402             (        forth.asm):00951 (3)             bcc     @nochg
E51C C020             (        forth.asm):00952 (2)             subb    #'a-'A
E51E 103798           (        forth.asm):00953 (4)     @nochg  cmpr    b,a
E521 1FE9             (        forth.asm):00954 (4)             tfr     e,b
                      (        forth.asm):00955                 ENDC                    CSSNTVE
E523 261F             (        forth.asm):00956 (3)             bne     @swrdc3
E525 5A               (        forth.asm):00957 (1)             decb
E526 26E6             (        forth.asm):00958 (3)             bne     @swrdc2
                      (        forth.asm):00959         * Word match!
E528 3510             (        forth.asm):00960 (4+2)           puls    x
E52A E684             (        forth.asm):00961 (4+0)           ldb     ,x              Word attribute byte to B
E52C 4F               (        forth.asm):00962 (1)             clra
E52D 58               (        forth.asm):00963 (1)             lslb                    Bit 7 to CFLAG
E52E 49               (        forth.asm):00964 (1)             rola                    CFLAG to A
E52F 973A             (        forth.asm):00965 (3)             sta     IMDFLG          Set IMMEDIATE flag
E531 4F               (        forth.asm):00966 (1)             clra
E532 58               (        forth.asm):00967 (1)             lslb                    Bit 6 to CFLAG
E533 49               (        forth.asm):00968 (1)             rola                    CFLAG to A
E534 973B             (        forth.asm):00969 (3)             sta     DEFFLG          Set DEFINE flag
E536 9E04             (        forth.asm):00970 (4)             ldx     TOKENEP
E538 9F02             (        forth.asm):00971 (4)             stx     TOKENSP
                      (        forth.asm):00972                 IFNE    RELFEAT
E53A 3123             (        forth.asm):00973 (4+1)           leay    3,y             Skip back pointer and checksum. Return XT
                      (        forth.asm):00974                 ELSE
                      (        forth.asm):00975                 leay    2,y             Skip back pointer. Return XT
                      (        forth.asm):00976                 ENDC                    RELFEAT
E53C DC16             (        forth.asm):00977 (4)             ldd     VLPRVEP
E53E 103220           (        forth.asm):00978 (4)             subr    y,d
E541 DD0E             (        forth.asm):00979 (4)             std     PLOAD
E543 39               (        forth.asm):00980 (4)             rts                     NZ since there is no zero payload word
E544 3520             (        forth.asm):00981 (4+2)   @swrdc3 puls    y               Point to previous word header
E546 109F16           (        forth.asm):00982 (5)             sty     VLPRVEP
E549 4F               (        forth.asm):00983 (1)             clra
E54A E6A0             (        forth.asm):00984 (4+1)           ldb     ,y+
E54C C41F             (        forth.asm):00985 (2)             andb    #WRLNMSK
E54E 31AB             (        forth.asm):00986 (4+2)           leay    d,y
E550 9E02             (        forth.asm):00987 (4)             ldx     TOKENSP
E552 D639             (        forth.asm):00988 (3)             ldb     CURTOKL
E554 10AEA4           (        forth.asm):00989 (6+0)           ldy     ,y
E557 20A0             (        forth.asm):00990 (3)             bra     @swrdc0
                      (        forth.asm):00991         
                      (        forth.asm):00992         * Create new dictionary entry. The word name being created is acquired from
                      (        forth.asm):00993         * the input stream. Warning, this requires a writable dictionary!
                      (        forth.asm):00994         * The new end of the dictionary is returned in Y. W is preserved.
E559 1038             (        forth.asm):00995 (6)     LOCWRT  pshsw
E55B 9E08             (        forth.asm):00996 (4)             ldx     DICEND
                      (        forth.asm):00997                 IFNE    DEBUG
                      (        forth.asm):00998                 cmpx    #ROMSTRT
                      (        forth.asm):00999                 bcs     @locwr0
                      (        forth.asm):01000                 ldb     #10             Assertion failure (trying to write to ROM!)
                      (        forth.asm):01001                 jsr     ERRHDLR         No return
E55D                  (        forth.asm):01002         LWAFRA  equ     *
                      (        forth.asm):01003                 ENDC                    DEBUG
E55D 9F0C             (        forth.asm):01004 (4)     @locwr0 stx     BDICEND         Back pointer up
E55F 9E06             (        forth.asm):01005 (4)             ldx     LSTWAD
E561 9F0A             (        forth.asm):01006 (4)             stx     BLSTWAD         Back pointer up
E563 BDE877           (        forth.asm):01007 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
E566 6D84             (        forth.asm):01008 (5+0)           tst     ,x
E568 2605             (        forth.asm):01009 (3)             bne     @locwr2
E56A C605             (        forth.asm):01010 (2)     @locwr1 ldb     #5              Missing word name
E56C BDE7A2           (        forth.asm):01011 (7)             jsr     ERRHDLR         No return
     E56F             (        forth.asm):01012         LWMNRA  equ     *               LOCWRT missing word name return address
E56F BDE3CD           (        forth.asm):01013 (7)     @locwr2 jsr     SCNSTOK
E572 27F6             (        forth.asm):01014 (3)             beq     @locwr1         End of line reached
E574 BDE3DB           (        forth.asm):01015 (7)             jsr     SCNETOK         X has TOKENEP, B has CURTOKL
E577 109E02           (        forth.asm):01016 (5)             ldy     TOKENSP
E57A 103221           (        forth.asm):01017 (4)             subr    y,x
E57D 3410             (        forth.asm):01018 (4+2)           pshs    x               Word length to the system stack
E57F 9E08             (        forth.asm):01019 (4)             ldx     DICEND
E581 A661             (        forth.asm):01020 (4+1)           lda     1,s             Word length LSB in the system stack
E583 8120             (        forth.asm):01021 (2)             cmpa    #1+WRLNMSK      Max word length is 31, 79-STANDARD compliant
E585 2505             (        forth.asm):01022 (3)             blo     @lcwr21
E587 C610             (        forth.asm):01023 (2)             ldb     #16             Word name is too long
E589 BDE7A2           (        forth.asm):01024 (7)             jsr     ERRHDLR         No return
     E58C             (        forth.asm):01025         WTOOLNG equ     *
E58C A780             (        forth.asm):01026 (4+1)   @lcwr21 sta     ,x+             Word length to dictionary
E58E 10A6E1           (        forth.asm):01027 (6+2)           ldw     ,s++            16-bit word length to W
E591 1E12             (        forth.asm):01028 (5)             exg     x,y             Y points to the dictionary, X has TOKENSP
                      (        forth.asm):01029                 IFNE    CSSNTVE
                      (        forth.asm):01030                 tfm     x+,y+           Word name to dictionary, as is
                      (        forth.asm):01031                 ELSE
E593 1FF9             (        forth.asm):01032 (4)             tfr     f,b             Force dictionary entry to upper case
E595 A680             (        forth.asm):01033 (4+1)   @locwr3 lda     ,x+
E597 8161             (        forth.asm):01034 (2)             cmpa    #'a
E599 2506             (        forth.asm):01035 (3)             bcs     @locwr4
E59B 817B             (        forth.asm):01036 (2)             cmpa    #'z+1
E59D 2402             (        forth.asm):01037 (3)             bcc     @locwr4
E59F 8020             (        forth.asm):01038 (2)             suba    #'a-'A          To upper case
E5A1 A7A0             (        forth.asm):01039 (4+1)   @locwr4 sta     ,y+
E5A3 5A               (        forth.asm):01040 (1)             decb
E5A4 26EF             (        forth.asm):01041 (3)             bne     @locwr3
                      (        forth.asm):01042                 ENDC                    CSSNTVE
E5A6 1F10             (        forth.asm):01043 (4)             tfr     x,d
E5A8 BDE166           (        forth.asm):01044 (7)             jsr     U2INFRD         Derive >IN from D
E5AB 9E06             (        forth.asm):01045 (4)             ldx     LSTWAD
E5AD AFA1             (        forth.asm):01046 (5+2)           stx     ,y++            Back pointer to dictionary
                      (        forth.asm):01047                 IFNE    RELFEAT
E5AF 6FA0             (        forth.asm):01048 (6+1)           clr     ,y+             Initialize the checksum header field
                      (        forth.asm):01049                 ENDC                    RELFEAT
E5B1 109F08           (        forth.asm):01050 (5)             sty     DICEND
E5B4 109F12           (        forth.asm):01051 (5)             sty     RECADDR         Should we resort to recursion later on
E5B7 1039             (        forth.asm):01052 (6)             pulsw
E5B9 39               (        forth.asm):01053 (4)             rts
                      (        forth.asm):01054         
                      (        forth.asm):01055         * Compile 'ldx  #X; jsr NPUSH'.
                      (        forth.asm):01056         * DICEND is updated and returned in Y.
E5BA 109E08           (        forth.asm):01057 (5)     LITER   ldy     DICEND
E5BD 868E             (        forth.asm):01058 (2)             lda     #LDXOPC         LDX immediate
E5BF 8D10             (        forth.asm):01059 (6)             bsr     VARCON2
E5C1 86BD             (        forth.asm):01060 (2)             lda     #JSROPC         JSR extended
E5C3 BDE144           (        forth.asm):01061 (7)             jsr     CHKRTS          Check if the final RTS can be omitted
E5C6 8D06             (        forth.asm):01062 (6)             bsr     VARCON1
E5C8 109F08           (        forth.asm):01063 (5)             sty     DICEND
E5CB 39               (        forth.asm):01064 (4)             rts
                      (        forth.asm):01065         
                      (        forth.asm):01066         * Compile 'jmp  NPUSH'.
                      (        forth.asm):01067         * Y points to the end of the dictionary on entry and on exit.
E5CC 867E             (        forth.asm):01068 (2)     VARCON  lda     #JMPOPC         JMP extended
E5CE 8EE823           (        forth.asm):01069 (3)     VARCON1 ldx     #NPUSH
E5D1 A7A0             (        forth.asm):01070 (4+1)   VARCON2 sta     ,y+
E5D3 AFA1             (        forth.asm):01071 (5+2)           stx     ,y++
E5D5 39               (        forth.asm):01072 (4)             rts
                      (        forth.asm):01073         
                      (        forth.asm):01074         * Used by U<, U>, <, >.
E5D6 BDE4DC           (        forth.asm):01075 (7)     CMP2    jsr     MIN2PST         At least 2 cells must be stacked up
E5D9 10AEC4           (        forth.asm):01076 (6+0)   CMP2RA  ldy     ,u
E5DC AE42             (        forth.asm):01077 (5+1)           ldx     2,u
E5DE 103721           (        forth.asm):01078 (4)             cmpr    y,x
E5E1 1FA9             (        forth.asm):01079 (4)             tfr     cc,b
                      (        forth.asm):01080                 IFNE    DEBUG
                      (        forth.asm):01081                 clra
                      (        forth.asm):01082                 std     CCREG
                      (        forth.asm):01083                 ENDC                    DEBUG
E5E3 1FC1             (        forth.asm):01084 (4)             tfr     0,x
E5E5 3344             (        forth.asm):01085 (4+1)           leau    4,u
E5E7 1F9A             (        forth.asm):01086 (4)             tfr     b,cc
E5E9 39               (        forth.asm):01087 (4)             rts
                      (        forth.asm):01088         
                      (        forth.asm):01089         * Used by CMOVE, CMOVE>, MOVE.
E5EA BDE4E1           (        forth.asm):01090 (7)     ACQMOVP jsr     MIN3PST         At least 3 cells must be stacked up
E5ED 10A6C4           (        forth.asm):01091 (6+0)   ACQVMRA ldw     ,u              Byte count
E5F0 10AE42           (        forth.asm):01092 (6+1)           ldy     2,u             Destination address
E5F3 AE44             (        forth.asm):01093 (5+1)           ldx     4,u             Source address
E5F5 3346             (        forth.asm):01094 (4+1)           leau    6,u             Drop 3 cells from the user stack
E5F7 39               (        forth.asm):01095 (4)             rts
                      (        forth.asm):01096         
                      (        forth.asm):01097         * FDCTSYM enveadours to match the address stored in Y to a dictionary entry.
                      (        forth.asm):01098         * Upon a successful flexible match, it will output a string in the form of
                      (        forth.asm):01099         * <wordname>+<offset> to the string pointed to by X. <wordname> refers to the
                      (        forth.asm):01100         * code entry point of the matched word. <offset> will be expressed in hex.
                      (        forth.asm):01101         * If a match is found, Z will be clear, otherwise it will be set.
                      (        forth.asm):01102         * A candidate for a word code address must meet the following criteria:
                      (        forth.asm):01103         * ((Y U>= #EBUFS) AND (Y U< #THEEND)) OR ((Y U>= #WDICSPC) AND (Y U< DICEND)).
                      (        forth.asm):01104         * Upon return:
                      (        forth.asm):01105         * - the string pointed to by X will updated with its symbolic match
                      (        forth.asm):01106         *   (NUL terminated), if there is one. X itself might have been altered.
                      (        forth.asm):01107         * - Y should be preserved.
                      (        forth.asm):01108         * EBUFS (EMPTY-BUFFERS) header address is the last word in the dictionary.
                      (        forth.asm):01109                 IFNE    SSDFEAT
E5F8 3430             (        forth.asm):01110 (4+4)   FDCTSYM pshs    y,x     
E5FA 1F21             (        forth.asm):01111 (4)             tfr     y,x             Potential execution token to X
E5FC 8CE9B8           (        forth.asm):01112 (3)             cmpx    #EBUFS
E5FF 2505             (        forth.asm):01113 (3)             blo     @fdstr2 
E601 8CFDA1           (        forth.asm):01114 (3)             cmpx    #THEEND
E604 250D             (        forth.asm):01115 (3)             blo     @fdsmtc
E606 8C0C60           (        forth.asm):01116 (3)     @fdstr2 cmpx    #WDICSPC        Term 2 of the predicate for a valid word addr
E609 2504             (        forth.asm):01117 (3)             blo     @fdsnom
E60B 9C08             (        forth.asm):01118 (4)             cmpx    DICEND
E60D 2504             (        forth.asm):01119 (3)             blo     @fdsmtc
E60F 4F               (        forth.asm):01120 (1)     @fdsnom clra                    No match (Z is set)
E610 3530             (        forth.asm):01121 (4+4)           puls    x,y
E612 39               (        forth.asm):01122 (4)             rts
E613 9E06             (        forth.asm):01123 (4)     @fdsmtc ldx     LSTWAD          Potential match. Scan upward from LAST
                      (        forth.asm):01124         * X points to the latest word header, Y has an execution token.
E615 109608           (        forth.asm):01125 (5)             ldw     DICEND          W points to the end of the code section
E618 3410             (        forth.asm):01126 (4+2)   @fdslop pshs    x               Pointer to the current word header
E61A E680             (        forth.asm):01127 (4+1)           ldb     ,x+
E61C C41F             (        forth.asm):01128 (2)             andb    #WRLNMSK
E61E 3A               (        forth.asm):01129 (1)             abx                     Skip word name string
E61F EC81             (        forth.asm):01130 (5+2)           ldd     ,x++            Backlink to D
                      (        forth.asm):01131                 IFNE    RELFEAT
E621 3001             (        forth.asm):01132 (4+1)           leax    1,x             Skip the checksum
                      (        forth.asm):01133                 ENDC                    RELFEAT
E623 103712           (        forth.asm):01134 (4)             cmpr    x,y
E626 2530             (        forth.asm):01135 (3)             blo     @fdsnwd
E628 103762           (        forth.asm):01136 (4)             cmpr    w,y
E62B 222B             (        forth.asm):01137 (3)             bhi     @fdsnwd         An equal address is allowed here, in case
                      (        forth.asm):01138         * jsr ERRHDLR is the last instruction for the word under consideration.
                      (        forth.asm):01139         * This happens to be the case for FORGET and LPAR.
                      (        forth.asm):01140         * Y matches the code range for the current word.
E62D 3510             (        forth.asm):01141 (4+2)           puls    x
E62F E680             (        forth.asm):01142 (4+1)           ldb     ,x+
E631 C41F             (        forth.asm):01143 (2)             andb    #WRLNMSK
E633 1F9F             (        forth.asm):01144 (4)             tfr     b,f
E635 114F             (        forth.asm):01145 (2)             clre                    W has the matched word length
E637 10AEE4           (        forth.asm):01146 (6+0)           ldy     ,s              Y points to the target buffer
E63A 113812           (        forth.asm):01147 (6+?)           tfm     x+,y+
E63D 6FA4             (        forth.asm):01148 (6+0)           clr     ,y              We need this in case the offset is zero
                      (        forth.asm):01149         * Offset processing.
                      (        forth.asm):01150                 IFNE    RELFEAT
E63F 3003             (        forth.asm):01151 (4+1)           leax    3,x             Skip backlink and checksum
                      (        forth.asm):01152                 ELSE
                      (        forth.asm):01153                 leax    2,x             Skip backlink
                      (        forth.asm):01154                 ENDC                    RELFEAT
E641 EC62             (        forth.asm):01155 (5+1)           ldd     2,s             Execution token to D
E643 103210           (        forth.asm):01156 (4)             subr    x,d             Offset between XT and word entry point to D
E646 270B             (        forth.asm):01157 (3)             beq     @skoffs         Skip displaying the offset if it is zero
E648 3402             (        forth.asm):01158 (4+1)           pshs    a               Preserve the offset's MSB
E64A 862B             (        forth.asm):01159 (2)             lda     #'+
E64C A7A0             (        forth.asm):01160 (4+1)           sta     ,y+
E64E 3502             (        forth.asm):01161 (4+1)           puls    a               Restore the offset's MSB
E650 BDE184           (        forth.asm):01162 (7)             jsr     HDMP4           Dump hex incarnation of the offset to Y
E653 3530             (        forth.asm):01163 (4+4)   @skoffs puls    x,y
E655 1CFB             (        forth.asm):01164 (2)             andcc   #^ZFLAG         Clear ZFLAG
E657 39               (        forth.asm):01165 (4)             rts
                      (        forth.asm):01166         * Point to the next word.
E658 1039             (        forth.asm):01167 (6)     @fdsnwd pulsw                   Retrieve current word header address
E65A 104D             (        forth.asm):01168 (2)             tstd
E65C 27B1             (        forth.asm):01169 (3)             beq     @fdsnom         Just met the last dictionary entry
E65E 1F01             (        forth.asm):01170 (4)             tfr     d,x             Point to previous word header
E660 10810C60         (        forth.asm):01171 (4)             cmpw    #WDICSPC        Are we transitioning from RAM to ROM?
E664 26B2             (        forth.asm):01172 (3)             bne     @fdslop         No singularity
E666 1086FDA1         (        forth.asm):01173 (4)             ldw     #THEEND         Won't be able to diagnose the ROM based @...
E66A 20AC             (        forth.asm):01174 (3)             bra     @fdslop
                      (        forth.asm):01175         
                      (        forth.asm):01176         * Find the best possible symbolic approximation of Y and store it to the
                      (        forth.asm):01177         * buffer pointed to by X.
                      (        forth.asm):01178         * On entry:
                      (        forth.asm):01179         * - Y has a code address which is to be matched with a symbolic name + offset.
                      (        forth.asm):01180         * - X points to a buffer where the resolution is to be stored.
                      (        forth.asm):01181         * On return:
                      (        forth.asm):01182         * - Y is to be preserved.
                      (        forth.asm):01183         * - the output buffer will be updated with the best symbolic match (NUL term'd).
E66C 3430             (        forth.asm):01184 (4+4)   FINDSYM pshs    y,x
E66E 8D88             (        forth.asm):01185 (6)             bsr     FDCTSYM         Search the dictionary first (flexible match)
E670 261B             (        forth.asm):01186 (3)             bne     @dctmfn         Dictionary match found
E672 8EE692           (        forth.asm):01187 (3)             ldx     #NDCTWKS        Search kernel symbols for an exact match
E675 EC81             (        forth.asm):01188 (5+2)   @fsmlop ldd     ,x++
E677 270B             (        forth.asm):01189 (3)             beq     @fsmfnd         End of well known symbols list?
E679 103720           (        forth.asm):01190 (4)             cmpr    y,d
E67C 2706             (        forth.asm):01191 (3)             beq     @fsmfnd
                      (        forth.asm):01192         * No well known symbol match. Skip string.
E67E A680             (        forth.asm):01193 (4+1)   @fsmskp lda     ,x+
E680 26FC             (        forth.asm):01194 (3)             bne     @fsmskp
E682 20F1             (        forth.asm):01195 (3)             bra     @fsmlop
E684 10AEE4           (        forth.asm):01196 (6+0)   @fsmfnd ldy     ,s
E687 A680             (        forth.asm):01197 (4+1)   @fsmfn2 lda     ,x+
E689 A7A0             (        forth.asm):01198 (4+1)           sta     ,y+
E68B 26FA             (        forth.asm):01199 (3)             bne     @fsmfn2
E68D 3262             (        forth.asm):01200 (4+1)   @dctmfn leas    2,s             Drop X from the system stack
E68F 3520             (        forth.asm):01201 (4+2)           puls    y
E691 39               (        forth.asm):01202 (4)             rts
                      (        forth.asm):01203         
                      (        forth.asm):01204         * Non-dictionary well known symbols.
E692 E000             (        forth.asm):01205         NDCTWKS fdb     IODZHDL         Illegal opcode/Division by zero trap handler
E694 494F445A48444C00 (        forth.asm):01206                 fcn     'IODZHDL'
E69C E83F             (        forth.asm):01207                 fdb     DPOPRA          Data stack underflow
E69E 44504F50524100   (        forth.asm):01208                 fcn     'DPOPRA'
E6A5 E830             (        forth.asm):01209                 fdb     DPSHRA          Data stack overflow
E6A7 44505348524100   (        forth.asm):01210                 fcn     'DPSHRA'
E6AE E877             (        forth.asm):01211                 fdb     RPOPRA          Return stack underflow
E6B0 52504F50524100   (        forth.asm):01212                 fcn     'RPOPRA'
E6B7 E85D             (        forth.asm):01213                 fdb     RPSHRA          Return stack overflow
E6B9 52505348524100   (        forth.asm):01214                 fcn     'RPSHRA'
E6C0 E7A2             (        forth.asm):01215                 fdb     ERRHDLR         Error handler
E6C2 45525248444C5200 (        forth.asm):01216                 fcn     'ERRHDLR'
E6CA E42A             (        forth.asm):01217                 fdb     CKBASRA         Illegal BASE value
E6CC 434B424153524100 (        forth.asm):01218                 fcn     'CKBASRA'
E6D4 E4D7             (        forth.asm):01219                 fdb     CKDPTRA         Not enough parameters supplied (transac. behav.)
E6D6 434B445054524100 (        forth.asm):01220                 fcn     'CKDPTRA'
E6DE E4CC             (        forth.asm):01221                 fdb     CHKNDPT         Check data stack minimum depth (transac. behav.)
E6E0 43484B4E44505400 (        forth.asm):01222                 fcn     'CHKNDPT'
E6E8 E5D9             (        forth.asm):01223                 fdb     CMP2RA          Missing operand in any of U<, U>, <, >
E6EA 434D5032524100   (        forth.asm):01224                 fcn     'CMP2RA'
E6F1 E5ED             (        forth.asm):01225                 fdb     ACQVMRA         Three operands missing in any of CMOVE,
                      (        forth.asm):01226         *                               CMOVE>, MOVE
E6F3 414351564D524100 (        forth.asm):01227                 fcn     'ACQVMRA'
E6FB E0C8             (        forth.asm):01228                 fdb     MINTLRA         Main interpreter loop return address
E6FD 4D494E544C524100 (        forth.asm):01229                 fcn     'MINTLRA'
E705 E482             (        forth.asm):01230                 fdb     NUMCVRA         ? while converting a string to a number
E707 4E554D4356524100 (        forth.asm):01231                 fcn     'NUMCVRA'
E70F E0E0             (        forth.asm):01232                 fdb     NMCVIRA         Numeric conversion error while interpreting
E711 4E4D435649524100 (        forth.asm):01233                 fcn     'NMCVIRA'
E719 E13F             (        forth.asm):01234                 fdb     NMCVCRA         Numeric conversion error while compiling
E71B 4E4D435643524100 (        forth.asm):01235                 fcn     'NMCVCRA'
E723 E114             (        forth.asm):01236                 fdb     INTRPRA         Interpreter RA (after the execution of a word)
E725 494E545250524100 (        forth.asm):01237                 fcn     'INTRPRA'
E72D E12D             (        forth.asm):01238                 fdb     COMPLRA         Compiler RA (after the execution of an IMD word)
E72F 434F4D504C524100 (        forth.asm):01239                 fcn     'COMPLRA'
E737 E56F             (        forth.asm):01240                 fdb     LWMNRA          Missing word name in LOCWRT
E739 4C574D4E524100   (        forth.asm):01241                 fcn     'LWMNRA'
E740 E94F             (        forth.asm):01242                 fdb     CFR1SRA         CF read one sector failed
E742 4346523153524100 (        forth.asm):01243                 fcn     'CFR1SRA'
E74A E823             (        forth.asm):01244                 fdb     NPUSH           Not an error RA but useful to have as a symbol
E74C 4E5055534800     (        forth.asm):01245                 fcn     'NPUSH'
E752 E840             (        forth.asm):01246                 fdb     RPUSH           Not an error RA but useful to have as a symbol
E754 525055534800     (        forth.asm):01247                 fcn     'RPUSH'
E75A E831             (        forth.asm):01248                 fdb     NPOP            Not an error RA but useful to have as a symbol
E75C 4E504F5000       (        forth.asm):01249                 fcn     'NPOP'
E761 E85E             (        forth.asm):01250                 fdb     RPOP            Not an error RA but useful to have as a symbol
E763 52504F5000       (        forth.asm):01251                 fcn     'RPOP'
E768 E332             (        forth.asm):01252                 fdb     PUTS            Not an error RA but useful to have as a symbol
E76A 5055545300       (        forth.asm):01253                 fcn     'PUTS'
                      (        forth.asm):01254                 IFNE    DEBUG
                      (        forth.asm):01255                 fdb     LWAFRA          Assertion failure in LOCWRT
                      (        forth.asm):01256                 fcn     'LOCWRTAF'
                      (        forth.asm):01257                 ENDC
E76F 0000             (        forth.asm):01258                 fdb     0               End of list
E771 3F3F3F00         (        forth.asm):01259                 fcn     '???'           Admit we have no clue!
                      (        forth.asm):01260                 ENDC                    SSDFEAT
                      (        forth.asm):01261         
                      (        forth.asm):01262         * Print ' (xxxx/yyyy)' where xxxx is the hex representation for BLK @ and
                      (        forth.asm):01263         * yyyy is the hex representation for >IN @. Y is preserved, X and D are not.
E775 3420             (        forth.asm):01264 (4+2)   PRBLKIN pshs    y
E777 108E039A         (        forth.asm):01265 (4)             ldy     #HEXBUF
E77B 8620             (        forth.asm):01266 (2)             lda     #SP
E77D A7A0             (        forth.asm):01267 (4+1)           sta     ,y+
E77F 8628             (        forth.asm):01268 (2)             lda     #'(
E781 A7A0             (        forth.asm):01269 (4+1)           sta     ,y+
E783 DC24             (        forth.asm):01270 (4)             ldd     UBLK
E785 BDE184           (        forth.asm):01271 (7)             jsr     HDMP4
E788 862F             (        forth.asm):01272 (2)             lda     #'/
E78A A7A0             (        forth.asm):01273 (4+1)           sta     ,y+
E78C DC22             (        forth.asm):01274 (4)             ldd     UTOIN
E78E BDE184           (        forth.asm):01275 (7)             jsr     HDMP4
E791 8629             (        forth.asm):01276 (2)             lda     #')
E793 A7A0             (        forth.asm):01277 (4+1)           sta     ,y+
E795 6FA4             (        forth.asm):01278 (6+0)           clr     ,y
E797 8E039A           (        forth.asm):01279 (3)             ldx     #HEXBUF
E79A BDE332           (        forth.asm):01280 (7)             jsr     PUTS
E79D 3520             (        forth.asm):01281 (4+2)           puls    y
E79F 7EE33F           (        forth.asm):01282 (3)             jmp     PUTCR
                      (        forth.asm):01283         
                      (        forth.asm):01284         * Handle error condition. Error code is in B.
                      (        forth.asm):01285         * If B is 2 (undefined) X points to a string of length CURTOKL that has the
                      (        forth.asm):01286         * offending word.
E7A2 10AEE4           (        forth.asm):01287 (6+0)   ERRHDLR ldy     ,s              Invoking return address
                      (        forth.asm):01288         * In case of a trap return, we enter here with Y set to #IODZHDL
E7A5 BDE33F           (        forth.asm):01289 (7)     ERRHD1  jsr     PUTCR           GNU Forth does this in its exception handler
E7A8 C102             (        forth.asm):01290 (2)             cmpb    #2              Undefined symbol?
E7AA 2618             (        forth.asm):01291 (3)             bne     @perrm          No
E7AC 8627             (        forth.asm):01292 (2)             lda     #''             Begin quote
E7AE BDE31F           (        forth.asm):01293 (7)             jsr     PUTCH
E7B1 A680             (        forth.asm):01294 (4+1)   @prtsym lda     ,x+             Display undefined symbol name
E7B3 BDE31F           (        forth.asm):01295 (7)             jsr     PUTCH
E7B6 0A39             (        forth.asm):01296 (5)             dec     CURTOKL
E7B8 26F7             (        forth.asm):01297 (3)             bne     @prtsym
E7BA 8627             (        forth.asm):01298 (2)             lda     #''             End quote
E7BC BDE31F           (        forth.asm):01299 (7)             jsr     PUTCH
E7BF 8620             (        forth.asm):01300 (2)             lda     #SP             BL EMIT
E7C1 BDE31F           (        forth.asm):01301 (7)             jsr     PUTCH
E7C4 8EFE72           (        forth.asm):01302 (3)     @perrm  ldx     #ERRMTBL        Regular error handling
E7C7 5D               (        forth.asm):01303 (1)     @nxterr tstb
E7C8 2637             (        forth.asm):01304 (3)             bne     @skerrm
E7CA BDE332           (        forth.asm):01305 (7)             jsr     PUTS            Print error message
E7CD 8DA6             (        forth.asm):01306 (6)             bsr     PRBLKIN         Print BLK and >IN values (in hex)
E7CF 1F20             (        forth.asm):01307 (4)     @dmptos tfr     y,d             Dump top of the system stack contents
                      (        forth.asm):01308                 IFNE    SSDFEAT
E7D1 3406             (        forth.asm):01309 (4+2)           pshs    d
                      (        forth.asm):01310                 ENDC                    SSDFEAT
E7D3 108E039A         (        forth.asm):01311 (4)             ldy     #HEXBUF
E7D7 BDE184           (        forth.asm):01312 (7)             jsr     HDMP4
E7DA 8620             (        forth.asm):01313 (2)             lda     #SP
E7DC A7A0             (        forth.asm):01314 (4+1)           sta     ,y+
                      (        forth.asm):01315         * Symbolic stack dumps are configurable. In situations where the dictionary is
                      (        forth.asm):01316         * trashed, they may not be considered desirable. See SSDFEAT in constants.asm.
                      (        forth.asm):01317                 IFNE    SSDFEAT
E7DE 1F21             (        forth.asm):01318 (4)             tfr     y,x             X has the buffer pointer
E7E0 3520             (        forth.asm):01319 (4+2)           puls    y               Restore target symbol table entry
E7E2 BDE66C           (        forth.asm):01320 (7)             jsr     FINDSYM
                      (        forth.asm):01321                 ELSE
                      (        forth.asm):01322                 clr     ,y              No symbolic information is to be printed
                      (        forth.asm):01323                 ENDC                    SSDFEAT
E7E5 8E039A           (        forth.asm):01324 (3)             ldx     #HEXBUF
E7E8 BDE332           (        forth.asm):01325 (7)             jsr     PUTS
E7EB BDE33F           (        forth.asm):01326 (7)             jsr     PUTCR
E7EE 108CE000         (        forth.asm):01327 (4)             cmpy    #IODZHDL
E7F2 2702             (        forth.asm):01328 (3)             beq     @wastrp         We're just back from the trap handler
E7F4 3262             (        forth.asm):01329 (4+1)           leas    2,s             Point to the next item on the stack
E7F6 118C8000         (        forth.asm):01330 (4)     @wastrp cmps    #RAMSTRT+RAMSIZE
E7FA 240C             (        forth.asm):01331 (3)             bhs     @errdon         We're done here
E7FC 10AEE4           (        forth.asm):01332 (6+0)           ldy     ,s
E7FF 20CE             (        forth.asm):01333 (3)             bra     @dmptos
E801 A680             (        forth.asm):01334 (4+1)   @skerrm lda     ,x+             Scan for the next error message
E803 26FC             (        forth.asm):01335 (3)             bne     @skerrm
E805 5A               (        forth.asm):01336 (1)             decb
E806 20BF             (        forth.asm):01337 (3)             bra     @nxterr
E808 10CE8000         (        forth.asm):01338 (4)     @errdon lds     #RAMSTRT+RAMSIZE
E80C 9621             (        forth.asm):01339 (3)             lda     USTATE+1        We do ignore the upper byte
E80E 270D             (        forth.asm):01340 (3)             beq     @erdon2         No pointers to restore if we were interpreting
                      (        forth.asm):01341         * Compiling: clear STATE, RSP and restore LSTWAD, DICEND.
E810 0F21             (        forth.asm):01342 (5)             clr     USTATE+1        Switch back to interpretation mode
E812 BDEBBC           (        forth.asm):01343                 RFXT    jsr,RCLR+7      XT for RCLR
E815 9E0C             (        forth.asm):01344 (4)             ldx     BDICEND         Restore essential pointers from backups
E817 9F08             (        forth.asm):01345 (4)             stx     DICEND          Restore HERE
E819 9E0A             (        forth.asm):01346 (4)             ldx     BLSTWAD
E81B 9F06             (        forth.asm):01347 (4)             stx     LSTWAD          Restore LAST
E81D BDFB19           (        forth.asm):01348         @erdon2 RFXT    jsr,DECIMAL+10  Back to decimal BASE, for one's sanity's sake!
E820 7EE0B2           (        forth.asm):01349 (3)             jmp     INTERP
                      (        forth.asm):01350         
                      (        forth.asm):01351         * Push X to the data stack (boundary is checked).
E823 118301D6         (        forth.asm):01352 (4)     NPUSH   cmpu    #NSTTOP
E827 2303             (        forth.asm):01353 (3)             bls     @npush1         Anything <= than #NSTTOP indicates overflow
E829 3610             (        forth.asm):01354 (4+2)           pshu    x               Aka UCNPUSH
E82B 39               (        forth.asm):01355 (4)             rts
E82C 5F               (        forth.asm):01356 (1)     @npush1 clrb                    Data stack overflow
E82D BDE7A2           (        forth.asm):01357 (7)             jsr     ERRHDLR         No return
     E830             (        forth.asm):01358         DPSHRA  equ     *
E830 12               (        forth.asm):01359 (1)             nop
                      (        forth.asm):01360         
                      (        forth.asm):01361         * Pull X from the data stack (boundary is checked).
                      (        forth.asm):01362         * D, W and Y are preserved.
E831 11830296         (        forth.asm):01363 (4)     NPOP    cmpu    #NSTBOT
E835 2403             (        forth.asm):01364 (3)             bhs     @npop1          Anything >= than #NSTBOT indicates underflow
E837 3710             (        forth.asm):01365 (4+2)           pulu    x
E839 39               (        forth.asm):01366 (4)             rts
E83A C601             (        forth.asm):01367 (2)     @npop1  ldb     #1              Data stack underflow
E83C BDE7A2           (        forth.asm):01368 (7)             jsr     ERRHDLR         No return
     E83F             (        forth.asm):01369         DPOPRA  equ     *
E83F 12               (        forth.asm):01370 (1)             nop
                      (        forth.asm):01371         
                      (        forth.asm):01372         * Push X to the return stack (boundary is checked).
E840 9630             (        forth.asm):01373 (3)     RPUSH   lda     RDEPTH          RDEPTH is expressed in cells
E842 8140             (        forth.asm):01374 (2)             cmpa    #RSTKSZ/2       But RSTKZ is expressed in bytes
E844 2712             (        forth.asm):01375 (3)             beq     @rpush1
E846 4C               (        forth.asm):01376 (1)             inca
E847 9730             (        forth.asm):01377 (3)             sta     RDEPTH
E849 0F32             (        forth.asm):01378 (5)             clr     RTSREMV         Do not get rid of the final RTS
E84B 1F27             (        forth.asm):01379 (4)             tfr     y,v
E84D 109E00           (        forth.asm):01380 (5)             ldy     RSP
E850 AFA3             (        forth.asm):01381 (5+2)           stx     ,--y
E852 109F00           (        forth.asm):01382 (5)             sty     RSP
E855 1F72             (        forth.asm):01383 (4)             tfr     v,y
E857 39               (        forth.asm):01384 (4)             rts
E858 C607             (        forth.asm):01385 (2)     @rpush1 ldb     #7              Return stack overflow
E85A BDE7A2           (        forth.asm):01386 (7)             jsr     ERRHDLR         No return
     E85D             (        forth.asm):01387         RPSHRA  equ     *
E85D 12               (        forth.asm):01388 (1)             nop                     Meant to insulate RPUSH errors from RPOP EP
                      (        forth.asm):01389         
                      (        forth.asm):01390         * Pull X from the return stack (boundary is checked).
E85E 9630             (        forth.asm):01391 (3)     RPOP    lda     RDEPTH          RDEPTH is expressed in cells
E860 2710             (        forth.asm):01392 (3)             beq     @rpop1
E862 4A               (        forth.asm):01393 (1)             deca
E863 9730             (        forth.asm):01394 (3)             sta     RDEPTH
E865 1F27             (        forth.asm):01395 (4)             tfr     y,v
E867 109E00           (        forth.asm):01396 (5)             ldy     RSP
E86A AEA1             (        forth.asm):01397 (5+2)           ldx     ,y++
E86C 109F00           (        forth.asm):01398 (5)             sty     RSP
E86F 1F72             (        forth.asm):01399 (4)             tfr     v,y
E871 39               (        forth.asm):01400 (4)             rts
E872 C608             (        forth.asm):01401 (2)     @rpop1  ldb     #8              Return stack underflow
E874 BDE7A2           (        forth.asm):01402 (7)             jsr     ERRHDLR         No return
     E877             (        forth.asm):01403         RPOPRA  equ     *
                      (        forth.asm):01404         
                      (        forth.asm):01405         * Derive the current input stream pointer from BLK and >IN.
                      (        forth.asm):01406         * The resulting address is returned in X. D is altered.
                      (        forth.asm):01407         * Both Y and W are preserved.
E877 9E24             (        forth.asm):01408 (4)     BKIN2PT ldx     UBLK
E879 2716             (        forth.asm):01409 (3)             beq     @consol         We are switching back to the console
E87B 1038             (        forth.asm):01410 (6)             pshsw
E87D 3420             (        forth.asm):01411 (4+2)           pshs    y
E87F 8DA2             (        forth.asm):01412 (6)             bsr     NPUSH           Make sure BLK @ is loaded
E881 BDEA89           (        forth.asm):01413                 RFXT    jsr,BLOCK+8     XT for BLOCK
E884 3520             (        forth.asm):01414 (4+2)           puls    y
E886 1039             (        forth.asm):01415 (6)             pulsw
E888 3710             (        forth.asm):01416                 UCNPOP                  Retrieve buffer addr to X
E88A 9F1C             (        forth.asm):01417 (4)     @done   stx     BSBFADR         Update base buffer address
E88C DC22             (        forth.asm):01418 (4)             ldd     UTOIN
E88E 308B             (        forth.asm):01419 (4+2)           leax    d,x             Add the current offset. Return the result via X
E890 39               (        forth.asm):01420 (4)             rts
E891 8E0316           (        forth.asm):01421 (3)     @consol ldx     #CMDBUF
E894 20F4             (        forth.asm):01422 (3)             bra     @done
                      (        forth.asm):01423         
                      (        forth.asm):01424                 include rtc.asm
                      (          rtc.asm):00001                 IFNE RTCFEAT
                      (          rtc.asm):00002         
                      (          rtc.asm):00003         * FIRQ handler for the MC146818 RTC.
                      (          rtc.asm):00004         * In this particular context, only D and CC might be altered.
E896                  (          rtc.asm):00005         RTCIHDL tst     RTCAVL          RTC chip detected?
                      (          rtc.asm):00006                 beq     @notick         Nope
                      (          rtc.asm):00007                 lda     #RTOREGC        Read RTCC. INTACK if any interrupt is pending.
                      (          rtc.asm):00008         * Two intructions inlined for RTREGRD in non-preemtible (interrupt) mode.
                      (          rtc.asm):00009                 sta     RTAS
                      (          rtc.asm):00010                 ldb     RTDS
                      (          rtc.asm):00011                 andb    #RTCPF          RTC periodic interrupt pending?
                      (          rtc.asm):00012                 beq     @notick         No, this ain't us ticking
                      (          rtc.asm):00013         * From "The 6309 Book" p. 3-69: "Note that INC does not effect the carry bit."
E896                  (          rtc.asm):00014         @inctks ldd     TIKSLOW
                      (          rtc.asm):00015                 addd    #1
                      (          rtc.asm):00016                 std     TIKSLOW
                      (          rtc.asm):00017                 ldd     TIKSHI
                      (          rtc.asm):00018                 adcd    #0
                      (          rtc.asm):00019                 std     TIKSHI
E896                  (          rtc.asm):00020         @notick rts
                      (          rtc.asm):00021         
                      (          rtc.asm):00022         * Read one byte from an internal's RTC register whose offset is in A upon
                      (          rtc.asm):00023         * routine entry. The register contents is returned in B.
                      (          rtc.asm):00024         * No other register is altered. FIRQ is temporarily disabled.
                      (          rtc.asm):00025         * Can be called from base or interrupt level.
E896                  (          rtc.asm):00026         RTREGRD pshs    cc
                      (          rtc.asm):00027                 orcc    #FFLAG          Mask FIRQ
                      (          rtc.asm):00028                 sta     RTAS            Select target RTC register
                      (          rtc.asm):00029                 ldb     RTDS            Read RTC register contents
                      (          rtc.asm):00030                 puls    cc              Restore previous interrupt handling mode
                      (          rtc.asm):00031                 rts
                      (          rtc.asm):00032         
                      (          rtc.asm):00033         * Write one byte to an internal's RTC register whose offset is in A upon
                      (          rtc.asm):00034         * routine entry. The register byte output value is in B upon entry.
                      (          rtc.asm):00035         * FIRQ is temporarily masked. All regs contents are preserved.
                      (          rtc.asm):00036         * Can be called from base or interrupt level.
E896                  (          rtc.asm):00037         RTREGWR pshs    cc
                      (          rtc.asm):00038                 orcc    #FFLAG          Mask FIRQ
                      (          rtc.asm):00039                 sta     RTAS            Select target RTC register
                      (          rtc.asm):00040                 stb     RTDS            Write RTC register contents
                      (          rtc.asm):00041                 puls    cc              Restore previous interrupt handling mode
                      (          rtc.asm):00042                 rts
                      (          rtc.asm):00043         
                      (          rtc.asm):00044         * Detect if an MC146818 chip is present.
E896                  (          rtc.asm):00045         RTCINIT
                      (          rtc.asm):00046                 IFNE    DEBUG
                      (          rtc.asm):00047                 clrd
                      (          rtc.asm):00048                 std     TIKSHI          Initialize the TICKS double cell
                      (          rtc.asm):00049                 std     TIKSLOW
                      (          rtc.asm):00050                 clr     RTCAVL          Assume chip not present
                      (          rtc.asm):00051                 ENDC
                      (          rtc.asm):00052                 lda     #RTOPRES        Offset to the last NVRAM byte if dev is present
                      (          rtc.asm):00053                 bsr     RTREGRD         Read user memory byte. Value is returned in B   
                      (          rtc.asm):00054                 comb                    One's complement to B
                      (          rtc.asm):00055                 pshs    b
                      (          rtc.asm):00056                 bsr     RTREGWR         Write back one's complement to RTC
                      (          rtc.asm):00057                 bsr     RTREGRD         And read the last NVRAM byte back
                      (          rtc.asm):00058                 puls    a
                      (          rtc.asm):00059                 cmpr    b,a             Match?
                      (          rtc.asm):00060                 beq     @rtdtct         RTC chip detected all right!
                      (          rtc.asm):00061                 rts
                      (          rtc.asm):00062         * MC146818 RTC chip detected.
                      (          rtc.asm):00063         * On power up if register RTCA reads as 0, the SET bit in register RTCB will
                      (          rtc.asm):00064         * prevent any updates to the calendar (date/time). We do preserve the state of
                      (          rtc.asm):00065         * the SET bit, so as to indicate to the application software that the time and
                      (          rtc.asm):00066         * date have yet to be set manually.
E896                  (          rtc.asm):00067         @rtdtct lda     #RTOREGA
                      (          rtc.asm):00068                 ldb     #(RTADV32|RTARS64)
                      (          rtc.asm):00069                 bsr     RTREGWR         Write B to the RTCA register
                      (          rtc.asm):00070                 lda     #RTOREGB
                      (          rtc.asm):00071                 bsr     RTREGRD
                      (          rtc.asm):00072                 andb    #RTBSET         Extract the SET bit
                      (          rtc.asm):00073                 orb     #(RTBPIE|RTBDM|RTB24)
                      (          rtc.asm):00074                 bsr     RTREGWR         Write B to the RTCB register
                      (          rtc.asm):00075                 inc     RTCAVL
                      (          rtc.asm):00076                 ldx     #RTPRESM        Real time clock detected message base address
                      (          rtc.asm):00077                 jmp     PUTS            Out to the console
                      (          rtc.asm):00078         
                      (          rtc.asm):00079                 ENDC                    RTCFEAT
                      (          rtc.asm):00080         
                      (        forth.asm):01425                 include storage.asm
                      (      storage.asm):00001         * Wait until the BSY bit is clear in the CF status register.
                      (      storage.asm):00002         * Upon return the BSY bit is guaranteed to be zero. Z will
                      (      storage.asm):00003         * be set in CC. This subroutine should not be called before
                      (      storage.asm):00004         * the CompactFlash presence has been assessed.
E896 B6C007           (      storage.asm):00005 (4)     CFWAIT  lda     CFSTATR
E899 8580             (      storage.asm):00006 (2)             bita    #CFBSYB
E89B 26F9             (      storage.asm):00007 (3)             bne     CFWAIT
E89D 39               (      storage.asm):00008 (4)             rts
                      (      storage.asm):00009         
                      (      storage.asm):00010         * Wait until the BSY bit is clear and the RDY bit is set.
E89E 8DF6             (      storage.asm):00011 (6)     CFRDY   bsr     CFWAIT
E8A0 2703             (      storage.asm):00012 (3)             beq     @cfrdy0         Card not busy, proceed
E8A2 1A04             (      storage.asm):00013 (2)             orcc    #ZFLAG
E8A4 39               (      storage.asm):00014 (4)             rts
E8A5 8E2000           (      storage.asm):00015 (3)     @cfrdy0 ldx     #$2000          Maximum poll count
E8A8 8640             (      storage.asm):00016 (2)             lda     #CFRDYB
E8AA B5C007           (      storage.asm):00017 (4)     @cfrdy1 bita    CFSTATR
E8AD 2604             (      storage.asm):00018 (3)             bne     @cfrdy2         BSY bit is set, continue
E8AF 301F             (      storage.asm):00019 (4+1)           leax    -1,x            Card not ready, decrement poll count
E8B1 26F7             (      storage.asm):00020 (3)             bne     @cfrdy1         and try again
E8B3 39               (      storage.asm):00021 (4)     @cfrdy2 rts                     Return with Z set: card not present
                      (      storage.asm):00022         *                               Return with Z clear: card is ready
                      (      storage.asm):00023         
                      (      storage.asm):00024         * Check for possible error condition.
                      (      storage.asm):00025         * Upon return either Z is set (A is zero) and no error occurred or
                      (      storage.asm):00026         * Z is clear and the CF error register contents is returned in A.
E8B4 8DE0             (      storage.asm):00027 (6)     CFERRCK bsr     CFWAIT
E8B6 B6C007           (      storage.asm):00028 (4)             lda     CFSTATR
E8B9 8401             (      storage.asm):00029 (2)             anda    #CFERRB
E8BB 2703             (      storage.asm):00030 (3)             beq     @cfeck1
E8BD B6C001           (      storage.asm):00031 (4)             lda     CFERROR         The error register contains error details
E8C0 39               (      storage.asm):00032 (4)     @cfeck1 rts
                      (      storage.asm):00033         
                      (      storage.asm):00034         * Issue CF command. The command code is passed through the B register.
                      (      storage.asm):00035         * Upon return:
                      (      storage.asm):00036         * - Z is set and everything is peachy.
                      (      storage.asm):00037         * - or Z is clear and the CF error register contents will be
                      (      storage.asm):00038         *   returned in A (and mirrored in the global CFERRCD variable).
                      (      storage.asm):00039         * B is preserved.
E8C1 8DDB             (      storage.asm):00040 (6)     CFCMDIS bsr     CFRDY
E8C3 270A             (      storage.asm):00041 (3)             beq     @cfciab         Card not ready, abort
E8C5 D73F             (      storage.asm):00042 (3)             stb     CFCMMIR         Update CF command mirror
E8C7 F7C007           (      storage.asm):00043 (4)             stb     CFCOMDR         Send command to the CF card
E8CA 8DE8             (      storage.asm):00044 (6)             bsr     CFERRCK
E8CC 9740             (      storage.asm):00045 (3)     @cfcise sta     CFERRCD         CF command issue set error
                      (      storage.asm):00046                 IFNE    DEBUG
                      (      storage.asm):00047                 pshs    a,cc
                      (      storage.asm):00048                 beq     @cfciok
                      (      storage.asm):00049                 lda     #'!
                      (      storage.asm):00050                 jsr     PUTCH
E8CE                  (      storage.asm):00051         @cfcidi lda     CFCMMIR
                      (      storage.asm):00052                 ldx     #TBUFF
                      (      storage.asm):00053                 jsr     HDMP2
                      (      storage.asm):00054                 lda     #'/
                      (      storage.asm):00055                 sta     ,x+
                      (      storage.asm):00056                 lda     CFERRCD
                      (      storage.asm):00057                 jsr     HDMP2
                      (      storage.asm):00058                 ldx     #TBUFF
                      (      storage.asm):00059                 jsr     PUTS
                      (      storage.asm):00060                 jsr     PUTCR
                      (      storage.asm):00061                 bra     @cfcict         CF command issue continued
E8CE                  (      storage.asm):00062         @cfciok lda     #'#
                      (      storage.asm):00063                 jsr     PUTCH
                      (      storage.asm):00064                 bra     @cfcidi         CF command issue data indication
E8CE                  (      storage.asm):00065         @cfcict puls    cc,a
                      (      storage.asm):00066                 ENDC
E8CE 39               (      storage.asm):00067 (4)             rts
E8CF 86FF             (      storage.asm):00068 (2)     @cfciab lda     #$FF            Dummy error code
E8D1 20F9             (      storage.asm):00069 (3)             bra     @cfcise
                      (      storage.asm):00070         
                      (      storage.asm):00071         * Drive 0 select.
E8D3 8DC9             (      storage.asm):00072 (6)     CFDRSEL bsr     CFRDY
E8D5 86E0             (      storage.asm):00073 (2)             lda     #$E0            Drive 0, LBA mode
E8D7 B7C006           (      storage.asm):00074 (4)             sta     CFDRHDR
E8DA 20C2             (      storage.asm):00075 (3)             bra     CFRDY
                      (      storage.asm):00076         
                      (      storage.asm):00077         * Analyze the response to the CF "Identify Device" request.
E8DC 9E08             (      storage.asm):00078 (4)     CFANTHS ldx     DICEND
E8DE 308836           (      storage.asm):00079 (4+1)           leax    $36,x           Point to the "Model number" field
E8E1 3410             (      storage.asm):00080 (4+2)           pshs    x
E8E3 118614           (      storage.asm):00081 (3)             lde     #$14            Number of 16 bit words to go through
E8E6 EC84             (      storage.asm):00082 (5+0)   @bytswp ldd     ,x
E8E8 1E98             (      storage.asm):00083 (5)             exg     b,a             Byte swapping
E8EA ED81             (      storage.asm):00084 (5+2)           std     ,x++
E8EC 114A             (      storage.asm):00085 (2)             dece
E8EE 26F6             (      storage.asm):00086 (3)             bne     @bytswp
E8F0 6F84             (      storage.asm):00087 (6+0)           clr     ,x
E8F2 3510             (      storage.asm):00088 (4+2)           puls    x
E8F4 BDE332           (      storage.asm):00089 (7)             jsr     PUTS            Decent CF cards indicate the capacity that way
E8F7 7EE33F           (      storage.asm):00090 (3)             jmp     PUTCR           Up to $10000 blocks is 64 MB!
                      (      storage.asm):00091         
                      (      storage.asm):00092         * Initialize the CompactFlash subsystem.
                      (      storage.asm):00093         * This is run once at boot time. There is no hot plug support here.
E8FA 0F3E             (      storage.asm):00094 (5)     CFINIT  clr     CFCARDP         Clear card present,
                      (      storage.asm):00095                 IFEQ    DEBUG
E8FC 8DA0             (      storage.asm):00096 (6)             bsr     CFRDY
                      (      storage.asm):00097                 ELSE
                      (      storage.asm):00098                 jsr     CFRDY
                      (      storage.asm):00099                 ENDC
E8FE 2730             (      storage.asm):00100 (3)             beq     @cfinab         Card not ready, abort
E900 8DD1             (      storage.asm):00101 (6)             bsr     CFDRSEL         Drive 0 select
E902 8601             (      storage.asm):00102 (2)             lda     #1              Enable 8-bit data transfers
E904 B7C001           (      storage.asm):00103 (4)             sta     CFFEATR
E907 C6EF             (      storage.asm):00104 (2)             ldb     #CFSETFT        Issue a CF "Set Feature" command
                      (      storage.asm):00105                 IFEQ    DEBUG
E909 8DB6             (      storage.asm):00106 (6)             bsr     CFCMDIS         Not allowed to fail
                      (      storage.asm):00107                 ELSE
                      (      storage.asm):00108                 jsr     CFCMDIS         Not allowed to fail
                      (      storage.asm):00109                 ENDC
E90B 2623             (      storage.asm):00110 (3)             bne     @cfinab         Abort with card present flag clear
E90D 8601             (      storage.asm):00111 (2)             lda     #1              Request default PIO mode wo/ IORDY
E90F B7C002           (      storage.asm):00112 (4)             sta     CFSCNTR
E912 8603             (      storage.asm):00113 (2)             lda     #3              ATA-2 "Set Transfer mode"
E914 B7C001           (      storage.asm):00114 (4)             sta     CFFEATR
                      (      storage.asm):00115                 IFEQ    DEBUG
E917 8DA8             (      storage.asm):00116 (6)             bsr     CFCMDIS         OK to fail
                      (      storage.asm):00117                 ELSE
                      (      storage.asm):00118                 jsr     CFCMDIS         OK to fail
                      (      storage.asm):00119                 ENDC
E919 8682             (      storage.asm):00120 (2)             lda     #$82            Disable write caching
E91B B7C001           (      storage.asm):00121 (4)             sta     CFFEATR
                      (      storage.asm):00122                 IFEQ    DEBUG
E91E 8DA1             (      storage.asm):00123 (6)             bsr     CFCMDIS         B still has #CFSETF. Also OK to fail
                      (      storage.asm):00124                 ELSE
                      (      storage.asm):00125                 jsr     CFCMDIS         B still has #CFSETF. Also OK to fail
                      (      storage.asm):00126                 ENDC
E920 C6EC             (      storage.asm):00127 (2)             ldb     #CFIDDEV        Issue a CF "Identify Device" command
                      (      storage.asm):00128                 IFEQ    DEBUG
E922 8D9D             (      storage.asm):00129 (6)             bsr     CFCMDIS         Not allowed to fail
                      (      storage.asm):00130                 ELSE
                      (      storage.asm):00131                 jsr     CFCMDIS         Not allowed to fail
                      (      storage.asm):00132                 ENDC
E924 260A             (      storage.asm):00133 (3)             bne     @cfinab         Abort with card present flag clear
E926 9E08             (      storage.asm):00134 (4)             ldx     DICEND          Target address is HERE
E928 8D07             (      storage.asm):00135 (6)             bsr     CF1SRD          Read one sector
E92A 8DB0             (      storage.asm):00136 (6)             bsr     CFANTHS         Analyze this!
E92C 8601             (      storage.asm):00137 (2)             lda     #1
E92E 973E             (      storage.asm):00138 (3)             sta     CFCARDP         Set the card present flag
E930 39               (      storage.asm):00139 (4)     @cfinab rts
                      (      storage.asm):00140         
                      (      storage.asm):00141         * Read one sector. The LBA parameters are assumed to have been set previously.
                      (      storage.asm):00142         * On input X points to the receiving (at least 512 bytes long) buffer.
E931 B6C007           (      storage.asm):00143 (4)     CF1SRD  lda     CFSTATR
E934 8508             (      storage.asm):00144 (2)             bita    #CFDRQB         Check for DRQ bit in the CF status register
E936 2712             (      storage.asm):00145 (3)             beq     IOERR
E938 10860200         (      storage.asm):00146 (4)             ldw     #CFSCSZ         Sector size is 512 bytes
E93C 108EC000         (      storage.asm):00147 (4)             ldy     #CFDATAR        The data source address
E940 3401             (      storage.asm):00148 (4+1)           pshs    cc
E942 1A50             (      storage.asm):00149 (2)             orcc    #(FFLAG|IFLAG)  Disable maskable interrupts
E944 113B21           (      storage.asm):00150 (6+?)           tfm     y,x+
E947 3501             (      storage.asm):00151 (4+1)           puls    cc              Restore previous interrupt handling mode
E949 39               (      storage.asm):00152 (4)             rts
E94A C611             (      storage.asm):00153 (2)     IOERR   ldb     #17
E94C BDE7A2           (      storage.asm):00154 (7)             jsr     ERRHDLR         No return
E94F 12               (      storage.asm):00155 (1)     CFR1SRA nop                     For symbolic stack dump debugging purposes
                      (      storage.asm):00156         
                      (      storage.asm):00157         * Write one sector. The LBA parameters are assumed to have been set previously.
                      (      storage.asm):00158         * On input X points to the sending (at least 512 bytes long) buffer.
E950 B6C007           (      storage.asm):00159 (4)     CF1SWR  lda     CFSTATR
E953 8488             (      storage.asm):00160 (2)             anda    #CFBSYB|CFDRQB
E955 8108             (      storage.asm):00161 (2)             cmpa    #CFDRQB         Check for BSY clear and DRQ set
E957 26F7             (      storage.asm):00162 (3)             bne     CF1SWR
E959 10860200         (      storage.asm):00163 (4)             ldw     #CFSCSZ         Sector size is 512 bytes
E95D 108EC000         (      storage.asm):00164 (4)             ldy     #CFDATAR        The data destination address
E961 113A12           (      storage.asm):00165 (6+?)           tfm     x+,y            Note: tfm is interruptible!
E964 39               (      storage.asm):00166 (4)             rts
                      (      storage.asm):00167         
                      (      storage.asm):00168         * 1KB Forth block support primitives. Not dictionary code. More like BIOS ops.
                      (      storage.asm):00169         
                      (      storage.asm):00170         * One block IO preamble: select drive and LBA parameters. On input:
                      (      storage.asm):00171         * ,s has the return address
                      (      storage.asm):00172         * 2,s had the return address for the caller
                      (      storage.asm):00173         * 4,s has the target block number
E965 BDE896           (      storage.asm):00174 (7)     CF1BPRE jsr     CFWAIT
E968 BDE8D3           (      storage.asm):00175 (7)             jsr     CFDRSEL         Set drive and head parameters
E96B EC64             (      storage.asm):00176 (5+1)           ldd     4,s
E96D 1048             (      storage.asm):00177 (2)             lsld                    Convert block number to sector number
E96F F7C003           (      storage.asm):00178 (4)             stb     CFSNUMR         LBA 7-0
E972 B7C004           (      storage.asm):00179 (4)             sta     CFCLOWR         LBA 15-8
E975 1FA8             (      storage.asm):00180 (4)             tfr     cc,a
E977 8401             (      storage.asm):00181 (2)             anda    #CFLAG
E979 B7C005           (      storage.asm):00182 (4)             sta     CFCHIGR         LBA 23-16 (carry to cylinder high)
E97C 8602             (      storage.asm):00183 (2)             lda     #2              2 IDE sectors per Forth block
E97E B7C002           (      storage.asm):00184 (4)             sta     CFSCNTR
E981 39               (      storage.asm):00185 (4)             rts
                      (      storage.asm):00186         
                      (      storage.asm):00187         * Read one block from CF device. On input:
                      (      storage.asm):00188         * ,s has the return address
                      (      storage.asm):00189         * 2,s has the target block number
                      (      storage.asm):00190         * 4,s has the buffer base address
                      (      storage.asm):00191         * Upon return, Y will be preserved.
E982 0D3E             (      storage.asm):00192 (4)     CF1BKRD tst     CFCARDP
E984 2602             (      storage.asm):00193 (3)             bne     @ctnued
E986 20C2             (      storage.asm):00194 (3)             bra     IOERR           Card not present--CF subsystem not initialized
E988 1F27             (      storage.asm):00195 (4)     @ctnued tfr     y,v
E98A 8DD9             (      storage.asm):00196 (6)             bsr     CF1BPRE
E98C C620             (      storage.asm):00197 (2)             ldb     #CFRSCTS        Issue a "Read sectors" CF command
E98E BDE8C1           (      storage.asm):00198 (7)             jsr     CFCMDIS
E991 AE64             (      storage.asm):00199 (5+1)           ldx     4,s             Target buffer address to X
E993 8D9C             (      storage.asm):00200 (6)             bsr     CF1SRD          Read the even sector from CF device
E995 BDE896           (      storage.asm):00201 (7)             jsr     CFWAIT          Wait for next sector to become available
E998 8D97             (      storage.asm):00202 (6)             bsr     CF1SRD          and read the odd sector
E99A 1F72             (      storage.asm):00203 (4)             tfr     v,y
E99C 39               (      storage.asm):00204 (4)             rts
                      (      storage.asm):00205         
                      (      storage.asm):00206         * Write one block to CF device. Upon entry:
                      (      storage.asm):00207         * ,s has the return address
                      (      storage.asm):00208         * 2,s has the target block number
                      (      storage.asm):00209         * 4,s has the buffer base address
                      (      storage.asm):00210         * Upon return, Y will be preserved.
E99D 0D3E             (      storage.asm):00211 (4)     CF1BKWR tst     CFCARDP
E99F 2602             (      storage.asm):00212 (3)             bne     @ctnued
E9A1 20A7             (      storage.asm):00213 (3)             bra     IOERR           Card not present--CF subsystem not initialized
E9A3 1F27             (      storage.asm):00214 (4)     @ctnued tfr     y,v
E9A5 8DBE             (      storage.asm):00215 (6)             bsr     CF1BPRE
E9A7 C630             (      storage.asm):00216 (2)             ldb     #CFWSCTS        Issue a "Write sectors" CF command
E9A9 BDE8C1           (      storage.asm):00217 (7)             jsr     CFCMDIS
E9AC AE64             (      storage.asm):00218 (5+1)           ldx     4,s             Source buffer address to X
E9AE 8DA0             (      storage.asm):00219 (6)             bsr     CF1SWR          Write the even sector to CF device
E9B0 BDE896           (      storage.asm):00220 (7)             jsr     CFWAIT          Wait for next sector to become available
E9B3 8D9B             (      storage.asm):00221 (6)             bsr     CF1SWR          and write the odd sector
E9B5 1F72             (      storage.asm):00222 (4)             tfr     v,y
E9B7 39               (      storage.asm):00223 (4)             rts
                      (      storage.asm):00224         
                      (        forth.asm):01426         
                      (        forth.asm):01427         ******************************************************************************
                      (        forth.asm):01428         * Dictionary begins. In the code below ANSI refers to ANSI-X3.215-1994
                      (        forth.asm):01429         * Draft 6 proposal (i.e. the free spec).
                      (        forth.asm):01430         
E9B8 0D               (        forth.asm):01431         EBUFS   fcb     13              79-STANDARD (REQ145)
E9B9 454D5054592D4255 (        forth.asm):01432                 fcc     'EMPTY-BUFFERS' ( -- )
     4646455253
E9C6 0000             (        forth.asm):01433                 fdb     0               Last dictionary entry
E9C8 C7               (        forth.asm):01434                 RFCS
E9C9 7EE3BA           (        forth.asm):01435 (3)             jmp     EMPTYB
                      (        forth.asm):01436         
E9CC 0C               (        forth.asm):01437         SAVBUF  fcb     12              79-STANDARD (REQ221)
E9CD 534156452D425546 (        forth.asm):01438                 fcc     'SAVE-BUFFERS'  ( -- )
     46455253
E9D9 E9B8             (        forth.asm):01439                 fdb     EBUFS
E9DB C7               (        forth.asm):01440                 RFCS
E9DC 8E0440           (        forth.asm):01441 (3)             ldx     #BUF0
E9DF 8D03             (        forth.asm):01442 (6)             bsr     WBIFDRT
E9E1 8E0850           (        forth.asm):01443 (3)             ldx     #BUF1
                      (        forth.asm):01444         * Write buffer back to mass storage if marked as dirty.
                      (        forth.asm):01445         * The dirty bit is cleared but the buffer contents itself is not.
                      (        forth.asm):01446         * The buffer will continue to be marked as "in use."
                      (        forth.asm):01447         * On input X has has the base buffer address. Both D and X
                      (        forth.asm):01448         * are preserved. Y is not.
E9E4 3406             (        forth.asm):01449 (4+2)   WBIFDRT pshs    d
E9E6 3410             (        forth.asm):01450 (4+2)           pshs    x               Base buffer address (arg1 to CF1BKWR)
E9E8 8605             (        forth.asm):01451 (2)             lda     #BINUSE|BDIRTY
E9EA A4890401         (        forth.asm):01452 (4+3)           anda    BOFLAGS,x
E9EE 8105             (        forth.asm):01453 (2)             cmpa    #BINUSE|BDIRTY
E9F0 2616             (        forth.asm):01454 (3)             bne     @alldon         Block not in use or in use but not dirty
E9F2 AE890402         (        forth.asm):01455 (5+3)           ldx     BOBLKNO,x
E9F6 3410             (        forth.asm):01456 (4+2)           pshs    x               Block number (arg0 to CF1BKWR)
E9F8 8DA3             (        forth.asm):01457 (6)             bsr     CF1BKWR         Write data buffer to CF
E9FA 3262             (        forth.asm):01458 (4+1)           leas    2,s             Drop one cell from the system stack (blknum)
E9FC AEE4             (        forth.asm):01459 (5+0)           ldx     ,s              Retrieve base buffer address
E9FE 30890401         (        forth.asm):01460 (4+3)           leax    BOFLAGS,x
EA02 A684             (        forth.asm):01461 (4+0)           lda     ,x              Acquire the 'flags' field
EA04 84FB             (        forth.asm):01462 (2)             anda    #^BDIRTY        Clear the dirty bit
EA06 A784             (        forth.asm):01463 (4+0)           sta     ,x              and update the 'flags' field
EA08 3510             (        forth.asm):01464 (4+2)   @alldon puls    x               Restore X
EA0A 3506             (        forth.asm):01465 (4+2)           puls    d               and D
EA0C 39               (        forth.asm):01466 (4)             rts
                      (        forth.asm):01467         
EA0D 05               (        forth.asm):01468         FLUSH   fcb     5               79-STANDARD (REF)
EA0E 464C555348       (        forth.asm):01469                 fcc     'FLUSH'         ( -- ) An alias for SAVE-BUFFERS
EA13 E9CC             (        forth.asm):01470                 fdb     SAVBUF
EA15 C7               (        forth.asm):01471                 RFCS
EA16 20C4             (        forth.asm):01472                 RFXT    bra,SAVBUF+15   XT for SAVE-BUFFERS
                      (        forth.asm):01473         
EA18 06               (        forth.asm):01474         UPDATE  fcb     6               79-STANDARD (REQ229)
EA19 555044415445     (        forth.asm):01475                 fcc     'UPDATE'        ( -- )
EA1F EA0D             (        forth.asm):01476                 fdb     FLUSH
EA21 C7               (        forth.asm):01477                 RFCS
EA22 9E1A             (        forth.asm):01478 (4)             ldx     MRUBUFA         Most recently used buffer base address
EA24 30890401         (        forth.asm):01479 (4+3)           leax    BOFLAGS,x       Buffer 'flags' field's address to X
EA28 A684             (        forth.asm):01480 (4+0)           lda     ,x              Buffer 'flags' field to A
EA2A 8501             (        forth.asm):01481 (2)             bita    #BINUSE         Is that buffer in use?
EA2C 2704             (        forth.asm):01482 (3)             beq     @upddon         No, we're done here
EA2E 8A04             (        forth.asm):01483 (2)             ora     #BDIRTY
EA30 A784             (        forth.asm):01484 (4+0)           sta     ,x              Set the dirty bit
EA32 39               (        forth.asm):01485 (4)     @upddon rts
                      (        forth.asm):01486         
EA33 06               (        forth.asm):01487         BUFFER  fcb     6               79-STANDARD (REQ130)
EA34 425546464552     (        forth.asm):01488                 fcc     'BUFFER'        ( ublkno -- addr )
EA3A EA18             (        forth.asm):01489                 fdb     UPDATE
EA3C C7               (        forth.asm):01490                 RFCS
EA3D BDE831           (        forth.asm):01491 (7)             jsr     NPOP
EA40 1F12             (        forth.asm):01492 (4)             tfr     x,y             ublkno to Y
                      (        forth.asm):01493         * Block lookup.
EA42 8E0440           (        forth.asm):01494 (3)             ldx     #BUF0           Base address of the first resident buffer
EA45 C602             (        forth.asm):01495 (2)             ldb     #2              Number of resident buffers
EA47 A6890401         (        forth.asm):01496 (4+3)   @blkup  lda     BOFLAGS,x       Buffer flags to A
EA4B 8501             (        forth.asm):01497 (2)             bita    #BINUSE         Buffer in use?
EA4D 270C             (        forth.asm):01498 (3)             beq     @nxtbuf         No
EA4F 10AC890402       (        forth.asm):01499 (6+3)           cmpy    BOBLKNO,x       Buffer is in use. Block number match?
EA54 2605             (        forth.asm):01500 (3)             bne     @nxtbuf         No
EA56 9F1A             (        forth.asm):01501 (4)     @retba  stx     MRUBUFA         Block number match. Mark as the MRU buffer
EA58 3610             (        forth.asm):01502                 UCNPUSH                 and return its base address via the data stack
EA5A 39               (        forth.asm):01503 (4)             rts
EA5B 30890410         (        forth.asm):01504 (4+3)   @nxtbuf leax    BFDISP,x        Point to the next buffer
EA5F 5A               (        forth.asm):01505 (1)             decb
EA60 26E5             (        forth.asm):01506 (3)             bne     @blkup
                      (        forth.asm):01507         * The block number in Y is not currently in use. Assign a buffer to it.
EA62 8E0440           (        forth.asm):01508 (3)             ldx     #BUF0
EA65 9C1A             (        forth.asm):01509 (4)             cmpx    MRUBUFA         Most recently used buffer address
EA67 2603             (        forth.asm):01510 (3)             bne     @bselct
EA69 8E0850           (        forth.asm):01511 (3)             ldx     #BUF1
                      (        forth.asm):01512         * At this point X has the base address of the block we are interested in.
EA6C 3420             (        forth.asm):01513 (4+2)   @bselct pshs    y               Backup the target block number
EA6E BDE9E4           (        forth.asm):01514 (7)             jsr     WBIFDRT         Write back if dirty. X and D are preserved
EA71 8601             (        forth.asm):01515 (2)             lda     #BINUSE
EA73 A7890401         (        forth.asm):01516 (4+3)           sta     BOFLAGS,x       Update the buffers 'flags' field
EA77 3520             (        forth.asm):01517 (4+2)           puls    y               Restore the target block number
EA79 10AF890402       (        forth.asm):01518 (6+3)           sty     BOBLKNO,x       and update the 'blknum' field as well
EA7E 20D6             (        forth.asm):01519 (3)             bra     @retba
                      (        forth.asm):01520         
EA80 05               (        forth.asm):01521         BLOCK   fcb     5               79-STANDARD (REQ191)
EA81 424C4F434B       (        forth.asm):01522                 fcc     'BLOCK'         ( ublkno -- addr )
EA86 EA33             (        forth.asm):01523                 fdb     BUFFER
EA88 C7               (        forth.asm):01524                 RFCS
EA89 8DB2             (        forth.asm):01525                 RFXT    bsr,BUFFER+9    XT for BUFFER
                      (        forth.asm):01526         * Upon return Y has has the block number.
EA8B 3710             (        forth.asm):01527                 UCNPOP                  Buffer base address to X
EA8D 3410             (        forth.asm):01528 (4+2)           pshs    x               Push base buffer address as Arg1 to CF1BKRD
EA8F A6890401         (        forth.asm):01529 (4+3)           lda     BOFLAGS,x       Retrieve buffer 'flags' field
                      (        forth.asm):01530                 IFNE    DEBUG
                      (        forth.asm):01531                 bita    #BINUSE
                      (        forth.asm):01532                 bne     @blkctd
                      (        forth.asm):01533                 lda     #10             Assertion failed
                      (        forth.asm):01534                 jsr     ERRHDLR         No return
                      (        forth.asm):01535                 ENDC                    DEBUG
EA93 8402             (        forth.asm):01536 (2)     @blkctd anda    #BMAPPD         Has the block been read yet?
EA95 2613             (        forth.asm):01537 (3)             bne     @bkmapd         Yes
EA97 3420             (        forth.asm):01538 (4+2)           pshs    y               No. Push block number as arg0 to CF1BKRD
                      (        forth.asm):01539         * Map in the block from the CF device. System stack structure is as follows:
                      (        forth.asm):01540         * ,s has the target block number.
                      (        forth.asm):01541         * 2,s has the buffer base address.
EA99 BDE982           (        forth.asm):01542 (7)             jsr     CF1BKRD
EA9C 3262             (        forth.asm):01543 (4+1)           leas    2,s             Drop one cell from the system stack
                      (        forth.asm):01544         * Update the buffer flags field.
EA9E AEE4             (        forth.asm):01545 (5+0)           ldx     ,s              Base buffer address
EAA0 30890401         (        forth.asm):01546 (4+3)           leax    BOFLAGS,x       Buffer 'flags' field address to X
EAA4 A684             (        forth.asm):01547 (4+0)           lda     ,x              Read buffer 'flags' field
EAA6 8A02             (        forth.asm):01548 (2)             ora     #BMAPPD
EAA8 A784             (        forth.asm):01549 (4+0)           sta     ,x              and mark it as read
EAAA 3510             (        forth.asm):01550 (4+2)   @bkmapd puls    x               Buffer base address to X
EAAC 3610             (        forth.asm):01551                 UCNPUSH
EAAE 39               (        forth.asm):01552 (4)             rts
                      (        forth.asm):01553         
EAAF 03               (        forth.asm):01554         BLK     fcb     3
EAB0 424C4B           (        forth.asm):01555                 fcc     'BLK'
EAB3 EA80             (        forth.asm):01556                 fdb     BLOCK
EAB5 C7               (        forth.asm):01557                 RFCS
EAB6 8E0124           (        forth.asm):01558 (3)             ldx     #UBLK
EAB9 7EE823           (        forth.asm):01559 (3)             jmp     NPUSH
                      (        forth.asm):01560         
EABC 03               (        forth.asm):01561         TOIN    fcb     3
EABD 3E494E           (        forth.asm):01562                 fcc     '>IN'
EAC0 EAAF             (        forth.asm):01563                 fdb     BLK
EAC2 C7               (        forth.asm):01564                 RFCS
EAC3 8E0122           (        forth.asm):01565 (3)             ldx     #UTOIN
EAC6 7EE823           (        forth.asm):01566 (3)             jmp     NPUSH
                      (        forth.asm):01567         
EAC9 03               (        forth.asm):01568         SCR     fcb     3
EACA 534352           (        forth.asm):01569                 fcc     'SCR'
EACD EABC             (        forth.asm):01570                 fdb     TOIN
EACF C7               (        forth.asm):01571                 RFCS
EAD0 8E0126           (        forth.asm):01572 (3)             ldx     #USCR
EAD3 7EE823           (        forth.asm):01573 (3)             jmp     NPUSH
                      (        forth.asm):01574         
                      (        forth.asm):01575         * Functionally: : LINE 6 SHIFT SCR @ BLOCK + ;
EAD6 04               (        forth.asm):01576         LINE    fcb     4               79-STANDARD (REF)
EAD7 4C494E45         (        forth.asm):01577                 fcc     'LINE'
EADB EAC9             (        forth.asm):01578                 fdb     SCR
EADD C7               (        forth.asm):01579                 RFCS
EADE 8E0006           (        forth.asm):01580 (3)             ldx     #6
EAE1 BDE823           (        forth.asm):01581 (7)             jsr     NPUSH
EAE4 BDF8F2           (        forth.asm):01582                 RFXT    jsr,SHIFT+8     XT for SHIFT
EAE7 9E26             (        forth.asm):01583 (4)             ldx     USCR
EAE9 BDE823           (        forth.asm):01584 (7)             jsr     NPUSH
EAEC 8D9B             (        forth.asm):01585                 RFXT    bsr,BLOCK+8     XT for BLOCK
EAEE 7EF86A           (        forth.asm):01586                 RFXT    jmp,PLUS+4      XT for +
                      (        forth.asm):01587         
                      (        forth.asm):01588         * Functionally:
                      (        forth.asm):01589         * : INDEX 1+ SWAP DO
                      (        forth.asm):01590         *     CR   I SCR !
                      (        forth.asm):01591         *     0 LINE 64 TYPE
                      (        forth.asm):01592         *   LOOP ;
EAF1 05               (        forth.asm):01593         INDEX   fcb     5               79-STANDARD (REF)
EAF2 494E444558       (        forth.asm):01594                 fcc     'INDEX'         ( n1 n2 -- )
EAF7 EAD6             (        forth.asm):01595                 fdb     LINE
EAF9 C7               (        forth.asm):01596                 RFCS
EAFA BDE831           (        forth.asm):01597 (7)             jsr     NPOP            N2 to X
EAFD 3001             (        forth.asm):01598 (4+1)           leax    1,x             1+
EAFF 1F12             (        forth.asm):01599 (4)             tfr     x,y             Y has the limit (not reached)
EB01 BDE831           (        forth.asm):01600 (7)             jsr     NPOP            X has the index (N1)
EB04 BDE33F           (        forth.asm):01601 (7)     @indlop jsr     PUTCR           CR
EB07 9F26             (        forth.asm):01602 (4)             stx     USCR            I SCR !
EB09 3430             (        forth.asm):01603 (4+4)           pshs    y,x
EB0B 1FC1             (        forth.asm):01604 (4)             tfr     0,x
EB0D BDE823           (        forth.asm):01605 (7)             jsr     NPUSH
EB10 8DCC             (        forth.asm):01606                 RFXT    bsr,LINE+7      XT for LINE
EB12 8E0040           (        forth.asm):01607 (3)             ldx     #64
EB15 BDE823           (        forth.asm):01608 (7)             jsr     NPUSH
EB18 BDF6CE           (        forth.asm):01609                 RFXT    jsr,TYPE+7      XT for TYPE
EB1B 3530             (        forth.asm):01610 (4+4)           puls    x,y             Restore loop parameters
EB1D 3001             (        forth.asm):01611 (4+1)           leax    1,x
EB1F 103712           (        forth.asm):01612 (4)             cmpr    x,y
EB22 26E0             (        forth.asm):01613 (3)             bne     @indlop
EB24 39               (        forth.asm):01614 (4)             rts
                      (        forth.asm):01615         
EB25 05               (        forth.asm):01616         TICKS   fcb     5               Non-standard
EB26 5449434B53       (        forth.asm):01617                 fcc     'TICKS'         ( -- tickslow tickshigh )
EB2B EAF1             (        forth.asm):01618                 fdb     INDEX
EB2D C7               (        forth.asm):01619                 RFCS
                      (        forth.asm):01620                 IFNE    RTCFEAT
                      (        forth.asm):01621                 pshs    cc
                      (        forth.asm):01622                 orcc    #FFLAG          Mask FIRQ while reading the double cell
                      (        forth.asm):01623                 ldx     TIKSLOW
                      (        forth.asm):01624                 ldy     TIKSHI
                      (        forth.asm):01625                 puls    cc              Restore the previous interrupt handling mode
                      (        forth.asm):01626                 jsr     NPUSH
                      (        forth.asm):01627                 tfr     y,x
                      (        forth.asm):01628                 ELSE
EB2E 1FC1             (        forth.asm):01629 (4)             tfr     0,x
EB30 BDE823           (        forth.asm):01630 (7)             jsr     NPUSH
                      (        forth.asm):01631                 ENDC                    RTCFEAT
EB33 7EE823           (        forth.asm):01632 (3)             jmp     NPUSH
                      (        forth.asm):01633         
EB36 04               (        forth.asm):01634         RTCFTCH fcb     4               Non-standard
EB37 52544340         (        forth.asm):01635                 fcc     'RTC@'          ( regoff -- byteval )
EB3B EB25             (        forth.asm):01636                 fdb     TICKS
EB3D C7               (        forth.asm):01637                 RFCS
                      (        forth.asm):01638                 IFNE    RTCFEAT
                      (        forth.asm):01639                 tst     RTCAVL
                      (        forth.asm):01640                 beq     RTNOCON
                      (        forth.asm):01641         * An MC146818 RTC is present. Let's get down to business.
                      (        forth.asm):01642                 jsr     NPOP            REGOFF to X
                      (        forth.asm):01643                 tfr     x,d
                      (        forth.asm):01644                 tfr     b,a
                      (        forth.asm):01645                 jsr     RTREGRD
                      (        forth.asm):01646                 clra                    BYTEVAL to D
                      (        forth.asm):01647                 pshu    d               Unchecked NPUSH of D
                      (        forth.asm):01648                 rts
EB3E                  (        forth.asm):01649         RTNOCON ldb     #17             RTC not detected on bootup -> I/O error
                      (        forth.asm):01650                 jsr     ERRHDLR         No return
                      (        forth.asm):01651                 ELSE
EB3E BDFBC2           (        forth.asm):01652                 RFXT    jsr,DROP+7      XT for DROP
EB41 7EF8CE           (        forth.asm):01653                 RFXT    jmp,ZEROL+4     XT for 0
                      (        forth.asm):01654                 ENDC                    RTCFEAT
                      (        forth.asm):01655         
EB44 04               (        forth.asm):01656         RTCSTOR fcb     4               Non-standard
EB45 52544321         (        forth.asm):01657                 fcc     'RTC!'          ( byteval regoff -- )
EB49 EB36             (        forth.asm):01658                 fdb     RTCFTCH
EB4B C7               (        forth.asm):01659                 RFCS
                      (        forth.asm):01660                 IFNE    RTCFEAT
                      (        forth.asm):01661                 tst     RTCAVL
                      (        forth.asm):01662                 beq     RTNOCON
                      (        forth.asm):01663                 jsr     MIN2PST         At least two cells need to be stacked up
                      (        forth.asm):01664                 lda     1,u             REGOFF to A
                      (        forth.asm):01665                 ldb     3,u             BYTEVAL to B
                      (        forth.asm):01666                 leau    4,u             Drop two cells from the data stack
                      (        forth.asm):01667                 jmp     RTREGWR
                      (        forth.asm):01668                 ELSE
EB4C 7EF4AE           (        forth.asm):01669                 RFXT    jmp,TWODROP+8   XT for 2 DROP
                      (        forth.asm):01670                 ENDC                    RTCFEAT
                      (        forth.asm):01671         
EB4F 04               (        forth.asm):01672         LIST    fcb     4               79-STANDARD (REQ109)
EB50 4C495354         (        forth.asm):01673                 fcc     'LIST'          ( ublkno -- )
EB54 EB44             (        forth.asm):01674                 fdb     RTCSTOR
EB56 C7               (        forth.asm):01675                 RFCS
EB57 0D3E             (        forth.asm):01676 (4)             tst     CFCARDP
EB59 2605             (        forth.asm):01677 (3)             bne     @lstpro
EB5B C611             (        forth.asm):01678 (2)             ldb     #17             IO error
EB5D BDE7A2           (        forth.asm):01679 (7)             jsr     ERRHDLR         No return
EB60 BDFBB2           (        forth.asm):01680         @lstpro RFXT    jsr,DUP+6       XT for DUP
EB63 BDEA89           (        forth.asm):01681                 RFXT    jsr,BLOCK+8     XT for BLOCK
                      (        forth.asm):01682         * TOS now has the base buffer address.
EB66 BDE831           (        forth.asm):01683 (7)             jsr     NPOP
EB69 1F12             (        forth.asm):01684 (4)             tfr     x,y             Base buffer address to Y
EB6B BDE831           (        forth.asm):01685 (7)             jsr     NPOP            ublkno to X
EB6E 9F26             (        forth.asm):01686 (4)             stx     USCR            Update SCR's value
EB70 C610             (        forth.asm):01687 (2)             ldb     #16             16 lines to go
EB72 3404             (        forth.asm):01688 (4+1)   @lstlop pshs    b
EB74 BDE33F           (        forth.asm):01689 (7)             jsr     PUTCR
EB77 1F21             (        forth.asm):01690 (4)             tfr     y,x
EB79 BDE823           (        forth.asm):01691 (7)             jsr     NPUSH           Start address for TYPE
EB7C 8E0040           (        forth.asm):01692 (3)             ldx     #64
EB7F BDE823           (        forth.asm):01693 (7)             jsr     NPUSH           Byte count for TYPE
EB82 103012           (        forth.asm):01694 (4)             addr    x,y
EB85 BDF6CE           (        forth.asm):01695                 RFXT    jsr,TYPE+7      XT for TYPE
EB88 3504             (        forth.asm):01696 (4+1)           puls    b
EB8A 5A               (        forth.asm):01697 (1)             decb
EB8B 26E5             (        forth.asm):01698 (3)             bne     @lstlop
EB8D 39               (        forth.asm):01699 (4)             rts
                      (        forth.asm):01700         
                      (        forth.asm):01701         * Convert a single cell to a double. Non-transactional.
EB8E 03               (        forth.asm):01702         STOD    fcb     3               ANSI Core ( n -- d )
EB8F 533E44           (        forth.asm):01703                 fcc     'S>D'
EB92 EB4F             (        forth.asm):01704                 fdb     LIST
EB94 C7               (        forth.asm):01705                 RFCS
EB95 BDE831           (        forth.asm):01706 (7)             jsr     NPOP            N to X
EB98 3610             (        forth.asm):01707                 UCNPUSH                 Push back low order cell
EB9A 104F             (        forth.asm):01708 (2)             clrd                    High order cell: default to N >= 0
EB9C 1E01             (        forth.asm):01709 (5)             exg     d,x
EB9E 4D               (        forth.asm):01710 (1)             tsta
EB9F 102AFC80         (        forth.asm):01711 (5)             lbpl    NPUSH
EBA3 301F             (        forth.asm):01712 (4+1)           leax    -1,x            N is < 0. Sign extension is required. -1 to X
EBA5 7EE823           (        forth.asm):01713 (3)             jmp     NPUSH
                      (        forth.asm):01714         
EBA8 04               (        forth.asm):01715         NCLR    fcb     4               Non-standard
EBA9 4E434C52         (        forth.asm):01716                 fcc     'NCLR'          Clear the data (normal) stack
EBAD EB8E             (        forth.asm):01717                 fdb     STOD
EBAF C7               (        forth.asm):01718                 RFCS
EBB0 CE0296           (        forth.asm):01719 (3)             ldu     #NSTBOT
EBB3 39               (        forth.asm):01720 (4)             rts
                      (        forth.asm):01721         
EBB4 04               (        forth.asm):01722         RCLR    fcb     4               Non-standard
EBB5 52434C52         (        forth.asm):01723                 fcc     'RCLR'          Clear the return stack
EBB9 EBA8             (        forth.asm):01724                 fdb     NCLR
EBBB C7               (        forth.asm):01725                 RFCS
EBBC 8E0316           (        forth.asm):01726 (3)             ldx     #RSTBOT
EBBF 9F00             (        forth.asm):01727 (4)             stx     RSP
EBC1 0F30             (        forth.asm):01728 (5)             clr     RDEPTH
EBC3 39               (        forth.asm):01729 (4)             rts
                      (        forth.asm):01730         
EBC4 05               (        forth.asm):01731         DEPTH   fcb     5               79-STANDARD (REQ238)
EBC5 4445505448       (        forth.asm):01732                 fcc     'DEPTH'
EBCA EBB4             (        forth.asm):01733                 fdb     RCLR
EBCC C7               (        forth.asm):01734                 RFCS
EBCD CC0296           (        forth.asm):01735 (3)             ldd     #NSTBOT         Bottom data stack address
EBD0 103230           (        forth.asm):01736 (4)             subr    u,d             D has the current value of the data stack ptr
EBD3 1044             (        forth.asm):01737 (2)             lsrd                    divided by 2
EBD5 1F01             (        forth.asm):01738 (4)             tfr     d,x
EBD7 7EE823           (        forth.asm):01739 (3)             jmp     NPUSH
                      (        forth.asm):01740         
EBDA 06               (        forth.asm):01741         CREATE  fcb     6               79-STANDARD (REQ239)
EBDB 435245415445     (        forth.asm):01742                 fcc     'CREATE'
EBE1 EBC4             (        forth.asm):01743                 fdb     DEPTH
EBE3 C7               (        forth.asm):01744                 RFCS
EBE4 BDE559           (        forth.asm):01745 (7)     CREAT0  jsr     LOCWRT          Code entry point returned to Y
EBE7 868E             (        forth.asm):01746 (2)             lda     #LDXOPC         LDX immediate
EBE9 A7A0             (        forth.asm):01747 (4+1)           sta     ,y+
EBEB 1F21             (        forth.asm):01748 (4)             tfr     y,x
EBED 3008             (        forth.asm):01749 (4+1)           leax    8,x
EBEF AFA1             (        forth.asm):01750 (5+2)           stx     ,y++
EBF1 86BD             (        forth.asm):01751 (2)             lda     #JSROPC         JSR extended
EBF3 BDE5CE           (        forth.asm):01752 (7)             jsr     VARCON1         Compile JSR NPUSH
EBF6 8639             (        forth.asm):01753 (2)             lda     #RTSOPC         RTS inherent
EBF8 A7A0             (        forth.asm):01754 (4+1)           sta     ,y+
EBFA 3122             (        forth.asm):01755 (4+1)           leay    2,y             Reserve room for a possible DOES> clause
EBFC 109F08           (        forth.asm):01756 (5)     CREAT1  sty     DICEND
EBFF 9E0C             (        forth.asm):01757 (4)             ldx     BDICEND         This is set by LOCWRT (was IY)
EC01 9F06             (        forth.asm):01758 (4)             stx     LSTWAD
EC03 39               (        forth.asm):01759 (4)             rts
                      (        forth.asm):01760         
EC04 C5               (        forth.asm):01761         DOES    fcb     $C5             79-STANDARD (REQ168)
EC05 444F45533E       (        forth.asm):01762                 fcc     'DOES>'
EC0A EBDA             (        forth.asm):01763                 fdb     CREATE
EC0C C7               (        forth.asm):01764                 RFCS
EC0D 8EEC13           (        forth.asm):01765 (3)             ldx     #DOESEX         JSR #DOESEX is compiled (no actual return)
EC10 7EE158           (        forth.asm):01766 (3)             jmp     EMXASXT         Set as action component
                      (        forth.asm):01767         
EC13 9E06             (        forth.asm):01768 (4)     DOESEX  ldx     LSTWAD          Header of the last dictionary entry
EC15 E680             (        forth.asm):01769 (4+1)           ldb     ,x+
EC17 C41F             (        forth.asm):01770 (2)             andb    #WRLNMSK        Extract word length
EC19 3A               (        forth.asm):01771 (1)             abx
                      (        forth.asm):01772                 IFNE    RELFEAT
EC1A 3009             (        forth.asm):01773 (4+1)           leax    9,x             2 bytes/backlink, 1/cksum, 6 bytes code offset
                      (        forth.asm):01774                 ELSE
                      (        forth.asm):01775                 leax    8,x             2 bytes/backlink, 6 bytes code offset
                      (        forth.asm):01776                 ENDC                    RELFEAT
EC1C A684             (        forth.asm):01777 (4+0)           lda     ,x
EC1E 8139             (        forth.asm):01778 (2)             cmpa    #RTSOPC         RTS inherent
EC20 2705             (        forth.asm):01779 (3)             beq     @dosex1
EC22 C60E             (        forth.asm):01780 (2)             ldb     #14             No matching CREATE
EC24 BDE7A2           (        forth.asm):01781 (7)             jsr     ERRHDLR         No return
EC27 867E             (        forth.asm):01782 (2)     @dosex1 lda     #JMPOPC         JMP extended
EC29 A780             (        forth.asm):01783 (4+1)           sta     ,x+             Overwrite RTS opcode
EC2B 3520             (        forth.asm):01784 (4+2)           puls    y
EC2D 10AF84           (        forth.asm):01785 (6+0)           sty     ,x
EC30 39               (        forth.asm):01786 (4)             rts
                      (        forth.asm):01787         
EC31 87               (        forth.asm):01788         LITERAL fcb     $87             79-STANDARD (REQ215)
EC32 4C49544552414C   (        forth.asm):01789                 fcc     'LITERAL'
EC39 EC04             (        forth.asm):01790                 fdb     DOES
EC3B C7               (        forth.asm):01791                 RFCS
EC3C BDE831           (        forth.asm):01792 (7)             jsr     NPOP
EC3F 0D21             (        forth.asm):01793 (4)             tst     USTATE+1
EC41 2601             (        forth.asm):01794 (3)             bne     @comp
EC43 39               (        forth.asm):01795 (4)             rts                     The standard defines no semantics in interp mode
EC44 109E08           (        forth.asm):01796 (5)     @comp   ldy     DICEND
EC47 868E             (        forth.asm):01797 (2)             lda     #LDXOPC         LDX immediate
EC49 BDE5D1           (        forth.asm):01798 (7)             jsr     VARCON2         Compile LDX #X
EC4C 109F08           (        forth.asm):01799 (5)             sty     DICEND          Update HERE
EC4F 8EE823           (        forth.asm):01800 (3)             ldx     #NPUSH
EC52 7EE158           (        forth.asm):01801 (3)             jmp     EMXASXT         Set NPUSH as action component
                      (        forth.asm):01802         
                      (        forth.asm):01803         * Functionally: : CONSTANT CREATE , DOES> @ ;
                      (        forth.asm):01804         * The following code produces more compact code.
EC55 08               (        forth.asm):01805         CONS    fcb     8               79-STANDARD (REQ185)
EC56 434F4E5354414E54 (        forth.asm):01806                 fcc     'CONSTANT'
EC5E EC31             (        forth.asm):01807                 fdb     LITERAL
EC60 C7               (        forth.asm):01808                 RFCS
EC61 BDE831           (        forth.asm):01809 (7)             jsr     NPOP
EC64 1F16             (        forth.asm):01810 (4)             tfr     x,w
EC66 BDE559           (        forth.asm):01811 (7)             jsr     LOCWRT          Create dictionary entry
EC69 1F61             (        forth.asm):01812 (4)             tfr     w,x
EC6B 868E             (        forth.asm):01813 (2)             lda     #LDXOPC         ldx immediate
EC6D BDE5D1           (        forth.asm):01814 (7)             jsr     VARCON2         Compile LDX #CSTVAL
EC70 BDE5CC           (        forth.asm):01815 (7)             jsr     VARCON          Compile JMP NPUSH
                      (        forth.asm):01816                 IFNE    RELFEAT
EC73 8D87             (        forth.asm):01817 (6)             bsr     CREAT1
EC75 2059             (        forth.asm):01818                 RFXT    bra,MONITOR+10  XT for MONITOR
                      (        forth.asm):01819                 ELSE
                      (        forth.asm):01820                 bra     CREAT1
                      (        forth.asm):01821                 ENDC                    RELFEAT
                      (        forth.asm):01822         
                      (        forth.asm):01823         * Functionally: : VARIABLE CREATE 2 ALLOT ;
                      (        forth.asm):01824         * However we can save three bytes per instance with the following code.
EC77 08               (        forth.asm):01825         VARI    fcb     8               79-STANDARD (REQ227)
EC78 5641524941424C45 (        forth.asm):01826                 fcc     'VARIABLE'
EC80 EC55             (        forth.asm):01827                 fdb     CONS
EC82 C7               (        forth.asm):01828                 RFCS
EC83 BDE559           (        forth.asm):01829 (7)             jsr     LOCWRT
EC86 868E             (        forth.asm):01830 (2)             lda     #LDXOPC         ldx immediate
EC88 A7A0             (        forth.asm):01831 (4+1)           sta     ,y+
EC8A 1F26             (        forth.asm):01832 (4)             tfr     y,w             Preserve Y (HERE)
EC8C 3125             (        forth.asm):01833 (4+1)           leay    5,y             Relative variable address
EC8E 1F21             (        forth.asm):01834 (4)             tfr     y,x
EC90 1F62             (        forth.asm):01835 (4)             tfr     w,y             Restore Y (HERE)
EC92 AFA1             (        forth.asm):01836 (5+2)           stx     ,y++            Address field for LDX #VARADDR
EC94 BDE5CC           (        forth.asm):01837 (7)             jsr     VARCON          Compile JMP NPUSH
EC97 3122             (        forth.asm):01838 (4+1)           leay    2,y             2 ALLOT
EC99 7EEBFC           (        forth.asm):01839 (3)             jmp     CREAT1
                      (        forth.asm):01840         
EC9C 09               (        forth.asm):01841         IMMED   fcb     9               79-STANDARD (REQ103)
EC9D 494D4D4544494154 (        forth.asm):01842                 fcc     'IMMEDIATE'
     45
ECA6 EC77             (        forth.asm):01843                 fdb     VARI
ECA8 C7               (        forth.asm):01844                 RFCS
ECA9 C680             (        forth.asm):01845 (2)             ldb     #IMDFLM
ECAB 9E06             (        forth.asm):01846 (4)     IMMED1  ldx     LSTWAD
ECAD A684             (        forth.asm):01847 (4+0)           lda     ,x
ECAF 103598           (        forth.asm):01848 (4)             orr     b,a
ECB2 A784             (        forth.asm):01849 (4+0)           sta     ,x
ECB4 39               (        forth.asm):01850 (4)             rts
                      (        forth.asm):01851         
ECB5 08               (        forth.asm):01852         RSTRCT  fcb     8               Non-standard (GNU Forth)
ECB6 5245535452494354 (        forth.asm):01853                 fcc     'RESTRICT'      Make word available in compilation mode only
ECBE EC9C             (        forth.asm):01854                 fdb     IMMED
ECC0 C7               (        forth.asm):01855                 RFCS
ECC1 C640             (        forth.asm):01856 (2)             ldb     #DEFFLM
ECC3 20E6             (        forth.asm):01857 (3)             bra     IMMED1
                      (        forth.asm):01858         
                      (        forth.asm):01859         * This non-standard word enables checkum monitoring by ICHECK for the
                      (        forth.asm):01860         * last defined word in the dictionary. : words are monitored by default
                      (        forth.asm):01861         * and so are constants. CREATEd words require an explicit invokation of
                      (        forth.asm):01862         * MONITOR if they are to be checked for integrity.
ECC5 07               (        forth.asm):01863         MONITOR fcb     7
ECC6 4D4F4E49544F52   (        forth.asm):01864                 fcc     'MONITOR'       ( -- )
ECCD ECB5             (        forth.asm):01865                 fdb     RSTRCT
ECCF C7               (        forth.asm):01866                 RFCS
                      (        forth.asm):01867                 IFNE    RELFEAT
ECD0 9E06             (        forth.asm):01868 (4)             ldx     LSTWAD          Last word header address
ECD2 A684             (        forth.asm):01869 (4+0)           lda     ,x
ECD4 8A20             (        forth.asm):01870 (2)             ora     #MONFLM         Set the monitored flag in the attribute field
ECD6 A784             (        forth.asm):01871 (4+0)           sta     ,x
ECD8 8D08             (        forth.asm):01872 (6)             bsr     HDRSKIP         Skip the header (XT to X), clear A
ECDA 109E08           (        forth.asm):01873 (5)             ldy     DICEND          The upper code section limit (excluded)
ECDD 8D0D             (        forth.asm):01874 (6)             bsr     HDRCSUM         Current word's definition's checksum to A
ECDF A71F             (        forth.asm):01875 (4+1)           sta     -1,x            Store the computed checksum into the header
                      (        forth.asm):01876                 ENDC                    RELFEAT
ECE1 39               (        forth.asm):01877 (4)             rts
                      (        forth.asm):01878         
                      (        forth.asm):01879                 IFNE    RELFEAT
                      (        forth.asm):01880         * On entry, X has a word's header address. On return X has the compilation
                      (        forth.asm):01881         * address for that word (XT). A is cleared so as to initialize the checksum.
ECE2 A684             (        forth.asm):01882 (4+0)   HDRSKIP lda     ,x              Word's header attribute byte to A
ECE4 841F             (        forth.asm):01883 (2)             anda    #WRLNMSK        Extract the word's length
ECE6 8B04             (        forth.asm):01884 (2)             adda    #4              1B attribute, 2B backlink, 1B checksum
ECE8 3086             (        forth.asm):01885 (4+1)           leax    a,x             X has the word's XT. -1,X has the orig checksum
ECEA 4F               (        forth.asm):01886 (1)             clra
ECEB 39               (        forth.asm):01887 (4)             rts
                      (        forth.asm):01888         
                      (        forth.asm):01889         * On entry X has a word's compilation address (XT). A is supposed to have been
                      (        forth.asm):01890         * previously cleared. Y has the upper bound of the code section's address
                      (        forth.asm):01891         * (excluded). On return, A will have the word's code section's checksum.
                      (        forth.asm):01892         * X is preserved.
ECEC 3410             (        forth.asm):01893 (4+2)   HDRCSUM pshs    x
ECEE A880             (        forth.asm):01894 (4+1)   @hdrcs1 eora    ,x+             Update the checksum
ECF0 103712           (        forth.asm):01895 (4)             cmpr    x,y             Upper bound reached?
ECF3 26F9             (        forth.asm):01896 (3)             bne     @hdrcs1         No. Process next byte in word's code section
ECF5 3510             (        forth.asm):01897 (4+2)           puls    x
ECF7 39               (        forth.asm):01898 (4)             rts
                      (        forth.asm):01899         
ECF8 696E746567726974 (        forth.asm):01900         CSUMFLM fcn     'integrity check failed'
     7920636865636B20
     6661696C656400
                      (        forth.asm):01901                 ENDC                    RELFEAT
                      (        forth.asm):01902         
                      (        forth.asm):01903         * This non-standard word walks through the dictionary linked list and checks
                      (        forth.asm):01904         * that the words that have the MONFLM flag set in their header's attribute
                      (        forth.asm):01905         * field have a definition that still matches the checksum stored in the word's
                      (        forth.asm):01906         * header. This is meant to be used interactively, as a debugging tool, since
                      (        forth.asm):01907         * multitasking is not supported by this implementation. Therefore no status
                      (        forth.asm):01908         * value is returned. Feedback will only be provided for corrupted words, in
                      (        forth.asm):01909         * the form of a diagnostic message printed to the console.
ED0F 06               (        forth.asm):01910         ICHECK  fcb     6
ED10 49434845434B     (        forth.asm):01911                 fcc     'ICHECK'        ( -- )
ED16 ECC5             (        forth.asm):01912                 fdb     MONITOR
ED18 C7               (        forth.asm):01913                 RFCS
                      (        forth.asm):01914                 IFNE    RELFEAT
ED19 109E08           (        forth.asm):01915 (5)             ldy     DICEND          Upper bound for the code of the last word (exc.)
ED1C 9E06             (        forth.asm):01916 (4)             ldx     LSTWAD          LAST points to the header of the last word
ED1E 3410             (        forth.asm):01917 (4+2)   @icklop pshs    x               Current word's header address
ED20 A684             (        forth.asm):01918 (4+0)           lda     ,x              Word's header attribute byte to A
ED22 8520             (        forth.asm):01919 (2)             bita    #MONFLM         Is this a monitored word?
ED24 2726             (        forth.asm):01920 (3)             beq     @icknxt         No. Point to the next word
ED26 8DBA             (        forth.asm):01921 (6)             bsr     HDRSKIP         Skip the header (XT to X), clear A
ED28 8DC2             (        forth.asm):01922 (6)             bsr     HDRCSUM         Current word's definition's checksum to A
ED2A A11F             (        forth.asm):01923 (4+1)           cmpa    -1,x            Does the checksum match the compile time value?
ED2C 271E             (        forth.asm):01924 (3)             beq     @icknxt         Yes. Point to the next word
                      (        forth.asm):01925         * Current word's definition has been modified since its original definition!
ED2E BDE33F           (        forth.asm):01926 (7)             jsr     PUTCR
ED31 AEE4             (        forth.asm):01927 (5+0)           ldx     ,s              Current word's header address
ED33 E680             (        forth.asm):01928 (4+1)           ldb     ,x+
ED35 C41F             (        forth.asm):01929 (2)             andb    #WRLNMSK
ED37 4F               (        forth.asm):01930 (1)             clra
ED38 BDE823           (        forth.asm):01931 (7)             jsr     NPUSH           Word's name base address
ED3B 1F01             (        forth.asm):01932 (4)             tfr     d,x
ED3D BDE823           (        forth.asm):01933 (7)             jsr     NPUSH           Byte count for TYPE
ED40 BDF6CE           (        forth.asm):01934                 RFXT    jsr,TYPE+7      XT for TYPE
ED43 BDF680           (        forth.asm):01935                 RFXT    jsr,SPACE+8     XT for SPACE
ED46 8EECF8           (        forth.asm):01936 (3)             ldx     #CSUMFLM
ED49 BDE332           (        forth.asm):01937 (7)             jsr     PUTS            Feedback for checksum failure
ED4C 3510             (        forth.asm):01938 (4+2)   @icknxt puls    x               Current word's header address
ED4E 1F12             (        forth.asm):01939 (4)             tfr     x,y             Point to the end of the previous word's code
ED50 8D90             (        forth.asm):01940 (6)             bsr     HDRSKIP         Skip the header (XT to X), clear A
ED52 AE1D             (        forth.asm):01941 (5+1)           ldx     -3,x            Point to the previous header via the backlink
ED54 2702             (        forth.asm):01942 (3)             beq     @ickdon         We've just reached the end of the dictionary
ED56 20C6             (        forth.asm):01943 (3)             bra     @icklop
                      (        forth.asm):01944                 ENDC                    RELFEAT
ED58 39               (        forth.asm):01945 (4)     @ickdon rts
                      (        forth.asm):01946         
ED59 C2               (        forth.asm):01947         DO      fcb     $C2             79-STANDARD (REQ142)
ED5A 444F             (        forth.asm):01948                 fcc     'DO'
ED5C ED0F             (        forth.asm):01949                 fdb     ICHECK
ED5E C7               (        forth.asm):01950                 RFCS
ED5F 9E08             (        forth.asm):01951 (4)             ldx     DICEND
ED61 3003             (        forth.asm):01952 (4+1)           leax    3,x
ED63 BDE840           (        forth.asm):01953 (7)             jsr     RPUSH
ED66 8EED6C           (        forth.asm):01954 (3)             ldx     #DOEX
ED69 7EE158           (        forth.asm):01955 (3)             jmp     EMXASXT         Set as action component
                      (        forth.asm):01956         
ED6C BDFBCD           (        forth.asm):01957         DOEX    RFXT    jsr,SWAP+7      XT for SWAP
ED6F BDF0D9           (        forth.asm):01958                 RFXT    jsr,TOR+5       XT for >R
ED72 7EF0D9           (        forth.asm):01959                 RFXT    jmp,TOR+5       XT for >R
                      (        forth.asm):01960         
ED75 C4               (        forth.asm):01961         LOOP    fcb     $C4             79-STANDARD (REQ124)
ED76 4C4F4F50         (        forth.asm):01962                 fcc     'LOOP'
ED7A ED59             (        forth.asm):01963                 fdb     DO
ED7C C7               (        forth.asm):01964                 RFCS
ED7D 8EED9C           (        forth.asm):01965 (3)             ldx     #LOOPEX
ED80 109E08           (        forth.asm):01966 (5)     LOOP1   ldy     DICEND
ED83 86BD             (        forth.asm):01967 (2)             lda     #JSROPC         JSR extended
ED85 BDE144           (        forth.asm):01968 (7)             jsr     CHKRTS          Check if the final RTS can be omitted
ED88 BDE5D1           (        forth.asm):01969 (7)             jsr     VARCON2
ED8B 8E2503           (        forth.asm):01970 (3)             ldx     #BCSOPC         Compile "BCS *+5"
ED8E AFA1             (        forth.asm):01971 (5+2)           stx     ,y++
ED90 BDE85E           (        forth.asm):01972 (7)             jsr     RPOP
ED93 867E             (        forth.asm):01973 (2)             lda     #JMPOPC
ED95 BDE5D1           (        forth.asm):01974 (7)             jsr     VARCON2         Compile "JMP R@"
ED98 109F08           (        forth.asm):01975 (5)             sty     DICEND          No action component
ED9B 39               (        forth.asm):01976 (4)             rts
                      (        forth.asm):01977         
ED9C 8E0001           (        forth.asm):01978 (3)     LOOPEX  ldx     #1
ED9F 2011             (        forth.asm):01979 (3)             bra     PLOPEX1
                      (        forth.asm):01980         
EDA1 C5               (        forth.asm):01981         PLOOP   fcb     $C5             79-STANDARD (REQ141)
EDA2 2B4C4F4F50       (        forth.asm):01982                 fcc     '+LOOP'         The sign hdl reqs for REQ124 should apply though
EDA7 ED75             (        forth.asm):01983                 fdb     LOOP
EDA9 C7               (        forth.asm):01984                 RFCS
EDAA 8EEDAF           (        forth.asm):01985 (3)             ldx     #PLOOPEX
EDAD 20D1             (        forth.asm):01986 (3)             bra     LOOP1
                      (        forth.asm):01987         
EDAF BDE831           (        forth.asm):01988 (7)     PLOOPEX jsr     NPOP
EDB2 1F16             (        forth.asm):01989 (4)     PLOPEX1 tfr     x,w             Increment to W
EDB4 BDE85E           (        forth.asm):01990 (7)             jsr     RPOP
EDB7 1F12             (        forth.asm):01991 (4)             tfr     x,y             Index to Y
EDB9 BDE85E           (        forth.asm):01992 (7)             jsr     RPOP            Limit to X
EDBC 103062           (        forth.asm):01993 (4)             addr    w,y             Update index
EDBF 114D             (        forth.asm):01994 (2)             tste
EDC1 2B10             (        forth.asm):01995 (3)             bmi     @neginc
EDC3 103721           (        forth.asm):01996 (4)             cmpr    y,x
EDC6 2F12             (        forth.asm):01997 (3)             ble     @done           We're done. Return With CFLAG set
EDC8 BDE840           (        forth.asm):01998 (7)     @iter   jsr     RPUSH           Push back the limit
EDCB 1F21             (        forth.asm):01999 (4)             tfr     y,x
EDCD BDE840           (        forth.asm):02000 (7)             jsr     RPUSH           Push back the index
EDD0 1CFE             (        forth.asm):02001 (2)             andcc   #^CFLAG         Clear CFLAG
EDD2 39               (        forth.asm):02002 (4)             rts
EDD3 103721           (        forth.asm):02003 (4)     @neginc cmpr    y,x
EDD6 27F0             (        forth.asm):02004 (3)             beq     @iter           79-STANDARD irregular historical precedent
EDD8 2BEE             (        forth.asm):02005 (3)             bmi     @iter
EDDA 1A01             (        forth.asm):02006 (2)     @done   orcc    #CFLAG          Set CFLAG
EDDC 39               (        forth.asm):02007 (4)             rts
                      (        forth.asm):02008         
EDDD 46               (        forth.asm):02009         UNLOOP  fcb     $46             ANSI (Core)
EDDE 554E4C4F4F50     (        forth.asm):02010                 fcc     'UNLOOP'
EDE4 EDA1             (        forth.asm):02011                 fdb     PLOOP
EDE6 C7               (        forth.asm):02012                 RFCS
EDE7 BDE85E           (        forth.asm):02013 (7)             jsr     RPOP            Drop the index from the return stack
EDEA 7EE85E           (        forth.asm):02014 (3)             jmp     RPOP            and the loop limit as well
                      (        forth.asm):02015         
EDED C2               (        forth.asm):02016         IF      fcb     $C2             79-STANDARD (REQ210)
EDEE 4946             (        forth.asm):02017                 fcc     'IF'
EDF0 EDDD             (        forth.asm):02018                 fdb     UNLOOP
EDF2 C7               (        forth.asm):02019                 RFCS
EDF3 109E08           (        forth.asm):02020 (5)             ldy     DICEND
EDF6 8EEE15           (        forth.asm):02021 (3)             ldx     #IFEX
EDF9 86BD             (        forth.asm):02022 (2)             lda     #JSROPC         JSR extended
EDFB BDE144           (        forth.asm):02023 (7)             jsr     CHKRTS          Check if the final RTS can be omitted
EDFE BDE5D1           (        forth.asm):02024 (7)             jsr     VARCON2
EE01 8E2603           (        forth.asm):02025 (3)             ldx     #BNEOPC         Compile "BNE *+5"
EE04 AFA1             (        forth.asm):02026 (5+2)           stx     ,y++
EE06 867E             (        forth.asm):02027 (2)             lda     #JMPOPC         JMP extended
EE08 A7A0             (        forth.asm):02028 (4+1)           sta     ,y+
EE0A 1F21             (        forth.asm):02029 (4)             tfr     y,x
EE0C BDE840           (        forth.asm):02030 (7)             jsr     RPUSH
EE0F 3122             (        forth.asm):02031 (4+1)           leay    2,y             Reserve 2 bytes for the jump address
EE11 109F08           (        forth.asm):02032 (5)             sty     DICEND
EE14 39               (        forth.asm):02033 (4)             rts
                      (        forth.asm):02034         
EE15 BDE831           (        forth.asm):02035 (7)     IFEX    jsr     NPOP
EE18 1037C1           (        forth.asm):02036 (4)             cmpr    0,x
EE1B 39               (        forth.asm):02037 (4)             rts
                      (        forth.asm):02038         
                      (        forth.asm):02039         * Functionally equivalent to:
                      (        forth.asm):02040         * : UNLESS POSTPONE 0= POSTPONE IF ; IMMEDIATE RESTRICT
EE1C C6               (        forth.asm):02041         UNLESS  fcb     $C6             Non-standard (Perl inspired)
EE1D 554E4C455353     (        forth.asm):02042                 fcc     'UNLESS'
EE23 EDED             (        forth.asm):02043                 fdb     IF
EE25 C7               (        forth.asm):02044                 RFCS
EE26 8EEF47           (        forth.asm):02045                 RFXT    ldx,#NULP+5     XT for 0=
EE29 BDF1FD           (        forth.asm):02046 (7)             jsr     CMPCOM1
EE2C 20C5             (        forth.asm):02047                 RFXT    bra,IF+5        XT for IF
                      (        forth.asm):02048         
EE2E C4               (        forth.asm):02049         ELSE    fcb     $C4             79-STANDARD (REQ167)
EE2F 454C5345         (        forth.asm):02050                 fcc     'ELSE'
EE33 EE1C             (        forth.asm):02051                 fdb     UNLESS
EE35 C7               (        forth.asm):02052                 RFCS
EE36 109E08           (        forth.asm):02053 (5)             ldy     DICEND
EE39 867E             (        forth.asm):02054 (2)             lda     #JMPOPC         JMP extended
EE3B A7A0             (        forth.asm):02055 (4+1)           sta     ,y+
EE3D 3122             (        forth.asm):02056 (4+1)           leay    2,y
EE3F 109F08           (        forth.asm):02057 (5)             sty     DICEND
EE42 BDE85E           (        forth.asm):02058 (7)             jsr     RPOP
EE45 10AF84           (        forth.asm):02059 (6+0)           sty     ,x              Set actual ELSE jump address
EE48 1F21             (        forth.asm):02060 (4)             tfr     y,x
EE4A 301E             (        forth.asm):02061 (4+1)           leax    -2,x
EE4C 7EE840           (        forth.asm):02062 (3)             jmp     RPUSH
                      (        forth.asm):02063         
EE4F C4               (        forth.asm):02064         THEN    fcb     $C4             79-STANDARD (REQ161)
EE50 5448454E         (        forth.asm):02065                 fcc     'THEN'
EE54 EE2E             (        forth.asm):02066                 fdb     ELSE
EE56 C7               (        forth.asm):02067                 RFCS
EE57 109E08           (        forth.asm):02068 (5)             ldy     DICEND
EE5A BDE85E           (        forth.asm):02069 (7)             jsr     RPOP
EE5D 10AF84           (        forth.asm):02070 (6+0)           sty     ,x
EE60 39               (        forth.asm):02071 (4)             rts
                      (        forth.asm):02072         
EE61 01               (        forth.asm):02073         EQ      fcb     1               79-STANDARD (REQ173)
EE62 3D               (        forth.asm):02074                 fcc     '='             ( N1 N2 -- FLAG )
EE63 EE4F             (        forth.asm):02075                 fdb     THEN
EE65 C7               (        forth.asm):02076                 RFCS
EE66 BDE4DC           (        forth.asm):02077 (7)             jsr     MIN2PST         At least two cells need to be stacked up
EE69 10ECC4           (        forth.asm):02078 (8+0)           ldq     ,u              D:W has N2:N1
EE6C 3342             (        forth.asm):02079 (4+1)           leau    2,u             Drop one cell from the user stack
EE6E 1FC1             (        forth.asm):02080 (4)             tfr     0,x
EE70 103760           (        forth.asm):02081 (4)             cmpr    w,d
EE73 2602             (        forth.asm):02082 (3)             bne     @eq1
EE75 3001             (        forth.asm):02083 (4+1)           leax    1,x
EE77 AFC4             (        forth.asm):02084 (5+0)   @eq1    stx     ,u              Store in place to FLAG
EE79 39               (        forth.asm):02085 (4)             rts
                      (        forth.asm):02086         
EE7A 02               (        forth.asm):02087         DIFF    fcb     2               79-STANDARD (REF)
EE7B 3C3E             (        forth.asm):02088                 fcc     '<>'            ( N1 N2 -- FLAG )
EE7D EE61             (        forth.asm):02089                 fdb     EQ
EE7F C7               (        forth.asm):02090                 RFCS
EE80 BDE4DC           (        forth.asm):02091 (7)             jsr     MIN2PST         At least two cells need to be stacked up
EE83 10ECC4           (        forth.asm):02092 (8+0)           ldq     ,u              D:W has N2:N1
EE86 3342             (        forth.asm):02093 (4+1)           leau    2,u             Drop one cell from the user stack
EE88 1FC1             (        forth.asm):02094 (4)             tfr     0,x
EE8A 103760           (        forth.asm):02095 (4)             cmpr    w,d
EE8D 2702             (        forth.asm):02096 (3)             beq     @diff1
EE8F 3001             (        forth.asm):02097 (4+1)           leax    1,x
EE91 AFC4             (        forth.asm):02098 (5+0)   @diff1  stx     ,u              Store in place to FLAG
EE93 39               (        forth.asm):02099 (4)             rts
                      (        forth.asm):02100         
EE94 02               (        forth.asm):02101         SINFEQ  fcb     2               Non-standard (Not even ANSI!)
EE95 3C3D             (        forth.asm):02102                 fcc     '<='            Required for the ORNL fixed sieve benchmark
EE97 EE7A             (        forth.asm):02103                 fdb     DIFF
EE99 C7               (        forth.asm):02104                 RFCS
EE9A BDE4DC           (        forth.asm):02105 (7)             jsr     MIN2PST         At least two cells need to be stacked up
EE9D 10AEC4           (        forth.asm):02106 (6+0)           ldy     ,u
EEA0 AE42             (        forth.asm):02107 (5+1)           ldx     2,u
EEA2 104F             (        forth.asm):02108 (2)             clrd
EEA4 103721           (        forth.asm):02109 (4)             cmpr    y,x
EEA7 2E02             (        forth.asm):02110 (3)             bgt     @sinfq1
EEA9 104C             (        forth.asm):02111 (2)             incd
EEAB 3342             (        forth.asm):02112 (4+1)   @sinfq1 leau    2,u             Drop one cell
EEAD EDC4             (        forth.asm):02113 (5+0)           std     ,u
EEAF 39               (        forth.asm):02114 (4)             rts
                      (        forth.asm):02115         
                      (        forth.asm):02116                 IFNE    DEBUG
EEB0                  (        forth.asm):02117         CC      fcb     2               Non-standard. Used for debugging
                      (        forth.asm):02118                 fcc     'CC'
                      (        forth.asm):02119                 fdb     SINFEQ
                      (        forth.asm):02120                 RFCS
                      (        forth.asm):02121                 ldx     CCREG
                      (        forth.asm):02122                 jmp     NPUSH
                      (        forth.asm):02123                 ENDC                    DEBUG
                      (        forth.asm):02124         
EEB0 03               (        forth.asm):02125         XOR     fcb     3               79-STANDARD (REQ179)
EEB1 584F52           (        forth.asm):02126                 fcc     'XOR'
                      (        forth.asm):02127                 IFNE    DEBUG
                      (        forth.asm):02128                 fdb     CC
                      (        forth.asm):02129                 ELSE
EEB4 EE94             (        forth.asm):02130                 fdb     SINFEQ
                      (        forth.asm):02131                 ENDC                    DEBUG
EEB6 C7               (        forth.asm):02132                 RFCS
EEB7 BDE4DC           (        forth.asm):02133 (7)             jsr     MIN2PST         At least two cells need to be stacked up
EEBA ECC4             (        forth.asm):02134 (5+0)           ldd     ,u
EEBC 10A642           (        forth.asm):02135 (6+1)           ldw     2,u
EEBF 103660           (        forth.asm):02136 (4)             eorr    w,d
EEC2 3342             (        forth.asm):02137 (4+1)   XOR1    leau    2,u
EEC4 EDC4             (        forth.asm):02138 (5+0)           std     ,u
EEC6 39               (        forth.asm):02139 (4)             rts
                      (        forth.asm):02140         
EEC7 02               (        forth.asm):02141         OR      fcb     2               79-STANDARD (REQ223)
EEC8 4F52             (        forth.asm):02142                 fcc     'OR'
EECA EEB0             (        forth.asm):02143                 fdb     XOR
EECC C7               (        forth.asm):02144                 RFCS
EECD BDE4DC           (        forth.asm):02145 (7)             jsr     MIN2PST         At least two cells need to be stacked up
EED0 ECC4             (        forth.asm):02146 (5+0)           ldd     ,u
EED2 10A642           (        forth.asm):02147 (6+1)           ldw     2,u
EED5 103560           (        forth.asm):02148 (4)             orr     w,d
EED8 20E8             (        forth.asm):02149 (3)             bra     XOR1
                      (        forth.asm):02150         
EEDA 03               (        forth.asm):02151         AND     fcb     3               79-STANDARD (REQ183)
EEDB 414E44           (        forth.asm):02152                 fcc     'AND'
EEDE EEC7             (        forth.asm):02153                 fdb     OR
EEE0 C7               (        forth.asm):02154                 RFCS
EEE1 BDE4DC           (        forth.asm):02155 (7)             jsr     MIN2PST         At least two cells need to be stacked up
EEE4 ECC4             (        forth.asm):02156 (5+0)           ldd     ,u
EEE6 10A642           (        forth.asm):02157 (6+1)           ldw     2,u
EEE9 103460           (        forth.asm):02158 (4)             andr    w,d
EEEC 20D4             (        forth.asm):02159 (3)             bra     XOR1
                      (        forth.asm):02160         
EEEE 03               (        forth.asm):02161         COM     fcb     3               79-STANDARD (REF)
EEEF 434F4D           (        forth.asm):02162                 fcc     'COM'
EEF2 EEDA             (        forth.asm):02163                 fdb     AND
EEF4 C7               (        forth.asm):02164                 RFCS
EEF5 BDE831           (        forth.asm):02165 (7)     COM0    jsr     NPOP
EEF8 1F10             (        forth.asm):02166 (4)             tfr     x,d
EEFA 1043             (        forth.asm):02167 (2)             comd
EEFC 1F01             (        forth.asm):02168 (4)             tfr     d,x
EEFE 3610             (        forth.asm):02169                 UCNPUSH
EF00 39               (        forth.asm):02170 (4)             rts
                      (        forth.asm):02171         
EF01 06               (        forth.asm):02172         INVERT  fcb     6               ANSI (Core)
EF02 494E56455254     (        forth.asm):02173                 fcc     'INVERT'
EF08 EEEE             (        forth.asm):02174                 fdb     COM
EF0A C7               (        forth.asm):02175                 RFCS
EF0B 20E8             (        forth.asm):02176 (3)             bra     COM0
                      (        forth.asm):02177         
EF0D 02               (        forth.asm):02178         ZGREAT  fcb     2               79-STANDARD (REQ118)
EF0E 303E             (        forth.asm):02179                 fcc     '0>'
EF10 EF01             (        forth.asm):02180                 fdb     INVERT
EF12 C7               (        forth.asm):02181                 RFCS
EF13 BDE831           (        forth.asm):02182 (7)             jsr     NPOP
EF16 1F10             (        forth.asm):02183 (4)             tfr     x,d
EF18 104D             (        forth.asm):02184 (2)             tstd
EF1A 2F06             (        forth.asm):02185 (3)             ble     @zgrt1
EF1C 8E0001           (        forth.asm):02186 (3)             ldx     #1
EF1F 3610             (        forth.asm):02187                 UCNPUSH
EF21 39               (        forth.asm):02188 (4)             rts
EF22 1FC1             (        forth.asm):02189 (4)     @zgrt1  tfr     0,x
EF24 3610             (        forth.asm):02190                 UCNPUSH
EF26 39               (        forth.asm):02191 (4)             rts
                      (        forth.asm):02192         
EF27 02               (        forth.asm):02193         ZLESS   fcb     2               79-STANDARD (REQ144)
EF28 303C             (        forth.asm):02194                 fcc     '0<'
EF2A EF0D             (        forth.asm):02195                 fdb     ZGREAT
EF2C C7               (        forth.asm):02196                 RFCS
EF2D BDE831           (        forth.asm):02197 (7)             jsr     NPOP
EF30 1F10             (        forth.asm):02198 (4)             tfr     x,d
EF32 104D             (        forth.asm):02199 (2)             tstd
EF34 2C06             (        forth.asm):02200 (3)             bge     @zlss1
EF36 8E0001           (        forth.asm):02201 (3)             ldx     #1
EF39 3610             (        forth.asm):02202                 UCNPUSH
EF3B 39               (        forth.asm):02203 (4)             rts
EF3C 1FC1             (        forth.asm):02204 (4)     @zlss1  tfr     0,x
EF3E 3610             (        forth.asm):02205                 UCNPUSH
EF40 39               (        forth.asm):02206 (4)             rts
                      (        forth.asm):02207         
EF41 02               (        forth.asm):02208         NULP    fcb     2               79-STANDARD (REQ180)
EF42 303D             (        forth.asm):02209                 fcc     '0='
EF44 EF27             (        forth.asm):02210                 fdb     ZLESS
EF46 C7               (        forth.asm):02211                 RFCS
EF47 BDE831           (        forth.asm):02212 (7)             jsr     NPOP
EF4A 1F10             (        forth.asm):02213 (4)             tfr     x,d
EF4C 1FC1             (        forth.asm):02214 (4)             tfr     0,x
EF4E 104D             (        forth.asm):02215 (2)             tstd
EF50 2703             (        forth.asm):02216 (3)             beq     @nulp2
EF52 3610             (        forth.asm):02217         @nulp1  UCNPUSH
EF54 39               (        forth.asm):02218 (4)             rts
EF55 3001             (        forth.asm):02219 (4+1)   @nulp2  leax    1,x
EF57 20F9             (        forth.asm):02220 (3)             bra     @nulp1
                      (        forth.asm):02221         
EF59 03               (        forth.asm):02222         NOT     fcb     3               79-STANDARD (REQ165)
EF5A 4E4F54           (        forth.asm):02223                 fcc     'NOT'
EF5D EF41             (        forth.asm):02224                 fdb     NULP
EF5F C7               (        forth.asm):02225                 RFCS
EF60 20E5             (        forth.asm):02226                 RFXT    bra,NULP+5      XT for 0=
                      (        forth.asm):02227         
EF62 02               (        forth.asm):02228         USUP    fcb     2               ANSI (Core Ext)
EF63 553E             (        forth.asm):02229                 fcc     'U>'
EF65 EF59             (        forth.asm):02230                 fdb     NOT
EF67 C7               (        forth.asm):02231                 RFCS
EF68 BDE5D6           (        forth.asm):02232 (7)             jsr     CMP2
EF6B 2302             (        forth.asm):02233 (3)             bls     @usup1
EF6D 3001             (        forth.asm):02234 (4+1)           leax    1,x
EF6F 3610             (        forth.asm):02235         @usup1  UCNPUSH
EF71 39               (        forth.asm):02236 (4)             rts
                      (        forth.asm):02237         
EF72 02               (        forth.asm):02238         UINF    fcb     2               79-STANDARD (REQ150)
EF73 553C             (        forth.asm):02239                 fcc     'U<'
EF75 EF62             (        forth.asm):02240                 fdb     USUP
EF77 C7               (        forth.asm):02241                 RFCS
EF78 BDE5D6           (        forth.asm):02242 (7)             jsr     CMP2
EF7B 2402             (        forth.asm):02243 (3)             bhs     @uinf1          Z is set
EF7D 3001             (        forth.asm):02244 (4+1)           leax    1,x
EF7F 3610             (        forth.asm):02245         @uinf1  UCNPUSH
EF81 39               (        forth.asm):02246 (4)             rts
                      (        forth.asm):02247         
                      (        forth.asm):02248         * Functionally: : WITHIN OVER - >R - R> U< ;
EF82 06               (        forth.asm):02249         WITHIN  fcb     6               ANSI (Core)
EF83 57495448494E     (        forth.asm):02250                 fcc     'WITHIN'        ( n1 n2 n3 -- flag )
EF89 EF72             (        forth.asm):02251                 fdb     UINF
EF8B C7               (        forth.asm):02252                 RFCS
EF8C BDFC13           (        forth.asm):02253                 RFXT    jsr,OVER+7      XT for OVER
EF8F BDF89C           (        forth.asm):02254                 RFXT    jsr,MINUS+4     XT for -
EF92 BDF0D9           (        forth.asm):02255                 RFXT    jsr,TOR+5       XT for >R
EF95 BDF89C           (        forth.asm):02256                 RFXT    jsr,MINUS+4     XT for -
EF98 BDF0CD           (        forth.asm):02257                 RFXT    jsr,RFROM+5     XT for R>
EF9B 20DB             (        forth.asm):02258                 RFXT    bra,UINF+5      XT for U<
                      (        forth.asm):02259         
EF9D 01               (        forth.asm):02260         SUP     fcb     1               79-STANDARD (REQ102)
EF9E 3E               (        forth.asm):02261                 fcc     '>'
EF9F EF82             (        forth.asm):02262                 fdb     WITHIN
EFA1 C7               (        forth.asm):02263                 RFCS
EFA2 BDE5D6           (        forth.asm):02264 (7)             jsr     CMP2
EFA5 2F02             (        forth.asm):02265 (3)             ble     @sup1
EFA7 3001             (        forth.asm):02266 (4+1)           leax    1,x
EFA9 3610             (        forth.asm):02267         @sup1   UCNPUSH
EFAB 39               (        forth.asm):02268 (4)             rts
                      (        forth.asm):02269         
EFAC 01               (        forth.asm):02270         INF     fcb     1               79-STANDARD (REQ139)
EFAD 3C               (        forth.asm):02271                 fcc     '<'
EFAE EF9D             (        forth.asm):02272                 fdb     SUP
EFB0 C7               (        forth.asm):02273                 RFCS
EFB1 BDE5D6           (        forth.asm):02274 (7)             jsr     CMP2
EFB4 2C02             (        forth.asm):02275 (3)             bge     @inf1
EFB6 3001             (        forth.asm):02276 (4+1)           leax    1,x
EFB8 3610             (        forth.asm):02277         @inf1   UCNPUSH
EFBA 39               (        forth.asm):02278 (4)             rts
                      (        forth.asm):02279         
EFBB 03               (        forth.asm):02280         MAX     fcb     3               79-STANDARD (REQ218)
EFBC 4D4158           (        forth.asm):02281                 fcc     'MAX'
EFBF EFAC             (        forth.asm):02282                 fdb     INF
EFC1 C7               (        forth.asm):02283                 RFCS
EFC2 BDE831           (        forth.asm):02284 (7)             jsr     NPOP
EFC5 1F12             (        forth.asm):02285 (4)             tfr     x,y
EFC7 BDE831           (        forth.asm):02286 (7)             jsr     NPOP
EFCA 103721           (        forth.asm):02287 (4)             cmpr    y,x
EFCD 2C02             (        forth.asm):02288 (3)             bge     @pshrv1
EFCF 1F21             (        forth.asm):02289 (4)             tfr     y,x
EFD1 3610             (        forth.asm):02290         @pshrv1 UCNPUSH
EFD3 39               (        forth.asm):02291 (4)             rts
                      (        forth.asm):02292         
EFD4 03               (        forth.asm):02293         MIN     fcb     3               79-STANDARD (REQ127)
EFD5 4D494E           (        forth.asm):02294                 fcc     'MIN'
EFD8 EFBB             (        forth.asm):02295                 fdb     MAX
EFDA C7               (        forth.asm):02296                 RFCS
EFDB BDE831           (        forth.asm):02297 (7)             jsr     NPOP
EFDE 1F12             (        forth.asm):02298 (4)             tfr     x,y
EFE0 BDE831           (        forth.asm):02299 (7)             jsr     NPOP
EFE3 103721           (        forth.asm):02300 (4)             cmpr    y,x
EFE6 2F02             (        forth.asm):02301 (3)             ble     @pshrv2
EFE8 1F21             (        forth.asm):02302 (4)             tfr     y,x
EFEA 3610             (        forth.asm):02303         @pshrv2 UCNPUSH
EFEC 39               (        forth.asm):02304 (4)             rts
                      (        forth.asm):02305         
EFED 03               (        forth.asm):02306         ABS     fcb     3               79-STANDARD (REQ108)
EFEE 414253           (        forth.asm):02307                 fcc     'ABS'
EFF1 EFD4             (        forth.asm):02308                 fdb     MIN
EFF3 C7               (        forth.asm):02309                 RFCS
EFF4 BDE831           (        forth.asm):02310 (7)             jsr     NPOP
EFF7 1F10             (        forth.asm):02311 (4)             tfr     x,d
EFF9 104D             (        forth.asm):02312 (2)             tstd
EFFB 2A04             (        forth.asm):02313 (3)             bpl     @abs1
EFFD 1040             (        forth.asm):02314 (2)             negd
EFFF 1F01             (        forth.asm):02315 (4)             tfr     d,x
F001 3610             (        forth.asm):02316         @abs1   UCNPUSH
F003 39               (        forth.asm):02317 (4)             rts
                      (        forth.asm):02318         
F004 06               (        forth.asm):02319         NEGATE  fcb     6               79-STANDARD (REQ177)
F005 4E4547415445     (        forth.asm):02320                 fcc     'NEGATE'
F00B EFED             (        forth.asm):02321                 fdb     ABS
F00D C7               (        forth.asm):02322                 RFCS
F00E BDE4D7           (        forth.asm):02323 (7)             jsr     MIN1PST         At least one cell needs to be stacked up
F011 ECC4             (        forth.asm):02324 (5+0)           ldd     ,u
F013 1040             (        forth.asm):02325 (2)             negd
F015 EDC4             (        forth.asm):02326 (5+0)           std     ,u
F017 39               (        forth.asm):02327 (4)             rts
                      (        forth.asm):02328         
F018 C5               (        forth.asm):02329         BEGIN   fcb     $C5             79-STANDARD (REQ147)
F019 424547494E       (        forth.asm):02330                 fcc     'BEGIN'
F01E F004             (        forth.asm):02331                 fdb     NEGATE
F020 C7               (        forth.asm):02332                 RFCS
F021 9E08             (        forth.asm):02333 (4)             ldx     DICEND
F023 7EE840           (        forth.asm):02334 (3)             jmp     RPUSH
                      (        forth.asm):02335         
F026 C5               (        forth.asm):02336         AGAIN   fcb     $C5             79-STANDARD (REF114)
F027 414741494E       (        forth.asm):02337                 fcc     'AGAIN'
F02C F018             (        forth.asm):02338                 fdb     BEGIN
F02E C7               (        forth.asm):02339                 RFCS
F02F BDE85E           (        forth.asm):02340 (7)             jsr     RPOP
F032 1F12             (        forth.asm):02341 (4)             tfr     x,y
F034 9E08             (        forth.asm):02342 (4)             ldx     DICEND
F036 867E             (        forth.asm):02343 (2)             lda     #JMPOPC         JMP extended
F038 A780             (        forth.asm):02344 (4+1)           sta     ,x+
F03A 10AF81           (        forth.asm):02345 (6+2)           sty     ,x++
F03D 9F08             (        forth.asm):02346 (4)             stx     DICEND
F03F 8602             (        forth.asm):02347 (2)             lda     #2
F041 9732             (        forth.asm):02348 (3)             sta     RTSREMV         Trigger the RTS removal optimization
F043 39               (        forth.asm):02349 (4)             rts
                      (        forth.asm):02350         
                      (        forth.asm):02351         # The standard does not require this as being immediate but I do.
F044 C4               (        forth.asm):02352         EXIT    fcb     $C4             79-STANDARD (REQ117)
F045 45584954         (        forth.asm):02353                 fcc     'EXIT'
F049 F026             (        forth.asm):02354                 fdb     AGAIN
F04B C7               (        forth.asm):02355                 RFCS
F04C 9E08             (        forth.asm):02356 (4)             ldx     DICEND
F04E 301D             (        forth.asm):02357 (4+1)           leax    -3,x
F050 109E14           (        forth.asm):02358 (5)             ldy     JSRLAST
F053 103721           (        forth.asm):02359 (4)             cmpr    y,x
F056 2605             (        forth.asm):02360 (3)             bne     @noopt          Tail JMP optimization is not possible
F058 867E             (        forth.asm):02361 (2)             lda     #JMPOPC         JMP extended
F05A A784             (        forth.asm):02362 (4+0)           sta     ,x
F05C 39               (        forth.asm):02363 (4)             rts
F05D 3003             (        forth.asm):02364 (4+1)   @noopt  leax    3,x             Point back to HERE
F05F 8639             (        forth.asm):02365 (2)             lda     #RTSOPC         RTS inherent
F061 A780             (        forth.asm):02366 (4+1)           sta     ,x+
F063 9F08             (        forth.asm):02367 (4)             stx     DICEND
F065 39               (        forth.asm):02368 (4)             rts
                      (        forth.asm):02369         
F066 C5               (        forth.asm):02370         UNTIL   fcb     $C5             79-STANDARD (REQ237)
F067 554E54494C       (        forth.asm):02371                 fcc     'UNTIL'
F06C F044             (        forth.asm):02372                 fdb     EXIT
F06E C7               (        forth.asm):02373                 RFCS
F06F 109E08           (        forth.asm):02374 (5)             ldy     DICEND
F072 86BD             (        forth.asm):02375 (2)             lda     #JSROPC         JSR extended
F074 8EEE15           (        forth.asm):02376 (3)             ldx     #IFEX
F077 BDE144           (        forth.asm):02377 (7)             jsr     CHKRTS          Check if the final RTS can be omitted
F07A BDE5D1           (        forth.asm):02378 (7)             jsr     VARCON2
F07D 8E2603           (        forth.asm):02379 (3)             ldx     #BNEOPC         Compile "BNE *+5"
F080 AFA1             (        forth.asm):02380 (5+2)           stx     ,y++
F082 867E             (        forth.asm):02381 (2)             lda     #JMPOPC         JMP extended
F084 A7A0             (        forth.asm):02382 (4+1)           sta     ,y+
F086 BDE85E           (        forth.asm):02383 (7)             jsr     RPOP
F089 AFA1             (        forth.asm):02384 (5+2)           stx     ,y++
F08B 109F08           (        forth.asm):02385 (5)             sty     DICEND
F08E 39               (        forth.asm):02386 (4)             rts
                      (        forth.asm):02387         
F08F C3               (        forth.asm):02388         END     fcb     $C3             79-STANDARD (REF224)
F090 454E44           (        forth.asm):02389                 fcc     'END'
F093 F066             (        forth.asm):02390                 fdb     UNTIL
F095 C7               (        forth.asm):02391                 RFCS
F096 20D7             (        forth.asm):02392                 RFXT    bra,UNTIL+8     XT for UNTIL
                      (        forth.asm):02393         
F098 C5               (        forth.asm):02394         WHILE   fcb     $C5             79-STANDARD (REQ149)
F099 5748494C45       (        forth.asm):02395                 fcc     'WHILE'
F09E F08F             (        forth.asm):02396                 fdb     END
F0A0 C7               (        forth.asm):02397                 RFCS
F0A1 7EEDF3           (        forth.asm):02398                 RFXT    jmp,IF+5        XT for IF
                      (        forth.asm):02399         
F0A4 C6               (        forth.asm):02400         REPEAT  fcb     $C6             79-STANDARD (REQ120)
F0A5 524550454154     (        forth.asm):02401                 fcc     'REPEAT'
F0AB F098             (        forth.asm):02402                 fdb     WHILE
F0AD C7               (        forth.asm):02403                 RFCS
F0AE BDE85E           (        forth.asm):02404 (7)             jsr     RPOP
F0B1 3410             (        forth.asm):02405 (4+2)           pshs    x
F0B3 BDE85E           (        forth.asm):02406 (7)             jsr     RPOP
F0B6 109E08           (        forth.asm):02407 (5)             ldy     DICEND
F0B9 867E             (        forth.asm):02408 (2)             lda     #JMPOPC         JMP extended
F0BB BDE5D1           (        forth.asm):02409 (7)             jsr     VARCON2
F0BE 3510             (        forth.asm):02410 (4+2)           puls    x
F0C0 10AF84           (        forth.asm):02411 (6+0)           sty     ,x
F0C3 109F08           (        forth.asm):02412 (5)             sty     DICEND
F0C6 39               (        forth.asm):02413 (4)             rts
                      (        forth.asm):02414         
F0C7 42               (        forth.asm):02415         RFROM   fcb     $42             79-STANDARD (REQ110)
F0C8 523E             (        forth.asm):02416                 fcc     'R>'
F0CA F0A4             (        forth.asm):02417                 fdb     REPEAT
F0CC C7               (        forth.asm):02418                 RFCS
F0CD BDE85E           (        forth.asm):02419 (7)             jsr     RPOP
F0D0 7EE823           (        forth.asm):02420 (3)             jmp     NPUSH
                      (        forth.asm):02421         
F0D3 42               (        forth.asm):02422         TOR     fcb     $42             79-STANDARD (REQ200)
F0D4 3E52             (        forth.asm):02423                 fcc     '>R'
F0D6 F0C7             (        forth.asm):02424                 fdb     RFROM
F0D8 C7               (        forth.asm):02425                 RFCS
F0D9 BDE831           (        forth.asm):02426 (7)             jsr     NPOP
F0DC 7EE840           (        forth.asm):02427 (3)             jmp     RPUSH
                      (        forth.asm):02428         
F0DF 45               (        forth.asm):02429         LEAVE   fcb     $45             79-STANDARD (REQ213)
F0E0 4C45415645       (        forth.asm):02430                 fcc     'LEAVE'
F0E5 F0D3             (        forth.asm):02431                 fdb     TOR
F0E7 C7               (        forth.asm):02432                 RFCS
F0E8 BDE85E           (        forth.asm):02433 (7)             jsr     RPOP
F0EB BDE85E           (        forth.asm):02434 (7)             jsr     RPOP
F0EE BDE840           (        forth.asm):02435 (7)             jsr     RPUSH
F0F1 7EE840           (        forth.asm):02436 (3)             jmp     RPUSH
                      (        forth.asm):02437         
F0F4 41               (        forth.asm):02438         INDI    fcb     $41             79-STANDARD (REQ136)
F0F5 49               (        forth.asm):02439                 fcc     'I'
F0F6 F0DF             (        forth.asm):02440                 fdb     LEAVE
F0F8 C7               (        forth.asm):02441                 RFCS
F0F9 C601             (        forth.asm):02442 (2)             ldb     #1              1 means top of the stack
F0FB 9630             (        forth.asm):02443 (3)     RPICKN  lda     RDEPTH
F0FD 103798           (        forth.asm):02444 (4)             cmpr    b,a
F100 250A             (        forth.asm):02445 (3)             bcs     @rpick1
F102 9E00             (        forth.asm):02446 (4)             ldx     RSP
F104 5A               (        forth.asm):02447 (1)             decb                    Minus 1, unlike in the Z80 implementation
F105 58               (        forth.asm):02448 (1)             lslb                    Times 2
F106 3A               (        forth.asm):02449 (1)             abx
F107 AE84             (        forth.asm):02450 (5+0)           ldx     ,x
F109 7EE823           (        forth.asm):02451 (3)             jmp     NPUSH
F10C C608             (        forth.asm):02452 (2)     @rpick1 ldb     #8              Return stack underflow
F10E BDE7A2           (        forth.asm):02453 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02454         
F111 42               (        forth.asm):02455         RFETCH  fcb     $42             79-STANDARD (REQ228)
F112 5240             (        forth.asm):02456                 fcc     'R@'
F114 F0F4             (        forth.asm):02457                 fdb     INDI
F116 C7               (        forth.asm):02458                 RFCS
F117 20E0             (        forth.asm):02459                 RFXT    bra,INDI+4      XT for I
                      (        forth.asm):02460         
F119 42               (        forth.asm):02461         INDIP   fcb     $42             79-STANDARD (REF)
F11A 4927             (        forth.asm):02462                 fdb     $4927
F11C F111             (        forth.asm):02463                 fdb     RFETCH
F11E C7               (        forth.asm):02464                 RFCS
F11F C602             (        forth.asm):02465 (2)             ldb     #2
F121 20D8             (        forth.asm):02466 (3)             bra     RPICKN
                      (        forth.asm):02467         
F123 41               (        forth.asm):02468         INDJ    fcb     $41             79-STANDARD (REQ225)
F124 4A               (        forth.asm):02469                 fcc     'J'
F125 F119             (        forth.asm):02470                 fdb     INDIP
F127 C7               (        forth.asm):02471                 RFCS
F128 C603             (        forth.asm):02472 (2)             ldb     #3
F12A 20CF             (        forth.asm):02473 (3)             bra     RPICKN
                      (        forth.asm):02474         
F12C 42               (        forth.asm):02475         INDJP   fcb     $42             Non-standard
F12D 4A27             (        forth.asm):02476                 fdb     $4A27
F12F F123             (        forth.asm):02477                 fdb     INDJ
F131 C7               (        forth.asm):02478                 RFCS
F132 C604             (        forth.asm):02479 (2)             ldb     #4
F134 20C5             (        forth.asm):02480 (3)             bra     RPICKN
                      (        forth.asm):02481         
F136 41               (        forth.asm):02482         INDK    fcb     $41             79-STANDARD (REF)
F137 4B               (        forth.asm):02483                 fcc     'K'
F138 F12C             (        forth.asm):02484                 fdb     INDJP
F13A C7               (        forth.asm):02485                 RFCS
F13B C605             (        forth.asm):02486 (2)             ldb     #5
F13D 20BC             (        forth.asm):02487 (3)             bra     RPICKN
                      (        forth.asm):02488         
F13F 04               (        forth.asm):02489         QUIT    fcb     4               79-STANDARD (REQ211)
F140 51554954         (        forth.asm):02490                 fcc     'QUIT'
F144 F136             (        forth.asm):02491                 fdb     INDK
F146 C7               (        forth.asm):02492                 RFCS
F147 0F21             (        forth.asm):02493 (5)             clr     USTATE+1
F149 BDEBBC           (        forth.asm):02494                 RFXT    jsr,RCLR+7      XT for RCLR
F14C 10CE8000         (        forth.asm):02495 (4)             lds     #RAMSTRT+RAMSIZE Reset the system stack pointer
F150 BDE33F           (        forth.asm):02496 (7)             jsr     PUTCR
F153 7EE0B2           (        forth.asm):02497 (3)             jmp     INTERP
                      (        forth.asm):02498         
F156 05               (        forth.asm):02499         ABORT   fcb     5               79-STANDARD (REQ101)
F157 41424F5254       (        forth.asm):02500                 fcc     'ABORT'
F15C F13F             (        forth.asm):02501                 fdb     QUIT
F15E C7               (        forth.asm):02502                 RFCS
F15F BDEBB0           (        forth.asm):02503                 RFXT    jsr,NCLR+7      XT for NCLR
F162 BDEBBC           (        forth.asm):02504                 RFXT    jsr,RCLR+7      XT for RCLR
F165 C603             (        forth.asm):02505 (2)             ldb     #3
F167 BDE7A2           (        forth.asm):02506 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02507         
F16A 04               (        forth.asm):02508         FIND    fcb     4               79-STANDARD (REQ203)
F16B 46494E44         (        forth.asm):02509                 fcc     'FIND'          ( -- XT )
F16F F156             (        forth.asm):02510                 fdb     ABORT
F171 C7               (        forth.asm):02511                 RFCS
F172 1FC2             (        forth.asm):02512 (4)             tfr     0,y             Default return value is zero
F174 BDE877           (        forth.asm):02513 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
F177 6D84             (        forth.asm):02514 (5+0)           tst     ,x
F179 2711             (        forth.asm):02515 (3)             beq     @find1
F17B BDE3CD           (        forth.asm):02516 (7)             jsr     SCNSTOK
F17E 270C             (        forth.asm):02517 (3)             beq     @find1
F180 BDE4EB           (        forth.asm):02518 (7)             jsr     SWDIC
F183 DC0E             (        forth.asm):02519 (4)             ldd     PLOAD           Retrieve word payload
F185 DD10             (        forth.asm):02520 (4)             std     FNDPLD          Make it accessible through PAYLOAD
F187 DC04             (        forth.asm):02521 (4)             ldd     TOKENEP
F189 BDE166           (        forth.asm):02522 (7)             jsr     U2INFRD         Derive >IN from D
F18C 1F21             (        forth.asm):02523 (4)     @find1  tfr     y,x
F18E 7EE823           (        forth.asm):02524 (3)             jmp     NPUSH
                      (        forth.asm):02525         
F191 01               (        forth.asm):02526         RBRACK  fcb     1               79-STANDARD (REQ126)
F192 5D               (        forth.asm):02527                 fcc     ']'
F193 F16A             (        forth.asm):02528                 fdb     FIND
F195 C7               (        forth.asm):02529                 RFCS
F196 8601             (        forth.asm):02530 (2)             lda     #1
F198 9721             (        forth.asm):02531 (3)             sta     USTATE+1
F19A 39               (        forth.asm):02532 (4)             rts
                      (        forth.asm):02533         
                      (        forth.asm):02534         * Note: the standard does not mandate that this primitive be executed in
                      (        forth.asm):02535         * definitions only. IMHO, it ought to, therefore I am forcing the C bit here.
F19B C1               (        forth.asm):02536         LBRACK  fcb     $C1             79-STANDARD (REQ125)
F19C 5B               (        forth.asm):02537                 fcc     '['
F19D F191             (        forth.asm):02538                 fdb     RBRACK
F19F C7               (        forth.asm):02539                 RFCS
F1A0 0F21             (        forth.asm):02540 (5)             clr     USTATE+1
F1A2 39               (        forth.asm):02541 (4)             rts
                      (        forth.asm):02542         
                      (        forth.asm):02543         * Functionally: : ['] FIND POSTPONE LITERAL ; IMMEDIATE RESTRICT
F1A3 C3               (        forth.asm):02544         BKQUOT  fcb     $C3             ANSI (Core)
F1A4 5B275D           (        forth.asm):02545                 fcb     $5B,$27,$5D
F1A7 F19B             (        forth.asm):02546                 fdb     LBRACK
F1A9 C7               (        forth.asm):02547                 RFCS
F1AA 8DC6             (        forth.asm):02548                 RFXT    bsr,FIND+7      XT for FIND
                      (        forth.asm):02549         * Data stack topmost cell has the target word address.
F1AC 7EEC3C           (        forth.asm):02550                 RFXT    jmp,LITERAL+10  XT for LITERAL
                      (        forth.asm):02551         
F1AF C8               (        forth.asm):02552         POSTPON fcb     $C8             ANSI (Core)
F1B0 504F5354504F4E45 (        forth.asm):02553                 fcc     'POSTPONE'      Not a straight alias to [COMPILE]
F1B8 F1A3             (        forth.asm):02554                 fdb     BKQUOT          Non-immediate words deserve special treatment
F1BA C7               (        forth.asm):02555                 RFCS
F1BB BDE877           (        forth.asm):02556 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
F1BE 6D84             (        forth.asm):02557 (5+0)           tst     ,x
F1C0 2605             (        forth.asm):02558 (3)             bne     @postp2
F1C2 C605             (        forth.asm):02559 (2)     @postp1 ldb     #5              Missing word name
F1C4 BDE7A2           (        forth.asm):02560 (7)             jsr     ERRHDLR         No return
F1C7 BDE3CD           (        forth.asm):02561 (7)     @postp2 jsr     SCNSTOK
F1CA 27F6             (        forth.asm):02562 (3)             beq     @postp1
F1CC BDE4EB           (        forth.asm):02563 (7)             jsr     SWDIC
F1CF 2607             (        forth.asm):02564 (3)             bne     @postp3         Word found. Code address returned in Y
F1D1 9E02             (        forth.asm):02565 (4)             ldx     TOKENSP
F1D3 C602             (        forth.asm):02566 (2)             ldb     #2              Undefined (X points to the offending word)
F1D5 BDE7A2           (        forth.asm):02567 (7)             jsr     ERRHDLR         No return
F1D8 1F21             (        forth.asm):02568 (4)     @postp3 tfr     y,x             X has the actual execution token
F1DA 0D3A             (        forth.asm):02569 (4)             tst     IMDFLG
F1DC 2708             (        forth.asm):02570 (3)             beq     @postp5         Target word is not immediate
F1DE BDE158           (        forth.asm):02571 (7)     @postp4 jsr     EMXASXT         Set as action component
F1E1 DC02             (        forth.asm):02572 (4)             ldd     TOKENSP         Updated by SWDIC if the word was found
F1E3 7EE166           (        forth.asm):02573 (3)             jmp     U2INFRD         Derive >IN from D
                      (        forth.asm):02574         * The word being considered is non-immediate. The equivalent input should be:
                      (        forth.asm):02575         * ['] <word> COMPILE, We have the XT for <word> in X.
F1E6 BDE5BA           (        forth.asm):02576 (7)     @postp5 jsr     LITER
F1E9 8EF1FA           (        forth.asm):02577                 RFXT    ldx,#CMPCOMA+11 XT for COMPILE,
F1EC 20F0             (        forth.asm):02578 (3)             bra     @postp4
                      (        forth.asm):02579         
                      (        forth.asm):02580         * Like the 79-STANDARD COMPILE word, GNU Forth has this as a compile-only word.
                      (        forth.asm):02581         * This is a wise choice since it allows us to possibly optimize it.
F1EE 48               (        forth.asm):02582         CMPCOMA fcb     $48             ANSI (Core Ext)
F1EF 434F4D50494C452C (        forth.asm):02583                 fcc     'COMPILE,'      ( XT -- )
F1F7 F1AF             (        forth.asm):02584                 fdb     POSTPON
F1F9 C7               (        forth.asm):02585                 RFCS
F1FA BDE831           (        forth.asm):02586 (7)             jsr     NPOP            Execution token to X
F1FD 7EE158           (        forth.asm):02587 (3)     CMPCOM1 jmp     EMXASXT
                      (        forth.asm):02588         
                      (        forth.asm):02589         * As per the standard, : is not immediate. This allows for further interesting
                      (        forth.asm):02590         * developments, like tracing words execution...
F200 01               (        forth.asm):02591         COMPC   fcb     $1              79-STANDARD (REQ116)
F201 3A               (        forth.asm):02592                 fcc     ':'
F202 F1EE             (        forth.asm):02593                 fdb     CMPCOMA
F204 C7               (        forth.asm):02594                 RFCS
F205 8601             (        forth.asm):02595 (2)             lda     #1
F207 9721             (        forth.asm):02596 (3)             sta     USTATE+1
F209 104F             (        forth.asm):02597 (2)             clrd
F20B DD14             (        forth.asm):02598 (4)             std     JSRLAST
F20D 8602             (        forth.asm):02599 (2)             lda     #2
F20F 9732             (        forth.asm):02600 (3)             sta     RTSREMV         Optimistic strategy: remove the final RTS
F211 9630             (        forth.asm):02601 (3)             lda     RDEPTH
F213 9731             (        forth.asm):02602 (3)             sta     IRDPTH          Meant to check for unbalanced constructs
F215 7EE559           (        forth.asm):02603 (3)             jmp     LOCWRT
                      (        forth.asm):02604         
F218 C1               (        forth.asm):02605         COMPR   fcb     $C1             79-STANDARD (REQ196)
F219 3B               (        forth.asm):02606                 fcc     ';'
F21A F200             (        forth.asm):02607                 fdb     COMPC
F21C C7               (        forth.asm):02608                 RFCS
F21D 9630             (        forth.asm):02609 (3)             lda     RDEPTH          Return stack depth
F21F 9131             (        forth.asm):02610 (3)             cmpa    IRDPTH          Same as when : was entered?
F221 2705             (        forth.asm):02611 (3)             beq     @compr1
F223 C609             (        forth.asm):02612 (2)             ldb     #9              Illegal construct if not
F225 BDE7A2           (        forth.asm):02613 (7)             jsr     ERRHDLR         No return
F228 0F21             (        forth.asm):02614 (5)     @compr1 clr     USTATE+1        Back to interpretation mode
F22A 9E0C             (        forth.asm):02615 (4)             ldx     BDICEND
F22C 9F06             (        forth.asm):02616 (4)             stx     LSTWAD          Update LAST
F22E 9E08             (        forth.asm):02617 (4)             ldx     DICEND
                      (        forth.asm):02618         * Optimization: replace the last JSR by a JMP, if possible.
F230 DC14             (        forth.asm):02619 (4)             ldd     JSRLAST
F232 2712             (        forth.asm):02620 (3)             beq     @compr3         We need an RTS
F234 301D             (        forth.asm):02621 (4+1)           leax    -3,x
F236 9C14             (        forth.asm):02622 (4)             cmpx    JSRLAST
F238 2604             (        forth.asm):02623 (3)             bne     @compr2
F23A 867E             (        forth.asm):02624 (2)             lda     #JMPOPC         JMP extended
F23C A784             (        forth.asm):02625 (4+0)           sta     ,x
                      (        forth.asm):02626         * At this point we still have to emit an RTS unless RTSREMV is 2 or more.
F23E 3003             (        forth.asm):02627 (4+1)   @compr2 leax    3,x
F240 9632             (        forth.asm):02628 (3)             lda     RTSREMV
F242 8102             (        forth.asm):02629 (2)             cmpa    #2
F244 2404             (        forth.asm):02630 (3)             bhs     @compr4         Optimization applies. We have no forward refs
F246 8639             (        forth.asm):02631 (2)     @compr3 lda     #RTSOPC         RTS inherent
F248 A780             (        forth.asm):02632 (4+1)           sta     ,x+
F24A                  (        forth.asm):02633         @compr4
                      (        forth.asm):02634                 IFNE    DEBUG
                      (        forth.asm):02635                 lda     #ILLOPC         Illegal opcode
                      (        forth.asm):02636                 sta     ,x+
                      (        forth.asm):02637                 ENDC                    DEBUG
F24A 9F08             (        forth.asm):02638 (4)             stx     DICEND          Update HERE
                      (        forth.asm):02639                 IFNE    RELFEAT
F24C BDECD0           (        forth.asm):02640                 RFXT    jsr,MONITOR+10  XT for MONITOR. All : words are candidates
                      (        forth.asm):02641         *                               for integrity check by ICHECK.
                      (        forth.asm):02642                 ENDC                    RELFEAT
F24F 39               (        forth.asm):02643 (4)             rts
                      (        forth.asm):02644         
F250 C7               (        forth.asm):02645         RECURSE fcb     $C7             FORTH-83
F251 52454355525345   (        forth.asm):02646                 fcc     'RECURSE'
F258 F218             (        forth.asm):02647                 fdb     COMPR
F25A C7               (        forth.asm):02648                 RFCS
F25B 9E12             (        forth.asm):02649 (4)             ldx     RECADDR         Set up by LOCWRT
F25D 7EE158           (        forth.asm):02650 (3)             jmp     EMXASXT         Set as action component
                      (        forth.asm):02651         
F260 06               (        forth.asm):02652         FORGET  fcb     6               79-STANDARD (REQ196)
F261 464F52474554     (        forth.asm):02653                 fcc     'FORGET'
F267 F250             (        forth.asm):02654                 fdb     RECURSE
F269 C7               (        forth.asm):02655                 RFCS
F26A BDE877           (        forth.asm):02656 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
F26D 6D84             (        forth.asm):02657 (5+0)           tst     ,x              EOL?
F26F 2605             (        forth.asm):02658 (3)             bne     @frgt2          No
F271 C605             (        forth.asm):02659 (2)     @frgt1  ldb     #5              Missing word name
F273 BDE7A2           (        forth.asm):02660 (7)             jsr     ERRHDLR         No return
F276 BDE3CD           (        forth.asm):02661 (7)     @frgt2  jsr     SCNSTOK
F279 27F6             (        forth.asm):02662 (3)             beq     @frgt1          EOL before a non-SP character could be acquired
F27B BDE4EB           (        forth.asm):02663 (7)             jsr     SWDIC           SWDIC uses TOKENSP as input--not X!!
F27E 2607             (        forth.asm):02664 (3)             bne     @frgt3          Word found. XT returned in Y
F280 9E02             (        forth.asm):02665 (4)             ldx     TOKENSP
F282 C602             (        forth.asm):02666 (2)             ldb     #2              Undefined (X points to the offending word)
F284 BDE7A2           (        forth.asm):02667 (7)             jsr     ERRHDLR         No return
F287 1F21             (        forth.asm):02668 (4)     @frgt3  tfr     y,x             Y and X have the word's XT
F289 108C0C65         (        forth.asm):02669 (4)             cmpy    #RAMFTCH
F28D 2719             (        forth.asm):02670 (3)             beq     @frgt4
F28F 108CE000         (        forth.asm):02671 (4)             cmpy    #ROMSTRT
F293 2413             (        forth.asm):02672 (3)             bhs     @frgt4
                      (        forth.asm):02673                 IFNE    RELFEAT
F295 AE1D             (        forth.asm):02674 (5+1)           ldx     -3,x            Backlink to X
F297 9F06             (        forth.asm):02675 (4)             stx     LSTWAD          Update LAST
F299 303C             (        forth.asm):02676 (4+1)           leax    -4,y            XT-4 to X (1B/attr, 2B/backlink, 1B/checksum)
                      (        forth.asm):02677                 ELSE
                      (        forth.asm):02678                 ldx     -2,x            Backlink to X
                      (        forth.asm):02679                 stx     LSTWAD          Update LAST
                      (        forth.asm):02680                 leax    -3,y            XT-3 to X (1B/attr, 2B/backlink)
                      (        forth.asm):02681                 ENDC                    RELFEAT
F29B 4F               (        forth.asm):02682 (1)             clra
F29C D639             (        forth.asm):02683 (3)             ldb     CURTOKL         Token name length to D
F29E 103201           (        forth.asm):02684 (4)             subr    d,x             Substract word length
F2A1 9F08             (        forth.asm):02685 (4)             stx     DICEND          Update HERE
F2A3 DC02             (        forth.asm):02686 (4)             ldd     TOKENSP         Set by SWDIC to point to the end of the token
F2A5 7EE166           (        forth.asm):02687 (3)             jmp     U2INFRD         Derive >IN from D
F2A8 C60B             (        forth.asm):02688 (2)     @frgt4  ldb     #11             Word is unforgettable
F2AA BDE7A2           (        forth.asm):02689 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02690         
F2AD 07               (        forth.asm):02691         EXCT    fcb     7               79-STANDARD (REQ163)
F2AE 45584543555445   (        forth.asm):02692                 fcc     'EXECUTE'
F2B5 F260             (        forth.asm):02693                 fdb     FORGET
F2B7 C7               (        forth.asm):02694                 RFCS
F2B8 BDE831           (        forth.asm):02695 (7)             jsr     NPOP
F2BB 1037C1           (        forth.asm):02696 (4)             cmpr    0,x             Although the standard does not specify that
F2BE 2702             (        forth.asm):02697 (3)             beq     @exct1          a NUL address should trigger an error, I do
F2C0 1F15             (        forth.asm):02698 (4)             tfr     x,pc
F2C2 C60D             (        forth.asm):02699 (2)     @exct1  ldb     #13             Illegal argument
F2C4 BDE7A2           (        forth.asm):02700 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02701         
F2C7 03               (        forth.asm):02702         BYE     fcb     3               Non-standard
F2C8 425945           (        forth.asm):02703                 fcc     'BYE'
F2CB F2AD             (        forth.asm):02704                 fdb     EXCT
F2CD C7               (        forth.asm):02705                 RFCS
                      (        forth.asm):02706                 IFNE    RTCFEAT
                      (        forth.asm):02707                 lda     #RTOREGB
                      (        forth.asm):02708                 jsr     RTREGRD         RTCB register to B
                      (        forth.asm):02709                 andb    #^RTBPIE        Disable periodic interrupt generation
                      (        forth.asm):02710                 jsr     RTREGWR
                      (        forth.asm):02711                 ldx     #40
                      (        forth.asm):02712                 jsr     MILLIS1         Wait for 40 milliseconds
                      (        forth.asm):02713                 orcc    #(FFLAG|IFLAG)  Disable maskable interrupts
                      (        forth.asm):02714                 ENDC                    RTCFEAT
F2CE 7EE037           (        forth.asm):02715 (3)             jmp     RSTHDL
                      (        forth.asm):02716         
F2D1 C6               (        forth.asm):02717         BKCHAR  fcb     $C6             ANSI (Core)
F2D2 5B434841525D     (        forth.asm):02718                 fcc     '[CHAR]'
F2D8 F2C7             (        forth.asm):02719                 fdb     BYE
F2DA C7               (        forth.asm):02720                 RFCS
F2DB 8D0B             (        forth.asm):02721                 RFXT    bsr,CHAR+7      XT for CHAR
F2DD 7EEC3C           (        forth.asm):02722                 RFXT    jmp,LITERAL+10  XT for LITERAL
                      (        forth.asm):02723         
F2E0 04               (        forth.asm):02724         CHAR    fcb     4               ANSI (Core)
F2E1 43484152         (        forth.asm):02725                 fcc     'CHAR'
F2E5 F2D1             (        forth.asm):02726                 fdb     BKCHAR
F2E7 C7               (        forth.asm):02727                 RFCS
F2E8 BDE877           (        forth.asm):02728 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
F2EB BDE3CD           (        forth.asm):02729 (7)     @char1  jsr     SCNSTOK         X points to the beginning of the character
F2EE 2712             (        forth.asm):02730 (3)             beq     @chrerr
F2F0 E684             (        forth.asm):02731 (4+0)           ldb     ,x
F2F2 4F               (        forth.asm):02732 (1)             clra
F2F3 1F01             (        forth.asm):02733 (4)             tfr     d,x
F2F5 BDE823           (        forth.asm):02734 (7)             jsr     NPUSH
F2F8 9E02             (        forth.asm):02735 (4)             ldx     TOKENSP         Set by SCNSTOK
F2FA BDE3DB           (        forth.asm):02736 (7)             jsr     SCNETOK
F2FD 1F10             (        forth.asm):02737 (4)             tfr     x,d             TOKENEP
F2FF 7EE166           (        forth.asm):02738 (3)             jmp     U2INFRD         Derive >IN from D
F302 C60D             (        forth.asm):02739 (2)     @chrerr ldb     #13             Illegal argument
F304 BDE7A2           (        forth.asm):02740 (7)             jsr     ERRHDLR
                      (        forth.asm):02741         * No return.
                      (        forth.asm):02742         
                      (        forth.asm):02743         * Hairy code but working.
F307 04               (        forth.asm):02744         WORD    fcb     4               79-STANDARD (REQ181)
F308 574F5244         (        forth.asm):02745                 fcc     'WORD'          ( char -- addr )
F30C F2E0             (        forth.asm):02746                 fdb     CHAR
F30E C7               (        forth.asm):02747                 RFCS
F30F BDE831           (        forth.asm):02748 (7)             jsr     NPOP
F312 1F16             (        forth.asm):02749 (4)             tfr     x,w             F has the delimiter ASCII code
F314 109E08           (        forth.asm):02750 (5)             ldy     DICEND          The counted string returned is stored at HERE
F317 3420             (        forth.asm):02751 (4+2)           pshs    y
F319 6FA0             (        forth.asm):02752 (6+1)           clr     ,y+             Initialize its length
F31B BDE877           (        forth.asm):02753 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
F31E 6D84             (        forth.asm):02754 (5+0)           tst     ,x              EOL reached?
F320 2605             (        forth.asm):02755 (3)             bne     @word1          No, proceed
F322 3510             (        forth.asm):02756 (4+2)   @word0  puls    x
F324 3610             (        forth.asm):02757                 UCNPUSH                 Push back HERE
F326 39               (        forth.asm):02758 (4)             rts
F327 3001             (        forth.asm):02759 (4+1)   @word1  leax    1,x             Skip space character after WORD or leading delim
F329 A684             (        forth.asm):02760 (4+0)           lda     ,x
F32B 2716             (        forth.asm):02761 (3)             beq     @word5          EOL reached, this is the end
F32D 1037F8           (        forth.asm):02762 (4)             cmpr    f,a             Leading delimiter matched?
F330 27F5             (        forth.asm):02763 (3)             beq     @word1          Yes
F332 A680             (        forth.asm):02764 (4+1)   @word2  lda     ,x+             Acquire next character from the input stream
F334 A7A0             (        forth.asm):02765 (4+1)   @word3  sta     ,y+
F336 2709             (        forth.asm):02766 (3)             beq     @word4          EOL reached
F338 1037F8           (        forth.asm):02767 (4)             cmpr    f,a             Trailing delimiter?
F33B 2706             (        forth.asm):02768 (3)             beq     @word5
F33D 6CF4             (        forth.asm):02769 (6+3)           inc     [,s]            Increment string length
F33F 20F1             (        forth.asm):02770 (3)             bra     @word2
F341 301F             (        forth.asm):02771 (4+1)   @word4  leax    -1,x            EOL reached
F343 1F10             (        forth.asm):02772 (4)     @word5  tfr     x,d             Pointing one char after the delimiter or to NUL
F345 BDE166           (        forth.asm):02773 (7)             jsr     U2INFRD         Derive >IN from D
F348 20D8             (        forth.asm):02774 (3)             bra     @word0
                      (        forth.asm):02775         
F34A 81               (        forth.asm):02776         LPAR    fcb     $81             79-STANDARD (REQ122)
F34B 28               (        forth.asm):02777                 fcc     '('
F34C F307             (        forth.asm):02778                 fdb     WORD
F34E C7               (        forth.asm):02779                 RFCS
F34F BDE877           (        forth.asm):02780 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
F352 A680             (        forth.asm):02781 (4+1)   @lpar1  lda     ,x+
F354 2709             (        forth.asm):02782 (3)             beq     @lparx          Input stream exhausted before ) is matched
F356 8129             (        forth.asm):02783 (2)             cmpa    #')
F358 26F8             (        forth.asm):02784 (3)             bne     @lpar1
F35A 1F10             (        forth.asm):02785 (4)             tfr     x,d             Just matched )
F35C 7EE166           (        forth.asm):02786 (3)             jmp     U2INFRD         Derive >IN from D
F35F C60C             (        forth.asm):02787 (2)     @lparx  ldb     #12             Missing delimiter
F361 BDE7A2           (        forth.asm):02788 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02789         
F364 06               (        forth.asm):02790         SOURCE  fcb     6               ANSI (Core)
F365 534F55524345     (        forth.asm):02791                 fcc     'SOURCE'        ( -- baseaddr charcount )
F36B F34A             (        forth.asm):02792                 fdb     LPAR
F36D C7               (        forth.asm):02793                 RFCS
F36E 9E1C             (        forth.asm):02794 (4)             ldx     BSBFADR
F370 BDE823           (        forth.asm):02795 (7)             jsr     NPUSH
F373 8E0400           (        forth.asm):02796 (3)             ldx     #BLKSIZ         Non-zero block size
F376 DC24             (        forth.asm):02797 (4)             ldd     UBLK
F378 2605             (        forth.asm):02798 (3)             bne     @srcdon         Current BLK is NZ
F37A 4F               (        forth.asm):02799 (1)             clra
F37B D62F             (        forth.asm):02800 (3)             ldb     CMDLNSZ         Character count entered through GETS in INTERP
F37D 1F01             (        forth.asm):02801 (4)             tfr     d,x
F37F 7EE823           (        forth.asm):02802 (3)     @srcdon jmp     NPUSH
                      (        forth.asm):02803         
                      (        forth.asm):02804         * This is a straightforward implementation borrowed from GNU Forth 'see \':
                      (        forth.asm):02805         * : \
                      (        forth.asm):02806         *   BLK @
                      (        forth.asm):02807         *   IF     >IN @ C/L / 1+ C/L * >IN ! EXIT
                      (        forth.asm):02808         *   THEN
                      (        forth.asm):02809         *   SOURCE >IN ! DROP ; IMMEDIATE
                      (        forth.asm):02810         * However since C/L (number of columns per line) is 64 (a power of 2), things
                      (        forth.asm):02811         * can be coded in a more compact manner as: >IN @ 63 COM AND 64 + >IN !
F382 81               (        forth.asm):02812         BKSLSH  fcb     $81             ANSI (Block Ext)
F383 5C               (        forth.asm):02813                 fcb     $5C             \ ( -- )
F384 F364             (        forth.asm):02814                 fdb     SOURCE
F386 C7               (        forth.asm):02815                 RFCS
F387 DC24             (        forth.asm):02816 (4)             ldd     UBLK            BLK @ to D
F389 270B             (        forth.asm):02817 (3)             beq     @comser         We operate from block 0: the console
F38B DC22             (        forth.asm):02818 (4)             ldd     UTOIN           >IN @
F38D C4C0             (        forth.asm):02819 (2)             andb    #^$3F           Point to the beginning of the line
F38F CB40             (        forth.asm):02820 (2)             addb    #$40            next line
F391 8900             (        forth.asm):02821 (2)             adca    #0              Propagate potential carry from LSB
F393 DD22             (        forth.asm):02822 (4)             std     UTOIN           >IN !
F395 39               (        forth.asm):02823 (4)             rts                     EXIT
F396 8DD6             (        forth.asm):02824         @comser RFXT    bsr,SOURCE+9    XT for SOURCE
F398 BDE831           (        forth.asm):02825 (7)             jsr     NPOP
F39B 9F22             (        forth.asm):02826 (4)             stx     UTOIN           >IN !
F39D 7EFBC2           (        forth.asm):02827                 RFXT    jmp,DROP+7      XT for DROP
                      (        forth.asm):02828                 ENDC
                      (        forth.asm):02829         
F3A0 82               (        forth.asm):02830         PSTR    fcb     $82             79-STANDARD (REQ133)
F3A1 2E22             (        forth.asm):02831                 fcc     '."'
F3A3 F382             (        forth.asm):02832                 fdb     BKSLSH
F3A5 C7               (        forth.asm):02833                 RFCS
F3A6 8D13             (        forth.asm):02834                 RFXT    bsr,SQUOTE+5    XT for S"
F3A8 0D21             (        forth.asm):02835 (4)             tst     USTATE+1
F3AA 2603             (        forth.asm):02836 (3)             bne     @pstcmp
F3AC 7EF6CE           (        forth.asm):02837                 RFXT    jmp,TYPE+7      XT for TYPE
F3AF 8EF6CE           (        forth.asm):02838         @pstcmp RFXT    ldx,#TYPE+7     Emit TYPE as an XT
F3B2 7EE158           (        forth.asm):02839 (3)             jmp     EMXASXT
                      (        forth.asm):02840         
F3B5 82               (        forth.asm):02841         SQUOTE  fcb     $82             ANSI (Core)
F3B6 5322             (        forth.asm):02842                 fcc     'S"'
F3B8 F3A0             (        forth.asm):02843                 fdb     PSTR
F3BA C7               (        forth.asm):02844                 RFCS
F3BB 0D21             (        forth.asm):02845 (4)             tst     USTATE+1
F3BD 260C             (        forth.asm):02846 (3)             bne     @sqcmp
F3BF 8E0022           (        forth.asm):02847 (3)             ldx     #'"             We are inperpreting
F3C2 BDE823           (        forth.asm):02848 (7)             jsr     NPUSH
F3C5 BDF30F           (        forth.asm):02849                 RFXT    jsr,WORD+7      XT for WORD
F3C8 7EF6ED           (        forth.asm):02850                 RFXT    jmp,COUNT+8     XT for COUNT
F3CB 109E08           (        forth.asm):02851 (5)     @sqcmp  ldy     DICEND          We are compiling
F3CE 867E             (        forth.asm):02852 (2)             lda     #JMPOPC         JMP extended
F3D0 A7A0             (        forth.asm):02853 (4+1)           sta     ,y+
F3D2 3420             (        forth.asm):02854 (4+2)           pshs    y
F3D4 3122             (        forth.asm):02855 (4+1)           leay    2,y             2 ALLOT
F3D6 109F08           (        forth.asm):02856 (5)             sty     DICEND
F3D9 8E0022           (        forth.asm):02857 (3)             ldx     #'"
F3DC BDE823           (        forth.asm):02858 (7)             jsr     NPUSH
F3DF BDF30F           (        forth.asm):02859                 RFXT    jsr,WORD+7      XT for WORD
F3E2 BDE831           (        forth.asm):02860 (7)             jsr     NPOP
F3E5 4F               (        forth.asm):02861 (1)             clra
F3E6 E684             (        forth.asm):02862 (4+0)           ldb     ,x              C@
F3E8 3001             (        forth.asm):02863 (4+1)           leax    1,x             1+. Skip the byte count (X has HERE)
F3EA 308B             (        forth.asm):02864 (4+2)           leax    d,x             Skip string length material
F3EC 3520             (        forth.asm):02865 (4+2)           puls    y
F3EE AFA4             (        forth.asm):02866 (5+0)           stx     ,y              Install jump address
F3F0 3122             (        forth.asm):02867 (4+1)           leay    2,y             Counted string base address to Y
F3F2 868E             (        forth.asm):02868 (2)             lda     #LDXOPC
F3F4 A780             (        forth.asm):02869 (4+1)           sta     ,x+
F3F6 10AF81           (        forth.asm):02870 (6+2)           sty     ,x++
F3F9 9F08             (        forth.asm):02871 (4)             stx     DICEND          Update HERE
F3FB 8EE823           (        forth.asm):02872 (3)             ldx     #NPUSH
F3FE BDE158           (        forth.asm):02873 (7)             jsr     EMXASXT
F401 8EF6ED           (        forth.asm):02874                 RFXT    ldx,#COUNT+8    XT for COUNT
F404 7EE158           (        forth.asm):02875 (3)             jmp     EMXASXT
                      (        forth.asm):02876         
                      (        forth.asm):02877         * Transactional behaviour is guaranteed here. What this means is that the
                      (        forth.asm):02878         * operation will preserve the data stack contents, should insufficient
                      (        forth.asm):02879         * parameters be supplied. It is a very desirable feature (for debugging
                      (        forth.asm):02880         * purposes) which will be generalized to a number of other words. As an
                      (        forth.asm):02881         * aside, it also allows us to access the data stack as directly indexed
                      (        forth.asm):02882         * through the 6309 U register, resulting in better performance.
F407 02               (        forth.asm):02883         DPLUS   fcb     2               79-STANDARD (REQ241)
F408 442B             (        forth.asm):02884                 fcc     'D+'            ( d2 d1 -- d1+d2--signed )
F40A F3B5             (        forth.asm):02885                 fdb     SQUOTE          Initially ( L2 H2 L1 H1)
F40C C7               (        forth.asm):02886                 RFCS
F40D BDE4E6           (        forth.asm):02887 (7)             jsr     MIN4PST         Make sure we have at least 4 cells stacked up
                      (        forth.asm):02888         * At this point sufficient stack depth has been assessed. Let's rock and roll!
F410 BDFC3D           (        forth.asm):02889         @stkok  RFXT    jsr,ROT+6       XT for ROT ( L2 L1 H1 H2 )
F413 EC44             (        forth.asm):02890 (5+1)           ldd     4,u             L1
F415 E346             (        forth.asm):02891 (5+1)           addd    6,u             L2
F417 ED46             (        forth.asm):02892 (5+1)           std     6,u             d1+d2 least significant cell
F419 EC42             (        forth.asm):02893 (5+1)           ldd     2,u             H1
F41B 10890000         (        forth.asm):02894 (4)             adcd    #0              Carry from least significant cell addition
F41F E3C4             (        forth.asm):02895 (5+0)           addd    ,u              H2
F421 ED44             (        forth.asm):02896 (5+1)           std     4,u             d1+d2 most significant cell
F423 3344             (        forth.asm):02897 (4+1)           leau    4,u             Drop 2 cells from the data stack
F425 39               (        forth.asm):02898 (4)             rts
                      (        forth.asm):02899         
F426 07               (        forth.asm):02900         DNEG    fcb     7               79-STANDARD (REQ245)
F427 444E4547415445   (        forth.asm):02901                 fcc     'DNEGATE'
F42E F407             (        forth.asm):02902                 fdb     DPLUS
F430 C7               (        forth.asm):02903                 RFCS
F431 BDE4DC           (        forth.asm):02904 (7)             jsr     MIN2PST         We need at least 2 cells stacked up
F434 10A642           (        forth.asm):02905 (6+1)           ldw     2,u             Least significant cell
F437 1053             (        forth.asm):02906 (2)             comw
F439 ECC4             (        forth.asm):02907 (5+0)           ldd     ,u              Most significant cell
F43B 1043             (        forth.asm):02908 (2)             comd
F43D 108B0001         (        forth.asm):02909 (4)             addw    #1
F441 10890000         (        forth.asm):02910 (4)             adcd    #0              Propagate carry flag
F445 10EDC4           (        forth.asm):02911 (8+0)           stq     ,u              Store the result back to the data stack
F448 39               (        forth.asm):02912 (4)             rts
                      (        forth.asm):02913         
F449 03               (        forth.asm):02914         DZEQ    fcb     3               79-STANDARD (double number extension)
F44A 44303D           (        forth.asm):02915                 fcc     'D0='           ( d -- flag )
F44D F426             (        forth.asm):02916                 fdb     DNEG
F44F C7               (        forth.asm):02917                 RFCS
F450 BDEECD           (        forth.asm):02918                 RFXT    jsr,OR+5        XT for OR
F453 7EEF47           (        forth.asm):02919                 RFXT    jmp,NULP+5      XT for 0=
                      (        forth.asm):02920         
                      (        forth.asm):02921         * In essence:
                      (        forth.asm):02922         * : D< DNEGATE D+ NIP [ HEX ] 8000 AND IF 1 ELSE 0 THEN ;
F456 02               (        forth.asm):02923         DLESS   fcb     2               79-STANDARD (REQ244)
F457 443C             (        forth.asm):02924                 fcc     'D<'            ( d1 d2 -- flag )
F459 F449             (        forth.asm):02925                 fdb     DZEQ
F45B C7               (        forth.asm):02926                 RFCS
F45C 8DD3             (        forth.asm):02927                 RFXT    bsr,DNEG+10     XT for DNEGATE
F45E 8DAD             (        forth.asm):02928                 RFXT    bsr,DPLUS+5     XT for D+
F460 4F               (        forth.asm):02929 (1)             clra
F461 A742             (        forth.asm):02930 (4+1)           sta     2,u
F463 E6C4             (        forth.asm):02931 (4+0)           ldb     ,u
F465 2D05             (        forth.asm):02932 (3)             blt     @setto1
F467 A743             (        forth.asm):02933 (4+1)   @setrv  sta     3,u
F469 3342             (        forth.asm):02934 (4+1)           leau    2,u
F46B 39               (        forth.asm):02935 (4)             rts
F46C 4C               (        forth.asm):02936 (1)     @setto1 inca
F46D 20F8             (        forth.asm):02937 (3)             bra     @setrv
                      (        forth.asm):02938         
F46F 05               (        forth.asm):02939         TWOOVER fcb     5               79-STANDARD (double number extension)
F470 324F564552       (        forth.asm):02940                 fcc     '2OVER'         ( d1 d2 -- d1 d2 d1 )
F475 F456             (        forth.asm):02941                 fdb     DLESS
F477 C7               (        forth.asm):02942                 RFCS
F478 BDE4E6           (        forth.asm):02943 (7)             jsr     MIN4PST         At least four cells need to be stacked up
F47B 10EC44           (        forth.asm):02944 (8+1)           ldq     4,u             D:W has MSC:LSC of D1
F47E 1F61             (        forth.asm):02945 (4)             tfr     w,x
F480 BDE823           (        forth.asm):02946 (7)             jsr     NPUSH
F483 1F01             (        forth.asm):02947 (4)             tfr     d,x
F485 7EE823           (        forth.asm):02948 (3)             jmp     NPUSH
                      (        forth.asm):02949         
F488 05               (        forth.asm):02950         TWOSWAP fcb     5               79-STANDARD (double number extension)
F489 3253574150       (        forth.asm):02951                 fcc     '2SWAP'         ( d1 d2 -- d2 d1 )
F48E F46F             (        forth.asm):02952                 fdb     TWOOVER
F490 C7               (        forth.asm):02953                 RFCS
F491 BDE4E6           (        forth.asm):02954 (7)             jsr     MIN4PST         At least four cells must be stacked up
F494 AE44             (        forth.asm):02955 (5+1)           ldx     4,u             D1 most significant cell
F496 10AE46           (        forth.asm):02956 (6+1)           ldy     6,u             D1 least significant cell
F499 10ECC4           (        forth.asm):02957 (8+0)           ldq     ,u              D:W has MSC:LSC of D2
F49C 10ED44           (        forth.asm):02958 (8+1)           stq     4,u
F49F AFC4             (        forth.asm):02959 (5+0)           stx     ,u
F4A1 10AF42           (        forth.asm):02960 (6+1)           sty     2,u
F4A4 39               (        forth.asm):02961 (4)             rts
                      (        forth.asm):02962         
F4A5 05               (        forth.asm):02963         TWODROP fcb     5               79-STANDARD (double number extension)
F4A6 3244524F50       (        forth.asm):02964                 fcc     '2DROP'         ( d -- )
F4AB F488             (        forth.asm):02965                 fdb     TWOSWAP
F4AD C7               (        forth.asm):02966                 RFCS
F4AE BDE4DC           (        forth.asm):02967 (7)             jsr     MIN2PST         At least two cells must be stacked up
F4B1 3344             (        forth.asm):02968 (4+1)           leau    4,u
F4B3 39               (        forth.asm):02969 (4)             rts
                      (        forth.asm):02970         
F4B4 04               (        forth.asm):02971         TWODUP  fcb     4               79-STANDARD (double number extension)
F4B5 32445550         (        forth.asm):02972                 fcc     '2DUP'          ( double -- double double )
F4B9 F4A5             (        forth.asm):02973                 fdb     TWODROP
F4BB C7               (        forth.asm):02974                 RFCS
F4BC BDE4DC           (        forth.asm):02975 (7)             jsr     MIN2PST         At least two cells need to be stacked up
F4BF 10ECC4           (        forth.asm):02976 (8+0)           ldq     ,u              D:W has MSC:LSC of DOUBLE
F4C2 1F61             (        forth.asm):02977 (4)             tfr     w,x
F4C4 BDE823           (        forth.asm):02978 (7)             jsr     NPUSH
F4C7 1F01             (        forth.asm):02979 (4)             tfr     d,x
F4C9 7EE823           (        forth.asm):02980 (3)             jmp     NPUSH
                      (        forth.asm):02981         
F4CC 02               (        forth.asm):02982         TWOSTOR fcb     2               79-STANDARD (double number extension)
F4CD 3221             (        forth.asm):02983                 fcc     '2!'            ( double addr -- )
F4CF F4B4             (        forth.asm):02984                 fdb     TWODUP
F4D1 C7               (        forth.asm):02985                 RFCS
F4D2 BDE4E1           (        forth.asm):02986 (7)             jsr     MIN3PST         At least three cells need to be stacked up
F4D5 10EC42           (        forth.asm):02987 (8+1)           ldq     2,u             DOUBLE to D:W
F4D8 10EDD4           (        forth.asm):02988 (8+3)           stq     [,u]            Store DOUBLE to ADDR
F4DB 3346             (        forth.asm):02989 (4+1)           leau    6,u             Drop three cells from the user stack
F4DD 39               (        forth.asm):02990 (4)             rts
                      (        forth.asm):02991         
F4DE 02               (        forth.asm):02992         TWOFTCH fcb     2               79-STANDARD (double number extension)
F4DF 3240             (        forth.asm):02993                 fcc     '2@'            ( dbladdr -- double )
F4E1 F4CC             (        forth.asm):02994                 fdb     TWOSTOR
F4E3 C7               (        forth.asm):02995                 RFCS
F4E4 BDE4D7           (        forth.asm):02996 (7)             jsr     MIN1PST         At least cell needs to be stacked up
F4E7 10ECD4           (        forth.asm):02997 (8+3)           ldq     [,u]            D:W has MSC:LSC of DBLADDR @
F4EA 10A7C4           (        forth.asm):02998 (6+0)           stw     ,u              Least significant cell stacked in place
F4ED 1F01             (        forth.asm):02999 (4)             tfr     d,x             Most significant cell goes through standard push
F4EF 7EE823           (        forth.asm):03000 (3)             jmp     NPUSH
                      (        forth.asm):03001         
                      (        forth.asm):03002                 IFNE    HVCONV
F4F2                  (        forth.asm):03003         CONVERT fcb     7               79-STANDARD (REQ195)
                      (        forth.asm):03004                 fcc     'CONVERT'       ( d1 addr1 -- d2 addr2 )
                      (        forth.asm):03005                 fdb     TWOFTCH
                      (        forth.asm):03006                 RFCS
                      (        forth.asm):03007                 jsr     MIN3PST         At least 3 cells need to be stacked up
                      (        forth.asm):03008                 jsr     CKBASE          Check for supported BASE. No return if not
                      (        forth.asm):03009                 ldx     ,u              ADDR1 to X
F4F2                  (        forth.asm):03010         @cvloop leax    1,x
                      (        forth.asm):03011                 ldb     ,x
                      (        forth.asm):03012         * B has the ASCII representation of something that may or may not be a valid
                      (        forth.asm):03013         * digit, expressed in BASE (alias (byte)UBASE+1). If it does, multiply D1 by
                      (        forth.asm):03014         * BASE and add that to D1 (aka D2 on exit). Then add DIGIT on the top of it.
                      (        forth.asm):03015                 subb    #'0             Minimal ASCII value condition met?
                      (        forth.asm):03016                 blo     @cvoor          No. Out of range. ,X cannot be a valid digit
                      (        forth.asm):03017                 cmpb    #10
                      (        forth.asm):03018                 blo     @cvnolt         No letter in potential BASE
                      (        forth.asm):03019                 IFEQ    CSSNTVE
                      (        forth.asm):03020                 cmpb    #'A-'0
                      (        forth.asm):03021                 blo     @cvoor          Greater than 9 but lower than A
                      (        forth.asm):03022                 cmpb    #'a-'0
                      (        forth.asm):03023                 blo     @cvisuc         Upper case already
                      (        forth.asm):03024                 cmpb    #'z-'0
                      (        forth.asm):03025                 bhi     @cvoor          Definitely out of range
                      (        forth.asm):03026                 subb    #'a-'A          To upper case
                      (        forth.asm):03027                 ENDC                    CSSNTVE
F4F2                  (        forth.asm):03028         @cvisuc subb    #'A-':          A-Z to number
F4F2                  (        forth.asm):03029         @cvnolt cmpb    UBASE+1         B has a digit. Make sure it's less than BASE
                      (        forth.asm):03030                 bhs     @cvoor          Number under scrutiny is >= BASE
                      (        forth.asm):03031                 leas    -8,s            Allocate scratch space
                      (        forth.asm):03032                 clra
                      (        forth.asm):03033                 pshs    d
                      (        forth.asm):03034         * System and user stack structures are as follows:
                      (        forth.asm):03035         * ,s    current digit (1 cell)
                      (        forth.asm):03036         * 2,s   D0*B (1 cell)
                      (        forth.asm):03037         * 4,s   D1*B (1 cell)
                      (        forth.asm):03038         * 6,s   D2*B (1 cell)
                      (        forth.asm):03039         * 8,s   D3*B (1 cell)
                      (        forth.asm):03040         * 2,u   D1H most significant cell
                      (        forth.asm):03041         * 4,u   D1L least significant cell
                      (        forth.asm):03042                 tfr     u,v             Backup U
                      (        forth.asm):03043                 leau    6,u             Point one byte after D1LL
                      (        forth.asm):03044                 leay    2,s             Point to D0*B
                      (        forth.asm):03045                 lde     #4              Four products to go through
F4F2                  (        forth.asm):03046         @cvmul  lda     ,-u
                      (        forth.asm):03047                 ldb     UBASE+1
                      (        forth.asm):03048                 mul
                      (        forth.asm):03049                 std     ,y++
                      (        forth.asm):03050                 dece
                      (        forth.asm):03051                 bne     @cvmul
                      (        forth.asm):03052                 tfr     v,u             Restore U
                      (        forth.asm):03053                 lda     3,s
                      (        forth.asm):03054                 sta     5,u             D1LL
                      (        forth.asm):03055                 lda     2,s
                      (        forth.asm):03056                 adda    5,s
                      (        forth.asm):03057                 sta     4,u             D1LH
                      (        forth.asm):03058                 lda     4,s
                      (        forth.asm):03059                 adca    7,s
                      (        forth.asm):03060                 sta     3,u             D1HL
                      (        forth.asm):03061                 lda     6,s
                      (        forth.asm):03062                 adca    9,s
                      (        forth.asm):03063                 sta     2,u             D1HH
                      (        forth.asm):03064                 ldd     4,u             D1L
                      (        forth.asm):03065                 addd    ,s              DIGIT
                      (        forth.asm):03066                 std     4,u
                      (        forth.asm):03067                 ldd     2,u             D1H
                      (        forth.asm):03068                 adcd    #0              Potential carry from lower cell
                      (        forth.asm):03069                 std     2,u
                      (        forth.asm):03070                 leas    10,s            Release scratch space
                      (        forth.asm):03071                 bra     @cvloop         Here we go again
F4F2                  (        forth.asm):03072         @cvoor  stx     ,u              Update ADDR2
                      (        forth.asm):03073                 rts
                      (        forth.asm):03074                 ENDC                    HVCONV
                      (        forth.asm):03075         
F4F2 02               (        forth.asm):03076         CVTE    fcb     2
F4F3 233E             (        forth.asm):03077                 fcc     '#>'
                      (        forth.asm):03078                 IFNE    HVCONV
                      (        forth.asm):03079                 fdb     CONVERT
                      (        forth.asm):03080                 ELSE
F4F5 F4DE             (        forth.asm):03081                 fdb     TWOFTCH
                      (        forth.asm):03082                 ENDC                    HVCONV
F4F7 C7               (        forth.asm):03083                 RFCS
F4F8 BDE831           (        forth.asm):03084 (7)             jsr     NPOP
F4FB BDE831           (        forth.asm):03085 (7)             jsr     NPOP            Drop 2 cells from the data stack
F4FE 8E0185           (        forth.asm):03086 (3)             ldx     #PADBUF
F501 3610             (        forth.asm):03087                 UCNPUSH
F503 BDE27D           (        forth.asm):03088 (7)             jsr     SLEN
F506 1F61             (        forth.asm):03089 (4)             tfr     w,x
F508 3610             (        forth.asm):03090                 UCNPUSH
F50A 39               (        forth.asm):03091 (4)             rts
                      (        forth.asm):03092         
F50B 04               (        forth.asm):03093         SIGN    fcb     4
F50C 5349474E         (        forth.asm):03094                 fcc     'SIGN'
F510 F4F2             (        forth.asm):03095                 fdb     CVTE
F512 C7               (        forth.asm):03096                 RFCS
F513 BDE831           (        forth.asm):03097 (7)             jsr     NPOP
F516 1F10             (        forth.asm):03098 (4)             tfr     x,d
F518 104D             (        forth.asm):03099 (2)             tstd
F51A 2C05             (        forth.asm):03100 (3)             bge     @sign1
F51C C62D             (        forth.asm):03101 (2)             ldb     #'-
F51E 7EF5DB           (        forth.asm):03102 (3)             jmp     INSBPAD
F521 39               (        forth.asm):03103 (4)     @sign1  rts
                      (        forth.asm):03104         
F522 04               (        forth.asm):03105         HOLD    fcb     4
F523 484F4C44         (        forth.asm):03106                 fcc     'HOLD'
F527 F50B             (        forth.asm):03107                 fdb     SIGN
F529 C7               (        forth.asm):03108                 RFCS
F52A BDE831           (        forth.asm):03109 (7)             jsr     NPOP
F52D 1F10             (        forth.asm):03110 (4)             tfr     x,d
F52F 7EF5DB           (        forth.asm):03111 (3)             jmp     INSBPAD         B is inserted at the beginning of PAD.
                      (        forth.asm):03112         
F532 02               (        forth.asm):03113         SHARPS  fcb     2
F533 2353             (        forth.asm):03114                 fcc     '#S'
F535 F522             (        forth.asm):03115                 fdb     HOLD
F537 C7               (        forth.asm):03116                 RFCS
F538 8601             (        forth.asm):03117 (2)             lda     #1
F53A 9736             (        forth.asm):03118 (3)             sta     CVTFCN          CVT function #1 is #S
F53C 2007             (        forth.asm):03119 (3)             bra     CVT0
                      (        forth.asm):03120         
                      (        forth.asm):03121         * Unsigned double on the top of the data stack gets divided by BASE.
                      (        forth.asm):03122         * The division algorithm implemented here is the binary long division.
                      (        forth.asm):03123         * See https://en.wikipedia.org/wiki/Division_algorithm for more information.
                      (        forth.asm):03124         * Remainder (converted to a character) gets prepended to PAD.
F53E 01               (        forth.asm):03125         CVT     fcb     1
F53F 23               (        forth.asm):03126                 fcc     '#'
F540 F532             (        forth.asm):03127                 fdb     SHARPS
F542 C7               (        forth.asm):03128                 RFCS
F543 0F36             (        forth.asm):03129 (5)             clr     CVTFCN          CVT function 0 is #
F545 BDE831           (        forth.asm):03130 (7)     CVT0    jsr     NPOP
F548 1F16             (        forth.asm):03131 (4)             tfr     x,w
F54A BDE831           (        forth.asm):03132 (7)             jsr     NPOP
F54D 3410             (        forth.asm):03133 (4+2)   CVT1    pshs    x               Numerator least significant cell
F54F 1038             (        forth.asm):03134 (6)             pshsw                   Numerator most significant cell
F551 104F             (        forth.asm):03135 (2)             clrd
F553 3406             (        forth.asm):03136 (4+2)           pshs    d               Quotient low
F555 3406             (        forth.asm):03137 (4+2)           pshs    d               Quotient high
F557 3406             (        forth.asm):03138 (4+2)           pshs    d               Bitmask low
F559 10868000         (        forth.asm):03139 (4)             ldw     #$8000          Bitmask high
F55D 1038             (        forth.asm):03140 (6)             pshsw
F55F 3406             (        forth.asm):03141 (4+2)           pshs    d
                      (        forth.asm):03142         * Stack structure:
                      (        forth.asm):03143         * 1,s   remainder               8 bits (high order byte is zero and unused)
                      (        forth.asm):03144         * 2,s   Bitmask high            16 bits
                      (        forth.asm):03145         * 4,s   Bitmask low             16 bits
                      (        forth.asm):03146         * 6,s   Quotient high           16 bits
                      (        forth.asm):03147         * 8,s   Quotient low            16 bits
                      (        forth.asm):03148         * 10,s  Numerator high          16 bits
                      (        forth.asm):03149         * 12,s  Numerator low           16 bits
                      (        forth.asm):03150         * Denominator is at UBASE+1     8 bits
F561 11C61F           (        forth.asm):03151 (3)             ldf     #31             32 bits to go
F564 6861             (        forth.asm):03152 (6+1)   @cvt1   lsl     1,s             R := R << 1
                      (        forth.asm):03153         * We need to extract bit <f> from the numerator.
F566 306A             (        forth.asm):03154 (4+1)           leax    10,s            Numerator MSB address
F568 1FF8             (        forth.asm):03155 (4)             tfr     f,a             Not to alter the stack structure
F56A 44               (        forth.asm):03156 (1)             lsra                    OffsetX: 3 - F >> 3
F56B 44               (        forth.asm):03157 (1)             lsra
F56C 44               (        forth.asm):03158 (1)             lsra
F56D C603             (        forth.asm):03159 (2)             ldb     #3
F56F 103289           (        forth.asm):03160 (4)             subr    a,b
F572 3A               (        forth.asm):03161 (1)             abx
F573 A684             (        forth.asm):03162 (4+0)           lda     ,x
F575 1FF9             (        forth.asm):03163 (4)             tfr     f,b             Bitno: F & 7
F577 C407             (        forth.asm):03164 (2)             andb    #7
                      (        forth.asm):03165         * At this point, A has the data we're interested in. B has the bit number.
F579 5D               (        forth.asm):03166 (1)     @cvtex  tstb
F57A 2704             (        forth.asm):03167 (3)             beq     @cvtfnd         Bit 0 of A has the data
F57C 44               (        forth.asm):03168 (1)             lsra
F57D 5A               (        forth.asm):03169 (1)             decb
F57E 20F9             (        forth.asm):03170 (3)             bra     @cvtex
F580 8401             (        forth.asm):03171 (2)     @cvtfnd anda    #1
F582 AA61             (        forth.asm):03172 (4+1)           ora     1,s             R(0) := N(i)
F584 A761             (        forth.asm):03173 (4+1)           sta     1,s             Update the remainder
F586 911F             (        forth.asm):03174 (3)             cmpa    UBASE+1
F588 2512             (        forth.asm):03175 (3)             blo     @cvt5
F58A 901F             (        forth.asm):03176 (3)             suba    UBASE+1
F58C A761             (        forth.asm):03177 (4+1)           sta     1,s             R := R - D
                      (        forth.asm):03178         * Q(i) := 1 (use the bitmask).
F58E EC66             (        forth.asm):03179 (5+1)           ldd     6,s             Quotient high
F590 10AA62           (        forth.asm):03180 (6+1)           ord     2,s             Bitmask high
F593 ED66             (        forth.asm):03181 (5+1)           std     6,s
F595 EC68             (        forth.asm):03182 (5+1)           ldd     8,s             Quotient low
F597 10AA64           (        forth.asm):03183 (6+1)           ord     4,s             Bitmask low
F59A ED68             (        forth.asm):03184 (5+1)           std     8,s
                      (        forth.asm):03185         * Shift the bitmask 1 bit right.
F59C EC62             (        forth.asm):03186 (5+1)   @cvt5   ldd     2,s
F59E 1044             (        forth.asm):03187 (2)             lsrd
F5A0 ED62             (        forth.asm):03188 (5+1)           std     2,s
F5A2 EC64             (        forth.asm):03189 (5+1)           ldd     4,s
F5A4 1046             (        forth.asm):03190 (2)             rord
F5A6 ED64             (        forth.asm):03191 (5+1)           std     4,s
F5A8 115A             (        forth.asm):03192 (2)             decf
F5AA 2CB8             (        forth.asm):03193 (3)             bge     @cvt1
                      (        forth.asm):03194         * Convert the remainder to a digit expressed in BASE.
F5AC E661             (        forth.asm):03195 (4+1)           ldb     1,s
F5AE 8630             (        forth.asm):03196 (2)             lda     #'0
F5B0 C10A             (        forth.asm):03197 (2)             cmpb    #10             B has the digit we want converted to BASE
F5B2 2502             (        forth.asm):03198 (3)             bcs     @cvtdgt
F5B4 8637             (        forth.asm):03199 (2)             lda     #'A-10
F5B6 103089           (        forth.asm):03200 (4)     @cvtdgt addr    a,b
F5B9 8D20             (        forth.asm):03201 (6)             bsr     INSBPAD         Prepend B to the string currently in PAD
F5BB 0D36             (        forth.asm):03202 (4)             tst     CVTFCN
F5BD 2711             (        forth.asm):03203 (3)             beq     @cvtend         Function 0 is straight #, i.e. we're done here
                      (        forth.asm):03204         * Function 1 is #S, we iterate unless the quotient is 0.
F5BF EC68             (        forth.asm):03205 (5+1)           ldd     8,s
F5C1 10AA66           (        forth.asm):03206 (6+1)           ord     6,s
F5C4 270A             (        forth.asm):03207 (3)             beq     @cvtend
F5C6 AE68             (        forth.asm):03208 (5+1)           ldx     8,s             New numerator low
F5C8 10A666           (        forth.asm):03209 (6+1)           ldw     6,s             New numerator high
F5CB 326E             (        forth.asm):03210 (4+1)           leas    14,s            Discard the stack frame
F5CD 7EF54D           (        forth.asm):03211 (3)             jmp     CVT1            And go at it again
                      (        forth.asm):03212         * Push back the quotient on the data stack (low then high cell).
F5D0 AE68             (        forth.asm):03213 (5+1)   @cvtend ldx     8,s
F5D2 3610             (        forth.asm):03214                 UCNPUSH
F5D4 AE66             (        forth.asm):03215 (5+1)           ldx     6,s
F5D6 326E             (        forth.asm):03216 (4+1)           leas    14,s            Discard the stack frame
F5D8 3610             (        forth.asm):03217                 UCNPUSH
F5DA 39               (        forth.asm):03218 (4)             rts
                      (        forth.asm):03219         
                      (        forth.asm):03220         * Insert the character in B in front of the string at PADBUF.
F5DB 8E0185           (        forth.asm):03221 (3)     INSBPAD ldx     #PADBUF
F5DE BDE27D           (        forth.asm):03222 (7)             jsr     SLEN
F5E1 103061           (        forth.asm):03223 (4)             addr    w,x             X points to the PAD string's NUL terminator
F5E4 105C             (        forth.asm):03224 (2)             incw                    Include the terminator
F5E6 3101             (        forth.asm):03225 (4+1)           leay    1,x
F5E8 113912           (        forth.asm):03226 (6+?)           tfm     x-,y-
F5EB D785             (        forth.asm):03227 (3)             stb     PADBUF
F5ED 39               (        forth.asm):03228 (4)             rts
                      (        forth.asm):03229         
F5EE 02               (        forth.asm):03230         CVTB    fcb     2
F5EF 3C23             (        forth.asm):03231                 fcc     '<#'
F5F1 F53E             (        forth.asm):03232                 fdb     CVT
F5F3 C7               (        forth.asm):03233                 RFCS
F5F4 BDE41A           (        forth.asm):03234 (7)             jsr     CKBASE          Sanity check. BASE can be altered at any time
F5F7 0F85             (        forth.asm):03235 (5)             clr     PADBUF
F5F9 39               (        forth.asm):03236 (4)             rts
                      (        forth.asm):03237         
F5FA 01               (        forth.asm):03238         DOT     fcb     1               79-STANDARD (REQ193)
F5FB 2E               (        forth.asm):03239                 fcc     '.'
F5FC F5EE             (        forth.asm):03240                 fdb     CVTB
F5FE C7               (        forth.asm):03241                 RFCS
F5FF 8601             (        forth.asm):03242 (2)             lda     #1
F601 9738             (        forth.asm):03243 (3)             sta     CVISSGN         Force a signed number conversion
F603 BDE831           (        forth.asm):03244 (7)     PTOP0   jsr     NPOP
F606 BDE483           (        forth.asm):03245 (7)             jsr     CVNSTR
F609 8E03EA           (        forth.asm):03246 (3)             ldx     #TBUFF
F60C 8620             (        forth.asm):03247 (2)             lda     #SP
F60E A180             (        forth.asm):03248 (4+1)   @ptop1  cmpa    ,x+             Skip leading spaces
F610 27FC             (        forth.asm):03249 (3)             beq     @ptop1
F612 301F             (        forth.asm):03250 (4+1)           leax    -1,x            Point to actual string start address
F614 BDE332           (        forth.asm):03251 (7)             jsr     PUTS
F617 7EE31F           (        forth.asm):03252 (3)             jmp     PUTCH           Extra space after printing a number
                      (        forth.asm):03253         
F61A 02               (        forth.asm):03254         UDOT    fcb     2               79-STANDARD (REQ106)
F61B 552E             (        forth.asm):03255                 fcc     'U.'
F61D F5FA             (        forth.asm):03256                 fdb     DOT
F61F C7               (        forth.asm):03257                 RFCS
F620 0F38             (        forth.asm):03258 (5)             clr     CVISSGN         Conversion is unsigned
F622 20DF             (        forth.asm):03259 (3)             bra     PTOP0
                      (        forth.asm):03260         
F624 02               (        forth.asm):03261         DOTR    fcb     2               79-STANDARD (REF)
F625 2E52             (        forth.asm):03262                 fcc     '.R'
F627 F61A             (        forth.asm):03263                 fdb     UDOT
F629 C7               (        forth.asm):03264                 RFCS
F62A 8601             (        forth.asm):03265 (2)             lda     #1
F62C 9738             (        forth.asm):03266 (3)             sta     CVISSGN
F62E BDE831           (        forth.asm):03267 (7)     DOTR0   jsr     NPOP
F631 3410             (        forth.asm):03268 (4+2)           pshs    x               Length parameter value
F633 BDE831           (        forth.asm):03269 (7)             jsr     NPOP
F636 BDE483           (        forth.asm):03270 (7)             jsr     CVNSTR
F639 8E03EA           (        forth.asm):03271 (3)             ldx     #TBUFF
F63C 8620             (        forth.asm):03272 (2)             lda     #SP
F63E A180             (        forth.asm):03273 (4+1)   @dotr1  cmpa    ,x+
F640 27FC             (        forth.asm):03274 (3)             beq     @dotr1          Skip leading spaces
F642 301F             (        forth.asm):03275 (4+1)           leax    -1,x
F644 BDE27D           (        forth.asm):03276 (7)             jsr     SLEN            String length is returned in W
F647 3506             (        forth.asm):03277 (4+2)           puls    d
F649 1E06             (        forth.asm):03278 (5)             exg     d,w
F64B 103206           (        forth.asm):03279 (4)             subr    d,w
F64E 2F0D             (        forth.asm):03280 (3)             ble     @dotr3
F650 8620             (        forth.asm):03281 (2)             lda     #SP
F652 105D             (        forth.asm):03282 (2)     @dotr2  tstw
F654 2707             (        forth.asm):03283 (3)             beq     @dotr3
F656 BDE31F           (        forth.asm):03284 (7)             jsr     PUTCH
F659 105A             (        forth.asm):03285 (2)             decw
F65B 20F5             (        forth.asm):03286 (3)             bra     @dotr2
F65D 7EE332           (        forth.asm):03287 (3)     @dotr3  jmp     PUTS
                      (        forth.asm):03288         
F660 03               (        forth.asm):03289         UDOTR   fcb     3               79-STANDARD (REF216)
F661 552E52           (        forth.asm):03290                 fcc     'U.R'
F664 F624             (        forth.asm):03291                 fdb     DOTR
F666 C7               (        forth.asm):03292                 RFCS
F667 0F38             (        forth.asm):03293 (5)             clr     CVISSGN
F669 20C3             (        forth.asm):03294 (3)             bra     DOTR0
                      (        forth.asm):03295         
F66B 02               (        forth.asm):03296         BL      fcb     2               79-STANDARD (REF176)
F66C 424C             (        forth.asm):03297                 fcc     'BL'
F66E F660             (        forth.asm):03298                 fdb     UDOTR
F670 C7               (        forth.asm):03299                 RFCS
F671 8E0020           (        forth.asm):03300 (3)             ldx     #SP
F674 7EE823           (        forth.asm):03301 (3)             jmp     NPUSH
                      (        forth.asm):03302         
F677 05               (        forth.asm):03303         SPACE   fcb     5               79-STANDARD (REQ232)
F678 5350414345       (        forth.asm):03304                 fcc     'SPACE'
F67D F66B             (        forth.asm):03305                 fdb     BL
F67F C7               (        forth.asm):03306                 RFCS
F680 8620             (        forth.asm):03307 (2)             lda     #SP
F682 7EE31F           (        forth.asm):03308 (3)             jmp     PUTCH
                      (        forth.asm):03309         
F685 06               (        forth.asm):03310         SPACES  fcb     6               79-STANDARD (REQ231)
F686 535041434553     (        forth.asm):03311                 fcc     'SPACES'
F68C F677             (        forth.asm):03312                 fdb     SPACE
F68E C7               (        forth.asm):03313                 RFCS
F68F BDE831           (        forth.asm):03314 (7)             jsr     NPOP
F692 1F16             (        forth.asm):03315 (4)             tfr     x,w
F694 105D             (        forth.asm):03316 (2)             tstw
F696 2709             (        forth.asm):03317 (3)             beq     @spcs2
F698 8620             (        forth.asm):03318 (2)             lda     #SP
F69A BDE31F           (        forth.asm):03319 (7)     @spcs1  jsr     PUTCH
F69D 105A             (        forth.asm):03320 (2)             decw
F69F 26F9             (        forth.asm):03321 (3)             bne     @spcs1
F6A1 39               (        forth.asm):03322 (4)     @spcs2  rts
                      (        forth.asm):03323         
F6A2 04               (        forth.asm):03324         PAGE    fcb     4               79-STANDARD (REF)
F6A3 50414745         (        forth.asm):03325                 fcc     'PAGE'
F6A7 F685             (        forth.asm):03326                 fdb     SPACES
F6A9 C7               (        forth.asm):03327                 RFCS
F6AA 8EFDAE           (        forth.asm):03328 (3)             ldx     #CSVT100
F6AD 7EE332           (        forth.asm):03329 (3)             jmp     PUTS
                      (        forth.asm):03330         
F6B0 02               (        forth.asm):03331         CRLF    fcb     2               79-STANDARD (REQ160)
F6B1 4352             (        forth.asm):03332                 fcc     'CR'
F6B3 F6A2             (        forth.asm):03333                 fdb     PAGE
F6B5 C7               (        forth.asm):03334                 RFCS
F6B6 7EE33F           (        forth.asm):03335 (3)             jmp     PUTCR
                      (        forth.asm):03336         
F6B9 03               (        forth.asm):03337         PAD     fcb     3               79-STANDARD (REQ226)
F6BA 504144           (        forth.asm):03338                 fcc     'PAD'
F6BD F6B0             (        forth.asm):03339                 fdb     CRLF
F6BF C7               (        forth.asm):03340                 RFCS
F6C0 8E0185           (        forth.asm):03341 (3)             ldx     #PADBUF
F6C3 7EE823           (        forth.asm):03342 (3)             jmp     NPUSH
                      (        forth.asm):03343         
F6C6 04               (        forth.asm):03344         TYPE    fcb     4               79-STANDARD (REQ222)
F6C7 54595045         (        forth.asm):03345                 fcc     'TYPE'          ( addr bcount -- )
F6CB F6B9             (        forth.asm):03346                 fdb     PAD
F6CD C7               (        forth.asm):03347                 RFCS
F6CE BDE831           (        forth.asm):03348 (7)             jsr     NPOP            Character count (signed)
F6D1 1F16             (        forth.asm):03349 (4)             tfr     x,w
F6D3 BDE831           (        forth.asm):03350 (7)             jsr     NPOP            Buffer address
F6D6 105D             (        forth.asm):03351 (2)             tstw                    
F6D8 2E01             (        forth.asm):03352 (3)     @type0  bgt     @type1
F6DA 39               (        forth.asm):03353 (4)             rts
F6DB A680             (        forth.asm):03354 (4+1)   @type1  lda     ,x+
F6DD BDE31F           (        forth.asm):03355 (7)             jsr     PUTCH
F6E0 105A             (        forth.asm):03356 (2)             decw
F6E2 20F4             (        forth.asm):03357 (3)             bra     @type0
                      (        forth.asm):03358         
F6E4 05               (        forth.asm):03359         COUNT   fcb     5               79-STANDARD (REQ159)
F6E5 434F554E54       (        forth.asm):03360                 fcc     'COUNT'
F6EA F6C6             (        forth.asm):03361                 fdb     TYPE
F6EC C7               (        forth.asm):03362                 RFCS
F6ED BDE831           (        forth.asm):03363 (7)             jsr     NPOP
F6F0 E680             (        forth.asm):03364 (4+1)           ldb     ,x+
F6F2 3610             (        forth.asm):03365                 UCNPUSH                 B is preserved
F6F4 4F               (        forth.asm):03366 (1)             clra
F6F5 1F01             (        forth.asm):03367 (4)             tfr     d,x
F6F7 7EE823           (        forth.asm):03368 (3)             jmp     NPUSH
                      (        forth.asm):03369         
F6FA 09               (        forth.asm):03370         DASHTR  fcb     9               79-STANDARD (REQ148)
F6FB 2D545241494C494E (        forth.asm):03371                 fcc     '-TRAILING'     ( addr n1 -- addr n2 )
     47
F704 F6E4             (        forth.asm):03372                 fdb     COUNT
F706 C7               (        forth.asm):03373                 RFCS
F707 BDE831           (        forth.asm):03374 (7)             jsr     NPOP            N1 to X
F70A 1F10             (        forth.asm):03375 (4)             tfr     x,d             N1 to D
F70C BDE831           (        forth.asm):03376 (7)             jsr     NPOP            ADDR to X
F70F 1F12             (        forth.asm):03377 (4)             tfr     x,y             Backup to I
F711 104D             (        forth.asm):03378 (2)             tstd                    Input character count (N1)
F713 2D1B             (        forth.asm):03379 (3)             blt     @invpar         Cannot be < 0
F715 308B             (        forth.asm):03380 (4+2)           leax    d,x             X has ADDR+N1
F717 1F06             (        forth.asm):03381 (4)             tfr     d,w             W has N1
F719 105D             (        forth.asm):03382 (2)     @cknxtb tstw
F71B 270A             (        forth.asm):03383 (3)             beq     @ckdone
F71D A682             (        forth.asm):03384 (4+1)           lda     ,-x
F71F 105A             (        forth.asm):03385 (2)             decw
F721 8120             (        forth.asm):03386 (2)             cmpa    #SP
F723 27F4             (        forth.asm):03387 (3)             beq     @cknxtb         Iterate over to the previous byte
F725 105C             (        forth.asm):03388 (2)             incw
F727 1F21             (        forth.asm):03389 (4)     @ckdone tfr     y,x
F729 3610             (        forth.asm):03390                 UCNPUSH                 String base address
F72B 1F61             (        forth.asm):03391 (4)             tfr     w,x
F72D 3610             (        forth.asm):03392                 UCNPUSH                 Updated character count
F72F 39               (        forth.asm):03393 (4)             rts
F730 C60D             (        forth.asm):03394 (2)     @invpar ldb     #13             Invalid parameter
F732 BDE7A2           (        forth.asm):03395 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):03396         
F735 06               (        forth.asm):03397         EXPECT  fcb     6               79-STANDARD (REQ189)
F736 455850454354     (        forth.asm):03398                 fcc     'EXPECT'        ( addr count -- )
F73C F6FA             (        forth.asm):03399                 fdb     DASHTR
F73E C7               (        forth.asm):03400                 RFCS
F73F BDE831           (        forth.asm):03401 (7)     EXPCT1  jsr     NPOP
F742 1F10             (        forth.asm):03402 (4)             tfr     x,d             Buffer length to B
F744 BDE831           (        forth.asm):03403 (7)             jsr     NPOP            Buffer address to X. B is preserved
F747 5D               (        forth.asm):03404 (1)             tstb
F748 2701             (        forth.asm):03405 (3)             beq     @expct1
F74A 5C               (        forth.asm):03406 (1)             incb                    Account for the NUL terminator
F74B 7EE355           (        forth.asm):03407 (3)     @expct1 jmp     GETS
                      (        forth.asm):03408         
F74E 06               (        forth.asm):03409         ACCEPT  fcb     6               ANSI (Core)
F74F 414343455054     (        forth.asm):03410                 fcc     'ACCEPT'
F755 F735             (        forth.asm):03411                 fdb     EXPECT
F757 C7               (        forth.asm):03412                 RFCS
F758 8DE5             (        forth.asm):03413 (6)             bsr     EXPCT1
F75A 4F               (        forth.asm):03414 (1)             clra
F75B 3606             (        forth.asm):03415 (4+2)           pshu    d               This saves us "tfr d,x" and "UCNPUSH"
F75D 39               (        forth.asm):03416 (4)             rts
                      (        forth.asm):03417         
F75E 49               (        forth.asm):03418         TERPRET fcb     $49             79-STANDARD (REF) I make this compile time only
F75F 494E544552505245 (        forth.asm):03419                 fcc     'INTERPRET'     ( -- )
     54
F768 F74E             (        forth.asm):03420                 fdb     ACCEPT
F76A C7               (        forth.asm):03421                 RFCS
                      (        forth.asm):03422         * Obtain a base buffer address based on the value of BLK.
F76B DC24             (        forth.asm):03423 (4)             ldd     UBLK
F76D 2605             (        forth.asm):03424 (3)             bne     @notser
F76F 8E0316           (        forth.asm):03425 (3)             ldx     #CMDBUF         Base buffer address for serial line input
F772 200A             (        forth.asm):03426 (3)             bra     @rsolvd
                      (        forth.asm):03427         * BLK is NZ, map the block in memory.
F774 1F01             (        forth.asm):03428 (4)     @notser tfr     d,x             Block number to X
F776 BDE823           (        forth.asm):03429 (7)             jsr     NPUSH
F779 BDEA89           (        forth.asm):03430                 RFXT    jsr,BLOCK+8     XT for BLOCK. Map the block in
F77C 3710             (        forth.asm):03431                 UCNPOP                  Retrieve buffer address (to X)
                      (        forth.asm):03432         * Note: >IN is supposed to have been set by the caller!
F77E 9F1C             (        forth.asm):03433 (4)     @rsolvd stx     BSBFADR
F780 DC22             (        forth.asm):03434 (4)             ldd     UTOIN
F782 103001           (        forth.asm):03435 (4)             addr    d,x
F785 7EE0CA           (        forth.asm):03436 (3)             jmp     _INTERP         Finally invoke _INTERP.
                      (        forth.asm):03437         
F788 04               (        forth.asm):03438         LOAD    fcb     4               79-STANDARD (REQ202)
F789 4C4F4144         (        forth.asm):03439                 fcc     'LOAD'          ( blk -- )
F78D F75E             (        forth.asm):03440                 fdb     TERPRET
F78F C7               (        forth.asm):03441                 RFCS
F790 BDE831           (        forth.asm):03442 (7)             jsr     NPOP
F793 1037C1           (        forth.asm):03443 (4)             cmpr    0,x
F796 2601             (        forth.asm):03444 (3)             bne     LOAD1
F798 39               (        forth.asm):03445 (4)             rts                     Block 0 is _not_ loadable
F799 3410             (        forth.asm):03446 (4+2)   LOAD1   pshs    x
F79B 9E24             (        forth.asm):03447 (4)             ldx     UBLK
F79D BDE840           (        forth.asm):03448 (7)             jsr     RPUSH           Push BLK on the return stack
F7A0 9E22             (        forth.asm):03449 (4)             ldx     UTOIN
F7A2 BDE840           (        forth.asm):03450 (7)             jsr     RPUSH           Push >IN on the return stack
F7A5 3510             (        forth.asm):03451 (4+2)           puls    x
F7A7 9F24             (        forth.asm):03452 (4)             stx     UBLK            Update BLK with the LOAD argument
F7A9 104F             (        forth.asm):03453 (2)             clrd
F7AB DD22             (        forth.asm):03454 (4)             std     UTOIN           Clear >IN
                      (        forth.asm):03455         * Map the new BLK in, interpret code from there.
F7AD 8DBC             (        forth.asm):03456                 RFXT    bsr,TERPRET+12  XT for INTERPRET
F7AF BDE85E           (        forth.asm):03457 (7)             jsr     RPOP
F7B2 9F22             (        forth.asm):03458 (4)             stx     UTOIN           Restore >IN from the return stack
F7B4 BDE85E           (        forth.asm):03459 (7)             jsr     RPOP
F7B7 9F24             (        forth.asm):03460 (4)             stx     UBLK            Restore BLK from the return stack
F7B9 7EE877           (        forth.asm):03461 (3)             jmp     BKIN2PT         Map BLK in (if needed) and update BSBFADR
                      (        forth.asm):03462         
F7BC 04               (        forth.asm):03463         THRU    fcb     4               79-STANDARD (REF)
F7BD 54485255         (        forth.asm):03464                 fcc     'THRU'          ( lowblk highblk -- )
F7C1 F788             (        forth.asm):03465                 fdb     LOAD
F7C3 C7               (        forth.asm):03466                 RFCS
F7C4 BDE831           (        forth.asm):03467 (7)             jsr     NPOP
F7C7 1F12             (        forth.asm):03468 (4)             tfr     x,y             Y has highblk
F7C9 BDE831           (        forth.asm):03469 (7)             jsr     NPOP            X has lowblk--both are unsigned numbers
F7CC 103712           (        forth.asm):03470 (4)     @thrlop cmpr    x,y
F7CF 2401             (        forth.asm):03471 (3)             bhs     @cont           Limit is >= to the loop index
F7D1 39               (        forth.asm):03472 (4)             rts
F7D2 3430             (        forth.asm):03473 (4+4)   @cont   pshs    x,y             Backup loop parameters
F7D4 3610             (        forth.asm):03474                 UCNPUSH                 Current block number to the data stack
F7D6 8DB8             (        forth.asm):03475                 RFXT    bsr,LOAD+7      XT for LOAD
F7D8 3530             (        forth.asm):03476 (4+4)           puls    y,x             Retrieve loop parameters
F7DA 3001             (        forth.asm):03477 (4+1)           leax    1,x             Iterate over to the next screen
F7DC 20EE             (        forth.asm):03478 (3)             bra     @thrlop
                      (        forth.asm):03479         
F7DE 83               (        forth.asm):03480         NXTBLK  fcb     $83             79-STANDARD (REF131)
F7DF 2D2D3E           (        forth.asm):03481                 fcc     '-->'           ( -- )
F7E2 F7BC             (        forth.asm):03482                 fdb     THRU
F7E4 C7               (        forth.asm):03483                 RFCS
F7E5 9E24             (        forth.asm):03484 (4)             ldx     UBLK
F7E7 3001             (        forth.asm):03485 (4+1)           leax    1,x
F7E9 DC24             (        forth.asm):03486 (4)     NXTBLK1 ldd     UBLK
F7EB 2603             (        forth.asm):03487 (3)             bne     @nfrmb0         Not invoked from block 0 (the console)
                      (        forth.asm):03488         * --> or CONTINUED are being invoked from the console. Flag that condition
                      (        forth.asm):03489         * as a hint to the interpreter so that feedback is provided even if we are
                      (        forth.asm):03490         * back from a block.
F7ED 4C               (        forth.asm):03491 (1)             inca                    1 to A
F7EE 973C             (        forth.asm):03492 (3)             sta     NBCTFB0
F7F0 9F24             (        forth.asm):03493 (4)     @nfrmb0 stx     UBLK            Update BLK
F7F2 104F             (        forth.asm):03494 (2)             clrd
F7F4 DD22             (        forth.asm):03495 (4)             std     UTOIN           0 >IN !
                      (        forth.asm):03496         * Map the new BLK in, interpret code from there.
F7F6 7EF76B           (        forth.asm):03497                 RFXT    jmp,TERPRET+12  XT for INTERPRET
                      (        forth.asm):03498         
F7F9 89               (        forth.asm):03499         CONTIND fcb     $89             79-STANDARD (REF)
F7FA 434F4E54494E5545 (        forth.asm):03500                 fcc     'CONTINUED'     ( nextblk -- )
     44
F803 F7DE             (        forth.asm):03501                 fdb     NXTBLK
F805 C7               (        forth.asm):03502                 RFCS
F806 BDE831           (        forth.asm):03503 (7)             jsr     NPOP            NEXTBLK to X
F809 1037C1           (        forth.asm):03504 (4)             cmpr    0,x             Cannot interpret from block 0!
F80C 26DB             (        forth.asm):03505 (3)             bne     NXTBLK1
F80E C60D             (        forth.asm):03506 (2)             ldb     #13             Illegal argument
F810 BDE7A2           (        forth.asm):03507 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):03508         
F813 02               (        forth.asm):03509         MILLIS  fcb     2               79-STANDARD (REF)
F814 4D53             (        forth.asm):03510                 fcc     'MS'            ( mscount -- )
F816 F7F9             (        forth.asm):03511                 fdb     CONTIND
F818 C7               (        forth.asm):03512                 RFCS
F819 BDE831           (        forth.asm):03513 (7)             jsr     NPOP
F81C 1037C1           (        forth.asm):03514 (4)             cmpr    0,x
F81F 2601             (        forth.asm):03515 (3)             bne     MILLIS1
F821 39               (        forth.asm):03516 (4)             rts
F822 CC031A           (        forth.asm):03517 (3)     MILLIS1 ldd     #MSLCNT
F825 104A             (        forth.asm):03518 (2)     @ms2    decd
F827 26FC             (        forth.asm):03519 (3)             bne     @ms2
F829 301F             (        forth.asm):03520 (4+1)           leax    -1,x
F82B 26F5             (        forth.asm):03521 (3)             bne     MILLIS1
F82D 39               (        forth.asm):03522 (4)             rts
                      (        forth.asm):03523         
F82E 04               (        forth.asm):03524         KEYP    fcb     4               ANSI (Facility)
F82F 4B45593F         (        forth.asm):03525                 fcc     'KEY?'          ( -- flag )
F833 F813             (        forth.asm):03526                 fdb     MILLIS
F835 C7               (        forth.asm):03527                 RFCS
F836 1FC1             (        forth.asm):03528 (4)             tfr     0,x
F838 0D43             (        forth.asm):03529 (4)             tst     SERBCNT
F83A 2702             (        forth.asm):03530 (3)             beq     @done
F83C 3001             (        forth.asm):03531 (4+1)           leax    1,x             Return the 79-STANDARD true flag
F83E 7EE823           (        forth.asm):03532 (3)     @done   jmp     NPUSH
                      (        forth.asm):03533         
F841 03               (        forth.asm):03534         KEY     fcb     3               79-STANDARD (REQ100)
F842 4B4559           (        forth.asm):03535                 fcc     'KEY'
F845 F82E             (        forth.asm):03536                 fdb     KEYP
F847 C7               (        forth.asm):03537                 RFCS
F848 BDE2F3           (        forth.asm):03538 (7)             jsr     GETCH
F84B 1F89             (        forth.asm):03539 (4)             tfr     a,b
F84D 4F               (        forth.asm):03540 (1)             clra
F84E 1F01             (        forth.asm):03541 (4)             tfr     d,x
F850 7EE823           (        forth.asm):03542 (3)             jmp     NPUSH
                      (        forth.asm):03543         
F853 04               (        forth.asm):03544         EMIT    fcb     4               79-STANDARD (REQ207)
F854 454D4954         (        forth.asm):03545                 fcc     'EMIT'
F858 F841             (        forth.asm):03546                 fdb     KEY
F85A C7               (        forth.asm):03547                 RFCS
F85B BDE831           (        forth.asm):03548 (7)             jsr     NPOP
F85E 1F10             (        forth.asm):03549 (4)             tfr     x,d
F860 1F98             (        forth.asm):03550 (4)             tfr     b,a
F862 7EE31F           (        forth.asm):03551 (3)             jmp     PUTCH
                      (        forth.asm):03552         
F865 01               (        forth.asm):03553         PLUS    fcb     1               79-STANDARD (REQ121)
F866 2B               (        forth.asm):03554                 fcc     '+'             ( n1 n2 -- sum )
F867 F853             (        forth.asm):03555                 fdb     EMIT
F869 C7               (        forth.asm):03556                 RFCS
F86A BDE4DC           (        forth.asm):03557 (7)             jsr     MIN2PST         We need at least two cells stacked up
F86D EC42             (        forth.asm):03558 (5+1)           ldd     2,u             N1
F86F E3C4             (        forth.asm):03559 (5+0)           addd    ,u              N2
F871 ED42             (        forth.asm):03560 (5+1)           std     2,u             SUM
F873 3342             (        forth.asm):03561 (4+1)           leau    2,u             Drop the top cell
F875 39               (        forth.asm):03562 (4)             rts
                      (        forth.asm):03563         
F876 02               (        forth.asm):03564         ONEP    fcb     2               79-STANDARD (REQ107)
F877 312B             (        forth.asm):03565                 fcc     '1+'
F879 F865             (        forth.asm):03566                 fdb     PLUS
F87B C7               (        forth.asm):03567                 RFCS
F87C BDE4D7           (        forth.asm):03568 (7)             jsr     MIN1PST         We need at least one cell stacked up
F87F ECC4             (        forth.asm):03569 (5+0)           ldd     ,u
F881 104C             (        forth.asm):03570 (2)             incd
F883 EDC4             (        forth.asm):03571 (5+0)           std     ,u
F885 39               (        forth.asm):03572 (4)             rts
                      (        forth.asm):03573         
F886 02               (        forth.asm):03574         TWOP    fcb     2               79-STANDARD (REQ135)
F887 322B             (        forth.asm):03575                 fcc     '2+'            ( n -- n+2 )
F889 F876             (        forth.asm):03576                 fdb     ONEP
F88B C7               (        forth.asm):03577                 RFCS
F88C BDE4D7           (        forth.asm):03578 (7)             jsr     MIN1PST         We need at least one cell stacked up
F88F ECC4             (        forth.asm):03579 (5+0)           ldd     ,u
F891 C30002           (        forth.asm):03580 (3)             addd    #2
F894 EDC4             (        forth.asm):03581 (5+0)           std     ,u
F896 39               (        forth.asm):03582 (4)             rts
                      (        forth.asm):03583         
F897 01               (        forth.asm):03584         MINUS   fcb     1               79-STANDARD (REQ134)
F898 2D               (        forth.asm):03585                 fcc     '-'             ( n1 n2 -- dif )
F899 F886             (        forth.asm):03586                 fdb     TWOP
F89B C7               (        forth.asm):03587                 RFCS
F89C BDE4DC           (        forth.asm):03588 (7)             jsr     MIN2PST         We need at least two cells stacked up
F89F EC42             (        forth.asm):03589 (5+1)           ldd     2,u             N1
F8A1 A3C4             (        forth.asm):03590 (5+0)           subd    ,u              N2
F8A3 ED42             (        forth.asm):03591 (5+1)           std     2,u             DIF
F8A5 3342             (        forth.asm):03592 (4+1)           leau    2,u             Drop the top cell
F8A7 39               (        forth.asm):03593 (4)             rts
                      (        forth.asm):03594         
F8A8 02               (        forth.asm):03595         ONEM    fcb     2               79-STANDARD (REQ105)
F8A9 312D             (        forth.asm):03596                 fcc     '1-'
F8AB F897             (        forth.asm):03597                 fdb     MINUS
F8AD C7               (        forth.asm):03598                 RFCS
F8AE BDE4D7           (        forth.asm):03599 (7)             jsr     MIN1PST         We need at least one cell stacked up
F8B1 ECC4             (        forth.asm):03600 (5+0)           ldd     ,u
F8B3 104A             (        forth.asm):03601 (2)             decd
F8B5 EDC4             (        forth.asm):03602 (5+0)           std     ,u
F8B7 39               (        forth.asm):03603 (4)             rts
                      (        forth.asm):03604         
F8B8 02               (        forth.asm):03605         TWOM    fcb     2               79-STANDARD (REQ129)
F8B9 322D             (        forth.asm):03606                 fcc     '2-'
F8BB F8A8             (        forth.asm):03607                 fdb     ONEM
F8BD C7               (        forth.asm):03608                 RFCS
F8BE BDE4D7           (        forth.asm):03609 (7)             jsr     MIN1PST         We need at least one cell stacked up
F8C1 ECC4             (        forth.asm):03610 (5+0)           ldd     ,u
F8C3 830002           (        forth.asm):03611 (3)             subd    #2
F8C6 EDC4             (        forth.asm):03612 (5+0)           std     ,u
F8C8 39               (        forth.asm):03613 (4)             rts
                      (        forth.asm):03614         
F8C9 01               (        forth.asm):03615         ZEROL   fcb     1               Non-standard
F8CA 30               (        forth.asm):03616                 fcc     '0'
F8CB F8B8             (        forth.asm):03617                 fdb     TWOM
F8CD C7               (        forth.asm):03618                 RFCS
F8CE 1FC1             (        forth.asm):03619 (4)             tfr     0,x
F8D0 7EE823           (        forth.asm):03620 (3)             jmp     NPUSH
                      (        forth.asm):03621         
F8D3 01               (        forth.asm):03622         ONEL    fcb     1               Non-standard
F8D4 31               (        forth.asm):03623                 fcc     '1'
F8D5 F8C9             (        forth.asm):03624                 fdb     ZEROL
F8D7 C7               (        forth.asm):03625                 RFCS
F8D8 8E0001           (        forth.asm):03626 (3)             ldx     #1
F8DB 7EE823           (        forth.asm):03627 (3)             jmp     NPUSH
                      (        forth.asm):03628         
F8DE 01               (        forth.asm):03629         TWOL    fcb     1               Non-standard
F8DF 32               (        forth.asm):03630                 fcc     '2'
F8E0 F8D3             (        forth.asm):03631                 fdb     ONEL
F8E2 C7               (        forth.asm):03632                 RFCS
F8E3 8E0002           (        forth.asm):03633 (3)             ldx     #2
F8E6 7EE823           (        forth.asm):03634 (3)             jmp     NPUSH
                      (        forth.asm):03635         
F8E9 05               (        forth.asm):03636         SHIFT   fcb     5               79-STANDARD (Ref)
F8EA 5348494654       (        forth.asm):03637                 fcc     'SHIFT'
F8EF F8DE             (        forth.asm):03638                 fdb     TWOL
F8F1 C7               (        forth.asm):03639                 RFCS
F8F2 BDE4DC           (        forth.asm):03640 (7)             jsr     MIN2PST         Two cells need to be stacked up
F8F5 10A6C4           (        forth.asm):03641 (6+0)           ldw     ,u              Shift bitcount
F8F8 EC42             (        forth.asm):03642 (5+1)           ldd     2,u             The data itself
F8FA 105D             (        forth.asm):03643 (2)     @shftlp tstw
F8FC 270E             (        forth.asm):03644 (3)             beq     @shfdon
F8FE 2D06             (        forth.asm):03645 (3)             blt     @shftrg
F900 1048             (        forth.asm):03646 (2)             lsld                    Shift left (W is positive)
F902 105A             (        forth.asm):03647 (2)             decw
F904 20F4             (        forth.asm):03648 (3)             bra     @shftlp
F906 1044             (        forth.asm):03649 (2)     @shftrg lsrd                    Shift right (W is negative)
F908 105C             (        forth.asm):03650 (2)             incw
F90A 20EE             (        forth.asm):03651 (3)             bra     @shftlp
F90C ED42             (        forth.asm):03652 (5+1)   @shfdon std     2,u             Return value stored there
F90E 3342             (        forth.asm):03653 (4+1)           leau    2,u             Drop one cell from the data stack
F910 39               (        forth.asm):03654 (4)             rts
                      (        forth.asm):03655         
                      (        forth.asm):03656         * Signed multiplication by hardware support.
F911 01               (        forth.asm):03657         MULT    fcb     1               79-STANDARD (REQ138)
F912 2A               (        forth.asm):03658                 fcc     '*'
F913 F8E9             (        forth.asm):03659                 fdb     SHIFT
F915 C7               (        forth.asm):03660                 RFCS
F916 BDE4DC           (        forth.asm):03661 (7)             jsr     MIN2PST         Two cells need to be stacked up
F919 EC42             (        forth.asm):03662 (5+1)           ldd     2,u
F91B 11AFC4           (        forth.asm):03663 (30+0)          muld    ,u
F91E 10A742           (        forth.asm):03664 (6+1)           stw     2,u             Return only the lower 16 bits
F921 3342             (        forth.asm):03665 (4+1)           leau    2,u             Drop one cell from the data stack
F923 39               (        forth.asm):03666 (4)             rts
                      (        forth.asm):03667         
F924 02               (        forth.asm):03668         TWOTIM  fcb     2               79-STANDARD (REF)
F925 322A             (        forth.asm):03669                 fcc     '2*'
F927 F911             (        forth.asm):03670                 fdb     MULT
F929 C7               (        forth.asm):03671                 RFCS
F92A BDE4D7           (        forth.asm):03672 (7)             jsr     MIN1PST         One cell needs to be stacked up
F92D ECC4             (        forth.asm):03673 (5+0)           ldd     ,u
F92F 1048             (        forth.asm):03674 (2)             asld
F931 EDC4             (        forth.asm):03675 (5+0)           std     ,u
F933 39               (        forth.asm):03676 (4)             rts
                      (        forth.asm):03677         
F934 02               (        forth.asm):03678         TWODIV  fcb     2
F935 322F             (        forth.asm):03679                 fcc     '2/'
F937 F924             (        forth.asm):03680                 fdb     TWOTIM
F939 C7               (        forth.asm):03681                 RFCS
F93A BDE4D7           (        forth.asm):03682 (7)             jsr     MIN1PST         One cell needs to be stacked up
F93D ECC4             (        forth.asm):03683 (5+0)           ldd     ,u
F93F 1047             (        forth.asm):03684 (2)             asrd
F941 EDC4             (        forth.asm):03685 (5+0)           std     ,u
F943 39               (        forth.asm):03686 (4)             rts
                      (        forth.asm):03687         
                      (        forth.asm):03688         * /, MOD and /MOD are essentially the same function returning
                      (        forth.asm):03689         * the different parts returned by DIVQ.
                      (        forth.asm):03690         * We use a global variable to distinguish which functionality
                      (        forth.asm):03691         * is being requested:
                      (        forth.asm):03692         * 0: return the modulo and the quotient (/MOD).
                      (        forth.asm):03693         * 1: return the modulo only (MOD).
                      (        forth.asm):03694         * 2: return the quotient only (/).
F944 01               (        forth.asm):03695         DIV     fcb     1               79-STANDARD (REQ178)
F945 2F               (        forth.asm):03696                 fcc     '/'             ( N1 N2 -- N3 [N4] )
F946 F934             (        forth.asm):03697                 fdb     TWODIV
F948 C7               (        forth.asm):03698                 RFCS
F949 8602             (        forth.asm):03699 (2)             lda     #2
F94B 9733             (        forth.asm):03700 (3)             sta     DIVFCN          Function 2: return only the quotient
F94D BDE4DC           (        forth.asm):03701 (7)     DIV1    jsr     MIN2PST         At least two cells need to be stacked up
F950 0F34             (        forth.asm):03702 (5)             clr     F83DIVF         Assume no adjustment required for floored div.
F952 A642             (        forth.asm):03703 (4+1)           lda     2,u             Numerator's MSB
F954 A8C4             (        forth.asm):03704 (4+0)           eora    ,u              Different sign from the denominator's MSB?
F956 2A02             (        forth.asm):03705 (3)             bpl     @divprc         No, proceed to the division code
F958 0C34             (        forth.asm):03706 (5)             inc     F83DIVF         Numerator and denominator have different signs
                      (        forth.asm):03707         * Division by zero conditions are dealt with through the trap handler.
F95A 104F             (        forth.asm):03708 (2)     @divprc clrd                    Clear the numerator's MSC
F95C 10A642           (        forth.asm):03709 (6+1)           ldw     2,u             Numerator's LSC
F95F 2A02             (        forth.asm):03710 (3)             bpl     @dvnsex         Branch if no sign extention is needed
                      (        forth.asm):03711         * Sign extention from W to Q.
F961 1043             (        forth.asm):03712 (2)             comd                    -1 to D (numerator's MSC)
F963 11AEC4           (        forth.asm):03713 (36)    @dvnsex divq    ,u              ,u has the denominator
F966 8D19             (        forth.asm):03714 (6)             bsr     FDIVADJ         Perform floored division adjustment, if needed
F968 0D33             (        forth.asm):03715 (4)     @no83ad tst     DIVFCN
F96A 2606             (        forth.asm):03716 (3)             bne     @div4
F96C ED42             (        forth.asm):03717 (5+1)           std     2,u             Function 0: return the modulo and the quotient
F96E 10A7C4           (        forth.asm):03718 (6+0)   @div3   stw     ,u              Function 2: return only the quotient
F971 39               (        forth.asm):03719 (4)             rts
F972 3342             (        forth.asm):03720 (4+1)   @div4   leau    2,u             Drop one cell from the data stack
F974 1F07             (        forth.asm):03721 (4)             tfr     d,v             Backup the modulo
F976 9633             (        forth.asm):03722 (3)             lda     DIVFCN
F978 8101             (        forth.asm):03723 (2)             cmpa    #1
F97A 26F2             (        forth.asm):03724 (3)             bne     @div3
F97C 1F70             (        forth.asm):03725 (4)             tfr     v,d             Restore the modulo
F97E EDC4             (        forth.asm):03726 (5+0)           std     ,u              Function 1: return only the modulo
F980 39               (        forth.asm):03727 (4)             rts
                      (        forth.asm):03728         
                      (        forth.asm):03729         * Quotient is returned in W, modulo in D but this is symmetric division :-(
                      (        forth.asm):03730         * Need to return a floored division result for compat. with F83 and ANSI impls.
F981 104D             (        forth.asm):03731 (2)     FDIVADJ tstd                    Is the remainder zero?
F983 2708             (        forth.asm):03732 (3)             beq     @no83ad         Yes. No adjusment required for floored division
F985 0D34             (        forth.asm):03733 (4)             tst     F83DIVF         Different signs for numerator and denominator?
F987 2704             (        forth.asm):03734 (3)             beq     @no83ad         No. Adjusment not needed for floored division
                      (        forth.asm):03735         * Adjusment for F83 floored division.
F989 105A             (        forth.asm):03736 (2)             decw                    Decrement the quotient
F98B E3C4             (        forth.asm):03737 (5+0)           addd    ,u              Add the denominator to the modulo
F98D 39               (        forth.asm):03738 (4)     @no83ad rts
                      (        forth.asm):03739         
F98E 03               (        forth.asm):03740         MOD     fcb     3               79-STANDARD (REQ104)
F98F 4D4F44           (        forth.asm):03741                 fcc     'MOD'           ( N1 N2 -- N3 )
F992 F944             (        forth.asm):03742                 fdb     DIV
F994 C7               (        forth.asm):03743                 RFCS
F995 8601             (        forth.asm):03744 (2)             lda     #1
F997 9733             (        forth.asm):03745 (3)             sta     DIVFCN
F999 20B2             (        forth.asm):03746 (3)             bra     DIV1
                      (        forth.asm):03747         
F99B 04               (        forth.asm):03748         MDIV    fcb     4               79-STANDARD (REQ198)
F99C 2F4D4F44         (        forth.asm):03749                 fcc     '/MOD'          ( N1 N2 -- N3 N4 )
F9A0 F98E             (        forth.asm):03750                 fdb     MOD
F9A2 C7               (        forth.asm):03751                 RFCS
F9A3 0F33             (        forth.asm):03752 (5)             clr     DIVFCN
F9A5 20A6             (        forth.asm):03753 (3)             bra     DIV1
                      (        forth.asm):03754         
F9A7 02               (        forth.asm):03755         STRSLSH fcb     2               79-STANDARD (REQ220)
F9A8 2A2F             (        forth.asm):03756                 fcc     '*/'            ( N1 N2 N3 -- N4 [N5] )
F9AA F99B             (        forth.asm):03757                 fdb     MDIV
F9AC C7               (        forth.asm):03758                 RFCS
F9AD 8601             (        forth.asm):03759 (2)             lda     #1
F9AF 9735             (        forth.asm):03760 (3)             sta     STSLFCN
F9B1 BDE4E1           (        forth.asm):03761 (7)     STRSL1  jsr     MIN3PST         Three cells need to be stacked up
F9B4 0F34             (        forth.asm):03762 (5)             clr     F83DIVF         Assume no adjustment required for floored div.
                      (        forth.asm):03763         * Division by zero conditions are dealt with through the trap handler.
F9B6 EC44             (        forth.asm):03764 (5+1)           ldd     4,u             N1
F9B8 11AF42           (        forth.asm):03765 (30+1)          muld    2,u             N2 (N1 * N2 -> D:W)
F9BB 3402             (        forth.asm):03766 (4+1)           pshs    a               Product's MSC's MSB
F9BD A8C4             (        forth.asm):03767 (4+0)           eora    ,u              Different sign from the denominator's?
F9BF 2A02             (        forth.asm):03768 (3)             bpl     @stslpr         No. Floored division adjustment not needed
F9C1 0C34             (        forth.asm):03769 (5)             inc     F83DIVF
F9C3 3502             (        forth.asm):03770 (4+1)   @stslpr puls    a
F9C5 11AEC4           (        forth.asm):03771 (36)            divq    ,u              N3
F9C8 8DB7             (        forth.asm):03772 (6)             bsr     FDIVADJ         Perform floored division adjustment, if needed
F9CA 3342             (        forth.asm):03773 (4+1)           leau    2,u
F9CC 0D35             (        forth.asm):03774 (4)             tst     STSLFCN
F9CE 2606             (        forth.asm):03775 (3)             bne     @strsl2         Just the quotient, Ma'am!
F9D0 ED42             (        forth.asm):03776 (5+1)           std     2,u             N4: the modulo
F9D2 10A7C4           (        forth.asm):03777 (6+0)           stw     ,u              N5: the quotient
F9D5 39               (        forth.asm):03778 (4)             rts
F9D6 3342             (        forth.asm):03779 (4+1)   @strsl2 leau    2,u
F9D8 10A7C4           (        forth.asm):03780 (6+0)           stw     ,u              N4
F9DB 39               (        forth.asm):03781 (4)             rts
                      (        forth.asm):03782         
F9DC 05               (        forth.asm):03783         STRSLMD fcb     5               79-STANDARD (REQ192)
F9DD 2A2F4D4F44       (        forth.asm):03784                 fcc     '*/MOD'         ( N1 N2 N3 -- N4 N5 )
F9E2 F9A7             (        forth.asm):03785                 fdb     STRSLSH
F9E4 C7               (        forth.asm):03786                 RFCS
F9E5 0F35             (        forth.asm):03787 (5)             clr     STSLFCN
F9E7 20C8             (        forth.asm):03788 (3)             bra     STRSL1
                      (        forth.asm):03789         
                      (        forth.asm):03790         * Returns the current value of the S register (informational only).
F9E9 01               (        forth.asm):03791         SYSSTK  fcb     1               Non-standard
F9EA 53               (        forth.asm):03792                 fcc     'S'
F9EB F9DC             (        forth.asm):03793                 fdb     STRSLMD
F9ED C7               (        forth.asm):03794                 RFCS
F9EE 1F41             (        forth.asm):03795 (4)             tfr     s,x
F9F0 7EE823           (        forth.asm):03796 (3)             jmp     NPUSH
                      (        forth.asm):03797         
F9F3 07               (        forth.asm):03798         PAYLOAD fcb     7               Non standard
F9F4 5041594C4F4144   (        forth.asm):03799                 fcc     'PAYLOAD'       ( -- len ) where len is the code payload
F9FB F9E9             (        forth.asm):03800                 fdb     SYSSTK          of the word located by FIND (or NULL)
F9FD C7               (        forth.asm):03801                 RFCS
F9FE 9E10             (        forth.asm):03802 (4)             ldx     FNDPLD          Code payload reported by FIND
FA00 7EE823           (        forth.asm):03803 (3)             jmp     NPUSH
                      (        forth.asm):03804         
                      (        forth.asm):03805         * Differences from the original code:
                      (        forth.asm):03806         * - display number in HEX rather than in the current base.
                      (        forth.asm):03807         * - dropped feat: the original stuff was interactively paged by 15 line screens.
                      (        forth.asm):03808         * - added feat: display code implementation payload.
                      (        forth.asm):03809         * - added feat: display the immedediate and define (compile time only) flags.
                      (        forth.asm):03810         * - added feat: display the forgettable status (R/W). Everything user
                      (        forth.asm):03811         *   defined is forgettable (i.e. RAM resident).
FA03 05               (        forth.asm):03812         VLIST   fcb     5               Non-standard
FA04 564C495354       (        forth.asm):03813                 fcc     'VLIST'         ( -- )
FA09 F9F3             (        forth.asm):03814                 fdb     PAYLOAD
FA0B C7               (        forth.asm):03815                 RFCS
FA0C 9E08             (        forth.asm):03816 (4)             ldx     DICEND
FA0E 9F16             (        forth.asm):03817 (4)             stx     VLPRVEP         Last word code address + 1
FA10 9E06             (        forth.asm):03818 (4)             ldx     LSTWAD
FA12 9F18             (        forth.asm):03819 (4)     @vlist1 stx     VLPRVHD         Last word header pointer
FA14 108E03EA         (        forth.asm):03820 (4)             ldy     #TBUFF
FA18 E680             (        forth.asm):03821 (4+1)           ldb     ,x+
FA1A 3404             (        forth.asm):03822 (4+1)           pshs    b
FA1C C41F             (        forth.asm):03823 (2)             andb    #WRLNMSK        Mask out word length
FA1E 4F               (        forth.asm):03824 (1)             clra
FA1F 3404             (        forth.asm):03825 (4+1)           pshs    b               Preserve word length
FA21 1F06             (        forth.asm):03826 (4)             tfr     d,w
FA23 113812           (        forth.asm):03827 (6+?)           tfm     x+,y+
FA26 3502             (        forth.asm):03828 (4+1)           puls    a               Restore word length to A
FA28 C620             (        forth.asm):03829 (2)             ldb     #WRLNMSK+1
FA2A 103289           (        forth.asm):03830 (4)             subr    a,b             Number of spaces we want to emit
FA2D 8620             (        forth.asm):03831 (2)             lda     #SP
FA2F A7A0             (        forth.asm):03832 (4+1)   @vlist2 sta     ,y+
FA31 5A               (        forth.asm):03833 (1)             decb
FA32 26FB             (        forth.asm):03834 (3)             bne     @vlist2
FA34 6FA0             (        forth.asm):03835 (6+1)           clr     ,y+             Terminate formatted output string
FA36 3410             (        forth.asm):03836 (4+2)           pshs    x               Address of the current word backlink address
FA38 BDE33F           (        forth.asm):03837 (7)             jsr     PUTCR           Carriage return is output before anything else
FA3B 8E03EA           (        forth.asm):03838 (3)             ldx     #TBUFF
FA3E BDE332           (        forth.asm):03839 (7)             jsr     PUTS            Output word name formatted on 17 chars + SP
FA41 AEE4             (        forth.asm):03840 (5+0)           ldx     ,s
                      (        forth.asm):03841                 IFNE    RELFEAT
FA43 3003             (        forth.asm):03842 (4+1)           leax    3,x             Word XT to X (Skip backlink and checksum)
                      (        forth.asm):03843                 ELSE
                      (        forth.asm):03844                 leax    2,x             Word XT to X (Skip backlink)
                      (        forth.asm):03845                 ENDC                    RELFEAT
FA45 1F10             (        forth.asm):03846 (4)             tfr     x,d             CVNSTR depends on UBASE and we want HEX output
FA47 108E03EA         (        forth.asm):03847 (4)             ldy     #TBUFF
FA4B BDE184           (        forth.asm):03848 (7)             jsr     HDMP4           So we use trusted debugging code
FA4E 8E03EA           (        forth.asm):03849 (3)             ldx     #TBUFF
FA51 BDE332           (        forth.asm):03850 (7)             jsr     PUTS
                      (        forth.asm):03851         * Now to display word implementation length.
                      (        forth.asm):03852         * Implementation code length is from ,s+3 (or 2) to VLPRVEP
FA54 8609             (        forth.asm):03853 (2)             lda     #HT
FA56 BDE31F           (        forth.asm):03854 (7)             jsr     PUTCH
FA59 9E16             (        forth.asm):03855 (4)             ldx     VLPRVEP
FA5B 10AEE4           (        forth.asm):03856 (6+0)           ldy     ,s
                      (        forth.asm):03857                 IFNE    RELFEAT
FA5E 3123             (        forth.asm):03858 (4+1)           leay    3,y             Current word code entry address
                      (        forth.asm):03859                 ELSE
                      (        forth.asm):03860                 leay    2,y             Current word code entry address
                      (        forth.asm):03861                 ENDC                    RELFEAT
FA60 103221           (        forth.asm):03862 (4)             subr    y,x
FA63 1F10             (        forth.asm):03863 (4)             tfr     x,d
FA65 108E03EA         (        forth.asm):03864 (4)             ldy     #TBUFF
FA69 BDE184           (        forth.asm):03865 (7)             jsr     HDMP4
FA6C 8E03EA           (        forth.asm):03866 (3)             ldx     #TBUFF
FA6F BDE332           (        forth.asm):03867 (7)             jsr     PUTS
                      (        forth.asm):03868         # Display attribute flags.
FA72 8609             (        forth.asm):03869 (2)             lda     #HT
FA74 BDE31F           (        forth.asm):03870 (7)             jsr     PUTCH
FA77 8E03EA           (        forth.asm):03871 (3)             ldx     #TBUFF
FA7A E662             (        forth.asm):03872 (4+1)           ldb     2,s             Word attribute to B
FA7C 862D             (        forth.asm):03873 (2)             lda     #'-
FA7E C580             (        forth.asm):03874 (2)             bitb    #IMDFLM         Check for immediate
FA80 2702             (        forth.asm):03875 (3)             beq     @vlist4
FA82 8649             (        forth.asm):03876 (2)             lda     #'I
FA84 A780             (        forth.asm):03877 (4+1)   @vlist4 sta     ,x+
FA86 862D             (        forth.asm):03878 (2)             lda     #'-
FA88 C540             (        forth.asm):03879 (2)             bitb    #DEFFLM         Check for define (compile time only)
FA8A 2702             (        forth.asm):03880 (3)             beq     @vlist5
FA8C 8643             (        forth.asm):03881 (2)             lda     #'C
FA8E A780             (        forth.asm):03882 (4+1)   @vlist5 sta     ,x+
                      (        forth.asm):03883                 IFNE    RELFEAT
FA90 862D             (        forth.asm):03884 (2)             lda     #'-
FA92 C520             (        forth.asm):03885 (2)             bitb    #MONFLM         Check for monitored status
FA94 2702             (        forth.asm):03886 (3)             beq     @vlst51
FA96 864D             (        forth.asm):03887 (2)             lda     #'M
FA98 A780             (        forth.asm):03888 (4+1)   @vlst51 sta     ,x+
                      (        forth.asm):03889                 ENDC                    RELFEAT
                      (        forth.asm):03890         * Check for forgettable also. In ROM => R else W unless we just processed '@'.
FA9A 8652             (        forth.asm):03891 (2)             lda     #'R
FA9C 10AEE4           (        forth.asm):03892 (6+0)           ldy     ,s
                      (        forth.asm):03893                 IFNE    RELFEAT
FA9F 3123             (        forth.asm):03894 (4+1)           leay    3,y             Word entry point to Y
                      (        forth.asm):03895                 ELSE
                      (        forth.asm):03896                 leay    2,y             Word entry point to Y
                      (        forth.asm):03897                 ENDC                    RELFEAT
FAA1 108C0C65         (        forth.asm):03898 (4)             cmpy    #RAMFTCH        @ in RAM is unforgettable
FAA5 2708             (        forth.asm):03899 (3)             beq     @vlist6
FAA7 108CE000         (        forth.asm):03900 (4)             cmpy    #ROMSTRT        as are all ROM resident words
FAAB 2402             (        forth.asm):03901 (3)             bcc     @vlist6
FAAD 8657             (        forth.asm):03902 (2)             lda     #'W
FAAF A780             (        forth.asm):03903 (4+1)   @vlist6 sta     ,x+
FAB1 6F84             (        forth.asm):03904 (6+0)           clr     ,x
FAB3 8E03EA           (        forth.asm):03905 (3)             ldx     #TBUFF
FAB6 BDE332           (        forth.asm):03906 (7)             jsr     PUTS
                      (        forth.asm):03907         * The point at which VLPRVHD==WDICSPC is a singularity (RAM to ROM transition).
FAB9 9E18             (        forth.asm):03908 (4)             ldx     VLPRVHD
FABB 8C0C60           (        forth.asm):03909 (3)             cmpx    #WDICSPC
FABE 2608             (        forth.asm):03910 (3)             bne     @vlist7
FAC0 8EFD96           (        forth.asm):03911 (3)             ldx     #QMARK          Word just before @ (ROM flavor)
FAC3 9F18             (        forth.asm):03912 (4)             stx     VLPRVHD
FAC5 8EFDA1           (        forth.asm):03913 (3)             ldx     #THEEND
FAC8 9F16             (        forth.asm):03914 (4)     @vlist7 stx     VLPRVEP
FACA 3510             (        forth.asm):03915 (4+2)           puls    x
FACC 3504             (        forth.asm):03916 (4+1)           puls    b
FACE AE84             (        forth.asm):03917 (5+0)           ldx     ,x              Point to previous word
FAD0 1026FF3E         (        forth.asm):03918 (5)             lbne    @vlist1
FAD4 39               (        forth.asm):03919 (4)             rts
                      (        forth.asm):03920         
FAD5 05               (        forth.asm):03921         STATE   fcb     5
FAD6 5354415445       (        forth.asm):03922                 fcc     'STATE'
FADB FA03             (        forth.asm):03923                 fdb     VLIST
FADD C7               (        forth.asm):03924                 RFCS
FADE 8E0120           (        forth.asm):03925 (3)             ldx     #USTATE
FAE1 7EE823           (        forth.asm):03926 (3)             jmp     NPUSH
                      (        forth.asm):03927         
FAE4 04               (        forth.asm):03928         BASE    fcb     4               79-STANDARD (REQ115)
FAE5 42415345         (        forth.asm):03929                 fcc     'BASE'
FAE9 FAD5             (        forth.asm):03930                 fdb     STATE
FAEB C7               (        forth.asm):03931                 RFCS
FAEC 8E011E           (        forth.asm):03932 (3)             ldx     #UBASE
FAEF 7EE823           (        forth.asm):03933 (3)             jmp     NPUSH
                      (        forth.asm):03934         
FAF2 03               (        forth.asm):03935         BIN     fcb     3               Non-standard
FAF3 42494E           (        forth.asm):03936                 fcc     'BIN'
FAF6 FAE4             (        forth.asm):03937                 fdb     BASE
FAF8 C7               (        forth.asm):03938                 RFCS
FAF9 CC0002           (        forth.asm):03939 (3)             ldd     #2
FAFC DD1E             (        forth.asm):03940 (4)             std     UBASE
FAFE 39               (        forth.asm):03941 (4)             rts
                      (        forth.asm):03942         
FAFF 05               (        forth.asm):03943         OCTAL   fcb     5               79-STANDARD (REF)
FB00 4F4354414C       (        forth.asm):03944                 fcc     'OCTAL'
FB05 FAF2             (        forth.asm):03945                 fdb     BIN
FB07 C7               (        forth.asm):03946                 RFCS
FB08 CC0008           (        forth.asm):03947 (3)             ldd     #8
FB0B DD1E             (        forth.asm):03948 (4)             std     UBASE
FB0D 39               (        forth.asm):03949 (4)             rts
                      (        forth.asm):03950         
FB0E 07               (        forth.asm):03951         DECIMAL fcb     7               79-STANDARD (REQ197)
FB0F 444543494D414C   (        forth.asm):03952                 fcc     'DECIMAL'
FB16 FAFF             (        forth.asm):03953                 fdb     OCTAL
FB18 C7               (        forth.asm):03954                 RFCS
FB19 CC000A           (        forth.asm):03955 (3)             ldd     #10
FB1C DD1E             (        forth.asm):03956 (4)             std     UBASE
FB1E 39               (        forth.asm):03957 (4)             rts
                      (        forth.asm):03958         
FB1F 03               (        forth.asm):03959         HEX     fcb     3               79-STANDARD (REF162)
FB20 484558           (        forth.asm):03960                 fcc     'HEX'
FB23 FB0E             (        forth.asm):03961                 fdb     DECIMAL
FB25 C7               (        forth.asm):03962                 RFCS
FB26 CC0010           (        forth.asm):03963 (3)             ldd     #16
FB29 DD1E             (        forth.asm):03964 (4)             std     UBASE
FB2B 39               (        forth.asm):03965 (4)             rts
                      (        forth.asm):03966         
FB2C 02               (        forth.asm):03967         DOTTICK fcb     2               Non-standard (SwiftForth)
FB2D 2E27             (        forth.asm):03968                 fcb     $2E,$27         .' ( memaddr -- )
FB2F FB1F             (        forth.asm):03969                 fdb     HEX
FB31 C7               (        forth.asm):03970                 RFCS
                      (        forth.asm):03971                 IFNE    SSDFEAT
FB32 BDE831           (        forth.asm):03972 (7)             jsr     NPOP
FB35 1F12             (        forth.asm):03973 (4)             tfr     x,y
FB37 8E039A           (        forth.asm):03974 (3)             ldx     #HEXBUF
FB3A BDE66C           (        forth.asm):03975 (7)             jsr     FINDSYM
                      (        forth.asm):03976                 ELSE
                      (        forth.asm):03977                 lda     #'$
                      (        forth.asm):03978                 jsr     PUTCH
                      (        forth.asm):03979                 jsr     NPOP
                      (        forth.asm):03980                 tfr     x,d
                      (        forth.asm):03981                 ldy     #HEXBUF
                      (        forth.asm):03982                 jsr     HDMP4
                      (        forth.asm):03983                 ENDC                    SSDFEAT
FB3D 8E039A           (        forth.asm):03984 (3)             ldx     #HEXBUF
FB40 7EE332           (        forth.asm):03985 (3)             jmp     PUTS
                      (        forth.asm):03986         
                      (        forth.asm):03987         * Display a dump of the data stack in the current BASE. In Leo Brodie's
                      (        forth.asm):03988         * "Starting Forth" the data stack is printed from the bottom up. So it is here.
FB43 02               (        forth.asm):03989         DDUMP   fcb     2               ANSI (Optional "Programming tools" word set)
FB44 2E53             (        forth.asm):03990                 fcc     '.S'            ( -- )
FB46 FB2C             (        forth.asm):03991                 fdb     DOTTICK
FB48 C7               (        forth.asm):03992                 RFCS
FB49 CC0296           (        forth.asm):03993 (3)             ldd     #NSTBOT
FB4C 103230           (        forth.asm):03994 (4)             subr    u,d
FB4F 1044             (        forth.asm):03995 (2)             lsrd                    DEPTH is in D
FB51 272A             (        forth.asm):03996 (3)             beq     @ndump3         Data stack is empty
FB53 3440             (        forth.asm):03997 (4+2)           pshs    u
FB55 CE0296           (        forth.asm):03998 (3)             ldu     #NSTBOT         Pointing to the bottom of the data stack
FB58 8601             (        forth.asm):03999 (2)             lda     #1
FB5A 9738             (        forth.asm):04000 (3)             sta     CVISSGN         Force a signed number conversion
FB5C 3404             (        forth.asm):04001 (4+1)   @ndump1 pshs    b
FB5E AEC3             (        forth.asm):04002 (5+2)           ldx     ,--u
FB60 BDE483           (        forth.asm):04003 (7)             jsr     CVNSTR
FB63 8E03EA           (        forth.asm):04004 (3)             ldx     #TBUFF
                      (        forth.asm):04005         # Skip leading spaces.
FB66 A680             (        forth.asm):04006 (4+1)   @ndump2 lda     ,x+
FB68 8120             (        forth.asm):04007 (2)             cmpa    #SP
FB6A 27FA             (        forth.asm):04008 (3)             beq     @ndump2
FB6C 301F             (        forth.asm):04009 (4+1)           leax    -1,x
FB6E BDE332           (        forth.asm):04010 (7)             jsr     PUTS
FB71 8620             (        forth.asm):04011 (2)             lda     #SP
FB73 BDE31F           (        forth.asm):04012 (7)             jsr     PUTCH
FB76 3504             (        forth.asm):04013 (4+1)           puls    b
FB78 5A               (        forth.asm):04014 (1)             decb
FB79 26E1             (        forth.asm):04015 (3)             bne     @ndump1
FB7B 3540             (        forth.asm):04016 (4+2)           puls    u
FB7D 39               (        forth.asm):04017 (4)     @ndump3 rts
                      (        forth.asm):04018         
FB7E 04               (        forth.asm):04019         QRYDUP  fcb     4               79-STANDARD (REQ184)
FB7F 3F445550         (        forth.asm):04020                 fcc     '?DUP'
FB83 FB43             (        forth.asm):04021                 fdb     DDUMP
FB85 C7               (        forth.asm):04022                 RFCS
FB86 BDE831           (        forth.asm):04023 (7)             jsr     NPOP
FB89 3610             (        forth.asm):04024                 UCNPUSH                 Push back the original parameter
FB8B 1037C1           (        forth.asm):04025 (4)             cmpr    0,x
FB8E 2601             (        forth.asm):04026 (3)             bne     @qrydp1
FB90 39               (        forth.asm):04027 (4)             rts
FB91 7EE823           (        forth.asm):04028 (3)     @qrydp1 jmp     NPUSH           And DUP if NZ
                      (        forth.asm):04029         
FB94 04               (        forth.asm):04030         TUCK    fcb     4               ANSI (Core ext)
FB95 5455434B         (        forth.asm):04031                 fcc     'TUCK'          ( x1 x2 -- x2 x1 x2 ) i.e. SWAP OVER
FB99 FB7E             (        forth.asm):04032                 fdb     QRYDUP
FB9B C7               (        forth.asm):04033                 RFCS
FB9C 8D2F             (        forth.asm):04034                 RFXT    bsr,SWAP+7      XT for SWAP
FB9E 2073             (        forth.asm):04035                 RFXT    bra,OVER+7      XT for OVER
                      (        forth.asm):04036         
FBA0 03               (        forth.asm):04037         NIP     fcb     3               ANSI (Core ext)
FBA1 4E4950           (        forth.asm):04038                 fcc     'NIP'           ( x1 x2 -- x2 ) i.e. SWAP DROP
FBA4 FB94             (        forth.asm):04039                 fdb     TUCK
FBA6 C7               (        forth.asm):04040                 RFCS
FBA7 8D24             (        forth.asm):04041                 RFXT    bsr,SWAP+7      XT for SWAP
FBA9 2017             (        forth.asm):04042                 RFXT    bra,DROP+7      XT for DROP
                      (        forth.asm):04043         
FBAB 03               (        forth.asm):04044         DUP     fcb     3               79-STANDARD (REQ205)
FBAC 445550           (        forth.asm):04045                 fcc     'DUP'
FBAF FBA0             (        forth.asm):04046                 fdb     NIP
FBB1 C7               (        forth.asm):04047                 RFCS
FBB2 BDE4D7           (        forth.asm):04048 (7)             jsr     MIN1PST         At least one cell needs to be stacked up
FBB5 AEC4             (        forth.asm):04049 (5+0)           ldx     ,u
FBB7 7EE823           (        forth.asm):04050 (3)             jmp     NPUSH
                      (        forth.asm):04051         
FBBA 04               (        forth.asm):04052         DROP    fcb     4               79-STANDARD (REQ233)
FBBB 44524F50         (        forth.asm):04053                 fcc     'DROP'
FBBF FBAB             (        forth.asm):04054                 fdb     DUP
FBC1 C7               (        forth.asm):04055                 RFCS
FBC2 7EE831           (        forth.asm):04056 (3)             jmp     NPOP
                      (        forth.asm):04057         
FBC5 04               (        forth.asm):04058         SWAP    fcb     4               79-STANDARD (REQ230)
FBC6 53574150         (        forth.asm):04059                 fcc     'SWAP'
FBCA FBBA             (        forth.asm):04060                 fdb     DROP
FBCC C7               (        forth.asm):04061                 RFCS
FBCD BDE4DC           (        forth.asm):04062 (7)             jsr     MIN2PST         We need at least two cells stacked up
FBD0 10ECC4           (        forth.asm):04063 (8+0)           ldq     ,u              In place SWAP
FBD3 1E06             (        forth.asm):04064 (5)             exg     d,w
FBD5 10EDC4           (        forth.asm):04065 (8+0)           stq     ,u
FBD8 39               (        forth.asm):04066 (4)             rts
                      (        forth.asm):04067         
FBD9 04               (        forth.asm):04068         PICK    fcb     4
FBDA 5049434B         (        forth.asm):04069                 fcc     'PICK'
FBDE FBC5             (        forth.asm):04070                 fdb     SWAP
FBE0 C7               (        forth.asm):04071                 RFCS
FBE1 BDE831           (        forth.asm):04072 (7)             jsr     NPOP
FBE4 CC0296           (        forth.asm):04073 (3)     PICK1   ldd     #NSTBOT
FBE7 103230           (        forth.asm):04074 (4)             subr    u,d
FBEA 1044             (        forth.asm):04075 (2)             lsrd                    D has the data stack depth in cells
FBEC 103710           (        forth.asm):04076 (4)             cmpr    x,d
FBEF 2405             (        forth.asm):04077 (3)             bcc     @pick1
FBF1 C60D             (        forth.asm):04078 (2)     ERRPCK  ldb     #13             Argument is greater than DEPTH
FBF3 BDE7A2           (        forth.asm):04079 (7)             jsr     ERRHDLR         No return
FBF6 1F10             (        forth.asm):04080 (4)     @pick1  tfr     x,d
FBF8 104D             (        forth.asm):04081 (2)             tstd
FBFA 27F5             (        forth.asm):04082 (3)             beq     ERRPCK
FBFC 104A             (        forth.asm):04083 (2)             decd                    Minus 1, unlike in the Z80 implementation
FBFE 1048             (        forth.asm):04084 (2)             lsld                    Times 2
FC00 1F31             (        forth.asm):04085 (4)             tfr     u,x
FC02 308B             (        forth.asm):04086 (4+2)           leax    d,x
FC04 1F12             (        forth.asm):04087 (4)             tfr     x,y             For the sake of ROLL's implementation
FC06 AE84             (        forth.asm):04088 (5+0)           ldx     ,x
FC08 3610             (        forth.asm):04089                 UCNPUSH
FC0A 39               (        forth.asm):04090 (4)             rts
                      (        forth.asm):04091         
FC0B 04               (        forth.asm):04092         OVER    fcb     4
FC0C 4F564552         (        forth.asm):04093                 fcc     'OVER'
FC10 FBD9             (        forth.asm):04094                 fdb     PICK
FC12 C7               (        forth.asm):04095                 RFCS
FC13 8E0002           (        forth.asm):04096 (3)             ldx     #2
FC16 20CC             (        forth.asm):04097 (3)             bra     PICK1
                      (        forth.asm):04098         
FC18 04               (        forth.asm):04099         ROLL    fcb     4
FC19 524F4C4C         (        forth.asm):04100                 fcc     'ROLL'
FC1D FC0B             (        forth.asm):04101                 fdb     OVER
FC1F C7               (        forth.asm):04102                 RFCS
FC20 BDE831           (        forth.asm):04103 (7)             jsr     NPOP
FC23 1F16             (        forth.asm):04104 (4)     ROLL1   tfr     x,w
FC25 8DBD             (        forth.asm):04105 (6)             bsr     PICK1           Let PICK do the error handling
FC27 3121             (        forth.asm):04106 (4+1)           leay    1,y             Point to the LSB since we're moving backward
FC29 1F21             (        forth.asm):04107 (4)             tfr     y,x
FC2B 301E             (        forth.asm):04108 (4+1)           leax    -2,x
FC2D 103066           (        forth.asm):04109 (4)             addr    w,w
FC30 113912           (        forth.asm):04110 (6+?)           tfm     x-,y-
FC33 7EE831           (        forth.asm):04111 (3)             jmp     NPOP
                      (        forth.asm):04112         
FC36 03               (        forth.asm):04113         ROT     fcb     3
FC37 524F54           (        forth.asm):04114                 fcc     'ROT'
FC3A FC18             (        forth.asm):04115                 fdb     ROLL
FC3C C7               (        forth.asm):04116                 RFCS
FC3D 8E0003           (        forth.asm):04117 (3)             ldx     #3
FC40 20E1             (        forth.asm):04118 (3)             bra     ROLL1
                      (        forth.asm):04119         
FC42 04               (        forth.asm):04120         MROT    fcb     4
FC43 2D524F54         (        forth.asm):04121                 fcc     '-ROT'
FC47 FC36             (        forth.asm):04122                 fdb     ROT
FC49 C7               (        forth.asm):04123                 RFCS
FC4A 8DF1             (        forth.asm):04124                 RFXT    bsr,ROT+6       XT for ROT
FC4C 20EF             (        forth.asm):04125                 RFXT    bra,ROT+6       XT for ROT
                      (        forth.asm):04126         
FC4E 02               (        forth.asm):04127         CCOMMA  fcb     2               79-STANDARD (REF)
FC4F 432C             (        forth.asm):04128                 fcc     'C,'
FC51 FC42             (        forth.asm):04129                 fdb     MROT
FC53 C7               (        forth.asm):04130                 RFCS
FC54 BDE831           (        forth.asm):04131 (7)             jsr     NPOP
FC57 1F10             (        forth.asm):04132 (4)             tfr     x,d
FC59 109E08           (        forth.asm):04133 (5)             ldy     DICEND
FC5C E7A0             (        forth.asm):04134 (4+1)           stb     ,y+
FC5E 109F08           (        forth.asm):04135 (5)             sty     DICEND
FC61 39               (        forth.asm):04136 (4)             rts
                      (        forth.asm):04137         
FC62 01               (        forth.asm):04138         COMMA   fcb     1               79-STANDARD (REQ143)
FC63 2C               (        forth.asm):04139                 fcc     ','
FC64 FC4E             (        forth.asm):04140                 fdb     CCOMMA
FC66 C7               (        forth.asm):04141                 RFCS
FC67 BDE831           (        forth.asm):04142 (7)             jsr     NPOP
FC6A 109E08           (        forth.asm):04143 (5)             ldy     DICEND
FC6D AFA1             (        forth.asm):04144 (5+2)           stx     ,y++
FC6F 109F08           (        forth.asm):04145 (5)             sty     DICEND
FC72 39               (        forth.asm):04146 (4)             rts
                      (        forth.asm):04147         
FC73 05               (        forth.asm):04148         ALLOT   fcb     5               79-STANDARD (REQ154)
FC74 414C4C4F54       (        forth.asm):04149                 fcc     'ALLOT'         ( signedbytecount -- )
FC79 FC62             (        forth.asm):04150                 fdb     COMMA
FC7B C7               (        forth.asm):04151                 RFCS
FC7C BDE831           (        forth.asm):04152 (7)             jsr     NPOP
FC7F DC08             (        forth.asm):04153 (4)             ldd     DICEND
FC81 308B             (        forth.asm):04154 (4+2)           leax    d,x
FC83 9F08             (        forth.asm):04155 (4)             stx     DICEND
FC85 39               (        forth.asm):04156 (4)             rts
                      (        forth.asm):04157         
FC86 04               (        forth.asm):04158         FILL    fcb     4               79-STANDARD (REQ234)
FC87 46494C4C         (        forth.asm):04159                 fcc     'FILL'
FC8B FC73             (        forth.asm):04160                 fdb     ALLOT
FC8D C7               (        forth.asm):04161                 RFCS
FC8E BDE831           (        forth.asm):04162 (7)             jsr     NPOP
FC91 1F16             (        forth.asm):04163 (4)             tfr     x,w             Byte fill value to W
FC93 BDE831           (        forth.asm):04164 (7)     FILL1   jsr     NPOP
FC96 1F12             (        forth.asm):04165 (4)             tfr     x,y             Byte count to Y
FC98 1E26             (        forth.asm):04166 (5)             exg     y,w             Byte count to W, byte fill value to Y
FC9A BDE831           (        forth.asm):04167 (7)             jsr     NPOP            Destination address to X
FC9D 105D             (        forth.asm):04168 (2)             tstw
FC9F 2F0B             (        forth.asm):04169 (3)             ble     @filend
FCA1 1F20             (        forth.asm):04170 (4)             tfr     y,d             Byte fill value to B
FCA3 E784             (        forth.asm):04171 (4+0)           stb     ,x
FCA5 105A             (        forth.asm):04172 (2)             decw
FCA7 3101             (        forth.asm):04173 (4+1)           leay    1,x
FCA9 113812           (        forth.asm):04174 (6+?)           tfm     x+,y+
FCAC 39               (        forth.asm):04175 (4)     @filend rts
                      (        forth.asm):04176         
FCAD 06               (        forth.asm):04177         BLANKS  fcb     6               79-STANDARD (REF152)
FCAE 424C414E4B53     (        forth.asm):04178                 fcc     'BLANKS'
FCB4 FC86             (        forth.asm):04179                 fdb     FILL
FCB6 C7               (        forth.asm):04180                 RFCS
FCB7 10860020         (        forth.asm):04181 (4)             ldw     #SP
FCBB 20D6             (        forth.asm):04182 (3)             bra     FILL1
                      (        forth.asm):04183         
FCBD 06               (        forth.asm):04184         CMOVED  fcb     6               FORTH-83
FCBE 434D4F56453E     (        forth.asm):04185                 fcc     'CMOVE>'
FCC4 FCAD             (        forth.asm):04186                 fdb     BLANKS
FCC6 C7               (        forth.asm):04187                 RFCS
FCC7 BDE5EA           (        forth.asm):04188 (7)             jsr     ACQMOVP
FCCA 105D             (        forth.asm):04189 (2)             tstw
FCCC 270D             (        forth.asm):04190 (3)             beq     @cmovd1
FCCE 105A             (        forth.asm):04191 (2)             decw
FCD0 103061           (        forth.asm):04192 (4)             addr    w,x
FCD3 103062           (        forth.asm):04193 (4)             addr    w,y
FCD6 105C             (        forth.asm):04194 (2)             incw
FCD8 113912           (        forth.asm):04195 (6+?)           tfm     x-,y-
FCDB 39               (        forth.asm):04196 (4)     @cmovd1 rts
                      (        forth.asm):04197         
FCDC 05               (        forth.asm):04198         CMOVE   fcb     5               79-STANDARD (REQ153)
FCDD 434D4F5645       (        forth.asm):04199                 fcc     'CMOVE'
FCE2 FCBD             (        forth.asm):04200                 fdb     CMOVED
FCE4 C7               (        forth.asm):04201                 RFCS
FCE5 BDE5EA           (        forth.asm):04202 (7)             jsr     ACQMOVP
FCE8 113812           (        forth.asm):04203 (6+?)           tfm     x+,y+
FCEB 39               (        forth.asm):04204 (4)             rts
                      (        forth.asm):04205         
FCEC 04               (        forth.asm):04206         MOVE    fcb     4               79-STANDARD (REQ113)
FCED 4D4F5645         (        forth.asm):04207                 fcc     'MOVE'          ( srcaddr dstaddr ncells -- )
FCF1 FCDC             (        forth.asm):04208                 fdb     CMOVE
FCF3 C7               (        forth.asm):04209                 RFCS
FCF4 BDE5EA           (        forth.asm):04210 (7)             jsr     ACQMOVP
FCF7 105D             (        forth.asm):04211 (2)             tstw
FCF9 2F06             (        forth.asm):04212 (3)             ble     @move1
FCFB 103066           (        forth.asm):04213 (4)             addr    w,w             Convert cells to bytes
FCFE 113812           (        forth.asm):04214 (6+?)           tfm     x+,y+
FD01 39               (        forth.asm):04215 (4)     @move1  rts
                      (        forth.asm):04216         
FD02 05               (        forth.asm):04217         CELLS   fcb     5               ANSI-X3.215-1994
FD03 43454C4C53       (        forth.asm):04218                 fcc     'CELLS'
FD08 FCEC             (        forth.asm):04219                 fdb     MOVE
FD0A C7               (        forth.asm):04220                 RFCS
FD0B BDE831           (        forth.asm):04221 (7)             jsr     NPOP
FD0E 103011           (        forth.asm):04222 (4)             addr    x,x
FD11 3610             (        forth.asm):04223                 UCNPUSH
FD13 39               (        forth.asm):04224 (4)             rts
                      (        forth.asm):04225         
FD14 04               (        forth.asm):04226         LAST    fcb     4               79-STANDARD (REF)
FD15 4C415354         (        forth.asm):04227                 fcc     'LAST'
FD19 FD02             (        forth.asm):04228                 fdb     CELLS
FD1B C7               (        forth.asm):04229                 RFCS
FD1C 9E06             (        forth.asm):04230 (4)             ldx     LSTWAD
FD1E 7EE823           (        forth.asm):04231 (3)             jmp     NPUSH
                      (        forth.asm):04232         
FD21 04               (        forth.asm):04233         HERE    fcb     4               79-STANDARD (REQ188)
FD22 48455245         (        forth.asm):04234                 fcc     'HERE'
FD26 FD14             (        forth.asm):04235                 fdb     LAST
FD28 C7               (        forth.asm):04236                 RFCS
FD29 9E08             (        forth.asm):04237 (4)             ldx     DICEND
FD2B 7EE823           (        forth.asm):04238 (3)             jmp     NPUSH
                      (        forth.asm):04239         
FD2E 02               (        forth.asm):04240         PLUSST  fcb     2               79-STANDARD (REQ157)
FD2F 2B21             (        forth.asm):04241                 fcc     '+!'            ( incr addr -- )
FD31 FD21             (        forth.asm):04242                 fdb     HERE
FD33 C7               (        forth.asm):04243                 RFCS
FD34 BDE4DC           (        forth.asm):04244 (7)             jsr     MIN2PST         We need at least two cells stacked up
FD37 AEC4             (        forth.asm):04245 (5+0)           ldx     ,u              ADDR to X
FD39 EC84             (        forth.asm):04246 (5+0)           ldd     ,x              @ADDR to D
FD3B E342             (        forth.asm):04247 (5+1)           addd    2,u             Add INCR to D
FD3D ED84             (        forth.asm):04248 (5+0)   PLUSST1 std     ,x              Store the sum back to ADDR
FD3F 3344             (        forth.asm):04249 (4+1)           leau    4,u             Drop two cells from the data stack
FD41 39               (        forth.asm):04250 (4)             rts
                      (        forth.asm):04251         
FD42 03               (        forth.asm):04252         ONEPST  fcb     3               79-STANDARD (REF)
FD43 312B21           (        forth.asm):04253                 fcc     '1+!'
FD46 FD2E             (        forth.asm):04254                 fdb     PLUSST
FD48 C7               (        forth.asm):04255                 RFCS
FD49 BDE4D7           (        forth.asm):04256 (7)             jsr     MIN1PST         At least one cell needs to be stacked up
FD4C AEC4             (        forth.asm):04257 (5+0)           ldx     ,u
FD4E EC84             (        forth.asm):04258 (5+0)           ldd     ,x
FD50 104C             (        forth.asm):04259 (2)             incd
FD52 ED84             (        forth.asm):04260 (5+0)           std     ,x
FD54 3342             (        forth.asm):04261 (4+1)           leau    2,u
FD56 39               (        forth.asm):04262 (4)             rts
                      (        forth.asm):04263         
FD57 02               (        forth.asm):04264         MINUSST fcb     2               79-STANDARD (REQ157)
FD58 2D21             (        forth.asm):04265                 fcc     '-!'            ( incr addr -- )
FD5A FD42             (        forth.asm):04266                 fdb     ONEPST
FD5C C7               (        forth.asm):04267                 RFCS
FD5D BDE4DC           (        forth.asm):04268 (7)             jsr     MIN2PST         We need at least two cells stacked up
FD60 AEC4             (        forth.asm):04269 (5+0)           ldx     ,u              ADDR to X
FD62 EC84             (        forth.asm):04270 (5+0)           ldd     ,x              @ADDR to D
FD64 A342             (        forth.asm):04271 (5+1)           subd    2,u             Substract INCR from D
FD66 20D5             (        forth.asm):04272 (3)             bra     PLUSST1
                      (        forth.asm):04273         
FD68 02               (        forth.asm):04274         CSTORE  fcb     2               79-STANDARD (REQ219)
FD69 4321             (        forth.asm):04275                 fcc     'C!'            ( val8 addr -- )
FD6B FD57             (        forth.asm):04276                 fdb     MINUSST
FD6D C7               (        forth.asm):04277                 RFCS
FD6E BDE4DC           (        forth.asm):04278 (7)             jsr     MIN2PST         We need at least two cells stacked up
FD71 A643             (        forth.asm):04279 (4+1)           lda     3,u             VAL8 to A
FD73 A7D4             (        forth.asm):04280 (4+3)           sta     [,u]            Actual store to ADDR
FD75 3344             (        forth.asm):04281 (4+1)           leau    4,u             Drop two cells from the data stack
FD77 39               (        forth.asm):04282 (4)             rts
                      (        forth.asm):04283         
FD78 01               (        forth.asm):04284         STORE   fcb     1               79-STANDARD (REQ112)
FD79 21               (        forth.asm):04285                 fcc     '!'             ( data addr -- )
FD7A FD68             (        forth.asm):04286                 fdb     CSTORE
FD7C C7               (        forth.asm):04287                 RFCS
FD7D BDE4DC           (        forth.asm):04288 (7)             jsr     MIN2PST         At least two cells need to be stacked up
FD80 EC42             (        forth.asm):04289 (5+1)           ldd     2,u             DATA to D
FD82 EDD4             (        forth.asm):04290 (5+3)           std     [,u]            Actual store to ADDR
FD84 3344             (        forth.asm):04291 (4+1)           leau    4,u             Drop two cells from the user stack
FD86 39               (        forth.asm):04292 (4)             rts
                      (        forth.asm):04293         
FD87 02               (        forth.asm):04294         CFETCH  fcb     2               79-STANDARD (REQ156)
FD88 4340             (        forth.asm):04295                 fcc     'C@'            ( addr -- val8 )
FD8A FD78             (        forth.asm):04296                 fdb     STORE
FD8C C7               (        forth.asm):04297                 RFCS
FD8D BDE4D7           (        forth.asm):04298 (7)             jsr     MIN1PST         We need at least one cell stacked up
FD90 4F               (        forth.asm):04299 (1)             clra
FD91 E6D4             (        forth.asm):04300 (4+3)           ldb     [,u]
FD93 EDC4             (        forth.asm):04301 (5+0)           std     ,u
FD95 39               (        forth.asm):04302 (4)             rts
                      (        forth.asm):04303         
FD96 01               (        forth.asm):04304         QMARK   fcb     1               79-STANDARD (REQ194)
FD97 3F               (        forth.asm):04305                 fcc     '?'
FD98 FD87             (        forth.asm):04306                 fdb     CFETCH
FD9A C7               (        forth.asm):04307                 RFCS
FD9B BD0C65           (        forth.asm):04308 (7)             jsr     RAMFTCH         Call the RAM based incarnation of @
FD9E 7EF5FF           (        forth.asm):04309                 RFXT    jmp,DOT+4       XT for .
                      (        forth.asm):04310         
                      (        forth.asm):04311         * End of ROM part of the builtin dictionary.
     FDA1             (        forth.asm):04312         THEEND  equ     *               This is the end, Beautiful friend
                      (        forth.asm):04313         *                               This is the end, My only friend
                      (        forth.asm):04314         
                      (        forth.asm):04315         * This transactional word is relocated to RAM, so that we can compile new
                      (        forth.asm):04316         * definitions. FORTHIN will take care of that and adjust the relevant pointers.
FDA1 01               (        forth.asm):04317         FETCH   fcb     1               79-STANDARD (REQ199)
FDA2 40               (        forth.asm):04318                 fcc     '@'             ( addr -- data )
FDA3 FD96             (        forth.asm):04319                 fdb     QMARK
FDA5 C7               (        forth.asm):04320                 RFCS
FDA6 BDE4D7           (        forth.asm):04321 (7)             jsr     MIN1PST         At least one cell needs to be stacked up
FDA9 ECD4             (        forth.asm):04322 (5+3)           ldd     [,u]
FDAB EDC4             (        forth.asm):04323 (5+0)           std     ,u              Returned through the data stack
FDAD 39               (        forth.asm):04324 (4)             rts
                      (        forth.asm):04325         
     FDAE             (        forth.asm):04326         REALEND equ     *
                      (        forth.asm):04327         
                      (        forth.asm):04328         *******************************************************************************
                      (        forth.asm):04329         * String literals.
                      (        forth.asm):04330         
                      (        forth.asm):04331         * Using CR+LF as it is Minicom's default.
                      (        forth.asm):04332         
                      (        forth.asm):04333         * Clear the screen, VT100 style.
FDAE 1B5B481B5B4A0D00 (        forth.asm):04334         CSVT100 fcb     $1B,'[','H',$1B,'[','J',CR,NUL
                      (        forth.asm):04335         
FDB6 0D0A             (        forth.asm):04336         BOOTMSG fcb     CR,LF
                      (        forth.asm):04337                 IFNE    RTCFEAT
                      (        forth.asm):04338                 fcc     'Z79Forth 6309/R FORTH-79 Standard Sub-set'
                      (        forth.asm):04339                 ELSE
FDB8 5A3739466F727468 (        forth.asm):04340                 fcc     'Z79Forth 6309/I FORTH-79 Standard Sub-set'
     20363330392F4920
     464F5254482D3739
     205374616E646172
     64205375622D7365
     74
                      (        forth.asm):04341                 ENDC                    RTCFEAT
FDE1 0D0A             (        forth.asm):04342                 fcb     CR,LF
FDE3 3230323230313136 (        forth.asm):04343                 fcc     '20220116 Copyright Francois Laagel (2019)'
     20436F7079726967
     6874204672616E63
     6F6973204C616167
     656C202832303139
     29
FE0C 0D0A0D0A00       (        forth.asm):04344                 fcb     CR,LF,CR,LF,NUL
                      (        forth.asm):04345         
FE11 52414D204F4B3A20 (        forth.asm):04346         RAMOKM  fcc     'RAM OK: 32 KB'
     3332204B42
FE1E 0D0A00           (        forth.asm):04347         CRLFSTR fcb     CR,LF,NUL
                      (        forth.asm):04348         
FE21 52414D2063686563 (        forth.asm):04349         RAMFM   fcc     'RAM check failed'
     6B206661696C6564
FE31 0D0A00           (        forth.asm):04350                 fcb     CR,LF,NUL
                      (        forth.asm):04351         
FE34 4D43313436383138 (        forth.asm):04352         RTPRESM fcc     'MC146818 RTC'
     20525443
FE40 0D0A00           (        forth.asm):04353                 fcb     CR,LF,NUL
                      (        forth.asm):04354         
                      (        forth.asm):04355                 IFEQ    CSSNTVE
FE43 206F6B           (        forth.asm):04356         OKFEEDB fcc     ' ok'           As per GNU Forth's implementation...
                      (        forth.asm):04357                 ELSE
FE46                  (        forth.asm):04358         OKFEEDB fcc     ' OK'
                      (        forth.asm):04359                 ENDC                    CSSNTVE
FE46 0D0A00           (        forth.asm):04360                 fcb     CR,LF,NUL
                      (        forth.asm):04361         
                      (        forth.asm):04362         * Error messages for IODZHDL.
FE49 496C6C6567616C20 (        forth.asm):04363         IOPERRM fcn     'Illegal opcode near '
     6F70636F6465206E
     6561722000
FE5E 4469766973696F6E (        forth.asm):04364         DV0ERRM fcn     'Division by 0 near '
     2062792030206E65
     61722000
                      (        forth.asm):04365         
FE72 4461746120737461 (        forth.asm):04366         ERRMTBL fcn     'Data stack overflow'   Error 0
     636B206F76657266
     6C6F7700
FE86 4461746120737461 (        forth.asm):04367                 fcn     'Data stack underflow'  Error 1
     636B20756E646572
     666C6F7700
FE9B 3F00             (        forth.asm):04368                 fcn     '?'                     Error 2
FE9D 557365722041424F (        forth.asm):04369                 fcn     'User ABORT'            Error 3
     525400
FEA8 00               (        forth.asm):04370                 fcn     ''                      Error 4 (formerly "Division by zero")
FEA9 4D697373696E6720 (        forth.asm):04371                 fcn     'Missing word name'     Error 5
     776F7264206E616D
     6500
FEBB 496E636F72726563 (        forth.asm):04372                 fcn     'Incorrect STATE'       Error 6
     7420535441544500
FECB 52657475726E2073 (        forth.asm):04373                 fcn     'Return stack overflow' Error 7
     7461636B206F7665
     72666C6F7700
FEE1 52657475726E2073 (        forth.asm):04374                 fcn     'Return stack underflow' Error 8
     7461636B20756E64
     6572666C6F7700
FEF8 496C6C6567616C20 (        forth.asm):04375                 fcn     'Illegal construct'     Error 9
     636F6E7374727563
     7400
FF0A 417373657274696F (        forth.asm):04376                 fcn     'Assertion failed'      Error 10
     6E206661696C6564
     00
FF1B 522F4F20776F7264 (        forth.asm):04377                 fcn     'R/O word'              Error 11
     00
FF24 4D697373696E6720 (        forth.asm):04378                 fcn     'Missing delimiter'     Error 12
     64656C696D697465
     7200
FF36 496C6C6567616C20 (        forth.asm):04379                 fcn     'Illegal argument'      Error 13
     617267756D656E74
     00
FF47 4E6F206D61746368 (        forth.asm):04380                 fcn     'No matching CREATE'    Error 14
     696E672043524541
     544500
FF5A 496E76616C696420 (        forth.asm):04381                 fcn     'Invalid BASE'          Error 15
     4241534500
FF67 576F7264206E616D (        forth.asm):04382                 fcn     'Word name too long'    Error 16
     6520746F6F206C6F
     6E6700
FF7A 494F206572726F72 (        forth.asm):04383                 fcn     'IO error'              Error 17
     00
                      (        forth.asm):04384         
                      (        forth.asm):04385         * A-list used for numeric literal base prefixes.
FF83 24               (        forth.asm):04386         BASALST fcc     '$'             Hexadecimal prefix
FF84 10               (        forth.asm):04387                 fcb     16
FF85 26               (        forth.asm):04388                 fcc     '&'             Decimal prefix
FF86 0A               (        forth.asm):04389                 fcb     10
FF87 23               (        forth.asm):04390                 fcc     '#'             Decimal prefix (an ANSI concession)
FF88 0A               (        forth.asm):04391                 fcb     10
FF89 25               (        forth.asm):04392                 fcc     '%'             Binary prefix
FF8A 02               (        forth.asm):04393                 fcb     2
FF8B 40               (        forth.asm):04394                 fcc     '@'             Octal prefix
FF8C 08               (        forth.asm):04395                 fcb     8
FF8D 00               (        forth.asm):04396                 fcb     0               End of list marker
                      (        forth.asm):04397         
                      (        forth.asm):04398         * Under no circumstance should the following symbol be negative!
     0062             (        forth.asm):04399         AVL     equ     VECTBL-*        Available EEPROM space left
                      (        forth.asm):04400         
                      (        forth.asm):04401         *******************************************************************************
                      (        forth.asm):04402         * Interrupt vector table
                      (        forth.asm):04403                 org     VECTBL
                      (        forth.asm):04404         
FFF0 E000             (        forth.asm):04405                 fdb     IODZHDL         Illegal opcode/Division by zero trap
FFF2 E036             (        forth.asm):04406                 fdb     SWI3HDL         SWI 3 interrupt vector address
FFF4 E036             (        forth.asm):04407                 fdb     SWI2HDL         SWI 2 interrupt vector address
FFF6 E28C             (        forth.asm):04408                 fdb     FIRQHDL         FIRQ interrupt vector address
FFF8 E036             (        forth.asm):04409                 fdb     IRQHDL          IRQ interrupt vector address
FFFA E036             (        forth.asm):04410                 fdb     SWIHDL          SWI interrupt vector address
FFFC E1CC             (        forth.asm):04411                 fdb     NMIHDL          NMI vector address
FFFE E037             (        forth.asm):04412                 fdb     RSTHDL          RESET vector address
                      (        forth.asm):04413         

Symbol Table:
[ G] _BS                              E349
[ G] _INTERP                          E0CA
[ G] ABORT                            F156
[ G] ABS                              EFED
[ G] AC8N1                            0014
[ G] ACCEPT                           F74E
[ G] ACDIV16                          0001
[ G] ACIACTL                          D800
[ G] ACIADAT                          D801
[ G] ACIISVC                          0080
[ G] ACIOVRN                          0020
[ G] ACIRDRF                          0001
[ G] ACIRSET                          0043
[ G] ACIRTS0                          0095
[ G] ACIRTS1                          00D5
[ G] ACISTM                           E25B
[ G] ACITDRE                          0002
[ G] ACQMOVP                          E5EA
[ G] ACQVMRA                          E5ED
[ G] ACRDINT                          0080
[ G] ACRST                            0003
[ G] ACRTS0                           0000
[ G] ACRTS1                           0040
[ G] ADDS                             E1AC
[ G] ADIV16                           E17F
[ G] AGAIN                            F026
[ G] ALLOT                            FC73
[ G] AND                              EEDA
[ G] AVL                              0062
[ G] BASALST                          FF83
[ G] BASBKUP                          012E
[ G] BASE                             FAE4
[ G] BCSOPC                           2503
[ G] BDICEND                          010C
[ G] BDIRTY                           0004
[ G] BEGIN                            F018
[ G] BFDISP                           0410
[ G] BIN                              FAF2
[ G] BINUSE                           0001
[ G] BKCHAR                           F2D1
[ G] BKIN2PT                          E877
[ G] BKQUOT                           F1A3
[ G] BKSLSH                           F382
[ G] BL                               F66B
[ G] BLANKS                           FCAD
[ G] BLK                              EAAF
[ G] BLKSIZ                           0400
[ G] BLOCK                            EA80
[ G] BLSTWAD                          010A
[ G] BMAPPD                           0002
[ G] BNEOPC                           2603
[ G] BOBLKNO                          0402
[ G] BOFLAGS                          0401
[ G] BOOTMSG                          FDB6
[ G] BOTERM                           0400
[ G] BS                               0008
[ G] BSBFADR                          011C
[ G] BUF0                             0440
[ G] BUF1                             0850
[ G] BUFFER                           EA33
[ G] BYE                              F2C7
[ G] CCOMMA                           FC4E
[ G] CCREGM                           E235
[ G] CELLS                            FD02
[ G] CF1BKRD                          E982
[ G] CF1BKWR                          E99D
[ G] CF1BPRE                          E965
[ G] CF1SRD                           E931
[ G] CF1SWR                           E950
[ G] CFANTHS                          E8DC
[ G] CFBASE                           C000
[ G] CFBSYB                           0080
[ G] CFCARDP                          013E
[ G] CFCHIGR                          C005
[ G] CFCLOWR                          C004
[ G] CFCMDIS                          E8C1
[ G] CFCMMIR                          013F
[ G] CFCOMDR                          C007
[ G] CFDATAR                          C000
[ G] CFDRHDR                          C006
[ G] CFDRQB                           0008
[ G] CFDRSEL                          E8D3
[ G] CFDSCB                           0010
[ G] CFDWFB                           0020
[ G] CFERRB                           0001
[ G] CFERRCD                          0140
[ G] CFERRCK                          E8B4
[ G] CFERROR                          C001
[ G] CFETCH                           FD87
[ G] CFFEATR                          C001
[ G] CFIDDEV                          00EC
[ G] CFINIT                           E8FA
[ G] CFLAG                            0001
[ G] CFR1SRA                          E94F
[ G] CFRDY                            E89E
[ G] CFRDYB                           0040
[ G] CFRSCTS                          0020
[ G] CFSCNTR                          C002
[ G] CFSCSZ                           0200
[ G] CFSETFT                          00EF
[ G] CFSNUMR                          C003
[ G] CFSTATR                          C007
[ G] CFWAIT                           E896
[ G] CFWSCTS                          0030
[ G] CHAR                             F2E0
[ G] CHKNDPT                          E4CC
[ G] CHKRTS                           E144
[ G] CKBASE                           E41A
[ G] CKBASRA                          E42A
[ G] CKDPTRA                          E4D7
[ G] CKNBPFX                          E3ED
[ G] CMDBFSZ                          0084
[ G] CMDBUF                           0316
[ G] CMDLNSZ                          012F
[ G] CMOVE                            FCDC
[ G] CMOVED                           FCBD
[ G] CMP2                             E5D6
[ G] CMP2RA                           E5D9
[ G] CMPCOM1                          F1FD
[ G] CMPCOMA                          F1EE
[ G] COM                              EEEE
[ G] COM0                             EEF5
[ G] COMMA                            FC62
[ G] COMP                             E119
[ G] COMPC                            F200
[ G] COMPLRA                          E12D
[ G] COMPR                            F218
[ G] CONS                             EC55
[ G] CONTIND                          F7F9
[ G] COUNT                            F6E4
[ G] CR                               000D
[ G] CREAT0                           EBE4
[ G] CREAT1                           EBFC
[ G] CREATE                           EBDA
[ G] CRLF                             F6B0
[ G] CRLFSTR                          FE1E
[ G] CSSNTVE                          0000
[ G] CSTORE                           FD68
[ G] CSUMFLM                          ECF8
[ G] CSVT100                          FDAE
[ G] CURTOKL                          0139
[ G] CVISSGN                          0138
[ G] CVNSTR                           E483
[ G] CVT                              F53E
[ G] CVT0                             F545
[ G] CVT1                             F54D
[ G] CVTB                             F5EE
[ G] CVTE                             F4F2
[ G] CVTFCN                           0136
[ G] DASHTR                           F6FA
[ G] DDUMP                            FB43
[ G] DEBUG                            0000
[ G] DECIMAL                          FB0E
[ G] DEFFLG                           013B
[ G] DEFFLM                           0040
[ G] DEPTH                            EBC4
[ G] DEV0                             C000
[ G] DEV1                             C400
[ G] DEV2                             C800
[ G] DEV3                             CC00
[ G] DEV4                             D000
[ G] DEV5                             D400
[ G] DEV6                             D800
[ G] DEV7                             DC00
[ G] DICEND                           0108
[ G] DIFF                             EE7A
[ G] DIV                              F944
[ G] DIV1                             F94D
[ G] DIVFCN                           0133
[ G] DLESS                            F456
[ G] DNEG                             F426
[ G] DO                               ED59
[ G] DOES                             EC04
[ G] DOESEX                           EC13
[ G] DOEX                             ED6C
[ G] DOT                              F5FA
[ G] DOTR                             F624
[ G] DOTR0                            F62E
[ G] DOTTICK                          FB2C
[ G] DPLUS                            F407
[ G] DPOPRA                           E83F
[ G] DPREGM                           E241
[ G] DPSHRA                           E830
[ G] DREGM                            E239
[ G] DROP                             FBBA
[ G] DUP                              FBAB
[ G] DV0ERRM                          FE5E
[ G] DZEQ                             F449
[ G] EBUFS                            E9B8
[ G] ELSE                             EE2E
[ G] EMIT                             F853
[ G] EMPT1B                           E3C2
[ G] EMPTYB                           E3BA
[ G] EMXASXT                          E158
[ G] END                              F08F
[ G] EQ                               EE61
[ G] ERRHD1                           E7A5
[ G] ERRHDLR                          E7A2
[ G] ERRMTBL                          FE72
[ G] ERRPCK                           FBF1
[ G] ETX                              0003
[ G] EXCT                             F2AD
[ G] EXIT                             F044
[ G] EXPCT1                           F73F
[ G] EXPECT                           F735
[ G] F83DIVF                          0134
[ G] FDCTSYM                          E5F8
[ G] FDIVADJ                          F981
[ G] FETCH                            FDA1
[ G] FFLAG                            0040
[ G] FILL                             FC86
[ G] FILL1                            FC93
[ G] FIND                             F16A
[ G] FINDSYM                          E66C
[ G] FIRQHDL                          E28C
[ G] FLUSH                            EA0D
[ G] FNDPLD                           0110
[ G] FORGET                           F260
[ G] FORTHIN                          E398
[ G] GETCH                            E2F3
[ G] GETS                             E355
[ G] HDMP2                            E19D
[ G] HDMP4                            E184
[ G] HDRCSUM                          ECEC
[ G] HDRSKIP                          ECE2
[ G] HERE                             FD21
[ G] HEX                              FB1F
[ G] HEX1D                            E16B
[ G] HEXBFSZ                          0050
[ G] HEXBUF                           039A
[ G] HOLD                             F522
[ G] HT                               0009
[ G] HVCONV                           0000
[ G] HVNMI                            0001
[ G] ICHECK                           ED0F
[ G] IF                               EDED
[ G] IFEX                             EE15
[ G] IFLAG                            0010
[ G] ILLOPC                           00C7
[ G] IMDFLG                           013A
[ G] IMDFLM                           0080
[ G] IMMED                            EC9C
[ G] IMMED1                           ECAB
[ G] INDEX                            EAF1
[ G] INDI                             F0F4
[ G] INDIP                            F119
[ G] INDJ                             F123
[ G] INDJP                            F12C
[ G] INDK                             F136
[ G] INF                              EFAC
[ G] INIT                             E047
[ G] INSBPAD                          F5DB
[ G] INTERP                           E0B2
[ G] INTISRA                          E109
[ G] INTRPRA                          E114
[ G] INVERT                           EF01
[ G] IODZHDL                          E000
[ G] IOERR                            E94A
[ G] IOPERRM                          FE49
[ G] IOSTRT                           C000
[ G] IRDPTH                           0131
[ G] IRQHDL                           E036
[ G] ISNEGF                           0137
[ G] JMPOPC                           007E
[ G] JSRLAST                          0114
[ G] JSROPC                           00BD
[ G] KEY                              F841
[ G] KEYP                             F82E
[ G] LAST                             FD14
[ G] LBRACK                           F19B
[ G] LDXOPC                           008E
[ G] LEAVE                            F0DF
[ G] LF                               000A
[ G] LINE                             EAD6
[ G] LIST                             EB4F
[ G] LITER                            E5BA
[ G] LITERAL                          EC31
[ G] LOAD                             F788
[ G] LOAD1                            F799
[ G] LOCWRT                           E559
[ G] LOOP                             ED75
[ G] LOOP1                            ED80
[ G] LOOPEX                           ED9C
[ G] LPAR                             F34A
[ G] LSTWAD                           0106
[ G] LWMNRA                           E56F
[ G] MAX                              EFBB
[ G] MDIV                             F99B
[ G] MILLIS                           F813
[ G] MILLIS1                          F822
[ G] MIN                              EFD4
[ G] MIN1PST                          E4D7
[ G] MIN2PST                          E4DC
[ G] MIN3PST                          E4E1
[ G] MIN4PST                          E4E6
[ G] MINTLRA                          E0C8
[ G] MINUS                            F897
[ G] MINUSST                          FD57
[ G] MOD                              F98E
[ G] MONFLM                           0020
[ G] MONITOR                          ECC5
[ G] MORE                             E0E5
[ G] MOVE                             FCEC
[ G] MROT                             FC42
[ G] MRUBUFA                          011A
[ G] MSLCNT                           031A
[ G] MULT                             F911
[ G] NAK                              0015
[ G] NBCTFB0                          013C
[ G] NCLR                             EBA8
[ G] NDCTWKS                          E692
[ G] NEGATE                           F004
[ G] NIP                              FBA0
[ G] NMCVCRA                          E13F
[ G] NMCVIRA                          E0E0
[ G] NMI2DM                           E1B7
[ G] NMI4DM                           E1BD
[ G] NMIDML                           E1C3
[ G] NMIHDL                           E1CC
[ G] NOT                              EF59
[ G] NPOP                             E831
[ G] NPUSH                            E823
[ G] NSTBOT                           0296
[ G] NSTKSZ                           00C0
[ G] NSTTOP                           01D6
[ G] NUL                              0000
[ G] NULP                             EF41
[ G] NUMCVRA                          E482
[ G] NUMCVT                           E42A
[ G] NXTBLK                           F7DE
[ G] NXTBLK1                          F7E9
[ G] OCTAL                            FAFF
[ G] OKFEEDB                          FE43
[ G] ONEL                             F8D3
[ G] ONEM                             F8A8
[ G] ONEP                             F876
[ G] ONEPST                           FD42
[ G] OR                               EEC7
[ G] OVER                             FC0B
[ G] PAD                              F6B9
[ G] PADBSZ                           0051
[ G] PADBUF                           0185
[ G] PAGE                             F6A2
[ G] PAYLOAD                          F9F3
[ G] PCREGM                           E252
[ G] PICK                             FBD9
[ G] PICK1                            FBE4
[ G] PLOAD                            010E
[ G] PLOOP                            EDA1
[ G] PLOOPEX                          EDAF
[ G] PLOPEX1                          EDB2
[ G] PLUS                             F865
[ G] PLUSST                           FD2E
[ G] PLUSST1                          FD3D
[ G] POSTPON                          F1AF
[ G] pragma                           0000
[ G] PRBLKIN                          E775
[ G] PSTR                             F3A0
[ G] PTOP0                            F603
[ G] PUTCH                            E31F
[ G] PUTCR                            E33F
[ G] PUTS                             E332
[ G] QMARK                            FD96
[ G] QRYDUP                           FB7E
[ G] QUIT                             F13F
[ G] RAMCHK                           E057
[ G] RAMFAIL                          E069
[ G] RAMFM                            FE21
[SG] RAMFTCH                          0C65
[SG] RAMFTCH                          0C64
[ G] RAMOK                            E07B
[ G] RAMOKM                           FE11
[ G] RAMSIZE                          8000
[ G] RAMSTRT                          0000
[ G] RBRACK                           F191
[ G] RCLR                             EBB4
[ G] RDEPTH                           0130
[ G] REALEND                          FDAE
[ G] RECADDR                          0112
[ G] RECURSE                          F250
[SG] RELFEAT                          0001
[ G] REPEAT                           F0A4
[ G] RFETCH                           F111
[ G] RFROM                            F0C7
[ G] ROLL                             FC18
[ G] ROLL1                            FC23
[ G] ROMSTRT                          E000
[ G] ROT                              FC36
[ G] RPICKN                           F0FB
[ G] RPOP                             E85E
[ G] RPOPRA                           E877
[ G] RPSHRA                           E85D
[ G] RPUSH                            E840
[ G] RSBSPFX                          E413
[ G] RSP                              0100
[ G] RSTBOT                           0316
[ G] RSTHDL                           E037
[ G] RSTKSZ                           0080
[ G] RSTRCT                           ECB5
[ G] RSTTOP                           0296
[ G] RTADV32                          0020
[ G] RTADVRS                          0070
[ G] RTARS64                          000A
[ G] RTAS                             D400
[ G] RTAUIP                           0080
[ G] RTB24                            0002
[ G] RTBDM                            0004
[ G] RTBPIE                           0040
[ G] RTBSET                           0080
[ G] RTCAVL                           013D
[ G] RTCFEAT                          0000
[ G] RTCFTCH                          EB36
[ G] RTCPF                            0040
[ G] RTCSTOR                          EB44
[ G] RTDS                             D401
[ G] RTODOM                           0007
[ G] RTODOW                           0006
[ G] RTOHOUR                          0004
[ G] RTOHRA                           0005
[ G] RTOMIN                           0002
[ G] RTOMINA                          0003
[ G] RTOMON                           0008
[ G] RTOPRES                          003F
[ G] RTOREGA                          000A
[ G] RTOREGB                          000B
[ G] RTOREGC                          000C
[ G] RTOREGD                          000D
[ G] RTOSEC                           0000
[ G] RTOSECA                          0001
[ G] RTOUMB                           000E
[ G] RTOYEAR                          0009
[ G] RTPRESM                          FE34
[ G] RTSOPC                           0039
[ G] RTSREMV                          0132
[ G] RTUMSZ                           0032
[ G] SAVBUF                           E9CC
[ G] SBASEM                           E264
[ G] SBCNTM                           E273
[ G] SBDROPC                          012C
[ G] SBDRPM                           E278
[ G] SBENQM                           E269
[ G] SBSEQM                           E26E
[ G] SCNETOK                          E3DB
[ G] SCNSTOK                          E3CD
[ G] SCR                              EAC9
[ G] SERBCNT                          0143
[ G] SERBDEQ                          0142
[ G] SERBENQ                          0141
[ G] SERBSZ                           0040
[ G] SERBUF                           0145
[ G] SHARPS                           F532
[ G] SHIFT                            F8E9
[ G] SIGN                             F50B
[ G] SINFEQ                           EE94
[ G] SLEN                             E27D
[ G] SOURCE                           F364
[ G] SP                               0020
[ G] SPACE                            F677
[ G] SPACES                           F685
[ G] SQUOTE                           F3B5
[ G] SREGM                            E257
[ G] SSDFEAT                          0001
[ G] STATE                            FAD5
[ G] STOD                             EB8E
[ G] STORE                            FD78
[ G] STRSL1                           F9B1
[ G] STRSLMD                          F9DC
[ G] STRSLSH                          F9A7
[ G] STSLFCN                          0135
[ G] SUP                              EF9D
[ G] SWAP                             FBC5
[ G] SWDIC                            E4EB
[ G] SWI2HDL                          E036
[ G] SWI3HDL                          E036
[ G] SWIHDL                           E036
[ G] SYSSTK                           F9E9
[ G] TBUFF                            03EA
[ G] TBUFSZ                           0048
[ G] TERPRET                          F75E
[ G] THEEND                           FDA1
[ G] THEN                             EE4F
[ G] THRU                             F7BC
[ G] TICKS                            EB25
[ G] TIKSHI                           0128
[ G] TIKSLOW                          012A
[ G] TOIN                             EABC
[ G] TOKENEP                          0104
[ G] TOKENSP                          0102
[ G] TOR                              F0D3
[ G] TUCK                             FB94
[ G] TWODIV                           F934
[ G] TWODROP                          F4A5
[ G] TWODUP                           F4B4
[ G] TWOFTCH                          F4DE
[ G] TWOL                             F8DE
[ G] TWOM                             F8B8
[ G] TWOOVER                          F46F
[ G] TWOP                             F886
[ G] TWOSTOR                          F4CC
[ G] TWOSWAP                          F488
[ G] TWOTIM                           F924
[ G] TYPE                             F6C6
[ G] U2INFRD                          E166
[ G] UBASE                            011E
[ G] UBLK                             0124
[ G] UDOT                             F61A
[ G] UDOTR                            F660
[ G] UINF                             EF72
[ G] UNLESS                           EE1C
[ G] UNLOOP                           EDDD
[ G] UNTIL                            F066
[ G] UPDATE                           EA18
[ G] UREGM                            E24E
[ G] USCR                             0126
[ G] USTATE                           0120
[ G] USUP                             EF62
[ G] UTOIN                            0122
[ G] VARCON                           E5CC
[ G] VARCON1                          E5CE
[ G] VARCON2                          E5D1
[ G] VARI                             EC77
[ G] VARSPC                           0100
[ G] VECTBL                           FFF0
[ G] VLIST                            FA03
[ G] VLPRVEP                          0116
[ G] VLPRVHD                          0118
[ G] WBIFDRT                          E9E4
[ G] WDICSPC                          0C60
[ G] WHILE                            F098
[ G] WITHIN                           EF82
[ G] WORD                             F307
[ G] WREGM                            E23D
[ G] WRLNMSK                          001F
[ G] WTOOLNG                          E58C
[ G] XMITOK                           0144
[ G] XMTOKM                           E25F
[ G] XOFF                             0013
[ G] XON                              0011
[ G] XOR                              EEB0
[ G] XOR1                             EEC2
[ G] XREGM                            E246
[ G] YREGM                            E24A
[ G] ZEROL                            F8C9
[ G] ZFLAG                            0004
[ G] ZGREAT                           EF0D
[ G] ZLESS                            EF27
