                      (        forth.asm):00001         * 6309 Forth based on my 1984/07/16 TRS-80 Model 1 level II ROM implementation.
                      (        forth.asm):00002         *
                      (        forth.asm):00003         * This work is dedicated to Alain Pinaud, author of "Programmer en Forth"
                      (        forth.asm):00004         * published by Editions du P.S.I. in 1983--i.e. my virtual mentor in the field.
                      (        forth.asm):00005         * Special thanks go William Astle for his fantastic LW Tools utility set and
                      (        forth.asm):00006         * to Robert Lipe for his advice on serial line handling. Apache subversion
                      (        forth.asm):00007         * and the sdiff utility also were on my side all the time.
                      (        forth.asm):00008         *
                      (        forth.asm):00009         * Also credited for their help: Justin Poirier (seminal HW design), Daniel
                      (        forth.asm):00010         * Tufvesson (CompactFlash interface), Peter Forth (FB alias), Paul E. Bennett
                      (        forth.asm):00011         * and Michel Jean.
                      (        forth.asm):00012         *
                      (        forth.asm):00013         * This is a native Forth. Not a threaded interpretive implementation.
                      (        forth.asm):00014         * Worth noticing is the fact that the return stack does not hold return
                      (        forth.asm):00015         * addresses at all. All what is stored there is loop indexes and control
                      (        forth.asm):00016         * structures jump addresses. Actual return addresses are kept in the system
                      (        forth.asm):00017         * stack. All in all, this is the result of the work of a 19 year old guy,
                      (        forth.asm):00018         * heavily revisited 35 years later. Some quirks remain that prevent me
                      (        forth.asm):00019         * from offering the full required set--not to mention the choice of using
                      (        forth.asm):00020         * an 8K EEPROM. The downside of this implementation is that the generated
                      (        forth.asm):00021         * code is about 30% larger than a threaded interpretive implementation
                      (        forth.asm):00022         * would be. So it goes...
                      (        forth.asm):00023         *
                      (        forth.asm):00024         * The code generated is limited to a very small instruction set:
                      (        forth.asm):00025         *
                      (        forth.asm):00026         * LDXOPC        $8E     LDX (immediate)
                      (        forth.asm):00027         * JMPOPC        $7E     JMP (extended)
                      (        forth.asm):00028         * JSROPC        $BD     JSR (extended)
                      (        forth.asm):00029         * RTSOPC        $39     RTS (inherent)
                      (        forth.asm):00030         * BCSOPC        $2503   BCS *+5 (relative) Used in LOOP, +LOOP
                      (        forth.asm):00031         * BNEOPC        $2603   BNE *+5 (relative) Used in IF, UNTIL
                      (        forth.asm):00032         *
                      (        forth.asm):00033         * On error, the system stack pointer is reset. The return stack also is
                      (        forth.asm):00034         * but the data stack will be in the same state as when the error occurred.
                      (        forth.asm):00035         * ABORT and QUIT enforce their own 79-STANDARD behaviour.
                      (        forth.asm):00036         *
                      (        forth.asm):00037         * The 79-STANDARD Forth specification can be downloaded from
                      (        forth.asm):00038         * https://www.complang.tuwien.ac.at/forth/fth79std/FORTH-79.TXT
                      (        forth.asm):00039         *
                      (        forth.asm):00040         * Additionally, this implementation provides a few FORTH-83 words. Those
                      (        forth.asm):00041         * words are CMOVE> and RECURSE. See
                      (        forth.asm):00042         * http://forth.sourceforge.net/standard/fst83/FORTH-83.PRN
                      (        forth.asm):00043         *
                      (        forth.asm):00044         * \ ['] [CHAR] .S ACCEPT CELLS CHAR COMPILE, INVERT KEY? NIP POSTPONE S>D S"
                      (        forth.asm):00045         * SOURCE TUCK U> * UNLOOP and WITHIN have been borrowed from the ANSI draft 6
                      (        forth.asm):00046         * specification. See http://www.forth.org/svfig/Win32Forth/DPANS94.txt
                      (        forth.asm):00047         *
                      (        forth.asm):00048         * RESTRICT is non-standard. It comes from GNU Forth (VolksForth). The " OK"
                      (        forth.asm):00049         * non-prompt string also does, by the way. Thanks to Anton Ertl for his terse
                      (        forth.asm):00050         * yet valuable input.
                      (        forth.asm):00051         *
                      (        forth.asm):00052         * .' (dot-tick) is non-standard. It comes from SwiftForth. It will be supported
                      (        forth.asm):00053         * if symbolic stack dump has not been disabled (see SSDFEAT in constants.asm).
                      (        forth.asm):00054         *
                      (        forth.asm):00055         * MONITOR and ICHECK are also non-standard. They are intended to maintain and
                      (        forth.asm):00056         * verify the integrity of a checksum of the code section of RAM resident
                      (        forth.asm):00057         * words, with the exception of VARIABLEs and CREATEd words. CREATEd words,
                      (        forth.asm):00058         * if subject to the MONITOR treatment will also carry a code section
                      (        forth.asm):00059         * checksum, although this is not the default behaviour. The checksum will
                      (        forth.asm):00060         * consist in an extra byte added to every word's header. MONITOR and ICHECK
                      (        forth.asm):00061         * will only be available if the reliability feature has not been disabled
                      (        forth.asm):00062         * (see RELFEAT in constants.asm).
                      (        forth.asm):00063         *
                      (        forth.asm):00064         * Forth source code portability note:
                      (        forth.asm):00065         * Because Z79Forth does not use the return stack to store return addresses,
                      (        forth.asm):00066         * it makes it quite easy to write code that is not readily portable to classic
                      (        forth.asm):00067         * threaded interpretive implementations. The resulting code will be simpler but
                      (        forth.asm):00068         * portability will be limited.
                      (        forth.asm):00069         *
                      (        forth.asm):00070         * Miscellaneous notes: RA stands for return address; EP for entry point.
                      (        forth.asm):00071         * CF is a shortcut for CompactFlash. TOS means top of the data/normal stack.
                      (        forth.asm):00072         * Occasionally, CFA is used for code field address which, in this
                      (        forth.asm):00073         * implementation, is a synonym for compilation address. XT means execution
                      (        forth.asm):00074         * token--the ANSI term for a compilation address. MSC stands for most
                      (        forth.asm):00075         * significant cell; LSC for least significant cell.
                      (        forth.asm):00076         *
                      (        forth.asm):00077         * The complete guide to the HD6309 extended instruction set can be found at:
                      (        forth.asm):00078         * https://cyberabi.ipower.com/Downloads/The_6309_Book.pdf. For convenience,
                      (        forth.asm):00079         * and with the author's explicit agreement, this document has been included
                      (        forth.asm):00080         * in this distribution. This is recommended reading for anyone altering this
                      (        forth.asm):00081         * code or trying to make some sense of it!!!
                      (        forth.asm):00082         *
                      (        forth.asm):00083         * This whole effort started out as a porting endeavour and ended up being a
                      (        forth.asm):00084         * substantial rewrite, trying to take advantage of the features of the 6309
                      (        forth.asm):00085         * as much as possible. The primary goals of this implementation are:
                      (        forth.asm):00086         * reliability, performance and code compactness. A number of bugs in the
                      (        forth.asm):00087         * original code have been fixed--some remain for sure!
                      (        forth.asm):00088         *
                      (        forth.asm):00089         * Obligatory literary reference:
                      (        forth.asm):00090         * "The paper is very heavy going, and I should never have read it, had I not
                      (        forth.asm):00091         * written it myself." J. E. Littlewood (1885-1977).
                      (        forth.asm):00092         *
                      (        forth.asm):00093         * The original soundtrack for this work is available at:
                      (        forth.asm):00094         * https://youtu.be/YqXZtGyFyDo?t=4023 (J.S. Bach BWV 1080, contrapunctus 14).
                      (        forth.asm):00095         
0000                  (        forth.asm):00096         pragma  opt cd,operandsizewarning
                      (        forth.asm):00097         
                      (        forth.asm):00098                 include constants.asm
                      (    constants.asm):00001         * Begin configuration tunable parameters.
                      (    constants.asm):00002         
     0000             (    constants.asm):00003         HVFIRQ  equ     0               Enable FIRQ on ACIA RDRF (req. 2.2 schematics)
     0000             (    constants.asm):00004         VT100   equ     0               Set to 1 to operate at RS232@9600
                      (    constants.asm):00005         *                               This implies an Y1 CXO at 2.45760 MHz.
                      (    constants.asm):00006         *                               Default is 0 for USB@115200 (7.37280 MHz CXO).
     0000             (    constants.asm):00007         CSSNTVE equ     0               Words and HEX numbers are case sensitive if NZ
     0001             (    constants.asm):00008         HVCONV  equ     1               Include CONVERT in the default dictionary
     0001             (    constants.asm):00009         SSDFEAT equ     1               Set to 1 to enable the symbolic stack dump feat.
     0001             (    constants.asm):00010         RELFEAT equ     1               Set to 1 to enable the reliability feature
                      (    constants.asm):00011         *                               Caution: when this is enabled, you can no
                      (    constants.asm):00012         *                               longer fit a DEBUG image into an 8 KB EEPROM
     0000             (    constants.asm):00013         DEBUG   equ     0               Enforce assertions and miscellaneous checks
                      (    constants.asm):00014         * Loop count for MS. This is busy waiting, so we depend on the CPU clock speed.
                      (    constants.asm):00015         *MSLCNT equ     496             at 3 MHz emulation mode
                      (    constants.asm):00016         *MSLCNT equ     662             at 4 MHz emulation mode
                      (    constants.asm):00017         *MSLCNT equ     794             at 4 MHz native mode
     03E2             (    constants.asm):00018         MSLCNT  equ     994             at 5 MHz native mode
                      (    constants.asm):00019         
                      (    constants.asm):00020         * End configuration tunable parameters.
                      (    constants.asm):00021         
                      (    constants.asm):00022         * Memory map.
     0000             (    constants.asm):00023         RAMSTRT equ     $0000
     8000             (    constants.asm):00024         RAMSIZE equ     $8000
     C000             (    constants.asm):00025         IOSTRT  equ     $C000
     E000             (    constants.asm):00026         ROMSTRT equ     $E000
     FFF0             (    constants.asm):00027         VECTBL  equ     $FFF0
                      (    constants.asm):00028         
                      (    constants.asm):00029         * Base address for global variables (direct page addressed).
     0100             (    constants.asm):00030         VARSPC  equ     $100
                      (    constants.asm):00031         
                      (    constants.asm):00032         * The 74HCT138 IO address decoder maps one 1 KB page per usable device.
     C000             (    constants.asm):00033         DEV0    equ     $C000           Compact Flash memory module
     C400             (    constants.asm):00034         DEV1    equ     $C400
     C800             (    constants.asm):00035         DEV2    equ     $C800
     CC00             (    constants.asm):00036         DEV3    equ     $CC00
     D000             (    constants.asm):00037         DEV4    equ     $D000
     D400             (    constants.asm):00038         DEV5    equ     $D400
     D800             (    constants.asm):00039         DEV6    equ     $D800           HD63B50 unit 0
     DC00             (    constants.asm):00040         DEV7    equ     $DC00
                      (    constants.asm):00041         
     D800             (    constants.asm):00042         ACIACTL equ     DEV6
     D801             (    constants.asm):00043         ACIADAT equ     DEV6+1
                      (    constants.asm):00044         
                      (    constants.asm):00045         * ACIA control register bits.
     0003             (    constants.asm):00046         ACRST   equ     11b             ACIA master reset
                      (    constants.asm):00047         
                      (    constants.asm):00048         * 115200 bps w. 7.37280 MHz oscillator, 38400 bps w. 2.45760 MHz oscillator.
     0001             (    constants.asm):00049         ACD16   equ     01b             ACIA div 16
                      (    constants.asm):00050         * 28800 bps w. 7.37280 MHz oscillator, bps 9600 w. 2.45760 MHz oscillator.
     0002             (    constants.asm):00051         ACD64   equ     10b             ACIA div 64
                      (    constants.asm):00052         
                      (    constants.asm):00053         * ACIA divider tuning. USB@115200 or RS232@9600 for a real DEC terminal.
                      (    constants.asm):00054                 IFEQ    VT100
     0001             (    constants.asm):00055         ACDVSEL equ     ACD16           Selected divider value (7.37280 MHz CXO)
                      (    constants.asm):00056                 ELSE
0000                  (    constants.asm):00057         ACDVSEL equ     ACD64           Switch to RS232@9600 (2.45760 MHz CXO)
                      (    constants.asm):00058                 ENDC
                      (    constants.asm):00059         
     0014             (    constants.asm):00060         AC8N1   equ     10100b          ACIA 8N1
     0000             (    constants.asm):00061         ACRTS0  equ     0000000b        ACIA RTS# low
     0040             (    constants.asm):00062         ACRTS1  equ     1000000b        ACIA RTS# high
                      (    constants.asm):00063                 IFNE    HVFIRQ
0000                  (    constants.asm):00064         ACRDINT equ     10000000b       IRQ on RDRF
0000                  (    constants.asm):00065         POLINTM MACRO   NOEXPAND        Poll/interrupt mode
                      (    constants.asm):00066                 fcb     'I'
                      (    constants.asm):00067                 ENDM
                      (    constants.asm):00068                 ELSE
     0000             (    constants.asm):00069         ACRDINT equ     0               No IRQ on RDRF
0000                  (    constants.asm):00070         POLINTM MACRO   NOEXPAND        Poll/interrupt mode
                      (    constants.asm):00071                 fcb     'P'
                      (    constants.asm):00072                 ENDM
                      (    constants.asm):00073                 ENDC
                      (    constants.asm):00074         
     0043             (    constants.asm):00075         ACIRSET equ     ACRTS1|ACRST
     0055             (    constants.asm):00076         ACIRTS1 equ     ACRTS1|ACRDINT|AC8N1|ACDVSEL
     0015             (    constants.asm):00077         ACIRTS0 equ     ACRTS0|ACRDINT|AC8N1|ACDVSEL
                      (    constants.asm):00078         
                      (    constants.asm):00079         * ACIA status register bits.
     0001             (    constants.asm):00080         ACIRDRF equ     1               Receive data register full
     0002             (    constants.asm):00081         ACITDRE equ     10b             Transmit data register empty
     0080             (    constants.asm):00082         ACIISVC equ     10000000b       Interrupt needs servicing
                      (    constants.asm):00083         
                      (    constants.asm):00084         * Compact Flash parameters.
     C000             (    constants.asm):00085         CFBASE  equ     DEV0
     C000             (    constants.asm):00086         CFDATAR equ     CFBASE          R/W data register
     C001             (    constants.asm):00087         CFERROR equ     CFBASE+1        RO error register
     C001             (    constants.asm):00088         CFFEATR equ     CFBASE+1        WO features register
     C002             (    constants.asm):00089         CFSCNTR equ     CFBASE+2        R/W sector count register
     C003             (    constants.asm):00090         CFSNUMR equ     CFBASE+3        R/W sector number register
     C004             (    constants.asm):00091         CFCLOWR equ     CFBASE+4        R/W cylinder low register
     C005             (    constants.asm):00092         CFCHIGR equ     CFBASE+5        R/W cylinder high register
     C006             (    constants.asm):00093         CFDRHDR equ     CFBASE+6        R/W drive/head register
     C007             (    constants.asm):00094         CFSTATR equ     CFBASE+7        RO status register
     C007             (    constants.asm):00095         CFCOMDR equ     CFBASE+7        WO command register
                      (    constants.asm):00096         
                      (    constants.asm):00097         * CF status bits.
     0080             (    constants.asm):00098         CFBSYB  equ     10000000b       BSY status bit
     0040             (    constants.asm):00099         CFRDYB  equ     01000000b       RDY status bit
     0020             (    constants.asm):00100         CFDWFB  equ     00100000b       DWF status bit (not used)
     0010             (    constants.asm):00101         CFDSCB  equ     00010000b       DSC status bit (not used)
     0008             (    constants.asm):00102         CFDRQB  equ     00001000b       DRQ status bit
     0001             (    constants.asm):00103         CFERRB  equ     00000001b       ERR status bit
                      (    constants.asm):00104         
     0200             (    constants.asm):00105         CFSCSZ  equ     $200            Compact Flash (IDE) sector size
                      (    constants.asm):00106         
                      (    constants.asm):00107         * CF commands.
     00EC             (    constants.asm):00108         CFIDDEV equ     $EC             Identify Device
     00EF             (    constants.asm):00109         CFSETFT equ     $EF             Set Feature
     0020             (    constants.asm):00110         CFRSCTS equ     $20             Read Sectors
     0030             (    constants.asm):00111         CFWSCTS equ     $30             Write Sectors
                      (    constants.asm):00112         
                      (    constants.asm):00113         * Buffer in-memory structure:
                      (    constants.asm):00114         * data: 1024 bytes.
                      (    constants.asm):00115         * terminator: 1 byte set to 0.
                      (    constants.asm):00116         * flags: 1 byte.
                      (    constants.asm):00117         * blknum: 2 bytes.
     0001             (    constants.asm):00118         BINUSE  equ     1               Buffer is allocated (the blknum field is valid)
     0002             (    constants.asm):00119         BMAPPD  equ     2               Block has been read from the CF device
     0004             (    constants.asm):00120         BDIRTY  equ     4               Block has been marked for update
     0400             (    constants.asm):00121         BLKSIZ  equ     2*CFSCSZ        Block size is 2 CF sectors (1 KB)
                      (    constants.asm):00122         * Buffer field offsets.
     0400             (    constants.asm):00123         BOTERM  equ     BLKSIZ          Base buffer to the 'terminator' field offset
     0401             (    constants.asm):00124         BOFLAGS equ     BLKSIZ+1        Base buffer to the 'flag' field offset
     0402             (    constants.asm):00125         BOBLKNO equ     BLKSIZ+2        Base buffer to the 'blknum' field offset
                      (    constants.asm):00126         
     0410             (    constants.asm):00127         BFDISP  equ     BUF1-BUF0       Offset between resident buffers
                      (    constants.asm):00128         
                      (    constants.asm):00129         * ASCII trivia.
     0000             (    constants.asm):00130         NUL     equ     0               End of string marker
     0003             (    constants.asm):00131         ETX     equ     3               Control-C (intr)
     0008             (    constants.asm):00132         BS      equ     8               Backspace
     0009             (    constants.asm):00133         HT      equ     9               Horizontal tab
     000A             (    constants.asm):00134         LF      equ     $0A             Aka new line
     000D             (    constants.asm):00135         CR      equ     $0D             Carriage return
     0015             (    constants.asm):00136         NAK     equ     $15             Control-U (kill)
     0020             (    constants.asm):00137         SP      equ     $20             Aka BL in Forth
     0013             (    constants.asm):00138         XOFF    equ     $13             Aka DC3
     0011             (    constants.asm):00139         XON     equ     $11             Aka DC1
                      (    constants.asm):00140         
                      (    constants.asm):00141         * Stack sizes.
     00C0             (    constants.asm):00142         NSTKSZ  equ     192             Expressed in bytes. Now only limited by RAM size
     0080             (    constants.asm):00143         RSTKSZ  equ     128             Expressed in bytes
                      (    constants.asm):00144         
                      (    constants.asm):00145         * Buffer sizes.
     0084             (    constants.asm):00146         CMDBFSZ equ     132             Command line entry buffer
     0050             (    constants.asm):00147         HEXBFSZ equ     80
     0048             (    constants.asm):00148         TBUFSZ  equ     72              Used by VLIST to print word name, CVNSTR
                      (    constants.asm):00149         *                               And DUMP, at offset 69
     0051             (    constants.asm):00150         PADBSZ  equ     1+80            79-STANDARD mandates a minimum of 64 bytes
     0040             (    constants.asm):00151         SERBSZ  equ     64              Serial buffer size. Needs to be a power of 2
                      (    constants.asm):00152         
                      (    constants.asm):00153         * Dictionary flag masks.
     0080             (    constants.asm):00154         IMDFLM  equ     $80             Immediate flag mask
     0040             (    constants.asm):00155         DEFFLM  equ     $40             Compilation only flag mask
                      (    constants.asm):00156                 IFNE    RELFEAT
     0020             (    constants.asm):00157         MONFLM  equ     $20             Monitored flag mask. This indicates that the
                      (    constants.asm):00158         *                               word to which it relates might be checked for
                      (    constants.asm):00159         *                               integrity. This applies by default to all words
                      (    constants.asm):00160         *                               defined with : and all constants. It might
                      (    constants.asm):00161         *                               also apply to any other CREATEd object by
                      (    constants.asm):00162         *                               resorting to the MONITOR word. Using MONITOR
                      (    constants.asm):00163         *                               on variable word contents is guaranteed to
                      (    constants.asm):00164         *                               raise ICHECK's attention.
                      (    constants.asm):00165                 ENDC
                      (    constants.asm):00166         
     001F             (    constants.asm):00167         WRLNMSK equ     $1F             31 character is the maximum word length
                      (    constants.asm):00168         
                      (    constants.asm):00169         * 6309 opcodes.
     008E             (    constants.asm):00170         LDXOPC  equ     $8E             LDX (immediate)
     007E             (    constants.asm):00171         JMPOPC  equ     $7E             JMP (extended)
     00BD             (    constants.asm):00172         JSROPC  equ     $BD             JSR (extended)
     0039             (    constants.asm):00173         RTSOPC  equ     $39             RTS (inherent)
     2503             (    constants.asm):00174         BCSOPC  equ     $2503           BCS *+5 (relative)
     2603             (    constants.asm):00175         BNEOPC  equ     $2603           BNE *+5 (relative)
     00C7             (    constants.asm):00176         ILLOPC  equ     $C7             An illegal operation code. Meant to raise a trap
                      (    constants.asm):00177         
     0001             (    constants.asm):00178         CFLAG   equ     1               CC bit 0 (C)
     0004             (    constants.asm):00179         ZFLAG   equ     4               CC bit 2 (Z)
     0008             (    constants.asm):00180         NFLAG   equ     8               CC bit 3 (N)
     0040             (    constants.asm):00181         FFLAG   equ     $40             CC bit 6 (F)
                      (    constants.asm):00182         
                      (    constants.asm):00183         * RAM based execution token for @.
     0C14             (    constants.asm):00184         RAMFTCH set     WDICSPC+4       Dictionary header overhead is word's length + 3
                      (    constants.asm):00185                 IFNE    RELFEAT         The reliability features adds one byte to the
     0C15             (    constants.asm):00186         RAMFTCH set     WDICSPC+5       header: a checksum.
                      (    constants.asm):00187                 ENDC
                      (    constants.asm):00188         
                      (        forth.asm):00099         
                      (        forth.asm):00100         * Unchecked NPUSH. This is for situations in which there is absolutely no
                      (        forth.asm):00101         * chance of overflow. For instance, in case we just popped 2 cells and push
                      (        forth.asm):00102         * back one or two.
0000                  (        forth.asm):00103         UCNPUSH MACRO   NOEXPAND
                      (        forth.asm):00104                 pshu    x
                      (        forth.asm):00105                 ENDM
                      (        forth.asm):00106         
                      (        forth.asm):00107         * Unchecked NPOP. To be used only after trusted words have been invoked, i.e.
                      (        forth.asm):00108         * when one is positively sure that the data stack contains at least one cell.
0000                  (        forth.asm):00109         UCNPOP  MACRO   NOEXPAND
                      (        forth.asm):00110                 pulu    x
                      (        forth.asm):00111                 ENDM
                      (        forth.asm):00112         
                      (        forth.asm):00113         * Make sure minimum data stack requirements are satisfied upon word entry.
                      (        forth.asm):00114         * The requirement is expressed in cell size--2 bytes on the 6309.
                      (        forth.asm):00115         * \1 specifies the required number of cells.
0000                  (        forth.asm):00116         MINDREQ MACRO   NOEXPAND
                      (        forth.asm):00117                 ldd     #NSTBOT-(\1*2)  Cell count one expects to be stacked up
                      (        forth.asm):00118                 jsr     CHKNDPT         No return if the condition is not met
                      (        forth.asm):00119                 ENDM
                      (        forth.asm):00120         
                      (        forth.asm):00121         * Reliability feature support: execution tokens.
                      (        forth.asm):00122         * \1 has the opcode we want to emit.
                      (        forth.asm):00123         * \2 has the execution token address, as if the header overhead always
                      (        forth.asm):00124         * was 3 bytes.
0000                  (        forth.asm):00125         RFXT    MACRO   NOEXPAND
                      (        forth.asm):00126                 IFNE    RELFEAT
                      (        forth.asm):00127                 \1      \2+1
                      (        forth.asm):00128                 ELSE
                      (        forth.asm):00129                 \1      \2
                      (        forth.asm):00130                 ENDC
                      (        forth.asm):00131                 ENDM
                      (        forth.asm):00132         
                      (        forth.asm):00133         * Reliability feature support: variable word header contents.
                      (        forth.asm):00134         * This is a dummy checksum only used for EEPROM resident words.
                      (        forth.asm):00135         * Those never are checked for code integrity by MONITOR.
0000                  (        forth.asm):00136         RFCS    MACRO   NOEXPAND
                      (        forth.asm):00137                 IFNE    RELFEAT
                      (        forth.asm):00138                 fcb     ILLOPC          Illegal opcode
                      (        forth.asm):00139                 ENDC
                      (        forth.asm):00140                 ENDM
                      (        forth.asm):00141         
                      (        forth.asm):00142         *******************************************************************************
                      (        forth.asm):00143         * RAM definitions. We cannot initialize globals from the assembly defs.
                      (        forth.asm):00144         * All we can do here is define addresses and size things up.
                      (        forth.asm):00145         
                      (        forth.asm):00146         * RAMSTART is 0. We leave page 0 unused as a bug proof area.
                      (        forth.asm):00147         * When compiled in debug mode, this area is filled with illegal
                      (        forth.asm):00148         * instruction opcodes ($C7).
                      (        forth.asm):00149         
                      (        forth.asm):00150                 org     VARSPC
                      (        forth.asm):00151         
                      (        forth.asm):00152         * Global pointers.
0100                  (        forth.asm):00153         RSP     rmb     2               The return stack pointer
0102                  (        forth.asm):00154         TOKENSP rmb     2               Token start pointer (STRS)
0104                  (        forth.asm):00155         TOKENEP rmb     2               Token end pointer (STRE)
0106                  (        forth.asm):00156         LSTWAD  rmb     2               Last defined word header pointer--LAST
0108                  (        forth.asm):00157         DICEND  rmb     2               Current end of the dictionary--HERE
010A                  (        forth.asm):00158         BLSTWAD rmb     2               Backup (was IX)
010C                  (        forth.asm):00159         BDICEND rmb     2               Backup (was IY)
010E                  (        forth.asm):00160         PLOAD   rmb     2               Word payload if found by SWDIC
0110                  (        forth.asm):00161         FNDPLD  rmb     2               Last code payload reported by FIND
0112                  (        forth.asm):00162         RECADDR rmb     2               Used by RECURSE
0114                  (        forth.asm):00163         JSRLAST rmb     2               Last compilation address of #JSROPC
0116                  (        forth.asm):00164         VLPRVEP rmb     2               Used in VLIST to compute word code length
0118                  (        forth.asm):00165         VLPRVHD rmb     2               Used in VLIST to compute word code length
011A                  (        forth.asm):00166         MRUBUFA rmb     2               Most recently used buffer address
011C                  (        forth.asm):00167         BSBFADR rmb     2               Base buffer address for the input stream
                      (        forth.asm):00168         
                      (        forth.asm):00169         * Global variables.
011E                  (        forth.asm):00170         UBASE   rmb     2               Base for numbers input and output--BASE
0120                  (        forth.asm):00171         USTATE  rmb     2               0 if interpreting, 1 if compiling--STATE
0122                  (        forth.asm):00172         UTOIN   rmb     2               User variable for >IN
0124                  (        forth.asm):00173         UBLK    rmb     2               User variable for BLK
0126                  (        forth.asm):00174         USCR    rmb     2               User variable for SCR (output for LIST)
                      (        forth.asm):00175                 IFNE    DEBUG
0128                  (        forth.asm):00176         CCREG   rmb     2               A DEBUG variable for predicates (see CMP2)
                      (        forth.asm):00177                 ENDC
0128                  (        forth.asm):00178         BASBKUP rmb     1               BASE backup when a base prefix is in use
0129                  (        forth.asm):00179         CMDLNSZ rmb     1               Entered character count in GETS (INTERP)
012A                  (        forth.asm):00180         RDEPTH  rmb     1               Return stack depth in cells
012B                  (        forth.asm):00181         IRDPTH  rmb     1               Return stack depth when : was last invoked
012C                  (        forth.asm):00182         RTSREMV rmb     1               If > 1, omit the final RTS when compiling
012D                  (        forth.asm):00183         DIVFCN  rmb     1               Flag used by /, MOD and /MOD
012E                  (        forth.asm):00184         STSLFCN rmb     1               Flag used by */, */MOD
012F                  (        forth.asm):00185         CVTFCN  rmb     1               CVT: 0 => # semantics, 1 => #S semantics
0130                  (        forth.asm):00186         ISNEGF  rmb     1               Number being scanned is negative
0131                  (        forth.asm):00187         CVISSGN rmb     1               Flag: should CVNSTR consider numbers as signed
0132                  (        forth.asm):00188         CURTOKL rmb     1               Current token length. Set by SWDIC
0133                  (        forth.asm):00189         IMDFLG  rmb     1               Immediate flag
0134                  (        forth.asm):00190         DEFFLG  rmb     1               Define flag
0135                  (        forth.asm):00191         NBCTFB0 rmb     1               NZ if -->/CONTINUED invoked from the console
                      (        forth.asm):00192         
0136                  (        forth.asm):00193         CFCARDP rmb     1               NZ if CF card present
0137                  (        forth.asm):00194         CFCMMIR rmb     1               Last CF command issued
0138                  (        forth.asm):00195         CFERRCD rmb     1               and the corresponding error code
                      (        forth.asm):00196         
0139                  (        forth.asm):00197         PADBUF  rmb     PADBSZ          PAD lives here. Used by <#, #, #S, #> and DUMP
                      (        forth.asm):00198         
                      (        forth.asm):00199         * The normal (data) stack.
                      (        forth.asm):00200                 align   2
     018A             (        forth.asm):00201         NSTTOP  equ     *               U's value when the data stack is full
018A                  (        forth.asm):00202                 rmb     NSTKSZ
     024A             (        forth.asm):00203         NSTBOT  equ     *               U's value when the data stack is empty
                      (        forth.asm):00204         
                      (        forth.asm):00205         * The return stack.
     024A             (        forth.asm):00206         RSTTOP  equ     *
024A                  (        forth.asm):00207                 rmb     RSTKSZ
     02CA             (        forth.asm):00208         RSTBOT  equ     *
                      (        forth.asm):00209         
02CA                  (        forth.asm):00210         CMDBUF  rmb     CMDBFSZ
034E                  (        forth.asm):00211         HEXBUF  rmb     HEXBFSZ
                      (        forth.asm):00212         
039E                  (        forth.asm):00213         TBUFF   rmb     TBUFSZ          Output for CVNSTR. Also used by DUMP
                      (        forth.asm):00214         
03E6 0000000000000000 (        forth.asm):00215                 align   16
     0000
03F0                  (        forth.asm):00216         BUF0    rmb     BLKSIZ+4
                      (        forth.asm):00217         
07F4 0000000000000000 (        forth.asm):00218                 align   16
     00000000
0800                  (        forth.asm):00219         BUF1    rmb     BLKSIZ+4
                      (        forth.asm):00220         
                      (        forth.asm):00221         *******************************************************************************
                      (        forth.asm):00222         * Writable dictionary section begins right here. We cannot have anything
                      (        forth.asm):00223         * statically defined at this point. Therefore, FORTHIN moves the code for @
                      (        forth.asm):00224         * to this location and sets up DICEND and LSTWAD accordingly. All the RAM
                      (        forth.asm):00225         * beyond this point (after the reallocated @ implementation) is user defined
                      (        forth.asm):00226         * material. Note that builtin words, though they cannot be forgotten (to the
                      (        forth.asm):00227         * extent they are ROM resident--not to mention inter-word dependencies),
                      (        forth.asm):00228         * might still be overridden by user definitions. VLIST will happily ignore
                      (        forth.asm):00229         * that fact and list everything in the dictionary linked list order.
                      (        forth.asm):00230         
0C04 0000000000000000 (        forth.asm):00231                 align   16
     00000000
     0C10             (        forth.asm):00232         WDICSPC equ     *
                      (        forth.asm):00233         
                      (        forth.asm):00234         *******************************************************************************
                      (        forth.asm):00235         * ROM code begins.
                      (        forth.asm):00236         
                      (        forth.asm):00237                 org     ROMSTRT
                      (        forth.asm):00238         * Trap handler: division by zero or illegal opcode. See page 4-10 of "The 6309
                      (        forth.asm):00239         * Book" for a description of interrupt stacks in native 6309 mode.
E000 113C40           (        forth.asm):00240 (4)     IODZHDL bitmd   #$40            Illegal opcode?
E003 2705             (        forth.asm):00241 (3)             beq     @iodzh1
E005 8EFE99           (        forth.asm):00242 (3)             ldx     #IOPERRM
E008 2008             (        forth.asm):00243 (3)             bra     @iodxh2
E00A 113C80           (        forth.asm):00244 (4)     @iodzh1 bitmd   #$80            Division by zero?
E00D 2725             (        forth.asm):00245 (3)             beq     @iodzh3         And you may ask yourself, well
                      (        forth.asm):00246         *                               How did I get here?
E00F 8EFEAE           (        forth.asm):00247 (3)             ldx     #DV0ERRM
E012 BDE1DA           (        forth.asm):00248 (7)     @iodxh2 jsr     PUTS
E015 EC6C             (        forth.asm):00249 (5+1)           ldd     12,s            Return code address (PC)
E017 8E034E           (        forth.asm):00250 (3)             ldx     #HEXBUF
E01A BDE174           (        forth.asm):00251 (7)             jsr     HDMP4   
E01D 8E034E           (        forth.asm):00252 (3)             ldx     #HEXBUF
E020 BDE1DA           (        forth.asm):00253 (7)             jsr     PUTS
E023 BDE1E7           (        forth.asm):00254 (7)             jsr     PUTCR
E026 8EE643           (        forth.asm):00255 (3)             ldx     #ERRHD1
E029 AF6C             (        forth.asm):00256 (5+1)           stx     12,s            Resume execution in the error handler
E02B 8EE000           (        forth.asm):00257 (3)             ldx     #IODZHDL
E02E AF68             (        forth.asm):00258 (5+1)           stx     8,s             With Y set to IODZHDL
E030 8603             (        forth.asm):00259 (2)             lda     #3              And user ABORT error code
E032 A762             (        forth.asm):00260 (4+1)           sta     2,s             Passed back through B
E034 3B               (        forth.asm):00261 (17+?)  @iodzh3 rti
                      (        forth.asm):00262         
     E035             (        forth.asm):00263         SWI3HDL equ     *
     E035             (        forth.asm):00264         SWI2HDL equ     *
     E035             (        forth.asm):00265         FIRQHDL equ     *
     E035             (        forth.asm):00266         IRQHDL  equ     *
     E035             (        forth.asm):00267         SWIHDL  equ     *
E035 20FE             (        forth.asm):00268 (3)     NMIHDL  bra     *               These should never happen
                      (        forth.asm):00269         
                      (        forth.asm):00270         * Interrupts are disabled by default upon reset.
E037 113D01           (        forth.asm):00271 (5)     RSTHDL  ldmd    #1              Establish 6309 native mode
                      (        forth.asm):00272         
E03A 8643             (        forth.asm):00273 (2)             lda     #ACIRSET
E03C B7D800           (        forth.asm):00274 (4)             sta     ACIACTL         ACIA master reset
E03F 8655             (        forth.asm):00275 (2)             lda     #ACIRTS1
E041 B7D800           (        forth.asm):00276 (4)             sta     ACIACTL         RTS# high, 8N1
                      (        forth.asm):00277         
E044 8EFE10           (        forth.asm):00278 (3)             ldx     #BOOTMSG        Identity statement
                      (        forth.asm):00279         
                      (        forth.asm):00280         * Send the NUL terminated string pointed to by X to the ACIA.
                      (        forth.asm):00281         * The RAM is not assumed to be working.
E047 C602             (        forth.asm):00282 (2)     INIT    ldb     #ACITDRE
E049 A680             (        forth.asm):00283 (4+1)   @init0  lda     ,x+
E04B 270A             (        forth.asm):00284 (3)             beq     RAMCHK          NUL marks the end of the string
E04D F5D800           (        forth.asm):00285 (4)     @init1  bitb    ACIACTL         Wait for TDRE bit to be set
E050 27FB             (        forth.asm):00286 (3)             beq     @init1
E052 B7D801           (        forth.asm):00287 (4)             sta     ACIADAT         Transmit data
E055 20F2             (        forth.asm):00288 (3)             bra     @init0          Next char, if any
                      (        forth.asm):00289         
                      (        forth.asm):00290         * RAM0 32 KB self test (destructive).
E057 8E0000           (        forth.asm):00291 (3)     RAMCHK  ldx     #RAMSTRT
E05A AF84             (        forth.asm):00292 (5+0)   @ramch1 stx     ,x
E05C AC84             (        forth.asm):00293 (5+0)           cmpx    ,x
E05E 2609             (        forth.asm):00294 (3)             bne     RAMFAIL
E060 3002             (        forth.asm):00295 (4+1)           leax    2,x
E062 8C8000           (        forth.asm):00296 (3)             cmpx    #RAMSTRT+RAMSIZE
E065 26F3             (        forth.asm):00297 (3)             bne     @ramch1
E067 2012             (        forth.asm):00298 (3)             bra     RAMOK
                      (        forth.asm):00299         
E069 C680             (        forth.asm):00300 (2)     RAMFAIL ldb     #128
E06B 108E8000         (        forth.asm):00301 (4)     @ramf1  ldy     #$8000
E06F 313F             (        forth.asm):00302 (4+1)   @ramf2  leay    -1,y
E071 26FC             (        forth.asm):00303 (3)             bne     @ramf2
E073 5A               (        forth.asm):00304 (1)             decb
E074 26F5             (        forth.asm):00305 (3)             bne     @ramf1
E076 8EFE80           (        forth.asm):00306 (3)             ldx     #RAMFM
E079 20CC             (        forth.asm):00307 (3)             bra     INIT            Here we go again
                      (        forth.asm):00308         
                      (        forth.asm):00309         * RAM Initialization to all $C7 if DEBUG mode is enabled else zeroes.
E07B 8E0000           (        forth.asm):00310 (3)     RAMOK   ldx     #RAMSTRT
E07E 3101             (        forth.asm):00311 (4+1)           leay    1,x
E080 10867FFF         (        forth.asm):00312 (4)             ldw     #RAMSIZE-1
                      (        forth.asm):00313                 IFNE    DEBUG
                      (        forth.asm):00314                 lda     #ILLOPC
                      (        forth.asm):00315                 sta     ,x
                      (        forth.asm):00316                 ELSE
E084 6F84             (        forth.asm):00317 (6+0)           clr     ,x
                      (        forth.asm):00318                 ENDC
E086 113812           (        forth.asm):00319 (6+?)           tfm     x+,y+
                      (        forth.asm):00320         
                      (        forth.asm):00321         * Initialize the system stack pointer and the direct page base address register.
E089 10CE8000         (        forth.asm):00322 (4)             lds     #RAMSTRT+RAMSIZE
E08D 8601             (        forth.asm):00323 (2)             lda     #VARSPC/256
E08F 1F8B             (        forth.asm):00324 (4)             tfr     a,dp
     01               (        forth.asm):00325                 SETDP   VARSPC/256
                      (        forth.asm):00326         
E091 8EFE70           (        forth.asm):00327 (3)             ldx     #RAMOKM
E094 BDE1DA           (        forth.asm):00328 (7)             jsr     PUTS
E097 BDE240           (        forth.asm):00329 (7)             jsr     FORTHIN         Global variables initialization
E09A BDE790           (        forth.asm):00330 (7)             jsr     CFINIT          CompactFlash card initialization
E09D 0D36             (        forth.asm):00331 (4)             tst     CFCARDP
E09F 2706             (        forth.asm):00332 (3)             beq     INTERP
                      (        forth.asm):00333         
                      (        forth.asm):00334         * A CF card is present, LOAD block #1.
E0A1 8E0001           (        forth.asm):00335 (3)             ldx     #1
E0A4 BDF6B2           (        forth.asm):00336 (7)             jsr     LOAD1
                      (        forth.asm):00337         
                      (        forth.asm):00338         * The interpreter main loop.
E0A7 104F             (        forth.asm):00339 (2)     INTERP  clrd
E0A9 DD24             (        forth.asm):00340 (4)             std     UBLK            Interpreting from the console. Set BLK to 0
E0AB DD22             (        forth.asm):00341 (4)             std     UTOIN
E0AD 8E02CA           (        forth.asm):00342 (3)             ldx     #CMDBUF
E0B0 9F1C             (        forth.asm):00343 (4)             stx     BSBFADR
E0B2 C683             (        forth.asm):00344 (2)             ldb     #CMDBFSZ-1      NUL terminator is not included in the char count
E0B4 BDE1FD           (        forth.asm):00345 (7)             jsr     GETS            Acquire command from the console
                      (        forth.asm):00346         * Additional setup in case the ANSI \ is used.
E0B7 D729             (        forth.asm):00347 (3)             stb     CMDLNSZ         GETS returns the entered character count via B
                      (        forth.asm):00348         * Additional preparation work for block support.
E0B9 0F35             (        forth.asm):00349 (5)             clr     NBCTFB0         Flag whether -->/CONTINUED is called from blk 0
E0BB 8D02             (        forth.asm):00350 (6)             bsr     _INTERP
E0BD 20E8             (        forth.asm):00351 (3)     MINTLRA bra     INTERP
                      (        forth.asm):00352         
                      (        forth.asm):00353         * The interpreter itself.
E0BF BDE27F           (        forth.asm):00354 (7)     _INTERP jsr     SCNSTOK         Scan for the beginning of a word at address X
E0C2 2715             (        forth.asm):00355 (3)             beq     @more0          This is the end
E0C4 0D21             (        forth.asm):00356 (4)             tst     USTATE+1        We do ignore the upper byte
E0C6 2644             (        forth.asm):00357 (3)             bne     COMP            We are compiling
E0C8 BDE38A           (        forth.asm):00358 (7)             jsr     SWDIC           Updates TOKENEP, CURTOKL, IMDFLG/DEFFLG
E0CB 2624             (        forth.asm):00359 (3)             bne     @exec           Word found, execute it
E0CD BDE2DC           (        forth.asm):00360 (7)             jsr     NUMCVT
     E0D0             (        forth.asm):00361         NMCVIRA equ     *
E0D0 BDE6B9           (        forth.asm):00362 (7)             jsr     NPUSH
E0D3 9E04             (        forth.asm):00363 (4)             ldx     TOKENEP
E0D5 6D84             (        forth.asm):00364 (5+0)   MORE    tst     ,x
E0D7 26E6             (        forth.asm):00365 (3)             bne     _INTERP         Next token, please!
                      (        forth.asm):00366         * End of input stream condition is recognized.
E0D9 DC24             (        forth.asm):00367 (4)     @more0  ldd     UBLK
E0DB 2705             (        forth.asm):00368 (3)             beq     @more1          We are back from the console
E0DD 0D35             (        forth.asm):00369 (4)             tst     NBCTFB0         -->/CONTINUED invoked from the console?
E0DF 2601             (        forth.asm):00370 (3)             bne     @more1          Yes
E0E1 39               (        forth.asm):00371 (4)             rts                     No, we're done here
E0E2 0F35             (        forth.asm):00372 (5)     @more1  clr     NBCTFB0         The -->/CONTINUED exception only applies once
E0E4 8EFE93           (        forth.asm):00373 (3)             ldx     #OKFEEDB        Provide OK feedback
E0E7 0D21             (        forth.asm):00374 (4)             tst     USTATE+1        No OK feedback if we're compiling, just CRLF
E0E9 2702             (        forth.asm):00375 (3)             beq     @more2
E0EB 3003             (        forth.asm):00376 (4+1)           leax    3,x             Skip the ' OK' string when compiling
E0ED BDE1DA           (        forth.asm):00377 (7)     @more2  jsr     PUTS
E0F0 39               (        forth.asm):00378 (4)             rts                     Back to whoever invoked us
E0F1 9634             (        forth.asm):00379 (3)     @exec   lda     DEFFLG
E0F3 2705             (        forth.asm):00380 (3)             beq     @introk         Compilation only flag is not set
E0F5 C606             (        forth.asm):00381 (2)             ldb     #6              Incorrect STATE
E0F7 BDE640           (        forth.asm):00382 (7)             jsr     ERRHDLR         No return
     E0FA             (        forth.asm):00383         INTISRA equ     *               For symbolic stack debugging purposes
E0FA DC04             (        forth.asm):00384 (4)     @introk ldd     TOKENEP
E0FC 931C             (        forth.asm):00385 (4)             subd    BSBFADR
E0FE DD22             (        forth.asm):00386 (4)             std     UTOIN           Derive >IN from TOKENEP
E100 8EE107           (        forth.asm):00387 (3)             ldx     #INTRPRA        The return address
E103 3410             (        forth.asm):00388 (4+2)           pshs    x
E105 1F25             (        forth.asm):00389 (4)             tfr     y,pc            An indirect call to Y
E107 BDE70D           (        forth.asm):00390 (7)     INTRPRA jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
E10A 20C9             (        forth.asm):00391 (3)             bra     MORE
                      (        forth.asm):00392         
                      (        forth.asm):00393         * The compiler.
                      (        forth.asm):00394         * Upon entry TOKENSP has been set by a prior call to SCNSTOK.
E10C BDE38A           (        forth.asm):00395 (7)     COMP    jsr     SWDIC           Updates TOKENEP, CURTOKL, IMDFLG/DEFFLG
E10F 2720             (        forth.asm):00396 (3)             beq     @cmpnum         Word @ TOKENSP is not in the dictionary
E111 0D33             (        forth.asm):00397 (4)             tst     IMDFLG
E113 2714             (        forth.asm):00398 (3)             beq     @notimd
E115 DC04             (        forth.asm):00399 (4)             ldd     TOKENEP         Derive >IN from TOKENEP
E117 931C             (        forth.asm):00400 (4)             subd    BSBFADR
E119 DD22             (        forth.asm):00401 (4)             std     UTOIN
E11B 8EE122           (        forth.asm):00402 (3)             ldx     #COMPLRA        Word is immediate. Execute it.
E11E 3410             (        forth.asm):00403 (4+2)           pshs    x               Return to COMPLRA
E120 1F25             (        forth.asm):00404 (4)             tfr     y,pc            An indirect call to Y
E122 BDE70D           (        forth.asm):00405 (7)     COMPLRA jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
E125 9F04             (        forth.asm):00406 (4)             stx     TOKENEP
E127 20AC             (        forth.asm):00407 (3)             bra     MORE            Branch back to the interpreter
E129 1F21             (        forth.asm):00408 (4)     @notimd tfr     y,x
E12B 8D20             (        forth.asm):00409 (6)             bsr     EMXASXT         Emit X as an execution token
E12D 9E04             (        forth.asm):00410 (4)     @cmpdon ldx     TOKENEP
E12F 20A4             (        forth.asm):00411 (3)             bra     MORE
E131 BDE2DC           (        forth.asm):00412 (7)     @cmpnum jsr     NUMCVT
     E134             (        forth.asm):00413         NMCVCRA equ     *
E134 BDE45A           (        forth.asm):00414 (7)             jsr     LITER
E137 20F4             (        forth.asm):00415 (3)             bra     @cmpdon
                      (        forth.asm):00416         
                      (        forth.asm):00417         * Check whether the final RTS can be eliminated. It can only be if we have no
                      (        forth.asm):00418         * forward references to HERE when COMPR (;) is invoked. This is a rather
                      (        forth.asm):00419         * complicated matter but this implementation works on the basis that we can do
                      (        forth.asm):00420         * so safely if at least 2 subroutine calls have been issued with a return
                      (        forth.asm):00421         * stack whose depth is equal to IRDPTH, immediately prior to the invokation
                      (        forth.asm):00422         * of COMPR (;).
E139 3402             (        forth.asm):00423 (4+1)   CHKRTS  pshs    a
E13B 109F14           (        forth.asm):00424 (5)             sty     JSRLAST         JSRLAST points to the latest JSR code emission
E13E 962A             (        forth.asm):00425 (3)             lda     RDEPTH
E140 912B             (        forth.asm):00426 (3)             cmpa    IRDPTH          Return stack depth when : was last invoked
E142 2705             (        forth.asm):00427 (3)             beq     @ckrts1
E144 0F2C             (        forth.asm):00428 (5)             clr     RTSREMV
E146 3502             (        forth.asm):00429 (4+1)   @ckrts0 puls    a
E148 39               (        forth.asm):00430 (4)             rts
E149 0C2C             (        forth.asm):00431 (5)     @ckrts1 inc     RTSREMV
E14B 20F9             (        forth.asm):00432 (3)             bra     @ckrts0
                      (        forth.asm):00433         
                      (        forth.asm):00434         * Emit (in a code generation understanding) X as an execution token.
                      (        forth.asm):00435         * In essence, this simply inserts JSR <X> at HERE.
                      (        forth.asm):00436         * Note: this code provides support for trailing JSR elimination.
                      (        forth.asm):00437         * On input: X has the target execution token.
                      (        forth.asm):00438         * On output: Y will have HERE, A will be altered, X will be preserved.
E14D 109E08           (        forth.asm):00439 (5)     EMXASXT ldy     DICEND
E150 8DE7             (        forth.asm):00440 (6)             bsr     CHKRTS          Check if the final RTS can be omitted
E152 86BD             (        forth.asm):00441 (2)             lda     #JSROPC         JSR extended
E154 BDE471           (        forth.asm):00442 (7)             jsr     VARCON2         Compile a JSR to the action component
E157 109F08           (        forth.asm):00443 (5)             sty     DICEND
E15A 39               (        forth.asm):00444 (4)             rts
                      (        forth.asm):00445         
                      (        forth.asm):00446         * Store the HEX representation of the lower nibble of A to X+.
E15B 3404             (        forth.asm):00447 (4+1)   HEX1D   pshs    b
E15D C630             (        forth.asm):00448 (2)             ldb     #'0
E15F 840F             (        forth.asm):00449 (2)             anda    #$0f
E161 810A             (        forth.asm):00450 (2)             cmpa    #10
E163 2502             (        forth.asm):00451 (3)             bcs     @hex1d1
E165 C637             (        forth.asm):00452 (2)             ldb     #'A-10
E167 103098           (        forth.asm):00453 (4)     @hex1d1 addr    b,a
E16A A780             (        forth.asm):00454 (4+1)           sta     ,x+
E16C 3504             (        forth.asm):00455 (4+1)           puls    b
E16E 39               (        forth.asm):00456 (4)             rts
                      (        forth.asm):00457         
E16F 44               (        forth.asm):00458 (1)     ADIV16  lsra
E170 44               (        forth.asm):00459 (1)             lsra
E171 44               (        forth.asm):00460 (1)             lsra
E172 44               (        forth.asm):00461 (1)             lsra
E173 39               (        forth.asm):00462 (4)             rts
                      (        forth.asm):00463         
                      (        forth.asm):00464         * Hexdump D to 4 bytes starting at X.  Upon return, X will point 1 byte
                      (        forth.asm):00465         * after the last character emitted. D is preserved.
E174 3406             (        forth.asm):00466 (4+2)   HDMP4   pshs    d
E176 8DF7             (        forth.asm):00467 (6)             bsr     ADIV16
E178 8DE1             (        forth.asm):00468 (6)             bsr     HEX1D
E17A A6E4             (        forth.asm):00469 (4+0)           lda     ,s
E17C 8DDD             (        forth.asm):00470 (6)             bsr     HEX1D
E17E A661             (        forth.asm):00471 (4+1)           lda     1,s
E180 8DED             (        forth.asm):00472 (6)             bsr     ADIV16
E182 8DD7             (        forth.asm):00473 (6)             bsr     HEX1D
E184 A661             (        forth.asm):00474 (4+1)           lda     1,s
E186 8DD3             (        forth.asm):00475 (6)             bsr     HEX1D
E188 3506             (        forth.asm):00476 (4+2)           puls    d
E18A 6F84             (        forth.asm):00477 (6+0)           clr     ,x
E18C 39               (        forth.asm):00478 (4)             rts
                      (        forth.asm):00479         
E18D 3406             (        forth.asm):00480 (4+2)   HDMP2   pshs    d
E18F 8DDE             (        forth.asm):00481 (6)             bsr     ADIV16
E191 8DC8             (        forth.asm):00482 (6)             bsr     HEX1D
E193 A6E4             (        forth.asm):00483 (4+0)           lda     ,s
E195 8DC4             (        forth.asm):00484 (6)             bsr     HEX1D
E197 3506             (        forth.asm):00485 (4+2)           puls    d
E199 6F84             (        forth.asm):00486 (6+0)           clr     ,x
E19B 39               (        forth.asm):00487 (4)             rts
                      (        forth.asm):00488         
                      (        forth.asm):00489         * Add string pointed to by Y starting at the address stored in X.
E19C 3402             (        forth.asm):00490 (4+1)   ADDS    pshs    a
E19E A6A0             (        forth.asm):00491 (4+1)   @adds1  lda     ,y+
E1A0 A780             (        forth.asm):00492 (4+1)           sta     ,x+
E1A2 26FA             (        forth.asm):00493 (3)             bne     @adds1
E1A4 3502             (        forth.asm):00494 (4+1)           puls    a
E1A6 39               (        forth.asm):00495 (4)             rts
                      (        forth.asm):00496         
                      (        forth.asm):00497         * Returns the length of the string pointed to by X (terminator excluded) in W.
E1A7 3410             (        forth.asm):00498 (4+2)   SLEN    pshs    x
E1A9 105F             (        forth.asm):00499 (2)             clrw
E1AB 105C             (        forth.asm):00500 (2)     @slen1  incw
E1AD A680             (        forth.asm):00501 (4+1)           lda     ,x+
E1AF 26FA             (        forth.asm):00502 (3)             bne     @slen1
E1B1 105A             (        forth.asm):00503 (2)             decw
E1B3 3510             (        forth.asm):00504 (4+2)           puls    x
E1B5 39               (        forth.asm):00505 (4)             rts
                      (        forth.asm):00506         
                      (        forth.asm):00507                 include console.asm
E1B6 3404             (      console.asm):00001 (4+1)   PUTCH   pshs    b
E1B8 C602             (      console.asm):00002 (2)             ldb     #ACITDRE
E1BA F5D800           (      console.asm):00003 (4)     @ptch1  bitb    ACIACTL         Wait for TDRE bit to be set
E1BD 27FB             (      console.asm):00004 (3)             beq     @ptch1
E1BF B7D801           (      console.asm):00005 (4)             sta     ACIADAT         Transmit data
E1C2 3504             (      console.asm):00006 (4+1)           puls    b
E1C4 39               (      console.asm):00007 (4)             rts
                      (      console.asm):00008         
E1C5 8615             (      console.asm):00009 (2)     GETCH   lda     #ACIRTS0
E1C7 B7D800           (      console.asm):00010 (4)             sta     ACIACTL         You may talk to me now
E1CA 8601             (      console.asm):00011 (2)             lda     #ACIRDRF
E1CC B5D800           (      console.asm):00012 (4)     @again  bita    ACIACTL
E1CF 27FB             (      console.asm):00013 (3)             beq     @again
E1D1 8655             (      console.asm):00014 (2)             lda     #ACIRTS1
E1D3 B7D800           (      console.asm):00015 (4)             sta     ACIACTL         You may shut up now
E1D6 B6D801           (      console.asm):00016 (4)     @getdat lda     ACIADAT         Get character from the ACIA
E1D9 39               (      console.asm):00017 (4)             rts
                      (      console.asm):00018         
                      (      console.asm):00019         * Send NUL terminated string pointed to by X to the ACIA.
E1DA 3416             (      console.asm):00020 (4+4)   PUTS    pshs    x,d
E1DC A680             (      console.asm):00021 (4+1)   @puts1  lda     ,x+
E1DE 2704             (      console.asm):00022 (3)             beq     @puts2         NUL marks the end of the string
E1E0 8DD4             (      console.asm):00023 (6)             bsr     PUTCH
E1E2 20F8             (      console.asm):00024 (3)             bra     @puts1
E1E4 3516             (      console.asm):00025 (4+4)   @puts2  puls    d,x
E1E6 39               (      console.asm):00026 (4)             rts
                      (      console.asm):00027         
E1E7 3410             (      console.asm):00028 (4+2)   PUTCR   pshs    x
E1E9 8EFE7D           (      console.asm):00029 (3)             ldx     #CRLFSTR
E1EC 8DEC             (      console.asm):00030 (6)             bsr     PUTS
E1EE 3510             (      console.asm):00031 (4+2)           puls    x
E1F0 39               (      console.asm):00032 (4)             rts
                      (      console.asm):00033         
E1F1 8608             (      console.asm):00034 (2)     _BS     lda     #BS
E1F3 8DC1             (      console.asm):00035 (6)             bsr     PUTCH          Output BS
E1F5 8620             (      console.asm):00036 (2)             lda     #SP
E1F7 8DBD             (      console.asm):00037 (6)             bsr     PUTCH          Clear character
E1F9 8608             (      console.asm):00038 (2)             lda     #BS
E1FB 20B9             (      console.asm):00039 (3)             bra     PUTCH          And go back again
                      (      console.asm):00040         
                      (      console.asm):00041         * Receive CR terminated string and store it to X.
                      (      console.asm):00042         * Upon entry B contains the receiving buffer length.
                      (      console.asm):00043         * (excluding the NUL terminator). On exit, B will
                      (      console.asm):00044         * contain the number of characters entered (excluding
                      (      console.asm):00045         * the trailing NUL). A and X are preserved. B will
                      (      console.asm):00046         * have the actual number of characters entered.
                      (      console.asm):00047         * Implementation of $05D9 in TRS-80 Level II ROM.
E1FD C102             (      console.asm):00048 (2)     GETS    cmpb    #2
E1FF 2401             (      console.asm):00049 (3)             bhs     @gets0          B must be 2 or more
E201 39               (      console.asm):00050 (4)             rts
E202 3416             (      console.asm):00051 (4+4)   @gets0  pshs    x,d
E204 8DBF             (      console.asm):00052 (6)     @gets1  bsr     GETCH
E206 8108             (      console.asm):00053 (2)             cmpa    #BS             Backspace?
E208 260B             (      console.asm):00054 (3)             bne     @gets3
E20A E161             (      console.asm):00055 (4+1)           cmpb    1,s             B upon routine entry
E20C 27F6             (      console.asm):00056 (3)             beq     @gets1          Do not go beyond the beginning of the buffer
E20E 8DE1             (      console.asm):00057 (6)             bsr     _BS
E210 301F             (      console.asm):00058 (4+1)           leax    -1,x
E212 5C               (      console.asm):00059 (1)             incb
E213 20EF             (      console.asm):00060 (3)             bra     @gets1
E215 8115             (      console.asm):00061 (2)     @gets3  cmpa    #NAK            Kill input?
E217 260B             (      console.asm):00062 (3)             bne     @gets5
                      (      console.asm):00063         * While B != 1,S (initial buffer length), decrement X, increment B.
E219 E161             (      console.asm):00064 (4+1)   @gets4  cmpb    1,s
E21B 27E7             (      console.asm):00065 (3)             beq     @gets1
E21D 8DD2             (      console.asm):00066 (6)             bsr     _BS
E21F 301F             (      console.asm):00067 (4+1)           leax     -1,x
E221 5C               (      console.asm):00068 (1)             incb
E222 20F5             (      console.asm):00069 (3)             bra     @gets4
                      (      console.asm):00070         * Regular input handling: echo input character.
E224 810D             (      console.asm):00071 (2)     @gets5  cmpa    #CR
E226 2709             (      console.asm):00072 (3)             beq     @gets6          Minicom only sends CR
E228 8D8C             (      console.asm):00073 (6)             bsr     PUTCH
E22A A780             (      console.asm):00074 (4+1)           sta     ,x+
E22C 5A               (      console.asm):00075 (1)             decb
E22D C101             (      console.asm):00076 (2)             cmpb    #1              End of buffer reached?
E22F 26D3             (      console.asm):00077 (3)             bne     @gets1
E231 8620             (      console.asm):00078 (2)     @gets6  lda     #SP
E233 8D81             (      console.asm):00079 (6)             bsr     PUTCH
E235 6F84             (      console.asm):00080 (6+0)           clr     ,x
E237 1F10             (      console.asm):00081 (4)             tfr     x,d
E239 A362             (      console.asm):00082 (5+1)           subd    2,s             Actual number of characters entered
E23B E761             (      console.asm):00083 (4+1)           stb     1,s             Stored to B (through the system stack).         
E23D 3516             (      console.asm):00084 (4+4)           puls    x,d
E23F 39               (      console.asm):00085 (4)             rts
                      (      console.asm):00086         
                      (        forth.asm):00508         
                      (        forth.asm):00509                 IFNE    DEBUG
E240                  (        forth.asm):00510         PAGE0IN pshs    x               Fill up page 0 with all C7 (an illegal opcode)
                      (        forth.asm):00511                 ldx     #RAMSTRT
                      (        forth.asm):00512                 lda     #ILLOPC
                      (        forth.asm):00513                 sta     ,x
                      (        forth.asm):00514                 leay    1,x
                      (        forth.asm):00515                 ldw     #255
                      (        forth.asm):00516                 tfm     x+,y+
                      (        forth.asm):00517                 puls    x
                      (        forth.asm):00518                 rts
                      (        forth.asm):00519                 ENDC
                      (        forth.asm):00520         
E240 BDEA16           (        forth.asm):00521         FORTHIN RFXT    jsr,NCLR+7      XT for NCLR. Set up the normal stack
E243 BDEA22           (        forth.asm):00522                 RFXT    jsr,RCLR+7      XT for RCLR. Set up the return stack
                      (        forth.asm):00523                 IFNE    DEBUG
                      (        forth.asm):00524                 bsr     PAGE0IN
                      (        forth.asm):00525                 ENDC
                      (        forth.asm):00526         * Relocate '@' code to RAM and set it up as the last dictionary entry (RO).
E246 8EFDF8           (        forth.asm):00527 (3)             ldx     #THEEND         Source address for tfm
E249 10860010         (        forth.asm):00528 (4)             ldw     #(REALEND-THEEND) Byte count for tfm
E24D 108E0C10         (        forth.asm):00529 (4)             ldy     #WDICSPC        Destination address for tfm
E251 109F06           (        forth.asm):00530 (5)             sty     LSTWAD
E254 113812           (        forth.asm):00531 (6+?)           tfm     x+,y+
E257 109F08           (        forth.asm):00532 (5)             sty     DICEND
                      (        forth.asm):00533                 IFNE    RELFEAT
E25A BDEB36           (        forth.asm):00534                 RFXT    jsr,MONITOR+10  XT for MONITOR (monitor @ in RAM)
                      (        forth.asm):00535                 ENDC
E25D 8D0D             (        forth.asm):00536 (6)             bsr     EMPTYB          Buffer related initializations.
E25F 104F             (        forth.asm):00537 (2)             clrd
E261 DD20             (        forth.asm):00538 (4)             std     USTATE          Initial mode is interpretation
E263 DD26             (        forth.asm):00539 (4)             std     USCR            Clear SCR
E265 DD24             (        forth.asm):00540 (4)             std     UBLK            Clear BLK
E267 DD22             (        forth.asm):00541 (4)             std     UTOIN           Clear >IN
E269 7EFA45           (        forth.asm):00542                 RFXT    jmp,DECIMAL+10  XT for DECIMAL. Default base is decimal
                      (        forth.asm):00543         
E26C 8E03F0           (        forth.asm):00544 (3)     EMPTYB  ldx     #BUF0
E26F 8D03             (        forth.asm):00545 (6)             bsr     EMPT1B
E271 8E0800           (        forth.asm):00546 (3)             ldx     #BUF1
                      (        forth.asm):00547         * Empty the buffer pointed to by X.
E274 9F1A             (        forth.asm):00548 (4)     EMPT1B  stx     MRUBUFA         Update most recently used buffer address
E276 30890400         (        forth.asm):00549 (4+3)           leax    BOTERM,x        Buffer offset to the terminator field
E27A 104F             (        forth.asm):00550 (2)             clrd
E27C ED84             (        forth.asm):00551 (5+0)           std     ,x              Clear terminator and flags fields
                      (        forth.asm):00552                 IFNE    DEBUG
                      (        forth.asm):00553                 ldd     #$C7C7
                      (        forth.asm):00554                 std     2,x             Dummy block number
                      (        forth.asm):00555                 ENDC
E27E 39               (        forth.asm):00556 (4)             rts
                      (        forth.asm):00557         
                      (        forth.asm):00558         * Scan for the next non-space character pointed to by X.
                      (        forth.asm):00559         * That character is returned through A. Flags are set accordingly.
E27F A680             (        forth.asm):00560 (4+1)   SCNSTOK lda     ,x+
E281 2704             (        forth.asm):00561 (3)             beq     @scstk1
E283 8120             (        forth.asm):00562 (2)             cmpa    #SP
E285 27F8             (        forth.asm):00563 (3)             beq     SCNSTOK
E287 301F             (        forth.asm):00564 (4+1)   @scstk1 leax    -1,x            Keep X pointing at the beginning of the token
E289 9F02             (        forth.asm):00565 (4)             stx     TOKENSP
E28B 4D               (        forth.asm):00566 (1)             tsta                    Have to test again because LEA affects Z
E28C 39               (        forth.asm):00567 (4)             rts
                      (        forth.asm):00568         
                      (        forth.asm):00569         * Scan for the next white space character (or NUL) as an end of token marker.
                      (        forth.asm):00570         * Upon entry:
                      (        forth.asm):00571         * - X points to the input stream.
                      (        forth.asm):00572         * Upon return:
                      (        forth.asm):00573         * - X will point to the next space character or NUL.
                      (        forth.asm):00574         * - CURTOKL will hold the current token length (returned in B).
                      (        forth.asm):00575         * - TOKENEP will point to the end of the current token.
E28D 5F               (        forth.asm):00576 (1)     SCNETOK clrb
E28E 5C               (        forth.asm):00577 (1)     @scetok incb
E28F A680             (        forth.asm):00578 (4+1)           lda     ,x+
E291 2704             (        forth.asm):00579 (3)             beq     @scetk1
E293 8120             (        forth.asm):00580 (2)             cmpa    #SP
E295 26F7             (        forth.asm):00581 (3)             bne     @scetok
E297 301F             (        forth.asm):00582 (4+1)   @scetk1 leax    -1,x            Keep X pointing at the end of the token
E299 9F04             (        forth.asm):00583 (4)             stx     TOKENEP
E29B 5A               (        forth.asm):00584 (1)             decb
E29C D732             (        forth.asm):00585 (3)             stb     CURTOKL
E29E 39               (        forth.asm):00586 (4)             rts
                      (        forth.asm):00587         
                      (        forth.asm):00588         * Check for numeric literal BASE prefix. On entry X has the input stream
                      (        forth.asm):00589         * pointer. On exit, BASE is altered if needed and the original BASE saved
                      (        forth.asm):00590         * to BASBKUP. If BASE was not changed, BASBKUP will be zero.
                      (        forth.asm):00591         * D is altered, X is updated if a BASE prefix is detected, other registers
                      (        forth.asm):00592         * are untouched.
E29F E684             (        forth.asm):00593 (4+0)   CKNBPFX ldb     ,x              B has a potential base prefix character
E2A1 3410             (        forth.asm):00594 (4+2)           pshs    x
E2A3 8EFFDB           (        forth.asm):00595 (3)             ldx     #BASALST        A associative list (A-list) of BASE prefixes
E2A6 A681             (        forth.asm):00596 (4+2)   @pflkup lda     ,x++            Potential BASE prefix character to A
E2A8 2707             (        forth.asm):00597 (3)             beq     @nopfix         Reached the end of the A-list. No prefix found
E2AA 103798           (        forth.asm):00598 (4)             cmpr    b,a             Prefix match?
E2AD 2707             (        forth.asm):00599 (3)             beq     @pfxfnd         Yes
E2AF 20F5             (        forth.asm):00600 (3)             bra     @pflkup
E2B1 0F28             (        forth.asm):00601 (5)     @nopfix clr     BASBKUP         Nothing to be restored to BASE
E2B3 3510             (        forth.asm):00602 (4+2)           puls    x
E2B5 39               (        forth.asm):00603 (4)             rts
E2B6 961F             (        forth.asm):00604 (3)     @pfxfnd lda     UBASE+1
E2B8 9728             (        forth.asm):00605 (3)             sta     BASBKUP         Back up the current BASE value
E2BA A61F             (        forth.asm):00606 (4+1)           lda     -1,x            The BASE specified by the prefix
E2BC 971F             (        forth.asm):00607 (3)             sta     UBASE+1         Update BASE
E2BE 3510             (        forth.asm):00608 (4+2)           puls    x
E2C0 3001             (        forth.asm):00609 (4+1)           leax    1,x             Skip the prefix from the input stream
                      (        forth.asm):00610         * The following is not especially pretty since we are altering system
                      (        forth.asm):00611         * stack contents owned by the caller. Yet it remains conducive to more
                      (        forth.asm):00612         * compact code. With only a few bytes of EEPROM left, I think this is legit.
E2C2 6A62             (        forth.asm):00613 (6+1)           dec     2,s             Decrement the stacked up flavour of CURTOKL
E2C4 39               (        forth.asm):00614 (4)             rts
                      (        forth.asm):00615         
                      (        forth.asm):00616         * Restore BASE if a numeric literal BASE prefix was detected.
                      (        forth.asm):00617         * X is to be preserved at all cost!
E2C5 9628             (        forth.asm):00618 (3)     RSBSPFX lda     BASBKUP
E2C7 2702             (        forth.asm):00619 (3)             beq     @theend
E2C9 971F             (        forth.asm):00620 (3)             sta     UBASE+1
E2CB 39               (        forth.asm):00621 (4)     @theend rts
                      (        forth.asm):00622         
                      (        forth.asm):00623         * Check whether BASE is in the supported range ([2..36]).
E2CC 961F             (        forth.asm):00624 (3)     CKBASE  lda     UBASE+1         BASE
E2CE 8102             (        forth.asm):00625 (2)             cmpa    #2
E2D0 2505             (        forth.asm):00626 (3)             blo     @ckbser         Must be >= 2
E2D2 8124             (        forth.asm):00627 (2)             cmpa    #36
E2D4 2201             (        forth.asm):00628 (3)             bhi     @ckbser         And <= 36 (the ANSi maximum)
E2D6 39               (        forth.asm):00629 (4)             rts
E2D7 C60F             (        forth.asm):00630 (2)     @ckbser ldb     #15             Invalid BASE
E2D9 BDE640           (        forth.asm):00631 (7)             jsr     ERRHDLR         No return
     E2DC             (        forth.asm):00632         CKBASRA equ     *
                      (        forth.asm):00633         
                      (        forth.asm):00634         * NUMCVT performs a signed string to number conversion. The input string is
                      (        forth.asm):00635         * acquired from the input stream. Note that this routine always is called
                      (        forth.asm):00636         * after a dictionary lookup (SWDIC), so TOKENSP and CURTOKL are guaranteed
                      (        forth.asm):00637         * to have been set previously. There are two ways out this routine:
                      (        forth.asm):00638         * - redirection to the error handler (Undefined word), or
                      (        forth.asm):00639         * - a converted cell returned through X.
                      (        forth.asm):00640         * This a re-implementation based on CONVERT but unlike CONVERT, which produces
                      (        forth.asm):00641         * an unsigned double as its output, this produces a signed single cell.
E2DC 8DEE             (        forth.asm):00642 (6)     NUMCVT  bsr     CKBASE          No return if BASE isn't in the [2..36] range
E2DE 9632             (        forth.asm):00643 (3)             lda     CURTOKL         Character count to go through
E2E0 3402             (        forth.asm):00644 (4+1)           pshs    a
E2E2 0F30             (        forth.asm):00645 (5)             clr     ISNEGF          Assume the result is positive
E2E4 9E02             (        forth.asm):00646 (4)             ldx     TOKENSP
E2E6 8DB7             (        forth.asm):00647 (6)             bsr     CKNBPFX         Check for numeric literal BASE prefix
                      (        forth.asm):00648         * Check for optional minus sign.
E2E8 A684             (        forth.asm):00649 (4+0)           lda     ,x
E2EA 812D             (        forth.asm):00650 (2)             cmpa    #'-
E2EC 2606             (        forth.asm):00651 (3)             bne     @ncini
E2EE 0C30             (        forth.asm):00652 (5)             inc     ISNEGF          Remember to negate the result before returning
E2F0 3001             (        forth.asm):00653 (4+1)           leax    1,x             Skip the negativity!
E2F2 6AE4             (        forth.asm):00654 (6+0)           dec     ,s              Decrement token length
E2F4 104F             (        forth.asm):00655 (2)     @ncini  clrd                    Initialize the result
E2F6 119F1E           (        forth.asm):00656 (29)    @ncnxt  muld    UBASE           D multipled by BASE to Q (D:W)
E2F9 E680             (        forth.asm):00657 (4+1)           ldb     ,x+             Acquire next input char (ignore the product MSC)
E2FB C030             (        forth.asm):00658 (2)             subb    #'0
E2FD 252D             (        forth.asm):00659 (3)             blo     @ncoor          Digit out of range
E2FF C10A             (        forth.asm):00660 (2)             cmpb    #10
E301 2510             (        forth.asm):00661 (3)             blo     @ncnolt         No letter in potential BASE
                      (        forth.asm):00662                 IFEQ    CSSNTVE
E303 C111             (        forth.asm):00663 (2)             cmpb    #'A-'0
E305 2525             (        forth.asm):00664 (3)             blo     @ncoor          Greater than 9 but lower than A
E307 C131             (        forth.asm):00665 (2)             cmpb    #'a-'0
E309 2506             (        forth.asm):00666 (3)             blo     @ncisuc         Upper case already
E30B C14A             (        forth.asm):00667 (2)             cmpb    #'z-'0
E30D 221D             (        forth.asm):00668 (3)             bhi     @ncoor          Definitely out of range
E30F C020             (        forth.asm):00669 (2)             subb    #'a-'A          To upper case
                      (        forth.asm):00670                 ENDC
E311 C007             (        forth.asm):00671 (2)     @ncisuc subb    #'A-':          A-Z to number
E313 D11F             (        forth.asm):00672 (3)     @ncnolt cmpb    UBASE+1         B has a digit. Make sure it's less than BASE
E315 2415             (        forth.asm):00673 (3)             bhs     @ncoor
                      (        forth.asm):00674         * Digit in B has been validated wrt. BASE.
E317 4F               (        forth.asm):00675 (1)             clra
E318 103060           (        forth.asm):00676 (4)             addr    w,d
E31B 6AE4             (        forth.asm):00677 (6+0)           dec     ,s              Are we done yet?
E31D 26D7             (        forth.asm):00678 (3)             bne     @ncnxt          No. Iterate over to the next digit
E31F 0D30             (        forth.asm):00679 (4)             tst     ISNEGF          Are we dealing with a negative number?
E321 2702             (        forth.asm):00680 (3)             beq     @ncdone         No
E323 1040             (        forth.asm):00681 (2)             negd                    Acknowledge the negativity
E325 3261             (        forth.asm):00682 (4+1)   @ncdone leas    1,s             Drop token length from the system stack
E327 1F01             (        forth.asm):00683 (4)             tfr     d,x             Return the result in X
E329 8D9A             (        forth.asm):00684 (6)             bsr     RSBSPFX         Restore BASE if needed
E32B 39               (        forth.asm):00685 (4)             rts
E32C 3261             (        forth.asm):00686 (4+1)   @ncoor  leas    1,s             Drop token length from the system stack
E32E 9E02             (        forth.asm):00687 (4)             ldx     TOKENSP         Current digit is out of range
E330 C602             (        forth.asm):00688 (2)             ldb     #2              Undefined (X points to the offending word)
E332 BDE640           (        forth.asm):00689 (7)             jsr     ERRHDLR         No return
     E335             (        forth.asm):00690         NUMCVRA equ     *               For symbolic stack dump purposes
E335 12               (        forth.asm):00691 (1)             nop
                      (        forth.asm):00692         
                      (        forth.asm):00693         * Check for minimal data stack depth. On input D has the lowest possible stack
                      (        forth.asm):00694         * address that satisfies the needs of the caller. This routine is meant
                      (        forth.asm):00695         * to support "transactional" behaviour, which is intended to improve
                      (        forth.asm):00696         * debugging support.
E336 103703           (        forth.asm):00697 (4)     CHKNDPT cmpr    d,u
E339 2201             (        forth.asm):00698 (3)             bhi     @stkudf
E33B 39               (        forth.asm):00699 (4)             rts
E33C C601             (        forth.asm):00700 (2)     @stkudf ldb     #1              Data stack underflow
E33E BDE640           (        forth.asm):00701 (7)             jsr     ERRHDLR         No return
     E341             (        forth.asm):00702         CKDPTRA equ     *
                      (        forth.asm):00703         
                      (        forth.asm):00704         * Convert number stored in X to a string (depending on BASE value).
                      (        forth.asm):00705         * Output is stored in the global TBUFF buffer. X is preserved.
E341 8D89             (        forth.asm):00706 (6)     CVNSTR  bsr     CKBASE
E343 0F30             (        forth.asm):00707 (5)             clr     ISNEGF
E345 1F10             (        forth.asm):00708 (4)             tfr     x,d
E347 0D31             (        forth.asm):00709 (4)             tst     CVISSGN         Are we to perform a signed conversion?
E349 2708             (        forth.asm):00710 (3)             beq     @cvnst1
E34B 104D             (        forth.asm):00711 (2)             tstd
E34D 2A04             (        forth.asm):00712 (3)             bpl     @cvnst1
E34F 0C30             (        forth.asm):00713 (5)             inc     ISNEGF          Number being converted is negative
E351 1040             (        forth.asm):00714 (2)             negd
E353 1F06             (        forth.asm):00715 (4)     @cvnst1 tfr     d,w
E355 104F             (        forth.asm):00716 (2)             clrd
E357 108E03B1         (        forth.asm):00717 (4)             ldy     #TBUFF+19       Sign + 16 digits + terminator + 1
E35B 6FA2             (        forth.asm):00718 (6+1)           clr     ,-y             End of string marker
E35D 119E1E           (        forth.asm):00719 (35)    @cvnst2 divq    UBASE           D returns the modulo and W the quotient
E360 8630             (        forth.asm):00720 (2)             lda     #'0
E362 C10A             (        forth.asm):00721 (2)             cmpb    #10
E364 2502             (        forth.asm):00722 (3)             bcs     @cvnst3
                      (        forth.asm):00723         * BASE has letters among its valid numbers.
E366 8637             (        forth.asm):00724 (2)             lda     #'A-10
E368 103089           (        forth.asm):00725 (4)     @cvnst3 addr    a,b
E36B E7A2             (        forth.asm):00726 (4+1)           stb     ,-y
E36D 104F             (        forth.asm):00727 (2)             clrd
E36F 105D             (        forth.asm):00728 (2)             tstw
E371 26EA             (        forth.asm):00729 (3)             bne     @cvnst2
E373 C620             (        forth.asm):00730 (2)             ldb     #SP
E375 0D30             (        forth.asm):00731 (4)             tst     ISNEGF
E377 2702             (        forth.asm):00732 (3)             beq     @cvnst4
E379 C62D             (        forth.asm):00733 (2)             ldb     #'-
E37B E7A2             (        forth.asm):00734 (4+1)   @cvnst4 stb     ,-y
                      (        forth.asm):00735         * We need to insert leading spaces up to the beginning of the output buffer.
E37D C620             (        forth.asm):00736 (2)             ldb     #SP
E37F 108C039E         (        forth.asm):00737 (4)     @cvnst5 cmpy    #TBUFF
E383 2601             (        forth.asm):00738 (3)             bne     @cvnst6
E385 39               (        forth.asm):00739 (4)             rts
E386 E7A2             (        forth.asm):00740 (4+1)   @cvnst6 stb     ,-y
E388 20F5             (        forth.asm):00741 (3)             bra     @cvnst5
                      (        forth.asm):00742         
                      (        forth.asm):00743         * Search word beginning at address TOKENSP in the dictionary.
                      (        forth.asm):00744         * Upon return Z will be set if the word was not found.
                      (        forth.asm):00745         * Otherwise, Y will point to the code section of the word.
                      (        forth.asm):00746         * CSSNTVE (defined in constants.asm) defines whether the
                      (        forth.asm):00747         * dictionary match is case sensitive or not.
                      (        forth.asm):00748         * Important note: if the word is found TOKENEP will be copied to TOKENSP.
E38A 9E02             (        forth.asm):00749 (4)     SWDIC   ldx     TOKENSP
E38C BDE28D           (        forth.asm):00750 (7)             jsr     SCNETOK         B has CURTOKL
E38F 9E08             (        forth.asm):00751 (4)             ldx     DICEND
E391 9F16             (        forth.asm):00752 (4)             stx     VLPRVEP         Last dictionary entry code address + 1
E393 9E02             (        forth.asm):00753 (4)             ldx     TOKENSP
E395 109E06           (        forth.asm):00754 (5)             ldy     LSTWAD          Latest word header address to Y
E398 2606             (        forth.asm):00755 (3)     @swrdc0 bne     @swrdc1
E39A 1FC2             (        forth.asm):00756 (4)             tfr     0,y             Word not found. Z is set
E39C 109F0E           (        forth.asm):00757 (5)             sty     PLOAD
E39F 39               (        forth.asm):00758 (4)             rts
E3A0 A6A4             (        forth.asm):00759 (4+0)   @swrdc1 lda     ,y              Word attribute to A
E3A2 841F             (        forth.asm):00760 (2)             anda    #WRLNMSK        Extract word length
E3A4 3420             (        forth.asm):00761 (4+2)           pshs    y
E3A6 103798           (        forth.asm):00762 (4)             cmpr    b,a             Word length match?
E3A9 2638             (        forth.asm):00763 (3)             bne     @swrdc3         No, point to next dictionary entry
E3AB 3121             (        forth.asm):00764 (4+1)           leay    1,y
E3AD A6A0             (        forth.asm):00765 (4+1)   @swrdc2 lda     ,y+
                      (        forth.asm):00766                 IFNE    CSSNTVE
                      (        forth.asm):00767                 cmpa    ,x+             Case sensitive dictionary
                      (        forth.asm):00768                 ELSE
E3AF 1F9E             (        forth.asm):00769 (4)             tfr     b,e             Case insensitive search (preferred)
E3B1 E680             (        forth.asm):00770 (4+1)           ldb     ,x+
E3B3 C161             (        forth.asm):00771 (2)             cmpb    #'a
E3B5 2506             (        forth.asm):00772 (3)             bcs     @nochg
E3B7 C17B             (        forth.asm):00773 (2)             cmpb    #'z+1
E3B9 2402             (        forth.asm):00774 (3)             bcc     @nochg
E3BB C020             (        forth.asm):00775 (2)             subb    #'a-'A
E3BD 103798           (        forth.asm):00776 (4)     @nochg  cmpr    b,a
E3C0 1FE9             (        forth.asm):00777 (4)             tfr     e,b
                      (        forth.asm):00778                 ENDC
E3C2 261F             (        forth.asm):00779 (3)             bne     @swrdc3
E3C4 5A               (        forth.asm):00780 (1)             decb
E3C5 26E6             (        forth.asm):00781 (3)             bne     @swrdc2
                      (        forth.asm):00782         * Word match!
E3C7 3510             (        forth.asm):00783 (4+2)           puls    x
E3C9 E684             (        forth.asm):00784 (4+0)           ldb     ,x              Word attribute byte to B
E3CB 4F               (        forth.asm):00785 (1)             clra
E3CC 58               (        forth.asm):00786 (1)             lslb                    Bit 7 to CFLAG
E3CD 49               (        forth.asm):00787 (1)             rola                    CFLAG to A
E3CE 9733             (        forth.asm):00788 (3)             sta     IMDFLG          Set IMMEDIATE flag
E3D0 4F               (        forth.asm):00789 (1)             clra
E3D1 58               (        forth.asm):00790 (1)             lslb                    Bit 6 to CFLAG
E3D2 49               (        forth.asm):00791 (1)             rola                    CFLAG to A
E3D3 9734             (        forth.asm):00792 (3)             sta     DEFFLG          Set DEFINE flag
E3D5 9E04             (        forth.asm):00793 (4)             ldx     TOKENEP
E3D7 9F02             (        forth.asm):00794 (4)             stx     TOKENSP
                      (        forth.asm):00795                 IFNE    RELFEAT
E3D9 3123             (        forth.asm):00796 (4+1)           leay    3,y             Skip back pointer and checksum. Return XT
                      (        forth.asm):00797                 ELSE
                      (        forth.asm):00798                 leay    2,y             Skip back pointer. Return XT
                      (        forth.asm):00799                 ENDC
E3DB DC16             (        forth.asm):00800 (4)             ldd     VLPRVEP
E3DD 103220           (        forth.asm):00801 (4)             subr    y,d
E3E0 DD0E             (        forth.asm):00802 (4)             std     PLOAD
E3E2 39               (        forth.asm):00803 (4)             rts                     NZ since there is no zero payload word
E3E3 3520             (        forth.asm):00804 (4+2)   @swrdc3 puls    y               Point to previous word header
E3E5 109F16           (        forth.asm):00805 (5)             sty     VLPRVEP
E3E8 4F               (        forth.asm):00806 (1)             clra
E3E9 E6A0             (        forth.asm):00807 (4+1)           ldb     ,y+
E3EB C41F             (        forth.asm):00808 (2)             andb    #WRLNMSK
E3ED 31AB             (        forth.asm):00809 (4+2)           leay    d,y
E3EF 9E02             (        forth.asm):00810 (4)             ldx     TOKENSP
E3F1 D632             (        forth.asm):00811 (3)             ldb     CURTOKL
E3F3 10AEA4           (        forth.asm):00812 (6+0)           ldy     ,y
E3F6 20A0             (        forth.asm):00813 (3)             bra     @swrdc0
                      (        forth.asm):00814         
                      (        forth.asm):00815         * Create new dictionary entry. The word name being created is acquired from
                      (        forth.asm):00816         * the input stream. Warning, this requires a writable dictionary!
                      (        forth.asm):00817         * The new end of the dictionary is returned in Y. W is preserved.
E3F8 1038             (        forth.asm):00818 (6)     LOCWRT  pshsw
E3FA 9E08             (        forth.asm):00819 (4)             ldx     DICEND
                      (        forth.asm):00820                 IFNE    DEBUG
                      (        forth.asm):00821                 cmpx    #ROMSTRT
                      (        forth.asm):00822                 bcs     @locwr0
                      (        forth.asm):00823                 ldb     #10             Assertion failure (trying to write to ROM!)
                      (        forth.asm):00824                 jsr     ERRHDLR         No return
E3FC                  (        forth.asm):00825         LWAFRA  equ     *
                      (        forth.asm):00826                 ENDC
E3FC 9F0C             (        forth.asm):00827 (4)     @locwr0 stx     BDICEND         Back pointer up
E3FE 9E06             (        forth.asm):00828 (4)             ldx     LSTWAD
E400 9F0A             (        forth.asm):00829 (4)             stx     BLSTWAD         Back pointer up
E402 BDE70D           (        forth.asm):00830 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
E405 6D84             (        forth.asm):00831 (5+0)           tst     ,x
E407 2605             (        forth.asm):00832 (3)             bne     @locwr2
E409 C605             (        forth.asm):00833 (2)     @locwr1 ldb     #5              Missing word name
E40B BDE640           (        forth.asm):00834 (7)             jsr     ERRHDLR         No return
     E40E             (        forth.asm):00835         LWMNRA  equ     *               LOCWRT missing word name return address
E40E BDE27F           (        forth.asm):00836 (7)     @locwr2 jsr     SCNSTOK
E411 27F6             (        forth.asm):00837 (3)             beq     @locwr1         End of line reached
E413 BDE28D           (        forth.asm):00838 (7)             jsr     SCNETOK         X has TOKENEP, B has CURTOKL
E416 109E02           (        forth.asm):00839 (5)             ldy     TOKENSP
E419 103221           (        forth.asm):00840 (4)             subr    y,x
E41C 3410             (        forth.asm):00841 (4+2)           pshs    x               Word length to the system stack
E41E 9E08             (        forth.asm):00842 (4)             ldx     DICEND
E420 A661             (        forth.asm):00843 (4+1)           lda     1,s             Word length LSB in the system stack
E422 8120             (        forth.asm):00844 (2)             cmpa    #1+WRLNMSK      Max word length is 31, 79-STANDARD compliant
E424 2505             (        forth.asm):00845 (3)             blo     @lcwr21
E426 C610             (        forth.asm):00846 (2)             ldb     #16             Word name is too long
E428 BDE640           (        forth.asm):00847 (7)             jsr     ERRHDLR
     E42B             (        forth.asm):00848         WTOOLNG equ     *
E42B A780             (        forth.asm):00849 (4+1)   @lcwr21 sta     ,x+             Word length to dictionary
E42D 10A6E1           (        forth.asm):00850 (6+2)           ldw     ,s++            16-bit word length to W
E430 1E12             (        forth.asm):00851 (5)             exg     x,y             Y points to the dictionary, X has TOKENSP
                      (        forth.asm):00852                 IFNE    CSSNTVE
                      (        forth.asm):00853                 tfm     x+,y+           Word name to dictionary, as is
                      (        forth.asm):00854                 ELSE
E432 1FF9             (        forth.asm):00855 (4)             tfr     f,b             Force dictionary entry to upper case
E434 A680             (        forth.asm):00856 (4+1)   @locwr3 lda     ,x+
E436 8161             (        forth.asm):00857 (2)             cmpa    #'a
E438 2506             (        forth.asm):00858 (3)             bcs     @locwr4
E43A 817B             (        forth.asm):00859 (2)             cmpa    #'z+1
E43C 2402             (        forth.asm):00860 (3)             bcc     @locwr4
E43E 8020             (        forth.asm):00861 (2)             suba    #'a-'A          To upper case
E440 A7A0             (        forth.asm):00862 (4+1)   @locwr4 sta     ,y+
E442 5A               (        forth.asm):00863 (1)             decb
E443 26EF             (        forth.asm):00864 (3)             bne     @locwr3
                      (        forth.asm):00865                 ENDC
E445 1F10             (        forth.asm):00866 (4)             tfr     x,d
E447 931C             (        forth.asm):00867 (4)             subd    BSBFADR
E449 DD22             (        forth.asm):00868 (4)             std     UTOIN           Skip word name in the input stream
E44B 9E06             (        forth.asm):00869 (4)             ldx     LSTWAD
E44D AFA1             (        forth.asm):00870 (5+2)           stx     ,y++            Back pointer to dictionary
                      (        forth.asm):00871                 IFNE    RELFEAT
E44F 6FA0             (        forth.asm):00872 (6+1)           clr     ,y+             Initialize the checksum header field
                      (        forth.asm):00873                 ENDC
E451 109F08           (        forth.asm):00874 (5)             sty     DICEND
E454 109F12           (        forth.asm):00875 (5)             sty     RECADDR         Should we resort to recursion later on
E457 1039             (        forth.asm):00876 (6)             pulsw
E459 39               (        forth.asm):00877 (4)             rts
                      (        forth.asm):00878         
                      (        forth.asm):00879         * Compile 'ldx  #X; jsr NPUSH'.
                      (        forth.asm):00880         * DICEND is updated and returned in Y.
E45A 109E08           (        forth.asm):00881 (5)     LITER   ldy     DICEND
E45D 868E             (        forth.asm):00882 (2)             lda     #LDXOPC         LDX immediate
E45F 8D10             (        forth.asm):00883 (6)             bsr     VARCON2
E461 86BD             (        forth.asm):00884 (2)             lda     #JSROPC         JSR extended
E463 BDE139           (        forth.asm):00885 (7)             jsr     CHKRTS          Check if the final RTS can be omitted
E466 8D06             (        forth.asm):00886 (6)             bsr     VARCON1
E468 109F08           (        forth.asm):00887 (5)             sty     DICEND
E46B 39               (        forth.asm):00888 (4)             rts
                      (        forth.asm):00889         
                      (        forth.asm):00890         * Compile 'jmp  NPUSH'.
                      (        forth.asm):00891         * Y points to the end of the dictionary on entry and on exit.
E46C 867E             (        forth.asm):00892 (2)     VARCON  lda     #JMPOPC         JMP extended
E46E 8EE6B9           (        forth.asm):00893 (3)     VARCON1 ldx     #NPUSH
E471 A7A0             (        forth.asm):00894 (4+1)   VARCON2 sta     ,y+
E473 AFA1             (        forth.asm):00895 (5+2)           stx     ,y++
E475 39               (        forth.asm):00896 (4)             rts
                      (        forth.asm):00897         
                      (        forth.asm):00898         * Used by U<, U>, <, >.
E476 CC0246BDE336     (        forth.asm):00899         CMP2    MINDREQ 2               At least 2 cells must be stacked up
E47C 10AEC4           (        forth.asm):00900 (6+0)   CMP2RA  ldy     ,u
E47F AE42             (        forth.asm):00901 (5+1)           ldx     2,u
E481 103721           (        forth.asm):00902 (4)             cmpr    y,x
E484 1FA9             (        forth.asm):00903 (4)             tfr     cc,b
                      (        forth.asm):00904                 IFNE    DEBUG
                      (        forth.asm):00905                 clra
                      (        forth.asm):00906                 std     CCREG
                      (        forth.asm):00907                 ENDC
E486 1FC1             (        forth.asm):00908 (4)             tfr     0,x
E488 3344             (        forth.asm):00909 (4+1)           leau    4,u
E48A 1F9A             (        forth.asm):00910 (4)             tfr     b,cc
E48C 39               (        forth.asm):00911 (4)             rts
                      (        forth.asm):00912         
                      (        forth.asm):00913         * Used by CMOVE, CMOVE>, MOVE.
E48D CC0244BDE336     (        forth.asm):00914         ACQMOVP MINDREQ 3               At least 3 cells must be stacked up
E493 10A6C4           (        forth.asm):00915 (6+0)   ACQVMRA ldw     ,u              Byte count
E496 10AE42           (        forth.asm):00916 (6+1)           ldy     2,u             Destination address
E499 AE44             (        forth.asm):00917 (5+1)           ldx     4,u             Source address
E49B 3346             (        forth.asm):00918 (4+1)           leau    6,u             Drop 3 cells from the user stack
E49D 39               (        forth.asm):00919 (4)             rts
                      (        forth.asm):00920         
                      (        forth.asm):00921         * FDCTSYM enveadours to match the address stored in Y to a dictionary entry.
                      (        forth.asm):00922         * Upon a successful flexible match, it will output a string in the form of
                      (        forth.asm):00923         * <wordname>+<offset> to the string pointed to by X. <wordname> refers to the
                      (        forth.asm):00924         * code entry point of the matched word. <offset> will be expressed in hex.
                      (        forth.asm):00925         * If a match is found, Z will be clear, otherwise it will be set.
                      (        forth.asm):00926         * A candidate for a word code address must meet the following criteria:
                      (        forth.asm):00927         * ((Y U>= #EBUFS) AND (Y U< #THEEND)) OR ((Y U>= #WDICSPC) AND (Y U< DICEND)).
                      (        forth.asm):00928         * Upon return:
                      (        forth.asm):00929         * - the string pointed to by X will updated with its symbolic match
                      (        forth.asm):00930         *   (NUL terminated), if there is one. X itself might have been altered.
                      (        forth.asm):00931         * - Y should be preserved.
                      (        forth.asm):00932         * EBUFS (EMPTY-BUFFERS) header address is the last word in the dictionary.
                      (        forth.asm):00933                 IFNE    SSDFEAT
E49E 3430             (        forth.asm):00934 (4+4)   FDCTSYM pshs    y,x     
E4A0 1F21             (        forth.asm):00935 (4)             tfr     y,x             Potential execution token to X
E4A2 8CE848           (        forth.asm):00936 (3)             cmpx    #EBUFS
E4A5 2505             (        forth.asm):00937 (3)             blo     @fdstr2 
E4A7 8CFDF8           (        forth.asm):00938 (3)             cmpx    #THEEND
E4AA 250D             (        forth.asm):00939 (3)             blo     @fdsmtc
E4AC 8C0C10           (        forth.asm):00940 (3)     @fdstr2 cmpx    #WDICSPC        Term 2 of the predicate for a valid word addr
E4AF 2504             (        forth.asm):00941 (3)             blo     @fdsnom
E4B1 9C08             (        forth.asm):00942 (4)             cmpx    DICEND
E4B3 2504             (        forth.asm):00943 (3)             blo     @fdsmtc
E4B5 4F               (        forth.asm):00944 (1)     @fdsnom clra                    No match (Z is set)
E4B6 3530             (        forth.asm):00945 (4+4)           puls    x,y
E4B8 39               (        forth.asm):00946 (4)             rts
E4B9 9E06             (        forth.asm):00947 (4)     @fdsmtc ldx     LSTWAD          Potential match. Scan upward from LAST
                      (        forth.asm):00948         * X points to the latest word header, Y has an execution token.
E4BB 109608           (        forth.asm):00949 (5)             ldw     DICEND          W points to the end of the code section
E4BE 3410             (        forth.asm):00950 (4+2)   @fdslop pshs    x               Pointer to the current word header
E4C0 E680             (        forth.asm):00951 (4+1)           ldb     ,x+
E4C2 C41F             (        forth.asm):00952 (2)             andb    #WRLNMSK
E4C4 3A               (        forth.asm):00953 (1)             abx                     Skip word name string
E4C5 EC81             (        forth.asm):00954 (5+2)           ldd     ,x++            Backlink to D
                      (        forth.asm):00955                 IFNE    RELFEAT
E4C7 3001             (        forth.asm):00956 (4+1)           leax    1,x             Skip the checksum
                      (        forth.asm):00957                 ENDC
E4C9 103712           (        forth.asm):00958 (4)             cmpr    x,y
E4CC 2530             (        forth.asm):00959 (3)             blo     @fdsnwd
E4CE 103762           (        forth.asm):00960 (4)             cmpr    w,y
E4D1 222B             (        forth.asm):00961 (3)             bhi     @fdsnwd         An equal address is allowed here, in case
                      (        forth.asm):00962         * jsr ERRHDLR is the last instruction for the word under consideration.
                      (        forth.asm):00963         * This happens to be the case for FORGET and LPAR.
                      (        forth.asm):00964         * Y matches the code range for the current word.
E4D3 3510             (        forth.asm):00965 (4+2)           puls    x
E4D5 E680             (        forth.asm):00966 (4+1)           ldb     ,x+
E4D7 C41F             (        forth.asm):00967 (2)             andb    #WRLNMSK
E4D9 1F9F             (        forth.asm):00968 (4)             tfr     b,f
E4DB 114F             (        forth.asm):00969 (2)             clre                    W has the matched word length
E4DD 10AEE4           (        forth.asm):00970 (6+0)           ldy     ,s              Y points to the target buffer
E4E0 8627             (        forth.asm):00971 (2)             lda     #''
E4E2 A7A0             (        forth.asm):00972 (4+1)           sta     ,y+
E4E4 113812           (        forth.asm):00973 (6+?)           tfm     x+,y+
E4E7 A7A0             (        forth.asm):00974 (4+1)           sta     ,y+
                      (        forth.asm):00975         * Offset processing.
E4E9 862B             (        forth.asm):00976 (2)             lda     #'+
E4EB A7A0             (        forth.asm):00977 (4+1)           sta     ,y+
                      (        forth.asm):00978                 IFNE    RELFEAT
E4ED 3003             (        forth.asm):00979 (4+1)           leax    3,x             Skip backlink and checksum
                      (        forth.asm):00980                 ELSE
                      (        forth.asm):00981                 leax    2,x             Skip backlink
                      (        forth.asm):00982                 ENDC
E4EF EC62             (        forth.asm):00983 (5+1)           ldd     2,s             Execution token to D
E4F1 103210           (        forth.asm):00984 (4)             subr    x,d             Offset between XT and word entry point to D
E4F4 1F21             (        forth.asm):00985 (4)             tfr     y,x
E4F6 BDE174           (        forth.asm):00986 (7)             jsr     HDMP4           Dump hex incarnation of the offset to X
E4F9 3530             (        forth.asm):00987 (4+4)           puls    x,y
E4FB 1CFB             (        forth.asm):00988 (2)             andcc   #^ZFLAG         Clear ZFLAG
E4FD 39               (        forth.asm):00989 (4)             rts
                      (        forth.asm):00990         * Point to the next word.
E4FE 1039             (        forth.asm):00991 (6)     @fdsnwd pulsw                   Retrieve current word header address
E500 104D             (        forth.asm):00992 (2)             tstd
E502 27B1             (        forth.asm):00993 (3)             beq     @fdsnom         Just met the last dictionary entry
E504 1F01             (        forth.asm):00994 (4)             tfr     d,x             Point to previous word header
E506 10810C10         (        forth.asm):00995 (4)             cmpw    #WDICSPC        Are we transitioning from RAM to ROM?
E50A 26B2             (        forth.asm):00996 (3)             bne     @fdslop         No singularity
E50C 1086FDF8         (        forth.asm):00997 (4)             ldw     #THEEND         Won't be able to diagnose the ROM based @...
E510 20AC             (        forth.asm):00998 (3)             bra     @fdslop
                      (        forth.asm):00999         
                      (        forth.asm):01000         * Find the best possible symbolic approximation of Y and store it to the
                      (        forth.asm):01001         * buffer pointed to by X.
                      (        forth.asm):01002         * On entry:
                      (        forth.asm):01003         * - Y has a code address which is to be matched with a symbolic name + offset.
                      (        forth.asm):01004         * - X points to a buffer where the resolution is to be stored.
                      (        forth.asm):01005         * On return:
                      (        forth.asm):01006         * - Y is to be preserved.
                      (        forth.asm):01007         * - the output buffer will be updated with the best symbolic match (NUL term'd).
E512 3430             (        forth.asm):01008 (4+4)   FINDSYM pshs    y,x
E514 8D88             (        forth.asm):01009 (6)             bsr     FDCTSYM         Search the dictionary first (flexible match)
E516 261B             (        forth.asm):01010 (3)             bne     @dctmfn         Dictionary match found
E518 8EE538           (        forth.asm):01011 (3)             ldx     #NDCTWKS        Search kernel symbols for an exact match
E51B EC81             (        forth.asm):01012 (5+2)   @fsmlop ldd     ,x++
E51D 270B             (        forth.asm):01013 (3)             beq     @fsmfnd         End of well known symbols list?
E51F 103720           (        forth.asm):01014 (4)             cmpr    y,d
E522 2706             (        forth.asm):01015 (3)             beq     @fsmfnd
                      (        forth.asm):01016         * No well known symbol match. Skip string.
E524 A680             (        forth.asm):01017 (4+1)   @fsmskp lda     ,x+
E526 26FC             (        forth.asm):01018 (3)             bne     @fsmskp
E528 20F1             (        forth.asm):01019 (3)             bra     @fsmlop
E52A 10AEE4           (        forth.asm):01020 (6+0)   @fsmfnd ldy     ,s
E52D A680             (        forth.asm):01021 (4+1)   @fsmfn2 lda     ,x+
E52F A7A0             (        forth.asm):01022 (4+1)           sta     ,y+
E531 26FA             (        forth.asm):01023 (3)             bne     @fsmfn2
E533 3262             (        forth.asm):01024 (4+1)   @dctmfn leas    2,s
E535 3520             (        forth.asm):01025 (4+2)           puls    y
E537 39               (        forth.asm):01026 (4)             rts
                      (        forth.asm):01027         
                      (        forth.asm):01028         * Non-dictionary well known symbols.
E538 E000             (        forth.asm):01029         NDCTWKS fdb     IODZHDL         Illegal opcode/Division by zero trap handler
E53A 494F445A48444C00 (        forth.asm):01030                 fcn     'IODZHDL'
E542 E6D5             (        forth.asm):01031                 fdb     DPOPRA          Data stack underflow
E544 44504F50524100   (        forth.asm):01032                 fcn     'DPOPRA'
E54B E6C6             (        forth.asm):01033                 fdb     DPSHRA          Data stack overflow
E54D 44505348524100   (        forth.asm):01034                 fcn     'DPSHRA'
E554 E70D             (        forth.asm):01035                 fdb     RPOPRA          Return stack underflow
E556 52504F50524100   (        forth.asm):01036                 fcn     'RPOPRA'
E55D E6F3             (        forth.asm):01037                 fdb     RPSHRA          Return stack overflow
E55F 52505348524100   (        forth.asm):01038                 fcn     'RPSHRA'
E566 E640             (        forth.asm):01039                 fdb     ERRHDLR         Error handler
E568 45525248444C5200 (        forth.asm):01040                 fcn     'ERRHDLR'
E570 E2DC             (        forth.asm):01041                 fdb     CKBASRA         Illegal BASE value
E572 434B424153524100 (        forth.asm):01042                 fcn     'CKBASRA'
E57A E341             (        forth.asm):01043                 fdb     CKDPTRA         Not enough parameters supplied (transac. behav.)
E57C 434B445054524100 (        forth.asm):01044                 fcn     'CKDPTRA'
E584 E336             (        forth.asm):01045                 fdb     CHKNDPT         Check data stack minimum depth (transac. behav.)
E586 43484B4E44505400 (        forth.asm):01046                 fcn     'CHKNDPT'
E58E E47C             (        forth.asm):01047                 fdb     CMP2RA          Missing operand in any of U<, U>, <, >
E590 434D5032524100   (        forth.asm):01048                 fcn     'CMP2RA'
E597 E493             (        forth.asm):01049                 fdb     ACQVMRA         Three operands missing in any of CMOVE,
                      (        forth.asm):01050         *                               CMOVE>, MOVE
E599 414351564D524100 (        forth.asm):01051                 fcn     'ACQVMRA'
E5A1 E0BD             (        forth.asm):01052                 fdb     MINTLRA         Main interpreter loop return address
E5A3 4D494E544C524100 (        forth.asm):01053                 fcn     'MINTLRA'
E5AB E335             (        forth.asm):01054                 fdb     NUMCVRA         ? while converting a string to a number
E5AD 4E554D4356524100 (        forth.asm):01055                 fcn     'NUMCVRA'
E5B5 E0D0             (        forth.asm):01056                 fdb     NMCVIRA         Numeric conversion error while interpreting
E5B7 4E4D435649524100 (        forth.asm):01057                 fcn     'NMCVIRA'
E5BF E134             (        forth.asm):01058                 fdb     NMCVCRA         Numeric conversion error while compiling
E5C1 4E4D435643524100 (        forth.asm):01059                 fcn     'NMCVCRA'
E5C9 E107             (        forth.asm):01060                 fdb     INTRPRA         Interpreter RA (after the execution of a word)
E5CB 494E545250524100 (        forth.asm):01061                 fcn     'INTRPRA'
E5D3 E122             (        forth.asm):01062                 fdb     COMPLRA         Compiler RA (after the execution of an IMD word)
E5D5 434F4D504C524100 (        forth.asm):01063                 fcn     'COMPLRA'
E5DD E40E             (        forth.asm):01064                 fdb     LWMNRA          Missing word name in LOCWRT
E5DF 4C574D4E524100   (        forth.asm):01065                 fcn     'LWMNRA'
E5E6 E7DF             (        forth.asm):01066                 fdb     CFR1SRA         CF read one sector failed
E5E8 4346523153524100 (        forth.asm):01067                 fcn     'CFR1SRA'
E5F0 E6B9             (        forth.asm):01068                 fdb     NPUSH           Not an error RA but useful to have as a symbol
E5F2 4E5055534800     (        forth.asm):01069                 fcn     'NPUSH'
E5F8 E6D6             (        forth.asm):01070                 fdb     RPUSH           Not an error RA but useful to have as a symbol
E5FA 525055534800     (        forth.asm):01071                 fcn     'RPUSH'
E600 E6C7             (        forth.asm):01072                 fdb     NPOP            Not an error RA but useful to have as a symbol
E602 4E504F5000       (        forth.asm):01073                 fcn     'NPOP'
E607 E6F4             (        forth.asm):01074                 fdb     RPOP            Not an error RA but useful to have as a symbol
E609 52504F5000       (        forth.asm):01075                 fcn     'RPOP'
E60E E1DA             (        forth.asm):01076                 fdb     PUTS            Not an error RA but useful to have as a symbol
E610 5055545300       (        forth.asm):01077                 fcn     'PUTS'
                      (        forth.asm):01078                 IFNE    DEBUG
                      (        forth.asm):01079                 fdb     LWAFRA          Assertion failure in LOCWRT
                      (        forth.asm):01080                 fcn     'LOCWRTAF'
                      (        forth.asm):01081                 ENDC
E615 0000             (        forth.asm):01082                 fdb     0               End of list
E617 3F3F3F00         (        forth.asm):01083                 fcn     '???'           Admit we have no clue!
                      (        forth.asm):01084                 ENDC                    SSDFEAT
                      (        forth.asm):01085         
                      (        forth.asm):01086         * Print ' (xxxx/yyyy)' where xxxx is the hex representation for BLK @ and
                      (        forth.asm):01087         * yyyy is the hex representation for >IN @.
E61B 8E034E           (        forth.asm):01088 (3)     PRBLKIN ldx     #HEXBUF
E61E 8620             (        forth.asm):01089 (2)             lda     #SP
E620 A780             (        forth.asm):01090 (4+1)           sta     ,x+
E622 8628             (        forth.asm):01091 (2)             lda     #'(
E624 A780             (        forth.asm):01092 (4+1)           sta     ,x+
E626 DC24             (        forth.asm):01093 (4)             ldd     UBLK
E628 BDE174           (        forth.asm):01094 (7)             jsr     HDMP4
E62B 862F             (        forth.asm):01095 (2)             lda     #'/
E62D A780             (        forth.asm):01096 (4+1)           sta     ,x+
E62F DC22             (        forth.asm):01097 (4)             ldd     UTOIN
E631 BDE174           (        forth.asm):01098 (7)             jsr     HDMP4
E634 8629             (        forth.asm):01099 (2)             lda     #')
E636 A780             (        forth.asm):01100 (4+1)           sta     ,x+
E638 6F84             (        forth.asm):01101 (6+0)           clr     ,x
E63A 8E034E           (        forth.asm):01102 (3)             ldx     #HEXBUF
E63D 7EE1DA           (        forth.asm):01103 (3)             jmp     PUTS
                      (        forth.asm):01104         
                      (        forth.asm):01105         * Handle error condition. Error code is in B.
                      (        forth.asm):01106         * If B is 2 (undefined) X points to a string of length CURTOKL that has the
                      (        forth.asm):01107         * offending word.
E640 10AEE4           (        forth.asm):01108 (6+0)   ERRHDLR ldy     ,s              Invoking return address
                      (        forth.asm):01109         * In case of a trap return, we enter here with Y set to #IODZHDL
E643 C102             (        forth.asm):01110 (2)     ERRHD1  cmpb    #2              Undefined symbol?
E645 261A             (        forth.asm):01111 (3)             bne     @perrm          No
E647 8627             (        forth.asm):01112 (2)             lda     #''
E649 BDE1B6           (        forth.asm):01113 (7)             jsr     PUTCH
E64C A680             (        forth.asm):01114 (4+1)   @prtsym lda     ,x+             Display undefined symbol name
E64E BDE1B6           (        forth.asm):01115 (7)             jsr     PUTCH
E651 0A32             (        forth.asm):01116 (5)             dec     CURTOKL
E653 2702             (        forth.asm):01117 (3)             beq     @endquo
E655 20F5             (        forth.asm):01118 (3)             bra     @prtsym
E657 8627             (        forth.asm):01119 (2)     @endquo lda     #''
E659 BDE1B6           (        forth.asm):01120 (7)             jsr     PUTCH
E65C 8620             (        forth.asm):01121 (2)             lda     #SP
E65E BDE1B6           (        forth.asm):01122 (7)             jsr     PUTCH
E661 8EFEC2           (        forth.asm):01123 (3)     @perrm  ldx     #ERRMTBL        Regular error handling
E664 5D               (        forth.asm):01124 (1)     @nxterr tstb
E665 2633             (        forth.asm):01125 (3)             bne     @skerrm
E667 BDE1DA           (        forth.asm):01126 (7)             jsr     PUTS            Print error message
E66A 8DAF             (        forth.asm):01127 (6)             bsr     PRBLKIN         Print BLK and >IN values (in hex)
E66C BDE1E7           (        forth.asm):01128 (7)             jsr     PUTCR
E66F 1F20             (        forth.asm):01129 (4)     @dmptos tfr     y,d             Dump top of the system stack contents
E671 8E034E           (        forth.asm):01130 (3)             ldx     #HEXBUF
E674 BDE174           (        forth.asm):01131 (7)             jsr     HDMP4
E677 8620             (        forth.asm):01132 (2)             lda     #SP
E679 A780             (        forth.asm):01133 (4+1)           sta     ,x+
                      (        forth.asm):01134         * Symbolic stack dumps are configurable. In situations where the dictionary is
                      (        forth.asm):01135         * trashed, they may not be considered desirable. See SSDFEAT in constants.asm.
                      (        forth.asm):01136                 IFNE    SSDFEAT
E67B BDE512           (        forth.asm):01137 (7)             jsr     FINDSYM
                      (        forth.asm):01138                 ENDC
E67E 8E034E           (        forth.asm):01139 (3)             ldx     #HEXBUF
E681 BDE1DA           (        forth.asm):01140 (7)             jsr     PUTS
E684 BDE1E7           (        forth.asm):01141 (7)             jsr     PUTCR
E687 108CE000         (        forth.asm):01142 (4)             cmpy    #IODZHDL
E68B 2702             (        forth.asm):01143 (3)             beq     @wastrp         We're just back from the trap handler
E68D 3262             (        forth.asm):01144 (4+1)           leas    2,s             Point to the next item on the stack
E68F 118C8000         (        forth.asm):01145 (4)     @wastrp cmps    #RAMSTRT+RAMSIZE
E693 240C             (        forth.asm):01146 (3)             bhs     @errdon         We're done here
E695 10AEE4           (        forth.asm):01147 (6+0)           ldy     ,s
E698 20D5             (        forth.asm):01148 (3)             bra     @dmptos
E69A A680             (        forth.asm):01149 (4+1)   @skerrm lda     ,x+             Scan for the next error message
E69C 26FC             (        forth.asm):01150 (3)             bne     @skerrm
E69E 5A               (        forth.asm):01151 (1)             decb
E69F 20C3             (        forth.asm):01152 (3)             bra     @nxterr
E6A1 10CE8000         (        forth.asm):01153 (4)     @errdon lds     #RAMSTRT+RAMSIZE
E6A5 9621             (        forth.asm):01154 (3)             lda     USTATE+1        We do ignore the upper byte
E6A7 270D             (        forth.asm):01155 (3)             beq     @erdon2         No pointers to restore if we were interpreting
                      (        forth.asm):01156         * Compiling: clear STATE, RSP and restore LSTWAD, DICEND.
E6A9 0F21             (        forth.asm):01157 (5)             clr     USTATE+1        Switch back to interpretation mode
E6AB BDEA22           (        forth.asm):01158                 RFXT    jsr,RCLR+7      XT for RCLR
E6AE 9E0C             (        forth.asm):01159 (4)             ldx     BDICEND         Restore essential pointers from backups
E6B0 9F08             (        forth.asm):01160 (4)             stx     DICEND          Restore HERE
E6B2 9E0A             (        forth.asm):01161 (4)             ldx     BLSTWAD
E6B4 9F06             (        forth.asm):01162 (4)             stx     LSTWAD          Restore LAST
E6B6 7EE0A7           (        forth.asm):01163 (3)     @erdon2 jmp     INTERP
                      (        forth.asm):01164         
                      (        forth.asm):01165         * Push X to the data stack (boundary is checked).
E6B9 1183018A         (        forth.asm):01166 (4)     NPUSH   cmpu    #NSTTOP
E6BD 2303             (        forth.asm):01167 (3)             bls     @npush1         Anything <= than #NSTTOP indicates overflow
E6BF 3610             (        forth.asm):01168 (4+2)           pshu    x               Aka UCNPUSH
E6C1 39               (        forth.asm):01169 (4)             rts
E6C2 5F               (        forth.asm):01170 (1)     @npush1 clrb                    Data stack overflow
E6C3 BDE640           (        forth.asm):01171 (7)             jsr     ERRHDLR         No return
     E6C6             (        forth.asm):01172         DPSHRA  equ     *
E6C6 12               (        forth.asm):01173 (1)             nop
                      (        forth.asm):01174         
                      (        forth.asm):01175         * Pull X from the data stack (boundary is checked).
                      (        forth.asm):01176         * D, W and Y are preserved.
E6C7 1183024A         (        forth.asm):01177 (4)     NPOP    cmpu    #NSTBOT
E6CB 2403             (        forth.asm):01178 (3)             bhs     @npop1          Anything >= than #NSTBOT indicates underflow
E6CD 3710             (        forth.asm):01179 (4+2)           pulu    x
E6CF 39               (        forth.asm):01180 (4)             rts
E6D0 C601             (        forth.asm):01181 (2)     @npop1  ldb     #1              Data stack underflow
E6D2 BDE640           (        forth.asm):01182 (7)             jsr     ERRHDLR         No return
     E6D5             (        forth.asm):01183         DPOPRA  equ     *
E6D5 12               (        forth.asm):01184 (1)             nop
                      (        forth.asm):01185         
                      (        forth.asm):01186         * Push X to the return stack (boundary is checked).
E6D6 962A             (        forth.asm):01187 (3)     RPUSH   lda     RDEPTH          RDEPTH is expressed in cells
E6D8 8140             (        forth.asm):01188 (2)             cmpa    #RSTKSZ/2       But RSTKZ is expressed in bytes
E6DA 2712             (        forth.asm):01189 (3)             beq     @rpush1
E6DC 4C               (        forth.asm):01190 (1)             inca
E6DD 972A             (        forth.asm):01191 (3)             sta     RDEPTH
E6DF 0F2C             (        forth.asm):01192 (5)             clr     RTSREMV         Do not get rid of the final RTS
E6E1 1F27             (        forth.asm):01193 (4)             tfr     y,v
E6E3 109E00           (        forth.asm):01194 (5)             ldy     RSP
E6E6 AFA3             (        forth.asm):01195 (5+2)           stx     ,--y
E6E8 109F00           (        forth.asm):01196 (5)             sty     RSP
E6EB 1F72             (        forth.asm):01197 (4)             tfr     v,y
E6ED 39               (        forth.asm):01198 (4)             rts
E6EE C607             (        forth.asm):01199 (2)     @rpush1 ldb     #7              Return stack overflow
E6F0 BDE640           (        forth.asm):01200 (7)             jsr     ERRHDLR         No return
     E6F3             (        forth.asm):01201         RPSHRA  equ     *
E6F3 12               (        forth.asm):01202 (1)             nop                     Meant to insulate RPUSH errors from RPOP EP
                      (        forth.asm):01203         
                      (        forth.asm):01204         * Pull X from the return stack (boundary is checked).
E6F4 962A             (        forth.asm):01205 (3)     RPOP    lda     RDEPTH          RDEPTH is expressed in cells
E6F6 2710             (        forth.asm):01206 (3)             beq     @rpop1
E6F8 4A               (        forth.asm):01207 (1)             deca
E6F9 972A             (        forth.asm):01208 (3)             sta     RDEPTH
E6FB 1F27             (        forth.asm):01209 (4)             tfr     y,v
E6FD 109E00           (        forth.asm):01210 (5)             ldy     RSP
E700 AEA1             (        forth.asm):01211 (5+2)           ldx     ,y++
E702 109F00           (        forth.asm):01212 (5)             sty     RSP
E705 1F72             (        forth.asm):01213 (4)             tfr     v,y
E707 39               (        forth.asm):01214 (4)             rts
E708 C608             (        forth.asm):01215 (2)     @rpop1  ldb     #8              Return stack underflow
E70A BDE640           (        forth.asm):01216 (7)             jsr     ERRHDLR         No return
     E70D             (        forth.asm):01217         RPOPRA  equ     *
                      (        forth.asm):01218         
                      (        forth.asm):01219         * Derive the current input stream pointer from BLK and >IN.
                      (        forth.asm):01220         * The resulting address is returned in X. D is altered.
                      (        forth.asm):01221         * Both Y and W are preserved.
E70D 9E24             (        forth.asm):01222 (4)     BKIN2PT ldx     UBLK
E70F 2716             (        forth.asm):01223 (3)             beq     @consol         We are switching back to the console
E711 1038             (        forth.asm):01224 (6)             pshsw
E713 3420             (        forth.asm):01225 (4+2)           pshs    y
E715 8DA2             (        forth.asm):01226 (6)             bsr     NPUSH           Make sure BLK @ is loaded
E717 BDE919           (        forth.asm):01227                 RFXT    jsr,BLOCK+8     XT for BLOCK
E71A 3520             (        forth.asm):01228 (4+2)           puls    y
E71C 1039             (        forth.asm):01229 (6)             pulsw
E71E 3710             (        forth.asm):01230                 UCNPOP                  Retrieve buffer addr (to X)
E720 9F1C             (        forth.asm):01231 (4)     @done   stx     BSBFADR         Update base buffer address
E722 DC22             (        forth.asm):01232 (4)             ldd     UTOIN
E724 308B             (        forth.asm):01233 (4+2)           leax    d,x             Add the current offset. Return the result via X
E726 39               (        forth.asm):01234 (4)             rts
E727 8E02CA           (        forth.asm):01235 (3)     @consol ldx     #CMDBUF
E72A 20F4             (        forth.asm):01236 (3)             bra     @done
                      (        forth.asm):01237         
                      (        forth.asm):01238                 include storage.asm
                      (      storage.asm):00001         * Wait until the BSY bit is clear in the CF status register.
                      (      storage.asm):00002         * Upon return the BSY bit is guaranteed to be zero. Z will
                      (      storage.asm):00003         * be set in CC. This subroutine should not be called before
                      (      storage.asm):00004         * the CompactFlash presence has been assessed.
E72C B6C007           (      storage.asm):00005 (4)     CFWAIT  lda     CFSTATR
E72F 8580             (      storage.asm):00006 (2)             bita    #CFBSYB
E731 26F9             (      storage.asm):00007 (3)             bne     CFWAIT
E733 39               (      storage.asm):00008 (4)             rts
                      (      storage.asm):00009         
                      (      storage.asm):00010         * Wait until the BSY bit is clear and the RDY bit is set.
E734 8DF6             (      storage.asm):00011 (6)     CFRDY   bsr     CFWAIT
E736 2703             (      storage.asm):00012 (3)             beq     @cfrdy0         Card not busy, proceed
E738 1A04             (      storage.asm):00013 (2)             orcc    #ZFLAG
E73A 39               (      storage.asm):00014 (4)             rts
E73B 8E2000           (      storage.asm):00015 (3)     @cfrdy0 ldx     #$2000          Maximum poll count
E73E 8640             (      storage.asm):00016 (2)             lda     #CFRDYB
E740 B5C007           (      storage.asm):00017 (4)     @cfrdy1 bita    CFSTATR
E743 2604             (      storage.asm):00018 (3)             bne     @cfrdy2         BSY bit is set, continue
E745 301F             (      storage.asm):00019 (4+1)           leax    -1,x            Card not ready, decrement poll count
E747 26F7             (      storage.asm):00020 (3)             bne     @cfrdy1         and try again
E749 39               (      storage.asm):00021 (4)     @cfrdy2 rts                     Return with Z set: card not present
                      (      storage.asm):00022         *                               Return with Z clear: card is ready
                      (      storage.asm):00023         
                      (      storage.asm):00024         * Check for possible error condition.
                      (      storage.asm):00025         * Upon return either Z is set (A is zero) and no error occurred or
                      (      storage.asm):00026         * Z is clear and the CF error register contents is returned in A.
E74A 8DE0             (      storage.asm):00027 (6)     CFERRCK bsr     CFWAIT
E74C B6C007           (      storage.asm):00028 (4)             lda     CFSTATR
E74F 8401             (      storage.asm):00029 (2)             anda    #CFERRB
E751 2703             (      storage.asm):00030 (3)             beq     @cfeck1
E753 B6C001           (      storage.asm):00031 (4)             lda     CFERROR         The error register contains error details
E756 39               (      storage.asm):00032 (4)     @cfeck1 rts
                      (      storage.asm):00033         
                      (      storage.asm):00034         * Issue CF command. The command code is passed through the B register.
                      (      storage.asm):00035         * Upon return:
                      (      storage.asm):00036         * - Z is set and everything is peachy.
                      (      storage.asm):00037         * - or Z is clear and the CF error register contents will be
                      (      storage.asm):00038         *   returned in A (and mirrored in the global CFERRCD variable).
                      (      storage.asm):00039         * B is preserved.
E757 8DDB             (      storage.asm):00040 (6)     CFCMDIS bsr     CFRDY
E759 270A             (      storage.asm):00041 (3)             beq     @cfciab         Card not ready, abort
E75B D737             (      storage.asm):00042 (3)             stb     CFCMMIR         Update CF command mirror
E75D F7C007           (      storage.asm):00043 (4)             stb     CFCOMDR         Send command to the CF card
E760 8DE8             (      storage.asm):00044 (6)             bsr     CFERRCK
E762 9738             (      storage.asm):00045 (3)     @cfcise sta     CFERRCD         CF command issue set error
                      (      storage.asm):00046                 IFNE    DEBUG
                      (      storage.asm):00047                 pshs    a,cc
                      (      storage.asm):00048                 beq     @cfciok
                      (      storage.asm):00049                 lda     #'!
                      (      storage.asm):00050                 jsr     PUTCH
E764                  (      storage.asm):00051         @cfcidi lda     CFCMMIR
                      (      storage.asm):00052                 ldx     #TBUFF
                      (      storage.asm):00053                 jsr     HDMP2
                      (      storage.asm):00054                 lda     #'/
                      (      storage.asm):00055                 sta     ,x+
                      (      storage.asm):00056                 lda     CFERRCD
                      (      storage.asm):00057                 jsr     HDMP2
                      (      storage.asm):00058                 ldx     #TBUFF
                      (      storage.asm):00059                 jsr     PUTS
                      (      storage.asm):00060                 jsr     PUTCR
                      (      storage.asm):00061                 bra     @cfcict         CF command issue continued
E764                  (      storage.asm):00062         @cfciok lda     #'#
                      (      storage.asm):00063                 jsr     PUTCH
                      (      storage.asm):00064                 bra     @cfcidi         CF command issue data indication
E764                  (      storage.asm):00065         @cfcict puls    cc,a
                      (      storage.asm):00066                 ENDC
E764 39               (      storage.asm):00067 (4)             rts
E765 86FF             (      storage.asm):00068 (2)     @cfciab lda     #$FF            Dummy error code
E767 20F9             (      storage.asm):00069 (3)             bra     @cfcise
                      (      storage.asm):00070         
                      (      storage.asm):00071         * Drive 0 select.
E769 8DC9             (      storage.asm):00072 (6)     CFDRSEL bsr     CFRDY
E76B 86E0             (      storage.asm):00073 (2)             lda     #$E0            Drive 0, LBA mode
E76D B7C006           (      storage.asm):00074 (4)             sta     CFDRHDR
E770 20C2             (      storage.asm):00075 (3)             bra     CFRDY
                      (      storage.asm):00076         
                      (      storage.asm):00077         * Analyze the response to the CF "Identify Device" request.
E772 9E08             (      storage.asm):00078 (4)     CFANTHS ldx     DICEND
E774 308836           (      storage.asm):00079 (4+1)           leax    $36,x           Point to the "Model number" field
E777 3410             (      storage.asm):00080 (4+2)           pshs    x
E779 118614           (      storage.asm):00081 (3)             lde     #$14            Number of 16 bit words to go through
E77C EC84             (      storage.asm):00082 (5+0)   @bytswp ldd     ,x
E77E 1E98             (      storage.asm):00083 (5)             exg     b,a             Byte swapping
E780 ED81             (      storage.asm):00084 (5+2)           std     ,x++
E782 114A             (      storage.asm):00085 (2)             dece
E784 26F6             (      storage.asm):00086 (3)             bne     @bytswp
E786 6F84             (      storage.asm):00087 (6+0)           clr     ,x
E788 3510             (      storage.asm):00088 (4+2)           puls    x
E78A BDE1DA           (      storage.asm):00089 (7)             jsr     PUTS            Decent CF cards indicate the capacity that way
E78D 7EE1E7           (      storage.asm):00090 (3)             jmp     PUTCR           Up to $10000 blocks is 64 MB!
                      (      storage.asm):00091         
                      (      storage.asm):00092         * Initialize the CompactFlash subsystem.
                      (      storage.asm):00093         * This is run once at boot time. There is no hot plug support here.
E790 0F36             (      storage.asm):00094 (5)     CFINIT  clr     CFCARDP         Clear card present,
                      (      storage.asm):00095                 IFEQ    DEBUG
E792 8DA0             (      storage.asm):00096 (6)             bsr     CFRDY
                      (      storage.asm):00097                 ELSE
                      (      storage.asm):00098                 jsr     CFRDY
                      (      storage.asm):00099                 ENDC
E794 2730             (      storage.asm):00100 (3)             beq     @cfinab         Card not ready, abort
E796 8DD1             (      storage.asm):00101 (6)             bsr     CFDRSEL         Drive 0 select
E798 8601             (      storage.asm):00102 (2)             lda     #1              Enable 8-bit data transfers
E79A B7C001           (      storage.asm):00103 (4)             sta     CFFEATR
E79D C6EF             (      storage.asm):00104 (2)             ldb     #CFSETFT        Issue a CF "Set Feature" command
                      (      storage.asm):00105                 IFEQ    DEBUG
E79F 8DB6             (      storage.asm):00106 (6)             bsr     CFCMDIS         Not allowed to fail
                      (      storage.asm):00107                 ELSE
                      (      storage.asm):00108                 jsr     CFCMDIS         Not allowed to fail
                      (      storage.asm):00109                 ENDC
E7A1 2623             (      storage.asm):00110 (3)             bne     @cfinab         Abort with card present flag clear
E7A3 8601             (      storage.asm):00111 (2)             lda     #1              Request default PIO mode wo/ IORDY
E7A5 B7C002           (      storage.asm):00112 (4)             sta     CFSCNTR
E7A8 8603             (      storage.asm):00113 (2)             lda     #3              ATA-2 "Set Transfer mode"
E7AA B7C001           (      storage.asm):00114 (4)             sta     CFFEATR
                      (      storage.asm):00115                 IFEQ    DEBUG
E7AD 8DA8             (      storage.asm):00116 (6)             bsr     CFCMDIS         OK to fail
                      (      storage.asm):00117                 ELSE
                      (      storage.asm):00118                 jsr     CFCMDIS         OK to fail
                      (      storage.asm):00119                 ENDC
E7AF 8682             (      storage.asm):00120 (2)             lda     #$82            Disable write caching
E7B1 B7C001           (      storage.asm):00121 (4)             sta     CFFEATR
                      (      storage.asm):00122                 IFEQ    DEBUG
E7B4 8DA1             (      storage.asm):00123 (6)             bsr     CFCMDIS         B still has #CFSETF. Also OK to fail
                      (      storage.asm):00124                 ELSE
                      (      storage.asm):00125                 jsr     CFCMDIS         B still has #CFSETF. Also OK to fail
                      (      storage.asm):00126                 ENDC
E7B6 C6EC             (      storage.asm):00127 (2)             ldb     #CFIDDEV        Issue a CF "Identify Device" command
                      (      storage.asm):00128                 IFEQ    DEBUG
E7B8 8D9D             (      storage.asm):00129 (6)             bsr     CFCMDIS         Not allowed to fail
                      (      storage.asm):00130                 ELSE
                      (      storage.asm):00131                 jsr     CFCMDIS         Not allowed to fail
                      (      storage.asm):00132                 ENDC
E7BA 260A             (      storage.asm):00133 (3)             bne     @cfinab         Abort with card present flag clear
E7BC 9E08             (      storage.asm):00134 (4)             ldx     DICEND          Target address is HERE
E7BE 8D07             (      storage.asm):00135 (6)             bsr     CF1SRD          Read one sector
E7C0 8DB0             (      storage.asm):00136 (6)             bsr     CFANTHS         Analyze this!
E7C2 8601             (      storage.asm):00137 (2)             lda     #1
E7C4 9736             (      storage.asm):00138 (3)             sta     CFCARDP         Set the card present flag
E7C6 39               (      storage.asm):00139 (4)     @cfinab rts
                      (      storage.asm):00140         
                      (      storage.asm):00141         * Read one sector. The LBA parameters are assumed to have been set previously.
                      (      storage.asm):00142         * On input X points to the receiving (at least 512 bytes long) buffer.
E7C7 B6C007           (      storage.asm):00143 (4)     CF1SRD  lda     CFSTATR
E7CA 8508             (      storage.asm):00144 (2)             bita    #CFDRQB         Check for DRQ bit in the CF status register
E7CC 270C             (      storage.asm):00145 (3)             beq     IOERR
E7CE 10860200         (      storage.asm):00146 (4)             ldw     #CFSCSZ         Sector size is 512 bytes
E7D2 108EC000         (      storage.asm):00147 (4)             ldy     #CFDATAR        The data source address
E7D6 113B21           (      storage.asm):00148 (6+?)           tfm     y,x+            Note: tfm is interruptible!
E7D9 39               (      storage.asm):00149 (4)             rts
E7DA C611             (      storage.asm):00150 (2)     IOERR   ldb     #17
E7DC BDE640           (      storage.asm):00151 (7)             jsr     ERRHDLR         No return
E7DF 12               (      storage.asm):00152 (1)     CFR1SRA nop                     For symbolic stack dump debugging purposes
                      (      storage.asm):00153         
                      (      storage.asm):00154         * Write one sector. The LBA parameters are assumed to have been set previously.
                      (      storage.asm):00155         * On input X points to the sending (at least 512 bytes long) buffer.
E7E0 B6C007           (      storage.asm):00156 (4)     CF1SWR  lda     CFSTATR
E7E3 8488             (      storage.asm):00157 (2)             anda    #CFBSYB|CFDRQB
E7E5 8108             (      storage.asm):00158 (2)             cmpa    #CFDRQB         Check for BSY clear and DRQ set
E7E7 26F7             (      storage.asm):00159 (3)             bne     CF1SWR
E7E9 10860200         (      storage.asm):00160 (4)             ldw     #CFSCSZ         Sector size is 512 bytes
E7ED 108EC000         (      storage.asm):00161 (4)             ldy     #CFDATAR        The data destination address
E7F1 113A12           (      storage.asm):00162 (6+?)           tfm     x+,y            Note: tfm is interruptible!
E7F4 39               (      storage.asm):00163 (4)             rts
                      (      storage.asm):00164         
                      (      storage.asm):00165         * 1KB Forth block support primitives. Not dictionary code. More like BIOS ops.
                      (      storage.asm):00166         
                      (      storage.asm):00167         * One block IO preamble: select drive and LBA parameters. On input:
                      (      storage.asm):00168         * ,s has the return address
                      (      storage.asm):00169         * 2,s had the return address for the caller
                      (      storage.asm):00170         * 4,s has the target block number
E7F5 BDE72C           (      storage.asm):00171 (7)     CF1BPRE jsr     CFWAIT
E7F8 BDE769           (      storage.asm):00172 (7)             jsr     CFDRSEL         Set drive and head parameters
E7FB EC64             (      storage.asm):00173 (5+1)           ldd     4,s
E7FD 1048             (      storage.asm):00174 (2)             lsld                    Convert block number to sector number
E7FF F7C003           (      storage.asm):00175 (4)             stb     CFSNUMR         LBA 7-0
E802 B7C004           (      storage.asm):00176 (4)             sta     CFCLOWR         LBA 15-8
E805 1FA8             (      storage.asm):00177 (4)             tfr     cc,a
E807 8401             (      storage.asm):00178 (2)             anda    #CFLAG
E809 B7C005           (      storage.asm):00179 (4)             sta     CFCHIGR         LBA 23-16 (carry to cylinder high)
E80C 8602             (      storage.asm):00180 (2)             lda     #2              2 IDE sectors per Forth block
E80E B7C002           (      storage.asm):00181 (4)             sta     CFSCNTR
E811 39               (      storage.asm):00182 (4)             rts
                      (      storage.asm):00183         
                      (      storage.asm):00184         * Read one block from CF device. On input:
                      (      storage.asm):00185         * ,s has the return address
                      (      storage.asm):00186         * 2,s has the target block number
                      (      storage.asm):00187         * 4,s has the buffer base address
                      (      storage.asm):00188         * Upon return, Y will be preserved.
E812 0D36             (      storage.asm):00189 (4)     CF1BKRD tst     CFCARDP
E814 2602             (      storage.asm):00190 (3)             bne     @ctnued
E816 20C2             (      storage.asm):00191 (3)             bra     IOERR           Card not present--CF subsystem not initialized
E818 1F27             (      storage.asm):00192 (4)     @ctnued tfr     y,v
E81A 8DD9             (      storage.asm):00193 (6)             bsr     CF1BPRE
E81C C620             (      storage.asm):00194 (2)             ldb     #CFRSCTS        Issue a "Read sectors" CF command
E81E BDE757           (      storage.asm):00195 (7)             jsr     CFCMDIS
E821 AE64             (      storage.asm):00196 (5+1)           ldx     4,s             Target buffer address to X
E823 8DA2             (      storage.asm):00197 (6)             bsr     CF1SRD          Read the even sector from CF device
E825 BDE72C           (      storage.asm):00198 (7)             jsr     CFWAIT          Wait for next sector to become available
E828 8D9D             (      storage.asm):00199 (6)             bsr     CF1SRD          and read the odd sector
E82A 1F72             (      storage.asm):00200 (4)             tfr     v,y
E82C 39               (      storage.asm):00201 (4)             rts
                      (      storage.asm):00202         
                      (      storage.asm):00203         * Write one block to CF device. Upon entry:
                      (      storage.asm):00204         * ,s has the return address
                      (      storage.asm):00205         * 2,s has the target block number
                      (      storage.asm):00206         * 4,s has the buffer base address
                      (      storage.asm):00207         * Upon return, Y will be preserved.
E82D 0D36             (      storage.asm):00208 (4)     CF1BKWR tst     CFCARDP
E82F 2602             (      storage.asm):00209 (3)             bne     @ctnued
E831 20A7             (      storage.asm):00210 (3)             bra     IOERR           Card not present--CF subsystem not initialized
E833 1F27             (      storage.asm):00211 (4)     @ctnued tfr     y,v
E835 8DBE             (      storage.asm):00212 (6)             bsr     CF1BPRE
E837 C630             (      storage.asm):00213 (2)             ldb     #CFWSCTS        Issue a "Write sectors" CF command
E839 BDE757           (      storage.asm):00214 (7)             jsr     CFCMDIS
E83C AE64             (      storage.asm):00215 (5+1)           ldx     4,s             Source buffer address to X
E83E 8DA0             (      storage.asm):00216 (6)             bsr     CF1SWR          Write the even sector to CF device
E840 BDE72C           (      storage.asm):00217 (7)             jsr     CFWAIT          Wait for next sector to become available
E843 8D9B             (      storage.asm):00218 (6)             bsr     CF1SWR          and write the odd sector
E845 1F72             (      storage.asm):00219 (4)             tfr     v,y
E847 39               (      storage.asm):00220 (4)             rts
                      (      storage.asm):00221         
                      (        forth.asm):01239         
                      (        forth.asm):01240         ******************************************************************************
                      (        forth.asm):01241         * Dictionary begins. In the code below ANSI refers to ANSI-X3.215-1994
                      (        forth.asm):01242         * Draft 6 proposal (i.e. the free spec).
                      (        forth.asm):01243         
E848 0D               (        forth.asm):01244         EBUFS   fcb     13              79-STANDARD (REQ145)
E849 454D5054592D4255 (        forth.asm):01245                 fcc     'EMPTY-BUFFERS' ( -- )
     4646455253
E856 0000             (        forth.asm):01246                 fdb     0               Last dictionary entry
E858 C7               (        forth.asm):01247                 RFCS
E859 7EE26C           (        forth.asm):01248 (3)             jmp     EMPTYB
                      (        forth.asm):01249         
E85C 0C               (        forth.asm):01250         SAVBUF  fcb     12              79-STANDARD (REQ221)
E85D 534156452D425546 (        forth.asm):01251                 fcc     'SAVE-BUFFERS'  ( -- )
     46455253
E869 E848             (        forth.asm):01252                 fdb     EBUFS
E86B C7               (        forth.asm):01253                 RFCS
E86C 8E03F0           (        forth.asm):01254 (3)             ldx     #BUF0
E86F 8D03             (        forth.asm):01255 (6)             bsr     WBIFDRT
E871 8E0800           (        forth.asm):01256 (3)             ldx     #BUF1
                      (        forth.asm):01257         * Write buffer back to mass storage if marked as dirty.
                      (        forth.asm):01258         * The dirty bit is cleared but the buffer contents itself is not.
                      (        forth.asm):01259         * The buffer will continue to be marked as "in use."
                      (        forth.asm):01260         * On input X has has the base buffer address. Both D and X
                      (        forth.asm):01261         * are preserved. Y is not.
E874 3406             (        forth.asm):01262 (4+2)   WBIFDRT pshs    d
E876 3410             (        forth.asm):01263 (4+2)           pshs    x               Base buffer address (arg1 to CF1BKWR)
E878 8605             (        forth.asm):01264 (2)             lda     #BINUSE|BDIRTY
E87A A4890401         (        forth.asm):01265 (4+3)           anda    BOFLAGS,x
E87E 8105             (        forth.asm):01266 (2)             cmpa    #BINUSE|BDIRTY
E880 2616             (        forth.asm):01267 (3)             bne     @alldon         Block not in use or in use but not dirty
E882 AE890402         (        forth.asm):01268 (5+3)           ldx     BOBLKNO,x
E886 3410             (        forth.asm):01269 (4+2)           pshs    x               Block number (arg0 to CF1BKWR)
E888 8DA3             (        forth.asm):01270 (6)             bsr     CF1BKWR         Write data buffer to CF
E88A 3262             (        forth.asm):01271 (4+1)           leas    2,s             Drop one cell from the system stack (blknum)
E88C AEE4             (        forth.asm):01272 (5+0)           ldx     ,s              Retrieve base buffer address
E88E 30890401         (        forth.asm):01273 (4+3)           leax    BOFLAGS,x
E892 A684             (        forth.asm):01274 (4+0)           lda     ,x              Acquire the 'flags' field
E894 84FB             (        forth.asm):01275 (2)             anda    #^BDIRTY        Clear the dirty bit
E896 A784             (        forth.asm):01276 (4+0)           sta     ,x              and update the 'flags' field
E898 3510             (        forth.asm):01277 (4+2)   @alldon puls    x               Restore X
E89A 3506             (        forth.asm):01278 (4+2)           puls    d               and D
E89C 39               (        forth.asm):01279 (4)             rts
                      (        forth.asm):01280         
E89D 05               (        forth.asm):01281         FLUSH   fcb     5               79-STANDARD (REF)
E89E 464C555348       (        forth.asm):01282                 fcc     'FLUSH'         ( -- ) An alias for SAVE-BUFFERS
E8A3 E85C             (        forth.asm):01283                 fdb     SAVBUF
E8A5 C7               (        forth.asm):01284                 RFCS
E8A6 20C4             (        forth.asm):01285                 RFXT    bra,SAVBUF+15   XT for SAVE-BUFFERS
                      (        forth.asm):01286         
E8A8 06               (        forth.asm):01287         UPDATE  fcb     6               79-STANDARD (REQ229)
E8A9 555044415445     (        forth.asm):01288                 fcc     'UPDATE'        ( -- )
E8AF E89D             (        forth.asm):01289                 fdb     FLUSH
E8B1 C7               (        forth.asm):01290                 RFCS
E8B2 9E1A             (        forth.asm):01291 (4)             ldx     MRUBUFA         Most recently used buffer base address
E8B4 30890401         (        forth.asm):01292 (4+3)           leax    BOFLAGS,x       Buffer 'flags' field's address to X
E8B8 A684             (        forth.asm):01293 (4+0)           lda     ,x              Buffer 'flags' field to A
E8BA 8501             (        forth.asm):01294 (2)             bita    #BINUSE         Is that buffer in use?
E8BC 2704             (        forth.asm):01295 (3)             beq     @upddon         No, we're done here
E8BE 8A04             (        forth.asm):01296 (2)             ora     #BDIRTY
E8C0 A784             (        forth.asm):01297 (4+0)           sta     ,x              Set the dirty bit
E8C2 39               (        forth.asm):01298 (4)     @upddon rts
                      (        forth.asm):01299         
E8C3 06               (        forth.asm):01300         BUFFER  fcb     6               79-STANDARD (REQ130)
E8C4 425546464552     (        forth.asm):01301                 fcc     'BUFFER'        ( ublkno -- addr )
E8CA E8A8             (        forth.asm):01302                 fdb     UPDATE
E8CC C7               (        forth.asm):01303                 RFCS
E8CD BDE6C7           (        forth.asm):01304 (7)             jsr     NPOP
E8D0 1F12             (        forth.asm):01305 (4)             tfr     x,y             ublkno to Y
                      (        forth.asm):01306         * Block lookup.
E8D2 8E03F0           (        forth.asm):01307 (3)             ldx     #BUF0           Base address of the first resident buffer
E8D5 C602             (        forth.asm):01308 (2)             ldb     #2              Number of resident buffers
E8D7 A6890401         (        forth.asm):01309 (4+3)   @blkup  lda     BOFLAGS,x       Buffer flags to A
E8DB 8501             (        forth.asm):01310 (2)             bita    #BINUSE         Buffer in use?
E8DD 270C             (        forth.asm):01311 (3)             beq     @nxtbuf         No
E8DF 10AC890402       (        forth.asm):01312 (6+3)           cmpy    BOBLKNO,x       Buffer is in use. Block number match?
E8E4 2605             (        forth.asm):01313 (3)             bne     @nxtbuf         No
E8E6 9F1A             (        forth.asm):01314 (4)     @retba  stx     MRUBUFA         Block number match. Mark as the MRU buffer
E8E8 3610             (        forth.asm):01315                 UCNPUSH                 and return its base address via the data stack
E8EA 39               (        forth.asm):01316 (4)             rts
E8EB 30890410         (        forth.asm):01317 (4+3)   @nxtbuf leax    BFDISP,x        Point to the next buffer
E8EF 5A               (        forth.asm):01318 (1)             decb
E8F0 26E5             (        forth.asm):01319 (3)             bne     @blkup
                      (        forth.asm):01320         * The block number in Y is not currently in use. Assign a buffer to it.
E8F2 8E03F0           (        forth.asm):01321 (3)             ldx     #BUF0
E8F5 9C1A             (        forth.asm):01322 (4)             cmpx    MRUBUFA         Most recently used buffer address
E8F7 2603             (        forth.asm):01323 (3)             bne     @bselct
E8F9 8E0800           (        forth.asm):01324 (3)             ldx     #BUF1
                      (        forth.asm):01325         * At this point X has the base address of the block we are interested in.
E8FC 3420             (        forth.asm):01326 (4+2)   @bselct pshs    y               Backup the target block number
E8FE BDE874           (        forth.asm):01327 (7)             jsr     WBIFDRT         Write back if dirty. X and D are preserved
E901 8601             (        forth.asm):01328 (2)             lda     #BINUSE
E903 A7890401         (        forth.asm):01329 (4+3)           sta     BOFLAGS,x       Update the buffers 'flags' field
E907 3520             (        forth.asm):01330 (4+2)           puls    y               Restore the target block number
E909 10AF890402       (        forth.asm):01331 (6+3)           sty     BOBLKNO,x       and update the 'blknum' field as well
E90E 20D6             (        forth.asm):01332 (3)             bra     @retba
                      (        forth.asm):01333         
E910 05               (        forth.asm):01334         BLOCK   fcb     5               79-STANDARD (REQ191)
E911 424C4F434B       (        forth.asm):01335                 fcc     'BLOCK'         ( ublkno -- addr )
E916 E8C3             (        forth.asm):01336                 fdb     BUFFER
E918 C7               (        forth.asm):01337                 RFCS
E919 8DB2             (        forth.asm):01338                 RFXT    bsr,BUFFER+9    XT for BUFFER
                      (        forth.asm):01339         * Upon return Y has has the block number.
E91B 3710             (        forth.asm):01340                 UCNPOP                  Buffer base address to X
E91D 3410             (        forth.asm):01341 (4+2)           pshs    x               Push base buffer address as Arg1 to CF1BKRD
E91F A6890401         (        forth.asm):01342 (4+3)           lda     BOFLAGS,x       Retrieve buffer 'flags' field
                      (        forth.asm):01343                 IFNE    DEBUG
                      (        forth.asm):01344                 bita    #BINUSE
                      (        forth.asm):01345                 bne     @blkctd
                      (        forth.asm):01346                 lda     #10             Assertion failed
                      (        forth.asm):01347                 jsr     ERRHDLR         No return
                      (        forth.asm):01348                 ENDC
E923 8402             (        forth.asm):01349 (2)     @blkctd anda    #BMAPPD         Has the block been read yet?
E925 2613             (        forth.asm):01350 (3)             bne     @bkmapd         Yes
E927 3420             (        forth.asm):01351 (4+2)           pshs    y               No. Push block number as arg0 to CF1BKRD
                      (        forth.asm):01352         * Map in the block from the CF device. System stack structure is as follows:
                      (        forth.asm):01353         * ,s has the target block number.
                      (        forth.asm):01354         * 2,s has the buffer base address.
E929 BDE812           (        forth.asm):01355 (7)             jsr     CF1BKRD
E92C 3262             (        forth.asm):01356 (4+1)           leas    2,s             Drop one cell from the system stack
                      (        forth.asm):01357         * Update the buffer flags field.
E92E AEE4             (        forth.asm):01358 (5+0)           ldx     ,s              Base buffer address
E930 30890401         (        forth.asm):01359 (4+3)           leax    BOFLAGS,x       Buffer 'flags' field address to X
E934 A684             (        forth.asm):01360 (4+0)           lda     ,x              Read buffer 'flags' field
E936 8A02             (        forth.asm):01361 (2)             ora     #BMAPPD
E938 A784             (        forth.asm):01362 (4+0)           sta     ,x              and mark it as read
E93A 3510             (        forth.asm):01363 (4+2)   @bkmapd puls    x               Buffer base address to X
E93C 3610             (        forth.asm):01364                 UCNPUSH
E93E 39               (        forth.asm):01365 (4)             rts
                      (        forth.asm):01366         
E93F 03               (        forth.asm):01367         BLK     fcb     3
E940 424C4B           (        forth.asm):01368                 fcc     'BLK'
E943 E910             (        forth.asm):01369                 fdb     BLOCK
E945 C7               (        forth.asm):01370                 RFCS
E946 8E0124           (        forth.asm):01371 (3)             ldx     #UBLK
E949 7EE6B9           (        forth.asm):01372 (3)             jmp     NPUSH
                      (        forth.asm):01373         
E94C 03               (        forth.asm):01374         TOIN    fcb     3
E94D 3E494E           (        forth.asm):01375                 fcc     '>IN'
E950 E93F             (        forth.asm):01376                 fdb     BLK
E952 C7               (        forth.asm):01377                 RFCS
E953 8E0122           (        forth.asm):01378 (3)             ldx     #UTOIN
E956 7EE6B9           (        forth.asm):01379 (3)             jmp     NPUSH
                      (        forth.asm):01380         
E959 03               (        forth.asm):01381         SCR     fcb     3
E95A 534352           (        forth.asm):01382                 fcc     'SCR'
E95D E94C             (        forth.asm):01383                 fdb     TOIN
E95F C7               (        forth.asm):01384                 RFCS
E960 8E0126           (        forth.asm):01385 (3)             ldx     #USCR
E963 7EE6B9           (        forth.asm):01386 (3)             jmp     NPUSH
                      (        forth.asm):01387         
                      (        forth.asm):01388         * Functionally: : LINE 6 SHIFT SCR @ BLOCK + ;
E966 04               (        forth.asm):01389         LINE    fcb     4               79-STANDARD (REF)
E967 4C494E45         (        forth.asm):01390                 fcc     'LINE'
E96B E959             (        forth.asm):01391                 fdb     SCR
E96D C7               (        forth.asm):01392                 RFCS
E96E 8E0006           (        forth.asm):01393 (3)             ldx     #6
E971 BDE6B9           (        forth.asm):01394 (7)             jsr     NPUSH
E974 BDF82F           (        forth.asm):01395                 RFXT    jsr,SHIFT+8     XT for SHIFT
E977 9E26             (        forth.asm):01396 (4)             ldx     USCR
E979 BDE6B9           (        forth.asm):01397 (7)             jsr     NPUSH
E97C 8D9B             (        forth.asm):01398                 RFXT    bsr,BLOCK+8     XT for BLOCK
E97E 7EF795           (        forth.asm):01399                 RFXT    jmp,PLUS+4      XT for +
                      (        forth.asm):01400         
                      (        forth.asm):01401         * Functionally:
                      (        forth.asm):01402         * : INDEX 1+ SWAP DO
                      (        forth.asm):01403         *     CR   I SCR !
                      (        forth.asm):01404         *     0 LINE 64 TYPE
                      (        forth.asm):01405         *   LOOP ;
E981 05               (        forth.asm):01406         INDEX   fcb     5               79-STANDARD (REF)
E982 494E444558       (        forth.asm):01407                 fcc     'INDEX'         ( n1 n2 -- )
E987 E966             (        forth.asm):01408                 fdb     LINE
E989 C7               (        forth.asm):01409                 RFCS
E98A BDE6C7           (        forth.asm):01410 (7)             jsr     NPOP            N2 to X
E98D 3001             (        forth.asm):01411 (4+1)           leax    1,x             1+
E98F 1F12             (        forth.asm):01412 (4)             tfr     x,y             Y has the limit (not reached)
E991 BDE6C7           (        forth.asm):01413 (7)             jsr     NPOP            X has the index (N1)
E994 BDE1E7           (        forth.asm):01414 (7)     @indlop jsr     PUTCR           CR
E997 9F26             (        forth.asm):01415 (4)             stx     USCR            I SCR !
E999 3430             (        forth.asm):01416 (4+4)           pshs    y,x
E99B 1FC1             (        forth.asm):01417 (4)             tfr     0,x
E99D BDE6B9           (        forth.asm):01418 (7)             jsr     NPUSH
E9A0 8DCC             (        forth.asm):01419                 RFXT    bsr,LINE+7      XT for LINE
E9A2 8E0040           (        forth.asm):01420 (3)             ldx     #64
E9A5 BDE6B9           (        forth.asm):01421 (7)             jsr     NPUSH
E9A8 BDF5E7           (        forth.asm):01422                 RFXT    jsr,TYPE+7      XT for TYPE
E9AB 3530             (        forth.asm):01423 (4+4)           puls    x,y             Restore loop parameters
E9AD 3001             (        forth.asm):01424 (4+1)           leax    1,x
E9AF 103712           (        forth.asm):01425 (4)             cmpr    x,y
E9B2 26E0             (        forth.asm):01426 (3)             bne     @indlop
E9B4 39               (        forth.asm):01427 (4)             rts
                      (        forth.asm):01428         
E9B5 04               (        forth.asm):01429         LIST    fcb     4               79-STANDARD (REQ109)
E9B6 4C495354         (        forth.asm):01430                 fcc     'LIST'          ( ublkno -- )
E9BA E981             (        forth.asm):01431                 fdb     INDEX
E9BC C7               (        forth.asm):01432                 RFCS
E9BD 0D36             (        forth.asm):01433 (4)             tst     CFCARDP
E9BF 2605             (        forth.asm):01434 (3)             bne     @lstpro
E9C1 C611             (        forth.asm):01435 (2)             ldb     #17             IO error
E9C3 BDE640           (        forth.asm):01436 (7)             jsr     ERRHDLR         No return
E9C6 BDFBEE           (        forth.asm):01437         @lstpro RFXT    jsr,DUP+6       XT for DUP
E9C9 BDE919           (        forth.asm):01438                 RFXT    jsr,BLOCK+8     XT for BLOCK
                      (        forth.asm):01439         * TOS now has the base buffer address.
E9CC BDE6C7           (        forth.asm):01440 (7)             jsr     NPOP
E9CF 1F12             (        forth.asm):01441 (4)             tfr     x,y             Base buffer address to Y
E9D1 BDE6C7           (        forth.asm):01442 (7)             jsr     NPOP            ublkno to X
E9D4 9F26             (        forth.asm):01443 (4)             stx     USCR            Update SCR's value
E9D6 C610             (        forth.asm):01444 (2)             ldb     #16             16 lines to go
E9D8 3404             (        forth.asm):01445 (4+1)   @lstlop pshs    b
E9DA BDE1E7           (        forth.asm):01446 (7)             jsr     PUTCR
E9DD 1F21             (        forth.asm):01447 (4)             tfr     y,x
E9DF BDE6B9           (        forth.asm):01448 (7)             jsr     NPUSH           Start address for TYPE
E9E2 8E0040           (        forth.asm):01449 (3)             ldx     #64
E9E5 BDE6B9           (        forth.asm):01450 (7)             jsr     NPUSH           Byte count for TYPE
E9E8 103012           (        forth.asm):01451 (4)             addr    x,y
E9EB BDF5E7           (        forth.asm):01452                 RFXT    jsr,TYPE+7      XT for TYPE
E9EE 3504             (        forth.asm):01453 (4+1)           puls    b
E9F0 5A               (        forth.asm):01454 (1)             decb
E9F1 26E5             (        forth.asm):01455 (3)             bne     @lstlop
E9F3 39               (        forth.asm):01456 (4)             rts
                      (        forth.asm):01457         
                      (        forth.asm):01458         * Convert a single cell to a double. Non-transactional.
E9F4 03               (        forth.asm):01459         STOD    fcb     3               ANSI Core ( n -- d )
E9F5 533E44           (        forth.asm):01460                 fcc     'S>D'
E9F8 E9B5             (        forth.asm):01461                 fdb     LIST
E9FA C7               (        forth.asm):01462                 RFCS
E9FB BDE6C7           (        forth.asm):01463 (7)             jsr     NPOP            N to X
E9FE 3610             (        forth.asm):01464                 UCNPUSH                 Push back low order cell
EA00 104F             (        forth.asm):01465 (2)             clrd                    High order cell: default to N >= 0
EA02 1E01             (        forth.asm):01466 (5)             exg     d,x
EA04 4D               (        forth.asm):01467 (1)             tsta
EA05 102AFCB0         (        forth.asm):01468 (5)             lbpl    NPUSH
EA09 301F             (        forth.asm):01469 (4+1)           leax    -1,x            N is < 0. Sign extension is required. -1 to X
EA0B 7EE6B9           (        forth.asm):01470 (3)             jmp     NPUSH
                      (        forth.asm):01471         
EA0E 04               (        forth.asm):01472         NCLR    fcb     4               Non-standard
EA0F 4E434C52         (        forth.asm):01473                 fcc     'NCLR'          Clear the data (normal) stack
EA13 E9F4             (        forth.asm):01474                 fdb     STOD
EA15 C7               (        forth.asm):01475                 RFCS
EA16 CE024A           (        forth.asm):01476 (3)             ldu     #NSTBOT
EA19 39               (        forth.asm):01477 (4)             rts
                      (        forth.asm):01478         
EA1A 04               (        forth.asm):01479         RCLR    fcb     4               Non-standard
EA1B 52434C52         (        forth.asm):01480                 fcc     'RCLR'          Clear the return stack
EA1F EA0E             (        forth.asm):01481                 fdb     NCLR
EA21 C7               (        forth.asm):01482                 RFCS
EA22 8E02CA           (        forth.asm):01483 (3)             ldx     #RSTBOT
EA25 9F00             (        forth.asm):01484 (4)             stx     RSP
EA27 0F2A             (        forth.asm):01485 (5)             clr     RDEPTH
EA29 39               (        forth.asm):01486 (4)             rts
                      (        forth.asm):01487         
EA2A 05               (        forth.asm):01488         DEPTH   fcb     5               79-STANDARD (REQ238)
EA2B 4445505448       (        forth.asm):01489                 fcc     'DEPTH'
EA30 EA1A             (        forth.asm):01490                 fdb     RCLR
EA32 C7               (        forth.asm):01491                 RFCS
EA33 CC024A           (        forth.asm):01492 (3)             ldd     #NSTBOT         Bottom data stack address
EA36 103230           (        forth.asm):01493 (4)             subr    u,d             D has the current value of the data stack ptr
EA39 1044             (        forth.asm):01494 (2)             lsrd                    divided by 2
EA3B 1F01             (        forth.asm):01495 (4)             tfr     d,x
EA3D 7EE6B9           (        forth.asm):01496 (3)             jmp     NPUSH
                      (        forth.asm):01497         
EA40 06               (        forth.asm):01498         CREATE  fcb     6               79-STANDARD (REQ239)
EA41 435245415445     (        forth.asm):01499                 fcc     'CREATE'
EA47 EA2A             (        forth.asm):01500                 fdb     DEPTH
EA49 C7               (        forth.asm):01501                 RFCS
EA4A BDE3F8           (        forth.asm):01502 (7)     CREAT0  jsr     LOCWRT          Code entry point returned to Y
EA4D 868E             (        forth.asm):01503 (2)             lda     #LDXOPC         LDX immediate
EA4F A7A0             (        forth.asm):01504 (4+1)           sta     ,y+
EA51 1F21             (        forth.asm):01505 (4)             tfr     y,x
EA53 3008             (        forth.asm):01506 (4+1)           leax    8,x
EA55 AFA1             (        forth.asm):01507 (5+2)           stx     ,y++
EA57 86BD             (        forth.asm):01508 (2)             lda     #JSROPC         JSR extended
EA59 BDE46E           (        forth.asm):01509 (7)             jsr     VARCON1         Compile JSR NPUSH
EA5C 8639             (        forth.asm):01510 (2)             lda     #RTSOPC         RTS inherent
EA5E A7A0             (        forth.asm):01511 (4+1)           sta     ,y+
EA60 3122             (        forth.asm):01512 (4+1)           leay    2,y             Reserve room for a possible DOES> clause
EA62 109F08           (        forth.asm):01513 (5)     CREAT1  sty     DICEND
EA65 9E0C             (        forth.asm):01514 (4)             ldx     BDICEND         This is set by LOCWRT (was IY)
EA67 9F06             (        forth.asm):01515 (4)             stx     LSTWAD
EA69 39               (        forth.asm):01516 (4)             rts
                      (        forth.asm):01517         
EA6A C5               (        forth.asm):01518         DOES    fcb     $C5             79-STANDARD (REQ168)
EA6B 444F45533E       (        forth.asm):01519                 fcc     'DOES>'
EA70 EA40             (        forth.asm):01520                 fdb     CREATE
EA72 C7               (        forth.asm):01521                 RFCS
EA73 8EEA79           (        forth.asm):01522 (3)             ldx     #DOESEX         JSR #DOESEX is compiled (no actual return)
EA76 7EE14D           (        forth.asm):01523 (3)             jmp     EMXASXT         Set as action component
                      (        forth.asm):01524         
EA79 9E06             (        forth.asm):01525 (4)     DOESEX  ldx     LSTWAD          Header of the last dictionary entry
EA7B E680             (        forth.asm):01526 (4+1)           ldb     ,x+
EA7D C41F             (        forth.asm):01527 (2)             andb    #WRLNMSK        Extract word length
EA7F 3A               (        forth.asm):01528 (1)             abx
                      (        forth.asm):01529                 IFNE    RELFEAT
EA80 3009             (        forth.asm):01530 (4+1)           leax    9,x             2 bytes/backlink, 1/cksum, 6 bytes code offset
                      (        forth.asm):01531                 ELSE
                      (        forth.asm):01532                 leax    8,x             2 bytes/backlink, 6 bytes code offset
                      (        forth.asm):01533                 ENDC
EA82 A684             (        forth.asm):01534 (4+0)           lda     ,x
EA84 8139             (        forth.asm):01535 (2)             cmpa    #RTSOPC         RTS inherent
EA86 2705             (        forth.asm):01536 (3)             beq     @dosex1
EA88 C60E             (        forth.asm):01537 (2)             ldb     #14             No matching CREATE
EA8A BDE640           (        forth.asm):01538 (7)             jsr     ERRHDLR         No return
EA8D 867E             (        forth.asm):01539 (2)     @dosex1 lda     #JMPOPC         JMP extended
EA8F A780             (        forth.asm):01540 (4+1)           sta     ,x+             Overwrite RTS opcode
EA91 3520             (        forth.asm):01541 (4+2)           puls    y
EA93 10AF84           (        forth.asm):01542 (6+0)           sty     ,x
EA96 39               (        forth.asm):01543 (4)             rts
                      (        forth.asm):01544         
EA97 87               (        forth.asm):01545         LITERAL fcb     $87             79-STANDARD (REQ215)
EA98 4C49544552414C   (        forth.asm):01546                 fcc     'LITERAL'
EA9F EA6A             (        forth.asm):01547                 fdb     DOES
EAA1 C7               (        forth.asm):01548                 RFCS
EAA2 BDE6C7           (        forth.asm):01549 (7)             jsr     NPOP
EAA5 0D21             (        forth.asm):01550 (4)             tst     USTATE+1
EAA7 2601             (        forth.asm):01551 (3)             bne     @comp
EAA9 39               (        forth.asm):01552 (4)             rts                     The standard defines no semantics in interp mode
EAAA 109E08           (        forth.asm):01553 (5)     @comp   ldy     DICEND
EAAD 868E             (        forth.asm):01554 (2)             lda     #LDXOPC         LDX immediate
EAAF BDE471           (        forth.asm):01555 (7)             jsr     VARCON2         Compile LDX #X
EAB2 109F08           (        forth.asm):01556 (5)             sty     DICEND          Update HERE
EAB5 8EE6B9           (        forth.asm):01557 (3)             ldx     #NPUSH
EAB8 7EE14D           (        forth.asm):01558 (3)             jmp     EMXASXT         Set NPUSH as action component
                      (        forth.asm):01559         
                      (        forth.asm):01560         * Functionally: : CONSTANT CREATE , DOES> @ ;
                      (        forth.asm):01561         * The following code produces more compact code.
EABB 08               (        forth.asm):01562         CONS    fcb     8               79-STANDARD (REQ185)
EABC 434F4E5354414E54 (        forth.asm):01563                 fcc     'CONSTANT'
EAC4 EA97             (        forth.asm):01564                 fdb     LITERAL
EAC6 C7               (        forth.asm):01565                 RFCS
EAC7 BDE6C7           (        forth.asm):01566 (7)             jsr     NPOP
EACA 1F16             (        forth.asm):01567 (4)             tfr     x,w
EACC BDE3F8           (        forth.asm):01568 (7)             jsr     LOCWRT          Create dictionary entry
EACF 1F61             (        forth.asm):01569 (4)             tfr     w,x
EAD1 868E             (        forth.asm):01570 (2)             lda     #LDXOPC         ldx immediate
EAD3 BDE471           (        forth.asm):01571 (7)             jsr     VARCON2         Compile LDX #CSTVAL
EAD6 BDE46C           (        forth.asm):01572 (7)             jsr     VARCON          Compile JMP NPUSH
                      (        forth.asm):01573                 IFNE    RELFEAT
EAD9 8D87             (        forth.asm):01574 (6)             bsr     CREAT1
EADB 2059             (        forth.asm):01575                 RFXT    bra,MONITOR+10  XT for MONITOR
                      (        forth.asm):01576                 ELSE
                      (        forth.asm):01577                 bra     CREAT1
                      (        forth.asm):01578                 ENDC
                      (        forth.asm):01579         
                      (        forth.asm):01580         * Functionally: : VARIABLE CREATE 2 ALLOT ;
                      (        forth.asm):01581         * However we can save three bytes per instance with the following code.
EADD 08               (        forth.asm):01582         VARI    fcb     8               79-STANDARD (REQ227)
EADE 5641524941424C45 (        forth.asm):01583                 fcc     'VARIABLE'
EAE6 EABB             (        forth.asm):01584                 fdb     CONS
EAE8 C7               (        forth.asm):01585                 RFCS
EAE9 BDE3F8           (        forth.asm):01586 (7)             jsr     LOCWRT
EAEC 868E             (        forth.asm):01587 (2)             lda     #LDXOPC         ldx immediate
EAEE A7A0             (        forth.asm):01588 (4+1)           sta     ,y+
EAF0 1F26             (        forth.asm):01589 (4)             tfr     y,w             Preserve Y (HERE)
EAF2 3125             (        forth.asm):01590 (4+1)           leay    5,y             Relative variable address
EAF4 1F21             (        forth.asm):01591 (4)             tfr     y,x
EAF6 1F62             (        forth.asm):01592 (4)             tfr     w,y             Restore Y (HERE)
EAF8 AFA1             (        forth.asm):01593 (5+2)           stx     ,y++            Address field for LDX #VARADDR
EAFA BDE46C           (        forth.asm):01594 (7)             jsr     VARCON          Compile JMP NPUSH
EAFD 3122             (        forth.asm):01595 (4+1)           leay    2,y             2 ALLOT
EAFF 7EEA62           (        forth.asm):01596 (3)             jmp     CREAT1
                      (        forth.asm):01597         
EB02 09               (        forth.asm):01598         IMMED   fcb     9               79-STANDARD (REQ103)
EB03 494D4D4544494154 (        forth.asm):01599                 fcc     'IMMEDIATE'
     45
EB0C EADD             (        forth.asm):01600                 fdb     VARI
EB0E C7               (        forth.asm):01601                 RFCS
EB0F C680             (        forth.asm):01602 (2)             ldb     #IMDFLM
EB11 9E06             (        forth.asm):01603 (4)     IMMED1  ldx     LSTWAD
EB13 A684             (        forth.asm):01604 (4+0)           lda     ,x
EB15 103598           (        forth.asm):01605 (4)             orr     b,a
EB18 A784             (        forth.asm):01606 (4+0)           sta     ,x
EB1A 39               (        forth.asm):01607 (4)             rts
                      (        forth.asm):01608         
EB1B 08               (        forth.asm):01609         RSTRCT  fcb     8               Non-standard (GNU Forth)
EB1C 5245535452494354 (        forth.asm):01610                 fcc     'RESTRICT'      Make word available in compilation mode only
EB24 EB02             (        forth.asm):01611                 fdb     IMMED
EB26 C7               (        forth.asm):01612                 RFCS
EB27 C640             (        forth.asm):01613 (2)             ldb     #DEFFLM
EB29 20E6             (        forth.asm):01614 (3)             bra     IMMED1
                      (        forth.asm):01615         
                      (        forth.asm):01616                 IFNE    RELFEAT
                      (        forth.asm):01617         * This non-standard word enables checkum monitoring by ICHECK for the
                      (        forth.asm):01618         * last defined word in the dictionary. : words are monitored by default
                      (        forth.asm):01619         * and so are constants. CREATEd words require an explicit invokation of
                      (        forth.asm):01620         * MONITOR if they are to be checked for integrity.
EB2B 07               (        forth.asm):01621         MONITOR fcb     7
EB2C 4D4F4E49544F52   (        forth.asm):01622                 fcc     'MONITOR'       ( -- )
EB33 EB1B             (        forth.asm):01623                 fdb     RSTRCT
EB35 C7               (        forth.asm):01624                 RFCS
EB36 9E06             (        forth.asm):01625 (4)             ldx     LSTWAD          Last word header address
EB38 A684             (        forth.asm):01626 (4+0)           lda     ,x
EB3A 8A20             (        forth.asm):01627 (2)             ora     #MONFLM         Set the monitored flag in the attribute field
EB3C A784             (        forth.asm):01628 (4+0)           sta     ,x
EB3E 8D08             (        forth.asm):01629 (6)             bsr     HDRSKIP         Skip the header (XT to X), clear A
EB40 109E08           (        forth.asm):01630 (5)             ldy     DICEND          The upper code section limit (excluded)
EB43 8D0D             (        forth.asm):01631 (6)             bsr     HDRCSUM         Current word's definition's checksum to A
EB45 A71F             (        forth.asm):01632 (4+1)           sta     -1,x            Store the computed checksum into the header
EB47 39               (        forth.asm):01633 (4)             rts
                      (        forth.asm):01634         
                      (        forth.asm):01635         * On entry, X has a word's header address. On return X has the compilation
                      (        forth.asm):01636         * address for that word (XT). A is cleared so as to initialize the checksum.
EB48 A684             (        forth.asm):01637 (4+0)   HDRSKIP lda     ,x              Word's header attribute byte to A
EB4A 841F             (        forth.asm):01638 (2)             anda    #WRLNMSK        Extract the word's length
EB4C 8B04             (        forth.asm):01639 (2)             adda    #4              1B attribute, 2B backlink, 1B checksum
EB4E 3086             (        forth.asm):01640 (4+1)           leax    a,x             X has the word's XT. -1,X has the orig checksum
EB50 4F               (        forth.asm):01641 (1)             clra
EB51 39               (        forth.asm):01642 (4)             rts
                      (        forth.asm):01643         
                      (        forth.asm):01644         * On entry X has a word's compilation address (XT). A is supposed to have been
                      (        forth.asm):01645         * previously cleared. Y has the upper bound of the code section's address
                      (        forth.asm):01646         * (excluded). On return, A will have the word's code section's checksum.
                      (        forth.asm):01647         * X is preserved.
EB52 3410             (        forth.asm):01648 (4+2)   HDRCSUM pshs    x
EB54 A880             (        forth.asm):01649 (4+1)   @hdrcs1 eora    ,x+             Update the checksum
EB56 103712           (        forth.asm):01650 (4)             cmpr    x,y             Upper bound reached?
EB59 26F9             (        forth.asm):01651 (3)             bne     @hdrcs1         No. Process next byte in word's code section
EB5B 3510             (        forth.asm):01652 (4+2)           puls    x
EB5D 39               (        forth.asm):01653 (4)             rts
                      (        forth.asm):01654         
                      (        forth.asm):01655         * This non-standard word walks through the dictionary linked list and checks
                      (        forth.asm):01656         * that the words that have the MONFLM flag set in their header's attribute
                      (        forth.asm):01657         * field have a definition that still matches the checksum stored in the word's
                      (        forth.asm):01658         * header. This is meant to be used interactively, as a debugging tool, since
                      (        forth.asm):01659         * multitasking is not supported by this implementation. Therefore no status
                      (        forth.asm):01660         * value is returned. Feedback will only be provided for corrupted words, in
                      (        forth.asm):01661         * the form of a diagnostic message printed to the console.
EB5E 06               (        forth.asm):01662         ICHECK  fcb     6
EB5F 49434845434B     (        forth.asm):01663                 fcc     'ICHECK'        ( -- )
EB65 EB2B             (        forth.asm):01664                 fdb     MONITOR
EB67 C7               (        forth.asm):01665                 RFCS
EB68 109E08           (        forth.asm):01666 (5)             ldy     DICEND          Upper bound for the code of the last word (exc.)
EB6B 9E06             (        forth.asm):01667 (4)             ldx     LSTWAD          LAST points to the header of the last word
EB6D 3410             (        forth.asm):01668 (4+2)   @icklop pshs    x               Current word's header address
EB6F A684             (        forth.asm):01669 (4+0)           lda     ,x              Word's header attribute byte to A
EB71 8520             (        forth.asm):01670 (2)             bita    #MONFLM         Is this a monitored word?
EB73 2726             (        forth.asm):01671 (3)             beq     @icknxt         No. Point to the next word
EB75 8DD1             (        forth.asm):01672 (6)             bsr     HDRSKIP         Skip the header (XT to X), clear A
EB77 8DD9             (        forth.asm):01673 (6)             bsr     HDRCSUM         Current word's definition's checksum to A
EB79 A11F             (        forth.asm):01674 (4+1)           cmpa    -1,x            Does the checksum match the compile time value?
EB7B 271E             (        forth.asm):01675 (3)             beq     @icknxt         Yes. Point to the next word
                      (        forth.asm):01676         * Current word's definition has been modified since its original definition!
EB7D BDE1E7           (        forth.asm):01677 (7)             jsr     PUTCR
EB80 AEE4             (        forth.asm):01678 (5+0)           ldx     ,s              Current word's header address
EB82 E680             (        forth.asm):01679 (4+1)           ldb     ,x+
EB84 C41F             (        forth.asm):01680 (2)             andb    #WRLNMSK
EB86 4F               (        forth.asm):01681 (1)             clra
EB87 BDE6B9           (        forth.asm):01682 (7)             jsr     NPUSH           Word's name base address
EB8A 1F01             (        forth.asm):01683 (4)             tfr     d,x
EB8C BDE6B9           (        forth.asm):01684 (7)             jsr     NPUSH           Byte count for TYPE
EB8F BDF5E7           (        forth.asm):01685                 RFXT    jsr,TYPE+7      XT for TYPE
EB92 BDF599           (        forth.asm):01686                 RFXT    jsr,SPACE+8     XT for SPACE
EB95 8EEBA8           (        forth.asm):01687 (3)             ldx     #CSUMFLM
EB98 BDE1DA           (        forth.asm):01688 (7)             jsr     PUTS            Feedback for checksum failure
EB9B 3510             (        forth.asm):01689 (4+2)   @icknxt puls    x               Current word's header address
EB9D 1F12             (        forth.asm):01690 (4)             tfr     x,y             Point to the end of the previous word's code
EB9F 8DA7             (        forth.asm):01691 (6)             bsr     HDRSKIP         Skip the header (XT to X), clear A
EBA1 AE1D             (        forth.asm):01692 (5+1)           ldx     -3,x            Point to the previous header via the backlink
EBA3 2702             (        forth.asm):01693 (3)             beq     @ickdon         We've just reached the end of the dictionary
EBA5 20C6             (        forth.asm):01694 (3)             bra     @icklop
EBA7 39               (        forth.asm):01695 (4)     @ickdon rts
                      (        forth.asm):01696         
EBA8 696E746567726974 (        forth.asm):01697         CSUMFLM fcn     'integrity check failed'
     7920636865636B20
     6661696C656400
                      (        forth.asm):01698                 ENDC                    RELFEAT enabled
                      (        forth.asm):01699         
EBBF C2               (        forth.asm):01700         DO      fcb     $C2             79-STANDARD (REQ142)
EBC0 444F             (        forth.asm):01701                 fcc     'DO'
                      (        forth.asm):01702                 IFNE    RELFEAT
EBC2 EB5E             (        forth.asm):01703                 fdb     ICHECK
                      (        forth.asm):01704                 ELSE
                      (        forth.asm):01705                 fdb     RSTRCT
                      (        forth.asm):01706                 ENDC
EBC4 C7               (        forth.asm):01707                 RFCS
EBC5 9E08             (        forth.asm):01708 (4)             ldx     DICEND
EBC7 3003             (        forth.asm):01709 (4+1)           leax    3,x
EBC9 BDE6D6           (        forth.asm):01710 (7)             jsr     RPUSH
EBCC 8EEBD2           (        forth.asm):01711 (3)             ldx     #DOEX
EBCF 7EE14D           (        forth.asm):01712 (3)             jmp     EMXASXT         Set as action component
                      (        forth.asm):01713         
EBD2 BDFC0C           (        forth.asm):01714         DOEX    RFXT    jsr,SWAP+7      XT for SWAP
EBD5 BDEF54           (        forth.asm):01715                 RFXT    jsr,TOR+5       XT for >R
EBD8 7EEF54           (        forth.asm):01716                 RFXT    jmp,TOR+5       XT for >R
                      (        forth.asm):01717         
EBDB C4               (        forth.asm):01718         LOOP    fcb     $C4             79-STANDARD (REQ124)
EBDC 4C4F4F50         (        forth.asm):01719                 fcc     'LOOP'
EBE0 EBBF             (        forth.asm):01720                 fdb     DO
EBE2 C7               (        forth.asm):01721                 RFCS
EBE3 8EEC02           (        forth.asm):01722 (3)             ldx     #LOOPEX
EBE6 109E08           (        forth.asm):01723 (5)     LOOP1   ldy     DICEND
EBE9 86BD             (        forth.asm):01724 (2)             lda     #JSROPC         JSR extended
EBEB BDE139           (        forth.asm):01725 (7)             jsr     CHKRTS          Check if the final RTS can be omitted
EBEE BDE471           (        forth.asm):01726 (7)             jsr     VARCON2
EBF1 8E2503           (        forth.asm):01727 (3)             ldx     #BCSOPC         Compile "BCS *+5"
EBF4 AFA1             (        forth.asm):01728 (5+2)           stx     ,y++
EBF6 BDE6F4           (        forth.asm):01729 (7)             jsr     RPOP
EBF9 867E             (        forth.asm):01730 (2)             lda     #JMPOPC
EBFB BDE471           (        forth.asm):01731 (7)             jsr     VARCON2         Compile "JMP R@"
EBFE 109F08           (        forth.asm):01732 (5)             sty     DICEND          No action component
EC01 39               (        forth.asm):01733 (4)             rts
                      (        forth.asm):01734         
EC02 8E0001           (        forth.asm):01735 (3)     LOOPEX  ldx     #1
EC05 2011             (        forth.asm):01736 (3)             bra     PLOPEX1
                      (        forth.asm):01737         
EC07 C5               (        forth.asm):01738         PLOOP   fcb     $C5             79-STANDARD (REQ141)
EC08 2B4C4F4F50       (        forth.asm):01739                 fcc     '+LOOP'         The sign hdl reqs for REQ124 should apply though
EC0D EBDB             (        forth.asm):01740                 fdb     LOOP
EC0F C7               (        forth.asm):01741                 RFCS
EC10 8EEC15           (        forth.asm):01742 (3)             ldx     #PLOOPEX
EC13 20D1             (        forth.asm):01743 (3)             bra     LOOP1
                      (        forth.asm):01744         
EC15 BDE6C7           (        forth.asm):01745 (7)     PLOOPEX jsr     NPOP
EC18 1F16             (        forth.asm):01746 (4)     PLOPEX1 tfr     x,w             Increment to W
EC1A BDE6F4           (        forth.asm):01747 (7)             jsr     RPOP
EC1D 1F12             (        forth.asm):01748 (4)             tfr     x,y             Index to Y
EC1F BDE6F4           (        forth.asm):01749 (7)             jsr     RPOP            Limit to X
EC22 103062           (        forth.asm):01750 (4)             addr    w,y             Update index
EC25 114D             (        forth.asm):01751 (2)             tste
EC27 2B10             (        forth.asm):01752 (3)             bmi     @neginc
EC29 103721           (        forth.asm):01753 (4)             cmpr    y,x
EC2C 2F12             (        forth.asm):01754 (3)             ble     @done           We're done. Return With CFLAG set
EC2E BDE6D6           (        forth.asm):01755 (7)     @iter   jsr     RPUSH           Push back the limit
EC31 1F21             (        forth.asm):01756 (4)             tfr     y,x
EC33 BDE6D6           (        forth.asm):01757 (7)             jsr     RPUSH           Push back the index
EC36 1CFE             (        forth.asm):01758 (2)             andcc   #^CFLAG         Clear CFLAG
EC38 39               (        forth.asm):01759 (4)             rts
EC39 103721           (        forth.asm):01760 (4)     @neginc cmpr    y,x
EC3C 27F0             (        forth.asm):01761 (3)             beq     @iter           79-STANDARD irregular historical precedent
EC3E 2BEE             (        forth.asm):01762 (3)             bmi     @iter
EC40 1A01             (        forth.asm):01763 (2)     @done   orcc    #CFLAG          Set CFLAG
EC42 39               (        forth.asm):01764 (4)             rts
                      (        forth.asm):01765         
EC43 46               (        forth.asm):01766         UNLOOP  fcb     $46             ANSI (Core)
EC44 554E4C4F4F50     (        forth.asm):01767                 fcc     'UNLOOP'
EC4A EC07             (        forth.asm):01768                 fdb     PLOOP
EC4C C7               (        forth.asm):01769                 RFCS
EC4D BDE6F4           (        forth.asm):01770 (7)             jsr     RPOP            Drop the index from the return stack
EC50 7EE6F4           (        forth.asm):01771 (3)             jmp     RPOP            and the loop limit as well
                      (        forth.asm):01772         
EC53 C2               (        forth.asm):01773         IF      fcb     $C2             79-STANDARD (REQ210)
EC54 4946             (        forth.asm):01774                 fcc     'IF'
EC56 EC43             (        forth.asm):01775                 fdb     UNLOOP
EC58 C7               (        forth.asm):01776                 RFCS
EC59 109E08           (        forth.asm):01777 (5)             ldy     DICEND
EC5C 8EEC7B           (        forth.asm):01778 (3)             ldx     #IFEX
EC5F 86BD             (        forth.asm):01779 (2)             lda     #JSROPC         JSR extended
EC61 BDE139           (        forth.asm):01780 (7)             jsr     CHKRTS          Check if the final RTS can be omitted
EC64 BDE471           (        forth.asm):01781 (7)             jsr     VARCON2
EC67 8E2603           (        forth.asm):01782 (3)             ldx     #BNEOPC         Compile "BNE *+5"
EC6A AFA1             (        forth.asm):01783 (5+2)           stx     ,y++
EC6C 867E             (        forth.asm):01784 (2)             lda     #JMPOPC         JMP extended
EC6E A7A0             (        forth.asm):01785 (4+1)           sta     ,y+
EC70 1F21             (        forth.asm):01786 (4)             tfr     y,x
EC72 BDE6D6           (        forth.asm):01787 (7)             jsr     RPUSH
EC75 3122             (        forth.asm):01788 (4+1)           leay    2,y             Reserve 2 bytes for the jump address
EC77 109F08           (        forth.asm):01789 (5)             sty     DICEND
EC7A 39               (        forth.asm):01790 (4)             rts
                      (        forth.asm):01791         
EC7B BDE6C7           (        forth.asm):01792 (7)     IFEX    jsr     NPOP
EC7E 1037C1           (        forth.asm):01793 (4)             cmpr    0,x
EC81 39               (        forth.asm):01794 (4)             rts
                      (        forth.asm):01795         
                      (        forth.asm):01796         * Functionally equivalent to:
                      (        forth.asm):01797         * UNLESS ['] 0= COMPILE, POSTPONE IF ; IMMEDIATE RESTRICT
EC82 C6               (        forth.asm):01798         UNLESS  fcb     $C6             Non-standard (Perl inspired)
EC83 554E4C455353     (        forth.asm):01799                 fcc     'UNLESS'
EC89 EC53             (        forth.asm):01800                 fdb     IF
EC8B C7               (        forth.asm):01801                 RFCS
EC8C 8EEDBF           (        forth.asm):01802                 RFXT    ldx,#NULP+5     XT for 0=
EC8F BDF07B           (        forth.asm):01803 (7)             jsr     CMPCOM1
EC92 20C5             (        forth.asm):01804                 RFXT    bra,IF+5        XT for IF
                      (        forth.asm):01805         
EC94 C4               (        forth.asm):01806         ELSE    fcb     $C4             79-STANDARD (REQ167)
EC95 454C5345         (        forth.asm):01807                 fcc     'ELSE'
EC99 EC82             (        forth.asm):01808                 fdb     UNLESS
EC9B C7               (        forth.asm):01809                 RFCS
EC9C 109E08           (        forth.asm):01810 (5)             ldy     DICEND
EC9F 867E             (        forth.asm):01811 (2)             lda     #JMPOPC         JMP extended
ECA1 A7A0             (        forth.asm):01812 (4+1)           sta     ,y+
ECA3 3122             (        forth.asm):01813 (4+1)           leay    2,y
ECA5 109F08           (        forth.asm):01814 (5)             sty     DICEND
ECA8 BDE6F4           (        forth.asm):01815 (7)             jsr     RPOP
ECAB 10AF84           (        forth.asm):01816 (6+0)           sty     ,x              Set actual ELSE jump address
ECAE 1F21             (        forth.asm):01817 (4)             tfr     y,x
ECB0 301E             (        forth.asm):01818 (4+1)           leax    -2,x
ECB2 7EE6D6           (        forth.asm):01819 (3)             jmp     RPUSH
                      (        forth.asm):01820         
ECB5 C4               (        forth.asm):01821         THEN    fcb     $C4             79-STANDARD (REQ161)
ECB6 5448454E         (        forth.asm):01822                 fcc     'THEN'
ECBA EC94             (        forth.asm):01823                 fdb     ELSE
ECBC C7               (        forth.asm):01824                 RFCS
ECBD 109E08           (        forth.asm):01825 (5)             ldy     DICEND
ECC0 BDE6F4           (        forth.asm):01826 (7)             jsr     RPOP
ECC3 10AF84           (        forth.asm):01827 (6+0)           sty     ,x
ECC6 39               (        forth.asm):01828 (4)             rts
                      (        forth.asm):01829         
ECC7 01               (        forth.asm):01830         EQ      fcb     1               79-STANDARD (REQ173)
ECC8 3D               (        forth.asm):01831                 fcc     '='             ( N1 N2 -- FLAG )
ECC9 ECB5             (        forth.asm):01832                 fdb     THEN
ECCB C7               (        forth.asm):01833                 RFCS
ECCC CC0246BDE336     (        forth.asm):01834                 MINDREQ 2
ECD2 10ECC4           (        forth.asm):01835 (8+0)           ldq     ,u              D:W has N2:N1
ECD5 3342             (        forth.asm):01836 (4+1)           leau    2,u             Drop one cell from the user stack
ECD7 1FC1             (        forth.asm):01837 (4)             tfr     0,x
ECD9 103760           (        forth.asm):01838 (4)             cmpr    w,d
ECDC 2602             (        forth.asm):01839 (3)             bne     @eq1
ECDE 3001             (        forth.asm):01840 (4+1)           leax    1,x
ECE0 AFC4             (        forth.asm):01841 (5+0)   @eq1    stx     ,u              Store in place to FLAG
ECE2 39               (        forth.asm):01842 (4)             rts
                      (        forth.asm):01843         
ECE3 02               (        forth.asm):01844         DIFF    fcb     2               79-STANDARD (REF)
ECE4 3C3E             (        forth.asm):01845                 fcc     '<>'            ( N1 N2 -- FLAG )
ECE6 ECC7             (        forth.asm):01846                 fdb     EQ
ECE8 C7               (        forth.asm):01847                 RFCS
ECE9 CC0246BDE336     (        forth.asm):01848                 MINDREQ 2
ECEF 10ECC4           (        forth.asm):01849 (8+0)           ldq     ,u              D:W has N2:N1
ECF2 3342             (        forth.asm):01850 (4+1)           leau    2,u             Drop one cell from the user stack
ECF4 1FC1             (        forth.asm):01851 (4)             tfr     0,x
ECF6 103760           (        forth.asm):01852 (4)             cmpr    w,d
ECF9 2702             (        forth.asm):01853 (3)             beq     @diff1
ECFB 3001             (        forth.asm):01854 (4+1)           leax    1,x
ECFD AFC4             (        forth.asm):01855 (5+0)   @diff1  stx     ,u              Store in place to FLAG
ECFF 39               (        forth.asm):01856 (4)             rts
                      (        forth.asm):01857         
ED00 02               (        forth.asm):01858         SINFEQ  fcb     2               Non-standard (Not even ANSI!)
ED01 3C3D             (        forth.asm):01859                 fcc     '<='            Required for the ORNL fixed sieve benchmark
ED03 ECE3             (        forth.asm):01860                 fdb     DIFF
ED05 C7               (        forth.asm):01861                 RFCS
ED06 CC0246BDE336     (        forth.asm):01862                 MINDREQ 2               At least two cells need to be stacked up
ED0C 10AEC4           (        forth.asm):01863 (6+0)           ldy     ,u
ED0F AE42             (        forth.asm):01864 (5+1)           ldx     2,u
ED11 104F             (        forth.asm):01865 (2)             clrd
ED13 103721           (        forth.asm):01866 (4)             cmpr    y,x
ED16 2E02             (        forth.asm):01867 (3)             bgt     @sinfq1
ED18 104C             (        forth.asm):01868 (2)             incd
ED1A 3342             (        forth.asm):01869 (4+1)   @sinfq1 leau    2,u             Drop one cell
ED1C EDC4             (        forth.asm):01870 (5+0)           std     ,u
ED1E 39               (        forth.asm):01871 (4)             rts
                      (        forth.asm):01872         
                      (        forth.asm):01873                 IFNE    DEBUG
ED1F                  (        forth.asm):01874         CC      fcb     2               Non-standard. Used for debugging
                      (        forth.asm):01875                 fcc     'CC'
                      (        forth.asm):01876                 fdb     SINFEQ
                      (        forth.asm):01877                 RFCS
                      (        forth.asm):01878                 ldx     CCREG
                      (        forth.asm):01879                 jmp     NPUSH
                      (        forth.asm):01880                 ENDC
                      (        forth.asm):01881         
ED1F 03               (        forth.asm):01882         XOR     fcb     3               79-STANDARD (REQ179)
ED20 584F52           (        forth.asm):01883                 fcc     'XOR'
                      (        forth.asm):01884                 IFNE    DEBUG
                      (        forth.asm):01885                 fdb     CC
                      (        forth.asm):01886                 ELSE
ED23 ED00             (        forth.asm):01887                 fdb     SINFEQ
                      (        forth.asm):01888                 ENDC
ED25 C7               (        forth.asm):01889                 RFCS
ED26 CC0246BDE336     (        forth.asm):01890                 MINDREQ 2
ED2C ECC4             (        forth.asm):01891 (5+0)           ldd     ,u
ED2E 10A642           (        forth.asm):01892 (6+1)           ldw     2,u
ED31 103660           (        forth.asm):01893 (4)             eorr    w,d
ED34 3342             (        forth.asm):01894 (4+1)   XOR1    leau    2,u
ED36 EDC4             (        forth.asm):01895 (5+0)           std     ,u
ED38 39               (        forth.asm):01896 (4)             rts
                      (        forth.asm):01897         
ED39 02               (        forth.asm):01898         OR      fcb     2               79-STANDARD (REQ223)
ED3A 4F52             (        forth.asm):01899                 fcc     'OR'
ED3C ED1F             (        forth.asm):01900                 fdb     XOR
ED3E C7               (        forth.asm):01901                 RFCS
ED3F CC0246BDE336     (        forth.asm):01902                 MINDREQ 2
ED45 ECC4             (        forth.asm):01903 (5+0)           ldd     ,u
ED47 10A642           (        forth.asm):01904 (6+1)           ldw     2,u
ED4A 103560           (        forth.asm):01905 (4)             orr     w,d
ED4D 20E5             (        forth.asm):01906 (3)             bra     XOR1
                      (        forth.asm):01907         
ED4F 03               (        forth.asm):01908         AND     fcb     3               79-STANDARD (REQ183)
ED50 414E44           (        forth.asm):01909                 fcc     'AND'
ED53 ED39             (        forth.asm):01910                 fdb     OR
ED55 C7               (        forth.asm):01911                 RFCS
ED56 CC0246BDE336     (        forth.asm):01912                 MINDREQ 2
ED5C ECC4             (        forth.asm):01913 (5+0)           ldd     ,u
ED5E 10A642           (        forth.asm):01914 (6+1)           ldw     2,u
ED61 103460           (        forth.asm):01915 (4)             andr    w,d
ED64 20CE             (        forth.asm):01916 (3)             bra     XOR1
                      (        forth.asm):01917         
ED66 03               (        forth.asm):01918         COM     fcb     3               79-STANDARD (REF)
ED67 434F4D           (        forth.asm):01919                 fcc     'COM'
ED6A ED4F             (        forth.asm):01920                 fdb     AND
ED6C C7               (        forth.asm):01921                 RFCS
ED6D BDE6C7           (        forth.asm):01922 (7)     COM0    jsr     NPOP
ED70 1F10             (        forth.asm):01923 (4)             tfr     x,d
ED72 1043             (        forth.asm):01924 (2)             comd
ED74 1F01             (        forth.asm):01925 (4)             tfr     d,x
ED76 3610             (        forth.asm):01926                 UCNPUSH
ED78 39               (        forth.asm):01927 (4)             rts
                      (        forth.asm):01928         
ED79 06               (        forth.asm):01929         INVERT  fcb     6               ANSI (Core)
ED7A 494E56455254     (        forth.asm):01930                 fcc     'INVERT'
ED80 ED66             (        forth.asm):01931                 fdb     COM
ED82 C7               (        forth.asm):01932                 RFCS
ED83 20E8             (        forth.asm):01933 (3)             bra     COM0
                      (        forth.asm):01934         
ED85 02               (        forth.asm):01935         ZGREAT  fcb     2               79-STANDARD (REQ118)
ED86 303E             (        forth.asm):01936                 fcc     '0>'
ED88 ED79             (        forth.asm):01937                 fdb     INVERT
ED8A C7               (        forth.asm):01938                 RFCS
ED8B BDE6C7           (        forth.asm):01939 (7)             jsr     NPOP
ED8E 1F10             (        forth.asm):01940 (4)             tfr     x,d
ED90 104D             (        forth.asm):01941 (2)             tstd
ED92 2F06             (        forth.asm):01942 (3)             ble     @zgrt1
ED94 8E0001           (        forth.asm):01943 (3)             ldx     #1
ED97 3610             (        forth.asm):01944                 UCNPUSH
ED99 39               (        forth.asm):01945 (4)             rts
ED9A 1FC1             (        forth.asm):01946 (4)     @zgrt1  tfr     0,x
ED9C 3610             (        forth.asm):01947                 UCNPUSH
ED9E 39               (        forth.asm):01948 (4)             rts
                      (        forth.asm):01949         
ED9F 02               (        forth.asm):01950         ZLESS   fcb     2               79-STANDARD (REQ144)
EDA0 303C             (        forth.asm):01951                 fcc     '0<'
EDA2 ED85             (        forth.asm):01952                 fdb     ZGREAT
EDA4 C7               (        forth.asm):01953                 RFCS
EDA5 BDE6C7           (        forth.asm):01954 (7)             jsr     NPOP
EDA8 1F10             (        forth.asm):01955 (4)             tfr     x,d
EDAA 104D             (        forth.asm):01956 (2)             tstd
EDAC 2C06             (        forth.asm):01957 (3)             bge     @zlss1
EDAE 8E0001           (        forth.asm):01958 (3)             ldx     #1
EDB1 3610             (        forth.asm):01959                 UCNPUSH
EDB3 39               (        forth.asm):01960 (4)             rts
EDB4 1FC1             (        forth.asm):01961 (4)     @zlss1  tfr     0,x
EDB6 3610             (        forth.asm):01962                 UCNPUSH
EDB8 39               (        forth.asm):01963 (4)             rts
                      (        forth.asm):01964         
EDB9 02               (        forth.asm):01965         NULP    fcb     2               79-STANDARD (REQ180)
EDBA 303D             (        forth.asm):01966                 fcc     '0='
EDBC ED9F             (        forth.asm):01967                 fdb     ZLESS
EDBE C7               (        forth.asm):01968                 RFCS
EDBF BDE6C7           (        forth.asm):01969 (7)             jsr     NPOP
EDC2 1F10             (        forth.asm):01970 (4)             tfr     x,d
EDC4 1FC1             (        forth.asm):01971 (4)             tfr     0,x
EDC6 104D             (        forth.asm):01972 (2)             tstd
EDC8 2703             (        forth.asm):01973 (3)             beq     @nulp2
EDCA 3610             (        forth.asm):01974         @nulp1  UCNPUSH
EDCC 39               (        forth.asm):01975 (4)             rts
EDCD 3001             (        forth.asm):01976 (4+1)   @nulp2  leax    1,x
EDCF 20F9             (        forth.asm):01977 (3)             bra     @nulp1
                      (        forth.asm):01978         
EDD1 03               (        forth.asm):01979         NOT     fcb     3               79-STANDARD (REQ165)
EDD2 4E4F54           (        forth.asm):01980                 fcc     'NOT'
EDD5 EDB9             (        forth.asm):01981                 fdb     NULP
EDD7 C7               (        forth.asm):01982                 RFCS
EDD8 20E5             (        forth.asm):01983                 RFXT    bra,NULP+5      XT for 0=
                      (        forth.asm):01984         
EDDA 02               (        forth.asm):01985         USUP    fcb     2               ANSI (Core Ext)
EDDB 553E             (        forth.asm):01986                 fcc     'U>'
EDDD EDD1             (        forth.asm):01987                 fdb     NOT
EDDF C7               (        forth.asm):01988                 RFCS
EDE0 BDE476           (        forth.asm):01989 (7)             jsr     CMP2
EDE3 2302             (        forth.asm):01990 (3)             bls     @usup1
EDE5 3001             (        forth.asm):01991 (4+1)           leax    1,x
EDE7 3610             (        forth.asm):01992         @usup1  UCNPUSH
EDE9 39               (        forth.asm):01993 (4)             rts
                      (        forth.asm):01994         
EDEA 02               (        forth.asm):01995         UINF    fcb     2               79-STANDARD (REQ150)
EDEB 553C             (        forth.asm):01996                 fcc     'U<'
EDED EDDA             (        forth.asm):01997                 fdb     USUP
EDEF C7               (        forth.asm):01998                 RFCS
EDF0 BDE476           (        forth.asm):01999 (7)             jsr     CMP2
EDF3 2402             (        forth.asm):02000 (3)             bhs     @uinf1          Z is set
EDF5 3001             (        forth.asm):02001 (4+1)           leax    1,x
EDF7 3610             (        forth.asm):02002         @uinf1  UCNPUSH
EDF9 39               (        forth.asm):02003 (4)             rts
                      (        forth.asm):02004         
                      (        forth.asm):02005         * Functionally: : WITHIN OVER - >R - R> U< ;
EDFA 06               (        forth.asm):02006         WITHIN  fcb     6               ANSI (Core)
EDFB 57495448494E     (        forth.asm):02007                 fcc     'WITHIN'        ( n1 n2 n3 -- flag )
EE01 EDEA             (        forth.asm):02008                 fdb     UINF
EE03 C7               (        forth.asm):02009                 RFCS
EE04 BDFC55           (        forth.asm):02010                 RFXT    jsr,OVER+7      XT for OVER
EE07 BDF7D0           (        forth.asm):02011                 RFXT    jsr,MINUS+4     XT for -
EE0A BDEF54           (        forth.asm):02012                 RFXT    jsr,TOR+5       XT for >R
EE0D BDF7D0           (        forth.asm):02013                 RFXT    jsr,MINUS+4     XT for -
EE10 BDEF48           (        forth.asm):02014                 RFXT    jsr,RFROM+5     XT for R>
EE13 20DB             (        forth.asm):02015                 RFXT    bra,UINF+5      XT for U<
                      (        forth.asm):02016         
EE15 01               (        forth.asm):02017         SUP     fcb     1               79-STANDARD (REQ102)
EE16 3E               (        forth.asm):02018                 fcc     '>'
EE17 EDFA             (        forth.asm):02019                 fdb     WITHIN
EE19 C7               (        forth.asm):02020                 RFCS
EE1A BDE476           (        forth.asm):02021 (7)             jsr     CMP2
EE1D 2F02             (        forth.asm):02022 (3)             ble     @sup1
EE1F 3001             (        forth.asm):02023 (4+1)           leax    1,x
EE21 3610             (        forth.asm):02024         @sup1   UCNPUSH
EE23 39               (        forth.asm):02025 (4)             rts
                      (        forth.asm):02026         
EE24 01               (        forth.asm):02027         INF     fcb     1               79-STANDARD (REQ139)
EE25 3C               (        forth.asm):02028                 fcc     '<'
EE26 EE15             (        forth.asm):02029                 fdb     SUP
EE28 C7               (        forth.asm):02030                 RFCS
EE29 BDE476           (        forth.asm):02031 (7)             jsr     CMP2
EE2C 2C02             (        forth.asm):02032 (3)             bge     @inf1
EE2E 3001             (        forth.asm):02033 (4+1)           leax    1,x
EE30 3610             (        forth.asm):02034         @inf1   UCNPUSH
EE32 39               (        forth.asm):02035 (4)             rts
                      (        forth.asm):02036         
EE33 03               (        forth.asm):02037         MAX     fcb     3               79-STANDARD (REQ218)
EE34 4D4158           (        forth.asm):02038                 fcc     'MAX'
EE37 EE24             (        forth.asm):02039                 fdb     INF
EE39 C7               (        forth.asm):02040                 RFCS
EE3A BDE6C7           (        forth.asm):02041 (7)             jsr     NPOP
EE3D 1F12             (        forth.asm):02042 (4)             tfr     x,y
EE3F BDE6C7           (        forth.asm):02043 (7)             jsr     NPOP
EE42 103721           (        forth.asm):02044 (4)             cmpr    y,x
EE45 2C02             (        forth.asm):02045 (3)             bge     @pshrv1
EE47 1F21             (        forth.asm):02046 (4)             tfr     y,x
EE49 3610             (        forth.asm):02047         @pshrv1 UCNPUSH
EE4B 39               (        forth.asm):02048 (4)             rts
                      (        forth.asm):02049         
EE4C 03               (        forth.asm):02050         MIN     fcb     3               79-STANDARD (REQ127)
EE4D 4D494E           (        forth.asm):02051                 fcc     'MIN'
EE50 EE33             (        forth.asm):02052                 fdb     MAX
EE52 C7               (        forth.asm):02053                 RFCS
EE53 BDE6C7           (        forth.asm):02054 (7)             jsr     NPOP
EE56 1F12             (        forth.asm):02055 (4)             tfr     x,y
EE58 BDE6C7           (        forth.asm):02056 (7)             jsr     NPOP
EE5B 103721           (        forth.asm):02057 (4)             cmpr    y,x
EE5E 2F02             (        forth.asm):02058 (3)             ble     @pshrv2
EE60 1F21             (        forth.asm):02059 (4)             tfr     y,x
EE62 3610             (        forth.asm):02060         @pshrv2 UCNPUSH
EE64 39               (        forth.asm):02061 (4)             rts
                      (        forth.asm):02062         
EE65 03               (        forth.asm):02063         ABS     fcb     3               79-STANDARD (REQ108)
EE66 414253           (        forth.asm):02064                 fcc     'ABS'
EE69 EE4C             (        forth.asm):02065                 fdb     MIN
EE6B C7               (        forth.asm):02066                 RFCS
EE6C BDE6C7           (        forth.asm):02067 (7)             jsr     NPOP
EE6F 1F10             (        forth.asm):02068 (4)             tfr     x,d
EE71 104D             (        forth.asm):02069 (2)             tstd
EE73 2A04             (        forth.asm):02070 (3)             bpl     @abs1
EE75 1040             (        forth.asm):02071 (2)             negd
EE77 1F01             (        forth.asm):02072 (4)             tfr     d,x
EE79 3610             (        forth.asm):02073         @abs1   UCNPUSH
EE7B 39               (        forth.asm):02074 (4)             rts
                      (        forth.asm):02075         
EE7C 06               (        forth.asm):02076         NEGATE  fcb     6               79-STANDARD (REQ177)
EE7D 4E4547415445     (        forth.asm):02077                 fcc     'NEGATE'
EE83 EE65             (        forth.asm):02078                 fdb     ABS
EE85 C7               (        forth.asm):02079                 RFCS
EE86 CC0248BDE336     (        forth.asm):02080                 MINDREQ 1               One cell needs to be stacked up
EE8C ECC4             (        forth.asm):02081 (5+0)           ldd     ,u
EE8E 1040             (        forth.asm):02082 (2)             negd
EE90 EDC4             (        forth.asm):02083 (5+0)           std     ,u
EE92 39               (        forth.asm):02084 (4)             rts
                      (        forth.asm):02085         
EE93 C5               (        forth.asm):02086         BEGIN   fcb     $C5             79-STANDARD (REQ147)
EE94 424547494E       (        forth.asm):02087                 fcc     'BEGIN'
EE99 EE7C             (        forth.asm):02088                 fdb     NEGATE
EE9B C7               (        forth.asm):02089                 RFCS
EE9C 9E08             (        forth.asm):02090 (4)             ldx     DICEND
EE9E 7EE6D6           (        forth.asm):02091 (3)             jmp     RPUSH
                      (        forth.asm):02092         
EEA1 C5               (        forth.asm):02093         AGAIN   fcb     $C5             79-STANDARD (REF114)
EEA2 414741494E       (        forth.asm):02094                 fcc     'AGAIN'
EEA7 EE93             (        forth.asm):02095                 fdb     BEGIN
EEA9 C7               (        forth.asm):02096                 RFCS
EEAA BDE6F4           (        forth.asm):02097 (7)             jsr     RPOP
EEAD 1F12             (        forth.asm):02098 (4)             tfr     x,y
EEAF 9E08             (        forth.asm):02099 (4)             ldx     DICEND
EEB1 867E             (        forth.asm):02100 (2)             lda     #JMPOPC         JMP extended
EEB3 A780             (        forth.asm):02101 (4+1)           sta     ,x+
EEB5 10AF81           (        forth.asm):02102 (6+2)           sty     ,x++
EEB8 9F08             (        forth.asm):02103 (4)             stx     DICEND
EEBA 8602             (        forth.asm):02104 (2)             lda     #2
EEBC 972C             (        forth.asm):02105 (3)             sta     RTSREMV         Trigger the RTS removal optimization
EEBE 39               (        forth.asm):02106 (4)             rts
                      (        forth.asm):02107         
                      (        forth.asm):02108         # The standard does not require this as being immediate but I do.
EEBF C4               (        forth.asm):02109         EXIT    fcb     $C4             79-STANDARD (REQ117)
EEC0 45584954         (        forth.asm):02110                 fcc     'EXIT'
EEC4 EEA1             (        forth.asm):02111                 fdb     AGAIN
EEC6 C7               (        forth.asm):02112                 RFCS
EEC7 9E08             (        forth.asm):02113 (4)             ldx     DICEND
EEC9 301D             (        forth.asm):02114 (4+1)           leax    -3,x
EECB 109E14           (        forth.asm):02115 (5)             ldy     JSRLAST
EECE 103721           (        forth.asm):02116 (4)             cmpr    y,x
EED1 2605             (        forth.asm):02117 (3)             bne     @noopt          Tail JMP optimization is not possible
EED3 867E             (        forth.asm):02118 (2)             lda     #JMPOPC         JMP extended
EED5 A784             (        forth.asm):02119 (4+0)           sta     ,x
EED7 39               (        forth.asm):02120 (4)             rts
EED8 3003             (        forth.asm):02121 (4+1)   @noopt  leax    3,x             Point back to HERE
EEDA 8639             (        forth.asm):02122 (2)             lda     #RTSOPC         RTS inherent
EEDC A780             (        forth.asm):02123 (4+1)           sta     ,x+
EEDE 9F08             (        forth.asm):02124 (4)             stx     DICEND
EEE0 39               (        forth.asm):02125 (4)             rts
                      (        forth.asm):02126         
EEE1 C5               (        forth.asm):02127         UNTIL   fcb     $C5             79-STANDARD (REQ237)
EEE2 554E54494C       (        forth.asm):02128                 fcc     'UNTIL'
EEE7 EEBF             (        forth.asm):02129                 fdb     EXIT
EEE9 C7               (        forth.asm):02130                 RFCS
EEEA 109E08           (        forth.asm):02131 (5)             ldy     DICEND
EEED 86BD             (        forth.asm):02132 (2)             lda     #JSROPC         JSR extended
EEEF 8EEC7B           (        forth.asm):02133 (3)             ldx     #IFEX
EEF2 BDE139           (        forth.asm):02134 (7)             jsr     CHKRTS          Check if the final RTS can be omitted
EEF5 BDE471           (        forth.asm):02135 (7)             jsr     VARCON2
EEF8 8E2603           (        forth.asm):02136 (3)             ldx     #BNEOPC         Compile "BNE *+5"
EEFB AFA1             (        forth.asm):02137 (5+2)           stx     ,y++
EEFD 867E             (        forth.asm):02138 (2)             lda     #JMPOPC         JMP extended
EEFF A7A0             (        forth.asm):02139 (4+1)           sta     ,y+
EF01 BDE6F4           (        forth.asm):02140 (7)             jsr     RPOP
EF04 AFA1             (        forth.asm):02141 (5+2)           stx     ,y++
EF06 109F08           (        forth.asm):02142 (5)             sty     DICEND
EF09 39               (        forth.asm):02143 (4)             rts
                      (        forth.asm):02144         
EF0A C3               (        forth.asm):02145         END     fcb     $C3             79-STANDARD (REF224)
EF0B 454E44           (        forth.asm):02146                 fcc     'END'
EF0E EEE1             (        forth.asm):02147                 fdb     UNTIL
EF10 C7               (        forth.asm):02148                 RFCS
EF11 20D7             (        forth.asm):02149                 RFXT    bra,UNTIL+8     XT for UNTIL
                      (        forth.asm):02150         
EF13 C5               (        forth.asm):02151         WHILE   fcb     $C5             79-STANDARD (REQ149)
EF14 5748494C45       (        forth.asm):02152                 fcc     'WHILE'
EF19 EF0A             (        forth.asm):02153                 fdb     END
EF1B C7               (        forth.asm):02154                 RFCS
EF1C 7EEC59           (        forth.asm):02155                 RFXT    jmp,IF+5        XT for IF
                      (        forth.asm):02156         
EF1F C6               (        forth.asm):02157         REPEAT  fcb     $C6             79-STANDARD (REQ120)
EF20 524550454154     (        forth.asm):02158                 fcc     'REPEAT'
EF26 EF13             (        forth.asm):02159                 fdb     WHILE
EF28 C7               (        forth.asm):02160                 RFCS
EF29 BDE6F4           (        forth.asm):02161 (7)             jsr     RPOP
EF2C 3410             (        forth.asm):02162 (4+2)           pshs    x
EF2E BDE6F4           (        forth.asm):02163 (7)             jsr     RPOP
EF31 109E08           (        forth.asm):02164 (5)             ldy     DICEND
EF34 867E             (        forth.asm):02165 (2)             lda     #JMPOPC         JMP extended
EF36 BDE471           (        forth.asm):02166 (7)             jsr     VARCON2
EF39 3510             (        forth.asm):02167 (4+2)           puls    x
EF3B 10AF84           (        forth.asm):02168 (6+0)           sty     ,x
EF3E 109F08           (        forth.asm):02169 (5)             sty     DICEND
EF41 39               (        forth.asm):02170 (4)             rts
                      (        forth.asm):02171         
EF42 42               (        forth.asm):02172         RFROM   fcb     $42             79-STANDARD (REQ110)
EF43 523E             (        forth.asm):02173                 fcc     'R>'
EF45 EF1F             (        forth.asm):02174                 fdb     REPEAT
EF47 C7               (        forth.asm):02175                 RFCS
EF48 BDE6F4           (        forth.asm):02176 (7)             jsr     RPOP
EF4B 7EE6B9           (        forth.asm):02177 (3)             jmp     NPUSH
                      (        forth.asm):02178         
EF4E 42               (        forth.asm):02179         TOR     fcb     $42             79-STANDARD (REQ200)
EF4F 3E52             (        forth.asm):02180                 fcc     '>R'
EF51 EF42             (        forth.asm):02181                 fdb     RFROM
EF53 C7               (        forth.asm):02182                 RFCS
EF54 BDE6C7           (        forth.asm):02183 (7)             jsr     NPOP
EF57 7EE6D6           (        forth.asm):02184 (3)             jmp     RPUSH
                      (        forth.asm):02185         
EF5A 45               (        forth.asm):02186         LEAVE   fcb     $45             79-STANDARD (REQ213)
EF5B 4C45415645       (        forth.asm):02187                 fcc     'LEAVE'
EF60 EF4E             (        forth.asm):02188                 fdb     TOR
EF62 C7               (        forth.asm):02189                 RFCS
EF63 BDE6F4           (        forth.asm):02190 (7)             jsr     RPOP
EF66 BDE6F4           (        forth.asm):02191 (7)             jsr     RPOP
EF69 BDE6D6           (        forth.asm):02192 (7)             jsr     RPUSH
EF6C 7EE6D6           (        forth.asm):02193 (3)             jmp     RPUSH
                      (        forth.asm):02194         
EF6F 41               (        forth.asm):02195         INDI    fcb     $41             79-STANDARD (REQ136)
EF70 49               (        forth.asm):02196                 fcc     'I'
EF71 EF5A             (        forth.asm):02197                 fdb     LEAVE
EF73 C7               (        forth.asm):02198                 RFCS
EF74 C601             (        forth.asm):02199 (2)             ldb     #1              1 means top of the stack
EF76 962A             (        forth.asm):02200 (3)     RPICKN  lda     RDEPTH
EF78 103798           (        forth.asm):02201 (4)             cmpr    b,a
EF7B 250A             (        forth.asm):02202 (3)             bcs     @rpick1
EF7D 9E00             (        forth.asm):02203 (4)             ldx     RSP
EF7F 5A               (        forth.asm):02204 (1)             decb                    Minus 1, unlike in the Z80 implementation
EF80 58               (        forth.asm):02205 (1)             lslb                    Times 2
EF81 3A               (        forth.asm):02206 (1)             abx
EF82 AE84             (        forth.asm):02207 (5+0)           ldx     ,x
EF84 7EE6B9           (        forth.asm):02208 (3)             jmp     NPUSH
EF87 C608             (        forth.asm):02209 (2)     @rpick1 ldb     #8              Return stack underflow
EF89 BDE640           (        forth.asm):02210 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02211         
EF8C 42               (        forth.asm):02212         RFETCH  fcb     $42             79-STANDARD (REQ228)
EF8D 5240             (        forth.asm):02213                 fcc     'R@'
EF8F EF6F             (        forth.asm):02214                 fdb     INDI
EF91 C7               (        forth.asm):02215                 RFCS
EF92 20E0             (        forth.asm):02216                 RFXT    bra,INDI+4      XT for I
                      (        forth.asm):02217         
EF94 42               (        forth.asm):02218         INDIP   fcb     $42             79-STANDARD (REF)
EF95 4927             (        forth.asm):02219                 fdb     $4927
EF97 EF8C             (        forth.asm):02220                 fdb     RFETCH
EF99 C7               (        forth.asm):02221                 RFCS
EF9A C602             (        forth.asm):02222 (2)             ldb     #2
EF9C 20D8             (        forth.asm):02223 (3)             bra     RPICKN
                      (        forth.asm):02224         
EF9E 41               (        forth.asm):02225         INDJ    fcb     $41             79-STANDARD (REQ225)
EF9F 4A               (        forth.asm):02226                 fcc     'J'
EFA0 EF94             (        forth.asm):02227                 fdb     INDIP
EFA2 C7               (        forth.asm):02228                 RFCS
EFA3 C603             (        forth.asm):02229 (2)             ldb     #3
EFA5 20CF             (        forth.asm):02230 (3)             bra     RPICKN
                      (        forth.asm):02231         
EFA7 42               (        forth.asm):02232         INDJP   fcb     $42             Non-standard
EFA8 4A27             (        forth.asm):02233                 fdb     $4A27
EFAA EF9E             (        forth.asm):02234                 fdb     INDJ
EFAC C7               (        forth.asm):02235                 RFCS
EFAD C604             (        forth.asm):02236 (2)             ldb     #4
EFAF 20C5             (        forth.asm):02237 (3)             bra     RPICKN
                      (        forth.asm):02238         
EFB1 41               (        forth.asm):02239         INDK    fcb     $41             79-STANDARD (REF)
EFB2 4B               (        forth.asm):02240                 fcc     'K'
EFB3 EFA7             (        forth.asm):02241                 fdb     INDJP
EFB5 C7               (        forth.asm):02242                 RFCS
EFB6 C605             (        forth.asm):02243 (2)             ldb     #5
EFB8 20BC             (        forth.asm):02244 (3)             bra     RPICKN
                      (        forth.asm):02245         
EFBA 04               (        forth.asm):02246         QUIT    fcb     4               79-STANDARD (REQ211)
EFBB 51554954         (        forth.asm):02247                 fcc     'QUIT'
EFBF EFB1             (        forth.asm):02248                 fdb     INDK
EFC1 C7               (        forth.asm):02249                 RFCS
EFC2 0F21             (        forth.asm):02250 (5)             clr     USTATE+1
EFC4 BDEA22           (        forth.asm):02251                 RFXT    jsr,RCLR+7      XT for RCLR
EFC7 10CE8000         (        forth.asm):02252 (4)             lds     #RAMSTRT+RAMSIZE Reset the system stack pointer
EFCB BDE1E7           (        forth.asm):02253 (7)             jsr     PUTCR
EFCE 7EE0A7           (        forth.asm):02254 (3)             jmp     INTERP
                      (        forth.asm):02255         
EFD1 05               (        forth.asm):02256         ABORT   fcb     5               79-STANDARD (REQ101)
EFD2 41424F5254       (        forth.asm):02257                 fcc     'ABORT'
EFD7 EFBA             (        forth.asm):02258                 fdb     QUIT
EFD9 C7               (        forth.asm):02259                 RFCS
EFDA BDEA16           (        forth.asm):02260                 RFXT    jsr,NCLR+7      XT for NCLR
EFDD BDEA22           (        forth.asm):02261                 RFXT    jsr,RCLR+7      XT for RCLR
EFE0 C603             (        forth.asm):02262 (2)             ldb     #3
EFE2 BDE640           (        forth.asm):02263 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02264         
EFE5 04               (        forth.asm):02265         FIND    fcb     4               79-STANDARD (REQ203)
EFE6 46494E44         (        forth.asm):02266                 fcc     'FIND'          ( -- XT )
EFEA EFD1             (        forth.asm):02267                 fdb     ABORT
EFEC C7               (        forth.asm):02268                 RFCS
EFED 1FC2             (        forth.asm):02269 (4)             tfr     0,y             Default return value is zero
EFEF BDE70D           (        forth.asm):02270 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
EFF2 6D84             (        forth.asm):02271 (5+0)           tst     ,x
EFF4 2712             (        forth.asm):02272 (3)             beq     @find1
EFF6 BDE27F           (        forth.asm):02273 (7)             jsr     SCNSTOK
EFF9 270D             (        forth.asm):02274 (3)             beq     @find1
EFFB BDE38A           (        forth.asm):02275 (7)             jsr     SWDIC
EFFE DC0E             (        forth.asm):02276 (4)             ldd     PLOAD           Retrieve word payload
F000 DD10             (        forth.asm):02277 (4)             std     FNDPLD          Make it accessible through PAYLOAD
F002 DC04             (        forth.asm):02278 (4)             ldd     TOKENEP
F004 931C             (        forth.asm):02279 (4)             subd    BSBFADR
F006 DD22             (        forth.asm):02280 (4)             std     UTOIN           Derive >IN from TOKENEP
F008 1F21             (        forth.asm):02281 (4)     @find1  tfr     y,x
F00A 7EE6B9           (        forth.asm):02282 (3)             jmp     NPUSH
                      (        forth.asm):02283         
F00D 01               (        forth.asm):02284         RBRACK  fcb     1               79-STANDARD (REQ126)
F00E 5D               (        forth.asm):02285                 fcc     ']'
F00F EFE5             (        forth.asm):02286                 fdb     FIND
F011 C7               (        forth.asm):02287                 RFCS
F012 8601             (        forth.asm):02288 (2)             lda     #1
F014 9721             (        forth.asm):02289 (3)             sta     USTATE+1
F016 39               (        forth.asm):02290 (4)             rts
                      (        forth.asm):02291         
                      (        forth.asm):02292         * Note: the standard does not mandate that this primitive be executed in
                      (        forth.asm):02293         * definitions only. IMHO, it ought to, therefore I am forcing the C bit here.
F017 C1               (        forth.asm):02294         LBRACK  fcb     $C1             79-STANDARD (REQ125)
F018 5B               (        forth.asm):02295                 fcc     '['
F019 F00D             (        forth.asm):02296                 fdb     RBRACK
F01B C7               (        forth.asm):02297                 RFCS
F01C 0F21             (        forth.asm):02298 (5)             clr     USTATE+1
F01E 39               (        forth.asm):02299 (4)             rts
                      (        forth.asm):02300         
                      (        forth.asm):02301         * Functionally: : ['] FIND POSTPONE LITERAL ; IMMEDIATE RESTRICT
F01F C3               (        forth.asm):02302         BKQUOT  fcb     $C3             ANSI (Core)
F020 5B275D           (        forth.asm):02303                 fcb     $5B,$27,$5D
F023 F017             (        forth.asm):02304                 fdb     LBRACK
F025 C7               (        forth.asm):02305                 RFCS
F026 8DC5             (        forth.asm):02306                 RFXT    bsr,FIND+7      XT for FIND
                      (        forth.asm):02307         * Data stack topmost cell has the target word address.
F028 7EEAA2           (        forth.asm):02308                 RFXT    jmp,LITERAL+10  XT for LITERAL
                      (        forth.asm):02309         
F02B C8               (        forth.asm):02310         POSTPON fcb     $C8             ANSI (Core)
F02C 504F5354504F4E45 (        forth.asm):02311                 fcc     'POSTPONE'      Not a straight alias to [COMPILE]
F034 F01F             (        forth.asm):02312                 fdb     BKQUOT          Non-immediate words deserve special treatment
F036 C7               (        forth.asm):02313                 RFCS
F037 BDE70D           (        forth.asm):02314 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
F03A 6D84             (        forth.asm):02315 (5+0)           tst     ,x
F03C 2605             (        forth.asm):02316 (3)             bne     @postp2
F03E C605             (        forth.asm):02317 (2)     @postp1 ldb     #5              Missing word name
F040 BDE640           (        forth.asm):02318 (7)             jsr     ERRHDLR         No return
F043 BDE27F           (        forth.asm):02319 (7)     @postp2 jsr     SCNSTOK
F046 27F6             (        forth.asm):02320 (3)             beq     @postp1
F048 BDE38A           (        forth.asm):02321 (7)             jsr     SWDIC
F04B 2607             (        forth.asm):02322 (3)             bne     @postp3         Word found. Code address returned in Y
F04D 9E02             (        forth.asm):02323 (4)             ldx     TOKENSP
F04F C602             (        forth.asm):02324 (2)             ldb     #2              Undefined (X points to the offending word)
F051 BDE640           (        forth.asm):02325 (7)             jsr     ERRHDLR         No return
F054 1F21             (        forth.asm):02326 (4)     @postp3 tfr     y,x             X has the actual execution token
F056 0D33             (        forth.asm):02327 (4)             tst     IMDFLG
F058 270A             (        forth.asm):02328 (3)             beq     @postp5         Target word is not immediate
F05A BDE14D           (        forth.asm):02329 (7)     @postp4 jsr     EMXASXT         Set as action component
F05D DC02             (        forth.asm):02330 (4)             ldd     TOKENSP         Updated by SWDIC if the word was found
F05F 931C             (        forth.asm):02331 (4)             subd    BSBFADR
F061 DD22             (        forth.asm):02332 (4)             std     UTOIN
F063 39               (        forth.asm):02333 (4)             rts
                      (        forth.asm):02334         * The word being considered is non-immediate. The equivalent input should be:
                      (        forth.asm):02335         * ['] <word> COMPILE, We have the XT for <word> in X.
F064 BDE45A           (        forth.asm):02336 (7)     @postp5 jsr     LITER
F067 8EF078           (        forth.asm):02337                 RFXT    ldx,#CMPCOMA+11
F06A 20EE             (        forth.asm):02338 (3)             bra     @postp4
                      (        forth.asm):02339         
                      (        forth.asm):02340         * Like the 79-STANDARD COMPILE word, GNU Forth has this as a compile-only word.
                      (        forth.asm):02341         * This is a wise choice since it allows us to possibly optimize it.
F06C 48               (        forth.asm):02342         CMPCOMA fcb     $48             ANSI (Core Ext)
F06D 434F4D50494C452C (        forth.asm):02343                 fcc     'COMPILE,'      ( XT -- )
F075 F02B             (        forth.asm):02344                 fdb     POSTPON
F077 C7               (        forth.asm):02345                 RFCS
F078 BDE6C7           (        forth.asm):02346 (7)             jsr     NPOP            Execution token to X
F07B 7EE14D           (        forth.asm):02347 (3)     CMPCOM1 jmp     EMXASXT
                      (        forth.asm):02348         
                      (        forth.asm):02349         * As per the standard, : is not immediate. This allows for further interesting
                      (        forth.asm):02350         * developments, like tracing words execution...
F07E 01               (        forth.asm):02351         COMPC   fcb     $1              79-STANDARD (REQ116)
F07F 3A               (        forth.asm):02352                 fcc     ':'
F080 F06C             (        forth.asm):02353                 fdb     CMPCOMA
F082 C7               (        forth.asm):02354                 RFCS
F083 8601             (        forth.asm):02355 (2)             lda     #1
F085 9721             (        forth.asm):02356 (3)             sta     USTATE+1
F087 104F             (        forth.asm):02357 (2)             clrd
F089 DD14             (        forth.asm):02358 (4)             std     JSRLAST
F08B 8602             (        forth.asm):02359 (2)             lda     #2
F08D 972C             (        forth.asm):02360 (3)             sta     RTSREMV         Optimistic strategy: remove the final RTS
F08F 962A             (        forth.asm):02361 (3)             lda     RDEPTH
F091 972B             (        forth.asm):02362 (3)             sta     IRDPTH          Meant to check for unbalanced constructs
F093 7EE3F8           (        forth.asm):02363 (3)             jmp     LOCWRT
                      (        forth.asm):02364         
F096 C1               (        forth.asm):02365         COMPR   fcb     $C1             79-STANDARD (REQ196)
F097 3B               (        forth.asm):02366                 fcc     ';'
F098 F07E             (        forth.asm):02367                 fdb     COMPC
F09A C7               (        forth.asm):02368                 RFCS
F09B 962A             (        forth.asm):02369 (3)             lda     RDEPTH          Return stack depth
F09D 912B             (        forth.asm):02370 (3)             cmpa    IRDPTH          Same as when : was entered?
F09F 2705             (        forth.asm):02371 (3)             beq     @compr1
F0A1 C609             (        forth.asm):02372 (2)             ldb     #9              Illegal construct if not
F0A3 BDE640           (        forth.asm):02373 (7)             jsr     ERRHDLR         No return
F0A6 0F21             (        forth.asm):02374 (5)     @compr1 clr     USTATE+1        Back to interpretation mode
F0A8 9E0C             (        forth.asm):02375 (4)             ldx     BDICEND
F0AA 9F06             (        forth.asm):02376 (4)             stx     LSTWAD          Update LAST
F0AC 9E08             (        forth.asm):02377 (4)             ldx     DICEND
                      (        forth.asm):02378         * Optimization: replace the last JSR by a JMP, if possible.
F0AE DC14             (        forth.asm):02379 (4)             ldd     JSRLAST
F0B0 2712             (        forth.asm):02380 (3)             beq     @compr3         We need an RTS
F0B2 301D             (        forth.asm):02381 (4+1)           leax    -3,x
F0B4 9C14             (        forth.asm):02382 (4)             cmpx    JSRLAST
F0B6 2604             (        forth.asm):02383 (3)             bne     @compr2
F0B8 867E             (        forth.asm):02384 (2)             lda     #JMPOPC         JMP extended
F0BA A784             (        forth.asm):02385 (4+0)           sta     ,x
                      (        forth.asm):02386         * At this point we still have to emit an RTS unless RTSREMV is 2 or more.
F0BC 3003             (        forth.asm):02387 (4+1)   @compr2 leax    3,x
F0BE 962C             (        forth.asm):02388 (3)             lda     RTSREMV
F0C0 8102             (        forth.asm):02389 (2)             cmpa    #2
F0C2 2404             (        forth.asm):02390 (3)             bhs     @compr4         Optimization applies. We have no forward refs
F0C4 8639             (        forth.asm):02391 (2)     @compr3 lda     #RTSOPC         RTS inherent
F0C6 A780             (        forth.asm):02392 (4+1)           sta     ,x+
F0C8                  (        forth.asm):02393         @compr4
                      (        forth.asm):02394                 IFNE    DEBUG
                      (        forth.asm):02395                 lda     #ILLOPC         Illegal opcode
                      (        forth.asm):02396                 sta     ,x+
                      (        forth.asm):02397                 ENDC
F0C8 9F08             (        forth.asm):02398 (4)             stx     DICEND          Update HERE
                      (        forth.asm):02399                 IFNE    RELFEAT
F0CA BDEB36           (        forth.asm):02400                 RFXT    jsr,MONITOR+10  XT for MONITOR. All : words are candidates
                      (        forth.asm):02401         *                               for integrity check by ICHECK.
                      (        forth.asm):02402                 ENDC
F0CD 39               (        forth.asm):02403 (4)             rts
                      (        forth.asm):02404         
F0CE C7               (        forth.asm):02405         RECURSE fcb     $C7             FORTH-83
F0CF 52454355525345   (        forth.asm):02406                 fcc     'RECURSE'
F0D6 F096             (        forth.asm):02407                 fdb     COMPR
F0D8 C7               (        forth.asm):02408                 RFCS
F0D9 9E12             (        forth.asm):02409 (4)             ldx     RECADDR         Set up by LOCWRT
F0DB 7EE14D           (        forth.asm):02410 (3)             jmp     EMXASXT         Set as action component
                      (        forth.asm):02411         
F0DE 06               (        forth.asm):02412         FORGET  fcb     6               79-STANDARD (REQ196)
F0DF 464F52474554     (        forth.asm):02413                 fcc     'FORGET'
F0E5 F0CE             (        forth.asm):02414                 fdb     RECURSE
F0E7 C7               (        forth.asm):02415                 RFCS
F0E8 BDE70D           (        forth.asm):02416 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
F0EB 6D84             (        forth.asm):02417 (5+0)           tst     ,x              EOL?
F0ED 2605             (        forth.asm):02418 (3)             bne     @frgt2          No
F0EF C605             (        forth.asm):02419 (2)     @frgt1  ldb     #5              Missing word name
F0F1 BDE640           (        forth.asm):02420 (7)             jsr     ERRHDLR         No return
F0F4 BDE27F           (        forth.asm):02421 (7)     @frgt2  jsr     SCNSTOK
F0F7 27F6             (        forth.asm):02422 (3)             beq     @frgt1          EOL before a non-SP character could be acquired
F0F9 BDE38A           (        forth.asm):02423 (7)             jsr     SWDIC           SWDIC uses TOKENSP as input--not X!!
F0FC 2607             (        forth.asm):02424 (3)             bne     @frgt3          Word found. XT returned in Y
F0FE 9E02             (        forth.asm):02425 (4)             ldx     TOKENSP
F100 C602             (        forth.asm):02426 (2)             ldb     #2              Undefined (X points to the offending word)
F102 BDE640           (        forth.asm):02427 (7)             jsr     ERRHDLR         No return
F105 1F21             (        forth.asm):02428 (4)     @frgt3  tfr     y,x             Y and X have the word's XT
F107 108C0C15         (        forth.asm):02429 (4)             cmpy    #RAMFTCH
F10B 271B             (        forth.asm):02430 (3)             beq     @frgt4
F10D 108CE000         (        forth.asm):02431 (4)             cmpy    #ROMSTRT
F111 2415             (        forth.asm):02432 (3)             bhs     @frgt4
                      (        forth.asm):02433                 IFNE    RELFEAT
F113 AE1D             (        forth.asm):02434 (5+1)           ldx     -3,x            Backlink to X
F115 9F06             (        forth.asm):02435 (4)             stx     LSTWAD          Update LAST
F117 303C             (        forth.asm):02436 (4+1)           leax    -4,y            XT-4 to X (1B/attr, 2B/backlink, 1B/checksum)
                      (        forth.asm):02437                 ELSE
                      (        forth.asm):02438                 ldx     -2,x            Backlink to X
                      (        forth.asm):02439                 stx     LSTWAD          Update LAST
                      (        forth.asm):02440                 leax    -3,y            XT-3 to X (1B/attr, 2B/backlink)
                      (        forth.asm):02441                 ENDC
F119 4F               (        forth.asm):02442 (1)             clra
F11A D632             (        forth.asm):02443 (3)             ldb     CURTOKL         Token name length to D
F11C 103201           (        forth.asm):02444 (4)             subr    d,x             Substract word length
F11F 9F08             (        forth.asm):02445 (4)             stx     DICEND          Update HERE
F121 DC02             (        forth.asm):02446 (4)             ldd     TOKENSP         Set by SWDIC to point to the end of the token
F123 931C             (        forth.asm):02447 (4)             subd    BSBFADR
F125 DD22             (        forth.asm):02448 (4)             std     UTOIN           Derive >IN from TOKENSP
F127 39               (        forth.asm):02449 (4)             rts
F128 C60B             (        forth.asm):02450 (2)     @frgt4  ldb     #11             Word is unforgettable
F12A BDE640           (        forth.asm):02451 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02452         
F12D 07               (        forth.asm):02453         EXCT    fcb     7               79-STANDARD (REQ163)
F12E 45584543555445   (        forth.asm):02454                 fcc     'EXECUTE'
F135 F0DE             (        forth.asm):02455                 fdb     FORGET
F137 C7               (        forth.asm):02456                 RFCS
F138 BDE6C7           (        forth.asm):02457 (7)             jsr     NPOP
F13B 1037C1           (        forth.asm):02458 (4)             cmpr    0,x             Although the standard does not specify that
F13E 2702             (        forth.asm):02459 (3)             beq     @exct1          a NUL address should trigger an error, I do
F140 1F15             (        forth.asm):02460 (4)             tfr     x,pc
F142 C60D             (        forth.asm):02461 (2)     @exct1  ldb     #13             Illegal argument
F144 BDE640           (        forth.asm):02462 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02463         
F147 03               (        forth.asm):02464         BYE     fcb     3               Non-standard
F148 425945           (        forth.asm):02465                 fcc     'BYE'
F14B F12D             (        forth.asm):02466                 fdb     EXCT
F14D C7               (        forth.asm):02467                 RFCS
F14E 7EE037           (        forth.asm):02468 (3)             jmp     RSTHDL
                      (        forth.asm):02469         
F151 C6               (        forth.asm):02470         BKCHAR  fcb     $C6             ANSI (Core)
F152 5B434841525D     (        forth.asm):02471                 fcc     '[CHAR]'
F158 F147             (        forth.asm):02472                 fdb     BYE
F15A C7               (        forth.asm):02473                 RFCS
F15B 8D0B             (        forth.asm):02474                 RFXT    bsr,CHAR+7      XT for CHAR
F15D 7EEAA2           (        forth.asm):02475                 RFXT    jmp,LITERAL+10  XT for LITERAL
                      (        forth.asm):02476         
F160 04               (        forth.asm):02477         CHAR    fcb     4               ANSI (Core)
F161 43484152         (        forth.asm):02478                 fcc     'CHAR'
F165 F151             (        forth.asm):02479                 fdb     BKCHAR
F167 C7               (        forth.asm):02480                 RFCS
F168 BDE70D           (        forth.asm):02481 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
F16B BDE27F           (        forth.asm):02482 (7)     @char1  jsr     SCNSTOK         X points to the beginning of the character
F16E 2714             (        forth.asm):02483 (3)             beq     @chrerr
F170 E684             (        forth.asm):02484 (4+0)           ldb     ,x
F172 4F               (        forth.asm):02485 (1)             clra
F173 1F01             (        forth.asm):02486 (4)             tfr     d,x
F175 BDE6B9           (        forth.asm):02487 (7)             jsr     NPUSH
F178 9E02             (        forth.asm):02488 (4)             ldx     TOKENSP         Set by SCNSTOK
F17A BDE28D           (        forth.asm):02489 (7)             jsr     SCNETOK
F17D 1F10             (        forth.asm):02490 (4)             tfr     x,d             TOKENEP
F17F 931C             (        forth.asm):02491 (4)             subd    BSBFADR
F181 DD22             (        forth.asm):02492 (4)             std     UTOIN           Derive >IN from TOKENEP
F183 39               (        forth.asm):02493 (4)             rts
F184 C60D             (        forth.asm):02494 (2)     @chrerr ldb     #13             Illegal argument
F186 BDE640           (        forth.asm):02495 (7)             jsr     ERRHDLR
                      (        forth.asm):02496         * No return.
                      (        forth.asm):02497         
                      (        forth.asm):02498         * Hairy code but working.
F189 04               (        forth.asm):02499         WORD    fcb     4               79-STANDARD (REQ181)
F18A 574F5244         (        forth.asm):02500                 fcc     'WORD'          ( char -- addr )
F18E F160             (        forth.asm):02501                 fdb     CHAR
F190 C7               (        forth.asm):02502                 RFCS
F191 BDE6C7           (        forth.asm):02503 (7)             jsr     NPOP
F194 1F16             (        forth.asm):02504 (4)             tfr     x,w             F has the delimiter ASCII code
F196 109E08           (        forth.asm):02505 (5)             ldy     DICEND          The counted string returned is stored at HERE
F199 3420             (        forth.asm):02506 (4+2)           pshs    y
F19B 6FA0             (        forth.asm):02507 (6+1)           clr     ,y+             Initialize its length
F19D BDE70D           (        forth.asm):02508 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
F1A0 6D84             (        forth.asm):02509 (5+0)           tst     ,x              EOL reached?
F1A2 2605             (        forth.asm):02510 (3)             bne     @word1          No, proceed
F1A4 3510             (        forth.asm):02511 (4+2)   @word0  puls    x
F1A6 3610             (        forth.asm):02512                 UCNPUSH                 Push back HERE
F1A8 39               (        forth.asm):02513 (4)             rts
F1A9 3001             (        forth.asm):02514 (4+1)   @word1  leax    1,x             Skip space character after WORD or leading delim
F1AB A684             (        forth.asm):02515 (4+0)           lda     ,x
F1AD 2716             (        forth.asm):02516 (3)             beq     @word5          EOL reached, this is the end
F1AF 1037F8           (        forth.asm):02517 (4)             cmpr    f,a             Leading delimiter matched?
F1B2 27F5             (        forth.asm):02518 (3)             beq     @word1          Yes
F1B4 A680             (        forth.asm):02519 (4+1)   @word2  lda     ,x+             Acquire next character from the input stream
F1B6 A7A0             (        forth.asm):02520 (4+1)   @word3  sta     ,y+
F1B8 2709             (        forth.asm):02521 (3)             beq     @word4          EOL reached
F1BA 1037F8           (        forth.asm):02522 (4)             cmpr    f,a             Trailing delimiter?
F1BD 2706             (        forth.asm):02523 (3)             beq     @word5
F1BF 6CF4             (        forth.asm):02524 (6+3)           inc     [,s]            Increment string length
F1C1 20F1             (        forth.asm):02525 (3)             bra     @word2
F1C3 301F             (        forth.asm):02526 (4+1)   @word4  leax    -1,x            EOL reached
F1C5 1F10             (        forth.asm):02527 (4)     @word5  tfr     x,d             Pointing one char after the delimiter or to NUL
F1C7 931C             (        forth.asm):02528 (4)             subd    BSBFADR
F1C9 DD22             (        forth.asm):02529 (4)             std     UTOIN
F1CB 20D7             (        forth.asm):02530 (3)             bra     @word0
                      (        forth.asm):02531         
F1CD 81               (        forth.asm):02532         LPAR    fcb     $81             79-STANDARD (REQ122)
F1CE 28               (        forth.asm):02533                 fcc     '('
F1CF F189             (        forth.asm):02534                 fdb     WORD
F1D1 C7               (        forth.asm):02535                 RFCS
F1D2 BDE70D           (        forth.asm):02536 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
F1D5 A680             (        forth.asm):02537 (4+1)   @lpar1  lda     ,x+
F1D7 270B             (        forth.asm):02538 (3)             beq     @lparx          Input stream exhausted before ) is matched
F1D9 8129             (        forth.asm):02539 (2)             cmpa    #')
F1DB 26F8             (        forth.asm):02540 (3)             bne     @lpar1
F1DD 1F10             (        forth.asm):02541 (4)             tfr     x,d             Just matched )
F1DF 931C             (        forth.asm):02542 (4)             subd    BSBFADR
F1E1 DD22             (        forth.asm):02543 (4)             std     UTOIN           Update >IN
F1E3 39               (        forth.asm):02544 (4)             rts
F1E4 C60C             (        forth.asm):02545 (2)     @lparx  ldb     #12             Missing delimiter
F1E6 BDE640           (        forth.asm):02546 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02547         
F1E9 06               (        forth.asm):02548         SOURCE  fcb     6               ANSI (Core)
F1EA 534F55524345     (        forth.asm):02549                 fcc     'SOURCE'        ( -- baseaddr charcount )
F1F0 F1CD             (        forth.asm):02550                 fdb     LPAR
F1F2 C7               (        forth.asm):02551                 RFCS
F1F3 9E1C             (        forth.asm):02552 (4)             ldx     BSBFADR
F1F5 BDE6B9           (        forth.asm):02553 (7)             jsr     NPUSH
F1F8 8E0400           (        forth.asm):02554 (3)             ldx     #BLKSIZ         Non-zero block size
F1FB DC24             (        forth.asm):02555 (4)             ldd     UBLK
F1FD 2605             (        forth.asm):02556 (3)             bne     @srcdon         Current BLK is NZ
F1FF 4F               (        forth.asm):02557 (1)             clra
F200 D629             (        forth.asm):02558 (3)             ldb     CMDLNSZ         Character count entered through GETS in INTERP
F202 1F01             (        forth.asm):02559 (4)             tfr     d,x
F204 7EE6B9           (        forth.asm):02560 (3)     @srcdon jmp     NPUSH
                      (        forth.asm):02561         
                      (        forth.asm):02562         * This is a straightforward implementation borrowed from GNU Forth 'see \':
                      (        forth.asm):02563         * : \
                      (        forth.asm):02564         *   BLK @
                      (        forth.asm):02565         *   IF     >IN @ C/L / 1+ C/L * >IN ! EXIT
                      (        forth.asm):02566         *   THEN
                      (        forth.asm):02567         *   SOURCE >IN ! DROP ; IMMEDIATE
                      (        forth.asm):02568         * However since C/L (number of columns per line) is 64 (a power of 2), things
                      (        forth.asm):02569         * can be coded in a more compact manner as: >IN @ 63 COM AND 64 + >IN !
F207 81               (        forth.asm):02570         BKSLSH  fcb     $81             ANSI (Block Ext)
F208 5C               (        forth.asm):02571                 fcb     $5C             \ ( -- )
F209 F1E9             (        forth.asm):02572                 fdb     SOURCE
F20B C7               (        forth.asm):02573                 RFCS
F20C DC24             (        forth.asm):02574 (4)             ldd     UBLK            BLK @ to D
F20E 270B             (        forth.asm):02575 (3)             beq     @comser         We operate from block 0: the console
F210 DC22             (        forth.asm):02576 (4)             ldd     UTOIN           >IN @
F212 C4C0             (        forth.asm):02577 (2)             andb    #^$3F           Point to the beginning of the line
F214 CB40             (        forth.asm):02578 (2)             addb    #$40            next line
F216 8900             (        forth.asm):02579 (2)             adca    #0              Propagate potential carry from LSB
F218 DD22             (        forth.asm):02580 (4)             std     UTOIN           >IN !
F21A 39               (        forth.asm):02581 (4)             rts                     EXIT
F21B 8DD6             (        forth.asm):02582         @comser RFXT    bsr,SOURCE+9    XT for SOURCE
F21D BDE6C7           (        forth.asm):02583 (7)             jsr     NPOP
F220 9F22             (        forth.asm):02584 (4)             stx     UTOIN           >IN !
F222 7EFC01           (        forth.asm):02585                 RFXT    jmp,DROP+7      XT for DROP
                      (        forth.asm):02586                 ENDC
                      (        forth.asm):02587         
F225 82               (        forth.asm):02588         PSTR    fcb     $82             79-STANDARD (REQ133)
F226 2E22             (        forth.asm):02589                 fcc     '."'
F228 F207             (        forth.asm):02590                 fdb     BKSLSH
F22A C7               (        forth.asm):02591                 RFCS
F22B 8D13             (        forth.asm):02592                 RFXT    bsr,SQUOTE+5    XT for S"
F22D 0D21             (        forth.asm):02593 (4)             tst     USTATE+1
F22F 2603             (        forth.asm):02594 (3)             bne     @pstcmp
F231 7EF5E7           (        forth.asm):02595                 RFXT    jmp,TYPE+7
F234 8EF5E7           (        forth.asm):02596         @pstcmp RFXT    ldx,#TYPE+7
F237 7EE14D           (        forth.asm):02597 (3)             jmp     EMXASXT
                      (        forth.asm):02598         
F23A 82               (        forth.asm):02599         SQUOTE  fcb     $82             ANSI (Core)
F23B 5322             (        forth.asm):02600                 fcc     'S"'
F23D F225             (        forth.asm):02601                 fdb     PSTR
F23F C7               (        forth.asm):02602                 RFCS
F240 0D21             (        forth.asm):02603 (4)             tst     USTATE+1
F242 260C             (        forth.asm):02604 (3)             bne     @sqcmp
F244 8E0022           (        forth.asm):02605 (3)             ldx     #'"             We are inperpreting
F247 BDE6B9           (        forth.asm):02606 (7)             jsr     NPUSH
F24A BDF191           (        forth.asm):02607                 RFXT    jsr,WORD+7      XT for WORD
F24D 7EF606           (        forth.asm):02608                 RFXT    jmp,COUNT+8     XT for COUNT
F250 109E08           (        forth.asm):02609 (5)     @sqcmp  ldy     DICEND          We are compiling
F253 867E             (        forth.asm):02610 (2)             lda     #JMPOPC         JMP extended
F255 A7A0             (        forth.asm):02611 (4+1)           sta     ,y+
F257 3420             (        forth.asm):02612 (4+2)           pshs    y
F259 3122             (        forth.asm):02613 (4+1)           leay    2,y             2 ALLOT
F25B 109F08           (        forth.asm):02614 (5)             sty     DICEND
F25E 8E0022           (        forth.asm):02615 (3)             ldx     #'"
F261 BDE6B9           (        forth.asm):02616 (7)             jsr     NPUSH
F264 BDF191           (        forth.asm):02617                 RFXT    jsr,WORD+7      XT for WORD
F267 BDE6C7           (        forth.asm):02618 (7)             jsr     NPOP
F26A 4F               (        forth.asm):02619 (1)             clra
F26B E684             (        forth.asm):02620 (4+0)           ldb     ,x              C@
F26D 3001             (        forth.asm):02621 (4+1)           leax    1,x             1+. Skip the byte count (X has HERE)
F26F 308B             (        forth.asm):02622 (4+2)           leax    d,x             Skip string length material
F271 3520             (        forth.asm):02623 (4+2)           puls    y
F273 AFA4             (        forth.asm):02624 (5+0)           stx     ,y              Install jump address
F275 3122             (        forth.asm):02625 (4+1)           leay    2,y             Counted string base address to Y
F277 868E             (        forth.asm):02626 (2)             lda     #LDXOPC
F279 A780             (        forth.asm):02627 (4+1)           sta     ,x+
F27B 10AF81           (        forth.asm):02628 (6+2)           sty     ,x++
F27E 9F08             (        forth.asm):02629 (4)             stx     DICEND          Update HERE
F280 8EE6B9           (        forth.asm):02630 (3)             ldx     #NPUSH
F283 BDE14D           (        forth.asm):02631 (7)             jsr     EMXASXT
F286 8EF606           (        forth.asm):02632                 RFXT    ldx,#COUNT+8    XT for COUNT
F289 7EE14D           (        forth.asm):02633 (3)             jmp     EMXASXT
                      (        forth.asm):02634         
                      (        forth.asm):02635         * Transactional behaviour is guaranteed here. What this means is that the
                      (        forth.asm):02636         * operation will preserve the data stack contents, should insufficient
                      (        forth.asm):02637         * parameters be supplied. It is a very desirable feature (for debugging
                      (        forth.asm):02638         * purposes) which will be generalized to a number of other words. As an
                      (        forth.asm):02639         * aside, it also allows us to access the data stack as directly indexed
                      (        forth.asm):02640         * through the 6309 U register, resulting in better performance.
F28C 02               (        forth.asm):02641         DPLUS   fcb     2               79-STANDARD (REQ241)
F28D 442B             (        forth.asm):02642                 fcc     'D+'            ( d2 d1 -- d1+d2--signed )
F28F F23A             (        forth.asm):02643                 fdb     SQUOTE          Initially ( L2 H2 L1 H1)
F291 C7               (        forth.asm):02644                 RFCS
F292 CC0242BDE336     (        forth.asm):02645                 MINDREQ 4               Make sure we have at least 4 cells stacked up
                      (        forth.asm):02646         * At this point sufficient stack depth has been assessed. Let's rock and roll!
F298 BDFC7F           (        forth.asm):02647         @stkok  RFXT    jsr,ROT+6       XT for ROT ( L2 L1 H1 H2 )
F29B EC44             (        forth.asm):02648 (5+1)           ldd     4,u             L1
F29D E346             (        forth.asm):02649 (5+1)           addd    6,u             L2
F29F ED46             (        forth.asm):02650 (5+1)           std     6,u             d1+d2 least significant cell
F2A1 EC42             (        forth.asm):02651 (5+1)           ldd     2,u             H1
F2A3 10890000         (        forth.asm):02652 (4)             adcd    #0              Carry from least significant cell addition
F2A7 E3C4             (        forth.asm):02653 (5+0)           addd    ,u              H2
F2A9 ED44             (        forth.asm):02654 (5+1)           std     4,u             d1+d2 most significant cell
F2AB 3344             (        forth.asm):02655 (4+1)           leau    4,u             Drop 2 cells from the data stack
F2AD 39               (        forth.asm):02656 (4)             rts
                      (        forth.asm):02657         
F2AE 07               (        forth.asm):02658         DNEG    fcb     7               79-STANDARD (REQ245)
F2AF 444E4547415445   (        forth.asm):02659                 fcc     'DNEGATE'
F2B6 F28C             (        forth.asm):02660                 fdb     DPLUS
F2B8 C7               (        forth.asm):02661                 RFCS
F2B9 CC0246BDE336     (        forth.asm):02662                 MINDREQ 2               We need at least 2 cells stacked up
F2BF 10A642           (        forth.asm):02663 (6+1)           ldw     2,u             Least significant cell
F2C2 1053             (        forth.asm):02664 (2)             comw
F2C4 ECC4             (        forth.asm):02665 (5+0)           ldd     ,u              Most significant cell
F2C6 1043             (        forth.asm):02666 (2)             comd
F2C8 108B0001         (        forth.asm):02667 (4)             addw    #1
F2CC 10890000         (        forth.asm):02668 (4)             adcd    #0              Propagate carry flag
F2D0 10EDC4           (        forth.asm):02669 (8+0)           stq     ,u              Store the result back to the data stack
F2D3 39               (        forth.asm):02670 (4)             rts
                      (        forth.asm):02671         
F2D4 03               (        forth.asm):02672         DZEQ    fcb     3               79-STANDARD (double number extension)
F2D5 44303D           (        forth.asm):02673                 fcc     'D0='           ( d -- flag )
F2D8 F2AE             (        forth.asm):02674                 fdb     DNEG
F2DA C7               (        forth.asm):02675                 RFCS
F2DB BDED3F           (        forth.asm):02676                 RFXT    jsr,OR+5        XT for OR
F2DE 7EEDBF           (        forth.asm):02677                 RFXT    jmp,NULP+5      XT for 0=
                      (        forth.asm):02678         
                      (        forth.asm):02679         * In essence:
                      (        forth.asm):02680         * : D< DNEGATE D+ NIP [ HEX ] 8000 AND IF 1 ELSE 0 THEN ;
F2E1 02               (        forth.asm):02681         DLESS   fcb     2               79-STANDARD (REQ244)
F2E2 443C             (        forth.asm):02682                 fcc     'D<'            ( d1 d2 -- flag )
F2E4 F2D4             (        forth.asm):02683                 fdb     DZEQ
F2E6 C7               (        forth.asm):02684                 RFCS
F2E7 8DD0             (        forth.asm):02685                 RFXT    bsr,DNEG+10     XT for DNEGATE
F2E9 8DA7             (        forth.asm):02686                 RFXT    bsr,DPLUS+5     XT for D+
F2EB 4F               (        forth.asm):02687 (1)             clra
F2EC A742             (        forth.asm):02688 (4+1)           sta     2,u
F2EE E6C4             (        forth.asm):02689 (4+0)           ldb     ,u
F2F0 2D05             (        forth.asm):02690 (3)             blt     @setto1
F2F2 A743             (        forth.asm):02691 (4+1)   @setrv  sta     3,u
F2F4 3342             (        forth.asm):02692 (4+1)           leau    2,u
F2F6 39               (        forth.asm):02693 (4)             rts
F2F7 4C               (        forth.asm):02694 (1)     @setto1 inca
F2F8 20F8             (        forth.asm):02695 (3)             bra     @setrv
                      (        forth.asm):02696         
F2FA 05               (        forth.asm):02697         TWOOVER fcb     5               79-STANDARD (double number extension)
F2FB 324F564552       (        forth.asm):02698                 fcc     '2OVER'         ( d1 d2 -- d1 d2 d1 )
F300 F2E1             (        forth.asm):02699                 fdb     DLESS
F302 C7               (        forth.asm):02700                 RFCS
F303 CC0242BDE336     (        forth.asm):02701                 MINDREQ 4
F309 10EC44           (        forth.asm):02702 (8+1)           ldq     4,u             D:W has MSC:LSC of D1
F30C 1F61             (        forth.asm):02703 (4)             tfr     w,x
F30E BDE6B9           (        forth.asm):02704 (7)             jsr     NPUSH
F311 1F01             (        forth.asm):02705 (4)             tfr     d,x
F313 7EE6B9           (        forth.asm):02706 (3)             jmp     NPUSH
                      (        forth.asm):02707         
F316 05               (        forth.asm):02708         TWOSWAP fcb     5               79-STANDARD (double number extension)
F317 3253574150       (        forth.asm):02709                 fcc     '2SWAP'         ( d1 d2 -- d2 d1 )
F31C F2FA             (        forth.asm):02710                 fdb     TWOOVER
F31E C7               (        forth.asm):02711                 RFCS
F31F CC0242BDE336     (        forth.asm):02712                 MINDREQ 4               At least four cells must be stacked up
F325 AE44             (        forth.asm):02713 (5+1)           ldx     4,u             D1 most significant cell
F327 10AE46           (        forth.asm):02714 (6+1)           ldy     6,u             D1 least significant cell
F32A 10ECC4           (        forth.asm):02715 (8+0)           ldq     ,u              D:W has MSC:LSC of D2
F32D 10ED44           (        forth.asm):02716 (8+1)           stq     4,u
F330 AFC4             (        forth.asm):02717 (5+0)           stx     ,u
F332 10AF42           (        forth.asm):02718 (6+1)           sty     2,u
F335 39               (        forth.asm):02719 (4)             rts
                      (        forth.asm):02720         
F336 05               (        forth.asm):02721         TWODROP fcb     5               79-STANDARD (double number extension)
F337 3244524F50       (        forth.asm):02722                 fcc     '2DROP'         ( d -- )
F33C F316             (        forth.asm):02723                 fdb     TWOSWAP
F33E C7               (        forth.asm):02724                 RFCS
F33F CC0246BDE336     (        forth.asm):02725                 MINDREQ 2               At least two cells must be stacked up
F345 3344             (        forth.asm):02726 (4+1)           leau    4,u
F347 39               (        forth.asm):02727 (4)             rts
                      (        forth.asm):02728         
F348 04               (        forth.asm):02729         TWODUP  fcb     4               79-STANDARD (double number extension)
F349 32445550         (        forth.asm):02730                 fcc     '2DUP'          ( double -- double double )
F34D F336             (        forth.asm):02731                 fdb     TWODROP
F34F C7               (        forth.asm):02732                 RFCS
F350 CC0246BDE336     (        forth.asm):02733                 MINDREQ 2
F356 10ECC4           (        forth.asm):02734 (8+0)           ldq     ,u              D:W has MSC:LSC of DOUBLE
F359 1F61             (        forth.asm):02735 (4)             tfr     w,x
F35B BDE6B9           (        forth.asm):02736 (7)             jsr     NPUSH
F35E 1F01             (        forth.asm):02737 (4)             tfr     d,x
F360 7EE6B9           (        forth.asm):02738 (3)             jmp     NPUSH
                      (        forth.asm):02739         
F363 02               (        forth.asm):02740         TWOSTOR fcb     2               79-STANDARD (double number extension)
F364 3221             (        forth.asm):02741                 fcc     '2!'            ( double addr -- )
F366 F348             (        forth.asm):02742                 fdb     TWODUP
F368 C7               (        forth.asm):02743                 RFCS
F369 CC0244BDE336     (        forth.asm):02744                 MINDREQ 3
F36F 10EC42           (        forth.asm):02745 (8+1)           ldq     2,u             DOUBLE to D:W
F372 10EDD4           (        forth.asm):02746 (8+3)           stq     [,u]            Store DOUBLE to ADDR
F375 3346             (        forth.asm):02747 (4+1)           leau    6,u             Drop three cells from the user stack
F377 39               (        forth.asm):02748 (4)             rts
                      (        forth.asm):02749         
F378 02               (        forth.asm):02750         TWOFTCH fcb     2               79-STANDARD (double number extension)
F379 3240             (        forth.asm):02751                 fcc     '2@'            ( dbladdr -- double )
F37B F363             (        forth.asm):02752                 fdb     TWOSTOR
F37D C7               (        forth.asm):02753                 RFCS
F37E CC0248BDE336     (        forth.asm):02754                 MINDREQ 1
F384 10ECD4           (        forth.asm):02755 (8+3)           ldq     [,u]            D:W has MSC:LSC of DBLADDR @
F387 10A7C4           (        forth.asm):02756 (6+0)           stw     ,u              Least significant cell stacked in place
F38A 1F01             (        forth.asm):02757 (4)             tfr     d,x             Most significant cell goes through standard push
F38C 7EE6B9           (        forth.asm):02758 (3)             jmp     NPUSH
                      (        forth.asm):02759         
                      (        forth.asm):02760                 IFNE    HVCONV
F38F 07               (        forth.asm):02761         CONVERT fcb     7               79-STANDARD (REQ195)
F390 434F4E56455254   (        forth.asm):02762                 fcc     'CONVERT'       ( d1 addr1 -- d2 addr2 )
F397 F378             (        forth.asm):02763                 fdb     TWOFTCH
F399 C7               (        forth.asm):02764                 RFCS
F39A CC0244BDE336     (        forth.asm):02765                 MINDREQ 3               At least 3 cells need to be stacked up on entry
F3A0 BDE2CC           (        forth.asm):02766 (7)             jsr     CKBASE          Check for supported BASE. No return if not
F3A3 AEC4             (        forth.asm):02767 (5+0)           ldx     ,u              ADDR1 to X
F3A5 3001             (        forth.asm):02768 (4+1)   @cvloop leax    1,x
F3A7 E684             (        forth.asm):02769 (4+0)           ldb     ,x
                      (        forth.asm):02770         * B has the ASCII representation of something that may or may not be a valid
                      (        forth.asm):02771         * digit, expressed in BASE (alias (byte)UBASE+1). If it does, multiply D1 by
                      (        forth.asm):02772         * BASE and add that to D1 (aka D2 on exit). Then add DIGIT on the top of it.
F3A9 C030             (        forth.asm):02773 (2)             subb    #'0             Minimal ASCII value condition met?
F3AB 255B             (        forth.asm):02774 (3)             blo     @cvoor          No. Out of range. ,X cannot be a valid digit
F3AD C10A             (        forth.asm):02775 (2)             cmpb    #10
F3AF 2510             (        forth.asm):02776 (3)             blo     @cvnolt         No letter in potential BASE
                      (        forth.asm):02777                 IFEQ    CSSNTVE
F3B1 C111             (        forth.asm):02778 (2)             cmpb    #'A-'0
F3B3 2553             (        forth.asm):02779 (3)             blo     @cvoor          Greater than 9 but lower than A
F3B5 C131             (        forth.asm):02780 (2)             cmpb    #'a-'0
F3B7 2506             (        forth.asm):02781 (3)             blo     @cvisuc         Upper case already
F3B9 C14A             (        forth.asm):02782 (2)             cmpb    #'z-'0
F3BB 224B             (        forth.asm):02783 (3)             bhi     @cvoor          Definitely out of range
F3BD C020             (        forth.asm):02784 (2)             subb    #'a-'A          To upper case
                      (        forth.asm):02785                 ENDC
F3BF C007             (        forth.asm):02786 (2)     @cvisuc subb    #'A-':          A-Z to number
F3C1 D11F             (        forth.asm):02787 (3)     @cvnolt cmpb    UBASE+1         B has a digit. Make sure it's less than BASE
F3C3 2443             (        forth.asm):02788 (3)             bhs     @cvoor          Number under scrutiny is >= BASE
F3C5 3278             (        forth.asm):02789 (4+1)           leas    -8,s            Allocate scratch space
F3C7 4F               (        forth.asm):02790 (1)             clra
F3C8 3406             (        forth.asm):02791 (4+2)           pshs    d
                      (        forth.asm):02792         * System and user stack structures are as follows:
                      (        forth.asm):02793         * ,s    current digit (1 cell)
                      (        forth.asm):02794         * 2,s   D0*B (1 cell)
                      (        forth.asm):02795         * 4,s   D1*B (1 cell)
                      (        forth.asm):02796         * 6,s   D2*B (1 cell)
                      (        forth.asm):02797         * 8,s   D3*B (1 cell)
                      (        forth.asm):02798         * 2,u   D1H most significant cell
                      (        forth.asm):02799         * 4,u   D1L least significant cell
F3CA 1F37             (        forth.asm):02800 (4)             tfr     u,v             Backup U
F3CC 3346             (        forth.asm):02801 (4+1)           leau    6,u             Point one byte after D1LL
F3CE 3162             (        forth.asm):02802 (4+1)           leay    2,s             Point to D0*B
F3D0 118604           (        forth.asm):02803 (3)             lde     #4              Four products to go through
F3D3 A6C2             (        forth.asm):02804 (4+1)   @cvmul  lda     ,-u
F3D5 D61F             (        forth.asm):02805 (3)             ldb     UBASE+1
F3D7 3D               (        forth.asm):02806 (10)            mul
F3D8 EDA1             (        forth.asm):02807 (5+2)           std     ,y++
F3DA 114A             (        forth.asm):02808 (2)             dece
F3DC 26F5             (        forth.asm):02809 (3)             bne     @cvmul
F3DE 1F73             (        forth.asm):02810 (4)             tfr     v,u             Restore U
F3E0 A663             (        forth.asm):02811 (4+1)           lda     3,s
F3E2 A745             (        forth.asm):02812 (4+1)           sta     5,u             D1LL
F3E4 A662             (        forth.asm):02813 (4+1)           lda     2,s
F3E6 AB65             (        forth.asm):02814 (4+1)           adda    5,s
F3E8 A744             (        forth.asm):02815 (4+1)           sta     4,u             D1LH
F3EA A664             (        forth.asm):02816 (4+1)           lda     4,s
F3EC A967             (        forth.asm):02817 (4+1)           adca    7,s
F3EE A743             (        forth.asm):02818 (4+1)           sta     3,u             D1HL
F3F0 A666             (        forth.asm):02819 (4+1)           lda     6,s
F3F2 A969             (        forth.asm):02820 (4+1)           adca    9,s
F3F4 A742             (        forth.asm):02821 (4+1)           sta     2,u             D1HH
F3F6 EC44             (        forth.asm):02822 (5+1)           ldd     4,u             D1L
F3F8 E3E4             (        forth.asm):02823 (5+0)           addd    ,s              DIGIT
F3FA ED44             (        forth.asm):02824 (5+1)           std     4,u
F3FC EC42             (        forth.asm):02825 (5+1)           ldd     2,u             D1H
F3FE 10890000         (        forth.asm):02826 (4)             adcd    #0              Potential carry from lower cell
F402 ED42             (        forth.asm):02827 (5+1)           std     2,u
F404 326A             (        forth.asm):02828 (4+1)           leas    10,s            Release scratch space
F406 209D             (        forth.asm):02829 (3)             bra     @cvloop         Here we go again
F408 AFC4             (        forth.asm):02830 (5+0)   @cvoor  stx     ,u              Update ADDR2
F40A 39               (        forth.asm):02831 (4)             rts
                      (        forth.asm):02832                 ENDC
                      (        forth.asm):02833         
F40B 02               (        forth.asm):02834         CVTE    fcb     2
F40C 233E             (        forth.asm):02835                 fcc     '#>'
                      (        forth.asm):02836                 IFNE    HVCONV
F40E F38F             (        forth.asm):02837                 fdb     CONVERT
                      (        forth.asm):02838                 ELSE
                      (        forth.asm):02839                 fdb     TWOFTCH
                      (        forth.asm):02840                 ENDC
F410 C7               (        forth.asm):02841                 RFCS
F411 BDE6C7           (        forth.asm):02842 (7)             jsr     NPOP
F414 BDE6C7           (        forth.asm):02843 (7)             jsr     NPOP            Drop 2 cells from the data stack
F417 8E0139           (        forth.asm):02844 (3)             ldx     #PADBUF
F41A 3610             (        forth.asm):02845                 UCNPUSH
F41C BDE1A7           (        forth.asm):02846 (7)             jsr     SLEN
F41F 1F61             (        forth.asm):02847 (4)             tfr     w,x
F421 3610             (        forth.asm):02848                 UCNPUSH
F423 39               (        forth.asm):02849 (4)             rts
                      (        forth.asm):02850         
F424 04               (        forth.asm):02851         SIGN    fcb     4
F425 5349474E         (        forth.asm):02852                 fcc     'SIGN'
F429 F40B             (        forth.asm):02853                 fdb     CVTE
F42B C7               (        forth.asm):02854                 RFCS
F42C BDE6C7           (        forth.asm):02855 (7)             jsr     NPOP
F42F 1F10             (        forth.asm):02856 (4)             tfr     x,d
F431 104D             (        forth.asm):02857 (2)             tstd
F433 2C05             (        forth.asm):02858 (3)             bge     @sign1
F435 C62D             (        forth.asm):02859 (2)             ldb     #'-
F437 7EF4F4           (        forth.asm):02860 (3)             jmp     INSBPAD
F43A 39               (        forth.asm):02861 (4)     @sign1  rts
                      (        forth.asm):02862         
F43B 04               (        forth.asm):02863         HOLD    fcb     4
F43C 484F4C44         (        forth.asm):02864                 fcc     'HOLD'
F440 F424             (        forth.asm):02865                 fdb     SIGN
F442 C7               (        forth.asm):02866                 RFCS
F443 BDE6C7           (        forth.asm):02867 (7)             jsr     NPOP
F446 1F10             (        forth.asm):02868 (4)             tfr     x,d
F448 7EF4F4           (        forth.asm):02869 (3)             jmp     INSBPAD         B is inserted at the beginning of PAD.
                      (        forth.asm):02870         
F44B 02               (        forth.asm):02871         SHARPS  fcb     2
F44C 2353             (        forth.asm):02872                 fcc     '#S'
F44E F43B             (        forth.asm):02873                 fdb     HOLD
F450 C7               (        forth.asm):02874                 RFCS
F451 8601             (        forth.asm):02875 (2)             lda     #1
F453 972F             (        forth.asm):02876 (3)             sta     CVTFCN          CVT function #1 is #S
F455 2007             (        forth.asm):02877 (3)             bra     CVT0
                      (        forth.asm):02878         
                      (        forth.asm):02879         * Unsigned double on the top of the data stack gets divided by BASE.
                      (        forth.asm):02880         * The division algorithm implemented here is the binary long division.
                      (        forth.asm):02881         * See https://en.wikipedia.org/wiki/Division_algorithm for more information.
                      (        forth.asm):02882         * Remainder (converted to a character) gets prepended to PAD.
F457 01               (        forth.asm):02883         CVT     fcb     1
F458 23               (        forth.asm):02884                 fcc     '#'
F459 F44B             (        forth.asm):02885                 fdb     SHARPS
F45B C7               (        forth.asm):02886                 RFCS
F45C 0F2F             (        forth.asm):02887 (5)             clr     CVTFCN          CVT function 0 is #
F45E BDE6C7           (        forth.asm):02888 (7)     CVT0    jsr     NPOP
F461 1F16             (        forth.asm):02889 (4)             tfr     x,w
F463 BDE6C7           (        forth.asm):02890 (7)             jsr     NPOP
F466 3410             (        forth.asm):02891 (4+2)   CVT1    pshs    x               Numerator least significant cell
F468 1038             (        forth.asm):02892 (6)             pshsw                   Numerator most significant cell
F46A 104F             (        forth.asm):02893 (2)             clrd
F46C 3406             (        forth.asm):02894 (4+2)           pshs    d               Quotient low
F46E 3406             (        forth.asm):02895 (4+2)           pshs    d               Quotient high
F470 3406             (        forth.asm):02896 (4+2)           pshs    d               Bitmask low
F472 10868000         (        forth.asm):02897 (4)             ldw     #$8000          Bitmask high
F476 1038             (        forth.asm):02898 (6)             pshsw
F478 3406             (        forth.asm):02899 (4+2)           pshs    d
                      (        forth.asm):02900         * Stack structure:
                      (        forth.asm):02901         * 1,s   remainder               8 bits (high order byte is zero and unused)
                      (        forth.asm):02902         * 2,s   Bitmask high            16 bits
                      (        forth.asm):02903         * 4,s   Bitmask low             16 bits
                      (        forth.asm):02904         * 6,s   Quotient high           16 bits
                      (        forth.asm):02905         * 8,s   Quotient low            16 bits
                      (        forth.asm):02906         * 10,s  Numerator high          16 bits
                      (        forth.asm):02907         * 12,s  Numerator low           16 bits
                      (        forth.asm):02908         * Denominator is at UBASE+1     8 bits
F47A 11C61F           (        forth.asm):02909 (3)             ldf     #31             32 bits to go
F47D 6861             (        forth.asm):02910 (6+1)   @cvt1   lsl     1,s             R := R << 1
                      (        forth.asm):02911         * We need to extract bit <f> from the numerator.
F47F 306A             (        forth.asm):02912 (4+1)           leax    10,s            Numerator MSB address
F481 1FF8             (        forth.asm):02913 (4)             tfr     f,a             Not to alter the stack structure
F483 44               (        forth.asm):02914 (1)             lsra                    OffsetX: 3 - F >> 3
F484 44               (        forth.asm):02915 (1)             lsra
F485 44               (        forth.asm):02916 (1)             lsra
F486 C603             (        forth.asm):02917 (2)             ldb     #3
F488 103289           (        forth.asm):02918 (4)             subr    a,b
F48B 3A               (        forth.asm):02919 (1)             abx
F48C A684             (        forth.asm):02920 (4+0)           lda     ,x
F48E 1FF9             (        forth.asm):02921 (4)             tfr     f,b             Bitno: F & 7
F490 C407             (        forth.asm):02922 (2)             andb    #7
                      (        forth.asm):02923         * At this point, A has the data we're interested in. B has the bit number.
F492 5D               (        forth.asm):02924 (1)     @cvtex  tstb
F493 2704             (        forth.asm):02925 (3)             beq     @cvtfnd         Bit 0 of A has the data
F495 44               (        forth.asm):02926 (1)             lsra
F496 5A               (        forth.asm):02927 (1)             decb
F497 20F9             (        forth.asm):02928 (3)             bra     @cvtex
F499 8401             (        forth.asm):02929 (2)     @cvtfnd anda    #1
F49B AA61             (        forth.asm):02930 (4+1)           ora     1,s             R(0) := N(i)
F49D A761             (        forth.asm):02931 (4+1)           sta     1,s             Update the remainder
F49F 911F             (        forth.asm):02932 (3)             cmpa    UBASE+1
F4A1 2512             (        forth.asm):02933 (3)             blo     @cvt5
F4A3 901F             (        forth.asm):02934 (3)             suba    UBASE+1
F4A5 A761             (        forth.asm):02935 (4+1)           sta     1,s             R := R - D
                      (        forth.asm):02936         * Q(i) := 1 (use the bitmask).
F4A7 EC66             (        forth.asm):02937 (5+1)           ldd     6,s             Quotient high
F4A9 10AA62           (        forth.asm):02938 (6+1)           ord     2,s             Bitmask high
F4AC ED66             (        forth.asm):02939 (5+1)           std     6,s
F4AE EC68             (        forth.asm):02940 (5+1)           ldd     8,s             Quotient low
F4B0 10AA64           (        forth.asm):02941 (6+1)           ord     4,s             Bitmask low
F4B3 ED68             (        forth.asm):02942 (5+1)           std     8,s
                      (        forth.asm):02943         * Shift the bitmask 1 bit right.
F4B5 EC62             (        forth.asm):02944 (5+1)   @cvt5   ldd     2,s
F4B7 1044             (        forth.asm):02945 (2)             lsrd
F4B9 ED62             (        forth.asm):02946 (5+1)           std     2,s
F4BB EC64             (        forth.asm):02947 (5+1)           ldd     4,s
F4BD 1046             (        forth.asm):02948 (2)             rord
F4BF ED64             (        forth.asm):02949 (5+1)           std     4,s
F4C1 115A             (        forth.asm):02950 (2)             decf
F4C3 2CB8             (        forth.asm):02951 (3)             bge     @cvt1
                      (        forth.asm):02952         * Convert the remainder to a digit expressed in BASE.
F4C5 E661             (        forth.asm):02953 (4+1)           ldb     1,s
F4C7 8630             (        forth.asm):02954 (2)             lda     #'0
F4C9 C10A             (        forth.asm):02955 (2)             cmpb    #10             B has the digit we want converted to BASE
F4CB 2502             (        forth.asm):02956 (3)             bcs     @cvtdgt
F4CD 8637             (        forth.asm):02957 (2)             lda     #'A-10
F4CF 103089           (        forth.asm):02958 (4)     @cvtdgt addr    a,b
F4D2 8D20             (        forth.asm):02959 (6)             bsr     INSBPAD         Prepend B to the string currently in PAD
F4D4 0D2F             (        forth.asm):02960 (4)             tst     CVTFCN
F4D6 2711             (        forth.asm):02961 (3)             beq     @cvtend         Function 0 is straight #, i.e. we're done here
                      (        forth.asm):02962         * Function 1 is #S, we iterate unless the quotient is 0.
F4D8 EC68             (        forth.asm):02963 (5+1)           ldd     8,s
F4DA 10AA66           (        forth.asm):02964 (6+1)           ord     6,s
F4DD 270A             (        forth.asm):02965 (3)             beq     @cvtend
F4DF AE68             (        forth.asm):02966 (5+1)           ldx     8,s             New numerator low
F4E1 10A666           (        forth.asm):02967 (6+1)           ldw     6,s             New numerator high
F4E4 326E             (        forth.asm):02968 (4+1)           leas    14,s            Discard the stack frame
F4E6 7EF466           (        forth.asm):02969 (3)             jmp     CVT1            And go at it again
                      (        forth.asm):02970         * Push back the quotient on the data stack (low then high cell).
F4E9 AE68             (        forth.asm):02971 (5+1)   @cvtend ldx     8,s
F4EB 3610             (        forth.asm):02972                 UCNPUSH
F4ED AE66             (        forth.asm):02973 (5+1)           ldx     6,s
F4EF 326E             (        forth.asm):02974 (4+1)           leas    14,s            Discard the stack frame
F4F1 3610             (        forth.asm):02975                 UCNPUSH
F4F3 39               (        forth.asm):02976 (4)             rts
                      (        forth.asm):02977         
                      (        forth.asm):02978         * Insert the character in B in front of the string at PADBUF.
F4F4 8E0139           (        forth.asm):02979 (3)     INSBPAD ldx     #PADBUF
F4F7 BDE1A7           (        forth.asm):02980 (7)             jsr     SLEN
F4FA 103061           (        forth.asm):02981 (4)             addr    w,x             X points to the PAD string's NUL terminator
F4FD 105C             (        forth.asm):02982 (2)             incw                    Include the terminator
F4FF 3101             (        forth.asm):02983 (4+1)           leay    1,x
F501 113912           (        forth.asm):02984 (6+?)           tfm     x-,y-
F504 D739             (        forth.asm):02985 (3)             stb     PADBUF
F506 39               (        forth.asm):02986 (4)             rts
                      (        forth.asm):02987         
F507 02               (        forth.asm):02988         CVTB    fcb     2
F508 3C23             (        forth.asm):02989                 fcc     '<#'
F50A F457             (        forth.asm):02990                 fdb     CVT
F50C C7               (        forth.asm):02991                 RFCS
F50D BDE2CC           (        forth.asm):02992 (7)             jsr     CKBASE          Sanity check. BASE can be altered at any time
F510 0F39             (        forth.asm):02993 (5)             clr     PADBUF
F512 39               (        forth.asm):02994 (4)             rts
                      (        forth.asm):02995         
F513 01               (        forth.asm):02996         DOT     fcb     1               79-STANDARD (REQ193)
F514 2E               (        forth.asm):02997                 fcc     '.'
F515 F507             (        forth.asm):02998                 fdb     CVTB
F517 C7               (        forth.asm):02999                 RFCS
F518 8601             (        forth.asm):03000 (2)             lda     #1
F51A 9731             (        forth.asm):03001 (3)             sta     CVISSGN         Force a signed number conversion
F51C BDE6C7           (        forth.asm):03002 (7)     ptop0   jsr     NPOP
F51F BDE341           (        forth.asm):03003 (7)             jsr     CVNSTR
F522 8E039E           (        forth.asm):03004 (3)             ldx     #TBUFF
F525 8620             (        forth.asm):03005 (2)             lda     #SP
F527 A180             (        forth.asm):03006 (4+1)   @ptop1  cmpa    ,x+             Skip leading spaces
F529 27FC             (        forth.asm):03007 (3)             beq     @ptop1
F52B 301F             (        forth.asm):03008 (4+1)           leax    -1,x            Point to actual string start address
F52D BDE1DA           (        forth.asm):03009 (7)             jsr     PUTS
F530 7EE1B6           (        forth.asm):03010 (3)             jmp     PUTCH           Extra space after printing a number
                      (        forth.asm):03011         
F533 02               (        forth.asm):03012         UDOT    fcb     2               79-STANDARD (REQ106)
F534 552E             (        forth.asm):03013                 fcc     'U.'
F536 F513             (        forth.asm):03014                 fdb     DOT
F538 C7               (        forth.asm):03015                 RFCS
F539 0F31             (        forth.asm):03016 (5)             clr     CVISSGN         Conversion is unsigned
F53B 20DF             (        forth.asm):03017 (3)             bra     ptop0
                      (        forth.asm):03018         
F53D 02               (        forth.asm):03019         DOTR    fcb     2               79-STANDARD (REF)
F53E 2E52             (        forth.asm):03020                 fcc     '.R'
F540 F533             (        forth.asm):03021                 fdb     UDOT
F542 C7               (        forth.asm):03022                 RFCS
F543 8601             (        forth.asm):03023 (2)             lda     #1
F545 9731             (        forth.asm):03024 (3)             sta     CVISSGN
F547 BDE6C7           (        forth.asm):03025 (7)     DOTR0   jsr     NPOP
F54A 3410             (        forth.asm):03026 (4+2)           pshs    x               Length parameter value
F54C BDE6C7           (        forth.asm):03027 (7)             jsr     NPOP
F54F BDE341           (        forth.asm):03028 (7)             jsr     CVNSTR
F552 8E039E           (        forth.asm):03029 (3)             ldx     #TBUFF
F555 8620             (        forth.asm):03030 (2)             lda     #SP
F557 A180             (        forth.asm):03031 (4+1)   @dotr1  cmpa    ,x+
F559 27FC             (        forth.asm):03032 (3)             beq     @dotr1          Skip leading spaces
F55B 301F             (        forth.asm):03033 (4+1)           leax    -1,x
F55D BDE1A7           (        forth.asm):03034 (7)             jsr     SLEN            String length is returned in W
F560 3506             (        forth.asm):03035 (4+2)           puls    d
F562 1E06             (        forth.asm):03036 (5)             exg     d,w
F564 103206           (        forth.asm):03037 (4)             subr    d,w
F567 2F0D             (        forth.asm):03038 (3)             ble     @dotr3
F569 8620             (        forth.asm):03039 (2)             lda     #SP
F56B 105D             (        forth.asm):03040 (2)     @dotr2  tstw
F56D 2707             (        forth.asm):03041 (3)             beq     @dotr3
F56F BDE1B6           (        forth.asm):03042 (7)             jsr     PUTCH
F572 105A             (        forth.asm):03043 (2)             decw
F574 20F5             (        forth.asm):03044 (3)             bra     @dotr2
F576 7EE1DA           (        forth.asm):03045 (3)     @dotr3  jmp     PUTS
                      (        forth.asm):03046         
F579 03               (        forth.asm):03047         UDOTR   fcb     3               79-STANDARD (REF216)
F57A 552E52           (        forth.asm):03048                 fcc     'U.R'
F57D F53D             (        forth.asm):03049                 fdb     DOTR
F57F C7               (        forth.asm):03050                 RFCS
F580 0F31             (        forth.asm):03051 (5)             clr     CVISSGN
F582 20C3             (        forth.asm):03052 (3)             bra     DOTR0
                      (        forth.asm):03053         
F584 02               (        forth.asm):03054         BL      fcb     2               79-STANDARD (REF176)
F585 424C             (        forth.asm):03055                 fcc     'BL'
F587 F579             (        forth.asm):03056                 fdb     UDOTR
F589 C7               (        forth.asm):03057                 RFCS
F58A 8E0020           (        forth.asm):03058 (3)             ldx     #SP
F58D 7EE6B9           (        forth.asm):03059 (3)             jmp     NPUSH
                      (        forth.asm):03060         
F590 05               (        forth.asm):03061         SPACE   fcb     5               79-STANDARD (REQ232)
F591 5350414345       (        forth.asm):03062                 fcc     'SPACE'
F596 F584             (        forth.asm):03063                 fdb     BL
F598 C7               (        forth.asm):03064                 RFCS
F599 8620             (        forth.asm):03065 (2)             lda     #SP
F59B 7EE1B6           (        forth.asm):03066 (3)             jmp     PUTCH
                      (        forth.asm):03067         
F59E 06               (        forth.asm):03068         SPACES  fcb     6               79-STANDARD (REQ231)
F59F 535041434553     (        forth.asm):03069                 fcc     'SPACES'
F5A5 F590             (        forth.asm):03070                 fdb     SPACE
F5A7 C7               (        forth.asm):03071                 RFCS
F5A8 BDE6C7           (        forth.asm):03072 (7)             jsr     NPOP
F5AB 1F16             (        forth.asm):03073 (4)             tfr     x,w
F5AD 105D             (        forth.asm):03074 (2)             tstw
F5AF 2709             (        forth.asm):03075 (3)             beq     @spcs2
F5B1 8620             (        forth.asm):03076 (2)             lda     #SP
F5B3 BDE1B6           (        forth.asm):03077 (7)     @spcs1  jsr     PUTCH
F5B6 105A             (        forth.asm):03078 (2)             decw
F5B8 26F9             (        forth.asm):03079 (3)             bne     @spcs1
F5BA 39               (        forth.asm):03080 (4)     @spcs2  rts
                      (        forth.asm):03081         
F5BB 04               (        forth.asm):03082         PAGE    fcb     4               79-STANDARD (REF)
F5BC 50414745         (        forth.asm):03083                 fcc     'PAGE'
F5C0 F59E             (        forth.asm):03084                 fdb     SPACES
F5C2 C7               (        forth.asm):03085                 RFCS
F5C3 8EFE08           (        forth.asm):03086 (3)             ldx     #CSVT100
F5C6 7EE1DA           (        forth.asm):03087 (3)             jmp     PUTS
                      (        forth.asm):03088         
F5C9 02               (        forth.asm):03089         CRLF    fcb     2               79-STANDARD (REQ160)
F5CA 4352             (        forth.asm):03090                 fcc     'CR'
F5CC F5BB             (        forth.asm):03091                 fdb     PAGE
F5CE C7               (        forth.asm):03092                 RFCS
F5CF 7EE1E7           (        forth.asm):03093 (3)             jmp     PUTCR
                      (        forth.asm):03094         
F5D2 03               (        forth.asm):03095         PAD     fcb     3               79-STANDARD (REQ226)
F5D3 504144           (        forth.asm):03096                 fcc     'PAD'
F5D6 F5C9             (        forth.asm):03097                 fdb     CRLF
F5D8 C7               (        forth.asm):03098                 RFCS
F5D9 8E0139           (        forth.asm):03099 (3)             ldx     #PADBUF
F5DC 7EE6B9           (        forth.asm):03100 (3)             jmp     NPUSH
                      (        forth.asm):03101         
F5DF 04               (        forth.asm):03102         TYPE    fcb     4               79-STANDARD (REQ222)
F5E0 54595045         (        forth.asm):03103                 fcc     'TYPE'          ( addr bcount -- )
F5E4 F5D2             (        forth.asm):03104                 fdb     PAD
F5E6 C7               (        forth.asm):03105                 RFCS
F5E7 BDE6C7           (        forth.asm):03106 (7)             jsr     NPOP            Character count (signed)
F5EA 1F16             (        forth.asm):03107 (4)             tfr     x,w
F5EC BDE6C7           (        forth.asm):03108 (7)             jsr     NPOP            Buffer address
F5EF 105D             (        forth.asm):03109 (2)             tstw                    
F5F1 2E01             (        forth.asm):03110 (3)     @type0  bgt     @type1
F5F3 39               (        forth.asm):03111 (4)             rts
F5F4 A680             (        forth.asm):03112 (4+1)   @type1  lda     ,x+
F5F6 BDE1B6           (        forth.asm):03113 (7)             jsr     PUTCH
F5F9 105A             (        forth.asm):03114 (2)             decw
F5FB 20F4             (        forth.asm):03115 (3)             bra     @type0
                      (        forth.asm):03116         
F5FD 05               (        forth.asm):03117         COUNT   fcb     5               79-STANDARD (REQ159)
F5FE 434F554E54       (        forth.asm):03118                 fcc     'COUNT'
F603 F5DF             (        forth.asm):03119                 fdb     TYPE
F605 C7               (        forth.asm):03120                 RFCS
F606 BDE6C7           (        forth.asm):03121 (7)             jsr     NPOP
F609 E680             (        forth.asm):03122 (4+1)           ldb     ,x+
F60B 3610             (        forth.asm):03123                 UCNPUSH                 B is preserved
F60D 4F               (        forth.asm):03124 (1)             clra
F60E 1F01             (        forth.asm):03125 (4)             tfr     d,x
F610 7EE6B9           (        forth.asm):03126 (3)             jmp     NPUSH
                      (        forth.asm):03127         
F613 09               (        forth.asm):03128         DASHTR  fcb     9               79-STANDARD (REQ148)
F614 2D545241494C494E (        forth.asm):03129                 fcc     '-TRAILING'     ( addr n1 -- addr n2 )
     47
F61D F5FD             (        forth.asm):03130                 fdb     COUNT
F61F C7               (        forth.asm):03131                 RFCS
F620 BDE6C7           (        forth.asm):03132 (7)             jsr     NPOP            N1 to X
F623 1F10             (        forth.asm):03133 (4)             tfr     x,d             N1 to D
F625 BDE6C7           (        forth.asm):03134 (7)             jsr     NPOP            ADDR to X
F628 1F12             (        forth.asm):03135 (4)             tfr     x,y             Backup to I
F62A 104D             (        forth.asm):03136 (2)             tstd                    Input character count (N1)
F62C 2D1B             (        forth.asm):03137 (3)             blt     @invpar         Cannot be < 0
F62E 308B             (        forth.asm):03138 (4+2)           leax    d,x             X has ADDR+N1
F630 1F06             (        forth.asm):03139 (4)             tfr     d,w             W has N1
F632 105D             (        forth.asm):03140 (2)     @cknxtb tstw
F634 270A             (        forth.asm):03141 (3)             beq     @ckdone
F636 A682             (        forth.asm):03142 (4+1)           lda     ,-x
F638 105A             (        forth.asm):03143 (2)             decw
F63A 8120             (        forth.asm):03144 (2)             cmpa    #SP
F63C 27F4             (        forth.asm):03145 (3)             beq     @cknxtb         Iterate over to the previous byte
F63E 105C             (        forth.asm):03146 (2)             incw
F640 1F21             (        forth.asm):03147 (4)     @ckdone tfr     y,x
F642 3610             (        forth.asm):03148                 UCNPUSH                 String base address
F644 1F61             (        forth.asm):03149 (4)             tfr     w,x
F646 3610             (        forth.asm):03150                 UCNPUSH                 Updated character count
F648 39               (        forth.asm):03151 (4)             rts
F649 C60D             (        forth.asm):03152 (2)     @invpar ldb     #13             Invalid parameter
F64B BDE640           (        forth.asm):03153 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):03154         
F64E 06               (        forth.asm):03155         EXPECT  fcb     6               79-STANDARD (REQ189)
F64F 455850454354     (        forth.asm):03156                 fcc     'EXPECT'        ( addr count -- )
F655 F613             (        forth.asm):03157                 fdb     DASHTR
F657 C7               (        forth.asm):03158                 RFCS
F658 BDE6C7           (        forth.asm):03159 (7)     EXPCT1  jsr     NPOP
F65B 1F10             (        forth.asm):03160 (4)             tfr     x,d             Buffer length to B
F65D BDE6C7           (        forth.asm):03161 (7)             jsr     NPOP            Buffer address to X. B is preserved
F660 5D               (        forth.asm):03162 (1)             tstb
F661 2701             (        forth.asm):03163 (3)             beq     @expct1
F663 5C               (        forth.asm):03164 (1)             incb                    Account for the NUL terminator
F664 7EE1FD           (        forth.asm):03165 (3)     @expct1 jmp     GETS
                      (        forth.asm):03166         
F667 06               (        forth.asm):03167         ACCEPT  fcb     6               ANSI (Core)
F668 414343455054     (        forth.asm):03168                 fcc     'ACCEPT'
F66E F64E             (        forth.asm):03169                 fdb     EXPECT
F670 C7               (        forth.asm):03170                 RFCS
F671 8DE5             (        forth.asm):03171 (6)             bsr     EXPCT1
F673 4F               (        forth.asm):03172 (1)             clra
F674 3606             (        forth.asm):03173 (4+2)           pshu    d               This saves us "tfr d,x" and "UCNPUSH"
F676 39               (        forth.asm):03174 (4)             rts
                      (        forth.asm):03175         
F677 49               (        forth.asm):03176         TERPRET fcb     $49             79-STANDARD (REF) I make this compile time only
F678 494E544552505245 (        forth.asm):03177                 fcc     'INTERPRET'     ( -- )
     54
F681 F667             (        forth.asm):03178                 fdb     ACCEPT
F683 C7               (        forth.asm):03179                 RFCS
                      (        forth.asm):03180         * Obtain a base buffer address based on the value of BLK.
F684 DC24             (        forth.asm):03181 (4)             ldd     UBLK
F686 2605             (        forth.asm):03182 (3)             bne     @notser
F688 8E02CA           (        forth.asm):03183 (3)             ldx     #CMDBUF         Base buffer address for serial line input
F68B 200A             (        forth.asm):03184 (3)             bra     @rsolvd
                      (        forth.asm):03185         * BLK is NZ, map the block in memory.
F68D 1F01             (        forth.asm):03186 (4)     @notser tfr     d,x             Block number to X
F68F BDE6B9           (        forth.asm):03187 (7)             jsr     NPUSH
F692 BDE919           (        forth.asm):03188                 RFXT    jsr,BLOCK+8     XT for BLOCK. Map the block in
F695 3710             (        forth.asm):03189                 UCNPOP                  Retrieve buffer address (to X)
                      (        forth.asm):03190         * Note: >IN is supposed to have been set by the caller!
F697 9F1C             (        forth.asm):03191 (4)     @rsolvd stx     BSBFADR
F699 DC22             (        forth.asm):03192 (4)             ldd     UTOIN
F69B 103001           (        forth.asm):03193 (4)             addr    d,x
F69E 7EE0BF           (        forth.asm):03194 (3)             jmp     _INTERP         Finally invoke _INTERP.
                      (        forth.asm):03195         
F6A1 04               (        forth.asm):03196         LOAD    fcb     4               79-STANDARD (REQ202)
F6A2 4C4F4144         (        forth.asm):03197                 fcc     'LOAD'          ( blk -- )
F6A6 F677             (        forth.asm):03198                 fdb     TERPRET
F6A8 C7               (        forth.asm):03199                 RFCS
F6A9 BDE6C7           (        forth.asm):03200 (7)             jsr     NPOP
F6AC 1037C1           (        forth.asm):03201 (4)             cmpr    0,x
F6AF 2601             (        forth.asm):03202 (3)             bne     LOAD1
F6B1 39               (        forth.asm):03203 (4)             rts                     Block 0 is _not_ loadable
F6B2 3410             (        forth.asm):03204 (4+2)   LOAD1   pshs    x
F6B4 9E24             (        forth.asm):03205 (4)             ldx     UBLK
F6B6 BDE6D6           (        forth.asm):03206 (7)             jsr     RPUSH           Push BLK on the return stack
F6B9 9E22             (        forth.asm):03207 (4)             ldx     UTOIN
F6BB BDE6D6           (        forth.asm):03208 (7)             jsr     RPUSH           Push >IN on the return stack
F6BE 3510             (        forth.asm):03209 (4+2)           puls    x
F6C0 9F24             (        forth.asm):03210 (4)             stx     UBLK            Update BLK with the LOAD argument
F6C2 104F             (        forth.asm):03211 (2)             clrd
F6C4 DD22             (        forth.asm):03212 (4)             std     UTOIN           Clear >IN
                      (        forth.asm):03213         * Map the new BLK in, interpret code from there.
F6C6 8DBC             (        forth.asm):03214                 RFXT    bsr,TERPRET+12  XT for INTERPRET
F6C8 BDE6F4           (        forth.asm):03215 (7)             jsr     RPOP
F6CB 9F22             (        forth.asm):03216 (4)             stx     UTOIN           Restore >IN from the return stack
F6CD BDE6F4           (        forth.asm):03217 (7)             jsr     RPOP
F6D0 9F24             (        forth.asm):03218 (4)             stx     UBLK            Restore BLK from the return stack
F6D2 7EE70D           (        forth.asm):03219 (3)             jmp     BKIN2PT         Map BLK in (if needed) and update BSBFADR
                      (        forth.asm):03220         
F6D5 04               (        forth.asm):03221         THRU    fcb     4               79-STANDARD (REF)
F6D6 54485255         (        forth.asm):03222                 fcc     'THRU'          ( lowblk highblk -- )
F6DA F6A1             (        forth.asm):03223                 fdb     LOAD
F6DC C7               (        forth.asm):03224                 RFCS
F6DD BDE6C7           (        forth.asm):03225 (7)             jsr     NPOP
F6E0 1F12             (        forth.asm):03226 (4)             tfr     x,y             Y has highblk
F6E2 BDE6C7           (        forth.asm):03227 (7)             jsr     NPOP            X has lowblk--both are unsigned numbers
F6E5 103712           (        forth.asm):03228 (4)     @thrlop cmpr    x,y
F6E8 2401             (        forth.asm):03229 (3)             bhs     @cont           Limit is >= to the loop index
F6EA 39               (        forth.asm):03230 (4)             rts
F6EB 3430             (        forth.asm):03231 (4+4)   @cont   pshs    x,y             Backup loop parameters
F6ED 3610             (        forth.asm):03232                 UCNPUSH                 Current block number to the data stack
F6EF 8DB8             (        forth.asm):03233                 RFXT    bsr,LOAD+7      XT for LOAD
F6F1 3530             (        forth.asm):03234 (4+4)           puls    y,x             Retrieve loop parameters
F6F3 3001             (        forth.asm):03235 (4+1)           leax    1,x             Iterate over to the next screen
F6F5 20EE             (        forth.asm):03236 (3)             bra     @thrlop
                      (        forth.asm):03237         
F6F7 83               (        forth.asm):03238         NXTBLK  fcb     $83             79-STANDARD (REF131)
F6F8 2D2D3E           (        forth.asm):03239                 fcc     '-->'           ( -- )
F6FB F6D5             (        forth.asm):03240                 fdb     THRU
F6FD C7               (        forth.asm):03241                 RFCS
F6FE 9E24             (        forth.asm):03242 (4)             ldx     UBLK
F700 3001             (        forth.asm):03243 (4+1)           leax    1,x
F702 DC24             (        forth.asm):03244 (4)     NXTBLK1 ldd     UBLK
F704 2603             (        forth.asm):03245 (3)             bne     @nfrmb0         Not invoked from block 0 (the console)
                      (        forth.asm):03246         * --> or CONTINUED are being invoked from the console. Flag that condition
                      (        forth.asm):03247         * as a hint to the interpreter so that feedback is provided even if we are
                      (        forth.asm):03248         * back from a block.
F706 4C               (        forth.asm):03249 (1)             inca                    1 to A
F707 9735             (        forth.asm):03250 (3)             sta     NBCTFB0
F709 9F24             (        forth.asm):03251 (4)     @nfrmb0 stx     UBLK            Update BLK
F70B 104F             (        forth.asm):03252 (2)             clrd
F70D DD22             (        forth.asm):03253 (4)             std     UTOIN           0 >IN !
                      (        forth.asm):03254         * Map the new BLK in, interpret code from there.
F70F 7EF684           (        forth.asm):03255                 RFXT    jmp,TERPRET+12  XT for INTERPRET
                      (        forth.asm):03256         
F712 89               (        forth.asm):03257         CONTIND fcb     $89             79-STANDARD (REF)
F713 434F4E54494E5545 (        forth.asm):03258                 fcc     'CONTINUED'     ( nextblk -- )
     44
F71C F6F7             (        forth.asm):03259                 fdb     NXTBLK
F71E C7               (        forth.asm):03260                 RFCS
F71F BDE6C7           (        forth.asm):03261 (7)             jsr     NPOP            NEXTBLK to X
F722 1037C1           (        forth.asm):03262 (4)             cmpr    0,x             Cannot interpret from block 0!
F725 26DB             (        forth.asm):03263 (3)             bne     NXTBLK1
F727 C60D             (        forth.asm):03264 (2)             ldb     #13             Illegal argument
F729 BDE640           (        forth.asm):03265 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):03266         
F72C 02               (        forth.asm):03267         MILLIS  fcb     2               79-STANDARD (REF)
F72D 4D53             (        forth.asm):03268                 fcc     'MS'            ( mscount -- )
F72F F712             (        forth.asm):03269                 fdb     CONTIND
F731 C7               (        forth.asm):03270                 RFCS
F732 BDE6C7           (        forth.asm):03271 (7)             jsr     NPOP
F735 1037C1           (        forth.asm):03272 (4)             cmpr    0,x
F738 2601             (        forth.asm):03273 (3)             bne     MILLIS1
F73A 39               (        forth.asm):03274 (4)             rts
F73B CC03E2           (        forth.asm):03275 (3)     MILLIS1 ldd     #MSLCNT
F73E 104A             (        forth.asm):03276 (2)     @ms2    decd
F740 26FC             (        forth.asm):03277 (3)             bne     @ms2
F742 301F             (        forth.asm):03278 (4+1)           leax    -1,x
F744 26F5             (        forth.asm):03279 (3)             bne     MILLIS1
F746 39               (        forth.asm):03280 (4)             rts
                      (        forth.asm):03281         
F747 04               (        forth.asm):03282         KEYP    fcb     4               ANSI (Facility)
F748 4B45593F         (        forth.asm):03283                 fcc     'KEY?'          ( -- flag )
F74C F72C             (        forth.asm):03284                 fdb     MILLIS
F74E C7               (        forth.asm):03285                 RFCS
F74F 1FC1             (        forth.asm):03286 (4)             tfr     0,x
F751 8615             (        forth.asm):03287 (2)             lda     #ACIRTS0
F753 B7D800           (        forth.asm):03288 (4)             sta     ACIACTL         Assert RTS#
F756 8E0028           (        forth.asm):03289 (3)             ldx     #40
F759 8DE0             (        forth.asm):03290 (6)             bsr     MILLIS1         Wait for 40 milliseconds
                      (        forth.asm):03291         * X is guaranteed to be 0 upon return from MILLIS1.
F75B 8601             (        forth.asm):03292 (2)             lda     #ACIRDRF
F75D B5D800           (        forth.asm):03293 (4)             bita    ACIACTL
F760 2702             (        forth.asm):03294 (3)             beq     @keyp1
F762 3001             (        forth.asm):03295 (4+1)           leax    1,x             Return the 79-STANDARD true flag
F764 8655             (        forth.asm):03296 (2)     @keyp1  lda     #ACIRTS1
F766 B7D800           (        forth.asm):03297 (4)             sta     ACIACTL         Negate RTS#
F769 7EE6B9           (        forth.asm):03298 (3)             jmp     NPUSH
                      (        forth.asm):03299         
F76C 03               (        forth.asm):03300         KEY     fcb     3               79-STANDARD (REQ100)
F76D 4B4559           (        forth.asm):03301                 fcc     'KEY'
F770 F747             (        forth.asm):03302                 fdb     KEYP
F772 C7               (        forth.asm):03303                 RFCS
F773 BDE1C5           (        forth.asm):03304 (7)             jsr     GETCH
F776 1F89             (        forth.asm):03305 (4)             tfr     a,b
F778 4F               (        forth.asm):03306 (1)             clra
F779 1F01             (        forth.asm):03307 (4)             tfr     d,x
F77B 7EE6B9           (        forth.asm):03308 (3)             jmp     NPUSH
                      (        forth.asm):03309         
F77E 04               (        forth.asm):03310         EMIT    fcb     4               79-STANDARD (REQ207)
F77F 454D4954         (        forth.asm):03311                 fcc     'EMIT'
F783 F76C             (        forth.asm):03312                 fdb     KEY
F785 C7               (        forth.asm):03313                 RFCS
F786 BDE6C7           (        forth.asm):03314 (7)             jsr     NPOP
F789 1F10             (        forth.asm):03315 (4)             tfr     x,d
F78B 1F98             (        forth.asm):03316 (4)             tfr     b,a
F78D 7EE1B6           (        forth.asm):03317 (3)             jmp     PUTCH
                      (        forth.asm):03318         
F790 01               (        forth.asm):03319         PLUS    fcb     1               79-STANDARD (REQ121)
F791 2B               (        forth.asm):03320                 fcc     '+'             ( n1 n2 -- sum )
F792 F77E             (        forth.asm):03321                 fdb     EMIT
F794 C7               (        forth.asm):03322                 RFCS
F795 CC0246BDE336     (        forth.asm):03323                 MINDREQ 2               We need at least two cells stacked up
F79B EC42             (        forth.asm):03324 (5+1)           ldd     2,u             N1
F79D E3C4             (        forth.asm):03325 (5+0)           addd    ,u              N2
F79F ED42             (        forth.asm):03326 (5+1)           std     2,u             SUM
F7A1 3342             (        forth.asm):03327 (4+1)           leau    2,u             Drop the top cell
F7A3 39               (        forth.asm):03328 (4)             rts
                      (        forth.asm):03329         
F7A4 02               (        forth.asm):03330         ONEP    fcb     2               79-STANDARD (REQ107)
F7A5 312B             (        forth.asm):03331                 fcc     '1+'
F7A7 F790             (        forth.asm):03332                 fdb     PLUS
F7A9 C7               (        forth.asm):03333                 RFCS
F7AA CC0248BDE336     (        forth.asm):03334                 MINDREQ 1               We need at least one cell stacked up
F7B0 ECC4             (        forth.asm):03335 (5+0)           ldd     ,u
F7B2 104C             (        forth.asm):03336 (2)             incd
F7B4 EDC4             (        forth.asm):03337 (5+0)           std     ,u
F7B6 39               (        forth.asm):03338 (4)             rts
                      (        forth.asm):03339         
F7B7 02               (        forth.asm):03340         TWOP    fcb     2               79-STANDARD (REQ135)
F7B8 322B             (        forth.asm):03341                 fcc     '2+'            ( n -- n+2 )
F7BA F7A4             (        forth.asm):03342                 fdb     ONEP
F7BC C7               (        forth.asm):03343                 RFCS
F7BD CC0248BDE336     (        forth.asm):03344                 MINDREQ 1
F7C3 ECC4             (        forth.asm):03345 (5+0)           ldd     ,u
F7C5 C30002           (        forth.asm):03346 (3)             addd    #2
F7C8 EDC4             (        forth.asm):03347 (5+0)           std     ,u
F7CA 39               (        forth.asm):03348 (4)             rts
                      (        forth.asm):03349         
F7CB 01               (        forth.asm):03350         MINUS   fcb     1               79-STANDARD (REQ134)
F7CC 2D               (        forth.asm):03351                 fcc     '-'             ( n1 n2 -- dif )
F7CD F7B7             (        forth.asm):03352                 fdb     TWOP
F7CF C7               (        forth.asm):03353                 RFCS
F7D0 CC0246BDE336     (        forth.asm):03354                 MINDREQ 2               We need at least two cells stacked up
F7D6 EC42             (        forth.asm):03355 (5+1)           ldd     2,u             N1
F7D8 A3C4             (        forth.asm):03356 (5+0)           subd    ,u              N2
F7DA ED42             (        forth.asm):03357 (5+1)           std     2,u             DIF
F7DC 3342             (        forth.asm):03358 (4+1)           leau    2,u             Drop the top cell
F7DE 39               (        forth.asm):03359 (4)             rts
                      (        forth.asm):03360         
F7DF 02               (        forth.asm):03361         ONEM    fcb     2               79-STANDARD (REQ105)
F7E0 312D             (        forth.asm):03362                 fcc     '1-'
F7E2 F7CB             (        forth.asm):03363                 fdb     MINUS
F7E4 C7               (        forth.asm):03364                 RFCS
F7E5 CC0248BDE336     (        forth.asm):03365                 MINDREQ 1               We need at least one cell stacked up
F7EB ECC4             (        forth.asm):03366 (5+0)           ldd     ,u
F7ED 104A             (        forth.asm):03367 (2)             decd
F7EF EDC4             (        forth.asm):03368 (5+0)           std     ,u
F7F1 39               (        forth.asm):03369 (4)             rts
                      (        forth.asm):03370         
F7F2 02               (        forth.asm):03371         TWOM    fcb     2               79-STANDARD (REQ129)
F7F3 322D             (        forth.asm):03372                 fcc     '2-'
F7F5 F7DF             (        forth.asm):03373                 fdb     ONEM
F7F7 C7               (        forth.asm):03374                 RFCS
F7F8 CC0248BDE336     (        forth.asm):03375                 MINDREQ 1               We need at least one cell stacked up
F7FE ECC4             (        forth.asm):03376 (5+0)           ldd     ,u
F800 830002           (        forth.asm):03377 (3)             subd    #2
F803 EDC4             (        forth.asm):03378 (5+0)           std     ,u
F805 39               (        forth.asm):03379 (4)             rts
                      (        forth.asm):03380         
F806 01               (        forth.asm):03381         ZEROL   fcb     1               Non-standard
F807 30               (        forth.asm):03382                 fcc     '0'
F808 F7F2             (        forth.asm):03383                 fdb     TWOM
F80A C7               (        forth.asm):03384                 RFCS
F80B 1FC1             (        forth.asm):03385 (4)             tfr     0,x
F80D 7EE6B9           (        forth.asm):03386 (3)             jmp     NPUSH
                      (        forth.asm):03387         
F810 01               (        forth.asm):03388         ONEL    fcb     1               Non-standard
F811 31               (        forth.asm):03389                 fcc     '1'
F812 F806             (        forth.asm):03390                 fdb     ZEROL
F814 C7               (        forth.asm):03391                 RFCS
F815 8E0001           (        forth.asm):03392 (3)             ldx     #1
F818 7EE6B9           (        forth.asm):03393 (3)             jmp     NPUSH
                      (        forth.asm):03394         
F81B 01               (        forth.asm):03395         TWOL    fcb     1               Non-standard
F81C 32               (        forth.asm):03396                 fcc     '2'
F81D F810             (        forth.asm):03397                 fdb     ONEL
F81F C7               (        forth.asm):03398                 RFCS
F820 8E0002           (        forth.asm):03399 (3)             ldx     #2
F823 7EE6B9           (        forth.asm):03400 (3)             jmp     NPUSH
                      (        forth.asm):03401         
F826 05               (        forth.asm):03402         SHIFT   fcb     5               79-STANDARD (Ref)
F827 5348494654       (        forth.asm):03403                 fcc     'SHIFT'
F82C F81B             (        forth.asm):03404                 fdb     TWOL
F82E C7               (        forth.asm):03405                 RFCS
F82F CC0246BDE336     (        forth.asm):03406                 MINDREQ 2               Two cells need to be stacked up
F835 10A6C4           (        forth.asm):03407 (6+0)           ldw     ,u              Shift bitcount
F838 EC42             (        forth.asm):03408 (5+1)           ldd     2,u             The data itself
F83A 105D             (        forth.asm):03409 (2)     @shftlp tstw
F83C 270E             (        forth.asm):03410 (3)             beq     @shfdon
F83E 2D06             (        forth.asm):03411 (3)             blt     @shftrg
F840 1048             (        forth.asm):03412 (2)             lsld                    Shift left (W is positive)
F842 105A             (        forth.asm):03413 (2)             decw
F844 20F4             (        forth.asm):03414 (3)             bra     @shftlp
F846 1044             (        forth.asm):03415 (2)     @shftrg lsrd                    Shift right (W is negative)
F848 105C             (        forth.asm):03416 (2)             incw
F84A 20EE             (        forth.asm):03417 (3)             bra     @shftlp
F84C ED42             (        forth.asm):03418 (5+1)   @shfdon std     2,u             Return value stored there
F84E 3342             (        forth.asm):03419 (4+1)           leau    2,u             Drop one cell from the data stack
F850 39               (        forth.asm):03420 (4)             rts
                      (        forth.asm):03421         
                      (        forth.asm):03422         * Signed multiplication by hardware support.
F851 01               (        forth.asm):03423         MULT    fcb     1               79-STANDARD (REQ138)
F852 2A               (        forth.asm):03424                 fcc     '*'
F853 F826             (        forth.asm):03425                 fdb     SHIFT
F855 C7               (        forth.asm):03426                 RFCS
F856 CC0246BDE336     (        forth.asm):03427                 MINDREQ 2               Two cells need to be stacked up
F85C EC42             (        forth.asm):03428 (5+1)           ldd     2,u
F85E 11AFC4           (        forth.asm):03429 (30+0)          muld    ,u
F861 10A742           (        forth.asm):03430 (6+1)           stw     2,u             Return only the lower 16 bits
F864 3342             (        forth.asm):03431 (4+1)           leau    2,u             Drop one cell from the data stack
F866 39               (        forth.asm):03432 (4)             rts
                      (        forth.asm):03433         
F867 02               (        forth.asm):03434         TWOTIM  fcb     2               79-STANDARD (REF)
F868 322A             (        forth.asm):03435                 fcc     '2*'
F86A F851             (        forth.asm):03436                 fdb     MULT
F86C C7               (        forth.asm):03437                 RFCS
F86D CC0248BDE336     (        forth.asm):03438                 MINDREQ 1               One cell needs to be stacked up
F873 ECC4             (        forth.asm):03439 (5+0)           ldd     ,u
F875 1048             (        forth.asm):03440 (2)             asld
F877 EDC4             (        forth.asm):03441 (5+0)           std     ,u
F879 39               (        forth.asm):03442 (4)             rts
                      (        forth.asm):03443         
F87A 02               (        forth.asm):03444         TWODIV  fcb     2
F87B 322F             (        forth.asm):03445                 fcc     '2/'
F87D F867             (        forth.asm):03446                 fdb     TWOTIM
F87F C7               (        forth.asm):03447                 RFCS
F880 CC0248BDE336     (        forth.asm):03448                 MINDREQ 1               One cell needs to be stacked up
F886 ECC4             (        forth.asm):03449 (5+0)           ldd     ,u
F888 1047             (        forth.asm):03450 (2)             asrd
F88A EDC4             (        forth.asm):03451 (5+0)           std     ,u
F88C 39               (        forth.asm):03452 (4)             rts
                      (        forth.asm):03453         
                      (        forth.asm):03454         * /, MOD and /MOD are essentially the same function returning
                      (        forth.asm):03455         * the different parts returned by DIVQ.
                      (        forth.asm):03456         * We use a global variable to distinguish which functionality
                      (        forth.asm):03457         * is being requested:
                      (        forth.asm):03458         * 0: return the modulo and the quotient (/MOD).
                      (        forth.asm):03459         * 1: return the modulo only (MOD).
                      (        forth.asm):03460         * 2: return the quotient only (/).
F88D 01               (        forth.asm):03461         DIV     fcb     1
F88E 2F               (        forth.asm):03462                 fcc     '/'
F88F F87A             (        forth.asm):03463                 fdb     TWODIV
F891 C7               (        forth.asm):03464                 RFCS
F892 8602             (        forth.asm):03465 (2)             lda     #2
F894 972D             (        forth.asm):03466 (3)             sta     DIVFCN
F896 CC0246BDE336     (        forth.asm):03467         DIV1    MINDREQ 2
                      (        forth.asm):03468         * Division by zero conditions are dealt with through the trap handler.
F89C 104F             (        forth.asm):03469 (2)             clrd
F89E 10A642           (        forth.asm):03470 (6+1)           ldw     2,u             Numerator
                      (        forth.asm):03471         * We need a sign extention from W to Q. SEX and SEXW do not cut it.
F8A1 114D             (        forth.asm):03472 (2)             tste
F8A3 2A02             (        forth.asm):03473 (3)             bpl     @div2
F8A5 1043             (        forth.asm):03474 (2)             comd
F8A7 11AEC4           (        forth.asm):03475 (36)    @div2   divq    ,u              Quotient is returned in W, modulo in D
F8AA 0D2D             (        forth.asm):03476 (4)             tst     DIVFCN
F8AC 2606             (        forth.asm):03477 (3)             bne     @div3
F8AE ED42             (        forth.asm):03478 (5+1)           std     2,u             Function 0: return the modulo and the quotient
F8B0 10A7C4           (        forth.asm):03479 (6+0)           stw     ,u
F8B3 39               (        forth.asm):03480 (4)             rts
F8B4 3342             (        forth.asm):03481 (4+1)   @div3   leau    2,u             Drop one cell from the data stack
F8B6 1F07             (        forth.asm):03482 (4)             tfr     d,v             Backup the modulo
F8B8 962D             (        forth.asm):03483 (3)             lda     DIVFCN
F8BA 8101             (        forth.asm):03484 (2)             cmpa    #1
F8BC 2605             (        forth.asm):03485 (3)             bne     @div4
F8BE 1F70             (        forth.asm):03486 (4)             tfr     v,d             Restore the modulo
F8C0 EDC4             (        forth.asm):03487 (5+0)           std     ,u              Function 1: return only the modulo
F8C2 39               (        forth.asm):03488 (4)             rts
F8C3 10A7C4           (        forth.asm):03489 (6+0)   @div4   stw     ,u              Function 2: return only the quotient
F8C6 39               (        forth.asm):03490 (4)             rts
                      (        forth.asm):03491         
F8C7 03               (        forth.asm):03492         MOD     fcb     3
F8C8 4D4F44           (        forth.asm):03493                 fcc     'MOD'
F8CB F88D             (        forth.asm):03494                 fdb     DIV
F8CD C7               (        forth.asm):03495                 RFCS
F8CE 8601             (        forth.asm):03496 (2)             lda     #1
F8D0 972D             (        forth.asm):03497 (3)             sta     DIVFCN
F8D2 20C2             (        forth.asm):03498 (3)             bra     DIV1
                      (        forth.asm):03499         
F8D4 04               (        forth.asm):03500         MDIV    fcb     4
F8D5 2F4D4F44         (        forth.asm):03501                 fcc     '/MOD'
F8D9 F8C7             (        forth.asm):03502                 fdb     MOD
F8DB C7               (        forth.asm):03503                 RFCS
F8DC 0F2D             (        forth.asm):03504 (5)             clr     DIVFCN
F8DE 20B6             (        forth.asm):03505 (3)             bra     DIV1
                      (        forth.asm):03506         
F8E0 02               (        forth.asm):03507         STRSLSH fcb     2
F8E1 2A2F             (        forth.asm):03508                 fcc     '*/'            ( n1 n2 n3 -- n4 [n5] )
F8E3 F8D4             (        forth.asm):03509                 fdb     MDIV
F8E5 C7               (        forth.asm):03510                 RFCS
F8E6 8601             (        forth.asm):03511 (2)             lda     #1
F8E8 972E             (        forth.asm):03512 (3)             sta     STSLFCN
F8EA CC0244BDE336     (        forth.asm):03513         STRSL1  MINDREQ 3
                      (        forth.asm):03514         * Division by zero conditions are dealt with through the trap handler.
F8F0 EC44             (        forth.asm):03515 (5+1)           ldd     4,u             N1
F8F2 11AF42           (        forth.asm):03516 (30+1)          muld    2,u             N2
F8F5 11AEC4           (        forth.asm):03517 (36)            divq    ,u              N3
F8F8 3342             (        forth.asm):03518 (4+1)           leau    2,u
F8FA 0D2E             (        forth.asm):03519 (4)             tst     STSLFCN
F8FC 2606             (        forth.asm):03520 (3)             bne     @strsl2         Just the quotient, Ma'am!
F8FE ED42             (        forth.asm):03521 (5+1)           std     2,u             N4: the modulo
F900 10A7C4           (        forth.asm):03522 (6+0)           stw     ,u              N5: the quotient
F903 39               (        forth.asm):03523 (4)             rts
F904 3342             (        forth.asm):03524 (4+1)   @strsl2 leau    2,u
F906 10A7C4           (        forth.asm):03525 (6+0)           stw     ,u              N4
F909 39               (        forth.asm):03526 (4)             rts
                      (        forth.asm):03527         
F90A 05               (        forth.asm):03528         STRSLMD fcb     5
F90B 2A2F4D4F44       (        forth.asm):03529                 fcc     '*/MOD'
F910 F8E0             (        forth.asm):03530                 fdb     STRSLSH
F912 C7               (        forth.asm):03531                 RFCS
F913 0F2E             (        forth.asm):03532 (5)             clr     STSLFCN
F915 20D3             (        forth.asm):03533 (3)             bra     STRSL1
                      (        forth.asm):03534         
                      (        forth.asm):03535         * Returns the current value of the S register (informational only).
F917 01               (        forth.asm):03536         SYSSTK  fcb     1               Non-standard
F918 53               (        forth.asm):03537                 fcc     'S'
F919 F90A             (        forth.asm):03538                 fdb     STRSLMD
F91B C7               (        forth.asm):03539                 RFCS
F91C 1F41             (        forth.asm):03540 (4)             tfr     s,x
F91E 7EE6B9           (        forth.asm):03541 (3)             jmp     NPUSH
                      (        forth.asm):03542         
F921 07               (        forth.asm):03543         PAYLOAD fcb     7               Non standard
F922 5041594C4F4144   (        forth.asm):03544                 fcc     'PAYLOAD'       ( -- len ) where len is the code payload
F929 F917             (        forth.asm):03545                 fdb     SYSSTK          of the word located by FIND (or NULL)
F92B C7               (        forth.asm):03546                 RFCS
F92C 9E10             (        forth.asm):03547 (4)             ldx     FNDPLD          Code payload reported by FIND
F92E 7EE6B9           (        forth.asm):03548 (3)             jmp     NPUSH
                      (        forth.asm):03549         
                      (        forth.asm):03550         * Differences from the original code:
                      (        forth.asm):03551         * - display number in HEX rather than in the current base.
                      (        forth.asm):03552         * - dropped feat: the original stuff was interactively paged by 15 line screens.
                      (        forth.asm):03553         * - added feat: display code implementation payload.
                      (        forth.asm):03554         * - added feat: display the immedediate and define (compile time only) flags.
                      (        forth.asm):03555         * - added feat: display the forgettable status (R/W). Everything user
                      (        forth.asm):03556         *   defined is forgettable (i.e. RAM resident).
F931 05               (        forth.asm):03557         VLIST   fcb     5               Non-standard
F932 564C495354       (        forth.asm):03558                 fcc     'VLIST'         ( -- )
F937 F921             (        forth.asm):03559                 fdb     PAYLOAD
F939 C7               (        forth.asm):03560                 RFCS
F93A 9E08             (        forth.asm):03561 (4)             ldx     DICEND
F93C 9F16             (        forth.asm):03562 (4)             stx     VLPRVEP         Last word code address + 1
F93E 9E06             (        forth.asm):03563 (4)             ldx     LSTWAD
F940 9F18             (        forth.asm):03564 (4)     @vlist1 stx     VLPRVHD         Last word header pointer
F942 108E039E         (        forth.asm):03565 (4)             ldy     #TBUFF
F946 E680             (        forth.asm):03566 (4+1)           ldb     ,x+
F948 3404             (        forth.asm):03567 (4+1)           pshs    b
F94A C41F             (        forth.asm):03568 (2)             andb    #WRLNMSK        Mask out word length
F94C 4F               (        forth.asm):03569 (1)             clra
F94D 3404             (        forth.asm):03570 (4+1)           pshs    b               Preserve word length
F94F 1F06             (        forth.asm):03571 (4)             tfr     d,w
F951 113812           (        forth.asm):03572 (6+?)           tfm     x+,y+
F954 3502             (        forth.asm):03573 (4+1)           puls    a               Restore word length to A
F956 C620             (        forth.asm):03574 (2)             ldb     #WRLNMSK+1
F958 103289           (        forth.asm):03575 (4)             subr    a,b             Number of spaces we want to emit
F95B 8620             (        forth.asm):03576 (2)             lda     #SP
F95D A7A0             (        forth.asm):03577 (4+1)   @vlist2 sta     ,y+
F95F 5A               (        forth.asm):03578 (1)             decb
F960 26FB             (        forth.asm):03579 (3)             bne     @vlist2
F962 6FA0             (        forth.asm):03580 (6+1)           clr     ,y+             Terminate formatted output string
F964 3410             (        forth.asm):03581 (4+2)           pshs    x               Address of the current word backlink address
F966 BDE1E7           (        forth.asm):03582 (7)             jsr     PUTCR           Carriage return is output before anything else
F969 8E039E           (        forth.asm):03583 (3)             ldx     #TBUFF
F96C BDE1DA           (        forth.asm):03584 (7)             jsr     PUTS            Output word name formatted on 17 chars + SP
F96F AEE4             (        forth.asm):03585 (5+0)           ldx     ,s
                      (        forth.asm):03586                 IFNE    RELFEAT
F971 3003             (        forth.asm):03587 (4+1)           leax    3,x             Word XT to X (Skip backlink and checksum)
                      (        forth.asm):03588                 ELSE
                      (        forth.asm):03589                 leax    2,x             Word XT to X (Skip backlink)
                      (        forth.asm):03590                 ENDC
F973 1F10             (        forth.asm):03591 (4)             tfr     x,d             CVNSTR depends on UBASE and we want HEX output
F975 8E039E           (        forth.asm):03592 (3)             ldx     #TBUFF
F978 BDE174           (        forth.asm):03593 (7)             jsr     HDMP4           So we use trusted debugging code
F97B 8E039E           (        forth.asm):03594 (3)             ldx     #TBUFF
F97E BDE1DA           (        forth.asm):03595 (7)             jsr     PUTS
                      (        forth.asm):03596         * Now to display word implementation length.
                      (        forth.asm):03597         * Implementation code length is from ,s+3 (or 2) to VLPRVEP
F981 8609             (        forth.asm):03598 (2)             lda     #HT
F983 BDE1B6           (        forth.asm):03599 (7)             jsr     PUTCH
F986 9E16             (        forth.asm):03600 (4)             ldx     VLPRVEP
F988 10AEE4           (        forth.asm):03601 (6+0)           ldy     ,s
                      (        forth.asm):03602                 IFNE    RELFEAT
F98B 3123             (        forth.asm):03603 (4+1)           leay    3,y             Current word code entry address
                      (        forth.asm):03604                 ELSE
                      (        forth.asm):03605                 leay    2,y             Current word code entry address
                      (        forth.asm):03606                 ENDC
F98D 103221           (        forth.asm):03607 (4)             subr    y,x
F990 1F10             (        forth.asm):03608 (4)             tfr     x,d
F992 8E039E           (        forth.asm):03609 (3)             ldx     #TBUFF
F995 BDE174           (        forth.asm):03610 (7)             jsr     HDMP4
F998 8E039E           (        forth.asm):03611 (3)             ldx     #TBUFF
F99B BDE1DA           (        forth.asm):03612 (7)             jsr     PUTS
                      (        forth.asm):03613         # Display attribute flags.
F99E 8609             (        forth.asm):03614 (2)             lda     #HT
F9A0 BDE1B6           (        forth.asm):03615 (7)             jsr     PUTCH
F9A3 8E039E           (        forth.asm):03616 (3)             ldx     #TBUFF
F9A6 E662             (        forth.asm):03617 (4+1)           ldb     2,s             Word attribute to B
F9A8 862D             (        forth.asm):03618 (2)             lda     #'-
F9AA C580             (        forth.asm):03619 (2)             bitb    #IMDFLM         Check for immediate
F9AC 2702             (        forth.asm):03620 (3)             beq     @vlist4
F9AE 8649             (        forth.asm):03621 (2)             lda     #'I
F9B0 A780             (        forth.asm):03622 (4+1)   @vlist4 sta     ,x+
F9B2 862D             (        forth.asm):03623 (2)             lda     #'-
F9B4 C540             (        forth.asm):03624 (2)             bitb    #DEFFLM         Check for define (compile time only)
F9B6 2702             (        forth.asm):03625 (3)             beq     @vlist5
F9B8 8643             (        forth.asm):03626 (2)             lda     #'C
F9BA A780             (        forth.asm):03627 (4+1)   @vlist5 sta     ,x+
                      (        forth.asm):03628                 IFNE    RELFEAT
F9BC 862D             (        forth.asm):03629 (2)             lda     #'-
F9BE C520             (        forth.asm):03630 (2)             bitb    #MONFLM         Check for monitored status
F9C0 2702             (        forth.asm):03631 (3)             beq     @vlst51
F9C2 864D             (        forth.asm):03632 (2)             lda     #'M
F9C4 A780             (        forth.asm):03633 (4+1)   @vlst51 sta     ,x+
                      (        forth.asm):03634                 ENDC
                      (        forth.asm):03635         * Check for forgettable also. In ROM => R else W unless we just processed '@'.
F9C6 8652             (        forth.asm):03636 (2)             lda     #'R
F9C8 10AEE4           (        forth.asm):03637 (6+0)           ldy     ,s
                      (        forth.asm):03638                 IFNE    RELFEAT
F9CB 3123             (        forth.asm):03639 (4+1)           leay    3,y             Word entry point to Y
                      (        forth.asm):03640                 ELSE
                      (        forth.asm):03641                 leay    2,y             Word entry point to Y
                      (        forth.asm):03642                 ENDC
F9CD 108C0C15         (        forth.asm):03643 (4)             cmpy    #RAMFTCH        @ in RAM is unforgettable
F9D1 2708             (        forth.asm):03644 (3)             beq     @vlist6
F9D3 108CE000         (        forth.asm):03645 (4)             cmpy    #ROMSTRT        as are all ROM resident words
F9D7 2402             (        forth.asm):03646 (3)             bcc     @vlist6
F9D9 8657             (        forth.asm):03647 (2)             lda     #'W
F9DB A780             (        forth.asm):03648 (4+1)   @vlist6 sta     ,x+
F9DD 6F84             (        forth.asm):03649 (6+0)           clr     ,x
F9DF 8E039E           (        forth.asm):03650 (3)             ldx     #TBUFF
F9E2 BDE1DA           (        forth.asm):03651 (7)             jsr     PUTS
                      (        forth.asm):03652         * The point at which VLPRVHD==WDICSPC is a singularity (RAM to ROM transition).
F9E5 9E18             (        forth.asm):03653 (4)             ldx     VLPRVHD
F9E7 8C0C10           (        forth.asm):03654 (3)             cmpx    #WDICSPC
F9EA 2608             (        forth.asm):03655 (3)             bne     @vlist7
F9EC 8EFDED           (        forth.asm):03656 (3)             ldx     #QMARK          Word just before @ (ROM flavor)
F9EF 9F18             (        forth.asm):03657 (4)             stx     VLPRVHD
F9F1 8EFDF8           (        forth.asm):03658 (3)             ldx     #THEEND
F9F4 9F16             (        forth.asm):03659 (4)     @vlist7 stx     VLPRVEP
F9F6 3510             (        forth.asm):03660 (4+2)           puls    x
F9F8 3504             (        forth.asm):03661 (4+1)           puls    b
F9FA AE84             (        forth.asm):03662 (5+0)           ldx     ,x              Point to previous word
F9FC 1026FF40         (        forth.asm):03663 (5)             lbne    @vlist1
FA00 39               (        forth.asm):03664 (4)             rts
                      (        forth.asm):03665         
FA01 05               (        forth.asm):03666         STATE   fcb     5
FA02 5354415445       (        forth.asm):03667                 fcc     'STATE'
FA07 F931             (        forth.asm):03668                 fdb     VLIST
FA09 C7               (        forth.asm):03669                 RFCS
FA0A 8E0120           (        forth.asm):03670 (3)             ldx     #USTATE
FA0D 7EE6B9           (        forth.asm):03671 (3)             jmp     NPUSH
                      (        forth.asm):03672         
FA10 04               (        forth.asm):03673         BASE    fcb     4               79-STANDARD (REQ115)
FA11 42415345         (        forth.asm):03674                 fcc     'BASE'
FA15 FA01             (        forth.asm):03675                 fdb     STATE
FA17 C7               (        forth.asm):03676                 RFCS
FA18 8E011E           (        forth.asm):03677 (3)             ldx     #UBASE
FA1B 7EE6B9           (        forth.asm):03678 (3)             jmp     NPUSH
                      (        forth.asm):03679         
FA1E 03               (        forth.asm):03680         BIN     fcb     3               Non-standard
FA1F 42494E           (        forth.asm):03681                 fcc     'BIN'
FA22 FA10             (        forth.asm):03682                 fdb     BASE
FA24 C7               (        forth.asm):03683                 RFCS
FA25 CC0002           (        forth.asm):03684 (3)             ldd     #2
FA28 DD1E             (        forth.asm):03685 (4)             std     UBASE
FA2A 39               (        forth.asm):03686 (4)             rts
                      (        forth.asm):03687         
FA2B 05               (        forth.asm):03688         OCTAL   fcb     5               79-STANDARD (REF)
FA2C 4F4354414C       (        forth.asm):03689                 fcc     'OCTAL'
FA31 FA1E             (        forth.asm):03690                 fdb     BIN
FA33 C7               (        forth.asm):03691                 RFCS
FA34 CC0008           (        forth.asm):03692 (3)             ldd     #8
FA37 DD1E             (        forth.asm):03693 (4)             std     UBASE
FA39 39               (        forth.asm):03694 (4)             rts
                      (        forth.asm):03695         
FA3A 07               (        forth.asm):03696         DECIMAL fcb     7               79-STANDARD (REQ197)
FA3B 444543494D414C   (        forth.asm):03697                 fcc     'DECIMAL'
FA42 FA2B             (        forth.asm):03698                 fdb     OCTAL
FA44 C7               (        forth.asm):03699                 RFCS
FA45 CC000A           (        forth.asm):03700 (3)             ldd     #10
FA48 DD1E             (        forth.asm):03701 (4)             std     UBASE
FA4A 39               (        forth.asm):03702 (4)             rts
                      (        forth.asm):03703         
FA4B 03               (        forth.asm):03704         HEX     fcb     3               79-STANDARD (REF162)
FA4C 484558           (        forth.asm):03705                 fcc     'HEX'
FA4F FA3A             (        forth.asm):03706                 fdb     DECIMAL
FA51 C7               (        forth.asm):03707                 RFCS
FA52 CC0010           (        forth.asm):03708 (3)             ldd     #16
FA55 DD1E             (        forth.asm):03709 (4)             std     UBASE
FA57 39               (        forth.asm):03710 (4)             rts
                      (        forth.asm):03711         
                      (        forth.asm):03712         * DUMP is not optimized for speed or clarity but for code compactness and yet
                      (        forth.asm):03713         * it remains the largest dictionary entry! It resorts to builtin HEX dump
                      (        forth.asm):03714         * primitives that do not depend on the current base (HDMP4, HDMP2).
                      (        forth.asm):03715         * DUMP operates on the basis of one line of output to #TBUFF per 16 byte
                      (        forth.asm):03716         * (a block) of input. The input buffer is pointed to by D (backed up by Y)
                      (        forth.asm):03717         * and the output is pointed to by X. The output (besides the header line)
                      (        forth.asm):03718         * comprises 3 distinct areas:
                      (        forth.asm):03719         *
                      (        forth.asm):03720         * - the base block address. Aligned on a 16 byte address, followed by one #SP.
                      (        forth.asm):03721         * - the HEX dump area. Made up of 16 times 2 HEX numbers separated by #SP.
                      (        forth.asm):03722         * - the ASCII dump area. Made up of 16 characters.
                      (        forth.asm):03723         *
                      (        forth.asm):03724         * This results in the following "magical" constants:
                      (        forth.asm):03725         *
                      (        forth.asm):03726         * #TBUFF+53 points to the beginning of the ASCII dump area.
                      (        forth.asm):03727         * #TBUFF+69 points to the end of the output string (to be NUL terminated).
                      (        forth.asm):03728         *
FA58 04               (        forth.asm):03729         DUMP    fcb     4               79-STANDARD (REF123)
FA59 44554D50         (        forth.asm):03730                 fcc     'DUMP'          ( START NBYTES -- )
FA5D FA4B             (        forth.asm):03731                 fdb     HEX
FA5F C7               (        forth.asm):03732                 RFCS
FA60 BDE6C7           (        forth.asm):03733 (7)             jsr     NPOP
FA63 1F12             (        forth.asm):03734 (4)             tfr     x,y             NBYTES to Y
FA65 BDE6C7           (        forth.asm):03735 (7)             jsr     NPOP
                      (        forth.asm):03736         * Input parameter validation.
FA68 1037C2           (        forth.asm):03737 (4)             cmpr    0,y
FA6B 2601             (        forth.asm):03738 (3)             bne     @dmproc         Proceed if NBYTES in non-zero
FA6D 39               (        forth.asm):03739 (4)             rts                     A zero byte count is not flagged as an error
FA6E 2E05             (        forth.asm):03740 (3)     @dmproc bgt     @dmpini
FA70 C60D             (        forth.asm):03741 (2)             ldb     #13             Illegal argument (negative)
FA72 BDE640           (        forth.asm):03742 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):03743         * Initialization and header processing.
FA75 3420             (        forth.asm):03744 (4+2)   @dmpini pshs    y               NBYTES
FA77 3410             (        forth.asm):03745 (4+2)           pshs    x               START
FA79 327E             (        forth.asm):03746 (4+1)           leas    -2,s            Allocate storage for STARTSEEN
                      (        forth.asm):03747         * Stack structure:
                      (        forth.asm):03748         * ,s    STARTSEEN               Set to 1 as soon as D is seen = to START
                      (        forth.asm):03749         *                               Only the LSB is used (1,s).
                      (        forth.asm):03750         * 2,s   START                   Lower bound of the area of interest (included)
                      (        forth.asm):03751         * 4,s   NBYTES                  Byte count to be dumped
FA7B 1F10             (        forth.asm):03752 (4)             tfr     x,d             START to D
FA7D C4F0             (        forth.asm):03753 (2)             andb    #$F0            Align to lower 16 byte boundary
FA7F 6F61             (        forth.asm):03754 (6+1)           clr     1,s             Clear STARTSEEN until better informed
FA81 BDE1E7           (        forth.asm):03755 (7)             jsr     PUTCR           Print CR
FA84 11C620           (        forth.asm):03756 (3)             ldf     #SP             Preserved across called subroutines
FA87 8E039E           (        forth.asm):03757 (3)             ldx     #TBUFF
FA8A 1F17             (        forth.asm):03758 (4)             tfr     x,v             Invariants: F has #SP, V has #TBUFF
FA8C 3406             (        forth.asm):03759 (4+2)           pshs    d
FA8E BDFB29           (        forth.asm):03760 (7)             jsr     _DMPHDR         D is not preserved
FA91 3506             (        forth.asm):03761 (4+2)           puls    d
FA93 6F84             (        forth.asm):03762 (6+0)           clr     ,x              NUL terminate the current output line
FA95 1F71             (        forth.asm):03763 (4)             tfr     v,x             Point back to the beginning of the output buffer
FA97 BDE1DA           (        forth.asm):03764 (7)             jsr     PUTS            Print header
                      (        forth.asm):03765         * Main loop. Index is D. We output everything to the string pointed by X.
                      (        forth.asm):03766         * Occasional resort to #TBUFF + 53 + (B % 15) will be used.
FA9A 3404             (        forth.asm):03767 (4+1)   @dmmain pshs    b
FA9C C40F             (        forth.asm):03768 (2)             andb    #$F
FA9E 3504             (        forth.asm):03769 (4+1)           puls    b
FAA0 2609             (        forth.asm):03770 (3)             bne     @dmphx          Not a beginning of line
FAA2 BDE1E7           (        forth.asm):03771 (7)             jsr     PUTCR           Print CR
FAA5 BDE174           (        forth.asm):03772 (7)             jsr     HDMP4           4 hex digit dump of the base block address
FAA8 11E780           (        forth.asm):03773 (5+1)           stf     ,x+             SPACE after the base address
FAAB 1F02             (        forth.asm):03774 (4)     @dmphx  tfr     d,y             Save D, prepare pointer to actual data
FAAD 8D59             (        forth.asm):03775 (6)             bsr     _DMPINT
FAAF 260A             (        forth.asm):03776 (3)             bne     @dmhx2          We are in the area of interest
FAB1 8620             (        forth.asm):03777 (2)     @dmspc  lda     #SP
FAB3 A780             (        forth.asm):03778 (4+1)           sta     ,x+             Nothing interesting here. Emit three spaces
FAB5 A780             (        forth.asm):03779 (4+1)           sta     ,x+
FAB7 A780             (        forth.asm):03780 (4+1)           sta     ,x+
FAB9 2016             (        forth.asm):03781 (3)             bra     @dmasc          Have #SP printed to the ASCII area
                      (        forth.asm):03782         * We are within the area of interest. Perform a regular HEX 2 digit conversion.
FABB A6A4             (        forth.asm):03783 (4+0)   @dmhx2  lda     ,y
FABD BDE18D           (        forth.asm):03784 (7)             jsr     HDMP2
FAC0 11E780           (        forth.asm):03785 (5+1)           stf     ,x+
                      (        forth.asm):03786         * Decrement NBYTES, only if it is not already zero.
FAC3 3420             (        forth.asm):03787 (4+2)           pshs    y
FAC5 10AE66           (        forth.asm):03788 (6+1)           ldy     6,s             Offset plus 2 since we just pushed Y
FAC8 2705             (        forth.asm):03789 (3)             beq     @dmrsty         NBYTES is nul
FACA 313F             (        forth.asm):03790 (4+1)           leay    -1,y            Decrement NBYTES
FACC 10AF66           (        forth.asm):03791 (6+1)           sty     6,s
FACF 3520             (        forth.asm):03792 (4+2)   @dmrsty puls    y
FAD1 8120             (        forth.asm):03793 (2)     @dmasc  cmpa    #SP
FAD3 2504             (        forth.asm):03794 (3)             blo     @dmnprt         Character is not printable
FAD5 817E             (        forth.asm):03795 (2)             cmpa    #$7E
FAD7 2302             (        forth.asm):03796 (3)             bls     @dmasis
FAD9 862E             (        forth.asm):03797 (2)     @dmnprt lda     #'.             Default character when not printable
FADB 3410             (        forth.asm):03798 (4+2)   @dmasis pshs    x               The ASCII image is the character itself
FADD 8E03D3           (        forth.asm):03799 (3)             ldx     #TBUFF+53       Base address for the ASCII dump area
FAE0 C40F             (        forth.asm):03800 (2)             andb    #$F             Offset is B modulo 15
FAE2 3A               (        forth.asm):03801 (1)             abx                     Add offset to base address
FAE3 A780             (        forth.asm):03802 (4+1)           sta     ,x+
FAE5 3510             (        forth.asm):03803 (4+2)           puls    x
                      (        forth.asm):03804         * If B is #$F, we've just processed the last byte of a block. Print #TBUFF.
FAE7 C10F             (        forth.asm):03805 (2)             cmpb    #$F
FAE9 1FAE             (        forth.asm):03806 (4)             tfr     cc,e
FAEB 2608             (        forth.asm):03807 (3)             bne     @dmctd
FAED 1F71             (        forth.asm):03808 (4)             tfr     v,x             #TBUFF to X
FAEF 6F8845           (        forth.asm):03809 (6+1)           clr     69,x
FAF2 BDE1DA           (        forth.asm):03810 (7)             jsr     PUTS
FAF5 1F20             (        forth.asm):03811 (4)     @dmctd  tfr     y,d             Restore D
FAF7 104C             (        forth.asm):03812 (2)             incd
FAF9 1FEA             (        forth.asm):03813 (4)             tfr     e,cc
FAFB 269D             (        forth.asm):03814 (3)             bne     @dmmain         Proceed until end of block is reached
FAFD 6D65             (        forth.asm):03815 (5+1)           tst     5,s             NBYTES LSB
FAFF 2699             (        forth.asm):03816 (3)             bne     @dmmain
FB01 6D64             (        forth.asm):03817 (5+1)           tst     4,s             NYTES MSB
FB03 2695             (        forth.asm):03818 (3)             bne     @dmmain
FB05 3266             (        forth.asm):03819 (4+1)           leas    6,s             Free stack storage used by local variables
FB07 39               (        forth.asm):03820 (4)             rts
                      (        forth.asm):03821         
                      (        forth.asm):03822         * Predicate to indicate whether or not D covers the area of interest.
                      (        forth.asm):03823         * Upon return NZ will be set iff we are pointing to the "interesting" area.
FB08 6D63             (        forth.asm):03824 (5+1)   _DMPINT tst     3,s             STARTSEEN?
FB0A 2608             (        forth.asm):03825 (3)             bne     @strsen         Yes, check for zero remaining byte count
FB0C 10A364           (        forth.asm):03826 (6+1)           cmpd    4,s             START
FB0F 240D             (        forth.asm):03827 (3)             bhs     @ststrt         Set STARTSEEN once and for all
FB11 1A04             (        forth.asm):03828 (2)     @retwz  orcc    #ZFLAG          Set Z flag
FB13 39               (        forth.asm):03829 (4)             rts
                      (        forth.asm):03830         * STARTSEEN is set. Check remaining byte count.
FB14 6D67             (        forth.asm):03831 (5+1)   @strsen tst     7,s             NBYTES LSB
FB16 260E             (        forth.asm):03832 (3)             bne     @retwnz
FB18 6D66             (        forth.asm):03833 (5+1)           tst     6,s             NBYTES MSB
FB1A 260A             (        forth.asm):03834 (3)             bne     @retwnz
FB1C 20F3             (        forth.asm):03835 (3)             bra     @retwz          We are beyond the interesting area
FB1E 3402             (        forth.asm):03836 (4+1)   @ststrt pshs    a
FB20 8601             (        forth.asm):03837 (2)             lda     #1
FB22 A764             (        forth.asm):03838 (4+1)           sta     4,s             Set STARTSEEN
FB24 3502             (        forth.asm):03839 (4+1)           puls    a
FB26 1CFB             (        forth.asm):03840 (2)     @retwnz andcc   #^ZFLAG         Clear Z flag
FB28 39               (        forth.asm):03841 (4)             rts
                      (        forth.asm):03842         
                      (        forth.asm):03843         * Print the dump header to X.
FB29 8620             (        forth.asm):03844 (2)     _DMPHDR lda     #SP
FB2B A780             (        forth.asm):03845 (4+1)           sta     ,x+
FB2D A780             (        forth.asm):03846 (4+1)           sta     ,x+
FB2F A780             (        forth.asm):03847 (4+1)           sta     ,x+
FB31 A780             (        forth.asm):03848 (4+1)           sta     ,x+
FB33 5F               (        forth.asm):03849 (1)             clrb
FB34 A780             (        forth.asm):03850 (4+1)   @dmhlp1 sta     ,x+             Space before every 2 hex digits
FB36 1F98             (        forth.asm):03851 (4)             tfr     b,a
FB38 BDE18D           (        forth.asm):03852 (7)             jsr     HDMP2
FB3B 8620             (        forth.asm):03853 (2)             lda     #SP
FB3D 5C               (        forth.asm):03854 (1)             incb
FB3E C110             (        forth.asm):03855 (2)             cmpb    #$10
FB40 26F2             (        forth.asm):03856 (3)             bne     @dmhlp1
FB42 A780             (        forth.asm):03857 (4+1)           sta     ,x+             Space before the ASCII dump
FB44 5F               (        forth.asm):03858 (1)             clrb
FB45 1F98             (        forth.asm):03859 (4)     @dmhlp2 tfr     b,a
FB47 BDE15B           (        forth.asm):03860 (7)             jsr     HEX1D           Offset to HEX char stored to x+
FB4A 5C               (        forth.asm):03861 (1)             incb
FB4B C110             (        forth.asm):03862 (2)             cmpb    #$10
FB4D 26F6             (        forth.asm):03863 (3)             bne     @dmhlp2
FB4F 39               (        forth.asm):03864 (4)             rts
                      (        forth.asm):03865         
                      (        forth.asm):03866                 IFNE    SSDFEAT
FB50 02               (        forth.asm):03867         DOTTICK fcb     2               Non-standard (SwiftForth)
FB51 2E27             (        forth.asm):03868                 fcb     $2E,$27         .' ( memaddr -- )
FB53 FA58             (        forth.asm):03869                 fdb     DUMP
FB55 C7               (        forth.asm):03870                 RFCS
FB56 BDE6C7           (        forth.asm):03871 (7)             jsr     NPOP
FB59 1F12             (        forth.asm):03872 (4)             tfr     x,y
FB5B 8E034E           (        forth.asm):03873 (3)             ldx     #HEXBUF
FB5E BDE512           (        forth.asm):03874 (7)             jsr     FINDSYM
FB61 8E034E           (        forth.asm):03875 (3)             ldx     #HEXBUF
FB64 7EE1DA           (        forth.asm):03876 (3)             jmp     PUTS
                      (        forth.asm):03877                 ENDC
                      (        forth.asm):03878         
                      (        forth.asm):03879         * Display a dump of the data stack in the current BASE. In Leo Brodie's
                      (        forth.asm):03880         * "Starting Forth" the data stack is printed from the bottom up. So it is here.
FB67 02               (        forth.asm):03881         DDUMP   fcb     2               ANSI (Optional "Programming tools" word set)
FB68 2E53             (        forth.asm):03882                 fcc     '.S'            ( memaddr bcount -- )
                      (        forth.asm):03883                 IFNE    SSDFEAT
FB6A FB50             (        forth.asm):03884                 fdb     DOTTICK
                      (        forth.asm):03885                 ELSE
                      (        forth.asm):03886                 fdb     DUMP
                      (        forth.asm):03887                 ENDC
FB6C C7               (        forth.asm):03888                 RFCS
FB6D CC024A           (        forth.asm):03889 (3)             ldd     #NSTBOT
FB70 103230           (        forth.asm):03890 (4)             subr    u,d
FB73 1044             (        forth.asm):03891 (2)             lsrd                    DEPTH is in D
FB75 272A             (        forth.asm):03892 (3)             beq     @ndump3         Data stack is empty
FB77 3440             (        forth.asm):03893 (4+2)           pshs    u
FB79 CE024A           (        forth.asm):03894 (3)             ldu     #NSTBOT         Pointing to the bottom of the data stack
FB7C 8601             (        forth.asm):03895 (2)             lda     #1
FB7E 9731             (        forth.asm):03896 (3)             sta     CVISSGN         Force a signed number conversion
FB80 3404             (        forth.asm):03897 (4+1)   @ndump1 pshs    b
FB82 AEC3             (        forth.asm):03898 (5+2)           ldx     ,--u
FB84 BDE341           (        forth.asm):03899 (7)             jsr     CVNSTR
FB87 8E039E           (        forth.asm):03900 (3)             ldx     #TBUFF
                      (        forth.asm):03901         # Skip leading spaces.
FB8A A680             (        forth.asm):03902 (4+1)   @ndump2 lda     ,x+
FB8C 8120             (        forth.asm):03903 (2)             cmpa    #SP
FB8E 27FA             (        forth.asm):03904 (3)             beq     @ndump2
FB90 301F             (        forth.asm):03905 (4+1)           leax    -1,x
FB92 BDE1DA           (        forth.asm):03906 (7)             jsr     PUTS
FB95 8620             (        forth.asm):03907 (2)             lda     #SP
FB97 BDE1B6           (        forth.asm):03908 (7)             jsr     PUTCH
FB9A 3504             (        forth.asm):03909 (4+1)           puls    b
FB9C 5A               (        forth.asm):03910 (1)             decb
FB9D 26E1             (        forth.asm):03911 (3)             bne     @ndump1
FB9F 3540             (        forth.asm):03912 (4+2)           puls    u
FBA1 39               (        forth.asm):03913 (4)     @ndump3 rts
                      (        forth.asm):03914         
FBA2 04               (        forth.asm):03915         QRYDUP  fcb     4               79-STANDARD (REQ184)
FBA3 3F445550         (        forth.asm):03916                 fcc     '?DUP'
FBA7 FB67             (        forth.asm):03917                 fdb     DDUMP
FBA9 C7               (        forth.asm):03918                 RFCS
FBAA BDE6C7           (        forth.asm):03919 (7)             jsr     NPOP
FBAD 3610             (        forth.asm):03920                 UCNPUSH                 Push back the original parameter
FBAF 1037C1           (        forth.asm):03921 (4)             cmpr    0,x
FBB2 2601             (        forth.asm):03922 (3)             bne     @qrydp1
FBB4 39               (        forth.asm):03923 (4)             rts
FBB5 7EE6B9           (        forth.asm):03924 (3)     @qrydp1 jmp     NPUSH           And DUP if NZ
                      (        forth.asm):03925         
FBB8 04               (        forth.asm):03926         TUCK    fcb     4               ANSI (Core ext)
FBB9 5455434B         (        forth.asm):03927                 fcc     'TUCK'          ( x1 x2 -- x2 x1 x2 ) i.e. SWAP OVER
FBBD FBA2             (        forth.asm):03928                 fdb     QRYDUP
FBBF C7               (        forth.asm):03929                 RFCS
FBC0 CC0246BDE336     (        forth.asm):03930                 MINDREQ 2
FBC6 10ECC4           (        forth.asm):03931 (8+0)           ldq     ,u              D:W is X2:X1
FBC9 1E06             (        forth.asm):03932 (5)             exg     d,w
FBCB 10EDC4           (        forth.asm):03933 (8+0)           stq     ,u
FBCE 1F61             (        forth.asm):03934 (4)             tfr     w,x             X has X2
FBD0 7EE6B9           (        forth.asm):03935 (3)             jmp     NPUSH
                      (        forth.asm):03936         
FBD3 03               (        forth.asm):03937         NIP     fcb     3               ANSI (Core ext)
FBD4 4E4950           (        forth.asm):03938                 fcc     'NIP'           ( x1 x2 -- x2 ) i.e. SWAP DROP
FBD7 FBB8             (        forth.asm):03939                 fdb     TUCK
FBD9 C7               (        forth.asm):03940                 RFCS
FBDA CC0246BDE336     (        forth.asm):03941                 MINDREQ 2
FBE0 ECC4             (        forth.asm):03942 (5+0)           ldd     ,u
FBE2 3342             (        forth.asm):03943 (4+1)           leau    2,u
FBE4 EDC4             (        forth.asm):03944 (5+0)           std     ,u
FBE6 39               (        forth.asm):03945 (4)             rts
                      (        forth.asm):03946         
FBE7 03               (        forth.asm):03947         DUP     fcb     3               79-STANDARD (REQ205)
FBE8 445550           (        forth.asm):03948                 fcc     'DUP'
FBEB FBD3             (        forth.asm):03949                 fdb     NIP
FBED C7               (        forth.asm):03950                 RFCS
FBEE CC0248BDE336     (        forth.asm):03951                 MINDREQ 1
FBF4 AEC4             (        forth.asm):03952 (5+0)           ldx     ,u
FBF6 7EE6B9           (        forth.asm):03953 (3)             jmp     NPUSH
                      (        forth.asm):03954         
FBF9 04               (        forth.asm):03955         DROP    fcb     4               79-STANDARD (REQ233)
FBFA 44524F50         (        forth.asm):03956                 fcc     'DROP'
FBFE FBE7             (        forth.asm):03957                 fdb     DUP
FC00 C7               (        forth.asm):03958                 RFCS
FC01 7EE6C7           (        forth.asm):03959 (3)             jmp     NPOP
                      (        forth.asm):03960         
FC04 04               (        forth.asm):03961         SWAP    fcb     4               79-STANDARD (REQ230)
FC05 53574150         (        forth.asm):03962                 fcc     'SWAP'
FC09 FBF9             (        forth.asm):03963                 fdb     DROP
FC0B C7               (        forth.asm):03964                 RFCS
FC0C CC0246BDE336     (        forth.asm):03965                 MINDREQ 2               We need at least two cells stacked up
FC12 10ECC4           (        forth.asm):03966 (8+0)           ldq     ,u              In place SWAP
FC15 1E06             (        forth.asm):03967 (5)             exg     d,w
FC17 10EDC4           (        forth.asm):03968 (8+0)           stq     ,u
FC1A 39               (        forth.asm):03969 (4)             rts
                      (        forth.asm):03970         
FC1B 04               (        forth.asm):03971         PICK    fcb     4
FC1C 5049434B         (        forth.asm):03972                 fcc     'PICK'
FC20 FC04             (        forth.asm):03973                 fdb     SWAP
FC22 C7               (        forth.asm):03974                 RFCS
FC23 BDE6C7           (        forth.asm):03975 (7)             jsr     NPOP
FC26 CC024A           (        forth.asm):03976 (3)     PICK1   ldd     #NSTBOT
FC29 103230           (        forth.asm):03977 (4)             subr    u,d
FC2C 1044             (        forth.asm):03978 (2)             lsrd                    D has the data stack depth in cells
FC2E 103710           (        forth.asm):03979 (4)             cmpr    x,d
FC31 2405             (        forth.asm):03980 (3)             bcc     @pick1
FC33 C60D             (        forth.asm):03981 (2)     ERRPCK  ldb     #13             Argument is greater than DEPTH
FC35 BDE640           (        forth.asm):03982 (7)             jsr     ERRHDLR         No return
FC38 1F10             (        forth.asm):03983 (4)     @pick1  tfr     x,d
FC3A 104D             (        forth.asm):03984 (2)             tstd
FC3C 27F5             (        forth.asm):03985 (3)             beq     ERRPCK
FC3E 104A             (        forth.asm):03986 (2)             decd                    Minus 1, unlike in the Z80 implementation
FC40 1048             (        forth.asm):03987 (2)             lsld                    Times 2
FC42 1F31             (        forth.asm):03988 (4)             tfr     u,x
FC44 308B             (        forth.asm):03989 (4+2)           leax    d,x
FC46 1F12             (        forth.asm):03990 (4)             tfr     x,y             For the sake of ROLL's implementation
FC48 AE84             (        forth.asm):03991 (5+0)           ldx     ,x
FC4A 3610             (        forth.asm):03992                 UCNPUSH
FC4C 39               (        forth.asm):03993 (4)             rts
                      (        forth.asm):03994         
FC4D 04               (        forth.asm):03995         OVER    fcb     4
FC4E 4F564552         (        forth.asm):03996                 fcc     'OVER'
FC52 FC1B             (        forth.asm):03997                 fdb     PICK
FC54 C7               (        forth.asm):03998                 RFCS
FC55 8E0002           (        forth.asm):03999 (3)             ldx     #2
FC58 20CC             (        forth.asm):04000 (3)             bra     PICK1
                      (        forth.asm):04001         
FC5A 04               (        forth.asm):04002         ROLL    fcb     4
FC5B 524F4C4C         (        forth.asm):04003                 fcc     'ROLL'
FC5F FC4D             (        forth.asm):04004                 fdb     OVER
FC61 C7               (        forth.asm):04005                 RFCS
FC62 BDE6C7           (        forth.asm):04006 (7)             jsr     NPOP
FC65 1F16             (        forth.asm):04007 (4)     ROLL1   tfr     x,w
FC67 8DBD             (        forth.asm):04008 (6)             bsr     PICK1           Let PICK do the error handling
FC69 3121             (        forth.asm):04009 (4+1)           leay    1,y             Point to the LSB since we're moving backward
FC6B 1F21             (        forth.asm):04010 (4)             tfr     y,x
FC6D 301E             (        forth.asm):04011 (4+1)           leax    -2,x
FC6F 103066           (        forth.asm):04012 (4)             addr    w,w
FC72 113912           (        forth.asm):04013 (6+?)           tfm     x-,y-
FC75 7EE6C7           (        forth.asm):04014 (3)             jmp     NPOP
                      (        forth.asm):04015         
FC78 03               (        forth.asm):04016         ROT     fcb     3
FC79 524F54           (        forth.asm):04017                 fcc     'ROT'
FC7C FC5A             (        forth.asm):04018                 fdb     ROLL
FC7E C7               (        forth.asm):04019                 RFCS
FC7F 8E0003           (        forth.asm):04020 (3)             ldx     #3
FC82 20E1             (        forth.asm):04021 (3)             bra     ROLL1
                      (        forth.asm):04022         
FC84 04               (        forth.asm):04023         MROT    fcb     4
FC85 2D524F54         (        forth.asm):04024                 fcc     '-ROT'
FC89 FC78             (        forth.asm):04025                 fdb     ROT
FC8B C7               (        forth.asm):04026                 RFCS
FC8C 8DF1             (        forth.asm):04027                 RFXT    bsr,ROT+6       XT for ROT
FC8E 20EF             (        forth.asm):04028                 RFXT    bra,ROT+6       XT for ROT
                      (        forth.asm):04029         
FC90 02               (        forth.asm):04030         CCOMMA  fcb     2               79-STANDARD (REF)
FC91 432C             (        forth.asm):04031                 fcc     'C,'
FC93 FC84             (        forth.asm):04032                 fdb     MROT
FC95 C7               (        forth.asm):04033                 RFCS
FC96 BDE6C7           (        forth.asm):04034 (7)             jsr     NPOP
FC99 1F10             (        forth.asm):04035 (4)             tfr     x,d
FC9B 109E08           (        forth.asm):04036 (5)             ldy     DICEND
FC9E E7A0             (        forth.asm):04037 (4+1)           stb     ,y+
FCA0 109F08           (        forth.asm):04038 (5)             sty     DICEND
FCA3 39               (        forth.asm):04039 (4)             rts
                      (        forth.asm):04040         
FCA4 01               (        forth.asm):04041         COMMA   fcb     1               79-STANDARD (REQ143)
FCA5 2C               (        forth.asm):04042                 fcc     ','
FCA6 FC90             (        forth.asm):04043                 fdb     CCOMMA
FCA8 C7               (        forth.asm):04044                 RFCS
FCA9 BDE6C7           (        forth.asm):04045 (7)             jsr     NPOP
FCAC 109E08           (        forth.asm):04046 (5)             ldy     DICEND
FCAF AFA1             (        forth.asm):04047 (5+2)           stx     ,y++
FCB1 109F08           (        forth.asm):04048 (5)             sty     DICEND
FCB4 39               (        forth.asm):04049 (4)             rts
                      (        forth.asm):04050         
FCB5 05               (        forth.asm):04051         ALLOT   fcb     5               79-STANDARD (REQ154)
FCB6 414C4C4F54       (        forth.asm):04052                 fcc     'ALLOT'         ( signedbytecount -- )
FCBB FCA4             (        forth.asm):04053                 fdb     COMMA
FCBD C7               (        forth.asm):04054                 RFCS
FCBE BDE6C7           (        forth.asm):04055 (7)             jsr     NPOP
FCC1 109E08           (        forth.asm):04056 (5)             ldy     DICEND
FCC4 103012           (        forth.asm):04057 (4)             addr    x,y
FCC7 109F08           (        forth.asm):04058 (5)             sty     DICEND
FCCA 39               (        forth.asm):04059 (4)             rts
                      (        forth.asm):04060         
FCCB 04               (        forth.asm):04061         FILL    fcb     4               79-STANDARD (REQ234)
FCCC 46494C4C         (        forth.asm):04062                 fcc     'FILL'
FCD0 FCB5             (        forth.asm):04063                 fdb     ALLOT
FCD2 C7               (        forth.asm):04064                 RFCS
FCD3 BDE6C7           (        forth.asm):04065 (7)             jsr     NPOP
FCD6 1F16             (        forth.asm):04066 (4)             tfr     x,w             Byte fill value to W
FCD8 BDE6C7           (        forth.asm):04067 (7)     FILL1   jsr     NPOP
FCDB 1F12             (        forth.asm):04068 (4)             tfr     x,y             Byte count to Y
FCDD 1E26             (        forth.asm):04069 (5)             exg     y,w             Byte count to W, byte fill value to Y
FCDF BDE6C7           (        forth.asm):04070 (7)             jsr     NPOP            Destination address to X
FCE2 105D             (        forth.asm):04071 (2)             tstw
FCE4 2F0B             (        forth.asm):04072 (3)             ble     @filend
FCE6 1F20             (        forth.asm):04073 (4)             tfr     y,d             Byte fill value to B
FCE8 E784             (        forth.asm):04074 (4+0)           stb     ,x
FCEA 105A             (        forth.asm):04075 (2)             decw
FCEC 3101             (        forth.asm):04076 (4+1)           leay    1,x
FCEE 113812           (        forth.asm):04077 (6+?)           tfm     x+,y+
FCF1 39               (        forth.asm):04078 (4)     @filend rts
                      (        forth.asm):04079         
FCF2 06               (        forth.asm):04080         BLANKS  fcb     6               79-STANDARD (REF152)
FCF3 424C414E4B53     (        forth.asm):04081                 fcc     'BLANKS'
FCF9 FCCB             (        forth.asm):04082                 fdb     FILL
FCFB C7               (        forth.asm):04083                 RFCS
FCFC 10860020         (        forth.asm):04084 (4)             ldw     #SP
FD00 20D6             (        forth.asm):04085 (3)             bra     FILL1
                      (        forth.asm):04086         
FD02 06               (        forth.asm):04087         CMOVED  fcb     6               FORTH-83
FD03 434D4F56453E     (        forth.asm):04088                 fcc     'CMOVE>'
FD09 FCF2             (        forth.asm):04089                 fdb     BLANKS
FD0B C7               (        forth.asm):04090                 RFCS
FD0C BDE48D           (        forth.asm):04091 (7)             jsr     ACQMOVP
FD0F 105D             (        forth.asm):04092 (2)             tstw
FD11 270D             (        forth.asm):04093 (3)             beq     @cmovd1
FD13 105A             (        forth.asm):04094 (2)             decw
FD15 103061           (        forth.asm):04095 (4)             addr    w,x
FD18 103062           (        forth.asm):04096 (4)             addr    w,y
FD1B 105C             (        forth.asm):04097 (2)             incw
FD1D 113912           (        forth.asm):04098 (6+?)           tfm     x-,y-
FD20 39               (        forth.asm):04099 (4)     @cmovd1 rts
                      (        forth.asm):04100         
FD21 05               (        forth.asm):04101         CMOVE   fcb     5               79-STANDARD (REQ153)
FD22 434D4F5645       (        forth.asm):04102                 fcc     'CMOVE'
FD27 FD02             (        forth.asm):04103                 fdb     CMOVED
FD29 C7               (        forth.asm):04104                 RFCS
FD2A BDE48D           (        forth.asm):04105 (7)             jsr     ACQMOVP
FD2D 113812           (        forth.asm):04106 (6+?)           tfm     x+,y+
FD30 39               (        forth.asm):04107 (4)             rts
                      (        forth.asm):04108         
FD31 04               (        forth.asm):04109         MOVE    fcb     4               79-STANDARD (REQ113)
FD32 4D4F5645         (        forth.asm):04110                 fcc     'MOVE'          ( srcaddr dstaddr ncells -- )
FD36 FD21             (        forth.asm):04111                 fdb     CMOVE
FD38 C7               (        forth.asm):04112                 RFCS
FD39 BDE48D           (        forth.asm):04113 (7)             jsr     ACQMOVP
FD3C 105D             (        forth.asm):04114 (2)             tstw
FD3E 2F06             (        forth.asm):04115 (3)             ble     @move1
FD40 103066           (        forth.asm):04116 (4)             addr    w,w             Convert cells to bytes
FD43 113812           (        forth.asm):04117 (6+?)           tfm     x+,y+
FD46 39               (        forth.asm):04118 (4)     @move1  rts
                      (        forth.asm):04119         
FD47 05               (        forth.asm):04120         CELLS   fcb     5               ANSI-X3.215-1994
FD48 43454C4C53       (        forth.asm):04121                 fcc     'CELLS'
FD4D FD31             (        forth.asm):04122                 fdb     MOVE
FD4F C7               (        forth.asm):04123                 RFCS
FD50 BDE6C7           (        forth.asm):04124 (7)             jsr     NPOP
FD53 103011           (        forth.asm):04125 (4)             addr    x,x
FD56 3610             (        forth.asm):04126                 UCNPUSH
FD58 39               (        forth.asm):04127 (4)             rts
                      (        forth.asm):04128         
FD59 04               (        forth.asm):04129         LAST    fcb     4               79-STANDARD (REF)
FD5A 4C415354         (        forth.asm):04130                 fcc     'LAST'
FD5E FD47             (        forth.asm):04131                 fdb     CELLS
FD60 C7               (        forth.asm):04132                 RFCS
FD61 9E06             (        forth.asm):04133 (4)             ldx     LSTWAD
FD63 7EE6B9           (        forth.asm):04134 (3)             jmp     NPUSH
                      (        forth.asm):04135         
FD66 04               (        forth.asm):04136         HERE    fcb     4               79-STANDARD (REQ188)
FD67 48455245         (        forth.asm):04137                 fcc     'HERE'
FD6B FD59             (        forth.asm):04138                 fdb     LAST
FD6D C7               (        forth.asm):04139                 RFCS
FD6E 9E08             (        forth.asm):04140 (4)             ldx     DICEND
FD70 7EE6B9           (        forth.asm):04141 (3)             jmp     NPUSH
                      (        forth.asm):04142         
FD73 02               (        forth.asm):04143         PLUSST  fcb     2               79-STANDARD (REQ157)
FD74 2B21             (        forth.asm):04144                 fcc     '+!'            ( incr addr -- )
FD76 FD66             (        forth.asm):04145                 fdb     HERE
FD78 C7               (        forth.asm):04146                 RFCS
FD79 CC0246BDE336     (        forth.asm):04147                 MINDREQ 2               We need at least two cells stacked up
FD7F AEC4             (        forth.asm):04148 (5+0)           ldx     ,u              ADDR to X
FD81 EC84             (        forth.asm):04149 (5+0)           ldd     ,x              @ADDR to D
FD83 E342             (        forth.asm):04150 (5+1)           addd    2,u             Add INCR to D
FD85 ED84             (        forth.asm):04151 (5+0)   PLUSST1 std     ,x              Store the sum back to ADDR
FD87 3344             (        forth.asm):04152 (4+1)           leau    4,u             Drop two cells from the data stack
FD89 39               (        forth.asm):04153 (4)             rts
                      (        forth.asm):04154         
FD8A 03               (        forth.asm):04155         ONEPST  fcb     3               79-STANDARD (REF)
FD8B 312B21           (        forth.asm):04156                 fcc     '1+!'
FD8E FD73             (        forth.asm):04157                 fdb     PLUSST
FD90 C7               (        forth.asm):04158                 RFCS
FD91 CC0248BDE336     (        forth.asm):04159                 MINDREQ 1
FD97 AEC4             (        forth.asm):04160 (5+0)           ldx     ,u
FD99 EC84             (        forth.asm):04161 (5+0)           ldd     ,x
FD9B 104C             (        forth.asm):04162 (2)             incd
FD9D ED84             (        forth.asm):04163 (5+0)           std     ,x
FD9F 3342             (        forth.asm):04164 (4+1)           leau    2,u
FDA1 39               (        forth.asm):04165 (4)             rts
                      (        forth.asm):04166         
FDA2 02               (        forth.asm):04167         MINUSST fcb     2               79-STANDARD (REQ157)
FDA3 2D21             (        forth.asm):04168                 fcc     '-!'            ( incr addr -- )
FDA5 FD8A             (        forth.asm):04169                 fdb     ONEPST
FDA7 C7               (        forth.asm):04170                 RFCS
FDA8 CC0246BDE336     (        forth.asm):04171                 MINDREQ 2               We need at least two cells stacked up
FDAE AEC4             (        forth.asm):04172 (5+0)           ldx     ,u              ADDR to X
FDB0 EC84             (        forth.asm):04173 (5+0)           ldd     ,x              @ADDR to D
FDB2 A342             (        forth.asm):04174 (5+1)           subd    2,u             Substract INCR from D
FDB4 20CF             (        forth.asm):04175 (3)             bra     PLUSST1
                      (        forth.asm):04176         
FDB6 02               (        forth.asm):04177         CSTORE  fcb     2               79-STANDARD (REQ219)
FDB7 4321             (        forth.asm):04178                 fcc     'C!'            ( val8 addr -- )
FDB9 FDA2             (        forth.asm):04179                 fdb     MINUSST
FDBB C7               (        forth.asm):04180                 RFCS
FDBC CC0246BDE336     (        forth.asm):04181                 MINDREQ 2               We need at least two cells stacked up
FDC2 A643             (        forth.asm):04182 (4+1)           lda     3,u             VAL8 to A
FDC4 A7D4             (        forth.asm):04183 (4+3)           sta     [,u]            Actual store to ADDR
FDC6 3344             (        forth.asm):04184 (4+1)           leau    4,u             Drop two cells from the data stack
FDC8 39               (        forth.asm):04185 (4)             rts
                      (        forth.asm):04186         
FDC9 01               (        forth.asm):04187         STORE   fcb     1               79-STANDARD (REQ112)
FDCA 21               (        forth.asm):04188                 fcc     '!'             ( data addr -- )
FDCB FDB6             (        forth.asm):04189                 fdb     CSTORE
FDCD C7               (        forth.asm):04190                 RFCS
FDCE CC0246BDE336     (        forth.asm):04191                 MINDREQ 2               At least two cells need to be stacked up
FDD4 EC42             (        forth.asm):04192 (5+1)           ldd     2,u             DATA to D
FDD6 EDD4             (        forth.asm):04193 (5+3)           std     [,u]            Actual store to ADDR
FDD8 3344             (        forth.asm):04194 (4+1)           leau    4,u             Drop two cells from the user stack
FDDA 39               (        forth.asm):04195 (4)             rts
                      (        forth.asm):04196         
FDDB 02               (        forth.asm):04197         CFETCH  fcb     2               79-STANDARD (REQ156)
FDDC 4340             (        forth.asm):04198                 fcc     'C@'            ( addr -- val8 )
FDDE FDC9             (        forth.asm):04199                 fdb     STORE
FDE0 C7               (        forth.asm):04200                 RFCS
FDE1 CC0248BDE336     (        forth.asm):04201                 MINDREQ 1               We need at least one cell stacked up
FDE7 4F               (        forth.asm):04202 (1)             clra
FDE8 E6D4             (        forth.asm):04203 (4+3)           ldb     [,u]
FDEA EDC4             (        forth.asm):04204 (5+0)           std     ,u
FDEC 39               (        forth.asm):04205 (4)             rts
                      (        forth.asm):04206         
FDED 01               (        forth.asm):04207         QMARK   fcb     1               79-STANDARD (REQ194)
FDEE 3F               (        forth.asm):04208                 fcc     '?'
FDEF FDDB             (        forth.asm):04209                 fdb     CFETCH
FDF1 C7               (        forth.asm):04210                 RFCS
FDF2 BD0C15           (        forth.asm):04211 (7)             jsr     RAMFTCH         Call the RAM based incarnation of @
FDF5 7EF518           (        forth.asm):04212                 RFXT    jmp,DOT+4       XT for .
                      (        forth.asm):04213         
                      (        forth.asm):04214         * End of ROM part of the builtin dictionary.
     FDF8             (        forth.asm):04215         THEEND  equ     *               This is the end, Beautiful friend
                      (        forth.asm):04216         *                               This is the end, My only friend
                      (        forth.asm):04217         
                      (        forth.asm):04218         * This transactional word is relocated to RAM, so that we can compile new
                      (        forth.asm):04219         * definitions. FORTHIN will take care of that and adjust the relevant pointers.
FDF8 01               (        forth.asm):04220         FETCH   fcb     1               79-STANDARD (REQ199)
FDF9 40               (        forth.asm):04221                 fcc     '@'             ( addr -- data )
FDFA FDED             (        forth.asm):04222                 fdb     QMARK
FDFC C7               (        forth.asm):04223                 RFCS
FDFD CC0248BDE336     (        forth.asm):04224                 MINDREQ 1               At least one cell needs to be stacked up
FE03 ECD4             (        forth.asm):04225 (5+3)           ldd     [,u]
FE05 EDC4             (        forth.asm):04226 (5+0)           std     ,u              Returned through the data stack
FE07 39               (        forth.asm):04227 (4)             rts
                      (        forth.asm):04228         
     FE08             (        forth.asm):04229         REALEND equ     *
                      (        forth.asm):04230         
                      (        forth.asm):04231         *******************************************************************************
                      (        forth.asm):04232         * String literals.
                      (        forth.asm):04233         
                      (        forth.asm):04234         * Using CR+LF as it is Minicom's default.
                      (        forth.asm):04235         
                      (        forth.asm):04236         * Clear the screen, VT100 style.
FE08 1B5B481B5B4A0D00 (        forth.asm):04237         CSVT100 fcb     $1B,'[','H',$1B,'[','J',CR,NUL
                      (        forth.asm):04238         
FE10 1B5B481B5B4A0D   (        forth.asm):04239         BOOTMSG fcb     $1B,'[','H',$1B,'[','J',CR
FE17 5A3739466F727468 (        forth.asm):04240                 fcc     'Z79Forth 6309/'
     20363330392F
                      (        forth.asm):04241                 POLINTM                 Polling/interrupt flag mode
FE25 50               (          POLINTM):00001                 fcb     'P'
FE26 20464F5254482D37 (        forth.asm):04242                 fcc     ' FORTH-79 Standard Sub-set'
     39205374616E6461
     7264205375622D73
     6574
FE40 0D0A             (        forth.asm):04243                 fcb     CR,LF
FE42 3230323130373036 (        forth.asm):04244                 fcc     '20210706 Copyright Francois Laagel (2019)'
     20436F7079726967
     6874204672616E63
     6F6973204C616167
     656C202832303139
     29
FE6B 0D0A0D0A00       (        forth.asm):04245                 fcb     CR,LF,CR,LF,NUL
                      (        forth.asm):04246         
FE70 52414D204F4B3A20 (        forth.asm):04247         RAMOKM  fcc     'RAM OK: 32 KB'
     3332204B42
FE7D 0D0A00           (        forth.asm):04248         CRLFSTR fcb     CR,LF,NUL
                      (        forth.asm):04249         
FE80 52414D2063686563 (        forth.asm):04250         RAMFM   fcc     'RAM check failed'
     6B206661696C6564
FE90 0D0A00           (        forth.asm):04251                 fcb     CR,LF,NUL
                      (        forth.asm):04252         
FE93 204F4B           (        forth.asm):04253         OKFEEDB fcc     ' OK'
FE96 0D0A00           (        forth.asm):04254                 fcb     CR,LF,NUL
                      (        forth.asm):04255         
                      (        forth.asm):04256         * Error messages for IODZHDL.
FE99 496C6C6567616C20 (        forth.asm):04257         IOPERRM fcn     'Illegal opcode near '
     6F70636F6465206E
     6561722000
FEAE 4469766973696F6E (        forth.asm):04258         DV0ERRM fcn     'Division by 0 near '
     2062792030206E65
     61722000
                      (        forth.asm):04259         
FEC2 4461746120737461 (        forth.asm):04260         ERRMTBL fcn     'Data stack overflow'   Error 0
     636B206F76657266
     6C6F7700
FED6 4461746120737461 (        forth.asm):04261                 fcn     'Data stack underflow'  Error 1
     636B20756E646572
     666C6F7700
FEEB 556E646566696E65 (        forth.asm):04262                 fcn     'Undefined'             Error 2
     6400
FEF5 557365722041424F (        forth.asm):04263                 fcn     'User ABORT'            Error 3
     525400
FF00 00               (        forth.asm):04264                 fcn     ''                      Error 4 (formerly "Division by zero")
FF01 4D697373696E6720 (        forth.asm):04265                 fcn     'Missing word name'     Error 5
     776F7264206E616D
     6500
FF13 496E636F72726563 (        forth.asm):04266                 fcn     'Incorrect STATE'       Error 6
     7420535441544500
FF23 52657475726E2073 (        forth.asm):04267                 fcn     'Return stack overflow' Error 7
     7461636B206F7665
     72666C6F7700
FF39 52657475726E2073 (        forth.asm):04268                 fcn     'Return stack underflow' Error 8
     7461636B20756E64
     6572666C6F7700
FF50 496C6C6567616C20 (        forth.asm):04269                 fcn     'Illegal construct'     Error 9
     636F6E7374727563
     7400
FF62 417373657274696F (        forth.asm):04270                 fcn     'Assertion failed'      Error 10
     6E206661696C6564
     00
FF73 522F4F20776F7264 (        forth.asm):04271                 fcn     'R/O word'              Error 11
     00
FF7C 4D697373696E6720 (        forth.asm):04272                 fcn     'Missing delimiter'     Error 12
     64656C696D697465
     7200
FF8E 496C6C6567616C20 (        forth.asm):04273                 fcn     'Illegal argument'      Error 13
     617267756D656E74
     00
FF9F 4E6F206D61746368 (        forth.asm):04274                 fcn     'No matching CREATE'    Error 14
     696E672043524541
     544500
FFB2 496E76616C696420 (        forth.asm):04275                 fcn     'Invalid BASE'          Error 15
     4241534500
FFBF 576F7264206E616D (        forth.asm):04276                 fcn     'Word name too long'    Error 16
     6520746F6F206C6F
     6E6700
FFD2 494F206572726F72 (        forth.asm):04277                 fcn     'IO error'              Error 17
     00
                      (        forth.asm):04278         
                      (        forth.asm):04279         * A-list used for numeric literal base prefixes.
FFDB 24               (        forth.asm):04280         BASALST fcc     '$'             Hexadecimal prefix
FFDC 10               (        forth.asm):04281                 fcb     16
FFDD 26               (        forth.asm):04282                 fcc     '&'             Decimal prefix
FFDE 0A               (        forth.asm):04283                 fcb     10
FFDF 23               (        forth.asm):04284                 fcc     '#'             Decimal prefix (an ANSI concession)
FFE0 0A               (        forth.asm):04285                 fcb     10
FFE1 25               (        forth.asm):04286                 fcc     '%'             Binary prefix
FFE2 02               (        forth.asm):04287                 fcb     2
FFE3 40               (        forth.asm):04288                 fcc     '@'             Octal prefix
FFE4 08               (        forth.asm):04289                 fcb     8
FFE5 00               (        forth.asm):04290                 fcb     0               End of list marker
                      (        forth.asm):04291         
                      (        forth.asm):04292         * Under no circumstance should the following symbol be negative!
     000A             (        forth.asm):04293         AVL     equ     VECTBL-*        Available EEPROM space left
                      (        forth.asm):04294         
                      (        forth.asm):04295         *******************************************************************************
                      (        forth.asm):04296         * Interrupt vector table
                      (        forth.asm):04297                 org     VECTBL
                      (        forth.asm):04298         
FFF0 E000             (        forth.asm):04299                 fdb     IODZHDL         Illegal opcode/Division by zero trap
FFF2 E035             (        forth.asm):04300                 fdb     SWI3HDL         SWI 3 interrupt vector address
FFF4 E035             (        forth.asm):04301                 fdb     SWI2HDL         SWI 2 interrupt vector address
FFF6 E035             (        forth.asm):04302                 fdb     FIRQHDL         FIRQ interrupt vector address
FFF8 E035             (        forth.asm):04303                 fdb     IRQHDL          IRQ interrupt vector address
FFFA E035             (        forth.asm):04304                 fdb     SWIHDL          SWI interrupt vector address
FFFC E035             (        forth.asm):04305                 fdb     NMIHDL          NMI vector address
FFFE E037             (        forth.asm):04306                 fdb     RSTHDL          RESET vector address
                      (        forth.asm):04307         

Symbol Table:
[ G] _BS                              E1F1
[ G] _DMPHDR                          FB29
[ G] _DMPINT                          FB08
[ G] _INTERP                          E0BF
[ G] ABORT                            EFD1
[ G] ABS                              EE65
[ G] AC8N1                            0014
[ G] ACCEPT                           F667
[ G] ACD16                            0001
[ G] ACD64                            0002
[ G] ACDVSEL                          0001
[ G] ACIACTL                          D800
[ G] ACIADAT                          D801
[ G] ACIISVC                          0080
[ G] ACIRDRF                          0001
[ G] ACIRSET                          0043
[ G] ACIRTS0                          0015
[ G] ACIRTS1                          0055
[ G] ACITDRE                          0002
[ G] ACQMOVP                          E48D
[ G] ACQVMRA                          E493
[ G] ACRDINT                          0000
[ G] ACRST                            0003
[ G] ACRTS0                           0000
[ G] ACRTS1                           0040
[ G] ADDS                             E19C
[ G] ADIV16                           E16F
[ G] AGAIN                            EEA1
[ G] ALLOT                            FCB5
[ G] AND                              ED4F
[ G] AVL                              000A
[ G] BASALST                          FFDB
[ G] BASBKUP                          0128
[ G] BASE                             FA10
[ G] BCSOPC                           2503
[ G] BDICEND                          010C
[ G] BDIRTY                           0004
[ G] BEGIN                            EE93
[ G] BFDISP                           0410
[ G] BIN                              FA1E
[ G] BINUSE                           0001
[ G] BKCHAR                           F151
[ G] BKIN2PT                          E70D
[ G] BKQUOT                           F01F
[ G] BKSLSH                           F207
[ G] BL                               F584
[ G] BLANKS                           FCF2
[ G] BLK                              E93F
[ G] BLKSIZ                           0400
[ G] BLOCK                            E910
[ G] BLSTWAD                          010A
[ G] BMAPPD                           0002
[ G] BNEOPC                           2603
[ G] BOBLKNO                          0402
[ G] BOFLAGS                          0401
[ G] BOOTMSG                          FE10
[ G] BOTERM                           0400
[ G] BS                               0008
[ G] BSBFADR                          011C
[ G] BUF0                             03F0
[ G] BUF1                             0800
[ G] BUFFER                           E8C3
[ G] BYE                              F147
[ G] CCOMMA                           FC90
[ G] CELLS                            FD47
[ G] CF1BKRD                          E812
[ G] CF1BKWR                          E82D
[ G] CF1BPRE                          E7F5
[ G] CF1SRD                           E7C7
[ G] CF1SWR                           E7E0
[ G] CFANTHS                          E772
[ G] CFBASE                           C000
[ G] CFBSYB                           0080
[ G] CFCARDP                          0136
[ G] CFCHIGR                          C005
[ G] CFCLOWR                          C004
[ G] CFCMDIS                          E757
[ G] CFCMMIR                          0137
[ G] CFCOMDR                          C007
[ G] CFDATAR                          C000
[ G] CFDRHDR                          C006
[ G] CFDRQB                           0008
[ G] CFDRSEL                          E769
[ G] CFDSCB                           0010
[ G] CFDWFB                           0020
[ G] CFERRB                           0001
[ G] CFERRCD                          0138
[ G] CFERRCK                          E74A
[ G] CFERROR                          C001
[ G] CFETCH                           FDDB
[ G] CFFEATR                          C001
[ G] CFIDDEV                          00EC
[ G] CFINIT                           E790
[ G] CFLAG                            0001
[ G] CFR1SRA                          E7DF
[ G] CFRDY                            E734
[ G] CFRDYB                           0040
[ G] CFRSCTS                          0020
[ G] CFSCNTR                          C002
[ G] CFSCSZ                           0200
[ G] CFSETFT                          00EF
[ G] CFSNUMR                          C003
[ G] CFSTATR                          C007
[ G] CFWAIT                           E72C
[ G] CFWSCTS                          0030
[ G] CHAR                             F160
[ G] CHKNDPT                          E336
[ G] CHKRTS                           E139
[ G] CKBASE                           E2CC
[ G] CKBASRA                          E2DC
[ G] CKDPTRA                          E341
[ G] CKNBPFX                          E29F
[ G] CMDBFSZ                          0084
[ G] CMDBUF                           02CA
[ G] CMDLNSZ                          0129
[ G] CMOVE                            FD21
[ G] CMOVED                           FD02
[ G] CMP2                             E476
[ G] CMP2RA                           E47C
[ G] CMPCOM1                          F07B
[ G] CMPCOMA                          F06C
[ G] COM                              ED66
[ G] COM0                             ED6D
[ G] COMMA                            FCA4
[ G] COMP                             E10C
[ G] COMPC                            F07E
[ G] COMPLRA                          E122
[ G] COMPR                            F096
[ G] CONS                             EABB
[ G] CONTIND                          F712
[ G] CONVERT                          F38F
[ G] COUNT                            F5FD
[ G] CR                               000D
[ G] CREAT0                           EA4A
[ G] CREAT1                           EA62
[ G] CREATE                           EA40
[ G] CRLF                             F5C9
[ G] CRLFSTR                          FE7D
[ G] CSSNTVE                          0000
[ G] CSTORE                           FDB6
[ G] CSUMFLM                          EBA8
[ G] CSVT100                          FE08
[ G] CURTOKL                          0132
[ G] CVISSGN                          0131
[ G] CVNSTR                           E341
[ G] CVT                              F457
[ G] CVT0                             F45E
[ G] CVT1                             F466
[ G] CVTB                             F507
[ G] CVTE                             F40B
[ G] CVTFCN                           012F
[ G] DASHTR                           F613
[ G] DDUMP                            FB67
[ G] DEBUG                            0000
[ G] DECIMAL                          FA3A
[ G] DEFFLG                           0134
[ G] DEFFLM                           0040
[ G] DEPTH                            EA2A
[ G] DEV0                             C000
[ G] DEV1                             C400
[ G] DEV2                             C800
[ G] DEV3                             CC00
[ G] DEV4                             D000
[ G] DEV5                             D400
[ G] DEV6                             D800
[ G] DEV7                             DC00
[ G] DICEND                           0108
[ G] DIFF                             ECE3
[ G] DIV                              F88D
[ G] DIV1                             F896
[ G] DIVFCN                           012D
[ G] DLESS                            F2E1
[ G] DNEG                             F2AE
[ G] DO                               EBBF
[ G] DOES                             EA6A
[ G] DOESEX                           EA79
[ G] DOEX                             EBD2
[ G] DOT                              F513
[ G] DOTR                             F53D
[ G] DOTR0                            F547
[ G] DOTTICK                          FB50
[ G] DPLUS                            F28C
[ G] DPOPRA                           E6D5
[ G] DPSHRA                           E6C6
[ G] DROP                             FBF9
[ G] DUMP                             FA58
[ G] DUP                              FBE7
[ G] DV0ERRM                          FEAE
[ G] DZEQ                             F2D4
[ G] EBUFS                            E848
[ G] ELSE                             EC94
[ G] EMIT                             F77E
[ G] EMPT1B                           E274
[ G] EMPTYB                           E26C
[ G] EMXASXT                          E14D
[ G] END                              EF0A
[ G] EQ                               ECC7
[ G] ERRHD1                           E643
[ G] ERRHDLR                          E640
[ G] ERRMTBL                          FEC2
[ G] ERRPCK                           FC33
[ G] ETX                              0003
[ G] EXCT                             F12D
[ G] EXIT                             EEBF
[ G] EXPCT1                           F658
[ G] EXPECT                           F64E
[ G] FDCTSYM                          E49E
[ G] FETCH                            FDF8
[ G] FFLAG                            0040
[ G] FILL                             FCCB
[ G] FILL1                            FCD8
[ G] FIND                             EFE5
[ G] FINDSYM                          E512
[ G] FIRQHDL                          E035
[ G] FLUSH                            E89D
[ G] FNDPLD                           0110
[ G] FORGET                           F0DE
[ G] FORTHIN                          E240
[ G] GETCH                            E1C5
[ G] GETS                             E1FD
[ G] HDMP2                            E18D
[ G] HDMP4                            E174
[ G] HDRCSUM                          EB52
[ G] HDRSKIP                          EB48
[ G] HERE                             FD66
[ G] HEX                              FA4B
[ G] HEX1D                            E15B
[ G] HEXBFSZ                          0050
[ G] HEXBUF                           034E
[ G] HOLD                             F43B
[ G] HT                               0009
[ G] HVCONV                           0001
[ G] HVFIRQ                           0000
[ G] ICHECK                           EB5E
[ G] IF                               EC53
[ G] IFEX                             EC7B
[ G] ILLOPC                           00C7
[ G] IMDFLG                           0133
[ G] IMDFLM                           0080
[ G] IMMED                            EB02
[ G] IMMED1                           EB11
[ G] INDEX                            E981
[ G] INDI                             EF6F
[ G] INDIP                            EF94
[ G] INDJ                             EF9E
[ G] INDJP                            EFA7
[ G] INDK                             EFB1
[ G] INF                              EE24
[ G] INIT                             E047
[ G] INSBPAD                          F4F4
[ G] INTERP                           E0A7
[ G] INTISRA                          E0FA
[ G] INTRPRA                          E107
[ G] INVERT                           ED79
[ G] IODZHDL                          E000
[ G] IOERR                            E7DA
[ G] IOPERRM                          FE99
[ G] IOSTRT                           C000
[ G] IRDPTH                           012B
[ G] IRQHDL                           E035
[ G] ISNEGF                           0130
[ G] JMPOPC                           007E
[ G] JSRLAST                          0114
[ G] JSROPC                           00BD
[ G] KEY                              F76C
[ G] KEYP                             F747
[ G] LAST                             FD59
[ G] LBRACK                           F017
[ G] LDXOPC                           008E
[ G] LEAVE                            EF5A
[ G] LF                               000A
[ G] LINE                             E966
[ G] LIST                             E9B5
[ G] LITER                            E45A
[ G] LITERAL                          EA97
[ G] LOAD                             F6A1
[ G] LOAD1                            F6B2
[ G] LOCWRT                           E3F8
[ G] LOOP                             EBDB
[ G] LOOP1                            EBE6
[ G] LOOPEX                           EC02
[ G] LPAR                             F1CD
[ G] LSTWAD                           0106
[ G] LWMNRA                           E40E
[ G] MAX                              EE33
[ G] MDIV                             F8D4
[ G] MILLIS                           F72C
[ G] MILLIS1                          F73B
[ G] MIN                              EE4C
[ G] MINTLRA                          E0BD
[ G] MINUS                            F7CB
[ G] MINUSST                          FDA2
[ G] MOD                              F8C7
[ G] MONFLM                           0020
[ G] MONITOR                          EB2B
[ G] MORE                             E0D5
[ G] MOVE                             FD31
[ G] MROT                             FC84
[ G] MRUBUFA                          011A
[ G] MSLCNT                           03E2
[ G] MULT                             F851
[ G] NAK                              0015
[ G] NBCTFB0                          0135
[ G] NCLR                             EA0E
[ G] NDCTWKS                          E538
[ G] NEGATE                           EE7C
[ G] NFLAG                            0008
[ G] NIP                              FBD3
[ G] NMCVCRA                          E134
[ G] NMCVIRA                          E0D0
[ G] NMIHDL                           E035
[ G] NOT                              EDD1
[ G] NPOP                             E6C7
[ G] NPUSH                            E6B9
[ G] NSTBOT                           024A
[ G] NSTKSZ                           00C0
[ G] NSTTOP                           018A
[ G] NUL                              0000
[ G] NULP                             EDB9
[ G] NUMCVRA                          E335
[ G] NUMCVT                           E2DC
[ G] NXTBLK                           F6F7
[ G] NXTBLK1                          F702
[ G] OCTAL                            FA2B
[ G] OKFEEDB                          FE93
[ G] ONEL                             F810
[ G] ONEM                             F7DF
[ G] ONEP                             F7A4
[ G] ONEPST                           FD8A
[ G] OR                               ED39
[ G] OVER                             FC4D
[ G] PAD                              F5D2
[ G] PADBSZ                           0051
[ G] PADBUF                           0139
[ G] PAGE                             F5BB
[ G] PAYLOAD                          F921
[ G] PICK                             FC1B
[ G] PICK1                            FC26
[ G] PLOAD                            010E
[ G] PLOOP                            EC07
[ G] PLOOPEX                          EC15
[ G] PLOPEX1                          EC18
[ G] PLUS                             F790
[ G] PLUSST                           FD73
[ G] PLUSST1                          FD85
[ G] POSTPON                          F02B
[ G] pragma                           0000
[ G] PRBLKIN                          E61B
[ G] PSTR                             F225
[ G] ptop0                            F51C
[ G] PUTCH                            E1B6
[ G] PUTCR                            E1E7
[ G] PUTS                             E1DA
[ G] QMARK                            FDED
[ G] QRYDUP                           FBA2
[ G] QUIT                             EFBA
[ G] RAMCHK                           E057
[ G] RAMFAIL                          E069
[ G] RAMFM                            FE80
[SG] RAMFTCH                          0C15
[SG] RAMFTCH                          0C14
[ G] RAMOK                            E07B
[ G] RAMOKM                           FE70
[ G] RAMSIZE                          8000
[ G] RAMSTRT                          0000
[ G] RBRACK                           F00D
[ G] RCLR                             EA1A
[ G] RDEPTH                           012A
[ G] REALEND                          FE08
[ G] RECADDR                          0112
[ G] RECURSE                          F0CE
[ G] RELFEAT                          0001
[ G] REPEAT                           EF1F
[ G] RFETCH                           EF8C
[ G] RFROM                            EF42
[ G] ROLL                             FC5A
[ G] ROLL1                            FC65
[ G] ROMSTRT                          E000
[ G] ROT                              FC78
[ G] RPICKN                           EF76
[ G] RPOP                             E6F4
[ G] RPOPRA                           E70D
[ G] RPSHRA                           E6F3
[ G] RPUSH                            E6D6
[ G] RSBSPFX                          E2C5
[ G] RSP                              0100
[ G] RSTBOT                           02CA
[ G] RSTHDL                           E037
[ G] RSTKSZ                           0080
[ G] RSTRCT                           EB1B
[ G] RSTTOP                           024A
[ G] RTSOPC                           0039
[ G] RTSREMV                          012C
[ G] SAVBUF                           E85C
[ G] SCNETOK                          E28D
[ G] SCNSTOK                          E27F
[ G] SCR                              E959
[ G] SERBSZ                           0040
[ G] SHARPS                           F44B
[ G] SHIFT                            F826
[ G] SIGN                             F424
[ G] SINFEQ                           ED00
[ G] SLEN                             E1A7
[ G] SOURCE                           F1E9
[ G] SP                               0020
[ G] SPACE                            F590
[ G] SPACES                           F59E
[ G] SQUOTE                           F23A
[ G] SSDFEAT                          0001
[ G] STATE                            FA01
[ G] STOD                             E9F4
[ G] STORE                            FDC9
[ G] STRSL1                           F8EA
[ G] STRSLMD                          F90A
[ G] STRSLSH                          F8E0
[ G] STSLFCN                          012E
[ G] SUP                              EE15
[ G] SWAP                             FC04
[ G] SWDIC                            E38A
[ G] SWI2HDL                          E035
[ G] SWI3HDL                          E035
[ G] SWIHDL                           E035
[ G] SYSSTK                           F917
[ G] TBUFF                            039E
[ G] TBUFSZ                           0048
[ G] TERPRET                          F677
[ G] THEEND                           FDF8
[ G] THEN                             ECB5
[ G] THRU                             F6D5
[ G] TOIN                             E94C
[ G] TOKENEP                          0104
[ G] TOKENSP                          0102
[ G] TOR                              EF4E
[ G] TUCK                             FBB8
[ G] TWODIV                           F87A
[ G] TWODROP                          F336
[ G] TWODUP                           F348
[ G] TWOFTCH                          F378
[ G] TWOL                             F81B
[ G] TWOM                             F7F2
[ G] TWOOVER                          F2FA
[ G] TWOP                             F7B7
[ G] TWOSTOR                          F363
[ G] TWOSWAP                          F316
[ G] TWOTIM                           F867
[ G] TYPE                             F5DF
[ G] UBASE                            011E
[ G] UBLK                             0124
[ G] UDOT                             F533
[ G] UDOTR                            F579
[ G] UINF                             EDEA
[ G] UNLESS                           EC82
[ G] UNLOOP                           EC43
[ G] UNTIL                            EEE1
[ G] UPDATE                           E8A8
[ G] USCR                             0126
[ G] USTATE                           0120
[ G] USUP                             EDDA
[ G] UTOIN                            0122
[ G] VARCON                           E46C
[ G] VARCON1                          E46E
[ G] VARCON2                          E471
[ G] VARI                             EADD
[ G] VARSPC                           0100
[ G] VECTBL                           FFF0
[ G] VLIST                            F931
[ G] VLPRVEP                          0116
[ G] VLPRVHD                          0118
[ G] VT100                            0000
[ G] WBIFDRT                          E874
[ G] WDICSPC                          0C10
[ G] WHILE                            EF13
[ G] WITHIN                           EDFA
[ G] WORD                             F189
[ G] WRLNMSK                          001F
[ G] WTOOLNG                          E42B
[ G] XOFF                             0013
[ G] XON                              0011
[ G] XOR                              ED1F
[ G] XOR1                             ED34
[ G] ZEROL                            F806
[ G] ZFLAG                            0004
[ G] ZGREAT                           ED85
[ G] ZLESS                            ED9F
