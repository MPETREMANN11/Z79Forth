                      (        forth.asm):00001         * 6309 Forth based on my 1984/07/16 TRS-80 Model 1 level II ROM implementation.
                      (        forth.asm):00002         *
                      (        forth.asm):00003         * This work is dedicated to Alain Pinaud, author of "Programmer en Forth"
                      (        forth.asm):00004         * published by Editions du P.S.I. in 1983--i.e. my virtual mentor in the field.
                      (        forth.asm):00005         * Special thanks go William Astle for his fantastic LW Tools utility set and
                      (        forth.asm):00006         * to Robert Lipe for his advice on serial line handling. Apache subversion
                      (        forth.asm):00007         * and the sdiff utility also were on my side all the time.
                      (        forth.asm):00008         *
                      (        forth.asm):00009         * Also credited for their help: Justin Poirier (seminal HW design), Daniel
                      (        forth.asm):00010         * Tufvesson (CompactFlash interface), Peter Forth (FB alias), Paul E. Bennett
                      (        forth.asm):00011         * and Michel Jean.
                      (        forth.asm):00012         *
                      (        forth.asm):00013         * This is a native Forth. Not a threaded interpretive implementation.
                      (        forth.asm):00014         * Worth noticing is the fact that the return stack does not hold return
                      (        forth.asm):00015         * addresses at all. All what is stored there is loop indexes and control
                      (        forth.asm):00016         * structures jump addresses. Actual return addresses are kept in the system
                      (        forth.asm):00017         * stack. All in all, this is the result of the work of a 19 year old guy,
                      (        forth.asm):00018         * heavily revisited 35 years later. Some quirks remain that prevent me
                      (        forth.asm):00019         * from offering the full required set--not to mention the choice of using
                      (        forth.asm):00020         * an 8K EEPROM. The downside of this implementation is that the generated
                      (        forth.asm):00021         * code is about 30% larger than a threaded interpretive implementation
                      (        forth.asm):00022         * would be. So it goes...
                      (        forth.asm):00023         *
                      (        forth.asm):00024         * The code generated is limited to a very small instruction set:
                      (        forth.asm):00025         *
                      (        forth.asm):00026         * LDXOPC        $8E     LDX (immediate)
                      (        forth.asm):00027         * JMPOPC        $7E     JMP (extended)
                      (        forth.asm):00028         * JSROPC        $BD     JSR (extended)
                      (        forth.asm):00029         * RTSOPC        $39     RTS (inherent)
                      (        forth.asm):00030         * BCSOPC        $2503   BCS *+5 (relative) Used in LOOP, +LOOP
                      (        forth.asm):00031         * BNEOPC        $2603   BNE *+5 (relative) Used in IF, UNTIL
                      (        forth.asm):00032         *
                      (        forth.asm):00033         * On error, the system stack pointer is reset. The return stack also is
                      (        forth.asm):00034         * but the data stack will be in the same state as when the error occurred.
                      (        forth.asm):00035         * ABORT and QUIT enforce their own 79-STANDARD behaviour.
                      (        forth.asm):00036         *
                      (        forth.asm):00037         * The 79-STANDARD Forth specification can be downloaded from
                      (        forth.asm):00038         * https://www.complang.tuwien.ac.at/forth/fth79std/FORTH-79.TXT
                      (        forth.asm):00039         *
                      (        forth.asm):00040         * Additionally, this implementation provides a few FORTH-83 words. Those
                      (        forth.asm):00041         * words are CMOVE> and RECURSE. See
                      (        forth.asm):00042         * http://forth.sourceforge.net/standard/fst83/FORTH-83.PRN
                      (        forth.asm):00043         *
                      (        forth.asm):00044         * \ ['] [CHAR] .S CELLS CHAR COMPILE, INVERT KEY? NIP POSTPONE SOURCE TUCK U>
                      (        forth.asm):00045         * UNLOOP and WITHIN have been borrowed from the ANSI draft 6 specification.
                      (        forth.asm):00046         * See http://www.forth.org/svfig/Win32Forth/DPANS94.txt
                      (        forth.asm):00047         *
                      (        forth.asm):00048         * RESTRICT is non-standard. It comes from GNU Forth (VolksForth). The " OK"
                      (        forth.asm):00049         * non-prompt string also does, by the way. Thanks to Anton Ertl for his terse
                      (        forth.asm):00050         * yet valuable input.
                      (        forth.asm):00051         *
                      (        forth.asm):00052         * .' (dot-tick) is non-standard. It comes from SwiftForth. It will be supported
                      (        forth.asm):00053         * if symbolic stack dump has not been disabled (see SSDFEAT in constants.asm).
                      (        forth.asm):00054         *
                      (        forth.asm):00055         * MONITOR and ICHECK are also non-standard. They are intended to maintain and
                      (        forth.asm):00056         * verify the integrity of a checksum of the code section of RAM resident
                      (        forth.asm):00057         * words, with the exception of VARIABLEs and CREATEd words. CREATEd words,
                      (        forth.asm):00058         * if subject to the MONITOR treatment will also carry a code section
                      (        forth.asm):00059         * checksum, although this is not the default behaviour. The checksum will
                      (        forth.asm):00060         * consist in an extra byte added to every word's header. MONITOR and ICHECK
                      (        forth.asm):00061         * will only be available if the reliability feature has not been disabled
                      (        forth.asm):00062         * (see RELFEAT in constants.asm).
                      (        forth.asm):00063         *
                      (        forth.asm):00064         * Forth source code portability note:
                      (        forth.asm):00065         * Because Z79Forth does not use the return stack to store return addresses,
                      (        forth.asm):00066         * it makes it quite easy to write code that is not readily portable to classic
                      (        forth.asm):00067         * threaded interpretive implementations. The resulting code will be simpler but
                      (        forth.asm):00068         * portability will be limited.
                      (        forth.asm):00069         *
                      (        forth.asm):00070         * Miscellaneous notes: RA stands for return address; EP for entry point.
                      (        forth.asm):00071         * CF is a shortcut for CompactFlash. TOS means top of the data/normal stack.
                      (        forth.asm):00072         * Occasionally, CFA is used for code field address which, in this
                      (        forth.asm):00073         * implementation, is a synonym for compilation address. XT means execution
                      (        forth.asm):00074         * token--the ANSI term for a compilation address. MSC stands for most
                      (        forth.asm):00075         * significant cell; LSC for least significant cell.
                      (        forth.asm):00076         *
                      (        forth.asm):00077         * The complete guide to the HD6309 extended instruction set can be found at:
                      (        forth.asm):00078         * https://cyberabi.ipower.com/Downloads/The_6309_Book.pdf. For convenience,
                      (        forth.asm):00079         * and with the author's explicit agreement, this document has been included
                      (        forth.asm):00080         * in this distribution. This is recommended reading for anyone altering this
                      (        forth.asm):00081         * code or trying to make some sense of it!!!
                      (        forth.asm):00082         *
                      (        forth.asm):00083         * This whole effort started out as a porting endeavour and ended up being a
                      (        forth.asm):00084         * substantial rewrite, trying to take advantage of the features of the 6309
                      (        forth.asm):00085         * as much as possible. The primary goals of this implementation are:
                      (        forth.asm):00086         * reliability, performance and code compactness. A number of bugs in the
                      (        forth.asm):00087         * original code have been fixed--some remain for sure!
                      (        forth.asm):00088         *
                      (        forth.asm):00089         * Obligatory literary reference:
                      (        forth.asm):00090         * "The paper is very heavy going, and I should never have read it, had I not
                      (        forth.asm):00091         * written it myself." J. E. Littlewood (1885-1977).
                      (        forth.asm):00092         
0000                  (        forth.asm):00093         pragma  opt cd,operandsizewarning
                      (        forth.asm):00094         
                      (        forth.asm):00095                 include constants.asm
                      (    constants.asm):00001         * Begin configuration tunable parameters.
     0000             (    constants.asm):00002         VT100   equ     0               Set to 1 to operate at RS232@9600
                      (    constants.asm):00003         *                               This implies an Y1 CXO at 2.45760 MHz.
                      (    constants.asm):00004         *                               Default is 0 for USB@115200 (7.37280 MHz CXO).
     0000             (    constants.asm):00005         CSSNTVE equ     0               Words and HEX numbers are case sensitive if NZ
     0000             (    constants.asm):00006         DEBUG   equ     0               Enforce assertions and miscellaneous checks
     0000             (    constants.asm):00007         CKOVRUN equ     0               Check for overruns in GETCH
     0001             (    constants.asm):00008         USEDP   equ     1               Set to 1 to use direct page addressing
     0001             (    constants.asm):00009         SSDFEAT equ     1               Set to 1 to enable the symbolic stack dump feat.
     0001             (    constants.asm):00010         RELFEAT equ     1               Set to 1 to enable the reliability feature
                      (    constants.asm):00011         *                               Caution: when this is enabled, you can no
                      (    constants.asm):00012         *                               longer fit a DEBUG image into an 8 KB EEPROM
                      (    constants.asm):00013         * Loop count for MS. This is busy waiting, so we depend on the CPU clock speed.
                      (    constants.asm):00014         *MSLCNT equ     496             at 3 MHz emulation mode
                      (    constants.asm):00015         *MSLCNT equ     662             at 4 MHz emulation mode
                      (    constants.asm):00016         *MSLCNT equ     794             at 4 MHz native mode
     03E2             (    constants.asm):00017         MSLCNT  equ     994             at 5 MHz native mode
                      (    constants.asm):00018         * End configuration tunable parameters.
                      (    constants.asm):00019         
                      (    constants.asm):00020         * Memory map.
     0000             (    constants.asm):00021         RAMSTRT equ     $0000
     8000             (    constants.asm):00022         RAMSIZE equ     $8000
     C000             (    constants.asm):00023         IOSTRT  equ     $C000
     E000             (    constants.asm):00024         ROMSTRT equ     $E000
     FFF0             (    constants.asm):00025         VECTBL  equ     $FFF0
                      (    constants.asm):00026         
                      (    constants.asm):00027         * Base address for global variables (direct page addressed by default).
     0100             (    constants.asm):00028         VARSPC  equ     $100
                      (    constants.asm):00029         
                      (    constants.asm):00030         * The 74HCT138 IO address decoder maps one 1KB page per usable device.
     C000             (    constants.asm):00031         DEV0    equ     $C000           Compact Flash memory module
     C400             (    constants.asm):00032         DEV1    equ     $C400
     C800             (    constants.asm):00033         DEV2    equ     $C800
     CC00             (    constants.asm):00034         DEV3    equ     $CC00
     D000             (    constants.asm):00035         DEV4    equ     $D000
     D400             (    constants.asm):00036         DEV5    equ     $D400
     D800             (    constants.asm):00037         DEV6    equ     $D800           HD63B50 unit 0
     DC00             (    constants.asm):00038         DEV7    equ     $DC00
                      (    constants.asm):00039         
     D800             (    constants.asm):00040         ACIACTL equ     DEV6
     D801             (    constants.asm):00041         ACIADAT equ     DEV6+1
                      (    constants.asm):00042         
                      (    constants.asm):00043         * ACIA control register bits.
     0003             (    constants.asm):00044         ACRST   equ     11b             ACIA master reset
                      (    constants.asm):00045         
                      (    constants.asm):00046         * 115200 bps w. 7.37280 MHz oscillator, 38400 bps w. 2.45760 MHz oscillator.
     0001             (    constants.asm):00047         ACD16   equ     01b             ACIA div 16
                      (    constants.asm):00048         * 28800 bps w. 7.37280 MHz oscillator, bps 9600 w. 2.45760 MHz oscillator.
     0002             (    constants.asm):00049         ACD64   equ     10b             ACIA div 64
                      (    constants.asm):00050         
                      (    constants.asm):00051         * ACIA divider tuning. USB@115200 or RS232@9600 for a real DEC terminal.
                      (    constants.asm):00052                 IFEQ    VT100
     0001             (    constants.asm):00053         ACDVSEL equ     ACD16           Selected divider value (7.37280 MHz CXO)
                      (    constants.asm):00054                 ELSE
0000                  (    constants.asm):00055         ACDVSEL equ     ACD64           Switch to RS232@9600 (2.45760 MHz CXO)
                      (    constants.asm):00056                 ENDC
                      (    constants.asm):00057         
     0014             (    constants.asm):00058         AC8N1   equ     10100b          ACIA 8N1
     0000             (    constants.asm):00059         ACRTS0  equ     0000000b        ACIA RTS low
     0040             (    constants.asm):00060         ACRTS1  equ     1000000b        ACIA RTS high
                      (    constants.asm):00061         
     0043             (    constants.asm):00062         ACIRSET equ     ACRTS1|ACRST
     0055             (    constants.asm):00063         ACIRTS1 equ     ACRTS1|AC8N1|ACDVSEL
     0015             (    constants.asm):00064         ACIRTS0 equ     ACRTS0|AC8N1|ACDVSEL
                      (    constants.asm):00065         
                      (    constants.asm):00066         * ACIA status register bits.
     0001             (    constants.asm):00067         ACIRDRF equ     1               Receive data register full
     0002             (    constants.asm):00068         ACITDRE equ     2               Transmit data register empty
     0020             (    constants.asm):00069         ACIOVRN equ     32              Overrun status register bit (req. NZ CKOVRUN)
                      (    constants.asm):00070         
                      (    constants.asm):00071         * Compact Flash parameters.
     C000             (    constants.asm):00072         CFBASE  equ     DEV0
     C000             (    constants.asm):00073         CFDATAR equ     CFBASE          R/W data register
     C001             (    constants.asm):00074         CFERROR equ     CFBASE+1        RO error register
     C001             (    constants.asm):00075         CFFEATR equ     CFBASE+1        WO features register
     C002             (    constants.asm):00076         CFSCNTR equ     CFBASE+2        R/W sector count register
     C003             (    constants.asm):00077         CFSNUMR equ     CFBASE+3        R/W sector number register
     C004             (    constants.asm):00078         CFCLOWR equ     CFBASE+4        R/W cylinder low register
     C005             (    constants.asm):00079         CFCHIGR equ     CFBASE+5        R/W cylinder high register
     C006             (    constants.asm):00080         CFDRHDR equ     CFBASE+6        R/W drive/head register
     C007             (    constants.asm):00081         CFSTATR equ     CFBASE+7        RO status register
     C007             (    constants.asm):00082         CFCOMDR equ     CFBASE+7        WO command register
                      (    constants.asm):00083         
                      (    constants.asm):00084         * CF status bits.
     0080             (    constants.asm):00085         CFBSYB  equ     10000000b       BSY status bit
     0040             (    constants.asm):00086         CFRDYB  equ     01000000b       RDY status bit
     0020             (    constants.asm):00087         CFDWFB  equ     00100000b       DWF status bit (not used)
     0010             (    constants.asm):00088         CFDSCB  equ     00010000b       DSC status bit (not used)
     0008             (    constants.asm):00089         CFDRQB  equ     00001000b       DRQ status bit
     0001             (    constants.asm):00090         CFERRB  equ     00000001b       ERR status bit
                      (    constants.asm):00091         
     0200             (    constants.asm):00092         CFSCSZ  equ     $200            Compact Flash (IDE) sector size
                      (    constants.asm):00093         
                      (    constants.asm):00094         * CF commands.
     00EC             (    constants.asm):00095         CFIDDEV equ     $EC             Identify Device
     00EF             (    constants.asm):00096         CFSETFT equ     $EF             Set Feature
     0020             (    constants.asm):00097         CFRSCTS equ     $20             Read Sectors
     0030             (    constants.asm):00098         CFWSCTS equ     $30             Write Sectors
                      (    constants.asm):00099         
                      (    constants.asm):00100         * Buffer in-memory structure:
                      (    constants.asm):00101         * data: 1024 bytes.
                      (    constants.asm):00102         * terminator: 1 byte set to 0.
                      (    constants.asm):00103         * flags: 1 byte.
                      (    constants.asm):00104         * blknum: 2 bytes.
     0001             (    constants.asm):00105         BINUSE  equ     1               Buffer is allocated (the blknum field is valid)
     0002             (    constants.asm):00106         BMAPPD  equ     2               Block has been read from the CF device
     0004             (    constants.asm):00107         BDIRTY  equ     4               Block has been marked for update
     0400             (    constants.asm):00108         BLKSIZ  equ     2*CFSCSZ        Block size is 2 CF sectors (1 KB)
                      (    constants.asm):00109         * Buffer field offsets.
     0400             (    constants.asm):00110         BOTERM  equ     BLKSIZ          Base buffer to the 'terminator' field offset
     0401             (    constants.asm):00111         BOFLAGS equ     BLKSIZ+1        Base buffer to the 'flag' field offset
     0402             (    constants.asm):00112         BOBLKNO equ     BLKSIZ+2        Base buffer to the 'blknum' field offset
                      (    constants.asm):00113         
     0410             (    constants.asm):00114         BFDISP  equ     BUF1-BUF0       Offset between resident buffers
                      (    constants.asm):00115         
                      (    constants.asm):00116         * ASCII trivia.
     0000             (    constants.asm):00117         NUL     equ     0               End of string marker
     0003             (    constants.asm):00118         ETX     equ     3               Control-C (intr)
     0008             (    constants.asm):00119         BS      equ     8               Backspace
     0009             (    constants.asm):00120         HT      equ     9               Horizontal tab
     000A             (    constants.asm):00121         LF      equ     $0A             aka new line
     000D             (    constants.asm):00122         CR      equ     $0D             Carriage return
     0015             (    constants.asm):00123         NAK     equ     $15             Control-U (kill)
     0020             (    constants.asm):00124         SP      equ     $20
                      (    constants.asm):00125         
                      (    constants.asm):00126         * Stack sizes.
     00C0             (    constants.asm):00127         NSTKSZ  equ     192             Expressed in bytes. Now only limited by RAM size
     0080             (    constants.asm):00128         RSTKSZ  equ     128             Expressed in bytes
                      (    constants.asm):00129         
                      (    constants.asm):00130         * Buffer sizes.
     0084             (    constants.asm):00131         CMDBFSZ equ     132             Command line entry buffer
     0050             (    constants.asm):00132         HEXBFSZ equ     80
     0048             (    constants.asm):00133         TBUFSZ  equ     72              Used by VLIST to print word name, CVNSTR
                      (    constants.asm):00134         *                               And DUMP, at offset 69
     0051             (    constants.asm):00135         PADBSZ  equ     1+80            79-STANDARD mandates a minimum of 64 bytes
                      (    constants.asm):00136         
                      (    constants.asm):00137         * Dictionary flag masks.
     0080             (    constants.asm):00138         IMDFLM  equ     $80             Immediate flag mask
     0040             (    constants.asm):00139         DEFFLM  equ     $40             Compilation only flag mask
                      (    constants.asm):00140                 IFNE    RELFEAT
     0020             (    constants.asm):00141         MONFLM  equ     $20             Monitored flag mask. This indicates that the
                      (    constants.asm):00142         *                               word to which it relates might be checked for
                      (    constants.asm):00143         *                               integrity. This applies by default to all words
                      (    constants.asm):00144         *                               defined with : and all constants. It might
                      (    constants.asm):00145         *                               also apply to any other CREATEd object by
                      (    constants.asm):00146         *                               resorting to the MONITOR word. Using MONITOR
                      (    constants.asm):00147         *                               on variable word contents is guaranteed to
                      (    constants.asm):00148         *                               raise ICHECK's attention.
                      (    constants.asm):00149                 ENDC
                      (    constants.asm):00150         
     001F             (    constants.asm):00151         WRLNMSK equ     $1F             31 character is the maximum word length
                      (    constants.asm):00152         
                      (    constants.asm):00153         * 6309 opcodes.
     008E             (    constants.asm):00154         LDXOPC  equ     $8E             LDX (immediate)
     007E             (    constants.asm):00155         JMPOPC  equ     $7E             JMP (extended)
     00BD             (    constants.asm):00156         JSROPC  equ     $BD             JSR (extended)
     0039             (    constants.asm):00157         RTSOPC  equ     $39             RTS (inherent)
     2503             (    constants.asm):00158         BCSOPC  equ     $2503           BCS *+5 (relative)
     2603             (    constants.asm):00159         BNEOPC  equ     $2603           BNE *+5 (relative)
     00C7             (    constants.asm):00160         ILLOPC  equ     $C7             An illegal operation code. Meant to raise a trap
                      (    constants.asm):00161         
     0001             (    constants.asm):00162         CFLAG   equ     1               CC bit 0
     0004             (    constants.asm):00163         ZFLAG   equ     4               CC bit 2
     0008             (    constants.asm):00164         NFLAG   equ     8               CC bit 3
                      (    constants.asm):00165         
                      (    constants.asm):00166         * RAM based execution token for @.
     0C14             (    constants.asm):00167         RAMFTCH set     WDICSPC+4       Dictionary header overhead is word's length + 3
                      (    constants.asm):00168                 IFNE    RELFEAT         The reliability features adds one byte to the
     0C15             (    constants.asm):00169         RAMFTCH set     WDICSPC+5       header: a checksum.
                      (    constants.asm):00170                 ENDC
                      (    constants.asm):00171         
                      (        forth.asm):00096         
                      (        forth.asm):00097         * Unchecked NPUSH. This is for situations in which there is absolutely no
                      (        forth.asm):00098         * chance of overflow. For instance, in case we just popped 2 cells and push
                      (        forth.asm):00099         * back one or two.
0000                  (        forth.asm):00100         UCNPUSH MACRO   NOEXPAND
                      (        forth.asm):00101                 pshu    x
                      (        forth.asm):00102                 ENDM
                      (        forth.asm):00103         
                      (        forth.asm):00104         * Unchecked NPOP. To be used only after trusted words have been invoked, i.e.
                      (        forth.asm):00105         * when one is positively sure that the data stack contains at least one cell.
0000                  (        forth.asm):00106         UCNPOP  MACRO   NOEXPAND
                      (        forth.asm):00107                 pulu    x
                      (        forth.asm):00108                 ENDM
                      (        forth.asm):00109         * Make sure minimum data stack requirements are satisfied upon word entry.
                      (        forth.asm):00110         * The requirement is expressed in cell size--2 bytes on the 6309.
                      (        forth.asm):00111         * \1 specifies the required number of cells.
0000                  (        forth.asm):00112         MINDREQ MACRO   NOEXPAND
                      (        forth.asm):00113                 ldd     #NSTBOT-(\1*2)  Cell count one expects to be stacked up
                      (        forth.asm):00114                 jsr     CHKNDPT         No return if the condition is not met
                      (        forth.asm):00115                 ENDM
                      (        forth.asm):00116         
                      (        forth.asm):00117         * Reliability feature support: execution tokens.
                      (        forth.asm):00118         * \1 has the opcode we want to emit.
                      (        forth.asm):00119         * \2 has the execution token address, as if the header overhead always
                      (        forth.asm):00120         * was 3 bytes.
0000                  (        forth.asm):00121         RFXT    MACRO   NOEXPAND
                      (        forth.asm):00122                 IFNE    RELFEAT
                      (        forth.asm):00123                 \1      \2+1
                      (        forth.asm):00124                 ELSE
                      (        forth.asm):00125                 \1      \2
                      (        forth.asm):00126                 ENDC
                      (        forth.asm):00127                 ENDM
                      (        forth.asm):00128         
                      (        forth.asm):00129         * Reliability feature support: variable word header contents.
                      (        forth.asm):00130         * This is a dummy checksum only used for EEPROM resident words.
                      (        forth.asm):00131         * Those never are checked for code integrity by MONITOR.
0000                  (        forth.asm):00132         RFCS    MACRO   NOEXPAND
                      (        forth.asm):00133                 IFNE    RELFEAT
                      (        forth.asm):00134                 fcb     ILLOPC          Illegal opcode
                      (        forth.asm):00135                 ENDC
                      (        forth.asm):00136                 ENDM
                      (        forth.asm):00137         
                      (        forth.asm):00138         *******************************************************************************
                      (        forth.asm):00139         * RAM definitions. We cannot initialize globals from the assembly defs.
                      (        forth.asm):00140         * All we can do here is define addresses and size things up.
                      (        forth.asm):00141         
                      (        forth.asm):00142         * RAMSTART is 0. We leave page 0 unused as a bug proof area.
                      (        forth.asm):00143         * When compiled in debug mode, this area is filled with illegal
                      (        forth.asm):00144         * instruction opcodes ($C7).
                      (        forth.asm):00145         
                      (        forth.asm):00146                 org     VARSPC
                      (        forth.asm):00147         
                      (        forth.asm):00148         * Global pointers.
0100                  (        forth.asm):00149         RSP     rmb     2               The return stack pointer
0102                  (        forth.asm):00150         TOKENSP rmb     2               Token start pointer (STRS)
0104                  (        forth.asm):00151         TOKENEP rmb     2               Token end pointer (STRE)
0106                  (        forth.asm):00152         LSTWAD  rmb     2               Last defined word header pointer--LAST
0108                  (        forth.asm):00153         DICEND  rmb     2               Current end of the dictionary--HERE
010A                  (        forth.asm):00154         BLSTWAD rmb     2               Backup (was IX)
010C                  (        forth.asm):00155         BDICEND rmb     2               Backup (was IY)
010E                  (        forth.asm):00156         PLOAD   rmb     2               Word payload if found by SWDIC
0110                  (        forth.asm):00157         FNDPLD  rmb     2               Last code payload reported by FIND
0112                  (        forth.asm):00158         RECADDR rmb     2               Used by RECURSE
0114                  (        forth.asm):00159         JSRLAST rmb     2               Last compilation address of #JSROPC
0116                  (        forth.asm):00160         VLPRVEP rmb     2               Used in VLIST to compute word code length
0118                  (        forth.asm):00161         VLPRVHD rmb     2               Used in VLIST to compute word code length
011A                  (        forth.asm):00162         MRUBUFA rmb     2               Most recently used buffer address
                      (        forth.asm):00163         
                      (        forth.asm):00164         * Global variables.
011C                  (        forth.asm):00165         UBASE   rmb     2               Base for numbers input and output--BASE
011E                  (        forth.asm):00166         USTATE  rmb     2               0 if interpreting, 1 if compiling--STATE
0120                  (        forth.asm):00167         UTOIN   rmb     2               User variable for >IN
0122                  (        forth.asm):00168         UBLK    rmb     2               User variable for BLK
0124                  (        forth.asm):00169         USCR    rmb     2               User variable for SCR (output for LIST)
0126                  (        forth.asm):00170         BSBFADR rmb     2               Base buffer address for the input stream
                      (        forth.asm):00171                 IFNE    DEBUG
0128                  (        forth.asm):00172         CCREG   rmb     2               A DEBUG variable for predicates (see CMP2)
                      (        forth.asm):00173                 ENDC
0128                  (        forth.asm):00174         CMDLNSZ rmb     1               Entered character count in GETS (INTERP)
0129                  (        forth.asm):00175         RDEPTH  rmb     1               Return stack depth in cells
012A                  (        forth.asm):00176         IRDPTH  rmb     1               Return stack depth when : was last invoked
012B                  (        forth.asm):00177         RTSREMV rmb     1               If > 1, omit the final RTS when compiling
012C                  (        forth.asm):00178         DIVFCN  rmb     1               Flag used by /, MOD and /MOD
012D                  (        forth.asm):00179         STSLFCN rmb     1               Flag used by */, */MOD
012E                  (        forth.asm):00180         CVTFCN  rmb     1               CVT: 0 => # semantics, 1 => #S semantics
012F                  (        forth.asm):00181         ISNEGF  rmb     1               Number being scanned is negative
0130                  (        forth.asm):00182         CVISSGN rmb     1               Flag: should CVNSTR consider numbers as signed
0131                  (        forth.asm):00183         CURTOKL rmb     1               Current token length. Set by SWDIC
0132                  (        forth.asm):00184         IMDFLG  rmb     1               Immediate flag
0133                  (        forth.asm):00185         DEFFLG  rmb     1               Define flag
0134                  (        forth.asm):00186         NBCTFB0 rmb     1               NZ if -->/CONTINUED invoked from the console
                      (        forth.asm):00187         
0135                  (        forth.asm):00188         CFCARDP rmb     1               NZ if CF card present
0136                  (        forth.asm):00189         CFCMMIR rmb     1               Last CF command issued
0137                  (        forth.asm):00190         CFERRCD rmb     1               and the corresponding error code
                      (        forth.asm):00191         
0138                  (        forth.asm):00192         PADBUF  rmb     PADBSZ          PAD lives here. Used by <#, #, #S, #> and DUMP
                      (        forth.asm):00193         
                      (        forth.asm):00194         * The normal (data) stack.
0189 00               (        forth.asm):00195                 align   2
     018A             (        forth.asm):00196         NSTTOP  equ     *               U's value when the data stack is full
018A                  (        forth.asm):00197                 rmb     NSTKSZ
     024A             (        forth.asm):00198         NSTBOT  equ     *               U's value when the data stack is empty
                      (        forth.asm):00199         
                      (        forth.asm):00200         * The return stack.
     024A             (        forth.asm):00201         RSTTOP  equ     *
024A                  (        forth.asm):00202                 rmb     RSTKSZ
     02CA             (        forth.asm):00203         RSTBOT  equ     *
                      (        forth.asm):00204         
02CA                  (        forth.asm):00205         CMDBUF  rmb     CMDBFSZ
034E                  (        forth.asm):00206         HEXBUF  rmb     HEXBFSZ
                      (        forth.asm):00207         
039E                  (        forth.asm):00208         TBUFF   rmb     TBUFSZ          Output for CVNSTR. Also used by DUMP
                      (        forth.asm):00209         
03E6 0000000000000000 (        forth.asm):00210                 align   16
     0000
03F0                  (        forth.asm):00211         BUF0    rmb     BLKSIZ+4
07F4 0000000000000000 (        forth.asm):00212                 align   16
     00000000
0800                  (        forth.asm):00213         BUF1    rmb     BLKSIZ+4
                      (        forth.asm):00214         
                      (        forth.asm):00215         *******************************************************************************
                      (        forth.asm):00216         * Writable dictionary section begins right here. We cannot have anything
                      (        forth.asm):00217         * statically defined at this point. Therefore, FORTHIN moves the code for @
                      (        forth.asm):00218         * to this location and sets up DICEND and LSTWAD accordingly. All the RAM
                      (        forth.asm):00219         * beyond this point (after the reallocated @ implementation) is user defined
                      (        forth.asm):00220         * material. Note that builtin words, though they cannot be forgotten (to the
                      (        forth.asm):00221         * extent they are ROM resident--not to mention inter-word dependencies),
                      (        forth.asm):00222         * might still be overridden by user definitions. VLIST will happily ignore
                      (        forth.asm):00223         * that fact and list everything in the dictionary linked list order.
                      (        forth.asm):00224         
0C04 0000000000000000 (        forth.asm):00225                 align   16
     00000000
     0C10             (        forth.asm):00226         WDICSPC equ     *
                      (        forth.asm):00227         
                      (        forth.asm):00228         *******************************************************************************
                      (        forth.asm):00229         * ROM code begins.
                      (        forth.asm):00230         
                      (        forth.asm):00231                 org     ROMSTRT
                      (        forth.asm):00232         * Trap handler: division by zero or illegal opcode. See page 4-10 of "The 6309
                      (        forth.asm):00233         * Book" for a description of interrupt stacks in native 6309 mode.
E000 113C40           (        forth.asm):00234 (4)     IODZHDL bitmd   #$40            Illegal opcode?
E003 2705             (        forth.asm):00235 (3)             beq     @iodzh1
E005 8EFE75           (        forth.asm):00236 (3)             ldx     #IOPERRM
E008 2008             (        forth.asm):00237 (3)             bra     @iodxh2
E00A 113C80           (        forth.asm):00238 (4)     @iodzh1 bitmd   #$80            Division by zero?
E00D 2725             (        forth.asm):00239 (3)             beq     @iodzh3         And you may ask yourself, well
                      (        forth.asm):00240         *                               How did I get here?
E00F 8EFE8A           (        forth.asm):00241 (3)             ldx     #DV0ERRM
E012 BDE1DB           (        forth.asm):00242 (7)     @iodxh2 jsr     PUTS
E015 EC6C             (        forth.asm):00243 (5+1)           ldd     12,s            Return code address (PC)
E017 8E034E           (        forth.asm):00244 (3)             ldx     #HEXBUF
E01A BDE175           (        forth.asm):00245 (7)             jsr     HDMP4   
E01D 8E034E           (        forth.asm):00246 (3)             ldx     #HEXBUF
E020 BDE1DB           (        forth.asm):00247 (7)             jsr     PUTS
E023 BDE1E8           (        forth.asm):00248 (7)             jsr     PUTCR
E026 8EE60E           (        forth.asm):00249 (3)             ldx     #ERRHD1
E029 AF6C             (        forth.asm):00250 (5+1)           stx     12,s            Resume execution in the error handler
E02B 8EE000           (        forth.asm):00251 (3)             ldx     #IODZHDL
E02E AF68             (        forth.asm):00252 (5+1)           stx     8,s             With Y set to IODZHDL
E030 8603             (        forth.asm):00253 (2)             lda     #3              And user ABORT error code
E032 A762             (        forth.asm):00254 (4+1)           sta     2,s             Passed back through B
E034 3B               (        forth.asm):00255 (17+?)  @iodzh3 rti
                      (        forth.asm):00256         
     E035             (        forth.asm):00257         SWI3HDL equ     *
     E035             (        forth.asm):00258         SWI2HDL equ     *
     E035             (        forth.asm):00259         FIRQHDL equ     *
     E035             (        forth.asm):00260         IRQHDL  equ     *
     E035             (        forth.asm):00261         SWIHDL  equ     *
E035 13               (        forth.asm):00262 (1+?)   NMIHDL  sync                    Go to low power mode idling forever
                      (        forth.asm):00263         
E036 1A50             (        forth.asm):00264 (2)     RSTHDL  orcc    #$50            Disable interrupts
                      (        forth.asm):00265         
                      (        forth.asm):00266         * In theory, this means 15% extra performance.
                      (        forth.asm):00267         * In practice, this means an extra 5 mA current comsumption.
                      (        forth.asm):00268         * The additional performance is measurable so I am going for it.
E038 113D01           (        forth.asm):00269 (5)             ldmd    #1              Establish 6309 native mode
                      (        forth.asm):00270         
E03B 8643             (        forth.asm):00271 (2)             lda     #ACIRSET
E03D B7D800           (        forth.asm):00272 (4)             sta     ACIACTL         ACIA master reset
E040 8655             (        forth.asm):00273 (2)             lda     #ACIRTS1
E042 B7D800           (        forth.asm):00274 (4)             sta     ACIACTL         No IRQ on RDRF, RTS high, 8N1, 115200 bps
                      (        forth.asm):00275         
E045 8EFDE8           (        forth.asm):00276 (3)             ldx     #BOOTMSG        Identity statement
                      (        forth.asm):00277         
                      (        forth.asm):00278         * Send the NUL terminated string pointed to by X to the ACIA.
                      (        forth.asm):00279         * The RAM is not assumed to be working.
E048 C602             (        forth.asm):00280 (2)     INIT    ldb     #ACITDRE
E04A A680             (        forth.asm):00281 (4+1)   @init0  lda     ,x+
E04C 270A             (        forth.asm):00282 (3)             beq     RAMCHK          NUL marks the end of the string
E04E F5D800           (        forth.asm):00283 (4)     @init1  bitb    ACIACTL         Wait for TDRE bit to be set
E051 27FB             (        forth.asm):00284 (3)             beq     @init1
E053 B7D801           (        forth.asm):00285 (4)             sta     ACIADAT         Transmit data
E056 20F2             (        forth.asm):00286 (3)             bra     @init0          Next char, if any
                      (        forth.asm):00287         
                      (        forth.asm):00288         * RAM0 32 KB self test (destructive).
E058 8E0000           (        forth.asm):00289 (3)     RAMCHK  ldx     #RAMSTRT
E05B AF84             (        forth.asm):00290 (5+0)   @ramch1 stx     ,x
E05D AC84             (        forth.asm):00291 (5+0)           cmpx    ,x
E05F 2609             (        forth.asm):00292 (3)             bne     RAMFAIL
E061 3002             (        forth.asm):00293 (4+1)           leax    2,x
E063 8C8000           (        forth.asm):00294 (3)             cmpx    #RAMSTRT+RAMSIZE
E066 26F3             (        forth.asm):00295 (3)             bne     @ramch1
E068 2012             (        forth.asm):00296 (3)             bra     RAMOK
                      (        forth.asm):00297         
E06A C680             (        forth.asm):00298 (2)     RAMFAIL ldb     #128
E06C 108E8000         (        forth.asm):00299 (4)     @ramf1  ldy     #$8000
E070 313F             (        forth.asm):00300 (4+1)   @ramf2  leay    -1,y
E072 26FC             (        forth.asm):00301 (3)             bne     @ramf2
E074 5A               (        forth.asm):00302 (1)             decb
E075 26F5             (        forth.asm):00303 (3)             bne     @ramf1
E077 8EFE5B           (        forth.asm):00304 (3)             ldx     #RAMFM
E07A 20CC             (        forth.asm):00305 (3)             bra     INIT            Here we go again
                      (        forth.asm):00306         
                      (        forth.asm):00307         * RAM Initialization to all $C7 if DEBUG mode is enabled else zeroes.
E07C 8E0000           (        forth.asm):00308 (3)     RAMOK   ldx     #RAMSTRT
E07F 3101             (        forth.asm):00309 (4+1)           leay    1,x
E081 10867FFF         (        forth.asm):00310 (4)             ldw     #RAMSIZE-1
                      (        forth.asm):00311                 IFNE    DEBUG
                      (        forth.asm):00312                 lda     #ILLOPC
                      (        forth.asm):00313                 sta     ,x
                      (        forth.asm):00314                 ELSE
E085 6F84             (        forth.asm):00315 (6+0)           clr     ,x
                      (        forth.asm):00316                 ENDC
E087 113812           (        forth.asm):00317 (6+?)           tfm     x+,y+
                      (        forth.asm):00318         
                      (        forth.asm):00319         * Initialize the system stack pointer and the direct page base address register.
E08A 10CE8000         (        forth.asm):00320 (4)             lds     #RAMSTRT+RAMSIZE
                      (        forth.asm):00321                 IFNE    USEDP
E08E 8601             (        forth.asm):00322 (2)             lda     #VARSPC/256
E090 1F8B             (        forth.asm):00323 (4)             tfr     a,dp
     01               (        forth.asm):00324                 SETDP   VARSPC/256
                      (        forth.asm):00325                 ENDC
E092 8EFE4A           (        forth.asm):00326 (3)             ldx     #RAMOKM
E095 BDE1DB           (        forth.asm):00327 (7)             jsr     PUTS
E098 BDE241           (        forth.asm):00328 (7)             jsr     FORTHIN         Global variables initialization
E09B BDE75B           (        forth.asm):00329 (7)             jsr     CFINIT          CompactFlash card initialization
E09E 0D35             (        forth.asm):00330 (4)             tst     CFCARDP
E0A0 2706             (        forth.asm):00331 (3)             beq     INTERP
                      (        forth.asm):00332         * A CF card is present, LOAD block #1.
E0A2 8E0001           (        forth.asm):00333 (3)             ldx     #1
E0A5 BDF679           (        forth.asm):00334 (7)             jsr     LOAD1
                      (        forth.asm):00335         
                      (        forth.asm):00336         * The interpreter main loop.
E0A8 104F             (        forth.asm):00337 (2)     INTERP  clrd
E0AA DD22             (        forth.asm):00338 (4)             std     UBLK            Interpreting from the console. Set BLK to 0
E0AC DD20             (        forth.asm):00339 (4)             std     UTOIN
E0AE 8E02CA           (        forth.asm):00340 (3)             ldx     #CMDBUF
E0B1 9F26             (        forth.asm):00341 (4)             stx     BSBFADR
E0B3 C683             (        forth.asm):00342 (2)             ldb     #CMDBFSZ-1      NUL terminator is not included in the char count
E0B5 BDE1FE           (        forth.asm):00343 (7)             jsr     GETS            Acquire command from the console
                      (        forth.asm):00344         * Additional setup in case the ANSI \ is used.
E0B8 D728             (        forth.asm):00345 (3)             stb     CMDLNSZ         GETS returns the entered character count via B
                      (        forth.asm):00346         * Additional preparation work for block support.
E0BA 0F34             (        forth.asm):00347 (5)             clr     NBCTFB0         Flag whether -->/CONTINUED is called from blk 0
E0BC 8D02             (        forth.asm):00348 (6)             bsr     _INTERP
E0BE 20E8             (        forth.asm):00349 (3)     MINTLRA bra     INTERP
                      (        forth.asm):00350         
                      (        forth.asm):00351         * The interpreter itself.
E0C0 BDE284           (        forth.asm):00352 (7)     _INTERP jsr     SCNSTOK         Scan for the beginning of a word at address X
E0C3 2715             (        forth.asm):00353 (3)             beq     @more0          This is the end
E0C5 0D1F             (        forth.asm):00354 (4)             tst     USTATE+1        We do ignore the upper byte
E0C7 2644             (        forth.asm):00355 (3)             bne     COMP            We are compiling
E0C9 BDE35F           (        forth.asm):00356 (7)             jsr     SWDIC           Updates TOKENEP, CURTOKL, IMDFLG/DEFFLG
E0CC 2624             (        forth.asm):00357 (3)             bne     @exec           Word found, execute it
E0CE BDE2B4           (        forth.asm):00358 (7)             jsr     NUMCVT
     E0D1             (        forth.asm):00359         NMCVIRA equ     *
E0D1 BDE684           (        forth.asm):00360 (7)             jsr     NPUSH
E0D4 9E04             (        forth.asm):00361 (4)             ldx     TOKENEP
E0D6 6D84             (        forth.asm):00362 (5+0)   MORE    tst     ,x
E0D8 26E6             (        forth.asm):00363 (3)             bne     _INTERP         Next token, please!
                      (        forth.asm):00364         * End of input stream condition is recognized.
E0DA DC22             (        forth.asm):00365 (4)     @more0  ldd     UBLK
E0DC 2705             (        forth.asm):00366 (3)             beq     @more1          We are back from the console
E0DE 0D34             (        forth.asm):00367 (4)             tst     NBCTFB0         -->/CONTINUED invoked from the console?
E0E0 2601             (        forth.asm):00368 (3)             bne     @more1          Yes
E0E2 39               (        forth.asm):00369 (4)             rts                     No, we're done here
E0E3 0F34             (        forth.asm):00370 (5)     @more1  clr     NBCTFB0         The -->/CONTINUED exception only applies once
E0E5 8EFE6F           (        forth.asm):00371 (3)             ldx     #OKPRMPT        Provide OK feedback
E0E8 0D1F             (        forth.asm):00372 (4)             tst     USTATE+1        No OK feedback if we're compiling, just CRLF
E0EA 2702             (        forth.asm):00373 (3)             beq     @more2
E0EC 3003             (        forth.asm):00374 (4+1)           leax    3,x             Skip the ' OK' string when compiling
E0EE BDE1DB           (        forth.asm):00375 (7)     @more2  jsr     PUTS
E0F1 39               (        forth.asm):00376 (4)             rts                     Back to whoever invoked us
E0F2 9633             (        forth.asm):00377 (3)     @exec   lda     DEFFLG
E0F4 2705             (        forth.asm):00378 (3)             beq     @introk         Compilation only flag is not set
E0F6 C606             (        forth.asm):00379 (2)             ldb     #6              Incorrect STATE
E0F8 BDE60B           (        forth.asm):00380 (7)             jsr     ERRHDLR         No return
     E0FB             (        forth.asm):00381         INTISRA equ     *               For symbolic stack debugging purposes
E0FB DC04             (        forth.asm):00382 (4)     @introk ldd     TOKENEP
E0FD 9326             (        forth.asm):00383 (4)             subd    BSBFADR
E0FF DD20             (        forth.asm):00384 (4)             std     UTOIN           Derive >IN from TOKENEP
E101 8EE108           (        forth.asm):00385 (3)             ldx     #INTRPRA        The return address
E104 3410             (        forth.asm):00386 (4+2)           pshs    x
E106 1F25             (        forth.asm):00387 (4)             tfr     y,pc            An indirect call to Y
E108 BDE6D8           (        forth.asm):00388 (7)     INTRPRA jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
E10B 20C9             (        forth.asm):00389 (3)             bra     MORE
                      (        forth.asm):00390         
                      (        forth.asm):00391         * The compiler.
                      (        forth.asm):00392         * Upon entry TOKENSP has been set by a prior call to SCNSTOK.
E10D BDE35F           (        forth.asm):00393 (7)     COMP    jsr     SWDIC           Updates TOKENEP, CURTOKL, IMDFLG/DEFFLG
E110 2720             (        forth.asm):00394 (3)             beq     @cmpnum         Word @ TOKENSP is not in the dictionary
E112 0D32             (        forth.asm):00395 (4)             tst     IMDFLG
E114 2714             (        forth.asm):00396 (3)             beq     @notimd
E116 DC04             (        forth.asm):00397 (4)             ldd     TOKENEP         Derive >IN from TOKENEP
E118 9326             (        forth.asm):00398 (4)             subd    BSBFADR
E11A DD20             (        forth.asm):00399 (4)             std     UTOIN
E11C 8EE123           (        forth.asm):00400 (3)             ldx     #COMPLRA        Word is immediate. Execute it.
E11F 3410             (        forth.asm):00401 (4+2)           pshs    x               Return to COMPLRA
E121 1F25             (        forth.asm):00402 (4)             tfr     y,pc            An indirect call to Y
E123 BDE6D8           (        forth.asm):00403 (7)     COMPLRA jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
E126 9F04             (        forth.asm):00404 (4)             stx     TOKENEP
E128 20AC             (        forth.asm):00405 (3)             bra     MORE            Branch back to the interpreter
E12A 1F21             (        forth.asm):00406 (4)     @notimd tfr     y,x
E12C 8D20             (        forth.asm):00407 (6)             bsr     EMXASXT         Emit X as an execution token
E12E 9E04             (        forth.asm):00408 (4)     @cmpdon ldx     TOKENEP
E130 20A4             (        forth.asm):00409 (3)             bra     MORE
E132 BDE2B4           (        forth.asm):00410 (7)     @cmpnum jsr     NUMCVT
     E135             (        forth.asm):00411         NMCVCRA equ     *
E135 BDE42F           (        forth.asm):00412 (7)             jsr     LITER
E138 20F4             (        forth.asm):00413 (3)             bra     @cmpdon
                      (        forth.asm):00414         
                      (        forth.asm):00415         * Check whether the final RTS can be eliminated. It can only be if we have no
                      (        forth.asm):00416         * forward references to HERE when COMPR (;) is invoked. This is a rather
                      (        forth.asm):00417         * complicated matter but this implementation works on the basis that we can do
                      (        forth.asm):00418         * so safely if at least 2 subroutine calls have been issued with a return
                      (        forth.asm):00419         * stack whose depth is equal to IRDPTH, immediately prior to the invokation
                      (        forth.asm):00420         * of COMPR (;).
E13A 3402             (        forth.asm):00421 (4+1)   CHKRTS  pshs    a
E13C 109F14           (        forth.asm):00422 (5)             sty     JSRLAST         JSRLAST points to the latest JSR code emission
E13F 9629             (        forth.asm):00423 (3)             lda     RDEPTH
E141 912A             (        forth.asm):00424 (3)             cmpa    IRDPTH          Return stack depth when : was last invoked
E143 2705             (        forth.asm):00425 (3)             beq     @ckrts1
E145 0F2B             (        forth.asm):00426 (5)             clr     RTSREMV
E147 3502             (        forth.asm):00427 (4+1)   @ckrts0 puls    a
E149 39               (        forth.asm):00428 (4)             rts
E14A 0C2B             (        forth.asm):00429 (5)     @ckrts1 inc     RTSREMV
E14C 20F9             (        forth.asm):00430 (3)             bra     @ckrts0
                      (        forth.asm):00431         
                      (        forth.asm):00432         * Emit (in a code generation understanding) X as an execution token.
                      (        forth.asm):00433         * In essence, this simply inserts JSR <X> at HERE.
                      (        forth.asm):00434         * Note: this code provides support for trailing JSR elimination.
                      (        forth.asm):00435         * On input: X has the target execution token.
                      (        forth.asm):00436         * On output: Y will have HERE, A will be altered, X will be preserved.
E14E 109E08           (        forth.asm):00437 (5)     EMXASXT ldy     DICEND
E151 8DE7             (        forth.asm):00438 (6)             bsr     CHKRTS          Check if the final RTS can be omitted
E153 86BD             (        forth.asm):00439 (2)             lda     #JSROPC         JSR extended
E155 BDE446           (        forth.asm):00440 (7)             jsr     VARCON2         Compile a JSR to the action component
E158 109F08           (        forth.asm):00441 (5)             sty     DICEND
E15B 39               (        forth.asm):00442 (4)             rts
                      (        forth.asm):00443         
                      (        forth.asm):00444         * Store the HEX representation of the lower nibble of A to X+.
E15C 3404             (        forth.asm):00445 (4+1)   HEX1D   pshs    b
E15E C630             (        forth.asm):00446 (2)             ldb     #'0
E160 840F             (        forth.asm):00447 (2)             anda    #$0f
E162 810A             (        forth.asm):00448 (2)             cmpa    #10
E164 2502             (        forth.asm):00449 (3)             bcs     @hex1d1
E166 C637             (        forth.asm):00450 (2)             ldb     #'A-10
E168 103098           (        forth.asm):00451 (4)     @hex1d1 addr    b,a
E16B A780             (        forth.asm):00452 (4+1)           sta     ,x+
E16D 3504             (        forth.asm):00453 (4+1)           puls    b
E16F 39               (        forth.asm):00454 (4)             rts
                      (        forth.asm):00455         
E170 44               (        forth.asm):00456 (1)     ADIV16  lsra
E171 44               (        forth.asm):00457 (1)             lsra
E172 44               (        forth.asm):00458 (1)             lsra
E173 44               (        forth.asm):00459 (1)             lsra
E174 39               (        forth.asm):00460 (4)             rts
                      (        forth.asm):00461         
                      (        forth.asm):00462         * Hexdump D to 4 bytes starting at X.  Upon return, X will point 1 byte
                      (        forth.asm):00463         * after the last character emitted. D is preserved.
E175 3406             (        forth.asm):00464 (4+2)   HDMP4   pshs    d
E177 8DF7             (        forth.asm):00465 (6)             bsr     ADIV16
E179 8DE1             (        forth.asm):00466 (6)             bsr     HEX1D
E17B A6E4             (        forth.asm):00467 (4+0)           lda     ,s
E17D 8DDD             (        forth.asm):00468 (6)             bsr     HEX1D
E17F A661             (        forth.asm):00469 (4+1)           lda     1,s
E181 8DED             (        forth.asm):00470 (6)             bsr     ADIV16
E183 8DD7             (        forth.asm):00471 (6)             bsr     HEX1D
E185 A661             (        forth.asm):00472 (4+1)           lda     1,s
E187 8DD3             (        forth.asm):00473 (6)             bsr     HEX1D
E189 3506             (        forth.asm):00474 (4+2)           puls    d
E18B 6F84             (        forth.asm):00475 (6+0)           clr     ,x
E18D 39               (        forth.asm):00476 (4)             rts
                      (        forth.asm):00477         
E18E 3406             (        forth.asm):00478 (4+2)   HDMP2   pshs    d
E190 8DDE             (        forth.asm):00479 (6)             bsr     ADIV16
E192 8DC8             (        forth.asm):00480 (6)             bsr     HEX1D
E194 A6E4             (        forth.asm):00481 (4+0)           lda     ,s
E196 8DC4             (        forth.asm):00482 (6)             bsr     HEX1D
E198 3506             (        forth.asm):00483 (4+2)           puls    d
E19A 6F84             (        forth.asm):00484 (6+0)           clr     ,x
E19C 39               (        forth.asm):00485 (4)             rts
                      (        forth.asm):00486         
                      (        forth.asm):00487         * Add string pointed to by Y starting at the address stored in X.
E19D 3402             (        forth.asm):00488 (4+1)   ADDS    pshs    a
E19F A6A0             (        forth.asm):00489 (4+1)   @adds1  lda     ,y+
E1A1 A780             (        forth.asm):00490 (4+1)           sta     ,x+
E1A3 26FA             (        forth.asm):00491 (3)             bne     @adds1
E1A5 3502             (        forth.asm):00492 (4+1)           puls    a
E1A7 39               (        forth.asm):00493 (4)             rts
                      (        forth.asm):00494         
                      (        forth.asm):00495         * Returns the length of the string pointed to by X (terminator excluded) in W.
E1A8 3410             (        forth.asm):00496 (4+2)   SLEN    pshs    x
E1AA 105F             (        forth.asm):00497 (2)             clrw
E1AC 105C             (        forth.asm):00498 (2)     @slen1  incw
E1AE A680             (        forth.asm):00499 (4+1)           lda     ,x+
E1B0 26FA             (        forth.asm):00500 (3)             bne     @slen1
E1B2 105A             (        forth.asm):00501 (2)             decw
E1B4 3510             (        forth.asm):00502 (4+2)           puls    x
E1B6 39               (        forth.asm):00503 (4)             rts
                      (        forth.asm):00504         
                      (        forth.asm):00505                 include console.asm
E1B7 3404             (      console.asm):00001 (4+1)   PUTCH   pshs    b
E1B9 C602             (      console.asm):00002 (2)             ldb     #ACITDRE
E1BB F5D800           (      console.asm):00003 (4)     @ptch1  bitb    ACIACTL         Wait for TDRE bit to be set
E1BE 27FB             (      console.asm):00004 (3)             beq     @ptch1
E1C0 B7D801           (      console.asm):00005 (4)             sta     ACIADAT         Transmit data
E1C3 3504             (      console.asm):00006 (4+1)           puls    b
E1C5 39               (      console.asm):00007 (4)             rts
                      (      console.asm):00008         
E1C6 8615             (      console.asm):00009 (2)     GETCH   lda     #ACIRTS0
E1C8 B7D800           (      console.asm):00010 (4)             sta     ACIACTL         You may talk to me now
E1CB 8601             (      console.asm):00011 (2)             lda     #ACIRDRF
E1CD B5D800           (      console.asm):00012 (4)     @again  bita    ACIACTL
E1D0 27FB             (      console.asm):00013 (3)             beq     @again
E1D2 8655             (      console.asm):00014 (2)             lda     #ACIRTS1
E1D4 B7D800           (      console.asm):00015 (4)             sta     ACIACTL         You may shut up now
                      (      console.asm):00016                 IFNE    CKOVRUN
                      (      console.asm):00017                 lda     #ACIOVRN
                      (      console.asm):00018                 bita    ACIACTL         Check for overrun
                      (      console.asm):00019                 beq     @getdat
                      (      console.asm):00020                 lda     #'*
                      (      console.asm):00021                 bsr     PUTCH
                      (      console.asm):00022                 ENDC
E1D7 B6D801           (      console.asm):00023 (4)     @getdat lda     ACIADAT         Get character from the ACIA
E1DA 39               (      console.asm):00024 (4)             rts
                      (      console.asm):00025         
                      (      console.asm):00026         * Send NUL terminated string pointed to by X to the ACIA.
E1DB 3416             (      console.asm):00027 (4+4)   PUTS    pshs    x,d
E1DD A680             (      console.asm):00028 (4+1)   @puts1  lda     ,x+
E1DF 2704             (      console.asm):00029 (3)             beq     @puts2         NUL marks the end of the string
E1E1 8DD4             (      console.asm):00030 (6)             bsr     PUTCH
E1E3 20F8             (      console.asm):00031 (3)             bra     @puts1
E1E5 3516             (      console.asm):00032 (4+4)   @puts2  puls    d,x
E1E7 39               (      console.asm):00033 (4)             rts
                      (      console.asm):00034         
E1E8 3410             (      console.asm):00035 (4+2)   PUTCR   pshs    x
E1EA 8EFE58           (      console.asm):00036 (3)             ldx     #CRLFSTR
E1ED 8DEC             (      console.asm):00037 (6)             bsr     PUTS
E1EF 3510             (      console.asm):00038 (4+2)           puls    x
E1F1 39               (      console.asm):00039 (4)             rts
                      (      console.asm):00040         
E1F2 8608             (      console.asm):00041 (2)     _BS     lda     #BS
E1F4 8DC1             (      console.asm):00042 (6)             bsr     PUTCH          Output BS
E1F6 8620             (      console.asm):00043 (2)             lda     #SP
E1F8 8DBD             (      console.asm):00044 (6)             bsr     PUTCH          Clear character
E1FA 8608             (      console.asm):00045 (2)             lda     #BS
E1FC 20B9             (      console.asm):00046 (3)             bra     PUTCH          And go back again
                      (      console.asm):00047         
                      (      console.asm):00048         * Receive CR terminated string and store it to X.
                      (      console.asm):00049         * Upon entry B contains the receiving buffer length.
                      (      console.asm):00050         * (excluding the NUL terminator). On exit, B will
                      (      console.asm):00051         * contain the number of characters entered (excluding
                      (      console.asm):00052         * the trailing NUL). A and X are preserved. B will
                      (      console.asm):00053         * have the actual number of characters entered.
                      (      console.asm):00054         * Implementation of $05D9 in TRS-80 Level II ROM.
E1FE C102             (      console.asm):00055 (2)     GETS    cmpb    #2
E200 2401             (      console.asm):00056 (3)             bhs     @gets0          B must be 2 or more
E202 39               (      console.asm):00057 (4)             rts
E203 3416             (      console.asm):00058 (4+4)   @gets0  pshs    x,d
E205 8DBF             (      console.asm):00059 (6)     @gets1  bsr     GETCH
E207 8108             (      console.asm):00060 (2)             cmpa    #BS             Backspace?
E209 260B             (      console.asm):00061 (3)             bne     @gets3
E20B E161             (      console.asm):00062 (4+1)           cmpb    1,s             B upon routine entry
E20D 27F6             (      console.asm):00063 (3)             beq     @gets1          Do not go beyond the beginning of the buffer
E20F 8DE1             (      console.asm):00064 (6)             bsr     _BS
E211 301F             (      console.asm):00065 (4+1)           leax    -1,x
E213 5C               (      console.asm):00066 (1)             incb
E214 20EF             (      console.asm):00067 (3)             bra     @gets1
E216 8115             (      console.asm):00068 (2)     @gets3  cmpa    #NAK            Kill input?
E218 260B             (      console.asm):00069 (3)             bne     @gets5
                      (      console.asm):00070         * While B != 1,S (initial buffer length), decrement X, increment B.
E21A E161             (      console.asm):00071 (4+1)   @gets4  cmpb    1,s
E21C 27E7             (      console.asm):00072 (3)             beq     @gets1
E21E 8DD2             (      console.asm):00073 (6)             bsr     _BS
E220 301F             (      console.asm):00074 (4+1)           leax     -1,x
E222 5C               (      console.asm):00075 (1)             incb
E223 20F5             (      console.asm):00076 (3)             bra     @gets4
                      (      console.asm):00077         * Regular input handling: echo input character.
E225 810D             (      console.asm):00078 (2)     @gets5  cmpa    #CR
E227 2709             (      console.asm):00079 (3)             beq     @gets6          Minicom only sends CR
E229 8D8C             (      console.asm):00080 (6)             bsr     PUTCH
E22B A780             (      console.asm):00081 (4+1)           sta     ,x+
E22D 5A               (      console.asm):00082 (1)             decb
E22E C101             (      console.asm):00083 (2)             cmpb    #1              End of buffer reached?
E230 26D3             (      console.asm):00084 (3)             bne     @gets1
E232 8620             (      console.asm):00085 (2)     @gets6  lda     #SP
E234 8D81             (      console.asm):00086 (6)             bsr     PUTCH
E236 6F84             (      console.asm):00087 (6+0)           clr     ,x
E238 1F10             (      console.asm):00088 (4)             tfr     x,d
E23A A362             (      console.asm):00089 (5+1)           subd    2,s             Actual number of characters entered
E23C E761             (      console.asm):00090 (4+1)           stb     1,s             Stored to B (through the system stack).         
E23E 3516             (      console.asm):00091 (4+4)           puls    x,d
E240 39               (      console.asm):00092 (4)             rts
                      (      console.asm):00093         
                      (        forth.asm):00506         
                      (        forth.asm):00507                 IFNE    DEBUG
E241                  (        forth.asm):00508         PAGE0IN pshs    x               Fill up page 0 with all C7 (an illegal opcode)
                      (        forth.asm):00509                 ldx     #RAMSTRT
                      (        forth.asm):00510                 lda     #ILLOPC
                      (        forth.asm):00511                 sta     ,x
                      (        forth.asm):00512                 leay    1,x
                      (        forth.asm):00513                 ldw     #255
                      (        forth.asm):00514                 tfm     x+,y+
                      (        forth.asm):00515                 puls    x
                      (        forth.asm):00516                 rts
                      (        forth.asm):00517                 ENDC
                      (        forth.asm):00518         
E241 BDE9E1           (        forth.asm):00519         FORTHIN RFXT    jsr,NCLR+7      XT for NCLR. Set up the normal stack
E244 BDE9ED           (        forth.asm):00520                 RFXT    jsr,RCLR+7      XT for RCLR. Set up the return stack
                      (        forth.asm):00521                 IFNE    DEBUG
                      (        forth.asm):00522                 bsr     PAGE0IN
                      (        forth.asm):00523                 ENDC
                      (        forth.asm):00524         * Relocate '@' code to RAM and set it up as the last dictionary entry (RO).
E247 8EFDD0           (        forth.asm):00525 (3)             ldx     #THEEND         Source address for tfm
E24A CCFDE0           (        forth.asm):00526 (3)             ldd     #REALEND
E24D 103210           (        forth.asm):00527 (4)             subr    x,d
E250 1F06             (        forth.asm):00528 (4)             tfr     d,w             Byte count for tfm
E252 108E0C10         (        forth.asm):00529 (4)             ldy     #WDICSPC        Destination address for tfm
E256 109F06           (        forth.asm):00530 (5)             sty     LSTWAD
E259 113812           (        forth.asm):00531 (6+?)           tfm     x+,y+
E25C 109F08           (        forth.asm):00532 (5)             sty     DICEND
                      (        forth.asm):00533                 IFNE    RELFEAT
E25F BDEB01           (        forth.asm):00534                 RFXT    jsr,MONITOR+10  XT for MONITOR (monitor @ in RAM)
                      (        forth.asm):00535                 ENDC
E262 8D0D             (        forth.asm):00536 (6)             bsr     EMPTYB          Buffer related initializations.
E264 104F             (        forth.asm):00537 (2)             clrd
E266 DD1E             (        forth.asm):00538 (4)             std     USTATE          Initial mode is interpretation
E268 DD24             (        forth.asm):00539 (4)             std     USCR            Clear SCR
E26A DD22             (        forth.asm):00540 (4)             std     UBLK            Clear BLK
E26C DD20             (        forth.asm):00541 (4)             std     UTOIN           Clear >IN
E26E 7EFA0C           (        forth.asm):00542                 RFXT    jmp,DECIMAL+10  XT for DECIMAL. Default base is decimal
                      (        forth.asm):00543         
E271 8E03F0           (        forth.asm):00544 (3)     EMPTYB  ldx     #BUF0
E274 8D03             (        forth.asm):00545 (6)             bsr     EMPT1B
E276 8E0800           (        forth.asm):00546 (3)             ldx     #BUF1
                      (        forth.asm):00547         * Empty the buffer pointed to by X.
E279 9F1A             (        forth.asm):00548 (4)     EMPT1B  stx     MRUBUFA         Update most recently used buffer address
E27B 30890400         (        forth.asm):00549 (4+3)           leax    BOTERM,x        Buffer offset to the terminator field
E27F 104F             (        forth.asm):00550 (2)             clrd
E281 ED84             (        forth.asm):00551 (5+0)           std     ,x              Clear terminator and flags fields
                      (        forth.asm):00552                 IFNE    DEBUG
                      (        forth.asm):00553                 ldd     #$C7C7
                      (        forth.asm):00554                 leax    2,x
                      (        forth.asm):00555                 std     ,x              Dummy block number
                      (        forth.asm):00556                 ENDC
E283 39               (        forth.asm):00557 (4)             rts
                      (        forth.asm):00558         
                      (        forth.asm):00559         * Scan for the next non-space character pointed to by X.
                      (        forth.asm):00560         * That character is returned through A. Flags are set accordingly.
E284 A680             (        forth.asm):00561 (4+1)   SCNSTOK lda     ,x+
E286 2704             (        forth.asm):00562 (3)             beq     @scstk1
E288 8120             (        forth.asm):00563 (2)             cmpa    #SP
E28A 27F8             (        forth.asm):00564 (3)             beq     SCNSTOK
E28C 301F             (        forth.asm):00565 (4+1)   @scstk1 leax    -1,x            Keep X pointing at the beginning of the token
E28E 9F02             (        forth.asm):00566 (4)             stx     TOKENSP
E290 4D               (        forth.asm):00567 (1)             tsta                    Have to test again because LEA affects Z
E291 39               (        forth.asm):00568 (4)             rts
                      (        forth.asm):00569         
                      (        forth.asm):00570         * Scan for the next white space character (or NUL) as an end of token marker.
                      (        forth.asm):00571         * Upon entry:
                      (        forth.asm):00572         * - X points to the input stream.
                      (        forth.asm):00573         * Upon return:
                      (        forth.asm):00574         * - X will point to the next space character or NUL.
                      (        forth.asm):00575         * - CURTOKL will hold the current token length (returned in B).
                      (        forth.asm):00576         * - TOKENEP will point to the end of the current token.
E292 5F               (        forth.asm):00577 (1)     SCNETOK clrb
E293 5C               (        forth.asm):00578 (1)     @scetok incb
E294 A680             (        forth.asm):00579 (4+1)           lda     ,x+
E296 2704             (        forth.asm):00580 (3)             beq     @scetk1
E298 8120             (        forth.asm):00581 (2)             cmpa    #SP
E29A 26F7             (        forth.asm):00582 (3)             bne     @scetok
E29C 301F             (        forth.asm):00583 (4+1)   @scetk1 leax    -1,x            Keep X pointing at the end of the token
E29E 9F04             (        forth.asm):00584 (4)             stx     TOKENEP
E2A0 5A               (        forth.asm):00585 (1)             decb
E2A1 D731             (        forth.asm):00586 (3)             stb     CURTOKL
E2A3 39               (        forth.asm):00587 (4)             rts
                      (        forth.asm):00588         
                      (        forth.asm):00589         * Check whether BASE is in the supported range ([2..36]).
E2A4 961D             (        forth.asm):00590 (3)     CKBASE  lda     UBASE+1         BASE
E2A6 8102             (        forth.asm):00591 (2)             cmpa    #2
E2A8 2505             (        forth.asm):00592 (3)             blo     @ckbser         Must be >= 2
E2AA 8124             (        forth.asm):00593 (2)             cmpa    #36
E2AC 2201             (        forth.asm):00594 (3)             bhi     @ckbser         And <= 36 (the ANSi maximum)
E2AE 39               (        forth.asm):00595 (4)             rts
E2AF C60F             (        forth.asm):00596 (2)     @ckbser ldb     #15             Invalid BASE
E2B1 BDE60B           (        forth.asm):00597 (7)             jsr     ERRHDLR         No return
     E2B4             (        forth.asm):00598         CKBASRA equ     *
                      (        forth.asm):00599         
                      (        forth.asm):00600         * NUMCVT performs a signed string to number conversion. The input string is
                      (        forth.asm):00601         * acquired from the input stream. Note that this routine always is called
                      (        forth.asm):00602         * after a dictionary lookup (SWDIC), so TOKENSP and CURTOKL are guaranteed
                      (        forth.asm):00603         * to have been set previously. There are two ways out this routine:
                      (        forth.asm):00604         * - redirection to the error handler (Undefined word), or
                      (        forth.asm):00605         * - a converted cell returned through X.
                      (        forth.asm):00606         * This a re-implementation based on CONVERT but unlike CONVERT, which produces
                      (        forth.asm):00607         * an unsigned double as its output, this produces a signed single cell.
E2B4 8DEE             (        forth.asm):00608 (6)     NUMCVT  bsr     CKBASE          No return if BASE isn't in the [2..36] range
E2B6 9E02             (        forth.asm):00609 (4)             ldx     TOKENSP
E2B8 9631             (        forth.asm):00610 (3)             lda     CURTOKL         Character count to go through
E2BA 3402             (        forth.asm):00611 (4+1)           pshs    a
E2BC 104F             (        forth.asm):00612 (2)             clrd                    Initialize the result
E2BE 972F             (        forth.asm):00613 (3)             sta     ISNEGF          Assume it be be non-negative
                      (        forth.asm):00614         * Check for optional minus sign.
E2C0 11E684           (        forth.asm):00615 (5+0)           ldf     ,x
E2C3 11C12D           (        forth.asm):00616 (3)             cmpf    #'-
E2C6 2606             (        forth.asm):00617 (3)             bne     @ncnxt
E2C8 0C2F             (        forth.asm):00618 (5)             inc     ISNEGF          Remember to negate the result before returning
E2CA 3001             (        forth.asm):00619 (4+1)           leax    1,x             Skip the negativity!
E2CC 6AE4             (        forth.asm):00620 (6+0)           dec     ,s              Decrement token length
E2CE 119F1C           (        forth.asm):00621 (29)    @ncnxt  muld    UBASE           D multipled by BASE to Q (D:W)
E2D1 E680             (        forth.asm):00622 (4+1)           ldb     ,x+             Acquire next input char (ignore the product MSC)
E2D3 C030             (        forth.asm):00623 (2)             subb    #'0
E2D5 252B             (        forth.asm):00624 (3)             blo     @ncoor          Digit out of range
E2D7 C10A             (        forth.asm):00625 (2)             cmpb    #10
E2D9 2510             (        forth.asm):00626 (3)             blo     @ncnolt         No letter in potential BASE
                      (        forth.asm):00627                 IFEQ    CSSNTVE
E2DB C111             (        forth.asm):00628 (2)             cmpb    #'A-'0
E2DD 2523             (        forth.asm):00629 (3)             blo     @ncoor          Greater than 9 but lower than A
E2DF C131             (        forth.asm):00630 (2)             cmpb    #'a-'0
E2E1 2506             (        forth.asm):00631 (3)             blo     @ncisuc         Upper case already
E2E3 C14A             (        forth.asm):00632 (2)             cmpb    #'z-'0
E2E5 221B             (        forth.asm):00633 (3)             bhi     @ncoor          Definitely out of range
E2E7 C020             (        forth.asm):00634 (2)             subb    #'a-'A          To upper case
                      (        forth.asm):00635                 ENDC
E2E9 C007             (        forth.asm):00636 (2)     @ncisuc subb    #'A-':          A-Z to number
E2EB D11D             (        forth.asm):00637 (3)     @ncnolt cmpb    UBASE+1         B has a digit. Make sure it's less than BASE
E2ED 2413             (        forth.asm):00638 (3)             bhs     @ncoor
                      (        forth.asm):00639         * Digit in B has been validated wrt. BASE.
E2EF 4F               (        forth.asm):00640 (1)             clra
E2F0 103060           (        forth.asm):00641 (4)             addr    w,d
E2F3 6AE4             (        forth.asm):00642 (6+0)           dec     ,s              Are we done yet?
E2F5 26D7             (        forth.asm):00643 (3)             bne     @ncnxt          No. Iterate over to the next digit
E2F7 0D2F             (        forth.asm):00644 (4)             tst     ISNEGF          Are we dealing with a negative number?
E2F9 2702             (        forth.asm):00645 (3)             beq     @ncdone         No
E2FB 1040             (        forth.asm):00646 (2)             negd                    Acknowledge the negativity
E2FD 3261             (        forth.asm):00647 (4+1)   @ncdone leas    1,s             Drop token length from the system stack
E2FF 1F01             (        forth.asm):00648 (4)             tfr     d,x             Return the result in X
E301 39               (        forth.asm):00649 (4)             rts
E302 3261             (        forth.asm):00650 (4+1)   @ncoor  leas    1,s             Drop token length from the system stack
E304 9E02             (        forth.asm):00651 (4)             ldx     TOKENSP         Current digit is out of range
E306 C602             (        forth.asm):00652 (2)             ldb     #2              Undefined (X points to the offending word)
E308 BDE60B           (        forth.asm):00653 (7)             jsr     ERRHDLR         No return
     E30B             (        forth.asm):00654         NUMCVRA equ     *               For symbolic stack dump purposes
                      (        forth.asm):00655         
                      (        forth.asm):00656         * Check for minimal data stack depth. On input D has the lowest possible stack
                      (        forth.asm):00657         * address that satisfies the needs of the caller. This routine is meant
                      (        forth.asm):00658         * to support "transactional" behaviour, which is intended to improve
                      (        forth.asm):00659         * debugging support.
E30B 103703           (        forth.asm):00660 (4)     CHKNDPT cmpr    d,u
E30E 2201             (        forth.asm):00661 (3)             bhi     @stkudf
E310 39               (        forth.asm):00662 (4)             rts
E311 C601             (        forth.asm):00663 (2)     @stkudf ldb     #1              Data stack underflow
E313 BDE60B           (        forth.asm):00664 (7)             jsr     ERRHDLR         No return
     E316             (        forth.asm):00665         CKDPTRA equ     *
                      (        forth.asm):00666         
                      (        forth.asm):00667         * Convert number stored in X to a string (depending on BASE value).
                      (        forth.asm):00668         * Output is stored in the global TBUFF buffer. X is preserved.
E316 8D8C             (        forth.asm):00669 (6)     CVNSTR  bsr     CKBASE
E318 0F2F             (        forth.asm):00670 (5)             clr     ISNEGF
E31A 1F10             (        forth.asm):00671 (4)             tfr     x,d
E31C 0D30             (        forth.asm):00672 (4)             tst     CVISSGN         Are we to perform a signed conversion?
E31E 2708             (        forth.asm):00673 (3)             beq     @cvnst1
E320 104D             (        forth.asm):00674 (2)             tstd
E322 2A04             (        forth.asm):00675 (3)             bpl     @cvnst1
E324 0C2F             (        forth.asm):00676 (5)             inc     ISNEGF          Number being converted is negative
E326 1040             (        forth.asm):00677 (2)             negd
E328 1F06             (        forth.asm):00678 (4)     @cvnst1 tfr     d,w
E32A 104F             (        forth.asm):00679 (2)             clrd
E32C 108E03B1         (        forth.asm):00680 (4)             ldy     #TBUFF+19       Sign + 16 digits + terminator + 1
E330 6FA2             (        forth.asm):00681 (6+1)           clr     ,-y             End of string marker
E332 119E1C           (        forth.asm):00682 (35)    @cvnst2 divq    UBASE           D returns the modulo and W the quotient
E335 8630             (        forth.asm):00683 (2)             lda     #'0
E337 C10A             (        forth.asm):00684 (2)             cmpb    #10
E339 2502             (        forth.asm):00685 (3)             bcs     @cvnst3
                      (        forth.asm):00686         * BASE has letters among its valid numbers.
E33B 8637             (        forth.asm):00687 (2)             lda     #'A-10
E33D 103089           (        forth.asm):00688 (4)     @cvnst3 addr    a,b
E340 E7A2             (        forth.asm):00689 (4+1)           stb     ,-y
E342 104F             (        forth.asm):00690 (2)             clrd
E344 105D             (        forth.asm):00691 (2)             tstw
E346 26EA             (        forth.asm):00692 (3)             bne     @cvnst2
E348 C620             (        forth.asm):00693 (2)             ldb     #SP
E34A 0D2F             (        forth.asm):00694 (4)             tst     ISNEGF
E34C 2702             (        forth.asm):00695 (3)             beq     @cvnst4
E34E C62D             (        forth.asm):00696 (2)             ldb     #'-
E350 E7A2             (        forth.asm):00697 (4+1)   @cvnst4 stb     ,-y
                      (        forth.asm):00698         * We need to insert leading spaces up to the beginning of the output buffer.
E352 C620             (        forth.asm):00699 (2)             ldb     #SP
E354 108C039E         (        forth.asm):00700 (4)     @cvnst5 cmpy    #TBUFF
E358 2601             (        forth.asm):00701 (3)             bne     @cvnst6
E35A 39               (        forth.asm):00702 (4)             rts
E35B E7A2             (        forth.asm):00703 (4+1)   @cvnst6 stb     ,-y
E35D 20F5             (        forth.asm):00704 (3)             bra     @cvnst5
                      (        forth.asm):00705         
                      (        forth.asm):00706         * Search word beginning at address TOKENSP in the dictionary.
                      (        forth.asm):00707         * Upon return Z will be set if the word was not found.
                      (        forth.asm):00708         * Otherwise, Y will point to the code section of the word.
                      (        forth.asm):00709         * CSSNTVE (defined in constants.asm) defines whether the
                      (        forth.asm):00710         * dictionary match is case sensitive or not.
                      (        forth.asm):00711         * Important note: if the word is found TOKENEP will be copied to TOKENSP.
E35F 9E02             (        forth.asm):00712 (4)     SWDIC   ldx     TOKENSP
E361 BDE292           (        forth.asm):00713 (7)             jsr     SCNETOK         B has CURTOKL
E364 9E08             (        forth.asm):00714 (4)             ldx     DICEND
E366 9F16             (        forth.asm):00715 (4)             stx     VLPRVEP         Last dictionary entry code address + 1
E368 9E02             (        forth.asm):00716 (4)             ldx     TOKENSP
E36A 109E06           (        forth.asm):00717 (5)             ldy     LSTWAD          Latest word header address to Y
E36D 2606             (        forth.asm):00718 (3)     @swrdc0 bne     @swrdc1
E36F 1FC2             (        forth.asm):00719 (4)             tfr     0,y             Word not found. Z is set
E371 109F0E           (        forth.asm):00720 (5)             sty     PLOAD
E374 39               (        forth.asm):00721 (4)             rts
E375 A6A4             (        forth.asm):00722 (4+0)   @swrdc1 lda     ,y              Word attribute to A
E377 841F             (        forth.asm):00723 (2)             anda    #WRLNMSK        Extract word length
E379 3420             (        forth.asm):00724 (4+2)           pshs    y
E37B 103798           (        forth.asm):00725 (4)             cmpr    b,a             Word length match?
E37E 2638             (        forth.asm):00726 (3)             bne     @swrdc3         No, point to next dictionary entry
E380 3121             (        forth.asm):00727 (4+1)           leay    1,y
E382 A6A0             (        forth.asm):00728 (4+1)   @swrdc2 lda     ,y+
                      (        forth.asm):00729                 IFNE    CSSNTVE
                      (        forth.asm):00730                 cmpa    ,x+             Case sensitive dictionary
                      (        forth.asm):00731                 ELSE
E384 1F9E             (        forth.asm):00732 (4)             tfr     b,e             Case insensitive search (preferred)
E386 E680             (        forth.asm):00733 (4+1)           ldb     ,x+
E388 C161             (        forth.asm):00734 (2)             cmpb    #'a
E38A 2506             (        forth.asm):00735 (3)             bcs     @nochg
E38C C17B             (        forth.asm):00736 (2)             cmpb    #'z+1
E38E 2402             (        forth.asm):00737 (3)             bcc     @nochg
E390 C020             (        forth.asm):00738 (2)             subb    #'a-'A
E392 103798           (        forth.asm):00739 (4)     @nochg  cmpr    b,a
E395 1FE9             (        forth.asm):00740 (4)             tfr     e,b
                      (        forth.asm):00741                 ENDC
E397 261F             (        forth.asm):00742 (3)             bne     @swrdc3
E399 5A               (        forth.asm):00743 (1)             decb
E39A 26E6             (        forth.asm):00744 (3)             bne     @swrdc2
                      (        forth.asm):00745         * Word match!
E39C 3510             (        forth.asm):00746 (4+2)           puls    x
E39E E684             (        forth.asm):00747 (4+0)           ldb     ,x              Word attribute byte to B
E3A0 4F               (        forth.asm):00748 (1)             clra
E3A1 58               (        forth.asm):00749 (1)             lslb                    Bit 7 to CFLAG
E3A2 49               (        forth.asm):00750 (1)             rola                    CFLAG to A
E3A3 9732             (        forth.asm):00751 (3)             sta     IMDFLG          Set IMMEDIATE flag
E3A5 4F               (        forth.asm):00752 (1)             clra
E3A6 58               (        forth.asm):00753 (1)             lslb                    Bit 6 to CFLAG
E3A7 49               (        forth.asm):00754 (1)             rola                    CFLAG to A
E3A8 9733             (        forth.asm):00755 (3)             sta     DEFFLG          Set DEFINE flag
E3AA 9E04             (        forth.asm):00756 (4)             ldx     TOKENEP
E3AC 9F02             (        forth.asm):00757 (4)             stx     TOKENSP
                      (        forth.asm):00758                 IFNE    RELFEAT
E3AE 3123             (        forth.asm):00759 (4+1)           leay    3,y             Skip back pointer and checksum. Return XT
                      (        forth.asm):00760                 ELSE
                      (        forth.asm):00761                 leay    2,y             Skip back pointer. Return XT
                      (        forth.asm):00762                 ENDC
E3B0 DC16             (        forth.asm):00763 (4)             ldd     VLPRVEP
E3B2 103220           (        forth.asm):00764 (4)             subr    y,d
E3B5 DD0E             (        forth.asm):00765 (4)             std     PLOAD
E3B7 39               (        forth.asm):00766 (4)             rts                     NZ since there is no zero payload word
E3B8 3520             (        forth.asm):00767 (4+2)   @swrdc3 puls    y               Point to previous word header
E3BA 109F16           (        forth.asm):00768 (5)             sty     VLPRVEP
E3BD 4F               (        forth.asm):00769 (1)             clra
E3BE E6A0             (        forth.asm):00770 (4+1)           ldb     ,y+
E3C0 C41F             (        forth.asm):00771 (2)             andb    #WRLNMSK
E3C2 31AB             (        forth.asm):00772 (4+2)           leay    d,y
E3C4 9E02             (        forth.asm):00773 (4)             ldx     TOKENSP
E3C6 D631             (        forth.asm):00774 (3)             ldb     CURTOKL
E3C8 10AEA4           (        forth.asm):00775 (6+0)           ldy     ,y
E3CB 20A0             (        forth.asm):00776 (3)             bra     @swrdc0
                      (        forth.asm):00777         
                      (        forth.asm):00778         * Create new dictionary entry. The word name being created is acquired from
                      (        forth.asm):00779         * the input stream. Warning, this requires a writable dictionary!
                      (        forth.asm):00780         * The new end of the dictionary is returned in Y. W is preserved.
E3CD 1038             (        forth.asm):00781 (6)     LOCWRT  pshsw
E3CF 9E08             (        forth.asm):00782 (4)             ldx     DICEND
                      (        forth.asm):00783                 IFNE    DEBUG
                      (        forth.asm):00784                 cmpx    #ROMSTRT
                      (        forth.asm):00785                 bcs     @locwr0
                      (        forth.asm):00786                 ldb     #10             Assertion failure (trying to write to ROM!)
                      (        forth.asm):00787                 jsr     ERRHDLR         No return
E3D1                  (        forth.asm):00788         LWAFRA  equ     *
                      (        forth.asm):00789                 ENDC
E3D1 9F0C             (        forth.asm):00790 (4)     @locwr0 stx     BDICEND         Back pointer up
E3D3 9E06             (        forth.asm):00791 (4)             ldx     LSTWAD
E3D5 9F0A             (        forth.asm):00792 (4)             stx     BLSTWAD         Back pointer up
E3D7 BDE6D8           (        forth.asm):00793 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
E3DA 6D84             (        forth.asm):00794 (5+0)           tst     ,x
E3DC 2605             (        forth.asm):00795 (3)             bne     @locwr2
E3DE C605             (        forth.asm):00796 (2)     @locwr1 ldb     #5              Missing word name
E3E0 BDE60B           (        forth.asm):00797 (7)             jsr     ERRHDLR         No return
     E3E3             (        forth.asm):00798         LWMNRA  equ     *               LOCWRT missing word name return address
E3E3 BDE284           (        forth.asm):00799 (7)     @locwr2 jsr     SCNSTOK
E3E6 27F6             (        forth.asm):00800 (3)             beq     @locwr1         End of line reached
E3E8 BDE292           (        forth.asm):00801 (7)             jsr     SCNETOK         X has TOKENEP, B has CURTOKL
E3EB 109E02           (        forth.asm):00802 (5)             ldy     TOKENSP
E3EE 103221           (        forth.asm):00803 (4)             subr    y,x
E3F1 3410             (        forth.asm):00804 (4+2)           pshs    x               Word length to the system stack
E3F3 9E08             (        forth.asm):00805 (4)             ldx     DICEND
E3F5 A661             (        forth.asm):00806 (4+1)           lda     1,s             Word length LSB in the system stack
E3F7 8120             (        forth.asm):00807 (2)             cmpa    #1+WRLNMSK      Max word length is 31, 79-STANDARD compliant
E3F9 2505             (        forth.asm):00808 (3)             blo     @lcwr21
E3FB C610             (        forth.asm):00809 (2)             ldb     #16             Word name is too long
E3FD BDE60B           (        forth.asm):00810 (7)             jsr     ERRHDLR
     E400             (        forth.asm):00811         WTOOLNG equ     *
E400 A780             (        forth.asm):00812 (4+1)   @lcwr21 sta     ,x+             Word length to dictionary
E402 10A6E1           (        forth.asm):00813 (6+2)           ldw     ,s++            16-bit word length to W
E405 1E12             (        forth.asm):00814 (5)             exg     x,y             Y points to the dictionary, X has TOKENSP
                      (        forth.asm):00815                 IFNE    CSSNTVE
                      (        forth.asm):00816                 tfm     x+,y+           Word name to dictionary, as is
                      (        forth.asm):00817                 ELSE
E407 1FF9             (        forth.asm):00818 (4)             tfr     f,b             Force dictionary entry to upper case
E409 A680             (        forth.asm):00819 (4+1)   @locwr3 lda     ,x+
E40B 8161             (        forth.asm):00820 (2)             cmpa    #'a
E40D 2506             (        forth.asm):00821 (3)             bcs     @locwr4
E40F 817B             (        forth.asm):00822 (2)             cmpa    #'z+1
E411 2402             (        forth.asm):00823 (3)             bcc     @locwr4
E413 8020             (        forth.asm):00824 (2)             suba    #'a-'A          To upper case
E415 A7A0             (        forth.asm):00825 (4+1)   @locwr4 sta     ,y+
E417 5A               (        forth.asm):00826 (1)             decb
E418 26EF             (        forth.asm):00827 (3)             bne     @locwr3
                      (        forth.asm):00828                 ENDC
E41A 1F10             (        forth.asm):00829 (4)             tfr     x,d
E41C 9326             (        forth.asm):00830 (4)             subd    BSBFADR
E41E DD20             (        forth.asm):00831 (4)             std     UTOIN           Skip word name in the input stream
E420 9E06             (        forth.asm):00832 (4)             ldx     LSTWAD
E422 AFA1             (        forth.asm):00833 (5+2)           stx     ,y++            Back pointer to dictionary
                      (        forth.asm):00834                 IFNE    RELFEAT
E424 6FA0             (        forth.asm):00835 (6+1)           clr     ,y+             Initialize the checksum header field
                      (        forth.asm):00836                 ENDC
E426 109F08           (        forth.asm):00837 (5)             sty     DICEND
E429 109F12           (        forth.asm):00838 (5)             sty     RECADDR         Should we resort to recursion later on
E42C 1039             (        forth.asm):00839 (6)             pulsw
E42E 39               (        forth.asm):00840 (4)             rts
                      (        forth.asm):00841         
                      (        forth.asm):00842         * Compile 'ldx  #X; jsr NPUSH'.
                      (        forth.asm):00843         * DICEND is updated and returned in Y.
E42F 109E08           (        forth.asm):00844 (5)     LITER   ldy     DICEND
E432 868E             (        forth.asm):00845 (2)             lda     #LDXOPC         LDX immediate
E434 8D10             (        forth.asm):00846 (6)             bsr     VARCON2
E436 86BD             (        forth.asm):00847 (2)             lda     #JSROPC         JSR extended
E438 BDE13A           (        forth.asm):00848 (7)             jsr     CHKRTS          Check if the final RTS can be omitted
E43B 8D06             (        forth.asm):00849 (6)             bsr     VARCON1
E43D 109F08           (        forth.asm):00850 (5)             sty     DICEND
E440 39               (        forth.asm):00851 (4)             rts
                      (        forth.asm):00852         
                      (        forth.asm):00853         * Compile 'jmp  NPUSH'.
                      (        forth.asm):00854         * Y points to the end of the dictionary on entry and on exit.
E441 867E             (        forth.asm):00855 (2)     VARCON  lda     #JMPOPC         JMP extended
E443 8EE684           (        forth.asm):00856 (3)     VARCON1 ldx     #NPUSH
E446 A7A0             (        forth.asm):00857 (4+1)   VARCON2 sta     ,y+
E448 AFA1             (        forth.asm):00858 (5+2)           stx     ,y++
E44A 39               (        forth.asm):00859 (4)             rts
                      (        forth.asm):00860         
                      (        forth.asm):00861         * Used by U<, U>, <, >.
E44B CC0246BDE30B     (        forth.asm):00862         CMP2    MINDREQ 2               At least 2 cells must be stacked up
E451 10AEC4           (        forth.asm):00863 (6+0)   CMP2RA  ldy     ,u
E454 AE42             (        forth.asm):00864 (5+1)           ldx     2,u
E456 103721           (        forth.asm):00865 (4)             cmpr    y,x
E459 1FA9             (        forth.asm):00866 (4)             tfr     cc,b
                      (        forth.asm):00867                 IFNE    DEBUG
                      (        forth.asm):00868                 clra
                      (        forth.asm):00869                 std     CCREG
                      (        forth.asm):00870                 ENDC
E45B 1FC1             (        forth.asm):00871 (4)             tfr     0,x
E45D 3344             (        forth.asm):00872 (4+1)           leau    4,u
E45F 1F9A             (        forth.asm):00873 (4)             tfr     b,cc
E461 39               (        forth.asm):00874 (4)             rts
                      (        forth.asm):00875         
                      (        forth.asm):00876         * Used by CMOVE, <CMOVE, CMOVE>, MOVE.
E462 CC0244BDE30B     (        forth.asm):00877         ACQMOVP MINDREQ 3               At least 3 cells must be stacked up
E468 10A6C4           (        forth.asm):00878 (6+0)   ACQVMRA ldw     ,u              Byte count
E46B 10AE42           (        forth.asm):00879 (6+1)           ldy     2,u             Destination address
E46E AE44             (        forth.asm):00880 (5+1)           ldx     4,u             Source address
E470 3346             (        forth.asm):00881 (4+1)           leau    6,u             Drop 3 cells from the user stack
E472 39               (        forth.asm):00882 (4)             rts
                      (        forth.asm):00883         
                      (        forth.asm):00884         * FDCTSYM enveadours to match the address stored in Y to a dictionary entry.
                      (        forth.asm):00885         * Upon a successful flexible match, it will output a string in the form of
                      (        forth.asm):00886         * <wordname>+<offset> to the string pointed to by X. <wordname> refers to the
                      (        forth.asm):00887         * code entry point of the matched word. <offset> will be expressed in hex.
                      (        forth.asm):00888         * If a match is found, Z will be clear, otherwise it will be set.
                      (        forth.asm):00889         * A candidate for a word code address must meet the following criteria:
                      (        forth.asm):00890         * ((Y U>= #EBUFS) AND (Y U< #THEEND)) OR ((Y U>= #WDICSPC) AND (Y U< DICEND)).
                      (        forth.asm):00891         * Upon return:
                      (        forth.asm):00892         * - the string pointed to by X will updated with its symbolic match
                      (        forth.asm):00893         *   (NUL terminated), if there is one. X itself might have been altered.
                      (        forth.asm):00894         * - Y should be preserved.
                      (        forth.asm):00895         * EBUFS (EMPTY-BUFFERS) header address is the last word in the dictionary.
                      (        forth.asm):00896                 IFNE    SSDFEAT
E473 3430             (        forth.asm):00897 (4+4)   FDCTSYM pshs    y,x     
E475 1F21             (        forth.asm):00898 (4)             tfr     y,x             Potential execution token to X
E477 8CE813           (        forth.asm):00899 (3)             cmpx    #EBUFS
E47A 2505             (        forth.asm):00900 (3)             blo     @fdstr2 
E47C 8CFDD0           (        forth.asm):00901 (3)             cmpx    #THEEND
E47F 250D             (        forth.asm):00902 (3)             blo     @fdsmtc
E481 8C0C10           (        forth.asm):00903 (3)     @fdstr2 cmpx    #WDICSPC        Term 2 of the predicate for a valid word addr
E484 2504             (        forth.asm):00904 (3)             blo     @fdsnom
E486 9C08             (        forth.asm):00905 (4)             cmpx    DICEND
E488 2504             (        forth.asm):00906 (3)             blo     @fdsmtc
E48A 4F               (        forth.asm):00907 (1)     @fdsnom clra                    No match (Z is set)
E48B 3530             (        forth.asm):00908 (4+4)           puls    x,y
E48D 39               (        forth.asm):00909 (4)             rts
E48E 9E06             (        forth.asm):00910 (4)     @fdsmtc ldx     LSTWAD          Potential match. Scan upward from LAST
                      (        forth.asm):00911         * X points to the latest word header, Y has an execution token.
E490 109608           (        forth.asm):00912 (5)             ldw     DICEND          W points to the end of the code section
E493 3410             (        forth.asm):00913 (4+2)   @fdslop pshs    x               Pointer to the current word header
E495 E680             (        forth.asm):00914 (4+1)           ldb     ,x+
E497 C41F             (        forth.asm):00915 (2)             andb    #WRLNMSK
E499 3A               (        forth.asm):00916 (1)             abx                     Skip word name string
E49A EC81             (        forth.asm):00917 (5+2)           ldd     ,x++            Backlink to D
                      (        forth.asm):00918                 IFNE    RELFEAT
E49C 3001             (        forth.asm):00919 (4+1)           leax    1,x             Skip the checksum
                      (        forth.asm):00920                 ENDC
E49E 103712           (        forth.asm):00921 (4)             cmpr    x,y
E4A1 2530             (        forth.asm):00922 (3)             blo     @fdsnwd
E4A3 103762           (        forth.asm):00923 (4)             cmpr    w,y
E4A6 222B             (        forth.asm):00924 (3)             bhi     @fdsnwd         An equal address is allowed here, in case
                      (        forth.asm):00925         * jsr ERRHDLR is the last instruction for the word under consideration.
                      (        forth.asm):00926         * This happens to be the case for FORGET and LPAR.
                      (        forth.asm):00927         * Y matches the code range for the current word.
E4A8 3510             (        forth.asm):00928 (4+2)           puls    x
E4AA E680             (        forth.asm):00929 (4+1)           ldb     ,x+
E4AC C41F             (        forth.asm):00930 (2)             andb    #WRLNMSK
E4AE 1F9F             (        forth.asm):00931 (4)             tfr     b,f
E4B0 114F             (        forth.asm):00932 (2)             clre                    W has the matched word length
E4B2 10AEE4           (        forth.asm):00933 (6+0)           ldy     ,s              Y points to the target buffer
E4B5 8627             (        forth.asm):00934 (2)             lda     #''
E4B7 A7A0             (        forth.asm):00935 (4+1)           sta     ,y+
E4B9 113812           (        forth.asm):00936 (6+?)           tfm     x+,y+
E4BC A7A0             (        forth.asm):00937 (4+1)           sta     ,y+
                      (        forth.asm):00938         * Offset processing.
E4BE 862B             (        forth.asm):00939 (2)             lda     #'+
E4C0 A7A0             (        forth.asm):00940 (4+1)           sta     ,y+
                      (        forth.asm):00941                 IFNE    RELFEAT
E4C2 3003             (        forth.asm):00942 (4+1)           leax    3,x             Skip backlink and checksum
                      (        forth.asm):00943                 ELSE
                      (        forth.asm):00944                 leax    2,x             Skip backlink
                      (        forth.asm):00945                 ENDC
E4C4 EC62             (        forth.asm):00946 (5+1)           ldd     2,s             Execution token to D
E4C6 103210           (        forth.asm):00947 (4)             subr    x,d             Offset between XT and word entry point to D
E4C9 1F21             (        forth.asm):00948 (4)             tfr     y,x
E4CB BDE175           (        forth.asm):00949 (7)             jsr     HDMP4           Dump hex incarnation of the offset to X
E4CE 3530             (        forth.asm):00950 (4+4)           puls    x,y
E4D0 1CFB             (        forth.asm):00951 (2)             andcc   #^ZFLAG         Clear ZFLAG
E4D2 39               (        forth.asm):00952 (4)             rts
                      (        forth.asm):00953         * Point to the next word.
E4D3 1039             (        forth.asm):00954 (6)     @fdsnwd pulsw                   Retrieve current word header address
E4D5 104D             (        forth.asm):00955 (2)             tstd
E4D7 27B1             (        forth.asm):00956 (3)             beq     @fdsnom         Just met the last dictionary entry
E4D9 1F01             (        forth.asm):00957 (4)             tfr     d,x             Point to previous word header
E4DB 10810C10         (        forth.asm):00958 (4)             cmpw    #WDICSPC        Are we transitioning from RAM to ROM?
E4DF 26B2             (        forth.asm):00959 (3)             bne     @fdslop         No singularity
E4E1 1086FDD0         (        forth.asm):00960 (4)             ldw     #THEEND         Won't be able to diagnose the ROM based @...
E4E5 20AC             (        forth.asm):00961 (3)             bra     @fdslop
                      (        forth.asm):00962         
                      (        forth.asm):00963         * Find the best possible symbolic approximation of Y and store it to the
                      (        forth.asm):00964         * buffer pointed to by X.
                      (        forth.asm):00965         * On entry:
                      (        forth.asm):00966         * - Y has a code address which is to be matched with a symbolic name + offset.
                      (        forth.asm):00967         * - X points to a buffer where the resolution is to be stored.
                      (        forth.asm):00968         * On return:
                      (        forth.asm):00969         * - Y is to be preserved.
                      (        forth.asm):00970         * - the output buffer will be updated with the best symbolic match (NUL term'd).
E4E7 3430             (        forth.asm):00971 (4+4)   FINDSYM pshs    y,x
E4E9 8D88             (        forth.asm):00972 (6)             bsr     FDCTSYM         Search the dictionary first (flexible match)
E4EB 261B             (        forth.asm):00973 (3)             bne     @dctmfn         Dictionary match found
E4ED 8EE50D           (        forth.asm):00974 (3)             ldx     #NDCTWKS        Search kernel symbols for an exact match
E4F0 EC81             (        forth.asm):00975 (5+2)   @fsmlop ldd     ,x++
E4F2 270B             (        forth.asm):00976 (3)             beq     @fsmfnd         End of well known symbols list?
E4F4 103720           (        forth.asm):00977 (4)             cmpr    y,d
E4F7 2706             (        forth.asm):00978 (3)             beq     @fsmfnd
                      (        forth.asm):00979         * No well known symbol match. Skip string.
E4F9 A680             (        forth.asm):00980 (4+1)   @fsmskp lda     ,x+
E4FB 26FC             (        forth.asm):00981 (3)             bne     @fsmskp
E4FD 20F1             (        forth.asm):00982 (3)             bra     @fsmlop
E4FF 10AEE4           (        forth.asm):00983 (6+0)   @fsmfnd ldy     ,s
E502 A680             (        forth.asm):00984 (4+1)   @fsmfn2 lda     ,x+
E504 A7A0             (        forth.asm):00985 (4+1)           sta     ,y+
E506 26FA             (        forth.asm):00986 (3)             bne     @fsmfn2
E508 3262             (        forth.asm):00987 (4+1)   @dctmfn leas    2,s
E50A 3520             (        forth.asm):00988 (4+2)           puls    y
E50C 39               (        forth.asm):00989 (4)             rts
                      (        forth.asm):00990         
                      (        forth.asm):00991         * Non-dictionary well known symbols.
E50D E000             (        forth.asm):00992         NDCTWKS fdb     IODZHDL         Illegal opcode/Division by zero trap handler
E50F 494F445A48444C00 (        forth.asm):00993                 fcn     'IODZHDL'
E517 E6A0             (        forth.asm):00994                 fdb     DPOPRA          Data stack underflow
E519 44504F50524100   (        forth.asm):00995                 fcn     'DPOPRA'
E520 E691             (        forth.asm):00996                 fdb     DPSHRA          Data stack overflow
E522 44505348524100   (        forth.asm):00997                 fcn     'DPSHRA'
E529 E6D8             (        forth.asm):00998                 fdb     RPOPRA          Return stack underflow
E52B 52504F50524100   (        forth.asm):00999                 fcn     'RPOPRA'
E532 E6BE             (        forth.asm):01000                 fdb     RPSHRA          Return stack overflow
E534 52505348524100   (        forth.asm):01001                 fcn     'RPSHRA'
E53B E60B             (        forth.asm):01002                 fdb     ERRHDLR         Error handler
E53D 45525248444C5200 (        forth.asm):01003                 fcn     'ERRHDLR'
E545 E2B4             (        forth.asm):01004                 fdb     CKBASRA         Illegal BASE value
E547 434B424153524100 (        forth.asm):01005                 fcn     'CKBASRA'
E54F E316             (        forth.asm):01006                 fdb     CKDPTRA         Not enough parameters supplied (transac. behav.)
E551 434B445054524100 (        forth.asm):01007                 fcn     'CKDPTRA'
E559 E451             (        forth.asm):01008                 fdb     CMP2RA          Missing operand in any of U<, U>, <, >
E55B 434D5032524100   (        forth.asm):01009                 fcn     'CMP2RA'
E562 E468             (        forth.asm):01010                 fdb     ACQVMRA         Three operands missing in any of CMOVE,
                      (        forth.asm):01011         *                               <CMOVE, CMOVE>, MOVE
E564 414351564D524100 (        forth.asm):01012                 fcn     'ACQVMRA'
E56C E0BE             (        forth.asm):01013                 fdb     MINTLRA         Main interpreter loop return address
E56E 4D494E544C524100 (        forth.asm):01014                 fcn     'MINTLRA'
E576 E30B             (        forth.asm):01015                 fdb     NUMCVRA         ? while converting a string to a number
E578 4E554D4356524100 (        forth.asm):01016                 fcn     'NUMCVRA'
E580 E0D1             (        forth.asm):01017                 fdb     NMCVIRA         Numeric conversion error while interpreting
E582 4E4D435649524100 (        forth.asm):01018                 fcn     'NMCVIRA'
E58A E135             (        forth.asm):01019                 fdb     NMCVCRA         Numeric conversion error while compiling
E58C 4E4D435643524100 (        forth.asm):01020                 fcn     'NMCVCRA'
E594 E108             (        forth.asm):01021                 fdb     INTRPRA         Interpreter RA (after the execution of a word)
E596 494E545250524100 (        forth.asm):01022                 fcn     'INTRPRA'
E59E E123             (        forth.asm):01023                 fdb     COMPLRA         Compiler RA (after the execution of an IMD word)
E5A0 434F4D504C524100 (        forth.asm):01024                 fcn     'COMPLRA'
E5A8 E3E3             (        forth.asm):01025                 fdb     LWMNRA          Missing word name in LOCWRT
E5AA 4C574D4E524100   (        forth.asm):01026                 fcn     'LWMNRA'
E5B1 E7AA             (        forth.asm):01027                 fdb     CFR1SRA         CF read one sector failed
E5B3 4346523153524100 (        forth.asm):01028                 fcn     'CFR1SRA'
E5BB E684             (        forth.asm):01029                 fdb     NPUSH           Not an error RA but useful to have as a symbol
E5BD 4E5055534800     (        forth.asm):01030                 fcn     'NPUSH'
E5C3 E6A1             (        forth.asm):01031                 fdb     RPUSH           Not an error RA but useful to have as a symbol
E5C5 525055534800     (        forth.asm):01032                 fcn     'RPUSH'
E5CB E692             (        forth.asm):01033                 fdb     NPOP            Not an error RA but useful to have as a symbol
E5CD 4E504F5000       (        forth.asm):01034                 fcn     'NPOP'
E5D2 E6BF             (        forth.asm):01035                 fdb     RPOP            Not an error RA but useful to have as a symbol
E5D4 52504F5000       (        forth.asm):01036                 fcn     'RPOP'
E5D9 E1DB             (        forth.asm):01037                 fdb     PUTS            Not an error RA but useful to have as a symbol
E5DB 5055545300       (        forth.asm):01038                 fcn     'PUTS'
                      (        forth.asm):01039                 IFNE    DEBUG
                      (        forth.asm):01040                 fdb     LWAFRA          Assertion failure in LOCWRT
                      (        forth.asm):01041                 fcn     'LOCWRTAF'
                      (        forth.asm):01042                 ENDC
E5E0 0000             (        forth.asm):01043                 fdb     0               End of list
E5E2 3F3F3F00         (        forth.asm):01044                 fcn     '???'           Admit we have no clue!
                      (        forth.asm):01045                 ENDC                    SSDFEAT
                      (        forth.asm):01046         
                      (        forth.asm):01047         * Print ' (xxxx/yyyy)' where xxxx is the hex representation for BLK @ and
                      (        forth.asm):01048         * yyyy is the hex representation for >IN @.
E5E6 8E034E           (        forth.asm):01049 (3)     PRBLKIN ldx     #HEXBUF
E5E9 8620             (        forth.asm):01050 (2)             lda     #SP
E5EB A780             (        forth.asm):01051 (4+1)           sta     ,x+
E5ED 8628             (        forth.asm):01052 (2)             lda     #'(
E5EF A780             (        forth.asm):01053 (4+1)           sta     ,x+
E5F1 DC22             (        forth.asm):01054 (4)             ldd     UBLK
E5F3 BDE175           (        forth.asm):01055 (7)             jsr     HDMP4
E5F6 862F             (        forth.asm):01056 (2)             lda     #'/
E5F8 A780             (        forth.asm):01057 (4+1)           sta     ,x+
E5FA DC20             (        forth.asm):01058 (4)             ldd     UTOIN
E5FC BDE175           (        forth.asm):01059 (7)             jsr     HDMP4
E5FF 8629             (        forth.asm):01060 (2)             lda     #')
E601 A780             (        forth.asm):01061 (4+1)           sta     ,x+
E603 6F84             (        forth.asm):01062 (6+0)           clr     ,x
E605 8E034E           (        forth.asm):01063 (3)             ldx     #HEXBUF
E608 7EE1DB           (        forth.asm):01064 (3)             jmp     PUTS
                      (        forth.asm):01065         
                      (        forth.asm):01066         * Handle error condition. Error code is in B.
                      (        forth.asm):01067         * If B is 2 (undefined) X points to a string of length CURTOKL that has the
                      (        forth.asm):01068         * offending word.
E60B 10AEE4           (        forth.asm):01069 (6+0)   ERRHDLR ldy     ,s              Invoking return address
                      (        forth.asm):01070         * In case of a trap return, we enter here with Y set to #IODZHDL
E60E C102             (        forth.asm):01071 (2)     ERRHD1  cmpb    #2              Undefined symbol?
E610 261A             (        forth.asm):01072 (3)             bne     @perrm          No
E612 8627             (        forth.asm):01073 (2)             lda     #''
E614 BDE1B7           (        forth.asm):01074 (7)             jsr     PUTCH
E617 A680             (        forth.asm):01075 (4+1)   @prtsym lda     ,x+             Display undefined symbol name
E619 BDE1B7           (        forth.asm):01076 (7)             jsr     PUTCH
E61C 0A31             (        forth.asm):01077 (5)             dec     CURTOKL
E61E 2702             (        forth.asm):01078 (3)             beq     @endquo
E620 20F5             (        forth.asm):01079 (3)             bra     @prtsym
E622 8627             (        forth.asm):01080 (2)     @endquo lda     #''
E624 BDE1B7           (        forth.asm):01081 (7)             jsr     PUTCH
E627 8620             (        forth.asm):01082 (2)             lda     #SP
E629 BDE1B7           (        forth.asm):01083 (7)             jsr     PUTCH
E62C 8EFEA1           (        forth.asm):01084 (3)     @perrm  ldx     #ERRMTBL        Regular error handling
E62F 5D               (        forth.asm):01085 (1)     @nxterr tstb
E630 2633             (        forth.asm):01086 (3)             bne     @skerrm
E632 BDE1DB           (        forth.asm):01087 (7)             jsr     PUTS            Print error message
E635 8DAF             (        forth.asm):01088 (6)             bsr     PRBLKIN         Print BLK and >IN values (in hex)
E637 BDE1E8           (        forth.asm):01089 (7)             jsr     PUTCR
E63A 1F20             (        forth.asm):01090 (4)     @dmptos tfr     y,d             Dump top of the system stack contents
E63C 8E034E           (        forth.asm):01091 (3)             ldx     #HEXBUF
E63F BDE175           (        forth.asm):01092 (7)             jsr     HDMP4
E642 8620             (        forth.asm):01093 (2)             lda     #SP
E644 A780             (        forth.asm):01094 (4+1)           sta     ,x+
                      (        forth.asm):01095         * Symbolic stack dumps are configurable. In situations where the dictionary is
                      (        forth.asm):01096         * trashed, they may not be considered desirable. See SSDFEAT in constants.asm.
                      (        forth.asm):01097                 IFNE    SSDFEAT
E646 BDE4E7           (        forth.asm):01098 (7)             jsr     FINDSYM
                      (        forth.asm):01099                 ENDC
E649 8E034E           (        forth.asm):01100 (3)             ldx     #HEXBUF
E64C BDE1DB           (        forth.asm):01101 (7)             jsr     PUTS
E64F BDE1E8           (        forth.asm):01102 (7)             jsr     PUTCR
E652 108CE000         (        forth.asm):01103 (4)             cmpy    #IODZHDL
E656 2702             (        forth.asm):01104 (3)             beq     @wastrp         We're just back from the trap handler
E658 3262             (        forth.asm):01105 (4+1)           leas    2,s             Point to the next item on the stack
E65A 118C8000         (        forth.asm):01106 (4)     @wastrp cmps    #RAMSTRT+RAMSIZE
E65E 270C             (        forth.asm):01107 (3)             beq     @errdon         We're done here
E660 10AEE4           (        forth.asm):01108 (6+0)           ldy     ,s
E663 20D5             (        forth.asm):01109 (3)             bra     @dmptos
E665 A680             (        forth.asm):01110 (4+1)   @skerrm lda     ,x+             Scan for the next error message
E667 26FC             (        forth.asm):01111 (3)             bne     @skerrm
E669 5A               (        forth.asm):01112 (1)             decb
E66A 20C3             (        forth.asm):01113 (3)             bra     @nxterr
E66C 10CE8000         (        forth.asm):01114 (4)     @errdon lds     #RAMSTRT+RAMSIZE
E670 961F             (        forth.asm):01115 (3)             lda     USTATE+1        We do ignore the upper byte
E672 270D             (        forth.asm):01116 (3)             beq     @erdon2         No pointers to restore if we were interpreting
                      (        forth.asm):01117         * Compiling: clear STATE, RSP and restore LSTWAD, DICEND.
E674 0F1F             (        forth.asm):01118 (5)             clr     USTATE+1        Switch back to interpretation mode
E676 BDE9ED           (        forth.asm):01119                 RFXT    jsr,RCLR+7      XT for RCLR
E679 9E0C             (        forth.asm):01120 (4)             ldx     BDICEND         Restore essential pointers from backups
E67B 9F08             (        forth.asm):01121 (4)             stx     DICEND          Restore HERE
E67D 9E0A             (        forth.asm):01122 (4)             ldx     BLSTWAD
E67F 9F06             (        forth.asm):01123 (4)             stx     LSTWAD          Restore LAST
E681 7EE0A8           (        forth.asm):01124 (3)     @erdon2 jmp     INTERP
                      (        forth.asm):01125         
                      (        forth.asm):01126         * Push X to the data stack (boundary is checked).
E684 1183018A         (        forth.asm):01127 (4)     NPUSH   cmpu    #NSTTOP
E688 2303             (        forth.asm):01128 (3)             bls     @npush1         Anything <= than #NSTTOP indicates overflow
E68A 3610             (        forth.asm):01129 (4+2)           pshu    x               Aka UCNPUSH
E68C 39               (        forth.asm):01130 (4)             rts
E68D 5F               (        forth.asm):01131 (1)     @npush1 clrb                    Data stack overflow
E68E BDE60B           (        forth.asm):01132 (7)             jsr     ERRHDLR         No return
     E691             (        forth.asm):01133         DPSHRA  equ     *
E691 12               (        forth.asm):01134 (1)             nop
                      (        forth.asm):01135         
                      (        forth.asm):01136         * Pull X from the data stack (boundary is checked).
                      (        forth.asm):01137         * D, W and Y are preserved.
E692 1183024A         (        forth.asm):01138 (4)     NPOP    cmpu    #NSTBOT
E696 2403             (        forth.asm):01139 (3)             bhs     @npop1          Anything >= than #NSTBOT indicates underflow
E698 3710             (        forth.asm):01140 (4+2)           pulu    x
E69A 39               (        forth.asm):01141 (4)             rts
E69B C601             (        forth.asm):01142 (2)     @npop1  ldb     #1              Data stack underflow
E69D BDE60B           (        forth.asm):01143 (7)             jsr     ERRHDLR         No return
     E6A0             (        forth.asm):01144         DPOPRA  equ     *
E6A0 12               (        forth.asm):01145 (1)             nop
                      (        forth.asm):01146         
                      (        forth.asm):01147         * Push X to the return stack (boundary is checked).
E6A1 9629             (        forth.asm):01148 (3)     RPUSH   lda     RDEPTH          RDEPTH is expressed in cells
E6A3 8140             (        forth.asm):01149 (2)             cmpa    #RSTKSZ/2       But RSTKZ is expressed in bytes
E6A5 2712             (        forth.asm):01150 (3)             beq     @rpush1
E6A7 4C               (        forth.asm):01151 (1)             inca
E6A8 9729             (        forth.asm):01152 (3)             sta     RDEPTH
E6AA 0F2B             (        forth.asm):01153 (5)             clr     RTSREMV         Do not get rid of the final RTS
E6AC 1F27             (        forth.asm):01154 (4)             tfr     y,v
E6AE 109E00           (        forth.asm):01155 (5)             ldy     RSP
E6B1 AFA3             (        forth.asm):01156 (5+2)           stx     ,--y
E6B3 109F00           (        forth.asm):01157 (5)             sty     RSP
E6B6 1F72             (        forth.asm):01158 (4)             tfr     v,y
E6B8 39               (        forth.asm):01159 (4)             rts
E6B9 C607             (        forth.asm):01160 (2)     @rpush1 ldb     #7              Return stack overflow
E6BB BDE60B           (        forth.asm):01161 (7)             jsr     ERRHDLR         No return
     E6BE             (        forth.asm):01162         RPSHRA  equ     *
E6BE 12               (        forth.asm):01163 (1)             nop                     Meant to insulate RPUSH errors from RPOP EP
                      (        forth.asm):01164         
                      (        forth.asm):01165         * Pull X from the return stack (boundary is checked).
E6BF 9629             (        forth.asm):01166 (3)     RPOP    lda     RDEPTH          RDEPTH is expressed in cells
E6C1 2710             (        forth.asm):01167 (3)             beq     @rpop1
E6C3 4A               (        forth.asm):01168 (1)             deca
E6C4 9729             (        forth.asm):01169 (3)             sta     RDEPTH
E6C6 1F27             (        forth.asm):01170 (4)             tfr     y,v
E6C8 109E00           (        forth.asm):01171 (5)             ldy     RSP
E6CB AEA1             (        forth.asm):01172 (5+2)           ldx     ,y++
E6CD 109F00           (        forth.asm):01173 (5)             sty     RSP
E6D0 1F72             (        forth.asm):01174 (4)             tfr     v,y
E6D2 39               (        forth.asm):01175 (4)             rts
E6D3 C608             (        forth.asm):01176 (2)     @rpop1  ldb     #8              Return stack underflow
E6D5 BDE60B           (        forth.asm):01177 (7)             jsr     ERRHDLR         No return
     E6D8             (        forth.asm):01178         RPOPRA  equ     *
                      (        forth.asm):01179         
                      (        forth.asm):01180         * Derive the current input stream pointer from BLK and >IN.
                      (        forth.asm):01181         * The resulting address is returned in X. D is altered.
                      (        forth.asm):01182         * Both Y and W are preserved.
E6D8 9E22             (        forth.asm):01183 (4)     BKIN2PT ldx     UBLK
E6DA 2716             (        forth.asm):01184 (3)             beq     @consol         We are switching back to the console
E6DC 1038             (        forth.asm):01185 (6)             pshsw
E6DE 3420             (        forth.asm):01186 (4+2)           pshs    y
E6E0 8DA2             (        forth.asm):01187 (6)             bsr     NPUSH           Make sure BLK @ is loaded
E6E2 BDE8E4           (        forth.asm):01188                 RFXT    jsr,BLOCK+8     XT for BLOCK
E6E5 3520             (        forth.asm):01189 (4+2)           puls    y
E6E7 1039             (        forth.asm):01190 (6)             pulsw
E6E9 3710             (        forth.asm):01191                 UCNPOP                  Retrieve buffer addr (to X)
E6EB 9F26             (        forth.asm):01192 (4)     @done   stx     BSBFADR         Update base buffer address
E6ED DC20             (        forth.asm):01193 (4)             ldd     UTOIN
E6EF 308B             (        forth.asm):01194 (4+2)           leax    d,x             Add the current offset. Return the result via X
E6F1 39               (        forth.asm):01195 (4)             rts
E6F2 8E02CA           (        forth.asm):01196 (3)     @consol ldx     #CMDBUF
E6F5 20F4             (        forth.asm):01197 (3)             bra     @done
                      (        forth.asm):01198         
                      (        forth.asm):01199                 include storage.asm
                      (      storage.asm):00001         * Wait until the BSY bit is clear in the CF status register.
                      (      storage.asm):00002         * Upon return the BSY bit is guaranteed to be zero. Z will
                      (      storage.asm):00003         * be set in CC. This subroutine should not be called before
                      (      storage.asm):00004         * the CompactFlash presence has been assessed.
E6F7 B6C007           (      storage.asm):00005 (4)     CFWAIT  lda     CFSTATR
E6FA 8580             (      storage.asm):00006 (2)             bita    #CFBSYB
E6FC 26F9             (      storage.asm):00007 (3)             bne     CFWAIT
E6FE 39               (      storage.asm):00008 (4)             rts
                      (      storage.asm):00009         
                      (      storage.asm):00010         * Wait until the BSY bit is clear and the RDY bit is set.
E6FF 8DF6             (      storage.asm):00011 (6)     CFRDY   bsr     CFWAIT
E701 2703             (      storage.asm):00012 (3)             beq     @cfrdy0         Card not busy, proceed
E703 1A04             (      storage.asm):00013 (2)             orcc    #ZFLAG
E705 39               (      storage.asm):00014 (4)             rts
E706 8E2000           (      storage.asm):00015 (3)     @cfrdy0 ldx     #$2000          Maximum poll count
E709 8640             (      storage.asm):00016 (2)             lda     #CFRDYB
E70B B5C007           (      storage.asm):00017 (4)     @cfrdy1 bita    CFSTATR
E70E 2604             (      storage.asm):00018 (3)             bne     @cfrdy2         BSY bit is set, continue
E710 301F             (      storage.asm):00019 (4+1)           leax    -1,x            Card not ready, decrement poll count
E712 26F7             (      storage.asm):00020 (3)             bne     @cfrdy1         and try again
E714 39               (      storage.asm):00021 (4)     @cfrdy2 rts                     Return with Z set: card not present
                      (      storage.asm):00022         *                               Return with Z clear: card is ready
                      (      storage.asm):00023         
                      (      storage.asm):00024         * Check for possible error condition.
                      (      storage.asm):00025         * Upon return either Z is set (A is zero) and no error occurred or
                      (      storage.asm):00026         * Z is clear and the CF error register contents is returned in A.
E715 8DE0             (      storage.asm):00027 (6)     CFERRCK bsr     CFWAIT
E717 B6C007           (      storage.asm):00028 (4)             lda     CFSTATR
E71A 8401             (      storage.asm):00029 (2)             anda    #CFERRB
E71C 2703             (      storage.asm):00030 (3)             beq     @cfeck1
E71E B6C001           (      storage.asm):00031 (4)             lda     CFERROR         The error register contains error details
E721 39               (      storage.asm):00032 (4)     @cfeck1 rts
                      (      storage.asm):00033         
                      (      storage.asm):00034         * Issue CF command. The command code is passed through the B register.
                      (      storage.asm):00035         * Upon return:
                      (      storage.asm):00036         * - Z is set and everything is peachy.
                      (      storage.asm):00037         * - or Z is clear and the CF error register contents will be
                      (      storage.asm):00038         *   returned in A (and mirrored in the global CFERRCD variable).
                      (      storage.asm):00039         * B is preserved.
E722 8DDB             (      storage.asm):00040 (6)     CFCMDIS bsr     CFRDY
E724 270A             (      storage.asm):00041 (3)             beq     @cfciab         Card not ready, abort
E726 D736             (      storage.asm):00042 (3)             stb     CFCMMIR         Update CF command mirror
E728 F7C007           (      storage.asm):00043 (4)             stb     CFCOMDR         Send command to the CF card
E72B 8DE8             (      storage.asm):00044 (6)             bsr     CFERRCK
E72D 9737             (      storage.asm):00045 (3)     @cfcise sta     CFERRCD         CF command issue set error
                      (      storage.asm):00046                 IFNE    DEBUG
                      (      storage.asm):00047                 pshs    a,cc
                      (      storage.asm):00048                 beq     @cfciok
                      (      storage.asm):00049                 lda     #'!
                      (      storage.asm):00050                 jsr     PUTCH
E72F                  (      storage.asm):00051         @cfcidi lda     CFCMMIR
                      (      storage.asm):00052                 ldx     #TBUFF
                      (      storage.asm):00053                 jsr     HDMP2
                      (      storage.asm):00054                 lda     #'/
                      (      storage.asm):00055                 sta     ,x+
                      (      storage.asm):00056                 lda     CFERRCD
                      (      storage.asm):00057                 jsr     HDMP2
                      (      storage.asm):00058                 ldx     #TBUFF
                      (      storage.asm):00059                 jsr     PUTS
                      (      storage.asm):00060                 jsr     PUTCR
                      (      storage.asm):00061                 bra     @cfcict         CF command issue continued
E72F                  (      storage.asm):00062         @cfciok lda     #'#
                      (      storage.asm):00063                 jsr     PUTCH
                      (      storage.asm):00064                 bra     @cfcidi         CF command issue data indication
E72F                  (      storage.asm):00065         @cfcict puls    cc,a
                      (      storage.asm):00066                 ENDC
E72F 39               (      storage.asm):00067 (4)             rts
E730 86FF             (      storage.asm):00068 (2)     @cfciab lda     #$FF            Dummy error code
E732 20F9             (      storage.asm):00069 (3)             bra     @cfcise
                      (      storage.asm):00070         
                      (      storage.asm):00071         * Drive 0 select.
E734 8DC9             (      storage.asm):00072 (6)     CFDRSEL bsr     CFRDY
E736 86E0             (      storage.asm):00073 (2)             lda     #$E0            Drive 0, LBA mode
E738 B7C006           (      storage.asm):00074 (4)             sta     CFDRHDR
E73B 20C2             (      storage.asm):00075 (3)             bra     CFRDY
                      (      storage.asm):00076         
                      (      storage.asm):00077         * Analyze the response to the CF "Identify Device" request.
E73D 9E08             (      storage.asm):00078 (4)     CFANTHS ldx     DICEND
E73F 308836           (      storage.asm):00079 (4+1)           leax    $36,x           Point to the "Model number" field
E742 3410             (      storage.asm):00080 (4+2)           pshs    x
E744 118614           (      storage.asm):00081 (3)             lde     #$14            Number of 16 bit words to go through
E747 EC84             (      storage.asm):00082 (5+0)   @bytswp ldd     ,x
E749 1E98             (      storage.asm):00083 (5)             exg     b,a             Byte swapping
E74B ED81             (      storage.asm):00084 (5+2)           std     ,x++
E74D 114A             (      storage.asm):00085 (2)             dece
E74F 26F6             (      storage.asm):00086 (3)             bne     @bytswp
E751 6F84             (      storage.asm):00087 (6+0)           clr     ,x
E753 3510             (      storage.asm):00088 (4+2)           puls    x
E755 BDE1DB           (      storage.asm):00089 (7)             jsr     PUTS            Decent CF cards indicate the capacity that way
E758 7EE1E8           (      storage.asm):00090 (3)             jmp     PUTCR           Up to $10000 blocks is 64 MB!
                      (      storage.asm):00091         
                      (      storage.asm):00092         * Initialize the CompactFlash subsystem.
                      (      storage.asm):00093         * This is run once at boot time. There is no hot plug support here.
E75B 0F35             (      storage.asm):00094 (5)     CFINIT  clr     CFCARDP         Clear card present,
                      (      storage.asm):00095                 IFEQ    DEBUG
E75D 8DA0             (      storage.asm):00096 (6)             bsr     CFRDY
                      (      storage.asm):00097                 ELSE
                      (      storage.asm):00098                 jsr     CFRDY
                      (      storage.asm):00099                 ENDC
E75F 2730             (      storage.asm):00100 (3)             beq     @cfinab         Card not ready, abort
E761 8DD1             (      storage.asm):00101 (6)             bsr     CFDRSEL         Drive 0 select
E763 8601             (      storage.asm):00102 (2)             lda     #1              Enable 8-bit data transfers
E765 B7C001           (      storage.asm):00103 (4)             sta     CFFEATR
E768 C6EF             (      storage.asm):00104 (2)             ldb     #CFSETFT        Issue a CF "Set Feature" command
                      (      storage.asm):00105                 IFEQ    DEBUG
E76A 8DB6             (      storage.asm):00106 (6)             bsr     CFCMDIS         Not allowed to fail
                      (      storage.asm):00107                 ELSE
                      (      storage.asm):00108                 jsr     CFCMDIS         Not allowed to fail
                      (      storage.asm):00109                 ENDC
E76C 2623             (      storage.asm):00110 (3)             bne     @cfinab         Abort with card present flag clear
E76E 8601             (      storage.asm):00111 (2)             lda     #1              Request default PIO mode wo/ IORDY
E770 B7C002           (      storage.asm):00112 (4)             sta     CFSCNTR
E773 8603             (      storage.asm):00113 (2)             lda     #3              ATA-2 "Set Transfer mode"
E775 B7C001           (      storage.asm):00114 (4)             sta     CFFEATR
                      (      storage.asm):00115                 IFEQ    DEBUG
E778 8DA8             (      storage.asm):00116 (6)             bsr     CFCMDIS         OK to fail
                      (      storage.asm):00117                 ELSE
                      (      storage.asm):00118                 jsr     CFCMDIS         OK to fail
                      (      storage.asm):00119                 ENDC
E77A 8682             (      storage.asm):00120 (2)             lda     #$82            Disable write caching
E77C B7C001           (      storage.asm):00121 (4)             sta     CFFEATR
                      (      storage.asm):00122                 IFEQ    DEBUG
E77F 8DA1             (      storage.asm):00123 (6)             bsr     CFCMDIS         B still has #CFSETF. Also OK to fail
                      (      storage.asm):00124                 ELSE
                      (      storage.asm):00125                 jsr     CFCMDIS         B still has #CFSETF. Also OK to fail
                      (      storage.asm):00126                 ENDC
E781 C6EC             (      storage.asm):00127 (2)             ldb     #CFIDDEV        Issue a CF "Identify Device" command
                      (      storage.asm):00128                 IFEQ    DEBUG
E783 8D9D             (      storage.asm):00129 (6)             bsr     CFCMDIS         Not allowed to fail
                      (      storage.asm):00130                 ELSE
                      (      storage.asm):00131                 jsr     CFCMDIS         Not allowed to fail
                      (      storage.asm):00132                 ENDC
E785 260A             (      storage.asm):00133 (3)             bne     @cfinab         Abort with card present flag clear
E787 9E08             (      storage.asm):00134 (4)             ldx     DICEND          Target address is HERE
E789 8D07             (      storage.asm):00135 (6)             bsr     CF1SRD          Read one sector
E78B 8DB0             (      storage.asm):00136 (6)             bsr     CFANTHS         Analyze this!
E78D 8601             (      storage.asm):00137 (2)             lda     #1
E78F 9735             (      storage.asm):00138 (3)             sta     CFCARDP         Set the card present flag
E791 39               (      storage.asm):00139 (4)     @cfinab rts
                      (      storage.asm):00140         
                      (      storage.asm):00141         * Read one sector. The LBA parameters are assumed to have been set previously.
                      (      storage.asm):00142         * On input X points to the receiving (at least 512 bytes long) buffer.
E792 B6C007           (      storage.asm):00143 (4)     CF1SRD  lda     CFSTATR
E795 8508             (      storage.asm):00144 (2)             bita    #CFDRQB         Check for DRQ bit in the CF status register
E797 270C             (      storage.asm):00145 (3)             beq     IOERR
E799 10860200         (      storage.asm):00146 (4)             ldw     #CFSCSZ         Sector size is 512 bytes
E79D 108EC000         (      storage.asm):00147 (4)             ldy     #CFDATAR        The data source address
E7A1 113B21           (      storage.asm):00148 (6+?)           tfm     y,x+            Note: tfm is interruptible!
E7A4 39               (      storage.asm):00149 (4)             rts
E7A5 C611             (      storage.asm):00150 (2)     IOERR   ldb     #17
E7A7 BDE60B           (      storage.asm):00151 (7)             jsr     ERRHDLR         No return
E7AA 12               (      storage.asm):00152 (1)     CFR1SRA nop                     For symbolic stack dump debugging purposes
                      (      storage.asm):00153         
                      (      storage.asm):00154         * Write one sector. The LBA parameters are assumed to have been set previously.
                      (      storage.asm):00155         * On input X points to the sending (at least 512 bytes long) buffer.
E7AB B6C007           (      storage.asm):00156 (4)     CF1SWR  lda     CFSTATR
E7AE 8488             (      storage.asm):00157 (2)             anda    #CFBSYB|CFDRQB
E7B0 8108             (      storage.asm):00158 (2)             cmpa    #CFDRQB         Check for BSY clear and DRQ set
E7B2 26F7             (      storage.asm):00159 (3)             bne     CF1SWR
E7B4 10860200         (      storage.asm):00160 (4)             ldw     #CFSCSZ         Sector size is 512 bytes
E7B8 108EC000         (      storage.asm):00161 (4)             ldy     #CFDATAR        The data destination address
E7BC 113A12           (      storage.asm):00162 (6+?)           tfm     x+,y            Note: tfm is interruptible!
E7BF 39               (      storage.asm):00163 (4)             rts
                      (      storage.asm):00164         
                      (      storage.asm):00165         * 1KB Forth block support primitives. Not dictionary code. More like BIOS ops.
                      (      storage.asm):00166         
                      (      storage.asm):00167         * One block IO preamble: select drive and LBA parameters. On input:
                      (      storage.asm):00168         * ,s has the return address
                      (      storage.asm):00169         * 2,s had the return address for the caller
                      (      storage.asm):00170         * 4,s has the target block number
E7C0 BDE6F7           (      storage.asm):00171 (7)     CF1BPRE jsr     CFWAIT
E7C3 BDE734           (      storage.asm):00172 (7)             jsr     CFDRSEL         Set drive and head parameters
E7C6 EC64             (      storage.asm):00173 (5+1)           ldd     4,s
E7C8 1048             (      storage.asm):00174 (2)             lsld                    Convert block number to sector number
E7CA F7C003           (      storage.asm):00175 (4)             stb     CFSNUMR         LBA 7-0
E7CD B7C004           (      storage.asm):00176 (4)             sta     CFCLOWR         LBA 15-8
E7D0 1FA8             (      storage.asm):00177 (4)             tfr     cc,a
E7D2 8401             (      storage.asm):00178 (2)             anda    #CFLAG
E7D4 B7C005           (      storage.asm):00179 (4)             sta     CFCHIGR         LBA 23-16 (carry to cylinder high)
E7D7 8602             (      storage.asm):00180 (2)             lda     #2              2 IDE sectors per Forth block
E7D9 B7C002           (      storage.asm):00181 (4)             sta     CFSCNTR
E7DC 39               (      storage.asm):00182 (4)             rts
                      (      storage.asm):00183         
                      (      storage.asm):00184         * Read one block from CF device. On input:
                      (      storage.asm):00185         * ,s has the return address
                      (      storage.asm):00186         * 2,s has the target block number
                      (      storage.asm):00187         * 4,s has the buffer base address
                      (      storage.asm):00188         * Upon return, Y will be preserved.
E7DD 0D35             (      storage.asm):00189 (4)     CF1BKRD tst     CFCARDP
E7DF 2602             (      storage.asm):00190 (3)             bne     @ctnued
E7E1 20C2             (      storage.asm):00191 (3)             bra     IOERR           Card not present--CF subsystem not initialized
E7E3 1F27             (      storage.asm):00192 (4)     @ctnued tfr     y,v
E7E5 8DD9             (      storage.asm):00193 (6)             bsr     CF1BPRE
E7E7 C620             (      storage.asm):00194 (2)             ldb     #CFRSCTS        Issue a "Read sectors" CF command
E7E9 BDE722           (      storage.asm):00195 (7)             jsr     CFCMDIS
E7EC AE64             (      storage.asm):00196 (5+1)           ldx     4,s             Target buffer address to X
E7EE 8DA2             (      storage.asm):00197 (6)             bsr     CF1SRD          Read the even sector from CF device
E7F0 BDE6F7           (      storage.asm):00198 (7)             jsr     CFWAIT          Wait for next sector to become available
E7F3 8D9D             (      storage.asm):00199 (6)             bsr     CF1SRD          and read the odd sector
E7F5 1F72             (      storage.asm):00200 (4)             tfr     v,y
E7F7 39               (      storage.asm):00201 (4)             rts
                      (      storage.asm):00202         
                      (      storage.asm):00203         * Write one block to CF device. Upon entry:
                      (      storage.asm):00204         * ,s has the return address
                      (      storage.asm):00205         * 2,s has the target block number
                      (      storage.asm):00206         * 4,s has the buffer base address
                      (      storage.asm):00207         * Upon return, Y will be preserved.
E7F8 0D35             (      storage.asm):00208 (4)     CF1BKWR tst     CFCARDP
E7FA 2602             (      storage.asm):00209 (3)             bne     @ctnued
E7FC 20A7             (      storage.asm):00210 (3)             bra     IOERR           Card not present--CF subsystem not initialized
E7FE 1F27             (      storage.asm):00211 (4)     @ctnued tfr     y,v
E800 8DBE             (      storage.asm):00212 (6)             bsr     CF1BPRE
E802 C630             (      storage.asm):00213 (2)             ldb     #CFWSCTS        Issue a "Write sectors" CF command
E804 BDE722           (      storage.asm):00214 (7)             jsr     CFCMDIS
E807 AE64             (      storage.asm):00215 (5+1)           ldx     4,s             Source buffer address to X
E809 8DA0             (      storage.asm):00216 (6)             bsr     CF1SWR          Write the even sector to CF device
E80B BDE6F7           (      storage.asm):00217 (7)             jsr     CFWAIT          Wait for next sector to become available
E80E 8D9B             (      storage.asm):00218 (6)             bsr     CF1SWR          and write the odd sector
E810 1F72             (      storage.asm):00219 (4)             tfr     v,y
E812 39               (      storage.asm):00220 (4)             rts
                      (      storage.asm):00221         
                      (        forth.asm):01200         
                      (        forth.asm):01201         ******************************************************************************
                      (        forth.asm):01202         * Dictionary begins. In the code below ANSI refers to ANSI-X3.215-1994
                      (        forth.asm):01203         * Draft 6 proposal (i.e. the free spec).
                      (        forth.asm):01204         
E813 0D               (        forth.asm):01205         EBUFS   fcb     13              79-STANDARD (REQ145)
E814 454D5054592D4255 (        forth.asm):01206                 fcc     'EMPTY-BUFFERS' ( -- )
     4646455253
E821 0000             (        forth.asm):01207                 fdb     0               Last dictionary entry
E823 C7               (        forth.asm):01208                 RFCS
E824 7EE271           (        forth.asm):01209 (3)             jmp     EMPTYB
                      (        forth.asm):01210         
E827 0C               (        forth.asm):01211         SAVBUF  fcb     12              79-STANDARD (REQ221)
E828 534156452D425546 (        forth.asm):01212                 fcc     'SAVE-BUFFERS'  ( -- )
     46455253
E834 E813             (        forth.asm):01213                 fdb     EBUFS
E836 C7               (        forth.asm):01214                 RFCS
E837 8E03F0           (        forth.asm):01215 (3)             ldx     #BUF0
E83A 8D03             (        forth.asm):01216 (6)             bsr     WBIFDRT
E83C 8E0800           (        forth.asm):01217 (3)             ldx     #BUF1
                      (        forth.asm):01218         * Write buffer back to mass storage if marked as dirty.
                      (        forth.asm):01219         * The dirty bit is cleared but the buffer contents itself is not.
                      (        forth.asm):01220         * The buffer will continue to be marked as "in use."
                      (        forth.asm):01221         * On input X has has the base buffer address. Both D and X
                      (        forth.asm):01222         * are preserved. Y is not.
E83F 3406             (        forth.asm):01223 (4+2)   WBIFDRT pshs    d
E841 3410             (        forth.asm):01224 (4+2)           pshs    x               Base buffer address (arg1 to CF1BKWR)
E843 8605             (        forth.asm):01225 (2)             lda     #BINUSE|BDIRTY
E845 A4890401         (        forth.asm):01226 (4+3)           anda    BOFLAGS,x
E849 8105             (        forth.asm):01227 (2)             cmpa    #BINUSE|BDIRTY
E84B 2616             (        forth.asm):01228 (3)             bne     @alldon         Block not in use or in use but not dirty
E84D AE890402         (        forth.asm):01229 (5+3)           ldx     BOBLKNO,x
E851 3410             (        forth.asm):01230 (4+2)           pshs    x               Block number (arg0 to CF1BKWR)
E853 8DA3             (        forth.asm):01231 (6)             bsr     CF1BKWR         Write data buffer to CF
E855 3262             (        forth.asm):01232 (4+1)           leas    2,s             Drop one cell from the system stack (blknum)
E857 AEE4             (        forth.asm):01233 (5+0)           ldx     ,s              Retrieve base buffer address
E859 A6890401         (        forth.asm):01234 (4+3)           lda     BOFLAGS,x
E85D 84F9             (        forth.asm):01235 (2)             anda    #^(BDIRTY|BMAPPD) Clear the dirty bit and force a re-read
E85F A7890401         (        forth.asm):01236 (4+3)           sta     BOFLAGS,x       and update the 'flags' field
E863 3510             (        forth.asm):01237 (4+2)   @alldon puls    x               Restore X
E865 3506             (        forth.asm):01238 (4+2)           puls    d               and D
E867 39               (        forth.asm):01239 (4)             rts
                      (        forth.asm):01240         
E868 05               (        forth.asm):01241         FLUSH   fcb     5               79-STANDARD (REF)
E869 464C555348       (        forth.asm):01242                 fcc     'FLUSH'         ( -- ) An alias for SAVE-BUFFERS
E86E E827             (        forth.asm):01243                 fdb     SAVBUF
E870 C7               (        forth.asm):01244                 RFCS
E871 20C4             (        forth.asm):01245                 RFXT    bra,SAVBUF+15   XT for SAVE-BUFFERS
                      (        forth.asm):01246         
E873 06               (        forth.asm):01247         UPDATE  fcb     6               79-STANDARD (REQ229)
E874 555044415445     (        forth.asm):01248                 fcc     'UPDATE'        ( -- )
E87A E868             (        forth.asm):01249                 fdb     FLUSH
E87C C7               (        forth.asm):01250                 RFCS
E87D 9E1A             (        forth.asm):01251 (4)             ldx     MRUBUFA         Most recently used buffer base address
E87F 30890401         (        forth.asm):01252 (4+3)           leax    BOFLAGS,x       Buffer 'flags' field's address to X
E883 A684             (        forth.asm):01253 (4+0)           lda     ,x              Buffer 'flags' field to A
E885 8501             (        forth.asm):01254 (2)             bita    #BINUSE         Is that buffer in use?
E887 2704             (        forth.asm):01255 (3)             beq     @upddon         No, we're done here
E889 8A04             (        forth.asm):01256 (2)             ora     #BDIRTY
E88B A784             (        forth.asm):01257 (4+0)           sta     ,x              Set the dirty bit
E88D 39               (        forth.asm):01258 (4)     @upddon rts
                      (        forth.asm):01259         
E88E 06               (        forth.asm):01260         BUFFER  fcb     6               79-STANDARD (REQ130)
E88F 425546464552     (        forth.asm):01261                 fcc     'BUFFER'        ( ublkno -- addr )
E895 E873             (        forth.asm):01262                 fdb     UPDATE
E897 C7               (        forth.asm):01263                 RFCS
E898 BDE692           (        forth.asm):01264 (7)             jsr     NPOP
E89B 1F12             (        forth.asm):01265 (4)             tfr     x,y             ublkno to Y
                      (        forth.asm):01266         * Block lookup.
E89D 8E03F0           (        forth.asm):01267 (3)             ldx     #BUF0           Base address of the first resident buffer
E8A0 C602             (        forth.asm):01268 (2)             ldb     #2              Number of resident buffers
E8A2 A6890401         (        forth.asm):01269 (4+3)   @blkup  lda     BOFLAGS,x       Buffer flags to A
E8A6 8501             (        forth.asm):01270 (2)             bita    #BINUSE         Buffer in use?
E8A8 270C             (        forth.asm):01271 (3)             beq     @nxtbuf         No
E8AA 10AC890402       (        forth.asm):01272 (6+3)           cmpy    BOBLKNO,x       Buffer is in use. Block number match?
E8AF 2605             (        forth.asm):01273 (3)             bne     @nxtbuf         No
E8B1 9F1A             (        forth.asm):01274 (4)     @retba  stx     MRUBUFA         Block number match. Mark as the MRU buffer
E8B3 3610             (        forth.asm):01275                 UCNPUSH                 and return its base address via the data stack
E8B5 39               (        forth.asm):01276 (4)             rts
E8B6 30890410         (        forth.asm):01277 (4+3)   @nxtbuf leax    BFDISP,x        Point to the next buffer
E8BA 5A               (        forth.asm):01278 (1)             decb
E8BB 26E5             (        forth.asm):01279 (3)             bne     @blkup
                      (        forth.asm):01280         * The block number in Y is not currently in use. Assign a buffer to it.
E8BD 8E03F0           (        forth.asm):01281 (3)             ldx     #BUF0
E8C0 9C1A             (        forth.asm):01282 (4)             cmpx    MRUBUFA         Most recently used buffer address
E8C2 2603             (        forth.asm):01283 (3)             bne     @bselct
E8C4 8E0800           (        forth.asm):01284 (3)             ldx     #BUF1
                      (        forth.asm):01285         * At this point X has the base address of the block we are interested in.
E8C7 3420             (        forth.asm):01286 (4+2)   @bselct pshs    y               Backup the target block number
E8C9 BDE83F           (        forth.asm):01287 (7)             jsr     WBIFDRT         Write back if dirty. X and D are preserved
E8CC 8601             (        forth.asm):01288 (2)             lda     #BINUSE
E8CE A7890401         (        forth.asm):01289 (4+3)           sta     BOFLAGS,x       Update the buffers 'flags' field
E8D2 3520             (        forth.asm):01290 (4+2)           puls    y               Restore the target block number
E8D4 10AF890402       (        forth.asm):01291 (6+3)           sty     BOBLKNO,x       and update the 'blknum' field as well
E8D9 20D6             (        forth.asm):01292 (3)             bra     @retba
                      (        forth.asm):01293         
E8DB 05               (        forth.asm):01294         BLOCK   fcb     5               79-STANDARD (REQ191)
E8DC 424C4F434B       (        forth.asm):01295                 fcc     'BLOCK'         ( ublkno -- addr )
E8E1 E88E             (        forth.asm):01296                 fdb     BUFFER
E8E3 C7               (        forth.asm):01297                 RFCS
E8E4 8DB2             (        forth.asm):01298                 RFXT    bsr,BUFFER+9    XT for BUFFER
                      (        forth.asm):01299         * Upon return Y has has the block number.
E8E6 3710             (        forth.asm):01300                 UCNPOP                  Buffer base address to X
E8E8 3410             (        forth.asm):01301 (4+2)           pshs    x               Push base buffer address as Arg1 to CF1BKRD
E8EA A6890401         (        forth.asm):01302 (4+3)           lda     BOFLAGS,x       Retrieve buffer 'flags' field
                      (        forth.asm):01303                 IFNE    DEBUG
                      (        forth.asm):01304                 bita    #BINUSE
                      (        forth.asm):01305                 bne     @blkctd
                      (        forth.asm):01306                 lda     #10             Assertion failed
                      (        forth.asm):01307                 jsr     ERRHDLR         No return
                      (        forth.asm):01308                 ENDC
E8EE 8402             (        forth.asm):01309 (2)     @blkctd anda    #BMAPPD         Has the block been read yet?
E8F0 2613             (        forth.asm):01310 (3)             bne     @bkmapd         Yes
E8F2 3420             (        forth.asm):01311 (4+2)           pshs    y               No. Push block number as arg0 to CF1BKRD
                      (        forth.asm):01312         * Map in the block from the CF device. System stack structure is as follows:
                      (        forth.asm):01313         * ,s has the target block number.
                      (        forth.asm):01314         * 2,s has the buffer base address.
E8F4 BDE7DD           (        forth.asm):01315 (7)             jsr     CF1BKRD
E8F7 3262             (        forth.asm):01316 (4+1)           leas    2,s             Drop one cell from the system stack
                      (        forth.asm):01317         * Update the buffer flags field.
E8F9 AEE4             (        forth.asm):01318 (5+0)           ldx     ,s              Base buffer address
E8FB 30890401         (        forth.asm):01319 (4+3)           leax    BOFLAGS,x       Buffer 'flags' field address to X
E8FF A684             (        forth.asm):01320 (4+0)           lda     ,x              Read buffer 'flags' field
E901 8A02             (        forth.asm):01321 (2)             ora     #BMAPPD
E903 A784             (        forth.asm):01322 (4+0)           sta     ,x              and mark it as read
E905 3510             (        forth.asm):01323 (4+2)   @bkmapd puls    x               Buffer base address to X
E907 3610             (        forth.asm):01324                 UCNPUSH
E909 39               (        forth.asm):01325 (4)             rts
                      (        forth.asm):01326         
E90A 03               (        forth.asm):01327         BLK     fcb     3
E90B 424C4B           (        forth.asm):01328                 fcc     'BLK'
E90E E8DB             (        forth.asm):01329                 fdb     BLOCK
E910 C7               (        forth.asm):01330                 RFCS
E911 8E0122           (        forth.asm):01331 (3)             ldx     #UBLK
E914 7EE684           (        forth.asm):01332 (3)             jmp     NPUSH
                      (        forth.asm):01333         
E917 03               (        forth.asm):01334         TOIN    fcb     3
E918 3E494E           (        forth.asm):01335                 fcc     '>IN'
E91B E90A             (        forth.asm):01336                 fdb     BLK
E91D C7               (        forth.asm):01337                 RFCS
E91E 8E0120           (        forth.asm):01338 (3)             ldx     #UTOIN
E921 7EE684           (        forth.asm):01339 (3)             jmp     NPUSH
                      (        forth.asm):01340         
E924 03               (        forth.asm):01341         SCR     fcb     3
E925 534352           (        forth.asm):01342                 fcc     'SCR'
E928 E917             (        forth.asm):01343                 fdb     TOIN
E92A C7               (        forth.asm):01344                 RFCS
E92B 8E0124           (        forth.asm):01345 (3)             ldx     #USCR
E92E 7EE684           (        forth.asm):01346 (3)             jmp     NPUSH
                      (        forth.asm):01347         
                      (        forth.asm):01348         * Functionally: : LINE 6 SHIFT SCR @ BLOCK + ;
E931 04               (        forth.asm):01349         LINE    fcb     4               79-STANDARD (REF)
E932 4C494E45         (        forth.asm):01350                 fcc     'LINE'
E936 E924             (        forth.asm):01351                 fdb     SCR
E938 C7               (        forth.asm):01352                 RFCS
E939 8E0006           (        forth.asm):01353 (3)             ldx     #6
E93C BDE684           (        forth.asm):01354 (7)             jsr     NPUSH
E93F BDF7F6           (        forth.asm):01355                 RFXT    jsr,SHIFT+8     XT for SHIFT
E942 9E24             (        forth.asm):01356 (4)             ldx     USCR
E944 BDE684           (        forth.asm):01357 (7)             jsr     NPUSH
E947 8D9B             (        forth.asm):01358                 RFXT    bsr,BLOCK+8     XT for BLOCK
E949 7EF75C           (        forth.asm):01359                 RFXT    jmp,PLUS+4      XT for +
                      (        forth.asm):01360         
                      (        forth.asm):01361         * Functionally:
                      (        forth.asm):01362         * : INDEX 1+ SWAP DO
                      (        forth.asm):01363         *     CR   I SCR !
                      (        forth.asm):01364         *     0 LINE 64 TYPE
                      (        forth.asm):01365         *   LOOP ;
E94C 05               (        forth.asm):01366         INDEX   fcb     5               79-STANDARD (REF)
E94D 494E444558       (        forth.asm):01367                 fcc     'INDEX'         ( n1 n2 -- )
E952 E931             (        forth.asm):01368                 fdb     LINE
E954 C7               (        forth.asm):01369                 RFCS
E955 BDE692           (        forth.asm):01370 (7)             jsr     NPOP            N2 to X
E958 3001             (        forth.asm):01371 (4+1)           leax    1,x             1+
E95A 1F12             (        forth.asm):01372 (4)             tfr     x,y             Y has the limit (not reached)
E95C BDE692           (        forth.asm):01373 (7)             jsr     NPOP            X has the index (N1)
E95F BDE1E8           (        forth.asm):01374 (7)     @indlop jsr     PUTCR           CR
E962 9F24             (        forth.asm):01375 (4)             stx     USCR            I SCR !
E964 3430             (        forth.asm):01376 (4+4)           pshs    y,x
E966 1FC1             (        forth.asm):01377 (4)             tfr     0,x
E968 BDE684           (        forth.asm):01378 (7)             jsr     NPUSH
E96B 8DCC             (        forth.asm):01379                 RFXT    bsr,LINE+7      XT for LINE
E96D 8E0040           (        forth.asm):01380 (3)             ldx     #64
E970 BDE684           (        forth.asm):01381 (7)             jsr     NPUSH
E973 BDF5BE           (        forth.asm):01382                 RFXT    jsr,TYPE+7      XT for TYPE
E976 3530             (        forth.asm):01383 (4+4)           puls    x,y             Restore loop parameters
E978 3001             (        forth.asm):01384 (4+1)           leax    1,x
E97A 103712           (        forth.asm):01385 (4)             cmpr    x,y
E97D 26E0             (        forth.asm):01386 (3)             bne     @indlop
E97F 39               (        forth.asm):01387 (4)             rts
                      (        forth.asm):01388         
E980 04               (        forth.asm):01389         LIST    fcb     4               79-STANDARD (REQ109)
E981 4C495354         (        forth.asm):01390                 fcc     'LIST'          ( ublkno -- )
E985 E94C             (        forth.asm):01391                 fdb     INDEX
E987 C7               (        forth.asm):01392                 RFCS
E988 0D35             (        forth.asm):01393 (4)             tst     CFCARDP
E98A 2605             (        forth.asm):01394 (3)             bne     @lstpro
E98C C611             (        forth.asm):01395 (2)             ldb     #17             IO error
E98E BDE60B           (        forth.asm):01396 (7)             jsr     ERRHDLR         No return
E991 BDFBB5           (        forth.asm):01397         @lstpro RFXT    jsr,DUP+6       XT for DUP
E994 BDE8E4           (        forth.asm):01398                 RFXT    jsr,BLOCK+8     XT for BLOCK
                      (        forth.asm):01399         * TOS now has the base buffer address.
E997 BDE692           (        forth.asm):01400 (7)             jsr     NPOP
E99A 1F12             (        forth.asm):01401 (4)             tfr     x,y             Base buffer address to Y
E99C BDE692           (        forth.asm):01402 (7)             jsr     NPOP            ublkno to X
E99F 9F24             (        forth.asm):01403 (4)             stx     USCR            Update SCR's value
E9A1 C610             (        forth.asm):01404 (2)             ldb     #16             16 lines to go
E9A3 3404             (        forth.asm):01405 (4+1)   @lstlop pshs    b
E9A5 BDE1E8           (        forth.asm):01406 (7)             jsr     PUTCR
E9A8 1F21             (        forth.asm):01407 (4)             tfr     y,x
E9AA BDE684           (        forth.asm):01408 (7)             jsr     NPUSH           Start address for TYPE
E9AD 8E0040           (        forth.asm):01409 (3)             ldx     #64
E9B0 BDE684           (        forth.asm):01410 (7)             jsr     NPUSH           Byte count for TYPE
E9B3 103012           (        forth.asm):01411 (4)             addr    x,y
E9B6 BDF5BE           (        forth.asm):01412                 RFXT    jsr,TYPE+7      XT for TYPE
E9B9 3504             (        forth.asm):01413 (4+1)           puls    b
E9BB 5A               (        forth.asm):01414 (1)             decb
E9BC 26E5             (        forth.asm):01415 (3)             bne     @lstlop
E9BE 39               (        forth.asm):01416 (4)             rts
                      (        forth.asm):01417         
                      (        forth.asm):01418         * Convert a single cell to a double. Non-transactional.
E9BF 03               (        forth.asm):01419         STOD    fcb     3               ANSI Core ( n -- d )
E9C0 533E44           (        forth.asm):01420                 fcc     'S>D'
E9C3 E980             (        forth.asm):01421                 fdb     LIST
E9C5 C7               (        forth.asm):01422                 RFCS
E9C6 BDE692           (        forth.asm):01423 (7)             jsr     NPOP            N to X
E9C9 3610             (        forth.asm):01424                 UCNPUSH
E9CB 1F10             (        forth.asm):01425 (4)             tfr     x,d
E9CD 1FC1             (        forth.asm):01426 (4)             tfr     0,x             Default to N >= 0
E9CF 4D               (        forth.asm):01427 (1)             tsta
E9D0 2B02             (        forth.asm):01428 (3)             bmi     @argneg
E9D2 2002             (        forth.asm):01429 (3)             bra     @stddon
E9D4 301F             (        forth.asm):01430 (4+1)   @argneg leax    -1,x            N is < 0. Sign extension is required
E9D6 7EE684           (        forth.asm):01431 (3)     @stddon jmp     NPUSH
                      (        forth.asm):01432         
E9D9 04               (        forth.asm):01433         NCLR    fcb     4               Non-standard
E9DA 4E434C52         (        forth.asm):01434                 fcc     'NCLR'          Clear the data (normal) stack
E9DE E9BF             (        forth.asm):01435                 fdb     STOD
E9E0 C7               (        forth.asm):01436                 RFCS
E9E1 CE024A           (        forth.asm):01437 (3)             ldu     #NSTBOT
E9E4 39               (        forth.asm):01438 (4)             rts
                      (        forth.asm):01439         
E9E5 04               (        forth.asm):01440         RCLR    fcb     4               Non-standard
E9E6 52434C52         (        forth.asm):01441                 fcc     'RCLR'          Clear the return stack
E9EA E9D9             (        forth.asm):01442                 fdb     NCLR
E9EC C7               (        forth.asm):01443                 RFCS
E9ED 8E02CA           (        forth.asm):01444 (3)             ldx     #RSTBOT
E9F0 9F00             (        forth.asm):01445 (4)             stx     RSP
E9F2 0F29             (        forth.asm):01446 (5)             clr     RDEPTH
E9F4 39               (        forth.asm):01447 (4)             rts
                      (        forth.asm):01448         
E9F5 05               (        forth.asm):01449         DEPTH   fcb     5               79-STANDARD (REQ238)
E9F6 4445505448       (        forth.asm):01450                 fcc     'DEPTH'
E9FB E9E5             (        forth.asm):01451                 fdb     RCLR
E9FD C7               (        forth.asm):01452                 RFCS
E9FE CC024A           (        forth.asm):01453 (3)             ldd     #NSTBOT         Bottom data stack address
EA01 103230           (        forth.asm):01454 (4)             subr    u,d             D has the current value of the data stack ptr
EA04 1044             (        forth.asm):01455 (2)             lsrd                    divided by 2
EA06 1F01             (        forth.asm):01456 (4)             tfr     d,x
EA08 7EE684           (        forth.asm):01457 (3)             jmp     NPUSH
                      (        forth.asm):01458         
EA0B 06               (        forth.asm):01459         CREATE  fcb     6               79-STANDARD (REQ239)
EA0C 435245415445     (        forth.asm):01460                 fcc     'CREATE'
EA12 E9F5             (        forth.asm):01461                 fdb     DEPTH
EA14 C7               (        forth.asm):01462                 RFCS
EA15 BDE3CD           (        forth.asm):01463 (7)     CREAT0  jsr     LOCWRT          Code entry point returned to Y
EA18 868E             (        forth.asm):01464 (2)             lda     #LDXOPC         LDX immediate
EA1A A7A0             (        forth.asm):01465 (4+1)           sta     ,y+
EA1C 1F21             (        forth.asm):01466 (4)             tfr     y,x
EA1E 3008             (        forth.asm):01467 (4+1)           leax    8,x
EA20 AFA1             (        forth.asm):01468 (5+2)           stx     ,y++
EA22 86BD             (        forth.asm):01469 (2)             lda     #JSROPC         JSR extended
EA24 BDE443           (        forth.asm):01470 (7)             jsr     VARCON1         Compile JSR NPUSH
EA27 8639             (        forth.asm):01471 (2)             lda     #RTSOPC         RTS inherent
EA29 A7A0             (        forth.asm):01472 (4+1)           sta     ,y+
EA2B 3122             (        forth.asm):01473 (4+1)           leay    2,y             Reserve room for a possible DOES> clause
EA2D 109F08           (        forth.asm):01474 (5)     CREAT1  sty     DICEND
EA30 9E0C             (        forth.asm):01475 (4)             ldx     BDICEND         This is set by LOCWRT (was IY)
EA32 9F06             (        forth.asm):01476 (4)             stx     LSTWAD
EA34 39               (        forth.asm):01477 (4)             rts
                      (        forth.asm):01478         
EA35 C5               (        forth.asm):01479         DOES    fcb     $C5             79-STANDARD (REQ168)
EA36 444F45533E       (        forth.asm):01480                 fcc     'DOES>'
EA3B EA0B             (        forth.asm):01481                 fdb     CREATE
EA3D C7               (        forth.asm):01482                 RFCS
EA3E 8EEA44           (        forth.asm):01483 (3)             ldx     #DOESEX         JSR #DOESEX is compiled (no actual return)
EA41 7EE14E           (        forth.asm):01484 (3)             jmp     EMXASXT         Set as action component
                      (        forth.asm):01485         
EA44 9E06             (        forth.asm):01486 (4)     DOESEX  ldx     LSTWAD          Header of the last dictionary entry
EA46 E680             (        forth.asm):01487 (4+1)           ldb     ,x+
EA48 C41F             (        forth.asm):01488 (2)             andb    #WRLNMSK        Extract word length
EA4A 3A               (        forth.asm):01489 (1)             abx
                      (        forth.asm):01490                 IFNE    RELFEAT
EA4B 3009             (        forth.asm):01491 (4+1)           leax    9,x             2 bytes/backlink, 1/cksum, 6 bytes code offset
                      (        forth.asm):01492                 ELSE
                      (        forth.asm):01493                 leax    8,x             2 bytes/backlink, 6 bytes code offset
                      (        forth.asm):01494                 ENDC
EA4D A684             (        forth.asm):01495 (4+0)           lda     ,x
EA4F 8139             (        forth.asm):01496 (2)             cmpa    #RTSOPC         RTS inherent
EA51 2705             (        forth.asm):01497 (3)             beq     @dosex1
EA53 C60E             (        forth.asm):01498 (2)             ldb     #14             No matching CREATE
EA55 BDE60B           (        forth.asm):01499 (7)             jsr     ERRHDLR         No return
EA58 867E             (        forth.asm):01500 (2)     @dosex1 lda     #JMPOPC         JMP extended
EA5A A780             (        forth.asm):01501 (4+1)           sta     ,x+             Overwrite RTS opcode
EA5C 3520             (        forth.asm):01502 (4+2)           puls    y
EA5E 10AF84           (        forth.asm):01503 (6+0)           sty     ,x
EA61 39               (        forth.asm):01504 (4)             rts
                      (        forth.asm):01505         
EA62 87               (        forth.asm):01506         LITERAL fcb     $87             79-STANDARD (REQ215)
EA63 4C49544552414C   (        forth.asm):01507                 fcc     'LITERAL'
EA6A EA35             (        forth.asm):01508                 fdb     DOES
EA6C C7               (        forth.asm):01509                 RFCS
EA6D BDE692           (        forth.asm):01510 (7)             jsr     NPOP
EA70 0D1F             (        forth.asm):01511 (4)             tst     USTATE+1
EA72 2601             (        forth.asm):01512 (3)             bne     @comp
EA74 39               (        forth.asm):01513 (4)             rts                     The standard defines no semantics in interp mode
EA75 109E08           (        forth.asm):01514 (5)     @comp   ldy     DICEND
EA78 868E             (        forth.asm):01515 (2)             lda     #LDXOPC         LDX immediate
EA7A BDE446           (        forth.asm):01516 (7)             jsr     VARCON2         Compile LDX #X
EA7D 109F08           (        forth.asm):01517 (5)             sty     DICEND          Update HERE
EA80 8EE684           (        forth.asm):01518 (3)             ldx     #NPUSH
EA83 7EE14E           (        forth.asm):01519 (3)             jmp     EMXASXT         Set NPUSH as action component
                      (        forth.asm):01520         
                      (        forth.asm):01521         * Functionally: : CONSTANT CREATE , DOES> @ ;
                      (        forth.asm):01522         * The following code produces more compact code.
EA86 08               (        forth.asm):01523         CONS    fcb     8               79-STANDARD (REQ185)
EA87 434F4E5354414E54 (        forth.asm):01524                 fcc     'CONSTANT'
EA8F EA62             (        forth.asm):01525                 fdb     LITERAL
EA91 C7               (        forth.asm):01526                 RFCS
EA92 BDE692           (        forth.asm):01527 (7)             jsr     NPOP
EA95 1F16             (        forth.asm):01528 (4)             tfr     x,w
EA97 BDE3CD           (        forth.asm):01529 (7)             jsr     LOCWRT          Create dictionary entry
EA9A 1F61             (        forth.asm):01530 (4)             tfr     w,x
EA9C 868E             (        forth.asm):01531 (2)             lda     #LDXOPC         ldx immediate
EA9E BDE446           (        forth.asm):01532 (7)             jsr     VARCON2         Compile LDX #CSTVAL
EAA1 BDE441           (        forth.asm):01533 (7)             jsr     VARCON          Compile JMP NPUSH
                      (        forth.asm):01534                 IFNE    RELFEAT
EAA4 8D87             (        forth.asm):01535 (6)             bsr     CREAT1
EAA6 2059             (        forth.asm):01536                 RFXT    bra,MONITOR+10  XT for MONITOR
                      (        forth.asm):01537                 ELSE
                      (        forth.asm):01538                 bra     CREAT1
                      (        forth.asm):01539                 ENDC
                      (        forth.asm):01540         
                      (        forth.asm):01541         * Functionally: : VARIABLE CREATE 2 ALLOT ;
                      (        forth.asm):01542         * However we can save three bytes per instance with the following code.
EAA8 08               (        forth.asm):01543         VARI    fcb     8               79-STANDARD (REQ227)
EAA9 5641524941424C45 (        forth.asm):01544                 fcc     'VARIABLE'
EAB1 EA86             (        forth.asm):01545                 fdb     CONS
EAB3 C7               (        forth.asm):01546                 RFCS
EAB4 BDE3CD           (        forth.asm):01547 (7)             jsr     LOCWRT
EAB7 868E             (        forth.asm):01548 (2)             lda     #LDXOPC         ldx immediate
EAB9 A7A0             (        forth.asm):01549 (4+1)           sta     ,y+
EABB 1F26             (        forth.asm):01550 (4)             tfr     y,w             Preserve Y (HERE)
EABD 3125             (        forth.asm):01551 (4+1)           leay    5,y             Relative variable address
EABF 1F21             (        forth.asm):01552 (4)             tfr     y,x
EAC1 1F62             (        forth.asm):01553 (4)             tfr     w,y             Restore Y (HERE)
EAC3 AFA1             (        forth.asm):01554 (5+2)           stx     ,y++            Address field for LDX #VARADDR
EAC5 BDE441           (        forth.asm):01555 (7)             jsr     VARCON          Compile JMP NPUSH
EAC8 3122             (        forth.asm):01556 (4+1)           leay    2,y             2 ALLOT
EACA 7EEA2D           (        forth.asm):01557 (3)             jmp     CREAT1
                      (        forth.asm):01558         
EACD 09               (        forth.asm):01559         IMMED   fcb     9               79-STANDARD (REQ103)
EACE 494D4D4544494154 (        forth.asm):01560                 fcc     'IMMEDIATE'
     45
EAD7 EAA8             (        forth.asm):01561                 fdb     VARI
EAD9 C7               (        forth.asm):01562                 RFCS
EADA C680             (        forth.asm):01563 (2)             ldb     #IMDFLM
EADC 9E06             (        forth.asm):01564 (4)     IMMED1  ldx     LSTWAD
EADE A684             (        forth.asm):01565 (4+0)           lda     ,x
EAE0 103598           (        forth.asm):01566 (4)             orr     b,a
EAE3 A784             (        forth.asm):01567 (4+0)           sta     ,x
EAE5 39               (        forth.asm):01568 (4)             rts
                      (        forth.asm):01569         
EAE6 08               (        forth.asm):01570         RSTRCT  fcb     8               Non-standard (GNU Forth)
EAE7 5245535452494354 (        forth.asm):01571                 fcc     'RESTRICT'      Make word available in compilation mode only
EAEF EACD             (        forth.asm):01572                 fdb     IMMED
EAF1 C7               (        forth.asm):01573                 RFCS
EAF2 C640             (        forth.asm):01574 (2)             ldb     #DEFFLM
EAF4 20E6             (        forth.asm):01575 (3)             bra     IMMED1
                      (        forth.asm):01576         
                      (        forth.asm):01577                 IFNE    RELFEAT
                      (        forth.asm):01578         * This non-standard word enables checkum monitoring by ICHECK for the
                      (        forth.asm):01579         * last defined word in the dictionary. : words are monitored by default
                      (        forth.asm):01580         * and so are constants. CREATEd words require an explicit invokation of
                      (        forth.asm):01581         * MONITOR if they are to be checked for integrity.
EAF6 07               (        forth.asm):01582         MONITOR fcb     7
EAF7 4D4F4E49544F52   (        forth.asm):01583                 fcc     'MONITOR'       ( -- )
EAFE EAE6             (        forth.asm):01584                 fdb     RSTRCT
EB00 C7               (        forth.asm):01585                 RFCS
EB01 9E06             (        forth.asm):01586 (4)             ldx     LSTWAD          Last word header address
EB03 A684             (        forth.asm):01587 (4+0)           lda     ,x
EB05 8A20             (        forth.asm):01588 (2)             ora     #MONFLM         Set the monitored flag in the attribute field
EB07 A784             (        forth.asm):01589 (4+0)           sta     ,x
EB09 8D08             (        forth.asm):01590 (6)             bsr     HDRSKIP         Skip the header (XT to X), clear A
EB0B 109E08           (        forth.asm):01591 (5)             ldy     DICEND          The upper code section limit (excluded)
EB0E 8D0D             (        forth.asm):01592 (6)             bsr     HDRCSUM         Current word's definition's checksum to A
EB10 A71F             (        forth.asm):01593 (4+1)           sta     -1,x            Store the computed checksum into the header
EB12 39               (        forth.asm):01594 (4)             rts
                      (        forth.asm):01595         
                      (        forth.asm):01596         * On entry, X has a word's header address. On return X has the compilation
                      (        forth.asm):01597         * address for that word (XT). A is cleared so as to initialize the checksum.
EB13 A684             (        forth.asm):01598 (4+0)   HDRSKIP lda     ,x              Word's header attribute byte to A
EB15 841F             (        forth.asm):01599 (2)             anda    #WRLNMSK        Extract the word's length
EB17 8B04             (        forth.asm):01600 (2)             adda    #4              1B attribute, 2B backlink, 1B checksum
EB19 3086             (        forth.asm):01601 (4+1)           leax    a,x             X has the word's XT. -1,X has the orig checksum
EB1B 4F               (        forth.asm):01602 (1)             clra
EB1C 39               (        forth.asm):01603 (4)             rts
                      (        forth.asm):01604         
                      (        forth.asm):01605         * On entry X has a word's compilation address (XT). A is supposed to have been
                      (        forth.asm):01606         * previously cleared. Y has the upper bound of the code section's address
                      (        forth.asm):01607         * (excluded). On return, A will have the word's code section's checksum.
                      (        forth.asm):01608         * X is preserved.
EB1D 3410             (        forth.asm):01609 (4+2)   HDRCSUM pshs    x
EB1F A880             (        forth.asm):01610 (4+1)   @hdrcs1 eora    ,x+             Update the checksum
EB21 103712           (        forth.asm):01611 (4)             cmpr    x,y             Upper bound reached?
EB24 26F9             (        forth.asm):01612 (3)             bne     @hdrcs1         No. Process next byte in word's code section
EB26 3510             (        forth.asm):01613 (4+2)           puls    x
EB28 39               (        forth.asm):01614 (4)             rts
                      (        forth.asm):01615         
                      (        forth.asm):01616         * This non-standard word walks through the dictionary linked list and checks
                      (        forth.asm):01617         * that the words that have the MONFLM flag set in their header's attribute
                      (        forth.asm):01618         * field have a definition that still matches the checksum stored in the word's
                      (        forth.asm):01619         * header. This is meant to be used interactively, as a debugging tool, since
                      (        forth.asm):01620         * multitasking is not supported by this implementation. Therefore no status
                      (        forth.asm):01621         * value is returned. Feedback will only be provided for corrupted words, in
                      (        forth.asm):01622         * the form of a diagnostic message printed to the console.
EB29 06               (        forth.asm):01623         ICHECK  fcb     6
EB2A 49434845434B     (        forth.asm):01624                 fcc     'ICHECK'        ( -- )
EB30 EAF6             (        forth.asm):01625                 fdb     MONITOR
EB32 C7               (        forth.asm):01626                 RFCS
EB33 109E08           (        forth.asm):01627 (5)             ldy     DICEND          Upper bound for the code of the last word (exc.)
EB36 9E06             (        forth.asm):01628 (4)             ldx     LSTWAD          LAST points to the header of the last word
EB38 3410             (        forth.asm):01629 (4+2)   @icklop pshs    x               Current word's header address
EB3A A684             (        forth.asm):01630 (4+0)           lda     ,x              Word's header attribute byte to A
EB3C 8520             (        forth.asm):01631 (2)             bita    #MONFLM         Is this a monitored word?
EB3E 2726             (        forth.asm):01632 (3)             beq     @icknxt         No. Point to the next word
EB40 8DD1             (        forth.asm):01633 (6)             bsr     HDRSKIP         Skip the header (XT to X), clear A
EB42 8DD9             (        forth.asm):01634 (6)             bsr     HDRCSUM         Current word's definition's checksum to A
EB44 A11F             (        forth.asm):01635 (4+1)           cmpa    -1,x            Does the checksum match the compile time value?
EB46 271E             (        forth.asm):01636 (3)             beq     @icknxt         Yes. Point to the next word
                      (        forth.asm):01637         * Current word's definition has been modified since its original definition!
EB48 BDE1E8           (        forth.asm):01638 (7)             jsr     PUTCR
EB4B AEE4             (        forth.asm):01639 (5+0)           ldx     ,s              Current word's header address
EB4D E680             (        forth.asm):01640 (4+1)           ldb     ,x+
EB4F C41F             (        forth.asm):01641 (2)             andb    #WRLNMSK
EB51 4F               (        forth.asm):01642 (1)             clra
EB52 BDE684           (        forth.asm):01643 (7)             jsr     NPUSH           Word's name base address
EB55 1F01             (        forth.asm):01644 (4)             tfr     d,x
EB57 BDE684           (        forth.asm):01645 (7)             jsr     NPUSH           Byte count for TYPE
EB5A BDF5BE           (        forth.asm):01646                 RFXT    jsr,TYPE+7      XT for TYPE
EB5D BDF574           (        forth.asm):01647                 RFXT    jsr,SPACE+8     XT for SPACE
EB60 8EEB73           (        forth.asm):01648 (3)             ldx     #CSUMFLM
EB63 BDE1DB           (        forth.asm):01649 (7)             jsr     PUTS            Feedback for checksum failure
EB66 3510             (        forth.asm):01650 (4+2)   @icknxt puls    x               Current word's header address
EB68 1F12             (        forth.asm):01651 (4)             tfr     x,y             Point to the end of the previous word's code
EB6A 8DA7             (        forth.asm):01652 (6)             bsr     HDRSKIP         Skip the header (XT to X), clear A
EB6C AE1D             (        forth.asm):01653 (5+1)           ldx     -3,x            Point to the previous header via the backlink
EB6E 2702             (        forth.asm):01654 (3)             beq     @ickdon         We've just reached the end of the dictionary
EB70 20C6             (        forth.asm):01655 (3)             bra     @icklop
EB72 39               (        forth.asm):01656 (4)     @ickdon rts
                      (        forth.asm):01657         
EB73 696E746567726974 (        forth.asm):01658         CSUMFLM fcn     'integrity check failed'
     7920636865636B20
     6661696C656400
                      (        forth.asm):01659                 ENDC                    RELFEAT enabled
                      (        forth.asm):01660         
EB8A C2               (        forth.asm):01661         DO      fcb     $C2             79-STANDARD (REQ142)
EB8B 444F             (        forth.asm):01662                 fcc     'DO'
                      (        forth.asm):01663                 IFNE    RELFEAT
EB8D EB29             (        forth.asm):01664                 fdb     ICHECK
                      (        forth.asm):01665                 ELSE
                      (        forth.asm):01666                 fdb     RSTRCT
                      (        forth.asm):01667                 ENDC
EB8F C7               (        forth.asm):01668                 RFCS
EB90 9E08             (        forth.asm):01669 (4)             ldx     DICEND
EB92 3003             (        forth.asm):01670 (4+1)           leax    3,x
EB94 BDE6A1           (        forth.asm):01671 (7)             jsr     RPUSH
EB97 8EEB9D           (        forth.asm):01672 (3)             ldx     #DOEX
EB9A 7EE14E           (        forth.asm):01673 (3)             jmp     EMXASXT         Set as action component
                      (        forth.asm):01674         
EB9D BDFBD3           (        forth.asm):01675         DOEX    RFXT    jsr,SWAP+7      XT for SWAP
EBA0 BDEF1F           (        forth.asm):01676                 RFXT    jsr,TOR+5       XT for >R
EBA3 7EEF1F           (        forth.asm):01677                 RFXT    jmp,TOR+5       XT for >R
                      (        forth.asm):01678         
EBA6 C4               (        forth.asm):01679         LOOP    fcb     $C4             79-STANDARD (REQ124)
EBA7 4C4F4F50         (        forth.asm):01680                 fcc     'LOOP'
EBAB EB8A             (        forth.asm):01681                 fdb     DO
EBAD C7               (        forth.asm):01682                 RFCS
EBAE 8EEBCD           (        forth.asm):01683 (3)             ldx     #LOOPEX
EBB1 109E08           (        forth.asm):01684 (5)     LOOP1   ldy     DICEND
EBB4 86BD             (        forth.asm):01685 (2)             lda     #JSROPC         JSR extended
EBB6 BDE13A           (        forth.asm):01686 (7)             jsr     CHKRTS          Check if the final RTS can be omitted
EBB9 BDE446           (        forth.asm):01687 (7)             jsr     VARCON2
EBBC 8E2503           (        forth.asm):01688 (3)             ldx     #BCSOPC         Compile "BCS *+5"
EBBF AFA1             (        forth.asm):01689 (5+2)           stx     ,y++
EBC1 BDE6BF           (        forth.asm):01690 (7)             jsr     RPOP
EBC4 867E             (        forth.asm):01691 (2)             lda     #JMPOPC
EBC6 BDE446           (        forth.asm):01692 (7)             jsr     VARCON2         Compile "JMP R@"
EBC9 109F08           (        forth.asm):01693 (5)             sty     DICEND          No action component
EBCC 39               (        forth.asm):01694 (4)             rts
                      (        forth.asm):01695         
EBCD 8E0001           (        forth.asm):01696 (3)     LOOPEX  ldx     #1
EBD0 2011             (        forth.asm):01697 (3)             bra     PLOPEX1
                      (        forth.asm):01698         
EBD2 C5               (        forth.asm):01699         PLOOP   fcb     $C5             79-STANDARD (REQ141)
EBD3 2B4C4F4F50       (        forth.asm):01700                 fcc     '+LOOP'         The sign hdl reqs for REQ124 should apply though
EBD8 EBA6             (        forth.asm):01701                 fdb     LOOP
EBDA C7               (        forth.asm):01702                 RFCS
EBDB 8EEBE0           (        forth.asm):01703 (3)             ldx     #PLOOPEX
EBDE 20D1             (        forth.asm):01704 (3)             bra     LOOP1
                      (        forth.asm):01705         
EBE0 BDE692           (        forth.asm):01706 (7)     PLOOPEX jsr     NPOP
EBE3 1F16             (        forth.asm):01707 (4)     PLOPEX1 tfr     x,w             Increment to W
EBE5 BDE6BF           (        forth.asm):01708 (7)             jsr     RPOP
EBE8 1F12             (        forth.asm):01709 (4)             tfr     x,y             Index to Y
EBEA BDE6BF           (        forth.asm):01710 (7)             jsr     RPOP            Limit to X
EBED 103062           (        forth.asm):01711 (4)             addr    w,y             Update index
EBF0 114D             (        forth.asm):01712 (2)             tste
EBF2 2B10             (        forth.asm):01713 (3)             bmi     @neginc
EBF4 103721           (        forth.asm):01714 (4)             cmpr    y,x
EBF7 2F12             (        forth.asm):01715 (3)             ble     @done           We're done. Return With CFLAG set
EBF9 BDE6A1           (        forth.asm):01716 (7)     @iter   jsr     RPUSH           Push back the limit
EBFC 1F21             (        forth.asm):01717 (4)             tfr     y,x
EBFE BDE6A1           (        forth.asm):01718 (7)             jsr     RPUSH           Push back the index
EC01 1CFE             (        forth.asm):01719 (2)             andcc   #^CFLAG         Clear CFLAG
EC03 39               (        forth.asm):01720 (4)             rts
EC04 103721           (        forth.asm):01721 (4)     @neginc cmpr    y,x
EC07 27F0             (        forth.asm):01722 (3)             beq     @iter           79-STANDARD irregular historical precedent
EC09 2BEE             (        forth.asm):01723 (3)             bmi     @iter
EC0B 1A01             (        forth.asm):01724 (2)     @done   orcc    #CFLAG          Set CFLAG
EC0D 39               (        forth.asm):01725 (4)             rts
                      (        forth.asm):01726         
EC0E 46               (        forth.asm):01727         UNLOOP  fcb     $46             ANSI (Core)
EC0F 554E4C4F4F50     (        forth.asm):01728                 fcc     'UNLOOP'
EC15 EBD2             (        forth.asm):01729                 fdb     PLOOP
EC17 C7               (        forth.asm):01730                 RFCS
EC18 BDE6BF           (        forth.asm):01731 (7)             jsr     RPOP            Drop the index from the return stack
EC1B 7EE6BF           (        forth.asm):01732 (3)             jmp     RPOP            and the loop limit as well
                      (        forth.asm):01733         
EC1E C2               (        forth.asm):01734         IF      fcb     $C2             79-STANDARD (REQ210)
EC1F 4946             (        forth.asm):01735                 fcc     'IF'
EC21 EC0E             (        forth.asm):01736                 fdb     UNLOOP
EC23 C7               (        forth.asm):01737                 RFCS
EC24 109E08           (        forth.asm):01738 (5)             ldy     DICEND
EC27 8EEC46           (        forth.asm):01739 (3)             ldx     #IFEX
EC2A 86BD             (        forth.asm):01740 (2)             lda     #JSROPC         JSR extended
EC2C BDE13A           (        forth.asm):01741 (7)             jsr     CHKRTS          Check if the final RTS can be omitted
EC2F BDE446           (        forth.asm):01742 (7)             jsr     VARCON2
EC32 8E2603           (        forth.asm):01743 (3)             ldx     #BNEOPC         Compile "BNE *+5"
EC35 AFA1             (        forth.asm):01744 (5+2)           stx     ,y++
EC37 867E             (        forth.asm):01745 (2)             lda     #JMPOPC         JMP extended
EC39 A7A0             (        forth.asm):01746 (4+1)           sta     ,y+
EC3B 1F21             (        forth.asm):01747 (4)             tfr     y,x
EC3D BDE6A1           (        forth.asm):01748 (7)             jsr     RPUSH
EC40 3122             (        forth.asm):01749 (4+1)           leay    2,y             Reserve 2 bytes for the jump address
EC42 109F08           (        forth.asm):01750 (5)             sty     DICEND
EC45 39               (        forth.asm):01751 (4)             rts
                      (        forth.asm):01752         
EC46 BDE692           (        forth.asm):01753 (7)     IFEX    jsr     NPOP
EC49 1037C1           (        forth.asm):01754 (4)             cmpr    0,x
EC4C 39               (        forth.asm):01755 (4)             rts
                      (        forth.asm):01756         
                      (        forth.asm):01757         * Functionally equivalent to:
                      (        forth.asm):01758         * (ANSI) : UNLESS ['] 0= COMPILE, POSTPONE IF ; IMMEDIATE RESTRICT
                      (        forth.asm):01759         * or
                      (        forth.asm):01760         * (old style) : UNLESS COMPILE NOT [COMPILE] IF ; IMMEDIATE RESTRICT
EC4D C6               (        forth.asm):01761         UNLESS  fcb     $C6             Non-standard (Perl inspired)
EC4E 554E4C455353     (        forth.asm):01762                 fcc     'UNLESS'
EC54 EC1E             (        forth.asm):01763                 fdb     IF
EC56 C7               (        forth.asm):01764                 RFCS
EC57 8EED8A           (        forth.asm):01765                 RFXT    ldx,#NULP+5     XT for 0=
EC5A BDF049           (        forth.asm):01766 (7)             jsr     CMPCOM1
EC5D 20C5             (        forth.asm):01767                 RFXT    bra,IF+5        XT for IF
                      (        forth.asm):01768         
EC5F C4               (        forth.asm):01769         ELSE    fcb     $C4             79-STANDARD (REQ167)
EC60 454C5345         (        forth.asm):01770                 fcc     'ELSE'
EC64 EC4D             (        forth.asm):01771                 fdb     UNLESS
EC66 C7               (        forth.asm):01772                 RFCS
EC67 109E08           (        forth.asm):01773 (5)             ldy     DICEND
EC6A 867E             (        forth.asm):01774 (2)             lda     #JMPOPC         JMP extended
EC6C A7A0             (        forth.asm):01775 (4+1)           sta     ,y+
EC6E 3122             (        forth.asm):01776 (4+1)           leay    2,y
EC70 109F08           (        forth.asm):01777 (5)             sty     DICEND
EC73 BDE6BF           (        forth.asm):01778 (7)             jsr     RPOP
EC76 10AF84           (        forth.asm):01779 (6+0)           sty     ,x              Set actual ELSE jump address
EC79 1F21             (        forth.asm):01780 (4)             tfr     y,x
EC7B 301E             (        forth.asm):01781 (4+1)           leax    -2,x
EC7D 7EE6A1           (        forth.asm):01782 (3)             jmp     RPUSH
                      (        forth.asm):01783         
EC80 C4               (        forth.asm):01784         THEN    fcb     $C4             79-STANDARD (REQ161)
EC81 5448454E         (        forth.asm):01785                 fcc     'THEN'
EC85 EC5F             (        forth.asm):01786                 fdb     ELSE
EC87 C7               (        forth.asm):01787                 RFCS
EC88 109E08           (        forth.asm):01788 (5)             ldy     DICEND
EC8B BDE6BF           (        forth.asm):01789 (7)             jsr     RPOP
EC8E 10AF84           (        forth.asm):01790 (6+0)           sty     ,x
EC91 39               (        forth.asm):01791 (4)             rts
                      (        forth.asm):01792         
EC92 01               (        forth.asm):01793         EQ      fcb     1               79-STANDARD (REQ173)
EC93 3D               (        forth.asm):01794                 fcc     '='             ( N1 N2 -- FLAG )
EC94 EC80             (        forth.asm):01795                 fdb     THEN
EC96 C7               (        forth.asm):01796                 RFCS
EC97 CC0246BDE30B     (        forth.asm):01797                 MINDREQ 2
EC9D 10ECC4           (        forth.asm):01798 (8+0)           ldq     ,u              D:W has N2:N1
ECA0 3342             (        forth.asm):01799 (4+1)           leau    2,u             Drop one cell from the user stack
ECA2 1FC1             (        forth.asm):01800 (4)             tfr     0,x
ECA4 103760           (        forth.asm):01801 (4)             cmpr    w,d
ECA7 2602             (        forth.asm):01802 (3)             bne     @eq1
ECA9 3001             (        forth.asm):01803 (4+1)           leax    1,x
ECAB AFC4             (        forth.asm):01804 (5+0)   @eq1    stx     ,u              Store in place to FLAG
ECAD 39               (        forth.asm):01805 (4)             rts
                      (        forth.asm):01806         
ECAE 02               (        forth.asm):01807         DIFF    fcb     2               79-STANDARD (REF)
ECAF 3C3E             (        forth.asm):01808                 fcc     '<>'            ( N1 N2 -- FLAG )
ECB1 EC92             (        forth.asm):01809                 fdb     EQ
ECB3 C7               (        forth.asm):01810                 RFCS
ECB4 CC0246BDE30B     (        forth.asm):01811                 MINDREQ 2
ECBA 10ECC4           (        forth.asm):01812 (8+0)           ldq     ,u              D:W has N2:N1
ECBD 3342             (        forth.asm):01813 (4+1)           leau    2,u             Drop one cell from the user stack
ECBF 1FC1             (        forth.asm):01814 (4)             tfr     0,x
ECC1 103760           (        forth.asm):01815 (4)             cmpr    w,d
ECC4 2702             (        forth.asm):01816 (3)             beq     @diff1
ECC6 3001             (        forth.asm):01817 (4+1)           leax    1,x
ECC8 AFC4             (        forth.asm):01818 (5+0)   @diff1  stx     ,u              Store in place to FLAG
ECCA 39               (        forth.asm):01819 (4)             rts
                      (        forth.asm):01820         
ECCB 02               (        forth.asm):01821         SINFEQ  fcb     2               Non-standard (Not even ANSI!)
ECCC 3C3D             (        forth.asm):01822                 fcc     '<='            Required for the ORNL fixed sieve benchmark
ECCE ECAE             (        forth.asm):01823                 fdb     DIFF
ECD0 C7               (        forth.asm):01824                 RFCS
ECD1 CC0246BDE30B     (        forth.asm):01825                 MINDREQ 2               At least two cells need to be stacked up
ECD7 10AEC4           (        forth.asm):01826 (6+0)           ldy     ,u
ECDA AE42             (        forth.asm):01827 (5+1)           ldx     2,u
ECDC 104F             (        forth.asm):01828 (2)             clrd
ECDE 103721           (        forth.asm):01829 (4)             cmpr    y,x
ECE1 2E02             (        forth.asm):01830 (3)             bgt     @sinfq1
ECE3 104C             (        forth.asm):01831 (2)             incd
ECE5 3342             (        forth.asm):01832 (4+1)   @sinfq1 leau    2,u             Drop one cell
ECE7 EDC4             (        forth.asm):01833 (5+0)           std     ,u
ECE9 39               (        forth.asm):01834 (4)             rts
                      (        forth.asm):01835         
                      (        forth.asm):01836                 IFNE    DEBUG
ECEA                  (        forth.asm):01837         CC      fcb     2               Non-standard. Used for debugging
                      (        forth.asm):01838                 fcc     'CC'
                      (        forth.asm):01839                 fdb     SINFEQ
                      (        forth.asm):01840                 RFCS
                      (        forth.asm):01841                 ldx     CCREG
                      (        forth.asm):01842                 jmp     NPUSH
                      (        forth.asm):01843                 ENDC
                      (        forth.asm):01844         
ECEA 03               (        forth.asm):01845         XOR     fcb     3               79-STANDARD (REQ179)
ECEB 584F52           (        forth.asm):01846                 fcc     'XOR'
                      (        forth.asm):01847                 IFNE    DEBUG
                      (        forth.asm):01848                 fdb     CC
                      (        forth.asm):01849                 ELSE
ECEE ECCB             (        forth.asm):01850                 fdb     SINFEQ
                      (        forth.asm):01851                 ENDC
ECF0 C7               (        forth.asm):01852                 RFCS
ECF1 CC0246BDE30B     (        forth.asm):01853                 MINDREQ 2
ECF7 ECC4             (        forth.asm):01854 (5+0)           ldd     ,u
ECF9 10A642           (        forth.asm):01855 (6+1)           ldw     2,u
ECFC 103660           (        forth.asm):01856 (4)             eorr    w,d
ECFF 3342             (        forth.asm):01857 (4+1)   XOR1    leau    2,u
ED01 EDC4             (        forth.asm):01858 (5+0)           std     ,u
ED03 39               (        forth.asm):01859 (4)             rts
                      (        forth.asm):01860         
ED04 02               (        forth.asm):01861         OR      fcb     2               79-STANDARD (REQ223)
ED05 4F52             (        forth.asm):01862                 fcc     'OR'
ED07 ECEA             (        forth.asm):01863                 fdb     XOR
ED09 C7               (        forth.asm):01864                 RFCS
ED0A CC0246BDE30B     (        forth.asm):01865                 MINDREQ 2
ED10 ECC4             (        forth.asm):01866 (5+0)           ldd     ,u
ED12 10A642           (        forth.asm):01867 (6+1)           ldw     2,u
ED15 103560           (        forth.asm):01868 (4)             orr     w,d
ED18 20E5             (        forth.asm):01869 (3)             bra     XOR1
                      (        forth.asm):01870         
ED1A 03               (        forth.asm):01871         AND     fcb     3               79-STANDARD (REQ183)
ED1B 414E44           (        forth.asm):01872                 fcc     'AND'
ED1E ED04             (        forth.asm):01873                 fdb     OR
ED20 C7               (        forth.asm):01874                 RFCS
ED21 CC0246BDE30B     (        forth.asm):01875                 MINDREQ 2
ED27 ECC4             (        forth.asm):01876 (5+0)           ldd     ,u
ED29 10A642           (        forth.asm):01877 (6+1)           ldw     2,u
ED2C 103460           (        forth.asm):01878 (4)             andr    w,d
ED2F 20CE             (        forth.asm):01879 (3)             bra     XOR1
                      (        forth.asm):01880         
ED31 03               (        forth.asm):01881         COM     fcb     3               79-STANDARD (REF)
ED32 434F4D           (        forth.asm):01882                 fcc     'COM'
ED35 ED1A             (        forth.asm):01883                 fdb     AND
ED37 C7               (        forth.asm):01884                 RFCS
ED38 BDE692           (        forth.asm):01885 (7)     COM0    jsr     NPOP
ED3B 1F10             (        forth.asm):01886 (4)             tfr     x,d
ED3D 1043             (        forth.asm):01887 (2)             comd
ED3F 1F01             (        forth.asm):01888 (4)             tfr     d,x
ED41 3610             (        forth.asm):01889                 UCNPUSH
ED43 39               (        forth.asm):01890 (4)             rts
                      (        forth.asm):01891         
ED44 06               (        forth.asm):01892         INVERT  fcb     6               ANSI (Core)
ED45 494E56455254     (        forth.asm):01893                 fcc     'INVERT'
ED4B ED31             (        forth.asm):01894                 fdb     COM
ED4D C7               (        forth.asm):01895                 RFCS
ED4E 20E8             (        forth.asm):01896 (3)             bra     COM0
                      (        forth.asm):01897         
ED50 02               (        forth.asm):01898         ZGREAT  fcb     2               79-STANDARD (REQ118)
ED51 303E             (        forth.asm):01899                 fcc     '0>'
ED53 ED44             (        forth.asm):01900                 fdb     INVERT
ED55 C7               (        forth.asm):01901                 RFCS
ED56 BDE692           (        forth.asm):01902 (7)             jsr     NPOP
ED59 1F10             (        forth.asm):01903 (4)             tfr     x,d
ED5B 104D             (        forth.asm):01904 (2)             tstd
ED5D 2F06             (        forth.asm):01905 (3)             ble     @zgrt1
ED5F 8E0001           (        forth.asm):01906 (3)             ldx     #1
ED62 3610             (        forth.asm):01907                 UCNPUSH
ED64 39               (        forth.asm):01908 (4)             rts
ED65 1FC1             (        forth.asm):01909 (4)     @zgrt1  tfr     0,x
ED67 3610             (        forth.asm):01910                 UCNPUSH
ED69 39               (        forth.asm):01911 (4)             rts
                      (        forth.asm):01912         
ED6A 02               (        forth.asm):01913         ZLESS   fcb     2               79-STANDARD (REQ144)
ED6B 303C             (        forth.asm):01914                 fcc     '0<'
ED6D ED50             (        forth.asm):01915                 fdb     ZGREAT
ED6F C7               (        forth.asm):01916                 RFCS
ED70 BDE692           (        forth.asm):01917 (7)             jsr     NPOP
ED73 1F10             (        forth.asm):01918 (4)             tfr     x,d
ED75 104D             (        forth.asm):01919 (2)             tstd
ED77 2C06             (        forth.asm):01920 (3)             bge     @zlss1
ED79 8E0001           (        forth.asm):01921 (3)             ldx     #1
ED7C 3610             (        forth.asm):01922                 UCNPUSH
ED7E 39               (        forth.asm):01923 (4)             rts
ED7F 1FC1             (        forth.asm):01924 (4)     @zlss1  tfr     0,x
ED81 3610             (        forth.asm):01925                 UCNPUSH
ED83 39               (        forth.asm):01926 (4)             rts
                      (        forth.asm):01927         
ED84 02               (        forth.asm):01928         NULP    fcb     2               79-STANDARD (REQ180)
ED85 303D             (        forth.asm):01929                 fcc     '0='
ED87 ED6A             (        forth.asm):01930                 fdb     ZLESS
ED89 C7               (        forth.asm):01931                 RFCS
ED8A BDE692           (        forth.asm):01932 (7)             jsr     NPOP
ED8D 1F10             (        forth.asm):01933 (4)             tfr     x,d
ED8F 1FC1             (        forth.asm):01934 (4)             tfr     0,x
ED91 104D             (        forth.asm):01935 (2)             tstd
ED93 2703             (        forth.asm):01936 (3)             beq     @nulp2
ED95 3610             (        forth.asm):01937         @nulp1  UCNPUSH
ED97 39               (        forth.asm):01938 (4)             rts
ED98 3001             (        forth.asm):01939 (4+1)   @nulp2  leax    1,x
ED9A 20F9             (        forth.asm):01940 (3)             bra     @nulp1
                      (        forth.asm):01941         
ED9C 03               (        forth.asm):01942         NOT     fcb     3               79-STANDARD (REQ165)
ED9D 4E4F54           (        forth.asm):01943                 fcc     'NOT'
EDA0 ED84             (        forth.asm):01944                 fdb     NULP
EDA2 C7               (        forth.asm):01945                 RFCS
EDA3 20E5             (        forth.asm):01946                 RFXT    bra,NULP+5      XT for 0=
                      (        forth.asm):01947         
EDA5 02               (        forth.asm):01948         USUP    fcb     2               ANSI (Core Ext)
EDA6 553E             (        forth.asm):01949                 fcc     'U>'
EDA8 ED9C             (        forth.asm):01950                 fdb     NOT
EDAA C7               (        forth.asm):01951                 RFCS
EDAB BDE44B           (        forth.asm):01952 (7)             jsr     CMP2
EDAE 2302             (        forth.asm):01953 (3)             bls     @usup1
EDB0 3001             (        forth.asm):01954 (4+1)           leax    1,x
EDB2 3610             (        forth.asm):01955         @usup1  UCNPUSH
EDB4 39               (        forth.asm):01956 (4)             rts
                      (        forth.asm):01957         
EDB5 02               (        forth.asm):01958         UINF    fcb     2               79-STANDARD (REQ150)
EDB6 553C             (        forth.asm):01959                 fcc     'U<'
EDB8 EDA5             (        forth.asm):01960                 fdb     USUP
EDBA C7               (        forth.asm):01961                 RFCS
EDBB BDE44B           (        forth.asm):01962 (7)             jsr     CMP2
EDBE 2402             (        forth.asm):01963 (3)             bhs     @uinf1          Z is set
EDC0 3001             (        forth.asm):01964 (4+1)           leax    1,x
EDC2 3610             (        forth.asm):01965         @uinf1  UCNPUSH
EDC4 39               (        forth.asm):01966 (4)             rts
                      (        forth.asm):01967         
                      (        forth.asm):01968         * Functionally: : WITHIN OVER - >R - R> U< ;
EDC5 06               (        forth.asm):01969         WITHIN  fcb     6               ANSI (Core)
EDC6 57495448494E     (        forth.asm):01970                 fcc     'WITHIN'        ( n1 n2 n3 -- flag )
EDCC EDB5             (        forth.asm):01971                 fdb     UINF
EDCE C7               (        forth.asm):01972                 RFCS
EDCF BDFC1C           (        forth.asm):01973                 RFXT    jsr,OVER+7      XT for OVER
EDD2 BDF797           (        forth.asm):01974                 RFXT    jsr,MINUS+4     XT for -
EDD5 BDEF1F           (        forth.asm):01975                 RFXT    jsr,TOR+5       XT for >R
EDD8 BDF797           (        forth.asm):01976                 RFXT    jsr,MINUS+4     XT for -
EDDB BDEF13           (        forth.asm):01977                 RFXT    jsr,RFROM+5     XT for R>
EDDE 20DB             (        forth.asm):01978                 RFXT    bra,UINF+5      XT for U<
                      (        forth.asm):01979         
EDE0 01               (        forth.asm):01980         SUP     fcb     1               79-STANDARD (REQ102)
EDE1 3E               (        forth.asm):01981                 fcc     '>'
EDE2 EDC5             (        forth.asm):01982                 fdb     WITHIN
EDE4 C7               (        forth.asm):01983                 RFCS
EDE5 BDE44B           (        forth.asm):01984 (7)             jsr     CMP2
EDE8 2F02             (        forth.asm):01985 (3)             ble     @sup1
EDEA 3001             (        forth.asm):01986 (4+1)           leax    1,x
EDEC 3610             (        forth.asm):01987         @sup1   UCNPUSH
EDEE 39               (        forth.asm):01988 (4)             rts
                      (        forth.asm):01989         
EDEF 01               (        forth.asm):01990         INF     fcb     1               79-STANDARD (REQ139)
EDF0 3C               (        forth.asm):01991                 fcc     '<'
EDF1 EDE0             (        forth.asm):01992                 fdb     SUP
EDF3 C7               (        forth.asm):01993                 RFCS
EDF4 BDE44B           (        forth.asm):01994 (7)             jsr     CMP2
EDF7 2C02             (        forth.asm):01995 (3)             bge     @inf1
EDF9 3001             (        forth.asm):01996 (4+1)           leax    1,x
EDFB 3610             (        forth.asm):01997         @inf1   UCNPUSH
EDFD 39               (        forth.asm):01998 (4)             rts
                      (        forth.asm):01999         
EDFE 03               (        forth.asm):02000         MAX     fcb     3               79-STANDARD (REQ218)
EDFF 4D4158           (        forth.asm):02001                 fcc     'MAX'
EE02 EDEF             (        forth.asm):02002                 fdb     INF
EE04 C7               (        forth.asm):02003                 RFCS
EE05 BDE692           (        forth.asm):02004 (7)             jsr     NPOP
EE08 1F12             (        forth.asm):02005 (4)             tfr     x,y
EE0A BDE692           (        forth.asm):02006 (7)             jsr     NPOP
EE0D 103721           (        forth.asm):02007 (4)             cmpr    y,x
EE10 2C02             (        forth.asm):02008 (3)             bge     @pshrv1
EE12 1F21             (        forth.asm):02009 (4)             tfr     y,x
EE14 3610             (        forth.asm):02010         @pshrv1 UCNPUSH
EE16 39               (        forth.asm):02011 (4)             rts
                      (        forth.asm):02012         
EE17 03               (        forth.asm):02013         MIN     fcb     3               79-STANDARD (REQ127)
EE18 4D494E           (        forth.asm):02014                 fcc     'MIN'
EE1B EDFE             (        forth.asm):02015                 fdb     MAX
EE1D C7               (        forth.asm):02016                 RFCS
EE1E BDE692           (        forth.asm):02017 (7)             jsr     NPOP
EE21 1F12             (        forth.asm):02018 (4)             tfr     x,y
EE23 BDE692           (        forth.asm):02019 (7)             jsr     NPOP
EE26 103721           (        forth.asm):02020 (4)             cmpr    y,x
EE29 2F02             (        forth.asm):02021 (3)             ble     @pshrv2
EE2B 1F21             (        forth.asm):02022 (4)             tfr     y,x
EE2D 3610             (        forth.asm):02023         @pshrv2 UCNPUSH
EE2F 39               (        forth.asm):02024 (4)             rts
                      (        forth.asm):02025         
EE30 03               (        forth.asm):02026         ABS     fcb     3               79-STANDARD (REQ108)
EE31 414253           (        forth.asm):02027                 fcc     'ABS'
EE34 EE17             (        forth.asm):02028                 fdb     MIN
EE36 C7               (        forth.asm):02029                 RFCS
EE37 BDE692           (        forth.asm):02030 (7)             jsr     NPOP
EE3A 1F10             (        forth.asm):02031 (4)             tfr     x,d
EE3C 104D             (        forth.asm):02032 (2)             tstd
EE3E 2A04             (        forth.asm):02033 (3)             bpl     @abs1
EE40 1040             (        forth.asm):02034 (2)             negd
EE42 1F01             (        forth.asm):02035 (4)             tfr     d,x
EE44 3610             (        forth.asm):02036         @abs1   UCNPUSH
EE46 39               (        forth.asm):02037 (4)             rts
                      (        forth.asm):02038         
EE47 06               (        forth.asm):02039         NEGATE  fcb     6               79-STANDARD (REQ177)
EE48 4E4547415445     (        forth.asm):02040                 fcc     'NEGATE'
EE4E EE30             (        forth.asm):02041                 fdb     ABS
EE50 C7               (        forth.asm):02042                 RFCS
EE51 CC0248BDE30B     (        forth.asm):02043                 MINDREQ 1               One cell needs to be stacked up
EE57 ECC4             (        forth.asm):02044 (5+0)           ldd     ,u
EE59 1040             (        forth.asm):02045 (2)             negd
EE5B EDC4             (        forth.asm):02046 (5+0)           std     ,u
EE5D 39               (        forth.asm):02047 (4)             rts
                      (        forth.asm):02048         
EE5E C5               (        forth.asm):02049         BEGIN   fcb     $C5             79-STANDARD (REQ147)
EE5F 424547494E       (        forth.asm):02050                 fcc     'BEGIN'
EE64 EE47             (        forth.asm):02051                 fdb     NEGATE
EE66 C7               (        forth.asm):02052                 RFCS
EE67 9E08             (        forth.asm):02053 (4)             ldx     DICEND
EE69 7EE6A1           (        forth.asm):02054 (3)             jmp     RPUSH
                      (        forth.asm):02055         
EE6C C5               (        forth.asm):02056         AGAIN   fcb     $C5             79-STANDARD (REF114)
EE6D 414741494E       (        forth.asm):02057                 fcc     'AGAIN'
EE72 EE5E             (        forth.asm):02058                 fdb     BEGIN
EE74 C7               (        forth.asm):02059                 RFCS
EE75 BDE6BF           (        forth.asm):02060 (7)             jsr     RPOP
EE78 1F12             (        forth.asm):02061 (4)             tfr     x,y
EE7A 9E08             (        forth.asm):02062 (4)             ldx     DICEND
EE7C 867E             (        forth.asm):02063 (2)             lda     #JMPOPC         JMP extended
EE7E A780             (        forth.asm):02064 (4+1)           sta     ,x+
EE80 10AF81           (        forth.asm):02065 (6+2)           sty     ,x++
EE83 9F08             (        forth.asm):02066 (4)             stx     DICEND
EE85 8602             (        forth.asm):02067 (2)             lda     #2
EE87 972B             (        forth.asm):02068 (3)             sta     RTSREMV         Trigger the RTS removal optimization
EE89 39               (        forth.asm):02069 (4)             rts
                      (        forth.asm):02070         
                      (        forth.asm):02071         # The standard does not require this as being immediate but I do.
EE8A C4               (        forth.asm):02072         EXIT    fcb     $C4             79-STANDARD (REQ117)
EE8B 45584954         (        forth.asm):02073                 fcc     'EXIT'
EE8F EE6C             (        forth.asm):02074                 fdb     AGAIN
EE91 C7               (        forth.asm):02075                 RFCS
EE92 9E08             (        forth.asm):02076 (4)             ldx     DICEND
EE94 301D             (        forth.asm):02077 (4+1)           leax    -3,x
EE96 109E14           (        forth.asm):02078 (5)             ldy     JSRLAST
EE99 103721           (        forth.asm):02079 (4)             cmpr    y,x
EE9C 2605             (        forth.asm):02080 (3)             bne     @noopt          Tail JMP optimization is not possible
EE9E 867E             (        forth.asm):02081 (2)             lda     #JMPOPC         JMP extended
EEA0 A784             (        forth.asm):02082 (4+0)           sta     ,x
EEA2 39               (        forth.asm):02083 (4)             rts
EEA3 3003             (        forth.asm):02084 (4+1)   @noopt  leax    3,x             Point back to HERE
EEA5 8639             (        forth.asm):02085 (2)             lda     #RTSOPC         RTS inherent
EEA7 A780             (        forth.asm):02086 (4+1)           sta     ,x+
EEA9 9F08             (        forth.asm):02087 (4)             stx     DICEND
EEAB 39               (        forth.asm):02088 (4)             rts
                      (        forth.asm):02089         
EEAC C5               (        forth.asm):02090         UNTIL   fcb     $C5             79-STANDARD (REQ237)
EEAD 554E54494C       (        forth.asm):02091                 fcc     'UNTIL'
EEB2 EE8A             (        forth.asm):02092                 fdb     EXIT
EEB4 C7               (        forth.asm):02093                 RFCS
EEB5 109E08           (        forth.asm):02094 (5)             ldy     DICEND
EEB8 86BD             (        forth.asm):02095 (2)             lda     #JSROPC         JSR extended
EEBA 8EEC46           (        forth.asm):02096 (3)             ldx     #IFEX
EEBD BDE13A           (        forth.asm):02097 (7)             jsr     CHKRTS          Check if the final RTS can be omitted
EEC0 BDE446           (        forth.asm):02098 (7)             jsr     VARCON2
EEC3 8E2603           (        forth.asm):02099 (3)             ldx     #BNEOPC         Compile "BNE *+5"
EEC6 AFA1             (        forth.asm):02100 (5+2)           stx     ,y++
EEC8 867E             (        forth.asm):02101 (2)             lda     #JMPOPC         JMP extended
EECA A7A0             (        forth.asm):02102 (4+1)           sta     ,y+
EECC BDE6BF           (        forth.asm):02103 (7)             jsr     RPOP
EECF AFA1             (        forth.asm):02104 (5+2)           stx     ,y++
EED1 109F08           (        forth.asm):02105 (5)             sty     DICEND
EED4 39               (        forth.asm):02106 (4)             rts
                      (        forth.asm):02107         
EED5 C3               (        forth.asm):02108         END     fcb     $C3             79-STANDARD (REF224)
EED6 454E44           (        forth.asm):02109                 fcc     'END'
EED9 EEAC             (        forth.asm):02110                 fdb     UNTIL
EEDB C7               (        forth.asm):02111                 RFCS
EEDC 20D7             (        forth.asm):02112                 RFXT    bra,UNTIL+8     XT for UNTIL
                      (        forth.asm):02113         
EEDE C5               (        forth.asm):02114         WHILE   fcb     $C5             79-STANDARD (REQ149)
EEDF 5748494C45       (        forth.asm):02115                 fcc     'WHILE'
EEE4 EED5             (        forth.asm):02116                 fdb     END
EEE6 C7               (        forth.asm):02117                 RFCS
EEE7 7EEC24           (        forth.asm):02118                 RFXT    jmp,IF+5        XT for IF
                      (        forth.asm):02119         
EEEA C6               (        forth.asm):02120         REPEAT  fcb     $C6             79-STANDARD (REQ120)
EEEB 524550454154     (        forth.asm):02121                 fcc     'REPEAT'
EEF1 EEDE             (        forth.asm):02122                 fdb     WHILE
EEF3 C7               (        forth.asm):02123                 RFCS
EEF4 BDE6BF           (        forth.asm):02124 (7)             jsr     RPOP
EEF7 3410             (        forth.asm):02125 (4+2)           pshs    x
EEF9 BDE6BF           (        forth.asm):02126 (7)             jsr     RPOP
EEFC 109E08           (        forth.asm):02127 (5)             ldy     DICEND
EEFF 867E             (        forth.asm):02128 (2)             lda     #JMPOPC         JMP extended
EF01 BDE446           (        forth.asm):02129 (7)             jsr     VARCON2
EF04 3510             (        forth.asm):02130 (4+2)           puls    x
EF06 10AF84           (        forth.asm):02131 (6+0)           sty     ,x
EF09 109F08           (        forth.asm):02132 (5)             sty     DICEND
EF0C 39               (        forth.asm):02133 (4)             rts
                      (        forth.asm):02134         
EF0D 42               (        forth.asm):02135         RFROM   fcb     $42             79-STANDARD (REQ110)
EF0E 523E             (        forth.asm):02136                 fcc     'R>'
EF10 EEEA             (        forth.asm):02137                 fdb     REPEAT
EF12 C7               (        forth.asm):02138                 RFCS
EF13 BDE6BF           (        forth.asm):02139 (7)             jsr     RPOP
EF16 7EE684           (        forth.asm):02140 (3)             jmp     NPUSH
                      (        forth.asm):02141         
EF19 42               (        forth.asm):02142         TOR     fcb     $42             79-STANDARD (REQ200)
EF1A 3E52             (        forth.asm):02143                 fcc     '>R'
EF1C EF0D             (        forth.asm):02144                 fdb     RFROM
EF1E C7               (        forth.asm):02145                 RFCS
EF1F BDE692           (        forth.asm):02146 (7)             jsr     NPOP
EF22 7EE6A1           (        forth.asm):02147 (3)             jmp     RPUSH
                      (        forth.asm):02148         
EF25 45               (        forth.asm):02149         LEAVE   fcb     $45             79-STANDARD (REQ213)
EF26 4C45415645       (        forth.asm):02150                 fcc     'LEAVE'
EF2B EF19             (        forth.asm):02151                 fdb     TOR
EF2D C7               (        forth.asm):02152                 RFCS
EF2E BDE6BF           (        forth.asm):02153 (7)             jsr     RPOP
EF31 BDE6BF           (        forth.asm):02154 (7)             jsr     RPOP
EF34 BDE6A1           (        forth.asm):02155 (7)             jsr     RPUSH
EF37 7EE6A1           (        forth.asm):02156 (3)             jmp     RPUSH
                      (        forth.asm):02157         
EF3A 41               (        forth.asm):02158         INDI    fcb     $41             79-STANDARD (REQ136)
EF3B 49               (        forth.asm):02159                 fcc     'I'
EF3C EF25             (        forth.asm):02160                 fdb     LEAVE
EF3E C7               (        forth.asm):02161                 RFCS
EF3F C601             (        forth.asm):02162 (2)             ldb     #1              1 means top of the stack
EF41 9629             (        forth.asm):02163 (3)     RPICKN  lda     RDEPTH
EF43 103798           (        forth.asm):02164 (4)             cmpr    b,a
EF46 250A             (        forth.asm):02165 (3)             bcs     @rpick1
EF48 9E00             (        forth.asm):02166 (4)             ldx     RSP
EF4A 5A               (        forth.asm):02167 (1)             decb                    Minus 1, unlike in the Z80 implementation
EF4B 58               (        forth.asm):02168 (1)             lslb                    Times 2
EF4C 3A               (        forth.asm):02169 (1)             abx
EF4D AE84             (        forth.asm):02170 (5+0)           ldx     ,x
EF4F 7EE684           (        forth.asm):02171 (3)             jmp     NPUSH
EF52 C608             (        forth.asm):02172 (2)     @rpick1 ldb     #8              Return stack underflow
EF54 BDE60B           (        forth.asm):02173 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02174         
EF57 42               (        forth.asm):02175         RFETCH  fcb     $42             79-STANDARD (REQ228)
EF58 5240             (        forth.asm):02176                 fcc     'R@'
EF5A EF3A             (        forth.asm):02177                 fdb     INDI
EF5C C7               (        forth.asm):02178                 RFCS
EF5D 20E0             (        forth.asm):02179                 RFXT    bra,INDI+4      XT for I
                      (        forth.asm):02180         
EF5F 42               (        forth.asm):02181         INDIP   fcb     $42             79-STANDARD (REF)
EF60 4927             (        forth.asm):02182                 fdb     $4927
EF62 EF57             (        forth.asm):02183                 fdb     RFETCH
EF64 C7               (        forth.asm):02184                 RFCS
EF65 C602             (        forth.asm):02185 (2)             ldb     #2
EF67 20D8             (        forth.asm):02186 (3)             bra     RPICKN
                      (        forth.asm):02187         
EF69 41               (        forth.asm):02188         INDJ    fcb     $41             79-STANDARD (REQ225)
EF6A 4A               (        forth.asm):02189                 fcc     'J'
EF6B EF5F             (        forth.asm):02190                 fdb     INDIP
EF6D C7               (        forth.asm):02191                 RFCS
EF6E C603             (        forth.asm):02192 (2)             ldb     #3
EF70 20CF             (        forth.asm):02193 (3)             bra     RPICKN
                      (        forth.asm):02194         
EF72 42               (        forth.asm):02195         INDJP   fcb     $42             Non-standard
EF73 4A27             (        forth.asm):02196                 fdb     $4A27
EF75 EF69             (        forth.asm):02197                 fdb     INDJ
EF77 C7               (        forth.asm):02198                 RFCS
EF78 C604             (        forth.asm):02199 (2)             ldb     #4
EF7A 20C5             (        forth.asm):02200 (3)             bra     RPICKN
                      (        forth.asm):02201         
EF7C 41               (        forth.asm):02202         INDK    fcb     $41             79-STANDARD (REF)
EF7D 4B               (        forth.asm):02203                 fcc     'K'
EF7E EF72             (        forth.asm):02204                 fdb     INDJP
EF80 C7               (        forth.asm):02205                 RFCS
EF81 C605             (        forth.asm):02206 (2)             ldb     #5
EF83 20BC             (        forth.asm):02207 (3)             bra     RPICKN
                      (        forth.asm):02208         
EF85 04               (        forth.asm):02209         QUIT    fcb     4               79-STANDARD (REQ211)
EF86 51554954         (        forth.asm):02210                 fcc     'QUIT'
EF8A EF7C             (        forth.asm):02211                 fdb     INDK
EF8C C7               (        forth.asm):02212                 RFCS
EF8D 0F1F             (        forth.asm):02213 (5)             clr     USTATE+1
EF8F BDE9ED           (        forth.asm):02214                 RFXT    jsr,RCLR+7      XT for RCLR
EF92 10CE8000         (        forth.asm):02215 (4)             lds     #RAMSTRT+RAMSIZE Reset the system stack pointer
EF96 BDE1E8           (        forth.asm):02216 (7)             jsr     PUTCR
EF99 7EE0A8           (        forth.asm):02217 (3)             jmp     INTERP
                      (        forth.asm):02218         
EF9C 05               (        forth.asm):02219         ABORT   fcb     5               79-STANDARD (REQ101)
EF9D 41424F5254       (        forth.asm):02220                 fcc     'ABORT'
EFA2 EF85             (        forth.asm):02221                 fdb     QUIT
EFA4 C7               (        forth.asm):02222                 RFCS
EFA5 BDE9E1           (        forth.asm):02223                 RFXT    jsr,NCLR+7      XT for NCLR
EFA8 BDE9ED           (        forth.asm):02224                 RFXT    jsr,RCLR+7      XT for RCLR
EFAB C603             (        forth.asm):02225 (2)             ldb     #3
EFAD BDE60B           (        forth.asm):02226 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02227         
EFB0 04               (        forth.asm):02228         FIND    fcb     4               79-STANDARD (REQ203)
EFB1 46494E44         (        forth.asm):02229                 fcc     'FIND'          ( -- XT )
EFB5 EF9C             (        forth.asm):02230                 fdb     ABORT
EFB7 C7               (        forth.asm):02231                 RFCS
EFB8 1FC2             (        forth.asm):02232 (4)             tfr     0,y             Default return value is zero
EFBA BDE6D8           (        forth.asm):02233 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
EFBD 6D84             (        forth.asm):02234 (5+0)           tst     ,x
EFBF 2712             (        forth.asm):02235 (3)             beq     @find1
EFC1 BDE284           (        forth.asm):02236 (7)             jsr     SCNSTOK
EFC4 270D             (        forth.asm):02237 (3)             beq     @find1
EFC6 BDE35F           (        forth.asm):02238 (7)             jsr     SWDIC
EFC9 DC0E             (        forth.asm):02239 (4)             ldd     PLOAD           Retrieve word payload
EFCB DD10             (        forth.asm):02240 (4)             std     FNDPLD          Make it accessible through PAYLOAD
EFCD DC04             (        forth.asm):02241 (4)             ldd     TOKENEP
EFCF 9326             (        forth.asm):02242 (4)             subd    BSBFADR
EFD1 DD20             (        forth.asm):02243 (4)             std     UTOIN           Derive >IN from TOKENEP
EFD3 1F21             (        forth.asm):02244 (4)     @find1  tfr     y,x
EFD5 7EE684           (        forth.asm):02245 (3)             jmp     NPUSH
                      (        forth.asm):02246         
EFD8 01               (        forth.asm):02247         RBRACK  fcb     1               79-STANDARD (REQ126)
EFD9 5D               (        forth.asm):02248                 fcc     ']'
EFDA EFB0             (        forth.asm):02249                 fdb     FIND
EFDC C7               (        forth.asm):02250                 RFCS
EFDD 8601             (        forth.asm):02251 (2)             lda     #1
EFDF 971F             (        forth.asm):02252 (3)             sta     USTATE+1
EFE1 39               (        forth.asm):02253 (4)             rts
                      (        forth.asm):02254         
                      (        forth.asm):02255         * Note: the standard does not mandate that this primitive be executed in
                      (        forth.asm):02256         * definitions only. IMHO, it ought to, Therefore I am forcing the C bit here.
EFE2 C1               (        forth.asm):02257         LBRACK  fcb     $C1             79-STANDARD (REQ125)
EFE3 5B               (        forth.asm):02258                 fcc     '['
EFE4 EFD8             (        forth.asm):02259                 fdb     RBRACK
EFE6 C7               (        forth.asm):02260                 RFCS
EFE7 0F1F             (        forth.asm):02261 (5)             clr     USTATE+1
EFE9 39               (        forth.asm):02262 (4)             rts
                      (        forth.asm):02263         
EFEA C9               (        forth.asm):02264         BKCOMP  fcb     $C9             79-STANDARD (REQ179)
EFEB 5B434F4D50494C45 (        forth.asm):02265                 fcc     '[COMPILE]'
     5D
EFF4 EFE2             (        forth.asm):02266                 fdb     LBRACK
EFF6 C7               (        forth.asm):02267                 RFCS
EFF7 BDE6D8           (        forth.asm):02268 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
EFFA 6D84             (        forth.asm):02269 (5+0)           tst     ,x
EFFC 2605             (        forth.asm):02270 (3)             bne     @bkcmp2
EFFE C605             (        forth.asm):02271 (2)     @bkcmp1 ldb     #5              Missing word name
F000 BDE60B           (        forth.asm):02272 (7)             jsr     ERRHDLR         No return
F003 BDE284           (        forth.asm):02273 (7)     @bkcmp2 jsr     SCNSTOK
F006 27F6             (        forth.asm):02274 (3)             beq     @bkcmp1
F008 BDE35F           (        forth.asm):02275 (7)             jsr     SWDIC
F00B 2607             (        forth.asm):02276 (3)             bne     @bkcmp3         Word found. Code address returned in Y
F00D 9E02             (        forth.asm):02277 (4)             ldx     TOKENSP
F00F C602             (        forth.asm):02278 (2)             ldb     #2              Undefined (X points to the offending word)
F011 BDE60B           (        forth.asm):02279 (7)             jsr     ERRHDLR         No return
F014 1F21             (        forth.asm):02280 (4)     @bkcmp3 tfr     y,x
F016 BDE14E           (        forth.asm):02281 (7)             jsr     EMXASXT         Set as action component
F019 DC02             (        forth.asm):02282 (4)             ldd     TOKENSP         Updated by SWDIC if the word was found
F01B 9326             (        forth.asm):02283 (4)             subd    BSBFADR
F01D DD20             (        forth.asm):02284 (4)             std     UTOIN
F01F 39               (        forth.asm):02285 (4)             rts
                      (        forth.asm):02286         
                      (        forth.asm):02287         * Functionally: : ['] FIND [COMPILE] LITERAL ; IMMEDIATE RESTRICT
F020 C3               (        forth.asm):02288         BKQUOT  fcb     $C3             ANSI (Core)
F021 5B275D           (        forth.asm):02289                 fcb     $5B,$27,$5D
F024 EFEA             (        forth.asm):02290                 fdb     BKCOMP
F026 C7               (        forth.asm):02291                 RFCS
F027 8D8F             (        forth.asm):02292                 RFXT    bsr,FIND+7      XT for FIND
                      (        forth.asm):02293         * Data stack topmost cell has the target word address.
F029 7EEA6D           (        forth.asm):02294                 RFXT    jmp,LITERAL+10  XT for LITERAL
                      (        forth.asm):02295         
F02C C8               (        forth.asm):02296         POSTPON fcb     $C8             ANSI (Core)
F02D 504F5354504F4E45 (        forth.asm):02297                 fcc     'POSTPONE'      ( -- ) as an alias for [COMPILE]
F035 F020             (        forth.asm):02298                 fdb     BKQUOT
F037 C7               (        forth.asm):02299                 RFCS
F038 20BD             (        forth.asm):02300                 RFXT    bra,BKCOMP+12   XT for [COMPILE]
                      (        forth.asm):02301         
                      (        forth.asm):02302         * Like the 79-STANDARD COMPILE word, GNU Forth has this as a compile-only word.
                      (        forth.asm):02303         * This is a wise choice since it allows us to possibly optimize it.
F03A 48               (        forth.asm):02304         CMPCOMA fcb     $48             ANSI (Core Ext)
F03B 434F4D50494C452C (        forth.asm):02305                 fcc     'COMPILE,'      ( XT -- )
F043 F02C             (        forth.asm):02306                 fdb     POSTPON
F045 C7               (        forth.asm):02307                 RFCS
F046 BDE692           (        forth.asm):02308 (7)             jsr     NPOP            Execution token to X
F049 109E08           (        forth.asm):02309 (5)     CMPCOM1 ldy     DICEND
F04C 86BD             (        forth.asm):02310 (2)             lda     #JSROPC
F04E BDE13A           (        forth.asm):02311 (7)             jsr     CHKRTS
F051 BDE446           (        forth.asm):02312 (7)             jsr     VARCON2
F054 109F08           (        forth.asm):02313 (5)             sty     DICEND
F057 39               (        forth.asm):02314 (4)             rts
                      (        forth.asm):02315         
                      (        forth.asm):02316         * As per the standard, : is not immediate. This allows for further interesting
                      (        forth.asm):02317         * developments, like tracing words execution...
F058 01               (        forth.asm):02318         COMPC   fcb     $1              79-STANDARD (REQ116)
F059 3A               (        forth.asm):02319                 fcc     ':'
F05A F03A             (        forth.asm):02320                 fdb     CMPCOMA
F05C C7               (        forth.asm):02321                 RFCS
F05D 8601             (        forth.asm):02322 (2)             lda     #1
F05F 971F             (        forth.asm):02323 (3)             sta     USTATE+1
F061 104F             (        forth.asm):02324 (2)             clrd
F063 DD14             (        forth.asm):02325 (4)             std     JSRLAST
F065 8602             (        forth.asm):02326 (2)             lda     #2
F067 972B             (        forth.asm):02327 (3)             sta     RTSREMV         Optimistic strategy: remove the final RTS
F069 9629             (        forth.asm):02328 (3)             lda     RDEPTH
F06B 972A             (        forth.asm):02329 (3)             sta     IRDPTH          Meant to check for unbalanced constructs
F06D 7EE3CD           (        forth.asm):02330 (3)             jmp     LOCWRT
                      (        forth.asm):02331         
F070 C1               (        forth.asm):02332         COMPR   fcb     $C1             79-STANDARD (REQ196)
F071 3B               (        forth.asm):02333                 fcc     ';'
F072 F058             (        forth.asm):02334                 fdb     COMPC
F074 C7               (        forth.asm):02335                 RFCS
F075 9629             (        forth.asm):02336 (3)             lda     RDEPTH          Return stack depth
F077 912A             (        forth.asm):02337 (3)             cmpa    IRDPTH          Same as when : was entered?
F079 2705             (        forth.asm):02338 (3)             beq     @compr1
F07B C609             (        forth.asm):02339 (2)             ldb     #9              Illegal construct if not
F07D BDE60B           (        forth.asm):02340 (7)             jsr     ERRHDLR         No return
F080 0F1F             (        forth.asm):02341 (5)     @compr1 clr     USTATE+1        Back to interpretation mode
F082 9E0C             (        forth.asm):02342 (4)             ldx     BDICEND
F084 9F06             (        forth.asm):02343 (4)             stx     LSTWAD          Update LAST
F086 9E08             (        forth.asm):02344 (4)             ldx     DICEND
                      (        forth.asm):02345         * Optimization: replace the last JSR by a JMP, if possible.
F088 DC14             (        forth.asm):02346 (4)             ldd     JSRLAST
F08A 2712             (        forth.asm):02347 (3)             beq     @compr3         We need an RTS
F08C 301D             (        forth.asm):02348 (4+1)           leax    -3,x
F08E 9C14             (        forth.asm):02349 (4)             cmpx    JSRLAST
F090 2604             (        forth.asm):02350 (3)             bne     @compr2
F092 867E             (        forth.asm):02351 (2)             lda     #JMPOPC         JMP extended
F094 A784             (        forth.asm):02352 (4+0)           sta     ,x
                      (        forth.asm):02353         * At this point we still have to emit an RTS unless RTSREMV is 2 or more.
F096 3003             (        forth.asm):02354 (4+1)   @compr2 leax    3,x
F098 962B             (        forth.asm):02355 (3)             lda     RTSREMV
F09A 8102             (        forth.asm):02356 (2)             cmpa    #2
F09C 2404             (        forth.asm):02357 (3)             bhs     @compr4         Optimization applies. We have no forward refs
F09E 8639             (        forth.asm):02358 (2)     @compr3 lda     #RTSOPC         RTS inherent
F0A0 A780             (        forth.asm):02359 (4+1)           sta     ,x+
F0A2                  (        forth.asm):02360         @compr4
                      (        forth.asm):02361                 IFNE    DEBUG
                      (        forth.asm):02362                 lda     #ILLOPC         Illegal opcode
                      (        forth.asm):02363                 sta     ,x+
                      (        forth.asm):02364                 ENDC
F0A2 9F08             (        forth.asm):02365 (4)             stx     DICEND          Update HERE
                      (        forth.asm):02366                 IFNE    RELFEAT
F0A4 BDEB01           (        forth.asm):02367                 RFXT    jsr,MONITOR+10  XT for MONITOR. All : words are candidates
                      (        forth.asm):02368         *                               for integrity check by ICHECK.
                      (        forth.asm):02369                 ENDC
F0A7 39               (        forth.asm):02370 (4)             rts
                      (        forth.asm):02371         
F0A8 C7               (        forth.asm):02372         RECURSE fcb     $C7             FORTH-83
F0A9 52454355525345   (        forth.asm):02373                 fcc     'RECURSE'
F0B0 F070             (        forth.asm):02374                 fdb     COMPR
F0B2 C7               (        forth.asm):02375                 RFCS
F0B3 9E12             (        forth.asm):02376 (4)             ldx     RECADDR         Set up by LOCWRT
F0B5 7EE14E           (        forth.asm):02377 (3)             jmp     EMXASXT         Set as action component
                      (        forth.asm):02378         
F0B8 06               (        forth.asm):02379         FORGET  fcb     6               79-STANDARD (REQ196)
F0B9 464F52474554     (        forth.asm):02380                 fcc     'FORGET'
F0BF F0A8             (        forth.asm):02381                 fdb     RECURSE
F0C1 C7               (        forth.asm):02382                 RFCS
F0C2 BDE6D8           (        forth.asm):02383 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
F0C5 6D84             (        forth.asm):02384 (5+0)           tst     ,x              EOL?
F0C7 2605             (        forth.asm):02385 (3)             bne     @frgt2          No
F0C9 C605             (        forth.asm):02386 (2)     @frgt1  ldb     #5              Missing word name
F0CB BDE60B           (        forth.asm):02387 (7)             jsr     ERRHDLR         No return
F0CE BDE284           (        forth.asm):02388 (7)     @frgt2  jsr     SCNSTOK
F0D1 27F6             (        forth.asm):02389 (3)             beq     @frgt1          EOL before a non-SP character could be acquired
F0D3 BDE35F           (        forth.asm):02390 (7)             jsr     SWDIC           SWDIC uses TOKENSP as input--not X!!
F0D6 2607             (        forth.asm):02391 (3)             bne     @frgt3          Word found. XT returned in Y
F0D8 9E02             (        forth.asm):02392 (4)             ldx     TOKENSP
F0DA C602             (        forth.asm):02393 (2)             ldb     #2              Undefined (X points to the offending word)
F0DC BDE60B           (        forth.asm):02394 (7)             jsr     ERRHDLR         No return
F0DF 1F21             (        forth.asm):02395 (4)     @frgt3  tfr     y,x             Y and X have the word's XT
F0E1 108C0C15         (        forth.asm):02396 (4)             cmpy    #RAMFTCH
F0E5 271B             (        forth.asm):02397 (3)             beq     @frgt4
F0E7 108CE000         (        forth.asm):02398 (4)             cmpy    #ROMSTRT
F0EB 2415             (        forth.asm):02399 (3)             bhs     @frgt4
                      (        forth.asm):02400                 IFNE    RELFEAT
F0ED AE1D             (        forth.asm):02401 (5+1)           ldx     -3,x            Backlink to X
F0EF 9F06             (        forth.asm):02402 (4)             stx     LSTWAD          Update LAST
F0F1 303C             (        forth.asm):02403 (4+1)           leax    -4,y            XT-4 to X (1B/attr, 2B/backlink, 1B/checksum)
                      (        forth.asm):02404                 ELSE
                      (        forth.asm):02405                 ldx     -2,x            Backlink to X
                      (        forth.asm):02406                 stx     LSTWAD          Update LAST
                      (        forth.asm):02407                 leax    -3,y            XT-3 to X (1B/attr, 2B/backlink)
                      (        forth.asm):02408                 ENDC
F0F3 4F               (        forth.asm):02409 (1)             clra
F0F4 D631             (        forth.asm):02410 (3)             ldb     CURTOKL         Token name length to D
F0F6 103201           (        forth.asm):02411 (4)             subr    d,x             Substract word length
F0F9 9F08             (        forth.asm):02412 (4)             stx     DICEND          Update HERE
F0FB DC02             (        forth.asm):02413 (4)             ldd     TOKENSP         Set by SWDIC to point to the end of the token
F0FD 9326             (        forth.asm):02414 (4)             subd    BSBFADR
F0FF DD20             (        forth.asm):02415 (4)             std     UTOIN           Derive >IN from TOKENSP
F101 39               (        forth.asm):02416 (4)             rts
F102 C60B             (        forth.asm):02417 (2)     @frgt4  ldb     #11             Word is unforgettable
F104 BDE60B           (        forth.asm):02418 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02419         
F107 07               (        forth.asm):02420         EXCT    fcb     7               79-STANDARD (REQ163)
F108 45584543555445   (        forth.asm):02421                 fcc     'EXECUTE'
F10F F0B8             (        forth.asm):02422                 fdb     FORGET
F111 C7               (        forth.asm):02423                 RFCS
F112 BDE692           (        forth.asm):02424 (7)             jsr     NPOP
F115 1037C1           (        forth.asm):02425 (4)             cmpr    0,x             Although the standard does not specify that
F118 2702             (        forth.asm):02426 (3)             beq     @exct1          a NUL address should trigger an error, I do
F11A 1F15             (        forth.asm):02427 (4)             tfr     x,pc
F11C C60D             (        forth.asm):02428 (2)     @exct1  ldb     #13             Illegal argument
F11E BDE60B           (        forth.asm):02429 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02430         
F121 03               (        forth.asm):02431         BYE     fcb     3               Non-standard
F122 425945           (        forth.asm):02432                 fcc     'BYE'
F125 F107             (        forth.asm):02433                 fdb     EXCT
F127 C7               (        forth.asm):02434                 RFCS
F128 7EE036           (        forth.asm):02435 (3)             jmp     RSTHDL
                      (        forth.asm):02436         
F12B C6               (        forth.asm):02437         BKCHAR  fcb     $C6             ANSI (Core)
F12C 5B434841525D     (        forth.asm):02438                 fcc     '[CHAR]'
F132 F121             (        forth.asm):02439                 fdb     BYE
F134 C7               (        forth.asm):02440                 RFCS
F135 8D0B             (        forth.asm):02441                 RFXT    bsr,CHAR+7      XT for CHAR
F137 7EEA6D           (        forth.asm):02442                 RFXT    jmp,LITERAL+10  XT for LITERAL
                      (        forth.asm):02443         
F13A 04               (        forth.asm):02444         CHAR    fcb     4               ANSI (Core)
F13B 43484152         (        forth.asm):02445                 fcc     'CHAR'
F13F F12B             (        forth.asm):02446                 fdb     BKCHAR
F141 C7               (        forth.asm):02447                 RFCS
F142 BDE6D8           (        forth.asm):02448 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
F145 BDE284           (        forth.asm):02449 (7)     @char1  jsr     SCNSTOK         X points to the beginning of the character
F148 2714             (        forth.asm):02450 (3)             beq     @chrerr
F14A E684             (        forth.asm):02451 (4+0)           ldb     ,x
F14C 4F               (        forth.asm):02452 (1)             clra
F14D 1F01             (        forth.asm):02453 (4)             tfr     d,x
F14F BDE684           (        forth.asm):02454 (7)             jsr     NPUSH
F152 9E02             (        forth.asm):02455 (4)             ldx     TOKENSP         Set by SCNSTOK
F154 BDE292           (        forth.asm):02456 (7)             jsr     SCNETOK
F157 1F10             (        forth.asm):02457 (4)             tfr     x,d             TOKENEP
F159 9326             (        forth.asm):02458 (4)             subd    BSBFADR
F15B DD20             (        forth.asm):02459 (4)             std     UTOIN           Derive >IN from TOKENEP
F15D 39               (        forth.asm):02460 (4)             rts
F15E C60D             (        forth.asm):02461 (2)     @chrerr ldb     #13             Illegal argument
F160 BDE60B           (        forth.asm):02462 (7)             jsr     ERRHDLR
                      (        forth.asm):02463         * No return.
                      (        forth.asm):02464         
                      (        forth.asm):02465         * Hairy code but working.
F163 04               (        forth.asm):02466         WORD    fcb     4               79-STANDARD (REQ181)
F164 574F5244         (        forth.asm):02467                 fcc     'WORD'          ( char -- addr )
F168 F13A             (        forth.asm):02468                 fdb     CHAR
F16A C7               (        forth.asm):02469                 RFCS
F16B BDE692           (        forth.asm):02470 (7)             jsr     NPOP
F16E 1F16             (        forth.asm):02471 (4)             tfr     x,w             F has the delimiter ASCII code
F170 109E08           (        forth.asm):02472 (5)             ldy     DICEND          The counted string returned is stored at HERE
F173 3420             (        forth.asm):02473 (4+2)           pshs    y
F175 6FA0             (        forth.asm):02474 (6+1)           clr     ,y+             Initialize its length
F177 BDE6D8           (        forth.asm):02475 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
F17A 6D84             (        forth.asm):02476 (5+0)           tst     ,x              EOL reached?
F17C 2605             (        forth.asm):02477 (3)             bne     @word1          No, proceed
F17E 3510             (        forth.asm):02478 (4+2)   @word0  puls    x
F180 3610             (        forth.asm):02479                 UCNPUSH                 Push back HERE
F182 39               (        forth.asm):02480 (4)             rts
F183 BDE284           (        forth.asm):02481 (7)     @word1  jsr     SCNSTOK         Scan for the next non-space character
F186 2718             (        forth.asm):02482 (3)             beq     @word5          EOL reached, this is the end
F188 A680             (        forth.asm):02483 (4+1)           lda     ,x+             First non-space character
F18A 1037F8           (        forth.asm):02484 (4)             cmpr    f,a             Leading delimiter matched?
F18D 2602             (        forth.asm):02485 (3)             bne     @word3          No
F18F A680             (        forth.asm):02486 (4+1)   @word2  lda     ,x+             Acquire next character from the input stream
F191 A7A0             (        forth.asm):02487 (4+1)   @word3  sta     ,y+
F193 2709             (        forth.asm):02488 (3)             beq     @word4          EOL reached
F195 1037F8           (        forth.asm):02489 (4)             cmpr    f,a             Trailing delimiter?
F198 2706             (        forth.asm):02490 (3)             beq     @word5
F19A 6CF4             (        forth.asm):02491 (6+3)           inc     [,s]            Increment string length
F19C 20F1             (        forth.asm):02492 (3)             bra     @word2
F19E 301F             (        forth.asm):02493 (4+1)   @word4  leax    -1,x            EOL reached
F1A0 1F10             (        forth.asm):02494 (4)     @word5  tfr     x,d             Pointing one char after the delimiter or to NUL
F1A2 9326             (        forth.asm):02495 (4)             subd    BSBFADR
F1A4 DD20             (        forth.asm):02496 (4)             std     UTOIN
F1A6 20D6             (        forth.asm):02497 (3)             bra     @word0
                      (        forth.asm):02498         
F1A8 81               (        forth.asm):02499         LPAR    fcb     $81             79-STANDARD (REQ122)
F1A9 28               (        forth.asm):02500                 fcc     '('
F1AA F163             (        forth.asm):02501                 fdb     WORD
F1AC C7               (        forth.asm):02502                 RFCS
F1AD BDE6D8           (        forth.asm):02503 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
F1B0 A680             (        forth.asm):02504 (4+1)   @lpar1  lda     ,x+
F1B2 270B             (        forth.asm):02505 (3)             beq     @lparx          Input stream exhausted before ) is matched
F1B4 8129             (        forth.asm):02506 (2)             cmpa    #')
F1B6 26F8             (        forth.asm):02507 (3)             bne     @lpar1
F1B8 1F10             (        forth.asm):02508 (4)             tfr     x,d             Just matched )
F1BA 9326             (        forth.asm):02509 (4)             subd    BSBFADR
F1BC DD20             (        forth.asm):02510 (4)             std     UTOIN           Update >IN
F1BE 39               (        forth.asm):02511 (4)             rts
F1BF C60C             (        forth.asm):02512 (2)     @lparx  ldb     #12             Missing delimiter
F1C1 BDE60B           (        forth.asm):02513 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02514         
F1C4 06               (        forth.asm):02515         SOURCE  fcb     6               ANSI (Core)
F1C5 534F55524345     (        forth.asm):02516                 fcc     'SOURCE'        ( -- baseaddr charcount )
F1CB F1A8             (        forth.asm):02517                 fdb     LPAR
F1CD C7               (        forth.asm):02518                 RFCS
F1CE 9E26             (        forth.asm):02519 (4)             ldx     BSBFADR
F1D0 BDE684           (        forth.asm):02520 (7)             jsr     NPUSH
F1D3 8E0400           (        forth.asm):02521 (3)             ldx     #BLKSIZ         Non-zero block size
F1D6 DC22             (        forth.asm):02522 (4)             ldd     UBLK
F1D8 2605             (        forth.asm):02523 (3)             bne     @srcdon         Current BLK is NZ
F1DA 4F               (        forth.asm):02524 (1)             clra
F1DB D628             (        forth.asm):02525 (3)             ldb     CMDLNSZ         Character count entered through GETS in INTERP
F1DD 1F01             (        forth.asm):02526 (4)             tfr     d,x
F1DF 7EE684           (        forth.asm):02527 (3)     @srcdon jmp     NPUSH
                      (        forth.asm):02528         
                      (        forth.asm):02529         * This is a straightforward implementation borrowed from GNU Forth 'see \':
                      (        forth.asm):02530         * : \
                      (        forth.asm):02531         *   BLK @
                      (        forth.asm):02532         *   IF     >IN @ C/L / 1+ C/L * >IN ! EXIT
                      (        forth.asm):02533         *   THEN
                      (        forth.asm):02534         *   SOURCE >IN ! DROP ; IMMEDIATE
                      (        forth.asm):02535         * However since C/L (number of columns per line) is 64 (a power of 2), things
                      (        forth.asm):02536         * can be coded in a more compact manner as: >IN @ 63 COM AND 64 + >IN !
F1E2 81               (        forth.asm):02537         BKSLSH  fcb     $81             ANSI (Block Ext)
F1E3 5C               (        forth.asm):02538                 fcb     $5C             \ ( -- )
F1E4 F1C4             (        forth.asm):02539                 fdb     SOURCE
F1E6 C7               (        forth.asm):02540                 RFCS
F1E7 DC22             (        forth.asm):02541 (4)             ldd     UBLK            BLK @ to D
F1E9 270B             (        forth.asm):02542 (3)             beq     @comser         We operate from block 0: the console
F1EB DC20             (        forth.asm):02543 (4)             ldd     UTOIN           >IN @
F1ED C4C0             (        forth.asm):02544 (2)             andb    #^$3F           Point to the beginning of the line
F1EF CB40             (        forth.asm):02545 (2)             addb    #$40            next line
F1F1 8900             (        forth.asm):02546 (2)             adca    #0              Propagate potential carry from LSB
F1F3 DD20             (        forth.asm):02547 (4)             std     UTOIN           >IN !
F1F5 39               (        forth.asm):02548 (4)             rts                     EXIT
F1F6 8DD6             (        forth.asm):02549         @comser RFXT    bsr,SOURCE+9    XT for SOURCE
F1F8 BDE692           (        forth.asm):02550 (7)             jsr     NPOP
F1FB 9F20             (        forth.asm):02551 (4)             stx     UTOIN           >IN !
F1FD 7EFBC8           (        forth.asm):02552                 RFXT    jmp,DROP+7      XT for DROP
                      (        forth.asm):02553                 ENDC
                      (        forth.asm):02554         
F200 82               (        forth.asm):02555         PSTR    fcb     $82             79-STANDARD (REQ133)
F201 2E22             (        forth.asm):02556                 fcc     '."'
F203 F1E2             (        forth.asm):02557                 fdb     BKSLSH
F205 C7               (        forth.asm):02558                 RFCS
F206 8D13             (        forth.asm):02559                 RFXT    bsr,SQUOTE+5    XT for S"
F208 0D1F             (        forth.asm):02560 (4)             tst     USTATE+1
F20A 2603             (        forth.asm):02561 (3)             bne     @pstcmp
F20C 7EF5BE           (        forth.asm):02562                 RFXT    jmp,TYPE+7
F20F 8EF5BE           (        forth.asm):02563         @pstcmp RFXT    ldx,#TYPE+7
F212 7EE14E           (        forth.asm):02564 (3)             jmp     EMXASXT
                      (        forth.asm):02565         
F215 82               (        forth.asm):02566         SQUOTE  fcb     $82             ANSI (Core)
F216 5322             (        forth.asm):02567                 fcc     'S"'
F218 F200             (        forth.asm):02568                 fdb     PSTR
F21A C7               (        forth.asm):02569                 RFCS
F21B 0D1F             (        forth.asm):02570 (4)             tst     USTATE+1
F21D 260C             (        forth.asm):02571 (3)             bne     @sqcmp
F21F 8E0022           (        forth.asm):02572 (3)             ldx     #'"             We are inperpreting
F222 BDE684           (        forth.asm):02573 (7)             jsr     NPUSH
F225 BDF16B           (        forth.asm):02574                 RFXT    jsr,WORD+7      XT for WORD
F228 7EF5DD           (        forth.asm):02575                 RFXT    jmp,COUNT+8     XT for COUNT
F22B 109E08           (        forth.asm):02576 (5)     @sqcmp  ldy     DICEND          We are compiling
F22E 867E             (        forth.asm):02577 (2)             lda     #JMPOPC         JMP extended
F230 A7A0             (        forth.asm):02578 (4+1)           sta     ,y+
F232 3420             (        forth.asm):02579 (4+2)           pshs    y
F234 3122             (        forth.asm):02580 (4+1)           leay    2,y             2 ALLOT
F236 109F08           (        forth.asm):02581 (5)             sty     DICEND
F239 8E0022           (        forth.asm):02582 (3)             ldx     #'"
F23C BDE684           (        forth.asm):02583 (7)             jsr     NPUSH
F23F BDF16B           (        forth.asm):02584                 RFXT    jsr,WORD+7      XT for WORD
F242 BDE692           (        forth.asm):02585 (7)             jsr     NPOP
F245 4F               (        forth.asm):02586 (1)             clra
F246 E684             (        forth.asm):02587 (4+0)           ldb     ,x              C@
F248 3001             (        forth.asm):02588 (4+1)           leax    1,x             1+. Skip the byte count (X has HERE)
F24A 308B             (        forth.asm):02589 (4+2)           leax    d,x             Skip string length material
F24C 3520             (        forth.asm):02590 (4+2)           puls    y
F24E AFA4             (        forth.asm):02591 (5+0)           stx     ,y              Install jump address
F250 3122             (        forth.asm):02592 (4+1)           leay    2,y             Counted string base address to Y
F252 868E             (        forth.asm):02593 (2)             lda     #LDXOPC
F254 A780             (        forth.asm):02594 (4+1)           sta     ,x+
F256 10AF81           (        forth.asm):02595 (6+2)           sty     ,x++
F259 9F08             (        forth.asm):02596 (4)             stx     DICEND          Update HERE
F25B 8EE684           (        forth.asm):02597 (3)             ldx     #NPUSH
F25E BDE14E           (        forth.asm):02598 (7)             jsr     EMXASXT
F261 8EF5DD           (        forth.asm):02599                 RFXT    ldx,#COUNT+8    XT for COUNT
F264 7EE14E           (        forth.asm):02600 (3)             jmp     EMXASXT
                      (        forth.asm):02601         
                      (        forth.asm):02602         * Transactional behaviour is guaranteed here. What this means is that the
                      (        forth.asm):02603         * operation will preserve the data stack contents, should insufficient
                      (        forth.asm):02604         * parameters be supplied. It is a very desirable feature (for debugging
                      (        forth.asm):02605         * purposes) which will be generalized to a number of other words. As an
                      (        forth.asm):02606         * aside, it also allows us to access the data stack as directly indexed
                      (        forth.asm):02607         * through the 6309 U register, resulting in better performance.
F267 02               (        forth.asm):02608         DPLUS   fcb     2               79-STANDARD (REQ241)
F268 442B             (        forth.asm):02609                 fcc     'D+'            ( d2 d1 -- d1+d2--signed )
F26A F215             (        forth.asm):02610                 fdb     SQUOTE          Initially ( L2 H2 L1 H1)
F26C C7               (        forth.asm):02611                 RFCS
F26D CC0242BDE30B     (        forth.asm):02612                 MINDREQ 4               Make sure we have at least 4 cells stacked up
                      (        forth.asm):02613         * At this point sufficient stack depth has been assessed. Let's rock and roll!
F273 BDFC46           (        forth.asm):02614         @stkok  RFXT    jsr,ROT+6       XT for ROT ( L2 L1 H1 H2 )
F276 EC44             (        forth.asm):02615 (5+1)           ldd     4,u             L1
F278 E346             (        forth.asm):02616 (5+1)           addd    6,u             L2
F27A ED46             (        forth.asm):02617 (5+1)           std     6,u             d1+d2 least significant cell
F27C EC42             (        forth.asm):02618 (5+1)           ldd     2,u             H1
F27E 10890000         (        forth.asm):02619 (4)             adcd    #0              Carry from least significant cell addition
F282 E3C4             (        forth.asm):02620 (5+0)           addd    ,u              H2
F284 ED44             (        forth.asm):02621 (5+1)           std     4,u             d1+d2 most significant cell
F286 3344             (        forth.asm):02622 (4+1)           leau    4,u             Drop 2 cells from the data stack
F288 39               (        forth.asm):02623 (4)             rts
                      (        forth.asm):02624         
F289 07               (        forth.asm):02625         DNEG    fcb     7               79-STANDARD (REQ245)
F28A 444E4547415445   (        forth.asm):02626                 fcc     'DNEGATE'
F291 F267             (        forth.asm):02627                 fdb     DPLUS
F293 C7               (        forth.asm):02628                 RFCS
F294 CC0246BDE30B     (        forth.asm):02629                 MINDREQ 2               We need at least 2 cells stacked up
F29A 10A642           (        forth.asm):02630 (6+1)           ldw     2,u             Least significant cell
F29D 1053             (        forth.asm):02631 (2)             comw
F29F ECC4             (        forth.asm):02632 (5+0)           ldd     ,u              Most significant cell
F2A1 1043             (        forth.asm):02633 (2)             comd
F2A3 108B0001         (        forth.asm):02634 (4)             addw    #1
F2A7 10890000         (        forth.asm):02635 (4)             adcd    #0              Propagate carry flag
F2AB 10EDC4           (        forth.asm):02636 (8+0)           stq     ,u              Store the result back to the data stack
F2AE 39               (        forth.asm):02637 (4)             rts
                      (        forth.asm):02638         
F2AF 03               (        forth.asm):02639         DZEQ    fcb     3               79-STANDARD (double number extension)
F2B0 44303D           (        forth.asm):02640                 fcc     'D0='           ( d -- flag )
F2B3 F289             (        forth.asm):02641                 fdb     DNEG
F2B5 C7               (        forth.asm):02642                 RFCS
F2B6 BDED0A           (        forth.asm):02643                 RFXT    jsr,OR+5        XT for OR
F2B9 7EED8A           (        forth.asm):02644                 RFXT    jmp,NULP+5      XT for 0=
                      (        forth.asm):02645         
                      (        forth.asm):02646         * In essence:
                      (        forth.asm):02647         * : D< DNEGATE D+ NIP [ HEX ] 8000 AND IF 1 ELSE 0 THEN ;
F2BC 02               (        forth.asm):02648         DLESS   fcb     2               79-STANDARD (REQ244)
F2BD 443C             (        forth.asm):02649                 fcc     'D<'            ( d1 d2 -- flag )
F2BF F2AF             (        forth.asm):02650                 fdb     DZEQ
F2C1 C7               (        forth.asm):02651                 RFCS
F2C2 8DD0             (        forth.asm):02652                 RFXT    bsr,DNEG+10     XT for DNEGATE
F2C4 8DA7             (        forth.asm):02653                 RFXT    bsr,DPLUS+5     XT for D+
F2C6 4F               (        forth.asm):02654 (1)             clra
F2C7 A742             (        forth.asm):02655 (4+1)           sta     2,u
F2C9 E6C4             (        forth.asm):02656 (4+0)           ldb     ,u
F2CB 2D05             (        forth.asm):02657 (3)             blt     @setto1
F2CD A743             (        forth.asm):02658 (4+1)   @setrv  sta     3,u
F2CF 3342             (        forth.asm):02659 (4+1)           leau    2,u
F2D1 39               (        forth.asm):02660 (4)             rts
F2D2 4C               (        forth.asm):02661 (1)     @setto1 inca
F2D3 20F8             (        forth.asm):02662 (3)             bra     @setrv
                      (        forth.asm):02663         
F2D5 05               (        forth.asm):02664         TWOOVER fcb     5               79-STANDARD (double number extension)
F2D6 324F564552       (        forth.asm):02665                 fcc     '2OVER'         ( d1 d2 -- d1 d2 d1 )
F2DB F2BC             (        forth.asm):02666                 fdb     DLESS
F2DD C7               (        forth.asm):02667                 RFCS
F2DE CC0242BDE30B     (        forth.asm):02668                 MINDREQ 4
F2E4 10EC44           (        forth.asm):02669 (8+1)           ldq     4,u             D:W has MSC:LSC of D1
F2E7 1F61             (        forth.asm):02670 (4)             tfr     w,x
F2E9 BDE684           (        forth.asm):02671 (7)             jsr     NPUSH
F2EC 1F01             (        forth.asm):02672 (4)             tfr     d,x
F2EE 7EE684           (        forth.asm):02673 (3)             jmp     NPUSH
                      (        forth.asm):02674         
F2F1 05               (        forth.asm):02675         TWOSWAP fcb     5               79-STANDARD (double number extension)
F2F2 3253574150       (        forth.asm):02676                 fcc     '2SWAP'         ( d1 d2 -- d2 d1 )
F2F7 F2D5             (        forth.asm):02677                 fdb     TWOOVER
F2F9 C7               (        forth.asm):02678                 RFCS
F2FA CC0242BDE30B     (        forth.asm):02679                 MINDREQ 4               At least four cells must be stacked up
F300 AE44             (        forth.asm):02680 (5+1)           ldx     4,u             D1 most significant cell
F302 10AE46           (        forth.asm):02681 (6+1)           ldy     6,u             D1 least significant cell
F305 10ECC4           (        forth.asm):02682 (8+0)           ldq     ,u              D:W has MSC:LSC of D2
F308 10ED44           (        forth.asm):02683 (8+1)           stq     4,u
F30B AFC4             (        forth.asm):02684 (5+0)           stx     ,u
F30D 10AF42           (        forth.asm):02685 (6+1)           sty     2,u
F310 39               (        forth.asm):02686 (4)             rts
                      (        forth.asm):02687         
F311 05               (        forth.asm):02688         TWODROP fcb     5               79-STANDARD (double number extension)
F312 3244524F50       (        forth.asm):02689                 fcc     '2DROP'         ( d -- )
F317 F2F1             (        forth.asm):02690                 fdb     TWOSWAP
F319 C7               (        forth.asm):02691                 RFCS
F31A CC0246BDE30B     (        forth.asm):02692                 MINDREQ 2               At least two cells must be stacked up
F320 3344             (        forth.asm):02693 (4+1)           leau    4,u
F322 39               (        forth.asm):02694 (4)             rts
                      (        forth.asm):02695         
F323 04               (        forth.asm):02696         TWODUP  fcb     4               79-STANDARD (double number extension)
F324 32445550         (        forth.asm):02697                 fcc     '2DUP'          ( double -- double double )
F328 F311             (        forth.asm):02698                 fdb     TWODROP
F32A C7               (        forth.asm):02699                 RFCS
F32B CC0246BDE30B     (        forth.asm):02700                 MINDREQ 2
F331 10ECC4           (        forth.asm):02701 (8+0)           ldq     ,u              D:W has MSC:LSC of DOUBLE
F334 1F61             (        forth.asm):02702 (4)             tfr     w,x
F336 BDE684           (        forth.asm):02703 (7)             jsr     NPUSH
F339 1F01             (        forth.asm):02704 (4)             tfr     d,x
F33B 7EE684           (        forth.asm):02705 (3)             jmp     NPUSH
                      (        forth.asm):02706         
F33E 02               (        forth.asm):02707         TWOSTOR fcb     2               79-STANDARD (double number extension)
F33F 3221             (        forth.asm):02708                 fcc     '2!'            ( double addr -- )
F341 F323             (        forth.asm):02709                 fdb     TWODUP
F343 C7               (        forth.asm):02710                 RFCS
F344 CC0244BDE30B     (        forth.asm):02711                 MINDREQ 3
F34A 10EC42           (        forth.asm):02712 (8+1)           ldq     2,u             DOUBLE to D:W
F34D 10EDD4           (        forth.asm):02713 (8+3)           stq     [,u]            Store DOUBLE to ADDR
F350 3346             (        forth.asm):02714 (4+1)           leau    6,u             Drop three cells from the user stack
F352 39               (        forth.asm):02715 (4)             rts
                      (        forth.asm):02716         
F353 02               (        forth.asm):02717         TWOFTCH fcb     2               79-STANDARD (double number extension)
F354 3240             (        forth.asm):02718                 fcc     '2@'            ( dbladdr -- double )
F356 F33E             (        forth.asm):02719                 fdb     TWOSTOR
F358 C7               (        forth.asm):02720                 RFCS
F359 CC0248BDE30B     (        forth.asm):02721                 MINDREQ 1
F35F 10ECD4           (        forth.asm):02722 (8+3)           ldq     [,u]            D:W has MSC:LSC of DBLADDR @
F362 10A7C4           (        forth.asm):02723 (6+0)           stw     ,u              Least significant cell stacked in place
F365 1F01             (        forth.asm):02724 (4)             tfr     d,x             Most significant cell goes through standard push
F367 7EE684           (        forth.asm):02725 (3)             jmp     NPUSH
                      (        forth.asm):02726         
F36A 07               (        forth.asm):02727         CONVERT fcb     7               79-STANDARD (REQ195)
F36B 434F4E56455254   (        forth.asm):02728                 fcc     'CONVERT'       ( d1 addr1 -- d2 addr2 )
F372 F353             (        forth.asm):02729                 fdb     TWOFTCH
F374 C7               (        forth.asm):02730                 RFCS
F375 CC0244BDE30B     (        forth.asm):02731                 MINDREQ 3               At least 3 cells need to be stacked up on entry
F37B BDE2A4           (        forth.asm):02732 (7)             jsr     CKBASE          Check for supported BASE. No return if not
F37E AEC4             (        forth.asm):02733 (5+0)           ldx     ,u              ADDR1 to X
F380 3001             (        forth.asm):02734 (4+1)   @cvloop leax    1,x
F382 E684             (        forth.asm):02735 (4+0)           ldb     ,x
                      (        forth.asm):02736         * B has the ASCII representation of something that may or may not be a valid
                      (        forth.asm):02737         * digit, expressed in BASE (alias (byte)UBASE+1). If it does, multiply D1 by
                      (        forth.asm):02738         * BASE and add that to D1 (aka D2 on exit). Then add DIGIT on the top of it.
F384 C030             (        forth.asm):02739 (2)             subb    #'0             Minimal ASCII value condition met?
F386 255B             (        forth.asm):02740 (3)             blo     @cvoor          No. Out of range. ,X cannot be a valid digit
F388 C10A             (        forth.asm):02741 (2)             cmpb    #10
F38A 2510             (        forth.asm):02742 (3)             blo     @cvnolt         No letter in potential BASE
                      (        forth.asm):02743                 IFEQ    CSSNTVE
F38C C111             (        forth.asm):02744 (2)             cmpb    #'A-'0
F38E 2553             (        forth.asm):02745 (3)             blo     @cvoor          Greater than 9 but lower than A
F390 C131             (        forth.asm):02746 (2)             cmpb    #'a-'0
F392 2506             (        forth.asm):02747 (3)             blo     @cvisuc         Upper case already
F394 C14A             (        forth.asm):02748 (2)             cmpb    #'z-'0
F396 224B             (        forth.asm):02749 (3)             bhi     @cvoor          Definitely out of range
F398 C020             (        forth.asm):02750 (2)             subb    #'a-'A          To upper case
                      (        forth.asm):02751                 ENDC
F39A C007             (        forth.asm):02752 (2)     @cvisuc subb    #'A-':          A-Z to number
F39C D11D             (        forth.asm):02753 (3)     @cvnolt cmpb    UBASE+1         B has a digit. Make sure it's less than BASE
F39E 2443             (        forth.asm):02754 (3)             bhs     @cvoor          Number under scrutiny is >= BASE
F3A0 3278             (        forth.asm):02755 (4+1)           leas    -8,s            Allocate scratch space
F3A2 4F               (        forth.asm):02756 (1)             clra
F3A3 3406             (        forth.asm):02757 (4+2)           pshs    d
                      (        forth.asm):02758         * System and user stack structures are as follows:
                      (        forth.asm):02759         * ,s    current digit (1 cell)
                      (        forth.asm):02760         * 2,s   D0*B (1 cell)
                      (        forth.asm):02761         * 4,s   D1*B (1 cell)
                      (        forth.asm):02762         * 6,s   D2*B (1 cell)
                      (        forth.asm):02763         * 8,s   D3*B (1 cell)
                      (        forth.asm):02764         * 2,u   D1H most significant cell
                      (        forth.asm):02765         * 4,u   D1L least significant cell
F3A5 1F37             (        forth.asm):02766 (4)             tfr     u,v             Backup U
F3A7 3346             (        forth.asm):02767 (4+1)           leau    6,u             Point one byte after D1LL
F3A9 3162             (        forth.asm):02768 (4+1)           leay    2,s             Point to D0*B
F3AB 118604           (        forth.asm):02769 (3)             lde     #4              Four products to go through
F3AE A6C2             (        forth.asm):02770 (4+1)   @cvmul  lda     ,-u
F3B0 D61D             (        forth.asm):02771 (3)             ldb     UBASE+1
F3B2 3D               (        forth.asm):02772 (10)            mul
F3B3 EDA1             (        forth.asm):02773 (5+2)           std     ,y++
F3B5 114A             (        forth.asm):02774 (2)             dece
F3B7 26F5             (        forth.asm):02775 (3)             bne     @cvmul
F3B9 1F73             (        forth.asm):02776 (4)             tfr     v,u             Restore U
F3BB A663             (        forth.asm):02777 (4+1)           lda     3,s
F3BD A745             (        forth.asm):02778 (4+1)           sta     5,u             D1LL
F3BF A662             (        forth.asm):02779 (4+1)           lda     2,s
F3C1 AB65             (        forth.asm):02780 (4+1)           adda    5,s
F3C3 A744             (        forth.asm):02781 (4+1)           sta     4,u             D1LH
F3C5 A664             (        forth.asm):02782 (4+1)           lda     4,s
F3C7 A967             (        forth.asm):02783 (4+1)           adca    7,s
F3C9 A743             (        forth.asm):02784 (4+1)           sta     3,u             D1HL
F3CB A666             (        forth.asm):02785 (4+1)           lda     6,s
F3CD A969             (        forth.asm):02786 (4+1)           adca    9,s
F3CF A742             (        forth.asm):02787 (4+1)           sta     2,u             D1HH
F3D1 EC44             (        forth.asm):02788 (5+1)           ldd     4,u             D1L
F3D3 E3E4             (        forth.asm):02789 (5+0)           addd    ,s              DIGIT
F3D5 ED44             (        forth.asm):02790 (5+1)           std     4,u
F3D7 EC42             (        forth.asm):02791 (5+1)           ldd     2,u             D1H
F3D9 10890000         (        forth.asm):02792 (4)             adcd    #0              Potential carry from lower cell
F3DD ED42             (        forth.asm):02793 (5+1)           std     2,u
F3DF 326A             (        forth.asm):02794 (4+1)           leas    10,s            Release scratch space
F3E1 209D             (        forth.asm):02795 (3)             bra     @cvloop         Here we go again
F3E3 AFC4             (        forth.asm):02796 (5+0)   @cvoor  stx     ,u              Update ADDR2
F3E5 39               (        forth.asm):02797 (4)             rts
                      (        forth.asm):02798         
F3E6 02               (        forth.asm):02799         CVTE    fcb     2
F3E7 233E             (        forth.asm):02800                 fcc     '#>'
F3E9 F36A             (        forth.asm):02801                 fdb     CONVERT
F3EB C7               (        forth.asm):02802                 RFCS
F3EC BDE692           (        forth.asm):02803 (7)             jsr     NPOP
F3EF BDE692           (        forth.asm):02804 (7)             jsr     NPOP            Drop 2 cells from the data stack
F3F2 8E0138           (        forth.asm):02805 (3)             ldx     #PADBUF
F3F5 3610             (        forth.asm):02806                 UCNPUSH
F3F7 BDE1A8           (        forth.asm):02807 (7)             jsr     SLEN
F3FA 1F61             (        forth.asm):02808 (4)             tfr     w,x
F3FC 3610             (        forth.asm):02809                 UCNPUSH
F3FE 39               (        forth.asm):02810 (4)             rts
                      (        forth.asm):02811         
F3FF 04               (        forth.asm):02812         SIGN    fcb     4
F400 5349474E         (        forth.asm):02813                 fcc     'SIGN'
F404 F3E6             (        forth.asm):02814                 fdb     CVTE
F406 C7               (        forth.asm):02815                 RFCS
F407 BDE692           (        forth.asm):02816 (7)             jsr     NPOP
F40A 1F10             (        forth.asm):02817 (4)             tfr     x,d
F40C 104D             (        forth.asm):02818 (2)             tstd
F40E 2C05             (        forth.asm):02819 (3)             bge     @sign1
F410 C62D             (        forth.asm):02820 (2)             ldb     #'-
F412 7EF4CF           (        forth.asm):02821 (3)             jmp     INSBPAD
F415 39               (        forth.asm):02822 (4)     @sign1  rts
                      (        forth.asm):02823         
F416 04               (        forth.asm):02824         HOLD    fcb     4
F417 484F4C44         (        forth.asm):02825                 fcc     'HOLD'
F41B F3FF             (        forth.asm):02826                 fdb     SIGN
F41D C7               (        forth.asm):02827                 RFCS
F41E BDE692           (        forth.asm):02828 (7)             jsr     NPOP
F421 1F10             (        forth.asm):02829 (4)             tfr     x,d
F423 7EF4CF           (        forth.asm):02830 (3)             jmp     INSBPAD         B is inserted at the beginning of PAD.
                      (        forth.asm):02831         
F426 02               (        forth.asm):02832         SHARPS  fcb     2
F427 2353             (        forth.asm):02833                 fcc     '#S'
F429 F416             (        forth.asm):02834                 fdb     HOLD
F42B C7               (        forth.asm):02835                 RFCS
F42C 8601             (        forth.asm):02836 (2)             lda     #1
F42E 972E             (        forth.asm):02837 (3)             sta     CVTFCN          CVT function #1 is #S
F430 2007             (        forth.asm):02838 (3)             bra     CVT0
                      (        forth.asm):02839         
                      (        forth.asm):02840         * Unsigned double on the top of the data stack gets divided by BASE.
                      (        forth.asm):02841         * The division algorithm implemented here is the binary long division.
                      (        forth.asm):02842         * See https://en.wikipedia.org/wiki/Division_algorithm for more information.
                      (        forth.asm):02843         * Remainder (converted to a character) gets prepended to PAD.
F432 01               (        forth.asm):02844         CVT     fcb     1
F433 23               (        forth.asm):02845                 fcc     '#'
F434 F426             (        forth.asm):02846                 fdb     SHARPS
F436 C7               (        forth.asm):02847                 RFCS
F437 0F2E             (        forth.asm):02848 (5)             clr     CVTFCN          CVT function 0 is #
F439 BDE692           (        forth.asm):02849 (7)     CVT0    jsr     NPOP
F43C 1F16             (        forth.asm):02850 (4)             tfr     x,w
F43E BDE692           (        forth.asm):02851 (7)             jsr     NPOP
F441 3410             (        forth.asm):02852 (4+2)   CVT1    pshs    x               Numerator least significant cell
F443 1038             (        forth.asm):02853 (6)             pshsw                   Numerator most significant cell
F445 104F             (        forth.asm):02854 (2)             clrd
F447 3406             (        forth.asm):02855 (4+2)           pshs    d               Quotient low
F449 3406             (        forth.asm):02856 (4+2)           pshs    d               Quotient high
F44B 3406             (        forth.asm):02857 (4+2)           pshs    d               Bitmask low
F44D 10868000         (        forth.asm):02858 (4)             ldw     #$8000          Bitmask high
F451 1038             (        forth.asm):02859 (6)             pshsw
F453 3406             (        forth.asm):02860 (4+2)           pshs    d
                      (        forth.asm):02861         * Stack structure:
                      (        forth.asm):02862         * 1,s   remainder               8 bits (high order byte is zero and unused)
                      (        forth.asm):02863         * 2,s   Bitmask high            16 bits
                      (        forth.asm):02864         * 4,s   Bitmask low             16 bits
                      (        forth.asm):02865         * 6,s   Quotient high           16 bits
                      (        forth.asm):02866         * 8,s   Quotient low            16 bits
                      (        forth.asm):02867         * 10,s  Numerator high          16 bits
                      (        forth.asm):02868         * 12,s  Numerator low           16 bits
                      (        forth.asm):02869         * Denominator is at UBASE+1     8 bits
F455 11C61F           (        forth.asm):02870 (3)             ldf     #31             32 bits to go
F458 6861             (        forth.asm):02871 (6+1)   @cvt1   lsl     1,s             R := R << 1
                      (        forth.asm):02872         * We need to extract bit <f> from the numerator.
F45A 306A             (        forth.asm):02873 (4+1)           leax    10,s            Numerator MSB address
F45C 1FF8             (        forth.asm):02874 (4)             tfr     f,a             Not to alter the stack structure
F45E 44               (        forth.asm):02875 (1)             lsra                    OffsetX: 3 - F >> 3
F45F 44               (        forth.asm):02876 (1)             lsra
F460 44               (        forth.asm):02877 (1)             lsra
F461 C603             (        forth.asm):02878 (2)             ldb     #3
F463 103289           (        forth.asm):02879 (4)             subr    a,b
F466 3A               (        forth.asm):02880 (1)             abx
F467 A684             (        forth.asm):02881 (4+0)           lda     ,x
F469 1FF9             (        forth.asm):02882 (4)             tfr     f,b             Bitno: F & 7
F46B C407             (        forth.asm):02883 (2)             andb    #7
                      (        forth.asm):02884         * At this point, A has the data we're interested in. B has the bit number.
F46D 5D               (        forth.asm):02885 (1)     @cvtex  tstb
F46E 2704             (        forth.asm):02886 (3)             beq     @cvtfnd         Bit 0 of A has the data
F470 44               (        forth.asm):02887 (1)             lsra
F471 5A               (        forth.asm):02888 (1)             decb
F472 20F9             (        forth.asm):02889 (3)             bra     @cvtex
F474 8401             (        forth.asm):02890 (2)     @cvtfnd anda    #1
F476 AA61             (        forth.asm):02891 (4+1)           ora     1,s             R(0) := N(i)
F478 A761             (        forth.asm):02892 (4+1)           sta     1,s             Update the remainder
F47A 911D             (        forth.asm):02893 (3)             cmpa    UBASE+1
F47C 2512             (        forth.asm):02894 (3)             blo     @cvt5
F47E 901D             (        forth.asm):02895 (3)             suba    UBASE+1
F480 A761             (        forth.asm):02896 (4+1)           sta     1,s             R := R - D
                      (        forth.asm):02897         * Q(i) := 1 (use the bitmask).
F482 EC66             (        forth.asm):02898 (5+1)           ldd     6,s             Quotient high
F484 10AA62           (        forth.asm):02899 (6+1)           ord     2,s             Bitmask high
F487 ED66             (        forth.asm):02900 (5+1)           std     6,s
F489 EC68             (        forth.asm):02901 (5+1)           ldd     8,s             Quotient low
F48B 10AA64           (        forth.asm):02902 (6+1)           ord     4,s             Bitmask low
F48E ED68             (        forth.asm):02903 (5+1)           std     8,s
                      (        forth.asm):02904         * Shift the bitmask 1 bit right.
F490 EC62             (        forth.asm):02905 (5+1)   @cvt5   ldd     2,s
F492 1044             (        forth.asm):02906 (2)             lsrd
F494 ED62             (        forth.asm):02907 (5+1)           std     2,s
F496 EC64             (        forth.asm):02908 (5+1)           ldd     4,s
F498 1046             (        forth.asm):02909 (2)             rord
F49A ED64             (        forth.asm):02910 (5+1)           std     4,s
F49C 115A             (        forth.asm):02911 (2)             decf
F49E 2CB8             (        forth.asm):02912 (3)             bge     @cvt1
                      (        forth.asm):02913         * Convert the remainder to a digit expressed in BASE.
F4A0 E661             (        forth.asm):02914 (4+1)           ldb     1,s
F4A2 8630             (        forth.asm):02915 (2)             lda     #'0
F4A4 C10A             (        forth.asm):02916 (2)             cmpb    #10             B has the digit we want converted to BASE
F4A6 2502             (        forth.asm):02917 (3)             bcs     @cvtdgt
F4A8 8637             (        forth.asm):02918 (2)             lda     #'A-10
F4AA 103089           (        forth.asm):02919 (4)     @cvtdgt addr    a,b
F4AD 8D20             (        forth.asm):02920 (6)             bsr     INSBPAD         Prepend B to the string currently in PAD
F4AF 0D2E             (        forth.asm):02921 (4)             tst     CVTFCN
F4B1 2711             (        forth.asm):02922 (3)             beq     @cvtend         Function 0 is straight #, i.e. we're done here
                      (        forth.asm):02923         * Function 1 is #S, we iterate unless the quotient is 0.
F4B3 EC68             (        forth.asm):02924 (5+1)           ldd     8,s
F4B5 10AA66           (        forth.asm):02925 (6+1)           ord     6,s
F4B8 270A             (        forth.asm):02926 (3)             beq     @cvtend
F4BA AE68             (        forth.asm):02927 (5+1)           ldx     8,s             New numerator low
F4BC 10A666           (        forth.asm):02928 (6+1)           ldw     6,s             New numerator high
F4BF 326E             (        forth.asm):02929 (4+1)           leas    14,s            Discard the stack frame
F4C1 7EF441           (        forth.asm):02930 (3)             jmp     CVT1            And go at it again
                      (        forth.asm):02931         * Push back the quotient on the data stack (low then high cell).
F4C4 AE68             (        forth.asm):02932 (5+1)   @cvtend ldx     8,s
F4C6 3610             (        forth.asm):02933                 UCNPUSH
F4C8 AE66             (        forth.asm):02934 (5+1)           ldx     6,s
F4CA 326E             (        forth.asm):02935 (4+1)           leas    14,s            Discard the stack frame
F4CC 3610             (        forth.asm):02936                 UCNPUSH
F4CE 39               (        forth.asm):02937 (4)             rts
                      (        forth.asm):02938         
                      (        forth.asm):02939         * Insert the character in B in front of the string at PADBUF.
F4CF 8E0138           (        forth.asm):02940 (3)     INSBPAD ldx     #PADBUF
F4D2 BDE1A8           (        forth.asm):02941 (7)             jsr     SLEN
F4D5 103061           (        forth.asm):02942 (4)             addr    w,x             X points to the PAD string's NUL terminator
F4D8 105C             (        forth.asm):02943 (2)             incw                    Include the terminator
F4DA 3101             (        forth.asm):02944 (4+1)           leay    1,x
F4DC 113912           (        forth.asm):02945 (6+?)           tfm     x-,y-
F4DF D738             (        forth.asm):02946 (3)             stb     PADBUF
F4E1 39               (        forth.asm):02947 (4)             rts
                      (        forth.asm):02948         
F4E2 02               (        forth.asm):02949         CVTB    fcb     2
F4E3 3C23             (        forth.asm):02950                 fcc     '<#'
F4E5 F432             (        forth.asm):02951                 fdb     CVT
F4E7 C7               (        forth.asm):02952                 RFCS
F4E8 BDE2A4           (        forth.asm):02953 (7)             jsr     CKBASE          Sanity check. BASE can be altered at any time
F4EB 0F38             (        forth.asm):02954 (5)             clr     PADBUF
F4ED 39               (        forth.asm):02955 (4)             rts
                      (        forth.asm):02956         
F4EE 01               (        forth.asm):02957         DOT     fcb     1               79-STANDARD (REQ193)
F4EF 2E               (        forth.asm):02958                 fcc     '.'
F4F0 F4E2             (        forth.asm):02959                 fdb     CVTB
F4F2 C7               (        forth.asm):02960                 RFCS
F4F3 8601             (        forth.asm):02961 (2)             lda     #1
F4F5 9730             (        forth.asm):02962 (3)             sta     CVISSGN         Force a signed number conversion
F4F7 BDE692           (        forth.asm):02963 (7)     ptop0   jsr     NPOP
F4FA BDE316           (        forth.asm):02964 (7)             jsr     CVNSTR
F4FD 8E039E           (        forth.asm):02965 (3)             ldx     #TBUFF
F500 8620             (        forth.asm):02966 (2)             lda     #SP
F502 A180             (        forth.asm):02967 (4+1)   @ptop1  cmpa    ,x+             Skip leading spaces
F504 27FC             (        forth.asm):02968 (3)             beq     @ptop1
F506 301F             (        forth.asm):02969 (4+1)           leax    -1,x            Point to actual string start address
F508 BDE1DB           (        forth.asm):02970 (7)             jsr     PUTS
F50B 7EE1B7           (        forth.asm):02971 (3)             jmp     PUTCH           Extra space after printing a number
                      (        forth.asm):02972         
F50E 02               (        forth.asm):02973         UDOT    fcb     2               79-STANDARD (REQ106)
F50F 552E             (        forth.asm):02974                 fcc     'U.'
F511 F4EE             (        forth.asm):02975                 fdb     DOT
F513 C7               (        forth.asm):02976                 RFCS
F514 0F30             (        forth.asm):02977 (5)             clr     CVISSGN         Conversion is unsigned
F516 20DF             (        forth.asm):02978 (3)             bra     ptop0
                      (        forth.asm):02979         
F518 02               (        forth.asm):02980         DOTR    fcb     2               79-STANDARD (REF)
F519 2E52             (        forth.asm):02981                 fcc     '.R'
F51B F50E             (        forth.asm):02982                 fdb     UDOT
F51D C7               (        forth.asm):02983                 RFCS
F51E 8601             (        forth.asm):02984 (2)             lda     #1
F520 9730             (        forth.asm):02985 (3)             sta     CVISSGN
F522 BDE692           (        forth.asm):02986 (7)     DOTR0   jsr     NPOP
F525 3410             (        forth.asm):02987 (4+2)           pshs    x               Length parameter value
F527 BDE692           (        forth.asm):02988 (7)             jsr     NPOP
F52A BDE316           (        forth.asm):02989 (7)             jsr     CVNSTR
F52D 8E039E           (        forth.asm):02990 (3)             ldx     #TBUFF
F530 8620             (        forth.asm):02991 (2)             lda     #SP
F532 A180             (        forth.asm):02992 (4+1)   @dotr1  cmpa    ,x+
F534 27FC             (        forth.asm):02993 (3)             beq     @dotr1          Skip leading spaces
F536 301F             (        forth.asm):02994 (4+1)           leax    -1,x
F538 BDE1A8           (        forth.asm):02995 (7)             jsr     SLEN            String length is returned in W
F53B 3506             (        forth.asm):02996 (4+2)           puls    d
F53D 1E06             (        forth.asm):02997 (5)             exg     d,w
F53F 103206           (        forth.asm):02998 (4)             subr    d,w
F542 2F0D             (        forth.asm):02999 (3)             ble     @dotr3
F544 8620             (        forth.asm):03000 (2)             lda     #SP
F546 105D             (        forth.asm):03001 (2)     @dotr2  tstw
F548 2707             (        forth.asm):03002 (3)             beq     @dotr3
F54A BDE1B7           (        forth.asm):03003 (7)             jsr     PUTCH
F54D 105A             (        forth.asm):03004 (2)             decw
F54F 20F5             (        forth.asm):03005 (3)             bra     @dotr2
F551 7EE1DB           (        forth.asm):03006 (3)     @dotr3  jmp     PUTS
                      (        forth.asm):03007         
F554 03               (        forth.asm):03008         UDOTR   fcb     3               79-STANDARD (REF216)
F555 552E52           (        forth.asm):03009                 fcc     'U.R'
F558 F518             (        forth.asm):03010                 fdb     DOTR
F55A C7               (        forth.asm):03011                 RFCS
F55B 0F30             (        forth.asm):03012 (5)             clr     CVISSGN
F55D 20C3             (        forth.asm):03013 (3)             bra     DOTR0
                      (        forth.asm):03014         
F55F 02               (        forth.asm):03015         BL      fcb     2               79-STANDARD (REF176)
F560 424C             (        forth.asm):03016                 fcc     'BL'
F562 F554             (        forth.asm):03017                 fdb     UDOTR
F564 C7               (        forth.asm):03018                 RFCS
F565 8E0020           (        forth.asm):03019 (3)             ldx     #SP
F568 7EE684           (        forth.asm):03020 (3)             jmp     NPUSH
                      (        forth.asm):03021         
F56B 05               (        forth.asm):03022         SPACE   fcb     5               79-STANDARD (REQ232)
F56C 5350414345       (        forth.asm):03023                 fcc     'SPACE'
F571 F55F             (        forth.asm):03024                 fdb     BL
F573 C7               (        forth.asm):03025                 RFCS
F574 8620             (        forth.asm):03026 (2)             lda     #SP
F576 7EE1B7           (        forth.asm):03027 (3)             jmp     PUTCH
                      (        forth.asm):03028         
F579 06               (        forth.asm):03029         SPACES  fcb     6               79-STANDARD (REQ231)
F57A 535041434553     (        forth.asm):03030                 fcc     'SPACES'
F580 F56B             (        forth.asm):03031                 fdb     SPACE
F582 C7               (        forth.asm):03032                 RFCS
F583 BDE692           (        forth.asm):03033 (7)             jsr     NPOP
F586 1F16             (        forth.asm):03034 (4)             tfr     x,w
F588 8620             (        forth.asm):03035 (2)             lda     #SP
F58A BDE1B7           (        forth.asm):03036 (7)     @spcs1  jsr     PUTCH
F58D 105A             (        forth.asm):03037 (2)             decw
F58F 26F9             (        forth.asm):03038 (3)             bne     @spcs1
F591 39               (        forth.asm):03039 (4)             rts
                      (        forth.asm):03040         
F592 04               (        forth.asm):03041         PAGE    fcb     4               79-STANDARD (REF)
F593 50414745         (        forth.asm):03042                 fcc     'PAGE'
F597 F579             (        forth.asm):03043                 fdb     SPACES
F599 C7               (        forth.asm):03044                 RFCS
F59A 8EFDE0           (        forth.asm):03045 (3)             ldx     #CSVT100
F59D 7EE1DB           (        forth.asm):03046 (3)             jmp     PUTS
                      (        forth.asm):03047         
F5A0 02               (        forth.asm):03048         CRLF    fcb     2               79-STANDARD (REQ160)
F5A1 4352             (        forth.asm):03049                 fcc     'CR'
F5A3 F592             (        forth.asm):03050                 fdb     PAGE
F5A5 C7               (        forth.asm):03051                 RFCS
F5A6 7EE1E8           (        forth.asm):03052 (3)             jmp     PUTCR
                      (        forth.asm):03053         
F5A9 03               (        forth.asm):03054         PAD     fcb     3               79-STANDARD (REQ226)
F5AA 504144           (        forth.asm):03055                 fcc     'PAD'
F5AD F5A0             (        forth.asm):03056                 fdb     CRLF
F5AF C7               (        forth.asm):03057                 RFCS
F5B0 8E0138           (        forth.asm):03058 (3)             ldx     #PADBUF
F5B3 7EE684           (        forth.asm):03059 (3)             jmp     NPUSH
                      (        forth.asm):03060         
F5B6 04               (        forth.asm):03061         TYPE    fcb     4               79-STANDARD (REQ222)
F5B7 54595045         (        forth.asm):03062                 fcc     'TYPE'          ( addr bcount -- )
F5BB F5A9             (        forth.asm):03063                 fdb     PAD
F5BD C7               (        forth.asm):03064                 RFCS
F5BE BDE692           (        forth.asm):03065 (7)             jsr     NPOP            Character count (signed)
F5C1 1F16             (        forth.asm):03066 (4)             tfr     x,w
F5C3 BDE692           (        forth.asm):03067 (7)             jsr     NPOP            Buffer address
F5C6 105D             (        forth.asm):03068 (2)             tstw                    
F5C8 2E01             (        forth.asm):03069 (3)     @type0  bgt     @type1
F5CA 39               (        forth.asm):03070 (4)             rts
F5CB A680             (        forth.asm):03071 (4+1)   @type1  lda     ,x+
F5CD BDE1B7           (        forth.asm):03072 (7)             jsr     PUTCH
F5D0 105A             (        forth.asm):03073 (2)             decw
F5D2 20F4             (        forth.asm):03074 (3)             bra     @type0
                      (        forth.asm):03075         
F5D4 05               (        forth.asm):03076         COUNT   fcb     5               79-STANDARD (REQ159)
F5D5 434F554E54       (        forth.asm):03077                 fcc     'COUNT'
F5DA F5B6             (        forth.asm):03078                 fdb     TYPE
F5DC C7               (        forth.asm):03079                 RFCS
F5DD BDE692           (        forth.asm):03080 (7)             jsr     NPOP
F5E0 E680             (        forth.asm):03081 (4+1)           ldb     ,x+
F5E2 3610             (        forth.asm):03082                 UCNPUSH                 B is preserved
F5E4 4F               (        forth.asm):03083 (1)             clra
F5E5 1F01             (        forth.asm):03084 (4)             tfr     d,x
F5E7 7EE684           (        forth.asm):03085 (3)             jmp     NPUSH
                      (        forth.asm):03086         
F5EA 09               (        forth.asm):03087         DASHTR  fcb     9               79-STANDARD (REQ148)
F5EB 2D545241494C494E (        forth.asm):03088                 fcc     '-TRAILING'     ( addr n1 -- addr n2 )
     47
F5F4 F5D4             (        forth.asm):03089                 fdb     COUNT
F5F6 C7               (        forth.asm):03090                 RFCS
F5F7 BDE692           (        forth.asm):03091 (7)             jsr     NPOP            N1 to X
F5FA 1F10             (        forth.asm):03092 (4)             tfr     x,d             N1 to D
F5FC BDE692           (        forth.asm):03093 (7)             jsr     NPOP            ADDR to X
F5FF 1F12             (        forth.asm):03094 (4)             tfr     x,y             Backup to I
F601 104D             (        forth.asm):03095 (2)             tstd                    Input character count (N1)
F603 2D1B             (        forth.asm):03096 (3)             blt     @invpar         Cannot be < 0
F605 308B             (        forth.asm):03097 (4+2)           leax    d,x             X has ADDR+N1
F607 1F06             (        forth.asm):03098 (4)             tfr     d,w             W has N1
F609 105D             (        forth.asm):03099 (2)     @cknxtb tstw
F60B 270A             (        forth.asm):03100 (3)             beq     @ckdone
F60D A682             (        forth.asm):03101 (4+1)           lda     ,-x
F60F 105A             (        forth.asm):03102 (2)             decw
F611 8120             (        forth.asm):03103 (2)             cmpa    #SP
F613 27F4             (        forth.asm):03104 (3)             beq     @cknxtb         Iterate over to the previous byte
F615 105C             (        forth.asm):03105 (2)             incw
F617 1F21             (        forth.asm):03106 (4)     @ckdone tfr     y,x
F619 3610             (        forth.asm):03107                 UCNPUSH                 String base address
F61B 1F61             (        forth.asm):03108 (4)             tfr     w,x
F61D 3610             (        forth.asm):03109                 UCNPUSH                 Updated character count
F61F 39               (        forth.asm):03110 (4)             rts
F620 C60D             (        forth.asm):03111 (2)     @invpar ldb     #13             Invalid parameter
F622 BDE60B           (        forth.asm):03112 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):03113         
F625 06               (        forth.asm):03114         EXPECT  fcb     6               79-STANDARD (REQ189)
F626 455850454354     (        forth.asm):03115                 fcc     'EXPECT'        ( addr count -- )
F62C F5EA             (        forth.asm):03116                 fdb     DASHTR
F62E C7               (        forth.asm):03117                 RFCS
F62F BDE692           (        forth.asm):03118 (7)             jsr     NPOP
F632 1F10             (        forth.asm):03119 (4)             tfr     x,d             Buffer length to B
F634 BDE692           (        forth.asm):03120 (7)             jsr     NPOP            Buffer address to X. B is preserved
F637 5D               (        forth.asm):03121 (1)             tstb
F638 2701             (        forth.asm):03122 (3)             beq     @expct1
F63A 5C               (        forth.asm):03123 (1)             incb                    Account for the NUL terminator
F63B 7EE1FE           (        forth.asm):03124 (3)     @expct1 jmp     GETS
                      (        forth.asm):03125         
F63E 49               (        forth.asm):03126         TERPRET fcb     $49             79-STANDARD (REF) I make this compile time only
F63F 494E544552505245 (        forth.asm):03127                 fcc     'INTERPRET'     ( -- )
     54
F648 F625             (        forth.asm):03128                 fdb     EXPECT
F64A C7               (        forth.asm):03129                 RFCS
                      (        forth.asm):03130         * Obtain a base buffer address based on the value of BLK.
F64B DC22             (        forth.asm):03131 (4)             ldd     UBLK
F64D 2605             (        forth.asm):03132 (3)             bne     @notser
F64F 8E02CA           (        forth.asm):03133 (3)             ldx     #CMDBUF         Base buffer address for serial line input
F652 200A             (        forth.asm):03134 (3)             bra     @rsolvd
                      (        forth.asm):03135         * BLK is NZ, map the block in memory.
F654 1F01             (        forth.asm):03136 (4)     @notser tfr     d,x             Block number to X
F656 BDE684           (        forth.asm):03137 (7)             jsr     NPUSH
F659 BDE8E4           (        forth.asm):03138                 RFXT    jsr,BLOCK+8     XT for BLOCK. Map the block in
F65C 3710             (        forth.asm):03139                 UCNPOP                  Retrieve buffer address (to X)
                      (        forth.asm):03140         * Note: >IN is supposed to have been set by the caller!
F65E 9F26             (        forth.asm):03141 (4)     @rsolvd stx     BSBFADR
F660 DC20             (        forth.asm):03142 (4)             ldd     UTOIN
F662 103001           (        forth.asm):03143 (4)             addr    d,x
F665 7EE0C0           (        forth.asm):03144 (3)             jmp     _INTERP         Finally invoke _INTERP.
                      (        forth.asm):03145         
F668 04               (        forth.asm):03146         LOAD    fcb     4               79-STANDARD (REQ202)
F669 4C4F4144         (        forth.asm):03147                 fcc     'LOAD'          ( blk -- )
F66D F63E             (        forth.asm):03148                 fdb     TERPRET
F66F C7               (        forth.asm):03149                 RFCS
F670 BDE692           (        forth.asm):03150 (7)             jsr     NPOP
F673 1037C1           (        forth.asm):03151 (4)             cmpr    0,x
F676 2601             (        forth.asm):03152 (3)             bne     LOAD1
F678 39               (        forth.asm):03153 (4)             rts                     Block 0 is _not_ loadable
F679 3410             (        forth.asm):03154 (4+2)   LOAD1   pshs    x
F67B 9E22             (        forth.asm):03155 (4)             ldx     UBLK
F67D BDE6A1           (        forth.asm):03156 (7)             jsr     RPUSH           Push BLK on the return stack
F680 9E20             (        forth.asm):03157 (4)             ldx     UTOIN
F682 BDE6A1           (        forth.asm):03158 (7)             jsr     RPUSH           Push >IN on the return stack
F685 3510             (        forth.asm):03159 (4+2)           puls    x
F687 9F22             (        forth.asm):03160 (4)             stx     UBLK            Update BLK with the LOAD argument
F689 104F             (        forth.asm):03161 (2)             clrd
F68B DD20             (        forth.asm):03162 (4)             std     UTOIN           Clear >IN
                      (        forth.asm):03163         * Map the new BLK in, interpret code from there.
F68D 8DBC             (        forth.asm):03164                 RFXT    bsr,TERPRET+12  XT for INTERPRET
F68F BDE6BF           (        forth.asm):03165 (7)             jsr     RPOP
F692 9F20             (        forth.asm):03166 (4)             stx     UTOIN           Restore >IN from the return stack
F694 BDE6BF           (        forth.asm):03167 (7)             jsr     RPOP
F697 9F22             (        forth.asm):03168 (4)             stx     UBLK            Restore BLK from the return stack
F699 7EE6D8           (        forth.asm):03169 (3)             jmp     BKIN2PT         Map BLK in (if needed) and update BSBFADR
                      (        forth.asm):03170         
F69C 04               (        forth.asm):03171         THRU    fcb     4               79-STANDARD (REF)
F69D 54485255         (        forth.asm):03172                 fcc     'THRU'          ( lowblk highblk -- )
F6A1 F668             (        forth.asm):03173                 fdb     LOAD
F6A3 C7               (        forth.asm):03174                 RFCS
F6A4 BDE692           (        forth.asm):03175 (7)             jsr     NPOP
F6A7 1F12             (        forth.asm):03176 (4)             tfr     x,y             Y has highblk
F6A9 BDE692           (        forth.asm):03177 (7)             jsr     NPOP            X has lowblk--both are unsigned numbers
F6AC 103712           (        forth.asm):03178 (4)     @thrlop cmpr    x,y
F6AF 2401             (        forth.asm):03179 (3)             bhs     @cont           Limit is >= to the loop index
F6B1 39               (        forth.asm):03180 (4)             rts
F6B2 3430             (        forth.asm):03181 (4+4)   @cont   pshs    x,y             Backup loop parameters
F6B4 3610             (        forth.asm):03182                 UCNPUSH                 Current block number to the data stack
F6B6 8DB8             (        forth.asm):03183                 RFXT    bsr,LOAD+7      XT for LOAD
F6B8 3530             (        forth.asm):03184 (4+4)           puls    y,x             Retrieve loop parameters
F6BA 3001             (        forth.asm):03185 (4+1)           leax    1,x             Iterate over to the next screen
F6BC 20EE             (        forth.asm):03186 (3)             bra     @thrlop
                      (        forth.asm):03187         
F6BE 83               (        forth.asm):03188         NXTBLK  fcb     $83             79-STANDARD (REF131)
F6BF 2D2D3E           (        forth.asm):03189                 fcc     '-->'           ( -- )
F6C2 F69C             (        forth.asm):03190                 fdb     THRU
F6C4 C7               (        forth.asm):03191                 RFCS
F6C5 9E22             (        forth.asm):03192 (4)             ldx     UBLK
F6C7 3001             (        forth.asm):03193 (4+1)           leax    1,x
F6C9 DC22             (        forth.asm):03194 (4)     NXTBLK1 ldd     UBLK
F6CB 2603             (        forth.asm):03195 (3)             bne     @nfrmb0         Not invoked from block 0 (the console)
                      (        forth.asm):03196         * --> or CONTINUED are being invoked from the console. Flag that condition
                      (        forth.asm):03197         * as a hint to the interpreter so that feedback is provided even if we are
                      (        forth.asm):03198         * back from a block.
F6CD 4C               (        forth.asm):03199 (1)             inca                    1 to A
F6CE 9734             (        forth.asm):03200 (3)             sta     NBCTFB0
F6D0 9F22             (        forth.asm):03201 (4)     @nfrmb0 stx     UBLK            Update BLK
F6D2 104F             (        forth.asm):03202 (2)             clrd
F6D4 DD20             (        forth.asm):03203 (4)             std     UTOIN           0 >IN !
                      (        forth.asm):03204         * Map the new BLK in, interpret code from there.
F6D6 7EF64B           (        forth.asm):03205                 RFXT    jmp,TERPRET+12  XT for INTERPRET
                      (        forth.asm):03206         
F6D9 89               (        forth.asm):03207         CONTIND fcb     $89             79-STANDARD (REF)
F6DA 434F4E54494E5545 (        forth.asm):03208                 fcc     'CONTINUED'     ( nextblk -- )
     44
F6E3 F6BE             (        forth.asm):03209                 fdb     NXTBLK
F6E5 C7               (        forth.asm):03210                 RFCS
F6E6 BDE692           (        forth.asm):03211 (7)             jsr     NPOP            NEXTBLK to X
F6E9 1037C1           (        forth.asm):03212 (4)             cmpr    0,x             Cannot interpret from block 0!
F6EC 26DB             (        forth.asm):03213 (3)             bne     NXTBLK1
F6EE C60D             (        forth.asm):03214 (2)             ldb     #13             Illegal argument
F6F0 BDE60B           (        forth.asm):03215 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):03216         
F6F3 02               (        forth.asm):03217         MILLIS  fcb     2               79-STANDARD (REF)
F6F4 4D53             (        forth.asm):03218                 fcc     'MS'            ( mscount -- )
F6F6 F6D9             (        forth.asm):03219                 fdb     CONTIND
F6F8 C7               (        forth.asm):03220                 RFCS
F6F9 BDE692           (        forth.asm):03221 (7)             jsr     NPOP
F6FC 1037C1           (        forth.asm):03222 (4)             cmpr    0,x
F6FF 2601             (        forth.asm):03223 (3)             bne     MILLIS1
F701 39               (        forth.asm):03224 (4)             rts
F702 CC03E2           (        forth.asm):03225 (3)     MILLIS1 ldd     #MSLCNT
F705 104A             (        forth.asm):03226 (2)     @ms2    decd
F707 26FC             (        forth.asm):03227 (3)             bne     @ms2
F709 301F             (        forth.asm):03228 (4+1)           leax    -1,x
F70B 26F5             (        forth.asm):03229 (3)             bne     MILLIS1
F70D 39               (        forth.asm):03230 (4)             rts
                      (        forth.asm):03231         
F70E 04               (        forth.asm):03232         KEYP    fcb     4               ANSI (Facility)
F70F 4B45593F         (        forth.asm):03233                 fcc     'KEY?'          ( -- flag )
F713 F6F3             (        forth.asm):03234                 fdb     MILLIS
F715 C7               (        forth.asm):03235                 RFCS
F716 1FC1             (        forth.asm):03236 (4)             tfr     0,x
F718 8615             (        forth.asm):03237 (2)             lda     #ACIRTS0
F71A B7D800           (        forth.asm):03238 (4)             sta     ACIACTL         Assert RTS
F71D 8E0028           (        forth.asm):03239 (3)             ldx     #40
F720 8DE0             (        forth.asm):03240 (6)             bsr     MILLIS1         Wait for 40 milliseconds
                      (        forth.asm):03241         * X is guaranteed to be 0 upon return from MILLIS1.
F722 8601             (        forth.asm):03242 (2)             lda     #ACIRDRF
F724 B5D800           (        forth.asm):03243 (4)             bita    ACIACTL
F727 2702             (        forth.asm):03244 (3)             beq     @keyp1
F729 3001             (        forth.asm):03245 (4+1)           leax    1,x             Return the 79-STANDARD true flag
F72B 8655             (        forth.asm):03246 (2)     @keyp1  lda     #ACIRTS1
F72D B7D800           (        forth.asm):03247 (4)             sta     ACIACTL         Negate RTS
F730 7EE684           (        forth.asm):03248 (3)             jmp     NPUSH
                      (        forth.asm):03249         
F733 03               (        forth.asm):03250         KEY     fcb     3               79-STANDARD (REQ100)
F734 4B4559           (        forth.asm):03251                 fcc     'KEY'
F737 F70E             (        forth.asm):03252                 fdb     KEYP
F739 C7               (        forth.asm):03253                 RFCS
F73A BDE1C6           (        forth.asm):03254 (7)             jsr     GETCH
F73D 1F89             (        forth.asm):03255 (4)             tfr     a,b
F73F 4F               (        forth.asm):03256 (1)             clra
F740 1F01             (        forth.asm):03257 (4)             tfr     d,x
F742 7EE684           (        forth.asm):03258 (3)             jmp     NPUSH
                      (        forth.asm):03259         
F745 04               (        forth.asm):03260         EMIT    fcb     4               79-STANDARD (REQ207)
F746 454D4954         (        forth.asm):03261                 fcc     'EMIT'
F74A F733             (        forth.asm):03262                 fdb     KEY
F74C C7               (        forth.asm):03263                 RFCS
F74D BDE692           (        forth.asm):03264 (7)             jsr     NPOP
F750 1F10             (        forth.asm):03265 (4)             tfr     x,d
F752 1F98             (        forth.asm):03266 (4)             tfr     b,a
F754 7EE1B7           (        forth.asm):03267 (3)             jmp     PUTCH
                      (        forth.asm):03268         
F757 01               (        forth.asm):03269         PLUS    fcb     1               79-STANDARD (REQ121)
F758 2B               (        forth.asm):03270                 fcc     '+'             ( n1 n2 -- sum )
F759 F745             (        forth.asm):03271                 fdb     EMIT
F75B C7               (        forth.asm):03272                 RFCS
F75C CC0246BDE30B     (        forth.asm):03273                 MINDREQ 2               We need at least two cells stacked up
F762 EC42             (        forth.asm):03274 (5+1)           ldd     2,u             N1
F764 E3C4             (        forth.asm):03275 (5+0)           addd    ,u              N2
F766 ED42             (        forth.asm):03276 (5+1)           std     2,u             SUM
F768 3342             (        forth.asm):03277 (4+1)           leau    2,u             Drop the top cell
F76A 39               (        forth.asm):03278 (4)             rts
                      (        forth.asm):03279         
F76B 02               (        forth.asm):03280         ONEP    fcb     2               79-STANDARD (REQ107)
F76C 312B             (        forth.asm):03281                 fcc     '1+'
F76E F757             (        forth.asm):03282                 fdb     PLUS
F770 C7               (        forth.asm):03283                 RFCS
F771 CC0248BDE30B     (        forth.asm):03284                 MINDREQ 1               We need at least one cell stacked up
F777 ECC4             (        forth.asm):03285 (5+0)           ldd     ,u
F779 104C             (        forth.asm):03286 (2)             incd
F77B EDC4             (        forth.asm):03287 (5+0)           std     ,u
F77D 39               (        forth.asm):03288 (4)             rts
                      (        forth.asm):03289         
F77E 02               (        forth.asm):03290         TWOP    fcb     2               79-STANDARD (REQ135)
F77F 322B             (        forth.asm):03291                 fcc     '2+'            ( n -- n+2 )
F781 F76B             (        forth.asm):03292                 fdb     ONEP
F783 C7               (        forth.asm):03293                 RFCS
F784 CC0248BDE30B     (        forth.asm):03294                 MINDREQ 1
F78A ECC4             (        forth.asm):03295 (5+0)           ldd     ,u
F78C C30002           (        forth.asm):03296 (3)             addd    #2
F78F EDC4             (        forth.asm):03297 (5+0)           std     ,u
F791 39               (        forth.asm):03298 (4)             rts
                      (        forth.asm):03299         
F792 01               (        forth.asm):03300         MINUS   fcb     1               79-STANDARD (REQ134)
F793 2D               (        forth.asm):03301                 fcc     '-'             ( n1 n2 -- dif )
F794 F77E             (        forth.asm):03302                 fdb     TWOP
F796 C7               (        forth.asm):03303                 RFCS
F797 CC0246BDE30B     (        forth.asm):03304                 MINDREQ 2               We need at least two cells stacked up
F79D EC42             (        forth.asm):03305 (5+1)           ldd     2,u             N1
F79F A3C4             (        forth.asm):03306 (5+0)           subd    ,u              N2
F7A1 ED42             (        forth.asm):03307 (5+1)           std     2,u             DIF
F7A3 3342             (        forth.asm):03308 (4+1)           leau    2,u             Drop the top cell
F7A5 39               (        forth.asm):03309 (4)             rts
                      (        forth.asm):03310         
F7A6 02               (        forth.asm):03311         ONEM    fcb     2               79-STANDARD (REQ105)
F7A7 312D             (        forth.asm):03312                 fcc     '1-'
F7A9 F792             (        forth.asm):03313                 fdb     MINUS
F7AB C7               (        forth.asm):03314                 RFCS
F7AC CC0248BDE30B     (        forth.asm):03315                 MINDREQ 1               We need at least one cell stacked up
F7B2 ECC4             (        forth.asm):03316 (5+0)           ldd     ,u
F7B4 104A             (        forth.asm):03317 (2)             decd
F7B6 EDC4             (        forth.asm):03318 (5+0)           std     ,u
F7B8 39               (        forth.asm):03319 (4)             rts
                      (        forth.asm):03320         
F7B9 02               (        forth.asm):03321         TWOM    fcb     2               79-STANDARD (REQ129)
F7BA 322D             (        forth.asm):03322                 fcc     '2-'
F7BC F7A6             (        forth.asm):03323                 fdb     ONEM
F7BE C7               (        forth.asm):03324                 RFCS
F7BF CC0248BDE30B     (        forth.asm):03325                 MINDREQ 1               We need at least one cell stacked up
F7C5 ECC4             (        forth.asm):03326 (5+0)           ldd     ,u
F7C7 830002           (        forth.asm):03327 (3)             subd    #2
F7CA EDC4             (        forth.asm):03328 (5+0)           std     ,u
F7CC 39               (        forth.asm):03329 (4)             rts
                      (        forth.asm):03330         
F7CD 01               (        forth.asm):03331         ZEROL   fcb     1               Non-standard
F7CE 30               (        forth.asm):03332                 fcc     '0'
F7CF F7B9             (        forth.asm):03333                 fdb     TWOM
F7D1 C7               (        forth.asm):03334                 RFCS
F7D2 1FC1             (        forth.asm):03335 (4)             tfr     0,x
F7D4 7EE684           (        forth.asm):03336 (3)             jmp     NPUSH
                      (        forth.asm):03337         
F7D7 01               (        forth.asm):03338         ONEL    fcb     1               Non-standard
F7D8 31               (        forth.asm):03339                 fcc     '1'
F7D9 F7CD             (        forth.asm):03340                 fdb     ZEROL
F7DB C7               (        forth.asm):03341                 RFCS
F7DC 8E0001           (        forth.asm):03342 (3)             ldx     #1
F7DF 7EE684           (        forth.asm):03343 (3)             jmp     NPUSH
                      (        forth.asm):03344         
F7E2 01               (        forth.asm):03345         TWOL    fcb     1               Non-standard
F7E3 32               (        forth.asm):03346                 fcc     '2'
F7E4 F7D7             (        forth.asm):03347                 fdb     ONEL
F7E6 C7               (        forth.asm):03348                 RFCS
F7E7 8E0002           (        forth.asm):03349 (3)             ldx     #2
F7EA 7EE684           (        forth.asm):03350 (3)             jmp     NPUSH
                      (        forth.asm):03351         
F7ED 05               (        forth.asm):03352         SHIFT   fcb     5               79-STANDARD (Ref)
F7EE 5348494654       (        forth.asm):03353                 fcc     'SHIFT'
F7F3 F7E2             (        forth.asm):03354                 fdb     TWOL
F7F5 C7               (        forth.asm):03355                 RFCS
F7F6 CC0246BDE30B     (        forth.asm):03356                 MINDREQ 2               Two cells need to be stacked up
F7FC 10A6C4           (        forth.asm):03357 (6+0)           ldw     ,u              Shift bitcount
F7FF EC42             (        forth.asm):03358 (5+1)           ldd     2,u             The data itself
F801 105D             (        forth.asm):03359 (2)     @shftlp tstw
F803 270E             (        forth.asm):03360 (3)             beq     @shfdon
F805 2D06             (        forth.asm):03361 (3)             blt     @shftrg
F807 1048             (        forth.asm):03362 (2)             lsld                    Shift left (W is positive)
F809 105A             (        forth.asm):03363 (2)             decw
F80B 20F4             (        forth.asm):03364 (3)             bra     @shftlp
F80D 1044             (        forth.asm):03365 (2)     @shftrg lsrd                    Shift right (W is negative)
F80F 105C             (        forth.asm):03366 (2)             incw
F811 20EE             (        forth.asm):03367 (3)             bra     @shftlp
F813 ED42             (        forth.asm):03368 (5+1)   @shfdon std     2,u             Return value stored there
F815 3342             (        forth.asm):03369 (4+1)           leau    2,u             Drop one cell from the data stack
F817 39               (        forth.asm):03370 (4)             rts
                      (        forth.asm):03371         
                      (        forth.asm):03372         * Signed multiplication by hardware support.
F818 01               (        forth.asm):03373         MULT    fcb     1               79-STANDARD (REQ138)
F819 2A               (        forth.asm):03374                 fcc     '*'
F81A F7ED             (        forth.asm):03375                 fdb     SHIFT
F81C C7               (        forth.asm):03376                 RFCS
F81D CC0246BDE30B     (        forth.asm):03377                 MINDREQ 2               Two cells need to be stacked up
F823 EC42             (        forth.asm):03378 (5+1)           ldd     2,u
F825 11AFC4           (        forth.asm):03379 (30+0)          muld    ,u
F828 10A742           (        forth.asm):03380 (6+1)           stw     2,u             Return only the lower 16 bits
F82B 3342             (        forth.asm):03381 (4+1)           leau    2,u             Drop one cell from the data stack
F82D 39               (        forth.asm):03382 (4)             rts
                      (        forth.asm):03383         
F82E 02               (        forth.asm):03384         TWOTIM  fcb     2               79-STANDARD (REF)
F82F 322A             (        forth.asm):03385                 fcc     '2*'
F831 F818             (        forth.asm):03386                 fdb     MULT
F833 C7               (        forth.asm):03387                 RFCS
F834 CC0248BDE30B     (        forth.asm):03388                 MINDREQ 1               One cell needs to be stacked up
F83A ECC4             (        forth.asm):03389 (5+0)           ldd     ,u
F83C 1048             (        forth.asm):03390 (2)             asld
F83E EDC4             (        forth.asm):03391 (5+0)           std     ,u
F840 39               (        forth.asm):03392 (4)             rts
                      (        forth.asm):03393         
F841 02               (        forth.asm):03394         TWODIV  fcb     2
F842 322F             (        forth.asm):03395                 fcc     '2/'
F844 F82E             (        forth.asm):03396                 fdb     TWOTIM
F846 C7               (        forth.asm):03397                 RFCS
F847 CC0248BDE30B     (        forth.asm):03398                 MINDREQ 1               One cell needs to be stacked up
F84D ECC4             (        forth.asm):03399 (5+0)           ldd     ,u
F84F 1047             (        forth.asm):03400 (2)             asrd
F851 EDC4             (        forth.asm):03401 (5+0)           std     ,u
F853 39               (        forth.asm):03402 (4)             rts
                      (        forth.asm):03403         
                      (        forth.asm):03404         * /, MOD and /MOD are essentially the same function returning
                      (        forth.asm):03405         * the different parts returned by DIVQ.
                      (        forth.asm):03406         * We use a global variable to distinguish which functionality
                      (        forth.asm):03407         * is being requested:
                      (        forth.asm):03408         * 0: return the modulo and the quotient (/MOD).
                      (        forth.asm):03409         * 1: return the modulo only (MOD).
                      (        forth.asm):03410         * 2: return the quotient only (/).
F854 01               (        forth.asm):03411         DIV     fcb     1
F855 2F               (        forth.asm):03412                 fcc     '/'
F856 F841             (        forth.asm):03413                 fdb     TWODIV
F858 C7               (        forth.asm):03414                 RFCS
F859 8602             (        forth.asm):03415 (2)             lda     #2
F85B 972C             (        forth.asm):03416 (3)             sta     DIVFCN
F85D CC0246BDE30B     (        forth.asm):03417         DIV1    MINDREQ 2
                      (        forth.asm):03418         * Division by zero conditions are dealt with through the trap handler.
F863 104F             (        forth.asm):03419 (2)             clrd
F865 10A642           (        forth.asm):03420 (6+1)           ldw     2,u             Numerator
                      (        forth.asm):03421         * We need a sign extention from W to Q. SEX and SEXW do not cut it.
F868 114D             (        forth.asm):03422 (2)             tste
F86A 2A02             (        forth.asm):03423 (3)             bpl     @div2
F86C 1043             (        forth.asm):03424 (2)             comd
F86E 11AEC4           (        forth.asm):03425 (36)    @div2   divq    ,u              Quotient is returned in W, modulo in D
F871 0D2C             (        forth.asm):03426 (4)             tst     DIVFCN
F873 2606             (        forth.asm):03427 (3)             bne     @div3
F875 ED42             (        forth.asm):03428 (5+1)           std     2,u             Function 0: return the modulo and the quotient
F877 10A7C4           (        forth.asm):03429 (6+0)           stw     ,u
F87A 39               (        forth.asm):03430 (4)             rts
F87B 3342             (        forth.asm):03431 (4+1)   @div3   leau    2,u             Drop one cell from the data stack
F87D 1F07             (        forth.asm):03432 (4)             tfr     d,v             Backup the modulo
F87F 962C             (        forth.asm):03433 (3)             lda     DIVFCN
F881 8101             (        forth.asm):03434 (2)             cmpa    #1
F883 2605             (        forth.asm):03435 (3)             bne     @div4
F885 1F70             (        forth.asm):03436 (4)             tfr     v,d             Restore the modulo
F887 EDC4             (        forth.asm):03437 (5+0)           std     ,u              Function 1: return only the modulo
F889 39               (        forth.asm):03438 (4)             rts
F88A 10A7C4           (        forth.asm):03439 (6+0)   @div4   stw     ,u              Function 2: return only the quotient
F88D 39               (        forth.asm):03440 (4)             rts
                      (        forth.asm):03441         
F88E 03               (        forth.asm):03442         MOD     fcb     3
F88F 4D4F44           (        forth.asm):03443                 fcc     'MOD'
F892 F854             (        forth.asm):03444                 fdb     DIV
F894 C7               (        forth.asm):03445                 RFCS
F895 8601             (        forth.asm):03446 (2)             lda     #1
F897 972C             (        forth.asm):03447 (3)             sta     DIVFCN
F899 20C2             (        forth.asm):03448 (3)             bra     DIV1
                      (        forth.asm):03449         
F89B 04               (        forth.asm):03450         MDIV    fcb     4
F89C 2F4D4F44         (        forth.asm):03451                 fcc     '/MOD'
F8A0 F88E             (        forth.asm):03452                 fdb     MOD
F8A2 C7               (        forth.asm):03453                 RFCS
F8A3 0F2C             (        forth.asm):03454 (5)             clr     DIVFCN
F8A5 20B6             (        forth.asm):03455 (3)             bra     DIV1
                      (        forth.asm):03456         
F8A7 02               (        forth.asm):03457         STRSLSH fcb     2
F8A8 2A2F             (        forth.asm):03458                 fcc     '*/'            ( n1 n2 n3 -- n4 [n5] )
F8AA F89B             (        forth.asm):03459                 fdb     MDIV
F8AC C7               (        forth.asm):03460                 RFCS
F8AD 8601             (        forth.asm):03461 (2)             lda     #1
F8AF 972D             (        forth.asm):03462 (3)             sta     STSLFCN
F8B1 CC0244BDE30B     (        forth.asm):03463         STRSL1  MINDREQ 3
                      (        forth.asm):03464         * Division by zero conditions are dealt with through the trap handler.
F8B7 EC44             (        forth.asm):03465 (5+1)           ldd     4,u             N1
F8B9 11AF42           (        forth.asm):03466 (30+1)          muld    2,u             N2
F8BC 11AEC4           (        forth.asm):03467 (36)            divq    ,u              N3
F8BF 3342             (        forth.asm):03468 (4+1)           leau    2,u
F8C1 0D2D             (        forth.asm):03469 (4)             tst     STSLFCN
F8C3 2606             (        forth.asm):03470 (3)             bne     @strsl2         Just the quotient, Ma'am!
F8C5 ED42             (        forth.asm):03471 (5+1)           std     2,u             N4: the modulo
F8C7 10A7C4           (        forth.asm):03472 (6+0)           stw     ,u              N5: the quotient
F8CA 39               (        forth.asm):03473 (4)             rts
F8CB 3342             (        forth.asm):03474 (4+1)   @strsl2 leau    2,u
F8CD 10A7C4           (        forth.asm):03475 (6+0)           stw     ,u              N4
F8D0 39               (        forth.asm):03476 (4)             rts
                      (        forth.asm):03477         
F8D1 05               (        forth.asm):03478         STRSLMD fcb     5
F8D2 2A2F4D4F44       (        forth.asm):03479                 fcc     '*/MOD'
F8D7 F8A7             (        forth.asm):03480                 fdb     STRSLSH
F8D9 C7               (        forth.asm):03481                 RFCS
F8DA 0F2D             (        forth.asm):03482 (5)             clr     STSLFCN
F8DC 20D3             (        forth.asm):03483 (3)             bra     STRSL1
                      (        forth.asm):03484         
                      (        forth.asm):03485         * Returns the current value of the S register (informational only).
F8DE 01               (        forth.asm):03486         SYSSTK  fcb     1               Non-standard
F8DF 53               (        forth.asm):03487                 fcc     'S'
F8E0 F8D1             (        forth.asm):03488                 fdb     STRSLMD
F8E2 C7               (        forth.asm):03489                 RFCS
F8E3 1F41             (        forth.asm):03490 (4)             tfr     s,x
F8E5 7EE684           (        forth.asm):03491 (3)             jmp     NPUSH
                      (        forth.asm):03492         
F8E8 07               (        forth.asm):03493         PAYLOAD fcb     7               Non standard
F8E9 5041594C4F4144   (        forth.asm):03494                 fcc     'PAYLOAD'       ( -- len ) where len is the code payload
F8F0 F8DE             (        forth.asm):03495                 fdb     SYSSTK          of the word located by FIND (or NULL)
F8F2 C7               (        forth.asm):03496                 RFCS
F8F3 9E10             (        forth.asm):03497 (4)             ldx     FNDPLD          Code payload reported by FIND
F8F5 7EE684           (        forth.asm):03498 (3)             jmp     NPUSH
                      (        forth.asm):03499         
                      (        forth.asm):03500         * Differences from the original code:
                      (        forth.asm):03501         * - display number in HEX rather than in the current base.
                      (        forth.asm):03502         * - dropped feat: the original stuff was interactively paged by 15 line screens.
                      (        forth.asm):03503         * - added feat: display code implementation payload.
                      (        forth.asm):03504         * - added feat: display the immedediate and define (compile time only) flags.
                      (        forth.asm):03505         * - added feat: display the forgettable status (R/W). Everything user
                      (        forth.asm):03506         *   defined is forgettable (i.e. RAM resident).
F8F8 05               (        forth.asm):03507         VLIST   fcb     5               Non-standard
F8F9 564C495354       (        forth.asm):03508                 fcc     'VLIST'         ( -- )
F8FE F8E8             (        forth.asm):03509                 fdb     PAYLOAD
F900 C7               (        forth.asm):03510                 RFCS
F901 9E08             (        forth.asm):03511 (4)             ldx     DICEND
F903 9F16             (        forth.asm):03512 (4)             stx     VLPRVEP         Last word code address + 1
F905 9E06             (        forth.asm):03513 (4)             ldx     LSTWAD
F907 9F18             (        forth.asm):03514 (4)     @vlist1 stx     VLPRVHD         Last word header pointer
F909 108E039E         (        forth.asm):03515 (4)             ldy     #TBUFF
F90D E680             (        forth.asm):03516 (4+1)           ldb     ,x+
F90F 3404             (        forth.asm):03517 (4+1)           pshs    b
F911 C41F             (        forth.asm):03518 (2)             andb    #WRLNMSK        Mask out word length
F913 4F               (        forth.asm):03519 (1)             clra
F914 3404             (        forth.asm):03520 (4+1)           pshs    b               Preserve word length
F916 1F06             (        forth.asm):03521 (4)             tfr     d,w
F918 113812           (        forth.asm):03522 (6+?)           tfm     x+,y+
F91B 3502             (        forth.asm):03523 (4+1)           puls    a               Restore word length to A
F91D C620             (        forth.asm):03524 (2)             ldb     #WRLNMSK+1
F91F 103289           (        forth.asm):03525 (4)             subr    a,b             Number of spaces we want to emit
F922 8620             (        forth.asm):03526 (2)             lda     #SP
F924 A7A0             (        forth.asm):03527 (4+1)   @vlist2 sta     ,y+
F926 5A               (        forth.asm):03528 (1)             decb
F927 26FB             (        forth.asm):03529 (3)             bne     @vlist2
F929 6FA0             (        forth.asm):03530 (6+1)           clr     ,y+             Terminate formatted output string
F92B 3410             (        forth.asm):03531 (4+2)           pshs    x               Address of the current word backlink address
F92D BDE1E8           (        forth.asm):03532 (7)             jsr     PUTCR           Carriage return is output before anything else
F930 8E039E           (        forth.asm):03533 (3)             ldx     #TBUFF
F933 BDE1DB           (        forth.asm):03534 (7)             jsr     PUTS            Output word name formatted on 17 chars + SP
F936 AEE4             (        forth.asm):03535 (5+0)           ldx     ,s
                      (        forth.asm):03536                 IFNE    RELFEAT
F938 3003             (        forth.asm):03537 (4+1)           leax    3,x             Word XT to X (Skip backlink and checksum)
                      (        forth.asm):03538                 ELSE
                      (        forth.asm):03539                 leax    2,x             Word XT to X (Skip backlink)
                      (        forth.asm):03540                 ENDC
F93A 1F10             (        forth.asm):03541 (4)             tfr     x,d             CVNSTR depends on UBASE and we want HEX output
F93C 8E039E           (        forth.asm):03542 (3)             ldx     #TBUFF
F93F BDE175           (        forth.asm):03543 (7)             jsr     HDMP4           So we use trusted debugging code
F942 8E039E           (        forth.asm):03544 (3)             ldx     #TBUFF
F945 BDE1DB           (        forth.asm):03545 (7)             jsr     PUTS
                      (        forth.asm):03546         * Now to display word implementation length.
                      (        forth.asm):03547         * Implementation code length is from ,s+3 (or 2) to VLPRVEP
F948 8609             (        forth.asm):03548 (2)             lda     #HT
F94A BDE1B7           (        forth.asm):03549 (7)             jsr     PUTCH
F94D 9E16             (        forth.asm):03550 (4)             ldx     VLPRVEP
F94F 10AEE4           (        forth.asm):03551 (6+0)           ldy     ,s
                      (        forth.asm):03552                 IFNE    RELFEAT
F952 3123             (        forth.asm):03553 (4+1)           leay    3,y             Current word code entry address
                      (        forth.asm):03554                 ELSE
                      (        forth.asm):03555                 leay    2,y             Current word code entry address
                      (        forth.asm):03556                 ENDC
F954 103221           (        forth.asm):03557 (4)             subr    y,x
F957 1F10             (        forth.asm):03558 (4)             tfr     x,d
F959 8E039E           (        forth.asm):03559 (3)             ldx     #TBUFF
F95C BDE175           (        forth.asm):03560 (7)             jsr     HDMP4
F95F 8E039E           (        forth.asm):03561 (3)             ldx     #TBUFF
F962 BDE1DB           (        forth.asm):03562 (7)             jsr     PUTS
                      (        forth.asm):03563         # Display attribute flags.
F965 8609             (        forth.asm):03564 (2)             lda     #HT
F967 BDE1B7           (        forth.asm):03565 (7)             jsr     PUTCH
F96A 8E039E           (        forth.asm):03566 (3)             ldx     #TBUFF
F96D E662             (        forth.asm):03567 (4+1)           ldb     2,s             Word attribute to B
F96F 862D             (        forth.asm):03568 (2)             lda     #'-
F971 C580             (        forth.asm):03569 (2)             bitb    #IMDFLM         Check for immediate
F973 2702             (        forth.asm):03570 (3)             beq     @vlist4
F975 8649             (        forth.asm):03571 (2)             lda     #'I
F977 A780             (        forth.asm):03572 (4+1)   @vlist4 sta     ,x+
F979 862D             (        forth.asm):03573 (2)             lda     #'-
F97B C540             (        forth.asm):03574 (2)             bitb    #DEFFLM         Check for define (compile time only)
F97D 2702             (        forth.asm):03575 (3)             beq     @vlist5
F97F 8643             (        forth.asm):03576 (2)             lda     #'C
F981 A780             (        forth.asm):03577 (4+1)   @vlist5 sta     ,x+
                      (        forth.asm):03578                 IFNE    RELFEAT
F983 862D             (        forth.asm):03579 (2)             lda     #'-
F985 C520             (        forth.asm):03580 (2)             bitb    #MONFLM         Check for monitored status
F987 2702             (        forth.asm):03581 (3)             beq     @vlst51
F989 864D             (        forth.asm):03582 (2)             lda     #'M
F98B A780             (        forth.asm):03583 (4+1)   @vlst51 sta     ,x+
                      (        forth.asm):03584                 ENDC
                      (        forth.asm):03585         * Check for forgettable also. In ROM => R else W unless we just processed '@'.
F98D 8652             (        forth.asm):03586 (2)             lda     #'R
F98F 10AEE4           (        forth.asm):03587 (6+0)           ldy     ,s
                      (        forth.asm):03588                 IFNE    RELFEAT
F992 3123             (        forth.asm):03589 (4+1)           leay    3,y             Word entry point to Y
                      (        forth.asm):03590                 ELSE
                      (        forth.asm):03591                 leay    2,y             Word entry point to Y
                      (        forth.asm):03592                 ENDC
F994 108C0C15         (        forth.asm):03593 (4)             cmpy    #RAMFTCH        @ in RAM is unforgettable
F998 2708             (        forth.asm):03594 (3)             beq     @vlist6
F99A 108CE000         (        forth.asm):03595 (4)             cmpy    #ROMSTRT        as are all ROM resident words
F99E 2402             (        forth.asm):03596 (3)             bcc     @vlist6
F9A0 8657             (        forth.asm):03597 (2)             lda     #'W
F9A2 A780             (        forth.asm):03598 (4+1)   @vlist6 sta     ,x+
F9A4 6F84             (        forth.asm):03599 (6+0)           clr     ,x
F9A6 8E039E           (        forth.asm):03600 (3)             ldx     #TBUFF
F9A9 BDE1DB           (        forth.asm):03601 (7)             jsr     PUTS
                      (        forth.asm):03602         * The point at which VLPRVHD==WDICSPC is a singularity (RAM to ROM transition).
F9AC 9E18             (        forth.asm):03603 (4)             ldx     VLPRVHD
F9AE 8C0C10           (        forth.asm):03604 (3)             cmpx    #WDICSPC
F9B1 2608             (        forth.asm):03605 (3)             bne     @vlist7
F9B3 8EFDC5           (        forth.asm):03606 (3)             ldx     #QMARK          Word just before @ (ROM flavor)
F9B6 9F18             (        forth.asm):03607 (4)             stx     VLPRVHD
F9B8 8EFDD0           (        forth.asm):03608 (3)             ldx     #THEEND
F9BB 9F16             (        forth.asm):03609 (4)     @vlist7 stx     VLPRVEP
F9BD 3510             (        forth.asm):03610 (4+2)           puls    x
F9BF 3504             (        forth.asm):03611 (4+1)           puls    b
F9C1 AE84             (        forth.asm):03612 (5+0)           ldx     ,x              Point to previous word
F9C3 1026FF40         (        forth.asm):03613 (5)             lbne    @vlist1
F9C7 39               (        forth.asm):03614 (4)             rts
                      (        forth.asm):03615         
F9C8 05               (        forth.asm):03616         STATE   fcb     5
F9C9 5354415445       (        forth.asm):03617                 fcc     'STATE'
F9CE F8F8             (        forth.asm):03618                 fdb     VLIST
F9D0 C7               (        forth.asm):03619                 RFCS
F9D1 8E011E           (        forth.asm):03620 (3)             ldx     #USTATE
F9D4 7EE684           (        forth.asm):03621 (3)             jmp     NPUSH
                      (        forth.asm):03622         
F9D7 04               (        forth.asm):03623         BASE    fcb     4               79-STANDARD (REQ115)
F9D8 42415345         (        forth.asm):03624                 fcc     'BASE'
F9DC F9C8             (        forth.asm):03625                 fdb     STATE
F9DE C7               (        forth.asm):03626                 RFCS
F9DF 8E011C           (        forth.asm):03627 (3)             ldx     #UBASE
F9E2 7EE684           (        forth.asm):03628 (3)             jmp     NPUSH
                      (        forth.asm):03629         
F9E5 03               (        forth.asm):03630         BIN     fcb     3               Non-standard
F9E6 42494E           (        forth.asm):03631                 fcc     'BIN'
F9E9 F9D7             (        forth.asm):03632                 fdb     BASE
F9EB C7               (        forth.asm):03633                 RFCS
F9EC CC0002           (        forth.asm):03634 (3)             ldd     #2
F9EF DD1C             (        forth.asm):03635 (4)             std     UBASE
F9F1 39               (        forth.asm):03636 (4)             rts
                      (        forth.asm):03637         
F9F2 05               (        forth.asm):03638         OCTAL   fcb     5               79-STANDARD (REF)
F9F3 4F4354414C       (        forth.asm):03639                 fcc     'OCTAL'
F9F8 F9E5             (        forth.asm):03640                 fdb     BIN
F9FA C7               (        forth.asm):03641                 RFCS
F9FB CC0008           (        forth.asm):03642 (3)             ldd     #8
F9FE DD1C             (        forth.asm):03643 (4)             std     UBASE
FA00 39               (        forth.asm):03644 (4)             rts
                      (        forth.asm):03645         
FA01 07               (        forth.asm):03646         DECIMAL fcb     7               79-STANDARD (REQ197)
FA02 444543494D414C   (        forth.asm):03647                 fcc     'DECIMAL'
FA09 F9F2             (        forth.asm):03648                 fdb     OCTAL
FA0B C7               (        forth.asm):03649                 RFCS
FA0C CC000A           (        forth.asm):03650 (3)             ldd     #10
FA0F DD1C             (        forth.asm):03651 (4)             std     UBASE
FA11 39               (        forth.asm):03652 (4)             rts
                      (        forth.asm):03653         
FA12 03               (        forth.asm):03654         HEX     fcb     3               79-STANDARD (REF162)
FA13 484558           (        forth.asm):03655                 fcc     'HEX'
FA16 FA01             (        forth.asm):03656                 fdb     DECIMAL
FA18 C7               (        forth.asm):03657                 RFCS
FA19 CC0010           (        forth.asm):03658 (3)             ldd     #16
FA1C DD1C             (        forth.asm):03659 (4)             std     UBASE
FA1E 39               (        forth.asm):03660 (4)             rts
                      (        forth.asm):03661         
                      (        forth.asm):03662         * DUMP is not optimized for speed or clarity but for code compactness and yet
                      (        forth.asm):03663         * it remains the largest dictionary entry! It resorts to builtin HEX dump
                      (        forth.asm):03664         * primitives that do not depend on the current base (HDMP4, HDMP2).
                      (        forth.asm):03665         * DUMP operates on the basis of one line of output to #TBUFF per 16 byte
                      (        forth.asm):03666         * (a block) of input. The input buffer is pointed to by D (backed up by Y)
                      (        forth.asm):03667         * and the output is pointed to by X. The output (besides the header line)
                      (        forth.asm):03668         * comprises 3 distinct areas:
                      (        forth.asm):03669         *
                      (        forth.asm):03670         * - the base block address. Aligned on a 16 byte address, followed by one #SP.
                      (        forth.asm):03671         * - the HEX dump area. Made up of 16 times 2 HEX numbers separated by #SP.
                      (        forth.asm):03672         * - the ASCII dump area. Made up of 16 characters.
                      (        forth.asm):03673         *
                      (        forth.asm):03674         * This results in the following "magical" constants:
                      (        forth.asm):03675         *
                      (        forth.asm):03676         * #TBUFF+53 points to the beginning of the ASCII dump area.
                      (        forth.asm):03677         * #TBUFF+69 points to the end of the output string (to be NUL terminated).
                      (        forth.asm):03678         *
FA1F 04               (        forth.asm):03679         DUMP    fcb     4               79-STANDARD (REF123)
FA20 44554D50         (        forth.asm):03680                 fcc     'DUMP'          ( START NBYTES -- )
FA24 FA12             (        forth.asm):03681                 fdb     HEX
FA26 C7               (        forth.asm):03682                 RFCS
FA27 BDE692           (        forth.asm):03683 (7)             jsr     NPOP
FA2A 1F12             (        forth.asm):03684 (4)             tfr     x,y             NBYTES to Y
FA2C BDE692           (        forth.asm):03685 (7)             jsr     NPOP
                      (        forth.asm):03686         * Input parameter validation.
FA2F 1037C2           (        forth.asm):03687 (4)             cmpr    0,y
FA32 2601             (        forth.asm):03688 (3)             bne     @dmproc         Proceed if NBYTES in non-zero
FA34 39               (        forth.asm):03689 (4)             rts                     A zero byte count is not flagged as an error
FA35 2E05             (        forth.asm):03690 (3)     @dmproc bgt     @dmpini
FA37 C60D             (        forth.asm):03691 (2)             ldb     #13             Illegal argument (negative)
FA39 BDE60B           (        forth.asm):03692 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):03693         * Initialization and header processing.
FA3C 3420             (        forth.asm):03694 (4+2)   @dmpini pshs    y               NBYTES
FA3E 3410             (        forth.asm):03695 (4+2)           pshs    x               START
FA40 327E             (        forth.asm):03696 (4+1)           leas    -2,s            Allocate storage for STARTSEEN
                      (        forth.asm):03697         * Stack structure:
                      (        forth.asm):03698         * ,s    STARTSEEN               Set to 1 as soon as D is seen = to START
                      (        forth.asm):03699         *                               Only the LSB is used (1,s).
                      (        forth.asm):03700         * 2,s   START                   Lower bound of the area of interest (included)
                      (        forth.asm):03701         * 4,s   NBYTES                  Byte count to be dumped
FA42 1F10             (        forth.asm):03702 (4)             tfr     x,d             START to D
FA44 C4F0             (        forth.asm):03703 (2)             andb    #$F0            Align to lower 16 byte boundary
FA46 6F61             (        forth.asm):03704 (6+1)           clr     1,s             Clear STARTSEEN until better informed
FA48 BDE1E8           (        forth.asm):03705 (7)             jsr     PUTCR           Print CR
FA4B 11C620           (        forth.asm):03706 (3)             ldf     #SP             Preserved across called subroutines
FA4E 8E039E           (        forth.asm):03707 (3)             ldx     #TBUFF
FA51 1F17             (        forth.asm):03708 (4)             tfr     x,v             Invariants: F has #SP, V has #TBUFF
FA53 3406             (        forth.asm):03709 (4+2)           pshs    d
FA55 BDFAF0           (        forth.asm):03710 (7)             jsr     _DMPHDR         D is not preserved
FA58 3506             (        forth.asm):03711 (4+2)           puls    d
FA5A 6F84             (        forth.asm):03712 (6+0)           clr     ,x              NUL terminate the current output line
FA5C 1F71             (        forth.asm):03713 (4)             tfr     v,x             Point back to the beginning of the output buffer
FA5E BDE1DB           (        forth.asm):03714 (7)             jsr     PUTS            Print header
                      (        forth.asm):03715         * Main loop. Index is D. We output everything to the string pointed by X.
                      (        forth.asm):03716         * Occasional resort to #TBUFF + 53 + (B % 15) will be used.
FA61 3404             (        forth.asm):03717 (4+1)   @dmmain pshs    b
FA63 C40F             (        forth.asm):03718 (2)             andb    #$F
FA65 3504             (        forth.asm):03719 (4+1)           puls    b
FA67 2609             (        forth.asm):03720 (3)             bne     @dmphx          Not a beginning of line
FA69 BDE1E8           (        forth.asm):03721 (7)             jsr     PUTCR           Print CR
FA6C BDE175           (        forth.asm):03722 (7)             jsr     HDMP4           4 hex digit dump of the base block address
FA6F 11E780           (        forth.asm):03723 (5+1)           stf     ,x+             SPACE after the base address
FA72 1F02             (        forth.asm):03724 (4)     @dmphx  tfr     d,y             Save D, prepare pointer to actual data
FA74 8D59             (        forth.asm):03725 (6)             bsr     _DMPINT
FA76 260A             (        forth.asm):03726 (3)             bne     @dmhx2          We are in the area of interest
FA78 8620             (        forth.asm):03727 (2)     @dmspc  lda     #SP
FA7A A780             (        forth.asm):03728 (4+1)           sta     ,x+             Nothing interesting here. Emit three spaces
FA7C A780             (        forth.asm):03729 (4+1)           sta     ,x+
FA7E A780             (        forth.asm):03730 (4+1)           sta     ,x+
FA80 2016             (        forth.asm):03731 (3)             bra     @dmasc          Have #SP printed to the ASCII area
                      (        forth.asm):03732         * We are within the area of interest. Perform a regular HEX 2 digit conversion.
FA82 A6A4             (        forth.asm):03733 (4+0)   @dmhx2  lda     ,y
FA84 BDE18E           (        forth.asm):03734 (7)             jsr     HDMP2
FA87 11E780           (        forth.asm):03735 (5+1)           stf     ,x+
                      (        forth.asm):03736         * Decrement NBYTES, only if it is not already zero.
FA8A 3420             (        forth.asm):03737 (4+2)           pshs    y
FA8C 10AE66           (        forth.asm):03738 (6+1)           ldy     6,s             Offset plus 2 since we just pushed Y
FA8F 2705             (        forth.asm):03739 (3)             beq     @dmrsty         NBYTES is nul
FA91 313F             (        forth.asm):03740 (4+1)           leay    -1,y            Decrement NBYTES
FA93 10AF66           (        forth.asm):03741 (6+1)           sty     6,s
FA96 3520             (        forth.asm):03742 (4+2)   @dmrsty puls    y
FA98 8120             (        forth.asm):03743 (2)     @dmasc  cmpa    #SP
FA9A 2504             (        forth.asm):03744 (3)             blo     @dmnprt         Character is not printable
FA9C 817E             (        forth.asm):03745 (2)             cmpa    #$7E
FA9E 2302             (        forth.asm):03746 (3)             bls     @dmasis
FAA0 862E             (        forth.asm):03747 (2)     @dmnprt lda     #'.             Default character when not printable
FAA2 3410             (        forth.asm):03748 (4+2)   @dmasis pshs    x               The ASCII image is the character itself
FAA4 8E03D3           (        forth.asm):03749 (3)             ldx     #TBUFF+53       Base address for the ASCII dump area
FAA7 C40F             (        forth.asm):03750 (2)             andb    #$F             Offset is B modulo 15
FAA9 3A               (        forth.asm):03751 (1)             abx                     Add offset to base address
FAAA A780             (        forth.asm):03752 (4+1)           sta     ,x+
FAAC 3510             (        forth.asm):03753 (4+2)           puls    x
                      (        forth.asm):03754         * If B is #$F, we've just processed the last byte of a block. Print #TBUFF.
FAAE C10F             (        forth.asm):03755 (2)             cmpb    #$F
FAB0 1FAE             (        forth.asm):03756 (4)             tfr     cc,e
FAB2 2608             (        forth.asm):03757 (3)             bne     @dmctd
FAB4 1F71             (        forth.asm):03758 (4)             tfr     v,x             #TBUFF to X
FAB6 6F8845           (        forth.asm):03759 (6+1)           clr     69,x
FAB9 BDE1DB           (        forth.asm):03760 (7)             jsr     PUTS
FABC 1F20             (        forth.asm):03761 (4)     @dmctd  tfr     y,d             Restore D
FABE 104C             (        forth.asm):03762 (2)             incd
FAC0 1FEA             (        forth.asm):03763 (4)             tfr     e,cc
FAC2 269D             (        forth.asm):03764 (3)             bne     @dmmain         Proceed until end of block is reached
FAC4 6D65             (        forth.asm):03765 (5+1)           tst     5,s             NBYTES LSB
FAC6 2699             (        forth.asm):03766 (3)             bne     @dmmain
FAC8 6D64             (        forth.asm):03767 (5+1)           tst     4,s             NYTES MSB
FACA 2695             (        forth.asm):03768 (3)             bne     @dmmain
FACC 3266             (        forth.asm):03769 (4+1)           leas    6,s             Free stack storage used by local variables
FACE 39               (        forth.asm):03770 (4)             rts
                      (        forth.asm):03771         
                      (        forth.asm):03772         * Predicate to indicate whether or not D covers the area of interest.
                      (        forth.asm):03773         * Upon return NZ will be set iff we are pointing to the "interesting" area.
FACF 6D63             (        forth.asm):03774 (5+1)   _DMPINT tst     3,s             STARTSEEN?
FAD1 2608             (        forth.asm):03775 (3)             bne     @strsen         Yes, check for zero remaining byte count
FAD3 10A364           (        forth.asm):03776 (6+1)           cmpd    4,s             START
FAD6 240D             (        forth.asm):03777 (3)             bhs     @ststrt         Set STARTSEEN once and for all
FAD8 1A04             (        forth.asm):03778 (2)     @retwz  orcc    #ZFLAG          Set Z flag
FADA 39               (        forth.asm):03779 (4)             rts
                      (        forth.asm):03780         * STARTSEEN is set. Check remaining byte count.
FADB 6D67             (        forth.asm):03781 (5+1)   @strsen tst     7,s             NBYTES LSB
FADD 260E             (        forth.asm):03782 (3)             bne     @retwnz
FADF 6D66             (        forth.asm):03783 (5+1)           tst     6,s             NBYTES MSB
FAE1 260A             (        forth.asm):03784 (3)             bne     @retwnz
FAE3 20F3             (        forth.asm):03785 (3)             bra     @retwz          We are beyond the interesting area
FAE5 3402             (        forth.asm):03786 (4+1)   @ststrt pshs    a
FAE7 8601             (        forth.asm):03787 (2)             lda     #1
FAE9 A764             (        forth.asm):03788 (4+1)           sta     4,s             Set STARTSEEN
FAEB 3502             (        forth.asm):03789 (4+1)           puls    a
FAED 1CFB             (        forth.asm):03790 (2)     @retwnz andcc   #^ZFLAG         Clear Z flag
FAEF 39               (        forth.asm):03791 (4)             rts
                      (        forth.asm):03792         
                      (        forth.asm):03793         * Print the dump header to X.
FAF0 8620             (        forth.asm):03794 (2)     _DMPHDR lda     #SP
FAF2 A780             (        forth.asm):03795 (4+1)           sta     ,x+
FAF4 A780             (        forth.asm):03796 (4+1)           sta     ,x+
FAF6 A780             (        forth.asm):03797 (4+1)           sta     ,x+
FAF8 A780             (        forth.asm):03798 (4+1)           sta     ,x+
FAFA 5F               (        forth.asm):03799 (1)             clrb
FAFB A780             (        forth.asm):03800 (4+1)   @dmhlp1 sta     ,x+             Space before every 2 hex digits
FAFD 1F98             (        forth.asm):03801 (4)             tfr     b,a
FAFF BDE18E           (        forth.asm):03802 (7)             jsr     HDMP2
FB02 8620             (        forth.asm):03803 (2)             lda     #SP
FB04 5C               (        forth.asm):03804 (1)             incb
FB05 C110             (        forth.asm):03805 (2)             cmpb    #$10
FB07 26F2             (        forth.asm):03806 (3)             bne     @dmhlp1
FB09 A780             (        forth.asm):03807 (4+1)           sta     ,x+             Space before the ASCII dump
FB0B 5F               (        forth.asm):03808 (1)             clrb
FB0C 1F98             (        forth.asm):03809 (4)     @dmhlp2 tfr     b,a
FB0E BDE15C           (        forth.asm):03810 (7)             jsr     HEX1D           Offset to HEX char stored to x+
FB11 5C               (        forth.asm):03811 (1)             incb
FB12 C110             (        forth.asm):03812 (2)             cmpb    #$10
FB14 26F6             (        forth.asm):03813 (3)             bne     @dmhlp2
FB16 39               (        forth.asm):03814 (4)             rts
                      (        forth.asm):03815         
                      (        forth.asm):03816                 IFNE    SSDFEAT
FB17 02               (        forth.asm):03817         DOTTICK fcb     2               Non-standard (SwiftForth)
FB18 2E27             (        forth.asm):03818                 fcb     $2E,$27         .' ( memaddr -- )
FB1A FA1F             (        forth.asm):03819                 fdb     DUMP
FB1C C7               (        forth.asm):03820                 RFCS
FB1D BDE692           (        forth.asm):03821 (7)             jsr     NPOP
FB20 1F12             (        forth.asm):03822 (4)             tfr     x,y
FB22 8E034E           (        forth.asm):03823 (3)             ldx     #HEXBUF
FB25 BDE4E7           (        forth.asm):03824 (7)             jsr     FINDSYM
FB28 8E034E           (        forth.asm):03825 (3)             ldx     #HEXBUF
FB2B 7EE1DB           (        forth.asm):03826 (3)             jmp     PUTS
                      (        forth.asm):03827                 ENDC
                      (        forth.asm):03828         
                      (        forth.asm):03829         * Display a dump of the data stack in the current BASE. In Leo Brodie's
                      (        forth.asm):03830         * "Starting Forth" the data stack is printed from the bottom up. So it is here.
FB2E 02               (        forth.asm):03831         DDUMP   fcb     2               ANSI (Optional "Programming tools" word set)
FB2F 2E53             (        forth.asm):03832                 fcc     '.S'            ( memaddr bcount -- )
                      (        forth.asm):03833                 IFNE    SSDFEAT
FB31 FB17             (        forth.asm):03834                 fdb     DOTTICK
                      (        forth.asm):03835                 ELSE
                      (        forth.asm):03836                 fdb     DUMP
                      (        forth.asm):03837                 ENDC
FB33 C7               (        forth.asm):03838                 RFCS
FB34 CC024A           (        forth.asm):03839 (3)             ldd     #NSTBOT
FB37 103230           (        forth.asm):03840 (4)             subr    u,d
FB3A 1044             (        forth.asm):03841 (2)             lsrd                    DEPTH is in D
FB3C 272A             (        forth.asm):03842 (3)             beq     @ndump3         Data stack is empty
FB3E 3440             (        forth.asm):03843 (4+2)           pshs    u
FB40 CE024A           (        forth.asm):03844 (3)             ldu     #NSTBOT         Pointing to the bottom of the data stack
FB43 8601             (        forth.asm):03845 (2)             lda     #1
FB45 9730             (        forth.asm):03846 (3)             sta     CVISSGN         Force a signed number conversion
FB47 3404             (        forth.asm):03847 (4+1)   @ndump1 pshs    b
FB49 AEC3             (        forth.asm):03848 (5+2)           ldx     ,--u
FB4B BDE316           (        forth.asm):03849 (7)             jsr     CVNSTR
FB4E 8E039E           (        forth.asm):03850 (3)             ldx     #TBUFF
                      (        forth.asm):03851         # Skip leading spaces.
FB51 A680             (        forth.asm):03852 (4+1)   @ndump2 lda     ,x+
FB53 8120             (        forth.asm):03853 (2)             cmpa    #SP
FB55 27FA             (        forth.asm):03854 (3)             beq     @ndump2
FB57 301F             (        forth.asm):03855 (4+1)           leax    -1,x
FB59 BDE1DB           (        forth.asm):03856 (7)             jsr     PUTS
FB5C 8620             (        forth.asm):03857 (2)             lda     #SP
FB5E BDE1B7           (        forth.asm):03858 (7)             jsr     PUTCH
FB61 3504             (        forth.asm):03859 (4+1)           puls    b
FB63 5A               (        forth.asm):03860 (1)             decb
FB64 26E1             (        forth.asm):03861 (3)             bne     @ndump1
FB66 3540             (        forth.asm):03862 (4+2)           puls    u
FB68 39               (        forth.asm):03863 (4)     @ndump3 rts
                      (        forth.asm):03864         
FB69 04               (        forth.asm):03865         QRYDUP  fcb     4               79-STANDARD (REQ184)
FB6A 3F445550         (        forth.asm):03866                 fcc     '?DUP'
FB6E FB2E             (        forth.asm):03867                 fdb     DDUMP
FB70 C7               (        forth.asm):03868                 RFCS
FB71 BDE692           (        forth.asm):03869 (7)             jsr     NPOP
FB74 3610             (        forth.asm):03870                 UCNPUSH                 Push back the original parameter
FB76 1037C1           (        forth.asm):03871 (4)             cmpr    0,x
FB79 2601             (        forth.asm):03872 (3)             bne     @qrydp1
FB7B 39               (        forth.asm):03873 (4)             rts
FB7C 7EE684           (        forth.asm):03874 (3)     @qrydp1 jmp     NPUSH           And DUP if NZ
                      (        forth.asm):03875         
FB7F 04               (        forth.asm):03876         TUCK    fcb     4               ANSI (Core ext)
FB80 5455434B         (        forth.asm):03877                 fcc     'TUCK'          ( x1 x2 -- x2 x1 x2 ) i.e. SWAP OVER
FB84 FB69             (        forth.asm):03878                 fdb     QRYDUP
FB86 C7               (        forth.asm):03879                 RFCS
FB87 CC0246BDE30B     (        forth.asm):03880                 MINDREQ 2
FB8D 10ECC4           (        forth.asm):03881 (8+0)           ldq     ,u              D:W is X2:X1
FB90 1E06             (        forth.asm):03882 (5)             exg     d,w
FB92 10EDC4           (        forth.asm):03883 (8+0)           stq     ,u
FB95 1F61             (        forth.asm):03884 (4)             tfr     w,x             X has X2
FB97 7EE684           (        forth.asm):03885 (3)             jmp     NPUSH
                      (        forth.asm):03886         
FB9A 03               (        forth.asm):03887         NIP     fcb     3               ANSI (Core ext)
FB9B 4E4950           (        forth.asm):03888                 fcc     'NIP'           ( x1 x2 -- x2 ) i.e. SWAP DROP
FB9E FB7F             (        forth.asm):03889                 fdb     TUCK
FBA0 C7               (        forth.asm):03890                 RFCS
FBA1 CC0246BDE30B     (        forth.asm):03891                 MINDREQ 2
FBA7 ECC4             (        forth.asm):03892 (5+0)           ldd     ,u
FBA9 3342             (        forth.asm):03893 (4+1)           leau    2,u
FBAB EDC4             (        forth.asm):03894 (5+0)           std     ,u
FBAD 39               (        forth.asm):03895 (4)             rts
                      (        forth.asm):03896         
FBAE 03               (        forth.asm):03897         DUP     fcb     3               79-STANDARD (REQ205)
FBAF 445550           (        forth.asm):03898                 fcc     'DUP'
FBB2 FB9A             (        forth.asm):03899                 fdb     NIP
FBB4 C7               (        forth.asm):03900                 RFCS
FBB5 CC0248BDE30B     (        forth.asm):03901                 MINDREQ 1
FBBB AEC4             (        forth.asm):03902 (5+0)           ldx     ,u
FBBD 7EE684           (        forth.asm):03903 (3)             jmp     NPUSH
                      (        forth.asm):03904         
FBC0 04               (        forth.asm):03905         DROP    fcb     4               79-STANDARD (REQ233)
FBC1 44524F50         (        forth.asm):03906                 fcc     'DROP'
FBC5 FBAE             (        forth.asm):03907                 fdb     DUP
FBC7 C7               (        forth.asm):03908                 RFCS
FBC8 7EE692           (        forth.asm):03909 (3)             jmp     NPOP
                      (        forth.asm):03910         
FBCB 04               (        forth.asm):03911         SWAP    fcb     4               79-STANDARD (REQ230)
FBCC 53574150         (        forth.asm):03912                 fcc     'SWAP'
FBD0 FBC0             (        forth.asm):03913                 fdb     DROP
FBD2 C7               (        forth.asm):03914                 RFCS
FBD3 CC0246BDE30B     (        forth.asm):03915                 MINDREQ 2               We need at least two cells stacked up
FBD9 10ECC4           (        forth.asm):03916 (8+0)           ldq     ,u              In place SWAP
FBDC 1E06             (        forth.asm):03917 (5)             exg     d,w
FBDE 10EDC4           (        forth.asm):03918 (8+0)           stq     ,u
FBE1 39               (        forth.asm):03919 (4)             rts
                      (        forth.asm):03920         
FBE2 04               (        forth.asm):03921         PICK    fcb     4
FBE3 5049434B         (        forth.asm):03922                 fcc     'PICK'
FBE7 FBCB             (        forth.asm):03923                 fdb     SWAP
FBE9 C7               (        forth.asm):03924                 RFCS
FBEA BDE692           (        forth.asm):03925 (7)             jsr     NPOP
FBED CC024A           (        forth.asm):03926 (3)     PICK1   ldd     #NSTBOT
FBF0 103230           (        forth.asm):03927 (4)             subr    u,d
FBF3 1044             (        forth.asm):03928 (2)             lsrd                    D has the data stack depth in cells
FBF5 103710           (        forth.asm):03929 (4)             cmpr    x,d
FBF8 2405             (        forth.asm):03930 (3)             bcc     @pick1
FBFA C60D             (        forth.asm):03931 (2)     ERRPCK  ldb     #13             Argument is greater than DEPTH
FBFC BDE60B           (        forth.asm):03932 (7)             jsr     ERRHDLR         No return
FBFF 1F10             (        forth.asm):03933 (4)     @pick1  tfr     x,d
FC01 104D             (        forth.asm):03934 (2)             tstd
FC03 27F5             (        forth.asm):03935 (3)             beq     ERRPCK
FC05 104A             (        forth.asm):03936 (2)             decd                    Minus 1, unlike in the Z80 implementation
FC07 1048             (        forth.asm):03937 (2)             lsld                    Times 2
FC09 1F31             (        forth.asm):03938 (4)             tfr     u,x
FC0B 308B             (        forth.asm):03939 (4+2)           leax    d,x
FC0D 1F12             (        forth.asm):03940 (4)             tfr     x,y             For the sake of ROLL's implementation
FC0F AE84             (        forth.asm):03941 (5+0)           ldx     ,x
FC11 3610             (        forth.asm):03942                 UCNPUSH
FC13 39               (        forth.asm):03943 (4)             rts
                      (        forth.asm):03944         
FC14 04               (        forth.asm):03945         OVER    fcb     4
FC15 4F564552         (        forth.asm):03946                 fcc     'OVER'
FC19 FBE2             (        forth.asm):03947                 fdb     PICK
FC1B C7               (        forth.asm):03948                 RFCS
FC1C 8E0002           (        forth.asm):03949 (3)             ldx     #2
FC1F 20CC             (        forth.asm):03950 (3)             bra     PICK1
                      (        forth.asm):03951         
FC21 04               (        forth.asm):03952         ROLL    fcb     4
FC22 524F4C4C         (        forth.asm):03953                 fcc     'ROLL'
FC26 FC14             (        forth.asm):03954                 fdb     OVER
FC28 C7               (        forth.asm):03955                 RFCS
FC29 BDE692           (        forth.asm):03956 (7)             jsr     NPOP
FC2C 1F16             (        forth.asm):03957 (4)     ROLL1   tfr     x,w
FC2E 8DBD             (        forth.asm):03958 (6)             bsr     PICK1           Let PICK do the error handling
FC30 3121             (        forth.asm):03959 (4+1)           leay    1,y             Point to the LSB since we're moving backward
FC32 1F21             (        forth.asm):03960 (4)             tfr     y,x
FC34 301E             (        forth.asm):03961 (4+1)           leax    -2,x
FC36 103066           (        forth.asm):03962 (4)             addr    w,w
FC39 113912           (        forth.asm):03963 (6+?)           tfm     x-,y-
FC3C 7EE692           (        forth.asm):03964 (3)             jmp     NPOP
                      (        forth.asm):03965         
FC3F 03               (        forth.asm):03966         ROT     fcb     3
FC40 524F54           (        forth.asm):03967                 fcc     'ROT'
FC43 FC21             (        forth.asm):03968                 fdb     ROLL
FC45 C7               (        forth.asm):03969                 RFCS
FC46 8E0003           (        forth.asm):03970 (3)             ldx     #3
FC49 20E1             (        forth.asm):03971 (3)             bra     ROLL1
                      (        forth.asm):03972         
FC4B 04               (        forth.asm):03973         MROT    fcb     4
FC4C 2D524F54         (        forth.asm):03974                 fcc     '-ROT'
FC50 FC3F             (        forth.asm):03975                 fdb     ROT
FC52 C7               (        forth.asm):03976                 RFCS
FC53 8DF1             (        forth.asm):03977                 RFXT    bsr,ROT+6       XT for ROT
FC55 20EF             (        forth.asm):03978                 RFXT    bra,ROT+6       XT for ROT
                      (        forth.asm):03979         
FC57 02               (        forth.asm):03980         CCOMMA  fcb     2               79-STANDARD (REF)
FC58 432C             (        forth.asm):03981                 fcc     'C,'
FC5A FC4B             (        forth.asm):03982                 fdb     MROT
FC5C C7               (        forth.asm):03983                 RFCS
FC5D BDE692           (        forth.asm):03984 (7)             jsr     NPOP
FC60 1F10             (        forth.asm):03985 (4)             tfr     x,d
FC62 109E08           (        forth.asm):03986 (5)             ldy     DICEND
FC65 E7A0             (        forth.asm):03987 (4+1)           stb     ,y+
FC67 109F08           (        forth.asm):03988 (5)             sty     DICEND
FC6A 39               (        forth.asm):03989 (4)             rts
                      (        forth.asm):03990         
FC6B 01               (        forth.asm):03991         COMMA   fcb     1               79-STANDARD (REQ143)
FC6C 2C               (        forth.asm):03992                 fcc     ','
FC6D FC57             (        forth.asm):03993                 fdb     CCOMMA
FC6F C7               (        forth.asm):03994                 RFCS
FC70 BDE692           (        forth.asm):03995 (7)             jsr     NPOP
FC73 109E08           (        forth.asm):03996 (5)             ldy     DICEND
FC76 AFA1             (        forth.asm):03997 (5+2)           stx     ,y++
FC78 109F08           (        forth.asm):03998 (5)             sty     DICEND
FC7B 39               (        forth.asm):03999 (4)             rts
                      (        forth.asm):04000         
FC7C 05               (        forth.asm):04001         ALLOT   fcb     5               79-STANDARD (REQ154)
FC7D 414C4C4F54       (        forth.asm):04002                 fcc     'ALLOT'         ( signedbytecount -- )
FC82 FC6B             (        forth.asm):04003                 fdb     COMMA
FC84 C7               (        forth.asm):04004                 RFCS
FC85 BDE692           (        forth.asm):04005 (7)             jsr     NPOP
FC88 109E08           (        forth.asm):04006 (5)             ldy     DICEND
FC8B 103012           (        forth.asm):04007 (4)             addr    x,y
FC8E 109F08           (        forth.asm):04008 (5)             sty     DICEND
FC91 39               (        forth.asm):04009 (4)             rts
                      (        forth.asm):04010         
FC92 04               (        forth.asm):04011         FILL    fcb     4               79-STANDARD (REQ234)
FC93 46494C4C         (        forth.asm):04012                 fcc     'FILL'
FC97 FC7C             (        forth.asm):04013                 fdb     ALLOT
FC99 C7               (        forth.asm):04014                 RFCS
FC9A BDE692           (        forth.asm):04015 (7)             jsr     NPOP
FC9D 1F16             (        forth.asm):04016 (4)             tfr     x,w             Byte fill value to W
FC9F BDE692           (        forth.asm):04017 (7)     FILL1   jsr     NPOP
FCA2 1F12             (        forth.asm):04018 (4)             tfr     x,y             Byte count to Y
FCA4 1E26             (        forth.asm):04019 (5)             exg     y,w             Byte count to W, byte fill value to Y
FCA6 BDE692           (        forth.asm):04020 (7)             jsr     NPOP            Destination address to X
FCA9 105D             (        forth.asm):04021 (2)             tstw
FCAB 2F0B             (        forth.asm):04022 (3)             ble     @filend
FCAD 1F20             (        forth.asm):04023 (4)             tfr     y,d             Byte fill value to B
FCAF E784             (        forth.asm):04024 (4+0)           stb     ,x
FCB1 105A             (        forth.asm):04025 (2)             decw
FCB3 3101             (        forth.asm):04026 (4+1)           leay    1,x
FCB5 113812           (        forth.asm):04027 (6+?)           tfm     x+,y+
FCB8 39               (        forth.asm):04028 (4)     @filend rts
                      (        forth.asm):04029         
FCB9 06               (        forth.asm):04030         BLANKS  fcb     6               79-STANDARD (REF152)
FCBA 424C414E4B53     (        forth.asm):04031                 fcc     'BLANKS'
FCC0 FC92             (        forth.asm):04032                 fdb     FILL
FCC2 C7               (        forth.asm):04033                 RFCS
FCC3 10860020         (        forth.asm):04034 (4)             ldw     #SP
FCC7 20D6             (        forth.asm):04035 (3)             bra     FILL1
                      (        forth.asm):04036         
FCC9 06               (        forth.asm):04037         CMOVED  fcb     6               FORTH-83
FCCA 434D4F56453E     (        forth.asm):04038                 fcc     'CMOVE>'
FCD0 FCB9             (        forth.asm):04039                 fdb     BLANKS
FCD2 C7               (        forth.asm):04040                 RFCS
FCD3 BDE462           (        forth.asm):04041 (7)             jsr     ACQMOVP
FCD6 105D             (        forth.asm):04042 (2)             tstw
FCD8 270D             (        forth.asm):04043 (3)             beq     @cmovd1
FCDA 105A             (        forth.asm):04044 (2)             decw
FCDC 103061           (        forth.asm):04045 (4)             addr    w,x
FCDF 103062           (        forth.asm):04046 (4)             addr    w,y
FCE2 105C             (        forth.asm):04047 (2)             incw
FCE4 113912           (        forth.asm):04048 (6+?)           tfm     x-,y-
FCE7 39               (        forth.asm):04049 (4)     @cmovd1 rts
                      (        forth.asm):04050         
FCE8 06               (        forth.asm):04051         DCMOVE  fcb     6               79-STANDARD (REF)
FCE9 3C434D4F5645     (        forth.asm):04052                 fcc     '<CMOVE'
FCEF FCC9             (        forth.asm):04053                 fdb     CMOVED
FCF1 C7               (        forth.asm):04054                 RFCS
FCF2 BDE462           (        forth.asm):04055 (7)             jsr     ACQMOVP
FCF5 113912           (        forth.asm):04056 (6+?)           tfm     x-,y-
FCF8 39               (        forth.asm):04057 (4)             rts
                      (        forth.asm):04058         
FCF9 05               (        forth.asm):04059         CMOVE   fcb     5               79-STANDARD (REQ153)
FCFA 434D4F5645       (        forth.asm):04060                 fcc     'CMOVE'
FCFF FCE8             (        forth.asm):04061                 fdb     DCMOVE
FD01 C7               (        forth.asm):04062                 RFCS
FD02 BDE462           (        forth.asm):04063 (7)             jsr     ACQMOVP
FD05 113812           (        forth.asm):04064 (6+?)           tfm     x+,y+
FD08 39               (        forth.asm):04065 (4)             rts
                      (        forth.asm):04066         
FD09 04               (        forth.asm):04067         MOVE    fcb     4               79-STANDARD (REQ113)
FD0A 4D4F5645         (        forth.asm):04068                 fcc     'MOVE'          ( srcaddr dstaddr ncells -- )
FD0E FCF9             (        forth.asm):04069                 fdb     CMOVE
FD10 C7               (        forth.asm):04070                 RFCS
FD11 BDE462           (        forth.asm):04071 (7)             jsr     ACQMOVP
FD14 105D             (        forth.asm):04072 (2)             tstw
FD16 2F06             (        forth.asm):04073 (3)             ble     @move1
FD18 103066           (        forth.asm):04074 (4)             addr    w,w             Convert cells to bytes
FD1B 113812           (        forth.asm):04075 (6+?)           tfm     x+,y+
FD1E 39               (        forth.asm):04076 (4)     @move1  rts
                      (        forth.asm):04077         
FD1F 05               (        forth.asm):04078         CELLS   fcb     5               ANSI-X3.215-1994
FD20 43454C4C53       (        forth.asm):04079                 fcc     'CELLS'
FD25 FD09             (        forth.asm):04080                 fdb     MOVE
FD27 C7               (        forth.asm):04081                 RFCS
FD28 BDE692           (        forth.asm):04082 (7)             jsr     NPOP
FD2B 103011           (        forth.asm):04083 (4)             addr    x,x
FD2E 3610             (        forth.asm):04084                 UCNPUSH
FD30 39               (        forth.asm):04085 (4)             rts
                      (        forth.asm):04086         
FD31 04               (        forth.asm):04087         LAST    fcb     4               79-STANDARD (REF)
FD32 4C415354         (        forth.asm):04088                 fcc     'LAST'
FD36 FD1F             (        forth.asm):04089                 fdb     CELLS
FD38 C7               (        forth.asm):04090                 RFCS
FD39 9E06             (        forth.asm):04091 (4)             ldx     LSTWAD
FD3B 7EE684           (        forth.asm):04092 (3)             jmp     NPUSH
                      (        forth.asm):04093         
FD3E 04               (        forth.asm):04094         HERE    fcb     4               79-STANDARD (REQ188)
FD3F 48455245         (        forth.asm):04095                 fcc     'HERE'
FD43 FD31             (        forth.asm):04096                 fdb     LAST
FD45 C7               (        forth.asm):04097                 RFCS
FD46 9E08             (        forth.asm):04098 (4)             ldx     DICEND
FD48 7EE684           (        forth.asm):04099 (3)             jmp     NPUSH
                      (        forth.asm):04100         
FD4B 02               (        forth.asm):04101         PLUSST  fcb     2               79-STANDARD (REQ157)
FD4C 2B21             (        forth.asm):04102                 fcc     '+!'            ( incr addr -- )
FD4E FD3E             (        forth.asm):04103                 fdb     HERE
FD50 C7               (        forth.asm):04104                 RFCS
FD51 CC0246BDE30B     (        forth.asm):04105                 MINDREQ 2               We need at least two cells stacked up
FD57 AEC4             (        forth.asm):04106 (5+0)           ldx     ,u              ADDR to X
FD59 EC84             (        forth.asm):04107 (5+0)           ldd     ,x              @ADDR to D
FD5B E342             (        forth.asm):04108 (5+1)           addd    2,u             Add INCR to D
FD5D ED84             (        forth.asm):04109 (5+0)   PLUSST1 std     ,x              Store the sum back to ADDR
FD5F 3344             (        forth.asm):04110 (4+1)           leau    4,u             Drop two cells from the data stack
FD61 39               (        forth.asm):04111 (4)             rts
                      (        forth.asm):04112         
FD62 03               (        forth.asm):04113         ONEPST  fcb     3               79-STANDARD (REF)
FD63 312B21           (        forth.asm):04114                 fcc     '1+!'
FD66 FD4B             (        forth.asm):04115                 fdb     PLUSST
FD68 C7               (        forth.asm):04116                 RFCS
FD69 CC0248BDE30B     (        forth.asm):04117                 MINDREQ 1
FD6F AEC4             (        forth.asm):04118 (5+0)           ldx     ,u
FD71 EC84             (        forth.asm):04119 (5+0)           ldd     ,x
FD73 104C             (        forth.asm):04120 (2)             incd
FD75 ED84             (        forth.asm):04121 (5+0)           std     ,x
FD77 3342             (        forth.asm):04122 (4+1)           leau    2,u
FD79 39               (        forth.asm):04123 (4)             rts
                      (        forth.asm):04124         
FD7A 02               (        forth.asm):04125         MINUSST fcb     2               79-STANDARD (REQ157)
FD7B 2D21             (        forth.asm):04126                 fcc     '-!'            ( incr addr -- )
FD7D FD62             (        forth.asm):04127                 fdb     ONEPST
FD7F C7               (        forth.asm):04128                 RFCS
FD80 CC0246BDE30B     (        forth.asm):04129                 MINDREQ 2               We need at least two cells stacked up
FD86 AEC4             (        forth.asm):04130 (5+0)           ldx     ,u              ADDR to X
FD88 EC84             (        forth.asm):04131 (5+0)           ldd     ,x              @ADDR to D
FD8A A342             (        forth.asm):04132 (5+1)           subd    2,u             Substract INCR from D
FD8C 20CF             (        forth.asm):04133 (3)             bra     PLUSST1
                      (        forth.asm):04134         
FD8E 02               (        forth.asm):04135         CSTORE  fcb     2               79-STANDARD (REQ219)
FD8F 4321             (        forth.asm):04136                 fcc     'C!'            ( val8 addr -- )
FD91 FD7A             (        forth.asm):04137                 fdb     MINUSST
FD93 C7               (        forth.asm):04138                 RFCS
FD94 CC0246BDE30B     (        forth.asm):04139                 MINDREQ 2               We need at least two cells stacked up
FD9A A643             (        forth.asm):04140 (4+1)           lda     3,u             VAL8 to A
FD9C A7D4             (        forth.asm):04141 (4+3)           sta     [,u]            Actual store to ADDR
FD9E 3344             (        forth.asm):04142 (4+1)           leau    4,u             Drop two cells from the data stack
FDA0 39               (        forth.asm):04143 (4)             rts
                      (        forth.asm):04144         
FDA1 01               (        forth.asm):04145         STORE   fcb     1               79-STANDARD (REQ112)
FDA2 21               (        forth.asm):04146                 fcc     '!'             ( data addr -- )
FDA3 FD8E             (        forth.asm):04147                 fdb     CSTORE
FDA5 C7               (        forth.asm):04148                 RFCS
FDA6 CC0246BDE30B     (        forth.asm):04149                 MINDREQ 2               At least two cells need to be stacked up
FDAC EC42             (        forth.asm):04150 (5+1)           ldd     2,u             DATA to D
FDAE EDD4             (        forth.asm):04151 (5+3)           std     [,u]            Actual store to ADDR
FDB0 3344             (        forth.asm):04152 (4+1)           leau    4,u             Drop two cells from the user stack
FDB2 39               (        forth.asm):04153 (4)             rts
                      (        forth.asm):04154         
FDB3 02               (        forth.asm):04155         CFETCH  fcb     2               79-STANDARD (REQ156)
FDB4 4340             (        forth.asm):04156                 fcc     'C@'            ( addr -- val8 )
FDB6 FDA1             (        forth.asm):04157                 fdb     STORE
FDB8 C7               (        forth.asm):04158                 RFCS
FDB9 CC0248BDE30B     (        forth.asm):04159                 MINDREQ 1               We need at least one cell stacked up
FDBF 4F               (        forth.asm):04160 (1)             clra
FDC0 E6D4             (        forth.asm):04161 (4+3)           ldb     [,u]
FDC2 EDC4             (        forth.asm):04162 (5+0)           std     ,u
FDC4 39               (        forth.asm):04163 (4)             rts
                      (        forth.asm):04164         
FDC5 01               (        forth.asm):04165         QMARK   fcb     1               79-STANDARD (REQ194)
FDC6 3F               (        forth.asm):04166                 fcc     '?'
FDC7 FDB3             (        forth.asm):04167                 fdb     CFETCH
FDC9 C7               (        forth.asm):04168                 RFCS
FDCA BD0C15           (        forth.asm):04169 (7)             jsr     RAMFTCH         Call the RAM based incarnation of @
FDCD 7EF4F3           (        forth.asm):04170                 RFXT    jmp,DOT+4       XT for .
                      (        forth.asm):04171         
                      (        forth.asm):04172         * End of ROM part of the builtin dictionary.
     FDD0             (        forth.asm):04173         THEEND  equ     *               This is the end, Beautiful friend
                      (        forth.asm):04174         *                               This is the end, My only friend
                      (        forth.asm):04175         
                      (        forth.asm):04176         * This transactional word is relocated to RAM, so that we can compile new
                      (        forth.asm):04177         * definitions. FORTHIN will take care of that and adjust the relevant pointers.
FDD0 01               (        forth.asm):04178         FETCH   fcb     1               79-STANDARD (REQ199)
FDD1 40               (        forth.asm):04179                 fcc     '@'             ( addr -- data )
FDD2 FDC5             (        forth.asm):04180                 fdb     QMARK
FDD4 C7               (        forth.asm):04181                 RFCS
FDD5 CC0248BDE30B     (        forth.asm):04182                 MINDREQ 1               At least one cell needs to be stacked up
FDDB ECD4             (        forth.asm):04183 (5+3)           ldd     [,u]
FDDD EDC4             (        forth.asm):04184 (5+0)           std     ,u              Returned through the data stack
FDDF 39               (        forth.asm):04185 (4)             rts
                      (        forth.asm):04186         
     FDE0             (        forth.asm):04187         REALEND equ     *
                      (        forth.asm):04188         
                      (        forth.asm):04189         *******************************************************************************
                      (        forth.asm):04190         * String literals.
                      (        forth.asm):04191         
                      (        forth.asm):04192         * Using CR+LF as it is Minicom's default.
                      (        forth.asm):04193         
                      (        forth.asm):04194         * Clear the screen, VT100 style.
FDE0 1B5B481B5B4A0D00 (        forth.asm):04195         CSVT100 fcb     $1B,'[','H',$1B,'[','J',CR,NUL
                      (        forth.asm):04196         
FDE8 1B5B481B5B4A0D   (        forth.asm):04197         BOOTMSG fcb     $1B,'[','H',$1B,'[','J',CR
FDEF 5A3739466F727468 (        forth.asm):04198                 fcc     'Z79Forth - 6309 FORTH-79 Standard Sub-set.'
     202D203633303920
     464F5254482D3739
     205374616E646172
     64205375622D7365
     742E
FE19 0D0A             (        forth.asm):04199                 fcb     CR,LF
FE1B 3230323130323238 (        forth.asm):04200                 fcc     '20210228 Copyright Francois Laagel (2020).'
     20436F7079726967
     6874204672616E63
     6F6973204C616167
     656C202832303230
     292E
FE45 0D0A0D0A00       (        forth.asm):04201                 fcb     CR,LF,CR,LF,NUL
                      (        forth.asm):04202         
FE4A 52414D204F4B3A20 (        forth.asm):04203         RAMOKM  fcc     'RAM OK: 32 KB.'
     3332204B422E
FE58 0D0A00           (        forth.asm):04204         CRLFSTR fcb     CR,LF,NUL
                      (        forth.asm):04205         
FE5B 52414D2063686563 (        forth.asm):04206         RAMFM   fcc     'RAM check failed.'
     6B206661696C6564
     2E
FE6C 0D0A00           (        forth.asm):04207                 fcb     CR,LF,NUL
                      (        forth.asm):04208         
FE6F 204F4B           (        forth.asm):04209         OKPRMPT fcc     ' OK'
FE72 0D0A00           (        forth.asm):04210                 fcb     CR,LF,NUL
                      (        forth.asm):04211         
                      (        forth.asm):04212         * Error messages for IODZHDL.
FE75 496C6C6567616C20 (        forth.asm):04213         IOPERRM fcn     'Illegal opcode near '
     6F70636F6465206E
     6561722000
FE8A 4469766973696F6E (        forth.asm):04214         DV0ERRM fcn     'Division by zero near '
     206279207A65726F
     206E6561722000
                      (        forth.asm):04215         
FEA1 4461746120737461 (        forth.asm):04216         ERRMTBL fcn     'Data stack overflow'   Error 0
     636B206F76657266
     6C6F7700
FEB5 4461746120737461 (        forth.asm):04217                 fcn     'Data stack underflow'  Error 1
     636B20756E646572
     666C6F7700
FECA 556E646566696E65 (        forth.asm):04218                 fcn     'Undefined'             Error 2
     6400
FED4 557365722041424F (        forth.asm):04219                 fcn     'User ABORT'            Error 3
     525400
FEDF 00               (        forth.asm):04220                 fcn     ''                      Error 4 (formerly "Division by zero")
FEE0 4D697373696E6720 (        forth.asm):04221                 fcn     'Missing word name'     Error 5
     776F7264206E616D
     6500
FEF2 496E636F72726563 (        forth.asm):04222                 fcn     'Incorrect STATE'       Error 6
     7420535441544500
FF02 52657475726E2073 (        forth.asm):04223                 fcn     'Return stack overflow' Error 7
     7461636B206F7665
     72666C6F7700
FF18 52657475726E2073 (        forth.asm):04224                 fcn     'Return stack underflow' Error 8
     7461636B20756E64
     6572666C6F7700
FF2F 496C6C6567616C20 (        forth.asm):04225                 fcn     'Illegal construct'     Error 9
     636F6E7374727563
     7400
FF41 417373657274696F (        forth.asm):04226                 fcn     'Assertion failed'      Error 10
     6E206661696C6564
     00
FF52 522F4F20776F7264 (        forth.asm):04227                 fcn     'R/O word'              Error 11
     00
FF5B 4D697373696E6720 (        forth.asm):04228                 fcn     'Missing delimiter'     Error 12
     64656C696D697465
     7200
FF6D 496C6C6567616C20 (        forth.asm):04229                 fcn     'Illegal argument'      Error 13
     617267756D656E74
     00
FF7E 4E6F206D61746368 (        forth.asm):04230                 fcn     'No matching CREATE'    Error 14
     696E672043524541
     544500
FF91 496E76616C696420 (        forth.asm):04231                 fcn     'Invalid BASE'          Error 15
     4241534500
FF9E 576F7264206E616D (        forth.asm):04232                 fcn     'Word name too long'    Error 16
     6520746F6F206C6F
     6E6700
FFB1 494F206572726F72 (        forth.asm):04233                 fcn     'IO error'              Error 17
     00
                      (        forth.asm):04234         
     FFBA             (        forth.asm):04235         AVL     equ     *               Marker of available EEPROM space left
                      (        forth.asm):04236         
                      (        forth.asm):04237         *******************************************************************************
                      (        forth.asm):04238         * Interrupt vector table
                      (        forth.asm):04239                 org     VECTBL
                      (        forth.asm):04240         
FFF0 E000             (        forth.asm):04241                 fdb     IODZHDL         Illegal opcode/Division by zero trap
FFF2 E035             (        forth.asm):04242                 fdb     SWI3HDL         SWI 3 interrupt vector address
FFF4 E035             (        forth.asm):04243                 fdb     SWI2HDL         SWI 2 interrupt vector address
FFF6 E035             (        forth.asm):04244                 fdb     FIRQHDL         FIRQ interrupt vector address
FFF8 E035             (        forth.asm):04245                 fdb     IRQHDL          IRA interrupt vector address
FFFA E035             (        forth.asm):04246                 fdb     SWIHDL          SWI interrupt vector address
FFFC E035             (        forth.asm):04247                 fdb     NMIHDL          NMI vector address
FFFE E036             (        forth.asm):04248                 fdb     RSTHDL          RESET vector address
                      (        forth.asm):04249         

Symbol Table:
[ G] _BS                              E1F2
[ G] _DMPHDR                          FAF0
[ G] _DMPINT                          FACF
[ G] _INTERP                          E0C0
[ G] ABORT                            EF9C
[ G] ABS                              EE30
[ G] AC8N1                            0014
[ G] ACD16                            0001
[ G] ACD64                            0002
[ G] ACDVSEL                          0001
[ G] ACIACTL                          D800
[ G] ACIADAT                          D801
[ G] ACIOVRN                          0020
[ G] ACIRDRF                          0001
[ G] ACIRSET                          0043
[ G] ACIRTS0                          0015
[ G] ACIRTS1                          0055
[ G] ACITDRE                          0002
[ G] ACQMOVP                          E462
[ G] ACQVMRA                          E468
[ G] ACRST                            0003
[ G] ACRTS0                           0000
[ G] ACRTS1                           0040
[ G] ADDS                             E19D
[ G] ADIV16                           E170
[ G] AGAIN                            EE6C
[ G] ALLOT                            FC7C
[ G] AND                              ED1A
[ G] AVL                              FFBA
[ G] BASE                             F9D7
[ G] BCSOPC                           2503
[ G] BDICEND                          010C
[ G] BDIRTY                           0004
[ G] BEGIN                            EE5E
[ G] BFDISP                           0410
[ G] BIN                              F9E5
[ G] BINUSE                           0001
[ G] BKCHAR                           F12B
[ G] BKCOMP                           EFEA
[ G] BKIN2PT                          E6D8
[ G] BKQUOT                           F020
[ G] BKSLSH                           F1E2
[ G] BL                               F55F
[ G] BLANKS                           FCB9
[ G] BLK                              E90A
[ G] BLKSIZ                           0400
[ G] BLOCK                            E8DB
[ G] BLSTWAD                          010A
[ G] BMAPPD                           0002
[ G] BNEOPC                           2603
[ G] BOBLKNO                          0402
[ G] BOFLAGS                          0401
[ G] BOOTMSG                          FDE8
[ G] BOTERM                           0400
[ G] BS                               0008
[ G] BSBFADR                          0126
[ G] BUF0                             03F0
[ G] BUF1                             0800
[ G] BUFFER                           E88E
[ G] BYE                              F121
[ G] CCOMMA                           FC57
[ G] CELLS                            FD1F
[ G] CF1BKRD                          E7DD
[ G] CF1BKWR                          E7F8
[ G] CF1BPRE                          E7C0
[ G] CF1SRD                           E792
[ G] CF1SWR                           E7AB
[ G] CFANTHS                          E73D
[ G] CFBASE                           C000
[ G] CFBSYB                           0080
[ G] CFCARDP                          0135
[ G] CFCHIGR                          C005
[ G] CFCLOWR                          C004
[ G] CFCMDIS                          E722
[ G] CFCMMIR                          0136
[ G] CFCOMDR                          C007
[ G] CFDATAR                          C000
[ G] CFDRHDR                          C006
[ G] CFDRQB                           0008
[ G] CFDRSEL                          E734
[ G] CFDSCB                           0010
[ G] CFDWFB                           0020
[ G] CFERRB                           0001
[ G] CFERRCD                          0137
[ G] CFERRCK                          E715
[ G] CFERROR                          C001
[ G] CFETCH                           FDB3
[ G] CFFEATR                          C001
[ G] CFIDDEV                          00EC
[ G] CFINIT                           E75B
[ G] CFLAG                            0001
[ G] CFR1SRA                          E7AA
[ G] CFRDY                            E6FF
[ G] CFRDYB                           0040
[ G] CFRSCTS                          0020
[ G] CFSCNTR                          C002
[ G] CFSCSZ                           0200
[ G] CFSETFT                          00EF
[ G] CFSNUMR                          C003
[ G] CFSTATR                          C007
[ G] CFWAIT                           E6F7
[ G] CFWSCTS                          0030
[ G] CHAR                             F13A
[ G] CHKNDPT                          E30B
[ G] CHKRTS                           E13A
[ G] CKBASE                           E2A4
[ G] CKBASRA                          E2B4
[ G] CKDPTRA                          E316
[ G] CKOVRUN                          0000
[ G] CMDBFSZ                          0084
[ G] CMDBUF                           02CA
[ G] CMDLNSZ                          0128
[ G] CMOVE                            FCF9
[ G] CMOVED                           FCC9
[ G] CMP2                             E44B
[ G] CMP2RA                           E451
[ G] CMPCOM1                          F049
[ G] CMPCOMA                          F03A
[ G] COM                              ED31
[ G] COM0                             ED38
[ G] COMMA                            FC6B
[ G] COMP                             E10D
[ G] COMPC                            F058
[ G] COMPLRA                          E123
[ G] COMPR                            F070
[ G] CONS                             EA86
[ G] CONTIND                          F6D9
[ G] CONVERT                          F36A
[ G] COUNT                            F5D4
[ G] CR                               000D
[ G] CREAT0                           EA15
[ G] CREAT1                           EA2D
[ G] CREATE                           EA0B
[ G] CRLF                             F5A0
[ G] CRLFSTR                          FE58
[ G] CSSNTVE                          0000
[ G] CSTORE                           FD8E
[ G] CSUMFLM                          EB73
[ G] CSVT100                          FDE0
[ G] CURTOKL                          0131
[ G] CVISSGN                          0130
[ G] CVNSTR                           E316
[ G] CVT                              F432
[ G] CVT0                             F439
[ G] CVT1                             F441
[ G] CVTB                             F4E2
[ G] CVTE                             F3E6
[ G] CVTFCN                           012E
[ G] DASHTR                           F5EA
[ G] DCMOVE                           FCE8
[ G] DDUMP                            FB2E
[ G] DEBUG                            0000
[ G] DECIMAL                          FA01
[ G] DEFFLG                           0133
[ G] DEFFLM                           0040
[ G] DEPTH                            E9F5
[ G] DEV0                             C000
[ G] DEV1                             C400
[ G] DEV2                             C800
[ G] DEV3                             CC00
[ G] DEV4                             D000
[ G] DEV5                             D400
[ G] DEV6                             D800
[ G] DEV7                             DC00
[ G] DICEND                           0108
[ G] DIFF                             ECAE
[ G] DIV                              F854
[ G] DIV1                             F85D
[ G] DIVFCN                           012C
[ G] DLESS                            F2BC
[ G] DNEG                             F289
[ G] DO                               EB8A
[ G] DOES                             EA35
[ G] DOESEX                           EA44
[ G] DOEX                             EB9D
[ G] DOT                              F4EE
[ G] DOTR                             F518
[ G] DOTR0                            F522
[ G] DOTTICK                          FB17
[ G] DPLUS                            F267
[ G] DPOPRA                           E6A0
[ G] DPSHRA                           E691
[ G] DROP                             FBC0
[ G] DUMP                             FA1F
[ G] DUP                              FBAE
[ G] DV0ERRM                          FE8A
[ G] DZEQ                             F2AF
[ G] EBUFS                            E813
[ G] ELSE                             EC5F
[ G] EMIT                             F745
[ G] EMPT1B                           E279
[ G] EMPTYB                           E271
[ G] EMXASXT                          E14E
[ G] END                              EED5
[ G] EQ                               EC92
[ G] ERRHD1                           E60E
[ G] ERRHDLR                          E60B
[ G] ERRMTBL                          FEA1
[ G] ERRPCK                           FBFA
[ G] ETX                              0003
[ G] EXCT                             F107
[ G] EXIT                             EE8A
[ G] EXPECT                           F625
[ G] FDCTSYM                          E473
[ G] FETCH                            FDD0
[ G] FILL                             FC92
[ G] FILL1                            FC9F
[ G] FIND                             EFB0
[ G] FINDSYM                          E4E7
[ G] FIRQHDL                          E035
[ G] FLUSH                            E868
[ G] FNDPLD                           0110
[ G] FORGET                           F0B8
[ G] FORTHIN                          E241
[ G] GETCH                            E1C6
[ G] GETS                             E1FE
[ G] HDMP2                            E18E
[ G] HDMP4                            E175
[ G] HDRCSUM                          EB1D
[ G] HDRSKIP                          EB13
[ G] HERE                             FD3E
[ G] HEX                              FA12
[ G] HEX1D                            E15C
[ G] HEXBFSZ                          0050
[ G] HEXBUF                           034E
[ G] HOLD                             F416
[ G] HT                               0009
[ G] ICHECK                           EB29
[ G] IF                               EC1E
[ G] IFEX                             EC46
[ G] ILLOPC                           00C7
[ G] IMDFLG                           0132
[ G] IMDFLM                           0080
[ G] IMMED                            EACD
[ G] IMMED1                           EADC
[ G] INDEX                            E94C
[ G] INDI                             EF3A
[ G] INDIP                            EF5F
[ G] INDJ                             EF69
[ G] INDJP                            EF72
[ G] INDK                             EF7C
[ G] INF                              EDEF
[ G] INIT                             E048
[ G] INSBPAD                          F4CF
[ G] INTERP                           E0A8
[ G] INTISRA                          E0FB
[ G] INTRPRA                          E108
[ G] INVERT                           ED44
[ G] IODZHDL                          E000
[ G] IOERR                            E7A5
[ G] IOPERRM                          FE75
[ G] IOSTRT                           C000
[ G] IRDPTH                           012A
[ G] IRQHDL                           E035
[ G] ISNEGF                           012F
[ G] JMPOPC                           007E
[ G] JSRLAST                          0114
[ G] JSROPC                           00BD
[ G] KEY                              F733
[ G] KEYP                             F70E
[ G] LAST                             FD31
[ G] LBRACK                           EFE2
[ G] LDXOPC                           008E
[ G] LEAVE                            EF25
[ G] LF                               000A
[ G] LINE                             E931
[ G] LIST                             E980
[ G] LITER                            E42F
[ G] LITERAL                          EA62
[ G] LOAD                             F668
[ G] LOAD1                            F679
[ G] LOCWRT                           E3CD
[ G] LOOP                             EBA6
[ G] LOOP1                            EBB1
[ G] LOOPEX                           EBCD
[ G] LPAR                             F1A8
[ G] LSTWAD                           0106
[ G] LWMNRA                           E3E3
[ G] MAX                              EDFE
[ G] MDIV                             F89B
[ G] MILLIS                           F6F3
[ G] MILLIS1                          F702
[ G] MIN                              EE17
[ G] MINTLRA                          E0BE
[ G] MINUS                            F792
[ G] MINUSST                          FD7A
[ G] MOD                              F88E
[ G] MONFLM                           0020
[ G] MONITOR                          EAF6
[ G] MORE                             E0D6
[ G] MOVE                             FD09
[ G] MROT                             FC4B
[ G] MRUBUFA                          011A
[ G] MSLCNT                           03E2
[ G] MULT                             F818
[ G] NAK                              0015
[ G] NBCTFB0                          0134
[ G] NCLR                             E9D9
[ G] NDCTWKS                          E50D
[ G] NEGATE                           EE47
[ G] NFLAG                            0008
[ G] NIP                              FB9A
[ G] NMCVCRA                          E135
[ G] NMCVIRA                          E0D1
[ G] NMIHDL                           E035
[ G] NOT                              ED9C
[ G] NPOP                             E692
[ G] NPUSH                            E684
[ G] NSTBOT                           024A
[ G] NSTKSZ                           00C0
[ G] NSTTOP                           018A
[ G] NUL                              0000
[ G] NULP                             ED84
[ G] NUMCVRA                          E30B
[ G] NUMCVT                           E2B4
[ G] NXTBLK                           F6BE
[ G] NXTBLK1                          F6C9
[ G] OCTAL                            F9F2
[ G] OKPRMPT                          FE6F
[ G] ONEL                             F7D7
[ G] ONEM                             F7A6
[ G] ONEP                             F76B
[ G] ONEPST                           FD62
[ G] OR                               ED04
[ G] OVER                             FC14
[ G] PAD                              F5A9
[ G] PADBSZ                           0051
[ G] PADBUF                           0138
[ G] PAGE                             F592
[ G] PAYLOAD                          F8E8
[ G] PICK                             FBE2
[ G] PICK1                            FBED
[ G] PLOAD                            010E
[ G] PLOOP                            EBD2
[ G] PLOOPEX                          EBE0
[ G] PLOPEX1                          EBE3
[ G] PLUS                             F757
[ G] PLUSST                           FD4B
[ G] PLUSST1                          FD5D
[ G] POSTPON                          F02C
[ G] pragma                           0000
[ G] PRBLKIN                          E5E6
[ G] PSTR                             F200
[ G] ptop0                            F4F7
[ G] PUTCH                            E1B7
[ G] PUTCR                            E1E8
[ G] PUTS                             E1DB
[ G] QMARK                            FDC5
[ G] QRYDUP                           FB69
[ G] QUIT                             EF85
[ G] RAMCHK                           E058
[ G] RAMFAIL                          E06A
[ G] RAMFM                            FE5B
[SG] RAMFTCH                          0C15
[SG] RAMFTCH                          0C14
[ G] RAMOK                            E07C
[ G] RAMOKM                           FE4A
[ G] RAMSIZE                          8000
[ G] RAMSTRT                          0000
[ G] RBRACK                           EFD8
[ G] RCLR                             E9E5
[ G] RDEPTH                           0129
[ G] REALEND                          FDE0
[ G] RECADDR                          0112
[ G] RECURSE                          F0A8
[ G] RELFEAT                          0001
[ G] REPEAT                           EEEA
[ G] RFETCH                           EF57
[ G] RFROM                            EF0D
[ G] ROLL                             FC21
[ G] ROLL1                            FC2C
[ G] ROMSTRT                          E000
[ G] ROT                              FC3F
[ G] RPICKN                           EF41
[ G] RPOP                             E6BF
[ G] RPOPRA                           E6D8
[ G] RPSHRA                           E6BE
[ G] RPUSH                            E6A1
[ G] RSP                              0100
[ G] RSTBOT                           02CA
[ G] RSTHDL                           E036
[ G] RSTKSZ                           0080
[ G] RSTRCT                           EAE6
[ G] RSTTOP                           024A
[ G] RTSOPC                           0039
[ G] RTSREMV                          012B
[ G] SAVBUF                           E827
[ G] SCNETOK                          E292
[ G] SCNSTOK                          E284
[ G] SCR                              E924
[ G] SHARPS                           F426
[ G] SHIFT                            F7ED
[ G] SIGN                             F3FF
[ G] SINFEQ                           ECCB
[ G] SLEN                             E1A8
[ G] SOURCE                           F1C4
[ G] SP                               0020
[ G] SPACE                            F56B
[ G] SPACES                           F579
[ G] SQUOTE                           F215
[ G] SSDFEAT                          0001
[ G] STATE                            F9C8
[ G] STOD                             E9BF
[ G] STORE                            FDA1
[ G] STRSL1                           F8B1
[ G] STRSLMD                          F8D1
[ G] STRSLSH                          F8A7
[ G] STSLFCN                          012D
[ G] SUP                              EDE0
[ G] SWAP                             FBCB
[ G] SWDIC                            E35F
[ G] SWI2HDL                          E035
[ G] SWI3HDL                          E035
[ G] SWIHDL                           E035
[ G] SYSSTK                           F8DE
[ G] TBUFF                            039E
[ G] TBUFSZ                           0048
[ G] TERPRET                          F63E
[ G] THEEND                           FDD0
[ G] THEN                             EC80
[ G] THRU                             F69C
[ G] TOIN                             E917
[ G] TOKENEP                          0104
[ G] TOKENSP                          0102
[ G] TOR                              EF19
[ G] TUCK                             FB7F
[ G] TWODIV                           F841
[ G] TWODROP                          F311
[ G] TWODUP                           F323
[ G] TWOFTCH                          F353
[ G] TWOL                             F7E2
[ G] TWOM                             F7B9
[ G] TWOOVER                          F2D5
[ G] TWOP                             F77E
[ G] TWOSTOR                          F33E
[ G] TWOSWAP                          F2F1
[ G] TWOTIM                           F82E
[ G] TYPE                             F5B6
[ G] UBASE                            011C
[ G] UBLK                             0122
[ G] UDOT                             F50E
[ G] UDOTR                            F554
[ G] UINF                             EDB5
[ G] UNLESS                           EC4D
[ G] UNLOOP                           EC0E
[ G] UNTIL                            EEAC
[ G] UPDATE                           E873
[ G] USCR                             0124
[ G] USEDP                            0001
[ G] USTATE                           011E
[ G] USUP                             EDA5
[ G] UTOIN                            0120
[ G] VARCON                           E441
[ G] VARCON1                          E443
[ G] VARCON2                          E446
[ G] VARI                             EAA8
[ G] VARSPC                           0100
[ G] VECTBL                           FFF0
[ G] VLIST                            F8F8
[ G] VLPRVEP                          0116
[ G] VLPRVHD                          0118
[ G] VT100                            0000
[ G] WBIFDRT                          E83F
[ G] WDICSPC                          0C10
[ G] WHILE                            EEDE
[ G] WITHIN                           EDC5
[ G] WORD                             F163
[ G] WRLNMSK                          001F
[ G] WTOOLNG                          E400
[ G] XOR                              ECEA
[ G] XOR1                             ECFF
[ G] ZEROL                            F7CD
[ G] ZFLAG                            0004
[ G] ZGREAT                           ED50
[ G] ZLESS                            ED6A
