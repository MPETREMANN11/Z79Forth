                      (        forth.asm):00001         * 6309 Forth based on my 1984/07/16 TRS-80 Model 1 level II ROM implementation.
                      (        forth.asm):00002         *
                      (        forth.asm):00003         * This work is dedicated to Alain Pinaud, author of "Programmer en Forth"
                      (        forth.asm):00004         * published by Editions du P.S.I. in 1983--i.e. my virtual mentor in the field.
                      (        forth.asm):00005         * Special thanks go William Astle for his fantastic LW Tools utility set and
                      (        forth.asm):00006         * to Robert Lipe for his advice on serial line handling. Apache subversion
                      (        forth.asm):00007         * and the sdiff utility also were on my side all the time.
                      (        forth.asm):00008         *
                      (        forth.asm):00009         * Also credited for their help: Justin Poirier (seminal HW design), Daniel
                      (        forth.asm):00010         * Tufvesson (CompactFlash interface), Peter Forth (FB alias), Paul E. Bennett
                      (        forth.asm):00011         * and Michel Jean.
                      (        forth.asm):00012         *
                      (        forth.asm):00013         * This is a native Forth. Not a threaded interpretive implementation.
                      (        forth.asm):00014         * Worth noticing is the fact that the return stack does not hold return
                      (        forth.asm):00015         * addresses at all. All what is stored there is loop indexes and control
                      (        forth.asm):00016         * structures jump addresses. Actual return addresses are kept in the system
                      (        forth.asm):00017         * stack. All in all, this is the result of the work of a 19 year old guy,
                      (        forth.asm):00018         * heavily revisited 35 years later. Some quirks remain that prevent me
                      (        forth.asm):00019         * from offering the full required set--not to mention the choice of using
                      (        forth.asm):00020         * an 8K EEPROM. The downside of this implementation is that the generated
                      (        forth.asm):00021         * code is about 30% larger than a threaded interpretive implementation
                      (        forth.asm):00022         * would be. So it goes...
                      (        forth.asm):00023         *
                      (        forth.asm):00024         * The code generated is limited to a very small instruction set:
                      (        forth.asm):00025         *
                      (        forth.asm):00026         * LDXOPC        $8E     LDX (immediate)
                      (        forth.asm):00027         * JMPOPC        $7E     JMP (extended)
                      (        forth.asm):00028         * JSROPC        $BD     JSR (extended)
                      (        forth.asm):00029         * RTSOPC        $39     RTS (inherent)
                      (        forth.asm):00030         * BCSOPC        $2503   BCS *+5 (relative) Used in LOOP, +LOOP
                      (        forth.asm):00031         * BNEOPC        $2603   BNE *+5 (relative) Used in IF, UNTIL
                      (        forth.asm):00032         *
                      (        forth.asm):00033         * On error, the system stack pointer is reset. The return stack also is 
                      (        forth.asm):00034         * but the data stack will be in the same state as when the error occurred.
                      (        forth.asm):00035         * ABORT and QUIT enforce their own 79-STANDARD behaviour.
                      (        forth.asm):00036         *
                      (        forth.asm):00037         * The 79-STANDARD Forth specification can be downloaded from
                      (        forth.asm):00038         * https://www.complang.tuwien.ac.at/forth/fth79std/FORTH-79.TXT
                      (        forth.asm):00039         *
                      (        forth.asm):00040         * Additionally, this implementation provides a few FORTH-83 words. Those
                      (        forth.asm):00041         * words are CMOVE> and RECURSE. See
                      (        forth.asm):00042         * http://forth.sourceforge.net/standard/fst83/FORTH-83.PRN
                      (        forth.asm):00043         *
                      (        forth.asm):00044         * \ ['] [CHAR] .S CELLS CHAR COMPILE, INVERT KEY? NIP POSTPONE SOURCE TUCK U>
                      (        forth.asm):00045         * UNLOOP and WITHIN have been borrowed from the ANSI draft 6 specification.
                      (        forth.asm):00046         * See http://www.forth.org/svfig/Win32Forth/DPANS94.txt
                      (        forth.asm):00047         *
                      (        forth.asm):00048         * RESTRICT is non-standard. It comes from GNU Forth (VolksForth). The " OK"
                      (        forth.asm):00049         * non-prompt string also does, by the way. Thanks to Anton Ertl for his terse
                      (        forth.asm):00050         * yet valuable input.
                      (        forth.asm):00051         *
                      (        forth.asm):00052         * .' (dot-tick) is non-standard. It comes from SwiftForth. It will be supported
                      (        forth.asm):00053         * if symbolic stack dump has not been disabled (see SSDFEAT in constants.asm).
                      (        forth.asm):00054         *
                      (        forth.asm):00055         * MONITOR and ICHECK are also non-standard. They are intended to maintain and
                      (        forth.asm):00056         * verify the integrity of a checksum of the code section of RAM resident
                      (        forth.asm):00057         * words, with the exception of VARIABLEs and CREATEd words. CREATEd words,
                      (        forth.asm):00058         * if subject to the MONITOR treatment will also carry a code section
                      (        forth.asm):00059         * checksum, although this is not the default behaviour. The checksum will
                      (        forth.asm):00060         * consist in an extra byte added to every word's header. MONITOR and ICHECK
                      (        forth.asm):00061         * will only be available if the reliability feature has not been disabled
                      (        forth.asm):00062         * (see RELFEAT in constants.asm).
                      (        forth.asm):00063         *
                      (        forth.asm):00064         * Forth source code portability note:
                      (        forth.asm):00065         * Because Z79Forth does not use the return stack to store return addresses,
                      (        forth.asm):00066         * it makes it quite easy to write code that is not readily portable to classic
                      (        forth.asm):00067         * threaded interpretive implementations. The resulting code will be simpler but
                      (        forth.asm):00068         * portability will be limited.
                      (        forth.asm):00069         *
                      (        forth.asm):00070         * Miscellaneous notes: RA stands for return address; EP for entry point.
                      (        forth.asm):00071         * CF is a shortcut for CompactFlash. TOS means top of the data/normal stack.
                      (        forth.asm):00072         * Occasionally, CFA is used for code field address which, in this
                      (        forth.asm):00073         * implementation, is a synonym for compilation address. XT means execution
                      (        forth.asm):00074         * token--the ANSI term for a compilation address. MSC stands for most
                      (        forth.asm):00075         * significant cell; LSC for least significant cell.
                      (        forth.asm):00076         *
                      (        forth.asm):00077         * The complete guide to the HD6309 extended instruction set can be found at:
                      (        forth.asm):00078         * https://cyberabi.ipower.com/Downloads/The_6309_Book.pdf. For convenience,
                      (        forth.asm):00079         * and with the author's explicit agreement, this document has been included
                      (        forth.asm):00080         * in this distribution. This is recommended reading for anyone altering this
                      (        forth.asm):00081         * code or trying to make some sense of it!!!
                      (        forth.asm):00082         *
                      (        forth.asm):00083         * This whole effort started out as a porting endeavour and ended up being a
                      (        forth.asm):00084         * substantial rewrite, trying to take advantage of the features of the 6309
                      (        forth.asm):00085         * as much as possible. The primary goals of this implementation are:
                      (        forth.asm):00086         * reliability, performance and code compactness. A number of bugs in the
                      (        forth.asm):00087         * original code have been fixed--some remain for sure!
                      (        forth.asm):00088         *
                      (        forth.asm):00089         * Obligatory literary reference:
                      (        forth.asm):00090         * "The paper is very heavy going, and I should never have read it, had I not
                      (        forth.asm):00091         * written it myself." J. E. Littlewood (1885-1977).
                      (        forth.asm):00092         
0000                  (        forth.asm):00093         pragma  opt cd,operandsizewarning
                      (        forth.asm):00094         
                      (        forth.asm):00095                 include constants.asm
                      (    constants.asm):00001         * Memory map.
     0000             (    constants.asm):00002         RAMSTRT equ     $0000
     8000             (    constants.asm):00003         RAMSIZE equ     $8000
     C000             (    constants.asm):00004         IOSTRT  equ     $C000
     E000             (    constants.asm):00005         ROMSTRT equ     $E000
     FFF0             (    constants.asm):00006         VECTBL  equ     $FFF0
                      (    constants.asm):00007         
                      (    constants.asm):00008         * Base address for global variables (direct page addressed by default).
     0100             (    constants.asm):00009         VARSPC  equ     $100
                      (    constants.asm):00010         
                      (    constants.asm):00011         * The 74HCT138 IO address decoder maps one 1KB page per usable device.
     C000             (    constants.asm):00012         DEV0    equ     $C000           Compact Flash memory module
     C400             (    constants.asm):00013         DEV1    equ     $C400
     C800             (    constants.asm):00014         DEV2    equ     $C800
     CC00             (    constants.asm):00015         DEV3    equ     $CC00
     D000             (    constants.asm):00016         DEV4    equ     $D000
     D400             (    constants.asm):00017         DEV5    equ     $D400
     D800             (    constants.asm):00018         DEV6    equ     $D800           HD63B50 unit 0
     DC00             (    constants.asm):00019         DEV7    equ     $DC00
                      (    constants.asm):00020         
     D800             (    constants.asm):00021         ACIACTL equ     DEV6
     D801             (    constants.asm):00022         ACIADAT equ     DEV6+1
                      (    constants.asm):00023         
                      (    constants.asm):00024         * ACIA control register bits.
     0003             (    constants.asm):00025         ACRST   equ     11b             ACIA master reset
                      (    constants.asm):00026         
                      (    constants.asm):00027         * 115200 bps w. 7.37280 MHz oscillator, 38400 bps w. 2.45760 MHz oscillator.
     0001             (    constants.asm):00028         ACD16   equ     01b             ACIA div 16
                      (    constants.asm):00029         * 28800 bps w. 7.37280 MHz oscillator, bps 9600 w. 2.45760 MHz oscillator.
     0002             (    constants.asm):00030         ACD64   equ     10b             ACIA div 64
     0001             (    constants.asm):00031         ACDVSEL equ     ACD16           Selected divider value
                      (    constants.asm):00032         
     0014             (    constants.asm):00033         AC8N1   equ     10100b          ACIA 8N1
     0000             (    constants.asm):00034         ACRTS0  equ     0000000b        ACIA RTS low
     0040             (    constants.asm):00035         ACRTS1  equ     1000000b        ACIA RTS high
                      (    constants.asm):00036         
     0043             (    constants.asm):00037         ACIRSET equ     ACRTS1|ACRST
     0055             (    constants.asm):00038         ACIRTS1 equ     ACRTS1|AC8N1|ACDVSEL
     0015             (    constants.asm):00039         ACIRTS0 equ     ACRTS0|AC8N1|ACDVSEL
                      (    constants.asm):00040         
                      (    constants.asm):00041         * ACIA status register bits.
     0001             (    constants.asm):00042         ACIRDRF equ     1               Receive data register full
     0002             (    constants.asm):00043         ACITDRE equ     2               Transmit data register empty
     0020             (    constants.asm):00044         ACIOVRN equ     32              Overrun status register bit (req. NZ CKOVRUN)
                      (    constants.asm):00045         
                      (    constants.asm):00046         * Compact Flash parameters.
     C000             (    constants.asm):00047         CFBASE  equ     DEV0
     C000             (    constants.asm):00048         CFDATAR equ     CFBASE          R/W data register
     C001             (    constants.asm):00049         CFERROR equ     CFBASE+1        RO error register
     C001             (    constants.asm):00050         CFFEATR equ     CFBASE+1        WO features register
     C002             (    constants.asm):00051         CFSCNTR equ     CFBASE+2        R/W sector count register
     C003             (    constants.asm):00052         CFSNUMR equ     CFBASE+3        R/W sector number register
     C004             (    constants.asm):00053         CFCLOWR equ     CFBASE+4        R/W cylinder low register
     C005             (    constants.asm):00054         CFCHIGR equ     CFBASE+5        R/W cylinder high register
     C006             (    constants.asm):00055         CFDRHDR equ     CFBASE+6        R/W drive/head register
     C007             (    constants.asm):00056         CFSTATR equ     CFBASE+7        RO status register
     C007             (    constants.asm):00057         CFCOMDR equ     CFBASE+7        WO command register
                      (    constants.asm):00058         
                      (    constants.asm):00059         * CF status bits.
     0080             (    constants.asm):00060         CFBSYB  equ     10000000b       BSY status bit
     0040             (    constants.asm):00061         CFRDYB  equ     01000000b       RDY status bit
     0020             (    constants.asm):00062         CFDWFB  equ     00100000b       DWF status bit (not used)
     0010             (    constants.asm):00063         CFDSCB  equ     00010000b       DSC status bit (not used)
     0008             (    constants.asm):00064         CFDRQB  equ     00001000b       DRQ status bit
     0001             (    constants.asm):00065         CFERRB  equ     00000001b       ERR status bit
                      (    constants.asm):00066         
     0200             (    constants.asm):00067         CFSCSZ  equ     $200            Compact Flash (IDE) sector size
                      (    constants.asm):00068         
                      (    constants.asm):00069         * CF commands.
     00EC             (    constants.asm):00070         CFIDDEV equ     $EC             Identify Device
     00EF             (    constants.asm):00071         CFSETFT equ     $EF             Set Feature
     0020             (    constants.asm):00072         CFRSCTS equ     $20             Read Sectors
     0030             (    constants.asm):00073         CFWSCTS equ     $30             Write Sectors
                      (    constants.asm):00074         
                      (    constants.asm):00075         * Buffer in-memory structure:
                      (    constants.asm):00076         * data: 1024 bytes.
                      (    constants.asm):00077         * terminator: 1 byte set to 0.
                      (    constants.asm):00078         * flags: 1 byte.
                      (    constants.asm):00079         * blknum: 2 bytes.
     0001             (    constants.asm):00080         BINUSE  equ     1               Buffer is allocated (the blknum field is valid)
     0002             (    constants.asm):00081         BMAPPD  equ     2               Block has been read from the CF device
     0004             (    constants.asm):00082         BDIRTY  equ     4               Block has been marked for update
     0400             (    constants.asm):00083         BLKSIZ  equ     2*CFSCSZ        Block size is 2 CF sectors (1 KB)
                      (    constants.asm):00084         * Buffer field offsets.
     0401             (    constants.asm):00085         BOFLAGS equ     BLKSIZ+1        Base buffer to the 'flag' field offset
     0402             (    constants.asm):00086         BOBLKNO equ     BLKSIZ+2        Base buffer to the 'blknum' field offset
                      (    constants.asm):00087         
     0410             (    constants.asm):00088         BFDISP  equ     BUF1-BUF0       Offset between resident buffers
                      (    constants.asm):00089         
                      (    constants.asm):00090         * ASCII trivia.
     0000             (    constants.asm):00091         NUL     equ     0               End of string marker
     0003             (    constants.asm):00092         ETX     equ     3               Control-C (intr)
     0008             (    constants.asm):00093         BS      equ     8               Backspace
     0009             (    constants.asm):00094         HT      equ     9               Horizontal tab
     000A             (    constants.asm):00095         LF      equ     $0A             aka new line
     000D             (    constants.asm):00096         CR      equ     $0D             Carriage return
     000C             (    constants.asm):00097         FF      equ     $0C             Form feed (clear screen)
     0015             (    constants.asm):00098         NAK     equ     $15             Control-U (kill)
     0020             (    constants.asm):00099         SP      equ     $20
                      (    constants.asm):00100         
                      (    constants.asm):00101         * Configuration tunable parameters.
     0000             (    constants.asm):00102         CSSNTVE equ     0               Words and HEX numbers are case sensitive if NZ
     0000             (    constants.asm):00103         STRCT79 equ     0               Set to 1 to omit the COMPILE word
     0000             (    constants.asm):00104         DEBUG   equ     0               Enforce assertions and miscellaneous checks
     0000             (    constants.asm):00105         CKOVRUN equ     0               Check for overruns in GETCH
     0001             (    constants.asm):00106         USEDP   equ     1               Set to 1 to use direct page addressing
     0001             (    constants.asm):00107         SSDFEAT equ     1               Set to 1 to enable the symbolic stack dump feat.
     0001             (    constants.asm):00108         RELFEAT equ     1               Set to 1 to enable the reliability feature
                      (    constants.asm):00109         *                               Caution: when this is enabled, you can no
                      (    constants.asm):00110         *                               longer fit a DEBUG image into an 8 KB EEPROM
                      (    constants.asm):00111         * Loop count for MS. This is busy waiting, so we depend on the CPU clock speed.
                      (    constants.asm):00112         *MSLCNT equ     496             at 3 MHz emulation mode
                      (    constants.asm):00113         *MSLCNT equ     662             at 4 MHz emulation mode
                      (    constants.asm):00114         *MSLCNT equ     794             at 4 MHz native mode
     03E2             (    constants.asm):00115         MSLCNT  equ     994             at 5 MHz native mode
                      (    constants.asm):00116         
                      (    constants.asm):00117         * Stack sizes.
     00C0             (    constants.asm):00118         NSTKSZ  equ     192             Expressed in bytes. Now only limited by RAM size
     0080             (    constants.asm):00119         RSTKSZ  equ     128             Expressed in bytes
                      (    constants.asm):00120         
                      (    constants.asm):00121         * Buffer sizes.
     0084             (    constants.asm):00122         CMDBFSZ equ     132             Command line entry buffer
     0050             (    constants.asm):00123         HEXBFSZ equ     80
     0048             (    constants.asm):00124         TBUFSZ  equ     72              Used by VLIST to print word name, CVNSTR
                      (    constants.asm):00125         *                               And DUMP, at offset 69
     0051             (    constants.asm):00126         PADBSZ  equ     1+80            79-STANDARD mandates a minimum of 64 bytes
                      (    constants.asm):00127         
                      (    constants.asm):00128         * Dictionary flag masks.
     0080             (    constants.asm):00129         IMDFLM  equ     $80             Immediate flag mask
     0040             (    constants.asm):00130         DEFFLM  equ     $40             Compilation only flag mask
                      (    constants.asm):00131                 IFNE    RELFEAT
     0020             (    constants.asm):00132         MONFLM  equ     $20             Monitored flag mask. This indicates that the
                      (    constants.asm):00133         *                               word to which it relates might be checked for
                      (    constants.asm):00134         *                               integrity. This applies by default to all words
                      (    constants.asm):00135         *                               defined with : and all constants. It might
                      (    constants.asm):00136         *                               also apply to any other CREATEd object by
                      (    constants.asm):00137         *                               resorting to the MONITOR word. Using MONITOR
                      (    constants.asm):00138         *                               on variable word contents is guaranteed to
                      (    constants.asm):00139         *                               raise ICHECK's attention.
                      (    constants.asm):00140                 ENDC
                      (    constants.asm):00141         
     001F             (    constants.asm):00142         WRLNMSK equ     $1F             31 character is the maximum word length
                      (    constants.asm):00143         
                      (    constants.asm):00144         * 6309 opcodes.
     008E             (    constants.asm):00145         LDXOPC  equ     $8E             LDX (immediate)
     007E             (    constants.asm):00146         JMPOPC  equ     $7E             JMP (extended)
     00BD             (    constants.asm):00147         JSROPC  equ     $BD             JSR (extended)
     0039             (    constants.asm):00148         RTSOPC  equ     $39             RTS (inherent)
     2503             (    constants.asm):00149         BCSOPC  equ     $2503           BCS *+5 (relative)
     2603             (    constants.asm):00150         BNEOPC  equ     $2603           BNE *+5 (relative)
     00C7             (    constants.asm):00151         ILLOPC  equ     $C7             An illegal operation code. Meant to raise a trap
                      (    constants.asm):00152         
     0001             (    constants.asm):00153         CFLAG   equ     1               CC bit 0
     0004             (    constants.asm):00154         ZFLAG   equ     4               CC bit 2
     0008             (    constants.asm):00155         NFLAG   equ     8               CC bit 3
                      (    constants.asm):00156         
                      (    constants.asm):00157         * RAM based execution token for @.
     0C14             (    constants.asm):00158         RAMFTCH set     WDICSPC+4       Dictionary header overhead is word's length + 3
                      (    constants.asm):00159                 IFNE    RELFEAT         The reliability features adds one byte to the
     0C15             (    constants.asm):00160         RAMFTCH set     WDICSPC+5       header: a checksum.
                      (    constants.asm):00161                 ENDC
                      (    constants.asm):00162         
                      (        forth.asm):00096         
                      (        forth.asm):00097         * Unchecked NPUSH. This is for situations in which there is
                      (        forth.asm):00098         * absolutely no chance of overflow. For instance, in case
                      (        forth.asm):00099         * we just popped 2 cells and push back one or two. This
                      (        forth.asm):00100         * always is inlined,
0000                  (        forth.asm):00101         UCNPUSH MACRO   NOEXPAND
                      (        forth.asm):00102                 pshu    x
                      (        forth.asm):00103                 ENDM
                      (        forth.asm):00104         
                      (        forth.asm):00105         * Make sure minimum data stack requirements are satisfied upon word entry.
                      (        forth.asm):00106         * The requirement is expressed in cell size--2 bytes on the 6309.
                      (        forth.asm):00107         * \1 specifies the required number of cells.
0000                  (        forth.asm):00108         MINDREQ MACRO   NOEXPAND
                      (        forth.asm):00109                 ldd     #NSTBOT-(\1*2)  Cell count one expects to be stacked up
                      (        forth.asm):00110                 jsr     CHKNDPT         No return if the condition is not met
                      (        forth.asm):00111                 ENDM
                      (        forth.asm):00112         
                      (        forth.asm):00113         * Reliability feature support: execution tokens.
                      (        forth.asm):00114         * \1 has the opcode we want to emit.
                      (        forth.asm):00115         * \2 has the execution token address, as if the header overhead always
                      (        forth.asm):00116         * was 3 bytes.
0000                  (        forth.asm):00117         RFXT    MACRO   NOEXPAND
                      (        forth.asm):00118                 IFNE    RELFEAT
                      (        forth.asm):00119                 \1      \2+1
                      (        forth.asm):00120                 ELSE
                      (        forth.asm):00121                 \1      \2
                      (        forth.asm):00122                 ENDC
                      (        forth.asm):00123                 ENDM
                      (        forth.asm):00124         
                      (        forth.asm):00125         * Reliability feature support: variable word header contents.
                      (        forth.asm):00126         * This is a dummy checksum only used for EEPROM resident words.
                      (        forth.asm):00127         * Those never are checked for code integrity by MONITOR.
0000                  (        forth.asm):00128         RFCS    MACRO   NOEXPAND
                      (        forth.asm):00129                 IFNE    RELFEAT
                      (        forth.asm):00130                 fcb     ILLOPC          Illegal opcode
                      (        forth.asm):00131                 ENDC
                      (        forth.asm):00132                 ENDM
                      (        forth.asm):00133         
                      (        forth.asm):00134         *******************************************************************************
                      (        forth.asm):00135         * RAM definitions. We cannot initialize globals from the assembly defs.
                      (        forth.asm):00136         * All we can do here is define addresses and size things up.
                      (        forth.asm):00137         
                      (        forth.asm):00138         * RAMSTART is 0. We leave page 0 unused as a bug proof area.
                      (        forth.asm):00139         * When compiled in debug mode, this area is filled with illegal
                      (        forth.asm):00140         * instruction opcodes ($C7).
                      (        forth.asm):00141         
                      (        forth.asm):00142                 org     VARSPC
                      (        forth.asm):00143         
                      (        forth.asm):00144         * Global pointers.
0100                  (        forth.asm):00145         RSP     rmb     2               The return stack pointer
0102                  (        forth.asm):00146         TOKENSP rmb     2               Token start pointer (STRS)
0104                  (        forth.asm):00147         TOKENEP rmb     2               Token end pointer (STRE)
0106                  (        forth.asm):00148         LSTWAD  rmb     2               Last defined word header pointer--LAST
0108                  (        forth.asm):00149         DICEND  rmb     2               Current end of the dictionary--HERE
010A                  (        forth.asm):00150         BLSTWAD rmb     2               Backup (was IX)
010C                  (        forth.asm):00151         BDICEND rmb     2               Backup (was IY)
010E                  (        forth.asm):00152         RECADDR rmb     2               Used by RECURSE
0110                  (        forth.asm):00153         JSRLAST rmb     2               Last compilation address of #JSROPC
0112                  (        forth.asm):00154         VLPRVEP rmb     2               Used in VLIST to compute word code length
0114                  (        forth.asm):00155         VLPRVHD rmb     2               Used in VLIST to compute word code length
0116                  (        forth.asm):00156         MRUBUFA rmb     2               Most recently used buffer address
                      (        forth.asm):00157         
                      (        forth.asm):00158         * Global variables.
0118                  (        forth.asm):00159         UBASE   rmb     2               Base for numbers input and output--BASE
011A                  (        forth.asm):00160         USTATE  rmb     2               0 if interpreting, 1 if compiling--STATE
011C                  (        forth.asm):00161         UTOIN   rmb     2               User variable for >IN
011E                  (        forth.asm):00162         UBLK    rmb     2               User variable for BLK
0120                  (        forth.asm):00163         USCR    rmb     2               User variable for SCR (output for LIST)
0122                  (        forth.asm):00164         BSBFADR rmb     2               Base buffer address for the input stream
                      (        forth.asm):00165                 IFNE    DEBUG
0124                  (        forth.asm):00166         CCREG   rmb     2               A DEBUG variable for predicates (see CMP2)
                      (        forth.asm):00167                 ENDC
0124                  (        forth.asm):00168         CMDLNSZ rmb     1               Entered character count in GETS (INTERP)
0125                  (        forth.asm):00169         RDEPTH  rmb     1               Return stack depth in cells
0126                  (        forth.asm):00170         IRDPTH  rmb     1               Return stack depth when : was last invoked
0127                  (        forth.asm):00171         RTSREMV rmb     1               If > 1, omit the final RTS when compiling
0128                  (        forth.asm):00172         DIVFCN  rmb     1               Flag used by /, MOD and /MOD
0129                  (        forth.asm):00173         STSLFCN rmb     1               Flag used by */, */MOD
012A                  (        forth.asm):00174         CVTFCN  rmb     1               CVT: 0 => # semantics, 1 => #S semantics
012B                  (        forth.asm):00175         ISNEGF  rmb     1               Number being scanned is negative
012C                  (        forth.asm):00176         CVISSGN rmb     1               Flag: should CVNSTR consider numbers as signed
012D                  (        forth.asm):00177         CURTOKL rmb     1               Current token length. Set by SWDIC
012E                  (        forth.asm):00178         IMDFLG  rmb     1               Immediate flag
012F                  (        forth.asm):00179         DEFFLG  rmb     1               Define flag
0130                  (        forth.asm):00180         NBCTFB0 rmb     1               NZ if -->/CONTINUED invoked from the console
                      (        forth.asm):00181         
0131                  (        forth.asm):00182         CFCARDP rmb     1               NZ if CF card present
0132                  (        forth.asm):00183         CFCMMIR rmb     1               Last CF command issued
0133                  (        forth.asm):00184         CFERRCD rmb     1               and the corresponding error code
                      (        forth.asm):00185         
0134                  (        forth.asm):00186         PADBUF  rmb     PADBSZ          PAD lives here. Used by <#, #, #S, #> and DUMP
                      (        forth.asm):00187         
                      (        forth.asm):00188         * The normal (data) stack.
0185 00               (        forth.asm):00189                 align   2
     0186             (        forth.asm):00190         NSTTOP  equ     *               U's value when the data stack is full
0186                  (        forth.asm):00191                 rmb     NSTKSZ
     0246             (        forth.asm):00192         NSTBOT  equ     *               U's value when the data stack is empty
                      (        forth.asm):00193         
                      (        forth.asm):00194         * The return stack.
     0246             (        forth.asm):00195         RSTTOP  equ     *
0246                  (        forth.asm):00196                 rmb     RSTKSZ
     02C6             (        forth.asm):00197         RSTBOT  equ     *
                      (        forth.asm):00198         
02C6                  (        forth.asm):00199         CMDBUF  rmb     CMDBFSZ
034A                  (        forth.asm):00200         HEXBUF  rmb     HEXBFSZ
                      (        forth.asm):00201         
039A                  (        forth.asm):00202         TBUFF   rmb     TBUFSZ          Output for CVNSTR. Also used by DUMP
                      (        forth.asm):00203         
03E2 0000000000000000 (        forth.asm):00204                 align   16
     000000000000
03F0                  (        forth.asm):00205         BUF0    rmb     BLKSIZ+4
07F4 0000000000000000 (        forth.asm):00206                 align   16
     00000000
0800                  (        forth.asm):00207         BUF1    rmb     BLKSIZ+4
                      (        forth.asm):00208         
                      (        forth.asm):00209         *******************************************************************************
                      (        forth.asm):00210         * Writable dictionary section begins right here. We cannot have anything
                      (        forth.asm):00211         * statically defined at this point. Therefore, FORTHIN moves the code for @
                      (        forth.asm):00212         * to this location and sets up DICEND and LSTWAD accordingly. All the RAM
                      (        forth.asm):00213         * beyond this point (after the reallocated @ implementation) is user defined
                      (        forth.asm):00214         * material. Note that builtin words, though they cannot be forgotten (to the
                      (        forth.asm):00215         * extent they are ROM resident--not to mention inter-word dependencies),
                      (        forth.asm):00216         * might still be overridden by user definitions. VLIST will happily ignore
                      (        forth.asm):00217         * that fact and list everything in the dictionary linked list order.
                      (        forth.asm):00218         
0C04 0000000000000000 (        forth.asm):00219                 align   16
     00000000
     0C10             (        forth.asm):00220         WDICSPC equ     *
                      (        forth.asm):00221         
                      (        forth.asm):00222         *******************************************************************************
                      (        forth.asm):00223         * ROM code begins.
                      (        forth.asm):00224         
                      (        forth.asm):00225                 org     ROMSTRT
                      (        forth.asm):00226         * Trap handler: division by zero or illegal opcode. See page 4-10 of "The 6309
                      (        forth.asm):00227         * Book" for a description of interrupt stacks in native 6309 mode.
E000 113C40           (        forth.asm):00228 (4)     IODZHDL bitmd   #$40            Illegal opcode?
E003 2705             (        forth.asm):00229 (3)             beq     @iodzh1
E005 8EFE4C           (        forth.asm):00230 (3)             ldx     #IOPERRM
E008 2008             (        forth.asm):00231 (3)             bra     @iodxh2
E00A 113C80           (        forth.asm):00232 (4)     @iodzh1 bitmd   #$80            Division by zero?
E00D 2725             (        forth.asm):00233 (3)             beq     @iodzh3         And you may ask yourself, well
                      (        forth.asm):00234         *                               How did I get here?
E00F 8EFE61           (        forth.asm):00235 (3)             ldx     #DV0ERRM
E012 BDE1D8           (        forth.asm):00236 (7)     @iodxh2 jsr     PUTS
E015 EC6C             (        forth.asm):00237 (5+1)           ldd     12,s            Return code address (PC)
E017 8E034A           (        forth.asm):00238 (3)             ldx     #HEXBUF
E01A BDE172           (        forth.asm):00239 (7)             jsr     HDMP4   
E01D 8E034A           (        forth.asm):00240 (3)             ldx     #HEXBUF
E020 BDE1D8           (        forth.asm):00241 (7)             jsr     PUTS
E023 BDE1E5           (        forth.asm):00242 (7)             jsr     PUTCR
E026 8EE5EF           (        forth.asm):00243 (3)             ldx     #ERRHD1
E029 AF6C             (        forth.asm):00244 (5+1)           stx     12,s            Resume execution in the error handler
E02B 8EE000           (        forth.asm):00245 (3)             ldx     #IODZHDL
E02E AF68             (        forth.asm):00246 (5+1)           stx     8,s             With Y set to IODZHDL
E030 8603             (        forth.asm):00247 (2)             lda     #3              And user ABORT error code
E032 A762             (        forth.asm):00248 (4+1)           sta     2,s             Passed back through B
E034 3B               (        forth.asm):00249 (17+?)  @iodzh3 rti
                      (        forth.asm):00250         
     E035             (        forth.asm):00251         SWI3HDL equ     *
     E035             (        forth.asm):00252         SWI2HDL equ     *
     E035             (        forth.asm):00253         FIRQHDL equ     *
     E035             (        forth.asm):00254         IRQHDL  equ     *
     E035             (        forth.asm):00255         SWIHDL  equ     *
E035 13               (        forth.asm):00256 (1+?)   NMIHDL  sync                    Go to low power mode idling forever
                      (        forth.asm):00257         
E036 1A50             (        forth.asm):00258 (2)     RSTHDL  orcc    #$50            Disable interrupts
                      (        forth.asm):00259         
                      (        forth.asm):00260         * In theory, this means 15% extra performance.
                      (        forth.asm):00261         * In practice, this means an extra 5 mA current comsumption.
                      (        forth.asm):00262         * The additional performance is measurable so I am going for it.
E038 113D01           (        forth.asm):00263 (5)             ldmd    #1              Establish 6309 native mode
                      (        forth.asm):00264         
E03B 8643             (        forth.asm):00265 (2)             lda     #ACIRSET
E03D B7D800           (        forth.asm):00266 (4)             sta     ACIACTL         ACIA master reset
E040 8655             (        forth.asm):00267 (2)             lda     #ACIRTS1
E042 B7D800           (        forth.asm):00268 (4)             sta     ACIACTL         No IRQ on RDRF, RTS high, 8N1, 115200 bps
                      (        forth.asm):00269         
E045 8EFDBC           (        forth.asm):00270 (3)             ldx     #BOOTMSG        Identity statement
                      (        forth.asm):00271         
                      (        forth.asm):00272         * Send the NUL terminated string pointed to by X to the ACIA.
                      (        forth.asm):00273         * The RAM is not assumed to be working.
E048 C602             (        forth.asm):00274 (2)     INIT    ldb     #ACITDRE
E04A A680             (        forth.asm):00275 (4+1)   @init0  lda     ,x+
E04C 270A             (        forth.asm):00276 (3)             beq     RAMCHK          NUL marks the end of the string
E04E F5D800           (        forth.asm):00277 (4)     @init1  bitb    ACIACTL         Wait for TDRE bit to be set
E051 27FB             (        forth.asm):00278 (3)             beq     @init1
E053 B7D801           (        forth.asm):00279 (4)             sta     ACIADAT         Transmit data
E056 20F2             (        forth.asm):00280 (3)             bra     @init0          Next char, if any
                      (        forth.asm):00281         
                      (        forth.asm):00282         * RAM0 32 KB self test (destructive).
E058 8E0000           (        forth.asm):00283 (3)     RAMCHK  ldx     #RAMSTRT
E05B AF84             (        forth.asm):00284 (5+0)   @ramch1 stx     ,x
E05D AC84             (        forth.asm):00285 (5+0)           cmpx    ,x
E05F 2609             (        forth.asm):00286 (3)             bne     RAMFAIL
E061 3002             (        forth.asm):00287 (4+1)           leax    2,x
E063 8C8000           (        forth.asm):00288 (3)             cmpx    #RAMSTRT+RAMSIZE
E066 26F3             (        forth.asm):00289 (3)             bne     @ramch1
E068 2012             (        forth.asm):00290 (3)             bra     RAMOK
                      (        forth.asm):00291         
E06A C680             (        forth.asm):00292 (2)     RAMFAIL ldb     #128
E06C 108E8000         (        forth.asm):00293 (4)     @ramf1  ldy     #$8000
E070 313F             (        forth.asm):00294 (4+1)   @ramf2  leay    -1,y
E072 26FC             (        forth.asm):00295 (3)             bne     @ramf2
E074 5A               (        forth.asm):00296 (1)             decb
E075 26F5             (        forth.asm):00297 (3)             bne     @ramf1
E077 8EFE30           (        forth.asm):00298 (3)             ldx     #RAMFM
E07A 20CC             (        forth.asm):00299 (3)             bra     INIT            Here we go again
                      (        forth.asm):00300         
                      (        forth.asm):00301         * RAM Initialization to all $C7 if DEBUG mode is enabled else zeroes.
E07C 8E0000           (        forth.asm):00302 (3)     RAMOK   ldx     #RAMSTRT
E07F 3101             (        forth.asm):00303 (4+1)           leay    1,x
E081 10867FFF         (        forth.asm):00304 (4)             ldw     #RAMSIZE-1
                      (        forth.asm):00305                 IFNE    DEBUG
                      (        forth.asm):00306                 lda     #ILLOPC
                      (        forth.asm):00307                 sta     ,x
                      (        forth.asm):00308                 ELSE
E085 6F84             (        forth.asm):00309 (6+0)           clr     ,x
                      (        forth.asm):00310                 ENDC
E087 113812           (        forth.asm):00311 (6+?)           tfm     x+,y+
                      (        forth.asm):00312         
                      (        forth.asm):00313         * Initialize the system stack pointer and the direct page base address register.
E08A 10CE8000         (        forth.asm):00314 (4)             lds     #RAMSTRT+RAMSIZE
                      (        forth.asm):00315                 IFNE    USEDP
E08E 8601             (        forth.asm):00316 (2)             lda     #VARSPC/256
E090 1F8B             (        forth.asm):00317 (4)             tfr     a,dp
     01               (        forth.asm):00318                 SETDP   VARSPC/256
                      (        forth.asm):00319                 ENDC
E092 8EFE18           (        forth.asm):00320 (3)             ldx     #RAMOKM
E095 BDE1D8           (        forth.asm):00321 (7)             jsr     PUTS
E098 BDE23E           (        forth.asm):00322 (7)             jsr     FORTHIN         Global variables initialization
E09B BDE755           (        forth.asm):00323 (7)             jsr     CFINIT          CompactFlash card initialization
                      (        forth.asm):00324         
                      (        forth.asm):00325         * The interpreter main loop.
E09E 104F             (        forth.asm):00326 (2)     INTERP  clrd
E0A0 DD1E             (        forth.asm):00327 (4)             std     UBLK            Interpreting from the console. Set BLK to 0
E0A2 DD1C             (        forth.asm):00328 (4)             std     UTOIN
E0A4 8E02C6           (        forth.asm):00329 (3)             ldx     #CMDBUF
E0A7 9F22             (        forth.asm):00330 (4)             stx     BSBFADR
E0A9 C683             (        forth.asm):00331 (2)             ldb     #CMDBFSZ-1      NUL terminator is not included in the char count
E0AB BDE1FB           (        forth.asm):00332 (7)             jsr     GETS            Acquire command from the console
                      (        forth.asm):00333         * Additional setup in case the ANSI \ is used.
E0AE D724             (        forth.asm):00334 (3)             stb     CMDLNSZ         GETS returns the entered character count via B
                      (        forth.asm):00335         * Additional preparation work for block support.
E0B0 0F30             (        forth.asm):00336 (5)             clr     NBCTFB0         Flag whether -->/CONTINUED is called from blk 0
E0B2 8D02             (        forth.asm):00337 (6)             bsr     _INTERP
E0B4 20E8             (        forth.asm):00338 (3)     MINTLRA bra     INTERP
                      (        forth.asm):00339         
                      (        forth.asm):00340         * The interpreter itself.
E0B6 BDE27D           (        forth.asm):00341 (7)     _INTERP jsr     SCNSTOK         Scan for the beginning of a word at address X
E0B9 2715             (        forth.asm):00342 (3)             beq     @more0          This is the end
E0BB 0D1B             (        forth.asm):00343 (4)             tst     USTATE+1        We do ignore the upper byte
E0BD 2644             (        forth.asm):00344 (3)             bne     COMP            We are compiling
E0BF BDE358           (        forth.asm):00345 (7)             jsr     SWDIC           Updates TOKENEP, CURTOKL, IMDFLG/DEFFLG
E0C2 2624             (        forth.asm):00346 (3)             bne     @exec           Word found, execute it
E0C4 BDE2AD           (        forth.asm):00347 (7)             jsr     NUMCVT
     E0C7             (        forth.asm):00348         NMCVIRA equ     *
E0C7 BDE663           (        forth.asm):00349 (7)             jsr     NPUSH
E0CA 9E04             (        forth.asm):00350 (4)             ldx     TOKENEP
E0CC 6D84             (        forth.asm):00351 (5+0)   MORE    tst     ,x
E0CE 26E6             (        forth.asm):00352 (3)             bne     _INTERP         Next token, please!
                      (        forth.asm):00353         * End of input stream condition is recognized.
E0D0 DC1E             (        forth.asm):00354 (4)     @more0  ldd     UBLK
E0D2 2705             (        forth.asm):00355 (3)             beq     @more1          We are back from the console
E0D4 0D30             (        forth.asm):00356 (4)             tst     NBCTFB0         -->/CONTINUED invoked from the console?
E0D6 2601             (        forth.asm):00357 (3)             bne     @more1          Yes
E0D8 39               (        forth.asm):00358 (4)             rts                     No, we're done here
E0D9 0F30             (        forth.asm):00359 (5)     @more1  clr     NBCTFB0         The -->/CONTINUED exception only applies once
E0DB 8EFE46           (        forth.asm):00360 (3)             ldx     #OKPRMPT        Provide OK feedback
E0DE 0D1B             (        forth.asm):00361 (4)             tst     USTATE+1        No OK feedback if we're compiling, just CRLF
E0E0 2702             (        forth.asm):00362 (3)             beq     @more2
E0E2 3003             (        forth.asm):00363 (4+1)           leax    3,x             Skip the ' OK' string when compiling
E0E4 BDE1D8           (        forth.asm):00364 (7)     @more2  jsr     PUTS
E0E7 39               (        forth.asm):00365 (4)             rts                     Back to whoever invoked us
E0E8 962F             (        forth.asm):00366 (3)     @exec   lda     DEFFLG
E0EA 2705             (        forth.asm):00367 (3)             beq     @introk         Compilation only flag is not set
E0EC C606             (        forth.asm):00368 (2)             ldb     #6              Incorrect STATE
E0EE BDE5EC           (        forth.asm):00369 (7)             jsr     ERRHDLR         No return
     E0F1             (        forth.asm):00370         INTISRA equ     *               For symbolic stack debugging purposes
E0F1 DC04             (        forth.asm):00371 (4)     @introk ldd     TOKENEP
E0F3 9322             (        forth.asm):00372 (4)             subd    BSBFADR
E0F5 DD1C             (        forth.asm):00373 (4)             std     UTOIN           Derive >IN from TOKENEP
E0F7 8EE0FE           (        forth.asm):00374 (3)             ldx     #INTRPRA        The return address
E0FA 3410             (        forth.asm):00375 (4+2)           pshs    x
E0FC 1F25             (        forth.asm):00376 (4)             tfr     y,pc            An indirect call to Y
E0FE BDE6EA           (        forth.asm):00377 (7)     INTRPRA jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
E101 20C9             (        forth.asm):00378 (3)             bra     MORE
                      (        forth.asm):00379         
                      (        forth.asm):00380         * The compiler.
                      (        forth.asm):00381         * Upon entry TOKENSP has been set by a prior call to SCNSTOK.
E103 BDE358           (        forth.asm):00382 (7)     COMP    jsr     SWDIC           Updates TOKENEP, CURTOKL, IMDFLG/DEFFLG
E106 2733             (        forth.asm):00383 (3)             beq     @cmpnum         Word @ TOKENSP is not in the dictionary
E108 0D2E             (        forth.asm):00384 (4)             tst     IMDFLG
E10A 271E             (        forth.asm):00385 (3)             beq     @notimd
E10C DC04             (        forth.asm):00386 (4)             ldd     TOKENEP         Derive >IN from TOKENEP
E10E 9322             (        forth.asm):00387 (4)             subd    BSBFADR
E110 DD1C             (        forth.asm):00388 (4)             std     UTOIN
                      (        forth.asm):00389         * Immediate word processing. We execute the word with an option to compile
                      (        forth.asm):00390         * an execution routine as well. This is achieved by allowing the callee to
                      (        forth.asm):00391         * set an 'action component' address that resides at 2,s in the context
                      (        forth.asm):00392         * of the (immediate) word being executed. Upon return, if that address is
                      (        forth.asm):00393         * found to be NZ, a JSR to that address will be compiled. This feature is
                      (        forth.asm):00394         * used in a number of words. DOES> is one of them.
E112 104F             (        forth.asm):00395 (2)             clrd
E114 3406             (        forth.asm):00396 (4+2)           pshs    d               Default action component address is none
E116 8EE11D           (        forth.asm):00397 (3)             ldx     #COMPLRA        Word is IMD. Invoke it. Maybe compile it too
E119 3410             (        forth.asm):00398 (4+2)           pshs    x               Return to COMPLRA
E11B 1F25             (        forth.asm):00399 (4)             tfr     y,pc            An indirect call to Y
E11D BDE6EA           (        forth.asm):00400 (7)     COMPLRA jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
E120 9F04             (        forth.asm):00401 (4)             stx     TOKENEP
E122 3506             (        forth.asm):00402 (4+2)           puls    d               Code address possibly set by IMD word
E124 104D             (        forth.asm):00403 (2)             tstd
E126 27D6             (        forth.asm):00404 (3)             beq     INTRPRA         Word has no action component
E128 1F02             (        forth.asm):00405 (4)             tfr     d,y
E12A 1F21             (        forth.asm):00406 (4)     @notimd tfr     y,x
E12C 109E08           (        forth.asm):00407 (5)             ldy     DICEND
E12F 86BD             (        forth.asm):00408 (2)             lda     #JSROPC         JSR extended
E131 8D12             (        forth.asm):00409 (6)             bsr     CHKRTS          Check if the final RTS can be omitted
E133 BDE42E           (        forth.asm):00410 (7)             jsr     VARCON2         Compile a JSR to the action component
E136 109F08           (        forth.asm):00411 (5)             sty     DICEND
E139 2006             (        forth.asm):00412 (3)             bra     @cmpdon         Branch back to the interpreter
E13B BDE2AD           (        forth.asm):00413 (7)     @cmpnum jsr     NUMCVT
     E13E             (        forth.asm):00414         NMCVCRA equ     *
E13E BDE417           (        forth.asm):00415 (7)             jsr     LITER
E141 9E04             (        forth.asm):00416 (4)     @cmpdon ldx     TOKENEP
E143 2087             (        forth.asm):00417 (3)             bra     MORE
                      (        forth.asm):00418         
                      (        forth.asm):00419         * Check whether the final RTS can be eliminated. It can only be if we have no
                      (        forth.asm):00420         * forward references to HERE when COMPR (;) is invoked. This is a rather
                      (        forth.asm):00421         * complicated matter but this implementation works on the basis that we can do
                      (        forth.asm):00422         * so safely if at least 2 subroutine calls have been issued with a return
                      (        forth.asm):00423         * stack whose depth is equal to IRDPTH, immediately prior to the invokation
                      (        forth.asm):00424         * of COMPR (;).
E145 3402             (        forth.asm):00425 (4+1)   CHKRTS  pshs    a
E147 109F10           (        forth.asm):00426 (5)             sty     JSRLAST         JSRLAST points to the latest JSR code emission
E14A 9625             (        forth.asm):00427 (3)             lda     RDEPTH
E14C 9126             (        forth.asm):00428 (3)             cmpa    IRDPTH          Return stack depth when : was last invoked
E14E 2705             (        forth.asm):00429 (3)             beq     @ckrts1
E150 0F27             (        forth.asm):00430 (5)             clr     RTSREMV
E152 3502             (        forth.asm):00431 (4+1)   @ckrts0 puls    a
E154 39               (        forth.asm):00432 (4)             rts
E155 0C27             (        forth.asm):00433 (5)     @ckrts1 inc     RTSREMV
E157 20F9             (        forth.asm):00434 (3)             bra     @ckrts0
                      (        forth.asm):00435         
                      (        forth.asm):00436         * Store the HEX representation of the lower nibble of A to X+.
E159 3404             (        forth.asm):00437 (4+1)   HEX1D   pshs    b
E15B C630             (        forth.asm):00438 (2)             ldb     #'0
E15D 840F             (        forth.asm):00439 (2)             anda    #$0f
E15F 810A             (        forth.asm):00440 (2)             cmpa    #10
E161 2502             (        forth.asm):00441 (3)             bcs     @hex1d1
E163 C637             (        forth.asm):00442 (2)             ldb     #'A-10
E165 103098           (        forth.asm):00443 (4)     @hex1d1 addr    b,a
E168 A780             (        forth.asm):00444 (4+1)           sta     ,x+
E16A 3504             (        forth.asm):00445 (4+1)           puls    b
E16C 39               (        forth.asm):00446 (4)             rts
                      (        forth.asm):00447         
E16D 44               (        forth.asm):00448 (1)     ADIV16  lsra
E16E 44               (        forth.asm):00449 (1)             lsra
E16F 44               (        forth.asm):00450 (1)             lsra
E170 44               (        forth.asm):00451 (1)             lsra
E171 39               (        forth.asm):00452 (4)             rts
                      (        forth.asm):00453         
                      (        forth.asm):00454         * Hexdump D to 4 bytes starting at X.  Upon return, X will point 1 byte
                      (        forth.asm):00455         * after the last character emitted. D is preserved.
E172 3406             (        forth.asm):00456 (4+2)   HDMP4   pshs    d
E174 8DF7             (        forth.asm):00457 (6)             bsr     ADIV16
E176 8DE1             (        forth.asm):00458 (6)             bsr     HEX1D
E178 A6E4             (        forth.asm):00459 (4+0)           lda     ,s
E17A 8DDD             (        forth.asm):00460 (6)             bsr     HEX1D
E17C A661             (        forth.asm):00461 (4+1)           lda     1,s
E17E 8DED             (        forth.asm):00462 (6)             bsr     ADIV16
E180 8DD7             (        forth.asm):00463 (6)             bsr     HEX1D
E182 A661             (        forth.asm):00464 (4+1)           lda     1,s
E184 8DD3             (        forth.asm):00465 (6)             bsr     HEX1D
E186 3506             (        forth.asm):00466 (4+2)           puls    d
E188 6F84             (        forth.asm):00467 (6+0)           clr     ,x
E18A 39               (        forth.asm):00468 (4)             rts
                      (        forth.asm):00469         
E18B 3406             (        forth.asm):00470 (4+2)   HDMP2   pshs    d
E18D 8DDE             (        forth.asm):00471 (6)             bsr     ADIV16
E18F 8DC8             (        forth.asm):00472 (6)             bsr     HEX1D
E191 A6E4             (        forth.asm):00473 (4+0)           lda     ,s
E193 8DC4             (        forth.asm):00474 (6)             bsr     HEX1D
E195 3506             (        forth.asm):00475 (4+2)           puls    d
E197 6F84             (        forth.asm):00476 (6+0)           clr     ,x
E199 39               (        forth.asm):00477 (4)             rts
                      (        forth.asm):00478         
                      (        forth.asm):00479         * Add string pointed to by Y starting at the address stored in X.
E19A 3402             (        forth.asm):00480 (4+1)   ADDS    pshs    a
E19C A6A0             (        forth.asm):00481 (4+1)   @adds1  lda     ,y+
E19E A780             (        forth.asm):00482 (4+1)           sta     ,x+
E1A0 26FA             (        forth.asm):00483 (3)             bne     @adds1
E1A2 3502             (        forth.asm):00484 (4+1)           puls    a
E1A4 39               (        forth.asm):00485 (4)             rts
                      (        forth.asm):00486         
                      (        forth.asm):00487         * Returns the length of the string pointed to by X (terminator excluded) in W.
E1A5 3410             (        forth.asm):00488 (4+2)   SLEN    pshs    x
E1A7 105F             (        forth.asm):00489 (2)             clrw
E1A9 105C             (        forth.asm):00490 (2)     @slen1  incw
E1AB A680             (        forth.asm):00491 (4+1)           lda     ,x+
E1AD 26FA             (        forth.asm):00492 (3)             bne     @slen1
E1AF 105A             (        forth.asm):00493 (2)             decw
E1B1 3510             (        forth.asm):00494 (4+2)           puls    x
E1B3 39               (        forth.asm):00495 (4)             rts
                      (        forth.asm):00496         
                      (        forth.asm):00497                 include console.asm
E1B4 3404             (      console.asm):00001 (4+1)   PUTCH   pshs    b
E1B6 C602             (      console.asm):00002 (2)             ldb     #ACITDRE
E1B8 F5D800           (      console.asm):00003 (4)     @ptch1  bitb    ACIACTL         Wait for TDRE bit to be set
E1BB 27FB             (      console.asm):00004 (3)             beq     @ptch1
E1BD B7D801           (      console.asm):00005 (4)             sta     ACIADAT         Transmit data
E1C0 3504             (      console.asm):00006 (4+1)           puls    b
E1C2 39               (      console.asm):00007 (4)             rts
                      (      console.asm):00008         
E1C3 8615             (      console.asm):00009 (2)     GETCH   lda     #ACIRTS0
E1C5 B7D800           (      console.asm):00010 (4)             sta     ACIACTL         You may talk to me now
E1C8 8601             (      console.asm):00011 (2)             lda     #ACIRDRF
E1CA B5D800           (      console.asm):00012 (4)     @again  bita    ACIACTL
E1CD 27FB             (      console.asm):00013 (3)             beq     @again
E1CF 8655             (      console.asm):00014 (2)             lda     #ACIRTS1
E1D1 B7D800           (      console.asm):00015 (4)             sta     ACIACTL         You may shut up now
                      (      console.asm):00016                 IFNE    CKOVRUN
                      (      console.asm):00017                 lda     #ACIOVRN
                      (      console.asm):00018                 bita    ACIACTL         Check for overrun
                      (      console.asm):00019                 beq     @getdat
                      (      console.asm):00020                 lda     #'*
                      (      console.asm):00021                 bsr     PUTCH
                      (      console.asm):00022                 ENDC
E1D4 B6D801           (      console.asm):00023 (4)     @getdat lda     ACIADAT         Get character from the ACIA
E1D7 39               (      console.asm):00024 (4)             rts
                      (      console.asm):00025         
                      (      console.asm):00026         * Send NUL terminated string pointed to by X to the ACIA.
E1D8 3416             (      console.asm):00027 (4+4)   PUTS    pshs    x,d
E1DA A680             (      console.asm):00028 (4+1)   @puts1  lda     ,x+
E1DC 2704             (      console.asm):00029 (3)             beq     @puts2         NUL marks the end of the string
E1DE 8DD4             (      console.asm):00030 (6)             bsr     PUTCH
E1E0 20F8             (      console.asm):00031 (3)             bra     @puts1
E1E2 3516             (      console.asm):00032 (4+4)   @puts2  puls    d,x
E1E4 39               (      console.asm):00033 (4)             rts
                      (      console.asm):00034         
E1E5 3410             (      console.asm):00035 (4+2)   PUTCR   pshs    x
E1E7 8EFE2D           (      console.asm):00036 (3)             ldx     #CRLFSTR
E1EA 8DEC             (      console.asm):00037 (6)             bsr     PUTS
E1EC 3510             (      console.asm):00038 (4+2)           puls    x
E1EE 39               (      console.asm):00039 (4)             rts
                      (      console.asm):00040         
E1EF 8608             (      console.asm):00041 (2)     _BS     lda     #BS
E1F1 8DC1             (      console.asm):00042 (6)             bsr     PUTCH          Output BS
E1F3 8620             (      console.asm):00043 (2)             lda     #SP
E1F5 8DBD             (      console.asm):00044 (6)             bsr     PUTCH          Clear character
E1F7 8608             (      console.asm):00045 (2)             lda     #BS
E1F9 20B9             (      console.asm):00046 (3)             bra     PUTCH          And go back again
                      (      console.asm):00047         
                      (      console.asm):00048         * Receive CR terminated string and store it to X.
                      (      console.asm):00049         * Upon entry B contains the receiving buffer length.
                      (      console.asm):00050         * (excluding the NUL terminator). On exit, B will
                      (      console.asm):00051         * contain the number of characters entered (excluding
                      (      console.asm):00052         * the trailing NUL). A and X are preserved. B will
                      (      console.asm):00053         * have the actual number of characters entered.
                      (      console.asm):00054         * Implementation of $05D9 in TRS-80 Level II ROM.
E1FB C102             (      console.asm):00055 (2)     GETS    cmpb    #2
E1FD 2401             (      console.asm):00056 (3)             bhs     @gets0          B must be 2 or more
E1FF 39               (      console.asm):00057 (4)             rts
E200 3416             (      console.asm):00058 (4+4)   @gets0  pshs    x,d
E202 8DBF             (      console.asm):00059 (6)     @gets1  bsr     GETCH
E204 8108             (      console.asm):00060 (2)             cmpa    #BS             Backspace?
E206 260B             (      console.asm):00061 (3)             bne     @gets3
E208 E161             (      console.asm):00062 (4+1)           cmpb    1,s             B upon routine entry
E20A 27F6             (      console.asm):00063 (3)             beq     @gets1          Do not go beyond the beginning of the buffer
E20C 8DE1             (      console.asm):00064 (6)             bsr     _BS
E20E 301F             (      console.asm):00065 (4+1)           leax    -1,x
E210 5C               (      console.asm):00066 (1)             incb
E211 20EF             (      console.asm):00067 (3)             bra     @gets1
E213 8115             (      console.asm):00068 (2)     @gets3  cmpa    #NAK            Kill input?
E215 260B             (      console.asm):00069 (3)             bne     @gets5
                      (      console.asm):00070         * While B != 1,S (initial buffer length), decrement X, increment B.
E217 E161             (      console.asm):00071 (4+1)   @gets4  cmpb    1,s
E219 27E7             (      console.asm):00072 (3)             beq     @gets1
E21B 8DD2             (      console.asm):00073 (6)             bsr     _BS
E21D 301F             (      console.asm):00074 (4+1)           leax     -1,x
E21F 5C               (      console.asm):00075 (1)             incb
E220 20F5             (      console.asm):00076 (3)             bra     @gets4
                      (      console.asm):00077         * Regular input handling: echo input character.
E222 810D             (      console.asm):00078 (2)     @gets5  cmpa    #CR
E224 2709             (      console.asm):00079 (3)             beq     @gets6          Minicom only sends CR
E226 8D8C             (      console.asm):00080 (6)             bsr     PUTCH
E228 A780             (      console.asm):00081 (4+1)           sta     ,x+
E22A 5A               (      console.asm):00082 (1)             decb
E22B C101             (      console.asm):00083 (2)             cmpb    #1              End of buffer reached?
E22D 26D3             (      console.asm):00084 (3)             bne     @gets1
E22F 8620             (      console.asm):00085 (2)     @gets6  lda     #SP
E231 8D81             (      console.asm):00086 (6)             bsr     PUTCH
E233 6F84             (      console.asm):00087 (6+0)           clr     ,x
E235 1F10             (      console.asm):00088 (4)             tfr     x,d
E237 A362             (      console.asm):00089 (5+1)           subd    2,s             Actual number of characters entered
E239 E761             (      console.asm):00090 (4+1)           stb     1,s             Stored to B (through the system stack).         
E23B 3516             (      console.asm):00091 (4+4)           puls    x,d
E23D 39               (      console.asm):00092 (4)             rts
                      (      console.asm):00093         
                      (        forth.asm):00498         
                      (        forth.asm):00499                 IFNE    DEBUG
E23E                  (        forth.asm):00500         PAGE0IN pshs    x               Fill up page 0 with all C7 (an illegal opcode)
                      (        forth.asm):00501                 ldx     #RAMSTRT
                      (        forth.asm):00502                 lda     #ILLOPC
                      (        forth.asm):00503                 sta     ,x
                      (        forth.asm):00504                 leay    1,x
                      (        forth.asm):00505                 ldw     #255
                      (        forth.asm):00506                 tfm     x+,y+
                      (        forth.asm):00507                 puls    x
                      (        forth.asm):00508                 rts
                      (        forth.asm):00509                 ENDC
                      (        forth.asm):00510         
E23E BDE9C2           (        forth.asm):00511         FORTHIN RFXT    jsr,NCLR+7      XT for NCLR. Set up the normal stack
E241 BDE9CE           (        forth.asm):00512                 RFXT    jsr,RCLR+7      XT for RCLR. Set up the return stack
                      (        forth.asm):00513                 IFNE    DEBUG
                      (        forth.asm):00514                 bsr     PAGE0IN
                      (        forth.asm):00515                 ENDC
                      (        forth.asm):00516         * Relocate '@' code to RAM and set it up as the last dictionary entry (RO).
E244 8EFDAC           (        forth.asm):00517 (3)             ldx     #THEEND         Source address for tfm
E247 CCFDBC           (        forth.asm):00518 (3)             ldd     #REALEND
E24A 103210           (        forth.asm):00519 (4)             subr    x,d
E24D 1F06             (        forth.asm):00520 (4)             tfr     d,w             Byte count for tfm
E24F 108E0C10         (        forth.asm):00521 (4)             ldy     #WDICSPC        Destination address for tfm
E253 109F06           (        forth.asm):00522 (5)             sty     LSTWAD
E256 113812           (        forth.asm):00523 (6+?)           tfm     x+,y+
E259 109F08           (        forth.asm):00524 (5)             sty     DICEND
                      (        forth.asm):00525                 IFNE    RELFEAT
E25C BDEAE1           (        forth.asm):00526                 RFXT    jsr,MONITOR+10  XT for MONITOR (monitor @ in RAM)
                      (        forth.asm):00527                 ENDC
E25F 8D09             (        forth.asm):00528 (6)             bsr     EMPTYB          Buffer related initializations.
E261 104F             (        forth.asm):00529 (2)             clrd
E263 DD1A             (        forth.asm):00530 (4)             std     USTATE          Initial mode is interpretation
E265 DD20             (        forth.asm):00531 (4)             std     USCR            Clear SCR
E267 7EF9E8           (        forth.asm):00532                 RFXT    jmp,DECIMAL+10  XT for DECIMAL. Default base is decimal
                      (        forth.asm):00533         
E26A 8E03F0           (        forth.asm):00534 (3)     EMPTYB  ldx     #BUF0
E26D 8D03             (        forth.asm):00535 (6)             bsr     EMPT1B
E26F 8E0800           (        forth.asm):00536 (3)             ldx     #BUF1
                      (        forth.asm):00537         * Empty the buffer pointed to by X.
E272 9F16             (        forth.asm):00538 (4)     EMPT1B  stx     MRUBUFA         Update most recently used buffer address
E274 31890401         (        forth.asm):00539 (4+3)           leay    BLKSIZ+1,x
E278 104F             (        forth.asm):00540 (2)             clrd
E27A EDA4             (        forth.asm):00541 (5+0)           std     ,y              Clear terminator and flags fields
E27C 39               (        forth.asm):00542 (4)             rts
                      (        forth.asm):00543         
                      (        forth.asm):00544         * Scan for the next non-space character pointed to by X.
                      (        forth.asm):00545         * That character is returned through A. Flags are set accordingly.
E27D A680             (        forth.asm):00546 (4+1)   SCNSTOK lda     ,x+
E27F 2704             (        forth.asm):00547 (3)             beq     @scstk1
E281 8120             (        forth.asm):00548 (2)             cmpa    #SP
E283 27F8             (        forth.asm):00549 (3)             beq     SCNSTOK
E285 301F             (        forth.asm):00550 (4+1)   @scstk1 leax    -1,x            Keep X pointing at the beginning of the token
E287 9F02             (        forth.asm):00551 (4)             stx     TOKENSP
E289 4D               (        forth.asm):00552 (1)             tsta                    Have to test again because LEA affects Z
E28A 39               (        forth.asm):00553 (4)             rts
                      (        forth.asm):00554         
                      (        forth.asm):00555         * Scan for the next white space character (or NUL) as an end of token marker.
                      (        forth.asm):00556         * Upon entry:
                      (        forth.asm):00557         * - X points to the input stream.
                      (        forth.asm):00558         * Upon return:
                      (        forth.asm):00559         * - X will point to the next space character or NUL.
                      (        forth.asm):00560         * - CURTOKL will hold the current token length (returned in B).
                      (        forth.asm):00561         * - TOKENEP will point to the end of the current token.
E28B 5F               (        forth.asm):00562 (1)     SCNETOK clrb
E28C 5C               (        forth.asm):00563 (1)     @scetok incb
E28D A680             (        forth.asm):00564 (4+1)           lda     ,x+
E28F 2704             (        forth.asm):00565 (3)             beq     @scetk1
E291 8120             (        forth.asm):00566 (2)             cmpa    #SP
E293 26F7             (        forth.asm):00567 (3)             bne     @scetok
E295 301F             (        forth.asm):00568 (4+1)   @scetk1 leax    -1,x            Keep X pointing at the end of the token
E297 9F04             (        forth.asm):00569 (4)             stx     TOKENEP
E299 5A               (        forth.asm):00570 (1)             decb
E29A D72D             (        forth.asm):00571 (3)             stb     CURTOKL
E29C 39               (        forth.asm):00572 (4)             rts
                      (        forth.asm):00573         
                      (        forth.asm):00574         * Check whether BASE is in the supported range ([2..36]).
E29D 9619             (        forth.asm):00575 (3)     CKBASE  lda     UBASE+1         BASE
E29F 8102             (        forth.asm):00576 (2)             cmpa    #2
E2A1 2505             (        forth.asm):00577 (3)             blo     @ckbser         Must be >= 2
E2A3 8124             (        forth.asm):00578 (2)             cmpa    #36
E2A5 2201             (        forth.asm):00579 (3)             bhi     @ckbser         And <= 36 (the ANSi maximum)
E2A7 39               (        forth.asm):00580 (4)             rts
E2A8 C60F             (        forth.asm):00581 (2)     @ckbser ldb     #15             Invalid BASE
E2AA BDE5EC           (        forth.asm):00582 (7)             jsr     ERRHDLR         No return
     E2AD             (        forth.asm):00583         CKBASRA equ     *
                      (        forth.asm):00584         
                      (        forth.asm):00585         * NUMCVT performs a signed string to number conversion. The input string is
                      (        forth.asm):00586         * acquired from the input stream. Note that this routine always is called
                      (        forth.asm):00587         * after a dictionary lookup (SWDIC), so TOKENSP and CURTOKL are guaranteed
                      (        forth.asm):00588         * to have been set previously. There are two ways out this routine:
                      (        forth.asm):00589         * - redirection to the error handler (Undefined word), or
                      (        forth.asm):00590         * - a converted cell returned through X.
                      (        forth.asm):00591         * This a re-implementation based on CONVERT but unlike CONVERT, which produces
                      (        forth.asm):00592         * an unsigned double as its output, this produces a signed single cell.
E2AD 8DEE             (        forth.asm):00593 (6)     NUMCVT  bsr     CKBASE          No return if BASE isn't in the [2..36] range
E2AF 9E02             (        forth.asm):00594 (4)             ldx     TOKENSP
E2B1 962D             (        forth.asm):00595 (3)             lda     CURTOKL         Character count to go through
E2B3 3402             (        forth.asm):00596 (4+1)           pshs    a
E2B5 104F             (        forth.asm):00597 (2)             clrd                    Initialize the result
E2B7 972B             (        forth.asm):00598 (3)             sta     ISNEGF          Assume it be be non-negative
                      (        forth.asm):00599         * Check for optional minus sign.
E2B9 11E684           (        forth.asm):00600 (5+0)           ldf     ,x
E2BC 11C12D           (        forth.asm):00601 (3)             cmpf    #'-
E2BF 2606             (        forth.asm):00602 (3)             bne     @ncnxt
E2C1 0C2B             (        forth.asm):00603 (5)             inc     ISNEGF          Remember to negate the result before returning
E2C3 3001             (        forth.asm):00604 (4+1)           leax    1,x             Skip the negativity!
E2C5 6AE4             (        forth.asm):00605 (6+0)           dec     ,s              Decrement token length
E2C7 119F18           (        forth.asm):00606 (29)    @ncnxt  muld    UBASE           D multipled by BASE to Q (D:W)
E2CA E680             (        forth.asm):00607 (4+1)           ldb     ,x+             Acquire next input char (ignore the product MSC)
E2CC C030             (        forth.asm):00608 (2)             subb    #'0
E2CE 252B             (        forth.asm):00609 (3)             blo     @ncoor          Digit out of range
E2D0 C10A             (        forth.asm):00610 (2)             cmpb    #10
E2D2 2510             (        forth.asm):00611 (3)             blo     @ncnolt         No letter in potential BASE
                      (        forth.asm):00612                 IFEQ    CSSNTVE
E2D4 C111             (        forth.asm):00613 (2)             cmpb    #'A-'0
E2D6 2523             (        forth.asm):00614 (3)             blo     @ncoor          Greater than 9 but lower than A
E2D8 C131             (        forth.asm):00615 (2)             cmpb    #'a-'0
E2DA 2506             (        forth.asm):00616 (3)             blo     @ncisuc         Upper case already
E2DC C14A             (        forth.asm):00617 (2)             cmpb    #'z-'0
E2DE 221B             (        forth.asm):00618 (3)             bhi     @ncoor          Definitely out of range
E2E0 C020             (        forth.asm):00619 (2)             subb    #'a-'A          To upper case
                      (        forth.asm):00620                 ENDC
E2E2 C007             (        forth.asm):00621 (2)     @ncisuc subb    #'A-':          A-Z to number
E2E4 D119             (        forth.asm):00622 (3)     @ncnolt cmpb    UBASE+1         B has a digit. Make sure it's less than BASE
E2E6 2413             (        forth.asm):00623 (3)             bhs     @ncoor
                      (        forth.asm):00624         * Digit in B has been validated wrt. BASE.
E2E8 4F               (        forth.asm):00625 (1)             clra
E2E9 103060           (        forth.asm):00626 (4)             addr    w,d
E2EC 6AE4             (        forth.asm):00627 (6+0)           dec     ,s              Are we done yet?
E2EE 26D7             (        forth.asm):00628 (3)             bne     @ncnxt          No. Iterate over to the next digit
E2F0 0D2B             (        forth.asm):00629 (4)             tst     ISNEGF          Are we dealing with a negative number?
E2F2 2702             (        forth.asm):00630 (3)             beq     @ncdone         No
E2F4 1040             (        forth.asm):00631 (2)             negd                    Acknowledge the negativity
E2F6 3261             (        forth.asm):00632 (4+1)   @ncdone leas    1,s             Drop token length from the system stack
E2F8 1F01             (        forth.asm):00633 (4)             tfr     d,x             Return the result in X
E2FA 39               (        forth.asm):00634 (4)             rts
E2FB 3261             (        forth.asm):00635 (4+1)   @ncoor  leas    1,s             Drop token length from the system stack
E2FD 9E02             (        forth.asm):00636 (4)             ldx     TOKENSP         Current digit is out of range
E2FF C602             (        forth.asm):00637 (2)             ldb     #2              Undefined (X points to the offending word)
E301 BDE5EC           (        forth.asm):00638 (7)             jsr     ERRHDLR         No return
     E304             (        forth.asm):00639         NUMCVRA equ     *               For symbolic stack dump purposes
                      (        forth.asm):00640         
                      (        forth.asm):00641         * Check for minimal data depth. On input D has the lowest possible stack
                      (        forth.asm):00642         * address that satisfies the needs of the caller. This routine is meant
                      (        forth.asm):00643         * to support "transactional" behaviour, which is intended to improve
                      (        forth.asm):00644         * debugging support.
E304 103703           (        forth.asm):00645 (4)     CHKNDPT cmpr    d,u
E307 2201             (        forth.asm):00646 (3)             bhi     @stkudf
E309 39               (        forth.asm):00647 (4)             rts
E30A C601             (        forth.asm):00648 (2)     @stkudf ldb     #1              Data stack underflow
E30C BDE5EC           (        forth.asm):00649 (7)             jsr     ERRHDLR         No return
     E30F             (        forth.asm):00650         CKDPTRA equ     *
                      (        forth.asm):00651         
                      (        forth.asm):00652         * Convert number stored in X to a string (depending on BASE value).
                      (        forth.asm):00653         * Output is stored in the global TBUFF buffer. X is preserved.
E30F 8D8C             (        forth.asm):00654 (6)     CVNSTR  bsr     CKBASE
E311 0F2B             (        forth.asm):00655 (5)             clr     ISNEGF
E313 1F10             (        forth.asm):00656 (4)             tfr     x,d
E315 0D2C             (        forth.asm):00657 (4)             tst     CVISSGN         Are we to perform a signed conversion?
E317 2708             (        forth.asm):00658 (3)             beq     @cvnst1
E319 104D             (        forth.asm):00659 (2)             tstd
E31B 2A04             (        forth.asm):00660 (3)             bpl     @cvnst1
E31D 0C2B             (        forth.asm):00661 (5)             inc     ISNEGF          Number being converted is negative
E31F 1040             (        forth.asm):00662 (2)             negd
E321 1F06             (        forth.asm):00663 (4)     @cvnst1 tfr     d,w
E323 104F             (        forth.asm):00664 (2)             clrd
E325 108E03AD         (        forth.asm):00665 (4)             ldy     #TBUFF+19       Sign + 16 digits + terminator + 1
E329 6FA2             (        forth.asm):00666 (6+1)           clr     ,-y             End of string marker
E32B 119E18           (        forth.asm):00667 (35)    @cvnst2 divq    UBASE           D returns the modulo and W the quotient
E32E 8630             (        forth.asm):00668 (2)             lda     #'0
E330 C10A             (        forth.asm):00669 (2)             cmpb    #10
E332 2502             (        forth.asm):00670 (3)             bcs     @cvnst3
                      (        forth.asm):00671         * BASE has letters among its valid numbers.
E334 8637             (        forth.asm):00672 (2)             lda     #'A-10
E336 103089           (        forth.asm):00673 (4)     @cvnst3 addr    a,b
E339 E7A2             (        forth.asm):00674 (4+1)           stb     ,-y
E33B 104F             (        forth.asm):00675 (2)             clrd
E33D 105D             (        forth.asm):00676 (2)             tstw
E33F 26EA             (        forth.asm):00677 (3)             bne     @cvnst2
E341 C620             (        forth.asm):00678 (2)             ldb     #SP
E343 0D2B             (        forth.asm):00679 (4)             tst     ISNEGF
E345 2702             (        forth.asm):00680 (3)             beq     @cvnst4
E347 C62D             (        forth.asm):00681 (2)             ldb     #'-
E349 E7A2             (        forth.asm):00682 (4+1)   @cvnst4 stb     ,-y
                      (        forth.asm):00683         * We need to insert leading spaces up to the beginning of the output buffer.
E34B C620             (        forth.asm):00684 (2)             ldb     #SP
E34D 108C039A         (        forth.asm):00685 (4)     @cvnst5 cmpy    #TBUFF
E351 2601             (        forth.asm):00686 (3)             bne     @cvnst6
E353 39               (        forth.asm):00687 (4)             rts
E354 E7A2             (        forth.asm):00688 (4+1)   @cvnst6 stb     ,-y
E356 20F5             (        forth.asm):00689 (3)             bra     @cvnst5
                      (        forth.asm):00690         
                      (        forth.asm):00691         * Search word beginning at address TOKENSP in the dictionary.
                      (        forth.asm):00692         * Upon return Z will be set if the word was not found.
                      (        forth.asm):00693         * Otherwise, Y will point to the code section of the word.
                      (        forth.asm):00694         * CSSNTVE (defined in constants.asm) defines whether the
                      (        forth.asm):00695         * dictionary match is case sensitive or not.
                      (        forth.asm):00696         * Important note: if the word is found TOKENEP will be copied to TOKENSP.
E358 9E02             (        forth.asm):00697 (4)     SWDIC   ldx     TOKENSP
E35A BDE28B           (        forth.asm):00698 (7)             jsr     SCNETOK         B has CURTOKL
E35D 9E02             (        forth.asm):00699 (4)             ldx     TOKENSP
E35F 109E06           (        forth.asm):00700 (5)             ldy     LSTWAD          Latest word header address to Y
E362 2603             (        forth.asm):00701 (3)     @swrdc0 bne     @swrdc1
E364 1FC2             (        forth.asm):00702 (4)             tfr     0,y             Word not found. Z is set
E366 39               (        forth.asm):00703 (4)             rts
E367 A6A4             (        forth.asm):00704 (4+0)   @swrdc1 lda     ,y              Word attribute to A
E369 841F             (        forth.asm):00705 (2)             anda    #WRLNMSK        Extract word length
E36B 3420             (        forth.asm):00706 (4+2)           pshs    y
E36D 103798           (        forth.asm):00707 (4)             cmpr    b,a             Word length match?
E370 2631             (        forth.asm):00708 (3)             bne     @swrdc3         No, point to next dictionary entry
E372 3121             (        forth.asm):00709 (4+1)           leay    1,y
E374 A6A0             (        forth.asm):00710 (4+1)   @swrdc2 lda     ,y+
                      (        forth.asm):00711                 IFNE    CSSNTVE
                      (        forth.asm):00712                 cmpa    ,x+             Case sensitive dictionary
                      (        forth.asm):00713                 ELSE
E376 1F9E             (        forth.asm):00714 (4)             tfr     b,e             Case insensitive search (preferred)
E378 E680             (        forth.asm):00715 (4+1)           ldb     ,x+
E37A C161             (        forth.asm):00716 (2)             cmpb    #'a
E37C 2506             (        forth.asm):00717 (3)             bcs     @nochg
E37E C17B             (        forth.asm):00718 (2)             cmpb    #'z+1
E380 2402             (        forth.asm):00719 (3)             bcc     @nochg
E382 C020             (        forth.asm):00720 (2)             subb    #'a-'A
E384 103798           (        forth.asm):00721 (4)     @nochg  cmpr    b,a
E387 1FE9             (        forth.asm):00722 (4)             tfr     e,b
                      (        forth.asm):00723                 ENDC
E389 2618             (        forth.asm):00724 (3)             bne     @swrdc3
E38B 5A               (        forth.asm):00725 (1)             decb
E38C 26E6             (        forth.asm):00726 (3)             bne     @swrdc2
                      (        forth.asm):00727         * Word match!
E38E 3510             (        forth.asm):00728 (4+2)           puls    x
E390 E684             (        forth.asm):00729 (4+0)           ldb     ,x              Word attribute byte to B
E392 4F               (        forth.asm):00730 (1)             clra
E393 58               (        forth.asm):00731 (1)             lslb                    Bit 7 to CFLAG
E394 49               (        forth.asm):00732 (1)             rola                    CFLAG to A
E395 972E             (        forth.asm):00733 (3)             sta     IMDFLG          Set IMMEDIATE flag
E397 4F               (        forth.asm):00734 (1)             clra
E398 58               (        forth.asm):00735 (1)             lslb                    Bit 6 to CFLAG
E399 49               (        forth.asm):00736 (1)             rola                    CFLAG to A
E39A 972F             (        forth.asm):00737 (3)             sta     DEFFLG          Set DEFINE flag
E39C 9E04             (        forth.asm):00738 (4)             ldx     TOKENEP
E39E 9F02             (        forth.asm):00739 (4)             stx     TOKENSP
                      (        forth.asm):00740                 IFNE    RELFEAT
E3A0 3123             (        forth.asm):00741 (4+1)           leay    3,y             Skip back pointer and checksum. Return XT
                      (        forth.asm):00742                 ELSE
                      (        forth.asm):00743                 leay    2,y             Skip back pointer. Return XT
                      (        forth.asm):00744                 ENDC
E3A2 39               (        forth.asm):00745 (4)             rts                     Z is clear due to the latest leay invocation
E3A3 3520             (        forth.asm):00746 (4+2)   @swrdc3 puls    y               Point to previous word in the dictionary
E3A5 4F               (        forth.asm):00747 (1)             clra
E3A6 E6A0             (        forth.asm):00748 (4+1)           ldb     ,y+
E3A8 C41F             (        forth.asm):00749 (2)             andb    #WRLNMSK
E3AA 31AB             (        forth.asm):00750 (4+2)           leay    d,y
E3AC 9E02             (        forth.asm):00751 (4)             ldx     TOKENSP
E3AE D62D             (        forth.asm):00752 (3)             ldb     CURTOKL
E3B0 10AEA4           (        forth.asm):00753 (6+0)           ldy     ,y
E3B3 20AD             (        forth.asm):00754 (3)             bra     @swrdc0
                      (        forth.asm):00755         
                      (        forth.asm):00756         * Create new dictionary entry. The word name being created is acquired from
                      (        forth.asm):00757         * the input stream. Warning, this requires a writable dictionary!
                      (        forth.asm):00758         * The new end of the dictionary is returned in Y. W is preserved.
E3B5 1038             (        forth.asm):00759 (6)     LOCWRT  pshsw
E3B7 9E08             (        forth.asm):00760 (4)             ldx     DICEND
                      (        forth.asm):00761                 IFNE    DEBUG
                      (        forth.asm):00762                 cmpx    #ROMSTRT
                      (        forth.asm):00763                 bcs     @locwr0
                      (        forth.asm):00764                 ldb     #10             Assertion failure (trying to write to ROM!)
                      (        forth.asm):00765                 jsr     ERRHDLR         No return
E3B9                  (        forth.asm):00766         LWAFRA  equ     *
                      (        forth.asm):00767                 ENDC
E3B9 9F0C             (        forth.asm):00768 (4)     @locwr0 stx     BDICEND         Back pointer up
E3BB 9E06             (        forth.asm):00769 (4)             ldx     LSTWAD
E3BD 9F0A             (        forth.asm):00770 (4)             stx     BLSTWAD         Back pointer up
E3BF BDE6EA           (        forth.asm):00771 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
E3C2 6D84             (        forth.asm):00772 (5+0)           tst     ,x
E3C4 2605             (        forth.asm):00773 (3)             bne     @locwr2
E3C6 C605             (        forth.asm):00774 (2)     @locwr1 ldb     #5              Missing word name
E3C8 BDE5EC           (        forth.asm):00775 (7)             jsr     ERRHDLR         No return
     E3CB             (        forth.asm):00776         LWMNRA  equ     *               LOCWRT missing word name return address
E3CB BDE27D           (        forth.asm):00777 (7)     @locwr2 jsr     SCNSTOK
E3CE 27F6             (        forth.asm):00778 (3)             beq     @locwr1         End of line reached
E3D0 BDE28B           (        forth.asm):00779 (7)             jsr     SCNETOK         X has TOKENEP, B has CURTOKL
E3D3 109E02           (        forth.asm):00780 (5)             ldy     TOKENSP
E3D6 103221           (        forth.asm):00781 (4)             subr    y,x
E3D9 3410             (        forth.asm):00782 (4+2)           pshs    x               Word length to the system stack
E3DB 9E08             (        forth.asm):00783 (4)             ldx     DICEND
E3DD A661             (        forth.asm):00784 (4+1)           lda     1,s             Word length LSB in the system stack
E3DF 8120             (        forth.asm):00785 (2)             cmpa    #1+WRLNMSK      Max word length is 31, 79-STANDARD compliant
E3E1 2505             (        forth.asm):00786 (3)             blo     @lcwr21
E3E3 C610             (        forth.asm):00787 (2)             ldb     #16             Word name is too long
E3E5 BDE5EC           (        forth.asm):00788 (7)             jsr     ERRHDLR
     E3E8             (        forth.asm):00789         WTOOLNG equ     *
E3E8 A780             (        forth.asm):00790 (4+1)   @lcwr21 sta     ,x+             Word length to dictionary
E3EA 10A6E1           (        forth.asm):00791 (6+2)           ldw     ,s++            16-bit word length to W
E3ED 1E12             (        forth.asm):00792 (5)             exg     x,y             Y points to the dictionary, X has TOKENSP
                      (        forth.asm):00793                 IFNE    CSSNTVE
                      (        forth.asm):00794                 tfm     x+,y+           Word name to dictionary, as is
                      (        forth.asm):00795                 ELSE
E3EF 1FF9             (        forth.asm):00796 (4)             tfr     f,b             Force dictionary entry to upper case
E3F1 A680             (        forth.asm):00797 (4+1)   @locwr3 lda     ,x+
E3F3 8161             (        forth.asm):00798 (2)             cmpa    #'a
E3F5 2506             (        forth.asm):00799 (3)             bcs     @locwr4
E3F7 817B             (        forth.asm):00800 (2)             cmpa    #'z+1
E3F9 2402             (        forth.asm):00801 (3)             bcc     @locwr4
E3FB 8020             (        forth.asm):00802 (2)             suba    #'a-'A          To upper case
E3FD A7A0             (        forth.asm):00803 (4+1)   @locwr4 sta     ,y+
E3FF 5A               (        forth.asm):00804 (1)             decb
E400 26EF             (        forth.asm):00805 (3)             bne     @locwr3
                      (        forth.asm):00806                 ENDC
E402 1F10             (        forth.asm):00807 (4)             tfr     x,d
E404 9322             (        forth.asm):00808 (4)             subd    BSBFADR
E406 DD1C             (        forth.asm):00809 (4)             std     UTOIN           Skip word name in the input stream
E408 9E06             (        forth.asm):00810 (4)             ldx     LSTWAD
E40A AFA1             (        forth.asm):00811 (5+2)           stx     ,y++            Back pointer to dictionary
                      (        forth.asm):00812                 IFNE    RELFEAT
E40C 6FA0             (        forth.asm):00813 (6+1)           clr     ,y+             Initialize the checksum header field
                      (        forth.asm):00814                 ENDC
E40E 109F08           (        forth.asm):00815 (5)             sty     DICEND
E411 109F0E           (        forth.asm):00816 (5)             sty     RECADDR         Should we resort to recursion later on
E414 1039             (        forth.asm):00817 (6)             pulsw
E416 39               (        forth.asm):00818 (4)             rts
                      (        forth.asm):00819         
                      (        forth.asm):00820         * Compile 'ldx  #X; jsr NPUSH'.
                      (        forth.asm):00821         * DICEND is updated and returned in Y.
E417 109E08           (        forth.asm):00822 (5)     LITER   ldy     DICEND
E41A 868E             (        forth.asm):00823 (2)             lda     #LDXOPC         LDX immediate
E41C 8D10             (        forth.asm):00824 (6)             bsr     VARCON2
E41E 86BD             (        forth.asm):00825 (2)             lda     #JSROPC         JSR extended
E420 BDE145           (        forth.asm):00826 (7)             jsr     CHKRTS          Check if the final RTS can be omitted
E423 8D06             (        forth.asm):00827 (6)             bsr     VARCON1
E425 109F08           (        forth.asm):00828 (5)             sty     DICEND
E428 39               (        forth.asm):00829 (4)             rts
                      (        forth.asm):00830         
                      (        forth.asm):00831         * Compile 'jmp  NPUSH'.
                      (        forth.asm):00832         * Y points to the end of the dictionary on entry and on exit.
E429 867E             (        forth.asm):00833 (2)     VARCON  lda     #JMPOPC         JMP extended
E42B 8EE663           (        forth.asm):00834 (3)     VARCON1 ldx     #NPUSH
E42E A7A0             (        forth.asm):00835 (4+1)   VARCON2 sta     ,y+
E430 AFA1             (        forth.asm):00836 (5+2)           stx     ,y++
E432 39               (        forth.asm):00837 (4)             rts
                      (        forth.asm):00838         
                      (        forth.asm):00839         * Used by U<, U>, <, >.
E433 CC0242BDE304     (        forth.asm):00840         CMP2    MINDREQ 2               At least 2 cells must be stacked up
E439 10AEC4           (        forth.asm):00841 (6+0)   CMP2RA  ldy     ,u
E43C AE42             (        forth.asm):00842 (5+1)           ldx     2,u
E43E 103721           (        forth.asm):00843 (4)             cmpr    y,x
E441 1FA9             (        forth.asm):00844 (4)             tfr     cc,b
                      (        forth.asm):00845                 IFNE    DEBUG
                      (        forth.asm):00846                 clra
                      (        forth.asm):00847                 std     CCREG
                      (        forth.asm):00848                 ENDC
E443 1FC1             (        forth.asm):00849 (4)             tfr     0,x
E445 3344             (        forth.asm):00850 (4+1)           leau    4,u
E447 1F9A             (        forth.asm):00851 (4)             tfr     b,cc
E449 39               (        forth.asm):00852 (4)             rts
                      (        forth.asm):00853         
                      (        forth.asm):00854         * Used by CMOVE, <CMOVE, CMOVE>, MOVE.
E44A CC0240BDE304     (        forth.asm):00855         ACQMOVP MINDREQ 3               At least 3 cells must be stacked up
E450 10A6C4           (        forth.asm):00856 (6+0)   ACQVMRA ldw     ,u              Byte count
E453 10AE42           (        forth.asm):00857 (6+1)           ldy     2,u             Destination address
E456 AE44             (        forth.asm):00858 (5+1)           ldx     4,u             Source address
E458 3346             (        forth.asm):00859 (4+1)           leau    6,u             Drop 3 cells from the user stack
E45A 39               (        forth.asm):00860 (4)             rts
                      (        forth.asm):00861         
                      (        forth.asm):00862         * FDCTSYM enveadours to match the address stored in Y to a dictionary entry.
                      (        forth.asm):00863         * Upon a successful flexible match, it will output a string in the form of
                      (        forth.asm):00864         * <wordname>+<offset> to the string pointed to by X. <wordname> refers to the
                      (        forth.asm):00865         * code entry point of the matched word. <offset> will be expressed in hex.
                      (        forth.asm):00866         * If a match is found, Z will be clear, otherwise it will be set.
                      (        forth.asm):00867         * A candidate for a word code address must meet the following criteria:
                      (        forth.asm):00868         * ((Y U>= #EBUFS) AND (Y U< #THEEND)) OR ((Y U>= #WDICSPC) AND (Y U< DICEND)).
                      (        forth.asm):00869         * Upon return:
                      (        forth.asm):00870         * - the string pointed to by X will updated with its symbolic match
                      (        forth.asm):00871         *   (NUL terminated), if there is one. X itself might have been altered.
                      (        forth.asm):00872         * - Y should be preserved.
                      (        forth.asm):00873         * EBUFS (EMPTY-BUFFERS) header address is the last word in the dictionary.
                      (        forth.asm):00874                 IFNE    SSDFEAT
E45B 3430             (        forth.asm):00875 (4+4)   FDCTSYM pshs    y,x     
E45D 1F21             (        forth.asm):00876 (4)             tfr     y,x             Potential execution token to X
E45F 8CE80D           (        forth.asm):00877 (3)             cmpx    #EBUFS
E462 2505             (        forth.asm):00878 (3)             blo     @fdstr2 
E464 8CFDAC           (        forth.asm):00879 (3)             cmpx    #THEEND
E467 250D             (        forth.asm):00880 (3)             blo     @fdsmtc
E469 8C0C10           (        forth.asm):00881 (3)     @fdstr2 cmpx    #WDICSPC        Term 2 of the predicate for a valid word addr
E46C 2504             (        forth.asm):00882 (3)             blo     @fdsnom
E46E 9C08             (        forth.asm):00883 (4)             cmpx    DICEND
E470 2504             (        forth.asm):00884 (3)             blo     @fdsmtc
E472 4F               (        forth.asm):00885 (1)     @fdsnom clra                    No match (Z is set)
E473 3530             (        forth.asm):00886 (4+4)           puls    x,y
E475 39               (        forth.asm):00887 (4)             rts
E476 9E06             (        forth.asm):00888 (4)     @fdsmtc ldx     LSTWAD          Potential match. Scan upward from LAST
                      (        forth.asm):00889         * X points to the latest word header, Y has an execution token.
E478 109608           (        forth.asm):00890 (5)             ldw     DICEND          W points to the end of the code section
E47B 3410             (        forth.asm):00891 (4+2)   @fdslop pshs    x               Pointer to the current word header
E47D E680             (        forth.asm):00892 (4+1)           ldb     ,x+
E47F C41F             (        forth.asm):00893 (2)             andb    #WRLNMSK
E481 3A               (        forth.asm):00894 (1)             abx                     Skip word name string
E482 EC81             (        forth.asm):00895 (5+2)           ldd     ,x++            Backlink to D
                      (        forth.asm):00896                 IFNE    RELFEAT
E484 3001             (        forth.asm):00897 (4+1)           leax    1,x             Skip the checksum
                      (        forth.asm):00898                 ENDC
E486 103712           (        forth.asm):00899 (4)             cmpr    x,y
E489 2530             (        forth.asm):00900 (3)             blo     @fdsnwd
E48B 103762           (        forth.asm):00901 (4)             cmpr    w,y
E48E 222B             (        forth.asm):00902 (3)             bhi     @fdsnwd         An equal address is allowed here, in case
                      (        forth.asm):00903         * jsr ERRHDLR is the last instruction for the word under consideration.
                      (        forth.asm):00904         * This happens to be the case for FORGET and LPAR.
                      (        forth.asm):00905         * Y matches the code range for the current word.
E490 3510             (        forth.asm):00906 (4+2)           puls    x
E492 E680             (        forth.asm):00907 (4+1)           ldb     ,x+
E494 C41F             (        forth.asm):00908 (2)             andb    #WRLNMSK
E496 1F9F             (        forth.asm):00909 (4)             tfr     b,f
E498 114F             (        forth.asm):00910 (2)             clre                    W has the matched word length
E49A 10AEE4           (        forth.asm):00911 (6+0)           ldy     ,s              Y points to the target buffer
E49D 8627             (        forth.asm):00912 (2)             lda     #''
E49F A7A0             (        forth.asm):00913 (4+1)           sta     ,y+
E4A1 113812           (        forth.asm):00914 (6+?)           tfm     x+,y+
E4A4 A7A0             (        forth.asm):00915 (4+1)           sta     ,y+
                      (        forth.asm):00916         * Offset processing.
E4A6 862B             (        forth.asm):00917 (2)             lda     #'+
E4A8 A7A0             (        forth.asm):00918 (4+1)           sta     ,y+
                      (        forth.asm):00919                 IFNE    RELFEAT
E4AA 3003             (        forth.asm):00920 (4+1)           leax    3,x             Skip backlink and checksum
                      (        forth.asm):00921                 ELSE
                      (        forth.asm):00922                 leax    2,x             Skip backlink
                      (        forth.asm):00923                 ENDC
E4AC EC62             (        forth.asm):00924 (5+1)           ldd     2,s             Execution token to D
E4AE 103210           (        forth.asm):00925 (4)             subr    x,d             Offset between XT and word entry point to D
E4B1 1F21             (        forth.asm):00926 (4)             tfr     y,x
E4B3 BDE172           (        forth.asm):00927 (7)             jsr     HDMP4           Dump hex incarnation of the offset to X
E4B6 3530             (        forth.asm):00928 (4+4)           puls    x,y
E4B8 1CFB             (        forth.asm):00929 (2)             andcc   #^ZFLAG         Clear ZFLAG
E4BA 39               (        forth.asm):00930 (4)             rts
                      (        forth.asm):00931         * Point to the next word.
E4BB 1039             (        forth.asm):00932 (6)     @fdsnwd pulsw                   Retrieve current word header address
E4BD 104D             (        forth.asm):00933 (2)             tstd
E4BF 27B1             (        forth.asm):00934 (3)             beq     @fdsnom         Just met the last dictionary entry
E4C1 1F01             (        forth.asm):00935 (4)             tfr     d,x             Point to previous word header
E4C3 10810C10         (        forth.asm):00936 (4)             cmpw    #WDICSPC        Are we transitioning from RAM to ROM?
E4C7 26B2             (        forth.asm):00937 (3)             bne     @fdslop         No singularity
E4C9 1086FDAC         (        forth.asm):00938 (4)             ldw     #THEEND         Won't be able to diagnose the ROM based @...
E4CD 20AC             (        forth.asm):00939 (3)             bra     @fdslop
                      (        forth.asm):00940         
                      (        forth.asm):00941         * Find the best possible symbolic approximation of Y and store it to the
                      (        forth.asm):00942         * buffer pointed to by X.
                      (        forth.asm):00943         * On entry:
                      (        forth.asm):00944         * - Y has a code address which is to be matched with a symbolic name + offset.
                      (        forth.asm):00945         * - X points to a buffer where the resolution is to be stored.
                      (        forth.asm):00946         * On return:
                      (        forth.asm):00947         * - Y is to be preserved.
                      (        forth.asm):00948         * - the output buffer will be updated with the best symbolic match (NUL term'd).
E4CF 3430             (        forth.asm):00949 (4+4)   FINDSYM pshs    y,x
E4D1 8D88             (        forth.asm):00950 (6)             bsr     FDCTSYM         Search the dictionary first (flexible match)
E4D3 261B             (        forth.asm):00951 (3)             bne     @dctmfn         Dictionary match found
E4D5 8EE4F5           (        forth.asm):00952 (3)             ldx     #NDCTWKS        Search kernel symbols for an exact match
E4D8 EC81             (        forth.asm):00953 (5+2)   @fsmlop ldd     ,x++
E4DA 270B             (        forth.asm):00954 (3)             beq     @fsmfnd         End of well known symbols list?
E4DC 103720           (        forth.asm):00955 (4)             cmpr    y,d
E4DF 2706             (        forth.asm):00956 (3)             beq     @fsmfnd
                      (        forth.asm):00957         * No well known symbol match. Skip string.
E4E1 A680             (        forth.asm):00958 (4+1)   @fsmskp lda     ,x+
E4E3 26FC             (        forth.asm):00959 (3)             bne     @fsmskp
E4E5 20F1             (        forth.asm):00960 (3)             bra     @fsmlop
E4E7 10AEE4           (        forth.asm):00961 (6+0)   @fsmfnd ldy     ,s
E4EA A680             (        forth.asm):00962 (4+1)   @fsmfn2 lda     ,x+
E4EC A7A0             (        forth.asm):00963 (4+1)           sta     ,y+
E4EE 26FA             (        forth.asm):00964 (3)             bne     @fsmfn2
E4F0 3262             (        forth.asm):00965 (4+1)   @dctmfn leas    2,s
E4F2 3520             (        forth.asm):00966 (4+2)           puls    y
E4F4 39               (        forth.asm):00967 (4)             rts
                      (        forth.asm):00968         
                      (        forth.asm):00969         * Non-dictionary well known symbols.
E4F5 E000             (        forth.asm):00970         NDCTWKS fdb     IODZHDL         Illegal opcode/Division by zero trap handler
E4F7 494F445A48444C00 (        forth.asm):00971                 fcn     'IODZHDL'
E4FF E67F             (        forth.asm):00972                 fdb     DPOPRA          Data stack underflow
E501 44504F50524100   (        forth.asm):00973                 fcn     'DPOPRA'
E508 E670             (        forth.asm):00974                 fdb     DPSHRA          Data stack overflow
E50A 44505348524100   (        forth.asm):00975                 fcn     'DPSHRA'
E511 E6B7             (        forth.asm):00976                 fdb     RPOPRA          Return stack underflow
E513 52504F50524100   (        forth.asm):00977                 fcn     'RPOPRA'
E51A E69D             (        forth.asm):00978                 fdb     RPSHRA          Return stack overflow
E51C 52505348524100   (        forth.asm):00979                 fcn     'RPSHRA'
E523 E5EC             (        forth.asm):00980                 fdb     ERRHDLR         Error handler
E525 45525248444C5200 (        forth.asm):00981                 fcn     'ERRHDLR'
E52D E2AD             (        forth.asm):00982                 fdb     CKBASRA         Illegal BASE value
E52F 434B424153524100 (        forth.asm):00983                 fcn     'CKBASRA'
E537 E30F             (        forth.asm):00984                 fdb     CKDPTRA         Not enough parameters supplied (transac. behav.)
E539 434B445054524100 (        forth.asm):00985                 fcn     'CKDPTRA'
E541 E439             (        forth.asm):00986                 fdb     CMP2RA          Missing operand in any of U<, U>, <, >
E543 434D5032524100   (        forth.asm):00987                 fcn     'CMP2RA'
E54A E450             (        forth.asm):00988                 fdb     ACQVMRA         Three operands missing in any of CMOVE,
                      (        forth.asm):00989         *                               <CMOVE, CMOVE>, MOVE
E54C 414351564D524100 (        forth.asm):00990                 fcn     'ACQVMRA'
E554 E0B4             (        forth.asm):00991                 fdb     MINTLRA         Main interpreter loop return address
E556 4D494E544C524100 (        forth.asm):00992                 fcn     'MINTLRA'
E55E E304             (        forth.asm):00993                 fdb     NUMCVRA         ? while converting a string to a number
E560 4E554D4356524100 (        forth.asm):00994                 fcn     'NUMCVRA'
E568 E0C7             (        forth.asm):00995                 fdb     NMCVIRA         Numeric conversion error while interpreting
E56A 4E4D435649524100 (        forth.asm):00996                 fcn     'NMCVIRA'
E572 E13E             (        forth.asm):00997                 fdb     NMCVCRA         Numeric conversion error while compiling
E574 4E4D435643524100 (        forth.asm):00998                 fcn     'NMCVCRA'
E57C E0FE             (        forth.asm):00999                 fdb     INTRPRA         Interpreter RA (after the execution of a word)
E57E 494E545250524100 (        forth.asm):01000                 fcn     'INTRPRA'
E586 E0B6             (        forth.asm):01001                 fdb     _INTERP         Interpreter actual active subroutine
E588 5F494E5445525000 (        forth.asm):01002                 fcn     '_INTERP'
E590 E11D             (        forth.asm):01003                 fdb     COMPLRA         Compiler RA (after the execution of an IMD word)
E592 434F4D504C524100 (        forth.asm):01004                 fcn     'COMPLRA'
E59A E3CB             (        forth.asm):01005                 fdb     LWMNRA          Missing word name in LOCWRT
E59C 4C574D4E524100   (        forth.asm):01006                 fcn     'LWMNRA'
E5A3 E3E8             (        forth.asm):01007                 fdb     WTOOLNG         Word length is too long
E5A5 57544F4F4C4E4700 (        forth.asm):01008                 fcn     'WTOOLNG'
E5AD E7A4             (        forth.asm):01009                 fdb     CFR1SRA         CF read one sector failed
E5AF 4346523153524100 (        forth.asm):01010                 fcn     'CFR1SRA'
E5B7 E663             (        forth.asm):01011                 fdb     NPUSH           Not an error RA but useful to have as a symbol
E5B9 4E5055534800     (        forth.asm):01012                 fcn     'NPUSH'
E5BF E680             (        forth.asm):01013                 fdb     RPUSH           Not an error RA but useful to have as a symbol
E5C1 525055534800     (        forth.asm):01014                 fcn     'RPUSH'
E5C7 E671             (        forth.asm):01015                 fdb     NPOP            Not an error RA but useful to have as a symbol
E5C9 4E504F5000       (        forth.asm):01016                 fcn     'NPOP'
E5CE E69E             (        forth.asm):01017                 fdb     RPOP            Not an error RA but useful to have as a symbol
E5D0 52504F5000       (        forth.asm):01018                 fcn     'RPOP'
E5D5 E1D8             (        forth.asm):01019                 fdb     PUTS            Not an error RA but useful to have as a symbol
E5D7 5055545300       (        forth.asm):01020                 fcn     'PUTS'
E5DC E6E5             (        forth.asm):01021                 fdb     BK2BBRA
E5DE 424B324242524100 (        forth.asm):01022                 fcn     'BK2BBRA'       Block BLK @ not mapped in INTERPRET
                      (        forth.asm):01023                 IFNE    DEBUG
                      (        forth.asm):01024                 fdb     LWAFRA          Assertion failure in LOCWRT
                      (        forth.asm):01025                 fcn     'LOCWRTAF'
                      (        forth.asm):01026                 ENDC
E5E6 0000             (        forth.asm):01027                 fdb     0               End of list
E5E8 3F3F3F00         (        forth.asm):01028                 fcn     '???'           Admit we have no clue!
                      (        forth.asm):01029                 ENDC                    SSDFEAT
                      (        forth.asm):01030         
                      (        forth.asm):01031         * Handle error condition. Error code is in B.
                      (        forth.asm):01032         * If B is 2 (undefined) X points to a string of length CURTOKL that has the
                      (        forth.asm):01033         * offending word.
E5EC 10AEE4           (        forth.asm):01034 (6+0)   ERRHDLR ldy     ,s              Invoking return address
                      (        forth.asm):01035         * In case of a trap return, we enter here with Y set to #IODZHDL
E5EF C102             (        forth.asm):01036 (2)     ERRHD1  cmpb    #2              Undefined symbol?
E5F1 261A             (        forth.asm):01037 (3)             bne     @perrm          No
E5F3 8627             (        forth.asm):01038 (2)             lda     #''
E5F5 BDE1B4           (        forth.asm):01039 (7)             jsr     PUTCH
E5F8 A680             (        forth.asm):01040 (4+1)   @prtsym lda     ,x+             Display undefined symbol name
E5FA BDE1B4           (        forth.asm):01041 (7)             jsr     PUTCH
E5FD 0A2D             (        forth.asm):01042 (5)             dec     CURTOKL
E5FF 2702             (        forth.asm):01043 (3)             beq     @endquo
E601 20F5             (        forth.asm):01044 (3)             bra     @prtsym
E603 8627             (        forth.asm):01045 (2)     @endquo lda     #''
E605 BDE1B4           (        forth.asm):01046 (7)             jsr     PUTCH
E608 8620             (        forth.asm):01047 (2)             lda     #SP
E60A BDE1B4           (        forth.asm):01048 (7)             jsr     PUTCH
E60D 8EFE78           (        forth.asm):01049 (3)     @perrm  ldx     #ERRMTBL        Regular error handling
E610 5D               (        forth.asm):01050 (1)     @nxterr tstb
E611 2631             (        forth.asm):01051 (3)             bne     @skerrm
E613 BDE1D8           (        forth.asm):01052 (7)             jsr     PUTS
E616 BDE1E5           (        forth.asm):01053 (7)             jsr     PUTCR
E619 1F20             (        forth.asm):01054 (4)     @dmptos tfr     y,d             Dump top of the system stack contents
E61B 8E034A           (        forth.asm):01055 (3)             ldx     #HEXBUF
E61E BDE172           (        forth.asm):01056 (7)             jsr     HDMP4
E621 8620             (        forth.asm):01057 (2)             lda     #SP
E623 A780             (        forth.asm):01058 (4+1)           sta     ,x+
                      (        forth.asm):01059         * Symbolic stack dumps are configurable. In situations where the dictionary is
                      (        forth.asm):01060         * trashed, they may not be considered desirable. See SSDFEAT in constants.asm.
                      (        forth.asm):01061                 IFNE    SSDFEAT
E625 BDE4CF           (        forth.asm):01062 (7)             jsr     FINDSYM
                      (        forth.asm):01063                 ENDC
E628 8E034A           (        forth.asm):01064 (3)             ldx     #HEXBUF
E62B BDE1D8           (        forth.asm):01065 (7)             jsr     PUTS
E62E BDE1E5           (        forth.asm):01066 (7)             jsr     PUTCR
E631 108CE000         (        forth.asm):01067 (4)             cmpy    #IODZHDL
E635 2702             (        forth.asm):01068 (3)             beq     @wastrp         We're just back from the trap handler
E637 3262             (        forth.asm):01069 (4+1)           leas    2,s             Point to the next item on the stack
E639 118C8000         (        forth.asm):01070 (4)     @wastrp cmps    #RAMSTRT+RAMSIZE
E63D 270C             (        forth.asm):01071 (3)             beq     @errdon         We're done here
E63F 10AEE4           (        forth.asm):01072 (6+0)           ldy     ,s
E642 20D5             (        forth.asm):01073 (3)             bra     @dmptos
E644 A680             (        forth.asm):01074 (4+1)   @skerrm lda     ,x+             Scan for the next error message
E646 26FC             (        forth.asm):01075 (3)             bne     @skerrm
E648 5A               (        forth.asm):01076 (1)             decb
E649 20C5             (        forth.asm):01077 (3)             bra     @nxterr
E64B 10CE8000         (        forth.asm):01078 (4)     @errdon lds     #RAMSTRT+RAMSIZE
E64F 961B             (        forth.asm):01079 (3)             lda     USTATE+1        We do ignore the upper byte
E651 270D             (        forth.asm):01080 (3)             beq     @erdon2         No pointers to restore if we were interpreting
                      (        forth.asm):01081         * Compiling: clear STATE, RSP and restore LSTWAD, DICEND.
E653 0F1B             (        forth.asm):01082 (5)             clr     USTATE+1        Switch back to interpretation mode
E655 BDE9CE           (        forth.asm):01083                 RFXT    jsr,RCLR+7      XT for RCLR
E658 9E0C             (        forth.asm):01084 (4)             ldx     BDICEND         Restore essential pointers from backups
E65A 9F08             (        forth.asm):01085 (4)             stx     DICEND          Restore HERE
E65C 9E0A             (        forth.asm):01086 (4)             ldx     BLSTWAD
E65E 9F06             (        forth.asm):01087 (4)             stx     LSTWAD          Restore LAST
E660 7EE09E           (        forth.asm):01088 (3)     @erdon2 jmp     INTERP
                      (        forth.asm):01089         
                      (        forth.asm):01090         * Push X to the data stack (boundary is checked).
E663 11830186         (        forth.asm):01091 (4)     NPUSH   cmpu    #NSTTOP
E667 2303             (        forth.asm):01092 (3)             bls     @npush1         Anything <= than #NSTTOP indicates overflow
E669 3610             (        forth.asm):01093 (4+2)           pshu    x               Aka UCNPUSH
E66B 39               (        forth.asm):01094 (4)             rts
E66C 5F               (        forth.asm):01095 (1)     @npush1 clrb                    Data stack overflow
E66D BDE5EC           (        forth.asm):01096 (7)             jsr     ERRHDLR         No return
     E670             (        forth.asm):01097         DPSHRA  equ     *
E670 12               (        forth.asm):01098 (1)             nop
                      (        forth.asm):01099         
                      (        forth.asm):01100         * Pull X from the data stack (boundary is checked).
                      (        forth.asm):01101         * D, W and Y are preserved.
E671 11830246         (        forth.asm):01102 (4)     NPOP    cmpu    #NSTBOT
E675 2403             (        forth.asm):01103 (3)             bhs     @npop1          Anything >= than #NSTBOT indicates underflow
E677 3710             (        forth.asm):01104 (4+2)           pulu    x
E679 39               (        forth.asm):01105 (4)             rts
E67A C601             (        forth.asm):01106 (2)     @npop1  ldb     #1              Data stack underflow
E67C BDE5EC           (        forth.asm):01107 (7)             jsr     ERRHDLR         No return
     E67F             (        forth.asm):01108         DPOPRA  equ     *
E67F 12               (        forth.asm):01109 (1)             nop
                      (        forth.asm):01110         
                      (        forth.asm):01111         * Push X to the return stack (boundary is checked).
E680 9625             (        forth.asm):01112 (3)     RPUSH   lda     RDEPTH          RDEPTH is expressed in cells
E682 8140             (        forth.asm):01113 (2)             cmpa    #RSTKSZ/2       But RSTKZ is expressed in bytes
E684 2712             (        forth.asm):01114 (3)             beq     @rpush1
E686 4C               (        forth.asm):01115 (1)             inca
E687 9725             (        forth.asm):01116 (3)             sta     RDEPTH
E689 0F27             (        forth.asm):01117 (5)             clr     RTSREMV         Do not get rid of the final RTS
E68B 1F27             (        forth.asm):01118 (4)             tfr     y,v
E68D 109E00           (        forth.asm):01119 (5)             ldy     RSP
E690 AFA3             (        forth.asm):01120 (5+2)           stx     ,--y
E692 109F00           (        forth.asm):01121 (5)             sty     RSP
E695 1F72             (        forth.asm):01122 (4)             tfr     v,y
E697 39               (        forth.asm):01123 (4)             rts
E698 C607             (        forth.asm):01124 (2)     @rpush1 ldb     #7              Return stack overflow
E69A BDE5EC           (        forth.asm):01125 (7)             jsr     ERRHDLR         No return
     E69D             (        forth.asm):01126         RPSHRA  equ     *
E69D 12               (        forth.asm):01127 (1)             nop                     Meant to insulate RPUSH errors from RPOP EP
                      (        forth.asm):01128         
                      (        forth.asm):01129         * Pull X from the return stack (boundary is checked).
E69E 9625             (        forth.asm):01130 (3)     RPOP    lda     RDEPTH          RDEPTH is expressed in cells
E6A0 2710             (        forth.asm):01131 (3)             beq     @rpop1
E6A2 4A               (        forth.asm):01132 (1)             deca
E6A3 9725             (        forth.asm):01133 (3)             sta     RDEPTH
E6A5 1F27             (        forth.asm):01134 (4)             tfr     y,v
E6A7 109E00           (        forth.asm):01135 (5)             ldy     RSP
E6AA AEA1             (        forth.asm):01136 (5+2)           ldx     ,y++
E6AC 109F00           (        forth.asm):01137 (5)             sty     RSP
E6AF 1F72             (        forth.asm):01138 (4)             tfr     v,y
E6B1 39               (        forth.asm):01139 (4)             rts
E6B2 C608             (        forth.asm):01140 (2)     @rpop1  ldb     #8              Return stack underflow
E6B4 BDE5EC           (        forth.asm):01141 (7)             jsr     ERRHDLR         No return
     E6B7             (        forth.asm):01142         RPOPRA  equ     *
                      (        forth.asm):01143         
                      (        forth.asm):01144         * Derive a workable base buffer address from BLK and return it through X.
                      (        forth.asm):01145         * Update BSBFADR accordingly. The buffer in question is assumed to have been
                      (        forth.asm):01146         * mapped previously (through a call to BLOCK). An assertion failure will be
                      (        forth.asm):01147         * raised if that is not the case. W is preserved, Y is untouched.
E6B7 1038             (        forth.asm):01148 (6)     BLK2BB  pshsw
E6B9 10961E           (        forth.asm):01149 (5)             ldw     UBLK
E6BC 2605             (        forth.asm):01150 (3)             bne     @bufadr
E6BE 8E02C6           (        forth.asm):01151 (3)             ldx     #CMDBUF         Base buffer address for the serial line
E6C1 2022             (        forth.asm):01152 (3)             bra     @rslvd
E6C3 8E03F0           (        forth.asm):01153 (3)     @bufadr ldx     #BUF0           Buffer 0 base address
E6C6 C602             (        forth.asm):01154 (2)             ldb     #2              Number of resident buffers
E6C8 A6890401         (        forth.asm):01155 (4+3)   @chkflg lda     BOFLAGS,x       Buffer flags to A
E6CC 8403             (        forth.asm):01156 (2)             anda    #BINUSE|BMAPPD
E6CE 8103             (        forth.asm):01157 (2)             cmpa    #BINUSE|BMAPPD  Is this buffer in use and mapped in?
E6D0 2607             (        forth.asm):01158 (3)             bne     @nxtbuf
E6D2 10A1890402       (        forth.asm):01159 (6+3)           cmpw    BOBLKNO,x       Is this the block we are looking for?
E6D7 270C             (        forth.asm):01160 (3)             beq     @rslvd          Yes
E6D9 30890410         (        forth.asm):01161 (4+3)   @nxtbuf leax    BFDISP,x        Point to the next buffer
E6DD 5A               (        forth.asm):01162 (1)             decb
E6DE 26E8             (        forth.asm):01163 (3)             bne     @chkflg
E6E0 C60A             (        forth.asm):01164 (2)     @asfail ldb     #10             Assertion failure
E6E2 BDE5EC           (        forth.asm):01165 (7)             jsr     ERRHDLR         No return
     E6E5             (        forth.asm):01166         BK2BBRA equ     *               For symbolic system stack debugging purposes
E6E5 9F22             (        forth.asm):01167 (4)     @rslvd  stx     BSBFADR         Base buffer address is resolved through X
E6E7 1039             (        forth.asm):01168 (6)             pulsw
E6E9 39               (        forth.asm):01169 (4)             rts
                      (        forth.asm):01170         
                      (        forth.asm):01171         * Derive the current input stream pointer from BLK and >IN.
                      (        forth.asm):01172         * Y and W are untouched. The resulting address is returned in X.
                      (        forth.asm):01173         * D is altered. W is preserved, Y is untouched.
E6EA 8DCB             (        forth.asm):01174 (6)     BKIN2PT bsr     BLK2BB          Retrieve buffer address based on BLK's value
E6EC DC1C             (        forth.asm):01175 (4)             ldd     UTOIN
E6EE 308B             (        forth.asm):01176 (4+2)           leax    d,x             Add the current offset. Return the result via X
E6F0 39               (        forth.asm):01177 (4)             rts
                      (        forth.asm):01178         
                      (        forth.asm):01179                 include storage.asm
                      (      storage.asm):00001         * Wait until the BSY bit is clear in the CF status register.
                      (      storage.asm):00002         * Upon return the BSY bit is guaranteed to be zero. Z will
                      (      storage.asm):00003         * be set in CC. This subroutine should not be called before
                      (      storage.asm):00004         * the CompactFlash presence has been assessed.
E6F1 B6C007           (      storage.asm):00005 (4)     CFWAIT  lda     CFSTATR
E6F4 8580             (      storage.asm):00006 (2)             bita    #CFBSYB
E6F6 26F9             (      storage.asm):00007 (3)             bne     CFWAIT
E6F8 39               (      storage.asm):00008 (4)             rts
                      (      storage.asm):00009         
                      (      storage.asm):00010         * Wait until the BSY bit is clear and the RDY bit is set.
E6F9 8DF6             (      storage.asm):00011 (6)     CFRDY   bsr     CFWAIT
E6FB 2703             (      storage.asm):00012 (3)             beq     @cfrdy0         Card not busy, proceed
E6FD 1A04             (      storage.asm):00013 (2)             orcc    #ZFLAG
E6FF 39               (      storage.asm):00014 (4)             rts
E700 8E2000           (      storage.asm):00015 (3)     @cfrdy0 ldx     #$2000          Maximum poll count
E703 8640             (      storage.asm):00016 (2)             lda     #CFRDYB
E705 B5C007           (      storage.asm):00017 (4)     @cfrdy1 bita    CFSTATR
E708 2604             (      storage.asm):00018 (3)             bne     @cfrdy2         BSY bit is set, continue
E70A 301F             (      storage.asm):00019 (4+1)           leax    -1,x            Card not ready, decrement poll count
E70C 26F7             (      storage.asm):00020 (3)             bne     @cfrdy1         and try again
E70E 39               (      storage.asm):00021 (4)     @cfrdy2 rts                     Return with Z set: card not present
                      (      storage.asm):00022         *                               Return with Z clear: card is ready
                      (      storage.asm):00023         
                      (      storage.asm):00024         * Check for possible error condition.
                      (      storage.asm):00025         * Upon return either Z is set (A is zero) and no error occurred or
                      (      storage.asm):00026         * Z is clear and the CF error register contents is returned in A.
E70F 8DE0             (      storage.asm):00027 (6)     CFERRCK bsr     CFWAIT
E711 B6C007           (      storage.asm):00028 (4)             lda     CFSTATR
E714 8401             (      storage.asm):00029 (2)             anda    #CFERRB
E716 2703             (      storage.asm):00030 (3)             beq     @cfeck1
E718 B6C001           (      storage.asm):00031 (4)             lda     CFERROR         The error register contains error details
E71B 39               (      storage.asm):00032 (4)     @cfeck1 rts
                      (      storage.asm):00033         
                      (      storage.asm):00034         * Issue CF command. The command code is passed through the B register.
                      (      storage.asm):00035         * Upon return:
                      (      storage.asm):00036         * - Z is set and everything is peachy.
                      (      storage.asm):00037         * - or Z is clear and the CF error register contents will be
                      (      storage.asm):00038         *   returned in A (and mirrored in the global CFERRCD variable).
                      (      storage.asm):00039         * B is preserved.
E71C 8DDB             (      storage.asm):00040 (6)     CFCMDIS bsr     CFRDY
E71E 270A             (      storage.asm):00041 (3)             beq     @cfciab         Card not ready, abort
E720 D732             (      storage.asm):00042 (3)             stb     CFCMMIR         Update CF command mirror
E722 F7C007           (      storage.asm):00043 (4)             stb     CFCOMDR         Send command to the CF card
E725 8DE8             (      storage.asm):00044 (6)             bsr     CFERRCK
E727 9733             (      storage.asm):00045 (3)     @cfcise sta     CFERRCD         CF command issue set error
                      (      storage.asm):00046                 IFNE    DEBUG
                      (      storage.asm):00047                 pshs    a,cc
                      (      storage.asm):00048                 beq     @cfciok
                      (      storage.asm):00049                 lda     #'!
                      (      storage.asm):00050                 jsr     PUTCH
E729                  (      storage.asm):00051         @cfcidi lda     CFCMMIR
                      (      storage.asm):00052                 ldx     #TBUFF
                      (      storage.asm):00053                 jsr     HDMP2
                      (      storage.asm):00054                 lda     #'/
                      (      storage.asm):00055                 sta     ,x+
                      (      storage.asm):00056                 lda     CFERRCD
                      (      storage.asm):00057                 jsr     HDMP2
                      (      storage.asm):00058                 ldx     #TBUFF
                      (      storage.asm):00059                 jsr     PUTS
                      (      storage.asm):00060                 jsr     PUTCR
                      (      storage.asm):00061                 bra     @cfcict         CF command issue continued
E729                  (      storage.asm):00062         @cfciok lda     #'#
                      (      storage.asm):00063                 jsr     PUTCH
                      (      storage.asm):00064                 bra     @cfcidi         CF command issue data indication
E729                  (      storage.asm):00065         @cfcict puls    cc,a
                      (      storage.asm):00066                 ENDC
E729 39               (      storage.asm):00067 (4)             rts
E72A 86FF             (      storage.asm):00068 (2)     @cfciab lda     #$FF            Dummy error code
E72C 20F9             (      storage.asm):00069 (3)             bra     @cfcise
                      (      storage.asm):00070         
                      (      storage.asm):00071         * Drive 0 select.
E72E 8DC9             (      storage.asm):00072 (6)     CFDRSEL bsr     CFRDY
E730 86E0             (      storage.asm):00073 (2)             lda     #$E0            Drive 0, LBA mode
E732 B7C006           (      storage.asm):00074 (4)             sta     CFDRHDR
E735 20C2             (      storage.asm):00075 (3)             bra     CFRDY
                      (      storage.asm):00076         
                      (      storage.asm):00077         * Analyze the response to the CF "Identify Device" request.
E737 9E08             (      storage.asm):00078 (4)     CFANTHS ldx     DICEND
E739 308836           (      storage.asm):00079 (4+1)           leax    $36,x           Point to the "Model number" field
E73C 3410             (      storage.asm):00080 (4+2)           pshs    x
E73E 118614           (      storage.asm):00081 (3)             lde     #$14            Number of 16 bit words to go through
E741 EC84             (      storage.asm):00082 (5+0)   @bytswp ldd     ,x
E743 1E98             (      storage.asm):00083 (5)             exg     b,a             Byte swapping
E745 ED81             (      storage.asm):00084 (5+2)           std     ,x++
E747 114A             (      storage.asm):00085 (2)             dece
E749 26F6             (      storage.asm):00086 (3)             bne     @bytswp
E74B 6F84             (      storage.asm):00087 (6+0)           clr     ,x
E74D 3510             (      storage.asm):00088 (4+2)           puls    x
E74F BDE1D8           (      storage.asm):00089 (7)             jsr     PUTS            Decent CF cards indicate the capacity that way
E752 7EE1E5           (      storage.asm):00090 (3)             jmp     PUTCR           Up to $10000 blocks is 64 MB!
                      (      storage.asm):00091         
                      (      storage.asm):00092         * Initialize the CompactFlash subsystem.
                      (      storage.asm):00093         * This is run once at boot time. There is no hot plug support here.
E755 0F31             (      storage.asm):00094 (5)     CFINIT  clr     CFCARDP         Clear card present,
                      (      storage.asm):00095                 IFEQ    DEBUG
E757 8DA0             (      storage.asm):00096 (6)             bsr     CFRDY
                      (      storage.asm):00097                 ELSE
                      (      storage.asm):00098                 jsr     CFRDY
                      (      storage.asm):00099                 ENDC
E759 2730             (      storage.asm):00100 (3)             beq     @cfinab         Card not ready, abort
E75B 8DD1             (      storage.asm):00101 (6)             bsr     CFDRSEL         Drive 0 select
E75D 8601             (      storage.asm):00102 (2)             lda     #1              Enable 8-bit data transfers
E75F B7C001           (      storage.asm):00103 (4)             sta     CFFEATR
E762 C6EF             (      storage.asm):00104 (2)             ldb     #CFSETFT        Issue a CF "Set Feature" command
                      (      storage.asm):00105                 IFEQ    DEBUG
E764 8DB6             (      storage.asm):00106 (6)             bsr     CFCMDIS         Not allowed to fail
                      (      storage.asm):00107                 ELSE
                      (      storage.asm):00108                 jsr     CFCMDIS         Not allowed to fail
                      (      storage.asm):00109                 ENDC
E766 2623             (      storage.asm):00110 (3)             bne     @cfinab         Abort with card present flag clear
E768 8601             (      storage.asm):00111 (2)             lda     #1              Request default PIO mode wo/ IORDY
E76A B7C002           (      storage.asm):00112 (4)             sta     CFSCNTR
E76D 8603             (      storage.asm):00113 (2)             lda     #3              ATA-2 "Set Transfer mode"
E76F B7C001           (      storage.asm):00114 (4)             sta     CFFEATR
                      (      storage.asm):00115                 IFEQ    DEBUG
E772 8DA8             (      storage.asm):00116 (6)             bsr     CFCMDIS         OK to fail
                      (      storage.asm):00117                 ELSE
                      (      storage.asm):00118                 jsr     CFCMDIS         OK to fail
                      (      storage.asm):00119                 ENDC
E774 8682             (      storage.asm):00120 (2)             lda     #$82            Disable write caching
E776 B7C001           (      storage.asm):00121 (4)             sta     CFFEATR
                      (      storage.asm):00122                 IFEQ    DEBUG
E779 8DA1             (      storage.asm):00123 (6)             bsr     CFCMDIS         B still has #CFSETF. Also OK to fail
                      (      storage.asm):00124                 ELSE
                      (      storage.asm):00125                 jsr     CFCMDIS         B still has #CFSETF. Also OK to fail
                      (      storage.asm):00126                 ENDC
E77B C6EC             (      storage.asm):00127 (2)             ldb     #CFIDDEV        Issue a CF "Identify Device" command
                      (      storage.asm):00128                 IFEQ    DEBUG
E77D 8D9D             (      storage.asm):00129 (6)             bsr     CFCMDIS         Not allowed to fail
                      (      storage.asm):00130                 ELSE
                      (      storage.asm):00131                 jsr     CFCMDIS         Not allowed to fail
                      (      storage.asm):00132                 ENDC
E77F 260A             (      storage.asm):00133 (3)             bne     @cfinab         Abort with card present flag clear
E781 9E08             (      storage.asm):00134 (4)             ldx     DICEND          Target address is HERE
E783 8D07             (      storage.asm):00135 (6)             bsr     CF1SRD          Read one sector
E785 8DB0             (      storage.asm):00136 (6)             bsr     CFANTHS         Analyze this!
E787 8601             (      storage.asm):00137 (2)             lda     #1
E789 9731             (      storage.asm):00138 (3)             sta     CFCARDP         Set the card present flag
E78B 39               (      storage.asm):00139 (4)     @cfinab rts
                      (      storage.asm):00140         
                      (      storage.asm):00141         * Read one sector. The LBA parameters are assumed to have been set previously.
                      (      storage.asm):00142         * On input X points to the receiving (at least 512 bytes long) buffer.
E78C B6C007           (      storage.asm):00143 (4)     CF1SRD  lda     CFSTATR
E78F 8508             (      storage.asm):00144 (2)             bita    #CFDRQB         Check for DRQ bit in the CF status register
E791 270C             (      storage.asm):00145 (3)             beq     IOERR
E793 10860200         (      storage.asm):00146 (4)             ldw     #CFSCSZ         Sector size is 512 bytes
E797 108EC000         (      storage.asm):00147 (4)             ldy     #CFDATAR        The data source address
E79B 113B21           (      storage.asm):00148 (6+?)           tfm     y,x+            Note: tfm is interruptible!
E79E 39               (      storage.asm):00149 (4)             rts
E79F C611             (      storage.asm):00150 (2)     IOERR   ldb     #17
E7A1 BDE5EC           (      storage.asm):00151 (7)             jsr     ERRHDLR         No return
E7A4 12               (      storage.asm):00152 (1)     CFR1SRA nop                     For symbolic stack dump debugging purposes
                      (      storage.asm):00153         
                      (      storage.asm):00154         * Write one sector. The LBA parameters are assumed to have been set previously.
                      (      storage.asm):00155         * On input X points to the sending (at least 512 bytes long) buffer.
E7A5 B6C007           (      storage.asm):00156 (4)     CF1SWR  lda     CFSTATR
E7A8 8488             (      storage.asm):00157 (2)             anda    #CFBSYB|CFDRQB
E7AA 8108             (      storage.asm):00158 (2)             cmpa    #CFDRQB         Check for BSY clear and DRQ set
E7AC 26F7             (      storage.asm):00159 (3)             bne     CF1SWR
E7AE 10860200         (      storage.asm):00160 (4)             ldw     #CFSCSZ         Sector size is 512 bytes
E7B2 108EC000         (      storage.asm):00161 (4)             ldy     #CFDATAR        The data destination address
E7B6 113A12           (      storage.asm):00162 (6+?)           tfm     x+,y            Note: tfm is interruptible!
E7B9 39               (      storage.asm):00163 (4)             rts
                      (      storage.asm):00164         
                      (      storage.asm):00165         * 1KB Forth block support primitives. Not dictionary code. More like BIOS ops.
                      (      storage.asm):00166         
                      (      storage.asm):00167         * One block IO preamble: select drive and LBA parameters. On input:
                      (      storage.asm):00168         * ,s has the return address
                      (      storage.asm):00169         * 2,s had the return address for the caller
                      (      storage.asm):00170         * 4,s has the target block number
E7BA BDE6F1           (      storage.asm):00171 (7)     CF1BPRE jsr     CFWAIT
E7BD BDE72E           (      storage.asm):00172 (7)             jsr     CFDRSEL         Set drive and head parameters
E7C0 EC64             (      storage.asm):00173 (5+1)           ldd     4,s
E7C2 1048             (      storage.asm):00174 (2)             lsld                    Convert block number to sector number
E7C4 F7C003           (      storage.asm):00175 (4)             stb     CFSNUMR         LBA 7-0
E7C7 B7C004           (      storage.asm):00176 (4)             sta     CFCLOWR         LBA 15-8
E7CA 1FA8             (      storage.asm):00177 (4)             tfr     cc,a
E7CC 8401             (      storage.asm):00178 (2)             anda    #CFLAG
E7CE B7C005           (      storage.asm):00179 (4)             sta     CFCHIGR         LBA 23-16 (carry to cylinder high)
E7D1 8602             (      storage.asm):00180 (2)             lda     #2              2 IDE sectors per Forth block
E7D3 B7C002           (      storage.asm):00181 (4)             sta     CFSCNTR
E7D6 39               (      storage.asm):00182 (4)             rts
                      (      storage.asm):00183         
                      (      storage.asm):00184         * Read one block from CF device. On input:
                      (      storage.asm):00185         * ,s has the return address
                      (      storage.asm):00186         * 2,s has the target block number
                      (      storage.asm):00187         * 4,s has the buffer base address
                      (      storage.asm):00188         * Upon return, Y will be preserved.
E7D7 0D31             (      storage.asm):00189 (4)     CF1BKRD tst     CFCARDP
E7D9 2602             (      storage.asm):00190 (3)             bne     @ctnued
E7DB 20C2             (      storage.asm):00191 (3)             bra     IOERR           Card not present--CF subsystem not initialized
E7DD 1F27             (      storage.asm):00192 (4)     @ctnued tfr     y,v
E7DF 8DD9             (      storage.asm):00193 (6)             bsr     CF1BPRE
E7E1 C620             (      storage.asm):00194 (2)             ldb     #CFRSCTS        Issue a "Read sectors" CF command
E7E3 BDE71C           (      storage.asm):00195 (7)             jsr     CFCMDIS
E7E6 AE64             (      storage.asm):00196 (5+1)           ldx     4,s             Target buffer address to X
E7E8 8DA2             (      storage.asm):00197 (6)             bsr     CF1SRD          Read the even sector from CF device
E7EA BDE6F1           (      storage.asm):00198 (7)             jsr     CFWAIT          Wait for next sector to become available
E7ED 8D9D             (      storage.asm):00199 (6)             bsr     CF1SRD          and read the odd sector
E7EF 1F72             (      storage.asm):00200 (4)             tfr     v,y
E7F1 39               (      storage.asm):00201 (4)             rts
                      (      storage.asm):00202         
                      (      storage.asm):00203         * Write one block to CF device. Upon entry:
                      (      storage.asm):00204         * ,s has the return address
                      (      storage.asm):00205         * 2,s has the target block number
                      (      storage.asm):00206         * 4,s has the buffer base address
                      (      storage.asm):00207         * Upon return, Y will be preserved.
E7F2 0D31             (      storage.asm):00208 (4)     CF1BKWR tst     CFCARDP
E7F4 2602             (      storage.asm):00209 (3)             bne     @ctnued
E7F6 20A7             (      storage.asm):00210 (3)             bra     IOERR           Card not present--CF subsystem not initialized
E7F8 1F27             (      storage.asm):00211 (4)     @ctnued tfr     y,v
E7FA 8DBE             (      storage.asm):00212 (6)             bsr     CF1BPRE
E7FC C630             (      storage.asm):00213 (2)             ldb     #CFWSCTS        Issue a "Write sectors" CF command
E7FE BDE71C           (      storage.asm):00214 (7)             jsr     CFCMDIS
E801 AE64             (      storage.asm):00215 (5+1)           ldx     4,s             Source buffer address to X
E803 8DA0             (      storage.asm):00216 (6)             bsr     CF1SWR          Write the even sector to CF device
E805 BDE6F1           (      storage.asm):00217 (7)             jsr     CFWAIT          Wait for next sector to become available
E808 8D9B             (      storage.asm):00218 (6)             bsr     CF1SWR          and write the odd sector
E80A 1F72             (      storage.asm):00219 (4)             tfr     v,y
E80C 39               (      storage.asm):00220 (4)             rts
                      (      storage.asm):00221         
                      (        forth.asm):01180         
                      (        forth.asm):01181         ******************************************************************************
                      (        forth.asm):01182         * Dictionary begins. In the code below ANSI refers to ANSI-X3.215-1994
                      (        forth.asm):01183         * Draft 6 proposal (i.e. the free spec).
                      (        forth.asm):01184         
E80D 0D               (        forth.asm):01185         EBUFS   fcb     13              79-STANDARD (REQ145)
E80E 454D5054592D4255 (        forth.asm):01186                 fcc     'EMPTY-BUFFERS' ( -- )
     4646455253
E81B 0000             (        forth.asm):01187                 fdb     0               Last dictionary entry
E81D C7               (        forth.asm):01188                 RFCS
E81E 7EE26A           (        forth.asm):01189 (3)             jmp     EMPTYB
                      (        forth.asm):01190         
E821 0C               (        forth.asm):01191         SAVBUF  fcb     12              79-STANDARD (REQ221)
E822 534156452D425546 (        forth.asm):01192                 fcc     'SAVE-BUFFERS'  ( -- )
     46455253
E82E E80D             (        forth.asm):01193                 fdb     EBUFS
E830 C7               (        forth.asm):01194                 RFCS
E831 8E03F0           (        forth.asm):01195 (3)             ldx     #BUF0
E834 8D03             (        forth.asm):01196 (6)             bsr     WBIFDRT
E836 8E0800           (        forth.asm):01197 (3)             ldx     #BUF1
                      (        forth.asm):01198         * Write buffer back to mass storage if marked as dirty.
                      (        forth.asm):01199         * The dirty bit is cleared but the buffer contents itself is not.
                      (        forth.asm):01200         * The buffer will continue to be marked as "in use."
                      (        forth.asm):01201         * On input X has has the base buffer address. Both D and X
                      (        forth.asm):01202         * are preserved. Y is not.
E839 1F02             (        forth.asm):01203 (4)     WBIFDRT tfr     d,y
E83B 3410             (        forth.asm):01204 (4+2)           pshs    x               Base buffer address (arg1 to CF1BKWR)
E83D 8605             (        forth.asm):01205 (2)             lda     #BINUSE|BDIRTY
E83F A4890401         (        forth.asm):01206 (4+3)           anda    BOFLAGS,x
E843 8105             (        forth.asm):01207 (2)             cmpa    #BINUSE|BDIRTY
E845 2616             (        forth.asm):01208 (3)             bne     @alldon         Block not in use or in use but not dirty
E847 AE890402         (        forth.asm):01209 (5+3)           ldx     BOBLKNO,x
E84B 3410             (        forth.asm):01210 (4+2)           pshs    x               Block number (arg0 to CF1BKWR)
E84D 8DA3             (        forth.asm):01211 (6)             bsr     CF1BKWR         Write data buffer to CF
E84F 3262             (        forth.asm):01212 (4+1)           leas    2,s             Drop one cell from the system stack (blknum)
E851 AEE4             (        forth.asm):01213 (5+0)           ldx     ,s              Retrieve base buffer address
E853 A6890401         (        forth.asm):01214 (4+3)           lda     BOFLAGS,x
E857 84FB             (        forth.asm):01215 (2)             anda    #^BDIRTY        Clear the dirty bit
E859 A7890401         (        forth.asm):01216 (4+3)           sta     BOFLAGS,x       and update the 'flags' field
E85D 3510             (        forth.asm):01217 (4+2)   @alldon puls    x               Restore X
E85F 1F20             (        forth.asm):01218 (4)             tfr     y,d             and D
E861 39               (        forth.asm):01219 (4)             rts
                      (        forth.asm):01220         
E862 05               (        forth.asm):01221         FLUSH   fcb     5               79-STANDARD (REF)
E863 464C555348       (        forth.asm):01222                 fcc     'FLUSH'         ( -- ) An alias for SAVE-BUFFERS
E868 E821             (        forth.asm):01223                 fdb     SAVBUF
E86A C7               (        forth.asm):01224                 RFCS
E86B 20C4             (        forth.asm):01225                 RFXT    bra,SAVBUF+15   XT for SAVE-BUFFERS
                      (        forth.asm):01226         
E86D 06               (        forth.asm):01227         UPDATE  fcb     6               79-STANDARD (REQ229)
E86E 555044415445     (        forth.asm):01228                 fcc     'UPDATE'        ( -- )
E874 E862             (        forth.asm):01229                 fdb     FLUSH
E876 C7               (        forth.asm):01230                 RFCS
E877 9E16             (        forth.asm):01231 (4)             ldx     MRUBUFA         Most recently used buffer base address
E879 A6890401         (        forth.asm):01232 (4+3)           lda     BOFLAGS,x       Buffer 'flags' field to A
E87D 8501             (        forth.asm):01233 (2)             bita    #BINUSE         Is that buffer in use?
E87F 2706             (        forth.asm):01234 (3)             beq     @upddon         No, we're done here
E881 8A04             (        forth.asm):01235 (2)             ora     #BDIRTY
E883 A7890401         (        forth.asm):01236 (4+3)           sta     BOFLAGS,x       Set the dirty bit
E887 39               (        forth.asm):01237 (4)     @upddon rts
                      (        forth.asm):01238         
E888 06               (        forth.asm):01239         BUFFER  fcb     6               79-STANDARD (REQ130)
E889 425546464552     (        forth.asm):01240                 fcc     'BUFFER'        ( ublkno -- addr )
E88F E86D             (        forth.asm):01241                 fdb     UPDATE
E891 C7               (        forth.asm):01242                 RFCS
E892 BDE671           (        forth.asm):01243 (7)             jsr     NPOP
E895 1F12             (        forth.asm):01244 (4)             tfr     x,y             ublkno to Y
                      (        forth.asm):01245         * Block lookup.
E897 8E03F0           (        forth.asm):01246 (3)             ldx     #BUF0           Base address of the first resident buffer
E89A C602             (        forth.asm):01247 (2)             ldb     #2              Number of resident buffers
E89C A6890401         (        forth.asm):01248 (4+3)   @blkup  lda     BOFLAGS,x       Buffer flags to A
E8A0 8501             (        forth.asm):01249 (2)             bita    #BINUSE         Buffer in use?
E8A2 270A             (        forth.asm):01250 (3)             beq     @nxtbuf         No
E8A4 10AC890402       (        forth.asm):01251 (6+3)           cmpy    BOBLKNO,x       Buffer is in use. Block number match?
E8A9 2603             (        forth.asm):01252 (3)             bne     @nxtbuf         No
E8AB 3610             (        forth.asm):01253         @retba  UCNPUSH                 Block number match. Return the base address
E8AD 39               (        forth.asm):01254 (4)             rts
E8AE 30890410         (        forth.asm):01255 (4+3)   @nxtbuf leax    BFDISP,x        Point to the next buffer
E8B2 5A               (        forth.asm):01256 (1)             decb
E8B3 26E7             (        forth.asm):01257 (3)             bne     @blkup
                      (        forth.asm):01258         * The block number in Y is not currently in use. Assign a buffer to it.
E8B5 8E03F0           (        forth.asm):01259 (3)             ldx     #BUF0
E8B8 9C16             (        forth.asm):01260 (4)             cmpx    MRUBUFA         Most recently used buffer address
E8BA 2603             (        forth.asm):01261 (3)             bne     @bselct
E8BC 8E0800           (        forth.asm):01262 (3)             ldx     #BUF1
E8BF 9F16             (        forth.asm):01263 (4)     @bselct stx     MRUBUFA
E8C1 3420             (        forth.asm):01264 (4+2)           pshs    y               Backup the target block number
E8C3 BDE839           (        forth.asm):01265 (7)             jsr     WBIFDRT         Write back if dirty. X and D are preserved
E8C6 8601             (        forth.asm):01266 (2)             lda     #BINUSE
E8C8 A7890401         (        forth.asm):01267 (4+3)           sta     BOFLAGS,x       Update the buffers 'flags' field
E8CC 3520             (        forth.asm):01268 (4+2)           puls    y               Restore the target block number
E8CE 10AF890402       (        forth.asm):01269 (6+3)           sty     BOBLKNO,x       and update the 'blknum' field as well
E8D3 20D6             (        forth.asm):01270 (3)             bra     @retba
                      (        forth.asm):01271         
E8D5 05               (        forth.asm):01272         BLOCK   fcb     5               79-STANDARD (REQ191)
E8D6 424C4F434B       (        forth.asm):01273                 fcc     'BLOCK'         ( ublkno -- addr )
E8DB E888             (        forth.asm):01274                 fdb     BUFFER
E8DD C7               (        forth.asm):01275                 RFCS
E8DE 8DB2             (        forth.asm):01276                 RFXT    bsr,BUFFER+9    XT for BUFFER
                      (        forth.asm):01277         * Upon return Y has has the block number.
E8E0 BDE671           (        forth.asm):01278 (7)             jsr     NPOP            Buffer base address to X
E8E3 3410             (        forth.asm):01279 (4+2)           pshs    x               Push base buffer address as Arg1 to CF1BKRD
E8E5 A6890401         (        forth.asm):01280 (4+3)           lda     BOFLAGS,x       Retrieve buffer 'flags' field
                      (        forth.asm):01281                 IFNE    DEBUG
                      (        forth.asm):01282                 bita    #BINUSE
                      (        forth.asm):01283                 bne     @blkctd
                      (        forth.asm):01284                 lda     #10             Assertion failed
                      (        forth.asm):01285                 jsr     ERRHDLR         No return
                      (        forth.asm):01286                 ENDC
E8E9 8402             (        forth.asm):01287 (2)     @blkctd anda    #BMAPPD         Has the block been read yet?
E8EB 2613             (        forth.asm):01288 (3)             bne     @bkmapd         yes
E8ED 3420             (        forth.asm):01289 (4+2)           pshs    y               no. Push block number as arg0 to CF1BKRD
                      (        forth.asm):01290         * Map in the block from the CF device. System stack structure is as follows:
                      (        forth.asm):01291         * ,s has the target block number.
                      (        forth.asm):01292         * 2,s has the buffer base address.
E8EF BDE7D7           (        forth.asm):01293 (7)             jsr     CF1BKRD
E8F2 3262             (        forth.asm):01294 (4+1)           leas    2,s             Drop one cell from the system stack
                      (        forth.asm):01295         * Update the buffer flags field.
E8F4 AEE4             (        forth.asm):01296 (5+0)           ldx     ,s              Base buffer address
E8F6 A6890401         (        forth.asm):01297 (4+3)           lda     BOFLAGS,x       Buffer 'flags' field to A
E8FA 8A02             (        forth.asm):01298 (2)             ora     #BMAPPD
E8FC A7890401         (        forth.asm):01299 (4+3)           sta     BOFLAGS,x       Update buffer 'flags' field
E900 3510             (        forth.asm):01300 (4+2)   @bkmapd puls    x               Buffer base address to X
E902 3610             (        forth.asm):01301                 UCNPUSH
E904 39               (        forth.asm):01302 (4)             rts
                      (        forth.asm):01303         
E905 03               (        forth.asm):01304         BLK     fcb     3
E906 424C4B           (        forth.asm):01305                 fcc     'BLK'
E909 E8D5             (        forth.asm):01306                 fdb     BLOCK
E90B C7               (        forth.asm):01307                 RFCS
E90C 8E011E           (        forth.asm):01308 (3)             ldx     #UBLK
E90F 7EE663           (        forth.asm):01309 (3)             jmp     NPUSH
                      (        forth.asm):01310         
E912 03               (        forth.asm):01311         TOIN    fcb     3
E913 3E494E           (        forth.asm):01312                 fcc     '>IN'
E916 E905             (        forth.asm):01313                 fdb     BLK
E918 C7               (        forth.asm):01314                 RFCS
E919 8E011C           (        forth.asm):01315 (3)             ldx     #UTOIN
E91C 7EE663           (        forth.asm):01316 (3)             jmp     NPUSH
                      (        forth.asm):01317         
E91F 03               (        forth.asm):01318         SCR     fcb     3
E920 534352           (        forth.asm):01319                 fcc     'SCR'
E923 E912             (        forth.asm):01320                 fdb     TOIN
E925 C7               (        forth.asm):01321                 RFCS
E926 8E0120           (        forth.asm):01322 (3)             ldx     #USCR
E929 7EE663           (        forth.asm):01323 (3)             jmp     NPUSH
                      (        forth.asm):01324         
                      (        forth.asm):01325         * Functionally: : LINE 6 SHIFT SCR @ BLOCK + ;
E92C 04               (        forth.asm):01326         LINE    fcb     4               79-STANDARD (REF)
E92D 4C494E45         (        forth.asm):01327                 fcc     'LINE'
E931 E91F             (        forth.asm):01328                 fdb     SCR
E933 C7               (        forth.asm):01329                 RFCS
E934 8E0006           (        forth.asm):01330 (3)             ldx     #6
E937 BDE663           (        forth.asm):01331 (7)             jsr     NPUSH
E93A BDF7D9           (        forth.asm):01332                 RFXT    jsr,SHIFT+8     XT for SHIFT
E93D 9E20             (        forth.asm):01333 (4)             ldx     USCR
E93F BDE663           (        forth.asm):01334 (7)             jsr     NPUSH
E942 8D9A             (        forth.asm):01335                 RFXT    bsr,BLOCK+8     XT for BLOCK
E944 7EF73F           (        forth.asm):01336                 RFXT    jmp,PLUS+4      XT for +
                      (        forth.asm):01337         
                      (        forth.asm):01338         * Functionally:
                      (        forth.asm):01339         * : INDEX 1+ SWAP DO
                      (        forth.asm):01340         *     CR   I SCR !
                      (        forth.asm):01341         *     0 LINE 64 TYPE
                      (        forth.asm):01342         *   LOOP ;
E947 05               (        forth.asm):01343         INDEX   fcb     5               79-STANDARD (REF)
E948 494E444558       (        forth.asm):01344                 fcc     'INDEX'         ( n1 n2 -- )
E94D E92C             (        forth.asm):01345                 fdb     LINE
E94F C7               (        forth.asm):01346                 RFCS
E950 BDE671           (        forth.asm):01347 (7)             jsr     NPOP            N2 to X
E953 3001             (        forth.asm):01348 (4+1)           leax    1,x             1+
E955 1F12             (        forth.asm):01349 (4)             tfr     x,y             Y has the limit (not reached)
E957 BDE671           (        forth.asm):01350 (7)             jsr     NPOP            X has the index (N1)
E95A BDE1E5           (        forth.asm):01351 (7)     @indlop jsr     PUTCR           CR
E95D 9F20             (        forth.asm):01352 (4)             stx     USCR            I SCR !
E95F 3430             (        forth.asm):01353 (4+4)           pshs    y,x
E961 1FC1             (        forth.asm):01354 (4)             tfr     0,x
E963 BDE663           (        forth.asm):01355 (7)             jsr     NPUSH
E966 8DCC             (        forth.asm):01356                 RFXT    bsr,LINE+7      XT for LINE
E968 8E0040           (        forth.asm):01357 (3)             ldx     #64
E96B BDE663           (        forth.asm):01358 (7)             jsr     NPUSH
E96E BDF5AA           (        forth.asm):01359                 RFXT    jsr,TYPE+7      XT for TYPE
E971 3530             (        forth.asm):01360 (4+4)           puls    x,y             Restore loop parameters
E973 3001             (        forth.asm):01361 (4+1)           leax    1,x
E975 103712           (        forth.asm):01362 (4)             cmpr    x,y
E978 26E0             (        forth.asm):01363 (3)             bne     @indlop
E97A 39               (        forth.asm):01364 (4)             rts
                      (        forth.asm):01365         
E97B 04               (        forth.asm):01366         LIST    fcb     4               79-STANDARD (REQ109)
E97C 4C495354         (        forth.asm):01367                 fcc     'LIST'          ( ublkno -- )
E980 E947             (        forth.asm):01368                 fdb     INDEX
E982 C7               (        forth.asm):01369                 RFCS
E983 0D31             (        forth.asm):01370 (4)             tst     CFCARDP
E985 2605             (        forth.asm):01371 (3)             bne     @lstpro
E987 C611             (        forth.asm):01372 (2)             ldb     #17             IO error
E989 BDE5EC           (        forth.asm):01373 (7)             jsr     ERRHDLR         No return
E98C BDFB91           (        forth.asm):01374         @lstpro RFXT    jsr,DUP+6       XT for DUP
E98F BDE8DE           (        forth.asm):01375                 RFXT    jsr,BLOCK+8     XT for BLOCK
                      (        forth.asm):01376         * TOS now has the base buffer address.
E992 BDE671           (        forth.asm):01377 (7)             jsr     NPOP
E995 1F12             (        forth.asm):01378 (4)             tfr     x,y             Base buffer address to Y
E997 BDE671           (        forth.asm):01379 (7)             jsr     NPOP            ublkno to X
E99A 9F20             (        forth.asm):01380 (4)             stx     USCR            Update SCR's value
E99C C610             (        forth.asm):01381 (2)             ldb     #16             16 lines to go
E99E 3404             (        forth.asm):01382 (4+1)   @lstlop pshs    b
E9A0 BDE1E5           (        forth.asm):01383 (7)             jsr     PUTCR
E9A3 1F21             (        forth.asm):01384 (4)             tfr     y,x
E9A5 BDE663           (        forth.asm):01385 (7)             jsr     NPUSH           Start address for TYPE
E9A8 8E0040           (        forth.asm):01386 (3)             ldx     #64
E9AB BDE663           (        forth.asm):01387 (7)             jsr     NPUSH           Byte count for TYPE
E9AE 103012           (        forth.asm):01388 (4)             addr    x,y
E9B1 BDF5AA           (        forth.asm):01389                 RFXT    jsr,TYPE+7      XT for TYPE
E9B4 3504             (        forth.asm):01390 (4+1)           puls    b
E9B6 5A               (        forth.asm):01391 (1)             decb
E9B7 26E5             (        forth.asm):01392 (3)             bne     @lstlop
E9B9 39               (        forth.asm):01393 (4)             rts
                      (        forth.asm):01394         
E9BA 04               (        forth.asm):01395         NCLR    fcb     4               Non-standard
E9BB 4E434C52         (        forth.asm):01396                 fcc     'NCLR'          Clear the data (normal) stack
E9BF E97B             (        forth.asm):01397                 fdb     LIST
E9C1 C7               (        forth.asm):01398                 RFCS
E9C2 CE0246           (        forth.asm):01399 (3)             ldu     #NSTBOT
E9C5 39               (        forth.asm):01400 (4)             rts
                      (        forth.asm):01401         
E9C6 04               (        forth.asm):01402         RCLR    fcb     4               Non-standard
E9C7 52434C52         (        forth.asm):01403                 fcc     'RCLR'          Clear the return stack
E9CB E9BA             (        forth.asm):01404                 fdb     NCLR
E9CD C7               (        forth.asm):01405                 RFCS
E9CE 8E02C6           (        forth.asm):01406 (3)             ldx     #RSTBOT
E9D1 9F00             (        forth.asm):01407 (4)             stx     RSP
E9D3 0F25             (        forth.asm):01408 (5)             clr     RDEPTH
E9D5 39               (        forth.asm):01409 (4)             rts
                      (        forth.asm):01410         
E9D6 05               (        forth.asm):01411         DEPTH   fcb     5               79-STANDARD (REQ238)
E9D7 4445505448       (        forth.asm):01412                 fcc     'DEPTH'
E9DC E9C6             (        forth.asm):01413                 fdb     RCLR
E9DE C7               (        forth.asm):01414                 RFCS
E9DF CC0246           (        forth.asm):01415 (3)             ldd     #NSTBOT         Bottom data stack address
E9E2 103230           (        forth.asm):01416 (4)             subr    u,d             D has the current value of the data stack ptr
E9E5 1044             (        forth.asm):01417 (2)             lsrd                    divided by 2
E9E7 1F01             (        forth.asm):01418 (4)             tfr     d,x
E9E9 7EE663           (        forth.asm):01419 (3)             jmp     NPUSH
                      (        forth.asm):01420         
E9EC 06               (        forth.asm):01421         CREATE  fcb     6               79-STANDARD (REQ239)
E9ED 435245415445     (        forth.asm):01422                 fcc     'CREATE'
E9F3 E9D6             (        forth.asm):01423                 fdb     DEPTH
E9F5 C7               (        forth.asm):01424                 RFCS
E9F6 BDE3B5           (        forth.asm):01425 (7)     CREAT0  jsr     LOCWRT          Code entry point returned to Y
E9F9 868E             (        forth.asm):01426 (2)             lda     #LDXOPC         LDX immediate
E9FB A7A0             (        forth.asm):01427 (4+1)           sta     ,y+
E9FD 1F21             (        forth.asm):01428 (4)             tfr     y,x
E9FF 3008             (        forth.asm):01429 (4+1)           leax    8,x
EA01 AFA1             (        forth.asm):01430 (5+2)           stx     ,y++
EA03 86BD             (        forth.asm):01431 (2)             lda     #JSROPC         JSR extended
EA05 BDE42B           (        forth.asm):01432 (7)             jsr     VARCON1         Compile JSR NPUSH
EA08 8639             (        forth.asm):01433 (2)             lda     #RTSOPC         RTS inherent
EA0A A7A0             (        forth.asm):01434 (4+1)           sta     ,y+
EA0C 3122             (        forth.asm):01435 (4+1)           leay    2,y             Reserve room for a possible DOES> clause
EA0E 109F08           (        forth.asm):01436 (5)     CREAT1  sty     DICEND
EA11 9E0C             (        forth.asm):01437 (4)             ldx     BDICEND         This is set by LOCWRT (was IY)
EA13 9F06             (        forth.asm):01438 (4)             stx     LSTWAD
EA15 39               (        forth.asm):01439 (4)             rts
                      (        forth.asm):01440         
EA16 C5               (        forth.asm):01441         DOES    fcb     $C5             79-STANDARD (REQ168)
EA17 444F45533E       (        forth.asm):01442                 fcc     'DOES>'
EA1C E9EC             (        forth.asm):01443                 fdb     CREATE
EA1E C7               (        forth.asm):01444                 RFCS
EA1F 8EEA25           (        forth.asm):01445 (3)             ldx     #DOESEX         JSR #DOESEX is compiled (no actual return)
EA22 AF62             (        forth.asm):01446 (5+1)           stx     2,s             Set as action component
EA24 39               (        forth.asm):01447 (4)             rts
                      (        forth.asm):01448         
EA25 9E06             (        forth.asm):01449 (4)     DOESEX  ldx     LSTWAD          Header of the last dictionary entry
EA27 E680             (        forth.asm):01450 (4+1)           ldb     ,x+
EA29 C41F             (        forth.asm):01451 (2)             andb    #WRLNMSK        Extract word length
EA2B 3A               (        forth.asm):01452 (1)             abx
                      (        forth.asm):01453                 IFNE    RELFEAT
EA2C 3009             (        forth.asm):01454 (4+1)           leax    9,x             2 bytes/backlink, 1/cksum, 6 bytes code offset
                      (        forth.asm):01455                 ELSE
                      (        forth.asm):01456                 leax    8,x             2 bytes/backlink, 6 bytes code offset
                      (        forth.asm):01457                 ENDC
EA2E A684             (        forth.asm):01458 (4+0)           lda     ,x
EA30 8139             (        forth.asm):01459 (2)             cmpa    #RTSOPC         RTS inherent
EA32 2705             (        forth.asm):01460 (3)             beq     @dosex1
EA34 C60E             (        forth.asm):01461 (2)             ldb     #14             No matching CREATE
EA36 BDE5EC           (        forth.asm):01462 (7)             jsr     ERRHDLR         No return
EA39 867E             (        forth.asm):01463 (2)     @dosex1 lda     #JMPOPC         JMP extended
EA3B A780             (        forth.asm):01464 (4+1)           sta     ,x+             Overwrite RTS opcode
EA3D 3520             (        forth.asm):01465 (4+2)           puls    y
EA3F 10AF84           (        forth.asm):01466 (6+0)           sty     ,x
EA42 39               (        forth.asm):01467 (4)             rts
                      (        forth.asm):01468         
EA43 87               (        forth.asm):01469         LITERAL fcb     $87             79-STANDARD (REQ215)
EA44 4C49544552414C   (        forth.asm):01470                 fcc     'LITERAL'
EA4B EA16             (        forth.asm):01471                 fdb     DOES
EA4D C7               (        forth.asm):01472                 RFCS
EA4E BDE671           (        forth.asm):01473 (7)             jsr     NPOP
EA51 961B             (        forth.asm):01474 (3)             lda     USTATE+1
EA53 2710             (        forth.asm):01475 (3)             beq     @nojoy          The standard defines no semantics in interp mode
EA55 109E08           (        forth.asm):01476 (5)     @comp   ldy     DICEND
EA58 868E             (        forth.asm):01477 (2)             lda     #LDXOPC         LDX immediate
EA5A BDE42E           (        forth.asm):01478 (7)             jsr     VARCON2         Compile LDX #X
EA5D 109F08           (        forth.asm):01479 (5)             sty     DICEND          Update HERE
EA60 8EE663           (        forth.asm):01480 (3)             ldx     #NPUSH
EA63 AF62             (        forth.asm):01481 (5+1)           stx     2,s             Set NPUSH as action component
EA65 39               (        forth.asm):01482 (4)     @nojoy  rts
                      (        forth.asm):01483         
                      (        forth.asm):01484         * Functionally: : CONSTANT CREATE , DOES> @ ;
                      (        forth.asm):01485         * The following code produces more compact code.
EA66 08               (        forth.asm):01486         CONS    fcb     8               79-STANDARD (REQ185)
EA67 434F4E5354414E54 (        forth.asm):01487                 fcc     'CONSTANT'
EA6F EA43             (        forth.asm):01488                 fdb     LITERAL
EA71 C7               (        forth.asm):01489                 RFCS
EA72 BDE671           (        forth.asm):01490 (7)             jsr     NPOP
EA75 1F16             (        forth.asm):01491 (4)             tfr     x,w
EA77 BDE3B5           (        forth.asm):01492 (7)             jsr     LOCWRT          Create dictionary entry
EA7A 1F61             (        forth.asm):01493 (4)             tfr     w,x
EA7C 868E             (        forth.asm):01494 (2)             lda     #LDXOPC         ldx immediate
EA7E BDE42E           (        forth.asm):01495 (7)             jsr     VARCON2         Compile LDX #CSTVAL
EA81 BDE429           (        forth.asm):01496 (7)             jsr     VARCON          Compile JMP NPUSH
                      (        forth.asm):01497                 IFNE    RELFEAT
EA84 8D88             (        forth.asm):01498 (6)             bsr     CREAT1
EA86 2059             (        forth.asm):01499                 RFXT    bra,MONITOR+10  XT for MONITOR
                      (        forth.asm):01500                 ELSE
                      (        forth.asm):01501                 bra     CREAT1
                      (        forth.asm):01502                 ENDC
                      (        forth.asm):01503         
                      (        forth.asm):01504         * Functionally: : VARIABLE CREATE 2 ALLOT ;
                      (        forth.asm):01505         * However we can save three bytes per instance with the following code.
EA88 08               (        forth.asm):01506         VARI    fcb     8               79-STANDARD (REQ227)
EA89 5641524941424C45 (        forth.asm):01507                 fcc     'VARIABLE'
EA91 EA66             (        forth.asm):01508                 fdb     CONS
EA93 C7               (        forth.asm):01509                 RFCS
EA94 BDE3B5           (        forth.asm):01510 (7)             jsr     LOCWRT
EA97 868E             (        forth.asm):01511 (2)             lda     #LDXOPC         ldx immediate
EA99 A7A0             (        forth.asm):01512 (4+1)           sta     ,y+
EA9B 1F26             (        forth.asm):01513 (4)             tfr     y,w             Preserve Y (HERE)
EA9D 3125             (        forth.asm):01514 (4+1)           leay    5,y             Relative variable address
EA9F 1F21             (        forth.asm):01515 (4)             tfr     y,x
EAA1 1F62             (        forth.asm):01516 (4)             tfr     w,y             Restore Y (HERE)
EAA3 AFA1             (        forth.asm):01517 (5+2)           stx     ,y++            Address field for LDX #VARADDR
EAA5 BDE429           (        forth.asm):01518 (7)             jsr     VARCON          Compile JMP NPUSH
EAA8 3122             (        forth.asm):01519 (4+1)           leay    2,y             2 ALLOT
EAAA 7EEA0E           (        forth.asm):01520 (3)             jmp     CREAT1
                      (        forth.asm):01521         
EAAD 09               (        forth.asm):01522         IMMED   fcb     9               79-STANDARD (REQ103)
EAAE 494D4D4544494154 (        forth.asm):01523                 fcc     'IMMEDIATE'
     45
EAB7 EA88             (        forth.asm):01524                 fdb     VARI
EAB9 C7               (        forth.asm):01525                 RFCS
EABA C680             (        forth.asm):01526 (2)             ldb     #IMDFLM
EABC 9E06             (        forth.asm):01527 (4)     IMMED1  ldx     LSTWAD
EABE A684             (        forth.asm):01528 (4+0)           lda     ,x
EAC0 103598           (        forth.asm):01529 (4)             orr     b,a
EAC3 A784             (        forth.asm):01530 (4+0)           sta     ,x
EAC5 39               (        forth.asm):01531 (4)             rts
                      (        forth.asm):01532         
EAC6 08               (        forth.asm):01533         RSTRCT  fcb     8               Non-standard (GNU Forth)
EAC7 5245535452494354 (        forth.asm):01534                 fcc     'RESTRICT'      Make word available in compilation mode only
EACF EAAD             (        forth.asm):01535                 fdb     IMMED
EAD1 C7               (        forth.asm):01536                 RFCS
EAD2 C640             (        forth.asm):01537 (2)             ldb     #DEFFLM
EAD4 20E6             (        forth.asm):01538 (3)             bra     IMMED1
                      (        forth.asm):01539         
                      (        forth.asm):01540                 IFNE    RELFEAT
                      (        forth.asm):01541         * This non-standard word enables checkum monitoring by ICHECK for the
                      (        forth.asm):01542         * last defined word in the dictionary. : words are monitored by default
                      (        forth.asm):01543         * and so are constants. CREATEd words require an explicit invokation of
                      (        forth.asm):01544         * MONITOR if they are to be checked for integrity.
EAD6 07               (        forth.asm):01545         MONITOR fcb     7
EAD7 4D4F4E49544F52   (        forth.asm):01546                 fcc     'MONITOR'       ( -- )
EADE EAC6             (        forth.asm):01547                 fdb     RSTRCT
EAE0 C7               (        forth.asm):01548                 RFCS
EAE1 9E06             (        forth.asm):01549 (4)             ldx     LSTWAD          Last word header address
EAE3 A684             (        forth.asm):01550 (4+0)           lda     ,x
EAE5 8A20             (        forth.asm):01551 (2)             ora     #MONFLM         Set the monitored flag in the attribute field
EAE7 A784             (        forth.asm):01552 (4+0)           sta     ,x
EAE9 8D08             (        forth.asm):01553 (6)             bsr     HDRSKIP         Skip the header (XT to X), clear A
EAEB 109E08           (        forth.asm):01554 (5)             ldy     DICEND          The upper code section limit (excluded)
EAEE 8D0D             (        forth.asm):01555 (6)             bsr     HDRCSUM         Current word's definition's checksum to A
EAF0 A71F             (        forth.asm):01556 (4+1)           sta     -1,x            Store the computed checksum into the header
EAF2 39               (        forth.asm):01557 (4)             rts
                      (        forth.asm):01558         
                      (        forth.asm):01559         * On entry, X has a word's header address. On return X has the compilation
                      (        forth.asm):01560         * address for that word (XT). A is cleared so as to initialize the checksum.
EAF3 A684             (        forth.asm):01561 (4+0)   HDRSKIP lda     ,x              Word's header attribute byte to A
EAF5 841F             (        forth.asm):01562 (2)             anda    #WRLNMSK        Extract the word's length
EAF7 8B04             (        forth.asm):01563 (2)             adda    #4              1B attribute, 2B backlink, 1B checksum
EAF9 3086             (        forth.asm):01564 (4+1)           leax    a,x             X has the word's XT. -1,X has the orig checksum
EAFB 4F               (        forth.asm):01565 (1)             clra
EAFC 39               (        forth.asm):01566 (4)             rts
                      (        forth.asm):01567         
                      (        forth.asm):01568         * On entry X has a word's compilation address (XT). A is supposed to have been
                      (        forth.asm):01569         * previously cleared. Y has the upper bound of the code section's address
                      (        forth.asm):01570         * (excluded). On return, A will have the word's code section's checksum.
                      (        forth.asm):01571         * X is preserved.
EAFD 3410             (        forth.asm):01572 (4+2)   HDRCSUM pshs    x
EAFF A880             (        forth.asm):01573 (4+1)   @hdrcs1 eora    ,x+             Update the checksum
EB01 103712           (        forth.asm):01574 (4)             cmpr    x,y             Upper bound reached?
EB04 26F9             (        forth.asm):01575 (3)             bne     @hdrcs1         No. Process next byte in word's code section
EB06 3510             (        forth.asm):01576 (4+2)           puls    x
EB08 39               (        forth.asm):01577 (4)             rts
                      (        forth.asm):01578         
                      (        forth.asm):01579         * This non-standard word walks through the dictionary linked list and checks
                      (        forth.asm):01580         * that the words that have the MONFLM flag set in their header's attribute
                      (        forth.asm):01581         * field have a definition that still matches the checksum stored in the word's
                      (        forth.asm):01582         * header. This is meant to be used interactively, as a debugging tool, since
                      (        forth.asm):01583         * multitasking is not supported by this implementation. Therefore no status
                      (        forth.asm):01584         * value is returned. Feedback will only be provided for corrupted words, in
                      (        forth.asm):01585         * the form of a diagnostic message printed to the console.
EB09 06               (        forth.asm):01586         ICHECK  fcb     6
EB0A 49434845434B     (        forth.asm):01587                 fcc     'ICHECK'        ( -- )
EB10 EAD6             (        forth.asm):01588                 fdb     MONITOR
EB12 C7               (        forth.asm):01589                 RFCS
EB13 109E08           (        forth.asm):01590 (5)             ldy     DICEND          Upper bound for the code of the last word (exc.)
EB16 9E06             (        forth.asm):01591 (4)             ldx     LSTWAD          LAST points to the header of the last word
EB18 3410             (        forth.asm):01592 (4+2)   @icklop pshs    x               Current word's header address
EB1A A684             (        forth.asm):01593 (4+0)           lda     ,x              Word's header attribute byte to A
EB1C 8520             (        forth.asm):01594 (2)             bita    #MONFLM         Is this a monitored word?
EB1E 2726             (        forth.asm):01595 (3)             beq     @icknxt         No. Point to the next word
EB20 8DD1             (        forth.asm):01596 (6)             bsr     HDRSKIP         Skip the header (XT to X), clear A
EB22 8DD9             (        forth.asm):01597 (6)             bsr     HDRCSUM         Current word's definition's checksum to A
EB24 A11F             (        forth.asm):01598 (4+1)           cmpa    -1,x            Does the checksum match the compile time value?
EB26 271E             (        forth.asm):01599 (3)             beq     @icknxt         Yes. Point to the next word
                      (        forth.asm):01600         * Current word's definition has been modified since its original definition!
EB28 BDE1E5           (        forth.asm):01601 (7)             jsr     PUTCR
EB2B AEE4             (        forth.asm):01602 (5+0)           ldx     ,s              Current word's header address
EB2D E680             (        forth.asm):01603 (4+1)           ldb     ,x+
EB2F C41F             (        forth.asm):01604 (2)             andb    #WRLNMSK
EB31 4F               (        forth.asm):01605 (1)             clra
EB32 BDE663           (        forth.asm):01606 (7)             jsr     NPUSH           Word's name base address
EB35 1F01             (        forth.asm):01607 (4)             tfr     d,x
EB37 BDE663           (        forth.asm):01608 (7)             jsr     NPUSH           Byte count for TYPE
EB3A BDF5AA           (        forth.asm):01609                 RFXT    jsr,TYPE+7      XT for TYPE
EB3D BDF561           (        forth.asm):01610                 RFXT    jsr,SPACE+8     XT for SPACE
EB40 8EEB53           (        forth.asm):01611 (3)             ldx     #CSUMFLM
EB43 BDE1D8           (        forth.asm):01612 (7)             jsr     PUTS            Feedback for checksum failure
EB46 3510             (        forth.asm):01613 (4+2)   @icknxt puls    x               Current word's header address
EB48 1F12             (        forth.asm):01614 (4)             tfr     x,y             Point to the end of the previous word's code
EB4A 8DA7             (        forth.asm):01615 (6)             bsr     HDRSKIP         Skip the header (XT to X), clear A
EB4C AE1D             (        forth.asm):01616 (5+1)           ldx     -3,x            Point to the previous header via the backlink
EB4E 2702             (        forth.asm):01617 (3)             beq     @ickdon         We've just reached the end of the dictionary
EB50 20C6             (        forth.asm):01618 (3)             bra     @icklop
EB52 39               (        forth.asm):01619 (4)     @ickdon rts
                      (        forth.asm):01620         
EB53 696E746567726974 (        forth.asm):01621         CSUMFLM fcn     'integrity check failed'
     7920636865636B20
     6661696C656400
                      (        forth.asm):01622                 ENDC                    RELFEAT enabled
                      (        forth.asm):01623         
EB6A C2               (        forth.asm):01624         DO      fcb     $C2             79-STANDARD (REQ142)
EB6B 444F             (        forth.asm):01625                 fcc     'DO'
                      (        forth.asm):01626                 IFNE    RELFEAT
EB6D EB09             (        forth.asm):01627                 fdb     ICHECK
                      (        forth.asm):01628                 ELSE
                      (        forth.asm):01629                 fdb     RSTRCT
                      (        forth.asm):01630                 ENDC
EB6F C7               (        forth.asm):01631                 RFCS
EB70 9E08             (        forth.asm):01632 (4)             ldx     DICEND
EB72 3003             (        forth.asm):01633 (4+1)           leax    3,x
EB74 BDE680           (        forth.asm):01634 (7)             jsr     RPUSH
EB77 8EEB7D           (        forth.asm):01635 (3)             ldx     #DOEX
EB7A AF62             (        forth.asm):01636 (5+1)           stx     2,s             Set as action component
EB7C 39               (        forth.asm):01637 (4)             rts
                      (        forth.asm):01638         
EB7D BDFBAF           (        forth.asm):01639         DOEX    RFXT    jsr,SWAP+7      XT for SWAP
EB80 BDEEEE           (        forth.asm):01640                 RFXT    jsr,TOR+5       XT for >R
EB83 7EEEEE           (        forth.asm):01641                 RFXT    jmp,TOR+5       XT for >R
                      (        forth.asm):01642         
EB86 C4               (        forth.asm):01643         LOOP    fcb     $C4             79-STANDARD (REQ124)
EB87 4C4F4F50         (        forth.asm):01644                 fcc     'LOOP'
EB8B EB6A             (        forth.asm):01645                 fdb     DO
EB8D C7               (        forth.asm):01646                 RFCS
EB8E 8EEBAD           (        forth.asm):01647 (3)             ldx     #LOOPEX
EB91 109E08           (        forth.asm):01648 (5)     LOOP1   ldy     DICEND
EB94 86BD             (        forth.asm):01649 (2)             lda     #JSROPC         JSR extended
EB96 BDE145           (        forth.asm):01650 (7)             jsr     CHKRTS          Check if the final RTS can be omitted
EB99 BDE42E           (        forth.asm):01651 (7)             jsr     VARCON2
EB9C 8E2503           (        forth.asm):01652 (3)             ldx     #BCSOPC         Compile "BCS *+5"
EB9F AFA1             (        forth.asm):01653 (5+2)           stx     ,y++
EBA1 BDE69E           (        forth.asm):01654 (7)             jsr     RPOP
EBA4 867E             (        forth.asm):01655 (2)             lda     #JMPOPC
EBA6 BDE42E           (        forth.asm):01656 (7)             jsr     VARCON2         Compile "JMP R@"
EBA9 109F08           (        forth.asm):01657 (5)             sty     DICEND          No action component
EBAC 39               (        forth.asm):01658 (4)             rts
                      (        forth.asm):01659         
EBAD 8E0001           (        forth.asm):01660 (3)     LOOPEX  ldx     #1
EBB0 2011             (        forth.asm):01661 (3)             bra     PLOPEX1
                      (        forth.asm):01662         
EBB2 C5               (        forth.asm):01663         PLOOP   fcb     $C5             79-STANDARD (REQ141)
EBB3 2B4C4F4F50       (        forth.asm):01664                 fcc     '+LOOP'         The sign hdl reqs for REQ124 should apply though
EBB8 EB86             (        forth.asm):01665                 fdb     LOOP
EBBA C7               (        forth.asm):01666                 RFCS
EBBB 8EEBC0           (        forth.asm):01667 (3)             ldx     #PLOOPEX
EBBE 20D1             (        forth.asm):01668 (3)             bra     LOOP1
                      (        forth.asm):01669         
EBC0 BDE671           (        forth.asm):01670 (7)     PLOOPEX jsr     NPOP
EBC3 1F16             (        forth.asm):01671 (4)     PLOPEX1 tfr     x,w             Increment to W
EBC5 BDE69E           (        forth.asm):01672 (7)             jsr     RPOP
EBC8 1F12             (        forth.asm):01673 (4)             tfr     x,y             Index to Y
EBCA BDE69E           (        forth.asm):01674 (7)             jsr     RPOP            Limit to X
EBCD 103062           (        forth.asm):01675 (4)             addr    w,y             Update index
EBD0 114D             (        forth.asm):01676 (2)             tste
EBD2 2B10             (        forth.asm):01677 (3)             bmi     @neginc
EBD4 103721           (        forth.asm):01678 (4)             cmpr    y,x
EBD7 2F12             (        forth.asm):01679 (3)             ble     @done           We're done. Return With CFLAG set
EBD9 BDE680           (        forth.asm):01680 (7)     @iter   jsr     RPUSH           Push back the limit
EBDC 1F21             (        forth.asm):01681 (4)             tfr     y,x
EBDE BDE680           (        forth.asm):01682 (7)             jsr     RPUSH           Push back the index
EBE1 1CFE             (        forth.asm):01683 (2)             andcc   #^CFLAG         Clear CFLAG
EBE3 39               (        forth.asm):01684 (4)             rts
EBE4 103721           (        forth.asm):01685 (4)     @neginc cmpr    y,x
EBE7 27F0             (        forth.asm):01686 (3)             beq     @iter           79-STANDARD irregular historical precedent
EBE9 2BEE             (        forth.asm):01687 (3)             bmi     @iter
EBEB 1A01             (        forth.asm):01688 (2)     @done   orcc    #CFLAG          Set CFLAG
EBED 39               (        forth.asm):01689 (4)             rts
                      (        forth.asm):01690         
EBEE 46               (        forth.asm):01691         UNLOOP  fcb     $46             ANSI (Core)
EBEF 554E4C4F4F50     (        forth.asm):01692                 fcc     'UNLOOP'
EBF5 EBB2             (        forth.asm):01693                 fdb     PLOOP
EBF7 C7               (        forth.asm):01694                 RFCS
EBF8 BDE69E           (        forth.asm):01695 (7)             jsr     RPOP            Drop the index from the return stack
EBFB 7EE69E           (        forth.asm):01696 (3)             jmp     RPOP            and the loop limit as well
                      (        forth.asm):01697         
EBFE C2               (        forth.asm):01698         IF      fcb     $C2             79-STANDARD (REQ210)
EBFF 4946             (        forth.asm):01699                 fcc     'IF'
EC01 EBEE             (        forth.asm):01700                 fdb     UNLOOP
EC03 C7               (        forth.asm):01701                 RFCS
EC04 109E08           (        forth.asm):01702 (5)             ldy     DICEND
EC07 8EEC26           (        forth.asm):01703 (3)             ldx     #IFEX
EC0A 86BD             (        forth.asm):01704 (2)             lda     #JSROPC         JSR extended
EC0C BDE145           (        forth.asm):01705 (7)             jsr     CHKRTS          Check if the final RTS can be omitted
EC0F BDE42E           (        forth.asm):01706 (7)             jsr     VARCON2
EC12 8E2603           (        forth.asm):01707 (3)             ldx     #BNEOPC         Compile "BNE *+5"
EC15 AFA1             (        forth.asm):01708 (5+2)           stx     ,y++
EC17 867E             (        forth.asm):01709 (2)             lda     #JMPOPC         JMP extended
EC19 A7A0             (        forth.asm):01710 (4+1)           sta     ,y+
EC1B 1F21             (        forth.asm):01711 (4)             tfr     y,x
EC1D BDE680           (        forth.asm):01712 (7)             jsr     RPUSH
EC20 3122             (        forth.asm):01713 (4+1)           leay    2,y             Reserve 2 bytes for the jump address
EC22 109F08           (        forth.asm):01714 (5)             sty     DICEND
EC25 39               (        forth.asm):01715 (4)             rts
                      (        forth.asm):01716         
EC26 BDE671           (        forth.asm):01717 (7)     IFEX    jsr     NPOP
EC29 1037C1           (        forth.asm):01718 (4)             cmpr    0,x
EC2C 39               (        forth.asm):01719 (4)             rts
                      (        forth.asm):01720         
                      (        forth.asm):01721         * Functionally equivalent to:
                      (        forth.asm):01722         * (ANSI) : UNLESS ['] 0= COMPILE, POSTPONE IF ; IMMEDIATE RESTRICT
                      (        forth.asm):01723         * or
                      (        forth.asm):01724         * (old style) : UNLESS COMPILE NOT [COMPILE] IF ; IMMEDIATE RESTRICT
EC2D C6               (        forth.asm):01725         UNLESS  fcb     $C6             Non-standard (Perl inspired)
EC2E 554E4C455353     (        forth.asm):01726                 fcc     'UNLESS'
EC34 EBFE             (        forth.asm):01727                 fdb     IF
EC36 C7               (        forth.asm):01728                 RFCS
                      (        forth.asm):01729                 IFNE    RELFEAT
EC37 8EED6A           (        forth.asm):01730 (3)             ldx     #NULP+6         XT for 0=
                      (        forth.asm):01731                 ELSE
                      (        forth.asm):01732                 ldx     #NULP+5         XT for 0=
                      (        forth.asm):01733                 ENDC
EC3A BDF02F           (        forth.asm):01734 (7)             jsr     CMPCOM1
EC3D 20C5             (        forth.asm):01735                 RFXT    bra,IF+5        XT for IF
                      (        forth.asm):01736         
EC3F C4               (        forth.asm):01737         ELSE    fcb     $C4             79-STANDARD (REQ167)
EC40 454C5345         (        forth.asm):01738                 fcc     'ELSE'
EC44 EC2D             (        forth.asm):01739                 fdb     UNLESS
EC46 C7               (        forth.asm):01740                 RFCS
EC47 109E08           (        forth.asm):01741 (5)             ldy     DICEND
EC4A 867E             (        forth.asm):01742 (2)             lda     #JMPOPC         JMP extended
EC4C A7A0             (        forth.asm):01743 (4+1)           sta     ,y+
EC4E 3122             (        forth.asm):01744 (4+1)           leay    2,y
EC50 109F08           (        forth.asm):01745 (5)             sty     DICEND
EC53 BDE69E           (        forth.asm):01746 (7)             jsr     RPOP
EC56 10AF84           (        forth.asm):01747 (6+0)           sty     ,x              Set actual ELSE jump address
EC59 1F21             (        forth.asm):01748 (4)             tfr     y,x
EC5B 301E             (        forth.asm):01749 (4+1)           leax    -2,x
EC5D 7EE680           (        forth.asm):01750 (3)             jmp     RPUSH
                      (        forth.asm):01751         
EC60 C4               (        forth.asm):01752         THEN    fcb     $C4             79-STANDARD (REQ161)
EC61 5448454E         (        forth.asm):01753                 fcc     'THEN'
EC65 EC3F             (        forth.asm):01754                 fdb     ELSE
EC67 C7               (        forth.asm):01755                 RFCS
EC68 109E08           (        forth.asm):01756 (5)             ldy     DICEND
EC6B BDE69E           (        forth.asm):01757 (7)             jsr     RPOP
EC6E 10AF84           (        forth.asm):01758 (6+0)           sty     ,x
EC71 39               (        forth.asm):01759 (4)             rts
                      (        forth.asm):01760         
EC72 01               (        forth.asm):01761         EQ      fcb     1               79-STANDARD (REQ173)
EC73 3D               (        forth.asm):01762                 fcc     '='             ( N1 N2 -- FLAG )
EC74 EC60             (        forth.asm):01763                 fdb     THEN
EC76 C7               (        forth.asm):01764                 RFCS
EC77 CC0242BDE304     (        forth.asm):01765                 MINDREQ 2
EC7D 10ECC4           (        forth.asm):01766 (8+0)           ldq     ,u              D:W has N2:N1
EC80 3342             (        forth.asm):01767 (4+1)           leau    2,u             Drop one cell from the user stack
EC82 1FC1             (        forth.asm):01768 (4)             tfr     0,x
EC84 103760           (        forth.asm):01769 (4)             cmpr    w,d
EC87 2602             (        forth.asm):01770 (3)             bne     @eq1
EC89 3001             (        forth.asm):01771 (4+1)           leax    1,x
EC8B AFC4             (        forth.asm):01772 (5+0)   @eq1    stx     ,u              Store in place to FLAG
EC8D 39               (        forth.asm):01773 (4)             rts
                      (        forth.asm):01774         
EC8E 02               (        forth.asm):01775         DIFF    fcb     2               79-STANDARD (REF)
EC8F 3C3E             (        forth.asm):01776                 fcc     '<>'            ( N1 N2 -- FLAG )
EC91 EC72             (        forth.asm):01777                 fdb     EQ
EC93 C7               (        forth.asm):01778                 RFCS
EC94 CC0242BDE304     (        forth.asm):01779                 MINDREQ 2
EC9A 10ECC4           (        forth.asm):01780 (8+0)           ldq     ,u              D:W has N2:N1
EC9D 3342             (        forth.asm):01781 (4+1)           leau    2,u             Drop one cell from the user stack
EC9F 1FC1             (        forth.asm):01782 (4)             tfr     0,x
ECA1 103760           (        forth.asm):01783 (4)             cmpr    w,d
ECA4 2702             (        forth.asm):01784 (3)             beq     @diff1
ECA6 3001             (        forth.asm):01785 (4+1)           leax    1,x
ECA8 AFC4             (        forth.asm):01786 (5+0)   @diff1  stx     ,u              Store in place to FLAG
ECAA 39               (        forth.asm):01787 (4)             rts
                      (        forth.asm):01788         
ECAB 02               (        forth.asm):01789         SINFEQ  fcb     2               Non-standard (Not even ANSI!)
ECAC 3C3D             (        forth.asm):01790                 fcc     '<='            Required for the ORNL fixed sieve benchmark
ECAE EC8E             (        forth.asm):01791                 fdb     DIFF
ECB0 C7               (        forth.asm):01792                 RFCS
ECB1 CC0242BDE304     (        forth.asm):01793                 MINDREQ 2               At least two cells need to be stacked up
ECB7 10AEC4           (        forth.asm):01794 (6+0)           ldy     ,u
ECBA AE42             (        forth.asm):01795 (5+1)           ldx     2,u
ECBC 104F             (        forth.asm):01796 (2)             clrd
ECBE 103721           (        forth.asm):01797 (4)             cmpr    y,x
ECC1 2E02             (        forth.asm):01798 (3)             bgt     @sinfq1
ECC3 104C             (        forth.asm):01799 (2)             incd
ECC5 3342             (        forth.asm):01800 (4+1)   @sinfq1 leau    2,u             Drop one cell
ECC7 EDC4             (        forth.asm):01801 (5+0)           std     ,u
ECC9 39               (        forth.asm):01802 (4)             rts
                      (        forth.asm):01803         
                      (        forth.asm):01804                 IFNE    DEBUG
ECCA                  (        forth.asm):01805         CC      fcb     2               Non-standard. Used for debugging
                      (        forth.asm):01806                 fcc     'CC'
                      (        forth.asm):01807                 fdb     SINFEQ
                      (        forth.asm):01808                 RFCS
                      (        forth.asm):01809                 ldx     CCREG
                      (        forth.asm):01810                 jmp     NPUSH
                      (        forth.asm):01811                 ENDC
                      (        forth.asm):01812         
ECCA 03               (        forth.asm):01813         XOR     fcb     3               79-STANDARD (REQ179)
ECCB 584F52           (        forth.asm):01814                 fcc     'XOR'
                      (        forth.asm):01815                 IFNE    DEBUG
                      (        forth.asm):01816                 fdb     CC
                      (        forth.asm):01817                 ELSE
ECCE ECAB             (        forth.asm):01818                 fdb     SINFEQ
                      (        forth.asm):01819                 ENDC
ECD0 C7               (        forth.asm):01820                 RFCS
ECD1 CC0242BDE304     (        forth.asm):01821                 MINDREQ 2
ECD7 ECC4             (        forth.asm):01822 (5+0)           ldd     ,u
ECD9 10A642           (        forth.asm):01823 (6+1)           ldw     2,u
ECDC 103660           (        forth.asm):01824 (4)             eorr    w,d
ECDF 3342             (        forth.asm):01825 (4+1)   XOR1    leau    2,u
ECE1 EDC4             (        forth.asm):01826 (5+0)           std     ,u
ECE3 39               (        forth.asm):01827 (4)             rts
                      (        forth.asm):01828         
ECE4 02               (        forth.asm):01829         OR      fcb     2               79-STANDARD (REQ223)
ECE5 4F52             (        forth.asm):01830                 fcc     'OR'
ECE7 ECCA             (        forth.asm):01831                 fdb     XOR
ECE9 C7               (        forth.asm):01832                 RFCS
ECEA CC0242BDE304     (        forth.asm):01833                 MINDREQ 2
ECF0 ECC4             (        forth.asm):01834 (5+0)           ldd     ,u
ECF2 10A642           (        forth.asm):01835 (6+1)           ldw     2,u
ECF5 103560           (        forth.asm):01836 (4)             orr     w,d
ECF8 20E5             (        forth.asm):01837 (3)             bra     XOR1
                      (        forth.asm):01838         
ECFA 03               (        forth.asm):01839         AND     fcb     3               79-STANDARD (REQ183)
ECFB 414E44           (        forth.asm):01840                 fcc     'AND'
ECFE ECE4             (        forth.asm):01841                 fdb     OR
ED00 C7               (        forth.asm):01842                 RFCS
ED01 CC0242BDE304     (        forth.asm):01843                 MINDREQ 2
ED07 ECC4             (        forth.asm):01844 (5+0)           ldd     ,u
ED09 10A642           (        forth.asm):01845 (6+1)           ldw     2,u
ED0C 103460           (        forth.asm):01846 (4)             andr    w,d
ED0F 20CE             (        forth.asm):01847 (3)             bra     XOR1
                      (        forth.asm):01848         
ED11 03               (        forth.asm):01849         COM     fcb     3               79-STANDARD (REF)
ED12 434F4D           (        forth.asm):01850                 fcc     'COM'
ED15 ECFA             (        forth.asm):01851                 fdb     AND
ED17 C7               (        forth.asm):01852                 RFCS
ED18 BDE671           (        forth.asm):01853 (7)     COM0    jsr     NPOP
ED1B 1F10             (        forth.asm):01854 (4)             tfr     x,d
ED1D 1043             (        forth.asm):01855 (2)             comd
ED1F 1F01             (        forth.asm):01856 (4)             tfr     d,x
ED21 3610             (        forth.asm):01857                 UCNPUSH
ED23 39               (        forth.asm):01858 (4)             rts
                      (        forth.asm):01859         
ED24 06               (        forth.asm):01860         INVERT  fcb     6               ANSI (Core)
ED25 494E56455254     (        forth.asm):01861                 fcc     'INVERT'
ED2B ED11             (        forth.asm):01862                 fdb     COM
ED2D C7               (        forth.asm):01863                 RFCS
ED2E 20E8             (        forth.asm):01864 (3)             bra     COM0
                      (        forth.asm):01865         
ED30 02               (        forth.asm):01866         ZGREAT  fcb     2               79-STANDARD (REQ118)
ED31 303E             (        forth.asm):01867                 fcc     '0>'
ED33 ED24             (        forth.asm):01868                 fdb     INVERT
ED35 C7               (        forth.asm):01869                 RFCS
ED36 BDE671           (        forth.asm):01870 (7)             jsr     NPOP
ED39 1F10             (        forth.asm):01871 (4)             tfr     x,d
ED3B 104D             (        forth.asm):01872 (2)             tstd
ED3D 2F06             (        forth.asm):01873 (3)             ble     @zgrt1
ED3F 8E0001           (        forth.asm):01874 (3)             ldx     #1
ED42 3610             (        forth.asm):01875                 UCNPUSH
ED44 39               (        forth.asm):01876 (4)             rts
ED45 1FC1             (        forth.asm):01877 (4)     @zgrt1  tfr     0,x
ED47 3610             (        forth.asm):01878                 UCNPUSH
ED49 39               (        forth.asm):01879 (4)             rts
                      (        forth.asm):01880         
ED4A 02               (        forth.asm):01881         ZLESS   fcb     2               79-STANDARD (REQ144)
ED4B 303C             (        forth.asm):01882                 fcc     '0<'
ED4D ED30             (        forth.asm):01883                 fdb     ZGREAT
ED4F C7               (        forth.asm):01884                 RFCS
ED50 BDE671           (        forth.asm):01885 (7)             jsr     NPOP
ED53 1F10             (        forth.asm):01886 (4)             tfr     x,d
ED55 104D             (        forth.asm):01887 (2)             tstd
ED57 2C06             (        forth.asm):01888 (3)             bge     @zlss1
ED59 8E0001           (        forth.asm):01889 (3)             ldx     #1
ED5C 3610             (        forth.asm):01890                 UCNPUSH
ED5E 39               (        forth.asm):01891 (4)             rts
ED5F 1FC1             (        forth.asm):01892 (4)     @zlss1  tfr     0,x
ED61 3610             (        forth.asm):01893                 UCNPUSH
ED63 39               (        forth.asm):01894 (4)             rts
                      (        forth.asm):01895         
ED64 02               (        forth.asm):01896         NULP    fcb     2               79-STANDARD (REQ180)
ED65 303D             (        forth.asm):01897                 fcc     '0='
ED67 ED4A             (        forth.asm):01898                 fdb     ZLESS
ED69 C7               (        forth.asm):01899                 RFCS
ED6A BDE671           (        forth.asm):01900 (7)             jsr     NPOP
ED6D 1F10             (        forth.asm):01901 (4)             tfr     x,d
ED6F 1FC1             (        forth.asm):01902 (4)             tfr     0,x
ED71 104D             (        forth.asm):01903 (2)             tstd
ED73 2703             (        forth.asm):01904 (3)             beq     @nulp2
ED75 3610             (        forth.asm):01905         @nulp1  UCNPUSH
ED77 39               (        forth.asm):01906 (4)             rts
ED78 3001             (        forth.asm):01907 (4+1)   @nulp2  leax    1,x
ED7A 20F9             (        forth.asm):01908 (3)             bra     @nulp1
                      (        forth.asm):01909         
ED7C 03               (        forth.asm):01910         NOT     fcb     3               79-STANDARD (REQ165)
ED7D 4E4F54           (        forth.asm):01911                 fcc     'NOT'
ED80 ED64             (        forth.asm):01912                 fdb     NULP
ED82 C7               (        forth.asm):01913                 RFCS
ED83 20E5             (        forth.asm):01914                 RFXT    bra,NULP+5      XT for 0=
                      (        forth.asm):01915         
ED85 02               (        forth.asm):01916         USUP    fcb     2               ANSI (Core Ext)
ED86 553E             (        forth.asm):01917                 fcc     'U>'
ED88 ED7C             (        forth.asm):01918                 fdb     NOT
ED8A C7               (        forth.asm):01919                 RFCS
ED8B BDE433           (        forth.asm):01920 (7)             jsr     CMP2
ED8E 2302             (        forth.asm):01921 (3)             bls     @usup1
ED90 3001             (        forth.asm):01922 (4+1)           leax    1,x
ED92 3610             (        forth.asm):01923         @usup1  UCNPUSH
ED94 39               (        forth.asm):01924 (4)             rts
                      (        forth.asm):01925         
ED95 02               (        forth.asm):01926         UINF    fcb     2               79-STANDARD (REQ150)
ED96 553C             (        forth.asm):01927                 fcc     'U<'
ED98 ED85             (        forth.asm):01928                 fdb     USUP
ED9A C7               (        forth.asm):01929                 RFCS
ED9B BDE433           (        forth.asm):01930 (7)             jsr     CMP2
ED9E 2402             (        forth.asm):01931 (3)             bhs     @uinf1          Z is set
EDA0 3001             (        forth.asm):01932 (4+1)           leax    1,x
EDA2 3610             (        forth.asm):01933         @uinf1  UCNPUSH
EDA4 39               (        forth.asm):01934 (4)             rts
                      (        forth.asm):01935         
                      (        forth.asm):01936         * Functionally: : WITHIN OVER - >R - R> U< ;
EDA5 06               (        forth.asm):01937         WITHIN  fcb     6               ANSI (Core)
EDA6 57495448494E     (        forth.asm):01938                 fcc     'WITHIN'        ( n1 n2 n3 -- flag )
EDAC ED95             (        forth.asm):01939                 fdb     UINF
EDAE C7               (        forth.asm):01940                 RFCS
EDAF BDFBF8           (        forth.asm):01941                 RFXT    jsr,OVER+7      XT for OVER
EDB2 BDF77A           (        forth.asm):01942                 RFXT    jsr,MINUS+4     XT for -
EDB5 BDEEEE           (        forth.asm):01943                 RFXT    jsr,TOR+5       XT for >R
EDB8 BDF77A           (        forth.asm):01944                 RFXT    jsr,MINUS+4     XT for -
EDBB BDEEE2           (        forth.asm):01945                 RFXT    jsr,RFROM+5     XT for R>
EDBE 20DB             (        forth.asm):01946                 RFXT    bra,UINF+5      XT for U<
                      (        forth.asm):01947         
EDC0 01               (        forth.asm):01948         SUP     fcb     1               79-STANDARD (REQ102)
EDC1 3E               (        forth.asm):01949                 fcc     '>'
EDC2 EDA5             (        forth.asm):01950                 fdb     WITHIN
EDC4 C7               (        forth.asm):01951                 RFCS
EDC5 BDE433           (        forth.asm):01952 (7)             jsr     CMP2
EDC8 2F02             (        forth.asm):01953 (3)             ble     @sup1
EDCA 3001             (        forth.asm):01954 (4+1)           leax    1,x
EDCC 3610             (        forth.asm):01955         @sup1   UCNPUSH
EDCE 39               (        forth.asm):01956 (4)             rts
                      (        forth.asm):01957         
EDCF 01               (        forth.asm):01958         INF     fcb     1               79-STANDARD (REQ139)
EDD0 3C               (        forth.asm):01959                 fcc     '<'
EDD1 EDC0             (        forth.asm):01960                 fdb     SUP
EDD3 C7               (        forth.asm):01961                 RFCS
EDD4 BDE433           (        forth.asm):01962 (7)             jsr     CMP2
EDD7 2C02             (        forth.asm):01963 (3)             bge     @inf1
EDD9 3001             (        forth.asm):01964 (4+1)           leax    1,x
EDDB 3610             (        forth.asm):01965         @inf1   UCNPUSH
EDDD 39               (        forth.asm):01966 (4)             rts
                      (        forth.asm):01967          
EDDE 03               (        forth.asm):01968         MAX     fcb     3               79-STANDARD (REQ218)
EDDF 4D4158           (        forth.asm):01969                 fcc     'MAX'
EDE2 EDCF             (        forth.asm):01970                 fdb     INF
EDE4 C7               (        forth.asm):01971                 RFCS
EDE5 BDE671           (        forth.asm):01972 (7)             jsr     NPOP
EDE8 1F12             (        forth.asm):01973 (4)             tfr     x,y
EDEA BDE671           (        forth.asm):01974 (7)             jsr     NPOP
EDED 103721           (        forth.asm):01975 (4)             cmpr    y,x
EDF0 2C02             (        forth.asm):01976 (3)             bge     @pshrv1
EDF2 1F21             (        forth.asm):01977 (4)             tfr     y,x
EDF4 3610             (        forth.asm):01978         @pshrv1 UCNPUSH
EDF6 39               (        forth.asm):01979 (4)             rts
                      (        forth.asm):01980         
EDF7 03               (        forth.asm):01981         MIN     fcb     3               79-STANDARD (REQ127)
EDF8 4D494E           (        forth.asm):01982                 fcc     'MIN'
EDFB EDDE             (        forth.asm):01983                 fdb     MAX
EDFD C7               (        forth.asm):01984                 RFCS
EDFE BDE671           (        forth.asm):01985 (7)             jsr     NPOP
EE01 1F12             (        forth.asm):01986 (4)             tfr     x,y
EE03 BDE671           (        forth.asm):01987 (7)             jsr     NPOP
EE06 103721           (        forth.asm):01988 (4)             cmpr    y,x
EE09 2F02             (        forth.asm):01989 (3)             ble     @pshrv2
EE0B 1F21             (        forth.asm):01990 (4)             tfr     y,x
EE0D 3610             (        forth.asm):01991         @pshrv2 UCNPUSH
EE0F 39               (        forth.asm):01992 (4)             rts
                      (        forth.asm):01993         
EE10 03               (        forth.asm):01994         ABS     fcb     3               79-STANDARD (REQ108)
EE11 414253           (        forth.asm):01995                 fcc     'ABS'
EE14 EDF7             (        forth.asm):01996                 fdb     MIN
EE16 C7               (        forth.asm):01997                 RFCS
EE17 BDE671           (        forth.asm):01998 (7)             jsr     NPOP
EE1A 1F10             (        forth.asm):01999 (4)             tfr     x,d
EE1C 104D             (        forth.asm):02000 (2)             tstd
EE1E 2A04             (        forth.asm):02001 (3)             bpl     @abs1
EE20 1040             (        forth.asm):02002 (2)             negd
EE22 1F01             (        forth.asm):02003 (4)             tfr     d,x
EE24 3610             (        forth.asm):02004         @abs1   UCNPUSH
EE26 39               (        forth.asm):02005 (4)             rts
                      (        forth.asm):02006         
EE27 06               (        forth.asm):02007         NEGATE  fcb     6               79-STANDARD (REQ177)
EE28 4E4547415445     (        forth.asm):02008                 fcc     'NEGATE'
EE2E EE10             (        forth.asm):02009                 fdb     ABS
EE30 C7               (        forth.asm):02010                 RFCS
EE31 CC0244BDE304     (        forth.asm):02011                 MINDREQ 1               One cell needs to be stacked up
EE37 ECC4             (        forth.asm):02012 (5+0)           ldd     ,u
EE39 1040             (        forth.asm):02013 (2)             negd
EE3B EDC4             (        forth.asm):02014 (5+0)           std     ,u
EE3D 39               (        forth.asm):02015 (4)             rts
                      (        forth.asm):02016         
EE3E C5               (        forth.asm):02017         BEGIN   fcb     $C5             79-STANDARD (REQ147)
EE3F 424547494E       (        forth.asm):02018                 fcc     'BEGIN'
EE44 EE27             (        forth.asm):02019                 fdb     NEGATE
EE46 C7               (        forth.asm):02020                 RFCS
EE47 9E08             (        forth.asm):02021 (4)             ldx     DICEND
EE49 7EE680           (        forth.asm):02022 (3)             jmp     RPUSH
                      (        forth.asm):02023         
EE4C C5               (        forth.asm):02024         AGAIN   fcb     $C5             79-STANDARD (REF114)
EE4D 414741494E       (        forth.asm):02025                 fcc     'AGAIN'
EE52 EE3E             (        forth.asm):02026                 fdb     BEGIN
EE54 C7               (        forth.asm):02027                 RFCS
EE55 BDE69E           (        forth.asm):02028 (7)             jsr     RPOP
EE58 1F12             (        forth.asm):02029 (4)             tfr     x,y
EE5A 9E08             (        forth.asm):02030 (4)             ldx     DICEND
EE5C 867E             (        forth.asm):02031 (2)             lda     #JMPOPC         JMP extended
EE5E A780             (        forth.asm):02032 (4+1)           sta     ,x+
EE60 10AF81           (        forth.asm):02033 (6+2)           sty     ,x++
EE63 9F08             (        forth.asm):02034 (4)             stx     DICEND
EE65 8602             (        forth.asm):02035 (2)             lda     #2
EE67 9727             (        forth.asm):02036 (3)             sta     RTSREMV         Trigger the RTS removal optimization
EE69 39               (        forth.asm):02037 (4)             rts
                      (        forth.asm):02038         
                      (        forth.asm):02039         # The standard does not require this as being immediate but I do.
EE6A C4               (        forth.asm):02040         EXIT    fcb     $C4             79-STANDARD (REQ117)
EE6B 45584954         (        forth.asm):02041                 fcc     'EXIT'
EE6F EE4C             (        forth.asm):02042                 fdb     AGAIN
EE71 C7               (        forth.asm):02043                 RFCS
EE72 9E08             (        forth.asm):02044 (4)             ldx     DICEND
EE74 8639             (        forth.asm):02045 (2)             lda     #RTSOPC         RTS inherent
EE76 A780             (        forth.asm):02046 (4+1)           sta     ,x+
EE78 9F08             (        forth.asm):02047 (4)             stx     DICEND
EE7A 39               (        forth.asm):02048 (4)             rts
                      (        forth.asm):02049         
EE7B C5               (        forth.asm):02050         UNTIL   fcb     $C5             79-STANDARD (REQ237)
EE7C 554E54494C       (        forth.asm):02051                 fcc     'UNTIL'
EE81 EE6A             (        forth.asm):02052                 fdb     EXIT
EE83 C7               (        forth.asm):02053                 RFCS
EE84 109E08           (        forth.asm):02054 (5)             ldy     DICEND
EE87 86BD             (        forth.asm):02055 (2)             lda     #JSROPC         JSR extended
EE89 8EEC26           (        forth.asm):02056 (3)             ldx     #IFEX
EE8C BDE145           (        forth.asm):02057 (7)             jsr     CHKRTS          Check if the final RTS can be omitted
EE8F BDE42E           (        forth.asm):02058 (7)             jsr     VARCON2
EE92 8E2603           (        forth.asm):02059 (3)             ldx     #BNEOPC         Compile "BNE *+5"
EE95 AFA1             (        forth.asm):02060 (5+2)           stx     ,y++
EE97 867E             (        forth.asm):02061 (2)             lda     #JMPOPC         JMP extended
EE99 A7A0             (        forth.asm):02062 (4+1)           sta     ,y+
EE9B BDE69E           (        forth.asm):02063 (7)             jsr     RPOP
EE9E AFA1             (        forth.asm):02064 (5+2)           stx     ,y++
EEA0 109F08           (        forth.asm):02065 (5)             sty     DICEND
EEA3 39               (        forth.asm):02066 (4)             rts
                      (        forth.asm):02067         
EEA4 C3               (        forth.asm):02068         END     fcb     $C3             79-STANDARD (REF224)
EEA5 454E44           (        forth.asm):02069                 fcc     'END'
EEA8 EE7B             (        forth.asm):02070                 fdb     UNTIL
EEAA C7               (        forth.asm):02071                 RFCS
EEAB 20D7             (        forth.asm):02072                 RFXT    bra,UNTIL+8     XT for UNTIL
                      (        forth.asm):02073         
EEAD C5               (        forth.asm):02074         WHILE   fcb     $C5             79-STANDARD (REQ149)
EEAE 5748494C45       (        forth.asm):02075                 fcc     'WHILE'
EEB3 EEA4             (        forth.asm):02076                 fdb     END
EEB5 C7               (        forth.asm):02077                 RFCS
EEB6 7EEC04           (        forth.asm):02078                 RFXT    jmp,IF+5        XT for IF
                      (        forth.asm):02079         
EEB9 C6               (        forth.asm):02080         REPEAT  fcb     $C6             79-STANDARD (REQ120)
EEBA 524550454154     (        forth.asm):02081                 fcc     'REPEAT'
EEC0 EEAD             (        forth.asm):02082                 fdb     WHILE
EEC2 C7               (        forth.asm):02083                 RFCS
EEC3 BDE69E           (        forth.asm):02084 (7)             jsr     RPOP
EEC6 3410             (        forth.asm):02085 (4+2)           pshs    x
EEC8 BDE69E           (        forth.asm):02086 (7)             jsr     RPOP
EECB 109E08           (        forth.asm):02087 (5)             ldy     DICEND
EECE 867E             (        forth.asm):02088 (2)             lda     #JMPOPC         JMP extended
EED0 BDE42E           (        forth.asm):02089 (7)             jsr     VARCON2
EED3 3510             (        forth.asm):02090 (4+2)           puls    x
EED5 10AF84           (        forth.asm):02091 (6+0)           sty     ,x
EED8 109F08           (        forth.asm):02092 (5)             sty     DICEND
EEDB 39               (        forth.asm):02093 (4)             rts
                      (        forth.asm):02094         
EEDC 42               (        forth.asm):02095         RFROM   fcb     $42             79-STANDARD (REQ110)
EEDD 523E             (        forth.asm):02096                 fcc     'R>'
EEDF EEB9             (        forth.asm):02097                 fdb     REPEAT
EEE1 C7               (        forth.asm):02098                 RFCS
EEE2 BDE69E           (        forth.asm):02099 (7)             jsr     RPOP
EEE5 7EE663           (        forth.asm):02100 (3)             jmp     NPUSH
                      (        forth.asm):02101         
EEE8 42               (        forth.asm):02102         TOR     fcb     $42             79-STANDARD (REQ200)
EEE9 3E52             (        forth.asm):02103                 fcc     '>R'
EEEB EEDC             (        forth.asm):02104                 fdb     RFROM
EEED C7               (        forth.asm):02105                 RFCS
EEEE BDE671           (        forth.asm):02106 (7)             jsr     NPOP
EEF1 7EE680           (        forth.asm):02107 (3)             jmp     RPUSH
                      (        forth.asm):02108         
EEF4 45               (        forth.asm):02109         LEAVE   fcb     $45             79-STANDARD (REQ213)
EEF5 4C45415645       (        forth.asm):02110                 fcc     'LEAVE'
EEFA EEE8             (        forth.asm):02111                 fdb     TOR
EEFC C7               (        forth.asm):02112                 RFCS
EEFD BDE69E           (        forth.asm):02113 (7)             jsr     RPOP
EF00 BDE69E           (        forth.asm):02114 (7)             jsr     RPOP
EF03 BDE680           (        forth.asm):02115 (7)             jsr     RPUSH
EF06 7EE680           (        forth.asm):02116 (3)             jmp     RPUSH
                      (        forth.asm):02117         
EF09 41               (        forth.asm):02118         INDI    fcb     $41             79-STANDARD (REQ136)
EF0A 49               (        forth.asm):02119                 fcc     'I'
EF0B EEF4             (        forth.asm):02120                 fdb     LEAVE
EF0D C7               (        forth.asm):02121                 RFCS
EF0E C601             (        forth.asm):02122 (2)             ldb     #1              1 means top of the stack
EF10 9625             (        forth.asm):02123 (3)     RPICKN  lda     RDEPTH
EF12 103798           (        forth.asm):02124 (4)             cmpr    b,a
EF15 250A             (        forth.asm):02125 (3)             bcs     @rpick1
EF17 9E00             (        forth.asm):02126 (4)             ldx     RSP
EF19 5A               (        forth.asm):02127 (1)             decb                    Minus 1, unlike in the Z80 implementation
EF1A 58               (        forth.asm):02128 (1)             lslb                    Times 2
EF1B 3A               (        forth.asm):02129 (1)             abx
EF1C AE84             (        forth.asm):02130 (5+0)           ldx     ,x
EF1E 7EE663           (        forth.asm):02131 (3)             jmp     NPUSH
EF21 C608             (        forth.asm):02132 (2)     @rpick1 ldb     #8              Return stack underflow
EF23 BDE5EC           (        forth.asm):02133 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02134         
EF26 42               (        forth.asm):02135         RFETCH  fcb     $42             79-STANDARD (REQ228)
EF27 5240             (        forth.asm):02136                 fcc     'R@'
EF29 EF09             (        forth.asm):02137                 fdb     INDI
EF2B C7               (        forth.asm):02138                 RFCS
EF2C 20E0             (        forth.asm):02139                 RFXT    bra,INDI+4      XT for I
                      (        forth.asm):02140         
EF2E 42               (        forth.asm):02141         INDIP   fcb     $42             79-STANDARD (REF)
EF2F 4927             (        forth.asm):02142                 fdb     $4927
EF31 EF26             (        forth.asm):02143                 fdb     RFETCH
EF33 C7               (        forth.asm):02144                 RFCS
EF34 C602             (        forth.asm):02145 (2)             ldb     #2
EF36 20D8             (        forth.asm):02146 (3)             bra     RPICKN
                      (        forth.asm):02147         
EF38 41               (        forth.asm):02148         INDJ    fcb     $41             79-STANDARD (REQ225)
EF39 4A               (        forth.asm):02149                 fcc     'J'
EF3A EF2E             (        forth.asm):02150                 fdb     INDIP
EF3C C7               (        forth.asm):02151                 RFCS
EF3D C603             (        forth.asm):02152 (2)             ldb     #3
EF3F 20CF             (        forth.asm):02153 (3)             bra     RPICKN
                      (        forth.asm):02154         
EF41 42               (        forth.asm):02155         INDJP   fcb     $42             Non-standard
EF42 4A27             (        forth.asm):02156                 fdb     $4A27
EF44 EF38             (        forth.asm):02157                 fdb     INDJ
EF46 C7               (        forth.asm):02158                 RFCS
EF47 C604             (        forth.asm):02159 (2)             ldb     #4
EF49 20C5             (        forth.asm):02160 (3)             bra     RPICKN
                      (        forth.asm):02161         
EF4B 41               (        forth.asm):02162         INDK    fcb     $41             79-STANDARD (REF)
EF4C 4B               (        forth.asm):02163                 fcc     'K'
EF4D EF41             (        forth.asm):02164                 fdb     INDJP
EF4F C7               (        forth.asm):02165                 RFCS
EF50 C605             (        forth.asm):02166 (2)             ldb     #5
EF52 20BC             (        forth.asm):02167 (3)             bra     RPICKN
                      (        forth.asm):02168         
EF54 04               (        forth.asm):02169         QUIT    fcb     4               79-STANDARD (REQ211)
EF55 51554954         (        forth.asm):02170                 fcc     'QUIT'
EF59 EF4B             (        forth.asm):02171                 fdb     INDK
EF5B C7               (        forth.asm):02172                 RFCS
EF5C 0F1B             (        forth.asm):02173 (5)             clr     USTATE+1
EF5E BDE9CE           (        forth.asm):02174                 RFXT    jsr,RCLR+7      XT for RCLR
EF61 10CE8000         (        forth.asm):02175 (4)             lds     #RAMSTRT+RAMSIZE Reset system stack pointer
EF65 BDE1E5           (        forth.asm):02176 (7)             jsr     PUTCR
EF68 7EE09E           (        forth.asm):02177 (3)             jmp     INTERP
                      (        forth.asm):02178         
EF6B 05               (        forth.asm):02179         ABORT   fcb     5               79-STANDARD (REQ101)
EF6C 41424F5254       (        forth.asm):02180                 fcc     'ABORT'
EF71 EF54             (        forth.asm):02181                 fdb     QUIT
EF73 C7               (        forth.asm):02182                 RFCS
EF74 BDE9C2           (        forth.asm):02183                 RFXT    jsr,NCLR+7      XT for NCLR
EF77 BDE9CE           (        forth.asm):02184                 RFXT    jsr,RCLR+7      XT for RCLR
EF7A C603             (        forth.asm):02185 (2)             ldb     #3
EF7C BDE5EC           (        forth.asm):02186 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02187         
EF7F 04               (        forth.asm):02188         FIND    fcb     4               79-STANDARD (REQ203)
EF80 46494E44         (        forth.asm):02189                 fcc     'FIND'          ( -- XT )
EF84 EF6B             (        forth.asm):02190                 fdb     ABORT
EF86 C7               (        forth.asm):02191                 RFCS
EF87 1FC2             (        forth.asm):02192 (4)             tfr     0,y             Default return value is zero
EF89 BDE6EA           (        forth.asm):02193 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
EF8C 6D84             (        forth.asm):02194 (5+0)           tst     ,x
EF8E 270E             (        forth.asm):02195 (3)             beq     @find1
EF90 BDE27D           (        forth.asm):02196 (7)             jsr     SCNSTOK
EF93 2709             (        forth.asm):02197 (3)             beq     @find1
EF95 BDE358           (        forth.asm):02198 (7)             jsr     SWDIC
EF98 DC04             (        forth.asm):02199 (4)             ldd     TOKENEP
EF9A 9322             (        forth.asm):02200 (4)             subd    BSBFADR
EF9C DD1C             (        forth.asm):02201 (4)             std     UTOIN           Derive >IN from TOKENEP
EF9E 1F21             (        forth.asm):02202 (4)     @find1  tfr     y,x
EFA0 7EE663           (        forth.asm):02203 (3)             jmp     NPUSH
                      (        forth.asm):02204         
EFA3 01               (        forth.asm):02205         RBRACK  fcb     1               79-STANDARD (REQ126)
EFA4 5D               (        forth.asm):02206                 fcc     ']'
EFA5 EF7F             (        forth.asm):02207                 fdb     FIND
EFA7 C7               (        forth.asm):02208                 RFCS
EFA8 8601             (        forth.asm):02209 (2)             lda     #1
EFAA 971B             (        forth.asm):02210 (3)             sta     USTATE+1
EFAC 39               (        forth.asm):02211 (4)             rts
                      (        forth.asm):02212         
                      (        forth.asm):02213         * Note: the standard does not mandate that this primitive be executed in
                      (        forth.asm):02214         * definitions only. IMHO, it ought to, Therefore I am forcing the C bit here.
EFAD C1               (        forth.asm):02215         LBRACK  fcb     $C1             79-STANDARD (REQ125)
EFAE 5B               (        forth.asm):02216                 fcc     '['
EFAF EFA3             (        forth.asm):02217                 fdb     RBRACK
EFB1 C7               (        forth.asm):02218                 RFCS
EFB2 0F1B             (        forth.asm):02219 (5)             clr     USTATE+1
EFB4 39               (        forth.asm):02220 (4)             rts
                      (        forth.asm):02221         
EFB5 C9               (        forth.asm):02222         BKCOMP  fcb     $C9             79-STANDARD (REQ179)
EFB6 5B434F4D50494C45 (        forth.asm):02223                 fcc     '[COMPILE]'
     5D
EFBF EFAD             (        forth.asm):02224                 fdb     LBRACK
EFC1 C7               (        forth.asm):02225                 RFCS
EFC2 BDE6EA           (        forth.asm):02226 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
EFC5 6D84             (        forth.asm):02227 (5+0)           tst     ,x
EFC7 2605             (        forth.asm):02228 (3)             bne     @bkcmp2
EFC9 C605             (        forth.asm):02229 (2)     @bkcmp1 ldb     #5              Missing word name
EFCB BDE5EC           (        forth.asm):02230 (7)             jsr     ERRHDLR         No return
EFCE BDE27D           (        forth.asm):02231 (7)     @bkcmp2 jsr     SCNSTOK
EFD1 27F6             (        forth.asm):02232 (3)             beq     @bkcmp1
EFD3 BDE358           (        forth.asm):02233 (7)             jsr     SWDIC
EFD6 2607             (        forth.asm):02234 (3)             bne     @bkcmp3         Word found. Code address returned in Y
EFD8 9E02             (        forth.asm):02235 (4)             ldx     TOKENSP
EFDA C602             (        forth.asm):02236 (2)             ldb     #2              Undefined (X points to the offending word)
EFDC BDE5EC           (        forth.asm):02237 (7)             jsr     ERRHDLR         No return
EFDF 10AF62           (        forth.asm):02238 (6+1)   @bkcmp3 sty     2,s             Set as action component
EFE2 DC02             (        forth.asm):02239 (4)             ldd     TOKENSP         Updated by SWDIC if the word was found
EFE4 9322             (        forth.asm):02240 (4)             subd    BSBFADR
EFE6 DD1C             (        forth.asm):02241 (4)             std     UTOIN
EFE8 39               (        forth.asm):02242 (4)             rts
                      (        forth.asm):02243         
                      (        forth.asm):02244         * Functionally: : ['] FIND [COMPILE] LITERAL ; IMMEDIATE RESTRICT
EFE9 C3               (        forth.asm):02245         BKQUOT  fcb     $C3             ANSI (Core)
EFEA 5B275D           (        forth.asm):02246                 fcb     $5B,$27,$5D
EFED EFB5             (        forth.asm):02247                 fdb     BKCOMP
EFEF C7               (        forth.asm):02248                 RFCS
EFF0 8D95             (        forth.asm):02249                 RFXT    bsr,FIND+7      XT for FIND
                      (        forth.asm):02250         * Data stack topmost cell has the target word address.
EFF2 7EEA4E           (        forth.asm):02251                 RFXT    jmp,LITERAL+10  XT for LITERAL
                      (        forth.asm):02252         
EFF5 C8               (        forth.asm):02253         POSTPON fcb     $C8             ANSI (Core)
EFF6 504F5354504F4E45 (        forth.asm):02254                 fcc     'POSTPONE'      ( -- ) as an alias for [COMPILE]
EFFE EFE9             (        forth.asm):02255                 fdb     BKQUOT
F000 C7               (        forth.asm):02256                 RFCS
F001 20BF             (        forth.asm):02257                 RFXT    bra,BKCOMP+12   XT for [COMPILE]
                      (        forth.asm):02258         
                      (        forth.asm):02259                 IFEQ    STRCT79
F003 47               (        forth.asm):02260         COMPILE fcb     $47             79-STANDARD (REQ146)
F004 434F4D50494C45   (        forth.asm):02261                 fcc     'COMPILE'
F00B EFF5             (        forth.asm):02262                 fdb     POSTPON
F00D C7               (        forth.asm):02263                 RFCS
                      (        forth.asm):02264         * Return address points to 3 bytes of code (JSR <cfa>) to be inserted HERE and
                      (        forth.asm):02265         * to be skipped before returning to the caller. This is not permitted by a
                      (        forth.asm):02266         * strict interpretation of the 79-STANDARD, which only provides for a threaded
                      (        forth.asm):02267         * implementation (2 bytes payload). For all practical purposes, it works though.
F00E 3510             (        forth.asm):02268 (4+2)           puls    x
F010 109E08           (        forth.asm):02269 (5)             ldy     DICEND
F013 A680             (        forth.asm):02270 (4+1)           lda     ,x+             JSR opcode
F015 A7A0             (        forth.asm):02271 (4+1)           sta     ,y+
F017 EC81             (        forth.asm):02272 (5+2)           ldd     ,x++
F019 EDA1             (        forth.asm):02273 (5+2)           std     ,y++
F01B 109F08           (        forth.asm):02274 (5)             sty     DICEND
F01E 1F15             (        forth.asm):02275 (4)             tfr     x,pc
                      (        forth.asm):02276                 ENDC
                      (        forth.asm):02277         
                      (        forth.asm):02278         * Like the 79-STANDARD COMPILE word, GNU Forth has this as a compile-only word.
                      (        forth.asm):02279         * This is a wise choice since it allows us to possibly optimize it.
F020 48               (        forth.asm):02280         CMPCOMA fcb     $48             ANSI (Core Ext)
F021 434F4D50494C452C (        forth.asm):02281                 fcc     'COMPILE,'      ( XT -- )
                      (        forth.asm):02282                 IFNE    STRCT79
                      (        forth.asm):02283                 fdb     POSTPON
                      (        forth.asm):02284                 ELSE
F029 F003             (        forth.asm):02285                 fdb     COMPILE
                      (        forth.asm):02286                 ENDC
F02B C7               (        forth.asm):02287                 RFCS
F02C BDE671           (        forth.asm):02288 (7)             jsr     NPOP            Execution token to X
F02F 109E08           (        forth.asm):02289 (5)     CMPCOM1 ldy     DICEND
F032 86BD             (        forth.asm):02290 (2)             lda     #JSROPC
F034 BDE145           (        forth.asm):02291 (7)             jsr     CHKRTS
F037 BDE42E           (        forth.asm):02292 (7)             jsr     VARCON2
F03A 109F08           (        forth.asm):02293 (5)             sty     DICEND
F03D 39               (        forth.asm):02294 (4)             rts
                      (        forth.asm):02295         
                      (        forth.asm):02296         * As per the standard, : is not immediate. This allows for further interesting
                      (        forth.asm):02297         * developments, like tracing words execution...
F03E 01               (        forth.asm):02298         COMPC   fcb     $1              79-STANDARD (REQ116)
F03F 3A               (        forth.asm):02299                 fcc     ':'
F040 F020             (        forth.asm):02300                 fdb     CMPCOMA
F042 C7               (        forth.asm):02301                 RFCS
F043 8601             (        forth.asm):02302 (2)             lda     #1
F045 971B             (        forth.asm):02303 (3)             sta     USTATE+1
F047 104F             (        forth.asm):02304 (2)             clrd
F049 DD10             (        forth.asm):02305 (4)             std     JSRLAST
F04B 8602             (        forth.asm):02306 (2)             lda     #2
F04D 9727             (        forth.asm):02307 (3)             sta     RTSREMV         Optimistic strategy: remove the final RTS
F04F 9625             (        forth.asm):02308 (3)             lda     RDEPTH
F051 9726             (        forth.asm):02309 (3)             sta     IRDPTH          Meant to check for unbalanced constructs
F053 7EE3B5           (        forth.asm):02310 (3)             jmp     LOCWRT
                      (        forth.asm):02311         
F056 C1               (        forth.asm):02312         COMPR   fcb     $C1             79-STANDARD (REQ196)
F057 3B               (        forth.asm):02313                 fcc     ';'
F058 F03E             (        forth.asm):02314                 fdb     COMPC
F05A C7               (        forth.asm):02315                 RFCS
F05B 9625             (        forth.asm):02316 (3)             lda     RDEPTH          Return stack depth
F05D 9126             (        forth.asm):02317 (3)             cmpa    IRDPTH          Same as when : was entered?
F05F 2705             (        forth.asm):02318 (3)             beq     @compr1
F061 C609             (        forth.asm):02319 (2)             ldb     #9              Illegal construct if not
F063 BDE5EC           (        forth.asm):02320 (7)             jsr     ERRHDLR         No return
F066 0F1B             (        forth.asm):02321 (5)     @compr1 clr     USTATE+1        Back to interpretation mode
F068 9E0C             (        forth.asm):02322 (4)             ldx     BDICEND
F06A 9F06             (        forth.asm):02323 (4)             stx     LSTWAD          Update LAST
F06C 9E08             (        forth.asm):02324 (4)             ldx     DICEND
                      (        forth.asm):02325         * Optimization: replace the last JSR by a JMP, if possible.
F06E DC10             (        forth.asm):02326 (4)             ldd     JSRLAST
F070 2712             (        forth.asm):02327 (3)             beq     @compr3         We need an RTS
F072 301D             (        forth.asm):02328 (4+1)           leax    -3,x
F074 9C10             (        forth.asm):02329 (4)             cmpx    JSRLAST
F076 2604             (        forth.asm):02330 (3)             bne     @compr2
F078 867E             (        forth.asm):02331 (2)             lda     #JMPOPC         JMP extended
F07A A784             (        forth.asm):02332 (4+0)           sta     ,x
                      (        forth.asm):02333         * At this point we still have to emit an RTS unless RTSREMV is 2 or more.
F07C 3003             (        forth.asm):02334 (4+1)   @compr2 leax    3,x
F07E 9627             (        forth.asm):02335 (3)             lda     RTSREMV
F080 8102             (        forth.asm):02336 (2)             cmpa    #2
F082 2404             (        forth.asm):02337 (3)             bhs     @compr4         Optimization applies. We have no forward refs
F084 8639             (        forth.asm):02338 (2)     @compr3 lda     #RTSOPC         RTS inherent
F086 A780             (        forth.asm):02339 (4+1)           sta     ,x+
F088                  (        forth.asm):02340         @compr4
                      (        forth.asm):02341                 IFNE    DEBUG
                      (        forth.asm):02342                 lda     #ILLOPC         Illegal opcode
                      (        forth.asm):02343                 sta     ,x+
                      (        forth.asm):02344                 ENDC
F088 9F08             (        forth.asm):02345 (4)             stx     DICEND          Update HERE
F08A 3264             (        forth.asm):02346 (4+1)           leas    4,s             Drop 2 cells from the system stack (see COMP)
                      (        forth.asm):02347                 IFNE    RELFEAT
F08C BDEAE1           (        forth.asm):02348                 RFXT    jsr,MONITOR+10  XT for MONITOR. All : words are candidates
                      (        forth.asm):02349         *                               for integrity check by ICHECK.
                      (        forth.asm):02350                 ENDC
F08F 7EE0FE           (        forth.asm):02351 (3)             jmp     INTRPRA
                      (        forth.asm):02352         
F092 C7               (        forth.asm):02353         RECURSE fcb     $C7             FORTH-83
F093 52454355525345   (        forth.asm):02354                 fcc     'RECURSE'
F09A F056             (        forth.asm):02355                 fdb     COMPR
F09C C7               (        forth.asm):02356                 RFCS
F09D 9E0E             (        forth.asm):02357 (4)             ldx     RECADDR         Set up by LOCWRT
F09F AF62             (        forth.asm):02358 (5+1)           stx     2,s             Set as action component
F0A1 39               (        forth.asm):02359 (4)             rts
                      (        forth.asm):02360         
F0A2 06               (        forth.asm):02361         FORGET  fcb     6               79-STANDARD (REQ196)
F0A3 464F52474554     (        forth.asm):02362                 fcc     'FORGET'
F0A9 F092             (        forth.asm):02363                 fdb     RECURSE
F0AB C7               (        forth.asm):02364                 RFCS
F0AC BDE6EA           (        forth.asm):02365 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
F0AF 6D84             (        forth.asm):02366 (5+0)           tst     ,x              EOL?
F0B1 2605             (        forth.asm):02367 (3)             bne     @frgt2          No
F0B3 C605             (        forth.asm):02368 (2)     @frgt1  ldb     #5              Missing word name
F0B5 BDE5EC           (        forth.asm):02369 (7)             jsr     ERRHDLR         No return
F0B8 BDE27D           (        forth.asm):02370 (7)     @frgt2  jsr     SCNSTOK
F0BB 27F6             (        forth.asm):02371 (3)             beq     @frgt1          EOL before a non-SP character could be acquired
F0BD BDE358           (        forth.asm):02372 (7)             jsr     SWDIC           SWDIC uses TOKENSP as input--not X!!
F0C0 2607             (        forth.asm):02373 (3)             bne     @frgt3          Word found. XT returned in Y
F0C2 9E02             (        forth.asm):02374 (4)             ldx     TOKENSP
F0C4 C602             (        forth.asm):02375 (2)             ldb     #2              Undefined (X points to the offending word)
F0C6 BDE5EC           (        forth.asm):02376 (7)             jsr     ERRHDLR         No return
F0C9 1F21             (        forth.asm):02377 (4)     @frgt3  tfr     y,x             Y and X have the word's XT
F0CB 108C0C15         (        forth.asm):02378 (4)             cmpy    #RAMFTCH
F0CF 271B             (        forth.asm):02379 (3)             beq     @frgt4
F0D1 108CE000         (        forth.asm):02380 (4)             cmpy    #ROMSTRT
F0D5 2415             (        forth.asm):02381 (3)             bhs     @frgt4
                      (        forth.asm):02382                 IFNE    RELFEAT
F0D7 AE1D             (        forth.asm):02383 (5+1)           ldx     -3,x            Backlink to X
F0D9 9F06             (        forth.asm):02384 (4)             stx     LSTWAD          Update LAST
F0DB 303C             (        forth.asm):02385 (4+1)           leax    -4,y            XT-4 to X (1B/attr, 2B/backlink, 1B/checksum)
                      (        forth.asm):02386                 ELSE
                      (        forth.asm):02387                 ldx     -2,x            Backlink to X
                      (        forth.asm):02388                 stx     LSTWAD          Update LAST
                      (        forth.asm):02389                 leax    -3,y            XT-3 to X (1B/attr, 2B/backlink)
                      (        forth.asm):02390                 ENDC
F0DD 4F               (        forth.asm):02391 (1)             clra
F0DE D62D             (        forth.asm):02392 (3)             ldb     CURTOKL         Token name length to D
F0E0 103201           (        forth.asm):02393 (4)             subr    d,x             Substract word length
F0E3 9F08             (        forth.asm):02394 (4)             stx     DICEND          Update HERE
F0E5 DC02             (        forth.asm):02395 (4)             ldd     TOKENSP         Set by SWDIC to point to the end of the token
F0E7 9322             (        forth.asm):02396 (4)             subd    BSBFADR
F0E9 DD1C             (        forth.asm):02397 (4)             std     UTOIN           Derive >IN from TOKENSP
F0EB 39               (        forth.asm):02398 (4)             rts
F0EC C60B             (        forth.asm):02399 (2)     @frgt4  ldb     #11             Word is unforgettable
F0EE BDE5EC           (        forth.asm):02400 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02401         
F0F1 07               (        forth.asm):02402         EXCT    fcb     7               79-STANDARD (REQ163)
F0F2 45584543555445   (        forth.asm):02403                 fcc     'EXECUTE'
F0F9 F0A2             (        forth.asm):02404                 fdb     FORGET
F0FB C7               (        forth.asm):02405                 RFCS
F0FC BDE671           (        forth.asm):02406 (7)             jsr     NPOP
F0FF 1037C1           (        forth.asm):02407 (4)             cmpr    0,x             Although the standard does not specify that
F102 2702             (        forth.asm):02408 (3)             beq     @exct1          a NUL address should trigger an error, I do
F104 1F15             (        forth.asm):02409 (4)             tfr     x,pc
F106 C60D             (        forth.asm):02410 (2)     @exct1  ldb     #13             Illegal argument
F108 BDE5EC           (        forth.asm):02411 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02412         
F10B 03               (        forth.asm):02413         BYE     fcb     3               Non-standard
F10C 425945           (        forth.asm):02414                 fcc     'BYE'
F10F F0F1             (        forth.asm):02415                 fdb     EXCT
F111 C7               (        forth.asm):02416                 RFCS
F112 7EE036           (        forth.asm):02417 (3)             jmp     RSTHDL
                      (        forth.asm):02418         
F115 C6               (        forth.asm):02419         BKCHAR  fcb     $C6             ANSI (Core)
F116 5B434841525D     (        forth.asm):02420                 fcc     '[CHAR]'
F11C F10B             (        forth.asm):02421                 fdb     BYE
F11E C7               (        forth.asm):02422                 RFCS
F11F 8D0B             (        forth.asm):02423                 RFXT    bsr,CHAR+7      XT for CHAR
F121 7EEA4E           (        forth.asm):02424                 RFXT    jmp,LITERAL+10  XT for LITERAL
                      (        forth.asm):02425         
F124 04               (        forth.asm):02426         CHAR    fcb     4               ANSI (Core)
F125 43484152         (        forth.asm):02427                 fcc     'CHAR'
F129 F115             (        forth.asm):02428                 fdb     BKCHAR
F12B C7               (        forth.asm):02429                 RFCS
F12C BDE6EA           (        forth.asm):02430 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
F12F BDE27D           (        forth.asm):02431 (7)     @char1  jsr     SCNSTOK         X points to the beginning of the character
F132 2714             (        forth.asm):02432 (3)             beq     @chrerr
F134 E684             (        forth.asm):02433 (4+0)           ldb     ,x
F136 4F               (        forth.asm):02434 (1)             clra
F137 1F01             (        forth.asm):02435 (4)             tfr     d,x
F139 BDE663           (        forth.asm):02436 (7)             jsr     NPUSH
F13C 9E02             (        forth.asm):02437 (4)             ldx     TOKENSP         Set by SCNSTOK
F13E BDE28B           (        forth.asm):02438 (7)             jsr     SCNETOK
F141 1F10             (        forth.asm):02439 (4)             tfr     x,d             TOKENEP
F143 9322             (        forth.asm):02440 (4)             subd    BSBFADR
F145 DD1C             (        forth.asm):02441 (4)             std     UTOIN           Derive >IN from TOKENEP
F147 39               (        forth.asm):02442 (4)             rts
F148 C60D             (        forth.asm):02443 (2)     @chrerr ldb     #13             Illegal argument
F14A BDE5EC           (        forth.asm):02444 (7)             jsr     ERRHDLR
                      (        forth.asm):02445         * No return.
                      (        forth.asm):02446         
                      (        forth.asm):02447         * Hairy code but working.
F14D 04               (        forth.asm):02448         WORD    fcb     4               79-STANDARD (REQ181)
F14E 574F5244         (        forth.asm):02449                 fcc     'WORD'          ( char -- addr )
F152 F124             (        forth.asm):02450                 fdb     CHAR
F154 C7               (        forth.asm):02451                 RFCS
F155 BDE671           (        forth.asm):02452 (7)             jsr     NPOP
F158 1F16             (        forth.asm):02453 (4)             tfr     x,w             F has the delimiter ASCII code
F15A 109E08           (        forth.asm):02454 (5)             ldy     DICEND          The counted string returned is stored at HERE
F15D 3420             (        forth.asm):02455 (4+2)           pshs    y
F15F 6FA0             (        forth.asm):02456 (6+1)           clr     ,y+             Initialize its length
F161 BDE6EA           (        forth.asm):02457 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
F164 6D84             (        forth.asm):02458 (5+0)           tst     ,x              EOL reached?
F166 2605             (        forth.asm):02459 (3)             bne     @word1          No, proceed
F168 3510             (        forth.asm):02460 (4+2)   @word0  puls    x
F16A 3610             (        forth.asm):02461                 UCNPUSH                 Push back HERE
F16C 39               (        forth.asm):02462 (4)             rts
F16D BDE27D           (        forth.asm):02463 (7)     @word1  jsr     SCNSTOK         Scan for the next non-space character
F170 2718             (        forth.asm):02464 (3)             beq     @word5          EOL reached, this is the end
F172 A680             (        forth.asm):02465 (4+1)           lda     ,x+             First non-space character
F174 1037F8           (        forth.asm):02466 (4)             cmpr    f,a             Leading delimiter matched?
F177 2602             (        forth.asm):02467 (3)             bne     @word3          No
F179 A680             (        forth.asm):02468 (4+1)   @word2  lda     ,x+             Acquire next character from the input stream
F17B A7A0             (        forth.asm):02469 (4+1)   @word3  sta     ,y+
F17D 2709             (        forth.asm):02470 (3)             beq     @word4          EOL reached
F17F 1037F8           (        forth.asm):02471 (4)             cmpr    f,a             Trailing delimiter?
F182 2706             (        forth.asm):02472 (3)             beq     @word5
F184 6CF4             (        forth.asm):02473 (6+3)           inc     [,s]            Increment string length
F186 20F1             (        forth.asm):02474 (3)             bra     @word2
F188 301F             (        forth.asm):02475 (4+1)   @word4  leax    -1,x            EOL reached
F18A 1F10             (        forth.asm):02476 (4)     @word5  tfr     x,d             Pointing one char after the delimiter or to NUL
F18C 9322             (        forth.asm):02477 (4)             subd    BSBFADR
F18E DD1C             (        forth.asm):02478 (4)             std     UTOIN
F190 20D6             (        forth.asm):02479 (3)             bra     @word0
                      (        forth.asm):02480         
F192 81               (        forth.asm):02481         LPAR    fcb     $81             79-STANDARD (REQ122)
F193 28               (        forth.asm):02482                 fcc     '('
F194 F14D             (        forth.asm):02483                 fdb     WORD
F196 C7               (        forth.asm):02484                 RFCS
F197 BDE6EA           (        forth.asm):02485 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
F19A A680             (        forth.asm):02486 (4+1)   @lpar1  lda     ,x+
F19C 270B             (        forth.asm):02487 (3)             beq     @lparx          Input stream exhausted before ) is matched
F19E 8129             (        forth.asm):02488 (2)             cmpa    #')
F1A0 26F8             (        forth.asm):02489 (3)             bne     @lpar1
F1A2 1F10             (        forth.asm):02490 (4)             tfr     x,d             Just matched )
F1A4 9322             (        forth.asm):02491 (4)             subd    BSBFADR
F1A6 DD1C             (        forth.asm):02492 (4)             std     UTOIN           Update >IN
F1A8 39               (        forth.asm):02493 (4)             rts
F1A9 C60C             (        forth.asm):02494 (2)     @lparx  ldb     #12             Missing delimiter
F1AB BDE5EC           (        forth.asm):02495 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02496         
F1AE 06               (        forth.asm):02497         SOURCE  fcb     6               ANSI (Core)
F1AF 534F55524345     (        forth.asm):02498                 fcc     'SOURCE'        ( -- baseaddr charcount )
F1B5 F192             (        forth.asm):02499                 fdb     LPAR
F1B7 C7               (        forth.asm):02500                 RFCS
F1B8 9E22             (        forth.asm):02501 (4)             ldx     BSBFADR
F1BA BDE663           (        forth.asm):02502 (7)             jsr     NPUSH
F1BD 8E0400           (        forth.asm):02503 (3)             ldx     #BLKSIZ         Non-zero block size
F1C0 DC1E             (        forth.asm):02504 (4)             ldd     UBLK
F1C2 2605             (        forth.asm):02505 (3)             bne     @srcdon         Current BLK is NZ
F1C4 4F               (        forth.asm):02506 (1)             clra
F1C5 D624             (        forth.asm):02507 (3)             ldb     CMDLNSZ         Character count entered through GETS in INTERP
F1C7 1F01             (        forth.asm):02508 (4)             tfr     d,x
F1C9 7EE663           (        forth.asm):02509 (3)     @srcdon jmp     NPUSH
                      (        forth.asm):02510         
                      (        forth.asm):02511         * This is a straightforward implementation borrowed from GNU Forth 'see \':
                      (        forth.asm):02512         * : \  
                      (        forth.asm):02513         *   BLK @ 
                      (        forth.asm):02514         *   IF     >IN @ C/L / 1+ C/L * >IN ! EXIT 
                      (        forth.asm):02515         *   THEN 
                      (        forth.asm):02516         *   SOURCE >IN ! DROP ; IMMEDIATE
                      (        forth.asm):02517         * However since C/L (number of columns per line) is 64 (a power of 2), things
                      (        forth.asm):02518         * can be coded in a more compact manner as: >IN @ 63 COM AND 64 + >IN !
F1CC 81               (        forth.asm):02519         BKSLSH  fcb     $81             ANSI (Block Ext)
F1CD 5C               (        forth.asm):02520                 fcb     $5C             \ ( -- )
F1CE F1AE             (        forth.asm):02521                 fdb     SOURCE
F1D0 C7               (        forth.asm):02522                 RFCS
F1D1 DC1E             (        forth.asm):02523 (4)             ldd     UBLK            BLK @ to D
F1D3 270B             (        forth.asm):02524 (3)             beq     @comser         We operate from block 0: the console
F1D5 DC1C             (        forth.asm):02525 (4)             ldd     UTOIN           >IN @
F1D7 C4C0             (        forth.asm):02526 (2)             andb    #^$3F           Point to the beginning of the line
F1D9 CB40             (        forth.asm):02527 (2)             addb    #$40            next line
F1DB 8900             (        forth.asm):02528 (2)             adca    #0              Propagate potential carry from LSB
F1DD DD1C             (        forth.asm):02529 (4)             std     UTOIN           >IN !
F1DF 39               (        forth.asm):02530 (4)             rts                     EXIT
F1E0 8DD6             (        forth.asm):02531         @comser RFXT    bsr,SOURCE+9    XT for SOURCE
F1E2 BDE671           (        forth.asm):02532 (7)             jsr     NPOP
F1E5 9F1C             (        forth.asm):02533 (4)             stx     UTOIN           >IN !
F1E7 7EFBA4           (        forth.asm):02534                 RFXT    jmp,DROP+7      XT for DROP
                      (        forth.asm):02535                 ENDC
                      (        forth.asm):02536         
F1EA 82               (        forth.asm):02537         PSTR    fcb     $82             79-STANDARD (REQ133)
F1EB 2E22             (        forth.asm):02538                 fcc     '."'
F1ED F1CC             (        forth.asm):02539                 fdb     BKSLSH
F1EF C7               (        forth.asm):02540                 RFCS
F1F0 BDE6EA           (        forth.asm):02541 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
F1F3 6D80             (        forth.asm):02542 (5+1)           tst     ,x+
F1F5 270C             (        forth.asm):02543 (3)             beq     @pstr2          Met the end of the input stream before "
F1F7 9F02             (        forth.asm):02544 (4)             stx     TOKENSP         Beginning of string address
F1F9 A680             (        forth.asm):02545 (4+1)   @pstr1  lda     ,x+
F1FB 2706             (        forth.asm):02546 (3)             beq     @pstr2
F1FD 8122             (        forth.asm):02547 (2)             cmpa    #'"
F1FF 2707             (        forth.asm):02548 (3)             beq     @pstr3
F201 20F6             (        forth.asm):02549 (3)             bra     @pstr1
F203 C60C             (        forth.asm):02550 (2)     @pstr2  ldb     #12             Missing delimiter
F205 BDE5EC           (        forth.asm):02551 (7)             jsr     ERRHDLR         No return
F208 9F04             (        forth.asm):02552 (4)     @pstr3  stx     TOKENEP         X points to the character following "
F20A 6F1F             (        forth.asm):02553 (6+1)           clr     -1,x            Overwrite the trailing " with NUL
F20C 1F10             (        forth.asm):02554 (4)             tfr     x,d
F20E 9322             (        forth.asm):02555 (4)             subd    BSBFADR
F210 DD1C             (        forth.asm):02556 (4)             std     UTOIN           Derive >IN from TOKENEP
F212 0D1B             (        forth.asm):02557 (4)             tst     USTATE+1
F214 260E             (        forth.asm):02558 (3)             bne     PSTRCMP
F216 1F12             (        forth.asm):02559 (4)             tfr     x,y             Y has TOKENEP
F218 9E02             (        forth.asm):02560 (4)             ldx     TOKENSP
F21A BDE1D8           (        forth.asm):02561 (7)             jsr     PUTS
F21D 1F21             (        forth.asm):02562 (4)             tfr     y,x
F21F 8622             (        forth.asm):02563 (2)     @pstr4  lda     #'"
F221 A71F             (        forth.asm):02564 (4+1)           sta     -1,x            Restore the trailing "
F223 39               (        forth.asm):02565 (4)             rts
F224 109E08           (        forth.asm):02566 (5)     PSTRCMP ldy     DICEND          We are compiling
F227 868E             (        forth.asm):02567 (2)             lda     #LDXOPC         LDX immediate
F229 A7A0             (        forth.asm):02568 (4+1)           sta     ,y+
F22B 3025             (        forth.asm):02569 (4+1)           leax    5,y
F22D AFA1             (        forth.asm):02570 (5+2)           stx     ,y++
F22F 867E             (        forth.asm):02571 (2)             lda     #JMPOPC         JMP extended
F231 A7A0             (        forth.asm):02572 (4+1)           sta     ,y+
F233 3420             (        forth.asm):02573 (4+2)           pshs    y               Jump address beyond the string
F235 3122             (        forth.asm):02574 (4+1)           leay    2,y
F237 9E02             (        forth.asm):02575 (4)             ldx     TOKENSP
F239 DC04             (        forth.asm):02576 (4)             ldd     TOKENEP
F23B 103210           (        forth.asm):02577 (4)             subr    x,d
F23E 1F06             (        forth.asm):02578 (4)             tfr     d,w
F240 113812           (        forth.asm):02579 (6+?)           tfm     x+,y+
F243 109F08           (        forth.asm):02580 (5)             sty     DICEND
F246 3510             (        forth.asm):02581 (4+2)           puls    x
F248 10AF84           (        forth.asm):02582 (6+0)           sty     ,x              Install JMP address
F24B 8EE1D8           (        forth.asm):02583 (3)             ldx     #PUTS
F24E AF62             (        forth.asm):02584 (5+1)           stx     2,s             Set as action component
F250 9E04             (        forth.asm):02585 (4)             ldx     TOKENEP
F252 20CB             (        forth.asm):02586 (3)             bra     @pstr4
                      (        forth.asm):02587         
                      (        forth.asm):02588         * Transactional behaviour is guaranteed here. What this means is that the
                      (        forth.asm):02589         * operation will preserve the data stack contents, should insufficient
                      (        forth.asm):02590         * parameters be supplied. It is a very desirable feature (for debugging
                      (        forth.asm):02591         * purposes) which will be generalized to a number of other words. As an
                      (        forth.asm):02592         * aside, it also allows us to access the data stack as directly indexed
                      (        forth.asm):02593         * through the 6309 U register, resulting in better performance.
F254 02               (        forth.asm):02594         DPLUS   fcb     2               79-STANDARD (REQ241)
F255 442B             (        forth.asm):02595                 fcc     'D+'            ( d2 d1 -- d1+d2--signed )
F257 F1EA             (        forth.asm):02596                 fdb     PSTR            Initially ( L2 H2 L1 H1)
F259 C7               (        forth.asm):02597                 RFCS
F25A CC023EBDE304     (        forth.asm):02598                 MINDREQ 4               Make sure we have at least 4 cells stacked up
                      (        forth.asm):02599         * At this point sufficient stack depth has been assessed. Let's rock and roll!
F260 BDFC22           (        forth.asm):02600         @stkok  RFXT    jsr,ROT+6       XT for ROT ( L2 L1 H1 H2 )
F263 EC44             (        forth.asm):02601 (5+1)           ldd     4,u             L1
F265 E346             (        forth.asm):02602 (5+1)           addd    6,u             L2
F267 ED46             (        forth.asm):02603 (5+1)           std     6,u             d1+d2 least significant cell
F269 EC42             (        forth.asm):02604 (5+1)           ldd     2,u             H1
F26B 10890000         (        forth.asm):02605 (4)             adcd    #0              Carry from least significant cell addition
F26F E3C4             (        forth.asm):02606 (5+0)           addd    ,u              H2
F271 ED44             (        forth.asm):02607 (5+1)           std     4,u             d1+d2 most significant cell
F273 3344             (        forth.asm):02608 (4+1)           leau    4,u             Drop 2 cells from the data stack
F275 39               (        forth.asm):02609 (4)             rts
                      (        forth.asm):02610         
F276 07               (        forth.asm):02611         DNEG    fcb     7               79-STANDARD (REQ245)
F277 444E4547415445   (        forth.asm):02612                 fcc     'DNEGATE'
F27E F254             (        forth.asm):02613                 fdb     DPLUS
F280 C7               (        forth.asm):02614                 RFCS
F281 CC0242BDE304     (        forth.asm):02615                 MINDREQ 2               We need at least 2 cells stacked up
F287 10A642           (        forth.asm):02616 (6+1)           ldw     2,u             Least significant cell
F28A 1053             (        forth.asm):02617 (2)             comw
F28C ECC4             (        forth.asm):02618 (5+0)           ldd     ,u              Most significant cell
F28E 1043             (        forth.asm):02619 (2)             comd
F290 108B0001         (        forth.asm):02620 (4)             addw    #1
F294 10890000         (        forth.asm):02621 (4)             adcd    #0              Propagate carry flag
F298 10EDC4           (        forth.asm):02622 (8+0)           stq     ,u              Store the result back to the data stack
F29B 39               (        forth.asm):02623 (4)             rts
                      (        forth.asm):02624         
F29C 03               (        forth.asm):02625         DZEQ    fcb     3               79-STANDARD (double number extension)
F29D 44303D           (        forth.asm):02626                 fcc     'D0='           ( d -- flag )
F2A0 F276             (        forth.asm):02627                 fdb     DNEG
F2A2 C7               (        forth.asm):02628                 RFCS
F2A3 BDECEA           (        forth.asm):02629                 RFXT    jsr,OR+5        XT for OR
F2A6 7EED6A           (        forth.asm):02630                 RFXT    jmp,NULP+5      XT for 0=
                      (        forth.asm):02631         
                      (        forth.asm):02632         * In essence:
                      (        forth.asm):02633         * : D< DNEGATE D+ NIP [ HEX ] 8000 AND IF 1 ELSE 0 THEN ;
F2A9 02               (        forth.asm):02634         DLESS   fcb     2               79-STANDARD (REQ244)
F2AA 443C             (        forth.asm):02635                 fcc     'D<'            ( d1 d2 -- flag )
F2AC F29C             (        forth.asm):02636                 fdb     DZEQ
F2AE C7               (        forth.asm):02637                 RFCS
F2AF 8DD0             (        forth.asm):02638                 RFXT    bsr,DNEG+10     XT for DNEGATE
F2B1 8DA7             (        forth.asm):02639                 RFXT    bsr,DPLUS+5     XT for D+
F2B3 4F               (        forth.asm):02640 (1)             clra
F2B4 A742             (        forth.asm):02641 (4+1)           sta     2,u
F2B6 E6C4             (        forth.asm):02642 (4+0)           ldb     ,u
F2B8 2D05             (        forth.asm):02643 (3)             blt     @setto1
F2BA A743             (        forth.asm):02644 (4+1)   @setrv  sta     3,u
F2BC 3342             (        forth.asm):02645 (4+1)           leau    2,u
F2BE 39               (        forth.asm):02646 (4)             rts
F2BF 4C               (        forth.asm):02647 (1)     @setto1 inca
F2C0 20F8             (        forth.asm):02648 (3)             bra     @setrv
                      (        forth.asm):02649         
F2C2 05               (        forth.asm):02650         TWOOVER fcb     5               79-STANDARD (double number extension)
F2C3 324F564552       (        forth.asm):02651                 fcc     '2OVER'         ( d1 d2 -- d1 d2 d1 )
F2C8 F2A9             (        forth.asm):02652                 fdb     DLESS
F2CA C7               (        forth.asm):02653                 RFCS
F2CB CC023EBDE304     (        forth.asm):02654                 MINDREQ 4
F2D1 10EC44           (        forth.asm):02655 (8+1)           ldq     4,u             D:W has MSC:LSC of D1
F2D4 1F61             (        forth.asm):02656 (4)             tfr     w,x
F2D6 BDE663           (        forth.asm):02657 (7)             jsr     NPUSH
F2D9 1F01             (        forth.asm):02658 (4)             tfr     d,x
F2DB 7EE663           (        forth.asm):02659 (3)             jmp     NPUSH
                      (        forth.asm):02660         
F2DE 05               (        forth.asm):02661         TWOSWAP fcb     5               79-STANDARD (double number extension)
F2DF 3253574150       (        forth.asm):02662                 fcc     '2SWAP'         ( d1 d2 -- d2 d1 )
F2E4 F2C2             (        forth.asm):02663                 fdb     TWOOVER
F2E6 C7               (        forth.asm):02664                 RFCS
F2E7 CC023EBDE304     (        forth.asm):02665                 MINDREQ 4               At least four cells must be stacked up
F2ED AE44             (        forth.asm):02666 (5+1)           ldx     4,u             D1 most significant cell
F2EF 10AE46           (        forth.asm):02667 (6+1)           ldy     6,u             D1 least significant cell
F2F2 10ECC4           (        forth.asm):02668 (8+0)           ldq     ,u              D:W has MSC:LSC of D2
F2F5 10ED44           (        forth.asm):02669 (8+1)           stq     4,u
F2F8 AFC4             (        forth.asm):02670 (5+0)           stx     ,u
F2FA 10AF42           (        forth.asm):02671 (6+1)           sty     2,u
F2FD 39               (        forth.asm):02672 (4)             rts
                      (        forth.asm):02673         
F2FE 05               (        forth.asm):02674         TWODROP fcb     5               79-STANDARD (double number extension)
F2FF 3244524F50       (        forth.asm):02675                 fcc     '2DROP'         ( d -- )
F304 F2DE             (        forth.asm):02676                 fdb     TWOSWAP
F306 C7               (        forth.asm):02677                 RFCS
F307 CC0242BDE304     (        forth.asm):02678                 MINDREQ 2               At least two cells must be stacked up
F30D 3344             (        forth.asm):02679 (4+1)           leau    4,u
F30F 39               (        forth.asm):02680 (4)             rts
                      (        forth.asm):02681         
F310 04               (        forth.asm):02682         TWODUP  fcb     4               79-STANDARD (double number extension)
F311 32445550         (        forth.asm):02683                 fcc     '2DUP'          ( double -- double double )
F315 F2FE             (        forth.asm):02684                 fdb     TWODROP
F317 C7               (        forth.asm):02685                 RFCS
F318 CC0242BDE304     (        forth.asm):02686                 MINDREQ 2
F31E 10ECC4           (        forth.asm):02687 (8+0)           ldq     ,u              D:W has MSC:LSC of DOUBLE
F321 1F61             (        forth.asm):02688 (4)             tfr     w,x
F323 BDE663           (        forth.asm):02689 (7)             jsr     NPUSH
F326 1F01             (        forth.asm):02690 (4)             tfr     d,x
F328 7EE663           (        forth.asm):02691 (3)             jmp     NPUSH
                      (        forth.asm):02692         
F32B 02               (        forth.asm):02693         TWOSTOR fcb     2               79-STANDARD (double number extension)
F32C 3221             (        forth.asm):02694                 fcc     '2!'            ( double addr -- )
F32E F310             (        forth.asm):02695                 fdb     TWODUP
F330 C7               (        forth.asm):02696                 RFCS
F331 CC0240BDE304     (        forth.asm):02697                 MINDREQ 3
F337 10EC42           (        forth.asm):02698 (8+1)           ldq     2,u             DOUBLE to D:W
F33A 10EDD4           (        forth.asm):02699 (8+3)           stq     [,u]            Store DOUBLE to ADDR
F33D 3346             (        forth.asm):02700 (4+1)           leau    6,u             Drop three cells from the user stack
F33F 39               (        forth.asm):02701 (4)             rts
                      (        forth.asm):02702         
F340 02               (        forth.asm):02703         TWOFTCH fcb     2               79-STANDARD (double number extension)
F341 3240             (        forth.asm):02704                 fcc     '2@'            ( dbladdr -- double )
F343 F32B             (        forth.asm):02705                 fdb     TWOSTOR
F345 C7               (        forth.asm):02706                 RFCS
F346 CC0244BDE304     (        forth.asm):02707                 MINDREQ 1
F34C 10ECD4           (        forth.asm):02708 (8+3)           ldq     [,u]            D:W has MSC:LSC of DBLADDR @
F34F 10A7C4           (        forth.asm):02709 (6+0)           stw     ,u              Least significant cell stacked in place
F352 1F01             (        forth.asm):02710 (4)             tfr     d,x             Most significant cell goes through standard push
F354 7EE663           (        forth.asm):02711 (3)             jmp     NPUSH
                      (        forth.asm):02712         
F357 07               (        forth.asm):02713         CONVERT fcb     7               79-STANDARD (REQ195)
F358 434F4E56455254   (        forth.asm):02714                 fcc     'CONVERT'       ( d1 addr1 -- d2 addr2 )
F35F F340             (        forth.asm):02715                 fdb     TWOFTCH
F361 C7               (        forth.asm):02716                 RFCS
F362 CC0240BDE304     (        forth.asm):02717                 MINDREQ 3               At least 3 cells need to be stacked up on entry
F368 BDE29D           (        forth.asm):02718 (7)             jsr     CKBASE          Check for supported BASE. No return if not
F36B AEC4             (        forth.asm):02719 (5+0)           ldx     ,u              ADDR1 to X
F36D 3001             (        forth.asm):02720 (4+1)   @cvloop leax    1,x
F36F E684             (        forth.asm):02721 (4+0)           ldb     ,x
                      (        forth.asm):02722         * B has the ASCII representation of something that may or may not be a valid
                      (        forth.asm):02723         * digit, expressed in BASE (alias (byte)UBASE+1). If it does, multiply D1 by
                      (        forth.asm):02724         * BASE and add that to D1 (aka D2 on exit). Then add DIGIT on the top of it.
F371 C030             (        forth.asm):02725 (2)             subb    #'0             Minimal ASCII value condition met?
F373 255B             (        forth.asm):02726 (3)             blo     @cvoor          No. Out of range. ,X cannot be a valid digit
F375 C10A             (        forth.asm):02727 (2)             cmpb    #10
F377 2510             (        forth.asm):02728 (3)             blo     @cvnolt         No letter in potential BASE
                      (        forth.asm):02729                 IFEQ    CSSNTVE
F379 C111             (        forth.asm):02730 (2)             cmpb    #'A-'0
F37B 2553             (        forth.asm):02731 (3)             blo     @cvoor          Greater than 9 but lower than A
F37D C131             (        forth.asm):02732 (2)             cmpb    #'a-'0
F37F 2506             (        forth.asm):02733 (3)             blo     @cvisuc         Upper case already
F381 C14A             (        forth.asm):02734 (2)             cmpb    #'z-'0
F383 224B             (        forth.asm):02735 (3)             bhi     @cvoor          Definitely out of range
F385 C020             (        forth.asm):02736 (2)             subb    #'a-'A          To upper case
                      (        forth.asm):02737                 ENDC
F387 C007             (        forth.asm):02738 (2)     @cvisuc subb    #'A-':          A-Z to number
F389 D119             (        forth.asm):02739 (3)     @cvnolt cmpb    UBASE+1         B has a digit. Make sure it's less than BASE
F38B 2443             (        forth.asm):02740 (3)             bhs     @cvoor          Number under scrutiny is >= BASE
F38D 3278             (        forth.asm):02741 (4+1)           leas    -8,s            Allocate scratch space
F38F 4F               (        forth.asm):02742 (1)             clra
F390 3406             (        forth.asm):02743 (4+2)           pshs    d
                      (        forth.asm):02744         * System and user stack structures are as follows:
                      (        forth.asm):02745         * ,s    current digit (1 cell)
                      (        forth.asm):02746         * 2,s   D0*B (1 cell)
                      (        forth.asm):02747         * 4,s   D1*B (1 cell)
                      (        forth.asm):02748         * 6,s   D2*B (1 cell)
                      (        forth.asm):02749         * 8,s   D3*B (1 cell)
                      (        forth.asm):02750         * 2,u   D1H most significant cell
                      (        forth.asm):02751         * 4,u   D1L least significant cell
F392 1F37             (        forth.asm):02752 (4)             tfr     u,v             Backup U
F394 3346             (        forth.asm):02753 (4+1)           leau    6,u             Point one byte after D1LL
F396 3162             (        forth.asm):02754 (4+1)           leay    2,s             Point to D0*B
F398 118604           (        forth.asm):02755 (3)             lde     #4              Four products to go through
F39B A6C2             (        forth.asm):02756 (4+1)   @cvmul  lda     ,-u
F39D D619             (        forth.asm):02757 (3)             ldb     UBASE+1
F39F 3D               (        forth.asm):02758 (10)            mul
F3A0 EDA1             (        forth.asm):02759 (5+2)           std     ,y++
F3A2 114A             (        forth.asm):02760 (2)             dece
F3A4 26F5             (        forth.asm):02761 (3)             bne     @cvmul
F3A6 1F73             (        forth.asm):02762 (4)             tfr     v,u             Restore U
F3A8 A663             (        forth.asm):02763 (4+1)           lda     3,s
F3AA A745             (        forth.asm):02764 (4+1)           sta     5,u             D1LL
F3AC A662             (        forth.asm):02765 (4+1)           lda     2,s
F3AE AB65             (        forth.asm):02766 (4+1)           adda    5,s
F3B0 A744             (        forth.asm):02767 (4+1)           sta     4,u             D1LH
F3B2 A664             (        forth.asm):02768 (4+1)           lda     4,s
F3B4 A967             (        forth.asm):02769 (4+1)           adca    7,s
F3B6 A743             (        forth.asm):02770 (4+1)           sta     3,u             D1HL
F3B8 A666             (        forth.asm):02771 (4+1)           lda     6,s
F3BA A969             (        forth.asm):02772 (4+1)           adca    9,s
F3BC A742             (        forth.asm):02773 (4+1)           sta     2,u             D1HH
F3BE EC44             (        forth.asm):02774 (5+1)           ldd     4,u             D1L
F3C0 E3E4             (        forth.asm):02775 (5+0)           addd    ,s              DIGIT
F3C2 ED44             (        forth.asm):02776 (5+1)           std     4,u
F3C4 EC42             (        forth.asm):02777 (5+1)           ldd     2,u             D1H
F3C6 10890000         (        forth.asm):02778 (4)             adcd    #0              Potential carry from lower cell
F3CA ED42             (        forth.asm):02779 (5+1)           std     2,u
F3CC 326A             (        forth.asm):02780 (4+1)           leas    10,s            Release scratch space
F3CE 209D             (        forth.asm):02781 (3)             bra     @cvloop         Here we go again
F3D0 AFC4             (        forth.asm):02782 (5+0)   @cvoor  stx     ,u              Update ADDR2
F3D2 39               (        forth.asm):02783 (4)             rts
                      (        forth.asm):02784         
F3D3 02               (        forth.asm):02785         CVTE    fcb     2
F3D4 233E             (        forth.asm):02786                 fcc     '#>'
F3D6 F357             (        forth.asm):02787                 fdb     CONVERT
F3D8 C7               (        forth.asm):02788                 RFCS
F3D9 BDE671           (        forth.asm):02789 (7)             jsr     NPOP
F3DC BDE671           (        forth.asm):02790 (7)             jsr     NPOP            Drop 2 cells from the data stack
F3DF 8E0134           (        forth.asm):02791 (3)             ldx     #PADBUF
F3E2 3610             (        forth.asm):02792                 UCNPUSH
F3E4 BDE1A5           (        forth.asm):02793 (7)             jsr     SLEN
F3E7 1F61             (        forth.asm):02794 (4)             tfr     w,x
F3E9 3610             (        forth.asm):02795                 UCNPUSH
F3EB 39               (        forth.asm):02796 (4)             rts
                      (        forth.asm):02797         
F3EC 04               (        forth.asm):02798         SIGN    fcb     4
F3ED 5349474E         (        forth.asm):02799                 fcc     'SIGN'
F3F1 F3D3             (        forth.asm):02800                 fdb     CVTE
F3F3 C7               (        forth.asm):02801                 RFCS
F3F4 BDE671           (        forth.asm):02802 (7)             jsr     NPOP
F3F7 1F10             (        forth.asm):02803 (4)             tfr     x,d
F3F9 104D             (        forth.asm):02804 (2)             tstd
F3FB 2C05             (        forth.asm):02805 (3)             bge     @sign1
F3FD C62D             (        forth.asm):02806 (2)             ldb     #'-
F3FF 7EF4BC           (        forth.asm):02807 (3)             jmp     INSBPAD
F402 39               (        forth.asm):02808 (4)     @sign1  rts
                      (        forth.asm):02809         
F403 04               (        forth.asm):02810         HOLD    fcb     4
F404 484F4C44         (        forth.asm):02811                 fcc     'HOLD'
F408 F3EC             (        forth.asm):02812                 fdb     SIGN
F40A C7               (        forth.asm):02813                 RFCS
F40B BDE671           (        forth.asm):02814 (7)             jsr     NPOP
F40E 1F10             (        forth.asm):02815 (4)             tfr     x,d
F410 7EF4BC           (        forth.asm):02816 (3)             jmp     INSBPAD         B is inserted at the beginning of PAD.
                      (        forth.asm):02817         
F413 02               (        forth.asm):02818         SHARPS  fcb     2
F414 2353             (        forth.asm):02819                 fcc     '#S'
F416 F403             (        forth.asm):02820                 fdb     HOLD
F418 C7               (        forth.asm):02821                 RFCS
F419 8601             (        forth.asm):02822 (2)             lda     #1
F41B 972A             (        forth.asm):02823 (3)             sta     CVTFCN          CVT function #1 is #S
F41D 2007             (        forth.asm):02824 (3)             bra     CVT0
                      (        forth.asm):02825         
                      (        forth.asm):02826         * Unsigned double on the top of the data stack gets divided by BASE.
                      (        forth.asm):02827         * The division algorithm implemented here is the binary long division.
                      (        forth.asm):02828         * See https://en.wikipedia.org/wiki/Division_algorithm for more information.
                      (        forth.asm):02829         * Remainder (converted to a character) gets prepended to PAD.
F41F 01               (        forth.asm):02830         CVT     fcb     1
F420 23               (        forth.asm):02831                 fcc     '#'
F421 F413             (        forth.asm):02832                 fdb     SHARPS
F423 C7               (        forth.asm):02833                 RFCS
F424 0F2A             (        forth.asm):02834 (5)             clr     CVTFCN          CVT function 0 is #
F426 BDE671           (        forth.asm):02835 (7)     CVT0    jsr     NPOP
F429 1F16             (        forth.asm):02836 (4)             tfr     x,w
F42B BDE671           (        forth.asm):02837 (7)             jsr     NPOP
F42E 3410             (        forth.asm):02838 (4+2)   CVT1    pshs    x               Numerator least significant cell
F430 1038             (        forth.asm):02839 (6)             pshsw                   Numerator most significant cell
F432 104F             (        forth.asm):02840 (2)             clrd
F434 3406             (        forth.asm):02841 (4+2)           pshs    d               Quotient low
F436 3406             (        forth.asm):02842 (4+2)           pshs    d               Quotient high
F438 3406             (        forth.asm):02843 (4+2)           pshs    d               Bitmask low
F43A 10868000         (        forth.asm):02844 (4)             ldw     #$8000          Bitmask high
F43E 1038             (        forth.asm):02845 (6)             pshsw
F440 3406             (        forth.asm):02846 (4+2)           pshs    d
                      (        forth.asm):02847         * Stack structure:
                      (        forth.asm):02848         * 1,s   remainder               8 bits (high order byte is zero and unused)
                      (        forth.asm):02849         * 2,s   Bitmask high            16 bits
                      (        forth.asm):02850         * 4,s   Bitmask low             16 bits
                      (        forth.asm):02851         * 6,s   Quotient high           16 bits
                      (        forth.asm):02852         * 8,s   Quotient low            16 bits
                      (        forth.asm):02853         * 10,s  Numerator high          16 bits
                      (        forth.asm):02854         * 12,s  Numerator low           16 bits
                      (        forth.asm):02855         * Denominator is at UBASE+1     8 bits
F442 11C61F           (        forth.asm):02856 (3)             ldf     #31             32 bits to go
F445 6861             (        forth.asm):02857 (6+1)   @cvt1   lsl     1,s             R := R << 1
                      (        forth.asm):02858         * We need to extract bit <f> from the numerator.
F447 306A             (        forth.asm):02859 (4+1)           leax    10,s            Numerator MSB address
F449 1FF8             (        forth.asm):02860 (4)             tfr     f,a             Not to alter the stack structure
F44B 44               (        forth.asm):02861 (1)             lsra                    OffsetX: 3 - F >> 3
F44C 44               (        forth.asm):02862 (1)             lsra
F44D 44               (        forth.asm):02863 (1)             lsra
F44E C603             (        forth.asm):02864 (2)             ldb     #3
F450 103289           (        forth.asm):02865 (4)             subr    a,b
F453 3A               (        forth.asm):02866 (1)             abx
F454 A684             (        forth.asm):02867 (4+0)           lda     ,x
F456 1FF9             (        forth.asm):02868 (4)             tfr     f,b             Bitno: F & 7
F458 C407             (        forth.asm):02869 (2)             andb    #7
                      (        forth.asm):02870         * At this point, A has the data we're interested in. B has the bit number.
F45A 5D               (        forth.asm):02871 (1)     @cvtex  tstb
F45B 2704             (        forth.asm):02872 (3)             beq     @cvtfnd         Bit 0 of A has the data
F45D 44               (        forth.asm):02873 (1)             lsra
F45E 5A               (        forth.asm):02874 (1)             decb
F45F 20F9             (        forth.asm):02875 (3)             bra     @cvtex
F461 8401             (        forth.asm):02876 (2)     @cvtfnd anda    #1
F463 AA61             (        forth.asm):02877 (4+1)           ora     1,s             R(0) := N(i)
F465 A761             (        forth.asm):02878 (4+1)           sta     1,s             Update the remainder
F467 9119             (        forth.asm):02879 (3)             cmpa    UBASE+1
F469 2512             (        forth.asm):02880 (3)             blo     @cvt5
F46B 9019             (        forth.asm):02881 (3)             suba    UBASE+1
F46D A761             (        forth.asm):02882 (4+1)           sta     1,s             R := R - D
                      (        forth.asm):02883         * Q(i) := 1 (use the bitmask).
F46F EC66             (        forth.asm):02884 (5+1)           ldd     6,s             Quotient high
F471 10AA62           (        forth.asm):02885 (6+1)           ord     2,s             Bitmask high
F474 ED66             (        forth.asm):02886 (5+1)           std     6,s
F476 EC68             (        forth.asm):02887 (5+1)           ldd     8,s             Quotient low
F478 10AA64           (        forth.asm):02888 (6+1)           ord     4,s             Bitmask low
F47B ED68             (        forth.asm):02889 (5+1)           std     8,s
                      (        forth.asm):02890         * Shift the bitmask 1 bit right.
F47D EC62             (        forth.asm):02891 (5+1)   @cvt5   ldd     2,s
F47F 1044             (        forth.asm):02892 (2)             lsrd
F481 ED62             (        forth.asm):02893 (5+1)           std     2,s
F483 EC64             (        forth.asm):02894 (5+1)           ldd     4,s
F485 1046             (        forth.asm):02895 (2)             rord
F487 ED64             (        forth.asm):02896 (5+1)           std     4,s
F489 115A             (        forth.asm):02897 (2)             decf
F48B 2CB8             (        forth.asm):02898 (3)             bge     @cvt1
                      (        forth.asm):02899         * Convert the remainder to a digit expressed in BASE.
F48D E661             (        forth.asm):02900 (4+1)           ldb     1,s
F48F 8630             (        forth.asm):02901 (2)             lda     #'0
F491 C10A             (        forth.asm):02902 (2)             cmpb    #10             B has the digit we want converted to BASE
F493 2502             (        forth.asm):02903 (3)             bcs     @cvtdgt
F495 8637             (        forth.asm):02904 (2)             lda     #'A-10
F497 103089           (        forth.asm):02905 (4)     @cvtdgt addr    a,b
F49A 8D20             (        forth.asm):02906 (6)             bsr     INSBPAD         Prepend B to the string currently in PAD
F49C 0D2A             (        forth.asm):02907 (4)             tst     CVTFCN
F49E 2711             (        forth.asm):02908 (3)             beq     @cvtend         Function 0 is straight #, i.e. we're done here
                      (        forth.asm):02909         * Function 1 is #S, we iterate unless the quotient is 0.
F4A0 EC68             (        forth.asm):02910 (5+1)           ldd     8,s
F4A2 10AA66           (        forth.asm):02911 (6+1)           ord     6,s
F4A5 270A             (        forth.asm):02912 (3)             beq     @cvtend
F4A7 AE68             (        forth.asm):02913 (5+1)           ldx     8,s             New numerator low
F4A9 10A666           (        forth.asm):02914 (6+1)           ldw     6,s             New numerator high
F4AC 326E             (        forth.asm):02915 (4+1)           leas    14,s            Discard the stack frame
F4AE 7EF42E           (        forth.asm):02916 (3)             jmp     CVT1            And go at it again
                      (        forth.asm):02917         * Push back the quotient on the data stack (low then high cell).
F4B1 AE68             (        forth.asm):02918 (5+1)   @cvtend ldx     8,s
F4B3 3610             (        forth.asm):02919                 UCNPUSH
F4B5 AE66             (        forth.asm):02920 (5+1)           ldx     6,s
F4B7 326E             (        forth.asm):02921 (4+1)           leas    14,s            Discard the stack frame
F4B9 3610             (        forth.asm):02922                 UCNPUSH
F4BB 39               (        forth.asm):02923 (4)             rts
                      (        forth.asm):02924         
                      (        forth.asm):02925         * Insert the character in B in front of the string at PADBUF.
F4BC 8E0134           (        forth.asm):02926 (3)     INSBPAD ldx     #PADBUF
F4BF BDE1A5           (        forth.asm):02927 (7)             jsr     SLEN
F4C2 103061           (        forth.asm):02928 (4)             addr    w,x             X points to the PAD string's NUL terminator
F4C5 105C             (        forth.asm):02929 (2)             incw                    Include the terminator
F4C7 3101             (        forth.asm):02930 (4+1)           leay    1,x
F4C9 113912           (        forth.asm):02931 (6+?)           tfm     x-,y-
F4CC D734             (        forth.asm):02932 (3)             stb     PADBUF
F4CE 39               (        forth.asm):02933 (4)             rts
                      (        forth.asm):02934         
F4CF 02               (        forth.asm):02935         CVTB    fcb     2
F4D0 3C23             (        forth.asm):02936                 fcc     '<#'
F4D2 F41F             (        forth.asm):02937                 fdb     CVT
F4D4 C7               (        forth.asm):02938                 RFCS
F4D5 BDE29D           (        forth.asm):02939 (7)             jsr     CKBASE          Sanity check. BASE can be altered at any time
F4D8 0F34             (        forth.asm):02940 (5)             clr     PADBUF
F4DA 39               (        forth.asm):02941 (4)             rts
                      (        forth.asm):02942         
F4DB 01               (        forth.asm):02943         DOT     fcb     1               79-STANDARD (REQ193)
F4DC 2E               (        forth.asm):02944                 fcc     '.'
F4DD F4CF             (        forth.asm):02945                 fdb     CVTB
F4DF C7               (        forth.asm):02946                 RFCS
F4E0 8601             (        forth.asm):02947 (2)             lda     #1
F4E2 972C             (        forth.asm):02948 (3)             sta     CVISSGN         Force a signed number conversion
F4E4 BDE671           (        forth.asm):02949 (7)     ptop0   jsr     NPOP
F4E7 BDE30F           (        forth.asm):02950 (7)             jsr     CVNSTR
F4EA 8E039A           (        forth.asm):02951 (3)             ldx     #TBUFF
F4ED 8620             (        forth.asm):02952 (2)             lda     #SP
F4EF A180             (        forth.asm):02953 (4+1)   @ptop1  cmpa    ,x+             Skip leading spaces
F4F1 27FC             (        forth.asm):02954 (3)             beq     @ptop1
F4F3 301F             (        forth.asm):02955 (4+1)           leax    -1,x            Point to actual string start address
F4F5 BDE1D8           (        forth.asm):02956 (7)             jsr     PUTS
F4F8 7EE1B4           (        forth.asm):02957 (3)             jmp     PUTCH           Extra space after printing a number
                      (        forth.asm):02958         
F4FB 02               (        forth.asm):02959         UDOT    fcb     2               79-STANDARD (REQ106)
F4FC 552E             (        forth.asm):02960                 fcc     'U.'
F4FE F4DB             (        forth.asm):02961                 fdb     DOT
F500 C7               (        forth.asm):02962                 RFCS
F501 0F2C             (        forth.asm):02963 (5)             clr     CVISSGN         Conversion is unsigned
F503 20DF             (        forth.asm):02964 (3)             bra     ptop0
                      (        forth.asm):02965         
F505 02               (        forth.asm):02966         DOTR    fcb     2               79-STANDARD (REF)
F506 2E52             (        forth.asm):02967                 fcc     '.R'
F508 F4FB             (        forth.asm):02968                 fdb     UDOT
F50A C7               (        forth.asm):02969                 RFCS
F50B 8601             (        forth.asm):02970 (2)             lda     #1
F50D 972C             (        forth.asm):02971 (3)             sta     CVISSGN
F50F BDE671           (        forth.asm):02972 (7)     DOTR0   jsr     NPOP
F512 3410             (        forth.asm):02973 (4+2)           pshs    x               Length parameter value
F514 BDE671           (        forth.asm):02974 (7)             jsr     NPOP
F517 BDE30F           (        forth.asm):02975 (7)             jsr     CVNSTR
F51A 8E039A           (        forth.asm):02976 (3)             ldx     #TBUFF
F51D 8620             (        forth.asm):02977 (2)             lda     #SP
F51F A180             (        forth.asm):02978 (4+1)   @dotr1  cmpa    ,x+
F521 27FC             (        forth.asm):02979 (3)             beq     @dotr1          Skip leading spaces
F523 301F             (        forth.asm):02980 (4+1)           leax    -1,x
F525 BDE1A5           (        forth.asm):02981 (7)             jsr     SLEN            String length is returned in W
F528 3506             (        forth.asm):02982 (4+2)           puls    d
F52A 1E06             (        forth.asm):02983 (5)             exg     d,w
F52C 103206           (        forth.asm):02984 (4)             subr    d,w
F52F 2F0D             (        forth.asm):02985 (3)             ble     @dotr3
F531 8620             (        forth.asm):02986 (2)             lda     #SP
F533 105D             (        forth.asm):02987 (2)     @dotr2  tstw
F535 2707             (        forth.asm):02988 (3)             beq     @dotr3
F537 BDE1B4           (        forth.asm):02989 (7)             jsr     PUTCH
F53A 105A             (        forth.asm):02990 (2)             decw
F53C 20F5             (        forth.asm):02991 (3)             bra     @dotr2
F53E 7EE1D8           (        forth.asm):02992 (3)     @dotr3  jmp     PUTS
                      (        forth.asm):02993         
F541 03               (        forth.asm):02994         UDOTR   fcb     3               79-STANDARD (REF216)
F542 552E52           (        forth.asm):02995                 fcc     'U.R'
F545 F505             (        forth.asm):02996                 fdb     DOTR
F547 C7               (        forth.asm):02997                 RFCS
F548 0F2C             (        forth.asm):02998 (5)             clr     CVISSGN
F54A 20C3             (        forth.asm):02999 (3)             bra     DOTR0
                      (        forth.asm):03000         
F54C 02               (        forth.asm):03001         BL      fcb     2               79-STANDARD (REF176)
F54D 424C             (        forth.asm):03002                 fcc     'BL'
F54F F541             (        forth.asm):03003                 fdb     UDOTR
F551 C7               (        forth.asm):03004                 RFCS
F552 8E0020           (        forth.asm):03005 (3)             ldx     #SP
F555 7EE663           (        forth.asm):03006 (3)             jmp     NPUSH
                      (        forth.asm):03007         
F558 05               (        forth.asm):03008         SPACE   fcb     5               79-STANDARD (REQ232)
F559 5350414345       (        forth.asm):03009                 fcc     'SPACE'
F55E F54C             (        forth.asm):03010                 fdb     BL
F560 C7               (        forth.asm):03011                 RFCS
F561 8620             (        forth.asm):03012 (2)             lda     #SP
F563 7EE1B4           (        forth.asm):03013 (3)             jmp     PUTCH
                      (        forth.asm):03014         
F566 06               (        forth.asm):03015         SPACES  fcb     6               79-STANDARD (REQ231)
F567 535041434553     (        forth.asm):03016                 fcc     'SPACES'
F56D F558             (        forth.asm):03017                 fdb     SPACE
F56F C7               (        forth.asm):03018                 RFCS
F570 BDE671           (        forth.asm):03019 (7)             jsr     NPOP
F573 1F16             (        forth.asm):03020 (4)             tfr     x,w
F575 8620             (        forth.asm):03021 (2)             lda     #SP
F577 BDE1B4           (        forth.asm):03022 (7)     @spcs1  jsr     PUTCH
F57A 105A             (        forth.asm):03023 (2)             decw
F57C 26F9             (        forth.asm):03024 (3)             bne     @spcs1
F57E 39               (        forth.asm):03025 (4)             rts
                      (        forth.asm):03026         
F57F 04               (        forth.asm):03027         PAGE    fcb     4               79-STANDARD (REF)
F580 50414745         (        forth.asm):03028                 fcc     'PAGE'
F584 F566             (        forth.asm):03029                 fdb     SPACES
F586 C7               (        forth.asm):03030                 RFCS
F587 860C             (        forth.asm):03031 (2)             lda     #FF
F589 7EE1B4           (        forth.asm):03032 (3)             jmp     PUTCH
                      (        forth.asm):03033         
F58C 02               (        forth.asm):03034         CRLF    fcb     2               79-STANDARD (REQ160)
F58D 4352             (        forth.asm):03035                 fcc     'CR'
F58F F57F             (        forth.asm):03036                 fdb     PAGE
F591 C7               (        forth.asm):03037                 RFCS
F592 7EE1E5           (        forth.asm):03038 (3)             jmp     PUTCR
                      (        forth.asm):03039         
F595 03               (        forth.asm):03040         PAD     fcb     3               79-STANDARD (REQ226)
F596 504144           (        forth.asm):03041                 fcc     'PAD'
F599 F58C             (        forth.asm):03042                 fdb     CRLF
F59B C7               (        forth.asm):03043                 RFCS
F59C 8E0134           (        forth.asm):03044 (3)             ldx     #PADBUF
F59F 7EE663           (        forth.asm):03045 (3)             jmp     NPUSH
                      (        forth.asm):03046         
F5A2 04               (        forth.asm):03047         TYPE    fcb     4               79-STANDARD (REQ222)
F5A3 54595045         (        forth.asm):03048                 fcc     'TYPE'          ( addr bcount -- )
F5A7 F595             (        forth.asm):03049                 fdb     PAD
F5A9 C7               (        forth.asm):03050                 RFCS
F5AA BDE671           (        forth.asm):03051 (7)             jsr     NPOP            Character count (signed)
F5AD 1F16             (        forth.asm):03052 (4)             tfr     x,w
F5AF BDE671           (        forth.asm):03053 (7)             jsr     NPOP            Buffer address
F5B2 105D             (        forth.asm):03054 (2)             tstw                    
F5B4 2E01             (        forth.asm):03055 (3)     @type0  bgt     @type1
F5B6 39               (        forth.asm):03056 (4)             rts
F5B7 A680             (        forth.asm):03057 (4+1)   @type1  lda     ,x+
F5B9 BDE1B4           (        forth.asm):03058 (7)             jsr     PUTCH
F5BC 105A             (        forth.asm):03059 (2)             decw
F5BE 20F4             (        forth.asm):03060 (3)             bra     @type0
                      (        forth.asm):03061         
F5C0 05               (        forth.asm):03062         COUNT   fcb     5               79-STANDARD (REQ159)
F5C1 434F554E54       (        forth.asm):03063                 fcc     'COUNT'
F5C6 F5A2             (        forth.asm):03064                 fdb     TYPE
F5C8 C7               (        forth.asm):03065                 RFCS
F5C9 BDE671           (        forth.asm):03066 (7)             jsr     NPOP
F5CC E680             (        forth.asm):03067 (4+1)           ldb     ,x+
F5CE 3610             (        forth.asm):03068                 UCNPUSH                 B is preserved
F5D0 4F               (        forth.asm):03069 (1)             clra
F5D1 1F01             (        forth.asm):03070 (4)             tfr     d,x
F5D3 7EE663           (        forth.asm):03071 (3)             jmp     NPUSH
                      (        forth.asm):03072         
F5D6 09               (        forth.asm):03073         DASHTR  fcb     9               79-STANDARD (REQ148)
F5D7 2D545241494C494E (        forth.asm):03074                 fcc     '-TRAILING'     ( addr n1 -- addr n2 )
     47
F5E0 F5C0             (        forth.asm):03075                 fdb     COUNT
F5E2 C7               (        forth.asm):03076                 RFCS
F5E3 BDE671           (        forth.asm):03077 (7)             jsr     NPOP            N1 to X
F5E6 1F10             (        forth.asm):03078 (4)             tfr     x,d             N1 to D
F5E8 BDE671           (        forth.asm):03079 (7)             jsr     NPOP            ADDR to X
F5EB 1F12             (        forth.asm):03080 (4)             tfr     x,y             Backup to I
F5ED 104D             (        forth.asm):03081 (2)             tstd                    Input character count (N1)
F5EF 2D1B             (        forth.asm):03082 (3)             blt     @invpar         Cannot be < 0
F5F1 308B             (        forth.asm):03083 (4+2)           leax    d,x             X has ADDR+N1
F5F3 1F06             (        forth.asm):03084 (4)             tfr     d,w             W has N1
F5F5 105D             (        forth.asm):03085 (2)     @cknxtb tstw
F5F7 270A             (        forth.asm):03086 (3)             beq     @ckdone
F5F9 A682             (        forth.asm):03087 (4+1)           lda     ,-x
F5FB 105A             (        forth.asm):03088 (2)             decw
F5FD 8120             (        forth.asm):03089 (2)             cmpa    #SP
F5FF 27F4             (        forth.asm):03090 (3)             beq     @cknxtb         Iterate over to the previous byte
F601 105C             (        forth.asm):03091 (2)             incw
F603 1F21             (        forth.asm):03092 (4)     @ckdone tfr     y,x
F605 3610             (        forth.asm):03093                 UCNPUSH                 String base address
F607 1F61             (        forth.asm):03094 (4)             tfr     w,x
F609 3610             (        forth.asm):03095                 UCNPUSH                 Updated character count
F60B 39               (        forth.asm):03096 (4)             rts
F60C C60D             (        forth.asm):03097 (2)     @invpar ldb     #13             Invalid parameter
F60E BDE5EC           (        forth.asm):03098 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):03099         
F611 06               (        forth.asm):03100         EXPECT  fcb     6               79-STANDARD (REQ189)
F612 455850454354     (        forth.asm):03101                 fcc     'EXPECT'        ( addr count -- )
F618 F5D6             (        forth.asm):03102                 fdb     DASHTR
F61A C7               (        forth.asm):03103                 RFCS
F61B BDE671           (        forth.asm):03104 (7)             jsr     NPOP
F61E 1F10             (        forth.asm):03105 (4)             tfr     x,d             Buffer length to B
F620 BDE671           (        forth.asm):03106 (7)             jsr     NPOP            Buffer address to X. B is preserved
F623 5D               (        forth.asm):03107 (1)             tstb
F624 2701             (        forth.asm):03108 (3)             beq     @expct1
F626 5C               (        forth.asm):03109 (1)             incb                    Account for the NUL terminator
F627 7EE1FB           (        forth.asm):03110 (3)     @expct1 jmp     GETS
                      (        forth.asm):03111         
F62A 49               (        forth.asm):03112         TERPRET fcb     $49             79-STANDARD (REF) I make this compile time only
F62B 494E544552505245 (        forth.asm):03113                 fcc     'INTERPRET'     ( -- )
     54
F634 F611             (        forth.asm):03114                 fdb     EXPECT
F636 C7               (        forth.asm):03115                 RFCS
                      (        forth.asm):03116         * Obtain a base buffer address based on the value of BLK.
F637 DC1E             (        forth.asm):03117 (4)             ldd     UBLK
F639 2605             (        forth.asm):03118 (3)             bne     @notser
F63B 8E02C6           (        forth.asm):03119 (3)             ldx     #CMDBUF         Base buffer address for serial line input
F63E 200B             (        forth.asm):03120 (3)             bra     @gocmd
                      (        forth.asm):03121         * BLK is NZ, map the block in memory.
F640 1F01             (        forth.asm):03122 (4)     @notser tfr     d,x             Block number to X
F642 BDE663           (        forth.asm):03123 (7)             jsr     NPUSH
F645 BDE8DE           (        forth.asm):03124                 RFXT    jsr,BLOCK+8     XT for BLOCK. Map the block in
F648 BDE671           (        forth.asm):03125 (7)             jsr     NPOP            Retrieve buffer address
                      (        forth.asm):03126         * Note: >IN is supposed to have been set by the caller!
F64B 9F22             (        forth.asm):03127 (4)     @gocmd  stx     BSBFADR
F64D 7EE0B6           (        forth.asm):03128 (3)             jmp     _INTERP         Finally invoke _INTERP.
                      (        forth.asm):03129         
F650 04               (        forth.asm):03130         LOAD    fcb     4               79-STANDARD (REQ202)
F651 4C4F4144         (        forth.asm):03131                 fcc     'LOAD'          ( blk -- )
F655 F62A             (        forth.asm):03132                 fdb     TERPRET
F657 C7               (        forth.asm):03133                 RFCS
F658 BDE671           (        forth.asm):03134 (7)             jsr     NPOP
F65B 1037C1           (        forth.asm):03135 (4)             cmpr    0,x
F65E 2601             (        forth.asm):03136 (3)             bne     @ctnued
F660 39               (        forth.asm):03137 (4)             rts                     Block 0 is _not_ loadable
F661 3410             (        forth.asm):03138 (4+2)   @ctnued pshs    x
F663 9E1E             (        forth.asm):03139 (4)             ldx     UBLK
F665 BDE680           (        forth.asm):03140 (7)             jsr     RPUSH           Push BLK on the return stack
F668 9E1C             (        forth.asm):03141 (4)             ldx     UTOIN
F66A BDE680           (        forth.asm):03142 (7)             jsr     RPUSH           Push >IN on the return stack
F66D 3510             (        forth.asm):03143 (4+2)           puls    x
F66F 9F1E             (        forth.asm):03144 (4)             stx     UBLK            Update BLK with the LOAD argument
F671 104F             (        forth.asm):03145 (2)             clrd
F673 DD1C             (        forth.asm):03146 (4)             std     UTOIN           Clear >IN
                      (        forth.asm):03147         * Map the new BLK in, interpret code from there.
F675 8DC0             (        forth.asm):03148                 RFXT    bsr,TERPRET+12  XT for INTERPRET
F677 BDE69E           (        forth.asm):03149 (7)             jsr     RPOP
F67A 9F1C             (        forth.asm):03150 (4)             stx     UTOIN           Restore >IN from the return stack
F67C BDE69E           (        forth.asm):03151 (7)             jsr     RPOP
F67F 9F1E             (        forth.asm):03152 (4)             stx     UBLK            Restore BLK from the return stack
F681 7EE6B7           (        forth.asm):03153 (3)             jmp     BLK2BB          Update BSBFADR based on the new BLK value
                      (        forth.asm):03154         
F684 04               (        forth.asm):03155         THRU    fcb     4               79-STANDARD (REF)
F685 54485255         (        forth.asm):03156                 fcc     'THRU'          ( lowblk highblk -- )
F689 F650             (        forth.asm):03157                 fdb     LOAD
F68B C7               (        forth.asm):03158                 RFCS
F68C BDE671           (        forth.asm):03159 (7)             jsr     NPOP
F68F 1F12             (        forth.asm):03160 (4)             tfr     x,y             Y has highblk
F691 BDE671           (        forth.asm):03161 (7)             jsr     NPOP            X has lowblk -- both are unsigned numbers
F694 103721           (        forth.asm):03162 (4)     @thrlop cmpr    y,x
F697 2301             (        forth.asm):03163 (3)             bls     @cont
F699 39               (        forth.asm):03164 (4)             rts
F69A 3610             (        forth.asm):03165         @cont   UCNPUSH
F69C 3410             (        forth.asm):03166 (4+2)           pshs    x
F69E 8DB8             (        forth.asm):03167                 RFXT    bsr,LOAD+7      XT for LOAD
F6A0 3510             (        forth.asm):03168 (4+2)           puls    x
F6A2 3001             (        forth.asm):03169 (4+1)           leax    1,x
F6A4 20EE             (        forth.asm):03170 (3)             bra     @thrlop
                      (        forth.asm):03171         
F6A6 83               (        forth.asm):03172         NXTBLK  fcb     $83             79-STANDARD (REF131)
F6A7 2D2D3E           (        forth.asm):03173                 fcc     '-->'           ( -- )
F6AA F684             (        forth.asm):03174                 fdb     THRU
F6AC C7               (        forth.asm):03175                 RFCS
F6AD 9E1E             (        forth.asm):03176 (4)             ldx     UBLK
F6AF 3001             (        forth.asm):03177 (4+1)           leax    1,x
F6B1 DC1E             (        forth.asm):03178 (4)     NXTBLK1 ldd     UBLK
F6B3 2603             (        forth.asm):03179 (3)             bne     @nfrmb0         Not invoked from block 0 (the console)
                      (        forth.asm):03180         * --> or CONTINUED are being invoked from the console. Flag that condition
                      (        forth.asm):03181         * as a hint to the interpreter so that feedback is provided even if we are
                      (        forth.asm):03182         * back from a block.
F6B5 4C               (        forth.asm):03183 (1)             inca                    1 to A
F6B6 9730             (        forth.asm):03184 (3)             sta     NBCTFB0
F6B8 9F1E             (        forth.asm):03185 (4)     @nfrmb0 stx     UBLK            Update BLK
F6BA 104F             (        forth.asm):03186 (2)             clrd
F6BC DD1C             (        forth.asm):03187 (4)             std     UTOIN           0 >IN !
                      (        forth.asm):03188         * Map the new BLK in, interpret code from there.
F6BE 7EF637           (        forth.asm):03189                 RFXT    jmp,TERPRET+12  XT for INTERPRET
                      (        forth.asm):03190         
F6C1 89               (        forth.asm):03191         CONTIND fcb     $89             79-STANDARD (REF)
F6C2 434F4E54494E5545 (        forth.asm):03192                 fcc     'CONTINUED'     ( nextblk -- )
     44
F6CB F6A6             (        forth.asm):03193                 fdb     NXTBLK
F6CD C7               (        forth.asm):03194                 RFCS
F6CE BDE671           (        forth.asm):03195 (7)             jsr     NPOP            NEXTBLK to X
F6D1 1037C1           (        forth.asm):03196 (4)             cmpr    0,x             Cannot interpret from block 0!
F6D4 26DB             (        forth.asm):03197 (3)             bne     NXTBLK1
F6D6 C60D             (        forth.asm):03198 (2)             ldb     #13             Illegal argument
F6D8 BDE5EC           (        forth.asm):03199 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):03200         
F6DB 02               (        forth.asm):03201         MILLIS  fcb     2               79-STANDARD (REF)
F6DC 4D53             (        forth.asm):03202                 fcc     'MS'            ( mscount -- )
F6DE F6C1             (        forth.asm):03203                 fdb     CONTIND
F6E0 C7               (        forth.asm):03204                 RFCS
F6E1 BDE671           (        forth.asm):03205 (7)             jsr     NPOP
F6E4 1037C1           (        forth.asm):03206 (4)             cmpr    0,x
F6E7 2601             (        forth.asm):03207 (3)             bne     MILLIS1
F6E9 39               (        forth.asm):03208 (4)             rts
F6EA CC03E2           (        forth.asm):03209 (3)     MILLIS1 ldd     #MSLCNT
F6ED 104A             (        forth.asm):03210 (2)     @ms2    decd
F6EF 26FC             (        forth.asm):03211 (3)             bne     @ms2
F6F1 301F             (        forth.asm):03212 (4+1)           leax    -1,x
F6F3 26F5             (        forth.asm):03213 (3)             bne     MILLIS1
F6F5 39               (        forth.asm):03214 (4)             rts
                      (        forth.asm):03215         
F6F6 04               (        forth.asm):03216         KEYP    fcb     4               ANSI (Facility)
F6F7 4B45593F         (        forth.asm):03217                 fcc     'KEY?'          ( -- flag )
F6FB F6DB             (        forth.asm):03218                 fdb     MILLIS
F6FD C7               (        forth.asm):03219                 RFCS
F6FE 1FC1             (        forth.asm):03220 (4)             tfr     0,x
F700 8615             (        forth.asm):03221 (2)             lda     #ACIRTS0
F702 B7D800           (        forth.asm):03222 (4)             sta     ACIACTL
F705 8601             (        forth.asm):03223 (2)             lda     #ACIRDRF
F707 B5D800           (        forth.asm):03224 (4)             bita    ACIACTL
F70A 2702             (        forth.asm):03225 (3)             beq     @keyp1
F70C 3001             (        forth.asm):03226 (4+1)           leax    1,x
F70E 8655             (        forth.asm):03227 (2)     @keyp1  lda     #ACIRTS1
F710 B7D800           (        forth.asm):03228 (4)             sta     ACIACTL
F713 7EE663           (        forth.asm):03229 (3)             jmp     NPUSH
                      (        forth.asm):03230         
F716 03               (        forth.asm):03231         KEY     fcb     3               79-STANDARD (REQ100)
F717 4B4559           (        forth.asm):03232                 fcc     'KEY'
F71A F6F6             (        forth.asm):03233                 fdb     KEYP
F71C C7               (        forth.asm):03234                 RFCS
F71D BDE1C3           (        forth.asm):03235 (7)             jsr     GETCH
F720 1F89             (        forth.asm):03236 (4)             tfr     a,b
F722 4F               (        forth.asm):03237 (1)             clra
F723 1F01             (        forth.asm):03238 (4)             tfr     d,x
F725 7EE663           (        forth.asm):03239 (3)             jmp     NPUSH
                      (        forth.asm):03240         
F728 04               (        forth.asm):03241         EMIT    fcb     4               79-STANDARD (REQ207)
F729 454D4954         (        forth.asm):03242                 fcc     'EMIT'
F72D F716             (        forth.asm):03243                 fdb     KEY
F72F C7               (        forth.asm):03244                 RFCS
F730 BDE671           (        forth.asm):03245 (7)             jsr     NPOP
F733 1F10             (        forth.asm):03246 (4)             tfr     x,d
F735 1F98             (        forth.asm):03247 (4)             tfr     b,a
F737 7EE1B4           (        forth.asm):03248 (3)             jmp     PUTCH
                      (        forth.asm):03249         
F73A 01               (        forth.asm):03250         PLUS    fcb     1               79-STANDARD (REQ121)
F73B 2B               (        forth.asm):03251                 fcc     '+'             ( n1 n2 -- sum )
F73C F728             (        forth.asm):03252                 fdb     EMIT
F73E C7               (        forth.asm):03253                 RFCS
F73F CC0242BDE304     (        forth.asm):03254                 MINDREQ 2               We need at least two cells stacked up
F745 EC42             (        forth.asm):03255 (5+1)           ldd     2,u             N1
F747 E3C4             (        forth.asm):03256 (5+0)           addd    ,u              N2
F749 ED42             (        forth.asm):03257 (5+1)           std     2,u             SUM
F74B 3342             (        forth.asm):03258 (4+1)           leau    2,u             Drop the top cell
F74D 39               (        forth.asm):03259 (4)             rts
                      (        forth.asm):03260         
F74E 02               (        forth.asm):03261         ONEP    fcb     2               79-STANDARD (REQ107)
F74F 312B             (        forth.asm):03262                 fcc     '1+'
F751 F73A             (        forth.asm):03263                 fdb     PLUS
F753 C7               (        forth.asm):03264                 RFCS
F754 CC0244BDE304     (        forth.asm):03265                 MINDREQ 1               We need at least one cell stacked up
F75A ECC4             (        forth.asm):03266 (5+0)           ldd     ,u
F75C 104C             (        forth.asm):03267 (2)             incd
F75E EDC4             (        forth.asm):03268 (5+0)           std     ,u
F760 39               (        forth.asm):03269 (4)             rts
                      (        forth.asm):03270         
F761 02               (        forth.asm):03271         TWOP    fcb     2               79-STANDARD (REQ135)
F762 322B             (        forth.asm):03272                 fcc     '2+'            ( n -- n+2 )
F764 F74E             (        forth.asm):03273                 fdb     ONEP
F766 C7               (        forth.asm):03274                 RFCS
F767 CC0244BDE304     (        forth.asm):03275                 MINDREQ 1
F76D ECC4             (        forth.asm):03276 (5+0)           ldd     ,u
F76F C30002           (        forth.asm):03277 (3)             addd    #2
F772 EDC4             (        forth.asm):03278 (5+0)           std     ,u
F774 39               (        forth.asm):03279 (4)             rts
                      (        forth.asm):03280         
F775 01               (        forth.asm):03281         MINUS   fcb     1               79-STANDARD (REQ134)
F776 2D               (        forth.asm):03282                 fcc     '-'             ( n1 n2 -- dif )
F777 F761             (        forth.asm):03283                 fdb     TWOP
F779 C7               (        forth.asm):03284                 RFCS
F77A CC0242BDE304     (        forth.asm):03285                 MINDREQ 2               We need at least two cells stacked up
F780 EC42             (        forth.asm):03286 (5+1)           ldd     2,u             N1
F782 A3C4             (        forth.asm):03287 (5+0)           subd    ,u              N2
F784 ED42             (        forth.asm):03288 (5+1)           std     2,u             DIF
F786 3342             (        forth.asm):03289 (4+1)           leau    2,u             Drop the top cell
F788 39               (        forth.asm):03290 (4)             rts
                      (        forth.asm):03291         
F789 02               (        forth.asm):03292         ONEM    fcb     2               79-STANDARD (REQ105)
F78A 312D             (        forth.asm):03293                 fcc     '1-'
F78C F775             (        forth.asm):03294                 fdb     MINUS
F78E C7               (        forth.asm):03295                 RFCS
F78F CC0244BDE304     (        forth.asm):03296                 MINDREQ 1               We need at least one cell stacked up
F795 ECC4             (        forth.asm):03297 (5+0)           ldd     ,u
F797 104A             (        forth.asm):03298 (2)             decd
F799 EDC4             (        forth.asm):03299 (5+0)           std     ,u
F79B 39               (        forth.asm):03300 (4)             rts
                      (        forth.asm):03301         
F79C 02               (        forth.asm):03302         TWOM    fcb     2               79-STANDARD (REQ129)
F79D 322D             (        forth.asm):03303                 fcc     '2-'
F79F F789             (        forth.asm):03304                 fdb     ONEM
F7A1 C7               (        forth.asm):03305                 RFCS
F7A2 CC0244BDE304     (        forth.asm):03306                 MINDREQ 1               We need at least one cell stacked up
F7A8 ECC4             (        forth.asm):03307 (5+0)           ldd     ,u
F7AA 830002           (        forth.asm):03308 (3)             subd    #2
F7AD EDC4             (        forth.asm):03309 (5+0)           std     ,u
F7AF 39               (        forth.asm):03310 (4)             rts
                      (        forth.asm):03311         
F7B0 01               (        forth.asm):03312         ZEROL   fcb     1               Non-standard
F7B1 30               (        forth.asm):03313                 fcc     '0'
F7B2 F79C             (        forth.asm):03314                 fdb     TWOM
F7B4 C7               (        forth.asm):03315                 RFCS
F7B5 1FC1             (        forth.asm):03316 (4)             tfr     0,x
F7B7 7EE663           (        forth.asm):03317 (3)             jmp     NPUSH
                      (        forth.asm):03318         
F7BA 01               (        forth.asm):03319         ONEL    fcb     1               Non-standard
F7BB 31               (        forth.asm):03320                 fcc     '1'
F7BC F7B0             (        forth.asm):03321                 fdb     ZEROL
F7BE C7               (        forth.asm):03322                 RFCS
F7BF 8E0001           (        forth.asm):03323 (3)             ldx     #1
F7C2 7EE663           (        forth.asm):03324 (3)             jmp     NPUSH
                      (        forth.asm):03325         
F7C5 01               (        forth.asm):03326         TWOL    fcb     1               Non-standard
F7C6 32               (        forth.asm):03327                 fcc     '2'
F7C7 F7BA             (        forth.asm):03328                 fdb     ONEL
F7C9 C7               (        forth.asm):03329                 RFCS
F7CA 8E0002           (        forth.asm):03330 (3)             ldx     #2
F7CD 7EE663           (        forth.asm):03331 (3)             jmp     NPUSH
                      (        forth.asm):03332         
F7D0 05               (        forth.asm):03333         SHIFT   fcb     5               79-STANDARD (Ref)
F7D1 5348494654       (        forth.asm):03334                 fcc     'SHIFT'
F7D6 F7C5             (        forth.asm):03335                 fdb     TWOL
F7D8 C7               (        forth.asm):03336                 RFCS
F7D9 CC0242BDE304     (        forth.asm):03337                 MINDREQ 2               Two cells need to be stacked up
F7DF 10A6C4           (        forth.asm):03338 (6+0)           ldw     ,u              Shift bitcount
F7E2 EC42             (        forth.asm):03339 (5+1)           ldd     2,u             The data itself
F7E4 105D             (        forth.asm):03340 (2)     @shftlp tstw
F7E6 270E             (        forth.asm):03341 (3)             beq     @shfdon
F7E8 2D06             (        forth.asm):03342 (3)             blt     @shftrg
F7EA 1048             (        forth.asm):03343 (2)             lsld                    Shift left (W is positive)
F7EC 105A             (        forth.asm):03344 (2)             decw
F7EE 20F4             (        forth.asm):03345 (3)             bra     @shftlp
F7F0 1044             (        forth.asm):03346 (2)     @shftrg lsrd                    Shift right (W is negative)
F7F2 105C             (        forth.asm):03347 (2)             incw
F7F4 20EE             (        forth.asm):03348 (3)             bra     @shftlp
F7F6 ED42             (        forth.asm):03349 (5+1)   @shfdon std     2,u             Return value stored there
F7F8 3342             (        forth.asm):03350 (4+1)           leau    2,u             Drop one cell from the data stack
F7FA 39               (        forth.asm):03351 (4)             rts
                      (        forth.asm):03352         
                      (        forth.asm):03353         * Signed multiplication by hardware support.
F7FB 01               (        forth.asm):03354         MULT    fcb     1               79-STANDARD (REQ138)
F7FC 2A               (        forth.asm):03355                 fcc     '*'
F7FD F7D0             (        forth.asm):03356                 fdb     SHIFT
F7FF C7               (        forth.asm):03357                 RFCS
F800 CC0242BDE304     (        forth.asm):03358                 MINDREQ 2               Two cells need to be stacked up
F806 EC42             (        forth.asm):03359 (5+1)           ldd     2,u
F808 11AFC4           (        forth.asm):03360 (30+0)          muld    ,u
F80B 10A742           (        forth.asm):03361 (6+1)           stw     2,u             Return only the lower 16 bits
F80E 3342             (        forth.asm):03362 (4+1)           leau    2,u             Drop one cell from the data stack
F810 39               (        forth.asm):03363 (4)             rts
                      (        forth.asm):03364         
F811 02               (        forth.asm):03365         TWOTIM  fcb     2               79-STANDARD (REF)
F812 322A             (        forth.asm):03366                 fcc     '2*'
F814 F7FB             (        forth.asm):03367                 fdb     MULT
F816 C7               (        forth.asm):03368                 RFCS
F817 CC0244BDE304     (        forth.asm):03369                 MINDREQ 1               One cell needs to be stacked up
F81D ECC4             (        forth.asm):03370 (5+0)           ldd     ,u
F81F 1048             (        forth.asm):03371 (2)             asld
F821 EDC4             (        forth.asm):03372 (5+0)           std     ,u
F823 39               (        forth.asm):03373 (4)             rts
                      (        forth.asm):03374         
F824 02               (        forth.asm):03375         TWODIV  fcb     2
F825 322F             (        forth.asm):03376                 fcc     '2/'
F827 F811             (        forth.asm):03377                 fdb     TWOTIM
F829 C7               (        forth.asm):03378                 RFCS
F82A CC0244BDE304     (        forth.asm):03379                 MINDREQ 1               One cell needs to be stacked up
F830 ECC4             (        forth.asm):03380 (5+0)           ldd     ,u
F832 1047             (        forth.asm):03381 (2)             asrd
F834 EDC4             (        forth.asm):03382 (5+0)           std     ,u
F836 39               (        forth.asm):03383 (4)             rts
                      (        forth.asm):03384         
                      (        forth.asm):03385         * /, MOD and /MOD are essentially the same function returning
                      (        forth.asm):03386         * the different parts returned by DIVQ.
                      (        forth.asm):03387         * We use a global variable to distinguish which functionality
                      (        forth.asm):03388         * is being requested:
                      (        forth.asm):03389         * 0: return the modulo and the quotient (/MOD).
                      (        forth.asm):03390         * 1: return the modulo only (MOD).
                      (        forth.asm):03391         * 2: return the quotient only (/).
F837 01               (        forth.asm):03392         DIV     fcb     1
F838 2F               (        forth.asm):03393                 fcc     '/'
F839 F824             (        forth.asm):03394                 fdb     TWODIV
F83B C7               (        forth.asm):03395                 RFCS
F83C 8602             (        forth.asm):03396 (2)             lda     #2
F83E 9728             (        forth.asm):03397 (3)             sta     DIVFCN
F840 CC0242BDE304     (        forth.asm):03398         DIV1    MINDREQ 2
                      (        forth.asm):03399         * Division by zero conditions are dealt with through the trap handler.
F846 104F             (        forth.asm):03400 (2)             clrd
F848 10A642           (        forth.asm):03401 (6+1)           ldw     2,u             Numerator
                      (        forth.asm):03402         * We need a sign extention from W to Q. SEX and SEXW do not cut it.
F84B 114D             (        forth.asm):03403 (2)             tste
F84D 2A02             (        forth.asm):03404 (3)             bpl     @div2
F84F 1043             (        forth.asm):03405 (2)             comd
F851 11AEC4           (        forth.asm):03406 (36)    @div2   divq    ,u              Quotient is returned in W, modulo in D
F854 0D28             (        forth.asm):03407 (4)             tst     DIVFCN
F856 2606             (        forth.asm):03408 (3)             bne     @div3
F858 ED42             (        forth.asm):03409 (5+1)           std     2,u             Function 0: return the modulo and the quotient
F85A 10A7C4           (        forth.asm):03410 (6+0)           stw     ,u
F85D 39               (        forth.asm):03411 (4)             rts
F85E 3342             (        forth.asm):03412 (4+1)   @div3   leau    2,u             Drop one cell from the data stack
F860 11D628           (        forth.asm):03413 (4)             ldf     DIVFCN
F863 11C101           (        forth.asm):03414 (3)             cmpf    #1
F866 2603             (        forth.asm):03415 (3)             bne     @div4
F868 EDC4             (        forth.asm):03416 (5+0)           std     ,u              Function 1: return only the modulo
F86A 39               (        forth.asm):03417 (4)             rts
F86B 10A7C4           (        forth.asm):03418 (6+0)   @div4   stw     ,u              Function 2: return only the quotient
F86E 39               (        forth.asm):03419 (4)             rts
                      (        forth.asm):03420         
F86F 03               (        forth.asm):03421         MOD     fcb     3
F870 4D4F44           (        forth.asm):03422                 fcc     'MOD'
F873 F837             (        forth.asm):03423                 fdb     DIV
F875 C7               (        forth.asm):03424                 RFCS
F876 8601             (        forth.asm):03425 (2)             lda     #1
F878 9728             (        forth.asm):03426 (3)             sta     DIVFCN
F87A 20C4             (        forth.asm):03427 (3)             bra     DIV1
                      (        forth.asm):03428         
F87C 04               (        forth.asm):03429         MDIV    fcb     4
F87D 2F4D4F44         (        forth.asm):03430                 fcc     '/MOD'
F881 F86F             (        forth.asm):03431                 fdb     MOD
F883 C7               (        forth.asm):03432                 RFCS
F884 0F28             (        forth.asm):03433 (5)             clr     DIVFCN
F886 20B8             (        forth.asm):03434 (3)             bra     DIV1
                      (        forth.asm):03435         
F888 02               (        forth.asm):03436         STRSLSH fcb     2
F889 2A2F             (        forth.asm):03437                 fcc     '*/'            ( n1 n2 n3 -- n4 [n5] )
F88B F87C             (        forth.asm):03438                 fdb     MDIV
F88D C7               (        forth.asm):03439                 RFCS
F88E 8601             (        forth.asm):03440 (2)             lda     #1
F890 9729             (        forth.asm):03441 (3)             sta     STSLFCN
F892 CC0240BDE304     (        forth.asm):03442         STRSL1  MINDREQ 3
                      (        forth.asm):03443         * Division by zero conditions are dealt with through the trap handler.
F898 EC44             (        forth.asm):03444 (5+1)           ldd     4,u             N1
F89A 11AF42           (        forth.asm):03445 (30+1)          muld    2,u             N2
F89D 11AEC4           (        forth.asm):03446 (36)            divq    ,u              N3
F8A0 3342             (        forth.asm):03447 (4+1)           leau    2,u
F8A2 0D29             (        forth.asm):03448 (4)             tst     STSLFCN
F8A4 2606             (        forth.asm):03449 (3)             bne     @strsl2         Just the quotient, Ma'am!
F8A6 ED42             (        forth.asm):03450 (5+1)           std     2,u             N4: the modulo
F8A8 10A7C4           (        forth.asm):03451 (6+0)           stw     ,u              N5: the quotient
F8AB 39               (        forth.asm):03452 (4)             rts
F8AC 3342             (        forth.asm):03453 (4+1)   @strsl2 leau    2,u
F8AE 10A7C4           (        forth.asm):03454 (6+0)           stw     ,u              N4
F8B1 39               (        forth.asm):03455 (4)             rts
                      (        forth.asm):03456         
F8B2 05               (        forth.asm):03457         STRSLMD fcb     5
F8B3 2A2F4D4F44       (        forth.asm):03458                 fcc     '*/MOD'
F8B8 F888             (        forth.asm):03459                 fdb     STRSLSH
F8BA C7               (        forth.asm):03460                 RFCS
F8BB 0F29             (        forth.asm):03461 (5)             clr     STSLFCN
F8BD 20D3             (        forth.asm):03462 (3)             bra     STRSL1
                      (        forth.asm):03463         
                      (        forth.asm):03464         * Returns the current value of the S register (informational only).
F8BF 01               (        forth.asm):03465         SYSSTK  fcb     1               Non-standard
F8C0 53               (        forth.asm):03466                 fcc     'S'
F8C1 F8B2             (        forth.asm):03467                 fdb     STRSLMD
F8C3 C7               (        forth.asm):03468                 RFCS
F8C4 1F41             (        forth.asm):03469 (4)             tfr     s,x
F8C6 7EE663           (        forth.asm):03470 (3)             jmp     NPUSH
                      (        forth.asm):03471         
F8C9 05               (        forth.asm):03472         WORDS   fcb     5               ANSI (Tools)
F8CA 574F524453       (        forth.asm):03473                 fcc     'WORDS'         ( -- )
F8CF F8BF             (        forth.asm):03474                 fdb     SYSSTK
F8D1 C7               (        forth.asm):03475                 RFCS
F8D2 2009             (        forth.asm):03476                 RFXT    bra,VLIST+8     XT for VLIST
                      (        forth.asm):03477         
                      (        forth.asm):03478         * Differences from the original code:
                      (        forth.asm):03479         * - display number in HEX rather than in the current base.
                      (        forth.asm):03480         * - dropped feat: the original stuff was interactively paged by 15 line screens.
                      (        forth.asm):03481         * - added feat: display code implementation payload.
                      (        forth.asm):03482         * - added feat: display the immedediate and define (compile time only) flags.
                      (        forth.asm):03483         * - added feat: display the forgettable status (R/W). Everything user
                      (        forth.asm):03484         *   defined is forgettable (i.e. RAM resident).
F8D4 05               (        forth.asm):03485         VLIST   fcb     5               Non-standard
F8D5 564C495354       (        forth.asm):03486                 fcc     'VLIST'         ( -- )
F8DA F8C9             (        forth.asm):03487                 fdb     WORDS
F8DC C7               (        forth.asm):03488                 RFCS
F8DD 9E08             (        forth.asm):03489 (4)             ldx     DICEND
F8DF 9F12             (        forth.asm):03490 (4)             stx     VLPRVEP         Last word code address + 1
F8E1 9E06             (        forth.asm):03491 (4)             ldx     LSTWAD
F8E3 9F14             (        forth.asm):03492 (4)     @vlist1 stx     VLPRVHD         Last word header pointer
F8E5 108E039A         (        forth.asm):03493 (4)             ldy     #TBUFF
F8E9 E680             (        forth.asm):03494 (4+1)           ldb     ,x+
F8EB 3404             (        forth.asm):03495 (4+1)           pshs    b
F8ED C41F             (        forth.asm):03496 (2)             andb    #WRLNMSK        Mask out word length
F8EF 4F               (        forth.asm):03497 (1)             clra
F8F0 3404             (        forth.asm):03498 (4+1)           pshs    b               Preserve word length 
F8F2 1F06             (        forth.asm):03499 (4)             tfr     d,w
F8F4 113812           (        forth.asm):03500 (6+?)           tfm     x+,y+
F8F7 3502             (        forth.asm):03501 (4+1)           puls    a               Restore word length to A
F8F9 C620             (        forth.asm):03502 (2)             ldb     #WRLNMSK+1
F8FB 103289           (        forth.asm):03503 (4)             subr    a,b             Number of spaces we want to emit
F8FE 8620             (        forth.asm):03504 (2)             lda     #SP
F900 A7A0             (        forth.asm):03505 (4+1)   @vlist2 sta     ,y+
F902 5A               (        forth.asm):03506 (1)             decb
F903 26FB             (        forth.asm):03507 (3)             bne     @vlist2
F905 6FA0             (        forth.asm):03508 (6+1)           clr     ,y+             Terminate formatted output string
F907 3410             (        forth.asm):03509 (4+2)           pshs    x               Address of the current word backlink address
F909 BDE1E5           (        forth.asm):03510 (7)             jsr     PUTCR           Carriage return is output before anything else
F90C 8E039A           (        forth.asm):03511 (3)             ldx     #TBUFF
F90F BDE1D8           (        forth.asm):03512 (7)             jsr     PUTS            Output word name formatted on 17 chars + SP
F912 AEE4             (        forth.asm):03513 (5+0)           ldx     ,s
                      (        forth.asm):03514                 IFNE    RELFEAT
F914 3003             (        forth.asm):03515 (4+1)           leax    3,x             Word XT to X (Skip backlink and checksum)
                      (        forth.asm):03516                 ELSE
                      (        forth.asm):03517                 leax    2,x             Word XT to X (Skip backlink)
                      (        forth.asm):03518                 ENDC
F916 1F10             (        forth.asm):03519 (4)             tfr     x,d             CVNSTR depends on UBASE and we want HEX output
F918 8E039A           (        forth.asm):03520 (3)             ldx     #TBUFF
F91B BDE172           (        forth.asm):03521 (7)             jsr     HDMP4           So we use trusted debugging code
F91E 8E039A           (        forth.asm):03522 (3)             ldx     #TBUFF
F921 BDE1D8           (        forth.asm):03523 (7)             jsr     PUTS
                      (        forth.asm):03524         * Now to display word implementation length.
                      (        forth.asm):03525         * Implementation code length is from ,s+3 (or 2) to VLPRVEP
F924 8609             (        forth.asm):03526 (2)             lda     #HT
F926 BDE1B4           (        forth.asm):03527 (7)             jsr     PUTCH
F929 9E12             (        forth.asm):03528 (4)             ldx     VLPRVEP
F92B 10AEE4           (        forth.asm):03529 (6+0)           ldy     ,s
                      (        forth.asm):03530                 IFNE    RELFEAT
F92E 3123             (        forth.asm):03531 (4+1)           leay    3,y             Current word code entry address
                      (        forth.asm):03532                 ELSE
                      (        forth.asm):03533                 leay    2,y             Current word code entry address
                      (        forth.asm):03534                 ENDC
F930 103221           (        forth.asm):03535 (4)             subr    y,x
F933 1F10             (        forth.asm):03536 (4)             tfr     x,d
F935 8E039A           (        forth.asm):03537 (3)             ldx     #TBUFF
F938 BDE172           (        forth.asm):03538 (7)             jsr     HDMP4
F93B 8E039A           (        forth.asm):03539 (3)             ldx     #TBUFF
F93E BDE1D8           (        forth.asm):03540 (7)             jsr     PUTS
                      (        forth.asm):03541         # Display attribute flags.
F941 8609             (        forth.asm):03542 (2)             lda     #HT
F943 BDE1B4           (        forth.asm):03543 (7)             jsr     PUTCH
F946 8E039A           (        forth.asm):03544 (3)             ldx     #TBUFF
F949 E662             (        forth.asm):03545 (4+1)           ldb     2,s             Word attribute to B
F94B 862D             (        forth.asm):03546 (2)             lda     #'-
F94D C580             (        forth.asm):03547 (2)             bitb    #IMDFLM         Check for immediate
F94F 2702             (        forth.asm):03548 (3)             beq     @vlist4
F951 8649             (        forth.asm):03549 (2)             lda     #'I
F953 A780             (        forth.asm):03550 (4+1)   @vlist4 sta     ,x+
F955 862D             (        forth.asm):03551 (2)             lda     #'-
F957 C540             (        forth.asm):03552 (2)             bitb    #DEFFLM         Check for define (compile time only)
F959 2702             (        forth.asm):03553 (3)             beq     @vlist5
F95B 8643             (        forth.asm):03554 (2)             lda     #'C
F95D A780             (        forth.asm):03555 (4+1)   @vlist5 sta     ,x+
                      (        forth.asm):03556                 IFNE    RELFEAT
F95F 862D             (        forth.asm):03557 (2)             lda     #'-
F961 C520             (        forth.asm):03558 (2)             bitb    #MONFLM         Check for monitored status
F963 2702             (        forth.asm):03559 (3)             beq     @vlst51
F965 864D             (        forth.asm):03560 (2)             lda     #'M
F967 A780             (        forth.asm):03561 (4+1)   @vlst51 sta     ,x+
                      (        forth.asm):03562                 ENDC
                      (        forth.asm):03563         * Check for forgettable also. In ROM => R else W unless we just processed '@'.
F969 8652             (        forth.asm):03564 (2)             lda     #'R
F96B 10AEE4           (        forth.asm):03565 (6+0)           ldy     ,s
                      (        forth.asm):03566                 IFNE    RELFEAT
F96E 3123             (        forth.asm):03567 (4+1)           leay    3,y             Word entry point to Y
                      (        forth.asm):03568                 ELSE
                      (        forth.asm):03569                 leay    2,y             Word entry point to Y
                      (        forth.asm):03570                 ENDC
F970 108C0C15         (        forth.asm):03571 (4)             cmpy    #RAMFTCH        @ in RAM is unforgettable
F974 2708             (        forth.asm):03572 (3)             beq     @vlist6
F976 108CE000         (        forth.asm):03573 (4)             cmpy    #ROMSTRT        as are all ROM resident words
F97A 2402             (        forth.asm):03574 (3)             bcc     @vlist6
F97C 8657             (        forth.asm):03575 (2)             lda     #'W
F97E A780             (        forth.asm):03576 (4+1)   @vlist6 sta     ,x+
F980 6F84             (        forth.asm):03577 (6+0)           clr     ,x
F982 8E039A           (        forth.asm):03578 (3)             ldx     #TBUFF
F985 BDE1D8           (        forth.asm):03579 (7)             jsr     PUTS
                      (        forth.asm):03580         * The point at which VLPRVHD==WDICSPC is a singularity (RAM to ROM transition).
F988 9E14             (        forth.asm):03581 (4)             ldx     VLPRVHD
F98A 8C0C10           (        forth.asm):03582 (3)             cmpx    #WDICSPC
F98D 2608             (        forth.asm):03583 (3)             bne     @vlist7
F98F 8EFDA1           (        forth.asm):03584 (3)             ldx     #QMARK          Word just before @ (ROM flavor)
F992 9F14             (        forth.asm):03585 (4)             stx     VLPRVHD
F994 8EFDAC           (        forth.asm):03586 (3)             ldx     #THEEND
F997 9F12             (        forth.asm):03587 (4)     @vlist7 stx     VLPRVEP
F999 3510             (        forth.asm):03588 (4+2)           puls    x
F99B 3504             (        forth.asm):03589 (4+1)           puls    b
F99D AE84             (        forth.asm):03590 (5+0)           ldx     ,x              Point to previous word
F99F 1026FF40         (        forth.asm):03591 (5)             lbne    @vlist1
F9A3 39               (        forth.asm):03592 (4)             rts
                      (        forth.asm):03593         
F9A4 05               (        forth.asm):03594         STATE   fcb     5
F9A5 5354415445       (        forth.asm):03595                 fcc     'STATE'
F9AA F8D4             (        forth.asm):03596                 fdb     VLIST
F9AC C7               (        forth.asm):03597                 RFCS
F9AD 8E011A           (        forth.asm):03598 (3)             ldx     #USTATE
F9B0 7EE663           (        forth.asm):03599 (3)             jmp     NPUSH
                      (        forth.asm):03600         
F9B3 04               (        forth.asm):03601         BASE    fcb     4               79-STANDARD (REQ115)
F9B4 42415345         (        forth.asm):03602                 fcc     'BASE'
F9B8 F9A4             (        forth.asm):03603                 fdb     STATE
F9BA C7               (        forth.asm):03604                 RFCS
F9BB 8E0118           (        forth.asm):03605 (3)             ldx     #UBASE
F9BE 7EE663           (        forth.asm):03606 (3)             jmp     NPUSH
                      (        forth.asm):03607         
F9C1 03               (        forth.asm):03608         BIN     fcb     3               Non-standard
F9C2 42494E           (        forth.asm):03609                 fcc     'BIN'
F9C5 F9B3             (        forth.asm):03610                 fdb     BASE
F9C7 C7               (        forth.asm):03611                 RFCS
F9C8 CC0002           (        forth.asm):03612 (3)             ldd     #2
F9CB DD18             (        forth.asm):03613 (4)             std     UBASE
F9CD 39               (        forth.asm):03614 (4)             rts
                      (        forth.asm):03615         
F9CE 05               (        forth.asm):03616         OCTAL   fcb     5               79-STANDARD (REF)
F9CF 4F4354414C       (        forth.asm):03617                 fcc     'OCTAL'
F9D4 F9C1             (        forth.asm):03618                 fdb     BIN
F9D6 C7               (        forth.asm):03619                 RFCS
F9D7 CC0008           (        forth.asm):03620 (3)             ldd     #8
F9DA DD18             (        forth.asm):03621 (4)             std     UBASE
F9DC 39               (        forth.asm):03622 (4)             rts
                      (        forth.asm):03623         
F9DD 07               (        forth.asm):03624         DECIMAL fcb     7               79-STANDARD (REQ197)
F9DE 444543494D414C   (        forth.asm):03625                 fcc     'DECIMAL'
F9E5 F9CE             (        forth.asm):03626                 fdb     OCTAL
F9E7 C7               (        forth.asm):03627                 RFCS
F9E8 CC000A           (        forth.asm):03628 (3)             ldd     #10
F9EB DD18             (        forth.asm):03629 (4)             std     UBASE
F9ED 39               (        forth.asm):03630 (4)             rts
                      (        forth.asm):03631         
F9EE 03               (        forth.asm):03632         HEX     fcb     3               79-STANDARD (REF162)
F9EF 484558           (        forth.asm):03633                 fcc     'HEX'
F9F2 F9DD             (        forth.asm):03634                 fdb     DECIMAL
F9F4 C7               (        forth.asm):03635                 RFCS
F9F5 CC0010           (        forth.asm):03636 (3)             ldd     #16
F9F8 DD18             (        forth.asm):03637 (4)             std     UBASE
F9FA 39               (        forth.asm):03638 (4)             rts
                      (        forth.asm):03639         
                      (        forth.asm):03640         * DUMP is not optimized for speed or clarity but for code compactness and yet
                      (        forth.asm):03641         * it remains the largest dictionary entry! It resorts to builtin HEX dump
                      (        forth.asm):03642         * primitives that do not depend on the current base (HDMP4, HDMP2).
                      (        forth.asm):03643         * DUMP operates on the basis of one line of output to #TBUFF per 16 byte
                      (        forth.asm):03644         * (a block) of input. The input buffer is pointed to by D (backed up by Y)
                      (        forth.asm):03645         * and the output is pointed to by X. The output (besides the header line)
                      (        forth.asm):03646         * comprises 3 distinct areas:
                      (        forth.asm):03647         *
                      (        forth.asm):03648         * - the base block address. Aligned on a 16 byte address, followed by one #SP.
                      (        forth.asm):03649         * - the HEX dump area. Made up of 16 times 2 HEX numbers separated by #SP.
                      (        forth.asm):03650         * - the ASCII dump area. Made up of 16 characters.
                      (        forth.asm):03651         *
                      (        forth.asm):03652         * This results in the following "magical" constants:
                      (        forth.asm):03653         *
                      (        forth.asm):03654         * #TBUFF+53 points to the beginning of the ASCII dump area.
                      (        forth.asm):03655         * #TBUFF+69 points to the end of the output string (to be NUL terminated).
                      (        forth.asm):03656         *
F9FB 04               (        forth.asm):03657         DUMP    fcb     4               79-STANDARD (REF123)
F9FC 44554D50         (        forth.asm):03658                 fcc     'DUMP'          ( START NBYTES -- )
FA00 F9EE             (        forth.asm):03659                 fdb     HEX
FA02 C7               (        forth.asm):03660                 RFCS
FA03 BDE671           (        forth.asm):03661 (7)             jsr     NPOP
FA06 1F12             (        forth.asm):03662 (4)             tfr     x,y             NBYTES to Y
FA08 BDE671           (        forth.asm):03663 (7)             jsr     NPOP
                      (        forth.asm):03664         * Input parameter validation.
FA0B 1037C2           (        forth.asm):03665 (4)             cmpr    0,y
FA0E 2601             (        forth.asm):03666 (3)             bne     @dmproc         Proceed if NBYTES in non-zero
FA10 39               (        forth.asm):03667 (4)             rts                     A zero byte count is not flagged as an error
FA11 2E05             (        forth.asm):03668 (3)     @dmproc bgt     @dmpini
FA13 C60D             (        forth.asm):03669 (2)             ldb     #13             Illegal argument (negative)
FA15 BDE5EC           (        forth.asm):03670 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):03671         * Initialization and header processing.
FA18 3420             (        forth.asm):03672 (4+2)   @dmpini pshs    y               NBYTES
FA1A 3410             (        forth.asm):03673 (4+2)           pshs    x               START
FA1C 327E             (        forth.asm):03674 (4+1)           leas    -2,s            Allocate storage for STARTSEEN
                      (        forth.asm):03675         * Stack structure:
                      (        forth.asm):03676         * ,s    STARTSEEN               Set to 1 as soon as D is seen = to START
                      (        forth.asm):03677         *                               Only the LSB is used (1,s).
                      (        forth.asm):03678         * 2,s   START                   Lower bound of the area of interest (included)
                      (        forth.asm):03679         * 4,s   NBYTES                  Byte count to be dumped
FA1E 1F10             (        forth.asm):03680 (4)             tfr     x,d             START to D
FA20 C4F0             (        forth.asm):03681 (2)             andb    #$F0            Align to lower 16 byte boundary
FA22 6F61             (        forth.asm):03682 (6+1)           clr     1,s             Clear STARTSEEN until better informed
FA24 BDE1E5           (        forth.asm):03683 (7)             jsr     PUTCR           Print CR
FA27 11C620           (        forth.asm):03684 (3)             ldf     #SP             Preserved across called subroutines
FA2A 8E039A           (        forth.asm):03685 (3)             ldx     #TBUFF
FA2D 1F17             (        forth.asm):03686 (4)             tfr     x,v             Invariants: F has #SP, V has #TBUFF
FA2F 3406             (        forth.asm):03687 (4+2)           pshs    d
FA31 BDFACC           (        forth.asm):03688 (7)             jsr     _DMPHDR         D is not preserved
FA34 3506             (        forth.asm):03689 (4+2)           puls    d
FA36 6F84             (        forth.asm):03690 (6+0)           clr     ,x              NUL terminate the current output line
FA38 1F71             (        forth.asm):03691 (4)             tfr     v,x             Point back to the beginning of the output buffer
FA3A BDE1D8           (        forth.asm):03692 (7)             jsr     PUTS            Print header
                      (        forth.asm):03693         * Main loop. Index is D. We output everything to the string pointed by X.
                      (        forth.asm):03694         * Occasional resort to #TBUFF + 53 + (B % 15) will be used.
FA3D 3404             (        forth.asm):03695 (4+1)   @dmmain pshs    b
FA3F C40F             (        forth.asm):03696 (2)             andb    #$F
FA41 3504             (        forth.asm):03697 (4+1)           puls    b
FA43 2609             (        forth.asm):03698 (3)             bne     @dmphx          Not a beginning of line
FA45 BDE1E5           (        forth.asm):03699 (7)             jsr     PUTCR           Print CR
FA48 BDE172           (        forth.asm):03700 (7)             jsr     HDMP4           4 hex digit dump of the base block address
FA4B 11E780           (        forth.asm):03701 (5+1)           stf     ,x+             SPACE after the base address
FA4E 1F02             (        forth.asm):03702 (4)     @dmphx  tfr     d,y             Save D, prepare pointer to actual data
FA50 8D59             (        forth.asm):03703 (6)             bsr     _DMPINT
FA52 260A             (        forth.asm):03704 (3)             bne     @dmhx2          We are in the area of interest
FA54 8620             (        forth.asm):03705 (2)     @dmspc  lda     #SP
FA56 A780             (        forth.asm):03706 (4+1)           sta     ,x+             Nothing interesting here. Emit three spaces
FA58 A780             (        forth.asm):03707 (4+1)           sta     ,x+
FA5A A780             (        forth.asm):03708 (4+1)           sta     ,x+
FA5C 2016             (        forth.asm):03709 (3)             bra     @dmasc          Have #SP printed to the ASCII area
                      (        forth.asm):03710         * We are within the area of interest. Perform a regular HEX 2 digit conversion.
FA5E A6A4             (        forth.asm):03711 (4+0)   @dmhx2  lda     ,y
FA60 BDE18B           (        forth.asm):03712 (7)             jsr     HDMP2
FA63 11E780           (        forth.asm):03713 (5+1)           stf     ,x+
                      (        forth.asm):03714         * Decrement NBYTES, only if it is not already zero.
FA66 3420             (        forth.asm):03715 (4+2)           pshs    y
FA68 10AE66           (        forth.asm):03716 (6+1)           ldy     6,s             Offset plus 2 since we just pushed Y
FA6B 2705             (        forth.asm):03717 (3)             beq     @dmrsty         NBYTES is nul
FA6D 313F             (        forth.asm):03718 (4+1)           leay    -1,y            Decrement NBYTES
FA6F 10AF66           (        forth.asm):03719 (6+1)           sty     6,s
FA72 3520             (        forth.asm):03720 (4+2)   @dmrsty puls    y
FA74 8120             (        forth.asm):03721 (2)     @dmasc  cmpa    #SP
FA76 2504             (        forth.asm):03722 (3)             blo     @dmnprt         Character is not printable
FA78 817E             (        forth.asm):03723 (2)             cmpa    #$7E
FA7A 2302             (        forth.asm):03724 (3)             bls     @dmasis
FA7C 862E             (        forth.asm):03725 (2)     @dmnprt lda     #'.             Default character when not printable
FA7E 3410             (        forth.asm):03726 (4+2)   @dmasis pshs    x               The ASCII image is the character itself
FA80 8E03CF           (        forth.asm):03727 (3)             ldx     #TBUFF+53       Base address for the ASCII dump area
FA83 C40F             (        forth.asm):03728 (2)             andb    #$F             Offset is B modulo 15
FA85 3A               (        forth.asm):03729 (1)             abx                     Add offset to base address
FA86 A780             (        forth.asm):03730 (4+1)           sta     ,x+
FA88 3510             (        forth.asm):03731 (4+2)           puls    x
                      (        forth.asm):03732         * If B is #$F, we've just processed the last byte of a block. Print #TBUFF.
FA8A C10F             (        forth.asm):03733 (2)             cmpb    #$F
FA8C 1FAE             (        forth.asm):03734 (4)             tfr     cc,e
FA8E 2608             (        forth.asm):03735 (3)             bne     @dmctd
FA90 1F71             (        forth.asm):03736 (4)             tfr     v,x             #TBUFF to X
FA92 6F8845           (        forth.asm):03737 (6+1)           clr     69,x
FA95 BDE1D8           (        forth.asm):03738 (7)             jsr     PUTS
FA98 1F20             (        forth.asm):03739 (4)     @dmctd  tfr     y,d             Restore D
FA9A 104C             (        forth.asm):03740 (2)             incd
FA9C 1FEA             (        forth.asm):03741 (4)             tfr     e,cc
FA9E 269D             (        forth.asm):03742 (3)             bne     @dmmain         Proceed until end of block is reached
FAA0 6D65             (        forth.asm):03743 (5+1)           tst     5,s             NBYTES LSB
FAA2 2699             (        forth.asm):03744 (3)             bne     @dmmain
FAA4 6D64             (        forth.asm):03745 (5+1)           tst     4,s             NYTES MSB
FAA6 2695             (        forth.asm):03746 (3)             bne     @dmmain
FAA8 3266             (        forth.asm):03747 (4+1)           leas    6,s             Free stack storage used by local variables
FAAA 39               (        forth.asm):03748 (4)             rts
                      (        forth.asm):03749         
                      (        forth.asm):03750         * Predicate to indicate whether or not D covers the area of interest.
                      (        forth.asm):03751         * Upon return NZ will be set iff we are pointing to the "interesting" area.
FAAB 6D63             (        forth.asm):03752 (5+1)   _DMPINT tst     3,s             STARTSEEN?
FAAD 2608             (        forth.asm):03753 (3)             bne     @strsen         Yes, check for zero remaining byte count
FAAF 10A364           (        forth.asm):03754 (6+1)           cmpd    4,s             START
FAB2 240D             (        forth.asm):03755 (3)             bhs     @ststrt         Set STARTSEEN once and for all
FAB4 1A04             (        forth.asm):03756 (2)     @retwz  orcc    #ZFLAG          Set Z flag
FAB6 39               (        forth.asm):03757 (4)             rts
                      (        forth.asm):03758         * STARTSEEN is set. Check remaining byte count.
FAB7 6D67             (        forth.asm):03759 (5+1)   @strsen tst     7,s             NBYTES LSB
FAB9 260E             (        forth.asm):03760 (3)             bne     @retwnz
FABB 6D66             (        forth.asm):03761 (5+1)           tst     6,s             NBYTES MSB
FABD 260A             (        forth.asm):03762 (3)             bne     @retwnz
FABF 20F3             (        forth.asm):03763 (3)             bra     @retwz          We are beyond the interesting area
FAC1 3402             (        forth.asm):03764 (4+1)   @ststrt pshs    a
FAC3 8601             (        forth.asm):03765 (2)             lda     #1
FAC5 A764             (        forth.asm):03766 (4+1)           sta     4,s             Set STARTSEEN
FAC7 3502             (        forth.asm):03767 (4+1)           puls    a
FAC9 1CFB             (        forth.asm):03768 (2)     @retwnz andcc   #^ZFLAG         Clear Z flag
FACB 39               (        forth.asm):03769 (4)             rts
                      (        forth.asm):03770         
                      (        forth.asm):03771         * Print the dump header to X.
FACC 8620             (        forth.asm):03772 (2)     _DMPHDR lda     #SP
FACE A780             (        forth.asm):03773 (4+1)           sta     ,x+
FAD0 A780             (        forth.asm):03774 (4+1)           sta     ,x+
FAD2 A780             (        forth.asm):03775 (4+1)           sta     ,x+
FAD4 A780             (        forth.asm):03776 (4+1)           sta     ,x+
FAD6 5F               (        forth.asm):03777 (1)             clrb
FAD7 A780             (        forth.asm):03778 (4+1)   @dmhlp1 sta     ,x+             Space before every 2 hex digits
FAD9 1F98             (        forth.asm):03779 (4)             tfr     b,a
FADB BDE18B           (        forth.asm):03780 (7)             jsr     HDMP2
FADE 8620             (        forth.asm):03781 (2)             lda     #SP
FAE0 5C               (        forth.asm):03782 (1)             incb
FAE1 C110             (        forth.asm):03783 (2)             cmpb    #$10
FAE3 26F2             (        forth.asm):03784 (3)             bne     @dmhlp1
FAE5 A780             (        forth.asm):03785 (4+1)           sta     ,x+             Space before the ASCII dump
FAE7 5F               (        forth.asm):03786 (1)             clrb
FAE8 1F98             (        forth.asm):03787 (4)     @dmhlp2 tfr     b,a
FAEA BDE159           (        forth.asm):03788 (7)             jsr     HEX1D           Offset to HEX char stored to x+
FAED 5C               (        forth.asm):03789 (1)             incb
FAEE C110             (        forth.asm):03790 (2)             cmpb    #$10
FAF0 26F6             (        forth.asm):03791 (3)             bne     @dmhlp2
FAF2 39               (        forth.asm):03792 (4)             rts
                      (        forth.asm):03793         
                      (        forth.asm):03794                 IFNE    SSDFEAT
FAF3 02               (        forth.asm):03795         DOTTICK fcb     2               Non-standard (SwiftForth)
FAF4 2E27             (        forth.asm):03796                 fcb     $2E,$27         .' ( memaddr -- )
FAF6 F9FB             (        forth.asm):03797                 fdb     DUMP
FAF8 C7               (        forth.asm):03798                 RFCS
FAF9 BDE671           (        forth.asm):03799 (7)             jsr     NPOP
FAFC 1F12             (        forth.asm):03800 (4)             tfr     x,y
FAFE 8E034A           (        forth.asm):03801 (3)             ldx     #HEXBUF
FB01 BDE4CF           (        forth.asm):03802 (7)             jsr     FINDSYM
FB04 8E034A           (        forth.asm):03803 (3)             ldx     #HEXBUF
FB07 7EE1D8           (        forth.asm):03804 (3)             jmp     PUTS
                      (        forth.asm):03805                 ENDC
                      (        forth.asm):03806         
                      (        forth.asm):03807         * Display a dump of the data stack in the current BASE. In Leo Brodie's
                      (        forth.asm):03808         * "Starting Forth" the data stack is printed from the bottom up. So it is here.
FB0A 02               (        forth.asm):03809         DDUMP   fcb     2               ANSI (Optional "Programming tools" word set)
FB0B 2E53             (        forth.asm):03810                 fcc     '.S'            ( memaddr bcount -- )
                      (        forth.asm):03811                 IFNE    SSDFEAT
FB0D FAF3             (        forth.asm):03812                 fdb     DOTTICK
                      (        forth.asm):03813                 ELSE
                      (        forth.asm):03814                 fdb     DUMP
                      (        forth.asm):03815                 ENDC
FB0F C7               (        forth.asm):03816                 RFCS
FB10 CC0246           (        forth.asm):03817 (3)             ldd     #NSTBOT
FB13 103230           (        forth.asm):03818 (4)             subr    u,d
FB16 1044             (        forth.asm):03819 (2)             lsrd                    DEPTH is in D
FB18 272A             (        forth.asm):03820 (3)             beq     @ndump3         Data stack is empty
FB1A 3440             (        forth.asm):03821 (4+2)           pshs    u
FB1C CE0246           (        forth.asm):03822 (3)             ldu     #NSTBOT         Pointing to the bottom of the data stack
FB1F 8601             (        forth.asm):03823 (2)             lda     #1
FB21 972C             (        forth.asm):03824 (3)             sta     CVISSGN         Force a signed number conversion
FB23 3404             (        forth.asm):03825 (4+1)   @ndump1 pshs    b
FB25 AEC3             (        forth.asm):03826 (5+2)           ldx     ,--u
FB27 BDE30F           (        forth.asm):03827 (7)             jsr     CVNSTR
FB2A 8E039A           (        forth.asm):03828 (3)             ldx     #TBUFF
                      (        forth.asm):03829         # Skip leading spaces.
FB2D A680             (        forth.asm):03830 (4+1)   @ndump2 lda     ,x+
FB2F 8120             (        forth.asm):03831 (2)             cmpa    #SP
FB31 27FA             (        forth.asm):03832 (3)             beq     @ndump2
FB33 301F             (        forth.asm):03833 (4+1)           leax    -1,x
FB35 BDE1D8           (        forth.asm):03834 (7)             jsr     PUTS
FB38 8620             (        forth.asm):03835 (2)             lda     #SP
FB3A BDE1B4           (        forth.asm):03836 (7)             jsr     PUTCH
FB3D 3504             (        forth.asm):03837 (4+1)           puls    b
FB3F 5A               (        forth.asm):03838 (1)             decb
FB40 26E1             (        forth.asm):03839 (3)             bne     @ndump1
FB42 3540             (        forth.asm):03840 (4+2)           puls    u
FB44 39               (        forth.asm):03841 (4)     @ndump3 rts
                      (        forth.asm):03842         
FB45 04               (        forth.asm):03843         QRYDUP  fcb     4               79-STANDARD (REQ184)
FB46 3F445550         (        forth.asm):03844                 fcc     '?DUP'
FB4A FB0A             (        forth.asm):03845                 fdb     DDUMP
FB4C C7               (        forth.asm):03846                 RFCS
FB4D BDE671           (        forth.asm):03847 (7)             jsr     NPOP
FB50 3610             (        forth.asm):03848                 UCNPUSH                 Push back the original parameter
FB52 1037C1           (        forth.asm):03849 (4)             cmpr    0,x
FB55 2601             (        forth.asm):03850 (3)             bne     @qrydp1
FB57 39               (        forth.asm):03851 (4)             rts
FB58 7EE663           (        forth.asm):03852 (3)     @qrydp1 jmp     NPUSH           And DUP if NZ
                      (        forth.asm):03853         
FB5B 04               (        forth.asm):03854         TUCK    fcb     4               ANSI (Core ext)
FB5C 5455434B         (        forth.asm):03855                 fcc     'TUCK'          ( x1 x2 -- x2 x1 x2 ) i.e. SWAP OVER
FB60 FB45             (        forth.asm):03856                 fdb     QRYDUP
FB62 C7               (        forth.asm):03857                 RFCS
FB63 CC0242BDE304     (        forth.asm):03858                 MINDREQ 2
FB69 10ECC4           (        forth.asm):03859 (8+0)           ldq     ,u              D:W is X2:X1
FB6C 1E06             (        forth.asm):03860 (5)             exg     d,w
FB6E 10EDC4           (        forth.asm):03861 (8+0)           stq     ,u
FB71 1F61             (        forth.asm):03862 (4)             tfr     w,x             X has X2
FB73 7EE663           (        forth.asm):03863 (3)             jmp     NPUSH
                      (        forth.asm):03864         
FB76 03               (        forth.asm):03865         NIP     fcb     3               ANSI (Core ext)
FB77 4E4950           (        forth.asm):03866                 fcc     'NIP'           ( x1 x2 -- x2 ) i.e. SWAP DROP
FB7A FB5B             (        forth.asm):03867                 fdb     TUCK
FB7C C7               (        forth.asm):03868                 RFCS
FB7D CC0242BDE304     (        forth.asm):03869                 MINDREQ 2
FB83 ECC4             (        forth.asm):03870 (5+0)           ldd     ,u
FB85 3342             (        forth.asm):03871 (4+1)           leau    2,u
FB87 EDC4             (        forth.asm):03872 (5+0)           std     ,u
FB89 39               (        forth.asm):03873 (4)             rts
                      (        forth.asm):03874         
FB8A 03               (        forth.asm):03875         DUP     fcb     3               79-STANDARD (REQ205)
FB8B 445550           (        forth.asm):03876                 fcc     'DUP'
FB8E FB76             (        forth.asm):03877                 fdb     NIP
FB90 C7               (        forth.asm):03878                 RFCS
FB91 CC0244BDE304     (        forth.asm):03879                 MINDREQ 1
FB97 AEC4             (        forth.asm):03880 (5+0)           ldx     ,u
FB99 7EE663           (        forth.asm):03881 (3)             jmp     NPUSH
                      (        forth.asm):03882         
FB9C 04               (        forth.asm):03883         DROP    fcb     4               79-STANDARD (REQ233)
FB9D 44524F50         (        forth.asm):03884                 fcc     'DROP'
FBA1 FB8A             (        forth.asm):03885                 fdb     DUP
FBA3 C7               (        forth.asm):03886                 RFCS
FBA4 7EE671           (        forth.asm):03887 (3)             jmp     NPOP
                      (        forth.asm):03888         
FBA7 04               (        forth.asm):03889         SWAP    fcb     4               79-STANDARD (REQ230)
FBA8 53574150         (        forth.asm):03890                 fcc     'SWAP'
FBAC FB9C             (        forth.asm):03891                 fdb     DROP
FBAE C7               (        forth.asm):03892                 RFCS
FBAF CC0242BDE304     (        forth.asm):03893                 MINDREQ 2               We need at least two cells stacked up
FBB5 10ECC4           (        forth.asm):03894 (8+0)           ldq     ,u              In place SWAP
FBB8 1E06             (        forth.asm):03895 (5)             exg     d,w
FBBA 10EDC4           (        forth.asm):03896 (8+0)           stq     ,u
FBBD 39               (        forth.asm):03897 (4)             rts
                      (        forth.asm):03898         
FBBE 04               (        forth.asm):03899         PICK    fcb     4
FBBF 5049434B         (        forth.asm):03900                 fcc     'PICK'
FBC3 FBA7             (        forth.asm):03901                 fdb     SWAP
FBC5 C7               (        forth.asm):03902                 RFCS
FBC6 BDE671           (        forth.asm):03903 (7)             jsr     NPOP
FBC9 CC0246           (        forth.asm):03904 (3)     PICK1   ldd     #NSTBOT
FBCC 103230           (        forth.asm):03905 (4)             subr    u,d
FBCF 1044             (        forth.asm):03906 (2)             lsrd                    D has the data stack depth in cells
FBD1 103710           (        forth.asm):03907 (4)             cmpr    x,d
FBD4 2405             (        forth.asm):03908 (3)             bcc     @pick1
FBD6 C60D             (        forth.asm):03909 (2)     ERRPCK  ldb     #13             Argument is greater than DEPTH
FBD8 BDE5EC           (        forth.asm):03910 (7)             jsr     ERRHDLR         No return
FBDB 1F10             (        forth.asm):03911 (4)     @pick1  tfr     x,d
FBDD 104D             (        forth.asm):03912 (2)             tstd
FBDF 27F5             (        forth.asm):03913 (3)             beq     ERRPCK
FBE1 104A             (        forth.asm):03914 (2)             decd                    Minus 1, unlike in the Z80 implementation
FBE3 1048             (        forth.asm):03915 (2)             lsld                    Times 2
FBE5 1F31             (        forth.asm):03916 (4)             tfr     u,x
FBE7 308B             (        forth.asm):03917 (4+2)           leax    d,x
FBE9 1F12             (        forth.asm):03918 (4)             tfr     x,y             For the sake of ROLL's implementation
FBEB AE84             (        forth.asm):03919 (5+0)           ldx     ,x
FBED 3610             (        forth.asm):03920                 UCNPUSH
FBEF 39               (        forth.asm):03921 (4)             rts
                      (        forth.asm):03922         
FBF0 04               (        forth.asm):03923         OVER    fcb     4
FBF1 4F564552         (        forth.asm):03924                 fcc     'OVER'
FBF5 FBBE             (        forth.asm):03925                 fdb     PICK
FBF7 C7               (        forth.asm):03926                 RFCS
FBF8 8E0002           (        forth.asm):03927 (3)             ldx     #2
FBFB 20CC             (        forth.asm):03928 (3)             bra     PICK1
                      (        forth.asm):03929         
FBFD 04               (        forth.asm):03930         ROLL    fcb     4
FBFE 524F4C4C         (        forth.asm):03931                 fcc     'ROLL'
FC02 FBF0             (        forth.asm):03932                 fdb     OVER
FC04 C7               (        forth.asm):03933                 RFCS
FC05 BDE671           (        forth.asm):03934 (7)             jsr     NPOP
FC08 1F16             (        forth.asm):03935 (4)     ROLL1   tfr     x,w
FC0A 8DBD             (        forth.asm):03936 (6)             bsr     PICK1           Let PICK do the error handling
FC0C 3121             (        forth.asm):03937 (4+1)           leay    1,y             Point to the LSB since we're moving backward
FC0E 1F21             (        forth.asm):03938 (4)             tfr     y,x
FC10 301E             (        forth.asm):03939 (4+1)           leax    -2,x
FC12 103066           (        forth.asm):03940 (4)             addr    w,w
FC15 113912           (        forth.asm):03941 (6+?)           tfm     x-,y-
FC18 7EE671           (        forth.asm):03942 (3)             jmp     NPOP
                      (        forth.asm):03943         
FC1B 03               (        forth.asm):03944         ROT     fcb     3
FC1C 524F54           (        forth.asm):03945                 fcc     'ROT'
FC1F FBFD             (        forth.asm):03946                 fdb     ROLL
FC21 C7               (        forth.asm):03947                 RFCS
FC22 8E0003           (        forth.asm):03948 (3)             ldx     #3
FC25 20E1             (        forth.asm):03949 (3)             bra     ROLL1
                      (        forth.asm):03950         
FC27 04               (        forth.asm):03951         MROT    fcb     4
FC28 2D524F54         (        forth.asm):03952                 fcc     '-ROT'
FC2C FC1B             (        forth.asm):03953                 fdb     ROT
FC2E C7               (        forth.asm):03954                 RFCS
FC2F 8DF1             (        forth.asm):03955                 RFXT    bsr,ROT+6       XT for ROT
FC31 20EF             (        forth.asm):03956                 RFXT    bra,ROT+6       XT for ROT
                      (        forth.asm):03957         
FC33 02               (        forth.asm):03958         CCOMMA  fcb     2               79-STANDARD (REF)
FC34 432C             (        forth.asm):03959                 fcc     'C,'
FC36 FC27             (        forth.asm):03960                 fdb     MROT
FC38 C7               (        forth.asm):03961                 RFCS
FC39 BDE671           (        forth.asm):03962 (7)             jsr     NPOP
FC3C 1F10             (        forth.asm):03963 (4)             tfr     x,d
FC3E 109E08           (        forth.asm):03964 (5)             ldy     DICEND
FC41 E7A0             (        forth.asm):03965 (4+1)           stb     ,y+
FC43 109F08           (        forth.asm):03966 (5)             sty     DICEND
FC46 39               (        forth.asm):03967 (4)             rts
                      (        forth.asm):03968         
FC47 01               (        forth.asm):03969         COMMA   fcb     1               79-STANDARD (REQ143)
FC48 2C               (        forth.asm):03970                 fcc     ','
FC49 FC33             (        forth.asm):03971                 fdb     CCOMMA
FC4B C7               (        forth.asm):03972                 RFCS
FC4C BDE671           (        forth.asm):03973 (7)             jsr     NPOP
FC4F 109E08           (        forth.asm):03974 (5)             ldy     DICEND
FC52 AFA1             (        forth.asm):03975 (5+2)           stx     ,y++
FC54 109F08           (        forth.asm):03976 (5)             sty     DICEND
FC57 39               (        forth.asm):03977 (4)             rts
                      (        forth.asm):03978         
FC58 05               (        forth.asm):03979         ALLOT   fcb     5               79-STANDARD (REQ154)
FC59 414C4C4F54       (        forth.asm):03980                 fcc     'ALLOT'         ( signedbytecount -- )
FC5E FC47             (        forth.asm):03981                 fdb     COMMA
FC60 C7               (        forth.asm):03982                 RFCS
FC61 BDE671           (        forth.asm):03983 (7)             jsr     NPOP
FC64 109E08           (        forth.asm):03984 (5)             ldy     DICEND
FC67 103012           (        forth.asm):03985 (4)             addr    x,y
FC6A 109F08           (        forth.asm):03986 (5)             sty     DICEND
FC6D 39               (        forth.asm):03987 (4)             rts
                      (        forth.asm):03988         
FC6E 04               (        forth.asm):03989         FILL    fcb     4               79-STANDARD (REQ234)
FC6F 46494C4C         (        forth.asm):03990                 fcc     'FILL'
FC73 FC58             (        forth.asm):03991                 fdb     ALLOT
FC75 C7               (        forth.asm):03992                 RFCS
FC76 BDE671           (        forth.asm):03993 (7)             jsr     NPOP
FC79 1F16             (        forth.asm):03994 (4)             tfr     x,w             Byte fill value to W
FC7B BDE671           (        forth.asm):03995 (7)     FILL1   jsr     NPOP
FC7E 1F12             (        forth.asm):03996 (4)             tfr     x,y             Byte count to Y
FC80 1E26             (        forth.asm):03997 (5)             exg     y,w             Byte count to W, byte fill value to Y
FC82 BDE671           (        forth.asm):03998 (7)             jsr     NPOP            Destination address to X
FC85 105D             (        forth.asm):03999 (2)             tstw
FC87 2F0B             (        forth.asm):04000 (3)             ble     @filend
FC89 1F20             (        forth.asm):04001 (4)             tfr     y,d             Byte fill value to B
FC8B E784             (        forth.asm):04002 (4+0)           stb     ,x
FC8D 105A             (        forth.asm):04003 (2)             decw
FC8F 3101             (        forth.asm):04004 (4+1)           leay    1,x
FC91 113812           (        forth.asm):04005 (6+?)           tfm     x+,y+
FC94 39               (        forth.asm):04006 (4)     @filend rts
                      (        forth.asm):04007         
FC95 06               (        forth.asm):04008         BLANKS  fcb     6               79-STANDARD (REF152)
FC96 424C414E4B53     (        forth.asm):04009                 fcc     'BLANKS'
FC9C FC6E             (        forth.asm):04010                 fdb     FILL
FC9E C7               (        forth.asm):04011                 RFCS
FC9F 10860020         (        forth.asm):04012 (4)             ldw     #SP
FCA3 20D6             (        forth.asm):04013 (3)             bra     FILL1
                      (        forth.asm):04014         
FCA5 06               (        forth.asm):04015         CMOVED  fcb     6               FORTH-83
FCA6 434D4F56453E     (        forth.asm):04016                 fcc     'CMOVE>'
FCAC FC95             (        forth.asm):04017                 fdb     BLANKS
FCAE C7               (        forth.asm):04018                 RFCS
FCAF BDE44A           (        forth.asm):04019 (7)             jsr     ACQMOVP
FCB2 105D             (        forth.asm):04020 (2)             tstw
FCB4 270D             (        forth.asm):04021 (3)             beq     @cmovd1
FCB6 105A             (        forth.asm):04022 (2)             decw
FCB8 103061           (        forth.asm):04023 (4)             addr    w,x
FCBB 103062           (        forth.asm):04024 (4)             addr    w,y
FCBE 105C             (        forth.asm):04025 (2)             incw
FCC0 113912           (        forth.asm):04026 (6+?)           tfm     x-,y-
FCC3 39               (        forth.asm):04027 (4)     @cmovd1 rts
                      (        forth.asm):04028         
FCC4 06               (        forth.asm):04029         DCMOVE  fcb     6               79-STANDARD (REF)
FCC5 3C434D4F5645     (        forth.asm):04030                 fcc     '<CMOVE'
FCCB FCA5             (        forth.asm):04031                 fdb     CMOVED
FCCD C7               (        forth.asm):04032                 RFCS
FCCE BDE44A           (        forth.asm):04033 (7)             jsr     ACQMOVP
FCD1 113912           (        forth.asm):04034 (6+?)           tfm     x-,y-
FCD4 39               (        forth.asm):04035 (4)             rts
                      (        forth.asm):04036         
FCD5 05               (        forth.asm):04037         CMOVE   fcb     5               79-STANDARD (REQ153)
FCD6 434D4F5645       (        forth.asm):04038                 fcc     'CMOVE'
FCDB FCC4             (        forth.asm):04039                 fdb     DCMOVE
FCDD C7               (        forth.asm):04040                 RFCS
FCDE BDE44A           (        forth.asm):04041 (7)             jsr     ACQMOVP
FCE1 113812           (        forth.asm):04042 (6+?)           tfm     x+,y+
FCE4 39               (        forth.asm):04043 (4)             rts
                      (        forth.asm):04044         
FCE5 04               (        forth.asm):04045         MOVE    fcb     4               79-STANDARD (REQ113)
FCE6 4D4F5645         (        forth.asm):04046                 fcc     'MOVE'          ( srcaddr dstaddr ncells -- )
FCEA FCD5             (        forth.asm):04047                 fdb     CMOVE
FCEC C7               (        forth.asm):04048                 RFCS
FCED BDE44A           (        forth.asm):04049 (7)             jsr     ACQMOVP
FCF0 105D             (        forth.asm):04050 (2)             tstw
FCF2 2F06             (        forth.asm):04051 (3)             ble     @move1
FCF4 103066           (        forth.asm):04052 (4)             addr    w,w             Convert cells to bytes
FCF7 113812           (        forth.asm):04053 (6+?)           tfm     x+,y+
FCFA 39               (        forth.asm):04054 (4)     @move1  rts
                      (        forth.asm):04055         
FCFB 05               (        forth.asm):04056         CELLS   fcb     5               ANSI-X3.215-1994
FCFC 43454C4C53       (        forth.asm):04057                 fcc     'CELLS'
FD01 FCE5             (        forth.asm):04058                 fdb     MOVE
FD03 C7               (        forth.asm):04059                 RFCS
FD04 BDE671           (        forth.asm):04060 (7)             jsr     NPOP
FD07 103011           (        forth.asm):04061 (4)             addr    x,x
FD0A 3610             (        forth.asm):04062                 UCNPUSH
FD0C 39               (        forth.asm):04063 (4)             rts
                      (        forth.asm):04064         
FD0D 04               (        forth.asm):04065         LAST    fcb     4               79-STANDARD (REF)
FD0E 4C415354         (        forth.asm):04066                 fcc     'LAST'
FD12 FCFB             (        forth.asm):04067                 fdb     CELLS
FD14 C7               (        forth.asm):04068                 RFCS
FD15 9E06             (        forth.asm):04069 (4)             ldx     LSTWAD
FD17 7EE663           (        forth.asm):04070 (3)             jmp     NPUSH
                      (        forth.asm):04071         
FD1A 04               (        forth.asm):04072         HERE    fcb     4               79-STANDARD (REQ188)
FD1B 48455245         (        forth.asm):04073                 fcc     'HERE'
FD1F FD0D             (        forth.asm):04074                 fdb     LAST
FD21 C7               (        forth.asm):04075                 RFCS
FD22 9E08             (        forth.asm):04076 (4)             ldx     DICEND
FD24 7EE663           (        forth.asm):04077 (3)             jmp     NPUSH
                      (        forth.asm):04078         
FD27 02               (        forth.asm):04079         PLUSST  fcb     2               79-STANDARD (REQ157)
FD28 2B21             (        forth.asm):04080                 fcc     '+!'            ( incr addr -- )
FD2A FD1A             (        forth.asm):04081                 fdb     HERE
FD2C C7               (        forth.asm):04082                 RFCS
FD2D CC0242BDE304     (        forth.asm):04083                 MINDREQ 2               We need at least two cells stacked up
FD33 AEC4             (        forth.asm):04084 (5+0)           ldx     ,u              ADDR to X
FD35 EC84             (        forth.asm):04085 (5+0)           ldd     ,x              @ADDR to D
FD37 E342             (        forth.asm):04086 (5+1)           addd    2,u             Add INCR to D
FD39 ED84             (        forth.asm):04087 (5+0)   PLUSST1 std     ,x              Store the sum back to ADDR
FD3B 3344             (        forth.asm):04088 (4+1)           leau    4,u             Drop two cells from the data stack
FD3D 39               (        forth.asm):04089 (4)             rts
                      (        forth.asm):04090         
FD3E 03               (        forth.asm):04091         ONEPST  fcb     3               79-STANDARD (REF)
FD3F 312B21           (        forth.asm):04092                 fcc     '1+!'
FD42 FD27             (        forth.asm):04093                 fdb     PLUSST
FD44 C7               (        forth.asm):04094                 RFCS
FD45 CC0244BDE304     (        forth.asm):04095                 MINDREQ 1
FD4B AEC4             (        forth.asm):04096 (5+0)           ldx     ,u
FD4D EC84             (        forth.asm):04097 (5+0)           ldd     ,x
FD4F 104C             (        forth.asm):04098 (2)             incd
FD51 ED84             (        forth.asm):04099 (5+0)           std     ,x
FD53 3342             (        forth.asm):04100 (4+1)           leau    2,u
FD55 39               (        forth.asm):04101 (4)             rts
                      (        forth.asm):04102         
FD56 02               (        forth.asm):04103         MINUSST fcb     2               79-STANDARD (REQ157)
FD57 2D21             (        forth.asm):04104                 fcc     '-!'            ( incr addr -- )
FD59 FD3E             (        forth.asm):04105                 fdb     ONEPST
FD5B C7               (        forth.asm):04106                 RFCS
FD5C CC0242BDE304     (        forth.asm):04107                 MINDREQ 2               We need at least two cells stacked up
FD62 AEC4             (        forth.asm):04108 (5+0)           ldx     ,u              ADDR to X
FD64 EC84             (        forth.asm):04109 (5+0)           ldd     ,x              @ADDR to D
FD66 A342             (        forth.asm):04110 (5+1)           subd    2,u             Substract INCR from D
FD68 20CF             (        forth.asm):04111 (3)             bra     PLUSST1
                      (        forth.asm):04112         
FD6A 02               (        forth.asm):04113         CSTORE  fcb     2               79-STANDARD (REQ219)
FD6B 4321             (        forth.asm):04114                 fcc     'C!'            ( val8 addr -- )
FD6D FD56             (        forth.asm):04115                 fdb     MINUSST
FD6F C7               (        forth.asm):04116                 RFCS
FD70 CC0242BDE304     (        forth.asm):04117                 MINDREQ 2               We need at least two cells stacked up
FD76 A643             (        forth.asm):04118 (4+1)           lda     3,u             VAL8 to A
FD78 A7D4             (        forth.asm):04119 (4+3)           sta     [,u]            Actual store to ADDR
FD7A 3344             (        forth.asm):04120 (4+1)           leau    4,u             Drop two cells from the data stack
FD7C 39               (        forth.asm):04121 (4)             rts
                      (        forth.asm):04122         
FD7D 01               (        forth.asm):04123         STORE   fcb     1               79-STANDARD (REQ112)
FD7E 21               (        forth.asm):04124                 fcc     '!'             ( data addr -- )
FD7F FD6A             (        forth.asm):04125                 fdb     CSTORE
FD81 C7               (        forth.asm):04126                 RFCS
FD82 CC0242BDE304     (        forth.asm):04127                 MINDREQ 2               At least two cells need to be stacked up
FD88 EC42             (        forth.asm):04128 (5+1)           ldd     2,u             DATA to D
FD8A EDD4             (        forth.asm):04129 (5+3)           std     [,u]            Actual store to ADDR
FD8C 3344             (        forth.asm):04130 (4+1)           leau    4,u             Drop two cells from the user stack
FD8E 39               (        forth.asm):04131 (4)             rts
                      (        forth.asm):04132         
FD8F 02               (        forth.asm):04133         CFETCH  fcb     2               79-STANDARD (REQ156)
FD90 4340             (        forth.asm):04134                 fcc     'C@'            ( addr -- val8 )
FD92 FD7D             (        forth.asm):04135                 fdb     STORE
FD94 C7               (        forth.asm):04136                 RFCS
FD95 CC0244BDE304     (        forth.asm):04137                 MINDREQ 1               We need at least one cell stacked up
FD9B 4F               (        forth.asm):04138 (1)             clra
FD9C E6D4             (        forth.asm):04139 (4+3)           ldb     [,u]
FD9E EDC4             (        forth.asm):04140 (5+0)           std     ,u
FDA0 39               (        forth.asm):04141 (4)             rts
                      (        forth.asm):04142         
FDA1 01               (        forth.asm):04143         QMARK   fcb     1               79-STANDARD (REQ194)
FDA2 3F               (        forth.asm):04144                 fcc     '?'
FDA3 FD8F             (        forth.asm):04145                 fdb     CFETCH
FDA5 C7               (        forth.asm):04146                 RFCS
FDA6 BD0C15           (        forth.asm):04147 (7)             jsr     RAMFTCH         Call the RAM based incarnation of @
FDA9 7EF4E0           (        forth.asm):04148                 RFXT    jmp,DOT+4       XT for .
                      (        forth.asm):04149         
                      (        forth.asm):04150         * End of ROM part of the builtin dictionary.
     FDAC             (        forth.asm):04151         THEEND  equ     *               This is the end, Beautiful friend
                      (        forth.asm):04152         *                               This is the end, My only friend
                      (        forth.asm):04153         
                      (        forth.asm):04154         * This transactional word is relocated to RAM, so that we can compile new
                      (        forth.asm):04155         * definitions. FORTHIN will take care of that and adjust the relevant pointers.
FDAC 01               (        forth.asm):04156         FETCH   fcb     1               79-STANDARD (REQ199)
FDAD 40               (        forth.asm):04157                 fcc     '@'             ( addr -- data )
FDAE FDA1             (        forth.asm):04158                 fdb     QMARK
FDB0 C7               (        forth.asm):04159                 RFCS
FDB1 CC0244BDE304     (        forth.asm):04160                 MINDREQ 1               At least one cell needs to be stacked up
FDB7 ECD4             (        forth.asm):04161 (5+3)           ldd     [,u]
FDB9 EDC4             (        forth.asm):04162 (5+0)           std     ,u              Returned through the data stack
FDBB 39               (        forth.asm):04163 (4)             rts
                      (        forth.asm):04164         
     FDBC             (        forth.asm):04165         REALEND equ     *
                      (        forth.asm):04166         
                      (        forth.asm):04167         *******************************************************************************
                      (        forth.asm):04168         * String literals.
                      (        forth.asm):04169         
                      (        forth.asm):04170         * Using CR+LF as it is Minicom's default.
FDBC 0C               (        forth.asm):04171         BOOTMSG fcb     FF              Form Feed (clear the screen in console context)
FDBD 5A3739466F727468 (        forth.asm):04172                 fcc     'Z79Forth - 6309 FORTH-79 Standard Sub-set.'
     202D203633303920
     464F5254482D3739
     205374616E646172
     64205375622D7365
     742E
FDE7 0D0A             (        forth.asm):04173                 fcb     CR,LF
FDE9 3230323031303138 (        forth.asm):04174                 fcc     '20201018 Copyright Francois Laagel (2020).'
     20436F7079726967
     6874204672616E63
     6F6973204C616167
     656C202832303230
     292E
FE13 0D0A0D0A00       (        forth.asm):04175                 fcb     CR,LF,CR,LF,NUL
                      (        forth.asm):04176         
FE18 52414D3020636865 (        forth.asm):04177         RAMOKM  fcc     'RAM0 check OK: 32 KB.'
     636B204F4B3A2033
     32204B422E
FE2D 0D0A00           (        forth.asm):04178         CRLFSTR fcb     CR,LF,NUL
                      (        forth.asm):04179         
FE30 52414D3020636865 (        forth.asm):04180         RAMFM   fcc     'RAM0 check failure.'
     636B206661696C75
     72652E
FE43 0D0A00           (        forth.asm):04181                 fcb     CR,LF,NUL
                      (        forth.asm):04182         
FE46 204F4B           (        forth.asm):04183         OKPRMPT fcc     ' OK'
FE49 0D0A00           (        forth.asm):04184                 fcb     CR,LF,NUL
                      (        forth.asm):04185         
                      (        forth.asm):04186         * Error messages for IODZHDL.
FE4C 496C6C6567616C20 (        forth.asm):04187         IOPERRM fcn     'Illegal opcode near '
     6F70636F6465206E
     6561722000
FE61 4469766973696F6E (        forth.asm):04188         DV0ERRM fcn     'Division by zero near '
     206279207A65726F
     206E6561722000
                      (        forth.asm):04189         
FE78 4461746120737461 (        forth.asm):04190         ERRMTBL fcn     'Data stack overflow'   Error 0
     636B206F76657266
     6C6F7700
FE8C 4461746120737461 (        forth.asm):04191                 fcn     'Data stack underflow'  Error 1
     636B20756E646572
     666C6F7700
FEA1 556E646566696E65 (        forth.asm):04192                 fcn     'Undefined'             Error 2
     6400
FEAB 557365722041424F (        forth.asm):04193                 fcn     'User ABORT'            Error 3
     525400
FEB6 00               (        forth.asm):04194                 fcn     ''                      Error 4 (formerly "Division by zero")
FEB7 4D697373696E6720 (        forth.asm):04195                 fcn     'Missing word name'     Error 5
     776F7264206E616D
     6500
FEC9 496E636F72726563 (        forth.asm):04196                 fcn     'Incorrect STATE'       Error 6
     7420535441544500
FED9 52657475726E2073 (        forth.asm):04197                 fcn     'Return stack overflow' Error 7
     7461636B206F7665
     72666C6F7700
FEEF 52657475726E2073 (        forth.asm):04198                 fcn     'Return stack underflow' Error 8
     7461636B20756E64
     6572666C6F7700
FF06 496C6C6567616C20 (        forth.asm):04199                 fcn     'Illegal construct'     Error 9
     636F6E7374727563
     7400
FF18 417373657274696F (        forth.asm):04200                 fcn     'Assertion failed'      Error 10
     6E206661696C6564
     00
FF29 522F4F20776F7264 (        forth.asm):04201                 fcn     'R/O word'              Error 11
     00
FF32 4D697373696E6720 (        forth.asm):04202                 fcn     'Missing delimiter'     Error 12
     64656C696D697465
     7200
FF44 496C6C6567616C20 (        forth.asm):04203                 fcn     'Illegal argument'      Error 13
     617267756D656E74
     00
FF55 4E6F206D61746368 (        forth.asm):04204                 fcn     'No matching CREATE'    Error 14
     696E672043524541
     544500
FF68 496E76616C696420 (        forth.asm):04205                 fcn     'Invalid BASE'          Error 15
     4241534500
FF75 576F7264206E616D (        forth.asm):04206                 fcn     'Word name too long'    Error 16
     6520746F6F206C6F
     6E6700
FF88 494F206572726F72 (        forth.asm):04207                 fcn     'IO error'              Error 17
     00
                      (        forth.asm):04208         
     FF91             (        forth.asm):04209         AVL     equ     *               Marker of available EEPROM space left
                      (        forth.asm):04210         
                      (        forth.asm):04211         *******************************************************************************
                      (        forth.asm):04212         * Interrupt vector table
                      (        forth.asm):04213                 org     VECTBL
                      (        forth.asm):04214         
FFF0 E000             (        forth.asm):04215                 fdb     IODZHDL         Illegal opcode/Division by zero trap
FFF2 E035             (        forth.asm):04216                 fdb     SWI3HDL         SWI 3 interrupt vector address
FFF4 E035             (        forth.asm):04217                 fdb     SWI2HDL         SWI 2 interrupt vector address
FFF6 E035             (        forth.asm):04218                 fdb     FIRQHDL         FIRQ interrupt vector address
FFF8 E035             (        forth.asm):04219                 fdb     IRQHDL          IRA interrupt vector address
FFFA E035             (        forth.asm):04220                 fdb     SWIHDL          SWI interrupt vector address
FFFC E035             (        forth.asm):04221                 fdb     NMIHDL          NMI vector address
FFFE E036             (        forth.asm):04222                 fdb     RSTHDL          RESET vector address
                      (        forth.asm):04223         

Symbol Table:
[ G] _BS                              E1EF
[ G] _DMPHDR                          FACC
[ G] _DMPINT                          FAAB
[ G] _INTERP                          E0B6
[ G] ABORT                            EF6B
[ G] ABS                              EE10
[ G] AC8N1                            0014
[ G] ACD16                            0001
[ G] ACD64                            0002
[ G] ACDVSEL                          0001
[ G] ACIACTL                          D800
[ G] ACIADAT                          D801
[ G] ACIOVRN                          0020
[ G] ACIRDRF                          0001
[ G] ACIRSET                          0043
[ G] ACIRTS0                          0015
[ G] ACIRTS1                          0055
[ G] ACITDRE                          0002
[ G] ACQMOVP                          E44A
[ G] ACQVMRA                          E450
[ G] ACRST                            0003
[ G] ACRTS0                           0000
[ G] ACRTS1                           0040
[ G] ADDS                             E19A
[ G] ADIV16                           E16D
[ G] AGAIN                            EE4C
[ G] ALLOT                            FC58
[ G] AND                              ECFA
[ G] AVL                              FF91
[ G] BASE                             F9B3
[ G] BCSOPC                           2503
[ G] BDICEND                          010C
[ G] BDIRTY                           0004
[ G] BEGIN                            EE3E
[ G] BFDISP                           0410
[ G] BIN                              F9C1
[ G] BINUSE                           0001
[ G] BK2BBRA                          E6E5
[ G] BKCHAR                           F115
[ G] BKCOMP                           EFB5
[ G] BKIN2PT                          E6EA
[ G] BKQUOT                           EFE9
[ G] BKSLSH                           F1CC
[ G] BL                               F54C
[ G] BLANKS                           FC95
[ G] BLK                              E905
[ G] BLK2BB                           E6B7
[ G] BLKSIZ                           0400
[ G] BLOCK                            E8D5
[ G] BLSTWAD                          010A
[ G] BMAPPD                           0002
[ G] BNEOPC                           2603
[ G] BOBLKNO                          0402
[ G] BOFLAGS                          0401
[ G] BOOTMSG                          FDBC
[ G] BS                               0008
[ G] BSBFADR                          0122
[ G] BUF0                             03F0
[ G] BUF1                             0800
[ G] BUFFER                           E888
[ G] BYE                              F10B
[ G] CCOMMA                           FC33
[ G] CELLS                            FCFB
[ G] CF1BKRD                          E7D7
[ G] CF1BKWR                          E7F2
[ G] CF1BPRE                          E7BA
[ G] CF1SRD                           E78C
[ G] CF1SWR                           E7A5
[ G] CFANTHS                          E737
[ G] CFBASE                           C000
[ G] CFBSYB                           0080
[ G] CFCARDP                          0131
[ G] CFCHIGR                          C005
[ G] CFCLOWR                          C004
[ G] CFCMDIS                          E71C
[ G] CFCMMIR                          0132
[ G] CFCOMDR                          C007
[ G] CFDATAR                          C000
[ G] CFDRHDR                          C006
[ G] CFDRQB                           0008
[ G] CFDRSEL                          E72E
[ G] CFDSCB                           0010
[ G] CFDWFB                           0020
[ G] CFERRB                           0001
[ G] CFERRCD                          0133
[ G] CFERRCK                          E70F
[ G] CFERROR                          C001
[ G] CFETCH                           FD8F
[ G] CFFEATR                          C001
[ G] CFIDDEV                          00EC
[ G] CFINIT                           E755
[ G] CFLAG                            0001
[ G] CFR1SRA                          E7A4
[ G] CFRDY                            E6F9
[ G] CFRDYB                           0040
[ G] CFRSCTS                          0020
[ G] CFSCNTR                          C002
[ G] CFSCSZ                           0200
[ G] CFSETFT                          00EF
[ G] CFSNUMR                          C003
[ G] CFSTATR                          C007
[ G] CFWAIT                           E6F1
[ G] CFWSCTS                          0030
[ G] CHAR                             F124
[ G] CHKNDPT                          E304
[ G] CHKRTS                           E145
[ G] CKBASE                           E29D
[ G] CKBASRA                          E2AD
[ G] CKDPTRA                          E30F
[ G] CKOVRUN                          0000
[ G] CMDBFSZ                          0084
[ G] CMDBUF                           02C6
[ G] CMDLNSZ                          0124
[ G] CMOVE                            FCD5
[ G] CMOVED                           FCA5
[ G] CMP2                             E433
[ G] CMP2RA                           E439
[ G] CMPCOM1                          F02F
[ G] CMPCOMA                          F020
[ G] COM                              ED11
[ G] COM0                             ED18
[ G] COMMA                            FC47
[ G] COMP                             E103
[ G] COMPC                            F03E
[ G] COMPILE                          F003
[ G] COMPLRA                          E11D
[ G] COMPR                            F056
[ G] CONS                             EA66
[ G] CONTIND                          F6C1
[ G] CONVERT                          F357
[ G] COUNT                            F5C0
[ G] CR                               000D
[ G] CREAT0                           E9F6
[ G] CREAT1                           EA0E
[ G] CREATE                           E9EC
[ G] CRLF                             F58C
[ G] CRLFSTR                          FE2D
[ G] CSSNTVE                          0000
[ G] CSTORE                           FD6A
[ G] CSUMFLM                          EB53
[ G] CURTOKL                          012D
[ G] CVISSGN                          012C
[ G] CVNSTR                           E30F
[ G] CVT                              F41F
[ G] CVT0                             F426
[ G] CVT1                             F42E
[ G] CVTB                             F4CF
[ G] CVTE                             F3D3
[ G] CVTFCN                           012A
[ G] DASHTR                           F5D6
[ G] DCMOVE                           FCC4
[ G] DDUMP                            FB0A
[ G] DEBUG                            0000
[ G] DECIMAL                          F9DD
[ G] DEFFLG                           012F
[ G] DEFFLM                           0040
[ G] DEPTH                            E9D6
[ G] DEV0                             C000
[ G] DEV1                             C400
[ G] DEV2                             C800
[ G] DEV3                             CC00
[ G] DEV4                             D000
[ G] DEV5                             D400
[ G] DEV6                             D800
[ G] DEV7                             DC00
[ G] DICEND                           0108
[ G] DIFF                             EC8E
[ G] DIV                              F837
[ G] DIV1                             F840
[ G] DIVFCN                           0128
[ G] DLESS                            F2A9
[ G] DNEG                             F276
[ G] DO                               EB6A
[ G] DOES                             EA16
[ G] DOESEX                           EA25
[ G] DOEX                             EB7D
[ G] DOT                              F4DB
[ G] DOTR                             F505
[ G] DOTR0                            F50F
[ G] DOTTICK                          FAF3
[ G] DPLUS                            F254
[ G] DPOPRA                           E67F
[ G] DPSHRA                           E670
[ G] DROP                             FB9C
[ G] DUMP                             F9FB
[ G] DUP                              FB8A
[ G] DV0ERRM                          FE61
[ G] DZEQ                             F29C
[ G] EBUFS                            E80D
[ G] ELSE                             EC3F
[ G] EMIT                             F728
[ G] EMPT1B                           E272
[ G] EMPTYB                           E26A
[ G] END                              EEA4
[ G] EQ                               EC72
[ G] ERRHD1                           E5EF
[ G] ERRHDLR                          E5EC
[ G] ERRMTBL                          FE78
[ G] ERRPCK                           FBD6
[ G] ETX                              0003
[ G] EXCT                             F0F1
[ G] EXIT                             EE6A
[ G] EXPECT                           F611
[ G] FDCTSYM                          E45B
[ G] FETCH                            FDAC
[ G] FF                               000C
[ G] FILL                             FC6E
[ G] FILL1                            FC7B
[ G] FIND                             EF7F
[ G] FINDSYM                          E4CF
[ G] FIRQHDL                          E035
[ G] FLUSH                            E862
[ G] FORGET                           F0A2
[ G] FORTHIN                          E23E
[ G] GETCH                            E1C3
[ G] GETS                             E1FB
[ G] HDMP2                            E18B
[ G] HDMP4                            E172
[ G] HDRCSUM                          EAFD
[ G] HDRSKIP                          EAF3
[ G] HERE                             FD1A
[ G] HEX                              F9EE
[ G] HEX1D                            E159
[ G] HEXBFSZ                          0050
[ G] HEXBUF                           034A
[ G] HOLD                             F403
[ G] HT                               0009
[ G] ICHECK                           EB09
[ G] IF                               EBFE
[ G] IFEX                             EC26
[ G] ILLOPC                           00C7
[ G] IMDFLG                           012E
[ G] IMDFLM                           0080
[ G] IMMED                            EAAD
[ G] IMMED1                           EABC
[ G] INDEX                            E947
[ G] INDI                             EF09
[ G] INDIP                            EF2E
[ G] INDJ                             EF38
[ G] INDJP                            EF41
[ G] INDK                             EF4B
[ G] INF                              EDCF
[ G] INIT                             E048
[ G] INSBPAD                          F4BC
[ G] INTERP                           E09E
[ G] INTISRA                          E0F1
[ G] INTRPRA                          E0FE
[ G] INVERT                           ED24
[ G] IODZHDL                          E000
[ G] IOERR                            E79F
[ G] IOPERRM                          FE4C
[ G] IOSTRT                           C000
[ G] IRDPTH                           0126
[ G] IRQHDL                           E035
[ G] ISNEGF                           012B
[ G] JMPOPC                           007E
[ G] JSRLAST                          0110
[ G] JSROPC                           00BD
[ G] KEY                              F716
[ G] KEYP                             F6F6
[ G] LAST                             FD0D
[ G] LBRACK                           EFAD
[ G] LDXOPC                           008E
[ G] LEAVE                            EEF4
[ G] LF                               000A
[ G] LINE                             E92C
[ G] LIST                             E97B
[ G] LITER                            E417
[ G] LITERAL                          EA43
[ G] LOAD                             F650
[ G] LOCWRT                           E3B5
[ G] LOOP                             EB86
[ G] LOOP1                            EB91
[ G] LOOPEX                           EBAD
[ G] LPAR                             F192
[ G] LSTWAD                           0106
[ G] LWMNRA                           E3CB
[ G] MAX                              EDDE
[ G] MDIV                             F87C
[ G] MILLIS                           F6DB
[ G] MILLIS1                          F6EA
[ G] MIN                              EDF7
[ G] MINTLRA                          E0B4
[ G] MINUS                            F775
[ G] MINUSST                          FD56
[ G] MOD                              F86F
[ G] MONFLM                           0020
[ G] MONITOR                          EAD6
[ G] MORE                             E0CC
[ G] MOVE                             FCE5
[ G] MROT                             FC27
[ G] MRUBUFA                          0116
[ G] MSLCNT                           03E2
[ G] MULT                             F7FB
[ G] NAK                              0015
[ G] NBCTFB0                          0130
[ G] NCLR                             E9BA
[ G] NDCTWKS                          E4F5
[ G] NEGATE                           EE27
[ G] NFLAG                            0008
[ G] NIP                              FB76
[ G] NMCVCRA                          E13E
[ G] NMCVIRA                          E0C7
[ G] NMIHDL                           E035
[ G] NOT                              ED7C
[ G] NPOP                             E671
[ G] NPUSH                            E663
[ G] NSTBOT                           0246
[ G] NSTKSZ                           00C0
[ G] NSTTOP                           0186
[ G] NUL                              0000
[ G] NULP                             ED64
[ G] NUMCVRA                          E304
[ G] NUMCVT                           E2AD
[ G] NXTBLK                           F6A6
[ G] NXTBLK1                          F6B1
[ G] OCTAL                            F9CE
[ G] OKPRMPT                          FE46
[ G] ONEL                             F7BA
[ G] ONEM                             F789
[ G] ONEP                             F74E
[ G] ONEPST                           FD3E
[ G] OR                               ECE4
[ G] OVER                             FBF0
[ G] PAD                              F595
[ G] PADBSZ                           0051
[ G] PADBUF                           0134
[ G] PAGE                             F57F
[ G] PICK                             FBBE
[ G] PICK1                            FBC9
[ G] PLOOP                            EBB2
[ G] PLOOPEX                          EBC0
[ G] PLOPEX1                          EBC3
[ G] PLUS                             F73A
[ G] PLUSST                           FD27
[ G] PLUSST1                          FD39
[ G] POSTPON                          EFF5
[ G] pragma                           0000
[ G] PSTR                             F1EA
[ G] PSTRCMP                          F224
[ G] ptop0                            F4E4
[ G] PUTCH                            E1B4
[ G] PUTCR                            E1E5
[ G] PUTS                             E1D8
[ G] QMARK                            FDA1
[ G] QRYDUP                           FB45
[ G] QUIT                             EF54
[ G] RAMCHK                           E058
[ G] RAMFAIL                          E06A
[ G] RAMFM                            FE30
[SG] RAMFTCH                          0C15
[SG] RAMFTCH                          0C14
[ G] RAMOK                            E07C
[ G] RAMOKM                           FE18
[ G] RAMSIZE                          8000
[ G] RAMSTRT                          0000
[ G] RBRACK                           EFA3
[ G] RCLR                             E9C6
[ G] RDEPTH                           0125
[ G] REALEND                          FDBC
[ G] RECADDR                          010E
[ G] RECURSE                          F092
[ G] RELFEAT                          0001
[ G] REPEAT                           EEB9
[ G] RFETCH                           EF26
[ G] RFROM                            EEDC
[ G] ROLL                             FBFD
[ G] ROLL1                            FC08
[ G] ROMSTRT                          E000
[ G] ROT                              FC1B
[ G] RPICKN                           EF10
[ G] RPOP                             E69E
[ G] RPOPRA                           E6B7
[ G] RPSHRA                           E69D
[ G] RPUSH                            E680
[ G] RSP                              0100
[ G] RSTBOT                           02C6
[ G] RSTHDL                           E036
[ G] RSTKSZ                           0080
[ G] RSTRCT                           EAC6
[ G] RSTTOP                           0246
[ G] RTSOPC                           0039
[ G] RTSREMV                          0127
[ G] SAVBUF                           E821
[ G] SCNETOK                          E28B
[ G] SCNSTOK                          E27D
[ G] SCR                              E91F
[ G] SHARPS                           F413
[ G] SHIFT                            F7D0
[ G] SIGN                             F3EC
[ G] SINFEQ                           ECAB
[ G] SLEN                             E1A5
[ G] SOURCE                           F1AE
[ G] SP                               0020
[ G] SPACE                            F558
[ G] SPACES                           F566
[ G] SSDFEAT                          0001
[ G] STATE                            F9A4
[ G] STORE                            FD7D
[ G] STRCT79                          0000
[ G] STRSL1                           F892
[ G] STRSLMD                          F8B2
[ G] STRSLSH                          F888
[ G] STSLFCN                          0129
[ G] SUP                              EDC0
[ G] SWAP                             FBA7
[ G] SWDIC                            E358
[ G] SWI2HDL                          E035
[ G] SWI3HDL                          E035
[ G] SWIHDL                           E035
[ G] SYSSTK                           F8BF
[ G] TBUFF                            039A
[ G] TBUFSZ                           0048
[ G] TERPRET                          F62A
[ G] THEEND                           FDAC
[ G] THEN                             EC60
[ G] THRU                             F684
[ G] TOIN                             E912
[ G] TOKENEP                          0104
[ G] TOKENSP                          0102
[ G] TOR                              EEE8
[ G] TUCK                             FB5B
[ G] TWODIV                           F824
[ G] TWODROP                          F2FE
[ G] TWODUP                           F310
[ G] TWOFTCH                          F340
[ G] TWOL                             F7C5
[ G] TWOM                             F79C
[ G] TWOOVER                          F2C2
[ G] TWOP                             F761
[ G] TWOSTOR                          F32B
[ G] TWOSWAP                          F2DE
[ G] TWOTIM                           F811
[ G] TYPE                             F5A2
[ G] UBASE                            0118
[ G] UBLK                             011E
[ G] UDOT                             F4FB
[ G] UDOTR                            F541
[ G] UINF                             ED95
[ G] UNLESS                           EC2D
[ G] UNLOOP                           EBEE
[ G] UNTIL                            EE7B
[ G] UPDATE                           E86D
[ G] USCR                             0120
[ G] USEDP                            0001
[ G] USTATE                           011A
[ G] USUP                             ED85
[ G] UTOIN                            011C
[ G] VARCON                           E429
[ G] VARCON1                          E42B
[ G] VARCON2                          E42E
[ G] VARI                             EA88
[ G] VARSPC                           0100
[ G] VECTBL                           FFF0
[ G] VLIST                            F8D4
[ G] VLPRVEP                          0112
[ G] VLPRVHD                          0114
[ G] WBIFDRT                          E839
[ G] WDICSPC                          0C10
[ G] WHILE                            EEAD
[ G] WITHIN                           EDA5
[ G] WORD                             F14D
[ G] WORDS                            F8C9
[ G] WRLNMSK                          001F
[ G] WTOOLNG                          E3E8
[ G] XOR                              ECCA
[ G] XOR1                             ECDF
[ G] ZEROL                            F7B0
[ G] ZFLAG                            0004
[ G] ZGREAT                           ED30
[ G] ZLESS                            ED4A
