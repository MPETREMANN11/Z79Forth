                      (        forth.asm):00001         * 6309 Forth based on my 1984/07/16 TRS-80 Model 1 level II ROM implementation.
                      (        forth.asm):00002         *
                      (        forth.asm):00003         * This work is dedicated to Alain Pinaud, author of "Programmer en Forth"
                      (        forth.asm):00004         * published by Editions du P.S.I. in 1983--i.e. my virtual mentor in the field.
                      (        forth.asm):00005         * Special thanks go William Astle for his fantastic LW Tools utility set and
                      (        forth.asm):00006         * to Robert Lipe for his advice on serial line handling. Apache subversion
                      (        forth.asm):00007         * and the sdiff utility also were on my side all the time.
                      (        forth.asm):00008         *
                      (        forth.asm):00009         * Also credited for their help: Justin Poirier (seminal HW design), Daniel
                      (        forth.asm):00010         * Tufvesson (original CompactFlash interface), Peter Minuth (general Forth
                      (        forth.asm):00011         * guruness), Paul E. Bennett (ANSI compatibility advice); Michel Jean, Bill
                      (        forth.asm):00012         * Ragsdale, Pablo Hugo Reda, Demitri Peynado and Bernd Paysan for contributed
                      (        forth.asm):00013         * application level code; Carsten Strotmann for most of the benchmarking code
                      (        forth.asm):00014         * (see https://theultimatebenchmark.org/); Gerry Jackson and Steve R. Palmer
                      (        forth.asm):00015         * (see https://github.com/gerryjackson/forth2012-test-suite) for selected
                      (        forth.asm):00016         * bits and pieces of the Forth2012 test suite (see https://forth-standard.org/).
                      (        forth.asm):00017         *
                      (        forth.asm):00018         * This is a native Forth. Not a threaded interpretive implementation.
                      (        forth.asm):00019         * Worth noticing is the fact that the return stack does not hold return
                      (        forth.asm):00020         * addresses at all. All what is stored there is loop indexes and input stream
                      (        forth.asm):00021         * parameters. Actual return addresses are kept in the system stack. All in all,
                      (        forth.asm):00022         * this is the result of the work of a 19 year old, heavily revisited 35 years
                      (        forth.asm):00023         * later. The downside of this implementation is that the generated code is
                      (        forth.asm):00024         * about 30% larger than a threaded interpretive implementation would be.
                      (        forth.asm):00025         * So it goes...
                      (        forth.asm):00026         *
                      (        forth.asm):00027         * Control flow constructs have been re-implemented based on Wonyong Koh's
                      (        forth.asm):00028         * hForth for the 8086. The original code can be consulted at
                      (        forth.asm):00029         * https://github.com/nealcrook/hForth. Of particular interest is
                      (        forth.asm):00030         * 8086/HF86RAM.ASM. Entries on the control flow stack (implemented on the
                      (        forth.asm):00031         * data stack here) are two cell entities that consist of a parameter
                      (        forth.asm):00032         * (an address), on the top of which a tag identifying the type of address
                      (        forth.asm):00033         * is pushed. They are:
                      (        forth.asm):00034         *
                      (        forth.asm):00035         * Control-flow stack item    Representation (parameter and type)
                      (        forth.asm):00036         * -----------------------    -------------------------------------
                      (        forth.asm):00037         * dest                       control-flow destination      0
                      (        forth.asm):00038         * orig                       control-flow origin           1
                      (        forth.asm):00039         * of-sys                     OF origin                     2
                      (        forth.asm):00040         * case-sys                   x (any value)                 3
                      (        forth.asm):00041         * do-sys                     ?DO origin                    DO destination
                      (        forth.asm):00042         * colon-sys                  xt of current definition     -1 [1]
                      (        forth.asm):00043         *
                      (        forth.asm):00044         * [1] Not implemented in Z79Forth/A.
                      (        forth.asm):00045         * 
                      (        forth.asm):00046         * This mechanism allows for verification of balanced control flow constructs.
                      (        forth.asm):00047         *
                      (        forth.asm):00048         * The code generated is limited to a very small instruction set:
                      (        forth.asm):00049         *
                      (        forth.asm):00050         * LDXOPC        $8E     LDX (immediate)
                      (        forth.asm):00051         * JMPOPC        $7E     JMP (extended)
                      (        forth.asm):00052         * JSROPC        $BD     JSR (extended)
                      (        forth.asm):00053         * RTSOPC        $39     RTS (inherent)
                      (        forth.asm):00054         * BCSOPC        $2503   BCS *+5 (relative) Used in LOOP, +LOOP
                      (        forth.asm):00055         * BNEOPC        $2603   BNE *+5 (relative) Used in ?DO, IF, UNTIL
                      (        forth.asm):00056         *
                      (        forth.asm):00057         * On error, the system stack pointer is reset. The return stack also is
                      (        forth.asm):00058         * but the data stack will be in the same state as when the error occurred.
                      (        forth.asm):00059         * ABORT and QUIT enforce their own ANS94 standard behaviour.
                      (        forth.asm):00060         *
                      (        forth.asm):00061         * RESTRICT is non-standard. It comes from GNU Forth (VolksForth). The " OK"
                      (        forth.asm):00062         * non-prompt string also does, by the way. Thanks to Anton Ertl for his terse
                      (        forth.asm):00063         * yet valuable input.
                      (        forth.asm):00064         *
                      (        forth.asm):00065         * .' (dot-tick) is non-standard. It comes from SwiftForth. It will be supported
                      (        forth.asm):00066         * whether or not the symbolic stack dump has been configured (see SSDFEAT in
                      (        forth.asm):00067         * constants.asm). However, please note that effective symbolic references will
                      (        forth.asm):00068         * be resolved only if the feature was enabled at compilation time. Otherwise
                      (        forth.asm):00069         * a simple HEX print of the cell at the top of the data stack will be
                      (        forth.asm):00070         * performed. This is meant to support Forth source code that does not depend
                      (        forth.asm):00071         * on the feature vector (see examples/dis.4th).
                      (        forth.asm):00072         *
                      (        forth.asm):00073         * MONITOR and ICHECK are also non-standard. They are intended to maintain and
                      (        forth.asm):00074         * verify the integrity of a checksum of the code section of RAM resident
                      (        forth.asm):00075         * words, with the exception of VARIABLEs and CREATEd words. CREATEd words,
                      (        forth.asm):00076         * if subject to the MONITOR treatment will also carry a code section
                      (        forth.asm):00077         * checksum, although this is not the default behaviour. The checksum will
                      (        forth.asm):00078         * consist in an extra byte added to every word's header. MONITOR and ICHECK
                      (        forth.asm):00079         * will be available whether or not the reliability feature has been configured
                      (        forth.asm):00080         * (see RELFEAT in constants.asm). They will only carry effective semantics
                      (        forth.asm):00081         * if the feature was actually enabled at compilation time. This is meant to
                      (        forth.asm):00082         * support Forth source code that does not depend on the feature vector.
                      (        forth.asm):00083         *
                      (        forth.asm):00084         * Experimental MC146818 RTC support: the feature is disabled by default
                      (        forth.asm):00085         * (see RTCFEAT in constants.asm) because it relies on undocumented schematics.
                      (        forth.asm):00086         * Also, the required underlying circuitry is not intended to ever become an
                      (        forth.asm):00087         * integral part of the Z79Forth reference board itself. Some better designed
                      (        forth.asm):00088         * form of it might eventually surface in the form of an extension specification.
                      (        forth.asm):00089         * At the time of this writing this is just a proof of concept, but whether or
                      (        forth.asm):00090         * not the feature is enabled, three extra words will be added to the dictionary.
                      (        forth.asm):00091         * They are RTC@ RTC! and TICKS They can be safely ignored.
                      (        forth.asm):00092         *
                      (        forth.asm):00093         * Forth source code portability note:
                      (        forth.asm):00094         * Because Z79Forth does not use the return stack to store return addresses,
                      (        forth.asm):00095         * it makes it quite easy to write code that is not readily portable to classic
                      (        forth.asm):00096         * threaded interpretive implementations. The resulting code will be simpler but
                      (        forth.asm):00097         * portability will be limited.
                      (        forth.asm):00098         *
                      (        forth.asm):00099         * Miscellaneous notes: RA stands for return address; EP for entry point.
                      (        forth.asm):00100         * CF is a shortcut for CompactFlash. TOS means top of the data/normal stack.
                      (        forth.asm):00101         * Occasionally, CFA is used for code field address which, in this
                      (        forth.asm):00102         * implementation, is a synonym for compilation address. XT means execution
                      (        forth.asm):00103         * token--the ANSI term for a compilation address. MSC stands for most
                      (        forth.asm):00104         * significant cell; LSC for least significant cell.
                      (        forth.asm):00105         *
                      (        forth.asm):00106         * The complete guide to the HD6309 extended instruction set can be found at:
                      (        forth.asm):00107         * https://cyberabi.ipower.com/Downloads/The_6309_Book.pdf. For convenience,
                      (        forth.asm):00108         * and with the author's explicit agreement, this document has been included
                      (        forth.asm):00109         * in this distribution. This is recommended reading for anyone altering this
                      (        forth.asm):00110         * code or trying to make some sense of it!!!
                      (        forth.asm):00111         *
                      (        forth.asm):00112         * This whole effort started out as a porting endeavour and ended up being a
                      (        forth.asm):00113         * substantial rewrite, trying to take advantage of the features of the 6309
                      (        forth.asm):00114         * as much as possible. The primary goals of this implementation are:
                      (        forth.asm):00115         * reliability, performance and code compactness. A number of bugs in the
                      (        forth.asm):00116         * original code have been fixed--some remain for sure!
                      (        forth.asm):00117         *
                      (        forth.asm):00118         * Obligatory literary reference:
                      (        forth.asm):00119         * "The paper is very heavy going, and I should never have read it, had I not
                      (        forth.asm):00120         * written it myself." John E. Littlewood (1885-1977).
                      (        forth.asm):00121         *
                      (        forth.asm):00122         * The original soundtrack for this work is available at:
                      (        forth.asm):00123         * https://youtu.be/YqXZtGyFyDo?t=4023 (J.S. Bach BWV 1080, contrapunctus 14).
                      (        forth.asm):00124         
0000                  (        forth.asm):00125         pragma  opt cd,operandsizewarning
                      (        forth.asm):00126         
                      (        forth.asm):00127                 include constants.asm
                      (    constants.asm):00001         * Begin tunable parameters section.
                      (    constants.asm):00002         
     0000             (    constants.asm):00003         CSSNTVE equ     0               Words and HEX numbers are case sensitive if NZ
     0001             (    constants.asm):00004         SSDFEAT equ     1               Set to 1 to enable the symbolic stack dump feat.
     0001             (    constants.asm):00005         RELFEAT set     1               Set to 1 to enable the reliability feature
                      (    constants.asm):00006         
                      (    constants.asm):00007         * Ultimately, this one should just go and become the only available option.
     0001             (    constants.asm):00008         ANSFEAT set     1               Set to 1 to enable the ANS94 Core feature set
                      (    constants.asm):00009         
                      (    constants.asm):00010         *                               Caution: when this is enabled, you can no
                      (    constants.asm):00011         *                               longer fit a DEBUG image into an 8 KB EEPROM
     0000             (    constants.asm):00012         RTCFEAT equ     0               Cool but the reliability feature must go...
     0000             (    constants.asm):00013         DEBUG   equ     0               Enforce assertions and miscellaneous checks
     0001             (    constants.asm):00014         HVNMI   equ     1               NMI handler support
     0000             (    constants.asm):00015         HVNMI2  equ     0               NMI handler support (async input debugging)
                      (    constants.asm):00016         * Loop count for MS. This is busy waiting, so we depend on the CPU clock speed.
     031A             (    constants.asm):00017         MSLCNT  equ     794             at 4 MHz native mode
                      (    constants.asm):00018         *MSLCNT equ     994             at 5 MHz native mode
                      (    constants.asm):00019         
                      (    constants.asm):00020         * End tunable parameters section.
                      (    constants.asm):00021         
                      (    constants.asm):00022                 IFNE    RTCFEAT
0000                  (    constants.asm):00023         RELFEAT set     0               RTCFEAT disables RELFEAT
                      (    constants.asm):00024                 ELSE
                      (    constants.asm):00025                 IFNE    HVNMI
                      (    constants.asm):00026                 IFNE    HVNMI2
0000                  (    constants.asm):00027         RELFEAT set     0               HVNMI and HVNMI2 disable RELFEAT
                      (    constants.asm):00028                 ENDC                    HVNMI2
                      (    constants.asm):00029                 ENDC                    HVNMI
                      (    constants.asm):00030                 ENDC                    RTCFEAT
                      (    constants.asm):00031         
                      (    constants.asm):00032                 IFNE    ANSFEAT
     0000             (    constants.asm):00033         RELFEAT set     0
                      (    constants.asm):00034                 ENDC
                      (    constants.asm):00035         
                      (    constants.asm):00036         * Control flow stack implemented on the top of the data stack.
     E80B             (    constants.asm):00037         CSPUSH  EQU     NPUSH
     E819             (    constants.asm):00038         CSPOP   EQU     NPOP
                      (    constants.asm):00039         
                      (    constants.asm):00040         * Memory map.
     0000             (    constants.asm):00041         RAMSTRT equ     $0000
     8000             (    constants.asm):00042         RAMSIZE equ     $8000
     C000             (    constants.asm):00043         IOSTRT  equ     $C000
     E000             (    constants.asm):00044         ROMSTRT equ     $E000
     FFF0             (    constants.asm):00045         VECTBL  equ     $FFF0
                      (    constants.asm):00046         
                      (    constants.asm):00047         * Base address for global variables (direct page addressed).
     0100             (    constants.asm):00048         VARSPC  equ     $100
                      (    constants.asm):00049         
                      (    constants.asm):00050         * The 74HCT138 (U7) IO address decoder maps one 1 KB area per usable device.
     C000             (    constants.asm):00051         DEV0    equ     $C000           Compact Flash memory module (optional)
     C400             (    constants.asm):00052         DEV1    equ     $C400
     C800             (    constants.asm):00053         DEV2    equ     $C800
     CC00             (    constants.asm):00054         DEV3    equ     $CC00
     D000             (    constants.asm):00055         DEV4    equ     $D000
     D400             (    constants.asm):00056         DEV5    equ     $D400           MC146818 RTC (optional)
     D800             (    constants.asm):00057         DEV6    equ     $D800           HD63B50 unit 0
     DC00             (    constants.asm):00058         DEV7    equ     $DC00
                      (    constants.asm):00059         
     D800             (    constants.asm):00060         ACIACTL equ     DEV6
     D801             (    constants.asm):00061         ACIADAT equ     DEV6+1
                      (    constants.asm):00062         
                      (    constants.asm):00063         * ACIA control register bits.
     0003             (    constants.asm):00064         ACRST   equ     %00000011       ACIA master reset
                      (    constants.asm):00065         
                      (    constants.asm):00066         * 1.84320 MHz Y1: 115200 bps in the direct path, 38400 bps in the DIV3 path
     0001             (    constants.asm):00067         ACDIV16 equ     %00000001       ACIA div 16
                      (    constants.asm):00068         
     0014             (    constants.asm):00069         AC8N1   equ     %00010100       ACIA 8N1
     0000             (    constants.asm):00070         ACRTS0  equ     %00000000       ACIA RTS# low
     0040             (    constants.asm):00071         ACRTS1  equ     %01000000       ACIA RTS# high
     0080             (    constants.asm):00072         ACRDINT equ     %10000000       IRQ on RDRF
                      (    constants.asm):00073         
     0043             (    constants.asm):00074         ACIRSET equ     ACRTS1|ACRST
     00D5             (    constants.asm):00075         ACIRTS1 equ     ACRTS1|ACRDINT|AC8N1|ACDIV16
     0095             (    constants.asm):00076         ACIRTS0 equ     ACRTS0|ACRDINT|AC8N1|ACDIV16
                      (    constants.asm):00077         
                      (    constants.asm):00078         * ACIA status register bits.
     0001             (    constants.asm):00079         ACIRDRF equ     %00000001       Receive data register full
     0002             (    constants.asm):00080         ACITDRE equ     %00000010       Transmit data register empty
     0020             (    constants.asm):00081         ACIOVRN equ     %00100000       Overrun status register bit
     0080             (    constants.asm):00082         ACIISVC equ     %10000000       Interrupt needs servicing
                      (    constants.asm):00083         
                      (    constants.asm):00084         * Compact Flash parameters.
     C000             (    constants.asm):00085         CFBASE  equ     DEV0
     C000             (    constants.asm):00086         CFDATAR equ     CFBASE          R/W data register
     C001             (    constants.asm):00087         CFERROR equ     CFBASE+1        RO error register
     C001             (    constants.asm):00088         CFFEATR equ     CFBASE+1        WO features register
     C002             (    constants.asm):00089         CFSCNTR equ     CFBASE+2        R/W sector count register
     C003             (    constants.asm):00090         CFSNUMR equ     CFBASE+3        R/W sector number register
     C004             (    constants.asm):00091         CFCLOWR equ     CFBASE+4        R/W cylinder low register
     C005             (    constants.asm):00092         CFCHIGR equ     CFBASE+5        R/W cylinder high register
     C006             (    constants.asm):00093         CFDRHDR equ     CFBASE+6        R/W drive/head register
     C007             (    constants.asm):00094         CFSTATR equ     CFBASE+7        RO status register
     C007             (    constants.asm):00095         CFCOMDR equ     CFBASE+7        WO command register
                      (    constants.asm):00096         
                      (    constants.asm):00097         * CF status bits.
     0080             (    constants.asm):00098         CFBSYB  equ     %10000000       BSY status bit
     0040             (    constants.asm):00099         CFRDYB  equ     %01000000       RDY status bit
     0020             (    constants.asm):00100         CFDWFB  equ     %00100000       DWF status bit (not used)
     0010             (    constants.asm):00101         CFDSCB  equ     %00010000       DSC status bit (not used)
     0008             (    constants.asm):00102         CFDRQB  equ     %00001000       DRQ status bit
     0001             (    constants.asm):00103         CFERRB  equ     %00000001       ERR status bit
                      (    constants.asm):00104         
     0200             (    constants.asm):00105         CFSCSZ  equ     $200            Compact Flash (IDE) sector size
                      (    constants.asm):00106         
                      (    constants.asm):00107         * CF commands.
     00EC             (    constants.asm):00108         CFIDDEV equ     $EC             Identify Device
     00EF             (    constants.asm):00109         CFSETFT equ     $EF             Set Feature
     0020             (    constants.asm):00110         CFRSCTS equ     $20             Read Sectors
     0030             (    constants.asm):00111         CFWSCTS equ     $30             Write Sectors
                      (    constants.asm):00112         
                      (    constants.asm):00113         * Buffer in-memory structure:
                      (    constants.asm):00114         * data: 1024 bytes.
                      (    constants.asm):00115         * terminator: 1 byte set to 0.
                      (    constants.asm):00116         * flags: 1 byte.
                      (    constants.asm):00117         * blknum: 2 bytes.
     0001             (    constants.asm):00118         BINUSE  equ     1               Buffer is allocated (the blknum field is valid)
     0002             (    constants.asm):00119         BMAPPD  equ     2               Block has been read from the CF device
     0004             (    constants.asm):00120         BDIRTY  equ     4               Block has been marked for update
     0400             (    constants.asm):00121         BLKSIZ  equ     2*CFSCSZ        Block size is 2 CF sectors (1 KB)
                      (    constants.asm):00122         * Buffer field offsets.
     0400             (    constants.asm):00123         BOTERM  equ     BLKSIZ          Base buffer to the 'terminator' field offset
     0401             (    constants.asm):00124         BOFLAGS equ     BLKSIZ+1        Base buffer to the 'flag' field offset
     0402             (    constants.asm):00125         BOBLKNO equ     BLKSIZ+2        Base buffer to the 'blknum' field offset
                      (    constants.asm):00126         
     0410             (    constants.asm):00127         BFDISP  equ     BUF1-BUF0       Offset between resident buffers
                      (    constants.asm):00128         
                      (    constants.asm):00129         * MC146818 RTC registers.
     D400             (    constants.asm):00130         RTAS    equ     DEV5            Latch target register address offset
     D401             (    constants.asm):00131         RTDS    equ     (DEV5+1)        Actual target register access
                      (    constants.asm):00132         * RTC internal register offsets.
     0000             (    constants.asm):00133         RTOSEC  equ     0               Seconds
     0001             (    constants.asm):00134         RTOSECA equ     1               Seconds alarm
     0002             (    constants.asm):00135         RTOMIN  equ     2               Minutes
     0003             (    constants.asm):00136         RTOMINA equ     3               Minutes alarm
     0004             (    constants.asm):00137         RTOHOUR equ     4               Hours
     0005             (    constants.asm):00138         RTOHRA  equ     5               Hours alarm
     0006             (    constants.asm):00139         RTODOW  equ     6               Day of week
     0007             (    constants.asm):00140         RTODOM  equ     7               Day of month
     0008             (    constants.asm):00141         RTOMON  equ     8               Month
     0009             (    constants.asm):00142         RTOYEAR equ     9               Year
     000A             (    constants.asm):00143         RTOREGA equ     10              Register A
     000B             (    constants.asm):00144         RTOREGB equ     11              Register B
     000C             (    constants.asm):00145         RTOREGC equ     12              Register C
     000D             (    constants.asm):00146         RTOREGD equ     13              Register D
     000E             (    constants.asm):00147         RTOUMB  equ     14              Base of user defined NVRAM storage
     0032             (    constants.asm):00148         RTUMSZ  equ     50              Size of user defined NVRAM storage
     003F             (    constants.asm):00149         RTOPRES equ     (RTOUMB+RTUMSZ-1) RTC NVRAM offset for dectecting dev presence
                      (    constants.asm):00150         
                      (    constants.asm):00151         * Register A bits.
     0080             (    constants.asm):00152         RTAUIP  equ     $80             Update in progress
     0070             (    constants.asm):00153         RTADVRS equ     $70             Divider reset, not in operation
     0020             (    constants.asm):00154         RTADV32 equ     $20             In operation, 32 KHz time base
     000A             (    constants.asm):00155         RTARS64 equ     $A              32 KHz time base, 64 Hz PI (every 15.625 ms)
                      (    constants.asm):00156         
                      (    constants.asm):00157         * Register B bits.
     0080             (    constants.asm):00158         RTBSET  equ     $80
     0040             (    constants.asm):00159         RTBPIE  equ     $40
     0004             (    constants.asm):00160         RTBDM   equ     4               Set to 1 for binary register contents
     0002             (    constants.asm):00161         RTB24   equ     2               Set to 1 for 24 hour format
                      (    constants.asm):00162         
                      (    constants.asm):00163         * Register C bits.
     0040             (    constants.asm):00164         RTCPF   equ     $40             Periodic interrupt pending flag
                      (    constants.asm):00165         
                      (    constants.asm):00166         * ASCII trivia.
     0000             (    constants.asm):00167         NUL     equ     0               End of string marker
     0003             (    constants.asm):00168         ETX     equ     3               Control-C (intr)
     0008             (    constants.asm):00169         BS      equ     8               Backspace
     0009             (    constants.asm):00170         HT      equ     9               Horizontal tab
     000A             (    constants.asm):00171         LF      equ     $0A             Aka new line
     000D             (    constants.asm):00172         CR      equ     $0D             Carriage return
     0015             (    constants.asm):00173         NAK     equ     $15             Control-U (kill)
     0020             (    constants.asm):00174         SP      equ     $20             Aka BL in Forth
     0013             (    constants.asm):00175         XOFF    equ     $13             Aka DC3
     0011             (    constants.asm):00176         XON     equ     $11             Aka DC1
                      (    constants.asm):00177         
                      (    constants.asm):00178         * Stack sizes.
     00C0             (    constants.asm):00179         NSTKSZ  equ     192             Expressed in bytes. Now only limited by RAM size
     0080             (    constants.asm):00180         RSTKSZ  equ     128             Expressed in bytes
                      (    constants.asm):00181         
                      (    constants.asm):00182         * Buffer sizes.
     0084             (    constants.asm):00183         CMDBFSZ equ     132             Command line entry buffer
     0050             (    constants.asm):00184         HEXBFSZ equ     80
     0048             (    constants.asm):00185         TBUFSZ  equ     72              Used by VLIST to print word name and CVNSTR
     0054             (    constants.asm):00186         PADBSZ  equ     84              79-STANDARD mandates a minimum of 64 bytes
     0040             (    constants.asm):00187         SERBSZ  equ     64              Serial buffer size. Needs to be a power of 2
                      (    constants.asm):00188         
                      (    constants.asm):00189         * Dictionary flag masks.
     0080             (    constants.asm):00190         IMDFLM  equ     $80             Immediate flag mask
     0040             (    constants.asm):00191         DEFFLM  equ     $40             Compilation only flag mask
                      (    constants.asm):00192                 IFNE    RELFEAT
0000                  (    constants.asm):00193         MONFLM  equ     $20             Monitored flag mask. This indicates that the
                      (    constants.asm):00194         *                               word to which it relates might be checked for
                      (    constants.asm):00195         *                               integrity. This applies by default to all words
                      (    constants.asm):00196         *                               defined with : and all constants. It might
                      (    constants.asm):00197         *                               also apply to any other CREATEd object by
                      (    constants.asm):00198         *                               resorting to the MONITOR word. Using MONITOR
                      (    constants.asm):00199         *                               on variable word contents is guaranteed to
                      (    constants.asm):00200         *                               raise ICHECK's attention.
                      (    constants.asm):00201                 ENDC
                      (    constants.asm):00202         
                      (    constants.asm):00203         * Division function codes and options.
     0000             (    constants.asm):00204         DVFSLMD equ     0               Function is /MOD
     0001             (    constants.asm):00205         DVFMOD  equ     1               Function is MOD
     0002             (    constants.asm):00206         DVFDIV  equ     2               Function is /
     0008             (    constants.asm):00207         DVOA1D  equ     8               Argument 1 is a double (FM/MOD SM/REM)
     0010             (    constants.asm):00208         DVOWSYM equ     16              Want symmetric division (default is floored)
     0007             (    constants.asm):00209         DVFMASK equ     7               Mask for extracting function codes
                      (    constants.asm):00210         
     001F             (    constants.asm):00211         WRLNMSK equ     $1F             31 character is the maximum word length
                      (    constants.asm):00212         
                      (    constants.asm):00213         * 6309 opcodes.
     008E             (    constants.asm):00214         LDXOPC  equ     $8E             LDX (immediate)
     007E             (    constants.asm):00215         JMPOPC  equ     $7E             JMP (extended)
     00BD             (    constants.asm):00216         JSROPC  equ     $BD             JSR (extended)
     0039             (    constants.asm):00217         RTSOPC  equ     $39             RTS (inherent)
     2503             (    constants.asm):00218         BCSOPC  equ     $2503           BCS *+5 (relative)
     2603             (    constants.asm):00219         BNEOPC  equ     $2603           BNE *+5 (relative)
     00C7             (    constants.asm):00220         ILLOPC  equ     $C7             An illegal operation code. Meant to raise a trap
                      (    constants.asm):00221         
     0001             (    constants.asm):00222         CFLAG   equ     1               CC bit 0 (C)
     0004             (    constants.asm):00223         ZFLAG   equ     4               CC bit 2 (Z)
     0010             (    constants.asm):00224         IFLAG   equ     $10             CC bit 4 (I)
     0040             (    constants.asm):00225         FFLAG   equ     $40             CC bit 6 (F)
                      (    constants.asm):00226         
                      (    constants.asm):00227         * RAM based execution token for @.
     0CC4             (    constants.asm):00228         RAMFTCH set     WDICSPC+4       Dictionary header overhead is word's length + 3
                      (    constants.asm):00229                 IFNE    RELFEAT         The reliability features adds one byte to the
0000                  (    constants.asm):00230         RAMFTCH set     WDICSPC+5       header: a checksum.
                      (    constants.asm):00231                 ENDC
                      (    constants.asm):00232         
                      (        forth.asm):00128         
                      (        forth.asm):00129         * Unchecked NPUSH. This is for situations in which there is absolutely no
                      (        forth.asm):00130         * chance of overflow. For instance, in case we just popped 2 cells and push
                      (        forth.asm):00131         * back one or two.
0000                  (        forth.asm):00132         UCNPUSH MACRO   NOEXPAND
                      (        forth.asm):00133                 pshu    x
                      (        forth.asm):00134                 ENDM
                      (        forth.asm):00135         
                      (        forth.asm):00136         * Unchecked NPOP. To be used only after trusted words have been invoked, i.e.
                      (        forth.asm):00137         * when one is positively sure that the data stack contains at least one cell.
0000                  (        forth.asm):00138         UCNPOP  MACRO   NOEXPAND
                      (        forth.asm):00139                 pulu    x
                      (        forth.asm):00140                 ENDM
                      (        forth.asm):00141         
                      (        forth.asm):00142         * Make sure minimum data stack requirements are satisfied upon word entry.
                      (        forth.asm):00143         * The requirement is expressed in cell size--2 bytes on the 6309.
                      (        forth.asm):00144         * \1 specifies the required number of cells.
0000                  (        forth.asm):00145         MINDREQ MACRO   NOEXPAND
                      (        forth.asm):00146                 ldd     #NSTBOT-(\1*2)  Cell count one expects to be stacked up
                      (        forth.asm):00147                 bra     CHKNDPT         No return if the condition is not met
                      (        forth.asm):00148                 ENDM
                      (        forth.asm):00149         
                      (        forth.asm):00150         * Reliability feature support: execution tokens.
                      (        forth.asm):00151         * \1 has the opcode we want to emit.
                      (        forth.asm):00152         * \2 has the execution token address, as if the header overhead always
                      (        forth.asm):00153         * was 3 bytes.
0000                  (        forth.asm):00154         RFXT    MACRO   NOEXPAND
                      (        forth.asm):00155                 IFNE    RELFEAT
                      (        forth.asm):00156                 \1      \2+1
                      (        forth.asm):00157                 ELSE
                      (        forth.asm):00158                 \1      \2
                      (        forth.asm):00159                 ENDC                    RELFEAT
                      (        forth.asm):00160                 ENDM
                      (        forth.asm):00161         
                      (        forth.asm):00162         * Reliability feature support: variable word header contents.
                      (        forth.asm):00163         * This is a dummy checksum only used for EEPROM resident words.
                      (        forth.asm):00164         * Those never are checked for code integrity by MONITOR.
0000                  (        forth.asm):00165         RFCS    MACRO   NOEXPAND
                      (        forth.asm):00166                 IFNE    RELFEAT
                      (        forth.asm):00167                 fcb     ILLOPC          Illegal opcode
                      (        forth.asm):00168                 ENDC                    RELFEAT
                      (        forth.asm):00169                 ENDM
                      (        forth.asm):00170         
                      (        forth.asm):00171         *******************************************************************************
                      (        forth.asm):00172         * RAM definitions. We cannot initialize globals from the assembly defs.
                      (        forth.asm):00173         * All we can do here is define addresses and size things up.
                      (        forth.asm):00174         
                      (        forth.asm):00175         * RAMSTART is 0. We leave page 0 unused as a bug proof area.
                      (        forth.asm):00176         * When compiled in debug mode, this area is filled with illegal
                      (        forth.asm):00177         * instruction opcodes ($C7).
                      (        forth.asm):00178         
                      (        forth.asm):00179                 org     VARSPC
                      (        forth.asm):00180         
                      (        forth.asm):00181         * Global pointers.
0100                  (        forth.asm):00182         RSP     rmb     2               The return stack pointer
0102                  (        forth.asm):00183         TOKENSP rmb     2               Token start pointer (STRS)
0104                  (        forth.asm):00184         TOKENEP rmb     2               Token end pointer (STRE)
0106                  (        forth.asm):00185         LSTWAD  rmb     2               Last defined word header pointer--LAST
0108                  (        forth.asm):00186         DICEND  rmb     2               Current end of the dictionary--HERE
010A                  (        forth.asm):00187         BLSTWAD rmb     2               Backup (was IX)
010C                  (        forth.asm):00188         BDICEND rmb     2               Backup (was IY)
010E                  (        forth.asm):00189         PLOAD   rmb     2               Word payload if found by SWDIC
0110                  (        forth.asm):00190         FNDPLD  rmb     2               Last code payload reported by FIND
0112                  (        forth.asm):00191         RECADDR rmb     2               Used by RECURSE
0114                  (        forth.asm):00192         JSRLAST rmb     2               Last compilation address of #JSROPC
0116                  (        forth.asm):00193         FWDREF  rmb     2               Address of the last forward reference
0118                  (        forth.asm):00194         RAKEVAR rmb     2               Linked list of LEAVE forward references
011A                  (        forth.asm):00195         VLPRVEP rmb     2               Used in WORDS to compute word code length
011C                  (        forth.asm):00196         VLPRVHD rmb     2               Used in WORDS to compute word code length
011E                  (        forth.asm):00197         MRUBUFA rmb     2               Most recently used buffer address
0120                  (        forth.asm):00198         BSBFADR rmb     2               Base buffer address for the input stream
                      (        forth.asm):00199         
                      (        forth.asm):00200         * Global variables.
0122                  (        forth.asm):00201         UBASE   rmb     2               Base for numbers input and output--BASE
0124                  (        forth.asm):00202         USTATE  rmb     2               0 if interpreting, 255 if compiling--STATE
0126                  (        forth.asm):00203         ISLEN   rmb     2               Input stream length
0128                  (        forth.asm):00204         ISEADDR rmb     2               End of input stream address (included)
012A                  (        forth.asm):00205         UTOIN   rmb     2               User variable for >IN
012C                  (        forth.asm):00206         UBLK    rmb     2               User variable for BLK
012E                  (        forth.asm):00207         USCR    rmb     2               User variable for SCR (output for LIST)
0130                  (        forth.asm):00208         TIKSHI  rmb     2               RTC clock ticks updated on FIRQ
0132                  (        forth.asm):00209         TIKSLOW rmb     2               RTC clock ticks updated on FIRQ
                      (        forth.asm):00210                 IFNE    DEBUG
0134                  (        forth.asm):00211         CCREG   rmb     2               A DEBUG variable for predicates (see CMP2)
                      (        forth.asm):00212                 ENDC                    DEBUG
                      (        forth.asm):00213                 IFNE    HVNMI
                      (        forth.asm):00214                 IFNE    HVNMI2
0134                  (        forth.asm):00215         SBDROPC rmb     2               Char. drop count for serial input (see FIRQHDL)
                      (        forth.asm):00216                 ENDC                    HVNMI2
                      (        forth.asm):00217                 ENDC                    HVNMI
0134                  (        forth.asm):00218         ANCMPF  rmb     1               Anonymous compilation flag
0135                  (        forth.asm):00219         BALNCD  rmb     1               Balanced flag for control flow constructs
0136                  (        forth.asm):00220         BASBKUP rmb     1               BASE backup when a base prefix is in use
0137                  (        forth.asm):00221         RDEPTH  rmb     1               Return stack depth in cells
0138                  (        forth.asm):00222         DIVFCN  rmb     1               Flag used by /, MOD and /MOD
0139                  (        forth.asm):00223         DIVDBL  rmb     1               DIV: N1 is a double (flag)
013A                  (        forth.asm):00224         DIVSYM  rmb     1               DIV: symmetric division required (flag)
013B                  (        forth.asm):00225         MULFCN  rmb     1               Flag used by *, M*
013C                  (        forth.asm):00226         F83DIVF rmb     1               FORTH-83 adjusment flag for floored division
013D                  (        forth.asm):00227         STSLFCN rmb     1               Flag used by */, */MOD
013E                  (        forth.asm):00228         CVTFCN  rmb     1               CVT: 0 => # semantics, 1 => #S semantics
013F                  (        forth.asm):00229         ISNEGF  rmb     1               Number being scanned is negative
0140                  (        forth.asm):00230         ISDBLF  rmb     1               Number being scanned is a double
0141                  (        forth.asm):00231         CVISSGN rmb     1               Flag: should CVNSTR consider numbers as signed
0142                  (        forth.asm):00232         CURTOKL rmb     1               Current token length. Set by SWDIC
0143                  (        forth.asm):00233         SVCTOKL rmb     1               Saved current token length. Set by NUMCVT
0144                  (        forth.asm):00234         IMDFLG  rmb     1               Immediate flag
0145                  (        forth.asm):00235         DEFFLG  rmb     1               Define flag
0146                  (        forth.asm):00236         RTCAVL  rmb     1               NZ if real time clock is present
0147                  (        forth.asm):00237         CFCARDP rmb     1               NZ if CF card present
0148                  (        forth.asm):00238         CFCMMIR rmb     1               Last CF command issued
0149                  (        forth.asm):00239         CFERRCD rmb     1               and the corresponding error code
014A                  (        forth.asm):00240         SRCID   rmb     1               ANSI SOURCE-ID (internal only).
                      (        forth.asm):00241         
                      (        forth.asm):00242         * Serial buffer parameters. Queing happens on FIRQ.
                      (        forth.asm):00243         * Dequeing occurs when GETCH is invoked.
014B                  (        forth.asm):00244         SERBENQ rmb     1               Enqueue offset
014C                  (        forth.asm):00245         SERBDEQ rmb     1               Dequeue offset
014D                  (        forth.asm):00246         SERBCNT rmb     1               Buffer byte count
014E                  (        forth.asm):00247         XMITOK  rmb     1               Software flow control on output flag
014F                  (        forth.asm):00248         SERBUF  rmb     SERBSZ          The actual buffer
                      (        forth.asm):00249         
018F                  (        forth.asm):00250         PADBUF  rmb     PADBSZ          PAD lives here.
01E3                  (        forth.asm):00251         APADBUF rmb     PADBSZ          Alternate PAD here. Used by <#, #, #S, #>
                      (        forth.asm):00252         
                      (        forth.asm):00253         * The normal (data) stack.
0237 00               (        forth.asm):00254                 align   2
     0238             (        forth.asm):00255         NSTTOP  equ     *               U's value when the data stack is full
0238                  (        forth.asm):00256                 rmb     NSTKSZ
     02F8             (        forth.asm):00257         NSTBOT  equ     *               U's value when the data stack is empty
                      (        forth.asm):00258         
                      (        forth.asm):00259         * The return stack.
     02F8             (        forth.asm):00260         RSTTOP  equ     *
02F8                  (        forth.asm):00261                 rmb     RSTKSZ
     0378             (        forth.asm):00262         RSTBOT  equ     *
                      (        forth.asm):00263         
0378                  (        forth.asm):00264         CMDBUF  rmb     CMDBFSZ
03FC                  (        forth.asm):00265         HEXBUF  rmb     HEXBFSZ
                      (        forth.asm):00266         
044C                  (        forth.asm):00267         TBUFF   rmb     TBUFSZ          Output for CVNSTR
                      (        forth.asm):00268         
0494 0000000000000000 (        forth.asm):00269                 align   16
     00000000
04A0                  (        forth.asm):00270         BUF0    rmb     BLKSIZ+4
                      (        forth.asm):00271         
08A4 0000000000000000 (        forth.asm):00272                 align   16
     00000000
08B0                  (        forth.asm):00273         BUF1    rmb     BLKSIZ+4
                      (        forth.asm):00274         
                      (        forth.asm):00275         *******************************************************************************
                      (        forth.asm):00276         * Writable dictionary section begins right here. We cannot have anything
                      (        forth.asm):00277         * statically defined at this point. Therefore, FORTHIN moves the code for @
                      (        forth.asm):00278         * to this location and sets up DICEND and LSTWAD accordingly. All the RAM
                      (        forth.asm):00279         * beyond this point (after the reallocated @ implementation) is user defined
                      (        forth.asm):00280         * material. Note that builtin words, though they cannot be forgotten (to the
                      (        forth.asm):00281         * extent they are ROM resident--not to mention inter-word dependencies),
                      (        forth.asm):00282         * might still be overridden by user definitions. WORDS will happily ignore
                      (        forth.asm):00283         * that fact and list everything in the dictionary linked list order.
                      (        forth.asm):00284         
0CB4 0000000000000000 (        forth.asm):00285                 align   16
     00000000
     0CC0             (        forth.asm):00286         WDICSPC equ     *
                      (        forth.asm):00287         
                      (        forth.asm):00288         *******************************************************************************
                      (        forth.asm):00289         * ROM code begins.
                      (        forth.asm):00290         
                      (        forth.asm):00291                 org     ROMSTRT
                      (        forth.asm):00292         * Trap handler: division by zero or illegal opcode. See page 4-10 of "The 6309
                      (        forth.asm):00293         * Book" for a description of interrupt stacks in native 6309 mode.
E000 113C40           (        forth.asm):00294 (4)     IODZHDL bitmd   #$40            Illegal opcode?
E003 2705             (        forth.asm):00295 (3)             beq     @iodzh1
E005 8EFE85           (        forth.asm):00296 (3)             ldx     #IOPERRM
E008 2008             (        forth.asm):00297 (3)             bra     @iodxh2
E00A 113C80           (        forth.asm):00298 (4)     @iodzh1 bitmd   #$80            Division by zero?
E00D 2726             (        forth.asm):00299 (3)             beq     @iodzh3         And you may ask yourself, well
                      (        forth.asm):00300         *                               How did I get here?
E00F 8EFE9A           (        forth.asm):00301 (3)             ldx     #DV0ERRM
E012 BDE2E0           (        forth.asm):00302 (7)     @iodxh2 jsr     PUTS
E015 EC6C             (        forth.asm):00303 (5+1)           ldd     12,s            Return code address (PC)
E017 108E03FC         (        forth.asm):00304 (4)             ldy     #HEXBUF
E01B BDE182           (        forth.asm):00305 (7)             jsr     HDMP4   
E01E 8E03FC           (        forth.asm):00306 (3)             ldx     #HEXBUF
E021 BDE2E0           (        forth.asm):00307 (7)             jsr     PUTS
E024 BDE2ED           (        forth.asm):00308 (7)             jsr     PUTCR
E027 8EE784           (        forth.asm):00309 (3)             ldx     #ERRHD1
E02A AF6C             (        forth.asm):00310 (5+1)           stx     12,s            Resume execution in the error handler
E02C 8EE000           (        forth.asm):00311 (3)             ldx     #IODZHDL
E02F AF68             (        forth.asm):00312 (5+1)           stx     8,s             With Y set to IODZHDL
E031 8603             (        forth.asm):00313 (2)             lda     #3              And user ABORT error code
E033 A762             (        forth.asm):00314 (4+1)           sta     2,s             Passed back through B
E035 3B               (        forth.asm):00315 (17+?)  @iodzh3 rti
                      (        forth.asm):00316         
     E036             (        forth.asm):00317         SWI3HDL equ     *
     E036             (        forth.asm):00318         SWI2HDL equ     *
     E036             (        forth.asm):00319         IRQHDL  equ     *
     E036             (        forth.asm):00320         SWIHDL  equ     *
                      (        forth.asm):00321                 IFEQ    HVNMI
E036                  (        forth.asm):00322         NMIHDL                          These should never happen
                      (        forth.asm):00323                 ENDC
E036 3B               (        forth.asm):00324 (17+?)          rti
                      (        forth.asm):00325         
                      (        forth.asm):00326         * Interrupts are disabled by default upon reset.
                      (        forth.asm):00327         * NMI# will not be "armed" until S is initiliazed.
E037 113D01           (        forth.asm):00328 (5)     RSTHDL  ldmd    #1              Establish 6309 native mode
                      (        forth.asm):00329         
E03A 8643             (        forth.asm):00330 (2)             lda     #ACIRSET
E03C B7D800           (        forth.asm):00331 (4)             sta     ACIACTL         ACIA master reset
E03F 86D5             (        forth.asm):00332 (2)             lda     #ACIRTS1
E041 B7D800           (        forth.asm):00333 (4)             sta     ACIACTL         RTS# high, 8N1
                      (        forth.asm):00334         
E044 8EFE11           (        forth.asm):00335 (3)             ldx     #BOOTMSG        Identity statement
                      (        forth.asm):00336         
                      (        forth.asm):00337         * Send the NUL terminated string pointed to by X to the ACIA.
                      (        forth.asm):00338         * The RAM is not yet assumed to be working.
E047 C602             (        forth.asm):00339 (2)     INIT    ldb     #ACITDRE
E049 A680             (        forth.asm):00340 (4+1)   @init0  lda     ,x+
E04B 270A             (        forth.asm):00341 (3)             beq     RAMCHK          NUL marks the end of the string
E04D F5D800           (        forth.asm):00342 (4)     @init1  bitb    ACIACTL         Wait for TDRE bit to be set
E050 27FB             (        forth.asm):00343 (3)             beq     @init1
E052 B7D801           (        forth.asm):00344 (4)             sta     ACIADAT         Transmit data
E055 20F2             (        forth.asm):00345 (3)             bra     @init0          Next char, if any
                      (        forth.asm):00346         
                      (        forth.asm):00347         * RAM0 32 KB self test (destructive).
E057 8E0000           (        forth.asm):00348 (3)     RAMCHK  ldx     #RAMSTRT
E05A AF84             (        forth.asm):00349 (5+0)   @ramch1 stx     ,x
E05C AC84             (        forth.asm):00350 (5+0)           cmpx    ,x
E05E 2609             (        forth.asm):00351 (3)             bne     RAMFAIL
E060 3002             (        forth.asm):00352 (4+1)           leax    2,x
E062 8C8000           (        forth.asm):00353 (3)             cmpx    #RAMSTRT+RAMSIZE
E065 26F3             (        forth.asm):00354 (3)             bne     @ramch1
E067 2012             (        forth.asm):00355 (3)             bra     RAMOK
                      (        forth.asm):00356         
E069 C680             (        forth.asm):00357 (2)     RAMFAIL ldb     #128
E06B 108E8000         (        forth.asm):00358 (4)     @ramf1  ldy     #$8000
E06F 313F             (        forth.asm):00359 (4+1)   @ramf2  leay    -1,y
E071 26FC             (        forth.asm):00360 (3)             bne     @ramf2
E073 5A               (        forth.asm):00361 (1)             decb
E074 26F5             (        forth.asm):00362 (3)             bne     @ramf1
E076 8EFE6C           (        forth.asm):00363 (3)             ldx     #RAMFM
E079 20CC             (        forth.asm):00364 (3)             bra     INIT            Here we go again
                      (        forth.asm):00365         
                      (        forth.asm):00366         * RAM Initialization to all $C7 if DEBUG mode is enabled else zeroes.
E07B 8E0000           (        forth.asm):00367 (3)     RAMOK   ldx     #RAMSTRT
E07E 3101             (        forth.asm):00368 (4+1)           leay    1,x
E080 10867FFF         (        forth.asm):00369 (4)             ldw     #RAMSIZE-1
                      (        forth.asm):00370                 IFNE    DEBUG
                      (        forth.asm):00371                 lda     #ILLOPC
                      (        forth.asm):00372                 sta     ,x
                      (        forth.asm):00373                 ELSE
E084 6F84             (        forth.asm):00374 (6+0)           clr     ,x
                      (        forth.asm):00375                 ENDC                    DEBUG
E086 113812           (        forth.asm):00376 (6+?)           tfm     x+,y+
                      (        forth.asm):00377         
                      (        forth.asm):00378         * Initialize the system stack pointer and the direct page base address register.
E089 10CE8000         (        forth.asm):00379 (4)             lds     #RAMSTRT+RAMSIZE
E08D 8601             (        forth.asm):00380 (2)             lda     #VARSPC/256
E08F 1F8B             (        forth.asm):00381 (4)             tfr     a,dp
     01               (        forth.asm):00382                 SETDP   VARSPC/256
                      (        forth.asm):00383         
                      (        forth.asm):00384         * Serial buffer parameters initialization. We are doing this here because
                      (        forth.asm):00385         * PUTS requires prior software flow control initialization.
                      (        forth.asm):00386                 IFNE    DEBUG
                      (        forth.asm):00387                 clrd
                      (        forth.asm):00388                 std     SERBENQ         Two birds with one stone
                      (        forth.asm):00389                 sta     SERBCNT
                      (        forth.asm):00390                 IFNE    HVNMI
                      (        forth.asm):00391                 IFNE    HVNMI2
                      (        forth.asm):00392                 std     SBDROPC         Initialize chararacter drop count
                      (        forth.asm):00393                 ENDC                    HVNMI2
                      (        forth.asm):00394                 ENDC                    HVNMI
                      (        forth.asm):00395                 ENDC                    DEBUG
E091 8601             (        forth.asm):00396 (2)             lda     #1              Initialize software flow control on output
E093 974E             (        forth.asm):00397 (3)             sta     XMITOK
                      (        forth.asm):00398         
E095 8EFE5C           (        forth.asm):00399 (3)             ldx     #RAMOKM
E098 BDE2E0           (        forth.asm):00400 (7)             jsr     PUTS
E09B BDE341           (        forth.asm):00401 (7)             jsr     FORTHIN         Global variables initialization
E09E BDE932           (        forth.asm):00402 (7)             jsr     CFINIT          CompactFlash card initialization
                      (        forth.asm):00403                 IFNE    RTCFEAT
                      (        forth.asm):00404                 jsr     RTCINIT         Real time clock initialization
                      (        forth.asm):00405                 ENDC                    RTCFEAT
                      (        forth.asm):00406         
                      (        forth.asm):00407         * Lower RTS and enable FIRQ.
E0A1 8695             (        forth.asm):00408 (2)             lda     #ACIRTS0
E0A3 B7D800           (        forth.asm):00409 (4)             sta     ACIACTL
E0A6 1CBF             (        forth.asm):00410 (2)             andcc   #^FFLAG
                      (        forth.asm):00411         
E0A8 0D47             (        forth.asm):00412 (4)             tst     CFCARDP
E0AA 2706             (        forth.asm):00413 (3)             beq     INTERP
                      (        forth.asm):00414         
                      (        forth.asm):00415         * A CF card is present, LOAD block #1.
E0AC 8E0001           (        forth.asm):00416 (3)             ldx     #1
E0AF BDF7B6           (        forth.asm):00417 (7)             jsr     LOAD1
                      (        forth.asm):00418         
                      (        forth.asm):00419         * The interpreter main loop.
E0B2 104F             (        forth.asm):00420 (2)     INTERP  clrd
E0B4 DD2C             (        forth.asm):00421 (4)             std     UBLK            Interpreting from the console. Set BLK to 0
E0B6 DD2A             (        forth.asm):00422 (4)             std     UTOIN
E0B8 974A             (        forth.asm):00423 (3)             sta     SRCID           Clear SOURCE-ID. Not invoked in EVALUATE context
E0BA 8E0378           (        forth.asm):00424 (3)             ldx     #CMDBUF
E0BD 9F20             (        forth.asm):00425 (4)             stx     BSBFADR
E0BF C684             (        forth.asm):00426 (2)             ldb     #CMDBFSZ        No NUL terminator in this implementation
E0C1 BDE303           (        forth.asm):00427 (7)             jsr     GETS            Acquire command from the console
                      (        forth.asm):00428         
                      (        forth.asm):00429         * Additional setup in case the ANSI \ is used.
E0C4 4F               (        forth.asm):00430 (1)             clra
E0C5 DD26             (        forth.asm):00431 (4)             std     ISLEN           GETS returns the entered character count via B
                      (        forth.asm):00432         
E0C7 5F               (        forth.asm):00433 (1)             clrb
E0C8 DD28             (        forth.asm):00434 (4)             std     ISEADDR         Clear end of input stream address (included)
E0CA 8D02             (        forth.asm):00435 (6)             bsr     _INTERP
E0CC 20E4             (        forth.asm):00436 (3)     MINTLRA bra     INTERP
                      (        forth.asm):00437         
                      (        forth.asm):00438         * The interpreter itself.
E0CE BDE37C           (        forth.asm):00439 (7)     _INTERP jsr     SCNSTOK         Scan for the beginning of a word at address X
E0D1 2715             (        forth.asm):00440 (3)             beq     @oeistr         This is the end
E0D3 1F10             (        forth.asm):00441 (4)             tfr     x,d             Starting token address to D
E0D5 BDE164           (        forth.asm):00442 (7)             jsr     U2INFRD         Derive >IN from D
E0D8 0D25             (        forth.asm):00443 (4)             tst     USTATE+1        We do ignore the upper byte
E0DA 263A             (        forth.asm):00444 (3)             bne     COMP            We are compiling
E0DC BDE4C8           (        forth.asm):00445 (7)             jsr     SWDIC           Updates TOKENEP, CURTOKL, IMDFLG/DEFFLG
E0DF 261C             (        forth.asm):00446 (3)             bne     @exec           Word found, execute it
E0E1 BDE3D4           (        forth.asm):00447 (7)             jsr     NUMCVT
     E0E4             (        forth.asm):00448         NMCVIRA equ     *
E0E4 9E04             (        forth.asm):00449 (4)             ldx     TOKENEP
E0E6 20E6             (        forth.asm):00450 (3)             bra     _INTERP         Next token, please!
                      (        forth.asm):00451         * End of input stream condition is recognized. We are looking at the past here.
E0E8 0D4A             (        forth.asm):00452 (4)     @oeistr tst     SRCID           Were we running a string via EVALUATE?
E0EA 2604             (        forth.asm):00453 (3)             bne     @done           No feedback if that was the case
E0EC DC2C             (        forth.asm):00454 (4)             ldd     UBLK
E0EE 2701             (        forth.asm):00455 (3)             beq     @feedbk         We are back from the console
E0F0 39               (        forth.asm):00456 (4)     @done   rts                     We're done here
E0F1 8EFE7F           (        forth.asm):00457 (3)     @feedbk ldx     #OKFEEDB        Provide OK feedback
E0F4 0D25             (        forth.asm):00458 (4)             tst     USTATE+1        No OK feedback if we're compiling, just CRLF
E0F6 2702             (        forth.asm):00459 (3)             beq     @fullfb
E0F8 3003             (        forth.asm):00460 (4+1)           leax    3,x             Skip the ' OK' string when compiling
E0FA 7EE2E0           (        forth.asm):00461 (3)     @fullfb jmp     PUTS            Back to whoever invoked us
E0FD 9645             (        forth.asm):00462 (3)     @exec   lda     DEFFLG
E0FF 2705             (        forth.asm):00463 (3)             beq     @introk         Compilation only flag is not set
E101 C606             (        forth.asm):00464 (2)             ldb     #6              Incorrect STATE
E103 BDE781           (        forth.asm):00465 (7)             jsr     ERRHDLR         No return
     E106             (        forth.asm):00466         INTISRA equ     *               For symbolic stack debugging purposes
E106 DC04             (        forth.asm):00467 (4)     @introk ldd     TOKENEP
E108 8D5A             (        forth.asm):00468 (6)             bsr     U2INFRD         Derive >IN from D
E10A 8EE111           (        forth.asm):00469 (3)             ldx     #INTRPRA        The return address
E10D 3410             (        forth.asm):00470 (4+2)           pshs    x
E10F 1F25             (        forth.asm):00471 (4)             tfr     y,pc            An indirect call to Y
E111 BDE89F           (        forth.asm):00472 (7)     INTRPRA jsr     BKIN2PT         Derive X from BLK, >IN
E114 20B8             (        forth.asm):00473 (3)             bra     _INTERP
                      (        forth.asm):00474         
                      (        forth.asm):00475         * The compiler.
                      (        forth.asm):00476         * Upon entry TOKENSP has been set by a prior call to SCNSTOK.
E116 BDE4C8           (        forth.asm):00477 (7)     COMP    jsr     SWDIC           Updates TOKENEP, CURTOKL, IMDFLG/DEFFLG
E119 271E             (        forth.asm):00478 (3)             beq     @cmpnum         Word @ TOKENSP is not in the dictionary
E11B 0D44             (        forth.asm):00479 (4)             tst     IMDFLG
E11D 2712             (        forth.asm):00480 (3)             beq     @notimd
E11F DC04             (        forth.asm):00481 (4)             ldd     TOKENEP
E121 8D41             (        forth.asm):00482 (6)             bsr     U2INFRD         Derive >IN from D
E123 8EE12A           (        forth.asm):00483 (3)             ldx     #COMPLRA        Word is immediate. Execute it.
E126 3410             (        forth.asm):00484 (4+2)           pshs    x               Return to COMPLRA
E128 1F25             (        forth.asm):00485 (4)             tfr     y,pc            An indirect call to Y
E12A BDE89F           (        forth.asm):00486 (7)     COMPLRA jsr     BKIN2PT         Derive X from BLK, >IN
E12D 9F04             (        forth.asm):00487 (4)             stx     TOKENEP
E12F 209D             (        forth.asm):00488 (3)             bra     _INTERP         Branch back to the interpreter
E131 1F21             (        forth.asm):00489 (4)     @notimd tfr     y,x
E133 8D20             (        forth.asm):00490 (6)             bsr     EMXASXT         Emit X as an execution token
E135 9E04             (        forth.asm):00491 (4)     @cmpdon ldx     TOKENEP
E137 2095             (        forth.asm):00492 (3)             bra     _INTERP
E139 BDE3D4           (        forth.asm):00493 (7)     @cmpnum jsr     NUMCVT
     E13C             (        forth.asm):00494         NMCVCRA equ     *
E13C 0D40             (        forth.asm):00495 (4)             tst     ISDBLF
E13E 2607             (        forth.asm):00496 (3)             bne     @cmpdbl
E140 3710             (        forth.asm):00497                 UCNPOP                  TOS to X
E142 BDE591           (        forth.asm):00498 (7)             jsr     LITER
E145 20EE             (        forth.asm):00499 (3)             bra     @cmpdon
                      (        forth.asm):00500         * The following is some sort of half baked 2LITERAL.
                      (        forth.asm):00501         * Please note that NUMCVT guarantees us that at least two cells are stacked up.
E147 AE42             (        forth.asm):00502 (5+1)   @cmpdbl ldx     2,u
E149 BDE591           (        forth.asm):00503 (7)             jsr     LITER           LSC
E14C AEC4             (        forth.asm):00504 (5+0)           ldx     ,u
E14E BDE591           (        forth.asm):00505 (7)             jsr     LITER           MSC
E151 3344             (        forth.asm):00506 (4+1)           leau    4,u             2DROP
E153 20E0             (        forth.asm):00507 (3)             bra     @cmpdon
                      (        forth.asm):00508         
                      (        forth.asm):00509         * Emit (in a code generation understanding) X as an execution token.
                      (        forth.asm):00510         * In essence, this simply inserts JSR <X> at HERE.
                      (        forth.asm):00511         * Note: this code provides support for trailing JSR elimination.
                      (        forth.asm):00512         * On input: X has the target execution token.
                      (        forth.asm):00513         * On output: Y will have HERE, A will be altered, X will be preserved.
E155 109E08           (        forth.asm):00514 (5)     EMXASXT ldy     DICEND
E158 109F14           (        forth.asm):00515 (5)             sty     JSRLAST         JSRLAST points to the latest JSR code emission
E15B 86BD             (        forth.asm):00516 (2)             lda     #JSROPC         JSR extended
E15D BDE5A8           (        forth.asm):00517 (7)             jsr     VARCON2         Compile a JSR to the execution token
E160 109F08           (        forth.asm):00518 (5)             sty     DICEND
E163 39               (        forth.asm):00519 (4)             rts
                      (        forth.asm):00520         
                      (        forth.asm):00521         * Derive UTOIN from D's current value. D is altered.
E164 9320             (        forth.asm):00522 (4)     U2INFRD subd    BSBFADR
E166 DD2A             (        forth.asm):00523 (4)             std     UTOIN
E168 39               (        forth.asm):00524 (4)             rts
                      (        forth.asm):00525         
                      (        forth.asm):00526         * Store the HEX representation of the lower nibble of A to Y+.
E169 3404             (        forth.asm):00527 (4+1)   HEX1D   pshs    b
E16B C630             (        forth.asm):00528 (2)             ldb     #'0
E16D 840F             (        forth.asm):00529 (2)             anda    #$0f
E16F 810A             (        forth.asm):00530 (2)             cmpa    #10
E171 2502             (        forth.asm):00531 (3)             bcs     @hex1d1
E173 C637             (        forth.asm):00532 (2)             ldb     #'A-10
E175 103098           (        forth.asm):00533 (4)     @hex1d1 addr    b,a
E178 A7A0             (        forth.asm):00534 (4+1)           sta     ,y+
E17A 3504             (        forth.asm):00535 (4+1)           puls    b
E17C 39               (        forth.asm):00536 (4)             rts
                      (        forth.asm):00537         
E17D 44               (        forth.asm):00538 (1)     ADIV16  lsra
E17E 44               (        forth.asm):00539 (1)             lsra
E17F 44               (        forth.asm):00540 (1)             lsra
E180 44               (        forth.asm):00541 (1)             lsra
E181 39               (        forth.asm):00542 (4)             rts
                      (        forth.asm):00543         
                      (        forth.asm):00544         * Hexdump D to 4 bytes starting at Y.  Upon return, Y will point 1 byte
                      (        forth.asm):00545         * after the last character emitted. D is preserved.
E182 3406             (        forth.asm):00546 (4+2)   HDMP4   pshs    d
E184 8DF7             (        forth.asm):00547 (6)             bsr     ADIV16
E186 8DE1             (        forth.asm):00548 (6)             bsr     HEX1D
E188 A6E4             (        forth.asm):00549 (4+0)           lda     ,s
E18A 8DDD             (        forth.asm):00550 (6)             bsr     HEX1D
E18C A661             (        forth.asm):00551 (4+1)           lda     1,s
E18E 8DED             (        forth.asm):00552 (6)             bsr     ADIV16
E190 8DD7             (        forth.asm):00553 (6)             bsr     HEX1D
E192 A661             (        forth.asm):00554 (4+1)           lda     1,s
E194 8DD3             (        forth.asm):00555 (6)             bsr     HEX1D
E196 3506             (        forth.asm):00556 (4+2)           puls    d
E198 6FA4             (        forth.asm):00557 (6+0)           clr     ,y
E19A 39               (        forth.asm):00558 (4)             rts
                      (        forth.asm):00559         
E19B 3406             (        forth.asm):00560 (4+2)   HDMP2   pshs    d
E19D 8DDE             (        forth.asm):00561 (6)             bsr     ADIV16
E19F 8DC8             (        forth.asm):00562 (6)             bsr     HEX1D
E1A1 A6E4             (        forth.asm):00563 (4+0)           lda     ,s
E1A3 8DC4             (        forth.asm):00564 (6)             bsr     HEX1D
E1A5 3506             (        forth.asm):00565 (4+2)           puls    d
E1A7 6FA4             (        forth.asm):00566 (6+0)           clr     ,y
E1A9 39               (        forth.asm):00567 (4)             rts
                      (        forth.asm):00568         
                      (        forth.asm):00569                 IFNE    HVNMI
                      (        forth.asm):00570         * Add string pointed to by X starting at the address stored in Y.
E1AA 3402             (        forth.asm):00571 (4+1)   ADDS    pshs    a
E1AC A680             (        forth.asm):00572 (4+1)   @adds1  lda     ,x+
E1AE A7A0             (        forth.asm):00573 (4+1)           sta     ,y+
E1B0 26FA             (        forth.asm):00574 (3)             bne     @adds1
E1B2 3502             (        forth.asm):00575 (4+1)           puls    a
E1B4 39               (        forth.asm):00576 (4)             rts
                      (        forth.asm):00577         
E1B5 8DF3             (        forth.asm):00578 (6)     NMI2DM  bsr     ADDS
E1B7 313F             (        forth.asm):00579 (4+1)           leay    -1,y            Backward over NUL
E1B9 20E0             (        forth.asm):00580 (3)             bra     HDMP2
                      (        forth.asm):00581         
E1BB 8DED             (        forth.asm):00582 (6)     NMI4DM  bsr     ADDS
E1BD 313F             (        forth.asm):00583 (4+1)           leay    -1,y            Backward over NUL
E1BF 20C1             (        forth.asm):00584 (3)             bra     HDMP4
                      (        forth.asm):00585         
E1C1 8E044C           (        forth.asm):00586 (3)     NMIDML  ldx     #TBUFF
E1C4 BDE2E0           (        forth.asm):00587 (7)             jsr     PUTS
E1C7 7EE2ED           (        forth.asm):00588 (3)             jmp     PUTCR
                      (        forth.asm):00589         
                      (        forth.asm):00590         * All registers are stacked in native mode.
E1CA B6D800           (        forth.asm):00591 (4)     NMIHDL  lda     ACIACTL
E1CD 3402             (        forth.asm):00592 (4+1)           pshs    a
E1CF 964E             (        forth.asm):00593 (3)             lda     XMITOK
E1D1 3402             (        forth.asm):00594 (4+1)           pshs    a
E1D3 8601             (        forth.asm):00595 (2)             lda     #1
E1D5 974E             (        forth.asm):00596 (3)             sta     XMITOK
                      (        forth.asm):00597         * Stack structure at this point
                      (        forth.asm):00598         * 0     saved XMITOK: 1 byte
                      (        forth.asm):00599         * 1     saved ACIA status register: 1 byte
                      (        forth.asm):00600         * 2     CC
                      (        forth.asm):00601         * 3     D
                      (        forth.asm):00602         * 5     W
                      (        forth.asm):00603         * 7     DP
                      (        forth.asm):00604         * 8     X
                      (        forth.asm):00605         * 10    Y
                      (        forth.asm):00606         * 12    U
                      (        forth.asm):00607         * 14    PC
E1D7 BDE2ED           (        forth.asm):00608 (7)             jsr     PUTCR
                      (        forth.asm):00609         
                      (        forth.asm):00610         * First line: CC, D, W, DP, X, Y, U, PC, S
E1DA 108E044C         (        forth.asm):00611 (4)             ldy     #TBUFF
E1DE 8EE20D           (        forth.asm):00612 (3)             ldx     #CCREGM
E1E1 A662             (        forth.asm):00613 (4+1)           lda     2,s             CC in the system stack
E1E3 8DD0             (        forth.asm):00614 (6)             bsr     NMI2DM
                      (        forth.asm):00615         
E1E5 EC63             (        forth.asm):00616 (5+1)           ldd     3,s             D in the system stack
E1E7 8DD2             (        forth.asm):00617 (6)             bsr     NMI4DM
                      (        forth.asm):00618         
E1E9 EC65             (        forth.asm):00619 (5+1)           ldd     5,s             W in the system stack
E1EB 8DCE             (        forth.asm):00620 (6)             bsr     NMI4DM
                      (        forth.asm):00621         
E1ED A667             (        forth.asm):00622 (4+1)           lda     7,s             DP in the system stack
E1EF 8DC4             (        forth.asm):00623 (6)             bsr     NMI2DM
                      (        forth.asm):00624         
E1F1 EC68             (        forth.asm):00625 (5+1)           ldd     8,s             X in the system stack
E1F3 8DC6             (        forth.asm):00626 (6)             bsr     NMI4DM
                      (        forth.asm):00627         
E1F5 EC6A             (        forth.asm):00628 (5+1)           ldd     10,s            Y in the system stack
E1F7 8DC2             (        forth.asm):00629 (6)             bsr     NMI4DM
                      (        forth.asm):00630         
E1F9 EC6C             (        forth.asm):00631 (5+1)           ldd     12,s            U in the system stack
E1FB 8DBE             (        forth.asm):00632 (6)             bsr     NMI4DM
                      (        forth.asm):00633         
E1FD EC6E             (        forth.asm):00634 (5+1)           ldd     14,s            PC in the system stack
E1FF 8DBA             (        forth.asm):00635 (6)             bsr     NMI4DM
                      (        forth.asm):00636         
E201 33E810           (        forth.asm):00637 (4+1)           leau    16,s            S in the system stack
E204 1F30             (        forth.asm):00638 (4)             tfr     u,d
E206 8DB3             (        forth.asm):00639 (6)             bsr     NMI4DM
                      (        forth.asm):00640         
E208 8DB7             (        forth.asm):00641 (6)             bsr     NMIDML
                      (        forth.asm):00642         
                      (        forth.asm):00643                 IFNE    HVNMI2
                      (        forth.asm):00644         * Second line: ACIST, XMTOK, SBASE, SBENQ, SBDEQ, SBCNT, SBDROPC
                      (        forth.asm):00645                 ldy     #TBUFF
                      (        forth.asm):00646                 ldx     #ACISTM
                      (        forth.asm):00647                 lda     1,s             ACIA status register in the system stack
                      (        forth.asm):00648                 bsr     NMI2DM
                      (        forth.asm):00649         
                      (        forth.asm):00650                 lda     ,s              XMITOK in the system stack
                      (        forth.asm):00651                 bsr     NMI2DM
                      (        forth.asm):00652         
                      (        forth.asm):00653                 ldd     #SERBUF         SERBUF address
                      (        forth.asm):00654                 bsr     NMI4DM
                      (        forth.asm):00655         
                      (        forth.asm):00656                 lda     SERBENQ         SERBENQ 8 bit offset
                      (        forth.asm):00657                 bsr     NMI2DM
                      (        forth.asm):00658         
                      (        forth.asm):00659                 lda     SERBDEQ         SERBDEQ 8 bit offset
                      (        forth.asm):00660                 bsr     NMI2DM
                      (        forth.asm):00661         
                      (        forth.asm):00662                 lda     SERBCNT
                      (        forth.asm):00663                 bsr     NMI2DM
                      (        forth.asm):00664         
                      (        forth.asm):00665                 ldd     SBDROPC         Number of bytes dropped because SERBUF was full
                      (        forth.asm):00666                 bsr     NMI4DM
                      (        forth.asm):00667         
                      (        forth.asm):00668                 bsr     NMIDML
                      (        forth.asm):00669                 ENDC                    HVNMI2
                      (        forth.asm):00670         
E20A 3262             (        forth.asm):00671 (4+1)           leas    2,s             System stack cleanup
E20C 3B               (        forth.asm):00672 (17+?)          rti
                      (        forth.asm):00673         
E20D 43432000         (        forth.asm):00674         CCREGM  fcn     'CC '
E211 20442000         (        forth.asm):00675         DREGM   fcn     ' D '
E215 20572000         (        forth.asm):00676         WREGM   fcn     ' W '
E219 2044502000       (        forth.asm):00677         DPREGM  fcn     ' DP '
E21E 20582000         (        forth.asm):00678         XREGM   fcn     ' X '
E222 20592000         (        forth.asm):00679         YREGM   fcn     ' Y '
E226 20552000         (        forth.asm):00680         UREGM   fcn     ' U '
E22A 2050432000       (        forth.asm):00681         PCREGM  fcn     ' PC '
E22F 20532000         (        forth.asm):00682         SREGM   fcn     ' S '
                      (        forth.asm):00683                 IFNE    HVNMI2
E233                  (        forth.asm):00684         ACISTM  fcn     'AS '           ACIA status register
E233                  (        forth.asm):00685         XMTOKM  fcn     ' XO '          XMITOK--software flow control (one byte)
E233                  (        forth.asm):00686         SBASEM  fcn     ' SB '          Serial FIFO base address (two bytes)
E233                  (        forth.asm):00687         SBENQM  fcn     ' EN '          FIFO enqueue offset (one byte)
E233                  (        forth.asm):00688         SBSEQM  fcn     ' DE '          FIFO dequeue offset (one byte)
E233                  (        forth.asm):00689         SBCNTM  fcn     ' CN '          FIFO queued byte count (one byte)
E233                  (        forth.asm):00690         SBDRPM  fcn     ' DR '          Number of characters dropped (two bytes)
                      (        forth.asm):00691                 ENDC                    HVNMI2
                      (        forth.asm):00692         
                      (        forth.asm):00693                 ENDC                    HVNMI
                      (        forth.asm):00694         
                      (        forth.asm):00695         * Returns the length of the string pointed to by X (terminator excluded) in W.
E233 3410             (        forth.asm):00696 (4+2)   SLEN    pshs    x
E235 105F             (        forth.asm):00697 (2)             clrw
E237 105C             (        forth.asm):00698 (2)     @slen1  incw
E239 A680             (        forth.asm):00699 (4+1)           lda     ,x+
E23B 26FA             (        forth.asm):00700 (3)             bne     @slen1
E23D 105A             (        forth.asm):00701 (2)             decw
E23F 3510             (        forth.asm):00702 (4+2)           puls    x
E241 39               (        forth.asm):00703 (4)             rts
                      (        forth.asm):00704         
                      (        forth.asm):00705                 include console.asm
                      (      console.asm):00001         * FIRQ interrupt handler. This is entered on RDRF (input available).
E242 3416             (      console.asm):00002 (4+4)   FIRQHDL pshs    x,d
                      (      console.asm):00003                 IFNE    RTCFEAT
                      (      console.asm):00004                 jsr     RTCIHDL         Check for RTC periodic interrupt
                      (      console.asm):00005                 ENDC                    RTCFEAT
E244 B6D800           (      console.asm):00006 (4)             lda     ACIACTL
E247 8580             (      console.asm):00007 (2)             bita    #ACIISVC        Does the ACIA need input service?
E249 2731             (      console.asm):00008 (3)             beq     @nsintr         No. This is not the IRQ source we're looking for
                      (      console.asm):00009                 IFNE    DEBUG
                      (      console.asm):00010                 bita    #ACIRDRF
                      (      console.asm):00011                 beq     @nsintr         ACIA RDRF status bit should be set in all cases
                      (      console.asm):00012                 bita    #ACIOVRN        ACIA data overrun on read?
                      (      console.asm):00013                 beq     @datval         No, incoming data is valid
                      (      console.asm):00014                 ldb     ACIADAT         Clear overrun bit and INTACK
                      (      console.asm):00015                 ldb     #'%             Error indicating character is %
                      (      console.asm):00016                 bra     @chkovf
                      (      console.asm):00017                 ENDC                    DEBUG
                      (      console.asm):00018         * Out of band characters processing.
E24B F6D801           (      console.asm):00019 (4)     @datval ldb     ACIADAT         Incoming data byte to B and INTACK
E24E C103             (      console.asm):00020 (2)             cmpb    #ETX            Control-C?
E250 272D             (      console.asm):00021 (3)             beq     @sigint         Yes
E252 C113             (      console.asm):00022 (2)             cmpb    #XOFF
E254 2742             (      console.asm):00023 (3)             beq     @outngo         Output is being suspended
E256 C111             (      console.asm):00024 (2)             cmpb    #XON
E258 2741             (      console.asm):00025 (3)             beq     @outok          Output is being re-enabled
E25A 964D             (      console.asm):00026 (3)     @chkovf lda     SERBCNT
E25C 810F             (      console.asm):00027 (2)             cmpa    #15             At high water level mark?
E25E 2609             (      console.asm):00028 (3)             bne     @sbenq          No, proceed without negating RTS#
E260 3404             (      console.asm):00029 (4+1)           pshs    b
E262 C6D5             (      console.asm):00030 (2)             ldb     #ACIRTS1
E264 F7D800           (      console.asm):00031 (4)             stb     ACIACTL         Negate RTS#
E267 3504             (      console.asm):00032 (4+1)           puls    b
E269 8140             (      console.asm):00033 (2)     @sbenq  cmpa    #SERBSZ
                      (      console.asm):00034                 IFNE    HVNMI2
                      (      console.asm):00035                 beq     @nsdrop         Serial input buffer physically full
                      (      console.asm):00036                 ELSE
E26B 270F             (      console.asm):00037 (3)             beq     @nsintr         Serial input buffer physically full
                      (      console.asm):00038                 ENDC                    HVNMI2
E26D 4C               (      console.asm):00039 (1)             inca
E26E 974D             (      console.asm):00040 (3)             sta     SERBCNT         Update incoming FIFO byte count
E270 8E014F           (      console.asm):00041 (3)             ldx     #SERBUF
E273 964B             (      console.asm):00042 (3)             lda     SERBENQ         Enqueue offset to A
E275 E786             (      console.asm):00043 (4+1)           stb     a,x             Enqueue incoming character
E277 4C               (      console.asm):00044 (1)             inca
E278 843F             (      console.asm):00045 (2)             anda    #SERBSZ-1       Modulo arithmetic
E27A 974B             (      console.asm):00046 (3)             sta     SERBENQ
E27C 3516             (      console.asm):00047 (4+4)   @nsintr puls    d,x
E27E 3B               (      console.asm):00048 (17+?)          rti
                      (      console.asm):00049         * Control-C was recognized.
E27F 3264             (      console.asm):00050 (4+1)   @sigint leas    4,s             Drop D and X
E281 964C             (      console.asm):00051 (3)             lda     SERBDEQ
E283 974B             (      console.asm):00052 (3)             sta     SERBENQ
E285 0F4D             (      console.asm):00053 (5)             clr     SERBCNT         Serial input buffer has been emptied
E287 BDEBC8           (      console.asm):00054                 RFXT    jsr,NCLR+7      Clear the data stack
E28A BDEBD3           (      console.asm):00055                 RFXT    jsr,RCLR+7      and the return stack
E28D 10AE61           (      console.asm):00056 (6+1)           ldy     1,s             Saved PC from the FIRQ stack
E290 8EE784           (      console.asm):00057 (3)             ldx     #ERRHD1
E293 AF61             (      console.asm):00058 (5+1)           stx     1,s             Execution continues in the error handler
E295 C603             (      console.asm):00059 (2)             ldb     #3              with ABORT error code passed through B
E297 3B               (      console.asm):00060 (17+?)          rti
E298 4F               (      console.asm):00061 (1)     @outngo clra
E299 2002             (      console.asm):00062 (3)             bra     @sxmsta
E29B 8601             (      console.asm):00063 (2)     @outok  lda     #1
E29D 974E             (      console.asm):00064 (3)     @sxmsta sta     XMITOK          Update XMIT status flag
E29F 20DB             (      console.asm):00065 (3)             bra     @nsintr
                      (      console.asm):00066                 IFNE    HVNMI2
                      (      console.asm):00067         * Increment character drop count (displayed by NMIHDL).
E2A1                  (      console.asm):00068         @nsdrop ldd     SBDROPC
                      (      console.asm):00069                 incd
                      (      console.asm):00070                 std     SBDROPC
                      (      console.asm):00071                 bra     @nsintr
                      (      console.asm):00072                 ENDC                    HVNMI2
                      (      console.asm):00073         
                      (      console.asm):00074         * We do not have to talk to the ACIA directly, unless SERBCNT is zero,
                      (      console.asm):00075         * in which case we have to lower RTS#, so as to accept incoming characters.
                      (      console.asm):00076         * This can only be called from base level!
E2A1 3416             (      console.asm):00077 (4+4)   GETCH   pshs    x,d
E2A3 0D4D             (      console.asm):00078 (4)     @again  tst     SERBCNT
E2A5 260F             (      console.asm):00079 (3)             bne     @sbdind         We have incoming material
E2A7 C695             (      console.asm):00080 (2)             ldb     #ACIRTS0
E2A9 F7D800           (      console.asm):00081 (4)             stb     ACIACTL         Assert RTS#
E2AC 1CBF             (      console.asm):00082 (2)             andcc   #^FFLAG         Unmask FIRQ
E2AE 8E0001           (      console.asm):00083 (3)             ldx     #1
E2B1 BDF822           (      console.asm):00084 (7)             jsr     MILLIS1         Busy waiting for one millisecond
E2B4 20ED             (      console.asm):00085 (3)             bra     @again          Try again
                      (      console.asm):00086         * Serial buffer data indication.
E2B6 1A40             (      console.asm):00087 (2)     @sbdind orcc    #FFLAG          Mask FIRQ
E2B8 0A4D             (      console.asm):00088 (5)             dec     SERBCNT
E2BA 1CBF             (      console.asm):00089 (2)             andcc   #^FFLAG         Unmask FIRQ
E2BC 8E014F           (      console.asm):00090 (3)             ldx     #SERBUF
E2BF 964C             (      console.asm):00091 (3)             lda     SERBDEQ         Dequeue offset to A
E2C1 E686             (      console.asm):00092 (4+1)           ldb     a,x             Buffered input character to B
E2C3 E7E4             (      console.asm):00093 (4+0)           stb     ,s              Incoming character to A in the caller's stack
E2C5 4C               (      console.asm):00094 (1)             inca
E2C6 843F             (      console.asm):00095 (2)             anda    #SERBSZ-1       Modulo arithmetic
E2C8 974C             (      console.asm):00096 (3)             sta     SERBDEQ
E2CA 3516             (      console.asm):00097 (4+4)           puls    d,x             Same as it ever was
E2CC 39               (      console.asm):00098 (4)             rts
                      (      console.asm):00099         
E2CD 3404             (      console.asm):00100 (4+1)   PUTCH   pshs    b
E2CF C602             (      console.asm):00101 (2)             ldb     #ACITDRE
E2D1 F5D800           (      console.asm):00102 (4)     @tdrdrn bitb    ACIACTL
E2D4 27FB             (      console.asm):00103 (3)             beq     @tdrdrn         Drain the transmit data register
E2D6 0D4E             (      console.asm):00104 (4)     @wfxon  tst     XMITOK          Software flow control on output
E2D8 27FC             (      console.asm):00105 (3)             beq     @wfxon          Wait for XON
E2DA B7D801           (      console.asm):00106 (4)             sta     ACIADAT         Transmit data
E2DD 3504             (      console.asm):00107 (4+1)           puls    b
E2DF 39               (      console.asm):00108 (4)             rts
                      (      console.asm):00109         
                      (      console.asm):00110         * Send NUL terminated string pointed to by X to the ACIA.
E2E0 3416             (      console.asm):00111 (4+4)   PUTS    pshs    x,d
E2E2 A680             (      console.asm):00112 (4+1)   @puts1  lda     ,x+
E2E4 2704             (      console.asm):00113 (3)             beq     @puts2         NUL marks the end of the string
E2E6 8DE5             (      console.asm):00114 (6)             bsr     PUTCH
E2E8 20F8             (      console.asm):00115 (3)             bra     @puts1
E2EA 3516             (      console.asm):00116 (4+4)   @puts2  puls    d,x
E2EC 39               (      console.asm):00117 (4)             rts
                      (      console.asm):00118         
E2ED 3410             (      console.asm):00119 (4+2)   PUTCR   pshs    x
E2EF 8EFE69           (      console.asm):00120 (3)             ldx     #CRLFSTR
E2F2 8DEC             (      console.asm):00121 (6)             bsr     PUTS
E2F4 3510             (      console.asm):00122 (4+2)           puls    x
E2F6 39               (      console.asm):00123 (4)             rts
                      (      console.asm):00124         
E2F7 8608             (      console.asm):00125 (2)     _BS     lda     #BS
E2F9 8DD2             (      console.asm):00126 (6)             bsr     PUTCH          Output BS
E2FB 8620             (      console.asm):00127 (2)             lda     #SP
E2FD 8DCE             (      console.asm):00128 (6)             bsr     PUTCH          Clear character
E2FF 8608             (      console.asm):00129 (2)             lda     #BS
E301 20CA             (      console.asm):00130 (3)             bra     PUTCH          And go back again
                      (      console.asm):00131         
                      (      console.asm):00132         * Receive CR terminated string and store it to X.
                      (      console.asm):00133         * Upon entry B contains the receiving buffer length.
                      (      console.asm):00134         * On exit, B will contain the number of characters
                      (      console.asm):00135         * entered. A and X are preserved.
E303 5D               (      console.asm):00136 (1)     GETS    tstb
E304 2601             (      console.asm):00137 (3)             bne     @gets0          If B is zero, do nothing
E306 39               (      console.asm):00138 (4)             rts
E307 3416             (      console.asm):00139 (4+4)   @gets0  pshs    x,d
E309 8D96             (      console.asm):00140 (6)     @gets1  bsr     GETCH
E30B 8108             (      console.asm):00141 (2)             cmpa    #BS             Backspace?
E30D 260B             (      console.asm):00142 (3)             bne     @gets3
E30F E161             (      console.asm):00143 (4+1)           cmpb    1,s             B upon routine entry
E311 27F6             (      console.asm):00144 (3)             beq     @gets1          Do not go beyond the beginning of the buffer
E313 8DE2             (      console.asm):00145 (6)             bsr     _BS
E315 301F             (      console.asm):00146 (4+1)           leax    -1,x
E317 5C               (      console.asm):00147 (1)             incb
E318 20EF             (      console.asm):00148 (3)             bra     @gets1
E31A 8115             (      console.asm):00149 (2)     @gets3  cmpa    #NAK            Kill input?
E31C 260B             (      console.asm):00150 (3)             bne     @gets5
                      (      console.asm):00151         * While B != 1,S (initial buffer length), decrement X, increment B.
E31E E161             (      console.asm):00152 (4+1)   @gets4  cmpb    1,s
E320 27E7             (      console.asm):00153 (3)             beq     @gets1
E322 8DD3             (      console.asm):00154 (6)             bsr     _BS
E324 301F             (      console.asm):00155 (4+1)           leax     -1,x
E326 5C               (      console.asm):00156 (1)             incb
E327 20F5             (      console.asm):00157 (3)             bra     @gets4
                      (      console.asm):00158         * Regular input handling: echo input character.
E329 810D             (      console.asm):00159 (2)     @gets5  cmpa    #CR
E32B 2707             (      console.asm):00160 (3)             beq     @gets6          Minicom only sends CR
E32D 8D9E             (      console.asm):00161 (6)             bsr     PUTCH
E32F A780             (      console.asm):00162 (4+1)           sta     ,x+
E331 5A               (      console.asm):00163 (1)             decb
E332 26D5             (      console.asm):00164 (3)             bne     @gets1
E334 8620             (      console.asm):00165 (2)     @gets6  lda     #SP             End of buffer reached or CR entered
E336 8D95             (      console.asm):00166 (6)             bsr     PUTCH
E338 1F10             (      console.asm):00167 (4)             tfr     x,d
E33A A362             (      console.asm):00168 (5+1)           subd    2,s             Actual number of characters entered
E33C E761             (      console.asm):00169 (4+1)           stb     1,s             Stored to B (through the system stack).         
E33E 3516             (      console.asm):00170 (4+4)           puls    d,x
E340 39               (      console.asm):00171 (4)             rts
                      (      console.asm):00172         
                      (        forth.asm):00706         
E341 BDEBC8           (        forth.asm):00707         FORTHIN RFXT    jsr,NCLR+7      XT for NCLR. Set up the normal stack
E344 BDEBD3           (        forth.asm):00708                 RFXT    jsr,RCLR+7      XT for RCLR. Set up the return stack
                      (        forth.asm):00709         * Relocate '@' code to RAM and set it up as the last dictionary entry (RO).
E347 8EFDFD           (        forth.asm):00710 (3)             ldx     #THEEND         Source address for tfm
E34A 1086000C         (        forth.asm):00711 (4)             ldw     #(REALEND-THEEND) Byte count for tfm
E34E 108E0CC0         (        forth.asm):00712 (4)             ldy     #WDICSPC        Destination address for tfm
E352 109F06           (        forth.asm):00713 (5)             sty     LSTWAD
E355 113812           (        forth.asm):00714 (6+?)           tfm     x+,y+
E358 109F08           (        forth.asm):00715 (5)             sty     DICEND
                      (        forth.asm):00716                 IFNE    RELFEAT
                      (        forth.asm):00717                 RFXT    jsr,MONITOR+10  XT for MONITOR (monitor @ in RAM)
                      (        forth.asm):00718                 ENDC                    RELFEAT
E35B BDEA00           (        forth.asm):00719 (7)             jsr     EMPTYB          Buffer related initializations
                      (        forth.asm):00720                 IFNE    DEBUG
                      (        forth.asm):00721                 clrd
                      (        forth.asm):00722                 std     USTATE          Initial mode is interpretation
                      (        forth.asm):00723                 std     USCR            Clear SCR
                      (        forth.asm):00724                 std     UBLK            Clear BLK
                      (        forth.asm):00725                 std     UTOIN           Clear >IN
                      (        forth.asm):00726                 sta     SRCID
                      (        forth.asm):00727                 ENDC                    DEBUG
E35E 7EFBC0           (        forth.asm):00728                 RFXT    jmp,DECIMAL+10  XT for DECIMAL. Default base is decimal
                      (        forth.asm):00729         
                      (        forth.asm):00730         * Input stream end reached? If ISEADDR is clear, compute it, then compare
                      (        forth.asm):00731         * X to it. EOL condition should be handled if we return from this with ZFLAG
                      (        forth.asm):00732         * set. BSBFADR and ISLEN must have been previously initilized.
E361 3406             (        forth.asm):00733 (4+2)   ISERCHD pshs    d
E363 DC28             (        forth.asm):00734 (4)             ldd     ISEADDR
E365 2708             (        forth.asm):00735 (3)             beq     @iseset
E367 103710           (        forth.asm):00736 (4)     @cont   cmpr    x,d             CC = (D - X)
E36A 3506             (        forth.asm):00737 (4+2)           puls    d
E36C 2509             (        forth.asm):00738 (3)             blo     @inpovf
E36E 39               (        forth.asm):00739 (4)             rts
E36F DC20             (        forth.asm):00740 (4)     @iseset ldd     BSBFADR
E371 D326             (        forth.asm):00741 (4)             addd    ISLEN
E373 DD28             (        forth.asm):00742 (4)             std     ISEADDR
E375 20F0             (        forth.asm):00743 (3)             bra     @cont
E377 C612             (        forth.asm):00744 (2)     @inpovf ldb     #18             >IN Out of range
E379 BDE781           (        forth.asm):00745 (7)             jsr     ERRHDLR
                      (        forth.asm):00746         
                      (        forth.asm):00747         * Scan for the next non-space character pointed to by X.
                      (        forth.asm):00748         * Return with ZFLAG set if an end of input stream condition is recognized,
                      (        forth.asm):00749         * otherwise ZFLAG will be clear. A is altered.
                      (        forth.asm):00750         * Update TOKENSP in all cases.
E37C 8DE3             (        forth.asm):00751 (6)     SCNSTOK bsr     ISERCHD         End of input stream reached?
E37E 2708             (        forth.asm):00752 (3)             beq     @scstk1         Yes, update TOKENSP and return w. ZFLAG set
E380 A680             (        forth.asm):00753 (4+1)           lda     ,x+
E382 8120             (        forth.asm):00754 (2)             cmpa    #SP
E384 27F6             (        forth.asm):00755 (3)             beq     SCNSTOK
E386 301F             (        forth.asm):00756 (4+1)           leax    -1,x            Backward one character
                      (        forth.asm):00757         * LEA affects ZFLAG but it will remain clear at this point.
E388 1FA8             (        forth.asm):00758 (4)     @scstk1 tfr     cc,a
E38A 9F02             (        forth.asm):00759 (4)             stx     TOKENSP         This affects ZFLAG!!!
E38C 1F8A             (        forth.asm):00760 (4)             tfr     a,cc
E38E 39               (        forth.asm):00761 (4)             rts
                      (        forth.asm):00762         
                      (        forth.asm):00763         * Scan for the next white space character as an end of token marker.
                      (        forth.asm):00764         * Upon entry:
                      (        forth.asm):00765         * - X points to the input stream.
                      (        forth.asm):00766         * Upon return:
                      (        forth.asm):00767         * - X will point to the next space character or one character after the
                      (        forth.asm):00768         *   end of the input stream.
                      (        forth.asm):00769         * - CURTOKL will hold the current token length (returned in B).
                      (        forth.asm):00770         * - TOKENEP will point to the end of the current token.
                      (        forth.asm):00771         * - A is altered.
                      (        forth.asm):00772         * This routine assumes there was an identified start of token in the past,
                      (        forth.asm):00773         * i.e. that X was not pointing to a BL character upon entry.
E38F 5F               (        forth.asm):00774 (1)     SCNETOK clrb
E390 8DCF             (        forth.asm):00775 (6)     @scetok bsr     ISERCHD         End of input stream reached?
E392 270A             (        forth.asm):00776 (3)             beq     @scetk1
E394 A680             (        forth.asm):00777 (4+1)           lda     ,x+
E396 5C               (        forth.asm):00778 (1)             incb
E397 8120             (        forth.asm):00779 (2)             cmpa    #SP
E399 26F5             (        forth.asm):00780 (3)             bne     @scetok
E39B 301F             (        forth.asm):00781 (4+1)           leax    -1,x            Keep pointing at the trailing space
E39D 5A               (        forth.asm):00782 (1)             decb                    Uncount BL as that was the end of token marker
E39E 1FA8             (        forth.asm):00783 (4)     @scetk1 tfr     cc,a
E3A0 9F04             (        forth.asm):00784 (4)             stx     TOKENEP
E3A2 D742             (        forth.asm):00785 (3)             stb     CURTOKL
E3A4 1F8A             (        forth.asm):00786 (4)             tfr     a,cc
E3A6 39               (        forth.asm):00787 (4)             rts
                      (        forth.asm):00788         
E3A7 8DB8             (        forth.asm):00789 (6)     NXTCHAR bsr     ISERCHD
E3A9 2702             (        forth.asm):00790 (3)             beq     @gtnxc1         End of input stream detected. Return with Z set
E3AB A680             (        forth.asm):00791 (4+1)           lda     ,x+
E3AD 39               (        forth.asm):00792 (4)     @gtnxc1 rts
                      (        forth.asm):00793         
                      (        forth.asm):00794         * Check for numeric literal BASE prefix. On entry X has the input stream
                      (        forth.asm):00795         * pointer. On exit, BASE is altered if needed and the original BASE saved
                      (        forth.asm):00796         * to BASBKUP. If BASE was not changed, BASBKUP will be zero.
                      (        forth.asm):00797         * D is altered, X is updated if a BASE prefix is detected, other registers
                      (        forth.asm):00798         * are untouched.
E3AE E684             (        forth.asm):00799 (4+0)   CKNBPFX ldb     ,x              B has a potential base prefix character
E3B0 3410             (        forth.asm):00800 (4+2)           pshs    x
E3B2 8EFFD8           (        forth.asm):00801 (3)             ldx     #BASALST        A associative list (A-list) of BASE prefixes
E3B5 A681             (        forth.asm):00802 (4+2)   @pflkup lda     ,x++            Potential BASE prefix character to A
E3B7 2707             (        forth.asm):00803 (3)             beq     @nopfix         Reached the end of the A-list. No prefix found
E3B9 103798           (        forth.asm):00804 (4)             cmpr    b,a             Prefix match?
E3BC 2707             (        forth.asm):00805 (3)             beq     @pfxfnd         Yes
E3BE 20F5             (        forth.asm):00806 (3)             bra     @pflkup         Perform base prefix lookup
E3C0 0F36             (        forth.asm):00807 (5)     @nopfix clr     BASBKUP         Nothing to be restored to BASE
E3C2 3510             (        forth.asm):00808 (4+2)           puls    x
E3C4 39               (        forth.asm):00809 (4)             rts
E3C5 9623             (        forth.asm):00810 (3)     @pfxfnd lda     UBASE+1
E3C7 9736             (        forth.asm):00811 (3)             sta     BASBKUP         Back up the current BASE value
E3C9 A61F             (        forth.asm):00812 (4+1)           lda     -1,x            The BASE specified by the prefix
E3CB 9723             (        forth.asm):00813 (3)             sta     UBASE+1         Update BASE
E3CD 3510             (        forth.asm):00814 (4+2)           puls    x
E3CF 3001             (        forth.asm):00815 (4+1)           leax    1,x             Skip the prefix from the input stream
E3D1 0A42             (        forth.asm):00816 (5)             dec     CURTOKL         Dor the sanity of NUMCVT
E3D3 39               (        forth.asm):00817 (4)             rts
                      (        forth.asm):00818         
                      (        forth.asm):00819         * NUMCVT performs a signed string to number conversion. The input string is
                      (        forth.asm):00820         * acquired from the input stream. Note that this routine always is called
                      (        forth.asm):00821         * after a dictionary lookup (SWDIC), so TOKENEP and CURTOKL are guaranteed
                      (        forth.asm):00822         * to have been set previously. There are two ways out this routine:
                      (        forth.asm):00823         * - redirection to the error handler (Undefined word), or
                      (        forth.asm):00824         * - a converted cell or double cell returned through the data stack.
                      (        forth.asm):00825         *   Upon return, ISDBLF being NZ will indicate a double.
E3D4 8D7A             (        forth.asm):00826 (6)     NUMCVT  bsr     CKBASE          No return if BASE isn't in the [2..36] range
E3D6 0F3F             (        forth.asm):00827 (5)             clr     ISNEGF          Assume the result is positive
E3D8 0F40             (        forth.asm):00828 (5)             clr     ISDBLF          Assume the result is not a double number
E3DA 9642             (        forth.asm):00829 (3)             lda     CURTOKL
E3DC 9743             (        forth.asm):00830 (3)             sta     SVCTOKL         Save CURTOKL's value upon entry
E3DE 9E02             (        forth.asm):00831 (4)             ldx     TOKENSP
E3E0 8DCC             (        forth.asm):00832 (6)             bsr     CKNBPFX         Check for numeric literal BASE prefix
                      (        forth.asm):00833         * Check for optional minus sign.
E3E2 A684             (        forth.asm):00834 (4+0)           lda     ,x
E3E4 812D             (        forth.asm):00835 (2)             cmpa    #'-
E3E6 2606             (        forth.asm):00836 (3)             bne     @ncini
E3E8 0A42             (        forth.asm):00837 (5)             dec     CURTOKL
E3EA 0C3F             (        forth.asm):00838 (5)             inc     ISNEGF          Remember to negate the result before returning
E3EC 3001             (        forth.asm):00839 (4+1)           leax    1,x             Skip the negativity!
E3EE 1F12             (        forth.asm):00840 (4)     @ncini  tfr     x,y             Backup input stream pointer
E3F0 1FC1             (        forth.asm):00841 (4)             tfr     0,x             Initialize the result
E3F2 BDE80B           (        forth.asm):00842 (7)             jsr     NPUSH           LSC
E3F5 BDE80B           (        forth.asm):00843 (7)             jsr     NPUSH           MSC
E3F8 1F21             (        forth.asm):00844 (4)             tfr     y,x             Restore the input stream pointer
E3FA BDE80B           (        forth.asm):00845 (7)             jsr     NPUSH           Base scanning address
E3FD 4F               (        forth.asm):00846 (1)             clra
E3FE D642             (        forth.asm):00847 (3)             ldb     CURTOKL
E400 1F01             (        forth.asm):00848 (4)             tfr     d,x             Token length to X (might include a trailing .)
E402 BDE80B           (        forth.asm):00849 (7)             jsr     NPUSH
E405 BDF4D5           (        forth.asm):00850                 RFXT    jsr,TONUMBR+10
                      (        forth.asm):00851         * At this point, at least four cells are on the data stack.
E408 3710             (        forth.asm):00852                 UCNPOP
E40A 1F10             (        forth.asm):00853 (4)             tfr     x,d             Number of unconverted characters to D
E40C 3710             (        forth.asm):00854                 UCNPOP                  Address of the last non convertible char to X
E40E 104D             (        forth.asm):00855 (2)             tstd
E410 2717             (        forth.asm):00856 (3)             beq     @ncadj          Not dealing with a double
E412 10830001         (        forth.asm):00857 (4)             cmpd    #1
E416 2623             (        forth.asm):00858 (3)             bne     @ncnogo         At most one character must be unconverted
E418 A684             (        forth.asm):00859 (4+0)           lda     ,x
E41A 812E             (        forth.asm):00860 (2)             cmpa    #'.             Was a double number meant?
E41C 261D             (        forth.asm):00861 (3)             bne     @ncnogo         No, we do not have a winner...
E41E 0C40             (        forth.asm):00862 (5)             inc     ISDBLF
                      (        forth.asm):00863         * Double cell number adjustments.
E420 0D3F             (        forth.asm):00864 (4)             tst     ISNEGF          Are we dealing with a negative number?
E422 2725             (        forth.asm):00865 (3)             beq     RSBSPFX         No. Restore BASE if needed--the end
E424 BDF3EC           (        forth.asm):00866                 RFXT    jsr,DNEG+10     Acknowledge the negativity
E427 2020             (        forth.asm):00867 (3)             bra     RSBSPFX         Restore BASE if needed--the end
                      (        forth.asm):00868         * Single cell number adjustments.
E429 ECC1             (        forth.asm):00869 (5+2)   @ncadj  ldd     ,u++            MSC Should be zero
E42B 2705             (        forth.asm):00870 (3)             beq     @cvsnok
E42D C604             (        forth.asm):00871 (2)             ldb     #4              Out of range error if not
E42F BDE781           (        forth.asm):00872 (7)             jsr     ERRHDLR         No return
E432 0D3F             (        forth.asm):00873 (4)     @cvsnok tst     ISNEGF          Are we dealing with a negative number?
E434 2713             (        forth.asm):00874 (3)             beq     RSBSPFX         No. Restore BASE if needed--the end
E436 BDEFDE           (        forth.asm):00875                 RFXT    jsr,NEGATE+9    Acknowledge the negativity
E439 200E             (        forth.asm):00876 (3)             bra     RSBSPFX         Restore BASE if needed--the end
E43B 3344             (        forth.asm):00877 (4+1)   @ncnogo leau    4,u             Drop two cells from the data stack
E43D 9643             (        forth.asm):00878 (3)             lda     SVCTOKL
E43F 9742             (        forth.asm):00879 (3)             sta     CURTOKL         Restore CURTOKL's original value
E441 9E02             (        forth.asm):00880 (4)             ldx     TOKENSP         Beginning address of the current token
E443 C602             (        forth.asm):00881 (2)             ldb     #2              Undefined (X points to the offending word)
E445 BDE781           (        forth.asm):00882 (7)             jsr     ERRHDLR         No return
     E448             (        forth.asm):00883         NUMCVRA equ     *               For symbolic stack dump purposes
E448 12               (        forth.asm):00884 (1)             nop
                      (        forth.asm):00885         
                      (        forth.asm):00886         * Restore BASE if a numeric literal BASE prefix was detected.
                      (        forth.asm):00887         * X is to be preserved at all cost!
E449 9636             (        forth.asm):00888 (3)     RSBSPFX lda     BASBKUP
E44B 2702             (        forth.asm):00889 (3)             beq     @theend
E44D 9723             (        forth.asm):00890 (3)             sta     UBASE+1
E44F 39               (        forth.asm):00891 (4)     @theend rts
                      (        forth.asm):00892         
                      (        forth.asm):00893         * Check whether BASE is in the supported range ([2..36]).
E450 9623             (        forth.asm):00894 (3)     CKBASE  lda     UBASE+1         BASE
E452 8102             (        forth.asm):00895 (2)             cmpa    #2
E454 2505             (        forth.asm):00896 (3)             blo     @ckbser         Must be >= 2
E456 8124             (        forth.asm):00897 (2)             cmpa    #36
E458 2201             (        forth.asm):00898 (3)             bhi     @ckbser         And <= 36 (the ANSI maximum)
E45A 39               (        forth.asm):00899 (4)             rts
E45B C60F             (        forth.asm):00900 (2)     @ckbser ldb     #15             Invalid BASE
E45D BDE781           (        forth.asm):00901 (7)             jsr     ERRHDLR         No return
     E460             (        forth.asm):00902         CKBASRA equ     *
                      (        forth.asm):00903         
                      (        forth.asm):00904         * Convert number stored in X to a string (depending on BASE value).
                      (        forth.asm):00905         * Output is stored in the global TBUFF buffer. X is preserved.
E460 8DEE             (        forth.asm):00906 (6)     CVNSTR  bsr     CKBASE
E462 0F3F             (        forth.asm):00907 (5)             clr     ISNEGF
E464 1F10             (        forth.asm):00908 (4)             tfr     x,d
E466 0D41             (        forth.asm):00909 (4)             tst     CVISSGN         Are we to perform a signed conversion?
E468 2708             (        forth.asm):00910 (3)             beq     @cvnst1
E46A 104D             (        forth.asm):00911 (2)             tstd
E46C 2A04             (        forth.asm):00912 (3)             bpl     @cvnst1
E46E 0C3F             (        forth.asm):00913 (5)             inc     ISNEGF          Number being converted is negative
E470 1040             (        forth.asm):00914 (2)             negd
E472 1F06             (        forth.asm):00915 (4)     @cvnst1 tfr     d,w
E474 104F             (        forth.asm):00916 (2)             clrd
E476 108E045F         (        forth.asm):00917 (4)             ldy     #TBUFF+19       Sign + 16 digits + terminator + 1
E47A 6FA2             (        forth.asm):00918 (6+1)           clr     ,-y             End of string marker
E47C 119E22           (        forth.asm):00919 (35)    @cvnst2 divq    UBASE           D returns the modulo and W the quotient
E47F 8630             (        forth.asm):00920 (2)             lda     #'0
E481 C10A             (        forth.asm):00921 (2)             cmpb    #10
E483 2502             (        forth.asm):00922 (3)             bcs     @cvnst3
                      (        forth.asm):00923         * BASE has letters among its valid numbers.
E485 8637             (        forth.asm):00924 (2)             lda     #'A-10
E487 103089           (        forth.asm):00925 (4)     @cvnst3 addr    a,b
E48A E7A2             (        forth.asm):00926 (4+1)           stb     ,-y
E48C 104F             (        forth.asm):00927 (2)             clrd
E48E 105D             (        forth.asm):00928 (2)             tstw
E490 26EA             (        forth.asm):00929 (3)             bne     @cvnst2
E492 C620             (        forth.asm):00930 (2)             ldb     #SP
E494 0D3F             (        forth.asm):00931 (4)             tst     ISNEGF
E496 2702             (        forth.asm):00932 (3)             beq     @cvnst4
E498 C62D             (        forth.asm):00933 (2)             ldb     #'-
E49A E7A2             (        forth.asm):00934 (4+1)   @cvnst4 stb     ,-y
                      (        forth.asm):00935         * We need to insert leading spaces up to the beginning of the output buffer.
E49C C620             (        forth.asm):00936 (2)             ldb     #SP
E49E 108C044C         (        forth.asm):00937 (4)     @cvnst5 cmpy    #TBUFF
E4A2 2601             (        forth.asm):00938 (3)             bne     @cvnst6
E4A4 39               (        forth.asm):00939 (4)             rts
E4A5 E7A2             (        forth.asm):00940 (4+1)   @cvnst6 stb     ,-y
E4A7 20F5             (        forth.asm):00941 (3)             bra     @cvnst5
                      (        forth.asm):00942         
                      (        forth.asm):00943         * Check for minimal data stack depth. On input D has the lowest possible stack
                      (        forth.asm):00944         * address that satisfies the needs of the caller. This routine is meant
                      (        forth.asm):00945         * to support "transactional" behaviour, which is intended to improve
                      (        forth.asm):00946         * debugging support.
E4A9 103703           (        forth.asm):00947 (4)     CHKNDPT cmpr    d,u
E4AC 2201             (        forth.asm):00948 (3)             bhi     @stkudf
E4AE 39               (        forth.asm):00949 (4)             rts
E4AF C601             (        forth.asm):00950 (2)     @stkudf ldb     #1              Data stack underflow
E4B1 BDE781           (        forth.asm):00951 (7)             jsr     ERRHDLR         No return
     E4B4             (        forth.asm):00952         CKDPTRA equ     *
                      (        forth.asm):00953         
                      (        forth.asm):00954         * Parameter stack's depth checking primitives (transactional behavior support).
E4B4 CC02F620F0       (        forth.asm):00955         MIN1PST MINDREQ 1
                      (        forth.asm):00956         
E4B9 CC02F420EB       (        forth.asm):00957         MIN2PST MINDREQ 2
                      (        forth.asm):00958         
E4BE CC02F220E6       (        forth.asm):00959         MIN3PST MINDREQ 3
                      (        forth.asm):00960         
E4C3 CC02F020E1       (        forth.asm):00961         MIN4PST MINDREQ 4
                      (        forth.asm):00962         
                      (        forth.asm):00963         * Search word beginning at address TOKENSP in the dictionary.
                      (        forth.asm):00964         * Upon return Z will be set if the word was not found.
                      (        forth.asm):00965         * Otherwise, Y will point to the code section of the word.
                      (        forth.asm):00966         * CSSNTVE (defined in constants.asm) defines whether the
                      (        forth.asm):00967         * dictionary match is case sensitive or not.
                      (        forth.asm):00968         * Important note: if the word is found TOKENEP will be copied to TOKENSP.
E4C8 9E02             (        forth.asm):00969 (4)     SWDIC   ldx     TOKENSP
E4CA BDE38F           (        forth.asm):00970 (7)             jsr     SCNETOK         B has CURTOKL, update TOKENEP
E4CD 9E08             (        forth.asm):00971 (4)     SWDIC1  ldx     DICEND          Entry point for the ANSI FIND
E4CF 9F1A             (        forth.asm):00972 (4)             stx     VLPRVEP         Last dictionary entry code address + 1
E4D1 9E02             (        forth.asm):00973 (4)             ldx     TOKENSP
E4D3 109E06           (        forth.asm):00974 (5)             ldy     LSTWAD          Latest word header address to Y
E4D6 2606             (        forth.asm):00975 (3)     @swrdc0 bne     @swrdc1
E4D8 1FC2             (        forth.asm):00976 (4)             tfr     0,y             Word not found. Z is set
E4DA 109F0E           (        forth.asm):00977 (5)             sty     PLOAD
E4DD 39               (        forth.asm):00978 (4)             rts
E4DE A6A4             (        forth.asm):00979 (4+0)   @swrdc1 lda     ,y              Word attribute to A
E4E0 841F             (        forth.asm):00980 (2)             anda    #WRLNMSK        Extract word length
E4E2 3420             (        forth.asm):00981 (4+2)           pshs    y
E4E4 103789           (        forth.asm):00982 (4)             cmpr    a,b             Word length match?
E4E7 2638             (        forth.asm):00983 (3)             bne     @swrdc3         No, point to next dictionary entry
E4E9 3121             (        forth.asm):00984 (4+1)           leay    1,y
E4EB A6A0             (        forth.asm):00985 (4+1)   @swrdc2 lda     ,y+
                      (        forth.asm):00986                 IFNE    CSSNTVE
                      (        forth.asm):00987                 cmpa    ,x+             Case sensitive dictionary
                      (        forth.asm):00988                 ELSE
E4ED 1F9E             (        forth.asm):00989 (4)             tfr     b,e             Case insensitive search (preferred)
E4EF E680             (        forth.asm):00990 (4+1)           ldb     ,x+
E4F1 C161             (        forth.asm):00991 (2)             cmpb    #'a
E4F3 2506             (        forth.asm):00992 (3)             bcs     @nochg
E4F5 C17B             (        forth.asm):00993 (2)             cmpb    #'z+1
E4F7 2402             (        forth.asm):00994 (3)             bcc     @nochg
E4F9 C020             (        forth.asm):00995 (2)             subb    #'a-'A
E4FB 103789           (        forth.asm):00996 (4)     @nochg  cmpr    a,b
E4FE 1FE9             (        forth.asm):00997 (4)             tfr     e,b
                      (        forth.asm):00998                 ENDC                    CSSNTVE
E500 261F             (        forth.asm):00999 (3)             bne     @swrdc3
E502 5A               (        forth.asm):01000 (1)             decb
E503 26E6             (        forth.asm):01001 (3)             bne     @swrdc2
                      (        forth.asm):01002         * Word match!
E505 3510             (        forth.asm):01003 (4+2)           puls    x
E507 E684             (        forth.asm):01004 (4+0)           ldb     ,x              Word attribute byte to B
E509 4F               (        forth.asm):01005 (1)             clra
E50A 58               (        forth.asm):01006 (1)             lslb                    Bit 7 to CFLAG
E50B 49               (        forth.asm):01007 (1)             rola                    CFLAG to A
E50C 9744             (        forth.asm):01008 (3)             sta     IMDFLG          Set IMMEDIATE flag
E50E 4F               (        forth.asm):01009 (1)             clra
E50F 58               (        forth.asm):01010 (1)             lslb                    Bit 6 to CFLAG
E510 49               (        forth.asm):01011 (1)             rola                    CFLAG to A
E511 9745             (        forth.asm):01012 (3)             sta     DEFFLG          Set DEFINE flag
E513 9E04             (        forth.asm):01013 (4)             ldx     TOKENEP
E515 9F02             (        forth.asm):01014 (4)             stx     TOKENSP
                      (        forth.asm):01015                 IFNE    RELFEAT
                      (        forth.asm):01016                 leay    3,y             Skip back pointer and checksum. Return XT
                      (        forth.asm):01017                 ELSE
E517 3122             (        forth.asm):01018 (4+1)           leay    2,y             Skip back pointer. Return XT
                      (        forth.asm):01019                 ENDC                    RELFEAT
E519 DC1A             (        forth.asm):01020 (4)             ldd     VLPRVEP
E51B 103220           (        forth.asm):01021 (4)             subr    y,d
E51E DD0E             (        forth.asm):01022 (4)             std     PLOAD
E520 39               (        forth.asm):01023 (4)             rts                     NZ since there is no zero payload word
E521 3520             (        forth.asm):01024 (4+2)   @swrdc3 puls    y
E523 109F1A           (        forth.asm):01025 (5)             sty     VLPRVEP
E526 4F               (        forth.asm):01026 (1)             clra
E527 E6A0             (        forth.asm):01027 (4+1)           ldb     ,y+
E529 C41F             (        forth.asm):01028 (2)             andb    #WRLNMSK
E52B 31AB             (        forth.asm):01029 (4+2)           leay    d,y
E52D 9E02             (        forth.asm):01030 (4)             ldx     TOKENSP
E52F D642             (        forth.asm):01031 (3)             ldb     CURTOKL
E531 10AEA4           (        forth.asm):01032 (6+0)           ldy     ,y              Point to previous word header
E534 20A0             (        forth.asm):01033 (3)             bra     @swrdc0
                      (        forth.asm):01034         
                      (        forth.asm):01035         * Create new dictionary entry. The word name being created is acquired from
                      (        forth.asm):01036         * the input stream. Warning, this requires a writable dictionary!
                      (        forth.asm):01037         * The new end of the dictionary is returned in Y. W is preserved.
E536 1038             (        forth.asm):01038 (6)     LOCWRT  pshsw
E538 9E08             (        forth.asm):01039 (4)             ldx     DICEND
                      (        forth.asm):01040                 IFNE    DEBUG
                      (        forth.asm):01041                 cmpx    #ROMSTRT
                      (        forth.asm):01042                 bcs     @locwr0
                      (        forth.asm):01043                 ldb     #10             Assertion failure (trying to write to ROM!)
                      (        forth.asm):01044                 jsr     ERRHDLR         No return
E53A                  (        forth.asm):01045         LWAFRA  equ     *
E53A                  (        forth.asm):01046         @locwr0
                      (        forth.asm):01047                 ENDC                    DEBUG
E53A 9F0C             (        forth.asm):01048 (4)             stx     BDICEND         Back pointer up
E53C 9E06             (        forth.asm):01049 (4)             ldx     LSTWAD
E53E 9F0A             (        forth.asm):01050 (4)             stx     BLSTWAD         Back pointer up
E540 BDE89F           (        forth.asm):01051 (7)             jsr     BKIN2PT         Derive X from BLK, >IN
E543 BDE37C           (        forth.asm):01052 (7)             jsr     SCNSTOK         Locate token starting address
E546 2605             (        forth.asm):01053 (3)             bne     @locwr1
E548 C605             (        forth.asm):01054 (2)             ldb     #5              EOIS condition recognized: missing word name
E54A BDE781           (        forth.asm):01055 (7)             jsr     ERRHDLR         No return
     E54D             (        forth.asm):01056         LWMNRA  equ     *               LOCWRT missing word name return address
E54D BDE38F           (        forth.asm):01057 (7)     @locwr1 jsr     SCNETOK         X has TOKENEP, B has CURTOKL
E550 109E02           (        forth.asm):01058 (5)             ldy     TOKENSP
E553 103221           (        forth.asm):01059 (4)             subr    y,x
E556 3410             (        forth.asm):01060 (4+2)           pshs    x               Word length to the system stack
E558 9E08             (        forth.asm):01061 (4)             ldx     DICEND
E55A A661             (        forth.asm):01062 (4+1)           lda     1,s             Word length LSB in the system stack
E55C 8120             (        forth.asm):01063 (2)             cmpa    #1+WRLNMSK      Max word length is 31, 79-STANDARD compliant
E55E 2505             (        forth.asm):01064 (3)             blo     @locwr2
E560 C610             (        forth.asm):01065 (2)             ldb     #16             Word name is too long
E562 BDE781           (        forth.asm):01066 (7)             jsr     ERRHDLR         No return
     E565             (        forth.asm):01067         WTOOLNG equ     *
E565 A780             (        forth.asm):01068 (4+1)   @locwr2 sta     ,x+             Word length to dictionary
E567 10A6E1           (        forth.asm):01069 (6+2)           ldw     ,s++            16-bit word length to W
E56A 1E12             (        forth.asm):01070 (5)             exg     x,y             Y points to the dictionary, X has TOKENSP
                      (        forth.asm):01071                 IFNE    CSSNTVE
                      (        forth.asm):01072                 tfm     x+,y+           Word name to dictionary, as is
                      (        forth.asm):01073                 ELSE
E56C 1FF9             (        forth.asm):01074 (4)             tfr     f,b             Force dictionary entry to upper case
E56E A680             (        forth.asm):01075 (4+1)   @locwr3 lda     ,x+
E570 8161             (        forth.asm):01076 (2)             cmpa    #'a
E572 2506             (        forth.asm):01077 (3)             bcs     @locwr4
E574 817B             (        forth.asm):01078 (2)             cmpa    #'z+1
E576 2402             (        forth.asm):01079 (3)             bcc     @locwr4
E578 8020             (        forth.asm):01080 (2)             suba    #'a-'A          To upper case
E57A A7A0             (        forth.asm):01081 (4+1)   @locwr4 sta     ,y+
E57C 5A               (        forth.asm):01082 (1)             decb
E57D 26EF             (        forth.asm):01083 (3)             bne     @locwr3
                      (        forth.asm):01084                 ENDC                    CSSNTVE
E57F 1F10             (        forth.asm):01085 (4)             tfr     x,d
E581 BDE164           (        forth.asm):01086 (7)             jsr     U2INFRD         Derive >IN from D
E584 9E06             (        forth.asm):01087 (4)             ldx     LSTWAD
E586 AFA1             (        forth.asm):01088 (5+2)           stx     ,y++            Back pointer to dictionary
                      (        forth.asm):01089                 IFNE    RELFEAT
                      (        forth.asm):01090                 clr     ,y+             Initialize the checksum header field
                      (        forth.asm):01091                 ENDC                    RELFEAT
E588 109F08           (        forth.asm):01092 (5)             sty     DICEND
E58B 109F12           (        forth.asm):01093 (5)             sty     RECADDR         Should we resort to recursion later on
E58E 1039             (        forth.asm):01094 (6)             pulsw
E590 39               (        forth.asm):01095 (4)             rts
                      (        forth.asm):01096         
                      (        forth.asm):01097         * Compile 'ldx  #X; jsr NPUSH'.
                      (        forth.asm):01098         * DICEND is updated and returned in Y.
E591 109E08           (        forth.asm):01099 (5)     LITER   ldy     DICEND
E594 868E             (        forth.asm):01100 (2)             lda     #LDXOPC         LDX immediate
E596 8D10             (        forth.asm):01101 (6)             bsr     VARCON2
E598 86BD             (        forth.asm):01102 (2)             lda     #JSROPC         JSR extended
E59A 109F14           (        forth.asm):01103 (5)             sty     JSRLAST         JSRLAST points to the latest JSR code emission
E59D 8D06             (        forth.asm):01104 (6)             bsr     VARCON1
E59F 109F08           (        forth.asm):01105 (5)             sty     DICEND
E5A2 39               (        forth.asm):01106 (4)             rts
                      (        forth.asm):01107         
                      (        forth.asm):01108         * Compile 'jmp  NPUSH'.
                      (        forth.asm):01109         * Y points to the end of the dictionary on entry and on exit.
E5A3 867E             (        forth.asm):01110 (2)     VARCON  lda     #JMPOPC         JMP extended
E5A5 8EE80B           (        forth.asm):01111 (3)     VARCON1 ldx     #NPUSH
E5A8 A7A0             (        forth.asm):01112 (4+1)   VARCON2 sta     ,y+
E5AA AFA1             (        forth.asm):01113 (5+2)           stx     ,y++
E5AC 39               (        forth.asm):01114 (4)             rts
                      (        forth.asm):01115         
                      (        forth.asm):01116         * Used by U<, U>, <, >.
E5AD BDE4B9           (        forth.asm):01117 (7)     CMP2    jsr     MIN2PST         At least 2 cells must be stacked up
E5B0 10AEC4           (        forth.asm):01118 (6+0)   CMP2RA  ldy     ,u
E5B3 AE42             (        forth.asm):01119 (5+1)           ldx     2,u
E5B5 103721           (        forth.asm):01120 (4)             cmpr    y,x
E5B8 1FA9             (        forth.asm):01121 (4)             tfr     cc,b
                      (        forth.asm):01122                 IFNE    DEBUG
                      (        forth.asm):01123                 clra
                      (        forth.asm):01124                 std     CCREG
                      (        forth.asm):01125                 ENDC                    DEBUG
E5BA 1FC1             (        forth.asm):01126 (4)             tfr     0,x
E5BC 3344             (        forth.asm):01127 (4+1)           leau    4,u
E5BE 1F9A             (        forth.asm):01128 (4)             tfr     b,cc
E5C0 39               (        forth.asm):01129 (4)             rts
                      (        forth.asm):01130         
                      (        forth.asm):01131         * Used by CMOVE, CMOVE>, MOVE.
E5C1 BDE4BE           (        forth.asm):01132 (7)     ACQMOVP jsr     MIN3PST         At least 3 cells must be stacked up
E5C4 10A6C4           (        forth.asm):01133 (6+0)   ACQVMRA ldw     ,u              Byte count
E5C7 10AE42           (        forth.asm):01134 (6+1)           ldy     2,u             Destination address
E5CA AE44             (        forth.asm):01135 (5+1)           ldx     4,u             Source address
E5CC 3346             (        forth.asm):01136 (4+1)           leau    6,u             Drop 3 cells from the user stack
E5CE 39               (        forth.asm):01137 (4)             rts
                      (        forth.asm):01138         
                      (        forth.asm):01139         * FDCTSYM enveadours to match the address stored in Y to a dictionary entry.
                      (        forth.asm):01140         * Upon a successful flexible match, it will output a string in the form of
                      (        forth.asm):01141         * <wordname>+<offset> to the string pointed to by X. <wordname> refers to the
                      (        forth.asm):01142         * code entry point of the matched word. <offset> will be expressed in hex.
                      (        forth.asm):01143         * If a match is found, Z will be clear, otherwise it will be set.
                      (        forth.asm):01144         * A candidate for a word code address must meet the following criteria:
                      (        forth.asm):01145         * ((Y U>= #EBUFS) AND (Y U< #THEEND)) OR ((Y U>= #WDICSPC) AND (Y U< DICEND)).
                      (        forth.asm):01146         * Upon return:
                      (        forth.asm):01147         * - the string pointed to by X will updated with its symbolic match
                      (        forth.asm):01148         *   (NUL terminated), if there is one. X itself might have been altered.
                      (        forth.asm):01149         * - Y should be preserved.
                      (        forth.asm):01150         * EBUFS (EMPTY-BUFFERS) header address is the last word in the dictionary.
                      (        forth.asm):01151                 IFNE    SSDFEAT
E5CF 3430             (        forth.asm):01152 (4+4)   FDCTSYM pshs    y,x     
E5D1 1F21             (        forth.asm):01153 (4)             tfr     y,x             Potential execution token to X
E5D3 8CE9F0           (        forth.asm):01154 (3)             cmpx    #EBUFS
E5D6 2505             (        forth.asm):01155 (3)             blo     @fdstr2 
E5D8 8CFDFD           (        forth.asm):01156 (3)             cmpx    #THEEND
E5DB 250D             (        forth.asm):01157 (3)             blo     @fdsmtc
E5DD 8C0CC0           (        forth.asm):01158 (3)     @fdstr2 cmpx    #WDICSPC        Term 2 of the predicate for a valid word addr
E5E0 2504             (        forth.asm):01159 (3)             blo     @fdsnom
E5E2 9C08             (        forth.asm):01160 (4)             cmpx    DICEND
E5E4 2504             (        forth.asm):01161 (3)             blo     @fdsmtc
E5E6 4F               (        forth.asm):01162 (1)     @fdsnom clra                    No match (Z is set)
E5E7 3530             (        forth.asm):01163 (4+4)           puls    x,y
E5E9 39               (        forth.asm):01164 (4)             rts
E5EA 9E06             (        forth.asm):01165 (4)     @fdsmtc ldx     LSTWAD          Potential match. Scan upward from LAST
                      (        forth.asm):01166         * X points to the latest word header, Y has an execution token.
E5EC 109608           (        forth.asm):01167 (5)             ldw     DICEND          W points to the end of the code section
E5EF 3410             (        forth.asm):01168 (4+2)   @fdslop pshs    x               Pointer to the current word header
E5F1 E680             (        forth.asm):01169 (4+1)           ldb     ,x+
E5F3 C41F             (        forth.asm):01170 (2)             andb    #WRLNMSK
E5F5 3A               (        forth.asm):01171 (1)             abx                     Skip word name string
E5F6 EC81             (        forth.asm):01172 (5+2)           ldd     ,x++            Backlink to D
                      (        forth.asm):01173                 IFNE    RELFEAT
                      (        forth.asm):01174                 leax    1,x             Skip the checksum
                      (        forth.asm):01175                 ENDC                    RELFEAT
E5F8 103712           (        forth.asm):01176 (4)             cmpr    x,y
E5FB 2530             (        forth.asm):01177 (3)             blo     @fdsnwd
E5FD 103762           (        forth.asm):01178 (4)             cmpr    w,y
E600 222B             (        forth.asm):01179 (3)             bhi     @fdsnwd         An equal address is allowed here, in case
                      (        forth.asm):01180         * jsr ERRHDLR is the last instruction for the word under consideration.
                      (        forth.asm):01181         * This happens to be the case for FORGET and LPAR.
                      (        forth.asm):01182         * Y matches the code range for the current word.
E602 3510             (        forth.asm):01183 (4+2)           puls    x
E604 E680             (        forth.asm):01184 (4+1)           ldb     ,x+
E606 C41F             (        forth.asm):01185 (2)             andb    #WRLNMSK
E608 1F9F             (        forth.asm):01186 (4)             tfr     b,f
E60A 114F             (        forth.asm):01187 (2)             clre                    W has the matched word length
E60C 10AEE4           (        forth.asm):01188 (6+0)           ldy     ,s              Y points to the target buffer
E60F 113812           (        forth.asm):01189 (6+?)           tfm     x+,y+
E612 6FA4             (        forth.asm):01190 (6+0)           clr     ,y              We need this in case the offset is zero
                      (        forth.asm):01191         * Offset processing.
                      (        forth.asm):01192                 IFNE    RELFEAT
                      (        forth.asm):01193                 leax    3,x             Skip backlink and checksum
                      (        forth.asm):01194                 ELSE
E614 3002             (        forth.asm):01195 (4+1)           leax    2,x             Skip backlink
                      (        forth.asm):01196                 ENDC                    RELFEAT
E616 EC62             (        forth.asm):01197 (5+1)           ldd     2,s             Execution token to D
E618 103210           (        forth.asm):01198 (4)             subr    x,d             Offset between XT and word entry point to D
E61B 270B             (        forth.asm):01199 (3)             beq     @skoffs         Skip displaying the offset if it is zero
E61D 3402             (        forth.asm):01200 (4+1)           pshs    a               Preserve the offset's MSB
E61F 862B             (        forth.asm):01201 (2)             lda     #'+
E621 A7A0             (        forth.asm):01202 (4+1)           sta     ,y+
E623 3502             (        forth.asm):01203 (4+1)           puls    a               Restore the offset's MSB
E625 BDE182           (        forth.asm):01204 (7)             jsr     HDMP4           Dump hex incarnation of the offset to Y
E628 3530             (        forth.asm):01205 (4+4)   @skoffs puls    x,y
E62A 1CFB             (        forth.asm):01206 (2)             andcc   #^ZFLAG         Clear ZFLAG
E62C 39               (        forth.asm):01207 (4)             rts
                      (        forth.asm):01208         * Point to the next word.
E62D 1039             (        forth.asm):01209 (6)     @fdsnwd pulsw                   Retrieve current word header address
E62F 104D             (        forth.asm):01210 (2)             tstd
E631 27B3             (        forth.asm):01211 (3)             beq     @fdsnom         Just met the last dictionary entry
E633 1F01             (        forth.asm):01212 (4)             tfr     d,x             Point to previous word header
E635 10810CC0         (        forth.asm):01213 (4)             cmpw    #WDICSPC        Are we transitioning from RAM to ROM?
E639 26B4             (        forth.asm):01214 (3)             bne     @fdslop         No singularity
E63B 1086FDFD         (        forth.asm):01215 (4)             ldw     #THEEND         Won't be able to diagnose the ROM based @...
E63F 20AE             (        forth.asm):01216 (3)             bra     @fdslop
                      (        forth.asm):01217         
                      (        forth.asm):01218         * Find the best possible symbolic approximation of Y and store it to the
                      (        forth.asm):01219         * buffer pointed to by X.
                      (        forth.asm):01220         * On entry:
                      (        forth.asm):01221         * - Y has a code address which is to be matched with a symbolic name + offset.
                      (        forth.asm):01222         * - X points to a buffer where the resolution is to be stored.
                      (        forth.asm):01223         * On return:
                      (        forth.asm):01224         * - Y is to be preserved.
                      (        forth.asm):01225         * - the output buffer will be updated with the best symbolic match (NUL term'd).
E641 3430             (        forth.asm):01226 (4+4)   FINDSYM pshs    y,x
E643 8D8A             (        forth.asm):01227 (6)             bsr     FDCTSYM         Search the dictionary first (flexible match)
E645 261B             (        forth.asm):01228 (3)             bne     @dctmfn         Dictionary match found
E647 8EE667           (        forth.asm):01229 (3)             ldx     #NDCTWKS        Search kernel symbols for an exact match
E64A EC81             (        forth.asm):01230 (5+2)   @fsmlop ldd     ,x++
E64C 270B             (        forth.asm):01231 (3)             beq     @fsmfnd         End of well known symbols list?
E64E 103720           (        forth.asm):01232 (4)             cmpr    y,d
E651 2706             (        forth.asm):01233 (3)             beq     @fsmfnd
                      (        forth.asm):01234         * No well known symbol match. Skip string.
E653 A680             (        forth.asm):01235 (4+1)   @fsmskp lda     ,x+
E655 26FC             (        forth.asm):01236 (3)             bne     @fsmskp
E657 20F1             (        forth.asm):01237 (3)             bra     @fsmlop
E659 10AEE4           (        forth.asm):01238 (6+0)   @fsmfnd ldy     ,s
E65C A680             (        forth.asm):01239 (4+1)   @fsmfn2 lda     ,x+
E65E A7A0             (        forth.asm):01240 (4+1)           sta     ,y+
E660 26FA             (        forth.asm):01241 (3)             bne     @fsmfn2
E662 3262             (        forth.asm):01242 (4+1)   @dctmfn leas    2,s             Drop X from the system stack
E664 3520             (        forth.asm):01243 (4+2)           puls    y
E666 39               (        forth.asm):01244 (4)             rts
                      (        forth.asm):01245         
                      (        forth.asm):01246         * Non-dictionary well known symbols.
E667 E000             (        forth.asm):01247         NDCTWKS fdb     IODZHDL         Illegal opcode/Division by zero trap handler
E669 494F445A48444C00 (        forth.asm):01248                 fcn     'IODZHDL'
E671 E82A             (        forth.asm):01249                 fdb     DPOPRA          Data stack underflow
E673 44504F50524100   (        forth.asm):01250                 fcn     'DPOPRA'
E67A E818             (        forth.asm):01251                 fdb     DPSHRA          Data stack overflow
E67C 44505348524100   (        forth.asm):01252                 fcn     'DPSHRA'
E683 E860             (        forth.asm):01253                 fdb     RPOPRA          Return stack underflow
E685 52504F50524100   (        forth.asm):01254                 fcn     'RPOPRA'
E68C E846             (        forth.asm):01255                 fdb     RPSHRA          Return stack overflow
E68E 52505348524100   (        forth.asm):01256                 fcn     'RPSHRA'
E695 E781             (        forth.asm):01257                 fdb     ERRHDLR         Error handler
E697 45525248444C5200 (        forth.asm):01258                 fcn     'ERRHDLR'
E69F E460             (        forth.asm):01259                 fdb     CKBASRA         Illegal BASE value
E6A1 434B424153524100 (        forth.asm):01260                 fcn     'CKBASRA'
E6A9 E4B4             (        forth.asm):01261                 fdb     CKDPTRA         Not enough parameters supplied (transac. behav.)
E6AB 434B445054524100 (        forth.asm):01262                 fcn     'CKDPTRA'
E6B3 E4A9             (        forth.asm):01263                 fdb     CHKNDPT         Check data stack minimum depth (transac. behav.)
E6B5 43484B4E44505400 (        forth.asm):01264                 fcn     'CHKNDPT'
E6BD E5B0             (        forth.asm):01265                 fdb     CMP2RA          Missing operand in any of U<, U>, <, >
E6BF 434D5032524100   (        forth.asm):01266                 fcn     'CMP2RA'
E6C6 E5C4             (        forth.asm):01267                 fdb     ACQVMRA         Three operands missing in any of CMOVE,
                      (        forth.asm):01268         *                               CMOVE>, MOVE
E6C8 414351564D524100 (        forth.asm):01269                 fcn     'ACQVMRA'
E6D0 E0CC             (        forth.asm):01270                 fdb     MINTLRA         Main interpreter loop return address
E6D2 4D494E544C524100 (        forth.asm):01271                 fcn     'MINTLRA'
E6DA E448             (        forth.asm):01272                 fdb     NUMCVRA         ? while converting a string to a number
E6DC 4E554D4356524100 (        forth.asm):01273                 fcn     'NUMCVRA'
E6E4 E0E4             (        forth.asm):01274                 fdb     NMCVIRA         Numeric conversion error while interpreting
E6E6 4E4D435649524100 (        forth.asm):01275                 fcn     'NMCVIRA'
E6EE E13C             (        forth.asm):01276                 fdb     NMCVCRA         Numeric conversion error while compiling
E6F0 4E4D435643524100 (        forth.asm):01277                 fcn     'NMCVCRA'
E6F8 E111             (        forth.asm):01278                 fdb     INTRPRA         Interpreter RA (after the execution of a word)
E6FA 494E545250524100 (        forth.asm):01279                 fcn     'INTRPRA'
E702 E12A             (        forth.asm):01280                 fdb     COMPLRA         Compiler RA (after the execution of an IMD word)
E704 434F4D504C524100 (        forth.asm):01281                 fcn     'COMPLRA'
E70C E155             (        forth.asm):01282                 fdb     EMXASXT         Emit "JSR <X>" where X has an execution token
E70E 454D584153585400 (        forth.asm):01283                 fcn     'EMXASXT'
E716 E54D             (        forth.asm):01284                 fdb     LWMNRA          Missing word name in LOCWRT
E718 4C574D4E524100   (        forth.asm):01285                 fcn     'LWMNRA'
E71F E987             (        forth.asm):01286                 fdb     CFR1SRA         CF read one sector failed
E721 4346523153524100 (        forth.asm):01287                 fcn     'CFR1SRA'
E729 E80B             (        forth.asm):01288                 fdb     NPUSH           Not an error RA but useful to have as a symbol
E72B 4E5055534800     (        forth.asm):01289                 fcn     'NPUSH'
E731 E82B             (        forth.asm):01290                 fdb     RPUSH           Not an error RA but useful to have as a symbol
E733 525055534800     (        forth.asm):01291                 fcn     'RPUSH'
E739 E819             (        forth.asm):01292                 fdb     NPOP            Not an error RA but useful to have as a symbol
E73B 4E504F5000       (        forth.asm):01293                 fcn     'NPOP'
E740 E847             (        forth.asm):01294                 fdb     RPOP            Not an error RA but useful to have as a symbol
E742 52504F5000       (        forth.asm):01295                 fcn     'RPOP'
E747 E2E0             (        forth.asm):01296                 fdb     PUTS            Not an error RA but useful to have as a symbol
E749 5055545300       (        forth.asm):01297                 fcn     'PUTS'
                      (        forth.asm):01298                 IFNE    DEBUG
                      (        forth.asm):01299                 fdb     LWAFRA          Assertion failure in LOCWRT
                      (        forth.asm):01300                 fcn     'LOCWRTAF'
                      (        forth.asm):01301                 ENDC
E74E 0000             (        forth.asm):01302                 fdb     0               End of list
E750 3F3F3F00         (        forth.asm):01303                 fcn     '???'           Admit we have no clue!
                      (        forth.asm):01304                 ENDC                    SSDFEAT
                      (        forth.asm):01305         
                      (        forth.asm):01306         * Print ' (xxxx/yyyy)' where xxxx is the hex representation for BLK @ and
                      (        forth.asm):01307         * yyyy is the hex representation for >IN @. Y is preserved, X and D are not.
E754 3420             (        forth.asm):01308 (4+2)   PRBLKIN pshs    y
E756 108E03FC         (        forth.asm):01309 (4)             ldy     #HEXBUF
E75A 8620             (        forth.asm):01310 (2)             lda     #SP
E75C A7A0             (        forth.asm):01311 (4+1)           sta     ,y+
E75E 8628             (        forth.asm):01312 (2)             lda     #'(
E760 A7A0             (        forth.asm):01313 (4+1)           sta     ,y+
E762 DC2C             (        forth.asm):01314 (4)             ldd     UBLK
E764 BDE182           (        forth.asm):01315 (7)             jsr     HDMP4
E767 862F             (        forth.asm):01316 (2)             lda     #'/
E769 A7A0             (        forth.asm):01317 (4+1)           sta     ,y+
E76B DC2A             (        forth.asm):01318 (4)             ldd     UTOIN
E76D BDE182           (        forth.asm):01319 (7)             jsr     HDMP4
E770 8629             (        forth.asm):01320 (2)             lda     #')
E772 A7A0             (        forth.asm):01321 (4+1)           sta     ,y+
E774 6FA4             (        forth.asm):01322 (6+0)           clr     ,y
E776 8E03FC           (        forth.asm):01323 (3)             ldx     #HEXBUF
E779 BDE2E0           (        forth.asm):01324 (7)             jsr     PUTS
E77C 3520             (        forth.asm):01325 (4+2)           puls    y
E77E 7EE2ED           (        forth.asm):01326 (3)             jmp     PUTCR
                      (        forth.asm):01327         
                      (        forth.asm):01328         * Handle error condition. Error code is in B.
                      (        forth.asm):01329         * If B is 2 (undefined) X points to a string of length CURTOKL that has the
                      (        forth.asm):01330         * offending word.
E781 10AEE4           (        forth.asm):01331 (6+0)   ERRHDLR ldy     ,s              Invoking return address
                      (        forth.asm):01332         * In case of a trap return, we enter here with Y set to #IODZHDL
E784 BDE2ED           (        forth.asm):01333 (7)     ERRHD1  jsr     PUTCR           GNU Forth does this in its exception handler
E787 C102             (        forth.asm):01334 (2)             cmpb    #2              Undefined symbol?
E789 2618             (        forth.asm):01335 (3)             bne     @perrm          No
E78B 8627             (        forth.asm):01336 (2)             lda     #''             Begin quote
E78D BDE2CD           (        forth.asm):01337 (7)             jsr     PUTCH
E790 A680             (        forth.asm):01338 (4+1)   @prtsym lda     ,x+             Display undefined symbol name
E792 BDE2CD           (        forth.asm):01339 (7)             jsr     PUTCH
E795 0A42             (        forth.asm):01340 (5)             dec     CURTOKL
E797 26F7             (        forth.asm):01341 (3)             bne     @prtsym
E799 8627             (        forth.asm):01342 (2)             lda     #''             End quote
E79B BDE2CD           (        forth.asm):01343 (7)             jsr     PUTCH
E79E 8620             (        forth.asm):01344 (2)             lda     #SP             BL EMIT
E7A0 BDE2CD           (        forth.asm):01345 (7)             jsr     PUTCH
E7A3 8EFEAE           (        forth.asm):01346 (3)     @perrm  ldx     #ERRMTBL        Regular error handling
E7A6 5D               (        forth.asm):01347 (1)     @nxterr tstb
E7A7 2637             (        forth.asm):01348 (3)             bne     @skerrm
E7A9 BDE2E0           (        forth.asm):01349 (7)             jsr     PUTS            Print error message
E7AC 8DA6             (        forth.asm):01350 (6)             bsr     PRBLKIN         Print BLK and >IN values (in hex)
E7AE 1F20             (        forth.asm):01351 (4)     @dmptos tfr     y,d             Dump top of the system stack contents
                      (        forth.asm):01352                 IFNE    SSDFEAT
E7B0 3406             (        forth.asm):01353 (4+2)           pshs    d
                      (        forth.asm):01354                 ENDC                    SSDFEAT
E7B2 108E03FC         (        forth.asm):01355 (4)             ldy     #HEXBUF
E7B6 BDE182           (        forth.asm):01356 (7)             jsr     HDMP4
E7B9 8620             (        forth.asm):01357 (2)             lda     #SP
E7BB A7A0             (        forth.asm):01358 (4+1)           sta     ,y+
                      (        forth.asm):01359         * Symbolic stack dumps are configurable. In situations where the dictionary is
                      (        forth.asm):01360         * trashed, they may not be considered desirable. See SSDFEAT in constants.asm.
                      (        forth.asm):01361                 IFNE    SSDFEAT
E7BD 1F21             (        forth.asm):01362 (4)             tfr     y,x             X has the buffer pointer
E7BF 3520             (        forth.asm):01363 (4+2)           puls    y               Restore target symbol table entry
E7C1 BDE641           (        forth.asm):01364 (7)             jsr     FINDSYM
                      (        forth.asm):01365                 ELSE
                      (        forth.asm):01366                 clr     ,y              No symbolic information is to be printed
                      (        forth.asm):01367                 ENDC                    SSDFEAT
E7C4 8E03FC           (        forth.asm):01368 (3)             ldx     #HEXBUF
E7C7 BDE2E0           (        forth.asm):01369 (7)             jsr     PUTS
E7CA BDE2ED           (        forth.asm):01370 (7)             jsr     PUTCR
E7CD 108CE000         (        forth.asm):01371 (4)             cmpy    #IODZHDL
E7D1 2702             (        forth.asm):01372 (3)             beq     @wastrp         We're just back from the trap handler
E7D3 3262             (        forth.asm):01373 (4+1)           leas    2,s             Point to the next item on the stack
E7D5 118C8000         (        forth.asm):01374 (4)     @wastrp cmps    #RAMSTRT+RAMSIZE
E7D9 240C             (        forth.asm):01375 (3)             bhs     @errdon         We're done here
E7DB 10AEE4           (        forth.asm):01376 (6+0)           ldy     ,s
E7DE 20CE             (        forth.asm):01377 (3)             bra     @dmptos
E7E0 A680             (        forth.asm):01378 (4+1)   @skerrm lda     ,x+             Scan for the next error message
E7E2 26FC             (        forth.asm):01379 (3)             bne     @skerrm
E7E4 5A               (        forth.asm):01380 (1)             decb
E7E5 20BF             (        forth.asm):01381 (3)             bra     @nxterr
E7E7 10CE8000         (        forth.asm):01382 (4)     @errdon lds     #RAMSTRT+RAMSIZE
E7EB 0D25             (        forth.asm):01383 (4)             tst     USTATE+1        We do ignore the upper byte
E7ED 2710             (        forth.asm):01384 (3)             beq     @erdon2         No pointers to restore if we were interpreting
                      (        forth.asm):01385         * We were compiling: clear STATE; restore DICEND and LSTWAD, if not :NONAME.
E7EF 0F25             (        forth.asm):01386 (5)             clr     USTATE+1        Switch back to interpretation mode
E7F1 9E0C             (        forth.asm):01387 (4)             ldx     BDICEND         Restore essential pointers from backups
E7F3 9F08             (        forth.asm):01388 (4)             stx     DICEND          Restore HERE
E7F5 0D34             (        forth.asm):01389 (4)             tst     ANCMPF
E7F7 2604             (        forth.asm):01390 (3)             bne     @clrano
E7F9 9E0A             (        forth.asm):01391 (4)             ldx     BLSTWAD
E7FB 9F06             (        forth.asm):01392 (4)             stx     LSTWAD          Restore LAST
E7FD 0F34             (        forth.asm):01393 (5)     @clrano clr     ANCMPF
E7FF BDEBD3           (        forth.asm):01394         @erdon2 RFXT    jsr,RCLR+7      Clear the return stack and
E802 BDEBC8           (        forth.asm):01395                 RFXT    jsr,NCLR+7      the control flow stack (moved here from ABORT)
E805 BDFBC0           (        forth.asm):01396                 RFXT    jsr,DECIMAL+10  Back to decimal BASE, for one's sanity sake!
E808 7EE0B2           (        forth.asm):01397 (3)             jmp     INTERP
                      (        forth.asm):01398         
                      (        forth.asm):01399         * Push X to the data stack (boundary is checked).
E80B 11830238         (        forth.asm):01400 (4)     NPUSH   cmpu    #NSTTOP
E80F 2303             (        forth.asm):01401 (3)             bls     @npush1         Anything <= than #NSTTOP indicates overflow
E811 3610             (        forth.asm):01402 (4+2)           pshu    x               Aka UCNPUSH
E813 39               (        forth.asm):01403 (4)             rts
E814 5F               (        forth.asm):01404 (1)     @npush1 clrb                    Data stack overflow
E815 BDE781           (        forth.asm):01405 (7)             jsr     ERRHDLR         No return
     E818             (        forth.asm):01406         DPSHRA  equ     *
E818 12               (        forth.asm):01407 (1)             nop
                      (        forth.asm):01408         
                      (        forth.asm):01409         * Pull X from the data stack (boundary is checked).
                      (        forth.asm):01410         * D, W and Y are preserved.
E819 118302F8         (        forth.asm):01411 (4)     NPOP    cmpu    #NSTBOT
E81D 2406             (        forth.asm):01412 (3)             bhs     @npop1          Anything >= than #NSTBOT indicates underflow
E81F 3710             (        forth.asm):01413 (4+2)           pulu    x
E821 1037C1           (        forth.asm):01414 (4)             cmpr    0,x             Update CC based on the outcome
E824 39               (        forth.asm):01415 (4)             rts
E825 C601             (        forth.asm):01416 (2)     @npop1  ldb     #1              Data stack underflow
E827 BDE781           (        forth.asm):01417 (7)             jsr     ERRHDLR         No return
     E82A             (        forth.asm):01418         DPOPRA  equ     *
E82A 12               (        forth.asm):01419 (1)             nop
                      (        forth.asm):01420         
                      (        forth.asm):01421         * Push X to the return stack (boundary is checked).
E82B 9637             (        forth.asm):01422 (3)     RPUSH   lda     RDEPTH          RDEPTH is expressed in cells
E82D 8140             (        forth.asm):01423 (2)             cmpa    #RSTKSZ/2       But RSTKZ is expressed in bytes
E82F 2710             (        forth.asm):01424 (3)             beq     @rpush1
E831 4C               (        forth.asm):01425 (1)             inca
E832 9737             (        forth.asm):01426 (3)             sta     RDEPTH
E834 1F27             (        forth.asm):01427 (4)             tfr     y,v
E836 109E00           (        forth.asm):01428 (5)             ldy     RSP
E839 AFA3             (        forth.asm):01429 (5+2)           stx     ,--y
E83B 109F00           (        forth.asm):01430 (5)             sty     RSP
E83E 1F72             (        forth.asm):01431 (4)             tfr     v,y
E840 39               (        forth.asm):01432 (4)             rts
E841 C607             (        forth.asm):01433 (2)     @rpush1 ldb     #7              Return stack overflow
E843 BDE781           (        forth.asm):01434 (7)             jsr     ERRHDLR         No return
     E846             (        forth.asm):01435         RPSHRA  equ     *
E846 12               (        forth.asm):01436 (1)             nop                     Meant to insulate RPUSH errors from RPOP EP
                      (        forth.asm):01437         
                      (        forth.asm):01438         * Pull X from the return stack (boundary is checked).
E847 9637             (        forth.asm):01439 (3)     RPOP    lda     RDEPTH          RDEPTH is expressed in cells
E849 2710             (        forth.asm):01440 (3)             beq     @rpop1
E84B 4A               (        forth.asm):01441 (1)             deca
E84C 9737             (        forth.asm):01442 (3)             sta     RDEPTH
E84E 1F27             (        forth.asm):01443 (4)             tfr     y,v
E850 109E00           (        forth.asm):01444 (5)             ldy     RSP
E853 AEA1             (        forth.asm):01445 (5+2)           ldx     ,y++
E855 109F00           (        forth.asm):01446 (5)             sty     RSP
E858 1F72             (        forth.asm):01447 (4)             tfr     v,y
E85A 39               (        forth.asm):01448 (4)             rts
E85B C608             (        forth.asm):01449 (2)     @rpop1  ldb     #8              Return stack underflow
E85D BDE781           (        forth.asm):01450 (7)             jsr     ERRHDLR         No return
     E860             (        forth.asm):01451         RPOPRA  equ     *
                      (        forth.asm):01452         
E860 0D35             (        forth.asm):01453 (4)     BALCHK  tst     BALNCD
E862 2601             (        forth.asm):01454 (3)             bne     BALERR
E864 39               (        forth.asm):01455 (4)             rts
E865 C609             (        forth.asm):01456 (2)     BALERR  ldb     #9              Illegal construct
E867 BDE781           (        forth.asm):01457 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):01458         
E86A 3410             (        forth.asm):01459 (4+2)   SAVINP  pshs    x
E86C 1FC1             (        forth.asm):01460 (4)             tfr     0,x
E86E 0D4A             (        forth.asm):01461 (4)             tst     SRCID
E870 2702             (        forth.asm):01462 (3)             beq     @pushb
E872 9E20             (        forth.asm):01463 (4)             ldx     BSBFADR
E874 8DB5             (        forth.asm):01464 (6)     @pushb  bsr     RPUSH           Push 0 if SRCID is zero else BSBFADR
E876 9E2C             (        forth.asm):01465 (4)             ldx     UBLK
E878 8DB1             (        forth.asm):01466 (6)             bsr     RPUSH           Push BLK on the return stack
E87A 9E2A             (        forth.asm):01467 (4)             ldx     UTOIN
E87C 8DAD             (        forth.asm):01468 (6)             bsr     RPUSH           Push >IN on the return stack
E87E 9E26             (        forth.asm):01469 (4)             ldx     ISLEN
E880 8DA9             (        forth.asm):01470 (6)             bsr     RPUSH           Push ISLEN on the return stack
E882 3510             (        forth.asm):01471 (4+2)           puls    x
E884 39               (        forth.asm):01472 (4)             rts
                      (        forth.asm):01473         
E885 8DC0             (        forth.asm):01474 (6)     RSTINP  bsr     RPOP
E887 9F26             (        forth.asm):01475 (4)             stx     ISLEN           Restore ISLEN from the return stack
E889 8DBC             (        forth.asm):01476 (6)             bsr     RPOP
E88B 9F2A             (        forth.asm):01477 (4)             stx     UTOIN           Restore >IN from the return stack
E88D 8DB8             (        forth.asm):01478 (6)             bsr     RPOP
E88F 9F2C             (        forth.asm):01479 (4)             stx     UBLK            Restore BLK from the return stack
E891 8DB4             (        forth.asm):01480 (6)             bsr     RPOP
E893 0F4A             (        forth.asm):01481 (5)             clr     SRCID
E895 1037C1           (        forth.asm):01482 (4)             cmpr    0,x
E898 2704             (        forth.asm):01483 (3)             beq     @done
E89A 9F20             (        forth.asm):01484 (4)             stx     BSBFADR
E89C 034A             (        forth.asm):01485 (5)             com     SRCID           Set SRCID to an NZ value
E89E 39               (        forth.asm):01486 (4)     @done   rts
                      (        forth.asm):01487         
                      (        forth.asm):01488         * Derive the current input stream pointer from BLK and >IN.
                      (        forth.asm):01489         * The resulting address is returned in X. D is altered.
                      (        forth.asm):01490         * The end of input stream address is re-computed.
                      (        forth.asm):01491         * Both Y and W are preserved.
E89F 3420             (        forth.asm):01492 (4+2)   BKIN2PT pshs    y
E8A1 9E2C             (        forth.asm):01493 (4)             ldx     UBLK
E8A3 271E             (        forth.asm):01494 (3)             beq     @notblk         Back to the console or a counted string
E8A5 1038             (        forth.asm):01495 (6)             pshsw
E8A7 BDE80B           (        forth.asm):01496 (7)             jsr     NPUSH           Make sure BLK @ is loaded
E8AA BDEACB           (        forth.asm):01497                 RFXT    jsr,BLOCK+8     XT for BLOCK
E8AD 1039             (        forth.asm):01498 (6)             pulsw
E8AF 3710             (        forth.asm):01499                 UCNPOP                  Retrieve buffer addr to X
E8B1 9F20             (        forth.asm):01500 (4)     @rsolvd stx     BSBFADR         Update base buffer address
E8B3 1F12             (        forth.asm):01501 (4)             tfr     x,y
E8B5 DC26             (        forth.asm):01502 (4)             ldd     ISLEN
E8B7 31AB             (        forth.asm):01503 (4+2)           leay    d,y
E8B9 109F28           (        forth.asm):01504 (5)             sty     ISEADDR         Update the end of input stream address
E8BC 3520             (        forth.asm):01505 (4+2)           puls    y
E8BE DC2A             (        forth.asm):01506 (4)             ldd     UTOIN
E8C0 308B             (        forth.asm):01507 (4+2)           leax    d,x             Add the current offset. Return the result via X
E8C2 39               (        forth.asm):01508 (4)             rts
E8C3 8E0378           (        forth.asm):01509 (3)     @notblk ldx     #CMDBUF         Assume we are returning to the console
E8C6 0D4A             (        forth.asm):01510 (4)             tst     SRCID           Are we running under EVALUATE?
E8C8 27E7             (        forth.asm):01511 (3)             beq     @rsolvd         No
E8CA 9E20             (        forth.asm):01512 (4)             ldx     BSBFADR         We are returning to a counted string
E8CC 20E3             (        forth.asm):01513 (3)             bra     @rsolvd
                      (        forth.asm):01514         
                      (        forth.asm):01515                 include rtc.asm         Experimental MC146818 support
                      (          rtc.asm):00001                 IFNE RTCFEAT
                      (          rtc.asm):00002         
                      (          rtc.asm):00003         * FIRQ handler for the MC146818 RTC.
                      (          rtc.asm):00004         * In this particular context, only D and CC might be altered.
E8CE                  (          rtc.asm):00005         RTCIHDL tst     RTCAVL          RTC chip detected?
                      (          rtc.asm):00006                 beq     @notick         Nope
                      (          rtc.asm):00007                 lda     #RTOREGC        Read RTCC. INTACK if any interrupt is pending.
                      (          rtc.asm):00008         * Two intructions inlined for RTREGRD in non-preemtible (interrupt) mode.
                      (          rtc.asm):00009                 sta     RTAS
                      (          rtc.asm):00010                 ldb     RTDS
                      (          rtc.asm):00011                 andb    #RTCPF          RTC periodic interrupt pending?
                      (          rtc.asm):00012                 beq     @notick         No, this ain't us ticking
                      (          rtc.asm):00013         * From "The 6309 Book" p. 3-69: "Note that INC does not effect the carry bit."
E8CE                  (          rtc.asm):00014         @inctks ldd     TIKSLOW
                      (          rtc.asm):00015                 addd    #1
                      (          rtc.asm):00016                 std     TIKSLOW
                      (          rtc.asm):00017                 ldd     TIKSHI
                      (          rtc.asm):00018                 adcd    #0
                      (          rtc.asm):00019                 std     TIKSHI
E8CE                  (          rtc.asm):00020         @notick rts
                      (          rtc.asm):00021         
                      (          rtc.asm):00022         * Read one byte from an internal's RTC register whose offset is in A upon
                      (          rtc.asm):00023         * routine entry. The register contents is returned in B.
                      (          rtc.asm):00024         * No other register is altered. FIRQ is temporarily disabled.
                      (          rtc.asm):00025         * Can be called from base or interrupt level.
E8CE                  (          rtc.asm):00026         RTREGRD pshs    cc
                      (          rtc.asm):00027                 orcc    #FFLAG          Mask FIRQ
                      (          rtc.asm):00028                 sta     RTAS            Select target RTC register
                      (          rtc.asm):00029                 ldb     RTDS            Read RTC register contents
                      (          rtc.asm):00030                 puls    cc              Restore previous interrupt handling mode
                      (          rtc.asm):00031                 rts
                      (          rtc.asm):00032         
                      (          rtc.asm):00033         * Write one byte to an internal's RTC register whose offset is in A upon
                      (          rtc.asm):00034         * routine entry. The register byte output value is in B upon entry.
                      (          rtc.asm):00035         * FIRQ is temporarily masked. All regs contents are preserved.
                      (          rtc.asm):00036         * Can be called from base or interrupt level.
E8CE                  (          rtc.asm):00037         RTREGWR pshs    cc
                      (          rtc.asm):00038                 orcc    #FFLAG          Mask FIRQ
                      (          rtc.asm):00039                 sta     RTAS            Select target RTC register
                      (          rtc.asm):00040                 stb     RTDS            Write RTC register contents
                      (          rtc.asm):00041                 puls    cc              Restore previous interrupt handling mode
                      (          rtc.asm):00042                 rts
                      (          rtc.asm):00043         
                      (          rtc.asm):00044         * Detect if an MC146818 chip is present.
E8CE                  (          rtc.asm):00045         RTCINIT
                      (          rtc.asm):00046                 IFNE    DEBUG
                      (          rtc.asm):00047                 clrd
                      (          rtc.asm):00048                 std     TIKSHI          Initialize the TICKS double cell
                      (          rtc.asm):00049                 std     TIKSLOW
                      (          rtc.asm):00050                 clr     RTCAVL          Assume chip not present
                      (          rtc.asm):00051                 ENDC
                      (          rtc.asm):00052                 lda     #RTOPRES        Offset to the last NVRAM byte if dev is present
                      (          rtc.asm):00053                 bsr     RTREGRD         Read user memory byte. Value is returned in B   
                      (          rtc.asm):00054                 comb                    One's complement to B
                      (          rtc.asm):00055                 pshs    b
                      (          rtc.asm):00056                 bsr     RTREGWR         Write back one's complement to RTC
                      (          rtc.asm):00057                 bsr     RTREGRD         And read the last NVRAM byte back
                      (          rtc.asm):00058                 puls    a
                      (          rtc.asm):00059                 cmpr    b,a             Match?
                      (          rtc.asm):00060                 beq     @rtdtct         RTC chip detected all right!
                      (          rtc.asm):00061                 rts
                      (          rtc.asm):00062         * MC146818 RTC chip detected.
                      (          rtc.asm):00063         * On power up if register RTCA reads as 0, the SET bit in register RTCB will
                      (          rtc.asm):00064         * prevent any updates to the calendar (date/time). We do preserve the state of
                      (          rtc.asm):00065         * the SET bit, so as to indicate to the application software that the time and
                      (          rtc.asm):00066         * date have yet to be set manually.
E8CE                  (          rtc.asm):00067         @rtdtct lda     #RTOREGA
                      (          rtc.asm):00068                 ldb     #(RTADV32|RTARS64)
                      (          rtc.asm):00069                 bsr     RTREGWR         Write B to the RTCA register
                      (          rtc.asm):00070                 lda     #RTOREGB
                      (          rtc.asm):00071                 bsr     RTREGRD
                      (          rtc.asm):00072                 andb    #RTBSET         Extract the SET bit
                      (          rtc.asm):00073                 orb     #(RTBPIE|RTBDM|RTB24)
                      (          rtc.asm):00074                 bsr     RTREGWR         Write B to the RTCB register
                      (          rtc.asm):00075                 inc     RTCAVL
                      (          rtc.asm):00076                 ldx     #RTPRESM        Real time clock detected message base address
                      (          rtc.asm):00077                 jmp     PUTS            Out to the console
                      (          rtc.asm):00078         
                      (          rtc.asm):00079                 ENDC                    RTCFEAT
                      (          rtc.asm):00080         
                      (        forth.asm):01516                 include storage.asm     CompactFlash support
                      (      storage.asm):00001         * Wait until the BSY bit is clear in the CF status register.
                      (      storage.asm):00002         * Upon return the BSY bit is guaranteed to be zero. Z will
                      (      storage.asm):00003         * be set in CC. This subroutine should not be called before
                      (      storage.asm):00004         * the CompactFlash presence has been assessed.
E8CE B6C007           (      storage.asm):00005 (4)     CFWAIT  lda     CFSTATR
E8D1 8580             (      storage.asm):00006 (2)             bita    #CFBSYB
E8D3 26F9             (      storage.asm):00007 (3)             bne     CFWAIT
E8D5 39               (      storage.asm):00008 (4)             rts
                      (      storage.asm):00009         
                      (      storage.asm):00010         * Wait until the BSY bit is clear and the RDY bit is set.
E8D6 8DF6             (      storage.asm):00011 (6)     CFRDY   bsr     CFWAIT
E8D8 2703             (      storage.asm):00012 (3)             beq     @cfrdy0         Card not busy, proceed
E8DA 1A04             (      storage.asm):00013 (2)             orcc    #ZFLAG
E8DC 39               (      storage.asm):00014 (4)             rts
E8DD 8E2000           (      storage.asm):00015 (3)     @cfrdy0 ldx     #$2000          Maximum poll count
E8E0 8640             (      storage.asm):00016 (2)             lda     #CFRDYB
E8E2 B5C007           (      storage.asm):00017 (4)     @cfrdy1 bita    CFSTATR
E8E5 2604             (      storage.asm):00018 (3)             bne     @cfrdy2         BSY bit is set, continue
E8E7 301F             (      storage.asm):00019 (4+1)           leax    -1,x            Card not ready, decrement poll count
E8E9 26F7             (      storage.asm):00020 (3)             bne     @cfrdy1         and try again
E8EB 39               (      storage.asm):00021 (4)     @cfrdy2 rts                     Return with Z set: card not present
                      (      storage.asm):00022         *                               Return with Z clear: card is ready
                      (      storage.asm):00023         
                      (      storage.asm):00024         * Check for possible error condition.
                      (      storage.asm):00025         * Upon return either Z is set (A is zero) and no error occurred or
                      (      storage.asm):00026         * Z is clear and the CF error register contents is returned in A.
E8EC 8DE0             (      storage.asm):00027 (6)     CFERRCK bsr     CFWAIT
E8EE B6C007           (      storage.asm):00028 (4)             lda     CFSTATR
E8F1 8401             (      storage.asm):00029 (2)             anda    #CFERRB
E8F3 2703             (      storage.asm):00030 (3)             beq     @cfeck1
E8F5 B6C001           (      storage.asm):00031 (4)             lda     CFERROR         The error register contains error details
E8F8 39               (      storage.asm):00032 (4)     @cfeck1 rts
                      (      storage.asm):00033         
                      (      storage.asm):00034         * Issue CF command. The command code is passed through the B register.
                      (      storage.asm):00035         * Upon return:
                      (      storage.asm):00036         * - Z is set and everything is peachy.
                      (      storage.asm):00037         * - or Z is clear and the CF error register contents will be
                      (      storage.asm):00038         *   returned in A (and mirrored in the global CFERRCD variable).
                      (      storage.asm):00039         * B is preserved.
E8F9 8DDB             (      storage.asm):00040 (6)     CFCMDIS bsr     CFRDY
E8FB 270A             (      storage.asm):00041 (3)             beq     @cfciab         Card not ready, abort
E8FD D748             (      storage.asm):00042 (3)             stb     CFCMMIR         Update CF command mirror
E8FF F7C007           (      storage.asm):00043 (4)             stb     CFCOMDR         Send command to the CF card
E902 8DE8             (      storage.asm):00044 (6)             bsr     CFERRCK
E904 9749             (      storage.asm):00045 (3)     @cfcise sta     CFERRCD         CF command issue set error
                      (      storage.asm):00046                 IFNE    DEBUG
                      (      storage.asm):00047                 pshs    a,cc
                      (      storage.asm):00048                 beq     @cfciok
                      (      storage.asm):00049                 lda     #'!
                      (      storage.asm):00050                 jsr     PUTCH
E906                  (      storage.asm):00051         @cfcidi lda     CFCMMIR
                      (      storage.asm):00052                 ldx     #TBUFF
                      (      storage.asm):00053                 jsr     HDMP2
                      (      storage.asm):00054                 lda     #'/
                      (      storage.asm):00055                 sta     ,x+
                      (      storage.asm):00056                 lda     CFERRCD
                      (      storage.asm):00057                 jsr     HDMP2
                      (      storage.asm):00058                 ldx     #TBUFF
                      (      storage.asm):00059                 jsr     PUTS
                      (      storage.asm):00060                 jsr     PUTCR
                      (      storage.asm):00061                 bra     @cfcict         CF command issue continued
E906                  (      storage.asm):00062         @cfciok lda     #'#
                      (      storage.asm):00063                 jsr     PUTCH
                      (      storage.asm):00064                 bra     @cfcidi         CF command issue data indication
E906                  (      storage.asm):00065         @cfcict puls    cc,a
                      (      storage.asm):00066                 ENDC
E906 39               (      storage.asm):00067 (4)             rts
E907 86FF             (      storage.asm):00068 (2)     @cfciab lda     #$FF            Dummy error code
E909 20F9             (      storage.asm):00069 (3)             bra     @cfcise
                      (      storage.asm):00070         
                      (      storage.asm):00071         * Drive 0 select.
E90B 8DC9             (      storage.asm):00072 (6)     CFDRSEL bsr     CFRDY
E90D 86E0             (      storage.asm):00073 (2)             lda     #$E0            Drive 0, LBA mode
E90F B7C006           (      storage.asm):00074 (4)             sta     CFDRHDR
E912 20C2             (      storage.asm):00075 (3)             bra     CFRDY
                      (      storage.asm):00076         
                      (      storage.asm):00077         * Analyze the response to the CF "Identify Device" request.
E914 9E08             (      storage.asm):00078 (4)     CFANTHS ldx     DICEND
E916 308836           (      storage.asm):00079 (4+1)           leax    $36,x           Point to the "Model number" field
E919 3410             (      storage.asm):00080 (4+2)           pshs    x
E91B 118614           (      storage.asm):00081 (3)             lde     #$14            Number of 16 bit words to go through
E91E EC84             (      storage.asm):00082 (5+0)   @bytswp ldd     ,x
E920 1E98             (      storage.asm):00083 (5)             exg     b,a             Byte swapping
E922 ED81             (      storage.asm):00084 (5+2)           std     ,x++
E924 114A             (      storage.asm):00085 (2)             dece
E926 26F6             (      storage.asm):00086 (3)             bne     @bytswp
E928 6F84             (      storage.asm):00087 (6+0)           clr     ,x
E92A 3510             (      storage.asm):00088 (4+2)           puls    x
E92C BDE2E0           (      storage.asm):00089 (7)             jsr     PUTS            Decent CF cards indicate the capacity that way
E92F 7EE2ED           (      storage.asm):00090 (3)             jmp     PUTCR           Up to $10000 blocks is 64 MB!
                      (      storage.asm):00091         
                      (      storage.asm):00092         * Initialize the CompactFlash subsystem.
                      (      storage.asm):00093         * This is run once at boot time. There is no hot plug support here.
E932 0F47             (      storage.asm):00094 (5)     CFINIT  clr     CFCARDP         Clear card present,
                      (      storage.asm):00095                 IFEQ    DEBUG
E934 8DA0             (      storage.asm):00096 (6)             bsr     CFRDY
                      (      storage.asm):00097                 ELSE
                      (      storage.asm):00098                 jsr     CFRDY
                      (      storage.asm):00099                 ENDC
E936 2730             (      storage.asm):00100 (3)             beq     @cfinab         Card not ready, abort
E938 8DD1             (      storage.asm):00101 (6)             bsr     CFDRSEL         Drive 0 select
E93A 8601             (      storage.asm):00102 (2)             lda     #1              Enable 8-bit data transfers
E93C B7C001           (      storage.asm):00103 (4)             sta     CFFEATR
E93F C6EF             (      storage.asm):00104 (2)             ldb     #CFSETFT        Issue a CF "Set Feature" command
                      (      storage.asm):00105                 IFEQ    DEBUG
E941 8DB6             (      storage.asm):00106 (6)             bsr     CFCMDIS         Not allowed to fail
                      (      storage.asm):00107                 ELSE
                      (      storage.asm):00108                 jsr     CFCMDIS         Not allowed to fail
                      (      storage.asm):00109                 ENDC
E943 2623             (      storage.asm):00110 (3)             bne     @cfinab         Abort with card present flag clear
E945 8601             (      storage.asm):00111 (2)             lda     #1              Request default PIO mode wo/ IORDY
E947 B7C002           (      storage.asm):00112 (4)             sta     CFSCNTR
E94A 8603             (      storage.asm):00113 (2)             lda     #3              ATA-2 "Set Transfer mode"
E94C B7C001           (      storage.asm):00114 (4)             sta     CFFEATR
                      (      storage.asm):00115                 IFEQ    DEBUG
E94F 8DA8             (      storage.asm):00116 (6)             bsr     CFCMDIS         OK to fail
                      (      storage.asm):00117                 ELSE
                      (      storage.asm):00118                 jsr     CFCMDIS         OK to fail
                      (      storage.asm):00119                 ENDC
E951 8682             (      storage.asm):00120 (2)             lda     #$82            Disable write caching
E953 B7C001           (      storage.asm):00121 (4)             sta     CFFEATR
                      (      storage.asm):00122                 IFEQ    DEBUG
E956 8DA1             (      storage.asm):00123 (6)             bsr     CFCMDIS         B still has #CFSETF. Also OK to fail
                      (      storage.asm):00124                 ELSE
                      (      storage.asm):00125                 jsr     CFCMDIS         B still has #CFSETF. Also OK to fail
                      (      storage.asm):00126                 ENDC
E958 C6EC             (      storage.asm):00127 (2)             ldb     #CFIDDEV        Issue a CF "Identify Device" command
                      (      storage.asm):00128                 IFEQ    DEBUG
E95A 8D9D             (      storage.asm):00129 (6)             bsr     CFCMDIS         Not allowed to fail
                      (      storage.asm):00130                 ELSE
                      (      storage.asm):00131                 jsr     CFCMDIS         Not allowed to fail
                      (      storage.asm):00132                 ENDC
E95C 260A             (      storage.asm):00133 (3)             bne     @cfinab         Abort with card present flag clear
E95E 9E08             (      storage.asm):00134 (4)             ldx     DICEND          Target address is HERE
E960 8D07             (      storage.asm):00135 (6)             bsr     CF1SRD          Read one sector
E962 8DB0             (      storage.asm):00136 (6)             bsr     CFANTHS         Analyze this!
E964 8601             (      storage.asm):00137 (2)             lda     #1
E966 9747             (      storage.asm):00138 (3)             sta     CFCARDP         Set the card present flag
E968 39               (      storage.asm):00139 (4)     @cfinab rts
                      (      storage.asm):00140         
                      (      storage.asm):00141         * Read one sector. The LBA parameters are assumed to have been set previously.
                      (      storage.asm):00142         * On input X points to the receiving (at least 512 bytes long) buffer.
E969 B6C007           (      storage.asm):00143 (4)     CF1SRD  lda     CFSTATR
E96C 8508             (      storage.asm):00144 (2)             bita    #CFDRQB         Check for DRQ bit in the CF status register
E96E 2712             (      storage.asm):00145 (3)             beq     IOERR
E970 10860200         (      storage.asm):00146 (4)             ldw     #CFSCSZ         Sector size is 512 bytes
E974 108EC000         (      storage.asm):00147 (4)             ldy     #CFDATAR        The data source address
E978 3401             (      storage.asm):00148 (4+1)           pshs    cc
E97A 1A50             (      storage.asm):00149 (2)             orcc    #(FFLAG|IFLAG)  Disable maskable interrupts
E97C 113B21           (      storage.asm):00150 (6+?)           tfm     y,x+
E97F 3501             (      storage.asm):00151 (4+1)           puls    cc              Restore previous interrupt handling mode
E981 39               (      storage.asm):00152 (4)             rts
E982 C611             (      storage.asm):00153 (2)     IOERR   ldb     #17
E984 BDE781           (      storage.asm):00154 (7)             jsr     ERRHDLR         No return
E987 12               (      storage.asm):00155 (1)     CFR1SRA nop                     For symbolic stack dump debugging purposes
                      (      storage.asm):00156         
                      (      storage.asm):00157         * Write one sector. The LBA parameters are assumed to have been set previously.
                      (      storage.asm):00158         * On input X points to the sending (at least 512 bytes long) buffer.
E988 B6C007           (      storage.asm):00159 (4)     CF1SWR  lda     CFSTATR
E98B 8488             (      storage.asm):00160 (2)             anda    #CFBSYB|CFDRQB
E98D 8108             (      storage.asm):00161 (2)             cmpa    #CFDRQB         Check for BSY clear and DRQ set
E98F 26F7             (      storage.asm):00162 (3)             bne     CF1SWR
E991 10860200         (      storage.asm):00163 (4)             ldw     #CFSCSZ         Sector size is 512 bytes
E995 108EC000         (      storage.asm):00164 (4)             ldy     #CFDATAR        The data destination address
E999 113A12           (      storage.asm):00165 (6+?)           tfm     x+,y            Note: tfm is interruptible!
E99C 39               (      storage.asm):00166 (4)             rts
                      (      storage.asm):00167         
                      (      storage.asm):00168         * 1KB Forth block support primitives. Not dictionary code. More like BIOS ops.
                      (      storage.asm):00169         
                      (      storage.asm):00170         * One block IO preamble: select drive and LBA parameters. On input:
                      (      storage.asm):00171         * ,s has the return address
                      (      storage.asm):00172         * 2,s had the return address for the caller
                      (      storage.asm):00173         * 4,s has the target block number
E99D BDE8CE           (      storage.asm):00174 (7)     CF1BPRE jsr     CFWAIT
E9A0 BDE90B           (      storage.asm):00175 (7)             jsr     CFDRSEL         Set drive and head parameters
E9A3 EC64             (      storage.asm):00176 (5+1)           ldd     4,s
E9A5 1048             (      storage.asm):00177 (2)             lsld                    Convert block number to sector number
E9A7 F7C003           (      storage.asm):00178 (4)             stb     CFSNUMR         LBA 7-0
E9AA B7C004           (      storage.asm):00179 (4)             sta     CFCLOWR         LBA 15-8
E9AD 1FA8             (      storage.asm):00180 (4)             tfr     cc,a
E9AF 8401             (      storage.asm):00181 (2)             anda    #CFLAG
E9B1 B7C005           (      storage.asm):00182 (4)             sta     CFCHIGR         LBA 23-16 (carry to cylinder high)
E9B4 8602             (      storage.asm):00183 (2)             lda     #2              2 IDE sectors per Forth block
E9B6 B7C002           (      storage.asm):00184 (4)             sta     CFSCNTR
E9B9 39               (      storage.asm):00185 (4)             rts
                      (      storage.asm):00186         
                      (      storage.asm):00187         * Read one block from CF device. On input:
                      (      storage.asm):00188         * ,s has the return address
                      (      storage.asm):00189         * 2,s has the target block number
                      (      storage.asm):00190         * 4,s has the buffer base address
                      (      storage.asm):00191         * Upon return, Y will be preserved.
E9BA 0D47             (      storage.asm):00192 (4)     CF1BKRD tst     CFCARDP
E9BC 2602             (      storage.asm):00193 (3)             bne     @ctnued
E9BE 20C2             (      storage.asm):00194 (3)             bra     IOERR           Card not present--CF subsystem not initialized
E9C0 1F27             (      storage.asm):00195 (4)     @ctnued tfr     y,v
E9C2 8DD9             (      storage.asm):00196 (6)             bsr     CF1BPRE
E9C4 C620             (      storage.asm):00197 (2)             ldb     #CFRSCTS        Issue a "Read sectors" CF command
E9C6 BDE8F9           (      storage.asm):00198 (7)             jsr     CFCMDIS
E9C9 AE64             (      storage.asm):00199 (5+1)           ldx     4,s             Target buffer address to X
E9CB 8D9C             (      storage.asm):00200 (6)             bsr     CF1SRD          Read the even sector from CF device
E9CD BDE8CE           (      storage.asm):00201 (7)             jsr     CFWAIT          Wait for next sector to become available
E9D0 8D97             (      storage.asm):00202 (6)             bsr     CF1SRD          and read the odd sector
E9D2 1F72             (      storage.asm):00203 (4)             tfr     v,y
E9D4 39               (      storage.asm):00204 (4)             rts
                      (      storage.asm):00205         
                      (      storage.asm):00206         * Write one block to CF device. Upon entry:
                      (      storage.asm):00207         * ,s has the return address
                      (      storage.asm):00208         * 2,s has the target block number
                      (      storage.asm):00209         * 4,s has the buffer base address
                      (      storage.asm):00210         * Upon return, Y will be preserved.
E9D5 0D47             (      storage.asm):00211 (4)     CF1BKWR tst     CFCARDP
E9D7 2602             (      storage.asm):00212 (3)             bne     @ctnued
E9D9 20A7             (      storage.asm):00213 (3)             bra     IOERR           Card not present--CF subsystem not initialized
E9DB 1F27             (      storage.asm):00214 (4)     @ctnued tfr     y,v
E9DD 8DBE             (      storage.asm):00215 (6)             bsr     CF1BPRE
E9DF C630             (      storage.asm):00216 (2)             ldb     #CFWSCTS        Issue a "Write sectors" CF command
E9E1 BDE8F9           (      storage.asm):00217 (7)             jsr     CFCMDIS
E9E4 AE64             (      storage.asm):00218 (5+1)           ldx     4,s             Source buffer address to X
E9E6 8DA0             (      storage.asm):00219 (6)             bsr     CF1SWR          Write the even sector to CF device
E9E8 BDE8CE           (      storage.asm):00220 (7)             jsr     CFWAIT          Wait for next sector to become available
E9EB 8D9B             (      storage.asm):00221 (6)             bsr     CF1SWR          and write the odd sector
E9ED 1F72             (      storage.asm):00222 (4)             tfr     v,y
E9EF 39               (      storage.asm):00223 (4)             rts
                      (      storage.asm):00224         
                      (        forth.asm):01517         
                      (        forth.asm):01518         ******************************************************************************
                      (        forth.asm):01519         * Dictionary begins. Please note that @ has to be the first (in linked list
                      (        forth.asm):01520         * order) word and EMPTY-BUFFERS has to be the last one. In the code below ANSI
                      (        forth.asm):01521         * refers to ANSI-X3.215-1994 Draft 6 proposal (i.e. the free spec).
                      (        forth.asm):01522         
E9F0 0D               (        forth.asm):01523         EBUFS   fcb     13              79-STANDARD (REQ145)
E9F1 454D5054592D4255 (        forth.asm):01524                 fcc     'EMPTY-BUFFERS' ( -- )
     4646455253
E9FE 0000             (        forth.asm):01525                 fdb     0               Last dictionary entry
                      (        forth.asm):01526                 RFCS
EA00 8E04A0           (        forth.asm):01527 (3)     EMPTYB  ldx     #BUF0
EA03 8D03             (        forth.asm):01528 (6)             bsr     EMPT1B
EA05 8E08B0           (        forth.asm):01529 (3)             ldx     #BUF1
                      (        forth.asm):01530         * Empty the buffer pointed to by X.
EA08 9F1E             (        forth.asm):01531 (4)     EMPT1B  stx     MRUBUFA         Update most recently used buffer address
EA0A 30890400         (        forth.asm):01532 (4+3)           leax    BOTERM,x        Buffer offset to the terminator field
EA0E 104F             (        forth.asm):01533 (2)             clrd
EA10 ED84             (        forth.asm):01534 (5+0)           std     ,x              Clear terminator and flags fields
                      (        forth.asm):01535                 IFNE    DEBUG
                      (        forth.asm):01536                 ldd     #$C7C7
                      (        forth.asm):01537                 std     2,x             Dummy block number
                      (        forth.asm):01538                 ENDC                    DEBUG
EA12 39               (        forth.asm):01539 (4)             rts
                      (        forth.asm):01540         
EA13 0C               (        forth.asm):01541         SAVBUF  fcb     12              79-STANDARD (REQ221)
EA14 534156452D425546 (        forth.asm):01542                 fcc     'SAVE-BUFFERS'  ( -- )
     46455253
EA20 E9F0             (        forth.asm):01543                 fdb     EBUFS
                      (        forth.asm):01544                 RFCS
EA22 8E04A0           (        forth.asm):01545 (3)             ldx     #BUF0
EA25 8D03             (        forth.asm):01546 (6)             bsr     WBIFDRT
EA27 8E08B0           (        forth.asm):01547 (3)             ldx     #BUF1
                      (        forth.asm):01548         * Write buffer back to mass storage if marked as dirty.
                      (        forth.asm):01549         * The dirty bit is cleared but the buffer contents itself is not.
                      (        forth.asm):01550         * The buffer will continue to be marked as "in use."
                      (        forth.asm):01551         * On input X has has the base buffer address. Both D and X
                      (        forth.asm):01552         * are preserved. Y is not.
EA2A 3406             (        forth.asm):01553 (4+2)   WBIFDRT pshs    d
EA2C 3410             (        forth.asm):01554 (4+2)           pshs    x               Base buffer address (arg1 to CF1BKWR)
EA2E 8605             (        forth.asm):01555 (2)             lda     #BINUSE|BDIRTY
EA30 A4890401         (        forth.asm):01556 (4+3)           anda    BOFLAGS,x
EA34 8105             (        forth.asm):01557 (2)             cmpa    #BINUSE|BDIRTY
EA36 2616             (        forth.asm):01558 (3)             bne     @alldon         Block not in use or in use but not dirty
EA38 AE890402         (        forth.asm):01559 (5+3)           ldx     BOBLKNO,x
EA3C 3410             (        forth.asm):01560 (4+2)           pshs    x               Block number (arg0 to CF1BKWR)
EA3E 8D95             (        forth.asm):01561 (6)             bsr     CF1BKWR         Write data buffer to CF
EA40 3262             (        forth.asm):01562 (4+1)           leas    2,s             Drop one cell from the system stack (blknum)
EA42 AEE4             (        forth.asm):01563 (5+0)           ldx     ,s              Retrieve base buffer address
EA44 30890401         (        forth.asm):01564 (4+3)           leax    BOFLAGS,x
EA48 A684             (        forth.asm):01565 (4+0)           lda     ,x              Acquire the 'flags' field
EA4A 84FB             (        forth.asm):01566 (2)             anda    #^BDIRTY        Clear the dirty bit
EA4C A784             (        forth.asm):01567 (4+0)           sta     ,x              and update the 'flags' field
EA4E 3510             (        forth.asm):01568 (4+2)   @alldon puls    x               Restore X
EA50 3506             (        forth.asm):01569 (4+2)           puls    d               and D
EA52 39               (        forth.asm):01570 (4)             rts
                      (        forth.asm):01571         
EA53 05               (        forth.asm):01572         FLUSH   fcb     5               79-STANDARD (REF)
EA54 464C555348       (        forth.asm):01573                 fcc     'FLUSH'         ( -- ) An alias for SAVE-BUFFERS
EA59 EA13             (        forth.asm):01574                 fdb     SAVBUF
                      (        forth.asm):01575                 RFCS
EA5B 20C5             (        forth.asm):01576                 RFXT    bra,SAVBUF+15   XT for SAVE-BUFFERS
                      (        forth.asm):01577         
EA5D 06               (        forth.asm):01578         UPDATE  fcb     6               79-STANDARD (REQ229)
EA5E 555044415445     (        forth.asm):01579                 fcc     'UPDATE'        ( -- )
EA64 EA53             (        forth.asm):01580                 fdb     FLUSH
                      (        forth.asm):01581                 RFCS
EA66 9E1E             (        forth.asm):01582 (4)             ldx     MRUBUFA         Most recently used buffer base address
EA68 30890401         (        forth.asm):01583 (4+3)           leax    BOFLAGS,x       Buffer 'flags' field's address to X
EA6C A684             (        forth.asm):01584 (4+0)           lda     ,x              Buffer 'flags' field to A
EA6E 8501             (        forth.asm):01585 (2)             bita    #BINUSE         Is that buffer in use?
EA70 2704             (        forth.asm):01586 (3)             beq     @upddon         No, we're done here
EA72 8A04             (        forth.asm):01587 (2)             ora     #BDIRTY
EA74 A784             (        forth.asm):01588 (4+0)           sta     ,x              Set the dirty bit
EA76 39               (        forth.asm):01589 (4)     @upddon rts
                      (        forth.asm):01590         
EA77 06               (        forth.asm):01591         BUFFER  fcb     6               79-STANDARD (REQ130)
EA78 425546464552     (        forth.asm):01592                 fcc     'BUFFER'        ( ublkno -- addr )
EA7E EA5D             (        forth.asm):01593                 fdb     UPDATE
                      (        forth.asm):01594                 RFCS
EA80 BDE819           (        forth.asm):01595 (7)             jsr     NPOP
EA83 1F12             (        forth.asm):01596 (4)             tfr     x,y             ublkno to Y
                      (        forth.asm):01597         * Block lookup.
EA85 8E04A0           (        forth.asm):01598 (3)             ldx     #BUF0           Base address of the first resident buffer
EA88 C602             (        forth.asm):01599 (2)             ldb     #2              Number of resident buffers
EA8A A6890401         (        forth.asm):01600 (4+3)   @blkup  lda     BOFLAGS,x       Buffer flags to A
EA8E 8501             (        forth.asm):01601 (2)             bita    #BINUSE         Buffer in use?
EA90 270C             (        forth.asm):01602 (3)             beq     @nxtbuf         No
EA92 10AC890402       (        forth.asm):01603 (6+3)           cmpy    BOBLKNO,x       Buffer is in use. Block number match?
EA97 2605             (        forth.asm):01604 (3)             bne     @nxtbuf         No
EA99 9F1E             (        forth.asm):01605 (4)     @retba  stx     MRUBUFA         Block number match. Mark as the MRU buffer
EA9B 3610             (        forth.asm):01606                 UCNPUSH                 and return its base address via the data stack
EA9D 39               (        forth.asm):01607 (4)             rts
EA9E 30890410         (        forth.asm):01608 (4+3)   @nxtbuf leax    BFDISP,x        Point to the next buffer
EAA2 5A               (        forth.asm):01609 (1)             decb
EAA3 26E5             (        forth.asm):01610 (3)             bne     @blkup
                      (        forth.asm):01611         * The block number in Y is not currently in use. Assign a buffer to it.
EAA5 8E04A0           (        forth.asm):01612 (3)             ldx     #BUF0
EAA8 9C1E             (        forth.asm):01613 (4)             cmpx    MRUBUFA         Most recently used buffer address
EAAA 2603             (        forth.asm):01614 (3)             bne     @bselct
EAAC 8E08B0           (        forth.asm):01615 (3)             ldx     #BUF1
                      (        forth.asm):01616         * At this point X has the base address of the block we are interested in.
EAAF 3420             (        forth.asm):01617 (4+2)   @bselct pshs    y               Backup the target block number
EAB1 BDEA2A           (        forth.asm):01618 (7)             jsr     WBIFDRT         Write back if dirty. X and D are preserved
EAB4 8601             (        forth.asm):01619 (2)             lda     #BINUSE
EAB6 A7890401         (        forth.asm):01620 (4+3)           sta     BOFLAGS,x       Update the buffer's 'flags' field
EABA 3520             (        forth.asm):01621 (4+2)           puls    y               Restore the target block number
EABC 10AF890402       (        forth.asm):01622 (6+3)           sty     BOBLKNO,x       and update the 'blknum' field as well
EAC1 20D6             (        forth.asm):01623 (3)             bra     @retba
                      (        forth.asm):01624         
EAC3 05               (        forth.asm):01625         BLOCK   fcb     5               79-STANDARD (REQ191)
EAC4 424C4F434B       (        forth.asm):01626                 fcc     'BLOCK'         ( ublkno -- addr )
EAC9 EA77             (        forth.asm):01627                 fdb     BUFFER
                      (        forth.asm):01628                 RFCS
EACB 8DB3             (        forth.asm):01629                 RFXT    bsr,BUFFER+9    XT for BUFFER
                      (        forth.asm):01630         * Upon return Y has has the block number.
EACD 3710             (        forth.asm):01631                 UCNPOP                  Buffer base address to X
EACF 3410             (        forth.asm):01632 (4+2)           pshs    x               Push base buffer address as Arg1 to CF1BKRD
EAD1 A6890401         (        forth.asm):01633 (4+3)           lda     BOFLAGS,x       Retrieve buffer 'flags' field
                      (        forth.asm):01634                 IFNE    DEBUG
                      (        forth.asm):01635                 bita    #BINUSE
                      (        forth.asm):01636                 bne     @blkctd
                      (        forth.asm):01637                 lda     #10             Assertion failed
                      (        forth.asm):01638                 jsr     ERRHDLR         No return
                      (        forth.asm):01639                 ENDC                    DEBUG
EAD5 8402             (        forth.asm):01640 (2)     @blkctd anda    #BMAPPD         Has the block been read yet?
EAD7 2613             (        forth.asm):01641 (3)             bne     @bkmapd         Yes
EAD9 3420             (        forth.asm):01642 (4+2)           pshs    y               No. Push block number as arg0 to CF1BKRD
                      (        forth.asm):01643         * Map in the block from the CF device. System stack structure is as follows:
                      (        forth.asm):01644         * ,s has the target block number.
                      (        forth.asm):01645         * 2,s has the buffer base address.
EADB BDE9BA           (        forth.asm):01646 (7)             jsr     CF1BKRD
EADE 3262             (        forth.asm):01647 (4+1)           leas    2,s             Drop one cell from the system stack
                      (        forth.asm):01648         * Update the buffer's flags field.
EAE0 AEE4             (        forth.asm):01649 (5+0)           ldx     ,s              Base buffer address
EAE2 30890401         (        forth.asm):01650 (4+3)           leax    BOFLAGS,x       Buffer 'flags' field address to X
EAE6 A684             (        forth.asm):01651 (4+0)           lda     ,x              Read buffer 'flags' field
EAE8 8A02             (        forth.asm):01652 (2)             ora     #BMAPPD
EAEA A784             (        forth.asm):01653 (4+0)           sta     ,x              and mark it as read
EAEC 3510             (        forth.asm):01654 (4+2)   @bkmapd puls    x               Buffer base address to X
EAEE 3610             (        forth.asm):01655                 UCNPUSH
EAF0 39               (        forth.asm):01656 (4)             rts
                      (        forth.asm):01657         
EAF1 03               (        forth.asm):01658         BLK     fcb     3
EAF2 424C4B           (        forth.asm):01659                 fcc     'BLK'
EAF5 EAC3             (        forth.asm):01660                 fdb     BLOCK
                      (        forth.asm):01661                 RFCS
EAF7 8E012C           (        forth.asm):01662 (3)             ldx     #UBLK
EAFA 7EE80B           (        forth.asm):01663 (3)             jmp     NPUSH
                      (        forth.asm):01664         
EAFD 03               (        forth.asm):01665         TOIN    fcb     3               ANSI (Core)
EAFE 3E494E           (        forth.asm):01666                 fcc     '>IN'           ( -- a-addr )
EB01 EAF1             (        forth.asm):01667                 fdb     BLK
                      (        forth.asm):01668                 RFCS
EB03 8E012A           (        forth.asm):01669 (3)             ldx     #UTOIN
EB06 7EE80B           (        forth.asm):01670 (3)             jmp     NPUSH
                      (        forth.asm):01671         
EB09 03               (        forth.asm):01672         SCR     fcb     3
EB0A 534352           (        forth.asm):01673                 fcc     'SCR'
EB0D EAFD             (        forth.asm):01674                 fdb     TOIN
                      (        forth.asm):01675                 RFCS
EB0F 8E012E           (        forth.asm):01676 (3)             ldx     #USCR
EB12 7EE80B           (        forth.asm):01677 (3)             jmp     NPUSH
                      (        forth.asm):01678         
                      (        forth.asm):01679         * Functionally: : LINE 6 SHIFT SCR @ BLOCK + ;
                      (        forth.asm):01680         * Moved to CompactFlash screen #4.
                      (        forth.asm):01681         
                      (        forth.asm):01682         * Functionally:
                      (        forth.asm):01683         * : INDEX 1+ SWAP DO
                      (        forth.asm):01684         *     CR   I SCR !
                      (        forth.asm):01685         *     0 LINE 64 TYPE
                      (        forth.asm):01686         *   LOOP ;
                      (        forth.asm):01687         * Moved to CompactFlash screen #4.
                      (        forth.asm):01688         
EB15 05               (        forth.asm):01689         TICKS   fcb     5               Non-standard
EB16 5449434B53       (        forth.asm):01690                 fcc     'TICKS'         ( -- tickslow tickshigh )
EB1B EB09             (        forth.asm):01691                 fdb     SCR
                      (        forth.asm):01692                 RFCS
                      (        forth.asm):01693                 IFNE    RTCFEAT
                      (        forth.asm):01694                 pshs    cc
                      (        forth.asm):01695                 orcc    #FFLAG          Mask FIRQ while reading the double cell
                      (        forth.asm):01696                 ldx     TIKSLOW
                      (        forth.asm):01697                 ldy     TIKSHI
                      (        forth.asm):01698                 puls    cc              Restore the previous interrupt handling mode
                      (        forth.asm):01699                 jsr     NPUSH
                      (        forth.asm):01700                 tfr     y,x
                      (        forth.asm):01701                 ELSE
EB1D 1FC1             (        forth.asm):01702 (4)             tfr     0,x
EB1F BDE80B           (        forth.asm):01703 (7)             jsr     NPUSH
                      (        forth.asm):01704                 ENDC                    RTCFEAT
EB22 7EE80B           (        forth.asm):01705 (3)             jmp     NPUSH
                      (        forth.asm):01706         
EB25 04               (        forth.asm):01707         RTCFTCH fcb     4               Non-standard
EB26 52544340         (        forth.asm):01708                 fcc     'RTC@'          ( regoff -- byteval )
EB2A EB15             (        forth.asm):01709                 fdb     TICKS
                      (        forth.asm):01710                 RFCS
                      (        forth.asm):01711                 IFNE    RTCFEAT
                      (        forth.asm):01712                 tst     RTCAVL
                      (        forth.asm):01713                 beq     RTNOCON
                      (        forth.asm):01714         * An MC146818 RTC is present. Let's get down to business.
                      (        forth.asm):01715                 jsr     NPOP            REGOFF to X
                      (        forth.asm):01716                 tfr     x,d
                      (        forth.asm):01717                 tfr     b,a
                      (        forth.asm):01718                 jsr     RTREGRD
                      (        forth.asm):01719                 clra                    BYTEVAL to D
                      (        forth.asm):01720                 pshu    d               Unchecked NPUSH of D
                      (        forth.asm):01721                 rts
EB2C                  (        forth.asm):01722         RTNOCON ldb     #17             RTC not detected on bootup -> I/O error
                      (        forth.asm):01723                 jsr     ERRHDLR         No return
                      (        forth.asm):01724                 ELSE
EB2C BDFC5C           (        forth.asm):01725                 RFXT    jsr,DROP+7      XT for DROP
EB2F 1FC1             (        forth.asm):01726 (4)             tfr     0,x
EB31 7EE80B           (        forth.asm):01727 (3)             jmp     NPUSH
                      (        forth.asm):01728                 ENDC                    RTCFEAT
                      (        forth.asm):01729         
EB34 04               (        forth.asm):01730         RTCSTOR fcb     4               Non-standard
EB35 52544321         (        forth.asm):01731                 fcc     'RTC!'          ( byteval regoff -- )
EB39 EB25             (        forth.asm):01732                 fdb     RTCFTCH
                      (        forth.asm):01733                 RFCS
                      (        forth.asm):01734                 IFNE    RTCFEAT
                      (        forth.asm):01735                 tst     RTCAVL
                      (        forth.asm):01736                 beq     RTNOCON
                      (        forth.asm):01737                 jsr     MIN2PST         At least two cells need to be stacked up
                      (        forth.asm):01738                 lda     1,u             REGOFF to A
                      (        forth.asm):01739                 ldb     3,u             BYTEVAL to B
                      (        forth.asm):01740                 leau    4,u             Drop two cells from the data stack
                      (        forth.asm):01741                 jmp     RTREGWR
                      (        forth.asm):01742                 ELSE
EB3B 7EF48A           (        forth.asm):01743                 RFXT    jmp,TWODROP+8   XT for 2 DROP
                      (        forth.asm):01744                 ENDC                    RTCFEAT
                      (        forth.asm):01745         
EB3E 04               (        forth.asm):01746         LIST    fcb     4               79-STANDARD (REQ109)
EB3F 4C495354         (        forth.asm):01747                 fcc     'LIST'          ( ublkno -- )
EB43 EB34             (        forth.asm):01748                 fdb     RTCSTOR
                      (        forth.asm):01749                 RFCS
EB45 0D47             (        forth.asm):01750 (4)             tst     CFCARDP
EB47 2605             (        forth.asm):01751 (3)             bne     @cont
EB49 C611             (        forth.asm):01752 (2)             ldb     #17             IO error
EB4B BDE781           (        forth.asm):01753 (7)             jsr     ERRHDLR         No return
EB4E BDFC4D           (        forth.asm):01754         @cont   RFXT    jsr,DUP+6       XT for DUP
EB51 BDEACB           (        forth.asm):01755                 RFXT    jsr,BLOCK+8     XT for BLOCK
                      (        forth.asm):01756         * TOS now has the base buffer address.
EB54 BDE819           (        forth.asm):01757 (7)             jsr     NPOP
EB57 1F12             (        forth.asm):01758 (4)             tfr     x,y             Base buffer address to Y
EB59 BDE819           (        forth.asm):01759 (7)             jsr     NPOP            ublkno to X
EB5C 9F2E             (        forth.asm):01760 (4)             stx     USCR            Update SCR's value
EB5E C610             (        forth.asm):01761 (2)             ldb     #16             16 lines to go
EB60 3404             (        forth.asm):01762 (4+1)   @loop   pshs    b
EB62 BDE2ED           (        forth.asm):01763 (7)             jsr     PUTCR
EB65 1F21             (        forth.asm):01764 (4)             tfr     y,x
EB67 BDE80B           (        forth.asm):01765 (7)             jsr     NPUSH           Start address for TYPE
EB6A 8E0040           (        forth.asm):01766 (3)             ldx     #64
EB6D BDE80B           (        forth.asm):01767 (7)             jsr     NPUSH           Byte count for TYPE
EB70 103012           (        forth.asm):01768 (4)             addr    x,y
EB73 BDF735           (        forth.asm):01769                 RFXT    jsr,TYPE+7      XT for TYPE
EB76 3504             (        forth.asm):01770 (4+1)           puls    b
EB78 5A               (        forth.asm):01771 (1)             decb
EB79 26E5             (        forth.asm):01772 (3)             bne     @loop
EB7B 39               (        forth.asm):01773 (4)             rts
                      (        forth.asm):01774         
                      (        forth.asm):01775         * This is supposed to align HERE (DICEND), presumably on a cell boundary.
                      (        forth.asm):01776         * We have no such constraint on the 6309.
EB7C 05               (        forth.asm):01777         ALIGN   fcb     5               ANSI Core
EB7D 414C49474E       (        forth.asm):01778                 fcc     'ALIGN'         ( -- )
EB82 EB3E             (        forth.asm):01779                 fdb     LIST
                      (        forth.asm):01780                 RFCS
EB84 39               (        forth.asm):01781 (4)             rts
                      (        forth.asm):01782         
EB85 07               (        forth.asm):01783         ALIGND  fcb     7               ANSI Core
EB86 414C49474E4544   (        forth.asm):01784                 fcc     'ALIGNED'       ( addr -- a-addr )
EB8D EB7C             (        forth.asm):01785                 fdb     ALIGN
                      (        forth.asm):01786                 RFCS
EB8F 7EE4B4           (        forth.asm):01787 (3)             jmp     MIN1PST         At least one cell must be stacked up
                      (        forth.asm):01788         
EB92 05               (        forth.asm):01789         CHARP   fcb     5               ANSI Core
EB93 434841522B       (        forth.asm):01790                 fcc     'CHAR+'         ( c-addr1 -- c-addr2 )
EB98 EB85             (        forth.asm):01791                 fdb     ALIGND
                      (        forth.asm):01792                 RFCS
EB9A 7EF886           (        forth.asm):01793                 RFXT    jmp,ONEP+5      XT for 1+
                      (        forth.asm):01794         
                      (        forth.asm):01795         * n2 is the size in address units (bytes) of n1 characters. A NOOP.
EB9D 05               (        forth.asm):01796         CHARS   fcb     5               ANSI Core
EB9E 4348415253       (        forth.asm):01797                 fcc     'CHARS'         ( n1 -- n2 )
EBA3 EB92             (        forth.asm):01798                 fdb     CHARP
                      (        forth.asm):01799                 RFCS
EBA5 7EE4B4           (        forth.asm):01800 (3)             jmp     MIN1PST         At least one cell must be stacked up
                      (        forth.asm):01801         
                      (        forth.asm):01802         * Convert a single cell to a double. Non-transactional.
EBA8 03               (        forth.asm):01803         STOD    fcb     3               ANSI Core
EBA9 533E44           (        forth.asm):01804                 fcc     'S>D'           ( n -- d )
EBAC EB9D             (        forth.asm):01805                 fdb     CHARS
                      (        forth.asm):01806                 RFCS
EBAE BDE819           (        forth.asm):01807 (7)             jsr     NPOP            N to X
EBB1 3610             (        forth.asm):01808                 UCNPUSH                 Push back low order cell
EBB3 104F             (        forth.asm):01809 (2)             clrd                    High order cell: default to N >= 0
EBB5 1E01             (        forth.asm):01810 (5)             exg     d,x
EBB7 4D               (        forth.asm):01811 (1)             tsta
EBB8 102AFC4F         (        forth.asm):01812 (5)             lbpl    NPUSH
EBBC 301F             (        forth.asm):01813 (4+1)           leax    -1,x            N is < 0. Sign extension is required. -1 to X
EBBE 7EE80B           (        forth.asm):01814 (3)             jmp     NPUSH
                      (        forth.asm):01815         
EBC1 04               (        forth.asm):01816         NCLR    fcb     4               Non-standard
EBC2 4E434C52         (        forth.asm):01817                 fcc     'NCLR'          Clear the data (normal) stack
EBC6 EBA8             (        forth.asm):01818                 fdb     STOD
                      (        forth.asm):01819                 RFCS
EBC8 CE02F8           (        forth.asm):01820 (3)             ldu     #NSTBOT
EBCB 39               (        forth.asm):01821 (4)             rts
                      (        forth.asm):01822         
EBCC 04               (        forth.asm):01823         RCLR    fcb     4               Non-standard
EBCD 52434C52         (        forth.asm):01824                 fcc     'RCLR'          Clear the return stack
EBD1 EBC1             (        forth.asm):01825                 fdb     NCLR
                      (        forth.asm):01826                 RFCS
EBD3 8E0378           (        forth.asm):01827 (3)             ldx     #RSTBOT
EBD6 9F00             (        forth.asm):01828 (4)             stx     RSP
EBD8 0F37             (        forth.asm):01829 (5)             clr     RDEPTH
EBDA 39               (        forth.asm):01830 (4)             rts
                      (        forth.asm):01831         
EBDB 05               (        forth.asm):01832         DEPTH   fcb     5               ANSI (Core)
EBDC 4445505448       (        forth.asm):01833                 fcc     'DEPTH'         ( -- +n )
EBE1 EBCC             (        forth.asm):01834                 fdb     RCLR
                      (        forth.asm):01835                 RFCS
EBE3 CC02F8           (        forth.asm):01836 (3)             ldd     #NSTBOT         Bottom data stack address
EBE6 103230           (        forth.asm):01837 (4)             subr    u,d             D has the current value of the data stack ptr
EBE9 1044             (        forth.asm):01838 (2)             lsrd                    divided by 2
EBEB 1F01             (        forth.asm):01839 (4)             tfr     d,x
EBED 7EE80B           (        forth.asm):01840 (3)             jmp     NPUSH           X to N
                      (        forth.asm):01841         
EBF0 06               (        forth.asm):01842         CREATE  fcb     6               ANSI (Core)
EBF1 435245415445     (        forth.asm):01843                 fcc     'CREATE'        Comp: ( "<spaces>name" -- )
EBF7 EBDB             (        forth.asm):01844                 fdb     DEPTH           Exec: ( -- a-addr )
                      (        forth.asm):01845                 RFCS
EBF9 BDE536           (        forth.asm):01846 (7)             jsr     LOCWRT          Code entry point returned to Y
EBFC 868E             (        forth.asm):01847 (2)             lda     #LDXOPC         LDX immediate
EBFE A7A0             (        forth.asm):01848 (4+1)           sta     ,y+
EC00 1F21             (        forth.asm):01849 (4)             tfr     y,x
EC02 3008             (        forth.asm):01850 (4+1)           leax    8,x
EC04 AFA1             (        forth.asm):01851 (5+2)           stx     ,y++
EC06 86BD             (        forth.asm):01852 (2)             lda     #JSROPC         JSR extended
EC08 BDE5A5           (        forth.asm):01853 (7)             jsr     VARCON1         Compile JSR NPUSH
EC0B 8639             (        forth.asm):01854 (2)             lda     #RTSOPC         RTS inherent
EC0D A7A0             (        forth.asm):01855 (4+1)           sta     ,y+
EC0F 3122             (        forth.asm):01856 (4+1)           leay    2,y             Reserve room for a possible DOES> clause
EC11 109F08           (        forth.asm):01857 (5)     CREAT1  sty     DICEND
EC14 9E0C             (        forth.asm):01858 (4)             ldx     BDICEND         This is set by LOCWRT (was IY)
EC16 9F06             (        forth.asm):01859 (4)             stx     LSTWAD
EC18 39               (        forth.asm):01860 (4)             rts
                      (        forth.asm):01861         
EC19 C5               (        forth.asm):01862         DOES    fcb     $C5             ANSI (Core)
EC1A 444F45533E       (        forth.asm):01863                 fcc     'DOES>'
EC1F EBF0             (        forth.asm):01864                 fdb     CREATE
                      (        forth.asm):01865                 RFCS
EC21 8EEC27           (        forth.asm):01866 (3)             ldx     #DOESEX         JSR #DOESEX is compiled (no actual return)
EC24 7EE155           (        forth.asm):01867 (3)             jmp     EMXASXT         Set as action component
                      (        forth.asm):01868         
EC27 9E06             (        forth.asm):01869 (4)     DOESEX  ldx     LSTWAD          Header of the last dictionary entry
EC29 E680             (        forth.asm):01870 (4+1)           ldb     ,x+
EC2B C41F             (        forth.asm):01871 (2)             andb    #WRLNMSK        Extract word length
EC2D 3A               (        forth.asm):01872 (1)             abx
                      (        forth.asm):01873                 IFNE    RELFEAT
                      (        forth.asm):01874                 leax    9,x             2 bytes/backlink, 1/cksum, 6 bytes code offset
                      (        forth.asm):01875                 ELSE
EC2E 3008             (        forth.asm):01876 (4+1)           leax    8,x             2 bytes/backlink, 6 bytes code offset
                      (        forth.asm):01877                 ENDC                    RELFEAT
EC30 A684             (        forth.asm):01878 (4+0)           lda     ,x
EC32 8139             (        forth.asm):01879 (2)             cmpa    #RTSOPC         RTS inherent
EC34 2705             (        forth.asm):01880 (3)             beq     @dosex1
EC36 C60E             (        forth.asm):01881 (2)             ldb     #14             No matching CREATE
EC38 BDE781           (        forth.asm):01882 (7)             jsr     ERRHDLR         No return
EC3B 867E             (        forth.asm):01883 (2)     @dosex1 lda     #JMPOPC         JMP extended
EC3D A780             (        forth.asm):01884 (4+1)           sta     ,x+             Overwrite RTS opcode
EC3F 3520             (        forth.asm):01885 (4+2)           puls    y
EC41 10AF84           (        forth.asm):01886 (6+0)           sty     ,x
EC44 39               (        forth.asm):01887 (4)             rts
                      (        forth.asm):01888         
EC45 87               (        forth.asm):01889         LITERAL fcb     $87             ANSI (Core)
EC46 4C49544552414C   (        forth.asm):01890                 fcc     'LITERAL'       Comp: ( x -- )
EC4D EC19             (        forth.asm):01891                 fdb     DOES            Exec: ( -- x )
                      (        forth.asm):01892                 RFCS
EC4F BDE819           (        forth.asm):01893 (7)             jsr     NPOP
EC52 0D25             (        forth.asm):01894 (4)             tst     USTATE+1
EC54 2601             (        forth.asm):01895 (3)             bne     @comp
EC56 39               (        forth.asm):01896 (4)             rts                     The standard defines no semantics in interp mode
EC57 109E08           (        forth.asm):01897 (5)     @comp   ldy     DICEND
EC5A 868E             (        forth.asm):01898 (2)             lda     #LDXOPC         LDX immediate
EC5C BDE5A8           (        forth.asm):01899 (7)             jsr     VARCON2         Compile LDX #X
EC5F 109F08           (        forth.asm):01900 (5)             sty     DICEND          Update HERE
EC62 8EE80B           (        forth.asm):01901 (3)             ldx     #NPUSH
EC65 7EE155           (        forth.asm):01902 (3)             jmp     EMXASXT         Set NPUSH as action component
                      (        forth.asm):01903         
                      (        forth.asm):01904         * Functionally: : CONSTANT CREATE , DOES> @ ;
                      (        forth.asm):01905         * The following code produces more compact code.
EC68 08               (        forth.asm):01906         CONS    fcb     8               ANSI (Core)
EC69 434F4E5354414E54 (        forth.asm):01907                 fcc     'CONSTANT'      Comp: ( x "<spaces>name" -- )
EC71 EC45             (        forth.asm):01908                 fdb     LITERAL         Exec: ( -- x )
                      (        forth.asm):01909                 RFCS
EC73 BDE819           (        forth.asm):01910 (7)             jsr     NPOP
EC76 1F16             (        forth.asm):01911 (4)             tfr     x,w
EC78 BDE536           (        forth.asm):01912 (7)             jsr     LOCWRT          Create dictionary entry
EC7B 1F61             (        forth.asm):01913 (4)             tfr     w,x
EC7D 868E             (        forth.asm):01914 (2)             lda     #LDXOPC         ldx immediate
EC7F BDE5A8           (        forth.asm):01915 (7)             jsr     VARCON2         Compile LDX #CSTVAL
EC82 BDE5A3           (        forth.asm):01916 (7)             jsr     VARCON          Compile JMP NPUSH
                      (        forth.asm):01917                 IFNE    RELFEAT
                      (        forth.asm):01918                 bsr     CREAT1
                      (        forth.asm):01919                 RFXT    bra,MONITOR+10  XT for MONITOR
                      (        forth.asm):01920                 ELSE
EC85 208A             (        forth.asm):01921 (3)             bra     CREAT1
                      (        forth.asm):01922                 ENDC                    RELFEAT
                      (        forth.asm):01923         
                      (        forth.asm):01924         * Functionally: : VARIABLE CREATE 2 ALLOT ;
                      (        forth.asm):01925         * However we can save three bytes per instance with the following code.
EC87 08               (        forth.asm):01926         VARI    fcb     8               ANSI (Core)
EC88 5641524941424C45 (        forth.asm):01927                 fcc     'VARIABLE'      Comp: ( "<spaces>name" -- )
EC90 EC68             (        forth.asm):01928                 fdb     CONS            Exec: ( -- a-addr )
                      (        forth.asm):01929                 RFCS
EC92 BDE536           (        forth.asm):01930 (7)             jsr     LOCWRT
EC95 868E             (        forth.asm):01931 (2)             lda     #LDXOPC         ldx immediate
EC97 A7A0             (        forth.asm):01932 (4+1)           sta     ,y+
EC99 1F26             (        forth.asm):01933 (4)             tfr     y,w             Preserve Y (HERE)
EC9B 3125             (        forth.asm):01934 (4+1)           leay    5,y             Relative variable address
EC9D 1F21             (        forth.asm):01935 (4)             tfr     y,x
EC9F 1F62             (        forth.asm):01936 (4)             tfr     w,y             Restore Y (HERE)
ECA1 AFA1             (        forth.asm):01937 (5+2)           stx     ,y++            Address field for LDX #VARADDR
ECA3 BDE5A3           (        forth.asm):01938 (7)             jsr     VARCON          Compile JMP NPUSH
ECA6 3122             (        forth.asm):01939 (4+1)           leay    2,y             2 ALLOT
ECA8 7EEC11           (        forth.asm):01940 (3)             jmp     CREAT1
                      (        forth.asm):01941         
ECAB 09               (        forth.asm):01942         IMMED   fcb     9               ANSI (Core)
ECAC 494D4D4544494154 (        forth.asm):01943                 fcc     'IMMEDIATE'     ( -- )
     45
ECB5 EC87             (        forth.asm):01944                 fdb     VARI
                      (        forth.asm):01945                 RFCS
ECB7 C680             (        forth.asm):01946 (2)             ldb     #IMDFLM
ECB9 9E06             (        forth.asm):01947 (4)     IMMED1  ldx     LSTWAD
ECBB A684             (        forth.asm):01948 (4+0)           lda     ,x
ECBD 103598           (        forth.asm):01949 (4)             orr     b,a
ECC0 A784             (        forth.asm):01950 (4+0)           sta     ,x
ECC2 39               (        forth.asm):01951 (4)             rts
                      (        forth.asm):01952         
ECC3 08               (        forth.asm):01953         RSTRCT  fcb     8               Non-standard (GNU Forth)
ECC4 5245535452494354 (        forth.asm):01954                 fcc     'RESTRICT'      Make word available in compilation mode only
ECCC ECAB             (        forth.asm):01955                 fdb     IMMED
                      (        forth.asm):01956                 RFCS
ECCE C640             (        forth.asm):01957 (2)             ldb     #DEFFLM
ECD0 20E7             (        forth.asm):01958 (3)             bra     IMMED1
                      (        forth.asm):01959         
                      (        forth.asm):01960         * Added for better support of ANSI VALUEs.
ECD2 09               (        forth.asm):01961         UNMON   fcb     9
ECD3 554E4D4F4E49544F (        forth.asm):01962                 fcc     'UNMONITOR'     ( -- )
     52
ECDC ECDF             (        forth.asm):01963                 fdb     MONITOR
                      (        forth.asm):01964                 RFCS
                      (        forth.asm):01965                 IFNE    RELFEAT
                      (        forth.asm):01966                 clra
                      (        forth.asm):01967                 pshs    a
                      (        forth.asm):01968                 bra     MONIT1
                      (        forth.asm):01969                 ELSE
ECDE 39               (        forth.asm):01970 (4)             rts
                      (        forth.asm):01971                 ENDC                    RELFEAT
                      (        forth.asm):01972         
                      (        forth.asm):01973         * This non-standard word enables checkum monitoring by ICHECK for the
                      (        forth.asm):01974         * last defined word in the dictionary. : words are monitored by default
                      (        forth.asm):01975         * and so are constants. CREATEd words require an explicit invokation of
                      (        forth.asm):01976         * MONITOR if they are to be checked for integrity.
ECDF 07               (        forth.asm):01977         MONITOR fcb     7
ECE0 4D4F4E49544F52   (        forth.asm):01978                 fcc     'MONITOR'       ( -- )
ECE7 ECC3             (        forth.asm):01979                 fdb     RSTRCT
                      (        forth.asm):01980                 RFCS
                      (        forth.asm):01981                 IFNE    RELFEAT
                      (        forth.asm):01982                 lda     #1              Set MONFLM in the word 'flags' header field
                      (        forth.asm):01983                 pshs    a
ECE9                  (        forth.asm):01984         MONIT1  ldx     LSTWAD          Latest defined word header address
                      (        forth.asm):01985                 lda     ,x
                      (        forth.asm):01986                 tst     ,s              Should we set or clear MONFLM?
                      (        forth.asm):01987                 bne     @setflg
                      (        forth.asm):01988                 anda    #^MONFLM        Clear MONFLM in the word's attribute field
                      (        forth.asm):01989                 bra     @cont
ECE9                  (        forth.asm):01990         @setflg ora     #MONFLM         Set MONFLM in the word's attribute field
ECE9                  (        forth.asm):01991         @cont   sta     ,x
                      (        forth.asm):01992                 bsr     HDRSKIP         Skip the header (XT to X), clear A
                      (        forth.asm):01993                 ldy     DICEND          The upper code section limit (excluded)
                      (        forth.asm):01994                 bsr     HDRCSUM         Current word's definition's checksum to A
                      (        forth.asm):01995                 sta     -1,x            Store the computed checksum into the header
                      (        forth.asm):01996                 leas    1,s             Drop one byte from the system stack
                      (        forth.asm):01997                 ENDC                    RELFEAT
ECE9 39               (        forth.asm):01998 (4)             rts
                      (        forth.asm):01999         
                      (        forth.asm):02000                 IFNE    RELFEAT
                      (        forth.asm):02001         * On entry, X has a word's header address. On return X has the compilation
                      (        forth.asm):02002         * address for that word (XT). A is cleared so as to initialize the checksum.
ECEA                  (        forth.asm):02003         HDRSKIP lda     ,x              Word's header attribute byte to A
                      (        forth.asm):02004                 anda    #WRLNMSK        Extract the word's length
                      (        forth.asm):02005                 adda    #4              1B attribute, 2B backlink, 1B checksum
                      (        forth.asm):02006                 leax    a,x             X has the word's XT. -1,X has the orig checksum
                      (        forth.asm):02007                 clra
                      (        forth.asm):02008                 rts
                      (        forth.asm):02009         
                      (        forth.asm):02010         * On entry X has a word's compilation address (XT). A is supposed to have been
                      (        forth.asm):02011         * previously cleared. Y has the upper bound of the code section's address
                      (        forth.asm):02012         * (excluded). On return, A will have the word's code section's checksum.
                      (        forth.asm):02013         * X is preserved.
ECEA                  (        forth.asm):02014         HDRCSUM pshs    x
ECEA                  (        forth.asm):02015         @hdrcs1 eora    ,x+             Update the checksum
                      (        forth.asm):02016                 cmpr    x,y             Upper bound reached?
                      (        forth.asm):02017                 bne     @hdrcs1         No. Process next byte in word's code section
                      (        forth.asm):02018                 puls    x
                      (        forth.asm):02019                 rts
                      (        forth.asm):02020         
ECEA                  (        forth.asm):02021         CSUMFLM fcn     'integrity check failed'
                      (        forth.asm):02022                 ENDC                    RELFEAT
                      (        forth.asm):02023         
                      (        forth.asm):02024         * This non-standard word walks through the dictionary linked list and checks
                      (        forth.asm):02025         * that the words that have the MONFLM flag set in their header's attribute
                      (        forth.asm):02026         * field have a definition that still matches the checksum stored in the word's
                      (        forth.asm):02027         * header. This is meant to be used interactively, as a debugging tool, since
                      (        forth.asm):02028         * multitasking is not supported by this implementation. Therefore no status
                      (        forth.asm):02029         * value is returned. Feedback will only be provided for corrupted words, in
                      (        forth.asm):02030         * the form of a diagnostic message printed to the console.
ECEA 06               (        forth.asm):02031         ICHECK  fcb     6
ECEB 49434845434B     (        forth.asm):02032                 fcc     'ICHECK'        ( -- )
ECF1 ECD2             (        forth.asm):02033                 fdb     UNMON
                      (        forth.asm):02034                 RFCS
                      (        forth.asm):02035                 IFNE    RELFEAT
                      (        forth.asm):02036                 ldy     DICEND          Upper bound for the code of the last word (exc.)
                      (        forth.asm):02037                 ldx     LSTWAD          LAST points to the header of the last word
ECF3                  (        forth.asm):02038         @icklop pshs    x               Current word's header address
                      (        forth.asm):02039                 lda     ,x              Word's header attribute byte to A
                      (        forth.asm):02040                 bita    #MONFLM         Is this a monitored word?
                      (        forth.asm):02041                 beq     @icknxt         No. Point to the next word
                      (        forth.asm):02042                 bsr     HDRSKIP         Skip the header (XT to X), clear A
                      (        forth.asm):02043                 bsr     HDRCSUM         Current word's definition's checksum to A
                      (        forth.asm):02044                 cmpa    -1,x            Does the checksum match the compile time value?
                      (        forth.asm):02045                 beq     @icknxt         Yes. Point to the next word
                      (        forth.asm):02046         * Current word's definition has been modified since its original definition!
                      (        forth.asm):02047                 jsr     PUTCR
                      (        forth.asm):02048                 ldx     ,s              Current word's header address
                      (        forth.asm):02049                 ldb     ,x+
                      (        forth.asm):02050                 andb    #WRLNMSK
                      (        forth.asm):02051                 clra
                      (        forth.asm):02052                 jsr     NPUSH           Word's name base address
                      (        forth.asm):02053                 tfr     d,x
                      (        forth.asm):02054                 jsr     NPUSH           Byte count for TYPE
                      (        forth.asm):02055                 RFXT    jsr,TYPE+7      XT for TYPE
                      (        forth.asm):02056                 RFXT    jsr,SPACE+8     XT for SPACE
                      (        forth.asm):02057                 ldx     #CSUMFLM
                      (        forth.asm):02058                 jsr     PUTS            Feedback for checksum failure
ECF3                  (        forth.asm):02059         @icknxt puls    x               Current word's header address
                      (        forth.asm):02060                 tfr     x,y             Point to the end of the previous word's code
                      (        forth.asm):02061                 bsr     HDRSKIP         Skip the header (XT to X), clear A
                      (        forth.asm):02062                 ldx     -3,x            Point to the previous header via the backlink
                      (        forth.asm):02063                 beq     @ickdon         We've just reached the end of the dictionary
                      (        forth.asm):02064                 bra     @icklop
                      (        forth.asm):02065                 ENDC                    RELFEAT
ECF3 39               (        forth.asm):02066 (4)     @ickdon rts
                      (        forth.asm):02067         
                      (        forth.asm):02068         * : ?DO 0 rakeVar !
                      (        forth.asm):02069         *   POSTPONE do?DO
                      (        forth.asm):02070         *   HERE            \ leave ?DO-orig
                      (        forth.asm):02071         *   0 ,
                      (        forth.asm):02072         *   HERE            \ leave DO-dest
                      (        forth.asm):02073         *   bal+ ; IMMEDIATE RESTRICT
ECF4 C3               (        forth.asm):02074         QDO     fcb     $C3             ANSI (Core ext)
ECF5 3F444F           (        forth.asm):02075                 fcc     '?DO'           Comp: ( C: -- do-sys )
ECF8 ECEA             (        forth.asm):02076                 fdb     ICHECK          Exec: ( n1|u1 n2|u2 -- ) ( R: -- | loop-sys )
                      (        forth.asm):02077                 RFCS
ECFA 8EED1F           (        forth.asm):02078 (3)             ldx     #QDOEX
ECFD BDE155           (        forth.asm):02079 (7)             jsr     EMXASXT         Compile "JSR QDOEX"
                      (        forth.asm):02080         * The rest of this code looks very much like IF, except that 1 is not pushed
                      (        forth.asm):02081         * to the control flow stack to indicate an IF. This is done later on when
                      (        forth.asm):02082         * the RAKE code is executed by LOOP.
ED00 CC2603           (        forth.asm):02083 (3)             ldd     #BNEOPC
ED03 EDA1             (        forth.asm):02084 (5+2)           std     ,y++
ED05 867E             (        forth.asm):02085 (2)             lda     #JMPOPC
ED07 A7A0             (        forth.asm):02086 (4+1)           sta     ,y+
ED09 1F21             (        forth.asm):02087 (4)             tfr     y,x
ED0B BDE80B           (        forth.asm):02088 (7)             jsr     CSPUSH          ANS:do-sys/addr (?DO-orig) is HERE
ED0E 3122             (        forth.asm):02089 (4+1)           leay    2,y             2 ALLOT instead of 0 ,
ED10 109F08           (        forth.asm):02090 (5)             sty     DICEND
ED13 1F21             (        forth.asm):02091 (4)             tfr     y,x             ANS:do-sys/type (DO-dest) is HERE
ED15 BDE80B           (        forth.asm):02092 (7)             jsr     CSPUSH
ED18 104F             (        forth.asm):02093 (2)     QDO1    clrd
ED1A DD18             (        forth.asm):02094 (4)             std     RAKEVAR         Used for LEAVE forward references handling
ED1C 0C35             (        forth.asm):02095 (5)             inc     BALNCD
ED1E 39               (        forth.asm):02096 (4)             rts
                      (        forth.asm):02097         
ED1F BDE4B9           (        forth.asm):02098 (7)     QDOEX   jsr     MIN2PST
ED22 AE42             (        forth.asm):02099 (5+1)           ldx     2,u             Loop limit
ED24 10AEC4           (        forth.asm):02100 (6+0)           ldy     ,u              Loop index
ED27 3344             (        forth.asm):02101 (4+1)           leau    4,u             2DROP
ED29 103721           (        forth.asm):02102 (4)             cmpr    y,x
ED2C 270A             (        forth.asm):02103 (3)             beq     @skloop         Loop bypassed, return with ZFLAG set
ED2E BDE82B           (        forth.asm):02104 (7)             jsr     RPUSH           limit >R
ED31 1F21             (        forth.asm):02105 (4)             tfr     y,x
ED33 BDE82B           (        forth.asm):02106 (7)             jsr     RPUSH           index >R
ED36 1CFB             (        forth.asm):02107 (2)             andcc   #^ZFLAG         Clear ZFLAG
ED38 39               (        forth.asm):02108 (4)     @skloop rts
                      (        forth.asm):02109         
                      (        forth.asm):02110         * : DO 0 rakeVar !   0   POSTPONE doDO   HERE   bal+ ; IMMEDIATE RESTRICT
ED39 C2               (        forth.asm):02111         DO      fcb     $C2             ANSI (Core)
ED3A 444F             (        forth.asm):02112                 fcc     'DO'            Comp: ( C: -- do-sys )
ED3C ECF4             (        forth.asm):02113                 fdb     QDO             Exec: ( n1|u1 n2|u2 -- ) ( R: -- loop-sys )
                      (        forth.asm):02114                 RFCS
ED3E 8EED50           (        forth.asm):02115 (3)             ldx     #DOEX
ED41 BDE155           (        forth.asm):02116 (7)             jsr     EMXASXT         Compile "JSR DOEX"
ED44 1FC1             (        forth.asm):02117 (4)             tfr     0,x             ANS:do-sys/addr (?DO-orig) is 0 for DO
ED46 BDE80B           (        forth.asm):02118 (7)             jsr     CSPUSH
ED49 1F21             (        forth.asm):02119 (4)             tfr     y,x             ANS:do-sys/type (DO-dest) is HERE
ED4B BDE80B           (        forth.asm):02120 (7)             jsr     CSPUSH
ED4E 20C8             (        forth.asm):02121 (3)             bra     QDO1
                      (        forth.asm):02122         
ED50 BDFC66           (        forth.asm):02123         DOEX    RFXT    jsr,SWAP+7      XT for SWAP
ED53 BDF08B           (        forth.asm):02124                 RFXT    jsr,TOR+5       XT for >R (limit)
ED56 7EF08B           (        forth.asm):02125                 RFXT    jmp,TOR+5       XT for >R (index)
                      (        forth.asm):02126         
                      (        forth.asm):02127         * : LOOP POSTPONE doLOOP   rake ; IMMEDIATE RESTRICT
ED59 C4               (        forth.asm):02128         LOOP    fcb     $C4             ANSI (Core)
ED5A 4C4F4F50         (        forth.asm):02129                 fcc     'LOOP'          Comp: ( C: do-sys -- )
ED5E ED39             (        forth.asm):02130                 fdb     DO              Exec: ( -- ) ( R:  loop-sys1 --  | loop-sys2 )
                      (        forth.asm):02131                 RFCS
ED60 8EEDA0           (        forth.asm):02132 (3)             ldx     #LOOPEX
ED63 BDE155           (        forth.asm):02133 (7)     LOOP1   jsr     EMXASXT
ED66 8E2503           (        forth.asm):02134 (3)             ldx     #BCSOPC         Compile "BCS *+5"
ED69 AFA1             (        forth.asm):02135 (5+2)           stx     ,y++
ED6B BDE819           (        forth.asm):02136 (7)             jsr     CSPOP           ANS:do-sys/type (DO-dest): loop begin. addr.
ED6E 867E             (        forth.asm):02137 (2)             lda     #JMPOPC
ED70 BDE5A8           (        forth.asm):02138 (7)             jsr     VARCON2         Compile "JMP DO-dest"
ED73 109F08           (        forth.asm):02139 (5)             sty     DICEND
ED76 109F16           (        forth.asm):02140 (5)             sty     FWDREF          Last recorded forward reference
                      (        forth.asm):02141         * RAKE: Y has HERE, which all (if any) LEAVE forward references
                      (        forth.asm):02142         * should resolve to.
ED79 9E18             (        forth.asm):02143 (4)             ldx     RAKEVAR
ED7B 270B             (        forth.asm):02144 (3)     @lopres beq     @lopdon
ED7D EC84             (        forth.asm):02145 (5+0)           ldd     ,x              D has the next forward reference
ED7F 10AF84           (        forth.asm):02146 (6+0)           sty     ,x              Resolve LEAVE forward reference
ED82 1F01             (        forth.asm):02147 (4)             tfr     d,x
ED84 104D             (        forth.asm):02148 (2)             tstd
ED86 20F3             (        forth.asm):02149 (3)             bra     @lopres
ED88 DD18             (        forth.asm):02150 (4)     @lopdon std     RAKEVAR
ED8A 0A35             (        forth.asm):02151 (5)             dec     BALNCD
ED8C BDE819           (        forth.asm):02152 (7)             jsr     CSPOP           ANS:do-sys/addr (?DO-orig) to X
ED8F 2601             (        forth.asm):02153 (3)             bne     @endqdo         If NZ push it back, push type 1 and call THEN
ED91 39               (        forth.asm):02154 (4)             rts
                      (        forth.asm):02155         * End a ?DO construct with an implicit THEN.
ED92 0C35             (        forth.asm):02156 (5)     @endqdo inc     BALNCD
ED94 BDE80B           (        forth.asm):02157 (7)             jsr     CSPUSH          Push back IF jump address 
ED97 8E0001           (        forth.asm):02158 (3)             ldx     #1
ED9A BDE80B           (        forth.asm):02159 (7)             jsr     CSPUSH          to the control flow stack with type 1 (IF)
ED9D 7EEE46           (        forth.asm):02160                 RFXT    jmp,THEN+7
                      (        forth.asm):02161         
EDA0 8E0001           (        forth.asm):02162 (3)     LOOPEX  ldx     #1
EDA3 2010             (        forth.asm):02163 (3)             bra     PLOPEX1
                      (        forth.asm):02164         
EDA5 C5               (        forth.asm):02165         PLOOP   fcb     $C5             ANSI (Core)
EDA6 2B4C4F4F50       (        forth.asm):02166                 fcc     '+LOOP'         Comp: ( C: do-sys -- )
EDAB ED59             (        forth.asm):02167                 fdb     LOOP            Exec: ( n -- ) ( R: loop-sys1 -- | loop-sys2 )
                      (        forth.asm):02168                 RFCS
EDAD 8EEDB2           (        forth.asm):02169 (3)             ldx     #PLOOPEX
EDB0 20B1             (        forth.asm):02170 (3)             bra     LOOP1
                      (        forth.asm):02171         
                      (        forth.asm):02172         * Anton Ertl's forth-standard.org notes on +LOOP (2019-05-21 05:54:21):
                      (        forth.asm):02173         * "Note that the loop control parameters can be either signed or unsigned,
                      (        forth.asm):02174         * and +LOOP has to work for both. For systems with 2s-complement representation
                      (        forth.asm):02175         * for signed numbers, the way to go is to use circular arithmetic: compute
                      (        forth.asm):02176         * x=(index-limit)+minint, and observe if the addition x+n crosses the boundary
                      (        forth.asm):02177         * between minint and maxint. Many architectures report this through the
                      (        forth.asm):02178         * overflow flag."
                      (        forth.asm):02179         * Here we do precisely what the good Doktor says, setting the carry flag on
                      (        forth.asm):02180         * overflow detection.
EDB2 BDE819           (        forth.asm):02181 (7)     PLOOPEX jsr     NPOP
EDB5 1F16             (        forth.asm):02182 (4)     PLOPEX1 tfr     x,w             Increment to W
EDB7 BDE847           (        forth.asm):02183 (7)             jsr     RPOP
EDBA 1F12             (        forth.asm):02184 (4)             tfr     x,y             Index to Y
EDBC BDE847           (        forth.asm):02185 (7)             jsr     RPOP            Limit to X
EDBF CC8000           (        forth.asm):02186 (3)             ldd     #$8000          Minimum integer on a 2 byte cell system
EDC2 103020           (        forth.asm):02187 (4)             addr    y,d             add the index
EDC5 103210           (        forth.asm):02188 (4)             subr    x,d             substract the limit
EDC8 103060           (        forth.asm):02189 (4)             addr    w,d             add the increment and check for overflow
EDCB 290E             (        forth.asm):02190 (3)             bvs     @limrcd         Limit reached
EDCD BDE82B           (        forth.asm):02191 (7)             jsr     RPUSH           Limit to the return stack
EDD0 103062           (        forth.asm):02192 (4)             addr    w,y             Update the index
EDD3 1F21             (        forth.asm):02193 (4)             tfr     y,x
EDD5 BDE82B           (        forth.asm):02194 (7)             jsr     RPUSH           Updated index to the return stack
EDD8 1CFE             (        forth.asm):02195 (2)             andcc   #^CFLAG         Clear CFLAG
EDDA 39               (        forth.asm):02196 (4)             rts
EDDB 1A01             (        forth.asm):02197 (2)     @limrcd orcc    #CFLAG          Set CFLAG
EDDD 39               (        forth.asm):02198 (4)             rts
                      (        forth.asm):02199         
EDDE 46               (        forth.asm):02200         UNLOOP  fcb     $46             ANSI (Core)
EDDF 554E4C4F4F50     (        forth.asm):02201                 fcc     'UNLOOP'        ( -- ) ( R: loop-sys -- )
EDE5 EDA5             (        forth.asm):02202                 fdb     PLOOP
                      (        forth.asm):02203                 RFCS
EDE7 BDE847           (        forth.asm):02204 (7)             jsr     RPOP            Drop the index from the return stack
EDEA 7EE847           (        forth.asm):02205 (3)             jmp     RPOP            and the loop limit as well
                      (        forth.asm):02206         
                      (        forth.asm):02207         * Prototyping code below:
                      (        forth.asm):02208         *
                      (        forth.asm):02209         * VARIABLE bal   0 bal !
                      (        forth.asm):02210         * : bal+ 1 bal +! ;
                      (        forth.asm):02211         * : bal- -1 bal +! ;
                      (        forth.asm):02212         * : branch jmpopc C, ; RESTRICT
                      (        forth.asm):02213         * : 0branch jsropc C, npop ,
                      (        forth.asm):02214         *   bneopc ,
                      (        forth.asm):02215         *   branch ; RESTRICT
                      (        forth.asm):02216         * : AHEAD branch HERE 0 ,  \ 0 is an unresolved forward reference
                      (        forth.asm):02217         *   bal+ 1 ; IMMEDIATE RESTRICT
EDED C5               (        forth.asm):02218         AHEAD   fcb     $C5             ANSI (Tools ext)
EDEE 4148454144       (        forth.asm):02219                 fcc     'AHEAD'         Comp: ( C: -- orig )
EDF3 EDDE             (        forth.asm):02220                 fdb     UNLOOP          Exec: ( -- )
                      (        forth.asm):02221                 RFCS
EDF5 109E08           (        forth.asm):02222 (5)             ldy     DICEND
EDF8 867E             (        forth.asm):02223 (2)     AHEAD1  lda     #JMPOPC
EDFA A7A0             (        forth.asm):02224 (4+1)           sta     ,y+
EDFC 1F21             (        forth.asm):02225 (4)             tfr     y,x             Jump address location (ANS:orig/addr) to X
EDFE 3122             (        forth.asm):02226 (4+1)           leay    2,y
EE00 109F08           (        forth.asm):02227 (5)             sty     DICEND          2 ALLOT (instead of 0 ,)
EE03 0C35             (        forth.asm):02228 (5)             inc     BALNCD
EE05 BDE80B           (        forth.asm):02229 (7)             jsr     CSPUSH          ANS:orig/addr to the control flow stack
EE08 8E0001           (        forth.asm):02230 (3)             ldx     #1              ANS:orig/type is 1
EE0B 7EE80B           (        forth.asm):02231 (3)             jmp     CSPUSH
                      (        forth.asm):02232         
                      (        forth.asm):02233         * : IF 0branch HERE 0 ,  \ 0 is an unresolved forward reference
                      (        forth.asm):02234         *   bal+ 1 ; IMMEDIATE RESTRICT
EE0E C2               (        forth.asm):02235         IF      fcb     $C2             ANSI (Core)
EE0F 4946             (        forth.asm):02236                 fcc     'IF'            Comp: ( C: -- orig )
EE11 EDED             (        forth.asm):02237                 fdb     AHEAD           Exec: ( x -- )
                      (        forth.asm):02238                 RFCS
EE13 8EE819           (        forth.asm):02239 (3)             ldx     #NPOP
EE16 BDE155           (        forth.asm):02240 (7)             jsr     EMXASXT         Compile "JSR NPOP"
EE19 CC2603           (        forth.asm):02241 (3)             ldd     #BNEOPC
EE1C EDA1             (        forth.asm):02242 (5+2)           std     ,y++            Compile "BNE *+5"
EE1E 20D8             (        forth.asm):02243 (3)             bra     AHEAD1
                      (        forth.asm):02244         
                      (        forth.asm):02245         * Functionally equivalent to:
                      (        forth.asm):02246         * : UNLESS POSTPONE 0= POSTPONE IF ; IMMEDIATE RESTRICT
EE20 C6               (        forth.asm):02247         UNLESS  fcb     $C6             Non-standard (Perl inspired)
EE21 554E4C455353     (        forth.asm):02248                 fcc     'UNLESS'
EE27 EE0E             (        forth.asm):02249                 fdb     IF
                      (        forth.asm):02250                 RFCS
EE29 8EEF31           (        forth.asm):02251                 RFXT    ldx,#NULP+5     XT for 0=
EE2C BDE155           (        forth.asm):02252 (7)             jsr     EMXASXT
EE2F 20E2             (        forth.asm):02253                 RFXT    bra,IF+5        XT for IF
                      (        forth.asm):02254         
                      (        forth.asm):02255         * : ELSE POSTPONE AHEAD 2SWAP POSTPONE THEN ; IMMEDIATE RESTRICT
EE31 C4               (        forth.asm):02256         ELSE    fcb     $C4             ANSI (Core)
EE32 454C5345         (        forth.asm):02257                 fcc     'ELSE'          Comp: ( C: orig1 -- orig2 )
EE36 EE20             (        forth.asm):02258                 fdb     UNLESS          Exec: ( -- )
                      (        forth.asm):02259                 RFCS
EE38 8DBB             (        forth.asm):02260                 RFXT    bsr,AHEAD+8
EE3A BDF46E           (        forth.asm):02261                 RFXT    jsr,TWOSWAP+8   This should be read as "1 CS-ROLL"
EE3D 2007             (        forth.asm):02262                 RFXT    bra,THEN+7
                      (        forth.asm):02263         
                      (        forth.asm):02264         * : THEN 1- ABORT" Unbalanced IF/ELSE/THEN construct"
                      (        forth.asm):02265         *   HERE SWAP ! bal-
                      (        forth.asm):02266         *   HERE fwdref ! ; IMMEDIATE RESTRICT
EE3F C4               (        forth.asm):02267         THEN    fcb     $C4             ANSI (Core)
EE40 5448454E         (        forth.asm):02268                 fcc     'THEN'          Comp: ( C: orig -- )
EE44 EE31             (        forth.asm):02269                 fdb     ELSE            Exec: ( -- )
                      (        forth.asm):02270                 RFCS
EE46 BDE819           (        forth.asm):02271 (7)             jsr     CSPOP           ANS:orig/type to X
EE49 301F             (        forth.asm):02272 (4+1)           leax    -1,x
EE4B 1026FA16         (        forth.asm):02273 (5)             lbne    BALERR          Illegal construct, type must be 1
EE4F 109E08           (        forth.asm):02274 (5)             ldy     DICEND
EE52 BDE819           (        forth.asm):02275 (7)             jsr     CSPOP           ANS:orig/addr to X
EE55 10AF84           (        forth.asm):02276 (6+0)           sty     ,x              Resolve forward reference to HERE
EE58 109F16           (        forth.asm):02277 (5)             sty     FWDREF          Last recorded forward reference
EE5B 0A35             (        forth.asm):02278 (5)             dec     BALNCD
EE5D 39               (        forth.asm):02279 (4)             rts
                      (        forth.asm):02280         
EE5E 01               (        forth.asm):02281         EQ      fcb     1               ANSI (Core)
EE5F 3D               (        forth.asm):02282                 fcc     '='             ( x1 x2 -- flag )
EE60 EE3F             (        forth.asm):02283                 fdb     THEN
                      (        forth.asm):02284                 RFCS
EE62 BDE4B9           (        forth.asm):02285 (7)             jsr     MIN2PST         At least two cells need to be stacked up
EE65 10ECC4           (        forth.asm):02286 (8+0)           ldq     ,u              D:W has X2:X1
EE68 3342             (        forth.asm):02287 (4+1)           leau    2,u             Drop one cell from the user stack
EE6A 1FC1             (        forth.asm):02288 (4)             tfr     0,x
EE6C 103760           (        forth.asm):02289 (4)             cmpr    w,d
EE6F 2602             (        forth.asm):02290 (3)             bne     @eq1
EE71 301F             (        forth.asm):02291 (4+1)           leax    -1,x            Return the ANSI true
EE73 AFC4             (        forth.asm):02292 (5+0)   @eq1    stx     ,u              Store in place to FLAG
EE75 39               (        forth.asm):02293 (4)             rts
                      (        forth.asm):02294         
EE76 02               (        forth.asm):02295         DIFF    fcb     2               79-STANDARD (REF)
EE77 3C3E             (        forth.asm):02296                 fcc     '<>'            ( N1 N2 -- FLAG )
EE79 EE5E             (        forth.asm):02297                 fdb     EQ
                      (        forth.asm):02298                 RFCS
EE7B BDE4B9           (        forth.asm):02299 (7)             jsr     MIN2PST         At least two cells need to be stacked up
EE7E 10ECC4           (        forth.asm):02300 (8+0)           ldq     ,u              D:W has N2:N1
EE81 3342             (        forth.asm):02301 (4+1)           leau    2,u             Drop one cell from the user stack
EE83 1FC1             (        forth.asm):02302 (4)             tfr     0,x
EE85 103760           (        forth.asm):02303 (4)             cmpr    w,d
EE88 2702             (        forth.asm):02304 (3)             beq     @diff1
EE8A 301F             (        forth.asm):02305 (4+1)           leax    -1,x            Return the ANSI true
EE8C AFC4             (        forth.asm):02306 (5+0)   @diff1  stx     ,u              Store in place to FLAG
EE8E 39               (        forth.asm):02307 (4)             rts
                      (        forth.asm):02308         
EE8F 02               (        forth.asm):02309         SINFEQ  fcb     2               Non-standard (Not even ANSI!)
EE90 3C3D             (        forth.asm):02310                 fcc     '<='            Required for the ORNL fixed sieve benchmark
EE92 EE76             (        forth.asm):02311                 fdb     DIFF
                      (        forth.asm):02312                 RFCS
EE94 BDE4B9           (        forth.asm):02313 (7)             jsr     MIN2PST         At least two cells need to be stacked up
EE97 10AEC4           (        forth.asm):02314 (6+0)           ldy     ,u
EE9A AE42             (        forth.asm):02315 (5+1)           ldx     2,u
EE9C 104F             (        forth.asm):02316 (2)             clrd
EE9E 103721           (        forth.asm):02317 (4)             cmpr    y,x
EEA1 2E02             (        forth.asm):02318 (3)             bgt     @sinfq1
EEA3 104A             (        forth.asm):02319 (2)             decd                    Return the ANSI true
EEA5 3342             (        forth.asm):02320 (4+1)   @sinfq1 leau    2,u             Drop one cell
EEA7 EDC4             (        forth.asm):02321 (5+0)           std     ,u
EEA9 39               (        forth.asm):02322 (4)             rts
                      (        forth.asm):02323         
                      (        forth.asm):02324                 IFNE    DEBUG
EEAA                  (        forth.asm):02325         CC      fcb     2               Non-standard. Used for debugging
                      (        forth.asm):02326                 fcc     'CC'
                      (        forth.asm):02327                 fdb     SINFEQ
                      (        forth.asm):02328                 RFCS
                      (        forth.asm):02329                 ldx     CCREG
                      (        forth.asm):02330                 jmp     NPUSH
                      (        forth.asm):02331                 ENDC                    DEBUG
                      (        forth.asm):02332         
EEAA 03               (        forth.asm):02333         XOR     fcb     3               ANSI (Core)
EEAB 584F52           (        forth.asm):02334                 fcc     'XOR'           ( x1 x2 -- x3 )
                      (        forth.asm):02335                 IFNE    DEBUG
                      (        forth.asm):02336                 fdb     CC
                      (        forth.asm):02337                 ELSE
EEAE EE8F             (        forth.asm):02338                 fdb     SINFEQ
                      (        forth.asm):02339                 ENDC                    DEBUG
                      (        forth.asm):02340                 RFCS
EEB0 BDE4B9           (        forth.asm):02341 (7)             jsr     MIN2PST         At least two cells need to be stacked up
EEB3 ECC4             (        forth.asm):02342 (5+0)           ldd     ,u              X2 to D
EEB5 10A642           (        forth.asm):02343 (6+1)           ldw     2,u             X1 to W
EEB8 103660           (        forth.asm):02344 (4)             eorr    w,d
EEBB 3342             (        forth.asm):02345 (4+1)   XOR1    leau    2,u
EEBD EDC4             (        forth.asm):02346 (5+0)           std     ,u              X1 ^ X2 to X3
EEBF 39               (        forth.asm):02347 (4)             rts
                      (        forth.asm):02348         
EEC0 02               (        forth.asm):02349         OR      fcb     2               ANSI (Core)
EEC1 4F52             (        forth.asm):02350                 fcc     'OR'            ( x1 x2 -- x3 )
EEC3 EEAA             (        forth.asm):02351                 fdb     XOR
                      (        forth.asm):02352                 RFCS
EEC5 BDE4B9           (        forth.asm):02353 (7)             jsr     MIN2PST         At least two cells need to be stacked up
EEC8 ECC4             (        forth.asm):02354 (5+0)           ldd     ,u              X2 to D
EECA 10A642           (        forth.asm):02355 (6+1)           ldw     2,u             X1 to W
EECD 103560           (        forth.asm):02356 (4)             orr     w,d
EED0 20E9             (        forth.asm):02357 (3)             bra     XOR1            X1 | X2 to X3
                      (        forth.asm):02358         
EED2 03               (        forth.asm):02359         AND     fcb     3               ANSI (Core)
EED3 414E44           (        forth.asm):02360                 fcc     'AND'           ( x1 x2 -- x3 )
EED6 EEC0             (        forth.asm):02361                 fdb     OR
                      (        forth.asm):02362                 RFCS
EED8 BDE4B9           (        forth.asm):02363 (7)             jsr     MIN2PST         At least two cells need to be stacked up
EEDB ECC4             (        forth.asm):02364 (5+0)           ldd     ,u              X2 to D
EEDD 10A642           (        forth.asm):02365 (6+1)           ldw     2,u             X1 to W
EEE0 103460           (        forth.asm):02366 (4)             andr    w,d
EEE3 20D6             (        forth.asm):02367 (3)             bra     XOR1            X1 & X2 to X3
                      (        forth.asm):02368         
EEE5 06               (        forth.asm):02369         INVERT  fcb     6               ANSI (Core)
EEE6 494E56455254     (        forth.asm):02370                 fcc     'INVERT'        ( x1 -- x2 )
EEEC EED2             (        forth.asm):02371                 fdb     AND
                      (        forth.asm):02372                 RFCS
EEEE BDE819           (        forth.asm):02373 (7)             jsr     NPOP            X1 to X
EEF1 1F10             (        forth.asm):02374 (4)             tfr     x,d
EEF3 1043             (        forth.asm):02375 (2)             comd
EEF5 1F01             (        forth.asm):02376 (4)             tfr     d,x             X2 to X
EEF7 3610             (        forth.asm):02377                 UCNPUSH                 and to the data stack
EEF9 39               (        forth.asm):02378 (4)             rts
                      (        forth.asm):02379         
EEFA 02               (        forth.asm):02380         ZGREAT  fcb     2               79-STANDARD (REQ118)
EEFB 303E             (        forth.asm):02381                 fcc     '0>'
EEFD EEE5             (        forth.asm):02382                 fdb     INVERT
                      (        forth.asm):02383                 RFCS
EEFF BDE819           (        forth.asm):02384 (7)             jsr     NPOP
EF02 1F10             (        forth.asm):02385 (4)             tfr     x,d
EF04 104D             (        forth.asm):02386 (2)             tstd
EF06 2F06             (        forth.asm):02387 (3)             ble     @zgrt1
EF08 8EFFFF           (        forth.asm):02388 (3)             ldx     #-1             Return the ANSI true
EF0B 3610             (        forth.asm):02389                 UCNPUSH
EF0D 39               (        forth.asm):02390 (4)             rts
EF0E 1FC1             (        forth.asm):02391 (4)     @zgrt1  tfr     0,x
EF10 3610             (        forth.asm):02392                 UCNPUSH
EF12 39               (        forth.asm):02393 (4)             rts
                      (        forth.asm):02394         
EF13 02               (        forth.asm):02395         ZLESS   fcb     2               ANSI (Core)
EF14 303C             (        forth.asm):02396                 fcc     '0<'            ( n -- flag )
EF16 EEFA             (        forth.asm):02397                 fdb     ZGREAT
                      (        forth.asm):02398                 RFCS
EF18 BDE819           (        forth.asm):02399 (7)             jsr     NPOP
EF1B 1F10             (        forth.asm):02400 (4)             tfr     x,d
EF1D 104D             (        forth.asm):02401 (2)             tstd
EF1F 2C06             (        forth.asm):02402 (3)             bge     @zlss1
EF21 8EFFFF           (        forth.asm):02403 (3)             ldx     #-1             Return the ANSI true
EF24 3610             (        forth.asm):02404                 UCNPUSH
EF26 39               (        forth.asm):02405 (4)             rts
EF27 1FC1             (        forth.asm):02406 (4)     @zlss1  tfr     0,x
EF29 3610             (        forth.asm):02407                 UCNPUSH
EF2B 39               (        forth.asm):02408 (4)             rts
                      (        forth.asm):02409         
EF2C 02               (        forth.asm):02410         NULP    fcb     2               ANSI (Core)
EF2D 303D             (        forth.asm):02411                 fcc     '0='            ( x -- flag )
EF2F EF13             (        forth.asm):02412                 fdb     ZLESS
                      (        forth.asm):02413                 RFCS
EF31 BDE819           (        forth.asm):02414 (7)             jsr     NPOP
EF34 1F10             (        forth.asm):02415 (4)             tfr     x,d
EF36 1FC1             (        forth.asm):02416 (4)             tfr     0,x
EF38 104D             (        forth.asm):02417 (2)             tstd
EF3A 2703             (        forth.asm):02418 (3)             beq     @nulp2
EF3C 3610             (        forth.asm):02419         @nulp1  UCNPUSH
EF3E 39               (        forth.asm):02420 (4)             rts
EF3F 301F             (        forth.asm):02421 (4+1)   @nulp2  leax    -1,x            Return the ANSI true
EF41 20F9             (        forth.asm):02422 (3)             bra     @nulp1
                      (        forth.asm):02423         
EF43 03               (        forth.asm):02424         ZNEQ    fcb     3               ANSI (Core ext)
EF44 303C3E           (        forth.asm):02425                 fcc     '0<>'
EF47 EF2C             (        forth.asm):02426                 fdb     NULP
                      (        forth.asm):02427                 RFCS
EF49 8DE6             (        forth.asm):02428                 RFXT    bsr,NULP+5
EF4B 20A1             (        forth.asm):02429                 RFXT    bra,INVERT+9
                      (        forth.asm):02430         
                      (        forth.asm):02431         * Maybe this one should go. It is not specified in the ANS94 reference
                      (        forth.asm):02432         * document but Conklin/Rather have it as "common usage."
EF4D 03               (        forth.asm):02433         NOT     fcb     3               79-STANDARD (REQ165)
EF4E 4E4F54           (        forth.asm):02434                 fcc     'NOT'
EF51 EF43             (        forth.asm):02435                 fdb     ZNEQ
                      (        forth.asm):02436                 RFCS
EF53 20DC             (        forth.asm):02437                 RFXT    bra,NULP+5      XT for 0=
                      (        forth.asm):02438         
EF55 02               (        forth.asm):02439         USUP    fcb     2               ANSI (Core Ext)
EF56 553E             (        forth.asm):02440                 fcc     'U>'
EF58 EF4D             (        forth.asm):02441                 fdb     NOT
                      (        forth.asm):02442                 RFCS
EF5A BDE5AD           (        forth.asm):02443 (7)             jsr     CMP2
EF5D 2302             (        forth.asm):02444 (3)             bls     @usup1
EF5F 301F             (        forth.asm):02445 (4+1)           leax    -1,x            Return the ANSI true
EF61 3610             (        forth.asm):02446         @usup1  UCNPUSH
EF63 39               (        forth.asm):02447 (4)             rts
                      (        forth.asm):02448         
EF64 02               (        forth.asm):02449         UINF    fcb     2               ANSI (Core)
EF65 553C             (        forth.asm):02450                 fcc     'U<'            ( u1 u2 -- flag )
EF67 EF55             (        forth.asm):02451                 fdb     USUP
                      (        forth.asm):02452                 RFCS
EF69 BDE5AD           (        forth.asm):02453 (7)             jsr     CMP2
EF6C 2402             (        forth.asm):02454 (3)             bhs     @uinf1          Z is set
EF6E 301F             (        forth.asm):02455 (4+1)           leax    -1,x            Return the ANSI true
EF70 3610             (        forth.asm):02456         @uinf1  UCNPUSH
EF72 39               (        forth.asm):02457 (4)             rts
                      (        forth.asm):02458         
EF73 01               (        forth.asm):02459         SUP     fcb     1               ANSI (Core)
EF74 3E               (        forth.asm):02460                 fcc     '>'             ( n1 n2 -- flag )
EF75 EF64             (        forth.asm):02461                 fdb     UINF
                      (        forth.asm):02462                 RFCS
EF77 BDE5AD           (        forth.asm):02463 (7)             jsr     CMP2
EF7A 2F02             (        forth.asm):02464 (3)             ble     @sup1
EF7C 301F             (        forth.asm):02465 (4+1)           leax    -1,x            Return the ANSI true
EF7E 3610             (        forth.asm):02466         @sup1   UCNPUSH
EF80 39               (        forth.asm):02467 (4)             rts
                      (        forth.asm):02468         
EF81 01               (        forth.asm):02469         INF     fcb     1               ANSI (Core)
EF82 3C               (        forth.asm):02470                 fcc     '<'             ( n1 n2 -- flag )
EF83 EF73             (        forth.asm):02471                 fdb     SUP
                      (        forth.asm):02472                 RFCS
EF85 BDE5AD           (        forth.asm):02473 (7)             jsr     CMP2
EF88 2C02             (        forth.asm):02474 (3)             bge     @inf1
EF8A 301F             (        forth.asm):02475 (4+1)           leax    -1,x            Return the ANSI true
EF8C 3610             (        forth.asm):02476         @inf1   UCNPUSH
EF8E 39               (        forth.asm):02477 (4)             rts
                      (        forth.asm):02478         
EF8F 03               (        forth.asm):02479         MAX     fcb     3               ANSI (Core)
EF90 4D4158           (        forth.asm):02480                 fcc     'MAX'           ( n1 n2 -- n3 )
EF93 EF81             (        forth.asm):02481                 fdb     INF
                      (        forth.asm):02482                 RFCS
EF95 BDE819           (        forth.asm):02483 (7)             jsr     NPOP
EF98 1F12             (        forth.asm):02484 (4)             tfr     x,y             N2 to Y
EF9A BDE819           (        forth.asm):02485 (7)             jsr     NPOP            N1 to X
EF9D 103721           (        forth.asm):02486 (4)             cmpr    y,x
EFA0 2C02             (        forth.asm):02487 (3)             bge     @pshrv1
EFA2 1F21             (        forth.asm):02488 (4)             tfr     y,x
EFA4 3610             (        forth.asm):02489         @pshrv1 UCNPUSH                 (X) N3 to the data stack
EFA6 39               (        forth.asm):02490 (4)             rts
                      (        forth.asm):02491         
EFA7 03               (        forth.asm):02492         MIN     fcb     3               ANSI (Core)
EFA8 4D494E           (        forth.asm):02493                 fcc     'MIN'           ( n1 n2 -- n3 )
EFAB EF8F             (        forth.asm):02494                 fdb     MAX
                      (        forth.asm):02495                 RFCS
EFAD BDE819           (        forth.asm):02496 (7)             jsr     NPOP
EFB0 1F12             (        forth.asm):02497 (4)             tfr     x,y             N2 to Y
EFB2 BDE819           (        forth.asm):02498 (7)             jsr     NPOP            N1 to X
EFB5 103721           (        forth.asm):02499 (4)             cmpr    y,x
EFB8 2F02             (        forth.asm):02500 (3)             ble     @pshrv2
EFBA 1F21             (        forth.asm):02501 (4)             tfr     y,x
EFBC 3610             (        forth.asm):02502         @pshrv2 UCNPUSH                 (X) N3 to the data stack
EFBE 39               (        forth.asm):02503 (4)             rts
                      (        forth.asm):02504         
EFBF 03               (        forth.asm):02505         ABS     fcb     3               ANSI (Core)
EFC0 414253           (        forth.asm):02506                 fcc     'ABS'           ( n -- u )
EFC3 EFA7             (        forth.asm):02507                 fdb     MIN
                      (        forth.asm):02508                 RFCS
EFC5 BDE819           (        forth.asm):02509 (7)             jsr     NPOP
EFC8 1F10             (        forth.asm):02510 (4)             tfr     x,d             N to D
EFCA 104D             (        forth.asm):02511 (2)             tstd
EFCC 2A04             (        forth.asm):02512 (3)             bpl     @abs1
EFCE 1040             (        forth.asm):02513 (2)             negd
EFD0 1F01             (        forth.asm):02514 (4)             tfr     d,x
EFD2 3610             (        forth.asm):02515         @abs1   UCNPUSH                 X to U
EFD4 39               (        forth.asm):02516 (4)             rts
                      (        forth.asm):02517         
EFD5 06               (        forth.asm):02518         NEGATE  fcb     6               ANSI (Core)
EFD6 4E4547415445     (        forth.asm):02519                 fcc     'NEGATE'        ( n1 -- n2 )
EFDC EFBF             (        forth.asm):02520                 fdb     ABS
                      (        forth.asm):02521                 RFCS
EFDE BDE4B4           (        forth.asm):02522 (7)             jsr     MIN1PST         At least one cell needs to be stacked up
EFE1 ECC4             (        forth.asm):02523 (5+0)           ldd     ,u
EFE3 1040             (        forth.asm):02524 (2)             negd
EFE5 EDC4             (        forth.asm):02525 (5+0)           std     ,u
EFE7 39               (        forth.asm):02526 (4)             rts
                      (        forth.asm):02527         
                      (        forth.asm):02528         * : BEGIN HERE 0 bal+ ; IMMEDIATE RESTRICT
EFE8 C5               (        forth.asm):02529         BEGIN   fcb     $C5             ANSI (Core)
EFE9 424547494E       (        forth.asm):02530                 fcc     'BEGIN'         Comp: ( C: -- dest )
EFEE EFD5             (        forth.asm):02531                 fdb     NEGATE          Exec: ( -- )
                      (        forth.asm):02532                 RFCS
EFF0 0C35             (        forth.asm):02533 (5)             inc     BALNCD
EFF2 9E08             (        forth.asm):02534 (4)             ldx     DICEND          HERE is ANS:dest/addr
EFF4 BDE80B           (        forth.asm):02535 (7)             jsr     CSPUSH          to the control flow stack
EFF7 1FC1             (        forth.asm):02536 (4)             tfr     0,x             ANS:dest/type is zero
EFF9 7EE80B           (        forth.asm):02537 (3)             jmp     CSPUSH          to the control flow stack
                      (        forth.asm):02538         
                      (        forth.asm):02539         * : AGAIN ABORT" Unbalanced BEGIN/AGAIN construct"
                      (        forth.asm):02540         *   branch , bal- ; IMMEDIATE RESTRICT
EFFC C5               (        forth.asm):02541         AGAIN   fcb     $C5             ANSI (Core ext)
EFFD 414741494E       (        forth.asm):02542                 fcc     'AGAIN'         Comp: ( C: dest -- )
F002 EFE8             (        forth.asm):02543                 fdb     BEGIN           Exec: ( -- )
                      (        forth.asm):02544                 RFCS
F004 BDE819           (        forth.asm):02545 (7)             jsr     CSPOP           ANS:dest/type to X (CC is set)
F007 1026F85A         (        forth.asm):02546 (5)             lbne    BALERR          type must be zero
F00B BDE819           (        forth.asm):02547 (7)             jsr     CSPOP           ANS:dest/addr to X
F00E 109E08           (        forth.asm):02548 (5)             ldy     DICEND
F011 109F14           (        forth.asm):02549 (5)             sty     JSRLAST
F014 867E             (        forth.asm):02550 (2)     AGAIN1  lda     #JMPOPC         JMP extended
F016 BDE5A8           (        forth.asm):02551 (7)             jsr     VARCON2
F019 109F08           (        forth.asm):02552 (5)             sty     DICEND
F01C 0A35             (        forth.asm):02553 (5)             dec     BALNCD
F01E 39               (        forth.asm):02554 (4)             rts
                      (        forth.asm):02555         
                      (        forth.asm):02556         * The standard does not require this as being immediate but I do.
F01F C4               (        forth.asm):02557         EXIT    fcb     $C4             ANSI (Core)
F020 45584954         (        forth.asm):02558                 fcc     'EXIT'          ( -- )
F024 EFFC             (        forth.asm):02559                 fdb     AGAIN
                      (        forth.asm):02560                 RFCS
F026 9E08             (        forth.asm):02561 (4)             ldx     DICEND
F028 301D             (        forth.asm):02562 (4+1)           leax    -3,x
F02A 109E14           (        forth.asm):02563 (5)             ldy     JSRLAST
F02D 103721           (        forth.asm):02564 (4)             cmpr    y,x
F030 2605             (        forth.asm):02565 (3)             bne     @noopt          Tail JMP optimization is not possible
F032 867E             (        forth.asm):02566 (2)             lda     #JMPOPC         JMP extended
F034 A784             (        forth.asm):02567 (4+0)           sta     ,x
F036 39               (        forth.asm):02568 (4)             rts
F037 3003             (        forth.asm):02569 (4+1)   @noopt  leax    3,x             Point back to HERE
F039 8639             (        forth.asm):02570 (2)             lda     #RTSOPC         RTS inherent
F03B A780             (        forth.asm):02571 (4+1)           sta     ,x+
F03D 9F08             (        forth.asm):02572 (4)             stx     DICEND
F03F 39               (        forth.asm):02573 (4)             rts
                      (        forth.asm):02574         
                      (        forth.asm):02575         * : UNTIL ABORT" Unbalanced BEGIN/UNTIL construct"
                      (        forth.asm):02576         *   0branch , bal- ; IMMEDIATE RESTRICT
F040 C5               (        forth.asm):02577         UNTIL   fcb     $C5             ANSI (Core)
F041 554E54494C       (        forth.asm):02578                 fcc     'UNTIL'         Comp: ( C: dest -- )
F046 F01F             (        forth.asm):02579                 fdb     EXIT            Exec: (x -- )
                      (        forth.asm):02580                 RFCS
F048 BDE819           (        forth.asm):02581 (7)             jsr     CSPOP           ANS:dest/type to X (CC is set)
F04B 1026F816         (        forth.asm):02582 (5)             lbne    BALERR          type must be zero
F04F 8EE819           (        forth.asm):02583 (3)             ldx     #NPOP
F052 BDE155           (        forth.asm):02584 (7)             jsr     EMXASXT         Compile "JSR NPOP"
F055 8E2603           (        forth.asm):02585 (3)             ldx     #BNEOPC         Compile "BNE *+5"
F058 AFA1             (        forth.asm):02586 (5+2)           stx     ,y++
F05A BDE819           (        forth.asm):02587 (7)             jsr     CSPOP           ANS:dest/addr to X
F05D 20B5             (        forth.asm):02588 (3)             bra     AGAIN1
                      (        forth.asm):02589         
                      (        forth.asm):02590         * : WHILE POSTPONE IF 2SWAP ; RESTRICT IMMEDIATE
F05F C5               (        forth.asm):02591         WHILE   fcb     $C5             ANSI (Core)
F060 5748494C45       (        forth.asm):02592                 fcc     'WHILE'         Comp: ( C: dest -- orig dest )
F065 F040             (        forth.asm):02593                 fdb     UNTIL           Exec: ( x -- )
                      (        forth.asm):02594                 RFCS
F067 BDEE13           (        forth.asm):02595                 RFXT    jsr,IF+5
F06A 7EF46E           (        forth.asm):02596                 RFXT    jmp,TWOSWAP+8   This should be read as "1 CS-ROLL"
                      (        forth.asm):02597         
                      (        forth.asm):02598         * : REPEAT POSTPONE AGAIN POSTPONE THEN ; RESTRICT IMMEDIATE
F06D C6               (        forth.asm):02599         REPEAT  fcb     $C6             ANSI (Core)
F06E 524550454154     (        forth.asm):02600                 fcc     'REPEAT'        Comp: ( C: orig dest -- )
F074 F05F             (        forth.asm):02601                 fdb     WHILE           Exec: ( -- )
                      (        forth.asm):02602                 RFCS
F076 8D8C             (        forth.asm):02603                 RFXT    bsr,AGAIN+8
F078 7EEE46           (        forth.asm):02604                 RFXT    jmp,THEN+7
                      (        forth.asm):02605         
F07B 42               (        forth.asm):02606         RFROM   fcb     $42             ANSI (Core)
F07C 523E             (        forth.asm):02607                 fcc     'R>'            ( -- x ) ( R:  x -- )
F07E F06D             (        forth.asm):02608                 fdb     REPEAT
                      (        forth.asm):02609                 RFCS
F080 BDE847           (        forth.asm):02610 (7)             jsr     RPOP
F083 7EE80B           (        forth.asm):02611 (3)             jmp     NPUSH
                      (        forth.asm):02612         
F086 42               (        forth.asm):02613         TOR     fcb     $42             ANSI (Core)
F087 3E52             (        forth.asm):02614                 fcc     '>R'            ( x -- ) ( R:  -- x )
F089 F07B             (        forth.asm):02615                 fdb     RFROM
                      (        forth.asm):02616                 RFCS
F08B BDE819           (        forth.asm):02617 (7)             jsr     NPOP
F08E 7EE82B           (        forth.asm):02618 (3)             jmp     RPUSH
                      (        forth.asm):02619         
                      (        forth.asm):02620         * : LEAVE POSTPONE UNLOOP POSTPONE branch
                      (        forth.asm):02621         *   HERE rakeVar DUP @ , ! ; IMMEDIATE RESTRICT
                      (        forth.asm):02622         * rakeVar points to the head of a linked list of forward references to
                      (        forth.asm):02623         * be resolved later by LOOP/+LOOP.
F091 C5               (        forth.asm):02624         LEAVE   fcb     $C5             ANSI (Core)
F092 4C45415645       (        forth.asm):02625                 fcc     'LEAVE'         Exec: ( -- ) ( R: loop-sys -- )
F097 F086             (        forth.asm):02626                 fdb     TOR
                      (        forth.asm):02627                 RFCS
F099 8EEDE7           (        forth.asm):02628                 RFXT    ldx,#UNLOOP+9
F09C BDE155           (        forth.asm):02629 (7)             jsr     EMXASXT         POSTPONE UNLOOP
F09F 867E             (        forth.asm):02630 (2)             lda     #JMPOPC
F0A1 A7A0             (        forth.asm):02631 (4+1)           sta     ,y+             POSTPONE branch
F0A3 1F21             (        forth.asm):02632 (4)             tfr     y,x             save HERE (fwd ref. to be resolved by LOOP)
F0A5 DC18             (        forth.asm):02633 (4)             ldd     RAKEVAR
F0A7 EDA1             (        forth.asm):02634 (5+2)           std     ,y++            rakeVar @ ,
F0A9 9F18             (        forth.asm):02635 (4)             stx     RAKEVAR         HERE rakeVar !
F0AB 109F08           (        forth.asm):02636 (5)             sty     DICEND
F0AE 39               (        forth.asm):02637 (4)             rts
                      (        forth.asm):02638         
F0AF 41               (        forth.asm):02639         INDI    fcb     $41             ANSI (Core)
F0B0 49               (        forth.asm):02640                 fcc     'I'             ( -- n|u ) ( R:  loop-sys -- loop-sys )
F0B1 F091             (        forth.asm):02641                 fdb     LEAVE
                      (        forth.asm):02642                 RFCS
F0B3 5F               (        forth.asm):02643 (1)             clrb
F0B4 9637             (        forth.asm):02644 (3)     RPICKN  lda     RDEPTH
F0B6 103789           (        forth.asm):02645 (4)             cmpr    a,b
F0B9 240A             (        forth.asm):02646 (3)             bhs     @rpick1
F0BB 9E00             (        forth.asm):02647 (4)             ldx     RSP
F0BD 4F               (        forth.asm):02648 (1)             clra
F0BE 1048             (        forth.asm):02649 (2)             lsld                    Times 2
F0C0 AE8B             (        forth.asm):02650 (5+2)           ldx     d,x
F0C2 7EE80B           (        forth.asm):02651 (3)             jmp     NPUSH           We cannot use UCNPUSH here
F0C5 C608             (        forth.asm):02652 (2)     @rpick1 ldb     #8              Return stack underflow
F0C7 BDE781           (        forth.asm):02653 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02654         
F0CA 42               (        forth.asm):02655         RFETCH  fcb     $42             ANSI (Core)
F0CB 5240             (        forth.asm):02656                 fcc     'R@'            ( -- x ) ( R:  x -- x )
F0CD F0AF             (        forth.asm):02657                 fdb     INDI
                      (        forth.asm):02658                 RFCS
F0CF 20E2             (        forth.asm):02659                 RFXT    bra,INDI+4      XT for I
                      (        forth.asm):02660         
F0D1 42               (        forth.asm):02661         INDIP   fcb     $42             79-STANDARD (REF)
F0D2 4927             (        forth.asm):02662                 fdb     $4927
F0D4 F0CA             (        forth.asm):02663                 fdb     RFETCH
                      (        forth.asm):02664                 RFCS
F0D6 C601             (        forth.asm):02665 (2)             ldb     #1
F0D8 20DA             (        forth.asm):02666 (3)             bra     RPICKN
                      (        forth.asm):02667         
F0DA 41               (        forth.asm):02668         INDJ    fcb     $41             ANSI (Core)
F0DB 4A               (        forth.asm):02669                 fcc     'J'             Exec: ( -- n|u ) ( R: lsy1 lsy2 -- lsy1 lsy2 )
F0DC F0D1             (        forth.asm):02670                 fdb     INDIP
                      (        forth.asm):02671                 RFCS
F0DE C602             (        forth.asm):02672 (2)             ldb     #2
F0E0 20D2             (        forth.asm):02673 (3)             bra     RPICKN
                      (        forth.asm):02674         
F0E2 42               (        forth.asm):02675         INDJP   fcb     $42             Non-standard
F0E3 4A27             (        forth.asm):02676                 fdb     $4A27
F0E5 F0DA             (        forth.asm):02677                 fdb     INDJ
                      (        forth.asm):02678                 RFCS
F0E7 C603             (        forth.asm):02679 (2)             ldb     #3
F0E9 20C9             (        forth.asm):02680 (3)             bra     RPICKN
                      (        forth.asm):02681         
F0EB 41               (        forth.asm):02682         INDK    fcb     $41             79-STANDARD (REF)
F0EC 4B               (        forth.asm):02683                 fcc     'K'
F0ED F0E2             (        forth.asm):02684                 fdb     INDJP
                      (        forth.asm):02685                 RFCS
F0EF C604             (        forth.asm):02686 (2)             ldb     #4
F0F1 20C1             (        forth.asm):02687 (3)             bra     RPICKN
                      (        forth.asm):02688         
F0F3 04               (        forth.asm):02689         QUIT    fcb     4               ANSI (Core)
F0F4 51554954         (        forth.asm):02690                 fcc     'QUIT'          ( -- )  ( R:  i*x -- )
F0F8 F0EB             (        forth.asm):02691                 fdb     INDK
                      (        forth.asm):02692                 RFCS
F0FA 0F25             (        forth.asm):02693 (5)             clr     USTATE+1
F0FC BDEBD3           (        forth.asm):02694                 RFXT    jsr,RCLR+7      XT for RCLR
F0FF 10CE8000         (        forth.asm):02695 (4)             lds     #RAMSTRT+RAMSIZE Reset the system stack pointer
F103 BDE2ED           (        forth.asm):02696 (7)             jsr     PUTCR
F106 7EE0B2           (        forth.asm):02697 (3)             jmp     INTERP
                      (        forth.asm):02698         
F109 05               (        forth.asm):02699         ABORT   fcb     5               ANSI (Core)
F10A 41424F5254       (        forth.asm):02700                 fcc     'ABORT'         ( i*x -- ) ( R: j*x -- )
F10F F0F3             (        forth.asm):02701                 fdb     QUIT
                      (        forth.asm):02702                 RFCS
F111 C603             (        forth.asm):02703 (2)             ldb     #3              User ABORT
F113 BDE781           (        forth.asm):02704 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02705         
                      (        forth.asm):02706         * Implementation notes: GNU Forth, VFX and SwiftForth all report "invalid
                      (        forth.asm):02707         * memory address" for "0 FIND". Also the counted string at c-addr is not
                      (        forth.asm):02708         * scanned for leading spaces. If the counted string byte count is zero, the
                      (        forth.asm):02709         * string will be not found and the dictionary not searched at all.
F116 04               (        forth.asm):02710         FIND    fcb     4               ANSI (Core)
F117 46494E44         (        forth.asm):02711                 fcc     'FIND'          ( c-addr -- c-addr 0  |  xt 1  |  xt -1 )
F11B F109             (        forth.asm):02712                 fdb     ABORT
                      (        forth.asm):02713                 RFCS
F11D BDE4B4           (        forth.asm):02714 (7)             jsr     MIN1PST
F120 AEC4             (        forth.asm):02715 (5+0)           ldx     ,u              TOS to X (Arg <c-addr>)
F122 2605             (        forth.asm):02716 (3)             bne     @afind1
F124 C60D             (        forth.asm):02717 (2)             ldb     #13             Illegal argument
F126 BDE781           (        forth.asm):02718 (7)             jsr     ERRHDLR         No return
F129 6D84             (        forth.asm):02719 (5+0)   @afind1 tst     ,x
F12B 2605             (        forth.asm):02720 (3)             bne     @afind3         Character count is NZ, proceed
F12D 1FC1             (        forth.asm):02721 (4)     @afind2 tfr     0,x             Word not found
F12F 7EE80B           (        forth.asm):02722 (3)             jmp     NPUSH
F132 DC02             (        forth.asm):02723 (4)     @afind3 ldd     TOKENSP
F134 3406             (        forth.asm):02724 (4+2)           pshs    d               Save TOKENSP to the system stack
F136 E680             (        forth.asm):02725 (4+1)           ldb     ,x+
F138 D742             (        forth.asm):02726 (3)             stb     CURTOKL
F13A 9F02             (        forth.asm):02727 (4)             stx     TOKENSP
F13C BDE4CD           (        forth.asm):02728 (7)             jsr     SWDIC1
F13F DC0E             (        forth.asm):02729 (4)             ldd     PLOAD           Retrieve word payload
F141 DD10             (        forth.asm):02730 (4)             std     FNDPLD          Make it accessible through PAYLOAD
F143 3506             (        forth.asm):02731 (4+2)           puls    d
F145 DD02             (        forth.asm):02732 (4)             std     TOKENSP         Restore TOKENSP from the system stack
                      (        forth.asm):02733         * If the word is not found, Y is 0 and we ought to branch back to that context.
F147 1037C2           (        forth.asm):02734 (4)             cmpr    0,y
F14A 27E1             (        forth.asm):02735 (3)             beq     @afind2
                      (        forth.asm):02736         * Word was found, push the corresponding XT (in Y) to the data stack (in place).
F14C 10AFC4           (        forth.asm):02737 (6+0)           sty     ,u
F14F 8EFFFF           (        forth.asm):02738 (3)             ldx     #-1             Assume non-immediate
F152 0D44             (        forth.asm):02739 (4)             tst     IMDFLG
F154 2702             (        forth.asm):02740 (3)             beq     @afind4
F156 3002             (        forth.asm):02741 (4+1)           leax    2,x             #1 to X
F158 7EE80B           (        forth.asm):02742 (3)     @afind4 jmp     NPUSH
                      (        forth.asm):02743         
F15B 01               (        forth.asm):02744         RBRACK  fcb     1               ANSI (Core)
F15C 5D               (        forth.asm):02745                 fcc     ']'             ( -- )
F15D F116             (        forth.asm):02746                 fdb     FIND
                      (        forth.asm):02747                 RFCS
F15F 86FF             (        forth.asm):02748 (2)             lda     #-1
F161 9725             (        forth.asm):02749 (3)     RBRACK1 sta     USTATE+1
F163 39               (        forth.asm):02750 (4)             rts
                      (        forth.asm):02751         
                      (        forth.asm):02752         * Note: the standard does not mandate that this primitive be executed in
                      (        forth.asm):02753         * definitions only. IMHO, it ought to, therefore I am forcing the C bit here.
F164 C1               (        forth.asm):02754         LBRACK  fcb     $C1             ANSI (Core)
F165 5B               (        forth.asm):02755                 fcc     '['             ( -- )
F166 F15B             (        forth.asm):02756                 fdb     RBRACK
                      (        forth.asm):02757                 RFCS
F168 4F               (        forth.asm):02758 (1)             clra
F169 20F6             (        forth.asm):02759 (3)             bra     RBRACK1
                      (        forth.asm):02760         
                      (        forth.asm):02761         * Functionally:
                      (        forth.asm):02762         * : ' BL WORD FIND IF
                      (        forth.asm):02763         *     EXIT                      \ XT is left on the data stack
                      (        forth.asm):02764         *   THEN
                      (        forth.asm):02765         *   DROP 0 ;
                      (        forth.asm):02766         * There is a little extra complexity here because the standard requires
                      (        forth.asm):02767         * an error condition to be triggered if the word is not found.
F16B 01               (        forth.asm):02768         TICK    fcb     1               ANSI (Core)
F16C 27               (        forth.asm):02769                 fcb     $27             ( "<spaces>name" -- xt )
F16D F164             (        forth.asm):02770                 fdb     LBRACK
                      (        forth.asm):02771                 RFCS
F16F BDF6DE           (        forth.asm):02772                 RFXT    jsr,BL+5
F172 BDF2E6           (        forth.asm):02773                 RFXT    jsr,WORD+7
F175 8DA6             (        forth.asm):02774                 RFXT    bsr,FIND+7
                      (        forth.asm):02775         * We have at least two cells returned by the ANS94 FIND on the data stack.
F177 ECC4             (        forth.asm):02776 (5+0)           ldd     ,u              TOS to D (ANS94 FIND flag)
F179 2703             (        forth.asm):02777 (3)             beq     @nfound         Target word was not found
F17B 3342             (        forth.asm):02778 (4+1)           leau    2,u             Drop the flag and return the XT
F17D 39               (        forth.asm):02779 (4)             rts
F17E 3344             (        forth.asm):02780 (4+1)   @nfound leau    4,u             Drop two cells from the data stack
F180 9E02             (        forth.asm):02781 (4)             ldx     TOKENSP
F182 BDE37C           (        forth.asm):02782 (7)             jsr     SCNSTOK         Needed to skip leading spaces
F185 C602             (        forth.asm):02783 (2)             ldb     #2              Word not found
F187 BDE781           (        forth.asm):02784 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02785         
                      (        forth.asm):02786         * Functionally: : ['] ' POSTPONE LITERAL ; IMMEDIATE RESTRICT
F18A C3               (        forth.asm):02787         BKQUOT  fcb     $C3             ANSI (Core)
F18B 5B275D           (        forth.asm):02788                 fcb     $5B,$27,$5D     Comp: ( "<spaces>name" -- )
F18E F16B             (        forth.asm):02789                 fdb     TICK            Exec: ( -- xt )
                      (        forth.asm):02790                 RFCS
F190 8DDD             (        forth.asm):02791                 RFXT    bsr,TICK+4      XT for '
                      (        forth.asm):02792         * Data stack topmost cell has the target word address.
F192 7EEC4F           (        forth.asm):02793                 RFXT    jmp,LITERAL+10  XT for LITERAL
                      (        forth.asm):02794         
F195 C8               (        forth.asm):02795         POSTPON fcb     $C8             ANSI (Core) Not a straight alias to [COMPILE]
F196 504F5354504F4E45 (        forth.asm):02796                 fcc     'POSTPONE'      ( "<spaces>name" -- )
F19E F18A             (        forth.asm):02797                 fdb     BKQUOT          Non-immediate words deserve special treatment
                      (        forth.asm):02798                 RFCS
F1A0 BDE89F           (        forth.asm):02799 (7)             jsr     BKIN2PT         Derive X from BLK, >IN
F1A3 BDE37C           (        forth.asm):02800 (7)             jsr     SCNSTOK
F1A6 2605             (        forth.asm):02801 (3)             bne     @postp1
F1A8 C605             (        forth.asm):02802 (2)             ldb     #5              Missing word name
F1AA BDE781           (        forth.asm):02803 (7)             jsr     ERRHDLR         No return
F1AD BDE4C8           (        forth.asm):02804 (7)     @postp1 jsr     SWDIC
F1B0 2607             (        forth.asm):02805 (3)             bne     @postp2         Word found. Code address returned in Y
F1B2 9E02             (        forth.asm):02806 (4)             ldx     TOKENSP
F1B4 C602             (        forth.asm):02807 (2)             ldb     #2              Undefined (X points to the offending word)
F1B6 BDE781           (        forth.asm):02808 (7)             jsr     ERRHDLR         No return
F1B9 1F21             (        forth.asm):02809 (4)     @postp2 tfr     y,x             X has the actual execution token
F1BB 0D44             (        forth.asm):02810 (4)             tst     IMDFLG
F1BD 2708             (        forth.asm):02811 (3)             beq     @postp4         Target word is not immediate
F1BF BDE155           (        forth.asm):02812 (7)     @postp3 jsr     EMXASXT         Set as action component
F1C2 DC02             (        forth.asm):02813 (4)             ldd     TOKENSP         Updated by SWDIC if the word was found
F1C4 7EE164           (        forth.asm):02814 (3)             jmp     U2INFRD         Derive >IN from D
                      (        forth.asm):02815         * The word being considered is non-immediate. The equivalent input should be:
                      (        forth.asm):02816         * ['] <word> COMPILE, We have the XT for <word> in X.
F1C7 BDE591           (        forth.asm):02817 (7)     @postp4 jsr     LITER
F1CA 8EF1DA           (        forth.asm):02818                 RFXT    ldx,#CMPCOMA+11 XT for COMPILE,
F1CD 20F0             (        forth.asm):02819 (3)             bra     @postp3
                      (        forth.asm):02820         
                      (        forth.asm):02821         * GNU Forth has this as non-immediate so I am going for it as well.
F1CF 48               (        forth.asm):02822         CMPCOMA fcb     $48             ANSI (Core Ext)
F1D0 434F4D50494C452C (        forth.asm):02823                 fcc     'COMPILE,'      ( XT -- )
F1D8 F195             (        forth.asm):02824                 fdb     POSTPON
                      (        forth.asm):02825                 RFCS
F1DA BDE819           (        forth.asm):02826 (7)             jsr     NPOP            Execution token to X
F1DD 7EE155           (        forth.asm):02827 (3)             jmp     EMXASXT
                      (        forth.asm):02828         
                      (        forth.asm):02829         * As per the standard, : is not immediate. This allows for further interesting
                      (        forth.asm):02830         * developments, like tracing words execution...
F1E0 01               (        forth.asm):02831         COMPC   fcb     $1              ANSI (Core)
F1E1 3A               (        forth.asm):02832                 fcc     ':'             Comp: ( "<spaces>name" -- )
F1E2 F1CF             (        forth.asm):02833                 fdb     CMPCOMA
                      (        forth.asm):02834                 RFCS
F1E4 0F34             (        forth.asm):02835 (5)             clr     ANCMPF
F1E6 CCFFFF           (        forth.asm):02836 (3)     COMPC1  ldd     #-1
F1E9 9725             (        forth.asm):02837 (3)             sta     USTATE+1
F1EB 1043             (        forth.asm):02838 (2)             comd                    0 to D
F1ED 9735             (        forth.asm):02839 (3)             sta     BALNCD
F1EF DD14             (        forth.asm):02840 (4)             std     JSRLAST
F1F1 DD16             (        forth.asm):02841 (4)             std     FWDREF
F1F3 0D34             (        forth.asm):02842 (4)             tst     ANCMPF          Anonymous compilation?
F1F5 2603             (        forth.asm):02843 (3)             bne     @isanon
F1F7 7EE536           (        forth.asm):02844 (3)             jmp     LOCWRT
F1FA 9E08             (        forth.asm):02845 (4)     @isanon ldx     DICEND
F1FC 9F0C             (        forth.asm):02846 (4)             stx     BDICEND         Backup HERE
F1FE 9F12             (        forth.asm):02847 (4)             stx     RECADDR         Should RECURSE by used by a :NONAME definition
F200 39               (        forth.asm):02848 (4)             rts
                      (        forth.asm):02849         
F201 07               (        forth.asm):02850         NONAME  fcb     $7
F202 3A4E4F4E414D45   (        forth.asm):02851                 fcc     ':NONAME'
F209 F1E0             (        forth.asm):02852                 fdb     COMPC
                      (        forth.asm):02853                 RFCS
F20B 8601             (        forth.asm):02854 (2)             lda     #1
F20D 9734             (        forth.asm):02855 (3)             sta     ANCMPF          Set the anonymous compilation flag
F20F 20D5             (        forth.asm):02856 (3)             bra     COMPC1
                      (        forth.asm):02857         
                      (        forth.asm):02858         * Tail call optimization notes:
                      (        forth.asm):02859         * 1: if JSRLAST is 0, emit an RTS, the end.
                      (        forth.asm):02860         * 2: if HERE - 3 == JSRLAST: replace JSR by a JMP.
                      (        forth.asm):02861         * 3: if FWDREF == HERE, emit an RTS.
                      (        forth.asm):02862         * The end means finalize with DEBUG code and an update of HERE (DICEND).
F211 C1               (        forth.asm):02863         COMPR   fcb     $C1             ANSI (Core)
F212 3B               (        forth.asm):02864                 fcc     ';'
F213 F201             (        forth.asm):02865                 fdb     NONAME
                      (        forth.asm):02866                 RFCS
F215 BDE860           (        forth.asm):02867 (7)             jsr     BALCHK          Check for unbalanced constructs
F218 0F25             (        forth.asm):02868 (5)             clr     USTATE+1        Back to interpretation mode
                      (        forth.asm):02869         * Do not restore LSTWAD if we came from :NONAME.
F21A 9E0C             (        forth.asm):02870 (4)             ldx     BDICEND         X as HERE when : (LOCWRT) or :NONAME was called
F21C 0D34             (        forth.asm):02871 (4)             tst     ANCMPF
F21E 2604             (        forth.asm):02872 (3)             bne     @wasano
F220 9F06             (        forth.asm):02873 (4)             stx     LSTWAD          Update LAST
F222 2005             (        forth.asm):02874 (3)             bra     @cont
F224 0F34             (        forth.asm):02875 (5)     @wasano clr     ANCMPF
F226 BDE80B           (        forth.asm):02876 (7)             jsr     NPUSH           Anonynous execution token to the data stack
F229 9E08             (        forth.asm):02877 (4)     @cont   ldx     DICEND          HERE to X
                      (        forth.asm):02878         * Optimization: replace the last JSR by a JMP, if possible.
F22B DC14             (        forth.asm):02879 (4)             ldd     JSRLAST
F22D 2713             (        forth.asm):02880 (3)             beq     @rtsreq         Case #1
F22F 311D             (        forth.asm):02881 (4+1)           leay    -3,x            Y has HERE - 3, D has JSRLAST
F231 103702           (        forth.asm):02882 (4)             cmpr    d,y
F234 260C             (        forth.asm):02883 (3)             bne     @rtsreq
                      (        forth.asm):02884         * Tail call optimization applies (Case #2).
F236 867E             (        forth.asm):02885 (2)             lda     #JMPOPC
F238 A7A4             (        forth.asm):02886 (4+0)           sta     ,y
F23A 109E16           (        forth.asm):02887 (5)             ldy     FWDREF
F23D 103712           (        forth.asm):02888 (4)             cmpr    x,y
F240 2604             (        forth.asm):02889 (3)             bne     @finalz         Case #3
F242 8639             (        forth.asm):02890 (2)     @rtsreq lda     #RTSOPC         RTS inherent
F244 A780             (        forth.asm):02891 (4+1)           sta     ,x+
F246                  (        forth.asm):02892         @finalz
                      (        forth.asm):02893                 IFNE    DEBUG
                      (        forth.asm):02894                 lda     #ILLOPC         Illegal opcode
                      (        forth.asm):02895                 sta     ,x+
                      (        forth.asm):02896                 ENDC                    DEBUG
F246 9F08             (        forth.asm):02897 (4)             stx     DICEND          Update HERE
                      (        forth.asm):02898                 IFNE    RELFEAT
                      (        forth.asm):02899                 RFXT    jsr,MONITOR+10  XT for MONITOR. All : words are candidates
                      (        forth.asm):02900         *                               for integrity check by ICHECK.
                      (        forth.asm):02901                 ENDC                    RELFEAT
F248 39               (        forth.asm):02902 (4)             rts
                      (        forth.asm):02903         
F249 C7               (        forth.asm):02904         RECURSE fcb     $C7             ANSI (Core)
F24A 52454355525345   (        forth.asm):02905                 fcc     'RECURSE'       ( -- )
F251 F211             (        forth.asm):02906                 fdb     COMPR
                      (        forth.asm):02907                 RFCS
F253 9E12             (        forth.asm):02908 (4)             ldx     RECADDR         Set up by LOCWRT
F255 7EE155           (        forth.asm):02909 (3)             jmp     EMXASXT         Set as action component
                      (        forth.asm):02910         
F258 06               (        forth.asm):02911         MARKER  fcb     6               ANSI (Tools ext)
F259 4D41524B4552     (        forth.asm):02912                 fcc     'MARKER'
F25F F249             (        forth.asm):02913                 fdb     RECURSE
                      (        forth.asm):02914                 RFCS
F261 109E08           (        forth.asm):02915 (5)             ldy     DICEND          HERE
F264 9E06             (        forth.asm):02916 (4)             ldx     LSTWAD          LAST
F266 3430             (        forth.asm):02917 (4+4)           pshs    y,x             Preserve essential dictionary pointers
F268 BDE536           (        forth.asm):02918 (7)             jsr     LOCWRT          No pre-req on input, does all the heavy lifting
                      (        forth.asm):02919         
                      (        forth.asm):02920         * From here on, all we need to do is to emit the code necessary to restore
                      (        forth.asm):02921         * DICEND (2,s) and LSTWAD (,s). Y has HERE, as of right now.
F26B AE62             (        forth.asm):02922 (5+1)           ldx     2,s             Saved HERE to X
F26D 868E             (        forth.asm):02923 (2)             lda     #LDXOPC
F26F BDE5A8           (        forth.asm):02924 (7)             jsr     VARCON2
F272 CC9F08           (        forth.asm):02925 (3)             ldd     #($9F*256)|(DICEND-VARSPC)
F275 EDA1             (        forth.asm):02926 (5+2)           std     ,y++            Compile stx DICEND (direct page)
                      (        forth.asm):02927         
F277 AEE4             (        forth.asm):02928 (5+0)           ldx     ,s              Saved LAST to X
F279 868E             (        forth.asm):02929 (2)             lda     #LDXOPC
F27B BDE5A8           (        forth.asm):02930 (7)             jsr     VARCON2
F27E CC9F06           (        forth.asm):02931 (3)             ldd     #($9F*256)|(LSTWAD-VARSPC)
F281 EDA1             (        forth.asm):02932 (5+2)           std     ,y++            Compile stx LSTWAD (direct page)
                      (        forth.asm):02933         
F283 8639             (        forth.asm):02934 (2)             lda     #RTSOPC
F285 A7A0             (        forth.asm):02935 (4+1)           sta     ,y+             Emit an RTS
F287 3264             (        forth.asm):02936 (4+1)           leas    4,s             Drop material previously on the system stack
F289 7EEC11           (        forth.asm):02937 (3)             jmp     CREAT1          Finalize dictionary entry
                      (        forth.asm):02938         
F28C 07               (        forth.asm):02939         EXCT    fcb     7               ANSI (Core)
F28D 45584543555445   (        forth.asm):02940                 fcc     'EXECUTE'       ( i*x xt -- j*x )
F294 F258             (        forth.asm):02941                 fdb     MARKER
                      (        forth.asm):02942                 RFCS
F296 BDE819           (        forth.asm):02943 (7)             jsr     NPOP            Although the standard does not specify that
F299 2702             (        forth.asm):02944 (3)             beq     @exct1          a NUL address should trigger an error, I do
F29B 1F15             (        forth.asm):02945 (4)             tfr     x,pc            Branch to the XT
F29D C60D             (        forth.asm):02946 (2)     @exct1  ldb     #13             Illegal argument
F29F BDE781           (        forth.asm):02947 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02948         
F2A2 03               (        forth.asm):02949         BYE     fcb     3               ANSI (Programming tools)
F2A3 425945           (        forth.asm):02950                 fcc     'BYE'
F2A6 F28C             (        forth.asm):02951                 fdb     EXCT
                      (        forth.asm):02952                 RFCS
                      (        forth.asm):02953                 IFNE    RTCFEAT
                      (        forth.asm):02954                 lda     #RTOREGB
                      (        forth.asm):02955                 jsr     RTREGRD         RTCB register to B
                      (        forth.asm):02956                 andb    #^RTBPIE        Disable periodic interrupt generation
                      (        forth.asm):02957                 jsr     RTREGWR
                      (        forth.asm):02958                 ldx     #40
                      (        forth.asm):02959                 jsr     MILLIS1         Wait for 40 milliseconds
                      (        forth.asm):02960                 orcc    #(FFLAG|IFLAG)  Disable maskable interrupts
                      (        forth.asm):02961                 ENDC                    RTCFEAT
F2A8 7EE037           (        forth.asm):02962 (3)             jmp     RSTHDL
                      (        forth.asm):02963         
F2AB C6               (        forth.asm):02964         BKCHAR  fcb     $C6             ANSI (Core)
F2AC 5B434841525D     (        forth.asm):02965                 fcc     '[CHAR]'        Comp: ( "<spaces>name" -- )
F2B2 F2A2             (        forth.asm):02966                 fdb     BYE             Exec: ( -- char )
                      (        forth.asm):02967                 RFCS
F2B4 8D0A             (        forth.asm):02968                 RFXT    bsr,CHAR+7      XT for CHAR
F2B6 7EEC4F           (        forth.asm):02969                 RFXT    jmp,LITERAL+10  XT for LITERAL
                      (        forth.asm):02970         
F2B9 04               (        forth.asm):02971         CHAR    fcb     4               ANSI (Core)
F2BA 43484152         (        forth.asm):02972                 fcc     'CHAR'          ( "<spaces>name" -- char )
F2BE F2AB             (        forth.asm):02973                 fdb     BKCHAR
                      (        forth.asm):02974                 RFCS
F2C0 BDE89F           (        forth.asm):02975 (7)             jsr     BKIN2PT         Derive X from BLK, >IN
F2C3 BDE37C           (        forth.asm):02976 (7)     @char1  jsr     SCNSTOK         X points to the beginning of the character
F2C6 2712             (        forth.asm):02977 (3)             beq     @chrerr
F2C8 E684             (        forth.asm):02978 (4+0)           ldb     ,x
F2CA 4F               (        forth.asm):02979 (1)             clra                    D has CHAR
F2CB 1F01             (        forth.asm):02980 (4)             tfr     d,x
F2CD BDE80B           (        forth.asm):02981 (7)             jsr     NPUSH
F2D0 9E02             (        forth.asm):02982 (4)             ldx     TOKENSP         Set by SCNSTOK
F2D2 BDE38F           (        forth.asm):02983 (7)             jsr     SCNETOK
F2D5 1F10             (        forth.asm):02984 (4)             tfr     x,d             TOKENEP
F2D7 7EE164           (        forth.asm):02985 (3)             jmp     U2INFRD         Derive >IN from D
F2DA C60D             (        forth.asm):02986 (2)     @chrerr ldb     #13             Illegal argument
F2DC BDE781           (        forth.asm):02987 (7)             jsr     ERRHDLR
                      (        forth.asm):02988         * No return.
                      (        forth.asm):02989         
                      (        forth.asm):02990         * Hairy code but working.
F2DF 04               (        forth.asm):02991         WORD    fcb     4               ANSI (Core)
F2E0 574F5244         (        forth.asm):02992                 fcc     'WORD'          ( char "<chars>ccc<char>" -- c-addr )
F2E4 F2B9             (        forth.asm):02993                 fdb     CHAR
                      (        forth.asm):02994                 RFCS
F2E6 BDE819           (        forth.asm):02995 (7)             jsr     NPOP
F2E9 1F16             (        forth.asm):02996 (4)             tfr     x,w             F has the delimiter ASCII code
F2EB 109E08           (        forth.asm):02997 (5)             ldy     DICEND          The counted string returned is stored at HERE
F2EE 3420             (        forth.asm):02998 (4+2)           pshs    y
F2F0 6FA0             (        forth.asm):02999 (6+1)           clr     ,y+             Initialize its length
F2F2 BDE89F           (        forth.asm):03000 (7)             jsr     BKIN2PT         Derive X from BLK, >IN
F2F5 BDE3A7           (        forth.asm):03001 (7)             jsr     NXTCHAR         Current input char to A unless ZFLAG is set
F2F8 2722             (        forth.asm):03002 (3)             beq     @word3
F2FA 8120             (        forth.asm):03003 (2)             cmpa    #SP             BL
F2FC 2702             (        forth.asm):03004 (3)             beq     @word1          Skip initial blank if there is one
F2FE 301F             (        forth.asm):03005 (4+1)           leax    -1,x            Go back one char.
F300 BDE3A7           (        forth.asm):03006 (7)     @word1  jsr     NXTCHAR
F303 2717             (        forth.asm):03007 (3)             beq     @word3          EOL reached, this is the end
F305 1037F8           (        forth.asm):03008 (4)             cmpr    f,a             Leading delimiter matched?
F308 27F6             (        forth.asm):03009 (3)             beq     @word1          Yes, skip it (it might be repeated)
                      (        forth.asm):03010         * Either there was no leading delimiter or we went past the leading repetitions.
F30A 301F             (        forth.asm):03011 (4+1)           leax    -1,x            Go back one char.
F30C BDE3A7           (        forth.asm):03012 (7)     @word2  jsr     NXTCHAR         Acquire next character from the input stream
F30F 270B             (        forth.asm):03013 (3)             beq     @word3          EOL reached
F311 1037F8           (        forth.asm):03014 (4)             cmpr    f,a             Trailing delimiter?
F314 2706             (        forth.asm):03015 (3)             beq     @word3
F316 A7A0             (        forth.asm):03016 (4+1)           sta     ,y+
F318 6CF4             (        forth.asm):03017 (6+3)           inc     [,s]            Increment string length
F31A 20F0             (        forth.asm):03018 (3)             bra     @word2
F31C 1F10             (        forth.asm):03019 (4)     @word3  tfr     x,d             Pointing one char after the delimiter or EOIS
F31E BDE164           (        forth.asm):03020 (7)             jsr     U2INFRD         Derive >IN from D
F321 3510             (        forth.asm):03021 (4+2)           puls    x
F323 3610             (        forth.asm):03022                 UCNPUSH                 Push back HERE
F325 39               (        forth.asm):03023 (4)             rts
                      (        forth.asm):03024         
F326 81               (        forth.asm):03025         LPAR    fcb     $81             ANSI (Core). No longer 79-STANDARD compliant
F327 28               (        forth.asm):03026                 fcc     '('             Exec: ( "ccc<paren>" -- )
F328 F2DF             (        forth.asm):03027                 fdb     WORD
                      (        forth.asm):03028                 RFCS
F32A 8E0029           (        forth.asm):03029 (3)             ldx     #')
F32D BDE80B           (        forth.asm):03030 (7)             jsr     NPUSH
F330 8DB4             (        forth.asm):03031                 RFXT    bsr,WORD+7
F332 7EFC5C           (        forth.asm):03032                 RFXT    jmp,DROP+7
                      (        forth.asm):03033         
F335 06               (        forth.asm):03034         SOURCE  fcb     6               ANSI (Core)
F336 534F55524345     (        forth.asm):03035                 fcc     'SOURCE'        ( -- c-addr u )
F33C F326             (        forth.asm):03036                 fdb     LPAR
                      (        forth.asm):03037                 RFCS
F33E 9E20             (        forth.asm):03038 (4)             ldx     BSBFADR
F340 BDE80B           (        forth.asm):03039 (7)             jsr     NPUSH
F343 9E26             (        forth.asm):03040 (4)             ldx     ISLEN           Input stream length
F345 7EE80B           (        forth.asm):03041 (3)             jmp     NPUSH
                      (        forth.asm):03042         
                      (        forth.asm):03043         * This is a straightforward implementation borrowed from GNU Forth 'see \':
                      (        forth.asm):03044         * : \
                      (        forth.asm):03045         *   BLK @
                      (        forth.asm):03046         *   IF     >IN @ C/L / 1+ C/L * >IN ! EXIT
                      (        forth.asm):03047         *   THEN
                      (        forth.asm):03048         *   SOURCE >IN ! DROP ; IMMEDIATE
                      (        forth.asm):03049         * However since C/L (number of columns per line) is 64 (a power of 2), things
                      (        forth.asm):03050         * can be coded in a more compact manner as: >IN @ 63 INVERT AND 64 + >IN !
F348 81               (        forth.asm):03051         BKSLSH  fcb     $81             ANSI (Block Ext)
F349 5C               (        forth.asm):03052                 fcb     $5C             \ ( -- )
F34A F335             (        forth.asm):03053                 fdb     SOURCE
                      (        forth.asm):03054                 RFCS
F34C DC2C             (        forth.asm):03055 (4)             ldd     UBLK            BLK @ to D
F34E 270B             (        forth.asm):03056 (3)             beq     @comser         We operate from block 0: the console
F350 DC2A             (        forth.asm):03057 (4)             ldd     UTOIN           >IN @
F352 C4C0             (        forth.asm):03058 (2)             andb    #^$3F           Point to the beginning of the line
F354 CB40             (        forth.asm):03059 (2)             addb    #$40            next line
F356 8900             (        forth.asm):03060 (2)             adca    #0              Propagate potential carry from LSB
F358 DD2A             (        forth.asm):03061 (4)             std     UTOIN           >IN !
F35A 39               (        forth.asm):03062 (4)             rts                     EXIT
F35B 8DE1             (        forth.asm):03063         @comser RFXT    bsr,SOURCE+9    XT for SOURCE
F35D BDE819           (        forth.asm):03064 (7)             jsr     NPOP
F360 9F2A             (        forth.asm):03065 (4)             stx     UTOIN           >IN !
F362 7EFC5C           (        forth.asm):03066                 RFXT    jmp,DROP+7      XT for DROP
                      (        forth.asm):03067                 ENDC
                      (        forth.asm):03068         
F365 82               (        forth.asm):03069         PSTR    fcb     $82             ANSI (Core)
F366 2E22             (        forth.asm):03070                 fcc     '."'            Comp: ( "ccc<quote>" -- )
F368 F348             (        forth.asm):03071                 fdb     BKSLSH          Exec: ( -- )
                      (        forth.asm):03072                 RFCS
F36A 8D12             (        forth.asm):03073                 RFXT    bsr,SQUOTE+5    XT for S"
F36C 0D25             (        forth.asm):03074 (4)             tst     USTATE+1
F36E 2603             (        forth.asm):03075 (3)             bne     @pstcmp
F370 7EF735           (        forth.asm):03076                 RFXT    jmp,TYPE+7      XT for TYPE
F373 8EF735           (        forth.asm):03077         @pstcmp RFXT    ldx,#TYPE+7     Emit TYPE as an XT
F376 7EE155           (        forth.asm):03078 (3)             jmp     EMXASXT
                      (        forth.asm):03079         
F379 82               (        forth.asm):03080         SQUOTE  fcb     $82             ANSI (Core)
F37A 5322             (        forth.asm):03081                 fcc     'S"'            Comp: ( "ccc<quote>" -- )
F37C F365             (        forth.asm):03082                 fdb     PSTR            Exec: ( -- c-addr u )
                      (        forth.asm):03083                 RFCS
F37E 0D25             (        forth.asm):03084 (4)             tst     USTATE+1
F380 260C             (        forth.asm):03085 (3)             bne     @sqcmp
F382 8E0022           (        forth.asm):03086 (3)             ldx     #'"             We are interpreting
F385 BDE80B           (        forth.asm):03087 (7)             jsr     NPUSH
F388 BDF2E6           (        forth.asm):03088                 RFXT    jsr,WORD+7      XT for WORD
F38B 7EF753           (        forth.asm):03089                 RFXT    jmp,COUNT+8     XT for COUNT
F38E 109E08           (        forth.asm):03090 (5)     @sqcmp  ldy     DICEND          We are compiling
F391 867E             (        forth.asm):03091 (2)             lda     #JMPOPC         JMP extended
F393 A7A0             (        forth.asm):03092 (4+1)           sta     ,y+
F395 3420             (        forth.asm):03093 (4+2)           pshs    y
F397 3122             (        forth.asm):03094 (4+1)           leay    2,y             2 ALLOT
F399 109F08           (        forth.asm):03095 (5)             sty     DICEND
F39C 8E0022           (        forth.asm):03096 (3)             ldx     #'"
F39F BDE80B           (        forth.asm):03097 (7)             jsr     NPUSH
F3A2 BDF2E6           (        forth.asm):03098                 RFXT    jsr,WORD+7      XT for WORD
F3A5 BDE819           (        forth.asm):03099 (7)             jsr     NPOP
F3A8 4F               (        forth.asm):03100 (1)             clra
F3A9 E684             (        forth.asm):03101 (4+0)           ldb     ,x              C@
F3AB 3001             (        forth.asm):03102 (4+1)           leax    1,x             1+. Skip the byte count (X has HERE)
F3AD 308B             (        forth.asm):03103 (4+2)           leax    d,x             Skip string length material
F3AF 3520             (        forth.asm):03104 (4+2)           puls    y
F3B1 AFA4             (        forth.asm):03105 (5+0)           stx     ,y              Install jump address
F3B3 3122             (        forth.asm):03106 (4+1)           leay    2,y             Counted string base address to Y
F3B5 868E             (        forth.asm):03107 (2)             lda     #LDXOPC
F3B7 A780             (        forth.asm):03108 (4+1)           sta     ,x+
F3B9 10AF81           (        forth.asm):03109 (6+2)           sty     ,x++
F3BC 9F08             (        forth.asm):03110 (4)             stx     DICEND          Update HERE
F3BE 8EE80B           (        forth.asm):03111 (3)             ldx     #NPUSH
F3C1 BDE155           (        forth.asm):03112 (7)             jsr     EMXASXT
F3C4 8EF753           (        forth.asm):03113                 RFXT    ldx,#COUNT+8    XT for COUNT
F3C7 7EE155           (        forth.asm):03114 (3)             jmp     EMXASXT
                      (        forth.asm):03115         
                      (        forth.asm):03116         * Transactional behaviour is guaranteed here. What this means is that the
                      (        forth.asm):03117         * operation will preserve the data stack contents, should insufficient
                      (        forth.asm):03118         * parameters be supplied. It is a very desirable feature (for debugging
                      (        forth.asm):03119         * purposes) which will be generalized to a number of other words. As an
                      (        forth.asm):03120         * aside, it also allows us to access the data stack as directly indexed
                      (        forth.asm):03121         * through the 6309 U register, resulting in better performance.
F3CA 02               (        forth.asm):03122         DPLUS   fcb     2               79-STANDARD (REQ241)
F3CB 442B             (        forth.asm):03123                 fcc     'D+'            ( d1 d2 -- d1+d2--signed )
F3CD F379             (        forth.asm):03124                 fdb     SQUOTE          In processor's terms U has ( L1 H1 L2 H2)
                      (        forth.asm):03125                 RFCS
F3CF BDE4C3           (        forth.asm):03126 (7)             jsr     MIN4PST         Make sure we have at least 4 cells stacked up
                      (        forth.asm):03127         * At this point sufficient stack depth has been assessed. Let's rock and roll!
F3D2 EC46             (        forth.asm):03128 (5+1)           ldd     6,u             L1
F3D4 E342             (        forth.asm):03129 (5+1)           addd    2,u             L2
F3D6 ED46             (        forth.asm):03130 (5+1)           std     6,u             d1+d2 least significant cell
F3D8 EC44             (        forth.asm):03131 (5+1)           ldd     4,u             H1
F3DA 10A9C4           (        forth.asm):03132 (6+0)           adcd    ,u              H2 (add with carry bit)
F3DD ED44             (        forth.asm):03133 (5+1)           std     4,u             d1+d2 most significant cell
F3DF 3344             (        forth.asm):03134 (4+1)           leau    4,u             Drop 2 cells from the data stack
F3E1 39               (        forth.asm):03135 (4)             rts
                      (        forth.asm):03136         
F3E2 07               (        forth.asm):03137         DNEG    fcb     7               79-STANDARD (REQ245)
F3E3 444E4547415445   (        forth.asm):03138                 fcc     'DNEGATE'
F3EA F3CA             (        forth.asm):03139                 fdb     DPLUS
                      (        forth.asm):03140                 RFCS
F3EC BDE4B9           (        forth.asm):03141 (7)             jsr     MIN2PST         We need at least 2 cells stacked up
F3EF 10A642           (        forth.asm):03142 (6+1)           ldw     2,u             Least significant cell
F3F2 1053             (        forth.asm):03143 (2)             comw
F3F4 ECC4             (        forth.asm):03144 (5+0)           ldd     ,u              Most significant cell
F3F6 1043             (        forth.asm):03145 (2)             comd
F3F8 108B0001         (        forth.asm):03146 (4)             addw    #1
F3FC 10890000         (        forth.asm):03147 (4)             adcd    #0              Propagate carry flag
F400 10EDC4           (        forth.asm):03148 (8+0)           stq     ,u              Store the result back to the data stack
F403 39               (        forth.asm):03149 (4)             rts
                      (        forth.asm):03150         
F404 02               (        forth.asm):03151         DMINUS  fcb     2               79-STANDARD (double number extension)
F405 442D             (        forth.asm):03152                 fcc     'D-'            ( d1 d2 -- d1-d2--signed )
F407 F3E2             (        forth.asm):03153                 fdb     DNEG            In processor's terms U has ( L1 H1 L2 H2)
                      (        forth.asm):03154                 RFCS
F409 BDE4C3           (        forth.asm):03155 (7)             jsr     MIN4PST         Make sure we have at least 4 cells stacked up
F40C EC46             (        forth.asm):03156 (5+1)           ldd     6,u             L1
F40E A342             (        forth.asm):03157 (5+1)           subd    2,u             L2
F410 ED46             (        forth.asm):03158 (5+1)           std     6,u             d1-d2 least significant cell
F412 EC44             (        forth.asm):03159 (5+1)           ldd     4,u             H1
F414 10A2C4           (        forth.asm):03160 (6+0)           sbcd    ,u              H2 (substract with borrow)
F417 ED44             (        forth.asm):03161 (5+1)           std     4,u             d1-d2 most significant cell
F419 3344             (        forth.asm):03162 (4+1)           leau    4,u
F41B 39               (        forth.asm):03163 (4)             rts
                      (        forth.asm):03164         
F41C 03               (        forth.asm):03165         DZEQ    fcb     3               79-STANDARD (double number extension)
F41D 44303D           (        forth.asm):03166                 fcc     'D0='           ( d -- flag )
F420 F404             (        forth.asm):03167                 fdb     DMINUS
                      (        forth.asm):03168                 RFCS
F422 BDEEC5           (        forth.asm):03169                 RFXT    jsr,OR+5        XT for OR
F425 7EEF31           (        forth.asm):03170                 RFXT    jmp,NULP+5      XT for 0=
                      (        forth.asm):03171         
                      (        forth.asm):03172         * GNU Forth has:
                      (        forth.asm):03173         * f = FLAG(d1.hi==d2.hi ? d1.lo<d2.lo : d1.hi<d2.hi);
                      (        forth.asm):03174         * Comparisons between high cells are signed, but they are unsigned between
                      (        forth.asm):03175         * the low cells.
F428 02               (        forth.asm):03176         DLESS   fcb     2               79-STANDARD (REQ244)
F429 443C             (        forth.asm):03177                 fcc     'D<'            ( d1 d2 -- flag )
F42B F41C             (        forth.asm):03178                 fdb     DZEQ
                      (        forth.asm):03179                 RFCS
F42D BDE4C3           (        forth.asm):03180 (7)             jsr     MIN4PST
                      (        forth.asm):03181         * Data stack structure at this point:
                      (        forth.asm):03182         * ,u    d2.hi                   1 cell
                      (        forth.asm):03183         * 2,u   d2.lo                   1 cell
                      (        forth.asm):03184         * 4,u   d1.hi                   1 cell
                      (        forth.asm):03185         * 6,u   d1.lo                   1 cell
F430 115F             (        forth.asm):03186 (2)             clrf                    A priori return value for FLAG
F432 ECC4             (        forth.asm):03187 (5+0)           ldd     ,u              D2.HI
F434 10A344           (        forth.asm):03188 (6+1)           cmpd    4,u             D1.HI
F437 2611             (        forth.asm):03189 (3)             bne     @term2
F439 EC42             (        forth.asm):03190 (5+1)           ldd     2,u             D2.LO
F43B 10A346           (        forth.asm):03191 (6+1)           cmpd    6,u             D1.LO
F43E 2302             (        forth.asm):03192 (3)             bls     @done
F440 115A             (        forth.asm):03193 (2)     @anstru decf                    #$FF to F
F442 1FF9             (        forth.asm):03194 (4)     @done   tfr     f,b
F444 1D               (        forth.asm):03195 (1)             sex                     Sign extention B to D
F445 ED46             (        forth.asm):03196 (5+1)           std     6,u             FLAG returned as a cell
F447 3346             (        forth.asm):03197 (4+1)           leau    6,u             Drop three cells from the data stack
F449 39               (        forth.asm):03198 (4)             rts
F44A 2FF6             (        forth.asm):03199 (3)     @term2  ble     @done
F44C 20F2             (        forth.asm):03200 (3)             bra     @anstru
                      (        forth.asm):03201         
F44E 05               (        forth.asm):03202         TWOOVER fcb     5               ANSI (Core)
F44F 324F564552       (        forth.asm):03203                 fcc     '2OVER'         ( d1 d2 -- d1 d2 d1 )
F454 F428             (        forth.asm):03204                 fdb     DLESS
                      (        forth.asm):03205                 RFCS
F456 BDE4C3           (        forth.asm):03206 (7)             jsr     MIN4PST         At least four cells need to be stacked up
F459 10EC44           (        forth.asm):03207 (8+1)           ldq     4,u             D:W has MSC:LSC of D1
F45C 1F61             (        forth.asm):03208 (4)             tfr     w,x
F45E BDE80B           (        forth.asm):03209 (7)             jsr     NPUSH
F461 1F01             (        forth.asm):03210 (4)             tfr     d,x
F463 7EE80B           (        forth.asm):03211 (3)             jmp     NPUSH
                      (        forth.asm):03212         
F466 05               (        forth.asm):03213         TWOSWAP fcb     5               ANSI (Core)
F467 3253574150       (        forth.asm):03214                 fcc     '2SWAP'         ( d1 d2 -- d2 d1 )
F46C F44E             (        forth.asm):03215                 fdb     TWOOVER
                      (        forth.asm):03216                 RFCS
F46E BDE4C3           (        forth.asm):03217 (7)             jsr     MIN4PST         At least four cells must be stacked up
F471 AE44             (        forth.asm):03218 (5+1)           ldx     4,u             D1 most significant cell
F473 10AE46           (        forth.asm):03219 (6+1)           ldy     6,u             D1 least significant cell
F476 10ECC4           (        forth.asm):03220 (8+0)           ldq     ,u              D:W has MSC:LSC of D2
F479 10ED44           (        forth.asm):03221 (8+1)           stq     4,u
F47C AFC4             (        forth.asm):03222 (5+0)           stx     ,u
F47E 10AF42           (        forth.asm):03223 (6+1)           sty     2,u
F481 39               (        forth.asm):03224 (4)             rts
                      (        forth.asm):03225         
F482 05               (        forth.asm):03226         TWODROP fcb     5               ANSI (Core)
F483 3244524F50       (        forth.asm):03227                 fcc     '2DROP'         ( x1 x2 -- )
F488 F466             (        forth.asm):03228                 fdb     TWOSWAP
                      (        forth.asm):03229                 RFCS
F48A BDE4B9           (        forth.asm):03230 (7)             jsr     MIN2PST         At least two cells must be stacked up
F48D 3344             (        forth.asm):03231 (4+1)           leau    4,u
F48F 39               (        forth.asm):03232 (4)             rts
                      (        forth.asm):03233         
F490 04               (        forth.asm):03234         TWODUP  fcb     4               ANSI (Core)
F491 32445550         (        forth.asm):03235                 fcc     '2DUP'          ( double -- double double )
F495 F482             (        forth.asm):03236                 fdb     TWODROP
                      (        forth.asm):03237                 RFCS
F497 BDE4B9           (        forth.asm):03238 (7)             jsr     MIN2PST         At least two cells need to be stacked up
F49A 10ECC4           (        forth.asm):03239 (8+0)           ldq     ,u              D:W has MSC:LSC of DOUBLE
F49D 1F61             (        forth.asm):03240 (4)             tfr     w,x
F49F BDE80B           (        forth.asm):03241 (7)             jsr     NPUSH
F4A2 1F01             (        forth.asm):03242 (4)             tfr     d,x
F4A4 7EE80B           (        forth.asm):03243 (3)             jmp     NPUSH
                      (        forth.asm):03244         
F4A7 02               (        forth.asm):03245         TWOSTOR fcb     2               ANSI (Core)
F4A8 3221             (        forth.asm):03246                 fcc     '2!'            ( x1 x2 a-addr -- )
F4AA F490             (        forth.asm):03247                 fdb     TWODUP
                      (        forth.asm):03248                 RFCS
F4AC BDE4BE           (        forth.asm):03249 (7)             jsr     MIN3PST         At least three cells need to be stacked up
F4AF 10EC42           (        forth.asm):03250 (8+1)           ldq     2,u             DOUBLE to D:W
F4B2 10EDD4           (        forth.asm):03251 (8+3)           stq     [,u]            Store DOUBLE to ADDR
F4B5 3346             (        forth.asm):03252 (4+1)           leau    6,u             Drop three cells from the user stack
F4B7 39               (        forth.asm):03253 (4)             rts
                      (        forth.asm):03254         
F4B8 02               (        forth.asm):03255         TWOFTCH fcb     2               ANSI (Core)
F4B9 3240             (        forth.asm):03256                 fcc     '2@'            ( a-addr -- x1 x2 )
F4BB F4A7             (        forth.asm):03257                 fdb     TWOSTOR
                      (        forth.asm):03258                 RFCS
F4BD BDE4B4           (        forth.asm):03259 (7)             jsr     MIN1PST         At least cell needs to be stacked up
F4C0 10ECD4           (        forth.asm):03260 (8+3)           ldq     [,u]            D:W has MSC:LSC of DBLADDR @
F4C3 10A7C4           (        forth.asm):03261 (6+0)           stw     ,u              Least significant cell stacked in place
F4C6 1F01             (        forth.asm):03262 (4)             tfr     d,x             Most significant cell goes through standard push
F4C8 7EE80B           (        forth.asm):03263 (3)             jmp     NPUSH
                      (        forth.asm):03264         
F4CB 07               (        forth.asm):03265         TONUMBR fcb     7               ANSI (Core)
F4CC 3E4E554D424552   (        forth.asm):03266                 fcc     '>NUMBER'       ( ud1 c-addr1 u1 -- ud2 c-addr2 u2 )
F4D3 F4B8             (        forth.asm):03267                 fdb     TWOFTCH
                      (        forth.asm):03268                 RFCS
F4D5 BDE4C3           (        forth.asm):03269 (7)             jsr     MIN4PST         At least 4 cells need to be stacked up
F4D8 BDE450           (        forth.asm):03270 (7)             jsr     CKBASE          Check for supported BASE. No return if not
F4DB AE42             (        forth.asm):03271 (5+1)           ldx     2,u             C-ADDR1 to X
F4DD ECC4             (        forth.asm):03272 (5+0)   @cvloop ldd     ,u              Check U1. End of input string reached?
F4DF 2770             (        forth.asm):03273 (3)             beq     @cvdone         Yes--conversion is done
F4E1 E684             (        forth.asm):03274 (4+0)           ldb     ,x
                      (        forth.asm):03275         * B has the ASCII representation of something that may or may not be a valid
                      (        forth.asm):03276         * digit, expressed in BASE (alias (byte)UBASE+1). If it does, multiply D1 by
                      (        forth.asm):03277         * BASE and add that to D1 (aka D2 on exit). Then add DIGIT on the top of it.
F4E3 C030             (        forth.asm):03278 (2)             subb    #'0             Minimal ASCII value condition met?
F4E5 256A             (        forth.asm):03279 (3)             blo     @cvdone         No. Out of range. ,X cannot be a valid digit
F4E7 C10A             (        forth.asm):03280 (2)             cmpb    #10
F4E9 2510             (        forth.asm):03281 (3)             blo     @cvnolt         No letter in potential BASE
                      (        forth.asm):03282                 IFEQ    CSSNTVE
F4EB C111             (        forth.asm):03283 (2)             cmpb    #'A-'0
F4ED 2562             (        forth.asm):03284 (3)             blo     @cvdone         Greater than 9 but lower than A
F4EF C131             (        forth.asm):03285 (2)             cmpb    #'a-'0
F4F1 2506             (        forth.asm):03286 (3)             blo     @cvisuc         Upper case already
F4F3 C14A             (        forth.asm):03287 (2)             cmpb    #'z-'0
F4F5 225A             (        forth.asm):03288 (3)             bhi     @cvdone         Definitely out of range
F4F7 C020             (        forth.asm):03289 (2)             subb    #'a-'A          To upper case
                      (        forth.asm):03290                 ENDC                    CSSNTVE
F4F9 C007             (        forth.asm):03291 (2)     @cvisuc subb    #'A-':          A-Z to number
F4FB D123             (        forth.asm):03292 (3)     @cvnolt cmpb    UBASE+1         B has a digit. Make sure it's less than BASE
F4FD 2452             (        forth.asm):03293 (3)             bhs     @cvdone         Number under scrutiny is >= BASE
F4FF 3276             (        forth.asm):03294 (4+1)           leas    -10,s           Allocate scratch space
F501 6FE4             (        forth.asm):03295 (6+0)           clr     ,s
F503 E761             (        forth.asm):03296 (4+1)           stb     1,s
                      (        forth.asm):03297         * System and user stack structures are as follows:
                      (        forth.asm):03298         * ,s    current digit (1 cell)
                      (        forth.asm):03299         * 2,s   D0*B (1 cell)
                      (        forth.asm):03300         * 4,s   D1*B (1 cell)
                      (        forth.asm):03301         * 6,s   D2*B (1 cell)
                      (        forth.asm):03302         * 8,s   D3*B (1 cell)
                      (        forth.asm):03303         * ,u    U1 (1 cell)
                      (        forth.asm):03304         * 2,u   C-ADDR1 (1 cell)
                      (        forth.asm):03305         * 4,u   D1H most significant cell
                      (        forth.asm):03306         * 6,u   D1L least significant cell
F505 1F37             (        forth.asm):03307 (4)             tfr     u,v             Backup U
F507 3348             (        forth.asm):03308 (4+1)           leau    8,u             Point one byte after D1LL
F509 3162             (        forth.asm):03309 (4+1)           leay    2,s             Point to D0*B
F50B 118604           (        forth.asm):03310 (3)             lde     #4              Four products to go through
F50E A6C2             (        forth.asm):03311 (4+1)   @cvmul  lda     ,-u
F510 D623             (        forth.asm):03312 (3)             ldb     UBASE+1
F512 3D               (        forth.asm):03313 (10)            mul
F513 EDA1             (        forth.asm):03314 (5+2)           std     ,y++
F515 114A             (        forth.asm):03315 (2)             dece
F517 26F5             (        forth.asm):03316 (3)             bne     @cvmul
F519 1F73             (        forth.asm):03317 (4)             tfr     v,u             Restore U
                      (        forth.asm):03318         *
F51B A663             (        forth.asm):03319 (4+1)           lda     3,s             D0*B.L
F51D A747             (        forth.asm):03320 (4+1)           sta     7,u             D1L.L
                      (        forth.asm):03321         *
F51F A662             (        forth.asm):03322 (4+1)           lda     2,s             D0*B.H
F521 AB65             (        forth.asm):03323 (4+1)           adda    5,s             D1*B.L
F523 A746             (        forth.asm):03324 (4+1)           sta     6,u             D1L.H
                      (        forth.asm):03325         *
F525 A664             (        forth.asm):03326 (4+1)           lda     4,s             D1*B.H
F527 A967             (        forth.asm):03327 (4+1)           adca    7,s             D2*B.L
F529 A745             (        forth.asm):03328 (4+1)           sta     5,u             D1H.L
                      (        forth.asm):03329         *
F52B A666             (        forth.asm):03330 (4+1)           lda     6,s             D2*B.H
F52D A969             (        forth.asm):03331 (4+1)           adca    9,s             D3*B.L
F52F A744             (        forth.asm):03332 (4+1)           sta     4,u             D1H.H
                      (        forth.asm):03333         *
F531 2521             (        forth.asm):03334 (3)             bcs     @cvovf          Out of range error if carry is set
F533 6D68             (        forth.asm):03335 (5+1)           tst     8,s             D3*B.H
F535 261D             (        forth.asm):03336 (3)             bne     @cvovf          That one should be zero
                      (        forth.asm):03337         *
F537 EC46             (        forth.asm):03338 (5+1)           ldd     6,u             D1L
F539 E3E4             (        forth.asm):03339 (5+0)           addd    ,s              DIGIT
F53B ED46             (        forth.asm):03340 (5+1)           std     6,u
F53D EC44             (        forth.asm):03341 (5+1)           ldd     4,u             D1H
F53F 10890000         (        forth.asm):03342 (4)             adcd    #0              Potential carry from lower cell
F543 ED44             (        forth.asm):03343 (5+1)           std     4,u
F545 326A             (        forth.asm):03344 (4+1)           leas    10,s            Release scratch space
                      (        forth.asm):03345         * Update the count of unconverted characters (ultimately U2)
F547 ECC4             (        forth.asm):03346 (5+0)           ldd     ,u
F549 104A             (        forth.asm):03347 (2)             decd
F54B EDC4             (        forth.asm):03348 (5+0)           std     ,u
F54D 3001             (        forth.asm):03349 (4+1)           leax    1,x             Point to the next character in the input string
F54F 208C             (        forth.asm):03350 (3)             bra     @cvloop         Here we go again
F551 AF42             (        forth.asm):03351 (5+1)   @cvdone stx     2,u             Set C-ADDR2
F553 39               (        forth.asm):03352 (4)             rts
F554 C604             (        forth.asm):03353 (2)     @cvovf  ldb     #4              Out of range
F556 BDE781           (        forth.asm):03354 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):03355         
F559 02               (        forth.asm):03356         CVTE    fcb     2               ANSI (Core)
F55A 233E             (        forth.asm):03357                 fcc     '#>'            ( xd -- c-addr u )
F55C F4CB             (        forth.asm):03358                 fdb     TONUMBR
                      (        forth.asm):03359                 RFCS
F55E BDE819           (        forth.asm):03360 (7)             jsr     NPOP
F561 BDE819           (        forth.asm):03361 (7)             jsr     NPOP            Drop 2 cells from the data stack
F564 8E01E3           (        forth.asm):03362 (3)             ldx     #APADBUF
F567 3610             (        forth.asm):03363                 UCNPUSH
F569 BDE233           (        forth.asm):03364 (7)             jsr     SLEN
F56C 1F61             (        forth.asm):03365 (4)             tfr     w,x
F56E 3610             (        forth.asm):03366                 UCNPUSH
F570 39               (        forth.asm):03367 (4)             rts
                      (        forth.asm):03368         
F571 04               (        forth.asm):03369         SIGN    fcb     4               ANSI (Core)
F572 5349474E         (        forth.asm):03370                 fcc     'SIGN'          ( n -- )
F576 F559             (        forth.asm):03371                 fdb     CVTE
                      (        forth.asm):03372                 RFCS
F578 BDE819           (        forth.asm):03373 (7)             jsr     NPOP
F57B 1F10             (        forth.asm):03374 (4)             tfr     x,d
F57D 104D             (        forth.asm):03375 (2)             tstd
F57F 2C04             (        forth.asm):03376 (3)             bge     @sign1
F581 C62D             (        forth.asm):03377 (2)             ldb     #'-
F583 2066             (        forth.asm):03378 (3)             bra     PREAPAD
F585 39               (        forth.asm):03379 (4)     @sign1  rts
                      (        forth.asm):03380         
F586 04               (        forth.asm):03381         HOLD    fcb     4               ANSI (Core)
F587 484F4C44         (        forth.asm):03382                 fcc     'HOLD'          ( char -- )
F58B F571             (        forth.asm):03383                 fdb     SIGN
                      (        forth.asm):03384                 RFCS
F58D BDE819           (        forth.asm):03385 (7)             jsr     NPOP
F590 1F10             (        forth.asm):03386 (4)             tfr     x,d
F592 2057             (        forth.asm):03387 (3)             bra     PREAPAD         B is inserted at the beginning of APADBUF.
                      (        forth.asm):03388         
F594 02               (        forth.asm):03389         SHARPS  fcb     2               ANSI (Core)
F595 2353             (        forth.asm):03390                 fcc     '#S'            ( ud1 -- ud2 )
F597 F586             (        forth.asm):03391                 fdb     HOLD
                      (        forth.asm):03392                 RFCS
F599 8601             (        forth.asm):03393 (2)             lda     #1
F59B 973E             (        forth.asm):03394 (3)             sta     CVTFCN          CVT function #1 is #S
F59D 2006             (        forth.asm):03395 (3)             bra     CVT0
                      (        forth.asm):03396         
                      (        forth.asm):03397         * Unsigned double on the top of the data stack gets divided by BASE.
                      (        forth.asm):03398         * The division algorithm implemented here is the binary long division.
                      (        forth.asm):03399         * See https://en.wikipedia.org/wiki/Division_algorithm for more information.
                      (        forth.asm):03400         * Remainder (converted to a character) gets prepended to APAD.
F59F 01               (        forth.asm):03401         CVT     fcb     1               ANSI (Core)
F5A0 23               (        forth.asm):03402                 fcc     '#'             ( ud1 -- ud2 )
F5A1 F594             (        forth.asm):03403                 fdb     SHARPS
                      (        forth.asm):03404                 RFCS
F5A3 0F3E             (        forth.asm):03405 (5)             clr     CVTFCN          CVT function 0 is #
F5A5 BDE819           (        forth.asm):03406 (7)     CVT0    jsr     NPOP
F5A8 1F12             (        forth.asm):03407 (4)             tfr     x,y
F5AA BDE819           (        forth.asm):03408 (7)             jsr     NPOP
                      (        forth.asm):03409         * Stack structure:
                      (        forth.asm):03410         * ,s    Remainder               16 bits
                      (        forth.asm):03411         * 2,s   Bitmask high            16 bits
                      (        forth.asm):03412         * 4,s   Bitmask low             16 bits
                      (        forth.asm):03413         * 6,s   Quotient high           16 bits
                      (        forth.asm):03414         * 8,s   Quotient low            16 bits
                      (        forth.asm):03415         * 10,s  Numerator high          16 bits
                      (        forth.asm):03416         * 12,s  Numerator low           16 bits
                      (        forth.asm):03417         * 14,s  Denominator             16 bits
                      (        forth.asm):03418         * 16,s  Remainder carry         8 bits
F5AD 32E8EF           (        forth.asm):03419 (4+1)   CVT1    leas    -17,s
F5B0 DC22             (        forth.asm):03420 (4)             ldd     UBASE
F5B2 ED6E             (        forth.asm):03421 (5+1)           std     14,s            Denominator
F5B4 AF6C             (        forth.asm):03422 (5+1)           stx     12,s            Numerator least significant cell
F5B6 10AF6A           (        forth.asm):03423 (6+1)           sty     10,s            Numerator most significant cell
F5B9 8D43             (        forth.asm):03424 (6)             bsr     DBDIVSG
                      (        forth.asm):03425         * Convert the remainder to a digit expressed in BASE.
F5BB E661             (        forth.asm):03426 (4+1)           ldb     1,s
F5BD 8630             (        forth.asm):03427 (2)             lda     #'0
F5BF C10A             (        forth.asm):03428 (2)             cmpb    #10             B has the digit we want converted to BASE
F5C1 2502             (        forth.asm):03429 (3)             bcs     @cvtdgt
F5C3 8637             (        forth.asm):03430 (2)             lda     #'A-10
F5C5 103089           (        forth.asm):03431 (4)     @cvtdgt addr    a,b
F5C8 8D21             (        forth.asm):03432 (6)             bsr     PREAPAD         Prepend B to the string currently in PAD
F5CA 0D3E             (        forth.asm):03433 (4)             tst     CVTFCN
F5CC 2711             (        forth.asm):03434 (3)             beq     @cvtend         Function 0 is straight #, i.e. we're done here
                      (        forth.asm):03435         * Function 1 is #S, we iterate unless the quotient is 0.
F5CE EC68             (        forth.asm):03436 (5+1)           ldd     8,s
F5D0 10AA66           (        forth.asm):03437 (6+1)           ord     6,s
F5D3 270A             (        forth.asm):03438 (3)             beq     @cvtend
F5D5 AE68             (        forth.asm):03439 (5+1)           ldx     8,s             New numerator low
F5D7 10AE66           (        forth.asm):03440 (6+1)           ldy     6,s             New numerator high
F5DA 32E811           (        forth.asm):03441 (4+1)           leas    17,s            Discard the stack frame
F5DD 20CE             (        forth.asm):03442 (3)             bra     CVT1            And go at it again
                      (        forth.asm):03443         * Push back the quotient on the data stack (low then high cell).
F5DF AE68             (        forth.asm):03444 (5+1)   @cvtend ldx     8,s
F5E1 3610             (        forth.asm):03445                 UCNPUSH
F5E3 AE66             (        forth.asm):03446 (5+1)           ldx     6,s
F5E5 3610             (        forth.asm):03447                 UCNPUSH
F5E7 32E811           (        forth.asm):03448 (4+1)           leas    17,s            Discard the stack frame
F5EA 39               (        forth.asm):03449 (4)             rts
                      (        forth.asm):03450         
                      (        forth.asm):03451         * Insert the character in B in front of the string at APADBUF.
F5EB 8E01E3           (        forth.asm):03452 (3)     PREAPAD ldx     #APADBUF
F5EE BDE233           (        forth.asm):03453 (7)             jsr     SLEN
F5F1 103061           (        forth.asm):03454 (4)             addr    w,x             X points to the PAD string's NUL terminator
F5F4 105C             (        forth.asm):03455 (2)             incw                    Include the terminator
F5F6 3101             (        forth.asm):03456 (4+1)           leay    1,x
F5F8 113912           (        forth.asm):03457 (6+?)           tfm     x-,y-
F5FB D7E3             (        forth.asm):03458 (3)             stb     APADBUF
F5FD 39               (        forth.asm):03459 (4)             rts
                      (        forth.asm):03460         
                      (        forth.asm):03461         * Double (numerator high/low) gets divided by a single cell number. Please note
                      (        forth.asm):03462         * that this is a strictly unsigned business. Input parameters are supposed to
                      (        forth.asm):03463         * have been set up by the caller on the system stack. The quotient (high/low)
                      (        forth.asm):03464         * and remainder are returned the same way. Current users of this routine are
                      (        forth.asm):03465         * CVT (#) and UMSLMOD (UM/MOD).
                      (        forth.asm):03466         *
                      (        forth.asm):03467         * Stack structure:
                      (        forth.asm):03468         * ,s    Return address          16 bits
                      (        forth.asm):03469         * 2,s   Remainder               16 bits
                      (        forth.asm):03470         * 4,s   Bitmask high            16 bits
                      (        forth.asm):03471         * 6,s   Bitmask low             16 bits
                      (        forth.asm):03472         * 8,s   Quotient high           16 bits
                      (        forth.asm):03473         * 10,s  Quotient low            16 bits
                      (        forth.asm):03474         * 12,s  Numerator high          16 bits
                      (        forth.asm):03475         * 14,s  Numerator low           16 bits
                      (        forth.asm):03476         * 16,s  Denominator             16 bits
                      (        forth.asm):03477         * 18,s  Remainder carry         8 bits
                      (        forth.asm):03478         *
F5FE CC8000           (        forth.asm):03479 (3)     DBDIVSG ldd     #$8000
F601 ED64             (        forth.asm):03480 (5+1)           std     4,s             Bitmask high
F603 4F               (        forth.asm):03481 (1)             clra
F604 ED66             (        forth.asm):03482 (5+1)           std     6,s             Bitmask low
F606 ED68             (        forth.asm):03483 (5+1)           std     8,s             Quotient high
F608 ED6A             (        forth.asm):03484 (5+1)           std     10,s            Quotient low
F60A ED62             (        forth.asm):03485 (5+1)           std     2,s             Remainder
F60C 11C61F           (        forth.asm):03486 (3)             ldf     #31             32 bits to go
F60F 6863             (        forth.asm):03487 (6+1)   @cvbeg  lsl     3,s
F611 6962             (        forth.asm):03488 (6+1)           rol     2,s             R := R << 1
F613 1FA8             (        forth.asm):03489 (4)             tfr     cc,a
F615 8401             (        forth.asm):03490 (2)             anda    #CFLAG
F617 A7E812           (        forth.asm):03491 (4+1)           sta     18,s            Save CFLAG after left shift of the remainder
                      (        forth.asm):03492         * We need to extract bit <f> (i) of the numerator. Since (i) varies from 31
                      (        forth.asm):03493         * downto 0, all we need to do is to shift left a 32 bit quantity and isolate
                      (        forth.asm):03494         * the carry flag as the bit of interest.
F61A EC6E             (        forth.asm):03495 (5+1)           ldd     14,s            Numerator low
F61C 1048             (        forth.asm):03496 (2)             lsld
F61E ED6E             (        forth.asm):03497 (5+1)           std     14,s
F620 EC6C             (        forth.asm):03498 (5+1)           ldd     12,s            Numerator high
F622 1049             (        forth.asm):03499 (2)             rold
F624 ED6C             (        forth.asm):03500 (5+1)           std     12,s
F626 1FA8             (        forth.asm):03501 (4)             tfr     cc,a
F628 8401             (        forth.asm):03502 (2)             anda    #CFLAG          CFLAG is 1, which is ideal here
F62A AA63             (        forth.asm):03503 (4+1)           ora     3,s             R(0) := N(i)
F62C A763             (        forth.asm):03504 (4+1)           sta     3,s             Update the remainder
F62E 1F89             (        forth.asm):03505 (4)             tfr     a,b             Remainder LSB
F630 A662             (        forth.asm):03506 (4+1)           lda     2,s             Remainder MSB
F632 6DE812           (        forth.asm):03507 (5+1)           tst     18,s
F635 2606             (        forth.asm):03508 (3)             bne     @frcsub         Carry was set on left shift of the remainder
F637 10A3E810         (        forth.asm):03509 (6+1)           cmpd    16,s            Denominator
F63B 2513             (        forth.asm):03510 (3)             blo     @cvshft
F63D A3E810           (        forth.asm):03511 (5+1)   @frcsub subd    16,s
F640 ED62             (        forth.asm):03512 (5+1)           std     2,s             R := R - D
                      (        forth.asm):03513         * Q(i) := 1 (use the bitmask).
F642 EC68             (        forth.asm):03514 (5+1)           ldd     8,s             Quotient high
F644 10AA64           (        forth.asm):03515 (6+1)           ord     4,s             Bitmask high
F647 ED68             (        forth.asm):03516 (5+1)           std     8,s
F649 EC6A             (        forth.asm):03517 (5+1)           ldd     10,s            Quotient low
F64B 10AA66           (        forth.asm):03518 (6+1)           ord     6,s             Bitmask low
F64E ED6A             (        forth.asm):03519 (5+1)           std     10,s
                      (        forth.asm):03520         * Shift the bitmask 1 bit right.
F650 EC64             (        forth.asm):03521 (5+1)   @cvshft ldd     4,s
F652 1044             (        forth.asm):03522 (2)             lsrd
F654 ED64             (        forth.asm):03523 (5+1)           std     4,s
F656 EC66             (        forth.asm):03524 (5+1)           ldd     6,s
F658 1046             (        forth.asm):03525 (2)             rord
F65A ED66             (        forth.asm):03526 (5+1)           std     6,s
F65C 115A             (        forth.asm):03527 (2)             decf
F65E 2CAF             (        forth.asm):03528 (3)             bge     @cvbeg
F660 39               (        forth.asm):03529 (4)             rts
                      (        forth.asm):03530         
F661 02               (        forth.asm):03531         CVTB    fcb     2               ANSI (Core)
F662 3C23             (        forth.asm):03532                 fcc     '<#'            ( -- )
F664 F59F             (        forth.asm):03533                 fdb     CVT
                      (        forth.asm):03534                 RFCS
F666 BDE450           (        forth.asm):03535 (7)             jsr     CKBASE          Sanity check. BASE can be altered at any time
F669 0FE3             (        forth.asm):03536 (5)             clr     APADBUF
F66B 39               (        forth.asm):03537 (4)             rts
                      (        forth.asm):03538         
F66C 01               (        forth.asm):03539         DOT     fcb     1               ANSI (Core)
F66D 2E               (        forth.asm):03540                 fcc     '.'             ( n -- )
F66E F661             (        forth.asm):03541                 fdb     CVTB
                      (        forth.asm):03542                 RFCS
F670 8601             (        forth.asm):03543 (2)             lda     #1
F672 9741             (        forth.asm):03544 (3)             sta     CVISSGN         Force a signed number conversion
F674 BDE819           (        forth.asm):03545 (7)     PTOP0   jsr     NPOP            N to X
F677 BDE460           (        forth.asm):03546 (7)             jsr     CVNSTR
F67A 8E044C           (        forth.asm):03547 (3)             ldx     #TBUFF
F67D 8620             (        forth.asm):03548 (2)             lda     #SP
F67F A180             (        forth.asm):03549 (4+1)   @ptop1  cmpa    ,x+             Skip leading spaces
F681 27FC             (        forth.asm):03550 (3)             beq     @ptop1
F683 301F             (        forth.asm):03551 (4+1)           leax    -1,x            Point to actual string start address
F685 BDE2E0           (        forth.asm):03552 (7)             jsr     PUTS
F688 7EE2CD           (        forth.asm):03553 (3)             jmp     PUTCH           Extra space after printing a number
                      (        forth.asm):03554         
F68B 02               (        forth.asm):03555         UDOT    fcb     2               ANSI (Core)
F68C 552E             (        forth.asm):03556                 fcc     'U.'            ( u -- )
F68E F66C             (        forth.asm):03557                 fdb     DOT
                      (        forth.asm):03558                 RFCS
F690 0F41             (        forth.asm):03559 (5)             clr     CVISSGN         Conversion is unsigned
F692 20E0             (        forth.asm):03560 (3)             bra     PTOP0
                      (        forth.asm):03561         
F694 02               (        forth.asm):03562         DOTR    fcb     2               79-STANDARD (REF)
F695 2E52             (        forth.asm):03563                 fcc     '.R'
F697 F68B             (        forth.asm):03564                 fdb     UDOT
                      (        forth.asm):03565                 RFCS
F699 8601             (        forth.asm):03566 (2)             lda     #1
F69B 9741             (        forth.asm):03567 (3)             sta     CVISSGN
F69D BDE819           (        forth.asm):03568 (7)     DOTR0   jsr     NPOP
F6A0 3410             (        forth.asm):03569 (4+2)           pshs    x               Length parameter value
F6A2 BDE819           (        forth.asm):03570 (7)             jsr     NPOP
F6A5 BDE460           (        forth.asm):03571 (7)             jsr     CVNSTR
F6A8 8E044C           (        forth.asm):03572 (3)             ldx     #TBUFF
F6AB 8620             (        forth.asm):03573 (2)             lda     #SP
F6AD A180             (        forth.asm):03574 (4+1)   @dotr1  cmpa    ,x+
F6AF 27FC             (        forth.asm):03575 (3)             beq     @dotr1          Skip leading spaces
F6B1 301F             (        forth.asm):03576 (4+1)           leax    -1,x
F6B3 BDE233           (        forth.asm):03577 (7)             jsr     SLEN            String length is returned in W
F6B6 3506             (        forth.asm):03578 (4+2)           puls    d
F6B8 1E06             (        forth.asm):03579 (5)             exg     d,w
F6BA 103206           (        forth.asm):03580 (4)             subr    d,w
F6BD 2F0D             (        forth.asm):03581 (3)             ble     @dotr3
F6BF 8620             (        forth.asm):03582 (2)             lda     #SP
F6C1 105D             (        forth.asm):03583 (2)     @dotr2  tstw
F6C3 2707             (        forth.asm):03584 (3)             beq     @dotr3
F6C5 BDE2CD           (        forth.asm):03585 (7)             jsr     PUTCH
F6C8 105A             (        forth.asm):03586 (2)             decw
F6CA 20F5             (        forth.asm):03587 (3)             bra     @dotr2
F6CC 7EE2E0           (        forth.asm):03588 (3)     @dotr3  jmp     PUTS
                      (        forth.asm):03589         
F6CF 03               (        forth.asm):03590         UDOTR   fcb     3               79-STANDARD (REF216)
F6D0 552E52           (        forth.asm):03591                 fcc     'U.R'
F6D3 F694             (        forth.asm):03592                 fdb     DOTR
                      (        forth.asm):03593                 RFCS
F6D5 0F41             (        forth.asm):03594 (5)             clr     CVISSGN
F6D7 20C4             (        forth.asm):03595 (3)             bra     DOTR0
                      (        forth.asm):03596         
F6D9 02               (        forth.asm):03597         BL      fcb     2               ANSI (Core)
F6DA 424C             (        forth.asm):03598                 fcc     'BL'            ( -- char )
F6DC F6CF             (        forth.asm):03599                 fdb     UDOTR
                      (        forth.asm):03600                 RFCS
F6DE 8E0020           (        forth.asm):03601 (3)             ldx     #SP
F6E1 7EE80B           (        forth.asm):03602 (3)             jmp     NPUSH
                      (        forth.asm):03603         
F6E4 05               (        forth.asm):03604         SPACE   fcb     5               ANSI (Core)
F6E5 5350414345       (        forth.asm):03605                 fcc     'SPACE'         ( -- )
F6EA F6D9             (        forth.asm):03606                 fdb     BL
                      (        forth.asm):03607                 RFCS
F6EC 8620             (        forth.asm):03608 (2)             lda     #SP
F6EE 7EE2CD           (        forth.asm):03609 (3)             jmp     PUTCH
                      (        forth.asm):03610         
F6F1 06               (        forth.asm):03611         SPACES  fcb     6               ANSI (Core)
F6F2 535041434553     (        forth.asm):03612                 fcc     'SPACES'        ( n -- )
F6F8 F6E4             (        forth.asm):03613                 fdb     SPACE
                      (        forth.asm):03614                 RFCS
F6FA BDE819           (        forth.asm):03615 (7)             jsr     NPOP
F6FD 8620             (        forth.asm):03616 (2)             lda     #SP
F6FF 1F16             (        forth.asm):03617 (4)             tfr     x,w
F701 105D             (        forth.asm):03618 (2)             tstw
F703 2601             (        forth.asm):03619 (3)     @loop   bne     @cont
F705 39               (        forth.asm):03620 (4)             rts
F706 BDE2CD           (        forth.asm):03621 (7)     @cont   jsr     PUTCH
F709 105A             (        forth.asm):03622 (2)             decw
F70B 20F6             (        forth.asm):03623 (3)             bra     @loop
                      (        forth.asm):03624         
F70D 04               (        forth.asm):03625         PAGE    fcb     4               79-STANDARD (REF)
F70E 50414745         (        forth.asm):03626                 fcc     'PAGE'
F712 F6F1             (        forth.asm):03627                 fdb     SPACES
                      (        forth.asm):03628                 RFCS
F714 8EFE09           (        forth.asm):03629 (3)             ldx     #CSVT100
F717 7EE2E0           (        forth.asm):03630 (3)             jmp     PUTS
                      (        forth.asm):03631         
F71A 02               (        forth.asm):03632         CRLF    fcb     2               ANSI (Core)
F71B 4352             (        forth.asm):03633                 fcc     'CR'            ( -- )
F71D F70D             (        forth.asm):03634                 fdb     PAGE
                      (        forth.asm):03635                 RFCS
F71F 7EE2ED           (        forth.asm):03636 (3)             jmp     PUTCR
                      (        forth.asm):03637         
F722 03               (        forth.asm):03638         PAD     fcb     3               79-STANDARD (REQ226)
F723 504144           (        forth.asm):03639                 fcc     'PAD'
F726 F71A             (        forth.asm):03640                 fdb     CRLF
                      (        forth.asm):03641                 RFCS
F728 8E018F           (        forth.asm):03642 (3)             ldx     #PADBUF
F72B 7EE80B           (        forth.asm):03643 (3)             jmp     NPUSH
                      (        forth.asm):03644         
F72E 04               (        forth.asm):03645         TYPE    fcb     4               79-STANDARD (REQ222)
F72F 54595045         (        forth.asm):03646                 fcc     'TYPE'          ( c-addr u -- )
F733 F722             (        forth.asm):03647                 fdb     PAD
                      (        forth.asm):03648                 RFCS
F735 BDE819           (        forth.asm):03649 (7)             jsr     NPOP            Character count (signed)
F738 1F16             (        forth.asm):03650 (4)             tfr     x,w
F73A BDE819           (        forth.asm):03651 (7)             jsr     NPOP            Buffer address
F73D 105D             (        forth.asm):03652 (2)             tstw                    
F73F 2601             (        forth.asm):03653 (3)     @loop   bne     @cont
F741 39               (        forth.asm):03654 (4)             rts
F742 A680             (        forth.asm):03655 (4+1)   @cont   lda     ,x+
F744 BDE2CD           (        forth.asm):03656 (7)             jsr     PUTCH
F747 105A             (        forth.asm):03657 (2)             decw
F749 20F4             (        forth.asm):03658 (3)             bra     @loop
                      (        forth.asm):03659         
F74B 05               (        forth.asm):03660         COUNT   fcb     5               ANSI (Core)
F74C 434F554E54       (        forth.asm):03661                 fcc     'COUNT'         ( c-addr1 -- c-addr2 u )
F751 F72E             (        forth.asm):03662                 fdb     TYPE
                      (        forth.asm):03663                 RFCS
F753 BDE819           (        forth.asm):03664 (7)             jsr     NPOP            C-ADDR1 to X
F756 E680             (        forth.asm):03665 (4+1)           ldb     ,x+             B has LSB(U) and X has C-ADDR2
F758 3610             (        forth.asm):03666                 UCNPUSH                 C-ADDR2 to the data stack (B is preserved)
F75A 4F               (        forth.asm):03667 (1)             clra
F75B 1F01             (        forth.asm):03668 (4)             tfr     d,x
F75D 7EE80B           (        forth.asm):03669 (3)             jmp     NPUSH           U to the data stack
                      (        forth.asm):03670         
F760 06               (        forth.asm):03671         ACCEPT  fcb     6               ANSI (Core)
F761 414343455054     (        forth.asm):03672                 fcc     'ACCEPT'        ( c-addr +n1 -- +n2 )
F767 F74B             (        forth.asm):03673                 fdb     COUNT
                      (        forth.asm):03674                 RFCS
F769 BDE819           (        forth.asm):03675 (7)             jsr     NPOP
F76C 1F10             (        forth.asm):03676 (4)             tfr     x,d             Buffer length to B
F76E BDE819           (        forth.asm):03677 (7)             jsr     NPOP            Buffer address to X. B is preserved
F771 BDE303           (        forth.asm):03678 (7)             jsr     GETS            Input character count is returned via B
F774 4F               (        forth.asm):03679 (1)             clra
F775 3606             (        forth.asm):03680 (4+2)           pshu    d               This saves us "tfr d,x" and "UCNPUSH"
F777 39               (        forth.asm):03681 (4)             rts
                      (        forth.asm):03682         
F778 49               (        forth.asm):03683         TERPRET fcb     $49             79-STANDARD (REF) I make this compile time only
F779 494E544552505245 (        forth.asm):03684                 fcc     'INTERPRET'     ( -- )
     54
F782 F760             (        forth.asm):03685                 fdb     ACCEPT
                      (        forth.asm):03686                 RFCS
                      (        forth.asm):03687         * Obtain a base buffer address based on the value of BLK.
F784 9E2C             (        forth.asm):03688 (4)             ldx     UBLK
F786 260B             (        forth.asm):03689 (3)             bne     @isblk
                      (        forth.asm):03690         * A Zero BLK value indicates the console OR a counted string set up by EVALUATE.
F788 8E0378           (        forth.asm):03691 (3)             ldx     #CMDBUF         Base buffer address for serial line input
F78B 0D4A             (        forth.asm):03692 (4)             tst     SRCID           Counted string?
F78D 2710             (        forth.asm):03693 (3)             beq     @rsolvd         No. Back to the serial console
F78F 9E20             (        forth.asm):03694 (4)             ldx     BSBFADR         BSBFADR and ISELEN have been set up previously
F791 200C             (        forth.asm):03695 (3)             bra     @rsolvd
                      (        forth.asm):03696         * BLK is NZ, map the block in memory.
F793 BDE80B           (        forth.asm):03697 (7)     @isblk  jsr     NPUSH           X has the target block number
F796 BDEACB           (        forth.asm):03698                 RFXT    jsr,BLOCK+8     XT for BLOCK. Map the block in
F799 3710             (        forth.asm):03699                 UCNPOP                  Retrieve buffer address (to X)
                      (        forth.asm):03700         * The physical address of the current block might have changed. This should be
                      (        forth.asm):03701         * reflected by clearing ISEADDR.
F79B 104F             (        forth.asm):03702 (2)             clrd
F79D DD28             (        forth.asm):03703 (4)             std     ISEADDR
F79F 9F20             (        forth.asm):03704 (4)     @rsolvd stx     BSBFADR
                      (        forth.asm):03705         * Note: >IN is supposed to have been set by the caller!
F7A1 DC2A             (        forth.asm):03706 (4)             ldd     UTOIN
F7A3 103001           (        forth.asm):03707 (4)             addr    d,x
F7A6 7EE0CE           (        forth.asm):03708 (3)             jmp     _INTERP         Finally invoke _INTERP.
                      (        forth.asm):03709         
F7A9 04               (        forth.asm):03710         LOAD    fcb     4               ANSI (Block)
F7AA 4C4F4144         (        forth.asm):03711                 fcc     'LOAD'          ( i*x u -- j*x )
F7AE F778             (        forth.asm):03712                 fdb     TERPRET
                      (        forth.asm):03713                 RFCS
F7B0 BDE819           (        forth.asm):03714 (7)             jsr     NPOP            ZFLAG is set by NPOP
F7B3 2601             (        forth.asm):03715 (3)             bne     LOAD1
F7B5 39               (        forth.asm):03716 (4)             rts                     Block 0 is _not_ loadable
F7B6 BDE86A           (        forth.asm):03717 (7)     LOAD1   jsr     SAVINP          Save input parameters. X is preserved
F7B9 9F2C             (        forth.asm):03718 (4)             stx     UBLK            Update BLK with the LOAD argument
F7BB CC0400           (        forth.asm):03719 (3)             ldd     #BLKSIZ         1024 bytes
F7BE DD26             (        forth.asm):03720 (4)             std     ISLEN           Set input stream length
F7C0 104F             (        forth.asm):03721 (2)             clrd
F7C2 974A             (        forth.asm):03722 (3)             sta     SRCID           Not invoked in EVALUATE context
F7C4 DD2A             (        forth.asm):03723 (4)     LOAD2   std     UTOIN           Clear >IN
F7C6 DD28             (        forth.asm):03724 (4)             std     ISEADDR         End of input stream address (included)
                      (        forth.asm):03725         * Map the new BLK in, interpret code from there.
F7C8 8DBA             (        forth.asm):03726                 RFXT    bsr,TERPRET+12  XT for INTERPRET
F7CA BDE885           (        forth.asm):03727 (7)             jsr     RSTINP          Restore input parameters
F7CD 7EE89F           (        forth.asm):03728 (3)             jmp     BKIN2PT         Map BLK in (if needed) and update BSBFADR
                      (        forth.asm):03729         
F7D0 08               (        forth.asm):03730         EVAL    fcb     8               ANSI (Core)
F7D1 4556414C55415445 (        forth.asm):03731                 fcc     'EVALUATE'      ( i * x c-addr u -- j * x )
F7D9 F7A9             (        forth.asm):03732                 fdb     LOAD
                      (        forth.asm):03733                 RFCS
F7DB BDE4B9           (        forth.asm):03734 (7)             jsr     MIN2PST         Need at least 2 parameters on the data stack
                      (        forth.asm):03735         * The whole thing looks like LOAD1 except we do not need to map a block in.
F7DE AE42             (        forth.asm):03736 (5+1)           ldx     2,u             C-ADDR
F7E0 10AEC4           (        forth.asm):03737 (6+0)           ldy     ,u              U
F7E3 3344             (        forth.asm):03738 (4+1)           leau    4,u             Drop 2 cells from the data stack
F7E5 BDE86A           (        forth.asm):03739 (7)             jsr     SAVINP          Save input context. X is preserved
F7E8 9F20             (        forth.asm):03740 (4)             stx     BSBFADR         Set BSBFADR from C-ADDR
F7EA 109F26           (        forth.asm):03741 (5)             sty     ISLEN           Set ISLEN from U
F7ED 86FF             (        forth.asm):03742 (2)             lda     #$FF
F7EF 974A             (        forth.asm):03743 (3)             sta     SRCID           -1 (byte) to SRCID. Invoked in EVALUATE context
F7F1 104F             (        forth.asm):03744 (2)             clrd
F7F3 DD2C             (        forth.asm):03745 (4)             std     UBLK            Target block number is zero
F7F5 20CD             (        forth.asm):03746 (3)             bra     LOAD2           Interpret, restore input context and proceed
                      (        forth.asm):03747         
F7F7 04               (        forth.asm):03748         THRU    fcb     4               ANSI (Block ext)
F7F8 54485255         (        forth.asm):03749                 fcc     'THRU'          ( u1 u2 -- )
F7FC F7D0             (        forth.asm):03750                 fdb     EVAL
                      (        forth.asm):03751                 RFCS
F7FE BDE819           (        forth.asm):03752 (7)             jsr     NPOP
F801 1F12             (        forth.asm):03753 (4)             tfr     x,y             Y has U2 (highblk)
F803 BDE819           (        forth.asm):03754 (7)             jsr     NPOP            X has U1 (lowblk)--both are unsigned numbers
F806 103712           (        forth.asm):03755 (4)     @thrlop cmpr    x,y
F809 2401             (        forth.asm):03756 (3)             bhs     @cont           Limit is >= to the loop index
F80B 39               (        forth.asm):03757 (4)             rts
F80C 3430             (        forth.asm):03758 (4+4)   @cont   pshs    x,y             Backup loop parameters
F80E 3610             (        forth.asm):03759                 UCNPUSH                 Current block number to the data stack
F810 8D9E             (        forth.asm):03760                 RFXT    bsr,LOAD+7      XT for LOAD
F812 3530             (        forth.asm):03761 (4+4)           puls    y,x             Retrieve loop parameters
F814 3001             (        forth.asm):03762 (4+1)           leax    1,x             Iterate over to the next screen
F816 20EE             (        forth.asm):03763 (3)             bra     @thrlop
                      (        forth.asm):03764         
F818 02               (        forth.asm):03765         MILLIS  fcb     2               ANSI (Facility ext)
F819 4D53             (        forth.asm):03766                 fcc     'MS'            ( u -- )
F81B F7F7             (        forth.asm):03767                 fdb     THRU
                      (        forth.asm):03768                 RFCS
F81D BDE819           (        forth.asm):03769 (7)             jsr     NPOP            ZFLAG is set by NPOP
F820 270B             (        forth.asm):03770 (3)             beq     @ms3
F822 CC031A           (        forth.asm):03771 (3)     MILLIS1 ldd     #MSLCNT
F825 104A             (        forth.asm):03772 (2)     @ms2    decd
F827 26FC             (        forth.asm):03773 (3)             bne     @ms2
F829 301F             (        forth.asm):03774 (4+1)           leax    -1,x
F82B 26F5             (        forth.asm):03775 (3)             bne     MILLIS1
F82D 39               (        forth.asm):03776 (4)     @ms3    rts
                      (        forth.asm):03777         
F82E 04               (        forth.asm):03778         KEYP    fcb     4               ANSI (Facility)
F82F 4B45593F         (        forth.asm):03779                 fcc     'KEY?'          ( -- flag )
F833 F818             (        forth.asm):03780                 fdb     MILLIS
                      (        forth.asm):03781                 RFCS
F835 1FC1             (        forth.asm):03782 (4)             tfr     0,x
F837 0D4D             (        forth.asm):03783 (4)             tst     SERBCNT
F839 2702             (        forth.asm):03784 (3)             beq     @done
F83B 301F             (        forth.asm):03785 (4+1)           leax    -1,x            Return the ANSI true
F83D 7EE80B           (        forth.asm):03786 (3)     @done   jmp     NPUSH
                      (        forth.asm):03787         
F840 03               (        forth.asm):03788         KEY     fcb     3               ANSI (Core)
F841 4B4559           (        forth.asm):03789                 fcc     'KEY'           ( -- char )
F844 F82E             (        forth.asm):03790                 fdb     KEYP
                      (        forth.asm):03791                 RFCS
F846 BDE2A1           (        forth.asm):03792 (7)             jsr     GETCH
F849 1F89             (        forth.asm):03793 (4)             tfr     a,b
F84B 4F               (        forth.asm):03794 (1)             clra
F84C 1F01             (        forth.asm):03795 (4)             tfr     d,x
F84E 7EE80B           (        forth.asm):03796 (3)             jmp     NPUSH
                      (        forth.asm):03797         
F851 04               (        forth.asm):03798         EMIT    fcb     4               ANSI (Core)
F852 454D4954         (        forth.asm):03799                 fcc     'EMIT'          ( x -- )
F856 F840             (        forth.asm):03800                 fdb     KEY
                      (        forth.asm):03801                 RFCS
F858 BDE819           (        forth.asm):03802 (7)             jsr     NPOP
F85B 1F10             (        forth.asm):03803 (4)             tfr     x,d
F85D 1F98             (        forth.asm):03804 (4)             tfr     b,a
F85F 7EE2CD           (        forth.asm):03805 (3)             jmp     PUTCH
                      (        forth.asm):03806         
F862 01               (        forth.asm):03807         PLUS    fcb     1               ANSI (Core)
F863 2B               (        forth.asm):03808                 fcc     '+'             ( n1 | u1 n2 | u2 -- n3 | u3 )
F864 F851             (        forth.asm):03809                 fdb     EMIT
                      (        forth.asm):03810                 RFCS
F866 BDE4B9           (        forth.asm):03811 (7)             jsr     MIN2PST         We need at least two cells stacked up
F869 EC42             (        forth.asm):03812 (5+1)           ldd     2,u             N1 to D
F86B E3C4             (        forth.asm):03813 (5+0)           addd    ,u              D has N1+N2
F86D ED42             (        forth.asm):03814 (5+1)           std     2,u             D to N3
F86F 3342             (        forth.asm):03815 (4+1)           leau    2,u             Drop the top cell
F871 39               (        forth.asm):03816 (4)             rts
                      (        forth.asm):03817         
F872 02               (        forth.asm):03818         ONEM    fcb     2               ANSI (Core)
F873 312D             (        forth.asm):03819                 fcc     '1-'            ( n1|u1 -- n2|u2 )
F875 F862             (        forth.asm):03820                 fdb     PLUS
                      (        forth.asm):03821                 RFCS
F877 BDE4B4           (        forth.asm):03822 (7)             jsr     MIN1PST         We need at least one cell stacked up
F87A ECC4             (        forth.asm):03823 (5+0)           ldd     ,u
F87C 104A             (        forth.asm):03824 (2)             decd
F87E EDC4             (        forth.asm):03825 (5+0)           std     ,u
F880 39               (        forth.asm):03826 (4)             rts
                      (        forth.asm):03827         
F881 02               (        forth.asm):03828         ONEP    fcb     2               ANSI (Core)
F882 312B             (        forth.asm):03829                 fcc     '1+'            ( n1|u1 -- n2|u2 )
F884 F872             (        forth.asm):03830                 fdb     ONEM
                      (        forth.asm):03831                 RFCS
F886 BDE4B4           (        forth.asm):03832 (7)             jsr     MIN1PST         We need at least one cell stacked up
F889 ECC4             (        forth.asm):03833 (5+0)           ldd     ,u
F88B 104C             (        forth.asm):03834 (2)             incd
F88D EDC4             (        forth.asm):03835 (5+0)           std     ,u
F88F 39               (        forth.asm):03836 (4)             rts
                      (        forth.asm):03837         
F890 05               (        forth.asm):03838         CELLP   fcb     5               ANSI (Core)
F891 43454C4C2B       (        forth.asm):03839                 fcc     'CELL+'         ( a-addr1 -- a-addr2 )
F896 F881             (        forth.asm):03840                 fdb     ONEP
                      (        forth.asm):03841                 RFCS
F898 BDE4B4           (        forth.asm):03842 (7)             jsr     MIN1PST         We need at least one cell stacked up
F89B ECC4             (        forth.asm):03843 (5+0)           ldd     ,u
F89D C30002           (        forth.asm):03844 (3)             addd    #2
F8A0 EDC4             (        forth.asm):03845 (5+0)           std     ,u
F8A2 39               (        forth.asm):03846 (4)             rts
                      (        forth.asm):03847         
F8A3 01               (        forth.asm):03848         MINUS   fcb     1               ANSI (Core)
F8A4 2D               (        forth.asm):03849                 fcc     '-'             ( n1|u1 n2|u2 -- n3|u3 )
F8A5 F890             (        forth.asm):03850                 fdb     CELLP
                      (        forth.asm):03851                 RFCS
F8A7 BDE4B9           (        forth.asm):03852 (7)             jsr     MIN2PST         We need at least two cells stacked up
F8AA EC42             (        forth.asm):03853 (5+1)           ldd     2,u             N1 to D
F8AC A3C4             (        forth.asm):03854 (5+0)           subd    ,u              D has N1-N2
F8AE ED42             (        forth.asm):03855 (5+1)           std     2,u             Store D to N3
F8B0 3342             (        forth.asm):03856 (4+1)           leau    2,u             Drop the top cell
F8B2 39               (        forth.asm):03857 (4)             rts
                      (        forth.asm):03858         
F8B3 05               (        forth.asm):03859         FALSE   fcb     5               ANSI (Core ext)
F8B4 46414C5345       (        forth.asm):03860                 fcc     'FALSE'
F8B9 F8A3             (        forth.asm):03861                 fdb     MINUS
                      (        forth.asm):03862                 RFCS
F8BB 1FC1             (        forth.asm):03863 (4)             tfr     0,x
F8BD 7EE80B           (        forth.asm):03864 (3)             jmp     NPUSH
                      (        forth.asm):03865         
F8C0 04               (        forth.asm):03866         TRUE    fcb     4               ANSI (Core ext)
F8C1 54525545         (        forth.asm):03867                 fcc     'TRUE'
F8C5 F8B3             (        forth.asm):03868                 fdb     FALSE
                      (        forth.asm):03869                 RFCS
F8C7 8EFFFF           (        forth.asm):03870 (3)             ldx     #-1
F8CA 7EE80B           (        forth.asm):03871 (3)             jmp     NPUSH
                      (        forth.asm):03872         
F8CD 05               (        forth.asm):03873         SHIFT   fcb     5               79-STANDARD (REF)
F8CE 5348494654       (        forth.asm):03874                 fcc     'SHIFT'
F8D3 F8C0             (        forth.asm):03875                 fdb     TRUE
                      (        forth.asm):03876                 RFCS
F8D5 BDE4B9           (        forth.asm):03877 (7)             jsr     MIN2PST         Two cells need to be stacked up
F8D8 10A6C4           (        forth.asm):03878 (6+0)           ldw     ,u              Shift bitcount
F8DB EC42             (        forth.asm):03879 (5+1)           ldd     2,u             The data itself
F8DD 105D             (        forth.asm):03880 (2)     @shftlp tstw
F8DF 270E             (        forth.asm):03881 (3)             beq     @shfdon
F8E1 2D06             (        forth.asm):03882 (3)             blt     @shftrg
F8E3 1048             (        forth.asm):03883 (2)             lsld                    Shift left (W is positive)
F8E5 105A             (        forth.asm):03884 (2)             decw
F8E7 20F4             (        forth.asm):03885 (3)             bra     @shftlp
F8E9 1044             (        forth.asm):03886 (2)     @shftrg lsrd                    Shift right (W is negative)
F8EB 105C             (        forth.asm):03887 (2)             incw
F8ED 20EE             (        forth.asm):03888 (3)             bra     @shftlp
F8EF ED42             (        forth.asm):03889 (5+1)   @shfdon std     2,u             Return value stored there
F8F1 3342             (        forth.asm):03890 (4+1)           leau    2,u             Drop one cell from the data stack
F8F3 39               (        forth.asm):03891 (4)             rts
                      (        forth.asm):03892         
                      (        forth.asm):03893         * Signed multiplication by hardware support.
F8F4 01               (        forth.asm):03894         MULT    fcb     1               ANSI (Core)
F8F5 2A               (        forth.asm):03895                 fcc     '*'             ( n1|u1 n2|u2 -- n3|u3 [n4|u4] )
F8F6 F8CD             (        forth.asm):03896                 fdb     SHIFT
                      (        forth.asm):03897                 RFCS
F8F8 0F3B             (        forth.asm):03898 (5)             clr     MULFCN          Function 0 is *
F8FA BDE4B9           (        forth.asm):03899 (7)     MULT1   jsr     MIN2PST         Two cells need to be stacked up
F8FD EC42             (        forth.asm):03900 (5+1)           ldd     2,u             N1 to D
F8FF 11AFC4           (        forth.asm):03901 (30+0)          muld    ,u              D:W has N1*N2
F902 10A742           (        forth.asm):03902 (6+1)           stw     2,u             LSC to N3
F905 0D3B             (        forth.asm):03903 (4)             tst     MULFCN
F907 2603             (        forth.asm):03904 (3)             bne     @mstsem
                      (        forth.asm):03905         * Semantics: return only the LSC.
F909 3342             (        forth.asm):03906 (4+1)           leau    2,u             Drop one cell from the data stack
F90B 39               (        forth.asm):03907 (4)             rts
                      (        forth.asm):03908         * M* semantics, also return the MSC.
F90C EDC4             (        forth.asm):03909 (5+0)   @mstsem std     ,u              MSC to N4
F90E 39               (        forth.asm):03910 (4)             rts
                      (        forth.asm):03911         
F90F 02               (        forth.asm):03912         MSTAR   fcb     2               ANSI (Core)
F910 4D2A             (        forth.asm):03913                 fcc     'M*'            ( n1 n2 -- d )
F912 F8F4             (        forth.asm):03914                 fdb     MULT
F914 8601             (        forth.asm):03915 (2)             lda     #1
F916 973B             (        forth.asm):03916 (3)             sta     MULFCN          Function 1 is M*
F918 20E0             (        forth.asm):03917 (3)             bra     MULT1
                      (        forth.asm):03918         
                      (        forth.asm):03919         * The algorithm implemented here is similar to Donald's Knuth algorithm M,
                      (        forth.asm):03920         * as described in "The Art of Computer Programming", Volume II, 3rd edition,
                      (        forth.asm):03921         * section 4.3.1, pp 268. It is not as generic as algorithm M but fits our
                      (        forth.asm):03922         * particular purpose here: a 16x16 bit unsigned multiplication that yields
                      (        forth.asm):03923         * a 32 bit result. A simpler description of algorithm M can be found in
                      (        forth.asm):03924         * Henry S. Warren Junior's "Hacker's Delight", second edition, section 8-1,
                      (        forth.asm):03925         * pp 171. A C prototype implementation for a little endian host is provided
                      (        forth.asm):03926         * in SW/util/umstar.c.
                      (        forth.asm):03927         * In essence we reduce the problem to a 2 digit by 2 digit (expressed in
                      (        forth.asm):03928         * base 256) multiplication and use the 6809 MUL (A * B -> D) instruction.
F91A 03               (        forth.asm):03929         UMSTAR  fcb     3               ANSI (Core)
F91B 554D2A           (        forth.asm):03930                 fcc     'UM*'           ( u1 u2 -- ud )
F91E F90F             (        forth.asm):03931                 fdb     MSTAR
                      (        forth.asm):03932                 RFCS
F920 BDE4B9           (        forth.asm):03933 (7)             jsr     MIN2PST         2 parameters need to be stacked up
                      (        forth.asm):03934         * Register allocation notes:
                      (        forth.asm):03935         * X: pointer to ud1 (ARG_U/p in the C code).
                      (        forth.asm):03936         * Y: pointer to ud2 (ARG_V/q in the C code).
                      (        forth.asm):03937         * E: Inner loop index (i in the C code).
                      (        forth.asm):03938         * F: Outer loop index (j in the C code).
                      (        forth.asm):03939         *
                      (        forth.asm):03940         * We save U to the system stack and use it to point to a scratch area allocated
                      (        forth.asm):03941         * from the system stack that will contain the 4 bytes (double cell) ultimately
                      (        forth.asm):03942         * holding the result (MSB first, what else?).
                      (        forth.asm):03943         *
                      (        forth.asm):03944         * System stack structure:
                      (        forth.asm):03945         * ,S    Result scratch area (Result MSB)
                      (        forth.asm):03946         * 2,S   Result scratch area (Result LSB)
                      (        forth.asm):03947         * 4,S   Saved U register
                      (        forth.asm):03948         * Total: 6 bytes.
F923 327A             (        forth.asm):03949 (4+1)           leas    -6,s            Allocate system stack scratch space
F925 EF64             (        forth.asm):03950 (5+1)           stu     4,s             Save the U register
F927 104F             (        forth.asm):03951 (2)             clrd
F929 EDE4             (        forth.asm):03952 (5+0)           std     ,s              Initialize the result's MSB
F92B ED62             (        forth.asm):03953 (5+1)           std     2,s             Initialize the result's LSB
F92D 3141             (        forth.asm):03954 (4+1)           leay    1,u             Initialize outer loop pointer (q in the C code)
F92F 3363             (        forth.asm):03955 (4+1)           leau    3,s             Initialize the result pointer (r in the C code)
F931 11C602           (        forth.asm):03956 (3)             ldf     #2              Outer loop index
F934 AE64             (        forth.asm):03957 (5+1)   @outer  ldx     4,s             Saved U register
F936 3003             (        forth.asm):03958 (4+1)           leax    3,x             Initialize inner loop pointer (p in the C code)
F938 118602           (        forth.asm):03959 (3)             lde     #2              Inner loop index
F93B A684             (        forth.asm):03960 (4+0)   @inner  lda     ,x              *p to A
F93D E6A4             (        forth.asm):03961 (4+0)           ldb     ,y              *q to B
F93F 3D               (        forth.asm):03962 (10)            mul                     *p * *q to D (tmpval in the C code)
F940 E35F             (        forth.asm):03963 (5+1)           addd    -1,u            r[-1] += tmpval
F942 ED5F             (        forth.asm):03964 (5+1)           std     -1,u
F944 2402             (        forth.asm):03965 (3)             bcc     @ncarry
F946 6C5E             (        forth.asm):03966 (6+1)           inc     -2,u            r[-2] += carry (propagate carry from ADDD above)
F948 335F             (        forth.asm):03967 (4+1)   @ncarry leau    -1,u            r--
F94A 301F             (        forth.asm):03968 (4+1)           leax    -1,x            p--
F94C 114A             (        forth.asm):03969 (2)             dece                    i--
F94E 26EB             (        forth.asm):03970 (3)             bne     @inner
F950 3341             (        forth.asm):03971 (4+1)           leau    1,u             r++
F952 313F             (        forth.asm):03972 (4+1)           leay    -1,y            q--
F954 115A             (        forth.asm):03973 (2)             decf                    j--
F956 26DC             (        forth.asm):03974 (3)             bne     @outer
F958 EE64             (        forth.asm):03975 (5+1)           ldu     4,s             Restore the U register
F95A 10ECE4           (        forth.asm):03976 (8+0)           ldq     ,s
F95D 10EDC4           (        forth.asm):03977 (8+0)           stq     ,u              Result to the data stack (in place)
F960 3266             (        forth.asm):03978 (4+1)           leas    6,s             Release system stack scratch space
F962 39               (        forth.asm):03979 (4)             rts
                      (        forth.asm):03980         
F963 02               (        forth.asm):03981         TWOTIM  fcb     2               ANSI (Core)
F964 322A             (        forth.asm):03982                 fcc     '2*'            ( x1 -- x2 )
F966 F91A             (        forth.asm):03983                 fdb     UMSTAR
                      (        forth.asm):03984                 RFCS
F968 BDE4B4           (        forth.asm):03985 (7)             jsr     MIN1PST         One cell needs to be stacked up
F96B ECC4             (        forth.asm):03986 (5+0)           ldd     ,u
F96D 1048             (        forth.asm):03987 (2)             asld
F96F EDC4             (        forth.asm):03988 (5+0)           std     ,u
F971 39               (        forth.asm):03989 (4)             rts
                      (        forth.asm):03990         
F972 02               (        forth.asm):03991         TWODIV  fcb     2               ANSI (Core)
F973 322F             (        forth.asm):03992                 fcc     '2/'            ( x1 -- x2 )
F975 F963             (        forth.asm):03993                 fdb     TWOTIM
                      (        forth.asm):03994                 RFCS
F977 BDE4B4           (        forth.asm):03995 (7)             jsr     MIN1PST         One cell needs to be stacked up
F97A ECC4             (        forth.asm):03996 (5+0)           ldd     ,u
F97C 1047             (        forth.asm):03997 (2)             asrd
F97E EDC4             (        forth.asm):03998 (5+0)           std     ,u
F980 39               (        forth.asm):03999 (4)             rts
                      (        forth.asm):04000         
F981 03               (        forth.asm):04001         MOD     fcb     3               ANSI (Core)
F982 4D4F44           (        forth.asm):04002                 fcc     'MOD'           ( N1 N2 -- N3 )
F985 F972             (        forth.asm):04003                 fdb     TWODIV
                      (        forth.asm):04004                 RFCS
F987 8601             (        forth.asm):04005 (2)             lda     #DVFMOD
F989 9738             (        forth.asm):04006 (3)             sta     DIVFCN          Function 1: return only the modulo
F98B 2031             (        forth.asm):04007 (3)             bra     DIV1
                      (        forth.asm):04008         
F98D 04               (        forth.asm):04009         SLMOD   fcb     4               ANSI (Core)
F98E 2F4D4F44         (        forth.asm):04010                 fcc     '/MOD'          ( N1 N2 -- N3 N4 )
F992 F981             (        forth.asm):04011                 fdb     MOD
                      (        forth.asm):04012                 RFCS
F994 0F38             (        forth.asm):04013 (5)             clr     DIVFCN          Function 0: return the quotient and the modulo
F996 2026             (        forth.asm):04014 (3)             bra     DIV1
                      (        forth.asm):04015         
F998 06               (        forth.asm):04016         FMSLMOD fcb     6               ANSI (Core)
F999 464D2F4D4F44     (        forth.asm):04017                 fcc     'FM/MOD'        ( D1 N1 -- N2 N3 )
F99F F98D             (        forth.asm):04018                 fdb     SLMOD
                      (        forth.asm):04019                 RFCS
F9A1 8608             (        forth.asm):04020 (2)             lda     #(DVFSLMD|DVOA1D) Function 0, arg #1 is double
F9A3 9738             (        forth.asm):04021 (3)             sta     DIVFCN
F9A5 2017             (        forth.asm):04022 (3)             bra     DIV1
                      (        forth.asm):04023         
F9A7 06               (        forth.asm):04024         SMSLREM fcb     6               ANSI (Core)
F9A8 534D2F52454D     (        forth.asm):04025                 fcc     'SM/REM'        ( D1 N1 -- N2 N3 )
F9AE F998             (        forth.asm):04026                 fdb     FMSLMOD
                      (        forth.asm):04027                 RFCS
                      (        forth.asm):04028         * Function 0, arg #1 is double, want symmetric division.
F9B0 8618             (        forth.asm):04029 (2)             lda     #(DVFSLMD|DVOA1D|DVOWSYM)
F9B2 9738             (        forth.asm):04030 (3)             sta     DIVFCN
F9B4 2008             (        forth.asm):04031 (3)             bra     DIV1
                      (        forth.asm):04032         
                      (        forth.asm):04033         * /, MOD and /MOD are essentially the same function returning
                      (        forth.asm):04034         * the different parts returned by DIVQ.
                      (        forth.asm):04035         * We use a global variable to distinguish which functionality
                      (        forth.asm):04036         * is being requested:
                      (        forth.asm):04037         * 0: return the modulo and the quotient (/MOD).
                      (        forth.asm):04038         * 1: return the modulo only (MOD).
                      (        forth.asm):04039         * 2: return the quotient only (/).
F9B6 01               (        forth.asm):04040         DIV     fcb     1               ANSI (Core)
F9B7 2F               (        forth.asm):04041                 fcc     '/'             ( n1|d1 n2 -- n3 [n4] )
F9B8 F9A7             (        forth.asm):04042                 fdb     SMSLREM
                      (        forth.asm):04043                 RFCS
F9BA 8602             (        forth.asm):04044 (2)             lda     #DVFDIV
F9BC 9738             (        forth.asm):04045 (3)             sta     DIVFCN          Function 2: return only the quotient
F9BE 0F3C             (        forth.asm):04046 (5)     DIV1    clr     F83DIVF         Assume no adjustment required for floored div.
                      (        forth.asm):04047         
                      (        forth.asm):04048         * Split function code options into individual flags, extract base function code.
F9C0 0F39             (        forth.asm):04049 (5)             clr     DIVDBL
F9C2 0F3A             (        forth.asm):04050 (5)             clr     DIVSYM
F9C4 8601             (        forth.asm):04051 (2)             lda     #1
F9C6 D638             (        forth.asm):04052 (3)             ldb     DIVFCN
F9C8 C508             (        forth.asm):04053 (2)             bitb    #DVOA1D
F9CA 2702             (        forth.asm):04054 (3)             beq     *+4
F9CC 9739             (        forth.asm):04055 (3)             sta     DIVDBL
F9CE C510             (        forth.asm):04056 (2)             bitb    #DVOWSYM
F9D0 2702             (        forth.asm):04057 (3)             beq     *+4
F9D2 973A             (        forth.asm):04058 (3)             sta     DIVSYM
F9D4 C407             (        forth.asm):04059 (2)             andb    #DVFMASK
F9D6 D738             (        forth.asm):04060 (3)             stb     DIVFCN
                      (        forth.asm):04061         
F9D8 0D39             (        forth.asm):04062 (4)             tst     DIVDBL
F9DA 2605             (        forth.asm):04063 (3)             bne     *+7             Make sure double stack requirements are met
F9DC BDE4B9           (        forth.asm):04064 (7)             jsr     MIN2PST         At least two cells need to be stacked up
F9DF 2003             (        forth.asm):04065 (3)             bra     *+5
F9E1 BDE4BE           (        forth.asm):04066 (7)             jsr     MIN3PST         At least three cells need to be stacked up
                      (        forth.asm):04067         
F9E4 0D3A             (        forth.asm):04068 (4)             tst     DIVSYM
F9E6 2608             (        forth.asm):04069 (3)             bne     @dvsym          Symmetric division is wanted
F9E8 A642             (        forth.asm):04070 (4+1)           lda     2,u             Numerator's MSB
F9EA A8C4             (        forth.asm):04071 (4+0)           eora    ,u              Different sign from the denominator's MSB?
F9EC 2A02             (        forth.asm):04072 (3)             bpl     @dvsym          No, proceed to the division code
F9EE 0C3C             (        forth.asm):04073 (5)             inc     F83DIVF         Numerator and denominator have different signs
F9F0 0D39             (        forth.asm):04074 (4)     @dvsym  tst     DIVDBL
F9F2 2705             (        forth.asm):04075 (3)             beq     @dvsgn
F9F4 10EC42           (        forth.asm):04076 (8+1)           ldq     2,u             Double cell numerator to D:W
F9F7 2009             (        forth.asm):04077 (3)             bra     @dvactu
                      (        forth.asm):04078         * Division by zero conditions are dealt with through the trap handler.
F9F9 104F             (        forth.asm):04079 (2)     @dvsgn  clrd                    Clear the numerator's MSC
F9FB 10A642           (        forth.asm):04080 (6+1)           ldw     2,u             Numerator's LSC
F9FE 2A02             (        forth.asm):04081 (3)             bpl     @dvactu         Branch if no sign extention is needed
                      (        forth.asm):04082         * Sign extention from W to Q.
FA00 1043             (        forth.asm):04083 (2)             comd                    -1 to D (numerator's MSC)
FA02 11AEC4           (        forth.asm):04084 (36)    @dvactu divq    ,u              ,u has the denominator
FA05 8D1F             (        forth.asm):04085 (6)             bsr     FDIVADJ         Perform floored division adjustment, if needed
                      (        forth.asm):04086         
FA07 0D39             (        forth.asm):04087 (4)             tst     DIVDBL
FA09 2702             (        forth.asm):04088 (3)             beq     *+4
FA0B 3342             (        forth.asm):04089 (4+1)           leau    2,u             Drop one cell from the data stack
                      (        forth.asm):04090         
FA0D 0D38             (        forth.asm):04091 (4)             tst     DIVFCN
FA0F 2606             (        forth.asm):04092 (3)             bne     @div4
FA11 ED42             (        forth.asm):04093 (5+1)           std     2,u             Function 0: return the modulo and the quotient
FA13 10A7C4           (        forth.asm):04094 (6+0)   @div3   stw     ,u              Function 2: return only the quotient
FA16 39               (        forth.asm):04095 (4)             rts
FA17 3342             (        forth.asm):04096 (4+1)   @div4   leau    2,u             Drop one cell from the data stack
FA19 1F07             (        forth.asm):04097 (4)             tfr     d,v             Backup the modulo
FA1B 9638             (        forth.asm):04098 (3)             lda     DIVFCN
FA1D 8101             (        forth.asm):04099 (2)             cmpa    #1
FA1F 26F2             (        forth.asm):04100 (3)             bne     @div3
FA21 1F70             (        forth.asm):04101 (4)             tfr     v,d             Restore the modulo
FA23 EDC4             (        forth.asm):04102 (5+0)           std     ,u              Function 1: return only the modulo
FA25 39               (        forth.asm):04103 (4)             rts
                      (        forth.asm):04104         
                      (        forth.asm):04105         * Quotient is returned in W, modulo in D but this is symmetric division :-(
                      (        forth.asm):04106         * Need to return a floored division result for compat. with F83 and ANSI impls.
FA26 104D             (        forth.asm):04107 (2)     FDIVADJ tstd                    Is the remainder zero?
FA28 2708             (        forth.asm):04108 (3)             beq     @no83ad         Yes. No adjusment required for floored division
FA2A 0D3C             (        forth.asm):04109 (4)             tst     F83DIVF         Different signs for numerator and denominator?
FA2C 2704             (        forth.asm):04110 (3)             beq     @no83ad         No. Adjusment not needed for floored division
                      (        forth.asm):04111         * Adjusment for F83 floored division.
FA2E 105A             (        forth.asm):04112 (2)             decw                    Decrement the quotient
FA30 E3C4             (        forth.asm):04113 (5+0)           addd    ,u              Add the denominator to the modulo
FA32 39               (        forth.asm):04114 (4)     @no83ad rts
                      (        forth.asm):04115         
FA33 02               (        forth.asm):04116         STRSLSH fcb     2               ANSI (Core)
FA34 2A2F             (        forth.asm):04117                 fcc     '*/'            ( N1 N2 N3 -- N4 [N5] )
FA36 F9B6             (        forth.asm):04118                 fdb     DIV
                      (        forth.asm):04119                 RFCS
FA38 8601             (        forth.asm):04120 (2)             lda     #1
FA3A 973D             (        forth.asm):04121 (3)             sta     STSLFCN
FA3C BDE4BE           (        forth.asm):04122 (7)     STRSL1  jsr     MIN3PST         Three cells need to be stacked up
FA3F 0F3C             (        forth.asm):04123 (5)             clr     F83DIVF         Assume no adjustment required for floored div.
                      (        forth.asm):04124         * Division by zero conditions are dealt with through the trap handler.
FA41 EC44             (        forth.asm):04125 (5+1)           ldd     4,u             N1
FA43 11AF42           (        forth.asm):04126 (30+1)          muld    2,u             N2 (N1 * N2 -> D:W)
FA46 3402             (        forth.asm):04127 (4+1)           pshs    a               Product's MSC's MSB
FA48 A8C4             (        forth.asm):04128 (4+0)           eora    ,u              Different sign from the denominator's?
FA4A 2A02             (        forth.asm):04129 (3)             bpl     @stslpr         No. Floored division adjustment not needed
FA4C 0C3C             (        forth.asm):04130 (5)             inc     F83DIVF
FA4E 3502             (        forth.asm):04131 (4+1)   @stslpr puls    a
FA50 11AEC4           (        forth.asm):04132 (36)            divq    ,u              N3
FA53 8DD1             (        forth.asm):04133 (6)             bsr     FDIVADJ         Perform floored division adjustment, if needed
FA55 3342             (        forth.asm):04134 (4+1)           leau    2,u
FA57 0D3D             (        forth.asm):04135 (4)             tst     STSLFCN
FA59 2606             (        forth.asm):04136 (3)             bne     @strsl2         Just the quotient, Ma'am!
FA5B ED42             (        forth.asm):04137 (5+1)           std     2,u             N4: the modulo
FA5D 10A7C4           (        forth.asm):04138 (6+0)           stw     ,u              N5: the quotient
FA60 39               (        forth.asm):04139 (4)             rts
FA61 3342             (        forth.asm):04140 (4+1)   @strsl2 leau    2,u
FA63 10A7C4           (        forth.asm):04141 (6+0)           stw     ,u              N4
FA66 39               (        forth.asm):04142 (4)             rts
                      (        forth.asm):04143         
FA67 05               (        forth.asm):04144         STRSLMD fcb     5               ANSI (Core)
FA68 2A2F4D4F44       (        forth.asm):04145                 fcc     '*/MOD'         ( N1 N2 N3 -- N4 N5 )
FA6D FA33             (        forth.asm):04146                 fdb     STRSLSH
                      (        forth.asm):04147                 RFCS
FA6F 0F3D             (        forth.asm):04148 (5)             clr     STSLFCN
FA71 20C9             (        forth.asm):04149 (3)             bra     STRSL1
                      (        forth.asm):04150         
FA73 06               (        forth.asm):04151         UMSLMOD fcb     6               ANSI (Core)
FA74 554D2F4D4F44     (        forth.asm):04152                 fcc     'UM/MOD'        ( ud u1 -- u2 u3 )
FA7A FA67             (        forth.asm):04153                 fdb     STRSLMD
                      (        forth.asm):04154                 RFCS
FA7C BDE4BE           (        forth.asm):04155 (7)             jsr     MIN3PST
FA7F ECC4             (        forth.asm):04156 (5+0)           ldd     ,u              Is U1 zero?
FA81 2605             (        forth.asm):04157 (3)             bne     @cont           No
FA83 C604             (        forth.asm):04158 (2)     @oor    ldb     #4              Division by zero/Out of range
FA85 BDE781           (        forth.asm):04159 (7)             jsr     ERRHDLR         No return
FA88 BDE819           (        forth.asm):04160 (7)     @cont   jsr     NPOP
FA8B 1F10             (        forth.asm):04161 (4)             tfr     x,d             U1 (denominator) to D
FA8D BDE819           (        forth.asm):04162 (7)             jsr     NPOP
FA90 1F12             (        forth.asm):04163 (4)             tfr     x,y             Numerator MSC TO Y
FA92 BDE819           (        forth.asm):04164 (7)             jsr     NPOP            Numerator LSC to X
FA95 32E8EF           (        forth.asm):04165 (4+1)           leas    -17,s
FA98 ED6E             (        forth.asm):04166 (5+1)           std     14,s            Denominator
FA9A AF6C             (        forth.asm):04167 (5+1)           stx     12,s            Numerator least significant cell
FA9C 10AF6A           (        forth.asm):04168 (6+1)           sty     10,s            Numerator most significant cell
FA9F BDF5FE           (        forth.asm):04169 (7)             jsr     DBDIVSG
FAA2 EC66             (        forth.asm):04170 (5+1)           ldd     6,s             Quotient high
FAA4 26DD             (        forth.asm):04171 (3)             bne     @oor            Out of range
FAA6 AEE4             (        forth.asm):04172 (5+0)           ldx     ,s              Remainder (U2)
FAA8 3610             (        forth.asm):04173                 UCNPUSH
FAAA AE68             (        forth.asm):04174 (5+1)           ldx     8,s             Quotient low (U3)
FAAC 3610             (        forth.asm):04175                 UCNPUSH
FAAE 32E811           (        forth.asm):04176 (4+1)           leas    17,s
FAB1 39               (        forth.asm):04177 (4)             rts
                      (        forth.asm):04178         
                      (        forth.asm):04179         * Returns the current value of the Sreg register (informational only).
                      (        forth.asm):04180         * This word is either called (JSROPC) or jumped to (JMPOPC), as a result
                      (        forth.asm):04181         * of the tail call optimization process. There is no way to tell the
                      (        forth.asm):04182         * difference. Here we assume that it is called and return Sreg.
FAB2 01               (        forth.asm):04183         SYSSTK  fcb     1               Non-standard
FAB3 53               (        forth.asm):04184                 fcc     'S'
FAB4 FA73             (        forth.asm):04185                 fdb     UMSLMOD
                      (        forth.asm):04186                 RFCS
FAB6 1F41             (        forth.asm):04187 (4)             tfr     s,x
FAB8 7EE80B           (        forth.asm):04188 (3)             jmp     NPUSH
                      (        forth.asm):04189         
FABB 02               (        forth.asm):04190         SYSSTAT fcb     2
FABC 5340             (        forth.asm):04191                 fcc     'S@'
FABE FAB2             (        forth.asm):04192                 fdb     SYSSTK
                      (        forth.asm):04193                 RFCS
FAC0 AEE4             (        forth.asm):04194 (5+0)           ldx     ,s
FAC2 7EE80B           (        forth.asm):04195 (3)             jmp     NPUSH
                      (        forth.asm):04196         
FAC5 07               (        forth.asm):04197         PAYLOAD fcb     7               Non standard
FAC6 5041594C4F4144   (        forth.asm):04198                 fcc     'PAYLOAD'       ( -- len ) where len is the code payload
FACD FABB             (        forth.asm):04199                 fdb     SYSSTAT         of the word located by FIND (or NULL)
                      (        forth.asm):04200                 RFCS
FACF 9E10             (        forth.asm):04201 (4)             ldx     FNDPLD          Code payload reported by FIND
FAD1 7EE80B           (        forth.asm):04202 (3)             jmp     NPUSH
                      (        forth.asm):04203         
                      (        forth.asm):04204         * Differences from the original code (WORDS):
                      (        forth.asm):04205         * - display number in HEX rather than in the current base.
                      (        forth.asm):04206         * - dropped feat: the original stuff was interactively paged by 15 line screens.
                      (        forth.asm):04207         * - added feat: display code implementation payload.
                      (        forth.asm):04208         * - added feat: display the immedediate and define (compile time only) flags.
                      (        forth.asm):04209         * - added feat: display the forgettable status (R/W). Everything user
                      (        forth.asm):04210         *   defined is forgettable (i.e. RAM resident).
FAD4 05               (        forth.asm):04211         WORDS   fcb     5               Non-standard
FAD5 574F524453       (        forth.asm):04212                 fcc     'WORDS'         ( -- )
FADA FAC5             (        forth.asm):04213                 fdb     PAYLOAD
                      (        forth.asm):04214                 RFCS
FADC 9E08             (        forth.asm):04215 (4)             ldx     DICEND
FADE 9F1A             (        forth.asm):04216 (4)             stx     VLPRVEP         Last word code address + 1
FAE0 9E06             (        forth.asm):04217 (4)             ldx     LSTWAD
FAE2 9F1C             (        forth.asm):04218 (4)     @vlist1 stx     VLPRVHD         Last word header pointer
FAE4 108E044C         (        forth.asm):04219 (4)             ldy     #TBUFF
FAE8 E680             (        forth.asm):04220 (4+1)           ldb     ,x+
FAEA 3404             (        forth.asm):04221 (4+1)           pshs    b
FAEC C41F             (        forth.asm):04222 (2)             andb    #WRLNMSK        Mask out word length
FAEE 4F               (        forth.asm):04223 (1)             clra
FAEF 3404             (        forth.asm):04224 (4+1)           pshs    b               Preserve word length
FAF1 1F06             (        forth.asm):04225 (4)             tfr     d,w
FAF3 113812           (        forth.asm):04226 (6+?)           tfm     x+,y+
FAF6 3502             (        forth.asm):04227 (4+1)           puls    a               Restore word length to A
FAF8 C620             (        forth.asm):04228 (2)             ldb     #WRLNMSK+1
FAFA 103289           (        forth.asm):04229 (4)             subr    a,b             Number of spaces we want to emit
FAFD 8620             (        forth.asm):04230 (2)             lda     #SP
FAFF A7A0             (        forth.asm):04231 (4+1)   @vlist2 sta     ,y+
FB01 5A               (        forth.asm):04232 (1)             decb
FB02 26FB             (        forth.asm):04233 (3)             bne     @vlist2
FB04 6FA0             (        forth.asm):04234 (6+1)           clr     ,y+             Terminate formatted output string
FB06 3410             (        forth.asm):04235 (4+2)           pshs    x               Address of the current word backlink address
FB08 BDE2ED           (        forth.asm):04236 (7)             jsr     PUTCR           Carriage return is output before anything else
FB0B 8E044C           (        forth.asm):04237 (3)             ldx     #TBUFF
FB0E BDE2E0           (        forth.asm):04238 (7)             jsr     PUTS            Output word name formatted on 17 chars + SP
FB11 AEE4             (        forth.asm):04239 (5+0)           ldx     ,s
                      (        forth.asm):04240                 IFNE    RELFEAT
                      (        forth.asm):04241                 leax    3,x             Word XT to X (Skip backlink and checksum)
                      (        forth.asm):04242                 ELSE
FB13 3002             (        forth.asm):04243 (4+1)           leax    2,x             Word XT to X (Skip backlink)
                      (        forth.asm):04244                 ENDC                    RELFEAT
FB15 1F10             (        forth.asm):04245 (4)             tfr     x,d             CVNSTR depends on UBASE and we want HEX output
FB17 108E044C         (        forth.asm):04246 (4)             ldy     #TBUFF
FB1B BDE182           (        forth.asm):04247 (7)             jsr     HDMP4           So we use trusted debugging code
FB1E 8E044C           (        forth.asm):04248 (3)             ldx     #TBUFF
FB21 BDE2E0           (        forth.asm):04249 (7)             jsr     PUTS
                      (        forth.asm):04250         * Now to display word implementation length.
                      (        forth.asm):04251         * Implementation code length is from ,s+3 (or 2) to VLPRVEP
FB24 8609             (        forth.asm):04252 (2)             lda     #HT
FB26 BDE2CD           (        forth.asm):04253 (7)             jsr     PUTCH
FB29 9E1A             (        forth.asm):04254 (4)             ldx     VLPRVEP
FB2B 10AEE4           (        forth.asm):04255 (6+0)           ldy     ,s
                      (        forth.asm):04256                 IFNE    RELFEAT
                      (        forth.asm):04257                 leay    3,y             Current word code entry address
                      (        forth.asm):04258                 ELSE
FB2E 3122             (        forth.asm):04259 (4+1)           leay    2,y             Current word code entry address
                      (        forth.asm):04260                 ENDC                    RELFEAT
FB30 103221           (        forth.asm):04261 (4)             subr    y,x
FB33 1F10             (        forth.asm):04262 (4)             tfr     x,d
FB35 108E044C         (        forth.asm):04263 (4)             ldy     #TBUFF
FB39 BDE182           (        forth.asm):04264 (7)             jsr     HDMP4
FB3C 8E044C           (        forth.asm):04265 (3)             ldx     #TBUFF
FB3F BDE2E0           (        forth.asm):04266 (7)             jsr     PUTS
                      (        forth.asm):04267         # Display attribute flags.
FB42 8609             (        forth.asm):04268 (2)             lda     #HT
FB44 BDE2CD           (        forth.asm):04269 (7)             jsr     PUTCH
FB47 8E044C           (        forth.asm):04270 (3)             ldx     #TBUFF
FB4A E662             (        forth.asm):04271 (4+1)           ldb     2,s             Word attribute to B
FB4C 862D             (        forth.asm):04272 (2)             lda     #'-
FB4E C580             (        forth.asm):04273 (2)             bitb    #IMDFLM         Check for immediate
FB50 2702             (        forth.asm):04274 (3)             beq     @vlist4
FB52 8649             (        forth.asm):04275 (2)             lda     #'I
FB54 A780             (        forth.asm):04276 (4+1)   @vlist4 sta     ,x+
FB56 862D             (        forth.asm):04277 (2)             lda     #'-
FB58 C540             (        forth.asm):04278 (2)             bitb    #DEFFLM         Check for define (compile time only)
FB5A 2702             (        forth.asm):04279 (3)             beq     @vlist5
FB5C 8643             (        forth.asm):04280 (2)             lda     #'C
FB5E A780             (        forth.asm):04281 (4+1)   @vlist5 sta     ,x+
                      (        forth.asm):04282                 IFNE    RELFEAT
                      (        forth.asm):04283                 lda     #'-
                      (        forth.asm):04284                 bitb    #MONFLM         Check for monitored status
                      (        forth.asm):04285                 beq     @vlst51
                      (        forth.asm):04286                 lda     #'M
FB60                  (        forth.asm):04287         @vlst51 sta     ,x+
                      (        forth.asm):04288                 ENDC                    RELFEAT
                      (        forth.asm):04289         * Check for forgettable also. In ROM => R else W unless we just processed '@'.
FB60 8652             (        forth.asm):04290 (2)             lda     #'R
FB62 10AEE4           (        forth.asm):04291 (6+0)           ldy     ,s
                      (        forth.asm):04292                 IFNE    RELFEAT
                      (        forth.asm):04293                 leay    3,y             Word entry point to Y
                      (        forth.asm):04294                 ELSE
FB65 3122             (        forth.asm):04295 (4+1)           leay    2,y             Word entry point to Y
                      (        forth.asm):04296                 ENDC                    RELFEAT
FB67 108C0CC4         (        forth.asm):04297 (4)             cmpy    #RAMFTCH        @ in RAM is unforgettable
FB6B 2708             (        forth.asm):04298 (3)             beq     @vlist6
FB6D 108CE000         (        forth.asm):04299 (4)             cmpy    #ROMSTRT        as are all ROM resident words
FB71 2402             (        forth.asm):04300 (3)             bcc     @vlist6
FB73 8657             (        forth.asm):04301 (2)             lda     #'W
FB75 A780             (        forth.asm):04302 (4+1)   @vlist6 sta     ,x+
FB77 6F84             (        forth.asm):04303 (6+0)           clr     ,x
FB79 8E044C           (        forth.asm):04304 (3)             ldx     #TBUFF
FB7C BDE2E0           (        forth.asm):04305 (7)             jsr     PUTS
                      (        forth.asm):04306         * The point at which VLPRVHD==WDICSPC is a singularity (RAM to ROM transition).
FB7F 9E1C             (        forth.asm):04307 (4)             ldx     VLPRVHD
FB81 8C0CC0           (        forth.asm):04308 (3)             cmpx    #WDICSPC
FB84 2608             (        forth.asm):04309 (3)             bne     @vlist7
FB86 8EFDF3           (        forth.asm):04310 (3)             ldx     #QMARK          Word just before @ (ROM flavor)
FB89 9F1C             (        forth.asm):04311 (4)             stx     VLPRVHD
FB8B 8EFDFD           (        forth.asm):04312 (3)             ldx     #THEEND
FB8E 9F1A             (        forth.asm):04313 (4)     @vlist7 stx     VLPRVEP
FB90 3510             (        forth.asm):04314 (4+2)           puls    x
FB92 3504             (        forth.asm):04315 (4+1)           puls    b
FB94 AE84             (        forth.asm):04316 (5+0)           ldx     ,x              Point to previous word
FB96 1026FF48         (        forth.asm):04317 (5)             lbne    @vlist1
FB9A 39               (        forth.asm):04318 (4)             rts
                      (        forth.asm):04319         
FB9B 05               (        forth.asm):04320         STATE   fcb     5               ANSI (Core)
FB9C 5354415445       (        forth.asm):04321                 fcc     'STATE'         ( -- a-addr )
FBA1 FAD4             (        forth.asm):04322                 fdb     WORDS
                      (        forth.asm):04323                 RFCS
FBA3 8E0124           (        forth.asm):04324 (3)             ldx     #USTATE
FBA6 7EE80B           (        forth.asm):04325 (3)             jmp     NPUSH
                      (        forth.asm):04326         
FBA9 04               (        forth.asm):04327         BASE    fcb     4               ANSI (Core)
FBAA 42415345         (        forth.asm):04328                 fcc     'BASE'          ( -- a-addr )
FBAE FB9B             (        forth.asm):04329                 fdb     STATE
                      (        forth.asm):04330                 RFCS
FBB0 8E0122           (        forth.asm):04331 (3)             ldx     #UBASE
FBB3 7EE80B           (        forth.asm):04332 (3)             jmp     NPUSH
                      (        forth.asm):04333         
FBB6 07               (        forth.asm):04334         DECIMAL fcb     7               ANSI (Core)
FBB7 444543494D414C   (        forth.asm):04335                 fcc     'DECIMAL'       ( -- )
FBBE FBA9             (        forth.asm):04336                 fdb     BASE
                      (        forth.asm):04337                 RFCS
FBC0 CC000A           (        forth.asm):04338 (3)             ldd     #10
FBC3 DD22             (        forth.asm):04339 (4)     BASESET std     UBASE
FBC5 39               (        forth.asm):04340 (4)             rts
                      (        forth.asm):04341         
FBC6 03               (        forth.asm):04342         HEX     fcb     3               ANSI (Core)
FBC7 484558           (        forth.asm):04343                 fcc     'HEX'           ( -- )
FBCA FBB6             (        forth.asm):04344                 fdb     DECIMAL
                      (        forth.asm):04345                 RFCS
FBCC CC0010           (        forth.asm):04346 (3)             ldd     #16
FBCF 20F2             (        forth.asm):04347 (3)             bra     BASESET
                      (        forth.asm):04348         
FBD1 02               (        forth.asm):04349         DOTTICK fcb     2               Non-standard (SwiftForth)
FBD2 2E27             (        forth.asm):04350                 fcb     $2E,$27         .' ( memaddr -- )
FBD4 FBC6             (        forth.asm):04351                 fdb     HEX
                      (        forth.asm):04352                 RFCS
                      (        forth.asm):04353                 IFNE    SSDFEAT
FBD6 BDE819           (        forth.asm):04354 (7)             jsr     NPOP
FBD9 1F12             (        forth.asm):04355 (4)             tfr     x,y
FBDB 8E03FC           (        forth.asm):04356 (3)             ldx     #HEXBUF
FBDE BDE641           (        forth.asm):04357 (7)             jsr     FINDSYM
                      (        forth.asm):04358                 ELSE
                      (        forth.asm):04359                 lda     #'$
                      (        forth.asm):04360                 jsr     PUTCH
                      (        forth.asm):04361                 jsr     NPOP
                      (        forth.asm):04362                 tfr     x,d
                      (        forth.asm):04363                 ldy     #HEXBUF
                      (        forth.asm):04364                 jsr     HDMP4
                      (        forth.asm):04365                 ENDC                    SSDFEAT
FBE1 8E03FC           (        forth.asm):04366 (3)             ldx     #HEXBUF
FBE4 7EE2E0           (        forth.asm):04367 (3)             jmp     PUTS
                      (        forth.asm):04368         
                      (        forth.asm):04369         * Display a dump of the data stack in the current BASE. In Leo Brodie's
                      (        forth.asm):04370         * "Starting Forth" the data stack is printed from the bottom up. So it is here.
FBE7 02               (        forth.asm):04371         DDUMP   fcb     2               ANSI (Optional "Programming tools" word set)
FBE8 2E53             (        forth.asm):04372                 fcc     '.S'            ( -- )
FBEA FBD1             (        forth.asm):04373                 fdb     DOTTICK
                      (        forth.asm):04374                 RFCS
FBEC CC02F8           (        forth.asm):04375 (3)             ldd     #NSTBOT
FBEF 103230           (        forth.asm):04376 (4)             subr    u,d
FBF2 1044             (        forth.asm):04377 (2)             lsrd                    DEPTH is in D
FBF4 272A             (        forth.asm):04378 (3)             beq     @ndump3         Data stack is empty
FBF6 3440             (        forth.asm):04379 (4+2)           pshs    u
FBF8 CE02F8           (        forth.asm):04380 (3)             ldu     #NSTBOT         Pointing to the bottom of the data stack
FBFB 8601             (        forth.asm):04381 (2)             lda     #1
FBFD 9741             (        forth.asm):04382 (3)             sta     CVISSGN         Force a signed number conversion
FBFF 3404             (        forth.asm):04383 (4+1)   @ndump1 pshs    b
FC01 AEC3             (        forth.asm):04384 (5+2)           ldx     ,--u
FC03 BDE460           (        forth.asm):04385 (7)             jsr     CVNSTR
FC06 8E044C           (        forth.asm):04386 (3)             ldx     #TBUFF
                      (        forth.asm):04387         # Skip leading spaces.
FC09 A680             (        forth.asm):04388 (4+1)   @ndump2 lda     ,x+
FC0B 8120             (        forth.asm):04389 (2)             cmpa    #SP
FC0D 27FA             (        forth.asm):04390 (3)             beq     @ndump2
FC0F 301F             (        forth.asm):04391 (4+1)           leax    -1,x
FC11 BDE2E0           (        forth.asm):04392 (7)             jsr     PUTS
FC14 8620             (        forth.asm):04393 (2)             lda     #SP
FC16 BDE2CD           (        forth.asm):04394 (7)             jsr     PUTCH
FC19 3504             (        forth.asm):04395 (4+1)           puls    b
FC1B 5A               (        forth.asm):04396 (1)             decb
FC1C 26E1             (        forth.asm):04397 (3)             bne     @ndump1
FC1E 3540             (        forth.asm):04398 (4+2)           puls    u
FC20 39               (        forth.asm):04399 (4)     @ndump3 rts
                      (        forth.asm):04400         
FC21 04               (        forth.asm):04401         QRYDUP  fcb     4               ANSI (Core)
FC22 3F445550         (        forth.asm):04402                 fcc     '?DUP'          ( x -- 0 | x x )
FC26 FBE7             (        forth.asm):04403                 fdb     DDUMP
                      (        forth.asm):04404                 RFCS
FC28 BDE819           (        forth.asm):04405 (7)             jsr     NPOP            ZFLAG is set by NPOP
FC2B 3610             (        forth.asm):04406                 UCNPUSH                 Push back the original parameter
FC2D 1026EBDA         (        forth.asm):04407 (5)             lbne    NPUSH           And DUP if NZ
FC31 39               (        forth.asm):04408 (4)             rts
                      (        forth.asm):04409         
FC32 04               (        forth.asm):04410         TUCK    fcb     4               ANSI (Core ext)
FC33 5455434B         (        forth.asm):04411                 fcc     'TUCK'          ( x1 x2 -- x2 x1 x2 ) i.e. SWAP OVER
FC37 FC21             (        forth.asm):04412                 fdb     QRYDUP
                      (        forth.asm):04413                 RFCS
FC39 8D2B             (        forth.asm):04414                 RFXT    bsr,SWAP+7      XT for SWAP
FC3B 2065             (        forth.asm):04415                 RFXT    bra,OVER+7      XT for OVER
                      (        forth.asm):04416         
FC3D 03               (        forth.asm):04417         NIP     fcb     3               ANSI (Core ext)
FC3E 4E4950           (        forth.asm):04418                 fcc     'NIP'           ( x1 x2 -- x2 ) i.e. SWAP DROP
FC41 FC32             (        forth.asm):04419                 fdb     TUCK
                      (        forth.asm):04420                 RFCS
FC43 8D21             (        forth.asm):04421                 RFXT    bsr,SWAP+7      XT for SWAP
FC45 2015             (        forth.asm):04422                 RFXT    bra,DROP+7      XT for DROP
                      (        forth.asm):04423         
FC47 03               (        forth.asm):04424         DUP     fcb     3               ANSI (Core)
FC48 445550           (        forth.asm):04425                 fcc     'DUP'           ( x -- x x )
FC4B FC3D             (        forth.asm):04426                 fdb     NIP
                      (        forth.asm):04427                 RFCS
FC4D BDE4B4           (        forth.asm):04428 (7)             jsr     MIN1PST         At least one cell needs to be stacked up
FC50 AEC4             (        forth.asm):04429 (5+0)           ldx     ,u
FC52 7EE80B           (        forth.asm):04430 (3)             jmp     NPUSH
                      (        forth.asm):04431         
FC55 04               (        forth.asm):04432         DROP    fcb     4               ANSI (Core)
FC56 44524F50         (        forth.asm):04433                 fcc     'DROP'          ( x -- )
FC5A FC47             (        forth.asm):04434                 fdb     DUP
                      (        forth.asm):04435                 RFCS
FC5C 7EE819           (        forth.asm):04436 (3)             jmp     NPOP
                      (        forth.asm):04437         
FC5F 04               (        forth.asm):04438         SWAP    fcb     4               ANSI (Core)
FC60 53574150         (        forth.asm):04439                 fcc     'SWAP'          ( x1 x2 -- x2 x1 )
FC64 FC55             (        forth.asm):04440                 fdb     DROP
                      (        forth.asm):04441                 RFCS
FC66 BDE4B9           (        forth.asm):04442 (7)             jsr     MIN2PST         We need at least two cells stacked up
FC69 10ECC4           (        forth.asm):04443 (8+0)           ldq     ,u              In place SWAP
FC6C 1E06             (        forth.asm):04444 (5)             exg     d,w
FC6E 10EDC4           (        forth.asm):04445 (8+0)           stq     ,u
FC71 39               (        forth.asm):04446 (4)             rts
                      (        forth.asm):04447         
FC72 04               (        forth.asm):04448         PICK    fcb     4               ANSI (Core ext)
FC73 5049434B         (        forth.asm):04449                 fcc     'PICK'          ( xu ... x1 x0 u -- xu ... x1 x0 xu )
FC77 FC5F             (        forth.asm):04450                 fdb     SWAP
                      (        forth.asm):04451                 RFCS
FC79 BDE819           (        forth.asm):04452 (7)             jsr     NPOP            Arg <u> to X (expressed in cells)
FC7C CC02F8           (        forth.asm):04453 (3)     PICK1   ldd     #NSTBOT
FC7F 103230           (        forth.asm):04454 (4)             subr    u,d
FC82 1044             (        forth.asm):04455 (2)             lsrd                    D has the data stack depth in cells
FC84 103701           (        forth.asm):04456 (4)             cmpr    d,x             We need to make sure (unsigned) X < D
FC87 240D             (        forth.asm):04457 (3)             bhs     @pick1
FC89 1F10             (        forth.asm):04458 (4)             tfr     x,d
FC8B 1048             (        forth.asm):04459 (2)             lsld                    Arg <u> cells byte count to D
FC8D 30CB             (        forth.asm):04460 (4+2)           leax    d,u
FC8F 1F12             (        forth.asm):04461 (4)             tfr     x,y             For the sake of ROLL's implementation
FC91 AE84             (        forth.asm):04462 (5+0)           ldx     ,x
FC93 3610             (        forth.asm):04463                 UCNPUSH
FC95 39               (        forth.asm):04464 (4)             rts
FC96 C60D             (        forth.asm):04465 (2)     @pick1  ldb     #13             Argument is greater than or equal to DEPTH
FC98 BDE781           (        forth.asm):04466 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):04467         
FC9B 04               (        forth.asm):04468         OVER    fcb     4               ANSI (Core)
FC9C 4F564552         (        forth.asm):04469                 fcc     'OVER'          ( x1 x2 -- x1 x2 x1 )
FCA0 FC72             (        forth.asm):04470                 fdb     PICK
                      (        forth.asm):04471                 RFCS
FCA2 8E0001           (        forth.asm):04472 (3)             ldx     #1
FCA5 20D5             (        forth.asm):04473 (3)             bra     PICK1
                      (        forth.asm):04474         
FCA7 04               (        forth.asm):04475         ROLL    fcb     4               ANSI (Core ext)
FCA8 524F4C4C         (        forth.asm):04476                 fcc     'ROLL'          ( xu xu-1 ... x0 u -- xu-1 ... x0 xu )
FCAC FC9B             (        forth.asm):04477                 fdb     OVER
                      (        forth.asm):04478                 RFCS
FCAE BDE819           (        forth.asm):04479 (7)             jsr     NPOP
FCB1 1F16             (        forth.asm):04480 (4)     ROLL1   tfr     x,w             Backup arg <u> to W
FCB3 8DC7             (        forth.asm):04481 (6)             bsr     PICK1           Let PICK do the error handling
FCB5 3121             (        forth.asm):04482 (4+1)           leay    1,y             Point to the LSB of the cell being picked
FCB7 303E             (        forth.asm):04483 (4+1)           leax    -2,y
FCB9 105C             (        forth.asm):04484 (2)             incw
FCBB 103066           (        forth.asm):04485 (4)             addr    w,w
FCBE 113912           (        forth.asm):04486 (6+?)           tfm     x-,y-
FCC1 7EE819           (        forth.asm):04487 (3)             jmp     NPOP
                      (        forth.asm):04488         
FCC4 03               (        forth.asm):04489         ROT     fcb     3               ANSI (Core)
FCC5 524F54           (        forth.asm):04490                 fcc     'ROT'           ( x1 x2 x3 -- x2 x3 x1 )
FCC8 FCA7             (        forth.asm):04491                 fdb     ROLL
                      (        forth.asm):04492                 RFCS
FCCA 8E0002           (        forth.asm):04493 (3)             ldx     #2
FCCD 20E2             (        forth.asm):04494 (3)             bra     ROLL1
                      (        forth.asm):04495         
FCCF 04               (        forth.asm):04496         MROT    fcb     4
FCD0 2D524F54         (        forth.asm):04497                 fcc     '-ROT'
FCD4 FCC4             (        forth.asm):04498                 fdb     ROT
                      (        forth.asm):04499                 RFCS
FCD6 8DF2             (        forth.asm):04500                 RFXT    bsr,ROT+6       XT for ROT
FCD8 20F0             (        forth.asm):04501                 RFXT    bra,ROT+6       XT for ROT
                      (        forth.asm):04502         
FCDA 02               (        forth.asm):04503         CCOMMA  fcb     2               ANSI (Core)
FCDB 432C             (        forth.asm):04504                 fcc     'C,'            ( char -- )
FCDD FCCF             (        forth.asm):04505                 fdb     MROT
                      (        forth.asm):04506                 RFCS
FCDF BDE819           (        forth.asm):04507 (7)             jsr     NPOP
FCE2 1F10             (        forth.asm):04508 (4)             tfr     x,d
FCE4 109E08           (        forth.asm):04509 (5)             ldy     DICEND
FCE7 E7A0             (        forth.asm):04510 (4+1)           stb     ,y+
FCE9 109F08           (        forth.asm):04511 (5)             sty     DICEND
FCEC 39               (        forth.asm):04512 (4)             rts
                      (        forth.asm):04513         
FCED 01               (        forth.asm):04514         COMMA   fcb     1               ANSI (Core)
FCEE 2C               (        forth.asm):04515                 fcc     ','             ( x -- )
FCEF FCDA             (        forth.asm):04516                 fdb     CCOMMA
                      (        forth.asm):04517                 RFCS
FCF1 BDE819           (        forth.asm):04518 (7)             jsr     NPOP
FCF4 109E08           (        forth.asm):04519 (5)             ldy     DICEND
FCF7 AFA1             (        forth.asm):04520 (5+2)           stx     ,y++
FCF9 109F08           (        forth.asm):04521 (5)             sty     DICEND
FCFC 39               (        forth.asm):04522 (4)             rts
                      (        forth.asm):04523         
FCFD 05               (        forth.asm):04524         ALLOT   fcb     5               ANSI (Core)
FCFE 414C4C4F54       (        forth.asm):04525                 fcc     'ALLOT'         ( n -- )
FD03 FCED             (        forth.asm):04526                 fdb     COMMA
                      (        forth.asm):04527                 RFCS
FD05 BDE819           (        forth.asm):04528 (7)             jsr     NPOP            N to X
FD08 DC08             (        forth.asm):04529 (4)             ldd     DICEND
FD0A 308B             (        forth.asm):04530 (4+2)           leax    d,x
FD0C 9F08             (        forth.asm):04531 (4)             stx     DICEND          Adjust HERE
FD0E 39               (        forth.asm):04532 (4)             rts
                      (        forth.asm):04533         
FD0F 04               (        forth.asm):04534         FILL    fcb     4               ANSI (Core)
FD10 46494C4C         (        forth.asm):04535                 fcc     'FILL'          ( c-addr u char -- )
FD14 FCFD             (        forth.asm):04536                 fdb     ALLOT
                      (        forth.asm):04537                 RFCS
FD16 BDE819           (        forth.asm):04538 (7)             jsr     NPOP
FD19 1F16             (        forth.asm):04539 (4)             tfr     x,w             Byte fill value to W
FD1B BDE819           (        forth.asm):04540 (7)     FILL1   jsr     NPOP
FD1E 1F12             (        forth.asm):04541 (4)             tfr     x,y             Byte count to Y
FD20 1E26             (        forth.asm):04542 (5)             exg     y,w             Byte count to W, byte fill value to Y
FD22 BDE819           (        forth.asm):04543 (7)             jsr     NPOP            Destination address to X
FD25 105D             (        forth.asm):04544 (2)             tstw
FD27 2F0B             (        forth.asm):04545 (3)             ble     @filend
FD29 1F20             (        forth.asm):04546 (4)             tfr     y,d             Byte fill value to B
FD2B E784             (        forth.asm):04547 (4+0)           stb     ,x
FD2D 105A             (        forth.asm):04548 (2)             decw
FD2F 3101             (        forth.asm):04549 (4+1)           leay    1,x
FD31 113812           (        forth.asm):04550 (6+?)           tfm     x+,y+
FD34 39               (        forth.asm):04551 (4)     @filend rts
                      (        forth.asm):04552         
FD35 05               (        forth.asm):04553         BLANK   fcb     5               ANSI (String)
FD36 424C414E4B       (        forth.asm):04554                 fcc     'BLANK'         ( c-addr u -- )
FD3B FD0F             (        forth.asm):04555                 fdb     FILL
                      (        forth.asm):04556                 RFCS
FD3D 10860020         (        forth.asm):04557 (4)             ldw     #SP
FD41 20D8             (        forth.asm):04558 (3)             bra     FILL1
                      (        forth.asm):04559         
FD43 06               (        forth.asm):04560         CMOVED  fcb     6               FORTH-83
FD44 434D4F56453E     (        forth.asm):04561                 fcc     'CMOVE>'
FD4A FD35             (        forth.asm):04562                 fdb     BLANK
                      (        forth.asm):04563                 RFCS
FD4C BDE5C1           (        forth.asm):04564 (7)             jsr     ACQMOVP
FD4F 105D             (        forth.asm):04565 (2)             tstw
FD51 270D             (        forth.asm):04566 (3)             beq     @cmovd1
FD53 105A             (        forth.asm):04567 (2)     CMOVD1  decw
FD55 103061           (        forth.asm):04568 (4)             addr    w,x
FD58 103062           (        forth.asm):04569 (4)             addr    w,y
FD5B 105C             (        forth.asm):04570 (2)             incw
FD5D 113912           (        forth.asm):04571 (6+?)           tfm     x-,y-
FD60 39               (        forth.asm):04572 (4)     @cmovd1 rts
                      (        forth.asm):04573         
FD61 05               (        forth.asm):04574         CMOVE   fcb     5               79-STANDARD (REQ153)
FD62 434D4F5645       (        forth.asm):04575                 fcc     'CMOVE'
FD67 FD43             (        forth.asm):04576                 fdb     CMOVED
                      (        forth.asm):04577                 RFCS
FD69 BDE5C1           (        forth.asm):04578 (7)             jsr     ACQMOVP
FD6C 113812           (        forth.asm):04579 (6+?)           tfm     x+,y+
FD6F 39               (        forth.asm):04580 (4)             rts
                      (        forth.asm):04581         
                      (        forth.asm):04582         * Functionally:
                      (        forth.asm):04583         * : MOVE ( addr1 addr2 u -- )      \ u is expressed in bytes
                      (        forth.asm):04584         *   DUP 2OVER                      \ addr1 addr2 u u addr1 addr2
                      (        forth.asm):04585         *   SWAP -                         \ addr1 addr2 u u addr2-addr1
                      (        forth.asm):04586         *   SWAP                           \ addr1 addr2 u addr2-addr1 u
                      (        forth.asm):04587         *   U< IF CMOVE> ELSE CMOVE THEN ;
                      (        forth.asm):04588         * For those who care to read the 1994 specification, arg <u> is expressed in
                      (        forth.asm):04589         * address units. For the rest of us, mere mortals, this is just a byte count.
                      (        forth.asm):04590         * As an aside, this is functionality provided by the glibc memmove function.
FD70 04               (        forth.asm):04591         MOVE    fcb     4               ANSI (Core)
FD71 4D4F5645         (        forth.asm):04592                 fcc     'MOVE'          ( addr1 addr2 u -- )
FD75 FD61             (        forth.asm):04593                 fdb     CMOVE
                      (        forth.asm):04594                 RFCS
FD77 BDE5C1           (        forth.asm):04595 (7)             jsr     ACQMOVP         ADDR1 -> X, ADDR2 -> Y, U -> W
FD7A 105D             (        forth.asm):04596 (2)             tstw
FD7C 270D             (        forth.asm):04597 (3)             beq     @movend
                      (        forth.asm):04598         * addr2 addr1 - u U< IF CMOVE> ELSE CMOVE THEN
FD7E 1F20             (        forth.asm):04599 (4)             tfr     y,d             D has addr2 (dest)
FD80 103210           (        forth.asm):04600 (4)             subr    x,d             D has addr2 - addr1 (dest - src)
FD83 103760           (        forth.asm):04601 (4)             cmpr    w,d
FD86 25CB             (        forth.asm):04602 (3)             blo     CMOVD1          CMOVE>
FD88 113812           (        forth.asm):04603 (6+?)           tfm     x+,y+           CMOVE
FD8B 39               (        forth.asm):04604 (4)     @movend rts
                      (        forth.asm):04605         
FD8C 05               (        forth.asm):04606         CELLS   fcb     5               ANSI (Core)
FD8D 43454C4C53       (        forth.asm):04607                 fcc     'CELLS'         ( n1 -- n2 )
FD92 FD70             (        forth.asm):04608                 fdb     MOVE
                      (        forth.asm):04609                 RFCS
FD94 BDE819           (        forth.asm):04610 (7)             jsr     NPOP            N1 to X
FD97 103011           (        forth.asm):04611 (4)             addr    x,x             Times 2
FD9A 3610             (        forth.asm):04612                 UCNPUSH                 X to N2
FD9C 39               (        forth.asm):04613 (4)             rts
                      (        forth.asm):04614         
FD9D 04               (        forth.asm):04615         LAST    fcb     4               79-STANDARD (REF)
FD9E 4C415354         (        forth.asm):04616                 fcc     'LAST'
FDA2 FD8C             (        forth.asm):04617                 fdb     CELLS
                      (        forth.asm):04618                 RFCS
FDA4 9E06             (        forth.asm):04619 (4)             ldx     LSTWAD
FDA6 7EE80B           (        forth.asm):04620 (3)             jmp     NPUSH
                      (        forth.asm):04621         
FDA9 04               (        forth.asm):04622         HERE    fcb     4               ANSI (Core)
FDAA 48455245         (        forth.asm):04623                 fcc     'HERE'          ( -- addr )
FDAE FD9D             (        forth.asm):04624                 fdb     LAST
                      (        forth.asm):04625                 RFCS
FDB0 9E08             (        forth.asm):04626 (4)             ldx     DICEND
FDB2 7EE80B           (        forth.asm):04627 (3)             jmp     NPUSH
                      (        forth.asm):04628         
FDB5 02               (        forth.asm):04629         PLUSST  fcb     2               ANSI (Core)
FDB6 2B21             (        forth.asm):04630                 fcc     '+!'            ( n|u a-addr -- )
FDB8 FDA9             (        forth.asm):04631                 fdb     HERE
                      (        forth.asm):04632                 RFCS
FDBA BDE4B9           (        forth.asm):04633 (7)             jsr     MIN2PST         We need at least two cells stacked up
FDBD AEC4             (        forth.asm):04634 (5+0)           ldx     ,u              ADDR to X
FDBF EC84             (        forth.asm):04635 (5+0)           ldd     ,x              @ADDR to D
FDC1 E342             (        forth.asm):04636 (5+1)           addd    2,u             Add INCR to D
FDC3 ED84             (        forth.asm):04637 (5+0)           std     ,x              Store the sum back to ADDR
FDC5 3344             (        forth.asm):04638 (4+1)           leau    4,u             Drop two cells from the data stack
FDC7 39               (        forth.asm):04639 (4)             rts
                      (        forth.asm):04640         
FDC8 02               (        forth.asm):04641         CSTORE  fcb     2               ANSI (Core)
FDC9 4321             (        forth.asm):04642                 fcc     'C!'            ( char c-addr -- )
FDCB FDB5             (        forth.asm):04643                 fdb     PLUSST
                      (        forth.asm):04644                 RFCS
FDCD BDE4B9           (        forth.asm):04645 (7)             jsr     MIN2PST         We need at least two cells stacked up
FDD0 A643             (        forth.asm):04646 (4+1)           lda     3,u             CHAR to A
FDD2 A7D4             (        forth.asm):04647 (4+3)           sta     [,u]            Actual store to C-ADDR
FDD4 3344             (        forth.asm):04648 (4+1)           leau    4,u             Drop two cells from the data stack
FDD6 39               (        forth.asm):04649 (4)             rts
                      (        forth.asm):04650         
FDD7 01               (        forth.asm):04651         STORE   fcb     1               ANSI (Core)
FDD8 21               (        forth.asm):04652                 fcc     '!'             ( x a-addr -- )
FDD9 FDC8             (        forth.asm):04653                 fdb     CSTORE
                      (        forth.asm):04654                 RFCS
FDDB BDE4B9           (        forth.asm):04655 (7)             jsr     MIN2PST         At least two cells need to be stacked up
FDDE EC42             (        forth.asm):04656 (5+1)           ldd     2,u             X to D
FDE0 EDD4             (        forth.asm):04657 (5+3)           std     [,u]            Actual store to A-ADDR
FDE2 3344             (        forth.asm):04658 (4+1)           leau    4,u             Drop two cells from the user stack
FDE4 39               (        forth.asm):04659 (4)             rts
                      (        forth.asm):04660         
FDE5 02               (        forth.asm):04661         CFETCH  fcb     2               ANSI (Core)
FDE6 4340             (        forth.asm):04662                 fcc     'C@'            ( c-addr -- char )
FDE8 FDD7             (        forth.asm):04663                 fdb     STORE
                      (        forth.asm):04664                 RFCS
FDEA BDE4B4           (        forth.asm):04665 (7)             jsr     MIN1PST         We need at least one cell stacked up
FDED 4F               (        forth.asm):04666 (1)             clra
FDEE E6D4             (        forth.asm):04667 (4+3)           ldb     [,u]
FDF0 EDC4             (        forth.asm):04668 (5+0)           std     ,u
FDF2 39               (        forth.asm):04669 (4)             rts
                      (        forth.asm):04670         
FDF3 01               (        forth.asm):04671         QMARK   fcb     1               79-STANDARD (REQ194)
FDF4 3F               (        forth.asm):04672                 fcc     '?'
FDF5 FDE5             (        forth.asm):04673                 fdb     CFETCH
                      (        forth.asm):04674                 RFCS
FDF7 BD0CC4           (        forth.asm):04675 (7)             jsr     RAMFTCH         Call the RAM based incarnation of @
FDFA 7EF670           (        forth.asm):04676                 RFXT    jmp,DOT+4       XT for .
                      (        forth.asm):04677         
                      (        forth.asm):04678         * End of ROM part of the builtin dictionary.
     FDFD             (        forth.asm):04679         THEEND  equ     *               This is the end, Beautiful friend
                      (        forth.asm):04680         *                               This is the end, My only friend
                      (        forth.asm):04681         
                      (        forth.asm):04682         * This transactional word is relocated to RAM, so that we can compile new
                      (        forth.asm):04683         * definitions. FORTHIN will take care of that and adjust the relevant pointers.
FDFD 01               (        forth.asm):04684         FETCH   fcb     1               ANSI (Core)
FDFE 40               (        forth.asm):04685                 fcc     '@'             ( a-addr -- x )
FDFF FDF3             (        forth.asm):04686                 fdb     QMARK
                      (        forth.asm):04687                 RFCS
FE01 BDE4B4           (        forth.asm):04688 (7)             jsr     MIN1PST         At least one cell needs to be stacked up
FE04 ECD4             (        forth.asm):04689 (5+3)           ldd     [,u]
FE06 EDC4             (        forth.asm):04690 (5+0)           std     ,u              Returned through the data stack
FE08 39               (        forth.asm):04691 (4)             rts
                      (        forth.asm):04692         
     FE09             (        forth.asm):04693         REALEND equ     *
                      (        forth.asm):04694         
                      (        forth.asm):04695         *******************************************************************************
                      (        forth.asm):04696         * String literals.
                      (        forth.asm):04697         
                      (        forth.asm):04698         * Using CR+LF as it is Minicom's default.
                      (        forth.asm):04699         
                      (        forth.asm):04700         * Clear the screen, VT100 style.
FE09 1B5B481B5B4A0D00 (        forth.asm):04701         CSVT100 fcb     $1B,'[','H',$1B,'[','J',CR,NUL
                      (        forth.asm):04702         
FE11 0D0A             (        forth.asm):04703         BOOTMSG fcb     CR,LF
                      (        forth.asm):04704                 IFNE    RTCFEAT
                      (        forth.asm):04705                 fcc     'Z79Forth/AR 6309 ANS Forth System'
                      (        forth.asm):04706                 ELSE
FE13 5A3739466F727468 (        forth.asm):04707                 fcc     'Z79Forth/A  6309 ANS Forth System'
     2F41202036333039
     20414E5320466F72
     7468205379737465
     6D
                      (        forth.asm):04708                 ENDC                    RTCFEAT
FE34 0D0A             (        forth.asm):04709                 fcb     CR,LF
FE36 3230323231303233 (        forth.asm):04710                 fcc     '20221023 (C) Francois Laagel 2019'
     2028432920467261
     6E636F6973204C61
     6167656C20323031
     39
FE57 0D0A0D0A00       (        forth.asm):04711                 fcb     CR,LF,CR,LF,NUL
                      (        forth.asm):04712         
FE5C 52414D204F4B3A20 (        forth.asm):04713         RAMOKM  fcc     'RAM OK: 32 KB'
     3332204B42
FE69 0D0A00           (        forth.asm):04714         CRLFSTR fcb     CR,LF,NUL
                      (        forth.asm):04715         
FE6C 52414D2063686563 (        forth.asm):04716         RAMFM   fcc     'RAM check failed'
     6B206661696C6564
FE7C 0D0A00           (        forth.asm):04717                 fcb     CR,LF,NUL
                      (        forth.asm):04718         
                      (        forth.asm):04719                 IFNE    RTCFEAT
FE7F                  (        forth.asm):04720         RTPRESM fcc     'MC146818 RTC'
                      (        forth.asm):04721                 fcb     CR,LF,NUL
                      (        forth.asm):04722                 ENDC
                      (        forth.asm):04723         
                      (        forth.asm):04724                 IFEQ    CSSNTVE
FE7F 206F6B           (        forth.asm):04725         OKFEEDB fcc     ' ok'           As per GNU Forth's implementation...
                      (        forth.asm):04726                 ELSE
FE82                  (        forth.asm):04727         OKFEEDB fcc     ' OK'
                      (        forth.asm):04728                 ENDC                    CSSNTVE
FE82 0D0A00           (        forth.asm):04729                 fcb     CR,LF,NUL
                      (        forth.asm):04730         
                      (        forth.asm):04731         * Error messages for IODZHDL.
FE85 496C6C6567616C20 (        forth.asm):04732         IOPERRM fcn     'Illegal opcode near '
     6F70636F6465206E
     6561722000
FE9A 4469766973696F6E (        forth.asm):04733         DV0ERRM fcn     'Division by 0 near '
     2062792030206E65
     61722000
                      (        forth.asm):04734         
FEAE 4461746120737461 (        forth.asm):04735         ERRMTBL fcn     'Data stack overflow'   Error 0
     636B206F76657266
     6C6F7700
FEC2 4461746120737461 (        forth.asm):04736                 fcn     'Data stack underflow'  Error 1
     636B20756E646572
     666C6F7700
FED7 3F00             (        forth.asm):04737                 fcn     '?'                     Error 2
FED9 557365722041424F (        forth.asm):04738                 fcn     'User ABORT'            Error 3
     525400
FEE4 4F6F52206572726F (        forth.asm):04739                 fcn     'OoR error'             Error 4 (formerly 'Division by zero')
     7200
FEEE 4D697373696E6720 (        forth.asm):04740                 fcn     'Missing word name'     Error 5
     776F7264206E616D
     6500
FF00 496E636F72726563 (        forth.asm):04741                 fcn     'Incorrect STATE'       Error 6
     7420535441544500
FF10 52657475726E2073 (        forth.asm):04742                 fcn     'Return stack overflow' Error 7
     7461636B206F7665
     72666C6F7700
FF26 52657475726E2073 (        forth.asm):04743                 fcn     'Return stack underflow' Error 8
     7461636B20756E64
     6572666C6F7700
FF3D 496C6C6567616C20 (        forth.asm):04744                 fcn     'Illegal construct'     Error 9
     636F6E7374727563
     7400
FF4F 417373657274696F (        forth.asm):04745                 fcn     'Assertion failed'      Error 10
     6E206661696C6564
     00
FF60 524F20776F726400 (        forth.asm):04746                 fcn     'RO word'               Error 11
FF68 4D697373696E6720 (        forth.asm):04747                 fcn     'Missing delimiter'     Error 12
     64656C696D697465
     7200
FF7A 496C6C6567616C20 (        forth.asm):04748                 fcn     'Illegal argument'      Error 13
     617267756D656E74
     00
FF8B 4E6F206D61746368 (        forth.asm):04749                 fcn     'No matching CREATE'    Error 14
     696E672043524541
     544500
FF9E 496E76616C696420 (        forth.asm):04750                 fcn     'Invalid BASE'          Error 15
     4241534500
FFAB 576F7264206E616D (        forth.asm):04751                 fcn     'Word name too long'    Error 16
     6520746F6F206C6F
     6E6700
FFBE 494F206572726F72 (        forth.asm):04752                 fcn     'IO error'              Error 17
     00
FFC7 3E494E204F757420 (        forth.asm):04753                 fcn     '>IN Out of range'      Error 18
     6F662072616E6765
     00
                      (        forth.asm):04754         
                      (        forth.asm):04755         * A-list used for numeric literal base prefixes.
FFD8 24               (        forth.asm):04756         BASALST fcc     '$'             Hexadecimal prefix
FFD9 10               (        forth.asm):04757                 fcb     16
FFDA 26               (        forth.asm):04758                 fcc     '&'             Decimal prefix (as in LWASM, VolksForth)
FFDB 0A               (        forth.asm):04759                 fcb     10
FFDC 23               (        forth.asm):04760                 fcc     '#'             Decimal prefix
FFDD 0A               (        forth.asm):04761                 fcb     10
FFDE 25               (        forth.asm):04762                 fcc     '%'             Binary prefix
FFDF 02               (        forth.asm):04763                 fcb     2
FFE0 40               (        forth.asm):04764                 fcc     '@'             Octal prefix
FFE1 08               (        forth.asm):04765                 fcb     8
FFE2 00               (        forth.asm):04766                 fcb     0               End of list marker
                      (        forth.asm):04767         
                      (        forth.asm):04768         * Under no circumstance should the following symbol be negative!
     000D             (        forth.asm):04769         AVL     equ     VECTBL-*        Available EEPROM space left
                      (        forth.asm):04770         
                      (        forth.asm):04771         *******************************************************************************
                      (        forth.asm):04772         * Interrupt vector table
                      (        forth.asm):04773                 org     VECTBL
                      (        forth.asm):04774         
FFF0 E000             (        forth.asm):04775                 fdb     IODZHDL         Illegal opcode/Division by zero trap
FFF2 E036             (        forth.asm):04776                 fdb     SWI3HDL         SWI 3 interrupt vector address
FFF4 E036             (        forth.asm):04777                 fdb     SWI2HDL         SWI 2 interrupt vector address
FFF6 E242             (        forth.asm):04778                 fdb     FIRQHDL         FIRQ interrupt vector address
FFF8 E036             (        forth.asm):04779                 fdb     IRQHDL          IRQ interrupt vector address
FFFA E036             (        forth.asm):04780                 fdb     SWIHDL          SWI interrupt vector address
FFFC E1CA             (        forth.asm):04781                 fdb     NMIHDL          NMI vector address
FFFE E037             (        forth.asm):04782                 fdb     RSTHDL          RESET vector address
                      (        forth.asm):04783         

Symbol Table:
[ G] _BS                              E2F7
[ G] _INTERP                          E0CE
[ G] ABORT                            F109
[ G] ABS                              EFBF
[ G] AC8N1                            0014
[ G] ACCEPT                           F760
[ G] ACDIV16                          0001
[ G] ACIACTL                          D800
[ G] ACIADAT                          D801
[ G] ACIISVC                          0080
[ G] ACIOVRN                          0020
[ G] ACIRDRF                          0001
[ G] ACIRSET                          0043
[ G] ACIRTS0                          0095
[ G] ACIRTS1                          00D5
[ G] ACITDRE                          0002
[ G] ACQMOVP                          E5C1
[ G] ACQVMRA                          E5C4
[ G] ACRDINT                          0080
[ G] ACRST                            0003
[ G] ACRTS0                           0000
[ G] ACRTS1                           0040
[ G] ADDS                             E1AA
[ G] ADIV16                           E17D
[ G] AGAIN                            EFFC
[ G] AGAIN1                           F014
[ G] AHEAD                            EDED
[ G] AHEAD1                           EDF8
[ G] ALIGN                            EB7C
[ G] ALIGND                           EB85
[ G] ALLOT                            FCFD
[ G] ANCMPF                           0134
[ G] AND                              EED2
[SG] ANSFEAT                          0001
[ G] APADBUF                          01E3
[ G] AVL                              000D
[ G] BALCHK                           E860
[ G] BALERR                           E865
[ G] BALNCD                           0135
[ G] BASALST                          FFD8
[ G] BASBKUP                          0136
[ G] BASE                             FBA9
[ G] BASESET                          FBC3
[ G] BCSOPC                           2503
[ G] BDICEND                          010C
[ G] BDIRTY                           0004
[ G] BEGIN                            EFE8
[ G] BFDISP                           0410
[ G] BINUSE                           0001
[ G] BKCHAR                           F2AB
[ G] BKIN2PT                          E89F
[ G] BKQUOT                           F18A
[ G] BKSLSH                           F348
[ G] BL                               F6D9
[ G] BLANK                            FD35
[ G] BLK                              EAF1
[ G] BLKSIZ                           0400
[ G] BLOCK                            EAC3
[ G] BLSTWAD                          010A
[ G] BMAPPD                           0002
[ G] BNEOPC                           2603
[ G] BOBLKNO                          0402
[ G] BOFLAGS                          0401
[ G] BOOTMSG                          FE11
[ G] BOTERM                           0400
[ G] BS                               0008
[ G] BSBFADR                          0120
[ G] BUF0                             04A0
[ G] BUF1                             08B0
[ G] BUFFER                           EA77
[ G] BYE                              F2A2
[ G] CCOMMA                           FCDA
[ G] CCREGM                           E20D
[ G] CELLP                            F890
[ G] CELLS                            FD8C
[ G] CF1BKRD                          E9BA
[ G] CF1BKWR                          E9D5
[ G] CF1BPRE                          E99D
[ G] CF1SRD                           E969
[ G] CF1SWR                           E988
[ G] CFANTHS                          E914
[ G] CFBASE                           C000
[ G] CFBSYB                           0080
[ G] CFCARDP                          0147
[ G] CFCHIGR                          C005
[ G] CFCLOWR                          C004
[ G] CFCMDIS                          E8F9
[ G] CFCMMIR                          0148
[ G] CFCOMDR                          C007
[ G] CFDATAR                          C000
[ G] CFDRHDR                          C006
[ G] CFDRQB                           0008
[ G] CFDRSEL                          E90B
[ G] CFDSCB                           0010
[ G] CFDWFB                           0020
[ G] CFERRB                           0001
[ G] CFERRCD                          0149
[ G] CFERRCK                          E8EC
[ G] CFERROR                          C001
[ G] CFETCH                           FDE5
[ G] CFFEATR                          C001
[ G] CFIDDEV                          00EC
[ G] CFINIT                           E932
[ G] CFLAG                            0001
[ G] CFR1SRA                          E987
[ G] CFRDY                            E8D6
[ G] CFRDYB                           0040
[ G] CFRSCTS                          0020
[ G] CFSCNTR                          C002
[ G] CFSCSZ                           0200
[ G] CFSETFT                          00EF
[ G] CFSNUMR                          C003
[ G] CFSTATR                          C007
[ G] CFWAIT                           E8CE
[ G] CFWSCTS                          0030
[ G] CHAR                             F2B9
[ G] CHARP                            EB92
[ G] CHARS                            EB9D
[ G] CHKNDPT                          E4A9
[ G] CKBASE                           E450
[ G] CKBASRA                          E460
[ G] CKDPTRA                          E4B4
[ G] CKNBPFX                          E3AE
[ G] CMDBFSZ                          0084
[ G] CMDBUF                           0378
[ G] CMOVD1                           FD53
[ G] CMOVE                            FD61
[ G] CMOVED                           FD43
[ G] CMP2                             E5AD
[ G] CMP2RA                           E5B0
[ G] CMPCOMA                          F1CF
[ G] COMMA                            FCED
[ G] COMP                             E116
[ G] COMPC                            F1E0
[ G] COMPC1                           F1E6
[ G] COMPLRA                          E12A
[ G] COMPR                            F211
[ G] CONS                             EC68
[ G] COUNT                            F74B
[ G] CR                               000D
[ G] CREAT1                           EC11
[ G] CREATE                           EBF0
[ G] CRLF                             F71A
[ G] CRLFSTR                          FE69
[ G] CSPOP                            E819
[ G] CSPUSH                           E80B
[ G] CSSNTVE                          0000
[ G] CSTORE                           FDC8
[ G] CSVT100                          FE09
[ G] CURTOKL                          0142
[ G] CVISSGN                          0141
[ G] CVNSTR                           E460
[ G] CVT                              F59F
[ G] CVT0                             F5A5
[ G] CVT1                             F5AD
[ G] CVTB                             F661
[ G] CVTE                             F559
[ G] CVTFCN                           013E
[ G] DBDIVSG                          F5FE
[ G] DDUMP                            FBE7
[ G] DEBUG                            0000
[ G] DECIMAL                          FBB6
[ G] DEFFLG                           0145
[ G] DEFFLM                           0040
[ G] DEPTH                            EBDB
[ G] DEV0                             C000
[ G] DEV1                             C400
[ G] DEV2                             C800
[ G] DEV3                             CC00
[ G] DEV4                             D000
[ G] DEV5                             D400
[ G] DEV6                             D800
[ G] DEV7                             DC00
[ G] DICEND                           0108
[ G] DIFF                             EE76
[ G] DIV                              F9B6
[ G] DIV1                             F9BE
[ G] DIVDBL                           0139
[ G] DIVFCN                           0138
[ G] DIVSYM                           013A
[ G] DLESS                            F428
[ G] DMINUS                           F404
[ G] DNEG                             F3E2
[ G] DO                               ED39
[ G] DOES                             EC19
[ G] DOESEX                           EC27
[ G] DOEX                             ED50
[ G] DOT                              F66C
[ G] DOTR                             F694
[ G] DOTR0                            F69D
[ G] DOTTICK                          FBD1
[ G] DPLUS                            F3CA
[ G] DPOPRA                           E82A
[ G] DPREGM                           E219
[ G] DPSHRA                           E818
[ G] DREGM                            E211
[ G] DROP                             FC55
[ G] DUP                              FC47
[ G] DV0ERRM                          FE9A
[ G] DVFDIV                           0002
[ G] DVFMASK                          0007
[ G] DVFMOD                           0001
[ G] DVFSLMD                          0000
[ G] DVOA1D                           0008
[ G] DVOWSYM                          0010
[ G] DZEQ                             F41C
[ G] EBUFS                            E9F0
[ G] ELSE                             EE31
[ G] EMIT                             F851
[ G] EMPT1B                           EA08
[ G] EMPTYB                           EA00
[ G] EMXASXT                          E155
[ G] EQ                               EE5E
[ G] ERRHD1                           E784
[ G] ERRHDLR                          E781
[ G] ERRMTBL                          FEAE
[ G] ETX                              0003
[ G] EVAL                             F7D0
[ G] EXCT                             F28C
[ G] EXIT                             F01F
[ G] F83DIVF                          013C
[ G] FALSE                            F8B3
[ G] FDCTSYM                          E5CF
[ G] FDIVADJ                          FA26
[ G] FETCH                            FDFD
[ G] FFLAG                            0040
[ G] FILL                             FD0F
[ G] FILL1                            FD1B
[ G] FIND                             F116
[ G] FINDSYM                          E641
[ G] FIRQHDL                          E242
[ G] FLUSH                            EA53
[ G] FMSLMOD                          F998
[ G] FNDPLD                           0110
[ G] FORTHIN                          E341
[ G] FWDREF                           0116
[ G] GETCH                            E2A1
[ G] GETS                             E303
[ G] HDMP2                            E19B
[ G] HDMP4                            E182
[ G] HERE                             FDA9
[ G] HEX                              FBC6
[ G] HEX1D                            E169
[ G] HEXBFSZ                          0050
[ G] HEXBUF                           03FC
[ G] HOLD                             F586
[ G] HT                               0009
[ G] HVNMI                            0001
[ G] HVNMI2                           0000
[ G] ICHECK                           ECEA
[ G] IF                               EE0E
[ G] IFLAG                            0010
[ G] ILLOPC                           00C7
[ G] IMDFLG                           0144
[ G] IMDFLM                           0080
[ G] IMMED                            ECAB
[ G] IMMED1                           ECB9
[ G] INDI                             F0AF
[ G] INDIP                            F0D1
[ G] INDJ                             F0DA
[ G] INDJP                            F0E2
[ G] INDK                             F0EB
[ G] INF                              EF81
[ G] INIT                             E047
[ G] INTERP                           E0B2
[ G] INTISRA                          E106
[ G] INTRPRA                          E111
[ G] INVERT                           EEE5
[ G] IODZHDL                          E000
[ G] IOERR                            E982
[ G] IOPERRM                          FE85
[ G] IOSTRT                           C000
[ G] IRQHDL                           E036
[ G] ISDBLF                           0140
[ G] ISEADDR                          0128
[ G] ISERCHD                          E361
[ G] ISLEN                            0126
[ G] ISNEGF                           013F
[ G] JMPOPC                           007E
[ G] JSRLAST                          0114
[ G] JSROPC                           00BD
[ G] KEY                              F840
[ G] KEYP                             F82E
[ G] LAST                             FD9D
[ G] LBRACK                           F164
[ G] LDXOPC                           008E
[ G] LEAVE                            F091
[ G] LF                               000A
[ G] LIST                             EB3E
[ G] LITER                            E591
[ G] LITERAL                          EC45
[ G] LOAD                             F7A9
[ G] LOAD1                            F7B6
[ G] LOAD2                            F7C4
[ G] LOCWRT                           E536
[ G] LOOP                             ED59
[ G] LOOP1                            ED63
[ G] LOOPEX                           EDA0
[ G] LPAR                             F326
[ G] LSTWAD                           0106
[ G] LWMNRA                           E54D
[ G] MARKER                           F258
[ G] MAX                              EF8F
[ G] MILLIS                           F818
[ G] MILLIS1                          F822
[ G] MIN                              EFA7
[ G] MIN1PST                          E4B4
[ G] MIN2PST                          E4B9
[ G] MIN3PST                          E4BE
[ G] MIN4PST                          E4C3
[ G] MINTLRA                          E0CC
[ G] MINUS                            F8A3
[ G] MOD                              F981
[ G] MONITOR                          ECDF
[ G] MOVE                             FD70
[ G] MROT                             FCCF
[ G] MRUBUFA                          011E
[ G] MSLCNT                           031A
[ G] MSTAR                            F90F
[ G] MULFCN                           013B
[ G] MULT                             F8F4
[ G] MULT1                            F8FA
[ G] NAK                              0015
[ G] NCLR                             EBC1
[ G] NDCTWKS                          E667
[ G] NEGATE                           EFD5
[ G] NIP                              FC3D
[ G] NMCVCRA                          E13C
[ G] NMCVIRA                          E0E4
[ G] NMI2DM                           E1B5
[ G] NMI4DM                           E1BB
[ G] NMIDML                           E1C1
[ G] NMIHDL                           E1CA
[ G] NONAME                           F201
[ G] NOT                              EF4D
[ G] NPOP                             E819
[ G] NPUSH                            E80B
[ G] NSTBOT                           02F8
[ G] NSTKSZ                           00C0
[ G] NSTTOP                           0238
[ G] NUL                              0000
[ G] NULP                             EF2C
[ G] NUMCVRA                          E448
[ G] NUMCVT                           E3D4
[ G] NXTCHAR                          E3A7
[ G] OKFEEDB                          FE7F
[ G] ONEM                             F872
[ G] ONEP                             F881
[ G] OR                               EEC0
[ G] OVER                             FC9B
[ G] PAD                              F722
[ G] PADBSZ                           0054
[ G] PADBUF                           018F
[ G] PAGE                             F70D
[ G] PAYLOAD                          FAC5
[ G] PCREGM                           E22A
[ G] PICK                             FC72
[ G] PICK1                            FC7C
[ G] PLOAD                            010E
[ G] PLOOP                            EDA5
[ G] PLOOPEX                          EDB2
[ G] PLOPEX1                          EDB5
[ G] PLUS                             F862
[ G] PLUSST                           FDB5
[ G] POSTPON                          F195
[ G] pragma                           0000
[ G] PRBLKIN                          E754
[ G] PREAPAD                          F5EB
[ G] PSTR                             F365
[ G] PTOP0                            F674
[ G] PUTCH                            E2CD
[ G] PUTCR                            E2ED
[ G] PUTS                             E2E0
[ G] QDO                              ECF4
[ G] QDO1                             ED18
[ G] QDOEX                            ED1F
[ G] QMARK                            FDF3
[ G] QRYDUP                           FC21
[ G] QUIT                             F0F3
[ G] RAKEVAR                          0118
[ G] RAMCHK                           E057
[ G] RAMFAIL                          E069
[ G] RAMFM                            FE6C
[SG] RAMFTCH                          0CC4
[ G] RAMOK                            E07B
[ G] RAMOKM                           FE5C
[ G] RAMSIZE                          8000
[ G] RAMSTRT                          0000
[ G] RBRACK                           F15B
[ G] RBRACK1                          F161
[ G] RCLR                             EBCC
[ G] RDEPTH                           0137
[ G] REALEND                          FE09
[ G] RECADDR                          0112
[ G] RECURSE                          F249
[SG] RELFEAT                          0000
[SG] RELFEAT                          0001
[ G] REPEAT                           F06D
[ G] RFETCH                           F0CA
[ G] RFROM                            F07B
[ G] ROLL                             FCA7
[ G] ROLL1                            FCB1
[ G] ROMSTRT                          E000
[ G] ROT                              FCC4
[ G] RPICKN                           F0B4
[ G] RPOP                             E847
[ G] RPOPRA                           E860
[ G] RPSHRA                           E846
[ G] RPUSH                            E82B
[ G] RSBSPFX                          E449
[ G] RSP                              0100
[ G] RSTBOT                           0378
[ G] RSTHDL                           E037
[ G] RSTINP                           E885
[ G] RSTKSZ                           0080
[ G] RSTRCT                           ECC3
[ G] RSTTOP                           02F8
[ G] RTADV32                          0020
[ G] RTADVRS                          0070
[ G] RTARS64                          000A
[ G] RTAS                             D400
[ G] RTAUIP                           0080
[ G] RTB24                            0002
[ G] RTBDM                            0004
[ G] RTBPIE                           0040
[ G] RTBSET                           0080
[ G] RTCAVL                           0146
[ G] RTCFEAT                          0000
[ G] RTCFTCH                          EB25
[ G] RTCPF                            0040
[ G] RTCSTOR                          EB34
[ G] RTDS                             D401
[ G] RTODOM                           0007
[ G] RTODOW                           0006
[ G] RTOHOUR                          0004
[ G] RTOHRA                           0005
[ G] RTOMIN                           0002
[ G] RTOMINA                          0003
[ G] RTOMON                           0008
[ G] RTOPRES                          003F
[ G] RTOREGA                          000A
[ G] RTOREGB                          000B
[ G] RTOREGC                          000C
[ G] RTOREGD                          000D
[ G] RTOSEC                           0000
[ G] RTOSECA                          0001
[ G] RTOUMB                           000E
[ G] RTOYEAR                          0009
[ G] RTSOPC                           0039
[ G] RTUMSZ                           0032
[ G] SAVBUF                           EA13
[ G] SAVINP                           E86A
[ G] SCNETOK                          E38F
[ G] SCNSTOK                          E37C
[ G] SCR                              EB09
[ G] SERBCNT                          014D
[ G] SERBDEQ                          014C
[ G] SERBENQ                          014B
[ G] SERBSZ                           0040
[ G] SERBUF                           014F
[ G] SHARPS                           F594
[ G] SHIFT                            F8CD
[ G] SIGN                             F571
[ G] SINFEQ                           EE8F
[ G] SLEN                             E233
[ G] SLMOD                            F98D
[ G] SMSLREM                          F9A7
[ G] SOURCE                           F335
[ G] SP                               0020
[ G] SPACE                            F6E4
[ G] SPACES                           F6F1
[ G] SQUOTE                           F379
[ G] SRCID                            014A
[ G] SREGM                            E22F
[ G] SSDFEAT                          0001
[ G] STATE                            FB9B
[ G] STOD                             EBA8
[ G] STORE                            FDD7
[ G] STRSL1                           FA3C
[ G] STRSLMD                          FA67
[ G] STRSLSH                          FA33
[ G] STSLFCN                          013D
[ G] SUP                              EF73
[ G] SVCTOKL                          0143
[ G] SWAP                             FC5F
[ G] SWDIC                            E4C8
[ G] SWDIC1                           E4CD
[ G] SWI2HDL                          E036
[ G] SWI3HDL                          E036
[ G] SWIHDL                           E036
[ G] SYSSTAT                          FABB
[ G] SYSSTK                           FAB2
[ G] TBUFF                            044C
[ G] TBUFSZ                           0048
[ G] TERPRET                          F778
[ G] THEEND                           FDFD
[ G] THEN                             EE3F
[ G] THRU                             F7F7
[ G] TICK                             F16B
[ G] TICKS                            EB15
[ G] TIKSHI                           0130
[ G] TIKSLOW                          0132
[ G] TOIN                             EAFD
[ G] TOKENEP                          0104
[ G] TOKENSP                          0102
[ G] TONUMBR                          F4CB
[ G] TOR                              F086
[ G] TRUE                             F8C0
[ G] TUCK                             FC32
[ G] TWODIV                           F972
[ G] TWODROP                          F482
[ G] TWODUP                           F490
[ G] TWOFTCH                          F4B8
[ G] TWOOVER                          F44E
[ G] TWOSTOR                          F4A7
[ G] TWOSWAP                          F466
[ G] TWOTIM                           F963
[ G] TYPE                             F72E
[ G] U2INFRD                          E164
[ G] UBASE                            0122
[ G] UBLK                             012C
[ G] UDOT                             F68B
[ G] UDOTR                            F6CF
[ G] UINF                             EF64
[ G] UMSLMOD                          FA73
[ G] UMSTAR                           F91A
[ G] UNLESS                           EE20
[ G] UNLOOP                           EDDE
[ G] UNMON                            ECD2
[ G] UNTIL                            F040
[ G] UPDATE                           EA5D
[ G] UREGM                            E226
[ G] USCR                             012E
[ G] USTATE                           0124
[ G] USUP                             EF55
[ G] UTOIN                            012A
[ G] VARCON                           E5A3
[ G] VARCON1                          E5A5
[ G] VARCON2                          E5A8
[ G] VARI                             EC87
[ G] VARSPC                           0100
[ G] VECTBL                           FFF0
[ G] VLPRVEP                          011A
[ G] VLPRVHD                          011C
[ G] WBIFDRT                          EA2A
[ G] WDICSPC                          0CC0
[ G] WHILE                            F05F
[ G] WORD                             F2DF
[ G] WORDS                            FAD4
[ G] WREGM                            E215
[ G] WRLNMSK                          001F
[ G] WTOOLNG                          E565
[ G] XMITOK                           014E
[ G] XOFF                             0013
[ G] XON                              0011
[ G] XOR                              EEAA
[ G] XOR1                             EEBB
[ G] XREGM                            E21E
[ G] YREGM                            E222
[ G] ZFLAG                            0004
[ G] ZGREAT                           EEFA
[ G] ZLESS                            EF13
[ G] ZNEQ                             EF43
