                      (        forth.asm):00001         * 6309 Forth based on my 1984/07/16 TRS-80 Model 1 level II ROM implementation.
                      (        forth.asm):00002         *
                      (        forth.asm):00003         * This work is dedicated to Alain Pinaud, author of "Programmer en Forth"
                      (        forth.asm):00004         * published by Editions du P.S.I. in 1983--i.e. my virtual mentor in the field.
                      (        forth.asm):00005         * Special thanks go William Astle for his fantastic LW Tools utility set and
                      (        forth.asm):00006         * to Robert Lipe for his advice on serial line handling. Apache subversion
                      (        forth.asm):00007         * and the sdiff utility also were on my side all the time.
                      (        forth.asm):00008         *
                      (        forth.asm):00009         * Also credited for their help: Justin Poirier (seminal HW design), Daniel
                      (        forth.asm):00010         * Tufvesson (CompactFlash interface), Peter Forth (FB alias), Paul E. Bennett
                      (        forth.asm):00011         * and Michel Jean.
                      (        forth.asm):00012         *
                      (        forth.asm):00013         * This is a native Forth. Not a threaded interpretive implementation.
                      (        forth.asm):00014         * Worth noticing is the fact that the return stack does not hold return
                      (        forth.asm):00015         * addresses at all. All what is stored there is loop indexes and control
                      (        forth.asm):00016         * structures jump addresses. Actual return addresses are kept in the system
                      (        forth.asm):00017         * stack. All in all, this is the result of the work of a 19 year old guy,
                      (        forth.asm):00018         * heavily revisited 35 years later. Some quirks remain that prevent me
                      (        forth.asm):00019         * from offering the full required set--not to mention the choice of using
                      (        forth.asm):00020         * an 8K EEPROM. The downside of this implementation is that the generated
                      (        forth.asm):00021         * code is about 30% larger than a threaded interpretive implementation
                      (        forth.asm):00022         * would be. So it goes...
                      (        forth.asm):00023         *
                      (        forth.asm):00024         * The code generated is limited to a very small instruction set:
                      (        forth.asm):00025         *
                      (        forth.asm):00026         * LDXOPC        $8E     LDX (immediate)
                      (        forth.asm):00027         * JMPOPC        $7E     JMP (extended)
                      (        forth.asm):00028         * JSROPC        $BD     JSR (extended)
                      (        forth.asm):00029         * RTSOPC        $39     RTS (inherent)
                      (        forth.asm):00030         * BCSOPC        $2503   BCS *+5 (relative) Used in LOOP, +LOOP
                      (        forth.asm):00031         * BNEOPC        $2603   BNE *+5 (relative) Used in IF, UNTIL
                      (        forth.asm):00032         *
                      (        forth.asm):00033         * On error, the system stack pointer is reset. The return stack also is 
                      (        forth.asm):00034         * but the data stack will be in the same state as when the error occurred.
                      (        forth.asm):00035         * ABORT and QUIT enforce their own 79-STANDARD behaviour.
                      (        forth.asm):00036         *
                      (        forth.asm):00037         * The 79-STANDARD Forth specification can be downloaded from
                      (        forth.asm):00038         * https://www.complang.tuwien.ac.at/forth/fth79std/FORTH-79.TXT
                      (        forth.asm):00039         *
                      (        forth.asm):00040         * Additionally, this implementation provides a few FORTH-83 words. Those
                      (        forth.asm):00041         * words are CMOVE> and RECURSE. See
                      (        forth.asm):00042         * http://forth.sourceforge.net/standard/fst83/FORTH-83.PRN
                      (        forth.asm):00043         *
                      (        forth.asm):00044         * \ ['] [CHAR] .S CELLS CHAR COMPILE, INVERT KEY? NIP POSTPONE SOURCE TUCK U>
                      (        forth.asm):00045         * UNLOOP and WITHIN have been borrowed from the ANSI draft 6 specification.
                      (        forth.asm):00046         * See http://www.forth.org/svfig/Win32Forth/DPANS94.txt
                      (        forth.asm):00047         *
                      (        forth.asm):00048         * RESTRICT is non-standard. It comes from GNU Forth (VolksForth). The " OK"
                      (        forth.asm):00049         * non-prompt string also does, by the way. Thanks to Anton Ertl for his terse
                      (        forth.asm):00050         * yet valuable input.
                      (        forth.asm):00051         *
                      (        forth.asm):00052         * .' (dot-tick) is non-standard. It comes from SwiftForth. It will be supported
                      (        forth.asm):00053         * if symbolic stack dump has not been disabled (see SSDFEAT in constants.asm).
                      (        forth.asm):00054         *
                      (        forth.asm):00055         * MONITOR and ICHECK are also non-standard. They are intended to maintain and
                      (        forth.asm):00056         * verify the integrity of a checksum of the code section of RAM resident
                      (        forth.asm):00057         * words, with the exception of VARIABLEs and CREATEd words. CREATEd words,
                      (        forth.asm):00058         * if subject to the MONITOR treatment will also carry a code section
                      (        forth.asm):00059         * checksum, although this is not the default behaviour. The checksum will
                      (        forth.asm):00060         * consist in an extra byte added to every word's header. MONITOR and ICHECK
                      (        forth.asm):00061         * will only be available if the reliability feature has not been disabled
                      (        forth.asm):00062         * (see RELFEAT in constants.asm).
                      (        forth.asm):00063         *
                      (        forth.asm):00064         * Forth source code portability note:
                      (        forth.asm):00065         * Because Z79Forth does not use the return stack to store return addresses,
                      (        forth.asm):00066         * it makes it quite easy to write code that is not readily portable to classic
                      (        forth.asm):00067         * threaded interpretive implementations. The resulting code will be simpler but
                      (        forth.asm):00068         * portability will be limited.
                      (        forth.asm):00069         *
                      (        forth.asm):00070         * Miscellaneous notes: RA stands for return address; EP for entry point.
                      (        forth.asm):00071         * CF is a shortcut for CompactFlash. TOS means top of the data/normal stack.
                      (        forth.asm):00072         * Occasionally, CFA is used for code field address which, in this
                      (        forth.asm):00073         * implementation, is a synonym for compilation address. XT means execution
                      (        forth.asm):00074         * token--the ANSI term for a compilation address. MSC stands for most
                      (        forth.asm):00075         * significant cell; LSC for least significant cell.
                      (        forth.asm):00076         *
                      (        forth.asm):00077         * The complete guide to the HD6309 extended instruction set can be found at:
                      (        forth.asm):00078         * https://cyberabi.ipower.com/Downloads/The_6309_Book.pdf. For convenience,
                      (        forth.asm):00079         * and with the author's explicit agreement, this document has been included
                      (        forth.asm):00080         * in this distribution. This is recommended reading for anyone altering this
                      (        forth.asm):00081         * code or trying to make some sense of it!!!
                      (        forth.asm):00082         *
                      (        forth.asm):00083         * This whole effort started out as a porting endeavour and ended up being a
                      (        forth.asm):00084         * substantial rewrite, trying to take advantage of the features of the 6309
                      (        forth.asm):00085         * as much as possible. The primary goals of this implementation are:
                      (        forth.asm):00086         * reliability, performance and code compactness. A number of bugs in the
                      (        forth.asm):00087         * original code have been fixed--some remain for sure!
                      (        forth.asm):00088         *
                      (        forth.asm):00089         * Obligatory literary reference:
                      (        forth.asm):00090         * "The paper is very heavy going, and I should never have read it, had I not
                      (        forth.asm):00091         * written it myself." J. E. Littlewood (1885-1977).
                      (        forth.asm):00092         
0000                  (        forth.asm):00093         pragma  opt cd,operandsizewarning
                      (        forth.asm):00094         
                      (        forth.asm):00095                 include constants.asm
                      (    constants.asm):00001         * Memory map.
     0000             (    constants.asm):00002         RAMSTRT equ     $0000
     8000             (    constants.asm):00003         RAMSIZE equ     $8000
     C000             (    constants.asm):00004         IOSTRT  equ     $C000
     E000             (    constants.asm):00005         ROMSTRT equ     $E000
     FFF0             (    constants.asm):00006         VECTBL  equ     $FFF0
                      (    constants.asm):00007         
                      (    constants.asm):00008         * Base address for global variables (direct page addressed by default).
     0100             (    constants.asm):00009         VARSPC  equ     $100
                      (    constants.asm):00010         
                      (    constants.asm):00011         * The 74HCT138 IO address decoder maps one 1KB page per usable device.
     C000             (    constants.asm):00012         DEV0    equ     $C000           Compact Flash memory module
     C400             (    constants.asm):00013         DEV1    equ     $C400
     C800             (    constants.asm):00014         DEV2    equ     $C800
     CC00             (    constants.asm):00015         DEV3    equ     $CC00
     D000             (    constants.asm):00016         DEV4    equ     $D000
     D400             (    constants.asm):00017         DEV5    equ     $D400
     D800             (    constants.asm):00018         DEV6    equ     $D800           HD63B50 unit 0
     DC00             (    constants.asm):00019         DEV7    equ     $DC00
                      (    constants.asm):00020         
     D800             (    constants.asm):00021         ACIACTL equ     DEV6
     D801             (    constants.asm):00022         ACIADAT equ     DEV6+1
                      (    constants.asm):00023         
                      (    constants.asm):00024         * ACIA control register bits.
     0003             (    constants.asm):00025         ACRST   equ     11b             ACIA master reset
                      (    constants.asm):00026         
                      (    constants.asm):00027         * 115200 bps w. 7.37280 MHz oscillator, 38400 bps w. 2.45760 MHz oscillator.
     0001             (    constants.asm):00028         ACD16   equ     01b             ACIA div 16
                      (    constants.asm):00029         * 28800 bps w. 7.37280 MHz oscillator, bps 9600 w. 2.45760 MHz oscillator.
     0002             (    constants.asm):00030         ACD64   equ     10b             ACIA div 64
     0001             (    constants.asm):00031         ACDVSEL equ     ACD16           Selected divider value
                      (    constants.asm):00032         
     0014             (    constants.asm):00033         AC8N1   equ     10100b          ACIA 8N1
     0000             (    constants.asm):00034         ACRTS0  equ     0000000b        ACIA RTS low
     0040             (    constants.asm):00035         ACRTS1  equ     1000000b        ACIA RTS high
                      (    constants.asm):00036         
     0043             (    constants.asm):00037         ACIRSET equ     ACRTS1|ACRST
     0055             (    constants.asm):00038         ACIRTS1 equ     ACRTS1|AC8N1|ACDVSEL
     0015             (    constants.asm):00039         ACIRTS0 equ     ACRTS0|AC8N1|ACDVSEL
                      (    constants.asm):00040         
                      (    constants.asm):00041         * ACIA status register bits.
     0001             (    constants.asm):00042         ACIRDRF equ     1               Receive data register full
     0002             (    constants.asm):00043         ACITDRE equ     2               Transmit data register empty
     0020             (    constants.asm):00044         ACIOVRN equ     32              Overrun status register bit (req. NZ CKOVRUN)
                      (    constants.asm):00045         
                      (    constants.asm):00046         * Compact Flash parameters.
     C000             (    constants.asm):00047         CFBASE  equ     DEV0
     C000             (    constants.asm):00048         CFDATAR equ     CFBASE          R/W data register
     C001             (    constants.asm):00049         CFERROR equ     CFBASE+1        RO error register
     C001             (    constants.asm):00050         CFFEATR equ     CFBASE+1        WO features register
     C002             (    constants.asm):00051         CFSCNTR equ     CFBASE+2        R/W sector count register
     C003             (    constants.asm):00052         CFSNUMR equ     CFBASE+3        R/W sector number register
     C004             (    constants.asm):00053         CFCLOWR equ     CFBASE+4        R/W cylinder low register
     C005             (    constants.asm):00054         CFCHIGR equ     CFBASE+5        R/W cylinder high register
     C006             (    constants.asm):00055         CFDRHDR equ     CFBASE+6        R/W drive/head register
     C007             (    constants.asm):00056         CFSTATR equ     CFBASE+7        RO status register
     C007             (    constants.asm):00057         CFCOMDR equ     CFBASE+7        WO command register
                      (    constants.asm):00058         
                      (    constants.asm):00059         * CF status bits.
     0080             (    constants.asm):00060         CFBSYB  equ     10000000b       BSY status bit
     0040             (    constants.asm):00061         CFRDYB  equ     01000000b       RDY status bit
     0020             (    constants.asm):00062         CFDWFB  equ     00100000b       DWF status bit (not used)
     0010             (    constants.asm):00063         CFDSCB  equ     00010000b       DSC status bit (not used)
     0008             (    constants.asm):00064         CFDRQB  equ     00001000b       DRQ status bit
     0001             (    constants.asm):00065         CFERRB  equ     00000001b       ERR status bit
                      (    constants.asm):00066         
     0200             (    constants.asm):00067         CFSCSZ  equ     $200            Compact Flash (IDE) sector size
                      (    constants.asm):00068         
                      (    constants.asm):00069         * CF commands.
     00EC             (    constants.asm):00070         CFIDDEV equ     $EC             Identify Device
     00EF             (    constants.asm):00071         CFSETFT equ     $EF             Set Feature
     0020             (    constants.asm):00072         CFRSCTS equ     $20             Read Sectors
     0030             (    constants.asm):00073         CFWSCTS equ     $30             Write Sectors
                      (    constants.asm):00074         
                      (    constants.asm):00075         * Buffer in-memory structure:
                      (    constants.asm):00076         * data: 1024 bytes.
                      (    constants.asm):00077         * terminator: 1 byte set to 0.
                      (    constants.asm):00078         * flags: 1 byte.
                      (    constants.asm):00079         * blknum: 2 bytes.
     0001             (    constants.asm):00080         BINUSE  equ     1               Buffer is allocated (the blknum field is valid)
     0002             (    constants.asm):00081         BMAPPD  equ     2               Block has been read from the CF device
     0004             (    constants.asm):00082         BDIRTY  equ     4               Block has been marked for update
     0400             (    constants.asm):00083         BLKSIZ  equ     2*CFSCSZ        Block size is 2 CF sectors (1 KB)
                      (    constants.asm):00084         * Buffer field offsets.
     0401             (    constants.asm):00085         BOFLAGS equ     BLKSIZ+1        Base buffer to the 'flag' field offset
     0402             (    constants.asm):00086         BOBLKNO equ     BLKSIZ+2        Base buffer to the 'blknum' field offset
                      (    constants.asm):00087         
     0410             (    constants.asm):00088         BFDISP  equ     BUF1-BUF0       Offset between resident buffers
                      (    constants.asm):00089         
                      (    constants.asm):00090         * ASCII trivia.
     0000             (    constants.asm):00091         NUL     equ     0               End of string marker
     0003             (    constants.asm):00092         ETX     equ     3               Control-C (intr)
     0008             (    constants.asm):00093         BS      equ     8               Backspace
     0009             (    constants.asm):00094         HT      equ     9               Horizontal tab
     000A             (    constants.asm):00095         LF      equ     $0A             aka new line
     000D             (    constants.asm):00096         CR      equ     $0D             Carriage return
     000C             (    constants.asm):00097         FF      equ     $0C             Form feed (clear screen)
     0015             (    constants.asm):00098         NAK     equ     $15             Control-U (kill)
     0020             (    constants.asm):00099         SP      equ     $20
                      (    constants.asm):00100         
                      (    constants.asm):00101         * Configuration tunable parameters.
     0000             (    constants.asm):00102         CSSNTVE equ     0               Words and HEX numbers are case sensitive if NZ
     0000             (    constants.asm):00103         STRCT79 equ     0               Set to 1 to omit the COMPILE word
     0000             (    constants.asm):00104         DEBUG   equ     0               Enforce assertions and miscellaneous checks
     0000             (    constants.asm):00105         CKOVRUN equ     0               Check for overruns in GETCH
     0001             (    constants.asm):00106         USEDP   equ     1               Set to 1 to use direct page addressing
     0001             (    constants.asm):00107         SSDFEAT equ     1               Set to 1 to enable the symbolic stack dump feat.
     0001             (    constants.asm):00108         RELFEAT equ     1               Set to 1 to enable the reliability feature
                      (    constants.asm):00109         *                               Caution: when this is enabled, you can no
                      (    constants.asm):00110         *                               longer fit a DEBUG image into an 8 KB EEPROM
                      (    constants.asm):00111         * Loop count for MS. This is busy waiting, so we depend on the CPU clock speed.
                      (    constants.asm):00112         *MSLCNT equ     496             at 3 MHz emulation mode
                      (    constants.asm):00113         *MSLCNT equ     662             at 4 MHz emulation mode
                      (    constants.asm):00114         *MSLCNT equ     794             at 4 MHz native mode
     03E2             (    constants.asm):00115         MSLCNT  equ     994             at 5 MHz native mode
                      (    constants.asm):00116         
                      (    constants.asm):00117         * Stack sizes.
     00C0             (    constants.asm):00118         NSTKSZ  equ     192             Expressed in bytes. Now only limited by RAM size
     0080             (    constants.asm):00119         RSTKSZ  equ     128             Expressed in bytes
                      (    constants.asm):00120         
                      (    constants.asm):00121         * Buffer sizes.
     0084             (    constants.asm):00122         CMDBFSZ equ     132             Command line entry buffer
     0050             (    constants.asm):00123         HEXBFSZ equ     80
     0048             (    constants.asm):00124         TBUFSZ  equ     72              Used by VLIST to print word name, CVNSTR
                      (    constants.asm):00125         *                               And DUMP, at offset 69
     0051             (    constants.asm):00126         PADBSZ  equ     1+80            79-STANDARD mandates a minimum of 64 bytes
                      (    constants.asm):00127         
                      (    constants.asm):00128         * Dictionary flag masks.
     0080             (    constants.asm):00129         IMDFLM  equ     $80             Immediate flag mask
     0040             (    constants.asm):00130         DEFFLM  equ     $40             Compilation only flag mask
                      (    constants.asm):00131                 IFNE    RELFEAT
     0020             (    constants.asm):00132         MONFLM  equ     $20             Monitored flag mask. This indicates that the
                      (    constants.asm):00133         *                               word to which it relates might be checked for
                      (    constants.asm):00134         *                               integrity. This applies by default to all words
                      (    constants.asm):00135         *                               defined with : and all constants. It might
                      (    constants.asm):00136         *                               also apply to any other CREATEd object by
                      (    constants.asm):00137         *                               resorting to the MONITOR word. Using MONITOR
                      (    constants.asm):00138         *                               on variable word contents is guaranteed to
                      (    constants.asm):00139         *                               raise ICHECK's attention.
                      (    constants.asm):00140                 ENDC
                      (    constants.asm):00141         
     001F             (    constants.asm):00142         WRLNMSK equ     $1F             31 character is the maximum word length
                      (    constants.asm):00143         
                      (    constants.asm):00144         * 6309 opcodes.
     008E             (    constants.asm):00145         LDXOPC  equ     $8E             LDX (immediate)
     007E             (    constants.asm):00146         JMPOPC  equ     $7E             JMP (extended)
     00BD             (    constants.asm):00147         JSROPC  equ     $BD             JSR (extended)
     0039             (    constants.asm):00148         RTSOPC  equ     $39             RTS (inherent)
     2503             (    constants.asm):00149         BCSOPC  equ     $2503           BCS *+5 (relative)
     2603             (    constants.asm):00150         BNEOPC  equ     $2603           BNE *+5 (relative)
     00C7             (    constants.asm):00151         ILLOPC  equ     $C7             An illegal operation code. Meant to raise a trap
                      (    constants.asm):00152         
     0001             (    constants.asm):00153         CFLAG   equ     1               CC bit 0
     0004             (    constants.asm):00154         ZFLAG   equ     4               CC bit 2
     0008             (    constants.asm):00155         NFLAG   equ     8               CC bit 3
                      (    constants.asm):00156         
                      (    constants.asm):00157         * RAM based execution token for @.
     0C14             (    constants.asm):00158         RAMFTCH set     WDICSPC+4       Dictionary header overhead is word's length + 3
                      (    constants.asm):00159                 IFNE    RELFEAT         The reliability features adds one byte to the
     0C15             (    constants.asm):00160         RAMFTCH set     WDICSPC+5       header: a checksum.
                      (    constants.asm):00161                 ENDC
                      (    constants.asm):00162         
                      (        forth.asm):00096         
                      (        forth.asm):00097         * Unchecked NPUSH. This is for situations in which there is
                      (        forth.asm):00098         * absolutely no chance of overflow. For instance, in case
                      (        forth.asm):00099         * we just popped 2 cells and push back one or two. This
                      (        forth.asm):00100         * always is inlined,
0000                  (        forth.asm):00101         UCNPUSH MACRO   NOEXPAND
                      (        forth.asm):00102                 pshu    x
                      (        forth.asm):00103                 ENDM
                      (        forth.asm):00104         
                      (        forth.asm):00105         * Make sure minimum data stack requirements are satisfied upon word entry.
                      (        forth.asm):00106         * The requirement is expressed in cell size--2 bytes on the 6309.
                      (        forth.asm):00107         * \1 specifies the required number of cells.
0000                  (        forth.asm):00108         MINDREQ MACRO   NOEXPAND
                      (        forth.asm):00109                 ldd     #NSTBOT-(\1*2)  Cell count one expects to be stacked up
                      (        forth.asm):00110                 jsr     CHKNDPT         No return if the condition is not met
                      (        forth.asm):00111                 ENDM
                      (        forth.asm):00112         
                      (        forth.asm):00113         * Reliability feature support: execution tokens.
                      (        forth.asm):00114         * \1 has the opcode we want to emit.
                      (        forth.asm):00115         * \2 has the execution token address, as if the header overhead always
                      (        forth.asm):00116         * was 3 bytes.
0000                  (        forth.asm):00117         RFXT    MACRO   NOEXPAND
                      (        forth.asm):00118                 IFNE    RELFEAT
                      (        forth.asm):00119                 \1      \2+1
                      (        forth.asm):00120                 ELSE
                      (        forth.asm):00121                 \1      \2
                      (        forth.asm):00122                 ENDC
                      (        forth.asm):00123                 ENDM
                      (        forth.asm):00124         
                      (        forth.asm):00125         * Reliability feature support: variable word header contents.
                      (        forth.asm):00126         * This is a dummy checksum only used for EEPROM resident words.
                      (        forth.asm):00127         * Those never are checked for code integrity by MONITOR.
0000                  (        forth.asm):00128         RFCS    MACRO   NOEXPAND
                      (        forth.asm):00129                 IFNE    RELFEAT
                      (        forth.asm):00130                 fcb     ILLOPC          Illegal opcode
                      (        forth.asm):00131                 ENDC
                      (        forth.asm):00132                 ENDM
                      (        forth.asm):00133         
                      (        forth.asm):00134         *******************************************************************************
                      (        forth.asm):00135         * RAM definitions. We cannot initialize globals from the assembly defs.
                      (        forth.asm):00136         * All we can do here is define addresses and size things up.
                      (        forth.asm):00137         
                      (        forth.asm):00138         * RAMSTART is 0. We leave page 0 unused as a bug proof area.
                      (        forth.asm):00139         * When compiled in debug mode, this area is filled with illegal
                      (        forth.asm):00140         * instruction opcodes ($C7).
                      (        forth.asm):00141         
                      (        forth.asm):00142                 org     VARSPC
                      (        forth.asm):00143         
                      (        forth.asm):00144         * Global pointers.
0100                  (        forth.asm):00145         RSP     rmb     2               The return stack pointer
0102                  (        forth.asm):00146         TOKENSP rmb     2               Token start pointer (STRS)
0104                  (        forth.asm):00147         TOKENEP rmb     2               Token end pointer (STRE)
0106                  (        forth.asm):00148         LSTWAD  rmb     2               Last defined word header pointer--LAST
0108                  (        forth.asm):00149         DICEND  rmb     2               Current end of the dictionary--HERE
010A                  (        forth.asm):00150         BLSTWAD rmb     2               Backup (was IX)
010C                  (        forth.asm):00151         BDICEND rmb     2               Backup (was IY)
010E                  (        forth.asm):00152         RECADDR rmb     2               Used by RECURSE
0110                  (        forth.asm):00153         JSRLAST rmb     2               Last compilation address of #JSROPC
0112                  (        forth.asm):00154         VLPRVEP rmb     2               Used in VLIST to compute word code length
0114                  (        forth.asm):00155         VLPRVHD rmb     2               Used in VLIST to compute word code length
0116                  (        forth.asm):00156         MRUBUFA rmb     2               Most recently used buffer address
                      (        forth.asm):00157         
                      (        forth.asm):00158         * Global variables.
0118                  (        forth.asm):00159         UBASE   rmb     2               Base for numbers input and output--BASE
011A                  (        forth.asm):00160         USTATE  rmb     2               0 if interpreting, 1 if compiling--STATE
011C                  (        forth.asm):00161         UTOIN   rmb     2               User variable for >IN
011E                  (        forth.asm):00162         UBLK    rmb     2               User variable for BLK
0120                  (        forth.asm):00163         USCR    rmb     2               User variable for SCR (output for LIST)
0122                  (        forth.asm):00164         BSBFADR rmb     2               Base buffer address for the input stream
                      (        forth.asm):00165                 IFNE    DEBUG
0124                  (        forth.asm):00166         CCREG   rmb     2               A DEBUG variable for predicates (see CMP2)
                      (        forth.asm):00167                 ENDC
0124                  (        forth.asm):00168         CMDLNSZ rmb     1               Entered character count in GETS (INTERP)
0125                  (        forth.asm):00169         RDEPTH  rmb     1               Return stack depth in cells
0126                  (        forth.asm):00170         IRDPTH  rmb     1               Return stack depth when : was last invoked
0127                  (        forth.asm):00171         RTSREMV rmb     1               If > 1, omit the final RTS when compiling
0128                  (        forth.asm):00172         DIVFCN  rmb     1               Flag used by /, MOD and /MOD
0129                  (        forth.asm):00173         STSLFCN rmb     1               Flag used by */, */MOD
012A                  (        forth.asm):00174         CVTFCN  rmb     1               CVT: 0 => # semantics, 1 => #S semantics
012B                  (        forth.asm):00175         ISNEGF  rmb     1               Number being scanned is negative
012C                  (        forth.asm):00176         CVISSGN rmb     1               Flag: should CVNSTR consider numbers as signed
012D                  (        forth.asm):00177         CURTOKL rmb     1               Current token length. Set by SWDIC
012E                  (        forth.asm):00178         IMDFLG  rmb     1               Immediate flag
012F                  (        forth.asm):00179         DEFFLG  rmb     1               Define flag
0130                  (        forth.asm):00180         NBCTFB0 rmb     1               NZ if -->/CONTINUED invoked from the console
                      (        forth.asm):00181         
0131                  (        forth.asm):00182         CFCARDP rmb     1               NZ if CF card present
0132                  (        forth.asm):00183         CFCMMIR rmb     1               Last CF command issued
0133                  (        forth.asm):00184         CFERRCD rmb     1               and the corresponding error code
                      (        forth.asm):00185         
0134                  (        forth.asm):00186         PADBUF  rmb     PADBSZ          PAD lives here. Used by <#, #, #S, #> and DUMP
                      (        forth.asm):00187         
                      (        forth.asm):00188         * The normal (data) stack.
0185 00               (        forth.asm):00189                 align   2
     0186             (        forth.asm):00190         NSTTOP  equ     *               U's value when the data stack is full
0186                  (        forth.asm):00191                 rmb     NSTKSZ
     0246             (        forth.asm):00192         NSTBOT  equ     *               U's value when the data stack is empty
                      (        forth.asm):00193         
                      (        forth.asm):00194         * The return stack.
     0246             (        forth.asm):00195         RSTTOP  equ     *
0246                  (        forth.asm):00196                 rmb     RSTKSZ
     02C6             (        forth.asm):00197         RSTBOT  equ     *
                      (        forth.asm):00198         
02C6                  (        forth.asm):00199         CMDBUF  rmb     CMDBFSZ
034A                  (        forth.asm):00200         HEXBUF  rmb     HEXBFSZ
                      (        forth.asm):00201         
039A                  (        forth.asm):00202         TBUFF   rmb     TBUFSZ          Output for CVNSTR. Also used by DUMP
                      (        forth.asm):00203         
03E2 0000000000000000 (        forth.asm):00204                 align   16
     000000000000
03F0                  (        forth.asm):00205         BUF0    rmb     BLKSIZ+4
07F4 0000000000000000 (        forth.asm):00206                 align   16
     00000000
0800                  (        forth.asm):00207         BUF1    rmb     BLKSIZ+4
                      (        forth.asm):00208         
                      (        forth.asm):00209         *******************************************************************************
                      (        forth.asm):00210         * Writable dictionary section begins right here. We cannot have anything
                      (        forth.asm):00211         * statically defined at this point. Therefore, FORTHIN moves the code for @
                      (        forth.asm):00212         * to this location and sets up DICEND and LSTWAD accordingly. All the RAM
                      (        forth.asm):00213         * beyond this point (after the reallocated @ implementation) is user defined
                      (        forth.asm):00214         * material. Note that builtin words, though they cannot be forgotten (to the
                      (        forth.asm):00215         * extent they are ROM resident--not to mention inter-word dependencies),
                      (        forth.asm):00216         * might still be overridden by user definitions. VLIST will happily ignore
                      (        forth.asm):00217         * that fact and list everything in the dictionary linked list order.
                      (        forth.asm):00218         
0C04 0000000000000000 (        forth.asm):00219                 align   16
     00000000
     0C10             (        forth.asm):00220         WDICSPC equ     *
                      (        forth.asm):00221         
                      (        forth.asm):00222         *******************************************************************************
                      (        forth.asm):00223         * ROM code begins.
                      (        forth.asm):00224         
                      (        forth.asm):00225                 org     ROMSTRT
                      (        forth.asm):00226         * Trap handler: division by zero or illegal opcode. See page 4-10 of "The 6309
                      (        forth.asm):00227         * Book" for a description of interrupt stacks in native 6309 mode.
E000 113C40           (        forth.asm):00228 (4)     IODZHDL bitmd   #$40            Illegal opcode?
E003 2705             (        forth.asm):00229 (3)             beq     @iodzh1
E005 8EFE7D           (        forth.asm):00230 (3)             ldx     #IOPERRM
E008 2008             (        forth.asm):00231 (3)             bra     @iodxh2
E00A 113C80           (        forth.asm):00232 (4)     @iodzh1 bitmd   #$80            Division by zero?
E00D 2725             (        forth.asm):00233 (3)             beq     @iodzh3         And you may ask yourself, well
                      (        forth.asm):00234         *                               How did I get here?
E00F 8EFE92           (        forth.asm):00235 (3)             ldx     #DV0ERRM
E012 BDE1E2           (        forth.asm):00236 (7)     @iodxh2 jsr     PUTS
E015 EC6C             (        forth.asm):00237 (5+1)           ldd     12,s            Return code address (PC)
E017 8E034A           (        forth.asm):00238 (3)             ldx     #HEXBUF
E01A BDE17C           (        forth.asm):00239 (7)             jsr     HDMP4   
E01D 8E034A           (        forth.asm):00240 (3)             ldx     #HEXBUF
E020 BDE1E2           (        forth.asm):00241 (7)             jsr     PUTS
E023 BDE1EF           (        forth.asm):00242 (7)             jsr     PUTCR
E026 8EE61E           (        forth.asm):00243 (3)             ldx     #ERRHD1
E029 AF6C             (        forth.asm):00244 (5+1)           stx     12,s            Resume execution in the error handler
E02B 8EE000           (        forth.asm):00245 (3)             ldx     #IODZHDL
E02E AF68             (        forth.asm):00246 (5+1)           stx     8,s             With Y set to IODZHDL
E030 8603             (        forth.asm):00247 (2)             lda     #3              And user ABORT error code
E032 A762             (        forth.asm):00248 (4+1)           sta     2,s             Passed back through B
E034 3B               (        forth.asm):00249 (17+?)  @iodzh3 rti
                      (        forth.asm):00250         
     E035             (        forth.asm):00251         SWI3HDL equ     *
     E035             (        forth.asm):00252         SWI2HDL equ     *
     E035             (        forth.asm):00253         FIRQHDL equ     *
     E035             (        forth.asm):00254         IRQHDL  equ     *
     E035             (        forth.asm):00255         SWIHDL  equ     *
E035 13               (        forth.asm):00256 (1+?)   NMIHDL  sync                    Go to low power mode idling forever
                      (        forth.asm):00257         
E036 1A50             (        forth.asm):00258 (2)     RSTHDL  orcc    #$50            Disable interrupts
                      (        forth.asm):00259         
                      (        forth.asm):00260         * In theory, this means 15% extra performance.
                      (        forth.asm):00261         * In practice, this means an extra 5 mA current comsumption.
                      (        forth.asm):00262         * The additional performance is measurable so I am going for it.
E038 113D01           (        forth.asm):00263 (5)             ldmd    #1              Establish 6309 native mode
                      (        forth.asm):00264         
E03B 8643             (        forth.asm):00265 (2)             lda     #ACIRSET
E03D B7D800           (        forth.asm):00266 (4)             sta     ACIACTL         ACIA master reset
E040 8655             (        forth.asm):00267 (2)             lda     #ACIRTS1
E042 B7D800           (        forth.asm):00268 (4)             sta     ACIACTL         No IRQ on RDRF, RTS high, 8N1, 115200 bps
                      (        forth.asm):00269         
E045 8EFDED           (        forth.asm):00270 (3)             ldx     #BOOTMSG        Identity statement
                      (        forth.asm):00271         
                      (        forth.asm):00272         * Send the NUL terminated string pointed to by X to the ACIA.
                      (        forth.asm):00273         * The RAM is not assumed to be working.
E048 C602             (        forth.asm):00274 (2)     INIT    ldb     #ACITDRE
E04A A680             (        forth.asm):00275 (4+1)   @init0  lda     ,x+
E04C 270A             (        forth.asm):00276 (3)             beq     RAMCHK          NUL marks the end of the string
E04E F5D800           (        forth.asm):00277 (4)     @init1  bitb    ACIACTL         Wait for TDRE bit to be set
E051 27FB             (        forth.asm):00278 (3)             beq     @init1
E053 B7D801           (        forth.asm):00279 (4)             sta     ACIADAT         Transmit data
E056 20F2             (        forth.asm):00280 (3)             bra     @init0          Next char, if any
                      (        forth.asm):00281         
                      (        forth.asm):00282         * RAM0 32 KB self test (destructive).
E058 8E0000           (        forth.asm):00283 (3)     RAMCHK  ldx     #RAMSTRT
E05B AF84             (        forth.asm):00284 (5+0)   @ramch1 stx     ,x
E05D AC84             (        forth.asm):00285 (5+0)           cmpx    ,x
E05F 2609             (        forth.asm):00286 (3)             bne     RAMFAIL
E061 3002             (        forth.asm):00287 (4+1)           leax    2,x
E063 8C8000           (        forth.asm):00288 (3)             cmpx    #RAMSTRT+RAMSIZE
E066 26F3             (        forth.asm):00289 (3)             bne     @ramch1
E068 2012             (        forth.asm):00290 (3)             bra     RAMOK
                      (        forth.asm):00291         
E06A C680             (        forth.asm):00292 (2)     RAMFAIL ldb     #128
E06C 108E8000         (        forth.asm):00293 (4)     @ramf1  ldy     #$8000
E070 313F             (        forth.asm):00294 (4+1)   @ramf2  leay    -1,y
E072 26FC             (        forth.asm):00295 (3)             bne     @ramf2
E074 5A               (        forth.asm):00296 (1)             decb
E075 26F5             (        forth.asm):00297 (3)             bne     @ramf1
E077 8EFE61           (        forth.asm):00298 (3)             ldx     #RAMFM
E07A 20CC             (        forth.asm):00299 (3)             bra     INIT            Here we go again
                      (        forth.asm):00300         
                      (        forth.asm):00301         * RAM Initialization to all $C7 if DEBUG mode is enabled else zeroes.
E07C 8E0000           (        forth.asm):00302 (3)     RAMOK   ldx     #RAMSTRT
E07F 3101             (        forth.asm):00303 (4+1)           leay    1,x
E081 10867FFF         (        forth.asm):00304 (4)             ldw     #RAMSIZE-1
                      (        forth.asm):00305                 IFNE    DEBUG
                      (        forth.asm):00306                 lda     #ILLOPC
                      (        forth.asm):00307                 sta     ,x
                      (        forth.asm):00308                 ELSE
E085 6F84             (        forth.asm):00309 (6+0)           clr     ,x
                      (        forth.asm):00310                 ENDC
E087 113812           (        forth.asm):00311 (6+?)           tfm     x+,y+
                      (        forth.asm):00312         
                      (        forth.asm):00313         * Initialize the system stack pointer and the direct page base address register.
E08A 10CE8000         (        forth.asm):00314 (4)             lds     #RAMSTRT+RAMSIZE
                      (        forth.asm):00315                 IFNE    USEDP
E08E 8601             (        forth.asm):00316 (2)             lda     #VARSPC/256
E090 1F8B             (        forth.asm):00317 (4)             tfr     a,dp
     01               (        forth.asm):00318                 SETDP   VARSPC/256
                      (        forth.asm):00319                 ENDC
E092 8EFE49           (        forth.asm):00320 (3)             ldx     #RAMOKM
E095 BDE1E2           (        forth.asm):00321 (7)             jsr     PUTS
E098 BDE248           (        forth.asm):00322 (7)             jsr     FORTHIN         Global variables initialization
E09B BDE786           (        forth.asm):00323 (7)             jsr     CFINIT          CompactFlash card initialization
E09E 0D31             (        forth.asm):00324 (4)             tst     CFCARDP
E0A0 2706             (        forth.asm):00325 (3)             beq     INTERP
                      (        forth.asm):00326         * A CF card is present, LOAD block #1.
E0A2 8E0001           (        forth.asm):00327 (3)             ldx     #1
E0A5 BDF692           (        forth.asm):00328 (7)             jsr     LOAD1
                      (        forth.asm):00329         
                      (        forth.asm):00330         * The interpreter main loop.
E0A8 104F             (        forth.asm):00331 (2)     INTERP  clrd
E0AA DD1E             (        forth.asm):00332 (4)             std     UBLK            Interpreting from the console. Set BLK to 0
E0AC DD1C             (        forth.asm):00333 (4)             std     UTOIN
E0AE 8E02C6           (        forth.asm):00334 (3)             ldx     #CMDBUF
E0B1 9F22             (        forth.asm):00335 (4)             stx     BSBFADR
E0B3 C683             (        forth.asm):00336 (2)             ldb     #CMDBFSZ-1      NUL terminator is not included in the char count
E0B5 BDE205           (        forth.asm):00337 (7)             jsr     GETS            Acquire command from the console
                      (        forth.asm):00338         * Additional setup in case the ANSI \ is used.
E0B8 D724             (        forth.asm):00339 (3)             stb     CMDLNSZ         GETS returns the entered character count via B
                      (        forth.asm):00340         * Additional preparation work for block support.
E0BA 0F30             (        forth.asm):00341 (5)             clr     NBCTFB0         Flag whether -->/CONTINUED is called from blk 0
E0BC 8D02             (        forth.asm):00342 (6)             bsr     _INTERP
E0BE 20E8             (        forth.asm):00343 (3)     MINTLRA bra     INTERP
                      (        forth.asm):00344         
                      (        forth.asm):00345         * The interpreter itself.
E0C0 BDE287           (        forth.asm):00346 (7)     _INTERP jsr     SCNSTOK         Scan for the beginning of a word at address X
E0C3 2715             (        forth.asm):00347 (3)             beq     @more0          This is the end
E0C5 0D1B             (        forth.asm):00348 (4)             tst     USTATE+1        We do ignore the upper byte
E0C7 2644             (        forth.asm):00349 (3)             bne     COMP            We are compiling
E0C9 BDE362           (        forth.asm):00350 (7)             jsr     SWDIC           Updates TOKENEP, CURTOKL, IMDFLG/DEFFLG
E0CC 2624             (        forth.asm):00351 (3)             bne     @exec           Word found, execute it
E0CE BDE2B7           (        forth.asm):00352 (7)             jsr     NUMCVT
     E0D1             (        forth.asm):00353         NMCVIRA equ     *
E0D1 BDE694           (        forth.asm):00354 (7)             jsr     NPUSH
E0D4 9E04             (        forth.asm):00355 (4)             ldx     TOKENEP
E0D6 6D84             (        forth.asm):00356 (5+0)   MORE    tst     ,x
E0D8 26E6             (        forth.asm):00357 (3)             bne     _INTERP         Next token, please!
                      (        forth.asm):00358         * End of input stream condition is recognized.
E0DA DC1E             (        forth.asm):00359 (4)     @more0  ldd     UBLK
E0DC 2705             (        forth.asm):00360 (3)             beq     @more1          We are back from the console
E0DE 0D30             (        forth.asm):00361 (4)             tst     NBCTFB0         -->/CONTINUED invoked from the console?
E0E0 2601             (        forth.asm):00362 (3)             bne     @more1          Yes
E0E2 39               (        forth.asm):00363 (4)             rts                     No, we're done here
E0E3 0F30             (        forth.asm):00364 (5)     @more1  clr     NBCTFB0         The -->/CONTINUED exception only applies once
E0E5 8EFE77           (        forth.asm):00365 (3)             ldx     #OKPRMPT        Provide OK feedback
E0E8 0D1B             (        forth.asm):00366 (4)             tst     USTATE+1        No OK feedback if we're compiling, just CRLF
E0EA 2702             (        forth.asm):00367 (3)             beq     @more2
E0EC 3003             (        forth.asm):00368 (4+1)           leax    3,x             Skip the ' OK' string when compiling
E0EE BDE1E2           (        forth.asm):00369 (7)     @more2  jsr     PUTS
E0F1 39               (        forth.asm):00370 (4)             rts                     Back to whoever invoked us
E0F2 962F             (        forth.asm):00371 (3)     @exec   lda     DEFFLG
E0F4 2705             (        forth.asm):00372 (3)             beq     @introk         Compilation only flag is not set
E0F6 C606             (        forth.asm):00373 (2)             ldb     #6              Incorrect STATE
E0F8 BDE61B           (        forth.asm):00374 (7)             jsr     ERRHDLR         No return
     E0FB             (        forth.asm):00375         INTISRA equ     *               For symbolic stack debugging purposes
E0FB DC04             (        forth.asm):00376 (4)     @introk ldd     TOKENEP
E0FD 9322             (        forth.asm):00377 (4)             subd    BSBFADR
E0FF DD1C             (        forth.asm):00378 (4)             std     UTOIN           Derive >IN from TOKENEP
E101 8EE108           (        forth.asm):00379 (3)             ldx     #INTRPRA        The return address
E104 3410             (        forth.asm):00380 (4+2)           pshs    x
E106 1F25             (        forth.asm):00381 (4)             tfr     y,pc            An indirect call to Y
E108 BDE71B           (        forth.asm):00382 (7)     INTRPRA jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
E10B 20C9             (        forth.asm):00383 (3)             bra     MORE
                      (        forth.asm):00384         
                      (        forth.asm):00385         * The compiler.
                      (        forth.asm):00386         * Upon entry TOKENSP has been set by a prior call to SCNSTOK.
E10D BDE362           (        forth.asm):00387 (7)     COMP    jsr     SWDIC           Updates TOKENEP, CURTOKL, IMDFLG/DEFFLG
E110 2733             (        forth.asm):00388 (3)             beq     @cmpnum         Word @ TOKENSP is not in the dictionary
E112 0D2E             (        forth.asm):00389 (4)             tst     IMDFLG
E114 271E             (        forth.asm):00390 (3)             beq     @notimd
E116 DC04             (        forth.asm):00391 (4)             ldd     TOKENEP         Derive >IN from TOKENEP
E118 9322             (        forth.asm):00392 (4)             subd    BSBFADR
E11A DD1C             (        forth.asm):00393 (4)             std     UTOIN
                      (        forth.asm):00394         * Immediate word processing. We execute the word with an option to compile
                      (        forth.asm):00395         * an execution routine as well. This is achieved by allowing the callee to
                      (        forth.asm):00396         * set an 'action component' address that resides at 2,s in the context
                      (        forth.asm):00397         * of the (immediate) word being executed. Upon return, if that address is
                      (        forth.asm):00398         * found to be NZ, a JSR to that address will be compiled. This feature is
                      (        forth.asm):00399         * used in a number of words. DOES> is one of them.
E11C 104F             (        forth.asm):00400 (2)             clrd
E11E 3406             (        forth.asm):00401 (4+2)           pshs    d               Default action component address is none
E120 8EE127           (        forth.asm):00402 (3)             ldx     #COMPLRA        Word is IMD. Invoke it. Maybe compile it too
E123 3410             (        forth.asm):00403 (4+2)           pshs    x               Return to COMPLRA
E125 1F25             (        forth.asm):00404 (4)             tfr     y,pc            An indirect call to Y
E127 BDE71B           (        forth.asm):00405 (7)     COMPLRA jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
E12A 9F04             (        forth.asm):00406 (4)             stx     TOKENEP
E12C 3506             (        forth.asm):00407 (4+2)           puls    d               Code address possibly set by IMD word
E12E 104D             (        forth.asm):00408 (2)             tstd
E130 27D6             (        forth.asm):00409 (3)             beq     INTRPRA         Word has no action component
E132 1F02             (        forth.asm):00410 (4)             tfr     d,y
E134 1F21             (        forth.asm):00411 (4)     @notimd tfr     y,x
E136 109E08           (        forth.asm):00412 (5)             ldy     DICEND
E139 86BD             (        forth.asm):00413 (2)             lda     #JSROPC         JSR extended
E13B 8D12             (        forth.asm):00414 (6)             bsr     CHKRTS          Check if the final RTS can be omitted
E13D BDE438           (        forth.asm):00415 (7)             jsr     VARCON2         Compile a JSR to the action component
E140 109F08           (        forth.asm):00416 (5)             sty     DICEND
E143 2006             (        forth.asm):00417 (3)             bra     @cmpdon         Branch back to the interpreter
E145 BDE2B7           (        forth.asm):00418 (7)     @cmpnum jsr     NUMCVT
     E148             (        forth.asm):00419         NMCVCRA equ     *
E148 BDE421           (        forth.asm):00420 (7)             jsr     LITER
E14B 9E04             (        forth.asm):00421 (4)     @cmpdon ldx     TOKENEP
E14D 2087             (        forth.asm):00422 (3)             bra     MORE
                      (        forth.asm):00423         
                      (        forth.asm):00424         * Check whether the final RTS can be eliminated. It can only be if we have no
                      (        forth.asm):00425         * forward references to HERE when COMPR (;) is invoked. This is a rather
                      (        forth.asm):00426         * complicated matter but this implementation works on the basis that we can do
                      (        forth.asm):00427         * so safely if at least 2 subroutine calls have been issued with a return
                      (        forth.asm):00428         * stack whose depth is equal to IRDPTH, immediately prior to the invokation
                      (        forth.asm):00429         * of COMPR (;).
E14F 3402             (        forth.asm):00430 (4+1)   CHKRTS  pshs    a
E151 109F10           (        forth.asm):00431 (5)             sty     JSRLAST         JSRLAST points to the latest JSR code emission
E154 9625             (        forth.asm):00432 (3)             lda     RDEPTH
E156 9126             (        forth.asm):00433 (3)             cmpa    IRDPTH          Return stack depth when : was last invoked
E158 2705             (        forth.asm):00434 (3)             beq     @ckrts1
E15A 0F27             (        forth.asm):00435 (5)             clr     RTSREMV
E15C 3502             (        forth.asm):00436 (4+1)   @ckrts0 puls    a
E15E 39               (        forth.asm):00437 (4)             rts
E15F 0C27             (        forth.asm):00438 (5)     @ckrts1 inc     RTSREMV
E161 20F9             (        forth.asm):00439 (3)             bra     @ckrts0
                      (        forth.asm):00440         
                      (        forth.asm):00441         * Store the HEX representation of the lower nibble of A to X+.
E163 3404             (        forth.asm):00442 (4+1)   HEX1D   pshs    b
E165 C630             (        forth.asm):00443 (2)             ldb     #'0
E167 840F             (        forth.asm):00444 (2)             anda    #$0f
E169 810A             (        forth.asm):00445 (2)             cmpa    #10
E16B 2502             (        forth.asm):00446 (3)             bcs     @hex1d1
E16D C637             (        forth.asm):00447 (2)             ldb     #'A-10
E16F 103098           (        forth.asm):00448 (4)     @hex1d1 addr    b,a
E172 A780             (        forth.asm):00449 (4+1)           sta     ,x+
E174 3504             (        forth.asm):00450 (4+1)           puls    b
E176 39               (        forth.asm):00451 (4)             rts
                      (        forth.asm):00452         
E177 44               (        forth.asm):00453 (1)     ADIV16  lsra
E178 44               (        forth.asm):00454 (1)             lsra
E179 44               (        forth.asm):00455 (1)             lsra
E17A 44               (        forth.asm):00456 (1)             lsra
E17B 39               (        forth.asm):00457 (4)             rts
                      (        forth.asm):00458         
                      (        forth.asm):00459         * Hexdump D to 4 bytes starting at X.  Upon return, X will point 1 byte
                      (        forth.asm):00460         * after the last character emitted. D is preserved.
E17C 3406             (        forth.asm):00461 (4+2)   HDMP4   pshs    d
E17E 8DF7             (        forth.asm):00462 (6)             bsr     ADIV16
E180 8DE1             (        forth.asm):00463 (6)             bsr     HEX1D
E182 A6E4             (        forth.asm):00464 (4+0)           lda     ,s
E184 8DDD             (        forth.asm):00465 (6)             bsr     HEX1D
E186 A661             (        forth.asm):00466 (4+1)           lda     1,s
E188 8DED             (        forth.asm):00467 (6)             bsr     ADIV16
E18A 8DD7             (        forth.asm):00468 (6)             bsr     HEX1D
E18C A661             (        forth.asm):00469 (4+1)           lda     1,s
E18E 8DD3             (        forth.asm):00470 (6)             bsr     HEX1D
E190 3506             (        forth.asm):00471 (4+2)           puls    d
E192 6F84             (        forth.asm):00472 (6+0)           clr     ,x
E194 39               (        forth.asm):00473 (4)             rts
                      (        forth.asm):00474         
E195 3406             (        forth.asm):00475 (4+2)   HDMP2   pshs    d
E197 8DDE             (        forth.asm):00476 (6)             bsr     ADIV16
E199 8DC8             (        forth.asm):00477 (6)             bsr     HEX1D
E19B A6E4             (        forth.asm):00478 (4+0)           lda     ,s
E19D 8DC4             (        forth.asm):00479 (6)             bsr     HEX1D
E19F 3506             (        forth.asm):00480 (4+2)           puls    d
E1A1 6F84             (        forth.asm):00481 (6+0)           clr     ,x
E1A3 39               (        forth.asm):00482 (4)             rts
                      (        forth.asm):00483         
                      (        forth.asm):00484         * Add string pointed to by Y starting at the address stored in X.
E1A4 3402             (        forth.asm):00485 (4+1)   ADDS    pshs    a
E1A6 A6A0             (        forth.asm):00486 (4+1)   @adds1  lda     ,y+
E1A8 A780             (        forth.asm):00487 (4+1)           sta     ,x+
E1AA 26FA             (        forth.asm):00488 (3)             bne     @adds1
E1AC 3502             (        forth.asm):00489 (4+1)           puls    a
E1AE 39               (        forth.asm):00490 (4)             rts
                      (        forth.asm):00491         
                      (        forth.asm):00492         * Returns the length of the string pointed to by X (terminator excluded) in W.
E1AF 3410             (        forth.asm):00493 (4+2)   SLEN    pshs    x
E1B1 105F             (        forth.asm):00494 (2)             clrw
E1B3 105C             (        forth.asm):00495 (2)     @slen1  incw
E1B5 A680             (        forth.asm):00496 (4+1)           lda     ,x+
E1B7 26FA             (        forth.asm):00497 (3)             bne     @slen1
E1B9 105A             (        forth.asm):00498 (2)             decw
E1BB 3510             (        forth.asm):00499 (4+2)           puls    x
E1BD 39               (        forth.asm):00500 (4)             rts
                      (        forth.asm):00501         
                      (        forth.asm):00502                 include console.asm
E1BE 3404             (      console.asm):00001 (4+1)   PUTCH   pshs    b
E1C0 C602             (      console.asm):00002 (2)             ldb     #ACITDRE
E1C2 F5D800           (      console.asm):00003 (4)     @ptch1  bitb    ACIACTL         Wait for TDRE bit to be set
E1C5 27FB             (      console.asm):00004 (3)             beq     @ptch1
E1C7 B7D801           (      console.asm):00005 (4)             sta     ACIADAT         Transmit data
E1CA 3504             (      console.asm):00006 (4+1)           puls    b
E1CC 39               (      console.asm):00007 (4)             rts
                      (      console.asm):00008         
E1CD 8615             (      console.asm):00009 (2)     GETCH   lda     #ACIRTS0
E1CF B7D800           (      console.asm):00010 (4)             sta     ACIACTL         You may talk to me now
E1D2 8601             (      console.asm):00011 (2)             lda     #ACIRDRF
E1D4 B5D800           (      console.asm):00012 (4)     @again  bita    ACIACTL
E1D7 27FB             (      console.asm):00013 (3)             beq     @again
E1D9 8655             (      console.asm):00014 (2)             lda     #ACIRTS1
E1DB B7D800           (      console.asm):00015 (4)             sta     ACIACTL         You may shut up now
                      (      console.asm):00016                 IFNE    CKOVRUN
                      (      console.asm):00017                 lda     #ACIOVRN
                      (      console.asm):00018                 bita    ACIACTL         Check for overrun
                      (      console.asm):00019                 beq     @getdat
                      (      console.asm):00020                 lda     #'*
                      (      console.asm):00021                 bsr     PUTCH
                      (      console.asm):00022                 ENDC
E1DE B6D801           (      console.asm):00023 (4)     @getdat lda     ACIADAT         Get character from the ACIA
E1E1 39               (      console.asm):00024 (4)             rts
                      (      console.asm):00025         
                      (      console.asm):00026         * Send NUL terminated string pointed to by X to the ACIA.
E1E2 3416             (      console.asm):00027 (4+4)   PUTS    pshs    x,d
E1E4 A680             (      console.asm):00028 (4+1)   @puts1  lda     ,x+
E1E6 2704             (      console.asm):00029 (3)             beq     @puts2         NUL marks the end of the string
E1E8 8DD4             (      console.asm):00030 (6)             bsr     PUTCH
E1EA 20F8             (      console.asm):00031 (3)             bra     @puts1
E1EC 3516             (      console.asm):00032 (4+4)   @puts2  puls    d,x
E1EE 39               (      console.asm):00033 (4)             rts
                      (      console.asm):00034         
E1EF 3410             (      console.asm):00035 (4+2)   PUTCR   pshs    x
E1F1 8EFE5E           (      console.asm):00036 (3)             ldx     #CRLFSTR
E1F4 8DEC             (      console.asm):00037 (6)             bsr     PUTS
E1F6 3510             (      console.asm):00038 (4+2)           puls    x
E1F8 39               (      console.asm):00039 (4)             rts
                      (      console.asm):00040         
E1F9 8608             (      console.asm):00041 (2)     _BS     lda     #BS
E1FB 8DC1             (      console.asm):00042 (6)             bsr     PUTCH          Output BS
E1FD 8620             (      console.asm):00043 (2)             lda     #SP
E1FF 8DBD             (      console.asm):00044 (6)             bsr     PUTCH          Clear character
E201 8608             (      console.asm):00045 (2)             lda     #BS
E203 20B9             (      console.asm):00046 (3)             bra     PUTCH          And go back again
                      (      console.asm):00047         
                      (      console.asm):00048         * Receive CR terminated string and store it to X.
                      (      console.asm):00049         * Upon entry B contains the receiving buffer length.
                      (      console.asm):00050         * (excluding the NUL terminator). On exit, B will
                      (      console.asm):00051         * contain the number of characters entered (excluding
                      (      console.asm):00052         * the trailing NUL). A and X are preserved. B will
                      (      console.asm):00053         * have the actual number of characters entered.
                      (      console.asm):00054         * Implementation of $05D9 in TRS-80 Level II ROM.
E205 C102             (      console.asm):00055 (2)     GETS    cmpb    #2
E207 2401             (      console.asm):00056 (3)             bhs     @gets0          B must be 2 or more
E209 39               (      console.asm):00057 (4)             rts
E20A 3416             (      console.asm):00058 (4+4)   @gets0  pshs    x,d
E20C 8DBF             (      console.asm):00059 (6)     @gets1  bsr     GETCH
E20E 8108             (      console.asm):00060 (2)             cmpa    #BS             Backspace?
E210 260B             (      console.asm):00061 (3)             bne     @gets3
E212 E161             (      console.asm):00062 (4+1)           cmpb    1,s             B upon routine entry
E214 27F6             (      console.asm):00063 (3)             beq     @gets1          Do not go beyond the beginning of the buffer
E216 8DE1             (      console.asm):00064 (6)             bsr     _BS
E218 301F             (      console.asm):00065 (4+1)           leax    -1,x
E21A 5C               (      console.asm):00066 (1)             incb
E21B 20EF             (      console.asm):00067 (3)             bra     @gets1
E21D 8115             (      console.asm):00068 (2)     @gets3  cmpa    #NAK            Kill input?
E21F 260B             (      console.asm):00069 (3)             bne     @gets5
                      (      console.asm):00070         * While B != 1,S (initial buffer length), decrement X, increment B.
E221 E161             (      console.asm):00071 (4+1)   @gets4  cmpb    1,s
E223 27E7             (      console.asm):00072 (3)             beq     @gets1
E225 8DD2             (      console.asm):00073 (6)             bsr     _BS
E227 301F             (      console.asm):00074 (4+1)           leax     -1,x
E229 5C               (      console.asm):00075 (1)             incb
E22A 20F5             (      console.asm):00076 (3)             bra     @gets4
                      (      console.asm):00077         * Regular input handling: echo input character.
E22C 810D             (      console.asm):00078 (2)     @gets5  cmpa    #CR
E22E 2709             (      console.asm):00079 (3)             beq     @gets6          Minicom only sends CR
E230 8D8C             (      console.asm):00080 (6)             bsr     PUTCH
E232 A780             (      console.asm):00081 (4+1)           sta     ,x+
E234 5A               (      console.asm):00082 (1)             decb
E235 C101             (      console.asm):00083 (2)             cmpb    #1              End of buffer reached?
E237 26D3             (      console.asm):00084 (3)             bne     @gets1
E239 8620             (      console.asm):00085 (2)     @gets6  lda     #SP
E23B 8D81             (      console.asm):00086 (6)             bsr     PUTCH
E23D 6F84             (      console.asm):00087 (6+0)           clr     ,x
E23F 1F10             (      console.asm):00088 (4)             tfr     x,d
E241 A362             (      console.asm):00089 (5+1)           subd    2,s             Actual number of characters entered
E243 E761             (      console.asm):00090 (4+1)           stb     1,s             Stored to B (through the system stack).         
E245 3516             (      console.asm):00091 (4+4)           puls    x,d
E247 39               (      console.asm):00092 (4)             rts
                      (      console.asm):00093         
                      (        forth.asm):00503         
                      (        forth.asm):00504                 IFNE    DEBUG
E248                  (        forth.asm):00505         PAGE0IN pshs    x               Fill up page 0 with all C7 (an illegal opcode)
                      (        forth.asm):00506                 ldx     #RAMSTRT
                      (        forth.asm):00507                 lda     #ILLOPC
                      (        forth.asm):00508                 sta     ,x
                      (        forth.asm):00509                 leay    1,x
                      (        forth.asm):00510                 ldw     #255
                      (        forth.asm):00511                 tfm     x+,y+
                      (        forth.asm):00512                 puls    x
                      (        forth.asm):00513                 rts
                      (        forth.asm):00514                 ENDC
                      (        forth.asm):00515         
E248 BDE9F3           (        forth.asm):00516         FORTHIN RFXT    jsr,NCLR+7      XT for NCLR. Set up the normal stack
E24B BDE9FF           (        forth.asm):00517                 RFXT    jsr,RCLR+7      XT for RCLR. Set up the return stack
                      (        forth.asm):00518                 IFNE    DEBUG
                      (        forth.asm):00519                 bsr     PAGE0IN
                      (        forth.asm):00520                 ENDC
                      (        forth.asm):00521         * Relocate '@' code to RAM and set it up as the last dictionary entry (RO).
E24E 8EFDDD           (        forth.asm):00522 (3)             ldx     #THEEND         Source address for tfm
E251 CCFDED           (        forth.asm):00523 (3)             ldd     #REALEND
E254 103210           (        forth.asm):00524 (4)             subr    x,d
E257 1F06             (        forth.asm):00525 (4)             tfr     d,w             Byte count for tfm
E259 108E0C10         (        forth.asm):00526 (4)             ldy     #WDICSPC        Destination address for tfm
E25D 109F06           (        forth.asm):00527 (5)             sty     LSTWAD
E260 113812           (        forth.asm):00528 (6+?)           tfm     x+,y+
E263 109F08           (        forth.asm):00529 (5)             sty     DICEND
                      (        forth.asm):00530                 IFNE    RELFEAT
E266 BDEB12           (        forth.asm):00531                 RFXT    jsr,MONITOR+10  XT for MONITOR (monitor @ in RAM)
                      (        forth.asm):00532                 ENDC
E269 8D09             (        forth.asm):00533 (6)             bsr     EMPTYB          Buffer related initializations.
E26B 104F             (        forth.asm):00534 (2)             clrd
E26D DD1A             (        forth.asm):00535 (4)             std     USTATE          Initial mode is interpretation
E26F DD20             (        forth.asm):00536 (4)             std     USCR            Clear SCR
E271 7EFA19           (        forth.asm):00537                 RFXT    jmp,DECIMAL+10  XT for DECIMAL. Default base is decimal
                      (        forth.asm):00538         
E274 8E03F0           (        forth.asm):00539 (3)     EMPTYB  ldx     #BUF0
E277 8D03             (        forth.asm):00540 (6)             bsr     EMPT1B
E279 8E0800           (        forth.asm):00541 (3)             ldx     #BUF1
                      (        forth.asm):00542         * Empty the buffer pointed to by X.
E27C 9F16             (        forth.asm):00543 (4)     EMPT1B  stx     MRUBUFA         Update most recently used buffer address
E27E 31890401         (        forth.asm):00544 (4+3)           leay    BLKSIZ+1,x
E282 104F             (        forth.asm):00545 (2)             clrd
E284 EDA4             (        forth.asm):00546 (5+0)           std     ,y              Clear terminator and flags fields
E286 39               (        forth.asm):00547 (4)             rts
                      (        forth.asm):00548         
                      (        forth.asm):00549         * Scan for the next non-space character pointed to by X.
                      (        forth.asm):00550         * That character is returned through A. Flags are set accordingly.
E287 A680             (        forth.asm):00551 (4+1)   SCNSTOK lda     ,x+
E289 2704             (        forth.asm):00552 (3)             beq     @scstk1
E28B 8120             (        forth.asm):00553 (2)             cmpa    #SP
E28D 27F8             (        forth.asm):00554 (3)             beq     SCNSTOK
E28F 301F             (        forth.asm):00555 (4+1)   @scstk1 leax    -1,x            Keep X pointing at the beginning of the token
E291 9F02             (        forth.asm):00556 (4)             stx     TOKENSP
E293 4D               (        forth.asm):00557 (1)             tsta                    Have to test again because LEA affects Z
E294 39               (        forth.asm):00558 (4)             rts
                      (        forth.asm):00559         
                      (        forth.asm):00560         * Scan for the next white space character (or NUL) as an end of token marker.
                      (        forth.asm):00561         * Upon entry:
                      (        forth.asm):00562         * - X points to the input stream.
                      (        forth.asm):00563         * Upon return:
                      (        forth.asm):00564         * - X will point to the next space character or NUL.
                      (        forth.asm):00565         * - CURTOKL will hold the current token length (returned in B).
                      (        forth.asm):00566         * - TOKENEP will point to the end of the current token.
E295 5F               (        forth.asm):00567 (1)     SCNETOK clrb
E296 5C               (        forth.asm):00568 (1)     @scetok incb
E297 A680             (        forth.asm):00569 (4+1)           lda     ,x+
E299 2704             (        forth.asm):00570 (3)             beq     @scetk1
E29B 8120             (        forth.asm):00571 (2)             cmpa    #SP
E29D 26F7             (        forth.asm):00572 (3)             bne     @scetok
E29F 301F             (        forth.asm):00573 (4+1)   @scetk1 leax    -1,x            Keep X pointing at the end of the token
E2A1 9F04             (        forth.asm):00574 (4)             stx     TOKENEP
E2A3 5A               (        forth.asm):00575 (1)             decb
E2A4 D72D             (        forth.asm):00576 (3)             stb     CURTOKL
E2A6 39               (        forth.asm):00577 (4)             rts
                      (        forth.asm):00578         
                      (        forth.asm):00579         * Check whether BASE is in the supported range ([2..36]).
E2A7 9619             (        forth.asm):00580 (3)     CKBASE  lda     UBASE+1         BASE
E2A9 8102             (        forth.asm):00581 (2)             cmpa    #2
E2AB 2505             (        forth.asm):00582 (3)             blo     @ckbser         Must be >= 2
E2AD 8124             (        forth.asm):00583 (2)             cmpa    #36
E2AF 2201             (        forth.asm):00584 (3)             bhi     @ckbser         And <= 36 (the ANSi maximum)
E2B1 39               (        forth.asm):00585 (4)             rts
E2B2 C60F             (        forth.asm):00586 (2)     @ckbser ldb     #15             Invalid BASE
E2B4 BDE61B           (        forth.asm):00587 (7)             jsr     ERRHDLR         No return
     E2B7             (        forth.asm):00588         CKBASRA equ     *
                      (        forth.asm):00589         
                      (        forth.asm):00590         * NUMCVT performs a signed string to number conversion. The input string is
                      (        forth.asm):00591         * acquired from the input stream. Note that this routine always is called
                      (        forth.asm):00592         * after a dictionary lookup (SWDIC), so TOKENSP and CURTOKL are guaranteed
                      (        forth.asm):00593         * to have been set previously. There are two ways out this routine:
                      (        forth.asm):00594         * - redirection to the error handler (Undefined word), or
                      (        forth.asm):00595         * - a converted cell returned through X.
                      (        forth.asm):00596         * This a re-implementation based on CONVERT but unlike CONVERT, which produces
                      (        forth.asm):00597         * an unsigned double as its output, this produces a signed single cell.
E2B7 8DEE             (        forth.asm):00598 (6)     NUMCVT  bsr     CKBASE          No return if BASE isn't in the [2..36] range
E2B9 9E02             (        forth.asm):00599 (4)             ldx     TOKENSP
E2BB 962D             (        forth.asm):00600 (3)             lda     CURTOKL         Character count to go through
E2BD 3402             (        forth.asm):00601 (4+1)           pshs    a
E2BF 104F             (        forth.asm):00602 (2)             clrd                    Initialize the result
E2C1 972B             (        forth.asm):00603 (3)             sta     ISNEGF          Assume it be be non-negative
                      (        forth.asm):00604         * Check for optional minus sign.
E2C3 11E684           (        forth.asm):00605 (5+0)           ldf     ,x
E2C6 11C12D           (        forth.asm):00606 (3)             cmpf    #'-
E2C9 2606             (        forth.asm):00607 (3)             bne     @ncnxt
E2CB 0C2B             (        forth.asm):00608 (5)             inc     ISNEGF          Remember to negate the result before returning
E2CD 3001             (        forth.asm):00609 (4+1)           leax    1,x             Skip the negativity!
E2CF 6AE4             (        forth.asm):00610 (6+0)           dec     ,s              Decrement token length
E2D1 119F18           (        forth.asm):00611 (29)    @ncnxt  muld    UBASE           D multipled by BASE to Q (D:W)
E2D4 E680             (        forth.asm):00612 (4+1)           ldb     ,x+             Acquire next input char (ignore the product MSC)
E2D6 C030             (        forth.asm):00613 (2)             subb    #'0
E2D8 252B             (        forth.asm):00614 (3)             blo     @ncoor          Digit out of range
E2DA C10A             (        forth.asm):00615 (2)             cmpb    #10
E2DC 2510             (        forth.asm):00616 (3)             blo     @ncnolt         No letter in potential BASE
                      (        forth.asm):00617                 IFEQ    CSSNTVE
E2DE C111             (        forth.asm):00618 (2)             cmpb    #'A-'0
E2E0 2523             (        forth.asm):00619 (3)             blo     @ncoor          Greater than 9 but lower than A
E2E2 C131             (        forth.asm):00620 (2)             cmpb    #'a-'0
E2E4 2506             (        forth.asm):00621 (3)             blo     @ncisuc         Upper case already
E2E6 C14A             (        forth.asm):00622 (2)             cmpb    #'z-'0
E2E8 221B             (        forth.asm):00623 (3)             bhi     @ncoor          Definitely out of range
E2EA C020             (        forth.asm):00624 (2)             subb    #'a-'A          To upper case
                      (        forth.asm):00625                 ENDC
E2EC C007             (        forth.asm):00626 (2)     @ncisuc subb    #'A-':          A-Z to number
E2EE D119             (        forth.asm):00627 (3)     @ncnolt cmpb    UBASE+1         B has a digit. Make sure it's less than BASE
E2F0 2413             (        forth.asm):00628 (3)             bhs     @ncoor
                      (        forth.asm):00629         * Digit in B has been validated wrt. BASE.
E2F2 4F               (        forth.asm):00630 (1)             clra
E2F3 103060           (        forth.asm):00631 (4)             addr    w,d
E2F6 6AE4             (        forth.asm):00632 (6+0)           dec     ,s              Are we done yet?
E2F8 26D7             (        forth.asm):00633 (3)             bne     @ncnxt          No. Iterate over to the next digit
E2FA 0D2B             (        forth.asm):00634 (4)             tst     ISNEGF          Are we dealing with a negative number?
E2FC 2702             (        forth.asm):00635 (3)             beq     @ncdone         No
E2FE 1040             (        forth.asm):00636 (2)             negd                    Acknowledge the negativity
E300 3261             (        forth.asm):00637 (4+1)   @ncdone leas    1,s             Drop token length from the system stack
E302 1F01             (        forth.asm):00638 (4)             tfr     d,x             Return the result in X
E304 39               (        forth.asm):00639 (4)             rts
E305 3261             (        forth.asm):00640 (4+1)   @ncoor  leas    1,s             Drop token length from the system stack
E307 9E02             (        forth.asm):00641 (4)             ldx     TOKENSP         Current digit is out of range
E309 C602             (        forth.asm):00642 (2)             ldb     #2              Undefined (X points to the offending word)
E30B BDE61B           (        forth.asm):00643 (7)             jsr     ERRHDLR         No return
     E30E             (        forth.asm):00644         NUMCVRA equ     *               For symbolic stack dump purposes
                      (        forth.asm):00645         
                      (        forth.asm):00646         * Check for minimal data depth. On input D has the lowest possible stack
                      (        forth.asm):00647         * address that satisfies the needs of the caller. This routine is meant
                      (        forth.asm):00648         * to support "transactional" behaviour, which is intended to improve
                      (        forth.asm):00649         * debugging support.
E30E 103703           (        forth.asm):00650 (4)     CHKNDPT cmpr    d,u
E311 2201             (        forth.asm):00651 (3)             bhi     @stkudf
E313 39               (        forth.asm):00652 (4)             rts
E314 C601             (        forth.asm):00653 (2)     @stkudf ldb     #1              Data stack underflow
E316 BDE61B           (        forth.asm):00654 (7)             jsr     ERRHDLR         No return
     E319             (        forth.asm):00655         CKDPTRA equ     *
                      (        forth.asm):00656         
                      (        forth.asm):00657         * Convert number stored in X to a string (depending on BASE value).
                      (        forth.asm):00658         * Output is stored in the global TBUFF buffer. X is preserved.
E319 8D8C             (        forth.asm):00659 (6)     CVNSTR  bsr     CKBASE
E31B 0F2B             (        forth.asm):00660 (5)             clr     ISNEGF
E31D 1F10             (        forth.asm):00661 (4)             tfr     x,d
E31F 0D2C             (        forth.asm):00662 (4)             tst     CVISSGN         Are we to perform a signed conversion?
E321 2708             (        forth.asm):00663 (3)             beq     @cvnst1
E323 104D             (        forth.asm):00664 (2)             tstd
E325 2A04             (        forth.asm):00665 (3)             bpl     @cvnst1
E327 0C2B             (        forth.asm):00666 (5)             inc     ISNEGF          Number being converted is negative
E329 1040             (        forth.asm):00667 (2)             negd
E32B 1F06             (        forth.asm):00668 (4)     @cvnst1 tfr     d,w
E32D 104F             (        forth.asm):00669 (2)             clrd
E32F 108E03AD         (        forth.asm):00670 (4)             ldy     #TBUFF+19       Sign + 16 digits + terminator + 1
E333 6FA2             (        forth.asm):00671 (6+1)           clr     ,-y             End of string marker
E335 119E18           (        forth.asm):00672 (35)    @cvnst2 divq    UBASE           D returns the modulo and W the quotient
E338 8630             (        forth.asm):00673 (2)             lda     #'0
E33A C10A             (        forth.asm):00674 (2)             cmpb    #10
E33C 2502             (        forth.asm):00675 (3)             bcs     @cvnst3
                      (        forth.asm):00676         * BASE has letters among its valid numbers.
E33E 8637             (        forth.asm):00677 (2)             lda     #'A-10
E340 103089           (        forth.asm):00678 (4)     @cvnst3 addr    a,b
E343 E7A2             (        forth.asm):00679 (4+1)           stb     ,-y
E345 104F             (        forth.asm):00680 (2)             clrd
E347 105D             (        forth.asm):00681 (2)             tstw
E349 26EA             (        forth.asm):00682 (3)             bne     @cvnst2
E34B C620             (        forth.asm):00683 (2)             ldb     #SP
E34D 0D2B             (        forth.asm):00684 (4)             tst     ISNEGF
E34F 2702             (        forth.asm):00685 (3)             beq     @cvnst4
E351 C62D             (        forth.asm):00686 (2)             ldb     #'-
E353 E7A2             (        forth.asm):00687 (4+1)   @cvnst4 stb     ,-y
                      (        forth.asm):00688         * We need to insert leading spaces up to the beginning of the output buffer.
E355 C620             (        forth.asm):00689 (2)             ldb     #SP
E357 108C039A         (        forth.asm):00690 (4)     @cvnst5 cmpy    #TBUFF
E35B 2601             (        forth.asm):00691 (3)             bne     @cvnst6
E35D 39               (        forth.asm):00692 (4)             rts
E35E E7A2             (        forth.asm):00693 (4+1)   @cvnst6 stb     ,-y
E360 20F5             (        forth.asm):00694 (3)             bra     @cvnst5
                      (        forth.asm):00695         
                      (        forth.asm):00696         * Search word beginning at address TOKENSP in the dictionary.
                      (        forth.asm):00697         * Upon return Z will be set if the word was not found.
                      (        forth.asm):00698         * Otherwise, Y will point to the code section of the word.
                      (        forth.asm):00699         * CSSNTVE (defined in constants.asm) defines whether the
                      (        forth.asm):00700         * dictionary match is case sensitive or not.
                      (        forth.asm):00701         * Important note: if the word is found TOKENEP will be copied to TOKENSP.
E362 9E02             (        forth.asm):00702 (4)     SWDIC   ldx     TOKENSP
E364 BDE295           (        forth.asm):00703 (7)             jsr     SCNETOK         B has CURTOKL
E367 9E02             (        forth.asm):00704 (4)             ldx     TOKENSP
E369 109E06           (        forth.asm):00705 (5)             ldy     LSTWAD          Latest word header address to Y
E36C 2603             (        forth.asm):00706 (3)     @swrdc0 bne     @swrdc1
E36E 1FC2             (        forth.asm):00707 (4)             tfr     0,y             Word not found. Z is set
E370 39               (        forth.asm):00708 (4)             rts
E371 A6A4             (        forth.asm):00709 (4+0)   @swrdc1 lda     ,y              Word attribute to A
E373 841F             (        forth.asm):00710 (2)             anda    #WRLNMSK        Extract word length
E375 3420             (        forth.asm):00711 (4+2)           pshs    y
E377 103798           (        forth.asm):00712 (4)             cmpr    b,a             Word length match?
E37A 2631             (        forth.asm):00713 (3)             bne     @swrdc3         No, point to next dictionary entry
E37C 3121             (        forth.asm):00714 (4+1)           leay    1,y
E37E A6A0             (        forth.asm):00715 (4+1)   @swrdc2 lda     ,y+
                      (        forth.asm):00716                 IFNE    CSSNTVE
                      (        forth.asm):00717                 cmpa    ,x+             Case sensitive dictionary
                      (        forth.asm):00718                 ELSE
E380 1F9E             (        forth.asm):00719 (4)             tfr     b,e             Case insensitive search (preferred)
E382 E680             (        forth.asm):00720 (4+1)           ldb     ,x+
E384 C161             (        forth.asm):00721 (2)             cmpb    #'a
E386 2506             (        forth.asm):00722 (3)             bcs     @nochg
E388 C17B             (        forth.asm):00723 (2)             cmpb    #'z+1
E38A 2402             (        forth.asm):00724 (3)             bcc     @nochg
E38C C020             (        forth.asm):00725 (2)             subb    #'a-'A
E38E 103798           (        forth.asm):00726 (4)     @nochg  cmpr    b,a
E391 1FE9             (        forth.asm):00727 (4)             tfr     e,b
                      (        forth.asm):00728                 ENDC
E393 2618             (        forth.asm):00729 (3)             bne     @swrdc3
E395 5A               (        forth.asm):00730 (1)             decb
E396 26E6             (        forth.asm):00731 (3)             bne     @swrdc2
                      (        forth.asm):00732         * Word match!
E398 3510             (        forth.asm):00733 (4+2)           puls    x
E39A E684             (        forth.asm):00734 (4+0)           ldb     ,x              Word attribute byte to B
E39C 4F               (        forth.asm):00735 (1)             clra
E39D 58               (        forth.asm):00736 (1)             lslb                    Bit 7 to CFLAG
E39E 49               (        forth.asm):00737 (1)             rola                    CFLAG to A
E39F 972E             (        forth.asm):00738 (3)             sta     IMDFLG          Set IMMEDIATE flag
E3A1 4F               (        forth.asm):00739 (1)             clra
E3A2 58               (        forth.asm):00740 (1)             lslb                    Bit 6 to CFLAG
E3A3 49               (        forth.asm):00741 (1)             rola                    CFLAG to A
E3A4 972F             (        forth.asm):00742 (3)             sta     DEFFLG          Set DEFINE flag
E3A6 9E04             (        forth.asm):00743 (4)             ldx     TOKENEP
E3A8 9F02             (        forth.asm):00744 (4)             stx     TOKENSP
                      (        forth.asm):00745                 IFNE    RELFEAT
E3AA 3123             (        forth.asm):00746 (4+1)           leay    3,y             Skip back pointer and checksum. Return XT
                      (        forth.asm):00747                 ELSE
                      (        forth.asm):00748                 leay    2,y             Skip back pointer. Return XT
                      (        forth.asm):00749                 ENDC
E3AC 39               (        forth.asm):00750 (4)             rts                     Z is clear due to the latest leay invocation
E3AD 3520             (        forth.asm):00751 (4+2)   @swrdc3 puls    y               Point to previous word in the dictionary
E3AF 4F               (        forth.asm):00752 (1)             clra
E3B0 E6A0             (        forth.asm):00753 (4+1)           ldb     ,y+
E3B2 C41F             (        forth.asm):00754 (2)             andb    #WRLNMSK
E3B4 31AB             (        forth.asm):00755 (4+2)           leay    d,y
E3B6 9E02             (        forth.asm):00756 (4)             ldx     TOKENSP
E3B8 D62D             (        forth.asm):00757 (3)             ldb     CURTOKL
E3BA 10AEA4           (        forth.asm):00758 (6+0)           ldy     ,y
E3BD 20AD             (        forth.asm):00759 (3)             bra     @swrdc0
                      (        forth.asm):00760         
                      (        forth.asm):00761         * Create new dictionary entry. The word name being created is acquired from
                      (        forth.asm):00762         * the input stream. Warning, this requires a writable dictionary!
                      (        forth.asm):00763         * The new end of the dictionary is returned in Y. W is preserved.
E3BF 1038             (        forth.asm):00764 (6)     LOCWRT  pshsw
E3C1 9E08             (        forth.asm):00765 (4)             ldx     DICEND
                      (        forth.asm):00766                 IFNE    DEBUG
                      (        forth.asm):00767                 cmpx    #ROMSTRT
                      (        forth.asm):00768                 bcs     @locwr0
                      (        forth.asm):00769                 ldb     #10             Assertion failure (trying to write to ROM!)
                      (        forth.asm):00770                 jsr     ERRHDLR         No return
E3C3                  (        forth.asm):00771         LWAFRA  equ     *
                      (        forth.asm):00772                 ENDC
E3C3 9F0C             (        forth.asm):00773 (4)     @locwr0 stx     BDICEND         Back pointer up
E3C5 9E06             (        forth.asm):00774 (4)             ldx     LSTWAD
E3C7 9F0A             (        forth.asm):00775 (4)             stx     BLSTWAD         Back pointer up
E3C9 BDE71B           (        forth.asm):00776 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
E3CC 6D84             (        forth.asm):00777 (5+0)           tst     ,x
E3CE 2605             (        forth.asm):00778 (3)             bne     @locwr2
E3D0 C605             (        forth.asm):00779 (2)     @locwr1 ldb     #5              Missing word name
E3D2 BDE61B           (        forth.asm):00780 (7)             jsr     ERRHDLR         No return
     E3D5             (        forth.asm):00781         LWMNRA  equ     *               LOCWRT missing word name return address
E3D5 BDE287           (        forth.asm):00782 (7)     @locwr2 jsr     SCNSTOK
E3D8 27F6             (        forth.asm):00783 (3)             beq     @locwr1         End of line reached
E3DA BDE295           (        forth.asm):00784 (7)             jsr     SCNETOK         X has TOKENEP, B has CURTOKL
E3DD 109E02           (        forth.asm):00785 (5)             ldy     TOKENSP
E3E0 103221           (        forth.asm):00786 (4)             subr    y,x
E3E3 3410             (        forth.asm):00787 (4+2)           pshs    x               Word length to the system stack
E3E5 9E08             (        forth.asm):00788 (4)             ldx     DICEND
E3E7 A661             (        forth.asm):00789 (4+1)           lda     1,s             Word length LSB in the system stack
E3E9 8120             (        forth.asm):00790 (2)             cmpa    #1+WRLNMSK      Max word length is 31, 79-STANDARD compliant
E3EB 2505             (        forth.asm):00791 (3)             blo     @lcwr21
E3ED C610             (        forth.asm):00792 (2)             ldb     #16             Word name is too long
E3EF BDE61B           (        forth.asm):00793 (7)             jsr     ERRHDLR
     E3F2             (        forth.asm):00794         WTOOLNG equ     *
E3F2 A780             (        forth.asm):00795 (4+1)   @lcwr21 sta     ,x+             Word length to dictionary
E3F4 10A6E1           (        forth.asm):00796 (6+2)           ldw     ,s++            16-bit word length to W
E3F7 1E12             (        forth.asm):00797 (5)             exg     x,y             Y points to the dictionary, X has TOKENSP
                      (        forth.asm):00798                 IFNE    CSSNTVE
                      (        forth.asm):00799                 tfm     x+,y+           Word name to dictionary, as is
                      (        forth.asm):00800                 ELSE
E3F9 1FF9             (        forth.asm):00801 (4)             tfr     f,b             Force dictionary entry to upper case
E3FB A680             (        forth.asm):00802 (4+1)   @locwr3 lda     ,x+
E3FD 8161             (        forth.asm):00803 (2)             cmpa    #'a
E3FF 2506             (        forth.asm):00804 (3)             bcs     @locwr4
E401 817B             (        forth.asm):00805 (2)             cmpa    #'z+1
E403 2402             (        forth.asm):00806 (3)             bcc     @locwr4
E405 8020             (        forth.asm):00807 (2)             suba    #'a-'A          To upper case
E407 A7A0             (        forth.asm):00808 (4+1)   @locwr4 sta     ,y+
E409 5A               (        forth.asm):00809 (1)             decb
E40A 26EF             (        forth.asm):00810 (3)             bne     @locwr3
                      (        forth.asm):00811                 ENDC
E40C 1F10             (        forth.asm):00812 (4)             tfr     x,d
E40E 9322             (        forth.asm):00813 (4)             subd    BSBFADR
E410 DD1C             (        forth.asm):00814 (4)             std     UTOIN           Skip word name in the input stream
E412 9E06             (        forth.asm):00815 (4)             ldx     LSTWAD
E414 AFA1             (        forth.asm):00816 (5+2)           stx     ,y++            Back pointer to dictionary
                      (        forth.asm):00817                 IFNE    RELFEAT
E416 6FA0             (        forth.asm):00818 (6+1)           clr     ,y+             Initialize the checksum header field
                      (        forth.asm):00819                 ENDC
E418 109F08           (        forth.asm):00820 (5)             sty     DICEND
E41B 109F0E           (        forth.asm):00821 (5)             sty     RECADDR         Should we resort to recursion later on
E41E 1039             (        forth.asm):00822 (6)             pulsw
E420 39               (        forth.asm):00823 (4)             rts
                      (        forth.asm):00824         
                      (        forth.asm):00825         * Compile 'ldx  #X; jsr NPUSH'.
                      (        forth.asm):00826         * DICEND is updated and returned in Y.
E421 109E08           (        forth.asm):00827 (5)     LITER   ldy     DICEND
E424 868E             (        forth.asm):00828 (2)             lda     #LDXOPC         LDX immediate
E426 8D10             (        forth.asm):00829 (6)             bsr     VARCON2
E428 86BD             (        forth.asm):00830 (2)             lda     #JSROPC         JSR extended
E42A BDE14F           (        forth.asm):00831 (7)             jsr     CHKRTS          Check if the final RTS can be omitted
E42D 8D06             (        forth.asm):00832 (6)             bsr     VARCON1
E42F 109F08           (        forth.asm):00833 (5)             sty     DICEND
E432 39               (        forth.asm):00834 (4)             rts
                      (        forth.asm):00835         
                      (        forth.asm):00836         * Compile 'jmp  NPUSH'.
                      (        forth.asm):00837         * Y points to the end of the dictionary on entry and on exit.
E433 867E             (        forth.asm):00838 (2)     VARCON  lda     #JMPOPC         JMP extended
E435 8EE694           (        forth.asm):00839 (3)     VARCON1 ldx     #NPUSH
E438 A7A0             (        forth.asm):00840 (4+1)   VARCON2 sta     ,y+
E43A AFA1             (        forth.asm):00841 (5+2)           stx     ,y++
E43C 39               (        forth.asm):00842 (4)             rts
                      (        forth.asm):00843         
                      (        forth.asm):00844         * Used by U<, U>, <, >.
E43D CC0242BDE30E     (        forth.asm):00845         CMP2    MINDREQ 2               At least 2 cells must be stacked up
E443 10AEC4           (        forth.asm):00846 (6+0)   CMP2RA  ldy     ,u
E446 AE42             (        forth.asm):00847 (5+1)           ldx     2,u
E448 103721           (        forth.asm):00848 (4)             cmpr    y,x
E44B 1FA9             (        forth.asm):00849 (4)             tfr     cc,b
                      (        forth.asm):00850                 IFNE    DEBUG
                      (        forth.asm):00851                 clra
                      (        forth.asm):00852                 std     CCREG
                      (        forth.asm):00853                 ENDC
E44D 1FC1             (        forth.asm):00854 (4)             tfr     0,x
E44F 3344             (        forth.asm):00855 (4+1)           leau    4,u
E451 1F9A             (        forth.asm):00856 (4)             tfr     b,cc
E453 39               (        forth.asm):00857 (4)             rts
                      (        forth.asm):00858         
                      (        forth.asm):00859         * Used by CMOVE, <CMOVE, CMOVE>, MOVE.
E454 CC0240BDE30E     (        forth.asm):00860         ACQMOVP MINDREQ 3               At least 3 cells must be stacked up
E45A 10A6C4           (        forth.asm):00861 (6+0)   ACQVMRA ldw     ,u              Byte count
E45D 10AE42           (        forth.asm):00862 (6+1)           ldy     2,u             Destination address
E460 AE44             (        forth.asm):00863 (5+1)           ldx     4,u             Source address
E462 3346             (        forth.asm):00864 (4+1)           leau    6,u             Drop 3 cells from the user stack
E464 39               (        forth.asm):00865 (4)             rts
                      (        forth.asm):00866         
                      (        forth.asm):00867         * FDCTSYM enveadours to match the address stored in Y to a dictionary entry.
                      (        forth.asm):00868         * Upon a successful flexible match, it will output a string in the form of
                      (        forth.asm):00869         * <wordname>+<offset> to the string pointed to by X. <wordname> refers to the
                      (        forth.asm):00870         * code entry point of the matched word. <offset> will be expressed in hex.
                      (        forth.asm):00871         * If a match is found, Z will be clear, otherwise it will be set.
                      (        forth.asm):00872         * A candidate for a word code address must meet the following criteria:
                      (        forth.asm):00873         * ((Y U>= #EBUFS) AND (Y U< #THEEND)) OR ((Y U>= #WDICSPC) AND (Y U< DICEND)).
                      (        forth.asm):00874         * Upon return:
                      (        forth.asm):00875         * - the string pointed to by X will updated with its symbolic match
                      (        forth.asm):00876         *   (NUL terminated), if there is one. X itself might have been altered.
                      (        forth.asm):00877         * - Y should be preserved.
                      (        forth.asm):00878         * EBUFS (EMPTY-BUFFERS) header address is the last word in the dictionary.
                      (        forth.asm):00879                 IFNE    SSDFEAT
E465 3430             (        forth.asm):00880 (4+4)   FDCTSYM pshs    y,x     
E467 1F21             (        forth.asm):00881 (4)             tfr     y,x             Potential execution token to X
E469 8CE83E           (        forth.asm):00882 (3)             cmpx    #EBUFS
E46C 2505             (        forth.asm):00883 (3)             blo     @fdstr2 
E46E 8CFDDD           (        forth.asm):00884 (3)             cmpx    #THEEND
E471 250D             (        forth.asm):00885 (3)             blo     @fdsmtc
E473 8C0C10           (        forth.asm):00886 (3)     @fdstr2 cmpx    #WDICSPC        Term 2 of the predicate for a valid word addr
E476 2504             (        forth.asm):00887 (3)             blo     @fdsnom
E478 9C08             (        forth.asm):00888 (4)             cmpx    DICEND
E47A 2504             (        forth.asm):00889 (3)             blo     @fdsmtc
E47C 4F               (        forth.asm):00890 (1)     @fdsnom clra                    No match (Z is set)
E47D 3530             (        forth.asm):00891 (4+4)           puls    x,y
E47F 39               (        forth.asm):00892 (4)             rts
E480 9E06             (        forth.asm):00893 (4)     @fdsmtc ldx     LSTWAD          Potential match. Scan upward from LAST
                      (        forth.asm):00894         * X points to the latest word header, Y has an execution token.
E482 109608           (        forth.asm):00895 (5)             ldw     DICEND          W points to the end of the code section
E485 3410             (        forth.asm):00896 (4+2)   @fdslop pshs    x               Pointer to the current word header
E487 E680             (        forth.asm):00897 (4+1)           ldb     ,x+
E489 C41F             (        forth.asm):00898 (2)             andb    #WRLNMSK
E48B 3A               (        forth.asm):00899 (1)             abx                     Skip word name string
E48C EC81             (        forth.asm):00900 (5+2)           ldd     ,x++            Backlink to D
                      (        forth.asm):00901                 IFNE    RELFEAT
E48E 3001             (        forth.asm):00902 (4+1)           leax    1,x             Skip the checksum
                      (        forth.asm):00903                 ENDC
E490 103712           (        forth.asm):00904 (4)             cmpr    x,y
E493 2530             (        forth.asm):00905 (3)             blo     @fdsnwd
E495 103762           (        forth.asm):00906 (4)             cmpr    w,y
E498 222B             (        forth.asm):00907 (3)             bhi     @fdsnwd         An equal address is allowed here, in case
                      (        forth.asm):00908         * jsr ERRHDLR is the last instruction for the word under consideration.
                      (        forth.asm):00909         * This happens to be the case for FORGET and LPAR.
                      (        forth.asm):00910         * Y matches the code range for the current word.
E49A 3510             (        forth.asm):00911 (4+2)           puls    x
E49C E680             (        forth.asm):00912 (4+1)           ldb     ,x+
E49E C41F             (        forth.asm):00913 (2)             andb    #WRLNMSK
E4A0 1F9F             (        forth.asm):00914 (4)             tfr     b,f
E4A2 114F             (        forth.asm):00915 (2)             clre                    W has the matched word length
E4A4 10AEE4           (        forth.asm):00916 (6+0)           ldy     ,s              Y points to the target buffer
E4A7 8627             (        forth.asm):00917 (2)             lda     #''
E4A9 A7A0             (        forth.asm):00918 (4+1)           sta     ,y+
E4AB 113812           (        forth.asm):00919 (6+?)           tfm     x+,y+
E4AE A7A0             (        forth.asm):00920 (4+1)           sta     ,y+
                      (        forth.asm):00921         * Offset processing.
E4B0 862B             (        forth.asm):00922 (2)             lda     #'+
E4B2 A7A0             (        forth.asm):00923 (4+1)           sta     ,y+
                      (        forth.asm):00924                 IFNE    RELFEAT
E4B4 3003             (        forth.asm):00925 (4+1)           leax    3,x             Skip backlink and checksum
                      (        forth.asm):00926                 ELSE
                      (        forth.asm):00927                 leax    2,x             Skip backlink
                      (        forth.asm):00928                 ENDC
E4B6 EC62             (        forth.asm):00929 (5+1)           ldd     2,s             Execution token to D
E4B8 103210           (        forth.asm):00930 (4)             subr    x,d             Offset between XT and word entry point to D
E4BB 1F21             (        forth.asm):00931 (4)             tfr     y,x
E4BD BDE17C           (        forth.asm):00932 (7)             jsr     HDMP4           Dump hex incarnation of the offset to X
E4C0 3530             (        forth.asm):00933 (4+4)           puls    x,y
E4C2 1CFB             (        forth.asm):00934 (2)             andcc   #^ZFLAG         Clear ZFLAG
E4C4 39               (        forth.asm):00935 (4)             rts
                      (        forth.asm):00936         * Point to the next word.
E4C5 1039             (        forth.asm):00937 (6)     @fdsnwd pulsw                   Retrieve current word header address
E4C7 104D             (        forth.asm):00938 (2)             tstd
E4C9 27B1             (        forth.asm):00939 (3)             beq     @fdsnom         Just met the last dictionary entry
E4CB 1F01             (        forth.asm):00940 (4)             tfr     d,x             Point to previous word header
E4CD 10810C10         (        forth.asm):00941 (4)             cmpw    #WDICSPC        Are we transitioning from RAM to ROM?
E4D1 26B2             (        forth.asm):00942 (3)             bne     @fdslop         No singularity
E4D3 1086FDDD         (        forth.asm):00943 (4)             ldw     #THEEND         Won't be able to diagnose the ROM based @...
E4D7 20AC             (        forth.asm):00944 (3)             bra     @fdslop
                      (        forth.asm):00945         
                      (        forth.asm):00946         * Find the best possible symbolic approximation of Y and store it to the
                      (        forth.asm):00947         * buffer pointed to by X.
                      (        forth.asm):00948         * On entry:
                      (        forth.asm):00949         * - Y has a code address which is to be matched with a symbolic name + offset.
                      (        forth.asm):00950         * - X points to a buffer where the resolution is to be stored.
                      (        forth.asm):00951         * On return:
                      (        forth.asm):00952         * - Y is to be preserved.
                      (        forth.asm):00953         * - the output buffer will be updated with the best symbolic match (NUL term'd).
E4D9 3430             (        forth.asm):00954 (4+4)   FINDSYM pshs    y,x
E4DB 8D88             (        forth.asm):00955 (6)             bsr     FDCTSYM         Search the dictionary first (flexible match)
E4DD 261B             (        forth.asm):00956 (3)             bne     @dctmfn         Dictionary match found
E4DF 8EE4FF           (        forth.asm):00957 (3)             ldx     #NDCTWKS        Search kernel symbols for an exact match
E4E2 EC81             (        forth.asm):00958 (5+2)   @fsmlop ldd     ,x++
E4E4 270B             (        forth.asm):00959 (3)             beq     @fsmfnd         End of well known symbols list?
E4E6 103720           (        forth.asm):00960 (4)             cmpr    y,d
E4E9 2706             (        forth.asm):00961 (3)             beq     @fsmfnd
                      (        forth.asm):00962         * No well known symbol match. Skip string.
E4EB A680             (        forth.asm):00963 (4+1)   @fsmskp lda     ,x+
E4ED 26FC             (        forth.asm):00964 (3)             bne     @fsmskp
E4EF 20F1             (        forth.asm):00965 (3)             bra     @fsmlop
E4F1 10AEE4           (        forth.asm):00966 (6+0)   @fsmfnd ldy     ,s
E4F4 A680             (        forth.asm):00967 (4+1)   @fsmfn2 lda     ,x+
E4F6 A7A0             (        forth.asm):00968 (4+1)           sta     ,y+
E4F8 26FA             (        forth.asm):00969 (3)             bne     @fsmfn2
E4FA 3262             (        forth.asm):00970 (4+1)   @dctmfn leas    2,s
E4FC 3520             (        forth.asm):00971 (4+2)           puls    y
E4FE 39               (        forth.asm):00972 (4)             rts
                      (        forth.asm):00973         
                      (        forth.asm):00974         * Non-dictionary well known symbols.
E4FF E000             (        forth.asm):00975         NDCTWKS fdb     IODZHDL         Illegal opcode/Division by zero trap handler
E501 494F445A48444C00 (        forth.asm):00976                 fcn     'IODZHDL'
E509 E6B0             (        forth.asm):00977                 fdb     DPOPRA          Data stack underflow
E50B 44504F50524100   (        forth.asm):00978                 fcn     'DPOPRA'
E512 E6A1             (        forth.asm):00979                 fdb     DPSHRA          Data stack overflow
E514 44505348524100   (        forth.asm):00980                 fcn     'DPSHRA'
E51B E6E8             (        forth.asm):00981                 fdb     RPOPRA          Return stack underflow
E51D 52504F50524100   (        forth.asm):00982                 fcn     'RPOPRA'
E524 E6CE             (        forth.asm):00983                 fdb     RPSHRA          Return stack overflow
E526 52505348524100   (        forth.asm):00984                 fcn     'RPSHRA'
E52D E61B             (        forth.asm):00985                 fdb     ERRHDLR         Error handler
E52F 45525248444C5200 (        forth.asm):00986                 fcn     'ERRHDLR'
E537 E2B7             (        forth.asm):00987                 fdb     CKBASRA         Illegal BASE value
E539 434B424153524100 (        forth.asm):00988                 fcn     'CKBASRA'
E541 E319             (        forth.asm):00989                 fdb     CKDPTRA         Not enough parameters supplied (transac. behav.)
E543 434B445054524100 (        forth.asm):00990                 fcn     'CKDPTRA'
E54B E443             (        forth.asm):00991                 fdb     CMP2RA          Missing operand in any of U<, U>, <, >
E54D 434D5032524100   (        forth.asm):00992                 fcn     'CMP2RA'
E554 E45A             (        forth.asm):00993                 fdb     ACQVMRA         Three operands missing in any of CMOVE,
                      (        forth.asm):00994         *                               <CMOVE, CMOVE>, MOVE
E556 414351564D524100 (        forth.asm):00995                 fcn     'ACQVMRA'
E55E E0BE             (        forth.asm):00996                 fdb     MINTLRA         Main interpreter loop return address
E560 4D494E544C524100 (        forth.asm):00997                 fcn     'MINTLRA'
E568 E30E             (        forth.asm):00998                 fdb     NUMCVRA         ? while converting a string to a number
E56A 4E554D4356524100 (        forth.asm):00999                 fcn     'NUMCVRA'
E572 E0D1             (        forth.asm):01000                 fdb     NMCVIRA         Numeric conversion error while interpreting
E574 4E4D435649524100 (        forth.asm):01001                 fcn     'NMCVIRA'
E57C E148             (        forth.asm):01002                 fdb     NMCVCRA         Numeric conversion error while compiling
E57E 4E4D435643524100 (        forth.asm):01003                 fcn     'NMCVCRA'
E586 E108             (        forth.asm):01004                 fdb     INTRPRA         Interpreter RA (after the execution of a word)
E588 494E545250524100 (        forth.asm):01005                 fcn     'INTRPRA'
E590 E0C0             (        forth.asm):01006                 fdb     _INTERP         Interpreter actual active subroutine
E592 5F494E5445525000 (        forth.asm):01007                 fcn     '_INTERP'
E59A E127             (        forth.asm):01008                 fdb     COMPLRA         Compiler RA (after the execution of an IMD word)
E59C 434F4D504C524100 (        forth.asm):01009                 fcn     'COMPLRA'
E5A4 E3D5             (        forth.asm):01010                 fdb     LWMNRA          Missing word name in LOCWRT
E5A6 4C574D4E524100   (        forth.asm):01011                 fcn     'LWMNRA'
E5AD E3F2             (        forth.asm):01012                 fdb     WTOOLNG         Word length is too long
E5AF 57544F4F4C4E4700 (        forth.asm):01013                 fcn     'WTOOLNG'
E5B7 E7D5             (        forth.asm):01014                 fdb     CFR1SRA         CF read one sector failed
E5B9 4346523153524100 (        forth.asm):01015                 fcn     'CFR1SRA'
E5C1 E694             (        forth.asm):01016                 fdb     NPUSH           Not an error RA but useful to have as a symbol
E5C3 4E5055534800     (        forth.asm):01017                 fcn     'NPUSH'
E5C9 E6B1             (        forth.asm):01018                 fdb     RPUSH           Not an error RA but useful to have as a symbol
E5CB 525055534800     (        forth.asm):01019                 fcn     'RPUSH'
E5D1 E6A2             (        forth.asm):01020                 fdb     NPOP            Not an error RA but useful to have as a symbol
E5D3 4E504F5000       (        forth.asm):01021                 fcn     'NPOP'
E5D8 E6CF             (        forth.asm):01022                 fdb     RPOP            Not an error RA but useful to have as a symbol
E5DA 52504F5000       (        forth.asm):01023                 fcn     'RPOP'
E5DF E1E2             (        forth.asm):01024                 fdb     PUTS            Not an error RA but useful to have as a symbol
E5E1 5055545300       (        forth.asm):01025                 fcn     'PUTS'
E5E6 E716             (        forth.asm):01026                 fdb     BK2BBRA
E5E8 424B324242524100 (        forth.asm):01027                 fcn     'BK2BBRA'       Block BLK @ not mapped in INTERPRET
                      (        forth.asm):01028                 IFNE    DEBUG
                      (        forth.asm):01029                 fdb     LWAFRA          Assertion failure in LOCWRT
                      (        forth.asm):01030                 fcn     'LOCWRTAF'
                      (        forth.asm):01031                 ENDC
E5F0 0000             (        forth.asm):01032                 fdb     0               End of list
E5F2 3F3F3F00         (        forth.asm):01033                 fcn     '???'           Admit we have no clue!
                      (        forth.asm):01034                 ENDC                    SSDFEAT
                      (        forth.asm):01035         
                      (        forth.asm):01036         * Print ' (xxxx/yyyy)' where xxxx is the hex representation for BLK @ and
                      (        forth.asm):01037         * yyyy is the hex representation for >IN @.
E5F6 8E034A           (        forth.asm):01038 (3)     PRBLKIN ldx     #HEXBUF
E5F9 8620             (        forth.asm):01039 (2)             lda     #SP
E5FB A780             (        forth.asm):01040 (4+1)           sta     ,x+
E5FD 8628             (        forth.asm):01041 (2)             lda     #'(
E5FF A780             (        forth.asm):01042 (4+1)           sta     ,x+
E601 DC1E             (        forth.asm):01043 (4)             ldd     UBLK
E603 BDE17C           (        forth.asm):01044 (7)             jsr     HDMP4
E606 862F             (        forth.asm):01045 (2)             lda     #'/
E608 A780             (        forth.asm):01046 (4+1)           sta     ,x+
E60A DC1C             (        forth.asm):01047 (4)             ldd     UTOIN
E60C BDE17C           (        forth.asm):01048 (7)             jsr     HDMP4
E60F 8629             (        forth.asm):01049 (2)             lda     #')
E611 A780             (        forth.asm):01050 (4+1)           sta     ,x+
E613 6F84             (        forth.asm):01051 (6+0)           clr     ,x
E615 8E034A           (        forth.asm):01052 (3)             ldx     #HEXBUF
E618 7EE1E2           (        forth.asm):01053 (3)             jmp     PUTS
                      (        forth.asm):01054         
                      (        forth.asm):01055         * Handle error condition. Error code is in B.
                      (        forth.asm):01056         * If B is 2 (undefined) X points to a string of length CURTOKL that has the
                      (        forth.asm):01057         * offending word.
E61B 10AEE4           (        forth.asm):01058 (6+0)   ERRHDLR ldy     ,s              Invoking return address
                      (        forth.asm):01059         * In case of a trap return, we enter here with Y set to #IODZHDL
E61E C102             (        forth.asm):01060 (2)     ERRHD1  cmpb    #2              Undefined symbol?
E620 261A             (        forth.asm):01061 (3)             bne     @perrm          No
E622 8627             (        forth.asm):01062 (2)             lda     #''
E624 BDE1BE           (        forth.asm):01063 (7)             jsr     PUTCH
E627 A680             (        forth.asm):01064 (4+1)   @prtsym lda     ,x+             Display undefined symbol name
E629 BDE1BE           (        forth.asm):01065 (7)             jsr     PUTCH
E62C 0A2D             (        forth.asm):01066 (5)             dec     CURTOKL
E62E 2702             (        forth.asm):01067 (3)             beq     @endquo
E630 20F5             (        forth.asm):01068 (3)             bra     @prtsym
E632 8627             (        forth.asm):01069 (2)     @endquo lda     #''
E634 BDE1BE           (        forth.asm):01070 (7)             jsr     PUTCH
E637 8620             (        forth.asm):01071 (2)             lda     #SP
E639 BDE1BE           (        forth.asm):01072 (7)             jsr     PUTCH
E63C 8EFEA9           (        forth.asm):01073 (3)     @perrm  ldx     #ERRMTBL        Regular error handling
E63F 5D               (        forth.asm):01074 (1)     @nxterr tstb
E640 2633             (        forth.asm):01075 (3)             bne     @skerrm
E642 BDE1E2           (        forth.asm):01076 (7)             jsr     PUTS            Print error message
E645 8DAF             (        forth.asm):01077 (6)             bsr     PRBLKIN         Print BLK and >IN values (in hex)
E647 BDE1EF           (        forth.asm):01078 (7)             jsr     PUTCR
E64A 1F20             (        forth.asm):01079 (4)     @dmptos tfr     y,d             Dump top of the system stack contents
E64C 8E034A           (        forth.asm):01080 (3)             ldx     #HEXBUF
E64F BDE17C           (        forth.asm):01081 (7)             jsr     HDMP4
E652 8620             (        forth.asm):01082 (2)             lda     #SP
E654 A780             (        forth.asm):01083 (4+1)           sta     ,x+
                      (        forth.asm):01084         * Symbolic stack dumps are configurable. In situations where the dictionary is
                      (        forth.asm):01085         * trashed, they may not be considered desirable. See SSDFEAT in constants.asm.
                      (        forth.asm):01086                 IFNE    SSDFEAT
E656 BDE4D9           (        forth.asm):01087 (7)             jsr     FINDSYM
                      (        forth.asm):01088                 ENDC
E659 8E034A           (        forth.asm):01089 (3)             ldx     #HEXBUF
E65C BDE1E2           (        forth.asm):01090 (7)             jsr     PUTS
E65F BDE1EF           (        forth.asm):01091 (7)             jsr     PUTCR
E662 108CE000         (        forth.asm):01092 (4)             cmpy    #IODZHDL
E666 2702             (        forth.asm):01093 (3)             beq     @wastrp         We're just back from the trap handler
E668 3262             (        forth.asm):01094 (4+1)           leas    2,s             Point to the next item on the stack
E66A 118C8000         (        forth.asm):01095 (4)     @wastrp cmps    #RAMSTRT+RAMSIZE
E66E 270C             (        forth.asm):01096 (3)             beq     @errdon         We're done here
E670 10AEE4           (        forth.asm):01097 (6+0)           ldy     ,s
E673 20D5             (        forth.asm):01098 (3)             bra     @dmptos
E675 A680             (        forth.asm):01099 (4+1)   @skerrm lda     ,x+             Scan for the next error message
E677 26FC             (        forth.asm):01100 (3)             bne     @skerrm
E679 5A               (        forth.asm):01101 (1)             decb
E67A 20C3             (        forth.asm):01102 (3)             bra     @nxterr
E67C 10CE8000         (        forth.asm):01103 (4)     @errdon lds     #RAMSTRT+RAMSIZE
E680 961B             (        forth.asm):01104 (3)             lda     USTATE+1        We do ignore the upper byte
E682 270D             (        forth.asm):01105 (3)             beq     @erdon2         No pointers to restore if we were interpreting
                      (        forth.asm):01106         * Compiling: clear STATE, RSP and restore LSTWAD, DICEND.
E684 0F1B             (        forth.asm):01107 (5)             clr     USTATE+1        Switch back to interpretation mode
E686 BDE9FF           (        forth.asm):01108                 RFXT    jsr,RCLR+7      XT for RCLR
E689 9E0C             (        forth.asm):01109 (4)             ldx     BDICEND         Restore essential pointers from backups
E68B 9F08             (        forth.asm):01110 (4)             stx     DICEND          Restore HERE
E68D 9E0A             (        forth.asm):01111 (4)             ldx     BLSTWAD
E68F 9F06             (        forth.asm):01112 (4)             stx     LSTWAD          Restore LAST
E691 7EE0A8           (        forth.asm):01113 (3)     @erdon2 jmp     INTERP
                      (        forth.asm):01114         
                      (        forth.asm):01115         * Push X to the data stack (boundary is checked).
E694 11830186         (        forth.asm):01116 (4)     NPUSH   cmpu    #NSTTOP
E698 2303             (        forth.asm):01117 (3)             bls     @npush1         Anything <= than #NSTTOP indicates overflow
E69A 3610             (        forth.asm):01118 (4+2)           pshu    x               Aka UCNPUSH
E69C 39               (        forth.asm):01119 (4)             rts
E69D 5F               (        forth.asm):01120 (1)     @npush1 clrb                    Data stack overflow
E69E BDE61B           (        forth.asm):01121 (7)             jsr     ERRHDLR         No return
     E6A1             (        forth.asm):01122         DPSHRA  equ     *
E6A1 12               (        forth.asm):01123 (1)             nop
                      (        forth.asm):01124         
                      (        forth.asm):01125         * Pull X from the data stack (boundary is checked).
                      (        forth.asm):01126         * D, W and Y are preserved.
E6A2 11830246         (        forth.asm):01127 (4)     NPOP    cmpu    #NSTBOT
E6A6 2403             (        forth.asm):01128 (3)             bhs     @npop1          Anything >= than #NSTBOT indicates underflow
E6A8 3710             (        forth.asm):01129 (4+2)           pulu    x
E6AA 39               (        forth.asm):01130 (4)             rts
E6AB C601             (        forth.asm):01131 (2)     @npop1  ldb     #1              Data stack underflow
E6AD BDE61B           (        forth.asm):01132 (7)             jsr     ERRHDLR         No return
     E6B0             (        forth.asm):01133         DPOPRA  equ     *
E6B0 12               (        forth.asm):01134 (1)             nop
                      (        forth.asm):01135         
                      (        forth.asm):01136         * Push X to the return stack (boundary is checked).
E6B1 9625             (        forth.asm):01137 (3)     RPUSH   lda     RDEPTH          RDEPTH is expressed in cells
E6B3 8140             (        forth.asm):01138 (2)             cmpa    #RSTKSZ/2       But RSTKZ is expressed in bytes
E6B5 2712             (        forth.asm):01139 (3)             beq     @rpush1
E6B7 4C               (        forth.asm):01140 (1)             inca
E6B8 9725             (        forth.asm):01141 (3)             sta     RDEPTH
E6BA 0F27             (        forth.asm):01142 (5)             clr     RTSREMV         Do not get rid of the final RTS
E6BC 1F27             (        forth.asm):01143 (4)             tfr     y,v
E6BE 109E00           (        forth.asm):01144 (5)             ldy     RSP
E6C1 AFA3             (        forth.asm):01145 (5+2)           stx     ,--y
E6C3 109F00           (        forth.asm):01146 (5)             sty     RSP
E6C6 1F72             (        forth.asm):01147 (4)             tfr     v,y
E6C8 39               (        forth.asm):01148 (4)             rts
E6C9 C607             (        forth.asm):01149 (2)     @rpush1 ldb     #7              Return stack overflow
E6CB BDE61B           (        forth.asm):01150 (7)             jsr     ERRHDLR         No return
     E6CE             (        forth.asm):01151         RPSHRA  equ     *
E6CE 12               (        forth.asm):01152 (1)             nop                     Meant to insulate RPUSH errors from RPOP EP
                      (        forth.asm):01153         
                      (        forth.asm):01154         * Pull X from the return stack (boundary is checked).
E6CF 9625             (        forth.asm):01155 (3)     RPOP    lda     RDEPTH          RDEPTH is expressed in cells
E6D1 2710             (        forth.asm):01156 (3)             beq     @rpop1
E6D3 4A               (        forth.asm):01157 (1)             deca
E6D4 9725             (        forth.asm):01158 (3)             sta     RDEPTH
E6D6 1F27             (        forth.asm):01159 (4)             tfr     y,v
E6D8 109E00           (        forth.asm):01160 (5)             ldy     RSP
E6DB AEA1             (        forth.asm):01161 (5+2)           ldx     ,y++
E6DD 109F00           (        forth.asm):01162 (5)             sty     RSP
E6E0 1F72             (        forth.asm):01163 (4)             tfr     v,y
E6E2 39               (        forth.asm):01164 (4)             rts
E6E3 C608             (        forth.asm):01165 (2)     @rpop1  ldb     #8              Return stack underflow
E6E5 BDE61B           (        forth.asm):01166 (7)             jsr     ERRHDLR         No return
     E6E8             (        forth.asm):01167         RPOPRA  equ     *
                      (        forth.asm):01168         
                      (        forth.asm):01169         * Derive a workable base buffer address from BLK and return it through X.
                      (        forth.asm):01170         * Update BSBFADR accordingly. The buffer in question is assumed to have been
                      (        forth.asm):01171         * mapped previously (through a call to BLOCK). An assertion failure will be
                      (        forth.asm):01172         * raised if that is not the case. W is preserved, Y is untouched.
E6E8 1038             (        forth.asm):01173 (6)     BLK2BB  pshsw
E6EA 10961E           (        forth.asm):01174 (5)             ldw     UBLK
E6ED 2605             (        forth.asm):01175 (3)             bne     @bufadr
E6EF 8E02C6           (        forth.asm):01176 (3)             ldx     #CMDBUF         Base buffer address for the serial line
E6F2 2022             (        forth.asm):01177 (3)             bra     @rslvd
E6F4 8E03F0           (        forth.asm):01178 (3)     @bufadr ldx     #BUF0           Buffer 0 base address
E6F7 C602             (        forth.asm):01179 (2)             ldb     #2              Number of resident buffers
E6F9 A6890401         (        forth.asm):01180 (4+3)   @chkflg lda     BOFLAGS,x       Buffer flags to A
E6FD 8403             (        forth.asm):01181 (2)             anda    #BINUSE|BMAPPD
E6FF 8103             (        forth.asm):01182 (2)             cmpa    #BINUSE|BMAPPD  Is this buffer in use and mapped in?
E701 2607             (        forth.asm):01183 (3)             bne     @nxtbuf
E703 10A1890402       (        forth.asm):01184 (6+3)           cmpw    BOBLKNO,x       Is this the block we are looking for?
E708 270C             (        forth.asm):01185 (3)             beq     @rslvd          Yes
E70A 30890410         (        forth.asm):01186 (4+3)   @nxtbuf leax    BFDISP,x        Point to the next buffer
E70E 5A               (        forth.asm):01187 (1)             decb
E70F 26E8             (        forth.asm):01188 (3)             bne     @chkflg
E711 C60A             (        forth.asm):01189 (2)     @asfail ldb     #10             Assertion failure
E713 BDE61B           (        forth.asm):01190 (7)             jsr     ERRHDLR         No return
     E716             (        forth.asm):01191         BK2BBRA equ     *               For symbolic system stack debugging purposes
E716 9F22             (        forth.asm):01192 (4)     @rslvd  stx     BSBFADR         Base buffer address is resolved through X
E718 1039             (        forth.asm):01193 (6)             pulsw
E71A 39               (        forth.asm):01194 (4)             rts
                      (        forth.asm):01195         
                      (        forth.asm):01196         * Derive the current input stream pointer from BLK and >IN.
                      (        forth.asm):01197         * Y and W are untouched. The resulting address is returned in X.
                      (        forth.asm):01198         * D is altered. W is preserved, Y is untouched.
E71B 8DCB             (        forth.asm):01199 (6)     BKIN2PT bsr     BLK2BB          Retrieve buffer address based on BLK's value
E71D DC1C             (        forth.asm):01200 (4)             ldd     UTOIN
E71F 308B             (        forth.asm):01201 (4+2)           leax    d,x             Add the current offset. Return the result via X
E721 39               (        forth.asm):01202 (4)             rts
                      (        forth.asm):01203         
                      (        forth.asm):01204                 include storage.asm
                      (      storage.asm):00001         * Wait until the BSY bit is clear in the CF status register.
                      (      storage.asm):00002         * Upon return the BSY bit is guaranteed to be zero. Z will
                      (      storage.asm):00003         * be set in CC. This subroutine should not be called before
                      (      storage.asm):00004         * the CompactFlash presence has been assessed.
E722 B6C007           (      storage.asm):00005 (4)     CFWAIT  lda     CFSTATR
E725 8580             (      storage.asm):00006 (2)             bita    #CFBSYB
E727 26F9             (      storage.asm):00007 (3)             bne     CFWAIT
E729 39               (      storage.asm):00008 (4)             rts
                      (      storage.asm):00009         
                      (      storage.asm):00010         * Wait until the BSY bit is clear and the RDY bit is set.
E72A 8DF6             (      storage.asm):00011 (6)     CFRDY   bsr     CFWAIT
E72C 2703             (      storage.asm):00012 (3)             beq     @cfrdy0         Card not busy, proceed
E72E 1A04             (      storage.asm):00013 (2)             orcc    #ZFLAG
E730 39               (      storage.asm):00014 (4)             rts
E731 8E2000           (      storage.asm):00015 (3)     @cfrdy0 ldx     #$2000          Maximum poll count
E734 8640             (      storage.asm):00016 (2)             lda     #CFRDYB
E736 B5C007           (      storage.asm):00017 (4)     @cfrdy1 bita    CFSTATR
E739 2604             (      storage.asm):00018 (3)             bne     @cfrdy2         BSY bit is set, continue
E73B 301F             (      storage.asm):00019 (4+1)           leax    -1,x            Card not ready, decrement poll count
E73D 26F7             (      storage.asm):00020 (3)             bne     @cfrdy1         and try again
E73F 39               (      storage.asm):00021 (4)     @cfrdy2 rts                     Return with Z set: card not present
                      (      storage.asm):00022         *                               Return with Z clear: card is ready
                      (      storage.asm):00023         
                      (      storage.asm):00024         * Check for possible error condition.
                      (      storage.asm):00025         * Upon return either Z is set (A is zero) and no error occurred or
                      (      storage.asm):00026         * Z is clear and the CF error register contents is returned in A.
E740 8DE0             (      storage.asm):00027 (6)     CFERRCK bsr     CFWAIT
E742 B6C007           (      storage.asm):00028 (4)             lda     CFSTATR
E745 8401             (      storage.asm):00029 (2)             anda    #CFERRB
E747 2703             (      storage.asm):00030 (3)             beq     @cfeck1
E749 B6C001           (      storage.asm):00031 (4)             lda     CFERROR         The error register contains error details
E74C 39               (      storage.asm):00032 (4)     @cfeck1 rts
                      (      storage.asm):00033         
                      (      storage.asm):00034         * Issue CF command. The command code is passed through the B register.
                      (      storage.asm):00035         * Upon return:
                      (      storage.asm):00036         * - Z is set and everything is peachy.
                      (      storage.asm):00037         * - or Z is clear and the CF error register contents will be
                      (      storage.asm):00038         *   returned in A (and mirrored in the global CFERRCD variable).
                      (      storage.asm):00039         * B is preserved.
E74D 8DDB             (      storage.asm):00040 (6)     CFCMDIS bsr     CFRDY
E74F 270A             (      storage.asm):00041 (3)             beq     @cfciab         Card not ready, abort
E751 D732             (      storage.asm):00042 (3)             stb     CFCMMIR         Update CF command mirror
E753 F7C007           (      storage.asm):00043 (4)             stb     CFCOMDR         Send command to the CF card
E756 8DE8             (      storage.asm):00044 (6)             bsr     CFERRCK
E758 9733             (      storage.asm):00045 (3)     @cfcise sta     CFERRCD         CF command issue set error
                      (      storage.asm):00046                 IFNE    DEBUG
                      (      storage.asm):00047                 pshs    a,cc
                      (      storage.asm):00048                 beq     @cfciok
                      (      storage.asm):00049                 lda     #'!
                      (      storage.asm):00050                 jsr     PUTCH
E75A                  (      storage.asm):00051         @cfcidi lda     CFCMMIR
                      (      storage.asm):00052                 ldx     #TBUFF
                      (      storage.asm):00053                 jsr     HDMP2
                      (      storage.asm):00054                 lda     #'/
                      (      storage.asm):00055                 sta     ,x+
                      (      storage.asm):00056                 lda     CFERRCD
                      (      storage.asm):00057                 jsr     HDMP2
                      (      storage.asm):00058                 ldx     #TBUFF
                      (      storage.asm):00059                 jsr     PUTS
                      (      storage.asm):00060                 jsr     PUTCR
                      (      storage.asm):00061                 bra     @cfcict         CF command issue continued
E75A                  (      storage.asm):00062         @cfciok lda     #'#
                      (      storage.asm):00063                 jsr     PUTCH
                      (      storage.asm):00064                 bra     @cfcidi         CF command issue data indication
E75A                  (      storage.asm):00065         @cfcict puls    cc,a
                      (      storage.asm):00066                 ENDC
E75A 39               (      storage.asm):00067 (4)             rts
E75B 86FF             (      storage.asm):00068 (2)     @cfciab lda     #$FF            Dummy error code
E75D 20F9             (      storage.asm):00069 (3)             bra     @cfcise
                      (      storage.asm):00070         
                      (      storage.asm):00071         * Drive 0 select.
E75F 8DC9             (      storage.asm):00072 (6)     CFDRSEL bsr     CFRDY
E761 86E0             (      storage.asm):00073 (2)             lda     #$E0            Drive 0, LBA mode
E763 B7C006           (      storage.asm):00074 (4)             sta     CFDRHDR
E766 20C2             (      storage.asm):00075 (3)             bra     CFRDY
                      (      storage.asm):00076         
                      (      storage.asm):00077         * Analyze the response to the CF "Identify Device" request.
E768 9E08             (      storage.asm):00078 (4)     CFANTHS ldx     DICEND
E76A 308836           (      storage.asm):00079 (4+1)           leax    $36,x           Point to the "Model number" field
E76D 3410             (      storage.asm):00080 (4+2)           pshs    x
E76F 118614           (      storage.asm):00081 (3)             lde     #$14            Number of 16 bit words to go through
E772 EC84             (      storage.asm):00082 (5+0)   @bytswp ldd     ,x
E774 1E98             (      storage.asm):00083 (5)             exg     b,a             Byte swapping
E776 ED81             (      storage.asm):00084 (5+2)           std     ,x++
E778 114A             (      storage.asm):00085 (2)             dece
E77A 26F6             (      storage.asm):00086 (3)             bne     @bytswp
E77C 6F84             (      storage.asm):00087 (6+0)           clr     ,x
E77E 3510             (      storage.asm):00088 (4+2)           puls    x
E780 BDE1E2           (      storage.asm):00089 (7)             jsr     PUTS            Decent CF cards indicate the capacity that way
E783 7EE1EF           (      storage.asm):00090 (3)             jmp     PUTCR           Up to $10000 blocks is 64 MB!
                      (      storage.asm):00091         
                      (      storage.asm):00092         * Initialize the CompactFlash subsystem.
                      (      storage.asm):00093         * This is run once at boot time. There is no hot plug support here.
E786 0F31             (      storage.asm):00094 (5)     CFINIT  clr     CFCARDP         Clear card present,
                      (      storage.asm):00095                 IFEQ    DEBUG
E788 8DA0             (      storage.asm):00096 (6)             bsr     CFRDY
                      (      storage.asm):00097                 ELSE
                      (      storage.asm):00098                 jsr     CFRDY
                      (      storage.asm):00099                 ENDC
E78A 2730             (      storage.asm):00100 (3)             beq     @cfinab         Card not ready, abort
E78C 8DD1             (      storage.asm):00101 (6)             bsr     CFDRSEL         Drive 0 select
E78E 8601             (      storage.asm):00102 (2)             lda     #1              Enable 8-bit data transfers
E790 B7C001           (      storage.asm):00103 (4)             sta     CFFEATR
E793 C6EF             (      storage.asm):00104 (2)             ldb     #CFSETFT        Issue a CF "Set Feature" command
                      (      storage.asm):00105                 IFEQ    DEBUG
E795 8DB6             (      storage.asm):00106 (6)             bsr     CFCMDIS         Not allowed to fail
                      (      storage.asm):00107                 ELSE
                      (      storage.asm):00108                 jsr     CFCMDIS         Not allowed to fail
                      (      storage.asm):00109                 ENDC
E797 2623             (      storage.asm):00110 (3)             bne     @cfinab         Abort with card present flag clear
E799 8601             (      storage.asm):00111 (2)             lda     #1              Request default PIO mode wo/ IORDY
E79B B7C002           (      storage.asm):00112 (4)             sta     CFSCNTR
E79E 8603             (      storage.asm):00113 (2)             lda     #3              ATA-2 "Set Transfer mode"
E7A0 B7C001           (      storage.asm):00114 (4)             sta     CFFEATR
                      (      storage.asm):00115                 IFEQ    DEBUG
E7A3 8DA8             (      storage.asm):00116 (6)             bsr     CFCMDIS         OK to fail
                      (      storage.asm):00117                 ELSE
                      (      storage.asm):00118                 jsr     CFCMDIS         OK to fail
                      (      storage.asm):00119                 ENDC
E7A5 8682             (      storage.asm):00120 (2)             lda     #$82            Disable write caching
E7A7 B7C001           (      storage.asm):00121 (4)             sta     CFFEATR
                      (      storage.asm):00122                 IFEQ    DEBUG
E7AA 8DA1             (      storage.asm):00123 (6)             bsr     CFCMDIS         B still has #CFSETF. Also OK to fail
                      (      storage.asm):00124                 ELSE
                      (      storage.asm):00125                 jsr     CFCMDIS         B still has #CFSETF. Also OK to fail
                      (      storage.asm):00126                 ENDC
E7AC C6EC             (      storage.asm):00127 (2)             ldb     #CFIDDEV        Issue a CF "Identify Device" command
                      (      storage.asm):00128                 IFEQ    DEBUG
E7AE 8D9D             (      storage.asm):00129 (6)             bsr     CFCMDIS         Not allowed to fail
                      (      storage.asm):00130                 ELSE
                      (      storage.asm):00131                 jsr     CFCMDIS         Not allowed to fail
                      (      storage.asm):00132                 ENDC
E7B0 260A             (      storage.asm):00133 (3)             bne     @cfinab         Abort with card present flag clear
E7B2 9E08             (      storage.asm):00134 (4)             ldx     DICEND          Target address is HERE
E7B4 8D07             (      storage.asm):00135 (6)             bsr     CF1SRD          Read one sector
E7B6 8DB0             (      storage.asm):00136 (6)             bsr     CFANTHS         Analyze this!
E7B8 8601             (      storage.asm):00137 (2)             lda     #1
E7BA 9731             (      storage.asm):00138 (3)             sta     CFCARDP         Set the card present flag
E7BC 39               (      storage.asm):00139 (4)     @cfinab rts
                      (      storage.asm):00140         
                      (      storage.asm):00141         * Read one sector. The LBA parameters are assumed to have been set previously.
                      (      storage.asm):00142         * On input X points to the receiving (at least 512 bytes long) buffer.
E7BD B6C007           (      storage.asm):00143 (4)     CF1SRD  lda     CFSTATR
E7C0 8508             (      storage.asm):00144 (2)             bita    #CFDRQB         Check for DRQ bit in the CF status register
E7C2 270C             (      storage.asm):00145 (3)             beq     IOERR
E7C4 10860200         (      storage.asm):00146 (4)             ldw     #CFSCSZ         Sector size is 512 bytes
E7C8 108EC000         (      storage.asm):00147 (4)             ldy     #CFDATAR        The data source address
E7CC 113B21           (      storage.asm):00148 (6+?)           tfm     y,x+            Note: tfm is interruptible!
E7CF 39               (      storage.asm):00149 (4)             rts
E7D0 C611             (      storage.asm):00150 (2)     IOERR   ldb     #17
E7D2 BDE61B           (      storage.asm):00151 (7)             jsr     ERRHDLR         No return
E7D5 12               (      storage.asm):00152 (1)     CFR1SRA nop                     For symbolic stack dump debugging purposes
                      (      storage.asm):00153         
                      (      storage.asm):00154         * Write one sector. The LBA parameters are assumed to have been set previously.
                      (      storage.asm):00155         * On input X points to the sending (at least 512 bytes long) buffer.
E7D6 B6C007           (      storage.asm):00156 (4)     CF1SWR  lda     CFSTATR
E7D9 8488             (      storage.asm):00157 (2)             anda    #CFBSYB|CFDRQB
E7DB 8108             (      storage.asm):00158 (2)             cmpa    #CFDRQB         Check for BSY clear and DRQ set
E7DD 26F7             (      storage.asm):00159 (3)             bne     CF1SWR
E7DF 10860200         (      storage.asm):00160 (4)             ldw     #CFSCSZ         Sector size is 512 bytes
E7E3 108EC000         (      storage.asm):00161 (4)             ldy     #CFDATAR        The data destination address
E7E7 113A12           (      storage.asm):00162 (6+?)           tfm     x+,y            Note: tfm is interruptible!
E7EA 39               (      storage.asm):00163 (4)             rts
                      (      storage.asm):00164         
                      (      storage.asm):00165         * 1KB Forth block support primitives. Not dictionary code. More like BIOS ops.
                      (      storage.asm):00166         
                      (      storage.asm):00167         * One block IO preamble: select drive and LBA parameters. On input:
                      (      storage.asm):00168         * ,s has the return address
                      (      storage.asm):00169         * 2,s had the return address for the caller
                      (      storage.asm):00170         * 4,s has the target block number
E7EB BDE722           (      storage.asm):00171 (7)     CF1BPRE jsr     CFWAIT
E7EE BDE75F           (      storage.asm):00172 (7)             jsr     CFDRSEL         Set drive and head parameters
E7F1 EC64             (      storage.asm):00173 (5+1)           ldd     4,s
E7F3 1048             (      storage.asm):00174 (2)             lsld                    Convert block number to sector number
E7F5 F7C003           (      storage.asm):00175 (4)             stb     CFSNUMR         LBA 7-0
E7F8 B7C004           (      storage.asm):00176 (4)             sta     CFCLOWR         LBA 15-8
E7FB 1FA8             (      storage.asm):00177 (4)             tfr     cc,a
E7FD 8401             (      storage.asm):00178 (2)             anda    #CFLAG
E7FF B7C005           (      storage.asm):00179 (4)             sta     CFCHIGR         LBA 23-16 (carry to cylinder high)
E802 8602             (      storage.asm):00180 (2)             lda     #2              2 IDE sectors per Forth block
E804 B7C002           (      storage.asm):00181 (4)             sta     CFSCNTR
E807 39               (      storage.asm):00182 (4)             rts
                      (      storage.asm):00183         
                      (      storage.asm):00184         * Read one block from CF device. On input:
                      (      storage.asm):00185         * ,s has the return address
                      (      storage.asm):00186         * 2,s has the target block number
                      (      storage.asm):00187         * 4,s has the buffer base address
                      (      storage.asm):00188         * Upon return, Y will be preserved.
E808 0D31             (      storage.asm):00189 (4)     CF1BKRD tst     CFCARDP
E80A 2602             (      storage.asm):00190 (3)             bne     @ctnued
E80C 20C2             (      storage.asm):00191 (3)             bra     IOERR           Card not present--CF subsystem not initialized
E80E 1F27             (      storage.asm):00192 (4)     @ctnued tfr     y,v
E810 8DD9             (      storage.asm):00193 (6)             bsr     CF1BPRE
E812 C620             (      storage.asm):00194 (2)             ldb     #CFRSCTS        Issue a "Read sectors" CF command
E814 BDE74D           (      storage.asm):00195 (7)             jsr     CFCMDIS
E817 AE64             (      storage.asm):00196 (5+1)           ldx     4,s             Target buffer address to X
E819 8DA2             (      storage.asm):00197 (6)             bsr     CF1SRD          Read the even sector from CF device
E81B BDE722           (      storage.asm):00198 (7)             jsr     CFWAIT          Wait for next sector to become available
E81E 8D9D             (      storage.asm):00199 (6)             bsr     CF1SRD          and read the odd sector
E820 1F72             (      storage.asm):00200 (4)             tfr     v,y
E822 39               (      storage.asm):00201 (4)             rts
                      (      storage.asm):00202         
                      (      storage.asm):00203         * Write one block to CF device. Upon entry:
                      (      storage.asm):00204         * ,s has the return address
                      (      storage.asm):00205         * 2,s has the target block number
                      (      storage.asm):00206         * 4,s has the buffer base address
                      (      storage.asm):00207         * Upon return, Y will be preserved.
E823 0D31             (      storage.asm):00208 (4)     CF1BKWR tst     CFCARDP
E825 2602             (      storage.asm):00209 (3)             bne     @ctnued
E827 20A7             (      storage.asm):00210 (3)             bra     IOERR           Card not present--CF subsystem not initialized
E829 1F27             (      storage.asm):00211 (4)     @ctnued tfr     y,v
E82B 8DBE             (      storage.asm):00212 (6)             bsr     CF1BPRE
E82D C630             (      storage.asm):00213 (2)             ldb     #CFWSCTS        Issue a "Write sectors" CF command
E82F BDE74D           (      storage.asm):00214 (7)             jsr     CFCMDIS
E832 AE64             (      storage.asm):00215 (5+1)           ldx     4,s             Source buffer address to X
E834 8DA0             (      storage.asm):00216 (6)             bsr     CF1SWR          Write the even sector to CF device
E836 BDE722           (      storage.asm):00217 (7)             jsr     CFWAIT          Wait for next sector to become available
E839 8D9B             (      storage.asm):00218 (6)             bsr     CF1SWR          and write the odd sector
E83B 1F72             (      storage.asm):00219 (4)             tfr     v,y
E83D 39               (      storage.asm):00220 (4)             rts
                      (      storage.asm):00221         
                      (        forth.asm):01205         
                      (        forth.asm):01206         ******************************************************************************
                      (        forth.asm):01207         * Dictionary begins. In the code below ANSI refers to ANSI-X3.215-1994
                      (        forth.asm):01208         * Draft 6 proposal (i.e. the free spec).
                      (        forth.asm):01209         
E83E 0D               (        forth.asm):01210         EBUFS   fcb     13              79-STANDARD (REQ145)
E83F 454D5054592D4255 (        forth.asm):01211                 fcc     'EMPTY-BUFFERS' ( -- )
     4646455253
E84C 0000             (        forth.asm):01212                 fdb     0               Last dictionary entry
E84E C7               (        forth.asm):01213                 RFCS
E84F 7EE274           (        forth.asm):01214 (3)             jmp     EMPTYB
                      (        forth.asm):01215         
E852 0C               (        forth.asm):01216         SAVBUF  fcb     12              79-STANDARD (REQ221)
E853 534156452D425546 (        forth.asm):01217                 fcc     'SAVE-BUFFERS'  ( -- )
     46455253
E85F E83E             (        forth.asm):01218                 fdb     EBUFS
E861 C7               (        forth.asm):01219                 RFCS
E862 8E03F0           (        forth.asm):01220 (3)             ldx     #BUF0
E865 8D03             (        forth.asm):01221 (6)             bsr     WBIFDRT
E867 8E0800           (        forth.asm):01222 (3)             ldx     #BUF1
                      (        forth.asm):01223         * Write buffer back to mass storage if marked as dirty.
                      (        forth.asm):01224         * The dirty bit is cleared but the buffer contents itself is not.
                      (        forth.asm):01225         * The buffer will continue to be marked as "in use."
                      (        forth.asm):01226         * On input X has has the base buffer address. Both D and X
                      (        forth.asm):01227         * are preserved. Y is not.
E86A 1F02             (        forth.asm):01228 (4)     WBIFDRT tfr     d,y
E86C 3410             (        forth.asm):01229 (4+2)           pshs    x               Base buffer address (arg1 to CF1BKWR)
E86E 8605             (        forth.asm):01230 (2)             lda     #BINUSE|BDIRTY
E870 A4890401         (        forth.asm):01231 (4+3)           anda    BOFLAGS,x
E874 8105             (        forth.asm):01232 (2)             cmpa    #BINUSE|BDIRTY
E876 2616             (        forth.asm):01233 (3)             bne     @alldon         Block not in use or in use but not dirty
E878 AE890402         (        forth.asm):01234 (5+3)           ldx     BOBLKNO,x
E87C 3410             (        forth.asm):01235 (4+2)           pshs    x               Block number (arg0 to CF1BKWR)
E87E 8DA3             (        forth.asm):01236 (6)             bsr     CF1BKWR         Write data buffer to CF
E880 3262             (        forth.asm):01237 (4+1)           leas    2,s             Drop one cell from the system stack (blknum)
E882 AEE4             (        forth.asm):01238 (5+0)           ldx     ,s              Retrieve base buffer address
E884 A6890401         (        forth.asm):01239 (4+3)           lda     BOFLAGS,x
E888 84FB             (        forth.asm):01240 (2)             anda    #^BDIRTY        Clear the dirty bit
E88A A7890401         (        forth.asm):01241 (4+3)           sta     BOFLAGS,x       and update the 'flags' field
E88E 3510             (        forth.asm):01242 (4+2)   @alldon puls    x               Restore X
E890 1F20             (        forth.asm):01243 (4)             tfr     y,d             and D
E892 39               (        forth.asm):01244 (4)             rts
                      (        forth.asm):01245         
E893 05               (        forth.asm):01246         FLUSH   fcb     5               79-STANDARD (REF)
E894 464C555348       (        forth.asm):01247                 fcc     'FLUSH'         ( -- ) An alias for SAVE-BUFFERS
E899 E852             (        forth.asm):01248                 fdb     SAVBUF
E89B C7               (        forth.asm):01249                 RFCS
E89C 20C4             (        forth.asm):01250                 RFXT    bra,SAVBUF+15   XT for SAVE-BUFFERS
                      (        forth.asm):01251         
E89E 06               (        forth.asm):01252         UPDATE  fcb     6               79-STANDARD (REQ229)
E89F 555044415445     (        forth.asm):01253                 fcc     'UPDATE'        ( -- )
E8A5 E893             (        forth.asm):01254                 fdb     FLUSH
E8A7 C7               (        forth.asm):01255                 RFCS
E8A8 9E16             (        forth.asm):01256 (4)             ldx     MRUBUFA         Most recently used buffer base address
E8AA A6890401         (        forth.asm):01257 (4+3)           lda     BOFLAGS,x       Buffer 'flags' field to A
E8AE 8501             (        forth.asm):01258 (2)             bita    #BINUSE         Is that buffer in use?
E8B0 2706             (        forth.asm):01259 (3)             beq     @upddon         No, we're done here
E8B2 8A04             (        forth.asm):01260 (2)             ora     #BDIRTY
E8B4 A7890401         (        forth.asm):01261 (4+3)           sta     BOFLAGS,x       Set the dirty bit
E8B8 39               (        forth.asm):01262 (4)     @upddon rts
                      (        forth.asm):01263         
E8B9 06               (        forth.asm):01264         BUFFER  fcb     6               79-STANDARD (REQ130)
E8BA 425546464552     (        forth.asm):01265                 fcc     'BUFFER'        ( ublkno -- addr )
E8C0 E89E             (        forth.asm):01266                 fdb     UPDATE
E8C2 C7               (        forth.asm):01267                 RFCS
E8C3 BDE6A2           (        forth.asm):01268 (7)             jsr     NPOP
E8C6 1F12             (        forth.asm):01269 (4)             tfr     x,y             ublkno to Y
                      (        forth.asm):01270         * Block lookup.
E8C8 8E03F0           (        forth.asm):01271 (3)             ldx     #BUF0           Base address of the first resident buffer
E8CB C602             (        forth.asm):01272 (2)             ldb     #2              Number of resident buffers
E8CD A6890401         (        forth.asm):01273 (4+3)   @blkup  lda     BOFLAGS,x       Buffer flags to A
E8D1 8501             (        forth.asm):01274 (2)             bita    #BINUSE         Buffer in use?
E8D3 270A             (        forth.asm):01275 (3)             beq     @nxtbuf         No
E8D5 10AC890402       (        forth.asm):01276 (6+3)           cmpy    BOBLKNO,x       Buffer is in use. Block number match?
E8DA 2603             (        forth.asm):01277 (3)             bne     @nxtbuf         No
E8DC 3610             (        forth.asm):01278         @retba  UCNPUSH                 Block number match. Return the base address
E8DE 39               (        forth.asm):01279 (4)             rts
E8DF 30890410         (        forth.asm):01280 (4+3)   @nxtbuf leax    BFDISP,x        Point to the next buffer
E8E3 5A               (        forth.asm):01281 (1)             decb
E8E4 26E7             (        forth.asm):01282 (3)             bne     @blkup
                      (        forth.asm):01283         * The block number in Y is not currently in use. Assign a buffer to it.
E8E6 8E03F0           (        forth.asm):01284 (3)             ldx     #BUF0
E8E9 9C16             (        forth.asm):01285 (4)             cmpx    MRUBUFA         Most recently used buffer address
E8EB 2603             (        forth.asm):01286 (3)             bne     @bselct
E8ED 8E0800           (        forth.asm):01287 (3)             ldx     #BUF1
E8F0 9F16             (        forth.asm):01288 (4)     @bselct stx     MRUBUFA
E8F2 3420             (        forth.asm):01289 (4+2)           pshs    y               Backup the target block number
E8F4 BDE86A           (        forth.asm):01290 (7)             jsr     WBIFDRT         Write back if dirty. X and D are preserved
E8F7 8601             (        forth.asm):01291 (2)             lda     #BINUSE
E8F9 A7890401         (        forth.asm):01292 (4+3)           sta     BOFLAGS,x       Update the buffers 'flags' field
E8FD 3520             (        forth.asm):01293 (4+2)           puls    y               Restore the target block number
E8FF 10AF890402       (        forth.asm):01294 (6+3)           sty     BOBLKNO,x       and update the 'blknum' field as well
E904 20D6             (        forth.asm):01295 (3)             bra     @retba
                      (        forth.asm):01296         
E906 05               (        forth.asm):01297         BLOCK   fcb     5               79-STANDARD (REQ191)
E907 424C4F434B       (        forth.asm):01298                 fcc     'BLOCK'         ( ublkno -- addr )
E90C E8B9             (        forth.asm):01299                 fdb     BUFFER
E90E C7               (        forth.asm):01300                 RFCS
E90F 8DB2             (        forth.asm):01301                 RFXT    bsr,BUFFER+9    XT for BUFFER
                      (        forth.asm):01302         * Upon return Y has has the block number.
E911 BDE6A2           (        forth.asm):01303 (7)             jsr     NPOP            Buffer base address to X
E914 3410             (        forth.asm):01304 (4+2)           pshs    x               Push base buffer address as Arg1 to CF1BKRD
E916 A6890401         (        forth.asm):01305 (4+3)           lda     BOFLAGS,x       Retrieve buffer 'flags' field
                      (        forth.asm):01306                 IFNE    DEBUG
                      (        forth.asm):01307                 bita    #BINUSE
                      (        forth.asm):01308                 bne     @blkctd
                      (        forth.asm):01309                 lda     #10             Assertion failed
                      (        forth.asm):01310                 jsr     ERRHDLR         No return
                      (        forth.asm):01311                 ENDC
E91A 8402             (        forth.asm):01312 (2)     @blkctd anda    #BMAPPD         Has the block been read yet?
E91C 2613             (        forth.asm):01313 (3)             bne     @bkmapd         yes
E91E 3420             (        forth.asm):01314 (4+2)           pshs    y               no. Push block number as arg0 to CF1BKRD
                      (        forth.asm):01315         * Map in the block from the CF device. System stack structure is as follows:
                      (        forth.asm):01316         * ,s has the target block number.
                      (        forth.asm):01317         * 2,s has the buffer base address.
E920 BDE808           (        forth.asm):01318 (7)             jsr     CF1BKRD
E923 3262             (        forth.asm):01319 (4+1)           leas    2,s             Drop one cell from the system stack
                      (        forth.asm):01320         * Update the buffer flags field.
E925 AEE4             (        forth.asm):01321 (5+0)           ldx     ,s              Base buffer address
E927 A6890401         (        forth.asm):01322 (4+3)           lda     BOFLAGS,x       Buffer 'flags' field to A
E92B 8A02             (        forth.asm):01323 (2)             ora     #BMAPPD
E92D A7890401         (        forth.asm):01324 (4+3)           sta     BOFLAGS,x       Update buffer 'flags' field
E931 3510             (        forth.asm):01325 (4+2)   @bkmapd puls    x               Buffer base address to X
E933 3610             (        forth.asm):01326                 UCNPUSH
E935 39               (        forth.asm):01327 (4)             rts
                      (        forth.asm):01328         
E936 03               (        forth.asm):01329         BLK     fcb     3
E937 424C4B           (        forth.asm):01330                 fcc     'BLK'
E93A E906             (        forth.asm):01331                 fdb     BLOCK
E93C C7               (        forth.asm):01332                 RFCS
E93D 8E011E           (        forth.asm):01333 (3)             ldx     #UBLK
E940 7EE694           (        forth.asm):01334 (3)             jmp     NPUSH
                      (        forth.asm):01335         
E943 03               (        forth.asm):01336         TOIN    fcb     3
E944 3E494E           (        forth.asm):01337                 fcc     '>IN'
E947 E936             (        forth.asm):01338                 fdb     BLK
E949 C7               (        forth.asm):01339                 RFCS
E94A 8E011C           (        forth.asm):01340 (3)             ldx     #UTOIN
E94D 7EE694           (        forth.asm):01341 (3)             jmp     NPUSH
                      (        forth.asm):01342         
E950 03               (        forth.asm):01343         SCR     fcb     3
E951 534352           (        forth.asm):01344                 fcc     'SCR'
E954 E943             (        forth.asm):01345                 fdb     TOIN
E956 C7               (        forth.asm):01346                 RFCS
E957 8E0120           (        forth.asm):01347 (3)             ldx     #USCR
E95A 7EE694           (        forth.asm):01348 (3)             jmp     NPUSH
                      (        forth.asm):01349         
                      (        forth.asm):01350         * Functionally: : LINE 6 SHIFT SCR @ BLOCK + ;
E95D 04               (        forth.asm):01351         LINE    fcb     4               79-STANDARD (REF)
E95E 4C494E45         (        forth.asm):01352                 fcc     'LINE'
E962 E950             (        forth.asm):01353                 fdb     SCR
E964 C7               (        forth.asm):01354                 RFCS
E965 8E0006           (        forth.asm):01355 (3)             ldx     #6
E968 BDE694           (        forth.asm):01356 (7)             jsr     NPUSH
E96B BDF80A           (        forth.asm):01357                 RFXT    jsr,SHIFT+8     XT for SHIFT
E96E 9E20             (        forth.asm):01358 (4)             ldx     USCR
E970 BDE694           (        forth.asm):01359 (7)             jsr     NPUSH
E973 8D9A             (        forth.asm):01360                 RFXT    bsr,BLOCK+8     XT for BLOCK
E975 7EF770           (        forth.asm):01361                 RFXT    jmp,PLUS+4      XT for +
                      (        forth.asm):01362         
                      (        forth.asm):01363         * Functionally:
                      (        forth.asm):01364         * : INDEX 1+ SWAP DO
                      (        forth.asm):01365         *     CR   I SCR !
                      (        forth.asm):01366         *     0 LINE 64 TYPE
                      (        forth.asm):01367         *   LOOP ;
E978 05               (        forth.asm):01368         INDEX   fcb     5               79-STANDARD (REF)
E979 494E444558       (        forth.asm):01369                 fcc     'INDEX'         ( n1 n2 -- )
E97E E95D             (        forth.asm):01370                 fdb     LINE
E980 C7               (        forth.asm):01371                 RFCS
E981 BDE6A2           (        forth.asm):01372 (7)             jsr     NPOP            N2 to X
E984 3001             (        forth.asm):01373 (4+1)           leax    1,x             1+
E986 1F12             (        forth.asm):01374 (4)             tfr     x,y             Y has the limit (not reached)
E988 BDE6A2           (        forth.asm):01375 (7)             jsr     NPOP            X has the index (N1)
E98B BDE1EF           (        forth.asm):01376 (7)     @indlop jsr     PUTCR           CR
E98E 9F20             (        forth.asm):01377 (4)             stx     USCR            I SCR !
E990 3430             (        forth.asm):01378 (4+4)           pshs    y,x
E992 1FC1             (        forth.asm):01379 (4)             tfr     0,x
E994 BDE694           (        forth.asm):01380 (7)             jsr     NPUSH
E997 8DCC             (        forth.asm):01381                 RFXT    bsr,LINE+7      XT for LINE
E999 8E0040           (        forth.asm):01382 (3)             ldx     #64
E99C BDE694           (        forth.asm):01383 (7)             jsr     NPUSH
E99F BDF5DB           (        forth.asm):01384                 RFXT    jsr,TYPE+7      XT for TYPE
E9A2 3530             (        forth.asm):01385 (4+4)           puls    x,y             Restore loop parameters
E9A4 3001             (        forth.asm):01386 (4+1)           leax    1,x
E9A6 103712           (        forth.asm):01387 (4)             cmpr    x,y
E9A9 26E0             (        forth.asm):01388 (3)             bne     @indlop
E9AB 39               (        forth.asm):01389 (4)             rts
                      (        forth.asm):01390         
E9AC 04               (        forth.asm):01391         LIST    fcb     4               79-STANDARD (REQ109)
E9AD 4C495354         (        forth.asm):01392                 fcc     'LIST'          ( ublkno -- )
E9B1 E978             (        forth.asm):01393                 fdb     INDEX
E9B3 C7               (        forth.asm):01394                 RFCS
E9B4 0D31             (        forth.asm):01395 (4)             tst     CFCARDP
E9B6 2605             (        forth.asm):01396 (3)             bne     @lstpro
E9B8 C611             (        forth.asm):01397 (2)             ldb     #17             IO error
E9BA BDE61B           (        forth.asm):01398 (7)             jsr     ERRHDLR         No return
E9BD BDFBC2           (        forth.asm):01399         @lstpro RFXT    jsr,DUP+6       XT for DUP
E9C0 BDE90F           (        forth.asm):01400                 RFXT    jsr,BLOCK+8     XT for BLOCK
                      (        forth.asm):01401         * TOS now has the base buffer address.
E9C3 BDE6A2           (        forth.asm):01402 (7)             jsr     NPOP
E9C6 1F12             (        forth.asm):01403 (4)             tfr     x,y             Base buffer address to Y
E9C8 BDE6A2           (        forth.asm):01404 (7)             jsr     NPOP            ublkno to X
E9CB 9F20             (        forth.asm):01405 (4)             stx     USCR            Update SCR's value
E9CD C610             (        forth.asm):01406 (2)             ldb     #16             16 lines to go
E9CF 3404             (        forth.asm):01407 (4+1)   @lstlop pshs    b
E9D1 BDE1EF           (        forth.asm):01408 (7)             jsr     PUTCR
E9D4 1F21             (        forth.asm):01409 (4)             tfr     y,x
E9D6 BDE694           (        forth.asm):01410 (7)             jsr     NPUSH           Start address for TYPE
E9D9 8E0040           (        forth.asm):01411 (3)             ldx     #64
E9DC BDE694           (        forth.asm):01412 (7)             jsr     NPUSH           Byte count for TYPE
E9DF 103012           (        forth.asm):01413 (4)             addr    x,y
E9E2 BDF5DB           (        forth.asm):01414                 RFXT    jsr,TYPE+7      XT for TYPE
E9E5 3504             (        forth.asm):01415 (4+1)           puls    b
E9E7 5A               (        forth.asm):01416 (1)             decb
E9E8 26E5             (        forth.asm):01417 (3)             bne     @lstlop
E9EA 39               (        forth.asm):01418 (4)             rts
                      (        forth.asm):01419         
E9EB 04               (        forth.asm):01420         NCLR    fcb     4               Non-standard
E9EC 4E434C52         (        forth.asm):01421                 fcc     'NCLR'          Clear the data (normal) stack
E9F0 E9AC             (        forth.asm):01422                 fdb     LIST
E9F2 C7               (        forth.asm):01423                 RFCS
E9F3 CE0246           (        forth.asm):01424 (3)             ldu     #NSTBOT
E9F6 39               (        forth.asm):01425 (4)             rts
                      (        forth.asm):01426         
E9F7 04               (        forth.asm):01427         RCLR    fcb     4               Non-standard
E9F8 52434C52         (        forth.asm):01428                 fcc     'RCLR'          Clear the return stack
E9FC E9EB             (        forth.asm):01429                 fdb     NCLR
E9FE C7               (        forth.asm):01430                 RFCS
E9FF 8E02C6           (        forth.asm):01431 (3)             ldx     #RSTBOT
EA02 9F00             (        forth.asm):01432 (4)             stx     RSP
EA04 0F25             (        forth.asm):01433 (5)             clr     RDEPTH
EA06 39               (        forth.asm):01434 (4)             rts
                      (        forth.asm):01435         
EA07 05               (        forth.asm):01436         DEPTH   fcb     5               79-STANDARD (REQ238)
EA08 4445505448       (        forth.asm):01437                 fcc     'DEPTH'
EA0D E9F7             (        forth.asm):01438                 fdb     RCLR
EA0F C7               (        forth.asm):01439                 RFCS
EA10 CC0246           (        forth.asm):01440 (3)             ldd     #NSTBOT         Bottom data stack address
EA13 103230           (        forth.asm):01441 (4)             subr    u,d             D has the current value of the data stack ptr
EA16 1044             (        forth.asm):01442 (2)             lsrd                    divided by 2
EA18 1F01             (        forth.asm):01443 (4)             tfr     d,x
EA1A 7EE694           (        forth.asm):01444 (3)             jmp     NPUSH
                      (        forth.asm):01445         
EA1D 06               (        forth.asm):01446         CREATE  fcb     6               79-STANDARD (REQ239)
EA1E 435245415445     (        forth.asm):01447                 fcc     'CREATE'
EA24 EA07             (        forth.asm):01448                 fdb     DEPTH
EA26 C7               (        forth.asm):01449                 RFCS
EA27 BDE3BF           (        forth.asm):01450 (7)     CREAT0  jsr     LOCWRT          Code entry point returned to Y
EA2A 868E             (        forth.asm):01451 (2)             lda     #LDXOPC         LDX immediate
EA2C A7A0             (        forth.asm):01452 (4+1)           sta     ,y+
EA2E 1F21             (        forth.asm):01453 (4)             tfr     y,x
EA30 3008             (        forth.asm):01454 (4+1)           leax    8,x
EA32 AFA1             (        forth.asm):01455 (5+2)           stx     ,y++
EA34 86BD             (        forth.asm):01456 (2)             lda     #JSROPC         JSR extended
EA36 BDE435           (        forth.asm):01457 (7)             jsr     VARCON1         Compile JSR NPUSH
EA39 8639             (        forth.asm):01458 (2)             lda     #RTSOPC         RTS inherent
EA3B A7A0             (        forth.asm):01459 (4+1)           sta     ,y+
EA3D 3122             (        forth.asm):01460 (4+1)           leay    2,y             Reserve room for a possible DOES> clause
EA3F 109F08           (        forth.asm):01461 (5)     CREAT1  sty     DICEND
EA42 9E0C             (        forth.asm):01462 (4)             ldx     BDICEND         This is set by LOCWRT (was IY)
EA44 9F06             (        forth.asm):01463 (4)             stx     LSTWAD
EA46 39               (        forth.asm):01464 (4)             rts
                      (        forth.asm):01465         
EA47 C5               (        forth.asm):01466         DOES    fcb     $C5             79-STANDARD (REQ168)
EA48 444F45533E       (        forth.asm):01467                 fcc     'DOES>'
EA4D EA1D             (        forth.asm):01468                 fdb     CREATE
EA4F C7               (        forth.asm):01469                 RFCS
EA50 8EEA56           (        forth.asm):01470 (3)             ldx     #DOESEX         JSR #DOESEX is compiled (no actual return)
EA53 AF62             (        forth.asm):01471 (5+1)           stx     2,s             Set as action component
EA55 39               (        forth.asm):01472 (4)             rts
                      (        forth.asm):01473         
EA56 9E06             (        forth.asm):01474 (4)     DOESEX  ldx     LSTWAD          Header of the last dictionary entry
EA58 E680             (        forth.asm):01475 (4+1)           ldb     ,x+
EA5A C41F             (        forth.asm):01476 (2)             andb    #WRLNMSK        Extract word length
EA5C 3A               (        forth.asm):01477 (1)             abx
                      (        forth.asm):01478                 IFNE    RELFEAT
EA5D 3009             (        forth.asm):01479 (4+1)           leax    9,x             2 bytes/backlink, 1/cksum, 6 bytes code offset
                      (        forth.asm):01480                 ELSE
                      (        forth.asm):01481                 leax    8,x             2 bytes/backlink, 6 bytes code offset
                      (        forth.asm):01482                 ENDC
EA5F A684             (        forth.asm):01483 (4+0)           lda     ,x
EA61 8139             (        forth.asm):01484 (2)             cmpa    #RTSOPC         RTS inherent
EA63 2705             (        forth.asm):01485 (3)             beq     @dosex1
EA65 C60E             (        forth.asm):01486 (2)             ldb     #14             No matching CREATE
EA67 BDE61B           (        forth.asm):01487 (7)             jsr     ERRHDLR         No return
EA6A 867E             (        forth.asm):01488 (2)     @dosex1 lda     #JMPOPC         JMP extended
EA6C A780             (        forth.asm):01489 (4+1)           sta     ,x+             Overwrite RTS opcode
EA6E 3520             (        forth.asm):01490 (4+2)           puls    y
EA70 10AF84           (        forth.asm):01491 (6+0)           sty     ,x
EA73 39               (        forth.asm):01492 (4)             rts
                      (        forth.asm):01493         
EA74 87               (        forth.asm):01494         LITERAL fcb     $87             79-STANDARD (REQ215)
EA75 4C49544552414C   (        forth.asm):01495                 fcc     'LITERAL'
EA7C EA47             (        forth.asm):01496                 fdb     DOES
EA7E C7               (        forth.asm):01497                 RFCS
EA7F BDE6A2           (        forth.asm):01498 (7)             jsr     NPOP
EA82 961B             (        forth.asm):01499 (3)             lda     USTATE+1
EA84 2710             (        forth.asm):01500 (3)             beq     @nojoy          The standard defines no semantics in interp mode
EA86 109E08           (        forth.asm):01501 (5)     @comp   ldy     DICEND
EA89 868E             (        forth.asm):01502 (2)             lda     #LDXOPC         LDX immediate
EA8B BDE438           (        forth.asm):01503 (7)             jsr     VARCON2         Compile LDX #X
EA8E 109F08           (        forth.asm):01504 (5)             sty     DICEND          Update HERE
EA91 8EE694           (        forth.asm):01505 (3)             ldx     #NPUSH
EA94 AF62             (        forth.asm):01506 (5+1)           stx     2,s             Set NPUSH as action component
EA96 39               (        forth.asm):01507 (4)     @nojoy  rts
                      (        forth.asm):01508         
                      (        forth.asm):01509         * Functionally: : CONSTANT CREATE , DOES> @ ;
                      (        forth.asm):01510         * The following code produces more compact code.
EA97 08               (        forth.asm):01511         CONS    fcb     8               79-STANDARD (REQ185)
EA98 434F4E5354414E54 (        forth.asm):01512                 fcc     'CONSTANT'
EAA0 EA74             (        forth.asm):01513                 fdb     LITERAL
EAA2 C7               (        forth.asm):01514                 RFCS
EAA3 BDE6A2           (        forth.asm):01515 (7)             jsr     NPOP
EAA6 1F16             (        forth.asm):01516 (4)             tfr     x,w
EAA8 BDE3BF           (        forth.asm):01517 (7)             jsr     LOCWRT          Create dictionary entry
EAAB 1F61             (        forth.asm):01518 (4)             tfr     w,x
EAAD 868E             (        forth.asm):01519 (2)             lda     #LDXOPC         ldx immediate
EAAF BDE438           (        forth.asm):01520 (7)             jsr     VARCON2         Compile LDX #CSTVAL
EAB2 BDE433           (        forth.asm):01521 (7)             jsr     VARCON          Compile JMP NPUSH
                      (        forth.asm):01522                 IFNE    RELFEAT
EAB5 8D88             (        forth.asm):01523 (6)             bsr     CREAT1
EAB7 2059             (        forth.asm):01524                 RFXT    bra,MONITOR+10  XT for MONITOR
                      (        forth.asm):01525                 ELSE
                      (        forth.asm):01526                 bra     CREAT1
                      (        forth.asm):01527                 ENDC
                      (        forth.asm):01528         
                      (        forth.asm):01529         * Functionally: : VARIABLE CREATE 2 ALLOT ;
                      (        forth.asm):01530         * However we can save three bytes per instance with the following code.
EAB9 08               (        forth.asm):01531         VARI    fcb     8               79-STANDARD (REQ227)
EABA 5641524941424C45 (        forth.asm):01532                 fcc     'VARIABLE'
EAC2 EA97             (        forth.asm):01533                 fdb     CONS
EAC4 C7               (        forth.asm):01534                 RFCS
EAC5 BDE3BF           (        forth.asm):01535 (7)             jsr     LOCWRT
EAC8 868E             (        forth.asm):01536 (2)             lda     #LDXOPC         ldx immediate
EACA A7A0             (        forth.asm):01537 (4+1)           sta     ,y+
EACC 1F26             (        forth.asm):01538 (4)             tfr     y,w             Preserve Y (HERE)
EACE 3125             (        forth.asm):01539 (4+1)           leay    5,y             Relative variable address
EAD0 1F21             (        forth.asm):01540 (4)             tfr     y,x
EAD2 1F62             (        forth.asm):01541 (4)             tfr     w,y             Restore Y (HERE)
EAD4 AFA1             (        forth.asm):01542 (5+2)           stx     ,y++            Address field for LDX #VARADDR
EAD6 BDE433           (        forth.asm):01543 (7)             jsr     VARCON          Compile JMP NPUSH
EAD9 3122             (        forth.asm):01544 (4+1)           leay    2,y             2 ALLOT
EADB 7EEA3F           (        forth.asm):01545 (3)             jmp     CREAT1
                      (        forth.asm):01546         
EADE 09               (        forth.asm):01547         IMMED   fcb     9               79-STANDARD (REQ103)
EADF 494D4D4544494154 (        forth.asm):01548                 fcc     'IMMEDIATE'
     45
EAE8 EAB9             (        forth.asm):01549                 fdb     VARI
EAEA C7               (        forth.asm):01550                 RFCS
EAEB C680             (        forth.asm):01551 (2)             ldb     #IMDFLM
EAED 9E06             (        forth.asm):01552 (4)     IMMED1  ldx     LSTWAD
EAEF A684             (        forth.asm):01553 (4+0)           lda     ,x
EAF1 103598           (        forth.asm):01554 (4)             orr     b,a
EAF4 A784             (        forth.asm):01555 (4+0)           sta     ,x
EAF6 39               (        forth.asm):01556 (4)             rts
                      (        forth.asm):01557         
EAF7 08               (        forth.asm):01558         RSTRCT  fcb     8               Non-standard (GNU Forth)
EAF8 5245535452494354 (        forth.asm):01559                 fcc     'RESTRICT'      Make word available in compilation mode only
EB00 EADE             (        forth.asm):01560                 fdb     IMMED
EB02 C7               (        forth.asm):01561                 RFCS
EB03 C640             (        forth.asm):01562 (2)             ldb     #DEFFLM
EB05 20E6             (        forth.asm):01563 (3)             bra     IMMED1
                      (        forth.asm):01564         
                      (        forth.asm):01565                 IFNE    RELFEAT
                      (        forth.asm):01566         * This non-standard word enables checkum monitoring by ICHECK for the
                      (        forth.asm):01567         * last defined word in the dictionary. : words are monitored by default
                      (        forth.asm):01568         * and so are constants. CREATEd words require an explicit invokation of
                      (        forth.asm):01569         * MONITOR if they are to be checked for integrity.
EB07 07               (        forth.asm):01570         MONITOR fcb     7
EB08 4D4F4E49544F52   (        forth.asm):01571                 fcc     'MONITOR'       ( -- )
EB0F EAF7             (        forth.asm):01572                 fdb     RSTRCT
EB11 C7               (        forth.asm):01573                 RFCS
EB12 9E06             (        forth.asm):01574 (4)             ldx     LSTWAD          Last word header address
EB14 A684             (        forth.asm):01575 (4+0)           lda     ,x
EB16 8A20             (        forth.asm):01576 (2)             ora     #MONFLM         Set the monitored flag in the attribute field
EB18 A784             (        forth.asm):01577 (4+0)           sta     ,x
EB1A 8D08             (        forth.asm):01578 (6)             bsr     HDRSKIP         Skip the header (XT to X), clear A
EB1C 109E08           (        forth.asm):01579 (5)             ldy     DICEND          The upper code section limit (excluded)
EB1F 8D0D             (        forth.asm):01580 (6)             bsr     HDRCSUM         Current word's definition's checksum to A
EB21 A71F             (        forth.asm):01581 (4+1)           sta     -1,x            Store the computed checksum into the header
EB23 39               (        forth.asm):01582 (4)             rts
                      (        forth.asm):01583         
                      (        forth.asm):01584         * On entry, X has a word's header address. On return X has the compilation
                      (        forth.asm):01585         * address for that word (XT). A is cleared so as to initialize the checksum.
EB24 A684             (        forth.asm):01586 (4+0)   HDRSKIP lda     ,x              Word's header attribute byte to A
EB26 841F             (        forth.asm):01587 (2)             anda    #WRLNMSK        Extract the word's length
EB28 8B04             (        forth.asm):01588 (2)             adda    #4              1B attribute, 2B backlink, 1B checksum
EB2A 3086             (        forth.asm):01589 (4+1)           leax    a,x             X has the word's XT. -1,X has the orig checksum
EB2C 4F               (        forth.asm):01590 (1)             clra
EB2D 39               (        forth.asm):01591 (4)             rts
                      (        forth.asm):01592         
                      (        forth.asm):01593         * On entry X has a word's compilation address (XT). A is supposed to have been
                      (        forth.asm):01594         * previously cleared. Y has the upper bound of the code section's address
                      (        forth.asm):01595         * (excluded). On return, A will have the word's code section's checksum.
                      (        forth.asm):01596         * X is preserved.
EB2E 3410             (        forth.asm):01597 (4+2)   HDRCSUM pshs    x
EB30 A880             (        forth.asm):01598 (4+1)   @hdrcs1 eora    ,x+             Update the checksum
EB32 103712           (        forth.asm):01599 (4)             cmpr    x,y             Upper bound reached?
EB35 26F9             (        forth.asm):01600 (3)             bne     @hdrcs1         No. Process next byte in word's code section
EB37 3510             (        forth.asm):01601 (4+2)           puls    x
EB39 39               (        forth.asm):01602 (4)             rts
                      (        forth.asm):01603         
                      (        forth.asm):01604         * This non-standard word walks through the dictionary linked list and checks
                      (        forth.asm):01605         * that the words that have the MONFLM flag set in their header's attribute
                      (        forth.asm):01606         * field have a definition that still matches the checksum stored in the word's
                      (        forth.asm):01607         * header. This is meant to be used interactively, as a debugging tool, since
                      (        forth.asm):01608         * multitasking is not supported by this implementation. Therefore no status
                      (        forth.asm):01609         * value is returned. Feedback will only be provided for corrupted words, in
                      (        forth.asm):01610         * the form of a diagnostic message printed to the console.
EB3A 06               (        forth.asm):01611         ICHECK  fcb     6
EB3B 49434845434B     (        forth.asm):01612                 fcc     'ICHECK'        ( -- )
EB41 EB07             (        forth.asm):01613                 fdb     MONITOR
EB43 C7               (        forth.asm):01614                 RFCS
EB44 109E08           (        forth.asm):01615 (5)             ldy     DICEND          Upper bound for the code of the last word (exc.)
EB47 9E06             (        forth.asm):01616 (4)             ldx     LSTWAD          LAST points to the header of the last word
EB49 3410             (        forth.asm):01617 (4+2)   @icklop pshs    x               Current word's header address
EB4B A684             (        forth.asm):01618 (4+0)           lda     ,x              Word's header attribute byte to A
EB4D 8520             (        forth.asm):01619 (2)             bita    #MONFLM         Is this a monitored word?
EB4F 2726             (        forth.asm):01620 (3)             beq     @icknxt         No. Point to the next word
EB51 8DD1             (        forth.asm):01621 (6)             bsr     HDRSKIP         Skip the header (XT to X), clear A
EB53 8DD9             (        forth.asm):01622 (6)             bsr     HDRCSUM         Current word's definition's checksum to A
EB55 A11F             (        forth.asm):01623 (4+1)           cmpa    -1,x            Does the checksum match the compile time value?
EB57 271E             (        forth.asm):01624 (3)             beq     @icknxt         Yes. Point to the next word
                      (        forth.asm):01625         * Current word's definition has been modified since its original definition!
EB59 BDE1EF           (        forth.asm):01626 (7)             jsr     PUTCR
EB5C AEE4             (        forth.asm):01627 (5+0)           ldx     ,s              Current word's header address
EB5E E680             (        forth.asm):01628 (4+1)           ldb     ,x+
EB60 C41F             (        forth.asm):01629 (2)             andb    #WRLNMSK
EB62 4F               (        forth.asm):01630 (1)             clra
EB63 BDE694           (        forth.asm):01631 (7)             jsr     NPUSH           Word's name base address
EB66 1F01             (        forth.asm):01632 (4)             tfr     d,x
EB68 BDE694           (        forth.asm):01633 (7)             jsr     NPUSH           Byte count for TYPE
EB6B BDF5DB           (        forth.asm):01634                 RFXT    jsr,TYPE+7      XT for TYPE
EB6E BDF592           (        forth.asm):01635                 RFXT    jsr,SPACE+8     XT for SPACE
EB71 8EEB84           (        forth.asm):01636 (3)             ldx     #CSUMFLM
EB74 BDE1E2           (        forth.asm):01637 (7)             jsr     PUTS            Feedback for checksum failure
EB77 3510             (        forth.asm):01638 (4+2)   @icknxt puls    x               Current word's header address
EB79 1F12             (        forth.asm):01639 (4)             tfr     x,y             Point to the end of the previous word's code
EB7B 8DA7             (        forth.asm):01640 (6)             bsr     HDRSKIP         Skip the header (XT to X), clear A
EB7D AE1D             (        forth.asm):01641 (5+1)           ldx     -3,x            Point to the previous header via the backlink
EB7F 2702             (        forth.asm):01642 (3)             beq     @ickdon         We've just reached the end of the dictionary
EB81 20C6             (        forth.asm):01643 (3)             bra     @icklop
EB83 39               (        forth.asm):01644 (4)     @ickdon rts
                      (        forth.asm):01645         
EB84 696E746567726974 (        forth.asm):01646         CSUMFLM fcn     'integrity check failed'
     7920636865636B20
     6661696C656400
                      (        forth.asm):01647                 ENDC                    RELFEAT enabled
                      (        forth.asm):01648         
EB9B C2               (        forth.asm):01649         DO      fcb     $C2             79-STANDARD (REQ142)
EB9C 444F             (        forth.asm):01650                 fcc     'DO'
                      (        forth.asm):01651                 IFNE    RELFEAT
EB9E EB3A             (        forth.asm):01652                 fdb     ICHECK
                      (        forth.asm):01653                 ELSE
                      (        forth.asm):01654                 fdb     RSTRCT
                      (        forth.asm):01655                 ENDC
EBA0 C7               (        forth.asm):01656                 RFCS
EBA1 9E08             (        forth.asm):01657 (4)             ldx     DICEND
EBA3 3003             (        forth.asm):01658 (4+1)           leax    3,x
EBA5 BDE6B1           (        forth.asm):01659 (7)             jsr     RPUSH
EBA8 8EEBAE           (        forth.asm):01660 (3)             ldx     #DOEX
EBAB AF62             (        forth.asm):01661 (5+1)           stx     2,s             Set as action component
EBAD 39               (        forth.asm):01662 (4)             rts
                      (        forth.asm):01663         
EBAE BDFBE0           (        forth.asm):01664         DOEX    RFXT    jsr,SWAP+7      XT for SWAP
EBB1 BDEF1F           (        forth.asm):01665                 RFXT    jsr,TOR+5       XT for >R
EBB4 7EEF1F           (        forth.asm):01666                 RFXT    jmp,TOR+5       XT for >R
                      (        forth.asm):01667         
EBB7 C4               (        forth.asm):01668         LOOP    fcb     $C4             79-STANDARD (REQ124)
EBB8 4C4F4F50         (        forth.asm):01669                 fcc     'LOOP'
EBBC EB9B             (        forth.asm):01670                 fdb     DO
EBBE C7               (        forth.asm):01671                 RFCS
EBBF 8EEBDE           (        forth.asm):01672 (3)             ldx     #LOOPEX
EBC2 109E08           (        forth.asm):01673 (5)     LOOP1   ldy     DICEND
EBC5 86BD             (        forth.asm):01674 (2)             lda     #JSROPC         JSR extended
EBC7 BDE14F           (        forth.asm):01675 (7)             jsr     CHKRTS          Check if the final RTS can be omitted
EBCA BDE438           (        forth.asm):01676 (7)             jsr     VARCON2
EBCD 8E2503           (        forth.asm):01677 (3)             ldx     #BCSOPC         Compile "BCS *+5"
EBD0 AFA1             (        forth.asm):01678 (5+2)           stx     ,y++
EBD2 BDE6CF           (        forth.asm):01679 (7)             jsr     RPOP
EBD5 867E             (        forth.asm):01680 (2)             lda     #JMPOPC
EBD7 BDE438           (        forth.asm):01681 (7)             jsr     VARCON2         Compile "JMP R@"
EBDA 109F08           (        forth.asm):01682 (5)             sty     DICEND          No action component
EBDD 39               (        forth.asm):01683 (4)             rts
                      (        forth.asm):01684         
EBDE 8E0001           (        forth.asm):01685 (3)     LOOPEX  ldx     #1
EBE1 2011             (        forth.asm):01686 (3)             bra     PLOPEX1
                      (        forth.asm):01687         
EBE3 C5               (        forth.asm):01688         PLOOP   fcb     $C5             79-STANDARD (REQ141)
EBE4 2B4C4F4F50       (        forth.asm):01689                 fcc     '+LOOP'         The sign hdl reqs for REQ124 should apply though
EBE9 EBB7             (        forth.asm):01690                 fdb     LOOP
EBEB C7               (        forth.asm):01691                 RFCS
EBEC 8EEBF1           (        forth.asm):01692 (3)             ldx     #PLOOPEX
EBEF 20D1             (        forth.asm):01693 (3)             bra     LOOP1
                      (        forth.asm):01694         
EBF1 BDE6A2           (        forth.asm):01695 (7)     PLOOPEX jsr     NPOP
EBF4 1F16             (        forth.asm):01696 (4)     PLOPEX1 tfr     x,w             Increment to W
EBF6 BDE6CF           (        forth.asm):01697 (7)             jsr     RPOP
EBF9 1F12             (        forth.asm):01698 (4)             tfr     x,y             Index to Y
EBFB BDE6CF           (        forth.asm):01699 (7)             jsr     RPOP            Limit to X
EBFE 103062           (        forth.asm):01700 (4)             addr    w,y             Update index
EC01 114D             (        forth.asm):01701 (2)             tste
EC03 2B10             (        forth.asm):01702 (3)             bmi     @neginc
EC05 103721           (        forth.asm):01703 (4)             cmpr    y,x
EC08 2F12             (        forth.asm):01704 (3)             ble     @done           We're done. Return With CFLAG set
EC0A BDE6B1           (        forth.asm):01705 (7)     @iter   jsr     RPUSH           Push back the limit
EC0D 1F21             (        forth.asm):01706 (4)             tfr     y,x
EC0F BDE6B1           (        forth.asm):01707 (7)             jsr     RPUSH           Push back the index
EC12 1CFE             (        forth.asm):01708 (2)             andcc   #^CFLAG         Clear CFLAG
EC14 39               (        forth.asm):01709 (4)             rts
EC15 103721           (        forth.asm):01710 (4)     @neginc cmpr    y,x
EC18 27F0             (        forth.asm):01711 (3)             beq     @iter           79-STANDARD irregular historical precedent
EC1A 2BEE             (        forth.asm):01712 (3)             bmi     @iter
EC1C 1A01             (        forth.asm):01713 (2)     @done   orcc    #CFLAG          Set CFLAG
EC1E 39               (        forth.asm):01714 (4)             rts
                      (        forth.asm):01715         
EC1F 46               (        forth.asm):01716         UNLOOP  fcb     $46             ANSI (Core)
EC20 554E4C4F4F50     (        forth.asm):01717                 fcc     'UNLOOP'
EC26 EBE3             (        forth.asm):01718                 fdb     PLOOP
EC28 C7               (        forth.asm):01719                 RFCS
EC29 BDE6CF           (        forth.asm):01720 (7)             jsr     RPOP            Drop the index from the return stack
EC2C 7EE6CF           (        forth.asm):01721 (3)             jmp     RPOP            and the loop limit as well
                      (        forth.asm):01722         
EC2F C2               (        forth.asm):01723         IF      fcb     $C2             79-STANDARD (REQ210)
EC30 4946             (        forth.asm):01724                 fcc     'IF'
EC32 EC1F             (        forth.asm):01725                 fdb     UNLOOP
EC34 C7               (        forth.asm):01726                 RFCS
EC35 109E08           (        forth.asm):01727 (5)             ldy     DICEND
EC38 8EEC57           (        forth.asm):01728 (3)             ldx     #IFEX
EC3B 86BD             (        forth.asm):01729 (2)             lda     #JSROPC         JSR extended
EC3D BDE14F           (        forth.asm):01730 (7)             jsr     CHKRTS          Check if the final RTS can be omitted
EC40 BDE438           (        forth.asm):01731 (7)             jsr     VARCON2
EC43 8E2603           (        forth.asm):01732 (3)             ldx     #BNEOPC         Compile "BNE *+5"
EC46 AFA1             (        forth.asm):01733 (5+2)           stx     ,y++
EC48 867E             (        forth.asm):01734 (2)             lda     #JMPOPC         JMP extended
EC4A A7A0             (        forth.asm):01735 (4+1)           sta     ,y+
EC4C 1F21             (        forth.asm):01736 (4)             tfr     y,x
EC4E BDE6B1           (        forth.asm):01737 (7)             jsr     RPUSH
EC51 3122             (        forth.asm):01738 (4+1)           leay    2,y             Reserve 2 bytes for the jump address
EC53 109F08           (        forth.asm):01739 (5)             sty     DICEND
EC56 39               (        forth.asm):01740 (4)             rts
                      (        forth.asm):01741         
EC57 BDE6A2           (        forth.asm):01742 (7)     IFEX    jsr     NPOP
EC5A 1037C1           (        forth.asm):01743 (4)             cmpr    0,x
EC5D 39               (        forth.asm):01744 (4)             rts
                      (        forth.asm):01745         
                      (        forth.asm):01746         * Functionally equivalent to:
                      (        forth.asm):01747         * (ANSI) : UNLESS ['] 0= COMPILE, POSTPONE IF ; IMMEDIATE RESTRICT
                      (        forth.asm):01748         * or
                      (        forth.asm):01749         * (old style) : UNLESS COMPILE NOT [COMPILE] IF ; IMMEDIATE RESTRICT
EC5E C6               (        forth.asm):01750         UNLESS  fcb     $C6             Non-standard (Perl inspired)
EC5F 554E4C455353     (        forth.asm):01751                 fcc     'UNLESS'
EC65 EC2F             (        forth.asm):01752                 fdb     IF
EC67 C7               (        forth.asm):01753                 RFCS
                      (        forth.asm):01754                 IFNE    RELFEAT
EC68 8EED9B           (        forth.asm):01755 (3)             ldx     #NULP+6         XT for 0=
                      (        forth.asm):01756                 ELSE
                      (        forth.asm):01757                 ldx     #NULP+5         XT for 0=
                      (        forth.asm):01758                 ENDC
EC6B BDF060           (        forth.asm):01759 (7)             jsr     CMPCOM1
EC6E 20C5             (        forth.asm):01760                 RFXT    bra,IF+5        XT for IF
                      (        forth.asm):01761         
EC70 C4               (        forth.asm):01762         ELSE    fcb     $C4             79-STANDARD (REQ167)
EC71 454C5345         (        forth.asm):01763                 fcc     'ELSE'
EC75 EC5E             (        forth.asm):01764                 fdb     UNLESS
EC77 C7               (        forth.asm):01765                 RFCS
EC78 109E08           (        forth.asm):01766 (5)             ldy     DICEND
EC7B 867E             (        forth.asm):01767 (2)             lda     #JMPOPC         JMP extended
EC7D A7A0             (        forth.asm):01768 (4+1)           sta     ,y+
EC7F 3122             (        forth.asm):01769 (4+1)           leay    2,y
EC81 109F08           (        forth.asm):01770 (5)             sty     DICEND
EC84 BDE6CF           (        forth.asm):01771 (7)             jsr     RPOP
EC87 10AF84           (        forth.asm):01772 (6+0)           sty     ,x              Set actual ELSE jump address
EC8A 1F21             (        forth.asm):01773 (4)             tfr     y,x
EC8C 301E             (        forth.asm):01774 (4+1)           leax    -2,x
EC8E 7EE6B1           (        forth.asm):01775 (3)             jmp     RPUSH
                      (        forth.asm):01776         
EC91 C4               (        forth.asm):01777         THEN    fcb     $C4             79-STANDARD (REQ161)
EC92 5448454E         (        forth.asm):01778                 fcc     'THEN'
EC96 EC70             (        forth.asm):01779                 fdb     ELSE
EC98 C7               (        forth.asm):01780                 RFCS
EC99 109E08           (        forth.asm):01781 (5)             ldy     DICEND
EC9C BDE6CF           (        forth.asm):01782 (7)             jsr     RPOP
EC9F 10AF84           (        forth.asm):01783 (6+0)           sty     ,x
ECA2 39               (        forth.asm):01784 (4)             rts
                      (        forth.asm):01785         
ECA3 01               (        forth.asm):01786         EQ      fcb     1               79-STANDARD (REQ173)
ECA4 3D               (        forth.asm):01787                 fcc     '='             ( N1 N2 -- FLAG )
ECA5 EC91             (        forth.asm):01788                 fdb     THEN
ECA7 C7               (        forth.asm):01789                 RFCS
ECA8 CC0242BDE30E     (        forth.asm):01790                 MINDREQ 2
ECAE 10ECC4           (        forth.asm):01791 (8+0)           ldq     ,u              D:W has N2:N1
ECB1 3342             (        forth.asm):01792 (4+1)           leau    2,u             Drop one cell from the user stack
ECB3 1FC1             (        forth.asm):01793 (4)             tfr     0,x
ECB5 103760           (        forth.asm):01794 (4)             cmpr    w,d
ECB8 2602             (        forth.asm):01795 (3)             bne     @eq1
ECBA 3001             (        forth.asm):01796 (4+1)           leax    1,x
ECBC AFC4             (        forth.asm):01797 (5+0)   @eq1    stx     ,u              Store in place to FLAG
ECBE 39               (        forth.asm):01798 (4)             rts
                      (        forth.asm):01799         
ECBF 02               (        forth.asm):01800         DIFF    fcb     2               79-STANDARD (REF)
ECC0 3C3E             (        forth.asm):01801                 fcc     '<>'            ( N1 N2 -- FLAG )
ECC2 ECA3             (        forth.asm):01802                 fdb     EQ
ECC4 C7               (        forth.asm):01803                 RFCS
ECC5 CC0242BDE30E     (        forth.asm):01804                 MINDREQ 2
ECCB 10ECC4           (        forth.asm):01805 (8+0)           ldq     ,u              D:W has N2:N1
ECCE 3342             (        forth.asm):01806 (4+1)           leau    2,u             Drop one cell from the user stack
ECD0 1FC1             (        forth.asm):01807 (4)             tfr     0,x
ECD2 103760           (        forth.asm):01808 (4)             cmpr    w,d
ECD5 2702             (        forth.asm):01809 (3)             beq     @diff1
ECD7 3001             (        forth.asm):01810 (4+1)           leax    1,x
ECD9 AFC4             (        forth.asm):01811 (5+0)   @diff1  stx     ,u              Store in place to FLAG
ECDB 39               (        forth.asm):01812 (4)             rts
                      (        forth.asm):01813         
ECDC 02               (        forth.asm):01814         SINFEQ  fcb     2               Non-standard (Not even ANSI!)
ECDD 3C3D             (        forth.asm):01815                 fcc     '<='            Required for the ORNL fixed sieve benchmark
ECDF ECBF             (        forth.asm):01816                 fdb     DIFF
ECE1 C7               (        forth.asm):01817                 RFCS
ECE2 CC0242BDE30E     (        forth.asm):01818                 MINDREQ 2               At least two cells need to be stacked up
ECE8 10AEC4           (        forth.asm):01819 (6+0)           ldy     ,u
ECEB AE42             (        forth.asm):01820 (5+1)           ldx     2,u
ECED 104F             (        forth.asm):01821 (2)             clrd
ECEF 103721           (        forth.asm):01822 (4)             cmpr    y,x
ECF2 2E02             (        forth.asm):01823 (3)             bgt     @sinfq1
ECF4 104C             (        forth.asm):01824 (2)             incd
ECF6 3342             (        forth.asm):01825 (4+1)   @sinfq1 leau    2,u             Drop one cell
ECF8 EDC4             (        forth.asm):01826 (5+0)           std     ,u
ECFA 39               (        forth.asm):01827 (4)             rts
                      (        forth.asm):01828         
                      (        forth.asm):01829                 IFNE    DEBUG
ECFB                  (        forth.asm):01830         CC      fcb     2               Non-standard. Used for debugging
                      (        forth.asm):01831                 fcc     'CC'
                      (        forth.asm):01832                 fdb     SINFEQ
                      (        forth.asm):01833                 RFCS
                      (        forth.asm):01834                 ldx     CCREG
                      (        forth.asm):01835                 jmp     NPUSH
                      (        forth.asm):01836                 ENDC
                      (        forth.asm):01837         
ECFB 03               (        forth.asm):01838         XOR     fcb     3               79-STANDARD (REQ179)
ECFC 584F52           (        forth.asm):01839                 fcc     'XOR'
                      (        forth.asm):01840                 IFNE    DEBUG
                      (        forth.asm):01841                 fdb     CC
                      (        forth.asm):01842                 ELSE
ECFF ECDC             (        forth.asm):01843                 fdb     SINFEQ
                      (        forth.asm):01844                 ENDC
ED01 C7               (        forth.asm):01845                 RFCS
ED02 CC0242BDE30E     (        forth.asm):01846                 MINDREQ 2
ED08 ECC4             (        forth.asm):01847 (5+0)           ldd     ,u
ED0A 10A642           (        forth.asm):01848 (6+1)           ldw     2,u
ED0D 103660           (        forth.asm):01849 (4)             eorr    w,d
ED10 3342             (        forth.asm):01850 (4+1)   XOR1    leau    2,u
ED12 EDC4             (        forth.asm):01851 (5+0)           std     ,u
ED14 39               (        forth.asm):01852 (4)             rts
                      (        forth.asm):01853         
ED15 02               (        forth.asm):01854         OR      fcb     2               79-STANDARD (REQ223)
ED16 4F52             (        forth.asm):01855                 fcc     'OR'
ED18 ECFB             (        forth.asm):01856                 fdb     XOR
ED1A C7               (        forth.asm):01857                 RFCS
ED1B CC0242BDE30E     (        forth.asm):01858                 MINDREQ 2
ED21 ECC4             (        forth.asm):01859 (5+0)           ldd     ,u
ED23 10A642           (        forth.asm):01860 (6+1)           ldw     2,u
ED26 103560           (        forth.asm):01861 (4)             orr     w,d
ED29 20E5             (        forth.asm):01862 (3)             bra     XOR1
                      (        forth.asm):01863         
ED2B 03               (        forth.asm):01864         AND     fcb     3               79-STANDARD (REQ183)
ED2C 414E44           (        forth.asm):01865                 fcc     'AND'
ED2F ED15             (        forth.asm):01866                 fdb     OR
ED31 C7               (        forth.asm):01867                 RFCS
ED32 CC0242BDE30E     (        forth.asm):01868                 MINDREQ 2
ED38 ECC4             (        forth.asm):01869 (5+0)           ldd     ,u
ED3A 10A642           (        forth.asm):01870 (6+1)           ldw     2,u
ED3D 103460           (        forth.asm):01871 (4)             andr    w,d
ED40 20CE             (        forth.asm):01872 (3)             bra     XOR1
                      (        forth.asm):01873         
ED42 03               (        forth.asm):01874         COM     fcb     3               79-STANDARD (REF)
ED43 434F4D           (        forth.asm):01875                 fcc     'COM'
ED46 ED2B             (        forth.asm):01876                 fdb     AND
ED48 C7               (        forth.asm):01877                 RFCS
ED49 BDE6A2           (        forth.asm):01878 (7)     COM0    jsr     NPOP
ED4C 1F10             (        forth.asm):01879 (4)             tfr     x,d
ED4E 1043             (        forth.asm):01880 (2)             comd
ED50 1F01             (        forth.asm):01881 (4)             tfr     d,x
ED52 3610             (        forth.asm):01882                 UCNPUSH
ED54 39               (        forth.asm):01883 (4)             rts
                      (        forth.asm):01884         
ED55 06               (        forth.asm):01885         INVERT  fcb     6               ANSI (Core)
ED56 494E56455254     (        forth.asm):01886                 fcc     'INVERT'
ED5C ED42             (        forth.asm):01887                 fdb     COM
ED5E C7               (        forth.asm):01888                 RFCS
ED5F 20E8             (        forth.asm):01889 (3)             bra     COM0
                      (        forth.asm):01890         
ED61 02               (        forth.asm):01891         ZGREAT  fcb     2               79-STANDARD (REQ118)
ED62 303E             (        forth.asm):01892                 fcc     '0>'
ED64 ED55             (        forth.asm):01893                 fdb     INVERT
ED66 C7               (        forth.asm):01894                 RFCS
ED67 BDE6A2           (        forth.asm):01895 (7)             jsr     NPOP
ED6A 1F10             (        forth.asm):01896 (4)             tfr     x,d
ED6C 104D             (        forth.asm):01897 (2)             tstd
ED6E 2F06             (        forth.asm):01898 (3)             ble     @zgrt1
ED70 8E0001           (        forth.asm):01899 (3)             ldx     #1
ED73 3610             (        forth.asm):01900                 UCNPUSH
ED75 39               (        forth.asm):01901 (4)             rts
ED76 1FC1             (        forth.asm):01902 (4)     @zgrt1  tfr     0,x
ED78 3610             (        forth.asm):01903                 UCNPUSH
ED7A 39               (        forth.asm):01904 (4)             rts
                      (        forth.asm):01905         
ED7B 02               (        forth.asm):01906         ZLESS   fcb     2               79-STANDARD (REQ144)
ED7C 303C             (        forth.asm):01907                 fcc     '0<'
ED7E ED61             (        forth.asm):01908                 fdb     ZGREAT
ED80 C7               (        forth.asm):01909                 RFCS
ED81 BDE6A2           (        forth.asm):01910 (7)             jsr     NPOP
ED84 1F10             (        forth.asm):01911 (4)             tfr     x,d
ED86 104D             (        forth.asm):01912 (2)             tstd
ED88 2C06             (        forth.asm):01913 (3)             bge     @zlss1
ED8A 8E0001           (        forth.asm):01914 (3)             ldx     #1
ED8D 3610             (        forth.asm):01915                 UCNPUSH
ED8F 39               (        forth.asm):01916 (4)             rts
ED90 1FC1             (        forth.asm):01917 (4)     @zlss1  tfr     0,x
ED92 3610             (        forth.asm):01918                 UCNPUSH
ED94 39               (        forth.asm):01919 (4)             rts
                      (        forth.asm):01920         
ED95 02               (        forth.asm):01921         NULP    fcb     2               79-STANDARD (REQ180)
ED96 303D             (        forth.asm):01922                 fcc     '0='
ED98 ED7B             (        forth.asm):01923                 fdb     ZLESS
ED9A C7               (        forth.asm):01924                 RFCS
ED9B BDE6A2           (        forth.asm):01925 (7)             jsr     NPOP
ED9E 1F10             (        forth.asm):01926 (4)             tfr     x,d
EDA0 1FC1             (        forth.asm):01927 (4)             tfr     0,x
EDA2 104D             (        forth.asm):01928 (2)             tstd
EDA4 2703             (        forth.asm):01929 (3)             beq     @nulp2
EDA6 3610             (        forth.asm):01930         @nulp1  UCNPUSH
EDA8 39               (        forth.asm):01931 (4)             rts
EDA9 3001             (        forth.asm):01932 (4+1)   @nulp2  leax    1,x
EDAB 20F9             (        forth.asm):01933 (3)             bra     @nulp1
                      (        forth.asm):01934         
EDAD 03               (        forth.asm):01935         NOT     fcb     3               79-STANDARD (REQ165)
EDAE 4E4F54           (        forth.asm):01936                 fcc     'NOT'
EDB1 ED95             (        forth.asm):01937                 fdb     NULP
EDB3 C7               (        forth.asm):01938                 RFCS
EDB4 20E5             (        forth.asm):01939                 RFXT    bra,NULP+5      XT for 0=
                      (        forth.asm):01940         
EDB6 02               (        forth.asm):01941         USUP    fcb     2               ANSI (Core Ext)
EDB7 553E             (        forth.asm):01942                 fcc     'U>'
EDB9 EDAD             (        forth.asm):01943                 fdb     NOT
EDBB C7               (        forth.asm):01944                 RFCS
EDBC BDE43D           (        forth.asm):01945 (7)             jsr     CMP2
EDBF 2302             (        forth.asm):01946 (3)             bls     @usup1
EDC1 3001             (        forth.asm):01947 (4+1)           leax    1,x
EDC3 3610             (        forth.asm):01948         @usup1  UCNPUSH
EDC5 39               (        forth.asm):01949 (4)             rts
                      (        forth.asm):01950         
EDC6 02               (        forth.asm):01951         UINF    fcb     2               79-STANDARD (REQ150)
EDC7 553C             (        forth.asm):01952                 fcc     'U<'
EDC9 EDB6             (        forth.asm):01953                 fdb     USUP
EDCB C7               (        forth.asm):01954                 RFCS
EDCC BDE43D           (        forth.asm):01955 (7)             jsr     CMP2
EDCF 2402             (        forth.asm):01956 (3)             bhs     @uinf1          Z is set
EDD1 3001             (        forth.asm):01957 (4+1)           leax    1,x
EDD3 3610             (        forth.asm):01958         @uinf1  UCNPUSH
EDD5 39               (        forth.asm):01959 (4)             rts
                      (        forth.asm):01960         
                      (        forth.asm):01961         * Functionally: : WITHIN OVER - >R - R> U< ;
EDD6 06               (        forth.asm):01962         WITHIN  fcb     6               ANSI (Core)
EDD7 57495448494E     (        forth.asm):01963                 fcc     'WITHIN'        ( n1 n2 n3 -- flag )
EDDD EDC6             (        forth.asm):01964                 fdb     UINF
EDDF C7               (        forth.asm):01965                 RFCS
EDE0 BDFC29           (        forth.asm):01966                 RFXT    jsr,OVER+7      XT for OVER
EDE3 BDF7AB           (        forth.asm):01967                 RFXT    jsr,MINUS+4     XT for -
EDE6 BDEF1F           (        forth.asm):01968                 RFXT    jsr,TOR+5       XT for >R
EDE9 BDF7AB           (        forth.asm):01969                 RFXT    jsr,MINUS+4     XT for -
EDEC BDEF13           (        forth.asm):01970                 RFXT    jsr,RFROM+5     XT for R>
EDEF 20DB             (        forth.asm):01971                 RFXT    bra,UINF+5      XT for U<
                      (        forth.asm):01972         
EDF1 01               (        forth.asm):01973         SUP     fcb     1               79-STANDARD (REQ102)
EDF2 3E               (        forth.asm):01974                 fcc     '>'
EDF3 EDD6             (        forth.asm):01975                 fdb     WITHIN
EDF5 C7               (        forth.asm):01976                 RFCS
EDF6 BDE43D           (        forth.asm):01977 (7)             jsr     CMP2
EDF9 2F02             (        forth.asm):01978 (3)             ble     @sup1
EDFB 3001             (        forth.asm):01979 (4+1)           leax    1,x
EDFD 3610             (        forth.asm):01980         @sup1   UCNPUSH
EDFF 39               (        forth.asm):01981 (4)             rts
                      (        forth.asm):01982         
EE00 01               (        forth.asm):01983         INF     fcb     1               79-STANDARD (REQ139)
EE01 3C               (        forth.asm):01984                 fcc     '<'
EE02 EDF1             (        forth.asm):01985                 fdb     SUP
EE04 C7               (        forth.asm):01986                 RFCS
EE05 BDE43D           (        forth.asm):01987 (7)             jsr     CMP2
EE08 2C02             (        forth.asm):01988 (3)             bge     @inf1
EE0A 3001             (        forth.asm):01989 (4+1)           leax    1,x
EE0C 3610             (        forth.asm):01990         @inf1   UCNPUSH
EE0E 39               (        forth.asm):01991 (4)             rts
                      (        forth.asm):01992          
EE0F 03               (        forth.asm):01993         MAX     fcb     3               79-STANDARD (REQ218)
EE10 4D4158           (        forth.asm):01994                 fcc     'MAX'
EE13 EE00             (        forth.asm):01995                 fdb     INF
EE15 C7               (        forth.asm):01996                 RFCS
EE16 BDE6A2           (        forth.asm):01997 (7)             jsr     NPOP
EE19 1F12             (        forth.asm):01998 (4)             tfr     x,y
EE1B BDE6A2           (        forth.asm):01999 (7)             jsr     NPOP
EE1E 103721           (        forth.asm):02000 (4)             cmpr    y,x
EE21 2C02             (        forth.asm):02001 (3)             bge     @pshrv1
EE23 1F21             (        forth.asm):02002 (4)             tfr     y,x
EE25 3610             (        forth.asm):02003         @pshrv1 UCNPUSH
EE27 39               (        forth.asm):02004 (4)             rts
                      (        forth.asm):02005         
EE28 03               (        forth.asm):02006         MIN     fcb     3               79-STANDARD (REQ127)
EE29 4D494E           (        forth.asm):02007                 fcc     'MIN'
EE2C EE0F             (        forth.asm):02008                 fdb     MAX
EE2E C7               (        forth.asm):02009                 RFCS
EE2F BDE6A2           (        forth.asm):02010 (7)             jsr     NPOP
EE32 1F12             (        forth.asm):02011 (4)             tfr     x,y
EE34 BDE6A2           (        forth.asm):02012 (7)             jsr     NPOP
EE37 103721           (        forth.asm):02013 (4)             cmpr    y,x
EE3A 2F02             (        forth.asm):02014 (3)             ble     @pshrv2
EE3C 1F21             (        forth.asm):02015 (4)             tfr     y,x
EE3E 3610             (        forth.asm):02016         @pshrv2 UCNPUSH
EE40 39               (        forth.asm):02017 (4)             rts
                      (        forth.asm):02018         
EE41 03               (        forth.asm):02019         ABS     fcb     3               79-STANDARD (REQ108)
EE42 414253           (        forth.asm):02020                 fcc     'ABS'
EE45 EE28             (        forth.asm):02021                 fdb     MIN
EE47 C7               (        forth.asm):02022                 RFCS
EE48 BDE6A2           (        forth.asm):02023 (7)             jsr     NPOP
EE4B 1F10             (        forth.asm):02024 (4)             tfr     x,d
EE4D 104D             (        forth.asm):02025 (2)             tstd
EE4F 2A04             (        forth.asm):02026 (3)             bpl     @abs1
EE51 1040             (        forth.asm):02027 (2)             negd
EE53 1F01             (        forth.asm):02028 (4)             tfr     d,x
EE55 3610             (        forth.asm):02029         @abs1   UCNPUSH
EE57 39               (        forth.asm):02030 (4)             rts
                      (        forth.asm):02031         
EE58 06               (        forth.asm):02032         NEGATE  fcb     6               79-STANDARD (REQ177)
EE59 4E4547415445     (        forth.asm):02033                 fcc     'NEGATE'
EE5F EE41             (        forth.asm):02034                 fdb     ABS
EE61 C7               (        forth.asm):02035                 RFCS
EE62 CC0244BDE30E     (        forth.asm):02036                 MINDREQ 1               One cell needs to be stacked up
EE68 ECC4             (        forth.asm):02037 (5+0)           ldd     ,u
EE6A 1040             (        forth.asm):02038 (2)             negd
EE6C EDC4             (        forth.asm):02039 (5+0)           std     ,u
EE6E 39               (        forth.asm):02040 (4)             rts
                      (        forth.asm):02041         
EE6F C5               (        forth.asm):02042         BEGIN   fcb     $C5             79-STANDARD (REQ147)
EE70 424547494E       (        forth.asm):02043                 fcc     'BEGIN'
EE75 EE58             (        forth.asm):02044                 fdb     NEGATE
EE77 C7               (        forth.asm):02045                 RFCS
EE78 9E08             (        forth.asm):02046 (4)             ldx     DICEND
EE7A 7EE6B1           (        forth.asm):02047 (3)             jmp     RPUSH
                      (        forth.asm):02048         
EE7D C5               (        forth.asm):02049         AGAIN   fcb     $C5             79-STANDARD (REF114)
EE7E 414741494E       (        forth.asm):02050                 fcc     'AGAIN'
EE83 EE6F             (        forth.asm):02051                 fdb     BEGIN
EE85 C7               (        forth.asm):02052                 RFCS
EE86 BDE6CF           (        forth.asm):02053 (7)             jsr     RPOP
EE89 1F12             (        forth.asm):02054 (4)             tfr     x,y
EE8B 9E08             (        forth.asm):02055 (4)             ldx     DICEND
EE8D 867E             (        forth.asm):02056 (2)             lda     #JMPOPC         JMP extended
EE8F A780             (        forth.asm):02057 (4+1)           sta     ,x+
EE91 10AF81           (        forth.asm):02058 (6+2)           sty     ,x++
EE94 9F08             (        forth.asm):02059 (4)             stx     DICEND
EE96 8602             (        forth.asm):02060 (2)             lda     #2
EE98 9727             (        forth.asm):02061 (3)             sta     RTSREMV         Trigger the RTS removal optimization
EE9A 39               (        forth.asm):02062 (4)             rts
                      (        forth.asm):02063         
                      (        forth.asm):02064         # The standard does not require this as being immediate but I do.
EE9B C4               (        forth.asm):02065         EXIT    fcb     $C4             79-STANDARD (REQ117)
EE9C 45584954         (        forth.asm):02066                 fcc     'EXIT'
EEA0 EE7D             (        forth.asm):02067                 fdb     AGAIN
EEA2 C7               (        forth.asm):02068                 RFCS
EEA3 9E08             (        forth.asm):02069 (4)             ldx     DICEND
EEA5 8639             (        forth.asm):02070 (2)             lda     #RTSOPC         RTS inherent
EEA7 A780             (        forth.asm):02071 (4+1)           sta     ,x+
EEA9 9F08             (        forth.asm):02072 (4)             stx     DICEND
EEAB 39               (        forth.asm):02073 (4)             rts
                      (        forth.asm):02074         
EEAC C5               (        forth.asm):02075         UNTIL   fcb     $C5             79-STANDARD (REQ237)
EEAD 554E54494C       (        forth.asm):02076                 fcc     'UNTIL'
EEB2 EE9B             (        forth.asm):02077                 fdb     EXIT
EEB4 C7               (        forth.asm):02078                 RFCS
EEB5 109E08           (        forth.asm):02079 (5)             ldy     DICEND
EEB8 86BD             (        forth.asm):02080 (2)             lda     #JSROPC         JSR extended
EEBA 8EEC57           (        forth.asm):02081 (3)             ldx     #IFEX
EEBD BDE14F           (        forth.asm):02082 (7)             jsr     CHKRTS          Check if the final RTS can be omitted
EEC0 BDE438           (        forth.asm):02083 (7)             jsr     VARCON2
EEC3 8E2603           (        forth.asm):02084 (3)             ldx     #BNEOPC         Compile "BNE *+5"
EEC6 AFA1             (        forth.asm):02085 (5+2)           stx     ,y++
EEC8 867E             (        forth.asm):02086 (2)             lda     #JMPOPC         JMP extended
EECA A7A0             (        forth.asm):02087 (4+1)           sta     ,y+
EECC BDE6CF           (        forth.asm):02088 (7)             jsr     RPOP
EECF AFA1             (        forth.asm):02089 (5+2)           stx     ,y++
EED1 109F08           (        forth.asm):02090 (5)             sty     DICEND
EED4 39               (        forth.asm):02091 (4)             rts
                      (        forth.asm):02092         
EED5 C3               (        forth.asm):02093         END     fcb     $C3             79-STANDARD (REF224)
EED6 454E44           (        forth.asm):02094                 fcc     'END'
EED9 EEAC             (        forth.asm):02095                 fdb     UNTIL
EEDB C7               (        forth.asm):02096                 RFCS
EEDC 20D7             (        forth.asm):02097                 RFXT    bra,UNTIL+8     XT for UNTIL
                      (        forth.asm):02098         
EEDE C5               (        forth.asm):02099         WHILE   fcb     $C5             79-STANDARD (REQ149)
EEDF 5748494C45       (        forth.asm):02100                 fcc     'WHILE'
EEE4 EED5             (        forth.asm):02101                 fdb     END
EEE6 C7               (        forth.asm):02102                 RFCS
EEE7 7EEC35           (        forth.asm):02103                 RFXT    jmp,IF+5        XT for IF
                      (        forth.asm):02104         
EEEA C6               (        forth.asm):02105         REPEAT  fcb     $C6             79-STANDARD (REQ120)
EEEB 524550454154     (        forth.asm):02106                 fcc     'REPEAT'
EEF1 EEDE             (        forth.asm):02107                 fdb     WHILE
EEF3 C7               (        forth.asm):02108                 RFCS
EEF4 BDE6CF           (        forth.asm):02109 (7)             jsr     RPOP
EEF7 3410             (        forth.asm):02110 (4+2)           pshs    x
EEF9 BDE6CF           (        forth.asm):02111 (7)             jsr     RPOP
EEFC 109E08           (        forth.asm):02112 (5)             ldy     DICEND
EEFF 867E             (        forth.asm):02113 (2)             lda     #JMPOPC         JMP extended
EF01 BDE438           (        forth.asm):02114 (7)             jsr     VARCON2
EF04 3510             (        forth.asm):02115 (4+2)           puls    x
EF06 10AF84           (        forth.asm):02116 (6+0)           sty     ,x
EF09 109F08           (        forth.asm):02117 (5)             sty     DICEND
EF0C 39               (        forth.asm):02118 (4)             rts
                      (        forth.asm):02119         
EF0D 42               (        forth.asm):02120         RFROM   fcb     $42             79-STANDARD (REQ110)
EF0E 523E             (        forth.asm):02121                 fcc     'R>'
EF10 EEEA             (        forth.asm):02122                 fdb     REPEAT
EF12 C7               (        forth.asm):02123                 RFCS
EF13 BDE6CF           (        forth.asm):02124 (7)             jsr     RPOP
EF16 7EE694           (        forth.asm):02125 (3)             jmp     NPUSH
                      (        forth.asm):02126         
EF19 42               (        forth.asm):02127         TOR     fcb     $42             79-STANDARD (REQ200)
EF1A 3E52             (        forth.asm):02128                 fcc     '>R'
EF1C EF0D             (        forth.asm):02129                 fdb     RFROM
EF1E C7               (        forth.asm):02130                 RFCS
EF1F BDE6A2           (        forth.asm):02131 (7)             jsr     NPOP
EF22 7EE6B1           (        forth.asm):02132 (3)             jmp     RPUSH
                      (        forth.asm):02133         
EF25 45               (        forth.asm):02134         LEAVE   fcb     $45             79-STANDARD (REQ213)
EF26 4C45415645       (        forth.asm):02135                 fcc     'LEAVE'
EF2B EF19             (        forth.asm):02136                 fdb     TOR
EF2D C7               (        forth.asm):02137                 RFCS
EF2E BDE6CF           (        forth.asm):02138 (7)             jsr     RPOP
EF31 BDE6CF           (        forth.asm):02139 (7)             jsr     RPOP
EF34 BDE6B1           (        forth.asm):02140 (7)             jsr     RPUSH
EF37 7EE6B1           (        forth.asm):02141 (3)             jmp     RPUSH
                      (        forth.asm):02142         
EF3A 41               (        forth.asm):02143         INDI    fcb     $41             79-STANDARD (REQ136)
EF3B 49               (        forth.asm):02144                 fcc     'I'
EF3C EF25             (        forth.asm):02145                 fdb     LEAVE
EF3E C7               (        forth.asm):02146                 RFCS
EF3F C601             (        forth.asm):02147 (2)             ldb     #1              1 means top of the stack
EF41 9625             (        forth.asm):02148 (3)     RPICKN  lda     RDEPTH
EF43 103798           (        forth.asm):02149 (4)             cmpr    b,a
EF46 250A             (        forth.asm):02150 (3)             bcs     @rpick1
EF48 9E00             (        forth.asm):02151 (4)             ldx     RSP
EF4A 5A               (        forth.asm):02152 (1)             decb                    Minus 1, unlike in the Z80 implementation
EF4B 58               (        forth.asm):02153 (1)             lslb                    Times 2
EF4C 3A               (        forth.asm):02154 (1)             abx
EF4D AE84             (        forth.asm):02155 (5+0)           ldx     ,x
EF4F 7EE694           (        forth.asm):02156 (3)             jmp     NPUSH
EF52 C608             (        forth.asm):02157 (2)     @rpick1 ldb     #8              Return stack underflow
EF54 BDE61B           (        forth.asm):02158 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02159         
EF57 42               (        forth.asm):02160         RFETCH  fcb     $42             79-STANDARD (REQ228)
EF58 5240             (        forth.asm):02161                 fcc     'R@'
EF5A EF3A             (        forth.asm):02162                 fdb     INDI
EF5C C7               (        forth.asm):02163                 RFCS
EF5D 20E0             (        forth.asm):02164                 RFXT    bra,INDI+4      XT for I
                      (        forth.asm):02165         
EF5F 42               (        forth.asm):02166         INDIP   fcb     $42             79-STANDARD (REF)
EF60 4927             (        forth.asm):02167                 fdb     $4927
EF62 EF57             (        forth.asm):02168                 fdb     RFETCH
EF64 C7               (        forth.asm):02169                 RFCS
EF65 C602             (        forth.asm):02170 (2)             ldb     #2
EF67 20D8             (        forth.asm):02171 (3)             bra     RPICKN
                      (        forth.asm):02172         
EF69 41               (        forth.asm):02173         INDJ    fcb     $41             79-STANDARD (REQ225)
EF6A 4A               (        forth.asm):02174                 fcc     'J'
EF6B EF5F             (        forth.asm):02175                 fdb     INDIP
EF6D C7               (        forth.asm):02176                 RFCS
EF6E C603             (        forth.asm):02177 (2)             ldb     #3
EF70 20CF             (        forth.asm):02178 (3)             bra     RPICKN
                      (        forth.asm):02179         
EF72 42               (        forth.asm):02180         INDJP   fcb     $42             Non-standard
EF73 4A27             (        forth.asm):02181                 fdb     $4A27
EF75 EF69             (        forth.asm):02182                 fdb     INDJ
EF77 C7               (        forth.asm):02183                 RFCS
EF78 C604             (        forth.asm):02184 (2)             ldb     #4
EF7A 20C5             (        forth.asm):02185 (3)             bra     RPICKN
                      (        forth.asm):02186         
EF7C 41               (        forth.asm):02187         INDK    fcb     $41             79-STANDARD (REF)
EF7D 4B               (        forth.asm):02188                 fcc     'K'
EF7E EF72             (        forth.asm):02189                 fdb     INDJP
EF80 C7               (        forth.asm):02190                 RFCS
EF81 C605             (        forth.asm):02191 (2)             ldb     #5
EF83 20BC             (        forth.asm):02192 (3)             bra     RPICKN
                      (        forth.asm):02193         
EF85 04               (        forth.asm):02194         QUIT    fcb     4               79-STANDARD (REQ211)
EF86 51554954         (        forth.asm):02195                 fcc     'QUIT'
EF8A EF7C             (        forth.asm):02196                 fdb     INDK
EF8C C7               (        forth.asm):02197                 RFCS
EF8D 0F1B             (        forth.asm):02198 (5)             clr     USTATE+1
EF8F BDE9FF           (        forth.asm):02199                 RFXT    jsr,RCLR+7      XT for RCLR
EF92 10CE8000         (        forth.asm):02200 (4)             lds     #RAMSTRT+RAMSIZE Reset system stack pointer
EF96 BDE1EF           (        forth.asm):02201 (7)             jsr     PUTCR
EF99 7EE0A8           (        forth.asm):02202 (3)             jmp     INTERP
                      (        forth.asm):02203         
EF9C 05               (        forth.asm):02204         ABORT   fcb     5               79-STANDARD (REQ101)
EF9D 41424F5254       (        forth.asm):02205                 fcc     'ABORT'
EFA2 EF85             (        forth.asm):02206                 fdb     QUIT
EFA4 C7               (        forth.asm):02207                 RFCS
EFA5 BDE9F3           (        forth.asm):02208                 RFXT    jsr,NCLR+7      XT for NCLR
EFA8 BDE9FF           (        forth.asm):02209                 RFXT    jsr,RCLR+7      XT for RCLR
EFAB C603             (        forth.asm):02210 (2)             ldb     #3
EFAD BDE61B           (        forth.asm):02211 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02212         
EFB0 04               (        forth.asm):02213         FIND    fcb     4               79-STANDARD (REQ203)
EFB1 46494E44         (        forth.asm):02214                 fcc     'FIND'          ( -- XT )
EFB5 EF9C             (        forth.asm):02215                 fdb     ABORT
EFB7 C7               (        forth.asm):02216                 RFCS
EFB8 1FC2             (        forth.asm):02217 (4)             tfr     0,y             Default return value is zero
EFBA BDE71B           (        forth.asm):02218 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
EFBD 6D84             (        forth.asm):02219 (5+0)           tst     ,x
EFBF 270E             (        forth.asm):02220 (3)             beq     @find1
EFC1 BDE287           (        forth.asm):02221 (7)             jsr     SCNSTOK
EFC4 2709             (        forth.asm):02222 (3)             beq     @find1
EFC6 BDE362           (        forth.asm):02223 (7)             jsr     SWDIC
EFC9 DC04             (        forth.asm):02224 (4)             ldd     TOKENEP
EFCB 9322             (        forth.asm):02225 (4)             subd    BSBFADR
EFCD DD1C             (        forth.asm):02226 (4)             std     UTOIN           Derive >IN from TOKENEP
EFCF 1F21             (        forth.asm):02227 (4)     @find1  tfr     y,x
EFD1 7EE694           (        forth.asm):02228 (3)             jmp     NPUSH
                      (        forth.asm):02229         
EFD4 01               (        forth.asm):02230         RBRACK  fcb     1               79-STANDARD (REQ126)
EFD5 5D               (        forth.asm):02231                 fcc     ']'
EFD6 EFB0             (        forth.asm):02232                 fdb     FIND
EFD8 C7               (        forth.asm):02233                 RFCS
EFD9 8601             (        forth.asm):02234 (2)             lda     #1
EFDB 971B             (        forth.asm):02235 (3)             sta     USTATE+1
EFDD 39               (        forth.asm):02236 (4)             rts
                      (        forth.asm):02237         
                      (        forth.asm):02238         * Note: the standard does not mandate that this primitive be executed in
                      (        forth.asm):02239         * definitions only. IMHO, it ought to, Therefore I am forcing the C bit here.
EFDE C1               (        forth.asm):02240         LBRACK  fcb     $C1             79-STANDARD (REQ125)
EFDF 5B               (        forth.asm):02241                 fcc     '['
EFE0 EFD4             (        forth.asm):02242                 fdb     RBRACK
EFE2 C7               (        forth.asm):02243                 RFCS
EFE3 0F1B             (        forth.asm):02244 (5)             clr     USTATE+1
EFE5 39               (        forth.asm):02245 (4)             rts
                      (        forth.asm):02246         
EFE6 C9               (        forth.asm):02247         BKCOMP  fcb     $C9             79-STANDARD (REQ179)
EFE7 5B434F4D50494C45 (        forth.asm):02248                 fcc     '[COMPILE]'
     5D
EFF0 EFDE             (        forth.asm):02249                 fdb     LBRACK
EFF2 C7               (        forth.asm):02250                 RFCS
EFF3 BDE71B           (        forth.asm):02251 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
EFF6 6D84             (        forth.asm):02252 (5+0)           tst     ,x
EFF8 2605             (        forth.asm):02253 (3)             bne     @bkcmp2
EFFA C605             (        forth.asm):02254 (2)     @bkcmp1 ldb     #5              Missing word name
EFFC BDE61B           (        forth.asm):02255 (7)             jsr     ERRHDLR         No return
EFFF BDE287           (        forth.asm):02256 (7)     @bkcmp2 jsr     SCNSTOK
F002 27F6             (        forth.asm):02257 (3)             beq     @bkcmp1
F004 BDE362           (        forth.asm):02258 (7)             jsr     SWDIC
F007 2607             (        forth.asm):02259 (3)             bne     @bkcmp3         Word found. Code address returned in Y
F009 9E02             (        forth.asm):02260 (4)             ldx     TOKENSP
F00B C602             (        forth.asm):02261 (2)             ldb     #2              Undefined (X points to the offending word)
F00D BDE61B           (        forth.asm):02262 (7)             jsr     ERRHDLR         No return
F010 10AF62           (        forth.asm):02263 (6+1)   @bkcmp3 sty     2,s             Set as action component
F013 DC02             (        forth.asm):02264 (4)             ldd     TOKENSP         Updated by SWDIC if the word was found
F015 9322             (        forth.asm):02265 (4)             subd    BSBFADR
F017 DD1C             (        forth.asm):02266 (4)             std     UTOIN
F019 39               (        forth.asm):02267 (4)             rts
                      (        forth.asm):02268         
                      (        forth.asm):02269         * Functionally: : ['] FIND [COMPILE] LITERAL ; IMMEDIATE RESTRICT
F01A C3               (        forth.asm):02270         BKQUOT  fcb     $C3             ANSI (Core)
F01B 5B275D           (        forth.asm):02271                 fcb     $5B,$27,$5D
F01E EFE6             (        forth.asm):02272                 fdb     BKCOMP
F020 C7               (        forth.asm):02273                 RFCS
F021 8D95             (        forth.asm):02274                 RFXT    bsr,FIND+7      XT for FIND
                      (        forth.asm):02275         * Data stack topmost cell has the target word address.
F023 7EEA7F           (        forth.asm):02276                 RFXT    jmp,LITERAL+10  XT for LITERAL
                      (        forth.asm):02277         
F026 C8               (        forth.asm):02278         POSTPON fcb     $C8             ANSI (Core)
F027 504F5354504F4E45 (        forth.asm):02279                 fcc     'POSTPONE'      ( -- ) as an alias for [COMPILE]
F02F F01A             (        forth.asm):02280                 fdb     BKQUOT
F031 C7               (        forth.asm):02281                 RFCS
F032 20BF             (        forth.asm):02282                 RFXT    bra,BKCOMP+12   XT for [COMPILE]
                      (        forth.asm):02283         
                      (        forth.asm):02284                 IFEQ    STRCT79
F034 47               (        forth.asm):02285         COMPILE fcb     $47             79-STANDARD (REQ146)
F035 434F4D50494C45   (        forth.asm):02286                 fcc     'COMPILE'
F03C F026             (        forth.asm):02287                 fdb     POSTPON
F03E C7               (        forth.asm):02288                 RFCS
                      (        forth.asm):02289         * Return address points to 3 bytes of code (JSR <cfa>) to be inserted HERE and
                      (        forth.asm):02290         * to be skipped before returning to the caller. This is not permitted by a
                      (        forth.asm):02291         * strict interpretation of the 79-STANDARD, which only provides for a threaded
                      (        forth.asm):02292         * implementation (2 bytes payload). For all practical purposes, it works though.
F03F 3510             (        forth.asm):02293 (4+2)           puls    x
F041 109E08           (        forth.asm):02294 (5)             ldy     DICEND
F044 A680             (        forth.asm):02295 (4+1)           lda     ,x+             JSR opcode
F046 A7A0             (        forth.asm):02296 (4+1)           sta     ,y+
F048 EC81             (        forth.asm):02297 (5+2)           ldd     ,x++
F04A EDA1             (        forth.asm):02298 (5+2)           std     ,y++
F04C 109F08           (        forth.asm):02299 (5)             sty     DICEND
F04F 1F15             (        forth.asm):02300 (4)             tfr     x,pc
                      (        forth.asm):02301                 ENDC
                      (        forth.asm):02302         
                      (        forth.asm):02303         * Like the 79-STANDARD COMPILE word, GNU Forth has this as a compile-only word.
                      (        forth.asm):02304         * This is a wise choice since it allows us to possibly optimize it.
F051 48               (        forth.asm):02305         CMPCOMA fcb     $48             ANSI (Core Ext)
F052 434F4D50494C452C (        forth.asm):02306                 fcc     'COMPILE,'      ( XT -- )
                      (        forth.asm):02307                 IFNE    STRCT79
                      (        forth.asm):02308                 fdb     POSTPON
                      (        forth.asm):02309                 ELSE
F05A F034             (        forth.asm):02310                 fdb     COMPILE
                      (        forth.asm):02311                 ENDC
F05C C7               (        forth.asm):02312                 RFCS
F05D BDE6A2           (        forth.asm):02313 (7)             jsr     NPOP            Execution token to X
F060 109E08           (        forth.asm):02314 (5)     CMPCOM1 ldy     DICEND
F063 86BD             (        forth.asm):02315 (2)             lda     #JSROPC
F065 BDE14F           (        forth.asm):02316 (7)             jsr     CHKRTS
F068 BDE438           (        forth.asm):02317 (7)             jsr     VARCON2
F06B 109F08           (        forth.asm):02318 (5)             sty     DICEND
F06E 39               (        forth.asm):02319 (4)             rts
                      (        forth.asm):02320         
                      (        forth.asm):02321         * As per the standard, : is not immediate. This allows for further interesting
                      (        forth.asm):02322         * developments, like tracing words execution...
F06F 01               (        forth.asm):02323         COMPC   fcb     $1              79-STANDARD (REQ116)
F070 3A               (        forth.asm):02324                 fcc     ':'
F071 F051             (        forth.asm):02325                 fdb     CMPCOMA
F073 C7               (        forth.asm):02326                 RFCS
F074 8601             (        forth.asm):02327 (2)             lda     #1
F076 971B             (        forth.asm):02328 (3)             sta     USTATE+1
F078 104F             (        forth.asm):02329 (2)             clrd
F07A DD10             (        forth.asm):02330 (4)             std     JSRLAST
F07C 8602             (        forth.asm):02331 (2)             lda     #2
F07E 9727             (        forth.asm):02332 (3)             sta     RTSREMV         Optimistic strategy: remove the final RTS
F080 9625             (        forth.asm):02333 (3)             lda     RDEPTH
F082 9726             (        forth.asm):02334 (3)             sta     IRDPTH          Meant to check for unbalanced constructs
F084 7EE3BF           (        forth.asm):02335 (3)             jmp     LOCWRT
                      (        forth.asm):02336         
F087 C1               (        forth.asm):02337         COMPR   fcb     $C1             79-STANDARD (REQ196)
F088 3B               (        forth.asm):02338                 fcc     ';'
F089 F06F             (        forth.asm):02339                 fdb     COMPC
F08B C7               (        forth.asm):02340                 RFCS
F08C 9625             (        forth.asm):02341 (3)             lda     RDEPTH          Return stack depth
F08E 9126             (        forth.asm):02342 (3)             cmpa    IRDPTH          Same as when : was entered?
F090 2705             (        forth.asm):02343 (3)             beq     @compr1
F092 C609             (        forth.asm):02344 (2)             ldb     #9              Illegal construct if not
F094 BDE61B           (        forth.asm):02345 (7)             jsr     ERRHDLR         No return
F097 0F1B             (        forth.asm):02346 (5)     @compr1 clr     USTATE+1        Back to interpretation mode
F099 9E0C             (        forth.asm):02347 (4)             ldx     BDICEND
F09B 9F06             (        forth.asm):02348 (4)             stx     LSTWAD          Update LAST
F09D 9E08             (        forth.asm):02349 (4)             ldx     DICEND
                      (        forth.asm):02350         * Optimization: replace the last JSR by a JMP, if possible.
F09F DC10             (        forth.asm):02351 (4)             ldd     JSRLAST
F0A1 2712             (        forth.asm):02352 (3)             beq     @compr3         We need an RTS
F0A3 301D             (        forth.asm):02353 (4+1)           leax    -3,x
F0A5 9C10             (        forth.asm):02354 (4)             cmpx    JSRLAST
F0A7 2604             (        forth.asm):02355 (3)             bne     @compr2
F0A9 867E             (        forth.asm):02356 (2)             lda     #JMPOPC         JMP extended
F0AB A784             (        forth.asm):02357 (4+0)           sta     ,x
                      (        forth.asm):02358         * At this point we still have to emit an RTS unless RTSREMV is 2 or more.
F0AD 3003             (        forth.asm):02359 (4+1)   @compr2 leax    3,x
F0AF 9627             (        forth.asm):02360 (3)             lda     RTSREMV
F0B1 8102             (        forth.asm):02361 (2)             cmpa    #2
F0B3 2404             (        forth.asm):02362 (3)             bhs     @compr4         Optimization applies. We have no forward refs
F0B5 8639             (        forth.asm):02363 (2)     @compr3 lda     #RTSOPC         RTS inherent
F0B7 A780             (        forth.asm):02364 (4+1)           sta     ,x+
F0B9                  (        forth.asm):02365         @compr4
                      (        forth.asm):02366                 IFNE    DEBUG
                      (        forth.asm):02367                 lda     #ILLOPC         Illegal opcode
                      (        forth.asm):02368                 sta     ,x+
                      (        forth.asm):02369                 ENDC
F0B9 9F08             (        forth.asm):02370 (4)             stx     DICEND          Update HERE
F0BB 3264             (        forth.asm):02371 (4+1)           leas    4,s             Drop 2 cells from the system stack (see COMP)
                      (        forth.asm):02372                 IFNE    RELFEAT
F0BD BDEB12           (        forth.asm):02373                 RFXT    jsr,MONITOR+10  XT for MONITOR. All : words are candidates
                      (        forth.asm):02374         *                               for integrity check by ICHECK.
                      (        forth.asm):02375                 ENDC
F0C0 7EE108           (        forth.asm):02376 (3)             jmp     INTRPRA
                      (        forth.asm):02377         
F0C3 C7               (        forth.asm):02378         RECURSE fcb     $C7             FORTH-83
F0C4 52454355525345   (        forth.asm):02379                 fcc     'RECURSE'
F0CB F087             (        forth.asm):02380                 fdb     COMPR
F0CD C7               (        forth.asm):02381                 RFCS
F0CE 9E0E             (        forth.asm):02382 (4)             ldx     RECADDR         Set up by LOCWRT
F0D0 AF62             (        forth.asm):02383 (5+1)           stx     2,s             Set as action component
F0D2 39               (        forth.asm):02384 (4)             rts
                      (        forth.asm):02385         
F0D3 06               (        forth.asm):02386         FORGET  fcb     6               79-STANDARD (REQ196)
F0D4 464F52474554     (        forth.asm):02387                 fcc     'FORGET'
F0DA F0C3             (        forth.asm):02388                 fdb     RECURSE
F0DC C7               (        forth.asm):02389                 RFCS
F0DD BDE71B           (        forth.asm):02390 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
F0E0 6D84             (        forth.asm):02391 (5+0)           tst     ,x              EOL?
F0E2 2605             (        forth.asm):02392 (3)             bne     @frgt2          No
F0E4 C605             (        forth.asm):02393 (2)     @frgt1  ldb     #5              Missing word name
F0E6 BDE61B           (        forth.asm):02394 (7)             jsr     ERRHDLR         No return
F0E9 BDE287           (        forth.asm):02395 (7)     @frgt2  jsr     SCNSTOK
F0EC 27F6             (        forth.asm):02396 (3)             beq     @frgt1          EOL before a non-SP character could be acquired
F0EE BDE362           (        forth.asm):02397 (7)             jsr     SWDIC           SWDIC uses TOKENSP as input--not X!!
F0F1 2607             (        forth.asm):02398 (3)             bne     @frgt3          Word found. XT returned in Y
F0F3 9E02             (        forth.asm):02399 (4)             ldx     TOKENSP
F0F5 C602             (        forth.asm):02400 (2)             ldb     #2              Undefined (X points to the offending word)
F0F7 BDE61B           (        forth.asm):02401 (7)             jsr     ERRHDLR         No return
F0FA 1F21             (        forth.asm):02402 (4)     @frgt3  tfr     y,x             Y and X have the word's XT
F0FC 108C0C15         (        forth.asm):02403 (4)             cmpy    #RAMFTCH
F100 271B             (        forth.asm):02404 (3)             beq     @frgt4
F102 108CE000         (        forth.asm):02405 (4)             cmpy    #ROMSTRT
F106 2415             (        forth.asm):02406 (3)             bhs     @frgt4
                      (        forth.asm):02407                 IFNE    RELFEAT
F108 AE1D             (        forth.asm):02408 (5+1)           ldx     -3,x            Backlink to X
F10A 9F06             (        forth.asm):02409 (4)             stx     LSTWAD          Update LAST
F10C 303C             (        forth.asm):02410 (4+1)           leax    -4,y            XT-4 to X (1B/attr, 2B/backlink, 1B/checksum)
                      (        forth.asm):02411                 ELSE
                      (        forth.asm):02412                 ldx     -2,x            Backlink to X
                      (        forth.asm):02413                 stx     LSTWAD          Update LAST
                      (        forth.asm):02414                 leax    -3,y            XT-3 to X (1B/attr, 2B/backlink)
                      (        forth.asm):02415                 ENDC
F10E 4F               (        forth.asm):02416 (1)             clra
F10F D62D             (        forth.asm):02417 (3)             ldb     CURTOKL         Token name length to D
F111 103201           (        forth.asm):02418 (4)             subr    d,x             Substract word length
F114 9F08             (        forth.asm):02419 (4)             stx     DICEND          Update HERE
F116 DC02             (        forth.asm):02420 (4)             ldd     TOKENSP         Set by SWDIC to point to the end of the token
F118 9322             (        forth.asm):02421 (4)             subd    BSBFADR
F11A DD1C             (        forth.asm):02422 (4)             std     UTOIN           Derive >IN from TOKENSP
F11C 39               (        forth.asm):02423 (4)             rts
F11D C60B             (        forth.asm):02424 (2)     @frgt4  ldb     #11             Word is unforgettable
F11F BDE61B           (        forth.asm):02425 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02426         
F122 07               (        forth.asm):02427         EXCT    fcb     7               79-STANDARD (REQ163)
F123 45584543555445   (        forth.asm):02428                 fcc     'EXECUTE'
F12A F0D3             (        forth.asm):02429                 fdb     FORGET
F12C C7               (        forth.asm):02430                 RFCS
F12D BDE6A2           (        forth.asm):02431 (7)             jsr     NPOP
F130 1037C1           (        forth.asm):02432 (4)             cmpr    0,x             Although the standard does not specify that
F133 2702             (        forth.asm):02433 (3)             beq     @exct1          a NUL address should trigger an error, I do
F135 1F15             (        forth.asm):02434 (4)             tfr     x,pc
F137 C60D             (        forth.asm):02435 (2)     @exct1  ldb     #13             Illegal argument
F139 BDE61B           (        forth.asm):02436 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02437         
F13C 03               (        forth.asm):02438         BYE     fcb     3               Non-standard
F13D 425945           (        forth.asm):02439                 fcc     'BYE'
F140 F122             (        forth.asm):02440                 fdb     EXCT
F142 C7               (        forth.asm):02441                 RFCS
F143 7EE036           (        forth.asm):02442 (3)             jmp     RSTHDL
                      (        forth.asm):02443         
F146 C6               (        forth.asm):02444         BKCHAR  fcb     $C6             ANSI (Core)
F147 5B434841525D     (        forth.asm):02445                 fcc     '[CHAR]'
F14D F13C             (        forth.asm):02446                 fdb     BYE
F14F C7               (        forth.asm):02447                 RFCS
F150 8D0B             (        forth.asm):02448                 RFXT    bsr,CHAR+7      XT for CHAR
F152 7EEA7F           (        forth.asm):02449                 RFXT    jmp,LITERAL+10  XT for LITERAL
                      (        forth.asm):02450         
F155 04               (        forth.asm):02451         CHAR    fcb     4               ANSI (Core)
F156 43484152         (        forth.asm):02452                 fcc     'CHAR'
F15A F146             (        forth.asm):02453                 fdb     BKCHAR
F15C C7               (        forth.asm):02454                 RFCS
F15D BDE71B           (        forth.asm):02455 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
F160 BDE287           (        forth.asm):02456 (7)     @char1  jsr     SCNSTOK         X points to the beginning of the character
F163 2714             (        forth.asm):02457 (3)             beq     @chrerr
F165 E684             (        forth.asm):02458 (4+0)           ldb     ,x
F167 4F               (        forth.asm):02459 (1)             clra
F168 1F01             (        forth.asm):02460 (4)             tfr     d,x
F16A BDE694           (        forth.asm):02461 (7)             jsr     NPUSH
F16D 9E02             (        forth.asm):02462 (4)             ldx     TOKENSP         Set by SCNSTOK
F16F BDE295           (        forth.asm):02463 (7)             jsr     SCNETOK
F172 1F10             (        forth.asm):02464 (4)             tfr     x,d             TOKENEP
F174 9322             (        forth.asm):02465 (4)             subd    BSBFADR
F176 DD1C             (        forth.asm):02466 (4)             std     UTOIN           Derive >IN from TOKENEP
F178 39               (        forth.asm):02467 (4)             rts
F179 C60D             (        forth.asm):02468 (2)     @chrerr ldb     #13             Illegal argument
F17B BDE61B           (        forth.asm):02469 (7)             jsr     ERRHDLR
                      (        forth.asm):02470         * No return.
                      (        forth.asm):02471         
                      (        forth.asm):02472         * Hairy code but working.
F17E 04               (        forth.asm):02473         WORD    fcb     4               79-STANDARD (REQ181)
F17F 574F5244         (        forth.asm):02474                 fcc     'WORD'          ( char -- addr )
F183 F155             (        forth.asm):02475                 fdb     CHAR
F185 C7               (        forth.asm):02476                 RFCS
F186 BDE6A2           (        forth.asm):02477 (7)             jsr     NPOP
F189 1F16             (        forth.asm):02478 (4)             tfr     x,w             F has the delimiter ASCII code
F18B 109E08           (        forth.asm):02479 (5)             ldy     DICEND          The counted string returned is stored at HERE
F18E 3420             (        forth.asm):02480 (4+2)           pshs    y
F190 6FA0             (        forth.asm):02481 (6+1)           clr     ,y+             Initialize its length
F192 BDE71B           (        forth.asm):02482 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
F195 6D84             (        forth.asm):02483 (5+0)           tst     ,x              EOL reached?
F197 2605             (        forth.asm):02484 (3)             bne     @word1          No, proceed
F199 3510             (        forth.asm):02485 (4+2)   @word0  puls    x
F19B 3610             (        forth.asm):02486                 UCNPUSH                 Push back HERE
F19D 39               (        forth.asm):02487 (4)             rts
F19E BDE287           (        forth.asm):02488 (7)     @word1  jsr     SCNSTOK         Scan for the next non-space character
F1A1 2718             (        forth.asm):02489 (3)             beq     @word5          EOL reached, this is the end
F1A3 A680             (        forth.asm):02490 (4+1)           lda     ,x+             First non-space character
F1A5 1037F8           (        forth.asm):02491 (4)             cmpr    f,a             Leading delimiter matched?
F1A8 2602             (        forth.asm):02492 (3)             bne     @word3          No
F1AA A680             (        forth.asm):02493 (4+1)   @word2  lda     ,x+             Acquire next character from the input stream
F1AC A7A0             (        forth.asm):02494 (4+1)   @word3  sta     ,y+
F1AE 2709             (        forth.asm):02495 (3)             beq     @word4          EOL reached
F1B0 1037F8           (        forth.asm):02496 (4)             cmpr    f,a             Trailing delimiter?
F1B3 2706             (        forth.asm):02497 (3)             beq     @word5
F1B5 6CF4             (        forth.asm):02498 (6+3)           inc     [,s]            Increment string length
F1B7 20F1             (        forth.asm):02499 (3)             bra     @word2
F1B9 301F             (        forth.asm):02500 (4+1)   @word4  leax    -1,x            EOL reached
F1BB 1F10             (        forth.asm):02501 (4)     @word5  tfr     x,d             Pointing one char after the delimiter or to NUL
F1BD 9322             (        forth.asm):02502 (4)             subd    BSBFADR
F1BF DD1C             (        forth.asm):02503 (4)             std     UTOIN
F1C1 20D6             (        forth.asm):02504 (3)             bra     @word0
                      (        forth.asm):02505         
F1C3 81               (        forth.asm):02506         LPAR    fcb     $81             79-STANDARD (REQ122)
F1C4 28               (        forth.asm):02507                 fcc     '('
F1C5 F17E             (        forth.asm):02508                 fdb     WORD
F1C7 C7               (        forth.asm):02509                 RFCS
F1C8 BDE71B           (        forth.asm):02510 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
F1CB A680             (        forth.asm):02511 (4+1)   @lpar1  lda     ,x+
F1CD 270B             (        forth.asm):02512 (3)             beq     @lparx          Input stream exhausted before ) is matched
F1CF 8129             (        forth.asm):02513 (2)             cmpa    #')
F1D1 26F8             (        forth.asm):02514 (3)             bne     @lpar1
F1D3 1F10             (        forth.asm):02515 (4)             tfr     x,d             Just matched )
F1D5 9322             (        forth.asm):02516 (4)             subd    BSBFADR
F1D7 DD1C             (        forth.asm):02517 (4)             std     UTOIN           Update >IN
F1D9 39               (        forth.asm):02518 (4)             rts
F1DA C60C             (        forth.asm):02519 (2)     @lparx  ldb     #12             Missing delimiter
F1DC BDE61B           (        forth.asm):02520 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02521         
F1DF 06               (        forth.asm):02522         SOURCE  fcb     6               ANSI (Core)
F1E0 534F55524345     (        forth.asm):02523                 fcc     'SOURCE'        ( -- baseaddr charcount )
F1E6 F1C3             (        forth.asm):02524                 fdb     LPAR
F1E8 C7               (        forth.asm):02525                 RFCS
F1E9 9E22             (        forth.asm):02526 (4)             ldx     BSBFADR
F1EB BDE694           (        forth.asm):02527 (7)             jsr     NPUSH
F1EE 8E0400           (        forth.asm):02528 (3)             ldx     #BLKSIZ         Non-zero block size
F1F1 DC1E             (        forth.asm):02529 (4)             ldd     UBLK
F1F3 2605             (        forth.asm):02530 (3)             bne     @srcdon         Current BLK is NZ
F1F5 4F               (        forth.asm):02531 (1)             clra
F1F6 D624             (        forth.asm):02532 (3)             ldb     CMDLNSZ         Character count entered through GETS in INTERP
F1F8 1F01             (        forth.asm):02533 (4)             tfr     d,x
F1FA 7EE694           (        forth.asm):02534 (3)     @srcdon jmp     NPUSH
                      (        forth.asm):02535         
                      (        forth.asm):02536         * This is a straightforward implementation borrowed from GNU Forth 'see \':
                      (        forth.asm):02537         * : \  
                      (        forth.asm):02538         *   BLK @ 
                      (        forth.asm):02539         *   IF     >IN @ C/L / 1+ C/L * >IN ! EXIT 
                      (        forth.asm):02540         *   THEN 
                      (        forth.asm):02541         *   SOURCE >IN ! DROP ; IMMEDIATE
                      (        forth.asm):02542         * However since C/L (number of columns per line) is 64 (a power of 2), things
                      (        forth.asm):02543         * can be coded in a more compact manner as: >IN @ 63 COM AND 64 + >IN !
F1FD 81               (        forth.asm):02544         BKSLSH  fcb     $81             ANSI (Block Ext)
F1FE 5C               (        forth.asm):02545                 fcb     $5C             \ ( -- )
F1FF F1DF             (        forth.asm):02546                 fdb     SOURCE
F201 C7               (        forth.asm):02547                 RFCS
F202 DC1E             (        forth.asm):02548 (4)             ldd     UBLK            BLK @ to D
F204 270B             (        forth.asm):02549 (3)             beq     @comser         We operate from block 0: the console
F206 DC1C             (        forth.asm):02550 (4)             ldd     UTOIN           >IN @
F208 C4C0             (        forth.asm):02551 (2)             andb    #^$3F           Point to the beginning of the line
F20A CB40             (        forth.asm):02552 (2)             addb    #$40            next line
F20C 8900             (        forth.asm):02553 (2)             adca    #0              Propagate potential carry from LSB
F20E DD1C             (        forth.asm):02554 (4)             std     UTOIN           >IN !
F210 39               (        forth.asm):02555 (4)             rts                     EXIT
F211 8DD6             (        forth.asm):02556         @comser RFXT    bsr,SOURCE+9    XT for SOURCE
F213 BDE6A2           (        forth.asm):02557 (7)             jsr     NPOP
F216 9F1C             (        forth.asm):02558 (4)             stx     UTOIN           >IN !
F218 7EFBD5           (        forth.asm):02559                 RFXT    jmp,DROP+7      XT for DROP
                      (        forth.asm):02560                 ENDC
                      (        forth.asm):02561         
F21B 82               (        forth.asm):02562         PSTR    fcb     $82             79-STANDARD (REQ133)
F21C 2E22             (        forth.asm):02563                 fcc     '."'
F21E F1FD             (        forth.asm):02564                 fdb     BKSLSH
F220 C7               (        forth.asm):02565                 RFCS
F221 BDE71B           (        forth.asm):02566 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
F224 6D80             (        forth.asm):02567 (5+1)           tst     ,x+
F226 270C             (        forth.asm):02568 (3)             beq     @pstr2          Met the end of the input stream before "
F228 9F02             (        forth.asm):02569 (4)             stx     TOKENSP         Beginning of string address
F22A A680             (        forth.asm):02570 (4+1)   @pstr1  lda     ,x+
F22C 2706             (        forth.asm):02571 (3)             beq     @pstr2
F22E 8122             (        forth.asm):02572 (2)             cmpa    #'"
F230 2707             (        forth.asm):02573 (3)             beq     @pstr3
F232 20F6             (        forth.asm):02574 (3)             bra     @pstr1
F234 C60C             (        forth.asm):02575 (2)     @pstr2  ldb     #12             Missing delimiter
F236 BDE61B           (        forth.asm):02576 (7)             jsr     ERRHDLR         No return
F239 9F04             (        forth.asm):02577 (4)     @pstr3  stx     TOKENEP         X points to the character following "
F23B 6F1F             (        forth.asm):02578 (6+1)           clr     -1,x            Overwrite the trailing " with NUL
F23D 1F10             (        forth.asm):02579 (4)             tfr     x,d
F23F 9322             (        forth.asm):02580 (4)             subd    BSBFADR
F241 DD1C             (        forth.asm):02581 (4)             std     UTOIN           Derive >IN from TOKENEP
F243 0D1B             (        forth.asm):02582 (4)             tst     USTATE+1
F245 260E             (        forth.asm):02583 (3)             bne     PSTRCMP
F247 1F12             (        forth.asm):02584 (4)             tfr     x,y             Y has TOKENEP
F249 9E02             (        forth.asm):02585 (4)             ldx     TOKENSP
F24B BDE1E2           (        forth.asm):02586 (7)             jsr     PUTS
F24E 1F21             (        forth.asm):02587 (4)             tfr     y,x
F250 8622             (        forth.asm):02588 (2)     @pstr4  lda     #'"
F252 A71F             (        forth.asm):02589 (4+1)           sta     -1,x            Restore the trailing "
F254 39               (        forth.asm):02590 (4)             rts
F255 109E08           (        forth.asm):02591 (5)     PSTRCMP ldy     DICEND          We are compiling
F258 868E             (        forth.asm):02592 (2)             lda     #LDXOPC         LDX immediate
F25A A7A0             (        forth.asm):02593 (4+1)           sta     ,y+
F25C 3025             (        forth.asm):02594 (4+1)           leax    5,y
F25E AFA1             (        forth.asm):02595 (5+2)           stx     ,y++
F260 867E             (        forth.asm):02596 (2)             lda     #JMPOPC         JMP extended
F262 A7A0             (        forth.asm):02597 (4+1)           sta     ,y+
F264 3420             (        forth.asm):02598 (4+2)           pshs    y               Jump address beyond the string
F266 3122             (        forth.asm):02599 (4+1)           leay    2,y
F268 9E02             (        forth.asm):02600 (4)             ldx     TOKENSP
F26A DC04             (        forth.asm):02601 (4)             ldd     TOKENEP
F26C 103210           (        forth.asm):02602 (4)             subr    x,d
F26F 1F06             (        forth.asm):02603 (4)             tfr     d,w
F271 113812           (        forth.asm):02604 (6+?)           tfm     x+,y+
F274 109F08           (        forth.asm):02605 (5)             sty     DICEND
F277 3510             (        forth.asm):02606 (4+2)           puls    x
F279 10AF84           (        forth.asm):02607 (6+0)           sty     ,x              Install JMP address
F27C 8EE1E2           (        forth.asm):02608 (3)             ldx     #PUTS
F27F AF62             (        forth.asm):02609 (5+1)           stx     2,s             Set as action component
F281 9E04             (        forth.asm):02610 (4)             ldx     TOKENEP
F283 20CB             (        forth.asm):02611 (3)             bra     @pstr4
                      (        forth.asm):02612         
                      (        forth.asm):02613         * Transactional behaviour is guaranteed here. What this means is that the
                      (        forth.asm):02614         * operation will preserve the data stack contents, should insufficient
                      (        forth.asm):02615         * parameters be supplied. It is a very desirable feature (for debugging
                      (        forth.asm):02616         * purposes) which will be generalized to a number of other words. As an
                      (        forth.asm):02617         * aside, it also allows us to access the data stack as directly indexed
                      (        forth.asm):02618         * through the 6309 U register, resulting in better performance.
F285 02               (        forth.asm):02619         DPLUS   fcb     2               79-STANDARD (REQ241)
F286 442B             (        forth.asm):02620                 fcc     'D+'            ( d2 d1 -- d1+d2--signed )
F288 F21B             (        forth.asm):02621                 fdb     PSTR            Initially ( L2 H2 L1 H1)
F28A C7               (        forth.asm):02622                 RFCS
F28B CC023EBDE30E     (        forth.asm):02623                 MINDREQ 4               Make sure we have at least 4 cells stacked up
                      (        forth.asm):02624         * At this point sufficient stack depth has been assessed. Let's rock and roll!
F291 BDFC53           (        forth.asm):02625         @stkok  RFXT    jsr,ROT+6       XT for ROT ( L2 L1 H1 H2 )
F294 EC44             (        forth.asm):02626 (5+1)           ldd     4,u             L1
F296 E346             (        forth.asm):02627 (5+1)           addd    6,u             L2
F298 ED46             (        forth.asm):02628 (5+1)           std     6,u             d1+d2 least significant cell
F29A EC42             (        forth.asm):02629 (5+1)           ldd     2,u             H1
F29C 10890000         (        forth.asm):02630 (4)             adcd    #0              Carry from least significant cell addition
F2A0 E3C4             (        forth.asm):02631 (5+0)           addd    ,u              H2
F2A2 ED44             (        forth.asm):02632 (5+1)           std     4,u             d1+d2 most significant cell
F2A4 3344             (        forth.asm):02633 (4+1)           leau    4,u             Drop 2 cells from the data stack
F2A6 39               (        forth.asm):02634 (4)             rts
                      (        forth.asm):02635         
F2A7 07               (        forth.asm):02636         DNEG    fcb     7               79-STANDARD (REQ245)
F2A8 444E4547415445   (        forth.asm):02637                 fcc     'DNEGATE'
F2AF F285             (        forth.asm):02638                 fdb     DPLUS
F2B1 C7               (        forth.asm):02639                 RFCS
F2B2 CC0242BDE30E     (        forth.asm):02640                 MINDREQ 2               We need at least 2 cells stacked up
F2B8 10A642           (        forth.asm):02641 (6+1)           ldw     2,u             Least significant cell
F2BB 1053             (        forth.asm):02642 (2)             comw
F2BD ECC4             (        forth.asm):02643 (5+0)           ldd     ,u              Most significant cell
F2BF 1043             (        forth.asm):02644 (2)             comd
F2C1 108B0001         (        forth.asm):02645 (4)             addw    #1
F2C5 10890000         (        forth.asm):02646 (4)             adcd    #0              Propagate carry flag
F2C9 10EDC4           (        forth.asm):02647 (8+0)           stq     ,u              Store the result back to the data stack
F2CC 39               (        forth.asm):02648 (4)             rts
                      (        forth.asm):02649         
F2CD 03               (        forth.asm):02650         DZEQ    fcb     3               79-STANDARD (double number extension)
F2CE 44303D           (        forth.asm):02651                 fcc     'D0='           ( d -- flag )
F2D1 F2A7             (        forth.asm):02652                 fdb     DNEG
F2D3 C7               (        forth.asm):02653                 RFCS
F2D4 BDED1B           (        forth.asm):02654                 RFXT    jsr,OR+5        XT for OR
F2D7 7EED9B           (        forth.asm):02655                 RFXT    jmp,NULP+5      XT for 0=
                      (        forth.asm):02656         
                      (        forth.asm):02657         * In essence:
                      (        forth.asm):02658         * : D< DNEGATE D+ NIP [ HEX ] 8000 AND IF 1 ELSE 0 THEN ;
F2DA 02               (        forth.asm):02659         DLESS   fcb     2               79-STANDARD (REQ244)
F2DB 443C             (        forth.asm):02660                 fcc     'D<'            ( d1 d2 -- flag )
F2DD F2CD             (        forth.asm):02661                 fdb     DZEQ
F2DF C7               (        forth.asm):02662                 RFCS
F2E0 8DD0             (        forth.asm):02663                 RFXT    bsr,DNEG+10     XT for DNEGATE
F2E2 8DA7             (        forth.asm):02664                 RFXT    bsr,DPLUS+5     XT for D+
F2E4 4F               (        forth.asm):02665 (1)             clra
F2E5 A742             (        forth.asm):02666 (4+1)           sta     2,u
F2E7 E6C4             (        forth.asm):02667 (4+0)           ldb     ,u
F2E9 2D05             (        forth.asm):02668 (3)             blt     @setto1
F2EB A743             (        forth.asm):02669 (4+1)   @setrv  sta     3,u
F2ED 3342             (        forth.asm):02670 (4+1)           leau    2,u
F2EF 39               (        forth.asm):02671 (4)             rts
F2F0 4C               (        forth.asm):02672 (1)     @setto1 inca
F2F1 20F8             (        forth.asm):02673 (3)             bra     @setrv
                      (        forth.asm):02674         
F2F3 05               (        forth.asm):02675         TWOOVER fcb     5               79-STANDARD (double number extension)
F2F4 324F564552       (        forth.asm):02676                 fcc     '2OVER'         ( d1 d2 -- d1 d2 d1 )
F2F9 F2DA             (        forth.asm):02677                 fdb     DLESS
F2FB C7               (        forth.asm):02678                 RFCS
F2FC CC023EBDE30E     (        forth.asm):02679                 MINDREQ 4
F302 10EC44           (        forth.asm):02680 (8+1)           ldq     4,u             D:W has MSC:LSC of D1
F305 1F61             (        forth.asm):02681 (4)             tfr     w,x
F307 BDE694           (        forth.asm):02682 (7)             jsr     NPUSH
F30A 1F01             (        forth.asm):02683 (4)             tfr     d,x
F30C 7EE694           (        forth.asm):02684 (3)             jmp     NPUSH
                      (        forth.asm):02685         
F30F 05               (        forth.asm):02686         TWOSWAP fcb     5               79-STANDARD (double number extension)
F310 3253574150       (        forth.asm):02687                 fcc     '2SWAP'         ( d1 d2 -- d2 d1 )
F315 F2F3             (        forth.asm):02688                 fdb     TWOOVER
F317 C7               (        forth.asm):02689                 RFCS
F318 CC023EBDE30E     (        forth.asm):02690                 MINDREQ 4               At least four cells must be stacked up
F31E AE44             (        forth.asm):02691 (5+1)           ldx     4,u             D1 most significant cell
F320 10AE46           (        forth.asm):02692 (6+1)           ldy     6,u             D1 least significant cell
F323 10ECC4           (        forth.asm):02693 (8+0)           ldq     ,u              D:W has MSC:LSC of D2
F326 10ED44           (        forth.asm):02694 (8+1)           stq     4,u
F329 AFC4             (        forth.asm):02695 (5+0)           stx     ,u
F32B 10AF42           (        forth.asm):02696 (6+1)           sty     2,u
F32E 39               (        forth.asm):02697 (4)             rts
                      (        forth.asm):02698         
F32F 05               (        forth.asm):02699         TWODROP fcb     5               79-STANDARD (double number extension)
F330 3244524F50       (        forth.asm):02700                 fcc     '2DROP'         ( d -- )
F335 F30F             (        forth.asm):02701                 fdb     TWOSWAP
F337 C7               (        forth.asm):02702                 RFCS
F338 CC0242BDE30E     (        forth.asm):02703                 MINDREQ 2               At least two cells must be stacked up
F33E 3344             (        forth.asm):02704 (4+1)           leau    4,u
F340 39               (        forth.asm):02705 (4)             rts
                      (        forth.asm):02706         
F341 04               (        forth.asm):02707         TWODUP  fcb     4               79-STANDARD (double number extension)
F342 32445550         (        forth.asm):02708                 fcc     '2DUP'          ( double -- double double )
F346 F32F             (        forth.asm):02709                 fdb     TWODROP
F348 C7               (        forth.asm):02710                 RFCS
F349 CC0242BDE30E     (        forth.asm):02711                 MINDREQ 2
F34F 10ECC4           (        forth.asm):02712 (8+0)           ldq     ,u              D:W has MSC:LSC of DOUBLE
F352 1F61             (        forth.asm):02713 (4)             tfr     w,x
F354 BDE694           (        forth.asm):02714 (7)             jsr     NPUSH
F357 1F01             (        forth.asm):02715 (4)             tfr     d,x
F359 7EE694           (        forth.asm):02716 (3)             jmp     NPUSH
                      (        forth.asm):02717         
F35C 02               (        forth.asm):02718         TWOSTOR fcb     2               79-STANDARD (double number extension)
F35D 3221             (        forth.asm):02719                 fcc     '2!'            ( double addr -- )
F35F F341             (        forth.asm):02720                 fdb     TWODUP
F361 C7               (        forth.asm):02721                 RFCS
F362 CC0240BDE30E     (        forth.asm):02722                 MINDREQ 3
F368 10EC42           (        forth.asm):02723 (8+1)           ldq     2,u             DOUBLE to D:W
F36B 10EDD4           (        forth.asm):02724 (8+3)           stq     [,u]            Store DOUBLE to ADDR
F36E 3346             (        forth.asm):02725 (4+1)           leau    6,u             Drop three cells from the user stack
F370 39               (        forth.asm):02726 (4)             rts
                      (        forth.asm):02727         
F371 02               (        forth.asm):02728         TWOFTCH fcb     2               79-STANDARD (double number extension)
F372 3240             (        forth.asm):02729                 fcc     '2@'            ( dbladdr -- double )
F374 F35C             (        forth.asm):02730                 fdb     TWOSTOR
F376 C7               (        forth.asm):02731                 RFCS
F377 CC0244BDE30E     (        forth.asm):02732                 MINDREQ 1
F37D 10ECD4           (        forth.asm):02733 (8+3)           ldq     [,u]            D:W has MSC:LSC of DBLADDR @
F380 10A7C4           (        forth.asm):02734 (6+0)           stw     ,u              Least significant cell stacked in place
F383 1F01             (        forth.asm):02735 (4)             tfr     d,x             Most significant cell goes through standard push
F385 7EE694           (        forth.asm):02736 (3)             jmp     NPUSH
                      (        forth.asm):02737         
F388 07               (        forth.asm):02738         CONVERT fcb     7               79-STANDARD (REQ195)
F389 434F4E56455254   (        forth.asm):02739                 fcc     'CONVERT'       ( d1 addr1 -- d2 addr2 )
F390 F371             (        forth.asm):02740                 fdb     TWOFTCH
F392 C7               (        forth.asm):02741                 RFCS
F393 CC0240BDE30E     (        forth.asm):02742                 MINDREQ 3               At least 3 cells need to be stacked up on entry
F399 BDE2A7           (        forth.asm):02743 (7)             jsr     CKBASE          Check for supported BASE. No return if not
F39C AEC4             (        forth.asm):02744 (5+0)           ldx     ,u              ADDR1 to X
F39E 3001             (        forth.asm):02745 (4+1)   @cvloop leax    1,x
F3A0 E684             (        forth.asm):02746 (4+0)           ldb     ,x
                      (        forth.asm):02747         * B has the ASCII representation of something that may or may not be a valid
                      (        forth.asm):02748         * digit, expressed in BASE (alias (byte)UBASE+1). If it does, multiply D1 by
                      (        forth.asm):02749         * BASE and add that to D1 (aka D2 on exit). Then add DIGIT on the top of it.
F3A2 C030             (        forth.asm):02750 (2)             subb    #'0             Minimal ASCII value condition met?
F3A4 255B             (        forth.asm):02751 (3)             blo     @cvoor          No. Out of range. ,X cannot be a valid digit
F3A6 C10A             (        forth.asm):02752 (2)             cmpb    #10
F3A8 2510             (        forth.asm):02753 (3)             blo     @cvnolt         No letter in potential BASE
                      (        forth.asm):02754                 IFEQ    CSSNTVE
F3AA C111             (        forth.asm):02755 (2)             cmpb    #'A-'0
F3AC 2553             (        forth.asm):02756 (3)             blo     @cvoor          Greater than 9 but lower than A
F3AE C131             (        forth.asm):02757 (2)             cmpb    #'a-'0
F3B0 2506             (        forth.asm):02758 (3)             blo     @cvisuc         Upper case already
F3B2 C14A             (        forth.asm):02759 (2)             cmpb    #'z-'0
F3B4 224B             (        forth.asm):02760 (3)             bhi     @cvoor          Definitely out of range
F3B6 C020             (        forth.asm):02761 (2)             subb    #'a-'A          To upper case
                      (        forth.asm):02762                 ENDC
F3B8 C007             (        forth.asm):02763 (2)     @cvisuc subb    #'A-':          A-Z to number
F3BA D119             (        forth.asm):02764 (3)     @cvnolt cmpb    UBASE+1         B has a digit. Make sure it's less than BASE
F3BC 2443             (        forth.asm):02765 (3)             bhs     @cvoor          Number under scrutiny is >= BASE
F3BE 3278             (        forth.asm):02766 (4+1)           leas    -8,s            Allocate scratch space
F3C0 4F               (        forth.asm):02767 (1)             clra
F3C1 3406             (        forth.asm):02768 (4+2)           pshs    d
                      (        forth.asm):02769         * System and user stack structures are as follows:
                      (        forth.asm):02770         * ,s    current digit (1 cell)
                      (        forth.asm):02771         * 2,s   D0*B (1 cell)
                      (        forth.asm):02772         * 4,s   D1*B (1 cell)
                      (        forth.asm):02773         * 6,s   D2*B (1 cell)
                      (        forth.asm):02774         * 8,s   D3*B (1 cell)
                      (        forth.asm):02775         * 2,u   D1H most significant cell
                      (        forth.asm):02776         * 4,u   D1L least significant cell
F3C3 1F37             (        forth.asm):02777 (4)             tfr     u,v             Backup U
F3C5 3346             (        forth.asm):02778 (4+1)           leau    6,u             Point one byte after D1LL
F3C7 3162             (        forth.asm):02779 (4+1)           leay    2,s             Point to D0*B
F3C9 118604           (        forth.asm):02780 (3)             lde     #4              Four products to go through
F3CC A6C2             (        forth.asm):02781 (4+1)   @cvmul  lda     ,-u
F3CE D619             (        forth.asm):02782 (3)             ldb     UBASE+1
F3D0 3D               (        forth.asm):02783 (10)            mul
F3D1 EDA1             (        forth.asm):02784 (5+2)           std     ,y++
F3D3 114A             (        forth.asm):02785 (2)             dece
F3D5 26F5             (        forth.asm):02786 (3)             bne     @cvmul
F3D7 1F73             (        forth.asm):02787 (4)             tfr     v,u             Restore U
F3D9 A663             (        forth.asm):02788 (4+1)           lda     3,s
F3DB A745             (        forth.asm):02789 (4+1)           sta     5,u             D1LL
F3DD A662             (        forth.asm):02790 (4+1)           lda     2,s
F3DF AB65             (        forth.asm):02791 (4+1)           adda    5,s
F3E1 A744             (        forth.asm):02792 (4+1)           sta     4,u             D1LH
F3E3 A664             (        forth.asm):02793 (4+1)           lda     4,s
F3E5 A967             (        forth.asm):02794 (4+1)           adca    7,s
F3E7 A743             (        forth.asm):02795 (4+1)           sta     3,u             D1HL
F3E9 A666             (        forth.asm):02796 (4+1)           lda     6,s
F3EB A969             (        forth.asm):02797 (4+1)           adca    9,s
F3ED A742             (        forth.asm):02798 (4+1)           sta     2,u             D1HH
F3EF EC44             (        forth.asm):02799 (5+1)           ldd     4,u             D1L
F3F1 E3E4             (        forth.asm):02800 (5+0)           addd    ,s              DIGIT
F3F3 ED44             (        forth.asm):02801 (5+1)           std     4,u
F3F5 EC42             (        forth.asm):02802 (5+1)           ldd     2,u             D1H
F3F7 10890000         (        forth.asm):02803 (4)             adcd    #0              Potential carry from lower cell
F3FB ED42             (        forth.asm):02804 (5+1)           std     2,u
F3FD 326A             (        forth.asm):02805 (4+1)           leas    10,s            Release scratch space
F3FF 209D             (        forth.asm):02806 (3)             bra     @cvloop         Here we go again
F401 AFC4             (        forth.asm):02807 (5+0)   @cvoor  stx     ,u              Update ADDR2
F403 39               (        forth.asm):02808 (4)             rts
                      (        forth.asm):02809         
F404 02               (        forth.asm):02810         CVTE    fcb     2
F405 233E             (        forth.asm):02811                 fcc     '#>'
F407 F388             (        forth.asm):02812                 fdb     CONVERT
F409 C7               (        forth.asm):02813                 RFCS
F40A BDE6A2           (        forth.asm):02814 (7)             jsr     NPOP
F40D BDE6A2           (        forth.asm):02815 (7)             jsr     NPOP            Drop 2 cells from the data stack
F410 8E0134           (        forth.asm):02816 (3)             ldx     #PADBUF
F413 3610             (        forth.asm):02817                 UCNPUSH
F415 BDE1AF           (        forth.asm):02818 (7)             jsr     SLEN
F418 1F61             (        forth.asm):02819 (4)             tfr     w,x
F41A 3610             (        forth.asm):02820                 UCNPUSH
F41C 39               (        forth.asm):02821 (4)             rts
                      (        forth.asm):02822         
F41D 04               (        forth.asm):02823         SIGN    fcb     4
F41E 5349474E         (        forth.asm):02824                 fcc     'SIGN'
F422 F404             (        forth.asm):02825                 fdb     CVTE
F424 C7               (        forth.asm):02826                 RFCS
F425 BDE6A2           (        forth.asm):02827 (7)             jsr     NPOP
F428 1F10             (        forth.asm):02828 (4)             tfr     x,d
F42A 104D             (        forth.asm):02829 (2)             tstd
F42C 2C05             (        forth.asm):02830 (3)             bge     @sign1
F42E C62D             (        forth.asm):02831 (2)             ldb     #'-
F430 7EF4ED           (        forth.asm):02832 (3)             jmp     INSBPAD
F433 39               (        forth.asm):02833 (4)     @sign1  rts
                      (        forth.asm):02834         
F434 04               (        forth.asm):02835         HOLD    fcb     4
F435 484F4C44         (        forth.asm):02836                 fcc     'HOLD'
F439 F41D             (        forth.asm):02837                 fdb     SIGN
F43B C7               (        forth.asm):02838                 RFCS
F43C BDE6A2           (        forth.asm):02839 (7)             jsr     NPOP
F43F 1F10             (        forth.asm):02840 (4)             tfr     x,d
F441 7EF4ED           (        forth.asm):02841 (3)             jmp     INSBPAD         B is inserted at the beginning of PAD.
                      (        forth.asm):02842         
F444 02               (        forth.asm):02843         SHARPS  fcb     2
F445 2353             (        forth.asm):02844                 fcc     '#S'
F447 F434             (        forth.asm):02845                 fdb     HOLD
F449 C7               (        forth.asm):02846                 RFCS
F44A 8601             (        forth.asm):02847 (2)             lda     #1
F44C 972A             (        forth.asm):02848 (3)             sta     CVTFCN          CVT function #1 is #S
F44E 2007             (        forth.asm):02849 (3)             bra     CVT0
                      (        forth.asm):02850         
                      (        forth.asm):02851         * Unsigned double on the top of the data stack gets divided by BASE.
                      (        forth.asm):02852         * The division algorithm implemented here is the binary long division.
                      (        forth.asm):02853         * See https://en.wikipedia.org/wiki/Division_algorithm for more information.
                      (        forth.asm):02854         * Remainder (converted to a character) gets prepended to PAD.
F450 01               (        forth.asm):02855         CVT     fcb     1
F451 23               (        forth.asm):02856                 fcc     '#'
F452 F444             (        forth.asm):02857                 fdb     SHARPS
F454 C7               (        forth.asm):02858                 RFCS
F455 0F2A             (        forth.asm):02859 (5)             clr     CVTFCN          CVT function 0 is #
F457 BDE6A2           (        forth.asm):02860 (7)     CVT0    jsr     NPOP
F45A 1F16             (        forth.asm):02861 (4)             tfr     x,w
F45C BDE6A2           (        forth.asm):02862 (7)             jsr     NPOP
F45F 3410             (        forth.asm):02863 (4+2)   CVT1    pshs    x               Numerator least significant cell
F461 1038             (        forth.asm):02864 (6)             pshsw                   Numerator most significant cell
F463 104F             (        forth.asm):02865 (2)             clrd
F465 3406             (        forth.asm):02866 (4+2)           pshs    d               Quotient low
F467 3406             (        forth.asm):02867 (4+2)           pshs    d               Quotient high
F469 3406             (        forth.asm):02868 (4+2)           pshs    d               Bitmask low
F46B 10868000         (        forth.asm):02869 (4)             ldw     #$8000          Bitmask high
F46F 1038             (        forth.asm):02870 (6)             pshsw
F471 3406             (        forth.asm):02871 (4+2)           pshs    d
                      (        forth.asm):02872         * Stack structure:
                      (        forth.asm):02873         * 1,s   remainder               8 bits (high order byte is zero and unused)
                      (        forth.asm):02874         * 2,s   Bitmask high            16 bits
                      (        forth.asm):02875         * 4,s   Bitmask low             16 bits
                      (        forth.asm):02876         * 6,s   Quotient high           16 bits
                      (        forth.asm):02877         * 8,s   Quotient low            16 bits
                      (        forth.asm):02878         * 10,s  Numerator high          16 bits
                      (        forth.asm):02879         * 12,s  Numerator low           16 bits
                      (        forth.asm):02880         * Denominator is at UBASE+1     8 bits
F473 11C61F           (        forth.asm):02881 (3)             ldf     #31             32 bits to go
F476 6861             (        forth.asm):02882 (6+1)   @cvt1   lsl     1,s             R := R << 1
                      (        forth.asm):02883         * We need to extract bit <f> from the numerator.
F478 306A             (        forth.asm):02884 (4+1)           leax    10,s            Numerator MSB address
F47A 1FF8             (        forth.asm):02885 (4)             tfr     f,a             Not to alter the stack structure
F47C 44               (        forth.asm):02886 (1)             lsra                    OffsetX: 3 - F >> 3
F47D 44               (        forth.asm):02887 (1)             lsra
F47E 44               (        forth.asm):02888 (1)             lsra
F47F C603             (        forth.asm):02889 (2)             ldb     #3
F481 103289           (        forth.asm):02890 (4)             subr    a,b
F484 3A               (        forth.asm):02891 (1)             abx
F485 A684             (        forth.asm):02892 (4+0)           lda     ,x
F487 1FF9             (        forth.asm):02893 (4)             tfr     f,b             Bitno: F & 7
F489 C407             (        forth.asm):02894 (2)             andb    #7
                      (        forth.asm):02895         * At this point, A has the data we're interested in. B has the bit number.
F48B 5D               (        forth.asm):02896 (1)     @cvtex  tstb
F48C 2704             (        forth.asm):02897 (3)             beq     @cvtfnd         Bit 0 of A has the data
F48E 44               (        forth.asm):02898 (1)             lsra
F48F 5A               (        forth.asm):02899 (1)             decb
F490 20F9             (        forth.asm):02900 (3)             bra     @cvtex
F492 8401             (        forth.asm):02901 (2)     @cvtfnd anda    #1
F494 AA61             (        forth.asm):02902 (4+1)           ora     1,s             R(0) := N(i)
F496 A761             (        forth.asm):02903 (4+1)           sta     1,s             Update the remainder
F498 9119             (        forth.asm):02904 (3)             cmpa    UBASE+1
F49A 2512             (        forth.asm):02905 (3)             blo     @cvt5
F49C 9019             (        forth.asm):02906 (3)             suba    UBASE+1
F49E A761             (        forth.asm):02907 (4+1)           sta     1,s             R := R - D
                      (        forth.asm):02908         * Q(i) := 1 (use the bitmask).
F4A0 EC66             (        forth.asm):02909 (5+1)           ldd     6,s             Quotient high
F4A2 10AA62           (        forth.asm):02910 (6+1)           ord     2,s             Bitmask high
F4A5 ED66             (        forth.asm):02911 (5+1)           std     6,s
F4A7 EC68             (        forth.asm):02912 (5+1)           ldd     8,s             Quotient low
F4A9 10AA64           (        forth.asm):02913 (6+1)           ord     4,s             Bitmask low
F4AC ED68             (        forth.asm):02914 (5+1)           std     8,s
                      (        forth.asm):02915         * Shift the bitmask 1 bit right.
F4AE EC62             (        forth.asm):02916 (5+1)   @cvt5   ldd     2,s
F4B0 1044             (        forth.asm):02917 (2)             lsrd
F4B2 ED62             (        forth.asm):02918 (5+1)           std     2,s
F4B4 EC64             (        forth.asm):02919 (5+1)           ldd     4,s
F4B6 1046             (        forth.asm):02920 (2)             rord
F4B8 ED64             (        forth.asm):02921 (5+1)           std     4,s
F4BA 115A             (        forth.asm):02922 (2)             decf
F4BC 2CB8             (        forth.asm):02923 (3)             bge     @cvt1
                      (        forth.asm):02924         * Convert the remainder to a digit expressed in BASE.
F4BE E661             (        forth.asm):02925 (4+1)           ldb     1,s
F4C0 8630             (        forth.asm):02926 (2)             lda     #'0
F4C2 C10A             (        forth.asm):02927 (2)             cmpb    #10             B has the digit we want converted to BASE
F4C4 2502             (        forth.asm):02928 (3)             bcs     @cvtdgt
F4C6 8637             (        forth.asm):02929 (2)             lda     #'A-10
F4C8 103089           (        forth.asm):02930 (4)     @cvtdgt addr    a,b
F4CB 8D20             (        forth.asm):02931 (6)             bsr     INSBPAD         Prepend B to the string currently in PAD
F4CD 0D2A             (        forth.asm):02932 (4)             tst     CVTFCN
F4CF 2711             (        forth.asm):02933 (3)             beq     @cvtend         Function 0 is straight #, i.e. we're done here
                      (        forth.asm):02934         * Function 1 is #S, we iterate unless the quotient is 0.
F4D1 EC68             (        forth.asm):02935 (5+1)           ldd     8,s
F4D3 10AA66           (        forth.asm):02936 (6+1)           ord     6,s
F4D6 270A             (        forth.asm):02937 (3)             beq     @cvtend
F4D8 AE68             (        forth.asm):02938 (5+1)           ldx     8,s             New numerator low
F4DA 10A666           (        forth.asm):02939 (6+1)           ldw     6,s             New numerator high
F4DD 326E             (        forth.asm):02940 (4+1)           leas    14,s            Discard the stack frame
F4DF 7EF45F           (        forth.asm):02941 (3)             jmp     CVT1            And go at it again
                      (        forth.asm):02942         * Push back the quotient on the data stack (low then high cell).
F4E2 AE68             (        forth.asm):02943 (5+1)   @cvtend ldx     8,s
F4E4 3610             (        forth.asm):02944                 UCNPUSH
F4E6 AE66             (        forth.asm):02945 (5+1)           ldx     6,s
F4E8 326E             (        forth.asm):02946 (4+1)           leas    14,s            Discard the stack frame
F4EA 3610             (        forth.asm):02947                 UCNPUSH
F4EC 39               (        forth.asm):02948 (4)             rts
                      (        forth.asm):02949         
                      (        forth.asm):02950         * Insert the character in B in front of the string at PADBUF.
F4ED 8E0134           (        forth.asm):02951 (3)     INSBPAD ldx     #PADBUF
F4F0 BDE1AF           (        forth.asm):02952 (7)             jsr     SLEN
F4F3 103061           (        forth.asm):02953 (4)             addr    w,x             X points to the PAD string's NUL terminator
F4F6 105C             (        forth.asm):02954 (2)             incw                    Include the terminator
F4F8 3101             (        forth.asm):02955 (4+1)           leay    1,x
F4FA 113912           (        forth.asm):02956 (6+?)           tfm     x-,y-
F4FD D734             (        forth.asm):02957 (3)             stb     PADBUF
F4FF 39               (        forth.asm):02958 (4)             rts
                      (        forth.asm):02959         
F500 02               (        forth.asm):02960         CVTB    fcb     2
F501 3C23             (        forth.asm):02961                 fcc     '<#'
F503 F450             (        forth.asm):02962                 fdb     CVT
F505 C7               (        forth.asm):02963                 RFCS
F506 BDE2A7           (        forth.asm):02964 (7)             jsr     CKBASE          Sanity check. BASE can be altered at any time
F509 0F34             (        forth.asm):02965 (5)             clr     PADBUF
F50B 39               (        forth.asm):02966 (4)             rts
                      (        forth.asm):02967         
F50C 01               (        forth.asm):02968         DOT     fcb     1               79-STANDARD (REQ193)
F50D 2E               (        forth.asm):02969                 fcc     '.'
F50E F500             (        forth.asm):02970                 fdb     CVTB
F510 C7               (        forth.asm):02971                 RFCS
F511 8601             (        forth.asm):02972 (2)             lda     #1
F513 972C             (        forth.asm):02973 (3)             sta     CVISSGN         Force a signed number conversion
F515 BDE6A2           (        forth.asm):02974 (7)     ptop0   jsr     NPOP
F518 BDE319           (        forth.asm):02975 (7)             jsr     CVNSTR
F51B 8E039A           (        forth.asm):02976 (3)             ldx     #TBUFF
F51E 8620             (        forth.asm):02977 (2)             lda     #SP
F520 A180             (        forth.asm):02978 (4+1)   @ptop1  cmpa    ,x+             Skip leading spaces
F522 27FC             (        forth.asm):02979 (3)             beq     @ptop1
F524 301F             (        forth.asm):02980 (4+1)           leax    -1,x            Point to actual string start address
F526 BDE1E2           (        forth.asm):02981 (7)             jsr     PUTS
F529 7EE1BE           (        forth.asm):02982 (3)             jmp     PUTCH           Extra space after printing a number
                      (        forth.asm):02983         
F52C 02               (        forth.asm):02984         UDOT    fcb     2               79-STANDARD (REQ106)
F52D 552E             (        forth.asm):02985                 fcc     'U.'
F52F F50C             (        forth.asm):02986                 fdb     DOT
F531 C7               (        forth.asm):02987                 RFCS
F532 0F2C             (        forth.asm):02988 (5)             clr     CVISSGN         Conversion is unsigned
F534 20DF             (        forth.asm):02989 (3)             bra     ptop0
                      (        forth.asm):02990         
F536 02               (        forth.asm):02991         DOTR    fcb     2               79-STANDARD (REF)
F537 2E52             (        forth.asm):02992                 fcc     '.R'
F539 F52C             (        forth.asm):02993                 fdb     UDOT
F53B C7               (        forth.asm):02994                 RFCS
F53C 8601             (        forth.asm):02995 (2)             lda     #1
F53E 972C             (        forth.asm):02996 (3)             sta     CVISSGN
F540 BDE6A2           (        forth.asm):02997 (7)     DOTR0   jsr     NPOP
F543 3410             (        forth.asm):02998 (4+2)           pshs    x               Length parameter value
F545 BDE6A2           (        forth.asm):02999 (7)             jsr     NPOP
F548 BDE319           (        forth.asm):03000 (7)             jsr     CVNSTR
F54B 8E039A           (        forth.asm):03001 (3)             ldx     #TBUFF
F54E 8620             (        forth.asm):03002 (2)             lda     #SP
F550 A180             (        forth.asm):03003 (4+1)   @dotr1  cmpa    ,x+
F552 27FC             (        forth.asm):03004 (3)             beq     @dotr1          Skip leading spaces
F554 301F             (        forth.asm):03005 (4+1)           leax    -1,x
F556 BDE1AF           (        forth.asm):03006 (7)             jsr     SLEN            String length is returned in W
F559 3506             (        forth.asm):03007 (4+2)           puls    d
F55B 1E06             (        forth.asm):03008 (5)             exg     d,w
F55D 103206           (        forth.asm):03009 (4)             subr    d,w
F560 2F0D             (        forth.asm):03010 (3)             ble     @dotr3
F562 8620             (        forth.asm):03011 (2)             lda     #SP
F564 105D             (        forth.asm):03012 (2)     @dotr2  tstw
F566 2707             (        forth.asm):03013 (3)             beq     @dotr3
F568 BDE1BE           (        forth.asm):03014 (7)             jsr     PUTCH
F56B 105A             (        forth.asm):03015 (2)             decw
F56D 20F5             (        forth.asm):03016 (3)             bra     @dotr2
F56F 7EE1E2           (        forth.asm):03017 (3)     @dotr3  jmp     PUTS
                      (        forth.asm):03018         
F572 03               (        forth.asm):03019         UDOTR   fcb     3               79-STANDARD (REF216)
F573 552E52           (        forth.asm):03020                 fcc     'U.R'
F576 F536             (        forth.asm):03021                 fdb     DOTR
F578 C7               (        forth.asm):03022                 RFCS
F579 0F2C             (        forth.asm):03023 (5)             clr     CVISSGN
F57B 20C3             (        forth.asm):03024 (3)             bra     DOTR0
                      (        forth.asm):03025         
F57D 02               (        forth.asm):03026         BL      fcb     2               79-STANDARD (REF176)
F57E 424C             (        forth.asm):03027                 fcc     'BL'
F580 F572             (        forth.asm):03028                 fdb     UDOTR
F582 C7               (        forth.asm):03029                 RFCS
F583 8E0020           (        forth.asm):03030 (3)             ldx     #SP
F586 7EE694           (        forth.asm):03031 (3)             jmp     NPUSH
                      (        forth.asm):03032         
F589 05               (        forth.asm):03033         SPACE   fcb     5               79-STANDARD (REQ232)
F58A 5350414345       (        forth.asm):03034                 fcc     'SPACE'
F58F F57D             (        forth.asm):03035                 fdb     BL
F591 C7               (        forth.asm):03036                 RFCS
F592 8620             (        forth.asm):03037 (2)             lda     #SP
F594 7EE1BE           (        forth.asm):03038 (3)             jmp     PUTCH
                      (        forth.asm):03039         
F597 06               (        forth.asm):03040         SPACES  fcb     6               79-STANDARD (REQ231)
F598 535041434553     (        forth.asm):03041                 fcc     'SPACES'
F59E F589             (        forth.asm):03042                 fdb     SPACE
F5A0 C7               (        forth.asm):03043                 RFCS
F5A1 BDE6A2           (        forth.asm):03044 (7)             jsr     NPOP
F5A4 1F16             (        forth.asm):03045 (4)             tfr     x,w
F5A6 8620             (        forth.asm):03046 (2)             lda     #SP
F5A8 BDE1BE           (        forth.asm):03047 (7)     @spcs1  jsr     PUTCH
F5AB 105A             (        forth.asm):03048 (2)             decw
F5AD 26F9             (        forth.asm):03049 (3)             bne     @spcs1
F5AF 39               (        forth.asm):03050 (4)             rts
                      (        forth.asm):03051         
F5B0 04               (        forth.asm):03052         PAGE    fcb     4               79-STANDARD (REF)
F5B1 50414745         (        forth.asm):03053                 fcc     'PAGE'
F5B5 F597             (        forth.asm):03054                 fdb     SPACES
F5B7 C7               (        forth.asm):03055                 RFCS
F5B8 860C             (        forth.asm):03056 (2)             lda     #FF
F5BA 7EE1BE           (        forth.asm):03057 (3)             jmp     PUTCH
                      (        forth.asm):03058         
F5BD 02               (        forth.asm):03059         CRLF    fcb     2               79-STANDARD (REQ160)
F5BE 4352             (        forth.asm):03060                 fcc     'CR'
F5C0 F5B0             (        forth.asm):03061                 fdb     PAGE
F5C2 C7               (        forth.asm):03062                 RFCS
F5C3 7EE1EF           (        forth.asm):03063 (3)             jmp     PUTCR
                      (        forth.asm):03064         
F5C6 03               (        forth.asm):03065         PAD     fcb     3               79-STANDARD (REQ226)
F5C7 504144           (        forth.asm):03066                 fcc     'PAD'
F5CA F5BD             (        forth.asm):03067                 fdb     CRLF
F5CC C7               (        forth.asm):03068                 RFCS
F5CD 8E0134           (        forth.asm):03069 (3)             ldx     #PADBUF
F5D0 7EE694           (        forth.asm):03070 (3)             jmp     NPUSH
                      (        forth.asm):03071         
F5D3 04               (        forth.asm):03072         TYPE    fcb     4               79-STANDARD (REQ222)
F5D4 54595045         (        forth.asm):03073                 fcc     'TYPE'          ( addr bcount -- )
F5D8 F5C6             (        forth.asm):03074                 fdb     PAD
F5DA C7               (        forth.asm):03075                 RFCS
F5DB BDE6A2           (        forth.asm):03076 (7)             jsr     NPOP            Character count (signed)
F5DE 1F16             (        forth.asm):03077 (4)             tfr     x,w
F5E0 BDE6A2           (        forth.asm):03078 (7)             jsr     NPOP            Buffer address
F5E3 105D             (        forth.asm):03079 (2)             tstw                    
F5E5 2E01             (        forth.asm):03080 (3)     @type0  bgt     @type1
F5E7 39               (        forth.asm):03081 (4)             rts
F5E8 A680             (        forth.asm):03082 (4+1)   @type1  lda     ,x+
F5EA BDE1BE           (        forth.asm):03083 (7)             jsr     PUTCH
F5ED 105A             (        forth.asm):03084 (2)             decw
F5EF 20F4             (        forth.asm):03085 (3)             bra     @type0
                      (        forth.asm):03086         
F5F1 05               (        forth.asm):03087         COUNT   fcb     5               79-STANDARD (REQ159)
F5F2 434F554E54       (        forth.asm):03088                 fcc     'COUNT'
F5F7 F5D3             (        forth.asm):03089                 fdb     TYPE
F5F9 C7               (        forth.asm):03090                 RFCS
F5FA BDE6A2           (        forth.asm):03091 (7)             jsr     NPOP
F5FD E680             (        forth.asm):03092 (4+1)           ldb     ,x+
F5FF 3610             (        forth.asm):03093                 UCNPUSH                 B is preserved
F601 4F               (        forth.asm):03094 (1)             clra
F602 1F01             (        forth.asm):03095 (4)             tfr     d,x
F604 7EE694           (        forth.asm):03096 (3)             jmp     NPUSH
                      (        forth.asm):03097         
F607 09               (        forth.asm):03098         DASHTR  fcb     9               79-STANDARD (REQ148)
F608 2D545241494C494E (        forth.asm):03099                 fcc     '-TRAILING'     ( addr n1 -- addr n2 )
     47
F611 F5F1             (        forth.asm):03100                 fdb     COUNT
F613 C7               (        forth.asm):03101                 RFCS
F614 BDE6A2           (        forth.asm):03102 (7)             jsr     NPOP            N1 to X
F617 1F10             (        forth.asm):03103 (4)             tfr     x,d             N1 to D
F619 BDE6A2           (        forth.asm):03104 (7)             jsr     NPOP            ADDR to X
F61C 1F12             (        forth.asm):03105 (4)             tfr     x,y             Backup to I
F61E 104D             (        forth.asm):03106 (2)             tstd                    Input character count (N1)
F620 2D1B             (        forth.asm):03107 (3)             blt     @invpar         Cannot be < 0
F622 308B             (        forth.asm):03108 (4+2)           leax    d,x             X has ADDR+N1
F624 1F06             (        forth.asm):03109 (4)             tfr     d,w             W has N1
F626 105D             (        forth.asm):03110 (2)     @cknxtb tstw
F628 270A             (        forth.asm):03111 (3)             beq     @ckdone
F62A A682             (        forth.asm):03112 (4+1)           lda     ,-x
F62C 105A             (        forth.asm):03113 (2)             decw
F62E 8120             (        forth.asm):03114 (2)             cmpa    #SP
F630 27F4             (        forth.asm):03115 (3)             beq     @cknxtb         Iterate over to the previous byte
F632 105C             (        forth.asm):03116 (2)             incw
F634 1F21             (        forth.asm):03117 (4)     @ckdone tfr     y,x
F636 3610             (        forth.asm):03118                 UCNPUSH                 String base address
F638 1F61             (        forth.asm):03119 (4)             tfr     w,x
F63A 3610             (        forth.asm):03120                 UCNPUSH                 Updated character count
F63C 39               (        forth.asm):03121 (4)             rts
F63D C60D             (        forth.asm):03122 (2)     @invpar ldb     #13             Invalid parameter
F63F BDE61B           (        forth.asm):03123 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):03124         
F642 06               (        forth.asm):03125         EXPECT  fcb     6               79-STANDARD (REQ189)
F643 455850454354     (        forth.asm):03126                 fcc     'EXPECT'        ( addr count -- )
F649 F607             (        forth.asm):03127                 fdb     DASHTR
F64B C7               (        forth.asm):03128                 RFCS
F64C BDE6A2           (        forth.asm):03129 (7)             jsr     NPOP
F64F 1F10             (        forth.asm):03130 (4)             tfr     x,d             Buffer length to B
F651 BDE6A2           (        forth.asm):03131 (7)             jsr     NPOP            Buffer address to X. B is preserved
F654 5D               (        forth.asm):03132 (1)             tstb
F655 2701             (        forth.asm):03133 (3)             beq     @expct1
F657 5C               (        forth.asm):03134 (1)             incb                    Account for the NUL terminator
F658 7EE205           (        forth.asm):03135 (3)     @expct1 jmp     GETS
                      (        forth.asm):03136         
F65B 49               (        forth.asm):03137         TERPRET fcb     $49             79-STANDARD (REF) I make this compile time only
F65C 494E544552505245 (        forth.asm):03138                 fcc     'INTERPRET'     ( -- )
     54
F665 F642             (        forth.asm):03139                 fdb     EXPECT
F667 C7               (        forth.asm):03140                 RFCS
                      (        forth.asm):03141         * Obtain a base buffer address based on the value of BLK.
F668 DC1E             (        forth.asm):03142 (4)             ldd     UBLK
F66A 2605             (        forth.asm):03143 (3)             bne     @notser
F66C 8E02C6           (        forth.asm):03144 (3)             ldx     #CMDBUF         Base buffer address for serial line input
F66F 200B             (        forth.asm):03145 (3)             bra     @gocmd
                      (        forth.asm):03146         * BLK is NZ, map the block in memory.
F671 1F01             (        forth.asm):03147 (4)     @notser tfr     d,x             Block number to X
F673 BDE694           (        forth.asm):03148 (7)             jsr     NPUSH
F676 BDE90F           (        forth.asm):03149                 RFXT    jsr,BLOCK+8     XT for BLOCK. Map the block in
F679 BDE6A2           (        forth.asm):03150 (7)             jsr     NPOP            Retrieve buffer address
                      (        forth.asm):03151         * Note: >IN is supposed to have been set by the caller!
F67C 9F22             (        forth.asm):03152 (4)     @gocmd  stx     BSBFADR
F67E 7EE0C0           (        forth.asm):03153 (3)             jmp     _INTERP         Finally invoke _INTERP.
                      (        forth.asm):03154         
F681 04               (        forth.asm):03155         LOAD    fcb     4               79-STANDARD (REQ202)
F682 4C4F4144         (        forth.asm):03156                 fcc     'LOAD'          ( blk -- )
F686 F65B             (        forth.asm):03157                 fdb     TERPRET
F688 C7               (        forth.asm):03158                 RFCS
F689 BDE6A2           (        forth.asm):03159 (7)             jsr     NPOP
F68C 1037C1           (        forth.asm):03160 (4)             cmpr    0,x
F68F 2601             (        forth.asm):03161 (3)             bne     LOAD1
F691 39               (        forth.asm):03162 (4)             rts                     Block 0 is _not_ loadable
F692 3410             (        forth.asm):03163 (4+2)   LOAD1   pshs    x
F694 9E1E             (        forth.asm):03164 (4)             ldx     UBLK
F696 BDE6B1           (        forth.asm):03165 (7)             jsr     RPUSH           Push BLK on the return stack
F699 9E1C             (        forth.asm):03166 (4)             ldx     UTOIN
F69B BDE6B1           (        forth.asm):03167 (7)             jsr     RPUSH           Push >IN on the return stack
F69E 3510             (        forth.asm):03168 (4+2)           puls    x
F6A0 9F1E             (        forth.asm):03169 (4)             stx     UBLK            Update BLK with the LOAD argument
F6A2 104F             (        forth.asm):03170 (2)             clrd
F6A4 DD1C             (        forth.asm):03171 (4)             std     UTOIN           Clear >IN
                      (        forth.asm):03172         * Map the new BLK in, interpret code from there.
F6A6 8DC0             (        forth.asm):03173                 RFXT    bsr,TERPRET+12  XT for INTERPRET
F6A8 BDE6CF           (        forth.asm):03174 (7)             jsr     RPOP
F6AB 9F1C             (        forth.asm):03175 (4)             stx     UTOIN           Restore >IN from the return stack
F6AD BDE6CF           (        forth.asm):03176 (7)             jsr     RPOP
F6B0 9F1E             (        forth.asm):03177 (4)             stx     UBLK            Restore BLK from the return stack
F6B2 7EE6E8           (        forth.asm):03178 (3)             jmp     BLK2BB          Update BSBFADR based on the new BLK value
                      (        forth.asm):03179         
F6B5 04               (        forth.asm):03180         THRU    fcb     4               79-STANDARD (REF)
F6B6 54485255         (        forth.asm):03181                 fcc     'THRU'          ( lowblk highblk -- )
F6BA F681             (        forth.asm):03182                 fdb     LOAD
F6BC C7               (        forth.asm):03183                 RFCS
F6BD BDE6A2           (        forth.asm):03184 (7)             jsr     NPOP
F6C0 1F12             (        forth.asm):03185 (4)             tfr     x,y             Y has highblk
F6C2 BDE6A2           (        forth.asm):03186 (7)             jsr     NPOP            X has lowblk -- both are unsigned numbers
F6C5 103721           (        forth.asm):03187 (4)     @thrlop cmpr    y,x
F6C8 2301             (        forth.asm):03188 (3)             bls     @cont
F6CA 39               (        forth.asm):03189 (4)             rts
F6CB 3610             (        forth.asm):03190         @cont   UCNPUSH
F6CD 3410             (        forth.asm):03191 (4+2)           pshs    x
F6CF 8DB8             (        forth.asm):03192                 RFXT    bsr,LOAD+7      XT for LOAD
F6D1 3510             (        forth.asm):03193 (4+2)           puls    x
F6D3 3001             (        forth.asm):03194 (4+1)           leax    1,x
F6D5 20EE             (        forth.asm):03195 (3)             bra     @thrlop
                      (        forth.asm):03196         
F6D7 83               (        forth.asm):03197         NXTBLK  fcb     $83             79-STANDARD (REF131)
F6D8 2D2D3E           (        forth.asm):03198                 fcc     '-->'           ( -- )
F6DB F6B5             (        forth.asm):03199                 fdb     THRU
F6DD C7               (        forth.asm):03200                 RFCS
F6DE 9E1E             (        forth.asm):03201 (4)             ldx     UBLK
F6E0 3001             (        forth.asm):03202 (4+1)           leax    1,x
F6E2 DC1E             (        forth.asm):03203 (4)     NXTBLK1 ldd     UBLK
F6E4 2603             (        forth.asm):03204 (3)             bne     @nfrmb0         Not invoked from block 0 (the console)
                      (        forth.asm):03205         * --> or CONTINUED are being invoked from the console. Flag that condition
                      (        forth.asm):03206         * as a hint to the interpreter so that feedback is provided even if we are
                      (        forth.asm):03207         * back from a block.
F6E6 4C               (        forth.asm):03208 (1)             inca                    1 to A
F6E7 9730             (        forth.asm):03209 (3)             sta     NBCTFB0
F6E9 9F1E             (        forth.asm):03210 (4)     @nfrmb0 stx     UBLK            Update BLK
F6EB 104F             (        forth.asm):03211 (2)             clrd
F6ED DD1C             (        forth.asm):03212 (4)             std     UTOIN           0 >IN !
                      (        forth.asm):03213         * Map the new BLK in, interpret code from there.
F6EF 7EF668           (        forth.asm):03214                 RFXT    jmp,TERPRET+12  XT for INTERPRET
                      (        forth.asm):03215         
F6F2 89               (        forth.asm):03216         CONTIND fcb     $89             79-STANDARD (REF)
F6F3 434F4E54494E5545 (        forth.asm):03217                 fcc     'CONTINUED'     ( nextblk -- )
     44
F6FC F6D7             (        forth.asm):03218                 fdb     NXTBLK
F6FE C7               (        forth.asm):03219                 RFCS
F6FF BDE6A2           (        forth.asm):03220 (7)             jsr     NPOP            NEXTBLK to X
F702 1037C1           (        forth.asm):03221 (4)             cmpr    0,x             Cannot interpret from block 0!
F705 26DB             (        forth.asm):03222 (3)             bne     NXTBLK1
F707 C60D             (        forth.asm):03223 (2)             ldb     #13             Illegal argument
F709 BDE61B           (        forth.asm):03224 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):03225         
F70C 02               (        forth.asm):03226         MILLIS  fcb     2               79-STANDARD (REF)
F70D 4D53             (        forth.asm):03227                 fcc     'MS'            ( mscount -- )
F70F F6F2             (        forth.asm):03228                 fdb     CONTIND
F711 C7               (        forth.asm):03229                 RFCS
F712 BDE6A2           (        forth.asm):03230 (7)             jsr     NPOP
F715 1037C1           (        forth.asm):03231 (4)             cmpr    0,x
F718 2601             (        forth.asm):03232 (3)             bne     MILLIS1
F71A 39               (        forth.asm):03233 (4)             rts
F71B CC03E2           (        forth.asm):03234 (3)     MILLIS1 ldd     #MSLCNT
F71E 104A             (        forth.asm):03235 (2)     @ms2    decd
F720 26FC             (        forth.asm):03236 (3)             bne     @ms2
F722 301F             (        forth.asm):03237 (4+1)           leax    -1,x
F724 26F5             (        forth.asm):03238 (3)             bne     MILLIS1
F726 39               (        forth.asm):03239 (4)             rts
                      (        forth.asm):03240         
F727 04               (        forth.asm):03241         KEYP    fcb     4               ANSI (Facility)
F728 4B45593F         (        forth.asm):03242                 fcc     'KEY?'          ( -- flag )
F72C F70C             (        forth.asm):03243                 fdb     MILLIS
F72E C7               (        forth.asm):03244                 RFCS
F72F 1FC1             (        forth.asm):03245 (4)             tfr     0,x
F731 8615             (        forth.asm):03246 (2)             lda     #ACIRTS0
F733 B7D800           (        forth.asm):03247 (4)             sta     ACIACTL
F736 8601             (        forth.asm):03248 (2)             lda     #ACIRDRF
F738 B5D800           (        forth.asm):03249 (4)             bita    ACIACTL
F73B 2702             (        forth.asm):03250 (3)             beq     @keyp1
F73D 3001             (        forth.asm):03251 (4+1)           leax    1,x
F73F 8655             (        forth.asm):03252 (2)     @keyp1  lda     #ACIRTS1
F741 B7D800           (        forth.asm):03253 (4)             sta     ACIACTL
F744 7EE694           (        forth.asm):03254 (3)             jmp     NPUSH
                      (        forth.asm):03255         
F747 03               (        forth.asm):03256         KEY     fcb     3               79-STANDARD (REQ100)
F748 4B4559           (        forth.asm):03257                 fcc     'KEY'
F74B F727             (        forth.asm):03258                 fdb     KEYP
F74D C7               (        forth.asm):03259                 RFCS
F74E BDE1CD           (        forth.asm):03260 (7)             jsr     GETCH
F751 1F89             (        forth.asm):03261 (4)             tfr     a,b
F753 4F               (        forth.asm):03262 (1)             clra
F754 1F01             (        forth.asm):03263 (4)             tfr     d,x
F756 7EE694           (        forth.asm):03264 (3)             jmp     NPUSH
                      (        forth.asm):03265         
F759 04               (        forth.asm):03266         EMIT    fcb     4               79-STANDARD (REQ207)
F75A 454D4954         (        forth.asm):03267                 fcc     'EMIT'
F75E F747             (        forth.asm):03268                 fdb     KEY
F760 C7               (        forth.asm):03269                 RFCS
F761 BDE6A2           (        forth.asm):03270 (7)             jsr     NPOP
F764 1F10             (        forth.asm):03271 (4)             tfr     x,d
F766 1F98             (        forth.asm):03272 (4)             tfr     b,a
F768 7EE1BE           (        forth.asm):03273 (3)             jmp     PUTCH
                      (        forth.asm):03274         
F76B 01               (        forth.asm):03275         PLUS    fcb     1               79-STANDARD (REQ121)
F76C 2B               (        forth.asm):03276                 fcc     '+'             ( n1 n2 -- sum )
F76D F759             (        forth.asm):03277                 fdb     EMIT
F76F C7               (        forth.asm):03278                 RFCS
F770 CC0242BDE30E     (        forth.asm):03279                 MINDREQ 2               We need at least two cells stacked up
F776 EC42             (        forth.asm):03280 (5+1)           ldd     2,u             N1
F778 E3C4             (        forth.asm):03281 (5+0)           addd    ,u              N2
F77A ED42             (        forth.asm):03282 (5+1)           std     2,u             SUM
F77C 3342             (        forth.asm):03283 (4+1)           leau    2,u             Drop the top cell
F77E 39               (        forth.asm):03284 (4)             rts
                      (        forth.asm):03285         
F77F 02               (        forth.asm):03286         ONEP    fcb     2               79-STANDARD (REQ107)
F780 312B             (        forth.asm):03287                 fcc     '1+'
F782 F76B             (        forth.asm):03288                 fdb     PLUS
F784 C7               (        forth.asm):03289                 RFCS
F785 CC0244BDE30E     (        forth.asm):03290                 MINDREQ 1               We need at least one cell stacked up
F78B ECC4             (        forth.asm):03291 (5+0)           ldd     ,u
F78D 104C             (        forth.asm):03292 (2)             incd
F78F EDC4             (        forth.asm):03293 (5+0)           std     ,u
F791 39               (        forth.asm):03294 (4)             rts
                      (        forth.asm):03295         
F792 02               (        forth.asm):03296         TWOP    fcb     2               79-STANDARD (REQ135)
F793 322B             (        forth.asm):03297                 fcc     '2+'            ( n -- n+2 )
F795 F77F             (        forth.asm):03298                 fdb     ONEP
F797 C7               (        forth.asm):03299                 RFCS
F798 CC0244BDE30E     (        forth.asm):03300                 MINDREQ 1
F79E ECC4             (        forth.asm):03301 (5+0)           ldd     ,u
F7A0 C30002           (        forth.asm):03302 (3)             addd    #2
F7A3 EDC4             (        forth.asm):03303 (5+0)           std     ,u
F7A5 39               (        forth.asm):03304 (4)             rts
                      (        forth.asm):03305         
F7A6 01               (        forth.asm):03306         MINUS   fcb     1               79-STANDARD (REQ134)
F7A7 2D               (        forth.asm):03307                 fcc     '-'             ( n1 n2 -- dif )
F7A8 F792             (        forth.asm):03308                 fdb     TWOP
F7AA C7               (        forth.asm):03309                 RFCS
F7AB CC0242BDE30E     (        forth.asm):03310                 MINDREQ 2               We need at least two cells stacked up
F7B1 EC42             (        forth.asm):03311 (5+1)           ldd     2,u             N1
F7B3 A3C4             (        forth.asm):03312 (5+0)           subd    ,u              N2
F7B5 ED42             (        forth.asm):03313 (5+1)           std     2,u             DIF
F7B7 3342             (        forth.asm):03314 (4+1)           leau    2,u             Drop the top cell
F7B9 39               (        forth.asm):03315 (4)             rts
                      (        forth.asm):03316         
F7BA 02               (        forth.asm):03317         ONEM    fcb     2               79-STANDARD (REQ105)
F7BB 312D             (        forth.asm):03318                 fcc     '1-'
F7BD F7A6             (        forth.asm):03319                 fdb     MINUS
F7BF C7               (        forth.asm):03320                 RFCS
F7C0 CC0244BDE30E     (        forth.asm):03321                 MINDREQ 1               We need at least one cell stacked up
F7C6 ECC4             (        forth.asm):03322 (5+0)           ldd     ,u
F7C8 104A             (        forth.asm):03323 (2)             decd
F7CA EDC4             (        forth.asm):03324 (5+0)           std     ,u
F7CC 39               (        forth.asm):03325 (4)             rts
                      (        forth.asm):03326         
F7CD 02               (        forth.asm):03327         TWOM    fcb     2               79-STANDARD (REQ129)
F7CE 322D             (        forth.asm):03328                 fcc     '2-'
F7D0 F7BA             (        forth.asm):03329                 fdb     ONEM
F7D2 C7               (        forth.asm):03330                 RFCS
F7D3 CC0244BDE30E     (        forth.asm):03331                 MINDREQ 1               We need at least one cell stacked up
F7D9 ECC4             (        forth.asm):03332 (5+0)           ldd     ,u
F7DB 830002           (        forth.asm):03333 (3)             subd    #2
F7DE EDC4             (        forth.asm):03334 (5+0)           std     ,u
F7E0 39               (        forth.asm):03335 (4)             rts
                      (        forth.asm):03336         
F7E1 01               (        forth.asm):03337         ZEROL   fcb     1               Non-standard
F7E2 30               (        forth.asm):03338                 fcc     '0'
F7E3 F7CD             (        forth.asm):03339                 fdb     TWOM
F7E5 C7               (        forth.asm):03340                 RFCS
F7E6 1FC1             (        forth.asm):03341 (4)             tfr     0,x
F7E8 7EE694           (        forth.asm):03342 (3)             jmp     NPUSH
                      (        forth.asm):03343         
F7EB 01               (        forth.asm):03344         ONEL    fcb     1               Non-standard
F7EC 31               (        forth.asm):03345                 fcc     '1'
F7ED F7E1             (        forth.asm):03346                 fdb     ZEROL
F7EF C7               (        forth.asm):03347                 RFCS
F7F0 8E0001           (        forth.asm):03348 (3)             ldx     #1
F7F3 7EE694           (        forth.asm):03349 (3)             jmp     NPUSH
                      (        forth.asm):03350         
F7F6 01               (        forth.asm):03351         TWOL    fcb     1               Non-standard
F7F7 32               (        forth.asm):03352                 fcc     '2'
F7F8 F7EB             (        forth.asm):03353                 fdb     ONEL
F7FA C7               (        forth.asm):03354                 RFCS
F7FB 8E0002           (        forth.asm):03355 (3)             ldx     #2
F7FE 7EE694           (        forth.asm):03356 (3)             jmp     NPUSH
                      (        forth.asm):03357         
F801 05               (        forth.asm):03358         SHIFT   fcb     5               79-STANDARD (Ref)
F802 5348494654       (        forth.asm):03359                 fcc     'SHIFT'
F807 F7F6             (        forth.asm):03360                 fdb     TWOL
F809 C7               (        forth.asm):03361                 RFCS
F80A CC0242BDE30E     (        forth.asm):03362                 MINDREQ 2               Two cells need to be stacked up
F810 10A6C4           (        forth.asm):03363 (6+0)           ldw     ,u              Shift bitcount
F813 EC42             (        forth.asm):03364 (5+1)           ldd     2,u             The data itself
F815 105D             (        forth.asm):03365 (2)     @shftlp tstw
F817 270E             (        forth.asm):03366 (3)             beq     @shfdon
F819 2D06             (        forth.asm):03367 (3)             blt     @shftrg
F81B 1048             (        forth.asm):03368 (2)             lsld                    Shift left (W is positive)
F81D 105A             (        forth.asm):03369 (2)             decw
F81F 20F4             (        forth.asm):03370 (3)             bra     @shftlp
F821 1044             (        forth.asm):03371 (2)     @shftrg lsrd                    Shift right (W is negative)
F823 105C             (        forth.asm):03372 (2)             incw
F825 20EE             (        forth.asm):03373 (3)             bra     @shftlp
F827 ED42             (        forth.asm):03374 (5+1)   @shfdon std     2,u             Return value stored there
F829 3342             (        forth.asm):03375 (4+1)           leau    2,u             Drop one cell from the data stack
F82B 39               (        forth.asm):03376 (4)             rts
                      (        forth.asm):03377         
                      (        forth.asm):03378         * Signed multiplication by hardware support.
F82C 01               (        forth.asm):03379         MULT    fcb     1               79-STANDARD (REQ138)
F82D 2A               (        forth.asm):03380                 fcc     '*'
F82E F801             (        forth.asm):03381                 fdb     SHIFT
F830 C7               (        forth.asm):03382                 RFCS
F831 CC0242BDE30E     (        forth.asm):03383                 MINDREQ 2               Two cells need to be stacked up
F837 EC42             (        forth.asm):03384 (5+1)           ldd     2,u
F839 11AFC4           (        forth.asm):03385 (30+0)          muld    ,u
F83C 10A742           (        forth.asm):03386 (6+1)           stw     2,u             Return only the lower 16 bits
F83F 3342             (        forth.asm):03387 (4+1)           leau    2,u             Drop one cell from the data stack
F841 39               (        forth.asm):03388 (4)             rts
                      (        forth.asm):03389         
F842 02               (        forth.asm):03390         TWOTIM  fcb     2               79-STANDARD (REF)
F843 322A             (        forth.asm):03391                 fcc     '2*'
F845 F82C             (        forth.asm):03392                 fdb     MULT
F847 C7               (        forth.asm):03393                 RFCS
F848 CC0244BDE30E     (        forth.asm):03394                 MINDREQ 1               One cell needs to be stacked up
F84E ECC4             (        forth.asm):03395 (5+0)           ldd     ,u
F850 1048             (        forth.asm):03396 (2)             asld
F852 EDC4             (        forth.asm):03397 (5+0)           std     ,u
F854 39               (        forth.asm):03398 (4)             rts
                      (        forth.asm):03399         
F855 02               (        forth.asm):03400         TWODIV  fcb     2
F856 322F             (        forth.asm):03401                 fcc     '2/'
F858 F842             (        forth.asm):03402                 fdb     TWOTIM
F85A C7               (        forth.asm):03403                 RFCS
F85B CC0244BDE30E     (        forth.asm):03404                 MINDREQ 1               One cell needs to be stacked up
F861 ECC4             (        forth.asm):03405 (5+0)           ldd     ,u
F863 1047             (        forth.asm):03406 (2)             asrd
F865 EDC4             (        forth.asm):03407 (5+0)           std     ,u
F867 39               (        forth.asm):03408 (4)             rts
                      (        forth.asm):03409         
                      (        forth.asm):03410         * /, MOD and /MOD are essentially the same function returning
                      (        forth.asm):03411         * the different parts returned by DIVQ.
                      (        forth.asm):03412         * We use a global variable to distinguish which functionality
                      (        forth.asm):03413         * is being requested:
                      (        forth.asm):03414         * 0: return the modulo and the quotient (/MOD).
                      (        forth.asm):03415         * 1: return the modulo only (MOD).
                      (        forth.asm):03416         * 2: return the quotient only (/).
F868 01               (        forth.asm):03417         DIV     fcb     1
F869 2F               (        forth.asm):03418                 fcc     '/'
F86A F855             (        forth.asm):03419                 fdb     TWODIV
F86C C7               (        forth.asm):03420                 RFCS
F86D 8602             (        forth.asm):03421 (2)             lda     #2
F86F 9728             (        forth.asm):03422 (3)             sta     DIVFCN
F871 CC0242BDE30E     (        forth.asm):03423         DIV1    MINDREQ 2
                      (        forth.asm):03424         * Division by zero conditions are dealt with through the trap handler.
F877 104F             (        forth.asm):03425 (2)             clrd
F879 10A642           (        forth.asm):03426 (6+1)           ldw     2,u             Numerator
                      (        forth.asm):03427         * We need a sign extention from W to Q. SEX and SEXW do not cut it.
F87C 114D             (        forth.asm):03428 (2)             tste
F87E 2A02             (        forth.asm):03429 (3)             bpl     @div2
F880 1043             (        forth.asm):03430 (2)             comd
F882 11AEC4           (        forth.asm):03431 (36)    @div2   divq    ,u              Quotient is returned in W, modulo in D
F885 0D28             (        forth.asm):03432 (4)             tst     DIVFCN
F887 2606             (        forth.asm):03433 (3)             bne     @div3
F889 ED42             (        forth.asm):03434 (5+1)           std     2,u             Function 0: return the modulo and the quotient
F88B 10A7C4           (        forth.asm):03435 (6+0)           stw     ,u
F88E 39               (        forth.asm):03436 (4)             rts
F88F 3342             (        forth.asm):03437 (4+1)   @div3   leau    2,u             Drop one cell from the data stack
F891 11D628           (        forth.asm):03438 (4)             ldf     DIVFCN
F894 11C101           (        forth.asm):03439 (3)             cmpf    #1
F897 2603             (        forth.asm):03440 (3)             bne     @div4
F899 EDC4             (        forth.asm):03441 (5+0)           std     ,u              Function 1: return only the modulo
F89B 39               (        forth.asm):03442 (4)             rts
F89C 10A7C4           (        forth.asm):03443 (6+0)   @div4   stw     ,u              Function 2: return only the quotient
F89F 39               (        forth.asm):03444 (4)             rts
                      (        forth.asm):03445         
F8A0 03               (        forth.asm):03446         MOD     fcb     3
F8A1 4D4F44           (        forth.asm):03447                 fcc     'MOD'
F8A4 F868             (        forth.asm):03448                 fdb     DIV
F8A6 C7               (        forth.asm):03449                 RFCS
F8A7 8601             (        forth.asm):03450 (2)             lda     #1
F8A9 9728             (        forth.asm):03451 (3)             sta     DIVFCN
F8AB 20C4             (        forth.asm):03452 (3)             bra     DIV1
                      (        forth.asm):03453         
F8AD 04               (        forth.asm):03454         MDIV    fcb     4
F8AE 2F4D4F44         (        forth.asm):03455                 fcc     '/MOD'
F8B2 F8A0             (        forth.asm):03456                 fdb     MOD
F8B4 C7               (        forth.asm):03457                 RFCS
F8B5 0F28             (        forth.asm):03458 (5)             clr     DIVFCN
F8B7 20B8             (        forth.asm):03459 (3)             bra     DIV1
                      (        forth.asm):03460         
F8B9 02               (        forth.asm):03461         STRSLSH fcb     2
F8BA 2A2F             (        forth.asm):03462                 fcc     '*/'            ( n1 n2 n3 -- n4 [n5] )
F8BC F8AD             (        forth.asm):03463                 fdb     MDIV
F8BE C7               (        forth.asm):03464                 RFCS
F8BF 8601             (        forth.asm):03465 (2)             lda     #1
F8C1 9729             (        forth.asm):03466 (3)             sta     STSLFCN
F8C3 CC0240BDE30E     (        forth.asm):03467         STRSL1  MINDREQ 3
                      (        forth.asm):03468         * Division by zero conditions are dealt with through the trap handler.
F8C9 EC44             (        forth.asm):03469 (5+1)           ldd     4,u             N1
F8CB 11AF42           (        forth.asm):03470 (30+1)          muld    2,u             N2
F8CE 11AEC4           (        forth.asm):03471 (36)            divq    ,u              N3
F8D1 3342             (        forth.asm):03472 (4+1)           leau    2,u
F8D3 0D29             (        forth.asm):03473 (4)             tst     STSLFCN
F8D5 2606             (        forth.asm):03474 (3)             bne     @strsl2         Just the quotient, Ma'am!
F8D7 ED42             (        forth.asm):03475 (5+1)           std     2,u             N4: the modulo
F8D9 10A7C4           (        forth.asm):03476 (6+0)           stw     ,u              N5: the quotient
F8DC 39               (        forth.asm):03477 (4)             rts
F8DD 3342             (        forth.asm):03478 (4+1)   @strsl2 leau    2,u
F8DF 10A7C4           (        forth.asm):03479 (6+0)           stw     ,u              N4
F8E2 39               (        forth.asm):03480 (4)             rts
                      (        forth.asm):03481         
F8E3 05               (        forth.asm):03482         STRSLMD fcb     5
F8E4 2A2F4D4F44       (        forth.asm):03483                 fcc     '*/MOD'
F8E9 F8B9             (        forth.asm):03484                 fdb     STRSLSH
F8EB C7               (        forth.asm):03485                 RFCS
F8EC 0F29             (        forth.asm):03486 (5)             clr     STSLFCN
F8EE 20D3             (        forth.asm):03487 (3)             bra     STRSL1
                      (        forth.asm):03488         
                      (        forth.asm):03489         * Returns the current value of the S register (informational only).
F8F0 01               (        forth.asm):03490         SYSSTK  fcb     1               Non-standard
F8F1 53               (        forth.asm):03491                 fcc     'S'
F8F2 F8E3             (        forth.asm):03492                 fdb     STRSLMD
F8F4 C7               (        forth.asm):03493                 RFCS
F8F5 1F41             (        forth.asm):03494 (4)             tfr     s,x
F8F7 7EE694           (        forth.asm):03495 (3)             jmp     NPUSH
                      (        forth.asm):03496         
F8FA 05               (        forth.asm):03497         WORDS   fcb     5               ANSI (Tools)
F8FB 574F524453       (        forth.asm):03498                 fcc     'WORDS'         ( -- )
F900 F8F0             (        forth.asm):03499                 fdb     SYSSTK
F902 C7               (        forth.asm):03500                 RFCS
F903 2009             (        forth.asm):03501                 RFXT    bra,VLIST+8     XT for VLIST
                      (        forth.asm):03502         
                      (        forth.asm):03503         * Differences from the original code:
                      (        forth.asm):03504         * - display number in HEX rather than in the current base.
                      (        forth.asm):03505         * - dropped feat: the original stuff was interactively paged by 15 line screens.
                      (        forth.asm):03506         * - added feat: display code implementation payload.
                      (        forth.asm):03507         * - added feat: display the immedediate and define (compile time only) flags.
                      (        forth.asm):03508         * - added feat: display the forgettable status (R/W). Everything user
                      (        forth.asm):03509         *   defined is forgettable (i.e. RAM resident).
F905 05               (        forth.asm):03510         VLIST   fcb     5               Non-standard
F906 564C495354       (        forth.asm):03511                 fcc     'VLIST'         ( -- )
F90B F8FA             (        forth.asm):03512                 fdb     WORDS
F90D C7               (        forth.asm):03513                 RFCS
F90E 9E08             (        forth.asm):03514 (4)             ldx     DICEND
F910 9F12             (        forth.asm):03515 (4)             stx     VLPRVEP         Last word code address + 1
F912 9E06             (        forth.asm):03516 (4)             ldx     LSTWAD
F914 9F14             (        forth.asm):03517 (4)     @vlist1 stx     VLPRVHD         Last word header pointer
F916 108E039A         (        forth.asm):03518 (4)             ldy     #TBUFF
F91A E680             (        forth.asm):03519 (4+1)           ldb     ,x+
F91C 3404             (        forth.asm):03520 (4+1)           pshs    b
F91E C41F             (        forth.asm):03521 (2)             andb    #WRLNMSK        Mask out word length
F920 4F               (        forth.asm):03522 (1)             clra
F921 3404             (        forth.asm):03523 (4+1)           pshs    b               Preserve word length 
F923 1F06             (        forth.asm):03524 (4)             tfr     d,w
F925 113812           (        forth.asm):03525 (6+?)           tfm     x+,y+
F928 3502             (        forth.asm):03526 (4+1)           puls    a               Restore word length to A
F92A C620             (        forth.asm):03527 (2)             ldb     #WRLNMSK+1
F92C 103289           (        forth.asm):03528 (4)             subr    a,b             Number of spaces we want to emit
F92F 8620             (        forth.asm):03529 (2)             lda     #SP
F931 A7A0             (        forth.asm):03530 (4+1)   @vlist2 sta     ,y+
F933 5A               (        forth.asm):03531 (1)             decb
F934 26FB             (        forth.asm):03532 (3)             bne     @vlist2
F936 6FA0             (        forth.asm):03533 (6+1)           clr     ,y+             Terminate formatted output string
F938 3410             (        forth.asm):03534 (4+2)           pshs    x               Address of the current word backlink address
F93A BDE1EF           (        forth.asm):03535 (7)             jsr     PUTCR           Carriage return is output before anything else
F93D 8E039A           (        forth.asm):03536 (3)             ldx     #TBUFF
F940 BDE1E2           (        forth.asm):03537 (7)             jsr     PUTS            Output word name formatted on 17 chars + SP
F943 AEE4             (        forth.asm):03538 (5+0)           ldx     ,s
                      (        forth.asm):03539                 IFNE    RELFEAT
F945 3003             (        forth.asm):03540 (4+1)           leax    3,x             Word XT to X (Skip backlink and checksum)
                      (        forth.asm):03541                 ELSE
                      (        forth.asm):03542                 leax    2,x             Word XT to X (Skip backlink)
                      (        forth.asm):03543                 ENDC
F947 1F10             (        forth.asm):03544 (4)             tfr     x,d             CVNSTR depends on UBASE and we want HEX output
F949 8E039A           (        forth.asm):03545 (3)             ldx     #TBUFF
F94C BDE17C           (        forth.asm):03546 (7)             jsr     HDMP4           So we use trusted debugging code
F94F 8E039A           (        forth.asm):03547 (3)             ldx     #TBUFF
F952 BDE1E2           (        forth.asm):03548 (7)             jsr     PUTS
                      (        forth.asm):03549         * Now to display word implementation length.
                      (        forth.asm):03550         * Implementation code length is from ,s+3 (or 2) to VLPRVEP
F955 8609             (        forth.asm):03551 (2)             lda     #HT
F957 BDE1BE           (        forth.asm):03552 (7)             jsr     PUTCH
F95A 9E12             (        forth.asm):03553 (4)             ldx     VLPRVEP
F95C 10AEE4           (        forth.asm):03554 (6+0)           ldy     ,s
                      (        forth.asm):03555                 IFNE    RELFEAT
F95F 3123             (        forth.asm):03556 (4+1)           leay    3,y             Current word code entry address
                      (        forth.asm):03557                 ELSE
                      (        forth.asm):03558                 leay    2,y             Current word code entry address
                      (        forth.asm):03559                 ENDC
F961 103221           (        forth.asm):03560 (4)             subr    y,x
F964 1F10             (        forth.asm):03561 (4)             tfr     x,d
F966 8E039A           (        forth.asm):03562 (3)             ldx     #TBUFF
F969 BDE17C           (        forth.asm):03563 (7)             jsr     HDMP4
F96C 8E039A           (        forth.asm):03564 (3)             ldx     #TBUFF
F96F BDE1E2           (        forth.asm):03565 (7)             jsr     PUTS
                      (        forth.asm):03566         # Display attribute flags.
F972 8609             (        forth.asm):03567 (2)             lda     #HT
F974 BDE1BE           (        forth.asm):03568 (7)             jsr     PUTCH
F977 8E039A           (        forth.asm):03569 (3)             ldx     #TBUFF
F97A E662             (        forth.asm):03570 (4+1)           ldb     2,s             Word attribute to B
F97C 862D             (        forth.asm):03571 (2)             lda     #'-
F97E C580             (        forth.asm):03572 (2)             bitb    #IMDFLM         Check for immediate
F980 2702             (        forth.asm):03573 (3)             beq     @vlist4
F982 8649             (        forth.asm):03574 (2)             lda     #'I
F984 A780             (        forth.asm):03575 (4+1)   @vlist4 sta     ,x+
F986 862D             (        forth.asm):03576 (2)             lda     #'-
F988 C540             (        forth.asm):03577 (2)             bitb    #DEFFLM         Check for define (compile time only)
F98A 2702             (        forth.asm):03578 (3)             beq     @vlist5
F98C 8643             (        forth.asm):03579 (2)             lda     #'C
F98E A780             (        forth.asm):03580 (4+1)   @vlist5 sta     ,x+
                      (        forth.asm):03581                 IFNE    RELFEAT
F990 862D             (        forth.asm):03582 (2)             lda     #'-
F992 C520             (        forth.asm):03583 (2)             bitb    #MONFLM         Check for monitored status
F994 2702             (        forth.asm):03584 (3)             beq     @vlst51
F996 864D             (        forth.asm):03585 (2)             lda     #'M
F998 A780             (        forth.asm):03586 (4+1)   @vlst51 sta     ,x+
                      (        forth.asm):03587                 ENDC
                      (        forth.asm):03588         * Check for forgettable also. In ROM => R else W unless we just processed '@'.
F99A 8652             (        forth.asm):03589 (2)             lda     #'R
F99C 10AEE4           (        forth.asm):03590 (6+0)           ldy     ,s
                      (        forth.asm):03591                 IFNE    RELFEAT
F99F 3123             (        forth.asm):03592 (4+1)           leay    3,y             Word entry point to Y
                      (        forth.asm):03593                 ELSE
                      (        forth.asm):03594                 leay    2,y             Word entry point to Y
                      (        forth.asm):03595                 ENDC
F9A1 108C0C15         (        forth.asm):03596 (4)             cmpy    #RAMFTCH        @ in RAM is unforgettable
F9A5 2708             (        forth.asm):03597 (3)             beq     @vlist6
F9A7 108CE000         (        forth.asm):03598 (4)             cmpy    #ROMSTRT        as are all ROM resident words
F9AB 2402             (        forth.asm):03599 (3)             bcc     @vlist6
F9AD 8657             (        forth.asm):03600 (2)             lda     #'W
F9AF A780             (        forth.asm):03601 (4+1)   @vlist6 sta     ,x+
F9B1 6F84             (        forth.asm):03602 (6+0)           clr     ,x
F9B3 8E039A           (        forth.asm):03603 (3)             ldx     #TBUFF
F9B6 BDE1E2           (        forth.asm):03604 (7)             jsr     PUTS
                      (        forth.asm):03605         * The point at which VLPRVHD==WDICSPC is a singularity (RAM to ROM transition).
F9B9 9E14             (        forth.asm):03606 (4)             ldx     VLPRVHD
F9BB 8C0C10           (        forth.asm):03607 (3)             cmpx    #WDICSPC
F9BE 2608             (        forth.asm):03608 (3)             bne     @vlist7
F9C0 8EFDD2           (        forth.asm):03609 (3)             ldx     #QMARK          Word just before @ (ROM flavor)
F9C3 9F14             (        forth.asm):03610 (4)             stx     VLPRVHD
F9C5 8EFDDD           (        forth.asm):03611 (3)             ldx     #THEEND
F9C8 9F12             (        forth.asm):03612 (4)     @vlist7 stx     VLPRVEP
F9CA 3510             (        forth.asm):03613 (4+2)           puls    x
F9CC 3504             (        forth.asm):03614 (4+1)           puls    b
F9CE AE84             (        forth.asm):03615 (5+0)           ldx     ,x              Point to previous word
F9D0 1026FF40         (        forth.asm):03616 (5)             lbne    @vlist1
F9D4 39               (        forth.asm):03617 (4)             rts
                      (        forth.asm):03618         
F9D5 05               (        forth.asm):03619         STATE   fcb     5
F9D6 5354415445       (        forth.asm):03620                 fcc     'STATE'
F9DB F905             (        forth.asm):03621                 fdb     VLIST
F9DD C7               (        forth.asm):03622                 RFCS
F9DE 8E011A           (        forth.asm):03623 (3)             ldx     #USTATE
F9E1 7EE694           (        forth.asm):03624 (3)             jmp     NPUSH
                      (        forth.asm):03625         
F9E4 04               (        forth.asm):03626         BASE    fcb     4               79-STANDARD (REQ115)
F9E5 42415345         (        forth.asm):03627                 fcc     'BASE'
F9E9 F9D5             (        forth.asm):03628                 fdb     STATE
F9EB C7               (        forth.asm):03629                 RFCS
F9EC 8E0118           (        forth.asm):03630 (3)             ldx     #UBASE
F9EF 7EE694           (        forth.asm):03631 (3)             jmp     NPUSH
                      (        forth.asm):03632         
F9F2 03               (        forth.asm):03633         BIN     fcb     3               Non-standard
F9F3 42494E           (        forth.asm):03634                 fcc     'BIN'
F9F6 F9E4             (        forth.asm):03635                 fdb     BASE
F9F8 C7               (        forth.asm):03636                 RFCS
F9F9 CC0002           (        forth.asm):03637 (3)             ldd     #2
F9FC DD18             (        forth.asm):03638 (4)             std     UBASE
F9FE 39               (        forth.asm):03639 (4)             rts
                      (        forth.asm):03640         
F9FF 05               (        forth.asm):03641         OCTAL   fcb     5               79-STANDARD (REF)
FA00 4F4354414C       (        forth.asm):03642                 fcc     'OCTAL'
FA05 F9F2             (        forth.asm):03643                 fdb     BIN
FA07 C7               (        forth.asm):03644                 RFCS
FA08 CC0008           (        forth.asm):03645 (3)             ldd     #8
FA0B DD18             (        forth.asm):03646 (4)             std     UBASE
FA0D 39               (        forth.asm):03647 (4)             rts
                      (        forth.asm):03648         
FA0E 07               (        forth.asm):03649         DECIMAL fcb     7               79-STANDARD (REQ197)
FA0F 444543494D414C   (        forth.asm):03650                 fcc     'DECIMAL'
FA16 F9FF             (        forth.asm):03651                 fdb     OCTAL
FA18 C7               (        forth.asm):03652                 RFCS
FA19 CC000A           (        forth.asm):03653 (3)             ldd     #10
FA1C DD18             (        forth.asm):03654 (4)             std     UBASE
FA1E 39               (        forth.asm):03655 (4)             rts
                      (        forth.asm):03656         
FA1F 03               (        forth.asm):03657         HEX     fcb     3               79-STANDARD (REF162)
FA20 484558           (        forth.asm):03658                 fcc     'HEX'
FA23 FA0E             (        forth.asm):03659                 fdb     DECIMAL
FA25 C7               (        forth.asm):03660                 RFCS
FA26 CC0010           (        forth.asm):03661 (3)             ldd     #16
FA29 DD18             (        forth.asm):03662 (4)             std     UBASE
FA2B 39               (        forth.asm):03663 (4)             rts
                      (        forth.asm):03664         
                      (        forth.asm):03665         * DUMP is not optimized for speed or clarity but for code compactness and yet
                      (        forth.asm):03666         * it remains the largest dictionary entry! It resorts to builtin HEX dump
                      (        forth.asm):03667         * primitives that do not depend on the current base (HDMP4, HDMP2).
                      (        forth.asm):03668         * DUMP operates on the basis of one line of output to #TBUFF per 16 byte
                      (        forth.asm):03669         * (a block) of input. The input buffer is pointed to by D (backed up by Y)
                      (        forth.asm):03670         * and the output is pointed to by X. The output (besides the header line)
                      (        forth.asm):03671         * comprises 3 distinct areas:
                      (        forth.asm):03672         *
                      (        forth.asm):03673         * - the base block address. Aligned on a 16 byte address, followed by one #SP.
                      (        forth.asm):03674         * - the HEX dump area. Made up of 16 times 2 HEX numbers separated by #SP.
                      (        forth.asm):03675         * - the ASCII dump area. Made up of 16 characters.
                      (        forth.asm):03676         *
                      (        forth.asm):03677         * This results in the following "magical" constants:
                      (        forth.asm):03678         *
                      (        forth.asm):03679         * #TBUFF+53 points to the beginning of the ASCII dump area.
                      (        forth.asm):03680         * #TBUFF+69 points to the end of the output string (to be NUL terminated).
                      (        forth.asm):03681         *
FA2C 04               (        forth.asm):03682         DUMP    fcb     4               79-STANDARD (REF123)
FA2D 44554D50         (        forth.asm):03683                 fcc     'DUMP'          ( START NBYTES -- )
FA31 FA1F             (        forth.asm):03684                 fdb     HEX
FA33 C7               (        forth.asm):03685                 RFCS
FA34 BDE6A2           (        forth.asm):03686 (7)             jsr     NPOP
FA37 1F12             (        forth.asm):03687 (4)             tfr     x,y             NBYTES to Y
FA39 BDE6A2           (        forth.asm):03688 (7)             jsr     NPOP
                      (        forth.asm):03689         * Input parameter validation.
FA3C 1037C2           (        forth.asm):03690 (4)             cmpr    0,y
FA3F 2601             (        forth.asm):03691 (3)             bne     @dmproc         Proceed if NBYTES in non-zero
FA41 39               (        forth.asm):03692 (4)             rts                     A zero byte count is not flagged as an error
FA42 2E05             (        forth.asm):03693 (3)     @dmproc bgt     @dmpini
FA44 C60D             (        forth.asm):03694 (2)             ldb     #13             Illegal argument (negative)
FA46 BDE61B           (        forth.asm):03695 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):03696         * Initialization and header processing.
FA49 3420             (        forth.asm):03697 (4+2)   @dmpini pshs    y               NBYTES
FA4B 3410             (        forth.asm):03698 (4+2)           pshs    x               START
FA4D 327E             (        forth.asm):03699 (4+1)           leas    -2,s            Allocate storage for STARTSEEN
                      (        forth.asm):03700         * Stack structure:
                      (        forth.asm):03701         * ,s    STARTSEEN               Set to 1 as soon as D is seen = to START
                      (        forth.asm):03702         *                               Only the LSB is used (1,s).
                      (        forth.asm):03703         * 2,s   START                   Lower bound of the area of interest (included)
                      (        forth.asm):03704         * 4,s   NBYTES                  Byte count to be dumped
FA4F 1F10             (        forth.asm):03705 (4)             tfr     x,d             START to D
FA51 C4F0             (        forth.asm):03706 (2)             andb    #$F0            Align to lower 16 byte boundary
FA53 6F61             (        forth.asm):03707 (6+1)           clr     1,s             Clear STARTSEEN until better informed
FA55 BDE1EF           (        forth.asm):03708 (7)             jsr     PUTCR           Print CR
FA58 11C620           (        forth.asm):03709 (3)             ldf     #SP             Preserved across called subroutines
FA5B 8E039A           (        forth.asm):03710 (3)             ldx     #TBUFF
FA5E 1F17             (        forth.asm):03711 (4)             tfr     x,v             Invariants: F has #SP, V has #TBUFF
FA60 3406             (        forth.asm):03712 (4+2)           pshs    d
FA62 BDFAFD           (        forth.asm):03713 (7)             jsr     _DMPHDR         D is not preserved
FA65 3506             (        forth.asm):03714 (4+2)           puls    d
FA67 6F84             (        forth.asm):03715 (6+0)           clr     ,x              NUL terminate the current output line
FA69 1F71             (        forth.asm):03716 (4)             tfr     v,x             Point back to the beginning of the output buffer
FA6B BDE1E2           (        forth.asm):03717 (7)             jsr     PUTS            Print header
                      (        forth.asm):03718         * Main loop. Index is D. We output everything to the string pointed by X.
                      (        forth.asm):03719         * Occasional resort to #TBUFF + 53 + (B % 15) will be used.
FA6E 3404             (        forth.asm):03720 (4+1)   @dmmain pshs    b
FA70 C40F             (        forth.asm):03721 (2)             andb    #$F
FA72 3504             (        forth.asm):03722 (4+1)           puls    b
FA74 2609             (        forth.asm):03723 (3)             bne     @dmphx          Not a beginning of line
FA76 BDE1EF           (        forth.asm):03724 (7)             jsr     PUTCR           Print CR
FA79 BDE17C           (        forth.asm):03725 (7)             jsr     HDMP4           4 hex digit dump of the base block address
FA7C 11E780           (        forth.asm):03726 (5+1)           stf     ,x+             SPACE after the base address
FA7F 1F02             (        forth.asm):03727 (4)     @dmphx  tfr     d,y             Save D, prepare pointer to actual data
FA81 8D59             (        forth.asm):03728 (6)             bsr     _DMPINT
FA83 260A             (        forth.asm):03729 (3)             bne     @dmhx2          We are in the area of interest
FA85 8620             (        forth.asm):03730 (2)     @dmspc  lda     #SP
FA87 A780             (        forth.asm):03731 (4+1)           sta     ,x+             Nothing interesting here. Emit three spaces
FA89 A780             (        forth.asm):03732 (4+1)           sta     ,x+
FA8B A780             (        forth.asm):03733 (4+1)           sta     ,x+
FA8D 2016             (        forth.asm):03734 (3)             bra     @dmasc          Have #SP printed to the ASCII area
                      (        forth.asm):03735         * We are within the area of interest. Perform a regular HEX 2 digit conversion.
FA8F A6A4             (        forth.asm):03736 (4+0)   @dmhx2  lda     ,y
FA91 BDE195           (        forth.asm):03737 (7)             jsr     HDMP2
FA94 11E780           (        forth.asm):03738 (5+1)           stf     ,x+
                      (        forth.asm):03739         * Decrement NBYTES, only if it is not already zero.
FA97 3420             (        forth.asm):03740 (4+2)           pshs    y
FA99 10AE66           (        forth.asm):03741 (6+1)           ldy     6,s             Offset plus 2 since we just pushed Y
FA9C 2705             (        forth.asm):03742 (3)             beq     @dmrsty         NBYTES is nul
FA9E 313F             (        forth.asm):03743 (4+1)           leay    -1,y            Decrement NBYTES
FAA0 10AF66           (        forth.asm):03744 (6+1)           sty     6,s
FAA3 3520             (        forth.asm):03745 (4+2)   @dmrsty puls    y
FAA5 8120             (        forth.asm):03746 (2)     @dmasc  cmpa    #SP
FAA7 2504             (        forth.asm):03747 (3)             blo     @dmnprt         Character is not printable
FAA9 817E             (        forth.asm):03748 (2)             cmpa    #$7E
FAAB 2302             (        forth.asm):03749 (3)             bls     @dmasis
FAAD 862E             (        forth.asm):03750 (2)     @dmnprt lda     #'.             Default character when not printable
FAAF 3410             (        forth.asm):03751 (4+2)   @dmasis pshs    x               The ASCII image is the character itself
FAB1 8E03CF           (        forth.asm):03752 (3)             ldx     #TBUFF+53       Base address for the ASCII dump area
FAB4 C40F             (        forth.asm):03753 (2)             andb    #$F             Offset is B modulo 15
FAB6 3A               (        forth.asm):03754 (1)             abx                     Add offset to base address
FAB7 A780             (        forth.asm):03755 (4+1)           sta     ,x+
FAB9 3510             (        forth.asm):03756 (4+2)           puls    x
                      (        forth.asm):03757         * If B is #$F, we've just processed the last byte of a block. Print #TBUFF.
FABB C10F             (        forth.asm):03758 (2)             cmpb    #$F
FABD 1FAE             (        forth.asm):03759 (4)             tfr     cc,e
FABF 2608             (        forth.asm):03760 (3)             bne     @dmctd
FAC1 1F71             (        forth.asm):03761 (4)             tfr     v,x             #TBUFF to X
FAC3 6F8845           (        forth.asm):03762 (6+1)           clr     69,x
FAC6 BDE1E2           (        forth.asm):03763 (7)             jsr     PUTS
FAC9 1F20             (        forth.asm):03764 (4)     @dmctd  tfr     y,d             Restore D
FACB 104C             (        forth.asm):03765 (2)             incd
FACD 1FEA             (        forth.asm):03766 (4)             tfr     e,cc
FACF 269D             (        forth.asm):03767 (3)             bne     @dmmain         Proceed until end of block is reached
FAD1 6D65             (        forth.asm):03768 (5+1)           tst     5,s             NBYTES LSB
FAD3 2699             (        forth.asm):03769 (3)             bne     @dmmain
FAD5 6D64             (        forth.asm):03770 (5+1)           tst     4,s             NYTES MSB
FAD7 2695             (        forth.asm):03771 (3)             bne     @dmmain
FAD9 3266             (        forth.asm):03772 (4+1)           leas    6,s             Free stack storage used by local variables
FADB 39               (        forth.asm):03773 (4)             rts
                      (        forth.asm):03774         
                      (        forth.asm):03775         * Predicate to indicate whether or not D covers the area of interest.
                      (        forth.asm):03776         * Upon return NZ will be set iff we are pointing to the "interesting" area.
FADC 6D63             (        forth.asm):03777 (5+1)   _DMPINT tst     3,s             STARTSEEN?
FADE 2608             (        forth.asm):03778 (3)             bne     @strsen         Yes, check for zero remaining byte count
FAE0 10A364           (        forth.asm):03779 (6+1)           cmpd    4,s             START
FAE3 240D             (        forth.asm):03780 (3)             bhs     @ststrt         Set STARTSEEN once and for all
FAE5 1A04             (        forth.asm):03781 (2)     @retwz  orcc    #ZFLAG          Set Z flag
FAE7 39               (        forth.asm):03782 (4)             rts
                      (        forth.asm):03783         * STARTSEEN is set. Check remaining byte count.
FAE8 6D67             (        forth.asm):03784 (5+1)   @strsen tst     7,s             NBYTES LSB
FAEA 260E             (        forth.asm):03785 (3)             bne     @retwnz
FAEC 6D66             (        forth.asm):03786 (5+1)           tst     6,s             NBYTES MSB
FAEE 260A             (        forth.asm):03787 (3)             bne     @retwnz
FAF0 20F3             (        forth.asm):03788 (3)             bra     @retwz          We are beyond the interesting area
FAF2 3402             (        forth.asm):03789 (4+1)   @ststrt pshs    a
FAF4 8601             (        forth.asm):03790 (2)             lda     #1
FAF6 A764             (        forth.asm):03791 (4+1)           sta     4,s             Set STARTSEEN
FAF8 3502             (        forth.asm):03792 (4+1)           puls    a
FAFA 1CFB             (        forth.asm):03793 (2)     @retwnz andcc   #^ZFLAG         Clear Z flag
FAFC 39               (        forth.asm):03794 (4)             rts
                      (        forth.asm):03795         
                      (        forth.asm):03796         * Print the dump header to X.
FAFD 8620             (        forth.asm):03797 (2)     _DMPHDR lda     #SP
FAFF A780             (        forth.asm):03798 (4+1)           sta     ,x+
FB01 A780             (        forth.asm):03799 (4+1)           sta     ,x+
FB03 A780             (        forth.asm):03800 (4+1)           sta     ,x+
FB05 A780             (        forth.asm):03801 (4+1)           sta     ,x+
FB07 5F               (        forth.asm):03802 (1)             clrb
FB08 A780             (        forth.asm):03803 (4+1)   @dmhlp1 sta     ,x+             Space before every 2 hex digits
FB0A 1F98             (        forth.asm):03804 (4)             tfr     b,a
FB0C BDE195           (        forth.asm):03805 (7)             jsr     HDMP2
FB0F 8620             (        forth.asm):03806 (2)             lda     #SP
FB11 5C               (        forth.asm):03807 (1)             incb
FB12 C110             (        forth.asm):03808 (2)             cmpb    #$10
FB14 26F2             (        forth.asm):03809 (3)             bne     @dmhlp1
FB16 A780             (        forth.asm):03810 (4+1)           sta     ,x+             Space before the ASCII dump
FB18 5F               (        forth.asm):03811 (1)             clrb
FB19 1F98             (        forth.asm):03812 (4)     @dmhlp2 tfr     b,a
FB1B BDE163           (        forth.asm):03813 (7)             jsr     HEX1D           Offset to HEX char stored to x+
FB1E 5C               (        forth.asm):03814 (1)             incb
FB1F C110             (        forth.asm):03815 (2)             cmpb    #$10
FB21 26F6             (        forth.asm):03816 (3)             bne     @dmhlp2
FB23 39               (        forth.asm):03817 (4)             rts
                      (        forth.asm):03818         
                      (        forth.asm):03819                 IFNE    SSDFEAT
FB24 02               (        forth.asm):03820         DOTTICK fcb     2               Non-standard (SwiftForth)
FB25 2E27             (        forth.asm):03821                 fcb     $2E,$27         .' ( memaddr -- )
FB27 FA2C             (        forth.asm):03822                 fdb     DUMP
FB29 C7               (        forth.asm):03823                 RFCS
FB2A BDE6A2           (        forth.asm):03824 (7)             jsr     NPOP
FB2D 1F12             (        forth.asm):03825 (4)             tfr     x,y
FB2F 8E034A           (        forth.asm):03826 (3)             ldx     #HEXBUF
FB32 BDE4D9           (        forth.asm):03827 (7)             jsr     FINDSYM
FB35 8E034A           (        forth.asm):03828 (3)             ldx     #HEXBUF
FB38 7EE1E2           (        forth.asm):03829 (3)             jmp     PUTS
                      (        forth.asm):03830                 ENDC
                      (        forth.asm):03831         
                      (        forth.asm):03832         * Display a dump of the data stack in the current BASE. In Leo Brodie's
                      (        forth.asm):03833         * "Starting Forth" the data stack is printed from the bottom up. So it is here.
FB3B 02               (        forth.asm):03834         DDUMP   fcb     2               ANSI (Optional "Programming tools" word set)
FB3C 2E53             (        forth.asm):03835                 fcc     '.S'            ( memaddr bcount -- )
                      (        forth.asm):03836                 IFNE    SSDFEAT
FB3E FB24             (        forth.asm):03837                 fdb     DOTTICK
                      (        forth.asm):03838                 ELSE
                      (        forth.asm):03839                 fdb     DUMP
                      (        forth.asm):03840                 ENDC
FB40 C7               (        forth.asm):03841                 RFCS
FB41 CC0246           (        forth.asm):03842 (3)             ldd     #NSTBOT
FB44 103230           (        forth.asm):03843 (4)             subr    u,d
FB47 1044             (        forth.asm):03844 (2)             lsrd                    DEPTH is in D
FB49 272A             (        forth.asm):03845 (3)             beq     @ndump3         Data stack is empty
FB4B 3440             (        forth.asm):03846 (4+2)           pshs    u
FB4D CE0246           (        forth.asm):03847 (3)             ldu     #NSTBOT         Pointing to the bottom of the data stack
FB50 8601             (        forth.asm):03848 (2)             lda     #1
FB52 972C             (        forth.asm):03849 (3)             sta     CVISSGN         Force a signed number conversion
FB54 3404             (        forth.asm):03850 (4+1)   @ndump1 pshs    b
FB56 AEC3             (        forth.asm):03851 (5+2)           ldx     ,--u
FB58 BDE319           (        forth.asm):03852 (7)             jsr     CVNSTR
FB5B 8E039A           (        forth.asm):03853 (3)             ldx     #TBUFF
                      (        forth.asm):03854         # Skip leading spaces.
FB5E A680             (        forth.asm):03855 (4+1)   @ndump2 lda     ,x+
FB60 8120             (        forth.asm):03856 (2)             cmpa    #SP
FB62 27FA             (        forth.asm):03857 (3)             beq     @ndump2
FB64 301F             (        forth.asm):03858 (4+1)           leax    -1,x
FB66 BDE1E2           (        forth.asm):03859 (7)             jsr     PUTS
FB69 8620             (        forth.asm):03860 (2)             lda     #SP
FB6B BDE1BE           (        forth.asm):03861 (7)             jsr     PUTCH
FB6E 3504             (        forth.asm):03862 (4+1)           puls    b
FB70 5A               (        forth.asm):03863 (1)             decb
FB71 26E1             (        forth.asm):03864 (3)             bne     @ndump1
FB73 3540             (        forth.asm):03865 (4+2)           puls    u
FB75 39               (        forth.asm):03866 (4)     @ndump3 rts
                      (        forth.asm):03867         
FB76 04               (        forth.asm):03868         QRYDUP  fcb     4               79-STANDARD (REQ184)
FB77 3F445550         (        forth.asm):03869                 fcc     '?DUP'
FB7B FB3B             (        forth.asm):03870                 fdb     DDUMP
FB7D C7               (        forth.asm):03871                 RFCS
FB7E BDE6A2           (        forth.asm):03872 (7)             jsr     NPOP
FB81 3610             (        forth.asm):03873                 UCNPUSH                 Push back the original parameter
FB83 1037C1           (        forth.asm):03874 (4)             cmpr    0,x
FB86 2601             (        forth.asm):03875 (3)             bne     @qrydp1
FB88 39               (        forth.asm):03876 (4)             rts
FB89 7EE694           (        forth.asm):03877 (3)     @qrydp1 jmp     NPUSH           And DUP if NZ
                      (        forth.asm):03878         
FB8C 04               (        forth.asm):03879         TUCK    fcb     4               ANSI (Core ext)
FB8D 5455434B         (        forth.asm):03880                 fcc     'TUCK'          ( x1 x2 -- x2 x1 x2 ) i.e. SWAP OVER
FB91 FB76             (        forth.asm):03881                 fdb     QRYDUP
FB93 C7               (        forth.asm):03882                 RFCS
FB94 CC0242BDE30E     (        forth.asm):03883                 MINDREQ 2
FB9A 10ECC4           (        forth.asm):03884 (8+0)           ldq     ,u              D:W is X2:X1
FB9D 1E06             (        forth.asm):03885 (5)             exg     d,w
FB9F 10EDC4           (        forth.asm):03886 (8+0)           stq     ,u
FBA2 1F61             (        forth.asm):03887 (4)             tfr     w,x             X has X2
FBA4 7EE694           (        forth.asm):03888 (3)             jmp     NPUSH
                      (        forth.asm):03889         
FBA7 03               (        forth.asm):03890         NIP     fcb     3               ANSI (Core ext)
FBA8 4E4950           (        forth.asm):03891                 fcc     'NIP'           ( x1 x2 -- x2 ) i.e. SWAP DROP
FBAB FB8C             (        forth.asm):03892                 fdb     TUCK
FBAD C7               (        forth.asm):03893                 RFCS
FBAE CC0242BDE30E     (        forth.asm):03894                 MINDREQ 2
FBB4 ECC4             (        forth.asm):03895 (5+0)           ldd     ,u
FBB6 3342             (        forth.asm):03896 (4+1)           leau    2,u
FBB8 EDC4             (        forth.asm):03897 (5+0)           std     ,u
FBBA 39               (        forth.asm):03898 (4)             rts
                      (        forth.asm):03899         
FBBB 03               (        forth.asm):03900         DUP     fcb     3               79-STANDARD (REQ205)
FBBC 445550           (        forth.asm):03901                 fcc     'DUP'
FBBF FBA7             (        forth.asm):03902                 fdb     NIP
FBC1 C7               (        forth.asm):03903                 RFCS
FBC2 CC0244BDE30E     (        forth.asm):03904                 MINDREQ 1
FBC8 AEC4             (        forth.asm):03905 (5+0)           ldx     ,u
FBCA 7EE694           (        forth.asm):03906 (3)             jmp     NPUSH
                      (        forth.asm):03907         
FBCD 04               (        forth.asm):03908         DROP    fcb     4               79-STANDARD (REQ233)
FBCE 44524F50         (        forth.asm):03909                 fcc     'DROP'
FBD2 FBBB             (        forth.asm):03910                 fdb     DUP
FBD4 C7               (        forth.asm):03911                 RFCS
FBD5 7EE6A2           (        forth.asm):03912 (3)             jmp     NPOP
                      (        forth.asm):03913         
FBD8 04               (        forth.asm):03914         SWAP    fcb     4               79-STANDARD (REQ230)
FBD9 53574150         (        forth.asm):03915                 fcc     'SWAP'
FBDD FBCD             (        forth.asm):03916                 fdb     DROP
FBDF C7               (        forth.asm):03917                 RFCS
FBE0 CC0242BDE30E     (        forth.asm):03918                 MINDREQ 2               We need at least two cells stacked up
FBE6 10ECC4           (        forth.asm):03919 (8+0)           ldq     ,u              In place SWAP
FBE9 1E06             (        forth.asm):03920 (5)             exg     d,w
FBEB 10EDC4           (        forth.asm):03921 (8+0)           stq     ,u
FBEE 39               (        forth.asm):03922 (4)             rts
                      (        forth.asm):03923         
FBEF 04               (        forth.asm):03924         PICK    fcb     4
FBF0 5049434B         (        forth.asm):03925                 fcc     'PICK'
FBF4 FBD8             (        forth.asm):03926                 fdb     SWAP
FBF6 C7               (        forth.asm):03927                 RFCS
FBF7 BDE6A2           (        forth.asm):03928 (7)             jsr     NPOP
FBFA CC0246           (        forth.asm):03929 (3)     PICK1   ldd     #NSTBOT
FBFD 103230           (        forth.asm):03930 (4)             subr    u,d
FC00 1044             (        forth.asm):03931 (2)             lsrd                    D has the data stack depth in cells
FC02 103710           (        forth.asm):03932 (4)             cmpr    x,d
FC05 2405             (        forth.asm):03933 (3)             bcc     @pick1
FC07 C60D             (        forth.asm):03934 (2)     ERRPCK  ldb     #13             Argument is greater than DEPTH
FC09 BDE61B           (        forth.asm):03935 (7)             jsr     ERRHDLR         No return
FC0C 1F10             (        forth.asm):03936 (4)     @pick1  tfr     x,d
FC0E 104D             (        forth.asm):03937 (2)             tstd
FC10 27F5             (        forth.asm):03938 (3)             beq     ERRPCK
FC12 104A             (        forth.asm):03939 (2)             decd                    Minus 1, unlike in the Z80 implementation
FC14 1048             (        forth.asm):03940 (2)             lsld                    Times 2
FC16 1F31             (        forth.asm):03941 (4)             tfr     u,x
FC18 308B             (        forth.asm):03942 (4+2)           leax    d,x
FC1A 1F12             (        forth.asm):03943 (4)             tfr     x,y             For the sake of ROLL's implementation
FC1C AE84             (        forth.asm):03944 (5+0)           ldx     ,x
FC1E 3610             (        forth.asm):03945                 UCNPUSH
FC20 39               (        forth.asm):03946 (4)             rts
                      (        forth.asm):03947         
FC21 04               (        forth.asm):03948         OVER    fcb     4
FC22 4F564552         (        forth.asm):03949                 fcc     'OVER'
FC26 FBEF             (        forth.asm):03950                 fdb     PICK
FC28 C7               (        forth.asm):03951                 RFCS
FC29 8E0002           (        forth.asm):03952 (3)             ldx     #2
FC2C 20CC             (        forth.asm):03953 (3)             bra     PICK1
                      (        forth.asm):03954         
FC2E 04               (        forth.asm):03955         ROLL    fcb     4
FC2F 524F4C4C         (        forth.asm):03956                 fcc     'ROLL'
FC33 FC21             (        forth.asm):03957                 fdb     OVER
FC35 C7               (        forth.asm):03958                 RFCS
FC36 BDE6A2           (        forth.asm):03959 (7)             jsr     NPOP
FC39 1F16             (        forth.asm):03960 (4)     ROLL1   tfr     x,w
FC3B 8DBD             (        forth.asm):03961 (6)             bsr     PICK1           Let PICK do the error handling
FC3D 3121             (        forth.asm):03962 (4+1)           leay    1,y             Point to the LSB since we're moving backward
FC3F 1F21             (        forth.asm):03963 (4)             tfr     y,x
FC41 301E             (        forth.asm):03964 (4+1)           leax    -2,x
FC43 103066           (        forth.asm):03965 (4)             addr    w,w
FC46 113912           (        forth.asm):03966 (6+?)           tfm     x-,y-
FC49 7EE6A2           (        forth.asm):03967 (3)             jmp     NPOP
                      (        forth.asm):03968         
FC4C 03               (        forth.asm):03969         ROT     fcb     3
FC4D 524F54           (        forth.asm):03970                 fcc     'ROT'
FC50 FC2E             (        forth.asm):03971                 fdb     ROLL
FC52 C7               (        forth.asm):03972                 RFCS
FC53 8E0003           (        forth.asm):03973 (3)             ldx     #3
FC56 20E1             (        forth.asm):03974 (3)             bra     ROLL1
                      (        forth.asm):03975         
FC58 04               (        forth.asm):03976         MROT    fcb     4
FC59 2D524F54         (        forth.asm):03977                 fcc     '-ROT'
FC5D FC4C             (        forth.asm):03978                 fdb     ROT
FC5F C7               (        forth.asm):03979                 RFCS
FC60 8DF1             (        forth.asm):03980                 RFXT    bsr,ROT+6       XT for ROT
FC62 20EF             (        forth.asm):03981                 RFXT    bra,ROT+6       XT for ROT
                      (        forth.asm):03982         
FC64 02               (        forth.asm):03983         CCOMMA  fcb     2               79-STANDARD (REF)
FC65 432C             (        forth.asm):03984                 fcc     'C,'
FC67 FC58             (        forth.asm):03985                 fdb     MROT
FC69 C7               (        forth.asm):03986                 RFCS
FC6A BDE6A2           (        forth.asm):03987 (7)             jsr     NPOP
FC6D 1F10             (        forth.asm):03988 (4)             tfr     x,d
FC6F 109E08           (        forth.asm):03989 (5)             ldy     DICEND
FC72 E7A0             (        forth.asm):03990 (4+1)           stb     ,y+
FC74 109F08           (        forth.asm):03991 (5)             sty     DICEND
FC77 39               (        forth.asm):03992 (4)             rts
                      (        forth.asm):03993         
FC78 01               (        forth.asm):03994         COMMA   fcb     1               79-STANDARD (REQ143)
FC79 2C               (        forth.asm):03995                 fcc     ','
FC7A FC64             (        forth.asm):03996                 fdb     CCOMMA
FC7C C7               (        forth.asm):03997                 RFCS
FC7D BDE6A2           (        forth.asm):03998 (7)             jsr     NPOP
FC80 109E08           (        forth.asm):03999 (5)             ldy     DICEND
FC83 AFA1             (        forth.asm):04000 (5+2)           stx     ,y++
FC85 109F08           (        forth.asm):04001 (5)             sty     DICEND
FC88 39               (        forth.asm):04002 (4)             rts
                      (        forth.asm):04003         
FC89 05               (        forth.asm):04004         ALLOT   fcb     5               79-STANDARD (REQ154)
FC8A 414C4C4F54       (        forth.asm):04005                 fcc     'ALLOT'         ( signedbytecount -- )
FC8F FC78             (        forth.asm):04006                 fdb     COMMA
FC91 C7               (        forth.asm):04007                 RFCS
FC92 BDE6A2           (        forth.asm):04008 (7)             jsr     NPOP
FC95 109E08           (        forth.asm):04009 (5)             ldy     DICEND
FC98 103012           (        forth.asm):04010 (4)             addr    x,y
FC9B 109F08           (        forth.asm):04011 (5)             sty     DICEND
FC9E 39               (        forth.asm):04012 (4)             rts
                      (        forth.asm):04013         
FC9F 04               (        forth.asm):04014         FILL    fcb     4               79-STANDARD (REQ234)
FCA0 46494C4C         (        forth.asm):04015                 fcc     'FILL'
FCA4 FC89             (        forth.asm):04016                 fdb     ALLOT
FCA6 C7               (        forth.asm):04017                 RFCS
FCA7 BDE6A2           (        forth.asm):04018 (7)             jsr     NPOP
FCAA 1F16             (        forth.asm):04019 (4)             tfr     x,w             Byte fill value to W
FCAC BDE6A2           (        forth.asm):04020 (7)     FILL1   jsr     NPOP
FCAF 1F12             (        forth.asm):04021 (4)             tfr     x,y             Byte count to Y
FCB1 1E26             (        forth.asm):04022 (5)             exg     y,w             Byte count to W, byte fill value to Y
FCB3 BDE6A2           (        forth.asm):04023 (7)             jsr     NPOP            Destination address to X
FCB6 105D             (        forth.asm):04024 (2)             tstw
FCB8 2F0B             (        forth.asm):04025 (3)             ble     @filend
FCBA 1F20             (        forth.asm):04026 (4)             tfr     y,d             Byte fill value to B
FCBC E784             (        forth.asm):04027 (4+0)           stb     ,x
FCBE 105A             (        forth.asm):04028 (2)             decw
FCC0 3101             (        forth.asm):04029 (4+1)           leay    1,x
FCC2 113812           (        forth.asm):04030 (6+?)           tfm     x+,y+
FCC5 39               (        forth.asm):04031 (4)     @filend rts
                      (        forth.asm):04032         
FCC6 06               (        forth.asm):04033         BLANKS  fcb     6               79-STANDARD (REF152)
FCC7 424C414E4B53     (        forth.asm):04034                 fcc     'BLANKS'
FCCD FC9F             (        forth.asm):04035                 fdb     FILL
FCCF C7               (        forth.asm):04036                 RFCS
FCD0 10860020         (        forth.asm):04037 (4)             ldw     #SP
FCD4 20D6             (        forth.asm):04038 (3)             bra     FILL1
                      (        forth.asm):04039         
FCD6 06               (        forth.asm):04040         CMOVED  fcb     6               FORTH-83
FCD7 434D4F56453E     (        forth.asm):04041                 fcc     'CMOVE>'
FCDD FCC6             (        forth.asm):04042                 fdb     BLANKS
FCDF C7               (        forth.asm):04043                 RFCS
FCE0 BDE454           (        forth.asm):04044 (7)             jsr     ACQMOVP
FCE3 105D             (        forth.asm):04045 (2)             tstw
FCE5 270D             (        forth.asm):04046 (3)             beq     @cmovd1
FCE7 105A             (        forth.asm):04047 (2)             decw
FCE9 103061           (        forth.asm):04048 (4)             addr    w,x
FCEC 103062           (        forth.asm):04049 (4)             addr    w,y
FCEF 105C             (        forth.asm):04050 (2)             incw
FCF1 113912           (        forth.asm):04051 (6+?)           tfm     x-,y-
FCF4 39               (        forth.asm):04052 (4)     @cmovd1 rts
                      (        forth.asm):04053         
FCF5 06               (        forth.asm):04054         DCMOVE  fcb     6               79-STANDARD (REF)
FCF6 3C434D4F5645     (        forth.asm):04055                 fcc     '<CMOVE'
FCFC FCD6             (        forth.asm):04056                 fdb     CMOVED
FCFE C7               (        forth.asm):04057                 RFCS
FCFF BDE454           (        forth.asm):04058 (7)             jsr     ACQMOVP
FD02 113912           (        forth.asm):04059 (6+?)           tfm     x-,y-
FD05 39               (        forth.asm):04060 (4)             rts
                      (        forth.asm):04061         
FD06 05               (        forth.asm):04062         CMOVE   fcb     5               79-STANDARD (REQ153)
FD07 434D4F5645       (        forth.asm):04063                 fcc     'CMOVE'
FD0C FCF5             (        forth.asm):04064                 fdb     DCMOVE
FD0E C7               (        forth.asm):04065                 RFCS
FD0F BDE454           (        forth.asm):04066 (7)             jsr     ACQMOVP
FD12 113812           (        forth.asm):04067 (6+?)           tfm     x+,y+
FD15 39               (        forth.asm):04068 (4)             rts
                      (        forth.asm):04069         
FD16 04               (        forth.asm):04070         MOVE    fcb     4               79-STANDARD (REQ113)
FD17 4D4F5645         (        forth.asm):04071                 fcc     'MOVE'          ( srcaddr dstaddr ncells -- )
FD1B FD06             (        forth.asm):04072                 fdb     CMOVE
FD1D C7               (        forth.asm):04073                 RFCS
FD1E BDE454           (        forth.asm):04074 (7)             jsr     ACQMOVP
FD21 105D             (        forth.asm):04075 (2)             tstw
FD23 2F06             (        forth.asm):04076 (3)             ble     @move1
FD25 103066           (        forth.asm):04077 (4)             addr    w,w             Convert cells to bytes
FD28 113812           (        forth.asm):04078 (6+?)           tfm     x+,y+
FD2B 39               (        forth.asm):04079 (4)     @move1  rts
                      (        forth.asm):04080         
FD2C 05               (        forth.asm):04081         CELLS   fcb     5               ANSI-X3.215-1994
FD2D 43454C4C53       (        forth.asm):04082                 fcc     'CELLS'
FD32 FD16             (        forth.asm):04083                 fdb     MOVE
FD34 C7               (        forth.asm):04084                 RFCS
FD35 BDE6A2           (        forth.asm):04085 (7)             jsr     NPOP
FD38 103011           (        forth.asm):04086 (4)             addr    x,x
FD3B 3610             (        forth.asm):04087                 UCNPUSH
FD3D 39               (        forth.asm):04088 (4)             rts
                      (        forth.asm):04089         
FD3E 04               (        forth.asm):04090         LAST    fcb     4               79-STANDARD (REF)
FD3F 4C415354         (        forth.asm):04091                 fcc     'LAST'
FD43 FD2C             (        forth.asm):04092                 fdb     CELLS
FD45 C7               (        forth.asm):04093                 RFCS
FD46 9E06             (        forth.asm):04094 (4)             ldx     LSTWAD
FD48 7EE694           (        forth.asm):04095 (3)             jmp     NPUSH
                      (        forth.asm):04096         
FD4B 04               (        forth.asm):04097         HERE    fcb     4               79-STANDARD (REQ188)
FD4C 48455245         (        forth.asm):04098                 fcc     'HERE'
FD50 FD3E             (        forth.asm):04099                 fdb     LAST
FD52 C7               (        forth.asm):04100                 RFCS
FD53 9E08             (        forth.asm):04101 (4)             ldx     DICEND
FD55 7EE694           (        forth.asm):04102 (3)             jmp     NPUSH
                      (        forth.asm):04103         
FD58 02               (        forth.asm):04104         PLUSST  fcb     2               79-STANDARD (REQ157)
FD59 2B21             (        forth.asm):04105                 fcc     '+!'            ( incr addr -- )
FD5B FD4B             (        forth.asm):04106                 fdb     HERE
FD5D C7               (        forth.asm):04107                 RFCS
FD5E CC0242BDE30E     (        forth.asm):04108                 MINDREQ 2               We need at least two cells stacked up
FD64 AEC4             (        forth.asm):04109 (5+0)           ldx     ,u              ADDR to X
FD66 EC84             (        forth.asm):04110 (5+0)           ldd     ,x              @ADDR to D
FD68 E342             (        forth.asm):04111 (5+1)           addd    2,u             Add INCR to D
FD6A ED84             (        forth.asm):04112 (5+0)   PLUSST1 std     ,x              Store the sum back to ADDR
FD6C 3344             (        forth.asm):04113 (4+1)           leau    4,u             Drop two cells from the data stack
FD6E 39               (        forth.asm):04114 (4)             rts
                      (        forth.asm):04115         
FD6F 03               (        forth.asm):04116         ONEPST  fcb     3               79-STANDARD (REF)
FD70 312B21           (        forth.asm):04117                 fcc     '1+!'
FD73 FD58             (        forth.asm):04118                 fdb     PLUSST
FD75 C7               (        forth.asm):04119                 RFCS
FD76 CC0244BDE30E     (        forth.asm):04120                 MINDREQ 1
FD7C AEC4             (        forth.asm):04121 (5+0)           ldx     ,u
FD7E EC84             (        forth.asm):04122 (5+0)           ldd     ,x
FD80 104C             (        forth.asm):04123 (2)             incd
FD82 ED84             (        forth.asm):04124 (5+0)           std     ,x
FD84 3342             (        forth.asm):04125 (4+1)           leau    2,u
FD86 39               (        forth.asm):04126 (4)             rts
                      (        forth.asm):04127         
FD87 02               (        forth.asm):04128         MINUSST fcb     2               79-STANDARD (REQ157)
FD88 2D21             (        forth.asm):04129                 fcc     '-!'            ( incr addr -- )
FD8A FD6F             (        forth.asm):04130                 fdb     ONEPST
FD8C C7               (        forth.asm):04131                 RFCS
FD8D CC0242BDE30E     (        forth.asm):04132                 MINDREQ 2               We need at least two cells stacked up
FD93 AEC4             (        forth.asm):04133 (5+0)           ldx     ,u              ADDR to X
FD95 EC84             (        forth.asm):04134 (5+0)           ldd     ,x              @ADDR to D
FD97 A342             (        forth.asm):04135 (5+1)           subd    2,u             Substract INCR from D
FD99 20CF             (        forth.asm):04136 (3)             bra     PLUSST1
                      (        forth.asm):04137         
FD9B 02               (        forth.asm):04138         CSTORE  fcb     2               79-STANDARD (REQ219)
FD9C 4321             (        forth.asm):04139                 fcc     'C!'            ( val8 addr -- )
FD9E FD87             (        forth.asm):04140                 fdb     MINUSST
FDA0 C7               (        forth.asm):04141                 RFCS
FDA1 CC0242BDE30E     (        forth.asm):04142                 MINDREQ 2               We need at least two cells stacked up
FDA7 A643             (        forth.asm):04143 (4+1)           lda     3,u             VAL8 to A
FDA9 A7D4             (        forth.asm):04144 (4+3)           sta     [,u]            Actual store to ADDR
FDAB 3344             (        forth.asm):04145 (4+1)           leau    4,u             Drop two cells from the data stack
FDAD 39               (        forth.asm):04146 (4)             rts
                      (        forth.asm):04147         
FDAE 01               (        forth.asm):04148         STORE   fcb     1               79-STANDARD (REQ112)
FDAF 21               (        forth.asm):04149                 fcc     '!'             ( data addr -- )
FDB0 FD9B             (        forth.asm):04150                 fdb     CSTORE
FDB2 C7               (        forth.asm):04151                 RFCS
FDB3 CC0242BDE30E     (        forth.asm):04152                 MINDREQ 2               At least two cells need to be stacked up
FDB9 EC42             (        forth.asm):04153 (5+1)           ldd     2,u             DATA to D
FDBB EDD4             (        forth.asm):04154 (5+3)           std     [,u]            Actual store to ADDR
FDBD 3344             (        forth.asm):04155 (4+1)           leau    4,u             Drop two cells from the user stack
FDBF 39               (        forth.asm):04156 (4)             rts
                      (        forth.asm):04157         
FDC0 02               (        forth.asm):04158         CFETCH  fcb     2               79-STANDARD (REQ156)
FDC1 4340             (        forth.asm):04159                 fcc     'C@'            ( addr -- val8 )
FDC3 FDAE             (        forth.asm):04160                 fdb     STORE
FDC5 C7               (        forth.asm):04161                 RFCS
FDC6 CC0244BDE30E     (        forth.asm):04162                 MINDREQ 1               We need at least one cell stacked up
FDCC 4F               (        forth.asm):04163 (1)             clra
FDCD E6D4             (        forth.asm):04164 (4+3)           ldb     [,u]
FDCF EDC4             (        forth.asm):04165 (5+0)           std     ,u
FDD1 39               (        forth.asm):04166 (4)             rts
                      (        forth.asm):04167         
FDD2 01               (        forth.asm):04168         QMARK   fcb     1               79-STANDARD (REQ194)
FDD3 3F               (        forth.asm):04169                 fcc     '?'
FDD4 FDC0             (        forth.asm):04170                 fdb     CFETCH
FDD6 C7               (        forth.asm):04171                 RFCS
FDD7 BD0C15           (        forth.asm):04172 (7)             jsr     RAMFTCH         Call the RAM based incarnation of @
FDDA 7EF511           (        forth.asm):04173                 RFXT    jmp,DOT+4       XT for .
                      (        forth.asm):04174         
                      (        forth.asm):04175         * End of ROM part of the builtin dictionary.
     FDDD             (        forth.asm):04176         THEEND  equ     *               This is the end, Beautiful friend
                      (        forth.asm):04177         *                               This is the end, My only friend
                      (        forth.asm):04178         
                      (        forth.asm):04179         * This transactional word is relocated to RAM, so that we can compile new
                      (        forth.asm):04180         * definitions. FORTHIN will take care of that and adjust the relevant pointers.
FDDD 01               (        forth.asm):04181         FETCH   fcb     1               79-STANDARD (REQ199)
FDDE 40               (        forth.asm):04182                 fcc     '@'             ( addr -- data )
FDDF FDD2             (        forth.asm):04183                 fdb     QMARK
FDE1 C7               (        forth.asm):04184                 RFCS
FDE2 CC0244BDE30E     (        forth.asm):04185                 MINDREQ 1               At least one cell needs to be stacked up
FDE8 ECD4             (        forth.asm):04186 (5+3)           ldd     [,u]
FDEA EDC4             (        forth.asm):04187 (5+0)           std     ,u              Returned through the data stack
FDEC 39               (        forth.asm):04188 (4)             rts
                      (        forth.asm):04189         
     FDED             (        forth.asm):04190         REALEND equ     *
                      (        forth.asm):04191         
                      (        forth.asm):04192         *******************************************************************************
                      (        forth.asm):04193         * String literals.
                      (        forth.asm):04194         
                      (        forth.asm):04195         * Using CR+LF as it is Minicom's default.
FDED 0C               (        forth.asm):04196         BOOTMSG fcb     FF              Form Feed (clear the screen in console context)
FDEE 5A3739466F727468 (        forth.asm):04197                 fcc     'Z79Forth - 6309 FORTH-79 Standard Sub-set.'
     202D203633303920
     464F5254482D3739
     205374616E646172
     64205375622D7365
     742E
FE18 0D0A             (        forth.asm):04198                 fcb     CR,LF
FE1A 3230323031313233 (        forth.asm):04199                 fcc     '20201123 Copyright Francois Laagel (2020).'
     20436F7079726967
     6874204672616E63
     6F6973204C616167
     656C202832303230
     292E
FE44 0D0A0D0A00       (        forth.asm):04200                 fcb     CR,LF,CR,LF,NUL
                      (        forth.asm):04201         
FE49 52414D3020636865 (        forth.asm):04202         RAMOKM  fcc     'RAM0 check OK: 32 KB.'
     636B204F4B3A2033
     32204B422E
FE5E 0D0A00           (        forth.asm):04203         CRLFSTR fcb     CR,LF,NUL
                      (        forth.asm):04204         
FE61 52414D3020636865 (        forth.asm):04205         RAMFM   fcc     'RAM0 check failure.'
     636B206661696C75
     72652E
FE74 0D0A00           (        forth.asm):04206                 fcb     CR,LF,NUL
                      (        forth.asm):04207         
FE77 204F4B           (        forth.asm):04208         OKPRMPT fcc     ' OK'
FE7A 0D0A00           (        forth.asm):04209                 fcb     CR,LF,NUL
                      (        forth.asm):04210         
                      (        forth.asm):04211         * Error messages for IODZHDL.
FE7D 496C6C6567616C20 (        forth.asm):04212         IOPERRM fcn     'Illegal opcode near '
     6F70636F6465206E
     6561722000
FE92 4469766973696F6E (        forth.asm):04213         DV0ERRM fcn     'Division by zero near '
     206279207A65726F
     206E6561722000
                      (        forth.asm):04214         
FEA9 4461746120737461 (        forth.asm):04215         ERRMTBL fcn     'Data stack overflow'   Error 0
     636B206F76657266
     6C6F7700
FEBD 4461746120737461 (        forth.asm):04216                 fcn     'Data stack underflow'  Error 1
     636B20756E646572
     666C6F7700
FED2 556E646566696E65 (        forth.asm):04217                 fcn     'Undefined'             Error 2
     6400
FEDC 557365722041424F (        forth.asm):04218                 fcn     'User ABORT'            Error 3
     525400
FEE7 00               (        forth.asm):04219                 fcn     ''                      Error 4 (formerly "Division by zero")
FEE8 4D697373696E6720 (        forth.asm):04220                 fcn     'Missing word name'     Error 5
     776F7264206E616D
     6500
FEFA 496E636F72726563 (        forth.asm):04221                 fcn     'Incorrect STATE'       Error 6
     7420535441544500
FF0A 52657475726E2073 (        forth.asm):04222                 fcn     'Return stack overflow' Error 7
     7461636B206F7665
     72666C6F7700
FF20 52657475726E2073 (        forth.asm):04223                 fcn     'Return stack underflow' Error 8
     7461636B20756E64
     6572666C6F7700
FF37 496C6C6567616C20 (        forth.asm):04224                 fcn     'Illegal construct'     Error 9
     636F6E7374727563
     7400
FF49 417373657274696F (        forth.asm):04225                 fcn     'Assertion failed'      Error 10
     6E206661696C6564
     00
FF5A 522F4F20776F7264 (        forth.asm):04226                 fcn     'R/O word'              Error 11
     00
FF63 4D697373696E6720 (        forth.asm):04227                 fcn     'Missing delimiter'     Error 12
     64656C696D697465
     7200
FF75 496C6C6567616C20 (        forth.asm):04228                 fcn     'Illegal argument'      Error 13
     617267756D656E74
     00
FF86 4E6F206D61746368 (        forth.asm):04229                 fcn     'No matching CREATE'    Error 14
     696E672043524541
     544500
FF99 496E76616C696420 (        forth.asm):04230                 fcn     'Invalid BASE'          Error 15
     4241534500
FFA6 576F7264206E616D (        forth.asm):04231                 fcn     'Word name too long'    Error 16
     6520746F6F206C6F
     6E6700
FFB9 494F206572726F72 (        forth.asm):04232                 fcn     'IO error'              Error 17
     00
                      (        forth.asm):04233         
     FFC2             (        forth.asm):04234         AVL     equ     *               Marker of available EEPROM space left
                      (        forth.asm):04235         
                      (        forth.asm):04236         *******************************************************************************
                      (        forth.asm):04237         * Interrupt vector table
                      (        forth.asm):04238                 org     VECTBL
                      (        forth.asm):04239         
FFF0 E000             (        forth.asm):04240                 fdb     IODZHDL         Illegal opcode/Division by zero trap
FFF2 E035             (        forth.asm):04241                 fdb     SWI3HDL         SWI 3 interrupt vector address
FFF4 E035             (        forth.asm):04242                 fdb     SWI2HDL         SWI 2 interrupt vector address
FFF6 E035             (        forth.asm):04243                 fdb     FIRQHDL         FIRQ interrupt vector address
FFF8 E035             (        forth.asm):04244                 fdb     IRQHDL          IRA interrupt vector address
FFFA E035             (        forth.asm):04245                 fdb     SWIHDL          SWI interrupt vector address
FFFC E035             (        forth.asm):04246                 fdb     NMIHDL          NMI vector address
FFFE E036             (        forth.asm):04247                 fdb     RSTHDL          RESET vector address
                      (        forth.asm):04248         

Symbol Table:
[ G] _BS                              E1F9
[ G] _DMPHDR                          FAFD
[ G] _DMPINT                          FADC
[ G] _INTERP                          E0C0
[ G] ABORT                            EF9C
[ G] ABS                              EE41
[ G] AC8N1                            0014
[ G] ACD16                            0001
[ G] ACD64                            0002
[ G] ACDVSEL                          0001
[ G] ACIACTL                          D800
[ G] ACIADAT                          D801
[ G] ACIOVRN                          0020
[ G] ACIRDRF                          0001
[ G] ACIRSET                          0043
[ G] ACIRTS0                          0015
[ G] ACIRTS1                          0055
[ G] ACITDRE                          0002
[ G] ACQMOVP                          E454
[ G] ACQVMRA                          E45A
[ G] ACRST                            0003
[ G] ACRTS0                           0000
[ G] ACRTS1                           0040
[ G] ADDS                             E1A4
[ G] ADIV16                           E177
[ G] AGAIN                            EE7D
[ G] ALLOT                            FC89
[ G] AND                              ED2B
[ G] AVL                              FFC2
[ G] BASE                             F9E4
[ G] BCSOPC                           2503
[ G] BDICEND                          010C
[ G] BDIRTY                           0004
[ G] BEGIN                            EE6F
[ G] BFDISP                           0410
[ G] BIN                              F9F2
[ G] BINUSE                           0001
[ G] BK2BBRA                          E716
[ G] BKCHAR                           F146
[ G] BKCOMP                           EFE6
[ G] BKIN2PT                          E71B
[ G] BKQUOT                           F01A
[ G] BKSLSH                           F1FD
[ G] BL                               F57D
[ G] BLANKS                           FCC6
[ G] BLK                              E936
[ G] BLK2BB                           E6E8
[ G] BLKSIZ                           0400
[ G] BLOCK                            E906
[ G] BLSTWAD                          010A
[ G] BMAPPD                           0002
[ G] BNEOPC                           2603
[ G] BOBLKNO                          0402
[ G] BOFLAGS                          0401
[ G] BOOTMSG                          FDED
[ G] BS                               0008
[ G] BSBFADR                          0122
[ G] BUF0                             03F0
[ G] BUF1                             0800
[ G] BUFFER                           E8B9
[ G] BYE                              F13C
[ G] CCOMMA                           FC64
[ G] CELLS                            FD2C
[ G] CF1BKRD                          E808
[ G] CF1BKWR                          E823
[ G] CF1BPRE                          E7EB
[ G] CF1SRD                           E7BD
[ G] CF1SWR                           E7D6
[ G] CFANTHS                          E768
[ G] CFBASE                           C000
[ G] CFBSYB                           0080
[ G] CFCARDP                          0131
[ G] CFCHIGR                          C005
[ G] CFCLOWR                          C004
[ G] CFCMDIS                          E74D
[ G] CFCMMIR                          0132
[ G] CFCOMDR                          C007
[ G] CFDATAR                          C000
[ G] CFDRHDR                          C006
[ G] CFDRQB                           0008
[ G] CFDRSEL                          E75F
[ G] CFDSCB                           0010
[ G] CFDWFB                           0020
[ G] CFERRB                           0001
[ G] CFERRCD                          0133
[ G] CFERRCK                          E740
[ G] CFERROR                          C001
[ G] CFETCH                           FDC0
[ G] CFFEATR                          C001
[ G] CFIDDEV                          00EC
[ G] CFINIT                           E786
[ G] CFLAG                            0001
[ G] CFR1SRA                          E7D5
[ G] CFRDY                            E72A
[ G] CFRDYB                           0040
[ G] CFRSCTS                          0020
[ G] CFSCNTR                          C002
[ G] CFSCSZ                           0200
[ G] CFSETFT                          00EF
[ G] CFSNUMR                          C003
[ G] CFSTATR                          C007
[ G] CFWAIT                           E722
[ G] CFWSCTS                          0030
[ G] CHAR                             F155
[ G] CHKNDPT                          E30E
[ G] CHKRTS                           E14F
[ G] CKBASE                           E2A7
[ G] CKBASRA                          E2B7
[ G] CKDPTRA                          E319
[ G] CKOVRUN                          0000
[ G] CMDBFSZ                          0084
[ G] CMDBUF                           02C6
[ G] CMDLNSZ                          0124
[ G] CMOVE                            FD06
[ G] CMOVED                           FCD6
[ G] CMP2                             E43D
[ G] CMP2RA                           E443
[ G] CMPCOM1                          F060
[ G] CMPCOMA                          F051
[ G] COM                              ED42
[ G] COM0                             ED49
[ G] COMMA                            FC78
[ G] COMP                             E10D
[ G] COMPC                            F06F
[ G] COMPILE                          F034
[ G] COMPLRA                          E127
[ G] COMPR                            F087
[ G] CONS                             EA97
[ G] CONTIND                          F6F2
[ G] CONVERT                          F388
[ G] COUNT                            F5F1
[ G] CR                               000D
[ G] CREAT0                           EA27
[ G] CREAT1                           EA3F
[ G] CREATE                           EA1D
[ G] CRLF                             F5BD
[ G] CRLFSTR                          FE5E
[ G] CSSNTVE                          0000
[ G] CSTORE                           FD9B
[ G] CSUMFLM                          EB84
[ G] CURTOKL                          012D
[ G] CVISSGN                          012C
[ G] CVNSTR                           E319
[ G] CVT                              F450
[ G] CVT0                             F457
[ G] CVT1                             F45F
[ G] CVTB                             F500
[ G] CVTE                             F404
[ G] CVTFCN                           012A
[ G] DASHTR                           F607
[ G] DCMOVE                           FCF5
[ G] DDUMP                            FB3B
[ G] DEBUG                            0000
[ G] DECIMAL                          FA0E
[ G] DEFFLG                           012F
[ G] DEFFLM                           0040
[ G] DEPTH                            EA07
[ G] DEV0                             C000
[ G] DEV1                             C400
[ G] DEV2                             C800
[ G] DEV3                             CC00
[ G] DEV4                             D000
[ G] DEV5                             D400
[ G] DEV6                             D800
[ G] DEV7                             DC00
[ G] DICEND                           0108
[ G] DIFF                             ECBF
[ G] DIV                              F868
[ G] DIV1                             F871
[ G] DIVFCN                           0128
[ G] DLESS                            F2DA
[ G] DNEG                             F2A7
[ G] DO                               EB9B
[ G] DOES                             EA47
[ G] DOESEX                           EA56
[ G] DOEX                             EBAE
[ G] DOT                              F50C
[ G] DOTR                             F536
[ G] DOTR0                            F540
[ G] DOTTICK                          FB24
[ G] DPLUS                            F285
[ G] DPOPRA                           E6B0
[ G] DPSHRA                           E6A1
[ G] DROP                             FBCD
[ G] DUMP                             FA2C
[ G] DUP                              FBBB
[ G] DV0ERRM                          FE92
[ G] DZEQ                             F2CD
[ G] EBUFS                            E83E
[ G] ELSE                             EC70
[ G] EMIT                             F759
[ G] EMPT1B                           E27C
[ G] EMPTYB                           E274
[ G] END                              EED5
[ G] EQ                               ECA3
[ G] ERRHD1                           E61E
[ G] ERRHDLR                          E61B
[ G] ERRMTBL                          FEA9
[ G] ERRPCK                           FC07
[ G] ETX                              0003
[ G] EXCT                             F122
[ G] EXIT                             EE9B
[ G] EXPECT                           F642
[ G] FDCTSYM                          E465
[ G] FETCH                            FDDD
[ G] FF                               000C
[ G] FILL                             FC9F
[ G] FILL1                            FCAC
[ G] FIND                             EFB0
[ G] FINDSYM                          E4D9
[ G] FIRQHDL                          E035
[ G] FLUSH                            E893
[ G] FORGET                           F0D3
[ G] FORTHIN                          E248
[ G] GETCH                            E1CD
[ G] GETS                             E205
[ G] HDMP2                            E195
[ G] HDMP4                            E17C
[ G] HDRCSUM                          EB2E
[ G] HDRSKIP                          EB24
[ G] HERE                             FD4B
[ G] HEX                              FA1F
[ G] HEX1D                            E163
[ G] HEXBFSZ                          0050
[ G] HEXBUF                           034A
[ G] HOLD                             F434
[ G] HT                               0009
[ G] ICHECK                           EB3A
[ G] IF                               EC2F
[ G] IFEX                             EC57
[ G] ILLOPC                           00C7
[ G] IMDFLG                           012E
[ G] IMDFLM                           0080
[ G] IMMED                            EADE
[ G] IMMED1                           EAED
[ G] INDEX                            E978
[ G] INDI                             EF3A
[ G] INDIP                            EF5F
[ G] INDJ                             EF69
[ G] INDJP                            EF72
[ G] INDK                             EF7C
[ G] INF                              EE00
[ G] INIT                             E048
[ G] INSBPAD                          F4ED
[ G] INTERP                           E0A8
[ G] INTISRA                          E0FB
[ G] INTRPRA                          E108
[ G] INVERT                           ED55
[ G] IODZHDL                          E000
[ G] IOERR                            E7D0
[ G] IOPERRM                          FE7D
[ G] IOSTRT                           C000
[ G] IRDPTH                           0126
[ G] IRQHDL                           E035
[ G] ISNEGF                           012B
[ G] JMPOPC                           007E
[ G] JSRLAST                          0110
[ G] JSROPC                           00BD
[ G] KEY                              F747
[ G] KEYP                             F727
[ G] LAST                             FD3E
[ G] LBRACK                           EFDE
[ G] LDXOPC                           008E
[ G] LEAVE                            EF25
[ G] LF                               000A
[ G] LINE                             E95D
[ G] LIST                             E9AC
[ G] LITER                            E421
[ G] LITERAL                          EA74
[ G] LOAD                             F681
[ G] LOAD1                            F692
[ G] LOCWRT                           E3BF
[ G] LOOP                             EBB7
[ G] LOOP1                            EBC2
[ G] LOOPEX                           EBDE
[ G] LPAR                             F1C3
[ G] LSTWAD                           0106
[ G] LWMNRA                           E3D5
[ G] MAX                              EE0F
[ G] MDIV                             F8AD
[ G] MILLIS                           F70C
[ G] MILLIS1                          F71B
[ G] MIN                              EE28
[ G] MINTLRA                          E0BE
[ G] MINUS                            F7A6
[ G] MINUSST                          FD87
[ G] MOD                              F8A0
[ G] MONFLM                           0020
[ G] MONITOR                          EB07
[ G] MORE                             E0D6
[ G] MOVE                             FD16
[ G] MROT                             FC58
[ G] MRUBUFA                          0116
[ G] MSLCNT                           03E2
[ G] MULT                             F82C
[ G] NAK                              0015
[ G] NBCTFB0                          0130
[ G] NCLR                             E9EB
[ G] NDCTWKS                          E4FF
[ G] NEGATE                           EE58
[ G] NFLAG                            0008
[ G] NIP                              FBA7
[ G] NMCVCRA                          E148
[ G] NMCVIRA                          E0D1
[ G] NMIHDL                           E035
[ G] NOT                              EDAD
[ G] NPOP                             E6A2
[ G] NPUSH                            E694
[ G] NSTBOT                           0246
[ G] NSTKSZ                           00C0
[ G] NSTTOP                           0186
[ G] NUL                              0000
[ G] NULP                             ED95
[ G] NUMCVRA                          E30E
[ G] NUMCVT                           E2B7
[ G] NXTBLK                           F6D7
[ G] NXTBLK1                          F6E2
[ G] OCTAL                            F9FF
[ G] OKPRMPT                          FE77
[ G] ONEL                             F7EB
[ G] ONEM                             F7BA
[ G] ONEP                             F77F
[ G] ONEPST                           FD6F
[ G] OR                               ED15
[ G] OVER                             FC21
[ G] PAD                              F5C6
[ G] PADBSZ                           0051
[ G] PADBUF                           0134
[ G] PAGE                             F5B0
[ G] PICK                             FBEF
[ G] PICK1                            FBFA
[ G] PLOOP                            EBE3
[ G] PLOOPEX                          EBF1
[ G] PLOPEX1                          EBF4
[ G] PLUS                             F76B
[ G] PLUSST                           FD58
[ G] PLUSST1                          FD6A
[ G] POSTPON                          F026
[ G] pragma                           0000
[ G] PRBLKIN                          E5F6
[ G] PSTR                             F21B
[ G] PSTRCMP                          F255
[ G] ptop0                            F515
[ G] PUTCH                            E1BE
[ G] PUTCR                            E1EF
[ G] PUTS                             E1E2
[ G] QMARK                            FDD2
[ G] QRYDUP                           FB76
[ G] QUIT                             EF85
[ G] RAMCHK                           E058
[ G] RAMFAIL                          E06A
[ G] RAMFM                            FE61
[SG] RAMFTCH                          0C15
[SG] RAMFTCH                          0C14
[ G] RAMOK                            E07C
[ G] RAMOKM                           FE49
[ G] RAMSIZE                          8000
[ G] RAMSTRT                          0000
[ G] RBRACK                           EFD4
[ G] RCLR                             E9F7
[ G] RDEPTH                           0125
[ G] REALEND                          FDED
[ G] RECADDR                          010E
[ G] RECURSE                          F0C3
[ G] RELFEAT                          0001
[ G] REPEAT                           EEEA
[ G] RFETCH                           EF57
[ G] RFROM                            EF0D
[ G] ROLL                             FC2E
[ G] ROLL1                            FC39
[ G] ROMSTRT                          E000
[ G] ROT                              FC4C
[ G] RPICKN                           EF41
[ G] RPOP                             E6CF
[ G] RPOPRA                           E6E8
[ G] RPSHRA                           E6CE
[ G] RPUSH                            E6B1
[ G] RSP                              0100
[ G] RSTBOT                           02C6
[ G] RSTHDL                           E036
[ G] RSTKSZ                           0080
[ G] RSTRCT                           EAF7
[ G] RSTTOP                           0246
[ G] RTSOPC                           0039
[ G] RTSREMV                          0127
[ G] SAVBUF                           E852
[ G] SCNETOK                          E295
[ G] SCNSTOK                          E287
[ G] SCR                              E950
[ G] SHARPS                           F444
[ G] SHIFT                            F801
[ G] SIGN                             F41D
[ G] SINFEQ                           ECDC
[ G] SLEN                             E1AF
[ G] SOURCE                           F1DF
[ G] SP                               0020
[ G] SPACE                            F589
[ G] SPACES                           F597
[ G] SSDFEAT                          0001
[ G] STATE                            F9D5
[ G] STORE                            FDAE
[ G] STRCT79                          0000
[ G] STRSL1                           F8C3
[ G] STRSLMD                          F8E3
[ G] STRSLSH                          F8B9
[ G] STSLFCN                          0129
[ G] SUP                              EDF1
[ G] SWAP                             FBD8
[ G] SWDIC                            E362
[ G] SWI2HDL                          E035
[ G] SWI3HDL                          E035
[ G] SWIHDL                           E035
[ G] SYSSTK                           F8F0
[ G] TBUFF                            039A
[ G] TBUFSZ                           0048
[ G] TERPRET                          F65B
[ G] THEEND                           FDDD
[ G] THEN                             EC91
[ G] THRU                             F6B5
[ G] TOIN                             E943
[ G] TOKENEP                          0104
[ G] TOKENSP                          0102
[ G] TOR                              EF19
[ G] TUCK                             FB8C
[ G] TWODIV                           F855
[ G] TWODROP                          F32F
[ G] TWODUP                           F341
[ G] TWOFTCH                          F371
[ G] TWOL                             F7F6
[ G] TWOM                             F7CD
[ G] TWOOVER                          F2F3
[ G] TWOP                             F792
[ G] TWOSTOR                          F35C
[ G] TWOSWAP                          F30F
[ G] TWOTIM                           F842
[ G] TYPE                             F5D3
[ G] UBASE                            0118
[ G] UBLK                             011E
[ G] UDOT                             F52C
[ G] UDOTR                            F572
[ G] UINF                             EDC6
[ G] UNLESS                           EC5E
[ G] UNLOOP                           EC1F
[ G] UNTIL                            EEAC
[ G] UPDATE                           E89E
[ G] USCR                             0120
[ G] USEDP                            0001
[ G] USTATE                           011A
[ G] USUP                             EDB6
[ G] UTOIN                            011C
[ G] VARCON                           E433
[ G] VARCON1                          E435
[ G] VARCON2                          E438
[ G] VARI                             EAB9
[ G] VARSPC                           0100
[ G] VECTBL                           FFF0
[ G] VLIST                            F905
[ G] VLPRVEP                          0112
[ G] VLPRVHD                          0114
[ G] WBIFDRT                          E86A
[ G] WDICSPC                          0C10
[ G] WHILE                            EEDE
[ G] WITHIN                           EDD6
[ G] WORD                             F17E
[ G] WORDS                            F8FA
[ G] WRLNMSK                          001F
[ G] WTOOLNG                          E3F2
[ G] XOR                              ECFB
[ G] XOR1                             ED10
[ G] ZEROL                            F7E1
[ G] ZFLAG                            0004
[ G] ZGREAT                           ED61
[ G] ZLESS                            ED7B
