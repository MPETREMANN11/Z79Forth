                      (        forth.asm):00001         * 6309 Forth based on my 1984/07/16 TRS-80 Model 1 level II ROM implementation.
                      (        forth.asm):00002         *
                      (        forth.asm):00003         * This work is dedicated to Alain Pinaud, author of "Programmer en Forth"
                      (        forth.asm):00004         * published by Editions du P.S.I. in 1983--i.e. my virtual mentor in the field.
                      (        forth.asm):00005         * Special thanks go William Astle for his fantastic LW Tools utility set and
                      (        forth.asm):00006         * to Robert Lipe for his advice on serial line handling. Apache subversion
                      (        forth.asm):00007         * and the sdiff utility also were on my side all the time.
                      (        forth.asm):00008         *
                      (        forth.asm):00009         * Also credited for their help: Justin Poirier (seminal HW design), Daniel
                      (        forth.asm):00010         * Tufvesson (original CompactFlash interface), Peter Minuth (general Forth
                      (        forth.asm):00011         * guruness), Paul E. Bennett (ANSI compatibility advice); Michel Jean, Bill
                      (        forth.asm):00012         * Ragsdale, Pablo Hugo Reda and Demitri Peynado for contributed application
                      (        forth.asm):00013         * level code; Carsten Strotmann for most of the benchmarking code (see
                      (        forth.asm):00014         * https://theultimatebenchmark.org/); Gerry Jackson and Steve R. Palmer
                      (        forth.asm):00015         * (see https://github.com/gerryjackson/forth2012-test-suite) for selected
                      (        forth.asm):00016         * bits and pieces of the Forth2012 test suite (see https://forth-standard.org/).
                      (        forth.asm):00017         *
                      (        forth.asm):00018         * This is a native Forth. Not a threaded interpretive implementation.
                      (        forth.asm):00019         * Worth noticing is the fact that the return stack does not hold return
                      (        forth.asm):00020         * addresses at all. All what is stored there is loop indexes and control
                      (        forth.asm):00021         * structures jump addresses. Actual return addresses are kept in the system
                      (        forth.asm):00022         * stack. All in all, this is the result of the work of a 19 year old guy,
                      (        forth.asm):00023         * heavily revisited 35 years later. Some quirks remain that prevent me
                      (        forth.asm):00024         * from offering the full required set--not to mention the choice of using
                      (        forth.asm):00025         * an 8K EEPROM. The downside of this implementation is that the generated
                      (        forth.asm):00026         * code is about 30% larger than a threaded interpretive implementation
                      (        forth.asm):00027         * would be. So it goes...
                      (        forth.asm):00028         *
                      (        forth.asm):00029         * The code generated is limited to a very small instruction set:
                      (        forth.asm):00030         *
                      (        forth.asm):00031         * LDXOPC        $8E     LDX (immediate)
                      (        forth.asm):00032         * JMPOPC        $7E     JMP (extended)
                      (        forth.asm):00033         * JSROPC        $BD     JSR (extended)
                      (        forth.asm):00034         * RTSOPC        $39     RTS (inherent)
                      (        forth.asm):00035         * BCSOPC        $2503   BCS *+5 (relative) Used in LOOP, +LOOP
                      (        forth.asm):00036         * BNEOPC        $2603   BNE *+5 (relative) Used in IF, UNTIL
                      (        forth.asm):00037         *
                      (        forth.asm):00038         * On error, the system stack pointer is reset. The return stack also is
                      (        forth.asm):00039         * but the data stack will be in the same state as when the error occurred.
                      (        forth.asm):00040         * ABORT and QUIT enforce their own 79-STANDARD behaviour.
                      (        forth.asm):00041         *
                      (        forth.asm):00042         * The 79-STANDARD Forth specification can be downloaded from
                      (        forth.asm):00043         * https://www.complang.tuwien.ac.at/forth/fth79std/FORTH-79.TXT
                      (        forth.asm):00044         *
                      (        forth.asm):00045         * Additionally, this implementation provides a few FORTH-83 words. Those
                      (        forth.asm):00046         * words are CMOVE> and RECURSE. See
                      (        forth.asm):00047         * http://forth.sourceforge.net/standard/fst83/FORTH-83.PRN
                      (        forth.asm):00048         * Floored division has been implemented on the top of the processor's native
                      (        forth.asm):00049         * symmetric operation (credits to David Frech). This results in a slight
                      (        forth.asm):00050         * performance loss but helps a lot with compatibility with FORTH-83 and ANSI
                      (        forth.asm):00051         * code.
                      (        forth.asm):00052         *
                      (        forth.asm):00053         * \ ['] [CHAR] .S ACCEPT CELLS CHAR COMPILE, INVERT KEY? NIP POSTPONE S>D S"
                      (        forth.asm):00054         * SOURCE TUCK U> * UNLOOP and WITHIN have been borrowed from the ANSI draft 6
                      (        forth.asm):00055         * specification. See http://www.forth.org/svfig/Win32Forth/DPANS94.txt
                      (        forth.asm):00056         *
                      (        forth.asm):00057         * RESTRICT is non-standard. It comes from GNU Forth (VolksForth). The " OK"
                      (        forth.asm):00058         * non-prompt string also does, by the way. Thanks to Anton Ertl for his terse
                      (        forth.asm):00059         * yet valuable input.
                      (        forth.asm):00060         *
                      (        forth.asm):00061         * .' (dot-tick) is non-standard. It comes from SwiftForth. It will be supported
                      (        forth.asm):00062         * whether or not the symbolic stack dump has been configured (see SSDFEAT in
                      (        forth.asm):00063         * constants.asm). However, please note that effective symbolic references will
                      (        forth.asm):00064         * be resolved only if the feature was enabled at compilation time. Otherwise
                      (        forth.asm):00065         * a simple HEX print of the cell at the top of the data stack will be
                      (        forth.asm):00066         * performed. This is meant to support Forth source code that does not depend
                      (        forth.asm):00067         * on the feature vector (see examples/dis.4th).
                      (        forth.asm):00068         *
                      (        forth.asm):00069         * MONITOR and ICHECK are also non-standard. They are intended to maintain and
                      (        forth.asm):00070         * verify the integrity of a checksum of the code section of RAM resident
                      (        forth.asm):00071         * words, with the exception of VARIABLEs and CREATEd words. CREATEd words,
                      (        forth.asm):00072         * if subject to the MONITOR treatment will also carry a code section
                      (        forth.asm):00073         * checksum, although this is not the default behaviour. The checksum will
                      (        forth.asm):00074         * consist in an extra byte added to every word's header. MONITOR and ICHECK
                      (        forth.asm):00075         * will be available whether or not the reliability feature has been configured
                      (        forth.asm):00076         * (see RELFEAT in constants.asm). They will only carry effective semantics
                      (        forth.asm):00077         * if the feature was actually enabled at compilation time. This is meant to
                      (        forth.asm):00078         * support Forth source code that does not depend on the feature vector.
                      (        forth.asm):00079         *
                      (        forth.asm):00080         * Experimental MC146818 RTC support: the feature is disabled by default
                      (        forth.asm):00081         * (see RTCFEAT in constants.asm) because it relies on undocumented schematics.
                      (        forth.asm):00082         * Also, the required underlying circuitry is not intended to ever become an
                      (        forth.asm):00083         * integral part of the Z79Forth reference board itself. Some better designed
                      (        forth.asm):00084         * form of it might eventually surface in the form of an extension specification.
                      (        forth.asm):00085         * At the time of this writing this is just a proof of concept, but whether or
                      (        forth.asm):00086         * not the feature is enabled, three extra words will be added to the dictionary.
                      (        forth.asm):00087         * They are RTC@ RTC! and TICKS They can be safely ignored.
                      (        forth.asm):00088         *
                      (        forth.asm):00089         * Forth source code portability note:
                      (        forth.asm):00090         * Because Z79Forth does not use the return stack to store return addresses,
                      (        forth.asm):00091         * it makes it quite easy to write code that is not readily portable to classic
                      (        forth.asm):00092         * threaded interpretive implementations. The resulting code will be simpler but
                      (        forth.asm):00093         * portability will be limited.
                      (        forth.asm):00094         *
                      (        forth.asm):00095         * Miscellaneous notes: RA stands for return address; EP for entry point.
                      (        forth.asm):00096         * CF is a shortcut for CompactFlash. TOS means top of the data/normal stack.
                      (        forth.asm):00097         * Occasionally, CFA is used for code field address which, in this
                      (        forth.asm):00098         * implementation, is a synonym for compilation address. XT means execution
                      (        forth.asm):00099         * token--the ANSI term for a compilation address. MSC stands for most
                      (        forth.asm):00100         * significant cell; LSC for least significant cell.
                      (        forth.asm):00101         *
                      (        forth.asm):00102         * The complete guide to the HD6309 extended instruction set can be found at:
                      (        forth.asm):00103         * https://cyberabi.ipower.com/Downloads/The_6309_Book.pdf. For convenience,
                      (        forth.asm):00104         * and with the author's explicit agreement, this document has been included
                      (        forth.asm):00105         * in this distribution. This is recommended reading for anyone altering this
                      (        forth.asm):00106         * code or trying to make some sense of it!!!
                      (        forth.asm):00107         *
                      (        forth.asm):00108         * This whole effort started out as a porting endeavour and ended up being a
                      (        forth.asm):00109         * substantial rewrite, trying to take advantage of the features of the 6309
                      (        forth.asm):00110         * as much as possible. The primary goals of this implementation are:
                      (        forth.asm):00111         * reliability, performance and code compactness. A number of bugs in the
                      (        forth.asm):00112         * original code have been fixed--some remain for sure!
                      (        forth.asm):00113         *
                      (        forth.asm):00114         * Obligatory literary reference:
                      (        forth.asm):00115         * "The paper is very heavy going, and I should never have read it, had I not
                      (        forth.asm):00116         * written it myself." John E. Littlewood (1885-1977).
                      (        forth.asm):00117         *
                      (        forth.asm):00118         * The original soundtrack for this work is available at:
                      (        forth.asm):00119         * https://youtu.be/YqXZtGyFyDo?t=4023 (J.S. Bach BWV 1080, contrapunctus 14).
                      (        forth.asm):00120         
0000                  (        forth.asm):00121         pragma  opt cd,operandsizewarning
                      (        forth.asm):00122         
                      (        forth.asm):00123                 include constants.asm
                      (    constants.asm):00001         * Begin tunable parameters section.
                      (    constants.asm):00002         
     0000             (    constants.asm):00003         CSSNTVE equ     0               Words and HEX numbers are case sensitive if NZ
     0001             (    constants.asm):00004         SSDFEAT equ     1               Set to 1 to enable the symbolic stack dump feat.
     0001             (    constants.asm):00005         RELFEAT set     1               Set to 1 to enable the reliability feature
                      (    constants.asm):00006         *                               Caution: when this is enabled, you can no
                      (    constants.asm):00007         *                               longer fit a DEBUG image into an 8 KB EEPROM
     0000             (    constants.asm):00008         RTCFEAT equ     0               Cool but the reliability feature must go...
     0000             (    constants.asm):00009         DEBUG   equ     0               Enforce assertions and miscellaneous checks
     0001             (    constants.asm):00010         HVNMI   equ     1               NMI handler support
     0000             (    constants.asm):00011         HVNMI2  equ     0               NMI handler support (async input debugging)
                      (    constants.asm):00012         * Loop count for MS. This is busy waiting, so we depend on the CPU clock speed.
     031A             (    constants.asm):00013         MSLCNT  equ     794             at 4 MHz native mode
                      (    constants.asm):00014         *MSLCNT equ     994             at 5 MHz native mode
                      (    constants.asm):00015         
                      (    constants.asm):00016         * End tunable parameters section.
                      (    constants.asm):00017         
                      (    constants.asm):00018                 IFNE    RTCFEAT
0000                  (    constants.asm):00019         RELFEAT set     0               RTCFEAT disables RELFEAT
                      (    constants.asm):00020                 ELSE
                      (    constants.asm):00021                 IFNE    HVNMI
                      (    constants.asm):00022                 IFNE    HVNMI2
0000                  (    constants.asm):00023         RELFEAT set     0               HVNMI and HVNMI2 disable RELFEAT
                      (    constants.asm):00024                 ENDC                    HVNMI2
                      (    constants.asm):00025                 ENDC                    HVNMI
                      (    constants.asm):00026                 ENDC                    RTCFEAT
                      (    constants.asm):00027         
                      (    constants.asm):00028         * Memory map.
     0000             (    constants.asm):00029         RAMSTRT equ     $0000
     8000             (    constants.asm):00030         RAMSIZE equ     $8000
     C000             (    constants.asm):00031         IOSTRT  equ     $C000
     E000             (    constants.asm):00032         ROMSTRT equ     $E000
     FFF0             (    constants.asm):00033         VECTBL  equ     $FFF0
                      (    constants.asm):00034         
                      (    constants.asm):00035         * Base address for global variables (direct page addressed).
     0100             (    constants.asm):00036         VARSPC  equ     $100
                      (    constants.asm):00037         
                      (    constants.asm):00038         * The 74HCT138 (U7) IO address decoder maps one 1 KB area per usable device.
     C000             (    constants.asm):00039         DEV0    equ     $C000           Compact Flash memory module (optional)
     C400             (    constants.asm):00040         DEV1    equ     $C400
     C800             (    constants.asm):00041         DEV2    equ     $C800
     CC00             (    constants.asm):00042         DEV3    equ     $CC00
     D000             (    constants.asm):00043         DEV4    equ     $D000
     D400             (    constants.asm):00044         DEV5    equ     $D400           MC146818 RTC (optional)
     D800             (    constants.asm):00045         DEV6    equ     $D800           HD63B50 unit 0
     DC00             (    constants.asm):00046         DEV7    equ     $DC00
                      (    constants.asm):00047         
     D800             (    constants.asm):00048         ACIACTL equ     DEV6
     D801             (    constants.asm):00049         ACIADAT equ     DEV6+1
                      (    constants.asm):00050         
                      (    constants.asm):00051         * ACIA control register bits.
     0003             (    constants.asm):00052         ACRST   equ     %00000011       ACIA master reset
                      (    constants.asm):00053         
                      (    constants.asm):00054         * 1.84320 MHz Y1: 115200 bps in the direct path, 38400 bps in the DIV3 path
     0001             (    constants.asm):00055         ACDIV16 equ     %00000001       ACIA div 16
                      (    constants.asm):00056         
     0014             (    constants.asm):00057         AC8N1   equ     %00010100       ACIA 8N1
     0000             (    constants.asm):00058         ACRTS0  equ     %00000000       ACIA RTS# low
     0040             (    constants.asm):00059         ACRTS1  equ     %01000000       ACIA RTS# high
     0080             (    constants.asm):00060         ACRDINT equ     %10000000       IRQ on RDRF
                      (    constants.asm):00061         
     0043             (    constants.asm):00062         ACIRSET equ     ACRTS1|ACRST
     00D5             (    constants.asm):00063         ACIRTS1 equ     ACRTS1|ACRDINT|AC8N1|ACDIV16
     0095             (    constants.asm):00064         ACIRTS0 equ     ACRTS0|ACRDINT|AC8N1|ACDIV16
                      (    constants.asm):00065         
                      (    constants.asm):00066         * ACIA status register bits.
     0001             (    constants.asm):00067         ACIRDRF equ     %00000001       Receive data register full
     0002             (    constants.asm):00068         ACITDRE equ     %00000010       Transmit data register empty
     0020             (    constants.asm):00069         ACIOVRN equ     %00100000       Overrun status register bit
     0080             (    constants.asm):00070         ACIISVC equ     %10000000       Interrupt needs servicing
                      (    constants.asm):00071         
                      (    constants.asm):00072         * Compact Flash parameters.
     C000             (    constants.asm):00073         CFBASE  equ     DEV0
     C000             (    constants.asm):00074         CFDATAR equ     CFBASE          R/W data register
     C001             (    constants.asm):00075         CFERROR equ     CFBASE+1        RO error register
     C001             (    constants.asm):00076         CFFEATR equ     CFBASE+1        WO features register
     C002             (    constants.asm):00077         CFSCNTR equ     CFBASE+2        R/W sector count register
     C003             (    constants.asm):00078         CFSNUMR equ     CFBASE+3        R/W sector number register
     C004             (    constants.asm):00079         CFCLOWR equ     CFBASE+4        R/W cylinder low register
     C005             (    constants.asm):00080         CFCHIGR equ     CFBASE+5        R/W cylinder high register
     C006             (    constants.asm):00081         CFDRHDR equ     CFBASE+6        R/W drive/head register
     C007             (    constants.asm):00082         CFSTATR equ     CFBASE+7        RO status register
     C007             (    constants.asm):00083         CFCOMDR equ     CFBASE+7        WO command register
                      (    constants.asm):00084         
                      (    constants.asm):00085         * CF status bits.
     0080             (    constants.asm):00086         CFBSYB  equ     %10000000       BSY status bit
     0040             (    constants.asm):00087         CFRDYB  equ     %01000000       RDY status bit
     0020             (    constants.asm):00088         CFDWFB  equ     %00100000       DWF status bit (not used)
     0010             (    constants.asm):00089         CFDSCB  equ     %00010000       DSC status bit (not used)
     0008             (    constants.asm):00090         CFDRQB  equ     %00001000       DRQ status bit
     0001             (    constants.asm):00091         CFERRB  equ     %00000001       ERR status bit
                      (    constants.asm):00092         
     0200             (    constants.asm):00093         CFSCSZ  equ     $200            Compact Flash (IDE) sector size
                      (    constants.asm):00094         
                      (    constants.asm):00095         * CF commands.
     00EC             (    constants.asm):00096         CFIDDEV equ     $EC             Identify Device
     00EF             (    constants.asm):00097         CFSETFT equ     $EF             Set Feature
     0020             (    constants.asm):00098         CFRSCTS equ     $20             Read Sectors
     0030             (    constants.asm):00099         CFWSCTS equ     $30             Write Sectors
                      (    constants.asm):00100         
                      (    constants.asm):00101         * Buffer in-memory structure:
                      (    constants.asm):00102         * data: 1024 bytes.
                      (    constants.asm):00103         * terminator: 1 byte set to 0.
                      (    constants.asm):00104         * flags: 1 byte.
                      (    constants.asm):00105         * blknum: 2 bytes.
     0001             (    constants.asm):00106         BINUSE  equ     1               Buffer is allocated (the blknum field is valid)
     0002             (    constants.asm):00107         BMAPPD  equ     2               Block has been read from the CF device
     0004             (    constants.asm):00108         BDIRTY  equ     4               Block has been marked for update
     0400             (    constants.asm):00109         BLKSIZ  equ     2*CFSCSZ        Block size is 2 CF sectors (1 KB)
                      (    constants.asm):00110         * Buffer field offsets.
     0400             (    constants.asm):00111         BOTERM  equ     BLKSIZ          Base buffer to the 'terminator' field offset
     0401             (    constants.asm):00112         BOFLAGS equ     BLKSIZ+1        Base buffer to the 'flag' field offset
     0402             (    constants.asm):00113         BOBLKNO equ     BLKSIZ+2        Base buffer to the 'blknum' field offset
                      (    constants.asm):00114         
     0410             (    constants.asm):00115         BFDISP  equ     BUF1-BUF0       Offset between resident buffers
                      (    constants.asm):00116         
                      (    constants.asm):00117         * MC146818 RTC registers.
     D400             (    constants.asm):00118         RTAS    equ     DEV5            Latch target register address offset
     D401             (    constants.asm):00119         RTDS    equ     (DEV5+1)        Actual target register access
                      (    constants.asm):00120         * RTC internal register offsets.
     0000             (    constants.asm):00121         RTOSEC  equ     0               Seconds
     0001             (    constants.asm):00122         RTOSECA equ     1               Seconds alarm
     0002             (    constants.asm):00123         RTOMIN  equ     2               Minutes
     0003             (    constants.asm):00124         RTOMINA equ     3               Minutes alarm
     0004             (    constants.asm):00125         RTOHOUR equ     4               Hours
     0005             (    constants.asm):00126         RTOHRA  equ     5               Hours alarm
     0006             (    constants.asm):00127         RTODOW  equ     6               Day of week
     0007             (    constants.asm):00128         RTODOM  equ     7               Day of month
     0008             (    constants.asm):00129         RTOMON  equ     8               Month
     0009             (    constants.asm):00130         RTOYEAR equ     9               Year
     000A             (    constants.asm):00131         RTOREGA equ     10              Register A
     000B             (    constants.asm):00132         RTOREGB equ     11              Register B
     000C             (    constants.asm):00133         RTOREGC equ     12              Register C
     000D             (    constants.asm):00134         RTOREGD equ     13              Register D
     000E             (    constants.asm):00135         RTOUMB  equ     14              Base of user defined NVRAM storage
     0032             (    constants.asm):00136         RTUMSZ  equ     50              Size of user defined NVRAM storage
     003F             (    constants.asm):00137         RTOPRES equ     (RTOUMB+RTUMSZ-1) RTC NVRAM offset for dectecting dev presence
                      (    constants.asm):00138         
                      (    constants.asm):00139         * Register A bits.
     0080             (    constants.asm):00140         RTAUIP  equ     $80             Update in progress
     0070             (    constants.asm):00141         RTADVRS equ     $70             Divider reset, not in operation
     0020             (    constants.asm):00142         RTADV32 equ     $20             In operation, 32 KHz time base
     000A             (    constants.asm):00143         RTARS64 equ     $A              32 KHz time base, 64 Hz PI (every 15.625 ms)
                      (    constants.asm):00144         
                      (    constants.asm):00145         * Register B bits.
     0080             (    constants.asm):00146         RTBSET  equ     $80
     0040             (    constants.asm):00147         RTBPIE  equ     $40
     0004             (    constants.asm):00148         RTBDM   equ     4               Set to 1 for binary register contents
     0002             (    constants.asm):00149         RTB24   equ     2               Set to 1 for 24 hour format
                      (    constants.asm):00150         
                      (    constants.asm):00151         * Register C bits.
     0040             (    constants.asm):00152         RTCPF   equ     $40             Periodic interrupt pending flag
                      (    constants.asm):00153         
                      (    constants.asm):00154         * ASCII trivia.
     0000             (    constants.asm):00155         NUL     equ     0               End of string marker
     0003             (    constants.asm):00156         ETX     equ     3               Control-C (intr)
     0008             (    constants.asm):00157         BS      equ     8               Backspace
     0009             (    constants.asm):00158         HT      equ     9               Horizontal tab
     000A             (    constants.asm):00159         LF      equ     $0A             Aka new line
     000D             (    constants.asm):00160         CR      equ     $0D             Carriage return
     0015             (    constants.asm):00161         NAK     equ     $15             Control-U (kill)
     0020             (    constants.asm):00162         SP      equ     $20             Aka BL in Forth
     0013             (    constants.asm):00163         XOFF    equ     $13             Aka DC3
     0011             (    constants.asm):00164         XON     equ     $11             Aka DC1
                      (    constants.asm):00165         
                      (    constants.asm):00166         * Stack sizes.
     00C0             (    constants.asm):00167         NSTKSZ  equ     192             Expressed in bytes. Now only limited by RAM size
     0080             (    constants.asm):00168         RSTKSZ  equ     128             Expressed in bytes
                      (    constants.asm):00169         
                      (    constants.asm):00170         * Buffer sizes.
     0084             (    constants.asm):00171         CMDBFSZ equ     132             Command line entry buffer
     0050             (    constants.asm):00172         HEXBFSZ equ     80
     0048             (    constants.asm):00173         TBUFSZ  equ     72              Used by VLIST to print word name and CVNSTR
     0051             (    constants.asm):00174         PADBSZ  equ     1+80            79-STANDARD mandates a minimum of 64 bytes
     0040             (    constants.asm):00175         SERBSZ  equ     64              Serial buffer size. Needs to be a power of 2
                      (    constants.asm):00176         
                      (    constants.asm):00177         * Dictionary flag masks.
     0080             (    constants.asm):00178         IMDFLM  equ     $80             Immediate flag mask
     0040             (    constants.asm):00179         DEFFLM  equ     $40             Compilation only flag mask
                      (    constants.asm):00180                 IFNE    RELFEAT
     0020             (    constants.asm):00181         MONFLM  equ     $20             Monitored flag mask. This indicates that the
                      (    constants.asm):00182         *                               word to which it relates might be checked for
                      (    constants.asm):00183         *                               integrity. This applies by default to all words
                      (    constants.asm):00184         *                               defined with : and all constants. It might
                      (    constants.asm):00185         *                               also apply to any other CREATEd object by
                      (    constants.asm):00186         *                               resorting to the MONITOR word. Using MONITOR
                      (    constants.asm):00187         *                               on variable word contents is guaranteed to
                      (    constants.asm):00188         *                               raise ICHECK's attention.
                      (    constants.asm):00189                 ENDC
                      (    constants.asm):00190         
     001F             (    constants.asm):00191         WRLNMSK equ     $1F             31 character is the maximum word length
                      (    constants.asm):00192         
                      (    constants.asm):00193         * 6309 opcodes.
     008E             (    constants.asm):00194         LDXOPC  equ     $8E             LDX (immediate)
     007E             (    constants.asm):00195         JMPOPC  equ     $7E             JMP (extended)
     00BD             (    constants.asm):00196         JSROPC  equ     $BD             JSR (extended)
     0039             (    constants.asm):00197         RTSOPC  equ     $39             RTS (inherent)
     2503             (    constants.asm):00198         BCSOPC  equ     $2503           BCS *+5 (relative)
     2603             (    constants.asm):00199         BNEOPC  equ     $2603           BNE *+5 (relative)
     00C7             (    constants.asm):00200         ILLOPC  equ     $C7             An illegal operation code. Meant to raise a trap
                      (    constants.asm):00201         
     0001             (    constants.asm):00202         CFLAG   equ     1               CC bit 0 (C)
     0004             (    constants.asm):00203         ZFLAG   equ     4               CC bit 2 (Z)
     0010             (    constants.asm):00204         IFLAG   equ     $10             CC bit 4 (I)
     0040             (    constants.asm):00205         FFLAG   equ     $40             CC bit 6 (F)
                      (    constants.asm):00206         
                      (    constants.asm):00207         * RAM based execution token for @.
     0C64             (    constants.asm):00208         RAMFTCH set     WDICSPC+4       Dictionary header overhead is word's length + 3
                      (    constants.asm):00209                 IFNE    RELFEAT         The reliability features adds one byte to the
     0C65             (    constants.asm):00210         RAMFTCH set     WDICSPC+5       header: a checksum.
                      (    constants.asm):00211                 ENDC
                      (    constants.asm):00212         
                      (        forth.asm):00124         
                      (        forth.asm):00125         * Unchecked NPUSH. This is for situations in which there is absolutely no
                      (        forth.asm):00126         * chance of overflow. For instance, in case we just popped 2 cells and push
                      (        forth.asm):00127         * back one or two.
0000                  (        forth.asm):00128         UCNPUSH MACRO   NOEXPAND
                      (        forth.asm):00129                 pshu    x
                      (        forth.asm):00130                 ENDM
                      (        forth.asm):00131         
                      (        forth.asm):00132         * Unchecked NPOP. To be used only after trusted words have been invoked, i.e.
                      (        forth.asm):00133         * when one is positively sure that the data stack contains at least one cell.
0000                  (        forth.asm):00134         UCNPOP  MACRO   NOEXPAND
                      (        forth.asm):00135                 pulu    x
                      (        forth.asm):00136                 ENDM
                      (        forth.asm):00137         
                      (        forth.asm):00138         * Make sure minimum data stack requirements are satisfied upon word entry.
                      (        forth.asm):00139         * The requirement is expressed in cell size--2 bytes on the 6309.
                      (        forth.asm):00140         * \1 specifies the required number of cells.
0000                  (        forth.asm):00141         MINDREQ MACRO   NOEXPAND
                      (        forth.asm):00142                 ldd     #NSTBOT-(\1*2)  Cell count one expects to be stacked up
                      (        forth.asm):00143                 bra     CHKNDPT         No return if the condition is not met
                      (        forth.asm):00144                 ENDM
                      (        forth.asm):00145         
                      (        forth.asm):00146         * Reliability feature support: execution tokens.
                      (        forth.asm):00147         * \1 has the opcode we want to emit.
                      (        forth.asm):00148         * \2 has the execution token address, as if the header overhead always
                      (        forth.asm):00149         * was 3 bytes.
0000                  (        forth.asm):00150         RFXT    MACRO   NOEXPAND
                      (        forth.asm):00151                 IFNE    RELFEAT
                      (        forth.asm):00152                 \1      \2+1
                      (        forth.asm):00153                 ELSE
                      (        forth.asm):00154                 \1      \2
                      (        forth.asm):00155                 ENDC                    RELFEAT
                      (        forth.asm):00156                 ENDM
                      (        forth.asm):00157         
                      (        forth.asm):00158         * Reliability feature support: variable word header contents.
                      (        forth.asm):00159         * This is a dummy checksum only used for EEPROM resident words.
                      (        forth.asm):00160         * Those never are checked for code integrity by MONITOR.
0000                  (        forth.asm):00161         RFCS    MACRO   NOEXPAND
                      (        forth.asm):00162                 IFNE    RELFEAT
                      (        forth.asm):00163                 fcb     ILLOPC          Illegal opcode
                      (        forth.asm):00164                 ENDC                    RELFEAT
                      (        forth.asm):00165                 ENDM
                      (        forth.asm):00166         
                      (        forth.asm):00167         *******************************************************************************
                      (        forth.asm):00168         * RAM definitions. We cannot initialize globals from the assembly defs.
                      (        forth.asm):00169         * All we can do here is define addresses and size things up.
                      (        forth.asm):00170         
                      (        forth.asm):00171         * RAMSTART is 0. We leave page 0 unused as a bug proof area.
                      (        forth.asm):00172         * When compiled in debug mode, this area is filled with illegal
                      (        forth.asm):00173         * instruction opcodes ($C7).
                      (        forth.asm):00174         
                      (        forth.asm):00175                 org     VARSPC
                      (        forth.asm):00176         
                      (        forth.asm):00177         * Global pointers.
0100                  (        forth.asm):00178         RSP     rmb     2               The return stack pointer
0102                  (        forth.asm):00179         TOKENSP rmb     2               Token start pointer (STRS)
0104                  (        forth.asm):00180         TOKENEP rmb     2               Token end pointer (STRE)
0106                  (        forth.asm):00181         LSTWAD  rmb     2               Last defined word header pointer--LAST
0108                  (        forth.asm):00182         DICEND  rmb     2               Current end of the dictionary--HERE
010A                  (        forth.asm):00183         BLSTWAD rmb     2               Backup (was IX)
010C                  (        forth.asm):00184         BDICEND rmb     2               Backup (was IY)
010E                  (        forth.asm):00185         PLOAD   rmb     2               Word payload if found by SWDIC
0110                  (        forth.asm):00186         FNDPLD  rmb     2               Last code payload reported by FIND
0112                  (        forth.asm):00187         RECADDR rmb     2               Used by RECURSE
0114                  (        forth.asm):00188         JSRLAST rmb     2               Last compilation address of #JSROPC
0116                  (        forth.asm):00189         VLPRVEP rmb     2               Used in VLIST to compute word code length
0118                  (        forth.asm):00190         VLPRVHD rmb     2               Used in VLIST to compute word code length
011A                  (        forth.asm):00191         MRUBUFA rmb     2               Most recently used buffer address
011C                  (        forth.asm):00192         BSBFADR rmb     2               Base buffer address for the input stream
                      (        forth.asm):00193         
                      (        forth.asm):00194         * Global variables.
011E                  (        forth.asm):00195         UBASE   rmb     2               Base for numbers input and output--BASE
0120                  (        forth.asm):00196         USTATE  rmb     2               0 if interpreting, 1 if compiling--STATE
0122                  (        forth.asm):00197         UTOIN   rmb     2               User variable for >IN
0124                  (        forth.asm):00198         UBLK    rmb     2               User variable for BLK
0126                  (        forth.asm):00199         USCR    rmb     2               User variable for SCR (output for LIST)
0128                  (        forth.asm):00200         TIKSHI  rmb     2               RTC clock ticks updated on FIRQ
012A                  (        forth.asm):00201         TIKSLOW rmb     2               RTC clock ticks updated on FIRQ
                      (        forth.asm):00202                 IFNE    DEBUG
012C                  (        forth.asm):00203         CCREG   rmb     2               A DEBUG variable for predicates (see CMP2)
                      (        forth.asm):00204                 ENDC                    DEBUG
                      (        forth.asm):00205                 IFNE    HVNMI
                      (        forth.asm):00206                 IFNE    HVNMI2
012C                  (        forth.asm):00207         SBDROPC rmb     2               Char. drop count for serial input (see FIRQHDL)
                      (        forth.asm):00208                 ENDC                    HVNMI2
                      (        forth.asm):00209                 ENDC                    HVNMI
012C                  (        forth.asm):00210         BASBKUP rmb     1               BASE backup when a base prefix is in use
012D                  (        forth.asm):00211         CMDLNSZ rmb     1               Entered character count in GETS (INTERP)
012E                  (        forth.asm):00212         RDEPTH  rmb     1               Return stack depth in cells
012F                  (        forth.asm):00213         IRDPTH  rmb     1               Return stack depth when : was last invoked
0130                  (        forth.asm):00214         RTSREMV rmb     1               If > 1, omit the final RTS when compiling
0131                  (        forth.asm):00215         DIVFCN  rmb     1               Flag used by /, MOD and /MOD
0132                  (        forth.asm):00216         F83DIVF rmb     1               FORTH-83 adjusment flag for floored division
0133                  (        forth.asm):00217         STSLFCN rmb     1               Flag used by */, */MOD
0134                  (        forth.asm):00218         CVTFCN  rmb     1               CVT: 0 => # semantics, 1 => #S semantics
0135                  (        forth.asm):00219         ISNEGF  rmb     1               Number being scanned is negative
0136                  (        forth.asm):00220         ISDBLF  rmb     1               Number being scanned is a double
0137                  (        forth.asm):00221         CVISSGN rmb     1               Flag: should CVNSTR consider numbers as signed
0138                  (        forth.asm):00222         CURTOKL rmb     1               Current token length. Set by SWDIC
0139                  (        forth.asm):00223         IMDFLG  rmb     1               Immediate flag
013A                  (        forth.asm):00224         DEFFLG  rmb     1               Define flag
013B                  (        forth.asm):00225         NBCTFB0 rmb     1               NZ if -->/CONTINUED invoked from the console
013C                  (        forth.asm):00226         RTCAVL  rmb     1               NZ if real time clock is present
013D                  (        forth.asm):00227         CFCARDP rmb     1               NZ if CF card present
013E                  (        forth.asm):00228         CFCMMIR rmb     1               Last CF command issued
013F                  (        forth.asm):00229         CFERRCD rmb     1               and the corresponding error code
                      (        forth.asm):00230         
                      (        forth.asm):00231         * Serial buffer parameters. Queing happens on FIRQ.
                      (        forth.asm):00232         * Dequeing occurs when GETCH is invoked.
0140                  (        forth.asm):00233         SERBENQ rmb     1               Enqueue offset
0141                  (        forth.asm):00234         SERBDEQ rmb     1               Dequeue offset
0142                  (        forth.asm):00235         SERBCNT rmb     1               Buffer byte count
0143                  (        forth.asm):00236         XMITOK  rmb     1               Software flow control on output flag
0144                  (        forth.asm):00237         SERBUF  rmb     SERBSZ          The actual buffer
                      (        forth.asm):00238         
0184                  (        forth.asm):00239         PADBUF  rmb     PADBSZ          PAD lives here. Used by <#, #, #S, #>
                      (        forth.asm):00240         
                      (        forth.asm):00241         * The normal (data) stack.
01D5 00               (        forth.asm):00242                 align   2
     01D6             (        forth.asm):00243         NSTTOP  equ     *               U's value when the data stack is full
01D6                  (        forth.asm):00244                 rmb     NSTKSZ
     0296             (        forth.asm):00245         NSTBOT  equ     *               U's value when the data stack is empty
                      (        forth.asm):00246         
                      (        forth.asm):00247         * The return stack.
     0296             (        forth.asm):00248         RSTTOP  equ     *
0296                  (        forth.asm):00249                 rmb     RSTKSZ
     0316             (        forth.asm):00250         RSTBOT  equ     *
                      (        forth.asm):00251         
0316                  (        forth.asm):00252         CMDBUF  rmb     CMDBFSZ
039A                  (        forth.asm):00253         HEXBUF  rmb     HEXBFSZ
                      (        forth.asm):00254         
03EA                  (        forth.asm):00255         TBUFF   rmb     TBUFSZ          Output for CVNSTR
                      (        forth.asm):00256         
0432 0000000000000000 (        forth.asm):00257                 align   16
     000000000000
0440                  (        forth.asm):00258         BUF0    rmb     BLKSIZ+4
                      (        forth.asm):00259         
0844 0000000000000000 (        forth.asm):00260                 align   16
     00000000
0850                  (        forth.asm):00261         BUF1    rmb     BLKSIZ+4
                      (        forth.asm):00262         
                      (        forth.asm):00263         *******************************************************************************
                      (        forth.asm):00264         * Writable dictionary section begins right here. We cannot have anything
                      (        forth.asm):00265         * statically defined at this point. Therefore, FORTHIN moves the code for @
                      (        forth.asm):00266         * to this location and sets up DICEND and LSTWAD accordingly. All the RAM
                      (        forth.asm):00267         * beyond this point (after the reallocated @ implementation) is user defined
                      (        forth.asm):00268         * material. Note that builtin words, though they cannot be forgotten (to the
                      (        forth.asm):00269         * extent they are ROM resident--not to mention inter-word dependencies),
                      (        forth.asm):00270         * might still be overridden by user definitions. VLIST will happily ignore
                      (        forth.asm):00271         * that fact and list everything in the dictionary linked list order.
                      (        forth.asm):00272         
0C54 0000000000000000 (        forth.asm):00273                 align   16
     00000000
     0C60             (        forth.asm):00274         WDICSPC equ     *
                      (        forth.asm):00275         
                      (        forth.asm):00276         *******************************************************************************
                      (        forth.asm):00277         * ROM code begins.
                      (        forth.asm):00278         
                      (        forth.asm):00279                 org     ROMSTRT
                      (        forth.asm):00280         * Trap handler: division by zero or illegal opcode. See page 4-10 of "The 6309
                      (        forth.asm):00281         * Book" for a description of interrupt stacks in native 6309 mode.
E000 113C40           (        forth.asm):00282 (4)     IODZHDL bitmd   #$40            Illegal opcode?
E003 2705             (        forth.asm):00283 (3)             beq     @iodzh1
E005 8EFEA4           (        forth.asm):00284 (3)             ldx     #IOPERRM
E008 2008             (        forth.asm):00285 (3)             bra     @iodxh2
E00A 113C80           (        forth.asm):00286 (4)     @iodzh1 bitmd   #$80            Division by zero?
E00D 2726             (        forth.asm):00287 (3)             beq     @iodzh3         And you may ask yourself, well
                      (        forth.asm):00288         *                               How did I get here?
E00F 8EFEB9           (        forth.asm):00289 (3)             ldx     #DV0ERRM
E012 BDE2F3           (        forth.asm):00290 (7)     @iodxh2 jsr     PUTS
E015 EC6C             (        forth.asm):00291 (5+1)           ldd     12,s            Return code address (PC)
E017 108E039A         (        forth.asm):00292 (4)             ldy     #HEXBUF
E01B BDE195           (        forth.asm):00293 (7)             jsr     HDMP4   
E01E 8E039A           (        forth.asm):00294 (3)             ldx     #HEXBUF
E021 BDE2F3           (        forth.asm):00295 (7)             jsr     PUTS
E024 BDE300           (        forth.asm):00296 (7)             jsr     PUTCR
E027 8EE76D           (        forth.asm):00297 (3)             ldx     #ERRHD1
E02A AF6C             (        forth.asm):00298 (5+1)           stx     12,s            Resume execution in the error handler
E02C 8EE000           (        forth.asm):00299 (3)             ldx     #IODZHDL
E02F AF68             (        forth.asm):00300 (5+1)           stx     8,s             With Y set to IODZHDL
E031 8603             (        forth.asm):00301 (2)             lda     #3              And user ABORT error code
E033 A762             (        forth.asm):00302 (4+1)           sta     2,s             Passed back through B
E035 3B               (        forth.asm):00303 (17+?)  @iodzh3 rti
                      (        forth.asm):00304         
     E036             (        forth.asm):00305         SWI3HDL equ     *
     E036             (        forth.asm):00306         SWI2HDL equ     *
     E036             (        forth.asm):00307         IRQHDL  equ     *
     E036             (        forth.asm):00308         SWIHDL  equ     *
                      (        forth.asm):00309                 IFEQ    HVNMI
E036                  (        forth.asm):00310         NMIHDL                          These should never happen
                      (        forth.asm):00311                 ENDC
E036 3B               (        forth.asm):00312 (17+?)          rti
                      (        forth.asm):00313         
                      (        forth.asm):00314         * Interrupts are disabled by default upon reset.
                      (        forth.asm):00315         * NMI# will not be "armed" until S is initiliazed.
E037 113D01           (        forth.asm):00316 (5)     RSTHDL  ldmd    #1              Establish 6309 native mode
                      (        forth.asm):00317         
E03A 8643             (        forth.asm):00318 (2)             lda     #ACIRSET
E03C B7D800           (        forth.asm):00319 (4)             sta     ACIACTL         ACIA master reset
E03F 86D5             (        forth.asm):00320 (2)             lda     #ACIRTS1
E041 B7D800           (        forth.asm):00321 (4)             sta     ACIACTL         RTS# high, 8N1
                      (        forth.asm):00322         
E044 8EFE20           (        forth.asm):00323 (3)             ldx     #BOOTMSG        Identity statement
                      (        forth.asm):00324         
                      (        forth.asm):00325         * Send the NUL terminated string pointed to by X to the ACIA.
                      (        forth.asm):00326         * The RAM is not yet assumed to be working.
E047 C602             (        forth.asm):00327 (2)     INIT    ldb     #ACITDRE
E049 A680             (        forth.asm):00328 (4+1)   @init0  lda     ,x+
E04B 270A             (        forth.asm):00329 (3)             beq     RAMCHK          NUL marks the end of the string
E04D F5D800           (        forth.asm):00330 (4)     @init1  bitb    ACIACTL         Wait for TDRE bit to be set
E050 27FB             (        forth.asm):00331 (3)             beq     @init1
E052 B7D801           (        forth.asm):00332 (4)             sta     ACIADAT         Transmit data
E055 20F2             (        forth.asm):00333 (3)             bra     @init0          Next char, if any
                      (        forth.asm):00334         
                      (        forth.asm):00335         * RAM0 32 KB self test (destructive).
E057 8E0000           (        forth.asm):00336 (3)     RAMCHK  ldx     #RAMSTRT
E05A AF84             (        forth.asm):00337 (5+0)   @ramch1 stx     ,x
E05C AC84             (        forth.asm):00338 (5+0)           cmpx    ,x
E05E 2609             (        forth.asm):00339 (3)             bne     RAMFAIL
E060 3002             (        forth.asm):00340 (4+1)           leax    2,x
E062 8C8000           (        forth.asm):00341 (3)             cmpx    #RAMSTRT+RAMSIZE
E065 26F3             (        forth.asm):00342 (3)             bne     @ramch1
E067 2012             (        forth.asm):00343 (3)             bra     RAMOK
                      (        forth.asm):00344         
E069 C680             (        forth.asm):00345 (2)     RAMFAIL ldb     #128
E06B 108E8000         (        forth.asm):00346 (4)     @ramf1  ldy     #$8000
E06F 313F             (        forth.asm):00347 (4+1)   @ramf2  leay    -1,y
E071 26FC             (        forth.asm):00348 (3)             bne     @ramf2
E073 5A               (        forth.asm):00349 (1)             decb
E074 26F5             (        forth.asm):00350 (3)             bne     @ramf1
E076 8EFE8B           (        forth.asm):00351 (3)             ldx     #RAMFM
E079 20CC             (        forth.asm):00352 (3)             bra     INIT            Here we go again
                      (        forth.asm):00353         
                      (        forth.asm):00354         * RAM Initialization to all $C7 if DEBUG mode is enabled else zeroes.
E07B 8E0000           (        forth.asm):00355 (3)     RAMOK   ldx     #RAMSTRT
E07E 3101             (        forth.asm):00356 (4+1)           leay    1,x
E080 10867FFF         (        forth.asm):00357 (4)             ldw     #RAMSIZE-1
                      (        forth.asm):00358                 IFNE    DEBUG
                      (        forth.asm):00359                 lda     #ILLOPC
                      (        forth.asm):00360                 sta     ,x
                      (        forth.asm):00361                 ELSE
E084 6F84             (        forth.asm):00362 (6+0)           clr     ,x
                      (        forth.asm):00363                 ENDC                    DEBUG
E086 113812           (        forth.asm):00364 (6+?)           tfm     x+,y+
                      (        forth.asm):00365         
                      (        forth.asm):00366         * Initialize the system stack pointer and the direct page base address register.
E089 10CE8000         (        forth.asm):00367 (4)             lds     #RAMSTRT+RAMSIZE
E08D 8601             (        forth.asm):00368 (2)             lda     #VARSPC/256
E08F 1F8B             (        forth.asm):00369 (4)             tfr     a,dp
     01               (        forth.asm):00370                 SETDP   VARSPC/256
                      (        forth.asm):00371         
                      (        forth.asm):00372         * Serial buffer parameters initialization. We are doing this here because
                      (        forth.asm):00373         * PUTS requires prior software flow control initialization.
                      (        forth.asm):00374                 IFNE    DEBUG
                      (        forth.asm):00375                 clrd
                      (        forth.asm):00376                 std     SERBENQ         Two birds with one stone
                      (        forth.asm):00377                 sta     SERBCNT
                      (        forth.asm):00378                 IFNE    HVNMI
                      (        forth.asm):00379                 IFNE    HVNMI2
                      (        forth.asm):00380                 std     SBDROPC         Initialize chararacter drop count
                      (        forth.asm):00381                 ENDC                    HVNMI2
                      (        forth.asm):00382                 ENDC                    HVNMI
                      (        forth.asm):00383                 ENDC                    DEBUG
E091 8601             (        forth.asm):00384 (2)             lda     #1              Initialize software flow control on output
E093 9743             (        forth.asm):00385 (3)             sta     XMITOK
                      (        forth.asm):00386         
E095 8EFE7B           (        forth.asm):00387 (3)             ldx     #RAMOKM
E098 BDE2F3           (        forth.asm):00388 (7)             jsr     PUTS
E09B BDE359           (        forth.asm):00389 (7)             jsr     FORTHIN         Global variables initialization
E09E BDE8C4           (        forth.asm):00390 (7)             jsr     CFINIT          CompactFlash card initialization
                      (        forth.asm):00391                 IFNE    RTCFEAT
                      (        forth.asm):00392                 jsr     RTCINIT         Real time clock initialization
                      (        forth.asm):00393                 ENDC                    RTCFEAT
                      (        forth.asm):00394         
                      (        forth.asm):00395         * Lower RTS and enable FIRQ.
E0A1 8695             (        forth.asm):00396 (2)             lda     #ACIRTS0
E0A3 B7D800           (        forth.asm):00397 (4)             sta     ACIACTL
E0A6 1CBF             (        forth.asm):00398 (2)             andcc   #^FFLAG
                      (        forth.asm):00399         
E0A8 0D3D             (        forth.asm):00400 (4)             tst     CFCARDP
E0AA 2706             (        forth.asm):00401 (3)             beq     INTERP
                      (        forth.asm):00402         
                      (        forth.asm):00403         * A CF card is present, LOAD block #1.
E0AC 8E0001           (        forth.asm):00404 (3)             ldx     #1
E0AF BDF7F8           (        forth.asm):00405 (7)             jsr     LOAD1
                      (        forth.asm):00406         
                      (        forth.asm):00407         * The interpreter main loop.
E0B2 104F             (        forth.asm):00408 (2)     INTERP  clrd
E0B4 DD24             (        forth.asm):00409 (4)             std     UBLK            Interpreting from the console. Set BLK to 0
E0B6 DD22             (        forth.asm):00410 (4)             std     UTOIN
E0B8 8E0316           (        forth.asm):00411 (3)             ldx     #CMDBUF
E0BB 9F1C             (        forth.asm):00412 (4)             stx     BSBFADR
E0BD C683             (        forth.asm):00413 (2)             ldb     #CMDBFSZ-1      NUL terminator is not included in the char count
E0BF BDE316           (        forth.asm):00414 (7)             jsr     GETS            Acquire command from the console
                      (        forth.asm):00415         * Additional setup in case the ANSI \ is used.
E0C2 D72D             (        forth.asm):00416 (3)             stb     CMDLNSZ         GETS returns the entered character count via B
                      (        forth.asm):00417         * Additional preparation work for block support.
E0C4 0F3B             (        forth.asm):00418 (5)             clr     NBCTFB0         Flag whether -->/CONTINUED is called from blk 0
E0C6 8D02             (        forth.asm):00419 (6)             bsr     _INTERP
E0C8 20E8             (        forth.asm):00420 (3)     MINTLRA bra     INTERP
                      (        forth.asm):00421         
                      (        forth.asm):00422         * The interpreter itself.
E0CA BDE38E           (        forth.asm):00423 (7)     _INTERP jsr     SCNSTOK         Scan for the beginning of a word at address X
E0CD 2717             (        forth.asm):00424 (3)             beq     @more0          This is the end
E0CF 1F10             (        forth.asm):00425 (4)             tfr     x,d             Starting token address to D
E0D1 BDE177           (        forth.asm):00426 (7)             jsr     U2INFRD         Derive >IN from D
E0D4 0D21             (        forth.asm):00427 (4)             tst     USTATE+1        We do ignore the upper byte
E0D6 263E             (        forth.asm):00428 (3)             bne     COMP            We are compiling
E0D8 BDE4A9           (        forth.asm):00429 (7)             jsr     SWDIC           Updates TOKENEP, CURTOKL, IMDFLG/DEFFLG
E0DB 2620             (        forth.asm):00430 (3)             bne     @exec           Word found, execute it
E0DD BDE3E9           (        forth.asm):00431 (7)             jsr     NUMCVT
     E0E0             (        forth.asm):00432         NMCVIRA equ     *
E0E0 9E04             (        forth.asm):00433 (4)             ldx     TOKENEP
E0E2 6D84             (        forth.asm):00434 (5+0)   MORE    tst     ,x
E0E4 26E4             (        forth.asm):00435 (3)             bne     _INTERP         Next token, please!
                      (        forth.asm):00436         * End of input stream condition is recognized.
E0E6 DC24             (        forth.asm):00437 (4)     @more0  ldd     UBLK
E0E8 2705             (        forth.asm):00438 (3)             beq     @more1          We are back from the console
E0EA 0D3B             (        forth.asm):00439 (4)             tst     NBCTFB0         -->/CONTINUED invoked from the console?
E0EC 2601             (        forth.asm):00440 (3)             bne     @more1          Yes
E0EE 39               (        forth.asm):00441 (4)             rts                     No, we're done here
E0EF 0F3B             (        forth.asm):00442 (5)     @more1  clr     NBCTFB0         The -->/CONTINUED exception only applies once
E0F1 8EFE9E           (        forth.asm):00443 (3)             ldx     #OKFEEDB        Provide OK feedback
E0F4 0D21             (        forth.asm):00444 (4)             tst     USTATE+1        No OK feedback if we're compiling, just CRLF
E0F6 2702             (        forth.asm):00445 (3)             beq     @more2
E0F8 3003             (        forth.asm):00446 (4+1)           leax    3,x             Skip the ' OK' string when compiling
E0FA 7EE2F3           (        forth.asm):00447 (3)     @more2  jmp     PUTS            Back to whoever invoked us
E0FD 963A             (        forth.asm):00448 (3)     @exec   lda     DEFFLG
E0FF 2705             (        forth.asm):00449 (3)             beq     @introk         Compilation only flag is not set
E101 C606             (        forth.asm):00450 (2)             ldb     #6              Incorrect STATE
E103 BDE76A           (        forth.asm):00451 (7)             jsr     ERRHDLR         No return
     E106             (        forth.asm):00452         INTISRA equ     *               For symbolic stack debugging purposes
E106 DC04             (        forth.asm):00453 (4)     @introk ldd     TOKENEP
E108 8D6D             (        forth.asm):00454 (6)             bsr     U2INFRD         Derive >IN from D
E10A 8EE111           (        forth.asm):00455 (3)             ldx     #INTRPRA        The return address
E10D 3410             (        forth.asm):00456 (4+2)           pshs    x
E10F 1F25             (        forth.asm):00457 (4)             tfr     y,pc            An indirect call to Y
E111 BDE841           (        forth.asm):00458 (7)     INTRPRA jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
E114 20CC             (        forth.asm):00459 (3)             bra     MORE
                      (        forth.asm):00460         
                      (        forth.asm):00461         * The compiler.
                      (        forth.asm):00462         * Upon entry TOKENSP has been set by a prior call to SCNSTOK.
E116 BDE4A9           (        forth.asm):00463 (7)     COMP    jsr     SWDIC           Updates TOKENEP, CURTOKL, IMDFLG/DEFFLG
E119 271E             (        forth.asm):00464 (3)             beq     @cmpnum         Word @ TOKENSP is not in the dictionary
E11B 0D39             (        forth.asm):00465 (4)             tst     IMDFLG
E11D 2712             (        forth.asm):00466 (3)             beq     @notimd
E11F DC04             (        forth.asm):00467 (4)             ldd     TOKENEP
E121 8D54             (        forth.asm):00468 (6)             bsr     U2INFRD         Derive >IN from D
E123 8EE12A           (        forth.asm):00469 (3)             ldx     #COMPLRA        Word is immediate. Execute it.
E126 3410             (        forth.asm):00470 (4+2)           pshs    x               Return to COMPLRA
E128 1F25             (        forth.asm):00471 (4)             tfr     y,pc            An indirect call to Y
E12A BDE841           (        forth.asm):00472 (7)     COMPLRA jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
E12D 9F04             (        forth.asm):00473 (4)             stx     TOKENEP
E12F 20B1             (        forth.asm):00474 (3)             bra     MORE            Branch back to the interpreter
E131 1F21             (        forth.asm):00475 (4)     @notimd tfr     y,x
E133 8D34             (        forth.asm):00476 (6)             bsr     EMXASXT         Emit X as an execution token
E135 9E04             (        forth.asm):00477 (4)     @cmpdon ldx     TOKENEP
E137 20A9             (        forth.asm):00478 (3)             bra     MORE
E139 BDE3E9           (        forth.asm):00479 (7)     @cmpnum jsr     NUMCVT
     E13C             (        forth.asm):00480         NMCVCRA equ     *
E13C 0D36             (        forth.asm):00481 (4)             tst     ISDBLF
E13E 2607             (        forth.asm):00482 (3)             bne     @cmpdbl
E140 3710             (        forth.asm):00483                 UCNPOP                  TOS to X
E142 BDE578           (        forth.asm):00484 (7)             jsr     LITER
E145 20EE             (        forth.asm):00485 (3)             bra     @cmpdon
                      (        forth.asm):00486         * The following is some sort of half baked 2LITERAL.
                      (        forth.asm):00487         * Please note that NUMCVT guarantees us that at least two cells are stacked up.
E147 AE42             (        forth.asm):00488 (5+1)   @cmpdbl ldx     2,u
E149 BDE578           (        forth.asm):00489 (7)             jsr     LITER           LSC
E14C AEC4             (        forth.asm):00490 (5+0)           ldx     ,u
E14E BDE578           (        forth.asm):00491 (7)             jsr     LITER           MSC
E151 3344             (        forth.asm):00492 (4+1)           leau    4,u             2DROP
E153 20E0             (        forth.asm):00493 (3)             bra     @cmpdon
                      (        forth.asm):00494         
                      (        forth.asm):00495         * Check whether the final RTS can be eliminated. It can only be if we have no
                      (        forth.asm):00496         * forward references to HERE when COMPR (;) is invoked. This is a rather
                      (        forth.asm):00497         * complicated matter but this implementation works on the basis that we can do
                      (        forth.asm):00498         * so safely if at least 2 subroutine calls have been issued with a return
                      (        forth.asm):00499         * stack whose depth is equal to IRDPTH, immediately prior to the invokation
                      (        forth.asm):00500         * of COMPR (;).
E155 3402             (        forth.asm):00501 (4+1)   CHKRTS  pshs    a
E157 109F14           (        forth.asm):00502 (5)             sty     JSRLAST         JSRLAST points to the latest JSR code emission
E15A 962E             (        forth.asm):00503 (3)             lda     RDEPTH
E15C 912F             (        forth.asm):00504 (3)             cmpa    IRDPTH          Return stack depth when : was last invoked
E15E 2705             (        forth.asm):00505 (3)             beq     @ckrts1
E160 0F30             (        forth.asm):00506 (5)             clr     RTSREMV
E162 3502             (        forth.asm):00507 (4+1)   @ckrts0 puls    a
E164 39               (        forth.asm):00508 (4)             rts
E165 0C30             (        forth.asm):00509 (5)     @ckrts1 inc     RTSREMV
E167 20F9             (        forth.asm):00510 (3)             bra     @ckrts0
                      (        forth.asm):00511         
                      (        forth.asm):00512         * Emit (in a code generation understanding) X as an execution token.
                      (        forth.asm):00513         * In essence, this simply inserts JSR <X> at HERE.
                      (        forth.asm):00514         * Note: this code provides support for trailing JSR elimination.
                      (        forth.asm):00515         * On input: X has the target execution token.
                      (        forth.asm):00516         * On output: Y will have HERE, A will be altered, X will be preserved.
E169 109E08           (        forth.asm):00517 (5)     EMXASXT ldy     DICEND
E16C 8DE7             (        forth.asm):00518 (6)             bsr     CHKRTS          Check if the final RTS can be omitted
E16E 86BD             (        forth.asm):00519 (2)             lda     #JSROPC         JSR extended
E170 BDE58F           (        forth.asm):00520 (7)             jsr     VARCON2         Compile a JSR to the execution token
E173 109F08           (        forth.asm):00521 (5)             sty     DICEND
E176 39               (        forth.asm):00522 (4)             rts
                      (        forth.asm):00523         
                      (        forth.asm):00524         * Derive UTOIN from D's current value. D is altered.
E177 931C             (        forth.asm):00525 (4)     U2INFRD subd    BSBFADR
E179 DD22             (        forth.asm):00526 (4)             std     UTOIN
E17B 39               (        forth.asm):00527 (4)             rts
                      (        forth.asm):00528         
                      (        forth.asm):00529         * Store the HEX representation of the lower nibble of A to Y+.
E17C 3404             (        forth.asm):00530 (4+1)   HEX1D   pshs    b
E17E C630             (        forth.asm):00531 (2)             ldb     #'0
E180 840F             (        forth.asm):00532 (2)             anda    #$0f
E182 810A             (        forth.asm):00533 (2)             cmpa    #10
E184 2502             (        forth.asm):00534 (3)             bcs     @hex1d1
E186 C637             (        forth.asm):00535 (2)             ldb     #'A-10
E188 103098           (        forth.asm):00536 (4)     @hex1d1 addr    b,a
E18B A7A0             (        forth.asm):00537 (4+1)           sta     ,y+
E18D 3504             (        forth.asm):00538 (4+1)           puls    b
E18F 39               (        forth.asm):00539 (4)             rts
                      (        forth.asm):00540         
E190 44               (        forth.asm):00541 (1)     ADIV16  lsra
E191 44               (        forth.asm):00542 (1)             lsra
E192 44               (        forth.asm):00543 (1)             lsra
E193 44               (        forth.asm):00544 (1)             lsra
E194 39               (        forth.asm):00545 (4)             rts
                      (        forth.asm):00546         
                      (        forth.asm):00547         * Hexdump D to 4 bytes starting at Y.  Upon return, Y will point 1 byte
                      (        forth.asm):00548         * after the last character emitted. D is preserved.
E195 3406             (        forth.asm):00549 (4+2)   HDMP4   pshs    d
E197 8DF7             (        forth.asm):00550 (6)             bsr     ADIV16
E199 8DE1             (        forth.asm):00551 (6)             bsr     HEX1D
E19B A6E4             (        forth.asm):00552 (4+0)           lda     ,s
E19D 8DDD             (        forth.asm):00553 (6)             bsr     HEX1D
E19F A661             (        forth.asm):00554 (4+1)           lda     1,s
E1A1 8DED             (        forth.asm):00555 (6)             bsr     ADIV16
E1A3 8DD7             (        forth.asm):00556 (6)             bsr     HEX1D
E1A5 A661             (        forth.asm):00557 (4+1)           lda     1,s
E1A7 8DD3             (        forth.asm):00558 (6)             bsr     HEX1D
E1A9 3506             (        forth.asm):00559 (4+2)           puls    d
E1AB 6FA4             (        forth.asm):00560 (6+0)           clr     ,y
E1AD 39               (        forth.asm):00561 (4)             rts
                      (        forth.asm):00562         
E1AE 3406             (        forth.asm):00563 (4+2)   HDMP2   pshs    d
E1B0 8DDE             (        forth.asm):00564 (6)             bsr     ADIV16
E1B2 8DC8             (        forth.asm):00565 (6)             bsr     HEX1D
E1B4 A6E4             (        forth.asm):00566 (4+0)           lda     ,s
E1B6 8DC4             (        forth.asm):00567 (6)             bsr     HEX1D
E1B8 3506             (        forth.asm):00568 (4+2)           puls    d
E1BA 6FA4             (        forth.asm):00569 (6+0)           clr     ,y
E1BC 39               (        forth.asm):00570 (4)             rts
                      (        forth.asm):00571         
                      (        forth.asm):00572                 IFNE    HVNMI
                      (        forth.asm):00573         * Add string pointed to by X starting at the address stored in Y.
E1BD 3402             (        forth.asm):00574 (4+1)   ADDS    pshs    a
E1BF A680             (        forth.asm):00575 (4+1)   @adds1  lda     ,x+
E1C1 A7A0             (        forth.asm):00576 (4+1)           sta     ,y+
E1C3 26FA             (        forth.asm):00577 (3)             bne     @adds1
E1C5 3502             (        forth.asm):00578 (4+1)           puls    a
E1C7 39               (        forth.asm):00579 (4)             rts
                      (        forth.asm):00580         
E1C8 8DF3             (        forth.asm):00581 (6)     NMI2DM  bsr     ADDS
E1CA 313F             (        forth.asm):00582 (4+1)           leay    -1,y            Backward over NUL
E1CC 20E0             (        forth.asm):00583 (3)             bra     HDMP2
                      (        forth.asm):00584         
E1CE 8DED             (        forth.asm):00585 (6)     NMI4DM  bsr     ADDS
E1D0 313F             (        forth.asm):00586 (4+1)           leay    -1,y            Backward over NUL
E1D2 20C1             (        forth.asm):00587 (3)             bra     HDMP4
                      (        forth.asm):00588         
E1D4 8E03EA           (        forth.asm):00589 (3)     NMIDML  ldx     #TBUFF
E1D7 BDE2F3           (        forth.asm):00590 (7)             jsr     PUTS
E1DA 7EE300           (        forth.asm):00591 (3)             jmp     PUTCR
                      (        forth.asm):00592         
                      (        forth.asm):00593         * All registers are stacked in native mode.
E1DD B6D800           (        forth.asm):00594 (4)     NMIHDL  lda     ACIACTL
E1E0 3402             (        forth.asm):00595 (4+1)           pshs    a
E1E2 9643             (        forth.asm):00596 (3)             lda     XMITOK
E1E4 3402             (        forth.asm):00597 (4+1)           pshs    a
E1E6 8601             (        forth.asm):00598 (2)             lda     #1
E1E8 9743             (        forth.asm):00599 (3)             sta     XMITOK
                      (        forth.asm):00600         * Stack structure at this point
                      (        forth.asm):00601         * 0     saved XMITOK: 1 byte
                      (        forth.asm):00602         * 1     saved ACIA status register: 1 byte
                      (        forth.asm):00603         * 2     CC
                      (        forth.asm):00604         * 3     D
                      (        forth.asm):00605         * 5     W
                      (        forth.asm):00606         * 7     DP
                      (        forth.asm):00607         * 8     X
                      (        forth.asm):00608         * 10    Y
                      (        forth.asm):00609         * 12    U
                      (        forth.asm):00610         * 14    PC
E1EA BDE300           (        forth.asm):00611 (7)             jsr     PUTCR
                      (        forth.asm):00612         
                      (        forth.asm):00613         * First line: CC, D, W, DP, X, Y, U, PC, S
E1ED 108E03EA         (        forth.asm):00614 (4)             ldy     #TBUFF
E1F1 8EE220           (        forth.asm):00615 (3)             ldx     #CCREGM
E1F4 A662             (        forth.asm):00616 (4+1)           lda     2,s             CC in the system stack
E1F6 8DD0             (        forth.asm):00617 (6)             bsr     NMI2DM
                      (        forth.asm):00618         
E1F8 EC63             (        forth.asm):00619 (5+1)           ldd     3,s             D in the system stack
E1FA 8DD2             (        forth.asm):00620 (6)             bsr     NMI4DM
                      (        forth.asm):00621         
E1FC EC65             (        forth.asm):00622 (5+1)           ldd     5,s             W in the system stack
E1FE 8DCE             (        forth.asm):00623 (6)             bsr     NMI4DM
                      (        forth.asm):00624         
E200 A667             (        forth.asm):00625 (4+1)           lda     7,s             DP in the system stack
E202 8DC4             (        forth.asm):00626 (6)             bsr     NMI2DM
                      (        forth.asm):00627         
E204 EC68             (        forth.asm):00628 (5+1)           ldd     8,s             X in the system stack
E206 8DC6             (        forth.asm):00629 (6)             bsr     NMI4DM
                      (        forth.asm):00630         
E208 EC6A             (        forth.asm):00631 (5+1)           ldd     10,s            Y in the system stack
E20A 8DC2             (        forth.asm):00632 (6)             bsr     NMI4DM
                      (        forth.asm):00633         
E20C EC6C             (        forth.asm):00634 (5+1)           ldd     12,s            U in the system stack
E20E 8DBE             (        forth.asm):00635 (6)             bsr     NMI4DM
                      (        forth.asm):00636         
E210 EC6E             (        forth.asm):00637 (5+1)           ldd     14,s            PC in the system stack
E212 8DBA             (        forth.asm):00638 (6)             bsr     NMI4DM
                      (        forth.asm):00639         
E214 33E810           (        forth.asm):00640 (4+1)           leau    16,s            S in the system stack
E217 1F30             (        forth.asm):00641 (4)             tfr     u,d
E219 8DB3             (        forth.asm):00642 (6)             bsr     NMI4DM
                      (        forth.asm):00643         
E21B 8DB7             (        forth.asm):00644 (6)             bsr     NMIDML
                      (        forth.asm):00645         
                      (        forth.asm):00646                 IFNE    HVNMI2
                      (        forth.asm):00647         * Second line: ACIST, XMTOK, SBASE, SBENQ, SBDEQ, SBCNT, SBDROPC
                      (        forth.asm):00648                 ldy     #TBUFF
                      (        forth.asm):00649                 ldx     #ACISTM
                      (        forth.asm):00650                 lda     1,s             ACIA status register in the system stack
                      (        forth.asm):00651                 bsr     NMI2DM
                      (        forth.asm):00652         
                      (        forth.asm):00653                 lda     ,s              XMITOK in the system stack
                      (        forth.asm):00654                 bsr     NMI2DM
                      (        forth.asm):00655         
                      (        forth.asm):00656                 ldd     #SERBUF         SERBUF address
                      (        forth.asm):00657                 bsr     NMI4DM
                      (        forth.asm):00658         
                      (        forth.asm):00659                 lda     SERBENQ         SERBENQ 8 bit offset
                      (        forth.asm):00660                 bsr     NMI2DM
                      (        forth.asm):00661         
                      (        forth.asm):00662                 lda     SERBDEQ         SERBDEQ 8 bit offset
                      (        forth.asm):00663                 bsr     NMI2DM
                      (        forth.asm):00664         
                      (        forth.asm):00665                 lda     SERBCNT
                      (        forth.asm):00666                 bsr     NMI2DM
                      (        forth.asm):00667         
                      (        forth.asm):00668                 ldd     SBDROPC         Number of bytes dropped because SERBUF was full
                      (        forth.asm):00669                 bsr     NMI4DM
                      (        forth.asm):00670         
                      (        forth.asm):00671                 bsr     NMIDML
                      (        forth.asm):00672                 ENDC                    HVNMI2
                      (        forth.asm):00673         
E21D 3262             (        forth.asm):00674 (4+1)           leas    2,s             System stack cleanup
E21F 3B               (        forth.asm):00675 (17+?)          rti
                      (        forth.asm):00676         
E220 43432000         (        forth.asm):00677         CCREGM  fcn     'CC '
E224 20442000         (        forth.asm):00678         DREGM   fcn     ' D '
E228 20572000         (        forth.asm):00679         WREGM   fcn     ' W '
E22C 2044502000       (        forth.asm):00680         DPREGM  fcn     ' DP '
E231 20582000         (        forth.asm):00681         XREGM   fcn     ' X '
E235 20592000         (        forth.asm):00682         YREGM   fcn     ' Y '
E239 20552000         (        forth.asm):00683         UREGM   fcn     ' U '
E23D 2050432000       (        forth.asm):00684         PCREGM  fcn     ' PC '
E242 20532000         (        forth.asm):00685         SREGM   fcn     ' S '
                      (        forth.asm):00686                 IFNE    HVNMI2
E246                  (        forth.asm):00687         ACISTM  fcn     'AS '
E246                  (        forth.asm):00688         XMTOKM  fcn     ' XO '
E246                  (        forth.asm):00689         SBASEM  fcn     ' SB '
E246                  (        forth.asm):00690         SBENQM  fcn     ' EN '
E246                  (        forth.asm):00691         SBSEQM  fcn     ' DE '
E246                  (        forth.asm):00692         SBCNTM  fcn     ' CN '
E246                  (        forth.asm):00693         SBDRPM  fcn     ' DR '
                      (        forth.asm):00694                 ENDC                    HVNMI2
                      (        forth.asm):00695         
                      (        forth.asm):00696                 ENDC                    HVNMI
                      (        forth.asm):00697         
                      (        forth.asm):00698         * Returns the length of the string pointed to by X (terminator excluded) in W.
E246 3410             (        forth.asm):00699 (4+2)   SLEN    pshs    x
E248 105F             (        forth.asm):00700 (2)             clrw
E24A 105C             (        forth.asm):00701 (2)     @slen1  incw
E24C A680             (        forth.asm):00702 (4+1)           lda     ,x+
E24E 26FA             (        forth.asm):00703 (3)             bne     @slen1
E250 105A             (        forth.asm):00704 (2)             decw
E252 3510             (        forth.asm):00705 (4+2)           puls    x
E254 39               (        forth.asm):00706 (4)             rts
                      (        forth.asm):00707         
                      (        forth.asm):00708                 include console.asm
                      (      console.asm):00001         * FIRQ interrupt handler. This is entered on RDRF (input available).
E255 3416             (      console.asm):00002 (4+4)   FIRQHDL pshs    x,d
                      (      console.asm):00003                 IFNE    RTCFEAT
                      (      console.asm):00004                 jsr     RTCIHDL         Check for RTC periodic interrupt
                      (      console.asm):00005                 ENDC                    RTCFEAT
E257 B6D800           (      console.asm):00006 (4)             lda     ACIACTL
E25A 8580             (      console.asm):00007 (2)             bita    #ACIISVC        Does the ACIA need input service?
E25C 2731             (      console.asm):00008 (3)             beq     @nsintr         No. This is not the IRQ source we're looking for
                      (      console.asm):00009                 IFNE    DEBUG
                      (      console.asm):00010                 bita    #ACIRDRF
                      (      console.asm):00011                 beq     @nsintr         ACIA RDRF status bit should be set in all cases
                      (      console.asm):00012                 bita    #ACIOVRN        ACIA data overrun on read?
                      (      console.asm):00013                 beq     @datval         No, incoming data is valid
                      (      console.asm):00014                 ldb     ACIADAT         Clear overrun bit and INTACK
                      (      console.asm):00015                 ldb     #'%             Error indicating character is %
                      (      console.asm):00016                 bra     @chkovf
                      (      console.asm):00017                 ENDC                    DEBUG
                      (      console.asm):00018         * Out of band characters processing.
E25E F6D801           (      console.asm):00019 (4)     @datval ldb     ACIADAT         Incoming data byte to B and INTACK
E261 C103             (      console.asm):00020 (2)             cmpb    #ETX            Control-C?
E263 272D             (      console.asm):00021 (3)             beq     @sigint         Yes
E265 C113             (      console.asm):00022 (2)             cmpb    #XOFF
E267 2742             (      console.asm):00023 (3)             beq     @outngo         Output is being suspended
E269 C111             (      console.asm):00024 (2)             cmpb    #XON
E26B 2741             (      console.asm):00025 (3)             beq     @outok          Output is being re-enabled
E26D 9642             (      console.asm):00026 (3)     @chkovf lda     SERBCNT
E26F 810F             (      console.asm):00027 (2)             cmpa    #15             At high water level mark?
E271 2609             (      console.asm):00028 (3)             bne     @sbenq          No, proceed without negating RTS#
E273 3404             (      console.asm):00029 (4+1)           pshs    b
E275 C6D5             (      console.asm):00030 (2)             ldb     #ACIRTS1
E277 F7D800           (      console.asm):00031 (4)             stb     ACIACTL         Negate RTS#
E27A 3504             (      console.asm):00032 (4+1)           puls    b
E27C 8140             (      console.asm):00033 (2)     @sbenq  cmpa    #SERBSZ
                      (      console.asm):00034                 IFNE    HVNMI2
                      (      console.asm):00035                 beq     @nsdrop         Serial input buffer physically full
                      (      console.asm):00036                 ELSE
E27E 270F             (      console.asm):00037 (3)             beq     @nsintr         Serial input buffer physically full
                      (      console.asm):00038                 ENDC                    HVNMI2
E280 4C               (      console.asm):00039 (1)             inca
E281 9742             (      console.asm):00040 (3)             sta     SERBCNT         Update incoming FIFO byte count
E283 8E0144           (      console.asm):00041 (3)             ldx     #SERBUF
E286 9640             (      console.asm):00042 (3)             lda     SERBENQ         Enqueue offset to A
E288 E786             (      console.asm):00043 (4+1)           stb     a,x             Enqueue incoming character
E28A 4C               (      console.asm):00044 (1)             inca
E28B 843F             (      console.asm):00045 (2)             anda    #SERBSZ-1       Modulo arithmetic
E28D 9740             (      console.asm):00046 (3)             sta     SERBENQ
E28F 3516             (      console.asm):00047 (4+4)   @nsintr puls    d,x
E291 3B               (      console.asm):00048 (17+?)          rti
                      (      console.asm):00049         * Control-C was recognized.
E292 3264             (      console.asm):00050 (4+1)   @sigint leas    4,s             Drop D and X
E294 9641             (      console.asm):00051 (3)             lda     SERBDEQ
E296 9740             (      console.asm):00052 (3)             sta     SERBENQ
E298 0F42             (      console.asm):00053 (5)             clr     SERBCNT         Serial input buffer has been emptied
E29A BDEB7A           (      console.asm):00054                 RFXT    jsr,NCLR+7      Clear the data stack
E29D BDEB86           (      console.asm):00055                 RFXT    jsr,RCLR+7      and the return stack
E2A0 10AE61           (      console.asm):00056 (6+1)           ldy     1,s             Saved PC from the FIRQ stack
E2A3 8EE76D           (      console.asm):00057 (3)             ldx     #ERRHD1
E2A6 AF61             (      console.asm):00058 (5+1)           stx     1,s             Execution continues in the error handler
E2A8 C603             (      console.asm):00059 (2)             ldb     #3              with ABORT error code passed through B
E2AA 3B               (      console.asm):00060 (17+?)          rti
E2AB 4F               (      console.asm):00061 (1)     @outngo clra
E2AC 2002             (      console.asm):00062 (3)             bra     @sxmsta
E2AE 8601             (      console.asm):00063 (2)     @outok  lda     #1
E2B0 9743             (      console.asm):00064 (3)     @sxmsta sta     XMITOK          Update XMIT status flag
E2B2 20DB             (      console.asm):00065 (3)             bra     @nsintr
                      (      console.asm):00066                 IFNE    HVNMI2
                      (      console.asm):00067         * Increment character drop count (displayed by NMIHDL).
E2B4                  (      console.asm):00068         @nsdrop ldd     SBDROPC
                      (      console.asm):00069                 incd
                      (      console.asm):00070                 std     SBDROPC
                      (      console.asm):00071                 bra     @nsintr
                      (      console.asm):00072                 ENDC                    HVNMI2
                      (      console.asm):00073         
                      (      console.asm):00074         * We do not have to talk to the ACIA directly, unless SERBCNT is zero,
                      (      console.asm):00075         * in which case we have to lower RTS#, so as to accept incoming characters.
                      (      console.asm):00076         * This can only be called from base level!
E2B4 3416             (      console.asm):00077 (4+4)   GETCH   pshs    x,d
E2B6 0D42             (      console.asm):00078 (4)     @again  tst     SERBCNT
E2B8 260F             (      console.asm):00079 (3)             bne     @sbdind         We have incoming material
E2BA C695             (      console.asm):00080 (2)             ldb     #ACIRTS0
E2BC F7D800           (      console.asm):00081 (4)             stb     ACIACTL         Assert RTS#
E2BF 1CBF             (      console.asm):00082 (2)             andcc   #^FFLAG         Unmask FIRQ
E2C1 8E0001           (      console.asm):00083 (3)             ldx     #1
E2C4 BDF881           (      console.asm):00084 (7)             jsr     MILLIS1         Busy waiting for one millisecond
E2C7 20ED             (      console.asm):00085 (3)             bra     @again          Try again
                      (      console.asm):00086         * Serial buffer data indication.
E2C9 1A40             (      console.asm):00087 (2)     @sbdind orcc    #FFLAG          Mask FIRQ
E2CB 0A42             (      console.asm):00088 (5)             dec     SERBCNT
E2CD 1CBF             (      console.asm):00089 (2)             andcc   #^FFLAG         Unmask FIRQ
E2CF 8E0144           (      console.asm):00090 (3)             ldx     #SERBUF
E2D2 9641             (      console.asm):00091 (3)             lda     SERBDEQ         Dequeue offset to A
E2D4 E686             (      console.asm):00092 (4+1)           ldb     a,x             Buffered input character to B
E2D6 E7E4             (      console.asm):00093 (4+0)           stb     ,s              Incoming character to A in the caller's stack
E2D8 4C               (      console.asm):00094 (1)             inca
E2D9 843F             (      console.asm):00095 (2)             anda    #SERBSZ-1       Modulo arithmetic
E2DB 9741             (      console.asm):00096 (3)             sta     SERBDEQ
E2DD 3516             (      console.asm):00097 (4+4)           puls    d,x             Same as it ever was
E2DF 39               (      console.asm):00098 (4)             rts
                      (      console.asm):00099         
E2E0 3404             (      console.asm):00100 (4+1)   PUTCH   pshs    b
E2E2 C602             (      console.asm):00101 (2)             ldb     #ACITDRE
E2E4 F5D800           (      console.asm):00102 (4)     @tdrdrn bitb    ACIACTL
E2E7 27FB             (      console.asm):00103 (3)             beq     @tdrdrn         Drain the transmit data register
E2E9 0D43             (      console.asm):00104 (4)     @wfxon  tst     XMITOK          Software flow control on output
E2EB 27FC             (      console.asm):00105 (3)             beq     @wfxon          Wait for XON
E2ED B7D801           (      console.asm):00106 (4)             sta     ACIADAT         Transmit data
E2F0 3504             (      console.asm):00107 (4+1)           puls    b
E2F2 39               (      console.asm):00108 (4)             rts
                      (      console.asm):00109         
                      (      console.asm):00110         * Send NUL terminated string pointed to by X to the ACIA.
E2F3 3416             (      console.asm):00111 (4+4)   PUTS    pshs    x,d
E2F5 A680             (      console.asm):00112 (4+1)   @puts1  lda     ,x+
E2F7 2704             (      console.asm):00113 (3)             beq     @puts2         NUL marks the end of the string
E2F9 8DE5             (      console.asm):00114 (6)             bsr     PUTCH
E2FB 20F8             (      console.asm):00115 (3)             bra     @puts1
E2FD 3516             (      console.asm):00116 (4+4)   @puts2  puls    d,x
E2FF 39               (      console.asm):00117 (4)             rts
                      (      console.asm):00118         
E300 3410             (      console.asm):00119 (4+2)   PUTCR   pshs    x
E302 8EFE88           (      console.asm):00120 (3)             ldx     #CRLFSTR
E305 8DEC             (      console.asm):00121 (6)             bsr     PUTS
E307 3510             (      console.asm):00122 (4+2)           puls    x
E309 39               (      console.asm):00123 (4)             rts
                      (      console.asm):00124         
E30A 8608             (      console.asm):00125 (2)     _BS     lda     #BS
E30C 8DD2             (      console.asm):00126 (6)             bsr     PUTCH          Output BS
E30E 8620             (      console.asm):00127 (2)             lda     #SP
E310 8DCE             (      console.asm):00128 (6)             bsr     PUTCH          Clear character
E312 8608             (      console.asm):00129 (2)             lda     #BS
E314 20CA             (      console.asm):00130 (3)             bra     PUTCH          And go back again
                      (      console.asm):00131         
                      (      console.asm):00132         * Receive CR terminated string and store it to X.
                      (      console.asm):00133         * Upon entry B contains the receiving buffer length.
                      (      console.asm):00134         * (excluding the NUL terminator). On exit, B will
                      (      console.asm):00135         * contain the number of characters entered (excluding
                      (      console.asm):00136         * the trailing NUL). A and X are preserved. B will
                      (      console.asm):00137         * have the actual number of characters entered.
                      (      console.asm):00138         * Implementation of $05D9 in the TRS-80 Level II ROM.
E316 C102             (      console.asm):00139 (2)     GETS    cmpb    #2
E318 2401             (      console.asm):00140 (3)             bhs     @gets0          B must be 2 or more
E31A 39               (      console.asm):00141 (4)             rts
E31B 3416             (      console.asm):00142 (4+4)   @gets0  pshs    x,d
E31D 8D95             (      console.asm):00143 (6)     @gets1  bsr     GETCH
E31F 8108             (      console.asm):00144 (2)             cmpa    #BS             Backspace?
E321 260B             (      console.asm):00145 (3)             bne     @gets3
E323 E161             (      console.asm):00146 (4+1)           cmpb    1,s             B upon routine entry
E325 27F6             (      console.asm):00147 (3)             beq     @gets1          Do not go beyond the beginning of the buffer
E327 8DE1             (      console.asm):00148 (6)             bsr     _BS
E329 301F             (      console.asm):00149 (4+1)           leax    -1,x
E32B 5C               (      console.asm):00150 (1)             incb
E32C 20EF             (      console.asm):00151 (3)             bra     @gets1
E32E 8115             (      console.asm):00152 (2)     @gets3  cmpa    #NAK            Kill input?
E330 260B             (      console.asm):00153 (3)             bne     @gets5
                      (      console.asm):00154         * While B != 1,S (initial buffer length), decrement X, increment B.
E332 E161             (      console.asm):00155 (4+1)   @gets4  cmpb    1,s
E334 27E7             (      console.asm):00156 (3)             beq     @gets1
E336 8DD2             (      console.asm):00157 (6)             bsr     _BS
E338 301F             (      console.asm):00158 (4+1)           leax     -1,x
E33A 5C               (      console.asm):00159 (1)             incb
E33B 20F5             (      console.asm):00160 (3)             bra     @gets4
                      (      console.asm):00161         * Regular input handling: echo input character.
E33D 810D             (      console.asm):00162 (2)     @gets5  cmpa    #CR
E33F 2709             (      console.asm):00163 (3)             beq     @gets6          Minicom only sends CR
E341 8D9D             (      console.asm):00164 (6)             bsr     PUTCH
E343 A780             (      console.asm):00165 (4+1)           sta     ,x+
E345 5A               (      console.asm):00166 (1)             decb
E346 C101             (      console.asm):00167 (2)             cmpb    #1              End of buffer reached?
E348 26D3             (      console.asm):00168 (3)             bne     @gets1
E34A 8620             (      console.asm):00169 (2)     @gets6  lda     #SP
E34C 8D92             (      console.asm):00170 (6)             bsr     PUTCH
E34E 6F84             (      console.asm):00171 (6+0)           clr     ,x
E350 1F10             (      console.asm):00172 (4)             tfr     x,d
E352 A362             (      console.asm):00173 (5+1)           subd    2,s             Actual number of characters entered
E354 E761             (      console.asm):00174 (4+1)           stb     1,s             Stored to B (through the system stack).         
E356 3516             (      console.asm):00175 (4+4)           puls    d,x
E358 39               (      console.asm):00176 (4)             rts
                      (      console.asm):00177         
                      (        forth.asm):00709         
E359 BDEB7A           (        forth.asm):00710         FORTHIN RFXT    jsr,NCLR+7      XT for NCLR. Set up the normal stack
E35C BDEB86           (        forth.asm):00711                 RFXT    jsr,RCLR+7      XT for RCLR. Set up the return stack
                      (        forth.asm):00712         * Relocate '@' code to RAM and set it up as the last dictionary entry (RO).
E35F 8EFE0B           (        forth.asm):00713 (3)             ldx     #THEEND         Source address for tfm
E362 1086000D         (        forth.asm):00714 (4)             ldw     #(REALEND-THEEND) Byte count for tfm
E366 108E0C60         (        forth.asm):00715 (4)             ldy     #WDICSPC        Destination address for tfm
E36A 109F06           (        forth.asm):00716 (5)             sty     LSTWAD
E36D 113812           (        forth.asm):00717 (6+?)           tfm     x+,y+
E370 109F08           (        forth.asm):00718 (5)             sty     DICEND
                      (        forth.asm):00719                 IFNE    RELFEAT
E373 BDEC9A           (        forth.asm):00720                 RFXT    jsr,MONITOR+10  XT for MONITOR (monitor @ in RAM)
                      (        forth.asm):00721                 ENDC                    RELFEAT
E376 8D03             (        forth.asm):00722 (6)             bsr     EMPTYB          Buffer related initializations
                      (        forth.asm):00723                 IFNE    DEBUG
                      (        forth.asm):00724                 clrd
                      (        forth.asm):00725                 std     USTATE          Initial mode is interpretation
                      (        forth.asm):00726                 std     USCR            Clear SCR
                      (        forth.asm):00727                 std     UBLK            Clear BLK
                      (        forth.asm):00728                 std     UTOIN           Clear >IN
                      (        forth.asm):00729                 ENDC                    DEBUG
E378 7EFB83           (        forth.asm):00730                 RFXT    jmp,DECIMAL+10  XT for DECIMAL. Default base is decimal
                      (        forth.asm):00731         
E37B 8E0440           (        forth.asm):00732 (3)     EMPTYB  ldx     #BUF0
E37E 8D03             (        forth.asm):00733 (6)             bsr     EMPT1B
E380 8E0850           (        forth.asm):00734 (3)             ldx     #BUF1
                      (        forth.asm):00735         * Empty the buffer pointed to by X.
E383 9F1A             (        forth.asm):00736 (4)     EMPT1B  stx     MRUBUFA         Update most recently used buffer address
E385 30890400         (        forth.asm):00737 (4+3)           leax    BOTERM,x        Buffer offset to the terminator field
E389 104F             (        forth.asm):00738 (2)             clrd
E38B ED84             (        forth.asm):00739 (5+0)           std     ,x              Clear terminator and flags fields
                      (        forth.asm):00740                 IFNE    DEBUG
                      (        forth.asm):00741                 ldd     #$C7C7
                      (        forth.asm):00742                 std     2,x             Dummy block number
                      (        forth.asm):00743                 ENDC                    DEBUG
E38D 39               (        forth.asm):00744 (4)             rts
                      (        forth.asm):00745         
                      (        forth.asm):00746         * Scan for the next non-space character pointed to by X.
                      (        forth.asm):00747         * That character is returned through A. Flags are set accordingly.
E38E A680             (        forth.asm):00748 (4+1)   SCNSTOK lda     ,x+
E390 2704             (        forth.asm):00749 (3)             beq     @scstk1
E392 8120             (        forth.asm):00750 (2)             cmpa    #SP
E394 27F8             (        forth.asm):00751 (3)             beq     SCNSTOK
E396 301F             (        forth.asm):00752 (4+1)   @scstk1 leax    -1,x            Keep X pointing at the beginning of the token
E398 9F02             (        forth.asm):00753 (4)             stx     TOKENSP
E39A 4D               (        forth.asm):00754 (1)             tsta                    Have to test again because LEA affects Z
E39B 39               (        forth.asm):00755 (4)             rts
                      (        forth.asm):00756         
                      (        forth.asm):00757         * Scan for the next white space character (or NUL) as an end of token marker.
                      (        forth.asm):00758         * Upon entry:
                      (        forth.asm):00759         * - X points to the input stream.
                      (        forth.asm):00760         * Upon return:
                      (        forth.asm):00761         * - X will point to the next space character or NUL.
                      (        forth.asm):00762         * - CURTOKL will hold the current token length (returned in B).
                      (        forth.asm):00763         * - TOKENEP will point to the end of the current token.
E39C 5F               (        forth.asm):00764 (1)     SCNETOK clrb
E39D 5C               (        forth.asm):00765 (1)     @scetok incb
E39E A680             (        forth.asm):00766 (4+1)           lda     ,x+
E3A0 2704             (        forth.asm):00767 (3)             beq     @scetk1
E3A2 8120             (        forth.asm):00768 (2)             cmpa    #SP
E3A4 26F7             (        forth.asm):00769 (3)             bne     @scetok
E3A6 301F             (        forth.asm):00770 (4+1)   @scetk1 leax    -1,x            Keep X pointing at the end of the token
E3A8 9F04             (        forth.asm):00771 (4)             stx     TOKENEP
E3AA 5A               (        forth.asm):00772 (1)             decb
E3AB D738             (        forth.asm):00773 (3)             stb     CURTOKL
E3AD 39               (        forth.asm):00774 (4)             rts
                      (        forth.asm):00775         
                      (        forth.asm):00776         * Check for numeric literal BASE prefix. On entry X has the input stream
                      (        forth.asm):00777         * pointer. On exit, BASE is altered if needed and the original BASE saved
                      (        forth.asm):00778         * to BASBKUP. If BASE was not changed, BASBKUP will be zero.
                      (        forth.asm):00779         * D is altered, X is updated if a BASE prefix is detected, other registers
                      (        forth.asm):00780         * are untouched.
E3AE E684             (        forth.asm):00781 (4+0)   CKNBPFX ldb     ,x              B has a potential base prefix character
E3B0 3410             (        forth.asm):00782 (4+2)           pshs    x
E3B2 8EFFDE           (        forth.asm):00783 (3)             ldx     #BASALST        A associative list (A-list) of BASE prefixes
E3B5 A681             (        forth.asm):00784 (4+2)   @pflkup lda     ,x++            Potential BASE prefix character to A
E3B7 2707             (        forth.asm):00785 (3)             beq     @nopfix         Reached the end of the A-list. No prefix found
E3B9 103798           (        forth.asm):00786 (4)             cmpr    b,a             Prefix match?
E3BC 2707             (        forth.asm):00787 (3)             beq     @pfxfnd         Yes
E3BE 20F5             (        forth.asm):00788 (3)             bra     @pflkup
E3C0 0F2C             (        forth.asm):00789 (5)     @nopfix clr     BASBKUP         Nothing to be restored to BASE
E3C2 3510             (        forth.asm):00790 (4+2)           puls    x
E3C4 39               (        forth.asm):00791 (4)             rts
E3C5 961F             (        forth.asm):00792 (3)     @pfxfnd lda     UBASE+1
E3C7 972C             (        forth.asm):00793 (3)             sta     BASBKUP         Back up the current BASE value
E3C9 A61F             (        forth.asm):00794 (4+1)           lda     -1,x            The BASE specified by the prefix
E3CB 971F             (        forth.asm):00795 (3)             sta     UBASE+1         Update BASE
E3CD 3510             (        forth.asm):00796 (4+2)           puls    x
E3CF 3001             (        forth.asm):00797 (4+1)           leax    1,x             Skip the prefix from the input stream
E3D1 39               (        forth.asm):00798 (4)             rts
                      (        forth.asm):00799         
                      (        forth.asm):00800         * Restore BASE if a numeric literal BASE prefix was detected.
                      (        forth.asm):00801         * X is to be preserved at all cost!
E3D2 962C             (        forth.asm):00802 (3)     RSBSPFX lda     BASBKUP
E3D4 2702             (        forth.asm):00803 (3)             beq     @theend
E3D6 971F             (        forth.asm):00804 (3)             sta     UBASE+1
E3D8 39               (        forth.asm):00805 (4)     @theend rts
                      (        forth.asm):00806         
                      (        forth.asm):00807         * Check whether BASE is in the supported range ([2..36]).
E3D9 961F             (        forth.asm):00808 (3)     CKBASE  lda     UBASE+1         BASE
E3DB 8102             (        forth.asm):00809 (2)             cmpa    #2
E3DD 2505             (        forth.asm):00810 (3)             blo     @ckbser         Must be >= 2
E3DF 8124             (        forth.asm):00811 (2)             cmpa    #36
E3E1 2201             (        forth.asm):00812 (3)             bhi     @ckbser         And <= 36 (the ANSI maximum)
E3E3 39               (        forth.asm):00813 (4)             rts
E3E4 C60F             (        forth.asm):00814 (2)     @ckbser ldb     #15             Invalid BASE
E3E6 BDE76A           (        forth.asm):00815 (7)             jsr     ERRHDLR         No return
     E3E9             (        forth.asm):00816         CKBASRA equ     *
                      (        forth.asm):00817         
                      (        forth.asm):00818         * NUMCVT performs a signed string to number conversion. The input string is
                      (        forth.asm):00819         * acquired from the input stream. Note that this routine always is called
                      (        forth.asm):00820         * after a dictionary lookup (SWDIC), so TOKENSP and CURTOKL are guaranteed
                      (        forth.asm):00821         * to have been set previously. There are two ways out this routine:
                      (        forth.asm):00822         * - redirection to the error handler (Undefined word), or
                      (        forth.asm):00823         * - a converted cell or double cell returned through the data stack.
                      (        forth.asm):00824         *   Upon return, ISDBLF being NZ will indicate a double.
E3E9 8DEE             (        forth.asm):00825 (6)     NUMCVT  bsr     CKBASE          No return if BASE isn't in the [2..36] range
E3EB 0F35             (        forth.asm):00826 (5)             clr     ISNEGF          Assume the result is positive
E3ED 0F36             (        forth.asm):00827 (5)             clr     ISDBLF          Assume the result is not a double number
E3EF 9E02             (        forth.asm):00828 (4)             ldx     TOKENSP
E3F1 8DBB             (        forth.asm):00829 (6)             bsr     CKNBPFX         Check for numeric literal BASE prefix
                      (        forth.asm):00830         * Check for optional minus sign.
E3F3 A684             (        forth.asm):00831 (4+0)           lda     ,x
E3F5 812D             (        forth.asm):00832 (2)             cmpa    #'-
E3F7 2604             (        forth.asm):00833 (3)             bne     @ncini
E3F9 0C35             (        forth.asm):00834 (5)             inc     ISNEGF          Remember to negate the result before returning
E3FB 3001             (        forth.asm):00835 (4+1)           leax    1,x             Skip the negativity!
E3FD 1F12             (        forth.asm):00836 (4)     @ncini  tfr     x,y             Backup input stream pointer
E3FF 1FC1             (        forth.asm):00837 (4)             tfr     0,x             Initialize the result
E401 BDE7ED           (        forth.asm):00838 (7)             jsr     NPUSH           LSC
E404 BDE7ED           (        forth.asm):00839 (7)             jsr     NPUSH           MSC
E407 1F21             (        forth.asm):00840 (4)             tfr     y,x             Restore the input stream pointer
E409 301F             (        forth.asm):00841 (4+1)           leax    -1,x
E40B BDE7ED           (        forth.asm):00842 (7)             jsr     NPUSH           Base scanning address minus 1
E40E BDF4E4           (        forth.asm):00843                 RFXT    jsr,CONVERT+10
                      (        forth.asm):00844         * Upon return TOS C@ should be BL, NUL or . Anything else indicates an error.
                      (        forth.asm):00845         * In any case, at this point, at least three cells are on the data stack.
E411 3710             (        forth.asm):00846                 UCNPOP                  Address of the last non convertible char to X
E413 A684             (        forth.asm):00847 (4+0)           lda     ,x
E415 270A             (        forth.asm):00848 (3)             beq     @ncadj          NUL is acceptable
E417 8120             (        forth.asm):00849 (2)             cmpa    #SP
E419 2706             (        forth.asm):00850 (3)             beq     @ncadj          So is BL
E41B 812E             (        forth.asm):00851 (2)             cmpa    #'.             Was a double number meant?
E41D 2618             (        forth.asm):00852 (3)             bne     @ncnogo         No, we do not have a winner...
E41F 0C36             (        forth.asm):00853 (5)             inc     ISDBLF
                      (        forth.asm):00854         * If Z is not set at this point, we are dealing with a double number.
E421 260B             (        forth.asm):00855 (3)     @ncadj  bne     @ncdadj 
E423 3710             (        forth.asm):00856                 UCNPOP                  Drop the MSC
E425 0D35             (        forth.asm):00857 (4)             tst     ISNEGF          Are we dealing with a negative number?
E427 27A9             (        forth.asm):00858 (3)             beq     RSBSPFX         No. Restore BASE if needed--the end
E429 BDEFC6           (        forth.asm):00859                 RFXT    jsr,NEGATE+9    Acknowledge the negativity
E42C 20A4             (        forth.asm):00860 (3)             bra     RSBSPFX         Restore BASE if needed--the end
E42E 0D35             (        forth.asm):00861 (4)     @ncdadj tst     ISNEGF          Are we dealing with a negative number?
E430 27A0             (        forth.asm):00862 (3)             beq     RSBSPFX         No. Restore BASE if needed--the end
E432 BDF3F1           (        forth.asm):00863                 RFXT    jsr,DNEG+10     Acknowledge the negativity
E435 209B             (        forth.asm):00864 (3)             bra     RSBSPFX         Restore BASE if needed--the end
E437 3344             (        forth.asm):00865 (4+1)   @ncnogo leau    4,u             Drop two cells from the data stack
E439 9E02             (        forth.asm):00866 (4)             ldx     TOKENSP         Beginning address of the current token
E43B C602             (        forth.asm):00867 (2)             ldb     #2              Undefined (X points to the offending word)
E43D BDE76A           (        forth.asm):00868 (7)             jsr     ERRHDLR         No return
     E440             (        forth.asm):00869         NUMCVRA equ     *               For symbolic stack dump purposes
E440 12               (        forth.asm):00870 (1)             nop
                      (        forth.asm):00871         
                      (        forth.asm):00872         * Convert number stored in X to a string (depending on BASE value).
                      (        forth.asm):00873         * Output is stored in the global TBUFF buffer. X is preserved.
E441 8D96             (        forth.asm):00874 (6)     CVNSTR  bsr     CKBASE
E443 0F35             (        forth.asm):00875 (5)             clr     ISNEGF
E445 1F10             (        forth.asm):00876 (4)             tfr     x,d
E447 0D37             (        forth.asm):00877 (4)             tst     CVISSGN         Are we to perform a signed conversion?
E449 2708             (        forth.asm):00878 (3)             beq     @cvnst1
E44B 104D             (        forth.asm):00879 (2)             tstd
E44D 2A04             (        forth.asm):00880 (3)             bpl     @cvnst1
E44F 0C35             (        forth.asm):00881 (5)             inc     ISNEGF          Number being converted is negative
E451 1040             (        forth.asm):00882 (2)             negd
E453 1F06             (        forth.asm):00883 (4)     @cvnst1 tfr     d,w
E455 104F             (        forth.asm):00884 (2)             clrd
E457 108E03FD         (        forth.asm):00885 (4)             ldy     #TBUFF+19       Sign + 16 digits + terminator + 1
E45B 6FA2             (        forth.asm):00886 (6+1)           clr     ,-y             End of string marker
E45D 119E1E           (        forth.asm):00887 (35)    @cvnst2 divq    UBASE           D returns the modulo and W the quotient
E460 8630             (        forth.asm):00888 (2)             lda     #'0
E462 C10A             (        forth.asm):00889 (2)             cmpb    #10
E464 2502             (        forth.asm):00890 (3)             bcs     @cvnst3
                      (        forth.asm):00891         * BASE has letters among its valid numbers.
E466 8637             (        forth.asm):00892 (2)             lda     #'A-10
E468 103089           (        forth.asm):00893 (4)     @cvnst3 addr    a,b
E46B E7A2             (        forth.asm):00894 (4+1)           stb     ,-y
E46D 104F             (        forth.asm):00895 (2)             clrd
E46F 105D             (        forth.asm):00896 (2)             tstw
E471 26EA             (        forth.asm):00897 (3)             bne     @cvnst2
E473 C620             (        forth.asm):00898 (2)             ldb     #SP
E475 0D35             (        forth.asm):00899 (4)             tst     ISNEGF
E477 2702             (        forth.asm):00900 (3)             beq     @cvnst4
E479 C62D             (        forth.asm):00901 (2)             ldb     #'-
E47B E7A2             (        forth.asm):00902 (4+1)   @cvnst4 stb     ,-y
                      (        forth.asm):00903         * We need to insert leading spaces up to the beginning of the output buffer.
E47D C620             (        forth.asm):00904 (2)             ldb     #SP
E47F 108C03EA         (        forth.asm):00905 (4)     @cvnst5 cmpy    #TBUFF
E483 2601             (        forth.asm):00906 (3)             bne     @cvnst6
E485 39               (        forth.asm):00907 (4)             rts
E486 E7A2             (        forth.asm):00908 (4+1)   @cvnst6 stb     ,-y
E488 20F5             (        forth.asm):00909 (3)             bra     @cvnst5
                      (        forth.asm):00910         
                      (        forth.asm):00911         * Check for minimal data stack depth. On input D has the lowest possible stack
                      (        forth.asm):00912         * address that satisfies the needs of the caller. This routine is meant
                      (        forth.asm):00913         * to support "transactional" behaviour, which is intended to improve
                      (        forth.asm):00914         * debugging support.
E48A 103703           (        forth.asm):00915 (4)     CHKNDPT cmpr    d,u
E48D 2201             (        forth.asm):00916 (3)             bhi     @stkudf
E48F 39               (        forth.asm):00917 (4)             rts
E490 C601             (        forth.asm):00918 (2)     @stkudf ldb     #1              Data stack underflow
E492 BDE76A           (        forth.asm):00919 (7)             jsr     ERRHDLR         No return
     E495             (        forth.asm):00920         CKDPTRA equ     *
                      (        forth.asm):00921         
                      (        forth.asm):00922         * Parameter stack's depth checking primitives (transactional behavior support).
E495 CC029420F0       (        forth.asm):00923         MIN1PST MINDREQ 1
                      (        forth.asm):00924         
E49A CC029220EB       (        forth.asm):00925         MIN2PST MINDREQ 2
                      (        forth.asm):00926         
E49F CC029020E6       (        forth.asm):00927         MIN3PST MINDREQ 3
                      (        forth.asm):00928         
E4A4 CC028E20E1       (        forth.asm):00929         MIN4PST MINDREQ 4
                      (        forth.asm):00930         
                      (        forth.asm):00931         * Search word beginning at address TOKENSP in the dictionary.
                      (        forth.asm):00932         * Upon return Z will be set if the word was not found.
                      (        forth.asm):00933         * Otherwise, Y will point to the code section of the word.
                      (        forth.asm):00934         * CSSNTVE (defined in constants.asm) defines whether the
                      (        forth.asm):00935         * dictionary match is case sensitive or not.
                      (        forth.asm):00936         * Important note: if the word is found TOKENEP will be copied to TOKENSP.
E4A9 9E02             (        forth.asm):00937 (4)     SWDIC   ldx     TOKENSP
E4AB BDE39C           (        forth.asm):00938 (7)             jsr     SCNETOK         B has CURTOKL
E4AE 9E08             (        forth.asm):00939 (4)             ldx     DICEND
E4B0 9F16             (        forth.asm):00940 (4)             stx     VLPRVEP         Last dictionary entry code address + 1
E4B2 9E02             (        forth.asm):00941 (4)             ldx     TOKENSP
E4B4 109E06           (        forth.asm):00942 (5)             ldy     LSTWAD          Latest word header address to Y
E4B7 2606             (        forth.asm):00943 (3)     @swrdc0 bne     @swrdc1
E4B9 1FC2             (        forth.asm):00944 (4)             tfr     0,y             Word not found. Z is set
E4BB 109F0E           (        forth.asm):00945 (5)             sty     PLOAD
E4BE 39               (        forth.asm):00946 (4)             rts
E4BF A6A4             (        forth.asm):00947 (4+0)   @swrdc1 lda     ,y              Word attribute to A
E4C1 841F             (        forth.asm):00948 (2)             anda    #WRLNMSK        Extract word length
E4C3 3420             (        forth.asm):00949 (4+2)           pshs    y
E4C5 103798           (        forth.asm):00950 (4)             cmpr    b,a             Word length match?
E4C8 2638             (        forth.asm):00951 (3)             bne     @swrdc3         No, point to next dictionary entry
E4CA 3121             (        forth.asm):00952 (4+1)           leay    1,y
E4CC A6A0             (        forth.asm):00953 (4+1)   @swrdc2 lda     ,y+
                      (        forth.asm):00954                 IFNE    CSSNTVE
                      (        forth.asm):00955                 cmpa    ,x+             Case sensitive dictionary
                      (        forth.asm):00956                 ELSE
E4CE 1F9E             (        forth.asm):00957 (4)             tfr     b,e             Case insensitive search (preferred)
E4D0 E680             (        forth.asm):00958 (4+1)           ldb     ,x+
E4D2 C161             (        forth.asm):00959 (2)             cmpb    #'a
E4D4 2506             (        forth.asm):00960 (3)             bcs     @nochg
E4D6 C17B             (        forth.asm):00961 (2)             cmpb    #'z+1
E4D8 2402             (        forth.asm):00962 (3)             bcc     @nochg
E4DA C020             (        forth.asm):00963 (2)             subb    #'a-'A
E4DC 103798           (        forth.asm):00964 (4)     @nochg  cmpr    b,a
E4DF 1FE9             (        forth.asm):00965 (4)             tfr     e,b
                      (        forth.asm):00966                 ENDC                    CSSNTVE
E4E1 261F             (        forth.asm):00967 (3)             bne     @swrdc3
E4E3 5A               (        forth.asm):00968 (1)             decb
E4E4 26E6             (        forth.asm):00969 (3)             bne     @swrdc2
                      (        forth.asm):00970         * Word match!
E4E6 3510             (        forth.asm):00971 (4+2)           puls    x
E4E8 E684             (        forth.asm):00972 (4+0)           ldb     ,x              Word attribute byte to B
E4EA 4F               (        forth.asm):00973 (1)             clra
E4EB 58               (        forth.asm):00974 (1)             lslb                    Bit 7 to CFLAG
E4EC 49               (        forth.asm):00975 (1)             rola                    CFLAG to A
E4ED 9739             (        forth.asm):00976 (3)             sta     IMDFLG          Set IMMEDIATE flag
E4EF 4F               (        forth.asm):00977 (1)             clra
E4F0 58               (        forth.asm):00978 (1)             lslb                    Bit 6 to CFLAG
E4F1 49               (        forth.asm):00979 (1)             rola                    CFLAG to A
E4F2 973A             (        forth.asm):00980 (3)             sta     DEFFLG          Set DEFINE flag
E4F4 9E04             (        forth.asm):00981 (4)             ldx     TOKENEP
E4F6 9F02             (        forth.asm):00982 (4)             stx     TOKENSP
                      (        forth.asm):00983                 IFNE    RELFEAT
E4F8 3123             (        forth.asm):00984 (4+1)           leay    3,y             Skip back pointer and checksum. Return XT
                      (        forth.asm):00985                 ELSE
                      (        forth.asm):00986                 leay    2,y             Skip back pointer. Return XT
                      (        forth.asm):00987                 ENDC                    RELFEAT
E4FA DC16             (        forth.asm):00988 (4)             ldd     VLPRVEP
E4FC 103220           (        forth.asm):00989 (4)             subr    y,d
E4FF DD0E             (        forth.asm):00990 (4)             std     PLOAD
E501 39               (        forth.asm):00991 (4)             rts                     NZ since there is no zero payload word
E502 3520             (        forth.asm):00992 (4+2)   @swrdc3 puls    y               Point to previous word header
E504 109F16           (        forth.asm):00993 (5)             sty     VLPRVEP
E507 4F               (        forth.asm):00994 (1)             clra
E508 E6A0             (        forth.asm):00995 (4+1)           ldb     ,y+
E50A C41F             (        forth.asm):00996 (2)             andb    #WRLNMSK
E50C 31AB             (        forth.asm):00997 (4+2)           leay    d,y
E50E 9E02             (        forth.asm):00998 (4)             ldx     TOKENSP
E510 D638             (        forth.asm):00999 (3)             ldb     CURTOKL
E512 10AEA4           (        forth.asm):01000 (6+0)           ldy     ,y
E515 20A0             (        forth.asm):01001 (3)             bra     @swrdc0
                      (        forth.asm):01002         
                      (        forth.asm):01003         * Create new dictionary entry. The word name being created is acquired from
                      (        forth.asm):01004         * the input stream. Warning, this requires a writable dictionary!
                      (        forth.asm):01005         * The new end of the dictionary is returned in Y. W is preserved.
E517 1038             (        forth.asm):01006 (6)     LOCWRT  pshsw
E519 9E08             (        forth.asm):01007 (4)             ldx     DICEND
                      (        forth.asm):01008                 IFNE    DEBUG
                      (        forth.asm):01009                 cmpx    #ROMSTRT
                      (        forth.asm):01010                 bcs     @locwr0
                      (        forth.asm):01011                 ldb     #10             Assertion failure (trying to write to ROM!)
                      (        forth.asm):01012                 jsr     ERRHDLR         No return
E51B                  (        forth.asm):01013         LWAFRA  equ     *
                      (        forth.asm):01014                 ENDC                    DEBUG
E51B 9F0C             (        forth.asm):01015 (4)     @locwr0 stx     BDICEND         Back pointer up
E51D 9E06             (        forth.asm):01016 (4)             ldx     LSTWAD
E51F 9F0A             (        forth.asm):01017 (4)             stx     BLSTWAD         Back pointer up
E521 BDE841           (        forth.asm):01018 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
E524 6D84             (        forth.asm):01019 (5+0)           tst     ,x
E526 2605             (        forth.asm):01020 (3)             bne     @locwr2
E528 C605             (        forth.asm):01021 (2)     @locwr1 ldb     #5              Missing word name
E52A BDE76A           (        forth.asm):01022 (7)             jsr     ERRHDLR         No return
     E52D             (        forth.asm):01023         LWMNRA  equ     *               LOCWRT missing word name return address
E52D BDE38E           (        forth.asm):01024 (7)     @locwr2 jsr     SCNSTOK
E530 27F6             (        forth.asm):01025 (3)             beq     @locwr1         End of line reached
E532 BDE39C           (        forth.asm):01026 (7)             jsr     SCNETOK         X has TOKENEP, B has CURTOKL
E535 109E02           (        forth.asm):01027 (5)             ldy     TOKENSP
E538 103221           (        forth.asm):01028 (4)             subr    y,x
E53B 3410             (        forth.asm):01029 (4+2)           pshs    x               Word length to the system stack
E53D 9E08             (        forth.asm):01030 (4)             ldx     DICEND
E53F A661             (        forth.asm):01031 (4+1)           lda     1,s             Word length LSB in the system stack
E541 8120             (        forth.asm):01032 (2)             cmpa    #1+WRLNMSK      Max word length is 31, 79-STANDARD compliant
E543 2505             (        forth.asm):01033 (3)             blo     @lcwr21
E545 C610             (        forth.asm):01034 (2)             ldb     #16             Word name is too long
E547 BDE76A           (        forth.asm):01035 (7)             jsr     ERRHDLR         No return
     E54A             (        forth.asm):01036         WTOOLNG equ     *
E54A A780             (        forth.asm):01037 (4+1)   @lcwr21 sta     ,x+             Word length to dictionary
E54C 10A6E1           (        forth.asm):01038 (6+2)           ldw     ,s++            16-bit word length to W
E54F 1E12             (        forth.asm):01039 (5)             exg     x,y             Y points to the dictionary, X has TOKENSP
                      (        forth.asm):01040                 IFNE    CSSNTVE
                      (        forth.asm):01041                 tfm     x+,y+           Word name to dictionary, as is
                      (        forth.asm):01042                 ELSE
E551 1FF9             (        forth.asm):01043 (4)             tfr     f,b             Force dictionary entry to upper case
E553 A680             (        forth.asm):01044 (4+1)   @locwr3 lda     ,x+
E555 8161             (        forth.asm):01045 (2)             cmpa    #'a
E557 2506             (        forth.asm):01046 (3)             bcs     @locwr4
E559 817B             (        forth.asm):01047 (2)             cmpa    #'z+1
E55B 2402             (        forth.asm):01048 (3)             bcc     @locwr4
E55D 8020             (        forth.asm):01049 (2)             suba    #'a-'A          To upper case
E55F A7A0             (        forth.asm):01050 (4+1)   @locwr4 sta     ,y+
E561 5A               (        forth.asm):01051 (1)             decb
E562 26EF             (        forth.asm):01052 (3)             bne     @locwr3
                      (        forth.asm):01053                 ENDC                    CSSNTVE
E564 1F10             (        forth.asm):01054 (4)             tfr     x,d
E566 BDE177           (        forth.asm):01055 (7)             jsr     U2INFRD         Derive >IN from D
E569 9E06             (        forth.asm):01056 (4)             ldx     LSTWAD
E56B AFA1             (        forth.asm):01057 (5+2)           stx     ,y++            Back pointer to dictionary
                      (        forth.asm):01058                 IFNE    RELFEAT
E56D 6FA0             (        forth.asm):01059 (6+1)           clr     ,y+             Initialize the checksum header field
                      (        forth.asm):01060                 ENDC                    RELFEAT
E56F 109F08           (        forth.asm):01061 (5)             sty     DICEND
E572 109F12           (        forth.asm):01062 (5)             sty     RECADDR         Should we resort to recursion later on
E575 1039             (        forth.asm):01063 (6)             pulsw
E577 39               (        forth.asm):01064 (4)             rts
                      (        forth.asm):01065         
                      (        forth.asm):01066         * Compile 'ldx  #X; jsr NPUSH'.
                      (        forth.asm):01067         * DICEND is updated and returned in Y.
E578 109E08           (        forth.asm):01068 (5)     LITER   ldy     DICEND
E57B 868E             (        forth.asm):01069 (2)             lda     #LDXOPC         LDX immediate
E57D 8D10             (        forth.asm):01070 (6)             bsr     VARCON2
E57F 86BD             (        forth.asm):01071 (2)             lda     #JSROPC         JSR extended
E581 BDE155           (        forth.asm):01072 (7)             jsr     CHKRTS          Check if the final RTS can be omitted
E584 8D06             (        forth.asm):01073 (6)             bsr     VARCON1
E586 109F08           (        forth.asm):01074 (5)             sty     DICEND
E589 39               (        forth.asm):01075 (4)             rts
                      (        forth.asm):01076         
                      (        forth.asm):01077         * Compile 'jmp  NPUSH'.
                      (        forth.asm):01078         * Y points to the end of the dictionary on entry and on exit.
E58A 867E             (        forth.asm):01079 (2)     VARCON  lda     #JMPOPC         JMP extended
E58C 8EE7ED           (        forth.asm):01080 (3)     VARCON1 ldx     #NPUSH
E58F A7A0             (        forth.asm):01081 (4+1)   VARCON2 sta     ,y+
E591 AFA1             (        forth.asm):01082 (5+2)           stx     ,y++
E593 39               (        forth.asm):01083 (4)             rts
                      (        forth.asm):01084         
                      (        forth.asm):01085         * Used by U<, U>, <, >.
E594 BDE49A           (        forth.asm):01086 (7)     CMP2    jsr     MIN2PST         At least 2 cells must be stacked up
E597 10AEC4           (        forth.asm):01087 (6+0)   CMP2RA  ldy     ,u
E59A AE42             (        forth.asm):01088 (5+1)           ldx     2,u
E59C 103721           (        forth.asm):01089 (4)             cmpr    y,x
E59F 1FA9             (        forth.asm):01090 (4)             tfr     cc,b
                      (        forth.asm):01091                 IFNE    DEBUG
                      (        forth.asm):01092                 clra
                      (        forth.asm):01093                 std     CCREG
                      (        forth.asm):01094                 ENDC                    DEBUG
E5A1 1FC1             (        forth.asm):01095 (4)             tfr     0,x
E5A3 3344             (        forth.asm):01096 (4+1)           leau    4,u
E5A5 1F9A             (        forth.asm):01097 (4)             tfr     b,cc
E5A7 39               (        forth.asm):01098 (4)             rts
                      (        forth.asm):01099         
                      (        forth.asm):01100         * Used by CMOVE, CMOVE>, MOVE.
E5A8 BDE49F           (        forth.asm):01101 (7)     ACQMOVP jsr     MIN3PST         At least 3 cells must be stacked up
E5AB 10A6C4           (        forth.asm):01102 (6+0)   ACQVMRA ldw     ,u              Byte count
E5AE 10AE42           (        forth.asm):01103 (6+1)           ldy     2,u             Destination address
E5B1 AE44             (        forth.asm):01104 (5+1)           ldx     4,u             Source address
E5B3 3346             (        forth.asm):01105 (4+1)           leau    6,u             Drop 3 cells from the user stack
E5B5 39               (        forth.asm):01106 (4)             rts
                      (        forth.asm):01107         
                      (        forth.asm):01108         * FDCTSYM enveadours to match the address stored in Y to a dictionary entry.
                      (        forth.asm):01109         * Upon a successful flexible match, it will output a string in the form of
                      (        forth.asm):01110         * <wordname>+<offset> to the string pointed to by X. <wordname> refers to the
                      (        forth.asm):01111         * code entry point of the matched word. <offset> will be expressed in hex.
                      (        forth.asm):01112         * If a match is found, Z will be clear, otherwise it will be set.
                      (        forth.asm):01113         * A candidate for a word code address must meet the following criteria:
                      (        forth.asm):01114         * ((Y U>= #EBUFS) AND (Y U< #THEEND)) OR ((Y U>= #WDICSPC) AND (Y U< DICEND)).
                      (        forth.asm):01115         * Upon return:
                      (        forth.asm):01116         * - the string pointed to by X will updated with its symbolic match
                      (        forth.asm):01117         *   (NUL terminated), if there is one. X itself might have been altered.
                      (        forth.asm):01118         * - Y should be preserved.
                      (        forth.asm):01119         * EBUFS (EMPTY-BUFFERS) header address is the last word in the dictionary.
                      (        forth.asm):01120                 IFNE    SSDFEAT
E5B6 3430             (        forth.asm):01121 (4+4)   FDCTSYM pshs    y,x     
E5B8 1F21             (        forth.asm):01122 (4)             tfr     y,x             Potential execution token to X
E5BA 8CE982           (        forth.asm):01123 (3)             cmpx    #EBUFS
E5BD 2505             (        forth.asm):01124 (3)             blo     @fdstr2 
E5BF 8CFE0B           (        forth.asm):01125 (3)             cmpx    #THEEND
E5C2 250D             (        forth.asm):01126 (3)             blo     @fdsmtc
E5C4 8C0C60           (        forth.asm):01127 (3)     @fdstr2 cmpx    #WDICSPC        Term 2 of the predicate for a valid word addr
E5C7 2504             (        forth.asm):01128 (3)             blo     @fdsnom
E5C9 9C08             (        forth.asm):01129 (4)             cmpx    DICEND
E5CB 2504             (        forth.asm):01130 (3)             blo     @fdsmtc
E5CD 4F               (        forth.asm):01131 (1)     @fdsnom clra                    No match (Z is set)
E5CE 3530             (        forth.asm):01132 (4+4)           puls    x,y
E5D0 39               (        forth.asm):01133 (4)             rts
E5D1 9E06             (        forth.asm):01134 (4)     @fdsmtc ldx     LSTWAD          Potential match. Scan upward from LAST
                      (        forth.asm):01135         * X points to the latest word header, Y has an execution token.
E5D3 109608           (        forth.asm):01136 (5)             ldw     DICEND          W points to the end of the code section
E5D6 3410             (        forth.asm):01137 (4+2)   @fdslop pshs    x               Pointer to the current word header
E5D8 E680             (        forth.asm):01138 (4+1)           ldb     ,x+
E5DA C41F             (        forth.asm):01139 (2)             andb    #WRLNMSK
E5DC 3A               (        forth.asm):01140 (1)             abx                     Skip word name string
E5DD EC81             (        forth.asm):01141 (5+2)           ldd     ,x++            Backlink to D
                      (        forth.asm):01142                 IFNE    RELFEAT
E5DF 3001             (        forth.asm):01143 (4+1)           leax    1,x             Skip the checksum
                      (        forth.asm):01144                 ENDC                    RELFEAT
E5E1 103712           (        forth.asm):01145 (4)             cmpr    x,y
E5E4 2530             (        forth.asm):01146 (3)             blo     @fdsnwd
E5E6 103762           (        forth.asm):01147 (4)             cmpr    w,y
E5E9 222B             (        forth.asm):01148 (3)             bhi     @fdsnwd         An equal address is allowed here, in case
                      (        forth.asm):01149         * jsr ERRHDLR is the last instruction for the word under consideration.
                      (        forth.asm):01150         * This happens to be the case for FORGET and LPAR.
                      (        forth.asm):01151         * Y matches the code range for the current word.
E5EB 3510             (        forth.asm):01152 (4+2)           puls    x
E5ED E680             (        forth.asm):01153 (4+1)           ldb     ,x+
E5EF C41F             (        forth.asm):01154 (2)             andb    #WRLNMSK
E5F1 1F9F             (        forth.asm):01155 (4)             tfr     b,f
E5F3 114F             (        forth.asm):01156 (2)             clre                    W has the matched word length
E5F5 10AEE4           (        forth.asm):01157 (6+0)           ldy     ,s              Y points to the target buffer
E5F8 113812           (        forth.asm):01158 (6+?)           tfm     x+,y+
E5FB 6FA4             (        forth.asm):01159 (6+0)           clr     ,y              We need this in case the offset is zero
                      (        forth.asm):01160         * Offset processing.
                      (        forth.asm):01161                 IFNE    RELFEAT
E5FD 3003             (        forth.asm):01162 (4+1)           leax    3,x             Skip backlink and checksum
                      (        forth.asm):01163                 ELSE
                      (        forth.asm):01164                 leax    2,x             Skip backlink
                      (        forth.asm):01165                 ENDC                    RELFEAT
E5FF EC62             (        forth.asm):01166 (5+1)           ldd     2,s             Execution token to D
E601 103210           (        forth.asm):01167 (4)             subr    x,d             Offset between XT and word entry point to D
E604 270B             (        forth.asm):01168 (3)             beq     @skoffs         Skip displaying the offset if it is zero
E606 3402             (        forth.asm):01169 (4+1)           pshs    a               Preserve the offset's MSB
E608 862B             (        forth.asm):01170 (2)             lda     #'+
E60A A7A0             (        forth.asm):01171 (4+1)           sta     ,y+
E60C 3502             (        forth.asm):01172 (4+1)           puls    a               Restore the offset's MSB
E60E BDE195           (        forth.asm):01173 (7)             jsr     HDMP4           Dump hex incarnation of the offset to Y
E611 3530             (        forth.asm):01174 (4+4)   @skoffs puls    x,y
E613 1CFB             (        forth.asm):01175 (2)             andcc   #^ZFLAG         Clear ZFLAG
E615 39               (        forth.asm):01176 (4)             rts
                      (        forth.asm):01177         * Point to the next word.
E616 1039             (        forth.asm):01178 (6)     @fdsnwd pulsw                   Retrieve current word header address
E618 104D             (        forth.asm):01179 (2)             tstd
E61A 27B1             (        forth.asm):01180 (3)             beq     @fdsnom         Just met the last dictionary entry
E61C 1F01             (        forth.asm):01181 (4)             tfr     d,x             Point to previous word header
E61E 10810C60         (        forth.asm):01182 (4)             cmpw    #WDICSPC        Are we transitioning from RAM to ROM?
E622 26B2             (        forth.asm):01183 (3)             bne     @fdslop         No singularity
E624 1086FE0B         (        forth.asm):01184 (4)             ldw     #THEEND         Won't be able to diagnose the ROM based @...
E628 20AC             (        forth.asm):01185 (3)             bra     @fdslop
                      (        forth.asm):01186         
                      (        forth.asm):01187         * Find the best possible symbolic approximation of Y and store it to the
                      (        forth.asm):01188         * buffer pointed to by X.
                      (        forth.asm):01189         * On entry:
                      (        forth.asm):01190         * - Y has a code address which is to be matched with a symbolic name + offset.
                      (        forth.asm):01191         * - X points to a buffer where the resolution is to be stored.
                      (        forth.asm):01192         * On return:
                      (        forth.asm):01193         * - Y is to be preserved.
                      (        forth.asm):01194         * - the output buffer will be updated with the best symbolic match (NUL term'd).
E62A 3430             (        forth.asm):01195 (4+4)   FINDSYM pshs    y,x
E62C 8D88             (        forth.asm):01196 (6)             bsr     FDCTSYM         Search the dictionary first (flexible match)
E62E 261B             (        forth.asm):01197 (3)             bne     @dctmfn         Dictionary match found
E630 8EE650           (        forth.asm):01198 (3)             ldx     #NDCTWKS        Search kernel symbols for an exact match
E633 EC81             (        forth.asm):01199 (5+2)   @fsmlop ldd     ,x++
E635 270B             (        forth.asm):01200 (3)             beq     @fsmfnd         End of well known symbols list?
E637 103720           (        forth.asm):01201 (4)             cmpr    y,d
E63A 2706             (        forth.asm):01202 (3)             beq     @fsmfnd
                      (        forth.asm):01203         * No well known symbol match. Skip string.
E63C A680             (        forth.asm):01204 (4+1)   @fsmskp lda     ,x+
E63E 26FC             (        forth.asm):01205 (3)             bne     @fsmskp
E640 20F1             (        forth.asm):01206 (3)             bra     @fsmlop
E642 10AEE4           (        forth.asm):01207 (6+0)   @fsmfnd ldy     ,s
E645 A680             (        forth.asm):01208 (4+1)   @fsmfn2 lda     ,x+
E647 A7A0             (        forth.asm):01209 (4+1)           sta     ,y+
E649 26FA             (        forth.asm):01210 (3)             bne     @fsmfn2
E64B 3262             (        forth.asm):01211 (4+1)   @dctmfn leas    2,s             Drop X from the system stack
E64D 3520             (        forth.asm):01212 (4+2)           puls    y
E64F 39               (        forth.asm):01213 (4)             rts
                      (        forth.asm):01214         
                      (        forth.asm):01215         * Non-dictionary well known symbols.
E650 E000             (        forth.asm):01216         NDCTWKS fdb     IODZHDL         Illegal opcode/Division by zero trap handler
E652 494F445A48444C00 (        forth.asm):01217                 fcn     'IODZHDL'
E65A E809             (        forth.asm):01218                 fdb     DPOPRA          Data stack underflow
E65C 44504F50524100   (        forth.asm):01219                 fcn     'DPOPRA'
E663 E7FA             (        forth.asm):01220                 fdb     DPSHRA          Data stack overflow
E665 44505348524100   (        forth.asm):01221                 fcn     'DPSHRA'
E66C E841             (        forth.asm):01222                 fdb     RPOPRA          Return stack underflow
E66E 52504F50524100   (        forth.asm):01223                 fcn     'RPOPRA'
E675 E827             (        forth.asm):01224                 fdb     RPSHRA          Return stack overflow
E677 52505348524100   (        forth.asm):01225                 fcn     'RPSHRA'
E67E E76A             (        forth.asm):01226                 fdb     ERRHDLR         Error handler
E680 45525248444C5200 (        forth.asm):01227                 fcn     'ERRHDLR'
E688 E3E9             (        forth.asm):01228                 fdb     CKBASRA         Illegal BASE value
E68A 434B424153524100 (        forth.asm):01229                 fcn     'CKBASRA'
E692 E495             (        forth.asm):01230                 fdb     CKDPTRA         Not enough parameters supplied (transac. behav.)
E694 434B445054524100 (        forth.asm):01231                 fcn     'CKDPTRA'
E69C E48A             (        forth.asm):01232                 fdb     CHKNDPT         Check data stack minimum depth (transac. behav.)
E69E 43484B4E44505400 (        forth.asm):01233                 fcn     'CHKNDPT'
E6A6 E597             (        forth.asm):01234                 fdb     CMP2RA          Missing operand in any of U<, U>, <, >
E6A8 434D5032524100   (        forth.asm):01235                 fcn     'CMP2RA'
E6AF E5AB             (        forth.asm):01236                 fdb     ACQVMRA         Three operands missing in any of CMOVE,
                      (        forth.asm):01237         *                               CMOVE>, MOVE
E6B1 414351564D524100 (        forth.asm):01238                 fcn     'ACQVMRA'
E6B9 E0C8             (        forth.asm):01239                 fdb     MINTLRA         Main interpreter loop return address
E6BB 4D494E544C524100 (        forth.asm):01240                 fcn     'MINTLRA'
E6C3 E440             (        forth.asm):01241                 fdb     NUMCVRA         ? while converting a string to a number
E6C5 4E554D4356524100 (        forth.asm):01242                 fcn     'NUMCVRA'
E6CD E0E0             (        forth.asm):01243                 fdb     NMCVIRA         Numeric conversion error while interpreting
E6CF 4E4D435649524100 (        forth.asm):01244                 fcn     'NMCVIRA'
E6D7 E13C             (        forth.asm):01245                 fdb     NMCVCRA         Numeric conversion error while compiling
E6D9 4E4D435643524100 (        forth.asm):01246                 fcn     'NMCVCRA'
E6E1 E111             (        forth.asm):01247                 fdb     INTRPRA         Interpreter RA (after the execution of a word)
E6E3 494E545250524100 (        forth.asm):01248                 fcn     'INTRPRA'
E6EB E12A             (        forth.asm):01249                 fdb     COMPLRA         Compiler RA (after the execution of an IMD word)
E6ED 434F4D504C524100 (        forth.asm):01250                 fcn     'COMPLRA'
E6F5 E169             (        forth.asm):01251                 fdb     EMXASXT         Emit "JSR <X>" where X has an execution token
E6F7 454D584153585400 (        forth.asm):01252                 fcn     'EMXASXT'
E6FF E52D             (        forth.asm):01253                 fdb     LWMNRA          Missing word name in LOCWRT
E701 4C574D4E524100   (        forth.asm):01254                 fcn     'LWMNRA'
E708 E919             (        forth.asm):01255                 fdb     CFR1SRA         CF read one sector failed
E70A 4346523153524100 (        forth.asm):01256                 fcn     'CFR1SRA'
E712 E7ED             (        forth.asm):01257                 fdb     NPUSH           Not an error RA but useful to have as a symbol
E714 4E5055534800     (        forth.asm):01258                 fcn     'NPUSH'
E71A E80A             (        forth.asm):01259                 fdb     RPUSH           Not an error RA but useful to have as a symbol
E71C 525055534800     (        forth.asm):01260                 fcn     'RPUSH'
E722 E7FB             (        forth.asm):01261                 fdb     NPOP            Not an error RA but useful to have as a symbol
E724 4E504F5000       (        forth.asm):01262                 fcn     'NPOP'
E729 E828             (        forth.asm):01263                 fdb     RPOP            Not an error RA but useful to have as a symbol
E72B 52504F5000       (        forth.asm):01264                 fcn     'RPOP'
E730 E2F3             (        forth.asm):01265                 fdb     PUTS            Not an error RA but useful to have as a symbol
E732 5055545300       (        forth.asm):01266                 fcn     'PUTS'
                      (        forth.asm):01267                 IFNE    DEBUG
                      (        forth.asm):01268                 fdb     LWAFRA          Assertion failure in LOCWRT
                      (        forth.asm):01269                 fcn     'LOCWRTAF'
                      (        forth.asm):01270                 ENDC
E737 0000             (        forth.asm):01271                 fdb     0               End of list
E739 3F3F3F00         (        forth.asm):01272                 fcn     '???'           Admit we have no clue!
                      (        forth.asm):01273                 ENDC                    SSDFEAT
                      (        forth.asm):01274         
                      (        forth.asm):01275         * Print ' (xxxx/yyyy)' where xxxx is the hex representation for BLK @ and
                      (        forth.asm):01276         * yyyy is the hex representation for >IN @. Y is preserved, X and D are not.
E73D 3420             (        forth.asm):01277 (4+2)   PRBLKIN pshs    y
E73F 108E039A         (        forth.asm):01278 (4)             ldy     #HEXBUF
E743 8620             (        forth.asm):01279 (2)             lda     #SP
E745 A7A0             (        forth.asm):01280 (4+1)           sta     ,y+
E747 8628             (        forth.asm):01281 (2)             lda     #'(
E749 A7A0             (        forth.asm):01282 (4+1)           sta     ,y+
E74B DC24             (        forth.asm):01283 (4)             ldd     UBLK
E74D BDE195           (        forth.asm):01284 (7)             jsr     HDMP4
E750 862F             (        forth.asm):01285 (2)             lda     #'/
E752 A7A0             (        forth.asm):01286 (4+1)           sta     ,y+
E754 DC22             (        forth.asm):01287 (4)             ldd     UTOIN
E756 BDE195           (        forth.asm):01288 (7)             jsr     HDMP4
E759 8629             (        forth.asm):01289 (2)             lda     #')
E75B A7A0             (        forth.asm):01290 (4+1)           sta     ,y+
E75D 6FA4             (        forth.asm):01291 (6+0)           clr     ,y
E75F 8E039A           (        forth.asm):01292 (3)             ldx     #HEXBUF
E762 BDE2F3           (        forth.asm):01293 (7)             jsr     PUTS
E765 3520             (        forth.asm):01294 (4+2)           puls    y
E767 7EE300           (        forth.asm):01295 (3)             jmp     PUTCR
                      (        forth.asm):01296         
                      (        forth.asm):01297         * Handle error condition. Error code is in B.
                      (        forth.asm):01298         * If B is 2 (undefined) X points to a string of length CURTOKL that has the
                      (        forth.asm):01299         * offending word.
E76A 10AEE4           (        forth.asm):01300 (6+0)   ERRHDLR ldy     ,s              Invoking return address
                      (        forth.asm):01301         * In case of a trap return, we enter here with Y set to #IODZHDL
E76D BDE300           (        forth.asm):01302 (7)     ERRHD1  jsr     PUTCR           GNU Forth does this in its exception handler
E770 C102             (        forth.asm):01303 (2)             cmpb    #2              Undefined symbol?
E772 2618             (        forth.asm):01304 (3)             bne     @perrm          No
E774 8627             (        forth.asm):01305 (2)             lda     #''             Begin quote
E776 BDE2E0           (        forth.asm):01306 (7)             jsr     PUTCH
E779 A680             (        forth.asm):01307 (4+1)   @prtsym lda     ,x+             Display undefined symbol name
E77B BDE2E0           (        forth.asm):01308 (7)             jsr     PUTCH
E77E 0A38             (        forth.asm):01309 (5)             dec     CURTOKL
E780 26F7             (        forth.asm):01310 (3)             bne     @prtsym
E782 8627             (        forth.asm):01311 (2)             lda     #''             End quote
E784 BDE2E0           (        forth.asm):01312 (7)             jsr     PUTCH
E787 8620             (        forth.asm):01313 (2)             lda     #SP             BL EMIT
E789 BDE2E0           (        forth.asm):01314 (7)             jsr     PUTCH
E78C 8EFECD           (        forth.asm):01315 (3)     @perrm  ldx     #ERRMTBL        Regular error handling
E78F 5D               (        forth.asm):01316 (1)     @nxterr tstb
E790 2637             (        forth.asm):01317 (3)             bne     @skerrm
E792 BDE2F3           (        forth.asm):01318 (7)             jsr     PUTS            Print error message
E795 8DA6             (        forth.asm):01319 (6)             bsr     PRBLKIN         Print BLK and >IN values (in hex)
E797 1F20             (        forth.asm):01320 (4)     @dmptos tfr     y,d             Dump top of the system stack contents
                      (        forth.asm):01321                 IFNE    SSDFEAT
E799 3406             (        forth.asm):01322 (4+2)           pshs    d
                      (        forth.asm):01323                 ENDC                    SSDFEAT
E79B 108E039A         (        forth.asm):01324 (4)             ldy     #HEXBUF
E79F BDE195           (        forth.asm):01325 (7)             jsr     HDMP4
E7A2 8620             (        forth.asm):01326 (2)             lda     #SP
E7A4 A7A0             (        forth.asm):01327 (4+1)           sta     ,y+
                      (        forth.asm):01328         * Symbolic stack dumps are configurable. In situations where the dictionary is
                      (        forth.asm):01329         * trashed, they may not be considered desirable. See SSDFEAT in constants.asm.
                      (        forth.asm):01330                 IFNE    SSDFEAT
E7A6 1F21             (        forth.asm):01331 (4)             tfr     y,x             X has the buffer pointer
E7A8 3520             (        forth.asm):01332 (4+2)           puls    y               Restore target symbol table entry
E7AA BDE62A           (        forth.asm):01333 (7)             jsr     FINDSYM
                      (        forth.asm):01334                 ELSE
                      (        forth.asm):01335                 clr     ,y              No symbolic information is to be printed
                      (        forth.asm):01336                 ENDC                    SSDFEAT
E7AD 8E039A           (        forth.asm):01337 (3)             ldx     #HEXBUF
E7B0 BDE2F3           (        forth.asm):01338 (7)             jsr     PUTS
E7B3 BDE300           (        forth.asm):01339 (7)             jsr     PUTCR
E7B6 108CE000         (        forth.asm):01340 (4)             cmpy    #IODZHDL
E7BA 2702             (        forth.asm):01341 (3)             beq     @wastrp         We're just back from the trap handler
E7BC 3262             (        forth.asm):01342 (4+1)           leas    2,s             Point to the next item on the stack
E7BE 118C8000         (        forth.asm):01343 (4)     @wastrp cmps    #RAMSTRT+RAMSIZE
E7C2 240C             (        forth.asm):01344 (3)             bhs     @errdon         We're done here
E7C4 10AEE4           (        forth.asm):01345 (6+0)           ldy     ,s
E7C7 20CE             (        forth.asm):01346 (3)             bra     @dmptos
E7C9 A680             (        forth.asm):01347 (4+1)   @skerrm lda     ,x+             Scan for the next error message
E7CB 26FC             (        forth.asm):01348 (3)             bne     @skerrm
E7CD 5A               (        forth.asm):01349 (1)             decb
E7CE 20BF             (        forth.asm):01350 (3)             bra     @nxterr
E7D0 10CE8000         (        forth.asm):01351 (4)     @errdon lds     #RAMSTRT+RAMSIZE
E7D4 9621             (        forth.asm):01352 (3)             lda     USTATE+1        We do ignore the upper byte
E7D6 270C             (        forth.asm):01353 (3)             beq     @erdon2         No pointers to restore if we were interpreting
                      (        forth.asm):01354         * Compiling: clear STATE and restore LSTWAD, DICEND.
E7D8 104F             (        forth.asm):01355 (2)             clrd
E7DA DD20             (        forth.asm):01356 (4)             std     USTATE          Switch back to interpretation mode
E7DC 9E0C             (        forth.asm):01357 (4)             ldx     BDICEND         Restore essential pointers from backups
E7DE 9F08             (        forth.asm):01358 (4)             stx     DICEND          Restore HERE
E7E0 9E0A             (        forth.asm):01359 (4)             ldx     BLSTWAD
E7E2 9F06             (        forth.asm):01360 (4)             stx     LSTWAD          Restore LAST
E7E4 BDEB86           (        forth.asm):01361         @erdon2 RFXT    jsr,RCLR+7      XT for RCLR
E7E7 BDFB83           (        forth.asm):01362                 RFXT    jsr,DECIMAL+10  Back to decimal BASE, for one's sanity's sake!
E7EA 7EE0B2           (        forth.asm):01363 (3)             jmp     INTERP
                      (        forth.asm):01364         
                      (        forth.asm):01365         * Push X to the data stack (boundary is checked).
E7ED 118301D6         (        forth.asm):01366 (4)     NPUSH   cmpu    #NSTTOP
E7F1 2303             (        forth.asm):01367 (3)             bls     @npush1         Anything <= than #NSTTOP indicates overflow
E7F3 3610             (        forth.asm):01368 (4+2)           pshu    x               Aka UCNPUSH
E7F5 39               (        forth.asm):01369 (4)             rts
E7F6 5F               (        forth.asm):01370 (1)     @npush1 clrb                    Data stack overflow
E7F7 BDE76A           (        forth.asm):01371 (7)             jsr     ERRHDLR         No return
     E7FA             (        forth.asm):01372         DPSHRA  equ     *
E7FA 12               (        forth.asm):01373 (1)             nop
                      (        forth.asm):01374         
                      (        forth.asm):01375         * Pull X from the data stack (boundary is checked).
                      (        forth.asm):01376         * D, W and Y are preserved.
E7FB 11830296         (        forth.asm):01377 (4)     NPOP    cmpu    #NSTBOT
E7FF 2403             (        forth.asm):01378 (3)             bhs     @npop1          Anything >= than #NSTBOT indicates underflow
E801 3710             (        forth.asm):01379 (4+2)           pulu    x
E803 39               (        forth.asm):01380 (4)             rts
E804 C601             (        forth.asm):01381 (2)     @npop1  ldb     #1              Data stack underflow
E806 BDE76A           (        forth.asm):01382 (7)             jsr     ERRHDLR         No return
     E809             (        forth.asm):01383         DPOPRA  equ     *
E809 12               (        forth.asm):01384 (1)             nop
                      (        forth.asm):01385         
                      (        forth.asm):01386         * Push X to the return stack (boundary is checked).
E80A 962E             (        forth.asm):01387 (3)     RPUSH   lda     RDEPTH          RDEPTH is expressed in cells
E80C 8140             (        forth.asm):01388 (2)             cmpa    #RSTKSZ/2       But RSTKZ is expressed in bytes
E80E 2712             (        forth.asm):01389 (3)             beq     @rpush1
E810 4C               (        forth.asm):01390 (1)             inca
E811 972E             (        forth.asm):01391 (3)             sta     RDEPTH
E813 0F30             (        forth.asm):01392 (5)             clr     RTSREMV         Do not get rid of the final RTS
E815 1F27             (        forth.asm):01393 (4)             tfr     y,v
E817 109E00           (        forth.asm):01394 (5)             ldy     RSP
E81A AFA3             (        forth.asm):01395 (5+2)           stx     ,--y
E81C 109F00           (        forth.asm):01396 (5)             sty     RSP
E81F 1F72             (        forth.asm):01397 (4)             tfr     v,y
E821 39               (        forth.asm):01398 (4)             rts
E822 C607             (        forth.asm):01399 (2)     @rpush1 ldb     #7              Return stack overflow
E824 BDE76A           (        forth.asm):01400 (7)             jsr     ERRHDLR         No return
     E827             (        forth.asm):01401         RPSHRA  equ     *
E827 12               (        forth.asm):01402 (1)             nop                     Meant to insulate RPUSH errors from RPOP EP
                      (        forth.asm):01403         
                      (        forth.asm):01404         * Pull X from the return stack (boundary is checked).
E828 962E             (        forth.asm):01405 (3)     RPOP    lda     RDEPTH          RDEPTH is expressed in cells
E82A 2710             (        forth.asm):01406 (3)             beq     @rpop1
E82C 4A               (        forth.asm):01407 (1)             deca
E82D 972E             (        forth.asm):01408 (3)             sta     RDEPTH
E82F 1F27             (        forth.asm):01409 (4)             tfr     y,v
E831 109E00           (        forth.asm):01410 (5)             ldy     RSP
E834 AEA1             (        forth.asm):01411 (5+2)           ldx     ,y++
E836 109F00           (        forth.asm):01412 (5)             sty     RSP
E839 1F72             (        forth.asm):01413 (4)             tfr     v,y
E83B 39               (        forth.asm):01414 (4)             rts
E83C C608             (        forth.asm):01415 (2)     @rpop1  ldb     #8              Return stack underflow
E83E BDE76A           (        forth.asm):01416 (7)             jsr     ERRHDLR         No return
     E841             (        forth.asm):01417         RPOPRA  equ     *
                      (        forth.asm):01418         
                      (        forth.asm):01419         * Derive the current input stream pointer from BLK and >IN.
                      (        forth.asm):01420         * The resulting address is returned in X. D is altered.
                      (        forth.asm):01421         * Both Y and W are preserved.
E841 9E24             (        forth.asm):01422 (4)     BKIN2PT ldx     UBLK
E843 2716             (        forth.asm):01423 (3)             beq     @consol         We are switching back to the console
E845 1038             (        forth.asm):01424 (6)             pshsw
E847 3420             (        forth.asm):01425 (4+2)           pshs    y
E849 8DA2             (        forth.asm):01426 (6)             bsr     NPUSH           Make sure BLK @ is loaded
E84B BDEA53           (        forth.asm):01427                 RFXT    jsr,BLOCK+8     XT for BLOCK
E84E 3520             (        forth.asm):01428 (4+2)           puls    y
E850 1039             (        forth.asm):01429 (6)             pulsw
E852 3710             (        forth.asm):01430                 UCNPOP                  Retrieve buffer addr to X
E854 9F1C             (        forth.asm):01431 (4)     @done   stx     BSBFADR         Update base buffer address
E856 DC22             (        forth.asm):01432 (4)             ldd     UTOIN
E858 308B             (        forth.asm):01433 (4+2)           leax    d,x             Add the current offset. Return the result via X
E85A 39               (        forth.asm):01434 (4)             rts
E85B 8E0316           (        forth.asm):01435 (3)     @consol ldx     #CMDBUF
E85E 20F4             (        forth.asm):01436 (3)             bra     @done
                      (        forth.asm):01437         
                      (        forth.asm):01438                 include rtc.asm
                      (          rtc.asm):00001                 IFNE RTCFEAT
                      (          rtc.asm):00002         
                      (          rtc.asm):00003         * FIRQ handler for the MC146818 RTC.
                      (          rtc.asm):00004         * In this particular context, only D and CC might be altered.
E860                  (          rtc.asm):00005         RTCIHDL tst     RTCAVL          RTC chip detected?
                      (          rtc.asm):00006                 beq     @notick         Nope
                      (          rtc.asm):00007                 lda     #RTOREGC        Read RTCC. INTACK if any interrupt is pending.
                      (          rtc.asm):00008         * Two intructions inlined for RTREGRD in non-preemtible (interrupt) mode.
                      (          rtc.asm):00009                 sta     RTAS
                      (          rtc.asm):00010                 ldb     RTDS
                      (          rtc.asm):00011                 andb    #RTCPF          RTC periodic interrupt pending?
                      (          rtc.asm):00012                 beq     @notick         No, this ain't us ticking
                      (          rtc.asm):00013         * From "The 6309 Book" p. 3-69: "Note that INC does not effect the carry bit."
E860                  (          rtc.asm):00014         @inctks ldd     TIKSLOW
                      (          rtc.asm):00015                 addd    #1
                      (          rtc.asm):00016                 std     TIKSLOW
                      (          rtc.asm):00017                 ldd     TIKSHI
                      (          rtc.asm):00018                 adcd    #0
                      (          rtc.asm):00019                 std     TIKSHI
E860                  (          rtc.asm):00020         @notick rts
                      (          rtc.asm):00021         
                      (          rtc.asm):00022         * Read one byte from an internal's RTC register whose offset is in A upon
                      (          rtc.asm):00023         * routine entry. The register contents is returned in B.
                      (          rtc.asm):00024         * No other register is altered. FIRQ is temporarily disabled.
                      (          rtc.asm):00025         * Can be called from base or interrupt level.
E860                  (          rtc.asm):00026         RTREGRD pshs    cc
                      (          rtc.asm):00027                 orcc    #FFLAG          Mask FIRQ
                      (          rtc.asm):00028                 sta     RTAS            Select target RTC register
                      (          rtc.asm):00029                 ldb     RTDS            Read RTC register contents
                      (          rtc.asm):00030                 puls    cc              Restore previous interrupt handling mode
                      (          rtc.asm):00031                 rts
                      (          rtc.asm):00032         
                      (          rtc.asm):00033         * Write one byte to an internal's RTC register whose offset is in A upon
                      (          rtc.asm):00034         * routine entry. The register byte output value is in B upon entry.
                      (          rtc.asm):00035         * FIRQ is temporarily masked. All regs contents are preserved.
                      (          rtc.asm):00036         * Can be called from base or interrupt level.
E860                  (          rtc.asm):00037         RTREGWR pshs    cc
                      (          rtc.asm):00038                 orcc    #FFLAG          Mask FIRQ
                      (          rtc.asm):00039                 sta     RTAS            Select target RTC register
                      (          rtc.asm):00040                 stb     RTDS            Write RTC register contents
                      (          rtc.asm):00041                 puls    cc              Restore previous interrupt handling mode
                      (          rtc.asm):00042                 rts
                      (          rtc.asm):00043         
                      (          rtc.asm):00044         * Detect if an MC146818 chip is present.
E860                  (          rtc.asm):00045         RTCINIT
                      (          rtc.asm):00046                 IFNE    DEBUG
                      (          rtc.asm):00047                 clrd
                      (          rtc.asm):00048                 std     TIKSHI          Initialize the TICKS double cell
                      (          rtc.asm):00049                 std     TIKSLOW
                      (          rtc.asm):00050                 clr     RTCAVL          Assume chip not present
                      (          rtc.asm):00051                 ENDC
                      (          rtc.asm):00052                 lda     #RTOPRES        Offset to the last NVRAM byte if dev is present
                      (          rtc.asm):00053                 bsr     RTREGRD         Read user memory byte. Value is returned in B   
                      (          rtc.asm):00054                 comb                    One's complement to B
                      (          rtc.asm):00055                 pshs    b
                      (          rtc.asm):00056                 bsr     RTREGWR         Write back one's complement to RTC
                      (          rtc.asm):00057                 bsr     RTREGRD         And read the last NVRAM byte back
                      (          rtc.asm):00058                 puls    a
                      (          rtc.asm):00059                 cmpr    b,a             Match?
                      (          rtc.asm):00060                 beq     @rtdtct         RTC chip detected all right!
                      (          rtc.asm):00061                 rts
                      (          rtc.asm):00062         * MC146818 RTC chip detected.
                      (          rtc.asm):00063         * On power up if register RTCA reads as 0, the SET bit in register RTCB will
                      (          rtc.asm):00064         * prevent any updates to the calendar (date/time). We do preserve the state of
                      (          rtc.asm):00065         * the SET bit, so as to indicate to the application software that the time and
                      (          rtc.asm):00066         * date have yet to be set manually.
E860                  (          rtc.asm):00067         @rtdtct lda     #RTOREGA
                      (          rtc.asm):00068                 ldb     #(RTADV32|RTARS64)
                      (          rtc.asm):00069                 bsr     RTREGWR         Write B to the RTCA register
                      (          rtc.asm):00070                 lda     #RTOREGB
                      (          rtc.asm):00071                 bsr     RTREGRD
                      (          rtc.asm):00072                 andb    #RTBSET         Extract the SET bit
                      (          rtc.asm):00073                 orb     #(RTBPIE|RTBDM|RTB24)
                      (          rtc.asm):00074                 bsr     RTREGWR         Write B to the RTCB register
                      (          rtc.asm):00075                 inc     RTCAVL
                      (          rtc.asm):00076                 ldx     #RTPRESM        Real time clock detected message base address
                      (          rtc.asm):00077                 jmp     PUTS            Out to the console
                      (          rtc.asm):00078         
                      (          rtc.asm):00079                 ENDC                    RTCFEAT
                      (          rtc.asm):00080         
                      (        forth.asm):01439                 include storage.asm
                      (      storage.asm):00001         * Wait until the BSY bit is clear in the CF status register.
                      (      storage.asm):00002         * Upon return the BSY bit is guaranteed to be zero. Z will
                      (      storage.asm):00003         * be set in CC. This subroutine should not be called before
                      (      storage.asm):00004         * the CompactFlash presence has been assessed.
E860 B6C007           (      storage.asm):00005 (4)     CFWAIT  lda     CFSTATR
E863 8580             (      storage.asm):00006 (2)             bita    #CFBSYB
E865 26F9             (      storage.asm):00007 (3)             bne     CFWAIT
E867 39               (      storage.asm):00008 (4)             rts
                      (      storage.asm):00009         
                      (      storage.asm):00010         * Wait until the BSY bit is clear and the RDY bit is set.
E868 8DF6             (      storage.asm):00011 (6)     CFRDY   bsr     CFWAIT
E86A 2703             (      storage.asm):00012 (3)             beq     @cfrdy0         Card not busy, proceed
E86C 1A04             (      storage.asm):00013 (2)             orcc    #ZFLAG
E86E 39               (      storage.asm):00014 (4)             rts
E86F 8E2000           (      storage.asm):00015 (3)     @cfrdy0 ldx     #$2000          Maximum poll count
E872 8640             (      storage.asm):00016 (2)             lda     #CFRDYB
E874 B5C007           (      storage.asm):00017 (4)     @cfrdy1 bita    CFSTATR
E877 2604             (      storage.asm):00018 (3)             bne     @cfrdy2         BSY bit is set, continue
E879 301F             (      storage.asm):00019 (4+1)           leax    -1,x            Card not ready, decrement poll count
E87B 26F7             (      storage.asm):00020 (3)             bne     @cfrdy1         and try again
E87D 39               (      storage.asm):00021 (4)     @cfrdy2 rts                     Return with Z set: card not present
                      (      storage.asm):00022         *                               Return with Z clear: card is ready
                      (      storage.asm):00023         
                      (      storage.asm):00024         * Check for possible error condition.
                      (      storage.asm):00025         * Upon return either Z is set (A is zero) and no error occurred or
                      (      storage.asm):00026         * Z is clear and the CF error register contents is returned in A.
E87E 8DE0             (      storage.asm):00027 (6)     CFERRCK bsr     CFWAIT
E880 B6C007           (      storage.asm):00028 (4)             lda     CFSTATR
E883 8401             (      storage.asm):00029 (2)             anda    #CFERRB
E885 2703             (      storage.asm):00030 (3)             beq     @cfeck1
E887 B6C001           (      storage.asm):00031 (4)             lda     CFERROR         The error register contains error details
E88A 39               (      storage.asm):00032 (4)     @cfeck1 rts
                      (      storage.asm):00033         
                      (      storage.asm):00034         * Issue CF command. The command code is passed through the B register.
                      (      storage.asm):00035         * Upon return:
                      (      storage.asm):00036         * - Z is set and everything is peachy.
                      (      storage.asm):00037         * - or Z is clear and the CF error register contents will be
                      (      storage.asm):00038         *   returned in A (and mirrored in the global CFERRCD variable).
                      (      storage.asm):00039         * B is preserved.
E88B 8DDB             (      storage.asm):00040 (6)     CFCMDIS bsr     CFRDY
E88D 270A             (      storage.asm):00041 (3)             beq     @cfciab         Card not ready, abort
E88F D73E             (      storage.asm):00042 (3)             stb     CFCMMIR         Update CF command mirror
E891 F7C007           (      storage.asm):00043 (4)             stb     CFCOMDR         Send command to the CF card
E894 8DE8             (      storage.asm):00044 (6)             bsr     CFERRCK
E896 973F             (      storage.asm):00045 (3)     @cfcise sta     CFERRCD         CF command issue set error
                      (      storage.asm):00046                 IFNE    DEBUG
                      (      storage.asm):00047                 pshs    a,cc
                      (      storage.asm):00048                 beq     @cfciok
                      (      storage.asm):00049                 lda     #'!
                      (      storage.asm):00050                 jsr     PUTCH
E898                  (      storage.asm):00051         @cfcidi lda     CFCMMIR
                      (      storage.asm):00052                 ldx     #TBUFF
                      (      storage.asm):00053                 jsr     HDMP2
                      (      storage.asm):00054                 lda     #'/
                      (      storage.asm):00055                 sta     ,x+
                      (      storage.asm):00056                 lda     CFERRCD
                      (      storage.asm):00057                 jsr     HDMP2
                      (      storage.asm):00058                 ldx     #TBUFF
                      (      storage.asm):00059                 jsr     PUTS
                      (      storage.asm):00060                 jsr     PUTCR
                      (      storage.asm):00061                 bra     @cfcict         CF command issue continued
E898                  (      storage.asm):00062         @cfciok lda     #'#
                      (      storage.asm):00063                 jsr     PUTCH
                      (      storage.asm):00064                 bra     @cfcidi         CF command issue data indication
E898                  (      storage.asm):00065         @cfcict puls    cc,a
                      (      storage.asm):00066                 ENDC
E898 39               (      storage.asm):00067 (4)             rts
E899 86FF             (      storage.asm):00068 (2)     @cfciab lda     #$FF            Dummy error code
E89B 20F9             (      storage.asm):00069 (3)             bra     @cfcise
                      (      storage.asm):00070         
                      (      storage.asm):00071         * Drive 0 select.
E89D 8DC9             (      storage.asm):00072 (6)     CFDRSEL bsr     CFRDY
E89F 86E0             (      storage.asm):00073 (2)             lda     #$E0            Drive 0, LBA mode
E8A1 B7C006           (      storage.asm):00074 (4)             sta     CFDRHDR
E8A4 20C2             (      storage.asm):00075 (3)             bra     CFRDY
                      (      storage.asm):00076         
                      (      storage.asm):00077         * Analyze the response to the CF "Identify Device" request.
E8A6 9E08             (      storage.asm):00078 (4)     CFANTHS ldx     DICEND
E8A8 308836           (      storage.asm):00079 (4+1)           leax    $36,x           Point to the "Model number" field
E8AB 3410             (      storage.asm):00080 (4+2)           pshs    x
E8AD 118614           (      storage.asm):00081 (3)             lde     #$14            Number of 16 bit words to go through
E8B0 EC84             (      storage.asm):00082 (5+0)   @bytswp ldd     ,x
E8B2 1E98             (      storage.asm):00083 (5)             exg     b,a             Byte swapping
E8B4 ED81             (      storage.asm):00084 (5+2)           std     ,x++
E8B6 114A             (      storage.asm):00085 (2)             dece
E8B8 26F6             (      storage.asm):00086 (3)             bne     @bytswp
E8BA 6F84             (      storage.asm):00087 (6+0)           clr     ,x
E8BC 3510             (      storage.asm):00088 (4+2)           puls    x
E8BE BDE2F3           (      storage.asm):00089 (7)             jsr     PUTS            Decent CF cards indicate the capacity that way
E8C1 7EE300           (      storage.asm):00090 (3)             jmp     PUTCR           Up to $10000 blocks is 64 MB!
                      (      storage.asm):00091         
                      (      storage.asm):00092         * Initialize the CompactFlash subsystem.
                      (      storage.asm):00093         * This is run once at boot time. There is no hot plug support here.
E8C4 0F3D             (      storage.asm):00094 (5)     CFINIT  clr     CFCARDP         Clear card present,
                      (      storage.asm):00095                 IFEQ    DEBUG
E8C6 8DA0             (      storage.asm):00096 (6)             bsr     CFRDY
                      (      storage.asm):00097                 ELSE
                      (      storage.asm):00098                 jsr     CFRDY
                      (      storage.asm):00099                 ENDC
E8C8 2730             (      storage.asm):00100 (3)             beq     @cfinab         Card not ready, abort
E8CA 8DD1             (      storage.asm):00101 (6)             bsr     CFDRSEL         Drive 0 select
E8CC 8601             (      storage.asm):00102 (2)             lda     #1              Enable 8-bit data transfers
E8CE B7C001           (      storage.asm):00103 (4)             sta     CFFEATR
E8D1 C6EF             (      storage.asm):00104 (2)             ldb     #CFSETFT        Issue a CF "Set Feature" command
                      (      storage.asm):00105                 IFEQ    DEBUG
E8D3 8DB6             (      storage.asm):00106 (6)             bsr     CFCMDIS         Not allowed to fail
                      (      storage.asm):00107                 ELSE
                      (      storage.asm):00108                 jsr     CFCMDIS         Not allowed to fail
                      (      storage.asm):00109                 ENDC
E8D5 2623             (      storage.asm):00110 (3)             bne     @cfinab         Abort with card present flag clear
E8D7 8601             (      storage.asm):00111 (2)             lda     #1              Request default PIO mode wo/ IORDY
E8D9 B7C002           (      storage.asm):00112 (4)             sta     CFSCNTR
E8DC 8603             (      storage.asm):00113 (2)             lda     #3              ATA-2 "Set Transfer mode"
E8DE B7C001           (      storage.asm):00114 (4)             sta     CFFEATR
                      (      storage.asm):00115                 IFEQ    DEBUG
E8E1 8DA8             (      storage.asm):00116 (6)             bsr     CFCMDIS         OK to fail
                      (      storage.asm):00117                 ELSE
                      (      storage.asm):00118                 jsr     CFCMDIS         OK to fail
                      (      storage.asm):00119                 ENDC
E8E3 8682             (      storage.asm):00120 (2)             lda     #$82            Disable write caching
E8E5 B7C001           (      storage.asm):00121 (4)             sta     CFFEATR
                      (      storage.asm):00122                 IFEQ    DEBUG
E8E8 8DA1             (      storage.asm):00123 (6)             bsr     CFCMDIS         B still has #CFSETF. Also OK to fail
                      (      storage.asm):00124                 ELSE
                      (      storage.asm):00125                 jsr     CFCMDIS         B still has #CFSETF. Also OK to fail
                      (      storage.asm):00126                 ENDC
E8EA C6EC             (      storage.asm):00127 (2)             ldb     #CFIDDEV        Issue a CF "Identify Device" command
                      (      storage.asm):00128                 IFEQ    DEBUG
E8EC 8D9D             (      storage.asm):00129 (6)             bsr     CFCMDIS         Not allowed to fail
                      (      storage.asm):00130                 ELSE
                      (      storage.asm):00131                 jsr     CFCMDIS         Not allowed to fail
                      (      storage.asm):00132                 ENDC
E8EE 260A             (      storage.asm):00133 (3)             bne     @cfinab         Abort with card present flag clear
E8F0 9E08             (      storage.asm):00134 (4)             ldx     DICEND          Target address is HERE
E8F2 8D07             (      storage.asm):00135 (6)             bsr     CF1SRD          Read one sector
E8F4 8DB0             (      storage.asm):00136 (6)             bsr     CFANTHS         Analyze this!
E8F6 8601             (      storage.asm):00137 (2)             lda     #1
E8F8 973D             (      storage.asm):00138 (3)             sta     CFCARDP         Set the card present flag
E8FA 39               (      storage.asm):00139 (4)     @cfinab rts
                      (      storage.asm):00140         
                      (      storage.asm):00141         * Read one sector. The LBA parameters are assumed to have been set previously.
                      (      storage.asm):00142         * On input X points to the receiving (at least 512 bytes long) buffer.
E8FB B6C007           (      storage.asm):00143 (4)     CF1SRD  lda     CFSTATR
E8FE 8508             (      storage.asm):00144 (2)             bita    #CFDRQB         Check for DRQ bit in the CF status register
E900 2712             (      storage.asm):00145 (3)             beq     IOERR
E902 10860200         (      storage.asm):00146 (4)             ldw     #CFSCSZ         Sector size is 512 bytes
E906 108EC000         (      storage.asm):00147 (4)             ldy     #CFDATAR        The data source address
E90A 3401             (      storage.asm):00148 (4+1)           pshs    cc
E90C 1A50             (      storage.asm):00149 (2)             orcc    #(FFLAG|IFLAG)  Disable maskable interrupts
E90E 113B21           (      storage.asm):00150 (6+?)           tfm     y,x+
E911 3501             (      storage.asm):00151 (4+1)           puls    cc              Restore previous interrupt handling mode
E913 39               (      storage.asm):00152 (4)             rts
E914 C611             (      storage.asm):00153 (2)     IOERR   ldb     #17
E916 BDE76A           (      storage.asm):00154 (7)             jsr     ERRHDLR         No return
E919 12               (      storage.asm):00155 (1)     CFR1SRA nop                     For symbolic stack dump debugging purposes
                      (      storage.asm):00156         
                      (      storage.asm):00157         * Write one sector. The LBA parameters are assumed to have been set previously.
                      (      storage.asm):00158         * On input X points to the sending (at least 512 bytes long) buffer.
E91A B6C007           (      storage.asm):00159 (4)     CF1SWR  lda     CFSTATR
E91D 8488             (      storage.asm):00160 (2)             anda    #CFBSYB|CFDRQB
E91F 8108             (      storage.asm):00161 (2)             cmpa    #CFDRQB         Check for BSY clear and DRQ set
E921 26F7             (      storage.asm):00162 (3)             bne     CF1SWR
E923 10860200         (      storage.asm):00163 (4)             ldw     #CFSCSZ         Sector size is 512 bytes
E927 108EC000         (      storage.asm):00164 (4)             ldy     #CFDATAR        The data destination address
E92B 113A12           (      storage.asm):00165 (6+?)           tfm     x+,y            Note: tfm is interruptible!
E92E 39               (      storage.asm):00166 (4)             rts
                      (      storage.asm):00167         
                      (      storage.asm):00168         * 1KB Forth block support primitives. Not dictionary code. More like BIOS ops.
                      (      storage.asm):00169         
                      (      storage.asm):00170         * One block IO preamble: select drive and LBA parameters. On input:
                      (      storage.asm):00171         * ,s has the return address
                      (      storage.asm):00172         * 2,s had the return address for the caller
                      (      storage.asm):00173         * 4,s has the target block number
E92F BDE860           (      storage.asm):00174 (7)     CF1BPRE jsr     CFWAIT
E932 BDE89D           (      storage.asm):00175 (7)             jsr     CFDRSEL         Set drive and head parameters
E935 EC64             (      storage.asm):00176 (5+1)           ldd     4,s
E937 1048             (      storage.asm):00177 (2)             lsld                    Convert block number to sector number
E939 F7C003           (      storage.asm):00178 (4)             stb     CFSNUMR         LBA 7-0
E93C B7C004           (      storage.asm):00179 (4)             sta     CFCLOWR         LBA 15-8
E93F 1FA8             (      storage.asm):00180 (4)             tfr     cc,a
E941 8401             (      storage.asm):00181 (2)             anda    #CFLAG
E943 B7C005           (      storage.asm):00182 (4)             sta     CFCHIGR         LBA 23-16 (carry to cylinder high)
E946 8602             (      storage.asm):00183 (2)             lda     #2              2 IDE sectors per Forth block
E948 B7C002           (      storage.asm):00184 (4)             sta     CFSCNTR
E94B 39               (      storage.asm):00185 (4)             rts
                      (      storage.asm):00186         
                      (      storage.asm):00187         * Read one block from CF device. On input:
                      (      storage.asm):00188         * ,s has the return address
                      (      storage.asm):00189         * 2,s has the target block number
                      (      storage.asm):00190         * 4,s has the buffer base address
                      (      storage.asm):00191         * Upon return, Y will be preserved.
E94C 0D3D             (      storage.asm):00192 (4)     CF1BKRD tst     CFCARDP
E94E 2602             (      storage.asm):00193 (3)             bne     @ctnued
E950 20C2             (      storage.asm):00194 (3)             bra     IOERR           Card not present--CF subsystem not initialized
E952 1F27             (      storage.asm):00195 (4)     @ctnued tfr     y,v
E954 8DD9             (      storage.asm):00196 (6)             bsr     CF1BPRE
E956 C620             (      storage.asm):00197 (2)             ldb     #CFRSCTS        Issue a "Read sectors" CF command
E958 BDE88B           (      storage.asm):00198 (7)             jsr     CFCMDIS
E95B AE64             (      storage.asm):00199 (5+1)           ldx     4,s             Target buffer address to X
E95D 8D9C             (      storage.asm):00200 (6)             bsr     CF1SRD          Read the even sector from CF device
E95F BDE860           (      storage.asm):00201 (7)             jsr     CFWAIT          Wait for next sector to become available
E962 8D97             (      storage.asm):00202 (6)             bsr     CF1SRD          and read the odd sector
E964 1F72             (      storage.asm):00203 (4)             tfr     v,y
E966 39               (      storage.asm):00204 (4)             rts
                      (      storage.asm):00205         
                      (      storage.asm):00206         * Write one block to CF device. Upon entry:
                      (      storage.asm):00207         * ,s has the return address
                      (      storage.asm):00208         * 2,s has the target block number
                      (      storage.asm):00209         * 4,s has the buffer base address
                      (      storage.asm):00210         * Upon return, Y will be preserved.
E967 0D3D             (      storage.asm):00211 (4)     CF1BKWR tst     CFCARDP
E969 2602             (      storage.asm):00212 (3)             bne     @ctnued
E96B 20A7             (      storage.asm):00213 (3)             bra     IOERR           Card not present--CF subsystem not initialized
E96D 1F27             (      storage.asm):00214 (4)     @ctnued tfr     y,v
E96F 8DBE             (      storage.asm):00215 (6)             bsr     CF1BPRE
E971 C630             (      storage.asm):00216 (2)             ldb     #CFWSCTS        Issue a "Write sectors" CF command
E973 BDE88B           (      storage.asm):00217 (7)             jsr     CFCMDIS
E976 AE64             (      storage.asm):00218 (5+1)           ldx     4,s             Source buffer address to X
E978 8DA0             (      storage.asm):00219 (6)             bsr     CF1SWR          Write the even sector to CF device
E97A BDE860           (      storage.asm):00220 (7)             jsr     CFWAIT          Wait for next sector to become available
E97D 8D9B             (      storage.asm):00221 (6)             bsr     CF1SWR          and write the odd sector
E97F 1F72             (      storage.asm):00222 (4)             tfr     v,y
E981 39               (      storage.asm):00223 (4)             rts
                      (      storage.asm):00224         
                      (        forth.asm):01440         
                      (        forth.asm):01441         ******************************************************************************
                      (        forth.asm):01442         * Dictionary begins. In the code below ANSI refers to ANSI-X3.215-1994
                      (        forth.asm):01443         * Draft 6 proposal (i.e. the free spec).
                      (        forth.asm):01444         
E982 0D               (        forth.asm):01445         EBUFS   fcb     13              79-STANDARD (REQ145)
E983 454D5054592D4255 (        forth.asm):01446                 fcc     'EMPTY-BUFFERS' ( -- )
     4646455253
E990 0000             (        forth.asm):01447                 fdb     0               Last dictionary entry
E992 C7               (        forth.asm):01448                 RFCS
E993 7EE37B           (        forth.asm):01449 (3)             jmp     EMPTYB
                      (        forth.asm):01450         
E996 0C               (        forth.asm):01451         SAVBUF  fcb     12              79-STANDARD (REQ221)
E997 534156452D425546 (        forth.asm):01452                 fcc     'SAVE-BUFFERS'  ( -- )
     46455253
E9A3 E982             (        forth.asm):01453                 fdb     EBUFS
E9A5 C7               (        forth.asm):01454                 RFCS
E9A6 8E0440           (        forth.asm):01455 (3)             ldx     #BUF0
E9A9 8D03             (        forth.asm):01456 (6)             bsr     WBIFDRT
E9AB 8E0850           (        forth.asm):01457 (3)             ldx     #BUF1
                      (        forth.asm):01458         * Write buffer back to mass storage if marked as dirty.
                      (        forth.asm):01459         * The dirty bit is cleared but the buffer contents itself is not.
                      (        forth.asm):01460         * The buffer will continue to be marked as "in use."
                      (        forth.asm):01461         * On input X has has the base buffer address. Both D and X
                      (        forth.asm):01462         * are preserved. Y is not.
E9AE 3406             (        forth.asm):01463 (4+2)   WBIFDRT pshs    d
E9B0 3410             (        forth.asm):01464 (4+2)           pshs    x               Base buffer address (arg1 to CF1BKWR)
E9B2 8605             (        forth.asm):01465 (2)             lda     #BINUSE|BDIRTY
E9B4 A4890401         (        forth.asm):01466 (4+3)           anda    BOFLAGS,x
E9B8 8105             (        forth.asm):01467 (2)             cmpa    #BINUSE|BDIRTY
E9BA 2616             (        forth.asm):01468 (3)             bne     @alldon         Block not in use or in use but not dirty
E9BC AE890402         (        forth.asm):01469 (5+3)           ldx     BOBLKNO,x
E9C0 3410             (        forth.asm):01470 (4+2)           pshs    x               Block number (arg0 to CF1BKWR)
E9C2 8DA3             (        forth.asm):01471 (6)             bsr     CF1BKWR         Write data buffer to CF
E9C4 3262             (        forth.asm):01472 (4+1)           leas    2,s             Drop one cell from the system stack (blknum)
E9C6 AEE4             (        forth.asm):01473 (5+0)           ldx     ,s              Retrieve base buffer address
E9C8 30890401         (        forth.asm):01474 (4+3)           leax    BOFLAGS,x
E9CC A684             (        forth.asm):01475 (4+0)           lda     ,x              Acquire the 'flags' field
E9CE 84FB             (        forth.asm):01476 (2)             anda    #^BDIRTY        Clear the dirty bit
E9D0 A784             (        forth.asm):01477 (4+0)           sta     ,x              and update the 'flags' field
E9D2 3510             (        forth.asm):01478 (4+2)   @alldon puls    x               Restore X
E9D4 3506             (        forth.asm):01479 (4+2)           puls    d               and D
E9D6 39               (        forth.asm):01480 (4)             rts
                      (        forth.asm):01481         
E9D7 05               (        forth.asm):01482         FLUSH   fcb     5               79-STANDARD (REF)
E9D8 464C555348       (        forth.asm):01483                 fcc     'FLUSH'         ( -- ) An alias for SAVE-BUFFERS
E9DD E996             (        forth.asm):01484                 fdb     SAVBUF
E9DF C7               (        forth.asm):01485                 RFCS
E9E0 20C4             (        forth.asm):01486                 RFXT    bra,SAVBUF+15   XT for SAVE-BUFFERS
                      (        forth.asm):01487         
E9E2 06               (        forth.asm):01488         UPDATE  fcb     6               79-STANDARD (REQ229)
E9E3 555044415445     (        forth.asm):01489                 fcc     'UPDATE'        ( -- )
E9E9 E9D7             (        forth.asm):01490                 fdb     FLUSH
E9EB C7               (        forth.asm):01491                 RFCS
E9EC 9E1A             (        forth.asm):01492 (4)             ldx     MRUBUFA         Most recently used buffer base address
E9EE 30890401         (        forth.asm):01493 (4+3)           leax    BOFLAGS,x       Buffer 'flags' field's address to X
E9F2 A684             (        forth.asm):01494 (4+0)           lda     ,x              Buffer 'flags' field to A
E9F4 8501             (        forth.asm):01495 (2)             bita    #BINUSE         Is that buffer in use?
E9F6 2704             (        forth.asm):01496 (3)             beq     @upddon         No, we're done here
E9F8 8A04             (        forth.asm):01497 (2)             ora     #BDIRTY
E9FA A784             (        forth.asm):01498 (4+0)           sta     ,x              Set the dirty bit
E9FC 39               (        forth.asm):01499 (4)     @upddon rts
                      (        forth.asm):01500         
E9FD 06               (        forth.asm):01501         BUFFER  fcb     6               79-STANDARD (REQ130)
E9FE 425546464552     (        forth.asm):01502                 fcc     'BUFFER'        ( ublkno -- addr )
EA04 E9E2             (        forth.asm):01503                 fdb     UPDATE
EA06 C7               (        forth.asm):01504                 RFCS
EA07 BDE7FB           (        forth.asm):01505 (7)             jsr     NPOP
EA0A 1F12             (        forth.asm):01506 (4)             tfr     x,y             ublkno to Y
                      (        forth.asm):01507         * Block lookup.
EA0C 8E0440           (        forth.asm):01508 (3)             ldx     #BUF0           Base address of the first resident buffer
EA0F C602             (        forth.asm):01509 (2)             ldb     #2              Number of resident buffers
EA11 A6890401         (        forth.asm):01510 (4+3)   @blkup  lda     BOFLAGS,x       Buffer flags to A
EA15 8501             (        forth.asm):01511 (2)             bita    #BINUSE         Buffer in use?
EA17 270C             (        forth.asm):01512 (3)             beq     @nxtbuf         No
EA19 10AC890402       (        forth.asm):01513 (6+3)           cmpy    BOBLKNO,x       Buffer is in use. Block number match?
EA1E 2605             (        forth.asm):01514 (3)             bne     @nxtbuf         No
EA20 9F1A             (        forth.asm):01515 (4)     @retba  stx     MRUBUFA         Block number match. Mark as the MRU buffer
EA22 3610             (        forth.asm):01516                 UCNPUSH                 and return its base address via the data stack
EA24 39               (        forth.asm):01517 (4)             rts
EA25 30890410         (        forth.asm):01518 (4+3)   @nxtbuf leax    BFDISP,x        Point to the next buffer
EA29 5A               (        forth.asm):01519 (1)             decb
EA2A 26E5             (        forth.asm):01520 (3)             bne     @blkup
                      (        forth.asm):01521         * The block number in Y is not currently in use. Assign a buffer to it.
EA2C 8E0440           (        forth.asm):01522 (3)             ldx     #BUF0
EA2F 9C1A             (        forth.asm):01523 (4)             cmpx    MRUBUFA         Most recently used buffer address
EA31 2603             (        forth.asm):01524 (3)             bne     @bselct
EA33 8E0850           (        forth.asm):01525 (3)             ldx     #BUF1
                      (        forth.asm):01526         * At this point X has the base address of the block we are interested in.
EA36 3420             (        forth.asm):01527 (4+2)   @bselct pshs    y               Backup the target block number
EA38 BDE9AE           (        forth.asm):01528 (7)             jsr     WBIFDRT         Write back if dirty. X and D are preserved
EA3B 8601             (        forth.asm):01529 (2)             lda     #BINUSE
EA3D A7890401         (        forth.asm):01530 (4+3)           sta     BOFLAGS,x       Update the buffer's 'flags' field
EA41 3520             (        forth.asm):01531 (4+2)           puls    y               Restore the target block number
EA43 10AF890402       (        forth.asm):01532 (6+3)           sty     BOBLKNO,x       and update the 'blknum' field as well
EA48 20D6             (        forth.asm):01533 (3)             bra     @retba
                      (        forth.asm):01534         
EA4A 05               (        forth.asm):01535         BLOCK   fcb     5               79-STANDARD (REQ191)
EA4B 424C4F434B       (        forth.asm):01536                 fcc     'BLOCK'         ( ublkno -- addr )
EA50 E9FD             (        forth.asm):01537                 fdb     BUFFER
EA52 C7               (        forth.asm):01538                 RFCS
EA53 8DB2             (        forth.asm):01539                 RFXT    bsr,BUFFER+9    XT for BUFFER
                      (        forth.asm):01540         * Upon return Y has has the block number.
EA55 3710             (        forth.asm):01541                 UCNPOP                  Buffer base address to X
EA57 3410             (        forth.asm):01542 (4+2)           pshs    x               Push base buffer address as Arg1 to CF1BKRD
EA59 A6890401         (        forth.asm):01543 (4+3)           lda     BOFLAGS,x       Retrieve buffer 'flags' field
                      (        forth.asm):01544                 IFNE    DEBUG
                      (        forth.asm):01545                 bita    #BINUSE
                      (        forth.asm):01546                 bne     @blkctd
                      (        forth.asm):01547                 lda     #10             Assertion failed
                      (        forth.asm):01548                 jsr     ERRHDLR         No return
                      (        forth.asm):01549                 ENDC                    DEBUG
EA5D 8402             (        forth.asm):01550 (2)     @blkctd anda    #BMAPPD         Has the block been read yet?
EA5F 2613             (        forth.asm):01551 (3)             bne     @bkmapd         Yes
EA61 3420             (        forth.asm):01552 (4+2)           pshs    y               No. Push block number as arg0 to CF1BKRD
                      (        forth.asm):01553         * Map in the block from the CF device. System stack structure is as follows:
                      (        forth.asm):01554         * ,s has the target block number.
                      (        forth.asm):01555         * 2,s has the buffer base address.
EA63 BDE94C           (        forth.asm):01556 (7)             jsr     CF1BKRD
EA66 3262             (        forth.asm):01557 (4+1)           leas    2,s             Drop one cell from the system stack
                      (        forth.asm):01558         * Update the buffer's flags field.
EA68 AEE4             (        forth.asm):01559 (5+0)           ldx     ,s              Base buffer address
EA6A 30890401         (        forth.asm):01560 (4+3)           leax    BOFLAGS,x       Buffer 'flags' field address to X
EA6E A684             (        forth.asm):01561 (4+0)           lda     ,x              Read buffer 'flags' field
EA70 8A02             (        forth.asm):01562 (2)             ora     #BMAPPD
EA72 A784             (        forth.asm):01563 (4+0)           sta     ,x              and mark it as read
EA74 3510             (        forth.asm):01564 (4+2)   @bkmapd puls    x               Buffer base address to X
EA76 3610             (        forth.asm):01565                 UCNPUSH
EA78 39               (        forth.asm):01566 (4)             rts
                      (        forth.asm):01567         
EA79 03               (        forth.asm):01568         BLK     fcb     3
EA7A 424C4B           (        forth.asm):01569                 fcc     'BLK'
EA7D EA4A             (        forth.asm):01570                 fdb     BLOCK
EA7F C7               (        forth.asm):01571                 RFCS
EA80 8E0124           (        forth.asm):01572 (3)             ldx     #UBLK
EA83 7EE7ED           (        forth.asm):01573 (3)             jmp     NPUSH
                      (        forth.asm):01574         
EA86 03               (        forth.asm):01575         TOIN    fcb     3
EA87 3E494E           (        forth.asm):01576                 fcc     '>IN'
EA8A EA79             (        forth.asm):01577                 fdb     BLK
EA8C C7               (        forth.asm):01578                 RFCS
EA8D 8E0122           (        forth.asm):01579 (3)             ldx     #UTOIN
EA90 7EE7ED           (        forth.asm):01580 (3)             jmp     NPUSH
                      (        forth.asm):01581         
EA93 03               (        forth.asm):01582         SCR     fcb     3
EA94 534352           (        forth.asm):01583                 fcc     'SCR'
EA97 EA86             (        forth.asm):01584                 fdb     TOIN
EA99 C7               (        forth.asm):01585                 RFCS
EA9A 8E0126           (        forth.asm):01586 (3)             ldx     #USCR
EA9D 7EE7ED           (        forth.asm):01587 (3)             jmp     NPUSH
                      (        forth.asm):01588         
                      (        forth.asm):01589         * Functionally: : LINE 6 SHIFT SCR @ BLOCK + ;
EAA0 04               (        forth.asm):01590         LINE    fcb     4               79-STANDARD (REF)
EAA1 4C494E45         (        forth.asm):01591                 fcc     'LINE'
EAA5 EA93             (        forth.asm):01592                 fdb     SCR
EAA7 C7               (        forth.asm):01593                 RFCS
EAA8 8E0006           (        forth.asm):01594 (3)             ldx     #6
EAAB BDE7ED           (        forth.asm):01595 (7)             jsr     NPUSH
EAAE BDF951           (        forth.asm):01596                 RFXT    jsr,SHIFT+8     XT for SHIFT
EAB1 9E26             (        forth.asm):01597 (4)             ldx     USCR
EAB3 BDE7ED           (        forth.asm):01598 (7)             jsr     NPUSH
EAB6 8D9B             (        forth.asm):01599                 RFXT    bsr,BLOCK+8     XT for BLOCK
EAB8 7EF8C9           (        forth.asm):01600                 RFXT    jmp,PLUS+4      XT for +
                      (        forth.asm):01601         
                      (        forth.asm):01602         * Functionally:
                      (        forth.asm):01603         * : INDEX 1+ SWAP DO
                      (        forth.asm):01604         *     CR   I SCR !
                      (        forth.asm):01605         *     0 LINE 64 TYPE
                      (        forth.asm):01606         *   LOOP ;
EABB 05               (        forth.asm):01607         INDEX   fcb     5               79-STANDARD (REF)
EABC 494E444558       (        forth.asm):01608                 fcc     'INDEX'         ( n1 n2 -- )
EAC1 EAA0             (        forth.asm):01609                 fdb     LINE
EAC3 C7               (        forth.asm):01610                 RFCS
EAC4 BDE7FB           (        forth.asm):01611 (7)             jsr     NPOP            N2 to X
EAC7 3001             (        forth.asm):01612 (4+1)           leax    1,x             1+
EAC9 1F12             (        forth.asm):01613 (4)             tfr     x,y             Y has the limit (not reached)
EACB BDE7FB           (        forth.asm):01614 (7)             jsr     NPOP            X has the index (N1)
EACE BDE300           (        forth.asm):01615 (7)     @indlop jsr     PUTCR           CR
EAD1 9F26             (        forth.asm):01616 (4)             stx     USCR            I SCR !
EAD3 3430             (        forth.asm):01617 (4+4)           pshs    y,x
EAD5 1FC1             (        forth.asm):01618 (4)             tfr     0,x
EAD7 BDE7ED           (        forth.asm):01619 (7)             jsr     NPUSH
EADA 8DCC             (        forth.asm):01620                 RFXT    bsr,LINE+7      XT for LINE
EADC 8E0040           (        forth.asm):01621 (3)             ldx     #64
EADF BDE7ED           (        forth.asm):01622 (7)             jsr     NPUSH
EAE2 BDF72D           (        forth.asm):01623                 RFXT    jsr,TYPE+7      XT for TYPE
EAE5 3530             (        forth.asm):01624 (4+4)           puls    x,y             Restore loop parameters
EAE7 3001             (        forth.asm):01625 (4+1)           leax    1,x
EAE9 103712           (        forth.asm):01626 (4)             cmpr    x,y
EAEC 26E0             (        forth.asm):01627 (3)             bne     @indlop
EAEE 39               (        forth.asm):01628 (4)             rts
                      (        forth.asm):01629         
EAEF 05               (        forth.asm):01630         TICKS   fcb     5               Non-standard
EAF0 5449434B53       (        forth.asm):01631                 fcc     'TICKS'         ( -- tickslow tickshigh )
EAF5 EABB             (        forth.asm):01632                 fdb     INDEX
EAF7 C7               (        forth.asm):01633                 RFCS
                      (        forth.asm):01634                 IFNE    RTCFEAT
                      (        forth.asm):01635                 pshs    cc
                      (        forth.asm):01636                 orcc    #FFLAG          Mask FIRQ while reading the double cell
                      (        forth.asm):01637                 ldx     TIKSLOW
                      (        forth.asm):01638                 ldy     TIKSHI
                      (        forth.asm):01639                 puls    cc              Restore the previous interrupt handling mode
                      (        forth.asm):01640                 jsr     NPUSH
                      (        forth.asm):01641                 tfr     y,x
                      (        forth.asm):01642                 ELSE
EAF8 1FC1             (        forth.asm):01643 (4)             tfr     0,x
EAFA BDE7ED           (        forth.asm):01644 (7)             jsr     NPUSH
                      (        forth.asm):01645                 ENDC                    RTCFEAT
EAFD 7EE7ED           (        forth.asm):01646 (3)             jmp     NPUSH
                      (        forth.asm):01647         
EB00 04               (        forth.asm):01648         RTCFTCH fcb     4               Non-standard
EB01 52544340         (        forth.asm):01649                 fcc     'RTC@'          ( regoff -- byteval )
EB05 EAEF             (        forth.asm):01650                 fdb     TICKS
EB07 C7               (        forth.asm):01651                 RFCS
                      (        forth.asm):01652                 IFNE    RTCFEAT
                      (        forth.asm):01653                 tst     RTCAVL
                      (        forth.asm):01654                 beq     RTNOCON
                      (        forth.asm):01655         * An MC146818 RTC is present. Let's get down to business.
                      (        forth.asm):01656                 jsr     NPOP            REGOFF to X
                      (        forth.asm):01657                 tfr     x,d
                      (        forth.asm):01658                 tfr     b,a
                      (        forth.asm):01659                 jsr     RTREGRD
                      (        forth.asm):01660                 clra                    BYTEVAL to D
                      (        forth.asm):01661                 pshu    d               Unchecked NPUSH of D
                      (        forth.asm):01662                 rts
EB08                  (        forth.asm):01663         RTNOCON ldb     #17             RTC not detected on bootup -> I/O error
                      (        forth.asm):01664                 jsr     ERRHDLR         No return
                      (        forth.asm):01665                 ELSE
EB08 BDFC2C           (        forth.asm):01666                 RFXT    jsr,DROP+7      XT for DROP
EB0B 7EF92D           (        forth.asm):01667                 RFXT    jmp,ZEROL+4     XT for 0
                      (        forth.asm):01668                 ENDC                    RTCFEAT
                      (        forth.asm):01669         
EB0E 04               (        forth.asm):01670         RTCSTOR fcb     4               Non-standard
EB0F 52544321         (        forth.asm):01671                 fcc     'RTC!'          ( byteval regoff -- )
EB13 EB00             (        forth.asm):01672                 fdb     RTCFTCH
EB15 C7               (        forth.asm):01673                 RFCS
                      (        forth.asm):01674                 IFNE    RTCFEAT
                      (        forth.asm):01675                 tst     RTCAVL
                      (        forth.asm):01676                 beq     RTNOCON
                      (        forth.asm):01677                 jsr     MIN2PST         At least two cells need to be stacked up
                      (        forth.asm):01678                 lda     1,u             REGOFF to A
                      (        forth.asm):01679                 ldb     3,u             BYTEVAL to B
                      (        forth.asm):01680                 leau    4,u             Drop two cells from the data stack
                      (        forth.asm):01681                 jmp     RTREGWR
                      (        forth.asm):01682                 ELSE
EB16 7EF495           (        forth.asm):01683                 RFXT    jmp,TWODROP+8   XT for 2 DROP
                      (        forth.asm):01684                 ENDC                    RTCFEAT
                      (        forth.asm):01685         
EB19 04               (        forth.asm):01686         LIST    fcb     4               79-STANDARD (REQ109)
EB1A 4C495354         (        forth.asm):01687                 fcc     'LIST'          ( ublkno -- )
EB1E EB0E             (        forth.asm):01688                 fdb     RTCSTOR
EB20 C7               (        forth.asm):01689                 RFCS
EB21 0D3D             (        forth.asm):01690 (4)             tst     CFCARDP
EB23 2605             (        forth.asm):01691 (3)             bne     @lstpro
EB25 C611             (        forth.asm):01692 (2)             ldb     #17             IO error
EB27 BDE76A           (        forth.asm):01693 (7)             jsr     ERRHDLR         No return
EB2A BDFC1C           (        forth.asm):01694         @lstpro RFXT    jsr,DUP+6       XT for DUP
EB2D BDEA53           (        forth.asm):01695                 RFXT    jsr,BLOCK+8     XT for BLOCK
                      (        forth.asm):01696         * TOS now has the base buffer address.
EB30 BDE7FB           (        forth.asm):01697 (7)             jsr     NPOP
EB33 1F12             (        forth.asm):01698 (4)             tfr     x,y             Base buffer address to Y
EB35 BDE7FB           (        forth.asm):01699 (7)             jsr     NPOP            ublkno to X
EB38 9F26             (        forth.asm):01700 (4)             stx     USCR            Update SCR's value
EB3A C610             (        forth.asm):01701 (2)             ldb     #16             16 lines to go
EB3C 3404             (        forth.asm):01702 (4+1)   @lstlop pshs    b
EB3E BDE300           (        forth.asm):01703 (7)             jsr     PUTCR
EB41 1F21             (        forth.asm):01704 (4)             tfr     y,x
EB43 BDE7ED           (        forth.asm):01705 (7)             jsr     NPUSH           Start address for TYPE
EB46 8E0040           (        forth.asm):01706 (3)             ldx     #64
EB49 BDE7ED           (        forth.asm):01707 (7)             jsr     NPUSH           Byte count for TYPE
EB4C 103012           (        forth.asm):01708 (4)             addr    x,y
EB4F BDF72D           (        forth.asm):01709                 RFXT    jsr,TYPE+7      XT for TYPE
EB52 3504             (        forth.asm):01710 (4+1)           puls    b
EB54 5A               (        forth.asm):01711 (1)             decb
EB55 26E5             (        forth.asm):01712 (3)             bne     @lstlop
EB57 39               (        forth.asm):01713 (4)             rts
                      (        forth.asm):01714         
                      (        forth.asm):01715         * Convert a single cell to a double. Non-transactional.
EB58 03               (        forth.asm):01716         STOD    fcb     3               ANSI Core ( n -- d )
EB59 533E44           (        forth.asm):01717                 fcc     'S>D'
EB5C EB19             (        forth.asm):01718                 fdb     LIST
EB5E C7               (        forth.asm):01719                 RFCS
EB5F BDE7FB           (        forth.asm):01720 (7)             jsr     NPOP            N to X
EB62 3610             (        forth.asm):01721                 UCNPUSH                 Push back low order cell
EB64 104F             (        forth.asm):01722 (2)             clrd                    High order cell: default to N >= 0
EB66 1E01             (        forth.asm):01723 (5)             exg     d,x
EB68 4D               (        forth.asm):01724 (1)             tsta
EB69 102AFC80         (        forth.asm):01725 (5)             lbpl    NPUSH
EB6D 301F             (        forth.asm):01726 (4+1)           leax    -1,x            N is < 0. Sign extension is required. -1 to X
EB6F 7EE7ED           (        forth.asm):01727 (3)             jmp     NPUSH
                      (        forth.asm):01728         
EB72 04               (        forth.asm):01729         NCLR    fcb     4               Non-standard
EB73 4E434C52         (        forth.asm):01730                 fcc     'NCLR'          Clear the data (normal) stack
EB77 EB58             (        forth.asm):01731                 fdb     STOD
EB79 C7               (        forth.asm):01732                 RFCS
EB7A CE0296           (        forth.asm):01733 (3)             ldu     #NSTBOT
EB7D 39               (        forth.asm):01734 (4)             rts
                      (        forth.asm):01735         
EB7E 04               (        forth.asm):01736         RCLR    fcb     4               Non-standard
EB7F 52434C52         (        forth.asm):01737                 fcc     'RCLR'          Clear the return stack
EB83 EB72             (        forth.asm):01738                 fdb     NCLR
EB85 C7               (        forth.asm):01739                 RFCS
EB86 8E0316           (        forth.asm):01740 (3)             ldx     #RSTBOT
EB89 9F00             (        forth.asm):01741 (4)             stx     RSP
EB8B 0F2E             (        forth.asm):01742 (5)             clr     RDEPTH
EB8D 39               (        forth.asm):01743 (4)             rts
                      (        forth.asm):01744         
EB8E 05               (        forth.asm):01745         DEPTH   fcb     5               79-STANDARD (REQ238)
EB8F 4445505448       (        forth.asm):01746                 fcc     'DEPTH'
EB94 EB7E             (        forth.asm):01747                 fdb     RCLR
EB96 C7               (        forth.asm):01748                 RFCS
EB97 CC0296           (        forth.asm):01749 (3)             ldd     #NSTBOT         Bottom data stack address
EB9A 103230           (        forth.asm):01750 (4)             subr    u,d             D has the current value of the data stack ptr
EB9D 1044             (        forth.asm):01751 (2)             lsrd                    divided by 2
EB9F 1F01             (        forth.asm):01752 (4)             tfr     d,x
EBA1 7EE7ED           (        forth.asm):01753 (3)             jmp     NPUSH
                      (        forth.asm):01754         
EBA4 06               (        forth.asm):01755         CREATE  fcb     6               79-STANDARD (REQ239)
EBA5 435245415445     (        forth.asm):01756                 fcc     'CREATE'
EBAB EB8E             (        forth.asm):01757                 fdb     DEPTH
EBAD C7               (        forth.asm):01758                 RFCS
EBAE BDE517           (        forth.asm):01759 (7)             jsr     LOCWRT          Code entry point returned to Y
EBB1 868E             (        forth.asm):01760 (2)             lda     #LDXOPC         LDX immediate
EBB3 A7A0             (        forth.asm):01761 (4+1)           sta     ,y+
EBB5 1F21             (        forth.asm):01762 (4)             tfr     y,x
EBB7 3008             (        forth.asm):01763 (4+1)           leax    8,x
EBB9 AFA1             (        forth.asm):01764 (5+2)           stx     ,y++
EBBB 86BD             (        forth.asm):01765 (2)             lda     #JSROPC         JSR extended
EBBD BDE58C           (        forth.asm):01766 (7)             jsr     VARCON1         Compile JSR NPUSH
EBC0 8639             (        forth.asm):01767 (2)             lda     #RTSOPC         RTS inherent
EBC2 A7A0             (        forth.asm):01768 (4+1)           sta     ,y+
EBC4 3122             (        forth.asm):01769 (4+1)           leay    2,y             Reserve room for a possible DOES> clause
EBC6 109F08           (        forth.asm):01770 (5)     CREAT1  sty     DICEND
EBC9 9E0C             (        forth.asm):01771 (4)             ldx     BDICEND         This is set by LOCWRT (was IY)
EBCB 9F06             (        forth.asm):01772 (4)             stx     LSTWAD
EBCD 39               (        forth.asm):01773 (4)             rts
                      (        forth.asm):01774         
EBCE C5               (        forth.asm):01775         DOES    fcb     $C5             79-STANDARD (REQ168)
EBCF 444F45533E       (        forth.asm):01776                 fcc     'DOES>'
EBD4 EBA4             (        forth.asm):01777                 fdb     CREATE
EBD6 C7               (        forth.asm):01778                 RFCS
EBD7 8EEBDD           (        forth.asm):01779 (3)             ldx     #DOESEX         JSR #DOESEX is compiled (no actual return)
EBDA 7EE169           (        forth.asm):01780 (3)             jmp     EMXASXT         Set as action component
                      (        forth.asm):01781         
EBDD 9E06             (        forth.asm):01782 (4)     DOESEX  ldx     LSTWAD          Header of the last dictionary entry
EBDF E680             (        forth.asm):01783 (4+1)           ldb     ,x+
EBE1 C41F             (        forth.asm):01784 (2)             andb    #WRLNMSK        Extract word length
EBE3 3A               (        forth.asm):01785 (1)             abx
                      (        forth.asm):01786                 IFNE    RELFEAT
EBE4 3009             (        forth.asm):01787 (4+1)           leax    9,x             2 bytes/backlink, 1/cksum, 6 bytes code offset
                      (        forth.asm):01788                 ELSE
                      (        forth.asm):01789                 leax    8,x             2 bytes/backlink, 6 bytes code offset
                      (        forth.asm):01790                 ENDC                    RELFEAT
EBE6 A684             (        forth.asm):01791 (4+0)           lda     ,x
EBE8 8139             (        forth.asm):01792 (2)             cmpa    #RTSOPC         RTS inherent
EBEA 2705             (        forth.asm):01793 (3)             beq     @dosex1
EBEC C60E             (        forth.asm):01794 (2)             ldb     #14             No matching CREATE
EBEE BDE76A           (        forth.asm):01795 (7)             jsr     ERRHDLR         No return
EBF1 867E             (        forth.asm):01796 (2)     @dosex1 lda     #JMPOPC         JMP extended
EBF3 A780             (        forth.asm):01797 (4+1)           sta     ,x+             Overwrite RTS opcode
EBF5 3520             (        forth.asm):01798 (4+2)           puls    y
EBF7 10AF84           (        forth.asm):01799 (6+0)           sty     ,x
EBFA 39               (        forth.asm):01800 (4)             rts
                      (        forth.asm):01801         
EBFB 87               (        forth.asm):01802         LITERAL fcb     $87             79-STANDARD (REQ215)
EBFC 4C49544552414C   (        forth.asm):01803                 fcc     'LITERAL'
EC03 EBCE             (        forth.asm):01804                 fdb     DOES
EC05 C7               (        forth.asm):01805                 RFCS
EC06 BDE7FB           (        forth.asm):01806 (7)             jsr     NPOP
EC09 0D21             (        forth.asm):01807 (4)             tst     USTATE+1
EC0B 2601             (        forth.asm):01808 (3)             bne     @comp
EC0D 39               (        forth.asm):01809 (4)             rts                     The standard defines no semantics in interp mode
EC0E 109E08           (        forth.asm):01810 (5)     @comp   ldy     DICEND
EC11 868E             (        forth.asm):01811 (2)             lda     #LDXOPC         LDX immediate
EC13 BDE58F           (        forth.asm):01812 (7)             jsr     VARCON2         Compile LDX #X
EC16 109F08           (        forth.asm):01813 (5)             sty     DICEND          Update HERE
EC19 8EE7ED           (        forth.asm):01814 (3)             ldx     #NPUSH
EC1C 7EE169           (        forth.asm):01815 (3)             jmp     EMXASXT         Set NPUSH as action component
                      (        forth.asm):01816         
                      (        forth.asm):01817         * Functionally: : CONSTANT CREATE , DOES> @ ;
                      (        forth.asm):01818         * The following code produces more compact code.
EC1F 08               (        forth.asm):01819         CONS    fcb     8               79-STANDARD (REQ185)
EC20 434F4E5354414E54 (        forth.asm):01820                 fcc     'CONSTANT'
EC28 EBFB             (        forth.asm):01821                 fdb     LITERAL
EC2A C7               (        forth.asm):01822                 RFCS
EC2B BDE7FB           (        forth.asm):01823 (7)             jsr     NPOP
EC2E 1F16             (        forth.asm):01824 (4)             tfr     x,w
EC30 BDE517           (        forth.asm):01825 (7)             jsr     LOCWRT          Create dictionary entry
EC33 1F61             (        forth.asm):01826 (4)             tfr     w,x
EC35 868E             (        forth.asm):01827 (2)             lda     #LDXOPC         ldx immediate
EC37 BDE58F           (        forth.asm):01828 (7)             jsr     VARCON2         Compile LDX #CSTVAL
EC3A BDE58A           (        forth.asm):01829 (7)             jsr     VARCON          Compile JMP NPUSH
                      (        forth.asm):01830                 IFNE    RELFEAT
EC3D 8D87             (        forth.asm):01831 (6)             bsr     CREAT1
EC3F 2059             (        forth.asm):01832                 RFXT    bra,MONITOR+10  XT for MONITOR
                      (        forth.asm):01833                 ELSE
                      (        forth.asm):01834                 bra     CREAT1
                      (        forth.asm):01835                 ENDC                    RELFEAT
                      (        forth.asm):01836         
                      (        forth.asm):01837         * Functionally: : VARIABLE CREATE 2 ALLOT ;
                      (        forth.asm):01838         * However we can save three bytes per instance with the following code.
EC41 08               (        forth.asm):01839         VARI    fcb     8               79-STANDARD (REQ227)
EC42 5641524941424C45 (        forth.asm):01840                 fcc     'VARIABLE'
EC4A EC1F             (        forth.asm):01841                 fdb     CONS
EC4C C7               (        forth.asm):01842                 RFCS
EC4D BDE517           (        forth.asm):01843 (7)             jsr     LOCWRT
EC50 868E             (        forth.asm):01844 (2)             lda     #LDXOPC         ldx immediate
EC52 A7A0             (        forth.asm):01845 (4+1)           sta     ,y+
EC54 1F26             (        forth.asm):01846 (4)             tfr     y,w             Preserve Y (HERE)
EC56 3125             (        forth.asm):01847 (4+1)           leay    5,y             Relative variable address
EC58 1F21             (        forth.asm):01848 (4)             tfr     y,x
EC5A 1F62             (        forth.asm):01849 (4)             tfr     w,y             Restore Y (HERE)
EC5C AFA1             (        forth.asm):01850 (5+2)           stx     ,y++            Address field for LDX #VARADDR
EC5E BDE58A           (        forth.asm):01851 (7)             jsr     VARCON          Compile JMP NPUSH
EC61 3122             (        forth.asm):01852 (4+1)           leay    2,y             2 ALLOT
EC63 7EEBC6           (        forth.asm):01853 (3)             jmp     CREAT1
                      (        forth.asm):01854         
EC66 09               (        forth.asm):01855         IMMED   fcb     9               79-STANDARD (REQ103)
EC67 494D4D4544494154 (        forth.asm):01856                 fcc     'IMMEDIATE'
     45
EC70 EC41             (        forth.asm):01857                 fdb     VARI
EC72 C7               (        forth.asm):01858                 RFCS
EC73 C680             (        forth.asm):01859 (2)             ldb     #IMDFLM
EC75 9E06             (        forth.asm):01860 (4)     IMMED1  ldx     LSTWAD
EC77 A684             (        forth.asm):01861 (4+0)           lda     ,x
EC79 103598           (        forth.asm):01862 (4)             orr     b,a
EC7C A784             (        forth.asm):01863 (4+0)           sta     ,x
EC7E 39               (        forth.asm):01864 (4)             rts
                      (        forth.asm):01865         
EC7F 08               (        forth.asm):01866         RSTRCT  fcb     8               Non-standard (GNU Forth)
EC80 5245535452494354 (        forth.asm):01867                 fcc     'RESTRICT'      Make word available in compilation mode only
EC88 EC66             (        forth.asm):01868                 fdb     IMMED
EC8A C7               (        forth.asm):01869                 RFCS
EC8B C640             (        forth.asm):01870 (2)             ldb     #DEFFLM
EC8D 20E6             (        forth.asm):01871 (3)             bra     IMMED1
                      (        forth.asm):01872         
                      (        forth.asm):01873         * This non-standard word enables checkum monitoring by ICHECK for the
                      (        forth.asm):01874         * last defined word in the dictionary. : words are monitored by default
                      (        forth.asm):01875         * and so are constants. CREATEd words require an explicit invokation of
                      (        forth.asm):01876         * MONITOR if they are to be checked for integrity.
EC8F 07               (        forth.asm):01877         MONITOR fcb     7
EC90 4D4F4E49544F52   (        forth.asm):01878                 fcc     'MONITOR'       ( -- )
EC97 EC7F             (        forth.asm):01879                 fdb     RSTRCT
EC99 C7               (        forth.asm):01880                 RFCS
                      (        forth.asm):01881                 IFNE    RELFEAT
EC9A 9E06             (        forth.asm):01882 (4)             ldx     LSTWAD          Last word header address
EC9C A684             (        forth.asm):01883 (4+0)           lda     ,x
EC9E 8A20             (        forth.asm):01884 (2)             ora     #MONFLM         Set the monitored flag in the attribute field
ECA0 A784             (        forth.asm):01885 (4+0)           sta     ,x
ECA2 8D08             (        forth.asm):01886 (6)             bsr     HDRSKIP         Skip the header (XT to X), clear A
ECA4 109E08           (        forth.asm):01887 (5)             ldy     DICEND          The upper code section limit (excluded)
ECA7 8D0D             (        forth.asm):01888 (6)             bsr     HDRCSUM         Current word's definition's checksum to A
ECA9 A71F             (        forth.asm):01889 (4+1)           sta     -1,x            Store the computed checksum into the header
                      (        forth.asm):01890                 ENDC                    RELFEAT
ECAB 39               (        forth.asm):01891 (4)             rts
                      (        forth.asm):01892         
                      (        forth.asm):01893                 IFNE    RELFEAT
                      (        forth.asm):01894         * On entry, X has a word's header address. On return X has the compilation
                      (        forth.asm):01895         * address for that word (XT). A is cleared so as to initialize the checksum.
ECAC A684             (        forth.asm):01896 (4+0)   HDRSKIP lda     ,x              Word's header attribute byte to A
ECAE 841F             (        forth.asm):01897 (2)             anda    #WRLNMSK        Extract the word's length
ECB0 8B04             (        forth.asm):01898 (2)             adda    #4              1B attribute, 2B backlink, 1B checksum
ECB2 3086             (        forth.asm):01899 (4+1)           leax    a,x             X has the word's XT. -1,X has the orig checksum
ECB4 4F               (        forth.asm):01900 (1)             clra
ECB5 39               (        forth.asm):01901 (4)             rts
                      (        forth.asm):01902         
                      (        forth.asm):01903         * On entry X has a word's compilation address (XT). A is supposed to have been
                      (        forth.asm):01904         * previously cleared. Y has the upper bound of the code section's address
                      (        forth.asm):01905         * (excluded). On return, A will have the word's code section's checksum.
                      (        forth.asm):01906         * X is preserved.
ECB6 3410             (        forth.asm):01907 (4+2)   HDRCSUM pshs    x
ECB8 A880             (        forth.asm):01908 (4+1)   @hdrcs1 eora    ,x+             Update the checksum
ECBA 103712           (        forth.asm):01909 (4)             cmpr    x,y             Upper bound reached?
ECBD 26F9             (        forth.asm):01910 (3)             bne     @hdrcs1         No. Process next byte in word's code section
ECBF 3510             (        forth.asm):01911 (4+2)           puls    x
ECC1 39               (        forth.asm):01912 (4)             rts
                      (        forth.asm):01913         
ECC2 696E746567726974 (        forth.asm):01914         CSUMFLM fcn     'integrity check failed'
     7920636865636B20
     6661696C656400
                      (        forth.asm):01915                 ENDC                    RELFEAT
                      (        forth.asm):01916         
                      (        forth.asm):01917         * This non-standard word walks through the dictionary linked list and checks
                      (        forth.asm):01918         * that the words that have the MONFLM flag set in their header's attribute
                      (        forth.asm):01919         * field have a definition that still matches the checksum stored in the word's
                      (        forth.asm):01920         * header. This is meant to be used interactively, as a debugging tool, since
                      (        forth.asm):01921         * multitasking is not supported by this implementation. Therefore no status
                      (        forth.asm):01922         * value is returned. Feedback will only be provided for corrupted words, in
                      (        forth.asm):01923         * the form of a diagnostic message printed to the console.
ECD9 06               (        forth.asm):01924         ICHECK  fcb     6
ECDA 49434845434B     (        forth.asm):01925                 fcc     'ICHECK'        ( -- )
ECE0 EC8F             (        forth.asm):01926                 fdb     MONITOR
ECE2 C7               (        forth.asm):01927                 RFCS
                      (        forth.asm):01928                 IFNE    RELFEAT
ECE3 109E08           (        forth.asm):01929 (5)             ldy     DICEND          Upper bound for the code of the last word (exc.)
ECE6 9E06             (        forth.asm):01930 (4)             ldx     LSTWAD          LAST points to the header of the last word
ECE8 3410             (        forth.asm):01931 (4+2)   @icklop pshs    x               Current word's header address
ECEA A684             (        forth.asm):01932 (4+0)           lda     ,x              Word's header attribute byte to A
ECEC 8520             (        forth.asm):01933 (2)             bita    #MONFLM         Is this a monitored word?
ECEE 2726             (        forth.asm):01934 (3)             beq     @icknxt         No. Point to the next word
ECF0 8DBA             (        forth.asm):01935 (6)             bsr     HDRSKIP         Skip the header (XT to X), clear A
ECF2 8DC2             (        forth.asm):01936 (6)             bsr     HDRCSUM         Current word's definition's checksum to A
ECF4 A11F             (        forth.asm):01937 (4+1)           cmpa    -1,x            Does the checksum match the compile time value?
ECF6 271E             (        forth.asm):01938 (3)             beq     @icknxt         Yes. Point to the next word
                      (        forth.asm):01939         * Current word's definition has been modified since its original definition!
ECF8 BDE300           (        forth.asm):01940 (7)             jsr     PUTCR
ECFB AEE4             (        forth.asm):01941 (5+0)           ldx     ,s              Current word's header address
ECFD E680             (        forth.asm):01942 (4+1)           ldb     ,x+
ECFF C41F             (        forth.asm):01943 (2)             andb    #WRLNMSK
ED01 4F               (        forth.asm):01944 (1)             clra
ED02 BDE7ED           (        forth.asm):01945 (7)             jsr     NPUSH           Word's name base address
ED05 1F01             (        forth.asm):01946 (4)             tfr     d,x
ED07 BDE7ED           (        forth.asm):01947 (7)             jsr     NPUSH           Byte count for TYPE
ED0A BDF72D           (        forth.asm):01948                 RFXT    jsr,TYPE+7      XT for TYPE
ED0D BDF6DF           (        forth.asm):01949                 RFXT    jsr,SPACE+8     XT for SPACE
ED10 8EECC2           (        forth.asm):01950 (3)             ldx     #CSUMFLM
ED13 BDE2F3           (        forth.asm):01951 (7)             jsr     PUTS            Feedback for checksum failure
ED16 3510             (        forth.asm):01952 (4+2)   @icknxt puls    x               Current word's header address
ED18 1F12             (        forth.asm):01953 (4)             tfr     x,y             Point to the end of the previous word's code
ED1A 8D90             (        forth.asm):01954 (6)             bsr     HDRSKIP         Skip the header (XT to X), clear A
ED1C AE1D             (        forth.asm):01955 (5+1)           ldx     -3,x            Point to the previous header via the backlink
ED1E 2702             (        forth.asm):01956 (3)             beq     @ickdon         We've just reached the end of the dictionary
ED20 20C6             (        forth.asm):01957 (3)             bra     @icklop
                      (        forth.asm):01958                 ENDC                    RELFEAT
ED22 39               (        forth.asm):01959 (4)     @ickdon rts
                      (        forth.asm):01960         
ED23 C2               (        forth.asm):01961         DO      fcb     $C2             79-STANDARD (REQ142)
ED24 444F             (        forth.asm):01962                 fcc     'DO'
ED26 ECD9             (        forth.asm):01963                 fdb     ICHECK
ED28 C7               (        forth.asm):01964                 RFCS
ED29 8EED34           (        forth.asm):01965 (3)             ldx     #DOEX
ED2C BDE169           (        forth.asm):01966 (7)             jsr     EMXASXT         Compile "JSR DOEX"
ED2F 1F21             (        forth.asm):01967 (4)             tfr     y,x
ED31 7EE80A           (        forth.asm):01968 (3)             jmp     RPUSH           HERE to the control flow stack
                      (        forth.asm):01969         
ED34 BDFC37           (        forth.asm):01970         DOEX    RFXT    jsr,SWAP+7      XT for SWAP
ED37 BDF0A3           (        forth.asm):01971                 RFXT    jsr,TOR+5       XT for >R (limit)
ED3A 7EF0A3           (        forth.asm):01972                 RFXT    jmp,TOR+5       XT for >R (index)
                      (        forth.asm):01973         
ED3D C4               (        forth.asm):01974         LOOP    fcb     $C4             79-STANDARD (REQ124)
ED3E 4C4F4F50         (        forth.asm):01975                 fcc     'LOOP'
ED42 ED23             (        forth.asm):01976                 fdb     DO
ED44 C7               (        forth.asm):01977                 RFCS
ED45 8EED5C           (        forth.asm):01978 (3)             ldx     #LOOPEX
ED48 BDE169           (        forth.asm):01979 (7)     LOOP1   jsr     EMXASXT
ED4B 8E2503           (        forth.asm):01980 (3)             ldx     #BCSOPC         Compile "BCS *+5"
ED4E AFA1             (        forth.asm):01981 (5+2)           stx     ,y++
ED50 BDE828           (        forth.asm):01982 (7)             jsr     RPOP
ED53 867E             (        forth.asm):01983 (2)             lda     #JMPOPC
ED55 BDE58F           (        forth.asm):01984 (7)             jsr     VARCON2         Compile "JMP R@"
ED58 109F08           (        forth.asm):01985 (5)             sty     DICEND          No action component
ED5B 39               (        forth.asm):01986 (4)             rts
                      (        forth.asm):01987         
ED5C 8E0001           (        forth.asm):01988 (3)     LOOPEX  ldx     #1
ED5F 2011             (        forth.asm):01989 (3)             bra     PLOPEX1
                      (        forth.asm):01990         
ED61 C5               (        forth.asm):01991         PLOOP   fcb     $C5             79-STANDARD (REQ141)
ED62 2B4C4F4F50       (        forth.asm):01992                 fcc     '+LOOP'         The sign hdl reqs for REQ124 should apply though
ED67 ED3D             (        forth.asm):01993                 fdb     LOOP
ED69 C7               (        forth.asm):01994                 RFCS
ED6A 8EED6F           (        forth.asm):01995 (3)             ldx     #PLOOPEX
ED6D 20D9             (        forth.asm):01996 (3)             bra     LOOP1
                      (        forth.asm):01997         
ED6F BDE7FB           (        forth.asm):01998 (7)     PLOOPEX jsr     NPOP
ED72 1F16             (        forth.asm):01999 (4)     PLOPEX1 tfr     x,w             Increment to W
ED74 BDE828           (        forth.asm):02000 (7)             jsr     RPOP
ED77 1F12             (        forth.asm):02001 (4)             tfr     x,y             Index to Y
ED79 BDE828           (        forth.asm):02002 (7)             jsr     RPOP            Limit to X
ED7C 103062           (        forth.asm):02003 (4)             addr    w,y             Update index
ED7F 114D             (        forth.asm):02004 (2)             tste
ED81 2B10             (        forth.asm):02005 (3)             bmi     @neginc
ED83 103721           (        forth.asm):02006 (4)             cmpr    y,x
ED86 2F12             (        forth.asm):02007 (3)             ble     @done           We're done. Return With CFLAG set
ED88 BDE80A           (        forth.asm):02008 (7)     @iter   jsr     RPUSH           Push back the limit
ED8B 1F21             (        forth.asm):02009 (4)             tfr     y,x
ED8D BDE80A           (        forth.asm):02010 (7)             jsr     RPUSH           Push back the index
ED90 1CFE             (        forth.asm):02011 (2)             andcc   #^CFLAG         Clear CFLAG
ED92 39               (        forth.asm):02012 (4)             rts
ED93 103721           (        forth.asm):02013 (4)     @neginc cmpr    y,x
ED96 27F0             (        forth.asm):02014 (3)             beq     @iter           79-STANDARD irregular historical precedent
ED98 2BEE             (        forth.asm):02015 (3)             bmi     @iter
ED9A 1A01             (        forth.asm):02016 (2)     @done   orcc    #CFLAG          Set CFLAG
ED9C 39               (        forth.asm):02017 (4)             rts
                      (        forth.asm):02018         
ED9D 46               (        forth.asm):02019         UNLOOP  fcb     $46             ANSI (Core)
ED9E 554E4C4F4F50     (        forth.asm):02020                 fcc     'UNLOOP'
EDA4 ED61             (        forth.asm):02021                 fdb     PLOOP
EDA6 C7               (        forth.asm):02022                 RFCS
EDA7 BDE828           (        forth.asm):02023 (7)             jsr     RPOP            Drop the index from the return stack
EDAA 7EE828           (        forth.asm):02024 (3)             jmp     RPOP            and the loop limit as well
                      (        forth.asm):02025         
EDAD C2               (        forth.asm):02026         IF      fcb     $C2             79-STANDARD (REQ210)
EDAE 4946             (        forth.asm):02027                 fcc     'IF'
EDB0 ED9D             (        forth.asm):02028                 fdb     UNLOOP
EDB2 C7               (        forth.asm):02029                 RFCS
EDB3 8EEDCD           (        forth.asm):02030 (3)             ldx     #IFEX
EDB6 BDE169           (        forth.asm):02031 (7)             jsr     EMXASXT         Compile "JSR IFEX"
EDB9 8E2603           (        forth.asm):02032 (3)             ldx     #BNEOPC
EDBC AFA1             (        forth.asm):02033 (5+2)           stx     ,y++            Compile "BNE *+5"
EDBE 867E             (        forth.asm):02034 (2)             lda     #JMPOPC         JMP extended
EDC0 A7A0             (        forth.asm):02035 (4+1)           sta     ,y+             C,
EDC2 1F21             (        forth.asm):02036 (4)             tfr     y,x
EDC4 BDE80A           (        forth.asm):02037 (7)             jsr     RPUSH           HERE to the control stack (ANS:orig)
                      (        forth.asm):02038         * This cell contents is a forward reference that will be resolved by ELSE/THEN.
EDC7 3122             (        forth.asm):02039 (4+1)           leay    2,y
EDC9 109F08           (        forth.asm):02040 (5)             sty     DICEND          2 ALLOT
EDCC 39               (        forth.asm):02041 (4)             rts
                      (        forth.asm):02042         
EDCD BDE7FB           (        forth.asm):02043 (7)     IFEX    jsr     NPOP
EDD0 1037C1           (        forth.asm):02044 (4)             cmpr    0,x
EDD3 39               (        forth.asm):02045 (4)             rts
                      (        forth.asm):02046         
                      (        forth.asm):02047         * Functionally equivalent to:
                      (        forth.asm):02048         * : UNLESS POSTPONE 0= POSTPONE IF ; IMMEDIATE RESTRICT
EDD4 C6               (        forth.asm):02049         UNLESS  fcb     $C6             Non-standard (Perl inspired)
EDD5 554E4C455353     (        forth.asm):02050                 fcc     'UNLESS'
EDDB EDAD             (        forth.asm):02051                 fdb     IF
EDDD C7               (        forth.asm):02052                 RFCS
EDDE 8EEEFF           (        forth.asm):02053                 RFXT    ldx,#NULP+5     XT for 0=
EDE1 BDE169           (        forth.asm):02054 (7)             jsr     EMXASXT
EDE4 20CD             (        forth.asm):02055                 RFXT    bra,IF+5        XT for IF
                      (        forth.asm):02056         
EDE6 C4               (        forth.asm):02057         ELSE    fcb     $C4             79-STANDARD (REQ167)
EDE7 454C5345         (        forth.asm):02058                 fcc     'ELSE'
EDEB EDD4             (        forth.asm):02059                 fdb     UNLESS
EDED C7               (        forth.asm):02060                 RFCS
EDEE 109E08           (        forth.asm):02061 (5)             ldy     DICEND
EDF1 867E             (        forth.asm):02062 (2)             lda     #JMPOPC         JMP extended
EDF3 A7A0             (        forth.asm):02063 (4+1)           sta     ,y+
EDF5 3122             (        forth.asm):02064 (4+1)           leay    2,y
EDF7 109F08           (        forth.asm):02065 (5)             sty     DICEND
EDFA BDE828           (        forth.asm):02066 (7)             jsr     RPOP
EDFD 10AF84           (        forth.asm):02067 (6+0)           sty     ,x              Set actual ELSE jump address
EE00 1F21             (        forth.asm):02068 (4)             tfr     y,x
EE02 301E             (        forth.asm):02069 (4+1)           leax    -2,x
EE04 7EE80A           (        forth.asm):02070 (3)             jmp     RPUSH
                      (        forth.asm):02071         
EE07 C4               (        forth.asm):02072         THEN    fcb     $C4             79-STANDARD (REQ161)
EE08 5448454E         (        forth.asm):02073                 fcc     'THEN'
EE0C EDE6             (        forth.asm):02074                 fdb     ELSE
EE0E C7               (        forth.asm):02075                 RFCS
EE0F 109E08           (        forth.asm):02076 (5)             ldy     DICEND
EE12 BDE828           (        forth.asm):02077 (7)             jsr     RPOP
EE15 10AF84           (        forth.asm):02078 (6+0)           sty     ,x
EE18 39               (        forth.asm):02079 (4)             rts
                      (        forth.asm):02080         
EE19 01               (        forth.asm):02081         EQ      fcb     1               79-STANDARD (REQ173)
EE1A 3D               (        forth.asm):02082                 fcc     '='             ( N1 N2 -- FLAG )
EE1B EE07             (        forth.asm):02083                 fdb     THEN
EE1D C7               (        forth.asm):02084                 RFCS
EE1E BDE49A           (        forth.asm):02085 (7)             jsr     MIN2PST         At least two cells need to be stacked up
EE21 10ECC4           (        forth.asm):02086 (8+0)           ldq     ,u              D:W has N2:N1
EE24 3342             (        forth.asm):02087 (4+1)           leau    2,u             Drop one cell from the user stack
EE26 1FC1             (        forth.asm):02088 (4)             tfr     0,x
EE28 103760           (        forth.asm):02089 (4)             cmpr    w,d
EE2B 2602             (        forth.asm):02090 (3)             bne     @eq1
EE2D 3001             (        forth.asm):02091 (4+1)           leax    1,x
EE2F AFC4             (        forth.asm):02092 (5+0)   @eq1    stx     ,u              Store in place to FLAG
EE31 39               (        forth.asm):02093 (4)             rts
                      (        forth.asm):02094         
EE32 02               (        forth.asm):02095         DIFF    fcb     2               79-STANDARD (REF)
EE33 3C3E             (        forth.asm):02096                 fcc     '<>'            ( N1 N2 -- FLAG )
EE35 EE19             (        forth.asm):02097                 fdb     EQ
EE37 C7               (        forth.asm):02098                 RFCS
EE38 BDE49A           (        forth.asm):02099 (7)             jsr     MIN2PST         At least two cells need to be stacked up
EE3B 10ECC4           (        forth.asm):02100 (8+0)           ldq     ,u              D:W has N2:N1
EE3E 3342             (        forth.asm):02101 (4+1)           leau    2,u             Drop one cell from the user stack
EE40 1FC1             (        forth.asm):02102 (4)             tfr     0,x
EE42 103760           (        forth.asm):02103 (4)             cmpr    w,d
EE45 2702             (        forth.asm):02104 (3)             beq     @diff1
EE47 3001             (        forth.asm):02105 (4+1)           leax    1,x
EE49 AFC4             (        forth.asm):02106 (5+0)   @diff1  stx     ,u              Store in place to FLAG
EE4B 39               (        forth.asm):02107 (4)             rts
                      (        forth.asm):02108         
EE4C 02               (        forth.asm):02109         SINFEQ  fcb     2               Non-standard (Not even ANSI!)
EE4D 3C3D             (        forth.asm):02110                 fcc     '<='            Required for the ORNL fixed sieve benchmark
EE4F EE32             (        forth.asm):02111                 fdb     DIFF
EE51 C7               (        forth.asm):02112                 RFCS
EE52 BDE49A           (        forth.asm):02113 (7)             jsr     MIN2PST         At least two cells need to be stacked up
EE55 10AEC4           (        forth.asm):02114 (6+0)           ldy     ,u
EE58 AE42             (        forth.asm):02115 (5+1)           ldx     2,u
EE5A 104F             (        forth.asm):02116 (2)             clrd
EE5C 103721           (        forth.asm):02117 (4)             cmpr    y,x
EE5F 2E02             (        forth.asm):02118 (3)             bgt     @sinfq1
EE61 104C             (        forth.asm):02119 (2)             incd
EE63 3342             (        forth.asm):02120 (4+1)   @sinfq1 leau    2,u             Drop one cell
EE65 EDC4             (        forth.asm):02121 (5+0)           std     ,u
EE67 39               (        forth.asm):02122 (4)             rts
                      (        forth.asm):02123         
                      (        forth.asm):02124                 IFNE    DEBUG
EE68                  (        forth.asm):02125         CC      fcb     2               Non-standard. Used for debugging
                      (        forth.asm):02126                 fcc     'CC'
                      (        forth.asm):02127                 fdb     SINFEQ
                      (        forth.asm):02128                 RFCS
                      (        forth.asm):02129                 ldx     CCREG
                      (        forth.asm):02130                 jmp     NPUSH
                      (        forth.asm):02131                 ENDC                    DEBUG
                      (        forth.asm):02132         
EE68 03               (        forth.asm):02133         XOR     fcb     3               79-STANDARD (REQ179)
EE69 584F52           (        forth.asm):02134                 fcc     'XOR'
                      (        forth.asm):02135                 IFNE    DEBUG
                      (        forth.asm):02136                 fdb     CC
                      (        forth.asm):02137                 ELSE
EE6C EE4C             (        forth.asm):02138                 fdb     SINFEQ
                      (        forth.asm):02139                 ENDC                    DEBUG
EE6E C7               (        forth.asm):02140                 RFCS
EE6F BDE49A           (        forth.asm):02141 (7)             jsr     MIN2PST         At least two cells need to be stacked up
EE72 ECC4             (        forth.asm):02142 (5+0)           ldd     ,u
EE74 10A642           (        forth.asm):02143 (6+1)           ldw     2,u
EE77 103660           (        forth.asm):02144 (4)             eorr    w,d
EE7A 3342             (        forth.asm):02145 (4+1)   XOR1    leau    2,u
EE7C EDC4             (        forth.asm):02146 (5+0)           std     ,u
EE7E 39               (        forth.asm):02147 (4)             rts
                      (        forth.asm):02148         
EE7F 02               (        forth.asm):02149         OR      fcb     2               79-STANDARD (REQ223)
EE80 4F52             (        forth.asm):02150                 fcc     'OR'
EE82 EE68             (        forth.asm):02151                 fdb     XOR
EE84 C7               (        forth.asm):02152                 RFCS
EE85 BDE49A           (        forth.asm):02153 (7)             jsr     MIN2PST         At least two cells need to be stacked up
EE88 ECC4             (        forth.asm):02154 (5+0)           ldd     ,u
EE8A 10A642           (        forth.asm):02155 (6+1)           ldw     2,u
EE8D 103560           (        forth.asm):02156 (4)             orr     w,d
EE90 20E8             (        forth.asm):02157 (3)             bra     XOR1
                      (        forth.asm):02158         
EE92 03               (        forth.asm):02159         AND     fcb     3               79-STANDARD (REQ183)
EE93 414E44           (        forth.asm):02160                 fcc     'AND'
EE96 EE7F             (        forth.asm):02161                 fdb     OR
EE98 C7               (        forth.asm):02162                 RFCS
EE99 BDE49A           (        forth.asm):02163 (7)             jsr     MIN2PST         At least two cells need to be stacked up
EE9C ECC4             (        forth.asm):02164 (5+0)           ldd     ,u
EE9E 10A642           (        forth.asm):02165 (6+1)           ldw     2,u
EEA1 103460           (        forth.asm):02166 (4)             andr    w,d
EEA4 20D4             (        forth.asm):02167 (3)             bra     XOR1
                      (        forth.asm):02168         
EEA6 03               (        forth.asm):02169         COM     fcb     3               79-STANDARD (REF)
EEA7 434F4D           (        forth.asm):02170                 fcc     'COM'
EEAA EE92             (        forth.asm):02171                 fdb     AND
EEAC C7               (        forth.asm):02172                 RFCS
EEAD BDE7FB           (        forth.asm):02173 (7)     COM0    jsr     NPOP
EEB0 1F10             (        forth.asm):02174 (4)             tfr     x,d
EEB2 1043             (        forth.asm):02175 (2)             comd
EEB4 1F01             (        forth.asm):02176 (4)             tfr     d,x
EEB6 3610             (        forth.asm):02177                 UCNPUSH
EEB8 39               (        forth.asm):02178 (4)             rts
                      (        forth.asm):02179         
EEB9 06               (        forth.asm):02180         INVERT  fcb     6               ANSI (Core)
EEBA 494E56455254     (        forth.asm):02181                 fcc     'INVERT'
EEC0 EEA6             (        forth.asm):02182                 fdb     COM
EEC2 C7               (        forth.asm):02183                 RFCS
EEC3 20E8             (        forth.asm):02184 (3)             bra     COM0
                      (        forth.asm):02185         
EEC5 02               (        forth.asm):02186         ZGREAT  fcb     2               79-STANDARD (REQ118)
EEC6 303E             (        forth.asm):02187                 fcc     '0>'
EEC8 EEB9             (        forth.asm):02188                 fdb     INVERT
EECA C7               (        forth.asm):02189                 RFCS
EECB BDE7FB           (        forth.asm):02190 (7)             jsr     NPOP
EECE 1F10             (        forth.asm):02191 (4)             tfr     x,d
EED0 104D             (        forth.asm):02192 (2)             tstd
EED2 2F06             (        forth.asm):02193 (3)             ble     @zgrt1
EED4 8E0001           (        forth.asm):02194 (3)             ldx     #1
EED7 3610             (        forth.asm):02195                 UCNPUSH
EED9 39               (        forth.asm):02196 (4)             rts
EEDA 1FC1             (        forth.asm):02197 (4)     @zgrt1  tfr     0,x
EEDC 3610             (        forth.asm):02198                 UCNPUSH
EEDE 39               (        forth.asm):02199 (4)             rts
                      (        forth.asm):02200         
EEDF 02               (        forth.asm):02201         ZLESS   fcb     2               79-STANDARD (REQ144)
EEE0 303C             (        forth.asm):02202                 fcc     '0<'
EEE2 EEC5             (        forth.asm):02203                 fdb     ZGREAT
EEE4 C7               (        forth.asm):02204                 RFCS
EEE5 BDE7FB           (        forth.asm):02205 (7)             jsr     NPOP
EEE8 1F10             (        forth.asm):02206 (4)             tfr     x,d
EEEA 104D             (        forth.asm):02207 (2)             tstd
EEEC 2C06             (        forth.asm):02208 (3)             bge     @zlss1
EEEE 8E0001           (        forth.asm):02209 (3)             ldx     #1
EEF1 3610             (        forth.asm):02210                 UCNPUSH
EEF3 39               (        forth.asm):02211 (4)             rts
EEF4 1FC1             (        forth.asm):02212 (4)     @zlss1  tfr     0,x
EEF6 3610             (        forth.asm):02213                 UCNPUSH
EEF8 39               (        forth.asm):02214 (4)             rts
                      (        forth.asm):02215         
EEF9 02               (        forth.asm):02216         NULP    fcb     2               79-STANDARD (REQ180)
EEFA 303D             (        forth.asm):02217                 fcc     '0='
EEFC EEDF             (        forth.asm):02218                 fdb     ZLESS
EEFE C7               (        forth.asm):02219                 RFCS
EEFF BDE7FB           (        forth.asm):02220 (7)             jsr     NPOP
EF02 1F10             (        forth.asm):02221 (4)             tfr     x,d
EF04 1FC1             (        forth.asm):02222 (4)             tfr     0,x
EF06 104D             (        forth.asm):02223 (2)             tstd
EF08 2703             (        forth.asm):02224 (3)             beq     @nulp2
EF0A 3610             (        forth.asm):02225         @nulp1  UCNPUSH
EF0C 39               (        forth.asm):02226 (4)             rts
EF0D 3001             (        forth.asm):02227 (4+1)   @nulp2  leax    1,x
EF0F 20F9             (        forth.asm):02228 (3)             bra     @nulp1
                      (        forth.asm):02229         
EF11 03               (        forth.asm):02230         NOT     fcb     3               79-STANDARD (REQ165)
EF12 4E4F54           (        forth.asm):02231                 fcc     'NOT'
EF15 EEF9             (        forth.asm):02232                 fdb     NULP
EF17 C7               (        forth.asm):02233                 RFCS
EF18 20E5             (        forth.asm):02234                 RFXT    bra,NULP+5      XT for 0=
                      (        forth.asm):02235         
EF1A 02               (        forth.asm):02236         USUP    fcb     2               ANSI (Core Ext)
EF1B 553E             (        forth.asm):02237                 fcc     'U>'
EF1D EF11             (        forth.asm):02238                 fdb     NOT
EF1F C7               (        forth.asm):02239                 RFCS
EF20 BDE594           (        forth.asm):02240 (7)             jsr     CMP2
EF23 2302             (        forth.asm):02241 (3)             bls     @usup1
EF25 3001             (        forth.asm):02242 (4+1)           leax    1,x
EF27 3610             (        forth.asm):02243         @usup1  UCNPUSH
EF29 39               (        forth.asm):02244 (4)             rts
                      (        forth.asm):02245         
EF2A 02               (        forth.asm):02246         UINF    fcb     2               79-STANDARD (REQ150)
EF2B 553C             (        forth.asm):02247                 fcc     'U<'
EF2D EF1A             (        forth.asm):02248                 fdb     USUP
EF2F C7               (        forth.asm):02249                 RFCS
EF30 BDE594           (        forth.asm):02250 (7)             jsr     CMP2
EF33 2402             (        forth.asm):02251 (3)             bhs     @uinf1          Z is set
EF35 3001             (        forth.asm):02252 (4+1)           leax    1,x
EF37 3610             (        forth.asm):02253         @uinf1  UCNPUSH
EF39 39               (        forth.asm):02254 (4)             rts
                      (        forth.asm):02255         
                      (        forth.asm):02256         * Functionally: : WITHIN OVER - >R - R> U< ;
EF3A 06               (        forth.asm):02257         WITHIN  fcb     6               ANSI (Core)
EF3B 57495448494E     (        forth.asm):02258                 fcc     'WITHIN'        ( n1 n2 n3 -- flag )
EF41 EF2A             (        forth.asm):02259                 fdb     UINF
EF43 C7               (        forth.asm):02260                 RFCS
EF44 BDFC7D           (        forth.asm):02261                 RFXT    jsr,OVER+7      XT for OVER
EF47 BDF8FB           (        forth.asm):02262                 RFXT    jsr,MINUS+4     XT for -
EF4A BDF0A3           (        forth.asm):02263                 RFXT    jsr,TOR+5       XT for >R
EF4D BDF8FB           (        forth.asm):02264                 RFXT    jsr,MINUS+4     XT for -
EF50 BDF097           (        forth.asm):02265                 RFXT    jsr,RFROM+5     XT for R>
EF53 20DB             (        forth.asm):02266                 RFXT    bra,UINF+5      XT for U<
                      (        forth.asm):02267         
EF55 01               (        forth.asm):02268         SUP     fcb     1               79-STANDARD (REQ102)
EF56 3E               (        forth.asm):02269                 fcc     '>'
EF57 EF3A             (        forth.asm):02270                 fdb     WITHIN
EF59 C7               (        forth.asm):02271                 RFCS
EF5A BDE594           (        forth.asm):02272 (7)             jsr     CMP2
EF5D 2F02             (        forth.asm):02273 (3)             ble     @sup1
EF5F 3001             (        forth.asm):02274 (4+1)           leax    1,x
EF61 3610             (        forth.asm):02275         @sup1   UCNPUSH
EF63 39               (        forth.asm):02276 (4)             rts
                      (        forth.asm):02277         
EF64 01               (        forth.asm):02278         INF     fcb     1               79-STANDARD (REQ139)
EF65 3C               (        forth.asm):02279                 fcc     '<'
EF66 EF55             (        forth.asm):02280                 fdb     SUP
EF68 C7               (        forth.asm):02281                 RFCS
EF69 BDE594           (        forth.asm):02282 (7)             jsr     CMP2
EF6C 2C02             (        forth.asm):02283 (3)             bge     @inf1
EF6E 3001             (        forth.asm):02284 (4+1)           leax    1,x
EF70 3610             (        forth.asm):02285         @inf1   UCNPUSH
EF72 39               (        forth.asm):02286 (4)             rts
                      (        forth.asm):02287         
EF73 03               (        forth.asm):02288         MAX     fcb     3               79-STANDARD (REQ218)
EF74 4D4158           (        forth.asm):02289                 fcc     'MAX'
EF77 EF64             (        forth.asm):02290                 fdb     INF
EF79 C7               (        forth.asm):02291                 RFCS
EF7A BDE7FB           (        forth.asm):02292 (7)             jsr     NPOP
EF7D 1F12             (        forth.asm):02293 (4)             tfr     x,y
EF7F BDE7FB           (        forth.asm):02294 (7)             jsr     NPOP
EF82 103721           (        forth.asm):02295 (4)             cmpr    y,x
EF85 2C02             (        forth.asm):02296 (3)             bge     @pshrv1
EF87 1F21             (        forth.asm):02297 (4)             tfr     y,x
EF89 3610             (        forth.asm):02298         @pshrv1 UCNPUSH
EF8B 39               (        forth.asm):02299 (4)             rts
                      (        forth.asm):02300         
EF8C 03               (        forth.asm):02301         MIN     fcb     3               79-STANDARD (REQ127)
EF8D 4D494E           (        forth.asm):02302                 fcc     'MIN'
EF90 EF73             (        forth.asm):02303                 fdb     MAX
EF92 C7               (        forth.asm):02304                 RFCS
EF93 BDE7FB           (        forth.asm):02305 (7)             jsr     NPOP
EF96 1F12             (        forth.asm):02306 (4)             tfr     x,y
EF98 BDE7FB           (        forth.asm):02307 (7)             jsr     NPOP
EF9B 103721           (        forth.asm):02308 (4)             cmpr    y,x
EF9E 2F02             (        forth.asm):02309 (3)             ble     @pshrv2
EFA0 1F21             (        forth.asm):02310 (4)             tfr     y,x
EFA2 3610             (        forth.asm):02311         @pshrv2 UCNPUSH
EFA4 39               (        forth.asm):02312 (4)             rts
                      (        forth.asm):02313         
EFA5 03               (        forth.asm):02314         ABS     fcb     3               79-STANDARD (REQ108)
EFA6 414253           (        forth.asm):02315                 fcc     'ABS'
EFA9 EF8C             (        forth.asm):02316                 fdb     MIN
EFAB C7               (        forth.asm):02317                 RFCS
EFAC BDE7FB           (        forth.asm):02318 (7)             jsr     NPOP
EFAF 1F10             (        forth.asm):02319 (4)             tfr     x,d
EFB1 104D             (        forth.asm):02320 (2)             tstd
EFB3 2A04             (        forth.asm):02321 (3)             bpl     @abs1
EFB5 1040             (        forth.asm):02322 (2)             negd
EFB7 1F01             (        forth.asm):02323 (4)             tfr     d,x
EFB9 3610             (        forth.asm):02324         @abs1   UCNPUSH
EFBB 39               (        forth.asm):02325 (4)             rts
                      (        forth.asm):02326         
EFBC 06               (        forth.asm):02327         NEGATE  fcb     6               79-STANDARD (REQ177)
EFBD 4E4547415445     (        forth.asm):02328                 fcc     'NEGATE'
EFC3 EFA5             (        forth.asm):02329                 fdb     ABS
EFC5 C7               (        forth.asm):02330                 RFCS
EFC6 BDE495           (        forth.asm):02331 (7)             jsr     MIN1PST         At least one cell needs to be stacked up
EFC9 ECC4             (        forth.asm):02332 (5+0)           ldd     ,u
EFCB 1040             (        forth.asm):02333 (2)             negd
EFCD EDC4             (        forth.asm):02334 (5+0)           std     ,u
EFCF 39               (        forth.asm):02335 (4)             rts
                      (        forth.asm):02336         
EFD0 C5               (        forth.asm):02337         BEGIN   fcb     $C5             79-STANDARD (REQ147)
EFD1 424547494E       (        forth.asm):02338                 fcc     'BEGIN'
EFD6 EFBC             (        forth.asm):02339                 fdb     NEGATE
EFD8 C7               (        forth.asm):02340                 RFCS
EFD9 9E08             (        forth.asm):02341 (4)             ldx     DICEND          HERE is ANS:dest
EFDB 7EE80A           (        forth.asm):02342 (3)             jmp     RPUSH           to the control flow stack
                      (        forth.asm):02343         
EFDE C5               (        forth.asm):02344         AGAIN   fcb     $C5             79-STANDARD (REF114)
EFDF 414741494E       (        forth.asm):02345                 fcc     'AGAIN'
EFE4 EFD0             (        forth.asm):02346                 fdb     BEGIN
EFE6 C7               (        forth.asm):02347                 RFCS
EFE7 BDE828           (        forth.asm):02348 (7)             jsr     RPOP
EFEA 1F12             (        forth.asm):02349 (4)             tfr     x,y             ANS:dest from the control flow stack to Y
EFEC 9E08             (        forth.asm):02350 (4)             ldx     DICEND
EFEE 867E             (        forth.asm):02351 (2)             lda     #JMPOPC         JMP extended
EFF0 A780             (        forth.asm):02352 (4+1)           sta     ,x+
EFF2 10AF81           (        forth.asm):02353 (6+2)           sty     ,x++
EFF5 9F08             (        forth.asm):02354 (4)             stx     DICEND
EFF7 8602             (        forth.asm):02355 (2)             lda     #2
EFF9 9730             (        forth.asm):02356 (3)             sta     RTSREMV         Trigger the RTS removal optimization
EFFB 39               (        forth.asm):02357 (4)             rts
                      (        forth.asm):02358         
                      (        forth.asm):02359         # The standard does not require this as being immediate but I do.
EFFC C4               (        forth.asm):02360         EXIT    fcb     $C4             79-STANDARD (REQ117)
EFFD 45584954         (        forth.asm):02361                 fcc     'EXIT'
F001 EFDE             (        forth.asm):02362                 fdb     AGAIN
F003 C7               (        forth.asm):02363                 RFCS
F004 9E08             (        forth.asm):02364 (4)             ldx     DICEND
F006 301D             (        forth.asm):02365 (4+1)           leax    -3,x
F008 109E14           (        forth.asm):02366 (5)             ldy     JSRLAST
F00B 103721           (        forth.asm):02367 (4)             cmpr    y,x
F00E 2605             (        forth.asm):02368 (3)             bne     @noopt          Tail JMP optimization is not possible
F010 867E             (        forth.asm):02369 (2)             lda     #JMPOPC         JMP extended
F012 A784             (        forth.asm):02370 (4+0)           sta     ,x
F014 39               (        forth.asm):02371 (4)             rts
F015 3003             (        forth.asm):02372 (4+1)   @noopt  leax    3,x             Point back to HERE
F017 8639             (        forth.asm):02373 (2)             lda     #RTSOPC         RTS inherent
F019 A780             (        forth.asm):02374 (4+1)           sta     ,x+
F01B 9F08             (        forth.asm):02375 (4)             stx     DICEND
F01D 39               (        forth.asm):02376 (4)             rts
                      (        forth.asm):02377         
F01E C5               (        forth.asm):02378         UNTIL   fcb     $C5             79-STANDARD (REQ237)
F01F 554E54494C       (        forth.asm):02379                 fcc     'UNTIL'
F024 EFFC             (        forth.asm):02380                 fdb     EXIT
F026 C7               (        forth.asm):02381                 RFCS
F027 109E08           (        forth.asm):02382 (5)             ldy     DICEND
F02A 86BD             (        forth.asm):02383 (2)             lda     #JSROPC         JSR extended
F02C 8EEDCD           (        forth.asm):02384 (3)             ldx     #IFEX
F02F BDE155           (        forth.asm):02385 (7)             jsr     CHKRTS          Check if the final RTS can be omitted
F032 BDE58F           (        forth.asm):02386 (7)             jsr     VARCON2
F035 8E2603           (        forth.asm):02387 (3)             ldx     #BNEOPC         Compile "BNE *+5"
F038 AFA1             (        forth.asm):02388 (5+2)           stx     ,y++
F03A 867E             (        forth.asm):02389 (2)             lda     #JMPOPC         JMP extended
F03C A7A0             (        forth.asm):02390 (4+1)           sta     ,y+
F03E BDE828           (        forth.asm):02391 (7)             jsr     RPOP
F041 AFA1             (        forth.asm):02392 (5+2)           stx     ,y++
F043 109F08           (        forth.asm):02393 (5)             sty     DICEND
F046 39               (        forth.asm):02394 (4)             rts
                      (        forth.asm):02395         
F047 C5               (        forth.asm):02396         WHILE   fcb     $C5             79-STANDARD (REQ149)
F048 5748494C45       (        forth.asm):02397                 fcc     'WHILE'
F04D F01E             (        forth.asm):02398                 fdb     UNTIL
F04F C7               (        forth.asm):02399                 RFCS
F050 8EEDCD           (        forth.asm):02400 (3)             ldx     #IFEX
F053 BDE169           (        forth.asm):02401 (7)             jsr     EMXASXT         Compile "JSR IFEX"
F056 CC2603           (        forth.asm):02402 (3)             ldd     #BNEOPC
F059 EDA1             (        forth.asm):02403 (5+2)           std     ,y++            Compile "BNE *+5"
F05B 867E             (        forth.asm):02404 (2)             lda     #JMPOPC         JMP extended
F05D A7A0             (        forth.asm):02405 (4+1)           sta     ,y+
F05F BDE828           (        forth.asm):02406 (7)             jsr     RPOP            ANS:dest to X, Y has HERE (ANS:orig)
F062 1E21             (        forth.asm):02407 (5)             exg     y,x
F064 BDE80A           (        forth.asm):02408 (7)             jsr     RPUSH           ANS:orig to the return stack
F067 1E21             (        forth.asm):02409 (5)             exg     y,x
F069 BDE80A           (        forth.asm):02410 (7)             jsr     RPUSH           ANS:dest to the return stack
F06C 3122             (        forth.asm):02411 (4+1)           leay    2,y             2 ALLOT
F06E 109F08           (        forth.asm):02412 (5)             sty     DICEND
F071 39               (        forth.asm):02413 (4)             rts
                      (        forth.asm):02414         
F072 C6               (        forth.asm):02415         REPEAT  fcb     $C6             79-STANDARD (REQ120)
F073 524550454154     (        forth.asm):02416                 fcc     'REPEAT'
F079 F047             (        forth.asm):02417                 fdb     WHILE
F07B C7               (        forth.asm):02418                 RFCS
F07C BDE828           (        forth.asm):02419 (7)             jsr     RPOP            ANS:dest to X
F07F 109E08           (        forth.asm):02420 (5)             ldy     DICEND
F082 867E             (        forth.asm):02421 (2)             lda     #JMPOPC         JMP extended
F084 BDE58F           (        forth.asm):02422 (7)             jsr     VARCON2
F087 BDE828           (        forth.asm):02423 (7)             jsr     RPOP            ANS:orig
F08A 10AF84           (        forth.asm):02424 (6+0)           sty     ,x              Resolve ANS:orig to HERE
F08D 109F08           (        forth.asm):02425 (5)             sty     DICEND
F090 39               (        forth.asm):02426 (4)             rts
                      (        forth.asm):02427         
F091 42               (        forth.asm):02428         RFROM   fcb     $42             79-STANDARD (REQ110)
F092 523E             (        forth.asm):02429                 fcc     'R>'
F094 F072             (        forth.asm):02430                 fdb     REPEAT
F096 C7               (        forth.asm):02431                 RFCS
F097 BDE828           (        forth.asm):02432 (7)             jsr     RPOP
F09A 7EE7ED           (        forth.asm):02433 (3)             jmp     NPUSH
                      (        forth.asm):02434         
F09D 42               (        forth.asm):02435         TOR     fcb     $42             79-STANDARD (REQ200)
F09E 3E52             (        forth.asm):02436                 fcc     '>R'
F0A0 F091             (        forth.asm):02437                 fdb     RFROM
F0A2 C7               (        forth.asm):02438                 RFCS
F0A3 BDE7FB           (        forth.asm):02439 (7)             jsr     NPOP
F0A6 7EE80A           (        forth.asm):02440 (3)             jmp     RPUSH
                      (        forth.asm):02441         
F0A9 45               (        forth.asm):02442         LEAVE   fcb     $45             79-STANDARD (REQ213)
F0AA 4C45415645       (        forth.asm):02443                 fcc     'LEAVE'
F0AF F09D             (        forth.asm):02444                 fdb     TOR
F0B1 C7               (        forth.asm):02445                 RFCS
F0B2 BDE828           (        forth.asm):02446 (7)             jsr     RPOP
F0B5 BDE828           (        forth.asm):02447 (7)             jsr     RPOP
F0B8 BDE80A           (        forth.asm):02448 (7)             jsr     RPUSH
F0BB 7EE80A           (        forth.asm):02449 (3)             jmp     RPUSH
                      (        forth.asm):02450         
F0BE 41               (        forth.asm):02451         INDI    fcb     $41             79-STANDARD (REQ136)
F0BF 49               (        forth.asm):02452                 fcc     'I'
F0C0 F0A9             (        forth.asm):02453                 fdb     LEAVE
F0C2 C7               (        forth.asm):02454                 RFCS
F0C3 5F               (        forth.asm):02455 (1)             clrb
                      (        forth.asm):02456         * This is called ARPICKN because the argument in B on entry is expected
                      (        forth.asm):02457         * to be zero to refer to the top of the return stack. This is some sort
                      (        forth.asm):02458         * of F83/ANSI behaviour that one would not expect in a 79-STANDARD.
                      (        forth.asm):02459         * It makes the code slightly more compact.
F0C4 962E             (        forth.asm):02460 (3)     ARPICKN lda     RDEPTH
F0C6 103789           (        forth.asm):02461 (4)             cmpr    a,b
F0C9 240A             (        forth.asm):02462 (3)             bhs     @rpick1
F0CB 9E00             (        forth.asm):02463 (4)             ldx     RSP
F0CD 4F               (        forth.asm):02464 (1)             clra
F0CE 1048             (        forth.asm):02465 (2)             lsld                    Times 2
F0D0 AE8B             (        forth.asm):02466 (5+2)           ldx     d,x
F0D2 7EE7ED           (        forth.asm):02467 (3)             jmp     NPUSH           We cannot use UCNPUSH here
F0D5 C608             (        forth.asm):02468 (2)     @rpick1 ldb     #8              Return stack underflow
F0D7 BDE76A           (        forth.asm):02469 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02470         
F0DA 42               (        forth.asm):02471         RFETCH  fcb     $42             79-STANDARD (REQ228)
F0DB 5240             (        forth.asm):02472                 fcc     'R@'
F0DD F0BE             (        forth.asm):02473                 fdb     INDI
F0DF C7               (        forth.asm):02474                 RFCS
F0E0 20E1             (        forth.asm):02475                 RFXT    bra,INDI+4      XT for I
                      (        forth.asm):02476         
F0E2 42               (        forth.asm):02477         INDIP   fcb     $42             79-STANDARD (REF)
F0E3 4927             (        forth.asm):02478                 fdb     $4927
F0E5 F0DA             (        forth.asm):02479                 fdb     RFETCH
F0E7 C7               (        forth.asm):02480                 RFCS
F0E8 C601             (        forth.asm):02481 (2)             ldb     #1
F0EA 20D8             (        forth.asm):02482 (3)             bra     ARPICKN
                      (        forth.asm):02483         
F0EC 41               (        forth.asm):02484         INDJ    fcb     $41             79-STANDARD (REQ225)
F0ED 4A               (        forth.asm):02485                 fcc     'J'
F0EE F0E2             (        forth.asm):02486                 fdb     INDIP
F0F0 C7               (        forth.asm):02487                 RFCS
F0F1 C602             (        forth.asm):02488 (2)             ldb     #2
F0F3 20CF             (        forth.asm):02489 (3)             bra     ARPICKN
                      (        forth.asm):02490         
F0F5 42               (        forth.asm):02491         INDJP   fcb     $42             Non-standard
F0F6 4A27             (        forth.asm):02492                 fdb     $4A27
F0F8 F0EC             (        forth.asm):02493                 fdb     INDJ
F0FA C7               (        forth.asm):02494                 RFCS
F0FB C603             (        forth.asm):02495 (2)             ldb     #3
F0FD 20C5             (        forth.asm):02496 (3)             bra     ARPICKN
                      (        forth.asm):02497         
F0FF 41               (        forth.asm):02498         INDK    fcb     $41             79-STANDARD (REF)
F100 4B               (        forth.asm):02499                 fcc     'K'
F101 F0F5             (        forth.asm):02500                 fdb     INDJP
F103 C7               (        forth.asm):02501                 RFCS
F104 C604             (        forth.asm):02502 (2)             ldb     #4
F106 20BC             (        forth.asm):02503 (3)             bra     ARPICKN
                      (        forth.asm):02504         
F108 04               (        forth.asm):02505         QUIT    fcb     4               79-STANDARD (REQ211)
F109 51554954         (        forth.asm):02506                 fcc     'QUIT'
F10D F0FF             (        forth.asm):02507                 fdb     INDK
F10F C7               (        forth.asm):02508                 RFCS
F110 0F21             (        forth.asm):02509 (5)             clr     USTATE+1
F112 BDEB86           (        forth.asm):02510                 RFXT    jsr,RCLR+7      XT for RCLR
F115 10CE8000         (        forth.asm):02511 (4)             lds     #RAMSTRT+RAMSIZE Reset the system stack pointer
F119 BDE300           (        forth.asm):02512 (7)             jsr     PUTCR
F11C 7EE0B2           (        forth.asm):02513 (3)             jmp     INTERP
                      (        forth.asm):02514         
F11F 05               (        forth.asm):02515         ABORT   fcb     5               79-STANDARD (REQ101)
F120 41424F5254       (        forth.asm):02516                 fcc     'ABORT'
F125 F108             (        forth.asm):02517                 fdb     QUIT
F127 C7               (        forth.asm):02518                 RFCS
F128 BDEB7A           (        forth.asm):02519                 RFXT    jsr,NCLR+7      XT for NCLR
F12B C603             (        forth.asm):02520 (2)             ldb     #3
F12D BDE76A           (        forth.asm):02521 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02522         
F130 04               (        forth.asm):02523         FIND    fcb     4               79-STANDARD (REQ203)
F131 46494E44         (        forth.asm):02524                 fcc     'FIND'          ( -- XT )
F135 F11F             (        forth.asm):02525                 fdb     ABORT
F137 C7               (        forth.asm):02526                 RFCS
F138 1FC2             (        forth.asm):02527 (4)             tfr     0,y             Default return value is zero
F13A BDE841           (        forth.asm):02528 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
F13D 6D84             (        forth.asm):02529 (5+0)           tst     ,x
F13F 2711             (        forth.asm):02530 (3)             beq     @find1
F141 BDE38E           (        forth.asm):02531 (7)             jsr     SCNSTOK
F144 270C             (        forth.asm):02532 (3)             beq     @find1
F146 BDE4A9           (        forth.asm):02533 (7)             jsr     SWDIC
F149 DC0E             (        forth.asm):02534 (4)             ldd     PLOAD           Retrieve word payload
F14B DD10             (        forth.asm):02535 (4)             std     FNDPLD          Make it accessible through PAYLOAD
F14D DC04             (        forth.asm):02536 (4)             ldd     TOKENEP
F14F BDE177           (        forth.asm):02537 (7)             jsr     U2INFRD         Derive >IN from D
F152 1F21             (        forth.asm):02538 (4)     @find1  tfr     y,x
F154 7EE7ED           (        forth.asm):02539 (3)             jmp     NPUSH
                      (        forth.asm):02540         
F157 01               (        forth.asm):02541         RBRACK  fcb     1               79-STANDARD (REQ126)
F158 5D               (        forth.asm):02542                 fcc     ']'
F159 F130             (        forth.asm):02543                 fdb     FIND
F15B C7               (        forth.asm):02544                 RFCS
F15C 8601             (        forth.asm):02545 (2)             lda     #1
F15E 9721             (        forth.asm):02546 (3)             sta     USTATE+1
F160 39               (        forth.asm):02547 (4)             rts
                      (        forth.asm):02548         
                      (        forth.asm):02549         * Note: the standard does not mandate that this primitive be executed in
                      (        forth.asm):02550         * definitions only. IMHO, it ought to, therefore I am forcing the C bit here.
F161 C1               (        forth.asm):02551         LBRACK  fcb     $C1             79-STANDARD (REQ125)
F162 5B               (        forth.asm):02552                 fcc     '['
F163 F157             (        forth.asm):02553                 fdb     RBRACK
F165 C7               (        forth.asm):02554                 RFCS
F166 0F21             (        forth.asm):02555 (5)             clr     USTATE+1
F168 39               (        forth.asm):02556 (4)             rts
                      (        forth.asm):02557         
                      (        forth.asm):02558         * Functionally: : ['] FIND POSTPONE LITERAL ; IMMEDIATE RESTRICT
F169 C3               (        forth.asm):02559         BKQUOT  fcb     $C3             ANSI (Core)
F16A 5B275D           (        forth.asm):02560                 fcb     $5B,$27,$5D
F16D F161             (        forth.asm):02561                 fdb     LBRACK
F16F C7               (        forth.asm):02562                 RFCS
F170 8DC6             (        forth.asm):02563                 RFXT    bsr,FIND+7      XT for FIND
                      (        forth.asm):02564         * Data stack topmost cell has the target word address.
F172 7EEC06           (        forth.asm):02565                 RFXT    jmp,LITERAL+10  XT for LITERAL
                      (        forth.asm):02566         
F175 C8               (        forth.asm):02567         POSTPON fcb     $C8             ANSI (Core)
F176 504F5354504F4E45 (        forth.asm):02568                 fcc     'POSTPONE'      Not a straight alias to [COMPILE]
F17E F169             (        forth.asm):02569                 fdb     BKQUOT          Non-immediate words deserve special treatment
F180 C7               (        forth.asm):02570                 RFCS
F181 BDE841           (        forth.asm):02571 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
F184 6D84             (        forth.asm):02572 (5+0)           tst     ,x
F186 2605             (        forth.asm):02573 (3)             bne     @postp2
F188 C605             (        forth.asm):02574 (2)     @postp1 ldb     #5              Missing word name
F18A BDE76A           (        forth.asm):02575 (7)             jsr     ERRHDLR         No return
F18D BDE38E           (        forth.asm):02576 (7)     @postp2 jsr     SCNSTOK
F190 27F6             (        forth.asm):02577 (3)             beq     @postp1
F192 BDE4A9           (        forth.asm):02578 (7)             jsr     SWDIC
F195 2607             (        forth.asm):02579 (3)             bne     @postp3         Word found. Code address returned in Y
F197 9E02             (        forth.asm):02580 (4)             ldx     TOKENSP
F199 C602             (        forth.asm):02581 (2)             ldb     #2              Undefined (X points to the offending word)
F19B BDE76A           (        forth.asm):02582 (7)             jsr     ERRHDLR         No return
F19E 1F21             (        forth.asm):02583 (4)     @postp3 tfr     y,x             X has the actual execution token
F1A0 0D39             (        forth.asm):02584 (4)             tst     IMDFLG
F1A2 2708             (        forth.asm):02585 (3)             beq     @postp5         Target word is not immediate
F1A4 BDE169           (        forth.asm):02586 (7)     @postp4 jsr     EMXASXT         Set as action component
F1A7 DC02             (        forth.asm):02587 (4)             ldd     TOKENSP         Updated by SWDIC if the word was found
F1A9 7EE177           (        forth.asm):02588 (3)             jmp     U2INFRD         Derive >IN from D
                      (        forth.asm):02589         * The word being considered is non-immediate. The equivalent input should be:
                      (        forth.asm):02590         * ['] <word> COMPILE, We have the XT for <word> in X.
F1AC BDE578           (        forth.asm):02591 (7)     @postp5 jsr     LITER
F1AF 8EF1C0           (        forth.asm):02592                 RFXT    ldx,#CMPCOMA+11 XT for COMPILE,
F1B2 20F0             (        forth.asm):02593 (3)             bra     @postp4
                      (        forth.asm):02594         
                      (        forth.asm):02595         * Like the 79-STANDARD COMPILE word, GNU Forth has this as a compile-only word.
                      (        forth.asm):02596         * This is a wise choice since it allows us to possibly optimize it.
F1B4 48               (        forth.asm):02597         CMPCOMA fcb     $48             ANSI (Core Ext)
F1B5 434F4D50494C452C (        forth.asm):02598                 fcc     'COMPILE,'      ( XT -- )
F1BD F175             (        forth.asm):02599                 fdb     POSTPON
F1BF C7               (        forth.asm):02600                 RFCS
F1C0 BDE7FB           (        forth.asm):02601 (7)             jsr     NPOP            Execution token to X
F1C3 7EE169           (        forth.asm):02602 (3)             jmp     EMXASXT
                      (        forth.asm):02603         
                      (        forth.asm):02604         * As per the standard, : is not immediate. This allows for further interesting
                      (        forth.asm):02605         * developments, like tracing words execution...
F1C6 01               (        forth.asm):02606         COMPC   fcb     $1              79-STANDARD (REQ116)
F1C7 3A               (        forth.asm):02607                 fcc     ':'
F1C8 F1B4             (        forth.asm):02608                 fdb     CMPCOMA
F1CA C7               (        forth.asm):02609                 RFCS
F1CB 8601             (        forth.asm):02610 (2)             lda     #1
F1CD 9721             (        forth.asm):02611 (3)             sta     USTATE+1
F1CF 104F             (        forth.asm):02612 (2)             clrd
F1D1 DD14             (        forth.asm):02613 (4)             std     JSRLAST
F1D3 8602             (        forth.asm):02614 (2)             lda     #2
F1D5 9730             (        forth.asm):02615 (3)             sta     RTSREMV         Optimistic strategy: remove the final RTS
F1D7 962E             (        forth.asm):02616 (3)             lda     RDEPTH
F1D9 972F             (        forth.asm):02617 (3)             sta     IRDPTH          Meant to check for unbalanced constructs
F1DB 7EE517           (        forth.asm):02618 (3)             jmp     LOCWRT
                      (        forth.asm):02619         
F1DE C1               (        forth.asm):02620         COMPR   fcb     $C1             79-STANDARD (REQ196)
F1DF 3B               (        forth.asm):02621                 fcc     ';'
F1E0 F1C6             (        forth.asm):02622                 fdb     COMPC
F1E2 C7               (        forth.asm):02623                 RFCS
F1E3 962E             (        forth.asm):02624 (3)             lda     RDEPTH          Return stack depth
F1E5 912F             (        forth.asm):02625 (3)             cmpa    IRDPTH          Same as when : was entered?
F1E7 2705             (        forth.asm):02626 (3)             beq     @compr1
F1E9 C609             (        forth.asm):02627 (2)             ldb     #9              Illegal construct if not
F1EB BDE76A           (        forth.asm):02628 (7)             jsr     ERRHDLR         No return
F1EE 0F21             (        forth.asm):02629 (5)     @compr1 clr     USTATE+1        Back to interpretation mode
F1F0 9E0C             (        forth.asm):02630 (4)             ldx     BDICEND
F1F2 9F06             (        forth.asm):02631 (4)             stx     LSTWAD          Update LAST
F1F4 9E08             (        forth.asm):02632 (4)             ldx     DICEND
                      (        forth.asm):02633         * Optimization: replace the last JSR by a JMP, if possible.
F1F6 DC14             (        forth.asm):02634 (4)             ldd     JSRLAST
F1F8 2712             (        forth.asm):02635 (3)             beq     @compr3         We need an RTS
F1FA 301D             (        forth.asm):02636 (4+1)           leax    -3,x
F1FC 9C14             (        forth.asm):02637 (4)             cmpx    JSRLAST
F1FE 2604             (        forth.asm):02638 (3)             bne     @compr2
F200 867E             (        forth.asm):02639 (2)             lda     #JMPOPC         JMP extended
F202 A784             (        forth.asm):02640 (4+0)           sta     ,x
                      (        forth.asm):02641         * At this point we still have to emit an RTS unless RTSREMV is 2 or more.
F204 3003             (        forth.asm):02642 (4+1)   @compr2 leax    3,x
F206 9630             (        forth.asm):02643 (3)             lda     RTSREMV
F208 8102             (        forth.asm):02644 (2)             cmpa    #2
F20A 2404             (        forth.asm):02645 (3)             bhs     @compr4         Optimization applies. We have no forward refs
F20C 8639             (        forth.asm):02646 (2)     @compr3 lda     #RTSOPC         RTS inherent
F20E A780             (        forth.asm):02647 (4+1)           sta     ,x+
F210                  (        forth.asm):02648         @compr4
                      (        forth.asm):02649                 IFNE    DEBUG
                      (        forth.asm):02650                 lda     #ILLOPC         Illegal opcode
                      (        forth.asm):02651                 sta     ,x+
                      (        forth.asm):02652                 ENDC                    DEBUG
F210 9F08             (        forth.asm):02653 (4)             stx     DICEND          Update HERE
                      (        forth.asm):02654                 IFNE    RELFEAT
F212 BDEC9A           (        forth.asm):02655                 RFXT    jsr,MONITOR+10  XT for MONITOR. All : words are candidates
                      (        forth.asm):02656         *                               for integrity check by ICHECK.
                      (        forth.asm):02657                 ENDC                    RELFEAT
F215 39               (        forth.asm):02658 (4)             rts
                      (        forth.asm):02659         
F216 C7               (        forth.asm):02660         RECURSE fcb     $C7             FORTH-83
F217 52454355525345   (        forth.asm):02661                 fcc     'RECURSE'
F21E F1DE             (        forth.asm):02662                 fdb     COMPR
F220 C7               (        forth.asm):02663                 RFCS
F221 9E12             (        forth.asm):02664 (4)             ldx     RECADDR         Set up by LOCWRT
F223 7EE169           (        forth.asm):02665 (3)             jmp     EMXASXT         Set as action component
                      (        forth.asm):02666         
F226 06               (        forth.asm):02667         FORGET  fcb     6               79-STANDARD (REQ196)
F227 464F52474554     (        forth.asm):02668                 fcc     'FORGET'
F22D F216             (        forth.asm):02669                 fdb     RECURSE
F22F C7               (        forth.asm):02670                 RFCS
F230 BDE841           (        forth.asm):02671 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
F233 6D84             (        forth.asm):02672 (5+0)           tst     ,x              EOL?
F235 2605             (        forth.asm):02673 (3)             bne     @frgt2          No
F237 C605             (        forth.asm):02674 (2)     @frgt1  ldb     #5              Missing word name
F239 BDE76A           (        forth.asm):02675 (7)             jsr     ERRHDLR         No return
F23C BDE38E           (        forth.asm):02676 (7)     @frgt2  jsr     SCNSTOK
F23F 27F6             (        forth.asm):02677 (3)             beq     @frgt1          EOL before a non-SP character could be acquired
F241 BDE4A9           (        forth.asm):02678 (7)             jsr     SWDIC           SWDIC uses TOKENSP as input--not X!!
F244 2607             (        forth.asm):02679 (3)             bne     @frgt3          Word found. XT returned in Y
F246 9E02             (        forth.asm):02680 (4)             ldx     TOKENSP
F248 C602             (        forth.asm):02681 (2)             ldb     #2              Undefined (X points to the offending word)
F24A BDE76A           (        forth.asm):02682 (7)             jsr     ERRHDLR         No return
F24D 1F21             (        forth.asm):02683 (4)     @frgt3  tfr     y,x             Y and X have the word's XT
F24F 108C0C65         (        forth.asm):02684 (4)             cmpy    #RAMFTCH
F253 2719             (        forth.asm):02685 (3)             beq     @frgt4
F255 108CE000         (        forth.asm):02686 (4)             cmpy    #ROMSTRT
F259 2413             (        forth.asm):02687 (3)             bhs     @frgt4
                      (        forth.asm):02688                 IFNE    RELFEAT
F25B AE1D             (        forth.asm):02689 (5+1)           ldx     -3,x            Backlink to X
F25D 9F06             (        forth.asm):02690 (4)             stx     LSTWAD          Update LAST
F25F 303C             (        forth.asm):02691 (4+1)           leax    -4,y            XT-4 to X (1B/attr, 2B/backlink, 1B/checksum)
                      (        forth.asm):02692                 ELSE
                      (        forth.asm):02693                 ldx     -2,x            Backlink to X
                      (        forth.asm):02694                 stx     LSTWAD          Update LAST
                      (        forth.asm):02695                 leax    -3,y            XT-3 to X (1B/attr, 2B/backlink)
                      (        forth.asm):02696                 ENDC                    RELFEAT
F261 4F               (        forth.asm):02697 (1)             clra
F262 D638             (        forth.asm):02698 (3)             ldb     CURTOKL         Token name length to D
F264 103201           (        forth.asm):02699 (4)             subr    d,x             Substract word length
F267 9F08             (        forth.asm):02700 (4)             stx     DICEND          Update HERE
F269 DC02             (        forth.asm):02701 (4)             ldd     TOKENSP         Set by SWDIC to point to the end of the token
F26B 7EE177           (        forth.asm):02702 (3)             jmp     U2INFRD         Derive >IN from D
F26E C60B             (        forth.asm):02703 (2)     @frgt4  ldb     #11             Word is unforgettable
F270 BDE76A           (        forth.asm):02704 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02705         
F273 07               (        forth.asm):02706         EXCT    fcb     7               79-STANDARD (REQ163)
F274 45584543555445   (        forth.asm):02707                 fcc     'EXECUTE'
F27B F226             (        forth.asm):02708                 fdb     FORGET
F27D C7               (        forth.asm):02709                 RFCS
F27E BDE7FB           (        forth.asm):02710 (7)             jsr     NPOP
F281 1037C1           (        forth.asm):02711 (4)             cmpr    0,x             Although the standard does not specify that
F284 2702             (        forth.asm):02712 (3)             beq     @exct1          a NUL address should trigger an error, I do
F286 1F15             (        forth.asm):02713 (4)             tfr     x,pc
F288 C60D             (        forth.asm):02714 (2)     @exct1  ldb     #13             Illegal argument
F28A BDE76A           (        forth.asm):02715 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02716         
F28D 03               (        forth.asm):02717         BYE     fcb     3               ANSI (Programming tools)
F28E 425945           (        forth.asm):02718                 fcc     'BYE'
F291 F273             (        forth.asm):02719                 fdb     EXCT
F293 C7               (        forth.asm):02720                 RFCS
                      (        forth.asm):02721                 IFNE    RTCFEAT
                      (        forth.asm):02722                 lda     #RTOREGB
                      (        forth.asm):02723                 jsr     RTREGRD         RTCB register to B
                      (        forth.asm):02724                 andb    #^RTBPIE        Disable periodic interrupt generation
                      (        forth.asm):02725                 jsr     RTREGWR
                      (        forth.asm):02726                 ldx     #40
                      (        forth.asm):02727                 jsr     MILLIS1         Wait for 40 milliseconds
                      (        forth.asm):02728                 orcc    #(FFLAG|IFLAG)  Disable maskable interrupts
                      (        forth.asm):02729                 ENDC                    RTCFEAT
F294 7EE037           (        forth.asm):02730 (3)             jmp     RSTHDL
                      (        forth.asm):02731         
F297 C6               (        forth.asm):02732         BKCHAR  fcb     $C6             ANSI (Core)
F298 5B434841525D     (        forth.asm):02733                 fcc     '[CHAR]'
F29E F28D             (        forth.asm):02734                 fdb     BYE
F2A0 C7               (        forth.asm):02735                 RFCS
F2A1 8D0B             (        forth.asm):02736                 RFXT    bsr,CHAR+7      XT for CHAR
F2A3 7EEC06           (        forth.asm):02737                 RFXT    jmp,LITERAL+10  XT for LITERAL
                      (        forth.asm):02738         
F2A6 04               (        forth.asm):02739         CHAR    fcb     4               ANSI (Core)
F2A7 43484152         (        forth.asm):02740                 fcc     'CHAR'
F2AB F297             (        forth.asm):02741                 fdb     BKCHAR
F2AD C7               (        forth.asm):02742                 RFCS
F2AE BDE841           (        forth.asm):02743 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
F2B1 BDE38E           (        forth.asm):02744 (7)     @char1  jsr     SCNSTOK         X points to the beginning of the character
F2B4 2712             (        forth.asm):02745 (3)             beq     @chrerr
F2B6 E684             (        forth.asm):02746 (4+0)           ldb     ,x
F2B8 4F               (        forth.asm):02747 (1)             clra
F2B9 1F01             (        forth.asm):02748 (4)             tfr     d,x
F2BB BDE7ED           (        forth.asm):02749 (7)             jsr     NPUSH
F2BE 9E02             (        forth.asm):02750 (4)             ldx     TOKENSP         Set by SCNSTOK
F2C0 BDE39C           (        forth.asm):02751 (7)             jsr     SCNETOK
F2C3 1F10             (        forth.asm):02752 (4)             tfr     x,d             TOKENEP
F2C5 7EE177           (        forth.asm):02753 (3)             jmp     U2INFRD         Derive >IN from D
F2C8 C60D             (        forth.asm):02754 (2)     @chrerr ldb     #13             Illegal argument
F2CA BDE76A           (        forth.asm):02755 (7)             jsr     ERRHDLR
                      (        forth.asm):02756         * No return.
                      (        forth.asm):02757         
                      (        forth.asm):02758         * Hairy code but working.
F2CD 04               (        forth.asm):02759         WORD    fcb     4               79-STANDARD (REQ181)
F2CE 574F5244         (        forth.asm):02760                 fcc     'WORD'          ( char -- addr )
F2D2 F2A6             (        forth.asm):02761                 fdb     CHAR
F2D4 C7               (        forth.asm):02762                 RFCS
F2D5 BDE7FB           (        forth.asm):02763 (7)             jsr     NPOP
F2D8 1F16             (        forth.asm):02764 (4)             tfr     x,w             F has the delimiter ASCII code
F2DA 109E08           (        forth.asm):02765 (5)             ldy     DICEND          The counted string returned is stored at HERE
F2DD 3420             (        forth.asm):02766 (4+2)           pshs    y
F2DF 6FA0             (        forth.asm):02767 (6+1)           clr     ,y+             Initialize its length
F2E1 BDE841           (        forth.asm):02768 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
F2E4 6D84             (        forth.asm):02769 (5+0)           tst     ,x              EOL reached?
F2E6 2605             (        forth.asm):02770 (3)             bne     @word1          No, proceed
F2E8 3510             (        forth.asm):02771 (4+2)   @word0  puls    x
F2EA 3610             (        forth.asm):02772                 UCNPUSH                 Push back HERE
F2EC 39               (        forth.asm):02773 (4)             rts
F2ED 3001             (        forth.asm):02774 (4+1)   @word1  leax    1,x             Skip space character after WORD or leading delim
F2EF A684             (        forth.asm):02775 (4+0)           lda     ,x
F2F1 2716             (        forth.asm):02776 (3)             beq     @word5          EOL reached, this is the end
F2F3 1037F8           (        forth.asm):02777 (4)             cmpr    f,a             Leading delimiter matched?
F2F6 27F5             (        forth.asm):02778 (3)             beq     @word1          Yes
F2F8 A680             (        forth.asm):02779 (4+1)   @word2  lda     ,x+             Acquire next character from the input stream
F2FA A7A0             (        forth.asm):02780 (4+1)   @word3  sta     ,y+
F2FC 2709             (        forth.asm):02781 (3)             beq     @word4          EOL reached
F2FE 1037F8           (        forth.asm):02782 (4)             cmpr    f,a             Trailing delimiter?
F301 2706             (        forth.asm):02783 (3)             beq     @word5
F303 6CF4             (        forth.asm):02784 (6+3)           inc     [,s]            Increment string length
F305 20F1             (        forth.asm):02785 (3)             bra     @word2
F307 301F             (        forth.asm):02786 (4+1)   @word4  leax    -1,x            EOL reached
F309 1F10             (        forth.asm):02787 (4)     @word5  tfr     x,d             Pointing one char after the delimiter or to NUL
F30B BDE177           (        forth.asm):02788 (7)             jsr     U2INFRD         Derive >IN from D
F30E 20D8             (        forth.asm):02789 (3)             bra     @word0
                      (        forth.asm):02790         
F310 81               (        forth.asm):02791         LPAR    fcb     $81             79-STANDARD (REQ122)
F311 28               (        forth.asm):02792                 fcc     '('
F312 F2CD             (        forth.asm):02793                 fdb     WORD
F314 C7               (        forth.asm):02794                 RFCS
F315 BDE841           (        forth.asm):02795 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
F318 A680             (        forth.asm):02796 (4+1)   @lpar1  lda     ,x+
F31A 2709             (        forth.asm):02797 (3)             beq     @lparx          Input stream exhausted before ) is matched
F31C 8129             (        forth.asm):02798 (2)             cmpa    #')
F31E 26F8             (        forth.asm):02799 (3)             bne     @lpar1
F320 1F10             (        forth.asm):02800 (4)             tfr     x,d             Just matched )
F322 7EE177           (        forth.asm):02801 (3)             jmp     U2INFRD         Derive >IN from D
F325 C60C             (        forth.asm):02802 (2)     @lparx  ldb     #12             Missing delimiter
F327 BDE76A           (        forth.asm):02803 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02804         
F32A 06               (        forth.asm):02805         SOURCE  fcb     6               ANSI (Core)
F32B 534F55524345     (        forth.asm):02806                 fcc     'SOURCE'        ( -- baseaddr charcount )
F331 F310             (        forth.asm):02807                 fdb     LPAR
F333 C7               (        forth.asm):02808                 RFCS
F334 9E1C             (        forth.asm):02809 (4)             ldx     BSBFADR
F336 BDE7ED           (        forth.asm):02810 (7)             jsr     NPUSH
F339 8E0400           (        forth.asm):02811 (3)             ldx     #BLKSIZ         Non-zero block size
F33C DC24             (        forth.asm):02812 (4)             ldd     UBLK
F33E 2605             (        forth.asm):02813 (3)             bne     @srcdon         Current BLK is NZ
F340 4F               (        forth.asm):02814 (1)             clra
F341 D62D             (        forth.asm):02815 (3)             ldb     CMDLNSZ         Character count entered through GETS in INTERP
F343 1F01             (        forth.asm):02816 (4)             tfr     d,x
F345 7EE7ED           (        forth.asm):02817 (3)     @srcdon jmp     NPUSH
                      (        forth.asm):02818         
                      (        forth.asm):02819         * This is a straightforward implementation borrowed from GNU Forth 'see \':
                      (        forth.asm):02820         * : \
                      (        forth.asm):02821         *   BLK @
                      (        forth.asm):02822         *   IF     >IN @ C/L / 1+ C/L * >IN ! EXIT
                      (        forth.asm):02823         *   THEN
                      (        forth.asm):02824         *   SOURCE >IN ! DROP ; IMMEDIATE
                      (        forth.asm):02825         * However since C/L (number of columns per line) is 64 (a power of 2), things
                      (        forth.asm):02826         * can be coded in a more compact manner as: >IN @ 63 COM AND 64 + >IN !
F348 81               (        forth.asm):02827         BKSLSH  fcb     $81             ANSI (Block Ext)
F349 5C               (        forth.asm):02828                 fcb     $5C             \ ( -- )
F34A F32A             (        forth.asm):02829                 fdb     SOURCE
F34C C7               (        forth.asm):02830                 RFCS
F34D DC24             (        forth.asm):02831 (4)             ldd     UBLK            BLK @ to D
F34F 270B             (        forth.asm):02832 (3)             beq     @comser         We operate from block 0: the console
F351 DC22             (        forth.asm):02833 (4)             ldd     UTOIN           >IN @
F353 C4C0             (        forth.asm):02834 (2)             andb    #^$3F           Point to the beginning of the line
F355 CB40             (        forth.asm):02835 (2)             addb    #$40            next line
F357 8900             (        forth.asm):02836 (2)             adca    #0              Propagate potential carry from LSB
F359 DD22             (        forth.asm):02837 (4)             std     UTOIN           >IN !
F35B 39               (        forth.asm):02838 (4)             rts                     EXIT
F35C 8DD6             (        forth.asm):02839         @comser RFXT    bsr,SOURCE+9    XT for SOURCE
F35E BDE7FB           (        forth.asm):02840 (7)             jsr     NPOP
F361 9F22             (        forth.asm):02841 (4)             stx     UTOIN           >IN !
F363 7EFC2C           (        forth.asm):02842                 RFXT    jmp,DROP+7      XT for DROP
                      (        forth.asm):02843                 ENDC
                      (        forth.asm):02844         
F366 82               (        forth.asm):02845         PSTR    fcb     $82             79-STANDARD (REQ133)
F367 2E22             (        forth.asm):02846                 fcc     '."'
F369 F348             (        forth.asm):02847                 fdb     BKSLSH
F36B C7               (        forth.asm):02848                 RFCS
F36C 8D13             (        forth.asm):02849                 RFXT    bsr,SQUOTE+5    XT for S"
F36E 0D21             (        forth.asm):02850 (4)             tst     USTATE+1
F370 2603             (        forth.asm):02851 (3)             bne     @pstcmp
F372 7EF72D           (        forth.asm):02852                 RFXT    jmp,TYPE+7      XT for TYPE
F375 8EF72D           (        forth.asm):02853         @pstcmp RFXT    ldx,#TYPE+7     Emit TYPE as an XT
F378 7EE169           (        forth.asm):02854 (3)             jmp     EMXASXT
                      (        forth.asm):02855         
F37B 82               (        forth.asm):02856         SQUOTE  fcb     $82             ANSI (Core)
F37C 5322             (        forth.asm):02857                 fcc     'S"'
F37E F366             (        forth.asm):02858                 fdb     PSTR
F380 C7               (        forth.asm):02859                 RFCS
F381 0D21             (        forth.asm):02860 (4)             tst     USTATE+1
F383 260C             (        forth.asm):02861 (3)             bne     @sqcmp
F385 8E0022           (        forth.asm):02862 (3)             ldx     #'"             We are inperpreting
F388 BDE7ED           (        forth.asm):02863 (7)             jsr     NPUSH
F38B BDF2D5           (        forth.asm):02864                 RFXT    jsr,WORD+7      XT for WORD
F38E 7EF74C           (        forth.asm):02865                 RFXT    jmp,COUNT+8     XT for COUNT
F391 109E08           (        forth.asm):02866 (5)     @sqcmp  ldy     DICEND          We are compiling
F394 867E             (        forth.asm):02867 (2)             lda     #JMPOPC         JMP extended
F396 A7A0             (        forth.asm):02868 (4+1)           sta     ,y+
F398 3420             (        forth.asm):02869 (4+2)           pshs    y
F39A 3122             (        forth.asm):02870 (4+1)           leay    2,y             2 ALLOT
F39C 109F08           (        forth.asm):02871 (5)             sty     DICEND
F39F 8E0022           (        forth.asm):02872 (3)             ldx     #'"
F3A2 BDE7ED           (        forth.asm):02873 (7)             jsr     NPUSH
F3A5 BDF2D5           (        forth.asm):02874                 RFXT    jsr,WORD+7      XT for WORD
F3A8 BDE7FB           (        forth.asm):02875 (7)             jsr     NPOP
F3AB 4F               (        forth.asm):02876 (1)             clra
F3AC E684             (        forth.asm):02877 (4+0)           ldb     ,x              C@
F3AE 3001             (        forth.asm):02878 (4+1)           leax    1,x             1+. Skip the byte count (X has HERE)
F3B0 308B             (        forth.asm):02879 (4+2)           leax    d,x             Skip string length material
F3B2 3520             (        forth.asm):02880 (4+2)           puls    y
F3B4 AFA4             (        forth.asm):02881 (5+0)           stx     ,y              Install jump address
F3B6 3122             (        forth.asm):02882 (4+1)           leay    2,y             Counted string base address to Y
F3B8 868E             (        forth.asm):02883 (2)             lda     #LDXOPC
F3BA A780             (        forth.asm):02884 (4+1)           sta     ,x+
F3BC 10AF81           (        forth.asm):02885 (6+2)           sty     ,x++
F3BF 9F08             (        forth.asm):02886 (4)             stx     DICEND          Update HERE
F3C1 8EE7ED           (        forth.asm):02887 (3)             ldx     #NPUSH
F3C4 BDE169           (        forth.asm):02888 (7)             jsr     EMXASXT
F3C7 8EF74C           (        forth.asm):02889                 RFXT    ldx,#COUNT+8    XT for COUNT
F3CA 7EE169           (        forth.asm):02890 (3)             jmp     EMXASXT
                      (        forth.asm):02891         
                      (        forth.asm):02892         * Transactional behaviour is guaranteed here. What this means is that the
                      (        forth.asm):02893         * operation will preserve the data stack contents, should insufficient
                      (        forth.asm):02894         * parameters be supplied. It is a very desirable feature (for debugging
                      (        forth.asm):02895         * purposes) which will be generalized to a number of other words. As an
                      (        forth.asm):02896         * aside, it also allows us to access the data stack as directly indexed
                      (        forth.asm):02897         * through the 6309 U register, resulting in better performance.
F3CD 02               (        forth.asm):02898         DPLUS   fcb     2               79-STANDARD (REQ241)
F3CE 442B             (        forth.asm):02899                 fcc     'D+'            ( d1 d2 -- d1+d2--signed )
F3D0 F37B             (        forth.asm):02900                 fdb     SQUOTE          In processor's terms U has ( L1 H1 L2 H2)
F3D2 C7               (        forth.asm):02901                 RFCS
F3D3 BDE4A4           (        forth.asm):02902 (7)             jsr     MIN4PST         Make sure we have at least 4 cells stacked up
                      (        forth.asm):02903         * At this point sufficient stack depth has been assessed. Let's rock and roll!
F3D6 EC46             (        forth.asm):02904 (5+1)           ldd     6,u             L1
F3D8 E342             (        forth.asm):02905 (5+1)           addd    2,u             L2
F3DA ED46             (        forth.asm):02906 (5+1)           std     6,u             d1+d2 least significant cell
F3DC EC44             (        forth.asm):02907 (5+1)           ldd     4,u             H1
F3DE 10A9C4           (        forth.asm):02908 (6+0)           adcd    ,u              H2 (add with carry bit)
F3E1 ED44             (        forth.asm):02909 (5+1)           std     4,u             d1+d2 most significant cell
F3E3 3344             (        forth.asm):02910 (4+1)           leau    4,u             Drop 2 cells from the data stack
F3E5 39               (        forth.asm):02911 (4)             rts
                      (        forth.asm):02912         
F3E6 07               (        forth.asm):02913         DNEG    fcb     7               79-STANDARD (REQ245)
F3E7 444E4547415445   (        forth.asm):02914                 fcc     'DNEGATE'
F3EE F3CD             (        forth.asm):02915                 fdb     DPLUS
F3F0 C7               (        forth.asm):02916                 RFCS
F3F1 BDE49A           (        forth.asm):02917 (7)             jsr     MIN2PST         We need at least 2 cells stacked up
F3F4 10A642           (        forth.asm):02918 (6+1)           ldw     2,u             Least significant cell
F3F7 1053             (        forth.asm):02919 (2)             comw
F3F9 ECC4             (        forth.asm):02920 (5+0)           ldd     ,u              Most significant cell
F3FB 1043             (        forth.asm):02921 (2)             comd
F3FD 108B0001         (        forth.asm):02922 (4)             addw    #1
F401 10890000         (        forth.asm):02923 (4)             adcd    #0              Propagate carry flag
F405 10EDC4           (        forth.asm):02924 (8+0)           stq     ,u              Store the result back to the data stack
F408 39               (        forth.asm):02925 (4)             rts
                      (        forth.asm):02926         
F409 02               (        forth.asm):02927         DMINUS  fcb     2               79-STANDARD (double number extension)
F40A 442D             (        forth.asm):02928                 fcc     'D-'            ( d1 d2 -- d1-d2--signed )
F40C F3E6             (        forth.asm):02929                 fdb     DNEG            In processor's terms U has ( L1 H1 L2 H2)
F40E C7               (        forth.asm):02930                 RFCS
F40F BDE4A4           (        forth.asm):02931 (7)             jsr     MIN4PST         Make sure we have at least 4 cells stacked up
F412 EC46             (        forth.asm):02932 (5+1)           ldd     6,u             L1
F414 A342             (        forth.asm):02933 (5+1)           subd    2,u             L2
F416 ED46             (        forth.asm):02934 (5+1)           std     6,u             d1-d2 least significant cell
F418 EC44             (        forth.asm):02935 (5+1)           ldd     4,u             H1
F41A 10A2C4           (        forth.asm):02936 (6+0)           sbcd    ,u              H2 (substract with borrow)
F41D ED44             (        forth.asm):02937 (5+1)           std     4,u             d1-d2 most significant cell
F41F 3344             (        forth.asm):02938 (4+1)           leau    4,u
F421 39               (        forth.asm):02939 (4)             rts
                      (        forth.asm):02940         
F422 03               (        forth.asm):02941         DZEQ    fcb     3               79-STANDARD (double number extension)
F423 44303D           (        forth.asm):02942                 fcc     'D0='           ( d -- flag )
F426 F409             (        forth.asm):02943                 fdb     DMINUS
F428 C7               (        forth.asm):02944                 RFCS
F429 BDEE85           (        forth.asm):02945                 RFXT    jsr,OR+5        XT for OR
F42C 7EEEFF           (        forth.asm):02946                 RFXT    jmp,NULP+5      XT for 0=
                      (        forth.asm):02947         
                      (        forth.asm):02948         * GNU Forth has:
                      (        forth.asm):02949         * f = FLAG(d1.hi==d2.hi ? d1.lo<d2.lo : d1.hi<d2.hi);
                      (        forth.asm):02950         * Comparisons between high cells are signed, but they are unsigned between
                      (        forth.asm):02951         * the low cells.
F42F 02               (        forth.asm):02952         DLESS   fcb     2               79-STANDARD (REQ244)
F430 443C             (        forth.asm):02953                 fcc     'D<'            ( d1 d2 -- flag )
F432 F422             (        forth.asm):02954                 fdb     DZEQ
F434 C7               (        forth.asm):02955                 RFCS
F435 BDE4A4           (        forth.asm):02956 (7)             jsr     MIN4PST
                      (        forth.asm):02957         * Data stack structure at this point:
                      (        forth.asm):02958         * ,u    d2.hi                   1 cell
                      (        forth.asm):02959         * 2,u   d2.lo                   1 cell
                      (        forth.asm):02960         * 4,u   d1.hi                   1 cell
                      (        forth.asm):02961         * 6,u   d1.lo                   1 cell
F438 115F             (        forth.asm):02962 (2)             clrf                    A priori return value for FLAG
F43A ECC4             (        forth.asm):02963 (5+0)           ldd     ,u              D2.HI
F43C 10A344           (        forth.asm):02964 (6+1)           cmpd    4,u             D1.HI
F43F 2611             (        forth.asm):02965 (3)             bne     @term2
F441 EC42             (        forth.asm):02966 (5+1)           ldd     2,u             D2.LO
F443 10A346           (        forth.asm):02967 (6+1)           cmpd    6,u             D1.LO
F446 2302             (        forth.asm):02968 (3)             bls     @done
F448 115C             (        forth.asm):02969 (2)     @setto1 incf
F44A 11E747           (        forth.asm):02970 (5+1)   @done   stf     7,u             FLAG's LSB
F44D 6F46             (        forth.asm):02971 (6+1)           clr     6,u             FLAG's MSB
F44F 3346             (        forth.asm):02972 (4+1)           leau    6,u             Drop three cells fron the data stack
F451 39               (        forth.asm):02973 (4)             rts
F452 2FF6             (        forth.asm):02974 (3)     @term2  ble     @done
F454 20F2             (        forth.asm):02975 (3)             bra     @setto1
                      (        forth.asm):02976         
F456 05               (        forth.asm):02977         TWOOVER fcb     5               79-STANDARD (double number extension)
F457 324F564552       (        forth.asm):02978                 fcc     '2OVER'         ( d1 d2 -- d1 d2 d1 )
F45C F42F             (        forth.asm):02979                 fdb     DLESS
F45E C7               (        forth.asm):02980                 RFCS
F45F BDE4A4           (        forth.asm):02981 (7)             jsr     MIN4PST         At least four cells need to be stacked up
F462 10EC44           (        forth.asm):02982 (8+1)           ldq     4,u             D:W has MSC:LSC of D1
F465 1F61             (        forth.asm):02983 (4)             tfr     w,x
F467 BDE7ED           (        forth.asm):02984 (7)             jsr     NPUSH
F46A 1F01             (        forth.asm):02985 (4)             tfr     d,x
F46C 7EE7ED           (        forth.asm):02986 (3)             jmp     NPUSH
                      (        forth.asm):02987         
F46F 05               (        forth.asm):02988         TWOSWAP fcb     5               79-STANDARD (double number extension)
F470 3253574150       (        forth.asm):02989                 fcc     '2SWAP'         ( d1 d2 -- d2 d1 )
F475 F456             (        forth.asm):02990                 fdb     TWOOVER
F477 C7               (        forth.asm):02991                 RFCS
F478 BDE4A4           (        forth.asm):02992 (7)             jsr     MIN4PST         At least four cells must be stacked up
F47B AE44             (        forth.asm):02993 (5+1)           ldx     4,u             D1 most significant cell
F47D 10AE46           (        forth.asm):02994 (6+1)           ldy     6,u             D1 least significant cell
F480 10ECC4           (        forth.asm):02995 (8+0)           ldq     ,u              D:W has MSC:LSC of D2
F483 10ED44           (        forth.asm):02996 (8+1)           stq     4,u
F486 AFC4             (        forth.asm):02997 (5+0)           stx     ,u
F488 10AF42           (        forth.asm):02998 (6+1)           sty     2,u
F48B 39               (        forth.asm):02999 (4)             rts
                      (        forth.asm):03000         
F48C 05               (        forth.asm):03001         TWODROP fcb     5               79-STANDARD (double number extension)
F48D 3244524F50       (        forth.asm):03002                 fcc     '2DROP'         ( d -- )
F492 F46F             (        forth.asm):03003                 fdb     TWOSWAP
F494 C7               (        forth.asm):03004                 RFCS
F495 BDE49A           (        forth.asm):03005 (7)             jsr     MIN2PST         At least two cells must be stacked up
F498 3344             (        forth.asm):03006 (4+1)           leau    4,u
F49A 39               (        forth.asm):03007 (4)             rts
                      (        forth.asm):03008         
F49B 04               (        forth.asm):03009         TWODUP  fcb     4               79-STANDARD (double number extension)
F49C 32445550         (        forth.asm):03010                 fcc     '2DUP'          ( double -- double double )
F4A0 F48C             (        forth.asm):03011                 fdb     TWODROP
F4A2 C7               (        forth.asm):03012                 RFCS
F4A3 BDE49A           (        forth.asm):03013 (7)             jsr     MIN2PST         At least two cells need to be stacked up
F4A6 10ECC4           (        forth.asm):03014 (8+0)           ldq     ,u              D:W has MSC:LSC of DOUBLE
F4A9 1F61             (        forth.asm):03015 (4)             tfr     w,x
F4AB BDE7ED           (        forth.asm):03016 (7)             jsr     NPUSH
F4AE 1F01             (        forth.asm):03017 (4)             tfr     d,x
F4B0 7EE7ED           (        forth.asm):03018 (3)             jmp     NPUSH
                      (        forth.asm):03019         
F4B3 02               (        forth.asm):03020         TWOSTOR fcb     2               79-STANDARD (double number extension)
F4B4 3221             (        forth.asm):03021                 fcc     '2!'            ( double addr -- )
F4B6 F49B             (        forth.asm):03022                 fdb     TWODUP
F4B8 C7               (        forth.asm):03023                 RFCS
F4B9 BDE49F           (        forth.asm):03024 (7)             jsr     MIN3PST         At least three cells need to be stacked up
F4BC 10EC42           (        forth.asm):03025 (8+1)           ldq     2,u             DOUBLE to D:W
F4BF 10EDD4           (        forth.asm):03026 (8+3)           stq     [,u]            Store DOUBLE to ADDR
F4C2 3346             (        forth.asm):03027 (4+1)           leau    6,u             Drop three cells from the user stack
F4C4 39               (        forth.asm):03028 (4)             rts
                      (        forth.asm):03029         
F4C5 02               (        forth.asm):03030         TWOFTCH fcb     2               79-STANDARD (double number extension)
F4C6 3240             (        forth.asm):03031                 fcc     '2@'            ( dbladdr -- double )
F4C8 F4B3             (        forth.asm):03032                 fdb     TWOSTOR
F4CA C7               (        forth.asm):03033                 RFCS
F4CB BDE495           (        forth.asm):03034 (7)             jsr     MIN1PST         At least cell needs to be stacked up
F4CE 10ECD4           (        forth.asm):03035 (8+3)           ldq     [,u]            D:W has MSC:LSC of DBLADDR @
F4D1 10A7C4           (        forth.asm):03036 (6+0)           stw     ,u              Least significant cell stacked in place
F4D4 1F01             (        forth.asm):03037 (4)             tfr     d,x             Most significant cell goes through standard push
F4D6 7EE7ED           (        forth.asm):03038 (3)             jmp     NPUSH
                      (        forth.asm):03039         
F4D9 07               (        forth.asm):03040         CONVERT fcb     7               79-STANDARD (REQ195)
F4DA 434F4E56455254   (        forth.asm):03041                 fcc     'CONVERT'       ( d1 addr1 -- d2 addr2 )
F4E1 F4C5             (        forth.asm):03042                 fdb     TWOFTCH
F4E3 C7               (        forth.asm):03043                 RFCS
F4E4 BDE49F           (        forth.asm):03044 (7)             jsr     MIN3PST         At least 3 cells need to be stacked up
F4E7 BDE3D9           (        forth.asm):03045 (7)             jsr     CKBASE          Check for supported BASE. No return if not
F4EA AEC4             (        forth.asm):03046 (5+0)           ldx     ,u              ADDR1 to X
F4EC 3001             (        forth.asm):03047 (4+1)   @cvloop leax    1,x
F4EE E684             (        forth.asm):03048 (4+0)           ldb     ,x
                      (        forth.asm):03049         * B has the ASCII representation of something that may or may not be a valid
                      (        forth.asm):03050         * digit, expressed in BASE (alias (byte)UBASE+1). If it does, multiply D1 by
                      (        forth.asm):03051         * BASE and add that to D1 (aka D2 on exit). Then add DIGIT on the top of it.
F4F0 C030             (        forth.asm):03052 (2)             subb    #'0             Minimal ASCII value condition met?
F4F2 255B             (        forth.asm):03053 (3)             blo     @cvoor          No. Out of range. ,X cannot be a valid digit
F4F4 C10A             (        forth.asm):03054 (2)             cmpb    #10
F4F6 2510             (        forth.asm):03055 (3)             blo     @cvnolt         No letter in potential BASE
                      (        forth.asm):03056                 IFEQ    CSSNTVE
F4F8 C111             (        forth.asm):03057 (2)             cmpb    #'A-'0
F4FA 2553             (        forth.asm):03058 (3)             blo     @cvoor          Greater than 9 but lower than A
F4FC C131             (        forth.asm):03059 (2)             cmpb    #'a-'0
F4FE 2506             (        forth.asm):03060 (3)             blo     @cvisuc         Upper case already
F500 C14A             (        forth.asm):03061 (2)             cmpb    #'z-'0
F502 224B             (        forth.asm):03062 (3)             bhi     @cvoor          Definitely out of range
F504 C020             (        forth.asm):03063 (2)             subb    #'a-'A          To upper case
                      (        forth.asm):03064                 ENDC                    CSSNTVE
F506 C007             (        forth.asm):03065 (2)     @cvisuc subb    #'A-':          A-Z to number
F508 D11F             (        forth.asm):03066 (3)     @cvnolt cmpb    UBASE+1         B has a digit. Make sure it's less than BASE
F50A 2443             (        forth.asm):03067 (3)             bhs     @cvoor          Number under scrutiny is >= BASE
F50C 3278             (        forth.asm):03068 (4+1)           leas    -8,s            Allocate scratch space
F50E 4F               (        forth.asm):03069 (1)             clra
F50F 3406             (        forth.asm):03070 (4+2)           pshs    d
                      (        forth.asm):03071         * System and user stack structures are as follows:
                      (        forth.asm):03072         * ,s    current digit (1 cell)
                      (        forth.asm):03073         * 2,s   D0*B (1 cell)
                      (        forth.asm):03074         * 4,s   D1*B (1 cell)
                      (        forth.asm):03075         * 6,s   D2*B (1 cell)
                      (        forth.asm):03076         * 8,s   D3*B (1 cell)
                      (        forth.asm):03077         * 2,u   D1H most significant cell
                      (        forth.asm):03078         * 4,u   D1L least significant cell
F511 1F37             (        forth.asm):03079 (4)             tfr     u,v             Backup U
F513 3346             (        forth.asm):03080 (4+1)           leau    6,u             Point one byte after D1LL
F515 3162             (        forth.asm):03081 (4+1)           leay    2,s             Point to D0*B
F517 118604           (        forth.asm):03082 (3)             lde     #4              Four products to go through
F51A A6C2             (        forth.asm):03083 (4+1)   @cvmul  lda     ,-u
F51C D61F             (        forth.asm):03084 (3)             ldb     UBASE+1
F51E 3D               (        forth.asm):03085 (10)            mul
F51F EDA1             (        forth.asm):03086 (5+2)           std     ,y++
F521 114A             (        forth.asm):03087 (2)             dece
F523 26F5             (        forth.asm):03088 (3)             bne     @cvmul
F525 1F73             (        forth.asm):03089 (4)             tfr     v,u             Restore U
F527 A663             (        forth.asm):03090 (4+1)           lda     3,s
F529 A745             (        forth.asm):03091 (4+1)           sta     5,u             D1LL
F52B A662             (        forth.asm):03092 (4+1)           lda     2,s
F52D AB65             (        forth.asm):03093 (4+1)           adda    5,s
F52F A744             (        forth.asm):03094 (4+1)           sta     4,u             D1LH
F531 A664             (        forth.asm):03095 (4+1)           lda     4,s
F533 A967             (        forth.asm):03096 (4+1)           adca    7,s
F535 A743             (        forth.asm):03097 (4+1)           sta     3,u             D1HL
F537 A666             (        forth.asm):03098 (4+1)           lda     6,s
F539 A969             (        forth.asm):03099 (4+1)           adca    9,s
F53B A742             (        forth.asm):03100 (4+1)           sta     2,u             D1HH
F53D EC44             (        forth.asm):03101 (5+1)           ldd     4,u             D1L
F53F E3E4             (        forth.asm):03102 (5+0)           addd    ,s              DIGIT
F541 ED44             (        forth.asm):03103 (5+1)           std     4,u
F543 EC42             (        forth.asm):03104 (5+1)           ldd     2,u             D1H
F545 10890000         (        forth.asm):03105 (4)             adcd    #0              Potential carry from lower cell
F549 ED42             (        forth.asm):03106 (5+1)           std     2,u
F54B 326A             (        forth.asm):03107 (4+1)           leas    10,s            Release scratch space
F54D 209D             (        forth.asm):03108 (3)             bra     @cvloop         Here we go again
F54F AFC4             (        forth.asm):03109 (5+0)   @cvoor  stx     ,u              Update ADDR2
F551 39               (        forth.asm):03110 (4)             rts
                      (        forth.asm):03111         
F552 02               (        forth.asm):03112         CVTE    fcb     2
F553 233E             (        forth.asm):03113                 fcc     '#>'
F555 F4D9             (        forth.asm):03114                 fdb     CONVERT
F557 C7               (        forth.asm):03115                 RFCS
F558 BDE7FB           (        forth.asm):03116 (7)             jsr     NPOP
F55B BDE7FB           (        forth.asm):03117 (7)             jsr     NPOP            Drop 2 cells from the data stack
F55E 8E0184           (        forth.asm):03118 (3)             ldx     #PADBUF
F561 3610             (        forth.asm):03119                 UCNPUSH
F563 BDE246           (        forth.asm):03120 (7)             jsr     SLEN
F566 1F61             (        forth.asm):03121 (4)             tfr     w,x
F568 3610             (        forth.asm):03122                 UCNPUSH
F56A 39               (        forth.asm):03123 (4)             rts
                      (        forth.asm):03124         
F56B 04               (        forth.asm):03125         SIGN    fcb     4
F56C 5349474E         (        forth.asm):03126                 fcc     'SIGN'
F570 F552             (        forth.asm):03127                 fdb     CVTE
F572 C7               (        forth.asm):03128                 RFCS
F573 BDE7FB           (        forth.asm):03129 (7)             jsr     NPOP
F576 1F10             (        forth.asm):03130 (4)             tfr     x,d
F578 104D             (        forth.asm):03131 (2)             tstd
F57A 2C05             (        forth.asm):03132 (3)             bge     @sign1
F57C C62D             (        forth.asm):03133 (2)             ldb     #'-
F57E 7EF63A           (        forth.asm):03134 (3)             jmp     INSBPAD
F581 39               (        forth.asm):03135 (4)     @sign1  rts
                      (        forth.asm):03136         
F582 04               (        forth.asm):03137         HOLD    fcb     4
F583 484F4C44         (        forth.asm):03138                 fcc     'HOLD'
F587 F56B             (        forth.asm):03139                 fdb     SIGN
F589 C7               (        forth.asm):03140                 RFCS
F58A BDE7FB           (        forth.asm):03141 (7)             jsr     NPOP
F58D 1F10             (        forth.asm):03142 (4)             tfr     x,d
F58F 7EF63A           (        forth.asm):03143 (3)             jmp     INSBPAD         B is inserted at the beginning of PAD.
                      (        forth.asm):03144         
F592 02               (        forth.asm):03145         SHARPS  fcb     2
F593 2353             (        forth.asm):03146                 fcc     '#S'
F595 F582             (        forth.asm):03147                 fdb     HOLD
F597 C7               (        forth.asm):03148                 RFCS
F598 8601             (        forth.asm):03149 (2)             lda     #1
F59A 9734             (        forth.asm):03150 (3)             sta     CVTFCN          CVT function #1 is #S
F59C 2007             (        forth.asm):03151 (3)             bra     CVT0
                      (        forth.asm):03152         
                      (        forth.asm):03153         * Unsigned double on the top of the data stack gets divided by BASE.
                      (        forth.asm):03154         * The division algorithm implemented here is the binary long division.
                      (        forth.asm):03155         * See https://en.wikipedia.org/wiki/Division_algorithm for more information.
                      (        forth.asm):03156         * Remainder (converted to a character) gets prepended to PAD.
F59E 01               (        forth.asm):03157         CVT     fcb     1
F59F 23               (        forth.asm):03158                 fcc     '#'
F5A0 F592             (        forth.asm):03159                 fdb     SHARPS
F5A2 C7               (        forth.asm):03160                 RFCS
F5A3 0F34             (        forth.asm):03161 (5)             clr     CVTFCN          CVT function 0 is #
F5A5 BDE7FB           (        forth.asm):03162 (7)     CVT0    jsr     NPOP
F5A8 1F16             (        forth.asm):03163 (4)             tfr     x,w
F5AA BDE7FB           (        forth.asm):03164 (7)             jsr     NPOP
F5AD 3410             (        forth.asm):03165 (4+2)   CVT1    pshs    x               Numerator least significant cell
F5AF 1038             (        forth.asm):03166 (6)             pshsw                   Numerator most significant cell
F5B1 104F             (        forth.asm):03167 (2)             clrd
F5B3 3406             (        forth.asm):03168 (4+2)           pshs    d               Quotient low
F5B5 3406             (        forth.asm):03169 (4+2)           pshs    d               Quotient high
F5B7 3406             (        forth.asm):03170 (4+2)           pshs    d               Bitmask low
F5B9 10868000         (        forth.asm):03171 (4)             ldw     #$8000          Bitmask high
F5BD 1038             (        forth.asm):03172 (6)             pshsw
F5BF 3406             (        forth.asm):03173 (4+2)           pshs    d
                      (        forth.asm):03174         * Stack structure:
                      (        forth.asm):03175         * 1,s   remainder               8 bits (high order byte is zero and unused)
                      (        forth.asm):03176         * 2,s   Bitmask high            16 bits
                      (        forth.asm):03177         * 4,s   Bitmask low             16 bits
                      (        forth.asm):03178         * 6,s   Quotient high           16 bits
                      (        forth.asm):03179         * 8,s   Quotient low            16 bits
                      (        forth.asm):03180         * 10,s  Numerator high          16 bits
                      (        forth.asm):03181         * 12,s  Numerator low           16 bits
                      (        forth.asm):03182         * Denominator is at UBASE+1     8 bits
F5C1 11C61F           (        forth.asm):03183 (3)             ldf     #31             32 bits to go
F5C4 6861             (        forth.asm):03184 (6+1)   @cvt1   lsl     1,s             R := R << 1
                      (        forth.asm):03185         * We need to extract bit <f> from the numerator.
F5C6 306A             (        forth.asm):03186 (4+1)           leax    10,s            Numerator MSB address
F5C8 1FF8             (        forth.asm):03187 (4)             tfr     f,a             Not to alter the stack structure
F5CA 44               (        forth.asm):03188 (1)             lsra                    OffsetX: 3 - F >> 3
F5CB 44               (        forth.asm):03189 (1)             lsra
F5CC 44               (        forth.asm):03190 (1)             lsra
F5CD C603             (        forth.asm):03191 (2)             ldb     #3
F5CF 103289           (        forth.asm):03192 (4)             subr    a,b
F5D2 A685             (        forth.asm):03193 (4+1)           lda     b,x
F5D4 1FF9             (        forth.asm):03194 (4)             tfr     f,b             Bitno: F & 7
F5D6 C407             (        forth.asm):03195 (2)             andb    #7
                      (        forth.asm):03196         * At this point, A has the data we're interested in. B has the bit number.
F5D8 5D               (        forth.asm):03197 (1)     @cvtex  tstb
F5D9 2704             (        forth.asm):03198 (3)             beq     @cvtfnd         Bit 0 of A has the data
F5DB 44               (        forth.asm):03199 (1)             lsra
F5DC 5A               (        forth.asm):03200 (1)             decb
F5DD 20F9             (        forth.asm):03201 (3)             bra     @cvtex
F5DF 8401             (        forth.asm):03202 (2)     @cvtfnd anda    #1
F5E1 AA61             (        forth.asm):03203 (4+1)           ora     1,s             R(0) := N(i)
F5E3 A761             (        forth.asm):03204 (4+1)           sta     1,s             Update the remainder
F5E5 911F             (        forth.asm):03205 (3)             cmpa    UBASE+1
F5E7 2512             (        forth.asm):03206 (3)             blo     @cvt5
F5E9 901F             (        forth.asm):03207 (3)             suba    UBASE+1
F5EB A761             (        forth.asm):03208 (4+1)           sta     1,s             R := R - D
                      (        forth.asm):03209         * Q(i) := 1 (use the bitmask).
F5ED EC66             (        forth.asm):03210 (5+1)           ldd     6,s             Quotient high
F5EF 10AA62           (        forth.asm):03211 (6+1)           ord     2,s             Bitmask high
F5F2 ED66             (        forth.asm):03212 (5+1)           std     6,s
F5F4 EC68             (        forth.asm):03213 (5+1)           ldd     8,s             Quotient low
F5F6 10AA64           (        forth.asm):03214 (6+1)           ord     4,s             Bitmask low
F5F9 ED68             (        forth.asm):03215 (5+1)           std     8,s
                      (        forth.asm):03216         * Shift the bitmask 1 bit right.
F5FB EC62             (        forth.asm):03217 (5+1)   @cvt5   ldd     2,s
F5FD 1044             (        forth.asm):03218 (2)             lsrd
F5FF ED62             (        forth.asm):03219 (5+1)           std     2,s
F601 EC64             (        forth.asm):03220 (5+1)           ldd     4,s
F603 1046             (        forth.asm):03221 (2)             rord
F605 ED64             (        forth.asm):03222 (5+1)           std     4,s
F607 115A             (        forth.asm):03223 (2)             decf
F609 2CB9             (        forth.asm):03224 (3)             bge     @cvt1
                      (        forth.asm):03225         * Convert the remainder to a digit expressed in BASE.
F60B E661             (        forth.asm):03226 (4+1)           ldb     1,s
F60D 8630             (        forth.asm):03227 (2)             lda     #'0
F60F C10A             (        forth.asm):03228 (2)             cmpb    #10             B has the digit we want converted to BASE
F611 2502             (        forth.asm):03229 (3)             bcs     @cvtdgt
F613 8637             (        forth.asm):03230 (2)             lda     #'A-10
F615 103089           (        forth.asm):03231 (4)     @cvtdgt addr    a,b
F618 8D20             (        forth.asm):03232 (6)             bsr     INSBPAD         Prepend B to the string currently in PAD
F61A 0D34             (        forth.asm):03233 (4)             tst     CVTFCN
F61C 2711             (        forth.asm):03234 (3)             beq     @cvtend         Function 0 is straight #, i.e. we're done here
                      (        forth.asm):03235         * Function 1 is #S, we iterate unless the quotient is 0.
F61E EC68             (        forth.asm):03236 (5+1)           ldd     8,s
F620 10AA66           (        forth.asm):03237 (6+1)           ord     6,s
F623 270A             (        forth.asm):03238 (3)             beq     @cvtend
F625 AE68             (        forth.asm):03239 (5+1)           ldx     8,s             New numerator low
F627 10A666           (        forth.asm):03240 (6+1)           ldw     6,s             New numerator high
F62A 326E             (        forth.asm):03241 (4+1)           leas    14,s            Discard the stack frame
F62C 7EF5AD           (        forth.asm):03242 (3)             jmp     CVT1            And go at it again
                      (        forth.asm):03243         * Push back the quotient on the data stack (low then high cell).
F62F AE68             (        forth.asm):03244 (5+1)   @cvtend ldx     8,s
F631 3610             (        forth.asm):03245                 UCNPUSH
F633 AE66             (        forth.asm):03246 (5+1)           ldx     6,s
F635 326E             (        forth.asm):03247 (4+1)           leas    14,s            Discard the stack frame
F637 3610             (        forth.asm):03248                 UCNPUSH
F639 39               (        forth.asm):03249 (4)             rts
                      (        forth.asm):03250         
                      (        forth.asm):03251         * Insert the character in B in front of the string at PADBUF.
F63A 8E0184           (        forth.asm):03252 (3)     INSBPAD ldx     #PADBUF
F63D BDE246           (        forth.asm):03253 (7)             jsr     SLEN
F640 103061           (        forth.asm):03254 (4)             addr    w,x             X points to the PAD string's NUL terminator
F643 105C             (        forth.asm):03255 (2)             incw                    Include the terminator
F645 3101             (        forth.asm):03256 (4+1)           leay    1,x
F647 113912           (        forth.asm):03257 (6+?)           tfm     x-,y-
F64A D784             (        forth.asm):03258 (3)             stb     PADBUF
F64C 39               (        forth.asm):03259 (4)             rts
                      (        forth.asm):03260         
F64D 02               (        forth.asm):03261         CVTB    fcb     2
F64E 3C23             (        forth.asm):03262                 fcc     '<#'
F650 F59E             (        forth.asm):03263                 fdb     CVT
F652 C7               (        forth.asm):03264                 RFCS
F653 BDE3D9           (        forth.asm):03265 (7)             jsr     CKBASE          Sanity check. BASE can be altered at any time
F656 0F84             (        forth.asm):03266 (5)             clr     PADBUF
F658 39               (        forth.asm):03267 (4)             rts
                      (        forth.asm):03268         
F659 01               (        forth.asm):03269         DOT     fcb     1               79-STANDARD (REQ193)
F65A 2E               (        forth.asm):03270                 fcc     '.'
F65B F64D             (        forth.asm):03271                 fdb     CVTB
F65D C7               (        forth.asm):03272                 RFCS
F65E 8601             (        forth.asm):03273 (2)             lda     #1
F660 9737             (        forth.asm):03274 (3)             sta     CVISSGN         Force a signed number conversion
F662 BDE7FB           (        forth.asm):03275 (7)     PTOP0   jsr     NPOP
F665 BDE441           (        forth.asm):03276 (7)             jsr     CVNSTR
F668 8E03EA           (        forth.asm):03277 (3)             ldx     #TBUFF
F66B 8620             (        forth.asm):03278 (2)             lda     #SP
F66D A180             (        forth.asm):03279 (4+1)   @ptop1  cmpa    ,x+             Skip leading spaces
F66F 27FC             (        forth.asm):03280 (3)             beq     @ptop1
F671 301F             (        forth.asm):03281 (4+1)           leax    -1,x            Point to actual string start address
F673 BDE2F3           (        forth.asm):03282 (7)             jsr     PUTS
F676 7EE2E0           (        forth.asm):03283 (3)             jmp     PUTCH           Extra space after printing a number
                      (        forth.asm):03284         
F679 02               (        forth.asm):03285         UDOT    fcb     2               79-STANDARD (REQ106)
F67A 552E             (        forth.asm):03286                 fcc     'U.'
F67C F659             (        forth.asm):03287                 fdb     DOT
F67E C7               (        forth.asm):03288                 RFCS
F67F 0F37             (        forth.asm):03289 (5)             clr     CVISSGN         Conversion is unsigned
F681 20DF             (        forth.asm):03290 (3)             bra     PTOP0
                      (        forth.asm):03291         
F683 02               (        forth.asm):03292         DOTR    fcb     2               79-STANDARD (REF)
F684 2E52             (        forth.asm):03293                 fcc     '.R'
F686 F679             (        forth.asm):03294                 fdb     UDOT
F688 C7               (        forth.asm):03295                 RFCS
F689 8601             (        forth.asm):03296 (2)             lda     #1
F68B 9737             (        forth.asm):03297 (3)             sta     CVISSGN
F68D BDE7FB           (        forth.asm):03298 (7)     DOTR0   jsr     NPOP
F690 3410             (        forth.asm):03299 (4+2)           pshs    x               Length parameter value
F692 BDE7FB           (        forth.asm):03300 (7)             jsr     NPOP
F695 BDE441           (        forth.asm):03301 (7)             jsr     CVNSTR
F698 8E03EA           (        forth.asm):03302 (3)             ldx     #TBUFF
F69B 8620             (        forth.asm):03303 (2)             lda     #SP
F69D A180             (        forth.asm):03304 (4+1)   @dotr1  cmpa    ,x+
F69F 27FC             (        forth.asm):03305 (3)             beq     @dotr1          Skip leading spaces
F6A1 301F             (        forth.asm):03306 (4+1)           leax    -1,x
F6A3 BDE246           (        forth.asm):03307 (7)             jsr     SLEN            String length is returned in W
F6A6 3506             (        forth.asm):03308 (4+2)           puls    d
F6A8 1E06             (        forth.asm):03309 (5)             exg     d,w
F6AA 103206           (        forth.asm):03310 (4)             subr    d,w
F6AD 2F0D             (        forth.asm):03311 (3)             ble     @dotr3
F6AF 8620             (        forth.asm):03312 (2)             lda     #SP
F6B1 105D             (        forth.asm):03313 (2)     @dotr2  tstw
F6B3 2707             (        forth.asm):03314 (3)             beq     @dotr3
F6B5 BDE2E0           (        forth.asm):03315 (7)             jsr     PUTCH
F6B8 105A             (        forth.asm):03316 (2)             decw
F6BA 20F5             (        forth.asm):03317 (3)             bra     @dotr2
F6BC 7EE2F3           (        forth.asm):03318 (3)     @dotr3  jmp     PUTS
                      (        forth.asm):03319         
F6BF 03               (        forth.asm):03320         UDOTR   fcb     3               79-STANDARD (REF216)
F6C0 552E52           (        forth.asm):03321                 fcc     'U.R'
F6C3 F683             (        forth.asm):03322                 fdb     DOTR
F6C5 C7               (        forth.asm):03323                 RFCS
F6C6 0F37             (        forth.asm):03324 (5)             clr     CVISSGN
F6C8 20C3             (        forth.asm):03325 (3)             bra     DOTR0
                      (        forth.asm):03326         
F6CA 02               (        forth.asm):03327         BL      fcb     2               79-STANDARD (REF176)
F6CB 424C             (        forth.asm):03328                 fcc     'BL'
F6CD F6BF             (        forth.asm):03329                 fdb     UDOTR
F6CF C7               (        forth.asm):03330                 RFCS
F6D0 8E0020           (        forth.asm):03331 (3)             ldx     #SP
F6D3 7EE7ED           (        forth.asm):03332 (3)             jmp     NPUSH
                      (        forth.asm):03333         
F6D6 05               (        forth.asm):03334         SPACE   fcb     5               79-STANDARD (REQ232)
F6D7 5350414345       (        forth.asm):03335                 fcc     'SPACE'
F6DC F6CA             (        forth.asm):03336                 fdb     BL
F6DE C7               (        forth.asm):03337                 RFCS
F6DF 8620             (        forth.asm):03338 (2)             lda     #SP
F6E1 7EE2E0           (        forth.asm):03339 (3)             jmp     PUTCH
                      (        forth.asm):03340         
F6E4 06               (        forth.asm):03341         SPACES  fcb     6               79-STANDARD (REQ231)
F6E5 535041434553     (        forth.asm):03342                 fcc     'SPACES'
F6EB F6D6             (        forth.asm):03343                 fdb     SPACE
F6ED C7               (        forth.asm):03344                 RFCS
F6EE BDE7FB           (        forth.asm):03345 (7)             jsr     NPOP
F6F1 1F16             (        forth.asm):03346 (4)             tfr     x,w
F6F3 105D             (        forth.asm):03347 (2)             tstw
F6F5 2709             (        forth.asm):03348 (3)             beq     @spcs2
F6F7 8620             (        forth.asm):03349 (2)             lda     #SP
F6F9 BDE2E0           (        forth.asm):03350 (7)     @spcs1  jsr     PUTCH
F6FC 105A             (        forth.asm):03351 (2)             decw
F6FE 26F9             (        forth.asm):03352 (3)             bne     @spcs1
F700 39               (        forth.asm):03353 (4)     @spcs2  rts
                      (        forth.asm):03354         
F701 04               (        forth.asm):03355         PAGE    fcb     4               79-STANDARD (REF)
F702 50414745         (        forth.asm):03356                 fcc     'PAGE'
F706 F6E4             (        forth.asm):03357                 fdb     SPACES
F708 C7               (        forth.asm):03358                 RFCS
F709 8EFE18           (        forth.asm):03359 (3)             ldx     #CSVT100
F70C 7EE2F3           (        forth.asm):03360 (3)             jmp     PUTS
                      (        forth.asm):03361         
F70F 02               (        forth.asm):03362         CRLF    fcb     2               79-STANDARD (REQ160)
F710 4352             (        forth.asm):03363                 fcc     'CR'
F712 F701             (        forth.asm):03364                 fdb     PAGE
F714 C7               (        forth.asm):03365                 RFCS
F715 7EE300           (        forth.asm):03366 (3)             jmp     PUTCR
                      (        forth.asm):03367         
F718 03               (        forth.asm):03368         PAD     fcb     3               79-STANDARD (REQ226)
F719 504144           (        forth.asm):03369                 fcc     'PAD'
F71C F70F             (        forth.asm):03370                 fdb     CRLF
F71E C7               (        forth.asm):03371                 RFCS
F71F 8E0184           (        forth.asm):03372 (3)             ldx     #PADBUF
F722 7EE7ED           (        forth.asm):03373 (3)             jmp     NPUSH
                      (        forth.asm):03374         
F725 04               (        forth.asm):03375         TYPE    fcb     4               79-STANDARD (REQ222)
F726 54595045         (        forth.asm):03376                 fcc     'TYPE'          ( addr bcount -- )
F72A F718             (        forth.asm):03377                 fdb     PAD
F72C C7               (        forth.asm):03378                 RFCS
F72D BDE7FB           (        forth.asm):03379 (7)             jsr     NPOP            Character count (signed)
F730 1F16             (        forth.asm):03380 (4)             tfr     x,w
F732 BDE7FB           (        forth.asm):03381 (7)             jsr     NPOP            Buffer address
F735 105D             (        forth.asm):03382 (2)             tstw                    
F737 2E01             (        forth.asm):03383 (3)     @type0  bgt     @type1
F739 39               (        forth.asm):03384 (4)             rts
F73A A680             (        forth.asm):03385 (4+1)   @type1  lda     ,x+
F73C BDE2E0           (        forth.asm):03386 (7)             jsr     PUTCH
F73F 105A             (        forth.asm):03387 (2)             decw
F741 20F4             (        forth.asm):03388 (3)             bra     @type0
                      (        forth.asm):03389         
F743 05               (        forth.asm):03390         COUNT   fcb     5               79-STANDARD (REQ159)
F744 434F554E54       (        forth.asm):03391                 fcc     'COUNT'
F749 F725             (        forth.asm):03392                 fdb     TYPE
F74B C7               (        forth.asm):03393                 RFCS
F74C BDE7FB           (        forth.asm):03394 (7)             jsr     NPOP
F74F E680             (        forth.asm):03395 (4+1)           ldb     ,x+
F751 3610             (        forth.asm):03396                 UCNPUSH                 B is preserved
F753 4F               (        forth.asm):03397 (1)             clra
F754 1F01             (        forth.asm):03398 (4)             tfr     d,x
F756 7EE7ED           (        forth.asm):03399 (3)             jmp     NPUSH
                      (        forth.asm):03400         
F759 09               (        forth.asm):03401         DASHTR  fcb     9               79-STANDARD (REQ148)
F75A 2D545241494C494E (        forth.asm):03402                 fcc     '-TRAILING'     ( addr n1 -- addr n2 )
     47
F763 F743             (        forth.asm):03403                 fdb     COUNT
F765 C7               (        forth.asm):03404                 RFCS
F766 BDE7FB           (        forth.asm):03405 (7)             jsr     NPOP            N1 to X
F769 1F10             (        forth.asm):03406 (4)             tfr     x,d             N1 to D
F76B BDE7FB           (        forth.asm):03407 (7)             jsr     NPOP            ADDR to X
F76E 1F12             (        forth.asm):03408 (4)             tfr     x,y             Backup to I
F770 104D             (        forth.asm):03409 (2)             tstd                    Input character count (N1)
F772 2D1B             (        forth.asm):03410 (3)             blt     @invpar         Cannot be < 0
F774 308B             (        forth.asm):03411 (4+2)           leax    d,x             X has ADDR+N1
F776 1F06             (        forth.asm):03412 (4)             tfr     d,w             W has N1
F778 105D             (        forth.asm):03413 (2)     @cknxtb tstw
F77A 270A             (        forth.asm):03414 (3)             beq     @ckdone
F77C A682             (        forth.asm):03415 (4+1)           lda     ,-x
F77E 105A             (        forth.asm):03416 (2)             decw
F780 8120             (        forth.asm):03417 (2)             cmpa    #SP
F782 27F4             (        forth.asm):03418 (3)             beq     @cknxtb         Iterate over to the previous byte
F784 105C             (        forth.asm):03419 (2)             incw
F786 1F21             (        forth.asm):03420 (4)     @ckdone tfr     y,x
F788 3610             (        forth.asm):03421                 UCNPUSH                 String base address
F78A 1F61             (        forth.asm):03422 (4)             tfr     w,x
F78C 3610             (        forth.asm):03423                 UCNPUSH                 Updated character count
F78E 39               (        forth.asm):03424 (4)             rts
F78F C60D             (        forth.asm):03425 (2)     @invpar ldb     #13             Invalid parameter
F791 BDE76A           (        forth.asm):03426 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):03427         
F794 06               (        forth.asm):03428         EXPECT  fcb     6               79-STANDARD (REQ189)
F795 455850454354     (        forth.asm):03429                 fcc     'EXPECT'        ( addr count -- )
F79B F759             (        forth.asm):03430                 fdb     DASHTR
F79D C7               (        forth.asm):03431                 RFCS
F79E BDE7FB           (        forth.asm):03432 (7)     EXPCT1  jsr     NPOP
F7A1 1F10             (        forth.asm):03433 (4)             tfr     x,d             Buffer length to B
F7A3 BDE7FB           (        forth.asm):03434 (7)             jsr     NPOP            Buffer address to X. B is preserved
F7A6 5D               (        forth.asm):03435 (1)             tstb
F7A7 2701             (        forth.asm):03436 (3)             beq     @expct1
F7A9 5C               (        forth.asm):03437 (1)             incb                    Account for the NUL terminator
F7AA 7EE316           (        forth.asm):03438 (3)     @expct1 jmp     GETS
                      (        forth.asm):03439         
F7AD 06               (        forth.asm):03440         ACCEPT  fcb     6               ANSI (Core)
F7AE 414343455054     (        forth.asm):03441                 fcc     'ACCEPT'
F7B4 F794             (        forth.asm):03442                 fdb     EXPECT
F7B6 C7               (        forth.asm):03443                 RFCS
F7B7 8DE5             (        forth.asm):03444 (6)             bsr     EXPCT1
F7B9 4F               (        forth.asm):03445 (1)             clra
F7BA 3606             (        forth.asm):03446 (4+2)           pshu    d               This saves us "tfr d,x" and "UCNPUSH"
F7BC 39               (        forth.asm):03447 (4)             rts
                      (        forth.asm):03448         
F7BD 49               (        forth.asm):03449         TERPRET fcb     $49             79-STANDARD (REF) I make this compile time only
F7BE 494E544552505245 (        forth.asm):03450                 fcc     'INTERPRET'     ( -- )
     54
F7C7 F7AD             (        forth.asm):03451                 fdb     ACCEPT
F7C9 C7               (        forth.asm):03452                 RFCS
                      (        forth.asm):03453         * Obtain a base buffer address based on the value of BLK.
F7CA DC24             (        forth.asm):03454 (4)             ldd     UBLK
F7CC 2605             (        forth.asm):03455 (3)             bne     @notser
F7CE 8E0316           (        forth.asm):03456 (3)             ldx     #CMDBUF         Base buffer address for serial line input
F7D1 200A             (        forth.asm):03457 (3)             bra     @rsolvd
                      (        forth.asm):03458         * BLK is NZ, map the block in memory.
F7D3 1F01             (        forth.asm):03459 (4)     @notser tfr     d,x             Block number to X
F7D5 BDE7ED           (        forth.asm):03460 (7)             jsr     NPUSH
F7D8 BDEA53           (        forth.asm):03461                 RFXT    jsr,BLOCK+8     XT for BLOCK. Map the block in
F7DB 3710             (        forth.asm):03462                 UCNPOP                  Retrieve buffer address (to X)
                      (        forth.asm):03463         * Note: >IN is supposed to have been set by the caller!
F7DD 9F1C             (        forth.asm):03464 (4)     @rsolvd stx     BSBFADR
F7DF DC22             (        forth.asm):03465 (4)             ldd     UTOIN
F7E1 103001           (        forth.asm):03466 (4)             addr    d,x
F7E4 7EE0CA           (        forth.asm):03467 (3)             jmp     _INTERP         Finally invoke _INTERP.
                      (        forth.asm):03468         
F7E7 04               (        forth.asm):03469         LOAD    fcb     4               79-STANDARD (REQ202)
F7E8 4C4F4144         (        forth.asm):03470                 fcc     'LOAD'          ( blk -- )
F7EC F7BD             (        forth.asm):03471                 fdb     TERPRET
F7EE C7               (        forth.asm):03472                 RFCS
F7EF BDE7FB           (        forth.asm):03473 (7)             jsr     NPOP
F7F2 1037C1           (        forth.asm):03474 (4)             cmpr    0,x
F7F5 2601             (        forth.asm):03475 (3)             bne     LOAD1
F7F7 39               (        forth.asm):03476 (4)             rts                     Block 0 is _not_ loadable
F7F8 3410             (        forth.asm):03477 (4+2)   LOAD1   pshs    x
F7FA 9E24             (        forth.asm):03478 (4)             ldx     UBLK
F7FC BDE80A           (        forth.asm):03479 (7)             jsr     RPUSH           Push BLK on the return stack
F7FF 9E22             (        forth.asm):03480 (4)             ldx     UTOIN
F801 BDE80A           (        forth.asm):03481 (7)             jsr     RPUSH           Push >IN on the return stack
F804 3510             (        forth.asm):03482 (4+2)           puls    x
F806 9F24             (        forth.asm):03483 (4)             stx     UBLK            Update BLK with the LOAD argument
F808 104F             (        forth.asm):03484 (2)             clrd
F80A DD22             (        forth.asm):03485 (4)             std     UTOIN           Clear >IN
                      (        forth.asm):03486         * Map the new BLK in, interpret code from there.
F80C 8DBC             (        forth.asm):03487                 RFXT    bsr,TERPRET+12  XT for INTERPRET
F80E BDE828           (        forth.asm):03488 (7)             jsr     RPOP
F811 9F22             (        forth.asm):03489 (4)             stx     UTOIN           Restore >IN from the return stack
F813 BDE828           (        forth.asm):03490 (7)             jsr     RPOP
F816 9F24             (        forth.asm):03491 (4)             stx     UBLK            Restore BLK from the return stack
F818 7EE841           (        forth.asm):03492 (3)             jmp     BKIN2PT         Map BLK in (if needed) and update BSBFADR
                      (        forth.asm):03493         
F81B 04               (        forth.asm):03494         THRU    fcb     4               79-STANDARD (REF)
F81C 54485255         (        forth.asm):03495                 fcc     'THRU'          ( lowblk highblk -- )
F820 F7E7             (        forth.asm):03496                 fdb     LOAD
F822 C7               (        forth.asm):03497                 RFCS
F823 BDE7FB           (        forth.asm):03498 (7)             jsr     NPOP
F826 1F12             (        forth.asm):03499 (4)             tfr     x,y             Y has highblk
F828 BDE7FB           (        forth.asm):03500 (7)             jsr     NPOP            X has lowblk--both are unsigned numbers
F82B 103712           (        forth.asm):03501 (4)     @thrlop cmpr    x,y
F82E 2401             (        forth.asm):03502 (3)             bhs     @cont           Limit is >= to the loop index
F830 39               (        forth.asm):03503 (4)             rts
F831 3430             (        forth.asm):03504 (4+4)   @cont   pshs    x,y             Backup loop parameters
F833 3610             (        forth.asm):03505                 UCNPUSH                 Current block number to the data stack
F835 8DB8             (        forth.asm):03506                 RFXT    bsr,LOAD+7      XT for LOAD
F837 3530             (        forth.asm):03507 (4+4)           puls    y,x             Retrieve loop parameters
F839 3001             (        forth.asm):03508 (4+1)           leax    1,x             Iterate over to the next screen
F83B 20EE             (        forth.asm):03509 (3)             bra     @thrlop
                      (        forth.asm):03510         
F83D 83               (        forth.asm):03511         NXTBLK  fcb     $83             79-STANDARD (REF131)
F83E 2D2D3E           (        forth.asm):03512                 fcc     '-->'           ( -- )
F841 F81B             (        forth.asm):03513                 fdb     THRU
F843 C7               (        forth.asm):03514                 RFCS
F844 9E24             (        forth.asm):03515 (4)             ldx     UBLK
F846 3001             (        forth.asm):03516 (4+1)           leax    1,x
F848 DC24             (        forth.asm):03517 (4)     NXTBLK1 ldd     UBLK
F84A 2603             (        forth.asm):03518 (3)             bne     @nfrmb0         Not invoked from block 0 (the console)
                      (        forth.asm):03519         * --> or CONTINUED are being invoked from the console. Flag that condition
                      (        forth.asm):03520         * as a hint to the interpreter so that feedback is provided even if we are
                      (        forth.asm):03521         * back from a block.
F84C 4C               (        forth.asm):03522 (1)             inca                    1 to A
F84D 973B             (        forth.asm):03523 (3)             sta     NBCTFB0
F84F 9F24             (        forth.asm):03524 (4)     @nfrmb0 stx     UBLK            Update BLK
F851 104F             (        forth.asm):03525 (2)             clrd
F853 DD22             (        forth.asm):03526 (4)             std     UTOIN           0 >IN !
                      (        forth.asm):03527         * Map the new BLK in, interpret code from there.
F855 7EF7CA           (        forth.asm):03528                 RFXT    jmp,TERPRET+12  XT for INTERPRET
                      (        forth.asm):03529         
F858 89               (        forth.asm):03530         CONTIND fcb     $89             79-STANDARD (REF)
F859 434F4E54494E5545 (        forth.asm):03531                 fcc     'CONTINUED'     ( nextblk -- )
     44
F862 F83D             (        forth.asm):03532                 fdb     NXTBLK
F864 C7               (        forth.asm):03533                 RFCS
F865 BDE7FB           (        forth.asm):03534 (7)             jsr     NPOP            NEXTBLK to X
F868 1037C1           (        forth.asm):03535 (4)             cmpr    0,x             Cannot interpret from block 0!
F86B 26DB             (        forth.asm):03536 (3)             bne     NXTBLK1
F86D C60D             (        forth.asm):03537 (2)             ldb     #13             Illegal argument
F86F BDE76A           (        forth.asm):03538 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):03539         
F872 02               (        forth.asm):03540         MILLIS  fcb     2               79-STANDARD (REF)
F873 4D53             (        forth.asm):03541                 fcc     'MS'            ( mscount -- )
F875 F858             (        forth.asm):03542                 fdb     CONTIND
F877 C7               (        forth.asm):03543                 RFCS
F878 BDE7FB           (        forth.asm):03544 (7)             jsr     NPOP
F87B 1037C1           (        forth.asm):03545 (4)             cmpr    0,x
F87E 2601             (        forth.asm):03546 (3)             bne     MILLIS1
F880 39               (        forth.asm):03547 (4)             rts
F881 CC031A           (        forth.asm):03548 (3)     MILLIS1 ldd     #MSLCNT
F884 104A             (        forth.asm):03549 (2)     @ms2    decd
F886 26FC             (        forth.asm):03550 (3)             bne     @ms2
F888 301F             (        forth.asm):03551 (4+1)           leax    -1,x
F88A 26F5             (        forth.asm):03552 (3)             bne     MILLIS1
F88C 39               (        forth.asm):03553 (4)             rts
                      (        forth.asm):03554         
F88D 04               (        forth.asm):03555         KEYP    fcb     4               ANSI (Facility)
F88E 4B45593F         (        forth.asm):03556                 fcc     'KEY?'          ( -- flag )
F892 F872             (        forth.asm):03557                 fdb     MILLIS
F894 C7               (        forth.asm):03558                 RFCS
F895 1FC1             (        forth.asm):03559 (4)             tfr     0,x
F897 0D42             (        forth.asm):03560 (4)             tst     SERBCNT
F899 2702             (        forth.asm):03561 (3)             beq     @done
F89B 3001             (        forth.asm):03562 (4+1)           leax    1,x             Return the 79-STANDARD true flag
F89D 7EE7ED           (        forth.asm):03563 (3)     @done   jmp     NPUSH
                      (        forth.asm):03564         
F8A0 03               (        forth.asm):03565         KEY     fcb     3               79-STANDARD (REQ100)
F8A1 4B4559           (        forth.asm):03566                 fcc     'KEY'
F8A4 F88D             (        forth.asm):03567                 fdb     KEYP
F8A6 C7               (        forth.asm):03568                 RFCS
F8A7 BDE2B4           (        forth.asm):03569 (7)             jsr     GETCH
F8AA 1F89             (        forth.asm):03570 (4)             tfr     a,b
F8AC 4F               (        forth.asm):03571 (1)             clra
F8AD 1F01             (        forth.asm):03572 (4)             tfr     d,x
F8AF 7EE7ED           (        forth.asm):03573 (3)             jmp     NPUSH
                      (        forth.asm):03574         
F8B2 04               (        forth.asm):03575         EMIT    fcb     4               79-STANDARD (REQ207)
F8B3 454D4954         (        forth.asm):03576                 fcc     'EMIT'
F8B7 F8A0             (        forth.asm):03577                 fdb     KEY
F8B9 C7               (        forth.asm):03578                 RFCS
F8BA BDE7FB           (        forth.asm):03579 (7)             jsr     NPOP
F8BD 1F10             (        forth.asm):03580 (4)             tfr     x,d
F8BF 1F98             (        forth.asm):03581 (4)             tfr     b,a
F8C1 7EE2E0           (        forth.asm):03582 (3)             jmp     PUTCH
                      (        forth.asm):03583         
F8C4 01               (        forth.asm):03584         PLUS    fcb     1               79-STANDARD (REQ121)
F8C5 2B               (        forth.asm):03585                 fcc     '+'             ( n1 n2 -- sum )
F8C6 F8B2             (        forth.asm):03586                 fdb     EMIT
F8C8 C7               (        forth.asm):03587                 RFCS
F8C9 BDE49A           (        forth.asm):03588 (7)             jsr     MIN2PST         We need at least two cells stacked up
F8CC EC42             (        forth.asm):03589 (5+1)           ldd     2,u             N1
F8CE E3C4             (        forth.asm):03590 (5+0)           addd    ,u              N2
F8D0 ED42             (        forth.asm):03591 (5+1)           std     2,u             SUM
F8D2 3342             (        forth.asm):03592 (4+1)           leau    2,u             Drop the top cell
F8D4 39               (        forth.asm):03593 (4)             rts
                      (        forth.asm):03594         
F8D5 02               (        forth.asm):03595         ONEP    fcb     2               79-STANDARD (REQ107)
F8D6 312B             (        forth.asm):03596                 fcc     '1+'
F8D8 F8C4             (        forth.asm):03597                 fdb     PLUS
F8DA C7               (        forth.asm):03598                 RFCS
F8DB BDE495           (        forth.asm):03599 (7)             jsr     MIN1PST         We need at least one cell stacked up
F8DE ECC4             (        forth.asm):03600 (5+0)           ldd     ,u
F8E0 104C             (        forth.asm):03601 (2)             incd
F8E2 EDC4             (        forth.asm):03602 (5+0)           std     ,u
F8E4 39               (        forth.asm):03603 (4)             rts
                      (        forth.asm):03604         
F8E5 02               (        forth.asm):03605         TWOP    fcb     2               79-STANDARD (REQ135)
F8E6 322B             (        forth.asm):03606                 fcc     '2+'            ( n -- n+2 )
F8E8 F8D5             (        forth.asm):03607                 fdb     ONEP
F8EA C7               (        forth.asm):03608                 RFCS
F8EB BDE495           (        forth.asm):03609 (7)             jsr     MIN1PST         We need at least one cell stacked up
F8EE ECC4             (        forth.asm):03610 (5+0)           ldd     ,u
F8F0 C30002           (        forth.asm):03611 (3)             addd    #2
F8F3 EDC4             (        forth.asm):03612 (5+0)           std     ,u
F8F5 39               (        forth.asm):03613 (4)             rts
                      (        forth.asm):03614         
F8F6 01               (        forth.asm):03615         MINUS   fcb     1               79-STANDARD (REQ134)
F8F7 2D               (        forth.asm):03616                 fcc     '-'             ( n1 n2 -- dif )
F8F8 F8E5             (        forth.asm):03617                 fdb     TWOP
F8FA C7               (        forth.asm):03618                 RFCS
F8FB BDE49A           (        forth.asm):03619 (7)             jsr     MIN2PST         We need at least two cells stacked up
F8FE EC42             (        forth.asm):03620 (5+1)           ldd     2,u             N1
F900 A3C4             (        forth.asm):03621 (5+0)           subd    ,u              N2
F902 ED42             (        forth.asm):03622 (5+1)           std     2,u             DIF
F904 3342             (        forth.asm):03623 (4+1)           leau    2,u             Drop the top cell
F906 39               (        forth.asm):03624 (4)             rts
                      (        forth.asm):03625         
F907 02               (        forth.asm):03626         ONEM    fcb     2               79-STANDARD (REQ105)
F908 312D             (        forth.asm):03627                 fcc     '1-'
F90A F8F6             (        forth.asm):03628                 fdb     MINUS
F90C C7               (        forth.asm):03629                 RFCS
F90D BDE495           (        forth.asm):03630 (7)             jsr     MIN1PST         We need at least one cell stacked up
F910 ECC4             (        forth.asm):03631 (5+0)           ldd     ,u
F912 104A             (        forth.asm):03632 (2)             decd
F914 EDC4             (        forth.asm):03633 (5+0)           std     ,u
F916 39               (        forth.asm):03634 (4)             rts
                      (        forth.asm):03635         
F917 02               (        forth.asm):03636         TWOM    fcb     2               79-STANDARD (REQ129)
F918 322D             (        forth.asm):03637                 fcc     '2-'
F91A F907             (        forth.asm):03638                 fdb     ONEM
F91C C7               (        forth.asm):03639                 RFCS
F91D BDE495           (        forth.asm):03640 (7)             jsr     MIN1PST         We need at least one cell stacked up
F920 ECC4             (        forth.asm):03641 (5+0)           ldd     ,u
F922 830002           (        forth.asm):03642 (3)             subd    #2
F925 EDC4             (        forth.asm):03643 (5+0)           std     ,u
F927 39               (        forth.asm):03644 (4)             rts
                      (        forth.asm):03645         
F928 01               (        forth.asm):03646         ZEROL   fcb     1               Non-standard
F929 30               (        forth.asm):03647                 fcc     '0'
F92A F917             (        forth.asm):03648                 fdb     TWOM
F92C C7               (        forth.asm):03649                 RFCS
F92D 1FC1             (        forth.asm):03650 (4)             tfr     0,x
F92F 7EE7ED           (        forth.asm):03651 (3)             jmp     NPUSH
                      (        forth.asm):03652         
F932 01               (        forth.asm):03653         ONEL    fcb     1               Non-standard
F933 31               (        forth.asm):03654                 fcc     '1'
F934 F928             (        forth.asm):03655                 fdb     ZEROL
F936 C7               (        forth.asm):03656                 RFCS
F937 8E0001           (        forth.asm):03657 (3)             ldx     #1
F93A 7EE7ED           (        forth.asm):03658 (3)             jmp     NPUSH
                      (        forth.asm):03659         
F93D 01               (        forth.asm):03660         TWOL    fcb     1               Non-standard
F93E 32               (        forth.asm):03661                 fcc     '2'
F93F F932             (        forth.asm):03662                 fdb     ONEL
F941 C7               (        forth.asm):03663                 RFCS
F942 8E0002           (        forth.asm):03664 (3)             ldx     #2
F945 7EE7ED           (        forth.asm):03665 (3)             jmp     NPUSH
                      (        forth.asm):03666         
F948 05               (        forth.asm):03667         SHIFT   fcb     5               79-STANDARD (Ref)
F949 5348494654       (        forth.asm):03668                 fcc     'SHIFT'
F94E F93D             (        forth.asm):03669                 fdb     TWOL
F950 C7               (        forth.asm):03670                 RFCS
F951 BDE49A           (        forth.asm):03671 (7)             jsr     MIN2PST         Two cells need to be stacked up
F954 10A6C4           (        forth.asm):03672 (6+0)           ldw     ,u              Shift bitcount
F957 EC42             (        forth.asm):03673 (5+1)           ldd     2,u             The data itself
F959 105D             (        forth.asm):03674 (2)     @shftlp tstw
F95B 270E             (        forth.asm):03675 (3)             beq     @shfdon
F95D 2D06             (        forth.asm):03676 (3)             blt     @shftrg
F95F 1048             (        forth.asm):03677 (2)             lsld                    Shift left (W is positive)
F961 105A             (        forth.asm):03678 (2)             decw
F963 20F4             (        forth.asm):03679 (3)             bra     @shftlp
F965 1044             (        forth.asm):03680 (2)     @shftrg lsrd                    Shift right (W is negative)
F967 105C             (        forth.asm):03681 (2)             incw
F969 20EE             (        forth.asm):03682 (3)             bra     @shftlp
F96B ED42             (        forth.asm):03683 (5+1)   @shfdon std     2,u             Return value stored there
F96D 3342             (        forth.asm):03684 (4+1)           leau    2,u             Drop one cell from the data stack
F96F 39               (        forth.asm):03685 (4)             rts
                      (        forth.asm):03686         
                      (        forth.asm):03687         * Signed multiplication by hardware support.
F970 01               (        forth.asm):03688         MULT    fcb     1               79-STANDARD (REQ138)
F971 2A               (        forth.asm):03689                 fcc     '*'
F972 F948             (        forth.asm):03690                 fdb     SHIFT
F974 C7               (        forth.asm):03691                 RFCS
F975 BDE49A           (        forth.asm):03692 (7)             jsr     MIN2PST         Two cells need to be stacked up
F978 EC42             (        forth.asm):03693 (5+1)           ldd     2,u
F97A 11AFC4           (        forth.asm):03694 (30+0)          muld    ,u
F97D 10A742           (        forth.asm):03695 (6+1)           stw     2,u             Return only the lower 16 bits
F980 3342             (        forth.asm):03696 (4+1)           leau    2,u             Drop one cell from the data stack
F982 39               (        forth.asm):03697 (4)             rts
                      (        forth.asm):03698         
F983 02               (        forth.asm):03699         TWOTIM  fcb     2               79-STANDARD (REF)
F984 322A             (        forth.asm):03700                 fcc     '2*'
F986 F970             (        forth.asm):03701                 fdb     MULT
F988 C7               (        forth.asm):03702                 RFCS
F989 BDE495           (        forth.asm):03703 (7)             jsr     MIN1PST         One cell needs to be stacked up
F98C ECC4             (        forth.asm):03704 (5+0)           ldd     ,u
F98E 1048             (        forth.asm):03705 (2)             asld
F990 EDC4             (        forth.asm):03706 (5+0)           std     ,u
F992 39               (        forth.asm):03707 (4)             rts
                      (        forth.asm):03708         
F993 02               (        forth.asm):03709         TWODIV  fcb     2
F994 322F             (        forth.asm):03710                 fcc     '2/'
F996 F983             (        forth.asm):03711                 fdb     TWOTIM
F998 C7               (        forth.asm):03712                 RFCS
F999 BDE495           (        forth.asm):03713 (7)             jsr     MIN1PST         One cell needs to be stacked up
F99C ECC4             (        forth.asm):03714 (5+0)           ldd     ,u
F99E 1047             (        forth.asm):03715 (2)             asrd
F9A0 EDC4             (        forth.asm):03716 (5+0)           std     ,u
F9A2 39               (        forth.asm):03717 (4)             rts
                      (        forth.asm):03718         
                      (        forth.asm):03719         * /, MOD and /MOD are essentially the same function returning
                      (        forth.asm):03720         * the different parts returned by DIVQ.
                      (        forth.asm):03721         * We use a global variable to distinguish which functionality
                      (        forth.asm):03722         * is being requested:
                      (        forth.asm):03723         * 0: return the modulo and the quotient (/MOD).
                      (        forth.asm):03724         * 1: return the modulo only (MOD).
                      (        forth.asm):03725         * 2: return the quotient only (/).
F9A3 01               (        forth.asm):03726         DIV     fcb     1               79-STANDARD (REQ178)
F9A4 2F               (        forth.asm):03727                 fcc     '/'             ( N1 N2 -- N3 [N4] )
F9A5 F993             (        forth.asm):03728                 fdb     TWODIV
F9A7 C7               (        forth.asm):03729                 RFCS
F9A8 8602             (        forth.asm):03730 (2)             lda     #2
F9AA 9731             (        forth.asm):03731 (3)             sta     DIVFCN          Function 2: return only the quotient
F9AC BDE49A           (        forth.asm):03732 (7)     DIV1    jsr     MIN2PST         At least two cells need to be stacked up
F9AF 0F32             (        forth.asm):03733 (5)             clr     F83DIVF         Assume no adjustment required for floored div.
F9B1 A642             (        forth.asm):03734 (4+1)           lda     2,u             Numerator's MSB
F9B3 A8C4             (        forth.asm):03735 (4+0)           eora    ,u              Different sign from the denominator's MSB?
F9B5 2A02             (        forth.asm):03736 (3)             bpl     @divprc         No, proceed to the division code
F9B7 0C32             (        forth.asm):03737 (5)             inc     F83DIVF         Numerator and denominator have different signs
                      (        forth.asm):03738         * Division by zero conditions are dealt with through the trap handler.
F9B9 104F             (        forth.asm):03739 (2)     @divprc clrd                    Clear the numerator's MSC
F9BB 10A642           (        forth.asm):03740 (6+1)           ldw     2,u             Numerator's LSC
F9BE 2A02             (        forth.asm):03741 (3)             bpl     @dvnsex         Branch if no sign extention is needed
                      (        forth.asm):03742         * Sign extention from W to Q.
F9C0 1043             (        forth.asm):03743 (2)             comd                    -1 to D (numerator's MSC)
F9C2 11AEC4           (        forth.asm):03744 (36)    @dvnsex divq    ,u              ,u has the denominator
F9C5 8D19             (        forth.asm):03745 (6)             bsr     FDIVADJ         Perform floored division adjustment, if needed
F9C7 0D31             (        forth.asm):03746 (4)     @no83ad tst     DIVFCN
F9C9 2606             (        forth.asm):03747 (3)             bne     @div4
F9CB ED42             (        forth.asm):03748 (5+1)           std     2,u             Function 0: return the modulo and the quotient
F9CD 10A7C4           (        forth.asm):03749 (6+0)   @div3   stw     ,u              Function 2: return only the quotient
F9D0 39               (        forth.asm):03750 (4)             rts
F9D1 3342             (        forth.asm):03751 (4+1)   @div4   leau    2,u             Drop one cell from the data stack
F9D3 1F07             (        forth.asm):03752 (4)             tfr     d,v             Backup the modulo
F9D5 9631             (        forth.asm):03753 (3)             lda     DIVFCN
F9D7 8101             (        forth.asm):03754 (2)             cmpa    #1
F9D9 26F2             (        forth.asm):03755 (3)             bne     @div3
F9DB 1F70             (        forth.asm):03756 (4)             tfr     v,d             Restore the modulo
F9DD EDC4             (        forth.asm):03757 (5+0)           std     ,u              Function 1: return only the modulo
F9DF 39               (        forth.asm):03758 (4)             rts
                      (        forth.asm):03759         
                      (        forth.asm):03760         * Quotient is returned in W, modulo in D but this is symmetric division :-(
                      (        forth.asm):03761         * Need to return a floored division result for compat. with F83 and ANSI impls.
F9E0 104D             (        forth.asm):03762 (2)     FDIVADJ tstd                    Is the remainder zero?
F9E2 2708             (        forth.asm):03763 (3)             beq     @no83ad         Yes. No adjusment required for floored division
F9E4 0D32             (        forth.asm):03764 (4)             tst     F83DIVF         Different signs for numerator and denominator?
F9E6 2704             (        forth.asm):03765 (3)             beq     @no83ad         No. Adjusment not needed for floored division
                      (        forth.asm):03766         * Adjusment for F83 floored division.
F9E8 105A             (        forth.asm):03767 (2)             decw                    Decrement the quotient
F9EA E3C4             (        forth.asm):03768 (5+0)           addd    ,u              Add the denominator to the modulo
F9EC 39               (        forth.asm):03769 (4)     @no83ad rts
                      (        forth.asm):03770         
F9ED 03               (        forth.asm):03771         MOD     fcb     3               79-STANDARD (REQ104)
F9EE 4D4F44           (        forth.asm):03772                 fcc     'MOD'           ( N1 N2 -- N3 )
F9F1 F9A3             (        forth.asm):03773                 fdb     DIV
F9F3 C7               (        forth.asm):03774                 RFCS
F9F4 8601             (        forth.asm):03775 (2)             lda     #1
F9F6 9731             (        forth.asm):03776 (3)             sta     DIVFCN
F9F8 20B2             (        forth.asm):03777 (3)             bra     DIV1
                      (        forth.asm):03778         
F9FA 04               (        forth.asm):03779         MDIV    fcb     4               79-STANDARD (REQ198)
F9FB 2F4D4F44         (        forth.asm):03780                 fcc     '/MOD'          ( N1 N2 -- N3 N4 )
F9FF F9ED             (        forth.asm):03781                 fdb     MOD
FA01 C7               (        forth.asm):03782                 RFCS
FA02 0F31             (        forth.asm):03783 (5)             clr     DIVFCN
FA04 20A6             (        forth.asm):03784 (3)             bra     DIV1
                      (        forth.asm):03785         
FA06 02               (        forth.asm):03786         STRSLSH fcb     2               79-STANDARD (REQ220)
FA07 2A2F             (        forth.asm):03787                 fcc     '*/'            ( N1 N2 N3 -- N4 [N5] )
FA09 F9FA             (        forth.asm):03788                 fdb     MDIV
FA0B C7               (        forth.asm):03789                 RFCS
FA0C 8601             (        forth.asm):03790 (2)             lda     #1
FA0E 9733             (        forth.asm):03791 (3)             sta     STSLFCN
FA10 BDE49F           (        forth.asm):03792 (7)     STRSL1  jsr     MIN3PST         Three cells need to be stacked up
FA13 0F32             (        forth.asm):03793 (5)             clr     F83DIVF         Assume no adjustment required for floored div.
                      (        forth.asm):03794         * Division by zero conditions are dealt with through the trap handler.
FA15 EC44             (        forth.asm):03795 (5+1)           ldd     4,u             N1
FA17 11AF42           (        forth.asm):03796 (30+1)          muld    2,u             N2 (N1 * N2 -> D:W)
FA1A 3402             (        forth.asm):03797 (4+1)           pshs    a               Product's MSC's MSB
FA1C A8C4             (        forth.asm):03798 (4+0)           eora    ,u              Different sign from the denominator's?
FA1E 2A02             (        forth.asm):03799 (3)             bpl     @stslpr         No. Floored division adjustment not needed
FA20 0C32             (        forth.asm):03800 (5)             inc     F83DIVF
FA22 3502             (        forth.asm):03801 (4+1)   @stslpr puls    a
FA24 11AEC4           (        forth.asm):03802 (36)            divq    ,u              N3
FA27 8DB7             (        forth.asm):03803 (6)             bsr     FDIVADJ         Perform floored division adjustment, if needed
FA29 3342             (        forth.asm):03804 (4+1)           leau    2,u
FA2B 0D33             (        forth.asm):03805 (4)             tst     STSLFCN
FA2D 2606             (        forth.asm):03806 (3)             bne     @strsl2         Just the quotient, Ma'am!
FA2F ED42             (        forth.asm):03807 (5+1)           std     2,u             N4: the modulo
FA31 10A7C4           (        forth.asm):03808 (6+0)           stw     ,u              N5: the quotient
FA34 39               (        forth.asm):03809 (4)             rts
FA35 3342             (        forth.asm):03810 (4+1)   @strsl2 leau    2,u
FA37 10A7C4           (        forth.asm):03811 (6+0)           stw     ,u              N4
FA3A 39               (        forth.asm):03812 (4)             rts
                      (        forth.asm):03813         
FA3B 05               (        forth.asm):03814         STRSLMD fcb     5               79-STANDARD (REQ192)
FA3C 2A2F4D4F44       (        forth.asm):03815                 fcc     '*/MOD'         ( N1 N2 N3 -- N4 N5 )
FA41 FA06             (        forth.asm):03816                 fdb     STRSLSH
FA43 C7               (        forth.asm):03817                 RFCS
FA44 0F33             (        forth.asm):03818 (5)             clr     STSLFCN
FA46 20C8             (        forth.asm):03819 (3)             bra     STRSL1
                      (        forth.asm):03820         
                      (        forth.asm):03821         * Returns the current value of the Sreg register (informational only).
                      (        forth.asm):03822         * This word is either called (JSROPC) or jumped to (JMPOPC), as a result
                      (        forth.asm):03823         * of the tail call optimization process. There is no way to tell the
                      (        forth.asm):03824         * difference. Here we assume that it is called and return Sreg.
FA48 01               (        forth.asm):03825         SYSSTK  fcb     1               Non-standard
FA49 53               (        forth.asm):03826                 fcc     'S'
FA4A FA3B             (        forth.asm):03827                 fdb     STRSLMD
FA4C C7               (        forth.asm):03828                 RFCS
FA4D 1F41             (        forth.asm):03829 (4)             tfr     s,x
FA4F 7EE7ED           (        forth.asm):03830 (3)             jmp     NPUSH
                      (        forth.asm):03831         
FA52 02               (        forth.asm):03832         SYSSTAT fcb     2
FA53 5340             (        forth.asm):03833                 fcc     'S@'
FA55 FA48             (        forth.asm):03834                 fdb     SYSSTK
FA57 C7               (        forth.asm):03835                 RFCS
FA58 AEE4             (        forth.asm):03836 (5+0)           ldx     ,s
FA5A 7EE7ED           (        forth.asm):03837 (3)             jmp     NPUSH
                      (        forth.asm):03838         
FA5D 07               (        forth.asm):03839         PAYLOAD fcb     7               Non standard
FA5E 5041594C4F4144   (        forth.asm):03840                 fcc     'PAYLOAD'       ( -- len ) where len is the code payload
FA65 FA52             (        forth.asm):03841                 fdb     SYSSTAT         of the word located by FIND (or NULL)
FA67 C7               (        forth.asm):03842                 RFCS
FA68 9E10             (        forth.asm):03843 (4)             ldx     FNDPLD          Code payload reported by FIND
FA6A 7EE7ED           (        forth.asm):03844 (3)             jmp     NPUSH
                      (        forth.asm):03845         
                      (        forth.asm):03846         * Differences from the original code:
                      (        forth.asm):03847         * - display number in HEX rather than in the current base.
                      (        forth.asm):03848         * - dropped feat: the original stuff was interactively paged by 15 line screens.
                      (        forth.asm):03849         * - added feat: display code implementation payload.
                      (        forth.asm):03850         * - added feat: display the immedediate and define (compile time only) flags.
                      (        forth.asm):03851         * - added feat: display the forgettable status (R/W). Everything user
                      (        forth.asm):03852         *   defined is forgettable (i.e. RAM resident).
FA6D 05               (        forth.asm):03853         VLIST   fcb     5               Non-standard
FA6E 564C495354       (        forth.asm):03854                 fcc     'VLIST'         ( -- )
FA73 FA5D             (        forth.asm):03855                 fdb     PAYLOAD
FA75 C7               (        forth.asm):03856                 RFCS
FA76 9E08             (        forth.asm):03857 (4)             ldx     DICEND
FA78 9F16             (        forth.asm):03858 (4)             stx     VLPRVEP         Last word code address + 1
FA7A 9E06             (        forth.asm):03859 (4)             ldx     LSTWAD
FA7C 9F18             (        forth.asm):03860 (4)     @vlist1 stx     VLPRVHD         Last word header pointer
FA7E 108E03EA         (        forth.asm):03861 (4)             ldy     #TBUFF
FA82 E680             (        forth.asm):03862 (4+1)           ldb     ,x+
FA84 3404             (        forth.asm):03863 (4+1)           pshs    b
FA86 C41F             (        forth.asm):03864 (2)             andb    #WRLNMSK        Mask out word length
FA88 4F               (        forth.asm):03865 (1)             clra
FA89 3404             (        forth.asm):03866 (4+1)           pshs    b               Preserve word length
FA8B 1F06             (        forth.asm):03867 (4)             tfr     d,w
FA8D 113812           (        forth.asm):03868 (6+?)           tfm     x+,y+
FA90 3502             (        forth.asm):03869 (4+1)           puls    a               Restore word length to A
FA92 C620             (        forth.asm):03870 (2)             ldb     #WRLNMSK+1
FA94 103289           (        forth.asm):03871 (4)             subr    a,b             Number of spaces we want to emit
FA97 8620             (        forth.asm):03872 (2)             lda     #SP
FA99 A7A0             (        forth.asm):03873 (4+1)   @vlist2 sta     ,y+
FA9B 5A               (        forth.asm):03874 (1)             decb
FA9C 26FB             (        forth.asm):03875 (3)             bne     @vlist2
FA9E 6FA0             (        forth.asm):03876 (6+1)           clr     ,y+             Terminate formatted output string
FAA0 3410             (        forth.asm):03877 (4+2)           pshs    x               Address of the current word backlink address
FAA2 BDE300           (        forth.asm):03878 (7)             jsr     PUTCR           Carriage return is output before anything else
FAA5 8E03EA           (        forth.asm):03879 (3)             ldx     #TBUFF
FAA8 BDE2F3           (        forth.asm):03880 (7)             jsr     PUTS            Output word name formatted on 17 chars + SP
FAAB AEE4             (        forth.asm):03881 (5+0)           ldx     ,s
                      (        forth.asm):03882                 IFNE    RELFEAT
FAAD 3003             (        forth.asm):03883 (4+1)           leax    3,x             Word XT to X (Skip backlink and checksum)
                      (        forth.asm):03884                 ELSE
                      (        forth.asm):03885                 leax    2,x             Word XT to X (Skip backlink)
                      (        forth.asm):03886                 ENDC                    RELFEAT
FAAF 1F10             (        forth.asm):03887 (4)             tfr     x,d             CVNSTR depends on UBASE and we want HEX output
FAB1 108E03EA         (        forth.asm):03888 (4)             ldy     #TBUFF
FAB5 BDE195           (        forth.asm):03889 (7)             jsr     HDMP4           So we use trusted debugging code
FAB8 8E03EA           (        forth.asm):03890 (3)             ldx     #TBUFF
FABB BDE2F3           (        forth.asm):03891 (7)             jsr     PUTS
                      (        forth.asm):03892         * Now to display word implementation length.
                      (        forth.asm):03893         * Implementation code length is from ,s+3 (or 2) to VLPRVEP
FABE 8609             (        forth.asm):03894 (2)             lda     #HT
FAC0 BDE2E0           (        forth.asm):03895 (7)             jsr     PUTCH
FAC3 9E16             (        forth.asm):03896 (4)             ldx     VLPRVEP
FAC5 10AEE4           (        forth.asm):03897 (6+0)           ldy     ,s
                      (        forth.asm):03898                 IFNE    RELFEAT
FAC8 3123             (        forth.asm):03899 (4+1)           leay    3,y             Current word code entry address
                      (        forth.asm):03900                 ELSE
                      (        forth.asm):03901                 leay    2,y             Current word code entry address
                      (        forth.asm):03902                 ENDC                    RELFEAT
FACA 103221           (        forth.asm):03903 (4)             subr    y,x
FACD 1F10             (        forth.asm):03904 (4)             tfr     x,d
FACF 108E03EA         (        forth.asm):03905 (4)             ldy     #TBUFF
FAD3 BDE195           (        forth.asm):03906 (7)             jsr     HDMP4
FAD6 8E03EA           (        forth.asm):03907 (3)             ldx     #TBUFF
FAD9 BDE2F3           (        forth.asm):03908 (7)             jsr     PUTS
                      (        forth.asm):03909         # Display attribute flags.
FADC 8609             (        forth.asm):03910 (2)             lda     #HT
FADE BDE2E0           (        forth.asm):03911 (7)             jsr     PUTCH
FAE1 8E03EA           (        forth.asm):03912 (3)             ldx     #TBUFF
FAE4 E662             (        forth.asm):03913 (4+1)           ldb     2,s             Word attribute to B
FAE6 862D             (        forth.asm):03914 (2)             lda     #'-
FAE8 C580             (        forth.asm):03915 (2)             bitb    #IMDFLM         Check for immediate
FAEA 2702             (        forth.asm):03916 (3)             beq     @vlist4
FAEC 8649             (        forth.asm):03917 (2)             lda     #'I
FAEE A780             (        forth.asm):03918 (4+1)   @vlist4 sta     ,x+
FAF0 862D             (        forth.asm):03919 (2)             lda     #'-
FAF2 C540             (        forth.asm):03920 (2)             bitb    #DEFFLM         Check for define (compile time only)
FAF4 2702             (        forth.asm):03921 (3)             beq     @vlist5
FAF6 8643             (        forth.asm):03922 (2)             lda     #'C
FAF8 A780             (        forth.asm):03923 (4+1)   @vlist5 sta     ,x+
                      (        forth.asm):03924                 IFNE    RELFEAT
FAFA 862D             (        forth.asm):03925 (2)             lda     #'-
FAFC C520             (        forth.asm):03926 (2)             bitb    #MONFLM         Check for monitored status
FAFE 2702             (        forth.asm):03927 (3)             beq     @vlst51
FB00 864D             (        forth.asm):03928 (2)             lda     #'M
FB02 A780             (        forth.asm):03929 (4+1)   @vlst51 sta     ,x+
                      (        forth.asm):03930                 ENDC                    RELFEAT
                      (        forth.asm):03931         * Check for forgettable also. In ROM => R else W unless we just processed '@'.
FB04 8652             (        forth.asm):03932 (2)             lda     #'R
FB06 10AEE4           (        forth.asm):03933 (6+0)           ldy     ,s
                      (        forth.asm):03934                 IFNE    RELFEAT
FB09 3123             (        forth.asm):03935 (4+1)           leay    3,y             Word entry point to Y
                      (        forth.asm):03936                 ELSE
                      (        forth.asm):03937                 leay    2,y             Word entry point to Y
                      (        forth.asm):03938                 ENDC                    RELFEAT
FB0B 108C0C65         (        forth.asm):03939 (4)             cmpy    #RAMFTCH        @ in RAM is unforgettable
FB0F 2708             (        forth.asm):03940 (3)             beq     @vlist6
FB11 108CE000         (        forth.asm):03941 (4)             cmpy    #ROMSTRT        as are all ROM resident words
FB15 2402             (        forth.asm):03942 (3)             bcc     @vlist6
FB17 8657             (        forth.asm):03943 (2)             lda     #'W
FB19 A780             (        forth.asm):03944 (4+1)   @vlist6 sta     ,x+
FB1B 6F84             (        forth.asm):03945 (6+0)           clr     ,x
FB1D 8E03EA           (        forth.asm):03946 (3)             ldx     #TBUFF
FB20 BDE2F3           (        forth.asm):03947 (7)             jsr     PUTS
                      (        forth.asm):03948         * The point at which VLPRVHD==WDICSPC is a singularity (RAM to ROM transition).
FB23 9E18             (        forth.asm):03949 (4)             ldx     VLPRVHD
FB25 8C0C60           (        forth.asm):03950 (3)             cmpx    #WDICSPC
FB28 2608             (        forth.asm):03951 (3)             bne     @vlist7
FB2A 8EFE00           (        forth.asm):03952 (3)             ldx     #QMARK          Word just before @ (ROM flavor)
FB2D 9F18             (        forth.asm):03953 (4)             stx     VLPRVHD
FB2F 8EFE0B           (        forth.asm):03954 (3)             ldx     #THEEND
FB32 9F16             (        forth.asm):03955 (4)     @vlist7 stx     VLPRVEP
FB34 3510             (        forth.asm):03956 (4+2)           puls    x
FB36 3504             (        forth.asm):03957 (4+1)           puls    b
FB38 AE84             (        forth.asm):03958 (5+0)           ldx     ,x              Point to previous word
FB3A 1026FF3E         (        forth.asm):03959 (5)             lbne    @vlist1
FB3E 39               (        forth.asm):03960 (4)             rts
                      (        forth.asm):03961         
FB3F 05               (        forth.asm):03962         STATE   fcb     5
FB40 5354415445       (        forth.asm):03963                 fcc     'STATE'
FB45 FA6D             (        forth.asm):03964                 fdb     VLIST
FB47 C7               (        forth.asm):03965                 RFCS
FB48 8E0120           (        forth.asm):03966 (3)             ldx     #USTATE
FB4B 7EE7ED           (        forth.asm):03967 (3)             jmp     NPUSH
                      (        forth.asm):03968         
FB4E 04               (        forth.asm):03969         BASE    fcb     4               79-STANDARD (REQ115)
FB4F 42415345         (        forth.asm):03970                 fcc     'BASE'
FB53 FB3F             (        forth.asm):03971                 fdb     STATE
FB55 C7               (        forth.asm):03972                 RFCS
FB56 8E011E           (        forth.asm):03973 (3)             ldx     #UBASE
FB59 7EE7ED           (        forth.asm):03974 (3)             jmp     NPUSH
                      (        forth.asm):03975         
FB5C 03               (        forth.asm):03976         BIN     fcb     3               Non-standard
FB5D 42494E           (        forth.asm):03977                 fcc     'BIN'
FB60 FB4E             (        forth.asm):03978                 fdb     BASE
FB62 C7               (        forth.asm):03979                 RFCS
FB63 CC0002           (        forth.asm):03980 (3)             ldd     #2
FB66 DD1E             (        forth.asm):03981 (4)             std     UBASE
FB68 39               (        forth.asm):03982 (4)             rts
                      (        forth.asm):03983         
FB69 05               (        forth.asm):03984         OCTAL   fcb     5               79-STANDARD (REF)
FB6A 4F4354414C       (        forth.asm):03985                 fcc     'OCTAL'
FB6F FB5C             (        forth.asm):03986                 fdb     BIN
FB71 C7               (        forth.asm):03987                 RFCS
FB72 CC0008           (        forth.asm):03988 (3)             ldd     #8
FB75 DD1E             (        forth.asm):03989 (4)             std     UBASE
FB77 39               (        forth.asm):03990 (4)             rts
                      (        forth.asm):03991         
FB78 07               (        forth.asm):03992         DECIMAL fcb     7               79-STANDARD (REQ197)
FB79 444543494D414C   (        forth.asm):03993                 fcc     'DECIMAL'
FB80 FB69             (        forth.asm):03994                 fdb     OCTAL
FB82 C7               (        forth.asm):03995                 RFCS
FB83 CC000A           (        forth.asm):03996 (3)             ldd     #10
FB86 DD1E             (        forth.asm):03997 (4)             std     UBASE
FB88 39               (        forth.asm):03998 (4)             rts
                      (        forth.asm):03999         
FB89 03               (        forth.asm):04000         HEX     fcb     3               79-STANDARD (REF162)
FB8A 484558           (        forth.asm):04001                 fcc     'HEX'
FB8D FB78             (        forth.asm):04002                 fdb     DECIMAL
FB8F C7               (        forth.asm):04003                 RFCS
FB90 CC0010           (        forth.asm):04004 (3)             ldd     #16
FB93 DD1E             (        forth.asm):04005 (4)             std     UBASE
FB95 39               (        forth.asm):04006 (4)             rts
                      (        forth.asm):04007         
FB96 02               (        forth.asm):04008         DOTTICK fcb     2               Non-standard (SwiftForth)
FB97 2E27             (        forth.asm):04009                 fcb     $2E,$27         .' ( memaddr -- )
FB99 FB89             (        forth.asm):04010                 fdb     HEX
FB9B C7               (        forth.asm):04011                 RFCS
                      (        forth.asm):04012                 IFNE    SSDFEAT
FB9C BDE7FB           (        forth.asm):04013 (7)             jsr     NPOP
FB9F 1F12             (        forth.asm):04014 (4)             tfr     x,y
FBA1 8E039A           (        forth.asm):04015 (3)             ldx     #HEXBUF
FBA4 BDE62A           (        forth.asm):04016 (7)             jsr     FINDSYM
                      (        forth.asm):04017                 ELSE
                      (        forth.asm):04018                 lda     #'$
                      (        forth.asm):04019                 jsr     PUTCH
                      (        forth.asm):04020                 jsr     NPOP
                      (        forth.asm):04021                 tfr     x,d
                      (        forth.asm):04022                 ldy     #HEXBUF
                      (        forth.asm):04023                 jsr     HDMP4
                      (        forth.asm):04024                 ENDC                    SSDFEAT
FBA7 8E039A           (        forth.asm):04025 (3)             ldx     #HEXBUF
FBAA 7EE2F3           (        forth.asm):04026 (3)             jmp     PUTS
                      (        forth.asm):04027         
                      (        forth.asm):04028         * Display a dump of the data stack in the current BASE. In Leo Brodie's
                      (        forth.asm):04029         * "Starting Forth" the data stack is printed from the bottom up. So it is here.
FBAD 02               (        forth.asm):04030         DDUMP   fcb     2               ANSI (Optional "Programming tools" word set)
FBAE 2E53             (        forth.asm):04031                 fcc     '.S'            ( -- )
FBB0 FB96             (        forth.asm):04032                 fdb     DOTTICK
FBB2 C7               (        forth.asm):04033                 RFCS
FBB3 CC0296           (        forth.asm):04034 (3)             ldd     #NSTBOT
FBB6 103230           (        forth.asm):04035 (4)             subr    u,d
FBB9 1044             (        forth.asm):04036 (2)             lsrd                    DEPTH is in D
FBBB 272A             (        forth.asm):04037 (3)             beq     @ndump3         Data stack is empty
FBBD 3440             (        forth.asm):04038 (4+2)           pshs    u
FBBF CE0296           (        forth.asm):04039 (3)             ldu     #NSTBOT         Pointing to the bottom of the data stack
FBC2 8601             (        forth.asm):04040 (2)             lda     #1
FBC4 9737             (        forth.asm):04041 (3)             sta     CVISSGN         Force a signed number conversion
FBC6 3404             (        forth.asm):04042 (4+1)   @ndump1 pshs    b
FBC8 AEC3             (        forth.asm):04043 (5+2)           ldx     ,--u
FBCA BDE441           (        forth.asm):04044 (7)             jsr     CVNSTR
FBCD 8E03EA           (        forth.asm):04045 (3)             ldx     #TBUFF
                      (        forth.asm):04046         # Skip leading spaces.
FBD0 A680             (        forth.asm):04047 (4+1)   @ndump2 lda     ,x+
FBD2 8120             (        forth.asm):04048 (2)             cmpa    #SP
FBD4 27FA             (        forth.asm):04049 (3)             beq     @ndump2
FBD6 301F             (        forth.asm):04050 (4+1)           leax    -1,x
FBD8 BDE2F3           (        forth.asm):04051 (7)             jsr     PUTS
FBDB 8620             (        forth.asm):04052 (2)             lda     #SP
FBDD BDE2E0           (        forth.asm):04053 (7)             jsr     PUTCH
FBE0 3504             (        forth.asm):04054 (4+1)           puls    b
FBE2 5A               (        forth.asm):04055 (1)             decb
FBE3 26E1             (        forth.asm):04056 (3)             bne     @ndump1
FBE5 3540             (        forth.asm):04057 (4+2)           puls    u
FBE7 39               (        forth.asm):04058 (4)     @ndump3 rts
                      (        forth.asm):04059         
FBE8 04               (        forth.asm):04060         QRYDUP  fcb     4               79-STANDARD (REQ184)
FBE9 3F445550         (        forth.asm):04061                 fcc     '?DUP'
FBED FBAD             (        forth.asm):04062                 fdb     DDUMP
FBEF C7               (        forth.asm):04063                 RFCS
FBF0 BDE7FB           (        forth.asm):04064 (7)             jsr     NPOP
FBF3 3610             (        forth.asm):04065                 UCNPUSH                 Push back the original parameter
FBF5 1037C1           (        forth.asm):04066 (4)             cmpr    0,x
FBF8 2601             (        forth.asm):04067 (3)             bne     @qrydp1
FBFA 39               (        forth.asm):04068 (4)             rts
FBFB 7EE7ED           (        forth.asm):04069 (3)     @qrydp1 jmp     NPUSH           And DUP if NZ
                      (        forth.asm):04070         
FBFE 04               (        forth.asm):04071         TUCK    fcb     4               ANSI (Core ext)
FBFF 5455434B         (        forth.asm):04072                 fcc     'TUCK'          ( x1 x2 -- x2 x1 x2 ) i.e. SWAP OVER
FC03 FBE8             (        forth.asm):04073                 fdb     QRYDUP
FC05 C7               (        forth.asm):04074                 RFCS
FC06 8D2F             (        forth.asm):04075                 RFXT    bsr,SWAP+7      XT for SWAP
FC08 2073             (        forth.asm):04076                 RFXT    bra,OVER+7      XT for OVER
                      (        forth.asm):04077         
FC0A 03               (        forth.asm):04078         NIP     fcb     3               ANSI (Core ext)
FC0B 4E4950           (        forth.asm):04079                 fcc     'NIP'           ( x1 x2 -- x2 ) i.e. SWAP DROP
FC0E FBFE             (        forth.asm):04080                 fdb     TUCK
FC10 C7               (        forth.asm):04081                 RFCS
FC11 8D24             (        forth.asm):04082                 RFXT    bsr,SWAP+7      XT for SWAP
FC13 2017             (        forth.asm):04083                 RFXT    bra,DROP+7      XT for DROP
                      (        forth.asm):04084         
FC15 03               (        forth.asm):04085         DUP     fcb     3               79-STANDARD (REQ205)
FC16 445550           (        forth.asm):04086                 fcc     'DUP'
FC19 FC0A             (        forth.asm):04087                 fdb     NIP
FC1B C7               (        forth.asm):04088                 RFCS
FC1C BDE495           (        forth.asm):04089 (7)             jsr     MIN1PST         At least one cell needs to be stacked up
FC1F AEC4             (        forth.asm):04090 (5+0)           ldx     ,u
FC21 7EE7ED           (        forth.asm):04091 (3)             jmp     NPUSH
                      (        forth.asm):04092         
FC24 04               (        forth.asm):04093         DROP    fcb     4               79-STANDARD (REQ233)
FC25 44524F50         (        forth.asm):04094                 fcc     'DROP'
FC29 FC15             (        forth.asm):04095                 fdb     DUP
FC2B C7               (        forth.asm):04096                 RFCS
FC2C 7EE7FB           (        forth.asm):04097 (3)             jmp     NPOP
                      (        forth.asm):04098         
FC2F 04               (        forth.asm):04099         SWAP    fcb     4               79-STANDARD (REQ230)
FC30 53574150         (        forth.asm):04100                 fcc     'SWAP'
FC34 FC24             (        forth.asm):04101                 fdb     DROP
FC36 C7               (        forth.asm):04102                 RFCS
FC37 BDE49A           (        forth.asm):04103 (7)             jsr     MIN2PST         We need at least two cells stacked up
FC3A 10ECC4           (        forth.asm):04104 (8+0)           ldq     ,u              In place SWAP
FC3D 1E06             (        forth.asm):04105 (5)             exg     d,w
FC3F 10EDC4           (        forth.asm):04106 (8+0)           stq     ,u
FC42 39               (        forth.asm):04107 (4)             rts
                      (        forth.asm):04108         
FC43 04               (        forth.asm):04109         PICK    fcb     4
FC44 5049434B         (        forth.asm):04110                 fcc     'PICK'
FC48 FC2F             (        forth.asm):04111                 fdb     SWAP
FC4A C7               (        forth.asm):04112                 RFCS
FC4B BDE7FB           (        forth.asm):04113 (7)             jsr     NPOP
FC4E CC0296           (        forth.asm):04114 (3)     PICK1   ldd     #NSTBOT
FC51 103230           (        forth.asm):04115 (4)             subr    u,d
FC54 1044             (        forth.asm):04116 (2)             lsrd                    D has the data stack depth in cells
FC56 103710           (        forth.asm):04117 (4)             cmpr    x,d
FC59 2405             (        forth.asm):04118 (3)             bcc     @pick1
FC5B C60D             (        forth.asm):04119 (2)     ERRPCK  ldb     #13             Argument is greater than DEPTH
FC5D BDE76A           (        forth.asm):04120 (7)             jsr     ERRHDLR         No return
FC60 1F10             (        forth.asm):04121 (4)     @pick1  tfr     x,d
FC62 104D             (        forth.asm):04122 (2)             tstd
FC64 27F5             (        forth.asm):04123 (3)             beq     ERRPCK
FC66 104A             (        forth.asm):04124 (2)             decd                    Minus 1, unlike in the Z80 implementation
FC68 1048             (        forth.asm):04125 (2)             lsld                    Times 2
FC6A 1F31             (        forth.asm):04126 (4)             tfr     u,x
FC6C 308B             (        forth.asm):04127 (4+2)           leax    d,x
FC6E 1F12             (        forth.asm):04128 (4)             tfr     x,y             For the sake of ROLL's implementation
FC70 AE84             (        forth.asm):04129 (5+0)           ldx     ,x
FC72 3610             (        forth.asm):04130                 UCNPUSH
FC74 39               (        forth.asm):04131 (4)             rts
                      (        forth.asm):04132         
FC75 04               (        forth.asm):04133         OVER    fcb     4
FC76 4F564552         (        forth.asm):04134                 fcc     'OVER'
FC7A FC43             (        forth.asm):04135                 fdb     PICK
FC7C C7               (        forth.asm):04136                 RFCS
FC7D 8E0002           (        forth.asm):04137 (3)             ldx     #2
FC80 20CC             (        forth.asm):04138 (3)             bra     PICK1
                      (        forth.asm):04139         
FC82 04               (        forth.asm):04140         ROLL    fcb     4
FC83 524F4C4C         (        forth.asm):04141                 fcc     'ROLL'
FC87 FC75             (        forth.asm):04142                 fdb     OVER
FC89 C7               (        forth.asm):04143                 RFCS
FC8A BDE7FB           (        forth.asm):04144 (7)             jsr     NPOP
FC8D 1F16             (        forth.asm):04145 (4)     ROLL1   tfr     x,w
FC8F 8DBD             (        forth.asm):04146 (6)             bsr     PICK1           Let PICK do the error handling
FC91 3121             (        forth.asm):04147 (4+1)           leay    1,y             Point to the LSB since we're moving backward
FC93 1F21             (        forth.asm):04148 (4)             tfr     y,x
FC95 301E             (        forth.asm):04149 (4+1)           leax    -2,x
FC97 103066           (        forth.asm):04150 (4)             addr    w,w
FC9A 113912           (        forth.asm):04151 (6+?)           tfm     x-,y-
FC9D 7EE7FB           (        forth.asm):04152 (3)             jmp     NPOP
                      (        forth.asm):04153         
FCA0 03               (        forth.asm):04154         ROT     fcb     3
FCA1 524F54           (        forth.asm):04155                 fcc     'ROT'
FCA4 FC82             (        forth.asm):04156                 fdb     ROLL
FCA6 C7               (        forth.asm):04157                 RFCS
FCA7 8E0003           (        forth.asm):04158 (3)             ldx     #3
FCAA 20E1             (        forth.asm):04159 (3)             bra     ROLL1
                      (        forth.asm):04160         
FCAC 04               (        forth.asm):04161         MROT    fcb     4
FCAD 2D524F54         (        forth.asm):04162                 fcc     '-ROT'
FCB1 FCA0             (        forth.asm):04163                 fdb     ROT
FCB3 C7               (        forth.asm):04164                 RFCS
FCB4 8DF1             (        forth.asm):04165                 RFXT    bsr,ROT+6       XT for ROT
FCB6 20EF             (        forth.asm):04166                 RFXT    bra,ROT+6       XT for ROT
                      (        forth.asm):04167         
FCB8 02               (        forth.asm):04168         CCOMMA  fcb     2               79-STANDARD (REF)
FCB9 432C             (        forth.asm):04169                 fcc     'C,'
FCBB FCAC             (        forth.asm):04170                 fdb     MROT
FCBD C7               (        forth.asm):04171                 RFCS
FCBE BDE7FB           (        forth.asm):04172 (7)             jsr     NPOP
FCC1 1F10             (        forth.asm):04173 (4)             tfr     x,d
FCC3 109E08           (        forth.asm):04174 (5)             ldy     DICEND
FCC6 E7A0             (        forth.asm):04175 (4+1)           stb     ,y+
FCC8 109F08           (        forth.asm):04176 (5)             sty     DICEND
FCCB 39               (        forth.asm):04177 (4)             rts
                      (        forth.asm):04178         
FCCC 01               (        forth.asm):04179         COMMA   fcb     1               79-STANDARD (REQ143)
FCCD 2C               (        forth.asm):04180                 fcc     ','
FCCE FCB8             (        forth.asm):04181                 fdb     CCOMMA
FCD0 C7               (        forth.asm):04182                 RFCS
FCD1 BDE7FB           (        forth.asm):04183 (7)             jsr     NPOP
FCD4 109E08           (        forth.asm):04184 (5)             ldy     DICEND
FCD7 AFA1             (        forth.asm):04185 (5+2)           stx     ,y++
FCD9 109F08           (        forth.asm):04186 (5)             sty     DICEND
FCDC 39               (        forth.asm):04187 (4)             rts
                      (        forth.asm):04188         
FCDD 05               (        forth.asm):04189         ALLOT   fcb     5               79-STANDARD (REQ154)
FCDE 414C4C4F54       (        forth.asm):04190                 fcc     'ALLOT'         ( signedbytecount -- )
FCE3 FCCC             (        forth.asm):04191                 fdb     COMMA
FCE5 C7               (        forth.asm):04192                 RFCS
FCE6 BDE7FB           (        forth.asm):04193 (7)             jsr     NPOP
FCE9 DC08             (        forth.asm):04194 (4)             ldd     DICEND
FCEB 308B             (        forth.asm):04195 (4+2)           leax    d,x
FCED 9F08             (        forth.asm):04196 (4)             stx     DICEND
FCEF 39               (        forth.asm):04197 (4)             rts
                      (        forth.asm):04198         
FCF0 04               (        forth.asm):04199         FILL    fcb     4               79-STANDARD (REQ234)
FCF1 46494C4C         (        forth.asm):04200                 fcc     'FILL'
FCF5 FCDD             (        forth.asm):04201                 fdb     ALLOT
FCF7 C7               (        forth.asm):04202                 RFCS
FCF8 BDE7FB           (        forth.asm):04203 (7)             jsr     NPOP
FCFB 1F16             (        forth.asm):04204 (4)             tfr     x,w             Byte fill value to W
FCFD BDE7FB           (        forth.asm):04205 (7)     FILL1   jsr     NPOP
FD00 1F12             (        forth.asm):04206 (4)             tfr     x,y             Byte count to Y
FD02 1E26             (        forth.asm):04207 (5)             exg     y,w             Byte count to W, byte fill value to Y
FD04 BDE7FB           (        forth.asm):04208 (7)             jsr     NPOP            Destination address to X
FD07 105D             (        forth.asm):04209 (2)             tstw
FD09 2F0B             (        forth.asm):04210 (3)             ble     @filend
FD0B 1F20             (        forth.asm):04211 (4)             tfr     y,d             Byte fill value to B
FD0D E784             (        forth.asm):04212 (4+0)           stb     ,x
FD0F 105A             (        forth.asm):04213 (2)             decw
FD11 3101             (        forth.asm):04214 (4+1)           leay    1,x
FD13 113812           (        forth.asm):04215 (6+?)           tfm     x+,y+
FD16 39               (        forth.asm):04216 (4)     @filend rts
                      (        forth.asm):04217         
FD17 06               (        forth.asm):04218         BLANKS  fcb     6               79-STANDARD (REF152)
FD18 424C414E4B53     (        forth.asm):04219                 fcc     'BLANKS'
FD1E FCF0             (        forth.asm):04220                 fdb     FILL
FD20 C7               (        forth.asm):04221                 RFCS
FD21 10860020         (        forth.asm):04222 (4)             ldw     #SP
FD25 20D6             (        forth.asm):04223 (3)             bra     FILL1
                      (        forth.asm):04224         
FD27 06               (        forth.asm):04225         CMOVED  fcb     6               FORTH-83
FD28 434D4F56453E     (        forth.asm):04226                 fcc     'CMOVE>'
FD2E FD17             (        forth.asm):04227                 fdb     BLANKS
FD30 C7               (        forth.asm):04228                 RFCS
FD31 BDE5A8           (        forth.asm):04229 (7)             jsr     ACQMOVP
FD34 105D             (        forth.asm):04230 (2)             tstw
FD36 270D             (        forth.asm):04231 (3)             beq     @cmovd1
FD38 105A             (        forth.asm):04232 (2)             decw
FD3A 103061           (        forth.asm):04233 (4)             addr    w,x
FD3D 103062           (        forth.asm):04234 (4)             addr    w,y
FD40 105C             (        forth.asm):04235 (2)             incw
FD42 113912           (        forth.asm):04236 (6+?)           tfm     x-,y-
FD45 39               (        forth.asm):04237 (4)     @cmovd1 rts
                      (        forth.asm):04238         
FD46 05               (        forth.asm):04239         CMOVE   fcb     5               79-STANDARD (REQ153)
FD47 434D4F5645       (        forth.asm):04240                 fcc     'CMOVE'
FD4C FD27             (        forth.asm):04241                 fdb     CMOVED
FD4E C7               (        forth.asm):04242                 RFCS
FD4F BDE5A8           (        forth.asm):04243 (7)             jsr     ACQMOVP
FD52 113812           (        forth.asm):04244 (6+?)           tfm     x+,y+
FD55 39               (        forth.asm):04245 (4)             rts
                      (        forth.asm):04246         
FD56 04               (        forth.asm):04247         MOVE    fcb     4               79-STANDARD (REQ113)
FD57 4D4F5645         (        forth.asm):04248                 fcc     'MOVE'          ( srcaddr dstaddr ncells -- )
FD5B FD46             (        forth.asm):04249                 fdb     CMOVE
FD5D C7               (        forth.asm):04250                 RFCS
FD5E BDE5A8           (        forth.asm):04251 (7)             jsr     ACQMOVP
FD61 105D             (        forth.asm):04252 (2)             tstw
FD63 2F06             (        forth.asm):04253 (3)             ble     @move1
FD65 103066           (        forth.asm):04254 (4)             addr    w,w             Convert cells to bytes
FD68 113812           (        forth.asm):04255 (6+?)           tfm     x+,y+
FD6B 39               (        forth.asm):04256 (4)     @move1  rts
                      (        forth.asm):04257         
FD6C 05               (        forth.asm):04258         CELLS   fcb     5               ANSI-X3.215-1994
FD6D 43454C4C53       (        forth.asm):04259                 fcc     'CELLS'
FD72 FD56             (        forth.asm):04260                 fdb     MOVE
FD74 C7               (        forth.asm):04261                 RFCS
FD75 BDE7FB           (        forth.asm):04262 (7)             jsr     NPOP
FD78 103011           (        forth.asm):04263 (4)             addr    x,x
FD7B 3610             (        forth.asm):04264                 UCNPUSH
FD7D 39               (        forth.asm):04265 (4)             rts
                      (        forth.asm):04266         
FD7E 04               (        forth.asm):04267         LAST    fcb     4               79-STANDARD (REF)
FD7F 4C415354         (        forth.asm):04268                 fcc     'LAST'
FD83 FD6C             (        forth.asm):04269                 fdb     CELLS
FD85 C7               (        forth.asm):04270                 RFCS
FD86 9E06             (        forth.asm):04271 (4)             ldx     LSTWAD
FD88 7EE7ED           (        forth.asm):04272 (3)             jmp     NPUSH
                      (        forth.asm):04273         
FD8B 04               (        forth.asm):04274         HERE    fcb     4               79-STANDARD (REQ188)
FD8C 48455245         (        forth.asm):04275                 fcc     'HERE'
FD90 FD7E             (        forth.asm):04276                 fdb     LAST
FD92 C7               (        forth.asm):04277                 RFCS
FD93 9E08             (        forth.asm):04278 (4)             ldx     DICEND
FD95 7EE7ED           (        forth.asm):04279 (3)             jmp     NPUSH
                      (        forth.asm):04280         
FD98 02               (        forth.asm):04281         PLUSST  fcb     2               79-STANDARD (REQ157)
FD99 2B21             (        forth.asm):04282                 fcc     '+!'            ( incr addr -- )
FD9B FD8B             (        forth.asm):04283                 fdb     HERE
FD9D C7               (        forth.asm):04284                 RFCS
FD9E BDE49A           (        forth.asm):04285 (7)             jsr     MIN2PST         We need at least two cells stacked up
FDA1 AEC4             (        forth.asm):04286 (5+0)           ldx     ,u              ADDR to X
FDA3 EC84             (        forth.asm):04287 (5+0)           ldd     ,x              @ADDR to D
FDA5 E342             (        forth.asm):04288 (5+1)           addd    2,u             Add INCR to D
FDA7 ED84             (        forth.asm):04289 (5+0)   PLUSST1 std     ,x              Store the sum back to ADDR
FDA9 3344             (        forth.asm):04290 (4+1)           leau    4,u             Drop two cells from the data stack
FDAB 39               (        forth.asm):04291 (4)             rts
                      (        forth.asm):04292         
FDAC 03               (        forth.asm):04293         ONEPST  fcb     3               79-STANDARD (REF)
FDAD 312B21           (        forth.asm):04294                 fcc     '1+!'
FDB0 FD98             (        forth.asm):04295                 fdb     PLUSST
FDB2 C7               (        forth.asm):04296                 RFCS
FDB3 BDE495           (        forth.asm):04297 (7)             jsr     MIN1PST         At least one cell needs to be stacked up
FDB6 AEC4             (        forth.asm):04298 (5+0)           ldx     ,u
FDB8 EC84             (        forth.asm):04299 (5+0)           ldd     ,x
FDBA 104C             (        forth.asm):04300 (2)             incd
FDBC ED84             (        forth.asm):04301 (5+0)           std     ,x
FDBE 3342             (        forth.asm):04302 (4+1)           leau    2,u
FDC0 39               (        forth.asm):04303 (4)             rts
                      (        forth.asm):04304         
FDC1 02               (        forth.asm):04305         MINUSST fcb     2               79-STANDARD (REQ157)
FDC2 2D21             (        forth.asm):04306                 fcc     '-!'            ( incr addr -- )
FDC4 FDAC             (        forth.asm):04307                 fdb     ONEPST
FDC6 C7               (        forth.asm):04308                 RFCS
FDC7 BDE49A           (        forth.asm):04309 (7)             jsr     MIN2PST         We need at least two cells stacked up
FDCA AEC4             (        forth.asm):04310 (5+0)           ldx     ,u              ADDR to X
FDCC EC84             (        forth.asm):04311 (5+0)           ldd     ,x              @ADDR to D
FDCE A342             (        forth.asm):04312 (5+1)           subd    2,u             Substract INCR from D
FDD0 20D5             (        forth.asm):04313 (3)             bra     PLUSST1
                      (        forth.asm):04314         
FDD2 02               (        forth.asm):04315         CSTORE  fcb     2               79-STANDARD (REQ219)
FDD3 4321             (        forth.asm):04316                 fcc     'C!'            ( val8 addr -- )
FDD5 FDC1             (        forth.asm):04317                 fdb     MINUSST
FDD7 C7               (        forth.asm):04318                 RFCS
FDD8 BDE49A           (        forth.asm):04319 (7)             jsr     MIN2PST         We need at least two cells stacked up
FDDB A643             (        forth.asm):04320 (4+1)           lda     3,u             VAL8 to A
FDDD A7D4             (        forth.asm):04321 (4+3)           sta     [,u]            Actual store to ADDR
FDDF 3344             (        forth.asm):04322 (4+1)           leau    4,u             Drop two cells from the data stack
FDE1 39               (        forth.asm):04323 (4)             rts
                      (        forth.asm):04324         
FDE2 01               (        forth.asm):04325         STORE   fcb     1               79-STANDARD (REQ112)
FDE3 21               (        forth.asm):04326                 fcc     '!'             ( data addr -- )
FDE4 FDD2             (        forth.asm):04327                 fdb     CSTORE
FDE6 C7               (        forth.asm):04328                 RFCS
FDE7 BDE49A           (        forth.asm):04329 (7)             jsr     MIN2PST         At least two cells need to be stacked up
FDEA EC42             (        forth.asm):04330 (5+1)           ldd     2,u             DATA to D
FDEC EDD4             (        forth.asm):04331 (5+3)           std     [,u]            Actual store to ADDR
FDEE 3344             (        forth.asm):04332 (4+1)           leau    4,u             Drop two cells from the user stack
FDF0 39               (        forth.asm):04333 (4)             rts
                      (        forth.asm):04334         
FDF1 02               (        forth.asm):04335         CFETCH  fcb     2               79-STANDARD (REQ156)
FDF2 4340             (        forth.asm):04336                 fcc     'C@'            ( addr -- val8 )
FDF4 FDE2             (        forth.asm):04337                 fdb     STORE
FDF6 C7               (        forth.asm):04338                 RFCS
FDF7 BDE495           (        forth.asm):04339 (7)             jsr     MIN1PST         We need at least one cell stacked up
FDFA 4F               (        forth.asm):04340 (1)             clra
FDFB E6D4             (        forth.asm):04341 (4+3)           ldb     [,u]
FDFD EDC4             (        forth.asm):04342 (5+0)           std     ,u
FDFF 39               (        forth.asm):04343 (4)             rts
                      (        forth.asm):04344         
FE00 01               (        forth.asm):04345         QMARK   fcb     1               79-STANDARD (REQ194)
FE01 3F               (        forth.asm):04346                 fcc     '?'
FE02 FDF1             (        forth.asm):04347                 fdb     CFETCH
FE04 C7               (        forth.asm):04348                 RFCS
FE05 BD0C65           (        forth.asm):04349 (7)             jsr     RAMFTCH         Call the RAM based incarnation of @
FE08 7EF65E           (        forth.asm):04350                 RFXT    jmp,DOT+4       XT for .
                      (        forth.asm):04351         
                      (        forth.asm):04352         * End of ROM part of the builtin dictionary.
     FE0B             (        forth.asm):04353         THEEND  equ     *               This is the end, Beautiful friend
                      (        forth.asm):04354         *                               This is the end, My only friend
                      (        forth.asm):04355         
                      (        forth.asm):04356         * This transactional word is relocated to RAM, so that we can compile new
                      (        forth.asm):04357         * definitions. FORTHIN will take care of that and adjust the relevant pointers.
FE0B 01               (        forth.asm):04358         FETCH   fcb     1               79-STANDARD (REQ199)
FE0C 40               (        forth.asm):04359                 fcc     '@'             ( addr -- data )
FE0D FE00             (        forth.asm):04360                 fdb     QMARK
FE0F C7               (        forth.asm):04361                 RFCS
FE10 BDE495           (        forth.asm):04362 (7)             jsr     MIN1PST         At least one cell needs to be stacked up
FE13 ECD4             (        forth.asm):04363 (5+3)           ldd     [,u]
FE15 EDC4             (        forth.asm):04364 (5+0)           std     ,u              Returned through the data stack
FE17 39               (        forth.asm):04365 (4)             rts
                      (        forth.asm):04366         
     FE18             (        forth.asm):04367         REALEND equ     *
                      (        forth.asm):04368         
                      (        forth.asm):04369         *******************************************************************************
                      (        forth.asm):04370         * String literals.
                      (        forth.asm):04371         
                      (        forth.asm):04372         * Using CR+LF as it is Minicom's default.
                      (        forth.asm):04373         
                      (        forth.asm):04374         * Clear the screen, VT100 style.
FE18 1B5B481B5B4A0D00 (        forth.asm):04375         CSVT100 fcb     $1B,'[','H',$1B,'[','J',CR,NUL
                      (        forth.asm):04376         
FE20 0D0A             (        forth.asm):04377         BOOTMSG fcb     CR,LF
                      (        forth.asm):04378                 IFNE    RTCFEAT
                      (        forth.asm):04379                 fcc     'Z79Forth 6309/R FORTH-79 Standard Sub-set'
                      (        forth.asm):04380                 ELSE
FE22 5A3739466F727468 (        forth.asm):04381                 fcc     'Z79Forth 6309/I FORTH-79 Standard Sub-set'
     20363330392F4920
     464F5254482D3739
     205374616E646172
     64205375622D7365
     74
                      (        forth.asm):04382                 ENDC                    RTCFEAT
FE4B 0D0A             (        forth.asm):04383                 fcb     CR,LF
FE4D 3230323230383036 (        forth.asm):04384                 fcc     '20220806 Copyright Francois Laagel (2019)'
     20436F7079726967
     6874204672616E63
     6F6973204C616167
     656C202832303139
     29
FE76 0D0A0D0A00       (        forth.asm):04385                 fcb     CR,LF,CR,LF,NUL
                      (        forth.asm):04386         
FE7B 52414D204F4B3A20 (        forth.asm):04387         RAMOKM  fcc     'RAM OK: 32 KB'
     3332204B42
FE88 0D0A00           (        forth.asm):04388         CRLFSTR fcb     CR,LF,NUL
                      (        forth.asm):04389         
FE8B 52414D2063686563 (        forth.asm):04390         RAMFM   fcc     'RAM check failed'
     6B206661696C6564
FE9B 0D0A00           (        forth.asm):04391                 fcb     CR,LF,NUL
                      (        forth.asm):04392         
                      (        forth.asm):04393                 IFNE    RTCFEAT
FE9E                  (        forth.asm):04394         RTPRESM fcc     'MC146818 RTC'
                      (        forth.asm):04395                 fcb     CR,LF,NUL
                      (        forth.asm):04396                 ENDC
                      (        forth.asm):04397         
                      (        forth.asm):04398                 IFEQ    CSSNTVE
FE9E 206F6B           (        forth.asm):04399         OKFEEDB fcc     ' ok'           As per GNU Forth's implementation...
                      (        forth.asm):04400                 ELSE
FEA1                  (        forth.asm):04401         OKFEEDB fcc     ' OK'
                      (        forth.asm):04402                 ENDC                    CSSNTVE
FEA1 0D0A00           (        forth.asm):04403                 fcb     CR,LF,NUL
                      (        forth.asm):04404         
                      (        forth.asm):04405         * Error messages for IODZHDL.
FEA4 496C6C6567616C20 (        forth.asm):04406         IOPERRM fcn     'Illegal opcode near '
     6F70636F6465206E
     6561722000
FEB9 4469766973696F6E (        forth.asm):04407         DV0ERRM fcn     'Division by 0 near '
     2062792030206E65
     61722000
                      (        forth.asm):04408         
FECD 4461746120737461 (        forth.asm):04409         ERRMTBL fcn     'Data stack overflow'   Error 0
     636B206F76657266
     6C6F7700
FEE1 4461746120737461 (        forth.asm):04410                 fcn     'Data stack underflow'  Error 1
     636B20756E646572
     666C6F7700
FEF6 3F00             (        forth.asm):04411                 fcn     '?'                     Error 2
FEF8 557365722041424F (        forth.asm):04412                 fcn     'User ABORT'            Error 3
     525400
FF03 00               (        forth.asm):04413                 fcn     ''                      Error 4 (formerly "Division by zero")
FF04 4D697373696E6720 (        forth.asm):04414                 fcn     'Missing word name'     Error 5
     776F7264206E616D
     6500
FF16 496E636F72726563 (        forth.asm):04415                 fcn     'Incorrect STATE'       Error 6
     7420535441544500
FF26 52657475726E2073 (        forth.asm):04416                 fcn     'Return stack overflow' Error 7
     7461636B206F7665
     72666C6F7700
FF3C 52657475726E2073 (        forth.asm):04417                 fcn     'Return stack underflow' Error 8
     7461636B20756E64
     6572666C6F7700
FF53 496C6C6567616C20 (        forth.asm):04418                 fcn     'Illegal construct'     Error 9
     636F6E7374727563
     7400
FF65 417373657274696F (        forth.asm):04419                 fcn     'Assertion failed'      Error 10
     6E206661696C6564
     00
FF76 522F4F20776F7264 (        forth.asm):04420                 fcn     'R/O word'              Error 11
     00
FF7F 4D697373696E6720 (        forth.asm):04421                 fcn     'Missing delimiter'     Error 12
     64656C696D697465
     7200
FF91 496C6C6567616C20 (        forth.asm):04422                 fcn     'Illegal argument'      Error 13
     617267756D656E74
     00
FFA2 4E6F206D61746368 (        forth.asm):04423                 fcn     'No matching CREATE'    Error 14
     696E672043524541
     544500
FFB5 496E76616C696420 (        forth.asm):04424                 fcn     'Invalid BASE'          Error 15
     4241534500
FFC2 576F7264206E616D (        forth.asm):04425                 fcn     'Word name too long'    Error 16
     6520746F6F206C6F
     6E6700
FFD5 494F206572726F72 (        forth.asm):04426                 fcn     'IO error'              Error 17
     00
                      (        forth.asm):04427         
                      (        forth.asm):04428         * A-list used for numeric literal base prefixes.
FFDE 24               (        forth.asm):04429         BASALST fcc     '$'             Hexadecimal prefix
FFDF 10               (        forth.asm):04430                 fcb     16
FFE0 26               (        forth.asm):04431                 fcc     '&'             Decimal prefix
FFE1 0A               (        forth.asm):04432                 fcb     10
FFE2 23               (        forth.asm):04433                 fcc     '#'             Decimal prefix (an ANSI concession)
FFE3 0A               (        forth.asm):04434                 fcb     10
FFE4 25               (        forth.asm):04435                 fcc     '%'             Binary prefix
FFE5 02               (        forth.asm):04436                 fcb     2
FFE6 40               (        forth.asm):04437                 fcc     '@'             Octal prefix
FFE7 08               (        forth.asm):04438                 fcb     8
FFE8 00               (        forth.asm):04439                 fcb     0               End of list marker
                      (        forth.asm):04440         
                      (        forth.asm):04441         * Under no circumstance should the following symbol be negative!
     0007             (        forth.asm):04442         AVL     equ     VECTBL-*        Available EEPROM space left
                      (        forth.asm):04443         
                      (        forth.asm):04444         *******************************************************************************
                      (        forth.asm):04445         * Interrupt vector table
                      (        forth.asm):04446                 org     VECTBL
                      (        forth.asm):04447         
FFF0 E000             (        forth.asm):04448                 fdb     IODZHDL         Illegal opcode/Division by zero trap
FFF2 E036             (        forth.asm):04449                 fdb     SWI3HDL         SWI 3 interrupt vector address
FFF4 E036             (        forth.asm):04450                 fdb     SWI2HDL         SWI 2 interrupt vector address
FFF6 E255             (        forth.asm):04451                 fdb     FIRQHDL         FIRQ interrupt vector address
FFF8 E036             (        forth.asm):04452                 fdb     IRQHDL          IRQ interrupt vector address
FFFA E036             (        forth.asm):04453                 fdb     SWIHDL          SWI interrupt vector address
FFFC E1DD             (        forth.asm):04454                 fdb     NMIHDL          NMI vector address
FFFE E037             (        forth.asm):04455                 fdb     RSTHDL          RESET vector address
                      (        forth.asm):04456         

Symbol Table:
[ G] _BS                              E30A
[ G] _INTERP                          E0CA
[ G] ABORT                            F11F
[ G] ABS                              EFA5
[ G] AC8N1                            0014
[ G] ACCEPT                           F7AD
[ G] ACDIV16                          0001
[ G] ACIACTL                          D800
[ G] ACIADAT                          D801
[ G] ACIISVC                          0080
[ G] ACIOVRN                          0020
[ G] ACIRDRF                          0001
[ G] ACIRSET                          0043
[ G] ACIRTS0                          0095
[ G] ACIRTS1                          00D5
[ G] ACITDRE                          0002
[ G] ACQMOVP                          E5A8
[ G] ACQVMRA                          E5AB
[ G] ACRDINT                          0080
[ G] ACRST                            0003
[ G] ACRTS0                           0000
[ G] ACRTS1                           0040
[ G] ADDS                             E1BD
[ G] ADIV16                           E190
[ G] AGAIN                            EFDE
[ G] ALLOT                            FCDD
[ G] AND                              EE92
[ G] ARPICKN                          F0C4
[ G] AVL                              0007
[ G] BASALST                          FFDE
[ G] BASBKUP                          012C
[ G] BASE                             FB4E
[ G] BCSOPC                           2503
[ G] BDICEND                          010C
[ G] BDIRTY                           0004
[ G] BEGIN                            EFD0
[ G] BFDISP                           0410
[ G] BIN                              FB5C
[ G] BINUSE                           0001
[ G] BKCHAR                           F297
[ G] BKIN2PT                          E841
[ G] BKQUOT                           F169
[ G] BKSLSH                           F348
[ G] BL                               F6CA
[ G] BLANKS                           FD17
[ G] BLK                              EA79
[ G] BLKSIZ                           0400
[ G] BLOCK                            EA4A
[ G] BLSTWAD                          010A
[ G] BMAPPD                           0002
[ G] BNEOPC                           2603
[ G] BOBLKNO                          0402
[ G] BOFLAGS                          0401
[ G] BOOTMSG                          FE20
[ G] BOTERM                           0400
[ G] BS                               0008
[ G] BSBFADR                          011C
[ G] BUF0                             0440
[ G] BUF1                             0850
[ G] BUFFER                           E9FD
[ G] BYE                              F28D
[ G] CCOMMA                           FCB8
[ G] CCREGM                           E220
[ G] CELLS                            FD6C
[ G] CF1BKRD                          E94C
[ G] CF1BKWR                          E967
[ G] CF1BPRE                          E92F
[ G] CF1SRD                           E8FB
[ G] CF1SWR                           E91A
[ G] CFANTHS                          E8A6
[ G] CFBASE                           C000
[ G] CFBSYB                           0080
[ G] CFCARDP                          013D
[ G] CFCHIGR                          C005
[ G] CFCLOWR                          C004
[ G] CFCMDIS                          E88B
[ G] CFCMMIR                          013E
[ G] CFCOMDR                          C007
[ G] CFDATAR                          C000
[ G] CFDRHDR                          C006
[ G] CFDRQB                           0008
[ G] CFDRSEL                          E89D
[ G] CFDSCB                           0010
[ G] CFDWFB                           0020
[ G] CFERRB                           0001
[ G] CFERRCD                          013F
[ G] CFERRCK                          E87E
[ G] CFERROR                          C001
[ G] CFETCH                           FDF1
[ G] CFFEATR                          C001
[ G] CFIDDEV                          00EC
[ G] CFINIT                           E8C4
[ G] CFLAG                            0001
[ G] CFR1SRA                          E919
[ G] CFRDY                            E868
[ G] CFRDYB                           0040
[ G] CFRSCTS                          0020
[ G] CFSCNTR                          C002
[ G] CFSCSZ                           0200
[ G] CFSETFT                          00EF
[ G] CFSNUMR                          C003
[ G] CFSTATR                          C007
[ G] CFWAIT                           E860
[ G] CFWSCTS                          0030
[ G] CHAR                             F2A6
[ G] CHKNDPT                          E48A
[ G] CHKRTS                           E155
[ G] CKBASE                           E3D9
[ G] CKBASRA                          E3E9
[ G] CKDPTRA                          E495
[ G] CKNBPFX                          E3AE
[ G] CMDBFSZ                          0084
[ G] CMDBUF                           0316
[ G] CMDLNSZ                          012D
[ G] CMOVE                            FD46
[ G] CMOVED                           FD27
[ G] CMP2                             E594
[ G] CMP2RA                           E597
[ G] CMPCOMA                          F1B4
[ G] COM                              EEA6
[ G] COM0                             EEAD
[ G] COMMA                            FCCC
[ G] COMP                             E116
[ G] COMPC                            F1C6
[ G] COMPLRA                          E12A
[ G] COMPR                            F1DE
[ G] CONS                             EC1F
[ G] CONTIND                          F858
[ G] CONVERT                          F4D9
[ G] COUNT                            F743
[ G] CR                               000D
[ G] CREAT1                           EBC6
[ G] CREATE                           EBA4
[ G] CRLF                             F70F
[ G] CRLFSTR                          FE88
[ G] CSSNTVE                          0000
[ G] CSTORE                           FDD2
[ G] CSUMFLM                          ECC2
[ G] CSVT100                          FE18
[ G] CURTOKL                          0138
[ G] CVISSGN                          0137
[ G] CVNSTR                           E441
[ G] CVT                              F59E
[ G] CVT0                             F5A5
[ G] CVT1                             F5AD
[ G] CVTB                             F64D
[ G] CVTE                             F552
[ G] CVTFCN                           0134
[ G] DASHTR                           F759
[ G] DDUMP                            FBAD
[ G] DEBUG                            0000
[ G] DECIMAL                          FB78
[ G] DEFFLG                           013A
[ G] DEFFLM                           0040
[ G] DEPTH                            EB8E
[ G] DEV0                             C000
[ G] DEV1                             C400
[ G] DEV2                             C800
[ G] DEV3                             CC00
[ G] DEV4                             D000
[ G] DEV5                             D400
[ G] DEV6                             D800
[ G] DEV7                             DC00
[ G] DICEND                           0108
[ G] DIFF                             EE32
[ G] DIV                              F9A3
[ G] DIV1                             F9AC
[ G] DIVFCN                           0131
[ G] DLESS                            F42F
[ G] DMINUS                           F409
[ G] DNEG                             F3E6
[ G] DO                               ED23
[ G] DOES                             EBCE
[ G] DOESEX                           EBDD
[ G] DOEX                             ED34
[ G] DOT                              F659
[ G] DOTR                             F683
[ G] DOTR0                            F68D
[ G] DOTTICK                          FB96
[ G] DPLUS                            F3CD
[ G] DPOPRA                           E809
[ G] DPREGM                           E22C
[ G] DPSHRA                           E7FA
[ G] DREGM                            E224
[ G] DROP                             FC24
[ G] DUP                              FC15
[ G] DV0ERRM                          FEB9
[ G] DZEQ                             F422
[ G] EBUFS                            E982
[ G] ELSE                             EDE6
[ G] EMIT                             F8B2
[ G] EMPT1B                           E383
[ G] EMPTYB                           E37B
[ G] EMXASXT                          E169
[ G] EQ                               EE19
[ G] ERRHD1                           E76D
[ G] ERRHDLR                          E76A
[ G] ERRMTBL                          FECD
[ G] ERRPCK                           FC5B
[ G] ETX                              0003
[ G] EXCT                             F273
[ G] EXIT                             EFFC
[ G] EXPCT1                           F79E
[ G] EXPECT                           F794
[ G] F83DIVF                          0132
[ G] FDCTSYM                          E5B6
[ G] FDIVADJ                          F9E0
[ G] FETCH                            FE0B
[ G] FFLAG                            0040
[ G] FILL                             FCF0
[ G] FILL1                            FCFD
[ G] FIND                             F130
[ G] FINDSYM                          E62A
[ G] FIRQHDL                          E255
[ G] FLUSH                            E9D7
[ G] FNDPLD                           0110
[ G] FORGET                           F226
[ G] FORTHIN                          E359
[ G] GETCH                            E2B4
[ G] GETS                             E316
[ G] HDMP2                            E1AE
[ G] HDMP4                            E195
[ G] HDRCSUM                          ECB6
[ G] HDRSKIP                          ECAC
[ G] HERE                             FD8B
[ G] HEX                              FB89
[ G] HEX1D                            E17C
[ G] HEXBFSZ                          0050
[ G] HEXBUF                           039A
[ G] HOLD                             F582
[ G] HT                               0009
[ G] HVNMI                            0001
[ G] HVNMI2                           0000
[ G] ICHECK                           ECD9
[ G] IF                               EDAD
[ G] IFEX                             EDCD
[ G] IFLAG                            0010
[ G] ILLOPC                           00C7
[ G] IMDFLG                           0139
[ G] IMDFLM                           0080
[ G] IMMED                            EC66
[ G] IMMED1                           EC75
[ G] INDEX                            EABB
[ G] INDI                             F0BE
[ G] INDIP                            F0E2
[ G] INDJ                             F0EC
[ G] INDJP                            F0F5
[ G] INDK                             F0FF
[ G] INF                              EF64
[ G] INIT                             E047
[ G] INSBPAD                          F63A
[ G] INTERP                           E0B2
[ G] INTISRA                          E106
[ G] INTRPRA                          E111
[ G] INVERT                           EEB9
[ G] IODZHDL                          E000
[ G] IOERR                            E914
[ G] IOPERRM                          FEA4
[ G] IOSTRT                           C000
[ G] IRDPTH                           012F
[ G] IRQHDL                           E036
[ G] ISDBLF                           0136
[ G] ISNEGF                           0135
[ G] JMPOPC                           007E
[ G] JSRLAST                          0114
[ G] JSROPC                           00BD
[ G] KEY                              F8A0
[ G] KEYP                             F88D
[ G] LAST                             FD7E
[ G] LBRACK                           F161
[ G] LDXOPC                           008E
[ G] LEAVE                            F0A9
[ G] LF                               000A
[ G] LINE                             EAA0
[ G] LIST                             EB19
[ G] LITER                            E578
[ G] LITERAL                          EBFB
[ G] LOAD                             F7E7
[ G] LOAD1                            F7F8
[ G] LOCWRT                           E517
[ G] LOOP                             ED3D
[ G] LOOP1                            ED48
[ G] LOOPEX                           ED5C
[ G] LPAR                             F310
[ G] LSTWAD                           0106
[ G] LWMNRA                           E52D
[ G] MAX                              EF73
[ G] MDIV                             F9FA
[ G] MILLIS                           F872
[ G] MILLIS1                          F881
[ G] MIN                              EF8C
[ G] MIN1PST                          E495
[ G] MIN2PST                          E49A
[ G] MIN3PST                          E49F
[ G] MIN4PST                          E4A4
[ G] MINTLRA                          E0C8
[ G] MINUS                            F8F6
[ G] MINUSST                          FDC1
[ G] MOD                              F9ED
[ G] MONFLM                           0020
[ G] MONITOR                          EC8F
[ G] MORE                             E0E2
[ G] MOVE                             FD56
[ G] MROT                             FCAC
[ G] MRUBUFA                          011A
[ G] MSLCNT                           031A
[ G] MULT                             F970
[ G] NAK                              0015
[ G] NBCTFB0                          013B
[ G] NCLR                             EB72
[ G] NDCTWKS                          E650
[ G] NEGATE                           EFBC
[ G] NIP                              FC0A
[ G] NMCVCRA                          E13C
[ G] NMCVIRA                          E0E0
[ G] NMI2DM                           E1C8
[ G] NMI4DM                           E1CE
[ G] NMIDML                           E1D4
[ G] NMIHDL                           E1DD
[ G] NOT                              EF11
[ G] NPOP                             E7FB
[ G] NPUSH                            E7ED
[ G] NSTBOT                           0296
[ G] NSTKSZ                           00C0
[ G] NSTTOP                           01D6
[ G] NUL                              0000
[ G] NULP                             EEF9
[ G] NUMCVRA                          E440
[ G] NUMCVT                           E3E9
[ G] NXTBLK                           F83D
[ G] NXTBLK1                          F848
[ G] OCTAL                            FB69
[ G] OKFEEDB                          FE9E
[ G] ONEL                             F932
[ G] ONEM                             F907
[ G] ONEP                             F8D5
[ G] ONEPST                           FDAC
[ G] OR                               EE7F
[ G] OVER                             FC75
[ G] PAD                              F718
[ G] PADBSZ                           0051
[ G] PADBUF                           0184
[ G] PAGE                             F701
[ G] PAYLOAD                          FA5D
[ G] PCREGM                           E23D
[ G] PICK                             FC43
[ G] PICK1                            FC4E
[ G] PLOAD                            010E
[ G] PLOOP                            ED61
[ G] PLOOPEX                          ED6F
[ G] PLOPEX1                          ED72
[ G] PLUS                             F8C4
[ G] PLUSST                           FD98
[ G] PLUSST1                          FDA7
[ G] POSTPON                          F175
[ G] pragma                           0000
[ G] PRBLKIN                          E73D
[ G] PSTR                             F366
[ G] PTOP0                            F662
[ G] PUTCH                            E2E0
[ G] PUTCR                            E300
[ G] PUTS                             E2F3
[ G] QMARK                            FE00
[ G] QRYDUP                           FBE8
[ G] QUIT                             F108
[ G] RAMCHK                           E057
[ G] RAMFAIL                          E069
[ G] RAMFM                            FE8B
[SG] RAMFTCH                          0C65
[SG] RAMFTCH                          0C64
[ G] RAMOK                            E07B
[ G] RAMOKM                           FE7B
[ G] RAMSIZE                          8000
[ G] RAMSTRT                          0000
[ G] RBRACK                           F157
[ G] RCLR                             EB7E
[ G] RDEPTH                           012E
[ G] REALEND                          FE18
[ G] RECADDR                          0112
[ G] RECURSE                          F216
[SG] RELFEAT                          0001
[ G] REPEAT                           F072
[ G] RFETCH                           F0DA
[ G] RFROM                            F091
[ G] ROLL                             FC82
[ G] ROLL1                            FC8D
[ G] ROMSTRT                          E000
[ G] ROT                              FCA0
[ G] RPOP                             E828
[ G] RPOPRA                           E841
[ G] RPSHRA                           E827
[ G] RPUSH                            E80A
[ G] RSBSPFX                          E3D2
[ G] RSP                              0100
[ G] RSTBOT                           0316
[ G] RSTHDL                           E037
[ G] RSTKSZ                           0080
[ G] RSTRCT                           EC7F
[ G] RSTTOP                           0296
[ G] RTADV32                          0020
[ G] RTADVRS                          0070
[ G] RTARS64                          000A
[ G] RTAS                             D400
[ G] RTAUIP                           0080
[ G] RTB24                            0002
[ G] RTBDM                            0004
[ G] RTBPIE                           0040
[ G] RTBSET                           0080
[ G] RTCAVL                           013C
[ G] RTCFEAT                          0000
[ G] RTCFTCH                          EB00
[ G] RTCPF                            0040
[ G] RTCSTOR                          EB0E
[ G] RTDS                             D401
[ G] RTODOM                           0007
[ G] RTODOW                           0006
[ G] RTOHOUR                          0004
[ G] RTOHRA                           0005
[ G] RTOMIN                           0002
[ G] RTOMINA                          0003
[ G] RTOMON                           0008
[ G] RTOPRES                          003F
[ G] RTOREGA                          000A
[ G] RTOREGB                          000B
[ G] RTOREGC                          000C
[ G] RTOREGD                          000D
[ G] RTOSEC                           0000
[ G] RTOSECA                          0001
[ G] RTOUMB                           000E
[ G] RTOYEAR                          0009
[ G] RTSOPC                           0039
[ G] RTSREMV                          0130
[ G] RTUMSZ                           0032
[ G] SAVBUF                           E996
[ G] SCNETOK                          E39C
[ G] SCNSTOK                          E38E
[ G] SCR                              EA93
[ G] SERBCNT                          0142
[ G] SERBDEQ                          0141
[ G] SERBENQ                          0140
[ G] SERBSZ                           0040
[ G] SERBUF                           0144
[ G] SHARPS                           F592
[ G] SHIFT                            F948
[ G] SIGN                             F56B
[ G] SINFEQ                           EE4C
[ G] SLEN                             E246
[ G] SOURCE                           F32A
[ G] SP                               0020
[ G] SPACE                            F6D6
[ G] SPACES                           F6E4
[ G] SQUOTE                           F37B
[ G] SREGM                            E242
[ G] SSDFEAT                          0001
[ G] STATE                            FB3F
[ G] STOD                             EB58
[ G] STORE                            FDE2
[ G] STRSL1                           FA10
[ G] STRSLMD                          FA3B
[ G] STRSLSH                          FA06
[ G] STSLFCN                          0133
[ G] SUP                              EF55
[ G] SWAP                             FC2F
[ G] SWDIC                            E4A9
[ G] SWI2HDL                          E036
[ G] SWI3HDL                          E036
[ G] SWIHDL                           E036
[ G] SYSSTAT                          FA52
[ G] SYSSTK                           FA48
[ G] TBUFF                            03EA
[ G] TBUFSZ                           0048
[ G] TERPRET                          F7BD
[ G] THEEND                           FE0B
[ G] THEN                             EE07
[ G] THRU                             F81B
[ G] TICKS                            EAEF
[ G] TIKSHI                           0128
[ G] TIKSLOW                          012A
[ G] TOIN                             EA86
[ G] TOKENEP                          0104
[ G] TOKENSP                          0102
[ G] TOR                              F09D
[ G] TUCK                             FBFE
[ G] TWODIV                           F993
[ G] TWODROP                          F48C
[ G] TWODUP                           F49B
[ G] TWOFTCH                          F4C5
[ G] TWOL                             F93D
[ G] TWOM                             F917
[ G] TWOOVER                          F456
[ G] TWOP                             F8E5
[ G] TWOSTOR                          F4B3
[ G] TWOSWAP                          F46F
[ G] TWOTIM                           F983
[ G] TYPE                             F725
[ G] U2INFRD                          E177
[ G] UBASE                            011E
[ G] UBLK                             0124
[ G] UDOT                             F679
[ G] UDOTR                            F6BF
[ G] UINF                             EF2A
[ G] UNLESS                           EDD4
[ G] UNLOOP                           ED9D
[ G] UNTIL                            F01E
[ G] UPDATE                           E9E2
[ G] UREGM                            E239
[ G] USCR                             0126
[ G] USTATE                           0120
[ G] USUP                             EF1A
[ G] UTOIN                            0122
[ G] VARCON                           E58A
[ G] VARCON1                          E58C
[ G] VARCON2                          E58F
[ G] VARI                             EC41
[ G] VARSPC                           0100
[ G] VECTBL                           FFF0
[ G] VLIST                            FA6D
[ G] VLPRVEP                          0116
[ G] VLPRVHD                          0118
[ G] WBIFDRT                          E9AE
[ G] WDICSPC                          0C60
[ G] WHILE                            F047
[ G] WITHIN                           EF3A
[ G] WORD                             F2CD
[ G] WREGM                            E228
[ G] WRLNMSK                          001F
[ G] WTOOLNG                          E54A
[ G] XMITOK                           0143
[ G] XOFF                             0013
[ G] XON                              0011
[ G] XOR                              EE68
[ G] XOR1                             EE7A
[ G] XREGM                            E231
[ G] YREGM                            E235
[ G] ZEROL                            F928
[ G] ZFLAG                            0004
[ G] ZGREAT                           EEC5
[ G] ZLESS                            EEDF
