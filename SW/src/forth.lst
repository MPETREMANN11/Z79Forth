                      (        forth.asm):00001         * 6309 Forth based on my 1984/07/16 TRS-80 Model 1 level II ROM implementation.
                      (        forth.asm):00002         *
                      (        forth.asm):00003         * This work is dedicated to Alain Pinaud, author of "Programmer en Forth"
                      (        forth.asm):00004         * published by Editions du P.S.I. in 1983--i.e. my virtual mentor in the field.
                      (        forth.asm):00005         * Special thanks go William Astle for his fantastic LW Tools utility set and
                      (        forth.asm):00006         * to Robert Lipe for his advice on serial line handling. Apache subversion
                      (        forth.asm):00007         * and the sdiff utility also were on my side all the time.
                      (        forth.asm):00008         *
                      (        forth.asm):00009         * Also credited for their help: Justin Poirier (seminal HW design), Daniel
                      (        forth.asm):00010         * Tufvesson (CompactFlash interface), Peter Forth (FB alias), Paul E. Bennett
                      (        forth.asm):00011         * and Michel Jean.
                      (        forth.asm):00012         *
                      (        forth.asm):00013         * This is a native Forth. Not a threaded interpretive implementation.
                      (        forth.asm):00014         * Worth noticing is the fact that the return stack does not hold return
                      (        forth.asm):00015         * addresses at all. All what is stored there is loop indexes and control
                      (        forth.asm):00016         * structures jump addresses. Actual return addresses are kept in the system
                      (        forth.asm):00017         * stack. All in all, this is the result of the work of a 19 year old guy,
                      (        forth.asm):00018         * heavily revisited 35 years later. Some quirks remain that prevent me
                      (        forth.asm):00019         * from offering the full required set--not to mention the choice of using
                      (        forth.asm):00020         * an 8K EEPROM. The downside of this implementation is that the generated
                      (        forth.asm):00021         * code is about 30% larger than a threaded interpretive implementation
                      (        forth.asm):00022         * would be. So it goes...
                      (        forth.asm):00023         *
                      (        forth.asm):00024         * The code generated is limited to a very small instruction set:
                      (        forth.asm):00025         *
                      (        forth.asm):00026         * LDXOPC        $8E     LDX (immediate)
                      (        forth.asm):00027         * JMPOPC        $7E     JMP (extended)
                      (        forth.asm):00028         * JSROPC        $BD     JSR (extended)
                      (        forth.asm):00029         * RTSOPC        $39     RTS (inherent)
                      (        forth.asm):00030         * BCSOPC        $2503   BCS *+5 (relative) Used in LOOP, +LOOP
                      (        forth.asm):00031         * BNEOPC        $2603   BNE *+5 (relative) Used in IF, UNTIL
                      (        forth.asm):00032         *
                      (        forth.asm):00033         * On error, the system stack pointer is reset. The return stack also is
                      (        forth.asm):00034         * but the data stack will be in the same state as when the error occurred.
                      (        forth.asm):00035         * ABORT and QUIT enforce their own 79-STANDARD behaviour.
                      (        forth.asm):00036         *
                      (        forth.asm):00037         * The 79-STANDARD Forth specification can be downloaded from
                      (        forth.asm):00038         * https://www.complang.tuwien.ac.at/forth/fth79std/FORTH-79.TXT
                      (        forth.asm):00039         *
                      (        forth.asm):00040         * Additionally, this implementation provides a few FORTH-83 words. Those
                      (        forth.asm):00041         * words are CMOVE> and RECURSE. See
                      (        forth.asm):00042         * http://forth.sourceforge.net/standard/fst83/FORTH-83.PRN
                      (        forth.asm):00043         *
                      (        forth.asm):00044         * \ ['] [CHAR] .S ACCEPT CELLS CHAR COMPILE, INVERT KEY? NIP POSTPONE S>D S"
                      (        forth.asm):00045         * SOURCE TUCK U> * UNLOOP and WITHIN have been borrowed from the ANSI draft 6
                      (        forth.asm):00046         * specification. See http://www.forth.org/svfig/Win32Forth/DPANS94.txt
                      (        forth.asm):00047         *
                      (        forth.asm):00048         * RESTRICT is non-standard. It comes from GNU Forth (VolksForth). The " OK"
                      (        forth.asm):00049         * non-prompt string also does, by the way. Thanks to Anton Ertl for his terse
                      (        forth.asm):00050         * yet valuable input.
                      (        forth.asm):00051         *
                      (        forth.asm):00052         * .' (dot-tick) is non-standard. It comes from SwiftForth. It will be supported
                      (        forth.asm):00053         * if symbolic stack dump has not been disabled (see SSDFEAT in constants.asm).
                      (        forth.asm):00054         *
                      (        forth.asm):00055         * MONITOR and ICHECK are also non-standard. They are intended to maintain and
                      (        forth.asm):00056         * verify the integrity of a checksum of the code section of RAM resident
                      (        forth.asm):00057         * words, with the exception of VARIABLEs and CREATEd words. CREATEd words,
                      (        forth.asm):00058         * if subject to the MONITOR treatment will also carry a code section
                      (        forth.asm):00059         * checksum, although this is not the default behaviour. The checksum will
                      (        forth.asm):00060         * consist in an extra byte added to every word's header. MONITOR and ICHECK
                      (        forth.asm):00061         * will only be available if the reliability feature has not been disabled
                      (        forth.asm):00062         * (see RELFEAT in constants.asm).
                      (        forth.asm):00063         *
                      (        forth.asm):00064         * Forth source code portability note:
                      (        forth.asm):00065         * Because Z79Forth does not use the return stack to store return addresses,
                      (        forth.asm):00066         * it makes it quite easy to write code that is not readily portable to classic
                      (        forth.asm):00067         * threaded interpretive implementations. The resulting code will be simpler but
                      (        forth.asm):00068         * portability will be limited.
                      (        forth.asm):00069         *
                      (        forth.asm):00070         * Miscellaneous notes: RA stands for return address; EP for entry point.
                      (        forth.asm):00071         * CF is a shortcut for CompactFlash. TOS means top of the data/normal stack.
                      (        forth.asm):00072         * Occasionally, CFA is used for code field address which, in this
                      (        forth.asm):00073         * implementation, is a synonym for compilation address. XT means execution
                      (        forth.asm):00074         * token--the ANSI term for a compilation address. MSC stands for most
                      (        forth.asm):00075         * significant cell; LSC for least significant cell.
                      (        forth.asm):00076         *
                      (        forth.asm):00077         * The complete guide to the HD6309 extended instruction set can be found at:
                      (        forth.asm):00078         * https://cyberabi.ipower.com/Downloads/The_6309_Book.pdf. For convenience,
                      (        forth.asm):00079         * and with the author's explicit agreement, this document has been included
                      (        forth.asm):00080         * in this distribution. This is recommended reading for anyone altering this
                      (        forth.asm):00081         * code or trying to make some sense of it!!!
                      (        forth.asm):00082         *
                      (        forth.asm):00083         * This whole effort started out as a porting endeavour and ended up being a
                      (        forth.asm):00084         * substantial rewrite, trying to take advantage of the features of the 6309
                      (        forth.asm):00085         * as much as possible. The primary goals of this implementation are:
                      (        forth.asm):00086         * reliability, performance and code compactness. A number of bugs in the
                      (        forth.asm):00087         * original code have been fixed--some remain for sure!
                      (        forth.asm):00088         *
                      (        forth.asm):00089         * Obligatory literary reference:
                      (        forth.asm):00090         * "The paper is very heavy going, and I should never have read it, had I not
                      (        forth.asm):00091         * written it myself." J. E. Littlewood (1885-1977).
                      (        forth.asm):00092         *
                      (        forth.asm):00093         * The original soundtrack for this work is available at:
                      (        forth.asm):00094         * https://youtu.be/YqXZtGyFyDo?t=4023 (J.S. Bach BWV 1080, contrapunctus 14).
                      (        forth.asm):00095         
0000                  (        forth.asm):00096         pragma  opt cd,operandsizewarning
                      (        forth.asm):00097         
                      (        forth.asm):00098                 include constants.asm
                      (    constants.asm):00001         * Begin configuration tunable parameters.
                      (    constants.asm):00002         
     0000             (    constants.asm):00003         HVFIRQ  equ     0               Enable FIRQ on ACIA RDRF (req. 2.2 schematics)
     0000             (    constants.asm):00004         VT100   equ     0               Set to 1 to operate at RS232@9600
                      (    constants.asm):00005         *                               This implies an Y1 CXO at 2.45760 MHz.
                      (    constants.asm):00006         *                               Default is 0 for USB@115200 (7.37280 MHz CXO).
     0000             (    constants.asm):00007         CSSNTVE equ     0               Words and HEX numbers are case sensitive if NZ
     0001             (    constants.asm):00008         HVCONV  equ     1               Include CONVERT in the default dictionary
     0001             (    constants.asm):00009         SSDFEAT equ     1               Set to 1 to enable the symbolic stack dump feat.
     0001             (    constants.asm):00010         RELFEAT equ     1               Set to 1 to enable the reliability feature
                      (    constants.asm):00011         *                               Caution: when this is enabled, you can no
                      (    constants.asm):00012         *                               longer fit a DEBUG image into an 8 KB EEPROM
     0000             (    constants.asm):00013         DEBUG   equ     0               Enforce assertions and miscellaneous checks
                      (    constants.asm):00014         * Loop count for MS. This is busy waiting, so we depend on the CPU clock speed.
                      (    constants.asm):00015         *MSLCNT equ     496             at 3 MHz emulation mode
                      (    constants.asm):00016         *MSLCNT equ     662             at 4 MHz emulation mode
                      (    constants.asm):00017         *MSLCNT equ     794             at 4 MHz native mode
     03E2             (    constants.asm):00018         MSLCNT  equ     994             at 5 MHz native mode
                      (    constants.asm):00019         
                      (    constants.asm):00020         * End configuration tunable parameters.
                      (    constants.asm):00021         
                      (    constants.asm):00022         * Memory map.
     0000             (    constants.asm):00023         RAMSTRT equ     $0000
     8000             (    constants.asm):00024         RAMSIZE equ     $8000
     C000             (    constants.asm):00025         IOSTRT  equ     $C000
     E000             (    constants.asm):00026         ROMSTRT equ     $E000
     FFF0             (    constants.asm):00027         VECTBL  equ     $FFF0
                      (    constants.asm):00028         
                      (    constants.asm):00029         * Base address for global variables (direct page addressed).
     0100             (    constants.asm):00030         VARSPC  equ     $100
                      (    constants.asm):00031         
                      (    constants.asm):00032         * The 74HCT138 IO address decoder maps one 1 KB page per usable device.
     C000             (    constants.asm):00033         DEV0    equ     $C000           Compact Flash memory module
     C400             (    constants.asm):00034         DEV1    equ     $C400
     C800             (    constants.asm):00035         DEV2    equ     $C800
     CC00             (    constants.asm):00036         DEV3    equ     $CC00
     D000             (    constants.asm):00037         DEV4    equ     $D000
     D400             (    constants.asm):00038         DEV5    equ     $D400
     D800             (    constants.asm):00039         DEV6    equ     $D800           HD63B50 unit 0
     DC00             (    constants.asm):00040         DEV7    equ     $DC00
                      (    constants.asm):00041         
     D800             (    constants.asm):00042         ACIACTL equ     DEV6
     D801             (    constants.asm):00043         ACIADAT equ     DEV6+1
                      (    constants.asm):00044         
                      (    constants.asm):00045         * ACIA control register bits.
     0003             (    constants.asm):00046         ACRST   equ     11b             ACIA master reset
                      (    constants.asm):00047         
                      (    constants.asm):00048         * 115200 bps w. 7.37280 MHz oscillator, 38400 bps w. 2.45760 MHz oscillator.
     0001             (    constants.asm):00049         ACD16   equ     01b             ACIA div 16
                      (    constants.asm):00050         * 28800 bps w. 7.37280 MHz oscillator, bps 9600 w. 2.45760 MHz oscillator.
     0002             (    constants.asm):00051         ACD64   equ     10b             ACIA div 64
                      (    constants.asm):00052         
                      (    constants.asm):00053         * ACIA divider tuning. USB@115200 or RS232@9600 for a real DEC terminal.
                      (    constants.asm):00054                 IFEQ    VT100
     0001             (    constants.asm):00055         ACDVSEL equ     ACD16           Selected divider value (7.37280 MHz CXO)
                      (    constants.asm):00056                 ELSE
0000                  (    constants.asm):00057         ACDVSEL equ     ACD64           Switch to RS232@9600 (2.45760 MHz CXO)
                      (    constants.asm):00058                 ENDC
                      (    constants.asm):00059         
     0014             (    constants.asm):00060         AC8N1   equ     10100b          ACIA 8N1
     0000             (    constants.asm):00061         ACRTS0  equ     0000000b        ACIA RTS# low
     0040             (    constants.asm):00062         ACRTS1  equ     1000000b        ACIA RTS# high
                      (    constants.asm):00063                 IFNE    HVFIRQ
0000                  (    constants.asm):00064         ACRDINT equ     10000000b       IRQ on RDRF
0000                  (    constants.asm):00065         POLINTM MACRO   NOEXPAND        Poll/interrupt mode
                      (    constants.asm):00066                 fcb     'I'
                      (    constants.asm):00067                 ENDM
                      (    constants.asm):00068                 ELSE
     0000             (    constants.asm):00069         ACRDINT equ     0               No IRQ on RDRF
0000                  (    constants.asm):00070         POLINTM MACRO   NOEXPAND        Poll/interrupt mode
                      (    constants.asm):00071                 fcb     'P'
                      (    constants.asm):00072                 ENDM
                      (    constants.asm):00073                 ENDC
                      (    constants.asm):00074         
     0043             (    constants.asm):00075         ACIRSET equ     ACRTS1|ACRST
     0055             (    constants.asm):00076         ACIRTS1 equ     ACRTS1|ACRDINT|AC8N1|ACDVSEL
     0015             (    constants.asm):00077         ACIRTS0 equ     ACRTS0|ACRDINT|AC8N1|ACDVSEL
                      (    constants.asm):00078         
                      (    constants.asm):00079         * ACIA status register bits.
     0001             (    constants.asm):00080         ACIRDRF equ     1               Receive data register full
     0002             (    constants.asm):00081         ACITDRE equ     10b             Transmit data register empty
     0080             (    constants.asm):00082         ACIISVC equ     10000000b       Interrupt needs servicing
                      (    constants.asm):00083         
                      (    constants.asm):00084         * Compact Flash parameters.
     C000             (    constants.asm):00085         CFBASE  equ     DEV0
     C000             (    constants.asm):00086         CFDATAR equ     CFBASE          R/W data register
     C001             (    constants.asm):00087         CFERROR equ     CFBASE+1        RO error register
     C001             (    constants.asm):00088         CFFEATR equ     CFBASE+1        WO features register
     C002             (    constants.asm):00089         CFSCNTR equ     CFBASE+2        R/W sector count register
     C003             (    constants.asm):00090         CFSNUMR equ     CFBASE+3        R/W sector number register
     C004             (    constants.asm):00091         CFCLOWR equ     CFBASE+4        R/W cylinder low register
     C005             (    constants.asm):00092         CFCHIGR equ     CFBASE+5        R/W cylinder high register
     C006             (    constants.asm):00093         CFDRHDR equ     CFBASE+6        R/W drive/head register
     C007             (    constants.asm):00094         CFSTATR equ     CFBASE+7        RO status register
     C007             (    constants.asm):00095         CFCOMDR equ     CFBASE+7        WO command register
                      (    constants.asm):00096         
                      (    constants.asm):00097         * CF status bits.
     0080             (    constants.asm):00098         CFBSYB  equ     10000000b       BSY status bit
     0040             (    constants.asm):00099         CFRDYB  equ     01000000b       RDY status bit
     0020             (    constants.asm):00100         CFDWFB  equ     00100000b       DWF status bit (not used)
     0010             (    constants.asm):00101         CFDSCB  equ     00010000b       DSC status bit (not used)
     0008             (    constants.asm):00102         CFDRQB  equ     00001000b       DRQ status bit
     0001             (    constants.asm):00103         CFERRB  equ     00000001b       ERR status bit
                      (    constants.asm):00104         
     0200             (    constants.asm):00105         CFSCSZ  equ     $200            Compact Flash (IDE) sector size
                      (    constants.asm):00106         
                      (    constants.asm):00107         * CF commands.
     00EC             (    constants.asm):00108         CFIDDEV equ     $EC             Identify Device
     00EF             (    constants.asm):00109         CFSETFT equ     $EF             Set Feature
     0020             (    constants.asm):00110         CFRSCTS equ     $20             Read Sectors
     0030             (    constants.asm):00111         CFWSCTS equ     $30             Write Sectors
                      (    constants.asm):00112         
                      (    constants.asm):00113         * Buffer in-memory structure:
                      (    constants.asm):00114         * data: 1024 bytes.
                      (    constants.asm):00115         * terminator: 1 byte set to 0.
                      (    constants.asm):00116         * flags: 1 byte.
                      (    constants.asm):00117         * blknum: 2 bytes.
     0001             (    constants.asm):00118         BINUSE  equ     1               Buffer is allocated (the blknum field is valid)
     0002             (    constants.asm):00119         BMAPPD  equ     2               Block has been read from the CF device
     0004             (    constants.asm):00120         BDIRTY  equ     4               Block has been marked for update
     0400             (    constants.asm):00121         BLKSIZ  equ     2*CFSCSZ        Block size is 2 CF sectors (1 KB)
                      (    constants.asm):00122         * Buffer field offsets.
     0400             (    constants.asm):00123         BOTERM  equ     BLKSIZ          Base buffer to the 'terminator' field offset
     0401             (    constants.asm):00124         BOFLAGS equ     BLKSIZ+1        Base buffer to the 'flag' field offset
     0402             (    constants.asm):00125         BOBLKNO equ     BLKSIZ+2        Base buffer to the 'blknum' field offset
                      (    constants.asm):00126         
     0410             (    constants.asm):00127         BFDISP  equ     BUF1-BUF0       Offset between resident buffers
                      (    constants.asm):00128         
                      (    constants.asm):00129         * ASCII trivia.
     0000             (    constants.asm):00130         NUL     equ     0               End of string marker
     0003             (    constants.asm):00131         ETX     equ     3               Control-C (intr)
     0008             (    constants.asm):00132         BS      equ     8               Backspace
     0009             (    constants.asm):00133         HT      equ     9               Horizontal tab
     000A             (    constants.asm):00134         LF      equ     $0A             Aka new line
     000D             (    constants.asm):00135         CR      equ     $0D             Carriage return
     0015             (    constants.asm):00136         NAK     equ     $15             Control-U (kill)
     0020             (    constants.asm):00137         SP      equ     $20             Aka BL in Forth
     0013             (    constants.asm):00138         XOFF    equ     $13             Aka DC3
     0011             (    constants.asm):00139         XON     equ     $11             Aka DC1
                      (    constants.asm):00140         
                      (    constants.asm):00141         * Stack sizes.
     00C0             (    constants.asm):00142         NSTKSZ  equ     192             Expressed in bytes. Now only limited by RAM size
     0080             (    constants.asm):00143         RSTKSZ  equ     128             Expressed in bytes
                      (    constants.asm):00144         
                      (    constants.asm):00145         * Buffer sizes.
     0084             (    constants.asm):00146         CMDBFSZ equ     132             Command line entry buffer
     0050             (    constants.asm):00147         HEXBFSZ equ     80
     0048             (    constants.asm):00148         TBUFSZ  equ     72              Used by VLIST to print word name, CVNSTR
                      (    constants.asm):00149         *                               And DUMP, at offset 69
     0051             (    constants.asm):00150         PADBSZ  equ     1+80            79-STANDARD mandates a minimum of 64 bytes
     0040             (    constants.asm):00151         SERBSZ  equ     64              Serial buffer size. Needs to be a power of 2
                      (    constants.asm):00152         
                      (    constants.asm):00153         * Dictionary flag masks.
     0080             (    constants.asm):00154         IMDFLM  equ     $80             Immediate flag mask
     0040             (    constants.asm):00155         DEFFLM  equ     $40             Compilation only flag mask
                      (    constants.asm):00156                 IFNE    RELFEAT
     0020             (    constants.asm):00157         MONFLM  equ     $20             Monitored flag mask. This indicates that the
                      (    constants.asm):00158         *                               word to which it relates might be checked for
                      (    constants.asm):00159         *                               integrity. This applies by default to all words
                      (    constants.asm):00160         *                               defined with : and all constants. It might
                      (    constants.asm):00161         *                               also apply to any other CREATEd object by
                      (    constants.asm):00162         *                               resorting to the MONITOR word. Using MONITOR
                      (    constants.asm):00163         *                               on variable word contents is guaranteed to
                      (    constants.asm):00164         *                               raise ICHECK's attention.
                      (    constants.asm):00165                 ENDC
                      (    constants.asm):00166         
     001F             (    constants.asm):00167         WRLNMSK equ     $1F             31 character is the maximum word length
                      (    constants.asm):00168         
                      (    constants.asm):00169         * 6309 opcodes.
     008E             (    constants.asm):00170         LDXOPC  equ     $8E             LDX (immediate)
     007E             (    constants.asm):00171         JMPOPC  equ     $7E             JMP (extended)
     00BD             (    constants.asm):00172         JSROPC  equ     $BD             JSR (extended)
     0039             (    constants.asm):00173         RTSOPC  equ     $39             RTS (inherent)
     2503             (    constants.asm):00174         BCSOPC  equ     $2503           BCS *+5 (relative)
     2603             (    constants.asm):00175         BNEOPC  equ     $2603           BNE *+5 (relative)
     00C7             (    constants.asm):00176         ILLOPC  equ     $C7             An illegal operation code. Meant to raise a trap
                      (    constants.asm):00177         
     0001             (    constants.asm):00178         CFLAG   equ     1               CC bit 0 (C)
     0004             (    constants.asm):00179         ZFLAG   equ     4               CC bit 2 (Z)
     0008             (    constants.asm):00180         NFLAG   equ     8               CC bit 3 (N)
     0040             (    constants.asm):00181         FFLAG   equ     $40             CC bit 6 (F)
                      (    constants.asm):00182         
                      (    constants.asm):00183         * RAM based execution token for @.
     0C14             (    constants.asm):00184         RAMFTCH set     WDICSPC+4       Dictionary header overhead is word's length + 3
                      (    constants.asm):00185                 IFNE    RELFEAT         The reliability features adds one byte to the
     0C15             (    constants.asm):00186         RAMFTCH set     WDICSPC+5       header: a checksum.
                      (    constants.asm):00187                 ENDC
                      (    constants.asm):00188         
                      (        forth.asm):00099         
                      (        forth.asm):00100         * Unchecked NPUSH. This is for situations in which there is absolutely no
                      (        forth.asm):00101         * chance of overflow. For instance, in case we just popped 2 cells and push
                      (        forth.asm):00102         * back one or two.
0000                  (        forth.asm):00103         UCNPUSH MACRO   NOEXPAND
                      (        forth.asm):00104                 pshu    x
                      (        forth.asm):00105                 ENDM
                      (        forth.asm):00106         
                      (        forth.asm):00107         * Unchecked NPOP. To be used only after trusted words have been invoked, i.e.
                      (        forth.asm):00108         * when one is positively sure that the data stack contains at least one cell.
0000                  (        forth.asm):00109         UCNPOP  MACRO   NOEXPAND
                      (        forth.asm):00110                 pulu    x
                      (        forth.asm):00111                 ENDM
                      (        forth.asm):00112         
                      (        forth.asm):00113         * Make sure minimum data stack requirements are satisfied upon word entry.
                      (        forth.asm):00114         * The requirement is expressed in cell size--2 bytes on the 6309.
                      (        forth.asm):00115         * \1 specifies the required number of cells.
0000                  (        forth.asm):00116         MINDREQ MACRO   NOEXPAND
                      (        forth.asm):00117                 ldd     #NSTBOT-(\1*2)  Cell count one expects to be stacked up
                      (        forth.asm):00118                 bra     CHKNDPT         No return if the condition is not met
                      (        forth.asm):00119                 ENDM
                      (        forth.asm):00120         
                      (        forth.asm):00121         * Reliability feature support: execution tokens.
                      (        forth.asm):00122         * \1 has the opcode we want to emit.
                      (        forth.asm):00123         * \2 has the execution token address, as if the header overhead always
                      (        forth.asm):00124         * was 3 bytes.
0000                  (        forth.asm):00125         RFXT    MACRO   NOEXPAND
                      (        forth.asm):00126                 IFNE    RELFEAT
                      (        forth.asm):00127                 \1      \2+1
                      (        forth.asm):00128                 ELSE
                      (        forth.asm):00129                 \1      \2
                      (        forth.asm):00130                 ENDC
                      (        forth.asm):00131                 ENDM
                      (        forth.asm):00132         
                      (        forth.asm):00133         * Reliability feature support: variable word header contents.
                      (        forth.asm):00134         * This is a dummy checksum only used for EEPROM resident words.
                      (        forth.asm):00135         * Those never are checked for code integrity by MONITOR.
0000                  (        forth.asm):00136         RFCS    MACRO   NOEXPAND
                      (        forth.asm):00137                 IFNE    RELFEAT
                      (        forth.asm):00138                 fcb     ILLOPC          Illegal opcode
                      (        forth.asm):00139                 ENDC
                      (        forth.asm):00140                 ENDM
                      (        forth.asm):00141         
                      (        forth.asm):00142         *******************************************************************************
                      (        forth.asm):00143         * RAM definitions. We cannot initialize globals from the assembly defs.
                      (        forth.asm):00144         * All we can do here is define addresses and size things up.
                      (        forth.asm):00145         
                      (        forth.asm):00146         * RAMSTART is 0. We leave page 0 unused as a bug proof area.
                      (        forth.asm):00147         * When compiled in debug mode, this area is filled with illegal
                      (        forth.asm):00148         * instruction opcodes ($C7).
                      (        forth.asm):00149         
                      (        forth.asm):00150                 org     VARSPC
                      (        forth.asm):00151         
                      (        forth.asm):00152         * Global pointers.
0100                  (        forth.asm):00153         RSP     rmb     2               The return stack pointer
0102                  (        forth.asm):00154         TOKENSP rmb     2               Token start pointer (STRS)
0104                  (        forth.asm):00155         TOKENEP rmb     2               Token end pointer (STRE)
0106                  (        forth.asm):00156         LSTWAD  rmb     2               Last defined word header pointer--LAST
0108                  (        forth.asm):00157         DICEND  rmb     2               Current end of the dictionary--HERE
010A                  (        forth.asm):00158         BLSTWAD rmb     2               Backup (was IX)
010C                  (        forth.asm):00159         BDICEND rmb     2               Backup (was IY)
010E                  (        forth.asm):00160         PLOAD   rmb     2               Word payload if found by SWDIC
0110                  (        forth.asm):00161         FNDPLD  rmb     2               Last code payload reported by FIND
0112                  (        forth.asm):00162         RECADDR rmb     2               Used by RECURSE
0114                  (        forth.asm):00163         JSRLAST rmb     2               Last compilation address of #JSROPC
0116                  (        forth.asm):00164         VLPRVEP rmb     2               Used in VLIST to compute word code length
0118                  (        forth.asm):00165         VLPRVHD rmb     2               Used in VLIST to compute word code length
011A                  (        forth.asm):00166         MRUBUFA rmb     2               Most recently used buffer address
011C                  (        forth.asm):00167         BSBFADR rmb     2               Base buffer address for the input stream
                      (        forth.asm):00168         
                      (        forth.asm):00169         * Global variables.
011E                  (        forth.asm):00170         UBASE   rmb     2               Base for numbers input and output--BASE
0120                  (        forth.asm):00171         USTATE  rmb     2               0 if interpreting, 1 if compiling--STATE
0122                  (        forth.asm):00172         UTOIN   rmb     2               User variable for >IN
0124                  (        forth.asm):00173         UBLK    rmb     2               User variable for BLK
0126                  (        forth.asm):00174         USCR    rmb     2               User variable for SCR (output for LIST)
                      (        forth.asm):00175                 IFNE    DEBUG
0128                  (        forth.asm):00176         CCREG   rmb     2               A DEBUG variable for predicates (see CMP2)
                      (        forth.asm):00177                 ENDC
0128                  (        forth.asm):00178         BASBKUP rmb     1               BASE backup when a base prefix is in use
0129                  (        forth.asm):00179         CMDLNSZ rmb     1               Entered character count in GETS (INTERP)
012A                  (        forth.asm):00180         RDEPTH  rmb     1               Return stack depth in cells
012B                  (        forth.asm):00181         IRDPTH  rmb     1               Return stack depth when : was last invoked
012C                  (        forth.asm):00182         RTSREMV rmb     1               If > 1, omit the final RTS when compiling
012D                  (        forth.asm):00183         DIVFCN  rmb     1               Flag used by /, MOD and /MOD
012E                  (        forth.asm):00184         F83DIVF rmb     1               FORTH-83 adjusment flag for floored division
012F                  (        forth.asm):00185         STSLFCN rmb     1               Flag used by */, */MOD
0130                  (        forth.asm):00186         CVTFCN  rmb     1               CVT: 0 => # semantics, 1 => #S semantics
0131                  (        forth.asm):00187         ISNEGF  rmb     1               Number being scanned is negative
0132                  (        forth.asm):00188         CVISSGN rmb     1               Flag: should CVNSTR consider numbers as signed
0133                  (        forth.asm):00189         CURTOKL rmb     1               Current token length. Set by SWDIC
0134                  (        forth.asm):00190         IMDFLG  rmb     1               Immediate flag
0135                  (        forth.asm):00191         DEFFLG  rmb     1               Define flag
0136                  (        forth.asm):00192         NBCTFB0 rmb     1               NZ if -->/CONTINUED invoked from the console
                      (        forth.asm):00193         
0137                  (        forth.asm):00194         CFCARDP rmb     1               NZ if CF card present
0138                  (        forth.asm):00195         CFCMMIR rmb     1               Last CF command issued
0139                  (        forth.asm):00196         CFERRCD rmb     1               and the corresponding error code
                      (        forth.asm):00197         
013A                  (        forth.asm):00198         PADBUF  rmb     PADBSZ          PAD lives here. Used by <#, #, #S, #> and DUMP
                      (        forth.asm):00199         
                      (        forth.asm):00200         * The normal (data) stack.
018B 00               (        forth.asm):00201                 align   2
     018C             (        forth.asm):00202         NSTTOP  equ     *               U's value when the data stack is full
018C                  (        forth.asm):00203                 rmb     NSTKSZ
     024C             (        forth.asm):00204         NSTBOT  equ     *               U's value when the data stack is empty
                      (        forth.asm):00205         
                      (        forth.asm):00206         * The return stack.
     024C             (        forth.asm):00207         RSTTOP  equ     *
024C                  (        forth.asm):00208                 rmb     RSTKSZ
     02CC             (        forth.asm):00209         RSTBOT  equ     *
                      (        forth.asm):00210         
02CC                  (        forth.asm):00211         CMDBUF  rmb     CMDBFSZ
0350                  (        forth.asm):00212         HEXBUF  rmb     HEXBFSZ
                      (        forth.asm):00213         
03A0                  (        forth.asm):00214         TBUFF   rmb     TBUFSZ          Output for CVNSTR. Also used by DUMP
                      (        forth.asm):00215         
03E8 0000000000000000 (        forth.asm):00216                 align   16
03F0                  (        forth.asm):00217         BUF0    rmb     BLKSIZ+4
                      (        forth.asm):00218         
07F4 0000000000000000 (        forth.asm):00219                 align   16
     00000000
0800                  (        forth.asm):00220         BUF1    rmb     BLKSIZ+4
                      (        forth.asm):00221         
                      (        forth.asm):00222         *******************************************************************************
                      (        forth.asm):00223         * Writable dictionary section begins right here. We cannot have anything
                      (        forth.asm):00224         * statically defined at this point. Therefore, FORTHIN moves the code for @
                      (        forth.asm):00225         * to this location and sets up DICEND and LSTWAD accordingly. All the RAM
                      (        forth.asm):00226         * beyond this point (after the reallocated @ implementation) is user defined
                      (        forth.asm):00227         * material. Note that builtin words, though they cannot be forgotten (to the
                      (        forth.asm):00228         * extent they are ROM resident--not to mention inter-word dependencies),
                      (        forth.asm):00229         * might still be overridden by user definitions. VLIST will happily ignore
                      (        forth.asm):00230         * that fact and list everything in the dictionary linked list order.
                      (        forth.asm):00231         
0C04 0000000000000000 (        forth.asm):00232                 align   16
     00000000
     0C10             (        forth.asm):00233         WDICSPC equ     *
                      (        forth.asm):00234         
                      (        forth.asm):00235         *******************************************************************************
                      (        forth.asm):00236         * ROM code begins.
                      (        forth.asm):00237         
                      (        forth.asm):00238                 org     ROMSTRT
                      (        forth.asm):00239         * Trap handler: division by zero or illegal opcode. See page 4-10 of "The 6309
                      (        forth.asm):00240         * Book" for a description of interrupt stacks in native 6309 mode.
E000 113C40           (        forth.asm):00241 (4)     IODZHDL bitmd   #$40            Illegal opcode?
E003 2705             (        forth.asm):00242 (3)             beq     @iodzh1
E005 8EFE4F           (        forth.asm):00243 (3)             ldx     #IOPERRM
E008 2008             (        forth.asm):00244 (3)             bra     @iodxh2
E00A 113C80           (        forth.asm):00245 (4)     @iodzh1 bitmd   #$80            Division by zero?
E00D 2725             (        forth.asm):00246 (3)             beq     @iodzh3         And you may ask yourself, well
                      (        forth.asm):00247         *                               How did I get here?
E00F 8EFE64           (        forth.asm):00248 (3)             ldx     #DV0ERRM
E012 BDE1DA           (        forth.asm):00249 (7)     @iodxh2 jsr     PUTS
E015 EC6C             (        forth.asm):00250 (5+1)           ldd     12,s            Return code address (PC)
E017 8E0350           (        forth.asm):00251 (3)             ldx     #HEXBUF
E01A BDE174           (        forth.asm):00252 (7)             jsr     HDMP4   
E01D 8E0350           (        forth.asm):00253 (3)             ldx     #HEXBUF
E020 BDE1DA           (        forth.asm):00254 (7)             jsr     PUTS
E023 BDE1E7           (        forth.asm):00255 (7)             jsr     PUTCR
E026 8EE653           (        forth.asm):00256 (3)             ldx     #ERRHD1
E029 AF6C             (        forth.asm):00257 (5+1)           stx     12,s            Resume execution in the error handler
E02B 8EE000           (        forth.asm):00258 (3)             ldx     #IODZHDL
E02E AF68             (        forth.asm):00259 (5+1)           stx     8,s             With Y set to IODZHDL
E030 8603             (        forth.asm):00260 (2)             lda     #3              And user ABORT error code
E032 A762             (        forth.asm):00261 (4+1)           sta     2,s             Passed back through B
E034 3B               (        forth.asm):00262 (17+?)  @iodzh3 rti
                      (        forth.asm):00263         
     E035             (        forth.asm):00264         SWI3HDL equ     *
     E035             (        forth.asm):00265         SWI2HDL equ     *
     E035             (        forth.asm):00266         FIRQHDL equ     *
     E035             (        forth.asm):00267         IRQHDL  equ     *
     E035             (        forth.asm):00268         SWIHDL  equ     *
E035 20FE             (        forth.asm):00269 (3)     NMIHDL  bra     *               These should never happen
                      (        forth.asm):00270         
                      (        forth.asm):00271         * Interrupts are disabled by default upon reset.
E037 113D01           (        forth.asm):00272 (5)     RSTHDL  ldmd    #1              Establish 6309 native mode
                      (        forth.asm):00273         
E03A 8643             (        forth.asm):00274 (2)             lda     #ACIRSET
E03C B7D800           (        forth.asm):00275 (4)             sta     ACIACTL         ACIA master reset
E03F 8655             (        forth.asm):00276 (2)             lda     #ACIRTS1
E041 B7D800           (        forth.asm):00277 (4)             sta     ACIACTL         RTS# high, 8N1
                      (        forth.asm):00278         
E044 8EFDCD           (        forth.asm):00279 (3)             ldx     #BOOTMSG        Identity statement
                      (        forth.asm):00280         
                      (        forth.asm):00281         * Send the NUL terminated string pointed to by X to the ACIA.
                      (        forth.asm):00282         * The RAM is not assumed to be working.
E047 C602             (        forth.asm):00283 (2)     INIT    ldb     #ACITDRE
E049 A680             (        forth.asm):00284 (4+1)   @init0  lda     ,x+
E04B 270A             (        forth.asm):00285 (3)             beq     RAMCHK          NUL marks the end of the string
E04D F5D800           (        forth.asm):00286 (4)     @init1  bitb    ACIACTL         Wait for TDRE bit to be set
E050 27FB             (        forth.asm):00287 (3)             beq     @init1
E052 B7D801           (        forth.asm):00288 (4)             sta     ACIADAT         Transmit data
E055 20F2             (        forth.asm):00289 (3)             bra     @init0          Next char, if any
                      (        forth.asm):00290         
                      (        forth.asm):00291         * RAM0 32 KB self test (destructive).
E057 8E0000           (        forth.asm):00292 (3)     RAMCHK  ldx     #RAMSTRT
E05A AF84             (        forth.asm):00293 (5+0)   @ramch1 stx     ,x
E05C AC84             (        forth.asm):00294 (5+0)           cmpx    ,x
E05E 2609             (        forth.asm):00295 (3)             bne     RAMFAIL
E060 3002             (        forth.asm):00296 (4+1)           leax    2,x
E062 8C8000           (        forth.asm):00297 (3)             cmpx    #RAMSTRT+RAMSIZE
E065 26F3             (        forth.asm):00298 (3)             bne     @ramch1
E067 2012             (        forth.asm):00299 (3)             bra     RAMOK
                      (        forth.asm):00300         
E069 C680             (        forth.asm):00301 (2)     RAMFAIL ldb     #128
E06B 108E8000         (        forth.asm):00302 (4)     @ramf1  ldy     #$8000
E06F 313F             (        forth.asm):00303 (4+1)   @ramf2  leay    -1,y
E071 26FC             (        forth.asm):00304 (3)             bne     @ramf2
E073 5A               (        forth.asm):00305 (1)             decb
E074 26F5             (        forth.asm):00306 (3)             bne     @ramf1
E076 8EFE36           (        forth.asm):00307 (3)             ldx     #RAMFM
E079 20CC             (        forth.asm):00308 (3)             bra     INIT            Here we go again
                      (        forth.asm):00309         
                      (        forth.asm):00310         * RAM Initialization to all $C7 if DEBUG mode is enabled else zeroes.
E07B 8E0000           (        forth.asm):00311 (3)     RAMOK   ldx     #RAMSTRT
E07E 3101             (        forth.asm):00312 (4+1)           leay    1,x
E080 10867FFF         (        forth.asm):00313 (4)             ldw     #RAMSIZE-1
                      (        forth.asm):00314                 IFNE    DEBUG
                      (        forth.asm):00315                 lda     #ILLOPC
                      (        forth.asm):00316                 sta     ,x
                      (        forth.asm):00317                 ELSE
E084 6F84             (        forth.asm):00318 (6+0)           clr     ,x
                      (        forth.asm):00319                 ENDC
E086 113812           (        forth.asm):00320 (6+?)           tfm     x+,y+
                      (        forth.asm):00321         
                      (        forth.asm):00322         * Initialize the system stack pointer and the direct page base address register.
E089 10CE8000         (        forth.asm):00323 (4)             lds     #RAMSTRT+RAMSIZE
E08D 8601             (        forth.asm):00324 (2)             lda     #VARSPC/256
E08F 1F8B             (        forth.asm):00325 (4)             tfr     a,dp
     01               (        forth.asm):00326                 SETDP   VARSPC/256
                      (        forth.asm):00327         
E091 8EFE26           (        forth.asm):00328 (3)             ldx     #RAMOKM
E094 BDE1DA           (        forth.asm):00329 (7)             jsr     PUTS
E097 BDE240           (        forth.asm):00330 (7)             jsr     FORTHIN         Global variables initialization
E09A BDE7A1           (        forth.asm):00331 (7)             jsr     CFINIT          CompactFlash card initialization
E09D 0D37             (        forth.asm):00332 (4)             tst     CFCARDP
E09F 2706             (        forth.asm):00333 (3)             beq     INTERP
                      (        forth.asm):00334         
                      (        forth.asm):00335         * A CF card is present, LOAD block #1.
E0A1 8E0001           (        forth.asm):00336 (3)             ldx     #1
E0A4 BDF693           (        forth.asm):00337 (7)             jsr     LOAD1
                      (        forth.asm):00338         
                      (        forth.asm):00339         * The interpreter main loop.
E0A7 104F             (        forth.asm):00340 (2)     INTERP  clrd
E0A9 DD24             (        forth.asm):00341 (4)             std     UBLK            Interpreting from the console. Set BLK to 0
E0AB DD22             (        forth.asm):00342 (4)             std     UTOIN
E0AD 8E02CC           (        forth.asm):00343 (3)             ldx     #CMDBUF
E0B0 9F1C             (        forth.asm):00344 (4)             stx     BSBFADR
E0B2 C683             (        forth.asm):00345 (2)             ldb     #CMDBFSZ-1      NUL terminator is not included in the char count
E0B4 BDE1FD           (        forth.asm):00346 (7)             jsr     GETS            Acquire command from the console
                      (        forth.asm):00347         * Additional setup in case the ANSI \ is used.
E0B7 D729             (        forth.asm):00348 (3)             stb     CMDLNSZ         GETS returns the entered character count via B
                      (        forth.asm):00349         * Additional preparation work for block support.
E0B9 0F36             (        forth.asm):00350 (5)             clr     NBCTFB0         Flag whether -->/CONTINUED is called from blk 0
E0BB 8D02             (        forth.asm):00351 (6)             bsr     _INTERP
E0BD 20E8             (        forth.asm):00352 (3)     MINTLRA bra     INTERP
                      (        forth.asm):00353         
                      (        forth.asm):00354         * The interpreter itself.
E0BF BDE27F           (        forth.asm):00355 (7)     _INTERP jsr     SCNSTOK         Scan for the beginning of a word at address X
E0C2 2715             (        forth.asm):00356 (3)             beq     @more0          This is the end
E0C4 0D21             (        forth.asm):00357 (4)             tst     USTATE+1        We do ignore the upper byte
E0C6 2644             (        forth.asm):00358 (3)             bne     COMP            We are compiling
E0C8 BDE39E           (        forth.asm):00359 (7)             jsr     SWDIC           Updates TOKENEP, CURTOKL, IMDFLG/DEFFLG
E0CB 2624             (        forth.asm):00360 (3)             bne     @exec           Word found, execute it
E0CD BDE2DC           (        forth.asm):00361 (7)             jsr     NUMCVT
     E0D0             (        forth.asm):00362         NMCVIRA equ     *
E0D0 BDE6CA           (        forth.asm):00363 (7)             jsr     NPUSH
E0D3 9E04             (        forth.asm):00364 (4)             ldx     TOKENEP
E0D5 6D84             (        forth.asm):00365 (5+0)   MORE    tst     ,x
E0D7 26E6             (        forth.asm):00366 (3)             bne     _INTERP         Next token, please!
                      (        forth.asm):00367         * End of input stream condition is recognized.
E0D9 DC24             (        forth.asm):00368 (4)     @more0  ldd     UBLK
E0DB 2705             (        forth.asm):00369 (3)             beq     @more1          We are back from the console
E0DD 0D36             (        forth.asm):00370 (4)             tst     NBCTFB0         -->/CONTINUED invoked from the console?
E0DF 2601             (        forth.asm):00371 (3)             bne     @more1          Yes
E0E1 39               (        forth.asm):00372 (4)             rts                     No, we're done here
E0E2 0F36             (        forth.asm):00373 (5)     @more1  clr     NBCTFB0         The -->/CONTINUED exception only applies once
E0E4 8EFE49           (        forth.asm):00374 (3)             ldx     #OKFEEDB        Provide OK feedback
E0E7 0D21             (        forth.asm):00375 (4)             tst     USTATE+1        No OK feedback if we're compiling, just CRLF
E0E9 2702             (        forth.asm):00376 (3)             beq     @more2
E0EB 3003             (        forth.asm):00377 (4+1)           leax    3,x             Skip the ' OK' string when compiling
E0ED BDE1DA           (        forth.asm):00378 (7)     @more2  jsr     PUTS
E0F0 39               (        forth.asm):00379 (4)             rts                     Back to whoever invoked us
E0F1 9635             (        forth.asm):00380 (3)     @exec   lda     DEFFLG
E0F3 2705             (        forth.asm):00381 (3)             beq     @introk         Compilation only flag is not set
E0F5 C606             (        forth.asm):00382 (2)             ldb     #6              Incorrect STATE
E0F7 BDE650           (        forth.asm):00383 (7)             jsr     ERRHDLR         No return
     E0FA             (        forth.asm):00384         INTISRA equ     *               For symbolic stack debugging purposes
E0FA DC04             (        forth.asm):00385 (4)     @introk ldd     TOKENEP
E0FC 931C             (        forth.asm):00386 (4)             subd    BSBFADR
E0FE DD22             (        forth.asm):00387 (4)             std     UTOIN           Derive >IN from TOKENEP
E100 8EE107           (        forth.asm):00388 (3)             ldx     #INTRPRA        The return address
E103 3410             (        forth.asm):00389 (4+2)           pshs    x
E105 1F25             (        forth.asm):00390 (4)             tfr     y,pc            An indirect call to Y
E107 BDE71E           (        forth.asm):00391 (7)     INTRPRA jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
E10A 20C9             (        forth.asm):00392 (3)             bra     MORE
                      (        forth.asm):00393         
                      (        forth.asm):00394         * The compiler.
                      (        forth.asm):00395         * Upon entry TOKENSP has been set by a prior call to SCNSTOK.
E10C BDE39E           (        forth.asm):00396 (7)     COMP    jsr     SWDIC           Updates TOKENEP, CURTOKL, IMDFLG/DEFFLG
E10F 2720             (        forth.asm):00397 (3)             beq     @cmpnum         Word @ TOKENSP is not in the dictionary
E111 0D34             (        forth.asm):00398 (4)             tst     IMDFLG
E113 2714             (        forth.asm):00399 (3)             beq     @notimd
E115 DC04             (        forth.asm):00400 (4)             ldd     TOKENEP         Derive >IN from TOKENEP
E117 931C             (        forth.asm):00401 (4)             subd    BSBFADR
E119 DD22             (        forth.asm):00402 (4)             std     UTOIN
E11B 8EE122           (        forth.asm):00403 (3)             ldx     #COMPLRA        Word is immediate. Execute it.
E11E 3410             (        forth.asm):00404 (4+2)           pshs    x               Return to COMPLRA
E120 1F25             (        forth.asm):00405 (4)             tfr     y,pc            An indirect call to Y
E122 BDE71E           (        forth.asm):00406 (7)     COMPLRA jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
E125 9F04             (        forth.asm):00407 (4)             stx     TOKENEP
E127 20AC             (        forth.asm):00408 (3)             bra     MORE            Branch back to the interpreter
E129 1F21             (        forth.asm):00409 (4)     @notimd tfr     y,x
E12B 8D20             (        forth.asm):00410 (6)             bsr     EMXASXT         Emit X as an execution token
E12D 9E04             (        forth.asm):00411 (4)     @cmpdon ldx     TOKENEP
E12F 20A4             (        forth.asm):00412 (3)             bra     MORE
E131 BDE2DC           (        forth.asm):00413 (7)     @cmpnum jsr     NUMCVT
     E134             (        forth.asm):00414         NMCVCRA equ     *
E134 BDE46E           (        forth.asm):00415 (7)             jsr     LITER
E137 20F4             (        forth.asm):00416 (3)             bra     @cmpdon
                      (        forth.asm):00417         
                      (        forth.asm):00418         * Check whether the final RTS can be eliminated. It can only be if we have no
                      (        forth.asm):00419         * forward references to HERE when COMPR (;) is invoked. This is a rather
                      (        forth.asm):00420         * complicated matter but this implementation works on the basis that we can do
                      (        forth.asm):00421         * so safely if at least 2 subroutine calls have been issued with a return
                      (        forth.asm):00422         * stack whose depth is equal to IRDPTH, immediately prior to the invokation
                      (        forth.asm):00423         * of COMPR (;).
E139 3402             (        forth.asm):00424 (4+1)   CHKRTS  pshs    a
E13B 109F14           (        forth.asm):00425 (5)             sty     JSRLAST         JSRLAST points to the latest JSR code emission
E13E 962A             (        forth.asm):00426 (3)             lda     RDEPTH
E140 912B             (        forth.asm):00427 (3)             cmpa    IRDPTH          Return stack depth when : was last invoked
E142 2705             (        forth.asm):00428 (3)             beq     @ckrts1
E144 0F2C             (        forth.asm):00429 (5)             clr     RTSREMV
E146 3502             (        forth.asm):00430 (4+1)   @ckrts0 puls    a
E148 39               (        forth.asm):00431 (4)             rts
E149 0C2C             (        forth.asm):00432 (5)     @ckrts1 inc     RTSREMV
E14B 20F9             (        forth.asm):00433 (3)             bra     @ckrts0
                      (        forth.asm):00434         
                      (        forth.asm):00435         * Emit (in a code generation understanding) X as an execution token.
                      (        forth.asm):00436         * In essence, this simply inserts JSR <X> at HERE.
                      (        forth.asm):00437         * Note: this code provides support for trailing JSR elimination.
                      (        forth.asm):00438         * On input: X has the target execution token.
                      (        forth.asm):00439         * On output: Y will have HERE, A will be altered, X will be preserved.
E14D 109E08           (        forth.asm):00440 (5)     EMXASXT ldy     DICEND
E150 8DE7             (        forth.asm):00441 (6)             bsr     CHKRTS          Check if the final RTS can be omitted
E152 86BD             (        forth.asm):00442 (2)             lda     #JSROPC         JSR extended
E154 BDE485           (        forth.asm):00443 (7)             jsr     VARCON2         Compile a JSR to the action component
E157 109F08           (        forth.asm):00444 (5)             sty     DICEND
E15A 39               (        forth.asm):00445 (4)             rts
                      (        forth.asm):00446         
                      (        forth.asm):00447         * Store the HEX representation of the lower nibble of A to X+.
E15B 3404             (        forth.asm):00448 (4+1)   HEX1D   pshs    b
E15D C630             (        forth.asm):00449 (2)             ldb     #'0
E15F 840F             (        forth.asm):00450 (2)             anda    #$0f
E161 810A             (        forth.asm):00451 (2)             cmpa    #10
E163 2502             (        forth.asm):00452 (3)             bcs     @hex1d1
E165 C637             (        forth.asm):00453 (2)             ldb     #'A-10
E167 103098           (        forth.asm):00454 (4)     @hex1d1 addr    b,a
E16A A780             (        forth.asm):00455 (4+1)           sta     ,x+
E16C 3504             (        forth.asm):00456 (4+1)           puls    b
E16E 39               (        forth.asm):00457 (4)             rts
                      (        forth.asm):00458         
E16F 44               (        forth.asm):00459 (1)     ADIV16  lsra
E170 44               (        forth.asm):00460 (1)             lsra
E171 44               (        forth.asm):00461 (1)             lsra
E172 44               (        forth.asm):00462 (1)             lsra
E173 39               (        forth.asm):00463 (4)             rts
                      (        forth.asm):00464         
                      (        forth.asm):00465         * Hexdump D to 4 bytes starting at X.  Upon return, X will point 1 byte
                      (        forth.asm):00466         * after the last character emitted. D is preserved.
E174 3406             (        forth.asm):00467 (4+2)   HDMP4   pshs    d
E176 8DF7             (        forth.asm):00468 (6)             bsr     ADIV16
E178 8DE1             (        forth.asm):00469 (6)             bsr     HEX1D
E17A A6E4             (        forth.asm):00470 (4+0)           lda     ,s
E17C 8DDD             (        forth.asm):00471 (6)             bsr     HEX1D
E17E A661             (        forth.asm):00472 (4+1)           lda     1,s
E180 8DED             (        forth.asm):00473 (6)             bsr     ADIV16
E182 8DD7             (        forth.asm):00474 (6)             bsr     HEX1D
E184 A661             (        forth.asm):00475 (4+1)           lda     1,s
E186 8DD3             (        forth.asm):00476 (6)             bsr     HEX1D
E188 3506             (        forth.asm):00477 (4+2)           puls    d
E18A 6F84             (        forth.asm):00478 (6+0)           clr     ,x
E18C 39               (        forth.asm):00479 (4)             rts
                      (        forth.asm):00480         
E18D 3406             (        forth.asm):00481 (4+2)   HDMP2   pshs    d
E18F 8DDE             (        forth.asm):00482 (6)             bsr     ADIV16
E191 8DC8             (        forth.asm):00483 (6)             bsr     HEX1D
E193 A6E4             (        forth.asm):00484 (4+0)           lda     ,s
E195 8DC4             (        forth.asm):00485 (6)             bsr     HEX1D
E197 3506             (        forth.asm):00486 (4+2)           puls    d
E199 6F84             (        forth.asm):00487 (6+0)           clr     ,x
E19B 39               (        forth.asm):00488 (4)             rts
                      (        forth.asm):00489         
                      (        forth.asm):00490         * Add string pointed to by Y starting at the address stored in X.
E19C 3402             (        forth.asm):00491 (4+1)   ADDS    pshs    a
E19E A6A0             (        forth.asm):00492 (4+1)   @adds1  lda     ,y+
E1A0 A780             (        forth.asm):00493 (4+1)           sta     ,x+
E1A2 26FA             (        forth.asm):00494 (3)             bne     @adds1
E1A4 3502             (        forth.asm):00495 (4+1)           puls    a
E1A6 39               (        forth.asm):00496 (4)             rts
                      (        forth.asm):00497         
                      (        forth.asm):00498         * Returns the length of the string pointed to by X (terminator excluded) in W.
E1A7 3410             (        forth.asm):00499 (4+2)   SLEN    pshs    x
E1A9 105F             (        forth.asm):00500 (2)             clrw
E1AB 105C             (        forth.asm):00501 (2)     @slen1  incw
E1AD A680             (        forth.asm):00502 (4+1)           lda     ,x+
E1AF 26FA             (        forth.asm):00503 (3)             bne     @slen1
E1B1 105A             (        forth.asm):00504 (2)             decw
E1B3 3510             (        forth.asm):00505 (4+2)           puls    x
E1B5 39               (        forth.asm):00506 (4)             rts
                      (        forth.asm):00507         
                      (        forth.asm):00508                 include console.asm
E1B6 3404             (      console.asm):00001 (4+1)   PUTCH   pshs    b
E1B8 C602             (      console.asm):00002 (2)             ldb     #ACITDRE
E1BA F5D800           (      console.asm):00003 (4)     @ptch1  bitb    ACIACTL         Wait for TDRE bit to be set
E1BD 27FB             (      console.asm):00004 (3)             beq     @ptch1
E1BF B7D801           (      console.asm):00005 (4)             sta     ACIADAT         Transmit data
E1C2 3504             (      console.asm):00006 (4+1)           puls    b
E1C4 39               (      console.asm):00007 (4)             rts
                      (      console.asm):00008         
E1C5 8615             (      console.asm):00009 (2)     GETCH   lda     #ACIRTS0
E1C7 B7D800           (      console.asm):00010 (4)             sta     ACIACTL         You may talk to me now
E1CA 8601             (      console.asm):00011 (2)             lda     #ACIRDRF
E1CC B5D800           (      console.asm):00012 (4)     @again  bita    ACIACTL
E1CF 27FB             (      console.asm):00013 (3)             beq     @again
E1D1 8655             (      console.asm):00014 (2)             lda     #ACIRTS1
E1D3 B7D800           (      console.asm):00015 (4)             sta     ACIACTL         You may shut up now
E1D6 B6D801           (      console.asm):00016 (4)     @getdat lda     ACIADAT         Get character from the ACIA
E1D9 39               (      console.asm):00017 (4)             rts
                      (      console.asm):00018         
                      (      console.asm):00019         * Send NUL terminated string pointed to by X to the ACIA.
E1DA 3416             (      console.asm):00020 (4+4)   PUTS    pshs    x,d
E1DC A680             (      console.asm):00021 (4+1)   @puts1  lda     ,x+
E1DE 2704             (      console.asm):00022 (3)             beq     @puts2         NUL marks the end of the string
E1E0 8DD4             (      console.asm):00023 (6)             bsr     PUTCH
E1E2 20F8             (      console.asm):00024 (3)             bra     @puts1
E1E4 3516             (      console.asm):00025 (4+4)   @puts2  puls    d,x
E1E6 39               (      console.asm):00026 (4)             rts
                      (      console.asm):00027         
E1E7 3410             (      console.asm):00028 (4+2)   PUTCR   pshs    x
E1E9 8EFE33           (      console.asm):00029 (3)             ldx     #CRLFSTR
E1EC 8DEC             (      console.asm):00030 (6)             bsr     PUTS
E1EE 3510             (      console.asm):00031 (4+2)           puls    x
E1F0 39               (      console.asm):00032 (4)             rts
                      (      console.asm):00033         
E1F1 8608             (      console.asm):00034 (2)     _BS     lda     #BS
E1F3 8DC1             (      console.asm):00035 (6)             bsr     PUTCH          Output BS
E1F5 8620             (      console.asm):00036 (2)             lda     #SP
E1F7 8DBD             (      console.asm):00037 (6)             bsr     PUTCH          Clear character
E1F9 8608             (      console.asm):00038 (2)             lda     #BS
E1FB 20B9             (      console.asm):00039 (3)             bra     PUTCH          And go back again
                      (      console.asm):00040         
                      (      console.asm):00041         * Receive CR terminated string and store it to X.
                      (      console.asm):00042         * Upon entry B contains the receiving buffer length.
                      (      console.asm):00043         * (excluding the NUL terminator). On exit, B will
                      (      console.asm):00044         * contain the number of characters entered (excluding
                      (      console.asm):00045         * the trailing NUL). A and X are preserved. B will
                      (      console.asm):00046         * have the actual number of characters entered.
                      (      console.asm):00047         * Implementation of $05D9 in the TRS-80 Level II ROM.
E1FD C102             (      console.asm):00048 (2)     GETS    cmpb    #2
E1FF 2401             (      console.asm):00049 (3)             bhs     @gets0          B must be 2 or more
E201 39               (      console.asm):00050 (4)             rts
E202 3416             (      console.asm):00051 (4+4)   @gets0  pshs    x,d
E204 8DBF             (      console.asm):00052 (6)     @gets1  bsr     GETCH
E206 8108             (      console.asm):00053 (2)             cmpa    #BS             Backspace?
E208 260B             (      console.asm):00054 (3)             bne     @gets3
E20A E161             (      console.asm):00055 (4+1)           cmpb    1,s             B upon routine entry
E20C 27F6             (      console.asm):00056 (3)             beq     @gets1          Do not go beyond the beginning of the buffer
E20E 8DE1             (      console.asm):00057 (6)             bsr     _BS
E210 301F             (      console.asm):00058 (4+1)           leax    -1,x
E212 5C               (      console.asm):00059 (1)             incb
E213 20EF             (      console.asm):00060 (3)             bra     @gets1
E215 8115             (      console.asm):00061 (2)     @gets3  cmpa    #NAK            Kill input?
E217 260B             (      console.asm):00062 (3)             bne     @gets5
                      (      console.asm):00063         * While B != 1,S (initial buffer length), decrement X, increment B.
E219 E161             (      console.asm):00064 (4+1)   @gets4  cmpb    1,s
E21B 27E7             (      console.asm):00065 (3)             beq     @gets1
E21D 8DD2             (      console.asm):00066 (6)             bsr     _BS
E21F 301F             (      console.asm):00067 (4+1)           leax     -1,x
E221 5C               (      console.asm):00068 (1)             incb
E222 20F5             (      console.asm):00069 (3)             bra     @gets4
                      (      console.asm):00070         * Regular input handling: echo input character.
E224 810D             (      console.asm):00071 (2)     @gets5  cmpa    #CR
E226 2709             (      console.asm):00072 (3)             beq     @gets6          Minicom only sends CR
E228 8D8C             (      console.asm):00073 (6)             bsr     PUTCH
E22A A780             (      console.asm):00074 (4+1)           sta     ,x+
E22C 5A               (      console.asm):00075 (1)             decb
E22D C101             (      console.asm):00076 (2)             cmpb    #1              End of buffer reached?
E22F 26D3             (      console.asm):00077 (3)             bne     @gets1
E231 8620             (      console.asm):00078 (2)     @gets6  lda     #SP
E233 8D81             (      console.asm):00079 (6)             bsr     PUTCH
E235 6F84             (      console.asm):00080 (6+0)           clr     ,x
E237 1F10             (      console.asm):00081 (4)             tfr     x,d
E239 A362             (      console.asm):00082 (5+1)           subd    2,s             Actual number of characters entered
E23B E761             (      console.asm):00083 (4+1)           stb     1,s             Stored to B (through the system stack).         
E23D 3516             (      console.asm):00084 (4+4)           puls    d,x
E23F 39               (      console.asm):00085 (4)             rts
                      (      console.asm):00086         
                      (        forth.asm):00509         
                      (        forth.asm):00510                 IFNE    DEBUG
E240                  (        forth.asm):00511         PAGE0IN pshs    x               Fill up page 0 with all C7 (an illegal opcode)
                      (        forth.asm):00512                 ldx     #RAMSTRT
                      (        forth.asm):00513                 lda     #ILLOPC
                      (        forth.asm):00514                 sta     ,x
                      (        forth.asm):00515                 leay    1,x
                      (        forth.asm):00516                 ldw     #255
                      (        forth.asm):00517                 tfm     x+,y+
                      (        forth.asm):00518                 puls    x
                      (        forth.asm):00519                 rts
                      (        forth.asm):00520                 ENDC
                      (        forth.asm):00521         
E240 BDEA27           (        forth.asm):00522         FORTHIN RFXT    jsr,NCLR+7      XT for NCLR. Set up the normal stack
E243 BDEA33           (        forth.asm):00523                 RFXT    jsr,RCLR+7      XT for RCLR. Set up the return stack
                      (        forth.asm):00524                 IFNE    DEBUG
                      (        forth.asm):00525                 bsr     PAGE0IN
                      (        forth.asm):00526                 ENDC
                      (        forth.asm):00527         * Relocate '@' code to RAM and set it up as the last dictionary entry (RO).
E246 8EFDB8           (        forth.asm):00528 (3)             ldx     #THEEND         Source address for tfm
E249 1086000D         (        forth.asm):00529 (4)             ldw     #(REALEND-THEEND) Byte count for tfm
E24D 108E0C10         (        forth.asm):00530 (4)             ldy     #WDICSPC        Destination address for tfm
E251 109F06           (        forth.asm):00531 (5)             sty     LSTWAD
E254 113812           (        forth.asm):00532 (6+?)           tfm     x+,y+
E257 109F08           (        forth.asm):00533 (5)             sty     DICEND
                      (        forth.asm):00534                 IFNE    RELFEAT
E25A BDEB47           (        forth.asm):00535                 RFXT    jsr,MONITOR+10  XT for MONITOR (monitor @ in RAM)
                      (        forth.asm):00536                 ENDC
E25D 8D0D             (        forth.asm):00537 (6)             bsr     EMPTYB          Buffer related initializations.
E25F 104F             (        forth.asm):00538 (2)             clrd
E261 DD20             (        forth.asm):00539 (4)             std     USTATE          Initial mode is interpretation
E263 DD26             (        forth.asm):00540 (4)             std     USCR            Clear SCR
E265 DD24             (        forth.asm):00541 (4)             std     UBLK            Clear BLK
E267 DD22             (        forth.asm):00542 (4)             std     UTOIN           Clear >IN
E269 7EFA23           (        forth.asm):00543                 RFXT    jmp,DECIMAL+10  XT for DECIMAL. Default base is decimal
                      (        forth.asm):00544         
E26C 8E03F0           (        forth.asm):00545 (3)     EMPTYB  ldx     #BUF0
E26F 8D03             (        forth.asm):00546 (6)             bsr     EMPT1B
E271 8E0800           (        forth.asm):00547 (3)             ldx     #BUF1
                      (        forth.asm):00548         * Empty the buffer pointed to by X.
E274 9F1A             (        forth.asm):00549 (4)     EMPT1B  stx     MRUBUFA         Update most recently used buffer address
E276 30890400         (        forth.asm):00550 (4+3)           leax    BOTERM,x        Buffer offset to the terminator field
E27A 104F             (        forth.asm):00551 (2)             clrd
E27C ED84             (        forth.asm):00552 (5+0)           std     ,x              Clear terminator and flags fields
                      (        forth.asm):00553                 IFNE    DEBUG
                      (        forth.asm):00554                 ldd     #$C7C7
                      (        forth.asm):00555                 std     2,x             Dummy block number
                      (        forth.asm):00556                 ENDC
E27E 39               (        forth.asm):00557 (4)             rts
                      (        forth.asm):00558         
                      (        forth.asm):00559         * Scan for the next non-space character pointed to by X.
                      (        forth.asm):00560         * That character is returned through A. Flags are set accordingly.
E27F A680             (        forth.asm):00561 (4+1)   SCNSTOK lda     ,x+
E281 2704             (        forth.asm):00562 (3)             beq     @scstk1
E283 8120             (        forth.asm):00563 (2)             cmpa    #SP
E285 27F8             (        forth.asm):00564 (3)             beq     SCNSTOK
E287 301F             (        forth.asm):00565 (4+1)   @scstk1 leax    -1,x            Keep X pointing at the beginning of the token
E289 9F02             (        forth.asm):00566 (4)             stx     TOKENSP
E28B 4D               (        forth.asm):00567 (1)             tsta                    Have to test again because LEA affects Z
E28C 39               (        forth.asm):00568 (4)             rts
                      (        forth.asm):00569         
                      (        forth.asm):00570         * Scan for the next white space character (or NUL) as an end of token marker.
                      (        forth.asm):00571         * Upon entry:
                      (        forth.asm):00572         * - X points to the input stream.
                      (        forth.asm):00573         * Upon return:
                      (        forth.asm):00574         * - X will point to the next space character or NUL.
                      (        forth.asm):00575         * - CURTOKL will hold the current token length (returned in B).
                      (        forth.asm):00576         * - TOKENEP will point to the end of the current token.
E28D 5F               (        forth.asm):00577 (1)     SCNETOK clrb
E28E 5C               (        forth.asm):00578 (1)     @scetok incb
E28F A680             (        forth.asm):00579 (4+1)           lda     ,x+
E291 2704             (        forth.asm):00580 (3)             beq     @scetk1
E293 8120             (        forth.asm):00581 (2)             cmpa    #SP
E295 26F7             (        forth.asm):00582 (3)             bne     @scetok
E297 301F             (        forth.asm):00583 (4+1)   @scetk1 leax    -1,x            Keep X pointing at the end of the token
E299 9F04             (        forth.asm):00584 (4)             stx     TOKENEP
E29B 5A               (        forth.asm):00585 (1)             decb
E29C D733             (        forth.asm):00586 (3)             stb     CURTOKL
E29E 39               (        forth.asm):00587 (4)             rts
                      (        forth.asm):00588         
                      (        forth.asm):00589         * Check for numeric literal BASE prefix. On entry X has the input stream
                      (        forth.asm):00590         * pointer. On exit, BASE is altered if needed and the original BASE saved
                      (        forth.asm):00591         * to BASBKUP. If BASE was not changed, BASBKUP will be zero.
                      (        forth.asm):00592         * D is altered, X is updated if a BASE prefix is detected, other registers
                      (        forth.asm):00593         * are untouched.
E29F E684             (        forth.asm):00594 (4+0)   CKNBPFX ldb     ,x              B has a potential base prefix character
E2A1 3410             (        forth.asm):00595 (4+2)           pshs    x
E2A3 8EFF91           (        forth.asm):00596 (3)             ldx     #BASALST        A associative list (A-list) of BASE prefixes
E2A6 A681             (        forth.asm):00597 (4+2)   @pflkup lda     ,x++            Potential BASE prefix character to A
E2A8 2707             (        forth.asm):00598 (3)             beq     @nopfix         Reached the end of the A-list. No prefix found
E2AA 103798           (        forth.asm):00599 (4)             cmpr    b,a             Prefix match?
E2AD 2707             (        forth.asm):00600 (3)             beq     @pfxfnd         Yes
E2AF 20F5             (        forth.asm):00601 (3)             bra     @pflkup
E2B1 0F28             (        forth.asm):00602 (5)     @nopfix clr     BASBKUP         Nothing to be restored to BASE
E2B3 3510             (        forth.asm):00603 (4+2)           puls    x
E2B5 39               (        forth.asm):00604 (4)             rts
E2B6 961F             (        forth.asm):00605 (3)     @pfxfnd lda     UBASE+1
E2B8 9728             (        forth.asm):00606 (3)             sta     BASBKUP         Back up the current BASE value
E2BA A61F             (        forth.asm):00607 (4+1)           lda     -1,x            The BASE specified by the prefix
E2BC 971F             (        forth.asm):00608 (3)             sta     UBASE+1         Update BASE
E2BE 3510             (        forth.asm):00609 (4+2)           puls    x
E2C0 3001             (        forth.asm):00610 (4+1)           leax    1,x             Skip the prefix from the input stream
                      (        forth.asm):00611         * The following is not especially pretty since we are altering system
                      (        forth.asm):00612         * stack contents owned by the caller. Yet it remains conducive to more
                      (        forth.asm):00613         * compact code. With only a few bytes of EEPROM left, I think this is legit.
E2C2 6A62             (        forth.asm):00614 (6+1)           dec     2,s             Decrement the stacked up flavour of CURTOKL
E2C4 39               (        forth.asm):00615 (4)             rts
                      (        forth.asm):00616         
                      (        forth.asm):00617         * Restore BASE if a numeric literal BASE prefix was detected.
                      (        forth.asm):00618         * X is to be preserved at all cost!
E2C5 9628             (        forth.asm):00619 (3)     RSBSPFX lda     BASBKUP
E2C7 2702             (        forth.asm):00620 (3)             beq     @theend
E2C9 971F             (        forth.asm):00621 (3)             sta     UBASE+1
E2CB 39               (        forth.asm):00622 (4)     @theend rts
                      (        forth.asm):00623         
                      (        forth.asm):00624         * Check whether BASE is in the supported range ([2..36]).
E2CC 961F             (        forth.asm):00625 (3)     CKBASE  lda     UBASE+1         BASE
E2CE 8102             (        forth.asm):00626 (2)             cmpa    #2
E2D0 2505             (        forth.asm):00627 (3)             blo     @ckbser         Must be >= 2
E2D2 8124             (        forth.asm):00628 (2)             cmpa    #36
E2D4 2201             (        forth.asm):00629 (3)             bhi     @ckbser         And <= 36 (the ANSI maximum)
E2D6 39               (        forth.asm):00630 (4)             rts
E2D7 C60F             (        forth.asm):00631 (2)     @ckbser ldb     #15             Invalid BASE
E2D9 BDE650           (        forth.asm):00632 (7)             jsr     ERRHDLR         No return
     E2DC             (        forth.asm):00633         CKBASRA equ     *
                      (        forth.asm):00634         
                      (        forth.asm):00635         * NUMCVT performs a signed string to number conversion. The input string is
                      (        forth.asm):00636         * acquired from the input stream. Note that this routine always is called
                      (        forth.asm):00637         * after a dictionary lookup (SWDIC), so TOKENSP and CURTOKL are guaranteed
                      (        forth.asm):00638         * to have been set previously. There are two ways out this routine:
                      (        forth.asm):00639         * - redirection to the error handler (Undefined word), or
                      (        forth.asm):00640         * - a converted cell returned through X.
                      (        forth.asm):00641         * This a re-implementation based on CONVERT but unlike CONVERT, which produces
                      (        forth.asm):00642         * an unsigned double as its output, this produces a signed single cell.
E2DC 8DEE             (        forth.asm):00643 (6)     NUMCVT  bsr     CKBASE          No return if BASE isn't in the [2..36] range
E2DE 9633             (        forth.asm):00644 (3)             lda     CURTOKL         Character count to go through
E2E0 3402             (        forth.asm):00645 (4+1)           pshs    a
E2E2 0F31             (        forth.asm):00646 (5)             clr     ISNEGF          Assume the result is positive
E2E4 9E02             (        forth.asm):00647 (4)             ldx     TOKENSP
E2E6 8DB7             (        forth.asm):00648 (6)             bsr     CKNBPFX         Check for numeric literal BASE prefix
                      (        forth.asm):00649         * Check for optional minus sign.
E2E8 A684             (        forth.asm):00650 (4+0)           lda     ,x
E2EA 812D             (        forth.asm):00651 (2)             cmpa    #'-
E2EC 2606             (        forth.asm):00652 (3)             bne     @ncini
E2EE 0C31             (        forth.asm):00653 (5)             inc     ISNEGF          Remember to negate the result before returning
E2F0 3001             (        forth.asm):00654 (4+1)           leax    1,x             Skip the negativity!
E2F2 6AE4             (        forth.asm):00655 (6+0)           dec     ,s              Decrement token length
E2F4 104F             (        forth.asm):00656 (2)     @ncini  clrd                    Initialize the result
E2F6 119F1E           (        forth.asm):00657 (29)    @ncnxt  muld    UBASE           D multipled by BASE to Q (D:W)
E2F9 E680             (        forth.asm):00658 (4+1)           ldb     ,x+             Acquire next input char (ignore the product MSC)
E2FB C030             (        forth.asm):00659 (2)             subb    #'0
E2FD 252D             (        forth.asm):00660 (3)             blo     @ncoor          Digit out of range
E2FF C10A             (        forth.asm):00661 (2)             cmpb    #10
E301 2510             (        forth.asm):00662 (3)             blo     @ncnolt         No letter in potential BASE
                      (        forth.asm):00663                 IFEQ    CSSNTVE
E303 C111             (        forth.asm):00664 (2)             cmpb    #'A-'0
E305 2525             (        forth.asm):00665 (3)             blo     @ncoor          Greater than 9 but lower than A
E307 C131             (        forth.asm):00666 (2)             cmpb    #'a-'0
E309 2506             (        forth.asm):00667 (3)             blo     @ncisuc         Upper case already
E30B C14A             (        forth.asm):00668 (2)             cmpb    #'z-'0
E30D 221D             (        forth.asm):00669 (3)             bhi     @ncoor          Definitely out of range
E30F C020             (        forth.asm):00670 (2)             subb    #'a-'A          To upper case
                      (        forth.asm):00671                 ENDC
E311 C007             (        forth.asm):00672 (2)     @ncisuc subb    #'A-':          A-Z to number
E313 D11F             (        forth.asm):00673 (3)     @ncnolt cmpb    UBASE+1         B has a digit. Make sure it's less than BASE
E315 2415             (        forth.asm):00674 (3)             bhs     @ncoor
                      (        forth.asm):00675         * Digit in B has been validated wrt. BASE.
E317 4F               (        forth.asm):00676 (1)             clra
E318 103060           (        forth.asm):00677 (4)             addr    w,d
E31B 6AE4             (        forth.asm):00678 (6+0)           dec     ,s              Are we done yet?
E31D 26D7             (        forth.asm):00679 (3)             bne     @ncnxt          No. Iterate over to the next digit
E31F 0D31             (        forth.asm):00680 (4)             tst     ISNEGF          Are we dealing with a negative number?
E321 2702             (        forth.asm):00681 (3)             beq     @ncdone         No
E323 1040             (        forth.asm):00682 (2)             negd                    Acknowledge the negativity
E325 3261             (        forth.asm):00683 (4+1)   @ncdone leas    1,s             Drop token length from the system stack
E327 1F01             (        forth.asm):00684 (4)             tfr     d,x             Return the result in X
E329 8D9A             (        forth.asm):00685 (6)             bsr     RSBSPFX         Restore BASE if needed
E32B 39               (        forth.asm):00686 (4)             rts
E32C 3261             (        forth.asm):00687 (4+1)   @ncoor  leas    1,s             Drop token length from the system stack
E32E 9E02             (        forth.asm):00688 (4)             ldx     TOKENSP         Current digit is out of range
E330 C602             (        forth.asm):00689 (2)             ldb     #2              Undefined (X points to the offending word)
E332 BDE650           (        forth.asm):00690 (7)             jsr     ERRHDLR         No return
     E335             (        forth.asm):00691         NUMCVRA equ     *               For symbolic stack dump purposes
E335 12               (        forth.asm):00692 (1)             nop
                      (        forth.asm):00693         
                      (        forth.asm):00694         * Convert number stored in X to a string (depending on BASE value).
                      (        forth.asm):00695         * Output is stored in the global TBUFF buffer. X is preserved.
E336 8D94             (        forth.asm):00696 (6)     CVNSTR  bsr     CKBASE
E338 0F31             (        forth.asm):00697 (5)             clr     ISNEGF
E33A 1F10             (        forth.asm):00698 (4)             tfr     x,d
E33C 0D32             (        forth.asm):00699 (4)             tst     CVISSGN         Are we to perform a signed conversion?
E33E 2708             (        forth.asm):00700 (3)             beq     @cvnst1
E340 104D             (        forth.asm):00701 (2)             tstd
E342 2A04             (        forth.asm):00702 (3)             bpl     @cvnst1
E344 0C31             (        forth.asm):00703 (5)             inc     ISNEGF          Number being converted is negative
E346 1040             (        forth.asm):00704 (2)             negd
E348 1F06             (        forth.asm):00705 (4)     @cvnst1 tfr     d,w
E34A 104F             (        forth.asm):00706 (2)             clrd
E34C 108E03B3         (        forth.asm):00707 (4)             ldy     #TBUFF+19       Sign + 16 digits + terminator + 1
E350 6FA2             (        forth.asm):00708 (6+1)           clr     ,-y             End of string marker
E352 119E1E           (        forth.asm):00709 (35)    @cvnst2 divq    UBASE           D returns the modulo and W the quotient
E355 8630             (        forth.asm):00710 (2)             lda     #'0
E357 C10A             (        forth.asm):00711 (2)             cmpb    #10
E359 2502             (        forth.asm):00712 (3)             bcs     @cvnst3
                      (        forth.asm):00713         * BASE has letters among its valid numbers.
E35B 8637             (        forth.asm):00714 (2)             lda     #'A-10
E35D 103089           (        forth.asm):00715 (4)     @cvnst3 addr    a,b
E360 E7A2             (        forth.asm):00716 (4+1)           stb     ,-y
E362 104F             (        forth.asm):00717 (2)             clrd
E364 105D             (        forth.asm):00718 (2)             tstw
E366 26EA             (        forth.asm):00719 (3)             bne     @cvnst2
E368 C620             (        forth.asm):00720 (2)             ldb     #SP
E36A 0D31             (        forth.asm):00721 (4)             tst     ISNEGF
E36C 2702             (        forth.asm):00722 (3)             beq     @cvnst4
E36E C62D             (        forth.asm):00723 (2)             ldb     #'-
E370 E7A2             (        forth.asm):00724 (4+1)   @cvnst4 stb     ,-y
                      (        forth.asm):00725         * We need to insert leading spaces up to the beginning of the output buffer.
E372 C620             (        forth.asm):00726 (2)             ldb     #SP
E374 108C03A0         (        forth.asm):00727 (4)     @cvnst5 cmpy    #TBUFF
E378 2601             (        forth.asm):00728 (3)             bne     @cvnst6
E37A 39               (        forth.asm):00729 (4)             rts
E37B E7A2             (        forth.asm):00730 (4+1)   @cvnst6 stb     ,-y
E37D 20F5             (        forth.asm):00731 (3)             bra     @cvnst5
                      (        forth.asm):00732         
                      (        forth.asm):00733         * Check for minimal data stack depth. On input D has the lowest possible stack
                      (        forth.asm):00734         * address that satisfies the needs of the caller. This routine is meant
                      (        forth.asm):00735         * to support "transactional" behaviour, which is intended to improve
                      (        forth.asm):00736         * debugging support.
E37F 103703           (        forth.asm):00737 (4)     CHKNDPT cmpr    d,u
E382 2201             (        forth.asm):00738 (3)             bhi     @stkudf
E384 39               (        forth.asm):00739 (4)             rts
E385 C601             (        forth.asm):00740 (2)     @stkudf ldb     #1              Data stack underflow
E387 BDE650           (        forth.asm):00741 (7)             jsr     ERRHDLR         No return
     E38A             (        forth.asm):00742         CKDPTRA equ     *
                      (        forth.asm):00743         
                      (        forth.asm):00744         * Paramater stack's depth checking primitves (transactional behavior support).
E38A CC024A20F0       (        forth.asm):00745         MIN1PST MINDREQ 1
                      (        forth.asm):00746         
E38F CC024820EB       (        forth.asm):00747         MIN2PST MINDREQ 2
                      (        forth.asm):00748         
E394 CC024620E6       (        forth.asm):00749         MIN3PST MINDREQ 3
                      (        forth.asm):00750         
E399 CC024420E1       (        forth.asm):00751         MIN4PST MINDREQ 4
                      (        forth.asm):00752         
                      (        forth.asm):00753         * Search word beginning at address TOKENSP in the dictionary.
                      (        forth.asm):00754         * Upon return Z will be set if the word was not found.
                      (        forth.asm):00755         * Otherwise, Y will point to the code section of the word.
                      (        forth.asm):00756         * CSSNTVE (defined in constants.asm) defines whether the
                      (        forth.asm):00757         * dictionary match is case sensitive or not.
                      (        forth.asm):00758         * Important note: if the word is found TOKENEP will be copied to TOKENSP.
E39E 9E02             (        forth.asm):00759 (4)     SWDIC   ldx     TOKENSP
E3A0 BDE28D           (        forth.asm):00760 (7)             jsr     SCNETOK         B has CURTOKL
E3A3 9E08             (        forth.asm):00761 (4)             ldx     DICEND
E3A5 9F16             (        forth.asm):00762 (4)             stx     VLPRVEP         Last dictionary entry code address + 1
E3A7 9E02             (        forth.asm):00763 (4)             ldx     TOKENSP
E3A9 109E06           (        forth.asm):00764 (5)             ldy     LSTWAD          Latest word header address to Y
E3AC 2606             (        forth.asm):00765 (3)     @swrdc0 bne     @swrdc1
E3AE 1FC2             (        forth.asm):00766 (4)             tfr     0,y             Word not found. Z is set
E3B0 109F0E           (        forth.asm):00767 (5)             sty     PLOAD
E3B3 39               (        forth.asm):00768 (4)             rts
E3B4 A6A4             (        forth.asm):00769 (4+0)   @swrdc1 lda     ,y              Word attribute to A
E3B6 841F             (        forth.asm):00770 (2)             anda    #WRLNMSK        Extract word length
E3B8 3420             (        forth.asm):00771 (4+2)           pshs    y
E3BA 103798           (        forth.asm):00772 (4)             cmpr    b,a             Word length match?
E3BD 2638             (        forth.asm):00773 (3)             bne     @swrdc3         No, point to next dictionary entry
E3BF 3121             (        forth.asm):00774 (4+1)           leay    1,y
E3C1 A6A0             (        forth.asm):00775 (4+1)   @swrdc2 lda     ,y+
                      (        forth.asm):00776                 IFNE    CSSNTVE
                      (        forth.asm):00777                 cmpa    ,x+             Case sensitive dictionary
                      (        forth.asm):00778                 ELSE
E3C3 1F9E             (        forth.asm):00779 (4)             tfr     b,e             Case insensitive search (preferred)
E3C5 E680             (        forth.asm):00780 (4+1)           ldb     ,x+
E3C7 C161             (        forth.asm):00781 (2)             cmpb    #'a
E3C9 2506             (        forth.asm):00782 (3)             bcs     @nochg
E3CB C17B             (        forth.asm):00783 (2)             cmpb    #'z+1
E3CD 2402             (        forth.asm):00784 (3)             bcc     @nochg
E3CF C020             (        forth.asm):00785 (2)             subb    #'a-'A
E3D1 103798           (        forth.asm):00786 (4)     @nochg  cmpr    b,a
E3D4 1FE9             (        forth.asm):00787 (4)             tfr     e,b
                      (        forth.asm):00788                 ENDC
E3D6 261F             (        forth.asm):00789 (3)             bne     @swrdc3
E3D8 5A               (        forth.asm):00790 (1)             decb
E3D9 26E6             (        forth.asm):00791 (3)             bne     @swrdc2
                      (        forth.asm):00792         * Word match!
E3DB 3510             (        forth.asm):00793 (4+2)           puls    x
E3DD E684             (        forth.asm):00794 (4+0)           ldb     ,x              Word attribute byte to B
E3DF 4F               (        forth.asm):00795 (1)             clra
E3E0 58               (        forth.asm):00796 (1)             lslb                    Bit 7 to CFLAG
E3E1 49               (        forth.asm):00797 (1)             rola                    CFLAG to A
E3E2 9734             (        forth.asm):00798 (3)             sta     IMDFLG          Set IMMEDIATE flag
E3E4 4F               (        forth.asm):00799 (1)             clra
E3E5 58               (        forth.asm):00800 (1)             lslb                    Bit 6 to CFLAG
E3E6 49               (        forth.asm):00801 (1)             rola                    CFLAG to A
E3E7 9735             (        forth.asm):00802 (3)             sta     DEFFLG          Set DEFINE flag
E3E9 9E04             (        forth.asm):00803 (4)             ldx     TOKENEP
E3EB 9F02             (        forth.asm):00804 (4)             stx     TOKENSP
                      (        forth.asm):00805                 IFNE    RELFEAT
E3ED 3123             (        forth.asm):00806 (4+1)           leay    3,y             Skip back pointer and checksum. Return XT
                      (        forth.asm):00807                 ELSE
                      (        forth.asm):00808                 leay    2,y             Skip back pointer. Return XT
                      (        forth.asm):00809                 ENDC
E3EF DC16             (        forth.asm):00810 (4)             ldd     VLPRVEP
E3F1 103220           (        forth.asm):00811 (4)             subr    y,d
E3F4 DD0E             (        forth.asm):00812 (4)             std     PLOAD
E3F6 39               (        forth.asm):00813 (4)             rts                     NZ since there is no zero payload word
E3F7 3520             (        forth.asm):00814 (4+2)   @swrdc3 puls    y               Point to previous word header
E3F9 109F16           (        forth.asm):00815 (5)             sty     VLPRVEP
E3FC 4F               (        forth.asm):00816 (1)             clra
E3FD E6A0             (        forth.asm):00817 (4+1)           ldb     ,y+
E3FF C41F             (        forth.asm):00818 (2)             andb    #WRLNMSK
E401 31AB             (        forth.asm):00819 (4+2)           leay    d,y
E403 9E02             (        forth.asm):00820 (4)             ldx     TOKENSP
E405 D633             (        forth.asm):00821 (3)             ldb     CURTOKL
E407 10AEA4           (        forth.asm):00822 (6+0)           ldy     ,y
E40A 20A0             (        forth.asm):00823 (3)             bra     @swrdc0
                      (        forth.asm):00824         
                      (        forth.asm):00825         * Create new dictionary entry. The word name being created is acquired from
                      (        forth.asm):00826         * the input stream. Warning, this requires a writable dictionary!
                      (        forth.asm):00827         * The new end of the dictionary is returned in Y. W is preserved.
E40C 1038             (        forth.asm):00828 (6)     LOCWRT  pshsw
E40E 9E08             (        forth.asm):00829 (4)             ldx     DICEND
                      (        forth.asm):00830                 IFNE    DEBUG
                      (        forth.asm):00831                 cmpx    #ROMSTRT
                      (        forth.asm):00832                 bcs     @locwr0
                      (        forth.asm):00833                 ldb     #10             Assertion failure (trying to write to ROM!)
                      (        forth.asm):00834                 jsr     ERRHDLR         No return
E410                  (        forth.asm):00835         LWAFRA  equ     *
                      (        forth.asm):00836                 ENDC
E410 9F0C             (        forth.asm):00837 (4)     @locwr0 stx     BDICEND         Back pointer up
E412 9E06             (        forth.asm):00838 (4)             ldx     LSTWAD
E414 9F0A             (        forth.asm):00839 (4)             stx     BLSTWAD         Back pointer up
E416 BDE71E           (        forth.asm):00840 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
E419 6D84             (        forth.asm):00841 (5+0)           tst     ,x
E41B 2605             (        forth.asm):00842 (3)             bne     @locwr2
E41D C605             (        forth.asm):00843 (2)     @locwr1 ldb     #5              Missing word name
E41F BDE650           (        forth.asm):00844 (7)             jsr     ERRHDLR         No return
     E422             (        forth.asm):00845         LWMNRA  equ     *               LOCWRT missing word name return address
E422 BDE27F           (        forth.asm):00846 (7)     @locwr2 jsr     SCNSTOK
E425 27F6             (        forth.asm):00847 (3)             beq     @locwr1         End of line reached
E427 BDE28D           (        forth.asm):00848 (7)             jsr     SCNETOK         X has TOKENEP, B has CURTOKL
E42A 109E02           (        forth.asm):00849 (5)             ldy     TOKENSP
E42D 103221           (        forth.asm):00850 (4)             subr    y,x
E430 3410             (        forth.asm):00851 (4+2)           pshs    x               Word length to the system stack
E432 9E08             (        forth.asm):00852 (4)             ldx     DICEND
E434 A661             (        forth.asm):00853 (4+1)           lda     1,s             Word length LSB in the system stack
E436 8120             (        forth.asm):00854 (2)             cmpa    #1+WRLNMSK      Max word length is 31, 79-STANDARD compliant
E438 2505             (        forth.asm):00855 (3)             blo     @lcwr21
E43A C610             (        forth.asm):00856 (2)             ldb     #16             Word name is too long
E43C BDE650           (        forth.asm):00857 (7)             jsr     ERRHDLR
     E43F             (        forth.asm):00858         WTOOLNG equ     *
E43F A780             (        forth.asm):00859 (4+1)   @lcwr21 sta     ,x+             Word length to dictionary
E441 10A6E1           (        forth.asm):00860 (6+2)           ldw     ,s++            16-bit word length to W
E444 1E12             (        forth.asm):00861 (5)             exg     x,y             Y points to the dictionary, X has TOKENSP
                      (        forth.asm):00862                 IFNE    CSSNTVE
                      (        forth.asm):00863                 tfm     x+,y+           Word name to dictionary, as is
                      (        forth.asm):00864                 ELSE
E446 1FF9             (        forth.asm):00865 (4)             tfr     f,b             Force dictionary entry to upper case
E448 A680             (        forth.asm):00866 (4+1)   @locwr3 lda     ,x+
E44A 8161             (        forth.asm):00867 (2)             cmpa    #'a
E44C 2506             (        forth.asm):00868 (3)             bcs     @locwr4
E44E 817B             (        forth.asm):00869 (2)             cmpa    #'z+1
E450 2402             (        forth.asm):00870 (3)             bcc     @locwr4
E452 8020             (        forth.asm):00871 (2)             suba    #'a-'A          To upper case
E454 A7A0             (        forth.asm):00872 (4+1)   @locwr4 sta     ,y+
E456 5A               (        forth.asm):00873 (1)             decb
E457 26EF             (        forth.asm):00874 (3)             bne     @locwr3
                      (        forth.asm):00875                 ENDC
E459 1F10             (        forth.asm):00876 (4)             tfr     x,d
E45B 931C             (        forth.asm):00877 (4)             subd    BSBFADR
E45D DD22             (        forth.asm):00878 (4)             std     UTOIN           Skip word name in the input stream
E45F 9E06             (        forth.asm):00879 (4)             ldx     LSTWAD
E461 AFA1             (        forth.asm):00880 (5+2)           stx     ,y++            Back pointer to dictionary
                      (        forth.asm):00881                 IFNE    RELFEAT
E463 6FA0             (        forth.asm):00882 (6+1)           clr     ,y+             Initialize the checksum header field
                      (        forth.asm):00883                 ENDC
E465 109F08           (        forth.asm):00884 (5)             sty     DICEND
E468 109F12           (        forth.asm):00885 (5)             sty     RECADDR         Should we resort to recursion later on
E46B 1039             (        forth.asm):00886 (6)             pulsw
E46D 39               (        forth.asm):00887 (4)             rts
                      (        forth.asm):00888         
                      (        forth.asm):00889         * Compile 'ldx  #X; jsr NPUSH'.
                      (        forth.asm):00890         * DICEND is updated and returned in Y.
E46E 109E08           (        forth.asm):00891 (5)     LITER   ldy     DICEND
E471 868E             (        forth.asm):00892 (2)             lda     #LDXOPC         LDX immediate
E473 8D10             (        forth.asm):00893 (6)             bsr     VARCON2
E475 86BD             (        forth.asm):00894 (2)             lda     #JSROPC         JSR extended
E477 BDE139           (        forth.asm):00895 (7)             jsr     CHKRTS          Check if the final RTS can be omitted
E47A 8D06             (        forth.asm):00896 (6)             bsr     VARCON1
E47C 109F08           (        forth.asm):00897 (5)             sty     DICEND
E47F 39               (        forth.asm):00898 (4)             rts
                      (        forth.asm):00899         
                      (        forth.asm):00900         * Compile 'jmp  NPUSH'.
                      (        forth.asm):00901         * Y points to the end of the dictionary on entry and on exit.
E480 867E             (        forth.asm):00902 (2)     VARCON  lda     #JMPOPC         JMP extended
E482 8EE6CA           (        forth.asm):00903 (3)     VARCON1 ldx     #NPUSH
E485 A7A0             (        forth.asm):00904 (4+1)   VARCON2 sta     ,y+
E487 AFA1             (        forth.asm):00905 (5+2)           stx     ,y++
E489 39               (        forth.asm):00906 (4)             rts
                      (        forth.asm):00907         
                      (        forth.asm):00908         * Used by U<, U>, <, >.
E48A BDE38F           (        forth.asm):00909 (7)     CMP2    jsr     MIN2PST         At least 2 cells must be stacked up
E48D 10AEC4           (        forth.asm):00910 (6+0)   CMP2RA  ldy     ,u
E490 AE42             (        forth.asm):00911 (5+1)           ldx     2,u
E492 103721           (        forth.asm):00912 (4)             cmpr    y,x
E495 1FA9             (        forth.asm):00913 (4)             tfr     cc,b
                      (        forth.asm):00914                 IFNE    DEBUG
                      (        forth.asm):00915                 clra
                      (        forth.asm):00916                 std     CCREG
                      (        forth.asm):00917                 ENDC
E497 1FC1             (        forth.asm):00918 (4)             tfr     0,x
E499 3344             (        forth.asm):00919 (4+1)           leau    4,u
E49B 1F9A             (        forth.asm):00920 (4)             tfr     b,cc
E49D 39               (        forth.asm):00921 (4)             rts
                      (        forth.asm):00922         
                      (        forth.asm):00923         * Used by CMOVE, CMOVE>, MOVE.
E49E BDE394           (        forth.asm):00924 (7)     ACQMOVP jsr     MIN3PST         At least 3 cells must be stacked up
E4A1 10A6C4           (        forth.asm):00925 (6+0)   ACQVMRA ldw     ,u              Byte count
E4A4 10AE42           (        forth.asm):00926 (6+1)           ldy     2,u             Destination address
E4A7 AE44             (        forth.asm):00927 (5+1)           ldx     4,u             Source address
E4A9 3346             (        forth.asm):00928 (4+1)           leau    6,u             Drop 3 cells from the user stack
E4AB 39               (        forth.asm):00929 (4)             rts
                      (        forth.asm):00930         
                      (        forth.asm):00931         * FDCTSYM enveadours to match the address stored in Y to a dictionary entry.
                      (        forth.asm):00932         * Upon a successful flexible match, it will output a string in the form of
                      (        forth.asm):00933         * <wordname>+<offset> to the string pointed to by X. <wordname> refers to the
                      (        forth.asm):00934         * code entry point of the matched word. <offset> will be expressed in hex.
                      (        forth.asm):00935         * If a match is found, Z will be clear, otherwise it will be set.
                      (        forth.asm):00936         * A candidate for a word code address must meet the following criteria:
                      (        forth.asm):00937         * ((Y U>= #EBUFS) AND (Y U< #THEEND)) OR ((Y U>= #WDICSPC) AND (Y U< DICEND)).
                      (        forth.asm):00938         * Upon return:
                      (        forth.asm):00939         * - the string pointed to by X will updated with its symbolic match
                      (        forth.asm):00940         *   (NUL terminated), if there is one. X itself might have been altered.
                      (        forth.asm):00941         * - Y should be preserved.
                      (        forth.asm):00942         * EBUFS (EMPTY-BUFFERS) header address is the last word in the dictionary.
                      (        forth.asm):00943                 IFNE    SSDFEAT
E4AC 3430             (        forth.asm):00944 (4+4)   FDCTSYM pshs    y,x     
E4AE 1F21             (        forth.asm):00945 (4)             tfr     y,x             Potential execution token to X
E4B0 8CE859           (        forth.asm):00946 (3)             cmpx    #EBUFS
E4B3 2505             (        forth.asm):00947 (3)             blo     @fdstr2 
E4B5 8CFDB8           (        forth.asm):00948 (3)             cmpx    #THEEND
E4B8 250D             (        forth.asm):00949 (3)             blo     @fdsmtc
E4BA 8C0C10           (        forth.asm):00950 (3)     @fdstr2 cmpx    #WDICSPC        Term 2 of the predicate for a valid word addr
E4BD 2504             (        forth.asm):00951 (3)             blo     @fdsnom
E4BF 9C08             (        forth.asm):00952 (4)             cmpx    DICEND
E4C1 2504             (        forth.asm):00953 (3)             blo     @fdsmtc
E4C3 4F               (        forth.asm):00954 (1)     @fdsnom clra                    No match (Z is set)
E4C4 3530             (        forth.asm):00955 (4+4)           puls    x,y
E4C6 39               (        forth.asm):00956 (4)             rts
E4C7 9E06             (        forth.asm):00957 (4)     @fdsmtc ldx     LSTWAD          Potential match. Scan upward from LAST
                      (        forth.asm):00958         * X points to the latest word header, Y has an execution token.
E4C9 109608           (        forth.asm):00959 (5)             ldw     DICEND          W points to the end of the code section
E4CC 3410             (        forth.asm):00960 (4+2)   @fdslop pshs    x               Pointer to the current word header
E4CE E680             (        forth.asm):00961 (4+1)           ldb     ,x+
E4D0 C41F             (        forth.asm):00962 (2)             andb    #WRLNMSK
E4D2 3A               (        forth.asm):00963 (1)             abx                     Skip word name string
E4D3 EC81             (        forth.asm):00964 (5+2)           ldd     ,x++            Backlink to D
                      (        forth.asm):00965                 IFNE    RELFEAT
E4D5 3001             (        forth.asm):00966 (4+1)           leax    1,x             Skip the checksum
                      (        forth.asm):00967                 ENDC
E4D7 103712           (        forth.asm):00968 (4)             cmpr    x,y
E4DA 2532             (        forth.asm):00969 (3)             blo     @fdsnwd
E4DC 103762           (        forth.asm):00970 (4)             cmpr    w,y
E4DF 222D             (        forth.asm):00971 (3)             bhi     @fdsnwd         An equal address is allowed here, in case
                      (        forth.asm):00972         * jsr ERRHDLR is the last instruction for the word under consideration.
                      (        forth.asm):00973         * This happens to be the case for FORGET and LPAR.
                      (        forth.asm):00974         * Y matches the code range for the current word.
E4E1 3510             (        forth.asm):00975 (4+2)           puls    x
E4E3 E680             (        forth.asm):00976 (4+1)           ldb     ,x+
E4E5 C41F             (        forth.asm):00977 (2)             andb    #WRLNMSK
E4E7 1F9F             (        forth.asm):00978 (4)             tfr     b,f
E4E9 114F             (        forth.asm):00979 (2)             clre                    W has the matched word length
E4EB 10AEE4           (        forth.asm):00980 (6+0)           ldy     ,s              Y points to the target buffer
E4EE 113812           (        forth.asm):00981 (6+?)           tfm     x+,y+
E4F1 6FA4             (        forth.asm):00982 (6+0)           clr     ,y              We need this in case the offset is zero
                      (        forth.asm):00983         * Offset processing.
                      (        forth.asm):00984                 IFNE    RELFEAT
E4F3 3003             (        forth.asm):00985 (4+1)           leax    3,x             Skip backlink and checksum
                      (        forth.asm):00986                 ELSE
                      (        forth.asm):00987                 leax    2,x             Skip backlink
                      (        forth.asm):00988                 ENDC
E4F5 EC62             (        forth.asm):00989 (5+1)           ldd     2,s             Execution token to D
E4F7 103210           (        forth.asm):00990 (4)             subr    x,d             Offset between XT and word entry point to D
E4FA 270D             (        forth.asm):00991 (3)             beq     @skoffs         Skip displaying the offset if it is zero
E4FC 3402             (        forth.asm):00992 (4+1)           pshs    a               Preserve the offset's MSB
E4FE 862B             (        forth.asm):00993 (2)             lda     #'+
E500 A7A0             (        forth.asm):00994 (4+1)           sta     ,y+
E502 3502             (        forth.asm):00995 (4+1)           puls    a               Restore the offset's MSB
E504 1F21             (        forth.asm):00996 (4)             tfr     y,x
E506 BDE174           (        forth.asm):00997 (7)             jsr     HDMP4           Dump hex incarnation of the offset to X
E509 3530             (        forth.asm):00998 (4+4)   @skoffs puls    x,y
E50B 1CFB             (        forth.asm):00999 (2)             andcc   #^ZFLAG         Clear ZFLAG
E50D 39               (        forth.asm):01000 (4)             rts
                      (        forth.asm):01001         * Point to the next word.
E50E 1039             (        forth.asm):01002 (6)     @fdsnwd pulsw                   Retrieve current word header address
E510 104D             (        forth.asm):01003 (2)             tstd
E512 27AF             (        forth.asm):01004 (3)             beq     @fdsnom         Just met the last dictionary entry
E514 1F01             (        forth.asm):01005 (4)             tfr     d,x             Point to previous word header
E516 10810C10         (        forth.asm):01006 (4)             cmpw    #WDICSPC        Are we transitioning from RAM to ROM?
E51A 26B0             (        forth.asm):01007 (3)             bne     @fdslop         No singularity
E51C 1086FDB8         (        forth.asm):01008 (4)             ldw     #THEEND         Won't be able to diagnose the ROM based @...
E520 20AA             (        forth.asm):01009 (3)             bra     @fdslop
                      (        forth.asm):01010         
                      (        forth.asm):01011         * Find the best possible symbolic approximation of Y and store it to the
                      (        forth.asm):01012         * buffer pointed to by X.
                      (        forth.asm):01013         * On entry:
                      (        forth.asm):01014         * - Y has a code address which is to be matched with a symbolic name + offset.
                      (        forth.asm):01015         * - X points to a buffer where the resolution is to be stored.
                      (        forth.asm):01016         * On return:
                      (        forth.asm):01017         * - Y is to be preserved.
                      (        forth.asm):01018         * - the output buffer will be updated with the best symbolic match (NUL term'd).
E522 3430             (        forth.asm):01019 (4+4)   FINDSYM pshs    y,x
E524 8D86             (        forth.asm):01020 (6)             bsr     FDCTSYM         Search the dictionary first (flexible match)
E526 261B             (        forth.asm):01021 (3)             bne     @dctmfn         Dictionary match found
E528 8EE548           (        forth.asm):01022 (3)             ldx     #NDCTWKS        Search kernel symbols for an exact match
E52B EC81             (        forth.asm):01023 (5+2)   @fsmlop ldd     ,x++
E52D 270B             (        forth.asm):01024 (3)             beq     @fsmfnd         End of well known symbols list?
E52F 103720           (        forth.asm):01025 (4)             cmpr    y,d
E532 2706             (        forth.asm):01026 (3)             beq     @fsmfnd
                      (        forth.asm):01027         * No well known symbol match. Skip string.
E534 A680             (        forth.asm):01028 (4+1)   @fsmskp lda     ,x+
E536 26FC             (        forth.asm):01029 (3)             bne     @fsmskp
E538 20F1             (        forth.asm):01030 (3)             bra     @fsmlop
E53A 10AEE4           (        forth.asm):01031 (6+0)   @fsmfnd ldy     ,s
E53D A680             (        forth.asm):01032 (4+1)   @fsmfn2 lda     ,x+
E53F A7A0             (        forth.asm):01033 (4+1)           sta     ,y+
E541 26FA             (        forth.asm):01034 (3)             bne     @fsmfn2
E543 3262             (        forth.asm):01035 (4+1)   @dctmfn leas    2,s             Drop X from the system stack
E545 3520             (        forth.asm):01036 (4+2)           puls    y
E547 39               (        forth.asm):01037 (4)             rts
                      (        forth.asm):01038         
                      (        forth.asm):01039         * Non-dictionary well known symbols.
E548 E000             (        forth.asm):01040         NDCTWKS fdb     IODZHDL         Illegal opcode/Division by zero trap handler
E54A 494F445A48444C00 (        forth.asm):01041                 fcn     'IODZHDL'
E552 E6E6             (        forth.asm):01042                 fdb     DPOPRA          Data stack underflow
E554 44504F50524100   (        forth.asm):01043                 fcn     'DPOPRA'
E55B E6D7             (        forth.asm):01044                 fdb     DPSHRA          Data stack overflow
E55D 44505348524100   (        forth.asm):01045                 fcn     'DPSHRA'
E564 E71E             (        forth.asm):01046                 fdb     RPOPRA          Return stack underflow
E566 52504F50524100   (        forth.asm):01047                 fcn     'RPOPRA'
E56D E704             (        forth.asm):01048                 fdb     RPSHRA          Return stack overflow
E56F 52505348524100   (        forth.asm):01049                 fcn     'RPSHRA'
E576 E650             (        forth.asm):01050                 fdb     ERRHDLR         Error handler
E578 45525248444C5200 (        forth.asm):01051                 fcn     'ERRHDLR'
E580 E2DC             (        forth.asm):01052                 fdb     CKBASRA         Illegal BASE value
E582 434B424153524100 (        forth.asm):01053                 fcn     'CKBASRA'
E58A E38A             (        forth.asm):01054                 fdb     CKDPTRA         Not enough parameters supplied (transac. behav.)
E58C 434B445054524100 (        forth.asm):01055                 fcn     'CKDPTRA'
E594 E37F             (        forth.asm):01056                 fdb     CHKNDPT         Check data stack minimum depth (transac. behav.)
E596 43484B4E44505400 (        forth.asm):01057                 fcn     'CHKNDPT'
E59E E48D             (        forth.asm):01058                 fdb     CMP2RA          Missing operand in any of U<, U>, <, >
E5A0 434D5032524100   (        forth.asm):01059                 fcn     'CMP2RA'
E5A7 E4A1             (        forth.asm):01060                 fdb     ACQVMRA         Three operands missing in any of CMOVE,
                      (        forth.asm):01061         *                               CMOVE>, MOVE
E5A9 414351564D524100 (        forth.asm):01062                 fcn     'ACQVMRA'
E5B1 E0BD             (        forth.asm):01063                 fdb     MINTLRA         Main interpreter loop return address
E5B3 4D494E544C524100 (        forth.asm):01064                 fcn     'MINTLRA'
E5BB E335             (        forth.asm):01065                 fdb     NUMCVRA         ? while converting a string to a number
E5BD 4E554D4356524100 (        forth.asm):01066                 fcn     'NUMCVRA'
E5C5 E0D0             (        forth.asm):01067                 fdb     NMCVIRA         Numeric conversion error while interpreting
E5C7 4E4D435649524100 (        forth.asm):01068                 fcn     'NMCVIRA'
E5CF E134             (        forth.asm):01069                 fdb     NMCVCRA         Numeric conversion error while compiling
E5D1 4E4D435643524100 (        forth.asm):01070                 fcn     'NMCVCRA'
E5D9 E107             (        forth.asm):01071                 fdb     INTRPRA         Interpreter RA (after the execution of a word)
E5DB 494E545250524100 (        forth.asm):01072                 fcn     'INTRPRA'
E5E3 E122             (        forth.asm):01073                 fdb     COMPLRA         Compiler RA (after the execution of an IMD word)
E5E5 434F4D504C524100 (        forth.asm):01074                 fcn     'COMPLRA'
E5ED E422             (        forth.asm):01075                 fdb     LWMNRA          Missing word name in LOCWRT
E5EF 4C574D4E524100   (        forth.asm):01076                 fcn     'LWMNRA'
E5F6 E7F0             (        forth.asm):01077                 fdb     CFR1SRA         CF read one sector failed
E5F8 4346523153524100 (        forth.asm):01078                 fcn     'CFR1SRA'
E600 E6CA             (        forth.asm):01079                 fdb     NPUSH           Not an error RA but useful to have as a symbol
E602 4E5055534800     (        forth.asm):01080                 fcn     'NPUSH'
E608 E6E7             (        forth.asm):01081                 fdb     RPUSH           Not an error RA but useful to have as a symbol
E60A 525055534800     (        forth.asm):01082                 fcn     'RPUSH'
E610 E6D8             (        forth.asm):01083                 fdb     NPOP            Not an error RA but useful to have as a symbol
E612 4E504F5000       (        forth.asm):01084                 fcn     'NPOP'
E617 E705             (        forth.asm):01085                 fdb     RPOP            Not an error RA but useful to have as a symbol
E619 52504F5000       (        forth.asm):01086                 fcn     'RPOP'
E61E E1DA             (        forth.asm):01087                 fdb     PUTS            Not an error RA but useful to have as a symbol
E620 5055545300       (        forth.asm):01088                 fcn     'PUTS'
                      (        forth.asm):01089                 IFNE    DEBUG
                      (        forth.asm):01090                 fdb     LWAFRA          Assertion failure in LOCWRT
                      (        forth.asm):01091                 fcn     'LOCWRTAF'
                      (        forth.asm):01092                 ENDC
E625 0000             (        forth.asm):01093                 fdb     0               End of list
E627 3F3F3F00         (        forth.asm):01094                 fcn     '???'           Admit we have no clue!
                      (        forth.asm):01095                 ENDC                    SSDFEAT
                      (        forth.asm):01096         
                      (        forth.asm):01097         * Print ' (xxxx/yyyy)' where xxxx is the hex representation for BLK @ and
                      (        forth.asm):01098         * yyyy is the hex representation for >IN @.
E62B 8E0350           (        forth.asm):01099 (3)     PRBLKIN ldx     #HEXBUF
E62E 8620             (        forth.asm):01100 (2)             lda     #SP
E630 A780             (        forth.asm):01101 (4+1)           sta     ,x+
E632 8628             (        forth.asm):01102 (2)             lda     #'(
E634 A780             (        forth.asm):01103 (4+1)           sta     ,x+
E636 DC24             (        forth.asm):01104 (4)             ldd     UBLK
E638 BDE174           (        forth.asm):01105 (7)             jsr     HDMP4
E63B 862F             (        forth.asm):01106 (2)             lda     #'/
E63D A780             (        forth.asm):01107 (4+1)           sta     ,x+
E63F DC22             (        forth.asm):01108 (4)             ldd     UTOIN
E641 BDE174           (        forth.asm):01109 (7)             jsr     HDMP4
E644 8629             (        forth.asm):01110 (2)             lda     #')
E646 A780             (        forth.asm):01111 (4+1)           sta     ,x+
E648 6F84             (        forth.asm):01112 (6+0)           clr     ,x
E64A 8E0350           (        forth.asm):01113 (3)             ldx     #HEXBUF
E64D 7EE1DA           (        forth.asm):01114 (3)             jmp     PUTS
                      (        forth.asm):01115         
                      (        forth.asm):01116         * Handle error condition. Error code is in B.
                      (        forth.asm):01117         * If B is 2 (undefined) X points to a string of length CURTOKL that has the
                      (        forth.asm):01118         * offending word.
E650 10AEE4           (        forth.asm):01119 (6+0)   ERRHDLR ldy     ,s              Invoking return address
                      (        forth.asm):01120         * In case of a trap return, we enter here with Y set to #IODZHDL
E653 C102             (        forth.asm):01121 (2)     ERRHD1  cmpb    #2              Undefined symbol?
E655 2618             (        forth.asm):01122 (3)             bne     @perrm          No
E657 8627             (        forth.asm):01123 (2)             lda     #''             Begin quote
E659 BDE1B6           (        forth.asm):01124 (7)             jsr     PUTCH
E65C A680             (        forth.asm):01125 (4+1)   @prtsym lda     ,x+             Display undefined symbol name
E65E BDE1B6           (        forth.asm):01126 (7)             jsr     PUTCH
E661 0A33             (        forth.asm):01127 (5)             dec     CURTOKL
E663 26F7             (        forth.asm):01128 (3)             bne     @prtsym
E665 8627             (        forth.asm):01129 (2)             lda     #''             End quote
E667 BDE1B6           (        forth.asm):01130 (7)             jsr     PUTCH
E66A 8620             (        forth.asm):01131 (2)             lda     #SP             BL EMIT
E66C BDE1B6           (        forth.asm):01132 (7)             jsr     PUTCH
E66F 8EFE78           (        forth.asm):01133 (3)     @perrm  ldx     #ERRMTBL        Regular error handling
E672 5D               (        forth.asm):01134 (1)     @nxterr tstb
E673 2633             (        forth.asm):01135 (3)             bne     @skerrm
E675 BDE1DA           (        forth.asm):01136 (7)             jsr     PUTS            Print error message
E678 8DB1             (        forth.asm):01137 (6)             bsr     PRBLKIN         Print BLK and >IN values (in hex)
E67A BDE1E7           (        forth.asm):01138 (7)             jsr     PUTCR
E67D 1F20             (        forth.asm):01139 (4)     @dmptos tfr     y,d             Dump top of the system stack contents
E67F 8E0350           (        forth.asm):01140 (3)             ldx     #HEXBUF
E682 BDE174           (        forth.asm):01141 (7)             jsr     HDMP4
E685 8620             (        forth.asm):01142 (2)             lda     #SP
E687 A780             (        forth.asm):01143 (4+1)           sta     ,x+
                      (        forth.asm):01144         * Symbolic stack dumps are configurable. In situations where the dictionary is
                      (        forth.asm):01145         * trashed, they may not be considered desirable. See SSDFEAT in constants.asm.
                      (        forth.asm):01146                 IFNE    SSDFEAT
E689 BDE522           (        forth.asm):01147 (7)             jsr     FINDSYM
                      (        forth.asm):01148                 ENDC
E68C 8E0350           (        forth.asm):01149 (3)             ldx     #HEXBUF
E68F BDE1DA           (        forth.asm):01150 (7)             jsr     PUTS
E692 BDE1E7           (        forth.asm):01151 (7)             jsr     PUTCR
E695 108CE000         (        forth.asm):01152 (4)             cmpy    #IODZHDL
E699 2702             (        forth.asm):01153 (3)             beq     @wastrp         We're just back from the trap handler
E69B 3262             (        forth.asm):01154 (4+1)           leas    2,s             Point to the next item on the stack
E69D 118C8000         (        forth.asm):01155 (4)     @wastrp cmps    #RAMSTRT+RAMSIZE
E6A1 240C             (        forth.asm):01156 (3)             bhs     @errdon         We're done here
E6A3 10AEE4           (        forth.asm):01157 (6+0)           ldy     ,s
E6A6 20D5             (        forth.asm):01158 (3)             bra     @dmptos
E6A8 A680             (        forth.asm):01159 (4+1)   @skerrm lda     ,x+             Scan for the next error message
E6AA 26FC             (        forth.asm):01160 (3)             bne     @skerrm
E6AC 5A               (        forth.asm):01161 (1)             decb
E6AD 20C3             (        forth.asm):01162 (3)             bra     @nxterr
E6AF 10CE8000         (        forth.asm):01163 (4)     @errdon lds     #RAMSTRT+RAMSIZE
E6B3 9621             (        forth.asm):01164 (3)             lda     USTATE+1        We do ignore the upper byte
E6B5 270D             (        forth.asm):01165 (3)             beq     @erdon2         No pointers to restore if we were interpreting
                      (        forth.asm):01166         * Compiling: clear STATE, RSP and restore LSTWAD, DICEND.
E6B7 0F21             (        forth.asm):01167 (5)             clr     USTATE+1        Switch back to interpretation mode
E6B9 BDEA33           (        forth.asm):01168                 RFXT    jsr,RCLR+7      XT for RCLR
E6BC 9E0C             (        forth.asm):01169 (4)             ldx     BDICEND         Restore essential pointers from backups
E6BE 9F08             (        forth.asm):01170 (4)             stx     DICEND          Restore HERE
E6C0 9E0A             (        forth.asm):01171 (4)             ldx     BLSTWAD
E6C2 9F06             (        forth.asm):01172 (4)             stx     LSTWAD          Restore LAST
E6C4 BDFA23           (        forth.asm):01173         @erdon2 RFXT    jsr,DECIMAL+10  Back to decimal BASE, for one's sanity's sake!
E6C7 7EE0A7           (        forth.asm):01174 (3)             jmp     INTERP
                      (        forth.asm):01175         
                      (        forth.asm):01176         * Push X to the data stack (boundary is checked).
E6CA 1183018C         (        forth.asm):01177 (4)     NPUSH   cmpu    #NSTTOP
E6CE 2303             (        forth.asm):01178 (3)             bls     @npush1         Anything <= than #NSTTOP indicates overflow
E6D0 3610             (        forth.asm):01179 (4+2)           pshu    x               Aka UCNPUSH
E6D2 39               (        forth.asm):01180 (4)             rts
E6D3 5F               (        forth.asm):01181 (1)     @npush1 clrb                    Data stack overflow
E6D4 BDE650           (        forth.asm):01182 (7)             jsr     ERRHDLR         No return
     E6D7             (        forth.asm):01183         DPSHRA  equ     *
E6D7 12               (        forth.asm):01184 (1)             nop
                      (        forth.asm):01185         
                      (        forth.asm):01186         * Pull X from the data stack (boundary is checked).
                      (        forth.asm):01187         * D, W and Y are preserved.
E6D8 1183024C         (        forth.asm):01188 (4)     NPOP    cmpu    #NSTBOT
E6DC 2403             (        forth.asm):01189 (3)             bhs     @npop1          Anything >= than #NSTBOT indicates underflow
E6DE 3710             (        forth.asm):01190 (4+2)           pulu    x
E6E0 39               (        forth.asm):01191 (4)             rts
E6E1 C601             (        forth.asm):01192 (2)     @npop1  ldb     #1              Data stack underflow
E6E3 BDE650           (        forth.asm):01193 (7)             jsr     ERRHDLR         No return
     E6E6             (        forth.asm):01194         DPOPRA  equ     *
E6E6 12               (        forth.asm):01195 (1)             nop
                      (        forth.asm):01196         
                      (        forth.asm):01197         * Push X to the return stack (boundary is checked).
E6E7 962A             (        forth.asm):01198 (3)     RPUSH   lda     RDEPTH          RDEPTH is expressed in cells
E6E9 8140             (        forth.asm):01199 (2)             cmpa    #RSTKSZ/2       But RSTKZ is expressed in bytes
E6EB 2712             (        forth.asm):01200 (3)             beq     @rpush1
E6ED 4C               (        forth.asm):01201 (1)             inca
E6EE 972A             (        forth.asm):01202 (3)             sta     RDEPTH
E6F0 0F2C             (        forth.asm):01203 (5)             clr     RTSREMV         Do not get rid of the final RTS
E6F2 1F27             (        forth.asm):01204 (4)             tfr     y,v
E6F4 109E00           (        forth.asm):01205 (5)             ldy     RSP
E6F7 AFA3             (        forth.asm):01206 (5+2)           stx     ,--y
E6F9 109F00           (        forth.asm):01207 (5)             sty     RSP
E6FC 1F72             (        forth.asm):01208 (4)             tfr     v,y
E6FE 39               (        forth.asm):01209 (4)             rts
E6FF C607             (        forth.asm):01210 (2)     @rpush1 ldb     #7              Return stack overflow
E701 BDE650           (        forth.asm):01211 (7)             jsr     ERRHDLR         No return
     E704             (        forth.asm):01212         RPSHRA  equ     *
E704 12               (        forth.asm):01213 (1)             nop                     Meant to insulate RPUSH errors from RPOP EP
                      (        forth.asm):01214         
                      (        forth.asm):01215         * Pull X from the return stack (boundary is checked).
E705 962A             (        forth.asm):01216 (3)     RPOP    lda     RDEPTH          RDEPTH is expressed in cells
E707 2710             (        forth.asm):01217 (3)             beq     @rpop1
E709 4A               (        forth.asm):01218 (1)             deca
E70A 972A             (        forth.asm):01219 (3)             sta     RDEPTH
E70C 1F27             (        forth.asm):01220 (4)             tfr     y,v
E70E 109E00           (        forth.asm):01221 (5)             ldy     RSP
E711 AEA1             (        forth.asm):01222 (5+2)           ldx     ,y++
E713 109F00           (        forth.asm):01223 (5)             sty     RSP
E716 1F72             (        forth.asm):01224 (4)             tfr     v,y
E718 39               (        forth.asm):01225 (4)             rts
E719 C608             (        forth.asm):01226 (2)     @rpop1  ldb     #8              Return stack underflow
E71B BDE650           (        forth.asm):01227 (7)             jsr     ERRHDLR         No return
     E71E             (        forth.asm):01228         RPOPRA  equ     *
                      (        forth.asm):01229         
                      (        forth.asm):01230         * Derive the current input stream pointer from BLK and >IN.
                      (        forth.asm):01231         * The resulting address is returned in X. D is altered.
                      (        forth.asm):01232         * Both Y and W are preserved.
E71E 9E24             (        forth.asm):01233 (4)     BKIN2PT ldx     UBLK
E720 2716             (        forth.asm):01234 (3)             beq     @consol         We are switching back to the console
E722 1038             (        forth.asm):01235 (6)             pshsw
E724 3420             (        forth.asm):01236 (4+2)           pshs    y
E726 8DA2             (        forth.asm):01237 (6)             bsr     NPUSH           Make sure BLK @ is loaded
E728 BDE92A           (        forth.asm):01238                 RFXT    jsr,BLOCK+8     XT for BLOCK
E72B 3520             (        forth.asm):01239 (4+2)           puls    y
E72D 1039             (        forth.asm):01240 (6)             pulsw
E72F 3710             (        forth.asm):01241                 UCNPOP                  Retrieve buffer addr (to X)
E731 9F1C             (        forth.asm):01242 (4)     @done   stx     BSBFADR         Update base buffer address
E733 DC22             (        forth.asm):01243 (4)             ldd     UTOIN
E735 308B             (        forth.asm):01244 (4+2)           leax    d,x             Add the current offset. Return the result via X
E737 39               (        forth.asm):01245 (4)             rts
E738 8E02CC           (        forth.asm):01246 (3)     @consol ldx     #CMDBUF
E73B 20F4             (        forth.asm):01247 (3)             bra     @done
                      (        forth.asm):01248         
                      (        forth.asm):01249                 include storage.asm
                      (      storage.asm):00001         * Wait until the BSY bit is clear in the CF status register.
                      (      storage.asm):00002         * Upon return the BSY bit is guaranteed to be zero. Z will
                      (      storage.asm):00003         * be set in CC. This subroutine should not be called before
                      (      storage.asm):00004         * the CompactFlash presence has been assessed.
E73D B6C007           (      storage.asm):00005 (4)     CFWAIT  lda     CFSTATR
E740 8580             (      storage.asm):00006 (2)             bita    #CFBSYB
E742 26F9             (      storage.asm):00007 (3)             bne     CFWAIT
E744 39               (      storage.asm):00008 (4)             rts
                      (      storage.asm):00009         
                      (      storage.asm):00010         * Wait until the BSY bit is clear and the RDY bit is set.
E745 8DF6             (      storage.asm):00011 (6)     CFRDY   bsr     CFWAIT
E747 2703             (      storage.asm):00012 (3)             beq     @cfrdy0         Card not busy, proceed
E749 1A04             (      storage.asm):00013 (2)             orcc    #ZFLAG
E74B 39               (      storage.asm):00014 (4)             rts
E74C 8E2000           (      storage.asm):00015 (3)     @cfrdy0 ldx     #$2000          Maximum poll count
E74F 8640             (      storage.asm):00016 (2)             lda     #CFRDYB
E751 B5C007           (      storage.asm):00017 (4)     @cfrdy1 bita    CFSTATR
E754 2604             (      storage.asm):00018 (3)             bne     @cfrdy2         BSY bit is set, continue
E756 301F             (      storage.asm):00019 (4+1)           leax    -1,x            Card not ready, decrement poll count
E758 26F7             (      storage.asm):00020 (3)             bne     @cfrdy1         and try again
E75A 39               (      storage.asm):00021 (4)     @cfrdy2 rts                     Return with Z set: card not present
                      (      storage.asm):00022         *                               Return with Z clear: card is ready
                      (      storage.asm):00023         
                      (      storage.asm):00024         * Check for possible error condition.
                      (      storage.asm):00025         * Upon return either Z is set (A is zero) and no error occurred or
                      (      storage.asm):00026         * Z is clear and the CF error register contents is returned in A.
E75B 8DE0             (      storage.asm):00027 (6)     CFERRCK bsr     CFWAIT
E75D B6C007           (      storage.asm):00028 (4)             lda     CFSTATR
E760 8401             (      storage.asm):00029 (2)             anda    #CFERRB
E762 2703             (      storage.asm):00030 (3)             beq     @cfeck1
E764 B6C001           (      storage.asm):00031 (4)             lda     CFERROR         The error register contains error details
E767 39               (      storage.asm):00032 (4)     @cfeck1 rts
                      (      storage.asm):00033         
                      (      storage.asm):00034         * Issue CF command. The command code is passed through the B register.
                      (      storage.asm):00035         * Upon return:
                      (      storage.asm):00036         * - Z is set and everything is peachy.
                      (      storage.asm):00037         * - or Z is clear and the CF error register contents will be
                      (      storage.asm):00038         *   returned in A (and mirrored in the global CFERRCD variable).
                      (      storage.asm):00039         * B is preserved.
E768 8DDB             (      storage.asm):00040 (6)     CFCMDIS bsr     CFRDY
E76A 270A             (      storage.asm):00041 (3)             beq     @cfciab         Card not ready, abort
E76C D738             (      storage.asm):00042 (3)             stb     CFCMMIR         Update CF command mirror
E76E F7C007           (      storage.asm):00043 (4)             stb     CFCOMDR         Send command to the CF card
E771 8DE8             (      storage.asm):00044 (6)             bsr     CFERRCK
E773 9739             (      storage.asm):00045 (3)     @cfcise sta     CFERRCD         CF command issue set error
                      (      storage.asm):00046                 IFNE    DEBUG
                      (      storage.asm):00047                 pshs    a,cc
                      (      storage.asm):00048                 beq     @cfciok
                      (      storage.asm):00049                 lda     #'!
                      (      storage.asm):00050                 jsr     PUTCH
E775                  (      storage.asm):00051         @cfcidi lda     CFCMMIR
                      (      storage.asm):00052                 ldx     #TBUFF
                      (      storage.asm):00053                 jsr     HDMP2
                      (      storage.asm):00054                 lda     #'/
                      (      storage.asm):00055                 sta     ,x+
                      (      storage.asm):00056                 lda     CFERRCD
                      (      storage.asm):00057                 jsr     HDMP2
                      (      storage.asm):00058                 ldx     #TBUFF
                      (      storage.asm):00059                 jsr     PUTS
                      (      storage.asm):00060                 jsr     PUTCR
                      (      storage.asm):00061                 bra     @cfcict         CF command issue continued
E775                  (      storage.asm):00062         @cfciok lda     #'#
                      (      storage.asm):00063                 jsr     PUTCH
                      (      storage.asm):00064                 bra     @cfcidi         CF command issue data indication
E775                  (      storage.asm):00065         @cfcict puls    cc,a
                      (      storage.asm):00066                 ENDC
E775 39               (      storage.asm):00067 (4)             rts
E776 86FF             (      storage.asm):00068 (2)     @cfciab lda     #$FF            Dummy error code
E778 20F9             (      storage.asm):00069 (3)             bra     @cfcise
                      (      storage.asm):00070         
                      (      storage.asm):00071         * Drive 0 select.
E77A 8DC9             (      storage.asm):00072 (6)     CFDRSEL bsr     CFRDY
E77C 86E0             (      storage.asm):00073 (2)             lda     #$E0            Drive 0, LBA mode
E77E B7C006           (      storage.asm):00074 (4)             sta     CFDRHDR
E781 20C2             (      storage.asm):00075 (3)             bra     CFRDY
                      (      storage.asm):00076         
                      (      storage.asm):00077         * Analyze the response to the CF "Identify Device" request.
E783 9E08             (      storage.asm):00078 (4)     CFANTHS ldx     DICEND
E785 308836           (      storage.asm):00079 (4+1)           leax    $36,x           Point to the "Model number" field
E788 3410             (      storage.asm):00080 (4+2)           pshs    x
E78A 118614           (      storage.asm):00081 (3)             lde     #$14            Number of 16 bit words to go through
E78D EC84             (      storage.asm):00082 (5+0)   @bytswp ldd     ,x
E78F 1E98             (      storage.asm):00083 (5)             exg     b,a             Byte swapping
E791 ED81             (      storage.asm):00084 (5+2)           std     ,x++
E793 114A             (      storage.asm):00085 (2)             dece
E795 26F6             (      storage.asm):00086 (3)             bne     @bytswp
E797 6F84             (      storage.asm):00087 (6+0)           clr     ,x
E799 3510             (      storage.asm):00088 (4+2)           puls    x
E79B BDE1DA           (      storage.asm):00089 (7)             jsr     PUTS            Decent CF cards indicate the capacity that way
E79E 7EE1E7           (      storage.asm):00090 (3)             jmp     PUTCR           Up to $10000 blocks is 64 MB!
                      (      storage.asm):00091         
                      (      storage.asm):00092         * Initialize the CompactFlash subsystem.
                      (      storage.asm):00093         * This is run once at boot time. There is no hot plug support here.
E7A1 0F37             (      storage.asm):00094 (5)     CFINIT  clr     CFCARDP         Clear card present,
                      (      storage.asm):00095                 IFEQ    DEBUG
E7A3 8DA0             (      storage.asm):00096 (6)             bsr     CFRDY
                      (      storage.asm):00097                 ELSE
                      (      storage.asm):00098                 jsr     CFRDY
                      (      storage.asm):00099                 ENDC
E7A5 2730             (      storage.asm):00100 (3)             beq     @cfinab         Card not ready, abort
E7A7 8DD1             (      storage.asm):00101 (6)             bsr     CFDRSEL         Drive 0 select
E7A9 8601             (      storage.asm):00102 (2)             lda     #1              Enable 8-bit data transfers
E7AB B7C001           (      storage.asm):00103 (4)             sta     CFFEATR
E7AE C6EF             (      storage.asm):00104 (2)             ldb     #CFSETFT        Issue a CF "Set Feature" command
                      (      storage.asm):00105                 IFEQ    DEBUG
E7B0 8DB6             (      storage.asm):00106 (6)             bsr     CFCMDIS         Not allowed to fail
                      (      storage.asm):00107                 ELSE
                      (      storage.asm):00108                 jsr     CFCMDIS         Not allowed to fail
                      (      storage.asm):00109                 ENDC
E7B2 2623             (      storage.asm):00110 (3)             bne     @cfinab         Abort with card present flag clear
E7B4 8601             (      storage.asm):00111 (2)             lda     #1              Request default PIO mode wo/ IORDY
E7B6 B7C002           (      storage.asm):00112 (4)             sta     CFSCNTR
E7B9 8603             (      storage.asm):00113 (2)             lda     #3              ATA-2 "Set Transfer mode"
E7BB B7C001           (      storage.asm):00114 (4)             sta     CFFEATR
                      (      storage.asm):00115                 IFEQ    DEBUG
E7BE 8DA8             (      storage.asm):00116 (6)             bsr     CFCMDIS         OK to fail
                      (      storage.asm):00117                 ELSE
                      (      storage.asm):00118                 jsr     CFCMDIS         OK to fail
                      (      storage.asm):00119                 ENDC
E7C0 8682             (      storage.asm):00120 (2)             lda     #$82            Disable write caching
E7C2 B7C001           (      storage.asm):00121 (4)             sta     CFFEATR
                      (      storage.asm):00122                 IFEQ    DEBUG
E7C5 8DA1             (      storage.asm):00123 (6)             bsr     CFCMDIS         B still has #CFSETF. Also OK to fail
                      (      storage.asm):00124                 ELSE
                      (      storage.asm):00125                 jsr     CFCMDIS         B still has #CFSETF. Also OK to fail
                      (      storage.asm):00126                 ENDC
E7C7 C6EC             (      storage.asm):00127 (2)             ldb     #CFIDDEV        Issue a CF "Identify Device" command
                      (      storage.asm):00128                 IFEQ    DEBUG
E7C9 8D9D             (      storage.asm):00129 (6)             bsr     CFCMDIS         Not allowed to fail
                      (      storage.asm):00130                 ELSE
                      (      storage.asm):00131                 jsr     CFCMDIS         Not allowed to fail
                      (      storage.asm):00132                 ENDC
E7CB 260A             (      storage.asm):00133 (3)             bne     @cfinab         Abort with card present flag clear
E7CD 9E08             (      storage.asm):00134 (4)             ldx     DICEND          Target address is HERE
E7CF 8D07             (      storage.asm):00135 (6)             bsr     CF1SRD          Read one sector
E7D1 8DB0             (      storage.asm):00136 (6)             bsr     CFANTHS         Analyze this!
E7D3 8601             (      storage.asm):00137 (2)             lda     #1
E7D5 9737             (      storage.asm):00138 (3)             sta     CFCARDP         Set the card present flag
E7D7 39               (      storage.asm):00139 (4)     @cfinab rts
                      (      storage.asm):00140         
                      (      storage.asm):00141         * Read one sector. The LBA parameters are assumed to have been set previously.
                      (      storage.asm):00142         * On input X points to the receiving (at least 512 bytes long) buffer.
E7D8 B6C007           (      storage.asm):00143 (4)     CF1SRD  lda     CFSTATR
E7DB 8508             (      storage.asm):00144 (2)             bita    #CFDRQB         Check for DRQ bit in the CF status register
E7DD 270C             (      storage.asm):00145 (3)             beq     IOERR
E7DF 10860200         (      storage.asm):00146 (4)             ldw     #CFSCSZ         Sector size is 512 bytes
E7E3 108EC000         (      storage.asm):00147 (4)             ldy     #CFDATAR        The data source address
E7E7 113B21           (      storage.asm):00148 (6+?)           tfm     y,x+            Note: tfm is interruptible!
E7EA 39               (      storage.asm):00149 (4)             rts
E7EB C611             (      storage.asm):00150 (2)     IOERR   ldb     #17
E7ED BDE650           (      storage.asm):00151 (7)             jsr     ERRHDLR         No return
E7F0 12               (      storage.asm):00152 (1)     CFR1SRA nop                     For symbolic stack dump debugging purposes
                      (      storage.asm):00153         
                      (      storage.asm):00154         * Write one sector. The LBA parameters are assumed to have been set previously.
                      (      storage.asm):00155         * On input X points to the sending (at least 512 bytes long) buffer.
E7F1 B6C007           (      storage.asm):00156 (4)     CF1SWR  lda     CFSTATR
E7F4 8488             (      storage.asm):00157 (2)             anda    #CFBSYB|CFDRQB
E7F6 8108             (      storage.asm):00158 (2)             cmpa    #CFDRQB         Check for BSY clear and DRQ set
E7F8 26F7             (      storage.asm):00159 (3)             bne     CF1SWR
E7FA 10860200         (      storage.asm):00160 (4)             ldw     #CFSCSZ         Sector size is 512 bytes
E7FE 108EC000         (      storage.asm):00161 (4)             ldy     #CFDATAR        The data destination address
E802 113A12           (      storage.asm):00162 (6+?)           tfm     x+,y            Note: tfm is interruptible!
E805 39               (      storage.asm):00163 (4)             rts
                      (      storage.asm):00164         
                      (      storage.asm):00165         * 1KB Forth block support primitives. Not dictionary code. More like BIOS ops.
                      (      storage.asm):00166         
                      (      storage.asm):00167         * One block IO preamble: select drive and LBA parameters. On input:
                      (      storage.asm):00168         * ,s has the return address
                      (      storage.asm):00169         * 2,s had the return address for the caller
                      (      storage.asm):00170         * 4,s has the target block number
E806 BDE73D           (      storage.asm):00171 (7)     CF1BPRE jsr     CFWAIT
E809 BDE77A           (      storage.asm):00172 (7)             jsr     CFDRSEL         Set drive and head parameters
E80C EC64             (      storage.asm):00173 (5+1)           ldd     4,s
E80E 1048             (      storage.asm):00174 (2)             lsld                    Convert block number to sector number
E810 F7C003           (      storage.asm):00175 (4)             stb     CFSNUMR         LBA 7-0
E813 B7C004           (      storage.asm):00176 (4)             sta     CFCLOWR         LBA 15-8
E816 1FA8             (      storage.asm):00177 (4)             tfr     cc,a
E818 8401             (      storage.asm):00178 (2)             anda    #CFLAG
E81A B7C005           (      storage.asm):00179 (4)             sta     CFCHIGR         LBA 23-16 (carry to cylinder high)
E81D 8602             (      storage.asm):00180 (2)             lda     #2              2 IDE sectors per Forth block
E81F B7C002           (      storage.asm):00181 (4)             sta     CFSCNTR
E822 39               (      storage.asm):00182 (4)             rts
                      (      storage.asm):00183         
                      (      storage.asm):00184         * Read one block from CF device. On input:
                      (      storage.asm):00185         * ,s has the return address
                      (      storage.asm):00186         * 2,s has the target block number
                      (      storage.asm):00187         * 4,s has the buffer base address
                      (      storage.asm):00188         * Upon return, Y will be preserved.
E823 0D37             (      storage.asm):00189 (4)     CF1BKRD tst     CFCARDP
E825 2602             (      storage.asm):00190 (3)             bne     @ctnued
E827 20C2             (      storage.asm):00191 (3)             bra     IOERR           Card not present--CF subsystem not initialized
E829 1F27             (      storage.asm):00192 (4)     @ctnued tfr     y,v
E82B 8DD9             (      storage.asm):00193 (6)             bsr     CF1BPRE
E82D C620             (      storage.asm):00194 (2)             ldb     #CFRSCTS        Issue a "Read sectors" CF command
E82F BDE768           (      storage.asm):00195 (7)             jsr     CFCMDIS
E832 AE64             (      storage.asm):00196 (5+1)           ldx     4,s             Target buffer address to X
E834 8DA2             (      storage.asm):00197 (6)             bsr     CF1SRD          Read the even sector from CF device
E836 BDE73D           (      storage.asm):00198 (7)             jsr     CFWAIT          Wait for next sector to become available
E839 8D9D             (      storage.asm):00199 (6)             bsr     CF1SRD          and read the odd sector
E83B 1F72             (      storage.asm):00200 (4)             tfr     v,y
E83D 39               (      storage.asm):00201 (4)             rts
                      (      storage.asm):00202         
                      (      storage.asm):00203         * Write one block to CF device. Upon entry:
                      (      storage.asm):00204         * ,s has the return address
                      (      storage.asm):00205         * 2,s has the target block number
                      (      storage.asm):00206         * 4,s has the buffer base address
                      (      storage.asm):00207         * Upon return, Y will be preserved.
E83E 0D37             (      storage.asm):00208 (4)     CF1BKWR tst     CFCARDP
E840 2602             (      storage.asm):00209 (3)             bne     @ctnued
E842 20A7             (      storage.asm):00210 (3)             bra     IOERR           Card not present--CF subsystem not initialized
E844 1F27             (      storage.asm):00211 (4)     @ctnued tfr     y,v
E846 8DBE             (      storage.asm):00212 (6)             bsr     CF1BPRE
E848 C630             (      storage.asm):00213 (2)             ldb     #CFWSCTS        Issue a "Write sectors" CF command
E84A BDE768           (      storage.asm):00214 (7)             jsr     CFCMDIS
E84D AE64             (      storage.asm):00215 (5+1)           ldx     4,s             Source buffer address to X
E84F 8DA0             (      storage.asm):00216 (6)             bsr     CF1SWR          Write the even sector to CF device
E851 BDE73D           (      storage.asm):00217 (7)             jsr     CFWAIT          Wait for next sector to become available
E854 8D9B             (      storage.asm):00218 (6)             bsr     CF1SWR          and write the odd sector
E856 1F72             (      storage.asm):00219 (4)             tfr     v,y
E858 39               (      storage.asm):00220 (4)             rts
                      (      storage.asm):00221         
                      (        forth.asm):01250         
                      (        forth.asm):01251         ******************************************************************************
                      (        forth.asm):01252         * Dictionary begins. In the code below ANSI refers to ANSI-X3.215-1994
                      (        forth.asm):01253         * Draft 6 proposal (i.e. the free spec).
                      (        forth.asm):01254         
E859 0D               (        forth.asm):01255         EBUFS   fcb     13              79-STANDARD (REQ145)
E85A 454D5054592D4255 (        forth.asm):01256                 fcc     'EMPTY-BUFFERS' ( -- )
     4646455253
E867 0000             (        forth.asm):01257                 fdb     0               Last dictionary entry
E869 C7               (        forth.asm):01258                 RFCS
E86A 7EE26C           (        forth.asm):01259 (3)             jmp     EMPTYB
                      (        forth.asm):01260         
E86D 0C               (        forth.asm):01261         SAVBUF  fcb     12              79-STANDARD (REQ221)
E86E 534156452D425546 (        forth.asm):01262                 fcc     'SAVE-BUFFERS'  ( -- )
     46455253
E87A E859             (        forth.asm):01263                 fdb     EBUFS
E87C C7               (        forth.asm):01264                 RFCS
E87D 8E03F0           (        forth.asm):01265 (3)             ldx     #BUF0
E880 8D03             (        forth.asm):01266 (6)             bsr     WBIFDRT
E882 8E0800           (        forth.asm):01267 (3)             ldx     #BUF1
                      (        forth.asm):01268         * Write buffer back to mass storage if marked as dirty.
                      (        forth.asm):01269         * The dirty bit is cleared but the buffer contents itself is not.
                      (        forth.asm):01270         * The buffer will continue to be marked as "in use."
                      (        forth.asm):01271         * On input X has has the base buffer address. Both D and X
                      (        forth.asm):01272         * are preserved. Y is not.
E885 3406             (        forth.asm):01273 (4+2)   WBIFDRT pshs    d
E887 3410             (        forth.asm):01274 (4+2)           pshs    x               Base buffer address (arg1 to CF1BKWR)
E889 8605             (        forth.asm):01275 (2)             lda     #BINUSE|BDIRTY
E88B A4890401         (        forth.asm):01276 (4+3)           anda    BOFLAGS,x
E88F 8105             (        forth.asm):01277 (2)             cmpa    #BINUSE|BDIRTY
E891 2616             (        forth.asm):01278 (3)             bne     @alldon         Block not in use or in use but not dirty
E893 AE890402         (        forth.asm):01279 (5+3)           ldx     BOBLKNO,x
E897 3410             (        forth.asm):01280 (4+2)           pshs    x               Block number (arg0 to CF1BKWR)
E899 8DA3             (        forth.asm):01281 (6)             bsr     CF1BKWR         Write data buffer to CF
E89B 3262             (        forth.asm):01282 (4+1)           leas    2,s             Drop one cell from the system stack (blknum)
E89D AEE4             (        forth.asm):01283 (5+0)           ldx     ,s              Retrieve base buffer address
E89F 30890401         (        forth.asm):01284 (4+3)           leax    BOFLAGS,x
E8A3 A684             (        forth.asm):01285 (4+0)           lda     ,x              Acquire the 'flags' field
E8A5 84FB             (        forth.asm):01286 (2)             anda    #^BDIRTY        Clear the dirty bit
E8A7 A784             (        forth.asm):01287 (4+0)           sta     ,x              and update the 'flags' field
E8A9 3510             (        forth.asm):01288 (4+2)   @alldon puls    x               Restore X
E8AB 3506             (        forth.asm):01289 (4+2)           puls    d               and D
E8AD 39               (        forth.asm):01290 (4)             rts
                      (        forth.asm):01291         
E8AE 05               (        forth.asm):01292         FLUSH   fcb     5               79-STANDARD (REF)
E8AF 464C555348       (        forth.asm):01293                 fcc     'FLUSH'         ( -- ) An alias for SAVE-BUFFERS
E8B4 E86D             (        forth.asm):01294                 fdb     SAVBUF
E8B6 C7               (        forth.asm):01295                 RFCS
E8B7 20C4             (        forth.asm):01296                 RFXT    bra,SAVBUF+15   XT for SAVE-BUFFERS
                      (        forth.asm):01297         
E8B9 06               (        forth.asm):01298         UPDATE  fcb     6               79-STANDARD (REQ229)
E8BA 555044415445     (        forth.asm):01299                 fcc     'UPDATE'        ( -- )
E8C0 E8AE             (        forth.asm):01300                 fdb     FLUSH
E8C2 C7               (        forth.asm):01301                 RFCS
E8C3 9E1A             (        forth.asm):01302 (4)             ldx     MRUBUFA         Most recently used buffer base address
E8C5 30890401         (        forth.asm):01303 (4+3)           leax    BOFLAGS,x       Buffer 'flags' field's address to X
E8C9 A684             (        forth.asm):01304 (4+0)           lda     ,x              Buffer 'flags' field to A
E8CB 8501             (        forth.asm):01305 (2)             bita    #BINUSE         Is that buffer in use?
E8CD 2704             (        forth.asm):01306 (3)             beq     @upddon         No, we're done here
E8CF 8A04             (        forth.asm):01307 (2)             ora     #BDIRTY
E8D1 A784             (        forth.asm):01308 (4+0)           sta     ,x              Set the dirty bit
E8D3 39               (        forth.asm):01309 (4)     @upddon rts
                      (        forth.asm):01310         
E8D4 06               (        forth.asm):01311         BUFFER  fcb     6               79-STANDARD (REQ130)
E8D5 425546464552     (        forth.asm):01312                 fcc     'BUFFER'        ( ublkno -- addr )
E8DB E8B9             (        forth.asm):01313                 fdb     UPDATE
E8DD C7               (        forth.asm):01314                 RFCS
E8DE BDE6D8           (        forth.asm):01315 (7)             jsr     NPOP
E8E1 1F12             (        forth.asm):01316 (4)             tfr     x,y             ublkno to Y
                      (        forth.asm):01317         * Block lookup.
E8E3 8E03F0           (        forth.asm):01318 (3)             ldx     #BUF0           Base address of the first resident buffer
E8E6 C602             (        forth.asm):01319 (2)             ldb     #2              Number of resident buffers
E8E8 A6890401         (        forth.asm):01320 (4+3)   @blkup  lda     BOFLAGS,x       Buffer flags to A
E8EC 8501             (        forth.asm):01321 (2)             bita    #BINUSE         Buffer in use?
E8EE 270C             (        forth.asm):01322 (3)             beq     @nxtbuf         No
E8F0 10AC890402       (        forth.asm):01323 (6+3)           cmpy    BOBLKNO,x       Buffer is in use. Block number match?
E8F5 2605             (        forth.asm):01324 (3)             bne     @nxtbuf         No
E8F7 9F1A             (        forth.asm):01325 (4)     @retba  stx     MRUBUFA         Block number match. Mark as the MRU buffer
E8F9 3610             (        forth.asm):01326                 UCNPUSH                 and return its base address via the data stack
E8FB 39               (        forth.asm):01327 (4)             rts
E8FC 30890410         (        forth.asm):01328 (4+3)   @nxtbuf leax    BFDISP,x        Point to the next buffer
E900 5A               (        forth.asm):01329 (1)             decb
E901 26E5             (        forth.asm):01330 (3)             bne     @blkup
                      (        forth.asm):01331         * The block number in Y is not currently in use. Assign a buffer to it.
E903 8E03F0           (        forth.asm):01332 (3)             ldx     #BUF0
E906 9C1A             (        forth.asm):01333 (4)             cmpx    MRUBUFA         Most recently used buffer address
E908 2603             (        forth.asm):01334 (3)             bne     @bselct
E90A 8E0800           (        forth.asm):01335 (3)             ldx     #BUF1
                      (        forth.asm):01336         * At this point X has the base address of the block we are interested in.
E90D 3420             (        forth.asm):01337 (4+2)   @bselct pshs    y               Backup the target block number
E90F BDE885           (        forth.asm):01338 (7)             jsr     WBIFDRT         Write back if dirty. X and D are preserved
E912 8601             (        forth.asm):01339 (2)             lda     #BINUSE
E914 A7890401         (        forth.asm):01340 (4+3)           sta     BOFLAGS,x       Update the buffers 'flags' field
E918 3520             (        forth.asm):01341 (4+2)           puls    y               Restore the target block number
E91A 10AF890402       (        forth.asm):01342 (6+3)           sty     BOBLKNO,x       and update the 'blknum' field as well
E91F 20D6             (        forth.asm):01343 (3)             bra     @retba
                      (        forth.asm):01344         
E921 05               (        forth.asm):01345         BLOCK   fcb     5               79-STANDARD (REQ191)
E922 424C4F434B       (        forth.asm):01346                 fcc     'BLOCK'         ( ublkno -- addr )
E927 E8D4             (        forth.asm):01347                 fdb     BUFFER
E929 C7               (        forth.asm):01348                 RFCS
E92A 8DB2             (        forth.asm):01349                 RFXT    bsr,BUFFER+9    XT for BUFFER
                      (        forth.asm):01350         * Upon return Y has has the block number.
E92C 3710             (        forth.asm):01351                 UCNPOP                  Buffer base address to X
E92E 3410             (        forth.asm):01352 (4+2)           pshs    x               Push base buffer address as Arg1 to CF1BKRD
E930 A6890401         (        forth.asm):01353 (4+3)           lda     BOFLAGS,x       Retrieve buffer 'flags' field
                      (        forth.asm):01354                 IFNE    DEBUG
                      (        forth.asm):01355                 bita    #BINUSE
                      (        forth.asm):01356                 bne     @blkctd
                      (        forth.asm):01357                 lda     #10             Assertion failed
                      (        forth.asm):01358                 jsr     ERRHDLR         No return
                      (        forth.asm):01359                 ENDC
E934 8402             (        forth.asm):01360 (2)     @blkctd anda    #BMAPPD         Has the block been read yet?
E936 2613             (        forth.asm):01361 (3)             bne     @bkmapd         Yes
E938 3420             (        forth.asm):01362 (4+2)           pshs    y               No. Push block number as arg0 to CF1BKRD
                      (        forth.asm):01363         * Map in the block from the CF device. System stack structure is as follows:
                      (        forth.asm):01364         * ,s has the target block number.
                      (        forth.asm):01365         * 2,s has the buffer base address.
E93A BDE823           (        forth.asm):01366 (7)             jsr     CF1BKRD
E93D 3262             (        forth.asm):01367 (4+1)           leas    2,s             Drop one cell from the system stack
                      (        forth.asm):01368         * Update the buffer flags field.
E93F AEE4             (        forth.asm):01369 (5+0)           ldx     ,s              Base buffer address
E941 30890401         (        forth.asm):01370 (4+3)           leax    BOFLAGS,x       Buffer 'flags' field address to X
E945 A684             (        forth.asm):01371 (4+0)           lda     ,x              Read buffer 'flags' field
E947 8A02             (        forth.asm):01372 (2)             ora     #BMAPPD
E949 A784             (        forth.asm):01373 (4+0)           sta     ,x              and mark it as read
E94B 3510             (        forth.asm):01374 (4+2)   @bkmapd puls    x               Buffer base address to X
E94D 3610             (        forth.asm):01375                 UCNPUSH
E94F 39               (        forth.asm):01376 (4)             rts
                      (        forth.asm):01377         
E950 03               (        forth.asm):01378         BLK     fcb     3
E951 424C4B           (        forth.asm):01379                 fcc     'BLK'
E954 E921             (        forth.asm):01380                 fdb     BLOCK
E956 C7               (        forth.asm):01381                 RFCS
E957 8E0124           (        forth.asm):01382 (3)             ldx     #UBLK
E95A 7EE6CA           (        forth.asm):01383 (3)             jmp     NPUSH
                      (        forth.asm):01384         
E95D 03               (        forth.asm):01385         TOIN    fcb     3
E95E 3E494E           (        forth.asm):01386                 fcc     '>IN'
E961 E950             (        forth.asm):01387                 fdb     BLK
E963 C7               (        forth.asm):01388                 RFCS
E964 8E0122           (        forth.asm):01389 (3)             ldx     #UTOIN
E967 7EE6CA           (        forth.asm):01390 (3)             jmp     NPUSH
                      (        forth.asm):01391         
E96A 03               (        forth.asm):01392         SCR     fcb     3
E96B 534352           (        forth.asm):01393                 fcc     'SCR'
E96E E95D             (        forth.asm):01394                 fdb     TOIN
E970 C7               (        forth.asm):01395                 RFCS
E971 8E0126           (        forth.asm):01396 (3)             ldx     #USCR
E974 7EE6CA           (        forth.asm):01397 (3)             jmp     NPUSH
                      (        forth.asm):01398         
                      (        forth.asm):01399         * Functionally: : LINE 6 SHIFT SCR @ BLOCK + ;
E977 04               (        forth.asm):01400         LINE    fcb     4               79-STANDARD (REF)
E978 4C494E45         (        forth.asm):01401                 fcc     'LINE'
E97C E96A             (        forth.asm):01402                 fdb     SCR
E97E C7               (        forth.asm):01403                 RFCS
E97F 8E0006           (        forth.asm):01404 (3)             ldx     #6
E982 BDE6CA           (        forth.asm):01405 (7)             jsr     NPUSH
E985 BDF7FE           (        forth.asm):01406                 RFXT    jsr,SHIFT+8     XT for SHIFT
E988 9E26             (        forth.asm):01407 (4)             ldx     USCR
E98A BDE6CA           (        forth.asm):01408 (7)             jsr     NPUSH
E98D 8D9B             (        forth.asm):01409                 RFXT    bsr,BLOCK+8     XT for BLOCK
E98F 7EF776           (        forth.asm):01410                 RFXT    jmp,PLUS+4      XT for +
                      (        forth.asm):01411         
                      (        forth.asm):01412         * Functionally:
                      (        forth.asm):01413         * : INDEX 1+ SWAP DO
                      (        forth.asm):01414         *     CR   I SCR !
                      (        forth.asm):01415         *     0 LINE 64 TYPE
                      (        forth.asm):01416         *   LOOP ;
E992 05               (        forth.asm):01417         INDEX   fcb     5               79-STANDARD (REF)
E993 494E444558       (        forth.asm):01418                 fcc     'INDEX'         ( n1 n2 -- )
E998 E977             (        forth.asm):01419                 fdb     LINE
E99A C7               (        forth.asm):01420                 RFCS
E99B BDE6D8           (        forth.asm):01421 (7)             jsr     NPOP            N2 to X
E99E 3001             (        forth.asm):01422 (4+1)           leax    1,x             1+
E9A0 1F12             (        forth.asm):01423 (4)             tfr     x,y             Y has the limit (not reached)
E9A2 BDE6D8           (        forth.asm):01424 (7)             jsr     NPOP            X has the index (N1)
E9A5 BDE1E7           (        forth.asm):01425 (7)     @indlop jsr     PUTCR           CR
E9A8 9F26             (        forth.asm):01426 (4)             stx     USCR            I SCR !
E9AA 3430             (        forth.asm):01427 (4+4)           pshs    y,x
E9AC 1FC1             (        forth.asm):01428 (4)             tfr     0,x
E9AE BDE6CA           (        forth.asm):01429 (7)             jsr     NPUSH
E9B1 8DCC             (        forth.asm):01430                 RFXT    bsr,LINE+7      XT for LINE
E9B3 8E0040           (        forth.asm):01431 (3)             ldx     #64
E9B6 BDE6CA           (        forth.asm):01432 (7)             jsr     NPUSH
E9B9 BDF5C8           (        forth.asm):01433                 RFXT    jsr,TYPE+7      XT for TYPE
E9BC 3530             (        forth.asm):01434 (4+4)           puls    x,y             Restore loop parameters
E9BE 3001             (        forth.asm):01435 (4+1)           leax    1,x
E9C0 103712           (        forth.asm):01436 (4)             cmpr    x,y
E9C3 26E0             (        forth.asm):01437 (3)             bne     @indlop
E9C5 39               (        forth.asm):01438 (4)             rts
                      (        forth.asm):01439         
E9C6 04               (        forth.asm):01440         LIST    fcb     4               79-STANDARD (REQ109)
E9C7 4C495354         (        forth.asm):01441                 fcc     'LIST'          ( ublkno -- )
E9CB E992             (        forth.asm):01442                 fdb     INDEX
E9CD C7               (        forth.asm):01443                 RFCS
E9CE 0D37             (        forth.asm):01444 (4)             tst     CFCARDP
E9D0 2605             (        forth.asm):01445 (3)             bne     @lstpro
E9D2 C611             (        forth.asm):01446 (2)             ldb     #17             IO error
E9D4 BDE650           (        forth.asm):01447 (7)             jsr     ERRHDLR         No return
E9D7 BDFBC6           (        forth.asm):01448         @lstpro RFXT    jsr,DUP+6       XT for DUP
E9DA BDE92A           (        forth.asm):01449                 RFXT    jsr,BLOCK+8     XT for BLOCK
                      (        forth.asm):01450         * TOS now has the base buffer address.
E9DD BDE6D8           (        forth.asm):01451 (7)             jsr     NPOP
E9E0 1F12             (        forth.asm):01452 (4)             tfr     x,y             Base buffer address to Y
E9E2 BDE6D8           (        forth.asm):01453 (7)             jsr     NPOP            ublkno to X
E9E5 9F26             (        forth.asm):01454 (4)             stx     USCR            Update SCR's value
E9E7 C610             (        forth.asm):01455 (2)             ldb     #16             16 lines to go
E9E9 3404             (        forth.asm):01456 (4+1)   @lstlop pshs    b
E9EB BDE1E7           (        forth.asm):01457 (7)             jsr     PUTCR
E9EE 1F21             (        forth.asm):01458 (4)             tfr     y,x
E9F0 BDE6CA           (        forth.asm):01459 (7)             jsr     NPUSH           Start address for TYPE
E9F3 8E0040           (        forth.asm):01460 (3)             ldx     #64
E9F6 BDE6CA           (        forth.asm):01461 (7)             jsr     NPUSH           Byte count for TYPE
E9F9 103012           (        forth.asm):01462 (4)             addr    x,y
E9FC BDF5C8           (        forth.asm):01463                 RFXT    jsr,TYPE+7      XT for TYPE
E9FF 3504             (        forth.asm):01464 (4+1)           puls    b
EA01 5A               (        forth.asm):01465 (1)             decb
EA02 26E5             (        forth.asm):01466 (3)             bne     @lstlop
EA04 39               (        forth.asm):01467 (4)             rts
                      (        forth.asm):01468         
                      (        forth.asm):01469         * Convert a single cell to a double. Non-transactional.
EA05 03               (        forth.asm):01470         STOD    fcb     3               ANSI Core ( n -- d )
EA06 533E44           (        forth.asm):01471                 fcc     'S>D'
EA09 E9C6             (        forth.asm):01472                 fdb     LIST
EA0B C7               (        forth.asm):01473                 RFCS
EA0C BDE6D8           (        forth.asm):01474 (7)             jsr     NPOP            N to X
EA0F 3610             (        forth.asm):01475                 UCNPUSH                 Push back low order cell
EA11 104F             (        forth.asm):01476 (2)             clrd                    High order cell: default to N >= 0
EA13 1E01             (        forth.asm):01477 (5)             exg     d,x
EA15 4D               (        forth.asm):01478 (1)             tsta
EA16 102AFCB0         (        forth.asm):01479 (5)             lbpl    NPUSH
EA1A 301F             (        forth.asm):01480 (4+1)           leax    -1,x            N is < 0. Sign extension is required. -1 to X
EA1C 7EE6CA           (        forth.asm):01481 (3)             jmp     NPUSH
                      (        forth.asm):01482         
EA1F 04               (        forth.asm):01483         NCLR    fcb     4               Non-standard
EA20 4E434C52         (        forth.asm):01484                 fcc     'NCLR'          Clear the data (normal) stack
EA24 EA05             (        forth.asm):01485                 fdb     STOD
EA26 C7               (        forth.asm):01486                 RFCS
EA27 CE024C           (        forth.asm):01487 (3)             ldu     #NSTBOT
EA2A 39               (        forth.asm):01488 (4)             rts
                      (        forth.asm):01489         
EA2B 04               (        forth.asm):01490         RCLR    fcb     4               Non-standard
EA2C 52434C52         (        forth.asm):01491                 fcc     'RCLR'          Clear the return stack
EA30 EA1F             (        forth.asm):01492                 fdb     NCLR
EA32 C7               (        forth.asm):01493                 RFCS
EA33 8E02CC           (        forth.asm):01494 (3)             ldx     #RSTBOT
EA36 9F00             (        forth.asm):01495 (4)             stx     RSP
EA38 0F2A             (        forth.asm):01496 (5)             clr     RDEPTH
EA3A 39               (        forth.asm):01497 (4)             rts
                      (        forth.asm):01498         
EA3B 05               (        forth.asm):01499         DEPTH   fcb     5               79-STANDARD (REQ238)
EA3C 4445505448       (        forth.asm):01500                 fcc     'DEPTH'
EA41 EA2B             (        forth.asm):01501                 fdb     RCLR
EA43 C7               (        forth.asm):01502                 RFCS
EA44 CC024C           (        forth.asm):01503 (3)             ldd     #NSTBOT         Bottom data stack address
EA47 103230           (        forth.asm):01504 (4)             subr    u,d             D has the current value of the data stack ptr
EA4A 1044             (        forth.asm):01505 (2)             lsrd                    divided by 2
EA4C 1F01             (        forth.asm):01506 (4)             tfr     d,x
EA4E 7EE6CA           (        forth.asm):01507 (3)             jmp     NPUSH
                      (        forth.asm):01508         
EA51 06               (        forth.asm):01509         CREATE  fcb     6               79-STANDARD (REQ239)
EA52 435245415445     (        forth.asm):01510                 fcc     'CREATE'
EA58 EA3B             (        forth.asm):01511                 fdb     DEPTH
EA5A C7               (        forth.asm):01512                 RFCS
EA5B BDE40C           (        forth.asm):01513 (7)     CREAT0  jsr     LOCWRT          Code entry point returned to Y
EA5E 868E             (        forth.asm):01514 (2)             lda     #LDXOPC         LDX immediate
EA60 A7A0             (        forth.asm):01515 (4+1)           sta     ,y+
EA62 1F21             (        forth.asm):01516 (4)             tfr     y,x
EA64 3008             (        forth.asm):01517 (4+1)           leax    8,x
EA66 AFA1             (        forth.asm):01518 (5+2)           stx     ,y++
EA68 86BD             (        forth.asm):01519 (2)             lda     #JSROPC         JSR extended
EA6A BDE482           (        forth.asm):01520 (7)             jsr     VARCON1         Compile JSR NPUSH
EA6D 8639             (        forth.asm):01521 (2)             lda     #RTSOPC         RTS inherent
EA6F A7A0             (        forth.asm):01522 (4+1)           sta     ,y+
EA71 3122             (        forth.asm):01523 (4+1)           leay    2,y             Reserve room for a possible DOES> clause
EA73 109F08           (        forth.asm):01524 (5)     CREAT1  sty     DICEND
EA76 9E0C             (        forth.asm):01525 (4)             ldx     BDICEND         This is set by LOCWRT (was IY)
EA78 9F06             (        forth.asm):01526 (4)             stx     LSTWAD
EA7A 39               (        forth.asm):01527 (4)             rts
                      (        forth.asm):01528         
EA7B C5               (        forth.asm):01529         DOES    fcb     $C5             79-STANDARD (REQ168)
EA7C 444F45533E       (        forth.asm):01530                 fcc     'DOES>'
EA81 EA51             (        forth.asm):01531                 fdb     CREATE
EA83 C7               (        forth.asm):01532                 RFCS
EA84 8EEA8A           (        forth.asm):01533 (3)             ldx     #DOESEX         JSR #DOESEX is compiled (no actual return)
EA87 7EE14D           (        forth.asm):01534 (3)             jmp     EMXASXT         Set as action component
                      (        forth.asm):01535         
EA8A 9E06             (        forth.asm):01536 (4)     DOESEX  ldx     LSTWAD          Header of the last dictionary entry
EA8C E680             (        forth.asm):01537 (4+1)           ldb     ,x+
EA8E C41F             (        forth.asm):01538 (2)             andb    #WRLNMSK        Extract word length
EA90 3A               (        forth.asm):01539 (1)             abx
                      (        forth.asm):01540                 IFNE    RELFEAT
EA91 3009             (        forth.asm):01541 (4+1)           leax    9,x             2 bytes/backlink, 1/cksum, 6 bytes code offset
                      (        forth.asm):01542                 ELSE
                      (        forth.asm):01543                 leax    8,x             2 bytes/backlink, 6 bytes code offset
                      (        forth.asm):01544                 ENDC
EA93 A684             (        forth.asm):01545 (4+0)           lda     ,x
EA95 8139             (        forth.asm):01546 (2)             cmpa    #RTSOPC         RTS inherent
EA97 2705             (        forth.asm):01547 (3)             beq     @dosex1
EA99 C60E             (        forth.asm):01548 (2)             ldb     #14             No matching CREATE
EA9B BDE650           (        forth.asm):01549 (7)             jsr     ERRHDLR         No return
EA9E 867E             (        forth.asm):01550 (2)     @dosex1 lda     #JMPOPC         JMP extended
EAA0 A780             (        forth.asm):01551 (4+1)           sta     ,x+             Overwrite RTS opcode
EAA2 3520             (        forth.asm):01552 (4+2)           puls    y
EAA4 10AF84           (        forth.asm):01553 (6+0)           sty     ,x
EAA7 39               (        forth.asm):01554 (4)             rts
                      (        forth.asm):01555         
EAA8 87               (        forth.asm):01556         LITERAL fcb     $87             79-STANDARD (REQ215)
EAA9 4C49544552414C   (        forth.asm):01557                 fcc     'LITERAL'
EAB0 EA7B             (        forth.asm):01558                 fdb     DOES
EAB2 C7               (        forth.asm):01559                 RFCS
EAB3 BDE6D8           (        forth.asm):01560 (7)             jsr     NPOP
EAB6 0D21             (        forth.asm):01561 (4)             tst     USTATE+1
EAB8 2601             (        forth.asm):01562 (3)             bne     @comp
EABA 39               (        forth.asm):01563 (4)             rts                     The standard defines no semantics in interp mode
EABB 109E08           (        forth.asm):01564 (5)     @comp   ldy     DICEND
EABE 868E             (        forth.asm):01565 (2)             lda     #LDXOPC         LDX immediate
EAC0 BDE485           (        forth.asm):01566 (7)             jsr     VARCON2         Compile LDX #X
EAC3 109F08           (        forth.asm):01567 (5)             sty     DICEND          Update HERE
EAC6 8EE6CA           (        forth.asm):01568 (3)             ldx     #NPUSH
EAC9 7EE14D           (        forth.asm):01569 (3)             jmp     EMXASXT         Set NPUSH as action component
                      (        forth.asm):01570         
                      (        forth.asm):01571         * Functionally: : CONSTANT CREATE , DOES> @ ;
                      (        forth.asm):01572         * The following code produces more compact code.
EACC 08               (        forth.asm):01573         CONS    fcb     8               79-STANDARD (REQ185)
EACD 434F4E5354414E54 (        forth.asm):01574                 fcc     'CONSTANT'
EAD5 EAA8             (        forth.asm):01575                 fdb     LITERAL
EAD7 C7               (        forth.asm):01576                 RFCS
EAD8 BDE6D8           (        forth.asm):01577 (7)             jsr     NPOP
EADB 1F16             (        forth.asm):01578 (4)             tfr     x,w
EADD BDE40C           (        forth.asm):01579 (7)             jsr     LOCWRT          Create dictionary entry
EAE0 1F61             (        forth.asm):01580 (4)             tfr     w,x
EAE2 868E             (        forth.asm):01581 (2)             lda     #LDXOPC         ldx immediate
EAE4 BDE485           (        forth.asm):01582 (7)             jsr     VARCON2         Compile LDX #CSTVAL
EAE7 BDE480           (        forth.asm):01583 (7)             jsr     VARCON          Compile JMP NPUSH
                      (        forth.asm):01584                 IFNE    RELFEAT
EAEA 8D87             (        forth.asm):01585 (6)             bsr     CREAT1
EAEC 2059             (        forth.asm):01586                 RFXT    bra,MONITOR+10  XT for MONITOR
                      (        forth.asm):01587                 ELSE
                      (        forth.asm):01588                 bra     CREAT1
                      (        forth.asm):01589                 ENDC
                      (        forth.asm):01590         
                      (        forth.asm):01591         * Functionally: : VARIABLE CREATE 2 ALLOT ;
                      (        forth.asm):01592         * However we can save three bytes per instance with the following code.
EAEE 08               (        forth.asm):01593         VARI    fcb     8               79-STANDARD (REQ227)
EAEF 5641524941424C45 (        forth.asm):01594                 fcc     'VARIABLE'
EAF7 EACC             (        forth.asm):01595                 fdb     CONS
EAF9 C7               (        forth.asm):01596                 RFCS
EAFA BDE40C           (        forth.asm):01597 (7)             jsr     LOCWRT
EAFD 868E             (        forth.asm):01598 (2)             lda     #LDXOPC         ldx immediate
EAFF A7A0             (        forth.asm):01599 (4+1)           sta     ,y+
EB01 1F26             (        forth.asm):01600 (4)             tfr     y,w             Preserve Y (HERE)
EB03 3125             (        forth.asm):01601 (4+1)           leay    5,y             Relative variable address
EB05 1F21             (        forth.asm):01602 (4)             tfr     y,x
EB07 1F62             (        forth.asm):01603 (4)             tfr     w,y             Restore Y (HERE)
EB09 AFA1             (        forth.asm):01604 (5+2)           stx     ,y++            Address field for LDX #VARADDR
EB0B BDE480           (        forth.asm):01605 (7)             jsr     VARCON          Compile JMP NPUSH
EB0E 3122             (        forth.asm):01606 (4+1)           leay    2,y             2 ALLOT
EB10 7EEA73           (        forth.asm):01607 (3)             jmp     CREAT1
                      (        forth.asm):01608         
EB13 09               (        forth.asm):01609         IMMED   fcb     9               79-STANDARD (REQ103)
EB14 494D4D4544494154 (        forth.asm):01610                 fcc     'IMMEDIATE'
     45
EB1D EAEE             (        forth.asm):01611                 fdb     VARI
EB1F C7               (        forth.asm):01612                 RFCS
EB20 C680             (        forth.asm):01613 (2)             ldb     #IMDFLM
EB22 9E06             (        forth.asm):01614 (4)     IMMED1  ldx     LSTWAD
EB24 A684             (        forth.asm):01615 (4+0)           lda     ,x
EB26 103598           (        forth.asm):01616 (4)             orr     b,a
EB29 A784             (        forth.asm):01617 (4+0)           sta     ,x
EB2B 39               (        forth.asm):01618 (4)             rts
                      (        forth.asm):01619         
EB2C 08               (        forth.asm):01620         RSTRCT  fcb     8               Non-standard (GNU Forth)
EB2D 5245535452494354 (        forth.asm):01621                 fcc     'RESTRICT'      Make word available in compilation mode only
EB35 EB13             (        forth.asm):01622                 fdb     IMMED
EB37 C7               (        forth.asm):01623                 RFCS
EB38 C640             (        forth.asm):01624 (2)             ldb     #DEFFLM
EB3A 20E6             (        forth.asm):01625 (3)             bra     IMMED1
                      (        forth.asm):01626         
                      (        forth.asm):01627                 IFNE    RELFEAT
                      (        forth.asm):01628         * This non-standard word enables checkum monitoring by ICHECK for the
                      (        forth.asm):01629         * last defined word in the dictionary. : words are monitored by default
                      (        forth.asm):01630         * and so are constants. CREATEd words require an explicit invokation of
                      (        forth.asm):01631         * MONITOR if they are to be checked for integrity.
EB3C 07               (        forth.asm):01632         MONITOR fcb     7
EB3D 4D4F4E49544F52   (        forth.asm):01633                 fcc     'MONITOR'       ( -- )
EB44 EB2C             (        forth.asm):01634                 fdb     RSTRCT
EB46 C7               (        forth.asm):01635                 RFCS
EB47 9E06             (        forth.asm):01636 (4)             ldx     LSTWAD          Last word header address
EB49 A684             (        forth.asm):01637 (4+0)           lda     ,x
EB4B 8A20             (        forth.asm):01638 (2)             ora     #MONFLM         Set the monitored flag in the attribute field
EB4D A784             (        forth.asm):01639 (4+0)           sta     ,x
EB4F 8D08             (        forth.asm):01640 (6)             bsr     HDRSKIP         Skip the header (XT to X), clear A
EB51 109E08           (        forth.asm):01641 (5)             ldy     DICEND          The upper code section limit (excluded)
EB54 8D0D             (        forth.asm):01642 (6)             bsr     HDRCSUM         Current word's definition's checksum to A
EB56 A71F             (        forth.asm):01643 (4+1)           sta     -1,x            Store the computed checksum into the header
EB58 39               (        forth.asm):01644 (4)             rts
                      (        forth.asm):01645         
                      (        forth.asm):01646         * On entry, X has a word's header address. On return X has the compilation
                      (        forth.asm):01647         * address for that word (XT). A is cleared so as to initialize the checksum.
EB59 A684             (        forth.asm):01648 (4+0)   HDRSKIP lda     ,x              Word's header attribute byte to A
EB5B 841F             (        forth.asm):01649 (2)             anda    #WRLNMSK        Extract the word's length
EB5D 8B04             (        forth.asm):01650 (2)             adda    #4              1B attribute, 2B backlink, 1B checksum
EB5F 3086             (        forth.asm):01651 (4+1)           leax    a,x             X has the word's XT. -1,X has the orig checksum
EB61 4F               (        forth.asm):01652 (1)             clra
EB62 39               (        forth.asm):01653 (4)             rts
                      (        forth.asm):01654         
                      (        forth.asm):01655         * On entry X has a word's compilation address (XT). A is supposed to have been
                      (        forth.asm):01656         * previously cleared. Y has the upper bound of the code section's address
                      (        forth.asm):01657         * (excluded). On return, A will have the word's code section's checksum.
                      (        forth.asm):01658         * X is preserved.
EB63 3410             (        forth.asm):01659 (4+2)   HDRCSUM pshs    x
EB65 A880             (        forth.asm):01660 (4+1)   @hdrcs1 eora    ,x+             Update the checksum
EB67 103712           (        forth.asm):01661 (4)             cmpr    x,y             Upper bound reached?
EB6A 26F9             (        forth.asm):01662 (3)             bne     @hdrcs1         No. Process next byte in word's code section
EB6C 3510             (        forth.asm):01663 (4+2)           puls    x
EB6E 39               (        forth.asm):01664 (4)             rts
                      (        forth.asm):01665         
                      (        forth.asm):01666         * This non-standard word walks through the dictionary linked list and checks
                      (        forth.asm):01667         * that the words that have the MONFLM flag set in their header's attribute
                      (        forth.asm):01668         * field have a definition that still matches the checksum stored in the word's
                      (        forth.asm):01669         * header. This is meant to be used interactively, as a debugging tool, since
                      (        forth.asm):01670         * multitasking is not supported by this implementation. Therefore no status
                      (        forth.asm):01671         * value is returned. Feedback will only be provided for corrupted words, in
                      (        forth.asm):01672         * the form of a diagnostic message printed to the console.
EB6F 06               (        forth.asm):01673         ICHECK  fcb     6
EB70 49434845434B     (        forth.asm):01674                 fcc     'ICHECK'        ( -- )
EB76 EB3C             (        forth.asm):01675                 fdb     MONITOR
EB78 C7               (        forth.asm):01676                 RFCS
EB79 109E08           (        forth.asm):01677 (5)             ldy     DICEND          Upper bound for the code of the last word (exc.)
EB7C 9E06             (        forth.asm):01678 (4)             ldx     LSTWAD          LAST points to the header of the last word
EB7E 3410             (        forth.asm):01679 (4+2)   @icklop pshs    x               Current word's header address
EB80 A684             (        forth.asm):01680 (4+0)           lda     ,x              Word's header attribute byte to A
EB82 8520             (        forth.asm):01681 (2)             bita    #MONFLM         Is this a monitored word?
EB84 2726             (        forth.asm):01682 (3)             beq     @icknxt         No. Point to the next word
EB86 8DD1             (        forth.asm):01683 (6)             bsr     HDRSKIP         Skip the header (XT to X), clear A
EB88 8DD9             (        forth.asm):01684 (6)             bsr     HDRCSUM         Current word's definition's checksum to A
EB8A A11F             (        forth.asm):01685 (4+1)           cmpa    -1,x            Does the checksum match the compile time value?
EB8C 271E             (        forth.asm):01686 (3)             beq     @icknxt         Yes. Point to the next word
                      (        forth.asm):01687         * Current word's definition has been modified since its original definition!
EB8E BDE1E7           (        forth.asm):01688 (7)             jsr     PUTCR
EB91 AEE4             (        forth.asm):01689 (5+0)           ldx     ,s              Current word's header address
EB93 E680             (        forth.asm):01690 (4+1)           ldb     ,x+
EB95 C41F             (        forth.asm):01691 (2)             andb    #WRLNMSK
EB97 4F               (        forth.asm):01692 (1)             clra
EB98 BDE6CA           (        forth.asm):01693 (7)             jsr     NPUSH           Word's name base address
EB9B 1F01             (        forth.asm):01694 (4)             tfr     d,x
EB9D BDE6CA           (        forth.asm):01695 (7)             jsr     NPUSH           Byte count for TYPE
EBA0 BDF5C8           (        forth.asm):01696                 RFXT    jsr,TYPE+7      XT for TYPE
EBA3 BDF57A           (        forth.asm):01697                 RFXT    jsr,SPACE+8     XT for SPACE
EBA6 8EEBB9           (        forth.asm):01698 (3)             ldx     #CSUMFLM
EBA9 BDE1DA           (        forth.asm):01699 (7)             jsr     PUTS            Feedback for checksum failure
EBAC 3510             (        forth.asm):01700 (4+2)   @icknxt puls    x               Current word's header address
EBAE 1F12             (        forth.asm):01701 (4)             tfr     x,y             Point to the end of the previous word's code
EBB0 8DA7             (        forth.asm):01702 (6)             bsr     HDRSKIP         Skip the header (XT to X), clear A
EBB2 AE1D             (        forth.asm):01703 (5+1)           ldx     -3,x            Point to the previous header via the backlink
EBB4 2702             (        forth.asm):01704 (3)             beq     @ickdon         We've just reached the end of the dictionary
EBB6 20C6             (        forth.asm):01705 (3)             bra     @icklop
EBB8 39               (        forth.asm):01706 (4)     @ickdon rts
                      (        forth.asm):01707         
EBB9 696E746567726974 (        forth.asm):01708         CSUMFLM fcn     'integrity check failed'
     7920636865636B20
     6661696C656400
                      (        forth.asm):01709                 ENDC                    RELFEAT enabled
                      (        forth.asm):01710         
EBD0 C2               (        forth.asm):01711         DO      fcb     $C2             79-STANDARD (REQ142)
EBD1 444F             (        forth.asm):01712                 fcc     'DO'
                      (        forth.asm):01713                 IFNE    RELFEAT
EBD3 EB6F             (        forth.asm):01714                 fdb     ICHECK
                      (        forth.asm):01715                 ELSE
                      (        forth.asm):01716                 fdb     RSTRCT
                      (        forth.asm):01717                 ENDC
EBD5 C7               (        forth.asm):01718                 RFCS
EBD6 9E08             (        forth.asm):01719 (4)             ldx     DICEND
EBD8 3003             (        forth.asm):01720 (4+1)           leax    3,x
EBDA BDE6E7           (        forth.asm):01721 (7)             jsr     RPUSH
EBDD 8EEBE3           (        forth.asm):01722 (3)             ldx     #DOEX
EBE0 7EE14D           (        forth.asm):01723 (3)             jmp     EMXASXT         Set as action component
                      (        forth.asm):01724         
EBE3 BDFBE1           (        forth.asm):01725         DOEX    RFXT    jsr,SWAP+7      XT for SWAP
EBE6 BDEF50           (        forth.asm):01726                 RFXT    jsr,TOR+5       XT for >R
EBE9 7EEF50           (        forth.asm):01727                 RFXT    jmp,TOR+5       XT for >R
                      (        forth.asm):01728         
EBEC C4               (        forth.asm):01729         LOOP    fcb     $C4             79-STANDARD (REQ124)
EBED 4C4F4F50         (        forth.asm):01730                 fcc     'LOOP'
EBF1 EBD0             (        forth.asm):01731                 fdb     DO
EBF3 C7               (        forth.asm):01732                 RFCS
EBF4 8EEC13           (        forth.asm):01733 (3)             ldx     #LOOPEX
EBF7 109E08           (        forth.asm):01734 (5)     LOOP1   ldy     DICEND
EBFA 86BD             (        forth.asm):01735 (2)             lda     #JSROPC         JSR extended
EBFC BDE139           (        forth.asm):01736 (7)             jsr     CHKRTS          Check if the final RTS can be omitted
EBFF BDE485           (        forth.asm):01737 (7)             jsr     VARCON2
EC02 8E2503           (        forth.asm):01738 (3)             ldx     #BCSOPC         Compile "BCS *+5"
EC05 AFA1             (        forth.asm):01739 (5+2)           stx     ,y++
EC07 BDE705           (        forth.asm):01740 (7)             jsr     RPOP
EC0A 867E             (        forth.asm):01741 (2)             lda     #JMPOPC
EC0C BDE485           (        forth.asm):01742 (7)             jsr     VARCON2         Compile "JMP R@"
EC0F 109F08           (        forth.asm):01743 (5)             sty     DICEND          No action component
EC12 39               (        forth.asm):01744 (4)             rts
                      (        forth.asm):01745         
EC13 8E0001           (        forth.asm):01746 (3)     LOOPEX  ldx     #1
EC16 2011             (        forth.asm):01747 (3)             bra     PLOPEX1
                      (        forth.asm):01748         
EC18 C5               (        forth.asm):01749         PLOOP   fcb     $C5             79-STANDARD (REQ141)
EC19 2B4C4F4F50       (        forth.asm):01750                 fcc     '+LOOP'         The sign hdl reqs for REQ124 should apply though
EC1E EBEC             (        forth.asm):01751                 fdb     LOOP
EC20 C7               (        forth.asm):01752                 RFCS
EC21 8EEC26           (        forth.asm):01753 (3)             ldx     #PLOOPEX
EC24 20D1             (        forth.asm):01754 (3)             bra     LOOP1
                      (        forth.asm):01755         
EC26 BDE6D8           (        forth.asm):01756 (7)     PLOOPEX jsr     NPOP
EC29 1F16             (        forth.asm):01757 (4)     PLOPEX1 tfr     x,w             Increment to W
EC2B BDE705           (        forth.asm):01758 (7)             jsr     RPOP
EC2E 1F12             (        forth.asm):01759 (4)             tfr     x,y             Index to Y
EC30 BDE705           (        forth.asm):01760 (7)             jsr     RPOP            Limit to X
EC33 103062           (        forth.asm):01761 (4)             addr    w,y             Update index
EC36 114D             (        forth.asm):01762 (2)             tste
EC38 2B10             (        forth.asm):01763 (3)             bmi     @neginc
EC3A 103721           (        forth.asm):01764 (4)             cmpr    y,x
EC3D 2F12             (        forth.asm):01765 (3)             ble     @done           We're done. Return With CFLAG set
EC3F BDE6E7           (        forth.asm):01766 (7)     @iter   jsr     RPUSH           Push back the limit
EC42 1F21             (        forth.asm):01767 (4)             tfr     y,x
EC44 BDE6E7           (        forth.asm):01768 (7)             jsr     RPUSH           Push back the index
EC47 1CFE             (        forth.asm):01769 (2)             andcc   #^CFLAG         Clear CFLAG
EC49 39               (        forth.asm):01770 (4)             rts
EC4A 103721           (        forth.asm):01771 (4)     @neginc cmpr    y,x
EC4D 27F0             (        forth.asm):01772 (3)             beq     @iter           79-STANDARD irregular historical precedent
EC4F 2BEE             (        forth.asm):01773 (3)             bmi     @iter
EC51 1A01             (        forth.asm):01774 (2)     @done   orcc    #CFLAG          Set CFLAG
EC53 39               (        forth.asm):01775 (4)             rts
                      (        forth.asm):01776         
EC54 46               (        forth.asm):01777         UNLOOP  fcb     $46             ANSI (Core)
EC55 554E4C4F4F50     (        forth.asm):01778                 fcc     'UNLOOP'
EC5B EC18             (        forth.asm):01779                 fdb     PLOOP
EC5D C7               (        forth.asm):01780                 RFCS
EC5E BDE705           (        forth.asm):01781 (7)             jsr     RPOP            Drop the index from the return stack
EC61 7EE705           (        forth.asm):01782 (3)             jmp     RPOP            and the loop limit as well
                      (        forth.asm):01783         
EC64 C2               (        forth.asm):01784         IF      fcb     $C2             79-STANDARD (REQ210)
EC65 4946             (        forth.asm):01785                 fcc     'IF'
EC67 EC54             (        forth.asm):01786                 fdb     UNLOOP
EC69 C7               (        forth.asm):01787                 RFCS
EC6A 109E08           (        forth.asm):01788 (5)             ldy     DICEND
EC6D 8EEC8C           (        forth.asm):01789 (3)             ldx     #IFEX
EC70 86BD             (        forth.asm):01790 (2)             lda     #JSROPC         JSR extended
EC72 BDE139           (        forth.asm):01791 (7)             jsr     CHKRTS          Check if the final RTS can be omitted
EC75 BDE485           (        forth.asm):01792 (7)             jsr     VARCON2
EC78 8E2603           (        forth.asm):01793 (3)             ldx     #BNEOPC         Compile "BNE *+5"
EC7B AFA1             (        forth.asm):01794 (5+2)           stx     ,y++
EC7D 867E             (        forth.asm):01795 (2)             lda     #JMPOPC         JMP extended
EC7F A7A0             (        forth.asm):01796 (4+1)           sta     ,y+
EC81 1F21             (        forth.asm):01797 (4)             tfr     y,x
EC83 BDE6E7           (        forth.asm):01798 (7)             jsr     RPUSH
EC86 3122             (        forth.asm):01799 (4+1)           leay    2,y             Reserve 2 bytes for the jump address
EC88 109F08           (        forth.asm):01800 (5)             sty     DICEND
EC8B 39               (        forth.asm):01801 (4)             rts
                      (        forth.asm):01802         
EC8C BDE6D8           (        forth.asm):01803 (7)     IFEX    jsr     NPOP
EC8F 1037C1           (        forth.asm):01804 (4)             cmpr    0,x
EC92 39               (        forth.asm):01805 (4)             rts
                      (        forth.asm):01806         
                      (        forth.asm):01807         * Functionally equivalent to:
                      (        forth.asm):01808         * UNLESS ['] 0= COMPILE, POSTPONE IF ; IMMEDIATE RESTRICT
EC93 C6               (        forth.asm):01809         UNLESS  fcb     $C6             Non-standard (Perl inspired)
EC94 554E4C455353     (        forth.asm):01810                 fcc     'UNLESS'
EC9A EC64             (        forth.asm):01811                 fdb     IF
EC9C C7               (        forth.asm):01812                 RFCS
EC9D 8EEDBE           (        forth.asm):01813                 RFXT    ldx,#NULP+5     XT for 0=
ECA0 BDF077           (        forth.asm):01814 (7)             jsr     CMPCOM1
ECA3 20C5             (        forth.asm):01815                 RFXT    bra,IF+5        XT for IF
                      (        forth.asm):01816         
ECA5 C4               (        forth.asm):01817         ELSE    fcb     $C4             79-STANDARD (REQ167)
ECA6 454C5345         (        forth.asm):01818                 fcc     'ELSE'
ECAA EC93             (        forth.asm):01819                 fdb     UNLESS
ECAC C7               (        forth.asm):01820                 RFCS
ECAD 109E08           (        forth.asm):01821 (5)             ldy     DICEND
ECB0 867E             (        forth.asm):01822 (2)             lda     #JMPOPC         JMP extended
ECB2 A7A0             (        forth.asm):01823 (4+1)           sta     ,y+
ECB4 3122             (        forth.asm):01824 (4+1)           leay    2,y
ECB6 109F08           (        forth.asm):01825 (5)             sty     DICEND
ECB9 BDE705           (        forth.asm):01826 (7)             jsr     RPOP
ECBC 10AF84           (        forth.asm):01827 (6+0)           sty     ,x              Set actual ELSE jump address
ECBF 1F21             (        forth.asm):01828 (4)             tfr     y,x
ECC1 301E             (        forth.asm):01829 (4+1)           leax    -2,x
ECC3 7EE6E7           (        forth.asm):01830 (3)             jmp     RPUSH
                      (        forth.asm):01831         
ECC6 C4               (        forth.asm):01832         THEN    fcb     $C4             79-STANDARD (REQ161)
ECC7 5448454E         (        forth.asm):01833                 fcc     'THEN'
ECCB ECA5             (        forth.asm):01834                 fdb     ELSE
ECCD C7               (        forth.asm):01835                 RFCS
ECCE 109E08           (        forth.asm):01836 (5)             ldy     DICEND
ECD1 BDE705           (        forth.asm):01837 (7)             jsr     RPOP
ECD4 10AF84           (        forth.asm):01838 (6+0)           sty     ,x
ECD7 39               (        forth.asm):01839 (4)             rts
                      (        forth.asm):01840         
ECD8 01               (        forth.asm):01841         EQ      fcb     1               79-STANDARD (REQ173)
ECD9 3D               (        forth.asm):01842                 fcc     '='             ( N1 N2 -- FLAG )
ECDA ECC6             (        forth.asm):01843                 fdb     THEN
ECDC C7               (        forth.asm):01844                 RFCS
ECDD BDE38F           (        forth.asm):01845 (7)             jsr     MIN2PST         At least two cells need to be stacked up
ECE0 10ECC4           (        forth.asm):01846 (8+0)           ldq     ,u              D:W has N2:N1
ECE3 3342             (        forth.asm):01847 (4+1)           leau    2,u             Drop one cell from the user stack
ECE5 1FC1             (        forth.asm):01848 (4)             tfr     0,x
ECE7 103760           (        forth.asm):01849 (4)             cmpr    w,d
ECEA 2602             (        forth.asm):01850 (3)             bne     @eq1
ECEC 3001             (        forth.asm):01851 (4+1)           leax    1,x
ECEE AFC4             (        forth.asm):01852 (5+0)   @eq1    stx     ,u              Store in place to FLAG
ECF0 39               (        forth.asm):01853 (4)             rts
                      (        forth.asm):01854         
ECF1 02               (        forth.asm):01855         DIFF    fcb     2               79-STANDARD (REF)
ECF2 3C3E             (        forth.asm):01856                 fcc     '<>'            ( N1 N2 -- FLAG )
ECF4 ECD8             (        forth.asm):01857                 fdb     EQ
ECF6 C7               (        forth.asm):01858                 RFCS
ECF7 BDE38F           (        forth.asm):01859 (7)             jsr     MIN2PST         At least two cells need to be stacked up
ECFA 10ECC4           (        forth.asm):01860 (8+0)           ldq     ,u              D:W has N2:N1
ECFD 3342             (        forth.asm):01861 (4+1)           leau    2,u             Drop one cell from the user stack
ECFF 1FC1             (        forth.asm):01862 (4)             tfr     0,x
ED01 103760           (        forth.asm):01863 (4)             cmpr    w,d
ED04 2702             (        forth.asm):01864 (3)             beq     @diff1
ED06 3001             (        forth.asm):01865 (4+1)           leax    1,x
ED08 AFC4             (        forth.asm):01866 (5+0)   @diff1  stx     ,u              Store in place to FLAG
ED0A 39               (        forth.asm):01867 (4)             rts
                      (        forth.asm):01868         
ED0B 02               (        forth.asm):01869         SINFEQ  fcb     2               Non-standard (Not even ANSI!)
ED0C 3C3D             (        forth.asm):01870                 fcc     '<='            Required for the ORNL fixed sieve benchmark
ED0E ECF1             (        forth.asm):01871                 fdb     DIFF
ED10 C7               (        forth.asm):01872                 RFCS
ED11 BDE38F           (        forth.asm):01873 (7)             jsr     MIN2PST         At least two cells need to be stacked up
ED14 10AEC4           (        forth.asm):01874 (6+0)           ldy     ,u
ED17 AE42             (        forth.asm):01875 (5+1)           ldx     2,u
ED19 104F             (        forth.asm):01876 (2)             clrd
ED1B 103721           (        forth.asm):01877 (4)             cmpr    y,x
ED1E 2E02             (        forth.asm):01878 (3)             bgt     @sinfq1
ED20 104C             (        forth.asm):01879 (2)             incd
ED22 3342             (        forth.asm):01880 (4+1)   @sinfq1 leau    2,u             Drop one cell
ED24 EDC4             (        forth.asm):01881 (5+0)           std     ,u
ED26 39               (        forth.asm):01882 (4)             rts
                      (        forth.asm):01883         
                      (        forth.asm):01884                 IFNE    DEBUG
ED27                  (        forth.asm):01885         CC      fcb     2               Non-standard. Used for debugging
                      (        forth.asm):01886                 fcc     'CC'
                      (        forth.asm):01887                 fdb     SINFEQ
                      (        forth.asm):01888                 RFCS
                      (        forth.asm):01889                 ldx     CCREG
                      (        forth.asm):01890                 jmp     NPUSH
                      (        forth.asm):01891                 ENDC
                      (        forth.asm):01892         
ED27 03               (        forth.asm):01893         XOR     fcb     3               79-STANDARD (REQ179)
ED28 584F52           (        forth.asm):01894                 fcc     'XOR'
                      (        forth.asm):01895                 IFNE    DEBUG
                      (        forth.asm):01896                 fdb     CC
                      (        forth.asm):01897                 ELSE
ED2B ED0B             (        forth.asm):01898                 fdb     SINFEQ
                      (        forth.asm):01899                 ENDC
ED2D C7               (        forth.asm):01900                 RFCS
ED2E BDE38F           (        forth.asm):01901 (7)             jsr     MIN2PST         At least two cells need to be stacked up
ED31 ECC4             (        forth.asm):01902 (5+0)           ldd     ,u
ED33 10A642           (        forth.asm):01903 (6+1)           ldw     2,u
ED36 103660           (        forth.asm):01904 (4)             eorr    w,d
ED39 3342             (        forth.asm):01905 (4+1)   XOR1    leau    2,u
ED3B EDC4             (        forth.asm):01906 (5+0)           std     ,u
ED3D 39               (        forth.asm):01907 (4)             rts
                      (        forth.asm):01908         
ED3E 02               (        forth.asm):01909         OR      fcb     2               79-STANDARD (REQ223)
ED3F 4F52             (        forth.asm):01910                 fcc     'OR'
ED41 ED27             (        forth.asm):01911                 fdb     XOR
ED43 C7               (        forth.asm):01912                 RFCS
ED44 BDE38F           (        forth.asm):01913 (7)             jsr     MIN2PST         At least two cells need to be stacked up
ED47 ECC4             (        forth.asm):01914 (5+0)           ldd     ,u
ED49 10A642           (        forth.asm):01915 (6+1)           ldw     2,u
ED4C 103560           (        forth.asm):01916 (4)             orr     w,d
ED4F 20E8             (        forth.asm):01917 (3)             bra     XOR1
                      (        forth.asm):01918         
ED51 03               (        forth.asm):01919         AND     fcb     3               79-STANDARD (REQ183)
ED52 414E44           (        forth.asm):01920                 fcc     'AND'
ED55 ED3E             (        forth.asm):01921                 fdb     OR
ED57 C7               (        forth.asm):01922                 RFCS
ED58 BDE38F           (        forth.asm):01923 (7)             jsr     MIN2PST         At least two cells need to be stacked up
ED5B ECC4             (        forth.asm):01924 (5+0)           ldd     ,u
ED5D 10A642           (        forth.asm):01925 (6+1)           ldw     2,u
ED60 103460           (        forth.asm):01926 (4)             andr    w,d
ED63 20D4             (        forth.asm):01927 (3)             bra     XOR1
                      (        forth.asm):01928         
ED65 03               (        forth.asm):01929         COM     fcb     3               79-STANDARD (REF)
ED66 434F4D           (        forth.asm):01930                 fcc     'COM'
ED69 ED51             (        forth.asm):01931                 fdb     AND
ED6B C7               (        forth.asm):01932                 RFCS
ED6C BDE6D8           (        forth.asm):01933 (7)     COM0    jsr     NPOP
ED6F 1F10             (        forth.asm):01934 (4)             tfr     x,d
ED71 1043             (        forth.asm):01935 (2)             comd
ED73 1F01             (        forth.asm):01936 (4)             tfr     d,x
ED75 3610             (        forth.asm):01937                 UCNPUSH
ED77 39               (        forth.asm):01938 (4)             rts
                      (        forth.asm):01939         
ED78 06               (        forth.asm):01940         INVERT  fcb     6               ANSI (Core)
ED79 494E56455254     (        forth.asm):01941                 fcc     'INVERT'
ED7F ED65             (        forth.asm):01942                 fdb     COM
ED81 C7               (        forth.asm):01943                 RFCS
ED82 20E8             (        forth.asm):01944 (3)             bra     COM0
                      (        forth.asm):01945         
ED84 02               (        forth.asm):01946         ZGREAT  fcb     2               79-STANDARD (REQ118)
ED85 303E             (        forth.asm):01947                 fcc     '0>'
ED87 ED78             (        forth.asm):01948                 fdb     INVERT
ED89 C7               (        forth.asm):01949                 RFCS
ED8A BDE6D8           (        forth.asm):01950 (7)             jsr     NPOP
ED8D 1F10             (        forth.asm):01951 (4)             tfr     x,d
ED8F 104D             (        forth.asm):01952 (2)             tstd
ED91 2F06             (        forth.asm):01953 (3)             ble     @zgrt1
ED93 8E0001           (        forth.asm):01954 (3)             ldx     #1
ED96 3610             (        forth.asm):01955                 UCNPUSH
ED98 39               (        forth.asm):01956 (4)             rts
ED99 1FC1             (        forth.asm):01957 (4)     @zgrt1  tfr     0,x
ED9B 3610             (        forth.asm):01958                 UCNPUSH
ED9D 39               (        forth.asm):01959 (4)             rts
                      (        forth.asm):01960         
ED9E 02               (        forth.asm):01961         ZLESS   fcb     2               79-STANDARD (REQ144)
ED9F 303C             (        forth.asm):01962                 fcc     '0<'
EDA1 ED84             (        forth.asm):01963                 fdb     ZGREAT
EDA3 C7               (        forth.asm):01964                 RFCS
EDA4 BDE6D8           (        forth.asm):01965 (7)             jsr     NPOP
EDA7 1F10             (        forth.asm):01966 (4)             tfr     x,d
EDA9 104D             (        forth.asm):01967 (2)             tstd
EDAB 2C06             (        forth.asm):01968 (3)             bge     @zlss1
EDAD 8E0001           (        forth.asm):01969 (3)             ldx     #1
EDB0 3610             (        forth.asm):01970                 UCNPUSH
EDB2 39               (        forth.asm):01971 (4)             rts
EDB3 1FC1             (        forth.asm):01972 (4)     @zlss1  tfr     0,x
EDB5 3610             (        forth.asm):01973                 UCNPUSH
EDB7 39               (        forth.asm):01974 (4)             rts
                      (        forth.asm):01975         
EDB8 02               (        forth.asm):01976         NULP    fcb     2               79-STANDARD (REQ180)
EDB9 303D             (        forth.asm):01977                 fcc     '0='
EDBB ED9E             (        forth.asm):01978                 fdb     ZLESS
EDBD C7               (        forth.asm):01979                 RFCS
EDBE BDE6D8           (        forth.asm):01980 (7)             jsr     NPOP
EDC1 1F10             (        forth.asm):01981 (4)             tfr     x,d
EDC3 1FC1             (        forth.asm):01982 (4)             tfr     0,x
EDC5 104D             (        forth.asm):01983 (2)             tstd
EDC7 2703             (        forth.asm):01984 (3)             beq     @nulp2
EDC9 3610             (        forth.asm):01985         @nulp1  UCNPUSH
EDCB 39               (        forth.asm):01986 (4)             rts
EDCC 3001             (        forth.asm):01987 (4+1)   @nulp2  leax    1,x
EDCE 20F9             (        forth.asm):01988 (3)             bra     @nulp1
                      (        forth.asm):01989         
EDD0 03               (        forth.asm):01990         NOT     fcb     3               79-STANDARD (REQ165)
EDD1 4E4F54           (        forth.asm):01991                 fcc     'NOT'
EDD4 EDB8             (        forth.asm):01992                 fdb     NULP
EDD6 C7               (        forth.asm):01993                 RFCS
EDD7 20E5             (        forth.asm):01994                 RFXT    bra,NULP+5      XT for 0=
                      (        forth.asm):01995         
EDD9 02               (        forth.asm):01996         USUP    fcb     2               ANSI (Core Ext)
EDDA 553E             (        forth.asm):01997                 fcc     'U>'
EDDC EDD0             (        forth.asm):01998                 fdb     NOT
EDDE C7               (        forth.asm):01999                 RFCS
EDDF BDE48A           (        forth.asm):02000 (7)             jsr     CMP2
EDE2 2302             (        forth.asm):02001 (3)             bls     @usup1
EDE4 3001             (        forth.asm):02002 (4+1)           leax    1,x
EDE6 3610             (        forth.asm):02003         @usup1  UCNPUSH
EDE8 39               (        forth.asm):02004 (4)             rts
                      (        forth.asm):02005         
EDE9 02               (        forth.asm):02006         UINF    fcb     2               79-STANDARD (REQ150)
EDEA 553C             (        forth.asm):02007                 fcc     'U<'
EDEC EDD9             (        forth.asm):02008                 fdb     USUP
EDEE C7               (        forth.asm):02009                 RFCS
EDEF BDE48A           (        forth.asm):02010 (7)             jsr     CMP2
EDF2 2402             (        forth.asm):02011 (3)             bhs     @uinf1          Z is set
EDF4 3001             (        forth.asm):02012 (4+1)           leax    1,x
EDF6 3610             (        forth.asm):02013         @uinf1  UCNPUSH
EDF8 39               (        forth.asm):02014 (4)             rts
                      (        forth.asm):02015         
                      (        forth.asm):02016         * Functionally: : WITHIN OVER - >R - R> U< ;
EDF9 06               (        forth.asm):02017         WITHIN  fcb     6               ANSI (Core)
EDFA 57495448494E     (        forth.asm):02018                 fcc     'WITHIN'        ( n1 n2 n3 -- flag )
EE00 EDE9             (        forth.asm):02019                 fdb     UINF
EE02 C7               (        forth.asm):02020                 RFCS
EE03 BDFC27           (        forth.asm):02021                 RFXT    jsr,OVER+7      XT for OVER
EE06 BDF7A8           (        forth.asm):02022                 RFXT    jsr,MINUS+4     XT for -
EE09 BDEF50           (        forth.asm):02023                 RFXT    jsr,TOR+5       XT for >R
EE0C BDF7A8           (        forth.asm):02024                 RFXT    jsr,MINUS+4     XT for -
EE0F BDEF44           (        forth.asm):02025                 RFXT    jsr,RFROM+5     XT for R>
EE12 20DB             (        forth.asm):02026                 RFXT    bra,UINF+5      XT for U<
                      (        forth.asm):02027         
EE14 01               (        forth.asm):02028         SUP     fcb     1               79-STANDARD (REQ102)
EE15 3E               (        forth.asm):02029                 fcc     '>'
EE16 EDF9             (        forth.asm):02030                 fdb     WITHIN
EE18 C7               (        forth.asm):02031                 RFCS
EE19 BDE48A           (        forth.asm):02032 (7)             jsr     CMP2
EE1C 2F02             (        forth.asm):02033 (3)             ble     @sup1
EE1E 3001             (        forth.asm):02034 (4+1)           leax    1,x
EE20 3610             (        forth.asm):02035         @sup1   UCNPUSH
EE22 39               (        forth.asm):02036 (4)             rts
                      (        forth.asm):02037         
EE23 01               (        forth.asm):02038         INF     fcb     1               79-STANDARD (REQ139)
EE24 3C               (        forth.asm):02039                 fcc     '<'
EE25 EE14             (        forth.asm):02040                 fdb     SUP
EE27 C7               (        forth.asm):02041                 RFCS
EE28 BDE48A           (        forth.asm):02042 (7)             jsr     CMP2
EE2B 2C02             (        forth.asm):02043 (3)             bge     @inf1
EE2D 3001             (        forth.asm):02044 (4+1)           leax    1,x
EE2F 3610             (        forth.asm):02045         @inf1   UCNPUSH
EE31 39               (        forth.asm):02046 (4)             rts
                      (        forth.asm):02047         
EE32 03               (        forth.asm):02048         MAX     fcb     3               79-STANDARD (REQ218)
EE33 4D4158           (        forth.asm):02049                 fcc     'MAX'
EE36 EE23             (        forth.asm):02050                 fdb     INF
EE38 C7               (        forth.asm):02051                 RFCS
EE39 BDE6D8           (        forth.asm):02052 (7)             jsr     NPOP
EE3C 1F12             (        forth.asm):02053 (4)             tfr     x,y
EE3E BDE6D8           (        forth.asm):02054 (7)             jsr     NPOP
EE41 103721           (        forth.asm):02055 (4)             cmpr    y,x
EE44 2C02             (        forth.asm):02056 (3)             bge     @pshrv1
EE46 1F21             (        forth.asm):02057 (4)             tfr     y,x
EE48 3610             (        forth.asm):02058         @pshrv1 UCNPUSH
EE4A 39               (        forth.asm):02059 (4)             rts
                      (        forth.asm):02060         
EE4B 03               (        forth.asm):02061         MIN     fcb     3               79-STANDARD (REQ127)
EE4C 4D494E           (        forth.asm):02062                 fcc     'MIN'
EE4F EE32             (        forth.asm):02063                 fdb     MAX
EE51 C7               (        forth.asm):02064                 RFCS
EE52 BDE6D8           (        forth.asm):02065 (7)             jsr     NPOP
EE55 1F12             (        forth.asm):02066 (4)             tfr     x,y
EE57 BDE6D8           (        forth.asm):02067 (7)             jsr     NPOP
EE5A 103721           (        forth.asm):02068 (4)             cmpr    y,x
EE5D 2F02             (        forth.asm):02069 (3)             ble     @pshrv2
EE5F 1F21             (        forth.asm):02070 (4)             tfr     y,x
EE61 3610             (        forth.asm):02071         @pshrv2 UCNPUSH
EE63 39               (        forth.asm):02072 (4)             rts
                      (        forth.asm):02073         
EE64 03               (        forth.asm):02074         ABS     fcb     3               79-STANDARD (REQ108)
EE65 414253           (        forth.asm):02075                 fcc     'ABS'
EE68 EE4B             (        forth.asm):02076                 fdb     MIN
EE6A C7               (        forth.asm):02077                 RFCS
EE6B BDE6D8           (        forth.asm):02078 (7)             jsr     NPOP
EE6E 1F10             (        forth.asm):02079 (4)             tfr     x,d
EE70 104D             (        forth.asm):02080 (2)             tstd
EE72 2A04             (        forth.asm):02081 (3)             bpl     @abs1
EE74 1040             (        forth.asm):02082 (2)             negd
EE76 1F01             (        forth.asm):02083 (4)             tfr     d,x
EE78 3610             (        forth.asm):02084         @abs1   UCNPUSH
EE7A 39               (        forth.asm):02085 (4)             rts
                      (        forth.asm):02086         
EE7B 06               (        forth.asm):02087         NEGATE  fcb     6               79-STANDARD (REQ177)
EE7C 4E4547415445     (        forth.asm):02088                 fcc     'NEGATE'
EE82 EE64             (        forth.asm):02089                 fdb     ABS
EE84 C7               (        forth.asm):02090                 RFCS
EE85 BDE38A           (        forth.asm):02091 (7)             jsr     MIN1PST         At least one cell needs to be stacked up
EE88 ECC4             (        forth.asm):02092 (5+0)           ldd     ,u
EE8A 1040             (        forth.asm):02093 (2)             negd
EE8C EDC4             (        forth.asm):02094 (5+0)           std     ,u
EE8E 39               (        forth.asm):02095 (4)             rts
                      (        forth.asm):02096         
EE8F C5               (        forth.asm):02097         BEGIN   fcb     $C5             79-STANDARD (REQ147)
EE90 424547494E       (        forth.asm):02098                 fcc     'BEGIN'
EE95 EE7B             (        forth.asm):02099                 fdb     NEGATE
EE97 C7               (        forth.asm):02100                 RFCS
EE98 9E08             (        forth.asm):02101 (4)             ldx     DICEND
EE9A 7EE6E7           (        forth.asm):02102 (3)             jmp     RPUSH
                      (        forth.asm):02103         
EE9D C5               (        forth.asm):02104         AGAIN   fcb     $C5             79-STANDARD (REF114)
EE9E 414741494E       (        forth.asm):02105                 fcc     'AGAIN'
EEA3 EE8F             (        forth.asm):02106                 fdb     BEGIN
EEA5 C7               (        forth.asm):02107                 RFCS
EEA6 BDE705           (        forth.asm):02108 (7)             jsr     RPOP
EEA9 1F12             (        forth.asm):02109 (4)             tfr     x,y
EEAB 9E08             (        forth.asm):02110 (4)             ldx     DICEND
EEAD 867E             (        forth.asm):02111 (2)             lda     #JMPOPC         JMP extended
EEAF A780             (        forth.asm):02112 (4+1)           sta     ,x+
EEB1 10AF81           (        forth.asm):02113 (6+2)           sty     ,x++
EEB4 9F08             (        forth.asm):02114 (4)             stx     DICEND
EEB6 8602             (        forth.asm):02115 (2)             lda     #2
EEB8 972C             (        forth.asm):02116 (3)             sta     RTSREMV         Trigger the RTS removal optimization
EEBA 39               (        forth.asm):02117 (4)             rts
                      (        forth.asm):02118         
                      (        forth.asm):02119         # The standard does not require this as being immediate but I do.
EEBB C4               (        forth.asm):02120         EXIT    fcb     $C4             79-STANDARD (REQ117)
EEBC 45584954         (        forth.asm):02121                 fcc     'EXIT'
EEC0 EE9D             (        forth.asm):02122                 fdb     AGAIN
EEC2 C7               (        forth.asm):02123                 RFCS
EEC3 9E08             (        forth.asm):02124 (4)             ldx     DICEND
EEC5 301D             (        forth.asm):02125 (4+1)           leax    -3,x
EEC7 109E14           (        forth.asm):02126 (5)             ldy     JSRLAST
EECA 103721           (        forth.asm):02127 (4)             cmpr    y,x
EECD 2605             (        forth.asm):02128 (3)             bne     @noopt          Tail JMP optimization is not possible
EECF 867E             (        forth.asm):02129 (2)             lda     #JMPOPC         JMP extended
EED1 A784             (        forth.asm):02130 (4+0)           sta     ,x
EED3 39               (        forth.asm):02131 (4)             rts
EED4 3003             (        forth.asm):02132 (4+1)   @noopt  leax    3,x             Point back to HERE
EED6 8639             (        forth.asm):02133 (2)             lda     #RTSOPC         RTS inherent
EED8 A780             (        forth.asm):02134 (4+1)           sta     ,x+
EEDA 9F08             (        forth.asm):02135 (4)             stx     DICEND
EEDC 39               (        forth.asm):02136 (4)             rts
                      (        forth.asm):02137         
EEDD C5               (        forth.asm):02138         UNTIL   fcb     $C5             79-STANDARD (REQ237)
EEDE 554E54494C       (        forth.asm):02139                 fcc     'UNTIL'
EEE3 EEBB             (        forth.asm):02140                 fdb     EXIT
EEE5 C7               (        forth.asm):02141                 RFCS
EEE6 109E08           (        forth.asm):02142 (5)             ldy     DICEND
EEE9 86BD             (        forth.asm):02143 (2)             lda     #JSROPC         JSR extended
EEEB 8EEC8C           (        forth.asm):02144 (3)             ldx     #IFEX
EEEE BDE139           (        forth.asm):02145 (7)             jsr     CHKRTS          Check if the final RTS can be omitted
EEF1 BDE485           (        forth.asm):02146 (7)             jsr     VARCON2
EEF4 8E2603           (        forth.asm):02147 (3)             ldx     #BNEOPC         Compile "BNE *+5"
EEF7 AFA1             (        forth.asm):02148 (5+2)           stx     ,y++
EEF9 867E             (        forth.asm):02149 (2)             lda     #JMPOPC         JMP extended
EEFB A7A0             (        forth.asm):02150 (4+1)           sta     ,y+
EEFD BDE705           (        forth.asm):02151 (7)             jsr     RPOP
EF00 AFA1             (        forth.asm):02152 (5+2)           stx     ,y++
EF02 109F08           (        forth.asm):02153 (5)             sty     DICEND
EF05 39               (        forth.asm):02154 (4)             rts
                      (        forth.asm):02155         
EF06 C3               (        forth.asm):02156         END     fcb     $C3             79-STANDARD (REF224)
EF07 454E44           (        forth.asm):02157                 fcc     'END'
EF0A EEDD             (        forth.asm):02158                 fdb     UNTIL
EF0C C7               (        forth.asm):02159                 RFCS
EF0D 20D7             (        forth.asm):02160                 RFXT    bra,UNTIL+8     XT for UNTIL
                      (        forth.asm):02161         
EF0F C5               (        forth.asm):02162         WHILE   fcb     $C5             79-STANDARD (REQ149)
EF10 5748494C45       (        forth.asm):02163                 fcc     'WHILE'
EF15 EF06             (        forth.asm):02164                 fdb     END
EF17 C7               (        forth.asm):02165                 RFCS
EF18 7EEC6A           (        forth.asm):02166                 RFXT    jmp,IF+5        XT for IF
                      (        forth.asm):02167         
EF1B C6               (        forth.asm):02168         REPEAT  fcb     $C6             79-STANDARD (REQ120)
EF1C 524550454154     (        forth.asm):02169                 fcc     'REPEAT'
EF22 EF0F             (        forth.asm):02170                 fdb     WHILE
EF24 C7               (        forth.asm):02171                 RFCS
EF25 BDE705           (        forth.asm):02172 (7)             jsr     RPOP
EF28 3410             (        forth.asm):02173 (4+2)           pshs    x
EF2A BDE705           (        forth.asm):02174 (7)             jsr     RPOP
EF2D 109E08           (        forth.asm):02175 (5)             ldy     DICEND
EF30 867E             (        forth.asm):02176 (2)             lda     #JMPOPC         JMP extended
EF32 BDE485           (        forth.asm):02177 (7)             jsr     VARCON2
EF35 3510             (        forth.asm):02178 (4+2)           puls    x
EF37 10AF84           (        forth.asm):02179 (6+0)           sty     ,x
EF3A 109F08           (        forth.asm):02180 (5)             sty     DICEND
EF3D 39               (        forth.asm):02181 (4)             rts
                      (        forth.asm):02182         
EF3E 42               (        forth.asm):02183         RFROM   fcb     $42             79-STANDARD (REQ110)
EF3F 523E             (        forth.asm):02184                 fcc     'R>'
EF41 EF1B             (        forth.asm):02185                 fdb     REPEAT
EF43 C7               (        forth.asm):02186                 RFCS
EF44 BDE705           (        forth.asm):02187 (7)             jsr     RPOP
EF47 7EE6CA           (        forth.asm):02188 (3)             jmp     NPUSH
                      (        forth.asm):02189         
EF4A 42               (        forth.asm):02190         TOR     fcb     $42             79-STANDARD (REQ200)
EF4B 3E52             (        forth.asm):02191                 fcc     '>R'
EF4D EF3E             (        forth.asm):02192                 fdb     RFROM
EF4F C7               (        forth.asm):02193                 RFCS
EF50 BDE6D8           (        forth.asm):02194 (7)             jsr     NPOP
EF53 7EE6E7           (        forth.asm):02195 (3)             jmp     RPUSH
                      (        forth.asm):02196         
EF56 45               (        forth.asm):02197         LEAVE   fcb     $45             79-STANDARD (REQ213)
EF57 4C45415645       (        forth.asm):02198                 fcc     'LEAVE'
EF5C EF4A             (        forth.asm):02199                 fdb     TOR
EF5E C7               (        forth.asm):02200                 RFCS
EF5F BDE705           (        forth.asm):02201 (7)             jsr     RPOP
EF62 BDE705           (        forth.asm):02202 (7)             jsr     RPOP
EF65 BDE6E7           (        forth.asm):02203 (7)             jsr     RPUSH
EF68 7EE6E7           (        forth.asm):02204 (3)             jmp     RPUSH
                      (        forth.asm):02205         
EF6B 41               (        forth.asm):02206         INDI    fcb     $41             79-STANDARD (REQ136)
EF6C 49               (        forth.asm):02207                 fcc     'I'
EF6D EF56             (        forth.asm):02208                 fdb     LEAVE
EF6F C7               (        forth.asm):02209                 RFCS
EF70 C601             (        forth.asm):02210 (2)             ldb     #1              1 means top of the stack
EF72 962A             (        forth.asm):02211 (3)     RPICKN  lda     RDEPTH
EF74 103798           (        forth.asm):02212 (4)             cmpr    b,a
EF77 250A             (        forth.asm):02213 (3)             bcs     @rpick1
EF79 9E00             (        forth.asm):02214 (4)             ldx     RSP
EF7B 5A               (        forth.asm):02215 (1)             decb                    Minus 1, unlike in the Z80 implementation
EF7C 58               (        forth.asm):02216 (1)             lslb                    Times 2
EF7D 3A               (        forth.asm):02217 (1)             abx
EF7E AE84             (        forth.asm):02218 (5+0)           ldx     ,x
EF80 7EE6CA           (        forth.asm):02219 (3)             jmp     NPUSH
EF83 C608             (        forth.asm):02220 (2)     @rpick1 ldb     #8              Return stack underflow
EF85 BDE650           (        forth.asm):02221 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02222         
EF88 42               (        forth.asm):02223         RFETCH  fcb     $42             79-STANDARD (REQ228)
EF89 5240             (        forth.asm):02224                 fcc     'R@'
EF8B EF6B             (        forth.asm):02225                 fdb     INDI
EF8D C7               (        forth.asm):02226                 RFCS
EF8E 20E0             (        forth.asm):02227                 RFXT    bra,INDI+4      XT for I
                      (        forth.asm):02228         
EF90 42               (        forth.asm):02229         INDIP   fcb     $42             79-STANDARD (REF)
EF91 4927             (        forth.asm):02230                 fdb     $4927
EF93 EF88             (        forth.asm):02231                 fdb     RFETCH
EF95 C7               (        forth.asm):02232                 RFCS
EF96 C602             (        forth.asm):02233 (2)             ldb     #2
EF98 20D8             (        forth.asm):02234 (3)             bra     RPICKN
                      (        forth.asm):02235         
EF9A 41               (        forth.asm):02236         INDJ    fcb     $41             79-STANDARD (REQ225)
EF9B 4A               (        forth.asm):02237                 fcc     'J'
EF9C EF90             (        forth.asm):02238                 fdb     INDIP
EF9E C7               (        forth.asm):02239                 RFCS
EF9F C603             (        forth.asm):02240 (2)             ldb     #3
EFA1 20CF             (        forth.asm):02241 (3)             bra     RPICKN
                      (        forth.asm):02242         
EFA3 42               (        forth.asm):02243         INDJP   fcb     $42             Non-standard
EFA4 4A27             (        forth.asm):02244                 fdb     $4A27
EFA6 EF9A             (        forth.asm):02245                 fdb     INDJ
EFA8 C7               (        forth.asm):02246                 RFCS
EFA9 C604             (        forth.asm):02247 (2)             ldb     #4
EFAB 20C5             (        forth.asm):02248 (3)             bra     RPICKN
                      (        forth.asm):02249         
EFAD 41               (        forth.asm):02250         INDK    fcb     $41             79-STANDARD (REF)
EFAE 4B               (        forth.asm):02251                 fcc     'K'
EFAF EFA3             (        forth.asm):02252                 fdb     INDJP
EFB1 C7               (        forth.asm):02253                 RFCS
EFB2 C605             (        forth.asm):02254 (2)             ldb     #5
EFB4 20BC             (        forth.asm):02255 (3)             bra     RPICKN
                      (        forth.asm):02256         
EFB6 04               (        forth.asm):02257         QUIT    fcb     4               79-STANDARD (REQ211)
EFB7 51554954         (        forth.asm):02258                 fcc     'QUIT'
EFBB EFAD             (        forth.asm):02259                 fdb     INDK
EFBD C7               (        forth.asm):02260                 RFCS
EFBE 0F21             (        forth.asm):02261 (5)             clr     USTATE+1
EFC0 BDEA33           (        forth.asm):02262                 RFXT    jsr,RCLR+7      XT for RCLR
EFC3 10CE8000         (        forth.asm):02263 (4)             lds     #RAMSTRT+RAMSIZE Reset the system stack pointer
EFC7 BDE1E7           (        forth.asm):02264 (7)             jsr     PUTCR
EFCA 7EE0A7           (        forth.asm):02265 (3)             jmp     INTERP
                      (        forth.asm):02266         
EFCD 05               (        forth.asm):02267         ABORT   fcb     5               79-STANDARD (REQ101)
EFCE 41424F5254       (        forth.asm):02268                 fcc     'ABORT'
EFD3 EFB6             (        forth.asm):02269                 fdb     QUIT
EFD5 C7               (        forth.asm):02270                 RFCS
EFD6 BDEA27           (        forth.asm):02271                 RFXT    jsr,NCLR+7      XT for NCLR
EFD9 BDEA33           (        forth.asm):02272                 RFXT    jsr,RCLR+7      XT for RCLR
EFDC C603             (        forth.asm):02273 (2)             ldb     #3
EFDE BDE650           (        forth.asm):02274 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02275         
EFE1 04               (        forth.asm):02276         FIND    fcb     4               79-STANDARD (REQ203)
EFE2 46494E44         (        forth.asm):02277                 fcc     'FIND'          ( -- XT )
EFE6 EFCD             (        forth.asm):02278                 fdb     ABORT
EFE8 C7               (        forth.asm):02279                 RFCS
EFE9 1FC2             (        forth.asm):02280 (4)             tfr     0,y             Default return value is zero
EFEB BDE71E           (        forth.asm):02281 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
EFEE 6D84             (        forth.asm):02282 (5+0)           tst     ,x
EFF0 2712             (        forth.asm):02283 (3)             beq     @find1
EFF2 BDE27F           (        forth.asm):02284 (7)             jsr     SCNSTOK
EFF5 270D             (        forth.asm):02285 (3)             beq     @find1
EFF7 BDE39E           (        forth.asm):02286 (7)             jsr     SWDIC
EFFA DC0E             (        forth.asm):02287 (4)             ldd     PLOAD           Retrieve word payload
EFFC DD10             (        forth.asm):02288 (4)             std     FNDPLD          Make it accessible through PAYLOAD
EFFE DC04             (        forth.asm):02289 (4)             ldd     TOKENEP
F000 931C             (        forth.asm):02290 (4)             subd    BSBFADR
F002 DD22             (        forth.asm):02291 (4)             std     UTOIN           Derive >IN from TOKENEP
F004 1F21             (        forth.asm):02292 (4)     @find1  tfr     y,x
F006 7EE6CA           (        forth.asm):02293 (3)             jmp     NPUSH
                      (        forth.asm):02294         
F009 01               (        forth.asm):02295         RBRACK  fcb     1               79-STANDARD (REQ126)
F00A 5D               (        forth.asm):02296                 fcc     ']'
F00B EFE1             (        forth.asm):02297                 fdb     FIND
F00D C7               (        forth.asm):02298                 RFCS
F00E 8601             (        forth.asm):02299 (2)             lda     #1
F010 9721             (        forth.asm):02300 (3)             sta     USTATE+1
F012 39               (        forth.asm):02301 (4)             rts
                      (        forth.asm):02302         
                      (        forth.asm):02303         * Note: the standard does not mandate that this primitive be executed in
                      (        forth.asm):02304         * definitions only. IMHO, it ought to, therefore I am forcing the C bit here.
F013 C1               (        forth.asm):02305         LBRACK  fcb     $C1             79-STANDARD (REQ125)
F014 5B               (        forth.asm):02306                 fcc     '['
F015 F009             (        forth.asm):02307                 fdb     RBRACK
F017 C7               (        forth.asm):02308                 RFCS
F018 0F21             (        forth.asm):02309 (5)             clr     USTATE+1
F01A 39               (        forth.asm):02310 (4)             rts
                      (        forth.asm):02311         
                      (        forth.asm):02312         * Functionally: : ['] FIND POSTPONE LITERAL ; IMMEDIATE RESTRICT
F01B C3               (        forth.asm):02313         BKQUOT  fcb     $C3             ANSI (Core)
F01C 5B275D           (        forth.asm):02314                 fcb     $5B,$27,$5D
F01F F013             (        forth.asm):02315                 fdb     LBRACK
F021 C7               (        forth.asm):02316                 RFCS
F022 8DC5             (        forth.asm):02317                 RFXT    bsr,FIND+7      XT for FIND
                      (        forth.asm):02318         * Data stack topmost cell has the target word address.
F024 7EEAB3           (        forth.asm):02319                 RFXT    jmp,LITERAL+10  XT for LITERAL
                      (        forth.asm):02320         
F027 C8               (        forth.asm):02321         POSTPON fcb     $C8             ANSI (Core)
F028 504F5354504F4E45 (        forth.asm):02322                 fcc     'POSTPONE'      Not a straight alias to [COMPILE]
F030 F01B             (        forth.asm):02323                 fdb     BKQUOT          Non-immediate words deserve special treatment
F032 C7               (        forth.asm):02324                 RFCS
F033 BDE71E           (        forth.asm):02325 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
F036 6D84             (        forth.asm):02326 (5+0)           tst     ,x
F038 2605             (        forth.asm):02327 (3)             bne     @postp2
F03A C605             (        forth.asm):02328 (2)     @postp1 ldb     #5              Missing word name
F03C BDE650           (        forth.asm):02329 (7)             jsr     ERRHDLR         No return
F03F BDE27F           (        forth.asm):02330 (7)     @postp2 jsr     SCNSTOK
F042 27F6             (        forth.asm):02331 (3)             beq     @postp1
F044 BDE39E           (        forth.asm):02332 (7)             jsr     SWDIC
F047 2607             (        forth.asm):02333 (3)             bne     @postp3         Word found. Code address returned in Y
F049 9E02             (        forth.asm):02334 (4)             ldx     TOKENSP
F04B C602             (        forth.asm):02335 (2)             ldb     #2              Undefined (X points to the offending word)
F04D BDE650           (        forth.asm):02336 (7)             jsr     ERRHDLR         No return
F050 1F21             (        forth.asm):02337 (4)     @postp3 tfr     y,x             X has the actual execution token
F052 0D34             (        forth.asm):02338 (4)             tst     IMDFLG
F054 270A             (        forth.asm):02339 (3)             beq     @postp5         Target word is not immediate
F056 BDE14D           (        forth.asm):02340 (7)     @postp4 jsr     EMXASXT         Set as action component
F059 DC02             (        forth.asm):02341 (4)             ldd     TOKENSP         Updated by SWDIC if the word was found
F05B 931C             (        forth.asm):02342 (4)             subd    BSBFADR
F05D DD22             (        forth.asm):02343 (4)             std     UTOIN
F05F 39               (        forth.asm):02344 (4)             rts
                      (        forth.asm):02345         * The word being considered is non-immediate. The equivalent input should be:
                      (        forth.asm):02346         * ['] <word> COMPILE, We have the XT for <word> in X.
F060 BDE46E           (        forth.asm):02347 (7)     @postp5 jsr     LITER
F063 8EF074           (        forth.asm):02348                 RFXT    ldx,#CMPCOMA+11
F066 20EE             (        forth.asm):02349 (3)             bra     @postp4
                      (        forth.asm):02350         
                      (        forth.asm):02351         * Like the 79-STANDARD COMPILE word, GNU Forth has this as a compile-only word.
                      (        forth.asm):02352         * This is a wise choice since it allows us to possibly optimize it.
F068 48               (        forth.asm):02353         CMPCOMA fcb     $48             ANSI (Core Ext)
F069 434F4D50494C452C (        forth.asm):02354                 fcc     'COMPILE,'      ( XT -- )
F071 F027             (        forth.asm):02355                 fdb     POSTPON
F073 C7               (        forth.asm):02356                 RFCS
F074 BDE6D8           (        forth.asm):02357 (7)             jsr     NPOP            Execution token to X
F077 7EE14D           (        forth.asm):02358 (3)     CMPCOM1 jmp     EMXASXT
                      (        forth.asm):02359         
                      (        forth.asm):02360         * As per the standard, : is not immediate. This allows for further interesting
                      (        forth.asm):02361         * developments, like tracing words execution...
F07A 01               (        forth.asm):02362         COMPC   fcb     $1              79-STANDARD (REQ116)
F07B 3A               (        forth.asm):02363                 fcc     ':'
F07C F068             (        forth.asm):02364                 fdb     CMPCOMA
F07E C7               (        forth.asm):02365                 RFCS
F07F 8601             (        forth.asm):02366 (2)             lda     #1
F081 9721             (        forth.asm):02367 (3)             sta     USTATE+1
F083 104F             (        forth.asm):02368 (2)             clrd
F085 DD14             (        forth.asm):02369 (4)             std     JSRLAST
F087 8602             (        forth.asm):02370 (2)             lda     #2
F089 972C             (        forth.asm):02371 (3)             sta     RTSREMV         Optimistic strategy: remove the final RTS
F08B 962A             (        forth.asm):02372 (3)             lda     RDEPTH
F08D 972B             (        forth.asm):02373 (3)             sta     IRDPTH          Meant to check for unbalanced constructs
F08F 7EE40C           (        forth.asm):02374 (3)             jmp     LOCWRT
                      (        forth.asm):02375         
F092 C1               (        forth.asm):02376         COMPR   fcb     $C1             79-STANDARD (REQ196)
F093 3B               (        forth.asm):02377                 fcc     ';'
F094 F07A             (        forth.asm):02378                 fdb     COMPC
F096 C7               (        forth.asm):02379                 RFCS
F097 962A             (        forth.asm):02380 (3)             lda     RDEPTH          Return stack depth
F099 912B             (        forth.asm):02381 (3)             cmpa    IRDPTH          Same as when : was entered?
F09B 2705             (        forth.asm):02382 (3)             beq     @compr1
F09D C609             (        forth.asm):02383 (2)             ldb     #9              Illegal construct if not
F09F BDE650           (        forth.asm):02384 (7)             jsr     ERRHDLR         No return
F0A2 0F21             (        forth.asm):02385 (5)     @compr1 clr     USTATE+1        Back to interpretation mode
F0A4 9E0C             (        forth.asm):02386 (4)             ldx     BDICEND
F0A6 9F06             (        forth.asm):02387 (4)             stx     LSTWAD          Update LAST
F0A8 9E08             (        forth.asm):02388 (4)             ldx     DICEND
                      (        forth.asm):02389         * Optimization: replace the last JSR by a JMP, if possible.
F0AA DC14             (        forth.asm):02390 (4)             ldd     JSRLAST
F0AC 2712             (        forth.asm):02391 (3)             beq     @compr3         We need an RTS
F0AE 301D             (        forth.asm):02392 (4+1)           leax    -3,x
F0B0 9C14             (        forth.asm):02393 (4)             cmpx    JSRLAST
F0B2 2604             (        forth.asm):02394 (3)             bne     @compr2
F0B4 867E             (        forth.asm):02395 (2)             lda     #JMPOPC         JMP extended
F0B6 A784             (        forth.asm):02396 (4+0)           sta     ,x
                      (        forth.asm):02397         * At this point we still have to emit an RTS unless RTSREMV is 2 or more.
F0B8 3003             (        forth.asm):02398 (4+1)   @compr2 leax    3,x
F0BA 962C             (        forth.asm):02399 (3)             lda     RTSREMV
F0BC 8102             (        forth.asm):02400 (2)             cmpa    #2
F0BE 2404             (        forth.asm):02401 (3)             bhs     @compr4         Optimization applies. We have no forward refs
F0C0 8639             (        forth.asm):02402 (2)     @compr3 lda     #RTSOPC         RTS inherent
F0C2 A780             (        forth.asm):02403 (4+1)           sta     ,x+
F0C4                  (        forth.asm):02404         @compr4
                      (        forth.asm):02405                 IFNE    DEBUG
                      (        forth.asm):02406                 lda     #ILLOPC         Illegal opcode
                      (        forth.asm):02407                 sta     ,x+
                      (        forth.asm):02408                 ENDC
F0C4 9F08             (        forth.asm):02409 (4)             stx     DICEND          Update HERE
                      (        forth.asm):02410                 IFNE    RELFEAT
F0C6 BDEB47           (        forth.asm):02411                 RFXT    jsr,MONITOR+10  XT for MONITOR. All : words are candidates
                      (        forth.asm):02412         *                               for integrity check by ICHECK.
                      (        forth.asm):02413                 ENDC
F0C9 39               (        forth.asm):02414 (4)             rts
                      (        forth.asm):02415         
F0CA C7               (        forth.asm):02416         RECURSE fcb     $C7             FORTH-83
F0CB 52454355525345   (        forth.asm):02417                 fcc     'RECURSE'
F0D2 F092             (        forth.asm):02418                 fdb     COMPR
F0D4 C7               (        forth.asm):02419                 RFCS
F0D5 9E12             (        forth.asm):02420 (4)             ldx     RECADDR         Set up by LOCWRT
F0D7 7EE14D           (        forth.asm):02421 (3)             jmp     EMXASXT         Set as action component
                      (        forth.asm):02422         
F0DA 06               (        forth.asm):02423         FORGET  fcb     6               79-STANDARD (REQ196)
F0DB 464F52474554     (        forth.asm):02424                 fcc     'FORGET'
F0E1 F0CA             (        forth.asm):02425                 fdb     RECURSE
F0E3 C7               (        forth.asm):02426                 RFCS
F0E4 BDE71E           (        forth.asm):02427 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
F0E7 6D84             (        forth.asm):02428 (5+0)           tst     ,x              EOL?
F0E9 2605             (        forth.asm):02429 (3)             bne     @frgt2          No
F0EB C605             (        forth.asm):02430 (2)     @frgt1  ldb     #5              Missing word name
F0ED BDE650           (        forth.asm):02431 (7)             jsr     ERRHDLR         No return
F0F0 BDE27F           (        forth.asm):02432 (7)     @frgt2  jsr     SCNSTOK
F0F3 27F6             (        forth.asm):02433 (3)             beq     @frgt1          EOL before a non-SP character could be acquired
F0F5 BDE39E           (        forth.asm):02434 (7)             jsr     SWDIC           SWDIC uses TOKENSP as input--not X!!
F0F8 2607             (        forth.asm):02435 (3)             bne     @frgt3          Word found. XT returned in Y
F0FA 9E02             (        forth.asm):02436 (4)             ldx     TOKENSP
F0FC C602             (        forth.asm):02437 (2)             ldb     #2              Undefined (X points to the offending word)
F0FE BDE650           (        forth.asm):02438 (7)             jsr     ERRHDLR         No return
F101 1F21             (        forth.asm):02439 (4)     @frgt3  tfr     y,x             Y and X have the word's XT
F103 108C0C15         (        forth.asm):02440 (4)             cmpy    #RAMFTCH
F107 271B             (        forth.asm):02441 (3)             beq     @frgt4
F109 108CE000         (        forth.asm):02442 (4)             cmpy    #ROMSTRT
F10D 2415             (        forth.asm):02443 (3)             bhs     @frgt4
                      (        forth.asm):02444                 IFNE    RELFEAT
F10F AE1D             (        forth.asm):02445 (5+1)           ldx     -3,x            Backlink to X
F111 9F06             (        forth.asm):02446 (4)             stx     LSTWAD          Update LAST
F113 303C             (        forth.asm):02447 (4+1)           leax    -4,y            XT-4 to X (1B/attr, 2B/backlink, 1B/checksum)
                      (        forth.asm):02448                 ELSE
                      (        forth.asm):02449                 ldx     -2,x            Backlink to X
                      (        forth.asm):02450                 stx     LSTWAD          Update LAST
                      (        forth.asm):02451                 leax    -3,y            XT-3 to X (1B/attr, 2B/backlink)
                      (        forth.asm):02452                 ENDC
F115 4F               (        forth.asm):02453 (1)             clra
F116 D633             (        forth.asm):02454 (3)             ldb     CURTOKL         Token name length to D
F118 103201           (        forth.asm):02455 (4)             subr    d,x             Substract word length
F11B 9F08             (        forth.asm):02456 (4)             stx     DICEND          Update HERE
F11D DC02             (        forth.asm):02457 (4)             ldd     TOKENSP         Set by SWDIC to point to the end of the token
F11F 931C             (        forth.asm):02458 (4)             subd    BSBFADR
F121 DD22             (        forth.asm):02459 (4)             std     UTOIN           Derive >IN from TOKENSP
F123 39               (        forth.asm):02460 (4)             rts
F124 C60B             (        forth.asm):02461 (2)     @frgt4  ldb     #11             Word is unforgettable
F126 BDE650           (        forth.asm):02462 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02463         
F129 07               (        forth.asm):02464         EXCT    fcb     7               79-STANDARD (REQ163)
F12A 45584543555445   (        forth.asm):02465                 fcc     'EXECUTE'
F131 F0DA             (        forth.asm):02466                 fdb     FORGET
F133 C7               (        forth.asm):02467                 RFCS
F134 BDE6D8           (        forth.asm):02468 (7)             jsr     NPOP
F137 1037C1           (        forth.asm):02469 (4)             cmpr    0,x             Although the standard does not specify that
F13A 2702             (        forth.asm):02470 (3)             beq     @exct1          a NUL address should trigger an error, I do
F13C 1F15             (        forth.asm):02471 (4)             tfr     x,pc
F13E C60D             (        forth.asm):02472 (2)     @exct1  ldb     #13             Illegal argument
F140 BDE650           (        forth.asm):02473 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02474         
F143 03               (        forth.asm):02475         BYE     fcb     3               Non-standard
F144 425945           (        forth.asm):02476                 fcc     'BYE'
F147 F129             (        forth.asm):02477                 fdb     EXCT
F149 C7               (        forth.asm):02478                 RFCS
F14A 7EE037           (        forth.asm):02479 (3)             jmp     RSTHDL
                      (        forth.asm):02480         
F14D C6               (        forth.asm):02481         BKCHAR  fcb     $C6             ANSI (Core)
F14E 5B434841525D     (        forth.asm):02482                 fcc     '[CHAR]'
F154 F143             (        forth.asm):02483                 fdb     BYE
F156 C7               (        forth.asm):02484                 RFCS
F157 8D0B             (        forth.asm):02485                 RFXT    bsr,CHAR+7      XT for CHAR
F159 7EEAB3           (        forth.asm):02486                 RFXT    jmp,LITERAL+10  XT for LITERAL
                      (        forth.asm):02487         
F15C 04               (        forth.asm):02488         CHAR    fcb     4               ANSI (Core)
F15D 43484152         (        forth.asm):02489                 fcc     'CHAR'
F161 F14D             (        forth.asm):02490                 fdb     BKCHAR
F163 C7               (        forth.asm):02491                 RFCS
F164 BDE71E           (        forth.asm):02492 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
F167 BDE27F           (        forth.asm):02493 (7)     @char1  jsr     SCNSTOK         X points to the beginning of the character
F16A 2714             (        forth.asm):02494 (3)             beq     @chrerr
F16C E684             (        forth.asm):02495 (4+0)           ldb     ,x
F16E 4F               (        forth.asm):02496 (1)             clra
F16F 1F01             (        forth.asm):02497 (4)             tfr     d,x
F171 BDE6CA           (        forth.asm):02498 (7)             jsr     NPUSH
F174 9E02             (        forth.asm):02499 (4)             ldx     TOKENSP         Set by SCNSTOK
F176 BDE28D           (        forth.asm):02500 (7)             jsr     SCNETOK
F179 1F10             (        forth.asm):02501 (4)             tfr     x,d             TOKENEP
F17B 931C             (        forth.asm):02502 (4)             subd    BSBFADR
F17D DD22             (        forth.asm):02503 (4)             std     UTOIN           Derive >IN from TOKENEP
F17F 39               (        forth.asm):02504 (4)             rts
F180 C60D             (        forth.asm):02505 (2)     @chrerr ldb     #13             Illegal argument
F182 BDE650           (        forth.asm):02506 (7)             jsr     ERRHDLR
                      (        forth.asm):02507         * No return.
                      (        forth.asm):02508         
                      (        forth.asm):02509         * Hairy code but working.
F185 04               (        forth.asm):02510         WORD    fcb     4               79-STANDARD (REQ181)
F186 574F5244         (        forth.asm):02511                 fcc     'WORD'          ( char -- addr )
F18A F15C             (        forth.asm):02512                 fdb     CHAR
F18C C7               (        forth.asm):02513                 RFCS
F18D BDE6D8           (        forth.asm):02514 (7)             jsr     NPOP
F190 1F16             (        forth.asm):02515 (4)             tfr     x,w             F has the delimiter ASCII code
F192 109E08           (        forth.asm):02516 (5)             ldy     DICEND          The counted string returned is stored at HERE
F195 3420             (        forth.asm):02517 (4+2)           pshs    y
F197 6FA0             (        forth.asm):02518 (6+1)           clr     ,y+             Initialize its length
F199 BDE71E           (        forth.asm):02519 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
F19C 6D84             (        forth.asm):02520 (5+0)           tst     ,x              EOL reached?
F19E 2605             (        forth.asm):02521 (3)             bne     @word1          No, proceed
F1A0 3510             (        forth.asm):02522 (4+2)   @word0  puls    x
F1A2 3610             (        forth.asm):02523                 UCNPUSH                 Push back HERE
F1A4 39               (        forth.asm):02524 (4)             rts
F1A5 3001             (        forth.asm):02525 (4+1)   @word1  leax    1,x             Skip space character after WORD or leading delim
F1A7 A684             (        forth.asm):02526 (4+0)           lda     ,x
F1A9 2716             (        forth.asm):02527 (3)             beq     @word5          EOL reached, this is the end
F1AB 1037F8           (        forth.asm):02528 (4)             cmpr    f,a             Leading delimiter matched?
F1AE 27F5             (        forth.asm):02529 (3)             beq     @word1          Yes
F1B0 A680             (        forth.asm):02530 (4+1)   @word2  lda     ,x+             Acquire next character from the input stream
F1B2 A7A0             (        forth.asm):02531 (4+1)   @word3  sta     ,y+
F1B4 2709             (        forth.asm):02532 (3)             beq     @word4          EOL reached
F1B6 1037F8           (        forth.asm):02533 (4)             cmpr    f,a             Trailing delimiter?
F1B9 2706             (        forth.asm):02534 (3)             beq     @word5
F1BB 6CF4             (        forth.asm):02535 (6+3)           inc     [,s]            Increment string length
F1BD 20F1             (        forth.asm):02536 (3)             bra     @word2
F1BF 301F             (        forth.asm):02537 (4+1)   @word4  leax    -1,x            EOL reached
F1C1 1F10             (        forth.asm):02538 (4)     @word5  tfr     x,d             Pointing one char after the delimiter or to NUL
F1C3 931C             (        forth.asm):02539 (4)             subd    BSBFADR
F1C5 DD22             (        forth.asm):02540 (4)             std     UTOIN
F1C7 20D7             (        forth.asm):02541 (3)             bra     @word0
                      (        forth.asm):02542         
F1C9 81               (        forth.asm):02543         LPAR    fcb     $81             79-STANDARD (REQ122)
F1CA 28               (        forth.asm):02544                 fcc     '('
F1CB F185             (        forth.asm):02545                 fdb     WORD
F1CD C7               (        forth.asm):02546                 RFCS
F1CE BDE71E           (        forth.asm):02547 (7)             jsr     BKIN2PT         Derive input stream pointer from BLK, >IN
F1D1 A680             (        forth.asm):02548 (4+1)   @lpar1  lda     ,x+
F1D3 270B             (        forth.asm):02549 (3)             beq     @lparx          Input stream exhausted before ) is matched
F1D5 8129             (        forth.asm):02550 (2)             cmpa    #')
F1D7 26F8             (        forth.asm):02551 (3)             bne     @lpar1
F1D9 1F10             (        forth.asm):02552 (4)             tfr     x,d             Just matched )
F1DB 931C             (        forth.asm):02553 (4)             subd    BSBFADR
F1DD DD22             (        forth.asm):02554 (4)             std     UTOIN           Update >IN
F1DF 39               (        forth.asm):02555 (4)             rts
F1E0 C60C             (        forth.asm):02556 (2)     @lparx  ldb     #12             Missing delimiter
F1E2 BDE650           (        forth.asm):02557 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):02558         
F1E5 06               (        forth.asm):02559         SOURCE  fcb     6               ANSI (Core)
F1E6 534F55524345     (        forth.asm):02560                 fcc     'SOURCE'        ( -- baseaddr charcount )
F1EC F1C9             (        forth.asm):02561                 fdb     LPAR
F1EE C7               (        forth.asm):02562                 RFCS
F1EF 9E1C             (        forth.asm):02563 (4)             ldx     BSBFADR
F1F1 BDE6CA           (        forth.asm):02564 (7)             jsr     NPUSH
F1F4 8E0400           (        forth.asm):02565 (3)             ldx     #BLKSIZ         Non-zero block size
F1F7 DC24             (        forth.asm):02566 (4)             ldd     UBLK
F1F9 2605             (        forth.asm):02567 (3)             bne     @srcdon         Current BLK is NZ
F1FB 4F               (        forth.asm):02568 (1)             clra
F1FC D629             (        forth.asm):02569 (3)             ldb     CMDLNSZ         Character count entered through GETS in INTERP
F1FE 1F01             (        forth.asm):02570 (4)             tfr     d,x
F200 7EE6CA           (        forth.asm):02571 (3)     @srcdon jmp     NPUSH
                      (        forth.asm):02572         
                      (        forth.asm):02573         * This is a straightforward implementation borrowed from GNU Forth 'see \':
                      (        forth.asm):02574         * : \
                      (        forth.asm):02575         *   BLK @
                      (        forth.asm):02576         *   IF     >IN @ C/L / 1+ C/L * >IN ! EXIT
                      (        forth.asm):02577         *   THEN
                      (        forth.asm):02578         *   SOURCE >IN ! DROP ; IMMEDIATE
                      (        forth.asm):02579         * However since C/L (number of columns per line) is 64 (a power of 2), things
                      (        forth.asm):02580         * can be coded in a more compact manner as: >IN @ 63 COM AND 64 + >IN !
F203 81               (        forth.asm):02581         BKSLSH  fcb     $81             ANSI (Block Ext)
F204 5C               (        forth.asm):02582                 fcb     $5C             \ ( -- )
F205 F1E5             (        forth.asm):02583                 fdb     SOURCE
F207 C7               (        forth.asm):02584                 RFCS
F208 DC24             (        forth.asm):02585 (4)             ldd     UBLK            BLK @ to D
F20A 270B             (        forth.asm):02586 (3)             beq     @comser         We operate from block 0: the console
F20C DC22             (        forth.asm):02587 (4)             ldd     UTOIN           >IN @
F20E C4C0             (        forth.asm):02588 (2)             andb    #^$3F           Point to the beginning of the line
F210 CB40             (        forth.asm):02589 (2)             addb    #$40            next line
F212 8900             (        forth.asm):02590 (2)             adca    #0              Propagate potential carry from LSB
F214 DD22             (        forth.asm):02591 (4)             std     UTOIN           >IN !
F216 39               (        forth.asm):02592 (4)             rts                     EXIT
F217 8DD6             (        forth.asm):02593         @comser RFXT    bsr,SOURCE+9    XT for SOURCE
F219 BDE6D8           (        forth.asm):02594 (7)             jsr     NPOP
F21C 9F22             (        forth.asm):02595 (4)             stx     UTOIN           >IN !
F21E 7EFBD6           (        forth.asm):02596                 RFXT    jmp,DROP+7      XT for DROP
                      (        forth.asm):02597                 ENDC
                      (        forth.asm):02598         
F221 82               (        forth.asm):02599         PSTR    fcb     $82             79-STANDARD (REQ133)
F222 2E22             (        forth.asm):02600                 fcc     '."'
F224 F203             (        forth.asm):02601                 fdb     BKSLSH
F226 C7               (        forth.asm):02602                 RFCS
F227 8D13             (        forth.asm):02603                 RFXT    bsr,SQUOTE+5    XT for S"
F229 0D21             (        forth.asm):02604 (4)             tst     USTATE+1
F22B 2603             (        forth.asm):02605 (3)             bne     @pstcmp
F22D 7EF5C8           (        forth.asm):02606                 RFXT    jmp,TYPE+7
F230 8EF5C8           (        forth.asm):02607         @pstcmp RFXT    ldx,#TYPE+7
F233 7EE14D           (        forth.asm):02608 (3)             jmp     EMXASXT
                      (        forth.asm):02609         
F236 82               (        forth.asm):02610         SQUOTE  fcb     $82             ANSI (Core)
F237 5322             (        forth.asm):02611                 fcc     'S"'
F239 F221             (        forth.asm):02612                 fdb     PSTR
F23B C7               (        forth.asm):02613                 RFCS
F23C 0D21             (        forth.asm):02614 (4)             tst     USTATE+1
F23E 260C             (        forth.asm):02615 (3)             bne     @sqcmp
F240 8E0022           (        forth.asm):02616 (3)             ldx     #'"             We are inperpreting
F243 BDE6CA           (        forth.asm):02617 (7)             jsr     NPUSH
F246 BDF18D           (        forth.asm):02618                 RFXT    jsr,WORD+7      XT for WORD
F249 7EF5E7           (        forth.asm):02619                 RFXT    jmp,COUNT+8     XT for COUNT
F24C 109E08           (        forth.asm):02620 (5)     @sqcmp  ldy     DICEND          We are compiling
F24F 867E             (        forth.asm):02621 (2)             lda     #JMPOPC         JMP extended
F251 A7A0             (        forth.asm):02622 (4+1)           sta     ,y+
F253 3420             (        forth.asm):02623 (4+2)           pshs    y
F255 3122             (        forth.asm):02624 (4+1)           leay    2,y             2 ALLOT
F257 109F08           (        forth.asm):02625 (5)             sty     DICEND
F25A 8E0022           (        forth.asm):02626 (3)             ldx     #'"
F25D BDE6CA           (        forth.asm):02627 (7)             jsr     NPUSH
F260 BDF18D           (        forth.asm):02628                 RFXT    jsr,WORD+7      XT for WORD
F263 BDE6D8           (        forth.asm):02629 (7)             jsr     NPOP
F266 4F               (        forth.asm):02630 (1)             clra
F267 E684             (        forth.asm):02631 (4+0)           ldb     ,x              C@
F269 3001             (        forth.asm):02632 (4+1)           leax    1,x             1+. Skip the byte count (X has HERE)
F26B 308B             (        forth.asm):02633 (4+2)           leax    d,x             Skip string length material
F26D 3520             (        forth.asm):02634 (4+2)           puls    y
F26F AFA4             (        forth.asm):02635 (5+0)           stx     ,y              Install jump address
F271 3122             (        forth.asm):02636 (4+1)           leay    2,y             Counted string base address to Y
F273 868E             (        forth.asm):02637 (2)             lda     #LDXOPC
F275 A780             (        forth.asm):02638 (4+1)           sta     ,x+
F277 10AF81           (        forth.asm):02639 (6+2)           sty     ,x++
F27A 9F08             (        forth.asm):02640 (4)             stx     DICEND          Update HERE
F27C 8EE6CA           (        forth.asm):02641 (3)             ldx     #NPUSH
F27F BDE14D           (        forth.asm):02642 (7)             jsr     EMXASXT
F282 8EF5E7           (        forth.asm):02643                 RFXT    ldx,#COUNT+8    XT for COUNT
F285 7EE14D           (        forth.asm):02644 (3)             jmp     EMXASXT
                      (        forth.asm):02645         
                      (        forth.asm):02646         * Transactional behaviour is guaranteed here. What this means is that the
                      (        forth.asm):02647         * operation will preserve the data stack contents, should insufficient
                      (        forth.asm):02648         * parameters be supplied. It is a very desirable feature (for debugging
                      (        forth.asm):02649         * purposes) which will be generalized to a number of other words. As an
                      (        forth.asm):02650         * aside, it also allows us to access the data stack as directly indexed
                      (        forth.asm):02651         * through the 6309 U register, resulting in better performance.
F288 02               (        forth.asm):02652         DPLUS   fcb     2               79-STANDARD (REQ241)
F289 442B             (        forth.asm):02653                 fcc     'D+'            ( d2 d1 -- d1+d2--signed )
F28B F236             (        forth.asm):02654                 fdb     SQUOTE          Initially ( L2 H2 L1 H1)
F28D C7               (        forth.asm):02655                 RFCS
F28E BDE399           (        forth.asm):02656 (7)             jsr     MIN4PST         Make sure we have at least 4 cells stacked up
                      (        forth.asm):02657         * At this point sufficient stack depth has been assessed. Let's rock and roll!
F291 BDFC51           (        forth.asm):02658         @stkok  RFXT    jsr,ROT+6       XT for ROT ( L2 L1 H1 H2 )
F294 EC44             (        forth.asm):02659 (5+1)           ldd     4,u             L1
F296 E346             (        forth.asm):02660 (5+1)           addd    6,u             L2
F298 ED46             (        forth.asm):02661 (5+1)           std     6,u             d1+d2 least significant cell
F29A EC42             (        forth.asm):02662 (5+1)           ldd     2,u             H1
F29C 10890000         (        forth.asm):02663 (4)             adcd    #0              Carry from least significant cell addition
F2A0 E3C4             (        forth.asm):02664 (5+0)           addd    ,u              H2
F2A2 ED44             (        forth.asm):02665 (5+1)           std     4,u             d1+d2 most significant cell
F2A4 3344             (        forth.asm):02666 (4+1)           leau    4,u             Drop 2 cells from the data stack
F2A6 39               (        forth.asm):02667 (4)             rts
                      (        forth.asm):02668         
F2A7 07               (        forth.asm):02669         DNEG    fcb     7               79-STANDARD (REQ245)
F2A8 444E4547415445   (        forth.asm):02670                 fcc     'DNEGATE'
F2AF F288             (        forth.asm):02671                 fdb     DPLUS
F2B1 C7               (        forth.asm):02672                 RFCS
F2B2 BDE38F           (        forth.asm):02673 (7)             jsr     MIN2PST         We need at least 2 cells stacked up
F2B5 10A642           (        forth.asm):02674 (6+1)           ldw     2,u             Least significant cell
F2B8 1053             (        forth.asm):02675 (2)             comw
F2BA ECC4             (        forth.asm):02676 (5+0)           ldd     ,u              Most significant cell
F2BC 1043             (        forth.asm):02677 (2)             comd
F2BE 108B0001         (        forth.asm):02678 (4)             addw    #1
F2C2 10890000         (        forth.asm):02679 (4)             adcd    #0              Propagate carry flag
F2C6 10EDC4           (        forth.asm):02680 (8+0)           stq     ,u              Store the result back to the data stack
F2C9 39               (        forth.asm):02681 (4)             rts
                      (        forth.asm):02682         
F2CA 03               (        forth.asm):02683         DZEQ    fcb     3               79-STANDARD (double number extension)
F2CB 44303D           (        forth.asm):02684                 fcc     'D0='           ( d -- flag )
F2CE F2A7             (        forth.asm):02685                 fdb     DNEG
F2D0 C7               (        forth.asm):02686                 RFCS
F2D1 BDED44           (        forth.asm):02687                 RFXT    jsr,OR+5        XT for OR
F2D4 7EEDBE           (        forth.asm):02688                 RFXT    jmp,NULP+5      XT for 0=
                      (        forth.asm):02689         
                      (        forth.asm):02690         * In essence:
                      (        forth.asm):02691         * : D< DNEGATE D+ NIP [ HEX ] 8000 AND IF 1 ELSE 0 THEN ;
F2D7 02               (        forth.asm):02692         DLESS   fcb     2               79-STANDARD (REQ244)
F2D8 443C             (        forth.asm):02693                 fcc     'D<'            ( d1 d2 -- flag )
F2DA F2CA             (        forth.asm):02694                 fdb     DZEQ
F2DC C7               (        forth.asm):02695                 RFCS
F2DD 8DD3             (        forth.asm):02696                 RFXT    bsr,DNEG+10     XT for DNEGATE
F2DF 8DAD             (        forth.asm):02697                 RFXT    bsr,DPLUS+5     XT for D+
F2E1 4F               (        forth.asm):02698 (1)             clra
F2E2 A742             (        forth.asm):02699 (4+1)           sta     2,u
F2E4 E6C4             (        forth.asm):02700 (4+0)           ldb     ,u
F2E6 2D05             (        forth.asm):02701 (3)             blt     @setto1
F2E8 A743             (        forth.asm):02702 (4+1)   @setrv  sta     3,u
F2EA 3342             (        forth.asm):02703 (4+1)           leau    2,u
F2EC 39               (        forth.asm):02704 (4)             rts
F2ED 4C               (        forth.asm):02705 (1)     @setto1 inca
F2EE 20F8             (        forth.asm):02706 (3)             bra     @setrv
                      (        forth.asm):02707         
F2F0 05               (        forth.asm):02708         TWOOVER fcb     5               79-STANDARD (double number extension)
F2F1 324F564552       (        forth.asm):02709                 fcc     '2OVER'         ( d1 d2 -- d1 d2 d1 )
F2F6 F2D7             (        forth.asm):02710                 fdb     DLESS
F2F8 C7               (        forth.asm):02711                 RFCS
F2F9 BDE399           (        forth.asm):02712 (7)             jsr     MIN4PST         At least four cells need to be stacked up
F2FC 10EC44           (        forth.asm):02713 (8+1)           ldq     4,u             D:W has MSC:LSC of D1
F2FF 1F61             (        forth.asm):02714 (4)             tfr     w,x
F301 BDE6CA           (        forth.asm):02715 (7)             jsr     NPUSH
F304 1F01             (        forth.asm):02716 (4)             tfr     d,x
F306 7EE6CA           (        forth.asm):02717 (3)             jmp     NPUSH
                      (        forth.asm):02718         
F309 05               (        forth.asm):02719         TWOSWAP fcb     5               79-STANDARD (double number extension)
F30A 3253574150       (        forth.asm):02720                 fcc     '2SWAP'         ( d1 d2 -- d2 d1 )
F30F F2F0             (        forth.asm):02721                 fdb     TWOOVER
F311 C7               (        forth.asm):02722                 RFCS
F312 BDE399           (        forth.asm):02723 (7)             jsr     MIN4PST         At least four cells must be stacked up
F315 AE44             (        forth.asm):02724 (5+1)           ldx     4,u             D1 most significant cell
F317 10AE46           (        forth.asm):02725 (6+1)           ldy     6,u             D1 least significant cell
F31A 10ECC4           (        forth.asm):02726 (8+0)           ldq     ,u              D:W has MSC:LSC of D2
F31D 10ED44           (        forth.asm):02727 (8+1)           stq     4,u
F320 AFC4             (        forth.asm):02728 (5+0)           stx     ,u
F322 10AF42           (        forth.asm):02729 (6+1)           sty     2,u
F325 39               (        forth.asm):02730 (4)             rts
                      (        forth.asm):02731         
F326 05               (        forth.asm):02732         TWODROP fcb     5               79-STANDARD (double number extension)
F327 3244524F50       (        forth.asm):02733                 fcc     '2DROP'         ( d -- )
F32C F309             (        forth.asm):02734                 fdb     TWOSWAP
F32E C7               (        forth.asm):02735                 RFCS
F32F BDE38F           (        forth.asm):02736 (7)             jsr     MIN2PST         At least two cells must be stacked up
F332 3344             (        forth.asm):02737 (4+1)           leau    4,u
F334 39               (        forth.asm):02738 (4)             rts
                      (        forth.asm):02739         
F335 04               (        forth.asm):02740         TWODUP  fcb     4               79-STANDARD (double number extension)
F336 32445550         (        forth.asm):02741                 fcc     '2DUP'          ( double -- double double )
F33A F326             (        forth.asm):02742                 fdb     TWODROP
F33C C7               (        forth.asm):02743                 RFCS
F33D BDE38F           (        forth.asm):02744 (7)             jsr     MIN2PST         At least two cells need to be stacked up
F340 10ECC4           (        forth.asm):02745 (8+0)           ldq     ,u              D:W has MSC:LSC of DOUBLE
F343 1F61             (        forth.asm):02746 (4)             tfr     w,x
F345 BDE6CA           (        forth.asm):02747 (7)             jsr     NPUSH
F348 1F01             (        forth.asm):02748 (4)             tfr     d,x
F34A 7EE6CA           (        forth.asm):02749 (3)             jmp     NPUSH
                      (        forth.asm):02750         
F34D 02               (        forth.asm):02751         TWOSTOR fcb     2               79-STANDARD (double number extension)
F34E 3221             (        forth.asm):02752                 fcc     '2!'            ( double addr -- )
F350 F335             (        forth.asm):02753                 fdb     TWODUP
F352 C7               (        forth.asm):02754                 RFCS
F353 BDE394           (        forth.asm):02755 (7)             jsr     MIN3PST         At least three cells need to be stacked up
F356 10EC42           (        forth.asm):02756 (8+1)           ldq     2,u             DOUBLE to D:W
F359 10EDD4           (        forth.asm):02757 (8+3)           stq     [,u]            Store DOUBLE to ADDR
F35C 3346             (        forth.asm):02758 (4+1)           leau    6,u             Drop three cells from the user stack
F35E 39               (        forth.asm):02759 (4)             rts
                      (        forth.asm):02760         
F35F 02               (        forth.asm):02761         TWOFTCH fcb     2               79-STANDARD (double number extension)
F360 3240             (        forth.asm):02762                 fcc     '2@'            ( dbladdr -- double )
F362 F34D             (        forth.asm):02763                 fdb     TWOSTOR
F364 C7               (        forth.asm):02764                 RFCS
F365 BDE38A           (        forth.asm):02765 (7)             jsr     MIN1PST         At least cell needs to be stacked up
F368 10ECD4           (        forth.asm):02766 (8+3)           ldq     [,u]            D:W has MSC:LSC of DBLADDR @
F36B 10A7C4           (        forth.asm):02767 (6+0)           stw     ,u              Least significant cell stacked in place
F36E 1F01             (        forth.asm):02768 (4)             tfr     d,x             Most significant cell goes through standard push
F370 7EE6CA           (        forth.asm):02769 (3)             jmp     NPUSH
                      (        forth.asm):02770         
                      (        forth.asm):02771                 IFNE    HVCONV
F373 07               (        forth.asm):02772         CONVERT fcb     7               79-STANDARD (REQ195)
F374 434F4E56455254   (        forth.asm):02773                 fcc     'CONVERT'       ( d1 addr1 -- d2 addr2 )
F37B F35F             (        forth.asm):02774                 fdb     TWOFTCH
F37D C7               (        forth.asm):02775                 RFCS
F37E BDE394           (        forth.asm):02776 (7)             jsr     MIN3PST         At least 3 cells need to be stacked up
F381 BDE2CC           (        forth.asm):02777 (7)             jsr     CKBASE          Check for supported BASE. No return if not
F384 AEC4             (        forth.asm):02778 (5+0)           ldx     ,u              ADDR1 to X
F386 3001             (        forth.asm):02779 (4+1)   @cvloop leax    1,x
F388 E684             (        forth.asm):02780 (4+0)           ldb     ,x
                      (        forth.asm):02781         * B has the ASCII representation of something that may or may not be a valid
                      (        forth.asm):02782         * digit, expressed in BASE (alias (byte)UBASE+1). If it does, multiply D1 by
                      (        forth.asm):02783         * BASE and add that to D1 (aka D2 on exit). Then add DIGIT on the top of it.
F38A C030             (        forth.asm):02784 (2)             subb    #'0             Minimal ASCII value condition met?
F38C 255B             (        forth.asm):02785 (3)             blo     @cvoor          No. Out of range. ,X cannot be a valid digit
F38E C10A             (        forth.asm):02786 (2)             cmpb    #10
F390 2510             (        forth.asm):02787 (3)             blo     @cvnolt         No letter in potential BASE
                      (        forth.asm):02788                 IFEQ    CSSNTVE
F392 C111             (        forth.asm):02789 (2)             cmpb    #'A-'0
F394 2553             (        forth.asm):02790 (3)             blo     @cvoor          Greater than 9 but lower than A
F396 C131             (        forth.asm):02791 (2)             cmpb    #'a-'0
F398 2506             (        forth.asm):02792 (3)             blo     @cvisuc         Upper case already
F39A C14A             (        forth.asm):02793 (2)             cmpb    #'z-'0
F39C 224B             (        forth.asm):02794 (3)             bhi     @cvoor          Definitely out of range
F39E C020             (        forth.asm):02795 (2)             subb    #'a-'A          To upper case
                      (        forth.asm):02796                 ENDC
F3A0 C007             (        forth.asm):02797 (2)     @cvisuc subb    #'A-':          A-Z to number
F3A2 D11F             (        forth.asm):02798 (3)     @cvnolt cmpb    UBASE+1         B has a digit. Make sure it's less than BASE
F3A4 2443             (        forth.asm):02799 (3)             bhs     @cvoor          Number under scrutiny is >= BASE
F3A6 3278             (        forth.asm):02800 (4+1)           leas    -8,s            Allocate scratch space
F3A8 4F               (        forth.asm):02801 (1)             clra
F3A9 3406             (        forth.asm):02802 (4+2)           pshs    d
                      (        forth.asm):02803         * System and user stack structures are as follows:
                      (        forth.asm):02804         * ,s    current digit (1 cell)
                      (        forth.asm):02805         * 2,s   D0*B (1 cell)
                      (        forth.asm):02806         * 4,s   D1*B (1 cell)
                      (        forth.asm):02807         * 6,s   D2*B (1 cell)
                      (        forth.asm):02808         * 8,s   D3*B (1 cell)
                      (        forth.asm):02809         * 2,u   D1H most significant cell
                      (        forth.asm):02810         * 4,u   D1L least significant cell
F3AB 1F37             (        forth.asm):02811 (4)             tfr     u,v             Backup U
F3AD 3346             (        forth.asm):02812 (4+1)           leau    6,u             Point one byte after D1LL
F3AF 3162             (        forth.asm):02813 (4+1)           leay    2,s             Point to D0*B
F3B1 118604           (        forth.asm):02814 (3)             lde     #4              Four products to go through
F3B4 A6C2             (        forth.asm):02815 (4+1)   @cvmul  lda     ,-u
F3B6 D61F             (        forth.asm):02816 (3)             ldb     UBASE+1
F3B8 3D               (        forth.asm):02817 (10)            mul
F3B9 EDA1             (        forth.asm):02818 (5+2)           std     ,y++
F3BB 114A             (        forth.asm):02819 (2)             dece
F3BD 26F5             (        forth.asm):02820 (3)             bne     @cvmul
F3BF 1F73             (        forth.asm):02821 (4)             tfr     v,u             Restore U
F3C1 A663             (        forth.asm):02822 (4+1)           lda     3,s
F3C3 A745             (        forth.asm):02823 (4+1)           sta     5,u             D1LL
F3C5 A662             (        forth.asm):02824 (4+1)           lda     2,s
F3C7 AB65             (        forth.asm):02825 (4+1)           adda    5,s
F3C9 A744             (        forth.asm):02826 (4+1)           sta     4,u             D1LH
F3CB A664             (        forth.asm):02827 (4+1)           lda     4,s
F3CD A967             (        forth.asm):02828 (4+1)           adca    7,s
F3CF A743             (        forth.asm):02829 (4+1)           sta     3,u             D1HL
F3D1 A666             (        forth.asm):02830 (4+1)           lda     6,s
F3D3 A969             (        forth.asm):02831 (4+1)           adca    9,s
F3D5 A742             (        forth.asm):02832 (4+1)           sta     2,u             D1HH
F3D7 EC44             (        forth.asm):02833 (5+1)           ldd     4,u             D1L
F3D9 E3E4             (        forth.asm):02834 (5+0)           addd    ,s              DIGIT
F3DB ED44             (        forth.asm):02835 (5+1)           std     4,u
F3DD EC42             (        forth.asm):02836 (5+1)           ldd     2,u             D1H
F3DF 10890000         (        forth.asm):02837 (4)             adcd    #0              Potential carry from lower cell
F3E3 ED42             (        forth.asm):02838 (5+1)           std     2,u
F3E5 326A             (        forth.asm):02839 (4+1)           leas    10,s            Release scratch space
F3E7 209D             (        forth.asm):02840 (3)             bra     @cvloop         Here we go again
F3E9 AFC4             (        forth.asm):02841 (5+0)   @cvoor  stx     ,u              Update ADDR2
F3EB 39               (        forth.asm):02842 (4)             rts
                      (        forth.asm):02843                 ENDC
                      (        forth.asm):02844         
F3EC 02               (        forth.asm):02845         CVTE    fcb     2
F3ED 233E             (        forth.asm):02846                 fcc     '#>'
                      (        forth.asm):02847                 IFNE    HVCONV
F3EF F373             (        forth.asm):02848                 fdb     CONVERT
                      (        forth.asm):02849                 ELSE
                      (        forth.asm):02850                 fdb     TWOFTCH
                      (        forth.asm):02851                 ENDC
F3F1 C7               (        forth.asm):02852                 RFCS
F3F2 BDE6D8           (        forth.asm):02853 (7)             jsr     NPOP
F3F5 BDE6D8           (        forth.asm):02854 (7)             jsr     NPOP            Drop 2 cells from the data stack
F3F8 8E013A           (        forth.asm):02855 (3)             ldx     #PADBUF
F3FB 3610             (        forth.asm):02856                 UCNPUSH
F3FD BDE1A7           (        forth.asm):02857 (7)             jsr     SLEN
F400 1F61             (        forth.asm):02858 (4)             tfr     w,x
F402 3610             (        forth.asm):02859                 UCNPUSH
F404 39               (        forth.asm):02860 (4)             rts
                      (        forth.asm):02861         
F405 04               (        forth.asm):02862         SIGN    fcb     4
F406 5349474E         (        forth.asm):02863                 fcc     'SIGN'
F40A F3EC             (        forth.asm):02864                 fdb     CVTE
F40C C7               (        forth.asm):02865                 RFCS
F40D BDE6D8           (        forth.asm):02866 (7)             jsr     NPOP
F410 1F10             (        forth.asm):02867 (4)             tfr     x,d
F412 104D             (        forth.asm):02868 (2)             tstd
F414 2C05             (        forth.asm):02869 (3)             bge     @sign1
F416 C62D             (        forth.asm):02870 (2)             ldb     #'-
F418 7EF4D5           (        forth.asm):02871 (3)             jmp     INSBPAD
F41B 39               (        forth.asm):02872 (4)     @sign1  rts
                      (        forth.asm):02873         
F41C 04               (        forth.asm):02874         HOLD    fcb     4
F41D 484F4C44         (        forth.asm):02875                 fcc     'HOLD'
F421 F405             (        forth.asm):02876                 fdb     SIGN
F423 C7               (        forth.asm):02877                 RFCS
F424 BDE6D8           (        forth.asm):02878 (7)             jsr     NPOP
F427 1F10             (        forth.asm):02879 (4)             tfr     x,d
F429 7EF4D5           (        forth.asm):02880 (3)             jmp     INSBPAD         B is inserted at the beginning of PAD.
                      (        forth.asm):02881         
F42C 02               (        forth.asm):02882         SHARPS  fcb     2
F42D 2353             (        forth.asm):02883                 fcc     '#S'
F42F F41C             (        forth.asm):02884                 fdb     HOLD
F431 C7               (        forth.asm):02885                 RFCS
F432 8601             (        forth.asm):02886 (2)             lda     #1
F434 9730             (        forth.asm):02887 (3)             sta     CVTFCN          CVT function #1 is #S
F436 2007             (        forth.asm):02888 (3)             bra     CVT0
                      (        forth.asm):02889         
                      (        forth.asm):02890         * Unsigned double on the top of the data stack gets divided by BASE.
                      (        forth.asm):02891         * The division algorithm implemented here is the binary long division.
                      (        forth.asm):02892         * See https://en.wikipedia.org/wiki/Division_algorithm for more information.
                      (        forth.asm):02893         * Remainder (converted to a character) gets prepended to PAD.
F438 01               (        forth.asm):02894         CVT     fcb     1
F439 23               (        forth.asm):02895                 fcc     '#'
F43A F42C             (        forth.asm):02896                 fdb     SHARPS
F43C C7               (        forth.asm):02897                 RFCS
F43D 0F30             (        forth.asm):02898 (5)             clr     CVTFCN          CVT function 0 is #
F43F BDE6D8           (        forth.asm):02899 (7)     CVT0    jsr     NPOP
F442 1F16             (        forth.asm):02900 (4)             tfr     x,w
F444 BDE6D8           (        forth.asm):02901 (7)             jsr     NPOP
F447 3410             (        forth.asm):02902 (4+2)   CVT1    pshs    x               Numerator least significant cell
F449 1038             (        forth.asm):02903 (6)             pshsw                   Numerator most significant cell
F44B 104F             (        forth.asm):02904 (2)             clrd
F44D 3406             (        forth.asm):02905 (4+2)           pshs    d               Quotient low
F44F 3406             (        forth.asm):02906 (4+2)           pshs    d               Quotient high
F451 3406             (        forth.asm):02907 (4+2)           pshs    d               Bitmask low
F453 10868000         (        forth.asm):02908 (4)             ldw     #$8000          Bitmask high
F457 1038             (        forth.asm):02909 (6)             pshsw
F459 3406             (        forth.asm):02910 (4+2)           pshs    d
                      (        forth.asm):02911         * Stack structure:
                      (        forth.asm):02912         * 1,s   remainder               8 bits (high order byte is zero and unused)
                      (        forth.asm):02913         * 2,s   Bitmask high            16 bits
                      (        forth.asm):02914         * 4,s   Bitmask low             16 bits
                      (        forth.asm):02915         * 6,s   Quotient high           16 bits
                      (        forth.asm):02916         * 8,s   Quotient low            16 bits
                      (        forth.asm):02917         * 10,s  Numerator high          16 bits
                      (        forth.asm):02918         * 12,s  Numerator low           16 bits
                      (        forth.asm):02919         * Denominator is at UBASE+1     8 bits
F45B 11C61F           (        forth.asm):02920 (3)             ldf     #31             32 bits to go
F45E 6861             (        forth.asm):02921 (6+1)   @cvt1   lsl     1,s             R := R << 1
                      (        forth.asm):02922         * We need to extract bit <f> from the numerator.
F460 306A             (        forth.asm):02923 (4+1)           leax    10,s            Numerator MSB address
F462 1FF8             (        forth.asm):02924 (4)             tfr     f,a             Not to alter the stack structure
F464 44               (        forth.asm):02925 (1)             lsra                    OffsetX: 3 - F >> 3
F465 44               (        forth.asm):02926 (1)             lsra
F466 44               (        forth.asm):02927 (1)             lsra
F467 C603             (        forth.asm):02928 (2)             ldb     #3
F469 103289           (        forth.asm):02929 (4)             subr    a,b
F46C 3A               (        forth.asm):02930 (1)             abx
F46D A684             (        forth.asm):02931 (4+0)           lda     ,x
F46F 1FF9             (        forth.asm):02932 (4)             tfr     f,b             Bitno: F & 7
F471 C407             (        forth.asm):02933 (2)             andb    #7
                      (        forth.asm):02934         * At this point, A has the data we're interested in. B has the bit number.
F473 5D               (        forth.asm):02935 (1)     @cvtex  tstb
F474 2704             (        forth.asm):02936 (3)             beq     @cvtfnd         Bit 0 of A has the data
F476 44               (        forth.asm):02937 (1)             lsra
F477 5A               (        forth.asm):02938 (1)             decb
F478 20F9             (        forth.asm):02939 (3)             bra     @cvtex
F47A 8401             (        forth.asm):02940 (2)     @cvtfnd anda    #1
F47C AA61             (        forth.asm):02941 (4+1)           ora     1,s             R(0) := N(i)
F47E A761             (        forth.asm):02942 (4+1)           sta     1,s             Update the remainder
F480 911F             (        forth.asm):02943 (3)             cmpa    UBASE+1
F482 2512             (        forth.asm):02944 (3)             blo     @cvt5
F484 901F             (        forth.asm):02945 (3)             suba    UBASE+1
F486 A761             (        forth.asm):02946 (4+1)           sta     1,s             R := R - D
                      (        forth.asm):02947         * Q(i) := 1 (use the bitmask).
F488 EC66             (        forth.asm):02948 (5+1)           ldd     6,s             Quotient high
F48A 10AA62           (        forth.asm):02949 (6+1)           ord     2,s             Bitmask high
F48D ED66             (        forth.asm):02950 (5+1)           std     6,s
F48F EC68             (        forth.asm):02951 (5+1)           ldd     8,s             Quotient low
F491 10AA64           (        forth.asm):02952 (6+1)           ord     4,s             Bitmask low
F494 ED68             (        forth.asm):02953 (5+1)           std     8,s
                      (        forth.asm):02954         * Shift the bitmask 1 bit right.
F496 EC62             (        forth.asm):02955 (5+1)   @cvt5   ldd     2,s
F498 1044             (        forth.asm):02956 (2)             lsrd
F49A ED62             (        forth.asm):02957 (5+1)           std     2,s
F49C EC64             (        forth.asm):02958 (5+1)           ldd     4,s
F49E 1046             (        forth.asm):02959 (2)             rord
F4A0 ED64             (        forth.asm):02960 (5+1)           std     4,s
F4A2 115A             (        forth.asm):02961 (2)             decf
F4A4 2CB8             (        forth.asm):02962 (3)             bge     @cvt1
                      (        forth.asm):02963         * Convert the remainder to a digit expressed in BASE.
F4A6 E661             (        forth.asm):02964 (4+1)           ldb     1,s
F4A8 8630             (        forth.asm):02965 (2)             lda     #'0
F4AA C10A             (        forth.asm):02966 (2)             cmpb    #10             B has the digit we want converted to BASE
F4AC 2502             (        forth.asm):02967 (3)             bcs     @cvtdgt
F4AE 8637             (        forth.asm):02968 (2)             lda     #'A-10
F4B0 103089           (        forth.asm):02969 (4)     @cvtdgt addr    a,b
F4B3 8D20             (        forth.asm):02970 (6)             bsr     INSBPAD         Prepend B to the string currently in PAD
F4B5 0D30             (        forth.asm):02971 (4)             tst     CVTFCN
F4B7 2711             (        forth.asm):02972 (3)             beq     @cvtend         Function 0 is straight #, i.e. we're done here
                      (        forth.asm):02973         * Function 1 is #S, we iterate unless the quotient is 0.
F4B9 EC68             (        forth.asm):02974 (5+1)           ldd     8,s
F4BB 10AA66           (        forth.asm):02975 (6+1)           ord     6,s
F4BE 270A             (        forth.asm):02976 (3)             beq     @cvtend
F4C0 AE68             (        forth.asm):02977 (5+1)           ldx     8,s             New numerator low
F4C2 10A666           (        forth.asm):02978 (6+1)           ldw     6,s             New numerator high
F4C5 326E             (        forth.asm):02979 (4+1)           leas    14,s            Discard the stack frame
F4C7 7EF447           (        forth.asm):02980 (3)             jmp     CVT1            And go at it again
                      (        forth.asm):02981         * Push back the quotient on the data stack (low then high cell).
F4CA AE68             (        forth.asm):02982 (5+1)   @cvtend ldx     8,s
F4CC 3610             (        forth.asm):02983                 UCNPUSH
F4CE AE66             (        forth.asm):02984 (5+1)           ldx     6,s
F4D0 326E             (        forth.asm):02985 (4+1)           leas    14,s            Discard the stack frame
F4D2 3610             (        forth.asm):02986                 UCNPUSH
F4D4 39               (        forth.asm):02987 (4)             rts
                      (        forth.asm):02988         
                      (        forth.asm):02989         * Insert the character in B in front of the string at PADBUF.
F4D5 8E013A           (        forth.asm):02990 (3)     INSBPAD ldx     #PADBUF
F4D8 BDE1A7           (        forth.asm):02991 (7)             jsr     SLEN
F4DB 103061           (        forth.asm):02992 (4)             addr    w,x             X points to the PAD string's NUL terminator
F4DE 105C             (        forth.asm):02993 (2)             incw                    Include the terminator
F4E0 3101             (        forth.asm):02994 (4+1)           leay    1,x
F4E2 113912           (        forth.asm):02995 (6+?)           tfm     x-,y-
F4E5 D73A             (        forth.asm):02996 (3)             stb     PADBUF
F4E7 39               (        forth.asm):02997 (4)             rts
                      (        forth.asm):02998         
F4E8 02               (        forth.asm):02999         CVTB    fcb     2
F4E9 3C23             (        forth.asm):03000                 fcc     '<#'
F4EB F438             (        forth.asm):03001                 fdb     CVT
F4ED C7               (        forth.asm):03002                 RFCS
F4EE BDE2CC           (        forth.asm):03003 (7)             jsr     CKBASE          Sanity check. BASE can be altered at any time
F4F1 0F3A             (        forth.asm):03004 (5)             clr     PADBUF
F4F3 39               (        forth.asm):03005 (4)             rts
                      (        forth.asm):03006         
F4F4 01               (        forth.asm):03007         DOT     fcb     1               79-STANDARD (REQ193)
F4F5 2E               (        forth.asm):03008                 fcc     '.'
F4F6 F4E8             (        forth.asm):03009                 fdb     CVTB
F4F8 C7               (        forth.asm):03010                 RFCS
F4F9 8601             (        forth.asm):03011 (2)             lda     #1
F4FB 9732             (        forth.asm):03012 (3)             sta     CVISSGN         Force a signed number conversion
F4FD BDE6D8           (        forth.asm):03013 (7)     ptop0   jsr     NPOP
F500 BDE336           (        forth.asm):03014 (7)             jsr     CVNSTR
F503 8E03A0           (        forth.asm):03015 (3)             ldx     #TBUFF
F506 8620             (        forth.asm):03016 (2)             lda     #SP
F508 A180             (        forth.asm):03017 (4+1)   @ptop1  cmpa    ,x+             Skip leading spaces
F50A 27FC             (        forth.asm):03018 (3)             beq     @ptop1
F50C 301F             (        forth.asm):03019 (4+1)           leax    -1,x            Point to actual string start address
F50E BDE1DA           (        forth.asm):03020 (7)             jsr     PUTS
F511 7EE1B6           (        forth.asm):03021 (3)             jmp     PUTCH           Extra space after printing a number
                      (        forth.asm):03022         
F514 02               (        forth.asm):03023         UDOT    fcb     2               79-STANDARD (REQ106)
F515 552E             (        forth.asm):03024                 fcc     'U.'
F517 F4F4             (        forth.asm):03025                 fdb     DOT
F519 C7               (        forth.asm):03026                 RFCS
F51A 0F32             (        forth.asm):03027 (5)             clr     CVISSGN         Conversion is unsigned
F51C 20DF             (        forth.asm):03028 (3)             bra     ptop0
                      (        forth.asm):03029         
F51E 02               (        forth.asm):03030         DOTR    fcb     2               79-STANDARD (REF)
F51F 2E52             (        forth.asm):03031                 fcc     '.R'
F521 F514             (        forth.asm):03032                 fdb     UDOT
F523 C7               (        forth.asm):03033                 RFCS
F524 8601             (        forth.asm):03034 (2)             lda     #1
F526 9732             (        forth.asm):03035 (3)             sta     CVISSGN
F528 BDE6D8           (        forth.asm):03036 (7)     DOTR0   jsr     NPOP
F52B 3410             (        forth.asm):03037 (4+2)           pshs    x               Length parameter value
F52D BDE6D8           (        forth.asm):03038 (7)             jsr     NPOP
F530 BDE336           (        forth.asm):03039 (7)             jsr     CVNSTR
F533 8E03A0           (        forth.asm):03040 (3)             ldx     #TBUFF
F536 8620             (        forth.asm):03041 (2)             lda     #SP
F538 A180             (        forth.asm):03042 (4+1)   @dotr1  cmpa    ,x+
F53A 27FC             (        forth.asm):03043 (3)             beq     @dotr1          Skip leading spaces
F53C 301F             (        forth.asm):03044 (4+1)           leax    -1,x
F53E BDE1A7           (        forth.asm):03045 (7)             jsr     SLEN            String length is returned in W
F541 3506             (        forth.asm):03046 (4+2)           puls    d
F543 1E06             (        forth.asm):03047 (5)             exg     d,w
F545 103206           (        forth.asm):03048 (4)             subr    d,w
F548 2F0D             (        forth.asm):03049 (3)             ble     @dotr3
F54A 8620             (        forth.asm):03050 (2)             lda     #SP
F54C 105D             (        forth.asm):03051 (2)     @dotr2  tstw
F54E 2707             (        forth.asm):03052 (3)             beq     @dotr3
F550 BDE1B6           (        forth.asm):03053 (7)             jsr     PUTCH
F553 105A             (        forth.asm):03054 (2)             decw
F555 20F5             (        forth.asm):03055 (3)             bra     @dotr2
F557 7EE1DA           (        forth.asm):03056 (3)     @dotr3  jmp     PUTS
                      (        forth.asm):03057         
F55A 03               (        forth.asm):03058         UDOTR   fcb     3               79-STANDARD (REF216)
F55B 552E52           (        forth.asm):03059                 fcc     'U.R'
F55E F51E             (        forth.asm):03060                 fdb     DOTR
F560 C7               (        forth.asm):03061                 RFCS
F561 0F32             (        forth.asm):03062 (5)             clr     CVISSGN
F563 20C3             (        forth.asm):03063 (3)             bra     DOTR0
                      (        forth.asm):03064         
F565 02               (        forth.asm):03065         BL      fcb     2               79-STANDARD (REF176)
F566 424C             (        forth.asm):03066                 fcc     'BL'
F568 F55A             (        forth.asm):03067                 fdb     UDOTR
F56A C7               (        forth.asm):03068                 RFCS
F56B 8E0020           (        forth.asm):03069 (3)             ldx     #SP
F56E 7EE6CA           (        forth.asm):03070 (3)             jmp     NPUSH
                      (        forth.asm):03071         
F571 05               (        forth.asm):03072         SPACE   fcb     5               79-STANDARD (REQ232)
F572 5350414345       (        forth.asm):03073                 fcc     'SPACE'
F577 F565             (        forth.asm):03074                 fdb     BL
F579 C7               (        forth.asm):03075                 RFCS
F57A 8620             (        forth.asm):03076 (2)             lda     #SP
F57C 7EE1B6           (        forth.asm):03077 (3)             jmp     PUTCH
                      (        forth.asm):03078         
F57F 06               (        forth.asm):03079         SPACES  fcb     6               79-STANDARD (REQ231)
F580 535041434553     (        forth.asm):03080                 fcc     'SPACES'
F586 F571             (        forth.asm):03081                 fdb     SPACE
F588 C7               (        forth.asm):03082                 RFCS
F589 BDE6D8           (        forth.asm):03083 (7)             jsr     NPOP
F58C 1F16             (        forth.asm):03084 (4)             tfr     x,w
F58E 105D             (        forth.asm):03085 (2)             tstw
F590 2709             (        forth.asm):03086 (3)             beq     @spcs2
F592 8620             (        forth.asm):03087 (2)             lda     #SP
F594 BDE1B6           (        forth.asm):03088 (7)     @spcs1  jsr     PUTCH
F597 105A             (        forth.asm):03089 (2)             decw
F599 26F9             (        forth.asm):03090 (3)             bne     @spcs1
F59B 39               (        forth.asm):03091 (4)     @spcs2  rts
                      (        forth.asm):03092         
F59C 04               (        forth.asm):03093         PAGE    fcb     4               79-STANDARD (REF)
F59D 50414745         (        forth.asm):03094                 fcc     'PAGE'
F5A1 F57F             (        forth.asm):03095                 fdb     SPACES
F5A3 C7               (        forth.asm):03096                 RFCS
F5A4 8EFDC5           (        forth.asm):03097 (3)             ldx     #CSVT100
F5A7 7EE1DA           (        forth.asm):03098 (3)             jmp     PUTS
                      (        forth.asm):03099         
F5AA 02               (        forth.asm):03100         CRLF    fcb     2               79-STANDARD (REQ160)
F5AB 4352             (        forth.asm):03101                 fcc     'CR'
F5AD F59C             (        forth.asm):03102                 fdb     PAGE
F5AF C7               (        forth.asm):03103                 RFCS
F5B0 7EE1E7           (        forth.asm):03104 (3)             jmp     PUTCR
                      (        forth.asm):03105         
F5B3 03               (        forth.asm):03106         PAD     fcb     3               79-STANDARD (REQ226)
F5B4 504144           (        forth.asm):03107                 fcc     'PAD'
F5B7 F5AA             (        forth.asm):03108                 fdb     CRLF
F5B9 C7               (        forth.asm):03109                 RFCS
F5BA 8E013A           (        forth.asm):03110 (3)             ldx     #PADBUF
F5BD 7EE6CA           (        forth.asm):03111 (3)             jmp     NPUSH
                      (        forth.asm):03112         
F5C0 04               (        forth.asm):03113         TYPE    fcb     4               79-STANDARD (REQ222)
F5C1 54595045         (        forth.asm):03114                 fcc     'TYPE'          ( addr bcount -- )
F5C5 F5B3             (        forth.asm):03115                 fdb     PAD
F5C7 C7               (        forth.asm):03116                 RFCS
F5C8 BDE6D8           (        forth.asm):03117 (7)             jsr     NPOP            Character count (signed)
F5CB 1F16             (        forth.asm):03118 (4)             tfr     x,w
F5CD BDE6D8           (        forth.asm):03119 (7)             jsr     NPOP            Buffer address
F5D0 105D             (        forth.asm):03120 (2)             tstw                    
F5D2 2E01             (        forth.asm):03121 (3)     @type0  bgt     @type1
F5D4 39               (        forth.asm):03122 (4)             rts
F5D5 A680             (        forth.asm):03123 (4+1)   @type1  lda     ,x+
F5D7 BDE1B6           (        forth.asm):03124 (7)             jsr     PUTCH
F5DA 105A             (        forth.asm):03125 (2)             decw
F5DC 20F4             (        forth.asm):03126 (3)             bra     @type0
                      (        forth.asm):03127         
F5DE 05               (        forth.asm):03128         COUNT   fcb     5               79-STANDARD (REQ159)
F5DF 434F554E54       (        forth.asm):03129                 fcc     'COUNT'
F5E4 F5C0             (        forth.asm):03130                 fdb     TYPE
F5E6 C7               (        forth.asm):03131                 RFCS
F5E7 BDE6D8           (        forth.asm):03132 (7)             jsr     NPOP
F5EA E680             (        forth.asm):03133 (4+1)           ldb     ,x+
F5EC 3610             (        forth.asm):03134                 UCNPUSH                 B is preserved
F5EE 4F               (        forth.asm):03135 (1)             clra
F5EF 1F01             (        forth.asm):03136 (4)             tfr     d,x
F5F1 7EE6CA           (        forth.asm):03137 (3)             jmp     NPUSH
                      (        forth.asm):03138         
F5F4 09               (        forth.asm):03139         DASHTR  fcb     9               79-STANDARD (REQ148)
F5F5 2D545241494C494E (        forth.asm):03140                 fcc     '-TRAILING'     ( addr n1 -- addr n2 )
     47
F5FE F5DE             (        forth.asm):03141                 fdb     COUNT
F600 C7               (        forth.asm):03142                 RFCS
F601 BDE6D8           (        forth.asm):03143 (7)             jsr     NPOP            N1 to X
F604 1F10             (        forth.asm):03144 (4)             tfr     x,d             N1 to D
F606 BDE6D8           (        forth.asm):03145 (7)             jsr     NPOP            ADDR to X
F609 1F12             (        forth.asm):03146 (4)             tfr     x,y             Backup to I
F60B 104D             (        forth.asm):03147 (2)             tstd                    Input character count (N1)
F60D 2D1B             (        forth.asm):03148 (3)             blt     @invpar         Cannot be < 0
F60F 308B             (        forth.asm):03149 (4+2)           leax    d,x             X has ADDR+N1
F611 1F06             (        forth.asm):03150 (4)             tfr     d,w             W has N1
F613 105D             (        forth.asm):03151 (2)     @cknxtb tstw
F615 270A             (        forth.asm):03152 (3)             beq     @ckdone
F617 A682             (        forth.asm):03153 (4+1)           lda     ,-x
F619 105A             (        forth.asm):03154 (2)             decw
F61B 8120             (        forth.asm):03155 (2)             cmpa    #SP
F61D 27F4             (        forth.asm):03156 (3)             beq     @cknxtb         Iterate over to the previous byte
F61F 105C             (        forth.asm):03157 (2)             incw
F621 1F21             (        forth.asm):03158 (4)     @ckdone tfr     y,x
F623 3610             (        forth.asm):03159                 UCNPUSH                 String base address
F625 1F61             (        forth.asm):03160 (4)             tfr     w,x
F627 3610             (        forth.asm):03161                 UCNPUSH                 Updated character count
F629 39               (        forth.asm):03162 (4)             rts
F62A C60D             (        forth.asm):03163 (2)     @invpar ldb     #13             Invalid parameter
F62C BDE650           (        forth.asm):03164 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):03165         
F62F 06               (        forth.asm):03166         EXPECT  fcb     6               79-STANDARD (REQ189)
F630 455850454354     (        forth.asm):03167                 fcc     'EXPECT'        ( addr count -- )
F636 F5F4             (        forth.asm):03168                 fdb     DASHTR
F638 C7               (        forth.asm):03169                 RFCS
F639 BDE6D8           (        forth.asm):03170 (7)     EXPCT1  jsr     NPOP
F63C 1F10             (        forth.asm):03171 (4)             tfr     x,d             Buffer length to B
F63E BDE6D8           (        forth.asm):03172 (7)             jsr     NPOP            Buffer address to X. B is preserved
F641 5D               (        forth.asm):03173 (1)             tstb
F642 2701             (        forth.asm):03174 (3)             beq     @expct1
F644 5C               (        forth.asm):03175 (1)             incb                    Account for the NUL terminator
F645 7EE1FD           (        forth.asm):03176 (3)     @expct1 jmp     GETS
                      (        forth.asm):03177         
F648 06               (        forth.asm):03178         ACCEPT  fcb     6               ANSI (Core)
F649 414343455054     (        forth.asm):03179                 fcc     'ACCEPT'
F64F F62F             (        forth.asm):03180                 fdb     EXPECT
F651 C7               (        forth.asm):03181                 RFCS
F652 8DE5             (        forth.asm):03182 (6)             bsr     EXPCT1
F654 4F               (        forth.asm):03183 (1)             clra
F655 3606             (        forth.asm):03184 (4+2)           pshu    d               This saves us "tfr d,x" and "UCNPUSH"
F657 39               (        forth.asm):03185 (4)             rts
                      (        forth.asm):03186         
F658 49               (        forth.asm):03187         TERPRET fcb     $49             79-STANDARD (REF) I make this compile time only
F659 494E544552505245 (        forth.asm):03188                 fcc     'INTERPRET'     ( -- )
     54
F662 F648             (        forth.asm):03189                 fdb     ACCEPT
F664 C7               (        forth.asm):03190                 RFCS
                      (        forth.asm):03191         * Obtain a base buffer address based on the value of BLK.
F665 DC24             (        forth.asm):03192 (4)             ldd     UBLK
F667 2605             (        forth.asm):03193 (3)             bne     @notser
F669 8E02CC           (        forth.asm):03194 (3)             ldx     #CMDBUF         Base buffer address for serial line input
F66C 200A             (        forth.asm):03195 (3)             bra     @rsolvd
                      (        forth.asm):03196         * BLK is NZ, map the block in memory.
F66E 1F01             (        forth.asm):03197 (4)     @notser tfr     d,x             Block number to X
F670 BDE6CA           (        forth.asm):03198 (7)             jsr     NPUSH
F673 BDE92A           (        forth.asm):03199                 RFXT    jsr,BLOCK+8     XT for BLOCK. Map the block in
F676 3710             (        forth.asm):03200                 UCNPOP                  Retrieve buffer address (to X)
                      (        forth.asm):03201         * Note: >IN is supposed to have been set by the caller!
F678 9F1C             (        forth.asm):03202 (4)     @rsolvd stx     BSBFADR
F67A DC22             (        forth.asm):03203 (4)             ldd     UTOIN
F67C 103001           (        forth.asm):03204 (4)             addr    d,x
F67F 7EE0BF           (        forth.asm):03205 (3)             jmp     _INTERP         Finally invoke _INTERP.
                      (        forth.asm):03206         
F682 04               (        forth.asm):03207         LOAD    fcb     4               79-STANDARD (REQ202)
F683 4C4F4144         (        forth.asm):03208                 fcc     'LOAD'          ( blk -- )
F687 F658             (        forth.asm):03209                 fdb     TERPRET
F689 C7               (        forth.asm):03210                 RFCS
F68A BDE6D8           (        forth.asm):03211 (7)             jsr     NPOP
F68D 1037C1           (        forth.asm):03212 (4)             cmpr    0,x
F690 2601             (        forth.asm):03213 (3)             bne     LOAD1
F692 39               (        forth.asm):03214 (4)             rts                     Block 0 is _not_ loadable
F693 3410             (        forth.asm):03215 (4+2)   LOAD1   pshs    x
F695 9E24             (        forth.asm):03216 (4)             ldx     UBLK
F697 BDE6E7           (        forth.asm):03217 (7)             jsr     RPUSH           Push BLK on the return stack
F69A 9E22             (        forth.asm):03218 (4)             ldx     UTOIN
F69C BDE6E7           (        forth.asm):03219 (7)             jsr     RPUSH           Push >IN on the return stack
F69F 3510             (        forth.asm):03220 (4+2)           puls    x
F6A1 9F24             (        forth.asm):03221 (4)             stx     UBLK            Update BLK with the LOAD argument
F6A3 104F             (        forth.asm):03222 (2)             clrd
F6A5 DD22             (        forth.asm):03223 (4)             std     UTOIN           Clear >IN
                      (        forth.asm):03224         * Map the new BLK in, interpret code from there.
F6A7 8DBC             (        forth.asm):03225                 RFXT    bsr,TERPRET+12  XT for INTERPRET
F6A9 BDE705           (        forth.asm):03226 (7)             jsr     RPOP
F6AC 9F22             (        forth.asm):03227 (4)             stx     UTOIN           Restore >IN from the return stack
F6AE BDE705           (        forth.asm):03228 (7)             jsr     RPOP
F6B1 9F24             (        forth.asm):03229 (4)             stx     UBLK            Restore BLK from the return stack
F6B3 7EE71E           (        forth.asm):03230 (3)             jmp     BKIN2PT         Map BLK in (if needed) and update BSBFADR
                      (        forth.asm):03231         
F6B6 04               (        forth.asm):03232         THRU    fcb     4               79-STANDARD (REF)
F6B7 54485255         (        forth.asm):03233                 fcc     'THRU'          ( lowblk highblk -- )
F6BB F682             (        forth.asm):03234                 fdb     LOAD
F6BD C7               (        forth.asm):03235                 RFCS
F6BE BDE6D8           (        forth.asm):03236 (7)             jsr     NPOP
F6C1 1F12             (        forth.asm):03237 (4)             tfr     x,y             Y has highblk
F6C3 BDE6D8           (        forth.asm):03238 (7)             jsr     NPOP            X has lowblk--both are unsigned numbers
F6C6 103712           (        forth.asm):03239 (4)     @thrlop cmpr    x,y
F6C9 2401             (        forth.asm):03240 (3)             bhs     @cont           Limit is >= to the loop index
F6CB 39               (        forth.asm):03241 (4)             rts
F6CC 3430             (        forth.asm):03242 (4+4)   @cont   pshs    x,y             Backup loop parameters
F6CE 3610             (        forth.asm):03243                 UCNPUSH                 Current block number to the data stack
F6D0 8DB8             (        forth.asm):03244                 RFXT    bsr,LOAD+7      XT for LOAD
F6D2 3530             (        forth.asm):03245 (4+4)           puls    y,x             Retrieve loop parameters
F6D4 3001             (        forth.asm):03246 (4+1)           leax    1,x             Iterate over to the next screen
F6D6 20EE             (        forth.asm):03247 (3)             bra     @thrlop
                      (        forth.asm):03248         
F6D8 83               (        forth.asm):03249         NXTBLK  fcb     $83             79-STANDARD (REF131)
F6D9 2D2D3E           (        forth.asm):03250                 fcc     '-->'           ( -- )
F6DC F6B6             (        forth.asm):03251                 fdb     THRU
F6DE C7               (        forth.asm):03252                 RFCS
F6DF 9E24             (        forth.asm):03253 (4)             ldx     UBLK
F6E1 3001             (        forth.asm):03254 (4+1)           leax    1,x
F6E3 DC24             (        forth.asm):03255 (4)     NXTBLK1 ldd     UBLK
F6E5 2603             (        forth.asm):03256 (3)             bne     @nfrmb0         Not invoked from block 0 (the console)
                      (        forth.asm):03257         * --> or CONTINUED are being invoked from the console. Flag that condition
                      (        forth.asm):03258         * as a hint to the interpreter so that feedback is provided even if we are
                      (        forth.asm):03259         * back from a block.
F6E7 4C               (        forth.asm):03260 (1)             inca                    1 to A
F6E8 9736             (        forth.asm):03261 (3)             sta     NBCTFB0
F6EA 9F24             (        forth.asm):03262 (4)     @nfrmb0 stx     UBLK            Update BLK
F6EC 104F             (        forth.asm):03263 (2)             clrd
F6EE DD22             (        forth.asm):03264 (4)             std     UTOIN           0 >IN !
                      (        forth.asm):03265         * Map the new BLK in, interpret code from there.
F6F0 7EF665           (        forth.asm):03266                 RFXT    jmp,TERPRET+12  XT for INTERPRET
                      (        forth.asm):03267         
F6F3 89               (        forth.asm):03268         CONTIND fcb     $89             79-STANDARD (REF)
F6F4 434F4E54494E5545 (        forth.asm):03269                 fcc     'CONTINUED'     ( nextblk -- )
     44
F6FD F6D8             (        forth.asm):03270                 fdb     NXTBLK
F6FF C7               (        forth.asm):03271                 RFCS
F700 BDE6D8           (        forth.asm):03272 (7)             jsr     NPOP            NEXTBLK to X
F703 1037C1           (        forth.asm):03273 (4)             cmpr    0,x             Cannot interpret from block 0!
F706 26DB             (        forth.asm):03274 (3)             bne     NXTBLK1
F708 C60D             (        forth.asm):03275 (2)             ldb     #13             Illegal argument
F70A BDE650           (        forth.asm):03276 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):03277         
F70D 02               (        forth.asm):03278         MILLIS  fcb     2               79-STANDARD (REF)
F70E 4D53             (        forth.asm):03279                 fcc     'MS'            ( mscount -- )
F710 F6F3             (        forth.asm):03280                 fdb     CONTIND
F712 C7               (        forth.asm):03281                 RFCS
F713 BDE6D8           (        forth.asm):03282 (7)             jsr     NPOP
F716 1037C1           (        forth.asm):03283 (4)             cmpr    0,x
F719 2601             (        forth.asm):03284 (3)             bne     MILLIS1
F71B 39               (        forth.asm):03285 (4)             rts
F71C CC03E2           (        forth.asm):03286 (3)     MILLIS1 ldd     #MSLCNT
F71F 104A             (        forth.asm):03287 (2)     @ms2    decd
F721 26FC             (        forth.asm):03288 (3)             bne     @ms2
F723 301F             (        forth.asm):03289 (4+1)           leax    -1,x
F725 26F5             (        forth.asm):03290 (3)             bne     MILLIS1
F727 39               (        forth.asm):03291 (4)             rts
                      (        forth.asm):03292         
F728 04               (        forth.asm):03293         KEYP    fcb     4               ANSI (Facility)
F729 4B45593F         (        forth.asm):03294                 fcc     'KEY?'          ( -- flag )
F72D F70D             (        forth.asm):03295                 fdb     MILLIS
F72F C7               (        forth.asm):03296                 RFCS
F730 1FC1             (        forth.asm):03297 (4)             tfr     0,x
F732 8615             (        forth.asm):03298 (2)             lda     #ACIRTS0
F734 B7D800           (        forth.asm):03299 (4)             sta     ACIACTL         Assert RTS#
F737 8E0028           (        forth.asm):03300 (3)             ldx     #40
F73A 8DE0             (        forth.asm):03301 (6)             bsr     MILLIS1         Wait for 40 milliseconds
                      (        forth.asm):03302         * X is guaranteed to be 0 upon return from MILLIS1.
F73C 8601             (        forth.asm):03303 (2)             lda     #ACIRDRF
F73E B5D800           (        forth.asm):03304 (4)             bita    ACIACTL
F741 2702             (        forth.asm):03305 (3)             beq     @keyp1
F743 3001             (        forth.asm):03306 (4+1)           leax    1,x             Return the 79-STANDARD true flag
F745 8655             (        forth.asm):03307 (2)     @keyp1  lda     #ACIRTS1
F747 B7D800           (        forth.asm):03308 (4)             sta     ACIACTL         Negate RTS#
F74A 7EE6CA           (        forth.asm):03309 (3)             jmp     NPUSH
                      (        forth.asm):03310         
F74D 03               (        forth.asm):03311         KEY     fcb     3               79-STANDARD (REQ100)
F74E 4B4559           (        forth.asm):03312                 fcc     'KEY'
F751 F728             (        forth.asm):03313                 fdb     KEYP
F753 C7               (        forth.asm):03314                 RFCS
F754 BDE1C5           (        forth.asm):03315 (7)             jsr     GETCH
F757 1F89             (        forth.asm):03316 (4)             tfr     a,b
F759 4F               (        forth.asm):03317 (1)             clra
F75A 1F01             (        forth.asm):03318 (4)             tfr     d,x
F75C 7EE6CA           (        forth.asm):03319 (3)             jmp     NPUSH
                      (        forth.asm):03320         
F75F 04               (        forth.asm):03321         EMIT    fcb     4               79-STANDARD (REQ207)
F760 454D4954         (        forth.asm):03322                 fcc     'EMIT'
F764 F74D             (        forth.asm):03323                 fdb     KEY
F766 C7               (        forth.asm):03324                 RFCS
F767 BDE6D8           (        forth.asm):03325 (7)             jsr     NPOP
F76A 1F10             (        forth.asm):03326 (4)             tfr     x,d
F76C 1F98             (        forth.asm):03327 (4)             tfr     b,a
F76E 7EE1B6           (        forth.asm):03328 (3)             jmp     PUTCH
                      (        forth.asm):03329         
F771 01               (        forth.asm):03330         PLUS    fcb     1               79-STANDARD (REQ121)
F772 2B               (        forth.asm):03331                 fcc     '+'             ( n1 n2 -- sum )
F773 F75F             (        forth.asm):03332                 fdb     EMIT
F775 C7               (        forth.asm):03333                 RFCS
F776 BDE38F           (        forth.asm):03334 (7)             jsr     MIN2PST         We need at least two cells stacked up
F779 EC42             (        forth.asm):03335 (5+1)           ldd     2,u             N1
F77B E3C4             (        forth.asm):03336 (5+0)           addd    ,u              N2
F77D ED42             (        forth.asm):03337 (5+1)           std     2,u             SUM
F77F 3342             (        forth.asm):03338 (4+1)           leau    2,u             Drop the top cell
F781 39               (        forth.asm):03339 (4)             rts
                      (        forth.asm):03340         
F782 02               (        forth.asm):03341         ONEP    fcb     2               79-STANDARD (REQ107)
F783 312B             (        forth.asm):03342                 fcc     '1+'
F785 F771             (        forth.asm):03343                 fdb     PLUS
F787 C7               (        forth.asm):03344                 RFCS
F788 BDE38A           (        forth.asm):03345 (7)             jsr     MIN1PST         We need at least one cell stacked up
F78B ECC4             (        forth.asm):03346 (5+0)           ldd     ,u
F78D 104C             (        forth.asm):03347 (2)             incd
F78F EDC4             (        forth.asm):03348 (5+0)           std     ,u
F791 39               (        forth.asm):03349 (4)             rts
                      (        forth.asm):03350         
F792 02               (        forth.asm):03351         TWOP    fcb     2               79-STANDARD (REQ135)
F793 322B             (        forth.asm):03352                 fcc     '2+'            ( n -- n+2 )
F795 F782             (        forth.asm):03353                 fdb     ONEP
F797 C7               (        forth.asm):03354                 RFCS
F798 BDE38A           (        forth.asm):03355 (7)             jsr     MIN1PST         We need at least one cell stacked up
F79B ECC4             (        forth.asm):03356 (5+0)           ldd     ,u
F79D C30002           (        forth.asm):03357 (3)             addd    #2
F7A0 EDC4             (        forth.asm):03358 (5+0)           std     ,u
F7A2 39               (        forth.asm):03359 (4)             rts
                      (        forth.asm):03360         
F7A3 01               (        forth.asm):03361         MINUS   fcb     1               79-STANDARD (REQ134)
F7A4 2D               (        forth.asm):03362                 fcc     '-'             ( n1 n2 -- dif )
F7A5 F792             (        forth.asm):03363                 fdb     TWOP
F7A7 C7               (        forth.asm):03364                 RFCS
F7A8 BDE38F           (        forth.asm):03365 (7)             jsr     MIN2PST         We need at least two cells stacked up
F7AB EC42             (        forth.asm):03366 (5+1)           ldd     2,u             N1
F7AD A3C4             (        forth.asm):03367 (5+0)           subd    ,u              N2
F7AF ED42             (        forth.asm):03368 (5+1)           std     2,u             DIF
F7B1 3342             (        forth.asm):03369 (4+1)           leau    2,u             Drop the top cell
F7B3 39               (        forth.asm):03370 (4)             rts
                      (        forth.asm):03371         
F7B4 02               (        forth.asm):03372         ONEM    fcb     2               79-STANDARD (REQ105)
F7B5 312D             (        forth.asm):03373                 fcc     '1-'
F7B7 F7A3             (        forth.asm):03374                 fdb     MINUS
F7B9 C7               (        forth.asm):03375                 RFCS
F7BA BDE38A           (        forth.asm):03376 (7)             jsr     MIN1PST         We need at least one cell stacked up
F7BD ECC4             (        forth.asm):03377 (5+0)           ldd     ,u
F7BF 104A             (        forth.asm):03378 (2)             decd
F7C1 EDC4             (        forth.asm):03379 (5+0)           std     ,u
F7C3 39               (        forth.asm):03380 (4)             rts
                      (        forth.asm):03381         
F7C4 02               (        forth.asm):03382         TWOM    fcb     2               79-STANDARD (REQ129)
F7C5 322D             (        forth.asm):03383                 fcc     '2-'
F7C7 F7B4             (        forth.asm):03384                 fdb     ONEM
F7C9 C7               (        forth.asm):03385                 RFCS
F7CA BDE38A           (        forth.asm):03386 (7)             jsr     MIN1PST         We need at least one cell stacked up
F7CD ECC4             (        forth.asm):03387 (5+0)           ldd     ,u
F7CF 830002           (        forth.asm):03388 (3)             subd    #2
F7D2 EDC4             (        forth.asm):03389 (5+0)           std     ,u
F7D4 39               (        forth.asm):03390 (4)             rts
                      (        forth.asm):03391         
F7D5 01               (        forth.asm):03392         ZEROL   fcb     1               Non-standard
F7D6 30               (        forth.asm):03393                 fcc     '0'
F7D7 F7C4             (        forth.asm):03394                 fdb     TWOM
F7D9 C7               (        forth.asm):03395                 RFCS
F7DA 1FC1             (        forth.asm):03396 (4)             tfr     0,x
F7DC 7EE6CA           (        forth.asm):03397 (3)             jmp     NPUSH
                      (        forth.asm):03398         
F7DF 01               (        forth.asm):03399         ONEL    fcb     1               Non-standard
F7E0 31               (        forth.asm):03400                 fcc     '1'
F7E1 F7D5             (        forth.asm):03401                 fdb     ZEROL
F7E3 C7               (        forth.asm):03402                 RFCS
F7E4 8E0001           (        forth.asm):03403 (3)             ldx     #1
F7E7 7EE6CA           (        forth.asm):03404 (3)             jmp     NPUSH
                      (        forth.asm):03405         
F7EA 01               (        forth.asm):03406         TWOL    fcb     1               Non-standard
F7EB 32               (        forth.asm):03407                 fcc     '2'
F7EC F7DF             (        forth.asm):03408                 fdb     ONEL
F7EE C7               (        forth.asm):03409                 RFCS
F7EF 8E0002           (        forth.asm):03410 (3)             ldx     #2
F7F2 7EE6CA           (        forth.asm):03411 (3)             jmp     NPUSH
                      (        forth.asm):03412         
F7F5 05               (        forth.asm):03413         SHIFT   fcb     5               79-STANDARD (Ref)
F7F6 5348494654       (        forth.asm):03414                 fcc     'SHIFT'
F7FB F7EA             (        forth.asm):03415                 fdb     TWOL
F7FD C7               (        forth.asm):03416                 RFCS
F7FE BDE38F           (        forth.asm):03417 (7)             jsr     MIN2PST         Two cells need to be stacked up
F801 10A6C4           (        forth.asm):03418 (6+0)           ldw     ,u              Shift bitcount
F804 EC42             (        forth.asm):03419 (5+1)           ldd     2,u             The data itself
F806 105D             (        forth.asm):03420 (2)     @shftlp tstw
F808 270E             (        forth.asm):03421 (3)             beq     @shfdon
F80A 2D06             (        forth.asm):03422 (3)             blt     @shftrg
F80C 1048             (        forth.asm):03423 (2)             lsld                    Shift left (W is positive)
F80E 105A             (        forth.asm):03424 (2)             decw
F810 20F4             (        forth.asm):03425 (3)             bra     @shftlp
F812 1044             (        forth.asm):03426 (2)     @shftrg lsrd                    Shift right (W is negative)
F814 105C             (        forth.asm):03427 (2)             incw
F816 20EE             (        forth.asm):03428 (3)             bra     @shftlp
F818 ED42             (        forth.asm):03429 (5+1)   @shfdon std     2,u             Return value stored there
F81A 3342             (        forth.asm):03430 (4+1)           leau    2,u             Drop one cell from the data stack
F81C 39               (        forth.asm):03431 (4)             rts
                      (        forth.asm):03432         
                      (        forth.asm):03433         * Signed multiplication by hardware support.
F81D 01               (        forth.asm):03434         MULT    fcb     1               79-STANDARD (REQ138)
F81E 2A               (        forth.asm):03435                 fcc     '*'
F81F F7F5             (        forth.asm):03436                 fdb     SHIFT
F821 C7               (        forth.asm):03437                 RFCS
F822 BDE38F           (        forth.asm):03438 (7)             jsr     MIN2PST         Two cells need to be stacked up
F825 EC42             (        forth.asm):03439 (5+1)           ldd     2,u
F827 11AFC4           (        forth.asm):03440 (30+0)          muld    ,u
F82A 10A742           (        forth.asm):03441 (6+1)           stw     2,u             Return only the lower 16 bits
F82D 3342             (        forth.asm):03442 (4+1)           leau    2,u             Drop one cell from the data stack
F82F 39               (        forth.asm):03443 (4)             rts
                      (        forth.asm):03444         
F830 02               (        forth.asm):03445         TWOTIM  fcb     2               79-STANDARD (REF)
F831 322A             (        forth.asm):03446                 fcc     '2*'
F833 F81D             (        forth.asm):03447                 fdb     MULT
F835 C7               (        forth.asm):03448                 RFCS
F836 BDE38A           (        forth.asm):03449 (7)             jsr     MIN1PST         One cell needs to be stacked up
F839 ECC4             (        forth.asm):03450 (5+0)           ldd     ,u
F83B 1048             (        forth.asm):03451 (2)             asld
F83D EDC4             (        forth.asm):03452 (5+0)           std     ,u
F83F 39               (        forth.asm):03453 (4)             rts
                      (        forth.asm):03454         
F840 02               (        forth.asm):03455         TWODIV  fcb     2
F841 322F             (        forth.asm):03456                 fcc     '2/'
F843 F830             (        forth.asm):03457                 fdb     TWOTIM
F845 C7               (        forth.asm):03458                 RFCS
F846 BDE38A           (        forth.asm):03459 (7)             jsr     MIN1PST         One cell needs to be stacked up
F849 ECC4             (        forth.asm):03460 (5+0)           ldd     ,u
F84B 1047             (        forth.asm):03461 (2)             asrd
F84D EDC4             (        forth.asm):03462 (5+0)           std     ,u
F84F 39               (        forth.asm):03463 (4)             rts
                      (        forth.asm):03464         
                      (        forth.asm):03465         * /, MOD and /MOD are essentially the same function returning
                      (        forth.asm):03466         * the different parts returned by DIVQ.
                      (        forth.asm):03467         * We use a global variable to distinguish which functionality
                      (        forth.asm):03468         * is being requested:
                      (        forth.asm):03469         * 0: return the modulo and the quotient (/MOD).
                      (        forth.asm):03470         * 1: return the modulo only (MOD).
                      (        forth.asm):03471         * 2: return the quotient only (/).
F850 01               (        forth.asm):03472         DIV     fcb     1               79-STANDARD (REQ178)
F851 2F               (        forth.asm):03473                 fcc     '/'             ( N1 N2 -- N3 [N4] )
F852 F840             (        forth.asm):03474                 fdb     TWODIV
F854 C7               (        forth.asm):03475                 RFCS
F855 8602             (        forth.asm):03476 (2)             lda     #2
F857 972D             (        forth.asm):03477 (3)             sta     DIVFCN          Function 2: return only the quotient
F859 BDE38F           (        forth.asm):03478 (7)     DIV1    jsr     MIN2PST         At least two cells need to be stacked up
F85C 0F2E             (        forth.asm):03479 (5)             clr     F83DIVF         Assume no adjustment required for floored div.
F85E A642             (        forth.asm):03480 (4+1)           lda     2,u             Numerator's MSB
F860 A8C4             (        forth.asm):03481 (4+0)           eora    ,u              Different sign from the denominator's MSB?
F862 2A02             (        forth.asm):03482 (3)             bpl     @divprc         No, proceed to the division code
F864 0C2E             (        forth.asm):03483 (5)             inc     F83DIVF         Numerator and denominator have different signs
                      (        forth.asm):03484         * Division by zero conditions are dealt with through the trap handler.
F866 104F             (        forth.asm):03485 (2)     @divprc clrd                    Clear the numerator's MSC
F868 10A642           (        forth.asm):03486 (6+1)           ldw     2,u             Numerator's LSC
F86B 2A02             (        forth.asm):03487 (3)             bpl     @dvnsex         Branch if no sign extention is needed
                      (        forth.asm):03488         * Sign extention from W to Q.
F86D 1043             (        forth.asm):03489 (2)             comd                    -1 to D (numerator's MSC)
F86F 11AEC4           (        forth.asm):03490 (36)    @dvnsex divq    ,u              ,u has the denominator
F872 8D19             (        forth.asm):03491 (6)             bsr     FDIVADJ         Perform floored division adjustment, if needed
F874 0D2D             (        forth.asm):03492 (4)     @no83ad tst     DIVFCN
F876 2606             (        forth.asm):03493 (3)             bne     @div4
F878 ED42             (        forth.asm):03494 (5+1)           std     2,u             Function 0: return the modulo and the quotient
F87A 10A7C4           (        forth.asm):03495 (6+0)   @div3   stw     ,u              Function 2: return only the quotient
F87D 39               (        forth.asm):03496 (4)             rts
F87E 3342             (        forth.asm):03497 (4+1)   @div4   leau    2,u             Drop one cell from the data stack
F880 1F07             (        forth.asm):03498 (4)             tfr     d,v             Backup the modulo
F882 962D             (        forth.asm):03499 (3)             lda     DIVFCN
F884 8101             (        forth.asm):03500 (2)             cmpa    #1
F886 26F2             (        forth.asm):03501 (3)             bne     @div3
F888 1F70             (        forth.asm):03502 (4)             tfr     v,d             Restore the modulo
F88A EDC4             (        forth.asm):03503 (5+0)           std     ,u              Function 1: return only the modulo
F88C 39               (        forth.asm):03504 (4)             rts
                      (        forth.asm):03505         
                      (        forth.asm):03506         * Quotient is returned in W, modulo in D but this is symmetric division :-(
                      (        forth.asm):03507         * Need to return a floored division result for compat. with F83 and ANSI impls.
F88D 104D             (        forth.asm):03508 (2)     FDIVADJ tstd                    Is the remainder zero?
F88F 2708             (        forth.asm):03509 (3)             beq     @no83ad         Yes. No adjusment required for floored division
F891 0D2E             (        forth.asm):03510 (4)             tst     F83DIVF         Different signs for numerator and denominator?
F893 2704             (        forth.asm):03511 (3)             beq     @no83ad         No. Adjusment not needed for floored division
                      (        forth.asm):03512         * Adjusment for F83 floored division.
F895 105A             (        forth.asm):03513 (2)             decw                    Decrement the quotient
F897 E3C4             (        forth.asm):03514 (5+0)           addd    ,u              Add the denominator to the modulo
F899 39               (        forth.asm):03515 (4)     @no83ad rts
                      (        forth.asm):03516         
F89A 03               (        forth.asm):03517         MOD     fcb     3               79-STANDARD (REQ104)
F89B 4D4F44           (        forth.asm):03518                 fcc     'MOD'           ( N1 N2 -- N3 )
F89E F850             (        forth.asm):03519                 fdb     DIV
F8A0 C7               (        forth.asm):03520                 RFCS
F8A1 8601             (        forth.asm):03521 (2)             lda     #1
F8A3 972D             (        forth.asm):03522 (3)             sta     DIVFCN
F8A5 20B2             (        forth.asm):03523 (3)             bra     DIV1
                      (        forth.asm):03524         
F8A7 04               (        forth.asm):03525         MDIV    fcb     4               79-STANDARD (REQ198)
F8A8 2F4D4F44         (        forth.asm):03526                 fcc     '/MOD'          ( N1 N2 -- N3 N4 )
F8AC F89A             (        forth.asm):03527                 fdb     MOD
F8AE C7               (        forth.asm):03528                 RFCS
F8AF 0F2D             (        forth.asm):03529 (5)             clr     DIVFCN
F8B1 20A6             (        forth.asm):03530 (3)             bra     DIV1
                      (        forth.asm):03531         
F8B3 02               (        forth.asm):03532         STRSLSH fcb     2               79-STANDARD (REQ220)
F8B4 2A2F             (        forth.asm):03533                 fcc     '*/'            ( N1 N2 N3 -- N4 [N5] )
F8B6 F8A7             (        forth.asm):03534                 fdb     MDIV
F8B8 C7               (        forth.asm):03535                 RFCS
F8B9 8601             (        forth.asm):03536 (2)             lda     #1
F8BB 972F             (        forth.asm):03537 (3)             sta     STSLFCN
F8BD BDE394           (        forth.asm):03538 (7)     STRSL1  jsr     MIN3PST         Three cells need to be stacked up
F8C0 0F2E             (        forth.asm):03539 (5)             clr     F83DIVF         Assume no adjustment required for floored div.
                      (        forth.asm):03540         * Division by zero conditions are dealt with through the trap handler.
F8C2 EC44             (        forth.asm):03541 (5+1)           ldd     4,u             N1
F8C4 11AF42           (        forth.asm):03542 (30+1)          muld    2,u             N2 (N1 * N2 -> D:W)
F8C7 3402             (        forth.asm):03543 (4+1)           pshs    a               Product's MSC's MSB
F8C9 A8C4             (        forth.asm):03544 (4+0)           eora    ,u              Different sign from the denominator's?
F8CB 2A02             (        forth.asm):03545 (3)             bpl     @stslpr         No. Floored division adjustment not needed
F8CD 0C2E             (        forth.asm):03546 (5)             inc     F83DIVF
F8CF 3502             (        forth.asm):03547 (4+1)   @stslpr puls    a
F8D1 11AEC4           (        forth.asm):03548 (36)            divq    ,u              N3
F8D4 8DB7             (        forth.asm):03549 (6)             bsr     FDIVADJ         Perform floored division adjustment, if needed
F8D6 3342             (        forth.asm):03550 (4+1)           leau    2,u
F8D8 0D2F             (        forth.asm):03551 (4)             tst     STSLFCN
F8DA 2606             (        forth.asm):03552 (3)             bne     @strsl2         Just the quotient, Ma'am!
F8DC ED42             (        forth.asm):03553 (5+1)           std     2,u             N4: the modulo
F8DE 10A7C4           (        forth.asm):03554 (6+0)           stw     ,u              N5: the quotient
F8E1 39               (        forth.asm):03555 (4)             rts
F8E2 3342             (        forth.asm):03556 (4+1)   @strsl2 leau    2,u
F8E4 10A7C4           (        forth.asm):03557 (6+0)           stw     ,u              N4
F8E7 39               (        forth.asm):03558 (4)             rts
                      (        forth.asm):03559         
F8E8 05               (        forth.asm):03560         STRSLMD fcb     5               79-STANDARD (REQ192)
F8E9 2A2F4D4F44       (        forth.asm):03561                 fcc     '*/MOD'         ( N1 N2 N3 -- N4 N5 )
F8EE F8B3             (        forth.asm):03562                 fdb     STRSLSH
F8F0 C7               (        forth.asm):03563                 RFCS
F8F1 0F2F             (        forth.asm):03564 (5)             clr     STSLFCN
F8F3 20C8             (        forth.asm):03565 (3)             bra     STRSL1
                      (        forth.asm):03566         
                      (        forth.asm):03567         * Returns the current value of the S register (informational only).
F8F5 01               (        forth.asm):03568         SYSSTK  fcb     1               Non-standard
F8F6 53               (        forth.asm):03569                 fcc     'S'
F8F7 F8E8             (        forth.asm):03570                 fdb     STRSLMD
F8F9 C7               (        forth.asm):03571                 RFCS
F8FA 1F41             (        forth.asm):03572 (4)             tfr     s,x
F8FC 7EE6CA           (        forth.asm):03573 (3)             jmp     NPUSH
                      (        forth.asm):03574         
F8FF 07               (        forth.asm):03575         PAYLOAD fcb     7               Non standard
F900 5041594C4F4144   (        forth.asm):03576                 fcc     'PAYLOAD'       ( -- len ) where len is the code payload
F907 F8F5             (        forth.asm):03577                 fdb     SYSSTK          of the word located by FIND (or NULL)
F909 C7               (        forth.asm):03578                 RFCS
F90A 9E10             (        forth.asm):03579 (4)             ldx     FNDPLD          Code payload reported by FIND
F90C 7EE6CA           (        forth.asm):03580 (3)             jmp     NPUSH
                      (        forth.asm):03581         
                      (        forth.asm):03582         * Differences from the original code:
                      (        forth.asm):03583         * - display number in HEX rather than in the current base.
                      (        forth.asm):03584         * - dropped feat: the original stuff was interactively paged by 15 line screens.
                      (        forth.asm):03585         * - added feat: display code implementation payload.
                      (        forth.asm):03586         * - added feat: display the immedediate and define (compile time only) flags.
                      (        forth.asm):03587         * - added feat: display the forgettable status (R/W). Everything user
                      (        forth.asm):03588         *   defined is forgettable (i.e. RAM resident).
F90F 05               (        forth.asm):03589         VLIST   fcb     5               Non-standard
F910 564C495354       (        forth.asm):03590                 fcc     'VLIST'         ( -- )
F915 F8FF             (        forth.asm):03591                 fdb     PAYLOAD
F917 C7               (        forth.asm):03592                 RFCS
F918 9E08             (        forth.asm):03593 (4)             ldx     DICEND
F91A 9F16             (        forth.asm):03594 (4)             stx     VLPRVEP         Last word code address + 1
F91C 9E06             (        forth.asm):03595 (4)             ldx     LSTWAD
F91E 9F18             (        forth.asm):03596 (4)     @vlist1 stx     VLPRVHD         Last word header pointer
F920 108E03A0         (        forth.asm):03597 (4)             ldy     #TBUFF
F924 E680             (        forth.asm):03598 (4+1)           ldb     ,x+
F926 3404             (        forth.asm):03599 (4+1)           pshs    b
F928 C41F             (        forth.asm):03600 (2)             andb    #WRLNMSK        Mask out word length
F92A 4F               (        forth.asm):03601 (1)             clra
F92B 3404             (        forth.asm):03602 (4+1)           pshs    b               Preserve word length
F92D 1F06             (        forth.asm):03603 (4)             tfr     d,w
F92F 113812           (        forth.asm):03604 (6+?)           tfm     x+,y+
F932 3502             (        forth.asm):03605 (4+1)           puls    a               Restore word length to A
F934 C620             (        forth.asm):03606 (2)             ldb     #WRLNMSK+1
F936 103289           (        forth.asm):03607 (4)             subr    a,b             Number of spaces we want to emit
F939 8620             (        forth.asm):03608 (2)             lda     #SP
F93B A7A0             (        forth.asm):03609 (4+1)   @vlist2 sta     ,y+
F93D 5A               (        forth.asm):03610 (1)             decb
F93E 26FB             (        forth.asm):03611 (3)             bne     @vlist2
F940 6FA0             (        forth.asm):03612 (6+1)           clr     ,y+             Terminate formatted output string
F942 3410             (        forth.asm):03613 (4+2)           pshs    x               Address of the current word backlink address
F944 BDE1E7           (        forth.asm):03614 (7)             jsr     PUTCR           Carriage return is output before anything else
F947 8E03A0           (        forth.asm):03615 (3)             ldx     #TBUFF
F94A BDE1DA           (        forth.asm):03616 (7)             jsr     PUTS            Output word name formatted on 17 chars + SP
F94D AEE4             (        forth.asm):03617 (5+0)           ldx     ,s
                      (        forth.asm):03618                 IFNE    RELFEAT
F94F 3003             (        forth.asm):03619 (4+1)           leax    3,x             Word XT to X (Skip backlink and checksum)
                      (        forth.asm):03620                 ELSE
                      (        forth.asm):03621                 leax    2,x             Word XT to X (Skip backlink)
                      (        forth.asm):03622                 ENDC
F951 1F10             (        forth.asm):03623 (4)             tfr     x,d             CVNSTR depends on UBASE and we want HEX output
F953 8E03A0           (        forth.asm):03624 (3)             ldx     #TBUFF
F956 BDE174           (        forth.asm):03625 (7)             jsr     HDMP4           So we use trusted debugging code
F959 8E03A0           (        forth.asm):03626 (3)             ldx     #TBUFF
F95C BDE1DA           (        forth.asm):03627 (7)             jsr     PUTS
                      (        forth.asm):03628         * Now to display word implementation length.
                      (        forth.asm):03629         * Implementation code length is from ,s+3 (or 2) to VLPRVEP
F95F 8609             (        forth.asm):03630 (2)             lda     #HT
F961 BDE1B6           (        forth.asm):03631 (7)             jsr     PUTCH
F964 9E16             (        forth.asm):03632 (4)             ldx     VLPRVEP
F966 10AEE4           (        forth.asm):03633 (6+0)           ldy     ,s
                      (        forth.asm):03634                 IFNE    RELFEAT
F969 3123             (        forth.asm):03635 (4+1)           leay    3,y             Current word code entry address
                      (        forth.asm):03636                 ELSE
                      (        forth.asm):03637                 leay    2,y             Current word code entry address
                      (        forth.asm):03638                 ENDC
F96B 103221           (        forth.asm):03639 (4)             subr    y,x
F96E 1F10             (        forth.asm):03640 (4)             tfr     x,d
F970 8E03A0           (        forth.asm):03641 (3)             ldx     #TBUFF
F973 BDE174           (        forth.asm):03642 (7)             jsr     HDMP4
F976 8E03A0           (        forth.asm):03643 (3)             ldx     #TBUFF
F979 BDE1DA           (        forth.asm):03644 (7)             jsr     PUTS
                      (        forth.asm):03645         # Display attribute flags.
F97C 8609             (        forth.asm):03646 (2)             lda     #HT
F97E BDE1B6           (        forth.asm):03647 (7)             jsr     PUTCH
F981 8E03A0           (        forth.asm):03648 (3)             ldx     #TBUFF
F984 E662             (        forth.asm):03649 (4+1)           ldb     2,s             Word attribute to B
F986 862D             (        forth.asm):03650 (2)             lda     #'-
F988 C580             (        forth.asm):03651 (2)             bitb    #IMDFLM         Check for immediate
F98A 2702             (        forth.asm):03652 (3)             beq     @vlist4
F98C 8649             (        forth.asm):03653 (2)             lda     #'I
F98E A780             (        forth.asm):03654 (4+1)   @vlist4 sta     ,x+
F990 862D             (        forth.asm):03655 (2)             lda     #'-
F992 C540             (        forth.asm):03656 (2)             bitb    #DEFFLM         Check for define (compile time only)
F994 2702             (        forth.asm):03657 (3)             beq     @vlist5
F996 8643             (        forth.asm):03658 (2)             lda     #'C
F998 A780             (        forth.asm):03659 (4+1)   @vlist5 sta     ,x+
                      (        forth.asm):03660                 IFNE    RELFEAT
F99A 862D             (        forth.asm):03661 (2)             lda     #'-
F99C C520             (        forth.asm):03662 (2)             bitb    #MONFLM         Check for monitored status
F99E 2702             (        forth.asm):03663 (3)             beq     @vlst51
F9A0 864D             (        forth.asm):03664 (2)             lda     #'M
F9A2 A780             (        forth.asm):03665 (4+1)   @vlst51 sta     ,x+
                      (        forth.asm):03666                 ENDC
                      (        forth.asm):03667         * Check for forgettable also. In ROM => R else W unless we just processed '@'.
F9A4 8652             (        forth.asm):03668 (2)             lda     #'R
F9A6 10AEE4           (        forth.asm):03669 (6+0)           ldy     ,s
                      (        forth.asm):03670                 IFNE    RELFEAT
F9A9 3123             (        forth.asm):03671 (4+1)           leay    3,y             Word entry point to Y
                      (        forth.asm):03672                 ELSE
                      (        forth.asm):03673                 leay    2,y             Word entry point to Y
                      (        forth.asm):03674                 ENDC
F9AB 108C0C15         (        forth.asm):03675 (4)             cmpy    #RAMFTCH        @ in RAM is unforgettable
F9AF 2708             (        forth.asm):03676 (3)             beq     @vlist6
F9B1 108CE000         (        forth.asm):03677 (4)             cmpy    #ROMSTRT        as are all ROM resident words
F9B5 2402             (        forth.asm):03678 (3)             bcc     @vlist6
F9B7 8657             (        forth.asm):03679 (2)             lda     #'W
F9B9 A780             (        forth.asm):03680 (4+1)   @vlist6 sta     ,x+
F9BB 6F84             (        forth.asm):03681 (6+0)           clr     ,x
F9BD 8E03A0           (        forth.asm):03682 (3)             ldx     #TBUFF
F9C0 BDE1DA           (        forth.asm):03683 (7)             jsr     PUTS
                      (        forth.asm):03684         * The point at which VLPRVHD==WDICSPC is a singularity (RAM to ROM transition).
F9C3 9E18             (        forth.asm):03685 (4)             ldx     VLPRVHD
F9C5 8C0C10           (        forth.asm):03686 (3)             cmpx    #WDICSPC
F9C8 2608             (        forth.asm):03687 (3)             bne     @vlist7
F9CA 8EFDAD           (        forth.asm):03688 (3)             ldx     #QMARK          Word just before @ (ROM flavor)
F9CD 9F18             (        forth.asm):03689 (4)             stx     VLPRVHD
F9CF 8EFDB8           (        forth.asm):03690 (3)             ldx     #THEEND
F9D2 9F16             (        forth.asm):03691 (4)     @vlist7 stx     VLPRVEP
F9D4 3510             (        forth.asm):03692 (4+2)           puls    x
F9D6 3504             (        forth.asm):03693 (4+1)           puls    b
F9D8 AE84             (        forth.asm):03694 (5+0)           ldx     ,x              Point to previous word
F9DA 1026FF40         (        forth.asm):03695 (5)             lbne    @vlist1
F9DE 39               (        forth.asm):03696 (4)             rts
                      (        forth.asm):03697         
F9DF 05               (        forth.asm):03698         STATE   fcb     5
F9E0 5354415445       (        forth.asm):03699                 fcc     'STATE'
F9E5 F90F             (        forth.asm):03700                 fdb     VLIST
F9E7 C7               (        forth.asm):03701                 RFCS
F9E8 8E0120           (        forth.asm):03702 (3)             ldx     #USTATE
F9EB 7EE6CA           (        forth.asm):03703 (3)             jmp     NPUSH
                      (        forth.asm):03704         
F9EE 04               (        forth.asm):03705         BASE    fcb     4               79-STANDARD (REQ115)
F9EF 42415345         (        forth.asm):03706                 fcc     'BASE'
F9F3 F9DF             (        forth.asm):03707                 fdb     STATE
F9F5 C7               (        forth.asm):03708                 RFCS
F9F6 8E011E           (        forth.asm):03709 (3)             ldx     #UBASE
F9F9 7EE6CA           (        forth.asm):03710 (3)             jmp     NPUSH
                      (        forth.asm):03711         
F9FC 03               (        forth.asm):03712         BIN     fcb     3               Non-standard
F9FD 42494E           (        forth.asm):03713                 fcc     'BIN'
FA00 F9EE             (        forth.asm):03714                 fdb     BASE
FA02 C7               (        forth.asm):03715                 RFCS
FA03 CC0002           (        forth.asm):03716 (3)             ldd     #2
FA06 DD1E             (        forth.asm):03717 (4)             std     UBASE
FA08 39               (        forth.asm):03718 (4)             rts
                      (        forth.asm):03719         
FA09 05               (        forth.asm):03720         OCTAL   fcb     5               79-STANDARD (REF)
FA0A 4F4354414C       (        forth.asm):03721                 fcc     'OCTAL'
FA0F F9FC             (        forth.asm):03722                 fdb     BIN
FA11 C7               (        forth.asm):03723                 RFCS
FA12 CC0008           (        forth.asm):03724 (3)             ldd     #8
FA15 DD1E             (        forth.asm):03725 (4)             std     UBASE
FA17 39               (        forth.asm):03726 (4)             rts
                      (        forth.asm):03727         
FA18 07               (        forth.asm):03728         DECIMAL fcb     7               79-STANDARD (REQ197)
FA19 444543494D414C   (        forth.asm):03729                 fcc     'DECIMAL'
FA20 FA09             (        forth.asm):03730                 fdb     OCTAL
FA22 C7               (        forth.asm):03731                 RFCS
FA23 CC000A           (        forth.asm):03732 (3)             ldd     #10
FA26 DD1E             (        forth.asm):03733 (4)             std     UBASE
FA28 39               (        forth.asm):03734 (4)             rts
                      (        forth.asm):03735         
FA29 03               (        forth.asm):03736         HEX     fcb     3               79-STANDARD (REF162)
FA2A 484558           (        forth.asm):03737                 fcc     'HEX'
FA2D FA18             (        forth.asm):03738                 fdb     DECIMAL
FA2F C7               (        forth.asm):03739                 RFCS
FA30 CC0010           (        forth.asm):03740 (3)             ldd     #16
FA33 DD1E             (        forth.asm):03741 (4)             std     UBASE
FA35 39               (        forth.asm):03742 (4)             rts
                      (        forth.asm):03743         
                      (        forth.asm):03744         * DUMP is not optimized for speed or clarity but for code compactness and yet
                      (        forth.asm):03745         * it remains the largest dictionary entry! It resorts to builtin HEX dump
                      (        forth.asm):03746         * primitives that do not depend on the current base (HDMP4, HDMP2).
                      (        forth.asm):03747         * DUMP operates on the basis of one line of output to #TBUFF per 16 byte
                      (        forth.asm):03748         * (a block) of input. The input buffer is pointed to by D (backed up by Y)
                      (        forth.asm):03749         * and the output is pointed to by X. The output (besides the header line)
                      (        forth.asm):03750         * comprises 3 distinct areas:
                      (        forth.asm):03751         *
                      (        forth.asm):03752         * - the base block address. Aligned on a 16 byte address, followed by one #SP.
                      (        forth.asm):03753         * - the HEX dump area. Made up of 16 times 2 HEX numbers separated by #SP.
                      (        forth.asm):03754         * - the ASCII dump area. Made up of 16 characters.
                      (        forth.asm):03755         *
                      (        forth.asm):03756         * This results in the following "magical" constants:
                      (        forth.asm):03757         *
                      (        forth.asm):03758         * #TBUFF+53 points to the beginning of the ASCII dump area.
                      (        forth.asm):03759         * #TBUFF+69 points to the end of the output string (to be NUL terminated).
                      (        forth.asm):03760         *
FA36 04               (        forth.asm):03761         DUMP    fcb     4               79-STANDARD (REF123)
FA37 44554D50         (        forth.asm):03762                 fcc     'DUMP'          ( START NBYTES -- )
FA3B FA29             (        forth.asm):03763                 fdb     HEX
FA3D C7               (        forth.asm):03764                 RFCS
FA3E BDE6D8           (        forth.asm):03765 (7)             jsr     NPOP
FA41 1F12             (        forth.asm):03766 (4)             tfr     x,y             NBYTES to Y
FA43 BDE6D8           (        forth.asm):03767 (7)             jsr     NPOP
                      (        forth.asm):03768         * Input parameter validation.
FA46 1037C2           (        forth.asm):03769 (4)             cmpr    0,y
FA49 2601             (        forth.asm):03770 (3)             bne     @dmproc         Proceed if NBYTES in non-zero
FA4B 39               (        forth.asm):03771 (4)             rts                     A zero byte count is not flagged as an error
FA4C 2E05             (        forth.asm):03772 (3)     @dmproc bgt     @dmpini
FA4E C60D             (        forth.asm):03773 (2)             ldb     #13             Illegal argument (negative)
FA50 BDE650           (        forth.asm):03774 (7)             jsr     ERRHDLR         No return
                      (        forth.asm):03775         * Initialization and header processing.
FA53 3420             (        forth.asm):03776 (4+2)   @dmpini pshs    y               NBYTES
FA55 3410             (        forth.asm):03777 (4+2)           pshs    x               START
FA57 327E             (        forth.asm):03778 (4+1)           leas    -2,s            Allocate storage for STARTSEEN
                      (        forth.asm):03779         * Stack structure:
                      (        forth.asm):03780         * ,s    STARTSEEN               Set to 1 as soon as D is seen = to START
                      (        forth.asm):03781         *                               Only the LSB is used (1,s).
                      (        forth.asm):03782         * 2,s   START                   Lower bound of the area of interest (included)
                      (        forth.asm):03783         * 4,s   NBYTES                  Byte count to be dumped
FA59 1F10             (        forth.asm):03784 (4)             tfr     x,d             START to D
FA5B C4F0             (        forth.asm):03785 (2)             andb    #$F0            Align to lower 16 byte boundary
FA5D 6F61             (        forth.asm):03786 (6+1)           clr     1,s             Clear STARTSEEN until better informed
FA5F BDE1E7           (        forth.asm):03787 (7)             jsr     PUTCR           Print CR
FA62 11C620           (        forth.asm):03788 (3)             ldf     #SP             Preserved across called subroutines
FA65 8E03A0           (        forth.asm):03789 (3)             ldx     #TBUFF
FA68 1F17             (        forth.asm):03790 (4)             tfr     x,v             Invariants: F has #SP, V has #TBUFF
FA6A 3406             (        forth.asm):03791 (4+2)           pshs    d
FA6C BDFB07           (        forth.asm):03792 (7)             jsr     _DMPHDR         D is not preserved
FA6F 3506             (        forth.asm):03793 (4+2)           puls    d
FA71 6F84             (        forth.asm):03794 (6+0)           clr     ,x              NUL terminate the current output line
FA73 1F71             (        forth.asm):03795 (4)             tfr     v,x             Point back to the beginning of the output buffer
FA75 BDE1DA           (        forth.asm):03796 (7)             jsr     PUTS            Print header
                      (        forth.asm):03797         * Main loop. Index is D. We output everything to the string pointed by X.
                      (        forth.asm):03798         * Occasional resort to #TBUFF + 53 + (B % 15) will be used.
FA78 3404             (        forth.asm):03799 (4+1)   @dmmain pshs    b
FA7A C40F             (        forth.asm):03800 (2)             andb    #$F
FA7C 3504             (        forth.asm):03801 (4+1)           puls    b
FA7E 2609             (        forth.asm):03802 (3)             bne     @dmphx          Not a beginning of line
FA80 BDE1E7           (        forth.asm):03803 (7)             jsr     PUTCR           Print CR
FA83 BDE174           (        forth.asm):03804 (7)             jsr     HDMP4           4 hex digit dump of the base block address
FA86 11E780           (        forth.asm):03805 (5+1)           stf     ,x+             SPACE after the base address
FA89 1F02             (        forth.asm):03806 (4)     @dmphx  tfr     d,y             Save D, prepare pointer to actual data
FA8B 8D59             (        forth.asm):03807 (6)             bsr     _DMPINT
FA8D 260A             (        forth.asm):03808 (3)             bne     @dmhx2          We are in the area of interest
FA8F 8620             (        forth.asm):03809 (2)     @dmspc  lda     #SP
FA91 A780             (        forth.asm):03810 (4+1)           sta     ,x+             Nothing interesting here. Emit three spaces
FA93 A780             (        forth.asm):03811 (4+1)           sta     ,x+
FA95 A780             (        forth.asm):03812 (4+1)           sta     ,x+
FA97 2016             (        forth.asm):03813 (3)             bra     @dmasc          Have #SP printed to the ASCII area
                      (        forth.asm):03814         * We are within the area of interest. Perform a regular HEX 2 digit conversion.
FA99 A6A4             (        forth.asm):03815 (4+0)   @dmhx2  lda     ,y
FA9B BDE18D           (        forth.asm):03816 (7)             jsr     HDMP2
FA9E 11E780           (        forth.asm):03817 (5+1)           stf     ,x+
                      (        forth.asm):03818         * Decrement NBYTES, only if it is not already zero.
FAA1 3420             (        forth.asm):03819 (4+2)           pshs    y
FAA3 10AE66           (        forth.asm):03820 (6+1)           ldy     6,s             Offset plus 2 since we just pushed Y
FAA6 2705             (        forth.asm):03821 (3)             beq     @dmrsty         NBYTES is nul
FAA8 313F             (        forth.asm):03822 (4+1)           leay    -1,y            Decrement NBYTES
FAAA 10AF66           (        forth.asm):03823 (6+1)           sty     6,s
FAAD 3520             (        forth.asm):03824 (4+2)   @dmrsty puls    y
FAAF 8120             (        forth.asm):03825 (2)     @dmasc  cmpa    #SP
FAB1 2504             (        forth.asm):03826 (3)             blo     @dmnprt         Character is not printable
FAB3 817E             (        forth.asm):03827 (2)             cmpa    #$7E
FAB5 2302             (        forth.asm):03828 (3)             bls     @dmasis
FAB7 862E             (        forth.asm):03829 (2)     @dmnprt lda     #'.             Default character when not printable
FAB9 3410             (        forth.asm):03830 (4+2)   @dmasis pshs    x               The ASCII image is the character itself
FABB 8E03D5           (        forth.asm):03831 (3)             ldx     #TBUFF+53       Base address for the ASCII dump area
FABE C40F             (        forth.asm):03832 (2)             andb    #$F             Offset is B modulo 15
FAC0 3A               (        forth.asm):03833 (1)             abx                     Add offset to base address
FAC1 A780             (        forth.asm):03834 (4+1)           sta     ,x+
FAC3 3510             (        forth.asm):03835 (4+2)           puls    x
                      (        forth.asm):03836         * If B is #$F, we've just processed the last byte of a block. Print #TBUFF.
FAC5 C10F             (        forth.asm):03837 (2)             cmpb    #$F
FAC7 1FAE             (        forth.asm):03838 (4)             tfr     cc,e
FAC9 2608             (        forth.asm):03839 (3)             bne     @dmctd
FACB 1F71             (        forth.asm):03840 (4)             tfr     v,x             #TBUFF to X
FACD 6F8845           (        forth.asm):03841 (6+1)           clr     69,x
FAD0 BDE1DA           (        forth.asm):03842 (7)             jsr     PUTS
FAD3 1F20             (        forth.asm):03843 (4)     @dmctd  tfr     y,d             Restore D
FAD5 104C             (        forth.asm):03844 (2)             incd
FAD7 1FEA             (        forth.asm):03845 (4)             tfr     e,cc
FAD9 269D             (        forth.asm):03846 (3)             bne     @dmmain         Proceed until end of block is reached
FADB 6D65             (        forth.asm):03847 (5+1)           tst     5,s             NBYTES LSB
FADD 2699             (        forth.asm):03848 (3)             bne     @dmmain
FADF 6D64             (        forth.asm):03849 (5+1)           tst     4,s             NYTES MSB
FAE1 2695             (        forth.asm):03850 (3)             bne     @dmmain
FAE3 3266             (        forth.asm):03851 (4+1)           leas    6,s             Free stack storage used by local variables
FAE5 39               (        forth.asm):03852 (4)             rts
                      (        forth.asm):03853         
                      (        forth.asm):03854         * Predicate to indicate whether or not D covers the area of interest.
                      (        forth.asm):03855         * Upon return NZ will be set iff we are pointing to the "interesting" area.
FAE6 6D63             (        forth.asm):03856 (5+1)   _DMPINT tst     3,s             STARTSEEN?
FAE8 2608             (        forth.asm):03857 (3)             bne     @strsen         Yes, check for zero remaining byte count
FAEA 10A364           (        forth.asm):03858 (6+1)           cmpd    4,s             START
FAED 240D             (        forth.asm):03859 (3)             bhs     @ststrt         Set STARTSEEN once and for all
FAEF 1A04             (        forth.asm):03860 (2)     @retwz  orcc    #ZFLAG          Set Z flag
FAF1 39               (        forth.asm):03861 (4)             rts
                      (        forth.asm):03862         * STARTSEEN is set. Check remaining byte count.
FAF2 6D67             (        forth.asm):03863 (5+1)   @strsen tst     7,s             NBYTES LSB
FAF4 260E             (        forth.asm):03864 (3)             bne     @retwnz
FAF6 6D66             (        forth.asm):03865 (5+1)           tst     6,s             NBYTES MSB
FAF8 260A             (        forth.asm):03866 (3)             bne     @retwnz
FAFA 20F3             (        forth.asm):03867 (3)             bra     @retwz          We are beyond the interesting area
FAFC 3402             (        forth.asm):03868 (4+1)   @ststrt pshs    a
FAFE 8601             (        forth.asm):03869 (2)             lda     #1
FB00 A764             (        forth.asm):03870 (4+1)           sta     4,s             Set STARTSEEN
FB02 3502             (        forth.asm):03871 (4+1)           puls    a
FB04 1CFB             (        forth.asm):03872 (2)     @retwnz andcc   #^ZFLAG         Clear Z flag
FB06 39               (        forth.asm):03873 (4)             rts
                      (        forth.asm):03874         
                      (        forth.asm):03875         * Print the dump header to X.
FB07 8620             (        forth.asm):03876 (2)     _DMPHDR lda     #SP
FB09 A780             (        forth.asm):03877 (4+1)           sta     ,x+
FB0B A780             (        forth.asm):03878 (4+1)           sta     ,x+
FB0D A780             (        forth.asm):03879 (4+1)           sta     ,x+
FB0F A780             (        forth.asm):03880 (4+1)           sta     ,x+
FB11 5F               (        forth.asm):03881 (1)             clrb
FB12 A780             (        forth.asm):03882 (4+1)   @dmhlp1 sta     ,x+             Space before every 2 hex digits
FB14 1F98             (        forth.asm):03883 (4)             tfr     b,a
FB16 BDE18D           (        forth.asm):03884 (7)             jsr     HDMP2
FB19 8620             (        forth.asm):03885 (2)             lda     #SP
FB1B 5C               (        forth.asm):03886 (1)             incb
FB1C C110             (        forth.asm):03887 (2)             cmpb    #$10
FB1E 26F2             (        forth.asm):03888 (3)             bne     @dmhlp1
FB20 A780             (        forth.asm):03889 (4+1)           sta     ,x+             Space before the ASCII dump
FB22 5F               (        forth.asm):03890 (1)             clrb
FB23 1F98             (        forth.asm):03891 (4)     @dmhlp2 tfr     b,a
FB25 BDE15B           (        forth.asm):03892 (7)             jsr     HEX1D           Offset to HEX char stored to x+
FB28 5C               (        forth.asm):03893 (1)             incb
FB29 C110             (        forth.asm):03894 (2)             cmpb    #$10
FB2B 26F6             (        forth.asm):03895 (3)             bne     @dmhlp2
FB2D 39               (        forth.asm):03896 (4)             rts
                      (        forth.asm):03897         
                      (        forth.asm):03898                 IFNE    SSDFEAT
FB2E 02               (        forth.asm):03899         DOTTICK fcb     2               Non-standard (SwiftForth)
FB2F 2E27             (        forth.asm):03900                 fcb     $2E,$27         .' ( memaddr -- )
FB31 FA36             (        forth.asm):03901                 fdb     DUMP
FB33 C7               (        forth.asm):03902                 RFCS
FB34 BDE6D8           (        forth.asm):03903 (7)             jsr     NPOP
FB37 1F12             (        forth.asm):03904 (4)             tfr     x,y
FB39 8E0350           (        forth.asm):03905 (3)             ldx     #HEXBUF
FB3C BDE522           (        forth.asm):03906 (7)             jsr     FINDSYM
FB3F 8E0350           (        forth.asm):03907 (3)             ldx     #HEXBUF
FB42 7EE1DA           (        forth.asm):03908 (3)             jmp     PUTS
                      (        forth.asm):03909                 ENDC
                      (        forth.asm):03910         
                      (        forth.asm):03911         * Display a dump of the data stack in the current BASE. In Leo Brodie's
                      (        forth.asm):03912         * "Starting Forth" the data stack is printed from the bottom up. So it is here.
FB45 02               (        forth.asm):03913         DDUMP   fcb     2               ANSI (Optional "Programming tools" word set)
FB46 2E53             (        forth.asm):03914                 fcc     '.S'            ( memaddr bcount -- )
                      (        forth.asm):03915                 IFNE    SSDFEAT
FB48 FB2E             (        forth.asm):03916                 fdb     DOTTICK
                      (        forth.asm):03917                 ELSE
                      (        forth.asm):03918                 fdb     DUMP
                      (        forth.asm):03919                 ENDC
FB4A C7               (        forth.asm):03920                 RFCS
FB4B CC024C           (        forth.asm):03921 (3)             ldd     #NSTBOT
FB4E 103230           (        forth.asm):03922 (4)             subr    u,d
FB51 1044             (        forth.asm):03923 (2)             lsrd                    DEPTH is in D
FB53 272A             (        forth.asm):03924 (3)             beq     @ndump3         Data stack is empty
FB55 3440             (        forth.asm):03925 (4+2)           pshs    u
FB57 CE024C           (        forth.asm):03926 (3)             ldu     #NSTBOT         Pointing to the bottom of the data stack
FB5A 8601             (        forth.asm):03927 (2)             lda     #1
FB5C 9732             (        forth.asm):03928 (3)             sta     CVISSGN         Force a signed number conversion
FB5E 3404             (        forth.asm):03929 (4+1)   @ndump1 pshs    b
FB60 AEC3             (        forth.asm):03930 (5+2)           ldx     ,--u
FB62 BDE336           (        forth.asm):03931 (7)             jsr     CVNSTR
FB65 8E03A0           (        forth.asm):03932 (3)             ldx     #TBUFF
                      (        forth.asm):03933         # Skip leading spaces.
FB68 A680             (        forth.asm):03934 (4+1)   @ndump2 lda     ,x+
FB6A 8120             (        forth.asm):03935 (2)             cmpa    #SP
FB6C 27FA             (        forth.asm):03936 (3)             beq     @ndump2
FB6E 301F             (        forth.asm):03937 (4+1)           leax    -1,x
FB70 BDE1DA           (        forth.asm):03938 (7)             jsr     PUTS
FB73 8620             (        forth.asm):03939 (2)             lda     #SP
FB75 BDE1B6           (        forth.asm):03940 (7)             jsr     PUTCH
FB78 3504             (        forth.asm):03941 (4+1)           puls    b
FB7A 5A               (        forth.asm):03942 (1)             decb
FB7B 26E1             (        forth.asm):03943 (3)             bne     @ndump1
FB7D 3540             (        forth.asm):03944 (4+2)           puls    u
FB7F 39               (        forth.asm):03945 (4)     @ndump3 rts
                      (        forth.asm):03946         
FB80 04               (        forth.asm):03947         QRYDUP  fcb     4               79-STANDARD (REQ184)
FB81 3F445550         (        forth.asm):03948                 fcc     '?DUP'
FB85 FB45             (        forth.asm):03949                 fdb     DDUMP
FB87 C7               (        forth.asm):03950                 RFCS
FB88 BDE6D8           (        forth.asm):03951 (7)             jsr     NPOP
FB8B 3610             (        forth.asm):03952                 UCNPUSH                 Push back the original parameter
FB8D 1037C1           (        forth.asm):03953 (4)             cmpr    0,x
FB90 2601             (        forth.asm):03954 (3)             bne     @qrydp1
FB92 39               (        forth.asm):03955 (4)             rts
FB93 7EE6CA           (        forth.asm):03956 (3)     @qrydp1 jmp     NPUSH           And DUP if NZ
                      (        forth.asm):03957         
FB96 04               (        forth.asm):03958         TUCK    fcb     4               ANSI (Core ext)
FB97 5455434B         (        forth.asm):03959                 fcc     'TUCK'          ( x1 x2 -- x2 x1 x2 ) i.e. SWAP OVER
FB9B FB80             (        forth.asm):03960                 fdb     QRYDUP
FB9D C7               (        forth.asm):03961                 RFCS
FB9E BDE38F           (        forth.asm):03962 (7)             jsr     MIN2PST         At least two cells need to be stacked up
FBA1 10ECC4           (        forth.asm):03963 (8+0)           ldq     ,u              D:W is X2:X1
FBA4 1E06             (        forth.asm):03964 (5)             exg     d,w
FBA6 10EDC4           (        forth.asm):03965 (8+0)           stq     ,u
FBA9 1F61             (        forth.asm):03966 (4)             tfr     w,x             X has X2
FBAB 7EE6CA           (        forth.asm):03967 (3)             jmp     NPUSH
                      (        forth.asm):03968         
FBAE 03               (        forth.asm):03969         NIP     fcb     3               ANSI (Core ext)
FBAF 4E4950           (        forth.asm):03970                 fcc     'NIP'           ( x1 x2 -- x2 ) i.e. SWAP DROP
FBB2 FB96             (        forth.asm):03971                 fdb     TUCK
FBB4 C7               (        forth.asm):03972                 RFCS
FBB5 BDE38F           (        forth.asm):03973 (7)             jsr     MIN2PST         At least two cells need to be stacked up
FBB8 ECC4             (        forth.asm):03974 (5+0)           ldd     ,u
FBBA 3342             (        forth.asm):03975 (4+1)           leau    2,u
FBBC EDC4             (        forth.asm):03976 (5+0)           std     ,u
FBBE 39               (        forth.asm):03977 (4)             rts
                      (        forth.asm):03978         
FBBF 03               (        forth.asm):03979         DUP     fcb     3               79-STANDARD (REQ205)
FBC0 445550           (        forth.asm):03980                 fcc     'DUP'
FBC3 FBAE             (        forth.asm):03981                 fdb     NIP
FBC5 C7               (        forth.asm):03982                 RFCS
FBC6 BDE38A           (        forth.asm):03983 (7)             jsr     MIN1PST         At least one cell needs to be stacked up
FBC9 AEC4             (        forth.asm):03984 (5+0)           ldx     ,u
FBCB 7EE6CA           (        forth.asm):03985 (3)             jmp     NPUSH
                      (        forth.asm):03986         
FBCE 04               (        forth.asm):03987         DROP    fcb     4               79-STANDARD (REQ233)
FBCF 44524F50         (        forth.asm):03988                 fcc     'DROP'
FBD3 FBBF             (        forth.asm):03989                 fdb     DUP
FBD5 C7               (        forth.asm):03990                 RFCS
FBD6 7EE6D8           (        forth.asm):03991 (3)             jmp     NPOP
                      (        forth.asm):03992         
FBD9 04               (        forth.asm):03993         SWAP    fcb     4               79-STANDARD (REQ230)
FBDA 53574150         (        forth.asm):03994                 fcc     'SWAP'
FBDE FBCE             (        forth.asm):03995                 fdb     DROP
FBE0 C7               (        forth.asm):03996                 RFCS
FBE1 BDE38F           (        forth.asm):03997 (7)             jsr     MIN2PST         We need at least two cells stacked up
FBE4 10ECC4           (        forth.asm):03998 (8+0)           ldq     ,u              In place SWAP
FBE7 1E06             (        forth.asm):03999 (5)             exg     d,w
FBE9 10EDC4           (        forth.asm):04000 (8+0)           stq     ,u
FBEC 39               (        forth.asm):04001 (4)             rts
                      (        forth.asm):04002         
FBED 04               (        forth.asm):04003         PICK    fcb     4
FBEE 5049434B         (        forth.asm):04004                 fcc     'PICK'
FBF2 FBD9             (        forth.asm):04005                 fdb     SWAP
FBF4 C7               (        forth.asm):04006                 RFCS
FBF5 BDE6D8           (        forth.asm):04007 (7)             jsr     NPOP
FBF8 CC024C           (        forth.asm):04008 (3)     PICK1   ldd     #NSTBOT
FBFB 103230           (        forth.asm):04009 (4)             subr    u,d
FBFE 1044             (        forth.asm):04010 (2)             lsrd                    D has the data stack depth in cells
FC00 103710           (        forth.asm):04011 (4)             cmpr    x,d
FC03 2405             (        forth.asm):04012 (3)             bcc     @pick1
FC05 C60D             (        forth.asm):04013 (2)     ERRPCK  ldb     #13             Argument is greater than DEPTH
FC07 BDE650           (        forth.asm):04014 (7)             jsr     ERRHDLR         No return
FC0A 1F10             (        forth.asm):04015 (4)     @pick1  tfr     x,d
FC0C 104D             (        forth.asm):04016 (2)             tstd
FC0E 27F5             (        forth.asm):04017 (3)             beq     ERRPCK
FC10 104A             (        forth.asm):04018 (2)             decd                    Minus 1, unlike in the Z80 implementation
FC12 1048             (        forth.asm):04019 (2)             lsld                    Times 2
FC14 1F31             (        forth.asm):04020 (4)             tfr     u,x
FC16 308B             (        forth.asm):04021 (4+2)           leax    d,x
FC18 1F12             (        forth.asm):04022 (4)             tfr     x,y             For the sake of ROLL's implementation
FC1A AE84             (        forth.asm):04023 (5+0)           ldx     ,x
FC1C 3610             (        forth.asm):04024                 UCNPUSH
FC1E 39               (        forth.asm):04025 (4)             rts
                      (        forth.asm):04026         
FC1F 04               (        forth.asm):04027         OVER    fcb     4
FC20 4F564552         (        forth.asm):04028                 fcc     'OVER'
FC24 FBED             (        forth.asm):04029                 fdb     PICK
FC26 C7               (        forth.asm):04030                 RFCS
FC27 8E0002           (        forth.asm):04031 (3)             ldx     #2
FC2A 20CC             (        forth.asm):04032 (3)             bra     PICK1
                      (        forth.asm):04033         
FC2C 04               (        forth.asm):04034         ROLL    fcb     4
FC2D 524F4C4C         (        forth.asm):04035                 fcc     'ROLL'
FC31 FC1F             (        forth.asm):04036                 fdb     OVER
FC33 C7               (        forth.asm):04037                 RFCS
FC34 BDE6D8           (        forth.asm):04038 (7)             jsr     NPOP
FC37 1F16             (        forth.asm):04039 (4)     ROLL1   tfr     x,w
FC39 8DBD             (        forth.asm):04040 (6)             bsr     PICK1           Let PICK do the error handling
FC3B 3121             (        forth.asm):04041 (4+1)           leay    1,y             Point to the LSB since we're moving backward
FC3D 1F21             (        forth.asm):04042 (4)             tfr     y,x
FC3F 301E             (        forth.asm):04043 (4+1)           leax    -2,x
FC41 103066           (        forth.asm):04044 (4)             addr    w,w
FC44 113912           (        forth.asm):04045 (6+?)           tfm     x-,y-
FC47 7EE6D8           (        forth.asm):04046 (3)             jmp     NPOP
                      (        forth.asm):04047         
FC4A 03               (        forth.asm):04048         ROT     fcb     3
FC4B 524F54           (        forth.asm):04049                 fcc     'ROT'
FC4E FC2C             (        forth.asm):04050                 fdb     ROLL
FC50 C7               (        forth.asm):04051                 RFCS
FC51 8E0003           (        forth.asm):04052 (3)             ldx     #3
FC54 20E1             (        forth.asm):04053 (3)             bra     ROLL1
                      (        forth.asm):04054         
FC56 04               (        forth.asm):04055         MROT    fcb     4
FC57 2D524F54         (        forth.asm):04056                 fcc     '-ROT'
FC5B FC4A             (        forth.asm):04057                 fdb     ROT
FC5D C7               (        forth.asm):04058                 RFCS
FC5E 8DF1             (        forth.asm):04059                 RFXT    bsr,ROT+6       XT for ROT
FC60 20EF             (        forth.asm):04060                 RFXT    bra,ROT+6       XT for ROT
                      (        forth.asm):04061         
FC62 02               (        forth.asm):04062         CCOMMA  fcb     2               79-STANDARD (REF)
FC63 432C             (        forth.asm):04063                 fcc     'C,'
FC65 FC56             (        forth.asm):04064                 fdb     MROT
FC67 C7               (        forth.asm):04065                 RFCS
FC68 BDE6D8           (        forth.asm):04066 (7)             jsr     NPOP
FC6B 1F10             (        forth.asm):04067 (4)             tfr     x,d
FC6D 109E08           (        forth.asm):04068 (5)             ldy     DICEND
FC70 E7A0             (        forth.asm):04069 (4+1)           stb     ,y+
FC72 109F08           (        forth.asm):04070 (5)             sty     DICEND
FC75 39               (        forth.asm):04071 (4)             rts
                      (        forth.asm):04072         
FC76 01               (        forth.asm):04073         COMMA   fcb     1               79-STANDARD (REQ143)
FC77 2C               (        forth.asm):04074                 fcc     ','
FC78 FC62             (        forth.asm):04075                 fdb     CCOMMA
FC7A C7               (        forth.asm):04076                 RFCS
FC7B BDE6D8           (        forth.asm):04077 (7)             jsr     NPOP
FC7E 109E08           (        forth.asm):04078 (5)             ldy     DICEND
FC81 AFA1             (        forth.asm):04079 (5+2)           stx     ,y++
FC83 109F08           (        forth.asm):04080 (5)             sty     DICEND
FC86 39               (        forth.asm):04081 (4)             rts
                      (        forth.asm):04082         
FC87 05               (        forth.asm):04083         ALLOT   fcb     5               79-STANDARD (REQ154)
FC88 414C4C4F54       (        forth.asm):04084                 fcc     'ALLOT'         ( signedbytecount -- )
FC8D FC76             (        forth.asm):04085                 fdb     COMMA
FC8F C7               (        forth.asm):04086                 RFCS
FC90 BDE6D8           (        forth.asm):04087 (7)             jsr     NPOP
FC93 109E08           (        forth.asm):04088 (5)             ldy     DICEND
FC96 103012           (        forth.asm):04089 (4)             addr    x,y
FC99 109F08           (        forth.asm):04090 (5)             sty     DICEND
FC9C 39               (        forth.asm):04091 (4)             rts
                      (        forth.asm):04092         
FC9D 04               (        forth.asm):04093         FILL    fcb     4               79-STANDARD (REQ234)
FC9E 46494C4C         (        forth.asm):04094                 fcc     'FILL'
FCA2 FC87             (        forth.asm):04095                 fdb     ALLOT
FCA4 C7               (        forth.asm):04096                 RFCS
FCA5 BDE6D8           (        forth.asm):04097 (7)             jsr     NPOP
FCA8 1F16             (        forth.asm):04098 (4)             tfr     x,w             Byte fill value to W
FCAA BDE6D8           (        forth.asm):04099 (7)     FILL1   jsr     NPOP
FCAD 1F12             (        forth.asm):04100 (4)             tfr     x,y             Byte count to Y
FCAF 1E26             (        forth.asm):04101 (5)             exg     y,w             Byte count to W, byte fill value to Y
FCB1 BDE6D8           (        forth.asm):04102 (7)             jsr     NPOP            Destination address to X
FCB4 105D             (        forth.asm):04103 (2)             tstw
FCB6 2F0B             (        forth.asm):04104 (3)             ble     @filend
FCB8 1F20             (        forth.asm):04105 (4)             tfr     y,d             Byte fill value to B
FCBA E784             (        forth.asm):04106 (4+0)           stb     ,x
FCBC 105A             (        forth.asm):04107 (2)             decw
FCBE 3101             (        forth.asm):04108 (4+1)           leay    1,x
FCC0 113812           (        forth.asm):04109 (6+?)           tfm     x+,y+
FCC3 39               (        forth.asm):04110 (4)     @filend rts
                      (        forth.asm):04111         
FCC4 06               (        forth.asm):04112         BLANKS  fcb     6               79-STANDARD (REF152)
FCC5 424C414E4B53     (        forth.asm):04113                 fcc     'BLANKS'
FCCB FC9D             (        forth.asm):04114                 fdb     FILL
FCCD C7               (        forth.asm):04115                 RFCS
FCCE 10860020         (        forth.asm):04116 (4)             ldw     #SP
FCD2 20D6             (        forth.asm):04117 (3)             bra     FILL1
                      (        forth.asm):04118         
FCD4 06               (        forth.asm):04119         CMOVED  fcb     6               FORTH-83
FCD5 434D4F56453E     (        forth.asm):04120                 fcc     'CMOVE>'
FCDB FCC4             (        forth.asm):04121                 fdb     BLANKS
FCDD C7               (        forth.asm):04122                 RFCS
FCDE BDE49E           (        forth.asm):04123 (7)             jsr     ACQMOVP
FCE1 105D             (        forth.asm):04124 (2)             tstw
FCE3 270D             (        forth.asm):04125 (3)             beq     @cmovd1
FCE5 105A             (        forth.asm):04126 (2)             decw
FCE7 103061           (        forth.asm):04127 (4)             addr    w,x
FCEA 103062           (        forth.asm):04128 (4)             addr    w,y
FCED 105C             (        forth.asm):04129 (2)             incw
FCEF 113912           (        forth.asm):04130 (6+?)           tfm     x-,y-
FCF2 39               (        forth.asm):04131 (4)     @cmovd1 rts
                      (        forth.asm):04132         
FCF3 05               (        forth.asm):04133         CMOVE   fcb     5               79-STANDARD (REQ153)
FCF4 434D4F5645       (        forth.asm):04134                 fcc     'CMOVE'
FCF9 FCD4             (        forth.asm):04135                 fdb     CMOVED
FCFB C7               (        forth.asm):04136                 RFCS
FCFC BDE49E           (        forth.asm):04137 (7)             jsr     ACQMOVP
FCFF 113812           (        forth.asm):04138 (6+?)           tfm     x+,y+
FD02 39               (        forth.asm):04139 (4)             rts
                      (        forth.asm):04140         
FD03 04               (        forth.asm):04141         MOVE    fcb     4               79-STANDARD (REQ113)
FD04 4D4F5645         (        forth.asm):04142                 fcc     'MOVE'          ( srcaddr dstaddr ncells -- )
FD08 FCF3             (        forth.asm):04143                 fdb     CMOVE
FD0A C7               (        forth.asm):04144                 RFCS
FD0B BDE49E           (        forth.asm):04145 (7)             jsr     ACQMOVP
FD0E 105D             (        forth.asm):04146 (2)             tstw
FD10 2F06             (        forth.asm):04147 (3)             ble     @move1
FD12 103066           (        forth.asm):04148 (4)             addr    w,w             Convert cells to bytes
FD15 113812           (        forth.asm):04149 (6+?)           tfm     x+,y+
FD18 39               (        forth.asm):04150 (4)     @move1  rts
                      (        forth.asm):04151         
FD19 05               (        forth.asm):04152         CELLS   fcb     5               ANSI-X3.215-1994
FD1A 43454C4C53       (        forth.asm):04153                 fcc     'CELLS'
FD1F FD03             (        forth.asm):04154                 fdb     MOVE
FD21 C7               (        forth.asm):04155                 RFCS
FD22 BDE6D8           (        forth.asm):04156 (7)             jsr     NPOP
FD25 103011           (        forth.asm):04157 (4)             addr    x,x
FD28 3610             (        forth.asm):04158                 UCNPUSH
FD2A 39               (        forth.asm):04159 (4)             rts
                      (        forth.asm):04160         
FD2B 04               (        forth.asm):04161         LAST    fcb     4               79-STANDARD (REF)
FD2C 4C415354         (        forth.asm):04162                 fcc     'LAST'
FD30 FD19             (        forth.asm):04163                 fdb     CELLS
FD32 C7               (        forth.asm):04164                 RFCS
FD33 9E06             (        forth.asm):04165 (4)             ldx     LSTWAD
FD35 7EE6CA           (        forth.asm):04166 (3)             jmp     NPUSH
                      (        forth.asm):04167         
FD38 04               (        forth.asm):04168         HERE    fcb     4               79-STANDARD (REQ188)
FD39 48455245         (        forth.asm):04169                 fcc     'HERE'
FD3D FD2B             (        forth.asm):04170                 fdb     LAST
FD3F C7               (        forth.asm):04171                 RFCS
FD40 9E08             (        forth.asm):04172 (4)             ldx     DICEND
FD42 7EE6CA           (        forth.asm):04173 (3)             jmp     NPUSH
                      (        forth.asm):04174         
FD45 02               (        forth.asm):04175         PLUSST  fcb     2               79-STANDARD (REQ157)
FD46 2B21             (        forth.asm):04176                 fcc     '+!'            ( incr addr -- )
FD48 FD38             (        forth.asm):04177                 fdb     HERE
FD4A C7               (        forth.asm):04178                 RFCS
FD4B BDE38F           (        forth.asm):04179 (7)             jsr     MIN2PST         We need at least two cells stacked up
FD4E AEC4             (        forth.asm):04180 (5+0)           ldx     ,u              ADDR to X
FD50 EC84             (        forth.asm):04181 (5+0)           ldd     ,x              @ADDR to D
FD52 E342             (        forth.asm):04182 (5+1)           addd    2,u             Add INCR to D
FD54 ED84             (        forth.asm):04183 (5+0)   PLUSST1 std     ,x              Store the sum back to ADDR
FD56 3344             (        forth.asm):04184 (4+1)           leau    4,u             Drop two cells from the data stack
FD58 39               (        forth.asm):04185 (4)             rts
                      (        forth.asm):04186         
FD59 03               (        forth.asm):04187         ONEPST  fcb     3               79-STANDARD (REF)
FD5A 312B21           (        forth.asm):04188                 fcc     '1+!'
FD5D FD45             (        forth.asm):04189                 fdb     PLUSST
FD5F C7               (        forth.asm):04190                 RFCS
FD60 BDE38A           (        forth.asm):04191 (7)             jsr     MIN1PST         At least one cell needs to be stacked up
FD63 AEC4             (        forth.asm):04192 (5+0)           ldx     ,u
FD65 EC84             (        forth.asm):04193 (5+0)           ldd     ,x
FD67 104C             (        forth.asm):04194 (2)             incd
FD69 ED84             (        forth.asm):04195 (5+0)           std     ,x
FD6B 3342             (        forth.asm):04196 (4+1)           leau    2,u
FD6D 39               (        forth.asm):04197 (4)             rts
                      (        forth.asm):04198         
FD6E 02               (        forth.asm):04199         MINUSST fcb     2               79-STANDARD (REQ157)
FD6F 2D21             (        forth.asm):04200                 fcc     '-!'            ( incr addr -- )
FD71 FD59             (        forth.asm):04201                 fdb     ONEPST
FD73 C7               (        forth.asm):04202                 RFCS
FD74 BDE38F           (        forth.asm):04203 (7)             jsr     MIN2PST         We need at least two cells stacked up
FD77 AEC4             (        forth.asm):04204 (5+0)           ldx     ,u              ADDR to X
FD79 EC84             (        forth.asm):04205 (5+0)           ldd     ,x              @ADDR to D
FD7B A342             (        forth.asm):04206 (5+1)           subd    2,u             Substract INCR from D
FD7D 20D5             (        forth.asm):04207 (3)             bra     PLUSST1
                      (        forth.asm):04208         
FD7F 02               (        forth.asm):04209         CSTORE  fcb     2               79-STANDARD (REQ219)
FD80 4321             (        forth.asm):04210                 fcc     'C!'            ( val8 addr -- )
FD82 FD6E             (        forth.asm):04211                 fdb     MINUSST
FD84 C7               (        forth.asm):04212                 RFCS
FD85 BDE38F           (        forth.asm):04213 (7)             jsr     MIN2PST         We need at least two cells stacked up
FD88 A643             (        forth.asm):04214 (4+1)           lda     3,u             VAL8 to A
FD8A A7D4             (        forth.asm):04215 (4+3)           sta     [,u]            Actual store to ADDR
FD8C 3344             (        forth.asm):04216 (4+1)           leau    4,u             Drop two cells from the data stack
FD8E 39               (        forth.asm):04217 (4)             rts
                      (        forth.asm):04218         
FD8F 01               (        forth.asm):04219         STORE   fcb     1               79-STANDARD (REQ112)
FD90 21               (        forth.asm):04220                 fcc     '!'             ( data addr -- )
FD91 FD7F             (        forth.asm):04221                 fdb     CSTORE
FD93 C7               (        forth.asm):04222                 RFCS
FD94 BDE38F           (        forth.asm):04223 (7)             jsr     MIN2PST         At least two cells need to be stacked up
FD97 EC42             (        forth.asm):04224 (5+1)           ldd     2,u             DATA to D
FD99 EDD4             (        forth.asm):04225 (5+3)           std     [,u]            Actual store to ADDR
FD9B 3344             (        forth.asm):04226 (4+1)           leau    4,u             Drop two cells from the user stack
FD9D 39               (        forth.asm):04227 (4)             rts
                      (        forth.asm):04228         
FD9E 02               (        forth.asm):04229         CFETCH  fcb     2               79-STANDARD (REQ156)
FD9F 4340             (        forth.asm):04230                 fcc     'C@'            ( addr -- val8 )
FDA1 FD8F             (        forth.asm):04231                 fdb     STORE
FDA3 C7               (        forth.asm):04232                 RFCS
FDA4 BDE38A           (        forth.asm):04233 (7)             jsr     MIN1PST         We need at least one cell stacked up
FDA7 4F               (        forth.asm):04234 (1)             clra
FDA8 E6D4             (        forth.asm):04235 (4+3)           ldb     [,u]
FDAA EDC4             (        forth.asm):04236 (5+0)           std     ,u
FDAC 39               (        forth.asm):04237 (4)             rts
                      (        forth.asm):04238         
FDAD 01               (        forth.asm):04239         QMARK   fcb     1               79-STANDARD (REQ194)
FDAE 3F               (        forth.asm):04240                 fcc     '?'
FDAF FD9E             (        forth.asm):04241                 fdb     CFETCH
FDB1 C7               (        forth.asm):04242                 RFCS
FDB2 BD0C15           (        forth.asm):04243 (7)             jsr     RAMFTCH         Call the RAM based incarnation of @
FDB5 7EF4F9           (        forth.asm):04244                 RFXT    jmp,DOT+4       XT for .
                      (        forth.asm):04245         
                      (        forth.asm):04246         * End of ROM part of the builtin dictionary.
     FDB8             (        forth.asm):04247         THEEND  equ     *               This is the end, Beautiful friend
                      (        forth.asm):04248         *                               This is the end, My only friend
                      (        forth.asm):04249         
                      (        forth.asm):04250         * This transactional word is relocated to RAM, so that we can compile new
                      (        forth.asm):04251         * definitions. FORTHIN will take care of that and adjust the relevant pointers.
FDB8 01               (        forth.asm):04252         FETCH   fcb     1               79-STANDARD (REQ199)
FDB9 40               (        forth.asm):04253                 fcc     '@'             ( addr -- data )
FDBA FDAD             (        forth.asm):04254                 fdb     QMARK
FDBC C7               (        forth.asm):04255                 RFCS
FDBD BDE38A           (        forth.asm):04256 (7)             jsr     MIN1PST         At least one cell needs to be stacked up
FDC0 ECD4             (        forth.asm):04257 (5+3)           ldd     [,u]
FDC2 EDC4             (        forth.asm):04258 (5+0)           std     ,u              Returned through the data stack
FDC4 39               (        forth.asm):04259 (4)             rts
                      (        forth.asm):04260         
     FDC5             (        forth.asm):04261         REALEND equ     *
                      (        forth.asm):04262         
                      (        forth.asm):04263         *******************************************************************************
                      (        forth.asm):04264         * String literals.
                      (        forth.asm):04265         
                      (        forth.asm):04266         * Using CR+LF as it is Minicom's default.
                      (        forth.asm):04267         
                      (        forth.asm):04268         * Clear the screen, VT100 style.
FDC5 1B5B481B5B4A0D00 (        forth.asm):04269         CSVT100 fcb     $1B,'[','H',$1B,'[','J',CR,NUL
                      (        forth.asm):04270         
FDCD 5A3739466F727468 (        forth.asm):04271         BOOTMSG fcc     'Z79Forth 6309/'
     20363330392F
                      (        forth.asm):04272                 POLINTM                 Polling/interrupt flag mode
FDDB 50               (          POLINTM):00001                 fcb     'P'
FDDC 20464F5254482D37 (        forth.asm):04273                 fcc     ' FORTH-79 Standard Sub-set'
     39205374616E6461
     7264205375622D73
     6574
FDF6 0D0A             (        forth.asm):04274                 fcb     CR,LF
FDF8 3230323130373230 (        forth.asm):04275                 fcc     '20210720 Copyright Francois Laagel (2019)'
     20436F7079726967
     6874204672616E63
     6F6973204C616167
     656C202832303139
     29
FE21 0D0A0D0A00       (        forth.asm):04276                 fcb     CR,LF,CR,LF,NUL
                      (        forth.asm):04277         
FE26 52414D204F4B3A20 (        forth.asm):04278         RAMOKM  fcc     'RAM OK: 32 KB'
     3332204B42
FE33 0D0A00           (        forth.asm):04279         CRLFSTR fcb     CR,LF,NUL
                      (        forth.asm):04280         
FE36 52414D2063686563 (        forth.asm):04281         RAMFM   fcc     'RAM check failed'
     6B206661696C6564
FE46 0D0A00           (        forth.asm):04282                 fcb     CR,LF,NUL
                      (        forth.asm):04283         
                      (        forth.asm):04284                 IFEQ    CSSNTVE
FE49 206F6B           (        forth.asm):04285         OKFEEDB fcc     ' ok'           As per GNU Forth's implementation...
                      (        forth.asm):04286                 ELSE
FE4C                  (        forth.asm):04287         OKFEEDB fcc     ' OK'
                      (        forth.asm):04288                 ENDC
FE4C 0D0A00           (        forth.asm):04289                 fcb     CR,LF,NUL
                      (        forth.asm):04290         
                      (        forth.asm):04291         * Error messages for IODZHDL.
FE4F 496C6C6567616C20 (        forth.asm):04292         IOPERRM fcn     'Illegal opcode near '
     6F70636F6465206E
     6561722000
FE64 4469766973696F6E (        forth.asm):04293         DV0ERRM fcn     'Division by 0 near '
     2062792030206E65
     61722000
                      (        forth.asm):04294         
FE78 4461746120737461 (        forth.asm):04295         ERRMTBL fcn     'Data stack overflow'   Error 0
     636B206F76657266
     6C6F7700
FE8C 4461746120737461 (        forth.asm):04296                 fcn     'Data stack underflow'  Error 1
     636B20756E646572
     666C6F7700
FEA1 556E646566696E65 (        forth.asm):04297                 fcn     'Undefined'             Error 2
     6400
FEAB 557365722041424F (        forth.asm):04298                 fcn     'User ABORT'            Error 3
     525400
FEB6 00               (        forth.asm):04299                 fcn     ''                      Error 4 (formerly "Division by zero")
FEB7 4D697373696E6720 (        forth.asm):04300                 fcn     'Missing word name'     Error 5
     776F7264206E616D
     6500
FEC9 496E636F72726563 (        forth.asm):04301                 fcn     'Incorrect STATE'       Error 6
     7420535441544500
FED9 52657475726E2073 (        forth.asm):04302                 fcn     'Return stack overflow' Error 7
     7461636B206F7665
     72666C6F7700
FEEF 52657475726E2073 (        forth.asm):04303                 fcn     'Return stack underflow' Error 8
     7461636B20756E64
     6572666C6F7700
FF06 496C6C6567616C20 (        forth.asm):04304                 fcn     'Illegal construct'     Error 9
     636F6E7374727563
     7400
FF18 417373657274696F (        forth.asm):04305                 fcn     'Assertion failed'      Error 10
     6E206661696C6564
     00
FF29 522F4F20776F7264 (        forth.asm):04306                 fcn     'R/O word'              Error 11
     00
FF32 4D697373696E6720 (        forth.asm):04307                 fcn     'Missing delimiter'     Error 12
     64656C696D697465
     7200
FF44 496C6C6567616C20 (        forth.asm):04308                 fcn     'Illegal argument'      Error 13
     617267756D656E74
     00
FF55 4E6F206D61746368 (        forth.asm):04309                 fcn     'No matching CREATE'    Error 14
     696E672043524541
     544500
FF68 496E76616C696420 (        forth.asm):04310                 fcn     'Invalid BASE'          Error 15
     4241534500
FF75 576F7264206E616D (        forth.asm):04311                 fcn     'Word name too long'    Error 16
     6520746F6F206C6F
     6E6700
FF88 494F206572726F72 (        forth.asm):04312                 fcn     'IO error'              Error 17
     00
                      (        forth.asm):04313         
                      (        forth.asm):04314         * A-list used for numeric literal base prefixes.
FF91 24               (        forth.asm):04315         BASALST fcc     '$'             Hexadecimal prefix
FF92 10               (        forth.asm):04316                 fcb     16
FF93 26               (        forth.asm):04317                 fcc     '&'             Decimal prefix
FF94 0A               (        forth.asm):04318                 fcb     10
FF95 23               (        forth.asm):04319                 fcc     '#'             Decimal prefix (an ANSI concession)
FF96 0A               (        forth.asm):04320                 fcb     10
FF97 25               (        forth.asm):04321                 fcc     '%'             Binary prefix
FF98 02               (        forth.asm):04322                 fcb     2
FF99 40               (        forth.asm):04323                 fcc     '@'             Octal prefix
FF9A 08               (        forth.asm):04324                 fcb     8
FF9B 00               (        forth.asm):04325                 fcb     0               End of list marker
                      (        forth.asm):04326         
                      (        forth.asm):04327         * Under no circumstance should the following symbol be negative!
     0054             (        forth.asm):04328         AVL     equ     VECTBL-*        Available EEPROM space left
                      (        forth.asm):04329         
                      (        forth.asm):04330         *******************************************************************************
                      (        forth.asm):04331         * Interrupt vector table
                      (        forth.asm):04332                 org     VECTBL
                      (        forth.asm):04333         
FFF0 E000             (        forth.asm):04334                 fdb     IODZHDL         Illegal opcode/Division by zero trap
FFF2 E035             (        forth.asm):04335                 fdb     SWI3HDL         SWI 3 interrupt vector address
FFF4 E035             (        forth.asm):04336                 fdb     SWI2HDL         SWI 2 interrupt vector address
FFF6 E035             (        forth.asm):04337                 fdb     FIRQHDL         FIRQ interrupt vector address
FFF8 E035             (        forth.asm):04338                 fdb     IRQHDL          IRQ interrupt vector address
FFFA E035             (        forth.asm):04339                 fdb     SWIHDL          SWI interrupt vector address
FFFC E035             (        forth.asm):04340                 fdb     NMIHDL          NMI vector address
FFFE E037             (        forth.asm):04341                 fdb     RSTHDL          RESET vector address
                      (        forth.asm):04342         

Symbol Table:
[ G] _BS                              E1F1
[ G] _DMPHDR                          FB07
[ G] _DMPINT                          FAE6
[ G] _INTERP                          E0BF
[ G] ABORT                            EFCD
[ G] ABS                              EE64
[ G] AC8N1                            0014
[ G] ACCEPT                           F648
[ G] ACD16                            0001
[ G] ACD64                            0002
[ G] ACDVSEL                          0001
[ G] ACIACTL                          D800
[ G] ACIADAT                          D801
[ G] ACIISVC                          0080
[ G] ACIRDRF                          0001
[ G] ACIRSET                          0043
[ G] ACIRTS0                          0015
[ G] ACIRTS1                          0055
[ G] ACITDRE                          0002
[ G] ACQMOVP                          E49E
[ G] ACQVMRA                          E4A1
[ G] ACRDINT                          0000
[ G] ACRST                            0003
[ G] ACRTS0                           0000
[ G] ACRTS1                           0040
[ G] ADDS                             E19C
[ G] ADIV16                           E16F
[ G] AGAIN                            EE9D
[ G] ALLOT                            FC87
[ G] AND                              ED51
[ G] AVL                              0054
[ G] BASALST                          FF91
[ G] BASBKUP                          0128
[ G] BASE                             F9EE
[ G] BCSOPC                           2503
[ G] BDICEND                          010C
[ G] BDIRTY                           0004
[ G] BEGIN                            EE8F
[ G] BFDISP                           0410
[ G] BIN                              F9FC
[ G] BINUSE                           0001
[ G] BKCHAR                           F14D
[ G] BKIN2PT                          E71E
[ G] BKQUOT                           F01B
[ G] BKSLSH                           F203
[ G] BL                               F565
[ G] BLANKS                           FCC4
[ G] BLK                              E950
[ G] BLKSIZ                           0400
[ G] BLOCK                            E921
[ G] BLSTWAD                          010A
[ G] BMAPPD                           0002
[ G] BNEOPC                           2603
[ G] BOBLKNO                          0402
[ G] BOFLAGS                          0401
[ G] BOOTMSG                          FDCD
[ G] BOTERM                           0400
[ G] BS                               0008
[ G] BSBFADR                          011C
[ G] BUF0                             03F0
[ G] BUF1                             0800
[ G] BUFFER                           E8D4
[ G] BYE                              F143
[ G] CCOMMA                           FC62
[ G] CELLS                            FD19
[ G] CF1BKRD                          E823
[ G] CF1BKWR                          E83E
[ G] CF1BPRE                          E806
[ G] CF1SRD                           E7D8
[ G] CF1SWR                           E7F1
[ G] CFANTHS                          E783
[ G] CFBASE                           C000
[ G] CFBSYB                           0080
[ G] CFCARDP                          0137
[ G] CFCHIGR                          C005
[ G] CFCLOWR                          C004
[ G] CFCMDIS                          E768
[ G] CFCMMIR                          0138
[ G] CFCOMDR                          C007
[ G] CFDATAR                          C000
[ G] CFDRHDR                          C006
[ G] CFDRQB                           0008
[ G] CFDRSEL                          E77A
[ G] CFDSCB                           0010
[ G] CFDWFB                           0020
[ G] CFERRB                           0001
[ G] CFERRCD                          0139
[ G] CFERRCK                          E75B
[ G] CFERROR                          C001
[ G] CFETCH                           FD9E
[ G] CFFEATR                          C001
[ G] CFIDDEV                          00EC
[ G] CFINIT                           E7A1
[ G] CFLAG                            0001
[ G] CFR1SRA                          E7F0
[ G] CFRDY                            E745
[ G] CFRDYB                           0040
[ G] CFRSCTS                          0020
[ G] CFSCNTR                          C002
[ G] CFSCSZ                           0200
[ G] CFSETFT                          00EF
[ G] CFSNUMR                          C003
[ G] CFSTATR                          C007
[ G] CFWAIT                           E73D
[ G] CFWSCTS                          0030
[ G] CHAR                             F15C
[ G] CHKNDPT                          E37F
[ G] CHKRTS                           E139
[ G] CKBASE                           E2CC
[ G] CKBASRA                          E2DC
[ G] CKDPTRA                          E38A
[ G] CKNBPFX                          E29F
[ G] CMDBFSZ                          0084
[ G] CMDBUF                           02CC
[ G] CMDLNSZ                          0129
[ G] CMOVE                            FCF3
[ G] CMOVED                           FCD4
[ G] CMP2                             E48A
[ G] CMP2RA                           E48D
[ G] CMPCOM1                          F077
[ G] CMPCOMA                          F068
[ G] COM                              ED65
[ G] COM0                             ED6C
[ G] COMMA                            FC76
[ G] COMP                             E10C
[ G] COMPC                            F07A
[ G] COMPLRA                          E122
[ G] COMPR                            F092
[ G] CONS                             EACC
[ G] CONTIND                          F6F3
[ G] CONVERT                          F373
[ G] COUNT                            F5DE
[ G] CR                               000D
[ G] CREAT0                           EA5B
[ G] CREAT1                           EA73
[ G] CREATE                           EA51
[ G] CRLF                             F5AA
[ G] CRLFSTR                          FE33
[ G] CSSNTVE                          0000
[ G] CSTORE                           FD7F
[ G] CSUMFLM                          EBB9
[ G] CSVT100                          FDC5
[ G] CURTOKL                          0133
[ G] CVISSGN                          0132
[ G] CVNSTR                           E336
[ G] CVT                              F438
[ G] CVT0                             F43F
[ G] CVT1                             F447
[ G] CVTB                             F4E8
[ G] CVTE                             F3EC
[ G] CVTFCN                           0130
[ G] DASHTR                           F5F4
[ G] DDUMP                            FB45
[ G] DEBUG                            0000
[ G] DECIMAL                          FA18
[ G] DEFFLG                           0135
[ G] DEFFLM                           0040
[ G] DEPTH                            EA3B
[ G] DEV0                             C000
[ G] DEV1                             C400
[ G] DEV2                             C800
[ G] DEV3                             CC00
[ G] DEV4                             D000
[ G] DEV5                             D400
[ G] DEV6                             D800
[ G] DEV7                             DC00
[ G] DICEND                           0108
[ G] DIFF                             ECF1
[ G] DIV                              F850
[ G] DIV1                             F859
[ G] DIVFCN                           012D
[ G] DLESS                            F2D7
[ G] DNEG                             F2A7
[ G] DO                               EBD0
[ G] DOES                             EA7B
[ G] DOESEX                           EA8A
[ G] DOEX                             EBE3
[ G] DOT                              F4F4
[ G] DOTR                             F51E
[ G] DOTR0                            F528
[ G] DOTTICK                          FB2E
[ G] DPLUS                            F288
[ G] DPOPRA                           E6E6
[ G] DPSHRA                           E6D7
[ G] DROP                             FBCE
[ G] DUMP                             FA36
[ G] DUP                              FBBF
[ G] DV0ERRM                          FE64
[ G] DZEQ                             F2CA
[ G] EBUFS                            E859
[ G] ELSE                             ECA5
[ G] EMIT                             F75F
[ G] EMPT1B                           E274
[ G] EMPTYB                           E26C
[ G] EMXASXT                          E14D
[ G] END                              EF06
[ G] EQ                               ECD8
[ G] ERRHD1                           E653
[ G] ERRHDLR                          E650
[ G] ERRMTBL                          FE78
[ G] ERRPCK                           FC05
[ G] ETX                              0003
[ G] EXCT                             F129
[ G] EXIT                             EEBB
[ G] EXPCT1                           F639
[ G] EXPECT                           F62F
[ G] F83DIVF                          012E
[ G] FDCTSYM                          E4AC
[ G] FDIVADJ                          F88D
[ G] FETCH                            FDB8
[ G] FFLAG                            0040
[ G] FILL                             FC9D
[ G] FILL1                            FCAA
[ G] FIND                             EFE1
[ G] FINDSYM                          E522
[ G] FIRQHDL                          E035
[ G] FLUSH                            E8AE
[ G] FNDPLD                           0110
[ G] FORGET                           F0DA
[ G] FORTHIN                          E240
[ G] GETCH                            E1C5
[ G] GETS                             E1FD
[ G] HDMP2                            E18D
[ G] HDMP4                            E174
[ G] HDRCSUM                          EB63
[ G] HDRSKIP                          EB59
[ G] HERE                             FD38
[ G] HEX                              FA29
[ G] HEX1D                            E15B
[ G] HEXBFSZ                          0050
[ G] HEXBUF                           0350
[ G] HOLD                             F41C
[ G] HT                               0009
[ G] HVCONV                           0001
[ G] HVFIRQ                           0000
[ G] ICHECK                           EB6F
[ G] IF                               EC64
[ G] IFEX                             EC8C
[ G] ILLOPC                           00C7
[ G] IMDFLG                           0134
[ G] IMDFLM                           0080
[ G] IMMED                            EB13
[ G] IMMED1                           EB22
[ G] INDEX                            E992
[ G] INDI                             EF6B
[ G] INDIP                            EF90
[ G] INDJ                             EF9A
[ G] INDJP                            EFA3
[ G] INDK                             EFAD
[ G] INF                              EE23
[ G] INIT                             E047
[ G] INSBPAD                          F4D5
[ G] INTERP                           E0A7
[ G] INTISRA                          E0FA
[ G] INTRPRA                          E107
[ G] INVERT                           ED78
[ G] IODZHDL                          E000
[ G] IOERR                            E7EB
[ G] IOPERRM                          FE4F
[ G] IOSTRT                           C000
[ G] IRDPTH                           012B
[ G] IRQHDL                           E035
[ G] ISNEGF                           0131
[ G] JMPOPC                           007E
[ G] JSRLAST                          0114
[ G] JSROPC                           00BD
[ G] KEY                              F74D
[ G] KEYP                             F728
[ G] LAST                             FD2B
[ G] LBRACK                           F013
[ G] LDXOPC                           008E
[ G] LEAVE                            EF56
[ G] LF                               000A
[ G] LINE                             E977
[ G] LIST                             E9C6
[ G] LITER                            E46E
[ G] LITERAL                          EAA8
[ G] LOAD                             F682
[ G] LOAD1                            F693
[ G] LOCWRT                           E40C
[ G] LOOP                             EBEC
[ G] LOOP1                            EBF7
[ G] LOOPEX                           EC13
[ G] LPAR                             F1C9
[ G] LSTWAD                           0106
[ G] LWMNRA                           E422
[ G] MAX                              EE32
[ G] MDIV                             F8A7
[ G] MILLIS                           F70D
[ G] MILLIS1                          F71C
[ G] MIN                              EE4B
[ G] MIN1PST                          E38A
[ G] MIN2PST                          E38F
[ G] MIN3PST                          E394
[ G] MIN4PST                          E399
[ G] MINTLRA                          E0BD
[ G] MINUS                            F7A3
[ G] MINUSST                          FD6E
[ G] MOD                              F89A
[ G] MONFLM                           0020
[ G] MONITOR                          EB3C
[ G] MORE                             E0D5
[ G] MOVE                             FD03
[ G] MROT                             FC56
[ G] MRUBUFA                          011A
[ G] MSLCNT                           03E2
[ G] MULT                             F81D
[ G] NAK                              0015
[ G] NBCTFB0                          0136
[ G] NCLR                             EA1F
[ G] NDCTWKS                          E548
[ G] NEGATE                           EE7B
[ G] NFLAG                            0008
[ G] NIP                              FBAE
[ G] NMCVCRA                          E134
[ G] NMCVIRA                          E0D0
[ G] NMIHDL                           E035
[ G] NOT                              EDD0
[ G] NPOP                             E6D8
[ G] NPUSH                            E6CA
[ G] NSTBOT                           024C
[ G] NSTKSZ                           00C0
[ G] NSTTOP                           018C
[ G] NUL                              0000
[ G] NULP                             EDB8
[ G] NUMCVRA                          E335
[ G] NUMCVT                           E2DC
[ G] NXTBLK                           F6D8
[ G] NXTBLK1                          F6E3
[ G] OCTAL                            FA09
[ G] OKFEEDB                          FE49
[ G] ONEL                             F7DF
[ G] ONEM                             F7B4
[ G] ONEP                             F782
[ G] ONEPST                           FD59
[ G] OR                               ED3E
[ G] OVER                             FC1F
[ G] PAD                              F5B3
[ G] PADBSZ                           0051
[ G] PADBUF                           013A
[ G] PAGE                             F59C
[ G] PAYLOAD                          F8FF
[ G] PICK                             FBED
[ G] PICK1                            FBF8
[ G] PLOAD                            010E
[ G] PLOOP                            EC18
[ G] PLOOPEX                          EC26
[ G] PLOPEX1                          EC29
[ G] PLUS                             F771
[ G] PLUSST                           FD45
[ G] PLUSST1                          FD54
[ G] POSTPON                          F027
[ G] pragma                           0000
[ G] PRBLKIN                          E62B
[ G] PSTR                             F221
[ G] ptop0                            F4FD
[ G] PUTCH                            E1B6
[ G] PUTCR                            E1E7
[ G] PUTS                             E1DA
[ G] QMARK                            FDAD
[ G] QRYDUP                           FB80
[ G] QUIT                             EFB6
[ G] RAMCHK                           E057
[ G] RAMFAIL                          E069
[ G] RAMFM                            FE36
[SG] RAMFTCH                          0C15
[SG] RAMFTCH                          0C14
[ G] RAMOK                            E07B
[ G] RAMOKM                           FE26
[ G] RAMSIZE                          8000
[ G] RAMSTRT                          0000
[ G] RBRACK                           F009
[ G] RCLR                             EA2B
[ G] RDEPTH                           012A
[ G] REALEND                          FDC5
[ G] RECADDR                          0112
[ G] RECURSE                          F0CA
[ G] RELFEAT                          0001
[ G] REPEAT                           EF1B
[ G] RFETCH                           EF88
[ G] RFROM                            EF3E
[ G] ROLL                             FC2C
[ G] ROLL1                            FC37
[ G] ROMSTRT                          E000
[ G] ROT                              FC4A
[ G] RPICKN                           EF72
[ G] RPOP                             E705
[ G] RPOPRA                           E71E
[ G] RPSHRA                           E704
[ G] RPUSH                            E6E7
[ G] RSBSPFX                          E2C5
[ G] RSP                              0100
[ G] RSTBOT                           02CC
[ G] RSTHDL                           E037
[ G] RSTKSZ                           0080
[ G] RSTRCT                           EB2C
[ G] RSTTOP                           024C
[ G] RTSOPC                           0039
[ G] RTSREMV                          012C
[ G] SAVBUF                           E86D
[ G] SCNETOK                          E28D
[ G] SCNSTOK                          E27F
[ G] SCR                              E96A
[ G] SERBSZ                           0040
[ G] SHARPS                           F42C
[ G] SHIFT                            F7F5
[ G] SIGN                             F405
[ G] SINFEQ                           ED0B
[ G] SLEN                             E1A7
[ G] SOURCE                           F1E5
[ G] SP                               0020
[ G] SPACE                            F571
[ G] SPACES                           F57F
[ G] SQUOTE                           F236
[ G] SSDFEAT                          0001
[ G] STATE                            F9DF
[ G] STOD                             EA05
[ G] STORE                            FD8F
[ G] STRSL1                           F8BD
[ G] STRSLMD                          F8E8
[ G] STRSLSH                          F8B3
[ G] STSLFCN                          012F
[ G] SUP                              EE14
[ G] SWAP                             FBD9
[ G] SWDIC                            E39E
[ G] SWI2HDL                          E035
[ G] SWI3HDL                          E035
[ G] SWIHDL                           E035
[ G] SYSSTK                           F8F5
[ G] TBUFF                            03A0
[ G] TBUFSZ                           0048
[ G] TERPRET                          F658
[ G] THEEND                           FDB8
[ G] THEN                             ECC6
[ G] THRU                             F6B6
[ G] TOIN                             E95D
[ G] TOKENEP                          0104
[ G] TOKENSP                          0102
[ G] TOR                              EF4A
[ G] TUCK                             FB96
[ G] TWODIV                           F840
[ G] TWODROP                          F326
[ G] TWODUP                           F335
[ G] TWOFTCH                          F35F
[ G] TWOL                             F7EA
[ G] TWOM                             F7C4
[ G] TWOOVER                          F2F0
[ G] TWOP                             F792
[ G] TWOSTOR                          F34D
[ G] TWOSWAP                          F309
[ G] TWOTIM                           F830
[ G] TYPE                             F5C0
[ G] UBASE                            011E
[ G] UBLK                             0124
[ G] UDOT                             F514
[ G] UDOTR                            F55A
[ G] UINF                             EDE9
[ G] UNLESS                           EC93
[ G] UNLOOP                           EC54
[ G] UNTIL                            EEDD
[ G] UPDATE                           E8B9
[ G] USCR                             0126
[ G] USTATE                           0120
[ G] USUP                             EDD9
[ G] UTOIN                            0122
[ G] VARCON                           E480
[ G] VARCON1                          E482
[ G] VARCON2                          E485
[ G] VARI                             EAEE
[ G] VARSPC                           0100
[ G] VECTBL                           FFF0
[ G] VLIST                            F90F
[ G] VLPRVEP                          0116
[ G] VLPRVHD                          0118
[ G] VT100                            0000
[ G] WBIFDRT                          E885
[ G] WDICSPC                          0C10
[ G] WHILE                            EF0F
[ G] WITHIN                           EDF9
[ G] WORD                             F185
[ G] WRLNMSK                          001F
[ G] WTOOLNG                          E43F
[ G] XOFF                             0013
[ G] XON                              0011
[ G] XOR                              ED27
[ G] XOR1                             ED39
[ G] ZEROL                            F7D5
[ G] ZFLAG                            0004
[ G] ZGREAT                           ED84
[ G] ZLESS                            ED9E
